void sub_24F4C18E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::BakeErrorCode const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  v8 = (std::string *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  LODWORD(v8->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_24F4C19A4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::BakeErrorCode,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::BakeErrorCode,std::pair<cv3d::cv::gess::alg::BakeErrorCode const,std::string> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_24F4C1B08(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[19]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[19]>(char *a1)
{
  int8x8_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_24F4C1C58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[25]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[25]>(char *a1)
{
  int8x8_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_24F4C1CF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[14],char [14],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[14]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[14]>(char *a1)
{
  int8x8_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_24F4C1D88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[24]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[24]>(char *a1)
{
  int8x8_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_24F4C1E20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[27],char [27],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[27]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[27]>(char *a1)
{
  int8x8_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_24F4C1EB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(uint64_t a1, char **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v3 + 32), *a2);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (v6 >= 0) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v5 + 32), *a2) << 24) >= 1)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    uint8x8_t v4 = a1;
  }
  else {
    uint8x8_t v4 = *a1;
  }
  if (v3 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  size_t v6 = strlen(__s);

  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(v4, v5, __s, v6);
}

unsigned __int8 *nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(unsigned __int8 *result, double *a2)
{
  uint64_t v2 = (char *)result;
  int v3 = *result;
  switch(v3)
  {
    case 5:
      double v4 = (double)*((uint64_t *)result + 1);
      break;
    case 7:
      double v4 = *((double *)result + 1);
      break;
    case 6:
      double v4 = (double)*((unint64_t *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      size_t v6 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v7, v6);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be number, but is ", &v7, &v8);
      nlohmann::detail::type_error::create(302, (uint64_t)&v8, exception);
  }
  *a2 = v4;
  return result;
}

void sub_24F4C2098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t cv3d::cv::gess::io::internal::ReportQuad2Json(float *a1, uint64_t a2)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  v25[0] = 0;
  v26 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  uint64_t v5 = cv3d::cv::gess::io::internal::ReportBake2Json((uint64_t)(a1 + 16), (uint64_t)v25, v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>((uint64_t)v63, "time_hierarchy_building");
  v64 = v63;
  char v65 = 1;
  uint64_t v6 = *(void *)a1;
  v66[0] = 7;
  v67[0] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
  v67[1] = v66;
  char v68 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, (uint64_t)v63, 2, 1, 2);
  v70 = v69;
  char v71 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>((uint64_t)v57, "time_fields_computation");
  v58 = v57;
  char v59 = 1;
  uint64_t v7 = *((void *)a1 + 1);
  v60[0] = 7;
  v61[0] = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
  v61[1] = v60;
  char v62 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v72, (uint64_t)v57, 2, 1, 2);
  v72[2] = v72;
  char v73 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>((uint64_t)v51, "time_edge_classification");
  v52 = v51;
  char v53 = 1;
  uint64_t v8 = *((void *)a1 + 2);
  v54[0] = 7;
  v55[0] = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v54);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v54);
  v55[1] = v54;
  char v56 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v74, (uint64_t)v51, 2, 1, 2);
  v74[2] = v74;
  char v75 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>((uint64_t)v45, "time_quadface_extraction");
  v46 = v45;
  char v47 = 1;
  uint64_t v9 = *((void *)a1 + 3);
  v48[0] = 7;
  v49[0] = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
  v49[1] = v48;
  char v50 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v76, (uint64_t)v45, 2, 1, 2);
  v76[2] = v76;
  char v77 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v39, "time_post_processing");
  v40 = v39;
  char v41 = 1;
  uint64_t v10 = *((void *)a1 + 4);
  v42[0] = 7;
  v43[0] = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  v43[1] = v42;
  char v44 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v78, (uint64_t)v39, 2, 1, 2);
  v78[2] = v78;
  char v79 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[20],char [20],0>((uint64_t)v33, "quadmesh_grid_scale");
  v34 = v33;
  char v35 = 1;
  double v11 = a1[10];
  v36[0] = 7;
  *(double *)v37 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  v37[1] = v36;
  char v38 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v80, (uint64_t)v33, 2, 1, 2);
  v80[2] = v80;
  char v81 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v27, "report_bake");
  v28 = v27;
  char v29 = 1;
  uint64_t v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v25);
  char v32 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v82, (uint64_t)v27, 2, 1, 2);
  v83 = v82;
  char v84 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)v69, 7, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  char v12 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v23[0];
  v23[0] = v12;
  v13 = *(uint64_t **)(a2 + 8);
  *(void *)(a2 + 8) = v24;
  v24 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  for (uint64_t i = 0; i != -224; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v82[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v82[i + 8], v82[i]);
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v30[j]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v30[j + 8], v30[j]);
  }
  for (uint64_t k = 0; k != -8; k -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[k * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v37[k], v36[k * 8]);
  }
  for (uint64_t m = 0; m != -8; m -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v42[m * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v43[m], v42[m * 8]);
  }
  for (uint64_t n = 0; n != -8; n -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v48[n * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v49[n], v48[n * 8]);
  }
  for (iuint64_t i = 0; ii != -8; ii -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v54[ii * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55[ii], v54[ii * 8]);
  }
  for (juint64_t j = 0; jj != -8; jj -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v60[jj * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v61[jj], v60[jj * 8]);
  }
  for (kuint64_t k = 0; kk != -8; kk -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v66[kk * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v67[kk], v66[kk * 8]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
  return v5;
}

void sub_24F4C2698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  for (uint64_t i = 192; i != -32; i -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(v62 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a14 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a22 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a30 + m));
  for (uint64_t n = 32; n != -32; n -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a38 + n));
  for (iuint64_t i = 32; ii != -32; ii -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a46 + ii));
  for (juint64_t j = 32; jj != -32; jj -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a54 + jj));
  for (kuint64_t k = 32; kk != -32; kk -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a62 + kk));
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a12);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::internal::Json2ReportQuad(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "report_bake");
  uint64_t v5 = cv3d::cv::gess::io::internal::Json2ReportBake(v4, a2 + 64);
  uint64_t v6 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_hierarchy_building");
  uint64_t v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v6, (double *)&v13);
  *(void *)a2 = v13;
  uint64_t v7 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_fields_computation");
  uint64_t v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v7, (double *)&v13);
  *(void *)(a2 + 8) = v13;
  uint64_t v8 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_edge_classification");
  uint64_t v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v8, (double *)&v13);
  *(void *)(a2 + 16) = v13;
  uint64_t v9 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_quadface_extraction");
  uint64_t v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v9, (double *)&v13);
  *(void *)(a2 + 24) = v13;
  uint64_t v10 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_post_processing");
  uint64_t v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v10, (double *)&v13);
  *(void *)(a2 + 32) = v13;
  double v11 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "quadmesh_grid_scale");
  LODWORD(v13) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v11, (float *)&v13);
  *(_DWORD *)(a2 + 40) = v13;
  return v5;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[20],char [20],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[20]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[20]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_24F4C29F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::render::CompileShaders(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = *(void **)a1;
  id v11 = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  uint64_t v6 = GetMTLLibrary(v5, (uint64_t)&v11, (uint64_t *)&__p, a3);
  id v7 = v11;
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v7 == 0;
}

void sub_24F4C2AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::render::CalculateMetalProjectionMatrix@<S0>(cv3d::cv::gess::render *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>, unsigned int a8@<W1>, uint64_t a9@<X8>)
{
  float v9 = (float)((float)this / a4) * a2;
  float v10 = (float)((float)a8 / a5) * a2;
  float v11 = v9 + (float)((float)((float)-a6 / a4) * a2);
  float v12 = (float)(a7 / a5) * a2;
  *(float *)a9 = (float)(a2 + a2) / (float)(v11 - (float)(v11 - v9));
  *(void *)(a9 + 12) = 0;
  *(void *)(a9 + 4) = 0;
  *(float *)(a9 + 20) = (float)(a2 + a2) / (float)(v12 - (float)(v12 - v10));
  *(void *)(a9 + 24) = 0;
  *(float *)(a9 + 32) = (float)(v11 + (float)(v11 - v9)) / (float)(v11 - (float)(v11 - v9));
  *(float *)(a9 + 36) = (float)(v12 + (float)(v12 - v10)) / (float)(v12 - (float)(v12 - v10));
  *(float *)(a9 + 40) = (float)-a3 / (float)(a3 - a2);
  *(void *)(a9 + 44) = 3212836864;
  *(_DWORD *)(a9 + 52) = 0;
  float result = (float)-(float)(a3 * a2) / (float)(a3 - a2);
  *(float *)(a9 + 56) = result;
  *(_DWORD *)(a9 + 60) = 0;
  return result;
}

float cv3d::cv::gess::render::GetDepth(int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v14 = *a1;
  long long v3 = *((_OWORD *)a1 + 1);
  uint64_t v17 = *((void *)a1 + 4);
  long long v4 = *(_OWORD *)(a1 + 1);
  *((void *)&v4 + 1) = v3;
  long long v15 = v4;
  int v16 = a1[6];
  int v18 = a1[10];
  float v5 = *((float *)a1 + 14);
  uint64_t v12 = 0;
  *(void *)uint64_t v13 = 0;
  uint64_t v6 = (float *)&v14;
  do
  {
    uint64_t v7 = 0;
    float v8 = 0.0;
    float v9 = v6;
    do
    {
      float v10 = *v9;
      v9 += 3;
      float v8 = v8 + (float)(v10 * *(float *)(a2 + v7));
      v7 += 4;
    }
    while (v7 != 12);
    v13[v2++ - 2] = v8;
    ++v6;
  }
  while (v2 != 3);
  return v5 + v13[0];
}

void cv3d::cv::gess::render::ComputeMeshNearFarPlane(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
  {
    unint64_t v4 = 0;
    float v5 = (uint64_t *)(a1 + 8);
    float v6 = 1.1755e-38;
    float v7 = 3.4028e38;
    do
    {
      unsigned int v12 = *(_DWORD *)(a1 + 176);
      uint64_t v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v5, &v12);
      uint64_t v9 = *(void *)(v8 + 40);
      if (v4 >= (*(void *)(v8 + 48) - v9) >> 4) {
        cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
      }
      long long v11 = *(_OWORD *)(v9 + 16 * v4);
      float Depth = cv3d::cv::gess::render::GetDepth(a2, (uint64_t)&v11);
      if (Depth > 0.0000001 && v6 < Depth) {
        float v6 = Depth;
      }
      if (Depth > 0.0000001 && Depth < v7) {
        float v7 = Depth;
      }
      ++v4;
    }
    while (v4 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  }
}

uint64_t cv3d::cv::gess::render::OffScreenRender(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v16 = (void *)MEMORY[0x25335EE00]();
  unint64_t v17 = *(void *)(a2 + 8) - *(void *)a2;
  if (((*(void *)(a1 + 160) - *(void *)(a1 + 152)) & 0x3FFFFFFFCLL) != 0 && (v17 & 0x3FFFFFFFC0) != 0)
  {
    unint64_t v19 = (v17 >> 6);
    if (v19 == (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 6
      && v19 == (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3
      && v19 == (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3)
    {
      uint64_t v20 = *(void *)(a2 + 96);
      uint64_t v21 = *(void *)(a2 + 104);
      if (v19 == (v21 - v20) >> 3)
      {
        uint64_t v33 = a1;
        v30 = a3;
        if (v21 == v20)
        {
LABEL_20:
          unint64_t v31 = v19;
          if (!*(unsigned char *)(a2 + 147)) {
            goto LABEL_42;
          }
          std::string::basic_string[abi:ne180100]<0>(&v36, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
          int v35 = 0;
          uint64_t v34 = 0;
          int v29 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v33 + 56), (uint64_t)&v34, (unsigned __int8 *)&v36);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v36, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
          uint64_t v34 = 0;
          int __val = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v33 + 80), (uint64_t)&v34, (unsigned __int8 *)&v36);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          if (v29 != -1 && __val != -1)
          {
LABEL_42:
            if (*(unsigned char *)(a2 + 145))
            {
              std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](v30);
              std::vector<std::vector<float>>::resize(v30, v31);
            }
            if (*(unsigned char *)(a2 + 146))
            {
              std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a4);
              std::vector<std::vector<float>>::resize(a4, v31);
            }
            if (*(unsigned char *)(a2 + 147))
            {
              std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a5);
              std::vector<std::vector<float>>::resize(a5, v31);
            }
            if (*(unsigned char *)(a2 + 148))
            {
              std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a6);
              std::vector<std::vector<float>>::resize(a6, v31);
            }
            if (*(unsigned char *)(a2 + 149))
            {
              std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a7);
              std::vector<std::vector<float>>::resize(a7, v31);
            }
            if (*(unsigned char *)(a2 + 150))
            {
              std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a8);
              std::vector<std::vector<float>>::resize(a8, v31);
            }
            operator new();
          }
        }
        else
        {
          unsigned int v22 = 0;
          unsigned int v23 = 0;
          v24 = (unsigned int *)(v20 + 4);
          unsigned int v25 = 1;
          while (1)
          {
            unsigned int v26 = *(v24 - 1);
            if (!v26 || !*v24) {
              break;
            }
            if (v22 <= v26) {
              unsigned int v22 = *(v24 - 1);
            }
            if (v23 <= *v24) {
              unsigned int v23 = *v24;
            }
            v24 += 2;
            if (v19 <= v25++) {
              goto LABEL_20;
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_24F4C4D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,uint64_t a38,uint64_t a39,void *a40,void *a41,void *a42,void *a43)
{
  v45 = *(void **)(v43 - 128);
  if (v45)
  {
    *(void *)(v43 - 120) = v45;
    operator delete(v45);
  }
  v46 = *(id **)(v43 - 104);
  *(void *)(v43 - 104) = 0;
  if (v46) {
    std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100](v43 - 104, v46);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  float v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
      uint64_t v8 = *(void **)a1;
      float v6 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    long long v15 = &v13[8 * v12];
    *(void *)int v14 = *a2;
    float v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *float v6 = *a2;
    float v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t cv3d::cv::gess::math::Matrix4T<float>::operator*@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = 0;
  *a3 = xmmword_24F57867C;
  a3[1] = *(_OWORD *)algn_24F57868C;
  a3[2] = xmmword_24F57869C;
  a3[3] = unk_24F5786AC;
  do
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = 0;
      float v7 = 0.0;
      do
      {
        float v7 = v7 + (float)(*(float *)(result + 4 * v6) * *(float *)(v5 + v6));
        v6 += 4;
      }
      while (v6 != 16);
      *((float *)&a3[v4++] + v3) = v7;
      v5 += 16;
    }
    while (v4 != 4);
    ++v3;
    result += 4;
  }
  while (v3 != 4);
  return result;
}

void std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x25335EA10);
  }
}

void cv3d::cv::gess::isochart::CMaxFlow::ReserveMemory(cv3d::cv::gess::isochart::CMaxFlow *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)((char *)this + 144);
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18);
  uint64_t v10 = *((void *)this + 21);
  uint64_t v9 = (char *)this + 168;
  *((void *)v9 + 1) = v10;
  cv3d::cv::gess::isochart::CMaxFlow::Node::m_expect_degree = a4;
  if (a3) {
    unint64_t v11 = a3;
  }
  else {
    unint64_t v11 = a4 * a2;
  }
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::reserve(v8, a2);

  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Edge>::reserve((void **)v9, 2 * v11);
}

uint64_t std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_24F4C55EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Edge>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v3, a2);
    float v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::InitGraphCut(cv3d::cv::gess::isochart::CMaxFlow *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)((char *)this + 144);
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18);
  uint64_t v10 = *((void *)this + 21);
  uint64_t v9 = (char *)this + 168;
  *((void *)v9 + 1) = v10;
  cv3d::cv::gess::isochart::CMaxFlow::Node::m_expect_degree = a4;
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::resize(v8, a2);
  unint64_t v11 = a4 * a2;
  if (a3) {
    unint64_t v11 = a3;
  }
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Edge>::reserve((void **)v9, 2 * v11);
  return 1;
}

void sub_24F4C5734(void *a1)
{
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      uint64_t v8 = *(void **)(v3 - 40);
      if (v8)
      {
        *(void *)(v3 - 32) = v8;
        operator delete(v8);
      }
      v3 -= 48;
    }
    a1[1] = v7;
  }
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::AddNode(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 4)) {
    cv3d::cv::gess::isochart::CMaxFlow::AddNode();
  }
  *(void *)this = v1 + 1;
  return v1;
}

void cv3d::cv::gess::isochart::CMaxFlow::AddEdge(cv3d::cv::gess::isochart::CMaxFlow *this, int a2, int a3, float a4, float a5)
{
  unint64_t v11 = (char *)this + 184;
  unint64_t v10 = *((void *)this + 23);
  unint64_t v12 = (void *)((char *)this + 168);
  uint64_t v13 = (void *)*((void *)this + 22);
  if ((unint64_t)v13 >= v10)
  {
    uint64_t v15 = ((uint64_t)v13 - *v12) >> 4;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60) {
      goto LABEL_75;
    }
    uint64_t v17 = v10 - *v12;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)this + 184, v18);
    }
    else {
      unint64_t v19 = 0;
    }
    uint64_t v20 = &v19[16 * v15];
    uint64_t v21 = &v19[16 * v18];
    *(void *)uint64_t v20 = 0;
    *((void *)v20 + 1) = 0;
    int v14 = (float *)(v20 + 16);
    unsigned int v23 = (char *)*((void *)this + 21);
    unsigned int v22 = (char *)*((void *)this + 22);
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v22 - 1);
        v20 -= 16;
        v22 -= 16;
      }
      while (v22 != v23);
      unsigned int v22 = (char *)*v12;
    }
    *((void *)this + 21) = v20;
    *((void *)this + 22) = v14;
    *((void *)this + 23) = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    void *v13 = 0;
    v13[1] = 0;
    int v14 = (float *)(v13 + 2);
  }
  *((void *)this + 22) = v14;
  int v24 = (((unint64_t)v14 - *((void *)this + 21)) >> 4) - 1;
  *(v14 - 4) = a4;
  *(v14 - 3) = a4;
  uint64_t v25 = *((void *)this + 18) + 48 * a2;
  unint64_t v28 = *(void *)(v25 + 24);
  v27 = (char **)(v25 + 24);
  unint64_t v26 = v28;
  v30 = v27 - 1;
  int v29 = *(v27 - 1);
  if ((unint64_t)v29 >= v28)
  {
    v72 = v12;
    char v32 = (void **)(v27 - 2);
    uint64_t v33 = *(v27 - 2);
    uint64_t v34 = (v29 - v33) >> 2;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v36 = v26 - (void)v33;
    if (v36 >> 1 > v35) {
      unint64_t v35 = v36 >> 1;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      char v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v27, v37);
      int v29 = *v30;
      uint64_t v33 = (char *)*v32;
    }
    else
    {
      char v38 = 0;
    }
    v39 = &v38[4 * v34];
    v40 = &v38[4 * v37];
    *(_DWORD *)v39 = v24;
    unint64_t v31 = v39 + 4;
    while (v29 != v33)
    {
      int v41 = *((_DWORD *)v29 - 1);
      v29 -= 4;
      *((_DWORD *)v39 - 1) = v41;
      v39 -= 4;
    }
    *char v32 = v39;
    uint64_t *v30 = v31;
    *v27 = v40;
    if (v33) {
      operator delete(v33);
    }
    unint64_t v12 = v72;
  }
  else
  {
    *(_DWORD *)int v29 = v24;
    unint64_t v31 = v29 + 4;
  }
  uint64_t *v30 = v31;
  if (*(void *)(*((void *)this + 18) + 48 * a2 + 16) - *(void *)(*((void *)this + 18) + 48 * a2 + 8) >= 0x19uLL) {
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
  }
  *((_DWORD *)v14 - 2) = a2;
  *((_DWORD *)v14 - 1) = a3;
  uint64_t v43 = (void *)*((void *)this + 22);
  unint64_t v42 = *((void *)this + 23);
  if ((unint64_t)v43 < v42)
  {
    *uint64_t v43 = 0;
    v43[1] = 0;
    char v44 = (float *)(v43 + 2);
    goto LABEL_51;
  }
  uint64_t v45 = ((uint64_t)v43 - *v12) >> 4;
  unint64_t v46 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 60) {
LABEL_75:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  uint64_t v47 = v42 - *v12;
  if (v47 >> 3 > v46) {
    unint64_t v46 = v47 >> 3;
  }
  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v48 = v46;
  }
  if (v48) {
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)v11, v48);
  }
  else {
    v49 = 0;
  }
  char v50 = &v49[16 * v45];
  v51 = &v49[16 * v48];
  *(void *)char v50 = 0;
  *((void *)v50 + 1) = 0;
  char v44 = (float *)(v50 + 16);
  char v53 = (char *)*((void *)this + 21);
  v52 = (char *)*((void *)this + 22);
  if (v52 != v53)
  {
    do
    {
      *((_OWORD *)v50 - 1) = *((_OWORD *)v52 - 1);
      v50 -= 16;
      v52 -= 16;
    }
    while (v52 != v53);
    v52 = (char *)*v12;
  }
  *((void *)this + 21) = v50;
  *((void *)this + 22) = v44;
  *((void *)this + 23) = v51;
  if (v52) {
    operator delete(v52);
  }
LABEL_51:
  *((void *)this + 22) = v44;
  int v54 = (((unint64_t)v44 - *((void *)this + 21)) >> 4) - 1;
  *(v44 - 4) = a5;
  *(v44 - 3) = a5;
  uint64_t v55 = *((void *)this + 18) + 48 * a3;
  unint64_t v58 = *(void *)(v55 + 24);
  v57 = (char **)(v55 + 24);
  unint64_t v56 = v58;
  v60 = v57 - 1;
  char v59 = *(v57 - 1);
  if ((unint64_t)v59 >= v58)
  {
    uint64_t v62 = (void **)(v57 - 2);
    v63 = *(v57 - 2);
    uint64_t v64 = (v59 - v63) >> 2;
    unint64_t v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v66 = v56 - (void)v63;
    if (v66 >> 1 > v65) {
      unint64_t v65 = v66 >> 1;
    }
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v65;
    }
    if (v67)
    {
      char v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v57, v67);
      char v59 = *v60;
      v63 = (char *)*v62;
    }
    else
    {
      char v68 = 0;
    }
    v69 = &v68[4 * v64];
    v70 = &v68[4 * v67];
    *(_DWORD *)v69 = v54;
    v61 = v69 + 4;
    while (v59 != v63)
    {
      int v71 = *((_DWORD *)v59 - 1);
      v59 -= 4;
      *((_DWORD *)v69 - 1) = v71;
      v69 -= 4;
    }
    *uint64_t v62 = v69;
    *v60 = v61;
    *v57 = v70;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *(_DWORD *)char v59 = v54;
    v61 = v59 + 4;
  }
  *v60 = v61;
  if (*(void *)(*((void *)this + 18) + 48 * a3 + 16) - *(void *)(*((void *)this + 18) + 48 * a3 + 8) >= 0x19uLL) {
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
  }
  *((_DWORD *)v44 - 2) = a3;
  *((_DWORD *)v44 - 1) = a2;
  if (v24 != (v54 ^ 1)) {
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
  }
  if (v54 != (v24 ^ 1)) {
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
  }
}

float cv3d::cv::gess::isochart::CMaxFlow::ResetResident(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  *((_DWORD *)this + 2) = 0;
  uint64_t v1 = *((void *)this + 18);
  uint64_t v2 = *((void *)this + 19) - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 48;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v4 = (float *)(v1 + 4);
    do
    {
      float result = *(v4 - 1);
      *unint64_t v4 = result;
      v4 += 12;
      --v3;
    }
    while (v3);
  }
  uint64_t v6 = *((void *)this + 21);
  uint64_t v7 = *((void *)this + 22) - v6;
  if (v7)
  {
    unint64_t v8 = v7 >> 4;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v9 = (float *)(v6 + 4);
    do
    {
      float result = *(v9 - 1);
      float *v9 = result;
      v9 += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

float cv3d::cv::gess::isochart::CMaxFlow::SetTweights(cv3d::cv::gess::isochart::CMaxFlow *this, int a2, float a3, float a4, double a5)
{
  *(float *)&a5 = a3 - a4;
  *(int32x2_t *)(*((void *)this + 18) + 48 * a2) = vdup_lane_s32(*(int32x2_t *)&a5, 0);
  if (a4 < a3) {
    a3 = a4;
  }
  float result = a3 + *((float *)this + 2);
  *((float *)this + 2) = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::Initialization(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  long long v1 = *((_OWORD *)this + 7);
  long long v2 = *((_OWORD *)this + 8);
  long long v3 = *((_OWORD *)this + 5);
  v15[0] = *((_OWORD *)this + 6);
  v15[1] = v1;
  v15[2] = v2;
  long long v4 = *((_OWORD *)this + 4);
  v14[0] = *((_OWORD *)this + 3);
  v14[1] = v4;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v14[2] = v3;
  uint64_t v5 = *((void *)this + 18);
  if ((int)(-1431655765 * ((unint64_t)(*((void *)this + 19) - v5) >> 4)) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = v5 + v7;
      float v10 = *(float *)(v9 + 4);
      if (v10 > 0.0) {
        break;
      }
      if (v10 < 0.0)
      {
        int v11 = 2;
        unint64_t v12 = 0xFFFFFFECFFFFFFF6;
        goto LABEL_8;
      }
      *(_OWORD *)(v9 + 32) = xmmword_24F5786D0;
LABEL_9:
      ++v8;
      uint64_t v5 = *((void *)this + 18);
      v7 += 48;
      if (v8 >= (int)(-1431655765 * ((unint64_t)(*((void *)this + 19) - v5) >> 4))) {
        goto LABEL_10;
      }
    }
    int v11 = 1;
    unint64_t v12 = 0xFFFFFFECFFFFFFF5;
LABEL_8:
    *(void *)(v9 + 32) = v12;
    *(_DWORD *)(v9 + 40) = v11;
    *(_DWORD *)(v9 + 44) = 1;
    cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v8);
    goto LABEL_9;
  }
LABEL_10:
  std::deque<int>::~deque[abi:ne180100](v14);
  return std::deque<int>::~deque[abi:ne180100](v15);
}

void sub_24F4C5E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CMaxFlow::push_active(cv3d::cv::gess::isochart::CMaxFlow *this, int a2)
{
  int v2 = a2;
  if (a2 < 0) {
    cv3d::cv::gess::isochart::CMaxFlow::push_active();
  }
  std::deque<int>::push_back((void *)this + 6, &v2);
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1 = *((void *)this + 11);
  if (!v1) {
    return 0;
  }
  uint64_t v47 = (char *)this + 48;
  while (1)
  {
    uint64_t v3 = *(unsigned int *)(*(void *)(*((void *)this + 7) + ((*((void *)this + 10) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*((void *)this + 10) & 0x3FFLL));
    ++*((void *)this + 10);
    *((void *)this + 11) = v1 - 1;
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v47, 1);
    uint64_t v4 = v3;
    uint64_t v5 = *((void *)this + 18);
    uint64_t v6 = v5 + 48 * (int)v3;
    int v8 = *(_DWORD *)(v6 + 40);
    uint64_t v7 = (_DWORD *)(v6 + 40);
    if (v8)
    {
      uint64_t v9 = v5 + 48 * (int)v3;
      uint64_t v12 = *(void *)(v9 + 8);
      int v11 = (uint64_t *)(v9 + 8);
      uint64_t v10 = v12;
      if (v11[1] != v12) {
        break;
      }
    }
LABEL_22:
    uint64_t v1 = *((void *)this + 11);
    if (!v1) {
      return 0;
    }
  }
  unint64_t v13 = 0;
  uint64_t v14 = v5 + 48 * (int)v3 + 44;
  while (1)
  {
    int v15 = *(_DWORD *)(v10 + 4 * v13);
    uint64_t v16 = *((void *)this + 21);
    int v17 = *(_DWORD *)(v16 + 16 * v15 + 12);
    uint64_t v18 = *((void *)this + 18);
    if (*v7 != 1) {
      break;
    }
    uint64_t v19 = v18 + 48 * v17;
    int v22 = *(_DWORD *)(v19 + 40);
    uint64_t v21 = (int *)(v19 + 40);
    int v20 = v22;
    if (v22 == 1) {
      goto LABEL_21;
    }
    uint64_t v23 = v16 + 16 * v15;
    float v25 = *(float *)(v23 + 4);
    int v24 = (float *)(v23 + 4);
    if (v25 <= 0.0) {
      goto LABEL_21;
    }
    if (v20 == 2)
    {
      int v37 = v4;
      cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v4);
      char v38 = this;
      int v39 = v37;
      int v40 = v17;
      int v41 = v15;
      goto LABEL_26;
    }
    if (v20) {
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    }
    uint64_t v43 = (_DWORD *)v14;
    uint64_t v45 = v4;
    cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v17);
    uint64_t v14 = (uint64_t)v43;
    uint64_t v4 = v45;
    unint64_t v26 = (_DWORD *)(v18 + 48 * v17);
    v26[8] = v45;
    v26[9] = v15;
    v26[11] = *v43 + 1;
    if (*v24 <= 0.0) {
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    }
    int v27 = 1;
LABEL_20:
    *uint64_t v21 = v27;
LABEL_21:
    ++v13;
    uint64_t v10 = *v11;
    if (v13 >= (v11[1] - *v11) >> 2) {
      goto LABEL_22;
    }
  }
  if (*v7 != 2) {
    cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
  }
  uint64_t v28 = v18 + 48 * v17;
  int v30 = *(_DWORD *)(v28 + 40);
  uint64_t v21 = (int *)(v28 + 40);
  int v29 = v30;
  if (v30 == 2) {
    goto LABEL_21;
  }
  int v31 = v15 ^ 1;
  uint64_t v32 = v16 + 16 * v31;
  float v34 = *(float *)(v32 + 4);
  uint64_t v33 = (float *)(v32 + 4);
  if (v34 <= 0.0) {
    goto LABEL_21;
  }
  if (v29 != 1)
  {
    if (v29) {
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    }
    char v44 = (_DWORD *)v14;
    uint64_t v46 = v4;
    cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v17);
    uint64_t v14 = (uint64_t)v44;
    uint64_t v4 = v46;
    unint64_t v35 = (_DWORD *)(v18 + 48 * v17);
    v35[8] = v46;
    v35[9] = v31;
    v35[11] = *v44 + 1;
    if (*v33 <= 0.0) {
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    }
    int v27 = 2;
    goto LABEL_20;
  }
  int v42 = v4;
  cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v4);
  char v38 = this;
  int v39 = v17;
  int v40 = v42;
  int v41 = v31;
LABEL_26:
  cv3d::cv::gess::isochart::CMaxFlow::trace_current_path(v38, v39, v40, v41);
  return 1;
}

void cv3d::cv::gess::isochart::CMaxFlow::trace_current_path(cv3d::cv::gess::isochart::CMaxFlow *this, int a2, int a3, int a4)
{
  uint64_t v4 = (void **)((char *)this + 24);
  uint64_t v5 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 4) = v5;
  if (a4 == -1 || *(float *)(*((void *)this + 21) + 16 * a4 + 4) <= 0.0) {
    cv3d::cv::gess::isochart::CMaxFlow::trace_current_path();
  }
  int v11 = (void *)((char *)this + 40);
  unint64_t v10 = *((void *)this + 5);
  if ((unint64_t)v5 >= v10)
  {
    uint64_t v13 = v10 - (void)v5;
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, v15);
    int v17 = (char *)*((void *)this + 3);
    uint64_t v18 = (char *)*((void *)this + 4);
    int v20 = &v16[v19];
    *uint64_t v16 = a4;
    uint64_t v12 = (char *)(v16 + 1);
    while (v18 != v17)
    {
      int v21 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--uint64_t v16 = v21;
    }
    *((void *)this + 3) = v16;
    *((void *)this + 4) = v12;
    *((void *)this + 5) = v20;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v5 = a4;
    uint64_t v12 = (char *)(v5 + 1);
  }
  *((void *)this + 4) = v12;
  while (1)
  {
    uint64_t v22 = *((void *)this + 18);
    if (*(_DWORD *)(v22 + 48 * a2 + 40) != 1) {
      cv3d::cv::gess::isochart::CMaxFlow::trace_current_path();
    }
    int v23 = *(_DWORD *)(v22 + 48 * a2 + 32);
    if (v23 == -11) {
      break;
    }
    int v24 = *(_DWORD *)(v22 + 48 * a2 + 36);
    if ((unint64_t)v12 >= *v11)
    {
      unint64_t v26 = (char *)*v4;
      uint64_t v27 = (v12 - (unsigned char *)*v4) >> 2;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62) {
LABEL_60:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      uint64_t v29 = *v11 - (void)v26;
      if (v29 >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, v30);
        unint64_t v26 = (char *)*((void *)this + 3);
        uint64_t v12 = (char *)*((void *)this + 4);
      }
      else
      {
        int v31 = 0;
      }
      uint64_t v32 = &v31[4 * v27];
      *(_DWORD *)uint64_t v32 = v24;
      float v25 = v32 + 4;
      while (v12 != v26)
      {
        int v33 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v32 - 1) = v33;
        v32 -= 4;
      }
      *((void *)this + 3) = v32;
      *((void *)this + 4) = v25;
      *((void *)this + 5) = &v31[4 * v30];
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v12 = v24;
      float v25 = v12 + 4;
    }
    *((void *)this + 4) = v25;
    uint64_t v12 = v25;
    a2 = v23;
  }
  *((_DWORD *)this + 3) = a2;
  uint64_t v34 = *((void *)this + 18);
  if (*(_DWORD *)(v34 + 48 * a3 + 40) != 2) {
    goto LABEL_58;
  }
  uint64_t v35 = a3;
  int v36 = *(_DWORD *)(v34 + 48 * a3 + 32);
  if (v36 != -10)
  {
    while (1)
    {
      a3 = v36;
      int v37 = *(_DWORD *)(v34 + 48 * v35 + 36);
      if ((unint64_t)v12 >= *v11)
      {
        char v38 = (char *)*v4;
        uint64_t v39 = (v12 - (unsigned char *)*v4) >> 2;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62) {
          goto LABEL_60;
        }
        uint64_t v41 = *v11 - (void)v38;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, v42);
          char v38 = (char *)*((void *)this + 3);
          uint64_t v12 = (char *)*((void *)this + 4);
        }
        else
        {
          uint64_t v43 = 0;
        }
        char v44 = &v43[4 * v39];
        *(_DWORD *)char v44 = v37;
        uint64_t v45 = v44 + 4;
        while (v12 != v38)
        {
          int v46 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v44 - 1) = v46;
          v44 -= 4;
        }
        *((void *)this + 3) = v44;
        *((void *)this + 4) = v45;
        *((void *)this + 5) = &v43[4 * v42];
        if (v38) {
          operator delete(v38);
        }
        uint64_t v12 = v45;
      }
      else
      {
        *(_DWORD *)uint64_t v12 = v37;
        v12 += 4;
      }
      *((void *)this + 4) = v12;
      uint64_t v34 = *((void *)this + 18);
      if (*(_DWORD *)(v34 + 48 * a3 + 40) != 2) {
        break;
      }
      uint64_t v35 = a3;
      int v36 = *(_DWORD *)(v34 + 48 * a3 + 32);
      if (v36 == -10) {
        goto LABEL_56;
      }
    }
LABEL_58:
    cv3d::cv::gess::isochart::CMaxFlow::trace_current_path();
  }
LABEL_56:
  *((_DWORD *)this + 4) = a3;
}

float cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1 = (int *)*((void *)this + 3);
  int v2 = (int *)*((void *)this + 4);
  if (v1 == v2) {
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  }
  int v4 = *((_DWORD *)this + 3);
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = v5 + 48 * v4;
  float v8 = *(float *)(v6 + 4);
  uint64_t v7 = (float *)(v6 + 4);
  float v9 = v8;
  if (v8 <= 0.0) {
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  }
  int v10 = *((_DWORD *)this + 4);
  uint64_t v11 = v5 + 48 * v10;
  float v13 = *(float *)(v11 + 4);
  uint64_t v12 = (float *)(v11 + 4);
  float v14 = v13;
  if (v13 >= 0.0) {
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  }
  unint64_t v15 = v2 - v1;
  float v16 = -v14;
  if (v9 <= v16) {
    float v17 = v9;
  }
  else {
    float v17 = v16;
  }
  if (v15 <= 1) {
    unint64_t v15 = 1;
  }
  do
  {
    uint64_t v18 = *v1++;
    uint64_t v19 = *((void *)this + 21) + 16 * v18;
    if (*(float *)(v19 + 4) < v17) {
      float v17 = *(float *)(v19 + 4);
    }
    --v15;
  }
  while (v15);
  if (v17 <= 0.0) {
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  }
  *uint64_t v7 = v9 - v17;
  float v20 = v17 + *v12;
  *uint64_t v12 = v20;
  if (*((void *)this + 17)) {
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  }
  if (fabsf(*v7) <= 1.1755e-38)
  {
    uint64_t v21 = v5 + 48 * v4;
    *(void *)(v21 + 32) = 0x1300000013;
    *(_DWORD *)(v21 + 44) = 0;
    int v35 = v4;
    std::deque<int>::push_back((void *)this + 12, &v35);
    float v20 = *v12;
  }
  if (fabsf(v20) <= 1.1755e-38)
  {
    uint64_t v22 = v5 + 48 * v10;
    *(void *)(v22 + 32) = 0x1300000013;
    *(_DWORD *)(v22 + 44) = 0;
    int v35 = *((_DWORD *)this + 4);
    std::deque<int>::push_back((void *)this + 12, &v35);
  }
  uint64_t v23 = *((void *)this + 3);
  if (*((void *)this + 4) != v23)
  {
    for (unint64_t i = 0; i < (*((void *)this + 4) - v23) >> 2; ++i)
    {
      uint64_t v25 = *(int *)(v23 + 4 * i);
      uint64_t v26 = *((void *)this + 21);
      uint64_t v27 = v26 + 16 * v25;
      *(float *)(v27 + 4) = *(float *)(v27 + 4) - v17;
      *(float *)(v26 + 16 * (v25 ^ 1) + 4) = v17 + *(float *)(v26 + 16 * (v25 ^ 1) + 4);
      if (fabsf(*(float *)(v27 + 4)) <= 1.1755e-38)
      {
        uint64_t v28 = *((void *)this + 18);
        int v30 = *(_DWORD *)(v27 + 8);
        int v29 = *(_DWORD *)(v27 + 12);
        int v31 = *(_DWORD *)(v28 + 48 * v30 + 40);
        if (v31 != 2)
        {
          if (v31 != 1 || *(_DWORD *)(v28 + 48 * v29 + 40) != 1) {
            goto LABEL_28;
          }
          uint64_t v32 = v28 + 48 * v29;
          *(void *)(v32 + 32) = 0x1300000013;
          *(_DWORD *)(v32 + 44) = 0;
          int v35 = v29;
          goto LABEL_27;
        }
        if (*(_DWORD *)(v28 + 48 * v29 + 40) == 2)
        {
          uint64_t v33 = v28 + 48 * v30;
          *(void *)(v33 + 32) = 0x1300000013;
          *(_DWORD *)(v33 + 44) = 0;
          int v35 = v30;
LABEL_27:
          std::deque<int>::push_back((void *)this + 12, &v35);
        }
      }
LABEL_28:
      uint64_t v23 = *((void *)this + 3);
    }
  }
  float result = v17 + *((float *)this + 2);
  *((float *)this + 2) = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st(cv3d::cv::gess::isochart::CMaxFlow *this, int a2)
{
  uint64_t v2 = *((void *)this + 18);
  if (*(_DWORD *)(v2 + 48 * a2 + 40))
  {
    while (1)
    {
      int v3 = a2;
      a2 = *(_DWORD *)(v2 + 48 * a2 + 32);
      if (a2 == -20) {
        break;
      }
      if ((a2 + 11) <= 1)
      {
        if (fabsf(*(float *)(v2 + 48 * v3 + 4)) < 1.1755e-38) {
          cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st();
        }
        return 1;
      }
    }
  }
  return 0;
}

void cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (!v1) {
    return;
  }
  int v3 = (char *)this + 96;
  uint64_t v28 = (char *)this + 96;
  do
  {
    int v4 = *(_DWORD *)(*(void *)(*((void *)this + 13) + ((*((void *)this + 16) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (*((void *)this + 16) & 0x3FFLL));
    ++*((void *)this + 16);
    *((void *)this + 17) = v1 - 1;
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v3, 1);
    uint64_t v5 = *((void *)this + 18);
    if (fabsf(*(float *)(v5 + 48 * v4 + 4)) > 1.1755e-38) {
      cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans();
    }
    uint64_t v29 = *((void *)this + 18);
    uint64_t v6 = v5 + 48 * v4;
    uint64_t v9 = *(void *)(v6 + 8);
    float v8 = (uint64_t *)(v6 + 8);
    uint64_t v7 = v9;
    int v10 = v8 + 1;
    if (v8[1] == v9) {
      goto LABEL_29;
    }
    int v11 = 0;
    unint64_t v12 = 0;
    float v13 = (int *)(v29 + 48 * v4 + 40);
    int v30 = -1;
    int v31 = -1;
    do
    {
      int v14 = *v13;
      if (!*v13) {
        goto LABEL_17;
      }
      uint64_t v15 = *(int *)(v7 + 4 * v12);
      uint64_t v16 = *((void *)this + 21);
      int v17 = *(_DWORD *)(v16 + 16 * v15 + 12);
      if (v14 != *(_DWORD *)(*((void *)this + 18) + 48 * v17 + 40)) {
        goto LABEL_17;
      }
      if (v14 == 2)
      {
        uint64_t v18 = v16 + 16 * v15;
LABEL_12:
        if (fabsf(*(float *)(v18 + 4)) <= 1.1755e-38) {
          goto LABEL_17;
        }
        goto LABEL_13;
      }
      if (v14 == 1)
      {
        uint64_t v18 = v16 + 16 * (v15 ^ 1);
        goto LABEL_12;
      }
LABEL_13:
      if (cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st(this, v17)
        && (!v11 || v11 > *(_DWORD *)(*((void *)this + 18) + 48 * v17 + 44)))
      {
        int v30 = v15 ^ (*v13 == 1);
        int v31 = v17;
        int v11 = *(_DWORD *)(*((void *)this + 18) + 48 * v17 + 44);
      }
LABEL_17:
      ++v12;
      uint64_t v7 = *v8;
    }
    while (v12 < (*v10 - *v8) >> 2);
    if (v31 != -1)
    {
      int v3 = v28;
      uint64_t v19 = (_DWORD *)(v29 + 48 * v4);
      v19[8] = v31;
      v19[9] = v30;
      v19[11] = *(_DWORD *)(*((void *)this + 18) + 48 * v31 + 44) + 1;
      goto LABEL_30;
    }
    int v3 = v28;
    if (*v10 != v7)
    {
      unint64_t v20 = 0;
      do
      {
        if (*v13)
        {
          uint64_t v21 = *(int *)(v7 + 4 * v20);
          uint64_t v22 = *((void *)this + 21);
          int v23 = *(_DWORD *)(v22 + 16 * v21 + 12);
          uint64_t v24 = *((void *)this + 18);
          if (*v13 == *(_DWORD *)(v24 + 48 * v23 + 40))
          {
            uint64_t v25 = v24 + 48 * v23;
            int v27 = *(_DWORD *)(v25 + 32);
            uint64_t v26 = (void *)(v25 + 32);
            if (v27 == v4)
            {
              void *v26 = 0x1300000013;
              *(_DWORD *)(v24 + 48 * v23 + 44) = 0;
              int v32 = v23;
              std::deque<int>::push_back(v28, &v32);
              uint64_t v22 = *((void *)this + 21);
            }
            if (*(float *)(v22 + 16 * (v21 ^ 1) + 4) > 0.0) {
              cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v23);
            }
          }
        }
        ++v20;
        uint64_t v7 = *v8;
      }
      while (v20 < (*v10 - *v8) >> 2);
    }
LABEL_29:
    *(_DWORD *)(v29 + 48 * v4 + 40) = 0;
LABEL_30:
    uint64_t v1 = *((void *)this + 17);
  }
  while (v1);
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    int v4 = *(void **)(i - 40);
    if (v4)
    {
      *(void *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 48);
      a3 -= 48;
      *(void *)(v7 - 48) = v8;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 32);
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 48;
    uint64_t v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

cv3d::cv::gess::isochart::CMaxFlow::Node *std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (cv3d::cv::gess::isochart::CMaxFlow::Node *)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)*((void *)result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      long long v13 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v7 + 48 * a2);
      uint64_t v14 = 48 * a2;
      do
      {
        uint64_t result = cv3d::cv::gess::isochart::CMaxFlow::Node::Node(v7);
        uint64_t v7 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v7 + 48);
        v14 -= 48;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v22 = result;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>((uint64_t)result, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)&v12[48 * v8];
    v19[0] = v12;
    v19[1] = v15;
    unint64_t v20 = v15;
    uint64_t v21 = &v12[48 * v11];
    uint64_t v16 = 3 * a2;
    int v17 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v15 + 48 * a2);
    uint64_t v18 = 16 * v16;
    do
    {
      cv3d::cv::gess::isochart::CMaxFlow::Node::Node(v15);
      uint64_t v15 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v15 + 48);
      v18 -= 48;
    }
    while (v18);
    unint64_t v20 = v17;
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__swap_out_circular_buffer(a1, v19);
    return (cv3d::cv::gess::isochart::CMaxFlow::Node *)std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_24F4C6D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::isochart::CMaxFlow::Node *cv3d::cv::gess::isochart::CMaxFlow::Node::Node(cv3d::cv::gess::isochart::CMaxFlow::Node *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_24F5786D0;
  std::vector<unsigned int>::reserve((std::vector<int> *)((char *)this + 8), cv3d::cv::gess::isochart::CMaxFlow::Node::m_expect_degree);
  return this;
}

void sub_24F4C6DA0(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24F4C7110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<int *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      int v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<int *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<int>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

double cv3d::cv::gess::isochart::CGraphcut::CGraphcut(cv3d::cv::gess::isochart::CGraphcut *this)
{
  *((void *)this + 23) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void cv3d::cv::gess::isochart::CGraphcut::~CGraphcut(cv3d::cv::gess::isochart::CGraphcut *this)
{
  unint64_t v2 = (void **)((char *)this + 144);
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18);
  uint64_t v3 = (void *)*((void *)this + 21);
  *((void *)this + 22) = v3;
  *((_DWORD *)this + 2) = 0;
  *(void *)this = 0;
  if (v3) {
    operator delete(v3);
  }
  unint64_t v5 = v2;
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::deque<int>::~deque[abi:ne180100]((void *)this + 12);
  std::deque<int>::~deque[abi:ne180100]((void *)this + 6);
  int v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

void cv3d::cv::gess::isochart::CGraphcut::Clear(cv3d::cv::gess::isochart::CGraphcut *this)
{
  *((void *)this + 22) = *((void *)this + 21);
  *((_DWORD *)this + 2) = 0;
  *(void *)this = 0;
}

uint64_t cv3d::cv::gess::isochart::CGraphcut::AddNode(cv3d::cv::gess::isochart::CGraphcut *this, float a2, float a3)
{
  uint64_t v6 = cv3d::cv::gess::isochart::CMaxFlow::AddNode(this);
  cv3d::cv::gess::isochart::CMaxFlow::SetTweights(this, v6, a2, a3, v7);
  return v6;
}

float cv3d::cv::gess::isochart::CGraphcut::CutGraph(cv3d::cv::gess::isochart::CGraphcut *this, float *a2)
{
  cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow(this);
  float result = *((float *)this + 2);
  *a2 = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  if (*(void *)this != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 4)) {
    cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow();
  }
  cv3d::cv::gess::isochart::CMaxFlow::Initialization(this);
  uint64_t result = cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath(this);
  if (result)
  {
    do
    {
      cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath(this);
      cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans(this);
      uint64_t result = cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath(this);
    }
    while ((result & 1) != 0);
  }
  return result;
}

BOOL cv3d::cv::gess::isochart::CGraphcut::IsInSourceDomain(cv3d::cv::gess::isochart::CGraphcut *this, int a2)
{
  return *(_DWORD *)(*((void *)this + 18) + 48 * a2 + 40) == 1;
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

cv3d::cv::gess::isochart::Geodesic *cv3d::cv::gess::isochart::Geodesic::Geodesic(cv3d::cv::gess::isochart::Geodesic *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)((char *)this + 28) = -1;
  *((_DWORD *)this + 9) = -1;
  *(_OWORD *)((char *)this + 40) = xmmword_24F5786E0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *(void *)((char *)this + 68) = -1;
  *((_DWORD *)this + 19) = 0;
  *((void *)this + 10) = -1;
  *((_DWORD *)this + 22) = -1;
  *(_OWORD *)((char *)this + 92) = xmmword_24F5786E0;
  *(void *)((char *)this + 108) = 0;
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 15) = -1;
  *((_DWORD *)this + 32) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  uint64_t v3 = (std::vector<unsigned int> *)((char *)this + 200);
  int v4 = (char *)this + 176;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 45) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 46) = -1;
  *((_DWORD *)this + 94) = -1;
  *(_OWORD *)((char *)this + 380) = xmmword_24F5786E0;
  *((_DWORD *)this + 99) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = -1;
  *((void *)this + 52) = 0xFFFFFFFF00000000;
  *((void *)this + 53) = -1;
  *((_OWORD *)this + 27) = xmmword_24F5786E0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0xFFFFFFFF00000000;
  *((void *)this + 58) = 0xFFFFFFFFLL;
  *((void *)this + 59) = a2;
  *((unsigned char *)this + 160) = 1;
  std::vector<BOOL>::resize((uint64_t)this + 296, (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2, 0);
  unint64_t v5 = *((void *)this + 38);
  if (v5)
  {
    std::string __p = (void *)*((void *)this + 37);
    int v18 = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&__p, v5);
  }
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)v4, (0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*(void *)(*((void *)this + 59) + 136) - *(void *)(*((void *)this + 59) + 128)) >> 2)) >> 1);
  std::vector<int>::resize(v3, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*(void *)(*((void *)this + 59) + 136) - *(void *)(*((void *)this + 59) + 128)) >> 2));
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL
     * ((uint64_t)(*(void *)(*((void *)this + 59) + 136) - *(void *)(*((void *)this + 59) + 128)) >> 2);
  LOBYTE(v19) = 0;
  std::vector<BOOL>::vector(&__p, v6, (unsigned __int8 *)&v19);
  uint64_t v7 = *((void *)this + 59);
  uint64_t v8 = __p;
  if (*(void *)(v7 + 136) != *(void *)(v7 + 128))
  {
    unint64_t v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 1;
    do
    {
      if ((v8[v9 >> 6] & (1 << v9)) == 0)
      {
        *(_DWORD *)(*((void *)this + 22) + 4 * v10) = v11 - 1;
        uint64_t v12 = *((void *)this + 59);
        unsigned int v19 = v11 - 1;
        unint64_t v13 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12 + 104, &v19);
        uint64_t v8 = __p;
        *((void *)__p + (v9 >> 6)) |= 1 << v9;
        *(void *)((char *)v8 + ((v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
        uint64_t v14 = *((void *)this + 25);
        *(_DWORD *)(v14 + 4 * v9) = v10;
        *(_DWORD *)(v14 + 4 * v13) = v10++;
        uint64_t v7 = *((void *)this + 59);
      }
      unint64_t v9 = v11;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v7 + 136) - *(void *)(v7 + 128)) >> 2) > v11++);
    goto LABEL_10;
  }
  if (__p) {
LABEL_10:
  }
    operator delete(v8);
  return this;
}

void sub_24F4C7C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void **a14)
{
  int v27 = v18;
  a14 = v16 + 18;
  std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v20 = *(void **)(v14 + 320);
  if (v20)
  {
    *(void *)(v14 + 328) = v20;
    operator delete(v20);
  }
  if (*v27) {
    operator delete(*v27);
  }
  uint64_t v21 = *(void **)(v14 + 272);
  if (v21) {
    operator delete(v21);
  }
  unint64_t v22 = *(void **)(v14 + 248);
  if (v22)
  {
    *(void *)(v14 + 256) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v14 + 224);
  if (v23)
  {
    *(void *)(v14 + 232) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 208) = v24;
    operator delete(v24);
  }
  unint64_t v25 = *v17;
  if (*v17)
  {
    *(void *)(v14 + 184) = v25;
    operator delete(v25);
  }
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::~MaxHeap(v15);
  uint64_t v26 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::Geodesic::SetSrcVertexIdx(cv3d::cv::gess::isochart::Geodesic *this, unsigned int a2)
{
  *((_DWORD *)this + 6) = a2;
  while (*((void *)this + 21))
  {
    cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at((uint64_t *)this + 17, 0, &v46);
    int v4 = *(std::__shared_weak_count **)v47;
    uint64_t v46 = 0;
    *(void *)uint64_t v47 = 0;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (*(void *)v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v47);
      }
    }
  }
  std::vector<float>::resize((uint64_t)this, (uint64_t)(*(void *)(*((void *)this + 59) + 112) - *(void *)(*((void *)this + 59) + 104)) >> 2);
  uint64_t v5 = *((void *)this + 1) - *(void *)this;
  if (v5 >= 1) {
    memset_pattern16(*(void **)this, &unk_24F5786F0, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  std::vector<float>::resize((uint64_t)this + 224, (uint64_t)(*(void *)(*((void *)this + 59) + 112) - *(void *)(*((void *)this + 59) + 104)) >> 2);
  unint64_t v6 = (void *)*((void *)this + 28);
  uint64_t v7 = *((void *)this + 29) - (void)v6;
  if (v7 >= 1) {
    memset_pattern16(v6, &unk_24F5786F0, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  }
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)this + 248, (uint64_t)(*(void *)(*((void *)this + 59) + 112) - *(void *)(*((void *)this + 59) + 104)) >> 2);
  std::vector<BOOL>::resize((uint64_t)this + 272, (uint64_t)(*(void *)(*((void *)this + 59) + 112) - *(void *)(*((void *)this + 59) + 104)) >> 2, 0);
  unint64_t v8 = *((void *)this + 35);
  if (v8)
  {
    uint64_t v46 = *((void *)this + 34);
    *(_DWORD *)uint64_t v47 = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v46, v8);
  }
  unint64_t v9 = *((void *)this + 23) - *((void *)this + 22);
  unint64_t v10 = (v9 >> 2);
  std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::resize((uint64_t *)this + 43, v10);
  if ((v9 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      v53[0] = *(_DWORD *)(*((void *)this + 22) + 4 * v11);
      if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, v53) + 12) == a2)
      {
        BOOL v12 = 1;
      }
      else
      {
        uint64_t v13 = *((void *)this + 59) + 104;
        uint64_t v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v13, v53);
        BOOL v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v13, v14) + 12) == a2;
      }
      uint64_t v15 = cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, v53);
      uint64_t v16 = *((void *)this + 59) + 104;
      uint64_t v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, v53);
      uint64_t v18 = cv3d::cv::gess::mesh::Topology::h(v16, v17);
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v52, 3uLL);
      int v20 = *(_DWORD *)(v15 + 16);
      unsigned int v19 = (unsigned int *)(v15 + 16);
      if (v20 == -1)
      {
        int v23 = 0;
      }
      else
      {
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*((void *)this + 59), v19, v52);
        uint64_t v21 = 0;
        char v22 = 0;
        do
        {
          if (*(_DWORD *)((char *)v52[0] + v21) == a2) {
            char v22 = 1;
          }
          v21 += 4;
        }
        while (v21 != 12);
        int v23 = v22 & 1;
      }
      int v25 = *(_DWORD *)(v18 + 16);
      uint64_t v24 = (unsigned int *)(v18 + 16);
      if (v25 != -1) {
        break;
      }
      int v28 = 0;
      if (!v12) {
        goto LABEL_32;
      }
LABEL_40:
      if (v52[0])
      {
        v52[1] = v52[0];
        operator delete(v52[0]);
      }
      if (++v11 == v10) {
        goto LABEL_43;
      }
    }
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*((void *)this + 59), v24, v52);
    uint64_t v26 = 0;
    char v27 = 0;
    do
    {
      if (*(_DWORD *)((char *)v52[0] + v26) == a2) {
        char v27 = 1;
      }
      v26 += 4;
    }
    while (v26 != 12);
    int v28 = v27 & 1;
    if (v12) {
      goto LABEL_40;
    }
LABEL_32:
    if (v23 | v28)
    {
      uint64_t v46 = -1;
      *(_DWORD *)uint64_t v47 = -1;
      *(_OWORD *)&v47[4] = xmmword_24F5786E0;
      uint64_t v49 = 0;
      int v48 = 0;
      uint64_t v50 = -1;
      int v51 = 0;
      if (v23) {
        uint64_t v29 = v53;
      }
      else {
        uint64_t v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, v53);
      }
      LODWORD(v46) = *v29;
      unsigned int v30 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, (unsigned int *)&v46) + 12);
      uint64_t v31 = *((void *)this + 59) + 104;
      long long v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, (unsigned int *)&v46);
      LODWORD(v31) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v31, v32) + 12);
      HIDWORD(v49) = 0;
      *(_DWORD *)&v47[4] = 0;
      float32x4_t v40 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v31);
      float32x4_t v33 = vsubq_f32(v40, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v30));
      float32x4_t v34 = vmulq_f32(v33, v33);
      v34.i32[3] = 0;
      *(_DWORD *)&v47[8] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)));
      float32x4_t v41 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v30);
      float32x4_t v35 = vsubq_f32(v41, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), a2));
      float32x4_t v36 = vmulq_f32(v35, v35);
      v36.i32[3] = 0;
      *(_DWORD *)&v47[12] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)));
      float32x4_t v42 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v31);
      float32x4_t v37 = vsubq_f32(v42, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), a2));
      float32x4_t v38 = vmulq_f32(v37, v37);
      v38.i32[3] = 0;
      *(_DWORD *)&v47[16] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)));
      float32x4_t v45 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v30);
      float32x4_t v44 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v31);
      float32x4_t v43 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), a2);
      cv3d::cv::gess::isochart::ParameterizePt3ToPt2(&v45, &v44, &v43, (float *)&v48);
      HIDWORD(v46) = v30;
      *(_DWORD *)uint64_t v47 = a2;
      if (v23) {
        uint64_t v39 = v19;
      }
      else {
        uint64_t v39 = v24;
      }
      LODWORD(v50) = *v39;
      cv3d::cv::gess::isochart::Geodesic::AddWindowToHeapAndEdge((uint64_t *)this, (unsigned int *)&v46);
    }
    goto LABEL_40;
  }
LABEL_43:
  *(_DWORD *)(*(void *)this + 4 * *((unsigned int *)this + 6)) = 0;
}

void sub_24F4C81E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      unint64_t v8 = v3;
      std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void cv3d::cv::gess::isochart::Geodesic::AddWindowToHeapAndEdge(uint64_t *a1, unsigned int *a2)
{
  float v4 = *((float *)a2 + 6);
  if (v4 >= *((float *)a2 + 5)) {
    float v4 = *((float *)a2 + 5);
  }
  BOOL v5 = a2 + 9;
  float v6 = *((float *)a2 + 9) + v4;
  uint64_t v7 = (char *)operator new(0x58uLL);
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 1) = 0;
  *(void *)uint64_t v7 = &unk_2700D8828;
  *((float *)v7 + 6) = v6;
  *(_OWORD *)(v7 + 28) = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 3);
  *((void *)v7 + 7) = *(void *)(a2 + 7);
  *((_OWORD *)v7 + 4) = *v5;
  *((void *)v7 + 10) = -1;
  *(void *)&long long v32 = v7 + 24;
  *((void *)&v32 + 1) = v7;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert(a1 + 17, &v32);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  unsigned int v8 = *(_DWORD *)(a1[25] + 4 * *a2);
  uint64_t v9 = a1[43];
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  char v31 = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  int v25 = v7 + 24;
  uint64_t v26 = (std::__shared_weak_count *)v7;
  unsigned int v10 = a2[7];
  unsigned int v11 = a2[8];
  uint64_t v12 = v9 + 24 * v8;
  unint64_t v13 = *(void *)(v12 + 8);
  unint64_t v14 = *(void *)(v12 + 16);
  uint64_t v15 = (uint64_t *)(v12 + 8);
  *(_OWORD *)char v27 = *(_OWORD *)a2;
  *(_OWORD *)&v27[12] = *(_OWORD *)(a2 + 3);
  unsigned int v28 = v10;
  unsigned int v29 = v11;
  long long v30 = *v5;
  if (v13 >= v14)
  {
    uint64_t v17 = std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>((uint64_t *)(v9 + 24 * v8), (uint64_t)&v25);
    uint64_t v18 = v26;
    *uint64_t v15 = v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  else
  {
    *(void *)unint64_t v13 = v7 + 24;
    *(void *)(v13 + 8) = v7;
    int v25 = 0;
    uint64_t v26 = 0;
    long long v16 = *(_OWORD *)&v27[12];
    *(_OWORD *)(v13 + 16) = *(_OWORD *)v27;
    *(_OWORD *)(v13 + 28) = v16;
    *(_DWORD *)(v13 + 44) = v10;
    *(_DWORD *)(v13 + 48) = v11;
    *(_OWORD *)(v13 + 52) = v30;
    *(unsigned char *)(v13 + 68) = 0;
    *uint64_t v15 = v13 + 72;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
  uint64_t v19 = a2[1];
  uint64_t v20 = *a1;
  float v21 = *((float *)a2 + 5) + *((float *)a2 + 9);
  if (v21 >= *(float *)(*a1 + 4 * v19)) {
    float v21 = *(float *)(*a1 + 4 * v19);
  }
  *(float *)(v20 + 4 * v19) = v21;
  *(_DWORD *)(a1[28] + 4 * v19) = 0;
  if (vabds_f32(*(float *)(v20 + 4 * v19), *((float *)a2 + 5) + *((float *)a2 + 9)) < 0.00000001) {
    *(_DWORD *)(a1[31] + 4 * v19) = *a2;
  }
  unsigned int AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)a1, a2, (int *)a2 + 1);
  if (AnotherVertex == -1) {
    __assert_rtn("AddWindowToHeapAndEdge", "Geodesic.cpp", 136, "v_another.Valid()");
  }
  uint64_t v23 = *a1;
  float v24 = *((float *)a2 + 6) + *((float *)a2 + 9);
  if (v24 >= *(float *)(*a1 + 4 * AnotherVertex)) {
    float v24 = *(float *)(*a1 + 4 * AnotherVertex);
  }
  *(float *)(v23 + 4 * AnotherVertex) = v24;
  *(_DWORD *)(a1[28] + 4 * AnotherVertex) = 0;
  if (vabds_f32(*(float *)(v23 + 4 * AnotherVertex), *((float *)a2 + 6) + *((float *)a2 + 9)) < 0.00000001) {
    *(_DWORD *)(a1[31] + 4 * AnotherVertex) = *a2;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
}

void sub_24F4C857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *(void *)a2;
  if (!*(void *)a2) {
    return 0;
  }
  unint64_t v5 = a1[4];
  if (v5 >= (a1[1] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>::push_back[abi:ne180100](a1, a2);
  }
  else
  {
    float v6 = (void *)(*a1 + 16 * v5);
    uint64_t v7 = *((void *)a2 + 1);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v8 = (std::__shared_weak_count *)v6[1];
    *float v6 = v2;
    v6[1] = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v9 = a1[4];
  *(void *)(*(void *)a2 + 56) = v9;
  a1[4] = v9 + 1;
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::upheap(a1, v9);
  return 1;
}

uint64_t cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 472) + 104, a2) + 12);
  int v7 = *a3;
  uint64_t v8 = *(void *)(a1 + 472) + 104;
  uint64_t v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, a2);
  uint64_t result = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v9) + 12);
  if (v6 != v7)
  {
    if (result == *a3) {
      return *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 472) + 104, a2) + 12);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::Geodesic::CutHeapTopData(uint64_t *a1, uint64_t a2)
{
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(a1 + 17, 0, &v11);
  float v4 = *(void **)(a1[43] + 24 * *(unsigned int *)(a1[25] + 4 * *(unsigned int *)(v11 + 4)));
  uint64_t v5 = *(void *)(a1[43] + 24 * *(unsigned int *)(a1[25] + 4 * *(unsigned int *)(v11 + 4)) + 8) - (void)v4;
  if (v5)
  {
    unint64_t v6 = v5 / 72;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    while (*v4 != v11)
    {
      v4 += 9;
      if (!--v6) {
        goto LABEL_9;
      }
    }
    int v7 = (std::__shared_weak_count *)v4[1];
    *float v4 = 0;
    v4[1] = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
LABEL_9:
  uint64_t v9 = v11;
  uint64_t v8 = v12;
  long long v10 = *(_OWORD *)(v11 + 4);
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(v11 + 16);
  *(_OWORD *)a2 = v10;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v9 + 36);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(v9 + 40);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void cv3d::cv::gess::isochart::Geodesic::InternalRun(cv3d::cv::gess::isochart::Geodesic *this)
{
  uint64_t v181 = 0;
  v182[0] = 0;
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  uint64_t v177 = 0;
  uint64_t v178 = 0;
  unsigned int v175 = -1;
  int AnotherFace = -1;
  unsigned int v173 = -1;
  unsigned int v174 = -1;
  unsigned int v172 = -1;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  int v167 = 0;
  if (!*((void *)this + 21)) {
    goto LABEL_165;
  }
  v154 = (int *)((char *)this + 424);
  do
  {
    *((_DWORD *)this + 92) = -1;
    cv3d::cv::gess::isochart::Geodesic::CutHeapTopData((uint64_t *)this, (uint64_t)this + 420);
    if (cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, (unsigned int *)this + 105)
      || vabds_f32(*((float *)this + 108), *((float *)this + 109)) <= 0.00000001)
    {
      continue;
    }
    int AnotherFace = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, (unsigned int *)this + 105, (_DWORD *)this + 115);
    int v2 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, (unsigned int *)this + 105) + 12);
    int v3 = *((_DWORD *)this + 106);
    uint64_t v4 = *((void *)this + 59) + 104;
    uint64_t v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)this + 105);
    unsigned int v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, v5) + 8);
    if (v2 == v3)
    {
      unsigned int v175 = v6;
      unsigned int v174 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, &v175) + 8);
      uint64_t v7 = *((void *)this + 59) + 104;
      uint64_t v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, &v175);
      unsigned int v173 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, v8) + 12);
      uint64_t v9 = *((void *)this + 59) + 104;
      long long v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, (unsigned int *)this + 105);
      uint64_t v11 = v9;
    }
    else
    {
      unsigned int v174 = v6;
      unsigned int v175 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, &v174) + 8);
      unsigned int v173 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, &v175) + 12);
      uint64_t v11 = *((void *)this + 59) + 104;
      long long v10 = (unsigned int *)((char *)this + 420);
    }
    unsigned int v172 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, v10) + 12);
    v182[0] = *((unsigned int *)this + 108);
    uint64_t v181 = *((unsigned int *)this + 109);
    uint64_t v180 = *((void *)this + 56);
    uint64_t v179 = 0;
    float v12 = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)this + 105);
    uint64_t v178 = LODWORD(v12);
    if (*(float *)&v181 > v12) {
      *(float *)&uint64_t v181 = v12;
    }
    *(_OWORD *)v160 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), *((_DWORD *)this + 106));
    *(_OWORD *)std::string __p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v172);
    float32x4_t v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v173);
    cv3d::cv::gess::isochart::ParameterizePt3ToPt2((float32x4_t *)v160, (float32x4_t *)__p, &v166, (float *)&v177);
    *((float *)&v177 + 1) = -*((float *)&v177 + 1);
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v179, (float *)&v177, (float *)&v180, (float *)v182, (float *)&v171, (BOOL *)&v167 + 3);
    if (fabsf(*(float *)&v171 + -3.4028e38) < 0.00000001 && vabds_f32(*(float *)v182, *(float *)&v179) < 0.00000001)
    {
      HIBYTE(v167) = 1;
      uint64_t v171 = v179;
    }
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v178, (float *)&v177, (float *)&v180, (float *)v182, (float *)&v170, (BOOL *)&v167 + 2);
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v179, (float *)&v177, (float *)&v180, (float *)&v181, (float *)&v169, (BOOL *)&v167 + 1);
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v178, (float *)&v177, (float *)&v180, (float *)&v181, (float *)&v168, (BOOL *)&v167);
    float v13 = *(float *)&v168;
    if (fabsf(*(float *)&v168 + -3.4028e38) < 0.00000001 && vabds_f32(*(float *)&v178, *(float *)&v181) < 0.00000001)
    {
      LOBYTE(v167) = 1;
      uint64_t v168 = v178;
      float v13 = *(float *)&v178;
    }
    if (HIBYTE(v167) && (_BYTE)v167 && !*(_WORD *)((char *)&v167 + 1))
    {
      float v15 = *((float *)&v177 + 1);
      float v14 = *(float *)&v177;
      float v16 = sqrtf((float)((float)(*((float *)&v171 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v171 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v171 - *(float *)&v177) * (float)(*(float *)&v171 - *(float *)&v177)));
      *((float *)this + 96) = v16;
      if (v16 > 0.00000001)
      {
        float v17 = *(float *)&v179;
        double v18 = vabds_f32(*(float *)v182, *(float *)&v179);
        if (v18 < 0.00000001)
        {
          *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v175);
          float v15 = *((float *)&v177 + 1);
          float v14 = *(float *)&v177;
          float v17 = *(float *)&v179;
          double v18 = vabds_f32(*(float *)v182, *(float *)&v179);
        }
        *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
        *((_DWORD *)this + 92) = v175;
        *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
        *((_DWORD *)this + 102) = AnotherFace;
        *((_DWORD *)this + 95) = 0;
        uint64_t v19 = v180;
        *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v180 + 1) - v15) * (float)(*((float *)&v180 + 1) - v15))+ (float)((float)(*(float *)&v180 - v14) * (float)(*(float *)&v180 - v14)));
        if (v18 >= 0.00000001)
        {
          float v21 = *((float *)&v171 + 1);
          float v20 = *(float *)&v171 - *(float *)&v19;
        }
        else
        {
          float v20 = v17 - *(float *)&v19;
          float v21 = *((float *)&v179 + 1);
        }
        *((float *)this + 98) = sqrtf((float)((float)(v21 - *((float *)&v19 + 1)) * (float)(v21 - *((float *)&v19 + 1)))+ (float)(v20 * v20));
        cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v179, (float *)&v180, (float *)this + 99);
        *((_DWORD *)this + 93) = v173;
        *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
        *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
        if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
          cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
        }
      }
      float v60 = *((float *)&v177 + 1);
      float v59 = *(float *)&v177;
      float v61 = sqrtf((float)((float)(*((float *)&v168 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v168 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v168 - *(float *)&v177) * (float)(*(float *)&v168 - *(float *)&v177)));
      *((float *)this + 96) = v61;
      if (v61 > 0.00000001)
      {
        float v62 = *(float *)&v178;
        double v63 = vabds_f32(*(float *)&v181, *(float *)&v178);
        if (v63 < 0.00000001)
        {
          *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v174);
          float v60 = *((float *)&v177 + 1);
          float v59 = *(float *)&v177;
          float v62 = *(float *)&v178;
          double v63 = vabds_f32(*(float *)&v181, *(float *)&v178);
        }
        *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
        *((_DWORD *)this + 92) = v174;
        *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
        *((_DWORD *)this + 102) = AnotherFace;
        *((_DWORD *)this + 95) = 0;
        uint64_t v64 = v180;
        *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v180 + 1) - v60) * (float)(*((float *)&v180 + 1) - v60))+ (float)((float)(*(float *)&v180 - v59) * (float)(*(float *)&v180 - v59)));
        if (v63 >= 0.00000001)
        {
          float v66 = *((float *)&v168 + 1);
          float v65 = *(float *)&v168 - *(float *)&v64;
        }
        else
        {
          float v65 = v62 - *(float *)&v64;
          float v66 = *((float *)&v178 + 1);
        }
        *((float *)this + 98) = sqrtf((float)((float)(v66 - *((float *)&v64 + 1)) * (float)(v66 - *((float *)&v64 + 1)))+ (float)(v65 * v65));
        cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v178, (float *)&v180, (float *)this + 99);
        *((_DWORD *)this + 93) = v173;
        *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
        *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
        if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
          cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
        }
      }
      continue;
    }
    if (!BYTE2(v167) || !(_BYTE)v167)
    {
      if (!HIBYTE(v167) || !BYTE1(v167)) {
        continue;
      }
      *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
      *((_DWORD *)this + 92) = v175;
      *((_DWORD *)this + 102) = AnotherFace;
      *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
      uint64_t v26 = v177;
      float v27 = sqrtf((float)((float)(*((float *)&v169 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v169 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v169 - *(float *)&v177) * (float)(*(float *)&v169 - *(float *)&v177)));
      if (v27 < 0.00000001) {
        float v27 = 0.0;
      }
      *((float *)this + 95) = v27;
      if (vabds_f32(*(float *)v182, *(float *)&v179) >= 0.00000001)
      {
        uint64_t v67 = v171;
        *((float *)this + 96) = sqrtf((float)((float)(*((float *)&v171 + 1) - *((float *)&v26 + 1))* (float)(*((float *)&v171 + 1) - *((float *)&v26 + 1)))+ (float)((float)(*(float *)&v171 - *(float *)&v26)* (float)(*(float *)&v171 - *(float *)&v26)));
        float v28 = *(float *)&v67 - *(float *)&v180;
        float v29 = *((float *)&v67 + 1) - *((float *)&v180 + 1);
      }
      else
      {
        *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v175);
        float v28 = *(float *)&v179 - *(float *)&v180;
        float v29 = *((float *)&v179 + 1) - *((float *)&v180 + 1);
      }
      *((float *)this + 98) = sqrtf((float)(v29 * v29) + (float)(v28 * v28));
      cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v179, (float *)&v180, (float *)this + 99);
      *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v169 + 1) - *((float *)&v180 + 1))* (float)(*((float *)&v169 + 1) - *((float *)&v180 + 1)))+ (float)((float)(*(float *)&v169 - *(float *)&v180)* (float)(*(float *)&v169 - *(float *)&v180)));
      *((_DWORD *)this + 93) = v173;
      *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
      *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
      if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
        cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
      }
      if (vabds_f32(*(float *)&v181, *(float *)&v178) >= 0.00000001
        || !cv3d::cv::gess::isochart::Geodesic::IsSaddleOrBoundary((uint64_t)this, (uint64_t)&v172))
      {
        continue;
      }
      *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 111);
      float v68 = *((float *)&v169 + 1);
      float v69 = *((float *)&v177 + 1);
      float v70 = *(float *)&v169 - *(float *)&v177;
      *((_DWORD *)this + 94) = v172;
      *((_DWORD *)this + 92) = v175;
      *((_DWORD *)this + 102) = AnotherFace;
      *((_DWORD *)this + 95) = 0;
      *((float *)this + 96) = sqrtf((float)((float)(v68 - v69) * (float)(v68 - v69)) + (float)(v70 * v70));
      *((float *)this + 97) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v174);
      *((float *)this + 98) = sqrtf((float)((float)(*((float *)&v169 + 1) - *((float *)&v178 + 1))* (float)(*((float *)&v169 + 1) - *((float *)&v178 + 1)))+ (float)((float)(*(float *)&v169 - *(float *)&v178)* (float)(*(float *)&v169 - *(float *)&v178)));
      unsigned int v71 = v173;
      *((_DWORD *)this + 93) = v173;
      *(_OWORD *)v160 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v71);
      *(_OWORD *)std::string __p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), *((_DWORD *)this + 106));
      float32x4_t v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v172);
      cv3d::cv::gess::isochart::ParameterizePt3ToPt2((float32x4_t *)v160, (float32x4_t *)__p, &v166, (float *)this + 99);
      *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
      *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
      if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
        cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
      }
      if (((*(void *)(*((void *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) >> v173) & 1) != 0
        || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v174))
      {
        continue;
      }
      *(void *)(*((void *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) |= 1 << v173;
      unsigned int v165 = v174;
      unsigned int v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &AnotherFace);
      unsigned int AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, (unsigned int *)this + 105, v154);
      unsigned int OpposingEdge = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((void *)this + 59), &v164, (int *)&AnotherVertex);
      unsigned int v155 = v173;
      unsigned int v72 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &OpposingEdge, (int *)&v173);
      v160[0] = 0;
      v160[1] = 0;
      v161[0] = 0;
      __p[0] = 0;
      __p[1] = 0;
      v159[0] = 0;
      while (1)
      {
        char v73 = (char *)v160[1];
        if (v160[1] >= (void *)v161[0])
        {
          int64_t v75 = ((char *)v160[1] - (char *)v160[0]) >> 2;
          if ((unint64_t)(v75 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v76 = (uint64_t)(v161[0] - (unint64_t)v160[0]) >> 1;
          if (v76 <= v75 + 1) {
            unint64_t v76 = v75 + 1;
          }
          if (v161[0] - (unint64_t)v160[0] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v76;
          }
          if (v77) {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v161, v77);
          }
          else {
            v78 = 0;
          }
          char v79 = (unsigned int *)&v78[4 * v75];
          *char v79 = OpposingEdge;
          v74 = v79 + 1;
          char v81 = (char *)v160[0];
          v80 = (char *)v160[1];
          if (v160[1] != v160[0])
          {
            do
            {
              unsigned int v82 = *((_DWORD *)v80 - 1);
              v80 -= 4;
              *--char v79 = v82;
            }
            while (v80 != v81);
            v80 = (char *)v160[0];
          }
          v160[0] = v79;
          v160[1] = v74;
          v161[0] = &v78[4 * v77];
          if (v80) {
            operator delete(v80);
          }
        }
        else
        {
          *(_DWORD *)v160[1] = OpposingEdge;
          v74 = v73 + 4;
        }
        v160[1] = v74;
        v83 = (char *)__p[1];
        if (__p[1] >= (void *)v159[0])
        {
          int64_t v85 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          if ((unint64_t)(v85 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v86 = (uint64_t)(v159[0] - (unint64_t)__p[0]) >> 1;
          if (v86 <= v85 + 1) {
            unint64_t v86 = v85 + 1;
          }
          if (v159[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v87 = v86;
          }
          if (v87) {
            v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v159, v87);
          }
          else {
            v88 = 0;
          }
          v89 = &v88[4 * v85];
          *(_DWORD *)v89 = v164;
          char v84 = v89 + 4;
          v91 = (char *)__p[0];
          v90 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              int v92 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v89 - 1) = v92;
              v89 -= 4;
            }
            while (v90 != v91);
            v90 = (char *)__p[0];
          }
          __p[0] = v89;
          __p[1] = v84;
          v159[0] = &v88[4 * v87];
          if (v90) {
            operator delete(v90);
          }
        }
        else
        {
          *(_DWORD *)__p[1] = v164;
          char v84 = v83 + 4;
        }
        __p[1] = v84;
        unsigned int v93 = v173;
        if (v72 == v173
          || ((*(void *)(*((void *)this + 34) + (((unint64_t)v72 >> 3) & 0x1FFFFFF8)) >> v72) & 1) != 0)
        {
          goto LABEL_152;
        }
        unsigned int v165 = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((void *)this + 59), &v164, (int *)&v155);
        if (cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165)) {
          break;
        }
        unsigned int v155 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &OpposingEdge, (int *)&v155);
        unsigned int v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &v164);
        unsigned int OpposingEdge = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((void *)this + 59), &v164, (int *)&AnotherVertex);
        unsigned int v72 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &OpposingEdge, (int *)&v155);
      }
      unsigned int v93 = v173;
LABEL_152:
      if (v72 != v93
        && (((*(void *)(*((void *)this + 34) + (((unint64_t)v72 >> 3) & 0x1FFFFFF8)) >> v72) & 1) != 0
         || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165)))
      {
        v110 = v160[0];
        if (v160[1] != v160[0])
        {
          unint64_t v111 = 0;
          do
          {
            *((_DWORD *)this + 92) = v110[v111];
            *((_DWORD *)this + 102) = *((_DWORD *)__p[0] + v111);
            *((_DWORD *)this + 93) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, (unsigned int *)this + 92)+ 12);
            *((void *)this + 47) = AnotherVertex;
            *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)this + 92);
            uint64_t v112 = *((void *)this + 59);
            uint64_t v113 = cv3d::cv::gess::mesh::Topology::h(v112 + 104, (unsigned int *)this + 92);
            float32x4_t v152 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v112, *(_DWORD *)(v112 + 176), *(_DWORD *)(v113 + 12));
            float32x4_t v114 = vsubq_f32(v152, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), AnotherVertex));
            float32x4_t v115 = vmulq_f32(v114, v114);
            v115.i32[3] = 0;
            *((float *)this + 97) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v115, v115)));
            uint64_t v116 = *((void *)this + 59);
            v117 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v116 + 104, (unsigned int *)this + 92);
            uint64_t v118 = cv3d::cv::gess::mesh::Topology::h(v116 + 104, v117);
            float32x4_t v153 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v116, *(_DWORD *)(v116 + 176), *(_DWORD *)(v118 + 12));
            float32x4_t v119 = vsubq_f32(v153, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), AnotherVertex));
            float32x4_t v120 = vmulq_f32(v119, v119);
            v120.i32[3] = 0;
            *((float *)this + 98) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v120, v120)));
            *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 111);
            uint64_t v121 = *((void *)this + 59);
            uint64_t v122 = cv3d::cv::gess::mesh::Topology::h(v121 + 104, (unsigned int *)this + 92);
            float32x4_t v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v121, *(_DWORD *)(v121 + 176), *(_DWORD *)(v122 + 12));
            uint64_t v123 = *((void *)this + 59);
            v124 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v123 + 104, (unsigned int *)this + 92);
            uint64_t v125 = cv3d::cv::gess::mesh::Topology::h(v123 + 104, v124);
            float32x4_t v157 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v123, *(_DWORD *)(v123 + 176), *(_DWORD *)(v125 + 12));
            float32x4_t v156 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), *((_DWORD *)this + 94));
            cv3d::cv::gess::isochart::ParameterizePt3ToPt2(&v166, &v157, &v156, (float *)this + 99);
            *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
            *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
            if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
              cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
            }
            ++v111;
            v110 = v160[0];
          }
          while (v111 < ((char *)v160[1] - (char *)v160[0]) >> 2);
        }
      }
      goto LABEL_160;
    }
    *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
    *((_DWORD *)this + 92) = v174;
    *((_DWORD *)this + 102) = AnotherFace;
    *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
    uint64_t v22 = v177;
    float v23 = sqrtf((float)((float)(*((float *)&v170 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v170 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v170 - *(float *)&v177) * (float)(*(float *)&v170 - *(float *)&v177)));
    if (v23 < 0.00000001) {
      float v23 = 0.0;
    }
    *((float *)this + 95) = v23;
    if (vabds_f32(*(float *)&v181, *(float *)&v178) >= 0.00000001)
    {
      float v30 = *((float *)&v168 + 1);
      *((float *)this + 96) = sqrtf((float)((float)(*((float *)&v168 + 1) - *((float *)&v22 + 1))* (float)(*((float *)&v168 + 1) - *((float *)&v22 + 1)))+ (float)((float)(v13 - *(float *)&v22) * (float)(v13 - *(float *)&v22)));
      float v24 = v13 - *(float *)&v180;
      float v25 = v30 - *((float *)&v180 + 1);
    }
    else
    {
      *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v174);
      float v24 = *(float *)&v178 - *(float *)&v180;
      float v25 = *((float *)&v178 + 1) - *((float *)&v180 + 1);
    }
    *((float *)this + 98) = sqrtf((float)(v25 * v25) + (float)(v24 * v24));
    cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v178, (float *)&v180, (float *)this + 99);
    *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v170 + 1) - *((float *)&v180 + 1))* (float)(*((float *)&v170 + 1) - *((float *)&v180 + 1)))+ (float)((float)(*(float *)&v170 - *(float *)&v180)* (float)(*(float *)&v170 - *(float *)&v180)));
    *((_DWORD *)this + 93) = v173;
    *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
    *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
    if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
      cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
    }
    if (vabds_f32(*(float *)v182, *(float *)&v179) >= 0.00000001
      || !cv3d::cv::gess::isochart::Geodesic::IsSaddleOrBoundary((uint64_t)this, (uint64_t)v154))
    {
      continue;
    }
    *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 110);
    float v31 = *((float *)&v170 + 1);
    float v32 = *((float *)&v177 + 1);
    float v33 = *(float *)&v170 - *(float *)&v177;
    *((_DWORD *)this + 94) = *((_DWORD *)this + 106);
    *((_DWORD *)this + 92) = v174;
    *((_DWORD *)this + 102) = AnotherFace;
    *((_DWORD *)this + 95) = 0;
    *((float *)this + 96) = sqrtf((float)((float)(v31 - v32) * (float)(v31 - v32)) + (float)(v33 * v33));
    *((float *)this + 97) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v175);
    *((float *)this + 98) = sqrtf((float)((float)(*((float *)&v170 + 1) - *((float *)&v179 + 1))* (float)(*((float *)&v170 + 1) - *((float *)&v179 + 1)))+ (float)((float)(*(float *)&v170 - *(float *)&v179)* (float)(*(float *)&v170 - *(float *)&v179)));
    unsigned int v34 = v173;
    *((_DWORD *)this + 93) = v173;
    *(_OWORD *)v160 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v34);
    *(_OWORD *)std::string __p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), v172);
    float32x4_t v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), *((_DWORD *)this + 106));
    cv3d::cv::gess::isochart::ParameterizePt3ToPt2((float32x4_t *)v160, (float32x4_t *)__p, &v166, (float *)this + 99);
    *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
    *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
    if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
      cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
    }
    if (((*(void *)(*((void *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) >> v173) & 1) != 0
      || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v175))
    {
      continue;
    }
    *(void *)(*((void *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) |= 1 << v173;
    unsigned int v165 = v175;
    unsigned int v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &AnotherFace);
    unsigned int v35 = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((void *)this + 59), &v164, v154);
    unsigned int OpposingEdge = v173;
    unsigned int AnotherVertex = v35;
    unsigned int v36 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &AnotherVertex, (int *)&v173);
    v160[0] = 0;
    v160[1] = 0;
    v161[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v159[0] = 0;
    while (1)
    {
      float32x4_t v37 = (char *)v160[1];
      if (v160[1] >= (void *)v161[0])
      {
        int64_t v39 = ((char *)v160[1] - (char *)v160[0]) >> 2;
        if ((unint64_t)(v39 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v40 = (uint64_t)(v161[0] - (unint64_t)v160[0]) >> 1;
        if (v40 <= v39 + 1) {
          unint64_t v40 = v39 + 1;
        }
        if (v161[0] - (unint64_t)v160[0] >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41) {
          float32x4_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v161, v41);
        }
        else {
          float32x4_t v42 = 0;
        }
        float32x4_t v43 = (unsigned int *)&v42[4 * v39];
        *float32x4_t v43 = AnotherVertex;
        float32x4_t v38 = v43 + 1;
        float32x4_t v45 = (char *)v160[0];
        float32x4_t v44 = (char *)v160[1];
        if (v160[1] != v160[0])
        {
          do
          {
            unsigned int v46 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *--float32x4_t v43 = v46;
          }
          while (v44 != v45);
          float32x4_t v44 = (char *)v160[0];
        }
        v160[0] = v43;
        v160[1] = v38;
        v161[0] = &v42[4 * v41];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *(_DWORD *)v160[1] = AnotherVertex;
        float32x4_t v38 = v37 + 4;
      }
      v160[1] = v38;
      uint64_t v47 = (char *)__p[1];
      if (__p[1] >= (void *)v159[0])
      {
        int64_t v49 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        if ((unint64_t)(v49 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v50 = (uint64_t)(v159[0] - (unint64_t)__p[0]) >> 1;
        if (v50 <= v49 + 1) {
          unint64_t v50 = v49 + 1;
        }
        if (v159[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51) {
          uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v159, v51);
        }
        else {
          uint64_t v52 = 0;
        }
        char v53 = &v52[4 * v49];
        *(_DWORD *)char v53 = v164;
        int v48 = v53 + 4;
        long long v55 = (char *)__p[0];
        long long v54 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            int v56 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *((_DWORD *)v53 - 1) = v56;
            v53 -= 4;
          }
          while (v54 != v55);
          long long v54 = (char *)__p[0];
        }
        __p[0] = v53;
        __p[1] = v48;
        v159[0] = &v52[4 * v51];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(_DWORD *)__p[1] = v164;
        int v48 = v47 + 4;
      }
      __p[1] = v48;
      if (v36 == -1)
      {
        int v148 = 372;
        v149 = "next_shadow_vertex.Valid()";
        goto LABEL_198;
      }
      if (*((void *)this + 35) <= (unint64_t)v36)
      {
        int v148 = 373;
        v149 = "next_shadow_vertex.Index() < shadow_boundary_.size()";
LABEL_198:
        __assert_rtn("InternalRun", "Geodesic.cpp", v148, v149);
      }
      unsigned int v57 = v173;
      unint64_t v58 = (unint64_t)v36 >> 3;
      if (v36 == v173 || ((*(void *)(*((void *)this + 34) + (v58 & 0x1FFFFFF8)) >> v36) & 1) != 0) {
        goto LABEL_142;
      }
      unsigned int v165 = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((void *)this + 59), &v164, (int *)&v173);
      if (cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165)) {
        break;
      }
      unsigned int OpposingEdge = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &AnotherVertex, (int *)&OpposingEdge);
      unsigned int v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &v164);
      unsigned int AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((void *)this + 59), &v164, v154);
      unsigned int v36 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &AnotherVertex, (int *)&OpposingEdge);
    }
    unsigned int v57 = v173;
LABEL_142:
    if (v36 != v57
      && (((*(void *)(*((void *)this + 34) + (v58 & 0x1FFFFFF8)) >> v36) & 1) != 0
       || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165)))
    {
      v94 = v160[0];
      if (v160[1] != v160[0])
      {
        unint64_t v95 = 0;
        do
        {
          *((_DWORD *)this + 92) = v94[v95];
          *((_DWORD *)this + 102) = *((_DWORD *)__p[0] + v95);
          *((_DWORD *)this + 93) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 59) + 104, (unsigned int *)this + 92)+ 12);
          *((void *)this + 47) = *((unsigned int *)this + 106);
          *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)this + 92);
          uint64_t v96 = *((void *)this + 59);
          uint64_t v97 = cv3d::cv::gess::mesh::Topology::h(v96 + 104, (unsigned int *)this + 92);
          float32x4_t v150 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v96, *(_DWORD *)(v96 + 176), *(_DWORD *)(v97 + 12));
          float32x4_t v98 = vsubq_f32(v150, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), *((_DWORD *)this + 106)));
          float32x4_t v99 = vmulq_f32(v98, v98);
          v99.i32[3] = 0;
          *((float *)this + 97) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v99, v99)));
          uint64_t v100 = *((void *)this + 59);
          v101 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v100 + 104, (unsigned int *)this + 92);
          uint64_t v102 = cv3d::cv::gess::mesh::Topology::h(v100 + 104, v101);
          float32x4_t v151 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v100, *(_DWORD *)(v100 + 176), *(_DWORD *)(v102 + 12));
          float32x4_t v103 = vsubq_f32(v151, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), *((_DWORD *)this + 106)));
          float32x4_t v104 = vmulq_f32(v103, v103);
          v104.i32[3] = 0;
          *((float *)this + 98) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v104, v104)));
          *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 110);
          uint64_t v105 = *((void *)this + 59);
          uint64_t v106 = cv3d::cv::gess::mesh::Topology::h(v105 + 104, (unsigned int *)this + 92);
          float32x4_t v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v105, *(_DWORD *)(v105 + 176), *(_DWORD *)(v106 + 12));
          uint64_t v107 = *((void *)this + 59);
          v108 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v107 + 104, (unsigned int *)this + 92);
          uint64_t v109 = cv3d::cv::gess::mesh::Topology::h(v107 + 104, v108);
          float32x4_t v157 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v107, *(_DWORD *)(v107 + 176), *(_DWORD *)(v109 + 12));
          float32x4_t v156 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((void *)this + 59), *(_DWORD *)(*((void *)this + 59) + 176), *((_DWORD *)this + 94));
          cv3d::cv::gess::isochart::ParameterizePt3ToPt2(&v166, &v157, &v156, (float *)this + 99);
          *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
          *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
          if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001) {
            cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (long long *)this + 23);
          }
          ++v95;
          v94 = v160[0];
        }
        while (v95 < ((char *)v160[1] - (char *)v160[0]) >> 2);
      }
    }
LABEL_160:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v160[0])
    {
      v160[1] = v160[0];
      operator delete(v160[0]);
    }
  }
  while (*((void *)this + 21));
LABEL_165:
  uint64_t v126 = *((void *)this + 59);
  uint64_t v127 = v126 + 104;
  if (*(void *)(v126 + 112) != *(void *)(v126 + 104))
  {
    for (unint64_t i = 0; i < (uint64_t)(*(void *)(v126 + 112) - *(void *)(v126 + 104)) >> 2; ++i)
    {
      if (((*(void *)(*((void *)this + 37) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0
        && fabsf(*(float *)(*(void *)this + 4 * i) + -3.4028e38) < 0.00000001)
      {
        LODWORD(__p[0]) = i;
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v160, v127, __p);
        unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v160);
        if (HEdge != -1)
        {
          while (1)
          {
            v130 = (uint64_t *)(*((void *)this + 43) + 24 * *(unsigned int *)(*((void *)this + 25) + 4 * HEdge));
            uint64_t v131 = *v130;
            if (v130[1] != *v130) {
              break;
            }
LABEL_192:
            unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v160);
            if (HEdge == -1) {
              goto LABEL_193;
            }
          }
          uint64_t v132 = 0;
          unint64_t v133 = 0;
          uint64_t v134 = HEdge;
          while (2)
          {
            uint64_t v135 = v131 + v132;
            if (i == *(_DWORD *)(v131 + v132 + 20))
            {
              float v136 = *(float *)(v135 + 28);
              uint64_t v137 = *((void *)this + 28);
              float v138 = *(float *)(v137 + 4 * i);
              if (v136 < v138)
              {
                *(float *)(v137 + 4 * i) = v136;
                float v139 = *(float *)(v131 + v132 + 36) + *(float *)(v131 + v132 + 52);
                uint64_t v140 = *(void *)this;
                goto LABEL_180;
              }
              uint64_t v140 = *(void *)this;
              if (vabds_f32(v136, v138) >= 0.00000001)
              {
                float v139 = *(float *)(v140 + 4 * i);
              }
              else
              {
                float v139 = *(float *)(v131 + v132 + 36) + *(float *)(v131 + v132 + 52);
                if (v139 >= *(float *)(v140 + 4 * i)) {
                  float v139 = *(float *)(v140 + 4 * i);
                }
LABEL_180:
                *(float *)(v140 + 4 * i) = v139;
              }
              unint64_t v146 = i;
              if (vabds_f32(v139, *(float *)(v131 + v132 + 36) + *(float *)(v131 + v132 + 52)) >= 0.00000001)
              {
LABEL_191:
                ++v133;
                v147 = (uint64_t *)(*((void *)this + 43) + 24 * *(unsigned int *)(*((void *)this + 25) + 4 * v134));
                uint64_t v131 = *v147;
                v132 += 72;
                if (v133 >= 0x8E38E38E38E38E39 * ((v147[1] - *v147) >> 3)) {
                  goto LABEL_192;
                }
                continue;
              }
LABEL_190:
              *(_DWORD *)(*((void *)this + 31) + 4 * v146) = *(_DWORD *)(v131 + v132 + 16);
              goto LABEL_191;
            }
            break;
          }
          float v141 = *(float *)(v135 + 32);
          if (v141 > (float)(cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)(v131 + v132 + 16))- *(float *)(*((void *)this + 28) + 4 * i)))
          {
            *(float *)(*((void *)this + 28) + 4 * i) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)(v131 + v132 + 16))- *(float *)(v135 + 32);
            float v142 = *(float *)(v131 + v132 + 40) + *(float *)(v131 + v132 + 52);
            uint64_t v143 = *(void *)this;
            goto LABEL_184;
          }
          float v144 = *(float *)(v135 + 32);
          float v145 = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)(v131 + v132 + 16));
          uint64_t v143 = *(void *)this;
          if (vabds_f32(v144, v145 - *(float *)(*((void *)this + 28) + 4 * i)) >= 0.00000001)
          {
            float v142 = *(float *)(v143 + 4 * i);
          }
          else
          {
            float v142 = *(float *)(v131 + v132 + 40) + *(float *)(v131 + v132 + 52);
            if (v142 >= *(float *)(v143 + 4 * i)) {
              float v142 = *(float *)(v143 + 4 * i);
            }
LABEL_184:
            *(float *)(v143 + 4 * i) = v142;
          }
          unint64_t v146 = i;
          if (fabsf((float)(v142 - *(float *)(v131 + v132 + 40)) + *(float *)(v131 + v132 + 52)) >= 0.00000001) {
            goto LABEL_191;
          }
          goto LABEL_190;
        }
LABEL_193:
        uint64_t v126 = *((void *)this + 59);
      }
      uint64_t v127 = v126 + 104;
    }
  }
}

void sub_24F4CA048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid(uint64_t a1, unsigned int *a2)
{
  if (*a2 == -1) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 472);
  uint64_t v4 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v3, *(_DWORD *)(v3 + 180), *a2);
  if ((v5 & *v4) != 0) {
    return 1;
  }
  uint64_t v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v3 + 104, a2);
  uint64_t v8 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v3, *(_DWORD *)(v3 + 180), *v7);
  return (v9 & *v8) != 0;
}

uint64_t cv3d::cv::gess::isochart::Geodesic::GetAnotherFace(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 472) + 104, a2);
  uint64_t v7 = *(void *)(a1 + 472) + 104;
  uint64_t v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, a2);
  unsigned int v9 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, v8) + 16);
  if (v9 == *a3) {
    unsigned int v10 = *(_DWORD *)(v6 + 16);
  }
  else {
    unsigned int v10 = -1;
  }
  if (*(_DWORD *)(v6 + 16) == *a3) {
    return v9;
  }
  else {
    return v10;
  }
}

float cv3d::cv::gess::isochart::Geodesic::HEdgeLength(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v2 + 136) - *(void *)(v2 + 128)) >> 2) <= *a2) {
    cv3d::cv::gess::isochart::Geodesic::HEdgeLength();
  }
  uint64_t v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v2 + 104, a2);
  uint64_t v6 = cv3d::cv::gess::mesh::Topology::h(v2 + 104, v5);
  float32x4_t v12 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), *(_DWORD *)(v6 + 12));
  uint64_t v7 = *(void *)(a1 + 472);
  uint64_t v8 = cv3d::cv::gess::mesh::Topology::h(v7 + 104, a2);
  float32x4_t v9 = vsubq_f32(v12, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v7, *(_DWORD *)(v7 + 176), *(_DWORD *)(v8 + 12)));
  float32x4_t v10 = vmulq_f32(v9, v9);
  v10.i32[3] = 0;
  return sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)));
}

void cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow(uint64_t a1, long long *a2)
{
  uint64_t v113 = 0;
  float32x4_t v114 = 0;
  unint64_t v115 = 0;
  uint64_t v3 = std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeWindow const&>((uint64_t *)&v113, a2);
  uint64_t v4 = v113;
  float32x4_t v114 = (char *)v3;
  if ((char *)v3 == v113) {
    goto LABEL_88;
  }
  unint64_t v5 = 0;
  v94 = (long long *)(a1 + 28);
  uint64_t v96 = (uint64_t *)(a1 + 136);
  do
  {
    uint64_t v6 = &v4[52 * v5];
    __int16 v112 = 0;
    __int16 v111 = 0;
    *(void *)v108 = -1;
    *(_OWORD *)&v108[12] = xmmword_24F5786E0;
    *(_DWORD *)&v108[8] = -1;
    uint64_t v109 = 0;
    LODWORD(v110) = 0;
    *(void *)((char *)&v110 + 4) = -1;
    HIDWORD(v110) = 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 344) + 24 * *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6));
    if (*(void *)(*(void *)(a1 + 344)
                   + 24 * *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6)
                   + 8) == v7)
      goto LABEL_52;
    unint64_t v95 = v5;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      __int16 v112 = 0;
      HIBYTE(v111) = 0;
      uint64_t v10 = v7 + v8;
      uint64_t v11 = (float *)(v7 + v8 + 52);
      float v12 = *v11;
      float v14 = *(float *)(v7 + v8 + 36);
      float v13 = *(float *)(v7 + v8 + 40);
      float v15 = (char *)operator new(0x58uLL);
      float v16 = v15;
      if (v13 >= v14) {
        float v17 = v14;
      }
      else {
        float v17 = v13;
      }
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *(void *)float v15 = &unk_2700D8828;
      uint64_t v18 = *(void *)(v10 + 44);
      *((float *)v15 + 6) = v12 + v17;
      uint64_t v19 = v15 + 24;
      float v20 = (long long *)(v15 + 28);
      long long v21 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)(v15 + 40) = *(_OWORD *)(v10 + 28);
      *(_OWORD *)(v15 + 28) = v21;
      *((void *)v15 + 7) = v18;
      *((_OWORD *)v15 + 4) = *(_OWORD *)v11;
      *((void *)v15 + 10) = -1;
      cv3d::cv::gess::isochart::Geodesic::IntersectWindow(a1, (uint64_t)(v15 + 28), (uint64_t)v6, (unsigned char *)&v112 + 1, &v112, (unsigned char *)&v111 + 1, &v111);
      if (*(float *)(a1 + 96) > *(float *)(a1 + 92))
      {
        *(_OWORD *)v108 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)&v108[12] = *(_OWORD *)(a1 + 92);
        uint64_t v109 = *(void *)(a1 + 108);
        long long v110 = *(_OWORD *)(a1 + 116);
      }
      if (*(float *)(a1 + 44) > *(float *)(a1 + 40))
      {
        uint64_t v22 = v114;
        if ((unint64_t)v114 >= v115)
        {
          uint64_t v24 = std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeWindow const&>((uint64_t *)&v113, v94);
        }
        else
        {
          long long v23 = *v94;
          *(_OWORD *)(v114 + 12) = *(_OWORD *)(a1 + 40);
          *(_OWORD *)uint64_t v22 = v23;
          *((_DWORD *)v22 + 7) = *(_DWORD *)(a1 + 56);
          *((_DWORD *)v22 + 8) = *(_DWORD *)(a1 + 60);
          *(_OWORD *)(v22 + 36) = *(_OWORD *)(a1 + 64);
          uint64_t v24 = (uint64_t)(v22 + 52);
        }
        float32x4_t v114 = (char *)v24;
        uint64_t v6 = &v113[52 * v95];
      }
      if (!HIBYTE(v112)) {
        goto LABEL_35;
      }
      float v25 = v16 + 64;
      uint64_t v26 = *(void *)(*(void *)(a1 + 344)
                      + 24 * *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6));
      uint64_t v27 = *(void *)(v26 + v8);
      if (!v27)
      {
        if (HIBYTE(v111))
        {
          uint64_t v29 = v26 + v8;
LABEL_34:
          *(unsigned char *)(v29 + 68) = 1;
        }
        else
        {
          uint64_t v35 = v26 + v8;
          long long v36 = *v20;
          *(_OWORD *)(v35 + 28) = *(long long *)((char *)v20 + 12);
          *(_OWORD *)(v35 + 16) = v36;
          *(_DWORD *)(v35 + 44) = *((_DWORD *)v16 + 14);
          *(_DWORD *)(v35 + 48) = *((_DWORD *)v16 + 15);
          *(_OWORD *)(v35 + 52) = *v25;
        }
LABEL_35:
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
        if ((_BYTE)v111) {
          break;
        }
        goto LABEL_36;
      }
      float v28 = *(std::__shared_weak_count **)(v26 + v8 + 8);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(v96, *(void *)(v27 + 56), &v106);
      if (v107) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v107);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      uint64_t v29 = *(void *)(*(void *)(a1 + 344)
                      + 24 * *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6))
          + v8;
      if (HIBYTE(v111)) {
        goto LABEL_34;
      }
      long long v30 = *v20;
      *(_OWORD *)(v29 + 28) = *(long long *)((char *)v20 + 12);
      *(_OWORD *)(v29 + 16) = v30;
      *(_DWORD *)(v29 + 44) = *((_DWORD *)v16 + 14);
      *(_DWORD *)(v29 + 48) = *((_DWORD *)v16 + 15);
      *(_OWORD *)(v29 + 52) = *v25;
      float v31 = *((float *)v16 + 13);
      if (v31 >= *((float *)v16 + 12)) {
        float v31 = *((float *)v16 + 12);
      }
      *((float *)v16 + 6) = *((float *)v16 + 16) + v31;
      *(void *)&long long v105 = v19;
      *((void *)&v105 + 1) = v16;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert(v96, &v105);
      if (*((void *)&v105 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105 + 1));
      }
      float v32 = (void *)(*(void *)(*(void *)(a1 + 344)
                                 + 24 * *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6))
                     + v8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
      float v33 = (std::__shared_weak_count *)v32[1];
      *float v32 = v19;
      v32[1] = v16;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      int v34 = v111;
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
      if (v34) {
        break;
      }
LABEL_36:
      ++v9;
      uint64_t v7 = *(void *)(*(void *)(a1 + 344)
                     + 24 * *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6));
      v8 += 72;
    }
    while (v9 < 0x8E38E38E38E38E39
               * ((*(void *)(*(void *)(a1 + 344)
                             + 24 * *(unsigned int *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6)
                             + 8)
                 - v7) >> 3));
    uint64_t v37 = *(unsigned int *)v6;
    uint64_t v38 = *(void *)(a1 + 200);
    uint64_t v39 = *(void *)(a1 + 344);
    uint64_t v40 = 24 * *(unsigned int *)(v38 + 4 * v37);
    float32x4_t v42 = (uint64_t *)(v39 + v40 + 8);
    uint64_t v41 = *v42;
    uint64_t v43 = *(void *)(v39 + v40);
    if (*v42 == v43)
    {
      unint64_t v5 = v95;
    }
    else
    {
      unint64_t v44 = 0;
      unint64_t v5 = v95;
      do
      {
        uint64_t v45 = v43 + 72 * v44;
        if (*(unsigned char *)(v45 + 68))
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *>((uint64_t)&v98, v45 + 72, v41, v45);
          uint64_t v47 = v46;
          for (uint64_t i = *v42; i != v47; i -= 72)
          {
            int64_t v49 = *(std::__shared_weak_count **)(i - 64);
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
          }
          *float32x4_t v42 = v47;
          uint64_t v37 = *(unsigned int *)v6;
          uint64_t v38 = *(void *)(a1 + 200);
          uint64_t v39 = *(void *)(a1 + 344);
        }
        else
        {
          ++v44;
        }
        uint64_t v50 = 24 * *(unsigned int *)(v38 + 4 * v37);
        float32x4_t v42 = (uint64_t *)(v39 + v50 + 8);
        uint64_t v41 = *v42;
        uint64_t v43 = *(void *)(v39 + v50);
      }
      while (v44 < 0x8E38E38E38E38E39 * ((*v42 - v43) >> 3));
    }
LABEL_52:
    if ((float)(*(float *)&v108[16] - *(float *)&v108[12]) > 0.0)
    {
      float v52 = *(float *)&v108[20];
      float v51 = *(float *)&v108[24];
      float v53 = *(float *)&v110;
      long long v54 = (char *)operator new(0x58uLL);
      long long v55 = v54;
      if (v51 >= v52) {
        float v56 = v52;
      }
      else {
        float v56 = v51;
      }
      *((void *)v54 + 1) = 0;
      *((void *)v54 + 2) = 0;
      *(void *)long long v54 = &unk_2700D8828;
      *((float *)v54 + 6) = v53 + v56;
      unsigned int v57 = v54 + 24;
      *(_OWORD *)(v54 + 28) = *(_OWORD *)v108;
      *(_OWORD *)(v54 + 40) = *(_OWORD *)&v108[12];
      *((void *)v54 + 7) = v109;
      *((_OWORD *)v54 + 4) = v110;
      *((void *)v54 + 10) = -1;
      *(void *)&long long v104 = v54 + 24;
      *((void *)&v104 + 1) = v54;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 1, 1uLL, memory_order_relaxed);
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert(v96, &v104);
      if (*((void *)&v104 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v104 + 1));
      }
      unsigned int v58 = *(_DWORD *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v108);
      uint64_t v59 = *(void *)(a1 + 344);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v55 + 1, 1uLL, memory_order_relaxed);
      char v103 = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v55 + 1, 1uLL, memory_order_relaxed);
      float32x4_t v98 = v57;
      float32x4_t v99 = (std::__shared_weak_count *)v55;
      *(_OWORD *)&v100[12] = *(_OWORD *)(v55 + 40);
      *(_OWORD *)uint64_t v100 = *(_OWORD *)(v55 + 28);
      uint64_t v101 = *((void *)v55 + 7);
      long long v102 = *((_OWORD *)v55 + 4);
      uint64_t v60 = v59 + 24 * v58;
      unint64_t v61 = *(void *)(v60 + 8);
      unint64_t v62 = *(void *)(v60 + 16);
      double v63 = (uint64_t *)(v60 + 8);
      if (v61 >= v62)
      {
        uint64_t v65 = std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>((uint64_t *)(v59 + 24 * v58), (uint64_t)&v98);
        float v66 = v99;
        uint64_t *v63 = v65;
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
      }
      else
      {
        *(void *)unint64_t v61 = v57;
        *(void *)(v61 + 8) = v55;
        float32x4_t v98 = 0;
        float32x4_t v99 = 0;
        long long v64 = *(_OWORD *)&v100[12];
        *(_OWORD *)(v61 + 16) = *(_OWORD *)v100;
        *(_OWORD *)(v61 + 28) = v64;
        *(void *)(v61 + 44) = v101;
        *(_OWORD *)(v61 + 52) = v102;
        *(unsigned char *)(v61 + 68) = v103;
        uint64_t *v63 = v61 + 72;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
      if (*(float *)&v108[12] < 0.01)
      {
        uint64_t v67 = *(unsigned int *)&v108[4];
        if ((float)(*(float *)&v108[20] + *(float *)&v110) < *(float *)(*(void *)a1 + 4 * *(unsigned int *)&v108[4]))
        {
          *(float *)(*(void *)a1 + 4 * *(unsigned int *)&v108[4]) = *(float *)&v108[20] + *(float *)&v110;
          *(_DWORD *)(*(void *)(a1 + 224) + 4 * v67) = *(_DWORD *)&v108[12];
          *(_DWORD *)(*(void *)(a1 + 248) + 4 * v67) = *(_DWORD *)v108;
        }
      }
      unsigned int AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex(a1, (unsigned int *)v108, (int *)&v108[4]);
      float v69 = *(float *)&v108[16];
      if (cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v108) + -0.01 < v69
        && (float)(*(float *)&v108[24] + *(float *)&v110) < *(float *)(*(void *)a1 + 4 * AnotherVertex))
      {
        *(float *)(*(void *)a1 + 4 * AnotherVertex) = *(float *)&v108[24] + *(float *)&v110;
        float v70 = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v108);
        *(float *)(*(void *)(a1 + 224) + 4 * AnotherVertex) = v70 - *(float *)&v108[16];
        *(_DWORD *)(*(void *)(a1 + 248) + 4 * AnotherVertex) = *(_DWORD *)v108;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
    }
    if (!(_BYTE)v111)
    {
      float v71 = *((float *)v6 + 9);
      float v73 = *((float *)v6 + 5);
      float v72 = *((float *)v6 + 6);
      v74 = (char *)operator new(0x58uLL);
      int64_t v75 = v74;
      if (v72 >= v73) {
        float v76 = v73;
      }
      else {
        float v76 = v72;
      }
      *((void *)v74 + 2) = 0;
      *((void *)v74 + 1) = 0;
      *(void *)v74 = &unk_2700D8828;
      uint64_t v77 = *(void *)(v6 + 28);
      *((float *)v74 + 6) = v71 + v76;
      v78 = v74 + 24;
      long long v79 = *(_OWORD *)v6;
      *(_OWORD *)(v74 + 40) = *(_OWORD *)(v6 + 12);
      *(_OWORD *)(v74 + 28) = v79;
      *((void *)v74 + 7) = v77;
      *((_OWORD *)v74 + 4) = *(_OWORD *)(v6 + 36);
      *((void *)v74 + 10) = -1;
      *(void *)&long long v97 = v74 + 24;
      *((void *)&v97 + 1) = v74;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v74 + 1, 1uLL, memory_order_relaxed);
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert(v96, &v97);
      if (*((void *)&v97 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
      }
      unsigned int v80 = *(_DWORD *)(*(void *)(a1 + 200) + 4 * *(unsigned int *)v6);
      uint64_t v81 = *(void *)(a1 + 344);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v75 + 1, 1uLL, memory_order_relaxed);
      char v103 = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v75 + 1, 1uLL, memory_order_relaxed);
      float32x4_t v98 = v78;
      float32x4_t v99 = (std::__shared_weak_count *)v75;
      *(_OWORD *)&v100[12] = *(_OWORD *)(v75 + 40);
      *(_OWORD *)uint64_t v100 = *(_OWORD *)(v75 + 28);
      uint64_t v101 = *((void *)v75 + 7);
      long long v102 = *((_OWORD *)v75 + 4);
      uint64_t v82 = v81 + 24 * v80;
      unint64_t v83 = *(void *)(v82 + 8);
      unint64_t v84 = *(void *)(v82 + 16);
      int64_t v85 = (uint64_t *)(v82 + 8);
      if (v83 >= v84)
      {
        uint64_t v87 = std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>((uint64_t *)(v81 + 24 * v80), (uint64_t)&v98);
        v88 = v99;
        *int64_t v85 = v87;
        if (v88) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        }
      }
      else
      {
        *(void *)unint64_t v83 = v78;
        *(void *)(v83 + 8) = v75;
        float32x4_t v98 = 0;
        float32x4_t v99 = 0;
        long long v86 = *(_OWORD *)&v100[12];
        *(_OWORD *)(v83 + 16) = *(_OWORD *)v100;
        *(_OWORD *)(v83 + 28) = v86;
        *(void *)(v83 + 44) = v101;
        *(_OWORD *)(v83 + 52) = v102;
        *(unsigned char *)(v83 + 68) = v103;
        *int64_t v85 = v83 + 72;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75);
      if (*((float *)v6 + 3) < 0.01)
      {
        float v89 = *((float *)v6 + 5) + *((float *)v6 + 9);
        uint64_t v90 = *((unsigned int *)v6 + 1);
        if (v89 < *(float *)(*(void *)a1 + 4 * v90))
        {
          *(float *)(*(void *)a1 + 4 * v90) = v89;
          *(_DWORD *)(*(void *)(a1 + 224) + 4 * v90) = *((_DWORD *)v6 + 3);
          *(_DWORD *)(*(void *)(a1 + 248) + 4 * v90) = *(_DWORD *)v6;
        }
      }
      unsigned int v91 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex(a1, (unsigned int *)v6, (int *)v6 + 1);
      if (v91 == -1) {
        __assert_rtn("ProcessNewWindow", "Geodesic.cpp", 795, "another_pt.Valid()");
      }
      float v92 = *((float *)v6 + 4);
      if (cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v6) + -0.01 < v92)
      {
        float v93 = *((float *)v6 + 6) + *((float *)v6 + 9);
        if (v93 < *(float *)(*(void *)a1 + 4 * v91))
        {
          *(float *)(*(void *)a1 + 4 * v91) = v93;
          *(float *)(*(void *)(a1 + 224) + 4 * v91) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v6)- *((float *)v6 + 4);
          *(_DWORD *)(*(void *)(a1 + 248) + 4 * v91) = *(_DWORD *)v6;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75);
    }
    ++v5;
    uint64_t v4 = v113;
  }
  while (v5 < 0x4EC4EC4EC4EC4EC5 * ((v114 - v113) >> 2));
LABEL_88:
  if (v4)
  {
    float32x4_t v114 = v4;
    operator delete(v4);
  }
}

void sub_24F4CAD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v38 = *(void **)(v36 - 168);
  if (v38)
  {
    *(void *)(v36 - 160) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::Geodesic::IsSaddleOrBoundary(uint64_t a1, uint64_t a2)
{
  if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(a1 + 472), a2)) {
    return 1;
  }
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v7, *(void *)(a1 + 472) + 104, a2);
  unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v7);
  if (HEdge == -1) {
    return 0;
  }
  float v6 = 0.0;
  do
  {
    float v6 = v6 + cv3d::cv::gess::mesh::PolyMesh::Angle(*(void *)(a1 + 472), HEdge);
    unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v7);
  }
  while (HEdge != -1);
  return v6 > 6.28318531;
}

uint64_t cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4)
{
  uint64_t v7 = a2 + 104;
  unsigned int v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a2 + 104, a3);
  unsigned int v14 = v8;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a2, a3, __p);
  int v9 = *a4;
  if (*(_DWORD *)__p[0] == *a4 || *((_DWORD *)__p[0] + 1) == v9 || *((_DWORD *)__p[0] + 2) == v9)
  {
    while (1)
    {
      if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, &v14) + 12) != *a4)
      {
        uint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, &v14);
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, v10) + 12) != *a4) {
          break;
        }
      }
      unsigned int v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, &v14) + 8);
      if (v14 == v8) {
        goto LABEL_7;
      }
    }
    uint64_t v11 = v14;
  }
  else
  {
LABEL_7:
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11;
}

void sub_24F4CAFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::Geodesic::IntersectWindow(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, unsigned char *a7)
{
  *(void *)(a1 + 80) = -1;
  *(_DWORD *)(a1 + 88) = -1;
  *(_OWORD *)(a1 + 92) = xmmword_24F5786E0;
  *(void *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 36) = -1;
  *(_OWORD *)(a1 + 40) = xmmword_24F5786E0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 68) = -1;
  *(_DWORD *)(a1 + 76) = 0;
  float v8 = *(float *)(a3 + 12);
  float v7 = *(float *)(a3 + 16);
  if (v7 > v8)
  {
    int v9 = a7;
    *a4 = 0;
    *a5 = 0;
    *a6 = 0;
    *a7 = 0;
    int v16 = *(_DWORD *)(a2 + 4);
    if (v16 != *(_DWORD *)(a3 + 4))
    {
      *(_DWORD *)(a3 + 4) = v16;
      *(int32x2_t *)(a3 + 20) = vrev64_s32(*(int32x2_t *)(a3 + 20));
      *(float *)(a3 + 12) = v7;
      *(float *)(a3 + 16) = v8;
      float v17 = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)a3) - *(float *)(a3 + 12);
      if (v17 < 0.0) {
        float v17 = 0.0;
      }
      if (v17 < 0.00000001) {
        float v17 = 0.0;
      }
      *(float *)(a3 + 12) = v17;
      *(float *)(a3 + 16) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)a3)
                          - *(float *)(a3 + 16);
      *(float *)(a3 + 28) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)a3)
                          - *(float *)(a3 + 28);
    }
    float v18 = *(float *)(a2 + 12);
    float v19 = *(float *)(a2 + 16);
    if (v19 >= v18) {
      float v20 = *(float *)(a2 + 12);
    }
    else {
      float v20 = *(float *)(a2 + 16);
    }
    float v21 = *(float *)(a3 + 12);
    float v22 = *(float *)(a3 + 16);
    if (v21 < v20) {
      float v20 = *(float *)(a3 + 12);
    }
    if (v22 < v20) {
      float v20 = *(float *)(a3 + 16);
    }
    double v23 = v20;
    if (v18 >= v19) {
      float v24 = *(float *)(a2 + 12);
    }
    else {
      float v24 = *(float *)(a2 + 16);
    }
    if (v24 < v21) {
      float v24 = *(float *)(a3 + 12);
    }
    if (v24 < v22) {
      float v24 = *(float *)(a3 + 16);
    }
    double v25 = (float)((float)((float)(v19 - v18) + v22) - v21) - (v24 - v23);
    if (v25 > 0.0)
    {
      float v26 = *(float *)(a2 + 28);
      float v27 = *(float *)(a2 + 32);
      float v28 = *(float *)(a3 + 28);
      float v29 = *(float *)(a3 + 32);
      if ((float)((float)((float)(v27 - v29) * (float)(v27 - v29)) + (float)((float)(v26 - v28) * (float)(v26 - v28))) < 0.00000001
        && vabds_f32(v18, v21) < 0.00000001
        && vabds_f32(v19, v22) < 0.00000001
        && vabds_f32(*(float *)(a2 + 36), *(float *)(a3 + 36)) < 0.00000001)
      {
        *a5 = 1;
LABEL_77:
        unsigned char *v9 = 1;
        return;
      }
      if (v21 > v18 && v22 < v19)
      {
        if ((float)(v21 - v18) <= 0.00001)
        {
          *(float *)(a2 + 12) = v21;
          float v34 = v21 - v26;
        }
        else
        {
          *(float *)(a1 + 92) = v18;
          float v30 = *(float *)(a3 + 12);
          *(float *)(a1 + 96) = v30;
          float v31 = *(float *)(a2 + 28);
          *(float *)(a1 + 108) = v31;
          float v32 = *(float *)(a2 + 32);
          *(float *)(a1 + 112) = v32;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 20);
          *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 8);
          *(float *)(a1 + 104) = sqrtf((float)((float)(0.0 - v32) * (float)(0.0 - v32))+ (float)((float)(v30 - v31) * (float)(v30 - v31)));
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 36);
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 48);
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 44);
          float v33 = *(float *)(a3 + 12);
          *(float *)(a2 + 12) = v33;
          float v34 = v33 - v26;
        }
        *(float *)(a2 + 20) = sqrtf((float)((float)(0.0 - v27) * (float)(0.0 - v27)) + (float)(v34 * v34));
        *a4 = 1;
      }
      float v35 = *(float *)(a2 + 12);
      float v36 = *(float *)(a3 + 12);
      if (v35 > v36 && *(float *)(a2 + 16) < *(float *)(a3 + 16))
      {
        if ((float)(v35 - v36) > 0.00001)
        {
          *(float *)(a1 + 40) = v36;
          float v37 = *(float *)(a2 + 12);
          *(float *)(a1 + 44) = v37;
          float v38 = *(float *)(a3 + 28);
          *(float *)(a1 + 56) = v38;
          float v39 = *(float *)(a3 + 32);
          *(float *)(a1 + 60) = v39;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 20);
          *(_DWORD *)(a1 + 28) = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(a3 + 40);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 4);
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a3 + 8);
          *(float *)(a1 + 52) = sqrtf((float)((float)(0.0 - v39) * (float)(0.0 - v39))+ (float)((float)(v37 - v38) * (float)(v37 - v38)));
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 36);
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(a3 + 48);
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a3 + 44);
          float v35 = *(float *)(a2 + 12);
        }
        *(float *)(a3 + 12) = v35;
        *(float *)(a3 + 20) = sqrtf((float)((float)(0.0 - v29) * (float)(0.0 - v29))+ (float)((float)(v35 - v28) * (float)(v35 - v28)));
        *a5 = 1;
      }
      float v40 = *(float *)(a3 + 12);
      float v42 = *(float *)(a2 + 12);
      float v41 = *(float *)(a2 + 16);
      if (v40 <= v42 || v40 >= v41)
      {
        float v45 = *(float *)(a3 + 16);
        if (v42 <= v40 || v42 >= v45)
        {
          BOOL v46 = v45 < v41;
          if (v45 < v41) {
            float v44 = *(float *)(a2 + 12);
          }
          else {
            float v44 = *(float *)(a3 + 12);
          }
          int v43 = !v46;
        }
        else
        {
          int v43 = 0;
          float v44 = *(float *)(a2 + 12);
        }
      }
      else
      {
        int v43 = 1;
        float v44 = *(float *)(a3 + 12);
      }
      if (v25 > 0.0 && v25 <= 0.00001)
      {
        if (v43)
        {
          float v47 = v25 + v40;
          *(float *)(a3 + 12) = v47;
          *(float *)(a3 + 20) = sqrtf((float)((float)(0.0 - v29) * (float)(0.0 - v29))+ (float)((float)(v47 - v28) * (float)(v47 - v28)));
          if (*(float *)(a3 + 16) > v47) {
            goto LABEL_72;
          }
        }
        else
        {
          float v55 = *(float *)(a3 + 16) - v25;
          *(float *)(a3 + 16) = v55;
          *(float *)(a3 + 24) = sqrtf((float)((float)(0.0 - v29) * (float)(0.0 - v29))+ (float)((float)(v55 - v28) * (float)(v55 - v28)));
          if (v40 < v55) {
            goto LABEL_72;
          }
        }
        goto LABEL_71;
      }
      float v48 = v25 * 0.5 + v44;
      float v49 = (float)(0.0 - v29) * (float)(0.0 - v29);
      float v50 = sqrtf(v49 + (float)((float)(v48 - v28) * (float)(v48 - v28))) + *(float *)(a3 + 36);
      float v51 = (float)(0.0 - v27) * (float)(0.0 - v27);
      float v52 = sqrtf(v51 + (float)((float)(v48 - v26) * (float)(v48 - v26))) + *(float *)(a2 + 36);
      double v53 = vabds_f32(v40, v42);
      if (v50 > v52)
      {
        if (v53 >= 0.00000001 || vabds_f32(*(float *)(a3 + 16), v41) >= 0.00000001)
        {
          if (v43)
          {
            float v54 = v25 + v40;
            *(float *)(a3 + 12) = v54;
            if (*(float *)(a3 + 16) > v54)
            {
              *(float *)(a3 + 20) = sqrtf(v49 + (float)((float)(v54 - v28) * (float)(v54 - v28)));
LABEL_72:
              int v9 = a5;
              goto LABEL_77;
            }
          }
          else
          {
            float v57 = *(float *)(a3 + 16) - v25;
            *(float *)(a3 + 16) = v57;
            if (v40 < v57)
            {
              *(float *)(a3 + 24) = sqrtf(v49 + (float)((float)(v57 - v28) * (float)(v57 - v28)));
              goto LABEL_72;
            }
          }
        }
LABEL_71:
        unsigned char *v9 = 1;
        goto LABEL_72;
      }
      if (v53 >= 0.00000001 || vabds_f32(*(float *)(a3 + 16), v41) >= 0.00000001)
      {
        if (v43)
        {
          float v56 = v41 - v25;
          *(float *)(a2 + 16) = v56;
          if (v42 < v56)
          {
            *(float *)(a2 + 24) = sqrtf(v51 + (float)((float)(v56 - v26) * (float)(v56 - v26)));
LABEL_76:
            int v9 = a4;
            goto LABEL_77;
          }
        }
        else
        {
          float v58 = v25 + v42;
          *(float *)(a2 + 12) = v58;
          if (v41 > v58)
          {
            *(float *)(a2 + 20) = sqrtf(v51 + (float)((float)(v58 - v26) * (float)(v58 - v26)));
            goto LABEL_76;
          }
        }
      }
      *a6 = 1;
      goto LABEL_76;
    }
  }
}

void std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        float v6 = v4;
        std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::isochart::WindowListElement>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<cv3d::cv::gess::isochart::WindowListElement>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 64);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::~MaxHeap(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    while (*(void *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::CutTopData((uint64_t *)a1, (uint64_t)v3);
  }
  v3[0] = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::CutTopData(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(a1, 0, &v5);
  uint64_t v3 = v5;
  if (v5)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v5 + 4);
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 32);
    *(_OWORD *)(a2 + 36) = *(_OWORD *)(v3 + 40);
  }
  else
  {
    *(void *)a2 = -1;
    *(_DWORD *)(a2 + 8) = -1;
    *(_OWORD *)(a2 + 12) = xmmword_24F5786E0;
    *(_DWORD *)(a2 + 36) = 0;
    *(void *)(a2 + 40) = -1;
    *(_DWORD *)(a2 + 48) = 0;
    uint64_t v4 = 0;
  }
  *(void *)(a2 + 28) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[4];
  if (v4 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(a1, a2, v4 - 1);
    uint64_t v7 = a1[4] - 1;
    a1[4] = v7;
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(*a1 + 16 * v7);
    *(void *)(v9 + 56) = -1;
    if (**(float **)(v8 + 16 * a2) <= *(float *)v9) {
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::upheap(a1, a2);
    }
    else {
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::downheap(a1, a2);
    }
    long long v10 = *(_OWORD *)(*a1 + 16 * a1[4]);
    *(_OWORD *)a3 = v10;
    if (*((void *)&v10 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
}

__n128 cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *a1;
    __n128 result = *(__n128 *)(*a1 + 16 * a2);
    *(_OWORD *)(*a1 + 16 * a2) = *(_OWORD *)(*a1 + 16 * a3);
    *(__n128 *)(v3 + 16 * a3) = result;
    uint64_t v5 = *a1;
    *(void *)(*(void *)(*a1 + 16 * a2) + 56) = a2;
    *(void *)(*(void *)(v5 + 16 * a3) + 56) = a3;
  }
  return result;
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::downheap(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[4];
  if (v2 > a2)
  {
    do
    {
      unint64_t v4 = (2 * a2) | 1;
      uint64_t v5 = *a1;
      float v6 = **(float **)(*a1 + 16 * a2);
      if (v4 >= v2)
      {
        unint64_t v7 = a2;
      }
      else
      {
        unint64_t v7 = a2;
        if (**(float **)(v5 + 16 * v4) < v6)
        {
          float v6 = **(float **)(v5 + 16 * v4);
          unint64_t v7 = (2 * a2) | 1;
        }
      }
      unint64_t v8 = 2 * a2 + 2;
      if (v8 < v2 && **(float **)(v5 + 16 * v8) < v6) {
        unint64_t v7 = 2 * a2 + 2;
      }
      if (v7 == a2) {
        break;
      }
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(a1, a2, v7);
      unint64_t v2 = a1[4];
      a2 = v7;
    }
    while (v7 < v2);
  }
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::upheap(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    do
    {
      unint64_t v3 = a2 - 1;
      unint64_t v4 = (unint64_t)(a2 - 1) >> 1;
      if (**(float **)(*a1 + 16 * a2) >= **(float **)(*a1 + 16 * v4)) {
        break;
      }
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(a1, a2, (unint64_t)(a2 - 1) >> 1);
      a2 = v4;
    }
    while (v3 > 1);
  }
}

void std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      float v12 = 0;
    }
    float v15 = v12;
    int v16 = &v12[24 * v8];
    float v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    float v17 = &v16[v14];
    std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::~__split_buffer(&v15);
  }
}

void sub_24F4CBB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  unint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = v1;
    std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>>(v7, v9);
  unint64_t v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[72 * v12];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 28) = *(_OWORD *)(a2 + 28);
  *((_OWORD *)v11 + 1) = v13;
  *((_DWORD *)v11 + 11) = *(_DWORD *)(a2 + 44);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 52) = *(_OWORD *)(a2 + 52);
  v11[68] = *(unsigned char *)(a2 + 68);
  v16[2] = v11 + 72;
  std::vector<cv3d::cv::gess::isochart::WindowListElement>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<cv3d::cv::gess::isochart::WindowListElement>::~__split_buffer(v16);
  return v14;
}

void sub_24F4CBEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::WindowListElement>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::isochart::WindowListElement>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 72);
      v8 -= 72;
      *(void *)(v7 - 72) = v9;
      uint64_t v10 = *(void *)(v8 + 8);
      *(void *)(v7 - 64) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      long long v11 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v7 - 56) = v11;
      *(_DWORD *)(v7 - 28) = *(_DWORD *)(a3 - 28);
      *(_DWORD *)(v7 - 24) = *(_DWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 20) = *(_OWORD *)(a3 - 20);
      *(unsigned char *)(v7 - 4) = *(unsigned char *)(a3 - 4);
      uint64_t v7 = *((void *)&v17 + 1) - 72;
      *((void *)&v17 + 1) -= 72;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 72;
  }
}

void **std::__split_buffer<cv3d::cv::gess::isochart::WindowListElement>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<cv3d::cv::gess::isochart::WindowListElement>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 72;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 64);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 72;
    }
  }
}

uint64_t std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeWindow const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x4EC4EC4EC4EC4ECLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x276276276276276) {
    unint64_t v9 = 0x4EC4EC4EC4EC4ECLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeWindow>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[52 * v4];
  std::string __p = v10;
  long long v16 = v11;
  float v18 = &v10[52 * v9];
  long long v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)long long v11 = v12;
  *((_DWORD *)v11 + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)v11 + 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(v11 + 36) = *(long long *)((char *)a2 + 36);
  long long v17 = v11 + 52;
  std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    long long v17 = &v16[(v17 - v16 - 52) % 0x34uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_24F4CC30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 52;
      long long v6 = *(_OWORD *)(v3 - 52);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 52) = v6;
      *(_DWORD *)(v4 - 24) = *(_DWORD *)(v3 - 24);
      *(_DWORD *)(v4 - 20) = *(_DWORD *)(v3 - 20);
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v3 -= 52;
      v4 -= 52;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  cv3d::cv::gess::isochart::CMaxFlow::Node *result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeWindow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4EC4EC4EC4EC4EDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(52 * a2);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    long long v10 = *(_OWORD *)(a2 + v7);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    long long v11 = *(std::__shared_weak_count **)(a4 + v7 + 8);
    *(_OWORD *)(a4 + v7) = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    long long v12 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v8 + 28) = *(_OWORD *)(v9 + 28);
    *(_OWORD *)(v8 + 16) = v12;
    *(_DWORD *)(v8 + 44) = *(_DWORD *)(v9 + 44);
    *(_DWORD *)(v8 + 48) = *(_DWORD *)(v9 + 48);
    *(_OWORD *)(v8 + 52) = *(_OWORD *)(v9 + 52);
    *(unsigned char *)(v8 + 68) = *(unsigned char *)(v9 + 68);
    v7 += 72;
  }
  while (v9 + 72 != v6);
  return v6;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8828;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

void **std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_24F4CC67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

float cv3d::cv::gess::isochart::ParameterizePt3ToPt2(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float *a4)
{
  float32x4_t v4 = vsubq_f32(*a3, *a1);
  float32x4_t v5 = vsubq_f32(*a2, *a1);
  float32x4_t v6 = vmulq_f32(v5, v5);
  v6.i32[3] = 0;
  v6.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6)));
  float32x4_t v7 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL)), (int32x4_t)v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL), (int32x4_t)v5)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v5, (int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL)), (int32x4_t)v5), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 4uLL), (int32x4_t)v4));
  float32x4_t v8 = vmulq_f32(v4, v5);
  v8.i32[3] = 0;
  float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8)) / v6.f32[0];
  float32x4_t v10 = vmulq_f32(v7, v7);
  v10.i32[3] = 0;
  *a4 = result;
  a4[1] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10))) / v6.f32[0];
  return result;
}

float cv3d::cv::gess::isochart::ParameterizePt2ToPt2(float *a1, float *a2, float *a3, float *a4)
{
  float v4 = a1[1];
  float v5 = *a3 - *a1;
  float v6 = a3[1] - v4;
  float v7 = *a2 - *a1;
  float v8 = a2[1] - v4;
  float v9 = sqrtf((float)(v8 * v8) + (float)(v7 * v7));
  float v10 = (float)((float)(v6 * v8) + (float)(v5 * v7)) / v9;
  float result = fabsf((float)(v5 * v8) - (float)(v6 * v7)) / v9;
  *a4 = v10;
  a4[1] = result;
  return result;
}

float *cv3d::cv::gess::isochart::GetCommonPointOf2Lines(float *result, float *a2, float *a3, float *a4, float *a5, BOOL *a6)
{
  float v6 = *result;
  float v7 = result[1];
  float v8 = a3[1];
  float v9 = a4[1];
  double v10 = (float)((float)((float)(v7 - a2[1]) * (float)(*a3 - *a4)) - (float)((float)(*result - *a2) * (float)(v8 - v9)));
  if (fabs(v10) >= 0.00000001)
  {
    double v13 = (float)((float)((float)((float)(v7 * (float)(*a4 - *a3)) - (float)(v8 * *a4)) + (float)(v6 * (float)(v8 - v9)))
                + (float)(*a3 * v9))
        / -v10;
    float v14 = v6 + (float)(*a2 - v6) * v13;
    *a5 = v14;
    float v12 = result[1] + (float)(a2[1] - result[1]) * v13;
    BOOL v11 = v13 >= -0.00001;
    if (v13 > 1.00001) {
      BOOL v11 = 0;
    }
  }
  else
  {
    BOOL v11 = 0;
    *a5 = 3.4028e38;
    float v12 = 3.4028e38;
  }
  a5[1] = v12;
  *a6 = v11;
  return result;
}

uint64_t cv3d::cv::gess::internal::InitRandomTangentHelper(float *a1, float32x4_t *a2)
{
  float v3 = *a1;
  float v4 = a1[1];
  float v5 = a1[2];
  float v6 = v5 * v5;
  if (fabsf(*a1) <= fabsf(v4))
  {
    float v10 = 1.0 / sqrtf(v6 + (float)(v4 * v4));
    *(float *)&__int32 v11 = v5 * v10;
    float v8 = -(float)(v4 * v10);
    v9.i32[0] = 0;
    v9.i32[3] = 0;
    v9.i32[1] = v11;
  }
  else
  {
    float v7 = 1.0 / sqrtf(v6 + (float)(v3 * v3));
    float v8 = -(float)(v3 * v7);
    v9.i32[1] = 0;
    v9.i32[3] = 0;
    *(float *)v9.i32 = v5 * v7;
  }
  *(float *)&v9.i32[2] = v8;
  float32x4_t v17 = (float32x4_t)v9;
  float32x4_t v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v9, (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL)), v9), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 4uLL), *(int32x4_t *)a1)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 0xCuLL)), *(int32x4_t *)a1), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), v9));
  int v12 = rand();
  float v13 = (float)((float)((float)v12 * 4.6566e-10) + (float)((float)v12 * 4.6566e-10)) * 3.14159265;
  __float2 v14 = __sincosf_stret(v13);
  *a2 = vaddq_f32(vmulq_n_f32(v17, v14.__sinval), vmulq_n_f32(v16, v14.__cosval));
  return 1;
}

BOOL cv3d::cv::gess::internal::InitRandomTangent(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = a2[1] - *a2;
  if (v2 == v3)
  {
    srand(2u);
    uint64_t v6 = *a2;
    if (a2[1] != *a2)
    {
      unint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        cv3d::cv::gess::internal::InitRandomTangentHelper((float *)(*a1 + 16 * v7), (float32x4_t *)(v6 + 16 * v7));
        unint64_t v7 = v8;
        uint64_t v6 = *a2;
        ++v8;
      }
      while (v7 < (a2[1] - *a2) >> 4);
    }
  }
  return v2 == v3;
}

float32x4_t cv3d::cv::gess::internal::MiddlePoint@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>)
{
  float32x4_t v5 = vmulq_f32(*a2, *a1);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_f32(*a2, *a3);
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_f32(*a1, *a4);
  v7.i32[3] = 0;
  float32x4_t v8 = vmulq_f32(*a3, *a4);
  v8.i32[3] = 0;
  float32x4_t v9 = vmulq_f32(*a2, *a4);
  v9.i32[3] = 0;
  v9.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9));
  v5.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6))
            - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v5, v5));
  v6.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7))
            - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  float32x4_t v11 = vaddq_f32(vmulq_n_f32(*a4, (float)((float)(v6.f32[0] - (float)(v9.f32[0] * v5.f32[0]))+ (float)(v6.f32[0] - (float)(v9.f32[0] * v5.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v9.f32[0] * v9.f32[0])) + 0.0001))), vmulq_n_f32(*a2, (float)((float)(v5.f32[0] - (float)(v9.f32[0] * v6.f32[0]))+ (float)(v5.f32[0] - (float)(v9.f32[0] * v6.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v9.f32[0] * v9.f32[0])) + 0.0001))));
  __asm { FMOV            V2.4S, #-0.25 }
  float32x4_t result = vaddq_f32(vmulq_f32(vaddq_f32(*a1, *a3), v10), vmulq_f32(v11, _Q2));
  *a5 = result;
  return result;
}

float32x4_t cv3d::cv::gess::internal::PositionFloor4@<Q0>(float32x4_t *a1@<X0>, int8x16_t *a2@<X1>, int32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float *a5@<X4>, float *a6@<X5>, float32x4_t *a7@<X8>)
{
  float32x4_t v7 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*a2, *a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*a2, *a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL), *a3));
  float32x4_t v8 = vsubq_f32(*a4, *a1);
  float32x4_t v9 = vmulq_f32(*(float32x4_t *)a2, v8);
  v9.i32[3] = 0;
  float32x4_t v10 = vmulq_f32(v7, v8);
  v10.i32[3] = 0;
  float32x4_t result = vaddq_f32(vaddq_f32(*a1, vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)a2, floorf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9)) * *a6)), *a5)), vmulq_n_f32(vmulq_n_f32(v7, floorf(*a6 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)))), *a5));
  *a7 = result;
  return result;
}

int32x2_t cv3d::cv::gess::internal::PositionFloorIndex4@<D0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float *a5@<X5>, int32x2_t *a6@<X8>)
{
  float32x4_t v6 = vsubq_f32(*a4, *a1);
  float32x4_t v7 = vmulq_f32(*a2, v6);
  v7.i32[3] = 0;
  v7.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7));
  float32x4_t v8 = vmulq_f32(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL), *a3)), v6);
  v8.i32[3] = 0;
  v7.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
  int32x2_t result = vcvt_s32_f32(vrndm_f32(vmul_n_f32(*(float32x2_t *)v7.f32, *a5)));
  *a6 = result;
  return result;
}

float32x4_t cv3d::cv::gess::internal::PositionRound4@<Q0>(float32x4_t *a1@<X0>, int8x16_t *a2@<X1>, int32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  float32x4_t v7 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*a2, *a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*a2, *a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL), *a3));
  float32x4_t v8 = vsubq_f32(*a4, *a1);
  float32x4_t v9 = vmulq_f32(*(float32x4_t *)a2, v8);
  v9.i32[3] = 0;
  float32x4_t v10 = vmulq_f32(v7, v8);
  v10.i32[3] = 0;
  float32x4_t result = vaddq_f32(vmulq_n_f32(vmulq_n_f32(v7, roundf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)) * a7)), a6), vaddq_f32(*a1, vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)a2, roundf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9)) * a7)), a6)));
  *a5 = result;
  return result;
}

uint64_t cv3d::cv::gess::internal::InitRandomPositionHelper(float32x4_t *a1, float *a2, float32x4_t *a3, float a4)
{
  float v6 = *a2;
  float v7 = a2[1];
  float v8 = a2[2];
  float v9 = v8 * v8;
  if (fabsf(*a2) <= fabsf(v7))
  {
    float v13 = 1.0 / sqrtf(v9 + (float)(v7 * v7));
    *(float *)&__int32 v14 = v8 * v13;
    float v11 = -(float)(v7 * v13);
    v12.i32[0] = 0;
    v12.i32[3] = 0;
    v12.i32[1] = v14;
  }
  else
  {
    float v10 = 1.0 / sqrtf(v9 + (float)(v6 * v6));
    float v11 = -(float)(v6 * v10);
    v12.i32[1] = 0;
    v12.i32[3] = 0;
    *(float *)v12.i32 = v8 * v10;
  }
  *(float *)&v12.i32[2] = v11;
  float32x4_t v18 = (float32x4_t)v12;
  float32x4_t v17 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v12, (int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL)), v12), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL), v12));
  float v16 = (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0;
  *a3 = vaddq_f32(*a1, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v17, v16), vmulq_n_f32(v18, (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0)), a4));
  return 1;
}

BOOL cv3d::cv::gess::internal::InitRandomPosition(void *a1, void *a2, void *a3, float a4)
{
  uint64_t v8 = (uint64_t)(a3[1] - *a3) >> 4;
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (v8 == v9)
  {
    srand(2u);
    if ((*(uint64_t (**)(void *))(*a1 + 16))(a1))
    {
      unint64_t v10 = 0;
      unsigned int v11 = 1;
      do
      {
        uint64_t v12 = a1[5];
        if (v10 >= (a1[6] - v12) >> 4) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        cv3d::cv::gess::internal::InitRandomPositionHelper((float32x4_t *)(v12 + 16 * v10), (float *)(*a2 + 16 * v10), (float32x4_t *)(*a3 + 16 * v10), a4);
        unint64_t v10 = v11;
      }
      while ((*(uint64_t (**)(void *))(*a1 + 16))(a1) > (unint64_t)v11++);
    }
  }
  return v8 == v9;
}

uint64_t cv3d::cv::gess::internal::CompatOrientationExtrinsic4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, _OWORD *a6, int8x16_t a7)
{
  uint64_t v7 = 0;
  v45[10] = *(double *)MEMORY[0x263EF8340];
  do
  {
    v45[v7 + 4] = *(float *)(a1 + 4 * v7);
    ++v7;
  }
  while (v7 != 3);
  for (uint64_t i = 0; i != 3; ++i)
    *(&v43 + i) = *(float *)(a2 + 4 * i);
  for (uint64_t j = 0; j != 3; ++j)
    *(&v40 + j) = *(float *)(a1 + 4 * j);
  uint64_t v10 = 0;
  v45[7] = v44 * v42 - v45[0] * v41;
  v45[8] = v45[0] * v40 - v43 * v42;
  v45[9] = v43 * v41 - v44 * v40;
  do
  {
    *(&v43 + v10) = *(float *)(a3 + 4 * v10);
    ++v10;
  }
  while (v10 != 3);
  for (uint64_t k = 0; k != 3; ++k)
    *(&v40 + k) = *(float *)(a4 + 4 * k);
  for (uint64_t m = 0; m != 3; ++m)
    *(&v37 + m) = *(float *)(a3 + 4 * m);
  uint64_t v13 = 0;
  unsigned __int8 v14 = 0;
  unsigned __int8 v15 = 0;
  v45[1] = v41 * v39 - v42 * v38;
  v45[2] = v42 * v37 - v40 * v39;
  v45[3] = v40 * v38 - v41 * v37;
  double v16 = -1.79769313e308;
  do
  {
    uint64_t v17 = 0;
    float32x4_t v18 = &v45[3 * v13 + 4];
    double v19 = *v18;
    double v20 = v18[1];
    double v21 = v18[2];
    char v22 = 1;
    do
    {
      char v23 = v22;
      double v24 = fabs(v20 * *(&v43 + 3 * v17 + 1) + v19 * *(&v43 + 3 * v17) + v21 * v45[3 * v17]);
      if (v24 > v16)
      {
        double v16 = v24;
        unsigned __int8 v15 = v13;
        unsigned __int8 v14 = v17;
      }
      uint64_t v17 = 1;
      char v22 = 0;
    }
    while ((v23 & 1) != 0);
    ++v13;
  }
  while (v13 != 2);
  double v25 = &v45[3 * v15 + 4];
  float v26 = (float64x2_t *)(&v43 + 3 * v14);
  a7.i64[0] = (uint64_t)v25[2];
  double v27 = v26[1].f64[0];
  float64x2_t v28 = *(float64x2_t *)v25;
  *(float32x2_t *)&long long v29 = vcvt_f32_f64(*(float64x2_t *)v25);
  *(float *)&unsigned int v30 = *(double *)a7.i64;
  *((void *)&v29 + 1) = v30;
  *a5 = v29;
  *(double *)a7.i64 = vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v28, *v26).f64[1]), v26->f64[0], v28.f64[0])
                    + *(double *)a7.i64 * v27;
  v28.f64[0] = 1.0;
  v31.f64[0] = NAN;
  v31.f64[1] = NAN;
  double v32 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v31), (int8x16_t)v28, a7).i64;
  float64x2_t v33 = vmulq_n_f64(*v26, v32);
  double v34 = v27 * v32;
  *(float32x2_t *)&long long v35 = vcvt_f32_f64(v33);
  *(float *)&double v34 = v34;
  *((void *)&v35 + 1) = LODWORD(v34);
  *a6 = v35;
  return 1;
}

uint64_t cv3d::cv::gess::internal::CompatPositionExtrinsic4(float32x4_t *a1, int32x4_t *a2, int32x4_t *a3, float32x4_t *a4, float32x4_t *a5, int32x4_t *a6, int32x4_t *a7, float32x4_t *a8, float *a9, float *a10, float32x4_t *a11, float32x4_t *a12)
{
  unsigned int v12 = 0;
  float32x4_t v13 = *(float32x4_t *)a3;
  float32x4_t v14 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), *a3)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *a2));
  float32x4_t v15 = *(float32x4_t *)a7;
  float32x4_t v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a6, (int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 0xCuLL)), *a6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), *a7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 4uLL), *a6));
  float32x4_t v17 = vmulq_f32(*(float32x4_t *)a2, *a1);
  v17.i32[3] = 0;
  float32x4_t v18 = vmulq_f32(*(float32x4_t *)a2, *a5);
  v18.i32[3] = 0;
  float32x4_t v19 = vmulq_f32(*(float32x4_t *)a6, *a1);
  v19.i32[3] = 0;
  float32x4_t v20 = vmulq_f32(*(float32x4_t *)a6, *a5);
  v20.i32[3] = 0;
  float32x4_t v21 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a6);
  v21.i32[3] = 0;
  v21.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21));
  v17.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17));
  v18.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20));
  v22.i64[0] = 0x3F0000003F000000;
  v22.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V5.4S, #-0.25 }
  float32x4_t v28 = vaddq_f32(vmulq_f32(vaddq_f32(*a1, *a5), v22), vmulq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)a6, (float)((float)(v18.f32[0] - (float)(v21.f32[0] * v17.f32[0]))+ (float)(v18.f32[0] - (float)(v21.f32[0] * v17.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v21.f32[0] * v21.f32[0])) + 0.0001))), vmulq_n_f32(*(float32x4_t *)a2, (float)((float)(v17.f32[0] - (float)(v21.f32[0] * v18.f32[0]))+ (float)(v17.f32[0] - (float)(v21.f32[0] * v18.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v21.f32[0] * v21.f32[0])) + 0.0001)))), _Q5));
  float32x4_t v29 = vsubq_f32(v28, *a4);
  float32x4_t v30 = vmulq_f32(*(float32x4_t *)a3, v29);
  v30.i32[3] = 0;
  float32x4_t v31 = vmulq_n_f32(*(float32x4_t *)a3, floorf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30)) * *a10));
  float v32 = *a9;
  float32x4_t v33 = vmulq_f32(v14, v29);
  v33.i32[3] = 0;
  float32x4_t v34 = vaddq_f32(vaddq_f32(*a4, vmulq_n_f32(v31, *a9)), vmulq_n_f32(vmulq_n_f32(v14, floorf(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)))), *a9));
  float32x4_t v35 = vsubq_f32(v28, *a8);
  float32x4_t v36 = vmulq_f32(*(float32x4_t *)a7, v35);
  v36.i32[3] = 0;
  float32x4_t v37 = vmulq_f32(v16, v35);
  v37.i32[3] = 0;
  float32x4_t v38 = vaddq_f32(vaddq_f32(*a8, vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)a7, floorf(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)))), *a9)), vmulq_n_f32(vmulq_n_f32(v16, floorf(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37)))), *a9));
  unsigned int v39 = -1;
  double v40 = 1.79769313e308;
  unsigned int v41 = -1;
  do
  {
    unsigned int v42 = 0;
    float32x4_t v43 = vaddq_f32(v34, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v14, (float)(v12 >> 1)), vmulq_n_f32(v13, (float)(v12 & 1))), v32));
    do
    {
      float32x4_t v44 = vsubq_f32(v43, vaddq_f32(v38, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v16, (float)(v42 >> 1)), vmulq_n_f32(v15, (float)(v42 & 1))), v32)));
      float32x4_t v45 = vmulq_f32(v44, v44);
      v45.i32[3] = 0;
      double v46 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)));
      if (v40 > v46)
      {
        double v40 = v46;
        unsigned int v41 = v12;
        unsigned int v39 = v42;
      }
      ++v42;
    }
    while (v42 != 4);
    ++v12;
  }
  while (v12 != 4);
  *a11 = vaddq_f32(v34, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v13, (float)(v41 & 1)), vmulq_n_f32(v14, (float)((v41 >> 1) & 1))), v32));
  *a12 = vaddq_f32(v38, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v16, (float)((v39 >> 1) & 1)), vmulq_n_f32(*(float32x4_t *)a7, (float)(v39 & 1))), *a9));
  return 1;
}

uint64_t cv3d::cv::gess::internal::CompatPositionExtrinsicIndex4(float32x4_t *a1, int32x4_t *a2, int32x4_t *a3, float32x4_t *a4, float32x4_t *a5, int32x4_t *a6, int32x4_t *a7, float32x4_t *a8, const float *a9, float *a10, float *a11, _DWORD *a12, _DWORD *a13)
{
  unsigned int v13 = 0;
  float32x4_t v15 = *(float32x4_t *)a3;
  float32x4_t v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), *a3)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *a2));
  float32x4_t v17 = *(float32x4_t *)a7;
  float32x4_t v18 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a6, (int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 0xCuLL)), *a6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL)), *a7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 4uLL), *a6));
  float32x4_t v19 = vmulq_f32(*(float32x4_t *)a2, *a1);
  v19.i32[3] = 0;
  float32x4_t v20 = vmulq_f32(*(float32x4_t *)a2, *a5);
  v20.i32[3] = 0;
  float32x4_t v21 = vmulq_f32(*(float32x4_t *)a6, *a1);
  v21.i32[3] = 0;
  v21.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21));
  float32x4_t v22 = vmulq_f32(*(float32x4_t *)a6, *a5);
  v22.i32[3] = 0;
  v22.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22));
  float32x4_t v23 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a6);
  v23.i32[3] = 0;
  v23.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23));
  v19.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  v24.i64[0] = 0x3F0000003F000000;
  v24.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V5.4S, #-0.25 }
  float32x4_t v30 = vaddq_f32(vmulq_f32(vaddq_f32(*a1, *a5), v24), vmulq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)a6, (float)((float)((float)(v21.f32[0] - v22.f32[0]) - (float)(v23.f32[0] * v19.f32[0]))+ (float)((float)(v21.f32[0] - v22.f32[0]) - (float)(v23.f32[0] * v19.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v23.f32[0] * v23.f32[0])) + 0.0001))), vmulq_n_f32(*(float32x4_t *)a2, (float)((float)(v19.f32[0] - (float)(v23.f32[0] * (float)(v21.f32[0] - v22.f32[0])))+ (float)(v19.f32[0] - (float)(v23.f32[0] * (float)(v21.f32[0] - v22.f32[0]))))* (float)(1.0 / (float)((float)(1.0 - (float)(v23.f32[0] * v23.f32[0])) + 0.0001)))), _Q5));
  float32x4_t v31 = vsubq_f32(v30, *a4);
  float32x4_t v32 = vmulq_f32(*(float32x4_t *)a3, v31);
  v32.i32[3] = 0;
  unsigned int v33 = vcvtms_s32_f32(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)) * *a10);
  float32x4_t v34 = vmulq_f32(v16, v31);
  v34.i32[3] = 0;
  unsigned int v35 = vcvtms_s32_f32(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)));
  float32x4_t v36 = vsubq_f32(v30, *a8);
  float32x4_t v37 = vmulq_f32(*(float32x4_t *)a7, v36);
  v37.i32[3] = 0;
  unsigned int v38 = vcvtms_s32_f32(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37)));
  float32x4_t v39 = vmulq_f32(v18, v36);
  v39.i32[3] = 0;
  unsigned int v40 = vcvtms_s32_f32(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)));
  float32x4_t v41 = vld1q_dup_f32(a9);
  unsigned int v42 = -1;
  float v43 = 3.4028e38;
  unsigned int v44 = -1;
  do
  {
    unsigned int v45 = 0;
    float32x4_t v46 = vaddq_f32(*a4, vmulq_f32(vaddq_f32(vmulq_n_f32(v16, (float)(int)(v35 + (v13 >> 1))), vmulq_n_f32(v15, (float)(int)((v13 & 1) + v33))), v41));
    do
    {
      float32x4_t v47 = vsubq_f32(v46, vaddq_f32(*a8, vmulq_f32(v41, vaddq_f32(vmulq_n_f32(v18, (float)(int)(v40 + (v45 >> 1))), vmulq_n_f32(v17, (float)(int)((v45 & 1) + v38))))));
      float32x4_t v48 = vmulq_f32(v47, v47);
      v48.i32[3] = 0;
      float v49 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48));
      if (v49 < v43)
      {
        float v43 = v49;
        unsigned int v44 = v13;
        unsigned int v42 = v45;
      }
      ++v45;
    }
    while (v45 != 4);
    ++v13;
  }
  while (v13 != 4);
  *a11 = v43;
  *a12 = (v44 & 1) + v33;
  a12[1] = ((v44 >> 1) & 1) + v35;
  *a13 = (v42 & 1) + v38;
  a13[1] = ((v42 >> 1) & 1) + v40;
  return 1;
}

uint64_t cv3d::cv::gess::internal::OptimizeOrientationsRoSy4Extrinsic(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = (a2[1] - *a2) >> 4;
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  float v6 = (void *)(a1 + 104);
  if (v3 != (v5 - v4) >> 2 || v3 != (uint64_t)(a3[1] - *a3) >> 4) {
    return 0;
  }
  if (v5 != v4)
  {
    uint64_t v10 = 0;
    unsigned __int32 v11 = 0;
    do
    {
      uint64_t v12 = *a2;
      float32x4_t v30 = *(float32x4_t *)(*a3 + 16 * v10);
      v28.i32[0] = v11;
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v29, v6, (unsigned int *)&v28);
      unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v29);
      if (Vertex != -1)
      {
        float32x4_t v15 = (float32x4_t *)(v12 + 16 * v10);
        *(void *)&long long v14 = 0;
        long long v26 = v14;
        do
        {
          uint64_t v16 = *a2 + 16 * Vertex;
          uint64_t v17 = *a3 + 16 * Vertex;
          float32x4_t v27 = 0u;
          float32x4_t v28 = 0u;
          cv3d::cv::gess::internal::CompatOrientationExtrinsic4((uint64_t)&v30, (uint64_t)v15, v17, v16, &v28, &v27, (int8x16_t)0);
          float32x4_t v18 = vaddq_f32(v27, vmulq_n_f32(v28, *(float *)&v26));
          float32x4_t v19 = vmulq_f32(v18, *v15);
          v19.i32[3] = 0;
          float32x4_t v20 = vsubq_f32(v18, vmulq_n_f32(*v15, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))));
          float32x4_t v21 = vmulq_f32(v20, v20);
          v21.i32[3] = 0;
          float32x2_t v22 = (float32x2_t)vpaddq_f32(v21, v21).u64[0];
          v22.f32[0] = sqrtf(vaddv_f32(v22));
          long long v23 = v26;
          if (v22.f32[0] > 0.00000001) {
            float32x4_t v20 = vdivq_f32(v20, (float32x4_t)vdupq_lane_s32((int32x2_t)v22, 0));
          }
          *(float *)&long long v23 = *(float *)&v26 + 1.0;
          float32x4_t v25 = v20;
          long long v26 = v23;
          float32x4_t v30 = v20;
          unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v29);
        }
        while (Vertex != -1);
        if (*(float *)&v26 > 0.0) {
          *(float32x4_t *)(*a3 + 16 * v10) = v25;
        }
      }
      uint64_t v10 = ++v11;
    }
    while (v11 < (unint64_t)((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2));
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::OptimizePositionsRoSy4Extrinsic(uint64_t a1, uint64_t *a2, void *a3, void *a4, float a5)
{
  v63[0] = a5;
  uint64_t v5 = (a2[1] - *a2) >> 4;
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = (void *)(a1 + 104);
  if (v5 != (v7 - v6) >> 2 || v5 != (uint64_t)(a3[1] - *a3) >> 4 || v5 != (uint64_t)(a4[1] - *a4) >> 4) {
    return 0;
  }
  if (fabsf(a5) <= 0.00000001) {
    float v11 = 0.0;
  }
  else {
    float v11 = 1.0 / a5;
  }
  float v62 = v11;
  if (v7 != v6)
  {
    unint64_t v14 = 0;
    unsigned __int32 v50 = 0;
    float32x4_t v15 = (uint64_t *)(a1 + 8);
    float32x4_t v47 = (void *)(a1 + 104);
    do
    {
      unint64_t v49 = v14;
      uint64_t v16 = *a2;
      LODWORD(v58[0]) = *(_DWORD *)(a1 + 176);
      uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v15, (unsigned int *)v58);
      uint64_t v18 = *(void *)(v17 + 40);
      if (v49 >= (*(void *)(v17 + 48) - v18) >> 4) {
        cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
      }
      float32x4_t v19 = *(float32x4_t *)(*a3 + 16 * v49);
      float32x4_t v52 = *(float32x4_t *)(v18 + 16 * v49);
      float32x4_t v61 = v52;
      float32x4_t v59 = *(float32x4_t *)(*a4 + 16 * v49);
      float32x4_t v20 = vmulq_f32(v19, v19);
      v20.i32[3] = 0;
      float32x4_t v21 = vpaddq_f32(v20, v20);
      float32x4_t v22 = vpaddq_f32(v21, v21);
      float32x4_t v23 = (float32x4_t)xmmword_24F570A10;
      if (v22.f32[0] > 0.0) {
        float32x4_t v23 = vdivq_f32(v19, vsqrtq_f32(v22));
      }
      float32x4_t v48 = v23;
      int32x4_t v60 = (int32x4_t)v23;
      v57.i32[0] = v50;
      float32x4_t v24 = (cv3d::cv::gess::mesh::OneRingVertex *)cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v58, v8, (unsigned int *)&v57);
      unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex(v24);
      if (Vertex != -1)
      {
        unsigned int v27 = Vertex;
        float32x4_t v28 = (int32x4_t *)(v16 + 16 * v49);
        *(void *)&long long v26 = 0;
        long long v53 = v26;
        do
        {
          uint64_t v29 = *a2;
          v57.i32[0] = *(_DWORD *)(a1 + 176);
          uint64_t v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v15, (unsigned int *)&v57);
          uint64_t v31 = *(void *)(v30 + 40);
          if (v27 >= (unint64_t)((*(void *)(v30 + 48) - v31) >> 4)) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          float32x4_t v32 = *(float32x4_t *)(*a3 + 16 * v27);
          float32x4_t v56 = *(float32x4_t *)(*a4 + 16 * v27);
          float32x4_t v33 = vmulq_f32(v32, v32);
          v33.i32[3] = 0;
          float32x4_t v34 = vpaddq_f32(v33, v33);
          float32x4_t v35 = vpaddq_f32(v34, v34);
          float32x4_t v36 = (float32x4_t)xmmword_24F570A10;
          if (v35.f32[0] > 0.0) {
            float32x4_t v36 = vdivq_f32(v32, vsqrtq_f32(v35));
          }
          int32x4_t v57 = (int32x4_t)v36;
          float32x4_t v54 = 0u;
          float32x4_t v55 = 0u;
          cv3d::cv::gess::internal::CompatPositionExtrinsic4(&v61, v28, &v60, &v59, (float32x4_t *)(v31 + 16 * v27), (int32x4_t *)(v29 + 16 * v27), &v57, &v56, v63, &v62, &v55, &v54);
          long long v38 = v53;
          float32x4_t v37 = vaddq_f32(v54, vmulq_n_f32(v55, *(float *)&v53));
          *(float *)&long long v38 = *(float *)&v53 + 1.0;
          double v39 = (float)(*(float *)&v53 + 1.0);
          long long v53 = v38;
          if (v39 > 0.00000001) {
            float32x4_t v37 = vdivq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v38, 0));
          }
          float32x4_t v40 = vmulq_f32(vsubq_f32(v37, v52), *(float32x4_t *)v28);
          v40.i32[3] = 0;
          float32x4_t v51 = vsubq_f32(v37, vmulq_n_f32(*(float32x4_t *)v28, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40))));
          float32x4_t v59 = v51;
          unsigned int v27 = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v58);
        }
        while (v27 != -1);
        if (*(float *)&v53 > 0.0)
        {
          float32x4_t v41 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL), (int32x4_t)v48), (float32x4_t)vzip2q_s32(vzip1q_s32(*v28, (int32x4_t)vextq_s8(*(int8x16_t *)v28, *(int8x16_t *)v28, 0xCuLL)), *v28)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v48, (int32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 0xCuLL)), (int32x4_t)v48), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)v28, *(int8x16_t *)v28, 4uLL), *v28));
          float32x4_t v42 = vsubq_f32(v52, v51);
          float32x4_t v43 = vmulq_f32(v48, v42);
          v43.i32[3] = 0;
          float32x4_t v44 = vmulq_f32(v42, v41);
          v44.i32[3] = 0;
          *(float32x4_t *)(*a4 + 16 * v49) = vaddq_f32(vmulq_n_f32(vmulq_n_f32(v41, roundf(v11 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44)))), a5), vaddq_f32(v51, vmulq_n_f32(vmulq_n_f32(v48, roundf(v11 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43)))), a5)));
        }
      }
      unint64_t v14 = ++v50;
      uint64_t v8 = v47;
    }
    while (v50 < (unint64_t)((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2));
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::Quad2Triangles(uint64_t a1, _DWORD *a2, unsigned int **a3, int a4)
{
  uint64_t v4 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 16) {
    cv3d::cv::gess::internal::Quad2Triangles();
  }
  if (a4 == -1) {
    cv3d::cv::gess::internal::Quad2Triangles();
  }
  unsigned int v8 = v4[1];
  unsigned int v28 = *v4;
  unsigned int v10 = v4[2];
  unsigned int v9 = v4[3];
  unsigned int v26 = v10;
  unsigned int v27 = v8;
  unsigned int v25 = v9;
  float v11 = (void *)(a1 + 104);
  int v24 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v28) + 12);
  int v23 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v26) + 12);
  LODWORD(v19) = -1;
  int appended = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v19);
  int v20 = -1;
  *(void *)&long long v19 = -1;
  *((void *)&v19 + 1) = -1;
  unsigned int v12 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v19);
  unsigned int v21 = v12;
  int v20 = -1;
  *(void *)&long long v19 = -1;
  *((void *)&v19 + 1) = -1;
  unsigned int v13 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v19);
  unsigned int v18 = v13;
  LODWORD(v19) = a4;
  unint64_t v14 = (uint64_t *)(a1 + 32);
  uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v14, (unsigned int *)&v19);
  if (*(void *)(v15 + 48) <= (unint64_t)v12) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  *(void *)(*(void *)(v15 + 40) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) |= 1 << v12;
  LODWORD(v19) = a4;
  uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v14, (unsigned int *)&v19);
  if (*(void *)(v16 + 48) <= (unint64_t)v13) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  *(void *)(*(void *)(v16 + 40) + (((unint64_t)v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v21, &v28);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v27, &v21);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v18, &v26);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v25, &v18);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v11, &v21, &v18);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, a2, &v21);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, &appended, &v18);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, &appended, &v26);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, &appended, &v25);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v11, &v24, &v18);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v11, &v23, &v21);
  return 1;
}

uint64_t cv3d::cv::gess::internal::Pentagon2Triangles(uint64_t a1, _DWORD *a2, unsigned int **a3, int a4)
{
  uint64_t v4 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 20) {
    cv3d::cv::gess::internal::Pentagon2Triangles();
  }
  if (a4 == -1) {
    cv3d::cv::gess::internal::Pentagon2Triangles();
  }
  unsigned int v8 = v4[1];
  unsigned int v36 = *v4;
  unsigned int v9 = v4[3];
  unsigned int v34 = v4[2];
  unsigned int v35 = v8;
  unsigned int v32 = v4[4];
  unsigned int v33 = v9;
  unsigned int v10 = (void *)(a1 + 104);
  int v31 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v36) + 12);
  int v30 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v10, &v34) + 12);
  int v29 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v10, &v33) + 12);
  LODWORD(v24) = -1;
  int appended = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v24);
  LODWORD(v24) = -1;
  int v27 = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v24);
  int v25 = -1;
  *(void *)&long long v24 = -1;
  *((void *)&v24 + 1) = -1;
  unsigned int v11 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v24);
  int v25 = -1;
  unsigned int v26 = v11;
  *(void *)&long long v24 = -1;
  *((void *)&v24 + 1) = -1;
  unsigned int v12 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v24);
  unsigned int v23 = v12;
  int v25 = -1;
  *(void *)&long long v24 = -1;
  *((void *)&v24 + 1) = -1;
  unsigned int v13 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v24);
  unsigned int v22 = v13;
  int v25 = -1;
  *(void *)&long long v24 = -1;
  *((void *)&v24 + 1) = -1;
  unsigned int v14 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v24);
  unsigned int v21 = v14;
  LODWORD(v24) = a4;
  uint64_t v15 = (uint64_t *)(a1 + 32);
  uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v24);
  if (*(void *)(v16 + 48) <= (unint64_t)v11) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  *(void *)(*(void *)(v16 + 40) + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
  LODWORD(v24) = a4;
  uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v24);
  if (*(void *)(v17 + 48) <= (unint64_t)v12) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  *(void *)(*(void *)(v17 + 40) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) |= 1 << v12;
  LODWORD(v24) = a4;
  uint64_t v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v24);
  if (*(void *)(v18 + 48) <= (unint64_t)v13) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  *(void *)(*(void *)(v18 + 40) + (((unint64_t)v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
  LODWORD(v24) = a4;
  uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v24);
  if (*(void *)(v19 + 48) <= (unint64_t)v14) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  *(void *)(*(void *)(v19 + 40) + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) |= 1 << v14;
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v26, &v36);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v35, &v26);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v23, &v34);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v34, &v22);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v22, &v23);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v21, &v33);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v32, &v21);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v10, &v26, &v23);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v10, &v22, &v21);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, a2, &v26);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &appended, &v23);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &appended, &v34);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &appended, &v22);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &v27, &v21);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &v27, &v33);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &v27, &v32);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v31, &v23);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v31, &v21);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v30, &v26);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v29, &v22);
  return 1;
}

uint64_t cv3d::cv::gess::internal::EdgeCollapsing(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v7 & *v6) != 0
    || (unsigned int v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4),
        unsigned int v9 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v8),
        (v10 & *v9) != 0))
  {
    return cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge(a1, v4);
  }
  int v76 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4) + 12);
  unsigned int v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
  int v75 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v12) + 12);
  if (v76 == v75) {
    return 0;
  }
  BOOL is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v76);
  BOOL v14 = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v75);
  if (is_boundary && v14) {
    return 0;
  }
  if (!is_boundary) {
    uint64_t v4 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
  }
  unsigned int v74 = *v4;
  unsigned int v73 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74) + 8);
  unsigned int v72 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73) + 8);
  unsigned int v71 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74);
  unsigned int v70 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v71) + 8);
  unsigned int v69 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v70) + 8);
  unsigned int v68 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72);
  unsigned int v67 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v70);
  unsigned int v66 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
  unsigned int v65 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v69);
  unsigned int v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74) + 16);
  unsigned int v63 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v71) + 16);
  int v62 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74) + 12);
  uint64_t v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74);
  int v61 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v15) + 12);
  int v60 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72) + 12);
  int v59 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v69) + 12);
  int v16 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v62);
  int v17 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v61);
  if ((unint64_t)cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v60) < 3) {
    return 0;
  }
  unint64_t v18 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v59);
  uint64_t result = 0;
  if (v18 < 3 || v17 < 3) {
    return result;
  }
  uint64_t v19 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v68);
  if ((v20 & *v19) == 0
    || (unsigned int v21 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v67),
        (v22 & *v21) == 0))
  {
    if (v16 == 2) {
      return 0;
    }
  }
  if (v17 + v16 < 6 || v60 == v59 || v60 == v62) {
    return 0;
  }
  uint64_t result = 0;
  if (v62 == v61 || v59 == v61 || v59 == v62 || v60 == v61) {
    return result;
  }
  cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v58, (void *)(a1 + 104), (unsigned int *)&v62);
  unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v58);
  unsigned int v57 = Vertex;
  if (Vertex != -1)
  {
    int v24 = 0;
    do
    {
      if (Vertex == v61)
      {
        if (v24 > 0) {
          return 0;
        }
        int v24 = 1;
      }
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(&__p, (void *)(a1 + 104), &v57);
      while (1)
      {
        int v25 = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&__p);
        if (v25 == -1) {
          break;
        }
        if (v25 == v61 && v57 != v60 && v57 != v59) {
          return 0;
        }
      }
      unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v58);
      unsigned int v57 = Vertex;
    }
    while (Vertex != -1);
  }
  std::string __p = 0;
  float32x4_t v55 = 0;
  uint64_t v56 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v53, a1 + 104, &v61);
  for (int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v53);
        ;
        int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v53))
  {
    int v52 = i;
    if (i == -1) {
      break;
    }
    if (i != v73 && i != v71) {
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::push_back[abi:ne180100](&__p, &v52);
    }
  }
  int v77 = *(_DWORD *)(a1 + 176);
  uint64_t v29 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v77);
  uint64_t v30 = *(void *)(v29 + 40);
  if (v62 >= (unint64_t)((*(void *)(v29 + 48) - v30) >> 4))
  {
    float32x4_t v48 = "index < data_.size()";
    int v49 = 182;
    unsigned __int32 v50 = "Attribute.h";
    float32x4_t v51 = "operator[]";
    goto LABEL_67;
  }
  *(_OWORD *)(v30 + 16 * v62) = *a3;
  cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v68, &v66);
  cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v67, &v65);
  int v31 = (unsigned int *)__p;
  if (v55 != __p)
  {
    unint64_t v32 = 0;
    unsigned int v33 = 1;
    do
    {
      cv3d::cv::gess::mesh::Topology::SetStart((void *)(a1 + 104), &v31[v32], &v62);
      unint64_t v32 = v33;
      int v31 = (unsigned int *)__p;
      ++v33;
    }
    while (v32 < (v55 - (unsigned char *)__p) >> 2);
  }
  cv3d::cv::gess::mesh::Topology::SetHEdge((void *)(a1 + 104), &v60, &v66);
  cv3d::cv::gess::mesh::Topology::SetHEdge((void *)(a1 + 104), &v59, &v67);
  cv3d::cv::gess::mesh::Topology::SetHEdge((void *)(a1 + 104), &v62, &v68);
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v64) = -1;
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v63) = -1;
  uint64_t v34 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74);
  *(void *)uint64_t v34 = -1;
  *(void *)(v34 + 8) = -1;
  *(_DWORD *)(v34 + 16) = -1;
  uint64_t v35 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
  *(void *)uint64_t v35 = -1;
  *(void *)(v35 + 8) = -1;
  *(_DWORD *)(v35 + 16) = -1;
  uint64_t v36 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72);
  *(void *)uint64_t v36 = -1;
  *(void *)(v36 + 8) = -1;
  *(_DWORD *)(v36 + 16) = -1;
  uint64_t v37 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v71);
  *(void *)uint64_t v37 = -1;
  *(void *)(v37 + 8) = -1;
  *(_DWORD *)(v37 + 16) = -1;
  uint64_t v38 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v70);
  *(void *)uint64_t v38 = -1;
  *(void *)(v38 + 8) = -1;
  *(_DWORD *)(v38 + 16) = -1;
  uint64_t v39 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v69);
  *(void *)uint64_t v39 = -1;
  *(void *)(v39 + 8) = -1;
  *(_DWORD *)(v39 + 16) = -1;
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((void *)(a1 + 104), (unsigned int *)&v61) = -1;
  float32x4_t v40 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68);
  float32x4_t v41 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v40);
  if (*v41 != v68)
  {
    float32x4_t v48 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h6)) == h6";
    int v49 = 243;
LABEL_66:
    unsigned __int32 v50 = "QuadCommon.cpp";
    float32x4_t v51 = "EdgeCollapsing";
LABEL_67:
    __assert_rtn(v51, v50, v49, v48);
  }
  float32x4_t v42 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v67);
  float32x4_t v43 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v42);
  if (*v43 != v67)
  {
    float32x4_t v48 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h9)) == h9";
    int v49 = 244;
    goto LABEL_66;
  }
  float32x4_t v44 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v66);
  unsigned int v45 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v44);
  if (*v45 != v66)
  {
    float32x4_t v48 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h12)) == h12";
    int v49 = 245;
    goto LABEL_66;
  }
  float32x4_t v46 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65);
  float32x4_t v47 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v46);
  if (*v47 != v65)
  {
    float32x4_t v48 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h15)) == h15";
    int v49 = 246;
    goto LABEL_66;
  }
  int v77 = v62;
  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex((void *)(a1 + 104), (unsigned int *)&v77) == -1)
  {
    float32x4_t v48 = "!mesh.IsDangling(vc)";
    int v49 = 247;
    goto LABEL_66;
  }
  if (__p)
  {
    float32x4_t v55 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_24F4CEA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::EdgeMerging(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = (void *)(a1 + 104);
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 8) != *a3) {
    return 0;
  }
  uint64_t v6 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, a2);
  unsigned int v7 = *a3;
  if (*v6 == *a3) {
    return 0;
  }
  unsigned int v21 = *a2;
  unsigned int v20 = v7;
  unsigned int v19 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v21);
  unsigned int v18 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v20);
  unsigned int v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v18) + 4);
  unsigned int v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v20) + 8);
  unsigned int v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v20) + 12);
  unsigned int v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v20);
  int v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, v9) + 12);
  int v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v21) + 16);
  int v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v19) + 16);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v5, &v21, &v16);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v5, &v17, &v19);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v5, &v14, &v19);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v5, &v13, &v21);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v5, &v12, &v19);
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v5, &v15) = -1;
  uint64_t v10 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v18);
  *(void *)uint64_t v10 = -1;
  *(void *)(v10 + 8) = -1;
  *(_DWORD *)(v10 + 16) = -1;
  uint64_t v11 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v20);
  *(void *)uint64_t v11 = -1;
  *(void *)(v11 + 8) = -1;
  *(_DWORD *)(v11 + 16) = -1;
  return 1;
}

uint64_t cv3d::cv::gess::internal::FaceMergingByDiagonal(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (void *)(a1 + 104);
  v197[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 16);
  unsigned int v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v4);
  unsigned int v196 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v7) + 16);
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  int v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, v197);
  LODWORD(v177) = v8;
  do
  {
    int v9 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v177) + 8);
    LODWORD(v177) = v9;
    uint64_t v10 = v194;
    if (v194 >= v195)
    {
      uint64_t v12 = (v194 - v193) >> 2;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = (v195 - v193) >> 1;
      if (v13 <= v12 + 1) {
        unint64_t v13 = v12 + 1;
      }
      if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14)
      {
        unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v195, v14);
        int v9 = (int)v177;
      }
      else
      {
        unsigned int v15 = 0;
      }
      unsigned int v16 = &v15[4 * v12];
      *(_DWORD *)unsigned int v16 = v9;
      uint64_t v11 = v16 + 4;
      unsigned int v18 = v193;
      unsigned int v17 = v194;
      if (v194 != v193)
      {
        do
        {
          int v19 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v16 - 1) = v19;
          v16 -= 4;
        }
        while (v17 != v18);
        unsigned int v17 = v193;
      }
      v193 = v16;
      v194 = v11;
      v195 = &v15[4 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)v194 = v9;
      uint64_t v11 = v10 + 4;
    }
    v194 = v11;
  }
  while (v177 != v8);
  int v20 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v196);
  LODWORD(v177) = v20;
  do
  {
    int v21 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v177) + 8);
    LODWORD(v177) = v21;
    uint64_t v22 = v191;
    if (v191 >= v192)
    {
      uint64_t v24 = (v191 - v190) >> 2;
      if ((unint64_t)(v24 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = (v192 - v190) >> 1;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if ((unint64_t)(v192 - v190) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26)
      {
        int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v192, v26);
        int v21 = (int)v177;
      }
      else
      {
        int v27 = 0;
      }
      unsigned int v28 = &v27[4 * v24];
      *(_DWORD *)unsigned int v28 = v21;
      unsigned int v23 = v28 + 4;
      uint64_t v30 = v190;
      uint64_t v29 = v191;
      if (v191 != v190)
      {
        do
        {
          int v31 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v28 - 1) = v31;
          v28 -= 4;
        }
        while (v29 != v30);
        uint64_t v29 = v190;
      }
      v190 = v28;
      v191 = v23;
      v192 = &v27[4 * v26];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(_DWORD *)v191 = v21;
      unsigned int v23 = v22 + 4;
    }
    v191 = v23;
  }
  while (v177 != v20);
  unint64_t v32 = v194 - v193;
  unsigned int v33 = v190;
  if ((unint64_t)(v194 - v193) > 0x10
    || (unint64_t v34 = v23 - v190, (unint64_t)(v23 - v190) > 0x10)
    || v32 == 16 && v34 == 16)
  {
    uint64_t v35 = 0;
    if (!v190) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v32 < v34) {
    uint64_t v4 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v4);
  }
  unsigned int v189 = *v4;
  unsigned int v188 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189);
  unsigned int v187 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189) + 16);
  unsigned int v186 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v188) + 16);
  unsigned int v185 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189) + 8);
  unsigned int v184 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189) + 4);
  unsigned int v183 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v188) + 8);
  unsigned int v182 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v188) + 4);
  uint64_t v37 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v183);
  if (*(_DWORD *)(v37 + 8) != v182) {
    __assert_rtn("FaceMergingByDiagonal", "QuadCommon.cpp", 336, "mesh.HEdgeNext(h2).Index() == h3.Index()");
  }
  uint64_t v38 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189);
  int v181 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v38) + 12);
  int v180 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189) + 12);
  uint64_t v39 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v185);
  if (*v39 == v182 || (float32x4_t v40 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v184), *v40 == v183))
  {
    uint64_t v35 = 0;
    goto LABEL_52;
  }
  uint64_t v177 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  std::string __p = 0;
  unsigned int v175 = 0;
  v176 = 0;
  LODWORD(v172.__begin_) = v189;
  do
  {
    begiuint64_t n = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v172) + 8);
    LODWORD(v172.__begin_) = begin;
    if (begin == v189) {
      break;
    }
    float32x4_t v42 = v175;
    if (v175 >= v176)
    {
      uint64_t v44 = (v175 - (unsigned char *)__p) >> 2;
      if ((unint64_t)(v44 + 1) >> 62) {
        goto LABEL_248;
      }
      unint64_t v45 = (v176 - (unsigned char *)__p) >> 1;
      if (v45 <= v44 + 1) {
        unint64_t v45 = v44 + 1;
      }
      if ((unint64_t)(v176 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46)
      {
        float32x4_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v176, v46);
        begiuint64_t n = (int)v172.__begin_;
      }
      else
      {
        float32x4_t v47 = 0;
      }
      float32x4_t v48 = &v47[4 * v44];
      *(_DWORD *)float32x4_t v48 = begin;
      float32x4_t v43 = v48 + 4;
      unsigned __int32 v50 = (char *)__p;
      int v49 = v175;
      if (v175 != __p)
      {
        do
        {
          int v51 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v48 - 1) = v51;
          v48 -= 4;
        }
        while (v49 != v50);
        int v49 = (char *)__p;
      }
      std::string __p = v48;
      unsigned int v175 = v43;
      v176 = &v47[4 * v46];
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *(_DWORD *)unsigned int v175 = begin;
      float32x4_t v43 = v42 + 4;
    }
    unsigned int v175 = v43;
  }
  while (LODWORD(v172.__begin_) != v189);
  uint64_t v52 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v188);
  uint64_t v53 = v52;
  float32x4_t v54 = v175;
  if (v175 >= v176)
  {
    uint64_t v56 = (v175 - (unsigned char *)__p) >> 2;
    if ((unint64_t)(v56 + 1) >> 62) {
      goto LABEL_248;
    }
    unint64_t v57 = (v176 - (unsigned char *)__p) >> 1;
    if (v57 <= v56 + 1) {
      unint64_t v57 = v56 + 1;
    }
    if ((unint64_t)(v176 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v57;
    }
    if (v58) {
      int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v176, v58);
    }
    else {
      int v59 = 0;
    }
    int v60 = &v59[4 * v56];
    int v61 = &v59[4 * v58];
    *(_DWORD *)int v60 = *(_DWORD *)(v53 + 8);
    float32x4_t v55 = v60 + 4;
    unsigned int v63 = (char *)__p;
    int v62 = v175;
    if (v175 != __p)
    {
      do
      {
        int v64 = *((_DWORD *)v62 - 1);
        v62 -= 4;
        *((_DWORD *)v60 - 1) = v64;
        v60 -= 4;
      }
      while (v62 != v63);
      int v62 = (char *)__p;
    }
    std::string __p = v60;
    unsigned int v175 = v55;
    v176 = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(_DWORD *)unsigned int v175 = *(_DWORD *)(v52 + 8);
    float32x4_t v55 = v54 + 4;
  }
  unsigned int v175 = v55;
  uint64_t v65 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v188);
  uint64_t v66 = v65;
  unsigned int v67 = v175;
  if (v175 < v176)
  {
    *(_DWORD *)unsigned int v175 = *(_DWORD *)(v65 + 4);
    unsigned int v68 = v67 + 4;
    goto LABEL_105;
  }
  uint64_t v69 = (v175 - (unsigned char *)__p) >> 2;
  if ((unint64_t)(v69 + 1) >> 62) {
LABEL_248:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  unint64_t v70 = (v176 - (unsigned char *)__p) >> 1;
  if (v70 <= v69 + 1) {
    unint64_t v70 = v69 + 1;
  }
  if ((unint64_t)(v176 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v71 = v70;
  }
  if (v71) {
    unsigned int v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v176, v71);
  }
  else {
    unsigned int v72 = 0;
  }
  unsigned int v73 = &v72[4 * v69];
  unsigned int v74 = &v72[4 * v71];
  *(_DWORD *)unsigned int v73 = *(_DWORD *)(v66 + 4);
  unsigned int v68 = v73 + 4;
  int v76 = (char *)__p;
  int v75 = v175;
  if (v175 != __p)
  {
    do
    {
      int v77 = *((_DWORD *)v75 - 1);
      v75 -= 4;
      *((_DWORD *)v73 - 1) = v77;
      v73 -= 4;
    }
    while (v75 != v76);
    int v75 = (char *)__p;
  }
  std::string __p = v73;
  unsigned int v175 = v68;
  v176 = v74;
  if (v75) {
    operator delete(v75);
  }
LABEL_105:
  unsigned int v175 = v68;
  v78 = (unsigned int *)__p;
  if ((unint64_t)(v68 - (unsigned char *)__p) > 0x14) {
    __assert_rtn("FaceMergingByDiagonal", "QuadCommon.cpp", 359, "fh_hhs.size() <= 5");
  }
  if (v68 != __p)
  {
    uint64_t v79 = 0;
    unsigned int v80 = 0;
    do
    {
      uint64_t v81 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v78[v79]);
      uint64_t v82 = v81;
      unint64_t v83 = v178;
      if (v178 >= v179)
      {
        uint64_t v85 = (v178 - (unsigned char *)v177) >> 2;
        if ((unint64_t)(v85 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v86 = (v179 - (unsigned char *)v177) >> 1;
        if (v86 <= v85 + 1) {
          unint64_t v86 = v85 + 1;
        }
        if ((unint64_t)(v179 - (unsigned char *)v177) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v86;
        }
        if (v87) {
          v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v87);
        }
        else {
          v88 = 0;
        }
        float v89 = &v88[4 * v85];
        *(_DWORD *)float v89 = *(_DWORD *)(v82 + 12);
        unint64_t v84 = v89 + 4;
        unsigned int v91 = (char *)v177;
        uint64_t v90 = v178;
        if (v178 != v177)
        {
          do
          {
            int v92 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v89 - 1) = v92;
            v89 -= 4;
          }
          while (v90 != v91);
          uint64_t v90 = (char *)v177;
        }
        uint64_t v177 = v89;
        uint64_t v178 = v84;
        uint64_t v179 = &v88[4 * v87];
        if (v90) {
          operator delete(v90);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v178 = *(_DWORD *)(v81 + 12);
        unint64_t v84 = v83 + 4;
      }
      uint64_t v178 = v84;
      v78 = (unsigned int *)__p;
      uint64_t v79 = ++v80;
    }
    while (v80 < (unint64_t)((v175 - (unsigned char *)__p) >> 2));
  }
  char v173 = 0;
  uint64_t v93 = v187;
  uint64_t v94 = v186;
  unint64_t v95 = (unsigned int *)operator new(8uLL);
  *(void *)unint64_t v95 = v93 | (v94 << 32);
  v172.__end_ = v95 + 2;
  v172.__end_cap_.__value_ = v95 + 2;
  v172.__begin_ = v95;
  cv3d::cv::gess::internal::CheckSharedVerticesInAdjacentFaces(a1, (uint64_t)&v172, &v177, v96, &v173);
  operator delete(v95);
  if (!v173)
  {
    int v97 = *a3;
    if (*a3 == -1)
    {
LABEL_165:
      cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v6, &v184, &v183);
      cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v6, &v182, &v185);
      cv3d::cv::gess::mesh::Topology::SetHEdge(v6, &v181, &v185);
      cv3d::cv::gess::mesh::Topology::SetHEdge(v6, &v180, &v183);
      cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v6, &v187, &v183);
      cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v6, &v187, &v182);
      if (*a3 == -1)
      {
        int v117 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v187);
        LODWORD(v172.__begin_) = v117;
        LODWORD(v169) = -1;
        float v118 = -200.0;
        do
        {
          LODWORD(v172.__begin_) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v172) + 8);
          float v119 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, v172.__begin_);
          if (v119 > v118)
          {
            LODWORD(v169) = v172.__begin_;
            float v118 = v119;
          }
        }
        while (LODWORD(v172.__begin_) != v117);
        if (v169 != -1)
        {
          uint64_t v120 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v169);
          if (*(_DWORD *)(v120 + 4) != *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v187) && v118 > 120.0)
          {
            uint64_t v121 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v169);
            cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v6, &v187, (unsigned int *)(v121 + 4));
          }
        }
        if (*a3 == -1)
        {
          v172.__end_ = 0;
          v172.__end_cap_.__value_ = 0;
          uint64_t v171 = 0;
          v172.__begin_ = (std::vector<unsigned int>::pointer)&v172.__end_;
          uint64_t v169 = 0;
          uint64_t v170 = 0;
          cv3d::cv::gess::internal::FindSharedEdgesInAdjacentFaces(a1, &v187, &v169, (uint64_t)&v172);
          std::vector<unsigned int>::pointer v122 = v172.__begin_;
          uint64_t v169 = 0;
          uint64_t v170 = 0;
          uint64_t v171 = 0;
          if ((std::vector<unsigned int>::pointer *)v172.__begin_ == &v172.__end_)
          {
            v159 = 0;
          }
          else
          {
            int v123 = 0;
            do
            {
              if (*((void *)v122 + 6) - *((void *)v122 + 5) >= 5uLL)
              {
                LODWORD(v166) = 0;
                cv3d::cv::gess::internal::FindFirstEdgeInPrevNextConnectedSequence(a1, (uint64_t *)v122 + 5, (unsigned int *)&v166);
                uint64_t v124 = v166;
                uint64_t v125 = *((void *)v122 + 5);
                uint64_t v126 = *((void *)v122 + 6);
                unint64_t v127 = (v166 + 1) % (unint64_t)((v126 - v125) >> 2);
                if (v166 != v127)
                {
                  LOBYTE(v128) = 0;
                  while (2)
                  {
                    unint64_t v129 = (v126 - v125) >> 2;
                    while ((v128 & 1) != 0)
                    {
                      unint64_t v127 = (v127 + 1) % v129;
                      LOBYTE(v128) = 1;
                      if (v124 == v127) {
                        goto LABEL_186;
                      }
                    }
                    int v128 = cv3d::cv::gess::internal::EdgeMerging(a1, (unsigned int *)(v125 + 4 * v124), (unsigned int *)(v125 + 4 * v127));
                    uint64_t v125 = *((void *)v122 + 5);
                    uint64_t v126 = *((void *)v122 + 6);
                    unint64_t v127 = (v127 + 1) % (unint64_t)((v126 - v125) >> 2);
                    if (v124 != v127) {
                      continue;
                    }
                    break;
                  }
                  if (v128)
                  {
LABEL_186:
                    v130 = v170;
                    if (v170 >= v171)
                    {
                      uint64_t v132 = (v170 - (unsigned char *)v169) >> 2;
                      if ((unint64_t)(v132 + 1) >> 62) {
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v133 = (v171 - (unsigned char *)v169) >> 1;
                      if (v133 <= v132 + 1) {
                        unint64_t v133 = v132 + 1;
                      }
                      if ((unint64_t)(v171 - (unsigned char *)v169) >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v134 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v134 = v133;
                      }
                      if (v134) {
                        uint64_t v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v171, v134);
                      }
                      else {
                        uint64_t v135 = 0;
                      }
                      float v136 = &v135[4 * v132];
                      *(_DWORD *)float v136 = v122[8];
                      uint64_t v131 = v136 + 4;
                      float v138 = (char *)v169;
                      uint64_t v137 = v170;
                      if (v170 != v169)
                      {
                        do
                        {
                          int v139 = *((_DWORD *)v137 - 1);
                          v137 -= 4;
                          *((_DWORD *)v136 - 1) = v139;
                          v136 -= 4;
                        }
                        while (v137 != v138);
                        uint64_t v137 = (char *)v169;
                      }
                      uint64_t v169 = v136;
                      uint64_t v170 = v131;
                      uint64_t v171 = &v135[4 * v134];
                      if (v137) {
                        operator delete(v137);
                      }
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v170 = v122[8];
                      uint64_t v131 = v130 + 4;
                    }
                    uint64_t v170 = v131;
                    ++v123;
                  }
                }
              }
              uint64_t v140 = (std::vector<unsigned int> *)*((void *)v122 + 1);
              if (v140)
              {
                do
                {
                  float v141 = v140;
                  uint64_t v140 = (std::vector<unsigned int> *)v140->__begin_;
                }
                while (v140);
              }
              else
              {
                do
                {
                  float v141 = (std::vector<unsigned int> *)*((void *)v122 + 2);
                  BOOL v142 = v141->__begin_ == v122;
                  std::vector<unsigned int>::pointer v122 = (std::vector<unsigned int>::pointer)v141;
                }
                while (!v142);
              }
              std::vector<unsigned int>::pointer v122 = (std::vector<unsigned int>::pointer)v141;
            }
            while (v141 != (std::vector<unsigned int> *)&v172.__end_);
            float32x4_t v166 = 0;
            int v167 = 0;
            uint64_t v168 = 0;
            if (v123)
            {
              std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::push_back[abi:ne180100](&v169, &v187);
              uint64_t v143 = (unsigned int *)v169;
              float v144 = (unsigned int *)v170;
              if (v169 != v170)
              {
                do
                {
                  unsigned int v165 = *v143;
                  int v167 = (unsigned int *)v166;
                  unsigned int v145 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v165);
                  unsigned int v164 = v145;
                  do
                  {
                    unsigned int v146 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v164) + 8);
                    unsigned int v164 = v146;
                    v147 = v167;
                    if (v167 >= v168)
                    {
                      uint64_t v149 = ((char *)v167 - (unsigned char *)v166) >> 2;
                      if ((unint64_t)(v149 + 1) >> 62) {
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v150 = ((char *)v168 - (unsigned char *)v166) >> 1;
                      if (v150 <= v149 + 1) {
                        unint64_t v150 = v149 + 1;
                      }
                      if ((unint64_t)((char *)v168 - (unsigned char *)v166) >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v151 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v151 = v150;
                      }
                      if (v151)
                      {
                        float32x4_t v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v168, v151);
                        unsigned int v146 = v164;
                      }
                      else
                      {
                        float32x4_t v152 = 0;
                      }
                      float32x4_t v153 = (unsigned int *)&v152[4 * v149];
                      *float32x4_t v153 = v146;
                      int v148 = v153 + 1;
                      unsigned int v155 = (char *)v166;
                      v154 = (char *)v167;
                      if (v167 != v166)
                      {
                        do
                        {
                          unsigned int v156 = *((_DWORD *)v154 - 1);
                          v154 -= 4;
                          *--float32x4_t v153 = v156;
                        }
                        while (v154 != v155);
                        v154 = (char *)v166;
                      }
                      float32x4_t v166 = v153;
                      int v167 = v148;
                      uint64_t v168 = (unsigned int *)&v152[4 * v151];
                      if (v154) {
                        operator delete(v154);
                      }
                    }
                    else
                    {
                      *int v167 = v146;
                      int v148 = v147 + 1;
                    }
                    int v167 = v148;
                  }
                  while (v164 != v145);
                  if ((char *)v148 - (unsigned char *)v166 == 8)
                  {
                    uint64_t v157 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)v166);
                    if (*(_DWORD *)(v157 + 8) == *((_DWORD *)v166 + 1))
                    {
                      unsigned int v158 = *(_DWORD *)v166;
                      unsigned int v162 = *(_DWORD *)(v157 + 8);
                      unsigned int v163 = v158;
                      cv3d::cv::gess::internal::RemoveDegeneratedFace(a1, &v165, &v163, &v162);
                    }
                  }
                  ++v143;
                }
                while (v143 != v144);
              }
              if (v166)
              {
                int v167 = (unsigned int *)v166;
                operator delete(v166);
              }
            }
            v159 = (char *)v169;
          }
          if (v159)
          {
            uint64_t v170 = v159;
            operator delete(v159);
          }
          std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy((uint64_t)&v172, (void *)v172.__end_);
        }
      }
      uint64_t v160 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189);
      *(void *)uint64_t v160 = -1;
      *(void *)(v160 + 8) = -1;
      *(_DWORD *)(v160 + 16) = -1;
      uint64_t v161 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v188);
      *(void *)uint64_t v161 = -1;
      *(void *)(v161 + 8) = -1;
      *(_DWORD *)(v161 + 16) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v186) = -1;
      uint64_t v35 = 1;
      goto LABEL_127;
    }
    memset(&v172, 0, sizeof(v172));
    uint64_t v169 = 0;
    uint64_t v170 = 0;
    uint64_t v171 = 0;
    LODWORD(v166) = v97;
    uint64_t v98 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v166);
    uint64_t v99 = cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::operator[](v98, v187);
    if (&v172 != (std::vector<unsigned int> *)v99) {
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v172, *(char **)v99, *(void *)(v99 + 8), (uint64_t)(*(void *)(v99 + 8) - *(void *)v99) >> 2);
    }
    LODWORD(v166) = *a3;
    uint64_t v100 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v166);
    uint64_t v101 = cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::operator[](v100, v186);
    if (&v169 != (void **)v101) {
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v169, *(char **)v101, *(void *)(v101 + 8), (uint64_t)(*(void *)(v101 + 8) - *(void *)v101) >> 2);
    }
    if (v170 - (unsigned char *)v169 != 12)
    {
      unint64_t v115 = "f1_uvid.size() == 3u";
      int v116 = 380;
LABEL_160:
      __assert_rtn("FaceMergingByDiagonal", "QuadCommon.cpp", v116, v115);
    }
    if (v170 != v169)
    {
      uint64_t v102 = 0;
      unint64_t v103 = v172.__end_ - v172.__begin_;
      while (2)
      {
        if (v172.__end_ != v172.__begin_)
        {
          uint64_t v104 = 0;
          int v105 = 0;
          while (*((_DWORD *)v169 + v102) != v172.__begin_[v104])
          {
            uint64_t v104 = ++v105;
            if (v103 <= v105)
            {
              uint64_t v107 = 0;
              unsigned __int8 v108 = 0;
              while (*((_DWORD *)v169
                      + (unsigned __int16)(v102
                                         + 2
                                         - 3 * ((21846 * (v102 + 2)) >> 16))) != v172.__begin_[v107])
              {
                uint64_t v107 = ++v108;
                if (v103 <= v108) {
                  goto LABEL_148;
                }
              }
              std::vector<int>::resize(&v172, v103 + 1);
              std::vector<unsigned int>::pointer v109 = v172.__begin_;
              if ((((LODWORD(v172.__end_) - LODWORD(v172.__begin_)) >> 2) - 2) > v108)
              {
                uint64_t v110 = (((LODWORD(v172.__end_) - LODWORD(v172.__begin_)) >> 2) - 2);
                do
                {
                  v109[v110 + 1] = v109[v110];
                  --v110;
                }
                while (v108 < v110);
              }
              v109[v107 + 1] = *((_DWORD *)v169 + v102);
              LODWORD(v166) = *a3;
              uint64_t v111 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v166);
              uint64_t v112 = *(void *)(v111 + 40);
              if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v111 + 48) - v112) >> 3) <= v187) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              uint64_t v113 = (char *)(v112 + 24 * v187);
              if (v113 != (char *)&v172) {
                std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v113, (char *)v172.__begin_, (uint64_t)v172.__end_, v172.__end_ - v172.__begin_);
              }
              float32x4_t v114 = v172.__begin_;
              if ((unint64_t)((char *)v172.__end_ - (char *)v172.__begin_ - 13) >= 0xB)
              {
                unint64_t v115 = "!prev_uv_idx_found || (f0_uvid.size() >= 4 && f0_uvid.size() <= 5)";
                int v116 = 409;
                goto LABEL_160;
              }
              if (v169)
              {
                uint64_t v170 = (char *)v169;
                operator delete(v169);
                float32x4_t v114 = v172.__begin_;
              }
              if (v114)
              {
                v172.__end_ = v114;
                operator delete(v114);
              }
              goto LABEL_165;
            }
          }
          unsigned int v106 = (v102 + 1);
          uint64_t v102 = (v102 + 1);
          if (v106 < 3) {
            continue;
          }
        }
        break;
      }
    }
LABEL_148:
    if (v169)
    {
      uint64_t v170 = (char *)v169;
      operator delete(v169);
    }
    if (v172.__begin_)
    {
      v172.__end_ = v172.__begin_;
      operator delete(v172.__begin_);
    }
  }
  uint64_t v35 = 0;
LABEL_127:
  if (__p)
  {
    unsigned int v175 = (char *)__p;
    operator delete(__p);
  }
  if (v177)
  {
    uint64_t v178 = (char *)v177;
    operator delete(v177);
  }
LABEL_52:
  unsigned int v33 = v190;
  if (v190)
  {
LABEL_42:
    v191 = v33;
    operator delete(v33);
  }
LABEL_43:
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  return v35;
}

void sub_24F4CFC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy((uint64_t)&a18, a19);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  unsigned int v28 = *(void **)(v26 - 160);
  if (v28)
  {
    *(void *)(v26 - 152) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(v26 - 136);
  if (v29)
  {
    *(void *)(v26 - 128) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::CheckSharedVerticesInAdjacentFaces(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  *a5 = 0;
  uint64_t v5 = (_DWORD *)*a3;
  if (a3[1] != *a3)
  {
    unint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = a1 + 104;
    while (1)
    {
      uint64_t v12 = &v5[v9];
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v27, v11, v12);
      unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v27);
      if (HEdge != -1) {
        break;
      }
      unint64_t v9 = ++v10;
LABEL_25:
      uint64_t v5 = (_DWORD *)*a3;
      if (v9 >= (uint64_t)(a3[1] - *a3) >> 2) {
        return 1;
      }
    }
    unint64_t v13 = v9 - 1;
    unint64_t v9 = ++v10;
    while (1)
    {
      unsigned int v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, &HEdge) + 16);
      unsigned int v25 = v14;
      if (v14 != -1)
      {
        unsigned int v16 = *(_DWORD **)a2;
        unsigned int v15 = *(_DWORD **)(a2 + 8);
        if (*(_DWORD **)a2 != v15)
        {
          while (*v16 != v14)
          {
            if (++v16 == v15)
            {
              unsigned int v16 = *(_DWORD **)(a2 + 8);
              break;
            }
          }
        }
        if (v16 == v15) {
          break;
        }
      }
LABEL_11:
      unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v27);
      if (HEdge == -1) {
        goto LABEL_25;
      }
    }
    unsigned int v17 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v11, &v25);
    unsigned int v24 = v17;
    while (1)
    {
      unsigned int v24 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, &v24) + 8);
      int v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, &v24) + 12);
      if (v18 != *v12)
      {
        int v20 = (_DWORD *)*a3;
        int v19 = (_DWORD *)a3[1];
        unint64_t v21 = ((uint64_t)v19 - *a3) >> 2;
        if (v18 != *(_DWORD *)(*a3 + 4 * ((v13 + v21) % v21)) && v18 != v20[v9 % v21] && v20 != v19) {
          break;
        }
      }
LABEL_22:
      if (v24 == v17) {
        goto LABEL_11;
      }
    }
    while (v18 != *v20)
    {
      if (++v20 == v19) {
        goto LABEL_22;
      }
    }
    *a5 = 1;
  }
  return 1;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::operator[](uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 48) - v2) >> 3) <= a2) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  return v2 + 24 * a2;
}

BOOL cv3d::cv::gess::internal::FindSharedEdgesInAdjacentFaces(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (!v4)
  {
    float32x4_t v47 = 0;
    float32x4_t v48 = 0;
    uint64_t v8 = a1 + 104;
    int v49 = 0;
    unsigned int v9 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
    unsigned int v46 = v9;
    do
    {
      unsigned int v10 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, &v46) + 8);
      unsigned int v46 = v10;
      uint64_t v11 = v48;
      if (v48 >= (unsigned int *)v49)
      {
        uint64_t v13 = ((char *)v48 - v47) >> 2;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = (v49 - v47) >> 1;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        if ((unint64_t)(v49 - v47) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unsigned int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v49, v15);
          unsigned int v10 = v46;
        }
        else
        {
          unsigned int v16 = 0;
        }
        unsigned int v17 = (unsigned int *)&v16[4 * v13];
        *unsigned int v17 = v10;
        uint64_t v12 = v17 + 1;
        int v19 = (unsigned int *)v47;
        int v18 = v48;
        if (v48 != (unsigned int *)v47)
        {
          do
          {
            unsigned int v20 = *--v18;
            *--unsigned int v17 = v20;
          }
          while (v18 != v19);
          int v18 = (unsigned int *)v47;
        }
        float32x4_t v47 = (char *)v17;
        float32x4_t v48 = v12;
        int v49 = &v16[4 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *float32x4_t v48 = v10;
        uint64_t v12 = v11 + 1;
      }
      float32x4_t v48 = v12;
    }
    while (v46 != v9);
    if (v12 == (unsigned int *)v47) {
      goto LABEL_44;
    }
    uint64_t v21 = 0;
    unsigned int v22 = 0;
    uint64_t v12 = (unsigned int *)v47;
    do
    {
      unsigned int v45 = v12[v21];
      unsigned int v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v45);
      unsigned int v24 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v23);
      if ((*v24 & v25) == 0)
      {
        uint64_t v26 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v45);
        uint64_t v27 = cv3d::cv::gess::mesh::Topology::h(v8, v26);
        unint64_t v28 = *(unsigned int *)(v27 + 16);
        unsigned int v44 = *(_DWORD *)(v27 + 16);
        if (!a3[1] || ((*(void *)(*a3 + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) == 0)
        {
          unsigned __int32 v50 = &v44;
          uint64_t v29 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::FaceHandle,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::FaceHandle const&>,std::tuple<>>((uint64_t **)a4, &v44, (uint64_t)&std::piecewise_construct, &v50);
          uint64_t v30 = v29[6];
          int v31 = v29[7];
          if (v30 >= v31)
          {
            unsigned int v33 = v29[5];
            uint64_t v34 = ((char *)v30 - (char *)v33) >> 2;
            if ((unint64_t)(v34 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v35 = (char *)v31 - (char *)v33;
            uint64_t v36 = v35 >> 1;
            if (v35 >> 1 <= (unint64_t)(v34 + 1)) {
              uint64_t v36 = v34 + 1;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v36;
            }
            if (v37) {
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v29 + 7), v37);
            }
            else {
              uint64_t v38 = 0;
            }
            uint64_t v39 = (uint64_t *)&v38[4 * v34];
            *(_DWORD *)uint64_t v39 = v45;
            unint64_t v32 = (uint64_t *)((char *)v39 + 4);
            float32x4_t v41 = v29[5];
            float32x4_t v40 = v29[6];
            if (v40 != v41)
            {
              do
              {
                int v42 = *((_DWORD *)v40 - 1);
                float32x4_t v40 = (uint64_t *)((char *)v40 - 4);
                *((_DWORD *)v39 - 1) = v42;
                uint64_t v39 = (uint64_t *)((char *)v39 - 4);
              }
              while (v40 != v41);
              float32x4_t v40 = v29[5];
            }
            v29[5] = v39;
            v29[6] = v32;
            v29[7] = (uint64_t *)&v38[4 * v37];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v30 = v45;
            unint64_t v32 = (uint64_t *)((char *)v30 + 4);
          }
          v29[6] = v32;
        }
      }
      uint64_t v12 = (unsigned int *)v47;
      uint64_t v21 = ++v22;
    }
    while (v22 < (unint64_t)(((char *)v48 - v47) >> 2));
    if (v47)
    {
LABEL_44:
      float32x4_t v48 = v12;
      operator delete(v12);
    }
  }
  return v4 == 0;
}

void sub_24F4D02BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FindFirstEdgeInPrevNextConnectedSequence(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 != *a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = a1 + 104;
    while (v3 != v4)
    {
      uint64_t v10 = 0;
      unsigned int v11 = 0;
      while (1)
      {
        if (v8 != v11)
        {
          int v12 = *(_DWORD *)(v4 + 4 * v7);
          uint64_t v13 = cv3d::cv::gess::mesh::Topology::h(v9, (unsigned int *)(v4 + 4 * v10));
          uint64_t v4 = *a2;
          uint64_t v3 = a2[1];
          if (v12 == *(_DWORD *)(v13 + 8)) {
            break;
          }
        }
        uint64_t v10 = ++v11;
        if (v11 >= (unint64_t)((v3 - v4) >> 2)) {
          goto LABEL_11;
        }
      }
      uint64_t v7 = ++v8;
      if (v8 >= (unint64_t)((v3 - v4) >> 2)) {
        return 1;
      }
    }
LABEL_11:
    *a3 = v8;
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::RemoveDegeneratedFace(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v7 = (void *)(a1 + 104);
  unsigned int v14 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a3);
  unsigned int v13 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a4);
  int v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a3) + 12);
  int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a4) + 12);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v7, &v14, &v13);
  cv3d::cv::gess::mesh::Topology::SetStart(v7, &v14, &v11);
  cv3d::cv::gess::mesh::Topology::SetStart(v7, &v13, &v12);
  uint64_t v8 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a3);
  *(void *)uint64_t v8 = -1;
  *(void *)(v8 + 8) = -1;
  *(_DWORD *)(v8 + 16) = -1;
  uint64_t v9 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a4);
  *(void *)uint64_t v9 = -1;
  *(void *)(v9 + 8) = -1;
  *(_DWORD *)(v9 + 16) = -1;
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v7, a2) = -1;
  return 1;
}

uint64_t cv3d::cv::gess::internal::ComputeSmoothNormals(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a1[13];
  uint64_t v3 = a1[14];
  if ((uint64_t)(a2[1] - *a2) >> 4 != (v3 - v4) >> 2) {
    return 0;
  }
  uint64_t v8 = a1[19];
  uint64_t v7 = a1[20];
  if ((uint64_t)(a3[1] - *a3) >> 4 != (v7 - v8) >> 2) {
    return 0;
  }
  if (v7 != v8)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      cv3d::cv::gess::math::FaceNormal((uint64_t)a1, v10, (float32x4_t *)(*a3 + 16 * v10));
      unint64_t v10 = v11++;
    }
    while (v10 < (uint64_t)(a1[20] - a1[19]) >> 2);
    uint64_t v4 = a1[13];
    uint64_t v3 = a1[14];
  }
  if (v3 != v4)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 1;
    do
    {
      cv3d::cv::gess::math::VertexNormalFromFaceNormal((uint64_t)a1, a3, v12, &v15);
      *(float32x4_t *)(*a2 + 16 * v12) = v15;
      unint64_t v12 = v13++;
    }
    while (v12 < (uint64_t)(a1[14] - a1[13]) >> 2);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::ComputeVertexAreas(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1] - *a2;
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = a1 + 104;
  uint64_t v6 = v4 - v3;
  if (v4 != v3 && v2 == v6)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    unint64_t v12 = (uint64_t *)(a1 + 8);
    float32x4_t v40 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      unsigned int v47 = v11;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v46, v5, &v47);
      unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v46);
      unsigned int v45 = HEdge;
      float v14 = 0.0;
      while (HEdge != -1)
      {
        float32x4_t v15 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
        if ((v16 & *v15) == 0)
        {
          unsigned int v44 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, &v45) + 4);
          unsigned int v47 = *(_DWORD *)(a1 + 176);
          uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, &v47);
          uint64_t v18 = *(void *)(v17 + 40);
          if (v10 >= (*(void *)(v17 + 48) - v18) >> 4) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          float32x4_t v43 = *(float32x4_t *)(v18 + 16 * v10);
          unsigned int v47 = *(_DWORD *)(a1 + 176);
          uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, &v47);
          unsigned int v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, &v45);
          unint64_t v21 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v5, v20) + 12);
          uint64_t v22 = *(void *)(v19 + 40);
          if (v21 >= (*(void *)(v19 + 48) - v22) >> 4) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          float32x4_t v42 = *(float32x4_t *)(v22 + 16 * v21);
          unsigned int v47 = *(_DWORD *)(a1 + 176);
          uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, &v47);
          unint64_t v24 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v5, &v44) + 12);
          uint64_t v25 = *(void *)(v23 + 40);
          if (v24 >= (*(void *)(v23 + 48) - v25) >> 4) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          float32x4_t v41 = *(float32x4_t *)(v25 + 16 * v24);
          if (v11 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, &v45) + 12)) {
            cv3d::cv::gess::internal::ComputeVertexAreas();
          }
          float32x4_t v26 = vaddq_f32(v43, v42);
          float32x4_t v27 = vmulq_f32(vaddq_f32(v26, v41), v40);
          v28.i64[0] = 0x3F0000003F000000;
          v28.i64[1] = 0x3F0000003F000000;
          float32x4_t v29 = vmulq_f32(v26, v28);
          int32x4_t v30 = (int32x4_t)vsubq_f32(v27, v43);
          int32x4_t v31 = (int32x4_t)vsubq_f32(vmulq_f32(vaddq_f32(v43, v41), v28), v43);
          float32x4_t v32 = (float32x4_t)vzip2q_s32(vzip1q_s32(v30, (int32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL)), v30);
          float32x4_t v33 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL), v30);
          float32x4_t v34 = vmlsq_f32(vmulq_f32(v32, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL), v31)), (float32x4_t)vzip2q_s32(vzip1q_s32(v31, (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL)), v31), v33);
          float32x4_t v35 = vmulq_f32(v34, v34);
          v35.i32[3] = 0;
          int32x4_t v36 = (int32x4_t)vsubq_f32(v29, v43);
          float32x4_t v37 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), v36), v32), (float32x4_t)vzip2q_s32(vzip1q_s32(v36, (int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL)), v36), v33);
          float32x4_t v38 = vmulq_f32(v37, v37);
          v38.i32[3] = 0;
          float v14 = v14
              + (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35)))
                      + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38))))
              * 0.5;
        }
        unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v46);
        unsigned int v45 = HEdge;
      }
      *(float *)(*a2 + 4 * v10) = v14;
      unint64_t v10 = ++v11;
    }
    while (v11 < (unint64_t)((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2));
  }
  return v2 == v6;
}

uint64_t cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(void **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  unint64_t v10 = a4;
  v129[3] = *(void **)MEMORY[0x263EF8340];
  do
  {
    if ((unint64_t)(v10[1] - *v10) > 0x18F) {
      break;
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v127);
    uint64_t v11 = v10[1];
    if (*v10 == v11)
    {
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)v127, a1);
      unint64_t v12 = a2;
      unsigned int v13 = a3;
    }
    else
    {
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)v127, *(void ***)(v11 - 16));
      unint64_t v12 = (uint64_t *)(v9[1] - 24);
      unsigned int v13 = (uint64_t *)(v8[1] - 24);
    }
    uint64_t v118 = *v12;
    uint64_t v119 = *v13;
    uint64_t v14 = v127;
    uint64_t v16 = (void *)(v127 + 104);
    uint64_t v15 = *(void *)(v127 + 104);
    uint64_t v113 = *(void *)(v127 + 112);
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v14 + 136) - *(void *)(v14 + 128)) >> 2);
    LOBYTE(v123) = 0;
    std::vector<BOOL>::vector(&v126, v17, (unsigned __int8 *)&v123);
    uint64_t v112 = v15;
    if (*(void *)(v14 + 136) == *(void *)(v14 + 128))
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      unint64_t v21 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      unsigned int v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v23 = 0;
      do
      {
        LODWORD(v123) = v23;
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge((uint64_t)v16, (unsigned int *)&v123) + 12) == -1) {
          __assert_rtn("BuildMultiResolutionHierarchies", "QuadCommon.cpp", 729, "!cur_mesh.IsDangling(mesh::HEdgeHandle(hi))");
        }
        unint64_t v24 = v22 >> 6;
        uint64_t v25 = 1 << v22;
        if ((v126[v22 >> 6] & (1 << v22)) == 0)
        {
          LODWORD(v123) = v23;
          uint64_t v26 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)&v123) + 12);
          LODWORD(v123) = v23;
          float32x4_t v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)&v123);
          uint64_t v28 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, v27) + 12);
          float v29 = *(float *)(v119 + 4 * v26);
          float v30 = 1.0;
          if (v29 > 0.00000001)
          {
            float v31 = *(float *)(v119 + 4 * v28);
            double v32 = v31;
            BOOL v33 = v29 <= v31;
            float v34 = v31 / v29;
            float v30 = v29 / v31;
            if (v33) {
              float v30 = v34;
            }
            if (v32 <= 0.00000001) {
              float v30 = 1.0;
            }
          }
          float32x4_t v35 = vmulq_f32(*(float32x4_t *)(v118 + 16 * v26), *(float32x4_t *)(v118 + 16 * v28));
          v35.i32[3] = 0;
          float v36 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35)) * v30;
          if (v21 >= v20)
          {
            uint64_t v37 = ((char *)v21 - (char *)v18) >> 3;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            if (v20 - v18 > v38) {
              unint64_t v38 = v20 - v18;
            }
            if ((unint64_t)((char *)v20 - (char *)v18) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v38;
            }
            if (v39)
            {
              if (v39 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              float32x4_t v40 = (char *)operator new(8 * v39);
            }
            else
            {
              float32x4_t v40 = 0;
            }
            float32x4_t v41 = (float *)&v40[8 * v37];
            *(_DWORD *)float32x4_t v41 = v23;
            v41[1] = v36;
            if (v21 == v18)
            {
              uint64_t v18 = (float *)&v40[8 * v37];
            }
            else
            {
              float32x4_t v42 = (float *)&v40[8 * v37];
              do
              {
                uint64_t v43 = *((void *)v21 - 1);
                v21 -= 2;
                *((void *)v42 - 1) = v43;
                v42 -= 2;
              }
              while (v21 != v18);
              unint64_t v21 = v18;
              uint64_t v18 = v42;
            }
            unsigned int v20 = (float *)&v40[8 * v39];
            uint64_t v19 = v41 + 2;
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v21 = v23;
            v21[1] = v36;
            uint64_t v19 = v21 + 2;
          }
          v126[v24] |= v25;
          LODWORD(v123) = v23;
          unsigned int v44 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)&v123);
          *(void *)((char *)v126 + (((unint64_t)*v44 >> 3) & 0x1FFFFFF8)) |= 1 << *v44;
          unint64_t v21 = v19;
        }
        unint64_t v22 = ++v23;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v14 + 136) - *(void *)(v14 + 128)) >> 2) > v23);
    }
    unint64_t v45 = 126 - 2 * __clz(((char *)v21 - (char *)v18) >> 3);
    if (v21 == v18) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = v45;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*,false>(v18, v21, v46, 1);
    unsigned int v125 = -1;
    std::string::basic_string[abi:ne180100]<0>(&v123, "v:c2f");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector2T<unsigned int>>(v14, &v125, &v123);
    if (v124 < 0) {
      operator delete((void *)v123);
    }
    if (*(void *)(v14 + 112) == *(void *)(v14 + 104))
    {
      unint64_t v51 = 0;
    }
    else
    {
      unint64_t v47 = 0;
      unsigned int v48 = 0;
      do
      {
        LODWORD(v123) = v125;
        uint64_t v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(v14 + 8), (unsigned int *)&v123);
        uint64_t v50 = *(void *)(v49 + 40);
        if (v47 >= (*(void *)(v49 + 48) - v50) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(int32x2_t *)(v50 + 8 * v47) = vdup_n_s32(v48);
        unint64_t v51 = (uint64_t)(*(void *)(v14 + 112) - *(void *)(v14 + 104)) >> 2;
        unint64_t v47 = ++v48;
      }
      while (v51 > v48);
    }
    LOBYTE(v122[0]) = 0;
    std::vector<BOOL>::vector(&v123, v51, (unsigned __int8 *)v122);
    uint64_t v52 = (char *)v19 - (char *)v18;
    if (v19 != v18)
    {
      uint64_t v53 = 0;
      unsigned int v54 = 0;
      unint64_t v55 = v52 >> 3;
      uint64_t v117 = v52 >> 3;
      do
      {
        *(float *)std::string __p = v18[2 * v53];
        LODWORD(v122[0]) = __p[0];
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge((uint64_t)v16, (unsigned int *)v122) + 12) != -1)
        {
          unint64_t v56 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)__p) + 12);
          unint64_t v57 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)__p);
          uint64_t v58 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, v57);
          if ((*(void *)(v123 + 8 * (v56 >> 6)) & (1 << v56)) == 0)
          {
            unint64_t v60 = *(unsigned int *)(v58 + 12);
            if ((*(void *)(v123 + 8 * (v60 >> 6)) & (1 << v60)) == 0)
            {
              *(float *)v59.i32 = *(float *)(v119 + 4 * v56) + *(float *)(v119 + 4 * v60);
              if (*(float *)v59.i32 <= 1.0e-16)
              {
                LODWORD(v129[0]) = *(_DWORD *)(v14 + 176);
                uint64_t v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v129);
                uint64_t v67 = *(void *)(v66 + 40);
                if (v56 >= (*(void *)(v66 + 48) - v67) >> 4
                  || (LODWORD(v129[0]) = *(_DWORD *)(v14 + 176),
                      uint64_t v68 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v129), v69 = *(void *)(v68 + 40), v60 >= (*(void *)(v68 + 48) - v69) >> 4))
                {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                v70.i64[0] = 0x3F0000003F000000;
                v70.i64[1] = 0x3F0000003F000000;
                float32x4_t v65 = vmulq_f32(vaddq_f32(*(float32x4_t *)(v69 + 16 * v60), *(float32x4_t *)(v67 + 16 * v56)), v70);
                unint64_t v55 = v117;
              }
              else
              {
                int32x2_t v116 = v59;
                LODWORD(v129[0]) = *(_DWORD *)(v14 + 176);
                uint64_t v61 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v129);
                uint64_t v62 = *(void *)(v61 + 40);
                if (v56 >= (*(void *)(v61 + 48) - v62) >> 4) {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                float v115 = *(float *)(v119 + 4 * v56);
                float32x4_t v114 = *(float32x4_t *)(v62 + 16 * v56);
                LODWORD(v129[0]) = *(_DWORD *)(v14 + 176);
                uint64_t v63 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v129);
                uint64_t v64 = *(void *)(v63 + 40);
                if (v60 >= (*(void *)(v63 + 48) - v64) >> 4) {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                float32x4_t v65 = vdivq_f32(vaddq_f32(vmulq_n_f32(v114, v115), vmulq_n_f32(*(float32x4_t *)(v64 + 16 * v60), *(float *)(v119 + 4 * v60))), (float32x4_t)vdupq_lane_s32(v116, 0));
              }
              *(float32x4_t *)std::vector<unsigned int>::pointer v122 = v65;
              if (cv3d::cv::gess::internal::EdgeCollapsing(v14, (unsigned int *)__p, v122))
              {
                uint64_t v71 = 0;
                uint64_t v72 = v123;
                *(void *)(v123 + 8 * (v56 >> 6)) |= 1 << v56;
                *(void *)(v72 + 8 * (v60 >> 6)) |= 1 << v60;
                v129[0] = (void *)__PAIR64__(v60, v56);
                do
                {
                  LODWORD(v121.__begin_) = *(_DWORD *)((char *)v129 + v71);
                  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v16, (unsigned int *)&v121) != -1)
                  {
                    LODWORD(v121.__begin_) = v125;
                    uint64_t v73 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(v14 + 8), (unsigned int *)&v121);
                    unint64_t v74 = *(unsigned int *)((char *)v129 + v71);
                    uint64_t v75 = *(void *)(v73 + 40);
                    if (v74 >= (*(void *)(v73 + 48) - v75) >> 3) {
                      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                    }
                    int v76 = (_DWORD *)(v75 + 8 * v74);
                    *int v76 = v56;
                    v76[1] = v60;
                  }
                  v71 += 4;
                }
                while (v71 != 8);
                unint64_t v55 = v117;
              }
            }
          }
        }
        uint64_t v53 = ++v54;
      }
      while (v55 > v54);
    }
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)v14);
    uint64_t v77 = *(void *)(v127 + 112) - *(void *)(v127 + 104);
    if ((unint64_t)v77 < 8 || (std::vector<unsigned int>::size_type v78 = ((unint64_t)(v113 - v112) >> 2), v78 == v77 >> 2))
    {
      char v79 = 0;
      uint64_t v9 = a5;
      uint64_t v8 = a6;
      unint64_t v10 = a4;
    }
    else
    {
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v122, (uint64_t)(*(void *)(v14 + 112) - *(void *)(v14 + 104)) >> 2);
      std::vector<float>::vector(v129, (uint64_t)(*(void *)(v14 + 112) - *(void *)(v14 + 104)) >> 2);
      std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::vector(__p, (uint64_t)(*(void *)(v14 + 112) - *(void *)(v14 + 104)) >> 2);
      if (*(void *)(v14 + 112) != *(void *)(v14 + 104))
      {
        unint64_t v80 = 0;
        unsigned int v81 = 0;
        do
        {
          unsigned int v128 = v125;
          uint64_t v82 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(v14 + 8), &v128);
          uint64_t v83 = *(void *)(v82 + 40);
          if (v80 >= (*(void *)(v82 + 48) - v83) >> 3) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          unint64_t v84 = (unsigned int *)(v83 + 8 * v80);
          uint64_t v85 = (char *)__p[0] + 8 * v80;
          *uint64_t v85 = *v84;
          v85[1] = v84[1];
          uint64_t v86 = *v84;
          unsigned int v87 = v84[1];
          begiuint64_t n = v121.__begin_;
          v121.__begin_[v86] = v81;
          if (v86 == v87)
          {
            *uint64_t v85 = *v84;
            v85[1] = v84[1];
            *((_OWORD *)v122[0] + v80) = *(_OWORD *)(v118 + 16 * *v84);
            float v89 = *(float *)(v119 + 4 * *v84);
          }
          else
          {
            begin[v84[1]] = v81;
            *uint64_t v85 = *v84;
            v85[1] = v84[1];
            float32x4_t v90 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v118 + 16 * *v84), *(float *)(v119 + 4 * *v84)), vmulq_n_f32(*(float32x4_t *)(v118 + 16 * v84[1]), *(float *)(v119 + 4 * v84[1])));
            float32x4_t v91 = vmulq_f32(v90, v90);
            v91.i32[3] = 0;
            float32x4_t v92 = vpaddq_f32(v91, v91);
            float32x4_t v93 = vpaddq_f32(v92, v92);
            float32x4_t v94 = (float32x4_t)xmmword_24F570A10;
            if (v93.f32[0] > 0.0) {
              float32x4_t v94 = vdivq_f32(v90, vsqrtq_f32(v93));
            }
            *((float32x4_t *)v122[0] + v80) = v94;
            float v89 = *(float *)(v119 + 4 * *v84) + *(float *)(v119 + 4 * v84[1]);
          }
          *((float *)v129[0] + v80) = v89;
          unint64_t v80 = ++v81;
        }
        while (v81 < (unint64_t)((uint64_t)(*(void *)(v14 + 112) - *(void *)(v14 + 104)) >> 2));
      }
      uint64_t v9 = a5;
      uint64_t v8 = a6;
      unint64_t v10 = a4;
      if (v125 != -1) {
        cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(v14 + 8), &v125);
      }
      unsigned int v125 = -1;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100](a4, &v127);
      unint64_t v95 = a6[1];
      if (v95 >= a6[2])
      {
        uint64_t v96 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a6, (uint64_t)v129);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a6, (uint64_t)v129);
        uint64_t v96 = v95 + 24;
      }
      a6[1] = v96;
      unint64_t v97 = a5[1];
      if (v97 >= a5[2])
      {
        uint64_t v98 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>(a5, (long long **)v122);
      }
      else
      {
        std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>((uint64_t)a5, (long long **)v122);
        uint64_t v98 = v97 + 24;
      }
      a5[1] = v98;
      unint64_t v99 = a7[1];
      if (v99 >= a7[2])
      {
        uint64_t v100 = std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(a7, (uint64_t)&v121);
      }
      else
      {
        std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)a7, (uint64_t)&v121);
        uint64_t v100 = v99 + 24;
      }
      a7[1] = v100;
      unint64_t v101 = a8[1];
      if (v101 >= a8[2])
      {
        uint64_t v102 = std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>(a8, (_DWORD **)__p);
      }
      else
      {
        std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>((uint64_t)a8, (_DWORD **)__p);
        uint64_t v102 = v101 + 24;
      }
      a8[1] = v102;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v121.__begin_)
      {
        v121.__end_ = v121.__begin_;
        operator delete(v121.__begin_);
      }
      if (v129[0])
      {
        v129[1] = v129[0];
        operator delete(v129[0]);
      }
      if (v122[0])
      {
        v122[1] = v122[0];
        operator delete(v122[0]);
      }
      char v79 = 1;
    }
    if ((void)v123) {
      operator delete((void *)v123);
    }
    if (v18) {
      operator delete(v18);
    }
    if (v126) {
      operator delete(v126);
    }
    if (*((void *)&v127 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v127 + 1));
    }
  }
  while ((v79 & 1) != 0);
  return 1;
}

void sub_24F4D1378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v43 = *(void **)(v41 - 152);
  if (v43)
  {
    *(void *)(v41 - 144) = v43;
    operator delete(v43);
  }
  if (a39) {
    operator delete(a39);
  }
  unsigned int v44 = *(void **)(v41 - 232);
  if (v44)
  {
    operator delete(v44);
    if (!v40)
    {
LABEL_12:
      unint64_t v45 = *(void **)(v41 - 200);
      if (v45) {
        operator delete(v45);
      }
      uint64_t v46 = *(std::__shared_weak_count **)(v41 - 168);
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_12;
  }
  operator delete(v40);
  goto LABEL_12;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector2T<unsigned int>>(uint64_t a1, _DWORD *a2, long long *a3)
{
  uint64_t v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(a1 + 8), (uint64_t)&v6, a3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(cv3d::cv::gess::mesh::PolyMesh *this)
{
  if (!cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(this)
    || !cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(this))
  {
    return 0;
  }

  return cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(this);
}

void **std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_24F4D168C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::VisualizeOrientation(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)&v54, (void **)a2);
  unsigned int v54 = &unk_2700D7EE8;
  int v53 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(v55, (uint64_t)&v51, (unsigned __int8 *)&__p);
  int v53 = v8;
  if (v47 < 0) {
    operator delete((void *)__p);
  }
  if (v8 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)&v54, &v53, &__p);
    if (v47 < 0) {
      operator delete((void *)__p);
    }
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v51, 4uLL);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v50, (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  uint64_t v9 = v57;
  if (v57 == v56)
  {
    unint64_t v27 = (v57 - v56) >> 2;
    uint64_t v26 = v57;
  }
  else
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    float32x2_t v12 = (float32x2_t)vpaddq_f32((float32x4_t)xmmword_24F578730, (float32x4_t)xmmword_24F578730).u64[0];
    v12.f32[0] = sqrtf(vaddv_f32(v12));
    int32x4_t v13 = (int32x4_t)vdivq_f32((float32x4_t)xmmword_24F578730, (float32x4_t)vdupq_lane_s32((int32x2_t)v12, 0));
    float32x4_t v14 = (float32x4_t)vzip2q_s32(vzip1q_s32(v13, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL)), v13);
    float32x4_t v15 = vnegq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), v13));
    do
    {
      uint64_t v16 = 0;
      float32x4_t v17 = *(float32x4_t *)(*a3 + 16 * v10);
      int32x4_t v18 = *(int32x4_t *)(*a4 + 16 * v10);
      float32x4_t v19 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v17, (int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL)), (int32x4_t)v17), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL), v18)), (float32x4_t)vzip2q_s32(vzip1q_s32(v18, (int32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL)), v18), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), (int32x4_t)v17));
      *(float32x4_t *)unint64_t v51 = v17;
      unsigned int v20 = (float32x4_t *)v51;
      *((float32x4_t *)v51 + 1) = v19;
      v20[2] = vnegq_f32(v17);
      v20[3] = vnegq_f32(v19);
      int32x4_t v21 = *(int32x4_t *)(*a4 + 16 * v10);
      float32x4_t v23 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL), v21);
      float32x4_t v22 = vmlaq_f32(vmulq_f32(v23, v14), (float32x4_t)vzip2q_s32(vzip1q_s32(v21, (int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL)), v21), v15);
      v23.i32[0] = -2.0;
      do
      {
        float32x4_t v24 = vmulq_f32(v22, v20[v16]);
        v24.i32[3] = 0;
        float32x4_t v25 = vpaddq_f32(v24, v24);
        v25.f32[0] = vaddv_f32(*(float32x2_t *)v25.f32);
        float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v25, v23), 0), (int8x16_t)vmulq_n_f32(v22, v25.f32[0]), (int8x16_t)v17);
        if (v25.f32[0] > v23.f32[0]) {
          v23.f32[0] = v25.f32[0];
        }
        ++v16;
      }
      while (v16 != 4);
      *((float32x4_t *)v50[0] + v10) = v17;
      uint64_t v9 = v56;
      uint64_t v26 = v57;
      unint64_t v27 = (v57 - v56) >> 2;
      uint64_t v10 = ++v11;
    }
    while (v27 > v11);
  }
  if (v27)
  {
    uint64_t v28 = 0;
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v30.i64[0] = 0x80000000800000;
    v30.i64[1] = 0x80000000800000;
    do
    {
      float32x4_t v31 = *((float32x4_t *)v50[0] + v28);
      float32x4_t v29 = vminq_f32(v29, v31);
      float32x4_t v30 = vmaxq_f32(v30, v31);
      ++v28;
    }
    while (v27 > v28);
  }
  else
  {
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v30.i64[0] = 0x80000000800000;
    v30.i64[1] = 0x80000000800000;
  }
  if (v26 != v9)
  {
    unint64_t v32 = 0;
    float32x4_t v41 = vsubq_f32(v30, v29);
    float32x4_t v42 = v29;
    unsigned int v33 = 1;
    do
    {
      float32x4_t v43 = *((float32x4_t *)v50[0] + v32);
      LODWORD(__p) = v53;
      uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v55, (unsigned int *)&__p);
      uint64_t v35 = *(void *)(v34 + 40);
      if (v32 >= (*(void *)(v34 + 48) - v35) >> 4) {
        goto LABEL_31;
      }
      float32x4_t v44 = vdivq_f32(vsubq_f32(v43, v42), v41);
      *(_DWORD *)(v35 + 16 * v32) = v44.i32[0];
      LODWORD(__p) = v53;
      uint64_t v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v55, (unsigned int *)&__p);
      uint64_t v37 = *(void *)(v36 + 40);
      if (v32 >= (*(void *)(v36 + 48) - v37) >> 4
        || (*(_DWORD *)(v37 + 16 * v32 + 4) = v44.i32[1],
            LODWORD(__p) = v53,
            uint64_t v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v55, (unsigned int *)&__p), v39 = *(void *)(v38 + 40), v32 >= (*(void *)(v38 + 48) - v39) >> 4))
      {
LABEL_31:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v39 + 16 * v32 + 8) = v44.i32[2];
      unint64_t v32 = v33++;
    }
    while (v32 < (v57 - v56) >> 2);
  }
  LOBYTE(__p) = 0;
  DWORD1(__p) = 1;
  WORD4(__p) = 0;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v46);
  BYTE8(__p) = 1;
  cv3d::cv::gess::io::SaveObjFile(a1, (uint64_t)&v54, (uint64_t)&__p);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v49, v49[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v46, v48);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v54);
  return 1;
}

void sub_24F4D1AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a35);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::io::SaveObjOption::~SaveObjOption(cv3d::cv::gess::io::SaveObjOption *this)
{
  uint64_t v2 = (char *)this + 16;
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v2, *((void **)this + 3));
}

uint64_t cv3d::cv::gess::internal::VisualizePosition(uint64_t a1, void **a2, void *a3)
{
  cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)&v29, a2);
  float32x4_t v29 = &unk_2700D7EE8;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  v33[0] = 0;
  v33[1] = 0;
  int v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(v30, (uint64_t)v33, (unsigned __int8 *)&__p);
  int v28 = v5;
  if (v25 < 0) {
    operator delete((void *)__p);
  }
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)&v29, &v28, &__p);
    if (v25 < 0) {
      operator delete((void *)__p);
    }
  }
  if (v32 == v31)
  {
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v8.i64[0] = 0x80000000800000;
    v8.i64[1] = 0x80000000800000;
  }
  else
  {
    uint64_t v6 = 0;
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v8.i64[0] = 0x80000000800000;
    v8.i64[1] = 0x80000000800000;
    do
    {
      float32x4_t v9 = *(float32x4_t *)(*a3 + 16 * v6);
      float32x4_t v7 = vminq_f32(v7, v9);
      float32x4_t v8 = vmaxq_f32(v8, v9);
      ++v6;
    }
    while ((v32 - v31) >> 2 > (unint64_t)v6);
  }
  if (v32 != v31)
  {
    unint64_t v10 = 0;
    float32x4_t v19 = vsubq_f32(v8, v7);
    float32x4_t v20 = v7;
    unsigned int v11 = 1;
    do
    {
      float32x4_t v21 = *(float32x4_t *)(*a3 + 16 * v10);
      LODWORD(__p) = v28;
      uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v30, (unsigned int *)&__p);
      uint64_t v13 = *(void *)(v12 + 40);
      if (v10 >= (*(void *)(v12 + 48) - v13) >> 4) {
        goto LABEL_18;
      }
      float32x4_t v22 = vdivq_f32(vsubq_f32(v21, v20), v19);
      *(_DWORD *)(v13 + 16 * v10) = v22.i32[0];
      LODWORD(__p) = v28;
      uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v30, (unsigned int *)&__p);
      uint64_t v15 = *(void *)(v14 + 40);
      if (v10 >= (*(void *)(v14 + 48) - v15) >> 4
        || (*(_DWORD *)(v15 + 16 * v10 + 4) = v22.i32[1],
            LODWORD(__p) = v28,
            uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v30, (unsigned int *)&__p), v17 = *(void *)(v16 + 40), v10 >= (*(void *)(v16 + 48) - v17) >> 4))
      {
LABEL_18:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v17 + 16 * v10 + 8) = v22.i32[2];
      unint64_t v10 = v11++;
    }
    while (v10 < (v32 - v31) >> 2);
  }
  LOBYTE(__p) = 0;
  DWORD1(__p) = 1;
  WORD4(__p) = 0;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v24);
  BYTE8(__p) = 1;
  cv3d::cv::gess::io::SaveObjFile(a1, (uint64_t)&v29, (uint64_t)&__p);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v27, v27[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v24, v26);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v29);
  return 0;
}

void sub_24F4D1DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a29);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::ReorderMesh(uint64_t *a1, void **a2, void **a3)
{
  memset(&v46, 0, sizeof(v46));
  memset(&v47, 0, sizeof(v47));
  unint64_t v6 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v29 = v6 >> 4;
  unsigned int v30 = cv3d::cv::gess::internal::BuildDirectedEdge(a1, v6 >> 4, &v47, &v46);
  if (v30)
  {
    unint64_t v9 = v7 - v8;
    size_t v10 = (v9 >> 4);
    long long v43 = 0u;
    long long v44 = 0u;
    int v45 = 1065353216;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>((uint64_t)&v43, v10);
    unint64_t v11 = v9 >> 4;
    for (LODWORD(v41[0]) = 0; LODWORD(v41[0]) < v11; ++LODWORD(v41[0]))
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v43, (unsigned int *)v41, v41);
    long long v42 = 0u;
    memset(v41, 0, sizeof(v41));
    memset(v39, 0, sizeof(v39));
    int v40 = 1065353216;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>((uint64_t)v39, (v6 >> 4));
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::vector(v37, v10);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v35, (v6 >> 4));
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(__p, (v6 >> 4));
    if (*((void *)&v44 + 1))
    {
      uint64_t v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = *((void *)&v42 + 1);
      do
      {
        if (v14
          || (uint64_t v15 = (uint64_t *)v44,
              std::deque<unsigned int>::push_back(v41, (_DWORD *)(v44 + 16)),
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(&v43, v15), (uint64_t v14 = *((void *)&v42 + 1)) != 0))
        {
          do
          {
            uint64_t v16 = *(unsigned int *)(*(void *)(v41[1] + (((unint64_t)v42 >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * (v42 & 0x3FF));
            *(void *)&long long v42 = v42 + 1;
            *((void *)&v42 + 1) = v14 - 1;
            if ((unint64_t)v42 >= 0x800)
            {
              operator delete(*(void **)v41[1]);
              v41[1] += 8;
              *(void *)&long long v42 = v42 - 1024;
            }
            uint64_t v17 = 0;
            uint64_t v18 = 16 * v13;
            unsigned int v31 = v13 + 1;
            uint64_t v19 = (4 * v16);
            uint64_t v20 = 16 * v16;
            uint64_t v21 = v12;
            do
            {
              unsigned int v32 = 0;
              unsigned int v32 = *(_DWORD *)(*a1 + v20 + v17 * 4);
              float32x4_t v22 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(v39, &v32);
              if (v22)
              {
                uint64_t v12 = v21;
                LODWORD(v21) = *((_DWORD *)v22 + 5);
              }
              else
              {
                v48[0] = &v32;
                uint64_t v12 = (v21 + 1);
                *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v39, &v32, (uint64_t)&std::piecewise_construct, v48)+ 5) = v21;
                uint64_t v23 = v32;
                *((_OWORD *)v35[0] + v21) = *((_OWORD *)*a2 + v32);
                *((_OWORD *)__p[0] + v21) = *((_OWORD *)*a3 + v23);
              }
              *(_DWORD *)((char *)v37[0] + v18 + v17 * 4) = v21;
              unsigned int v24 = v46.__begin_[v19 + v17];
              if (v24 != -1)
              {
                LODWORD(v48[0]) = v24 >> 2;
                if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(&v43, (unsigned int *)v48))
                {
                  std::deque<unsigned int>::push_back(v41, v48);
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(&v43, (unsigned int *)v48);
                }
              }
              ++v17;
              uint64_t v21 = v12;
            }
            while (v17 != 4);
            uint64_t v14 = *((void *)&v42 + 1);
            unsigned int v13 = v31;
          }
          while (*((void *)&v42 + 1));
        }
        uint64_t v14 = 0;
      }
      while (*((void *)&v44 + 1));
    }
    else
    {
      LODWORD(v12) = 0;
    }
    char v25 = (void *)*a1;
    if (*a1)
    {
      a1[1] = (uint64_t)v25;
      operator delete(v25);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)v37;
    a1[2] = v38;
    v37[1] = 0;
    uint64_t v38 = 0;
    v37[0] = 0;
    uint64_t v26 = *a2;
    if (*a2)
    {
      a2[1] = v26;
      operator delete(v26);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v35;
    a2[2] = v36;
    v35[1] = 0;
    uint64_t v36 = 0;
    v35[0] = 0;
    unint64_t v27 = *a3;
    if (*a3)
    {
      a3[1] = v27;
      operator delete(v27);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v34;
    __p[1] = 0;
    uint64_t v34 = 0;
    __p[0] = 0;
    if (v12 != v29)
    {
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a2, v12);
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a3, v12);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
    std::deque<int>::~deque[abi:ne180100](v41);
  }
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
  return v30;
}

void sub_24F4D2240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a21) {
    operator delete(a21);
  }
  std::deque<int>::~deque[abi:ne180100](&a31);
  uint64_t v34 = (void *)v31[12];
  if (v34)
  {
    v31[13] = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)v31[15];
  if (v35)
  {
    v31[16] = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::BuildDirectedEdge(uint64_t *a1, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int> *this, std::vector<unsigned int> *a4)
{
  unsigned int v6 = __sz;
  this->__end_ = this->__begin_;
  std::vector<std::pair<unsigned int,unsigned int>>::vector(__p, (a1[1] - *a1) >> 2);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1] - *a1;
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    while (2)
    {
      uint64_t v12 = 0;
      unsigned int v13 = (char *)__p[0];
      begiuint64_t n = this->__begin_;
      uint64_t v15 = v8 + 16 * v10;
      do
      {
        uint64_t v16 = *(unsigned int *)(v15 + 4 * v12);
        uint64_t v17 = v12 + 1;
        unsigned int v18 = *(_DWORD *)(v15 + 4 * ((v12 + 1) & 3));
        if (v16 >= v6 || v18 >= v6)
        {
          uint64_t v43 = 0;
          goto LABEL_32;
        }
        if (v16 != v18)
        {
          uint64_t v20 = v12 + 4 * v11;
          uint64_t v21 = (unsigned int *)&v13[8 * v20];
          *uint64_t v21 = v18;
          v21[1] = -1;
          float32x4_t v22 = &begin[v16];
          for (uint64_t i = *v22; i != -1; uint64_t i = v25)
          {
            unsigned int v24 = &v13[8 * i];
            unsigned int v25 = *((_DWORD *)v24 + 1);
            float32x4_t v22 = (unsigned int *)(v24 + 4);
          }
          *float32x4_t v22 = v20;
        }
        uint64_t v12 = v17;
      }
      while (v17 != 4);
      uint64_t v10 = ++v11;
      if (v9 >> 4 > (unint64_t)v11) {
        continue;
      }
      break;
    }
  }
  a4->__end_ = a4->__begin_;
  uint64_t v26 = *a1;
  uint64_t v27 = a1[1];
  uint64_t v28 = v27 - *a1;
  if (v27 != *a1)
  {
    uint64_t v29 = 0;
    unint64_t v30 = v28 >> 4;
    do
    {
      uint64_t v31 = 0;
      std::vector<unsigned int>::pointer v32 = this->__begin_;
      unsigned int v33 = __p[0];
      std::vector<unsigned int>::pointer v34 = a4->__begin_;
      uint64_t v35 = v26 + 16 * v29;
      do
      {
        int v36 = *(_DWORD *)(v35 + 4 * v31);
        uint64_t v37 = v31 + 1;
        uint64_t v38 = *(unsigned int *)(v35 + 4 * ((v31 + 1) & 3));
        if (v36 != v38)
        {
          unint64_t v39 = v32[v38];
          if (v39 != -1)
          {
            unint64_t v40 = v31 + (4 * v29);
            unint64_t v41 = 0xFFFFFFFFLL;
            while (1)
            {
              if (v33[2 * v39] == v36)
              {
                BOOL v42 = v41 == 0xFFFFFFFF;
                unint64_t v41 = v39;
                if (!v42) {
                  break;
                }
              }
              unint64_t v39 = v33[2 * v39 + 1];
              if (v39 == -1)
              {
                if (v41 != 0xFFFFFFFF && v40 < v41)
                {
                  v34[v40] = v41;
                  v34[v41] = v40;
                }
                break;
              }
            }
          }
        }
        uint64_t v31 = v37;
      }
      while (v37 != 4);
      ++v29;
    }
    while (v30 > v29);
  }
  uint64_t v43 = 1;
LABEL_32:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v43;
}

void sub_24F4D24EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

uint64_t cv3d::cv::gess::internal::ReorderIrregularFaceIndices(uint64_t *a1, std::vector<unsigned int>::pointer **a2)
{
  uint64_t v2 = *a2;
  std::vector<unsigned int>::size_type v3 = a2[1];
  if (*a2 != v3)
  {
    long long v5 = xmmword_24F570A10;
    do
    {
      unsigned int v6 = *v2;
      unint64_t v7 = (char *)v2[1] - (char *)*v2;
      unint64_t v8 = v7 >> 2;
      if ((v7 >> 2))
      {
        uint64_t v9 = 0;
        unsigned int v10 = 0;
        uint64_t v11 = *a1;
        std::vector<unsigned int>::size_type v12 = (v7 >> 2);
        float v13 = 3.4028e38;
        do
        {
          if (v12 - 1 == v9) {
            uint64_t v14 = 0;
          }
          else {
            uint64_t v14 = v9 + 1;
          }
          float32x4_t v15 = *(float32x4_t *)(v11 + 16 * v6[v9]);
          float32x4_t v16 = vsubq_f32(*(float32x4_t *)(v11 + 16 * v6[((int)v8 - 1 + (int)v9) % v8]), v15);
          float32x4_t v17 = vmulq_f32(v16, v16);
          v17.i32[3] = 0;
          float32x4_t v18 = vpaddq_f32(v17, v17);
          float32x4_t v19 = vpaddq_f32(v18, v18);
          float32x4_t v20 = (float32x4_t)v5;
          if (v19.f32[0] > 0.0) {
            float32x4_t v20 = vdivq_f32(v16, vsqrtq_f32(v19));
          }
          float32x4_t v21 = vsubq_f32(*(float32x4_t *)(v11 + 16 * v6[v14]), v15);
          float32x4_t v22 = vmulq_f32(v21, v21);
          v22.i32[3] = 0;
          float32x4_t v23 = vpaddq_f32(v22, v22);
          float32x4_t v24 = vpaddq_f32(v23, v23);
          float32x4_t v25 = (float32x4_t)v5;
          if (v24.f32[0] > 0.0) {
            float32x4_t v25 = vdivq_f32(v21, vsqrtq_f32(v24));
          }
          float32x4_t v26 = vmulq_f32(v20, v25);
          v26.i32[3] = 0;
          float v27 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26));
          if (v13 > v27) {
            unsigned int v10 = v9;
          }
          uint64_t v28 = v9 + 1;
          if (v13 > v27) {
            float v13 = v27;
          }
          ++v9;
        }
        while (v12 != v28);
        std::vector<unsigned int>::vector(&v34, v12);
        long long v5 = xmmword_24F570A10;
        std::vector<unsigned int>::pointer v29 = *v2;
        begiuint64_t n = v34.__begin_;
        do
        {
          *begin++ = v29[v10 % v8];
          ++v10;
          --v12;
        }
        while (v12);
      }
      else
      {
        std::vector<unsigned int>::vector(&v34, (v7 >> 2));
        long long v5 = xmmword_24F570A10;
      }
      uint64_t v31 = *v2;
      std::vector<unsigned int>::pointer *v2 = v34.__begin_;
      v2[1] = v34.__end_;
      std::vector<unsigned int>::pointer v32 = v2[2];
      v2[2] = v34.__end_cap_.__value_;
      v34.__begin_ = v31;
      v34.__end_cap_.__value_ = v32;
      if (v31)
      {
        v34.__end_ = v31;
        operator delete(v31);
        long long v5 = xmmword_24F570A10;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::CollectIrregularFaces(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  a2[1] = *a2;
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a3);
  v45[0] = 0;
  v45[1] = 0;
  long long v44 = (uint64_t *)v45;
  uint64_t v5 = *a1;
  if (a1[1] == *a1)
  {
    int v7 = 0;
LABEL_55:
    BOOL v35 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) == v7;
    goto LABEL_56;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  unsigned int v8 = 0;
  do
  {
    uint64_t v9 = (_DWORD *)(v5 + 16 * v6);
    if (v9[2] == v9[3])
    {
      long long __p = v9 + 2;
      unsigned int v10 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v44, v9 + 2, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v10 + 10) = v8;
      uint64_t v11 = (_DWORD *)(*a1 + 16 * v6);
      int v12 = v11[1];
      long long __p = v11;
      ++v7;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10 + 6, v11, (uint64_t)&std::piecewise_construct, (unsigned int **)&__p)+ 8) = v12;
    }
    else
    {
      float v13 = (_DWORD *)a2[1];
      if ((unint64_t)v13 >= a2[2])
      {
        uint64_t v14 = std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__push_back_slow_path<cv3d::cv::gess::math::Vector4T<unsigned int> const&>(a2, v9);
      }
      else
      {
        _DWORD *v13 = *v9;
        v13[1] = v9[1];
        v13[2] = v9[2];
        v13[3] = v9[3];
        uint64_t v14 = (uint64_t)(v13 + 4);
      }
      a2[1] = v14;
    }
    uint64_t v5 = *a1;
    uint64_t v6 = ++v8;
  }
  while (v8 < (unint64_t)((a1[1] - *a1) >> 4));
  float32x4_t v15 = v44;
  if (v44 == (uint64_t *)v45) {
    goto LABEL_55;
  }
  while (1)
  {
    float32x4_t v16 = 0;
    LODWORD(v17) = 0;
    unsigned int v18 = *(_DWORD *)(v15[6] + 28);
    long long __p = 0;
    BOOL v42 = 0;
    uint64_t v43 = 0;
    float32x4_t v19 = v15 + 7;
    unsigned int v20 = v18;
    while (1)
    {
      if (v16 >= v43)
      {
        float32x4_t v21 = (char *)__p;
        uint64_t v22 = (v16 - (unsigned char *)__p) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v43 - (unsigned char *)__p;
        if ((v43 - (unsigned char *)__p) >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          float32x4_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v43, v25);
          float32x4_t v21 = (char *)__p;
          float32x4_t v16 = v42;
        }
        else
        {
          float32x4_t v26 = 0;
        }
        float v27 = &v26[4 * v22];
        *(_DWORD *)float v27 = v20;
        uint64_t v28 = v27 + 4;
        while (v16 != v21)
        {
          int v29 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v27 - 1) = v29;
          v27 -= 4;
        }
        long long __p = v27;
        BOOL v42 = v28;
        uint64_t v43 = &v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
        float32x4_t v16 = v28;
      }
      else
      {
        *(_DWORD *)float32x4_t v16 = v20;
        v16 += 4;
      }
      BOOL v42 = v16;
      uint64_t v30 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v31 = v15 + 7;
      do
      {
        unsigned int v32 = *(_DWORD *)(v30 + 28);
        BOOL v33 = v32 >= v20;
        if (v32 >= v20) {
          std::vector<unsigned int> v34 = (uint64_t *)v30;
        }
        else {
          std::vector<unsigned int> v34 = (uint64_t *)(v30 + 8);
        }
        if (v33) {
          uint64_t v31 = (uint64_t *)v30;
        }
        uint64_t v30 = *v34;
      }
      while (*v34);
      if (v31 == v19 || v20 < *((_DWORD *)v31 + 7)) {
        break;
      }
      unsigned int v20 = *((_DWORD *)v31 + 8);
      if (v20 != v18)
      {
        uint64_t v17 = (v17 + 1);
        if (v15[8] != v17) {
          continue;
        }
      }
      std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](a3, (uint64_t)&__p);
      BOOL v35 = 1;
      goto LABEL_44;
    }
    BOOL v35 = 0;
LABEL_44:
    if (__p)
    {
      BOOL v42 = (char *)__p;
      operator delete(__p);
    }
    if (!v35) {
      break;
    }
    int v36 = (uint64_t *)v15[1];
    if (v36)
    {
      do
      {
        uint64_t v37 = v36;
        int v36 = (uint64_t *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        uint64_t v37 = (uint64_t *)v15[2];
        BOOL v38 = *v37 == (void)v15;
        float32x4_t v15 = v37;
      }
      while (!v38);
    }
    float32x4_t v15 = v37;
    if (v37 == (uint64_t *)v45) {
      goto LABEL_55;
    }
  }
LABEL_56:
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy((uint64_t)&v44, v45[0]);
  return v35;
}

void sub_24F4D2A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, void *a16)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::internal::SaveQuadMesh(uint64_t a1, void *a2, void *a3, void *a4)
{
  v29[19] = *MEMORY[0x263EF8340];
  std::ofstream::basic_ofstream(&v27);
  int v25 = *(_DWORD *)&v28[*(void *)(v27 - 24) + 24] & 5;
  if (!v25)
  {
    if (a4[1] != *a4)
    {
      unsigned int v7 = 1;
      unsigned int v8 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"v ", 2);
        uint64_t v9 = (void *)cv3d::cv::gess::math::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
        unsigned int v10 = std::locale::use_facet(&v26, v8);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        unint64_t v11 = v7++;
      }
      while (v11 < (uint64_t)(a4[1] - *a4) >> 4);
    }
    if (a2[1] != *a2)
    {
      LODWORD(v12) = 0;
      float v13 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"f ", 2);
        for (uint64_t i = 0; i != 16; i += 4)
        {
          float32x4_t v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
        }
        std::ios_base::getloc((const std::ios_base *)&v28[*(void *)(v27 - 24) - 8]);
        float32x4_t v16 = std::locale::use_facet(&v26, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        unint64_t v12 = (v12 + 1);
      }
      while (v12 < (uint64_t)(a2[1] - *a2) >> 4);
    }
    if (a3[1] != *a3)
    {
      uint64_t v17 = 0;
      unsigned int v18 = 0;
      float32x4_t v19 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"f ", 2);
        if (*(void *)(*a3 + 24 * v17 + 8) != *(void *)(*a3 + 24 * v17))
        {
          unsigned int v20 = 1;
          do
          {
            float32x4_t v21 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ", 1);
            unint64_t v22 = v20++;
          }
          while (v22 < (uint64_t)(*(void *)(*a3 + 24 * v17 + 8) - *(void *)(*a3 + 24 * v17)) >> 2);
        }
        std::ios_base::getloc((const std::ios_base *)&v28[*(void *)(v27 - 24) - 8]);
        unint64_t v23 = std::locale::use_facet(&v26, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v17 = ++v18;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) > v18);
    }
  }
  uint64_t v27 = *MEMORY[0x263F8C2B0];
  *(void *)&v28[*(void *)(v27 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x25335E680](v28);
  std::ostream::~ostream();
  MEMORY[0x25335E950](v29);
  return v25 == 0;
}

void sub_24F4D2EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
}

float *std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*,false>(float *result, float *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = (unint64_t)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (float *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(a2 - 1) > *(float *)(v10 + 4))
                {
                  uint64_t v42 = *(void *)v10;
                  *(void *)unint64_t v10 = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v42;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)v10, (float *)(v10 + 8), a2 - 2);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), (uint64_t)(a2 - 2));
                break;
              case 5uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), v10 + 24);
                if (*(a2 - 1) > *(float *)(v10 + 28))
                {
                  uint64_t v43 = *(void *)(v10 + 24);
                  *(void *)(v10 + 24) = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v43;
                  if (*(float *)(v10 + 28) > *(float *)(v10 + 20))
                  {
                    uint64_t v45 = *(void *)(v10 + 16);
                    uint64_t v44 = *(void *)(v10 + 24);
                    *(void *)(v10 + 16) = v44;
                    *(void *)(v10 + 24) = v45;
                    if (*(float *)(v10 + 12) < *((float *)&v44 + 1))
                    {
                      uint64_t v46 = *(void *)(v10 + 8);
                      *(void *)(v10 + 8) = v44;
                      *(void *)(v10 + 16) = v46;
                      if (*(float *)(v10 + 4) < *((float *)&v44 + 1))
                      {
                        uint64_t v47 = *(void *)v10;
                        *(void *)unint64_t v10 = v44;
                        *(void *)(v10 + 8) = v47;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v48 = (float *)(v10 + 8);
            BOOL v50 = (float *)v10 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                unint64_t v52 = v10;
                do
                {
                  float v53 = *(float *)(v52 + 12);
                  float v54 = *(float *)(v52 + 4);
                  unint64_t v52 = (unint64_t)v48;
                  if (v53 > v54)
                  {
                    float v55 = *v48;
                    uint64_t v56 = v51;
                    while (1)
                    {
                      *(void *)(v10 + v56 + 8) = *(void *)(v10 + v56);
                      if (!v56) {
                        break;
                      }
                      float v57 = *(float *)(v10 + v56 - 4);
                      v56 -= 8;
                      if (v57 >= v53)
                      {
                        uint64_t v58 = v10 + v56 + 8;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v58 = v10;
LABEL_85:
                    *(float *)uint64_t v58 = v55;
                    *(float *)(v58 + 4) = v53;
                  }
                  unsigned int v48 = (float *)(v52 + 8);
                  v51 += 8;
                }
                while ((float *)(v52 + 8) != a2);
              }
            }
            else if (!v50)
            {
              do
              {
                float v83 = v9[3];
                float v84 = v9[1];
                uint64_t v9 = v48;
                if (v83 > v84)
                {
                  float v85 = *v48;
                  do
                  {
                    uint64_t v86 = v48;
                    uint64_t v87 = *((void *)v48 - 1);
                    v48 -= 2;
                    *(void *)uint64_t v86 = v87;
                  }
                  while (*(v86 - 3) < v83);
                  *unsigned int v48 = v85;
                  v48[1] = v83;
                }
                unsigned int v48 = v9 + 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              int64_t v59 = (v12 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  unint64_t v63 = v10 + 8 * v62;
                  if (2 * v61 + 2 < (uint64_t)v12 && *(float *)(v63 + 4) > *(float *)(v63 + 12))
                  {
                    v63 += 8;
                    uint64_t v62 = 2 * v61 + 2;
                  }
                  float v64 = *(float *)(v10 + 8 * v61 + 4);
                  if (*(float *)(v63 + 4) <= v64)
                  {
                    unint64_t v65 = v10 + 8 * v61;
                    int v66 = *(_DWORD *)v65;
                    do
                    {
                      uint64_t v67 = (void *)v65;
                      unint64_t v65 = v63;
                      *uint64_t v67 = *(void *)v63;
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v68 = 2 * v62;
                      uint64_t v62 = (2 * v62) | 1;
                      unint64_t v63 = v10 + 8 * v62;
                      uint64_t v69 = v68 + 2;
                      if (v69 < (uint64_t)v12 && *(float *)(v63 + 4) > *(float *)(v63 + 12))
                      {
                        v63 += 8;
                        uint64_t v62 = v69;
                      }
                    }
                    while (*(float *)(v63 + 4) <= v64);
                    *(_DWORD *)unint64_t v65 = v66;
                    *(float *)(v65 + 4) = v64;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v70 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v71 = 0;
                uint64_t v72 = *(void *)v10;
                unint64_t v73 = v10;
                do
                {
                  unint64_t v74 = (void *)v73;
                  v73 += 8 * (v71 + 1);
                  uint64_t v75 = 2 * v71;
                  uint64_t v71 = (2 * v71) | 1;
                  uint64_t v76 = v75 + 2;
                  if (v76 < v70 && *(float *)(v73 + 4) > *(float *)(v73 + 12))
                  {
                    v73 += 8;
                    uint64_t v71 = v76;
                  }
                  void *v74 = *(void *)v73;
                }
                while (v71 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                a2 -= 2;
                if ((float *)v73 == a2)
                {
                  *(void *)unint64_t v73 = v72;
                }
                else
                {
                  *(void *)unint64_t v73 = *(void *)a2;
                  *(void *)a2 = v72;
                  uint64_t v77 = v73 - v10 + 8;
                  if (v77 >= 9)
                  {
                    unint64_t v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                    float v79 = *(float *)(v73 + 4);
                    if (*(float *)(v10 + 8 * v78 + 4) > v79)
                    {
                      int v80 = *(_DWORD *)v73;
                      do
                      {
                        unsigned int v81 = (void *)v73;
                        unint64_t v73 = v10 + 8 * v78;
                        *unsigned int v81 = *(void *)v73;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                      }
                      while (*(float *)(v10 + 8 * v78 + 4) > v79);
                      *(_DWORD *)unint64_t v73 = v80;
                      *(float *)(v73 + 4) = v79;
                    }
                  }
                }
              }
              while (v70-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (float *)(v10 + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v9 + 2, v14 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          float v16 = v9[1];
          if (*(v9 - 1) > v16) {
            goto LABEL_13;
          }
          if (*(a2 - 1) >= v16)
          {
            BOOL v33 = v9 + 2;
            do
            {
              unint64_t v10 = (unint64_t)v33;
              if (v33 >= a2) {
                break;
              }
              float v34 = v33[1];
              v33 += 2;
            }
            while (v34 >= v16);
          }
          else
          {
            uint64_t v31 = v9;
            do
            {
              unint64_t v10 = (unint64_t)(v31 + 2);
              float v32 = v31[3];
              v31 += 2;
            }
            while (v32 >= v16);
          }
          BOOL v35 = a2;
          if (v10 < (unint64_t)a2)
          {
            int v36 = a2;
            do
            {
              BOOL v35 = v36 - 2;
              float v37 = *(v36 - 1);
              v36 -= 2;
            }
            while (v37 < v16);
          }
          float v38 = *v9;
          while (v10 < (unint64_t)v35)
          {
            uint64_t v39 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v35;
            *(void *)BOOL v35 = v39;
            do
            {
              float v40 = *(float *)(v10 + 12);
              v10 += 8;
            }
            while (v40 >= v16);
            do
            {
              float v41 = *(v35 - 1);
              v35 -= 2;
            }
            while (v41 < v16);
          }
          BOOL v4 = v10 - 8 >= (unint64_t)v9;
          BOOL v5 = v10 - 8 == (void)v9;
          if ((float *)(v10 - 8) != v9) {
            *(void *)uint64_t v9 = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(float *)(v10 - 8) = v38;
          *(float *)(v10 - 4) = v16;
        }
        float v16 = v9[1];
LABEL_13:
        uint64_t v17 = 0;
        float v18 = *v9;
        do
        {
          float v19 = v9[v17 + 3];
          v17 += 2;
        }
        while (v19 > v16);
        unsigned int v20 = &v9[v17];
        float32x4_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v24 = a2;
          while (v20 < v24)
          {
            unint64_t v22 = v24 - 2;
            float v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 > v16) {
              goto LABEL_23;
            }
          }
          unint64_t v22 = v24;
        }
        else
        {
          do
          {
            unint64_t v22 = v21 - 2;
            float v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 <= v16);
        }
LABEL_23:
        unint64_t v10 = (unint64_t)v20;
        if (v20 < v22)
        {
          std::locale v26 = v22;
          do
          {
            uint64_t v27 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v26;
            *(void *)std::locale v26 = v27;
            do
            {
              float v28 = *(float *)(v10 + 12);
              v10 += 8;
            }
            while (v28 > v16);
            do
            {
              float v29 = *(v26 - 1);
              v26 -= 2;
            }
            while (v29 <= v16);
          }
          while (v10 < (unint64_t)v26);
        }
        if ((float *)(v10 - 8) != v9) {
          *(void *)uint64_t v9 = *(void *)(v10 - 8);
        }
        *(float *)(v10 - 8) = v18;
        *(float *)(v10 - 4) = v16;
        if (v20 >= v22) {
          break;
        }
LABEL_34:
        uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*,false>(v9, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((uint64_t)v9, v10 - 8);
      uint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v10, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = (float *)(v10 - 8);
    if (!v30) {
      continue;
    }
    return result;
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(float *result, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a3[1];
  if (v3 <= result[1])
  {
    if (v4 > v3)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (a2[1] > result[1])
      {
        uint64_t v7 = *(void *)result;
        *(void *)uint64_t result = *(void *)a2;
        *(void *)a2 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)result;
    if (v4 <= v3)
    {
      *(void *)uint64_t result = *(void *)a2;
      *(void *)a2 = v5;
      if (a3[1] <= *((float *)&v5 + 1)) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
    }
    else
    {
      *(void *)uint64_t result = *(void *)a3;
    }
    *(void *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 4))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      if (*(float *)(a2 - 4) > *(float *)(a1 + 28))
      {
        uint64_t v16 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v16;
        if (*(float *)(a1 + 28) > *(float *)(a1 + 20))
        {
          uint64_t v18 = *(void *)(a1 + 16);
          uint64_t v17 = *(void *)(a1 + 24);
          *(void *)(a1 + 16) = v17;
          *(void *)(a1 + 24) = v18;
          if (*(float *)(a1 + 12) < *((float *)&v17 + 1))
          {
            uint64_t v19 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v17;
            *(void *)(a1 + 16) = v19;
            if (*(float *)(a1 + 4) < *((float *)&v17 + 1))
            {
              uint64_t v20 = *(void *)a1;
              *(void *)a1 = v17;
              *(void *)(a1 + 8) = v20;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)(v8 + 4);
    if (v11 > *(float *)(v7 + 4))
    {
      int v12 = *(_DWORD *)v8;
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 12);
        v13 -= 8;
        if (v14 >= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v15 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v15 = v12;
      *(float *)(v15 + 4) = v11;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(float *a1, float *a2, float *a3, uint64_t a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(a1, a2, a3);
  if (*(float *)(a4 + 4) > a3[1])
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    if (a3[1] > a2[1])
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (a2[1] > a1[1])
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(cv3d::cv::gess::mesh::PolyMesh *this)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_2700D8860;
  v5[1] = this;
  v5[3] = v5;
  BOOL v2 = cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>((uint64_t)this, (void *)this + 16, (uint64_t)v5);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v5);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(void *)this + 24))(this);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 4), *((uint64_t **)this + 5), v3);
  }
  return v2;
}

void sub_24F4D3A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(cv3d::cv::gess::mesh::PolyMesh *this)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_2700D88A8;
  v5[1] = this;
  v5[3] = v5;
  BOOL v2 = cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)this, (void *)this + 13, (uint64_t)v5);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v5);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(void *)this + 16))(this);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 1), *((uint64_t **)this + 2), v3);
  }
  return v2;
}

void sub_24F4D3B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(cv3d::cv::gess::mesh::PolyMesh *this)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_2700D88F0;
  v5[1] = this;
  v5[3] = v5;
  BOOL v2 = cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)this, (void *)this + 19, (uint64_t)v5);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v5);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(void *)this + 32))(this);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 7), *((uint64_t **)this + 8), v3);
  }
  return v2;
}

void sub_24F4D3C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1] - *a2;
  if (!v3) {
    return 1;
  }
  uint64_t v4 = a3;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v36 = v3 / 20;
  unint64_t v9 = v3 / 20 - 1;
  uint64_t v10 = a1 + 104;
  while (1)
  {
    if (v9 > v8)
    {
      uint64_t v11 = 20 * v9;
      while (1)
      {
        uint64_t v12 = *(void *)(a1 + 128);
        if (0xCCCCCCCCCCCCCCCDLL * ((v11 + *a2 - v12) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                              * ((*(void *)(a1 + 136) - v12) >> 2))
          cv3d::cv::gess::mesh::Topology::AppendHEdge();
        unsigned int v37 = -858993459 * ((v11 + *a2 - v12) >> 2);
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) != -1) {
          break;
        }
        --v9;
        v11 -= 20;
        if (v9 <= v8)
        {
          unint64_t v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      uint64_t v13 = 20 * v8;
      unint64_t v14 = v7;
      unint64_t v15 = v8;
      while (1)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        if (0xCCCCCCCCCCCCCCCDLL * ((v13 + *a2 - v16) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                              * ((*(void *)(a1 + 136) - v16) >> 2))
          cv3d::cv::gess::mesh::Topology::AppendHEdge();
        unsigned int v37 = -858993459 * ((v13 + *a2 - v16) >> 2);
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) == -1) {
          break;
        }
        ++v15;
        ++v14;
        v13 += 20;
        if (v9 == v15)
        {
          unint64_t v7 = v9 + v7 - v8;
          goto LABEL_23;
        }
      }
      unint64_t v8 = v15;
      unint64_t v7 = v14;
      uint64_t v4 = a3;
    }
    if (v8 == v9) {
      break;
    }
    uint64_t v17 = *(void *)(a1 + 128);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v8 - v17) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                       * ((*(void *)(a1 + 136) - v17) >> 2))
      cv3d::cv::gess::mesh::Topology::AppendHEdge();
    unsigned int v37 = -858993459 * ((uint64_t)(*a2 + 20 * v8 - v17) >> 2);
    if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) != -1) {
      return 0;
    }
    uint64_t v18 = *(void *)(a1 + 128);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v9 - v18) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                       * ((*(void *)(a1 + 136) - v18) >> 2))
      cv3d::cv::gess::mesh::Topology::AppendHEdge();
    unsigned int v37 = -858993459 * ((uint64_t)(*a2 + 20 * v9 - v18) >> 2);
    if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) == -1) {
      return 0;
    }
    std::function<void ()(unsigned long,unsigned long)>::operator()(v4, v9, v8);
    uint64_t v19 = *a2 + 20 * v8;
    int v20 = *(_DWORD *)(v19 + 16);
    long long v21 = *(_OWORD *)v19;
    uint64_t v22 = *a2 + 20 * v9;
    long long v23 = *(_OWORD *)v22;
    *(_DWORD *)(v19 + 16) = *(_DWORD *)(v22 + 16);
    *(_OWORD *)uint64_t v19 = v23;
    uint64_t v24 = *a2 + 20 * v9;
    *(_OWORD *)uint64_t v24 = v21;
    *(_DWORD *)(v24 + 16) = v20;
    ++v8;
    ++v7;
    if (v8 > v9) {
      goto LABEL_26;
    }
  }
LABEL_23:
  uint64_t v25 = *(void *)(a1 + 128);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v9 - v25) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                     * ((*(void *)(a1 + 136) - v25) >> 2))
    cv3d::cv::gess::mesh::Topology::AppendHEdge();
  unsigned int v37 = -858993459 * ((uint64_t)(*a2 + 20 * v9 - v25) >> 2);
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) != -1) {
    ++v7;
  }
  if (!v7) {
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v26 = *(void *)(a1 + 128);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v7 - v26 - 20) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                          * ((*(void *)(a1 + 136) - v26) >> 2))
    cv3d::cv::gess::mesh::Topology::AppendHEdge();
  unsigned int v37 = -858993459 * ((uint64_t)(*a2 + 20 * v7 - v26 - 20) >> 2);
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) == -1)
  {
    BOOL v27 = 0;
  }
  else
  {
LABEL_29:
    if (v7 == v36)
    {
      BOOL v27 = 1;
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 128);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v7 - v29) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                         * ((*(void *)(a1 + 136) - v29) >> 2))
        cv3d::cv::gess::mesh::Topology::AppendHEdge();
      unsigned int v37 = -858993459 * ((uint64_t)(*a2 + 20 * v7 - v29) >> 2);
      BOOL v27 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) == -1;
    }
  }
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  if (v36 <= 1) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = v36;
  }
  do
  {
    if (v31 >= v7)
    {
      if (!v27)
      {
LABEL_45:
        BOOL v27 = 0;
        goto LABEL_46;
      }
      uint64_t v34 = *(void *)(a1 + 128);
      if (0xCCCCCCCCCCCCCCCDLL * ((v30 + *a2 - v34) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                            * ((*(void *)(a1 + 136) - v34) >> 2))
        cv3d::cv::gess::mesh::Topology::AppendHEdge();
      unsigned int v37 = -858993459 * ((v30 + *a2 - v34) >> 2);
      BOOL v27 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) == -1;
    }
    else
    {
      if (!v27) {
        goto LABEL_45;
      }
      uint64_t v33 = *(void *)(a1 + 128);
      if (0xCCCCCCCCCCCCCCCDLL * ((v30 + *a2 - v33) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                            * ((*(void *)(a1 + 136) - v33) >> 2))
        cv3d::cv::gess::mesh::Topology::AppendHEdge();
      unsigned int v37 = -858993459 * ((v30 + *a2 - v33) >> 2);
      BOOL v27 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v37) + 12) != -1;
    }
LABEL_46:
    ++v31;
    v30 += 20;
  }
  while (v32 != v31);
  if (v27)
  {
    std::vector<cv3d::cv::gess::mesh::HEdge>::resize((uint64_t)a2, v7);
    return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2) == v7;
  }
  return 0;
}

void std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_2700D8860;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D8860;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}::operator()((void *)(a1 + 8), *a2, *a3);
}

_DWORD *cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}::operator()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*a1;
  unsigned int v17 = a2;
  uint64_t v6 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v17);
  unint64_t v7 = (_DWORD *)cv3d::cv::gess::mesh::Topology::v(v5 + 13, (unsigned int *)(v6 + 12));
  if (*v7 == v17)
  {
    uint64_t v8 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v17);
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v5 + 13, (unsigned int *)(v8 + 12)) = a3;
  }
  unsigned int v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v17) + 16);
  if (v16 != -1)
  {
    unint64_t v9 = (_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(v5 + 13), &v16);
    if (*v9 == v17) {
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(v5 + 13), &v16) = a3;
    }
  }
  uint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v17);
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), v10) = a3;
  uint64_t v11 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v17);
  *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), (unsigned int *)(v11 + 8)) + 4) = a3;
  uint64_t v12 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v17);
  BOOL result = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), (unsigned int *)(v12 + 4));
  result[2] = a3;
  unint64_t v14 = (_DWORD **)v5[4];
  unint64_t v15 = (_DWORD **)v5[5];
  while (v14 != v15)
  {
    BOOL result = *v14;
    if (*v14) {
      BOOL result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)result + 56))(result, a2, a3);
    }
    v14 += 2;
  }
  return result;
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1] - *a2;
  if (!v3) {
    return 1;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v39 = v3 >> 2;
  unint64_t v9 = (v3 >> 2) - 1;
  uint64_t v10 = (void *)(a1 + 104);
  while (1)
  {
    if (v9 > v8)
    {
      uint64_t v11 = 4 * v9;
      while (1)
      {
        uint64_t v12 = *(void *)(a1 + 104);
        unint64_t v13 = v11 + *a2 - v12;
        if (v13 >= *(void *)(a1 + 112) - v12) {
          cv3d::cv::gess::mesh::Topology::AppendVertex();
        }
        unsigned int v40 = v13 >> 2;
        if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) != -1) {
          break;
        }
        --v9;
        v11 -= 4;
        if (v9 <= v8)
        {
          unint64_t v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      uint64_t v14 = 4 * v8;
      unint64_t v15 = v7;
      unint64_t v16 = v8;
      while (1)
      {
        uint64_t v17 = *(void *)(a1 + 104);
        unint64_t v18 = v14 + *a2 - v17;
        if (v18 >= *(void *)(a1 + 112) - v17) {
          cv3d::cv::gess::mesh::Topology::AppendVertex();
        }
        unsigned int v40 = v18 >> 2;
        if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) == -1) {
          break;
        }
        ++v16;
        ++v15;
        v14 += 4;
        if (v9 == v16)
        {
          unint64_t v7 = v9 + v7 - v8;
          goto LABEL_23;
        }
      }
      unint64_t v8 = v16;
      unint64_t v7 = v15;
    }
    if (v8 == v9) {
      break;
    }
    uint64_t v19 = *(void *)(a1 + 104);
    unint64_t v20 = *a2 + 4 * v8 - v19;
    if (v20 >= *(void *)(a1 + 112) - v19) {
      cv3d::cv::gess::mesh::Topology::AppendVertex();
    }
    unsigned int v40 = v20 >> 2;
    if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) != -1) {
      return 0;
    }
    uint64_t v21 = *(void *)(a1 + 104);
    unint64_t v22 = *a2 + 4 * v9 - v21;
    if (v22 >= *(void *)(a1 + 112) - v21) {
      cv3d::cv::gess::mesh::Topology::AppendVertex();
    }
    unsigned int v40 = v22 >> 2;
    if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) == -1) {
      return 0;
    }
    std::function<void ()(unsigned long,unsigned long)>::operator()(a3, v9, v8);
    int v23 = *(_DWORD *)(*a2 + 4 * v8);
    *(_DWORD *)(*a2 + 4 * v8) = *(_DWORD *)(*a2 + 4 * v9);
    *(_DWORD *)(*a2 + 4 * v9) = v23;
    ++v8;
    ++v7;
    if (v8 > v9) {
      goto LABEL_26;
    }
  }
LABEL_23:
  uint64_t v24 = *(void *)(a1 + 104);
  unint64_t v25 = *a2 + 4 * v9 - v24;
  if (v25 >= *(void *)(a1 + 112) - v24) {
    cv3d::cv::gess::mesh::Topology::AppendVertex();
  }
  unsigned int v40 = v25 >> 2;
  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) != -1) {
    ++v7;
  }
LABEL_26:
  uint64_t v26 = v39;
  if (!v7) {
    goto LABEL_29;
  }
  uint64_t v27 = *(void *)(a1 + 104);
  unint64_t v28 = *a2 + 4 * v7 - v27 - 4;
  if (v28 >= *(void *)(a1 + 112) - v27) {
    cv3d::cv::gess::mesh::Topology::AppendVertex();
  }
  unsigned int v40 = v28 >> 2;
  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) == -1)
  {
    BOOL v29 = 0;
  }
  else
  {
LABEL_29:
    if (v7 == v39)
    {
      BOOL v29 = 1;
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 104);
      unint64_t v32 = *a2 + 4 * v7 - v31;
      if (v32 >= *(void *)(a1 + 112) - v31) {
        cv3d::cv::gess::mesh::Topology::AppendVertex();
      }
      unsigned int v40 = v32 >> 2;
      BOOL v29 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) == -1;
    }
  }
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  if (v39 <= 1) {
    uint64_t v26 = 1;
  }
  do
  {
    if (v34 >= v7)
    {
      if (!v29)
      {
LABEL_44:
        BOOL v29 = 0;
        goto LABEL_45;
      }
      uint64_t v37 = *(void *)(a1 + 104);
      unint64_t v38 = v33 + *a2 - v37;
      if (v38 >= *(void *)(a1 + 112) - v37) {
        cv3d::cv::gess::mesh::Topology::AppendVertex();
      }
      unsigned int v40 = v38 >> 2;
      BOOL v29 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) == -1;
    }
    else
    {
      if (!v29) {
        goto LABEL_44;
      }
      uint64_t v35 = *(void *)(a1 + 104);
      unint64_t v36 = v33 + *a2 - v35;
      if (v36 >= *(void *)(a1 + 112) - v35) {
        cv3d::cv::gess::mesh::Topology::AppendVertex();
      }
      unsigned int v40 = v36 >> 2;
      BOOL v29 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v40) != -1;
    }
LABEL_45:
    ++v34;
    v33 += 4;
  }
  while (v26 != v34);
  if (v29)
  {
    std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)a2, v7);
    return v7 == (uint64_t)(a2[1] - *a2) >> 2;
  }
  return 0;
}

void std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_2700D88A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D88A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 104;
  unsigned int v10 = *a2;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v11, v6, &v10);
  while (1)
  {
    uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v11);
    unsigned int v10 = result;
    if (result == -1) {
      break;
    }
    *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v10) + 12) = v4;
  }
  unint64_t v8 = *(uint64_t **)(v5 + 8);
  unint64_t v9 = *(uint64_t **)(v5 + 16);
  while (v8 != v9)
  {
    uint64_t result = *v8;
    if (*v8) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 56))(result, v3, v4);
    }
    v8 += 2;
  }
  return result;
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1] - *a2;
  if (!v3) {
    return 1;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v39 = v3 >> 2;
  unint64_t v9 = (v3 >> 2) - 1;
  uint64_t v10 = a1 + 104;
  while (1)
  {
    if (v9 > v8)
    {
      uint64_t v11 = 4 * v9;
      while (1)
      {
        uint64_t v12 = *(void *)(a1 + 152);
        unint64_t v13 = v11 + *a2 - v12;
        if (v13 >= *(void *)(a1 + 160) - v12) {
          cv3d::cv::gess::mesh::Topology::AppendFace();
        }
        unsigned int v40 = v13 >> 2;
        if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) != -1) {
          break;
        }
        --v9;
        v11 -= 4;
        if (v9 <= v8)
        {
          unint64_t v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      uint64_t v14 = 4 * v8;
      unint64_t v15 = v7;
      unint64_t v16 = v8;
      while (1)
      {
        uint64_t v17 = *(void *)(a1 + 152);
        unint64_t v18 = v14 + *a2 - v17;
        if (v18 >= *(void *)(a1 + 160) - v17) {
          cv3d::cv::gess::mesh::Topology::AppendFace();
        }
        unsigned int v40 = v18 >> 2;
        if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) == -1) {
          break;
        }
        ++v16;
        ++v15;
        v14 += 4;
        if (v9 == v16)
        {
          unint64_t v7 = v9 + v7 - v8;
          goto LABEL_23;
        }
      }
      unint64_t v8 = v16;
      unint64_t v7 = v15;
    }
    if (v8 == v9) {
      break;
    }
    uint64_t v19 = *(void *)(a1 + 152);
    unint64_t v20 = *a2 + 4 * v8 - v19;
    if (v20 >= *(void *)(a1 + 160) - v19) {
      cv3d::cv::gess::mesh::Topology::AppendFace();
    }
    unsigned int v40 = v20 >> 2;
    if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) != -1) {
      return 0;
    }
    uint64_t v21 = *(void *)(a1 + 152);
    unint64_t v22 = *a2 + 4 * v9 - v21;
    if (v22 >= *(void *)(a1 + 160) - v21) {
      cv3d::cv::gess::mesh::Topology::AppendFace();
    }
    unsigned int v40 = v22 >> 2;
    if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) == -1) {
      return 0;
    }
    std::function<void ()(unsigned long,unsigned long)>::operator()(a3, v9, v8);
    int v23 = *(_DWORD *)(*a2 + 4 * v8);
    *(_DWORD *)(*a2 + 4 * v8) = *(_DWORD *)(*a2 + 4 * v9);
    *(_DWORD *)(*a2 + 4 * v9) = v23;
    ++v8;
    ++v7;
    if (v8 > v9) {
      goto LABEL_26;
    }
  }
LABEL_23:
  uint64_t v24 = *(void *)(a1 + 152);
  unint64_t v25 = *a2 + 4 * v9 - v24;
  if (v25 >= *(void *)(a1 + 160) - v24) {
    cv3d::cv::gess::mesh::Topology::AppendFace();
  }
  unsigned int v40 = v25 >> 2;
  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) != -1) {
    ++v7;
  }
LABEL_26:
  uint64_t v26 = v39;
  if (!v7) {
    goto LABEL_29;
  }
  uint64_t v27 = *(void *)(a1 + 152);
  unint64_t v28 = *a2 + 4 * v7 - v27 - 4;
  if (v28 >= *(void *)(a1 + 160) - v27) {
    cv3d::cv::gess::mesh::Topology::AppendFace();
  }
  unsigned int v40 = v28 >> 2;
  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) == -1)
  {
    BOOL v29 = 0;
  }
  else
  {
LABEL_29:
    if (v7 == v39)
    {
      BOOL v29 = 1;
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 152);
      unint64_t v32 = *a2 + 4 * v7 - v31;
      if (v32 >= *(void *)(a1 + 160) - v31) {
        cv3d::cv::gess::mesh::Topology::AppendFace();
      }
      unsigned int v40 = v32 >> 2;
      BOOL v29 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) == -1;
    }
  }
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  if (v39 <= 1) {
    uint64_t v26 = 1;
  }
  do
  {
    if (v34 >= v7)
    {
      if (!v29)
      {
LABEL_44:
        BOOL v29 = 0;
        goto LABEL_45;
      }
      uint64_t v37 = *(void *)(a1 + 152);
      unint64_t v38 = v33 + *a2 - v37;
      if (v38 >= *(void *)(a1 + 160) - v37) {
        cv3d::cv::gess::mesh::Topology::AppendFace();
      }
      unsigned int v40 = v38 >> 2;
      BOOL v29 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) == -1;
    }
    else
    {
      if (!v29) {
        goto LABEL_44;
      }
      uint64_t v35 = *(void *)(a1 + 152);
      unint64_t v36 = v33 + *a2 - v35;
      if (v36 >= *(void *)(a1 + 160) - v35) {
        cv3d::cv::gess::mesh::Topology::AppendFace();
      }
      unsigned int v40 = v36 >> 2;
      BOOL v29 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v40) != -1;
    }
LABEL_45:
    ++v34;
    v33 += 4;
  }
  while (v26 != v34);
  if (v29)
  {
    std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)a2, v7);
    return v7 == (uint64_t)(a2[1] - *a2) >> 2;
  }
  return 0;
}

void std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_2700D88F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D88F0;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 104;
  unsigned int v14 = *a2;
  unsigned int v7 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v6, &v14);
  unsigned int v13 = v7;
  do
  {
    *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v13) + 16) = v4;
    uint64_t result = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v6, &v13);
    unsigned int v9 = result[2];
    unsigned int v13 = v9;
  }
  while (v9 != -1 && v9 != v7);
  uint64_t v11 = *(_DWORD ***)(v5 + 56);
  uint64_t v12 = *(_DWORD ***)(v5 + 64);
  while (v11 != v12)
  {
    uint64_t result = *v11;
    if (*v11) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)result + 56))(result, v3, v4);
    }
    v11 += 2;
  }
  return result;
}

void *std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24F4D4E20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24F4D4E98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_24F4D5044(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_24F4D5150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F4D51C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>((char *)v3, *a2, a2[1], a2[1] - *a2);
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_24F4D522C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_24F4D5338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_24F4D5398(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_24F4D54A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>(uint64_t a1, _DWORD **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>((char *)v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_24F4D5504(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  v15 += 24;
  std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_24F4D5610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>(char *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *uint64_t v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_24F4D568C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24F4D5858(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<unsigned int>::size_type v16 = 4 * __n;
      uint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v18 = (unsigned int *)&v15[4 * v12];
    uint64_t v19 = &v18[__n];
    std::vector<unsigned int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = (unsigned int *)&v15[4 * v14];
    begiuint64_t n = this->__begin_;
    for (std::vector<unsigned int>::pointer i = this->__end_; i != begin; --i)
    {
      unsigned int v25 = *(i - 1);
      *--unint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__push_back_slow_path<cv3d::cv::gess::math::Vector4T<unsigned int> const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[16 * v4];
  long long __p = v10;
  long long v15 = v11;
  uint64_t v17 = &v10[16 * v9];
  *(_DWORD *)unint64_t v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  *((_DWORD *)v11 + 3) = a2[3];
  std::vector<unsigned int>::size_type v16 = v11 + 16;
  std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    v16 += (v15 - v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_24F4D5AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (_DWORD *)*result;
  uint64_t v2 = (_DWORD *)result[1];
  uint64_t v4 = (_DWORD *)a2[1];
  while (v2 != v3)
  {
    int v5 = *(v2 - 4);
    v2 -= 4;
    *(v4 - 4) = v5;
    v4 -= 4;
    v4[1] = v2[1];
    v4[2] = v2[2];
    v4[3] = v2[3];
  }
  a2[1] = v4;
  uint64_t v6 = (_DWORD *)*result;
  char *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::FaceHandle,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::FaceHandle const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xD0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_24F4D5CAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8938;
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)(a1 + 3));
  return a1;
}

void sub_24F4D5D08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::TriMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::TriMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8938;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::TriMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<unsigned int>>(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)a1[1];
  if ((void *)*a1 == v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = (void *)*a1;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = (void *)*a1;
    while (*v8)
    {
      v8 += 2;
      uint64_t v7 = (v7 + 1);
      if (v8 == v6) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    uint64_t v9 = (uint64_t)(a1 + 2);
    unint64_t v10 = a1[2];
    if ((unint64_t)v6 >= v10)
    {
      uint64_t v12 = ((uint64_t)v6 - v5) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v10 - v5;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      uint64_t v27 = a1 + 2;
      std::vector<unsigned int>::size_type v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      uint64_t v17 = &v16[16 * v12];
      *(void *)&long long v24 = v16;
      *((void *)&v24 + 1) = v17;
      uint64_t v26 = &v16[16 * v18];
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      unsigned int v25 = v17 + 16;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__swap_out_circular_buffer(a1, &v24);
      unint64_t v11 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)&v24);
    }
    else
    {
      unint64_t v11 = v6 + 2;
      *uint64_t v6 = 0;
      v6[1] = 0;
      a1[1] = (uint64_t)(v6 + 2);
    }
    a1[1] = (uint64_t)v11;
  }
  int v23 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, &v23, &v24);
  uint64_t v19 = *a1 + 16 * v7;
  long long v20 = v24;
  long long v24 = 0uLL;
  uint64_t v21 = *(std::__shared_weak_count **)(v19 + 8);
  *(_OWORD *)uint64_t v19 = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  return v7;
}

void sub_24F4D5F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(long long *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24F4D5F80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,0>(void *a1, long long *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8970;
  cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1 + 3, a2, a3);
  a1[3] = &unk_2700D89A8;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return a1;
}

void sub_24F4D6000(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::~AttributeT(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Reserve(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Resize(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Clear(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2) {
    operator delete(v2);
  }
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::PushBack(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  unint64_t v3 = a1[7];
  uint64_t v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = (char *)a1[5];
    uint64_t v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = v3 - (void)v6;
    unint64_t v9 = (uint64_t)(v3 - (void)v6) >> 2;
    if (v9 <= v7 + 1) {
      unint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v10);
      uint64_t v6 = (char *)a1[5];
      uint64_t v4 = (char *)a1[6];
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    *(void *)uint64_t v12 = 0;
    uint64_t v5 = v12 + 8;
    while (v4 != v6)
    {
      int v14 = *((_DWORD *)v4 - 2);
      v4 -= 8;
      *((_DWORD *)v12 - 2) = v14;
      v12 -= 8;
      *((_DWORD *)v12 + 1) = *((_DWORD *)v4 + 1);
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)uint64_t v4 = 0;
    uint64_t v5 = v4 + 8;
  }
  a1[6] = v5;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  double result = *(double *)(v3 + 8 * a2);
  *(void *)(v3 + 8 * a2) = *(void *)(v3 + 8 * a3);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  double result = *(double *)(v3 + 8 * a2);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Clone()
{
}

void sub_24F4D629C(_Unwind_Exception *a1)
{
  MEMORY[0x25335EA10](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::MemoryConsumption(uint64_t a1)
{
  return *(void *)(a1 + 56) - *(void *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  *(void *)this = &unk_2700D89A8;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[8 * v8];
    unint64_t v10 = *a1;
    unint64_t v11 = a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *(v11 - 2);
        v11 -= 2;
        *((_DWORD *)v12 - 2) = v13;
        v12 -= 8;
        *((_DWORD *)v12 + 1) = v11[1];
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__append((uint64_t)a1, a2 - v2);
  }
}

void std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(_DWORD **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 2 * a2;
    }
    *(void *)(a1 + 8) = v7;
  }
  else
  {
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = (uint64_t)v7 - *(void *)a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - (void)v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      uint64_t v8 = *(_DWORD **)a1;
      uint64_t v7 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      int v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    std::vector<unsigned int>::size_type v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      int v18 = *(v7 - 2);
      v7 -= 2;
      *((_DWORD *)v15 - 2) = v18;
      v15 -= 8;
      *((_DWORD *)v15 + 1) = v7[1];
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, const cv3d::cv::gess::mesh::BaseAttribute *a2)
{
  uint64_t v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, a2);
  *(void *)uint64_t v4 = &unk_2700D89A8;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>((char *)v4 + 40, *((_DWORD **)a2 + 5), *((_DWORD **)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  return a1;
}

void sub_24F4D6590(_Unwind_Exception *a1)
{
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_24F4D660C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

void std::deque<unsigned int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<unsigned int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24F4D6A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::remove(a1, a2, (uint64_t)&__p);
  BOOL v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_24F4D6E50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(a1, a2);
  if (result)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)(a2 + 6), (void *)a2[7]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x48uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((void *)v11 + 8) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = v11 + 14;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t cv3d::cv::gess::internal::FaceNormal(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x4_t v4 = (int32x4_t)vsubq_f32(*a2, *a1);
  int32x4_t v5 = (int32x4_t)vsubq_f32(*a3, *a1);
  float32x4_t v6 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL)), v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL), v5)), (float32x4_t)vzip2q_s32(vzip1q_s32(v5, (int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL)), v5), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 4uLL), v4));
  float32x4_t v7 = vmulq_f32(v6, v6);
  v7.i32[3] = 0;
  float32x2_t v8 = (float32x2_t)vpaddq_f32(v7, v7).u64[0];
  v8.f32[0] = sqrtf(vaddv_f32(v8));
  if (v8.f32[0] <= 0.0) {
    float32x4_t v9 = (float32x4_t)xmmword_24F570A10;
  }
  else {
    float32x4_t v9 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32((int32x2_t)v8, 0));
  }
  *a4 = v9;
  return 1;
}

uint64_t cv3d::cv::gess::internal::ClassifyAndCollapseEdges(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, const float *a5, _DWORD *a6, uint64_t *a7, void *a8, float32x4_t *a9, _DWORD *a10, _DWORD *a11)
{
  *a10 = 0;
  *a11 = 0;
  v571[0] = 1.0;
  if (*a5 > 0.00000001) {
    v571[0] = 1.0 / *a5;
  }
  unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  LOBYTE(v565) = 0;
  std::vector<BOOL>::vector(&v570, v13, (unsigned __int8 *)&v565);
  v568 = 0;
  long long v569 = 0uLL;
  uint64_t v14 = a1 + 104;
  unint64_t v15 = (float)((float)(unint64_t)((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2)
                            * 2.5);
  if (v15)
  {
    std::__split_buffer<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge,std::allocator<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &>::__split_buffer(&v565, v15, 0, (uint64_t)&v569 + 8);
    unint64_t v17 = v568;
    unint64_t v16 = (char *)v569;
    size_t v18 = v566;
    if ((char *)v569 == v568)
    {
      int64_t v20 = (char *)v569;
    }
    else
    {
      do
      {
        long long v19 = *(_OWORD *)(v16 - 20);
        *((_DWORD *)v18 - 1) = *((_DWORD *)v16 - 1);
        *(_OWORD *)(v18 - 20) = v19;
        v18 -= 20;
        v16 -= 20;
      }
      while (v16 != v17);
      int64_t v20 = v568;
      unint64_t v16 = (char *)v569;
    }
    v568 = v18;
    uint64_t v21 = *((void *)&v569 + 1);
    long long v569 = v567;
    *(void *)&long long v567 = v16;
    *((void *)&v567 + 1) = v21;
    v565 = v20;
    v566 = v20;
    if (v16 != v20) {
      *(void *)&long long v567 = &v20[(v16 - v20 - 20) % 0x14uLL];
    }
    if (v20) {
      operator delete(v20);
    }
  }
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a7);
  std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::resize(a7, (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  v533 = a7;
  v534 = a6;
  uint64_t v22 = a1;
  uint64_t v24 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 136);
  if (v23 != v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = 0;
    v549 = (uint64_t *)(a1 + 8);
    v536 = (uint64_t *)(a1 + 32);
    while (1)
    {
      unint64_t v27 = v25 >> 6;
      uint64_t v28 = 1 << v25;
      uint64_t v29 = v570[v25 >> 6];
      if ((v29 & (1 << v25)) == 0) {
        break;
      }
LABEL_85:
      unint64_t v25 = ++v26;
      if (0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 2) <= v26) {
        goto LABEL_86;
      }
    }
    v570[v27] = v29 | v28;
    LODWORD(v565) = v26;
    long long v30 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v565);
    *(void *)((char *)v570 + (((unint64_t)*v30 >> 3) & 0x1FFFFFF8)) |= 1 << *v30;
    LODWORD(v565) = v26;
    LODWORD(v31) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v565) + 12);
    LODWORD(v565) = v26;
    long long v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v565);
    unsigned int v33 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v14, v32) + 12);
    if (v31 <= v33) {
      unint64_t v34 = v33;
    }
    else {
      unint64_t v34 = v31;
    }
    if (v31 >= v33) {
      unint64_t v31 = v33;
    }
    else {
      unint64_t v31 = v31;
    }
    *(_OWORD *)&__x.__begin_ = 0u;
    uint64_t v35 = *a3;
    uint64_t v36 = *a3 + 16 * v31;
    uint64_t v37 = *a2;
    uint64_t v38 = *a2 + 16 * v31;
    *(_OWORD *)v561 = 0u;
    v559[0] = 0;
    v558[0] = 0;
    cv3d::cv::gess::internal::CompatOrientationExtrinsic4(v36, v38, v35 + 16 * v34, v37 + 16 * v34, &__x, v561, (int8x16_t)0);
    LODWORD(__p[0]) = 0;
    LODWORD(v565) = *(_DWORD *)(v22 + 176);
    uint64_t v39 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v549, (unsigned int *)&v565);
    uint64_t v40 = *(void *)(v39 + 40);
    if (v31 >= (*(void *)(v39 + 48) - v40) >> 4
      || (uint64_t v41 = *a2,
          uint64_t v42 = *a4,
          LODWORD(v565) = *(_DWORD *)(a1 + 176),
          v43 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v549, (unsigned int *)&v565), uint64_t v44 = *(void *)(v43 + 40), v34 >= (*(void *)(v43 + 48) - v44) >> 4))
    {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    cv3d::cv::gess::internal::CompatPositionExtrinsicIndex4((float32x4_t *)(v40 + 16 * v31), (int32x4_t *)(v41 + 16 * v31), (int32x4_t *)&__x, (float32x4_t *)(v42 + 16 * v31), (float32x4_t *)(v44 + 16 * v34), (int32x4_t *)(*a2 + 16 * v34), (int32x4_t *)v561, (float32x4_t *)(*a4 + 16 * v34), a5, v571, (float *)__p, v559, v558);
    int32x2_t v45 = vabd_s32((int32x2_t)v559[0], (int32x2_t)v558[0]);
    int32x2_t v46 = vceq_s32(v45, (int32x2_t)0x100000001);
    if (v45.i32[0] <= (unsigned __int32)v45.i32[1]) {
      unsigned int v47 = v45.u32[1];
    }
    else {
      unsigned int v47 = v45.i32[0];
    }
    unsigned __int8 v48 = vand_s8((int8x8_t)v46, (int8x8_t)vdup_lane_s32(v46, 1)).u8[0];
    if (v47 <= 1)
    {
      uint64_t v22 = a1;
      if ((v48 & 1) == 0)
      {
        if (v45.i32[0] + v45.i32[1])
        {
          uint64_t v56 = (char **)(*v533 + 24 * v31);
          uint64_t v58 = v56 + 1;
          float v57 = (unint64_t *)v56[1];
          int64_t v60 = v56 + 2;
          unint64_t v59 = (unint64_t)v56[2];
          if ((unint64_t)v57 >= v59)
          {
            uint64_t v62 = ((char *)v57 - *v56) >> 3;
            if ((unint64_t)(v62 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v63 = v59 - (void)*v56;
            uint64_t v64 = v63 >> 2;
            if (v63 >> 2 <= (unint64_t)(v62 + 1)) {
              uint64_t v64 = v62 + 1;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65) {
              int v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v60, v65);
            }
            else {
              int v66 = 0;
            }
            uint64_t v77 = &v66[8 * v62];
            *(void *)uint64_t v77 = v34;
            int64_t v61 = v77 + 8;
            unint64_t v78 = *v58;
            float v79 = *v56;
            if (*v58 != *v56)
            {
              do
              {
                int v80 = *((_DWORD *)v78 - 2);
                v78 -= 8;
                __int16 v81 = *((_WORD *)v78 + 2);
                *((_DWORD *)v77 - 2) = v80;
                v77 -= 8;
                *((_WORD *)v77 + 2) = v81;
              }
              while (v78 != v79);
              unint64_t v78 = *v56;
            }
            *uint64_t v56 = v77;
            unsigned char *v58 = v61;
            *int64_t v60 = &v66[8 * v65];
            if (v78) {
              operator delete(v78);
            }
          }
          else
          {
            *float v57 = v34;
            int64_t v61 = (char *)(v57 + 1);
          }
          unsigned char *v58 = v61;
          uint64_t v82 = (char **)(*v533 + 24 * v34);
          float v84 = v82 + 1;
          float v83 = (unint64_t *)v82[1];
          uint64_t v86 = v82 + 2;
          unint64_t v85 = (unint64_t)v82[2];
          if ((unint64_t)v83 >= v85)
          {
            uint64_t v88 = ((char *)v83 - *v82) >> 3;
            if ((unint64_t)(v88 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v89 = v85 - (void)*v82;
            uint64_t v90 = v89 >> 2;
            if (v89 >> 2 <= (unint64_t)(v88 + 1)) {
              uint64_t v90 = v88 + 1;
            }
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v91 = v90;
            }
            if (v91) {
              float32x4_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v86, v91);
            }
            else {
              float32x4_t v92 = 0;
            }
            float32x4_t v93 = &v92[8 * v88];
            *(void *)float32x4_t v93 = v31;
            uint64_t v87 = v93 + 8;
            float32x4_t v94 = *v84;
            unint64_t v95 = *v82;
            if (*v84 != *v82)
            {
              do
              {
                int v96 = *((_DWORD *)v94 - 2);
                v94 -= 8;
                __int16 v97 = *((_WORD *)v94 + 2);
                *((_DWORD *)v93 - 2) = v96;
                v93 -= 8;
                *((_WORD *)v93 + 2) = v97;
              }
              while (v94 != v95);
              float32x4_t v94 = *v82;
            }
            *uint64_t v82 = v93;
            *float v84 = v87;
            *uint64_t v86 = &v92[8 * v91];
            if (v94) {
              operator delete(v94);
            }
          }
          else
          {
            unint64_t *v83 = v31;
            uint64_t v87 = (char *)(v83 + 1);
          }
          *float v84 = v87;
        }
        else
        {
          v564.__begin_ = (std::vector<unsigned int>::pointer)(v26 | 0xFFFFFFFF00000000);
          int v52 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v564);
          LODWORD(v564.__end_cap_.__value_) = __p[0];
          HIDWORD(v564.__begin_) = v52;
          v564.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(v34, v31);
          float v53 = (_OWORD *)v569;
          if ((unint64_t)v569 >= *((void *)&v569 + 1))
          {
            uint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v569 - (void)v568) >> 2);
            unint64_t v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) > 0xCCCCCCCCCCCCCCCLL) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((uint64_t)(*((void *)&v569 + 1) - (void)v568) >> 2) > v68) {
              unint64_t v68 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v569 + 1) - (void)v568) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v569 + 1) - (void)v568) >> 2) >= 0x666666666666666) {
              unint64_t v69 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v69 = v68;
            }
            std::__split_buffer<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge,std::allocator<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &>::__split_buffer(&v565, v69, v67, (uint64_t)&v569 + 8);
            uint64_t v70 = (_OWORD *)v567;
            long long v71 = *(_OWORD *)&v564.__begin_;
            *(_DWORD *)(v567 + 16) = v564.__end_cap_.__value_;
            _OWORD *v70 = v71;
            uint64_t v72 = v566;
            long long v55 = (char *)(v567 + 20);
            *(void *)&long long v567 = v567 + 20;
            unint64_t v74 = v568;
            unint64_t v73 = (char *)v569;
            if ((char *)v569 == v568)
            {
              uint64_t v76 = (char *)v569;
            }
            else
            {
              do
              {
                long long v75 = *(_OWORD *)(v73 - 20);
                *((_DWORD *)v72 - 1) = *((_DWORD *)v73 - 1);
                *(_OWORD *)(v72 - 20) = v75;
                v72 -= 20;
                v73 -= 20;
              }
              while (v73 != v74);
              uint64_t v76 = v568;
              unint64_t v73 = (char *)v569;
              long long v55 = (char *)v567;
            }
            v568 = v72;
            *(void *)&long long v569 = v55;
            uint64_t v98 = *((void *)&v569 + 1);
            *((void *)&v569 + 1) = *((void *)&v567 + 1);
            *(void *)&long long v567 = v73;
            *((void *)&v567 + 1) = v98;
            v565 = v76;
            v566 = v76;
            if (v73 != v76) {
              *(void *)&long long v567 = &v73[-20 - 20 * ((v73 - v76 - 20) / 0x14uLL)];
            }
            if (v76) {
              operator delete(v76);
            }
          }
          else
          {
            long long v54 = *(_OWORD *)&v564.__begin_;
            *(_DWORD *)(v569 + 16) = v564.__end_cap_.__value_;
            *float v53 = v54;
            long long v55 = (char *)v53 + 20;
          }
          *(void *)&long long v569 = v55;
        }
        goto LABEL_84;
      }
    }
    else
    {
      uint64_t v22 = a1;
      if ((v48 & 1) == 0)
      {
LABEL_84:
        uint64_t v24 = *(void *)(v22 + 128);
        uint64_t v23 = *(void *)(v22 + 136);
        goto LABEL_85;
      }
    }
    LODWORD(v565) = *v534;
    uint64_t v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v536, (unsigned int *)&v565);
    if (*(void *)(v49 + 48) <= v25) {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    *(void *)(*(void *)(v49 + 40) + 8 * v27) |= v28;
    LODWORD(v565) = *v534;
    uint64_t v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v536, (unsigned int *)&v565);
    LODWORD(v565) = v26;
    unint64_t v51 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v565);
    if (*(void *)(v50 + 48) <= v51) {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    *(void *)(*(void *)(v50 + 40) + ((v51 >> 3) & 0x1FFFFFF8)) |= 1 << v51;
    goto LABEL_84;
  }
LABEL_86:
  unint64_t v99 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v569 - (void)v568) >> 2));
  if ((char *)v569 == v568) {
    uint64_t v100 = 0;
  }
  else {
    uint64_t v100 = v99;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*,false>((unint64_t)v568, v569, v100, 1);
  cv3d::cv::gess::internal::DisjointSets<unsigned int>::DisjointSets((std::vector<unsigned int> *)&v565, (*(void *)(v22 + 112) - *(void *)(v22 + 104)) >> 2);
  std::vector<unsigned int>::size_type v101 = (uint64_t)(*(void *)(v22 + 112) - *(void *)(v22 + 104)) >> 2;
  LODWORD(__x.__begin_) = 0;
  std::vector<unsigned int>::vector(&v564, v101, (const std::vector<unsigned int>::value_type *)&__x);
  __x.__end_ = 0;
  __x.__end_cap_.__value_ = 0;
  __x.__begin_ = (std::vector<unsigned int>::pointer)&__x.__end_;
  unint64_t v103 = v568;
  uint64_t v102 = v569;
  uint64_t v104 = v533;
  if ((char *)v569 == v568)
  {
    std::vector<unsigned int>::pointer end = 0;
  }
  else
  {
    uint64_t v105 = 0;
    unsigned int v106 = 0;
    do
    {
      uint64_t v107 = &v103[20 * v105];
      unsigned int v110 = *((_DWORD *)v107 + 2);
      std::vector<unsigned int>::pointer v109 = (unsigned int *)(v107 + 8);
      uint64_t v108 = v110;
      uint64_t v111 = (uint64_t)v565;
      uint64_t v112 = v110;
      do
      {
        uint64_t v113 = v112;
        uint64_t v112 = *(unsigned int *)&v565[4 * v112];
      }
      while (v113 != v112);
      *(_DWORD *)&v565[4 * v108] = v113;
      *std::vector<unsigned int>::pointer v109 = v113;
      float32x4_t v114 = &v103[20 * v105];
      unsigned int v117 = *((_DWORD *)v114 + 3);
      int32x2_t v116 = (unsigned int *)(v114 + 12);
      uint64_t v115 = v117;
      uint64_t v118 = v117;
      do
      {
        uint64_t v119 = v118;
        uint64_t v118 = *(unsigned int *)(v111 + 4 * v118);
      }
      while (v119 != v118);
      *(_DWORD *)(v111 + 4 * v115) = v119;
      *int32x2_t v116 = v119;
      uint64_t v120 = *v109;
      if (v120 != v119)
      {
        uint64_t v121 = *v104 + 24 * v120;
        std::vector<unsigned int>::pointer v122 = *(unsigned int **)v121;
        long long v123 = *(unsigned int **)(v121 + 8);
        while (v122 != v123)
        {
          uint64_t v124 = *v122;
          do
          {
            uint64_t v125 = v124;
            uint64_t v124 = *(unsigned int *)(v111 + 4 * v124);
          }
          while (v125 != v124);
          *(_DWORD *)(v111 + 4 * *v122) = v125;
          if (v125 == *v116) {
            goto LABEL_140;
          }
          v122 += 2;
        }
        std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&__x, (void *)__x.__end_);
        __x.__end_ = 0;
        __x.__end_cap_.__value_ = 0;
        __x.__begin_ = (std::vector<unsigned int>::pointer)&__x.__end_;
        uint64_t v126 = *v104;
        uint64_t v127 = *v104 + 24 * *v109;
        unsigned int v128 = *(unsigned int **)v127;
        unint64_t v129 = *(unsigned int **)(v127 + 8);
        if (*(unsigned int **)v127 != v129)
        {
          do
          {
            uint64_t v130 = *v128;
            do
            {
              uint64_t v131 = v130;
              uint64_t v130 = *(unsigned int *)&v565[4 * v130];
            }
            while (v131 != v130);
            *(_DWORD *)&v565[4 * *v128] = v131;
            v561[0] = v131;
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&__x, v561, v561);
            v128 += 2;
          }
          while (v128 != v129);
          uint64_t v126 = *v104;
        }
        unsigned int v132 = *v116;
        unint64_t v133 = (unsigned int **)(v126 + 24 * *v116);
        uint64_t v135 = *v133;
        unint64_t v134 = v133[1];
        unsigned int v550 = v106;
        if (*v133 != v134)
        {
          do
          {
            uint64_t v136 = *v135;
            do
            {
              uint64_t v137 = v136;
              uint64_t v136 = *(unsigned int *)&v565[4 * v136];
            }
            while (v137 != v136);
            *(_DWORD *)&v565[4 * *v135] = v137;
            v561[0] = v137;
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&__x, v561, v561);
            v135 += 2;
          }
          while (v135 != v134);
          unsigned int v132 = *v116;
          uint64_t v126 = *v104;
          uint64_t v135 = *(unsigned int **)(*v104 + 24 * *v116);
        }
        unsigned int v138 = *v109;
        if (*v109 >= v132) {
          uint64_t v139 = v132;
        }
        else {
          uint64_t v139 = v138;
        }
        *(void *)(v126 + 24 * v138 + 8) = *(void *)(v126 + 24 * v138);
        *(void *)(v126 + 24 * v132 + 8) = v135;
        std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve((char **)(v126 + 24 * v139), (unint64_t)__x.__end_cap_.__value_);
        begiuint64_t n = __x.__begin_;
        if ((std::vector<unsigned int>::pointer *)__x.__begin_ != &__x.__end_)
        {
          do
          {
            float v141 = (char **)(*v104 + 24 * v139);
            uint64_t v142 = begin[7];
            uint64_t v143 = v141 + 1;
            float v144 = v141[1];
            unsigned int v146 = v141 + 2;
            unint64_t v145 = (unint64_t)v141[2];
            if ((unint64_t)v144 >= v145)
            {
              uint64_t v148 = (v144 - *v141) >> 3;
              if ((unint64_t)(v148 + 1) >> 61) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v149 = v145 - (void)*v141;
              uint64_t v150 = v149 >> 2;
              if (v149 >> 2 <= (unint64_t)(v148 + 1)) {
                uint64_t v150 = v148 + 1;
              }
              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151) {
                float32x4_t v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v146, v151);
              }
              else {
                float32x4_t v152 = 0;
              }
              float32x4_t v153 = &v152[8 * v148];
              *(void *)float32x4_t v153 = v142;
              v147 = v153 + 8;
              v154 = *v143;
              unsigned int v155 = *v141;
              if (*v143 != *v141)
              {
                do
                {
                  int v156 = *((_DWORD *)v154 - 2);
                  v154 -= 8;
                  __int16 v157 = *((_WORD *)v154 + 2);
                  *((_DWORD *)v153 - 2) = v156;
                  v153 -= 8;
                  *((_WORD *)v153 + 2) = v157;
                }
                while (v154 != v155);
                v154 = *v141;
              }
              *float v141 = v153;
              *uint64_t v143 = v147;
              *unsigned int v146 = &v152[8 * v151];
              if (v154) {
                operator delete(v154);
              }
              uint64_t v104 = v533;
            }
            else
            {
              *(void *)float v144 = v142;
              v147 = v144 + 8;
              uint64_t v104 = v533;
            }
            *uint64_t v143 = v147;
            unsigned int v158 = (std::vector<unsigned int> *)*((void *)begin + 1);
            if (v158)
            {
              do
              {
                v159 = v158;
                unsigned int v158 = (std::vector<unsigned int> *)v158->__begin_;
              }
              while (v158);
            }
            else
            {
              do
              {
                v159 = (std::vector<unsigned int> *)*((void *)begin + 2);
                BOOL v160 = v159->__begin_ == begin;
                begiuint64_t n = (std::vector<unsigned int>::pointer)v159;
              }
              while (!v160);
            }
            begiuint64_t n = (std::vector<unsigned int>::pointer)v159;
          }
          while (v159 != (std::vector<unsigned int> *)&__x.__end_);
        }
        v564.__begin_[v139] = v564.__begin_[*v109] + v564.__begin_[*v116] + 1;
        std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit(*v104 + 24 * *v109);
        std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit(*v104 + 24 * *v116);
        cv3d::cv::gess::internal::DisjointSets<unsigned int>::Unite((uint64_t *)&v565, *v109, *v116);
        uint64_t v102 = v569;
        unsigned int v106 = v550;
      }
LABEL_140:
      unint64_t v103 = v568;
      uint64_t v105 = ++v106;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v102 - (uint64_t)v568) >> 2) > v106);
    std::vector<unsigned int>::pointer end = __x.__end_;
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&__x, end);
  std::vector<unsigned int>::size_type v162 = 0xAAAAAAAAAAAAAAABLL * ((v104[1] - *v104) >> 3);
  v561[0] = -1;
  std::vector<unsigned int>::vector(&__x, v162, v561);
  uint64_t v163 = *v104;
  uint64_t v164 = v104[1];
  if (v164 == *v104)
  {
    unsigned int v166 = 0;
    float v167 = 0.0;
  }
  else
  {
    uint64_t v165 = 0;
    unsigned int v166 = 0;
    float v167 = 0.0;
    unsigned int v168 = 1;
    do
    {
      uint64_t v169 = (void *)(v163 + 24 * v165);
      uint64_t v170 = v169[1];
      if (*v169 != v170)
      {
        if (v168 - 1 == v166)
        {
          std::vector<unsigned int>::pointer v171 = v564.__begin_;
        }
        else
        {
          uint64_t v172 = v163 + 24 * v166;
          long long v173 = *(_OWORD *)v172;
          *(void *)uint64_t v172 = *v169;
          *(void *)(v172 + 8) = v170;
          *(_OWORD *)uint64_t v169 = v173;
          uint64_t v174 = v163 + 24 * v165;
          uint64_t v175 = *(void *)(v172 + 16);
          *(void *)(v172 + 16) = *(void *)(v174 + 16);
          *(void *)(v174 + 16) = v175;
          std::vector<unsigned int>::pointer v171 = v564.__begin_;
          LODWORD(v174) = v564.__begin_[v166];
          v564.__begin_[v166] = v564.__begin_[v165];
          v171[v165] = v174;
          uint64_t v163 = *v104;
          uint64_t v164 = v104[1];
        }
        float v167 = v167 + (float)v171[v166];
        __x.__begin_[v165] = v166++;
      }
      uint64_t v165 = v168;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v164 - v163) >> 3) > v168++);
  }
  unint64_t v177 = v166;
  std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::resize(v104, v166);
  std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::shrink_to_fit((uint64_t)v104);
  unsigned int v178 = v177;
  unint64_t v527 = v177;
  if (v177)
  {
    uint64_t v179 = 0;
    float v167 = v167 / (float)v178;
    *(void *)&v561[2] = 0;
    unint64_t v562 = 0;
    *(void *)v561 = &v561[2];
    do
    {
      std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)v561, *(void **)&v561[2]);
      *(void *)&v561[2] = 0;
      unint64_t v562 = 0;
      *(void *)v561 = &v561[2];
      uint64_t v180 = *v533 + 24 * v179;
      int v181 = *(unsigned int **)v180;
      unsigned int v182 = *(unsigned int **)(v180 + 8);
      if (*(unsigned int **)v180 == v182)
      {
        unint64_t v185 = 0;
      }
      else
      {
        do
        {
          uint64_t v183 = *v181;
          do
          {
            uint64_t v184 = v183;
            uint64_t v183 = *(unsigned int *)&v565[4 * v183];
          }
          while (v184 != v183);
          *(_DWORD *)&v565[4 * *v181] = v184;
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)v561, &__x.__begin_[v184], &__x.__begin_[v184]);
          v181 += 2;
        }
        while (v181 != v182);
        unint64_t v185 = v562;
      }
      v559[0] = 0;
      v559[1] = 0;
      v560 = 0;
      std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve((char **)v559, v185);
      unsigned int v186 = *(std::vector<unsigned int>::value_type **)v561;
      if (*(std::vector<unsigned int>::value_type **)v561 != &v561[2])
      {
        unsigned int v187 = (char *)v559[1];
        do
        {
          uint64_t v188 = v186[7];
          if (v187 >= v560)
          {
            uint64_t v189 = (v187 - (char *)v559[0]) >> 3;
            if ((unint64_t)(v189 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v190 = (v560 - (char *)v559[0]) >> 2;
            if (v190 <= v189 + 1) {
              unint64_t v190 = v189 + 1;
            }
            if ((unint64_t)(v560 - (char *)v559[0]) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v191 = v190;
            }
            if (v191) {
              v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v560, v191);
            }
            else {
              v192 = 0;
            }
            v193 = &v192[8 * v189];
            *(void *)v193 = v188;
            unsigned int v187 = v193 + 8;
            v195 = v559[0];
            v194 = v559[1];
            if (v559[1] != v559[0])
            {
              do
              {
                int v196 = *((_DWORD *)v194 - 2);
                v194 -= 4;
                __int16 v197 = v194[2];
                *((_DWORD *)v193 - 2) = v196;
                v193 -= 8;
                *((_WORD *)v193 + 2) = v197;
              }
              while (v194 != v195);
              v194 = v559[0];
            }
            v559[0] = v193;
            v559[1] = v187;
            v560 = &v192[8 * v191];
            if (v194) {
              operator delete(v194);
            }
          }
          else
          {
            *(void *)unsigned int v187 = v188;
            v187 += 8;
          }
          v559[1] = v187;
          v198 = (std::vector<unsigned int>::value_type *)*((void *)v186 + 1);
          if (v198)
          {
            do
            {
              v199 = v198;
              v198 = *(std::vector<unsigned int>::value_type **)v198;
            }
            while (v198);
          }
          else
          {
            do
            {
              v199 = (std::vector<unsigned int>::value_type *)*((void *)v186 + 2);
              BOOL v160 = *(void *)v199 == (void)v186;
              unsigned int v186 = v199;
            }
            while (!v160);
          }
          unsigned int v186 = v199;
        }
        while (v199 != &v561[2]);
      }
      uint64_t v200 = *v533;
      uint64_t v201 = *v533 + 24 * v179;
      v202 = *(void **)v201;
      if (*(void *)v201)
      {
        *(void *)(v200 + 24 * v179 + 8) = v202;
        operator delete(v202);
        *(void *)uint64_t v201 = 0;
        *(void *)(v201 + 8) = 0;
        *(void *)(v201 + 16) = 0;
      }
      *(_OWORD *)uint64_t v201 = *(_OWORD *)v559;
      *(void *)(v200 + 24 * v179++ + 16) = v560;
    }
    while (v179 != v527);
    uint64_t v104 = v533;
  }
  else
  {
    *(void *)&v561[2] = 0;
    unint64_t v562 = 0;
    *(void *)v561 = &v561[2];
  }
  uint64_t v203 = *v104;
  uint64_t v204 = v104[1];
  if (v204 != *v104)
  {
    uint64_t v205 = 0;
    unsigned int v206 = 0;
    double v207 = v167;
    double v208 = v167 * 0.1;
    do
    {
      LODWORD(v207) = v564.__begin_[v205];
      double v207 = (double)*(unint64_t *)&v207;
      if (v208 >= v207)
      {
        v209 = (unsigned int **)(v203 + 24 * v205);
        v210 = *v209;
        v211 = v209[1];
        if (*v209 != v211)
        {
          do
          {
            v212 = (uint64_t *)(*v104 + 24 * *v210);
            uint64_t v213 = *v212;
            v216 = (int *)v212[1];
            v215 = (int **)(v212 + 1);
            v214 = v216;
            while ((int *)v213 != v214)
            {
              if (*(_DWORD *)v213 == v206)
              {
                if ((int *)v213 != v214)
                {
                  v217 = (int *)(v213 + 8);
                  if ((int *)(v213 + 8) != v214)
                  {
                    do
                    {
                      if (*v217 != v206)
                      {
                        int v218 = *v217;
                        *(_WORD *)(v213 + 4) = *((_WORD *)v217 + 2);
                        *(_DWORD *)uint64_t v213 = v218;
                        v213 += 8;
                      }
                      v217 += 2;
                    }
                    while (v217 != v214);
                    v214 = *v215;
                  }
                }
                if ((int *)v213 != v214) {
                  *v215 = (int *)v213;
                }
                break;
              }
              v213 += 8;
            }
            v210 += 2;
            uint64_t v104 = v533;
          }
          while (v210 != v211);
          uint64_t v203 = *v533;
          uint64_t v204 = v533[1];
          v210 = *(unsigned int **)(*v533 + 24 * v205);
        }
        *(void *)(v203 + 24 * v205 + 8) = v210;
      }
      uint64_t v205 = ++v206;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v204 - v203) >> 3) > v206);
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v559, (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
  {
    unint64_t v219 = 0;
    unsigned int v220 = 1;
    do
    {
      LODWORD(v558[0]) = *(_DWORD *)(a1 + 176);
      uint64_t v221 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v558);
      uint64_t v222 = *(void *)(v221 + 40);
      if (v219 >= (*(void *)(v221 + 48) - v222) >> 4) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *((_OWORD *)v559[0] + v219) = *(_OWORD *)(v222 + 16 * v219);
      unint64_t v219 = v220++;
    }
    while (v219 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  }
  a9->i64[1] = a9->i64[0];
  v558[0] = 0;
  v558[1] = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a9, v527, v558);
  a8[1] = *a8;
  v558[0] = 0;
  v558[1] = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a8, v527, v558);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v558, v527, __p);
  uint64_t v224 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
  if (v224)
  {
    uint64_t v225 = 0;
    unsigned int v226 = 0;
    unint64_t v227 = v224 >> 2;
    uint64_t v228 = (uint64_t)v565;
    std::vector<unsigned int>::pointer v229 = __x.__begin_;
    uint64_t v230 = *a4;
    uint64_t v541 = a9->i64[0];
    v544 = (float32x4_t *)v559[0];
    uint64_t v539 = *a8;
    uint64_t v231 = *a2;
    v232 = (float *)v558[0];
    do
    {
      unsigned int v233 = v226;
      do
      {
        unsigned int v234 = v233;
        unsigned int v233 = *(_DWORD *)(v228 + 4 * v233);
      }
      while (v234 != v233);
      *(_DWORD *)(v228 + 4 * v225) = v234;
      uint64_t v235 = v229[v234];
      if (v235 != -1)
      {
        if (v235 >= v527) {
          __assert_rtn("ClassifyAndCollapseEdges", "QuadExtract.cpp", 393, "j < num_vertices");
        }
        float32x4_t v236 = vsubq_f32(*(float32x4_t *)(v230 + 16 * v225), v544[v225]);
        float32x4_t v237 = vmulq_f32(v236, v236);
        v237.i32[3] = 0;
        float v238 = expf((float)(v571[0] * (float)(v571[0] * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v237, v237)))) * -9.0);
        for (uint64_t i = 0; i != 12; i += 4)
        {
          *(float *)(v541 + 16 * v235 + i) = *(float *)(v541 + 16 * v235 + i)
                                           + (float)(*(float *)(v230 + 16 * v226 + i) * v238);
          *(float *)(v539 + 16 * v235 + i) = *(float *)(v539 + 16 * v235 + i)
                                           + (float)(*(float *)(v231 + 16 * v226 + i) * v238);
        }
        v232[v235] = v238 + v232[v235];
      }
      uint64_t v225 = ++v226;
    }
    while (v227 > v226);
  }
  v240 = v533;
  if (v527)
  {
    for (uint64_t j = 0; j != v527; ++j)
    {
      v223.i32[0] = *((_DWORD *)v558[0] + j);
      if (v223.f32[0] >= 0.00000001)
      {
        *(float32x4_t *)(a9->i64[0] + 16 * j) = vdivq_f32(*(float32x4_t *)(a9->i64[0] + 16 * j), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v223.f32, 0));
        float32x4_t v223 = *(float32x4_t *)(*a8 + 16 * j);
        float32x4_t v242 = vmulq_f32(v223, v223);
        v242.i32[3] = 0;
        float32x4_t v243 = vpaddq_f32(v242, v242);
        float32x4_t v244 = vpaddq_f32(v243, v243);
        float32x4_t v245 = (float32x4_t)xmmword_24F570A10;
        if (v244.f32[0] > 0.0) {
          float32x4_t v245 = vdivq_f32(v223, vsqrtq_f32(v244));
        }
        *(float32x4_t *)(*a8 + 16 * j) = v245;
      }
    }
  }
  int v532 = 0;
  int v528 = 0;
  do
  {
    char v530 = 0;
    do
    {
      float v246 = *a5 * 0.3;
      __p[0] = 0;
      __p[1] = 0;
      v557[0] = 0;
      v248 = (unsigned int **)*v240;
      uint64_t v247 = v240[1];
      if (v247 == *v240)
      {
        v249 = 0;
        v293 = 0;
      }
      else
      {
        v249 = 0;
        uint64_t v250 = 0;
        unsigned int v251 = 0;
        v252 = (uint64_t *)a9;
        do
        {
          v253 = &v248[3 * v250];
          v254 = v253[1];
          v535 = v253 + 1;
          v537 = v253;
          v255 = *v253;
          if (v254 != *v253)
          {
            unint64_t v256 = 0;
            int v257 = 0;
            uint64_t v258 = *v252;
            do
            {
              int v547 = v257;
              uint64_t v259 = v255[2 * v256];
              v260 = (void *)(*v240 + 24 * v259);
              v262 = v260 + 1;
              uint64_t v261 = v260[1];
              uint64_t v263 = *v260;
              if (v261 != *v260)
              {
                uint64_t v264 = 0;
                unsigned int v265 = 0;
                uint64_t v266 = *v252;
                v542 = v260 + 1;
                v545 = v260;
                do
                {
                  uint64_t v267 = *(unsigned int *)(v263 + 8 * v264);
                  if (v267 != v251)
                  {
                    float32x4_t v268 = *(float32x4_t *)(*v252 + 16 * v267);
                    float32x4_t v269 = *(float32x4_t *)(v266 + 16 * v259);
                    float32x4_t v270 = vsubq_f32(v269, v268);
                    float32x4_t v271 = vmulq_f32(v270, v270);
                    v271.i32[3] = 0;
                    float32x4_t v272 = *(float32x4_t *)(v258 + 16 * v250);
                    float v273 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v271, v271)));
                    float32x4_t v274 = vsubq_f32(v272, v269);
                    float32x4_t v275 = vmulq_f32(v274, v274);
                    v275.i32[3] = 0;
                    float v276 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v275, v275)));
                    float32x4_t v277 = vsubq_f32(v272, v268);
                    float32x4_t v278 = vmulq_f32(v277, v277);
                    v278.i32[3] = 0;
                    float v279 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v278, v278)));
                    float v280 = v276 >= v279 ? v276 : v279;
                    if (v273 > v280)
                    {
                      float v281 = sqrtf((float)((float)((float)((float)(v273 + v276) + v279) * 0.5) - v279)* (float)((float)((float)((float)((float)(v273 + v276) + v279) * 0.5) - v276)* (float)((float)((float)((float)(v273 + v276) + v279) * 0.5)* (float)((float)((float)((float)(v273 + v276) + v279) * 0.5) - v273))));
                      float v282 = (float)(v281 + v281) / v273;
                      if (v282 < v246)
                      {
                        uint64_t v283 = (v250 << 32) | LODWORD(v282);
                        uint64_t v284 = v259 | (v267 << 32);
                        if ((unint64_t)v249 >= v557[0])
                        {
                          uint64_t v285 = (v249 - (char *)__p[0]) >> 4;
                          if ((unint64_t)(v285 + 1) >> 60) {
                            std::vector<std::string>::__throw_length_error[abi:ne180100]();
                          }
                          unint64_t v286 = (uint64_t)(v557[0] - (unint64_t)__p[0]) >> 3;
                          if (v286 <= v285 + 1) {
                            unint64_t v286 = v285 + 1;
                          }
                          if (v557[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v287 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v287 = v286;
                          }
                          if (v287) {
                            v288 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)v557, v287);
                          }
                          else {
                            v288 = 0;
                          }
                          v289 = &v288[16 * v285];
                          *(void *)v289 = v283;
                          *((void *)v289 + 1) = v284;
                          v291 = (char *)__p[0];
                          v290 = (char *)__p[1];
                          v292 = v289;
                          if (__p[1] == __p[0])
                          {
                            v252 = (uint64_t *)a9;
                          }
                          else
                          {
                            v252 = (uint64_t *)a9;
                            do
                            {
                              *((_OWORD *)v292 - 1) = *((_OWORD *)v290 - 1);
                              v292 -= 16;
                              v290 -= 16;
                            }
                            while (v290 != v291);
                            v290 = (char *)__p[0];
                          }
                          v249 = v289 + 16;
                          __p[0] = v292;
                          __p[1] = v289 + 16;
                          v557[0] = &v288[16 * v287];
                          if (v290) {
                            operator delete(v290);
                          }
                          v262 = v542;
                          v260 = v545;
                        }
                        else
                        {
                          *(void *)v249 = v283;
                          *((void *)v249 + 1) = v284;
                          v249 += 16;
                          v252 = (uint64_t *)a9;
                        }
                        __p[1] = v249;
                        uint64_t v261 = *v262;
                        uint64_t v263 = *v260;
                      }
                    }
                  }
                  uint64_t v264 = ++v265;
                }
                while (v265 < (unint64_t)((v261 - v263) >> 3));
                v240 = v533;
                v254 = *v535;
                v255 = *v537;
              }
              unint64_t v256 = (v547 + 1);
              int v257 = v547 + 1;
            }
            while (v256 < ((char *)v254 - (char *)v255) >> 3);
            v248 = (unsigned int **)*v240;
            uint64_t v247 = v240[1];
          }
          uint64_t v250 = ++v251;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v247 - (uint64_t)v248) >> 3) > v251);
        v293 = (char *)__p[0];
      }
      unint64_t v294 = 126 - 2 * __clz((v249 - v293) >> 4);
      if (v249 == v293) {
        uint64_t v295 = 0;
      }
      else {
        uint64_t v295 = v294;
      }
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,false>((uint64_t)v293, (unint64_t)v249, v295, 1);
      v296 = (float *)__p[0];
      v548 = (float *)__p[1];
      if (__p[0] == __p[1])
      {
        char v297 = 0;
        if (__p[0]) {
          goto LABEL_403;
        }
      }
      else
      {
        char v297 = 0;
        do
        {
          float v298 = *v296;
          uint64_t v299 = *((unsigned int *)v296 + 1);
          uint64_t v300 = *((unsigned int *)v296 + 2);
          uint64_t v301 = *((unsigned int *)v296 + 3);
          LODWORD(v552) = v299;
          v302 = (unsigned int **)*v240;
          uint64_t v303 = *v240 + 24 * v299;
          v304 = *(_DWORD **)v303;
          v305 = *(_DWORD **)(v303 + 8);
          if (v304 != v305)
          {
            while (*v304 != v300)
            {
              v304 += 2;
              if (v304 == v305)
              {
                v304 = v305;
                break;
              }
            }
          }
          v306 = &v302[3 * v300];
          v307 = *v306;
          v308 = v306[1];
          if (v307 != v308)
          {
            while (*v307 != v301)
            {
              v307 += 2;
              if (v307 == v308)
              {
                v307 = v308;
                break;
              }
            }
          }
          v309 = &v302[3 * v301];
          v310 = *v309;
          v311 = v309[1];
          if (*v309 != v311)
          {
            while (*v310 != v299)
            {
              v310 += 2;
              if (v310 == v311)
              {
                v310 = v309[1];
                break;
              }
            }
          }
          if (v304 != v305 && v307 != v308)
          {
            uint64_t v312 = a9->i64[0];
            float32x4_t v313 = *(float32x4_t *)(a9->i64[0] + 16 * v301);
            float32x4_t v314 = *(float32x4_t *)(a9->i64[0] + 16 * v300);
            float32x4_t v315 = vsubq_f32(v314, v313);
            float32x4_t v316 = vmulq_f32(v315, v315);
            v316.i32[3] = 0;
            float v317 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v316, v316)));
            float32x4_t v318 = *(float32x4_t *)(a9->i64[0] + 16 * v299);
            float32x4_t v319 = vsubq_f32(v318, v314);
            float32x4_t v320 = vmulq_f32(v319, v319);
            v320.i32[3] = 0;
            float32x4_t v321 = vsubq_f32(v318, v313);
            float32x4_t v322 = vmulq_f32(v321, v321);
            v322.i32[3] = 0;
            float v323 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v320, v320)));
            float v324 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v322, v322)));
            float v325 = sqrtf((float)((float)((float)((float)(v317 + v323) + v324) * 0.5) - v324)* (float)((float)((float)((float)((float)(v317 + v323) + v324) * 0.5) - v323)* (float)((float)((float)((float)(v317 + v323) + v324) * 0.5)* (float)((float)((float)((float)(v317 + v323) + v324) * 0.5) - v317))));
            if (vabds_f32((float)(v325 + v325) / v317, v298) <= 0.00000001)
            {
              if (v323 < v246 || v324 < v246)
              {
                if (v323 >= v246) {
                  unsigned int v327 = v301;
                }
                else {
                  unsigned int v327 = v300;
                }
                v328.i64[0] = 0x3F0000003F000000;
                v328.i64[1] = 0x3F0000003F000000;
                *(float32x4_t *)(v312 + 16 * v299) = vmulq_f32(vaddq_f32(v318, *(float32x4_t *)(v312 + 16 * v327)), v328);
                unsigned int v555 = v327;
                *(float32x4_t *)(*a8 + 16 * v299) = vmulq_f32(vaddq_f32(*(float32x4_t *)(*a8 + 16 * v327), *(float32x4_t *)(*a8 + 16 * v299)), v328);
                v553.i64[1] = 0;
                v554 = 0;
                v553.i64[0] = (uint64_t)&v553.i64[1];
                v329 = (unsigned int **)*v240;
                uint64_t v330 = *v240 + 24 * v327;
                v332 = *(unsigned int **)v330;
                v331 = *(unsigned int **)(v330 + 8);
                if (*(unsigned int **)v330 != v331)
                {
                  do
                  {
                    if (*v332 != v552)
                    {
                      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v553, v332, v332);
                      v329 = (unsigned int **)*v240;
                      uint64_t v333 = *v240 + 24 * *v332;
                      v334 = *(_DWORD **)v333;
                      v335 = *(_DWORD **)(v333 + 8);
                      while (v334 != v335)
                      {
                        if (*v334 == v555) {
                          _DWORD *v334 = v552;
                        }
                        v334 += 2;
                      }
                    }
                    v332 += 2;
                  }
                  while (v332 != v331);
                  LODWORD(v299) = v552;
                }
                v350 = &v329[3 * v299];
                v352 = *v350;
                v351 = v350[1];
                while (v352 != v351)
                {
                  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v553, v352, v352);
                  v352 += 2;
                }
                std::__tree<unsigned int>::__erase_unique<unsigned int>((uint64_t)&v553, (unsigned int *)&v552);
                std::__tree<unsigned int>::__erase_unique<unsigned int>((uint64_t)&v553, &v555);
                v353 = (unsigned int **)*v240;
                *(void *)(*v240 + 24 * v555 + 8) = *(void *)(*v240 + 24 * v555);
                v353[3 * v552 + 1] = v353[3 * v552];
                v354 = (unint64_t *)v553.i64[0];
                if ((unint64_t *)v553.i64[0] != &v553.u64[1])
                {
                  do
                  {
                    uint64_t v355 = *((unsigned int *)v354 + 7);
                    v356 = (char **)(*v240 + 24 * v552);
                    v357 = v356 + 1;
                    v358 = v356[1];
                    v360 = v356 + 2;
                    unint64_t v359 = (unint64_t)v356[2];
                    if ((unint64_t)v358 >= v359)
                    {
                      uint64_t v362 = (v358 - *v356) >> 3;
                      if ((unint64_t)(v362 + 1) >> 61) {
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v363 = v359 - (void)*v356;
                      uint64_t v364 = v363 >> 2;
                      if (v363 >> 2 <= (unint64_t)(v362 + 1)) {
                        uint64_t v364 = v362 + 1;
                      }
                      if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v365 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v365 = v364;
                      }
                      if (v365) {
                        v366 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v360, v365);
                      }
                      else {
                        v366 = 0;
                      }
                      v367 = &v366[8 * v362];
                      *(void *)v367 = v355;
                      v361 = v367 + 8;
                      v368 = *v357;
                      v369 = *v356;
                      if (*v357 != *v356)
                      {
                        do
                        {
                          int v370 = *((_DWORD *)v368 - 2);
                          v368 -= 8;
                          __int16 v371 = *((_WORD *)v368 + 2);
                          *((_DWORD *)v367 - 2) = v370;
                          v367 -= 8;
                          *((_WORD *)v367 + 2) = v371;
                        }
                        while (v368 != v369);
                        v368 = *v356;
                      }
                      *v356 = v367;
                      *v357 = v361;
                      void *v360 = &v366[8 * v365];
                      if (v368) {
                        operator delete(v368);
                      }
                    }
                    else
                    {
                      *(void *)v358 = v355;
                      v361 = v358 + 8;
                    }
                    *v357 = v361;
                    v372 = (unint64_t *)v354[1];
                    if (v372)
                    {
                      do
                      {
                        v373 = v372;
                        v372 = (unint64_t *)*v372;
                      }
                      while (v372);
                    }
                    else
                    {
                      do
                      {
                        v373 = (unint64_t *)v354[2];
                        BOOL v160 = *v373 == (void)v354;
                        v354 = v373;
                      }
                      while (!v160);
                    }
                    v354 = v373;
                  }
                  while (v373 != &v553.u64[1]);
                }
                std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v553, (void *)v553.i64[1]);
              }
              else
              {
                uint64_t v336 = *a8;
                float32x4_t v337 = vaddq_f32(v313, v314);
                v338.i64[0] = 0x3F0000003F000000;
                v338.i64[1] = 0x3F0000003F000000;
                *(float32x4_t *)(v312 + 16 * v299) = vmulq_f32(v337, v338);
                float32x4_t v339 = vaddq_f32(*(float32x4_t *)(v336 + 16 * v301), *(float32x4_t *)(v336 + 16 * v300));
                float32x4_t v340 = vmulq_f32(v339, v339);
                v340.i32[3] = 0;
                float32x4_t v341 = vpaddq_f32(v340, v340);
                float32x4_t v342 = vpaddq_f32(v341, v341);
                float32x4_t v343 = (float32x4_t)xmmword_24F570A10;
                if (v342.f32[0] > 0.0) {
                  float32x4_t v343 = vdivq_f32(v339, vsqrtq_f32(v342));
                }
                *(float32x4_t *)(*a8 + 16 * v299) = v343;
                v344 = (unsigned int **)*v240;
                uint64_t v345 = *v240 + 24 * v300;
                v346 = *(char **)v345;
                v349 = *(char **)(v345 + 8);
                v348 = (const void **)(v345 + 8);
                v347 = v349;
                while (v346 != v347)
                {
                  if (*(_DWORD *)v346 == v301)
                  {
                    if (v346 != v347)
                    {
                      v374 = v346 + 8;
                      if (v346 + 8 != v347)
                      {
                        do
                        {
                          if (*(_DWORD *)v374 != v301)
                          {
                            int v375 = *(_DWORD *)v374;
                            *((_WORD *)v346 + 2) = *((_WORD *)v374 + 2);
                            *(_DWORD *)v346 = v375;
                            v346 += 8;
                          }
                          v374 += 8;
                        }
                        while (v374 != v347);
                        v344 = (unsigned int **)*v240;
                        v347 = *(char **)(*v240 + 24 * v300 + 8);
                      }
                    }
                    if (v346 != v347)
                    {
                      uint64_t v376 = (unsigned char *)*v348 - v347;
                      if (*v348 != v347)
                      {
                        memmove(v346, v347, v376 - 2);
                        v344 = (unsigned int **)*v240;
                      }
                      *v348 = &v346[v376];
                    }
                    break;
                  }
                  v346 += 8;
                }
                v377 = &v344[3 * v301];
                v378 = (char *)*v377;
                v381 = (char *)v377[1];
                v380 = (const void **)(v377 + 1);
                v379 = v381;
                while (v378 != v379)
                {
                  if (*(_DWORD *)v378 == v300)
                  {
                    if (v378 != v379)
                    {
                      v382 = v378 + 8;
                      if (v378 + 8 != v379)
                      {
                        do
                        {
                          if (*(_DWORD *)v382 != v300)
                          {
                            int v383 = *(_DWORD *)v382;
                            *((_WORD *)v378 + 2) = *((_WORD *)v382 + 2);
                            *(_DWORD *)v378 = v383;
                            v378 += 8;
                          }
                          v382 += 8;
                        }
                        while (v382 != v379);
                        v379 = *(char **)(*v240 + 24 * v301 + 8);
                      }
                    }
                    if (v378 != v379)
                    {
                      uint64_t v384 = (unsigned char *)*v380 - v379;
                      if (*v380 != v379) {
                        memmove(v378, v379, v384 - 2);
                      }
                      *v380 = &v378[v384];
                    }
                    break;
                  }
                  v378 += 8;
                }
                if (v310 == v311)
                {
                  v385 = (char **)(*v240 + 24 * v552);
                  v386 = v385 + 1;
                  v387 = v385[1];
                  v389 = v385 + 2;
                  unint64_t v388 = (unint64_t)v385[2];
                  if ((unint64_t)v387 >= v388)
                  {
                    uint64_t v391 = (v387 - *v385) >> 3;
                    if ((unint64_t)(v391 + 1) >> 61) {
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v392 = v388 - (void)*v385;
                    uint64_t v393 = v392 >> 2;
                    if (v392 >> 2 <= (unint64_t)(v391 + 1)) {
                      uint64_t v393 = v391 + 1;
                    }
                    if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v394 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v394 = v393;
                    }
                    if (v394) {
                      v395 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v389, v394);
                    }
                    else {
                      v395 = 0;
                    }
                    v396 = &v395[8 * v391];
                    *(void *)v396 = v301;
                    v390 = v396 + 8;
                    v397 = *v386;
                    v398 = *v385;
                    if (*v386 != *v385)
                    {
                      do
                      {
                        int v399 = *((_DWORD *)v397 - 2);
                        v397 -= 8;
                        __int16 v400 = *((_WORD *)v397 + 2);
                        *((_DWORD *)v396 - 2) = v399;
                        v396 -= 8;
                        *((_WORD *)v396 + 2) = v400;
                      }
                      while (v397 != v398);
                      v397 = *v385;
                    }
                    *v385 = v396;
                    *v386 = v390;
                    void *v389 = &v395[8 * v394];
                    if (v397) {
                      operator delete(v397);
                    }
                  }
                  else
                  {
                    *(void *)v387 = v301;
                    v390 = v387 + 8;
                  }
                  *v386 = v390;
                  v401 = (char **)(*v240 + 24 * v301);
                  uint64_t v402 = v552;
                  v403 = v401 + 1;
                  v404 = v401[1];
                  unint64_t v405 = (unint64_t)v401[2];
                  if ((unint64_t)v404 >= v405)
                  {
                    uint64_t v407 = (v404 - *v401) >> 3;
                    if ((unint64_t)(v407 + 1) >> 61) {
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v408 = v405 - (void)*v401;
                    uint64_t v409 = v408 >> 2;
                    if (v408 >> 2 <= (unint64_t)(v407 + 1)) {
                      uint64_t v409 = v407 + 1;
                    }
                    if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v410 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v410 = v409;
                    }
                    if (v410) {
                      v411 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v401 + 2), v410);
                    }
                    else {
                      v411 = 0;
                    }
                    v412 = &v411[8 * v407];
                    *(void *)v412 = v402;
                    v406 = v412 + 8;
                    v413 = *v403;
                    v414 = *v401;
                    if (*v403 != *v401)
                    {
                      do
                      {
                        int v415 = *((_DWORD *)v413 - 2);
                        v413 -= 8;
                        __int16 v416 = *((_WORD *)v413 + 2);
                        *((_DWORD *)v412 - 2) = v415;
                        v412 -= 8;
                        *((_WORD *)v412 + 2) = v416;
                      }
                      while (v413 != v414);
                      v413 = *v401;
                    }
                    *v401 = v412;
                    *v403 = v406;
                    v401[2] = &v411[8 * v410];
                    if (v413) {
                      operator delete(v413);
                    }
                  }
                  else
                  {
                    *(void *)v404 = v552;
                    v406 = v404 + 8;
                  }
                  *v403 = v406;
                }
              }
              ++v532;
              char v297 = 1;
              char v530 = 1;
            }
          }
          v296 += 4;
        }
        while (v296 != v548);
        v296 = (float *)__p[0];
        if (__p[0])
        {
LABEL_403:
          __p[1] = v296;
          operator delete(v296);
        }
      }
    }
    while ((v297 & 1) != 0);
    __p[0] = 0;
    __p[1] = 0;
    v557[0] = 0;
    v418 = (unsigned int **)*v240;
    uint64_t v417 = v240[1];
    if (v417 == *v240)
    {
      v419 = 0;
      v459 = 0;
    }
    else
    {
      v419 = 0;
      unint64_t v420 = 0;
      v421 = (uint64_t *)a9;
      do
      {
        v422 = &v418[3 * v420];
        v423 = v422[1];
        v424 = *v422;
        if (v423 != *v422)
        {
          uint64_t v425 = 0;
          unsigned int v426 = 0;
          uint64_t v427 = *v421;
          unint64_t v428 = ((char *)v423 - (char *)*v422) >> 3;
          do
          {
            uint64_t v429 = 0;
            int v430 = 0;
            uint64_t v431 = v424[2 * v425];
            uint64_t v432 = a9->i64[0];
            v433 = (_DWORD **)(*v240 + 24 * v431);
            v434 = v433 + 1;
            float v435 = 0.0;
            do
            {
              uint64_t v436 = v424[2 * v429];
              if (v436 != v431)
              {
                v437 = *v433;
                v438 = (_DWORD *)*v434;
                if (*v433 != (_DWORD *)*v434)
                {
                  while (*v437 != v436)
                  {
                    v437 += 2;
                    if (v437 == v438) {
                      goto LABEL_420;
                    }
                  }
                }
                if (v437 != v438)
                {
                  ++v430;
                  float32x4_t v439 = *(float32x4_t *)(v432 + 16 * v436);
                  float32x4_t v440 = vsubq_f32(v439, *(float32x4_t *)(v427 + 16 * v420));
                  float32x4_t v441 = vmulq_f32(v440, v440);
                  v441.i32[3] = 0;
                  float32x4_t v442 = vsubq_f32(v439, *(float32x4_t *)(v432 + 16 * v431));
                  float32x4_t v443 = vmulq_f32(v442, v442);
                  v443.i32[3] = 0;
                  float v435 = v435
                       + (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v441, v441)))
                               + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v443, v443))));
                }
              }
LABEL_420:
              ++v429;
            }
            while (v428 > v429);
            if (v430 == 2)
            {
              float v444 = (float)(v435 * 0.25) * 1.4142;
              float32x4_t v445 = vsubq_f32(*(float32x4_t *)(v427 + 16 * v420), *(float32x4_t *)(v432 + 16 * v431));
              float32x4_t v446 = vmulq_f32(v445, v445);
              v446.i32[3] = 0;
              float v447 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v446, v446)));
              float v448 = v447 - v444;
              if (v444 >= v447) {
                float v444 = v447;
              }
              float v449 = fabsf(v448 / v444);
              if ((unint64_t)v419 >= v557[0])
              {
                v450 = (char *)__p[0];
                unint64_t v451 = 0xAAAAAAAAAAAAAAABLL * ((v419 - (char *)__p[0]) >> 2);
                unint64_t v452 = v451 + 1;
                if (v451 + 1 > 0x1555555555555555) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((uint64_t)(v557[0] - (unint64_t)__p[0]) >> 2) > v452) {
                  unint64_t v452 = 0x5555555555555556 * ((uint64_t)(v557[0] - (unint64_t)__p[0]) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v557[0] - (unint64_t)__p[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v453 = 0x1555555555555555;
                }
                else {
                  unint64_t v453 = v452;
                }
                if (v453)
                {
                  v454 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<unsigned int>>>((uint64_t)v557, v453);
                  v450 = (char *)__p[0];
                  v419 = (char *)__p[1];
                }
                else
                {
                  v454 = 0;
                }
                v455 = &v454[12 * v451];
                *(float *)v455 = v449;
                *((_DWORD *)v455 + 1) = v420;
                *((_DWORD *)v455 + 2) = v431;
                v456 = v455;
                if (v419 != v450)
                {
                  do
                  {
                    uint64_t v457 = *(void *)(v419 - 12);
                    v419 -= 12;
                    int v458 = *((_DWORD *)v419 + 2);
                    *(void *)(v456 - 12) = v457;
                    v456 -= 12;
                    *((_DWORD *)v456 + 2) = v458;
                  }
                  while (v419 != v450);
                  v450 = (char *)__p[0];
                }
                v419 = v455 + 12;
                __p[0] = v456;
                __p[1] = v455 + 12;
                v557[0] = &v454[12 * v453];
                if (v450) {
                  operator delete(v450);
                }
              }
              else
              {
                *(float *)v419 = v449;
                *((_DWORD *)v419 + 1) = v420;
                *((_DWORD *)v419 + 2) = v431;
                v419 += 12;
              }
              __p[1] = v419;
              v423 = v422[1];
              v424 = *v422;
            }
            unint64_t v428 = ((char *)v423 - (char *)v424) >> 3;
            uint64_t v425 = ++v426;
          }
          while (v428 > v426);
          v418 = (unsigned int **)*v240;
          uint64_t v417 = v240[1];
          v421 = (uint64_t *)a9;
        }
        ++v420;
      }
      while (v420 < 0xAAAAAAAAAAAAAAABLL * ((v417 - (uint64_t)v418) >> 3));
      v459 = __p[0];
    }
    unint64_t v460 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v419 - v459) >> 2));
    if (v419 == v459) {
      uint64_t v461 = 0;
    }
    else {
      uint64_t v461 = v460;
    }
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *,false>((uint64_t)v459, (unint64_t)v419, v461, 1);
    v463 = __p[0];
    v462 = __p[1];
    if (__p[0] != __p[1])
    {
      do
      {
        unsigned int v464 = v463[1];
        uint64_t v465 = *v240;
        v466 = (void *)(*v240 + 24 * v464);
        v468 = (const void **)(v466 + 1);
        v467 = (char *)v466[1];
        if (v467 != (char *)*v466)
        {
          uint64_t v469 = 0;
          int v470 = 0;
          unsigned int v471 = v463[2];
          v472 = (void *)(v465 + 24 * v471);
          v473 = (_DWORD *)*v472;
          v474 = (_DWORD *)v472[1];
          do
          {
            v475 = v473;
            if (v473 != v474)
            {
              v475 = v473;
              while (*v475 != *(_DWORD *)(*v466 + 8 * v469))
              {
                v475 += 2;
                if (v475 == v474)
                {
                  v475 = v474;
                  break;
                }
              }
            }
            if (v475 != v474) {
              ++v470;
            }
            ++v469;
          }
          while ((uint64_t)&v467[-*v466] >> 3 > (unint64_t)v469);
          v476 = (char *)*v466;
          if (v470 == 2)
          {
            while (*(_DWORD *)v476 != v471)
            {
              v476 += 8;
              if (v476 == v467) {
                goto LABEL_474;
              }
            }
            if (v476 != v467)
            {
              v477 = v476 + 8;
              if (v476 + 8 != v467)
              {
                do
                {
                  if (*(_DWORD *)v477 != v471)
                  {
                    int v478 = *(_DWORD *)v477;
                    *((_WORD *)v476 + 2) = *((_WORD *)v477 + 2);
                    *(_DWORD *)v476 = v478;
                    v476 += 8;
                  }
                  v477 += 8;
                }
                while (v477 != v467);
                uint64_t v465 = *v240;
                v467 = *(char **)(*v240 + 24 * v464 + 8);
              }
            }
            if (v476 != v467)
            {
              v479 = v476;
              int64_t v480 = (unsigned char *)*v468 - v467;
              if (*v468 != v467)
              {
                memmove(v476, v467, v480 - 2);
                uint64_t v465 = *v533;
              }
              *v468 = (char *)v479 + v480;
              v240 = v533;
            }
LABEL_474:
            uint64_t v481 = v465 + 24 * v471;
            v482 = *(char **)v481;
            v485 = *(char **)(v481 + 8);
            v484 = (const void **)(v481 + 8);
            v483 = v485;
            while (v482 != v483)
            {
              if (*(_DWORD *)v482 == v464)
              {
                if (v482 != v483)
                {
                  v486 = v482 + 8;
                  if (v482 + 8 != v483)
                  {
                    do
                    {
                      if (*(_DWORD *)v486 != v464)
                      {
                        int v487 = *(_DWORD *)v486;
                        *((_WORD *)v482 + 2) = *((_WORD *)v486 + 2);
                        *(_DWORD *)v482 = v487;
                        v482 += 8;
                      }
                      v486 += 8;
                    }
                    while (v486 != v483);
                    v483 = *(char **)(*v240 + 24 * v471 + 8);
                  }
                }
                if (v482 != v483)
                {
                  uint64_t v488 = (unsigned char *)*v484 - v483;
                  if (*v484 != v483) {
                    memmove(v482, v483, v488 - 2);
                  }
                  *v484 = &v482[v488];
                }
                break;
              }
              v482 += 8;
            }
            ++v528;
            char v530 = 1;
          }
        }
        v463 += 3;
      }
      while (v463 != v462);
      v463 = __p[0];
    }
    if (v463)
    {
      __p[1] = v463;
      operator delete(v463);
    }
  }
  while ((v530 & 1) != 0);
  *a10 = v528;
  *a11 = v532;
  v489 = (unsigned int **)*v240;
  v490 = (unsigned int **)v240[1];
  if ((unsigned int **)*v240 != v490)
  {
    do
    {
      __p[1] = 0;
      v557[0] = 0;
      __p[0] = &__p[1];
      v554 = 0;
      int32x4_t v553 = 0uLL;
      std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve((char **)&v553, ((char *)v489[1] - (char *)*v489) >> 3);
      v491 = *v489;
      v492 = v489[1];
      while (v491 != v492)
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)__p, v491, v491);
        if (v493)
        {
          uint64_t v494 = v553.i64[1];
          if (v553.i64[1] >= (unint64_t)v554)
          {
            uint64_t v496 = (v553.i64[1] - v553.i64[0]) >> 3;
            if ((unint64_t)(v496 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v497 = (uint64_t)&v554[-v553.i64[0]] >> 2;
            if (v497 <= v496 + 1) {
              unint64_t v497 = v496 + 1;
            }
            if ((unint64_t)&v554[-v553.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v498 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v498 = v497;
            }
            if (v498) {
              v499 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v554, v498);
            }
            else {
              v499 = 0;
            }
            v500 = &v499[8 * v496];
            *(void *)v500 = *(void *)v491;
            v495 = v500 + 8;
            v501 = (_WORD *)v553.i64[1];
            v502 = (_WORD *)v553.i64[0];
            if (v553.i64[1] != v553.i64[0])
            {
              do
              {
                int v503 = *((_DWORD *)v501 - 2);
                v501 -= 4;
                __int16 v504 = v501[2];
                *((_DWORD *)v500 - 2) = v503;
                v500 -= 8;
                *((_WORD *)v500 + 2) = v504;
              }
              while (v501 != v502);
              v501 = (_WORD *)v553.i64[0];
            }
            v553.i64[0] = (uint64_t)v500;
            v553.i64[1] = (uint64_t)v495;
            v554 = &v499[8 * v498];
            if (v501) {
              operator delete(v501);
            }
          }
          else
          {
            *(void *)v553.i64[1] = *(void *)v491;
            v495 = (char *)(v494 + 8);
          }
          v553.i64[1] = (uint64_t)v495;
        }
        v491 += 2;
      }
      std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit((uint64_t)&v553);
      v505 = *v489;
      *(int32x4_t *)v489 = v553;
      v506 = v489[2];
      v489[2] = (unsigned int *)v554;
      v553.i64[0] = (uint64_t)v505;
      v554 = (char *)v506;
      if (v505)
      {
        v553.i64[1] = (uint64_t)v505;
        operator delete(v505);
      }
      std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)__p, (void *)__p[1]);
      v489 += 3;
    }
    while (v489 != v490);
  }
  v507 = (uint64_t *)a9;
  if (v527)
  {
    uint64_t v508 = 0;
    uint64_t v509 = 8;
    do
    {
      *(_OWORD *)long long __p = 0u;
      int32x4_t v553 = 0u;
      long long v552 = *(_OWORD *)(*v507 + v508);
      v510 = (float *)(*a8 + v508);
      float v511 = *v510;
      float v512 = v510[1];
      float v513 = v510[2];
      float v514 = v513 * v513;
      if (fabsf(*v510) <= fabsf(v512))
      {
        float v519 = 1.0 / sqrtf(v514 + (float)(v512 * v512));
        *(float *)&__int32 v520 = v513 * v519;
        float v517 = -(float)(v512 * v519);
        v518.i32[0] = 0;
        v518.i32[3] = 0;
        v518.i32[1] = v520;
      }
      else
      {
        float v515 = 1.0 / sqrtf(v514 + (float)(v511 * v511));
        *(float *)&unsigned int v516 = v513 * v515;
        float v517 = -(float)(v511 * v515);
        v518.i32[3] = 0;
        v518.i64[0] = v516;
      }
      *(float *)&v518.i32[2] = v517;
      int32x4_t v553 = v518;
      *(float32x4_t *)long long __p = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v518, (int32x4_t)vextq_s8((int8x16_t)v518, (int8x16_t)v518, 0xCuLL)), v518), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)v510, *(int8x16_t *)v510, 4uLL), *(int32x4_t *)v510)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)v510, (int32x4_t)vextq_s8(*(int8x16_t *)v510, *(int8x16_t *)v510, 0xCuLL)), *(int32x4_t *)v510), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v518, (int8x16_t)v518, 4uLL), v518));
      v521 = (unsigned int **)(*v533 + v509);
      v522 = *(v521 - 1);
      v523 = *v521;
      unint64_t v524 = 126 - 2 * __clz(((char *)*v521 - (char *)v522) >> 3);
      v551[0] = (float32x4_t *)&v553;
      v551[1] = (float32x4_t *)__p;
      v507 = (uint64_t *)a9;
      v551[2] = (float32x4_t *)&v552;
      v551[3] = a9;
      if (v523 == v522) {
        uint64_t v525 = 0;
      }
      else {
        uint64_t v525 = v524;
      }
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,false>(v522, v523, v551, v525, 1);
      v508 += 16;
      v509 += 24;
    }
    while (16 * v527 != v508);
  }
  if (v558[0])
  {
    v558[1] = v558[0];
    operator delete(v558[0]);
  }
  if (v559[0])
  {
    v559[1] = v559[0];
    operator delete(v559[0]);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)v561, *(void **)&v561[2]);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v564.__begin_)
  {
    v564.__end_ = v564.__begin_;
    operator delete(v564.__begin_);
  }
  cv3d::cv::gess::internal::DisjointSets<unsigned int>::~DisjointSets((uint64_t)&v565);
  if (v568)
  {
    *(void *)&long long v569 = v568;
    operator delete(v568);
  }
  if (v570) {
    operator delete(v570);
  }
  return 1;
}

void sub_24F4D975C(_Unwind_Exception *a1)
{
  int8x8_t v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(void *)(v1 - 192) = v3;
    operator delete(v3);
  }
  int32x4_t v4 = *(void **)(v1 - 176);
  if (v4) {
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unsigned int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        float32x4_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve(char **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5];
    float32x4_t v9 = &v6[8 * v8];
    unint64_t v11 = *a1;
    unsigned int v10 = a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        int v13 = *((_DWORD *)v10 - 2);
        v10 -= 8;
        __int16 v14 = *((_WORD *)v10 + 2);
        *((_DWORD *)v12 - 2) = v13;
        v12 -= 8;
        *((_WORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      unsigned int v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(unsigned char **)a1;
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
  unint64_t v4 = *(unsigned char **)a1;
  uint64_t v8 = *(_WORD **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(_WORD **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *((_DWORD *)v8 - 2);
    v8 -= 4;
    __int16 v14 = v8[2];
    *(_DWORD *)(v12 - 8) = v13;
    v12 -= 8;
    *(_WORD *)(v12 + 4) = v14;
  }
  while (v8 != (_WORD *)v4);
  unint64_t v4 = *(unsigned char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

unint64_t cv3d::cv::gess::internal::DisjointSets<unsigned int>::Unite(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a3;
  uint64_t v6 = *a1;
  do
  {
    unint64_t result = v4;
    unint64_t v4 = *(unsigned int *)(v6 + 4 * v4);
  }
  while (result != v4);
  *(_DWORD *)(v6 + 4 * a2) = result;
  do
  {
    unint64_t v8 = v5;
    unint64_t v5 = *(unsigned int *)(v6 + 4 * v5);
  }
  while (v8 != v5);
  *(_DWORD *)(v6 + 4 * a3) = v8;
  if (result != v8)
  {
    uint64_t v9 = a1[3];
    int v10 = *(_DWORD *)(v9 + 4 * result);
    int v11 = *(_DWORD *)(v9 + 4 * v8);
    BOOL v12 = result >= v8;
    if (result < v8) {
      unint64_t v13 = v8;
    }
    else {
      unint64_t v13 = result;
    }
    if (result < v8)
    {
      int v14 = *(_DWORD *)(v9 + 4 * v8);
    }
    else
    {
      unint64_t result = v8;
      int v14 = v10;
    }
    if (v12) {
      int v10 = v11;
    }
    *(_DWORD *)(v6 + 4 * v13) = result;
    if (v14 == v10) {
      ++*(_DWORD *)(v9 + 4 * result);
    }
  }
  return result;
}

uint64_t std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::shrink_to_fit(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 3uLL);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v4);
    }
    int v10 = v8;
    int v11 = &v8[24 * v5];
    BOOL v12 = v11;
    unint64_t v13 = &v8[24 * v9];
    std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v10);
  }
  return result;
}

void sub_24F4D9C90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t cv3d::cv::gess::internal::DisjointSets<unsigned int>::~DisjointSets(uint64_t a1)
{
  int64x2_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t cv3d::cv::gess::internal::ExtractQuadFaces(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11 = (*(void *)(a2 + 8) - *(void *)a2) >> 4;
  uint64_t v61 = v11;
  uint64_t v12 = v11;
  std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(a4, v11);
  unint64_t v51 = a6;
  *a6 = 0;
  int64_t v60 = a1;
  memset(v59, 0, sizeof(v59));
  v58[0] = (unsigned int *)&v61;
  v58[1] = (unsigned int *)&v61 + 1;
  v58[2] = a4;
  void v58[3] = (unsigned int *)a2;
  v58[4] = (unsigned int *)a3;
  long long v55 = 0;
  uint64_t v56 = 0;
  unint64_t v13 = 3;
  uint64_t v57 = 0;
  do
  {
    while (!v11)
    {
      if (++v13 == 9)
      {
        int v18 = 0;
        goto LABEL_59;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = *a1;
    do
    {
      if (*(void *)(v15 + 24 * v14 + 8) != *(void *)(v15 + 24 * v14))
      {
        LODWORD(v16) = 0;
        do
        {
          if (cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_2::operator()(&v60, v14, v16, v13, (uint64_t)&v55))
          {
            long long __p = 0;
            float v53 = 0;
            uint64_t v54 = 0;
            cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_0::operator()(v58, &v55, (char **)&__p);
            unint64_t v17 = __p;
            if (__p != v53)
            {
              std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](v59, (uint64_t)&__p);
              unint64_t v17 = __p;
            }
            if (v17)
            {
              float v53 = v17;
              operator delete(v17);
            }
          }
          unint64_t v16 = (v16 + 1);
          uint64_t v15 = *a1;
        }
        while (v16 < (uint64_t)(*(void *)(*a1 + 24 * v14 + 8) - *(void *)(*a1 + 24 * v14)) >> 3);
      }
      ++v14;
    }
    while (v14 != v11);
    ++v13;
  }
  while (v13 != 9);
  uint64_t v19 = 0;
  uint64_t v20 = *a1;
  do
  {
    uint64_t v21 = *(void *)(v20 + 24 * v19);
    uint64_t v22 = *(void *)(v20 + 24 * v19 + 8) - v21;
    if (v22)
    {
      uint64_t v23 = 0;
      unsigned int v24 = 0;
      unint64_t v25 = v22 >> 3;
      do
      {
        if (!*(unsigned char *)(v21 + 8 * v23 + 4))
        {
          uint64_t v26 = *(void *)(v20 + 24 * *(unsigned int *)(v21 + 8 * v23));
          uint64_t v27 = *(void *)(v20 + 24 * *(unsigned int *)(v21 + 8 * v23) + 8);
          uint64_t v28 = v27 - v26;
          if (v27 == v26) {
LABEL_68:
          }
            __assert_rtn("ExtractQuadFaces", "QuadExtract.cpp", 815, "found");
          uint64_t v29 = 0;
          unint64_t v30 = v28 >> 3;
          unsigned int v31 = 1;
          while (v19 != *(_DWORD *)(v26 + 8 * v29))
          {
            uint64_t v29 = v31;
            if (v30 <= v31++) {
              goto LABEL_68;
            }
          }
          uint64_t v33 = v26 + 8 * v29;
          if (*(unsigned char *)(v33 + 4))
          {
            *(unsigned char *)(v21 + 8 * v23 + 5) = 1;
            *(unsigned char *)(v33 + 5) = 1;
          }
        }
        uint64_t v23 = ++v24;
      }
      while (v25 > v24);
    }
    ++v19;
  }
  while (v19 != v11);
  uint64_t v34 = 0;
  do
  {
    uint64_t v35 = (void *)(*a1 + 24 * v34);
    uint64_t v36 = (_WORD *)*v35;
    uint64_t v39 = (_WORD *)v35[1];
    uint64_t v38 = (const void **)(v35 + 1);
    uint64_t v37 = v39;
    if (v36 != v39)
    {
      uint64_t v40 = v36 + 4;
      while (*((unsigned char *)v40 - 3))
      {
        BOOL v41 = v40 == v37;
        v40 += 4;
        if (v41) {
          goto LABEL_46;
        }
      }
      uint64_t v42 = v40 - 4;
      if (v40 - 4 != v37 && v40 != v37)
      {
        do
        {
          if (*((unsigned char *)v40 + 5))
          {
            int v43 = *(_DWORD *)v40;
            v42[2] = v40[2];
            *(_DWORD *)uint64_t v42 = v43;
            v42 += 4;
          }
          v40 += 4;
        }
        while (v40 != v37);
        uint64_t v37 = *(_WORD **)(*a1 + 24 * v34 + 8);
      }
      if (v42 != v37)
      {
        int64_t v44 = (unsigned char *)*v38 - (unsigned char *)v37;
        if (*v38 != v37) {
          memmove(v42, v37, v44 - 2);
        }
        *uint64_t v38 = (char *)v42 + v44;
      }
    }
LABEL_46:
    ++v34;
  }
  while (v34 != v12);
  uint64_t v45 = 0;
  int v18 = 0;
  uint64_t v46 = *a1;
  do
  {
    if (*(void *)(v46 + 24 * v45 + 8) != *(void *)(v46 + 24 * v45))
    {
      LODWORD(v47) = 0;
      do
      {
        if ((cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_2::operator()(&v60, v45, v47, 0, (uint64_t)&v55) & 1) != 0&& (unint64_t)(v56 - (unsigned char *)v55) <= 0x30)
        {
          long long __p = 0;
          float v53 = 0;
          uint64_t v54 = 0;
          cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_0::operator()(v58, &v55, (char **)&__p);
          unsigned __int8 v48 = __p;
          if (__p != v53)
          {
            std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](v59, (uint64_t)&__p);
            unsigned __int8 v48 = __p;
          }
          if (v48)
          {
            float v53 = v48;
            operator delete(v48);
          }
          ++v18;
        }
        unint64_t v47 = (v47 + 1);
        uint64_t v46 = *a1;
      }
      while (v47 < (uint64_t)(*(void *)(*a1 + 24 * v45 + 8) - *(void *)(*a1 + 24 * v45)) >> 3);
    }
    ++v45;
  }
  while (v45 != v12);
LABEL_59:
  _DWORD *v51 = v18;
  if (HIDWORD(v61) != (uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 4) {
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(a4, HIDWORD(v61));
  }
  unint64_t v49 = v61;
  if (v61 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(a3, v61);
    unint64_t v49 = v61;
  }
  if (v49 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4) {
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(a2, v49);
  }
  std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::shrink_to_fit((uint64_t *)a4);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::shrink_to_fit(a3);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::shrink_to_fit(a2);
  cv3d::cv::gess::internal::ReorderMesh((uint64_t *)a4, (void **)a2, (void **)a3);
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  v58[0] = (unsigned int *)v59;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
  return 1;
}

void sub_24F4DA1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  a17 = &a22;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__append(a1, a2 - v2);
  }
}

uint64_t cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_2::operator()(uint64_t **a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2;
  uint64_t v9 = *(unint64_t **)a5;
  *(void *)(a5 + 8) = *(void *)a5;
  int v10 = (void *)(a5 + 16);
  uint64_t v11 = *(void *)(**a1 + 24 * a2);
  uint64_t v12 = a2;
  do
  {
    if (*(unsigned char *)(v11 + 8 * a3 + 4) || a4 && a4 <= ((uint64_t)v9 - *(void *)a5) >> 3) {
      goto LABEL_34;
    }
    uint64_t v13 = a3;
    unint64_t v14 = v12 | ((unint64_t)a3 << 32);
    if ((unint64_t)v9 >= *v10)
    {
      uint64_t v15 = ((uint64_t)v9 - *(void *)a5) >> 3;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = *v10 - *(void *)a5;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v10, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = (unint64_t *)&v19[8 * v15];
      unint64_t *v20 = v14;
      uint64_t v9 = v20 + 1;
      uint64_t v22 = *(unint64_t **)a5;
      uint64_t v21 = *(unint64_t **)(a5 + 8);
      if (v21 != *(unint64_t **)a5)
      {
        do
        {
          unint64_t v23 = *--v21;
          *--uint64_t v20 = v23;
        }
        while (v21 != v22);
        uint64_t v21 = *(unint64_t **)a5;
      }
      *(void *)a5 = v20;
      *(void *)(a5 + 8) = v9;
      *(void *)(a5 + 16) = &v19[8 * v18];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *v9++ = v14;
    }
    uint64_t v24 = **a1;
    uint64_t v25 = *(unsigned int *)(*(void *)(v24 + 24 * v12) + 8 * v13);
    *(void *)(a5 + 8) = v9;
    uint64_t v11 = *(void *)(v24 + 24 * v25);
    unint64_t v26 = (unint64_t)(*(void *)(v24 + 24 * v25 + 8) - v11) >> 3;
    if (!v26) {
      goto LABEL_34;
    }
    int v27 = 0;
    uint64_t v28 = *(int **)(v24 + 24 * v25);
    while (1)
    {
      int v29 = *v28;
      v28 += 2;
      if (v29 == v12) {
        break;
      }
      if (v26 == ++v27) {
        goto LABEL_34;
      }
    }
    if (v26 == 1) {
      goto LABEL_34;
    }
    a3 = (v27 + 1) % v26;
    uint64_t v12 = v25;
  }
  while (v25 != v8);
  unint64_t v30 = *(char **)a5;
  if (a4 && a4 != ((char *)v9 - v30) >> 3)
  {
LABEL_34:
    uint64_t result = 0;
    *(void *)(a5 + 8) = *(void *)a5;
    return result;
  }
  if (v30 == (char *)v9) {
    return 1;
  }
  uint64_t result = 1;
  do
  {
    unsigned int v32 = *(_DWORD *)v30;
    uint64_t v33 = *((unsigned int *)v30 + 1);
    v30 += 8;
    *(unsigned char *)(*(void *)(v24 + 24 * v32) + 8 * v33 + 4) = 1;
  }
  while (v30 != (char *)v9);
  return result;
}

void cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_0::operator()(unsigned int **a1, void *a2, char **a3)
{
  a3[1] = *a3;
  unint64_t v3 = (char *)*a2;
  unint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v5 >= 0x11)
  {
    uint64_t v6 = (char **)a2;
    while (v5 != 32)
    {
      unint64_t v8 = (uint64_t)v5 >> 3;
      uint64_t v9 = a1;
      int v10 = a1[3];
      uint64_t v11 = *(void *)v10;
      if (v5 < 0x29)
      {
        float32x4_t v49 = 0uLL;
        unsigned int v50 = 1;
        unint64_t v51 = (unsigned int *)v3;
        float32x4_t v52 = 0uLL;
        do
        {
          unsigned int v53 = *v51;
          v51 += 2;
          float32x4_t v49 = vaddq_f32(v49, *(float32x4_t *)(v11 + 16 * v53));
          float32x4_t v54 = *(float32x4_t *)(*(void *)a1[4] + 16 * v53);
          float32x4_t v52 = vaddq_f32(v52, v54);
        }
        while (v8 > v50++);
        uint64_t v56 = **a1;
        unint64_t v57 = (v56 + 1);
        **a1 = v57;
        if (v57 > (*((void *)v10 + 1) - v11) >> 4)
        {
          float32x4_t v89 = v52;
          float32x4_t v86 = v49;
          std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)v10, v57);
          std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a1[4], **a1);
          float32x4_t v49 = v86;
          float32x4_t v52 = v89;
          unint64_t v3 = (char *)*a2;
          unint64_t v4 = (char *)a2[1];
          uint64_t v11 = *(void *)a1[3];
        }
        v54.f32[0] = (float)(unint64_t)((v4 - v3) >> 3);
        *(float32x4_t *)(v11 + 16 * v56) = vdivq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0));
        float32x4_t v58 = vmulq_f32(v52, v52);
        v58.i32[3] = 0;
        float32x4_t v59 = vpaddq_f32(v58, v58);
        float32x4_t v60 = vpaddq_f32(v59, v59);
        if (v60.f32[0] <= 0.0) {
          float32x4_t v61 = (float32x4_t)xmmword_24F570A10;
        }
        else {
          float32x4_t v61 = vdivq_f32(v52, vsqrtq_f32(v60));
        }
        *(float32x4_t *)(*(void *)a1[4] + 16 * v56) = v61;
        uint64_t v62 = (char *)*a2;
        uint64_t v63 = a2[1];
        if (v63 != *a2)
        {
          unint64_t v64 = 0;
          int v65 = 0;
          unsigned int v66 = (float)v56;
          do
          {
            unint64_t v68 = v9[1];
            uint64_t v67 = v9[2];
            uint64_t v69 = *v68;
            unint64_t v70 = (v69 + 1);
            *unint64_t v68 = v70;
            uint64_t v71 = *(void *)v67;
            if (v70 > (uint64_t)(*((void *)v67 + 1) - *(void *)v67) >> 4)
            {
              std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(v67, v70);
              uint64_t v62 = (char *)*a2;
              uint64_t v63 = a2[1];
              uint64_t v71 = *(void *)v9[2];
            }
            float v72 = (float)*(unsigned int *)&v62[8 * v64];
            unint64_t v64 = (v65 + 1);
            float v73 = (float)*(unsigned int *)&v62[8 * (v64 % ((v63 - (uint64_t)v62) >> 3))];
            unint64_t v74 = (_DWORD *)(v71 + 16 * v69);
            _DWORD *v74 = v72;
            v74[1] = v73;
            v74[2] = v66;
            void v74[3] = v66;
            uint64_t v76 = a3[1];
            unint64_t v75 = (unint64_t)a3[2];
            if ((unint64_t)v76 >= v75)
            {
              unint64_t v78 = *a3;
              uint64_t v79 = (v76 - *a3) >> 2;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v81 = v75 - (void)v78;
              if (v81 >> 1 > v80) {
                unint64_t v80 = v81 >> 1;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                float v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v82);
                unint64_t v78 = *a3;
                uint64_t v76 = a3[1];
              }
              else
              {
                float v83 = 0;
              }
              float v84 = &v83[4 * v79];
              *(_DWORD *)float v84 = v69;
              uint64_t v77 = v84 + 4;
              while (v76 != v78)
              {
                int v85 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v84 - 1) = v85;
                v84 -= 4;
              }
              *a3 = v84;
              a3[1] = v77;
              a3[2] = &v83[4 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v76 = v69;
              uint64_t v77 = v76 + 4;
            }
            a3[1] = v77;
            uint64_t v62 = (char *)*a2;
            uint64_t v63 = a2[1];
            ++v65;
          }
          while (v64 < (v63 - *a2) >> 3);
        }
        return;
      }
      unsigned int v12 = 0;
      int v13 = -1;
      float v14 = INFINITY;
      do
      {
        uint64_t v15 = 0;
        float v16 = 0.0;
        do
        {
          unint64_t v17 = v12 + v15;
          float32x4_t v18 = *(float32x4_t *)(v11 + 16 * *(unsigned int *)&v3[8 * ((v17 + 1) % v8)]);
          float32x4_t v19 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *(unsigned int *)&v3[8 * (v17 % v8)]), v18);
          float32x4_t v20 = vmulq_f32(v19, v19);
          v20.i32[3] = 0;
          float32x4_t v21 = vpaddq_f32(v20, v20);
          float32x4_t v22 = vpaddq_f32(v21, v21);
          float32x4_t v23 = (float32x4_t)xmmword_24F570A10;
          if (v22.f32[0] > 0.0) {
            float32x4_t v23 = vdivq_f32(v19, vsqrtq_f32(v22));
          }
          float32x4_t v24 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *(unsigned int *)&v3[8 * ((v17 + 2) % v8)]), v18);
          float32x4_t v25 = vmulq_f32(v24, v24);
          v25.i32[3] = 0;
          float32x4_t v26 = vpaddq_f32(v25, v25);
          float32x4_t v27 = vpaddq_f32(v26, v26);
          float32x4_t v28 = (float32x4_t)xmmword_24F570A10;
          if (v27.f32[0] > 0.0) {
            float32x4_t v28 = vdivq_f32(v24, vsqrtq_f32(v27));
          }
          float32x4_t v29 = vmulq_f32(v23, v28);
          v29.i32[3] = 0;
          float v30 = (float)(acosf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))) * 180.0) / 3.14159265;
          double v31 = fabs(v30 + -90.0) + v16;
          float v16 = v31;
          ++v15;
        }
        while (v15 != 4);
        if (v14 > v16)
        {
          int v13 = v12;
          float v14 = v31;
        }
        ++v12;
      }
      while (v8 > v12);
      a1 = v9;
      uint64_t v33 = v9[1];
      unsigned int v32 = v9[2];
      uint64_t v34 = *v33;
      unint64_t v35 = (v34 + 1);
      *uint64_t v33 = v35;
      uint64_t v36 = *(void *)v32;
      uint64_t v6 = (char **)a2;
      if (v35 > (uint64_t)(*((void *)v32 + 1) - *(void *)v32) >> 4)
      {
        std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(v32, v35);
        unint64_t v3 = (char *)*a2;
        unint64_t v4 = (char *)a2[1];
        uint64_t v36 = *(void *)a1[2];
      }
      uint64_t v37 = 0;
      uint64_t v38 = v36 + 16 * v34;
      do
      {
        uint64_t v39 = &v3[8 * ((v13 + v37) % (unint64_t)((v4 - v3) >> 3))];
        *(_DWORD *)(v38 + 4 * v37) = *(_DWORD *)v39;
        if (v37 && v37 != 3) {
          *(_DWORD *)uint64_t v39 = -1;
        }
        ++v37;
      }
      while (v37 != 4);
      if (v3 != v4)
      {
        while (*(_DWORD *)v3 != -1)
        {
          v3 += 8;
          if (v3 == v4)
          {
            unint64_t v3 = v4;
            goto LABEL_32;
          }
        }
        if (v3 != v4)
        {
          for (uint64_t i = v3 + 8; i != v4; i += 8)
          {
            if (*(_DWORD *)i != -1)
            {
              *(_DWORD *)unint64_t v3 = *(_DWORD *)i;
              *((_DWORD *)v3 + 1) = *((_DWORD *)i + 1);
              v3 += 8;
            }
          }
        }
      }
LABEL_32:
      std::vector<std::pair<unsigned int,unsigned int>>::erase((uint64_t)a2, v3, v4);
      unint64_t v3 = (char *)*a2;
      unint64_t v4 = (char *)a2[1];
      unint64_t v5 = (unint64_t)&v4[-*a2];
      if (v5 <= 0x10) {
        return;
      }
    }
    uint64_t v42 = a1[1];
    BOOL v41 = a1[2];
    uint64_t v43 = *v42;
    unint64_t v44 = (v43 + 1);
    *uint64_t v42 = v44;
    uint64_t v45 = *(void *)v41;
    if (v44 > (uint64_t)(*((void *)v41 + 1) - *(void *)v41) >> 4)
    {
      std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(v41, v44);
      unint64_t v3 = *v6;
      uint64_t v45 = *(void *)a1[2];
    }
    uint64_t v46 = 0;
    uint64_t v47 = v45 + 16 * v43;
    do
    {
      int v48 = *(_DWORD *)v3;
      v3 += 8;
      *(_DWORD *)(v47 + v46) = v48;
      v46 += 4;
    }
    while (v46 != 16);
  }
}

void std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::shrink_to_fit(uint64_t *a1)
{
  uint64_t v3 = a1[2];
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v6 < (v3 - *a1) >> 4)
  {
    uint64_t v13 = v2;
    if (v5 == v4)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v2, v6);
    }
    long long __p = v7;
    int v10 = &v7[16 * v6];
    uint64_t v11 = v10;
    unsigned int v12 = &v7[16 * v8];
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(a1, &__p);
    if (v11 != v10) {
      v11 += (v10 - v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F4DAA48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v6 >= (v3 - (uint64_t)v4) >> 4) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 16 * v6;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v2, v6);
  uint64_t v4 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[16 * v6];
  uint64_t v11 = &v7[16 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    long long v13 = *((_OWORD *)v8 - 1);
    v8 -= 16;
    *(_OWORD *)(v12 - 16) = v13;
    v12 -= 16;
  }
  while (v8 != v4);
  uint64_t v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

BOOL cv3d::cv::gess::internal::ExtractQuadFacesByDiagonal(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  if (*a2 != -1)
  {
    int v21 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>(a1, &v21, (unsigned __int8 *)__p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
    LOBYTE(v22) = 0;
    std::vector<BOOL>::vector(__p, v4, (unsigned __int8 *)&v22);
    if (*(void *)(a1 + 136) != *(void *)(a1 + 128))
    {
      unint64_t v5 = 0;
      unsigned int v6 = 1;
      do
      {
        unint64_t v7 = v5 >> 6;
        uint64_t v8 = 1 << v5;
        if ((*((void *)__p[0] + (v5 >> 6)) & (1 << v5)) == 0)
        {
          unsigned int v22 = v6 - 1;
          if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(a1 + 104, &v22) + 12) != -1)
          {
            *((void *)__p[0] + v7) |= v8;
            unsigned int v22 = v6 - 1;
            uint64_t v10 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v22);
            *(void *)((char *)__p[0] + (((unint64_t)*v10 >> 3) & 0x1FFFFFF8)) |= 1 << *v10;
            unsigned int v22 = v6 - 1;
            uint64_t v11 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v5);
            if ((*v11 & v12) == 0)
            {
              long long v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v22);
              float v14 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v13);
              if ((*v14 & v15) == 0)
              {
                unsigned int v22 = *a2;
                uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), &v22);
                if (*(void *)(v16 + 48) <= v5) {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                if ((*(void *)(*(void *)(v16 + 40) + 8 * v7) & v8) != 0)
                {
                  unsigned int v22 = v6 - 1;
                  cv3d::cv::gess::internal::FaceMergingByDiagonal(a1, &v22, &v21);
                }
              }
            }
          }
        }
        unint64_t v5 = v6;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) > v6++);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  return v2 != -1;
}

void sub_24F4DADA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FinalFaceMergingByDiagonal(uint64_t a1, float *a2, int *a3)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v38, v5, (unsigned __int8 *)&__p);
  if (*(void *)(a1 + 136) != *(void *)(a1 + 128))
  {
    unint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      if ((*((void *)v38 + (v6 >> 6)) & (1 << v6)) == 0)
      {
        LODWORD(__p) = v7 - 1;
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(a1 + 104, (unsigned int *)&__p) + 12) != -1)
        {
          *((void *)v38 + (v6 >> 6)) |= 1 << v6;
          LODWORD(__p) = v7 - 1;
          uint64_t v9 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
          *(void *)((char *)v38 + (((unint64_t)*v9 >> 3) & 0x1FFFFFF8)) |= 1 << *v9;
          LODWORD(__p) = v7 - 1;
          uint64_t v10 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v6);
          if ((*v10 & v11) == 0)
          {
            uint64_t v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
            long long v13 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v12);
            if ((*v13 & v14) == 0)
            {
              long long __p = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              *(_DWORD *)&v32[8] = 0;
              uint64_t v33 = 0;
              uint64_t v34 = 0;
              *(void *)unsigned int v32 = v7 - 1;
              uint64_t v15 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v32);
              cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges(a1, (unsigned int *)(v15 + 16), &__p);
              *(_DWORD *)unsigned int v32 = v7 - 1;
              uint64_t v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v32);
              uint64_t v17 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v16);
              cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges(a1, (unsigned int *)(v17 + 16), (void **)&v32[4]);
              float32x4_t v18 = __p;
              BOOL v20 = v36 - (unsigned char *)__p == 12 && v33 - *(void *)&v32[4] == 12;
              if (*(void *)&v32[4])
              {
                uint64_t v33 = *(void *)&v32[4];
                operator delete(*(void **)&v32[4]);
                float32x4_t v18 = __p;
              }
              if (v18)
              {
                uint64_t v36 = v18;
                operator delete(v18);
              }
              if (v20)
              {
                LODWORD(__p) = v7 - 1;
                float v21 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength(a1, (unsigned int *)&__p);
                if (v21 > *a2 && *a2 + *a2 > v21)
                {
                  float v22 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, __p);
                  uint64_t v23 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
                  float v24 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, *(_DWORD *)(v23 + 8));
                  float32x4_t v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
                  float v26 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, *v25);
                  float32x4_t v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
                  uint64_t v28 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v27);
                  float v29 = v22 + cv3d::cv::gess::mesh::PolyMesh::Angle(a1, *(_DWORD *)(v28 + 8));
                  if (v29 > 60.0 && v29 < 120.0 && (float)(v24 + v26) > 60.0 && (float)(v24 + v26) < 120.0) {
                    cv3d::cv::gess::internal::FaceMergingByDiagonal(a1, (unsigned int *)&__p, a3);
                  }
                }
              }
            }
          }
        }
      }
      unint64_t v6 = v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) > v7++);
  }
  if (v38) {
    operator delete(v38);
  }
  return 1;
}

void sub_24F4DB110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::mesh::PolyMesh::HEdgeLength(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = a1 + 104;
  unint64_t v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  uint64_t v6 = cv3d::cv::gess::mesh::Topology::h(v4, v5);
  float32x4_t v11 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v6 + 12));
  uint64_t v7 = cv3d::cv::gess::mesh::Topology::h(v4, a2);
  float32x4_t v8 = vsubq_f32(v11, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v7 + 12)));
  float32x4_t v9 = vmulq_f32(v8, v8);
  v9.i32[3] = 0;
  return sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9)));
}

void *std::__split_buffer<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge,std::allocator<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(20 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  float32x4_t v8 = &v7[20 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[20 * a2];
  return a1;
}

void std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    float32x4_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_24F4DB3E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 2);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(float *)(a2 - 4) < *(float *)(v10 + 16))
                {
                  int v113 = *(_DWORD *)(v10 + 16);
                  long long v104 = *(_OWORD *)v10;
                  long long v47 = *(_OWORD *)(a2 - 20);
                  *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 - 4);
                  *(_OWORD *)unint64_t v10 = v47;
                  *(_DWORD *)(a2 - 4) = v113;
                  *(_OWORD *)(a2 - 20) = v104;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)v10, (float *)(v10 + 20), (float *)(a2 - 20));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(v10, v10 + 20, v10 + 40, a2 - 20);
                break;
              case 5uLL:
                int v48 = (long long *)(v10 + 20);
                float32x4_t v49 = (long long *)(v10 + 40);
                unsigned int v50 = (long long *)(v10 + 60);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(v10, v10 + 20, v10 + 40, v10 + 60);
                if (*(float *)(a2 - 4) < *(float *)(v10 + 76))
                {
                  long long v51 = *v50;
                  int v52 = *(_DWORD *)(v10 + 76);
                  int v53 = *(_DWORD *)(a2 - 4);
                  *unsigned int v50 = *(_OWORD *)(a2 - 20);
                  *(_DWORD *)(v10 + 76) = v53;
                  *(_DWORD *)(a2 - 4) = v52;
                  *(_OWORD *)(a2 - 20) = v51;
                  if (*(float *)(v10 + 76) < *(float *)(v10 + 56))
                  {
                    int v54 = *(_DWORD *)(v10 + 56);
                    long long v55 = *v49;
                    long long *v49 = *v50;
                    *(_DWORD *)(v10 + 56) = *(_DWORD *)(v10 + 76);
                    *unsigned int v50 = v55;
                    *(_DWORD *)(v10 + 76) = v54;
                    if (*(float *)(v10 + 56) < *(float *)(v10 + 36))
                    {
                      int v56 = *(_DWORD *)(v10 + 36);
                      long long v57 = *v48;
                      *int v48 = *v49;
                      *(_DWORD *)(v10 + 36) = *(_DWORD *)(v10 + 56);
                      long long *v49 = v57;
                      *(_DWORD *)(v10 + 56) = v56;
                      if (*(float *)(v10 + 36) < *(float *)(v10 + 16))
                      {
                        int v114 = *(_DWORD *)(v10 + 16);
                        long long v105 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v48;
                        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 + 36);
                        *int v48 = v105;
                        *(_DWORD *)(v10 + 36) = v114;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 479)
          {
            float32x4_t v58 = (_OWORD *)(v10 + 20);
            BOOL v60 = v10 == a2 || v58 == (_OWORD *)a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                uint64_t v62 = (_OWORD *)v10;
                do
                {
                  float v63 = *((float *)v62 + 9);
                  float v64 = *((float *)v62 + 4);
                  uint64_t v62 = v58;
                  if (v63 < v64)
                  {
                    long long v106 = *v58;
                    uint64_t v65 = v61;
                    while (1)
                    {
                      uint64_t v66 = v10 + v65;
                      *(_OWORD *)(v66 + 20) = *(_OWORD *)(v10 + v65);
                      *(_DWORD *)(v66 + 36) = *(_DWORD *)(v10 + v65 + 16);
                      if (!v65) {
                        break;
                      }
                      v65 -= 20;
                      if (v63 >= *(float *)(v66 - 4))
                      {
                        uint64_t v67 = v10 + v65 + 20;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v67 = v10;
LABEL_83:
                    *(_OWORD *)uint64_t v67 = v106;
                    *(float *)(v67 + 16) = v63;
                  }
                  float32x4_t v58 = (_OWORD *)((char *)v62 + 20);
                  v61 += 20;
                }
                while ((_OWORD *)((char *)v62 + 20) != (_OWORD *)a2);
              }
            }
            else if (!v60)
            {
              do
              {
                float v94 = *(float *)(a1 + 36);
                float v95 = *(float *)(a1 + 16);
                a1 = (unint64_t)v58;
                if (v94 < v95)
                {
                  long long v109 = *v58;
                  int v96 = v58;
                  do
                  {
                    *int v96 = *(_OWORD *)((char *)v96 - 20);
                    *((_DWORD *)v96 + 4) = *((_DWORD *)v96 - 1);
                    float v97 = *((float *)v96 - 6);
                    int v96 = (_OWORD *)((char *)v96 - 20);
                  }
                  while (v94 < v97);
                  *int v96 = v109;
                  *((float *)v96 + 4) = v94;
                }
                float32x4_t v58 = (_OWORD *)((char *)v58 + 20);
              }
              while (a1 + 20 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v68 = (v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = v10 + 20 * v71;
                  if (2 * v70 + 2 < (uint64_t)v12 && *(float *)(v10 + 20 * v71 + 16) < *(float *)(v72 + 36))
                  {
                    v72 += 20;
                    uint64_t v71 = 2 * v70 + 2;
                  }
                  float v73 = *(float *)(v10 + 20 * v70 + 16);
                  if (*(float *)(v72 + 16) >= v73)
                  {
                    unint64_t v74 = v10 + 20 * v70;
                    long long v107 = *(_OWORD *)v74;
                    do
                    {
                      unint64_t v75 = v74;
                      unint64_t v74 = v72;
                      long long v76 = *(_OWORD *)v72;
                      *(_DWORD *)(v75 + 16) = *(_DWORD *)(v72 + 16);
                      *(_OWORD *)unint64_t v75 = v76;
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v77 = (2 * v71) | 1;
                      unint64_t v72 = v10 + 20 * v77;
                      uint64_t v78 = 2 * v71 + 2;
                      if (v78 < (uint64_t)v12 && *(float *)(v10 + 20 * v77 + 16) < *(float *)(v72 + 36))
                      {
                        v72 += 20;
                        uint64_t v77 = v78;
                      }
                      uint64_t v71 = v77;
                    }
                    while (*(float *)(v72 + 16) >= v73);
                    *(_OWORD *)unint64_t v74 = v107;
                    *(float *)(v74 + 16) = v73;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              int64_t v79 = v11 / 0x14uLL;
              do
              {
                uint64_t v80 = 0;
                int v115 = *(_DWORD *)(v10 + 16);
                long long v108 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 20 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(float *)(v82 + 20 * v83 + 16) < *(float *)(v81 + 36))
                  {
                    v81 += 20;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  *(_DWORD *)(v82 + 16) = *(_DWORD *)(v81 + 16);
                  *(_OWORD *)unint64_t v82 = v86;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 20;
                if (v81 == a2)
                {
                  *(_DWORD *)(v81 + 16) = v115;
                  *(_OWORD *)unint64_t v81 = v108;
                }
                else
                {
                  long long v87 = *(_OWORD *)a2;
                  *(_DWORD *)(v81 + 16) = *(_DWORD *)(a2 + 16);
                  *(_OWORD *)unint64_t v81 = v87;
                  *(_DWORD *)(a2 + 16) = v115;
                  *(_OWORD *)a2 = v108;
                  uint64_t v88 = v81 - v10 + 20;
                  if (v88 >= 21)
                  {
                    unint64_t v89 = (v88 / 0x14uLL - 2) >> 1;
                    float v90 = *(float *)(v81 + 16);
                    if (*(float *)(v10 + 20 * v89 + 16) < v90)
                    {
                      long long v100 = *(_OWORD *)v81;
                      do
                      {
                        unint64_t v91 = v81;
                        unint64_t v81 = v10 + 20 * v89;
                        long long v92 = *(_OWORD *)v81;
                        *(_DWORD *)(v91 + 16) = *(_DWORD *)(v81 + 16);
                        *(_OWORD *)unint64_t v91 = v92;
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                      }
                      while (*(float *)(v10 + 20 * v89 + 16) < v90);
                      *(_OWORD *)unint64_t v81 = v100;
                      *(float *)(v81 + 16) = v90;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 20 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xA01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)a1, (float *)(a1 + 20 * (v12 >> 1)), (float *)(a2 - 20));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (float *)(a1 + 20 * v13 - 20);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)(a1 + 20), v16, (float *)(a2 - 40));
            uint64_t v17 = (float *)(a1 + 20 + 4 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)(a1 + 40), v17, (float *)(a2 - 60));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)v16, (float *)v14, v17);
            int v110 = *(_DWORD *)(a1 + 16);
            long long v101 = *(_OWORD *)a1;
            int v18 = *(_DWORD *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_DWORD *)(a1 + 16) = v18;
            *(_DWORD *)(v14 + 16) = v110;
            *(_OWORD *)unint64_t v14 = v101;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)(a1 + 20 * (v12 >> 1)), (float *)a1, (float *)(a2 - 20));
          }
          --a3;
          if (a4) {
            break;
          }
          float v19 = *(float *)(a1 + 16);
          if (*(float *)(a1 - 4) < v19) {
            goto LABEL_12;
          }
          long long v99 = *(_OWORD *)a1;
          if (v19 >= *(float *)(a2 - 4))
          {
            unint64_t v37 = a1 + 20;
            do
            {
              unint64_t v10 = v37;
              if (v37 >= a2) {
                break;
              }
              float v38 = *(float *)(v37 + 16);
              v37 += 20;
            }
            while (v19 >= v38);
          }
          else
          {
            unint64_t v35 = a1;
            do
            {
              unint64_t v10 = v35 + 20;
              float v36 = *(float *)(v35 + 36);
              v35 += 20;
            }
            while (v19 >= v36);
          }
          unint64_t v39 = a2;
          if (v10 < a2)
          {
            unint64_t v40 = a2;
            do
            {
              unint64_t v39 = v40 - 20;
              float v41 = *(float *)(v40 - 4);
              v40 -= 20;
            }
            while (v19 < v41);
          }
          while (v10 < v39)
          {
            int v112 = *(_DWORD *)(v10 + 16);
            long long v103 = *(_OWORD *)v10;
            long long v42 = *(_OWORD *)v39;
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v39 + 16);
            *(_OWORD *)unint64_t v10 = v42;
            *(_DWORD *)(v39 + 16) = v112;
            *(_OWORD *)unint64_t v39 = v103;
            do
            {
              float v43 = *(float *)(v10 + 36);
              v10 += 20;
            }
            while (v19 >= v43);
            do
            {
              float v44 = *(float *)(v39 - 4);
              v39 -= 20;
            }
            while (v19 < v44);
          }
          uint64_t v45 = (long long *)(v10 - 20);
          BOOL v4 = v10 - 20 >= a1;
          BOOL v5 = v10 - 20 == a1;
          if (v10 - 20 != a1)
          {
            long long v46 = *v45;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 - 4);
            *(_OWORD *)a1 = v46;
          }
          a4 = 0;
          long long *v45 = v99;
          *(float *)(v10 - 4) = v19;
        }
        float v19 = *(float *)(a1 + 16);
LABEL_12:
        uint64_t v20 = 0;
        long long v98 = *(_OWORD *)a1;
        do
        {
          float v21 = *(float *)(a1 + v20 + 36);
          v20 += 20;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 20)
        {
          unint64_t v26 = a2;
          while (v22 < v26)
          {
            unint64_t v24 = v26 - 20;
            float v27 = *(float *)(v26 - 4);
            v26 -= 20;
            if (v27 < v19) {
              goto LABEL_22;
            }
          }
          unint64_t v24 = v26;
        }
        else
        {
          do
          {
            unint64_t v24 = v23 - 20;
            float v25 = *(float *)(v23 - 4);
            v23 -= 20;
          }
          while (v25 >= v19);
        }
LABEL_22:
        unint64_t v10 = v22;
        if (v22 < v24)
        {
          unint64_t v28 = v24;
          do
          {
            int v111 = *(_DWORD *)(v10 + 16);
            long long v102 = *(_OWORD *)v10;
            long long v29 = *(_OWORD *)v28;
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v28 + 16);
            *(_OWORD *)unint64_t v10 = v29;
            *(_DWORD *)(v28 + 16) = v111;
            *(_OWORD *)unint64_t v28 = v102;
            do
            {
              float v30 = *(float *)(v10 + 36);
              v10 += 20;
            }
            while (v30 < v19);
            do
            {
              float v31 = *(float *)(v28 - 4);
              v28 -= 20;
            }
            while (v31 >= v19);
          }
          while (v10 < v28);
        }
        unsigned int v32 = (long long *)(v10 - 20);
        if (v10 - 20 != a1)
        {
          long long v33 = *v32;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 - 4);
          *(_OWORD *)a1 = v33;
        }
        *unsigned int v32 = v98;
        *(float *)(v10 - 4) = v19;
        if (v22 >= v24) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*,false>(a1, v10 - 20, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(a1, v10 - 20);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(v10, a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 20;
    if (!v34) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(long long *result, float *a2, float *a3)
{
  float v3 = a2[4];
  float v4 = a3[4];
  if (v3 >= *((float *)result + 4))
  {
    if (v4 < v3)
    {
      int v8 = *((_DWORD *)a2 + 4);
      long long v9 = *(_OWORD *)a2;
      int v10 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v10;
      *(_OWORD *)a3 = v9;
      *((_DWORD *)a3 + 4) = v8;
      if (a2[4] < *((float *)result + 4))
      {
        int v11 = *((_DWORD *)result + 4);
        long long v12 = *result;
        int v13 = *((_DWORD *)a2 + 4);
        uint64_t *result = *(_OWORD *)a2;
        *((_DWORD *)result + 4) = v13;
        *(_OWORD *)a2 = v12;
        *((_DWORD *)a2 + 4) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      int v14 = *((_DWORD *)result + 4);
      long long v15 = *result;
      int v16 = *((_DWORD *)a2 + 4);
      uint64_t *result = *(_OWORD *)a2;
      *((_DWORD *)result + 4) = v16;
      *(_OWORD *)a2 = v15;
      *((_DWORD *)a2 + 4) = v14;
      if (a3[4] >= a2[4]) {
        return result;
      }
      int v5 = *((_DWORD *)a2 + 4);
      long long v6 = *(_OWORD *)a2;
      int v17 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v17;
    }
    else
    {
      int v5 = *((_DWORD *)result + 4);
      long long v6 = *result;
      int v7 = *((_DWORD *)a3 + 4);
      uint64_t *result = *(_OWORD *)a3;
      *((_DWORD *)result + 4) = v7;
    }
    *(_OWORD *)a3 = v6;
    *((_DWORD *)a3 + 4) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 4) < *(float *)(a1 + 16))
      {
        int v6 = *(_DWORD *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        int v8 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 20) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)a1, (float *)(a1 + 20), (float *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      int v17 = (long long *)(a1 + 20);
      int v18 = (long long *)(a1 + 40);
      float v19 = (long long *)(a1 + 60);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(a1, a1 + 20, a1 + 40, a1 + 60);
      if (*(float *)(a2 - 4) < *(float *)(a1 + 76))
      {
        int v20 = *(_DWORD *)(a1 + 76);
        long long v21 = *v19;
        int v22 = *(_DWORD *)(a2 - 4);
        *float v19 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 76) = v22;
        *(_OWORD *)(a2 - 20) = v21;
        *(_DWORD *)(a2 - 4) = v20;
        if (*(float *)(a1 + 76) < *(float *)(a1 + 56))
        {
          int v23 = *(_DWORD *)(a1 + 56);
          long long v24 = *v18;
          *int v18 = *v19;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
          *float v19 = v24;
          *(_DWORD *)(a1 + 76) = v23;
          if (*(float *)(a1 + 56) < *(float *)(a1 + 36))
          {
            int v25 = *(_DWORD *)(a1 + 36);
            long long v26 = *v17;
            *int v17 = *v18;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
            *int v18 = v26;
            *(_DWORD *)(a1 + 56) = v25;
            if (*(float *)(a1 + 36) < *(float *)(a1 + 16))
            {
              int v27 = *(_DWORD *)(a1 + 16);
              long long v28 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
              *int v17 = v28;
              *(_DWORD *)(a1 + 36) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)a1, (float *)(a1 + 20), (float *)(a1 + 40));
      uint64_t v10 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)(v10 + 16);
    if (v13 < *(float *)(v9 + 16))
    {
      long long v29 = *(_OWORD *)v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 60) = *(_OWORD *)(a1 + v14 + 40);
        *(_DWORD *)(v15 + 76) = *(_DWORD *)(a1 + v14 + 56);
        if (v14 == -40) {
          break;
        }
        v14 -= 20;
        if (v13 >= *(float *)(v15 + 36))
        {
          uint64_t v16 = a1 + v14 + 60;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v16 = v29;
      *(float *)(v16 + 16) = v13;
      if (++v12 == 8) {
        return v10 + 20 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 20;
    v10 += 20;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((long long *)a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 16);
  if (result.n128_f32[0] < *(float *)(a3 + 16))
  {
    int v9 = *(_DWORD *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    int v10 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_DWORD *)(a4 + 16) = v9;
    result.n128_u32[0] = *(_DWORD *)(a3 + 16);
    if (result.n128_f32[0] < *(float *)(a2 + 16))
    {
      int v11 = *(_DWORD *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      int v12 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v11;
      result.n128_u32[0] = *(_DWORD *)(a2 + 16);
      if (result.n128_f32[0] < *(float *)(a1 + 16))
      {
        int v13 = *(_DWORD *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        int v14 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  long long v7 = v8;
  int v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      int v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      int v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v18 = &v15[16 * v12];
    float v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    long long v21 = v18;
    do
    {
      *(_OWORD *)long long v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    int v22 = &v15[16 * v14];
    long long v24 = (char *)*a1;
    int v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        long long v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v18 - 1) = v25;
        v18 -= 16;
      }
      while (v23 != v24);
      int v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v48 = *(float *)(a2 - 16);
                float v49 = *(float *)v10;
                if (v48 < *(float *)v10)
                {
                  *(float *)unint64_t v10 = v48;
                  *(float *)(a2 - 16) = v49;
                  int v50 = *(_DWORD *)(v10 + 4);
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 12);
                  *(_DWORD *)(a2 - 12) = v50;
                  int v51 = *(_DWORD *)(v10 + 8);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 8) = v51;
                  int v52 = *(_DWORD *)(v10 + 12);
                  *(_DWORD *)(v10 + 12) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v52;
                }
                break;
              case 3uLL:
                __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v10, v10 + 16, a2 - 16);
                break;
              case 4uLL:
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((float *)v10, (float *)(v10 + 16), (float *)(v10 + 32), (float *)(a2 - 16));
                break;
              case 5uLL:
                __n128 result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,0>(v10, v10 + 16, v10 + 32, v10 + 48, (_DWORD *)(a2 - 16));
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            unint64_t v53 = v10 + 16;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 0;
                unint64_t v57 = v10;
                do
                {
                  unint64_t v58 = v53;
                  float v59 = *(float *)(v57 + 16);
                  float v60 = *(float *)v57;
                  if (v59 < *(float *)v57)
                  {
                    uint64_t v61 = *(void *)(v57 + 20);
                    int v62 = *(_DWORD *)(v57 + 28);
                    uint64_t v63 = v56;
                    while (1)
                    {
                      uint64_t v64 = v10 + v63;
                      *(float *)(v64 + 16) = v60;
                      *(void *)(v64 + 20) = *(void *)(v10 + v63 + 4);
                      *(_DWORD *)(v64 + 28) = *(_DWORD *)(v10 + v63 + 12);
                      if (!v63) {
                        break;
                      }
                      float v60 = *(float *)(v64 - 16);
                      v63 -= 16;
                      if (v59 >= v60)
                      {
                        uint64_t v65 = v10 + v63 + 16;
                        goto LABEL_82;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_82:
                    *(float *)uint64_t v65 = v59;
                    *(void *)(v65 + 4) = v61;
                    *(_DWORD *)(v65 + 12) = v62;
                  }
                  unint64_t v53 = v58 + 16;
                  v56 += 16;
                  unint64_t v57 = v58;
                }
                while (v58 + 16 != a2);
              }
            }
            else if (!v55)
            {
              long long v98 = (float *)(v10 + 28);
              do
              {
                unint64_t v99 = v53;
                float v100 = *(float *)(v9 + 16);
                float v101 = *(float *)v9;
                if (v100 < *(float *)v9)
                {
                  uint64_t v102 = *(void *)(v9 + 20);
                  int v103 = *(_DWORD *)(v9 + 28);
                  long long v104 = v98;
                  do
                  {
                    long long v105 = v104;
                    *(v104 - 3) = v101;
                    *((void *)v104 - 1) = *((void *)v104 - 3);
                    int v106 = *((_DWORD *)v104 - 4);
                    v104 -= 4;
                    *(_DWORD *)long long v105 = v106;
                    float v101 = *(v105 - 11);
                  }
                  while (v100 < v101);
                  *(v104 - 3) = v100;
                  *((void *)v104 - 1) = v102;
                  *(_DWORD *)long long v104 = v103;
                }
                unint64_t v53 = v99 + 16;
                v98 += 4;
                unint64_t v9 = v99;
              }
              while (v99 + 16 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 16 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(float *)v70 < *(float *)(v70 + 16))
                  {
                    v70 += 16;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = v10 + 16 * v68;
                  float v72 = *(float *)v70;
                  float v73 = *(float *)v71;
                  if (*(float *)v70 >= *(float *)v71)
                  {
                    uint64_t v74 = *(void *)(v71 + 4);
                    int v75 = *(_DWORD *)(v71 + 12);
                    do
                    {
                      long long v76 = (float *)v71;
                      unint64_t v71 = v70;
                      *long long v76 = v72;
                      v76[1] = *(float *)(v70 + 4);
                      v76[2] = *(float *)(v70 + 8);
                      void v76[3] = *(float *)(v70 + 12);
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 16 * v69;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(float *)v70 < *(float *)(v70 + 16))
                      {
                        v70 += 16;
                        uint64_t v69 = v78;
                      }
                      float v72 = *(float *)v70;
                    }
                    while (*(float *)v70 >= v73);
                    *(float *)unint64_t v71 = v73;
                    *(void *)(v71 + 4) = v74;
                    *(_DWORD *)(v71 + 12) = v75;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v79 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v80 = 0;
                float v81 = *(float *)v10;
                int v82 = *(_DWORD *)(v10 + 4);
                int v83 = *(_DWORD *)(v10 + 8);
                int v84 = *(_DWORD *)(v10 + 12);
                int64_t v85 = (_DWORD *)v10;
                do
                {
                  long long v86 = v85;
                  v85 += 4 * v80 + 4;
                  uint64_t v87 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v88 = v87 + 2;
                  if (v88 < v79 && *(float *)v85 < *((float *)v85 + 4))
                  {
                    v85 += 4;
                    uint64_t v80 = v88;
                  }
                  *long long v86 = *v85;
                  v86[1] = v85[1];
                  v86[2] = v85[2];
                  v86[3] = v85[3];
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v85 == (_DWORD *)(a2 - 16))
                {
                  *(float *)int64_t v85 = v81;
                  v85[1] = v82;
                  v85[2] = v83;
                  v85[3] = v84;
                }
                else
                {
                  *int64_t v85 = *(_DWORD *)(a2 - 16);
                  v85[1] = *(_DWORD *)(a2 - 12);
                  v85[2] = *(_DWORD *)(a2 - 8);
                  v85[3] = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 16) = v81;
                  *(_DWORD *)(a2 - 12) = v82;
                  *(_DWORD *)(a2 - 8) = v83;
                  *(_DWORD *)(a2 - 4) = v84;
                  uint64_t v89 = (uint64_t)v85 - v10 + 16;
                  if (v89 >= 17)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 4) - 2) >> 1;
                    unint64_t v91 = (float *)(v10 + 16 * v90);
                    float v92 = *v91;
                    float v93 = *(float *)v85;
                    if (*v91 < *(float *)v85)
                    {
                      uint64_t v94 = *(void *)(v85 + 1);
                      int v95 = v85[3];
                      do
                      {
                        int v96 = (float *)v85;
                        int64_t v85 = v91;
                        *int v96 = v92;
                        v96[1] = v91[1];
                        v96[2] = v91[2];
                        v96[3] = v91[3];
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = (float *)(v10 + 16 * v90);
                        float v92 = *v91;
                      }
                      while (*v91 < v93);
                      *(float *)int64_t v85 = v93;
                      *(void *)(v85 + 1) = v94;
                      v85[3] = v95;
                    }
                  }
                }
                a2 -= 16;
              }
              while (v79-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = v10 + 16 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v9, v9 + 16 * (v12 >> 1), a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v9 + 16, v14 - 16, a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v9 + 32, v9 + 16 + 16 * v13, a2 - 48);
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v14 - 16, v14, v9 + 16 + 16 * v13);
            float v15 = *(float *)v9;
            *(_DWORD *)unint64_t v9 = *(_DWORD *)v14;
            *(float *)uint64_t v14 = v15;
            uint64_t v16 = *(void *)(v9 + 4);
            *(void *)(v9 + 4) = *(void *)(v14 + 4);
            *(void *)(v14 + 4) = v16;
            int v17 = *(_DWORD *)(v9 + 12);
            *(_DWORD *)(v9 + 12) = *(_DWORD *)(v14 + 12);
            *(_DWORD *)(v14 + 12) = v17;
          }
          else
          {
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v9 + 16 * (v12 >> 1), v9, a2 - 16);
          }
          --a3;
          float v18 = *(float *)v9;
          if ((a4 & 1) != 0 || *(float *)(v9 - 16) < v18) {
            break;
          }
          if (v18 >= *(float *)(a2 - 16))
          {
            unint64_t v36 = v9 + 16;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              v36 += 16;
            }
            while (v18 >= *(float *)v10);
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              float v35 = *(float *)(v10 + 16);
              v10 += 16;
            }
            while (v18 >= v35);
          }
          unint64_t v37 = (float *)a2;
          if (v10 < a2)
          {
            unint64_t v37 = (float *)a2;
            do
            {
              float v38 = *(v37 - 4);
              v37 -= 4;
            }
            while (v18 < v38);
          }
          uint64_t v39 = *(void *)(v9 + 4);
          int v40 = *(_DWORD *)(v9 + 12);
          if (v10 < (unint64_t)v37)
          {
            float v41 = *(float *)v10;
            float v42 = *v37;
            do
            {
              *(float *)unint64_t v10 = v42;
              *unint64_t v37 = v41;
              int v43 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v37[1];
              *((_DWORD *)v37 + 1) = v43;
              int v44 = *(_DWORD *)(v10 + 8);
              *(float *)(v10 + 8) = v37[2];
              *((_DWORD *)v37 + 2) = v44;
              int v45 = *(_DWORD *)(v10 + 12);
              *(float *)(v10 + 12) = v37[3];
              *((_DWORD *)v37 + 3) = v45;
              do
              {
                float v46 = *(float *)(v10 + 16);
                v10 += 16;
                float v41 = v46;
              }
              while (v18 >= v46);
              do
              {
                float v47 = *(v37 - 4);
                v37 -= 4;
                float v42 = v47;
              }
              while (v18 < v47);
            }
            while (v10 < (unint64_t)v37);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
            *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 - 12);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(v9 + 12) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(float *)(v10 - 16) = v18;
          *(void *)(v10 - 12) = v39;
          *(_DWORD *)(v10 - 4) = v40;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(v9 + 4);
        int v21 = *(_DWORD *)(v9 + 12);
        do
        {
          float v22 = *(float *)(v9 + v19 + 16);
          v19 += 16;
        }
        while (v22 < v18);
        unint64_t v23 = v9 + v19;
        long long v24 = (float *)a2;
        if (v19 == 16)
        {
          long long v24 = (float *)a2;
          do
          {
            if (v23 >= (unint64_t)v24) {
              break;
            }
            float v26 = *(v24 - 4);
            v24 -= 4;
          }
          while (v26 >= v18);
        }
        else
        {
          do
          {
            float v25 = *(v24 - 4);
            v24 -= 4;
          }
          while (v25 >= v18);
        }
        if (v23 >= (unint64_t)v24)
        {
          unint64_t v10 = v9 + v19;
        }
        else
        {
          float v27 = *v24;
          unint64_t v10 = v9 + v19;
          long long v28 = v24;
          do
          {
            *(float *)unint64_t v10 = v27;
            float *v28 = v22;
            int v29 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v28[1];
            *((_DWORD *)v28 + 1) = v29;
            int v30 = *(_DWORD *)(v10 + 8);
            *(float *)(v10 + 8) = v28[2];
            *((_DWORD *)v28 + 2) = v30;
            int v31 = *(_DWORD *)(v10 + 12);
            *(float *)(v10 + 12) = v28[3];
            *((_DWORD *)v28 + 3) = v31;
            do
            {
              float v32 = *(float *)(v10 + 16);
              v10 += 16;
              float v22 = v32;
            }
            while (v32 < v18);
            do
            {
              float v33 = *(v28 - 4);
              v28 -= 4;
              float v27 = v33;
            }
            while (v33 >= v18);
          }
          while (v10 < (unint64_t)v28);
        }
        if (v10 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(v9 + 12) = *(_DWORD *)(v10 - 4);
        }
        *(float *)(v10 - 16) = v18;
        *(void *)(v10 - 12) = v20;
        *(_DWORD *)(v10 - 4) = v21;
        if (v23 >= (unint64_t)v24) {
          break;
        }
LABEL_33:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,false>(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v9, v10 - 16);
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 16;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((float *)a1, (float *)a2, (float *)a3, (float *)a4);
  float v11 = *(float *)a4;
  if (*(float *)a5 < *(float *)a4)
  {
    *(_DWORD *)a4 = *a5;
    *(float *)a5 = v11;
    int v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = a5[1];
    a5[1] = v12;
    int v13 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = a5[2];
    a5[2] = v13;
    int v14 = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = a5[3];
    a5[3] = v14;
    float v15 = *(float *)a3;
    if (*(float *)a4 < *(float *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(float *)a4 = v15;
      int v16 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v16;
      int v17 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v17;
      int v18 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a4 + 12) = v18;
      float v19 = *(float *)a2;
      if (*(float *)a3 < *(float *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(float *)a3 = v19;
        int v20 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v20;
        int v21 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v21;
        int v22 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = v22;
        float v23 = *(float *)a1;
        if (*(float *)a2 < *(float *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(float *)a2 = v23;
          int v24 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a2 + 4) = v24;
          int v25 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v25;
          int v26 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)result;
  float v5 = *(float *)a3;
  if (*(float *)a2 < *(float *)result)
  {
    if (v5 >= v3)
    {
      *(float *)uint64_t result = v3;
      *(float *)a2 = v4;
      int v16 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v16;
      int v17 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v6 = (int *)(a2 + 12);
      int v18 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 8) = v17;
      int v19 = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = v18;
      *(_DWORD *)(a2 + 12) = v19;
      if (*(float *)a3 >= v4) {
        return result;
      }
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      int v20 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v20;
      int v8 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    }
    else
    {
      uint64_t v6 = (int *)(result + 12);
      *(float *)uint64_t result = v5;
      *(float *)a3 = v4;
      int v7 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v7;
      int v8 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 8) = v8;
    int v12 = (int *)(a3 + 12);
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    int v9 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v9;
    int v10 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v10;
    int v12 = (int *)(a2 + 12);
    int v11 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v11;
    float v13 = *(float *)result;
    if (*(float *)a2 < *(float *)result)
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)a2;
      *(float *)a2 = v13;
      int v14 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v14;
      int v15 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v15;
      uint64_t v6 = (int *)(result + 12);
LABEL_10:
      int v21 = *v6;
      *uint64_t v6 = *v12;
      *int v12 = v21;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 16);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 16) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v8;
        int v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v9;
        int v10 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((float *)a1, (float *)(a1 + 16), (float *)(a1 + 32), (float *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,0>(a1, a1 + 16, a1 + 32, a1 + 48, (_DWORD *)(a2 - 16));
      return 1;
    default:
      int v11 = (float *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 16, a1 + 32);
      uint64_t v12 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    float v15 = *(float *)v12;
    float v16 = *v11;
    if (*(float *)v12 < *v11)
    {
      uint64_t v17 = *(void *)(v12 + 4);
      int v18 = *(_DWORD *)(v12 + 12);
      uint64_t v19 = v13;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(float *)(v20 + 48) = v16;
        *(void *)(v20 + 52) = *(void *)(a1 + v19 + 36);
        *(_DWORD *)(v20 + 60) = *(_DWORD *)(a1 + v19 + 44);
        if (v19 == -32) {
          break;
        }
        float v16 = *(float *)(v20 + 16);
        v19 -= 16;
        if (v15 >= v16)
        {
          uint64_t v21 = a1 + v19 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *(float *)uint64_t v21 = v15;
      *(void *)(v21 + 4) = v17;
      *(_DWORD *)(v21 + 12) = v18;
      if (++v14 == 8) {
        return v12 + 16 == a2;
      }
    }
    int v11 = (float *)v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  float v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *((_DWORD *)a3 + 1);
    a3[1] = a4[1];
    *((_DWORD *)a4 + 1) = v10;
    int v11 = *((_DWORD *)a3 + 2);
    a3[2] = a4[2];
    *((_DWORD *)a4 + 2) = v11;
    int v12 = *((_DWORD *)a3 + 3);
    a3[3] = a4[3];
    *((_DWORD *)a4 + 3) = v12;
    float v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      int v14 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v14;
      int v15 = *((_DWORD *)a2 + 2);
      a2[2] = a3[2];
      *((_DWORD *)a3 + 2) = v15;
      int v16 = *((_DWORD *)a2 + 3);
      a2[3] = a3[3];
      *((_DWORD *)a3 + 3) = v16;
      float v17 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v17;
        int v18 = *((_DWORD *)a1 + 1);
        a1[1] = a2[1];
        *((_DWORD *)a2 + 1) = v18;
        int v19 = *((_DWORD *)a1 + 2);
        a1[2] = a2[2];
        *((_DWORD *)a2 + 2) = v19;
        int v20 = *((_DWORD *)a1 + 3);
        a1[3] = a2[3];
        *((_DWORD *)a2 + 3) = v20;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 2);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v44 = *(float *)(a2 - 12);
                float v45 = *(float *)v10;
                if (v44 < *(float *)v10)
                {
                  *(float *)unint64_t v10 = v44;
                  *(float *)(a2 - 12) = v45;
                  int v46 = *(_DWORD *)(v10 + 4);
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 8) = v46;
                  int v47 = *(_DWORD *)(v10 + 8);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v47;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v10, v10 + 12, a2 - 12);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)v10, (float *)(v10 + 12), (float *)(v10 + 24), (float *)(a2 - 12));
                break;
              case 5uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)v10, (float *)(v10 + 12), (float *)(v10 + 24), (float *)(v10 + 36));
                float v48 = *(float *)(a2 - 12);
                float v49 = *(float *)(v10 + 36);
                if (v48 < v49)
                {
                  *(float *)(v10 + 36) = v48;
                  *(float *)(a2 - 12) = v49;
                  int v50 = *(_DWORD *)(v10 + 40);
                  *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 8) = v50;
                  int v51 = *(_DWORD *)(v10 + 44);
                  *(_DWORD *)(v10 + 44) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v51;
                  float v52 = *(float *)(v10 + 36);
                  float v53 = *(float *)(v10 + 24);
                  if (v52 < v53)
                  {
                    *(float *)(v10 + 24) = v52;
                    *(float *)(v10 + 36) = v53;
                    int v54 = *(_DWORD *)(v10 + 40);
                    int v55 = *(_DWORD *)(v10 + 44);
                    uint64_t v56 = *(void *)(v10 + 28);
                    *(_DWORD *)(v10 + 28) = v54;
                    *(_DWORD *)(v10 + 32) = v55;
                    *(void *)(v10 + 40) = v56;
                    float v57 = *(float *)(v10 + 12);
                    if (v52 < v57)
                    {
                      *(float *)(v10 + 12) = v52;
                      *(float *)(v10 + 24) = v57;
                      uint64_t v58 = *(void *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v54;
                      *(_DWORD *)(v10 + 20) = v55;
                      *(void *)(v10 + 28) = v58;
                      float v59 = *(float *)v10;
                      if (v52 < *(float *)v10)
                      {
                        *(float *)unint64_t v10 = v52;
                        *(float *)(v10 + 12) = v59;
                        uint64_t v60 = *(void *)(v10 + 4);
                        *(_DWORD *)(v10 + 4) = v54;
                        *(_DWORD *)(v10 + 8) = v55;
                        *(void *)(v10 + 16) = v60;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 287)
          {
            unint64_t v61 = v10 + 12;
            BOOL v63 = v10 == a2 || v61 == a2;
            if (a4)
            {
              if (!v63)
              {
                uint64_t v64 = 0;
                unint64_t v65 = v10;
                do
                {
                  unint64_t v66 = v61;
                  float v67 = *(float *)(v65 + 12);
                  float v68 = *(float *)v65;
                  if (v67 < *(float *)v65)
                  {
                    uint64_t v69 = *(void *)(v65 + 16);
                    uint64_t v70 = v64;
                    while (1)
                    {
                      uint64_t v71 = v10 + v70;
                      *(float *)(v71 + 12) = v68;
                      int v72 = *(_DWORD *)(v10 + v70 + 8);
                      *(_DWORD *)(v71 + 16) = *(_DWORD *)(v10 + v70 + 4);
                      *(_DWORD *)(v71 + 20) = v72;
                      if (!v70) {
                        break;
                      }
                      float v68 = *(float *)(v71 - 12);
                      v70 -= 12;
                      if (v67 >= v68)
                      {
                        uint64_t v73 = v10 + v70 + 12;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v73 = v10;
LABEL_84:
                    *(float *)uint64_t v73 = v67;
                    *(void *)(v73 + 4) = v69;
                  }
                  unint64_t v61 = v66 + 12;
                  v64 += 12;
                  unint64_t v65 = v66;
                }
                while (v66 + 12 != a2);
              }
            }
            else if (!v63)
            {
              unint64_t v103 = v10 + 20;
              do
              {
                unint64_t v104 = v61;
                float v105 = *(float *)(v9 + 12);
                float v106 = *(float *)v9;
                if (v105 < *(float *)v9)
                {
                  uint64_t v107 = *(void *)(v9 + 16);
                  long long v108 = (float *)v103;
                  do
                  {
                    long long v109 = v108;
                    *(v108 - 2) = v106;
                    *(v108 - 1) = *(v108 - 4);
                    int v110 = *((_DWORD *)v108 - 3);
                    v108 -= 3;
                    *(_DWORD *)long long v109 = v110;
                    float v106 = *(v109 - 8);
                  }
                  while (v105 < v106);
                  *(v108 - 2) = v105;
                  *(void *)(v108 - 1) = v107;
                }
                unint64_t v61 = v104 + 12;
                v103 += 12;
                unint64_t v9 = v104;
              }
              while (v104 + 12 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v74 = (v12 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  unint64_t v78 = v10 + 12 * v77;
                  if (2 * v76 + 2 < (uint64_t)v12 && *(float *)v78 < *(float *)(v78 + 12))
                  {
                    v78 += 12;
                    uint64_t v77 = 2 * v76 + 2;
                  }
                  unint64_t v79 = v10 + 12 * v76;
                  float v80 = *(float *)v78;
                  float v81 = *(float *)v79;
                  if (*(float *)v78 >= *(float *)v79)
                  {
                    uint64_t v82 = *(void *)(v79 + 4);
                    do
                    {
                      int v83 = (float *)v79;
                      unint64_t v79 = v78;
                      float *v83 = v80;
                      v83[1] = *(float *)(v78 + 4);
                      v83[2] = *(float *)(v78 + 8);
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t v84 = 2 * v77;
                      uint64_t v77 = (2 * v77) | 1;
                      unint64_t v78 = v10 + 12 * v77;
                      uint64_t v85 = v84 + 2;
                      if (v85 < (uint64_t)v12 && *(float *)v78 < *(float *)(v78 + 12))
                      {
                        v78 += 12;
                        uint64_t v77 = v85;
                      }
                      float v80 = *(float *)v78;
                    }
                    while (*(float *)v78 >= v81);
                    *(float *)unint64_t v79 = v81;
                    *(void *)(v79 + 4) = v82;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              int64_t v86 = v11 / 0xCuLL;
              do
              {
                int64_t v87 = 0;
                float v88 = *(float *)v10;
                int v89 = *(_DWORD *)(v10 + 4);
                int v90 = *(_DWORD *)(v10 + 8);
                unint64_t v91 = (_DWORD *)v10;
                do
                {
                  float v92 = v91;
                  v91 += 3 * v87 + 3;
                  uint64_t v93 = 2 * v87;
                  uint64_t result = (2 * v87) | 1;
                  int64_t v87 = result;
                  uint64_t v94 = v93 + 2;
                  if (v94 < v86)
                  {
                    uint64_t result = (uint64_t)(v91 + 3);
                    if (*(float *)v91 < *((float *)v91 + 3))
                    {
                      v91 += 3;
                      int64_t v87 = v94;
                    }
                  }
                  *float v92 = *v91;
                  v92[1] = v91[1];
                  v92[2] = v91[2];
                }
                while (v87 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
                if (v91 == (_DWORD *)(a2 - 12))
                {
                  *(float *)unint64_t v91 = v88;
                  v91[1] = v89;
                  v91[2] = v90;
                }
                else
                {
                  _DWORD *v91 = *(_DWORD *)(a2 - 12);
                  v91[1] = *(_DWORD *)(a2 - 8);
                  v91[2] = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 12) = v88;
                  *(_DWORD *)(a2 - 8) = v89;
                  *(_DWORD *)(a2 - 4) = v90;
                  uint64_t v95 = (uint64_t)v91 - v10 + 12;
                  if (v95 >= 13)
                  {
                    unint64_t v96 = (v95 / 0xCuLL - 2) >> 1;
                    float v97 = (float *)(v10 + 12 * v96);
                    float v98 = *v97;
                    float v99 = *(float *)v91;
                    if (*v97 < *(float *)v91)
                    {
                      uint64_t v100 = *(void *)(v91 + 1);
                      do
                      {
                        float v101 = (float *)v91;
                        unint64_t v91 = v97;
                        float *v101 = v98;
                        v101[1] = v97[1];
                        v101[2] = v97[2];
                        if (!v96) {
                          break;
                        }
                        unint64_t v96 = (v96 - 1) >> 1;
                        float v97 = (float *)(v10 + 12 * v96);
                        float v98 = *v97;
                      }
                      while (*v97 < v99);
                      *(float *)unint64_t v91 = v99;
                      *(void *)(v91 + 1) = v100;
                    }
                  }
                }
                a2 -= 12;
              }
              while (v86-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          int v14 = (_DWORD *)(v10 + 12 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v9, v9 + 12 * (v12 >> 1), a2 - 12);
            unint64_t v15 = v9 + 12 * v13;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v9 + 12, v15 - 12, a2 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v9 + 24, v9 + 12 + 12 * v13, a2 - 36);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v15 - 12, (uint64_t)v14, v9 + 12 + 12 * v13);
            float v16 = *(float *)v9;
            *(_DWORD *)unint64_t v9 = *v14;
            *(float *)int v14 = v16;
            uint64_t v17 = *(void *)(v9 + 4);
            *(void *)(v9 + 4) = *(void *)(v15 + 4);
            *(void *)(v15 + 4) = v17;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v9 + 12 * (v12 >> 1), v9, a2 - 12);
          }
          --a3;
          float v18 = *(float *)v9;
          if ((a4 & 1) != 0 || *(float *)(v9 - 12) < v18) {
            break;
          }
          if (v18 >= *(float *)(a2 - 12))
          {
            unint64_t v34 = v9 + 12;
            do
            {
              unint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 12;
            }
            while (v18 >= *(float *)v10);
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              float v33 = *(float *)(v10 + 12);
              v10 += 12;
            }
            while (v18 >= v33);
          }
          float v35 = (float *)a2;
          if (v10 < a2)
          {
            float v35 = (float *)a2;
            do
            {
              float v36 = *(v35 - 3);
              v35 -= 3;
            }
            while (v18 < v36);
          }
          uint64_t v37 = *(void *)(v9 + 4);
          if (v10 < (unint64_t)v35)
          {
            float v38 = *(float *)v10;
            float v39 = *v35;
            do
            {
              *(float *)unint64_t v10 = v39;
              *float v35 = v38;
              int v40 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v35[1];
              *((_DWORD *)v35 + 1) = v40;
              int v41 = *(_DWORD *)(v10 + 8);
              *(float *)(v10 + 8) = v35[2];
              *((_DWORD *)v35 + 2) = v41;
              do
              {
                float v42 = *(float *)(v10 + 12);
                v10 += 12;
                float v38 = v42;
              }
              while (v18 >= v42);
              do
              {
                float v43 = *(v35 - 3);
                v35 -= 3;
                float v39 = v43;
              }
              while (v18 < v43);
            }
            while (v10 < (unint64_t)v35);
          }
          BOOL v4 = v10 - 12 >= v9;
          BOOL v5 = v10 - 12 == v9;
          if (v10 - 12 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 12);
            *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(float *)(v10 - 12) = v18;
          *(void *)(v10 - 8) = v37;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(v9 + 4);
        do
        {
          float v21 = *(float *)(v9 + v19 + 12);
          v19 += 12;
        }
        while (v21 < v18);
        unint64_t v22 = v9 + v19;
        float v23 = (float *)a2;
        if (v19 == 12)
        {
          float v23 = (float *)a2;
          do
          {
            if (v22 >= (unint64_t)v23) {
              break;
            }
            float v25 = *(v23 - 3);
            v23 -= 3;
          }
          while (v25 >= v18);
        }
        else
        {
          do
          {
            float v24 = *(v23 - 3);
            v23 -= 3;
          }
          while (v24 >= v18);
        }
        if (v22 >= (unint64_t)v23)
        {
          unint64_t v10 = v9 + v19;
        }
        else
        {
          float v26 = *v23;
          unint64_t v10 = v9 + v19;
          float v27 = v23;
          do
          {
            *(float *)unint64_t v10 = v26;
            *float v27 = v21;
            int v28 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v27[1];
            *((_DWORD *)v27 + 1) = v28;
            int v29 = *(_DWORD *)(v10 + 8);
            *(float *)(v10 + 8) = v27[2];
            *((_DWORD *)v27 + 2) = v29;
            do
            {
              float v30 = *(float *)(v10 + 12);
              v10 += 12;
              float v21 = v30;
            }
            while (v30 < v18);
            do
            {
              float v31 = *(v27 - 3);
              v27 -= 3;
              float v26 = v31;
            }
            while (v31 >= v18);
          }
          while (v10 < (unint64_t)v27);
        }
        if (v10 - 12 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 12);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
        }
        *(float *)(v10 - 12) = v18;
        *(void *)(v10 - 8) = v20;
        if (v22 >= (unint64_t)v23) {
          break;
        }
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *,false>(v9, v10 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v9, v10 - 12);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 12;
    if (!v32) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)result;
  float v5 = *(float *)a3;
  if (*(float *)a2 < *(float *)result)
  {
    if (v5 >= v3)
    {
      *(float *)uint64_t result = v3;
      *(float *)a2 = v4;
      int v13 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      float v6 = (int *)(a2 + 8);
      int v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 4) = v13;
      int v15 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = v14;
      *(_DWORD *)(a2 + 8) = v15;
      if (*(float *)a3 >= v4) {
        return result;
      }
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      int v7 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    }
    else
    {
      float v6 = (int *)(result + 8);
      *(float *)uint64_t result = v5;
      *(float *)a3 = v4;
      int v7 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a3 + 4);
    }
    *(_DWORD *)(a3 + 4) = v7;
    unint64_t v10 = (int *)(a3 + 8);
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    int v8 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v8;
    unint64_t v10 = (int *)(a2 + 8);
    int v9 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v9;
    float v11 = *(float *)result;
    if (*(float *)a2 < *(float *)result)
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)a2;
      *(float *)a2 = v11;
      int v12 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v12;
      float v6 = (int *)(result + 8);
LABEL_10:
      int v16 = *v6;
      *float v6 = *v10;
      *unint64_t v10 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(float *)(a2 - 12);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 12) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
        int v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(a1, a1 + 12, a2 - 12);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a2 - 12));
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a1 + 36));
      float v21 = *(float *)(a2 - 12);
      float v22 = *(float *)(a1 + 36);
      if (v21 < v22)
      {
        *(float *)(a1 + 36) = v21;
        *(float *)(a2 - 12) = v22;
        int v23 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v23;
        int v24 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v24;
        float v25 = *(float *)(a1 + 36);
        float v26 = *(float *)(a1 + 24);
        if (v25 < v26)
        {
          *(float *)(a1 + 24) = v25;
          *(float *)(a1 + 36) = v26;
          int v27 = *(_DWORD *)(a1 + 40);
          int v28 = *(_DWORD *)(a1 + 44);
          uint64_t v29 = *(void *)(a1 + 28);
          *(_DWORD *)(a1 + 28) = v27;
          *(_DWORD *)(a1 + 32) = v28;
          *(void *)(a1 + 40) = v29;
          float v30 = *(float *)(a1 + 12);
          if (v25 < v30)
          {
            *(float *)(a1 + 12) = v25;
            *(float *)(a1 + 24) = v30;
            uint64_t v31 = *(void *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v27;
            *(_DWORD *)(a1 + 20) = v28;
            *(void *)(a1 + 28) = v31;
            float v32 = *(float *)a1;
            if (v25 < *(float *)a1)
            {
              *(float *)a1 = v25;
              *(float *)(a1 + 12) = v32;
              uint64_t v33 = *(void *)(a1 + 4);
              *(_DWORD *)(a1 + 4) = v27;
              *(_DWORD *)(a1 + 8) = v28;
              *(void *)(a1 + 16) = v33;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = (float *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(a1, a1 + 12, a1 + 24);
      uint64_t v11 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)v11;
    float v15 = *v10;
    if (*(float *)v11 < *v10)
    {
      uint64_t v16 = *(void *)(v11 + 4);
      uint64_t v17 = v12;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        *(float *)(v18 + 36) = v15;
        int v19 = *(_DWORD *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 40) = *(_DWORD *)(a1 + v17 + 28);
        *(_DWORD *)(v18 + 44) = v19;
        if (v17 == -24) {
          break;
        }
        float v15 = *(float *)(v18 + 12);
        v17 -= 12;
        if (v14 >= v15)
        {
          uint64_t v20 = a1 + v17 + 36;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *(float *)uint64_t v20 = v14;
      *(void *)(v20 + 4) = v16;
      if (++v13 == 8) {
        return v11 + 12 == a2;
      }
    }
    unint64_t v10 = (float *)v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  float v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *((_DWORD *)a3 + 1);
    a3[1] = a4[1];
    *((_DWORD *)a4 + 1) = v10;
    int v11 = *((_DWORD *)a3 + 2);
    a3[2] = a4[2];
    *((_DWORD *)a4 + 2) = v11;
    float v12 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v12;
      int v13 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v13;
      int v14 = *((_DWORD *)a2 + 2);
      a2[2] = a3[2];
      *((_DWORD *)a3 + 2) = v14;
      float v15 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v15;
        int v16 = *((_DWORD *)a1 + 1);
        a1[1] = a2[1];
        *((_DWORD *)a2 + 1) = v16;
        int v17 = *((_DWORD *)a1 + 2);
        a1[2] = a2[2];
        *((_DWORD *)a2 + 2) = v17;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,false>(unsigned int *a1, unsigned int *a2, float32x4_t **a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v258 = a2 - 2;
    v252 = a2 - 6;
    v254 = a2 - 4;
    int v11 = (char *)a1;
    uint64_t v264 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unsigned int *)v11;
          uint64_t v12 = (char *)a2 - v11;
          uint64_t v13 = ((char *)a2 - v11) >> 3;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                unsigned int v104 = *(a2 - 2);
                unint64_t v103 = a2 - 2;
                float v105 = a3[2];
                uint64_t v106 = a3[3]->i64[0];
                float32x4_t v107 = vsubq_f32(*(float32x4_t *)(v106 + 16 * v104), *v105);
                float32x4_t v269 = **a3;
                float32x4_t v108 = vmulq_f32(v107, v269);
                v108.i32[3] = 0;
                float32x4_t v284 = *a3[1];
                float32x4_t v298 = vsubq_f32(*(float32x4_t *)(v106 + 16 * *a1), *v105);
                float32x4_t v109 = vmulq_f32(v107, v284);
                v109.i32[3] = 0;
                float v110 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v108, v108)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v109, v109)));
                float32x4_t v111 = vmulq_f32(v298, v269);
                v111.i32[3] = 0;
                float32x4_t v112 = vmulq_f32(v298, v284);
                v112.i32[3] = 0;
                if (v110 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v111, v111)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v112, v112))))
                {
                  uint64_t v113 = *(void *)a1;
                  unsigned int v114 = *v103;
                  *((_WORD *)a1 + 2) = *((_WORD *)v103 + 2);
                  *a1 = v114;
                  *unint64_t v103 = v113;
                  *((_WORD *)v103 + 2) = WORD2(v113);
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, v258, a3);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a1 + 4, v258, a3);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,0>(a1, a1 + 2, a1 + 4, a1 + 6, v258, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 191)
          {
            if (a5)
            {
              if (a1 != a2)
              {
                int v115 = a1 + 2;
                if (a1 + 2 != a2)
                {
                  uint64_t v116 = 0;
                  unsigned int v117 = *a3;
                  uint64_t v118 = a1;
                  do
                  {
                    uint64_t v119 = v118[2];
                    uint64_t v120 = *v118;
                    uint64_t v118 = v115;
                    float32x4_t v121 = *a3[2];
                    uint64_t v122 = a3[3]->i64[0];
                    float32x4_t v123 = vsubq_f32(*(float32x4_t *)(v122 + 16 * v119), v121);
                    float32x4_t v270 = *v117;
                    float32x4_t v285 = vsubq_f32(*(float32x4_t *)(v122 + 16 * v120), v121);
                    float32x4_t v124 = vmulq_f32(v123, *v117);
                    v124.i32[3] = 0;
                    float32x4_t v299 = *a3[1];
                    float32x4_t v125 = vmulq_f32(v123, v299);
                    v125.i32[3] = 0;
                    float v126 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v124, v124)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v125, v125)));
                    float32x4_t v127 = vmulq_f32(v285, v270);
                    v127.i32[3] = 0;
                    float32x4_t v128 = vmulq_f32(v285, v299);
                    v128.i32[3] = 0;
                    if (v126 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v127, v127)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v128, v128))))
                    {
                      uint64_t v129 = *(void *)v118;
                      uint64_t v130 = *(void *)v118;
                      uint64_t v131 = v116;
                      while (1)
                      {
                        unsigned int v132 = (char *)a1 + v131;
                        *((_DWORD *)v132 + 2) = *(unsigned int *)((char *)a1 + v131);
                        *((_WORD *)v132 + 6) = *(_WORD *)((char *)a1 + v131 + 4);
                        if (!v131) {
                          break;
                        }
                        unint64_t v133 = a3[2];
                        uint64_t v134 = a3[3]->i64[0];
                        float32x4_t v135 = vsubq_f32(*(float32x4_t *)(v134 + 16 * v130), *v133);
                        float32x4_t v271 = **a3;
                        float32x4_t v136 = vmulq_f32(v135, v271);
                        v136.i32[3] = 0;
                        float32x4_t v286 = *a3[1];
                        float32x4_t v300 = vsubq_f32(*(float32x4_t *)(v134 + 16 * *((unsigned int *)v132 - 2)), *v133);
                        float32x4_t v137 = vmulq_f32(v135, v286);
                        v137.i32[3] = 0;
                        float v138 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v136, v136)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v137, v137)));
                        float32x4_t v139 = vmulq_f32(v300, v271);
                        v139.i32[3] = 0;
                        float32x4_t v140 = vmulq_f32(v300, v286);
                        v140.i32[3] = 0;
                        v131 -= 8;
                        if (v138 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v139, v139)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v140, v140))))
                        {
                          uint64_t v141 = (uint64_t)a1 + v131 + 8;
                          goto LABEL_73;
                        }
                      }
                      uint64_t v141 = (uint64_t)a1;
LABEL_73:
                      *(_DWORD *)uint64_t v141 = v129;
                      *(_WORD *)(v141 + 4) = WORD2(v129);
                      unsigned int v117 = *a3;
                    }
                    int v115 = v118 + 2;
                    v116 += 8;
                  }
                  while (v118 + 2 != a2);
                }
              }
            }
            else if (a1 != a2)
            {
              unint64_t v227 = a1 + 2;
              if (a1 + 2 != a2)
              {
                uint64_t v228 = *a3;
                do
                {
                  uint64_t v229 = a1[2];
                  uint64_t v230 = *a1;
                  a1 = v227;
                  float32x4_t v231 = *a3[2];
                  uint64_t v232 = a3[3]->i64[0];
                  float32x4_t v233 = vsubq_f32(*(float32x4_t *)(v232 + 16 * v229), v231);
                  float32x4_t v279 = *v228;
                  float32x4_t v293 = vsubq_f32(*(float32x4_t *)(v232 + 16 * v230), v231);
                  float32x4_t v234 = vmulq_f32(v233, *v228);
                  v234.i32[3] = 0;
                  float32x4_t v307 = *a3[1];
                  float32x4_t v235 = vmulq_f32(v233, v307);
                  v235.i32[3] = 0;
                  float v236 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v234, v234)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v235, v235)));
                  float32x4_t v237 = vmulq_f32(v293, v279);
                  v237.i32[3] = 0;
                  float32x4_t v238 = vmulq_f32(v293, v307);
                  v238.i32[3] = 0;
                  if (v236 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v237, v237)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v238, v238))))
                  {
                    uint64_t v239 = *(void *)a1;
                    uint64_t v240 = *(void *)a1;
                    v241 = a1;
                    do
                    {
                      float32x4_t v242 = v241;
                      unsigned int v243 = *(v241 - 2);
                      v241 -= 2;
                      *float32x4_t v242 = v243;
                      *((_WORD *)v242 + 2) = *((_WORD *)v242 - 2);
                      float32x4_t v244 = a3[2];
                      uint64_t v245 = a3[3]->i64[0];
                      float32x4_t v246 = vsubq_f32(*(float32x4_t *)(v245 + 16 * v240), *v244);
                      float32x4_t v280 = **a3;
                      float32x4_t v294 = vsubq_f32(*(float32x4_t *)(v245 + 16 * *(v242 - 4)), *v244);
                      float32x4_t v247 = vmulq_f32(v246, v280);
                      v247.i32[3] = 0;
                      float32x4_t v308 = *a3[1];
                      float32x4_t v248 = vmulq_f32(v246, v308);
                      v248.i32[3] = 0;
                      float v249 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v247, v247)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v248, v248)));
                      float32x4_t v250 = vmulq_f32(v294, v280);
                      v250.i32[3] = 0;
                      float32x4_t v251 = vmulq_f32(v294, v308);
                      v251.i32[3] = 0;
                    }
                    while (v249 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v250, v250)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v251, v251))));
                    unsigned int *v241 = v239;
                    *((_WORD *)v241 + 2) = WORD2(v239);
                    uint64_t v228 = *a3;
                  }
                  unint64_t v227 = a1 + 2;
                }
                while (a1 + 2 != a2);
              }
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v142 = (unint64_t)(v13 - 2) >> 1;
              int64_t v263 = v142;
              do
              {
                int64_t v143 = v142;
                if (v263 >= v142)
                {
                  uint64_t v144 = (2 * v142) | 1;
                  unint64_t v145 = &a1[2 * v144];
                  int64_t v255 = v142;
                  if (2 * v142 + 2 < v13)
                  {
                    v147 = a3[2];
                    unsigned int v146 = a3[3];
                    uint64_t v154 = v146->i64[0];
                    float32x4_t v148 = vsubq_f32(*(float32x4_t *)(v146->i64[0] + 16 * *v145), *v147);
                    float32x4_t v259 = *v147;
                    float32x4_t v272 = vsubq_f32(*(float32x4_t *)(v146->i64[0] + 16 * v145[2]), *v147);
                    float32x4_t v287 = **a3;
                    float32x4_t v149 = vmulq_f32(v148, v287);
                    v149.i32[3] = 0;
                    float32x4_t v301 = *a3[1];
                    float32x4_t v150 = vmulq_f32(v148, v301);
                    v150.i32[3] = 0;
                    float v151 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v149, v149)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v150, v150)));
                    float32x4_t v152 = vmulq_f32(v272, v287);
                    v152.i32[3] = 0;
                    float32x4_t v153 = vmulq_f32(v272, v301);
                    v153.i32[3] = 0;
                    if (v151 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v152, v152)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v153, v153))))
                    {
                      v145 += 2;
                      uint64_t v144 = 2 * v143 + 2;
                    }
                    float32x4_t v156 = v287;
                    float32x4_t v157 = v301;
                    float32x4_t v155 = v259;
                  }
                  else
                  {
                    uint64_t v154 = a3[3]->i64[0];
                    float32x4_t v155 = *a3[2];
                    float32x4_t v156 = **a3;
                    float32x4_t v157 = *a3[1];
                  }
                  float32x4_t v288 = v156;
                  float32x4_t v302 = v157;
                  unsigned int v158 = &a1[2 * v143];
                  float32x4_t v159 = vsubq_f32(*(float32x4_t *)(v154 + 16 * *v145), v155);
                  float32x4_t v273 = vsubq_f32(*(float32x4_t *)(v154 + 16 * *v158), v155);
                  float32x4_t v160 = vmulq_f32(v156, v159);
                  v160.i32[3] = 0;
                  float32x4_t v161 = vmulq_f32(v157, v159);
                  v161.i32[3] = 0;
                  float v162 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v160, v160)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v161, v161)));
                  float32x4_t v163 = vmulq_f32(v288, v273);
                  v163.i32[3] = 0;
                  float32x4_t v164 = vmulq_f32(v302, v273);
                  v164.i32[3] = 0;
                  if (v162 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v163, v163)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v164, v164))))
                  {
                    uint64_t v253 = *(void *)v158;
                    uint64_t v260 = *(void *)v158;
                    do
                    {
                      uint64_t v165 = v158;
                      unsigned int v158 = v145;
                      unsigned int v166 = *v145;
                      *((_WORD *)v165 + 2) = *((_WORD *)v145 + 2);
                      *uint64_t v165 = v166;
                      if (v263 < v144) {
                        break;
                      }
                      uint64_t v167 = 2 * v144;
                      float32x4_t v168 = *a3[2];
                      float32x4_t v169 = **a3;
                      uint64_t v144 = (2 * v144) | 1;
                      unint64_t v145 = &a1[2 * v144];
                      uint64_t v170 = v167 + 2;
                      uint64_t v171 = a3[3]->i64[0];
                      float32x4_t v172 = *a3[1];
                      float32x4_t v289 = v169;
                      float32x4_t v303 = v172;
                      if (v167 + 2 < v13)
                      {
                        float32x4_t v173 = vsubq_f32(*(float32x4_t *)(v171 + 16 * *v145), v168);
                        float32x4_t v257 = vsubq_f32(*(float32x4_t *)(v171 + 16 * v145[2]), v168);
                        float32x4_t v174 = vmulq_f32(v169, v173);
                        v174.i32[3] = 0;
                        float32x4_t v175 = vmulq_f32(v172, v173);
                        v175.i32[3] = 0;
                        float32x4_t v274 = *a3[2];
                        float v176 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175)));
                        float32x4_t v177 = vmulq_f32(v289, v257);
                        v177.i32[3] = 0;
                        float32x4_t v178 = vmulq_f32(v303, v257);
                        v178.i32[3] = 0;
                        float v179 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v177, v177)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v178, v178)));
                        float32x4_t v168 = v274;
                        float32x4_t v169 = v289;
                        float32x4_t v172 = v303;
                        if (v176 > v179)
                        {
                          v145 += 2;
                          uint64_t v144 = v170;
                        }
                      }
                      float32x4_t v180 = vsubq_f32(*(float32x4_t *)(v171 + 16 * *v145), v168);
                      float32x4_t v275 = vsubq_f32(*(float32x4_t *)(v171 + 16 * v260), v168);
                      float32x4_t v181 = vmulq_f32(v169, v180);
                      v181.i32[3] = 0;
                      float32x4_t v182 = vmulq_f32(v172, v180);
                      v182.i32[3] = 0;
                      float v183 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v181, v181)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v182, v182)));
                      float32x4_t v184 = vmulq_f32(v289, v275);
                      v184.i32[3] = 0;
                      float32x4_t v185 = vmulq_f32(v303, v275);
                      v185.i32[3] = 0;
                    }
                    while (v183 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v184, v184)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v185, v185))));
                    int64_t v143 = v255;
                    *unsigned int v158 = v253;
                    *((_WORD *)v158 + 2) = WORD2(v253);
                    a2 = v264;
                  }
                }
                int64_t v142 = v143 - 1;
              }
              while (v143);
              uint64_t v186 = (unint64_t)v12 >> 3;
              do
              {
                unsigned int v265 = a2;
                uint64_t v187 = 0;
                uint64_t v188 = *(void *)a1;
                uint64_t v189 = a1;
                do
                {
                  unint64_t v190 = v189;
                  v189 += 2 * v187 + 2;
                  uint64_t v191 = 2 * v187;
                  uint64_t v187 = (2 * v187) | 1;
                  uint64_t v192 = v191 + 2;
                  if (v191 + 2 < v186)
                  {
                    v193 = a3[2];
                    uint64_t v194 = a3[3]->i64[0];
                    float32x4_t v195 = vsubq_f32(*(float32x4_t *)(v194 + 16 * *v189), *v193);
                    float32x4_t v276 = **a3;
                    float32x4_t v196 = vmulq_f32(v195, v276);
                    v196.i32[3] = 0;
                    float32x4_t v290 = *a3[1];
                    float32x4_t v304 = vsubq_f32(*(float32x4_t *)(v194 + 16 * v189[2]), *v193);
                    float32x4_t v197 = vmulq_f32(v195, v290);
                    v197.i32[3] = 0;
                    float v198 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v196, v196)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v197, v197)));
                    float32x4_t v199 = vmulq_f32(v304, v276);
                    v199.i32[3] = 0;
                    float32x4_t v200 = vmulq_f32(v304, v290);
                    v200.i32[3] = 0;
                    if (v198 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v199, v199)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v200, v200))))
                    {
                      v189 += 2;
                      uint64_t v187 = v192;
                    }
                  }
                  unsigned int v201 = *v189;
                  *((_WORD *)v190 + 2) = *((_WORD *)v189 + 2);
                  unsigned int *v190 = v201;
                }
                while (v187 <= (uint64_t)((unint64_t)(v186 - 2) >> 1));
                a2 = v265 - 2;
                if (v189 == v265 - 2)
                {
                  *uint64_t v189 = v188;
                  *((_WORD *)v189 + 2) = WORD2(v188);
                }
                else
                {
                  unsigned int v202 = *a2;
                  *((_WORD *)v189 + 2) = *((_WORD *)v265 - 2);
                  *uint64_t v189 = v202;
                  *((_WORD *)v265 - 2) = WORD2(v188);
                  *a2 = v188;
                  uint64_t v203 = (char *)v189 - (char *)a1 + 8;
                  if (v203 >= 9)
                  {
                    unint64_t v204 = (((unint64_t)v203 >> 3) - 2) >> 1;
                    uint64_t v205 = &a1[2 * v204];
                    unsigned int v206 = a3[2];
                    uint64_t v207 = a3[3]->i64[0];
                    float32x4_t v208 = vsubq_f32(*(float32x4_t *)(v207 + 16 * *v205), *v206);
                    float32x4_t v277 = **a3;
                    float32x4_t v209 = vmulq_f32(v208, v277);
                    v209.i32[3] = 0;
                    float32x4_t v291 = *a3[1];
                    float32x4_t v305 = vsubq_f32(*(float32x4_t *)(v207 + 16 * *v189), *v206);
                    float32x4_t v210 = vmulq_f32(v208, v291);
                    v210.i32[3] = 0;
                    float v211 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v209, v209)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v210, v210)));
                    float32x4_t v212 = vmulq_f32(v305, v277);
                    v212.i32[3] = 0;
                    float32x4_t v213 = vmulq_f32(v305, v291);
                    v213.i32[3] = 0;
                    if (v211 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v212, v212)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v213, v213))))
                    {
                      uint64_t v214 = *(void *)v189;
                      uint64_t v215 = *(void *)v189;
                      do
                      {
                        v216 = v189;
                        uint64_t v189 = v205;
                        unsigned int v217 = *v205;
                        *((_WORD *)v216 + 2) = *((_WORD *)v205 + 2);
                        unsigned int *v216 = v217;
                        if (!v204) {
                          break;
                        }
                        unint64_t v204 = (v204 - 1) >> 1;
                        uint64_t v205 = &a1[2 * v204];
                        int v218 = a3[2];
                        uint64_t v219 = a3[3]->i64[0];
                        float32x4_t v220 = vsubq_f32(*(float32x4_t *)(v219 + 16 * *v205), *v218);
                        float32x4_t v278 = **a3;
                        float32x4_t v221 = vmulq_f32(v220, v278);
                        v221.i32[3] = 0;
                        float32x4_t v292 = *a3[1];
                        float32x4_t v306 = vsubq_f32(*(float32x4_t *)(v219 + 16 * v215), *v218);
                        float32x4_t v222 = vmulq_f32(v220, v292);
                        v222.i32[3] = 0;
                        float v223 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v221, v221)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v222, v222)));
                        float32x4_t v224 = vmulq_f32(v306, v278);
                        v224.i32[3] = 0;
                        float32x4_t v225 = vmulq_f32(v306, v292);
                        v225.i32[3] = 0;
                      }
                      while (v223 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v224, v224)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v225, v225))));
                      *uint64_t v189 = v214;
                      *((_WORD *)v189 + 2) = WORD2(v214);
                      a2 = v265 - 2;
                    }
                  }
                }
              }
              while (v186-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          float v15 = &a1[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(v15, a1, v258, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, v15, v258, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1 + 2, v15 - 2, v254, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1 + 4, &a1[2 * v14 + 2], v252, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(v15 - 2, v15, &a1[2 * v14 + 2], a3);
            uint64_t v16 = *(void *)a1;
            unsigned int v17 = *v15;
            *((_WORD *)a1 + 2) = *((_WORD *)v15 + 2);
            *a1 = v17;
            *float v15 = v16;
            *((_WORD *)v15 + 2) = WORD2(v16);
          }
          --a4;
          uint64_t v18 = a3[3]->i64[0];
          float32x4_t v19 = *a3[2];
          float32x4_t v20 = **a3;
          float32x4_t v21 = *a3[1];
          float32x4_t v266 = v19;
          float32x4_t v281 = v21;
          float32x4_t v295 = v20;
          if (a5) {
            break;
          }
          float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v18 + 16 * *(a1 - 2)), v19);
          float32x4_t v256 = vsubq_f32(*(float32x4_t *)(v18 + 16 * *a1), v19);
          float32x4_t v23 = vmulq_f32(v22, v20);
          v23.i32[3] = 0;
          float32x4_t v24 = vmulq_f32(v22, v21);
          v24.i32[3] = 0;
          float v25 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24)));
          float32x4_t v26 = vmulq_f32(v256, v295);
          v26.i32[3] = 0;
          float32x4_t v27 = vmulq_f32(v256, v281);
          v27.i32[3] = 0;
          float v28 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27)));
          float32x4_t v21 = v281;
          float32x4_t v20 = v295;
          float32x4_t v19 = v266;
          if (v25 > v28) {
            break;
          }
          uint64_t v67 = *(void *)a1;
          float32x4_t v68 = vsubq_f32(*(float32x4_t *)(v18 + 16 * *(void *)a1), v266);
          float32x4_t v262 = vsubq_f32(*(float32x4_t *)(v18 + 16 * *v258), v266);
          float32x4_t v69 = vmulq_f32(v295, v68);
          v69.i32[3] = 0;
          float32x4_t v70 = vmulq_f32(v281, v68);
          v70.i32[3] = 0;
          float v71 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v69, v69)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v70, v70)));
          float32x4_t v72 = vmulq_f32(v295, v262);
          v72.i32[3] = 0;
          float32x4_t v73 = vmulq_f32(v281, v262);
          v73.i32[3] = 0;
          if (v71 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v72, v72)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v73, v73))))
          {
            unint64_t v78 = a1 + 2;
            do
            {
              int v11 = (char *)v78;
              if (v78 >= a2) {
                break;
              }
              v78 += 2;
              float32x4_t v79 = vsubq_f32(*(float32x4_t *)(v18 + 16 * *(unsigned int *)v11), v266);
              float32x4_t v80 = vmulq_f32(v295, v79);
              v80.i32[3] = 0;
              float32x4_t v81 = vmulq_f32(v281, v79);
              v81.i32[3] = 0;
            }
            while (v71 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v80, v80)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v81, v81))));
          }
          else
          {
            int v11 = (char *)a1;
            do
            {
              unsigned int v74 = *((_DWORD *)v11 + 2);
              v11 += 8;
              float32x4_t v75 = vsubq_f32(*(float32x4_t *)(v18 + 16 * v74), v266);
              float32x4_t v76 = vmulq_f32(v295, v75);
              v76.i32[3] = 0;
              float32x4_t v77 = vmulq_f32(v281, v75);
              v77.i32[3] = 0;
            }
            while (v71 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v76, v76)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v77, v77))));
          }
          uint64_t v82 = a2;
          if (v11 < (char *)a2)
          {
            uint64_t v82 = a2;
            do
            {
              unsigned int v83 = *(v82 - 2);
              v82 -= 2;
              float32x4_t v84 = vsubq_f32(*(float32x4_t *)(v18 + 16 * v83), v266);
              float32x4_t v85 = vmulq_f32(v295, v84);
              v85.i32[3] = 0;
              float32x4_t v86 = vmulq_f32(v281, v84);
              v86.i32[3] = 0;
            }
            while (v71 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v85, v85)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v86, v86))));
          }
          while (v11 < (char *)v82)
          {
            uint64_t v87 = *(void *)v11;
            unsigned int v88 = *v82;
            *((_WORD *)v11 + 2) = *((_WORD *)v82 + 2);
            *(_DWORD *)int v11 = v88;
            *uint64_t v82 = v87;
            *((_WORD *)v82 + 2) = WORD2(v87);
            uint64_t v89 = a3[3]->i64[0];
            float32x4_t v297 = *a3[2];
            float32x4_t v90 = vsubq_f32(*(float32x4_t *)(v89 + 16 * v67), v297);
            float32x4_t v283 = **a3;
            float32x4_t v91 = vmulq_f32(v90, v283);
            v91.i32[3] = 0;
            float32x4_t v268 = *a3[1];
            float32x4_t v92 = vmulq_f32(v90, v268);
            v92.i32[3] = 0;
            float v93 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v91, v91)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v92, v92)));
            do
            {
              unsigned int v94 = *((_DWORD *)v11 + 2);
              v11 += 8;
              float32x4_t v95 = vsubq_f32(*(float32x4_t *)(v89 + 16 * v94), v297);
              float32x4_t v96 = vmulq_f32(v283, v95);
              v96.i32[3] = 0;
              float32x4_t v97 = vmulq_f32(v268, v95);
              v97.i32[3] = 0;
            }
            while (v93 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v96, v96)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v97, v97))));
            do
            {
              unsigned int v98 = *(v82 - 2);
              v82 -= 2;
              float32x4_t v99 = vsubq_f32(*(float32x4_t *)(v89 + 16 * v98), v297);
              float32x4_t v100 = vmulq_f32(v283, v99);
              v100.i32[3] = 0;
              float32x4_t v101 = vmulq_f32(v268, v99);
              v101.i32[3] = 0;
            }
            while (v93 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v100, v100)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v101, v101))));
          }
          BOOL v5 = v11 - 8 >= (char *)a1;
          BOOL v6 = v11 - 8 == (char *)a1;
          if (v11 - 8 != (char *)a1)
          {
            unsigned int v102 = *((_DWORD *)v11 - 2);
            *((_WORD *)a1 + 2) = *((_WORD *)v11 - 2);
            *a1 = v102;
          }
          a5 = 0;
          *((_DWORD *)v11 - 2) = v67;
          *((_WORD *)v11 - 2) = WORD2(v67);
        }
        uint64_t v29 = *(void *)a1;
        uint64_t v30 = *(void *)a1;
        float32x4_t v31 = vsubq_f32(*(float32x4_t *)(v18 + 16 * v30), v19);
        float32x4_t v32 = vmulq_f32(v31, v20);
        v32.i32[3] = 0;
        float32x4_t v33 = vmulq_f32(v31, v21);
        v33.i32[3] = 0;
        float v34 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)));
        uint64_t v35 = 0;
        do
        {
          float32x4_t v36 = vsubq_f32(*(float32x4_t *)(v18 + 16 * a1[v35 + 2]), v266);
          float32x4_t v37 = vmulq_f32(v295, v36);
          v37.i32[3] = 0;
          float32x4_t v38 = vmulq_f32(v281, v36);
          v38.i32[3] = 0;
          v35 += 2;
        }
        while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38))) > v34);
        float v39 = &a1[v35];
        int v40 = v264;
        if (v35 == 2)
        {
          int v40 = v264;
          do
          {
            if (v39 >= v40) {
              break;
            }
            unsigned int v45 = *(v40 - 2);
            v40 -= 2;
            float32x4_t v46 = vsubq_f32(*(float32x4_t *)(v18 + 16 * v45), v266);
            float32x4_t v47 = vmulq_f32(v295, v46);
            v47.i32[3] = 0;
            float32x4_t v48 = vmulq_f32(v281, v46);
            v48.i32[3] = 0;
          }
          while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48))) <= v34);
        }
        else
        {
          do
          {
            unsigned int v41 = *(v40 - 2);
            v40 -= 2;
            float32x4_t v42 = vsubq_f32(*(float32x4_t *)(v18 + 16 * v41), v266);
            float32x4_t v43 = vmulq_f32(v295, v42);
            v43.i32[3] = 0;
            float32x4_t v44 = vmulq_f32(v281, v42);
            v44.i32[3] = 0;
          }
          while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44))) <= v34);
        }
        int v11 = (char *)&a1[v35];
        if (v39 < v40)
        {
          unint64_t v49 = (unint64_t)v40;
          do
          {
            uint64_t v50 = *(void *)v11;
            int v51 = *(_DWORD *)v49;
            *((_WORD *)v11 + 2) = *(_WORD *)(v49 + 4);
            *(_DWORD *)int v11 = v51;
            *(_DWORD *)unint64_t v49 = v50;
            *(_WORD *)(v49 + 4) = WORD2(v50);
            uint64_t v52 = a3[3]->i64[0];
            float32x4_t v296 = *a3[2];
            float32x4_t v53 = vsubq_f32(*(float32x4_t *)(v52 + 16 * v30), v296);
            float32x4_t v267 = *a3[1];
            float32x4_t v282 = **a3;
            float32x4_t v54 = vmulq_f32(v53, v282);
            v54.i32[3] = 0;
            float32x4_t v55 = vmulq_f32(v53, v267);
            v55.i32[3] = 0;
            float v56 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v54, v54)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v55, v55)));
            do
            {
              unsigned int v57 = *((_DWORD *)v11 + 2);
              v11 += 8;
              float32x4_t v58 = vsubq_f32(*(float32x4_t *)(v52 + 16 * v57), v296);
              float32x4_t v59 = vmulq_f32(v282, v58);
              v59.i32[3] = 0;
              float32x4_t v60 = vmulq_f32(v267, v58);
              v60.i32[3] = 0;
            }
            while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v59, v59)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v60, v60))) > v56);
            do
            {
              unsigned int v61 = *(_DWORD *)(v49 - 8);
              v49 -= 8;
              float32x4_t v62 = vsubq_f32(*(float32x4_t *)(v52 + 16 * v61), v296);
              float32x4_t v63 = vmulq_f32(v282, v62);
              v63.i32[3] = 0;
              float32x4_t v64 = vmulq_f32(v267, v62);
              v64.i32[3] = 0;
            }
            while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v64, v64))) <= v56);
          }
          while ((unint64_t)v11 < v49);
        }
        if (v11 - 8 != (char *)a1)
        {
          unsigned int v65 = *((_DWORD *)v11 - 2);
          *((_WORD *)a1 + 2) = *((_WORD *)v11 - 2);
          *a1 = v65;
        }
        *((_DWORD *)v11 - 2) = v29;
        *((_WORD *)v11 - 2) = WORD2(v29);
        a2 = v264;
        if (v39 >= v40) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,false>(a1, v11 - 8, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, (unsigned int *)v11 - 2, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>((unsigned int *)v11, v264, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_30;
      }
    }
    a2 = (unsigned int *)(v11 - 8);
    if (!v66) {
      continue;
    }
    break;
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,0>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, float32x4_t **a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a2, a3, a4, a6);
  uint64_t v12 = a6[2];
  uint64_t v13 = a6[3]->i64[0];
  float32x4_t v14 = vsubq_f32(*(float32x4_t *)(v13 + 16 * *a5), *v12);
  float32x4_t v52 = **a6;
  float32x4_t v15 = vmulq_f32(v14, v52);
  v15.i32[3] = 0;
  float32x4_t v56 = *a6[1];
  float32x4_t v60 = vsubq_f32(*(float32x4_t *)(v13 + 16 * *a4), *v12);
  float32x4_t v16 = vmulq_f32(v14, v56);
  v16.i32[3] = 0;
  float v17 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
  float32x4_t v18 = vmulq_f32(v60, v52);
  v18.i32[3] = 0;
  float32x4_t v19 = vmulq_f32(v60, v56);
  v19.i32[3] = 0;
  if (v17 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))))
  {
    uint64_t v20 = *(void *)a4;
    unsigned int v21 = *a5;
    *((_WORD *)a4 + 2) = *((_WORD *)a5 + 2);
    *a4 = v21;
    *a5 = v20;
    *((_WORD *)a5 + 2) = WORD2(v20);
    float32x4_t v22 = a6[2];
    uint64_t v23 = a6[3]->i64[0];
    float32x4_t v24 = vsubq_f32(*(float32x4_t *)(v23 + 16 * *a4), *v22);
    float32x4_t v53 = **a6;
    float32x4_t v25 = vmulq_f32(v24, v53);
    v25.i32[3] = 0;
    float32x4_t v57 = *a6[1];
    float32x4_t v61 = vsubq_f32(*(float32x4_t *)(v23 + 16 * *a3), *v22);
    float32x4_t v26 = vmulq_f32(v24, v57);
    v26.i32[3] = 0;
    float v27 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)));
    float32x4_t v28 = vmulq_f32(v61, v53);
    v28.i32[3] = 0;
    float32x4_t v29 = vmulq_f32(v61, v57);
    v29.i32[3] = 0;
    if (v27 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
    {
      uint64_t v30 = *(void *)a3;
      unsigned int v31 = *a4;
      *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
      *a3 = v31;
      *a4 = v30;
      *((_WORD *)a4 + 2) = WORD2(v30);
      float32x4_t v32 = a6[2];
      uint64_t v33 = a6[3]->i64[0];
      float32x4_t v34 = vsubq_f32(*(float32x4_t *)(v33 + 16 * *a3), *v32);
      float32x4_t v54 = **a6;
      float32x4_t v35 = vmulq_f32(v34, v54);
      v35.i32[3] = 0;
      float32x4_t v58 = *a6[1];
      float32x4_t v62 = vsubq_f32(*(float32x4_t *)(v33 + 16 * *a2), *v32);
      float32x4_t v36 = vmulq_f32(v34, v58);
      v36.i32[3] = 0;
      float v37 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)));
      float32x4_t v38 = vmulq_f32(v62, v54);
      v38.i32[3] = 0;
      float32x4_t v39 = vmulq_f32(v62, v58);
      v39.i32[3] = 0;
      if (v37 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39))))
      {
        uint64_t v40 = *(void *)a2;
        unsigned int v41 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *a2 = v41;
        *a3 = v40;
        *((_WORD *)a3 + 2) = WORD2(v40);
        float32x4_t v42 = a6[2];
        uint64_t v43 = a6[3]->i64[0];
        float32x4_t v44 = vsubq_f32(*(float32x4_t *)(v43 + 16 * *a2), *v42);
        float32x4_t v55 = **a6;
        float32x4_t v45 = vmulq_f32(v44, v55);
        v45.i32[3] = 0;
        float32x4_t v59 = *a6[1];
        float32x4_t v63 = vsubq_f32(*(float32x4_t *)(v43 + 16 * *a1), *v42);
        float32x4_t v46 = vmulq_f32(v44, v59);
        v46.i32[3] = 0;
        float v47 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46)));
        float32x4_t v48 = vmulq_f32(v63, v55);
        v48.i32[3] = 0;
        float32x4_t v49 = vmulq_f32(v63, v59);
        v49.i32[3] = 0;
        if (v47 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v49, v49))))
        {
          uint64_t v50 = *(void *)a1;
          unsigned int v51 = *a2;
          *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
          *a1 = v51;
          *a2 = v50;
          *((_WORD *)a2 + 2) = WORD2(v50);
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(unsigned int *a1, unsigned int *a2, unsigned int *a3, float32x4_t **a4)
{
  int v8 = a4[2];
  uint64_t v9 = a4[3]->i64[0];
  float32x4_t v10 = vsubq_f32(*(float32x4_t *)(v9 + 16 * *a2), *v8);
  float32x4_t v46 = vsubq_f32(*(float32x4_t *)(v9 + 16 * *a1), *v8);
  float32x4_t v47 = *v8;
  float32x4_t v50 = **a4;
  float32x4_t v11 = vmulq_f32(v10, v50);
  v11.i32[3] = 0;
  float32x4_t v53 = *a4[1];
  float32x4_t v12 = vmulq_f32(v10, v53);
  v12.i32[3] = 0;
  float v13 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12)));
  float32x4_t v14 = vmulq_f32(v46, v50);
  v14.i32[3] = 0;
  float32x4_t v15 = vmulq_f32(v46, v53);
  v15.i32[3] = 0;
  float v16 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)));
  float32x4_t v17 = vsubq_f32(*(float32x4_t *)(v9 + 16 * *a3), v47);
  float32x4_t v18 = vmulq_f32(v50, v17);
  v18.i32[3] = 0;
  float32x4_t v19 = vmulq_f32(v53, v17);
  v19.i32[3] = 0;
  float v20 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19)));
  if (v13 <= v16)
  {
    if (v20 > v13)
    {
      uint64_t v23 = *(void *)a2;
      unsigned int v24 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v24;
      *a3 = v23;
      *((_WORD *)a3 + 2) = WORD2(v23);
      float32x4_t v25 = a4[2];
      uint64_t v26 = a4[3]->i64[0];
      float32x4_t v27 = vsubq_f32(*(float32x4_t *)(v26 + 16 * *a2), *v25);
      float32x4_t v48 = **a4;
      float32x4_t v28 = vmulq_f32(v27, v48);
      v28.i32[3] = 0;
      float32x4_t v51 = *a4[1];
      float32x4_t v54 = vsubq_f32(*(float32x4_t *)(v26 + 16 * *a1), *v25);
      float32x4_t v29 = vmulq_f32(v27, v51);
      v29.i32[3] = 0;
      float v30 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)));
      float32x4_t v31 = vmulq_f32(v54, v48);
      v31.i32[3] = 0;
      float32x4_t v32 = vmulq_f32(v54, v51);
      v32.i32[3] = 0;
      if (v30 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32))))
      {
        uint64_t v33 = *(void *)a1;
        unsigned int v34 = *a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *a1 = v34;
        *a2 = v33;
        *((_WORD *)a2 + 2) = WORD2(v33);
      }
    }
  }
  else
  {
    uint64_t v21 = *(void *)a1;
    if (v20 <= v13)
    {
      unsigned int v35 = *a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      *a1 = v35;
      *((_WORD *)a2 + 2) = WORD2(v21);
      *a2 = v21;
      float32x4_t v36 = a4[2];
      uint64_t v37 = a4[3]->i64[0];
      float32x4_t v38 = vsubq_f32(*(float32x4_t *)(v37 + 16 * *a3), *v36);
      float32x4_t v49 = **a4;
      float32x4_t v39 = vmulq_f32(v38, v49);
      v39.i32[3] = 0;
      float32x4_t v52 = *a4[1];
      float32x4_t v55 = vsubq_f32(*(float32x4_t *)(v37 + 16 * v21), *v36);
      float32x4_t v40 = vmulq_f32(v38, v52);
      v40.i32[3] = 0;
      float v41 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40)));
      float32x4_t v42 = vmulq_f32(v55, v49);
      v42.i32[3] = 0;
      float32x4_t v43 = vmulq_f32(v55, v52);
      v43.i32[3] = 0;
      if (v41 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43))))
      {
        uint64_t v44 = *(void *)a2;
        unsigned int v45 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *a2 = v45;
        *a3 = v44;
        *((_WORD *)a3 + 2) = WORD2(v44);
      }
    }
    else
    {
      unsigned int v22 = *a3;
      *((_WORD *)a1 + 2) = *((_WORD *)a3 + 2);
      *a1 = v22;
      *((_WORD *)a3 + 2) = WORD2(v21);
      *a3 = v21;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(unsigned int *a1, unsigned int *a2, float32x4_t **a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 2;
      uint64_t v9 = a3[2];
      uint64_t v10 = a3[3]->i64[0];
      float32x4_t v11 = vsubq_f32(*(float32x4_t *)(v10 + 16 * *(a2 - 2)), *v9);
      float32x4_t v44 = **a3;
      float32x4_t v12 = vmulq_f32(v11, v44);
      v12.i32[3] = 0;
      float32x4_t v47 = *a3[1];
      float32x4_t v50 = vsubq_f32(*(float32x4_t *)(v10 + 16 * *a1), *v9);
      float32x4_t v13 = vmulq_f32(v11, v47);
      v13.i32[3] = 0;
      float v14 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13)));
      float32x4_t v15 = vmulq_f32(v50, v44);
      v15.i32[3] = 0;
      float32x4_t v16 = vmulq_f32(v50, v47);
      v16.i32[3] = 0;
      if (v14 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16))))
      {
        uint64_t v17 = *(void *)a1;
        unsigned int v18 = *v8;
        *((_WORD *)a1 + 2) = *((_WORD *)v8 + 2);
        *a1 = v18;
        unsigned int *v8 = v17;
        *((_WORD *)v8 + 2) = WORD2(v17);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      float32x4_t v19 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a1 + 4, a3);
      float v20 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    uint64_t v23 = a3[2];
    uint64_t v24 = a3[3]->i64[0];
    float32x4_t v25 = vsubq_f32(*(float32x4_t *)(v24 + 16 * *v20), *v23);
    float32x4_t v45 = **a3;
    float32x4_t v26 = vmulq_f32(v25, v45);
    v26.i32[3] = 0;
    float32x4_t v48 = *a3[1];
    float32x4_t v51 = vsubq_f32(*(float32x4_t *)(v24 + 16 * *v19), *v23);
    float32x4_t v27 = vmulq_f32(v25, v48);
    v27.i32[3] = 0;
    float v28 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27)));
    float32x4_t v29 = vmulq_f32(v51, v45);
    v29.i32[3] = 0;
    float32x4_t v30 = vmulq_f32(v51, v48);
    v30.i32[3] = 0;
    if (v28 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30))))
    {
      uint64_t v31 = *(void *)v20;
      uint64_t v32 = *(void *)v20;
      uint64_t v33 = v21;
      while (1)
      {
        unsigned int v34 = (char *)a1 + v33;
        *((_DWORD *)v34 + 6) = *(unsigned int *)((char *)a1 + v33 + 16);
        *((_WORD *)v34 + 14) = *(_WORD *)((char *)a1 + v33 + 20);
        if (v33 == -16) {
          break;
        }
        unsigned int v35 = a3[2];
        uint64_t v36 = a3[3]->i64[0];
        float32x4_t v37 = vsubq_f32(*(float32x4_t *)(v36 + 16 * v32), *v35);
        float32x4_t v46 = **a3;
        float32x4_t v38 = vmulq_f32(v37, v46);
        v38.i32[3] = 0;
        float32x4_t v49 = *a3[1];
        float32x4_t v52 = vsubq_f32(*(float32x4_t *)(v36 + 16 * *((unsigned int *)v34 + 2)), *v35);
        float32x4_t v39 = vmulq_f32(v37, v49);
        v39.i32[3] = 0;
        float v40 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)));
        float32x4_t v41 = vmulq_f32(v52, v46);
        v41.i32[3] = 0;
        float32x4_t v42 = vmulq_f32(v52, v49);
        v42.i32[3] = 0;
        v33 -= 8;
        if (v40 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42))))
        {
          uint64_t v43 = (uint64_t)a1 + v33 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v43 = (uint64_t)a1;
LABEL_12:
      *(_DWORD *)uint64_t v43 = v31;
      *(_WORD *)(v43 + 4) = WORD2(v31);
      if (++v22 == 8) {
        return v20 + 2 == a2;
      }
    }
    float32x4_t v19 = v20;
    v21 += 8;
    v20 += 2;
    if (v20 == a2) {
      return 1;
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, float32x4_t **a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a2, a3, a5);
  uint64_t v10 = a5[2];
  uint64_t v11 = a5[3]->i64[0];
  float32x4_t v12 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *a4), *v10);
  float32x4_t v40 = **a5;
  float32x4_t v13 = vmulq_f32(v12, v40);
  v13.i32[3] = 0;
  float32x4_t v43 = *a5[1];
  float32x4_t v46 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *a3), *v10);
  float32x4_t v14 = vmulq_f32(v12, v43);
  v14.i32[3] = 0;
  float v15 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)));
  float32x4_t v16 = vmulq_f32(v46, v40);
  v16.i32[3] = 0;
  float32x4_t v17 = vmulq_f32(v46, v43);
  v17.i32[3] = 0;
  if (v15 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17))))
  {
    uint64_t v18 = *(void *)a3;
    unsigned int v19 = *a4;
    *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
    *a3 = v19;
    *a4 = v18;
    *((_WORD *)a4 + 2) = WORD2(v18);
    float v20 = a5[2];
    uint64_t v21 = a5[3]->i64[0];
    float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v21 + 16 * *a3), *v20);
    float32x4_t v41 = **a5;
    float32x4_t v23 = vmulq_f32(v22, v41);
    v23.i32[3] = 0;
    float32x4_t v44 = *a5[1];
    float32x4_t v47 = vsubq_f32(*(float32x4_t *)(v21 + 16 * *a2), *v20);
    float32x4_t v24 = vmulq_f32(v22, v44);
    v24.i32[3] = 0;
    float v25 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24)));
    float32x4_t v26 = vmulq_f32(v47, v41);
    v26.i32[3] = 0;
    float32x4_t v27 = vmulq_f32(v47, v44);
    v27.i32[3] = 0;
    if (v25 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27))))
    {
      uint64_t v28 = *(void *)a2;
      unsigned int v29 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v29;
      *a3 = v28;
      *((_WORD *)a3 + 2) = WORD2(v28);
      float32x4_t v30 = a5[2];
      uint64_t v31 = a5[3]->i64[0];
      float32x4_t v32 = vsubq_f32(*(float32x4_t *)(v31 + 16 * *a2), *v30);
      float32x4_t v42 = **a5;
      float32x4_t v33 = vmulq_f32(v32, v42);
      v33.i32[3] = 0;
      float32x4_t v45 = *a5[1];
      float32x4_t v48 = vsubq_f32(*(float32x4_t *)(v31 + 16 * *a1), *v30);
      float32x4_t v34 = vmulq_f32(v32, v45);
      v34.i32[3] = 0;
      float v35 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)));
      float32x4_t v36 = vmulq_f32(v48, v42);
      v36.i32[3] = 0;
      float32x4_t v37 = vmulq_f32(v48, v45);
      v37.i32[3] = 0;
      if (v35 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37))))
      {
        uint64_t v38 = *(void *)a1;
        unsigned int v39 = *a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *a1 = v39;
        *a2 = v38;
        *((_WORD *)a2 + 2) = WORD2(v38);
      }
    }
  }
}

void std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__append(void *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      float32x4_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    }
    else {
      float32x4_t v13 = 0;
    }
    long long __p = v13;
    float v15 = &v13[16 * v10];
    float32x4_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    float32x4_t v16 = &v15[16 * a2];
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15) {
      v16 += (v15 - v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F4DFDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned int,unsigned int>>::erase(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    float v3 = *(char **)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 8 * ((a3 - a2) >> 3);
      uint64_t v4 = a2;
      do
      {
        int v6 = *(_DWORD *)&v4[v5 + 4];
        *(_DWORD *)uint64_t v4 = *(_DWORD *)&v4[v5];
        *((_DWORD *)v4 + 1) = v6;
        v4 += 8;
      }
      while (&v4[v5] != v3);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a2;
}

std::vector<unsigned int> *cv3d::cv::gess::internal::DisjointSets<unsigned int>::DisjointSets(std::vector<unsigned int> *a1, std::vector<unsigned int>::size_type __n)
{
  int v2 = __n;
  std::vector<unsigned int>::size_type v4 = __n;
  uint64_t v5 = std::vector<unsigned int>::vector(a1, __n);
  std::vector<unsigned int>::vector(v5 + 1, v4);
  if (v2)
  {
    uint64_t v6 = 0;
    begiuint64_t n = a1->__begin_;
    std::vector<unsigned int>::pointer v8 = a1[1].__begin_;
    do
    {
      begin[v6] = v6;
      v8[v6++] = 0;
    }
    while (v4 != v6);
  }
  return a1;
}

void sub_24F4DFEB8(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        std::vector<unsigned int>::pointer v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    std::vector<unsigned int>::pointer v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::__tree<unsigned int>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

BOOL cv3d::cv::gess::internal::IsFaceFlipped(double *a1, double *a2, double *a3, double *a4)
{
  double v4 = a3[1];
  double v5 = *a3 - *a2;
  double v6 = v4 - a2[1];
  double v7 = a3[2];
  double v8 = v7 - a2[2];
  double v9 = *a1 - *a3;
  double v10 = a1[1] - v4;
  double v11 = a1[2] - v7;
  double v12 = v6 * v11 - v8 * v10;
  double v13 = v8 * v9 - v5 * v11;
  double v14 = v5 * v10 - v6 * v9;
  double v15 = sqrt(v13 * v13 + v12 * v12 + v14 * v14);
  if (v15 == 0.0) {
    return 0;
  }
  double v16 = a4[2] - v7;
  double v17 = a4[1] - v4;
  double v18 = -v6;
  double v19 = *a4 - *a3;
  double v20 = v17 * -v8 + v6 * v16;
  double v21 = v16 * -v5 + v8 * v19;
  double v22 = v19 * v18 + v5 * v17;
  double v23 = sqrt(v21 * v21 + v20 * v20 + v22 * v22);
  return fabs(v23) < 1.0e-11
      || v13 / v15 * (v21 / v23) + v12 / v15 * (v20 / v23) + v14 / v15 * (v22 / v23) < 0.173648178;
}

BOOL cv3d::cv::gess::internal::IsElongated(double *a1, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a1[1];
  double v5 = a2[2];
  double v6 = a1[2];
  double v7 = a3[1];
  double v8 = a3[2];
  double v9 = sqrt((v3 - v4) * (v3 - v4) + (*a2 - *a1) * (*a2 - *a1) + (v5 - v6) * (v5 - v6));
  double v10 = sqrt((v7 - v3) * (v7 - v3) + (*a3 - *a2) * (*a3 - *a2) + (v8 - v5) * (v8 - v5));
  double v11 = sqrt((v7 - v4) * (v7 - v4) + (*a3 - *a1) * (*a3 - *a1) + (v8 - v6) * (v8 - v6));
  return ((v11 + v9 + v10) * 0.5 - v11)
       * (((v11 + v9 + v10) * 0.5 - v10)
        * (((v11 + v9 + v10) * 0.5 - v9)
         * 8.0))
       / (v11
        * (v9
         * v10)) < 0.02;
}

uint64_t cv3d::cv::gess::internal::Simplify::Simplify(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 64) = a2;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v5 = a1 + 88;
  double v6 = (void *)(a1 + 112);
  *(_OWORD *)(a1 + 136) = 0u;
  double v7 = (uint64_t *)(a1 + 136);
  uint64_t v38 = a1 + 160;
  *(_OWORD *)(a1 + 184) = 0u;
  float32x4_t v40 = (void *)(a1 + 184);
  *(_OWORD *)(a1 + 232) = 0u;
  float32x4_t v41 = (std::vector<unsigned int> *)(a1 + 232);
  float32x4_t v42 = (std::vector<unsigned int> *)(a1 + 208);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)a3;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)float32x4_t v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v49 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)&v50);
  uint64_t v8 = a2[16];
  uint64_t v36 = a2[17];
  uint64_t v39 = (uint64_t)(a2[14] - a2[13]) >> 2;
  std::vector<cv3d::cv::gess::internal::Quadric>::resize(v5, v39);
  std::vector<cv3d::cv::gess::math::Vector3T<double>>::resize((uint64_t)v6, v39);
  if (v39)
  {
    uint64_t v9 = 0;
    do
    {
      double v10 = (long long *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(void *)(a1 + 64), *(_DWORD *)(*(void *)(a1 + 64) + 176), v9);
      uint64_t v11 = 0;
      long long v43 = *v10;
      do
      {
        *(double *)&__p[v11] = *((float *)&__p[-2] + v11);
        ++v11;
      }
      while (v11 != 3);
      uint64_t v12 = *v6 + 24 * v9;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
      *(void *)(v12 + 16) = v45;
      ++v9;
    }
    while (v9 != v39);
  }
  std::vector<BOOL>::resize((uint64_t)v7, v39, 0);
  unsigned int v13 = -858993459 * ((v36 - v8) >> 2);
  unint64_t v14 = v13 >> 1;
  std::vector<cv3d::cv::gess::internal::Quadric>::resize(v38, v14);
  std::vector<float>::resize((uint64_t)v40, v14);
  uint64_t v15 = v13;
  std::vector<int>::resize(v42, v13);
  std::vector<int>::resize(v41, v14);
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::internal::EdgeErrorHeap,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,std::vector<float> &,void>(v40, __p);
  long long v16 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  double v17 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v16;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  LOBYTE(v43) = 0;
  std::vector<BOOL>::vector(__p, v13, (unsigned __int8 *)&v43);
  unsigned int v37 = v13 >> 1;
  if (v13)
  {
    unint64_t v18 = 0;
    unsigned int v13 = 0;
    do
    {
      uint64_t v19 = *(void *)(a1 + 64);
      LODWORD(v43) = v18;
      double v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19 + 104, (unsigned int *)&v43);
      unint64_t v21 = *v20;
      double v22 = __p[0];
      unint64_t v23 = v21 >> 6;
      uint64_t v24 = 1 << v21;
      if ((v24 & *((void *)__p[0] + v23)) == 0)
      {
        *(void *)((char *)__p[0] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v22[v23] |= v24;
        begiuint64_t n = v42->__begin_;
        v42->__begin_[v18] = v13;
        begin[*v20] = v13;
        v41->__begin_[v13++] = v18;
      }
      ++v18;
    }
    while (v15 != v18);
  }
  if (v13 != v37)
  {
    float32x4_t v33 = "e_index == e_size";
    int v34 = 46;
    goto LABEL_32;
  }
  if (*(unsigned char *)(a3 + 12))
  {
    if (*(void *)(a1 + 8) == *(void *)a1)
    {
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)a1, v39, cv3d::cv::gess::internal::INVALID_IMPORTANCE);
      goto LABEL_18;
    }
    float32x4_t v33 = "v_importances.size() == 0";
    int v34 = 49;
LABEL_32:
    __assert_rtn("Simplify", "QEMSimplify.cpp", v34, v33);
  }
LABEL_18:
  if (*(unsigned char *)(a3 + 4) && v39)
  {
    unint64_t v26 = 0;
    do
    {
      LODWORD(v43) = v26;
      BOOL is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)a2, (uint64_t)&v43);
      uint64_t v28 = *v7;
      unint64_t v29 = v26 >> 6;
      uint64_t v30 = 1 << v26;
      if (is_boundary) {
        uint64_t v31 = *(void *)(v28 + 8 * v29) | v30;
      }
      else {
        uint64_t v31 = *(void *)(v28 + 8 * v29) & ~v30;
      }
      *(void *)(v28 + 8 * v29) = v31;
      ++v26;
    }
    while (v39 != v26);
  }
  uint64_t v52 = 4 * v15 + 105 * v39 + 112 * v14 + 8 * v14;
  uint64_t v53 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v49 = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)&v51);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  return a1;
}

void sub_24F4E05B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  float32x4_t v32 = *a15;
  if (*a15)
  {
    *(void *)(v28 + 240) = v32;
    operator delete(v32);
  }
  float32x4_t v33 = *a16;
  if (*a16)
  {
    *(void *)(v28 + 216) = v33;
    operator delete(v33);
  }
  int v34 = *a14;
  if (*a14)
  {
    *(void *)(v28 + 192) = v34;
    operator delete(v34);
  }
  float v35 = *a12;
  if (*a12)
  {
    *(void *)(v28 + 168) = v35;
    operator delete(v35);
  }
  if (*v30) {
    operator delete(*v30);
  }
  uint64_t v36 = *v29;
  if (*v29)
  {
    *(void *)(v28 + 120) = v36;
    operator delete(v36);
  }
  unsigned int v37 = *a9;
  if (*a9)
  {
    *(void *)(v28 + 96) = v37;
    operator delete(v37);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v28 + 80);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v28 + 24));
  uint64_t v39 = *(void **)v28;
  if (*(void *)v28)
  {
    *(void *)(v28 + 8) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::internal::Quadric>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::internal::Quadric>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 80 * a2;
  }
}

void std::vector<cv3d::cv::gess::math::Vector3T<double>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<double>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void cv3d::cv::gess::internal::Simplify::Calculate(cv3d::cv::gess::internal::Simplify *this)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v106 = 0;
  long long v103 = 0u;
  uint64_t v104 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v107);
  unint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = v2[13];
  uint64_t v4 = v2[14];
  uint64_t v6 = v2[16];
  uint64_t v5 = v2[17];
  int v7 = llroundf(*((float *)this + 64) * (float)((v2[20] - v2[19]) >> 2));
  uint64_t v8 = *((void *)this + 6);
  if (v8)
  {
    char v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
    if (v7 < 1) {
      char v10 = 1;
    }
    else {
      char v10 = v9;
    }
    if (v10) {
      goto LABEL_74;
    }
  }
  else if (v7 < 1)
  {
    goto LABEL_74;
  }
  cv3d::cv::gess::internal::Simplify::ComputeVertexQuadrics(this);
  uint64_t v11 = *((void *)this + 6);
  if (!v11 || ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11) & 1) == 0)
  {
    long long v82 = *((_OWORD *)this + 4);
    int v83 = -1;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = (char *)this + 88;
    unsigned int v88 = (char *)this + 112;
    uint64_t v89 = (char *)this + 136;
    float32x4_t v90 = (char *)this + 160;
    float32x4_t v91 = (char *)this + 184;
    float32x4_t v92 = (char *)this + 208;
    float v93 = (char *)this + 232;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    int v97 = 0;
    unsigned int v98 = v99;
    v99[0] = 0;
    v99[1] = 0;
    float32x4_t v100 = 0;
    float32x4_t v101 = 0;
    uint64_t v102 = 0;
    unint64_t v12 = -858993459 * ((v5 - v6) >> 2);
    LOBYTE(v78[0]) = 0;
    std::vector<BOOL>::vector(__p, v12, (unsigned __int8 *)v78);
    *(void *)unint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    if (v12)
    {
      uint64_t v73 = v4;
      unint64_t v13 = 0;
      BOOL v14 = 1;
      while (1)
      {
        unsigned int v77 = v13;
        unint64_t v15 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(*((void *)this + 8) + 104, &v77);
        long long v16 = __p[0];
        unint64_t v17 = v15 >> 6;
        uint64_t v18 = 1 << v15;
        if ((v18 & *((void *)__p[0] + v17)) == 0)
        {
          *(void *)((char *)__p[0] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          v16[v17] |= v18;
          if (cv3d::cv::gess::internal::Collapser::EdgePlanCollapse((uint64_t)&v82, &v77, (uint64_t)v78)) {
            cv3d::cv::gess::internal::EdgeErrorHeap::Insert(*((cv3d::cv::gess::internal::EdgeErrorHeap **)this + 9), (unsigned int *)(*((void *)this + 26) + 4 * v77));
          }
          uint64_t v19 = *((void *)this + 6);
          if (v19)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 48))(v19)) {
              break;
            }
          }
        }
        BOOL v14 = ++v13 < v12;
        if (v12 == v13)
        {
          BOOL v14 = 0;
          break;
        }
      }
      uint64_t v4 = v73;
    }
    else
    {
      BOOL v14 = 0;
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (!v14)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v106 = std::chrono::system_clock::now().__d_.__rep_;
      cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v108);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
      cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v107);
      double v20 = (void *)*((void *)this + 9);
      unint64_t v21 = (_DWORD *)*v20;
      if (*(_DWORD *)*v20) {
        BOOL v22 = v7 < 1;
      }
      else {
        BOOL v22 = 1;
      }
      if (!v22)
      {
        do
        {
          v78[0] = 0;
          uint64_t v23 = *(unsigned int *)(v20[3] + 32 * v21[1] + 20);
          v78[0] = v23;
          unsigned int v24 = *(_DWORD *)(*((void *)this + 29) + 4 * v23);
          unsigned int v77 = v24;
          if (v24 == -1) {
            __assert_rtn("Calculate", "QEMSimplify.cpp", 136, "hh.Valid()");
          }
          uint64_t v25 = *((void *)this + 8) + 104;
          LODWORD(__p[0]) = v24;
          int v26 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v25, (unsigned int *)__p) + 12);
          float32x4_t v27 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*((void *)this + 9);
          if (v26 == -1 || *(_DWORD *)(*((void *)v27 + 3) + 32 * v78[0] + 20) == -1)
          {
            cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v27, v78);
          }
          else
          {
            if (*(float *)(*((void *)this + 23) + 4 * v78[0]) >= 3.4028e38) {
              break;
            }
            uint64_t v28 = cv3d::cv::gess::mesh::Topology::h(*((void *)this + 8) + 104, &v77);
            unint64_t v29 = *(unsigned int *)(v28 + 12);
            int v76 = *(_DWORD *)(v28 + 12);
            uint64_t v30 = *((void *)this + 8) + 104;
            uint64_t v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v30, &v77);
            uint64_t v32 = cv3d::cv::gess::mesh::Topology::h(v30, v31);
            unint64_t v33 = *(unsigned int *)(v32 + 12);
            int v75 = *(_DWORD *)(v32 + 12);
            int v34 = cv3d::cv::gess::internal::Collapser::Collapse((void **)&v82, &v77);
            int v35 = v34;
            if (*((unsigned char *)this + 268) && v34 >= 1) {
              cv3d::cv::gess::internal::Simplify::UpdateImportance((uint64_t)this, &v76, &v75);
            }
            if (*((unsigned char *)this + 269) && *((_DWORD *)this + 14) != -1 && v35 >= 1)
            {
              uint64_t v36 = (void *)(*((void *)this + 8) + 104);
              LODWORD(__p[0]) = v29;
              if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v36, (unsigned int *)__p) != -1)
              {
                unsigned int v37 = (void *)(*((void *)this + 8) + 104);
                LODWORD(__p[0]) = v33;
                if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v37, (unsigned int *)__p) != -1)
                {
                  int v69 = 149;
                  float32x4_t v70 = "Calculate";
                  float v71 = "QEMSimplify.cpp";
                  float32x4_t v72 = "mesh_.IsDangling(vhs) || mesh_.IsDangling(vhe)";
LABEL_81:
                  __assert_rtn(v70, v71, v69, v72);
                }
              }
              uint64_t v38 = (void *)(*((void *)this + 8) + 104);
              LODWORD(__p[0]) = v29;
              if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v38, (unsigned int *)__p) != -1
                || (uint64_t v47 = (void *)(*((void *)this + 8) + 104),
                    LODWORD(__p[0]) = v33,
                    *(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v47, (unsigned int *)__p) == -1))
              {
                uint64_t v39 = (void *)(*((void *)this + 8) + 104);
                LODWORD(__p[0]) = v29;
                if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v39, (unsigned int *)__p) != -1)
                {
                  float32x4_t v40 = (void *)(*((void *)this + 8) + 104);
                  LODWORD(__p[0]) = v33;
                  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v40, (unsigned int *)__p) == -1)
                  {
                    uint64_t v41 = *((void *)this + 8);
                    LODWORD(__p[0]) = *((_DWORD *)this + 14);
                    uint64_t v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v41 + 8), (unsigned int *)__p);
                    uint64_t v43 = *(void *)(v42 + 40);
                    if (v29 >= (*(void *)(v42 + 48) - v43) >> 2) {
                      goto LABEL_79;
                    }
                    *(_DWORD *)(v43 + 4 * v29) = v29;
                    uint64_t v44 = *((void *)this + 8);
                    LODWORD(__p[0]) = *((_DWORD *)this + 14);
                    uint64_t v45 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v44 + 8), (unsigned int *)__p);
                    uint64_t v46 = *(void *)(v45 + 40);
                    if (v33 >= (*(void *)(v45 + 48) - v46) >> 2) {
                      goto LABEL_79;
                    }
                    *(_DWORD *)(v46 + 4 * v33) = v29;
                  }
                }
              }
              else
              {
                uint64_t v48 = *((void *)this + 8);
                LODWORD(__p[0]) = *((_DWORD *)this + 14);
                uint64_t v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v48 + 8), (unsigned int *)__p);
                uint64_t v50 = *(void *)(v49 + 40);
                if (v29 >= (*(void *)(v49 + 48) - v50) >> 2
                  || (*(_DWORD *)(v50 + 4 * v29) = v33,
                      uint64_t v51 = *((void *)this + 8),
                      LODWORD(__p[0]) = *((_DWORD *)this + 14),
                      v52 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v51 + 8), (unsigned int *)__p), uint64_t v53 = *(void *)(v52 + 40), v33 >= (*(void *)(v52 + 48) - v53) >> 2))
                {
LABEL_79:
                  int v69 = 182;
                  float32x4_t v70 = "operator[]";
                  float v71 = "Attribute.h";
                  float32x4_t v72 = "index < data_.size()";
                  goto LABEL_81;
                }
                *(_DWORD *)(v53 + 4 * v33) = v33;
              }
            }
            uint64_t v54 = *((void *)this + 6);
            if (v54 && ((*(uint64_t (**)(uint64_t))(*(void *)v54 + 48))(v54) & 1) != 0) {
              goto LABEL_68;
            }
            v7 -= v35;
          }
          double v20 = (void *)*((void *)this + 9);
          unint64_t v21 = (_DWORD *)*v20;
          if (*(_DWORD *)*v20) {
            BOOL v55 = v7 < 1;
          }
          else {
            BOOL v55 = 1;
          }
        }
        while (!v55);
      }
      if (((v4 - v3) & 0x3FFFFFFFCLL) != 0)
      {
        uint64_t v56 = 0;
        unint64_t v57 = 0;
        while (1)
        {
          float32x4_t v58 = (void *)(*((void *)this + 8) + 104);
          LODWORD(__p[0]) = v57;
          if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v58, (unsigned int *)__p) != -1)
          {
            float32x4_t v59 = (float64x2_t *)(*((void *)this + 14) + v56);
            float64x2_t v74 = *v59;
            double v60 = v59[1].f64[0];
            uint64_t v61 = *((void *)this + 8);
            LODWORD(__p[0]) = *(_DWORD *)(v61 + 176);
            uint64_t v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v61 + 8), (unsigned int *)__p);
            uint64_t v63 = *(void *)(v62 + 40);
            if (v57 >= (*(void *)(v62 + 48) - v63) >> 4) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(float32x2_t *)&long long v64 = vcvt_f32_f64(v74);
            *(float *)&unsigned int v65 = v60;
            *((void *)&v64 + 1) = v65;
            *(_OWORD *)(v63 + 16 * v57) = v64;
          }
          uint64_t v66 = *((void *)this + 6);
          if (v66)
          {
            if ((*(uint64_t (**)(uint64_t))(*(void *)v66 + 48))(v66)) {
              break;
            }
          }
          ++v57;
          v56 += 24;
          if (((unint64_t)(v4 - v3) >> 2) == v57) {
            goto LABEL_67;
          }
        }
      }
      else
      {
LABEL_67:
        uint64_t v109 = 0;
        uint64_t v110 = 0;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v106 = std::chrono::system_clock::now().__d_.__rep_;
        cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v108);
      }
    }
LABEL_68:
    if (v100)
    {
      float32x4_t v101 = v100;
      operator delete(v100);
    }
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v98, v99[0]);
    for (uint64_t i = 0; i != -48; i -= 24)
    {
      float32x4_t v68 = *(void **)((char *)&v95 + i + 8);
      if (v68)
      {
        *(void *)((char *)&v96 + i) = v68;
        operator delete(v68);
      }
    }
  }
LABEL_74:
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
}

void sub_24F4E0ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  cv3d::cv::gess::internal::Collapser::~Collapser((cv3d::cv::gess::internal::Collapser *)&a23);
  if (a54 < 0) {
    operator delete(*(void **)(v54 + 208));
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::internal::Simplify::ComputeVertexQuadrics(cv3d::cv::gess::internal::Simplify *this)
{
  uint64_t v2 = (*(void *)(*((void *)this + 8) + 160) - *(void *)(*((void *)this + 8) + 152)) >> 2;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v31, 3uLL);
  if (!v2)
  {
    uint64_t v5 = (unsigned int *)v31[0];
    if (!v31[0]) {
      return;
    }
    goto LABEL_10;
  }
  int v3 = 0;
  do
  {
    uint64_t v4 = *((void *)this + 8);
    LODWORD(v30[0]) = v3;
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v4, (unsigned int *)v30, v31);
    uint64_t v5 = (unsigned int *)v31[0];
    uint64_t v6 = *((void *)this + 14);
    int v7 = (double *)(v6 + 24 * *(unsigned int *)(v31[0] + 4));
    uint64_t v8 = (double *)(v6 + 24 * *(unsigned int *)v31[0]);
    double v9 = v8[1];
    double v10 = *v7 - *v8;
    double v11 = v7[1] - v9;
    double v12 = v8[2];
    double v13 = v7[2] - v12;
    BOOL v14 = (double *)(v6 + 24 * *(unsigned int *)(v31[0] + 8));
    double v15 = *v8 - *v14;
    double v16 = v9 - v14[1];
    double v17 = v12 - v14[2];
    double v18 = v11 * v17 - v13 * v16;
    double v19 = v13 * v15 - v10 * v17;
    double v20 = v10 * v16 - v11 * v15;
    double v21 = sqrt(v19 * v19 + v18 * v18 + v20 * v20);
    if (v21 != 0.0)
    {
      uint64_t v22 = 0;
      double v23 = v18 / v21;
      double v24 = v19 / v21;
      double v25 = v20 / v21;
      double v26 = v9 * v24 + v23 * *v8 + v25 * v12;
      v30[0] = v23 * v23;
      v30[1] = v23 * v24;
      v30[2] = v23 * v25;
      v30[3] = v24 * v24;
      v30[4] = v24 * v25;
      v30[5] = v25 * v25;
      v30[6] = -(v26 * v23);
      v30[7] = -(v26 * v24);
      v30[8] = -(v26 * v25);
      v30[9] = v26 * v26;
      uint64_t v27 = *((void *)this + 11);
      do
      {
        uint64_t v28 = 0;
        uint64_t v29 = v27 + 80 * v5[v22];
        do
        {
          *(float64x2_t *)(v29 + v28 * 8) = vaddq_f64(*(float64x2_t *)&v30[v28], *(float64x2_t *)(v29 + v28 * 8));
          v28 += 2;
        }
        while (v28 != 10);
        ++v22;
      }
      while (v22 != 3);
    }
    ++v3;
  }
  while (v3 != v2);
  if (v5)
  {
LABEL_10:
    v31[1] = v5;
    operator delete(v5);
  }
}

void sub_24F4E10F4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Insert(cv3d::cv::gess::internal::EdgeErrorHeap *this, unsigned int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *((void *)this + 3) + 32 * v2;
  if (*(_DWORD *)(v3 + 20) != -1) {
    cv3d::cv::gess::internal::EdgeErrorHeap::Insert();
  }
  *(_DWORD *)uint64_t v3 = *(_DWORD *)(**((void **)this + 2) + 4 * v2);
  *(void *)(v3 + 12) = -1;
  *(void *)(v3 + 4) = -1;
  *(_DWORD *)(v3 + 20) = v2;
  *(_DWORD *)(v3 + 24) = -1;
  *(unsigned char *)(v3 + 28) = 0;
  uint64_t v4 = *(void *)this;
  unsigned int v5 = *a2;

  return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::insert(v4, v5);
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Remove(cv3d::cv::gess::internal::EdgeErrorHeap *this, const unsigned int *a2)
{
  uint64_t v3 = *a2;
  if (*(_DWORD *)(*((void *)this + 3) + 32 * v3 + 20) == -1) {
    cv3d::cv::gess::internal::EdgeErrorHeap::Remove();
  }
  uint64_t v5 = *(void *)this;
  cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(*(void *)this, v3, -3.4028e38);
  uint64_t result = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::extract_min(v5);
  uint64_t v7 = *((void *)this + 3) + 32 * result;
  *(_DWORD *)uint64_t v7 = 0;
  *(void *)(v7 + 4) = -1;
  *(void *)(v7 + 12) = -1;
  *(void *)(v7 + 20) = -1;
  *(unsigned char *)(v7 + 28) = 0;
  if (*(_DWORD *)(*((void *)this + 3) + 32 * *a2 + 20) != -1) {
    cv3d::cv::gess::internal::EdgeErrorHeap::Remove();
  }
  return result;
}

_DWORD *cv3d::cv::gess::internal::Simplify::UpdateImportance(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v4 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  ++*(_DWORD *)(a1 + 272);
  int v5 = *a3;
  v10[0] = *a2;
  v10[1] = v5;
  do
  {
    uint64_t v6 = v10[v4];
    uint64_t v7 = (void *)(*(void *)(a1 + 64) + 104);
    unsigned int v9 = v10[v4];
    uint64_t result = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v7, &v9);
    if (*result == -1) {
      *(_DWORD *)(*(void *)a1 + 4 * v6) = *(_DWORD *)(a1 + 272);
    }
    ++v4;
  }
  while (v4 != 2);
  return result;
}

void cv3d::cv::gess::internal::Collapser::~Collapser(cv3d::cv::gess::internal::Collapser *this)
{
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 160, *((void **)this + 21));
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v4 = *(void **)((char *)this + i + 128);
    if (v4)
    {
      *(void *)((char *)this + i + 136) = v4;
      operator delete(v4);
    }
  }
}

BOOL cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory(cv3d::cv::gess::util::os::MemoryInfo *this)
{
  kern_return_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[3];
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;

  *(void *)this = cv3d::cv::gess::util::os::ByteUsage(this);
  task_info_outCnt = 93;
  uint64_t v2 = task_info(*MEMORY[0x263EF8960], 0x16u, task_info_out, &task_info_outCnt);
  if (!v2)
  {
    uint64_t v3 = *(void *)task_info_out;
    uint64_t v4 = v11;
    *((void *)this + 1) = v10;
    *((void *)this + 2) = v3;
    *((_OWORD *)this + 2) = v13;
    int v5 = v9;
    *((void *)this + 6) = v4;
    *((void *)this + 7) = v5;
    *((void *)this + 3) = v12;
  }
  return v2 == 0;
}

void std::vector<cv3d::cv::gess::internal::Quadric>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::internal::Quadric>>(v4, v11);
    }
    else {
      double v12 = 0;
    }
    BOOL v14 = &v12[80 * v8];
    double v15 = &v12[80 * v11];
    size_t v16 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v14, v16);
    double v17 = &v14[v16];
    double v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 5) = *((_OWORD *)v18 - 5);
        long long v20 = *((_OWORD *)v18 - 4);
        long long v21 = *((_OWORD *)v18 - 3);
        long long v22 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v22;
        *((_OWORD *)v14 - 4) = v20;
        *((_OWORD *)v14 - 3) = v21;
        v14 -= 80;
        v18 -= 80;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::internal::Quadric>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

void std::vector<cv3d::cv::gess::math::Vector3T<double>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      double v12 = 0;
    }
    BOOL v14 = &v12[24 * v8];
    double v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    double v17 = &v14[v16];
    double v18 = (char *)*a1;
    double v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      long long v20 = v14;
    }
    else
    {
      do
      {
        long long v20 = v14 - 24;
        long long v21 = v19 - 24;
        uint64_t v22 = -24;
        do
        {
          *(void *)&v14[v22] = *(void *)&v19[v22];
          v22 += 8;
        }
        while (v22);
        v19 -= 24;
        v14 -= 24;
      }
      while (v21 != v18);
    }
    *a1 = v20;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::insert(uint64_t result, unsigned int a2)
{
  uint64_t v2 = **(void **)(result + 16);
  uint64_t v3 = v2 + 32 * a2;
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 4) = -1;
  *(_DWORD *)(v3 + 16) = -1;
  *(unsigned char *)(v3 + 28) = 0;
  uint64_t v4 = *(unsigned int *)(result + 4);
  if (v4 == -1)
  {
    *(int32x2_t *)(v3 + 8) = vdup_n_s32(a2);
  }
  else
  {
    uint64_t v5 = v2 + 32 * v4;
    uint64_t v6 = *(unsigned int *)(v5 + 8);
    *(_DWORD *)(v2 + 32 * v6 + 12) = a2;
    *(_DWORD *)(v3 + 8) = v6;
    *(_DWORD *)(v3 + 12) = v4;
    *(_DWORD *)(v5 + 8) = a2;
    if (*(float *)v3 >= *(float *)v5) {
      goto LABEL_6;
    }
  }
  *(_DWORD *)(result + 4) = a2;
LABEL_6:
  ++*(_DWORD *)result;
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(uint64_t result, unsigned int a2, float a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = **(void **)(result + 16);
  uint64_t v5 = v4 + 32 * a2;
  if (*(float *)v5 >= a3)
  {
    uint64_t v7 = result;
    *(float *)uint64_t v5 = a3;
    uint64_t v8 = *(unsigned int *)(v5 + 4);
    if (v8 != -1 && *(float *)(v4 + 32 * v8) > a3)
    {
      cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cut(result, a2, v8);
      uint64_t result = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cascading_cut(v7, v8);
      uint64_t v4 = **(void **)(v7 + 16);
      a3 = *(float *)(v4 + 32 * v3);
    }
    if (a3 < *(float *)(v4 + 32 * *(unsigned int *)(v7 + 4))) {
      *(_DWORD *)(v7 + 4) = a2;
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::extract_min(uint64_t a1)
{
  memset(&v25, 0, sizeof(v25));
  uint64_t v1 = *(unsigned int *)(a1 + 4);
  if (v1 != -1)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = v3 + 32 * v1;
    uint64_t v5 = *(unsigned int *)(v4 + 16);
    if (v5 != -1)
    {
      std::vector<int>::resize(&v25, *(int *)(v4 + 24));
      uint64_t v3 = **(void **)(a1 + 16);
      uint64_t v6 = v3 + 32 * v1;
      int v8 = *(_DWORD *)(v6 + 24);
      uint64_t v7 = (unsigned int *)(v6 + 24);
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        begiuint64_t n = v25.__begin_;
        do
        {
          begin[v9] = v5;
          uint64_t v5 = *(unsigned int *)(v3 + 32 * v5 + 12);
          ++v9;
          uint64_t v11 = (int)*v7;
        }
        while (v9 < v11);
        uint64_t v12 = *v7;
        if ((int)v11 >= 1)
        {
          std::vector<unsigned int>::pointer v13 = v25.__begin_;
          uint64_t v14 = *(unsigned int *)(a1 + 4);
          uint64_t v15 = v3 + 32 * v14;
          unsigned int v18 = *(_DWORD *)(v15 + 8);
          size_t v16 = (unsigned int *)(v15 + 8);
          uint64_t v17 = v18;
          do
          {
            unsigned int v19 = *v13++;
            *(_DWORD *)(v3 + 32 * v17 + 12) = v19;
            long long v20 = (_DWORD *)(v3 + 32 * v19);
            v20[2] = v17;
            v20[3] = v14;
            *size_t v16 = v19;
            v20[1] = -1;
            uint64_t v17 = v19;
            --v12;
          }
          while (v12);
        }
      }
    }
    uint64_t v21 = v3 + 32 * v1;
    uint64_t v22 = *(unsigned int *)(v21 + 8);
    *(_DWORD *)(v3 + 32 * v22 + 12) = *(_DWORD *)(v21 + 12);
    uint64_t v23 = *(unsigned int *)(v21 + 12);
    *(_DWORD *)(v3 + 32 * v23 + 8) = v22;
    if (v1 == v23)
    {
      *(_DWORD *)(a1 + 4) = -1;
    }
    else
    {
      *(_DWORD *)(a1 + 4) = v23;
      cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::consolidate(a1);
    }
    --*(_DWORD *)a1;
    if (v25.__begin_)
    {
      v25.__end_ = v25.__begin_;
      operator delete(v25.__begin_);
    }
  }
  return v1;
}

void sub_24F4E19BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cut(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = **(void **)(result + 16);
  uint64_t v4 = v3 + 32 * a2;
  uint64_t v5 = (_DWORD *)(v4 + 12);
  uint64_t v6 = *(unsigned int *)(v4 + 12);
  if (*(_DWORD *)(v4 + 12) == a2)
  {
    uint64_t v7 = a3;
    *(_DWORD *)(v3 + 32 * a3 + 16) = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 32 * v6 + 8) = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v3 + 32 * *(unsigned int *)(v4 + 8) + 12) = v6;
    uint64_t v7 = a3;
    uint64_t v8 = v3 + 32 * a3;
    int v10 = *(_DWORD *)(v8 + 16);
    uint64_t v9 = (_DWORD *)(v8 + 16);
    if (v10 == a2) {
      _DWORD *v9 = *v5;
    }
  }
  --*(_DWORD *)(v3 + 32 * v7 + 24);
  uint64_t v11 = *(unsigned int *)(result + 4);
  uint64_t v12 = v3 + 32 * v11;
  uint64_t v13 = *(unsigned int *)(v12 + 12);
  *(_DWORD *)(v3 + 32 * v13 + 8) = a2;
  *uint64_t v5 = v13;
  *(_DWORD *)(v12 + 12) = a2;
  uint64_t v14 = v3 + 32 * a2;
  *(_DWORD *)(v14 + 4) = -1;
  *(_DWORD *)(v14 + 8) = v11;
  *(unsigned char *)(v14 + 28) = 0;
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cascading_cut(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = **(void **)(result + 16);
  unsigned int v4 = *(_DWORD *)(v3 + 32 * a2 + 4);
  if (v4 != -1)
  {
    uint64_t v5 = result;
    while (1)
    {
      uint64_t v6 = v3 + 32 * v2;
      int v8 = *(unsigned __int8 *)(v6 + 28);
      uint64_t v7 = (unsigned char *)(v6 + 28);
      if (!v8) {
        break;
      }
      unsigned int v9 = v4;
      uint64_t result = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cut(v5, a2, v4);
      uint64_t v2 = v9;
      uint64_t v3 = **(void **)(v5 + 16);
      unsigned int v4 = *(_DWORD *)(v3 + 32 * v9 + 4);
      a2 = v9;
      if (v4 == -1) {
        return result;
      }
    }
    *uint64_t v7 = 1;
  }
  return result;
}

void cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::consolidate(uint64_t a1)
{
  memset(&v28, 0, sizeof(v28));
  memset(&__p, 0, sizeof(__p));
  int v2 = vcvtmd_s64_f64(log((double)*(int *)a1) / 0.481211825);
  int v3 = v2 + 2;
  std::vector<int>::resize(&v28, v2 + 2);
  if (v2 >= -1) {
    memset(v28.__begin_, 255, 4 * (v2 + 1) + 4);
  }
  std::vector<unsigned int>::size_type v4 = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 4);
  uint64_t v6 = v5;
  do
  {
    uint64_t v6 = *(unsigned int *)(**(void **)(a1 + 16) + 32 * v6 + 12);
    ++v4;
  }
  while (v6 != v5);
  std::vector<int>::resize(&__p, v4);
  begiuint64_t n = __p.__begin_;
  uint64_t v8 = **(void **)(a1 + 16);
  std::vector<unsigned int>::size_type v9 = v4;
  do
  {
    *begin++ = v5;
    uint64_t v5 = *(unsigned int *)(v8 + 32 * v5 + 12);
    --v9;
  }
  while (v9);
  uint64_t v10 = 0;
  uint64_t v11 = v28.__begin_;
  do
  {
    uint64_t v12 = __p.__begin_[v10];
    uint64_t v13 = *(int *)(**(void **)(a1 + 16) + 32 * v12 + 24);
    for (unsigned int i = v11[v13]; i != -1; unsigned int i = v19[1])
    {
      uint64_t v15 = **(void **)(a1 + 16);
      float v16 = *(float *)(v15 + 32 * i);
      float v17 = *(float *)(v15 + 32 * v12);
      if (v16 >= v17) {
        unsigned int v18 = i;
      }
      else {
        unsigned int v18 = v12;
      }
      if (v16 < v17) {
        LODWORD(v12) = i;
      }
      cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::fib_heap_link(a1, v18, v12);
      uint64_t v11 = v28.__begin_;
      unsigned int v19 = &v28.__begin_[v13];
      *unsigned int v19 = -1;
      ++v13;
    }
    v11[v13] = v12;
    ++v10;
  }
  while (v4 != v10);
  *(_DWORD *)(a1 + 4) = -1;
  if (v2 >= -1)
  {
    if (v3 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v3;
    }
    uint64_t v21 = v11;
    uint64_t v22 = 0xFFFFFFFFLL;
    do
    {
      uint64_t v23 = *v21;
      if (v23 != -1)
      {
        uint64_t v24 = **(void **)(a1 + 16);
        if (v22 == 0xFFFFFFFFLL)
        {
          *(_DWORD *)(v24 + 32 * v23 + 12) = v23;
          *(_DWORD *)(v24 + 32 * *v21 + 8) = v23;
LABEL_26:
          *(_DWORD *)(a1 + 4) = v23;
          uint64_t v22 = v23;
          goto LABEL_27;
        }
        uint64_t v25 = v24 + 32 * v22;
        uint64_t v26 = *(unsigned int *)(v25 + 8);
        *(_DWORD *)(v24 + 32 * v26 + 12) = v23;
        *(_DWORD *)(v24 + 32 * *v21 + 8) = v26;
        *(_DWORD *)(v25 + 8) = *v21;
        *(_DWORD *)(v24 + 32 * *v21 + 12) = v22;
        uint64_t v23 = *v21;
        if (*(float *)(v24 + 32 * v23) < *(float *)v25) {
          goto LABEL_26;
        }
      }
LABEL_27:
      ++v21;
      --v20;
    }
    while (v20);
  }
  if (!__p.__begin_ || (__p.__end_ = __p.__begin_, operator delete(__p.__begin_), (uint64_t v11 = v28.__begin_) != 0))
  {
    v28.__end_ = v11;
    operator delete(v11);
  }
}

void sub_24F4E1D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::fib_heap_link(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = **(void **)(result + 16);
  uint64_t v4 = v3 + 32 * a2;
  int v6 = *(_DWORD *)(v4 + 12);
  uint64_t v5 = (_DWORD *)(v4 + 12);
  uint64_t v7 = v5 - 1;
  uint64_t v8 = *(v5 - 1);
  *(_DWORD *)(v3 + 32 * v8 + 12) = v6;
  *(_DWORD *)(v3 + 32 * *v5 + 8) = v8;
  uint64_t v9 = v3 + 32 * a3;
  unsigned int v12 = *(_DWORD *)(v9 + 16);
  uint64_t v11 = (unsigned int *)(v9 + 16);
  uint64_t v10 = v12;
  if (v12 == -1)
  {
    *uint64_t v11 = a2;
    LODWORD(v10) = a2;
  }
  else
  {
    uint64_t v13 = v3 + 32 * v10;
    unsigned int v14 = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v3 + 32 * v14 + 12) = a2;
    *uint64_t v7 = v14;
    uint64_t v7 = (unsigned int *)(v13 + 8);
  }
  *uint64_t v7 = a2;
  *uint64_t v5 = v10;
  uint64_t v15 = v3 + 32 * a2;
  *(_DWORD *)(v15 + 4) = a3;
  ++*(_DWORD *)(v3 + 32 * a3 + 24);
  *(unsigned char *)(v15 + 28) = 0;
  return result;
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::internal::EdgeErrorHeap,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,std::vector<float> &,void>@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_24F4E1E5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,0>(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8A50;
  cv3d::cv::gess::internal::EdgeErrorHeap::EdgeErrorHeap(a1 + 3, a2);
  return a1;
}

void sub_24F4E1EB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8A50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::__on_zero_shared(uint64_t a1)
{
}

void *cv3d::cv::gess::internal::EdgeErrorHeap::EdgeErrorHeap(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = 0;
  uint64_t v3 = a1 + 3;
  a1[4] = 0;
  a1[5] = 0;
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 2;
  int v8 = 0;
  uint64_t v9 = -1;
  uint64_t v10 = -1;
  uint64_t v11 = -1;
  char v12 = 0;
  std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::resize((uint64_t)(a1 + 3), v4, &v8);
  uint64_t v5 = operator new(0x30uLL);
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = &unk_2700D8A88;
  v5[3] = 0xFFFFFFFF00000000;
  void v5[5] = v3;
  int v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v5 + 3;
  a1[1] = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_24F4E2010(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 5)
  {
    if (a2)
    {
      uint64_t v16 = 32 * a2;
      float v17 = &v9[2 * a2];
      do
      {
        long long v18 = a3[1];
        _OWORD *v9 = *a3;
        v9[1] = v18;
        v9 += 2;
        v16 -= 32;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 5);
    if (v11 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 5;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 4 > v11) {
      unint64_t v11 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unsigned int v19 = &v15[32 * v12];
    uint64_t v20 = &v19[32 * a2];
    uint64_t v21 = 32 * a2;
    uint64_t v22 = v19;
    do
    {
      long long v23 = a3[1];
      *(_OWORD *)uint64_t v22 = *a3;
      *((_OWORD *)v22 + 1) = v23;
      v22 += 32;
      v21 -= 32;
    }
    while (v21);
    uint64_t v24 = &v15[32 * v14];
    uint64_t v26 = (char *)*a1;
    uint64_t v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        long long v27 = *((_OWORD *)v25 - 2);
        *(_OWORD *)(v19 - 19) = *(_OWORD *)(v25 - 19);
        *((_OWORD *)v19 - 2) = v27;
        v19 -= 32;
        v25 -= 32;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v24;
    if (v25)
    {
      operator delete(v25);
    }
  }
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8A88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

double std::__shared_ptr_emplace<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>>::__on_zero_shared(uint64_t a1)
{
  double result = NAN;
  *(void *)(a1 + 24) = 0xFFFFFFFF00000000;
  return result;
}

void std::__destroy_at[abi:ne180100]<cv3d::cv::gess::internal::EdgeErrorHeap,0>(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t cv3d::cv::gess::internal::Collapser::Collect(cv3d::cv::gess::internal::Collapser *this)
{
  int v2 = (_DWORD *)((char *)this + 16);
  uint64_t v34 = cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, (unsigned int *)this + 4);
  uint64_t v3 = *(void *)this + 104;
  unint64_t v4 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v3, (unsigned int *)this + 4);
  uint64_t v33 = cv3d::cv::gess::mesh::Topology::h(v3, v4);
  uint64_t v5 = cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, (unsigned int *)this + 4);
  uint64_t v6 = (char *)this + 104;
  uint64_t v7 = *(void *)this + 104;
  int v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, (unsigned int *)this + 4);
  uint64_t v9 = cv3d::cv::gess::mesh::Topology::h(v7, v8);
  uint64_t v10 = 0;
  char v11 = 1;
  do
  {
    char v12 = v11;
    uint64_t v13 = &v6[24 * v10];
    *((void *)v13 + 1) = *(void *)v13;
    unint64_t v14 = (_DWORD **)(v13 + 8);
    BOOL v15 = (v11 & 1) == 0;
    uint64_t v16 = v34;
    if (v15) {
      uint64_t v16 = v33;
    }
    int v37 = *(_DWORD *)(v16 + 12);
    cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v36, *(void *)this + 104, &v37);
    unsigned int v35 = -1;
    uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v36);
    unsigned int v35 = result;
    if (result != -1)
    {
      long long v18 = &v6[24 * v10 + 16];
      do
      {
        if (result != *v2)
        {
          unsigned int v19 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, (unsigned int *)this + 4);
          if (v35 != *v19)
          {
            uint64_t v20 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)this, *(_DWORD *)(*(void *)this + 180), v35);
            if ((v21 & *v20) != 0
              || *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, &v35) + 16) != *(_DWORD *)(v5 + 16)
              && *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, &v35) + 16) != *(_DWORD *)(v9 + 16))
            {
              uint64_t v22 = *v14;
              if ((unint64_t)*v14 >= *(void *)v18)
              {
                uint64_t v24 = ((uint64_t)v22 - *(void *)v13) >> 2;
                if ((unint64_t)(v24 + 1) >> 62) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v25 = *(void *)v18 - *(void *)v13;
                uint64_t v26 = v25 >> 1;
                if (v25 >> 1 <= (unint64_t)(v24 + 1)) {
                  uint64_t v26 = v24 + 1;
                }
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v27 = v26;
                }
                if (v27) {
                  std::vector<unsigned int> v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v18, v27);
                }
                else {
                  std::vector<unsigned int> v28 = 0;
                }
                uint64_t v29 = &v28[4 * v24];
                *(_DWORD *)uint64_t v29 = v35;
                long long v23 = v29 + 4;
                uint64_t v30 = *v14;
                uint64_t v31 = *(_DWORD **)v13;
                if (*v14 != *(_DWORD **)v13)
                {
                  do
                  {
                    int v32 = *--v30;
                    *((_DWORD *)v29 - 1) = v32;
                    v29 -= 4;
                  }
                  while (v30 != v31);
                  uint64_t v30 = *(_DWORD **)v13;
                }
                *(void *)uint64_t v13 = v29;
                *unint64_t v14 = v23;
                *(void *)long long v18 = &v28[4 * v27];
                if (v30) {
                  operator delete(v30);
                }
              }
              else
              {
                *uint64_t v22 = v35;
                long long v23 = v22 + 1;
              }
              *unint64_t v14 = v23;
            }
          }
        }
        uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v36);
        unsigned int v35 = result;
      }
      while (result != -1);
    }
    char v11 = 0;
    uint64_t v10 = 1;
  }
  while ((v12 & 1) != 0);
  return result;
}

void cv3d::cv::gess::internal::Collapser::FindCoincideEdges(void *a1, int a2, int a3)
{
  uint64_t v6 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v7 = (char **)(a1 + 13);
  long long v53 = 0u;
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint64_t v10 = (uint64_t *)&v53 + 3 * v6;
    if (&v53 != (long long *)v7) {
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v53 + 24 * v6, v7[3 * v6], (uint64_t)v7[3 * v6 + 1], (v7[3 * v6 + 1] - v7[3 * v6]) >> 2);
    }
    uint64_t v11 = *v10;
    char v12 = (unsigned int *)*((void *)&v53 + 3 * v6 + 1);
    unint64_t v13 = 126 - 2 * __clz(((uint64_t)v12 - *v10) >> 2);
    BOOL v14 = v12 == (unsigned int *)*v10;
    uint64_t v56 = a1;
    if (v14) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v13;
    }
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,false>(v11, v12, &v56, v15, 1);
    char v8 = 0;
    uint64_t v6 = 1;
  }
  while ((v9 & 1) != 0);
  uint64_t v16 = (unsigned int *)v53;
  if ((void)v53 != *((void *)&v53 + 1))
  {
    float v17 = (unsigned int *)*((void *)&v54 + 1);
    while (v17 != (unsigned int *)v55)
    {
      uint64_t v18 = *a1 + 104;
      unsigned int v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v18, v16);
      unsigned int v20 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v18, v19) + 12);
      uint64_t v21 = *a1 + 104;
      uint64_t v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, v17);
      if (v20 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v21, v22) + 12))
      {
        uint64_t v23 = *a1 + 104;
        uint64_t v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v23, v17);
        unsigned int v25 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v23, v24) + 12);
        uint64_t v26 = *a1 + 104;
        unint64_t v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, v16);
        if (v25 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12))
        {
          uint64_t v28 = *a1 + 104;
          uint64_t v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v28, v16);
          uint64_t v30 = cv3d::cv::gess::mesh::Topology::h(v28, v29);
          uint64_t v31 = *a1 + 104;
          int v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, v17);
          if (*(_DWORD *)(v30 + 12) != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v31, v32) + 12)) {
            __assert_rtn("FindCoincideEdges", "Collapser.cpp", 50, "mesh_.HEdgeEnd(*it0) == mesh_.HEdgeEnd(*it1)");
          }
          unint64_t v33 = a1[25];
          uint64_t v34 = (_DWORD *)a1[24];
          if ((unint64_t)v34 >= v33)
          {
            uint64_t v38 = a1[23];
            uint64_t v39 = ((uint64_t)v34 - v38) >> 4;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v41 = v33 - v38;
            if (v41 >> 3 > v40) {
              unint64_t v40 = v41 >> 3;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)(a1 + 25), v42);
            uint64_t v44 = &v43[16 * v39];
            uint64_t v46 = &v43[16 * v45];
            unsigned int v47 = *v16;
            unsigned int v48 = *v17;
            *(_DWORD *)uint64_t v44 = a2;
            *((_DWORD *)v44 + 1) = a3;
            *((_DWORD *)v44 + 2) = v47;
            *((_DWORD *)v44 + 3) = v48;
            int v37 = v44 + 16;
            uint64_t v50 = (char *)a1[23];
            uint64_t v49 = (char *)a1[24];
            if (v49 != v50)
            {
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v49 - 1);
                v44 -= 16;
                v49 -= 16;
              }
              while (v49 != v50);
              uint64_t v49 = (char *)a1[23];
            }
            a1[23] = v44;
            a1[24] = v37;
            a1[25] = v46;
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            unsigned int v35 = *v16;
            unsigned int v36 = *v17;
            _DWORD *v34 = a2;
            v34[1] = a3;
            v34[2] = v35;
            v34[3] = v36;
            int v37 = v34 + 4;
          }
          a1[24] = v37;
          break;
        }
        ++v17;
      }
      else
      {
        ++v16;
      }
      if (v16 == *((unsigned int **)&v53 + 1)) {
        break;
      }
    }
  }
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v52 = *(void **)((char *)&v54 + i + 8);
    if (v52)
    {
      *(void *)((char *)&v55 + i) = v52;
      operator delete(v52);
    }
  }
}

void sub_24F4E2848(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void **)((char *)&a9 + v10 + 24);
    if (v11)
    {
      *(uint64_t *)((char *)&a9 + v10 + 32) = (uint64_t)v11;
      operator delete(v11);
    }
    v10 -= 24;
    if (v10 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

BOOL cv3d::cv::gess::internal::Collapser::EdgePlanCollapse(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v6 = cv3d::cv::gess::mesh::Topology::h(*(void *)a1 + 104, a2);
  uint64_t v7 = *(void *)a1 + 104;
  char v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, a2);
  uint64_t v9 = cv3d::cv::gess::mesh::Topology::h(v7, v8);
  uint64_t v10 = v9;
  uint64_t v11 = 0;
  uint64_t v12 = *(unsigned int *)(**(void **)(a1 + 88) + 4 * *a2);
  uint64_t v13 = **(void **)(a1 + 48);
  BOOL v14 = (float64x2_t *)(v13 + 80 * *(unsigned int *)(v6 + 12));
  uint64_t v15 = v13 + 80 * *(unsigned int *)(v9 + 12);
  uint64_t v16 = **(void **)(a1 + 72);
  uint64_t v17 = **(void **)(a1 + 80);
  float64x2_t v61 = v14[1];
  float64x2_t v62 = v14[2];
  float64x2_t v63 = v14[3];
  float64x2_t v64 = v14[4];
  float64x2_t v60 = *v14;
  do
  {
    *(float64x2_t *)((char *)&v60 + v11) = vaddq_f64(*(float64x2_t *)(v15 + v11), *(float64x2_t *)((char *)&v60 + v11));
    v11 += 16;
  }
  while (v11 != 80);
  uint64_t v18 = (float64x2_t *)(v16 + 80 * v12);
  v18[1] = v61;
  v18[2] = v62;
  v18[3] = v63;
  v18[4] = v64;
  *uint64_t v18 = v60;
  unint64_t v19 = *(unsigned int *)(v6 + 12);
  uint64_t v20 = **(void **)(a1 + 64);
  uint64_t v21 = (1 << v19) & *(void *)(v20 + ((v19 >> 3) & 0x1FFFFFF8));
  unint64_t v22 = *(unsigned int *)(v9 + 12);
  uint64_t v23 = (1 << v22) & *(void *)(v20 + ((v22 >> 3) & 0x1FFFFFF8));
  if (v23) {
    BOOL v24 = v21 != 0;
  }
  else {
    BOOL v24 = 0;
  }
  if (!v24)
  {
    if ((v21 != 0) == (v23 != 0))
    {
      double v27 = v18[2].f64[0];
      double v28 = v18->f64[0] * (v18[1].f64[1] * v18[2].f64[1] - v27 * v27)
          - v18->f64[1] * (v18->f64[1] * v18[2].f64[1] - v27 * v18[1].f64[0])
          + v18[1].f64[0] * (v18->f64[1] * v27 - v18[1].f64[1] * v18[1].f64[0]);
      if (v28 == 0.0)
      {
        uint64_t v41 = **(void **)(a1 + 56);
        unint64_t v42 = (float64x2_t *)(v41 + 24 * v19);
        uint64_t v43 = (float64x2_t *)(v41 + 24 * v22);
        float64_t v44 = (v42[1].f64[0] + v43[1].f64[0]) * 0.5;
        __asm { FMOV            V2.2D, #0.5 }
        *(float64x2_t *)a3 = vmulq_f64(vaddq_f64(*v42, *v43), _Q2);
        *(float64_t *)(a3 + 16) = v44;
        uint64_t v50 = 0;
        float v51 = cv3d::cv::gess::internal::Quadric::error(v18->f64, (double *)a3);
        *(float *)(v17 + 4 * v12) = v51;
        int v52 = *(_DWORD *)(v10 + 12);
        LODWORD(v60.f64[0]) = *(_DWORD *)(v6 + 12);
        HIDWORD(v60.f64[0]) = v52;
        do
        {
          double v53 = cv3d::cv::gess::internal::Quadric::error(v18->f64, (double *)(**(void **)(a1 + 56) + 24 * *(unsigned int *)((char *)v60.f64 + v50)));
          if (v53 < *(float *)(v17 + 4 * v12))
          {
            long long v54 = (void *)(**(void **)(a1 + 56) + 24 * *(unsigned int *)((char *)v60.f64 + v50));
            *(void *)a3 = *v54;
            *(void *)(a3 + 8) = v54[1];
            *(void *)(a3 + 16) = v54[2];
            float v55 = v53;
            *(float *)(v17 + 4 * v12) = v55;
          }
          v50 += 4;
        }
        while (v50 != 8);
      }
      else
      {
        cv3d::cv::gess::internal::Quadric::optimal((cv3d::cv::gess::internal::Quadric *)v18, v28, v60.f64);
        uint64_t v29 = 0;
        double v30 = v61.f64[1];
        double v31 = v61.f64[0];
        *(float64_t *)(a3 + 16) = v61.f64[0];
        *(float *)&double v30 = v30;
        *(_DWORD *)(v17 + 4 * v12) = LODWORD(v30);
        float64x2_t v32 = v60;
        *(float64x2_t *)a3 = v60;
        uint64_t v33 = **(void **)(a1 + 56);
        uint64_t v34 = (float64x2_t *)(v33 + 24 * *(unsigned int *)(v10 + 12));
        unsigned int v35 = (float64x2_t *)(v33 + 24 * *(unsigned int *)(v6 + 12));
        double v36 = v35[1].f64[0];
        float64_t v37 = v34[1].f64[0] - v36;
        float64x2_t v38 = *v34;
        float64x2_t v39 = *v35;
        float64x2_t v60 = vsubq_f64(*v34, *v35);
        v61.f64[0] = v37;
        float64x2_t v58 = vsubq_f64(v32, v39);
        double v59 = v31 - v36;
        while (1)
        {
          float v40 = v58.f64[v29] / v60.f64[v29] + -0.5;
          if (fabsf(v40) > 20.0) {
            break;
          }
          if (++v29 == 3) {
            return !v24;
          }
        }
        if (v40 > 0.0)
        {
          uint64_t v56 = v34;
        }
        else
        {
          v38.f64[0] = v39.f64[0];
          uint64_t v56 = v35;
        }
        *(float64_t *)a3 = v38.f64[0];
        *(float64_t *)(a3 + 8) = v56->f64[1];
        *(float64_t *)(a3 + 16) = v56[1].f64[0];
      }
    }
    else
    {
      if (!v21) {
        LODWORD(v19) = *(_DWORD *)(v9 + 12);
      }
      unsigned int v25 = (void *)(**(void **)(a1 + 56) + 24 * v19);
      *(void *)a3 = *v25;
      *(void *)(a3 + 8) = v25[1];
      *(void *)(a3 + 16) = v25[2];
      float v26 = cv3d::cv::gess::internal::Quadric::error(v18->f64, (double *)a3);
      *(float *)(v17 + 4 * v12) = v26;
    }
  }
  return !v24;
}

double cv3d::cv::gess::internal::Quadric::error(double *a1, double *a2)
{
  double v2 = a2[1];
  double v3 = a2[2];
  return a1[9]
       + v2 * (v2 * a1[3] + a1[1] * *a2 + a1[4] * v3)
       + (a1[1] * v2 + *a1 * *a2 + a1[2] * v3) * *a2
       + (v2 * a1[4] + a1[2] * *a2 + a1[5] * v3) * v3
       + (v2 * a1[7] + a1[6] * *a2 + a1[8] * v3) * 2.0;
}

double cv3d::cv::gess::internal::Quadric::optimal@<D0>(cv3d::cv::gess::internal::Quadric *this@<X0>, double a2@<D0>, double *a3@<X8>)
{
  if (a2 == 0.0) {
    cv3d::cv::gess::internal::Quadric::optimal();
  }
  double v3 = 1.0 / a2;
  double v5 = *((double *)this + 4);
  double v4 = *((double *)this + 5);
  double v7 = *((double *)this + 2);
  double v6 = *((double *)this + 3);
  double v8 = v3 * (v6 * v4 - v5 * v5);
  double v9 = *((double *)this + 1);
  double v10 = v3 * (v7 * v5 - v9 * v4);
  double v11 = v3 * (v9 * v5 - v7 * v6);
  double v12 = v3 * (*(double *)this * v4 - v7 * v7);
  double v13 = v3 * (v9 * v7 - *(double *)this * v5);
  double v14 = v3 * (*(double *)this * v6 - v9 * v9);
  double v15 = *((double *)this + 6);
  double v16 = *((double *)this + 7);
  double v17 = *((double *)this + 8);
  double v18 = *((double *)this + 9);
  double v19 = v10 * v16 + v8 * v15 + v11 * v17;
  double v20 = v12 * v16 + v10 * v15 + v13 * v17;
  double v21 = v16 * v13 + v11 * v15 + v14 * v17;
  double result = -v21;
  *a3 = -v19;
  a3[1] = -v20;
  a3[2] = -v21;
  a3[3] = v18 + -(v20 * v16) - v15 * v19 - v17 * v21;
  return result;
}

uint64_t cv3d::cv::gess::internal::Collapser::CollectAndUpdateDirtyHEdges(uint64_t a1, uint64_t a2)
{
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v17, *(void *)a1 + 104, a2);
  uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v17);
  for (unsigned int i = result; result != -1; unsigned int i = result)
  {
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 24)
                   + 32 * *(unsigned int *)(**(void **)(a1 + 88) + 4 * result)
                   + 20) == -1)
    {
      p_unsigned int i = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(*(void *)a1 + 104, &i);
      double v6 = (uint64_t **)(a1 + 160);
      double v5 = p_i;
    }
    else
    {
      p_unsigned int i = &i;
      double v5 = &i;
      double v6 = (uint64_t **)(a1 + 160);
    }
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v6, p_i, v5);
    uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v17);
  }
  memset(v15, 0, sizeof(v15));
  double v7 = *(unsigned int **)(a1 + 160);
  double v8 = (unsigned int *)(a1 + 168);
  if (v7 != (unsigned int *)(a1 + 168))
  {
    do
    {
      uint64_t result = cv3d::cv::gess::internal::Collapser::EdgePlanCollapse(a1, v7 + 7, (uint64_t)v15);
      double v9 = (unsigned int *)*((void *)v7 + 1);
      if (v9)
      {
        do
        {
          double v10 = v9;
          double v9 = *(unsigned int **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          double v10 = (unsigned int *)*((void *)v7 + 2);
          BOOL v11 = *(void *)v10 == (void)v7;
          double v7 = v10;
        }
        while (!v11);
      }
      double v7 = v10;
    }
    while (v10 != v8);
    double v7 = *(unsigned int **)(a1 + 160);
  }
  if (v7 != v8)
  {
    do
    {
      uint64_t result = *(void *)(a1 + 8);
      double v12 = (const unsigned int *)(**(void **)(a1 + 88) + 4 * v7[7]);
      if (*(_DWORD *)(*(void *)(result + 24) + 32 * *v12 + 20) != -1) {
        uint64_t result = cv3d::cv::gess::internal::EdgeErrorHeap::Update((cv3d::cv::gess::internal::EdgeErrorHeap *)result, v12);
      }
      double v13 = (unsigned int *)*((void *)v7 + 1);
      if (v13)
      {
        do
        {
          double v14 = v13;
          double v13 = *(unsigned int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          double v14 = (unsigned int *)*((void *)v7 + 2);
          BOOL v11 = *(void *)v14 == (void)v7;
          double v7 = v14;
        }
        while (!v11);
      }
      double v7 = v14;
    }
    while (v14 != v8);
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Update(cv3d::cv::gess::internal::EdgeErrorHeap *this, const unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *((void *)this + 3);
  if (v2 >= (*((void *)this + 4) - v3) >> 5) {
    cv3d::cv::gess::internal::EdgeErrorHeap::Update();
  }
  if (*(_DWORD *)(v3 + 32 * v2 + 20) == -1) {
    cv3d::cv::gess::internal::EdgeErrorHeap::Update();
  }
  float v4 = *(float *)(**((void **)this + 2) + 4 * v2);
  uint64_t v5 = *(void *)this;
  if (v4 <= *(float *)(v3 + 32 * v2))
  {
    return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(v5, v2, v4);
  }
  else
  {
    return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::update_fibnode(v5, v2, v4);
  }
}

uint64_t cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles(cv3d::cv::gess::internal::Collapser *this)
{
  uint64_t v2 = 0;
  v26[1] = *MEMORY[0x263EF8340];
  BOOL v24 = (char *)this + 104;
  v26[0] = 0x100000000;
  uint64_t v3 = (unsigned int *)((char *)this + 16);
  float v4 = (double *)((char *)this + 24);
  while (2)
  {
    uint64_t v25 = v2;
    uint64_t v5 = &v24[24 * *((unsigned __int8 *)v26 + 4 * v2)];
    double v6 = *(unsigned int **)v5;
    double v7 = (unsigned int *)*((void *)v5 + 1);
    while (v6 != v7)
    {
      uint64_t v8 = cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, v6);
      if (*(_DWORD *)(v8 + 12) != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, v3) + 12))
      {
        uint64_t v9 = cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, v6);
        uint64_t v10 = *(void *)this + 104;
        BOOL v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v10, v3);
        if (*(_DWORD *)(v9 + 12) != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v10, v11) + 12)) {
          cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles();
        }
      }
      uint64_t v12 = *(void *)this + 104;
      double v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, v6);
      uint64_t v14 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12);
      uint64_t v15 = *(void *)this + 104;
      uint64_t v16 = cv3d::cv::gess::mesh::Topology::h(v15, v6);
      double v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v15, (unsigned int *)(v16 + 8));
      uint64_t v18 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v15, v17) + 12);
      v14 *= 3;
      uint64_t v19 = 3 * v18;
      LODWORD(v15) = cv3d::cv::gess::internal::IsElongated(v4, (double *)(**((void **)this + 7) + 8 * v14), (double *)(**((void **)this + 7) + 24 * v18));
      double v20 = (void *)*((void *)this + 7);
      uint64_t v21 = cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, v6);
      BOOL IsElongated = cv3d::cv::gess::internal::IsElongated((double *)(*v20 + 24 * *(unsigned int *)(v21 + 12)), (double *)(**((void **)this + 7) + 8 * v14), (double *)(**((void **)this + 7) + 8 * v19));
      if (v15 && !IsElongated) {
        return 0;
      }
      ++v6;
    }
    uint64_t v2 = v25 + 1;
    if (v25 != 1) {
      continue;
    }
    break;
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::Collapser::Collapse(void **a1, unsigned int *a2)
{
  v136[1] = *MEMORY[0x263EF8340];
  *((_DWORD *)a1 + 4) = *a2;
  unsigned int v126 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), a2) + 12);
  uint64_t v4 = (uint64_t)(*a1 + 13);
  uint64_t v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, a2);
  uint64_t v6 = cv3d::cv::gess::mesh::Topology::h(v4, v5);
  unint64_t v7 = *(unsigned int *)(v6 + 12);
  int v125 = *(_DWORD *)(v6 + 12);
  uint64_t v8 = *a1[8];
  if (((*(void *)(v8 + (((unint64_t)v126 >> 3) & 0x1FFFFFF8)) >> v126) & 1) != 0
    && ((*(void *)(v8 + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
  {
    return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
  }
  cv3d::cv::gess::internal::Collapser::EdgePlanCollapse((uint64_t)a1, a2, (uint64_t)(a1 + 3));
  cv3d::cv::gess::internal::Collapser::Collect((cv3d::cv::gess::internal::Collapser *)a1);
  uint64_t v10 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
  BOOL v11 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
  if ((v12 & *v11) == 0)
  {
    double v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v10 + 104, a2);
    uint64_t v14 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v10, *((_DWORD *)v10 + 45), *v13);
    if ((v15 & *v14) == 0)
    {
      BOOL is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)*a1, (uint64_t)&v126);
      BOOL v17 = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)*a1, (uint64_t)&v125);
      if (is_boundary)
      {
        unsigned int v124 = *a2;
        unsigned int v123 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124);
        if (v17)
        {
          uint64_t v18 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
          uint64_t v19 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
          if ((v20 & *v19) != 0)
          {
            BOOL v21 = 1;
          }
          else
          {
            uint64_t v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v18 + 104, a2);
            BOOL v24 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v18, *((_DWORD *)v18 + 45), *v23);
            BOOL v21 = (v25 & *v24) != 0;
          }
          int v22 = !v21;
        }
        else
        {
          int v22 = 0;
        }
      }
      else
      {
        unsigned int v124 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), a2);
        int v22 = 0;
        unsigned int v123 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124);
      }
      uint64_t v26 = (uint64_t)(*a1 + 13);
      double v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, &v124);
      HIDWORD(v122) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12);
      LODWORD(v122) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124) + 12);
      cv3d::cv::gess::internal::Collapser::FindCoincideEdges(a1, v122, SHIDWORD(v122));
      if (a1[23] != a1[24]) {
        return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
      }
      if (v22)
      {
        uint64_t v29 = 0;
        LOWORD(v121) = 0;
        unint64_t v127 = __PAIR64__(v123, v124);
        v136[0] = 0x100000000;
        do
        {
          uint64_t v30 = *((unsigned __int8 *)v136 + v29);
          double v31 = (unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v127 + v30) + 8);
          uint64_t v32 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v127 + v30);
          uint64_t v33 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
          uint64_t v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), v31);
          unsigned int v35 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v33, *((_DWORD *)v33 + 45), *v34);
          if ((v36 & *v35) != 0)
          {
            float64_t v37 = (unsigned int *)(v32 + 4);
            float64x2_t v38 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
            float64x2_t v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), v37);
            float v40 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v38, *((_DWORD *)v38 + 45), *v39);
            BOOL v42 = (v41 & *v40) != 0;
          }
          else
          {
            BOOL v42 = 0;
          }
          *((unsigned char *)&v121 + v30) = v42;
          v29 += 4;
        }
        while (v29 != 8);
        if ((_BYTE)v121)
        {
          BOOL v43 = v121 == BYTE1(v121);
        }
        else
        {
          if (!BYTE1(v121)) {
            return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
          }
          BOOL v43 = 0;
        }
        BOOL v44 = !v43;
      }
      else
      {
        BOOL v43 = 0;
        BOOL v44 = 0;
      }
      if ((is_boundary || v17 || (char *)a1[14] - (char *)a1[13] != 4 || (char *)a1[17] - (char *)a1[16] != 4)
        && (cv3d::cv::gess::internal::Collapser::CheckGeom((cv3d::cv::gess::internal::Collapser *)a1) & 1) != 0)
      {
        unsigned int v121 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124) + 16);
        unsigned int v120 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123) + 16);
        unsigned int v119 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124) + 8);
        unsigned int v118 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v119) + 8);
        unsigned int v117 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123) + 8);
        unsigned int v116 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v117) + 8);
        uint64_t v45 = (uint64_t)(*a1 + 13);
        uint64_t v46 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v45, &v119);
        unsigned int v115 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v45, v46) + 12);
        uint64_t v47 = (uint64_t)(*a1 + 13);
        unsigned int v48 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v47, &v117);
        unsigned int v49 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v47, v48) + 12);
        unsigned int v114 = v49;
        unsigned int v50 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v118);
        unsigned int v113 = v50;
        unsigned int v51 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v117);
        unsigned int v112 = v51;
        unsigned int v52 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v119);
        unsigned int v111 = v52;
        unsigned int v53 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v116);
        unsigned int v110 = v53;
        if (v43)
        {
          uint64_t v54 = 0;
          unint64_t v127 = __PAIR64__(v119, v124);
          unsigned int v128 = v118;
          unsigned int v129 = v123;
          unsigned int v130 = v117;
          unsigned int v131 = v116;
          unsigned int v132 = v50;
          unsigned int v133 = v52;
          unsigned int v134 = v51;
          unsigned int v135 = v53;
          do
          {
            float v55 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
            uint64_t v56 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)&v127 + v54));
            if (*(_DWORD *)(*((void *)v55 + 3) + 32 * *v56 + 20) != -1) {
              cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v55, v56);
            }
            uint64_t v57 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)((char *)&v127 + v54));
            *(void *)uint64_t v57 = -1;
            *(void *)(v57 + 8) = -1;
            *(_DWORD *)(v57 + 16) = -1;
            v54 += 4;
          }
          while (v54 != 40);
          uint64_t v58 = 0;
          unint64_t v127 = v122;
          unsigned int v128 = v115;
          unsigned int v129 = v49;
          do
          {
            *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)((char *)&v127 + v58)) = -1;
            v58 += 4;
          }
          while (v58 != 16);
          uint64_t v59 = 0;
          unint64_t v127 = __PAIR64__(v120, v121);
          do
          {
            *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), (unsigned int *)((char *)&v127 + v59)) = -1;
            v59 += 4;
          }
          while (v59 != 8);
LABEL_79:
          uint64_t v28 = (*((_DWORD *)a1 + 38) + 2);
          *((_DWORD *)a1 + 38) = v28;
          cv3d::cv::gess::internal::Collapser::Reset((cv3d::cv::gess::internal::Collapser *)a1);
          return v28;
        }
        if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)*a1, (uint64_t)&v122 + 4)
          && a1[3 * is_boundary + 13] == a1[3 * is_boundary + 14])
        {
          uint64_t v76 = (uint64_t)(*a1 + 13);
          unsigned int v77 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v76, &v117);
          if (v115 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v76, v77) + 12)) {
            cv3d::cv::gess::internal::Collapser::Collapse();
          }
          if (v50 != v117) {
            cv3d::cv::gess::internal::Collapser::Collapse();
          }
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v121) = -1;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v120) = -1;
          uint64_t v78 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124);
          *(void *)uint64_t v78 = -1;
          *(void *)(v78 + 8) = -1;
          *(_DWORD *)(v78 + 16) = -1;
          uint64_t v79 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v119);
          *(void *)uint64_t v79 = -1;
          *(void *)(v79 + 8) = -1;
          *(_DWORD *)(v79 + 16) = -1;
          uint64_t v80 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v118);
          *(void *)uint64_t v80 = -1;
          *(void *)(v80 + 8) = -1;
          *(_DWORD *)(v80 + 16) = -1;
          uint64_t v81 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123);
          *(void *)uint64_t v81 = -1;
          *(void *)(v81 + 8) = -1;
          *(_DWORD *)(v81 + 16) = -1;
          uint64_t v82 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v117);
          *(void *)uint64_t v82 = -1;
          *(void *)(v82 + 8) = -1;
          *(_DWORD *)(v82 + 16) = -1;
          uint64_t v83 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v116);
          *(void *)uint64_t v83 = -1;
          *(void *)(v83 + 8) = -1;
          *(_DWORD *)(v83 + 16) = -1;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)&v122) = -1;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)&v122 + 1) = -1;
          uint64_t v84 = 0;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, &v115) = -1;
          unint64_t v127 = __PAIR64__(v119, v124);
          unsigned int v128 = v118;
          unsigned int v129 = v123;
          unsigned int v130 = v117;
          unsigned int v131 = v116;
          do
          {
            uint64_t v85 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
            uint64_t v86 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)&v127 + v84));
            if (*(_DWORD *)(*((void *)v85 + 3) + 32 * *v86 + 20) != -1) {
              cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v85, v86);
            }
            v84 += 4;
          }
          while (v84 != 24);
          goto LABEL_79;
        }
        if (cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles((cv3d::cv::gess::internal::Collapser *)a1))
        {
          unsigned int v60 = v122;
          float64x2_t v61 = (void *)(*a1[7] + 24 * v122);
          void *v61 = a1[3];
          v61[1] = a1[4];
          void v61[2] = a1[5];
          float64x2_t v62 = (_OWORD *)(*a1[9] + 80 * *(unsigned int *)(*a1[11] + 4 * *((unsigned int *)a1 + 4)));
          float64x2_t v63 = (_OWORD *)(*a1[6] + 80 * v60);
          _OWORD *v63 = *v62;
          long long v64 = v62[1];
          long long v65 = v62[2];
          long long v66 = v62[4];
          float v63[3] = v62[3];
          v63[4] = v66;
          v63[1] = v64;
          v63[2] = v65;
          cv3d::cv::gess::mesh::PolyMesh::BlendVertexAttributes(*a1, (unsigned int *)&v122, (unsigned int *)&v122 + 1);
          cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)(*a1 + 13), &v113, &v111);
          cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)(*a1 + 13), &v112, &v110);
          uint64_t v67 = &a1[3 * is_boundary];
          float32x4_t v68 = (unsigned int *)v67[13];
          int v69 = (unsigned int *)v67[14];
          while (v68 != v69)
            cv3d::cv::gess::mesh::Topology::SetStart(*a1 + 13, v68++, &v122);
          cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v115, &v111);
          cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v114, &v112);
          cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v122, &v113);
          cv3d::cv::gess::internal::Collapser::CollectAndUpdateDirtyHEdges((uint64_t)a1, (uint64_t)&v122);
          if (v44)
          {
            float32x4_t v70 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), v113);
            if ((v71 & *v70) != 0
              && (float32x4_t v72 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), v111), (v73 & *v72) != 0))
            {
              float64x2_t v74 = &v111;
              int v75 = &v113;
            }
            else
            {
              float64x2_t v74 = &v112;
              int v75 = &v110;
            }
            unsigned int v87 = *v74;
            LODWORD(v127) = *v75;
            HIDWORD(v127) = v87;
            unsigned int v109 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v127 + 1) + 12);
            unsigned int v108 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v127) + 4);
            unsigned int v107 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v127 + 1) + 8);
            cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)(*a1 + 13), &v108, &v107);
            cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v122, &v107);
            uint64_t v88 = 0;
            v136[0] = v127;
            do
            {
              uint64_t v89 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
              float32x4_t v90 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)v136 + v88));
              if (*(_DWORD *)(*((void *)v89 + 3) + 32 * *v90 + 20) != -1) {
                cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v89, v90);
              }
              uint64_t v91 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)((char *)v136 + v88));
              *(void *)uint64_t v91 = -1;
              *(void *)(v91 + 8) = -1;
              *(_DWORD *)(v91 + 16) = -1;
              v88 += 4;
            }
            while (v88 != 8);
            *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, &v109) = -1;
          }
          uint64_t v92 = 0;
          unint64_t v127 = __PAIR64__(v119, v124);
          unsigned int v128 = v116;
          do
          {
            float v93 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
            long long v94 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)&v127 + v92));
            if (*(_DWORD *)(*((void *)v93 + 3) + 32 * *v94 + 20) != -1) {
              cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v93, v94);
            }
            v92 += 4;
          }
          while (v92 != 12);
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v121) = -1;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v120) = -1;
          uint64_t v95 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124);
          *(void *)uint64_t v95 = -1;
          *(void *)(v95 + 8) = -1;
          *(_DWORD *)(v95 + 16) = -1;
          uint64_t v96 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v119);
          *(void *)uint64_t v96 = -1;
          *(void *)(v96 + 8) = -1;
          *(_DWORD *)(v96 + 16) = -1;
          uint64_t v97 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v118);
          *(void *)uint64_t v97 = -1;
          *(void *)(v97 + 8) = -1;
          *(_DWORD *)(v97 + 16) = -1;
          uint64_t v98 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123);
          *(void *)uint64_t v98 = -1;
          *(void *)(v98 + 8) = -1;
          *(_DWORD *)(v98 + 16) = -1;
          uint64_t v99 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v117);
          *(void *)uint64_t v99 = -1;
          *(void *)(v99 + 8) = -1;
          *(_DWORD *)(v99 + 16) = -1;
          uint64_t v100 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v116);
          *(void *)uint64_t v100 = -1;
          *(void *)(v100 + 8) = -1;
          *(_DWORD *)(v100 + 16) = -1;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)&v122 + 1) = -1;
          uint64_t v101 = *a1[11];
          *(_DWORD *)(v101 + 4 * v111) = *(_DWORD *)(v101 + 4 * v113);
          *(_DWORD *)(v101 + 4 * v110) = *(_DWORD *)(v101 + 4 * v112);
          uint64_t v102 = *a1[12];
          *(_DWORD *)(v102 + 4 * *(unsigned int *)(v101 + 4 * v113)) = v113;
          *(_DWORD *)(v102 + 4 * *(unsigned int *)(v101 + 4 * v112)) = v112;
          long long v103 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
          uint64_t v104 = (unsigned int *)(v101 + 4 * v113);
          uint64_t v105 = *((void *)v103 + 3);
          if (*(_DWORD *)(v105 + 32 * *v104 + 20) == -1)
          {
            cv3d::cv::gess::internal::EdgeErrorHeap::Insert(v103, v104);
            long long v103 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
            uint64_t v101 = *a1[11];
            uint64_t v105 = *((void *)v103 + 3);
          }
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v106 = (unsigned int *)(v101 + 4 * v112);
          if (*(_DWORD *)(v105 + 32 * *v106 + 20) == -1) {
            cv3d::cv::gess::internal::EdgeErrorHeap::Insert(v103, v106);
          }
          goto LABEL_79;
        }
      }
      return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
    }
  }

  return cv3d::cv::gess::internal::Collapser::CollapseBoundary((cv3d::cv::gess::internal::EdgeErrorHeap **)a1, a2);
}

uint64_t cv3d::cv::gess::internal::Collapser::Reject(cv3d::cv::gess::internal::EdgeErrorHeap **this)
{
  if (*((_DWORD *)this + 38)) {
    cv3d::cv::gess::internal::Collapser::Reject();
  }
  cv3d::cv::gess::internal::Collapser::Reset((cv3d::cv::gess::internal::Collapser *)this);
  return *((unsigned int *)this + 38);
}

uint64_t cv3d::cv::gess::internal::Collapser::CollapseBoundary(cv3d::cv::gess::internal::EdgeErrorHeap **a1, unsigned int *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
  uint64_t v5 = a2;
  if ((v6 & v4) != 0) {
    uint64_t v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, a2);
  }
  unsigned int v64 = *v5;
  unint64_t v7 = (uint64_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
  uint64_t v9 = v8;
  uint64_t v10 = *v7;
  unsigned int v63 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64);
  unsigned int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63) + 4);
  unsigned int v62 = v11;
  unsigned int v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63) + 8);
  unsigned int v61 = v12;
  unsigned int v60 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64) + 8);
  unsigned int v59 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64) + 4);
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v60) + 8) != v59) {
    cv3d::cv::gess::internal::Collapser::CollapseBoundary();
  }
  uint64_t v52 = v9;
  unsigned int v13 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v59);
  unsigned int v58 = v13;
  unsigned int v14 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v60);
  unsigned int v57 = v14;
  unsigned int v56 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64) + 16);
  int v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64) + 12);
  unsigned int v55 = v15;
  uint64_t v16 = (uint64_t)*a1 + 104;
  BOOL v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, &v64);
  int v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v16, v17) + 12);
  int v54 = v18;
  unsigned int v53 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v59) + 12);
  uint64_t v19 = (uint64_t)*a1 + 104;
  uint64_t v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, &v60);
  if (v53 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v19, v20) + 12)) {
    cv3d::cv::gess::internal::Collapser::CollapseBoundary();
  }
  if (v11 == v14 && v12 == v13)
  {
    uint64_t v21 = 0;
    unsigned int v65 = v64;
    unsigned int v66 = v60;
    unsigned int v67 = v59;
    unsigned int v68 = v11;
    unsigned int v69 = v63;
    unsigned int v70 = v12;
    do
    {
      int v22 = a1[1];
      uint64_t v23 = (const unsigned int *)(*(void *)a1[11] + 4 * *(unsigned int *)((char *)&v65 + v21));
      if (*(_DWORD *)(*((void *)v22 + 3) + 32 * *v23 + 20) != -1) {
        cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v22, v23);
      }
      v21 += 4;
    }
    while (v21 != 24);
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)*a1 + 104, &v56) = -1;
    uint64_t v24 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64);
    *(void *)uint64_t v24 = -1;
    *(void *)(v24 + 8) = -1;
    *(_DWORD *)(v24 + 16) = -1;
    uint64_t v25 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v60);
    *(void *)uint64_t v25 = -1;
    *(void *)(v25 + 8) = -1;
    *(_DWORD *)(v25 + 16) = -1;
    uint64_t v26 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v59);
    *(void *)uint64_t v26 = -1;
    *(void *)(v26 + 8) = -1;
    *(_DWORD *)(v26 + 16) = -1;
    uint64_t v27 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v62);
    *(void *)uint64_t v27 = -1;
    *(void *)(v27 + 8) = -1;
    *(_DWORD *)(v27 + 16) = -1;
    uint64_t v28 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63);
    *(void *)uint64_t v28 = -1;
    *(void *)(v28 + 8) = -1;
    *(_DWORD *)(v28 + 16) = -1;
    uint64_t v29 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v61);
    *(void *)uint64_t v29 = -1;
    *(void *)(v29 + 8) = -1;
    *(_DWORD *)(v29 + 16) = -1;
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((void *)*a1 + 13, &v53) = -1;
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((void *)*a1 + 13, &v55) = -1;
  }
  else
  {
    cv3d::cv::gess::internal::Collapser::FindCoincideEdges(a1, v15, v18);
    if (a1[23] != a1[24]
      || (cv3d::cv::gess::internal::Collapser::CheckGeom((cv3d::cv::gess::internal::Collapser *)a1) & 1) == 0
      || (cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles((cv3d::cv::gess::internal::Collapser *)a1) & 1) == 0)
    {
      return cv3d::cv::gess::internal::Collapser::Reject(a1);
    }
    unsigned int v31 = v55;
    uint64_t v32 = (void *)(*(void *)a1[7] + 24 * v55);
    *uint64_t v32 = a1[3];
    v32[1] = a1[4];
    v32[2] = a1[5];
    uint64_t v33 = (_OWORD *)(*(void *)a1[9] + 80 * *(unsigned int *)(*(void *)a1[11] + 4 * *((unsigned int *)a1 + 4)));
    uint64_t v34 = (_OWORD *)(*(void *)a1[6] + 80 * v31);
    _OWORD *v34 = *v33;
    long long v35 = v33[1];
    long long v36 = v33[2];
    long long v37 = v33[4];
    v34[3] = v33[3];
    v34[4] = v37;
    v34[1] = v35;
    v34[2] = v36;
    cv3d::cv::gess::mesh::PolyMesh::BlendVertexAttributes(*a1, &v55, (unsigned int *)&v54);
    cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)*a1 + 104, &v62, &v61);
    cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)*a1 + 104, &v58, &v57);
    float64x2_t v38 = &a1[3 * ((v52 & v10) == 0)];
    float64x2_t v39 = (unsigned int *)v38[13];
    float v40 = (unsigned int *)v38[14];
    while (v39 != v40)
      cv3d::cv::gess::mesh::Topology::SetStart((void *)*a1 + 13, v39++, &v55);
    cv3d::cv::gess::mesh::Topology::SetHEdge((void *)*a1 + 13, &v53, &v57);
    cv3d::cv::gess::mesh::Topology::SetHEdge((void *)*a1 + 13, &v55, &v58);
    uint64_t v42 = 0;
    unsigned int v65 = v64;
    unsigned int v66 = v60;
    do
    {
      BOOL v43 = a1[1];
      BOOL v44 = (const unsigned int *)(*(void *)a1[11] + 4 * *(unsigned int *)((char *)&v65 + v42));
      if (*(_DWORD *)(*((void *)v43 + 3) + 32 * *v44 + 20) != -1) {
        cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v43, v44);
      }
      v42 += 4;
    }
    while (v42 != 8);
    uint64_t v45 = *(void *)a1[11];
    *(_DWORD *)(v45 + 4 * v57) = *(_DWORD *)(v45 + 4 * v58);
    *(_DWORD *)(*(void *)a1[12] + 4 * *(unsigned int *)(v45 + 4 * v58)) = v58;
    uint64_t v46 = a1[1];
    uint64_t v47 = (unsigned int *)(v45 + 4 * v58);
    if (*(_DWORD *)(*((void *)v46 + 3) + 32 * *v47 + 20) == -1) {
      cv3d::cv::gess::internal::EdgeErrorHeap::Insert(v46, v47);
    }
    cv3d::cv::gess::internal::Collapser::CollectAndUpdateDirtyHEdges((uint64_t)a1, (uint64_t)&v55);
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)*a1 + 104, &v56) = -1;
    uint64_t v48 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64);
    *(void *)uint64_t v48 = -1;
    *(void *)(v48 + 8) = -1;
    *(_DWORD *)(v48 + 16) = -1;
    uint64_t v49 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v60);
    *(void *)uint64_t v49 = -1;
    *(void *)(v49 + 8) = -1;
    *(_DWORD *)(v49 + 16) = -1;
    uint64_t v50 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v59);
    *(void *)uint64_t v50 = -1;
    *(void *)(v50 + 8) = -1;
    *(_DWORD *)(v50 + 16) = -1;
    uint64_t v51 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63);
    *(void *)uint64_t v51 = -1;
    *(void *)(v51 + 8) = -1;
    *(_DWORD *)(v51 + 16) = -1;
  }
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((void *)*a1 + 13, (unsigned int *)&v54) = -1;
  uint64_t v30 = (*((_DWORD *)a1 + 38) + 1);
  *((_DWORD *)a1 + 38) = v30;
  cv3d::cv::gess::internal::Collapser::Reset((cv3d::cv::gess::internal::Collapser *)a1);
  return v30;
}

uint64_t cv3d::cv::gess::internal::Collapser::CheckGeom(cv3d::cv::gess::internal::Collapser *this)
{
  uint64_t v2 = 0;
  v17[1] = *MEMORY[0x263EF8340];
  v17[0] = 0x100000000;
  uint64_t v3 = (char *)this + 104;
  uint64_t v4 = (double *)((char *)this + 24);
  while (2)
  {
    uint64_t v5 = &v3[24 * *((int *)v17 + v2)];
    uint64_t v6 = *(unsigned int **)v5;
    unint64_t v7 = (unsigned int *)*((void *)v5 + 1);
    while (v6 != v7)
    {
      unsigned int v8 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)this + 104, v6) + 12);
      uint64_t v9 = *(void *)this + 104;
      uint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, v6);
      unsigned int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v9, v10) + 12);
      uint64_t v12 = *(void *)this + 104;
      uint64_t v13 = cv3d::cv::gess::mesh::Topology::h(v12, v6);
      unsigned int v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, (unsigned int *)(v13 + 8));
      uint64_t v15 = cv3d::cv::gess::mesh::Topology::h(v12, v14);
      if (cv3d::cv::gess::internal::IsFaceFlipped((double *)(**((void **)this + 7) + 24 * v8), (double *)(**((void **)this + 7) + 24 * v11), (double *)(**((void **)this + 7) + 24 * *(unsigned int *)(v15 + 12)), v4))
      {
        return 0;
      }
      ++v6;
    }
    if (++v2 != 2) {
      continue;
    }
    break;
  }
  return 1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,false>(uint64_t result, unsigned int *a2, void **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (unsigned int *)result;
  while (2)
  {
    unsigned int v11 = a2 - 1;
    float32x4_t v210 = a2 - 2;
    uint64_t v214 = a2;
    float32x4_t v209 = a2 - 3;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = v214;
          uint64_t v13 = (char *)v214 - (char *)v10;
          unint64_t v14 = v214 - v10;
          if (v6 || !v5)
          {
            switch(v214 - v10)
            {
              case 0:
              case 1:
                return result;
              case 2:
                long long v103 = *a3;
                uint64_t v104 = **a3 + 104;
                uint64_t v105 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v104, v11);
                unsigned int v106 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v104, v105) + 12);
                uint64_t v107 = *v103 + 104;
                unsigned int v108 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v107, v10);
                uint64_t result = cv3d::cv::gess::mesh::Topology::h(v107, v108);
                if (v106 < *(_DWORD *)(result + 12))
                {
                  unsigned int v109 = *v10;
                  *uint64_t v10 = *v11;
                  *unsigned int v11 = v109;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v10, v10 + 1, v11, a3);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v10, v10 + 1, v10 + 2, v11, a3);
                break;
              case 5:
                uint64_t result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,0>(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          v216 = v10;
          if (v13 <= 95)
          {
            unsigned int v110 = v10 + 1;
            BOOL v112 = v10 == v214 || v110 == v214;
            if (a5)
            {
              if (!v112)
              {
                uint64_t v113 = 0;
                unsigned int v114 = v10;
                do
                {
                  unsigned int v115 = v114;
                  unsigned int v114 = v110;
                  unsigned int v116 = *a3;
                  uint64_t v117 = **a3 + 104;
                  unsigned int v118 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v117, v110);
                  unsigned int v119 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v117, v118) + 12);
                  uint64_t v120 = *v116 + 104;
                  unsigned int v121 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v120, v115);
                  uint64_t result = cv3d::cv::gess::mesh::Topology::h(v120, v121);
                  if (v119 < *(_DWORD *)(result + 12))
                  {
                    unsigned int v220 = *v114;
                    uint64_t v122 = v113;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v122 + 4) = *(unsigned int *)((char *)v10 + v122);
                      if (!v122) {
                        break;
                      }
                      v122 -= 4;
                      unsigned int v123 = (unsigned int *)((char *)v10 + v122);
                      unsigned int v124 = *a3;
                      uint64_t v125 = **a3 + 104;
                      unsigned int v126 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v125, &v220);
                      unsigned int v127 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v125, v126) + 12);
                      uint64_t v128 = *v124 + 104;
                      unsigned int v129 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v128, v123);
                      uint64_t result = cv3d::cv::gess::mesh::Topology::h(v128, v129);
                      BOOL v5 = v127 >= *(_DWORD *)(result + 12);
                      uint64_t v10 = v216;
                      if (v5)
                      {
                        unsigned int v130 = (unsigned int *)((char *)v216 + v122 + 4);
                        goto LABEL_75;
                      }
                    }
                    unsigned int v130 = v10;
LABEL_75:
                    unsigned int *v130 = v220;
                  }
                  unsigned int v110 = v114 + 1;
                  v113 += 4;
                }
                while (v114 + 1 != v214);
              }
            }
            else if (!v112)
            {
              v193 = v10 - 1;
              do
              {
                uint64_t v194 = v10;
                uint64_t v10 = v110;
                float32x4_t v195 = *a3;
                uint64_t v196 = **a3 + 104;
                float32x4_t v197 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v196, v110);
                unsigned int v198 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v196, v197) + 12);
                uint64_t v199 = *v195 + 104;
                float32x4_t v200 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v199, v194);
                uint64_t result = cv3d::cv::gess::mesh::Topology::h(v199, v200);
                if (v198 < *(_DWORD *)(result + 12))
                {
                  unsigned int v220 = *v10;
                  unsigned int v201 = v193;
                  do
                  {
                    v201[2] = v201[1];
                    unsigned int v202 = *a3;
                    uint64_t v203 = **a3 + 104;
                    unint64_t v204 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v203, &v220);
                    unsigned int v205 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v203, v204) + 12);
                    uint64_t v206 = *v202 + 104;
                    uint64_t v207 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v206, v201);
                    uint64_t result = cv3d::cv::gess::mesh::Topology::h(v206, v207);
                    --v201;
                  }
                  while (v205 < *(_DWORD *)(result + 12));
                  v201[2] = v220;
                }
                unsigned int v110 = v10 + 1;
                ++v193;
              }
              while (v10 + 1 != v214);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != v214)
            {
              int64_t v131 = (v14 - 2) >> 1;
              int64_t v218 = v131;
              uint64_t v208 = (char *)v214 - (char *)v10;
              do
              {
                int64_t v132 = v131;
                if (v218 >= v131)
                {
                  uint64_t v133 = (2 * v131) | 1;
                  unsigned int v134 = &v10[v133];
                  if (2 * v131 + 2 < (uint64_t)v14)
                  {
                    unsigned int v135 = *a3;
                    uint64_t v136 = **a3 + 104;
                    float32x4_t v137 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v136, &v10[v133]);
                    unsigned int v211 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v136, v137) + 12);
                    uint64_t v138 = *v135 + 104;
                    float32x4_t v139 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v138, v134 + 1);
                    if (v211 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v138, v139) + 12))
                    {
                      ++v134;
                      uint64_t v133 = 2 * v132 + 2;
                    }
                  }
                  float32x4_t v140 = &v10[v132];
                  uint64_t v141 = *a3;
                  uint64_t v142 = **a3 + 104;
                  int64_t v143 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v142, v134);
                  unsigned int v144 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v142, v143) + 12);
                  uint64_t v145 = *v141 + 104;
                  unsigned int v146 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v145, v140);
                  uint64_t result = cv3d::cv::gess::mesh::Topology::h(v145, v146);
                  uint64_t v13 = v208;
                  if (v144 >= *(_DWORD *)(result + 12))
                  {
                    int64_t v212 = v132;
                    unsigned int v220 = *v140;
                    do
                    {
                      v147 = v134;
                      *float32x4_t v140 = *v134;
                      if (v218 < v133) {
                        break;
                      }
                      uint64_t v148 = (2 * v133) | 1;
                      unsigned int v134 = &v10[v148];
                      uint64_t v149 = 2 * v133 + 2;
                      if (v149 < (uint64_t)v14)
                      {
                        float32x4_t v150 = *a3;
                        uint64_t v151 = **a3 + 104;
                        float32x4_t v152 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v151, &v10[v148]);
                        unsigned int v153 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v151, v152) + 12);
                        uint64_t v154 = *v150 + 104;
                        float32x4_t v155 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v154, v134 + 1);
                        BOOL v5 = v153 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v154, v155) + 12);
                        uint64_t v10 = v216;
                        if (!v5)
                        {
                          ++v134;
                          uint64_t v148 = v149;
                        }
                      }
                      float32x4_t v156 = *a3;
                      uint64_t v157 = **a3 + 104;
                      unsigned int v158 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v157, v134);
                      unsigned int v159 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v157, v158) + 12);
                      uint64_t v160 = *v156 + 104;
                      float32x4_t v161 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v160, &v220);
                      uint64_t result = cv3d::cv::gess::mesh::Topology::h(v160, v161);
                      float32x4_t v140 = v147;
                      uint64_t v133 = v148;
                    }
                    while (v159 >= *(_DWORD *)(result + 12));
                    unsigned int *v147 = v220;
                    uint64_t v13 = v208;
                    int64_t v132 = v212;
                  }
                }
                int64_t v131 = v132 - 1;
              }
              while (v132);
              uint64_t v162 = (unint64_t)v13 >> 2;
              float32x4_t v163 = v214;
              do
              {
                uint64_t v215 = v163;
                uint64_t v164 = 0;
                unsigned int v213 = *v10;
                int64_t v165 = (unint64_t)(v162 - 2) >> 1;
                uint64_t v219 = v162;
                do
                {
                  unsigned int v166 = &v10[v164 + 1];
                  uint64_t v167 = (2 * v164) | 1;
                  uint64_t v168 = 2 * v164 + 2;
                  if (v168 < v162)
                  {
                    float32x4_t v169 = *a3;
                    uint64_t v170 = **a3 + 104;
                    uint64_t v171 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v170, v166);
                    unsigned int v172 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v170, v171) + 12);
                    uint64_t v173 = *v169 + 104;
                    float32x4_t v174 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v173, v166 + 1);
                    uint64_t result = cv3d::cv::gess::mesh::Topology::h(v173, v174);
                    uint64_t v162 = v219;
                    if (v172 < *(_DWORD *)(result + 12))
                    {
                      ++v166;
                      uint64_t v167 = v168;
                    }
                  }
                  *uint64_t v10 = *v166;
                  uint64_t v10 = v166;
                  uint64_t v164 = v167;
                }
                while (v167 <= v165);
                float32x4_t v163 = v215 - 1;
                if (v166 == v215 - 1)
                {
                  *unsigned int v166 = v213;
                  uint64_t v10 = v216;
                }
                else
                {
                  *unsigned int v166 = *v163;
                  *float32x4_t v163 = v213;
                  uint64_t v10 = v216;
                  uint64_t v175 = (char *)v166 - (char *)v216 + 4;
                  if (v175 >= 5)
                  {
                    unint64_t v176 = (((unint64_t)v175 >> 2) - 2) >> 1;
                    float32x4_t v177 = &v216[v176];
                    float32x4_t v178 = *a3;
                    uint64_t v179 = **a3 + 104;
                    uint64_t v180 = v162;
                    float32x4_t v181 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v179, v177);
                    unsigned int v182 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v179, v181) + 12);
                    uint64_t v183 = *v178 + 104;
                    float32x4_t v184 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v183, v166);
                    uint64_t result = cv3d::cv::gess::mesh::Topology::h(v183, v184);
                    uint64_t v162 = v180;
                    if (v182 < *(_DWORD *)(result + 12))
                    {
                      unsigned int v220 = *v166;
                      do
                      {
                        float32x4_t v185 = v177;
                        *unsigned int v166 = *v177;
                        if (!v176) {
                          break;
                        }
                        unint64_t v176 = (v176 - 1) >> 1;
                        float32x4_t v177 = &v216[v176];
                        uint64_t v186 = *a3;
                        uint64_t v187 = **a3 + 104;
                        uint64_t v188 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v187, v177);
                        unsigned int v189 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v187, v188) + 12);
                        uint64_t v190 = *v186 + 104;
                        uint64_t v191 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v190, &v220);
                        uint64_t result = cv3d::cv::gess::mesh::Topology::h(v190, v191);
                        unsigned int v166 = v185;
                      }
                      while (v189 < *(_DWORD *)(result + 12));
                      *float32x4_t v185 = v220;
                      uint64_t v162 = v180;
                    }
                  }
                }
              }
              while (v162-- > 2);
            }
            return result;
          }
          uint64_t v15 = &v10[v14 >> 1];
          if ((unint64_t)v13 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v10, &v10[v14 >> 1], v11, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v10 + 1, v15 - 1, v210, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v10 + 2, &v10[(v14 >> 1) + 1], v209, a3);
            uint64_t v12 = v214;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v15 - 1, v15, &v10[(v14 >> 1) + 1], a3);
            unsigned int v16 = *v10;
            *uint64_t v10 = *v15;
            *uint64_t v15 = v16;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(&v10[v14 >> 1], v10, v11, a3);
          }
          --a4;
          if (a5) {
            break;
          }
          BOOL v17 = *a3;
          uint64_t v18 = **a3 + 104;
          uint64_t v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v18, v10 - 1);
          unsigned int v20 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v18, v19) + 12);
          uint64_t v21 = *v17 + 104;
          int v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, v10);
          if (v20 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v21, v22) + 12)) {
            break;
          }
          unsigned int v220 = *v10;
          unsigned int v63 = *a3;
          uint64_t v64 = **a3 + 104;
          unsigned int v65 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v64, &v220);
          unsigned int v66 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v64, v65) + 12);
          uint64_t v67 = *v63 + 104;
          unsigned int v68 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v67, v11);
          uint64_t result = cv3d::cv::gess::mesh::Topology::h(v67, v68);
          if (v66 >= *(_DWORD *)(result + 12))
          {
            int v75 = v10 + 1;
            do
            {
              uint64_t v10 = v75;
              if (v75 >= v12) {
                break;
              }
              uint64_t v76 = *a3;
              uint64_t v77 = **a3 + 104;
              uint64_t v78 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v77, &v220);
              unsigned int v79 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v77, v78) + 12);
              uint64_t v80 = *v76 + 104;
              uint64_t v81 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v80, v10);
              uint64_t result = cv3d::cv::gess::mesh::Topology::h(v80, v81);
              int v75 = v10 + 1;
            }
            while (v79 >= *(_DWORD *)(result + 12));
          }
          else
          {
            do
            {
              ++v10;
              unsigned int v69 = *a3;
              uint64_t v70 = **a3 + 104;
              uint64_t v71 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v70, &v220);
              unsigned int v72 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v70, v71) + 12);
              uint64_t v73 = *v69 + 104;
              float64x2_t v74 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v73, v10);
              uint64_t result = cv3d::cv::gess::mesh::Topology::h(v73, v74);
            }
            while (v72 >= *(_DWORD *)(result + 12));
          }
          uint64_t v82 = v12;
          if (v10 < v12)
          {
            uint64_t v82 = v12;
            do
            {
              --v82;
              uint64_t v83 = *a3;
              uint64_t v84 = **a3 + 104;
              uint64_t v85 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v84, &v220);
              unsigned int v86 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v84, v85) + 12);
              uint64_t v87 = *v83 + 104;
              uint64_t v88 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v87, v82);
              uint64_t result = cv3d::cv::gess::mesh::Topology::h(v87, v88);
            }
            while (v86 < *(_DWORD *)(result + 12));
          }
          while (v10 < v82)
          {
            unsigned int v89 = *v10;
            *uint64_t v10 = *v82;
            *uint64_t v82 = v89;
            do
            {
              ++v10;
              float32x4_t v90 = *a3;
              uint64_t v91 = **a3 + 104;
              uint64_t v92 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v91, &v220);
              unsigned int v93 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v91, v92) + 12);
              uint64_t v94 = *v90 + 104;
              uint64_t v95 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v94, v10);
            }
            while (v93 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v94, v95) + 12));
            do
            {
              --v82;
              uint64_t v96 = *a3;
              uint64_t v97 = **a3 + 104;
              uint64_t v98 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v97, &v220);
              unsigned int v99 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v97, v98) + 12);
              uint64_t v100 = *v96 + 104;
              uint64_t v101 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v100, v82);
              uint64_t result = cv3d::cv::gess::mesh::Topology::h(v100, v101);
            }
            while (v99 < *(_DWORD *)(result + 12));
          }
          uint64_t v102 = v10 - 1;
          BOOL v5 = v10 - 1 >= v216;
          BOOL v6 = v10 - 1 == v216;
          if (v10 - 1 != v216) {
            unsigned int *v216 = *v102;
          }
          a5 = 0;
          *uint64_t v102 = v220;
        }
        uint64_t v23 = 0;
        unsigned int v220 = *v10;
        do
        {
          ++v23;
          uint64_t v24 = *a3;
          uint64_t v25 = **a3 + 104;
          uint64_t v26 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v25, &v10[v23]);
          unsigned int v27 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v25, v26) + 12);
          uint64_t v28 = *v24 + 104;
          uint64_t v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v28, &v220);
        }
        while (v27 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v28, v29) + 12));
        uint64_t v30 = &v10[v23];
        unsigned int v31 = v12;
        if (v23 == 1)
        {
          unsigned int v31 = v12;
          do
          {
            if (v30 >= v31) {
              break;
            }
            --v31;
            float64x2_t v38 = *a3;
            uint64_t v39 = **a3 + 104;
            float v40 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v39, v31);
            unsigned int v41 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v39, v40) + 12);
            uint64_t v42 = *v38 + 104;
            BOOL v43 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v42, &v220);
          }
          while (v41 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v42, v43) + 12));
        }
        else
        {
          do
          {
            --v31;
            uint64_t v32 = *a3;
            uint64_t v33 = **a3 + 104;
            uint64_t v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v33, v31);
            unsigned int v35 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v33, v34) + 12);
            uint64_t v36 = *v32 + 104;
            long long v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v36, &v220);
          }
          while (v35 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v36, v37) + 12));
        }
        if (v30 >= v31)
        {
          unsigned int v61 = v30 - 1;
        }
        else
        {
          uint64_t v217 = a4;
          uint64_t v44 = a5;
          uint64_t v45 = v11;
          uint64_t v46 = v30;
          uint64_t v47 = v31;
          do
          {
            unsigned int v48 = *v46;
            unsigned int *v46 = *v47;
            *uint64_t v47 = v48;
            do
            {
              ++v46;
              uint64_t v49 = *a3;
              uint64_t v50 = **a3 + 104;
              uint64_t v51 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v50, v46);
              unsigned int v52 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v50, v51) + 12);
              uint64_t v53 = *v49 + 104;
              int v54 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v53, &v220);
            }
            while (v52 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v53, v54) + 12));
            do
            {
              --v47;
              unsigned int v55 = *a3;
              uint64_t v56 = **a3 + 104;
              unsigned int v57 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v56, v47);
              unsigned int v58 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v56, v57) + 12);
              uint64_t v59 = *v55 + 104;
              unsigned int v60 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v59, &v220);
            }
            while (v58 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v59, v60) + 12));
          }
          while (v46 < v47);
          unsigned int v61 = v46 - 1;
          unsigned int v11 = v45;
          a5 = v44;
          a4 = v217;
        }
        if (v61 != v216) {
          unsigned int *v216 = *v61;
        }
        unsigned int *v61 = v220;
        if (v30 >= v31) {
          break;
        }
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,false>(v216, v61, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v10 = v61 + 1;
      }
      BOOL v62 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v216, v61, a3);
      uint64_t v10 = v61 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v61 + 1, v214, a3);
      if (result) {
        break;
      }
      if (!v62) {
        goto LABEL_33;
      }
    }
    a2 = v61;
    uint64_t v10 = v216;
    if (!v62) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,0>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, void **a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  uint64_t v13 = **a6 + 104;
  unint64_t v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v13, a5);
  unsigned int v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v13, v14) + 12);
  uint64_t v16 = *v12 + 104;
  BOOL v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, a4);
  uint64_t result = cv3d::cv::gess::mesh::Topology::h(v16, v17);
  if (v15 < *(_DWORD *)(result + 12))
  {
    unsigned int v19 = *a4;
    *a4 = *a5;
    *a5 = v19;
    unsigned int v20 = *a6;
    uint64_t v21 = **a6 + 104;
    int v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, a4);
    unsigned int v23 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v21, v22) + 12);
    uint64_t v24 = *v20 + 104;
    uint64_t v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v24, a3);
    uint64_t result = cv3d::cv::gess::mesh::Topology::h(v24, v25);
    if (v23 < *(_DWORD *)(result + 12))
    {
      unsigned int v26 = *a3;
      *a3 = *a4;
      *a4 = v26;
      unsigned int v27 = *a6;
      uint64_t v28 = **a6 + 104;
      uint64_t v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v28, a3);
      unsigned int v30 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v28, v29) + 12);
      uint64_t v31 = *v27 + 104;
      uint64_t v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, a2);
      uint64_t result = cv3d::cv::gess::mesh::Topology::h(v31, v32);
      if (v30 < *(_DWORD *)(result + 12))
      {
        unsigned int v33 = *a2;
        *a2 = *a3;
        *a3 = v33;
        uint64_t v34 = *a6;
        uint64_t v35 = **a6 + 104;
        uint64_t v36 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v35, a2);
        unsigned int v37 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v35, v36) + 12);
        uint64_t v38 = *v34 + 104;
        uint64_t v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v38, a1);
        uint64_t result = cv3d::cv::gess::mesh::Topology::h(v38, v39);
        if (v37 < *(_DWORD *)(result + 12))
        {
          unsigned int v40 = *a1;
          *a1 = *a2;
          *a2 = v40;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, void **a4)
{
  unsigned int v8 = *a4;
  uint64_t v9 = **a4 + 104;
  uint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, a2);
  unsigned int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v9, v10) + 12);
  uint64_t v12 = *v8 + 104;
  uint64_t v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, a1);
  unsigned int v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12);
  unsigned int v15 = *a4;
  uint64_t v16 = **a4 + 104;
  BOOL v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, a3);
  unsigned int v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v16, v17) + 12);
  uint64_t v19 = *v15 + 104;
  unsigned int v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, a2);
  uint64_t result = cv3d::cv::gess::mesh::Topology::h(v19, v20);
  unsigned int v22 = *(_DWORD *)(result + 12);
  if (v11 >= v14)
  {
    if (v18 < v22)
    {
      unsigned int v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      uint64_t v25 = *a4;
      uint64_t v26 = *v25 + 104;
      unsigned int v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, a2);
      unsigned int v28 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12);
      uint64_t v29 = *v25 + 104;
      unsigned int v30 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v29, a1);
      uint64_t result = cv3d::cv::gess::mesh::Topology::h(v29, v30);
      if (v28 < *(_DWORD *)(result + 12))
      {
        unsigned int v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  else
  {
    unsigned int v23 = *a1;
    if (v18 >= v22)
    {
      *a1 = *a2;
      *a2 = v23;
      uint64_t v32 = *a4;
      uint64_t v33 = *v32 + 104;
      uint64_t v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v33, a3);
      unsigned int v35 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v33, v34) + 12);
      uint64_t v36 = *v32 + 104;
      unsigned int v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v36, a2);
      uint64_t result = cv3d::cv::gess::mesh::Topology::h(v36, v37);
      if (v35 >= *(_DWORD *)(result + 12)) {
        return result;
      }
      unsigned int v23 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v23;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(unsigned int *a1, unsigned int *a2, void **a3)
{
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v7 = a2 - 1;
      unsigned int v8 = *a3;
      uint64_t v9 = **a3 + 104;
      uint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, a2 - 1);
      unsigned int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v9, v10) + 12);
      uint64_t v12 = *v8 + 104;
      uint64_t v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, a1);
      if (v11 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12))
      {
        unsigned int v14 = *a1;
        *a1 = *v7;
        *unint64_t v7 = v14;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v15 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v16 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    uint64_t v19 = *a3;
    uint64_t v20 = **a3 + 104;
    uint64_t v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v20, v16);
    unsigned int v22 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v20, v21) + 12);
    uint64_t v23 = *v19 + 104;
    unsigned int v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v23, v15);
    if (v22 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v23, v24) + 12))
    {
      unsigned int v34 = *v16;
      uint64_t v25 = v17;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v25 + 12) = *(unsigned int *)((char *)a1 + v25 + 8);
        if (v25 == -8) {
          break;
        }
        uint64_t v26 = *a3;
        uint64_t v27 = **a3 + 104;
        unsigned int v28 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v27, &v34);
        unsigned int v29 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v27, v28) + 12);
        uint64_t v30 = *v26 + 104;
        unsigned int v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v30, (unsigned int *)((char *)a1 + v25 + 4));
        v25 -= 4;
        if (v29 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v30, v31) + 12))
        {
          uint64_t v32 = (unsigned int *)((char *)a1 + v25 + 12);
          goto LABEL_12;
        }
      }
      uint64_t v32 = a1;
LABEL_12:
      *uint64_t v32 = v34;
      if (++v18 == 8) {
        return v16 + 1 == a2;
      }
    }
    unsigned int v15 = v16;
    v17 += 4;
    if (++v16 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, void **a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  uint64_t v11 = **a5 + 104;
  uint64_t v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v11, a4);
  unsigned int v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, v12) + 12);
  uint64_t v14 = *v10 + 104;
  unsigned int v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, a3);
  uint64_t result = cv3d::cv::gess::mesh::Topology::h(v14, v15);
  if (v13 < *(_DWORD *)(result + 12))
  {
    unsigned int v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    int v18 = *a5;
    uint64_t v19 = **a5 + 104;
    uint64_t v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, a3);
    unsigned int v21 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v19, v20) + 12);
    uint64_t v22 = *v18 + 104;
    uint64_t v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v22, a2);
    uint64_t result = cv3d::cv::gess::mesh::Topology::h(v22, v23);
    if (v21 < *(_DWORD *)(result + 12))
    {
      unsigned int v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      uint64_t v25 = *a5;
      uint64_t v26 = **a5 + 104;
      uint64_t v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, a2);
      unsigned int v28 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12);
      uint64_t v29 = *v25 + 104;
      uint64_t v30 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v29, a1);
      uint64_t result = cv3d::cv::gess::mesh::Topology::h(v29, v30);
      if (v28 < *(_DWORD *)(result + 12))
      {
        unsigned int v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::update_fibnode(uint64_t a1, unsigned int a2, float a3)
{
  cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(a1, a2, -3.4028e38);
  miuint64_t n = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::extract_min(a1);
  *(float *)(**(void **)(a1 + 16) + 32 * min) = a3;

  return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::insert(a1, min);
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Penalize(cv3d::cv::gess::internal::EdgeErrorHeap *this, const unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (*(_DWORD *)(*((void *)this + 3) + 32 * v2 + 20) == -1) {
    cv3d::cv::gess::internal::EdgeErrorHeap::Penalize();
  }
  *(_DWORD *)(**((void **)this + 2) + 4 * v2) = 2139095039;

  return cv3d::cv::gess::internal::EdgeErrorHeap::Update(this, a2);
}

void cv3d::cv::gess::internal::Collapser::Reset(cv3d::cv::gess::internal::Collapser *this)
{
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 4) = -1;
  uint64_t v1 = (void *)((char *)this + 104);
  do
  {
    v1[1] = *v1;
    v1 += 3;
  }
  while (v1 != (void *)((char *)this + 152));
  uint64_t v2 = (void *)((char *)this + 168);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 160, *((void **)this + 21));
  *(v2 - 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
  v2[3] = v2[2];
}

float32x4_t cv3d::cv::gess::alg::internal::OptimizePositionEnv(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t result)
{
  int32x4_t v6 = (int32x4_t)vsubq_f32(*a4, *a3);
  int32x4_t v7 = (int32x4_t)vsubq_f32(*a5, *a4);
  float32x4_t v8 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 4uLL), v7);
  float32x4_t v9 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v6, (int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL)), v6), v8), (float32x4_t)vzip2q_s32(vzip1q_s32(v7, (int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL)), v7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL), v6));
  float32x4_t v10 = vmulq_f32(v9, v9);
  v10.i32[3] = 0;
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  v10.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v10.f32));
  float32x4_t v11 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
  float32x4_t v12 = vmulq_f32(*a2, v11);
  v12.i32[3] = 0;
  float32x4_t v13 = vpaddq_f32(v12, v12);
  v13.f32[0] = vaddv_f32(*(float32x2_t *)v13.f32);
  v8.i64[0] = 0;
  float32x4_t v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v8, v13), 0), (int8x16_t)vnegq_f32(v11), (int8x16_t)v11);
  float32x4_t v15 = vmulq_f32(*a3, v14);
  v15.i32[3] = 0;
  float v16 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15));
  float32x4_t v17 = vmulq_f32(*a4, v14);
  v17.i32[3] = 0;
  float v18 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17));
  float32x4_t v19 = vmulq_f32(*a5, v14);
  v19.i32[3] = 0;
  float v20 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  if (v18 > v16) {
    float v16 = v18;
  }
  if (v20 <= v16) {
    float v21 = v16;
  }
  else {
    float v21 = v20;
  }
  float32x4_t v22 = vmulq_f32(v14, *a1);
  v22.i32[3] = 0;
  float v23 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22));
  if (v21 > v23)
  {
    uint64_t result = vaddq_f32(*a1, vmulq_n_f32(*a2, (float)(v21 - v23) + result.f32[0]));
    *a1 = result;
  }
  return result;
}

BOOL cv3d::cv::gess::alg::internal::GenerateEnvironmentOcclusionMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, cv3d::cv::gess::alg::MPSMeshIntersector *a5, float32_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t *a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  uint64_t v163 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a5, (double *)&v163);
  uint64_t v162 = 0x100000000;
  float v16 = cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a5, &v162);
  unint64_t v134 = (*(_DWORD *)(a2 + 8) * *(_DWORD *)(a2 + 4));
  unsigned int v17 = v134 >> 7;
  if (v134 >> 7 >= 0x2000) {
    unsigned int v17 = 0x2000;
  }
  unsigned int v116 = v17;
  context = (void *)MEMORY[0x25335EE00](v16);
  float v18 = cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(a5);
  uint64_t v120 = (void *)[v18 newCommandQueue];
  id v161 = 0;
  unsigned int v114 = v18;
  unsigned int v115 = GetMTLLibrary(v18, (uint64_t)&v161, a10, a12);
  id v19 = v161;
  if (v19)
  {
    float v20 = v19;
    if (a9) {
      *(_DWORD *)(a8 + 384) = 5;
    }
    if (*(void *)(a11 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 5);
      if (v155 < 0) {
        operator delete(__p[0]);
      }
    }

    float v21 = 0;
    uint64_t v122 = 0;
    unsigned int v123 = 0;
    uint64_t v117 = 0;
    unsigned int v118 = 0;
    BOOL v22 = 0;
    unsigned int v119 = 0;
    goto LABEL_84;
  }
  int v110 = a9;
  uint64_t v23 = cv3d::cv::gess::alg::MPSMeshIntersector::getMPSRayIntersectorInternal(a5);
  unsigned int v118 = cv3d::cv::gess::alg::MPSMeshIntersector::getMPSTriangleAccelerationStructureInternal(a5);
  unsigned int v119 = (void *)v23;
  id v24 = objc_alloc_init(MEMORY[0x263F12850]);
  [v24 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:1];
  uint64_t v25 = (void *)[v115 newFunctionWithName:@"rcdBOOL"];
  [v24 setComputeFunction:v25];

  id v160 = 0;
  uint64_t v26 = [v114 newComputePipelineStateWithDescriptor:v24 options:0 reflection:0 error:&v160];
  id v27 = v160;
  unsigned int v123 = (void *)v26;
  if (v26)
  {

    unint64_t v127 = v116 << 7;
    uint64_t v117 = (void *)[v114 newBufferWithLength:32 * v127 options:0];
    uint64_t v28 = [v114 newBufferWithLength:16 * v127 options:32];
    unsigned int v121 = (void *)[v114 newBufferWithLength:v127 options:0];
    uint64_t v122 = (void *)v28;
    uint64_t v29 = [v117 contents];
    std::vector<unsigned int>::vector(&v159, 2 * v116);
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v158, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    float32x4_t v164 = 0uLL;
    int v30 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v164, (unsigned __int8 *)__p);
    BOOL v111 = v30 != -1;
    if (v155 < 0) {
      operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v30;
    uint64_t v125 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    __p[0] = 0;
    __p[1] = 0;
    int v154 = 0;
    v31.i64[0] = 0x80000000800000;
    v31.i64[1] = 0x80000000800000;
    float32x4_t v156 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    float32x4_t v157 = v31;
    cv3d::cv::gess::alg::MeasureGeometryQuality((float32x4_t *)a1, (const cv3d::cv::gess::mesh::PolyMesh *)__p, v32);
    uint64_t v33 = a2;
    float32x4_t v34 = vsubq_f32(v157, v156);
    float v35 = v34.f32[1];
    if (v34.f32[0] >= v34.f32[1]) {
      float v35 = v34.f32[0];
    }
    v34.i32[0] = v34.i32[2];
    if (v35 >= v34.f32[2]) {
      v34.f32[0] = v35;
    }
    if (*(_DWORD *)(a2 + 8))
    {
      __int32 v132 = v34.i32[0];
      unsigned int v36 = 0;
      unint64_t v37 = 0;
      uint64_t v38 = v29 + 16;
      uint64_t v39 = v134 >> 7;
      if (v134 >> 7 >= 0x2000) {
        uint64_t v39 = 0x2000;
      }
      uint64_t v124 = -128 * v39;
      double v40 = 0.5;
      double v41 = 1.0;
      double v42 = -0.5;
      float v133 = a6;
      while (1)
      {
        unsigned int v43 = *(_DWORD *)(v33 + 4);
        if (!v43) {
          goto LABEL_46;
        }
        unsigned int v44 = 0;
        unsigned int v130 = v36;
        while (!*(unsigned char *)(*(void *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v44 + v43 * v36)))
        {
LABEL_45:
          if (++v44 >= v43) {
            goto LABEL_46;
          }
        }
        uint64_t v45 = *(void *)(a3 + 16);
        uint64_t v46 = (v44 + *(_DWORD *)(a3 + 4) * v36) * *(_DWORD *)(a3 + 12);
        unsigned int v152 = *(_DWORD *)(v45 + 16 * v46 + 4);
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v152, v158);
        float32x4_t v47 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v158[0]);
        unsigned int v48 = (float *)(v45 + 16 * v46);
        float v49 = v48[2];
        v48 += 2;
        float32x4_t v137 = v47;
        float32x4_t v50 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v158[0] + 1));
        float v128 = v48[1];
        float32x4_t v129 = v50;
        uint64_t v51 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v158[0] + 2));
        float v52 = *v48;
        float v53 = v48[1];
        float v54 = (float)(1.0 - *v48) - v53;
        float32x4_t v151 = vaddq_f32(vaddq_f32(vmulq_n_f32(v137, v49), vmulq_n_f32(v129, v128)), vmulq_n_f32(*v51, v54));
        unint64_t v55 = *(unsigned int *)v158[0];
        uint64_t v56 = *(void *)(v125 + 40);
        unint64_t v57 = (*(void *)(v125 + 48) - v56) >> 4;
        if (v57 <= v55) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        unint64_t v58 = *((unsigned int *)v158[0] + 1);
        if (v57 <= v58) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        unint64_t v59 = *((unsigned int *)v158[0] + 2);
        if (v57 <= v59) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        float32x4_t v60 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v56 + 16 * v59), v54), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v56 + 16 * v58), v53), vmulq_n_f32(*(float32x4_t *)(v56 + 16 * v55), v52)));
        float32x4_t v61 = vmulq_f32(v60, v60);
        v61.i32[3] = 0;
        v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
        v61.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v61.f32));
        float32x4_t v150 = vdivq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 0));
        float32x4_t v164 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v55);
        float32x4_t v149 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v158[0] + 1));
        float32x4_t v148 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v158[0] + 2));
        float32x4_t v62 = v148;
        v62.f32[0] = a6;
        cv3d::cv::gess::alg::internal::OptimizePositionEnv(&v151, &v150, &v164, &v149, &v148, v62);
        int v63 = 0;
        begiuint64_t n = v159.__begin_;
        *(std::vector<unsigned int>::pointer)((char *)v159.__begin_ + ((v37 >> 4) & 0xFFFFFFFFFFFFFF8)) = v44;
        *(std::vector<unsigned int>::pointer)((char *)begin + ((v37 >> 4) & 0xFFFFFFFFFFFFFF8 | 4)) = v130;
        uint64_t v65 = v151.i64[0];
        double v66 = 0.0;
        __int32 v67 = v151.i32[2];
        do
        {
          double v135 = v66;
          float v68 = (v66 + v40) * -0.0625 + v41;
          __double2 v70 = __sincos_stret((v68 + v42 + v68 + v42) * 3.14159265);
          v69.f64[0] = v70.__cosval;
          uint64_t v71 = 0;
          v69.f64[1] = v70.__sinval;
          float64x2_t v138 = v69;
          unint64_t v72 = v38 + 32 * v37;
          double v73 = 0.0;
          do
          {
            float v74 = (v73 + 0.5) * -0.125 + 1.0;
            *(float *)&unsigned int v75 = sin((v74 + -0.5) * 3.14159265);
            float v76 = sqrt(1.0 - (float)(*(float *)&v75 * *(float *)&v75));
            *(float32x2_t *)v77.f32 = vcvt_f32_f64(vmulq_n_f64(v138, v76));
            v77.i64[1] = v75;
            float32x4_t v78 = vmulq_f32(v77, v77);
            v78.i32[3] = 0;
            v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
            v78.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v78.f32));
            float32x4_t v79 = vdivq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 0));
            *(void *)(v72 - 16) = v65;
            *(void *)unint64_t v72 = v79.i64[0];
            *(_DWORD *)(v72 - 8) = v67;
            *(float *)(v72 - 4) = v133;
            *(_DWORD *)(v72 + 8) = v79.i32[2];
            *(_DWORD *)(v72 + 12) = v132;
            double v73 = v73 + 1.0;
            ++v71;
            v72 += 32;
          }
          while (v71 != 8);
          double v66 = v135 + 1.0;
          ++v63;
          v37 += v71;
          double v40 = 0.5;
          double v42 = -0.5;
          double v41 = 1.0;
        }
        while (v63 != 16);
        a6 = v133;
        if (v37 + v124) {
          goto LABEL_44;
        }
        float32x4_t v139 = objc_msgSend(v120, "commandBuffer", v66);
        objc_msgSend(v119, "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v127, v118);
        unint64_t v80 = [v123 maxTotalThreadsPerThreadgroup];
        unint64_t v81 = v80 >= v127 ? v116 << 7 : v80;
        uint64_t v82 = [v139 computeCommandEncoder];
        [v82 setBuffer:v28 offset:0 atIndex:0];
        [v82 setBuffer:v121 offset:0 atIndex:1];
        [v82 setComputePipelineState:v123];
        uint64_t v146 = v116 << 7;
        int64x2_t v147 = vdupq_n_s64(1uLL);
        unint64_t v144 = v81;
        int64x2_t v145 = v147;
        [v82 dispatchThreads:&v146 threadsPerThreadgroup:&v144];
        cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)[v82 endEncoding]);
        [v139 commit];
        [v139 waitUntilCompleted];
        uint64_t v83 = [v139 error];
        BOOL v85 = cv3d::cv::gess::alg::internal::GPUEncountersError(v83, v84);

        if (!v85) {
          break;
        }
        if (v110) {
          *(_DWORD *)(a8 + 384) = 16;
        }
        if (*(void *)(a11 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(&v164, (char *)&unk_24F58DDD7);
          std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 16);
          if (v165 < 0) {
            operator delete((void *)v164.i64[0]);
          }
        }

        BOOL v111 = 0;
        unint64_t v37 = v116 << 7;
        unsigned int v36 = v130;
LABEL_46:
        ++v36;
        uint64_t v33 = a2;
        if (v36 >= *(_DWORD *)(a2 + 8))
        {
          if (v111 && v37)
          {
            uint64_t v94 = [v120 commandBuffer];
            [v119 encodeIntersectionToCommandBuffer:v94 intersectionType:1 rayBuffer:v117 rayBufferOffset:0 intersectionBuffer:v28 intersectionBufferOffset:0 rayCount:v37 accelerationStructure:v118];
            unint64_t v95 = [v123 maxTotalThreadsPerThreadgroup];
            if (v95 >= v37) {
              unint64_t v96 = v37;
            }
            else {
              unint64_t v96 = v95;
            }
            uint64_t v97 = [v94 computeCommandEncoder];
            [v97 setBuffer:v122 offset:0 atIndex:0];
            [v97 setBuffer:v121 offset:0 atIndex:1];
            [v97 setComputePipelineState:v123];
            unint64_t v142 = v37;
            int64x2_t v143 = vdupq_n_s64(1uLL);
            unint64_t v140 = v96;
            int64x2_t v141 = v143;
            [v97 dispatchThreads:&v142 threadsPerThreadgroup:&v140];
            cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)[v97 endEncoding]);
            [v94 commit];
            [v94 waitUntilCompleted];
            uint64_t v98 = [v94 error];
            BOOL v100 = cv3d::cv::gess::alg::internal::GPUEncountersError(v98, v99);

            if (v100)
            {
              if (v110) {
                *(_DWORD *)(a8 + 384) = 16;
              }
              if (*(void *)(a11 + 24))
              {
                std::string::basic_string[abi:ne180100]<0>(&v164, (char *)&unk_24F58DDD7);
                std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 16);
                if (v165 < 0) {
                  operator delete((void *)v164.i64[0]);
                }
              }
              BOOL v111 = 0;
            }
            else
            {
              uint64_t v101 = [v121 contents];
              LODWORD(v102) = 0;
              do
              {
                uint64_t v103 = 0;
                uint64_t v104 = v101 + v102;
                unsigned int v105 = v159.__begin_[v102 >> 6];
                unsigned int v106 = v159.__begin_[(v102 >> 6) | 1];
                do
                {
                  uint64_t v107 = 0;
                  __int8 v108 = 0;
                  do
                    __int8 v108 = *(unsigned char *)(v104 + v107++) | (2 * v108);
                  while (v107 != 8);
                  v164.i8[v103++] = v108;
                  v104 += 8;
                }
                while (v103 != 16);
                *(float32x4_t *)(*(void *)(a4 + 16) + 4 * (v105 + *(_DWORD *)(a4 + 4) * v106) * *(_DWORD *)(a4 + 12)) = v164;
                unint64_t v102 = (v102 + 128);
              }
              while (v37 > v102);
            }
          }
          goto LABEL_79;
        }
      }
      uint64_t v86 = [v121 contents];
      if (v116)
      {
        unsigned int v87 = 0;
        do
        {
          uint64_t v88 = 0;
          unsigned int v89 = v159.__begin_[v87 >> 6];
          unsigned int v90 = v159.__begin_[(v87 >> 6) | 1];
          uint64_t v91 = v86;
          do
          {
            uint64_t v92 = 0;
            char v93 = 0;
            do
              char v93 = *(unsigned char *)(v91 + v92++) | (2 * v93);
            while (v92 != 8);
            *((unsigned char *)&v166 + v88++) = v93;
            v91 += 8;
          }
          while (v88 != 16);
          *(_OWORD *)(*(void *)(a4 + 16) + 4 * (v89 + *(_DWORD *)(a4 + 4) * v90) * *(_DWORD *)(a4 + 12)) = v166;
          v87 += 128;
          v86 += 128;
        }
        while (v127 > v87);
      }

      unint64_t v37 = 0;
LABEL_44:
      unsigned int v43 = *(_DWORD *)(a2 + 4);
      unsigned int v36 = v130;
      goto LABEL_45;
    }
LABEL_79:
    if (v158[0])
    {
      v158[1] = v158[0];
      operator delete(v158[0]);
    }
    if (v159.__begin_)
    {
      v159.__end_ = v159.__begin_;
      operator delete(v159.__begin_);
    }
    BOOL v22 = v111;
    float v21 = v121;
  }
  else
  {
    if (a9) {
      *(_DWORD *)(a8 + 384) = 5;
    }
    if (*(void *)(a11 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 5);
      if (v155 < 0) {
        operator delete(__p[0]);
      }
    }

    float v21 = 0;
    uint64_t v122 = 0;
    unsigned int v123 = 0;
    uint64_t v117 = 0;
    BOOL v22 = 0;
  }
LABEL_84:

  return v22;
}

void sub_24F4E6C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }

  if (__p) {
    operator delete(__p);
  }
  unsigned int v75 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v75;
    operator delete(v75);
  }

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::internal::IsChartBoundary(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v8 = a1 + 104;
  float32x4_t v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  float32x4_t v10 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v9);
  if ((v11 & *v10) != 0) {
    return 1;
  }
  unsigned int v34 = *a3;
  float32x4_t v12 = (uint64_t *)(a1 + 56);
  uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v12, &v34);
  unint64_t v14 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, a2) + 16);
  uint64_t v15 = *(void *)(v13 + 40);
  if (v14 >= (*(void *)(v13 + 48) - v15) >> 2) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  int v16 = *(_DWORD *)(v15 + 4 * v14);
  unsigned int v34 = *a3;
  uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v12, &v34);
  float v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, a2);
  unint64_t v19 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v18) + 16);
  uint64_t v20 = *(void *)(v17 + 40);
  if (v19 >= (*(void *)(v17 + 48) - v20) >> 2) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  if (v16 != *(_DWORD *)(v20 + 4 * v19)) {
    return 1;
  }
  unsigned int v34 = *a4;
  uint64_t v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v12, &v34);
  BOOL v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, a2);
  unint64_t v23 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v22) + 16);
  uint64_t v25 = v21 + 40;
  uint64_t v24 = *(void *)(v21 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v25 + 8) - v24) >> 2) <= v23) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  unsigned int v34 = *a4;
  uint64_t v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v12, &v34);
  unint64_t v27 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, a2) + 16);
  uint64_t v28 = *(void *)(v26 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v26 + 48) - v28) >> 2) <= v27) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  uint64_t v29 = 0;
  unsigned __int8 v30 = 0;
  uint64_t v31 = v28 + 12 * v27;
  do
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      if (*(_DWORD *)(v24 + 12 * v23 + 4 * v29) == *(_DWORD *)(v31 + i)) {
        ++v30;
      }
    }
    ++v29;
  }
  while (v29 != 3);
  return v30 < 2u;
}

uint64_t cv3d::cv::gess::internal::CalculateFaceLabels(uint64_t a1, float *a2, std::vector<unsigned int> *a3, void **a4, _DWORD *a5)
{
  cv3d::cv::gess::util::os::IsFloatBitSizeDefault((cv3d::cv::gess::util::os *)a1);
  float v10 = cosf(*a2);
  cv3d::cv::gess::mesh::PolyMesh::ComputeFaceNormal((uint64_t **)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
  float32x4_t v178 = 0;
  uint64_t v179 = 0;
  unsigned int v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v178, (unsigned __int8 *)__p);
  v180[0] = v11;
  if (SBYTE7(v169) < 0) {
    operator delete(__p[0]);
  }
  if (v11 == -1) {
    cv3d::cv::gess::internal::CalculateFaceLabels();
  }
  uint64_t v12 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  std::vector<unsigned int>::size_type __sz = v12;
  std::vector<std::pair<cv3d::cv::gess::mesh::FaceHandle,float>>::vector(&v178, v12);
  if (v12)
  {
    int v13 = 0;
    uint64_t v14 = 0;
    do
    {
      LODWORD(__p[0]) = v13;
      float v15 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)__p);
      int v16 = (float *)&v178[v14];
      *int v16 = *(float *)__p;
      v16[1] = v15;
      v14 += 2;
      ++v13;
    }
    while (2 * v12 != v14);
  }
  unint64_t v17 = 126 - 2 * __clz((v179 - (unsigned char *)v178) >> 3);
  if (v179 == (unsigned char *)v178) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>((unint64_t)v178, (unint64_t)v179, v18, 1);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::reserve(a4, 0x32uLL);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v176, v12, (unsigned __int8 *)__p);
  memset(&v175, 0, sizeof(v175));
  std::vector<unsigned int>::reserve(&v175, (unint64_t)(float)((float)v12 * 0.5));
  if (v12)
  {
    unint64_t v19 = 0;
    do
    {
      if ((*(void *)&v176[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v19))
      {
        ++v19;
      }
      else
      {
        v175.__end_ = v175.__begin_;
        uint64_t v20 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v180[0], v178[2 * v19]);
        float v161 = *(float *)&v178[2 * v19 + 1];
        float32x4_t v158 = *v20;
        std::vector<int>::pointer end = v175.__end_;
        if (v175.__end_ >= v175.__end_cap_.__value_)
        {
          begiuint64_t n = v175.__begin_;
          int64_t v24 = v175.__end_ - v175.__begin_;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          int64_t v26 = (char *)v175.__end_cap_.__value_ - (char *)v175.__begin_;
          if (((char *)v175.__end_cap_.__value_ - (char *)v175.__begin_) >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v175.__end_cap_, v27);
            begiuint64_t n = v175.__begin_;
            std::vector<int>::pointer end = v175.__end_;
          }
          else
          {
            uint64_t v28 = 0;
          }
          uint64_t v29 = (int *)&v28[4 * v24];
          *uint64_t v29 = v19;
          BOOL v22 = v29 + 1;
          while (end != begin)
          {
            int v30 = *--end;
            *--uint64_t v29 = v30;
          }
          v175.__begin_ = v29;
          v175.__end_ = v22;
          v175.__end_cap_.__value_ = (int *)&v28[4 * v27];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v175.__end_ = v19;
          BOOL v22 = end + 1;
        }
        float32x4_t v159 = vaddq_f32(vmulq_n_f32(v158, v161), (float32x4_t)0);
        v175.__end_ = v22;
        ++v19;
        uint64_t v31 = v178;
        for (unint64_t i = v19; i < (v179 - (unsigned char *)v31) >> 3; ++i)
        {
          uint64_t v33 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v180[0], v31[2 * i]);
          float32x4_t v162 = *v33;
          float32x4_t v34 = vmulq_f32(*v33, *v20);
          v34.i32[3] = 0;
          uint64_t v31 = v178;
          if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)) > v10)
          {
            float v157 = *(float *)&v178[2 * i + 1];
            std::vector<int>::pointer v35 = v175.__end_;
            if (v175.__end_ >= v175.__end_cap_.__value_)
            {
              std::vector<int>::pointer v37 = v175.__begin_;
              int64_t v38 = v175.__end_ - v175.__begin_;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              int64_t v40 = (char *)v175.__end_cap_.__value_ - (char *)v175.__begin_;
              if (((char *)v175.__end_cap_.__value_ - (char *)v175.__begin_) >> 1 > v39) {
                unint64_t v39 = v40 >> 1;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                double v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v175.__end_cap_, v41);
                std::vector<int>::pointer v37 = v175.__begin_;
                std::vector<int>::pointer v35 = v175.__end_;
              }
              else
              {
                double v42 = 0;
              }
              unsigned int v43 = (int *)&v42[4 * v38];
              *unsigned int v43 = i;
              unsigned int v36 = v43 + 1;
              while (v35 != v37)
              {
                int v44 = *--v35;
                *--unsigned int v43 = v44;
              }
              v175.__begin_ = v43;
              v175.__end_ = v36;
              v175.__end_cap_.__value_ = (int *)&v42[4 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              *v175.__end_ = i;
              unsigned int v36 = v35 + 1;
            }
            float32x4_t v159 = vaddq_f32(v159, vmulq_n_f32(v162, v157));
            v175.__end_ = v36;
            uint64_t v31 = v178;
          }
        }
        float32x4_t v45 = vmulq_f32(v159, v159);
        v45.i32[3] = 0;
        v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
        v45.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v45.f32));
        float32x4_t v46 = vdivq_f32(v159, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0));
        unsigned int v48 = (float32x4_t *)a4[1];
        unint64_t v47 = (unint64_t)a4[2];
        float32x4_t v163 = v46;
        if ((unint64_t)v48 >= v47)
        {
          uint64_t v50 = ((char *)v48 - (unsigned char *)*a4) >> 4;
          if ((unint64_t)(v50 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = v47 - (void)*a4;
          uint64_t v52 = v51 >> 3;
          if (v51 >> 3 <= (unint64_t)(v50 + 1)) {
            uint64_t v52 = v50 + 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53) {
            float v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)(a4 + 2), v53);
          }
          else {
            float v54 = 0;
          }
          unint64_t v55 = (float32x4_t *)&v54[16 * v50];
          *unint64_t v55 = v163;
          float v49 = (char *)&v55[1];
          unint64_t v57 = (char *)*a4;
          uint64_t v56 = (char *)a4[1];
          if (v56 != *a4)
          {
            do
            {
              float32x4_t v58 = *((float32x4_t *)v56 - 1);
              v56 -= 16;
              v55[-1] = v58;
              --v55;
            }
            while (v56 != v57);
            uint64_t v56 = (char *)*a4;
          }
          *a4 = v55;
          a4[1] = v49;
          a4[2] = &v54[16 * v53];
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          *unsigned int v48 = v46;
          float v49 = (char *)&v48[1];
        }
        a4[1] = v49;
        std::vector<int>::pointer v59 = v175.__begin_;
        std::vector<int>::pointer v60 = v175.__end_;
        if (v175.__begin_ != v175.__end_)
        {
          unsigned int v61 = v180[0];
          do
          {
            float32x4_t v62 = vmulq_f32(v163, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v61, v178[2 * *v59]));
            v62.i32[3] = 0;
            if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62)) > v10) {
              *(void *)&v176[((unint64_t)*v59 >> 3) & 0x1FFFFFF8] |= 1 << *v59;
            }
            ++v59;
          }
          while (v59 != v60);
        }
      }
    }
    while (v19 != __sz);
  }
  uint64_t v179 = v178;
  std::vector<int>::resize(a3, __sz);
  unint64_t v63 = (unint64_t)((unsigned char *)a4[1] - (unsigned char *)*a4) >> 4;
  *a5 = v63;
  if (__sz)
  {
    uint64_t v64 = 0;
    if (v63) {
      goto LABEL_76;
    }
LABEL_81:
    unsigned int v66 = 0;
    while (1)
    {
      a3->__begin_[v64++] = v66;
      if (v64 == __sz) {
        break;
      }
      if (!*a5) {
        goto LABEL_81;
      }
LABEL_76:
      unint64_t v65 = 0;
      unsigned int v66 = 0;
      unsigned int v67 = v180[0];
      float v68 = -3.4028e38;
      do
      {
        float32x4_t v69 = vmulq_f32(*(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v67, v64), *((float32x4_t *)*a4 + v65));
        v69.i32[3] = 0;
        float v70 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v69, v69));
        if (v70 > v68)
        {
          unsigned int v66 = v65;
          float v68 = v70;
        }
        ++v65;
      }
      while (v65 < *a5);
    }
  }
  unsigned int v172 = 0;
  uint64_t v173 = 0;
  float32x4_t v174 = 0;
  std::vector<unsigned int>::vector(&v171, __sz);
  std::vector<BOOL>::resize((uint64_t)&v176, __sz, 0);
  if (v177)
  {
    __p[0] = v176;
    LODWORD(__p[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__p, v177);
  }
  if (__sz)
  {
    for (unint64_t j = 0; j != __sz; ++j)
    {
      if ((*(void *)&v176[8 * (j >> 6)] & (1 << j)) == 0)
      {
        unint64_t v72 = v173;
        if (v173 >= v174)
        {
          float v74 = (char *)v172;
          uint64_t v75 = (v173 - (unsigned char *)v172) >> 2;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v77 = v174 - (unsigned char *)v172;
          if ((v174 - (unsigned char *)v172) >> 1 > v76) {
            unint64_t v76 = v77 >> 1;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78)
          {
            float32x4_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v174, v78);
            float v74 = (char *)v172;
            unint64_t v72 = v173;
          }
          else
          {
            float32x4_t v79 = 0;
          }
          unint64_t v80 = &v79[4 * v75];
          *(_DWORD *)unint64_t v80 = 1;
          uint64_t v73 = v80 + 4;
          while (v72 != v74)
          {
            int v81 = *((_DWORD *)v72 - 1);
            v72 -= 4;
            *((_DWORD *)v80 - 1) = v81;
            v80 -= 4;
          }
          unsigned int v172 = v80;
          uint64_t v173 = v73;
          float32x4_t v174 = &v79[4 * v78];
          if (v74) {
            operator delete(v74);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v173 = 1;
          uint64_t v73 = v72 + 4;
        }
        uint64_t v173 = v73;
        uint64_t v82 = v172;
        long long v169 = 0u;
        long long v170 = 0u;
        *(_OWORD *)std::vector<unsigned int> __p = 0u;
        signed int v167 = j;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v167);
        uint64_t v83 = ((unint64_t)(v73 - v82) >> 2) - 1;
        *(void *)&v176[8 * (j >> 6)] |= 1 << j;
        v171.__begin_[j] = v83;
        uint64_t v84 = *((void *)&v170 + 1);
        if (*((void *)&v170 + 1))
        {
          unsigned int v85 = a3->__begin_[j];
          do
          {
            signed int v167 = *(_DWORD *)(*(void *)((char *)__p[1] + (((unint64_t)v170 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v170 & 0x3FF));
            *(void *)&long long v170 = v170 + 1;
            *((void *)&v170 + 1) = v84 - 1;
            if ((unint64_t)v170 >= 0x800)
            {
              operator delete(*(void **)__p[1]);
              __p[1] = (char *)__p[1] + 8;
              *(void *)&long long v170 = v170 - 1024;
            }
            unsigned int v86 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v167);
            unsigned int v166 = v86;
            do
            {
              unsigned int v166 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v166) + 8);
              unsigned int v87 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v166);
              uint64_t v88 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v87);
              if ((*v88 & v89) == 0)
              {
                unsigned int v90 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v166);
                unsigned int v165 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v90) + 16);
                if (((*(void *)&v176[((unint64_t)v165 >> 3) & 0x1FFFFFF8] >> v165) & 1) == 0
                  && a3->__begin_[v165] == v85)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v165);
                  uint64_t v91 = v165;
                  *(void *)&v176[((unint64_t)v165 >> 3) & 0x1FFFFFF8] |= 1 << v165;
                  v171.__begin_[v91] = v83;
                  ++*((_DWORD *)v172 + v83);
                }
              }
            }
            while (v166 != v86);
            uint64_t v84 = *((void *)&v170 + 1);
          }
          while (*((void *)&v170 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](__p);
      }
    }
    for (uint64_t k = 0; k != __sz; ++k)
    {
      if (*((_DWORD *)v172 + v171.__begin_[k]) == 1)
      {
        char v93 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v180[0], k);
        unsigned int v94 = a3->__begin_[k];
        LODWORD(__p[0]) = k;
        int v95 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v95;
        float v96 = 0.5;
        uint64_t v97 = 0xFFFFFFFFLL;
        do
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          uint64_t v98 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          unsigned int v99 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v98);
          if ((*v99 & v100) == 0)
          {
            uint64_t v101 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            uint64_t v102 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v101);
            uint64_t v103 = *(unsigned int *)(v102 + 16);
            float32x4_t v104 = vmulq_f32(*((float32x4_t *)*a4 + a3->__begin_[v103]), *v93);
            v104.i32[3] = 0;
            float v105 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v104, v104));
            if (v105 > v96)
            {
              float v106 = v105 * (float)*((unsigned int *)v172 + v171.__begin_[v103]);
              if (v106 > v10)
              {
                uint64_t v97 = *(unsigned int *)(v102 + 16);
                unsigned int v94 = a3->__begin_[v103];
                float v96 = v106;
              }
            }
          }
        }
        while (LODWORD(__p[0]) != v95);
        if (a3->__begin_[k] != v94)
        {
          a3->__begin_[k] = v94;
          std::vector<unsigned int>::pointer v107 = v171.__begin_;
          __int8 v108 = v172;
          *((_DWORD *)v172 + v171.__begin_[k]) = 0;
          uint64_t v109 = v107[v97];
          v107[k] = v109;
          ++v108[v109];
        }
      }
    }
    for (uint64_t m = 0; m != __sz; ++m)
    {
      if (*((_DWORD *)v172 + v171.__begin_[m]) == 2)
      {
        LODWORD(__p[0]) = m;
        int v111 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v111;
        while (1)
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          BOOL v112 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          uint64_t v113 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v112);
          if ((*v113 & v114) == 0)
          {
            unsigned int v115 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            signed int v116 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v115) + 16);
            if (a3->__begin_[v116] == a3->__begin_[m]) {
              break;
            }
          }
          if (LODWORD(__p[0]) == v111) {
            goto LABEL_134;
          }
        }
        if (v116 != -1)
        {
          unsigned int v117 = v180[0];
          unsigned int v118 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v180[0], m);
          unsigned int v119 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v117, v116);
          unsigned int v164 = a3->__begin_[m];
          signed int v167 = m;
          int v120 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v167);
          LODWORD(__p[0]) = v120;
          float v121 = 0.5;
          uint64_t v160 = 0xFFFFFFFFLL;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            uint64_t v122 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            unsigned int v123 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v122);
            if ((*v123 & v124) == 0)
            {
              uint64_t v125 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              uint64_t v126 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v125);
              uint64_t v127 = *(unsigned int *)(v126 + 16);
              uint64_t v128 = a3->__begin_[v127];
              if (v128 != a3->__begin_[m])
              {
                float32x4_t v129 = *((float32x4_t *)*a4 + v128);
                float32x4_t v130 = vmulq_f32(*v118, v129);
                v130.i32[3] = 0;
                float v131 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v130, v130));
                float32x4_t v132 = vmulq_f32(v129, *v119);
                v132.i32[3] = 0;
                float v133 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v132, v132));
                if (v131 > v10 && v133 > v10)
                {
                  float v135 = (float)(v131 + v133) * (float)*((unsigned int *)v172 + v171.__begin_[v127]);
                  if (v135 > v121)
                  {
                    uint64_t v160 = *(unsigned int *)(v126 + 16);
                    unsigned int v164 = a3->__begin_[v127];
                    float v121 = v135;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v120);
          signed int v167 = v116;
          int v136 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v167);
          LODWORD(__p[0]) = v136;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            float32x4_t v137 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            float64x2_t v138 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v137);
            if ((*v138 & v139) == 0)
            {
              unint64_t v140 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              uint64_t v141 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v140);
              uint64_t v142 = *(unsigned int *)(v141 + 16);
              uint64_t v143 = a3->__begin_[v142];
              if (v143 != a3->__begin_[v116])
              {
                float32x4_t v144 = *((float32x4_t *)*a4 + v143);
                float32x4_t v145 = vmulq_f32(*v118, v144);
                v145.i32[3] = 0;
                float v146 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v145, v145));
                float32x4_t v147 = vmulq_f32(v144, *v119);
                v147.i32[3] = 0;
                float v148 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v147, v147));
                if (v146 > v10 && v148 > v10)
                {
                  float v150 = (float)(v146 + v148) * (float)*((unsigned int *)v172 + v171.__begin_[v142]);
                  if (v150 > v121)
                  {
                    uint64_t v160 = *(unsigned int *)(v141 + 16);
                    unsigned int v164 = a3->__begin_[v142];
                    float v121 = v150;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v136);
          std::vector<unsigned int>::pointer v151 = a3->__begin_;
          if (a3->__begin_[m] != v164 && v151[v116] != v164)
          {
            v151[v116] = v164;
            v151[m] = v164;
            std::vector<unsigned int>::pointer v152 = v171.__begin_;
            unsigned int v153 = v172;
            *((_DWORD *)v172 + v171.__begin_[m]) = 0;
            uint64_t v154 = v152[v160];
            v152[v116] = v154;
            v152[m] = v154;
            v153[v154] += 2;
          }
        }
      }
LABEL_134:
      ;
    }
  }
  if (v180[0] != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 56), v180);
  }
  v180[0] = -1;
  if (v171.__begin_)
  {
    v171.__end_ = v171.__begin_;
    operator delete(v171.__begin_);
  }
  if (v172)
  {
    uint64_t v173 = (char *)v172;
    operator delete(v172);
  }
  if (v175.__begin_)
  {
    v175.__end_ = v175.__begin_;
    operator delete(v175.__begin_);
  }
  if (v176) {
    operator delete(v176);
  }
  if (v178)
  {
    uint64_t v179 = v178;
    operator delete(v178);
  }
  return 1;
}

void sub_24F4E7EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  if (*(void *)v37) {
    operator delete(*(void **)v37);
  }
  unint64_t v39 = *(void **)(v37 + 24);
  if (v39)
  {
    *(void *)(v37 + 32) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 7) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(_DWORD *)(*(void *)(v5 + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7 & 0x3FF)) = *a2;
  ++a1[5];
}

uint64_t cv3d::cv::gess::internal::SeperateChartGroups(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, std::vector<unsigned int> *a6)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  unsigned int v67 = -1;
  unsigned int v68 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v9 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v68, (unsigned __int8 *)&v72);
  BOOL v10 = v9;
  if (SBYTE7(v73) < 0)
  {
    operator delete((void *)v72);
    if (v10) {
      goto LABEL_3;
    }
  }
  else if (v9)
  {
LABEL_3:
    LODWORD(v72) = v68;
    uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v72);
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a1, &v68, &v72);
  if (SBYTE7(v73) < 0) {
    operator delete((void *)v72);
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v69) = 0;
  unsigned int v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v69, (unsigned __int8 *)&v72);
  unsigned int v67 = v12;
  if (SBYTE7(v73) < 0) {
    operator delete((void *)v72);
  }
  if (v12 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v67, &v72);
    if (SBYTE7(v73) < 0) {
      operator delete((void *)v72);
    }
  }
  unint64_t v58 = *(void *)(a1 + 160) - *(void *)(a1 + 152);
  unint64_t v13 = (v58 >> 2);
  LOBYTE(v72) = 0;
  std::vector<BOOL>::vector(&__p, v13, (unsigned __int8 *)&v72);
  std::vector<int>::pointer v59 = (uint64_t **)(a1 + 56);
  std::vector<int>::pointer v60 = a6;
  if ((v58 >> 2))
  {
    unint64_t v14 = 0;
    float v15 = (uint64_t *)(a1 + 80);
    do
    {
      if ((*((void *)__p + (v14 >> 6)) & (1 << v14)) == 0)
      {
        LODWORD(v72) = v68;
        uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v15, (unsigned int *)&v72);
        (*(void (**)(uint64_t))(*(void *)v16 + 48))(v16);
        LODWORD(v72) = v68;
        uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v15, (unsigned int *)&v72);
        unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17) - 1;
        std::to_string((std::string *)&v72, v18);
        unint64_t v19 = std::string::insert((std::string *)&v72, 0, "g", 1uLL);
        std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
        *(void *)&long long v69 = v19->__r_.__value_.__l.__size_;
        *(void *)((char *)&v69 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
        char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        uint64_t v22 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(a1, v68, v18);
        uint64_t v23 = v22;
        if (*(char *)(v22 + 23) < 0) {
          operator delete(*(void **)v22);
        }
        *(void *)uint64_t v23 = v20;
        *(void *)(v23 + 8) = v69;
        *(void *)(v23 + 15) = *(void *)((char *)&v69 + 7);
        *(unsigned char *)(v23 + 23) = v21;
        if (SBYTE7(v73) < 0) {
          operator delete((void *)v72);
        }
        long long v73 = 0u;
        long long v74 = 0u;
        long long v72 = 0u;
        LODWORD(v69) = v14;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(&v72, &v69);
        *((void *)__p + (v14 >> 6)) |= 1 << v14;
        uint64_t v24 = *((void *)&v74 + 1);
        if (*((void *)&v74 + 1))
        {
          int v25 = *(_DWORD *)(*a5 + 4 * v14);
          do
          {
            unsigned int v26 = *(_DWORD *)(*(void *)(*((void *)&v72 + 1) + (((unint64_t)v74 >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v74 & 0x3FF));
            LODWORD(v69) = v26;
            *(void *)&long long v74 = v74 + 1;
            *((void *)&v74 + 1) = v24 - 1;
            if ((unint64_t)v74 >= 0x800)
            {
              operator delete(**((void ***)&v72 + 1));
              *((void *)&v72 + 1) += 8;
              *(void *)&long long v74 = v74 - 1024;
              unsigned int v26 = v69;
            }
            *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v67, v26) = v18;
            unsigned int v27 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v69);
            unsigned int v65 = v27;
            do
            {
              unsigned int v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65) + 8);
              uint64_t v28 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65);
              uint64_t v29 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v28);
              if ((*v29 & v30) == 0)
              {
                uint64_t v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65);
                unsigned int v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v31) + 16);
                if (((*(void *)((char *)__p + (((unint64_t)v64 >> 3) & 0x1FFFFFF8)) >> v64) & 1) == 0
                  && *(_DWORD *)(*a5 + 4 * v64) == v25)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(&v72, &v64);
                  *(void *)((char *)__p + (((unint64_t)v64 >> 3) & 0x1FFFFFF8)) |= 1 << v64;
                }
              }
            }
            while (v65 != v27);
            uint64_t v24 = *((void *)&v74 + 1);
          }
          while (*((void *)&v74 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](&v72);
        unint64_t v13 = (v58 >> 2);
        float v15 = (uint64_t *)(a1 + 80);
      }
      ++v14;
    }
    while (v14 != v13);
  }
  *(void *)&long long v72 = &unk_2700D8AC0;
  *((void *)&v72 + 1) = a5;
  *((void *)&v73 + 1) = &v72;
  cv3d::cv::gess::alg::SortFaceByGroupID(a1, (uint64_t)&v72);
  std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](&v72);
  uint64_t v32 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    long long v35 = xmmword_24F5787AC;
    long long v36 = unk_24F5787BC;
    do
    {
      uint64_t v37 = 0;
      float32x4_t v38 = *(float32x4_t *)(*a4 + 16 * v33);
      uint64_t v39 = v32 + 36 * v33;
      float32x4_t v40 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), (int32x4_t)v38);
      int32x4_t v41 = (int32x4_t)vmulq_f32(v38, (float32x4_t)xmmword_24F5715A0);
      float32x4_t v42 = vmulq_f32(v38, (float32x4_t)xmmword_24F5715B0);
      v42.i32[3] = 0;
      float32x4_t v63 = v42;
      float32x4_t v43 = vmlsq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v41, (int32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL)), v41), (float32x4_t)xmmword_24F5715A0, v40);
      float32x4_t v44 = vmulq_f32(v43, v43);
      v44.i32[3] = 0;
      LODWORD(v69) = 0;
      DWORD1(v69) = v43.i32[2];
      LODWORD(v70) = 0;
      *((float *)&v70 + 3) = -v43.f32[0];
      *((float32x2_t *)&v69 + 1) = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
      float v45 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44));
      *(void *)((char *)&v70 + 4) = v43.i64[0];
      int v71 = 0;
      *(_OWORD *)uint64_t v39 = xmmword_24F570A10;
      *(_OWORD *)(v39 + 16) = xmmword_24F570A10;
      *(_DWORD *)(v39 + 32) = 1065353216;
      long long v72 = v35;
      long long v73 = v36;
      LODWORD(v74) = 1065353216;
      do
      {
        *(float *)((char *)&v72 + v37) = *(float *)(v32 + 36 * v34 + v37) + *(float *)((char *)&v69 + v37);
        v37 += 4;
      }
      while (v37 != 36);
      *(_OWORD *)uint64_t v39 = v72;
      *(_OWORD *)(v39 + 16) = v73;
      *(_DWORD *)(v39 + 32) = v74;
      cv3d::cv::gess::math::Matrix3T<float>::operator*((float *)&v69, (uint64_t)&v69, (uint64_t)&v72);
      float v46 = sqrtf(v45);
      long long v69 = v72;
      long long v70 = v73;
      int v71 = v74;
      long long v36 = unk_24F5787BC;
      long long v35 = xmmword_24F5787AC;
      if (fabsf(v46) > 0.00000001)
      {
        uint64_t v47 = 0;
        LODWORD(v74) = 1065353216;
        float v48 = (1.0 - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63))) / (float)(v46 * v46);
        long long v72 = xmmword_24F5787AC;
        long long v73 = unk_24F5787BC;
        do
        {
          *(float *)((char *)&v72 + v47) = *(float *)((char *)&v69 + v47) * v48;
          v47 += 4;
        }
        while (v47 != 36);
        long long v69 = v72;
        long long v70 = v73;
        int v71 = v74;
      }
      uint64_t v49 = 0;
      LODWORD(v74) = 1065353216;
      long long v72 = xmmword_24F5787AC;
      long long v73 = unk_24F5787BC;
      do
      {
        *(float *)((char *)&v72 + v49) = *(float *)(v32 + 36 * v34 + v49) + *(float *)((char *)&v69 + v49);
        v49 += 4;
      }
      while (v49 != 36);
      *(_OWORD *)uint64_t v39 = v72;
      *(_OWORD *)(v39 + 16) = v73;
      *(_DWORD *)(v39 + 32) = v74;
      uint64_t v32 = *a3;
      uint64_t v33 = ++v34;
    }
    while (0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 2) > v34);
  }
  unsigned int v65 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  DWORD2(v69) = 0;
  *(void *)&long long v69 = 0;
  unsigned int v50 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v59, (uint64_t)&v69, (unsigned __int8 *)&v72);
  unsigned int v65 = v50;
  if (SBYTE7(v73) < 0) {
    operator delete((void *)v72);
  }
  if (v50 != -1)
  {
    if (v65 != -1) {
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v59, &v65);
    }
    unsigned int v65 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, &v65, &v72);
  if (SBYTE7(v73) < 0) {
    operator delete((void *)v72);
  }
  std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(void *)&long long v69 = 0;
  int v51 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v69, (unsigned __int8 *)&v72);
  if (SBYTE7(v73) < 0) {
    operator delete((void *)v72);
  }
  if (v51 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v72, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    *(void *)&long long v69 = 0;
    cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (uint64_t)&v69, &v72);
    if (SBYTE7(v73) < 0) {
      operator delete((void *)v72);
    }
  }
  else
  {
    LODWORD(v72) = v51;
    uint64_t v52 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v72);
    (*(void (**)(uint64_t))(*(void *)v52 + 40))(v52);
  }
  LODWORD(v72) = v68;
  uint64_t v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v72);
  std::vector<unsigned int>::size_type v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 16))(v53);
  std::vector<int>::resize(v60, v54);
  if ((v58 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v55 = 0;
    int v56 = 0;
    do
    {
      if (v56 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v67, v55)) {
        v60->__begin_[v56++] = v55;
      }
      ++v55;
    }
    while ((v58 >> 2) != v55);
  }
  if (__p) {
    operator delete(__p);
  }
  return 1;
}

void sub_24F4E896C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (*(char *)(v29 - 153) < 0) {
    operator delete(*(void **)(v29 - 176));
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v7 = a2;
  uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), &v7);
  uint64_t v5 = *(void *)(v4 + 40);
  if (a3 >= (unint64_t)((*(void *)(v4 + 48) - v5) >> 2)) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  return v5 + 4 * a3;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;

  unsigned int v7 = a2;
  uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), &v7);
  uint64_t v5 = *(void *)(v4 + 40);
  if (a3 >= (unint64_t)((*(void *)(v4 + 48) - v5) >> 2)) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  return v5 + 4 * a3;
}

BOOL cv3d::cv::gess::internal::PerformPacking(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a2 + 12);
  switch(v4)
  {
    case 2:
      v6[0] = *(unsigned __int8 *)(a2 + 8);
      cv3d::cv::gess::internal::XAtlasPacking(a1, (_DWORD *)(a2 + 4), v6, (float *)(a2 + 16), 0, 0);
      break;
    case 1:
      cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(v6, a1, a3, a2 + 4, a2 + 8, a2 + 16, 1, 0);
      cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)v6);
      cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)v6);
      break;
    case 0:
      cv3d::cv::gess::binpack::Binpack::Binpack((cv3d::cv::gess::binpack::Binpack *)v6, (cv3d::cv::gess::mesh::TriMesh *)a1, (const unsigned int *)(a2 + 4), (const unsigned __int8 *)(a2 + 8));
      cv3d::cv::gess::binpack::Binpack::BinpackTexture((cv3d::cv::gess::binpack::Binpack *)v6);
      if (__p)
      {
        uint64_t v8 = __p;
        operator delete(__p);
      }
      break;
  }
  return *(_DWORD *)(a3 + 76) != 2;
}

void sub_24F4E8C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::BlenderUV2Parameterize(uint64_t a1, float *a2, uint64_t a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  char v103 = 0;
  int v8 = cv3d::cv::gess::alg::RepairDegeneratedTriangles((float32x4_t *)a1, (cv3d::cv::gess::mesh::TriMesh *)1, 0.001, &v103, v7);
  memset(&v102, 0, sizeof(v102));
  unsigned int v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  unsigned int v98 = 0;
  cv3d::cv::gess::internal::CalculateFaceLabels(a1, a2, &v102, &v99, &v98);
  memset(&v97, 0, sizeof(v97));
  std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(v96, v98);
  cv3d::cv::gess::internal::SeperateChartGroups(a1, v9, (uint64_t *)v96, &v99, &v102, &v97);
  int v10 = -1;
  int v95 = -1;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v72 = rep;
  if (!v8) {
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v11 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v95, (unsigned __int8 *)__p);
  BOOL v12 = v11;
  if (SBYTE7(v92) < 0)
  {
    operator delete(__p[0]);
    if (v12) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }
  if (!v11)
  {
LABEL_13:
    int v8 = 0;
LABEL_14:
    int v14 = -1;
    int v74 = -1;
    goto LABEL_15;
  }
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v89) = 0;
  int v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v89, (unsigned __int8 *)__p);
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  if (v13 == -1)
  {
    int v8 = 0;
    int v14 = -1;
    int v74 = -1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v90) = 0;
    uint64_t v89 = 0;
    int v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v89, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    int v74 = v13;
    if (v14 == -1)
    {
      int v8 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
      uint64_t v89 = 0;
      int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v89, (unsigned __int8 *)__p);
      int v8 = v10 != -1;
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
    }
  }
LABEL_15:
  LODWORD(__p[0]) = v10;
  uint64_t v75 = (uint64_t *)(a1 + 80);
  float v15 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p);
  uint64_t v73 = (uint64_t)a2;
  v94[0] = v95;
  v94[1] = v74;
  v94[2] = v14;
  v94[3] = v10;
  *(_OWORD *)std::vector<unsigned int> __p = 0u;
  long long v92 = 0u;
  int v93 = 1065353216;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v89, 3uLL);
  unsigned int v86 = 0;
  unsigned int v87 = 0;
  uint64_t v88 = 0;
  begiuint64_t n = v97.__begin_;
  std::vector<unsigned int>::pointer end = v97.__end_;
  LODWORD(v84.__begin_) = v95;
  uint64_t v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v84);
  if (end - begin != (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
    __assert_rtn("BlenderUV2Parameterize", "BlenderUV2.cpp", 441, "g_starts.size() == mesh.attribute(m_chart_g_ah).Size()");
  }
  std::vector<unsigned int>::pointer v19 = v97.__begin_;
  if (v97.__end_ != v97.__begin_)
  {
    int v71 = v8;
    unint64_t v20 = 0;
    unsigned int v21 = 0;
    char v77 = 0;
    unint64_t v22 = v97.__end_ - v97.__begin_;
    unsigned int v78 = v14;
    do
    {
      unsigned int v85 = 0;
      uint64_t v23 = v19[v20];
      unsigned int v85 = v19[v20];
      unsigned int v76 = v21;
      if (v21 >= (int)v22 - 1) {
        uint64_t v24 = (*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
      }
      else {
        LODWORD(v24) = v19[v21 + 1];
      }
      if (v23 < v24)
      {
        unsigned int v25 = v102.__begin_[v23];
        unsigned int v79 = v25;
        do
        {
          if (v102.__begin_[v23] != v25) {
            __assert_rtn("BlenderUV2Parameterize", "BlenderUV2.cpp", 447, "face_labels[i] == label");
          }
          unsigned int v26 = (char *)v96[0];
          std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v84, 3uLL);
          LODWORD(v80.__begin_) = v23;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v80, &v84);
          uint64_t v27 = 0;
          int v83 = 0;
          uint64_t v28 = (float *)&v26[36 * v25];
          uint64_t v82 = 0;
          do
          {
            LODWORD(v80.__begin_) = v84.__begin_[v27];
            if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)&v80))
            {
              LODWORD(v80.__begin_) = v84.__begin_[v27];
              uint64_t v29 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)&v80);
              if (!v29) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              *((_DWORD *)&v82 + v27) = *((_DWORD *)v29 + 5);
            }
            else
            {
              (*(void (**)(void *))(*v15 + 48))(v15);
              int v30 = (*(uint64_t (**)(void *))(*v15 + 16))(v15);
              LODWORD(v81) = v84.__begin_[v27];
              v80.__begin_ = (std::vector<unsigned int>::pointer)&v81;
              unint64_t v31 = (v30 - 1);
              *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)__p, (unsigned int *)&v81, (uint64_t)&std::piecewise_construct, &v80.__begin_)+ 5) = v31;
              *((_DWORD *)&v82 + v27) = v31;
              uint64_t v32 = (long long *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v84.__begin_[v27]);
              uint64_t v33 = 0;
              long long v81 = *v32;
              v80.__begin_ = 0;
              v80.__end_ = 0;
              unsigned int v34 = v28;
              do
              {
                uint64_t v35 = 0;
                float v36 = 0.0;
                uint64_t v37 = v34;
                do
                {
                  float v38 = *v37;
                  v37 += 3;
                  float v36 = v36 + (float)(v38 * *(float *)((char *)&v81 + v35));
                  v35 += 4;
                }
                while (v35 != 12);
                *((float *)&v80.__begin_ + v33++) = v36;
                ++v34;
              }
              while (v33 != 3);
              uint64_t v39 = v15[5];
              if (v31 >= (v15[6] - v39) >> 3) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(void *)(v39 + 8 * v31) = v80.__begin_;
            }
            ++v27;
          }
          while (v27 != 3);
          uint64_t v40 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v78, v23);
          *(void *)uint64_t v40 = v82;
          *(_DWORD *)(v40 + 8) = v83;
          unsigned int v25 = v79;
          if (v84.__begin_)
          {
            v84.__end_ = v84.__begin_;
            operator delete(v84.__begin_);
          }
          LODWORD(v23) = v23 + 1;
        }
        while (v23 != v24);
        LODWORD(v23) = v85;
      }
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v86, (v24 - v23));
      unsigned int v41 = v85;
      if (v85 < v24)
      {
        do
        {
          *((_DWORD *)v86 + v41 - v85) = v41;
          ++v41;
        }
        while (v24 != v41);
      }
      int v43 = cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(a1, (uint64_t *)&v86, v94);
      if (v43)
      {
        LODWORD(v84.__begin_) = v24 - 1;
        cv3d::cv::gess::alg::SortFaceByGroupID32Bit((cv3d::cv::gess::alg *)a1, (cv3d::cv::gess::mesh::TriMesh *)&v85, (const unsigned int *)&v84, v42);
      }
      v77 |= v43;
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(__p);
      unint64_t v20 = v76 + 1;
      std::vector<unsigned int>::pointer v19 = v97.__begin_;
      unint64_t v22 = v97.__end_ - v97.__begin_;
      unsigned int v21 = v76 + 1;
    }
    while (v22 > v20);
    if (v77)
    {
      LODWORD(v84.__begin_) = v94[0];
      uint64_t v44 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v75, (unsigned int *)&v84);
      std::vector<unsigned int>::size_type v45 = (*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44);
      std::vector<unsigned int>::vector(&v84, v45);
      if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
      {
        unint64_t v46 = 0;
        int v47 = 0;
        unsigned int v48 = -1;
        unsigned int v49 = 1;
        do
        {
          LODWORD(v80.__begin_) = v74;
          uint64_t v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v80);
          uint64_t v51 = *(void *)(v50 + 40);
          if (v46 >= (*(void *)(v50 + 48) - v51) >> 2) {
LABEL_91:
          }
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          if (v48 != *(_DWORD *)(v51 + 4 * v46))
          {
            LODWORD(v80.__begin_) = v74;
            uint64_t v52 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v80);
            uint64_t v53 = *(void *)(v52 + 40);
            if (v46 >= (*(void *)(v52 + 48) - v53) >> 2) {
              goto LABEL_91;
            }
            unsigned int v48 = *(_DWORD *)(v53 + 4 * v46);
            v84.__begin_[v47++] = v48;
          }
          unint64_t v46 = v49++;
        }
        while (v46 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
      }
      std::vector<unsigned int>::vector(&v80, v45);
      if (v45)
      {
        uint64_t v54 = 0;
        std::vector<unsigned int>::pointer v55 = v84.__begin_;
        std::vector<unsigned int>::pointer v56 = v80.__begin_;
        do
        {
          v56[v55[v54]] = v54;
          ++v54;
        }
        while (v45 != v54);
      }
      int v8 = v71;
      if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
      {
        unint64_t v57 = 0;
        unsigned int v58 = 1;
        do
        {
          LODWORD(v81) = v74;
          uint64_t v59 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v81);
          uint64_t v60 = *(void *)(v59 + 40);
          if (v57 >= (*(void *)(v59 + 48) - v60) >> 2) {
LABEL_92:
          }
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          uint64_t v61 = *(unsigned int *)(v60 + 4 * v57);
          unsigned int v62 = v80.__begin_[v61];
          if (v62 != v61)
          {
            LODWORD(v81) = v74;
            uint64_t v63 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v81);
            uint64_t v64 = *(void *)(v63 + 40);
            if (v57 >= (*(void *)(v63 + 48) - v64) >> 2) {
              goto LABEL_92;
            }
            *(_DWORD *)(v64 + 4 * v57) = v62;
          }
          unint64_t v57 = v58++;
        }
        while (v57 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
      }
      if (v80.__begin_)
      {
        v80.__end_ = v80.__begin_;
        operator delete(v80.__begin_);
      }
      if (v84.__begin_)
      {
        v84.__end_ = v84.__begin_;
        operator delete(v84.__begin_);
      }
    }
  }
  v65.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(unsigned char *)(a3 + 80))
  {
    *(double *)a3 = (double)(v65.__d_.__rep_ - v72) / 1000000.0;
    LODWORD(v84.__begin_) = v95;
    uint64_t v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v75, (unsigned int *)&v84);
    *(void *)(a3 + 40) = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 16))(v66);
  }
  v67.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v8) {
    BOOL v68 = cv3d::cv::gess::internal::PerformPacking((uint64_t **)a1, v73, a3);
  }
  else {
    BOOL v68 = 0;
  }
  v69.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(unsigned char *)(a3 + 80))
  {
    *(double *)(a3 + 48) = (double)(v69.__d_.__rep_ - v67.__d_.__rep_) / 1000000.0;
    *(void *)(a3 + 56) = *(unsigned __int8 *)(v73 + 8);
  }
  if (v86)
  {
    unsigned int v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    unsigned int v90 = v89;
    operator delete(v89);
  }
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  if (v97.__begin_)
  {
    v97.__end_ = v97.__begin_;
    operator delete(v97.__begin_);
  }
  if (v99)
  {
    uint64_t v100 = v99;
    operator delete(v99);
  }
  if (v102.__begin_)
  {
    v102.__end_ = v102.__begin_;
    operator delete(v102.__begin_);
  }
  return v68;
}

void sub_24F4E95C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  uint64_t v44 = *(void **)(v42 - 200);
  if (v44)
  {
    *(void *)(v42 - 192) = v44;
    operator delete(v44);
  }
  std::vector<unsigned int>::size_type v45 = *(void **)(v42 - 176);
  if (v45)
  {
    *(void *)(v42 - 168) = v45;
    operator delete(v45);
  }
  unint64_t v46 = *(void **)(v42 - 144);
  if (v46)
  {
    *(void *)(v42 - 136) = v46;
    operator delete(v46);
  }
  int v47 = *(void **)(v42 - 120);
  if (v47)
  {
    *(void *)(v42 - 112) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  unsigned int v19 = -1;
  unsigned int v20 = -1;
  uint64_t v6 = cv3d::cv::gess::internal::CheckSelfIntersect(a1, (uint64_t)a2, a3, &v20, &v19);
  if (v6)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::vector<unsigned int> __p = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    cv3d::cv::gess::internal::BipartitionChart(a1, a2, (uint64_t)a3, &v20, &v19, (char **)&v16, (char **)&__p);
    unsigned int v7 = v16;
    int v8 = v17;
    if (v16 == v17 || (uint64_t v9 = __p, __p == v14)) {
      __assert_rtn("CheckAndRepairSelfIntersectionForOneChart", "BlenderUV2.cpp", 982, "!sub_chart_group0.empty() && !sub_chart_group1.empty()");
    }
    if (v17 - (unsigned char *)v16 < (unint64_t)(v14 - (unsigned char *)__p))
    {
      uint64_t v16 = __p;
      uint64_t v17 = v14;
      std::vector<unsigned int> __p = v7;
      int v14 = v8;
      uint64_t v10 = v18;
      uint64_t v18 = v15;
      uint64_t v15 = v10;
      unsigned int v7 = v9;
    }
    int v12 = *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, a3[1], *v7);
    cv3d::cv::gess::internal::AssignChartToNewGroup(a1, &__p, a3, &v12);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(a1, &v16, a3);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(a1, &__p, a3);
    if (__p)
    {
      int v14 = __p;
      operator delete(__p);
    }
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
  }
  return v6;
}

void sub_24F4E98DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::ChartBoundaryEdge::Intersects(float *a1, float *a2)
{
  uint64_t v4 = 0x3F50624DD2F1A9FCLL;
  uint64_t v3 = 0x3EB0C6F7A0B5ED8DLL;
  return cv3d::cv::gess::alg::Edge2DIntersects(a1, a1 + 2, a2, a2 + 2, (double *)&v4, (double *)&v3) != 3;
}

uint64_t cv3d::cv::gess::internal::ContainUVID(_DWORD *a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == *a1)
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    int v5 = v2 == a1[1] || v2 == a1[2];
    int v3 = v5 << 31 >> 31;
  }
  return v3 & 1;
}

uint64_t cv3d::cv::gess::internal::CheckNonManifoldOverlapping(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4, int *a5, uint64_t a6)
{
  uint64_t v8 = a1 + 104;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v196, a1 + 104, a2);
  unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v196);
  unsigned int v195 = HEdge;
  uint64_t v192 = 0;
  v193 = 0;
  uint64_t v194 = 0;
  std::vector<unsigned int> __p = 0;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  if (HEdge != -1)
  {
    while (1)
    {
      uint64_t v10 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
      if ((*v10 & v11) != 0) {
        break;
      }
      unsigned int v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v195);
      unsigned int v20 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v19);
      int v21 = *a5;
      if ((*v20 & v22) != 0)
      {
        LODWORD(v186) = a4[1];
        uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v186);
        unint64_t v24 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, &v195) + 16);
        uint64_t v25 = *(void *)(v23 + 40);
        if (v24 >= (*(void *)(v23 + 48) - v25) >> 2) {
          goto LABEL_185;
        }
        if (v21 != *(_DWORD *)(v25 + 4 * v24)) {
          goto LABEL_84;
        }
        unsigned int v26 = v193;
        if (v193 >= v194)
        {
          uint64_t v51 = (v193 - (unsigned char *)v192) >> 2;
          if ((unint64_t)(v51 + 1) >> 62) {
            goto LABEL_196;
          }
          unint64_t v52 = (v194 - (unsigned char *)v192) >> 1;
          if (v52 <= v51 + 1) {
            unint64_t v52 = v51 + 1;
          }
          if ((unint64_t)(v194 - (unsigned char *)v192) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53) {
            uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v194, v53);
          }
          else {
            uint64_t v54 = 0;
          }
          uint64_t v59 = &v54[4 * v51];
          *(_DWORD *)uint64_t v59 = v195;
          uint64_t v27 = v59 + 4;
          uint64_t v61 = (char *)v192;
          uint64_t v60 = v193;
          if (v193 != v192)
          {
            do
            {
              int v62 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v59 - 1) = v62;
              v59 -= 4;
            }
            while (v60 != v61);
            uint64_t v60 = (char *)v192;
          }
          uint64_t v192 = v59;
          v193 = v27;
          uint64_t v194 = &v54[4 * v53];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(_DWORD *)v193 = v195;
          uint64_t v27 = v26 + 4;
        }
        goto LABEL_83;
      }
      LODWORD(v186) = a4[1];
      uint64_t v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v186);
      unint64_t v33 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, &v195) + 16);
      uint64_t v34 = *(void *)(v32 + 40);
      if (v33 >= (*(void *)(v32 + 48) - v34) >> 2) {
        goto LABEL_185;
      }
      if (v21 != *(_DWORD *)(v34 + 4 * v33))
      {
        int v35 = *a5;
        LODWORD(v186) = a4[1];
        uint64_t v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v186);
        uint64_t v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v195);
        unint64_t v38 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v37) + 16);
        uint64_t v39 = *(void *)(v36 + 40);
        if (v38 >= (*(void *)(v36 + 48) - v39) >> 2) {
          goto LABEL_185;
        }
        if (v35 == *(_DWORD *)(v39 + 4 * v38))
        {
          uint64_t v40 = v193;
          if (v193 >= v194)
          {
            uint64_t v63 = (v193 - (unsigned char *)v192) >> 2;
            if ((unint64_t)(v63 + 1) >> 62) {
              goto LABEL_196;
            }
            unint64_t v64 = (v194 - (unsigned char *)v192) >> 1;
            if (v64 <= v63 + 1) {
              unint64_t v64 = v63 + 1;
            }
            if ((unint64_t)(v194 - (unsigned char *)v192) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65) {
              uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v194, v65);
            }
            else {
              uint64_t v66 = 0;
            }
            int v71 = &v66[4 * v63];
            *(_DWORD *)int v71 = v195;
            uint64_t v18 = v71 + 4;
            uint64_t v73 = (char *)v192;
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v72 = v193;
            if (v193 != v192)
            {
              do
              {
                int v74 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v71 - 1) = v74;
                v71 -= 4;
              }
              while (v72 != v73);
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v72 = (char *)v192;
            }
            uint64_t v192 = v71;
            v193 = v18;
            uint64_t v194 = &v66[4 * v65];
            if (v72) {
              operator delete(v72);
            }
          }
          else
          {
            *(_DWORD *)v193 = v195;
            uint64_t v18 = v40 + 4;
          }
LABEL_46:
          v193 = v18;
          LOBYTE(v186) = 0;
          std::vector<BOOL>::push_back((uint64_t)&__p, &v186);
          goto LABEL_84;
        }
      }
      int v41 = *a5;
      LODWORD(v186) = a4[1];
      uint64_t v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v186);
      unint64_t v43 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, &v195) + 16);
      uint64_t v44 = *(void *)(v42 + 40);
      if (v43 >= (*(void *)(v42 + 48) - v44) >> 2) {
        goto LABEL_185;
      }
      if (v41 == *(_DWORD *)(v44 + 4 * v43))
      {
        int v45 = *a5;
        LODWORD(v186) = a4[1];
        uint64_t v46 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v186);
        int v47 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v195);
        unint64_t v48 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v47) + 16);
        uint64_t v49 = *(void *)(v46 + 40);
        if (v48 >= (*(void *)(v46 + 48) - v49) >> 2)
        {
LABEL_185:
          int v176 = 187;
          unint64_t v177 = "index < data_.size()";
          float32x4_t v178 = "Attribute.h";
          uint64_t v179 = "operator[]";
          goto LABEL_186;
        }
        if (v45 != *(_DWORD *)(v49 + 4 * v48))
        {
          uint64_t v50 = v193;
          if (v193 >= v194)
          {
            uint64_t v67 = (v193 - (unsigned char *)v192) >> 2;
            if ((unint64_t)(v67 + 1) >> 62) {
LABEL_196:
            }
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            unint64_t v68 = (v194 - (unsigned char *)v192) >> 1;
            if (v68 <= v67 + 1) {
              unint64_t v68 = v67 + 1;
            }
            if ((unint64_t)(v194 - (unsigned char *)v192) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v68;
            }
            if (v69) {
              long long v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v194, v69);
            }
            else {
              long long v70 = 0;
            }
            uint64_t v75 = &v70[4 * v67];
            *(_DWORD *)uint64_t v75 = v195;
            uint64_t v27 = v75 + 4;
            char v77 = (char *)v192;
            unsigned int v76 = v193;
            if (v193 != v192)
            {
              do
              {
                int v78 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v75 - 1) = v78;
                v75 -= 4;
              }
              while (v76 != v77);
              unsigned int v76 = (char *)v192;
            }
            uint64_t v192 = v75;
            v193 = v27;
            uint64_t v194 = &v70[4 * v69];
            if (v76) {
              operator delete(v76);
            }
          }
          else
          {
            *(_DWORD *)v193 = v195;
            uint64_t v27 = v50 + 4;
          }
LABEL_83:
          v193 = v27;
          LOBYTE(v186) = 1;
          std::vector<BOOL>::push_back((uint64_t)&__p, &v186);
        }
      }
LABEL_84:
      unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v196);
      unsigned int v195 = HEdge;
      if (HEdge == -1)
      {
        unsigned int v79 = (char *)v192;
        std::vector<unsigned int> v80 = v193;
        uint64_t v81 = v190;
        goto LABEL_87;
      }
    }
    int v12 = *a5;
    LODWORD(v186) = a4[1];
    uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v186);
    int v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v195);
    unint64_t v15 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v14) + 16);
    uint64_t v16 = *(void *)(v13 + 40);
    if (v15 >= (*(void *)(v13 + 48) - v16) >> 2) {
      goto LABEL_185;
    }
    if (v12 != *(_DWORD *)(v16 + 4 * v15)) {
      goto LABEL_84;
    }
    uint64_t v17 = v193;
    if (v193 >= v194)
    {
      uint64_t v28 = (v193 - (unsigned char *)v192) >> 2;
      if ((unint64_t)(v28 + 1) >> 62) {
        goto LABEL_196;
      }
      unint64_t v29 = (v194 - (unsigned char *)v192) >> 1;
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      if ((unint64_t)(v194 - (unsigned char *)v192) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30) {
        unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v194, v30);
      }
      else {
        unint64_t v31 = 0;
      }
      std::vector<unsigned int>::pointer v55 = &v31[4 * v28];
      *(_DWORD *)std::vector<unsigned int>::pointer v55 = v195;
      uint64_t v18 = v55 + 4;
      unint64_t v57 = (char *)v192;
      std::vector<unsigned int>::pointer v56 = v193;
      if (v193 != v192)
      {
        do
        {
          int v58 = *((_DWORD *)v56 - 1);
          v56 -= 4;
          *((_DWORD *)v55 - 1) = v58;
          v55 -= 4;
        }
        while (v56 != v57);
        std::vector<unsigned int>::pointer v56 = (char *)v192;
      }
      uint64_t v192 = v55;
      v193 = v18;
      uint64_t v194 = &v31[4 * v30];
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      *(_DWORD *)v193 = v195;
      uint64_t v18 = v17 + 4;
    }
    goto LABEL_46;
  }
  uint64_t v81 = 0;
  unsigned int v79 = 0;
  std::vector<unsigned int> v80 = 0;
LABEL_87:
  uint64_t v82 = v80 - v79;
  if (v81 != v82 >> 2)
  {
    unint64_t v177 = "chart_boundary_edges.size() == edges_in_chart.size()";
    int v176 = 589;
LABEL_191:
    float32x4_t v178 = "BlenderUV2.cpp";
    uint64_t v179 = "CheckNonManifoldOverlapping";
LABEL_186:
    __assert_rtn(v179, v178, v176, v177);
  }
  if ((v82 & 4) != 0)
  {
    unint64_t v177 = "chart_boundary_edges.size() % 2 == 0";
    int v176 = 590;
    goto LABEL_191;
  }
  int v83 = __p;
  if (v82 == 8)
  {
    uint64_t v84 = 0;
    if (!__p) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  uint64_t v188 = 0;
  BOOL v86 = (*(unsigned char *)__p & 1) == 0;
  if (v193 == v79)
  {
    uint64_t v109 = 0;
    int v110 = 0;
  }
  else
  {
    LODWORD(v87) = 0;
    unint64_t v88 = (v193 - v79) >> 2;
    do
    {
      LODWORD(v183) = *(_DWORD *)&v79[4 * (v87 | v86)];
      HIDWORD(v183) = *(_DWORD *)&v79[4 * (((v87 | v86) + 1) % v88)];
      v197[0] = a4[2];
      uint64_t v89 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v197);
      unint64_t v90 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v183) + 16);
      uint64_t v91 = *(void *)(v89 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v89 + 48) - v91) >> 2) <= v90) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      v197[0] = a4[2];
      uint64_t v92 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v197);
      int v93 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v183 + 1);
      unint64_t v94 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v93) + 16);
      uint64_t v95 = *(void *)(v92 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v92 + 48) - v95) >> 2) <= v94) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      float v96 = (_DWORD *)(v91 + 12 * v90);
      int v97 = *a3;
      if (*a3 == *v96 || v97 == v96[1] || v97 == v96[2])
      {
        unsigned int v98 = (_DWORD *)(v95 + 12 * v94);
        if (v97 == *v98 || v97 == v98[1] || v97 == v98[2])
        {
          unsigned int v99 = v187;
          if (v187 >= v188)
          {
            uint64_t v101 = v187 - v186;
            if ((unint64_t)(v101 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v102 = ((char *)v188 - (char *)v186) >> 2;
            if (v102 <= v101 + 1) {
              unint64_t v102 = v101 + 1;
            }
            if ((unint64_t)((char *)v188 - (char *)v186) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v103 = v102;
            }
            if (v103) {
              float32x4_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v188, v103);
            }
            else {
              float32x4_t v104 = 0;
            }
            float v105 = (void **)&v104[8 * v101];
            *float v105 = v183;
            uint64_t v100 = v105 + 1;
            std::vector<unsigned int>::pointer v107 = v186;
            float v106 = v187;
            if (v187 != v186)
            {
              do
              {
                __int8 v108 = *--v106;
                *--float v105 = v108;
              }
              while (v106 != v107);
              float v106 = v186;
            }
            uint64_t v186 = v105;
            uint64_t v187 = v100;
            uint64_t v188 = (void **)&v104[8 * v103];
            if (v106) {
              operator delete(v106);
            }
          }
          else
          {
            *uint64_t v187 = v183;
            uint64_t v100 = v99 + 1;
          }
          uint64_t v187 = v100;
        }
      }
      unint64_t v87 = (v87 + 2);
      unsigned int v79 = (char *)v192;
      unint64_t v88 = (v193 - (unsigned char *)v192) >> 2;
    }
    while (v88 > v87);
    uint64_t v109 = v186;
    int v110 = v187;
  }
  if ((unint64_t)((char *)v110 - (char *)v109) < 0x10)
  {
    uint64_t v84 = 0;
    if (!v109) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  uint64_t v183 = 0;
  float32x4_t v184 = 0;
  float32x4_t v185 = 0;
  if (v187 == v109)
  {
    unsigned int v165 = 0;
    char v155 = 0;
LABEL_171:
    unint64_t v166 = ((char *)v155 - v165) >> 3;
    if (v166 == 1)
    {
LABEL_179:
      uint64_t v84 = 0;
    }
    else
    {
      unint64_t v167 = 0;
      int v168 = 0;
      int v169 = 2;
      while (1)
      {
        unint64_t v170 = v167;
        unint64_t v167 = (v168 + 1);
        if (v166 > v167) {
          break;
        }
LABEL_178:
        ++v169;
        int v168 = v167;
        if (v166 - 1 <= v167) {
          goto LABEL_179;
        }
      }
      std::vector<unsigned int> v171 = (float *)&v165[8 * v170];
      unsigned int v172 = v169;
      unint64_t v173 = v167;
      while (1)
      {
        float32x4_t v174 = (float *)&v165[8 * v173];
        if (v171[1] >= (float)(*v174 + -0.000001) && *v171 <= (float)(v174[1] + 0.000001)) {
          break;
        }
        unint64_t v173 = v172;
        if (v166 <= v172++) {
          goto LABEL_178;
        }
      }
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize(a6, 2uLL);
      **(_DWORD **)a6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v186[v170]) + 16);
      *(_DWORD *)(*(void *)a6 + 4) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v186[v173])
                                                   + 16);
      uint64_t v84 = 1;
    }
  }
  else
  {
    uint64_t v111 = 0;
    unsigned int v112 = 0;
    uint64_t v113 = (uint64_t *)(a1 + 56);
    uint64_t v114 = (uint64_t *)(a1 + 80);
    while (1)
    {
      v197[0] = a4[2];
      uint64_t v115 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v113, v197);
      unint64_t v116 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v186[v111]) + 16);
      uint64_t v117 = *(void *)(v115 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v115 + 48) - v117) >> 2) <= v116) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      v197[0] = a4[2];
      uint64_t v118 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v113, v197);
      unsigned int v119 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v186[v111] + 1);
      unint64_t v120 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v119) + 16);
      uint64_t v121 = *(void *)(v118 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v118 + 48) - v121) >> 2) <= v120) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      uint64_t v122 = 0;
      uint64_t v123 = v117 + 12 * v116;
      int v124 = *a3;
      uint64_t v125 = v121 + 12 * v120;
      while (*(_DWORD *)(v123 + 4 * v122) != v124)
      {
        if (++v122 == 3)
        {
          unint64_t v126 = 99;
          goto LABEL_139;
        }
      }
      unint64_t v126 = *(unsigned int *)(v123 + 4 * ((v122 + 1) % 3u));
LABEL_139:
      uint64_t v127 = 0;
      while (*(_DWORD *)(v125 + 4 * v127) != v124)
      {
        if (++v127 == 3) {
          goto LABEL_179;
        }
      }
      uint64_t v84 = 0;
      if (v126 == 99) {
        break;
      }
      unint64_t v128 = *(unsigned int *)(v125 + 4 * ((v127 + 2) % 3u));
      if (v128 == 99) {
        break;
      }
      v197[0] = a4[3];
      uint64_t v129 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v114, v197);
      uint64_t v130 = *(void *)(v129 + 40);
      if (v126 >= (*(void *)(v129 + 48) - v130) >> 3
        || (v197[0] = a4[3],
            uint64_t v131 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v114, v197), v132 = *a3, v133 = *(void *)(v131 + 40), v132 >= (*(void *)(v131 + 48) - v133) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      unint64_t v134 = (float *)(v130 + 8 * v126);
      float v135 = (float *)(v133 + 8 * v132);
      float v136 = *v134;
      float v137 = v134[1];
      float v139 = *v135;
      float v138 = v135[1];
      v197[0] = a4[3];
      uint64_t v140 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v114, v197);
      uint64_t v141 = *(void *)(v140 + 40);
      if (v128 >= (*(void *)(v140 + 48) - v141) >> 3
        || (v197[0] = a4[3],
            uint64_t v142 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v114, v197), v143 = *a3, v144 = *(void *)(v142 + 40), v143 >= (*(void *)(v142 + 48) - v144) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      float v145 = v137 - v138;
      float v146 = (float *)(v141 + 8 * v128);
      float32x4_t v147 = (float *)(v144 + 8 * v143);
      float v148 = *v146 - *v147;
      float v149 = v146[1] - v147[1];
      float v150 = atan2f(v145, v136 - v139);
      float v151 = atan2f(v149, v148);
      if (v151 >= v150)
      {
        float v153 = v151;
      }
      else
      {
        float v152 = v151 + 6.28318531;
        float v153 = v152;
      }
      uint64_t v154 = v184;
      if (v184 >= v185)
      {
        float32x4_t v156 = (float *)v183;
        uint64_t v157 = ((char *)v184 - (unsigned char *)v183) >> 3;
        unint64_t v158 = v157 + 1;
        if ((unint64_t)(v157 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v159 = (char *)v185 - (unsigned char *)v183;
        if (((char *)v185 - (unsigned char *)v183) >> 2 > v158) {
          unint64_t v158 = v159 >> 2;
        }
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v160 = v158;
        }
        if (v160)
        {
          float v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v185, v160);
          float32x4_t v156 = (float *)v183;
          uint64_t v154 = v184;
        }
        else
        {
          float v161 = 0;
        }
        float32x4_t v162 = (float *)&v161[8 * v157];
        *float32x4_t v162 = v150;
        v162[1] = v153;
        float32x4_t v163 = v162;
        while (v154 != v156)
        {
          int v164 = *((_DWORD *)v154 - 2);
          v154 -= 2;
          *((_DWORD *)v163 - 2) = v164;
          v163 -= 2;
          v163[1] = v154[1];
        }
        char v155 = v162 + 2;
        uint64_t v183 = v163;
        float32x4_t v184 = v162 + 2;
        float32x4_t v185 = (float *)&v161[8 * v160];
        if (v156) {
          operator delete(v156);
        }
      }
      else
      {
        *float32x4_t v184 = v150;
        v154[1] = v153;
        char v155 = v154 + 2;
      }
      float32x4_t v184 = v155;
      uint64_t v111 = ++v112;
      if (v112 >= (unint64_t)(v187 - v186))
      {
        unsigned int v165 = (char *)v183;
        goto LABEL_171;
      }
    }
  }
  if (v183)
  {
    float32x4_t v184 = (float *)v183;
    operator delete(v183);
  }
  uint64_t v109 = v186;
  if (v186)
  {
LABEL_127:
    uint64_t v187 = v109;
    operator delete(v109);
  }
LABEL_128:
  int v83 = __p;
  if (__p) {
LABEL_91:
  }
    operator delete(v83);
LABEL_92:
  if (v192)
  {
    v193 = (char *)v192;
    operator delete(v192);
  }
  return v84;
}

void sub_24F4EA808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::CheckSelfIntersect(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v10 = a3 + 1;
  int v160 = *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, a3[1], **(_DWORD **)a2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v159, 3uLL);
  float32x4_t v156 = 0;
  uint64_t v157 = 0;
  unint64_t v158 = 0;
  uint64_t v11 = *(unsigned int **)a2;
  if (*(void *)(a2 + 8) == *(void *)a2) {
    goto LABEL_122;
  }
  float v138 = a4;
  float v139 = a5;
  unint64_t v12 = 0;
  int v13 = 0;
  int v14 = a3 + 2;
  unint64_t v143 = (uint64_t *)(a1 + 80);
  uint64_t v144 = a3;
  do
  {
    int v140 = v13;
    cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, &v11[v12], v159);
    uint64_t v15 = 0;
    do
    {
      if (cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)v159[0] + v15, v10, v14))
      {
        unint64_t v16 = *(unsigned int *)(cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v14, *(_DWORD *)(*(void *)a2 + 4 * v12))+ 4 * v15);
        uint64_t v17 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v14, *(_DWORD *)(*(void *)a2 + 4 * v12));
        uint64_t v18 = (v15 + 1);
        if (v15 == 2) {
          uint64_t v18 = 0;
        }
        unint64_t v19 = *(unsigned int *)(v17 + 4 * v18);
        LODWORD(v153) = v144[3];
        uint64_t v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, (unsigned int *)&v153);
        uint64_t v21 = *(void *)(v20 + 40);
        if (v16 >= (*(void *)(v20 + 48) - v21) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        LODWORD(v153) = v144[3];
        uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, (unsigned int *)&v153);
        uint64_t v23 = *(void *)(v22 + 40);
        if (v19 >= (*(void *)(v22 + 48) - v23) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        unint64_t v24 = (int *)(v21 + 8 * v16);
        int v25 = *(_DWORD *)(*(void *)a2 + 4 * v12);
        int v26 = *v24;
        uint64_t v153 = *(void *)v24;
        uint64_t v154 = *(_DWORD **)(v23 + 8 * v19);
        *(void *)&long long v155 = __PAIR64__(v19, v16);
        DWORD2(v155) = v25;
        HIDWORD(v155) = *((_DWORD *)v159[0] + v15);
        uint64_t v27 = v157;
        if ((unint64_t)v157 >= v158)
        {
          uint64_t v28 = std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge const&>((uint64_t *)&v156, (uint64_t)&v153);
        }
        else
        {
          *(_DWORD *)uint64_t v157 = v26;
          *((_DWORD *)v27 + 1) = HIDWORD(v153);
          *((void *)v27 + 1) = v154;
          *((_OWORD *)v27 + 1) = v155;
          uint64_t v28 = (uint64_t)(v27 + 32);
        }
        uint64_t v157 = (char *)v28;
        ++v15;
      }
      else
      {
        ++v15;
      }
    }
    while (v15 != 3);
    unint64_t v12 = (v140 + 1);
    uint64_t v11 = *(unsigned int **)a2;
    int v13 = v140 + 1;
  }
  while (v12 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  unint64_t v29 = v156;
  uint64_t v152 = 0x3F50624DD2F1A9FCLL;
  uint64_t v151 = 0x3EB0C6F7A0B5ED8DLL;
  if (v156 == (unsigned int *)v157) {
    goto LABEL_122;
  }
  std::vector<unsigned int> __p = 0;
  float v149 = 0;
  float v150 = 0;
  unint64_t v30 = v157;
  if (v157 - (char *)v156 == 32)
  {
LABEL_19:
    char v31 = 8;
    goto LABEL_118;
  }
  unint64_t v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = a1 + 104;
  while (1)
  {
    unint64_t v36 = v33;
    unint64_t v33 = ++v34;
    unint64_t v37 = (v30 - (char *)v29) >> 5;
    if (v37 > v34) {
      break;
    }
LABEL_113:
    if (v37 - 1 <= v33) {
      goto LABEL_19;
    }
  }
  unint64_t v126 = v34;
  unsigned int v127 = v34;
  unint64_t v142 = v36;
  while (1)
  {
    unint64_t v38 = &v29[8 * v36];
    uint64_t v39 = &v29[8 * v33];
    uint64_t v40 = v38 + 6;
    int v41 = v39 + 6;
    if (v38[6] != v39[6]) {
      break;
    }
LABEL_111:
    unint64_t v29 = v156;
    unint64_t v30 = v157;
    unint64_t v37 = (v157 - (char *)v156) >> 5;
    unint64_t v33 = ++v34;
    if (v37 <= v34)
    {
      unsigned int v34 = v127;
      unint64_t v33 = v126;
      goto LABEL_113;
    }
  }
  unint64_t v43 = v38 + 4;
  unsigned int v42 = v38[4];
  uint64_t v44 = v39 + 4;
  unsigned int v45 = v39[4];
  if (v42 == v45
    || (v46 = v29[8 * v36 + 5], int v47 = &v29[8 * v33], v50 = v47[5], v48 = (int *)(v47 + 5), v49 = v50, v46 == v50))
  {
    LODWORD(v145) = -1;
    v161[0] = 0;
    uint64_t v51 = &v29[8 * v36 + 7];
    if (*v43 == *v44)
    {
      LODWORD(v145) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v35, v51) + 12);
      v161[0] = *v43;
      if (v145 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v35, &v29[8 * v33 + 7]) + 12))
      {
        int v124 = 715;
        uint64_t v125 = "nonmani2d_vh.Index() == mesh.HEdgeStart(e1.hh).Index()";
        goto LABEL_131;
      }
    }
    else
    {
      unint64_t v52 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v35, v51);
      int v53 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v35, v52) + 12);
      LODWORD(v145) = v53;
      v161[0] = v29[8 * v142 + 5];
      uint64_t v54 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v35, &v29[8 * v33 + 7]);
      if (v53 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v35, v54) + 12))
      {
        int v124 = 719;
        uint64_t v125 = "nonmani2d_vh.Index() == mesh.HEdgeEnd(e1.hh).Index()";
LABEL_131:
        __assert_rtn("CheckSelfIntersect", "BlenderUV2.cpp", v124, v125);
      }
    }
    std::vector<unsigned int>::pointer v55 = __p;
    if (__p == v149)
    {
      unint64_t v36 = v142;
    }
    else
    {
      unint64_t v36 = v142;
      while (*v55 != v145)
      {
        if (++v55 == v149)
        {
          std::vector<unsigned int>::pointer v55 = v149;
          break;
        }
      }
    }
    if (v55 != v149) {
      goto LABEL_111;
    }
    uint64_t v153 = 0;
    uint64_t v154 = 0;
    *(void *)&long long v155 = 0;
    int v56 = cv3d::cv::gess::internal::CheckNonManifoldOverlapping(a1, (uint64_t)&v145, v161, v144, &v160, (uint64_t)&v153);
    char v57 = v56;
    if (v56)
    {
      int v58 = (_DWORD *)v153;
      if ((_DWORD *)((char *)v154 - v153) != (_DWORD *)8) {
        __assert_rtn("CheckSelfIntersect", "BlenderUV2.cpp", 732, "overlapped_fhs.size() == 2");
      }
      *float v138 = *(_DWORD *)v153;
      *float v139 = v58[1];
      char v31 = 1;
    }
    else
    {
      uint64_t v60 = v149;
      if (v149 >= (_DWORD *)v150)
      {
        uint64_t v115 = ((char *)v149 - (unsigned char *)__p) >> 2;
        if ((unint64_t)(v115 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v116 = (v150 - (unsigned char *)__p) >> 1;
        if (v116 <= v115 + 1) {
          unint64_t v116 = v115 + 1;
        }
        if ((unint64_t)(v150 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v117 = v116;
        }
        if (v117) {
          uint64_t v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v150, v117);
        }
        else {
          uint64_t v118 = 0;
        }
        unsigned int v119 = &v118[4 * v115];
        *(_DWORD *)unsigned int v119 = v145;
        uint64_t v61 = v119 + 4;
        uint64_t v121 = (char *)__p;
        unint64_t v120 = (char *)v149;
        if (v149 != __p)
        {
          do
          {
            int v122 = *((_DWORD *)v120 - 1);
            v120 -= 4;
            *((_DWORD *)v119 - 1) = v122;
            v119 -= 4;
          }
          while (v120 != v121);
          unint64_t v120 = (char *)__p;
        }
        std::vector<unsigned int> __p = v119;
        float v149 = v61;
        float v150 = &v118[4 * v117];
        if (v120) {
          operator delete(v120);
        }
      }
      else
      {
        _DWORD *v149 = v145;
        uint64_t v61 = v60 + 1;
      }
      float v149 = v61;
      int v58 = (_DWORD *)v153;
      char v31 = 13;
      if (!v153)
      {
LABEL_110:
        unint64_t v36 = v142;
        if (v57) {
          goto LABEL_118;
        }
        goto LABEL_111;
      }
    }
    uint64_t v154 = v58;
    operator delete(v58);
    goto LABEL_110;
  }
  if (v46 != v45 && v42 != v49)
  {
    uint64_t v153 = 0x3F50624DD2F1A9FCLL;
    uint64_t v145 = 0x3EB0C6F7A0B5ED8DLL;
    int v59 = cv3d::cv::gess::alg::Edge2DIntersects((float *)v38, (float *)&v29[8 * v36 + 2], (float *)v39, (float *)&v29[8 * v33 + 2], (double *)&v153, (double *)&v145);
    unint64_t v36 = v142;
    if (v59 != 3) {
      goto LABEL_117;
    }
    goto LABEL_111;
  }
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  *(void *)&long long v155 = -1;
  *((void *)&v155 + 1) = -1;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  *(void *)&long long v147 = -1;
  *((void *)&v147 + 1) = -1;
  int v62 = *v48;
  BOOL v63 = *v43 == v62;
  if (*v43 == v62) {
    unint64_t v64 = &v29[8 * v36];
  }
  else {
    unint64_t v64 = &v29[8 * v33];
  }
  if (v63) {
    unint64_t v65 = v36;
  }
  else {
    unint64_t v65 = v33;
  }
  if (v63) {
    uint64_t v66 = (long long *)(v38 + 4);
  }
  else {
    uint64_t v66 = (long long *)(v39 + 4);
  }
  if (v63) {
    uint64_t v67 = (uint64_t *)&v29[8 * v33];
  }
  else {
    uint64_t v67 = (uint64_t *)&v29[8 * v36];
  }
  if (v63) {
    unint64_t v68 = v33;
  }
  else {
    unint64_t v68 = v36;
  }
  if (!v63) {
    uint64_t v44 = v38 + 4;
  }
  unsigned int v69 = v64[1];
  LODWORD(v153) = *v64;
  HIDWORD(v153) = v69;
  uint64_t v154 = *(_DWORD **)&v29[8 * v65 + 2];
  long long v155 = *v66;
  uint64_t v145 = *v67;
  uint64_t v146 = *(void *)&v29[8 * v68 + 2];
  long long v147 = *(_OWORD *)v44;
  if (v155 != DWORD1(v147)) {
    __assert_rtn("CheckSelfIntersect", "BlenderUV2.cpp", 750, "ea.v0_uvid == eb.v1_uvid");
  }
  unsigned int v70 = *v14;
  uint64_t v71 = cv3d::cv::gess::mesh::Topology::h(v35, (unsigned int *)&v155 + 3);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v72 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v70, *(_DWORD *)(v71 + 16));
  unsigned int v73 = *v14;
  uint64_t v74 = cv3d::cv::gess::mesh::Topology::h(v35, (unsigned int *)&v147 + 3);
  uint64_t v141 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v73, *(_DWORD *)(v74 + 16));
  v161[0] = v144[3];
  uint64_t v75 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
  uint64_t v130 = *(void *)(v75 + 40);
  uint64_t v134 = DWORD1(v155);
  if (DWORD1(v155) >= (unint64_t)((*(void *)(v75 + 48) - v130) >> 3)) {
    goto LABEL_128;
  }
  v161[0] = v144[3];
  uint64_t v76 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
  unint64_t v77 = *v141;
  uint64_t v78 = *(void *)(v76 + 40);
  if (v77 >= (*(void *)(v76 + 48) - v78) >> 3) {
    goto LABEL_128;
  }
  v161[0] = v144[3];
  uint64_t v79 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
  unint64_t v80 = v141[1];
  uint64_t v81 = *(void *)(v79 + 40);
  if (v80 >= (*(void *)(v79 + 48) - v81) >> 3) {
    goto LABEL_128;
  }
  v161[0] = v144[3];
  uint64_t v82 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
  unint64_t v83 = v141[2];
  uint64_t v84 = *(void *)(v82 + 40);
  if (v83 >= (*(void *)(v82 + 48) - v84) >> 3) {
    goto LABEL_128;
  }
  if (cv3d::cv::gess::alg::IsPointInTriangle((float *)(v130 + 8 * v134), (float *)(v78 + 8 * v77), (float *)(v81 + 8 * v80), (float *)(v84 + 8 * v83)))
  {
    goto LABEL_117;
  }
  v161[0] = v144[3];
  uint64_t v85 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
  uint64_t v131 = *(void *)(v85 + 40);
  uint64_t v135 = v147;
  if (v147 >= (unint64_t)((*(void *)(v85 + 48) - v131) >> 3)) {
    goto LABEL_128;
  }
  v161[0] = v144[3];
  uint64_t v86 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
  unint64_t v87 = *v72;
  uint64_t v88 = *(void *)(v86 + 40);
  if (v87 >= (*(void *)(v86 + 48) - v88) >> 3) {
    goto LABEL_128;
  }
  v161[0] = v144[3];
  uint64_t v89 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
  unint64_t v90 = v72[1];
  uint64_t v91 = *(void *)(v89 + 40);
  if (v90 >= (*(void *)(v89 + 48) - v91) >> 3
    || (v161[0] = v144[3],
        uint64_t v92 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161),
        unint64_t v93 = v72[2],
        uint64_t v94 = *(void *)(v92 + 40),
        v93 >= (*(void *)(v92 + 48) - v94) >> 3))
  {
LABEL_128:
    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
  }
  if (!cv3d::cv::gess::alg::IsPointInTriangle((float *)(v131 + 8 * v135), (float *)(v88 + 8 * v87), (float *)(v91 + 8 * v90), (float *)(v94 + 8 * v93)))
  {
    uint64_t v95 = 0;
    while (v72[v95] != v155)
    {
      if (++v95 == 3)
      {
        LOBYTE(v95) = 99;
        break;
      }
    }
    uint64_t v96 = 0;
    while (v141[v96] != v155)
    {
      if (++v96 == 3)
      {
        LOBYTE(v96) = 99;
        break;
      }
    }
    v161[0] = v144[3];
    uint64_t v97 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
    uint64_t v132 = *(void *)(v97 + 40);
    uint64_t v136 = v147;
    if (v147 >= (unint64_t)((*(void *)(v97 + 48) - v132) >> 3)) {
      goto LABEL_129;
    }
    v161[0] = v144[3];
    uint64_t v98 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
    uint64_t v128 = *(void *)(v98 + 40);
    uint64_t v129 = DWORD1(v147);
    if (DWORD1(v147) >= (unint64_t)((*(void *)(v98 + 48) - v128) >> 3)) {
      goto LABEL_129;
    }
    v161[0] = v144[3];
    uint64_t v99 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
    unint64_t v100 = v72[(v95 + 1) % 3u];
    uint64_t v101 = *(void *)(v99 + 40);
    if (v100 >= (*(void *)(v99 + 48) - v101) >> 3) {
      goto LABEL_129;
    }
    v161[0] = v144[3];
    uint64_t v102 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
    unint64_t v103 = v72[(v95 + 2) % 3u];
    uint64_t v104 = *(void *)(v102 + 40);
    if (v103 >= (*(void *)(v102 + 48) - v104) >> 3) {
      goto LABEL_129;
    }
    if (cv3d::cv::gess::alg::Edge2DIntersects((float *)(v132 + 8 * v136), (float *)(v128 + 8 * v129), (float *)(v101 + 8 * v100), (float *)(v104 + 8 * v103), (double *)&v152, (double *)&v151) != 3)goto LABEL_117; {
    v161[0] = v144[3];
    }
    uint64_t v105 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
    uint64_t v133 = *(void *)(v105 + 40);
    uint64_t v137 = v155;
    if (v155 >= (unint64_t)((*(void *)(v105 + 48) - v133) >> 3)) {
      goto LABEL_129;
    }
    v161[0] = v144[3];
    uint64_t v106 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
    uint64_t v107 = DWORD1(v155);
    uint64_t v108 = *(void *)(v106 + 40);
    if (DWORD1(v155) >= (unint64_t)((*(void *)(v106 + 48) - v108) >> 3)) {
      goto LABEL_129;
    }
    v161[0] = v144[3];
    uint64_t v109 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161);
    unint64_t v110 = v141[(v96 + 1) % 3u];
    uint64_t v111 = *(void *)(v109 + 40);
    if (v110 >= (*(void *)(v109 + 48) - v111) >> 3
      || (v161[0] = v144[3],
          uint64_t v112 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v143, v161),
          unint64_t v113 = v141[(v96 + 2) % 3u],
          uint64_t v114 = *(void *)(v112 + 40),
          v113 >= (*(void *)(v112 + 48) - v114) >> 3))
    {
LABEL_129:
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    }
    if (cv3d::cv::gess::alg::Edge2DIntersects((float *)(v133 + 8 * v137), (float *)(v108 + 8 * v107), (float *)(v111 + 8 * v110), (float *)(v114 + 8 * v113), (double *)&v152, (double *)&v151) == 3)
    {
      uint64_t v35 = a1 + 104;
      unint64_t v36 = v142;
      goto LABEL_111;
    }
  }
LABEL_117:
  *float v138 = *v40;
  *float v139 = *v41;
  char v31 = 1;
LABEL_118:
  if (__p)
  {
    float v149 = __p;
    operator delete(__p);
  }
  if ((v31 & 7) != 0)
  {
    uint64_t v32 = 1;
    goto LABEL_123;
  }
LABEL_122:
  uint64_t v32 = 0;
LABEL_123:
  if (v156)
  {
    uint64_t v157 = (char *)v156;
    operator delete(v156);
  }
  if (v159[0])
  {
    v159[1] = v159[0];
    operator delete(v159[0]);
  }
  return v32;
}

void sub_24F4EB51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 144);
  if (v35)
  {
    *(void *)(v33 - 136) = v35;
    operator delete(v35);
  }
  unint64_t v36 = *(void **)(v33 - 120);
  if (v36)
  {
    *(void *)(v33 - 112) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::BipartitionChart(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, char **a6, char **a7)
{
  if (*a4 == -1 || *a5 == -1) {
    cv3d::cv::gess::internal::BipartitionChart();
  }
  if (*a4 == *a5) {
    cv3d::cv::gess::internal::BipartitionChart();
  }
  if ((unint64_t)(a2[1] - *a2) <= 7) {
    cv3d::cv::gess::internal::BipartitionChart();
  }
  long long v70 = 0u;
  long long v68 = 0u;
  memset(v69, 0, sizeof(v69));
  memset(v67, 0, sizeof(v67));
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v69, a4);
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v67, a5);
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v13 = *(void *)(a1 + 160);
  uint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    if (v15 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = operator new(v13 - v14);
    bzero(v16, v15 & 0xFFFFFFFFFFFFFFFCLL);
  }
  *((_DWORD *)v16 + *a4) = 1;
  *((_DWORD *)v16 + *a5) = 2;
  uint64_t v17 = (unsigned int *)(a3 + 4);
  uint64_t v18 = (unsigned int *)(a3 + 8);
  while (*((void *)&v70 + 1))
  {
    unsigned int v66 = *(_DWORD *)(*(void *)(*((void *)&v69[0] + 1) + (((unint64_t)v70 >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * (v70 & 0x3FF));
    *(void *)&long long v70 = v70 + 1;
    --*((void *)&v70 + 1);
    if ((unint64_t)v70 >= 0x800)
    {
      operator delete(**((void ***)&v69[0] + 1));
      *((void *)&v69[0] + 1) += 8;
      *(void *)&long long v70 = v70 - 1024;
    }
    unsigned int v19 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v66);
    unsigned int v65 = v19;
    do
    {
      unsigned int v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65) + 8);
      if (!cv3d::cv::gess::internal::IsChartBoundary(a1, &v65, v17, v18))
      {
        uint64_t v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65);
        unsigned int v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v20) + 16);
        if (!*((_DWORD *)v16 + v64))
        {
          std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v69, &v64);
          *((_DWORD *)v16 + v64) = 1;
        }
      }
    }
    while (v65 != v19);
    uint64_t v21 = *((void *)&v68 + 1);
    if (*((void *)&v68 + 1))
    {
LABEL_21:
      unsigned int v66 = *(_DWORD *)(*(void *)(*((void *)&v67[0] + 1) + (((unint64_t)v68 >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * (v68 & 0x3FF));
      *(void *)&long long v68 = v68 + 1;
      *((void *)&v68 + 1) = v21 - 1;
      if ((unint64_t)v68 >= 0x800)
      {
        operator delete(**((void ***)&v67[0] + 1));
        *((void *)&v67[0] + 1) += 8;
        *(void *)&long long v68 = v68 - 1024;
      }
      unsigned int v22 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v66);
      unsigned int v65 = v22;
      do
      {
        unsigned int v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65) + 8);
        if (!cv3d::cv::gess::internal::IsChartBoundary(a1, &v65, v17, v18))
        {
          uint64_t v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65);
          unsigned int v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v23) + 16);
          if (!*((_DWORD *)v16 + v64))
          {
            std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v67, &v64);
            *((_DWORD *)v16 + v64) = 2;
          }
        }
      }
      while (v65 != v22);
    }
  }
  uint64_t v21 = *((void *)&v68 + 1);
  if (*((void *)&v68 + 1)) {
    goto LABEL_21;
  }
  a6[1] = *a6;
  unint64_t v24 = *a7;
  a7[1] = *a7;
  uint64_t v25 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *(unsigned int *)(v25 + 4 * v26);
      int v28 = *((_DWORD *)v16 + v27);
      if (v28 == 2)
      {
        unint64_t v37 = a7[1];
        unint64_t v36 = (unint64_t)a7[2];
        if ((unint64_t)v37 >= v36)
        {
          uint64_t v41 = (v37 - *a7) >> 2;
          if ((unint64_t)(v41 + 1) >> 62) {
            goto LABEL_91;
          }
          uint64_t v42 = v36 - (void)*a7;
          uint64_t v43 = v42 >> 1;
          if (v42 >> 1 <= (unint64_t)(v41 + 1)) {
            uint64_t v43 = v41 + 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            unsigned int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a7 + 2), v44);
            LODWORD(v27) = *(_DWORD *)(v25 + 4 * v26);
          }
          else
          {
            unsigned int v45 = 0;
          }
          int v53 = &v45[4 * v41];
          *(_DWORD *)int v53 = v27;
          unint64_t v38 = v53 + 4;
          std::vector<unsigned int>::pointer v55 = *a7;
          uint64_t v54 = a7[1];
          if (v54 != *a7)
          {
            do
            {
              int v56 = *((_DWORD *)v54 - 1);
              v54 -= 4;
              *((_DWORD *)v53 - 1) = v56;
              v53 -= 4;
            }
            while (v54 != v55);
            uint64_t v54 = *a7;
          }
          *a7 = v53;
          a7[1] = v38;
          a7[2] = &v45[4 * v44];
          if (v54) {
            operator delete(v54);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v37 = v27;
          unint64_t v38 = v37 + 4;
        }
        a7[1] = v38;
        goto LABEL_80;
      }
      if (v28 == 1)
      {
        unint64_t v30 = a6[1];
        unint64_t v29 = (unint64_t)a6[2];
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v31 = (v30 - *a6) >> 2;
          if ((unint64_t)(v31 + 1) >> 62) {
            goto LABEL_91;
          }
          uint64_t v32 = v29 - (void)*a6;
          uint64_t v33 = v32 >> 1;
          if (v32 >> 1 <= (unint64_t)(v31 + 1)) {
            uint64_t v33 = v31 + 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34)
          {
            uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a6 + 2), v34);
            LODWORD(v27) = *(_DWORD *)(v25 + 4 * v26);
          }
          else
          {
            uint64_t v35 = 0;
          }
          unsigned int v49 = &v35[4 * v31];
          *(_DWORD *)unsigned int v49 = v27;
          uint64_t v40 = v49 + 4;
          uint64_t v51 = *a6;
          unsigned int v50 = a6[1];
          if (v50 != *a6)
          {
            do
            {
              int v52 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v49 - 1) = v52;
              v49 -= 4;
            }
            while (v50 != v51);
            goto LABEL_76;
          }
          goto LABEL_77;
        }
      }
      else
      {
        unint64_t v30 = a6[1];
        unint64_t v39 = (unint64_t)a6[2];
        if ((unint64_t)v30 >= v39)
        {
          uint64_t v46 = (v30 - *a6) >> 2;
          if ((unint64_t)(v46 + 1) >> 62) {
LABEL_91:
          }
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          uint64_t v47 = v39 - (void)*a6;
          uint64_t v48 = v47 >> 1;
          if (v47 >> 1 <= (unint64_t)(v46 + 1)) {
            uint64_t v48 = v46 + 1;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v48;
          }
          if (v34)
          {
            uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a6 + 2), v34);
            LODWORD(v27) = *(_DWORD *)(v25 + 4 * v26);
          }
          else
          {
            uint64_t v35 = 0;
          }
          unsigned int v49 = &v35[4 * v46];
          *(_DWORD *)unsigned int v49 = v27;
          uint64_t v40 = v49 + 4;
          char v57 = *a6;
          unsigned int v50 = a6[1];
          if (v50 != *a6)
          {
            do
            {
              int v58 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v49 - 1) = v58;
              v49 -= 4;
            }
            while (v50 != v57);
LABEL_76:
            unsigned int v50 = *a6;
          }
LABEL_77:
          *a6 = v49;
          a6[1] = v40;
          a6[2] = &v35[4 * v34];
          if (v50) {
            operator delete(v50);
          }
          goto LABEL_79;
        }
      }
      *(_DWORD *)unint64_t v30 = v27;
      uint64_t v40 = v30 + 4;
LABEL_79:
      a6[1] = v40;
LABEL_80:
      ++v26;
      uint64_t v25 = *a2;
      uint64_t v59 = a2[1] - *a2;
      if (v26 >= v59 >> 2)
      {
        uint64_t v60 = v59 >> 2;
        unint64_t v24 = *a7;
        uint64_t v61 = a7[1];
        goto LABEL_83;
      }
    }
  }
  uint64_t v60 = 0;
  uint64_t v61 = v24;
LABEL_83:
  if (((v61 - v24) >> 2) + ((a6[1] - *a6) >> 2) != v60) {
    __assert_rtn("BipartitionChart", "BlenderUV2.cpp", 895, "out_chart_faces0.size() + out_chart_faces1.size() == chart_faces.size()");
  }
  if (v16) {
    operator delete(v16);
  }
  std::deque<int>::~deque[abi:ne180100](v67);
  std::deque<int>::~deque[abi:ne180100](v69);
  return 1;
}

void sub_24F4EBBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::internal::AssignChartToNewGroup(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  int v5 = a3;
  LODWORD(v62[0]) = *a3;
  uint64_t v8 = (uint64_t *)(a1 + 80);
  uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)v62);
  (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
  LODWORD(v62[0]) = *v5;
  int v52 = v8;
  uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, (unsigned int *)v62);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) - 1;
  uint64_t v12 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v13 = 0;
    do
    {
      *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v5[1], *(_DWORD *)(v12 + 4 * v13++)) = v11;
      uint64_t v12 = *a2;
    }
    while (v13 < (uint64_t)(a2[1] - *a2) >> 2);
  }
  int v50 = v11;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v62, 3uLL);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v60[0] = 0;
  v60[1] = 0;
  uint64_t v59 = v60;
  uint64_t v14 = *a2;
  if (a2[1] == *a2)
  {
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    int v53 = v5 + 2;
    unint64_t v16 = v5 + 1;
    uint64_t v48 = a2;
    do
    {
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)(v14 + 4 * v15), v62);
      uint64_t v49 = v15;
      uint64_t v51 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v53, *(_DWORD *)(*a2 + 4 * v15));
      uint64_t v17 = 0;
      int v18 = 0;
      do
      {
        v18 |= cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)((char *)v62[0] + v17), v16, v53);
        v17 += 4;
      }
      while (v17 != 12);
      if (v18)
      {
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)(*v48 + 4 * v49), __p);
        for (uint64_t i = 0; i != 3; ++i)
        {
          cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v58, a1 + 104, (char *)__p[0] + 4 * i);
          for (unsigned int j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v58);
                ;
                unsigned int j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v58))
          {
            unsigned int v57 = j;
            if (j == -1) {
              break;
            }
            if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v57) + 16) != -1)
            {
              unsigned int v21 = *v16;
              uint64_t v22 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v57);
              if (*(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v21, *(_DWORD *)(v22 + 16)) == *a4)
              {
                unsigned int v23 = *(_DWORD *)(v51 + 4 * i);
                unsigned int v56 = v23;
                uint64_t v24 = v60[0];
                if (!v60[0]) {
                  goto LABEL_24;
                }
                uint64_t v25 = v60;
                do
                {
                  unint64_t v26 = (uint64_t *)v24;
                  uint64_t v27 = v25;
                  unsigned int v28 = *(_DWORD *)(v24 + 28);
                  unint64_t v29 = (uint64_t *)(v24 + 8);
                  if (v28 >= v23)
                  {
                    unint64_t v29 = v26;
                    uint64_t v25 = v26;
                  }
                  uint64_t v24 = *v29;
                }
                while (v24);
                if (v25 == v60) {
                  goto LABEL_24;
                }
                if (v28 < v23) {
                  unint64_t v26 = v27;
                }
                if (v23 >= *((_DWORD *)v26 + 7))
                {
                  *(_DWORD *)(v51 + 4 * i) = *(_DWORD *)std::map<unsigned int,unsigned int>::at((uint64_t)&v59, &v56);
                }
                else
                {
LABEL_24:
                  LODWORD(v55[0]) = v5[3];
                  uint64_t v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v52, (unsigned int *)v55);
                  (*(void (**)(uint64_t))(*(void *)v30 + 48))(v30);
                  uint64_t v31 = v5;
                  LODWORD(v55[0]) = v5[3];
                  uint64_t v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v52, (unsigned int *)v55);
                  int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
                  LODWORD(v55[0]) = v5[3];
                  uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v52, (unsigned int *)v55);
                  uint64_t v35 = v56;
                  uint64_t v36 = *(void *)(v34 + 40);
                  if (v56 >= (unint64_t)((*(void *)(v34 + 48) - v36) >> 3)
                    || (LODWORD(v55[0]) = v31[3],
                        v37 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v52, (unsigned int *)v55), unint64_t v38 = (v33 - 1), v39 = *(void *)(v37 + 40), v38 >= (*(void *)(v37 + 48) - v39) >> 3))
                  {
                    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                  }
                  uint64_t v40 = (_DWORD *)(v36 + 8 * v35);
                  uint64_t v41 = (_DWORD *)(v39 + 8 * v38);
                  *uint64_t v41 = *v40;
                  v41[1] = v40[1];
                  v55[0] = &v56;
                  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v59, &v56, (uint64_t)&std::piecewise_construct, v55)+ 8) = v38;
                  *(_DWORD *)(v51 + 4 * i) = v38;
                  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v55, a1 + 104, (char *)__p[0] + 4 * i);
                  unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v55);
                  int v5 = v31;
                  while (1)
                  {
                    unsigned int v54 = HEdge;
                    if (HEdge == -1) {
                      break;
                    }
                    unsigned int v43 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v54) + 16);
                    if (v43 != -1
                      && *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, *v16, v43) == v50)
                    {
                      uint64_t v44 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v53, v43);
                      uint64_t v45 = 0;
                      unsigned int v46 = v56;
                      do
                      {
                        if (*(_DWORD *)(v44 + v45) == v46) {
                          *(_DWORD *)(v44 + v45) = v38;
                        }
                        v45 += 4;
                      }
                      while (v45 != 12);
                    }
                    unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v55);
                  }
                }
                break;
              }
            }
          }
        }
      }
      a2 = v48;
      uint64_t v15 = v49 + 1;
      uint64_t v14 = *v48;
    }
    while (v49 + 1 < (unint64_t)((uint64_t)(v48[1] - *v48) >> 2));
    uint64_t v47 = (void *)v60[0];
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v59, v47);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
}

void sub_24F4EC114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  unint64_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<unsigned int,unsigned int>::at(uint64_t a1, unsigned int *a2)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4) {
        break;
      }
      int v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 4;
    }
    int v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void *std::vector<std::pair<cv3d::cv::gess::mesh::FaceHandle,float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    unsigned int v4 = (void *)a1[1];
    int v5 = &v4[a2];
    do
      *v4++ = 0xFFFFFFFFLL;
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_24F4EC240(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v46 = *(void *)(a2 - 8);
                uint64_t v47 = *(void *)v10;
                if (*((float *)&v46 + 1) > COERCE_FLOAT(HIDWORD(*(void *)v10)))
                {
                  *(_DWORD *)unint64_t v10 = v46;
                  *(_DWORD *)(a2 - 8) = v47;
                  int v48 = *(_DWORD *)(v10 + 4);
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v48;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v10, (float *)(v10 + 8), (float *)(a2 - 8));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), a2 - 8);
                break;
              case 5uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), v10 + 24);
                uint64_t v49 = *(void *)(a2 - 8);
                uint64_t v50 = *(void *)(v10 + 24);
                if (*((float *)&v49 + 1) > *((float *)&v50 + 1))
                {
                  *(_DWORD *)(v10 + 24) = v49;
                  *(_DWORD *)(a2 - 8) = v50;
                  int v51 = *(_DWORD *)(v10 + 28);
                  *(_DWORD *)(v10 + 28) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v51;
                  uint64_t v52 = *(void *)(v10 + 16);
                  unint64_t v53 = *(void *)(v10 + 24);
                  unint64_t v54 = HIDWORD(v53);
                  if (*((float *)&v53 + 1) > *((float *)&v52 + 1))
                  {
                    *(void *)(v10 + 16) = v53;
                    *(void *)(v10 + 24) = v52;
                    uint64_t v55 = *(void *)(v10 + 8);
                    uint64_t v56 = *(void *)(v10 + 16);
                    if (*((float *)&v56 + 1) > *((float *)&v55 + 1))
                    {
                      *(_DWORD *)(v10 + 8) = v56;
                      *(_DWORD *)(v10 + 12) = v54;
                      *(void *)(v10 + 16) = v55;
                      uint64_t v57 = *(void *)v10;
                      uint64_t v58 = *(void *)(v10 + 8);
                      uint64_t v59 = HIDWORD(*(void *)v10);
                      if (*((float *)&v58 + 1) > COERCE_FLOAT(HIDWORD(*(void *)v10)))
                      {
                        *(_DWORD *)unint64_t v10 = v58;
                        *(_DWORD *)(v10 + 4) = v54;
                        *(_DWORD *)(v10 + 8) = v57;
                        *(_DWORD *)(v10 + 12) = v59;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 191)
          {
            unint64_t v60 = v10 + 8;
            BOOL v62 = v10 == a2 || v60 == a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = v10;
                do
                {
                  unint64_t v65 = v60;
                  uint64_t v66 = *(void *)v64;
                  if (*(float *)(v64 + 12) > COERCE_FLOAT(HIDWORD(*(void *)v64)))
                  {
                    int v67 = *(_DWORD *)(v64 + 8);
                    float v68 = *(float *)(v64 + 12);
                    uint64_t v69 = v63;
                    while (1)
                    {
                      uint64_t v70 = v10 + v69;
                      *(_DWORD *)(v70 + 8) = v66;
                      *(_DWORD *)(v70 + 12) = *(_DWORD *)(v10 + v69 + 4);
                      if (!v69) {
                        break;
                      }
                      uint64_t v66 = *(void *)(v70 - 8);
                      v69 -= 8;
                      if (v68 <= *((float *)&v66 + 1))
                      {
                        uint64_t v71 = v10 + v69 + 8;
                        goto LABEL_86;
                      }
                    }
                    uint64_t v71 = v10;
LABEL_86:
                    *(_DWORD *)uint64_t v71 = v67;
                    *(float *)(v71 + 4) = v68;
                  }
                  unint64_t v60 = v65 + 8;
                  v63 += 8;
                  unint64_t v64 = v65;
                }
                while (v65 + 8 != a2);
              }
            }
            else if (!v62)
            {
              unint64_t v100 = (float *)(v10 + 12);
              do
              {
                unint64_t v101 = v60;
                uint64_t v102 = *(void *)a1;
                if (*(float *)(a1 + 12) > COERCE_FLOAT(HIDWORD(*(void *)a1)))
                {
                  int v103 = *(_DWORD *)(a1 + 8);
                  float v104 = *(float *)(a1 + 12);
                  uint64_t v105 = v100;
                  do
                  {
                    uint64_t v106 = v105;
                    int v107 = *((_DWORD *)v105 - 2);
                    v105 -= 2;
                    *((_DWORD *)v106 - 1) = v102;
                    *(_DWORD *)uint64_t v106 = v107;
                    uint64_t v102 = *(void *)(v106 - 5);
                  }
                  while (v104 > *((float *)&v102 + 1));
                  *((_DWORD *)v105 - 1) = v103;
                  *uint64_t v105 = v104;
                }
                unint64_t v60 = v101 + 8;
                v100 += 2;
                a1 = v101;
              }
              while (v101 + 8 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v72 = (v12 - 2) >> 1;
              int64_t v73 = v72;
              do
              {
                int64_t v74 = v73;
                if (v72 >= v73)
                {
                  uint64_t v75 = (2 * v73) | 1;
                  unint64_t v76 = v10 + 8 * v75;
                  if (2 * v74 + 2 < (uint64_t)v12 && *(float *)(v76 + 4) > *(float *)(v76 + 12))
                  {
                    v76 += 8;
                    uint64_t v75 = 2 * v74 + 2;
                  }
                  unint64_t v77 = v10 + 8 * v74;
                  uint64_t v78 = *(void *)v76;
                  float v79 = *(float *)(v77 + 4);
                  if (COERCE_FLOAT(HIDWORD(*(void *)v76)) <= v79)
                  {
                    int v80 = *(_DWORD *)v77;
                    do
                    {
                      uint64_t v81 = (_DWORD *)v77;
                      unint64_t v77 = v76;
                      *uint64_t v81 = v78;
                      v81[1] = *(_DWORD *)(v76 + 4);
                      if (v72 < v75) {
                        break;
                      }
                      uint64_t v82 = 2 * v75;
                      uint64_t v75 = (2 * v75) | 1;
                      unint64_t v76 = v10 + 8 * v75;
                      uint64_t v83 = v82 + 2;
                      if (v83 < (uint64_t)v12 && *(float *)(v76 + 4) > *(float *)(v76 + 12))
                      {
                        v76 += 8;
                        uint64_t v75 = v83;
                      }
                      uint64_t v78 = *(void *)v76;
                    }
                    while (COERCE_FLOAT(HIDWORD(*(void *)v76)) <= v79);
                    *(_DWORD *)unint64_t v77 = v80;
                    *(float *)(v77 + 4) = v79;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              uint64_t v84 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v85 = 0;
                float v86 = *(float *)v10;
                int v87 = *(_DWORD *)(v10 + 4);
                unint64_t v88 = v10;
                do
                {
                  uint64_t v89 = (_DWORD *)v88;
                  v88 += 8 * v85 + 8;
                  uint64_t v90 = 2 * v85;
                  uint64_t v85 = (2 * v85) | 1;
                  uint64_t v91 = v90 + 2;
                  if (v91 < v84 && *(float *)(v88 + 4) > *(float *)(v88 + 12))
                  {
                    v88 += 8;
                    uint64_t v85 = v91;
                  }
                  _DWORD *v89 = *(_DWORD *)v88;
                  v89[1] = *(_DWORD *)(v88 + 4);
                }
                while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
                if (v88 == a2 - 8)
                {
                  *(float *)unint64_t v88 = v86;
                  *(_DWORD *)(v88 + 4) = v87;
                }
                else
                {
                  *(_DWORD *)unint64_t v88 = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(v88 + 4) = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 8) = v86;
                  *(_DWORD *)(a2 - 4) = v87;
                  uint64_t v92 = v88 - v10 + 8;
                  if (v92 >= 9)
                  {
                    unint64_t v93 = (((unint64_t)v92 >> 3) - 2) >> 1;
                    unint64_t v94 = v10 + 8 * v93;
                    uint64_t v95 = *(void *)v94;
                    float v96 = *(float *)(v88 + 4);
                    if (COERCE_FLOAT(HIDWORD(*(void *)v94)) > v96)
                    {
                      int v97 = *(_DWORD *)v88;
                      do
                      {
                        uint64_t v98 = (_DWORD *)v88;
                        unint64_t v88 = v94;
                        *uint64_t v98 = v95;
                        v98[1] = *(_DWORD *)(v94 + 4);
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                        unint64_t v94 = v10 + 8 * v93;
                        uint64_t v95 = *(void *)v94;
                      }
                      while (COERCE_FLOAT(HIDWORD(*(void *)v94)) > v96);
                      *(_DWORD *)unint64_t v88 = v97;
                      *(float *)(v88 + 4) = v96;
                    }
                  }
                }
                a2 -= 8;
              }
              while (v84-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 8 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8 * (v12 >> 1)), (float *)(a2 - 8));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8), (float *)(v14 - 8), (float *)(a2 - 16));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v13), (float *)(a2 - 24));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(v14 - 8), (float *)v14, (float *)(a1 + 8 + 8 * v13));
            float v15 = *(float *)a1;
            *(_DWORD *)a1 = *(_DWORD *)v14;
            *(float *)unint64_t v14 = v15;
            int v16 = *(_DWORD *)(a1 + 4);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v14 + 4);
            *(_DWORD *)(v14 + 4) = v16;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8 * (v12 >> 1)), (float *)a1, (float *)(a2 - 8));
          }
          --a3;
          if (a4) {
            break;
          }
          float v17 = *(float *)a1;
          float v18 = *(float *)(a1 + 4);
          float v19 = v18;
          if (*(float *)(a1 - 4) > v18) {
            goto LABEL_12;
          }
          if (v18 <= *(float *)(a2 - 4))
          {
            unint64_t v36 = a1 + 8;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              float v37 = *(float *)(v36 + 4);
              v36 += 8;
            }
            while (v18 <= v37);
          }
          else
          {
            unint64_t v34 = a1;
            do
            {
              unint64_t v10 = v34 + 8;
              float v35 = *(float *)(v34 + 12);
              v34 += 8;
            }
            while (v18 <= v35);
          }
          unint64_t v38 = (_DWORD *)a2;
          if (v10 < a2)
          {
            unint64_t v39 = a2;
            do
            {
              unint64_t v38 = (_DWORD *)(v39 - 8);
              float v40 = *(float *)(v39 - 4);
              v39 -= 8;
            }
            while (v18 > v40);
          }
          if (v10 < (unint64_t)v38)
          {
            float v41 = *(float *)v10;
            float v42 = *(float *)v38;
            do
            {
              *(float *)unint64_t v10 = v42;
              *(float *)unint64_t v38 = v41;
              int v43 = *(_DWORD *)(v10 + 4);
              *(_DWORD *)(v10 + 4) = v38[1];
              v38[1] = v43;
              do
              {
                uint64_t v44 = *(void *)(v10 + 8);
                v10 += 8;
                float v41 = *(float *)&v44;
              }
              while (v18 <= *((float *)&v44 + 1));
              do
              {
                uint64_t v45 = *((void *)v38 - 1);
                v38 -= 2;
                float v42 = *(float *)&v45;
              }
              while (v18 > *((float *)&v45 + 1));
            }
            while (v10 < (unint64_t)v38);
          }
          BOOL v4 = v10 - 8 >= a1;
          BOOL v5 = v10 - 8 == a1;
          if (v10 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(float *)(v10 - 8) = v17;
          *(float *)(v10 - 4) = v18;
        }
        float v17 = *(float *)a1;
        float v18 = *(float *)(a1 + 4);
        float v19 = v18;
LABEL_12:
        uint64_t v20 = 0;
        do
        {
          uint64_t v21 = *(void *)(a1 + v20 + 8);
          v20 += 8;
        }
        while (v19 < *((float *)&v21 + 1));
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 8)
        {
          unint64_t v26 = (float *)a2;
          while (v22 < (unint64_t)v26)
          {
            uint64_t v24 = v26 - 2;
            float v27 = *(v26 - 1);
            v26 -= 2;
            if (v19 < v27) {
              goto LABEL_22;
            }
          }
          uint64_t v24 = v26;
        }
        else
        {
          do
          {
            uint64_t v24 = (float *)(v23 - 8);
            float v25 = *(float *)(v23 - 4);
            v23 -= 8;
          }
          while (v19 >= v25);
        }
LABEL_22:
        if (v22 >= (unint64_t)v24)
        {
          unint64_t v10 = v22;
        }
        else
        {
          int v28 = *(_DWORD *)v24;
          unint64_t v10 = v22;
          unint64_t v29 = v24;
          do
          {
            *(_DWORD *)unint64_t v10 = v28;
            *(_DWORD *)unint64_t v29 = v21;
            int v30 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v29[1];
            *((_DWORD *)v29 + 1) = v30;
            do
            {
              uint64_t v31 = *(void *)(v10 + 8);
              v10 += 8;
              LODWORD(v21) = v31;
            }
            while (v19 < *((float *)&v31 + 1));
            do
            {
              uint64_t v32 = *((void *)v29 - 1);
              v29 -= 2;
              int v28 = v32;
            }
            while (v19 >= *((float *)&v32 + 1));
          }
          while (v10 < (unint64_t)v29);
        }
        if (v10 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
        }
        *(float *)(v10 - 8) = v17;
        *(float *)(v10 - 4) = v18;
        if (v22 >= (unint64_t)v24) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(a1, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(a1, v10 - 8);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(v10, a2))
      {
        break;
      }
      if (!v33) {
        goto LABEL_35;
      }
    }
    a2 = v10 - 8;
    if (!v33) {
      continue;
    }
    break;
  }
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float result = a2[1];
  unint64_t v5 = *(void *)a3;
  LODWORD(v6) = HIDWORD(*(void *)a3);
  if (result > a1[1])
  {
    float v7 = *a1;
    if (v6 <= result)
    {
      *a1 = v3;
      *a2 = v7;
      int v13 = *((_DWORD *)a1 + 1);
      a1[1] = a2[1];
      *((_DWORD *)a2 + 1) = v13;
      uint64_t v14 = *(void *)a2;
      LODWORD(result) = HIDWORD(*(void *)a3);
      if (result <= COERCE_FLOAT(HIDWORD(*(void *)a2))) {
        return result;
      }
      *(_DWORD *)a2 = *(void *)a3;
      *(_DWORD *)a3 = v14;
      uint64_t v9 = a3 + 1;
      uint64_t v8 = a2 + 1;
    }
    else
    {
      *(_DWORD *)a1 = v5;
      uint64_t v8 = a1 + 1;
      *a3 = v7;
      uint64_t v9 = a3 + 1;
    }
    unint64_t v10 = v9;
    goto LABEL_10;
  }
  if (v6 > result)
  {
    *(_DWORD *)a2 = v5;
    *a3 = v3;
    unint64_t v10 = a2 + 1;
    int v11 = *((_DWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_DWORD *)a3 + 1) = v11;
    uint64_t v12 = *(void *)a1;
    LODWORD(result) = HIDWORD(*(void *)a2);
    if (result > COERCE_FLOAT(HIDWORD(*(void *)a1)))
    {
      *(_DWORD *)a1 = *(void *)a2;
      uint64_t v8 = a1 + 1;
      *(_DWORD *)a2 = v12;
LABEL_10:
      float result = *v8;
      float *v8 = *v10;
      *unint64_t v10 = result;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(void *)(a2 - 8);
      uint64_t v7 = *(void *)a1;
      if (*((float *)&v6 + 1) > COERCE_FLOAT(HIDWORD(*(void *)a1)))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 8) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      uint64_t v19 = *(void *)(a2 - 8);
      uint64_t v20 = *(void *)(a1 + 24);
      if (*((float *)&v19 + 1) <= *((float *)&v20 + 1)) {
        return 1;
      }
      *(_DWORD *)(a1 + 24) = v19;
      *(_DWORD *)(a2 - 8) = v20;
      int v21 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v21;
      uint64_t v22 = *(void *)(a1 + 16);
      unint64_t v23 = *(void *)(a1 + 24);
      unint64_t v24 = HIDWORD(v23);
      if (*((float *)&v23 + 1) <= *((float *)&v22 + 1)) {
        return 1;
      }
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v22;
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 16);
      if (*((float *)&v26 + 1) <= *((float *)&v25 + 1)) {
        return 1;
      }
      *(_DWORD *)(a1 + 8) = v26;
      *(_DWORD *)(a1 + 12) = v24;
      *(void *)(a1 + 16) = v25;
      uint64_t v27 = *(void *)a1;
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = HIDWORD(*(void *)a1);
      if (*((float *)&v28 + 1) <= COERCE_FLOAT(HIDWORD(*(void *)a1))) {
        return 1;
      }
      *(_DWORD *)a1 = v28;
      *(_DWORD *)(a1 + 4) = v24;
      BOOL result = 1;
      *(_DWORD *)(a1 + 8) = v27;
      *(_DWORD *)(a1 + 12) = v29;
      return result;
    default:
      uint64_t v9 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v10 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)(v10 + 4);
    uint64_t v14 = *v9;
    if (v13 > COERCE_FLOAT(HIDWORD(*v9)))
    {
      int v15 = *(_DWORD *)v10;
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16) {
          break;
        }
        uint64_t v14 = *(void *)(v17 + 8);
        v16 -= 8;
        if (v13 <= *((float *)&v14 + 1))
        {
          uint64_t v18 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v18 = v15;
      *(float *)(v18 + 4) = v13;
      if (++v12 == 8) {
        return v10 + 8 == a2;
      }
    }
    uint64_t v9 = (uint64_t *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2) {
      return 1;
    }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(a1, a2, a3);
  uint64_t v8 = *(void *)a3;
  LODWORD(result) = HIDWORD(*(void *)a4);
  if (result > COERCE_FLOAT(HIDWORD(*(void *)a3)))
  {
    *(_DWORD *)a3 = *(void *)a4;
    *(_DWORD *)a4 = v8;
    int v10 = *((_DWORD *)a3 + 1);
    a3[1] = *(float *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    uint64_t v11 = *(void *)a2;
    LODWORD(result) = HIDWORD(*(void *)a3);
    if (result > COERCE_FLOAT(HIDWORD(*(void *)a2)))
    {
      *(_DWORD *)a2 = *(void *)a3;
      *(_DWORD *)a3 = v11;
      int v12 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v12;
      uint64_t v13 = *(void *)a1;
      LODWORD(result) = HIDWORD(*(void *)a2);
      if (result > COERCE_FLOAT(HIDWORD(*(void *)a1)))
      {
        *(_DWORD *)a1 = *(void *)a2;
        *(_DWORD *)a2 = v13;
        float result = a1[1];
        a1[1] = a2[1];
        a2[1] = result;
      }
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  int v2 = (void *)*((void *)this + 91);
  if (v2)
  {
    *((void *)this + 92) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 88);
  if (v3)
  {
    *((void *)this + 89) = v3;
    operator delete(v3);
  }
  int v12 = (void **)((char *)this + 680);
  std::vector<cv3d::cv::gess::isochart::ChartInfo>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v4 = (void *)*((void *)this + 79);
  if (v4)
  {
    *((void *)this + 80) = v4;
    operator delete(v4);
  }
  int v12 = (void **)((char *)this + 608);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v12);
  int v12 = (void **)((char *)this + 584);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v12);
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    uint64_t v6 = *(void **)((char *)this + i + 560);
    if (v6)
    {
      *(void *)((char *)this + i + 568) = v6;
      operator delete(v6);
    }
  }
  for (uint64_t j = 0; j != -96; j -= 24)
  {
    uint64_t v8 = *(void **)((char *)this + j + 464);
    if (v8)
    {
      *(void *)((char *)this + j + 472) = v8;
      operator delete(v8);
    }
  }
  for (uint64_t k = 0; k != -96; k -= 24)
  {
    int v10 = *(void **)((char *)this + k + 368);
    if (v10)
    {
      *(void *)((char *)this + k + 376) = v10;
      operator delete(v10);
    }
  }
  int v12 = (void **)((char *)this + 224);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v11 = (void *)*((void *)this + 10);
  if (v11)
  {
    *((void *)this + 11) = v11;
    operator delete(v11);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](this);
}

void std::vector<cv3d::cv::gess::isochart::ChartInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::isochart::ChartInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    float v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<cv3d::cv::gess::isochart::ChartInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 232)
  {
    for (uint64_t j = 0; j != -216; j -= 72)
    {
      uint64_t v6 = *(void **)(i + j - 24);
      if (v6)
      {
        *(void *)(i + j - 16) = v6;
        operator delete(v6);
      }
    }
  }
  *(void *)(a1 + 8) = a2;
}

void *std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::Matrix3T<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 36 * a2;
    uint64_t v6 = 36 * a2;
    do
    {
      *(_DWORD *)(v4 + 32) = 1065353216;
      *(_OWORD *)uint64_t v4 = xmmword_24F5787AC;
      *(_OWORD *)(v4 + 16) = unk_24F5787BC;
      v4 += 36;
      v6 -= 36;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_24F4ED130(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::math::Matrix3T<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Matrix3T<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[36 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Matrix3T<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(36 * a2);
}

uint64_t std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  std::vector<unsigned int> __p = v10;
  int v15 = v11;
  uint64_t v17 = &v10[32 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *((_DWORD *)v11 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  uint64_t v16 = v11 + 32;
  std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_24F4ED300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 32);
    v2 -= 32;
    *(_DWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  char *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24F4ED6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  BOOL v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        }
        else
        {
          long long v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v11 = a3[23];
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *((void *)a3 + 1);
        }
        if (size != v11) {
          goto LABEL_22;
        }
        if (v12 >= 0) {
          uint64_t v13 = a3;
        }
        else {
          uint64_t v13 = *(unsigned __int8 **)a3;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            uint64_t v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15) {
                goto LABEL_29;
              }
            }
LABEL_22:
            BOOL v16 = 0;
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_23:
            }
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            BOOL v16 = *(void *)(*v3 + 32) == (void)cv3d::cv::gess::util::os::GessTypeID<unsigned int>;
            if (v9 < 0) {
              goto LABEL_23;
            }
          }
          if (v16) {
            return v6;
          }
          goto LABEL_25;
        }
        uint64_t v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_29;
        }
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      uint64_t v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

void std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_2700D8AC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D8AC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = **(void **)(result + 8);
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * *a3);
  *(_DWORD *)(v4 + 4 * *a3) = v5;
  return result;
}

void *std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float *cv3d::cv::gess::math::Matrix3T<float>::operator*@<X0>(float *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  *(_DWORD *)(a3 + 32) = 1065353216;
  *(_OWORD *)a3 = xmmword_24F5787AC;
  *(_OWORD *)(a3 + 16) = unk_24F5787BC;
  do
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = 0;
      float v7 = 0.0;
      long long v8 = result;
      do
      {
        float v9 = *v8;
        v8 += 3;
        float v7 = v7 + (float)(v9 * *(float *)(v5 + v6));
        v6 += 4;
      }
      while (v6 != 12);
      *(float *)(a3 + 4 * (3 * v4++ + v3)) = v7;
      v5 += 12;
    }
    while (v4 != 3);
    ++v3;
    ++result;
  }
  while (v3 != 3);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_24F4EDC60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    float result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        float result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

BOOL cv3d::cv::gess::internal::BlenderUV2ParameterizeWithDiagonal(uint64_t a1, float *a2, uint64_t a3)
{
  v76.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  char v109 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:is_quadmesh_diagonal");
  LOBYTE(v108.__begin_) = 0;
  unsigned int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 32), (uint64_t)&v108, (unsigned __int8 *)__p);
  if (SBYTE7(v96) < 0) {
    operator delete(__p[0]);
  }
  if (v6 != -1) {
    char v109 = 1;
  }
  memset(&v108, 0, sizeof(v108));
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  unsigned int v104 = 0;
  cv3d::cv::gess::internal::CalculateFaceLabels(a1, a2, &v108, &v105, &v104);
  size_t v7 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  LOBYTE(__p[0]) = 0;
  std::vector<unsigned char>::vector(v103, v7, __p);
  if (v109 && v6 != -1)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
    LOBYTE(v102.__begin_) = 0;
    std::vector<BOOL>::vector(__p, v8, (unsigned __int8 *)&v102);
    unint64_t v9 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
    LOBYTE(v100) = 0;
    std::vector<BOOL>::vector(&v102, v9, (unsigned __int8 *)&v100);
    uint64_t v10 = a2;
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v100, 3uLL);
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      uint64_t v11 = 0;
      unsigned int v12 = 0;
      do
      {
        LODWORD(v93) = v12;
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)&v93, &v100);
        for (uint64_t i = 0; i != 12; i += 4)
        {
          LODWORD(v93) = v6;
          uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)&v93);
          unint64_t v15 = *(unsigned int *)&v100[i];
          if (*(void *)(v14 + 48) <= v15) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          if ((*(void *)(*(void *)(v14 + 40) + ((v15 >> 3) & 0x1FFFFFF8)) >> v15)) {
            ++*((unsigned char *)v103[0] + v11);
          }
        }
        uint64_t v17 = *(void *)(a1 + 152);
        uint64_t v16 = *(void *)(a1 + 160);
        uint64_t v11 = ++v12;
      }
      while (v12 < (unint64_t)((v16 - v17) >> 2));
      if (v16 != v17)
      {
        unint64_t v18 = 0;
        unsigned int v19 = 0;
        do
        {
          uint64_t v20 = *(void *)&v102.__begin_[2 * (v18 >> 6)];
          if ((v20 & (1 << v18)) == 0)
          {
            *(void *)&v102.__begin_[2 * (v18 >> 6)] = v20 | (1 << v18);
            LODWORD(v93) = v19;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)&v93, &v100);
            if (*((unsigned __int8 *)v103[0] + v18) > 2u) {
              __assert_rtn("BlenderUV2ParameterizeWithDiagonal", "BlenderUV2WithDiagonal.cpp", 57, "face_diagonal_count[fi] <= 2");
            }
            for (uint64_t j = 0; j != 12; j += 4)
            {
              unint64_t v22 = (unsigned int *)&v100[j];
              unint64_t v23 = *(unsigned int *)&v100[j];
              unint64_t v24 = v23 >> 6;
              uint64_t v25 = 1 << v23;
              uint64_t v26 = *((void *)__p[0] + v24);
              if ((v25 & v26) == 0)
              {
                *((void *)__p[0] + v24) = v25 | v26;
                uint64_t v27 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v22);
                *(void *)((char *)__p[0] + (((unint64_t)*v27 >> 3) & 0x1FFFFFF8)) |= 1 << *v27;
                uint64_t v28 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v100[j]);
                uint64_t v29 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v28);
                if ((*v29 & v30) == 0)
                {
                  LODWORD(v93) = v6;
                  uint64_t v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)&v93);
                  unint64_t v32 = *(unsigned int *)&v100[j];
                  if (*(void *)(v31 + 48) <= v32) {
                    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                  }
                  if ((*(void *)(*(void *)(v31 + 40) + ((v32 >> 3) & 0x1FFFFFF8)) >> v32))
                  {
                    unint64_t v33 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v100[j]);
                    unint64_t v34 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v33) + 16);
                    unsigned int v35 = v108.__begin_[v18];
                    unsigned int v36 = v108.__begin_[v34];
                    if (v35 != v36)
                    {
                      if (*((unsigned char *)v103[0] + v34) == 2)
                      {
                        v108.__begin_[v18] = v36;
                      }
                      else
                      {
                        v108.__begin_[v34] = v35;
                        *(void *)((char *)v102.__begin_ + ((v34 >> 3) & 0x1FFFFFF8)) |= 1 << v34;
                      }
                    }
                  }
                }
              }
            }
            uint64_t v17 = *(void *)(a1 + 152);
            uint64_t v16 = *(void *)(a1 + 160);
          }
          unint64_t v18 = ++v19;
        }
        while (v19 < (unint64_t)((v16 - v17) >> 2));
      }
    }
    if (v100)
    {
      unint64_t v101 = v100;
      operator delete(v100);
    }
    a2 = v10;
    if (v102.__begin_) {
      operator delete(v102.__begin_);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  memset(&v102, 0, sizeof(v102));
  std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(&v100, v104);
  cv3d::cv::gess::internal::SeperateChartGroups(a1, (uint64_t)a2, (uint64_t *)&v100, &v105, &v108, &v102);
  unsigned int v99 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v37 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v99, (unsigned __int8 *)__p);
  BOOL v38 = v37;
  if (SBYTE7(v96) < 0)
  {
    operator delete(__p[0]);
    if (v38) {
      goto LABEL_39;
    }
LABEL_48:
    BOOL v42 = 0;
    unsigned int v41 = -1;
    unsigned int v40 = -1;
    unsigned int v39 = -1;
    goto LABEL_52;
  }
  if (!v37) {
    goto LABEL_48;
  }
LABEL_39:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v93) = 0;
  unsigned int v39 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v93, (unsigned __int8 *)__p);
  if (SBYTE7(v96) < 0) {
    operator delete(__p[0]);
  }
  if (v39 == -1)
  {
    BOOL v42 = 0;
    unsigned int v41 = -1;
    unsigned int v40 = -1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v94) = 0;
    unint64_t v93 = 0;
    unsigned int v40 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v93, (unsigned __int8 *)__p);
    if (SBYTE7(v96) < 0) {
      operator delete(__p[0]);
    }
    if (v40 == -1)
    {
      BOOL v42 = 0;
      unsigned int v41 = -1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
      unint64_t v93 = 0;
      unsigned int v41 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v93, (unsigned __int8 *)__p);
      BOOL v42 = v41 != -1;
      if (SBYTE7(v96) < 0) {
        operator delete(__p[0]);
      }
    }
  }
LABEL_52:
  LODWORD(__p[0]) = v41;
  int v43 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p);
  BOOL v77 = v42;
  uint64_t v78 = (uint64_t)a2;
  v98[0] = v99;
  v98[1] = v39;
  v98[2] = v40;
  v98[3] = v41;
  v98[4] = v6;
  *(_OWORD *)std::string __p = 0u;
  long long v96 = 0u;
  int v97 = 1065353216;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v93, 3uLL);
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  begiuint64_t n = v102.__begin_;
  std::vector<unsigned int>::pointer end = v102.__end_;
  LODWORD(v89[0]) = v99;
  uint64_t v46 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)v89);
  if (end - begin != (*(uint64_t (**)(uint64_t))(*(void *)v46 + 16))(v46)) {
    __assert_rtn("BlenderUV2ParameterizeWithDiagonal", "BlenderUV2WithDiagonal.cpp", 111, "g_starts.size() == mesh.attribute(m_chart_g_ah).Size()");
  }
  std::vector<unsigned int>::pointer v47 = v102.__begin_;
  if (v102.__end_ != v102.__begin_)
  {
    unint64_t v48 = 0;
    unsigned int v81 = 0;
    int v49 = 0;
    unint64_t v50 = v102.__end_ - v102.__begin_;
    unsigned int v82 = v40;
    do
    {
      int v80 = v49;
      if (v50 - 1 <= v48) {
        uint64_t v51 = (*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
      }
      else {
        LODWORD(v51) = v47[v81 + 1];
      }
      uint64_t v52 = v47[v48];
      unint64_t v79 = (v51 - v52);
      if (v51 > v52)
      {
        unsigned int v84 = v108.__begin_[v52];
        unsigned int v53 = v47[v48];
        int v83 = v51;
        do
        {
          if (v108.__begin_[v53] != v84) {
            __assert_rtn("BlenderUV2ParameterizeWithDiagonal", "BlenderUV2WithDiagonal.cpp", 117, "face_labels[i] == label");
          }
          long long v54 = v100;
          std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v89, 3uLL);
          LODWORD(v86[0]) = v53;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)v86, v89);
          uint64_t v55 = 0;
          int v88 = 0;
          uint64_t v56 = &v54[36 * v84];
          uint64_t v87 = 0;
          do
          {
            LODWORD(v86[0]) = *((_DWORD *)v89[0] + v55);
            if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)v86))
            {
              LODWORD(v86[0]) = *((_DWORD *)v89[0] + v55);
              uint64_t v57 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)v86);
              if (!v57) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              *((_DWORD *)&v87 + v55) = *((float *)v57 + 5);
            }
            else
            {
              (*(void (**)(void *))(*v43 + 48))(v43);
              int v58 = (*(uint64_t (**)(void *))(*v43 + 16))(v43);
              LODWORD(v85) = *((_DWORD *)v89[0] + v55);
              v86[0] = &v85;
              unint64_t v59 = (v58 - 1);
              *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)__p, (unsigned int *)&v85, (uint64_t)&std::piecewise_construct, v86)+ 5) = (float)v59;
              *((_DWORD *)&v87 + v55) = v59;
              unint64_t v60 = (long long *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v89[0] + v55));
              uint64_t v61 = 0;
              long long v85 = *v60;
              v86[0] = 0;
              v86[1] = 0;
              BOOL v62 = (float *)v56;
              do
              {
                uint64_t v63 = 0;
                float v64 = 0.0;
                unint64_t v65 = v62;
                do
                {
                  float v66 = *v65;
                  v65 += 3;
                  float v64 = v64 + (float)(v66 * *(float *)((char *)&v86[-2] + v63));
                  v63 += 4;
                }
                while (v63 != 12);
                *((float *)v86 + v61++) = v64;
                ++v62;
              }
              while (v61 != 3);
              uint64_t v67 = v43[5];
              if (v59 >= (v43[6] - v67) >> 3) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(_DWORD **)(v67 + 8 * v59) = v86[0];
            }
            ++v55;
          }
          while (v55 != 3);
          uint64_t v68 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v82, v53);
          *(void *)uint64_t v68 = v87;
          *(_DWORD *)(v68 + 8) = v88;
          LODWORD(v51) = v83;
          if (v89[0])
          {
            v89[1] = v89[0];
            operator delete(v89[0]);
          }
          ++v53;
        }
        while (v53 != v83);
      }
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v90, v79);
      if (v51 > v52)
      {
        uint64_t v69 = 0;
        do
        {
          *((_DWORD *)v90 + v69) = v52 + v69;
          ++v69;
        }
        while (v52 - v51 + v69);
      }
      int v49 = v80 | cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(a1, (uint64_t *)&v90, v103, v98, &v109);
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(__p);
      std::vector<unsigned int>::pointer v47 = v102.__begin_;
      unint64_t v50 = v102.__end_ - v102.__begin_;
      unint64_t v48 = ++v81;
    }
    while (v50 > v81);
    if (v49) {
      cv3d::cv::gess::alg::SortFaceByGroupID32Bit((uint64_t **)a1, v70);
    }
  }
  v71.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(unsigned char *)(a3 + 80))
  {
    *(double *)a3 = (double)(v71.__d_.__rep_ - v76.__d_.__rep_) / 1000000.0;
    LODWORD(v89[0]) = v99;
    uint64_t v72 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)v89);
    *(void *)(a3 + 40) = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 16))(v72);
  }
  v73.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::internal::PerformPacking((uint64_t **)a1, v78, a3);
  v74.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(unsigned char *)(a3 + 80))
  {
    *(double *)(a3 + 48) = (double)(v74.__d_.__rep_ - v73.__d_.__rep_) / 1000000.0;
    *(void *)(a3 + 56) = *(unsigned __int8 *)(v78 + 8);
  }
  if (v90)
  {
    uint64_t v91 = v90;
    operator delete(v90);
  }
  if (v93)
  {
    unint64_t v94 = v93;
    operator delete(v93);
  }
  if (v100)
  {
    unint64_t v101 = v100;
    operator delete(v100);
  }
  if (v102.__begin_)
  {
    v102.__end_ = v102.__begin_;
    operator delete(v102.__begin_);
  }
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }
  if (v108.__begin_)
  {
    v108.__end_ = v108.__begin_;
    operator delete(v108.__begin_);
  }
  return v77;
}

void sub_24F4EE7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  uint64_t v44 = *(void **)(v42 - 224);
  if (v44)
  {
    *(void *)(v42 - 216) = v44;
    operator delete(v44);
  }
  uint64_t v45 = *(void **)(v42 - 200);
  if (v45)
  {
    *(void *)(v42 - 192) = v45;
    operator delete(v45);
  }
  uint64_t v46 = *(void **)(v42 - 176);
  if (v46)
  {
    *(void *)(v42 - 168) = v46;
    operator delete(v46);
  }
  std::vector<unsigned int>::pointer v47 = *(void **)(v42 - 144);
  if (v47)
  {
    *(void *)(v42 - 136) = v47;
    operator delete(v47);
  }
  unint64_t v48 = *(void **)(v42 - 120);
  if (v48)
  {
    *(void *)(v42 - 112) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(uint64_t a1, uint64_t *a2, void *a3, unsigned int *a4, unsigned char *a5)
{
  unsigned int v25 = -1;
  unsigned int v26 = -1;
  if (!cv3d::cv::gess::internal::CheckSelfIntersectWithDiagonal(a1, a2, a4, a5, &v26, &v25)) {
    return 0;
  }
  unint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  cv3d::cv::gess::internal::BipartitionChartWithDiagonal(a1, a2, a3, a4, &v26, &v25, a5, (char **)&v22, (char **)&__p);
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  float v13 = (unsigned int *)__p;
  unsigned int v12 = v20;
  if (v23 - (unsigned char *)v22 >= (unint64_t)((unsigned char *)v20 - (unsigned char *)__p))
  {
    unint64_t v15 = (unsigned int *)v22;
    uint64_t v10 = __p;
  }
  else
  {
    unint64_t v22 = __p;
    unint64_t v23 = v20;
    std::string __p = v10;
    uint64_t v20 = v11;
    uint64_t v14 = v24;
    uint64_t v24 = v21;
    uint64_t v21 = v14;
    unint64_t v15 = v13;
    unsigned int v12 = v11;
  }
  BOOL v16 = v10 != v12;
  if (v10 != v12)
  {
    int v18 = *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, a4[1], *v15);
    cv3d::cv::gess::internal::AssignChartToNewGroup(a1, &__p, a4, &v18);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(a1, &v22, a3, a4, a5);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(a1, &__p, a3, a4, a5);
    unsigned int v12 = __p;
  }
  if (v12)
  {
    uint64_t v20 = v12;
    operator delete(v12);
  }
  if (v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
  return v16;
}

void sub_24F4EEB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::CheckSelfIntersectWithDiagonal(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned char *a4, unsigned int *a5, unsigned int *a6)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v82, 3uLL);
  unint64_t v79 = 0;
  int v80 = 0;
  unint64_t v81 = 0;
  uint64_t v10 = *a2;
  if (a2[1] == *a2) {
    goto LABEL_26;
  }
  uint64_t v68 = a4;
  uint64_t v69 = a5;
  uint64_t v67 = a6;
  unint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = a1;
  uint64_t v14 = a3 + 2;
  unint64_t v15 = (uint64_t *)(a1 + 80);
  do
  {
    int v70 = v12;
    cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v13, (unsigned int *)(v10 + 4 * v11), v82);
    uint64_t v16 = 0;
    do
    {
      if (cv3d::cv::gess::internal::IsChartBoundary(v13, (unsigned int *)v82[0] + v16, a3 + 1, v14))
      {
        unint64_t v17 = *(unsigned int *)(cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v13, *v14, *(_DWORD *)(*a2 + 4 * v11))+ 4 * v16);
        uint64_t v18 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v13, *v14, *(_DWORD *)(*a2 + 4 * v11));
        uint64_t v19 = (v16 + 1);
        if (v16 == 2) {
          uint64_t v19 = 0;
        }
        unint64_t v20 = *(unsigned int *)(v18 + 4 * v19);
        LODWORD(v76) = a3[3];
        uint64_t v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v15, (unsigned int *)&v76);
        uint64_t v22 = *(void *)(v21 + 40);
        if (v17 >= (*(void *)(v21 + 48) - v22) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        LODWORD(v76) = a3[3];
        uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v15, (unsigned int *)&v76);
        uint64_t v24 = *(void *)(v23 + 40);
        if (v20 >= (*(void *)(v23 + 48) - v24) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        unsigned int v25 = (void **)(v22 + 8 * v17);
        int v26 = *(_DWORD *)(*a2 + 4 * v11);
        int v27 = *(_DWORD *)v25;
        std::chrono::system_clock::time_point v76 = *v25;
        BOOL v77 = *(void **)(v24 + 8 * v20);
        *(void *)&long long v78 = __PAIR64__(v20, v17);
        DWORD2(v78) = v26;
        HIDWORD(v78) = *((_DWORD *)v82[0] + v16);
        uint64_t v28 = v80;
        if ((unint64_t)v80 >= v81)
        {
          uint64_t v29 = std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge>((uint64_t *)&v79, (uint64_t)&v76);
        }
        else
        {
          *(_DWORD *)int v80 = v27;
          *((_DWORD *)v28 + 1) = HIDWORD(v76);
          *((void *)v28 + 1) = v77;
          *((_OWORD *)v28 + 1) = v78;
          uint64_t v29 = (uint64_t)(v28 + 32);
        }
        int v80 = (char *)v29;
        ++v16;
        uint64_t v13 = a1;
      }
      else
      {
        ++v16;
      }
    }
    while (v16 != 3);
    unint64_t v11 = (v70 + 1);
    uint64_t v10 = *a2;
    int v12 = v70 + 1;
  }
  while (v11 < (a2[1] - *a2) >> 2);
  uint64_t v31 = v68;
  uint64_t v30 = v69;
  if (v79 == v80) {
    goto LABEL_26;
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v76, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  unint64_t v32 = (char *)v79;
  unint64_t v33 = v80;
  if (v80 - (unsigned char *)v79 == 32)
  {
LABEL_19:
    char v34 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    unsigned int v38 = 0;
    unsigned int v39 = (uint64_t *)(a1 + 32);
    uint64_t v40 = a1 + 104;
    while (1)
    {
      unint64_t v72 = v37;
      unint64_t v37 = ++v38;
      unint64_t v41 = (v33 - v32) >> 5;
      if (v41 > v38) {
        break;
      }
LABEL_61:
      if (v41 - 1 <= v37) {
        goto LABEL_19;
      }
    }
    uint64_t v42 = v38;
    unsigned int v43 = v38;
    while (1)
    {
      uint64_t v44 = &v32[32 * v72];
      uint64_t v45 = &v32[32 * v42];
      uint64_t v46 = (unsigned int *)(v44 + 24);
      std::vector<unsigned int>::pointer v47 = (unsigned int *)(v45 + 24);
      if (*((_DWORD *)v44 + 6) != *((_DWORD *)v45 + 6))
      {
        int v48 = *((_DWORD *)v44 + 4);
        int v49 = *((_DWORD *)v45 + 4);
        if (v48 != v49)
        {
          int v50 = *(_DWORD *)&v32[32 * v42 + 20];
          if (v48 != v50)
          {
            int v51 = *(_DWORD *)&v32[32 * v72 + 20];
            if (v51 != v49
              && v51 != v50
              && cv3d::cv::gess::internal::ChartBoundaryEdge::Intersects((float *)v44, (float *)v45))
            {
              if (!*v31 || a3[4] == -1) {
                break;
              }
              v83[0] = *v46;
              cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v83, &v76);
              unint64_t v66 = v37;
              unsigned int v71 = v38;
              v83[0] = *v47;
              cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v83, __p);
              unint64_t v52 = 0;
              char v53 = 0;
              do
              {
                v83[0] = a3[4];
                uint64_t v54 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v39, v83);
                unint64_t v55 = *((unsigned int *)v76 + v52);
                if (*(void *)(v54 + 48) <= v55) {
                  __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                }
                if ((*(void *)(*(void *)(v54 + 40) + ((v55 >> 3) & 0x1FFFFFF8)) >> v55))
                {
                  for (uint64_t i = 0; i != 12; i += 4)
                  {
                    v83[0] = a3[4];
                    uint64_t v57 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v39, v83);
                    unint64_t v58 = *(unsigned int *)((char *)__p[0] + i);
                    if (*(void *)(v57 + 48) <= v58) {
                      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                    }
                    if ((*(void *)(*(void *)(v57 + 40) + ((v58 >> 3) & 0x1FFFFFF8)) >> v58))
                    {
                      unint64_t v59 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v40, (unsigned int *)v76 + v52);
                      if (*v59 == *(_DWORD *)((char *)__p[0] + i)
                        || (unint64_t v60 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v40, (unsigned int *)v76 + v52),
                            uint64_t v61 = cv3d::cv::gess::mesh::Topology::h(v40, v60),
                            BOOL v62 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v40, (unsigned int *)((char *)__p[0] + i)), *(_DWORD *)(v61 + 16) == *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v40, v62) + 16)))
                      {
                        v83[0] = a3[4];
                        uint64_t v63 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v39, v83);
                        unint64_t v64 = *((unsigned int *)v76 + v52);
                        if (*(void *)(v63 + 48) <= v64) {
                          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                        }
                        v53 |= *(void *)(*(void *)(v63 + 40) + ((v64 >> 3) & 0x1FFFFFF8)) >> v64;
                      }
                    }
                  }
                }
              }
              while (v52++ < 2);
              uint64_t v31 = v68;
              uint64_t v30 = v69;
              unsigned int v38 = v71;
              unint64_t v37 = v66;
              if ((v53 & 1) == 0) {
                break;
              }
            }
          }
        }
      }
      unint64_t v32 = (char *)v79;
      unint64_t v33 = v80;
      unint64_t v41 = (v80 - (unsigned char *)v79) >> 5;
      uint64_t v42 = ++v43;
      if (v41 <= v43) {
        goto LABEL_61;
      }
    }
    unsigned int *v30 = *v46;
    *uint64_t v67 = *v47;
    char v34 = 1;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v76)
  {
    BOOL v77 = v76;
    operator delete(v76);
  }
  if ((v34 & 1) == 0) {
LABEL_26:
  }
    uint64_t v35 = 0;
  else {
    uint64_t v35 = 1;
  }
  if (v79)
  {
    int v80 = (char *)v79;
    operator delete(v79);
  }
  if (v82[0])
  {
    v82[1] = v82[0];
    operator delete(v82[0]);
  }
  return v35;
}

void sub_24F4EF174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  uint64_t v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(void *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::BipartitionChartWithDiagonal(uint64_t a1, uint64_t *a2, void *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned char *a7, char **a8, char **a9)
{
  if (*a5 == -1 || *a6 == -1) {
    cv3d::cv::gess::internal::BipartitionChartWithDiagonal();
  }
  if (*a5 == *a6) {
    cv3d::cv::gess::internal::BipartitionChartWithDiagonal();
  }
  if ((unint64_t)(a2[1] - *a2) <= 7) {
    cv3d::cv::gess::internal::BipartitionChartWithDiagonal();
  }
  long long v89 = 0u;
  long long v87 = 0u;
  memset(v88, 0, sizeof(v88));
  memset(v86, 0, sizeof(v86));
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v88, a5);
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v86, a6);
  uint64_t v15 = *(void *)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 160);
  uint64_t v16 = v14 - v15;
  int v80 = a7;
  if (v14 == v15)
  {
    unint64_t v17 = 0;
  }
  else
  {
    if (v16 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = operator new(v14 - v15);
    bzero(v17, v16 & 0xFFFFFFFFFFFFFFFCLL);
  }
  *((_DWORD *)v17 + *a5) = 1;
  *((_DWORD *)v17 + *a6) = 2;
  uint64_t v18 = a4 + 1;
  uint64_t v19 = a4 + 2;
  while (*((void *)&v89 + 1))
  {
    LODWORD(v85[0]) = *(_DWORD *)(*(void *)(*((void *)&v88[0] + 1)
                                            + (((unint64_t)v89 >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * (v89 & 0x3FF));
    *(void *)&long long v89 = v89 + 1;
    --*((void *)&v89 + 1);
    if ((unint64_t)v89 >= 0x800)
    {
      operator delete(**((void ***)&v88[0] + 1));
      *((void *)&v88[0] + 1) += 8;
      *(void *)&long long v89 = v89 - 1024;
    }
    int v20 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)v85);
    LODWORD(__p[0]) = v20;
    do
    {
      LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
      if (!cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)__p, v18, v19))
      {
        uint64_t v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
        v90[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v21) + 16);
        if (!*((_DWORD *)v17 + v90[0]))
        {
          std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v88, v90);
          *((_DWORD *)v17 + v90[0]) = 1;
        }
      }
    }
    while (LODWORD(__p[0]) != v20);
    uint64_t v22 = *((void *)&v87 + 1);
    if (*((void *)&v87 + 1))
    {
LABEL_21:
      LODWORD(v85[0]) = *(_DWORD *)(*(void *)(*((void *)&v86[0] + 1)
                                              + (((unint64_t)v87 >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * (v87 & 0x3FF));
      *(void *)&long long v87 = v87 + 1;
      *((void *)&v87 + 1) = v22 - 1;
      if ((unint64_t)v87 >= 0x800)
      {
        operator delete(**((void ***)&v86[0] + 1));
        *((void *)&v86[0] + 1) += 8;
        *(void *)&long long v87 = v87 - 1024;
      }
      int v23 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)v85);
      LODWORD(__p[0]) = v23;
      do
      {
        LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
        if (!cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)__p, v18, v19))
        {
          uint64_t v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          v90[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v24) + 16);
          if (!*((_DWORD *)v17 + v90[0]))
          {
            std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v86, v90);
            *((_DWORD *)v17 + v90[0]) = 2;
          }
        }
      }
      while (LODWORD(__p[0]) != v23);
    }
  }
  uint64_t v22 = *((void *)&v87 + 1);
  if (*((void *)&v87 + 1)) {
    goto LABEL_21;
  }
  if (*v80 && a4[4] != -1)
  {
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v85, 3uLL);
    unint64_t v25 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
    LOBYTE(v90[0]) = 0;
    std::vector<BOOL>::vector(__p, v25, (unsigned __int8 *)v90);
    uint64_t v27 = *(void *)(a1 + 152);
    uint64_t v26 = *(void *)(a1 + 160);
    if (v26 != v27)
    {
      unint64_t v28 = 0;
      unsigned int v29 = 0;
      do
      {
        uint64_t v30 = *((void *)__p[0] + (v28 >> 6));
        if ((v30 & (1 << v28)) == 0)
        {
          *((void *)__p[0] + (v28 >> 6)) = v30 | (1 << v28);
          if (*((_DWORD *)v17 + v28))
          {
            v90[0] = v29;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v90, v85);
            for (uint64_t i = 0; i != 12; i += 4)
            {
              unint64_t v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v85[0] + i));
              unint64_t v33 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v32);
              if ((*v33 & v34) == 0)
              {
                v90[0] = a4[4];
                uint64_t v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), v90);
                unint64_t v36 = *(unsigned int *)((char *)v85[0] + i);
                if (*(void *)(v35 + 48) <= v36) {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                if ((*(void *)(*(void *)(v35 + 40) + ((v36 >> 3) & 0x1FFFFFF8)) >> v36))
                {
                  unint64_t v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v85[0] + i));
                  unint64_t v38 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v37) + 16);
                  int v39 = *((_DWORD *)v17 + v38);
                  if (v39)
                  {
                    int v40 = *((_DWORD *)v17 + v28);
                    if (v39 != v40)
                    {
                      if (*(unsigned char *)(*a3 + v38) == 2)
                      {
                        *((_DWORD *)v17 + v28) = v39;
                      }
                      else
                      {
                        *((_DWORD *)v17 + v38) = v40;
                        *(void *)((char *)__p[0] + ((v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
                      }
                    }
                  }
                }
              }
            }
            uint64_t v27 = *(void *)(a1 + 152);
            uint64_t v26 = *(void *)(a1 + 160);
          }
        }
        unint64_t v28 = ++v29;
      }
      while (v29 < (unint64_t)((v26 - v27) >> 2));
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v85[0])
    {
      v85[1] = v85[0];
      operator delete(v85[0]);
    }
  }
  a8[1] = *a8;
  unint64_t v41 = *a9;
  a9[1] = *a9;
  uint64_t v42 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = *(unsigned int *)(v42 + 4 * v43);
      int v45 = *((_DWORD *)v17 + v44);
      if (v45 == 2)
      {
        uint64_t v54 = a9[1];
        unint64_t v53 = (unint64_t)a9[2];
        if ((unint64_t)v54 >= v53)
        {
          uint64_t v58 = (v54 - *a9) >> 2;
          if ((unint64_t)(v58 + 1) >> 62) {
            goto LABEL_114;
          }
          uint64_t v59 = v53 - (void)*a9;
          uint64_t v60 = v59 >> 1;
          if (v59 >> 1 <= (unint64_t)(v58 + 1)) {
            uint64_t v60 = v58 + 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61)
          {
            BOOL v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a9 + 2), v61);
            LODWORD(v44) = *(_DWORD *)(v42 + 4 * v43);
          }
          else
          {
            BOOL v62 = 0;
          }
          int v70 = &v62[4 * v58];
          *(_DWORD *)int v70 = v44;
          unint64_t v55 = v70 + 4;
          unint64_t v72 = *a9;
          unsigned int v71 = a9[1];
          if (v71 != *a9)
          {
            do
            {
              int v73 = *((_DWORD *)v71 - 1);
              v71 -= 4;
              *((_DWORD *)v70 - 1) = v73;
              v70 -= 4;
            }
            while (v71 != v72);
            unsigned int v71 = *a9;
          }
          *a9 = v70;
          a9[1] = v55;
          a9[2] = &v62[4 * v61];
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v54 = v44;
          unint64_t v55 = v54 + 4;
        }
        a9[1] = v55;
        goto LABEL_102;
      }
      if (v45 == 1)
      {
        std::vector<unsigned int>::pointer v47 = a8[1];
        unint64_t v46 = (unint64_t)a8[2];
        if ((unint64_t)v47 >= v46)
        {
          uint64_t v48 = (v47 - *a8) >> 2;
          if ((unint64_t)(v48 + 1) >> 62) {
            goto LABEL_114;
          }
          uint64_t v49 = v46 - (void)*a8;
          uint64_t v50 = v49 >> 1;
          if (v49 >> 1 <= (unint64_t)(v48 + 1)) {
            uint64_t v50 = v48 + 1;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v50;
          }
          if (v51)
          {
            unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a8 + 2), v51);
            LODWORD(v44) = *(_DWORD *)(v42 + 4 * v43);
          }
          else
          {
            unint64_t v52 = 0;
          }
          unint64_t v66 = &v52[4 * v48];
          *(_DWORD *)unint64_t v66 = v44;
          uint64_t v57 = v66 + 4;
          uint64_t v68 = *a8;
          uint64_t v67 = a8[1];
          if (v67 != *a8)
          {
            do
            {
              int v69 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *((_DWORD *)v66 - 1) = v69;
              v66 -= 4;
            }
            while (v67 != v68);
            goto LABEL_98;
          }
          goto LABEL_99;
        }
      }
      else
      {
        std::vector<unsigned int>::pointer v47 = a8[1];
        unint64_t v56 = (unint64_t)a8[2];
        if ((unint64_t)v47 >= v56)
        {
          uint64_t v63 = (v47 - *a8) >> 2;
          if ((unint64_t)(v63 + 1) >> 62) {
LABEL_114:
          }
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          uint64_t v64 = v56 - (void)*a8;
          uint64_t v65 = v64 >> 1;
          if (v64 >> 1 <= (unint64_t)(v63 + 1)) {
            uint64_t v65 = v63 + 1;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v65;
          }
          if (v51)
          {
            unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a8 + 2), v51);
            LODWORD(v44) = *(_DWORD *)(v42 + 4 * v43);
          }
          else
          {
            unint64_t v52 = 0;
          }
          unint64_t v66 = &v52[4 * v63];
          *(_DWORD *)unint64_t v66 = v44;
          uint64_t v57 = v66 + 4;
          std::chrono::system_clock::time_point v74 = *a8;
          uint64_t v67 = a8[1];
          if (v67 != *a8)
          {
            do
            {
              int v75 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *((_DWORD *)v66 - 1) = v75;
              v66 -= 4;
            }
            while (v67 != v74);
LABEL_98:
            uint64_t v67 = *a8;
          }
LABEL_99:
          *a8 = v66;
          a8[1] = v57;
          a8[2] = &v52[4 * v51];
          if (v67) {
            operator delete(v67);
          }
          goto LABEL_101;
        }
      }
      *(_DWORD *)std::vector<unsigned int>::pointer v47 = v44;
      uint64_t v57 = v47 + 4;
LABEL_101:
      a8[1] = v57;
LABEL_102:
      ++v43;
      uint64_t v42 = *a2;
      uint64_t v76 = a2[1] - *a2;
      if (v43 >= v76 >> 2)
      {
        uint64_t v77 = v76 >> 2;
        unint64_t v41 = *a9;
        long long v78 = a9[1];
        goto LABEL_105;
      }
    }
  }
  uint64_t v77 = 0;
  long long v78 = v41;
LABEL_105:
  if (((v78 - v41) >> 2) + ((a8[1] - *a8) >> 2) != v77) {
    __assert_rtn("BipartitionChartWithDiagonal", "BlenderUV2WithDiagonal.cpp", 337, "out_chart_faces0.size() + out_chart_faces1.size() == chart_faces.size()");
  }
  if (v17) {
    operator delete(v17);
  }
  std::deque<int>::~deque[abi:ne180100](v86);
  std::deque<int>::~deque[abi:ne180100](v88);
  return 1;
}

void sub_24F4EF9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (v25) {
    operator delete(v25);
  }
  std::deque<int>::~deque[abi:ne180100](&a19);
  std::deque<int>::~deque[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    unsigned int v6 = (unsigned char *)a1[1];
    size_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_24F4EFAB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  std::string __p = v10;
  uint64_t v15 = v11;
  unint64_t v17 = &v10[32 * v9];
  *(_DWORD *)unint64_t v11 = *(_DWORD *)a2;
  *((_DWORD *)v11 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  uint64_t v16 = v11 + 32;
  std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_24F4EFBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_24F4EFE28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *cv3d::cv::gess::binpack::MaxBox2BinPack::MaxBox2BinPack(void *this)
{
  *this = 0;
  this[2] = this + 2;
  this[3] = this + 2;
  this[4] = 0;
  return this;
}

cv3d::cv::gess::binpack::MaxBox2BinPack *cv3d::cv::gess::binpack::MaxBox2BinPack::MaxBox2BinPack(cv3d::cv::gess::binpack::MaxBox2BinPack *this, int a2, int a3, char a4)
{
  unint64_t v7 = (char *)this + 16;
  *((void *)this + 2) = (char *)this + 16;
  *((void *)this + 3) = (char *)this + 16;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 8) = a4;
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((void *)this + 2);
  unint64_t v8 = operator new(0x28uLL);
  v8[1] = v7;
  v8[2] = 0;
  *((_DWORD *)v8 + 6) = a2;
  *((_DWORD *)v8 + 7) = a3;
  *((unsigned char *)v8 + 32) = 0;
  uint64_t v9 = *((void *)this + 2);
  void *v8 = v9;
  *(void *)(v9 + 8) = v8;
  *((void *)this + 2) = v8;
  ++*((void *)this + 4);
  return this;
}

void sub_24F4EFED0(_Unwind_Exception *a1)
{
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v1);
  _Unwind_Resume(a1);
}

__n128 std::list<cv3d::cv::gess::binpack::Box2bin>::push_back(__n128 **a1, __n128 *a2)
{
  unint64_t v4 = (__n128 *)operator new(0x28uLL);
  __n128 result = *a2;
  v4[1] = *a2;
  v4[2].n128_u8[0] = a2[1].n128_u8[0];
  unint64_t v6 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v6 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

void cv3d::cv::gess::binpack::MaxBox2BinPack::~MaxBox2BinPack(cv3d::cv::gess::binpack::MaxBox2BinPack *this)
{
  uint64_t v1 = (void *)((char *)this + 16);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((void *)this + 2);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v1);
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  a3[1] = *a3;
  std::vector<cv3d::cv::gess::binpack::Box2bin>::resize(a3, (a2[1] - *a2) >> 4);
  unint64_t v5 = (uint64_t *)&v39;
  int v39 = &v39;
  int v40 = (uint64_t *)&v39;
  unint64_t v41 = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = v7 >> 4;
    unint64_t v11 = (uint64_t *)&v39;
    do
    {
      unint64_t v12 = operator new(0x20uLL);
      v12[1] = &v39;
      v12[2] = v6 + 16 * v8;
      *((_DWORD *)v12 + 6) = v9;
      *unint64_t v12 = v11;
      v11[1] = (uint64_t)v12;
      uint64_t v8 = ++v9;
      unint64_t v11 = v12;
      int v39 = v12;
      unint64_t v41 = v9;
    }
    while (v10 > v9);
    unint64_t v5 = v40;
  }
  else
  {
    unint64_t v9 = 0;
  }
  std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(v5, (uint64_t *)&v39, v9);
  if (v41)
  {
    while (1)
    {
      unint64_t v35 = 0x8000000080000000;
      float v13 = v40;
      if (v40 == (uint64_t *)&v39) {
        break;
      }
      unsigned int v14 = 0;
      BOOL v15 = 0;
      char v30 = 0;
      unsigned int v31 = 0x80000000;
      int v16 = 0x7FFFFFFF;
      int v17 = -1;
      int v18 = 0x7FFFFFFF;
      int v19 = 0x7FFFFFFF;
      int v20 = 0x7FFFFFFF;
      unsigned int v21 = 0x80000000;
      do
      {
        uint64_t v22 = (int *)v13[2];
        uint64_t v34 = 0;
        long long v32 = xmmword_24F578800;
        char v33 = 0;
        cv3d::cv::gess::binpack::MaxBox2BinPack::FindPositionForNewBoxBestAreaFit(a1, (uint64_t)&v32, (int *)&v34 + 1, (int *)&v34, *v22, v22[1]);
        if (HIDWORD(v32) != DWORD1(v32) && (SHIDWORD(v34) < v18 || HIDWORD(v34) == v18 && (int)v34 < v16))
        {
          int v19 = v32;
          unsigned int v21 = HIDWORD(v32);
          int v20 = DWORD1(v32);
          char v30 = v33;
          unsigned int v31 = DWORD2(v32);
          BOOL v15 = v13;
          int v18 = HIDWORD(v34);
          int v16 = v34;
          int v17 = *((_DWORD *)v13 + 6);
        }
        if (v14 >= 4 && v17 != -1)
        {
          unint64_t v35 = __PAIR64__(v20, v19);
          char v24 = v30;
          unsigned int v23 = v31;
          unsigned int v36 = v31;
          unsigned int v37 = v21;
          char v38 = v30;
          goto LABEL_20;
        }
        float v13 = (uint64_t *)v13[1];
        v14 += 2;
      }
      while (v13 != (uint64_t *)&v39);
      unint64_t v35 = __PAIR64__(v20, v19);
      char v24 = v30;
      unsigned int v23 = v31;
      unsigned int v36 = v31;
      unsigned int v37 = v21;
      char v38 = v30;
      if (v17 == -1) {
        break;
      }
LABEL_20:
      cv3d::cv::gess::binpack::MaxBox2BinPack::PlaceBox(a1, (signed __int32 *)&v35);
      uint64_t v25 = *a3 + 20 * v17;
      *(_DWORD *)uint64_t v25 = v19;
      *(_DWORD *)(v25 + 4) = v20;
      *(_DWORD *)(v25 + 8) = v23;
      *(_DWORD *)(v25 + 12) = v21;
      *(unsigned char *)(v25 + 16) = v24;
      uint64_t v26 = *v15;
      *(void *)(v26 + 8) = v15[1];
      *(void *)v15[1] = v26;
      --v41;
      operator delete(v15);
      if (!v41) {
        goto LABEL_21;
      }
    }
    uint64_t v27 = 0;
  }
  else
  {
LABEL_21:
    uint64_t v27 = 1;
  }
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(&v39);
  return v27;
}

void sub_24F4F01F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::binpack::Box2bin>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::binpack::Box2bin>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 20 * a2;
  }
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::FindPositionForNewBoxBestAreaFit(uint64_t result, uint64_t a2, int *a3, int *a4, int a5, int a6)
{
  *a3 = 0x7FFFFFFF;
  *a4 = 0x7FFFFFFF;
  uint64_t v6 = result + 16;
  uint64_t v7 = *(void *)(result + 24);
  if (v7 != result + 16)
  {
    int v8 = *(unsigned __int8 *)(result + 8);
    do
    {
      int v10 = *(_DWORD *)(v7 + 16);
      int v9 = *(_DWORD *)(v7 + 20);
      int v11 = *(_DWORD *)(v7 + 24) - v10;
      int v12 = *(_DWORD *)(v7 + 28) - v9;
      int v13 = v12 * v11 - a6 * a5;
      BOOL v14 = __OFSUB__(v11, a5);
      int v15 = v11 - a5;
      if (v15 < 0 == v14 && v12 >= a6)
      {
        int v17 = v12 - a6;
        if (v17 >= v15) {
          int v17 = v15;
        }
        if (v13 < *a3 || (v13 == *a3 ? (BOOL v18 = v17 < *a4) : (BOOL v18 = 0), v18))
        {
          __n128 result = (v9 + a6);
          *(_DWORD *)a2 = v10;
          *(_DWORD *)(a2 + 4) = v9;
          *(_DWORD *)(a2 + 8) = v10 + a5;
          *(_DWORD *)(a2 + 12) = result;
          *(unsigned char *)(a2 + 16) = 0;
          *a4 = v17;
          *a3 = v13;
        }
      }
      if (v8)
      {
        int v19 = *(_DWORD *)(v7 + 16);
        int v20 = *(_DWORD *)(v7 + 24) - v19;
        int v21 = v20 - a6;
        if (v20 >= a6)
        {
          int v22 = *(_DWORD *)(v7 + 20);
          int v23 = *(_DWORD *)(v7 + 28) - v22;
          BOOL v14 = __OFSUB__(v23, a5);
          int v24 = v23 - a5;
          if (v24 < 0 == v14)
          {
            if (v21 < 0) {
              int v21 = -v21;
            }
            if (v24 < v21) {
              int v21 = v24;
            }
            if (v13 < *a3 || (v13 == *a3 ? (BOOL v25 = v21 < *a4) : (BOOL v25 = 0), v25))
            {
              __n128 result = (v22 + a5);
              *(_DWORD *)a2 = v19;
              *(_DWORD *)(a2 + 4) = v22;
              *(_DWORD *)(a2 + 8) = v19 + a6;
              *(_DWORD *)(a2 + 12) = result;
              *(unsigned char *)(a2 + 16) = 1;
              *a4 = v21;
              *a3 = v13;
            }
          }
        }
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
  }
  return result;
}

void cv3d::cv::gess::binpack::MaxBox2BinPack::PlaceBox(uint64_t a1, signed __int32 *a2)
{
  uint64_t v2 = a1 + 16;
  BOOL v3 = *(uint64_t **)(a1 + 24);
  if (v3 != (uint64_t *)(a1 + 16))
  {
    do
    {
      int v6 = cv3d::cv::gess::binpack::MaxBox2BinPack::SplitFreeBox(a1, (uint64_t)(v3 + 2), a2);
      uint64_t v7 = (uint64_t *)v3[1];
      if (v6)
      {
        uint64_t v8 = *v3;
        *(void *)(v8 + 8) = v7;
        *(void *)v3[1] = v8;
        --*(void *)(a1 + 32);
        operator delete(v3);
      }
      BOOL v3 = v7;
    }
    while (v7 != (uint64_t *)v2);
  }
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::SplitFreeBox(uint64_t a1, uint64_t a2, signed __int32 *a3)
{
  if (a3[2] <= *(_DWORD *)a2) {
    return 0;
  }
  signed int v5 = *(_DWORD *)(a2 + 8);
  if (*a3 >= v5) {
    return 0;
  }
  signed __int32 v6 = a3[3];
  signed __int32 v7 = *(_DWORD *)(a2 + 4);
  if (v6 <= v7) {
    return 0;
  }
  signed __int32 v8 = a3[1];
  signed __int32 v9 = *(_DWORD *)(a2 + 12);
  if (v8 >= v9) {
    return 0;
  }
  if (v8 > v7)
  {
    v18.n128_u32[0] = *(_DWORD *)a2;
    *(unint64_t *)((char *)v18.n128_u64 + 4) = __PAIR64__(v5, v7);
    char v19 = *(unsigned char *)(a2 + 16);
    v18.n128_u32[3] = v8;
    if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0)
    {
      std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
      signed __int32 v6 = a3[3];
      signed __int32 v9 = *(_DWORD *)(a2 + 12);
    }
  }
  if (v6 < v9)
  {
    unsigned __int32 v11 = *(_DWORD *)a2;
    v18.n128_u32[2] = *(_DWORD *)(a2 + 8);
    v18.n128_u32[3] = v9;
    char v19 = *(unsigned char *)(a2 + 16);
    v18.n128_u64[0] = __PAIR64__(v6, v11);
    if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0)
    {
      std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
      signed __int32 v9 = *(_DWORD *)(a2 + 12);
    }
  }
  if (a3[1] < v9)
  {
    signed int v12 = *(_DWORD *)(a2 + 4);
    if (a3[3] > v12)
    {
      signed __int32 v13 = *a3;
      signed __int32 v14 = *(_DWORD *)(a2 + 8);
      if (*a3 > *(_DWORD *)a2 && v13 < v14)
      {
        v18.n128_u32[0] = *(_DWORD *)a2;
        *(unint64_t *)((char *)v18.n128_u64 + 4) = __PAIR64__(v13, v12);
        char v19 = *(unsigned char *)(a2 + 16);
        v18.n128_u32[3] = v9;
        if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0)
        {
          std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
          signed __int32 v14 = *(_DWORD *)(a2 + 8);
        }
      }
      signed __int32 v15 = a3[2];
      if (v15 < v14)
      {
        unsigned int v16 = *(_DWORD *)(a2 + 4);
        v18.n128_u32[3] = *(_DWORD *)(a2 + 12);
        char v19 = *(unsigned char *)(a2 + 16);
        v18.n128_u32[0] = v15;
        *(unint64_t *)((char *)v18.n128_u64 + 4) = __PAIR64__(v14, v16);
        if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0) {
          std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
        }
      }
    }
  }
  return 1;
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 == a1 + 16) {
    return 0;
  }
  while (v3 + 16 == a3
       || *(_DWORD *)(v3 + 16) > *a2
       || *(_DWORD *)(v3 + 20) > a2[1]
       || *(_DWORD *)(v3 + 24) < a2[2]
       || *(_DWORD *)(v3 + 28) < a2[3])
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == a1 + 16) {
      return 0;
    }
  }
  return 1;
}

uint64_t cv3d::cv::gess::binpack::Box2BinPacking(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  cv3d::cv::gess::binpack::MaxBox2BinPack::MaxBox2BinPack((cv3d::cv::gess::binpack::MaxBox2BinPack *)v8, a3, a4, 1);
  uint64_t v6 = cv3d::cv::gess::binpack::MaxBox2BinPack::Insert((uint64_t)v8, a1, a2);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v9);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v9);
  return v6;
}

void sub_24F4F0688(_Unwind_Exception *a1)
{
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((void *)(v1 + 16));
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((void *)(v1 + 16));
  _Unwind_Resume(a1);
}

cv3d::cv::gess::binpack::Binpack *cv3d::cv::gess::binpack::Binpack::Binpack(cv3d::cv::gess::binpack::Binpack *this, uint64_t **a2, const unsigned int *a3, const unsigned __int8 *a4)
{
  *(unsigned char *)this = 1;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  uint64_t v6 = (std::vector<int> *)((char *)this + 16);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = -1;
  signed __int32 v7 = (_DWORD *)((char *)this + 40);
  *((void *)this + 6) = -1;
  *((_DWORD *)this + 14) = -1;
  *((_DWORD *)this + 15) = *a3;
  *((unsigned char *)this + 64) = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v42 = 0;
  *signed __int32 v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(a2 + 10, (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  signed __int32 v9 = (int *)((char *)this + 44);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v8, (_DWORD *)this + 11, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v42) = 0;
  *((_DWORD *)this + 12) = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v10 + 56), (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v42) = 0;
  *((_DWORD *)this + 13) = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(v11 + 56), (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  int v43 = 0;
  uint64_t v42 = 0;
  *((_DWORD *)this + 14) = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v12 + 56), (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  if (*v7 == -1)
  {
    char v38 = "uv_handle_.Valid()";
    int v39 = 213;
    goto LABEL_46;
  }
  int v13 = *v9;
  if (*v9 == -1)
  {
    char v38 = "g_handle_.Valid()";
    int v39 = 214;
    goto LABEL_46;
  }
  if (*((_DWORD *)this + 12) == -1)
  {
    char v38 = "f_chart_gid_handle_.Valid()";
    int v39 = 215;
    goto LABEL_46;
  }
  if (*((_DWORD *)this + 14) == -1)
  {
    char v38 = "uv_ind_handle_.Valid()";
    int v39 = 216;
LABEL_46:
    __assert_rtn("Binpack", "Binpack.cpp", v39, v38);
  }
  if (*((_DWORD *)this + 13) == -1)
  {
    uint64_t v14 = *((void *)this + 1);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>(v14, (_DWORD *)this + 13, (long long *)__p);
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    int v13 = *v9;
  }
  uint64_t v15 = *((void *)this + 1);
  LODWORD(__p[0]) = v13;
  uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v15 + 80), (unsigned int *)__p);
  unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  uint64_t v18 = *((void *)this + 1);
  uint64_t v20 = *(void *)(v18 + 152);
  uint64_t v19 = *(void *)(v18 + 160);
  uint64_t v21 = v17;
  std::vector<unsigned int>::reserve(v6, v17);
  unint64_t v22 = v19 - v20;
  if (((v19 - v20) & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = (v22 >> 2);
    do
    {
      if (v24 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(*((void *)this + 1), *((_DWORD *)this + 12), v23))
      {
        uint64_t v27 = (_DWORD *)*((void *)this + 3);
        unint64_t v26 = *((void *)this + 4);
        if ((unint64_t)v27 >= v26)
        {
          begiuint64_t n = v6->__begin_;
          uint64_t v30 = v27 - v6->__begin_;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = v26 - (void)begin;
          if (v32 >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 32, v33);
            begiuint64_t n = (std::vector<int>::pointer)*((void *)this + 2);
            uint64_t v27 = (_DWORD *)*((void *)this + 3);
          }
          else
          {
            uint64_t v34 = 0;
          }
          unint64_t v35 = &v34[4 * v30];
          *(_DWORD *)unint64_t v35 = v23;
          unint64_t v28 = v35 + 4;
          while (v27 != begin)
          {
            int v36 = *--v27;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *((void *)this + 2) = v35;
          *((void *)this + 3) = v28;
          *((void *)this + 4) = &v34[4 * v33];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *uint64_t v27 = v23;
          unint64_t v28 = v27 + 1;
        }
        *((void *)this + 3) = v28;
        ++v24;
      }
      ++v23;
    }
    while (v23 != v25);
  }
  if (v21 != (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 2) {
    __assert_rtn("Binpack", "Binpack.cpp", 232, "g_starts_.size() == g_size");
  }
  return this;
}

void sub_24F4F0AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 24) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::binpack::Binpack::BinpackTexture(cv3d::cv::gess::binpack::Binpack *this)
{
  uint64_t v2 = *((void *)this + 1);
  LODWORD(v76) = *((_DWORD *)this + 10);
  uint64_t v3 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v2 + 80), (unsigned int *)&v76);
  unsigned int v4 = (*(uint64_t (**)(void *))(*v3 + 16))(v3);
  cv3d::cv::gess::binpack::Binpack::MoveToOrigin(this);
  uint64_t v65 = v4;
  if (v4)
  {
    signed int v5 = (float32x2_t *)v3[5];
    uint64_t v6 = (uint64_t)(v3[6] - (void)v5) >> 3;
    __asm { FMOV            V0.2S, #5.0 }
    uint64_t v12 = v4;
    do
    {
      if (!v6) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *signed int v5 = vmul_f32(vmul_n_f32(*v5, (float)*((unsigned int *)this + 15)), _D0);
      ++v5;
      --v6;
      --v12;
    }
    while (v12);
  }
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  int v73 = 0;
  std::chrono::system_clock::time_point v74 = 0;
  uint64_t v75 = 0;
  int v70 = 0;
  unsigned int v71 = 0;
  int v13 = 199;
  uint64_t v72 = 0;
  uint64_t v64 = v3;
  while (1)
  {
    int v66 = v13;
    cv3d::cv::gess::binpack::Binpack::ComputeAtlasSizeRect((uint64_t)this, &v73, *((_DWORD *)this + 15));
    uint64_t v15 = (int *)v73;
    uint64_t v14 = v74;
    if (v74 == v73) {
      goto LABEL_16;
    }
    unint64_t v16 = ((char *)v74 - (unsigned char *)v73) >> 4;
    unsigned int v17 = (unsigned int *)((char *)v73 + 4);
    unsigned int v18 = 1;
    do
    {
      unsigned int v19 = *(v17 - 1) + 4;
      unsigned int v20 = *((_DWORD *)this + 15) - 1;
      if (v19 < v20)
      {
        unsigned int v21 = *v17 + 4;
        if (v21 < v20)
        {
          *(v17 - 1) = v19;
          *unsigned int v17 = v21;
        }
      }
      v17 += 4;
    }
    while (v16 > v18++);
    if (v14 == v15)
    {
LABEL_16:
      unsigned int v23 = 0;
    }
    else
    {
      unsigned int v23 = 0;
      do
      {
        int v24 = *v15;
        int v25 = v15[1];
        v15 += 4;
        v23 += v25 * v24;
      }
      while (v15 != v14);
    }
    uint64_t v26 = *((void *)this + 1);
    LODWORD(__p) = *((_DWORD *)this + 11);
    uint64_t v27 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v26 + 80), (unsigned int *)&__p);
    unint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
    std::vector<cv3d::cv::gess::binpack::BoxSize>::resize((uint64_t)&v70, v28);
    unsigned int v29 = *((_DWORD *)this + 15);
    unsigned int v30 = *((unsigned __int8 *)this + 64);
    if (v23 > v29 * v29 * v30)
    {
      float v31 = logf((float)v29 / sqrtf((float)v23 / (float)v30));
      float v32 = pow(0.9, (double)(int)(v31 / -0.105360516));
      if (v32 > 0.9) {
        float v32 = *(float *)"fff?";
      }
      goto LABEL_51;
    }
    uint64_t v77 = v76;
    float v32 = *(float *)"fff?";
    if (v30) {
      break;
    }
LABEL_51:
    if (v65)
    {
      uint64_t v59 = (float32x2_t *)v3[5];
      uint64_t v60 = (uint64_t)(v3[6] - (void)v59) >> 3;
      uint64_t v61 = v65;
      do
      {
        if (!v60) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *uint64_t v59 = vmul_n_f32(*v59, v32);
        ++v59;
        --v60;
        --v61;
      }
      while (v61);
    }
    int v13 = v66 - 1;
    if (!(_WORD)v66) {
      goto LABEL_58;
    }
  }
  int v33 = 0;
  while (1)
  {
    char v34 = cv3d::cv::gess::binpack::Box2BinPacking((uint64_t *)&v73, (uint64_t *)&v76, *((_DWORD *)this + 15), *((_DWORD *)this + 15));
    std::string __p = 0;
    uint64_t v68 = 0;
    int v69 = 0;
    int v36 = (char *)v73;
    unint64_t v35 = v74;
    if (v74 == v73)
    {
      unsigned int v37 = 0;
      uint64_t v58 = 0;
    }
    else
    {
      unsigned int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 0;
      do
      {
        int v40 = v76;
        char v41 = (char *)v76 + 20 * v38;
        if (*v41 == 0x7FFFFFFF)
        {
          uint64_t v42 = &v36[16 * v38];
          if (v37 >= (_DWORD *)v69)
          {
            uint64_t v46 = ((char *)v37 - (unsigned char *)__p) >> 4;
            if ((unint64_t)(v46 + 1) >> 60) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v47 = (v69 - (unsigned char *)__p) >> 3;
            if (v47 <= v46 + 1) {
              unint64_t v47 = v46 + 1;
            }
            if ((unint64_t)(v69 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v47;
            }
            if (v48) {
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)&v69, v48);
            }
            else {
              uint64_t v49 = 0;
            }
            uint64_t v50 = &v49[16 * v46];
            *(_DWORD *)uint64_t v50 = *(_DWORD *)v42;
            *((_DWORD *)v50 + 1) = *((_DWORD *)v42 + 1);
            unint64_t v51 = &v36[16 * v38];
            int v52 = *((_DWORD *)v51 + 2);
            *(_DWORD *)(v50 + 11) = *(_DWORD *)(v51 + 11);
            *((_DWORD *)v50 + 2) = v52;
            uint64_t v54 = __p;
            unint64_t v53 = v68;
            unint64_t v55 = v50;
            if (v68 != __p)
            {
              do
              {
                int v56 = *(v53 - 4);
                v53 -= 4;
                *(v55 - 4) = v56;
                v55 -= 4;
                v55[1] = v53[1];
                int v57 = v53[2];
                *(_DWORD *)((char *)v55 + 11) = *(_DWORD *)((char *)v53 + 11);
                void v55[2] = v57;
              }
              while (v53 != v54);
              unint64_t v53 = __p;
            }
            unsigned int v37 = v50 + 16;
            std::string __p = v55;
            uint64_t v68 = v50 + 16;
            int v69 = &v49[16 * v48];
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *unsigned int v37 = *(_DWORD *)v42;
            v37[1] = *((_DWORD *)v42 + 1);
            int v43 = *((_DWORD *)v42 + 2);
            *(_DWORD *)((char *)v37 + 11) = *(_DWORD *)(v42 + 11);
            void v37[2] = v43;
            v37 += 4;
          }
          uint64_t v68 = v37;
          int v36 = (char *)v73;
          unint64_t v35 = v74;
        }
        else
        {
          uint64_t v44 = &v36[16 * v38];
          int v45 = (char *)v70 + 16 * *((unsigned __int16 *)v44 + 4);
          *(_DWORD *)int v45 = *v41;
          *((_DWORD *)v45 + 1) = v41[1];
          *((_DWORD *)v45 + 2) = *((_DWORD *)v44 + 2);
          *((_WORD *)v45 + 6) = v33;
          v45[14] = v40[20 * v38 + 16];
        }
        uint64_t v38 = (unsigned __int16)++v39;
      }
      while ((unsigned __int16)v39 < (unint64_t)(((char *)v35 - v36) >> 4));
      uint64_t v58 = (char *)__p;
    }
    std::vector<cv3d::cv::gess::binpack::BoxSize>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::binpack::BoxSize*,cv3d::cv::gess::binpack::BoxSize*>(&v73, v58, v37, ((char *)v37 - v58) >> 4);
    if (__p)
    {
      uint64_t v68 = __p;
      operator delete(__p);
    }
    if (v34) {
      break;
    }
    if (++v33 >= *((unsigned __int8 *)this + 64))
    {
      float v32 = *(float *)"fff?";
      uint64_t v3 = v64;
      goto LABEL_51;
    }
  }
  if ((_WORD)v66)
  {
LABEL_58:
    cv3d::cv::gess::binpack::Binpack::ApplyBinpack2OBJTexCoord((uint64_t)this, &v70);
    uint64_t v62 = 1;
    goto LABEL_60;
  }
  uint64_t v62 = 0;
LABEL_60:
  if (v70)
  {
    unsigned int v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    std::chrono::system_clock::time_point v74 = (int *)v73;
    operator delete(v73);
  }
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  return v62;
}

void sub_24F4F1074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::binpack::Binpack::MoveToOrigin(cv3d::cv::gess::binpack::Binpack *this)
{
  uint64_t v2 = *((void *)this + 1);
  LODWORD(v27) = *((_DWORD *)this + 10);
  uint64_t v3 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v2 + 80), (unsigned int *)&v27);
  uint64_t v4 = *((void *)this + 1);
  LODWORD(v27) = *((_DWORD *)this + 11);
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v4 + 80), (unsigned int *)&v27);
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v8 = *(void *)(*((void *)this + 1) + 152);
  uint64_t v7 = *(void *)(*((void *)this + 1) + 160);
  long long v27 = 0u;
  long long v28 = 0u;
  int v29 = 1065353216;
  uint64_t v26 = v6;
  if (v6)
  {
    uint64_t v9 = 0;
    unint64_t v10 = ((unint64_t)(v7 - v8) >> 2);
    uint64_t v11 = v6 - 1;
    int32x2_t v12 = vdup_n_s32(0x7F7FFFFFu);
    do
    {
      uint64_t v13 = *((void *)this + 2);
      unint64_t v14 = v10;
      if (v9 != v11) {
        unint64_t v14 = *(unsigned int *)(v13 + 4 * v9 + 4);
      }
      unint64_t v15 = *(unsigned int *)(v13 + 4 * v9);
      float32x2_t v16 = (float32x2_t)v12;
      if (v15 < v14)
      {
        float32x2_t v16 = (float32x2_t)v12;
        do
        {
          uint64_t v17 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((void *)this + 1), *((_DWORD *)this + 14), v15);
          for (uint64_t i = 0; i != 12; i += 4)
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v27, (unsigned int *)(v17 + i), (_DWORD *)(v17 + i));
            unint64_t v19 = *(unsigned int *)(v17 + i);
            uint64_t v20 = *(void *)(v3 + 40);
            if (v19 >= (*(void *)(v3 + 48) - v20) >> 3) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            float32x2_t v16 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v16, *(float32x2_t *)(v20 + 8 * v19)), *(int8x8_t *)(v20 + 8 * v19), (int8x8_t)v16);
          }
          ++v15;
        }
        while (v15 != v14);
      }
      unsigned int v21 = (uint64_t **)v28;
      if ((void)v28)
      {
        uint64_t v22 = *(void *)(v3 + 40);
        unint64_t v23 = (*(void *)(v3 + 48) - v22) >> 3;
        do
        {
          unint64_t v24 = *((unsigned int *)v21 + 4);
          if (v23 <= v24) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(float32x2_t *)(v22 + 8 * v24) = vsub_f32(*(float32x2_t *)(v22 + 8 * v24), v16);
          unsigned int v21 = (uint64_t **)*v21;
        }
        while (v21);
      }
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(&v27);
      ++v9;
    }
    while (v9 != v26);
  }
  return 1;
}

void sub_24F4F12F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::binpack::Binpack::ComputeAtlasSizeRect(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  LODWORD(__p) = *(_DWORD *)(a1 + 44);
  uint64_t v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v5 + 80), (unsigned int *)&__p);
  unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(v8 + 152);
  uint64_t v9 = *(void *)(v8 + 160);
  a2[1] = *a2;
  int v40 = a2;
  std::vector<cv3d::cv::gess::binpack::BoxSize>::resize((uint64_t)a2, v7);
  uint64_t v39 = v7;
  if (v7)
  {
    uint64_t v12 = 0;
    float v13 = (float)(a3 - 1);
    int32x2_t v14 = vdup_n_s32(0x7F7FFFFFu);
    uint64_t v37 = v7 - 1;
    unint64_t v38 = ((unint64_t)(v9 - v10) >> 2);
    do
    {
      uint64_t v15 = *(void *)(a1 + 16);
      unint64_t v16 = v38;
      if (v12 != v37) {
        unint64_t v16 = *(unsigned int *)(v15 + 4 * v12 + 4);
      }
      unint64_t v17 = *(unsigned int *)(v15 + 4 * v12);
      float32x2_t v18 = (float32x2_t)0x80000000800000;
      float32x2_t v19 = (float32x2_t)v14;
      if (v17 < v16)
      {
        uint64_t v20 = *(unsigned int *)(v15 + 4 * v12);
        float32x2_t v19 = (float32x2_t)v14;
        do
        {
          uint64_t v21 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 56), v20);
          uint64_t v22 = 0;
          std::string __p = *(void **)v21;
          int v46 = *(_DWORD *)(v21 + 8);
          do
          {
            unint64_t v23 = (float32x2_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 40), *(_DWORD *)((char *)&__p + v22));
            v22 += 4;
            *(float32x2_t *)&long long v11 = *v23;
            float32x2_t v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, *v23), (int8x8_t)*v23, (int8x8_t)v19);
            float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v23, v18), (int8x8_t)*v23, (int8x8_t)v18);
          }
          while (v22 != 12);
          ++v20;
        }
        while (v20 != v16);
      }
      LODWORD(v11) = 1.0;
      long long v42 = v11;
      if (a3 && *(unsigned char *)a1)
      {
        *(float32x2_t *)&long long v11 = vsub_f32(v18, v19);
        if (*(float *)&v11 > v13 || *((float *)&v11 + 1) > v13)
        {
          if (*(float *)&v11 < *((float *)&v11 + 1)) {
            *(float *)&long long v11 = *((float *)&v11 + 1);
          }
          *(double *)&long long v11 = (double)(a3 - 1) / *(float *)&v11;
          *(float *)&long long v11 = *(double *)&v11;
          long long v42 = v11;
          if (*(float *)&v11 < 0.00001)
          {
            *(void *)&long long v11 = 0;
            long long v42 = v11;
          }
        }
      }
      uint64_t v25 = *(void *)(a1 + 8);
      LODWORD(v43) = *(_DWORD *)(a1 + 40);
      uint64_t v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v25 + 80), (unsigned int *)&v43);
      unint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
      LOBYTE(v43) = 0;
      std::vector<BOOL>::vector(&__p, v27, (unsigned __int8 *)&v43);
      *((void *)&v11 + 1) = *((void *)&v42 + 1);
      if (*(float *)&v42 < 1.0)
      {
        if (v17 < v16)
        {
          do
          {
            uint64_t v28 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 56), v17);
            uint64_t v29 = 0;
            uint64_t v43 = *(void *)v28;
            int v44 = *(_DWORD *)(v28 + 8);
            unsigned int v30 = __p;
            do
            {
              unint64_t v31 = *(unsigned int *)((char *)&v43 + v29);
              unint64_t v32 = v31 >> 6;
              uint64_t v33 = 1 << v31;
              if (((1 << v31) & v30[v31 >> 6]) == 0)
              {
                char v34 = (float32x2_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 40), v31);
                float32x2_t *v34 = vmul_n_f32(*v34, *(float *)&v42);
                unsigned int v30 = __p;
                *((void *)__p + v32) |= v33;
              }
              v29 += 4;
            }
            while (v29 != 12);
            ++v17;
          }
          while (v17 != v16);
        }
        *((void *)&v11 + 1) = *((void *)&v42 + 1);
        float32x2_t v18 = vmul_n_f32(v18, *(float *)&v42);
      }
      uint64_t v35 = *v40 + 16 * v12;
      *(uint32x2_t *)&long long v11 = vcvt_u32_f32(vrndp_f32(vsub_f32(v18, v19)));
      *(void *)uint64_t v35 = v11;
      *(_DWORD *)(v35 + 8) = v12;
      if (__p) {
        operator delete(__p);
      }
      ++v12;
    }
    while (v12 != v39);
  }
  return 1;
}

void sub_24F4F1650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
}

void std::vector<cv3d::cv::gess::binpack::BoxSize>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<cv3d::cv::gess::binpack::BoxSize>::__append((char **)a1, a2 - v2);
  }
}

uint64_t cv3d::cv::gess::binpack::Binpack::ApplyBinpack2OBJTexCoord(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  LODWORD(__p[0]) = *(_DWORD *)(a1 + 44);
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v4 + 80), (unsigned int *)__p);
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  unsigned int v7 = *(uint64_t **)(a1 + 8);
  unint64_t v8 = ((unint64_t)(v7[20] - v7[19]) >> 2);
  LODWORD(v36) = *(_DWORD *)(a1 + 40);
  uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v7 + 10, (unsigned int *)&v36);
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  LOBYTE(v36) = 0;
  std::vector<BOOL>::vector(__p, v10, (unsigned __int8 *)&v36);
  uint64_t v35 = v6;
  if (v6)
  {
    uint64_t v11 = 0;
    unint64_t v33 = v8;
    uint64_t v34 = v6 - 1;
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      if (v11 != v34) {
        unint64_t v8 = *(unsigned int *)(v12 + 4 * v11 + 4);
      }
      unint64_t v13 = *(unsigned int *)(v12 + 4 * v11);
      if (v13 < v8)
      {
        do
        {
          uint64_t v14 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 56), v13);
          uint64_t v15 = 0;
          uint64_t v36 = *(void *)v14;
          int v37 = *(_DWORD *)(v14 + 8);
          unint64_t v16 = __p[0];
          do
          {
            unint64_t v17 = *(unsigned int *)((char *)&v36 + v15);
            unint64_t v18 = v17 >> 6;
            uint64_t v19 = 1 << v17;
            if (((1 << v17) & v16[v17 >> 6]) == 0)
            {
              uint64_t v20 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 40), v17);
              uint64_t v21 = *a2 + 16 * v11;
              float v23 = *(float *)v20;
              float v22 = *(float *)(v20 + 4);
              if (*(unsigned char *)(v21 + 14))
              {
                *(float *)uint64_t v20 = v22;
                *(float *)(v20 + 4) = v23;
                float v24 = v23;
              }
              else
              {
                float v24 = *(float *)(v20 + 4);
                float v22 = *(float *)v20;
              }
              float v25 = (float)*(unsigned int *)(a1 + 60);
              float v26 = (float)(v24 + (float)*(unsigned int *)(v21 + 4)) / v25;
              *(float *)uint64_t v20 = (float)(v22 + (float)*(unsigned int *)v21) / v25;
              *(float *)(v20 + 4) = v26;
              unint64_t v16 = __p[0];
              *((void *)__p[0] + v18) |= v19;
            }
            v15 += 4;
          }
          while (v15 != 12);
          ++v13;
        }
        while (v13 != v8);
      }
      ++v11;
      unint64_t v8 = v33;
    }
    while (v11 != v35);
  }
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      __int16 v28 = *(_WORD *)(*a2
                     + 16
                     * *(unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 48), i)+ 12);
      *(_WORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned short>(*(void *)(a1 + 8), *(_DWORD *)(a1 + 52), i) = v28;
    }
  }
  uint64_t v29 = *(void *)(a1 + 8);
  LODWORD(v36) = *(_DWORD *)(a1 + 44);
  uint64_t v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v29 + 80), (unsigned int *)&v36);
  (*(void (**)(uint64_t, void))(*(void *)v30 + 32))(v30, *(unsigned __int8 *)(a1 + 64));
  unint64_t v31 = (unsigned int *)(a1 + 48);
  if (*(_DWORD *)(a1 + 48) != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(*(void *)(a1 + 8) + 56), v31);
  }
  *(_DWORD *)(a1 + 48) = -1;
  if (*(unsigned __int8 *)(a1 + 64) >= 2u) {
    cv3d::cv::gess::alg::SortFaceByGroupID(*(uint64_t ***)(a1 + 8), (cv3d::cv::gess::mesh::TriMesh *)v31);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_24F4F1984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v7 = a2;
  uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), &v7);
  uint64_t v5 = *(void *)(v4 + 40);
  if (a3 >= (unint64_t)((*(void *)(v4 + 48) - v5) >> 3)) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  return v5 + 8 * a3;
}

void *std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        __n128 result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::vector<cv3d::cv::gess::binpack::Box2bin>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 20 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = xmmword_24F578800;
        *(unsigned char *)(v7 + 16) = 0;
        v7 += 20;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v20 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::HEdge>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[20 * v8];
    std::string __p = v12;
    unint64_t v17 = v14;
    uint64_t v19 = &v12[20 * v11];
    uint64_t v15 = &v14[20 * a2];
    do
    {
      *(_OWORD *)uint64_t v14 = xmmword_24F578800;
      v14[16] = 0;
      v14 += 20;
    }
    while (v14 != v15);
    unint64_t v18 = v15;
    std::vector<cv3d::cv::gess::binpack::Box2bin>::__swap_out_circular_buffer(a1, &__p);
    if (v18 != v17) {
      unint64_t v18 = &v17[(v18 - v17 - 20) % 0x14uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F4F1C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::binpack::Box2bin>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 20);
    v2 -= 20;
    *(_DWORD *)(v4 - 20) = v5;
    v4 -= 20;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    *(unsigned char *)(v4 + 16) = *(unsigned char *)(v2 + 16);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<cv3d::cv::gess::binpack::BoxSize>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    unint64_t v16 = &v14[16 * a2];
    unint64_t v18 = *a1;
    unint64_t v17 = a1[1];
    if (v17 != *a1)
    {
      do
      {
        int v19 = *((_DWORD *)v17 - 4);
        v17 -= 16;
        *((_DWORD *)v14 - 4) = v19;
        v14 -= 16;
        *((_DWORD *)v14 + 1) = *((_DWORD *)v17 + 1);
        int v20 = *((_DWORD *)v17 + 2);
        *(_DWORD *)(v14 + 11) = *(_DWORD *)(v17 + 11);
        *((_DWORD *)v14 + 2) = v20;
      }
      while (v17 != v18);
      unint64_t v17 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

_DWORD *std::vector<cv3d::cv::gess::binpack::BoxSize>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::binpack::BoxSize*,cv3d::cv::gess::binpack::BoxSize*>(void *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  __n128 result = (_DWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v13 = (_DWORD *)a1[1];
    unint64_t v12 = (_DWORD **)(a1 + 1);
    __n128 result = v13;
    uint64_t v14 = v13;
    if (v6 != a3)
    {
      uint64_t v14 = result;
      do
      {
        *uint64_t v14 = *v6;
        v14[1] = v6[1];
        int v15 = v6[2];
        *(_DWORD *)((char *)v14 + 11) = *(_DWORD *)((char *)v6 + 11);
        void v14[2] = v15;
        v14 += 4;
        v6 += 4;
      }
      while (v6 != a3);
    }
LABEL_25:
    int64_t v24 = (char *)v14 - (char *)result;
    goto LABEL_26;
  }
  unint64_t v17 = (_DWORD *)a1[1];
  unint64_t v12 = (_DWORD **)(a1 + 1);
  unint64_t v16 = v17;
  unint64_t v18 = ((char *)v17 - (char *)result) >> 4;
  if (v18 >= a4)
  {
    uint64_t v14 = result;
    if (a2 != a3)
    {
      float v25 = result;
      do
      {
        *float v25 = *v6;
        v25[1] = v6[1];
        int v26 = v6[2];
        *(_DWORD *)((char *)v25 + 11) = *(_DWORD *)((char *)v6 + 11);
        v25[2] = v26;
        v14 += 4;
        v6 += 4;
        v25 += 4;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  int v19 = &a2[4 * v18];
  if (v16 != result)
  {
    do
    {
      _DWORD *result = *v6;
      result[1] = v6[1];
      int v20 = v6[2];
      *(_DWORD *)((char *)result + 11) = *(_DWORD *)((char *)v6 + 11);
      result[2] = v20;
      v6 += 4;
      result += 4;
    }
    while (v6 != v19);
    __n128 result = *v12;
  }
  uint64_t v21 = (char *)result;
  if (v19 != a3)
  {
    uint64_t v21 = (char *)result;
    float v22 = result;
    do
    {
      *float v22 = *v19;
      v22[1] = v19[1];
      int v23 = v19[2];
      *(_DWORD *)((char *)v22 + 11) = *(_DWORD *)((char *)v19 + 11);
      v22[2] = v23;
      v21 += 16;
      v19 += 4;
      v22 += 4;
    }
    while (v19 != a3);
  }
  int64_t v24 = v21 - (char *)result;
LABEL_26:
  *unint64_t v12 = (_DWORD *)((char *)result + v24);
  return result;
}

uint64_t *std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      uint64_t v4 = (uint64_t *)*a2;
      if (*(_DWORD *)(*(void *)(*a2 + 16) + 4) * **(_DWORD **)(*a2 + 16) > (*(_DWORD *)(result[2] + 4)
                                                                                             * *(_DWORD *)result[2]))
      {
        uint64_t v5 = *v4;
        *(void *)(v5 + 8) = v4[1];
        *(void *)v4[1] = v5;
        uint64_t v6 = *result;
        *(void *)(v6 + 8) = v4;
        *uint64_t v4 = v6;
        _DWORD *result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      unint64_t v8 = a3 >> 1;
      unint64_t v9 = (a3 >> 1) + 1;
      uint64_t v10 = result;
      do
      {
        uint64_t v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      unint64_t v11 = (uint64_t *)std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(result, v10, a3 >> 1);
      __n128 result = (uint64_t *)std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(v10, a2, a3 - v8);
      unsigned int v12 = *(_DWORD *)(v11[2] + 4) * *(_DWORD *)v11[2];
      if (*(_DWORD *)(result[2] + 4) * *(_DWORD *)result[2] <= v12)
      {
        uint64_t v14 = (uint64_t *)v11[1];
        uint64_t i = result;
        __n128 result = v11;
      }
      else
      {
        for (uint64_t i = (uint64_t *)result[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          if (*(_DWORD *)(i[2] + 4) * *(_DWORD *)i[2] <= v12) {
            goto LABEL_14;
          }
        }
        uint64_t i = a2;
LABEL_14:
        uint64_t v15 = *i;
        uint64_t v16 = *result;
        *(void *)(v16 + 8) = *(void *)(*i + 8);
        **(void **)(v15 + 8) = v16;
        uint64_t v17 = *v11;
        uint64_t v14 = (uint64_t *)v11[1];
        *(void *)(v17 + 8) = result;
        _DWORD *result = v17;
        *unint64_t v11 = v15;
        *(void *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        unint64_t v18 = i;
        do
        {
          unsigned int v19 = *(_DWORD *)(v14[2] + 4) * *(_DWORD *)v14[2];
          if (*(_DWORD *)(i[2] + 4) * *(_DWORD *)i[2] <= v19)
          {
            uint64_t v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (uint64_t j = (uint64_t *)i[1]; j != a2; uint64_t j = (uint64_t *)j[1])
            {
              if (*(_DWORD *)(j[2] + 4) * *(_DWORD *)j[2] <= v19) {
                goto LABEL_25;
              }
            }
            uint64_t j = a2;
LABEL_25:
            uint64_t v21 = *j;
            uint64_t v22 = *i;
            *(void *)(v22 + 8) = *(void *)(*j + 8);
            **(void **)(v21 + 8) = v22;
            if (v18 == i) {
              unint64_t v18 = j;
            }
            uint64_t v24 = *v14;
            int v23 = (uint64_t *)v14[1];
            *(void *)(v24 + 8) = i;
            uint64_t *i = v24;
            *uint64_t v14 = v21;
            *(void *)(v21 + 8) = v14;
            uint64_t v14 = v23;
            uint64_t i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

float cv3d::cv::gess::internal::CounterClockWise(float *a1, float *a2, float *a3)
{
  return (float)((float)((float)(*a2 - *a1) * (float)(a3[1] - a1[1]))
               - (float)((float)(a2[1] - a1[1]) * (float)(*a3 - *a1)))
       * 0.5;
}

uint64_t cv3d::cv::gess::internal::CalculateSurfaceAndParamArea(uint64_t *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unsigned int v8 = (*(uint64_t (**)(void *))(*a3 + 16))(a3);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = v10 - *a1;
  if (v10 != *a1)
  {
    unint64_t v12 = 0;
    LODWORD(v13) = 0;
    unint64_t v14 = v8;
    unint64_t v15 = v11 >> 2;
    uint64_t v16 = a3[5];
    unint64_t v17 = (a3[6] - v16) / 12;
    uint64_t v18 = *a4;
    uint64_t v19 = v16 + 8;
    do
    {
      unint64_t v13 = (v13 + 1);
      unint64_t v20 = v14;
      if (v15 != v13) {
        unint64_t v20 = *(unsigned int *)(v9 + 4 * v13);
      }
      unint64_t v21 = *(unsigned int *)(v9 + 4 * v12);
      double v22 = 0.0;
      if (v21 < v20)
      {
        uint64_t v23 = *(void *)(a2 + 40);
        unint64_t v24 = (*(void *)(a2 + 48) - v23) >> 3;
        unint64_t v25 = v17 - v21;
        if (v17 < v21) {
          unint64_t v25 = 0;
        }
        unint64_t v26 = v20 - v21;
        unint64_t v27 = (unsigned int *)(v19 + 12 * v21);
        double v28 = 0.0;
        double v29 = 0.0;
        do
        {
          if (!v25) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          unint64_t v30 = *(v27 - 2);
          if (v24 <= v30) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          unint64_t v31 = *(v27 - 1);
          if (v24 <= v31) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          unint64_t v32 = *v27;
          if (v24 <= v32) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          unint64_t v33 = (float *)(v23 + 8 * v30);
          double v34 = fabs(((*(float *)(v23 + 8 * v31) - *v33) * (*(float *)(v23 + 8 * v32 + 4) - v33[1])- (*(float *)(v23 + 8 * v31 + 4) - v33[1]) * (*(float *)(v23 + 8 * v32) - *v33))* 0.5)- v29;
          double v22 = v28 + v34;
          double v29 = v28 + v34 - v28 - v34;
          --v25;
          v27 += 3;
          double v28 = v22;
          --v26;
        }
        while (v26);
      }
      float v35 = v22;
      *(double *)(v18 + 8 * v12) = v35;
      unint64_t v12 = v13;
    }
    while (v15 > v13);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::DrawLine(float *a1, float *a2, uint64_t a3)
{
  float v3 = a2[1];
  float v4 = *a1;
  float v5 = a1[1];
  float v6 = vabds_f32(*a2, *a1);
  float v7 = vabds_f32(v3, v5);
  if (v6 < v7) {
    float v6 = v7;
  }
  if (v6 >= 0.00001 && v6 > 0.0)
  {
    float v8 = (float)(*a2 - v4) / v6;
    int v9 = *(_DWORD *)(a3 + 4);
    unsigned int v10 = *(_DWORD *)(a3 + 8) - 1;
    uint64_t v11 = *(void *)(a3 + 16);
    int v12 = *(_DWORD *)(a3 + 12);
    unsigned int v13 = 1;
    float v14 = (float)(v3 - v5) / v6;
    do
    {
      unsigned int v15 = vcvtms_u32_f32(v4);
      if (v15 >= v9 - 1) {
        unsigned int v15 = v9 - 1;
      }
      unsigned int v16 = vcvtms_u32_f32(v5);
      if (v16 >= v10) {
        unsigned int v16 = v10;
      }
      *(unsigned char *)(v11 + (v15 + v16 * v9) * v12) = 1;
      float v4 = v8 + v4;
      float v5 = v14 + v5;
      float v17 = (float)v13++;
    }
    while (v6 > v17);
  }
  return v6 >= 0.00001;
}

uint64_t cv3d::cv::gess::internal::DrawTriangle(float *a1, float *a2, float *a3, uint64_t a4)
{
  float v4 = *a1;
  float v5 = a1[1];
  float v6 = fminf(*a1, 3.4028e38);
  float v7 = fminf(v5, 3.4028e38);
  float v8 = fmaxf(*a1, -3.4028e38);
  float v9 = fmaxf(v5, -3.4028e38);
  float v10 = *a2;
  float v11 = a2[1];
  if (*a2 >= v6) {
    float v12 = v6;
  }
  else {
    float v12 = *a2;
  }
  if (v11 >= v7) {
    float v13 = v7;
  }
  else {
    float v13 = a2[1];
  }
  if (v8 < v10) {
    float v8 = *a2;
  }
  if (v9 < v11) {
    float v9 = a2[1];
  }
  float v14 = *a3;
  float v15 = a3[1];
  if (*a3 < v12) {
    float v12 = *a3;
  }
  if (v15 < v13) {
    float v13 = a3[1];
  }
  if (v8 < v14) {
    float v8 = *a3;
  }
  if (v9 < v15) {
    float v9 = a3[1];
  }
  unsigned int v16 = vcvtms_u32_f32(v12);
  int v17 = *(_DWORD *)(a4 + 4);
  int v18 = *(_DWORD *)(a4 + 8);
  unsigned int v19 = v17 - 1;
  if (v16 >= v17 - 1) {
    unsigned int v16 = v17 - 1;
  }
  unsigned int v20 = vcvtps_u32_f32(v8);
  if (v20 < v19) {
    unsigned int v19 = v20;
  }
  unsigned int v21 = vcvtms_u32_f32(v13);
  unsigned int v22 = v18 - 1;
  if (v21 >= v18 - 1) {
    unsigned int v23 = v18 - 1;
  }
  else {
    unsigned int v23 = v21;
  }
  unsigned int v24 = vcvtps_u32_f32(v9);
  if (v24 >= v22) {
    unsigned int v24 = v22;
  }
  if (v23 <= v24)
  {
    float v25 = (float)((float)(v14 - v4) * (float)(v11 - v5)) - (float)((float)(v15 - v5) * (float)(v10 - v4));
    unsigned int v26 = v16 + v17 * v23;
    do
    {
      if (v16 <= v19)
      {
        float v27 = (double)v23 + 0.5;
        float v28 = -(float)((float)(v27 - v11) * (float)(v14 - v10));
        float v29 = -(float)((float)(v27 - v15) * (float)(v4 - v14));
        float v30 = -(float)((float)(v27 - v5) * (float)(v10 - v4));
        uint64_t v31 = *(void *)(a4 + 16);
        int v32 = *(_DWORD *)(a4 + 12);
        unsigned int v33 = v32 * v26;
        unsigned int v34 = v16;
        do
        {
          float v35 = (double)v34 + 0.5;
          if ((float)((float)(v28 + (float)((float)(v35 - v10) * (float)(v15 - v11))) / v25) >= 0.0
            && (float)((float)(v29 + (float)((float)(v35 - v14) * (float)(v5 - v15))) / v25) >= 0.0
            && (float)((float)(v30 + (float)((float)(v35 - v4) * (float)(v11 - v5))) / v25) >= 0.0)
          {
            *(unsigned char *)(v31 + v33) = 1;
          }
          ++v34;
          v33 += v32;
        }
        while (v34 <= v19);
      }
      ++v23;
      v26 += v17;
    }
    while (v23 <= v24);
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::CanBlit(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 1;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 4);
  if (!v5) {
    return 1;
  }
  int v6 = 0;
  unsigned int v8 = *(_DWORD *)(a2 + 4);
  unsigned int v7 = *(_DWORD *)(a2 + 8);
  if (v7 <= 8) {
    int v9 = 1;
  }
  else {
    int v9 = 8;
  }
  if (v8 <= 8) {
    int v10 = 1;
  }
  else {
    int v10 = 8;
  }
  while (1)
  {
    int v11 = v6;
    unsigned int v12 = v6 + a4;
    if (v12 < v4 && v5 > a3) {
      break;
    }
LABEL_20:
    int v6 = v11 + v9;
    if (v11 + v9 >= v7)
    {
      int v6 = (v11 & (v9 - 1)) + 1;
      if (v6 == v9) {
        return 1;
      }
    }
  }
  int v14 = 0;
  int v15 = v12 * v5;
  unsigned int v16 = a3;
  while (!*(unsigned char *)(*(void *)(a1 + 16) + *(_DWORD *)(a1 + 12) * (v16 + v15))
       || !*(unsigned char *)(*(void *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v14 + v11 * v8)))
  {
    int v17 = v14 + v10;
    if (v14 + v10 < v8 || (int v17 = (v14 & (v10 - 1)) + 1, v17 != v10))
    {
      unsigned int v16 = v17 + a3;
      int v14 = v17;
      if (v17 + a3 < v5) {
        continue;
      }
    }
    goto LABEL_20;
  }
  return 0;
}

uint64_t cv3d::cv::gess::internal::AddChart(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  if (a8) {
    a2 = a3;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  if (v9 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    uint64_t v12 = *(unsigned int *)(a2 + 4);
    uint64_t v13 = a4;
    int v14 = a7;
    do
    {
      if (v11 + a7 >= 0 && (int)v12 >= 1)
      {
        uint64_t v15 = *(void *)(a2 + 16);
        int v16 = *(_DWORD *)(a2 + 12);
        uint64_t v17 = *(void *)(result + 16);
        int v18 = *(_DWORD *)(result + 12);
        unsigned int v19 = v18 * (a6 + *(_DWORD *)(result + 4) * v14);
        unsigned int v20 = v16 * v10;
        uint64_t v21 = v12;
        uint64_t v22 = a6;
        do
        {
          if ((v22 & 0x8000000000000000) == 0 && v11 + a7 < a5 && v22 < v13 && *(unsigned char *)(v15 + v20))
          {
            if (*(unsigned char *)(v17 + v19)) {
              cv3d::cv::gess::internal::AddChart();
            }
            *(unsigned char *)(v17 + v19) = 1;
          }
          v19 += v18;
          ++v22;
          v20 += v16;
          --v21;
        }
        while (v21);
      }
      ++v11;
      ++v14;
      v10 += v12;
    }
    while (v11 != v9);
  }
  return result;
}

float cv3d::cv::gess::internal::TextureBoundingArea(unsigned int **a1, uint64_t a2, float *a3, float64x2_t a4)
{
  a4.f64[0] = *a3;
  float64x2_t v21 = a4;
  __double2 v8 = __sincos_stret(a4.f64[0]);
  v6.f64[0] = v8.__cosval;
  int v9 = *a1;
  int v10 = a1[1];
  if (*a1 == v10) {
    return INFINITY;
  }
  v11.f64[0] = -v8.__sinval;
  v11.f64[1] = v8.__cosval;
  v6.f64[1] = v8.__sinval;
  uint64_t v12 = *(void *)(a2 + 40);
  float64x2_t v13 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  float64x2_t v14 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v7.f64[0] = 0.00000001;
  int8x16_t v15 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v21, v7).i64[0], 0);
  do
  {
    unint64_t v16 = *v9;
    if ((*(void *)(a2 + 48) - v12) >> 3 <= v16) {
      cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
    }
    float64x2_t v17 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 8 * v16));
    float64x2_t v18 = (float64x2_t)vbslq_s8(v15, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64((float64x2_t)0, v6, v17.f64[0]), v11, v17, 1), (int8x16_t)v17);
    float64x2_t v13 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v13, v18), (int8x16_t)v18, (int8x16_t)v13);
    float64x2_t v14 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v18, v14), (int8x16_t)v18, (int8x16_t)v14);
    ++v9;
  }
  while (v9 != v10);
  float64x2_t v19 = vsubq_f64(v14, v13);
  return vmulq_laneq_f64(v19, v19, 1).f64[0];
}

float32x2_t cv3d::cv::gess::internal::RotateTexture(unsigned int **a1, uint64_t a2, float *a3)
{
  *(double *)&float32x2_t result = *a3;
  if (*(double *)&result > 0.00000001)
  {
    __double2 v7 = __sincos_stret(*(double *)&result);
    v6.f64[0] = v7.__cosval;
    float32x2_t result = *(float32x2_t *)&v7.__sinval;
    __double2 v8 = *a1;
    int v9 = a1[1];
    if (*a1 != v9)
    {
      v10.f64[0] = -v7.__sinval;
      v10.f64[1] = v7.__cosval;
      v6.f64[1] = v7.__sinval;
      uint64_t v11 = *(void *)(a2 + 40);
      unint64_t v12 = (*(void *)(a2 + 48) - v11) >> 3;
      do
      {
        unint64_t v13 = *v8;
        if (v12 <= v13) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        float64x2_t v14 = (float *)(v11 + 8 * v13);
        float32x2_t result = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v6, *v14), v10, v14[1]));
        *(double *)float64x2_t v14 = *(double *)&result;
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::SortCharts(unsigned int **a1, uint64_t *a2)
{
  std::vector<std::pair<unsigned int,double>>::vector(&__p, a1[1] - *a1);
  unsigned int v4 = *a1;
  unsigned int v5 = (double *)__p;
  uint64_t v6 = (char *)a1[1] - (char *)*a1;
  if (v6)
  {
    unint64_t v7 = v6 >> 2;
    uint64_t v8 = *a2;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (char *)__p + 8;
    do
    {
      unsigned int v10 = *v4++;
      uint64_t v11 = *(void *)(v8 + 8 * v10);
      *((_DWORD *)v9 - 2) = v10;
      void *v9 = v11;
      v9 += 2;
      --v7;
    }
    while (v7);
  }
  unint64_t v12 = 126 - 2 * __clz(((char *)v22 - (char *)v5) >> 4);
  if (v22 == v5) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *,false>(v5, (unint64_t)v22, v13, 1);
  float64x2_t v14 = *a1;
  int8x16_t v15 = (double *)__p;
  uint64_t v16 = (char *)a1[1] - (char *)*a1;
  if (v16)
  {
    unint64_t v17 = v16 >> 2;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    float64x2_t v18 = (int *)__p;
    do
    {
      int v19 = *v18;
      v18 += 4;
      *v14++ = v19;
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
  if (__p)
  {
LABEL_16:
    uint64_t v22 = v15;
    operator delete(v15);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::PrepareMultiTexture(int **a1, double **a2, uint64_t *a3, unsigned int *a4, uint64_t *a5)
{
  unsigned int v5 = a5;
  uint64_t v8 = *a2;
  double v9 = 0.0;
  while (v8 != a2[1])
  {
    double v10 = *v8++;
    double v9 = v9 + v10;
  }
  std::vector<std::vector<unsigned int>>::resize(a5, *a4);
  unint64_t v59 = *a4;
  if (v59)
  {
    LODWORD(v11) = v59 - 1;
    if (v59 == 1)
    {
      std::vector<int>::resize((std::vector<unsigned int> *)*v5, ((char *)a1[1] - (char *)*a1) >> 4);
      unint64_t v12 = *a1;
      uint64_t v13 = (char *)a1[1] - (char *)*a1;
      if (v13)
      {
        unint64_t v14 = v13 >> 4;
        int8x16_t v15 = *(_DWORD **)*v5;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        do
        {
          int v16 = *v12;
          v12 += 4;
          *v15++ = v16;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      float64x2_t v18 = *a2;
      unint64_t v17 = a2[1];
      unint64_t v19 = v17 - *a2;
      uint64_t v62 = v5;
      if (v19 <= v59)
      {
        std::vector<std::vector<unsigned int>>::resize(v5, v19);
        if (v17 != v18)
        {
          uint64_t v43 = 0;
          if (v19 <= 1) {
            unint64_t v19 = 1;
          }
          do
          {
            uint64_t v44 = *v5 + 24 * v43;
            int v45 = &(*a1)[4 * v43];
            unint64_t v47 = (int **)(v44 + 8);
            int v46 = *(int **)(v44 + 8);
            unint64_t v48 = *(void *)(v44 + 16);
            if ((unint64_t)v46 >= v48)
            {
              uint64_t v50 = *(int **)v44;
              uint64_t v51 = ((uint64_t)v46 - *(void *)v44) >> 2;
              unint64_t v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v53 = v48 - (void)v50;
              if (v53 >> 1 > v52) {
                unint64_t v52 = v53 >> 1;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v52;
              }
              if (v54)
              {
                unint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v44 + 16, v54);
                int v46 = *v47;
                uint64_t v50 = *(int **)v44;
              }
              else
              {
                unint64_t v55 = 0;
              }
              int v56 = &v55[4 * v51];
              *(_DWORD *)int v56 = *v45;
              uint64_t v49 = (int *)(v56 + 4);
              if (v46 == v50)
              {
                unsigned int v5 = v62;
              }
              else
              {
                unsigned int v5 = v62;
                do
                {
                  int v57 = *--v46;
                  *((_DWORD *)v56 - 1) = v57;
                  v56 -= 4;
                }
                while (v46 != v50);
              }
              *(void *)uint64_t v44 = v56;
              *unint64_t v47 = v49;
              *(void *)(v44 + 16) = &v55[4 * v54];
              if (v50) {
                operator delete(v50);
              }
            }
            else
            {
              int *v46 = *v45;
              uint64_t v49 = v46 + 1;
              unsigned int v5 = v62;
            }
            *unint64_t v47 = v49;
            ++v43;
          }
          while (v43 != v19);
        }
      }
      else
      {
        double v20 = v9 / (double)v59;
        BOOL v60 = 0;
        unsigned int v21 = 1;
        double v22 = 0.0;
        unsigned int v23 = *a4;
        while (1)
        {
          do
          {
            unsigned int v24 = v11;
            if (v22 >= v20 && v23 > v21)
            {
              double v9 = v9 - v22;
              double v20 = v9 / (double)(v23 - v21);
              cv3d::cv::gess::internal::SortCharts((unsigned int **)(*v5 + 24 * (v21 - 1)), a3);
              double v22 = 0.0;
              ++v21;
            }
            unsigned int v26 = &(*a1)[4 * v24];
            uint64_t v27 = *v26;
            double v28 = (*a2)[v27];
            uint64_t v29 = *v5 + 24 * (v21 - 1);
            uint64_t v31 = (_DWORD **)(v29 + 8);
            float v30 = *(_DWORD **)(v29 + 8);
            unsigned int v33 = (void *)(v29 + 16);
            unint64_t v32 = *(void *)(v29 + 16);
            if ((unint64_t)v30 >= v32)
            {
              float v35 = *(_DWORD **)v29;
              uint64_t v36 = ((uint64_t)v30 - *(void *)v29) >> 2;
              unint64_t v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v38 = v32 - (void)v35;
              if (v38 >> 1 > v37) {
                unint64_t v37 = v38 >> 1;
              }
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v37;
              }
              if (v39)
              {
                int v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v33, v39);
                float v30 = *v31;
                float v35 = *(_DWORD **)v29;
                LODWORD(v27) = *v26;
              }
              else
              {
                int v40 = 0;
              }
              char v41 = &v40[4 * v36];
              *(_DWORD *)char v41 = v27;
              unsigned int v34 = v41 + 4;
              if (v30 == v35)
              {
                unsigned int v5 = v62;
              }
              else
              {
                unsigned int v5 = v62;
                do
                {
                  int v42 = *--v30;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }
                while (v30 != v35);
              }
              *(void *)uint64_t v29 = v41;
              *uint64_t v31 = v34;
              *unsigned int v33 = &v40[4 * v39];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              _DWORD *v30 = v27;
              unsigned int v34 = v30 + 1;
            }
            double v22 = v22 + v28;
            *uint64_t v31 = v34;
            unsigned int v23 = *a4;
            unint64_t v11 = *a4 + v24;
          }
          while (v19 > v11);
          if (v60) {
            break;
          }
          if (v24 % v23 + 1 == v23) {
            LODWORD(v11) = 0;
          }
          else {
            LODWORD(v11) = v24 % v23 + 1;
          }
          BOOL v60 = v11 == v59 - 2;
        }
        cv3d::cv::gess::internal::SortCharts((unsigned int **)(v5[1] - 24), a3);
        if (v21 < *a4) {
          std::vector<std::vector<unsigned int>>::resize(v5, v21);
        }
      }
    }
  }
  return v59 != 0;
}

void cv3d::cv::gess::internal::SaveMaskImage(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v2 = *(void *)(a1 + 4);
  int v3 = *(_DWORD *)(a1 + 12);
  int v1 = 1;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v1);
}

void sub_24F4F2F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    MEMORY[0x25335E9F0](a17, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::ResizeImage(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(*(void *)a1 + 4) < a2 && *(_DWORD *)(*(void *)a1 + 8) < a2)
  {
    int v3 = operator new(0x30uLL);
    v3[1] = 0;
    v3[2] = 0;
    *((_DWORD *)v3 + 6) = 0;
    *int v3 = &unk_2700D8B08;
    *((_DWORD *)v3 + 7) = a2;
    *((_DWORD *)v3 + 8) = a2;
    *((_DWORD *)v3 + 9) = 1;
    v3[5] = 0;
    cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)(v3 + 3));
  }
  return 0;
}

void sub_24F4F3120(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::FindChartLocationRandom(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int *a6, int *a7, _DWORD *a8, _DWORD *a9, int *a10, int a11, cv3d::cv::gess::internal::KISSRng *a12)
{
  char v41 = 0;
  int v39 = a5 * a4;
  if (a5 * a4 >= 4096) {
    int v12 = 4096;
  }
  else {
    int v12 = a5 * a4;
  }
  if (v12 <= 16) {
    int v13 = 16;
  }
  else {
    int v13 = v12;
  }
  int v14 = a4 + 1;
  int v15 = a5 + 1;
  int v49 = 0x7FFFFFFF;
  int v46 = a5 + 1;
  while (1)
  {
    int v16 = *(_DWORD *)(a2 + 4);
    int v17 = *(_DWORD *)(a2 + 8);
    unsigned int v18 = *((_DWORD *)a12 + 1) ^ (*((_DWORD *)a12 + 1) << 13);
    int v19 = v18 ^ (v18 >> 17);
    uint64_t v20 = *((unsigned int *)a12 + 3) + 698769069 * *((unsigned int *)a12 + 2);
    int v21 = v19 ^ (32 * v19);
    int v22 = ((_BYTE)v19
         + -51 * *(unsigned char *)a12
         + 57
         + *((_DWORD *)a12 + 3)
         - 83 * *((_DWORD *)a12 + 2)) & 1;
    int v51 = v22;
    *(_DWORD *)a12 = 69069 * *(_DWORD *)a12 + 12345;
    *((_DWORD *)a12 + 1) = v21;
    *((void *)a12 + 1) = v20;
    if (v22) {
      int v23 = v16;
    }
    else {
      int v23 = v17;
    }
    if (v22) {
      int v24 = v17;
    }
    else {
      int v24 = v16;
    }
    int v25 = v15;
    int v26 = v14;
    if (a11)
    {
      if (a11 - v24 >= v14) {
        int v26 = v14;
      }
      else {
        int v26 = a11 - v24;
      }
      if (a11 - v23 >= v15) {
        int v25 = v15;
      }
      else {
        int v25 = a11 - v23;
      }
    }
    signed int Range = cv3d::cv::gess::internal::KISSRng::getRange(a12, v26);
    int v28 = cv3d::cv::gess::internal::KISSRng::getRange(a12, v25);
    int v29 = Range + v24;
    if (Range + v24 <= a4) {
      int v29 = a4;
    }
    int v30 = v28 + v23;
    if (v28 + v23 <= a5) {
      int v30 = a5;
    }
    int v31 = v30 * v29;
    if (v29 <= v30) {
      int v29 = v30;
    }
    int v32 = v31 + v29 * v29;
    if (v32 <= v49)
    {
      int v33 = v28;
      if (v32 != v49) {
        break;
      }
      if (v28 >= Range) {
        signed int v34 = Range;
      }
      else {
        signed int v34 = v28;
      }
      signed int v35 = *a7;
      if (*a7 >= *a6) {
        signed int v35 = *a6;
      }
      if (v34 <= v35) {
        break;
      }
    }
    int v15 = v46;
LABEL_41:
    if (!--v13) {
      return v41 & 1;
    }
  }
  if (v51) {
    uint64_t v36 = a3;
  }
  else {
    uint64_t v36 = a2;
  }
  int CanBlit = cv3d::cv::gess::internal::CanBlit(a1, v36, Range, v28);
  int v15 = v46;
  if (!CanBlit) {
    goto LABEL_41;
  }
  *a6 = Range;
  *a7 = v33;
  *a8 = v24;
  *a9 = v23;
  char v41 = 1;
  int v49 = v32;
  *a10 = v51;
  if (v31 != v39) {
    goto LABEL_41;
  }
  return v41 & 1;
}

uint64_t cv3d::cv::gess::internal::KISSRng::getRange(cv3d::cv::gess::internal::KISSRng *this, int a2)
{
  if (!a2) {
    return 0;
  }
  int v2 = 69069 * *(_DWORD *)this + 12345;
  unsigned int v3 = *((_DWORD *)this + 1) ^ (*((_DWORD *)this + 1) << 13);
  int v4 = v3 ^ (v3 >> 17) ^ (32 * (v3 ^ (v3 >> 17)));
  *(_DWORD *)this = v2;
  *((_DWORD *)this + 1) = v4;
  uint64_t v5 = *((unsigned int *)this + 3) + 698769069 * *((unsigned int *)this + 2);
  *((void *)this + 1) = v5;
  return (v4 + v2 + (int)v5) % (a2 + 1);
}

BOOL cv3d::cv::gess::internal::Get2DConvexHull(char **a1, uint64_t a2, char **a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (uint64_t)a1[1];
  uint64_t v7 = v6 - (void)*a1;
  if ((unint64_t)v7 < 0xC) {
    return 0;
  }
  unint64_t v10 = v7 >> 2;
  if (v7 == 12)
  {
    if (a3 != a1) {
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)a3, v5, v6, v10);
    }
    return 1;
  }
  else
  {
    for (uint64_t i = *(unsigned int *)v5; v5 != (char *)v6; v5 += 4)
    {
      int v12 = (float *)(a2 + 8 * *(unsigned int *)v5);
      float v13 = v12[1];
      int v14 = (float *)(a2 + 8 * i);
      float v15 = v14[1];
      if (v13 < v15 || v13 < (float)(v15 + 0.000001) && *v12 < *v14) {
        uint64_t i = *(unsigned int *)v5;
      }
    }
    long long v89 = 0uLL;
    if ((unint64_t)v7 >= 0x5555555555555555) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    std::__split_buffer<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance,std::allocator<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance> &>::__split_buffer(&v90, v10, 0, (uint64_t)&v89 + 8);
    uint64_t v16 = v89;
    unint64_t v17 = v91;
    if ((void)v89)
    {
      do
      {
        uint64_t v18 = *(void *)(v16 - 12);
        v16 -= 12;
        int v19 = *(_DWORD *)(v16 + 8);
        *(void *)(v17 - 12) = v18;
        v17 -= 12;
        *(_DWORD *)(v17 + 8) = v19;
      }
      while (v16);
      uint64_t v16 = v89;
    }
    unint64_t v88 = v17;
    uint64_t v20 = *((void *)&v89 + 1);
    long long v89 = v92;
    *(void *)&long long v92 = v16;
    *((void *)&v92 + 1) = v20;
    uint64_t v90 = 0;
    unint64_t v91 = 0;
    if (v16) {
      *(void *)&long long v92 = (v16 - 12) % 0xCuLL;
    }
    int v22 = (unsigned int *)*a1;
    int v21 = (unsigned int *)a1[1];
    if (v22 != v21)
    {
      int v23 = (float *)(a2 + 8 * i);
      do
      {
        uint64_t v24 = *v22;
        if (v24 != i)
        {
          int v25 = (float *)(a2 + 8 * v24);
          float v26 = *v25 - *v23;
          float v27 = sqrtf((float)((float)(v25[1] - v23[1]) * (float)(v25[1] - v23[1])) + (float)(v26 * v26));
          float v28 = v26 / v27;
          if (v27 <= 0.0) {
            float v29 = 1.0;
          }
          else {
            float v29 = v28;
          }
          if ((unint64_t)v89 >= *((void *)&v89 + 1))
          {
            uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - v88) >> 2);
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) > 0x1555555555555555) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(*((void *)&v89 + 1) - v88) >> 2) > v32) {
              unint64_t v32 = 0x5555555555555556 * ((uint64_t)(*((void *)&v89 + 1) - v88) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v89 + 1) - v88) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v33 = 0x1555555555555555;
            }
            else {
              unint64_t v33 = v32;
            }
            std::__split_buffer<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance,std::allocator<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance> &>::__split_buffer(&v90, v33, v31, (uint64_t)&v89 + 8);
            uint64_t v34 = v92;
            *(_DWORD *)long long v92 = v24;
            *(float *)(v34 + 4) = v29;
            *(float *)(v34 + 8) = v27;
            uint64_t v30 = v34 + 12;
            *(void *)&long long v92 = v34 + 12;
            signed int v35 = (char *)v89;
            unint64_t v36 = v91;
            if ((void)v89 == v88)
            {
              int v39 = (char *)v89;
            }
            else
            {
              do
              {
                uint64_t v37 = *(void *)(v35 - 12);
                v35 -= 12;
                int v38 = *((_DWORD *)v35 + 2);
                *(void *)(v36 - 12) = v37;
                v36 -= 12;
                *(_DWORD *)(v36 + 8) = v38;
              }
              while (v35 != (char *)v88);
              int v39 = (char *)v88;
              signed int v35 = (char *)v89;
              uint64_t v30 = v92;
            }
            unint64_t v88 = v36;
            uint64_t v40 = *((void *)&v89 + 1);
            *((void *)&v89 + 1) = *((void *)&v92 + 1);
            uint64_t v90 = v39;
            *(void *)&long long v92 = v35;
            *((void *)&v92 + 1) = v40;
            unint64_t v91 = (unint64_t)v39;
            if (v35 != v39) {
              *(void *)&long long v92 = &v35[-12 - 12 * ((v35 - v39 - 12) / 0xCuLL)];
            }
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_DWORD *)long long v89 = v24;
            uint64_t v30 = v89 + 12;
            *(float *)(v89 + 4) = v29;
            *(float *)(v89 + 8) = v27;
          }
          *(void *)&long long v89 = v30;
        }
        ++v22;
      }
      while (v22 != v21);
    }
    char v41 = (unsigned int *)v88;
    unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - v88) >> 2);
    BOOL v8 = v42 > 1;
    if (v42 > 1)
    {
      unint64_t v43 = 126 - 2 * __clz(v42);
      if ((void)v89 == v88) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = v43;
      }
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *,false>(v88, v89, v44, 1);
      int v45 = *a3;
      a3[1] = *a3;
      unint64_t v47 = a3 + 2;
      unint64_t v46 = (unint64_t)a3[2];
      if ((unint64_t)v45 >= v46)
      {
        uint64_t v49 = v46 - (void)v45;
        uint64_t v50 = v49 >> 1;
        if ((unint64_t)(v49 >> 1) <= 1) {
          uint64_t v50 = 1;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v51);
        uint64_t v53 = *a3;
        unint64_t v54 = a3[1];
        int v56 = &v52[4 * v55];
        *(_DWORD *)unint64_t v52 = i;
        unint64_t v48 = v52 + 4;
        while (v54 != v53)
        {
          int v57 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v52 - 1) = v57;
          v52 -= 4;
        }
        *a3 = v52;
        a3[1] = v48;
        a3[2] = v56;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(_DWORD *)int v45 = i;
        unint64_t v48 = v45 + 4;
      }
      a3[1] = v48;
      char v41 = (unsigned int *)v88;
      if (v88 != (void)v89)
      {
        do
        {
          uint64_t v58 = *v41;
          unint64_t v59 = *a3;
          uint64_t v60 = v48 - *a3;
          uint64_t v61 = v60 >> 2;
          if ((unint64_t)v60 >= 5)
          {
            uint64_t v62 = (float *)(a2 + 8 * v58);
            float v63 = *v62;
            float v64 = v62[1];
            do
            {
              uint64_t v65 = &v59[4 * v61];
              int v66 = (float *)(a2 + 8 * *((unsigned int *)v65 - 2));
              uint64_t v67 = (float *)(a2 + 8 * *((unsigned int *)v65 - 1));
              if ((float)((float)((float)((float)(*v67 - *v66) * (float)(v64 - v66[1]))
                                 - (float)((float)(v67[1] - v66[1]) * (float)(v63 - *v66)))
                         * 0.5) >= 0.000001)
                break;
              v48 -= 4;
              a3[1] = v48;
              v60 -= 4;
              uint64_t v61 = v60 >> 2;
            }
            while ((unint64_t)v60 > 4);
          }
          if ((unint64_t)v48 >= *v47)
          {
            unint64_t v68 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v69 = *v47 - (void)v59;
            if (v69 >> 1 > v68) {
              unint64_t v68 = v69 >> 1;
            }
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v68;
            }
            if (v70)
            {
              unsigned int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v70);
              unint64_t v59 = *a3;
              unint64_t v48 = a3[1];
            }
            else
            {
              unsigned int v71 = 0;
            }
            uint64_t v72 = &v71[4 * v61];
            *(_DWORD *)uint64_t v72 = v58;
            int v73 = v72 + 4;
            while (v48 != v59)
            {
              int v74 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              *((_DWORD *)v72 - 1) = v74;
              v72 -= 4;
            }
            *a3 = v72;
            a3[1] = v73;
            a3[2] = &v71[4 * v70];
            if (v59) {
              operator delete(v59);
            }
            unint64_t v48 = v73;
          }
          else
          {
            *(_DWORD *)unint64_t v48 = v58;
            v48 += 4;
          }
          a3[1] = v48;
          v41 += 3;
        }
        while (v41 != (unsigned int *)v89);
        char v41 = (unsigned int *)v88;
      }
      if (v48 - *a3 == 8)
      {
        uint64_t v75 = (_DWORD *)(v89 - 24);
        if ((unint64_t)v48 >= *v47)
        {
          uint64_t v77 = *v47 - (void)*a3;
          if ((unint64_t)(v77 >> 1) <= 3) {
            uint64_t v78 = 3;
          }
          else {
            uint64_t v78 = v77 >> 1;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v78;
          }
          int v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v79);
          unint64_t v81 = *a3;
          unsigned int v82 = a3[1];
          int v83 = v80 + 8;
          long long v85 = &v80[4 * v84];
          _DWORD *v83 = *v75;
          uint64_t v76 = (int32x2_t *)(v83 + 1);
          while (v82 != v81)
          {
            int v86 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            *--int v83 = v86;
          }
          *a3 = (char *)v83;
          a3[1] = (char *)v76;
          a3[2] = v85;
          if (v81) {
            operator delete(v81);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v48 = *v75;
          uint64_t v76 = (int32x2_t *)(v48 + 4);
        }
        a3[1] = (char *)v76;
        v76[-1] = vrev64_s32(v76[-1]);
        char v41 = (unsigned int *)v88;
      }
    }
    if (v41) {
      operator delete(v41);
    }
  }
  return v8;
}

void sub_24F4F39AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::XAtlasPacking(uint64_t **a1, _DWORD *a2, unsigned int *a3, float *a4, int a5, char a6)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  int v48 = -1;
  int v49 = a5;
  int v47 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v52, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t context = 0;
  int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, (uint64_t)&context, (unsigned __int8 *)&v52);
  if (v53 < 0) {
    operator delete((void *)v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)a1, &v48, (unsigned __int8 *)&v52);
  if (v53 < 0) {
    operator delete((void *)v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(context) = 0;
  int v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(a1 + 7, (uint64_t)&context, (unsigned __int8 *)&v52);
  if (v53 < 0) {
    operator delete((void *)v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  int v51 = 0;
  uint64_t context = 0;
  int v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1 + 7, (uint64_t)&context, (unsigned __int8 *)&v52);
  if (v53 < 0) {
    operator delete((void *)v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(context) = 0;
  int v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(a1 + 7, (uint64_t)&context, (unsigned __int8 *)&v52);
  int v47 = v13;
  if (v53 < 0)
  {
    operator delete((void *)v52);
    int v13 = v47;
  }
  if (v13 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>((uint64_t)a1, &v47, &v52);
    if (v53 < 0) {
      operator delete((void *)v52);
    }
  }
  LODWORD(v52) = v10;
  int v14 = (const cv3d::cv::gess::mesh::BaseAttribute *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)a1 + 10, (unsigned int *)&v52);
  LODWORD(v52) = v48;
  uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)a1 + 10, (unsigned int *)&v52);
  LODWORD(v52) = v11;
  uint64_t v16 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)a1 + 7, (unsigned int *)&v52);
  LODWORD(v52) = v12;
  unint64_t v17 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)a1 + 7, (unsigned int *)&v52);
  LODWORD(v52) = v47;
  uint64_t v18 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)a1 + 7, (unsigned int *)&v52);
  std::vector<int>::size_type v46 = 0;
  std::vector<int>::size_type v46 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  unsigned int v45 = 0;
  if (a6)
  {
    int v43 = 0;
    int v44 = -1027081503;
    int v19 = operator new(0xCuLL);
    std::string __p = v19;
    unint64_t v42 = v19 + 3;
    *(void *)int v19 = 0x3ECCCCCD3F0CCCCDLL;
    void v19[2] = 1050253722;
    char v41 = v19 + 3;
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::vector(v39, 3uLL, v14);
    std::vector<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::vector(v38, (v41 - (unsigned char *)__p) >> 2, (uint64_t)v18);
    unsigned __int8 v37 = 0;
    dispatch_semaphore_t v36 = dispatch_semaphore_create(1);
    uint64_t v20 = operator new(0x80uLL);
    void *v20 = &unk_2700D8B40;
    v20[1] = &__p;
    v20[2] = v39;
    v20[3] = v16;
    v20[4] = v17;
    v20[5] = v38;
    v20[6] = &v46;
    v20[7] = a2;
    v20[8] = a3;
    v20[9] = a4;
    v20[10] = &v49;
    v20[11] = &v44;
    v20[12] = &v45;
    v20[13] = &v43;
    v20[14] = &v37;
    v20[15] = &v36;
    unint64_t v54 = v20;
    std::__function::__value_func<void ()(int)>::__value_func[abi:ne180100]((uint64_t)&context, (uint64_t)&v52);
    int v21 = dispatch_queue_create("com.gcd.task4", MEMORY[0x263EF83A8]);
    dispatch_apply_f((v41 - (unsigned char *)__p) >> 2, v21, &context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_1::__invoke);
    dispatch_release(v21);
    int v22 = v37;
    if (v37)
    {
      for (unsigned int i = 0;
            (*(uint64_t (**)(const cv3d::cv::gess::mesh::BaseAttribute *))(*(void *)v14 + 16))(v14) > (unint64_t)i;
            ++i)
      {
        uint64_t v24 = *(void *)(v39[0] + ((uint64_t)v43 << 6) + 40);
        if (i >= (unint64_t)((*(void *)(v39[0] + ((uint64_t)v43 << 6) + 48) - v24) >> 3)
          || (uint64_t v25 = *((void *)v14 + 5), i >= (unint64_t)((*((void *)v14 + 6) - v25) >> 3)))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        float v26 = (_DWORD *)(v24 + 8 * i);
        float v27 = (_DWORD *)(v25 + 8 * i);
        *float v27 = *v26;
        v27[1] = v26[1];
      }
      for (unsigned int j = 0; (*(uint64_t (**)(void *))(*v18 + 16))(v18) > (unint64_t)j; ++j)
      {
        uint64_t v30 = *(void *)(v38[0] + ((uint64_t)v43 << 6) + 40);
        if (j >= (unint64_t)((*(void *)(v38[0] + ((uint64_t)v43 << 6) + 48) - v30) >> 1)
          || (uint64_t v31 = v18[5], j >= (unint64_t)((v18[6] - v31) >> 1)))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(_WORD *)(v31 + 2 * j) = *(_WORD *)(v30 + 2 * j);
      }
    }
    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](&context);
    unint64_t v32 = (void ***)std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](&v52);
    *(void *)&long long v52 = v38;
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100](v32);
    *(void *)&long long v52 = v39;
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    if (__p)
    {
      char v41 = __p;
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_31;
    }
    return 0;
  }
  LODWORD(v34) = v49;
  if ((cv3d::cv::gess::internal::XAtlasPacking(v14, v16, v17, v18, &v46, a2, a3, a4, flt_24F578838[v49 == 0], &v45, v34) & 1) == 0)return 0; {
LABEL_31:
  }
  (*(void (**)(uint64_t, void))(*(void *)v15 + 32))(v15, v45);
  if (v45) {
    cv3d::cv::gess::alg::SortFaceByGroupID(a1, v33);
  }
  return 1;
}

void sub_24F4F3FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(char *)(v29 - 105) < 0) {
    operator delete(*(void **)(v29 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::XAtlasPacking(void *a1, void *a2, void *a3, void *a4, std::vector<int>::size_type *a5, _DWORD *a6, unsigned int *a7, float *a8, float a9, _DWORD *a10, uint64_t a11)
{
  v148[4] = *(void ***)MEMORY[0x263EF8340];
  double v146 = *a8 * 0.5;
  unsigned int v15 = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
  unsigned int v145 = v15;
  memset(&v144, 0, sizeof(v144));
  uint64_t v130 = a5;
  std::vector<unsigned int>::reserve(&v144, *a5);
  unint64_t v16 = v15;
  if (v15)
  {
    int v17 = 0;
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = a2[5];
      if (v18 >= (a2[6] - v19) >> 2) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      if (v17 == *(_DWORD *)(v19 + 4 * v18))
      {
        std::vector<int>::pointer end = v144.__end_;
        if (v144.__end_ >= v144.__end_cap_.__value_)
        {
          begiuint64_t n = v144.__begin_;
          int64_t v23 = v144.__end_ - v144.__begin_;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = (char *)v144.__end_cap_.__value_ - (char *)v144.__begin_;
          if (((char *)v144.__end_cap_.__value_ - (char *)v144.__begin_) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            float v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v144.__end_cap_, v26);
            begiuint64_t n = v144.__begin_;
            std::vector<int>::pointer end = v144.__end_;
          }
          else
          {
            float v27 = 0;
          }
          float v28 = (int *)&v27[4 * v23];
          int *v28 = v18;
          int v21 = v28 + 1;
          while (end != begin)
          {
            int v29 = *--end;
            *--float v28 = v29;
          }
          v144.__begin_ = v28;
          v144.__end_ = v21;
          v144.__end_cap_.__value_ = (int *)&v27[4 * v26];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v144.__end_ = v18;
          int v21 = end + 1;
        }
        v144.__end_ = v21;
        ++v17;
        unint64_t v16 = v145;
      }
      ++v18;
    }
    while (v18 < v16);
  }
  unint64_t v30 = v144.__end_ - v144.__begin_;
  uint64_t v31 = v130;
  if (v30 != *v130) {
    __assert_rtn("XAtlasPacking", "XAtlasPacking.cpp", 667, "g_starts.size() == chart_number");
  }
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(v143, v30);
  std::vector<std::pair<unsigned int,double>>::vector(&v141, *v130);
  unint64_t v32 = *v130;
  if (*v130)
  {
    LODWORD(v33) = 0;
    uint64_t v34 = v141;
    do
    {
      _DWORD *v34 = v33;
      v34 += 4;
      unint64_t v33 = (v33 + 1);
    }
    while (v32 > v33);
  }
  std::vector<std::vector<unsigned int>>::vector(v140, v32);
  unint64_t v35 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  LOBYTE(v148[0]) = 0;
  std::vector<BOOL>::vector(&v139, v35, (unsigned __int8 *)v148);
  unint64_t v37 = *v130;
  if (*v130)
  {
    unint64_t v38 = 0;
    int v39 = 0;
    do
    {
      unint64_t v40 = v144.__begin_[v38];
      unint64_t v41 = (v39 + 1);
      unint64_t v42 = (int *)&v145;
      if (v41 != v144.__end_ - v144.__begin_) {
        unint64_t v42 = &v144.__begin_[v41];
      }
      unint64_t v132 = *v42;
      if (v40 < v132)
      {
        unint64_t v129 = v41;
        do
        {
          uint64_t v43 = a3[5];
          if (0xAAAAAAAAAAAAAAABLL * ((a3[6] - v43) >> 2) <= v40) {
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          uint64_t v44 = 0;
          uint64_t v45 = v43 + 12 * v40;
          std::vector<int>::size_type v46 = (char *)v139;
          do
          {
            unint64_t v47 = *(unsigned int *)(v45 + 4 * v44);
            if (((*(void *)&v46[(v47 >> 3) & 0x1FFFFFF8] >> v47) & 1) == 0)
            {
              uint64_t v48 = v140[0] + 24 * v38;
              uint64_t v50 = (_DWORD **)(v48 + 8);
              int v49 = *(_DWORD **)(v48 + 8);
              long long v52 = (void *)(v48 + 16);
              unint64_t v51 = *(void *)(v48 + 16);
              if ((unint64_t)v49 >= v51)
              {
                unint64_t v54 = *(_DWORD **)v48;
                uint64_t v55 = ((uint64_t)v49 - *(void *)v48) >> 2;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v57 = v51 - (void)v54;
                if (v57 >> 1 > v56) {
                  unint64_t v56 = v57 >> 1;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  unint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v52, v58);
                  int v49 = *v50;
                  unint64_t v54 = *(_DWORD **)v48;
                  LODWORD(v47) = *(_DWORD *)(v45 + 4 * v44);
                }
                else
                {
                  unint64_t v59 = 0;
                }
                uint64_t v60 = &v59[4 * v55];
                *(_DWORD *)uint64_t v60 = v47;
                char v53 = v60 + 4;
                while (v49 != v54)
                {
                  int v61 = *--v49;
                  *((_DWORD *)v60 - 1) = v61;
                  v60 -= 4;
                }
                *(void *)uint64_t v48 = v60;
                *uint64_t v50 = v53;
                void *v52 = &v59[4 * v58];
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                _DWORD *v49 = v47;
                char v53 = v49 + 1;
              }
              *uint64_t v50 = v53;
              std::vector<int>::size_type v46 = (char *)v139;
              *(void *)((char *)v139 + (((unint64_t)*(unsigned int *)(v45 + 4 * v44) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v45 + 4 * v44);
            }
            ++v44;
          }
          while (v44 != 3);
          ++v40;
        }
        while (v40 != v132);
        unint64_t v41 = v129;
        unint64_t v37 = *v130;
      }
      int v39 = v41;
      unint64_t v38 = v41;
    }
    while (v37 > v41);
    if (v37)
    {
      uint64_t v62 = 0;
      unsigned int v63 = 0;
      do
      {
        unsigned __int8 v64 = 0;
        unsigned __int8 v65 = 0;
        float v66 = 3.4028e38;
        do
        {
          unsigned int v67 = v64;
          *(float *)v36.f64 = (float)v64 * 0.098175;
          *(float *)float v148 = *(float *)v36.f64;
          *(float *)v36.f64 = cv3d::cv::gess::internal::TextureBoundingArea((unsigned int **)(v140[0] + 24 * v62), (uint64_t)a1, (float *)v148, v36);
          if (*(float *)v36.f64 < v66)
          {
            float v66 = *(float *)v36.f64;
            unsigned __int8 v65 = v64;
          }
          ++v64;
        }
        while (v67 < 0xF);
        *(float *)float v148 = (float)v65 * 0.098175;
        if (v65) {
          *(float32x2_t *)&v36.f64[0] = cv3d::cv::gess::internal::RotateTexture((unsigned int **)(v140[0] + 24 * v62), (uint64_t)a1, (float *)v148);
        }
        unint64_t v68 = *v130;
        uint64_t v62 = ++v63;
      }
      while (*v130 > v63);
    }
    else
    {
      unint64_t v68 = 0;
    }
    uint64_t v31 = v130;
  }
  else
  {
    unint64_t v68 = 0;
  }
  unsigned int v138 = *a6 + 2 * v146;
  std::vector<double>::vector(v137, v68);
  std::vector<double>::vector(__p, *v31);
  cv3d::cv::gess::internal::CalculateSurfaceAndParamArea((uint64_t *)&v144, (uint64_t)a1, a3, (uint64_t *)v137);
  unint64_t v69 = *v31;
  if (!*v31) {
    goto LABEL_109;
  }
  uint64_t v70 = 0;
  double v71 = 0.0;
  do
  {
    double v72 = *((double *)v137[0] + v70);
    double v71 = v71 + v72;
    ++v70;
  }
  while (v69 > v70);
  if (v71 > 0.0)
  {
    unint64_t v73 = 0;
    LODWORD(v74) = 0;
    float v75 = v71;
    std::vector<int>::pointer v76 = v144.__begin_;
    int64_t v77 = v144.__end_ - v144.__begin_;
    double v78 = sqrtf((float)(v138 * v138 * *a7) / (float)(v75 / a9));
    uint64_t v79 = a3[5];
    unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((a3[6] - v79) >> 2);
    uint64_t v81 = v140[0];
    uint64_t v82 = a1[5];
    unint64_t v83 = (a1[6] - v82) >> 3;
    LODWORD(v72) = *a6;
    double v84 = (double)*(unint64_t *)&v72 + -1.0;
    long long v85 = (double *)v137[0];
    int v86 = (float32x2_t *)v143[0];
    long long v87 = (double *)__p[0];
    unint64_t v88 = v141;
    int64x2_t v89 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v90 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    do
    {
      unint64_t v91 = v76[v73];
      unint64_t v74 = (v74 + 1);
      long long v92 = &v76[v74];
      if (v77 == v74) {
        long long v92 = (int *)&v145;
      }
      unint64_t v93 = *v92;
      float64x2_t v94 = (float64x2_t)v90;
      float64x2_t v95 = (float64x2_t)v89;
      if (v91 < v93)
      {
        uint64_t v96 = a1[5];
        uint64_t v97 = v79 + 12 * v91;
        float64x2_t v94 = (float64x2_t)v90;
        float64x2_t v95 = (float64x2_t)v89;
        do
        {
          if (v80 <= v91) {
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          uint64_t v98 = 0;
          do
          {
            unint64_t v99 = *(unsigned int *)(v97 + v98);
            if ((a1[6] - v96) >> 3 <= v99) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            v98 += 4;
            float64x2_t v100 = vcvtq_f64_f32(*(float32x2_t *)(v96 + 8 * v99));
            float64x2_t v94 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v94, v100), (int8x16_t)v100, (int8x16_t)v94);
            float64x2_t v95 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v100, v95), (int8x16_t)v100, (int8x16_t)v95);
          }
          while (v98 != 12);
          ++v91;
          v97 += 12;
        }
        while (v91 != v93);
      }
      unint64_t v101 = (unsigned int **)(v81 + 24 * v73);
      std::vector<unsigned int> v102 = *v101;
      int v103 = v101[1];
      for (unsigned int i = v102; i != v103; ++i)
      {
        unint64_t v105 = *i;
        if (v83 <= v105) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(float32x2_t *)(v82 + 8 * v105) = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(v82 + 8 * v105)), v94), v78));
      }
      float64x2_t v106 = vsubq_f64(v95, v94);
      double v107 = v78 * v106.f64[0];
      double v108 = vmuld_lane_f64(v78, v106, 1);
      if (v107 > v84 || v108 > v84)
      {
        if (v107 < v108) {
          double v107 = v108;
        }
        double v110 = v84 / v107;
        if (v102 != v103)
        {
          uint64_t v112 = v102;
          do
          {
            unint64_t v113 = *v112;
            if (v83 <= v113) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            float v111 = v110;
            *(float32x2_t *)(v82 + 8 * v113) = vmul_n_f32(*(float32x2_t *)(v82 + 8 * v113), v111);
            ++v112;
          }
          while (v112 != v103);
        }
        v85[v73] = v110 * v110 * v85[v73];
      }
      if (v102 == v103)
      {
        float64x2_t v115 = 0uLL;
      }
      else
      {
        float64x2_t v114 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v146 + 0.5), 0);
        float64x2_t v115 = 0uLL;
        do
        {
          unint64_t v116 = *v102;
          if (v83 <= v116) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          float32x2_t v117 = vcvt_f32_f64(vaddq_f64(v114, vcvtq_f64_f32(*(float32x2_t *)(v82 + 8 * v116))));
          float64x2_t v118 = vcvtq_f64_f32(v117);
          *(float32x2_t *)(v82 + 8 * v116) = v117;
          float64x2_t v115 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v118, v115), (int8x16_t)v118, (int8x16_t)v115);
          ++v102;
        }
        while (v102 != v103);
      }
      v86[v73] = vcvt_f32_f64(v115);
      v87[v73] = vaddvq_f64(v115);
      v88[2 * v73 + 1] = *(void *)&v85[v73];
      unint64_t v73 = v74;
    }
    while (v69 > v74);
    unint64_t v119 = 126 - 2 * __clz((v142 - (unsigned char *)v141) >> 4);
    if (v142 == v141) {
      uint64_t v120 = 0;
    }
    else {
      uint64_t v120 = v119;
    }
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *,false>((double *)v141, (unint64_t)v142, v120, 1);
    uint64_t v133 = 0;
    uint64_t v134 = 0;
    uint64_t v135 = 0;
    cv3d::cv::gess::internal::PrepareMultiTexture((int **)&v141, (double **)v137, (uint64_t *)__p, a7, &v133);
    *a10 = -1431655765 * ((unint64_t)(v134 - v133) >> 3);
    uint64_t v121 = (void **)operator new(0x60uLL);
    *uint64_t v121 = &unk_2700D8B88;
    v121[1] = &v133;
    v121[2] = &v138;
    v121[3] = v143;
    v121[4] = &v146;
    v121[5] = &v144;
    v121[6] = &v145;
    v121[7] = a3;
    v121[8] = a1;
    v121[9] = v140;
    v121[10] = a4;
    v121[11] = &a11;
    v148[3] = v121;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)context, (uint64_t)v148);
    int v122 = dispatch_queue_create("com.gcd.task3", MEMORY[0x263EF83A8]);
    dispatch_apply_f(*a10, v122, context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_2::__invoke);
    dispatch_release(v122);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](context);
    uint64_t v123 = (void ***)std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v148);
    v148[0] = (void **)&v133;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v123);
    uint64_t v124 = 1;
  }
  else
  {
LABEL_109:
    uint64_t v124 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v137[0])
  {
    v137[1] = v137[0];
    operator delete(v137[0]);
  }
  if (v139) {
    operator delete(v139);
  }
  v148[0] = (void **)v140;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v148);
  if (v141)
  {
    unint64_t v142 = v141;
    operator delete(v141);
  }
  if (v143[0])
  {
    v143[1] = v143[0];
    operator delete(v143[0]);
  }
  if (v144.__begin_)
  {
    v144.__end_ = v144.__begin_;
    operator delete(v144.__begin_);
  }
  return v124;
}

void sub_24F4F4B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v38 - 160));
  *(void *)(v38 - 160) = &a18;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  if (a28) {
    operator delete(a28);
  }
  *(void *)(v38 - 160) = &a31;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  unint64_t v40 = *(void **)(v38 - 232);
  if (v40)
  {
    *(void *)(v38 - 224) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::XAtlasPacking(std::vector<unsigned int>::size_type *a1, unint64_t *a2, std::vector<int>::size_type *a3, _DWORD *a4, unsigned int *a5, float *a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, _DWORD *a11, int a12)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "<unknown>");
  unsigned int v67 = &unk_2700D7B30;
  char v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v68, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    char v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string v68 = __p;
  }
  unint64_t v69 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
  uint64_t v70 = 0;
  unsigned int v67 = &unk_2700D8498;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  if (v20 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::resize(&v70, *a2);
  std::string::basic_string[abi:ne180100]<0>(v57, "<unknown>");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D7B30;
  char v21 = v57[23];
  if ((v57[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v57, *(std::string::size_type *)&v57[8]);
    char v21 = v57[23];
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v57;
    uint64_t v64 = *(void *)&v57[16];
  }
  unsigned __int8 v65 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
  memset(&v66, 0, sizeof(v66));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D8038;
  if (v21 < 0) {
    operator delete(*(void **)v57);
  }
  std::vector<int>::resize(&v66, *a1);
  std::string::basic_string[abi:ne180100]<0>(v51, "<unknown>");
  *(void *)uint64_t v57 = &unk_2700D7B30;
  char v22 = v51[23];
  if ((v51[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v57[8], *(const std::string::value_type **)v51, *(std::string::size_type *)&v51[8]);
    char v22 = v51[23];
  }
  else
  {
    *(_OWORD *)&v57[8] = *(_OWORD *)v51;
    uint64_t v58 = *(void *)&v51[16];
  }
  unint64_t v59 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
  uint64_t v60 = 0;
  *(void *)uint64_t v57 = &unk_2700D7F58;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  if (v22 < 0) {
    operator delete(*(void **)v51);
  }
  std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::resize((uint64_t)&v60, *a1);
  std::vector<unsigned int>::size_type v23 = *a1;
  if (*a1)
  {
    uint64_t v24 = 0;
    begiuint64_t n = v66.__begin_;
    int64_t v26 = v66.__end_ - v66.__begin_;
    uint64_t v27 = (v61 - v60) / 12;
    float v28 = (_DWORD *)(a8 + 8);
    int v29 = (_DWORD *)(v60 + 8);
    do
    {
      if (v26 == v24) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      begin[v24] = *(_DWORD *)(a7 + 4 * v24);
      if (v27 == v24) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      int v30 = *v28;
      *((void *)v29 - 1) = *((void *)v28 - 1);
      *int v29 = v30;
      v29 += 3;
      ++v24;
      v28 += 3;
    }
    while (v23 != v24);
  }
  unint64_t v31 = *a2;
  if (*a2)
  {
    uint64_t v32 = (v71 - v70) >> 3;
    unint64_t v33 = (int *)(a9 + 4);
    uint64_t v34 = (_DWORD *)(v70 + 4);
    do
    {
      if (!v32) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(v34 - 1) = *(v33 - 1);
      int v35 = *v33;
      v33 += 2;
      _DWORD *v34 = v35;
      v34 += 2;
      --v32;
      --v31;
    }
    while (v31);
  }
  std::string::basic_string[abi:ne180100]<0>(v49, "<unknown>");
  *(void *)unint64_t v51 = &unk_2700D7B30;
  if (SHIBYTE(v50) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v51[8], (const std::string::value_type *)v49[0], (std::string::size_type)v49[1]);
    char v53 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    unint64_t v54 = 0;
    *(void *)unint64_t v51 = &unk_2700D8738;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    if (SHIBYTE(v50) < 0) {
      operator delete(v49[0]);
    }
  }
  else
  {
    *(_OWORD *)&v51[8] = *(_OWORD *)v49;
    uint64_t v52 = v50;
    char v53 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    unint64_t v54 = 0;
    *(void *)unint64_t v51 = &unk_2700D8738;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
  }
  std::vector<unsigned short>::resize((uint64_t)&v54, *a1);
  LODWORD(v48) = a12;
  uint64_t v36 = cv3d::cv::gess::internal::XAtlasPacking(&v67, &__p, v57, v51, a3, a4, a5, a6, 0.55, a11, v48);
  if (v36)
  {
    unint64_t v37 = *a2;
    if (*a2)
    {
      uint64_t v38 = (v71 - v70) >> 3;
      int v39 = (_DWORD *)(a9 + 4);
      unint64_t v40 = (int *)(v70 + 4);
      do
      {
        if (!v38) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(v39 - 1) = *(v40 - 1);
        int v41 = *v40;
        v40 += 2;
        _DWORD *v39 = v41;
        v39 += 2;
        --v38;
        --v37;
      }
      while (v37);
    }
    std::vector<unsigned int>::size_type v42 = *a1;
    if (*a1)
    {
      uint64_t v44 = v54;
      uint64_t v45 = (v55 - (uint64_t)v54) >> 1;
      do
      {
        if (!v45) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        __int16 v46 = *v44++;
        *a10++ = v46;
        --v45;
        --v42;
      }
      while (v42);
    }
  }
  cv3d::cv::gess::mesh::AttributeT<unsigned short>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)v51);
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)v57);
  cv3d::cv::gess::mesh::AttributeT<unsigned int>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&__p);
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&v67);
  return v36;
}

void sub_24F4F51B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&a29);
  cv3d::cv::gess::mesh::AttributeT<unsigned int>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&a40);
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)(v45 - 144));
  _Unwind_Resume(a1);
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
}

void *std::vector<std::pair<unsigned int,double>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_24F4F52E8(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *,false>(double *result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = a2 - v10;
    unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v45 = *(double *)(a2 - 8);
          double v46 = *(double *)(v10 + 8);
          if (v45 > v46)
          {
            int v47 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *(_DWORD *)(a2 - 16);
            *(_DWORD *)(a2 - 16) = v47;
            *(double *)(v10 + 8) = v45;
            *(double *)(a2 - 8) = v46;
          }
          break;
        case 3uLL:
          float32x2_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v10, (double *)(v10 + 16), (double *)(a2 - 16));
          break;
        case 4uLL:
          float32x2_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), a2 - 16);
          break;
        case 5uLL:
          float32x2_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), v10 + 48);
          double v48 = *(double *)(a2 - 8);
          double v49 = *(double *)(v10 + 56);
          if (v48 > v49)
          {
            int v50 = *(_DWORD *)(v10 + 48);
            *(_DWORD *)(v10 + 48) = *(_DWORD *)(a2 - 16);
            *(_DWORD *)(a2 - 16) = v50;
            *(double *)(v10 + 56) = v48;
            *(double *)(a2 - 8) = v49;
            double v51 = *(double *)(v10 + 56);
            double v52 = *(double *)(v10 + 40);
            if (v51 > v52)
            {
              int v53 = *(_DWORD *)(v10 + 32);
              int v54 = *(_DWORD *)(v10 + 48);
              *(_DWORD *)(v10 + 32) = v54;
              *(_DWORD *)(v10 + 48) = v53;
              *(double *)(v10 + 40) = v51;
              *(double *)(v10 + 56) = v52;
              double v55 = *(double *)(v10 + 24);
              if (v51 > v55)
              {
                int v56 = *(_DWORD *)(v10 + 16);
                *(_DWORD *)(v10 + 16) = v54;
                *(_DWORD *)(v10 + 32) = v56;
                *(double *)(v10 + 24) = v51;
                *(double *)(v10 + 40) = v55;
                double v57 = *(double *)(v10 + 8);
                if (v51 > v57)
                {
                  int v58 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = v54;
                  *(_DWORD *)(v10 + 16) = v58;
                  *(double *)(v10 + 8) = v51;
                  *(double *)(v10 + 24) = v57;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v70 = (v12 - 2) >> 1;
      int64_t v71 = v70;
      do
      {
        int64_t v72 = v71;
        if (v70 >= v71)
        {
          uint64_t v73 = (2 * v71) | 1;
          unint64_t v74 = v10 + 16 * v73;
          if (2 * v72 + 2 < (uint64_t)v12 && *(double *)(v74 + 8) > *(double *)(v74 + 24))
          {
            v74 += 16;
            uint64_t v73 = 2 * v72 + 2;
          }
          double v75 = *(double *)(v74 + 8);
          double v76 = *(double *)(v10 + 16 * v72 + 8);
          if (v75 <= v76)
          {
            unint64_t v77 = v10 + 16 * v72;
            int v78 = *(_DWORD *)v77;
            do
            {
              unint64_t v79 = v77;
              unint64_t v77 = v74;
              *(_DWORD *)unint64_t v79 = *(_DWORD *)v74;
              *(double *)(v79 + 8) = v75;
              if (v70 < v73) {
                break;
              }
              uint64_t v80 = 2 * v73;
              uint64_t v73 = (2 * v73) | 1;
              unint64_t v74 = v10 + 16 * v73;
              uint64_t v81 = v80 + 2;
              if (v81 < (uint64_t)v12 && *(double *)(v74 + 8) > *(double *)(v74 + 24))
              {
                v74 += 16;
                uint64_t v73 = v81;
              }
              double v75 = *(double *)(v74 + 8);
            }
            while (v75 <= v76);
            *(_DWORD *)unint64_t v77 = v78;
            *(double *)(v77 + 8) = v76;
          }
        }
        int64_t v71 = v72 - 1;
      }
      while (v72);
      uint64_t v82 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v83 = 0;
        int v84 = *(_DWORD *)v10;
        double v85 = *(double *)(v10 + 8);
        unint64_t v86 = v10;
        do
        {
          unint64_t v87 = v86;
          v86 += 16 * (v83 + 1);
          uint64_t v88 = 2 * v83;
          uint64_t v83 = (2 * v83) | 1;
          uint64_t v89 = v88 + 2;
          if (v89 < v82 && *(double *)(v86 + 8) > *(double *)(v86 + 24))
          {
            v86 += 16;
            uint64_t v83 = v89;
          }
          *(_DWORD *)unint64_t v87 = *(_DWORD *)v86;
          *(void *)(v87 + 8) = *(void *)(v86 + 8);
        }
        while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
        if (v86 == a2 - 16)
        {
          *(_DWORD *)unint64_t v86 = v84;
          goto LABEL_117;
        }
        *(_DWORD *)unint64_t v86 = *(_DWORD *)(a2 - 16);
        *(void *)(v86 + 8) = *(void *)(a2 - 8);
        *(_DWORD *)(a2 - 16) = v84;
        *(double *)(a2 - 8) = v85;
        uint64_t v90 = v86 - v10 + 16;
        if (v90 >= 17)
        {
          unint64_t v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
          double v92 = *(double *)(v10 + 16 * v91 + 8);
          double v85 = *(double *)(v86 + 8);
          if (v92 > v85)
          {
            int v93 = *(_DWORD *)v86;
            do
            {
              unint64_t v94 = v86;
              unint64_t v86 = v10 + 16 * v91;
              *(_DWORD *)unint64_t v94 = *(_DWORD *)v86;
              *(double *)(v94 + 8) = v92;
              if (!v91) {
                break;
              }
              unint64_t v91 = (v91 - 1) >> 1;
              double v92 = *(double *)(v10 + 16 * v91 + 8);
            }
            while (v92 > v85);
            *(_DWORD *)unint64_t v86 = v93;
LABEL_117:
            *(double *)(v86 + 8) = v85;
          }
        }
        a2 -= 16;
        if (v82-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = v10 + 16 * (v12 >> 1);
    if ((unint64_t)v11 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v9, (double *)(v9 + 16 * (v12 >> 1)), (double *)(a2 - 16));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v9 + 16), (double *)(v14 - 16), (double *)(a2 - 32));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v9 + 32), (double *)(v9 + 16 + 16 * v13), (double *)(a2 - 48));
      float32x2_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v14 - 16), (double *)v14, (double *)(v9 + 16 + 16 * v13));
      int v15 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v14;
      *(_DWORD *)unint64_t v14 = v15;
      uint64_t v16 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = *(void *)(v14 + 8);
      *(void *)(v14 + 8) = v16;
    }
    else
    {
      float32x2_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v9 + 16 * (v12 >> 1)), (double *)v9, (double *)(a2 - 16));
    }
    --a3;
    if (a4)
    {
      double v17 = *(double *)(v9 + 8);
LABEL_13:
      uint64_t v18 = 0;
      int v19 = *(_DWORD *)v9;
      do
      {
        double v20 = *(double *)(v9 + v18 + 24);
        v18 += 16;
      }
      while (v20 > v17);
      unint64_t v21 = v9 + v18;
      unint64_t v22 = a2;
      if (v18 == 16)
      {
        unint64_t v25 = a2;
        while (v21 < v25)
        {
          unint64_t v23 = v25 - 16;
          double v26 = *(double *)(v25 - 8);
          v25 -= 16;
          if (v26 > v17) {
            goto LABEL_23;
          }
        }
        unint64_t v23 = v25;
      }
      else
      {
        do
        {
          unint64_t v23 = v22 - 16;
          double v24 = *(double *)(v22 - 8);
          v22 -= 16;
        }
        while (v24 <= v17);
      }
LABEL_23:
      unint64_t v10 = v21;
      if (v21 < v23)
      {
        unint64_t v27 = v23;
        do
        {
          int v28 = *(_DWORD *)v10;
          *(_DWORD *)unint64_t v10 = *(_DWORD *)v27;
          *(_DWORD *)unint64_t v27 = v28;
          uint64_t v29 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = v29;
          do
          {
            double v30 = *(double *)(v10 + 24);
            v10 += 16;
          }
          while (v30 > v17);
          do
          {
            double v31 = *(double *)(v27 - 8);
            v27 -= 16;
          }
          while (v31 <= v17);
        }
        while (v10 < v27);
      }
      if (v10 - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
        *(void *)(v9 + 8) = *(void *)(v10 - 8);
      }
      *(_DWORD *)(v10 - 16) = v19;
      *(double *)(v10 - 8) = v17;
      if (v21 < v23) {
        goto LABEL_34;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v9, v10 - 16);
      float32x2_t result = (double *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v10, a2);
      if (result)
      {
        a2 = v10 - 16;
        if (v32) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v32)
      {
LABEL_34:
        float32x2_t result = (double *)std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *,false>(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v17 = *(double *)(v9 + 8);
      if (*(double *)(v9 - 8) > v17) {
        goto LABEL_13;
      }
      if (v17 <= *(double *)(a2 - 8))
      {
        unint64_t v35 = v9 + 16;
        do
        {
          unint64_t v10 = v35;
          if (v35 >= a2) {
            break;
          }
          double v36 = *(double *)(v35 + 8);
          v35 += 16;
        }
        while (v17 <= v36);
      }
      else
      {
        unint64_t v33 = v9;
        do
        {
          unint64_t v10 = v33 + 16;
          double v34 = *(double *)(v33 + 24);
          v33 += 16;
        }
        while (v17 <= v34);
      }
      unint64_t v37 = a2;
      if (v10 < a2)
      {
        unint64_t v38 = a2;
        do
        {
          unint64_t v37 = v38 - 16;
          double v39 = *(double *)(v38 - 8);
          v38 -= 16;
        }
        while (v17 > v39);
      }
      int v40 = *(_DWORD *)v9;
      while (v10 < v37)
      {
        int v41 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = *(_DWORD *)v37;
        *(_DWORD *)unint64_t v37 = v41;
        uint64_t v42 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = *(void *)(v37 + 8);
        *(void *)(v37 + 8) = v42;
        do
        {
          double v43 = *(double *)(v10 + 24);
          v10 += 16;
        }
        while (v17 <= v43);
        do
        {
          double v44 = *(double *)(v37 - 8);
          v37 -= 16;
        }
        while (v17 > v44);
      }
      BOOL v4 = v10 - 16 >= v9;
      BOOL v5 = v10 - 16 == v9;
      if (v10 - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
        *(void *)(v9 + 8) = *(void *)(v10 - 8);
      }
      a4 = 0;
      *(_DWORD *)(v10 - 16) = v40;
      *(double *)(v10 - 8) = v17;
    }
  }
  unint64_t v59 = (_DWORD *)(v10 + 16);
  BOOL v61 = v10 == a2 || v59 == (_DWORD *)a2;
  if (a4)
  {
    if (!v61)
    {
      uint64_t v62 = 0;
      unsigned int v63 = (_DWORD *)v10;
      do
      {
        double v64 = *((double *)v63 + 3);
        double v65 = *((double *)v63 + 1);
        unsigned int v63 = v59;
        if (v64 > v65)
        {
          int v66 = *v59;
          uint64_t v67 = v62;
          while (1)
          {
            uint64_t v68 = v10 + v67;
            *(_DWORD *)(v68 + 16) = *(_DWORD *)(v10 + v67);
            *(void *)(v68 + 24) = *(void *)(v10 + v67 + 8);
            if (!v67) {
              break;
            }
            v67 -= 16;
            if (v64 <= *(double *)(v68 - 8))
            {
              uint64_t v69 = v10 + v67 + 16;
              goto LABEL_85;
            }
          }
          uint64_t v69 = v10;
LABEL_85:
          *(_DWORD *)uint64_t v69 = v66;
          *(double *)(v69 + 8) = v64;
        }
        unint64_t v59 = v63 + 4;
        v62 += 16;
      }
      while (v63 + 4 != (_DWORD *)a2);
    }
  }
  else if (!v61)
  {
    uint64_t v96 = (double *)(v10 + 24);
    do
    {
      double v97 = *(double *)(v9 + 24);
      double v98 = *(double *)(v9 + 8);
      unint64_t v9 = (unint64_t)v59;
      if (v97 > v98)
      {
        int v99 = *v59;
        float64x2_t v100 = v96;
        do
        {
          unint64_t v101 = v100;
          *((_DWORD *)v100 - 2) = *((_DWORD *)v100 - 6);
          uint64_t v102 = *((void *)v100 - 2);
          v100 -= 2;
          *(void *)unint64_t v101 = v102;
        }
        while (v97 > *(v101 - 4));
        *((_DWORD *)v100 - 2) = v99;
        *float64x2_t v100 = v97;
      }
      unint64_t v59 = (_DWORD *)(v9 + 16);
      v96 += 2;
    }
    while (v9 + 16 != a2);
  }
  return result;
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(double *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = result[1];
  double v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      int v7 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      double v8 = a2[1];
      double v9 = result[1];
      if (v8 > v9)
      {
        int v10 = *(_DWORD *)result;
        *(_DWORD *)float32x2_t result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    int v6 = *(_DWORD *)result;
    if (v5 <= v3)
    {
      *(_DWORD *)float32x2_t result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      double v11 = a3[1];
      if (v11 <= v4) {
        return result;
      }
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *(_DWORD *)float32x2_t result = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)(a2 - 8);
      double v7 = *(double *)(a1 + 8);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(double *)(a1 + 8) = v6;
        *(double *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a1 + 48);
      double v18 = *(double *)(a2 - 8);
      double v19 = *(double *)(a1 + 56);
      if (v18 > v19)
      {
        int v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(double *)(a1 + 56) = v18;
        *(double *)(a2 - 8) = v19;
        double v21 = *(double *)(a1 + 56);
        double v22 = *(double *)(a1 + 40);
        if (v21 > v22)
        {
          int v23 = *(_DWORD *)(a1 + 32);
          int v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(double *)(a1 + 40) = v21;
          *(double *)(a1 + 56) = v22;
          double v25 = *(double *)(a1 + 24);
          if (v21 > v25)
          {
            int v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(double *)(a1 + 24) = v21;
            *(double *)(a1 + 40) = v25;
            double v27 = *(double *)(a1 + 8);
            if (v21 > v27)
            {
              int v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(double *)(a1 + 8) = v21;
              *(double *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 > *(double *)(v9 + 8))
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(void *)(v16 + 56) = *(void *)(a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= *(double *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

double *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(a1, a2, a3);
  double v9 = *(double *)(a4 + 8);
  double v10 = a3[1];
  if (v9 > v10)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    a3[1] = v9;
    *(double *)(a4 + 8) = v10;
    double v12 = a3[1];
    double v13 = a2[1];
    if (v12 > v13)
    {
      int v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      double v15 = a2[1];
      double v16 = a1[1];
      if (v15 > v16)
      {
        int v17 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

void *std::__split_buffer<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance,std::allocator<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance> &>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1555555555555556) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double v7 = (char *)operator new(12 * a2);
  }
  else
  {
    double v7 = 0;
  }
  int v8 = &v7[12 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[12 * a2];
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  double v10 = (uint64_t *)(a2 - 12);
  unint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v12 = a2 - i;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 2);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v56 = *(float *)(a2 - 8);
          float v57 = *(float *)(i + 4);
          if (v56 > v57 || v56 > (float)(v57 + -0.000001) && *(float *)(a2 - 4) < *(float *)(i + 8))
          {
            int v154 = *(_DWORD *)(i + 8);
            uint64_t v148 = *(void *)i;
            uint64_t v58 = *v10;
            *(_DWORD *)(i + 8) = *(_DWORD *)(a2 - 4);
            *(void *)unint64_t i = v58;
            *(_DWORD *)(a2 - 4) = v154;
            *double v10 = v148;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)i, (float *)(i + 12), (float *)(a2 - 12));
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)i, (float *)(i + 12), (float *)(i + 24), (float *)(a2 - 12));
          break;
        case 5uLL:
          unint64_t v59 = (uint64_t *)(i + 12);
          uint64_t v60 = (uint64_t *)(i + 24);
          BOOL v61 = (uint64_t *)(i + 36);
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)i, (float *)(i + 12), (float *)(i + 24), (float *)(i + 36));
          float v62 = *(float *)(a2 - 8);
          float v63 = *(float *)(i + 40);
          if (v62 > v63 || v62 > (float)(v63 + -0.000001) && *(float *)(a2 - 4) < *(float *)(i + 44))
          {
            uint64_t v64 = *v61;
            int v65 = *(_DWORD *)(i + 44);
            int v66 = *(_DWORD *)(a2 - 4);
            uint64_t *v61 = *v10;
            *(_DWORD *)(i + 44) = v66;
            *(_DWORD *)(a2 - 4) = v65;
            *double v10 = v64;
            float v67 = *(float *)(i + 40);
            float v68 = *(float *)(i + 28);
            if (v67 > v68 || v67 > (float)(v68 + -0.000001) && *(float *)(i + 44) < *(float *)(i + 32))
            {
              int v69 = *(_DWORD *)(i + 32);
              uint64_t v70 = *v60;
              *uint64_t v60 = *v61;
              *(_DWORD *)(i + 32) = *(_DWORD *)(i + 44);
              uint64_t *v61 = v70;
              *(_DWORD *)(i + 44) = v69;
              float v71 = *(float *)(i + 28);
              float v72 = *(float *)(i + 16);
              if (v71 > v72 || v71 > (float)(v72 + -0.000001) && *(float *)(i + 32) < *(float *)(i + 20))
              {
                int v73 = *(_DWORD *)(i + 20);
                uint64_t v74 = *v59;
                *unint64_t v59 = *v60;
                *(_DWORD *)(i + 20) = *(_DWORD *)(i + 32);
                *uint64_t v60 = v74;
                *(_DWORD *)(i + 32) = v73;
                float v75 = *(float *)(i + 16);
                float v76 = *(float *)(i + 4);
                if (v75 > v76 || v75 > (float)(v76 + -0.000001) && *(float *)(i + 20) < *(float *)(i + 8))
                {
                  int v155 = *(_DWORD *)(i + 8);
                  uint64_t v149 = *(void *)i;
                  *(void *)unint64_t i = *v59;
                  *(_DWORD *)(i + 8) = *(_DWORD *)(i + 20);
                  *unint64_t v59 = v149;
                  *(_DWORD *)(i + 20) = v155;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 287)
    {
      unint64_t v77 = (_DWORD *)(i + 12);
      BOOL v79 = i == a2 || v77 == (_DWORD *)a2;
      if (a4)
      {
        if (v79) {
          return;
        }
        uint64_t v80 = 0;
        uint64_t v81 = (_DWORD *)i;
        while (2)
        {
          uint64_t v82 = (float *)v81;
          uint64_t v81 = v77;
          float v83 = v82[4];
          float v84 = v82[1];
          if (v83 > v84)
          {
            float v85 = v82[5];
            goto LABEL_126;
          }
          if (v83 > (float)(v84 + -0.000001))
          {
            float v85 = v82[5];
            if (v85 < v82[2])
            {
LABEL_126:
              int v87 = *((_DWORD *)v82 + 2);
              int v86 = *((_DWORD *)v82 + 3);
              *(void *)uint64_t v81 = *(void *)v82;
              v81[2] = v87;
              unint64_t v88 = i;
              if (v82 != (float *)i)
              {
                uint64_t v89 = v80;
                do
                {
                  uint64_t v90 = i + v89;
                  float v91 = *(float *)(i + v89 - 8);
                  if (v83 <= v91)
                  {
                    if (v83 <= (float)(v91 + -0.000001))
                    {
                      unint64_t v88 = i + v89;
                      goto LABEL_138;
                    }
                    if (v85 >= *(float *)(i + v89 - 4))
                    {
                      unint64_t v88 = (unint64_t)v82;
                      goto LABEL_138;
                    }
                  }
                  v82 -= 3;
                  *(void *)uint64_t v90 = *(void *)(v90 - 12);
                  *(_DWORD *)(v90 + 8) = *(_DWORD *)(v90 - 4);
                  v89 -= 12;
                }
                while (v89);
                unint64_t v88 = i;
              }
LABEL_138:
              *(_DWORD *)unint64_t v88 = v86;
              *(float *)(v88 + 4) = v83;
              *(float *)(v88 + 8) = v85;
            }
          }
          unint64_t v77 = v81 + 3;
          v80 += 12;
          if (v81 + 3 == (_DWORD *)a2) {
            return;
          }
          continue;
        }
      }
      if (v79) {
        return;
      }
      while (2)
      {
        unint64_t v138 = a1;
        a1 = (unint64_t)v77;
        float v139 = *(float *)(v138 + 16);
        float v140 = *(float *)(v138 + 4);
        if (v139 <= v140)
        {
          if (v139 > (float)(v140 + -0.000001))
          {
            float v141 = *(float *)(v138 + 20);
            if (v141 < *(float *)(v138 + 8)) {
              goto LABEL_201;
            }
          }
        }
        else
        {
          float v141 = *(float *)(v138 + 20);
LABEL_201:
          int v142 = *v77;
          do
          {
            do
            {
              unint64_t v143 = v138;
              *(void *)(v138 + 12) = *(void *)v138;
              *(_DWORD *)(v138 + 20) = *(_DWORD *)(v138 + 8);
              v138 -= 12;
              float v144 = *(float *)(v143 - 8);
            }
            while (v139 > v144);
          }
          while (v139 > (float)(v144 + -0.000001) && v141 < *(float *)(v143 - 4));
          *(_DWORD *)unint64_t v143 = v142;
          *(float *)(v143 + 4) = v139;
          *(float *)(v143 + 8) = v141;
        }
        v77 += 3;
        if (a1 + 12 == a2) {
          return;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = i + 12 * (v13 >> 1);
    if ((unint64_t)v12 >= 0x601)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12 * (v13 >> 1)), (float *)(a2 - 12));
      uint64_t v16 = 3 * v14;
      int v17 = (float *)(a1 + 12 * v14 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)(a1 + 12), v17, (float *)(a2 - 24));
      double v18 = (float *)(a1 + 12 + 4 * v16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)(a1 + 24), v18, (float *)(a2 - 36));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(v17, (float *)v15, v18);
      int v151 = *(_DWORD *)(a1 + 8);
      uint64_t v145 = *(void *)a1;
      int v19 = *(_DWORD *)(v15 + 8);
      *(void *)a1 = *(void *)v15;
      *(_DWORD *)(a1 + 8) = v19;
      *(_DWORD *)(v15 + 8) = v151;
      *(void *)unint64_t v15 = v145;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)(a1 + 12 * (v13 >> 1)), (float *)a1, (float *)(a2 - 12));
    }
    --a3;
    if (a4)
    {
      float v20 = *(float *)(a1 + 4);
LABEL_14:
      uint64_t v23 = 0;
      float v24 = *(float *)a1;
      float v25 = *(float *)(a1 + 8);
      float v26 = v20 + -0.000001;
      while (1)
      {
        float v27 = *(float *)(a1 + v23 + 16);
        if (v27 <= v20 && (v27 <= v26 || *(float *)(a1 + v23 + 20) >= v25)) {
          break;
        }
        v23 += 12;
      }
      unint64_t v28 = a1 + v23 + 12;
      if (v23)
      {
        float v29 = *(float *)(a2 - 8);
        double v30 = (float *)(a2 - 4);
        double v31 = (float *)(a2 - 12);
        if (v29 <= v20)
        {
          do
          {
            if (v29 > v26 && *v30 < v25) {
              break;
            }
            float v29 = *(v30 - 4);
            v30 -= 3;
          }
          while (v29 <= v20);
LABEL_24:
          double v31 = v30 - 2;
        }
      }
      else
      {
        double v31 = (float *)a2;
        if (v28 < a2)
        {
          float v32 = *(float *)(a2 - 8);
          double v31 = (float *)(a2 - 12);
          if (v32 <= v20)
          {
            double v30 = (float *)(a2 - 4);
            double v31 = (float *)(a2 - 12);
            while (1)
            {
              unint64_t v33 = v30 - 2;
              if (v32 <= v26)
              {
                if (v28 >= (unint64_t)v33)
                {
                  double v31 = v30 - 2;
                  break;
                }
              }
              else if (*v30 < v25 || v28 >= (unint64_t)v33)
              {
                break;
              }
              v31 -= 3;
              float v32 = *(v30 - 4);
              v30 -= 3;
              if (v32 > v20) {
                goto LABEL_24;
              }
            }
          }
        }
      }
      unint64_t i = v28;
      if (v28 < (unint64_t)v31)
      {
        unint64_t v35 = v31;
        do
        {
          int v152 = *(_DWORD *)(i + 8);
          uint64_t v146 = *(void *)i;
          uint64_t v36 = *(void *)v35;
          *(float *)(i + 8) = v35[2];
          *(void *)unint64_t i = v36;
          *((_DWORD *)v35 + 2) = v152;
          *(void *)unint64_t v35 = v146;
          do
          {
            do
            {
              i += 12;
              float v37 = *(float *)(i + 4);
            }
            while (v37 > v20);
          }
          while (v37 > v26 && *(float *)(i + 8) < v25);
          float v38 = *(v35 - 2);
          if (v38 <= v20)
          {
            double v39 = v35 - 1;
            do
            {
              if (v38 > v26 && *v39 < v25) {
                break;
              }
              float v38 = *(v39 - 4);
              v39 -= 3;
            }
            while (v38 <= v20);
            unint64_t v35 = v39 - 2;
          }
          else
          {
            v35 -= 3;
          }
        }
        while (i < (unint64_t)v35);
      }
      if (i - 12 != a1)
      {
        uint64_t v40 = *(void *)(i - 12);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 4);
        *(void *)a1 = v40;
      }
      *(float *)(i - 12) = v24;
      *(float *)(i - 8) = v20;
      *(float *)(i - 4) = v25;
      if (v28 < (unint64_t)v31) {
        goto LABEL_58;
      }
      BOOL v41 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(a1, i - 12);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(i, a2))
      {
        a2 = i - 12;
        if (v41) {
          return;
        }
        goto LABEL_1;
      }
      if (!v41)
      {
LABEL_58:
        std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *,false>(a1, i - 12, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      float v21 = *(float *)(a1 - 8);
      float v20 = *(float *)(a1 + 4);
      if (v21 > v20) {
        goto LABEL_14;
      }
      if (v21 <= (float)(v20 + -0.000001))
      {
        float v22 = *(float *)(a1 + 8);
      }
      else
      {
        float v22 = *(float *)(a1 + 8);
        if (*(float *)(a1 - 4) < v22) {
          goto LABEL_14;
        }
      }
      float v42 = *(float *)(a2 - 8);
      if (v20 <= v42 && (v20 <= (float)(v42 + -0.000001) || v22 >= *(float *)(a2 - 4)))
      {
        for (unint64_t i = a1 + 12; i < a2; i += 12)
        {
          float v44 = *(float *)(i + 4);
          if (v20 > v44 || v20 > (float)(v44 + -0.000001) && v22 < *(float *)(i + 8)) {
            break;
          }
        }
      }
      else
      {
        float v43 = *(float *)(a1 + 16);
        if (v20 <= v43)
        {
          double v45 = (float *)(a1 + 28);
          do
          {
            if (v20 > (float)(v43 + -0.000001) && v22 < *(v45 - 2)) {
              break;
            }
            float v46 = *v45;
            v45 += 3;
            float v43 = v46;
          }
          while (v20 <= v46);
          unint64_t i = (unint64_t)(v45 - 4);
        }
        else
        {
          unint64_t i = a1 + 12;
        }
      }
      float v47 = *(float *)a1;
      double v48 = (float *)a2;
      if (i < a2)
      {
        for (unsigned int j = (float *)(a2 - 4); v20 > v42 || v20 > (float)(v42 + -0.000001) && v22 < *j; j -= 3)
          float v42 = *(j - 4);
        double v48 = j - 2;
      }
      while (i < (unint64_t)v48)
      {
        int v153 = *(_DWORD *)(i + 8);
        uint64_t v147 = *(void *)i;
        uint64_t v50 = *(void *)v48;
        *(float *)(i + 8) = v48[2];
        *(void *)unint64_t i = v50;
        *((_DWORD *)v48 + 2) = v153;
        *(void *)double v48 = v147;
        float v51 = *(float *)(i + 16);
        if (v20 <= v51)
        {
          double v52 = (float *)(i + 28);
          do
          {
            if (v20 > (float)(v51 + -0.000001) && v22 < *(v52 - 2)) {
              break;
            }
            float v53 = *v52;
            v52 += 3;
            float v51 = v53;
          }
          while (v20 <= v53);
          unint64_t i = (unint64_t)(v52 - 4);
        }
        else
        {
          i += 12;
        }
        do
        {
          do
          {
            v48 -= 3;
            float v54 = v48[1];
          }
          while (v20 > v54);
        }
        while (v20 > (float)(v54 + -0.000001) && v22 < v48[2]);
      }
      BOOL v4 = i - 12 >= a1;
      BOOL v5 = i - 12 == a1;
      if (i - 12 != a1)
      {
        uint64_t v55 = *(void *)(i - 12);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 4);
        *(void *)a1 = v55;
      }
      a4 = 0;
      *(float *)(i - 12) = v47;
      *(float *)(i - 8) = v20;
      *(float *)(i - 4) = v22;
    }
  }
  if (i != a2)
  {
    int64_t v92 = (v13 - 2) >> 1;
    int64_t v93 = v92;
    while (2)
    {
      int64_t v94 = v93;
      if (v92 >= v93)
      {
        uint64_t v95 = (2 * v93) | 1;
        unint64_t v96 = i + 12 * v95;
        if (2 * v94 + 2 < (uint64_t)v13)
        {
          float v97 = *(float *)(i + 12 * v95 + 4);
          float v98 = *(float *)(v96 + 16);
          if (v97 > v98 || v97 > (float)(v98 + -0.000001) && *(float *)(i + 12 * v95 + 8) < *(float *)(v96 + 20))
          {
            v96 += 12;
            uint64_t v95 = 2 * v94 + 2;
          }
        }
        float v99 = *(float *)(v96 + 4);
        float v100 = *(float *)(i + 12 * v94 + 4);
        if (v99 <= v100)
        {
          unint64_t v101 = i + 12 * v94;
          if (v99 <= (float)(v100 + -0.000001))
          {
            float v102 = *(float *)(v101 + 8);
            goto LABEL_153;
          }
          float v102 = *(float *)(i + 12 * v94 + 8);
          if (*(float *)(v96 + 8) >= v102)
          {
LABEL_153:
            int v103 = *(_DWORD *)v101;
            uint64_t v104 = *(void *)v96;
            *(_DWORD *)(v101 + 8) = *(_DWORD *)(v96 + 8);
            *(void *)unint64_t v101 = v104;
            if (v92 >= v95)
            {
              while (1)
              {
                uint64_t v106 = 2 * v95;
                uint64_t v95 = (2 * v95) | 1;
                unint64_t v105 = i + 12 * v95;
                uint64_t v107 = v106 + 2;
                if (v107 < (uint64_t)v13)
                {
                  float v108 = *(float *)(i + 12 * v95 + 4);
                  float v109 = *(float *)(v105 + 16);
                  if (v108 > v109
                    || v108 > (float)(v109 + -0.000001) && *(float *)(i + 12 * v95 + 8) < *(float *)(v105 + 20))
                  {
                    v105 += 12;
                    uint64_t v95 = v107;
                  }
                }
                float v110 = *(float *)(v105 + 4);
                if (v110 > v100 || v110 > (float)(v100 + -0.000001) && *(float *)(v105 + 8) < v102) {
                  break;
                }
                uint64_t v111 = *(void *)v105;
                *(_DWORD *)(v96 + 8) = *(_DWORD *)(v105 + 8);
                *(void *)unint64_t v96 = v111;
                unint64_t v96 = v105;
                if (v92 < v95) {
                  goto LABEL_155;
                }
              }
            }
            unint64_t v105 = v96;
LABEL_155:
            *(_DWORD *)unint64_t v105 = v103;
            *(float *)(v105 + 4) = v100;
            *(float *)(v105 + 8) = v102;
          }
        }
      }
      int64_t v93 = v94 - 1;
      if (v94) {
        continue;
      }
      break;
    }
    int64_t v112 = v12 / 0xCuLL;
    while (2)
    {
      uint64_t v113 = 0;
      int v156 = *(_DWORD *)(i + 8);
      uint64_t v150 = *(void *)i;
      unint64_t v114 = i;
      do
      {
        unint64_t v115 = v114;
        uint64_t v116 = v113 + 1;
        v114 += 12 * (v113 + 1);
        uint64_t v117 = 2 * v113;
        uint64_t v113 = (2 * v113) | 1;
        int64_t v118 = v117 + 2;
        if (v118 < v112)
        {
          float v119 = *(float *)(v115 + 12 * v116 + 4);
          float v120 = *(float *)(v114 + 16);
          if (v119 > v120
            || v119 > (float)(v120 + -0.000001) && *(float *)(v115 + 12 * v116 + 8) < *(float *)(v114 + 20))
          {
            v114 += 12;
            uint64_t v113 = v118;
          }
        }
        uint64_t v121 = *(void *)v114;
        *(_DWORD *)(v115 + 8) = *(_DWORD *)(v114 + 8);
        *(void *)unint64_t v115 = v121;
      }
      while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
      a2 -= 12;
      if (v114 == a2)
      {
        *(_DWORD *)(v114 + 8) = v156;
        *(void *)unint64_t v114 = v150;
      }
      else
      {
        uint64_t v122 = *(void *)a2;
        *(_DWORD *)(v114 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)unint64_t v114 = v122;
        *(_DWORD *)(a2 + 8) = v156;
        *(void *)a2 = v150;
        uint64_t v123 = v114 - i + 12;
        if (v123 >= 13)
        {
          unint64_t v124 = v123 / 0xCuLL - 2;
          unint64_t v125 = v124 >> 1;
          unint64_t v126 = i + 12 * (v124 >> 1);
          float v127 = *(float *)(v126 + 4);
          float v128 = *(float *)(v114 + 4);
          float v129 = v128 + -0.000001;
          if (v127 > v128)
          {
            float v130 = *(float *)(v114 + 8);
            goto LABEL_182;
          }
          if (v127 > v129)
          {
            float v130 = *(float *)(v114 + 8);
            if (*(float *)(i + 12 * v125 + 8) < v130)
            {
LABEL_182:
              int v131 = *(_DWORD *)v114;
              uint64_t v132 = *(void *)v126;
              *(_DWORD *)(v114 + 8) = *(_DWORD *)(v126 + 8);
              *(void *)unint64_t v114 = v132;
              if (v124 >= 2)
              {
                while (1)
                {
                  unint64_t v134 = v125 - 1;
                  unint64_t v125 = (v125 - 1) >> 1;
                  unint64_t v133 = i + 12 * v125;
                  float v135 = *(float *)(v133 + 4);
                  if (v135 <= v128 && (v135 <= v129 || *(float *)(i + 12 * v125 + 8) >= v130)) {
                    break;
                  }
                  uint64_t v136 = *(void *)v133;
                  *(_DWORD *)(v126 + 8) = *(_DWORD *)(v133 + 8);
                  *(void *)unint64_t v126 = v136;
                  unint64_t v126 = i + 12 * v125;
                  if (v134 <= 1) {
                    goto LABEL_188;
                  }
                }
              }
              unint64_t v133 = v126;
LABEL_188:
              *(_DWORD *)unint64_t v133 = v131;
              *(float *)(v133 + 4) = v128;
              *(float *)(v133 + 8) = v130;
            }
          }
        }
      }
      if (v112-- <= 2) {
        return;
      }
      continue;
    }
  }
}

  float32x4_t v250 = a2 - 2;
  uint64_t v240 = a2 - 6;
  float32x4_t v242 = a2 - 4;
  unsigned int j = a1;
  float32x4_t v244 = a2;
  while (1)
  {
    a1 = j;
    uint64_t v12 = (char *)a2 - (char *)j;
    unint64_t v13 = ((char *)a2 - (char *)j) >> 4;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v122 = (uint64_t)(*(void *)(*(a2 - 2) + 160) - *(void *)(*(a2 - 2) + 152)) >> 2;
          uint64_t v123 = *(void *)(*a1 + 160) - *(void *)(*a1 + 152);
          if (v122 < v123 >> 2
            || v122 == v123 >> 2
            && (unint64_t v124 = *a3,
                v254 = *(a2 - 2),
                unint64_t v125 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v124, &v254),
                unint64_t v126 = *a3,
                uint64_t v253 = *a1,
                v125 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v126, &v253)))
          {
            float v127 = *a1;
            *a1 = *(a2 - 2);
            *(a2 - 2) = v127;
            float v128 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v128;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, v250, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a1 + 4, v250, a3);
          break;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, v250, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 383)
    {
      float v129 = a1 + 2;
      int v131 = a1 == a2 || v129 == a2;
      if (a5)
      {
        if (v131) {
          return;
        }
        uint64_t v132 = 0;
        unint64_t v133 = a1;
        while (2)
        {
          unint64_t v134 = v133;
          unint64_t v133 = v129;
          float v135 = v134[2];
          uint64_t v136 = (uint64_t)(*(void *)(v135 + 160) - *(void *)(v135 + 152)) >> 2;
          uint64_t v137 = *(void *)(*v134 + 160) - *(void *)(*v134 + 152);
          if (v136 >= v137 >> 2)
          {
            if (v136 == v137 >> 2)
            {
              uint64_t v148 = *a3;
              v254 = v134[2];
              uint64_t v149 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v148, &v254);
              uint64_t v150 = *a3;
              uint64_t v253 = *v134;
              if (v149 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v150, &v253))
              {
                float v135 = *v133;
                goto LABEL_115;
              }
            }
          }
          else
          {
LABEL_115:
            unint64_t v138 = v134[3];
            float v139 = v132;
            *unint64_t v133 = 0;
            v133[1] = 0;
            while (1)
            {
              float v140 = (char *)a1 + v139;
              float v141 = *(_OWORD *)((char *)a1 + v139);
              *(void *)float v140 = 0;
              *((void *)v140 + 1) = 0;
              int v142 = *(std::__shared_weak_count **)((char *)a1 + v139 + 24);
              *((_OWORD *)v140 + 1) = v141;
              if (v142) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v142);
              }
              if (!v139)
              {
                int v151 = a1;
                goto LABEL_128;
              }
              unint64_t v143 = (uint64_t)(*(void *)(v135 + 160) - *(void *)(v135 + 152)) >> 2;
              float v144 = *(void *)(*(unint64_t *)((char *)a1 + v139 - 16) + 160)
                   - *(void *)(*(unint64_t *)((char *)a1 + v139 - 16) + 152);
              if (v143 >= v144 >> 2)
              {
                if (v143 != v144 >> 2) {
                  break;
                }
                uint64_t v145 = *a3;
                v254 = v135;
                uint64_t v146 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v145, &v254);
                uint64_t v147 = *a3;
                uint64_t v253 = *(unint64_t *)((char *)a1 + v139 - 16);
                if (v146 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v147, &v253)) {
                  break;
                }
              }
              v139 -= 16;
            }
            int v151 = (unint64_t *)((char *)a1 + v139);
LABEL_128:
            int v152 = (std::__shared_weak_count *)v151[1];
            *int v151 = v135;
            v151[1] = v138;
            if (v152) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v152);
            }
          }
          float v129 = v133 + 2;
          v132 += 16;
          if (v133 + 2 == a2) {
            return;
          }
          continue;
        }
      }
      if (v131) {
        return;
      }
      float32x4_t v222 = a1 + 1;
      while (2)
      {
        float v223 = a1;
        a1 = v129;
        float32x4_t v224 = v223[2];
        float32x4_t v225 = (uint64_t)(*(void *)(v224 + 160) - *(void *)(v224 + 152)) >> 2;
        unsigned int v226 = *(void *)(*v223 + 160) - *(void *)(*v223 + 152);
        if (v225 < v226 >> 2)
        {
LABEL_201:
          uint64_t v230 = v223[3];
          float32x4_t v231 = v222;
          *a1 = 0;
          a1[1] = 0;
          while (1)
          {
            uint64_t v232 = *(_OWORD *)(v231 - 1);
            *(v231 - 1) = 0;
            *float32x4_t v231 = 0;
            float32x4_t v233 = (std::__shared_weak_count *)v231[2];
            *(_OWORD *)(v231 + 1) = v232;
            if (v233) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v233);
            }
            float32x4_t v234 = (uint64_t)(*(void *)(v224 + 160) - *(void *)(v224 + 152)) >> 2;
            float32x4_t v235 = *(void *)(*(v231 - 3) + 160) - *(void *)(*(v231 - 3) + 152);
            if (v234 >= v235 >> 2)
            {
              if (v234 != v235 >> 2) {
                break;
              }
              float v236 = *a3;
              v254 = v224;
              float32x4_t v237 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v236, &v254);
              float32x4_t v238 = *a3;
              uint64_t v253 = *(v231 - 3);
              if (v237 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v238, &v253)) {
                break;
              }
            }
            v231 -= 2;
          }
          uint64_t v239 = (std::__shared_weak_count *)*v231;
          *(v231 - 1) = v224;
          *float32x4_t v231 = v230;
          if (v239) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v239);
          }
        }
        else if (v225 == v226 >> 2)
        {
          unint64_t v227 = *a3;
          v254 = v223[2];
          uint64_t v228 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v227, &v254);
          uint64_t v229 = *a3;
          uint64_t v253 = *v223;
          if (v228 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v229, &v253))
          {
            float32x4_t v224 = *a1;
            goto LABEL_201;
          }
        }
        float v129 = a1 + 2;
        v222 += 2;
        if (a1 + 2 == a2) {
          return;
        }
        continue;
      }
    }
    if (!a4) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &a1[2 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, &a1[2 * (v13 >> 1)], v250, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1 + 2, v15 - 2, v242, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1 + 4, &a1[2 * v14 + 2], v240, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(v15 - 2, v15, &a1[2 * v14 + 2], a3);
      uint64_t v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)unint64_t v15 = v16;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(&a1[2 * (v13 >> 1)], a1, v250, a3);
    }
    --a4;
    if ((a5 & 1) != 0
      || (int v17 = (uint64_t)(*(void *)(*(a1 - 2) + 160) - *(void *)(*(a1 - 2) + 152)) >> 2,
          double v18 = *(void *)(*a1 + 160) - *(void *)(*a1 + 152),
          v17 < v18 >> 2)
      || v17 == v18 >> 2
      && (int v19 = *a3,
          v254 = *(a1 - 2),
          float v20 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v19, &v254),
          float v21 = *a3,
          uint64_t v253 = *a1,
          v20 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v21, &v253)))
    {
      uint64_t v23 = *a1;
      float v22 = a1[1];
      float v24 = 2;
      *a1 = 0;
      a1[1] = 0;
      while (1)
      {
        float v25 = (uint64_t)(*(void *)(a1[v24] + 160) - *(void *)(a1[v24] + 152)) >> 2;
        float v26 = *(void *)(v23 + 160) - *(void *)(v23 + 152);
        if (v25 >= v26 >> 2)
        {
          if (v25 != v26 >> 2) {
            break;
          }
          float v27 = *a3;
          v254 = a1[v24];
          unint64_t v28 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v27, &v254);
          float v29 = *a3;
          uint64_t v253 = v23;
          if (v28 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v29, &v253)) {
            break;
          }
        }
        v24 += 2;
      }
      double v30 = v22;
      double v31 = &a1[v24];
      if (v24 == 2)
      {
        float v32 = v244;
        if (v31 < v244)
        {
          float v32 = v250;
          float v42 = *v250;
          float v43 = (uint64_t)(*(void *)(*v250 + 160) - *(void *)(*v250 + 152)) >> 2;
          double v45 = *(void *)(v23 + 152);
          float v44 = *(void *)(v23 + 160);
          if (v43 >= (v44 - v45) >> 2)
          {
            float v46 = (v44 - v45) >> 2;
            float v32 = v250;
            do
            {
              if (v43 == v46)
              {
                float v47 = *a3;
                v254 = v42;
                double v48 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v47, &v254);
                double v49 = *a3;
                uint64_t v253 = v23;
                uint64_t v50 = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v49, &v253);
                if (v31 >= v32 || v48 < *(_DWORD *)v50) {
                  break;
                }
                double v45 = *(void *)(v23 + 152);
                float v44 = *(void *)(v23 + 160);
              }
              else if (v31 >= v32)
              {
                break;
              }
              float v51 = *(v32 - 2);
              v32 -= 2;
              float v42 = v51;
              float v43 = (uint64_t)(*(void *)(v51 + 160) - *(void *)(v51 + 152)) >> 2;
              float v46 = (v44 - v45) >> 2;
            }
            while (v43 >= v46);
          }
        }
      }
      else
      {
        float v32 = v250;
        unint64_t v33 = *v250;
        double v34 = (uint64_t)(*(void *)(*v250 + 160) - *(void *)(*v250 + 152)) >> 2;
        uint64_t v36 = *(void *)(v23 + 152);
        unint64_t v35 = *(void *)(v23 + 160);
        if (v34 >= (v35 - v36) >> 2)
        {
          float v37 = (v35 - v36) >> 2;
          float v32 = v250;
          do
          {
            if (v34 == v37)
            {
              float v38 = *a3;
              v254 = v33;
              double v39 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v38, &v254);
              uint64_t v40 = *a3;
              uint64_t v253 = v23;
              if (v39 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v40, &v253)) {
                break;
              }
              uint64_t v36 = *(void *)(v23 + 152);
              unint64_t v35 = *(void *)(v23 + 160);
            }
            BOOL v41 = *(v32 - 2);
            v32 -= 2;
            unint64_t v33 = v41;
            double v34 = (uint64_t)(*(void *)(v41 + 160) - *(void *)(v41 + 152)) >> 2;
            float v37 = (v35 - v36) >> 2;
          }
          while (v34 >= v37);
        }
      }
      unsigned int j = v31;
      if (v31 < v32)
      {
        double v52 = v32;
        do
        {
          float v53 = *j;
          *unsigned int j = *v52;
          float *v52 = v53;
          float v54 = j[1];
          j[1] = v52[1];
          v52[1] = v54;
          while (1)
          {
            do
            {
              j += 2;
              uint64_t v55 = (uint64_t)(*(void *)(*j + 160) - *(void *)(*j + 152)) >> 2;
              float v57 = *(void *)(v23 + 152);
              float v56 = *(void *)(v23 + 160);
            }
            while (v55 < (v56 - v57) >> 2);
            uint64_t v58 = (v56 - v57) >> 2;
            if (v55 != v58) {
              break;
            }
            unint64_t v59 = *a3;
            v254 = *j;
            uint64_t v60 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v59, &v254);
            BOOL v61 = *a3;
            uint64_t v253 = v23;
            if (v60 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v61, &v253))
            {
              float v57 = *(void *)(v23 + 152);
              float v56 = *(void *)(v23 + 160);
              uint64_t v58 = (v56 - v57) >> 2;
              break;
            }
          }
          float v63 = *(v52 - 2);
          v52 -= 2;
          float v62 = v63;
          for (unint64_t i = (uint64_t)(*(void *)(v63 + 160) - *(void *)(v63 + 152)) >> 2; i >= v58; v58 = (v56 - v57) >> 2)
          {
            if (i == v58)
            {
              int v65 = *a3;
              v254 = v62;
              int v66 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v65, &v254);
              float v67 = *a3;
              uint64_t v253 = v23;
              if (v66 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v67, &v253)) {
                break;
              }
              float v57 = *(void *)(v23 + 152);
              float v56 = *(void *)(v23 + 160);
            }
            float v68 = *(v52 - 2);
            v52 -= 2;
            float v62 = v68;
            unint64_t i = (uint64_t)(*(void *)(v68 + 160) - *(void *)(v68 + 152)) >> 2;
          }
        }
        while (j < v52);
      }
      int v69 = j - 2;
      if (j - 2 != a1)
      {
        uint64_t v70 = *(_OWORD *)v69;
        char *v69 = 0;
        *(j - 1) = 0;
        float v71 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v70;
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
      }
      float v72 = (std::__shared_weak_count *)*(j - 1);
      *(j - 2) = v23;
      *(j - 1) = v30;
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      BOOL v5 = v31 >= v32;
      a2 = v244;
      if (!v5) {
        goto LABEL_57;
      }
      int v73 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, j - 2, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(j, v244, a3))
      {
        a2 = j - 2;
        if (v73) {
          return;
        }
        goto LABEL_1;
      }
      if (!v73)
      {
LABEL_57:
        std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,false>(a1, j - 2, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
      uint64_t v74 = *a1;
      float v75 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v77 = *(void *)(v74 + 152);
      float v76 = *(void *)(v74 + 160);
      int v78 = (v76 - v77) >> 2;
      BOOL v79 = *(void *)(*v250 + 160) - *(void *)(*v250 + 152);
      if (v78 >= v79 >> 2)
      {
        if (v78 != v79 >> 2
          || (unint64_t v114 = *a3,
              v254 = v74,
              unint64_t v115 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v114, &v254),
              uint64_t v116 = *a3,
              uint64_t v253 = *v250,
              v115 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v116, &v253)))
        {
          for (unsigned int j = a1 + 2; j < a2; j += 2)
          {
            uint64_t v117 = (uint64_t)(*(void *)(v74 + 160) - *(void *)(v74 + 152)) >> 2;
            int64_t v118 = *(void *)(*j + 160) - *(void *)(*j + 152);
            if (v117 < v118 >> 2) {
              break;
            }
            if (v117 == v118 >> 2)
            {
              float v119 = *a3;
              v254 = v74;
              float v120 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v119, &v254);
              uint64_t v121 = *a3;
              uint64_t v253 = *j;
              if (v120 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v121, &v253)) {
                break;
              }
            }
          }
          goto LABEL_65;
        }
        unint64_t v77 = *(void *)(v74 + 152);
        float v76 = *(void *)(v74 + 160);
        int v78 = (v76 - v77) >> 2;
      }
      unsigned int j = a1 + 2;
      uint64_t v80 = *(void *)(a1[2] + 160) - *(void *)(a1[2] + 152);
      if (v78 >= v80 >> 2)
      {
        uint64_t v81 = v80 >> 2;
        do
        {
          if (v78 == v81)
          {
            uint64_t v82 = *a3;
            v254 = v74;
            float v83 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v82, &v254);
            float v84 = *a3;
            uint64_t v253 = *j;
            if (v83 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v84, &v253)) {
              break;
            }
            unint64_t v77 = *(void *)(v74 + 152);
            float v76 = *(void *)(v74 + 160);
          }
          float v85 = j[2];
          j += 2;
          int v78 = (v76 - v77) >> 2;
          uint64_t v81 = (uint64_t)(*(void *)(v85 + 160) - *(void *)(v85 + 152)) >> 2;
        }
        while (v78 >= v81);
      }
LABEL_65:
      uint64_t k = a2;
      if (j < a2)
      {
        for (uint64_t k = v250; ; k -= 2)
        {
          int v87 = (uint64_t)(*(void *)(v74 + 160) - *(void *)(v74 + 152)) >> 2;
          unint64_t v88 = *(void *)(*k + 160) - *(void *)(*k + 152);
          if (v87 >= v88 >> 2)
          {
            if (v87 != v88 >> 2) {
              break;
            }
            uint64_t v89 = *a3;
            v254 = v74;
            uint64_t v90 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v89, &v254);
            float v91 = *a3;
            uint64_t v253 = *k;
            if (v90 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v91, &v253)) {
              break;
            }
          }
        }
      }
      while (j < k)
      {
        int64_t v92 = *j;
        *unsigned int j = *k;
        *uint64_t k = v92;
        int64_t v93 = j[1];
        j[1] = k[1];
        k[1] = v93;
        int64_t v94 = j[2];
        j += 2;
        unint64_t v96 = *(void *)(v74 + 152);
        uint64_t v95 = *(void *)(v74 + 160);
        float v97 = (v95 - v96) >> 2;
        float v98 = *(void *)(v94 + 160) - *(void *)(v94 + 152);
        if (v97 >= v98 >> 2)
        {
          float v99 = v98 >> 2;
          do
          {
            if (v97 == v99)
            {
              float v100 = *a3;
              v254 = v74;
              unint64_t v101 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v100, &v254);
              float v102 = *a3;
              uint64_t v253 = *j;
              if (v101 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v102, &v253)) {
                goto LABEL_77;
              }
              unint64_t v96 = *(void *)(v74 + 152);
              uint64_t v95 = *(void *)(v74 + 160);
            }
            int v103 = j[2];
            j += 2;
            float v97 = (v95 - v96) >> 2;
            float v99 = (uint64_t)(*(void *)(v103 + 160) - *(void *)(v103 + 152)) >> 2;
          }
          while (v97 >= v99);
        }
        do
        {
          do
          {
LABEL_77:
            uint64_t v104 = (uint64_t)(*(void *)(v74 + 160) - *(void *)(v74 + 152)) >> 2;
            unint64_t v105 = *(k - 2);
            k -= 2;
            uint64_t v106 = *(void *)(v105 + 160) - *(void *)(v105 + 152);
          }
          while (v104 < v106 >> 2);
          if (v104 != v106 >> 2) {
            break;
          }
          uint64_t v107 = *a3;
          v254 = v74;
          float v108 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v107, &v254);
          float v109 = *a3;
          uint64_t v253 = *k;
        }
        while (v108 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v109, &v253));
      }
      float v110 = j - 2;
      BOOL v5 = j - 2 >= a1;
      double v6 = j - 2 == a1;
      if (j - 2 != a1)
      {
        uint64_t v111 = *(_OWORD *)v110;
        unsigned int *v110 = 0;
        *(j - 1) = 0;
        int64_t v112 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v111;
        if (v112) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        }
      }
      a5 = 0;
      uint64_t v113 = (std::__shared_weak_count *)*(j - 1);
      *(j - 2) = v74;
      *(j - 1) = v75;
      if (v113)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
        a5 = 0;
      }
    }
  }
  if (a1 != a2)
  {
    int v153 = (v13 - 2) >> 1;
    float32x4_t v251 = v153;
    while (2)
    {
      int v154 = v153;
      if (v251 >= v153)
      {
        int v155 = (2 * v153) | 1;
        int v156 = &a1[2 * v155];
        uint64_t v157 = 2 * v153 + 2;
        if (v157 < (uint64_t)v13)
        {
          unint64_t v158 = (uint64_t)(*(void *)(*v156 + 160) - *(void *)(*v156 + 152)) >> 2;
          uint64_t v159 = *(void *)(v156[2] + 160) - *(void *)(v156[2] + 152);
          if (v158 < v159 >> 2) {
            goto LABEL_139;
          }
          if (v158 == v159 >> 2)
          {
            int v160 = *a3;
            v254 = *v156;
            float v161 = v153;
            float32x4_t v162 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v160, &v254);
            float32x4_t v163 = *a3;
            uint64_t v253 = v156[2];
            BOOL v5 = v162 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v163, &v253);
            int v154 = v161;
            if (!v5)
            {
LABEL_139:
              v156 += 2;
              int v155 = v157;
            }
          }
        }
        int v164 = &a1[2 * v154];
        unsigned int v165 = (uint64_t)(*(void *)(*v156 + 160) - *(void *)(*v156 + 152)) >> 2;
        unint64_t v166 = *v164;
        unint64_t v167 = *(void *)(*v164 + 160) - *(void *)(*v164 + 152);
        if (v165 >= v167 >> 2)
        {
          if (v165 == v167 >> 2)
          {
            int v168 = *a3;
            v254 = *v156;
            int v169 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v168, &v254);
            unint64_t v170 = *a3;
            uint64_t v253 = *v164;
            if (v169 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v170, &v253))
            {
              unint64_t v166 = *v164;
              goto LABEL_144;
            }
          }
          else
          {
LABEL_144:
            v241 = v154;
            float32x4_t v247 = a1[2 * v154 + 1];
            *int v164 = 0;
            v164[1] = 0;
            while (1)
            {
              std::vector<unsigned int> v171 = v156;
              unsigned int v172 = *(_OWORD *)v156;
              *int v156 = 0;
              v156[1] = 0;
              unint64_t v173 = (std::__shared_weak_count *)v164[1];
              *(_OWORD *)int v164 = v172;
              if (v173) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v173);
              }
              if (v251 < v155) {
                break;
              }
              float32x4_t v174 = 2 * v155;
              int v155 = (2 * v155) | 1;
              int v156 = &a1[2 * v155];
              std::vector<int> v175 = v174 + 2;
              if (v174 + 2 < (uint64_t)v13)
              {
                int v176 = (uint64_t)(*(void *)(*v156 + 160) - *(void *)(*v156 + 152)) >> 2;
                unint64_t v177 = *(void *)(v156[2] + 160) - *(void *)(v156[2] + 152);
                if (v176 < v177 >> 2
                  || v176 == v177 >> 2
                  && (float32x4_t v178 = *a3,
                      v254 = *v156,
                      unsigned int v243 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v178, &v254),
                      uint64_t v179 = *a3,
                      uint64_t v253 = v156[2],
                      v243 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v179, &v253)))
                {
                  v156 += 2;
                  int v155 = v175;
                }
              }
              uint64_t v180 = (uint64_t)(*(void *)(*v156 + 160) - *(void *)(*v156 + 152)) >> 2;
              float32x4_t v181 = *(void *)(v166 + 160) - *(void *)(v166 + 152);
              if (v180 < v181 >> 2) {
                break;
              }
              if (v180 == v181 >> 2)
              {
                unsigned int v182 = *a3;
                v254 = *v156;
                uint64_t v183 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v182, &v254);
                float32x4_t v184 = *a3;
                uint64_t v253 = v166;
                int v164 = v171;
                if (v183 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v184, &v253)) {
                  break;
                }
              }
              else
              {
                int v164 = v171;
              }
            }
            float32x4_t v185 = (std::__shared_weak_count *)v171[1];
            *std::vector<unsigned int> v171 = v166;
            v171[1] = v247;
            int v154 = v241;
            if (v185) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v185);
            }
          }
        }
      }
      int v153 = v154 - 1;
      if (v154) {
        continue;
      }
      break;
    }
    uint64_t v186 = (unint64_t)v12 >> 4;
    uint64_t v187 = v244;
    while (2)
    {
      uint64_t v188 = 0;
      uint64_t v245 = *a1;
      float32x4_t v248 = a1[1];
      v252 = v187;
      *a1 = 0;
      a1[1] = 0;
      unsigned int v189 = a1;
      do
      {
        uint64_t v190 = &v189[2 * v188 + 2];
        uint64_t v191 = 2 * v188;
        uint64_t v188 = (2 * v188) | 1;
        uint64_t v192 = v191 + 2;
        if (v191 + 2 < v186)
        {
          v193 = (uint64_t)(*(void *)(*v190 + 160) - *(void *)(*v190 + 152)) >> 2;
          uint64_t v194 = *(void *)(v190[2] + 160) - *(void *)(v190[2] + 152);
          if (v193 < v194 >> 2
            || v193 == v194 >> 2
            && (unsigned int v195 = *a3,
                v254 = *v190,
                uint64_t v196 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v195, &v254),
                float32x4_t v197 = *a3,
                uint64_t v253 = v190[2],
                v196 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v197, &v253)))
          {
            v190 += 2;
            uint64_t v188 = v192;
          }
        }
        unsigned int v198 = *(_OWORD *)v190;
        unsigned int *v190 = 0;
        v190[1] = 0;
        uint64_t v199 = (std::__shared_weak_count *)v189[1];
        *(_OWORD *)unsigned int v189 = v198;
        if (v199) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v199);
        }
        unsigned int v189 = v190;
      }
      while (v188 <= (uint64_t)((unint64_t)(v186 - 2) >> 1));
      uint64_t v187 = v252 - 2;
      if (v190 == v252 - 2)
      {
        unsigned int v220 = (std::__shared_weak_count *)v190[1];
        unsigned int *v190 = v245;
        v190[1] = v248;
        if (!v220) {
          goto LABEL_192;
        }
      }
      else
      {
        float32x4_t v200 = *((_OWORD *)v252 - 1);
        *uint64_t v187 = 0;
        *(v252 - 1) = 0;
        unsigned int v201 = (std::__shared_weak_count *)v190[1];
        *(_OWORD *)uint64_t v190 = v200;
        if (v201) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v201);
        }
        unsigned int v202 = (std::__shared_weak_count *)*(v252 - 1);
        *(v252 - 2) = v245;
        *(v252 - 1) = v248;
        if (v202) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v202);
        }
        uint64_t v203 = (char *)(v190 + 2) - (char *)a1;
        if (v203 < 17) {
          goto LABEL_192;
        }
        unint64_t v204 = (((unint64_t)v203 >> 4) - 2) >> 1;
        unsigned int v205 = &a1[2 * v204];
        uint64_t v206 = (uint64_t)(*(void *)(*v205 + 160) - *(void *)(*v205 + 152)) >> 2;
        uint64_t v207 = *v190;
        uint64_t v208 = *(void *)(*v190 + 160) - *(void *)(*v190 + 152);
        if (v206 >= v208 >> 2)
        {
          if (v206 == v208 >> 2)
          {
            float32x4_t v209 = *a3;
            v254 = *v205;
            float32x4_t v210 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v209, &v254);
            unsigned int v211 = *a3;
            uint64_t v253 = *v190;
            if (v210 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v211, &v253))
            {
              uint64_t v207 = *v190;
              goto LABEL_180;
            }
          }
LABEL_192:
          if (v186-- <= 2) {
            return;
          }
          continue;
        }
LABEL_180:
        float v249 = v190[1];
        unsigned int *v190 = 0;
        v190[1] = 0;
        while (1)
        {
          int64_t v212 = v205;
          unsigned int v213 = *(_OWORD *)v205;
          *unsigned int v205 = 0;
          v205[1] = 0;
          uint64_t v214 = (std::__shared_weak_count *)v190[1];
          *(_OWORD *)uint64_t v190 = v213;
          if (v214) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v214);
          }
          if (!v204) {
            break;
          }
          unint64_t v204 = (v204 - 1) >> 1;
          unsigned int v205 = &a1[2 * v204];
          uint64_t v215 = (uint64_t)(*(void *)(*v205 + 160) - *(void *)(*v205 + 152)) >> 2;
          v216 = *(void *)(v207 + 160) - *(void *)(v207 + 152);
          if (v215 >= v216 >> 2)
          {
            if (v215 != v216 >> 2) {
              break;
            }
            uint64_t v217 = *a3;
            v254 = *v205;
            int64_t v218 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v217, &v254);
            uint64_t v219 = *a3;
            uint64_t v253 = v207;
            uint64_t v190 = v212;
            if (v218 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v219, &v253)) {
              break;
            }
          }
          else
          {
            uint64_t v190 = v212;
          }
        }
        unsigned int v220 = (std::__shared_weak_count *)v212[1];
        uint64_t *v212 = v207;
        v212[1] = v249;
        if (!v220) {
          goto LABEL_192;
        }
      }
      break;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v220);
    goto LABEL_192;
  }
}

  int v11 = (long long *)((char *)a2 - 24);
  uint64_t v12 = (long long *)a1;
LABEL_2:
  unint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    unint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v32 = *a3;
          unint64_t v33 = *((void *)a2 - 1);
          float v43 = *(long long *)((char *)a2 - 24);
          float v44 = v33;
          double v34 = *((void *)v12 + 2);
          BOOL v41 = *v12;
          float v42 = v34;
          if (v32(&v43, &v41))
          {
            unint64_t v35 = *v12;
            float v46 = *((void *)v12 + 2);
            double v45 = v35;
            uint64_t v36 = *v11;
            *((void *)v12 + 2) = *((void *)a2 - 1);
            *uint64_t v12 = v36;
            *int v11 = v45;
            *((void *)a2 - 1) = v46;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v12, (long long *)((char *)v12 + 24), (long long *)((char *)a2 - 24), a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v12, (uint64_t)v12 + 24, (uint64_t)(v12 + 3), (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v12, (uint64_t)v12 + 24, (uint64_t)(v12 + 3), (uint64_t)v12 + 72, (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v12, (uint64_t)a2, a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v12, (uint64_t)a2, a3);
      }
      return;
    }
    if (v14 == 1) {
      break;
    }
    int v17 = v16 >> 1;
    double v18 = (long long *)((char *)v12 + 24 * (v16 >> 1));
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v12, (long long *)((char *)v12 + 24 * (v16 >> 1)), (long long *)((char *)a2 - 24), a3);
      int v19 = 3 * v17;
      float v20 = (long long *)((char *)v12 + 24 * v17 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((long long *)((char *)v12 + 24), v20, a2 - 3, a3);
      float v21 = v12 + 3;
      float v22 = (long long *)((char *)v12 + 8 * v19 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v21, v22, (long long *)((char *)a2 - 72), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v20, v18, v22, a3);
      uint64_t v23 = *(_OWORD *)a1;
      float v46 = *(void *)(a1 + 16);
      double v45 = v23;
      float v24 = *v18;
      *(void *)(a1 + 16) = *((void *)v18 + 2);
      *(_OWORD *)a1 = v24;
      float v25 = v45;
      *((void *)v18 + 2) = v46;
      *double v18 = v25;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((long long *)((char *)v12 + 24 * (v16 >> 1)), v12, (long long *)((char *)a2 - 24), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    float v26 = *a3;
    float v27 = *(void *)(a1 - 8);
    double v39 = *(_OWORD *)(a1 - 24);
    uint64_t v40 = v27;
    unint64_t v28 = *(void *)(a1 + 16);
    float v37 = *(_OWORD *)a1;
    float v38 = v28;
    if ((v26(&v39, &v37) & 1) == 0)
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>((long long *)a1, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    float v29 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>((long long *)a1, (unint64_t)a2, a3);
    if ((v30 & 1) == 0) {
      goto LABEL_16;
    }
    double v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, v29, a3);
    uint64_t v12 = (long long *)(v29 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v29 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v29;
      if (v31) {
        return;
      }
      goto LABEL_1;
    }
    unint64_t v13 = v14 + 1;
    if (!v31)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,false>(a1, v29, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v29 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (v12 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,cv3d::cv::gess::math::MatrixElementT<double>*>((__n128 *)v12, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(__n128 *, long long *))a3);
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(float *result, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = result[1];
  if (v3 <= v4 && (v3 <= (float)(v4 + -0.000001) || a2[2] >= result[2]))
  {
    float v9 = a3[1];
    if (v9 > v3 || v9 > (float)(v3 + -0.000001) && a3[2] < a2[2])
    {
      int v10 = *((_DWORD *)a2 + 2);
      uint64_t v11 = *(void *)a2;
      int v12 = *((_DWORD *)a3 + 2);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v12;
      *(void *)a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      float v13 = a2[1];
      float v14 = result[1];
      if (v13 > v14 || v13 > (float)(v14 + -0.000001) && a2[2] < result[2])
      {
        int v15 = *((_DWORD *)result + 2);
        uint64_t v16 = *(void *)result;
        int v17 = *((_DWORD *)a2 + 2);
        *(void *)BOOL result = *(void *)a2;
        *((_DWORD *)result + 2) = v17;
        *(void *)a2 = v16;
        *((_DWORD *)a2 + 2) = v15;
      }
    }
  }
  else
  {
    float v5 = a3[1];
    if (v5 > v3 || v5 > (float)(v3 + -0.000001) && a3[2] < a2[2])
    {
      int v6 = *((_DWORD *)result + 2);
      uint64_t v7 = *(void *)result;
      int v8 = *((_DWORD *)a3 + 2);
      *(void *)BOOL result = *(void *)a3;
      *((_DWORD *)result + 2) = v8;
LABEL_17:
      *(void *)a3 = v7;
      *((_DWORD *)a3 + 2) = v6;
      return result;
    }
    int v18 = *((_DWORD *)result + 2);
    uint64_t v19 = *(void *)result;
    int v20 = *((_DWORD *)a2 + 2);
    *(void *)BOOL result = *(void *)a2;
    *((_DWORD *)result + 2) = v20;
    *(void *)a2 = v19;
    *((_DWORD *)a2 + 2) = v18;
    float v21 = a3[1];
    float v22 = a2[1];
    if (v21 > v22 || v21 > (float)(v22 + -0.000001) && a3[2] < a2[2])
    {
      int v6 = *((_DWORD *)a2 + 2);
      uint64_t v7 = *(void *)a2;
      int v23 = *((_DWORD *)a3 + 2);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v23;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)(a1 + 4);
      if (v6 > v7 || v6 > (float)(v7 + -0.000001) && *(float *)(a2 - 4) < *(float *)(a1 + 8))
      {
        uint64_t v8 = a2 - 12;
        int v9 = *(_DWORD *)(a1 + 8);
        uint64_t v10 = *(void *)a1;
        int v11 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v11;
        *(void *)uint64_t v8 = v10;
        *(_DWORD *)(v8 + 8) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a2 - 12));
      return 1;
    case 5uLL:
      float v24 = (uint64_t *)(a1 + 12);
      float v25 = (uint64_t *)(a1 + 24);
      float v26 = (uint64_t *)(a1 + 36);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a1 + 36));
      float v27 = *(float *)(a2 - 8);
      float v28 = *(float *)(a1 + 40);
      if (v27 > v28 || v27 > (float)(v28 + -0.000001) && *(float *)(a2 - 4) < *(float *)(a1 + 44))
      {
        uint64_t v29 = a2 - 12;
        int v30 = *(_DWORD *)(a1 + 44);
        uint64_t v31 = *v26;
        int v32 = *(_DWORD *)(a2 - 4);
        uint64_t *v26 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 44) = v32;
        *(void *)uint64_t v29 = v31;
        *(_DWORD *)(v29 + 8) = v30;
        float v33 = *(float *)(a1 + 40);
        float v34 = *(float *)(a1 + 28);
        if (v33 > v34 || v33 > (float)(v34 + -0.000001) && *(float *)(a1 + 44) < *(float *)(a1 + 32))
        {
          int v35 = *(_DWORD *)(a1 + 32);
          uint64_t v36 = *v25;
          *float v25 = *v26;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          uint64_t *v26 = v36;
          *(_DWORD *)(a1 + 44) = v35;
          float v37 = *(float *)(a1 + 28);
          float v38 = *(float *)(a1 + 16);
          if (v37 > v38 || v37 > (float)(v38 + -0.000001) && *(float *)(a1 + 32) < *(float *)(a1 + 20))
          {
            int v39 = *(_DWORD *)(a1 + 20);
            uint64_t v40 = *v24;
            uint64_t *v24 = *v25;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *float v25 = v40;
            *(_DWORD *)(a1 + 32) = v39;
            float v41 = *(float *)(a1 + 16);
            float v42 = *(float *)(a1 + 4);
            if (v41 > v42 || v41 > (float)(v42 + -0.000001) && *(float *)(a1 + 20) < *(float *)(a1 + 8))
            {
              int v43 = *(_DWORD *)(a1 + 8);
              uint64_t v44 = *(void *)a1;
              *(void *)a1 = *v24;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              uint64_t *v24 = v44;
              *(_DWORD *)(a1 + 20) = v43;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      uint64_t v13 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    float v16 = *(float *)(v13 + 4);
    float v17 = *(float *)(v12 + 4);
    if (v16 > v17) {
      break;
    }
    if (v16 > (float)(v17 + -0.000001))
    {
      float v18 = *(float *)(v13 + 8);
      if (v18 < *(float *)(v12 + 8)) {
        goto LABEL_10;
      }
    }
LABEL_20:
    uint64_t v12 = v13;
    v14 += 12;
    v13 += 12;
    if (v13 == a2) {
      return 1;
    }
  }
  float v18 = *(float *)(v13 + 8);
LABEL_10:
  int v19 = *(_DWORD *)v13;
  *(void *)uint64_t v13 = *(void *)v12;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
  uint64_t v20 = a1;
  if (v12 != a1)
  {
    uint64_t v21 = v14;
    while (1)
    {
      uint64_t v22 = a1 + v21;
      float v23 = *(float *)(a1 + v21 + 16);
      if (v16 <= v23)
      {
        if (v16 <= (float)(v23 + -0.000001))
        {
          uint64_t v20 = v12;
          goto LABEL_19;
        }
        if (v18 >= *(float *)(a1 + v21 + 20)) {
          break;
        }
      }
      v12 -= 12;
      *(void *)(v22 + 24) = *(void *)(v22 + 12);
      *(_DWORD *)(v22 + 32) = *(_DWORD *)(v22 + 20);
      v21 -= 12;
      if (v21 == -24)
      {
        uint64_t v20 = a1;
        goto LABEL_19;
      }
    }
    uint64_t v20 = a1 + v21 + 24;
  }
LABEL_19:
  *(_DWORD *)uint64_t v20 = v19;
  *(float *)(v20 + 4) = v16;
  *(float *)(v20 + 8) = v18;
  if (++v15 != 8) {
    goto LABEL_20;
  }
  return v13 + 12 == a2;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(float *a1, float *a2, float *a3, float *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(a1, a2, a3);
  float result = a4[1];
  float v9 = a3[1];
  if (result > v9 || result > (float)(v9 + -0.000001) && (float result = a4[2], result < a3[2]))
  {
    int v10 = *((_DWORD *)a3 + 2);
    uint64_t v11 = *(void *)a3;
    int v12 = *((_DWORD *)a4 + 2);
    *(void *)a3 = *(void *)a4;
    *((_DWORD *)a3 + 2) = v12;
    *(void *)a4 = v11;
    *((_DWORD *)a4 + 2) = v10;
    float result = a3[1];
    float v13 = a2[1];
    if (result > v13 || result > (float)(v13 + -0.000001) && (float result = a3[2], result < a2[2]))
    {
      int v14 = *((_DWORD *)a2 + 2);
      uint64_t v15 = *(void *)a2;
      int v16 = *((_DWORD *)a3 + 2);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v16;
      *(void *)a3 = v15;
      *((_DWORD *)a3 + 2) = v14;
      float result = a2[1];
      float v17 = a1[1];
      if (result > v17 || result > (float)(v17 + -0.000001) && (float result = a2[2], result < a1[2]))
      {
        int v18 = *((_DWORD *)a1 + 2);
        uint64_t v19 = *(void *)a1;
        int v20 = *((_DWORD *)a2 + 2);
        *(void *)a1 = *(void *)a2;
        *((_DWORD *)a1 + 2) = v20;
        *(void *)a2 = v19;
        *((_DWORD *)a2 + 2) = v18;
      }
    }
  }
  return result;
}

void *std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::vector(void *a1, unint64_t a2, const cv3d::cv::gess::mesh::BaseAttribute *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__vallocate[abi:ne180100](a1, a2);
    float v6 = (cv3d::cv::gess::mesh::BaseAttribute *)a1[1];
    float v7 = (char *)v6 + 64 * a2;
    unint64_t v8 = a2 << 6;
    do
    {
      cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::AttributeT(v6, a3);
      float v6 = (cv3d::cv::gess::mesh::BaseAttribute *)((char *)v6 + 64);
      v8 -= 64;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_24F4F7314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

void std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      float v6 = v4 - 64;
      float v7 = v4 - 64;
      unint64_t v8 = v4 - 64;
      do
      {
        float v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        float v7 = v8;
      }
      while (!v10);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__vallocate[abi:ne180100](a1, a2);
    float v6 = (cv3d::cv::gess::mesh::BaseAttribute *)a1[1];
    float v7 = (char *)v6 + 64 * a2;
    unint64_t v8 = a2 << 6;
    do
    {
      cv3d::cv::gess::mesh::AttributeT<unsigned short>::AttributeT(v6, a3);
      float v6 = (cv3d::cv::gess::mesh::BaseAttribute *)((char *)v6 + 64);
      v8 -= 64;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_24F4F74F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__function::__value_func<void ()(int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_1::__invoke(uint64_t a1, int a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(int)>::__value_func[abi:ne180100]((uint64_t)v4, a1);
  std::function<void ()(int)>::operator()((uint64_t)v4, a2);
  return std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v4);
}

void sub_24F4F7624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24F4F76F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<unsigned int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F4F779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24F4F780C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *,false>(double *result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = a2 - v10;
    unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v45 = *(double *)(a2 - 8);
          double v46 = *(double *)(v10 + 8);
          if (v45 > v46)
          {
            int v47 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *(_DWORD *)(a2 - 16);
            *(_DWORD *)(a2 - 16) = v47;
            *(double *)(v10 + 8) = v45;
            *(double *)(a2 - 8) = v46;
          }
          break;
        case 3uLL:
          float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v10, (double *)(v10 + 16), (double *)(a2 - 16));
          break;
        case 4uLL:
          float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), a2 - 16);
          break;
        case 5uLL:
          float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), v10 + 48);
          double v48 = *(double *)(a2 - 8);
          double v49 = *(double *)(v10 + 56);
          if (v48 > v49)
          {
            int v50 = *(_DWORD *)(v10 + 48);
            *(_DWORD *)(v10 + 48) = *(_DWORD *)(a2 - 16);
            *(_DWORD *)(a2 - 16) = v50;
            *(double *)(v10 + 56) = v48;
            *(double *)(a2 - 8) = v49;
            double v51 = *(double *)(v10 + 56);
            double v52 = *(double *)(v10 + 40);
            if (v51 > v52)
            {
              int v53 = *(_DWORD *)(v10 + 32);
              int v54 = *(_DWORD *)(v10 + 48);
              *(_DWORD *)(v10 + 32) = v54;
              *(_DWORD *)(v10 + 48) = v53;
              *(double *)(v10 + 40) = v51;
              *(double *)(v10 + 56) = v52;
              double v55 = *(double *)(v10 + 24);
              if (v51 > v55)
              {
                int v56 = *(_DWORD *)(v10 + 16);
                *(_DWORD *)(v10 + 16) = v54;
                *(_DWORD *)(v10 + 32) = v56;
                *(double *)(v10 + 24) = v51;
                *(double *)(v10 + 40) = v55;
                double v57 = *(double *)(v10 + 8);
                if (v51 > v57)
                {
                  int v58 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = v54;
                  *(_DWORD *)(v10 + 16) = v58;
                  *(double *)(v10 + 8) = v51;
                  *(double *)(v10 + 24) = v57;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v70 = (v12 - 2) >> 1;
      int64_t v71 = v70;
      do
      {
        int64_t v72 = v71;
        if (v70 >= v71)
        {
          uint64_t v73 = (2 * v71) | 1;
          unint64_t v74 = v10 + 16 * v73;
          if (2 * v72 + 2 < (uint64_t)v12 && *(double *)(v74 + 8) > *(double *)(v74 + 24))
          {
            v74 += 16;
            uint64_t v73 = 2 * v72 + 2;
          }
          double v75 = *(double *)(v74 + 8);
          double v76 = *(double *)(v10 + 16 * v72 + 8);
          if (v75 <= v76)
          {
            unint64_t v77 = v10 + 16 * v72;
            int v78 = *(_DWORD *)v77;
            do
            {
              unint64_t v79 = v77;
              unint64_t v77 = v74;
              *(_DWORD *)unint64_t v79 = *(_DWORD *)v74;
              *(double *)(v79 + 8) = v75;
              if (v70 < v73) {
                break;
              }
              uint64_t v80 = 2 * v73;
              uint64_t v73 = (2 * v73) | 1;
              unint64_t v74 = v10 + 16 * v73;
              uint64_t v81 = v80 + 2;
              if (v81 < (uint64_t)v12 && *(double *)(v74 + 8) > *(double *)(v74 + 24))
              {
                v74 += 16;
                uint64_t v73 = v81;
              }
              double v75 = *(double *)(v74 + 8);
            }
            while (v75 <= v76);
            *(_DWORD *)unint64_t v77 = v78;
            *(double *)(v77 + 8) = v76;
          }
        }
        int64_t v71 = v72 - 1;
      }
      while (v72);
      uint64_t v82 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v83 = 0;
        int v84 = *(_DWORD *)v10;
        double v85 = *(double *)(v10 + 8);
        unint64_t v86 = v10;
        do
        {
          unint64_t v87 = v86;
          v86 += 16 * (v83 + 1);
          uint64_t v88 = 2 * v83;
          uint64_t v83 = (2 * v83) | 1;
          uint64_t v89 = v88 + 2;
          if (v89 < v82 && *(double *)(v86 + 8) > *(double *)(v86 + 24))
          {
            v86 += 16;
            uint64_t v83 = v89;
          }
          *(_DWORD *)unint64_t v87 = *(_DWORD *)v86;
          *(void *)(v87 + 8) = *(void *)(v86 + 8);
        }
        while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
        if (v86 == a2 - 16)
        {
          *(_DWORD *)unint64_t v86 = v84;
          goto LABEL_117;
        }
        *(_DWORD *)unint64_t v86 = *(_DWORD *)(a2 - 16);
        *(void *)(v86 + 8) = *(void *)(a2 - 8);
        *(_DWORD *)(a2 - 16) = v84;
        *(double *)(a2 - 8) = v85;
        uint64_t v90 = v86 - v10 + 16;
        if (v90 >= 17)
        {
          unint64_t v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
          double v92 = *(double *)(v10 + 16 * v91 + 8);
          double v85 = *(double *)(v86 + 8);
          if (v92 > v85)
          {
            int v93 = *(_DWORD *)v86;
            do
            {
              unint64_t v94 = v86;
              unint64_t v86 = v10 + 16 * v91;
              *(_DWORD *)unint64_t v94 = *(_DWORD *)v86;
              *(double *)(v94 + 8) = v92;
              if (!v91) {
                break;
              }
              unint64_t v91 = (v91 - 1) >> 1;
              double v92 = *(double *)(v10 + 16 * v91 + 8);
            }
            while (v92 > v85);
            *(_DWORD *)unint64_t v86 = v93;
LABEL_117:
            *(double *)(v86 + 8) = v85;
          }
        }
        a2 -= 16;
        if (v82-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = v10 + 16 * (v12 >> 1);
    if ((unint64_t)v11 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v9, (double *)(v9 + 16 * (v12 >> 1)), (double *)(a2 - 16));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v9 + 16), (double *)(v14 - 16), (double *)(a2 - 32));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v9 + 32), (double *)(v9 + 16 + 16 * v13), (double *)(a2 - 48));
      float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v14 - 16), (double *)v14, (double *)(v9 + 16 + 16 * v13));
      int v15 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v14;
      *(_DWORD *)unint64_t v14 = v15;
      uint64_t v16 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = *(void *)(v14 + 8);
      *(void *)(v14 + 8) = v16;
    }
    else
    {
      float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)(v9 + 16 * (v12 >> 1)), (double *)v9, (double *)(a2 - 16));
    }
    --a3;
    if (a4)
    {
      double v17 = *(double *)(v9 + 8);
LABEL_13:
      uint64_t v18 = 0;
      int v19 = *(_DWORD *)v9;
      do
      {
        double v20 = *(double *)(v9 + v18 + 24);
        v18 += 16;
      }
      while (v20 > v17);
      unint64_t v21 = v9 + v18;
      unint64_t v22 = a2;
      if (v18 == 16)
      {
        unint64_t v25 = a2;
        while (v21 < v25)
        {
          unint64_t v23 = v25 - 16;
          double v26 = *(double *)(v25 - 8);
          v25 -= 16;
          if (v26 > v17) {
            goto LABEL_23;
          }
        }
        unint64_t v23 = v25;
      }
      else
      {
        do
        {
          unint64_t v23 = v22 - 16;
          double v24 = *(double *)(v22 - 8);
          v22 -= 16;
        }
        while (v24 <= v17);
      }
LABEL_23:
      unint64_t v10 = v21;
      if (v21 < v23)
      {
        unint64_t v27 = v23;
        do
        {
          int v28 = *(_DWORD *)v10;
          *(_DWORD *)unint64_t v10 = *(_DWORD *)v27;
          *(_DWORD *)unint64_t v27 = v28;
          uint64_t v29 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = v29;
          do
          {
            double v30 = *(double *)(v10 + 24);
            v10 += 16;
          }
          while (v30 > v17);
          do
          {
            double v31 = *(double *)(v27 - 8);
            v27 -= 16;
          }
          while (v31 <= v17);
        }
        while (v10 < v27);
      }
      if (v10 - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
        *(void *)(v9 + 8) = *(void *)(v10 - 8);
      }
      *(_DWORD *)(v10 - 16) = v19;
      *(double *)(v10 - 8) = v17;
      if (v21 < v23) {
        goto LABEL_34;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *>(v9, v10 - 16);
      float result = (double *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *>(v10, a2);
      if (result)
      {
        a2 = v10 - 16;
        if (v32) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v32)
      {
LABEL_34:
        float result = (double *)std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *,false>(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v17 = *(double *)(v9 + 8);
      if (*(double *)(v9 - 8) > v17) {
        goto LABEL_13;
      }
      if (v17 <= *(double *)(a2 - 8))
      {
        unint64_t v35 = v9 + 16;
        do
        {
          unint64_t v10 = v35;
          if (v35 >= a2) {
            break;
          }
          double v36 = *(double *)(v35 + 8);
          v35 += 16;
        }
        while (v17 <= v36);
      }
      else
      {
        unint64_t v33 = v9;
        do
        {
          unint64_t v10 = v33 + 16;
          double v34 = *(double *)(v33 + 24);
          v33 += 16;
        }
        while (v17 <= v34);
      }
      unint64_t v37 = a2;
      if (v10 < a2)
      {
        unint64_t v38 = a2;
        do
        {
          unint64_t v37 = v38 - 16;
          double v39 = *(double *)(v38 - 8);
          v38 -= 16;
        }
        while (v17 > v39);
      }
      int v40 = *(_DWORD *)v9;
      while (v10 < v37)
      {
        int v41 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = *(_DWORD *)v37;
        *(_DWORD *)unint64_t v37 = v41;
        uint64_t v42 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = *(void *)(v37 + 8);
        *(void *)(v37 + 8) = v42;
        do
        {
          double v43 = *(double *)(v10 + 24);
          v10 += 16;
        }
        while (v17 <= v43);
        do
        {
          double v44 = *(double *)(v37 - 8);
          v37 -= 16;
        }
        while (v17 > v44);
      }
      BOOL v4 = v10 - 16 >= v9;
      BOOL v5 = v10 - 16 == v9;
      if (v10 - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
        *(void *)(v9 + 8) = *(void *)(v10 - 8);
      }
      a4 = 0;
      *(_DWORD *)(v10 - 16) = v40;
      *(double *)(v10 - 8) = v17;
    }
  }
  unint64_t v59 = (_DWORD *)(v10 + 16);
  BOOL v61 = v10 == a2 || v59 == (_DWORD *)a2;
  if (a4)
  {
    if (!v61)
    {
      uint64_t v62 = 0;
      float v63 = (_DWORD *)v10;
      do
      {
        double v64 = *((double *)v63 + 3);
        double v65 = *((double *)v63 + 1);
        float v63 = v59;
        if (v64 > v65)
        {
          int v66 = *v59;
          uint64_t v67 = v62;
          while (1)
          {
            uint64_t v68 = v10 + v67;
            *(_DWORD *)(v68 + 16) = *(_DWORD *)(v10 + v67);
            *(void *)(v68 + 24) = *(void *)(v10 + v67 + 8);
            if (!v67) {
              break;
            }
            v67 -= 16;
            if (v64 <= *(double *)(v68 - 8))
            {
              uint64_t v69 = v10 + v67 + 16;
              goto LABEL_85;
            }
          }
          uint64_t v69 = v10;
LABEL_85:
          *(_DWORD *)uint64_t v69 = v66;
          *(double *)(v69 + 8) = v64;
        }
        unint64_t v59 = v63 + 4;
        v62 += 16;
      }
      while (v63 + 4 != (_DWORD *)a2);
    }
  }
  else if (!v61)
  {
    unint64_t v96 = (double *)(v10 + 24);
    do
    {
      double v97 = *(double *)(v9 + 24);
      double v98 = *(double *)(v9 + 8);
      unint64_t v9 = (unint64_t)v59;
      if (v97 > v98)
      {
        int v99 = *v59;
        float v100 = v96;
        do
        {
          unint64_t v101 = v100;
          *((_DWORD *)v100 - 2) = *((_DWORD *)v100 - 6);
          uint64_t v102 = *((void *)v100 - 2);
          v100 -= 2;
          *(void *)unint64_t v101 = v102;
        }
        while (v97 > *(v101 - 4));
        *((_DWORD *)v100 - 2) = v99;
        *float v100 = v97;
      }
      unint64_t v59 = (_DWORD *)(v9 + 16);
      v96 += 2;
    }
    while (v9 + 16 != a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)(a2 - 8);
      double v7 = *(double *)(a1 + 8);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(double *)(a1 + 8) = v6;
        *(double *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a1 + 48);
      double v18 = *(double *)(a2 - 8);
      double v19 = *(double *)(a1 + 56);
      if (v18 > v19)
      {
        int v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(double *)(a1 + 56) = v18;
        *(double *)(a2 - 8) = v19;
        double v21 = *(double *)(a1 + 56);
        double v22 = *(double *)(a1 + 40);
        if (v21 > v22)
        {
          int v23 = *(_DWORD *)(a1 + 32);
          int v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(double *)(a1 + 40) = v21;
          *(double *)(a1 + 56) = v22;
          double v25 = *(double *)(a1 + 24);
          if (v21 > v25)
          {
            int v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(double *)(a1 + 24) = v21;
            *(double *)(a1 + 40) = v25;
            double v27 = *(double *)(a1 + 8);
            if (v21 > v27)
            {
              int v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(double *)(a1 + 8) = v21;
              *(double *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 > *(double *)(v9 + 8))
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(void *)(v16 + 56) = *(void *)(a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= *(double *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__function::__value_func<void ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_2::__invoke(uint64_t a1, int a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v4, a1);
  std::function<void ()>::operator()((uint64_t)v4, a2);
  return std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v4);
}

void sub_24F4F833C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Imageb>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Imageb>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8B08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::util::Imageb>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = MEMORY[0x25335E9F0](result, 0x1000C8077774924);
    *(void *)(a1 + 40) = 0;
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  *(void *)uint64_t v2 = &unk_2700D8B40;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *((void *)v2 + 15) = *(void *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D8B40;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 120) = *(void *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

intptr_t std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::operator()(uint64_t a1, int *a2)
{
  int v3 = *a2;
  long long v4 = *(void **)(a1 + 16);
  float v5 = *(float *)(**(void **)(a1 + 8) + 4 * *a2);
  unsigned int v12 = 0;
  LODWORD(v10) = **(_DWORD **)(a1 + 80);
  intptr_t result = cv3d::cv::gess::internal::XAtlasPacking((void *)(*v4 + ((uint64_t)v3 << 6)), *(void **)(a1 + 24), *(void **)(a1 + 32), (void *)(**(void **)(a1 + 40) + ((uint64_t)v3 << 6)), *(std::vector<int>::size_type **)(a1 + 48), *(_DWORD **)(a1 + 56), *(unsigned int **)(a1 + 64), *(float **)(a1 + 72), v5, &v12, v10);
  if (result)
  {
    float v11 = 0.0;
    unsigned int v7 = v12;
    cv3d::cv::gess::isochart::MeasureUvUtilization(**(void **)(a1 + 16) + ((uint64_t)v3 << 6), *(void **)(a1 + 32), v12, &v11);
    dispatch_semaphore_wait(**(dispatch_semaphore_t **)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
    **(unsigned char **)(a1 + 112) = 1;
    int v8 = *(float **)(a1 + 88);
    if (v11 > *v8)
    {
      float *v8 = v11;
      uint64_t v9 = *(_DWORD **)(a1 + 104);
      **(_DWORD **)(a1 + 96) = v7;
      _DWORD *v9 = v3;
    }
    return dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 120));
  }
  return result;
}

void *std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x60uLL);
  *(void *)long long v2 = &unk_2700D8B88;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D8B88;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 16);
  long long v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_2700D8B08;
  *((_DWORD *)v2 + 6) = 0;
  int v3 = *v1;
  *((_DWORD *)v2 + 7) = *v1;
  *((_DWORD *)v2 + 8) = v3;
  *((_DWORD *)v2 + 9) = 1;
  v2[5] = 0;
  long long v4 = (char *)(v2 + 3);
  long long v5 = v2;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)(v2 + 3));
}

void sub_24F4F91E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::util::ImageT<BOOL>::Dilate()
{
}

void sub_24F4F9740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v22 = a16;
  if (__p)
  {
    operator delete(__p);
    uint64_t v22 = a16;
  }
  MEMORY[0x25335E9F0](v22, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  long long v6 = a2;
  uint64_t v8 = a1[2];
  __n128 result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    double v18 = (char *)a1[1];
    double v13 = a1 + 1;
    unsigned int v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      int v26 = result;
      if (a2 != a3)
      {
        double v27 = result;
        do
        {
          uint64_t v28 = *v6++;
          *(void *)double v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v26 - result);
      unsigned int v12 = result;
    }
    else
    {
      int v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          uint64_t v22 = *v6++;
          *(void *)__n128 result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      int v23 = v12;
      if (v20 != a3)
      {
        int v24 = v12;
        do
        {
          uint64_t v25 = *v20++;
          *(void *)int v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v11);
    int v14 = (char *)a1[1];
    double v13 = a1 + 1;
    unsigned int v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

void *std::__function::__value_func<void ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void cv3d::cv::gess::isochart::CalculateStretchThreshold(uint64_t **this, const cv3d::cv::gess::mesh::TriMesh *a2, float *a3, float *a4, float *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  int v17 = 0;
  unsigned int v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>(this + 7, (uint64_t)&v17, (unsigned __int8 *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v9 == -1 || this[20] == this[19])
  {
    float v14 = *a3;
  }
  else
  {
    unint64_t v10 = 0;
    float v11 = 0.0;
    do
    {
      float v11 = v11 + *(float *)cv3d::cv::gess::mesh::MeshProperty::attribute<float>((uint64_t)this, v9, v10++);
      uint64_t v12 = (char *)this[20] - (char *)this[19];
    }
    while (v10 < v12 >> 2);
    float v13 = *(float *)a2 * 100.0 * v11 / (float)(unint64_t)(v12 >> 2);
    *a4 = v13;
    float v14 = *a3 * 0.333 + v13 * 0.667;
  }
  *a4 = v14;
}

void sub_24F4F9AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<float>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v7 = a2;
  uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 56), &v7);
  uint64_t v5 = *(void *)(v4 + 40);
  if (a3 >= (unint64_t)((*(void *)(v4 + 48) - v5) >> 2)) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  return v5 + 4 * a3;
}

void cv3d::cv::gess::isochart::IsoChart::InitialParameterize(uint64_t a1, uint64_t *a2, void *a3)
{
  v31[44] = *MEMORY[0x263EF8340];
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v30, *(cv3d::cv::gess::mesh::TriMesh **)(a1 + 80), (const float *)(a1 + 96), (const float *)(a1 + 112), *(unsigned char *)(a1 + 152));
  if (*(void *)(a1 + 40)) {
    std::function<BOOL ()(void)>::operator=(v31, a1 + 16);
  }
  if (cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization((cv3d::cv::gess::isochart::IsoChartMesh *)v30))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (!v7 || ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7) & 1) == 0)
    {
      BOOL v8 = 0;
      *(_WORD *)((char *)&v17 + 1) = 257;
      int64x2_t v18 = vdupq_n_s64(0xAuLL);
      uint64_t v19 = 20;
      long long v20 = xmmword_24F5788C0;
      uint64_t v21 = 0x7F7FFFFFFF7FFFFFLL;
      uint64_t v22 = -1;
      memset(v23, 0, sizeof(v23));
      char v24 = 0;
      memset(v25, 0, sizeof(v25));
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      uint64_t v16 = 0;
      unint64_t v29 = 0;
      float v15 = 0.0;
      LOBYTE(v17) = *(unsigned char *)(a1 + 152);
      if (!*(unsigned char *)(a1 + 120)) {
        BOOL v8 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch((cv3d::cv::gess::isochart::IsoChartMesh *)v30, &v17, (float *)&v16 + 1, (float *)&v16, &v29, &v15, 1);
      }
      uint64_t v9 = *(void *)(a1 + 40);
      if (!v9 || ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9) & 1) == 0)
      {
        if (v8)
        {
          unint64_t v10 = (float *)*((void *)&v27 + 1);
          if ((void)v28 != *((void *)&v27 + 1))
          {
            unint64_t v11 = 0;
            unint64_t v12 = (uint64_t)(v28 - *((void *)&v27 + 1)) >> 2;
            if (v12 <= 1) {
              unint64_t v12 = 1;
            }
            do
            {
              float v13 = *v10;
              if (*v10 < 3.4028e38)
              {
                if (*(float *)a1 < v13)
                {
                  *(float *)a1 = v13;
                  float v13 = *v10;
                }
                *(float *)(a1 + 4) = v13 + *(float *)(a1 + 4);
                ++v11;
              }
              ++v10;
              --v12;
            }
            while (v12);
            if (v11) {
              *(float *)(a1 + 4) = *(float *)(a1 + 4) / (float)v11;
            }
          }
          cv3d::cv::gess::isochart::AssignUvidByVid(*(uint64_t ***)(a1 + 80), v6);
        }
        else
        {
          if (a2[1] != *a2) {
            __assert_rtn("InitialParameterize", "IsoChart.cpp", 74, "children_mesh.size() == 0");
          }
          cv3d::cv::gess::isochart::IsoChartMesh::Partition((uint64_t)v30, a2, a3, (_DWORD *)(a1 + 116), *(unsigned __int8 *)(a1 + 152));
          uint64_t v14 = *(void *)(a1 + 40);
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
          }
        }
      }
      if (*((void *)&v27 + 1))
      {
        *(void *)&long long v28 = *((void *)&v27 + 1);
        operator delete(*((void **)&v27 + 1));
      }
      if ((void)v26)
      {
        *((void *)&v26 + 1) = v26;
        operator delete((void *)v26);
      }
      unint64_t v29 = (unint64_t)v25 + 8;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v23);
    }
  }
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v30);
}

void sub_24F4F9E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void *std::function<BOOL ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo(cv3d::cv::gess::isochart::ChartOptimizeInfo *this)
{
  long long v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v4);
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)this + 72);
}

void cv3d::cv::gess::isochart::IsoChart::RecursivelyParameterize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  memset(__p, 0, sizeof(__p));
  uint64_t v5 = *(void *)(a2 + 8);
  v12[0] = *(uint64_t ***)a2;
  v12[1] = (uint64_t **)v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v6 = cv3d::cv::gess::isochart::IsoChart::DoParameterize(a1, v12, a3, &v14, (uint64_t)__p);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (!v7 || ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7) & 1) == 0)
  {
    if (v6)
    {
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100]((uint64_t *)(a1 + 184), (long long *)a2);
    }
    else
    {
      uint64_t v8 = v14;
      if (v15 != v14)
      {
        unint64_t v9 = 0;
        do
        {
          long long v10 = *(_OWORD *)(v8 + 16 * v9);
          long long v11 = v10;
          if (*((void *)&v10 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          cv3d::cv::gess::isochart::IsoChart::RecursivelyParameterize(a1, &v11, (*(void *)((char *)__p[0] + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1);
          if (*((void *)&v11 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
          }
          ++v9;
          uint64_t v8 = v14;
        }
        while (v9 < (v15 - v14) >> 4);
      }
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  __p[0] = &v14;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_24F4FA068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  std::string __p = &a16;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChart::DoParameterize(uint64_t a1, uint64_t ***a2, char a3, uint64_t *a4, uint64_t a5)
{
  v35[44] = *MEMORY[0x263EF8340];
  if (*a4 != a4[1]) {
    cv3d::cv::gess::isochart::IsoChart::DoParameterize();
  }
  if (*(void *)(a5 + 8)) {
    cv3d::cv::gess::isochart::IsoChart::DoParameterize();
  }
  float v32 = 0.0;
  cv3d::cv::gess::isochart::CalculateStretchThreshold(*a2, *(const cv3d::cv::gess::mesh::TriMesh **)(a1 + 104), (float *)(a1 + 112), &v32, (float *)a5);
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v34, (cv3d::cv::gess::mesh::TriMesh *)*a2, (const float *)(a1 + 96), &v32, *(unsigned char *)(a1 + 152));
  if (*(void *)(a1 + 40)) {
    std::function<BOOL ()(void)>::operator=(v35, a1 + 16);
  }
  int v10 = cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization((cv3d::cv::gess::isochart::IsoChartMesh *)v34);
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11 && ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11) & 1) != 0) {
    goto LABEL_22;
  }
  if (!v10) {
    goto LABEL_19;
  }
  *(_WORD *)&v20[1] = 257;
  int64x2_t v21 = vdupq_n_s64(0xAuLL);
  uint64_t v22 = 20;
  long long v23 = xmmword_24F5788C0;
  uint64_t v24 = 0x7F7FFFFFFF7FFFFFLL;
  uint64_t v25 = -1;
  memset(v26, 0, sizeof(v26));
  char v27 = 0;
  memset(v28, 0, sizeof(v28));
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v19 = 0;
  unint64_t v33 = 0;
  float v18 = 0.0;
  v20[0] = *(unsigned char *)(a1 + 152);
  if (a3)
  {
    uint64_t v12 = 1;
    int v13 = 1;
  }
  else
  {
    BOOL v14 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch((cv3d::cv::gess::isochart::IsoChartMesh *)v34, (float **)v20, (float *)&v19 + 1, (float *)&v19, &v33, &v18, 0);
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15 && ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15) & 1) != 0)
    {
      uint64_t v12 = 0;
      int v13 = 0;
    }
    else
    {
      int v13 = !v14;
      uint64_t v12 = 1;
    }
  }
  if (*((void *)&v30 + 1))
  {
    *(void *)&long long v31 = *((void *)&v30 + 1);
    operator delete(*((void **)&v30 + 1));
  }
  if ((void)v29)
  {
    *((void *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
  unint64_t v33 = (unint64_t)v28 + 8;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v26);
  if (v13)
  {
LABEL_19:
    cv3d::cv::gess::isochart::IsoChartMesh::Partition((uint64_t)v34, a4, (void *)a5, (_DWORD *)(a1 + 116), *(unsigned __int8 *)(a1 + 152));
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16 && ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16) & 1) != 0
      || (unint64_t)(a4[1] - *a4) > 0x10)
    {
LABEL_22:
      uint64_t v12 = 0;
      goto LABEL_26;
    }
    if (v35[22] <= 2uLL)
    {
      v20[0] = 0;
      cv3d::cv::gess::isochart::IsoChartMesh::ProcessPlaneLikeShape((uint64_t)v34, v20);
    }
    uint64_t v12 = 1;
  }
LABEL_26:
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v34);
  return v12;
}

void sub_24F4FA39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void cv3d::cv::gess::isochart::IsoChart::Run(cv3d::cv::gess::isochart::IsoChart *this)
{
  v111[4] = *MEMORY[0x263EF8340];
  v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  uint64_t v4 = *((void *)this + 5);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) & 1) != 0) {
    return;
  }
  cv3d::cv::gess::isochart::IsoChart::PrepareData((cv3d::cv::gess::isochart **)this, (cv3d::cv::gess::mesh::TriMesh *)v2.__d_.__rep_);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5)) {
      return;
    }
  }
  float v100 = 0;
  unint64_t v101 = 0;
  uint64_t v102 = 0;
  cv3d::cv::gess::isochart::TrySplitMeshByComponents(*((void *)this + 10), (uint64_t *)&v100);
  uint64_t v6 = *((void *)this + 5);
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6) & 1) != 0) {
    goto LABEL_121;
  }
  LOBYTE(v108[0]) = 0;
  std::vector<BOOL>::vector(v99, ((char *)v101 - (char *)v100) >> 4, (unsigned __int8 *)v108);
  uint64_t v8 = v100;
  unint64_t v9 = v101;
  if (v100 == v101)
  {
    cv3d::cv::gess::isochart::IsoChart::InitialParameterize((uint64_t)this, (uint64_t *)&v100, v99);
    uint64_t v23 = *((void *)this + 5);
    if (v23 && ((*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23) & 1) != 0) {
      goto LABEL_119;
    }
  }
  else
  {
    do
    {
      cv3d::cv::gess::isochart::CalculateVertexImportance(*v8, v7);
      v8 += 2;
    }
    while (v8 != v9);
  }
  if (v101 != v100)
  {
    LODWORD(v10) = 0;
    do
    {
      cv3d::cv::gess::isochart::IsoChartMesh::ProcessSingleBoundaryLoopAndComponent((uint64_t *)&v100, v10, 1, *((float *)this + 24), 0.0005);
      unint64_t v10 = (v10 + 1);
    }
    while (v10 < ((char *)v101 - (char *)v100) >> 4);
  }
  uint64_t v11 = (char *)this + 16;
  *(double *)(*((void *)this + 26) + 8) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v3.__d_.__rep_)
                                            / 1000000.0;
  if (v100 == v101)
  {
    cv3d::cv::gess::isochart::InitRootMeshGroup(*((cv3d::cv::gess::isochart **)this + 10), v12);
    goto LABEL_99;
  }
  v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*((unsigned char *)this + 233))
  {
    long long v109 = 0u;
    long long v110 = 0u;
    *(_OWORD *)float v108 = 0u;
    v97[0] = 0;
    v97[1] = 0;
    double v98 = 0;
    unsigned int v14 = std::thread::hardware_concurrency();
    if (v14 <= 2) {
      unint64_t v15 = 2;
    }
    else {
      unint64_t v15 = v14;
    }
    LOBYTE(v103) = 0;
    std::vector<BOOL>::vector(__p, v15, (unsigned __int8 *)&v103);
    qos_class_t v95 = qos_class_self();
    v92[0] = this;
    v92[1] = v108;
    int v93 = __p;
    unint64_t v94 = &v95;
    std::mutex::lock((std::mutex *)((char *)this + 240));
    uint64_t v16 = (uint64_t)v100;
    if (v101 != v100)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        int v103 = (char *)v99[0] + 8 * (v18 >> 6);
        uint64_t v104 = 1 << v18;
        std::deque<cv3d::cv::gess::isochart::ParamTask>::emplace_back<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>>(v108, (uint64_t *)(v16 + v17), (uint64_t)&v103);
        ++v18;
        uint64_t v16 = (uint64_t)v100;
        v17 += 16;
      }
      while (v18 < ((char *)v101 - (char *)v100) >> 4);
    }
    std::mutex::unlock((std::mutex *)((char *)this + 240));
    uint64_t v91 = 0;
    if (v97[1] < v98) {
      std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0 const&,unsigned long &,void,void>();
    }
    int64_t v19 = v97[1] - v97[0];
    if (!((unint64_t)(v19 + 1) >> 61))
    {
      unint64_t v20 = ((char *)v98 - (char *)v97[0]) >> 2;
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      if ((unint64_t)((char *)v98 - (char *)v97[0]) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      uint64_t v107 = &v98;
      if (v21) {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v98, v21);
      }
      else {
        uint64_t v22 = 0;
      }
      int v103 = v22;
      uint64_t v104 = (uint64_t)&v22[8 * v19];
      uint64_t v105 = v104;
      uint64_t v106 = &v22[8 * v21];
      std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0 const&,unsigned long &,void,void>();
    }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v39 = (uint64_t)v100;
  if (v101 != v100)
  {
    unint64_t v40 = 0;
    do
    {
      long long v41 = *(_OWORD *)(v39 + 16 * v40);
      long long v90 = v41;
      if (*((void *)&v41 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      cv3d::cv::gess::isochart::IsoChart::RecursivelyParameterize((uint64_t)this, (uint64_t)&v90, (*(void *)((char *)v99[0] + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v40) & 1);
      if (*((void *)&v90 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
      }
      uint64_t v42 = *((void *)this + 5);
      if (v42 && ((*(uint64_t (**)(uint64_t))(*(void *)v42 + 48))(v42) & 1) != 0) {
        goto LABEL_119;
      }
      ++v40;
      uint64_t v39 = (uint64_t)v100;
    }
    while (v40 < ((char *)v101 - (char *)v100) >> 4);
  }
  *(double *)(*((void *)this + 26) + 16) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v13.__d_.__rep_)
                                             / 1000000.0;
  uint64_t v24 = *((void *)this + 5);
  if (v24 && ((*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24) & 1) != 0) {
    goto LABEL_119;
  }
  v108[1] = 0;
  *(void *)&long long v109 = 0;
  v108[0] = &v108[1];
  uint64_t v25 = (unint64_t *)*((void *)this + 23);
  long long v26 = (unint64_t *)*((void *)this + 24);
  char v27 = (void *)((char *)this + 184);
  if (v26 == v25)
  {
    unint64_t v37 = ((char *)v26 - (char *)v25) >> 4;
    uint64_t v25 = (unint64_t *)*((void *)this + 24);
  }
  else
  {
    uint64_t v28 = 0;
    unsigned int v29 = 1;
    do
    {
      uint64_t v30 = 16 * v28;
      unint64_t v31 = v25[2 * v28];
      std::string::basic_string[abi:ne180100]<0>(&v103, "f:index_in_root");
      LODWORD(v92[0]) = -1;
      int v32 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v31 + 56), (uint64_t)v92, (unsigned __int8 *)&v103);
      if (SHIBYTE(v105) < 0) {
        operator delete(v103);
      }
      uint64_t v33 = *(void *)(*v27 + v30);
      LODWORD(v103) = v32;
      uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v33 + 56), (unsigned int *)&v103);
      unint64_t v35 = *(int **)(v34 + 40);
      if (*(int **)(v34 + 48) == v35) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      int v36 = *v35;
      v92[0] = *(void **)(*v27 + v30);
      int v103 = v92;
      *((_DWORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::__map_value_compare<cv3d::cv::gess::mesh::TriMesh *,std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::less<cv3d::cv::gess::mesh::TriMesh *>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::TriMesh *,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::TriMesh *&&>,std::tuple<>>((uint64_t **)v108, (unint64_t *)v92, (uint64_t)&std::piecewise_construct, (void **)&v103)+ 10) = v36;
      uint64_t v28 = v29;
      uint64_t v25 = (unint64_t *)*((void *)this + 23);
      long long v26 = (unint64_t *)*((void *)this + 24);
      unint64_t v37 = ((char *)v26 - (char *)v25) >> 4;
    }
    while (v37 > v29++);
    uint64_t v11 = (char *)this + 16;
  }
  int v103 = v108;
  unint64_t v43 = 126 - 2 * __clz(v37);
  uint64_t v44 = v26 == v25 ? 0 : v43;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,false>(v25, v26, (uint64_t *)&v103, v44, 1);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)v108, (void *)v108[1]);
  v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  unint64_t v46 = **((void **)this + 11);
  if (v46 < (uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 4)
  {
    uint64_t v47 = *((void *)this + 10);
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v111, (uint64_t)v11);
    cv3d::cv::gess::isochart::IsoChartMesh::MergeSmallCharts((uint64_t *)this + 23, v46, v47, (const float *)this + 24, (const float *)this + 28, (uint64_t)v111, *((unsigned char *)this + 152), *((unsigned char *)this + 233));
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v111);
    uint64_t v48 = *((void *)this + 5);
    if (v48)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v48 + 48))(v48)) {
        goto LABEL_119;
      }
    }
  }
  *(double *)(*((void *)this + 26) + 24) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v45.__d_.__rep_)
                                             / 1000000.0;
  long long v109 = 0u;
  long long v110 = 0u;
  *(_OWORD *)float v108 = 0u;
  int v50 = (uint64_t ***)*((void *)this + 24);
  if (v50 == *((uint64_t ****)this + 23))
  {
    float v52 = 0.0;
    uint64_t v69 = (uint64_t ***)*((void *)this + 24);
    goto LABEL_86;
  }
  unint64_t v51 = 0;
  float v52 = 0.0;
  int v50 = (uint64_t ***)*((void *)this + 23);
  float v53 = 0.0;
  do
  {
    int v54 = (uint64_t *)&v50[2 * v51];
    uint64_t v56 = *(void *)(*v54 + 152);
    uint64_t v55 = *(void *)(*v54 + 160);
    unint64_t v57 = (v55 - v56) >> 2;
    std::vector<float>::vector(&v103, v57);
    uint64_t v58 = *v54;
    std::string::basic_string[abi:ne180100]<0>(v92, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v97[0] = 0;
    int v59 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v58 + 80), (uint64_t)v97, (unsigned __int8 *)v92);
    if (SHIBYTE(v93) < 0) {
      operator delete(v92[0]);
    }
    uint64_t v60 = *v54;
    LODWORD(v92[0]) = v59;
    uint64_t v61 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v60 + 80), (unsigned int *)v92);
    uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 16))(v61);
    uint64_t v63 = *v54;
    if (v62 != (uint64_t)(*(void *)(*v54 + 112) - *(void *)(*v54 + 104)) >> 2) {
      __assert_rtn("Run", "IsoChart.cpp", 385, "uvs.Size() == curr_mesh->VSize()");
    }
    LODWORD(v92[0]) = -1;
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch(v63, v61, &v103, 0, (unsigned int *)v92);
    if (v55 == v56)
    {
      uint64_t v67 = v103;
      if (!v103) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v64 = 0;
      if (v57 <= 1) {
        unint64_t v57 = 1;
      }
      do
      {
        uint64_t v65 = *v54;
        LODWORD(v92[0]) = v64;
        float v66 = cv3d::cv::gess::mesh::TriMesh::Area(v65, (unsigned int *)v92);
        uint64_t v67 = v103;
        float v68 = *((float *)v103 + v64);
        if (v68 >= 3.4028e38)
        {
          float v52 = v52 + v66;
        }
        else
        {
          if (*(float *)this < v68)
          {
            *(float *)this = v68;
            std::deque<float>::push_back(v108, (float *)this);
            if (*((void *)&v110 + 1) >= 6uLL)
            {
              *(void *)&long long v110 = v110 + 1;
              --*((void *)&v110 + 1);
              if ((unint64_t)v110 >= 0x800)
              {
                operator delete(*(void **)v108[1]);
                v108[1] = (char *)v108[1] + 8;
                *(void *)&long long v110 = v110 - 1024;
              }
            }
          }
          uint64_t v67 = v103;
          *((float *)this + 1) = *((float *)this + 1) + (float)(*((float *)v103 + v64) * v66);
          float v53 = v53 + v66;
        }
        ++v64;
      }
      while (v57 != v64);
    }
    uint64_t v104 = (uint64_t)v67;
    operator delete(v67);
LABEL_81:
    ++v51;
    int v50 = (uint64_t ***)*((void *)this + 23);
    uint64_t v69 = (uint64_t ***)*((void *)this + 24);
  }
  while (v51 < ((char *)v69 - (char *)v50) >> 4);
  if (v53 > 0.0) {
    *((float *)this + 1) = *((float *)this + 1) / v53;
  }
  uint64_t v11 = (char *)this + 16;
LABEL_86:
  if (*((void *)&v110 + 1) >= 5uLL) {
    *(_DWORD *)this = *(_DWORD *)(*(void *)((char *)v108[1] + (((unint64_t)v110 >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                                + 4 * (v110 & 0x3FF));
  *((float *)this + 2) = v52 / *((float *)this + 24);
  uint64_t v70 = *((void *)this + 5);
  if (v70)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v70 + 48))(v70))
    {
      std::deque<int>::~deque[abi:ne180100](v108);
      goto LABEL_119;
    }
    int v50 = (uint64_t ***)*((void *)this + 23);
    uint64_t v69 = (uint64_t ***)*((void *)this + 24);
  }
  while (v50 != v69)
  {
    cv3d::cv::gess::isochart::AssignUvidByVid(*v50, v49);
    v50 += 2;
  }
  if (*((unsigned char *)this + 152))
  {
    int64_t v71 = (uint64_t ***)*((void *)this + 23);
    int64_t v72 = (uint64_t ***)*((void *)this + 24);
    while (v71 != v72)
    {
      cv3d::cv::gess::isochart::RescaleCharts(*v71, v49);
      v71 += 2;
    }
  }
  cv3d::cv::gess::isochart::MergeToRootMesh((uint64_t *)this + 23, *((void *)this + 10));
  cv3d::cv::gess::alg::SortFaceByGroupID32Bit(*((uint64_t ***)this + 10), v73);
  std::deque<int>::~deque[abi:ne180100](v108);
LABEL_99:
  if (*((unsigned char *)this + 121))
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    cv3d::cv::gess::isochart::CheckAndRepairSelfIntersectionForChartedMesh(*((uint64_t ***)this + 10), v75);
    *(double *)(*((void *)this + 26) + 32) = (double)(std::chrono::system_clock::now().__d_.__rep_ - rep)
                                               / 1000000.0;
  }
  **((double **)this + 26) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v3.__d_.__rep_) / 1000000.0;
  LODWORD(v92[0]) = -1;
  uint64_t v76 = *((void *)this + 10);
  std::string::basic_string[abi:ne180100]<0>(v108, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v77 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v76, v92, (unsigned __int8 *)v108);
  BOOL v78 = v77;
  if (SBYTE7(v109) < 0)
  {
    operator delete(v108[0]);
    if (!v78) {
      goto LABEL_105;
    }
LABEL_103:
    uint64_t v79 = *((void *)this + 10);
    LODWORD(v103) = v92[0];
    uint64_t v80 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v79 + 80), (unsigned int *)&v103);
    unint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 16))(v80);
  }
  else
  {
    if (v77) {
      goto LABEL_103;
    }
LABEL_105:
    unint64_t v81 = (uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 4;
  }
  if (v81 <= 1) {
    uint64_t v82 = 1;
  }
  else {
    uint64_t v82 = v81;
  }
  *(void *)(*((void *)this + 26) + 40) = v82;
  uint64_t v83 = *((void *)this + 5);
  if (!v83 || ((*(uint64_t (**)(uint64_t))(*(void *)v83 + 48))(v83) & 1) == 0)
  {
    v84.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (**((_DWORD **)this + 27) == 2)
    {
      double v85 = (uint64_t **)*((void *)this + 10);
      unint64_t v86 = (_DWORD *)*((void *)this + 16);
      LODWORD(v108[0]) = **((unsigned __int8 **)this + 17);
      cv3d::cv::gess::internal::XAtlasPacking(v85, v86, (unsigned int *)v108, *((float **)this + 18), **((_DWORD **)this + 28), *((unsigned char *)this + 232));
    }
    else
    {
      cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(v108, *((void *)this + 10), *((void *)this + 26), *((void *)this + 16), *((void *)this + 17), *((void *)this + 18), *((unsigned __int8 *)this + 233), **((unsigned int **)this + 28));
      if (*((void *)this + 5)) {
        std::function<BOOL ()(void)>::operator=(v108, (uint64_t)v11);
      }
      cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)v108);
      cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)v108);
    }
    uint64_t v87 = *((void *)this + 5);
    if (!v87 || ((*(uint64_t (**)(uint64_t))(*(void *)v87 + 48))(v87) & 1) == 0)
    {
      v88.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v89 = *((void *)this + 26);
      *(double *)(v89 + 48) = (double)(v88.__d_.__rep_ - v84.__d_.__rep_) / 1000000.0;
      *(void *)(v89 + 56) = **((unsigned __int8 **)this + 17);
      *(float32x2_t *)(v89 + 64) = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)this), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*((float *)this + 24)* 100.0/ (float)(unint64_t)((uint64_t)(*(void *)(*((void *)this + 10) + 160)- *(void *)(*((void *)this + 10) + 152)) >> 2)), 0)));
      *(_DWORD *)(v89 + 72) = *((_DWORD *)this + 2);
    }
  }
LABEL_119:
  if (v99[0]) {
    operator delete(v99[0]);
  }
LABEL_121:
  v108[0] = &v100;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)v108);
}

void sub_24F4FB098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v48 - 160));
  if (__p) {
    operator delete(__p);
  }
  a43 = &a32;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChart::PrepareData(cv3d::cv::gess::isochart **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  cv3d::cv::gess::isochart::InitializeVIDRoot(this[10], a2);
  *((float *)this + 24) = cv3d::cv::gess::isochart::CalculateTriMeshSurfaceArea(this[10], v3);
  cv3d::cv::gess::isochart::CalculateHEdgeLength(this[10], v4);
  uint64_t v5 = this[10];
  float v6 = *(float *)this[13]
     * 100.0
     * *((float *)this + 24)
     / (float)(unint64_t)((uint64_t)(*((void *)v5 + 20) - *((void *)v5 + 19)) >> 2);
  *((float *)this + 28) = v6;
  if (*((unsigned char *)this + 152))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "f:imt");
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    unsigned int v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)v5 + 7, (uint64_t)&v15, (unsigned __int8 *)v17);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v7 == -1)
    {
      *((unsigned char *)this + 152) = 0;
    }
    else if (*((unsigned char *)this + 152))
    {
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v17, (uint64_t)(*((void *)this[10] + 20) - *((void *)this[10] + 19)) >> 1);
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v15, 3uLL);
      std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(__p, 3uLL);
      uint64_t v8 = (uint64_t)this[10];
      if (*(void *)(v8 + 160) != *(void *)(v8 + 152))
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        do
        {
          v13.i32[0] = v10;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v8, (unsigned int *)&v13, &v15);
          float32x4_t v13 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this[10], *((_DWORD *)this[10] + 44), *(_DWORD *)v15);
          float32x4_t v12 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this[10], *((_DWORD *)this[10] + 44), *((_DWORD *)v15 + 1));
          float32x4_t v11 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this[10], *((_DWORD *)this[10] + 44), *((_DWORD *)v15 + 2));
          cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(&v13, &v12, &v11, (void *)__p[0], (uint64_t)__p[0] + 8, (float *)__p[0] + 4, (int32x4_t *)((char *)v17[0] + v9), (float32x4_t *)((char *)v17[0] + v9 + 16));
          ++v10;
          uint64_t v8 = (uint64_t)this[10];
          v9 += 32;
        }
        while (v10 < (uint64_t)(*(void *)(v8 + 160) - *(void *)(v8 + 152)) >> 2);
      }
      cv3d::cv::gess::isochart::CalculateHEdgeSignalLength(v8, (uint64_t *)v17, v7);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      if (v17[0])
      {
        v17[1] = v17[0];
        operator delete(v17[0]);
      }
    }
  }
}

void sub_24F4FB468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  uint64_t v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    while (*(void *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::CutTopData((uint64_t *)a1);
  }
  std::chrono::system_clock::time_point v3 = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::CutTopData(uint64_t *a1)
{
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(a1, 0, &v3);
  if (v3) {
    uint64_t v1 = *(unsigned int *)(v3 + 4);
  }
  else {
    uint64_t v1 = 0xFFFFFFFFLL;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[4];
  if (v4 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v4 - 1);
    uint64_t v7 = a1[4] - 1;
    a1[4] = v7;
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(*a1 + 16 * v7);
    *(void *)(v9 + 8) = -1;
    if (**(float **)(v8 + 16 * a2) >= *(float *)v9) {
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(a1, a2);
    }
    else {
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::downheap(a1, a2);
    }
    long long v10 = *(_OWORD *)(*a1 + 16 * a1[4]);
    *(_OWORD *)a3 = v10;
    if (*((void *)&v10 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
}

__n128 cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *a1;
    __n128 result = *(__n128 *)(*a1 + 16 * a2);
    *(_OWORD *)(*a1 + 16 * a2) = *(_OWORD *)(*a1 + 16 * a3);
    *(__n128 *)(v3 + 16 * a3) = result;
    uint64_t v5 = *a1;
    *(void *)(*(void *)(*a1 + 16 * a2) + 8) = a2;
    *(void *)(*(void *)(v5 + 16 * a3) + 8) = a3;
  }
  return result;
}

void cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::downheap(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[4];
  if (v2 > a2)
  {
    do
    {
      unint64_t v4 = (2 * a2) | 1;
      uint64_t v5 = *a1;
      float v6 = **(float **)(*a1 + 16 * a2);
      if (v4 >= v2)
      {
        unint64_t v7 = a2;
      }
      else
      {
        unint64_t v7 = a2;
        if (**(float **)(v5 + 16 * v4) > v6)
        {
          unint64_t v7 = (2 * a2) | 1;
          float v6 = **(float **)(v5 + 16 * v4);
        }
      }
      unint64_t v8 = 2 * a2 + 2;
      if (v8 < v2 && **(float **)(v5 + 16 * v8) > v6) {
        unint64_t v7 = 2 * a2 + 2;
      }
      if (v7 == a2) {
        break;
      }
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v7);
      unint64_t v2 = a1[4];
      a2 = v7;
    }
    while (v7 < v2);
  }
}

void cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    do
    {
      unint64_t v3 = a2 - 1;
      unint64_t v4 = (unint64_t)(a2 - 1) >> 1;
      if (**(float **)(*a1 + 16 * a2) <= **(float **)(*a1 + 16 * v4)) {
        break;
      }
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, (unint64_t)(a2 - 1) >> 1);
      a2 = v4;
    }
    while (v3 > 1);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  unint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 39);
  if (v3)
  {
    *((void *)this + 40) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }
  unint64_t v8 = (void **)((char *)this + 256);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v5 = (void *)*((void *)this + 29);
  if (v5)
  {
    *((void *)this + 30) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 26);
  if (v6) {
    operator delete(v6);
  }
  cv3d::cv::gess::isochart::IsoMap::~IsoMap((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120));
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  unint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 1);
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::emplace_back<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    std::deque<cv3d::cv::gess::isochart::ParamTask>::__add_back_capacity(a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = *(void *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
  }
  std::construct_at[abi:ne180100]<cv3d::cv::gess::isochart::ParamTask,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>,cv3d::cv::gess::isochart::ParamTask*>(v10, a2, a3);
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5] + 1;
  a1[5] = v12;
  unint64_t v13 = v11 + v12;
  uint64_t v14 = a1[1];
  unint64_t v15 = (void *)(v14 + 8 * (v13 / 0xAA));
  uint64_t v16 = *v15 + 24 * (v13 % 0xAA);
  if (a1[2] == v14) {
    uint64_t v16 = 0;
  }
  if (v16 == *v15) {
    uint64_t v16 = *(v15 - 1) + 4080;
  }
  return v16 - 24;
}

void std::deque<cv3d::cv::gess::isochart::ParamTask>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFF0uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  unsigned int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24F4FBC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<cv3d::cv::gess::isochart::ParamTask,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>,cv3d::cv::gess::isochart::ParamTask*>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a3 + 8) & **(void **)a3;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  BOOL v7 = v6 != 0;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 16) = v7;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *(unsigned char *)(a1 + 16) = v7;
  }
  return a1;
}

void std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0 const&,unsigned long &,void,void>()
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>(uint64_t *a1)
{
  long long v31 = (const void **)a1;
  uint64_t v1 = std::__thread_local_data();
  unint64_t v2 = *v31;
  *long long v31 = 0;
  pthread_setspecific(v1->__key_, v2);
  BOOL v3 = v31;
  uint64_t v4 = (uint64_t)v31[1];
  unint64_t v5 = (unint64_t)v31[5];
  pthread_set_qos_class_self_np(*(qos_class_t *)v31[4], 0);
  unint64_t v6 = v5 >> 6;
  do
  {
    uint64_t v7 = *(void *)(v4 + 40);
    if (v7)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7)) {
        break;
      }
    }
    long long v38 = 0uLL;
    char v39 = 0;
    std::mutex::lock((std::mutex *)(v4 + 240));
    uint64_t v8 = v3[2];
    if (v8[5])
    {
      uint64_t v9 = v8[1];
      unint64_t v10 = v8[4];
      uint64_t v11 = *(void *)(v9 + 8 * (v10 / 0xAA));
      unint64_t v12 = v10 % 0xAA;
      uint64_t v13 = (uint64_t *)(v11 + 24 * (v10 % 0xAA));
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = (std::__shared_weak_count *)*((void *)&v38 + 1);
      *(void *)&long long v38 = v15;
      *((void *)&v38 + 1) = v14;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      char v39 = *(unsigned char *)(v11 + 24 * v12 + 16);
      std::deque<cv3d::cv::gess::isochart::ParamTask>::pop_front(v3[2]);
      *(void *)(*(void *)v3[3] + 8 * v6) &= ~(1 << v5);
    }
    std::mutex::unlock((std::mutex *)(v4 + 240));
    if ((void)v38)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      memset(__p, 0, sizeof(__p));
      uint64_t v17 = (std::__shared_weak_count *)*((void *)&v38 + 1);
      long long v33 = v38;
      if (*((void *)&v38 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int v18 = cv3d::cv::gess::isochart::IsoChart::DoParameterize(v4, (uint64_t ***)&v33, v39, &v35, (uint64_t)__p);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      uint64_t v19 = *(void *)(v4 + 40);
      if (v19 && ((*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19) & 1) != 0)
      {
        if (__p[0]) {
          operator delete(__p[0]);
        }
        __p[0] = &v35;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_36;
      }
      if (v18)
      {
        std::mutex::lock((std::mutex *)(v4 + 240));
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100]((uint64_t *)(v4 + 184), &v38);
      }
      else
      {
        std::mutex::lock((std::mutex *)(v4 + 240));
        uint64_t v25 = v35;
        if (v36 != v35)
        {
          uint64_t v26 = 0;
          unint64_t v27 = 0;
          do
          {
            uint64_t v28 = v3[2];
            v32[0] = (char *)__p[0] + 8 * (v27 >> 6);
            v32[1] = 1 << v27;
            std::deque<cv3d::cv::gess::isochart::ParamTask>::emplace_back<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>>(v28, (uint64_t *)(v25 + v26), (uint64_t)v32);
            ++v27;
            uint64_t v25 = v35;
            v26 += 16;
          }
          while (v27 < (v36 - v35) >> 4);
        }
      }
      std::mutex::unlock((std::mutex *)(v4 + 240));
      if (__p[0]) {
        operator delete(__p[0]);
      }
      __p[0] = &v35;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    else
    {
      uint64_t v35 = 100;
      std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000l>>((unint64_t *)&v35);
      std::mutex::lock((std::mutex *)(v4 + 240));
      *(void *)(*(void *)v3[3] + 8 * v6) |= 1 << v5;
      std::mutex::unlock((std::mutex *)(v4 + 240));
      std::mutex::lock((std::mutex *)(v4 + 240));
      int64_t v20 = (uint64_t *)v3[3];
      uint64_t v21 = v20[1];
      if (!v21) {
        goto LABEL_26;
      }
      unint64_t v22 = 0;
      uint64_t v23 = *v20;
      char v24 = 1;
      do
      {
        v24 &= *(void *)(v23 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22;
        ++v22;
      }
      while (v21 != v22);
      if (v24)
      {
LABEL_26:
        if (!*((void *)v3[2] + 5))
        {
          std::mutex::unlock((std::mutex *)(v4 + 240));
LABEL_36:
          char v29 = 0;
          goto LABEL_37;
        }
      }
      std::mutex::unlock((std::mutex *)(v4 + 240));
    }
    char v29 = 1;
LABEL_37:
    if (*((void *)&v38 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
    }
  }
  while ((v29 & 1) != 0);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>::~unique_ptr[abi:ne180100]((uint64_t **)&v31);
  return 0;
}

void sub_24F4FC164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x25335EA10](v2, 0x1030C408CF434AALL);
  }
  return a1;
}

void std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000l>>(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if ((uint64_t)*a1 >= 1)
  {
    if (v1 == 0x8637BD057A0) {
      int v2 = 0;
    }
    else {
      int v2 = -127;
    }
    if (v1 > 0x8637BD057A0) {
      int v2 = 1;
    }
    if (v1 < 0x8637BD057A0) {
      int v2 = -1;
    }
    BOOL v3 = v2 >= 0 || v2 == -127;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4 = 1000000 * v1;
    if (v3) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4 = 0x7FFFFFFFFFFFFFFFLL;
    }
    __ns.__rep_ = v4;
    std::this_thread::sleep_for (&__ns);
  }
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA) + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;

  return std::deque<cv3d::cv::gess::isochart::ParamTask>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0xAA) {
    a2 = 1;
  }
  if (v2 < 0x154) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

uint64_t std::__split_buffer<std::thread>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      unint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *int v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return std::__split_buffer<int *>::~__split_buffer((uint64_t)a1);
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,false>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
void sub_24F4FD620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a2, a3, a4, a6);
  unint64_t v13 = *a5;
  unint64_t v14 = (uint64_t)(*(void *)(*a5 + 160) - *(void *)(*a5 + 152)) >> 2;
  unint64_t v15 = *a4;
  uint64_t v16 = *(void *)(*a4 + 160) - *(void *)(*a4 + 152);
  if (v14 >= v16 >> 2)
  {
    if (v14 != v16 >> 2) {
      return result;
    }
    uint64_t v33 = *a6;
    unint64_t v46 = *a5;
    unsigned int v34 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v33, &v46);
    uint64_t v35 = *a6;
    unint64_t v45 = *a4;
    __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v35, &v45);
    if (v34 >= *(_DWORD *)result) {
      return result;
    }
    unint64_t v15 = *a4;
    unint64_t v13 = *a5;
  }
  *a4 = v13;
  *a5 = v15;
  unint64_t v17 = a4[1];
  a4[1] = a5[1];
  a5[1] = v17;
  unint64_t v18 = *a4;
  unint64_t v19 = (uint64_t)(*(void *)(*a4 + 160) - *(void *)(*a4 + 152)) >> 2;
  unint64_t v20 = *a3;
  uint64_t v21 = *(void *)(*a3 + 160) - *(void *)(*a3 + 152);
  if (v19 >= v21 >> 2)
  {
    if (v19 != v21 >> 2) {
      return result;
    }
    uint64_t v36 = *a6;
    unint64_t v46 = *a4;
    unsigned int v37 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v36, &v46);
    uint64_t v38 = *a6;
    unint64_t v45 = *a3;
    __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v38, &v45);
    if (v37 >= *(_DWORD *)result) {
      return result;
    }
    unint64_t v20 = *a3;
    unint64_t v18 = *a4;
  }
  *a3 = v18;
  *a4 = v20;
  unint64_t v22 = a3[1];
  a3[1] = a4[1];
  a4[1] = v22;
  unint64_t v23 = *a3;
  unint64_t v24 = (uint64_t)(*(void *)(*a3 + 160) - *(void *)(*a3 + 152)) >> 2;
  unint64_t v25 = *a2;
  uint64_t v26 = *(void *)(*a2 + 160) - *(void *)(*a2 + 152);
  if (v24 >= v26 >> 2)
  {
    if (v24 != v26 >> 2) {
      return result;
    }
    uint64_t v39 = *a6;
    unint64_t v46 = *a3;
    unsigned int v40 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v39, &v46);
    uint64_t v41 = *a6;
    unint64_t v45 = *a2;
    __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v41, &v45);
    if (v40 >= *(_DWORD *)result) {
      return result;
    }
    unint64_t v25 = *a2;
    unint64_t v23 = *a3;
  }
  *a2 = v23;
  *a3 = v25;
  unint64_t v27 = a2[1];
  a2[1] = a3[1];
  a3[1] = v27;
  unint64_t v28 = *a2;
  unint64_t v29 = (uint64_t)(*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 2;
  unint64_t v30 = *a1;
  uint64_t v31 = *(void *)(*a1 + 160) - *(void *)(*a1 + 152);
  if (v29 < v31 >> 2)
  {
LABEL_5:
    *a1 = v28;
    *a2 = v30;
    unint64_t v32 = a1[1];
    a1[1] = a2[1];
    a2[1] = v32;
    return result;
  }
  if (v29 == v31 >> 2)
  {
    uint64_t v42 = *a6;
    unint64_t v46 = *a2;
    unsigned int v43 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v42, &v46);
    uint64_t v44 = *a6;
    unint64_t v45 = *a1;
    __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v44, &v45);
    if (v43 < *(_DWORD *)result)
    {
      unint64_t v30 = *a1;
      unint64_t v28 = *a2;
      goto LABEL_5;
    }
  }
  return result;
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(unint64_t *result, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v7 = result;
  unint64_t v8 = *a2;
  unint64_t v9 = (uint64_t)(*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 2;
  uint64_t v10 = *(void *)(*result + 160) - *(void *)(*result + 152);
  if (v9 >= v10 >> 2)
  {
    if (v9 != v10 >> 2) {
      goto LABEL_6;
    }
    uint64_t v11 = *a4;
    unint64_t v45 = *a2;
    unsigned int v12 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v11, &v45);
    uint64_t v13 = *a4;
    unint64_t v44 = *v7;
    __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v13, &v44);
    unint64_t v8 = *a2;
    unint64_t v9 = (uint64_t)(*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 2;
    if (v12 >= *(_DWORD *)result)
    {
LABEL_6:
      unint64_t v18 = *a3;
      unint64_t v19 = (uint64_t)(*(void *)(*a3 + 160) - *(void *)(*a3 + 152)) >> 2;
      if (v19 >= v9)
      {
        if (v19 != v9) {
          return result;
        }
        uint64_t v32 = *a4;
        unint64_t v45 = *a3;
        unsigned int v33 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v32, &v45);
        uint64_t v34 = *a4;
        unint64_t v44 = *a2;
        __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v34, &v44);
        if (v33 >= *(_DWORD *)result) {
          return result;
        }
        unint64_t v8 = *a2;
        unint64_t v18 = *a3;
      }
      *a2 = v18;
      *a3 = v8;
      unint64_t v20 = a2[1];
      a2[1] = a3[1];
      a3[1] = v20;
      unint64_t v21 = *a2;
      unint64_t v22 = (uint64_t)(*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 2;
      unint64_t v23 = *v7;
      uint64_t v24 = *(void *)(*v7 + 160) - *(void *)(*v7 + 152);
      if (v22 >= v24 >> 2)
      {
        if (v22 != v24 >> 2) {
          return result;
        }
        uint64_t v25 = *a4;
        unint64_t v45 = *a2;
        unsigned int v26 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v25, &v45);
        uint64_t v27 = *a4;
        unint64_t v44 = *v7;
        __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v27, &v44);
        if (v26 >= *(_DWORD *)result) {
          return result;
        }
        unint64_t v23 = *v7;
        unint64_t v21 = *a2;
      }
      *unint64_t v7 = v21;
      *a2 = v23;
      unint64_t v28 = v7[1];
      v7[1] = a2[1];
      a2[1] = v28;
      return result;
    }
  }
  unint64_t v14 = *a3;
  unint64_t v15 = (uint64_t)(*(void *)(*a3 + 160) - *(void *)(*a3 + 152)) >> 2;
  if (v15 < v9)
  {
LABEL_5:
    unint64_t v16 = *v7;
    *unint64_t v7 = v14;
    *a3 = v16;
    unint64_t v17 = v7[1];
    v7[1] = a3[1];
LABEL_24:
    a3[1] = v17;
    return result;
  }
  if (v15 == v9)
  {
    uint64_t v29 = *a4;
    unint64_t v45 = *a3;
    unsigned int v30 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v29, &v45);
    uint64_t v31 = *a4;
    unint64_t v44 = *a2;
    __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v31, &v44);
    if (v30 < *(_DWORD *)result)
    {
      unint64_t v14 = *a3;
      goto LABEL_5;
    }
    unint64_t v8 = *a2;
  }
  unint64_t v35 = *v7;
  *unint64_t v7 = v8;
  *a2 = v35;
  unint64_t v36 = v7[1];
  v7[1] = a2[1];
  a2[1] = v36;
  unint64_t v37 = *a3;
  unint64_t v38 = (uint64_t)(*(void *)(*a3 + 160) - *(void *)(*a3 + 152)) >> 2;
  unint64_t v39 = *a2;
  uint64_t v40 = *(void *)(*a2 + 160) - *(void *)(*a2 + 152);
  if (v38 < v40 >> 2)
  {
LABEL_23:
    *a2 = v37;
    *a3 = v39;
    unint64_t v17 = a2[1];
    a2[1] = a3[1];
    goto LABEL_24;
  }
  if (v38 == v40 >> 2)
  {
    uint64_t v41 = *a4;
    unint64_t v45 = *a3;
    unsigned int v42 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v41, &v45);
    uint64_t v43 = *a4;
    unint64_t v44 = *a2;
    __n128 result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v43, &v44);
    if (v42 < *(_DWORD *)result)
    {
      unint64_t v39 = *a2;
      unint64_t v37 = *a3;
      goto LABEL_23;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v8 = *(a2 - 2);
      unint64_t v9 = (uint64_t)(*(void *)(v8 + 160) - *(void *)(v8 + 152)) >> 2;
      unint64_t v10 = *a1;
      uint64_t v11 = *(void *)(*a1 + 160) - *(void *)(*a1 + 152);
      if (v9 < v11 >> 2) {
        goto LABEL_3;
      }
      if (v9 != v11 >> 2) {
        return result;
      }
      uint64_t v35 = *a3;
      unint64_t v40 = *(a2 - 2);
      unsigned int v36 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v35, &v40);
      uint64_t v37 = *a3;
      unint64_t v39 = *a1;
      if (v36 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v37, &v39))
      {
        unint64_t v10 = *a1;
        unint64_t v8 = *(v4 - 2);
LABEL_3:
        *a1 = v8;
        *(v4 - 2) = v10;
        unint64_t v12 = a1[1];
        a1[1] = *(v4 - 1);
        *(v4 - 1) = v12;
        return 1;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v13 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a1 + 4, a3);
      unint64_t v14 = a1 + 6;
      if (a1 + 6 == v4) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      unint64_t v38 = v4;
      break;
  }
  while (1)
  {
    unint64_t v17 = *v14;
    unint64_t v18 = (uint64_t)(*(void *)(*v14 + 160) - *(void *)(*v14 + 152)) >> 2;
    uint64_t v19 = *(void *)(*v13 + 160) - *(void *)(*v13 + 152);
    if (v18 < v19 >> 2) {
      break;
    }
    if (v18 == v19 >> 2)
    {
      uint64_t v30 = *a3;
      unint64_t v40 = *v14;
      unsigned int v31 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v30, &v40);
      uint64_t v32 = *a3;
      unint64_t v39 = *v13;
      if (v31 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v32, &v39))
      {
        unint64_t v17 = *v14;
        break;
      }
    }
LABEL_23:
    uint64_t v13 = v14;
    v15 += 16;
    v14 += 2;
    if (v14 == v4) {
      return 1;
    }
  }
  unint64_t v20 = v14[1];
  uint64_t v21 = v15;
  *unint64_t v14 = 0;
  v14[1] = 0;
  while (1)
  {
    unint64_t v22 = (char *)a1 + v21;
    long long v23 = *(_OWORD *)((char *)a1 + v21 + 32);
    *((void *)v22 + 4) = 0;
    *((void *)v22 + 5) = 0;
    uint64_t v24 = *(std::__shared_weak_count **)((char *)a1 + v21 + 56);
    *((_OWORD *)v22 + 3) = v23;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v21 == -32)
    {
      unsigned int v33 = a1;
      goto LABEL_20;
    }
    unint64_t v25 = (uint64_t)(*(void *)(v17 + 160) - *(void *)(v17 + 152)) >> 2;
    uint64_t v26 = *(void *)(*(unint64_t *)((char *)a1 + v21 + 16) + 160)
        - *(void *)(*(unint64_t *)((char *)a1 + v21 + 16) + 152);
    if (v25 >= v26 >> 2)
    {
      if (v25 != v26 >> 2) {
        break;
      }
      uint64_t v27 = *a3;
      unint64_t v40 = v17;
      unsigned int v28 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v27, &v40);
      uint64_t v29 = *a3;
      unint64_t v39 = *(unint64_t *)((char *)a1 + v21 + 16);
      if (v28 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v29, &v39)) {
        break;
      }
    }
    v21 -= 16;
  }
  unsigned int v33 = (unint64_t *)((char *)a1 + v21 + 32);
LABEL_20:
  uint64_t v34 = (std::__shared_weak_count *)v33[1];
  *unsigned int v33 = v17;
  v33[1] = v20;
  int v4 = v38;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (++v16 != 8) {
    goto LABEL_23;
  }
  return v14 + 2 == v38;
}

void sub_24F4FDEF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      unint64_t v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    unint64_t v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a2, a3, a5);
  unint64_t v11 = *a4;
  unint64_t v12 = (uint64_t)(*(void *)(*a4 + 160) - *(void *)(*a4 + 152)) >> 2;
  unint64_t v13 = *a3;
  uint64_t v14 = *(void *)(*a3 + 160) - *(void *)(*a3 + 152);
  if (v12 >= v14 >> 2)
  {
    if (v12 != v14 >> 2) {
      return result;
    }
    uint64_t v29 = *a5;
    unint64_t v36 = *a4;
    unsigned int v30 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v29, &v36);
    uint64_t v31 = *a5;
    unint64_t v35 = *a3;
    BOOL result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v31, &v35);
    if (v30 >= *(_DWORD *)result) {
      return result;
    }
    unint64_t v13 = *a3;
    unint64_t v11 = *a4;
  }
  *a3 = v11;
  *a4 = v13;
  unint64_t v15 = a3[1];
  a3[1] = a4[1];
  a4[1] = v15;
  unint64_t v16 = *a3;
  unint64_t v17 = (uint64_t)(*(void *)(*a3 + 160) - *(void *)(*a3 + 152)) >> 2;
  unint64_t v18 = *a2;
  uint64_t v19 = *(void *)(*a2 + 160) - *(void *)(*a2 + 152);
  if (v17 >= v19 >> 2)
  {
    if (v17 != v19 >> 2) {
      return result;
    }
    uint64_t v32 = *a5;
    unint64_t v36 = *a3;
    unsigned int v33 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v32, &v36);
    uint64_t v34 = *a5;
    unint64_t v35 = *a2;
    BOOL result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v34, &v35);
    if (v33 >= *(_DWORD *)result) {
      return result;
    }
    unint64_t v18 = *a2;
    unint64_t v16 = *a3;
  }
  *a2 = v16;
  *a3 = v18;
  unint64_t v20 = a2[1];
  a2[1] = a3[1];
  a3[1] = v20;
  unint64_t v21 = *a2;
  unint64_t v22 = (uint64_t)(*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 2;
  unint64_t v23 = *a1;
  uint64_t v24 = *(void *)(*a1 + 160) - *(void *)(*a1 + 152);
  if (v22 < v24 >> 2)
  {
LABEL_7:
    *a1 = v21;
    *a2 = v23;
    unint64_t v28 = a1[1];
    a1[1] = a2[1];
    a2[1] = v28;
    return result;
  }
  if (v22 == v24 >> 2)
  {
    uint64_t v25 = *a5;
    unint64_t v36 = *a2;
    unsigned int v26 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v25, &v36);
    uint64_t v27 = *a5;
    unint64_t v35 = *a1;
    BOOL result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v27, &v35);
    if (v26 < *(_DWORD *)result)
    {
      unint64_t v23 = *a1;
      unint64_t v21 = *a2;
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<float>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        }
        else
        {
          long long v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v11 = a3[23];
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *((void *)a3 + 1);
        }
        if (size != v11) {
          goto LABEL_22;
        }
        if (v12 >= 0) {
          unint64_t v13 = a3;
        }
        else {
          unint64_t v13 = *(unsigned __int8 **)a3;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            uint64_t v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15) {
                goto LABEL_29;
              }
            }
LABEL_22:
            BOOL v16 = 0;
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_23:
            }
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            BOOL v16 = *(void *)(*v3 + 32) == (void)cv3d::cv::gess::util::os::GessTypeID<float>;
            if (v9 < 0) {
              goto LABEL_23;
            }
          }
          if (v16) {
            return v6;
          }
          goto LABEL_25;
        }
        unint64_t v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_29;
        }
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      uint64_t v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<float>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<float>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<float>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  BOOL v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<float>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  BOOL v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

void *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    BOOL v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F4FE5B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        }
        else
        {
          long long v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v11 = a3[23];
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *((void *)a3 + 1);
        }
        if (size != v11) {
          goto LABEL_22;
        }
        if (v12 >= 0) {
          unint64_t v13 = a3;
        }
        else {
          unint64_t v13 = *(unsigned __int8 **)a3;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            uint64_t v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15) {
                goto LABEL_29;
              }
            }
LABEL_22:
            BOOL v16 = 0;
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_23:
            }
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            BOOL v16 = *(void *)(*v3 + 32) == (void)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>;
            if (v9 < 0) {
              goto LABEL_23;
            }
          }
          if (v16) {
            return v6;
          }
          goto LABEL_25;
        }
        unint64_t v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_29;
        }
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      uint64_t v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>;
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::__map_value_compare<cv3d::cv::gess::mesh::TriMesh *,std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::less<cv3d::cv::gess::mesh::TriMesh *>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::TriMesh *,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::TriMesh *&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  BOOL v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  BOOL v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

uint64_t std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

float std::deque<float>::push_back(void *a1, float *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<float>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  float result = *a2;
  *(float *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void std::deque<float>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24F4FEC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double cv3d::cv::gess::isochart::IsoMap::IsoMap(cv3d::cv::gess::isochart::IsoMap *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void cv3d::cv::gess::isochart::IsoMap::~IsoMap(cv3d::cv::gess::isochart::IsoMap *this)
{
}

double cv3d::cv::gess::isochart::IsoMap::Clear(cv3d::cv::gess::isochart::IsoMap *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    MEMORY[0x25335E9F0](v2, 0x1000C8052888210);
    *((void *)this + 4) = 0;
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    MEMORY[0x25335E9F0](v3, 0x1000C8052888210);
    *((void *)this + 5) = 0;
  }
  uint64_t v4 = *((void *)this + 6);
  if (v4)
  {
    MEMORY[0x25335E9F0](v4, 0x1000C8052888210);
    *((void *)this + 6) = 0;
  }
  *((_DWORD *)this + 14) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

float *cv3d::cv::gess::isochart::IsoMap::Init(cv3d::cv::gess::isochart::IsoMap *this, unint64_t a2, float *a3)
{
  cv3d::cv::gess::isochart::IsoMap::Clear(this);
  if (!a3) {
    cv3d::cv::gess::isochart::IsoMap::Init();
  }
  if (*((void *)this + 1)) {
    cv3d::cv::gess::isochart::IsoMap::Init();
  }
  if (*((float *)this + 14) != 0.0) {
    cv3d::cv::gess::isochart::IsoMap::Init();
  }
  if (*((void *)this + 2)) {
    cv3d::cv::gess::isochart::IsoMap::Init();
  }
  if (*((void *)this + 3)) {
    cv3d::cv::gess::isochart::IsoMap::Init();
  }
  *((void *)this + 3) = a3;
  *(void *)this = a2;
  size_t v6 = 4 * a2;
  if (a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = a3;
    do
    {
      uint64_t v9 = 0;
      do
      {
        v8[v9] = v8[v9] * v8[v9];
        ++v9;
      }
      while (a2 != v9);
      ++v7;
      unint64_t v8 = (float *)((char *)v8 + v6);
    }
    while (v7 != a2);
  }
  if (a2 >> 62) {
    size_t v10 = -1;
  }
  else {
    size_t v10 = 4 * a2;
  }
  double result = (float *)operator new[](v10, MEMORY[0x263F8C180]);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = operator new[](v10, MEMORY[0x263F8C180]);
    *((void *)this + 6) = v13;
    if (v13)
    {
      if (a2)
      {
        uint64_t v14 = 0;
        float v15 = (float)a2;
        uint64_t v16 = a3;
        do
        {
          float v17 = 0.0;
          uint64_t v18 = v16;
          unint64_t v19 = a2;
          do
          {
            float v17 = *v18 + v17;
            uint64_t v18 = (float *)((char *)v18 + v6);
            --v19;
          }
          while (v19);
          v12[v14++] = v17 / v15;
          ++v16;
        }
        while (v14 != a2);
        memcpy(v13, v12, 4 * a2);
        uint64_t v20 = 0;
        uint64_t v21 = a3;
        do
        {
          uint64_t v22 = 0;
          do
          {
            v21[v22] = v21[v22] - v12[v22];
            ++v22;
          }
          while (a2 != v22);
          ++v20;
          uint64_t v21 = (float *)((char *)v21 + v6);
        }
        while (v20 != a2);
        uint64_t v23 = 0;
        uint64_t v24 = a3;
        do
        {
          uint64_t v25 = 0;
          float v26 = 0.0;
          do
            float v26 = v24[v25++] + v26;
          while (a2 != v25);
          v12[v23++] = v26 / v15;
          uint64_t v24 = (float *)((char *)v24 + v6);
        }
        while (v23 != a2);
        uint64_t v27 = 0;
        uint64_t v28 = a3;
        do
        {
          uint64_t v29 = 0;
          float v30 = v12[v27];
          do
          {
            v28[v29] = v28[v29] - v30;
            ++v29;
          }
          while (a2 != v29);
          ++v27;
          uint64_t v28 = (float *)((char *)v28 + v6);
        }
        while (v27 != a2);
        uint64_t v31 = 0;
        do
        {
          uint64_t v32 = 0;
          do
          {
            a3[v32] = a3[v32] * -0.5;
            ++v32;
          }
          while (a2 != v32);
          ++v31;
          a3 = (float *)((char *)a3 + v6);
        }
        while (v31 != a2);
      }
      else
      {
        memcpy(v13, v12, v6);
      }
    }
    JUMPOUT(0x25335E9F0);
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen(cv3d::cv::gess::isochart::IsoMap *this, unint64_t a2, unint64_t *a3)
{
  if (!*((void *)this + 3)) {
    cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen();
  }
  if (!*((void *)this + 6)) {
    cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen();
  }
  unint64_t v5 = *(void *)this;
  if (*(void *)this < a2) {
    cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen();
  }
  if (v5 >> 61) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 8 * v5;
  }
  unint64_t v8 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  uint64_t v9 = (double *)operator new[](v7, MEMORY[0x263F8C180]);
  if ((v5 * v5) >> 61) {
    size_t v10 = -1;
  }
  else {
    size_t v10 = 8 * v5 * v5;
  }
  uint64_t v11 = operator new[](v10, v8);
  uint64_t v12 = v11;
  if (!v9) {
    goto LABEL_44;
  }
  if (v11)
  {
    if (a2 >> 62) {
      size_t v13 = -1;
    }
    else {
      size_t v13 = 4 * a2;
    }
    uint64_t v14 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    float v15 = operator new[](v13, MEMORY[0x263F8C180]);
    *((void *)this + 4) = v15;
    if ((v5 * a2) >> 62) {
      size_t v16 = -1;
    }
    else {
      size_t v16 = 4 * v5 * a2;
    }
    float v17 = operator new[](v16, v14);
    *((void *)this + 5) = v17;
    if (!v15 || !v17)
    {
LABEL_45:
      MEMORY[0x25335E9F0](v12, 0x1000C8000313F17);
LABEL_46:
      if (!v9) {
        return;
      }
      goto LABEL_47;
    }
    std::vector<double>::vector(__p, v5 * v5);
    unint64_t v18 = *(void *)this;
    unint64_t v19 = (double *)__p[0];
    if (v18 * v18)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *((void *)this + 3);
      do
      {
        v19[v20] = *(float *)(v21 + 4 * v20);
        ++v20;
      }
      while (v18 * v18 > v20);
    }
    if (cv3d::cv::gess::isochart::CSymmetricMatrix<double>::GetEigen(v18, v19, (uint64_t)v9, v12, a2, 0.000000999999997))
    {
      if (a2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *((void *)this + 4);
        do
        {
          float v24 = v9[v22];
          *(float *)(v23 + 4 * v22++) = v24;
        }
        while (a2 > v22);
      }
      unint64_t v25 = *(void *)this * a2;
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = *((void *)this + 5);
        do
        {
          float v28 = *(double *)&v12[v26];
          *(float *)(v27 + 4 * v26++) = v28;
        }
        while (v25 > v26);
      }
      *((_DWORD *)this + 14) = 0;
      *a3 = 0;
      uint64_t v29 = 0;
      if (a2)
      {
        uint64_t v30 = *((void *)this + 4);
        float v31 = 0.0;
        do
        {
          float v32 = *(float *)(v30 + 4 * v29);
          if (v32 < 0.00000001) {
            break;
          }
          if (v29)
          {
            if (v32 != 0.0 && v32 < (float)(*(float *)(v30 + 4 * v29 - 4) * 0.00000001)) {
              break;
            }
          }
          float v31 = v32 + v31;
          *((float *)this + 14) = v31;
          *a3 = ++v29;
        }
        while (a2 != v29);
        if (a2 == 2)
        {
          uint64_t v29 = 2;
          *a3 = 2;
        }
      }
      *((void *)this + 1) = v29;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
LABEL_44:
    if (!v12) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_47:
  MEMORY[0x25335E9F0](v9, 0x1000C8000313F17);
}

void sub_24F4FF268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25335E9F0](v12, 0x1000C8000313F17);
  MEMORY[0x25335E9F0](v11, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::CSymmetricMatrix<double>::GetEigen(unint64_t a1, const void *a2, uint64_t a3, void *a4, uint64_t a5, double a6)
{
  uint64_t v6 = 0;
  if (a2 && a3 && a4 && a5 - 1 < a1)
  {
    unint64_t v13 = (a1 + 3) * a1;
    if (v13 >> 61) {
      size_t v14 = -1;
    }
    else {
      size_t v14 = 8 * v13;
    }
    float v15 = (char *)operator new[](v14, MEMORY[0x263F8C180]);
    if (v15)
    {
      size_t v16 = v15;
      uint64_t v17 = 8 * a1;
      if (a1 >> 61) {
        size_t v18 = -1;
      }
      else {
        size_t v18 = 8 * a1;
      }
      unint64_t v19 = (uint64_t *)operator new[](v18, MEMORY[0x263F8C180]);
      uint64_t v6 = v19 != 0;
      if (v19)
      {
        uint64_t v20 = v19;
        int64_t v161 = a4;
        uint64_t v162 = a5;
        uint64_t v21 = v16;
        uint64_t v22 = &v16[8 * a1 * a1];
        uint64_t v23 = &v22[8 * a1];
        float v24 = &v23[8 * a1];
        bzero(v22, 8 * a1);
        memcpy(v21, a2, 8 * a1 * a1);
        uint64_t v25 = 0;
        uint64_t v163 = v21;
        do
        {
          v20[v25++] = (uint64_t)v21;
          v21 += v17;
        }
        while (a1 != v25);
        unint64_t v26 = a1 - 1;
        memcpy(&v22[8 * a1], (const void *)v20[a1 - 1], 8 * a1);
        std::string __p = 0;
        std::vector<double>::vector(v167, a1 * a1, &__p);
        if (a1 != 1)
        {
          do
          {
            uint64_t v27 = 0;
            double v28 = 0.0;
            do
              double v28 = v28 + fabs(*(double *)&v23[8 * v27++]);
            while (v26 != v27);
            if (v28 >= a6)
            {
              if (COERCE__INT64(fabs(1.0 / v28)) > 0x7FEFFFFFFFFFFFFFLL) {
                __assert_rtn("VectorScale", "SymmetricMatrix.hpp", 37, "isfinite(double(scale))");
              }
              uint64_t v38 = 0;
              do
              {
                *(double *)&v23[8 * v38] = 1.0 / v28 * *(double *)&v23[8 * v38];
                ++v38;
              }
              while (v26 != v38);
              uint64_t v39 = 0;
              double v40 = 0.0;
              do
              {
                double v40 = v40 + *(double *)&v23[8 * v39] * *(double *)&v23[8 * v39];
                ++v39;
              }
              while (v26 != v39);
              unint64_t v29 = v26 - 1;
              double v41 = sqrt(v40);
              if (v40 < 0.0) {
                double v41 = 0.0;
              }
              if (*(double *)&v23[8 * v26 - 8] >= 0.0) {
                double v42 = v41;
              }
              else {
                double v42 = -v41;
              }
              *(double *)&v22[8 * v26] = -(v28 * v42);
              double v43 = *(double *)&v23[8 * v29];
              *(double *)&v23[8 * v29] = v42 + v43;
              bzero(&v23[8 * a1], 8 * v26);
              uint64_t v164 = 0;
              std::vector<double>::vector(&__p, a1, &v164);
              uint64_t v44 = 0;
              double v37 = v40 + v43 * v42;
              uint64_t v45 = (double *)__p;
              do
              {
                uint64_t v46 = v20[v44];
                *(void *)(v46 + 8 * v26) = *(void *)&v23[8 * v44];
                double v47 = *(double *)(v46 + 8 * v44) * *(double *)&v23[8 * v44] - v45[v44];
                double v48 = *(double *)&v24[8 * v44];
                v45[v44] = v48 + v47 - v48 - v47;
                *(double *)&v24[8 * v44] = v48 + v47;
                if (v44)
                {
                  for (uint64_t i = 0; i != v44; ++i)
                  {
                    double v50 = *(double *)(v46 + 8 * i) * *(double *)&v23[8 * i] - v45[v44];
                    double v51 = *(double *)&v24[8 * v44];
                    v45[v44] = v51 + v50 - v51 - v50;
                    *(double *)&v24[8 * v44] = v51 + v50;
                    double v52 = *(double *)(v46 + 8 * i) * *(double *)&v23[8 * v44] - v45[i];
                    double v53 = *(double *)&v24[8 * i];
                    v45[i] = v53 + v52 - v53 - v52;
                    *(double *)&v24[8 * i] = v53 + v52;
                  }
                }
                ++v44;
              }
              while (v44 != v26);
              if (COERCE__INT64(fabs(1.0 / v37)) > 0x7FEFFFFFFFFFFFFFLL) {
                __assert_rtn("VectorScale", "SymmetricMatrix.hpp", 37, "isfinite(double(scale))");
              }
              uint64_t v54 = 0;
              do
              {
                *(double *)&v24[8 * v54] = 1.0 / v37 * *(double *)&v24[8 * v54];
                ++v54;
              }
              while (v26 != v54);
              uint64_t v55 = 0;
              double v56 = 0.0;
              do
              {
                double v56 = v56 + *(double *)&v23[8 * v55] * *(double *)&v24[8 * v55];
                ++v55;
              }
              while (v26 != v55);
              uint64_t v57 = 0;
              double v58 = -v56 / (v37 + v37);
              do
              {
                double v59 = v58 * *(double *)&v23[8 * v57] - v45[v57];
                double v60 = *(double *)&v24[8 * v57];
                v45[v57] = v60 + v59 - v60 - v59;
                *(double *)&v24[8 * v57++] = v60 + v59;
              }
              while (v26 != v57);
              unint64_t v61 = 0;
              unint64_t v62 = (double *)v167[0];
              do
              {
                unint64_t v63 = v62;
                unint64_t v64 = v61;
                do
                {
                  uint64_t v65 = v20[v64];
                  double v66 = -(*(double *)&v24[8 * v61] * *(double *)&v23[8 * v64]
                        + *(double *)&v24[8 * v64] * *(double *)&v23[8 * v61])
                      - *v63;
                  double v67 = *(double *)(v65 + 8 * v61);
                  double *v63 = v67 + v66 - v67 - v66;
                  if (fabs(v67 + v66) >= a6) {
                    double v68 = v67 + v66;
                  }
                  else {
                    double v68 = 0.0;
                  }
                  *(double *)(v65 + 8 * v61) = v68;
                  ++v64;
                  unint64_t v63 = (double *)((char *)v63 + v17);
                }
                while (v64 < v26);
                ++v61;
                unint64_t v62 = (double *)((char *)v62 + v17 + 8);
              }
              while (v61 != v26);
              uint64_t v69 = (uint64_t *)v20[v29];
              long long v70 = (void *)v20[v26];
              int64_t v71 = &v22[8 * a1];
              unint64_t v72 = v26;
              do
              {
                uint64_t v73 = *v69++;
                *(void *)int64_t v71 = v73;
                v71 += 8;
                *v70++ = 0;
                --v72;
              }
              while (v72);
              if (v45)
              {
                unint64_t v166 = v45;
                operator delete(v45);
              }
            }
            else
            {
              *(void *)&v23[8 * v26] = 0;
              unint64_t v29 = v26 - 1;
              uint64_t v30 = (uint64_t *)v20[v26 - 1];
              float v31 = (void *)v20[v26];
              float v32 = &v22[8 * a1];
              unint64_t v33 = v20;
              unint64_t v34 = v26;
              do
              {
                uint64_t v35 = *v30++;
                *(void *)float v32 = v35;
                v32 += 8;
                *v31++ = 0;
                uint64_t v36 = *v33++;
                *(void *)(v36 + 8 * v26) = 0;
                --v34;
              }
              while (v34);
              double v37 = 0.0;
            }
            *(double *)&v23[8 * v26] = v37;
            unint64_t v26 = v29;
          }
          while (v29);
          uint64_t v74 = 0;
          unint64_t v75 = (double *)v167[0];
          uint64_t v76 = 1;
          unint64_t v26 = a1 - 1;
          do
          {
            uint64_t v77 = v20[v74];
            *(void *)(a3 + 8 * v74) = *(void *)(v77 + 8 * v74);
            *(void *)(v77 + 8 * v74++) = 0x3FF0000000000000;
            if (fabs(*(double *)&v23[8 * v74]) > a6)
            {
              uint64_t v78 = 0;
              uint64_t v79 = v75;
              do
              {
                uint64_t v80 = 0;
                double v81 = 0.0;
                double v82 = 0.0;
                do
                {
                  double v83 = v81;
                  double v84 = *(double *)(v20[v80] + 8 * v78) * *(double *)(v20[v80] + 8 * v74) - v82;
                  double v81 = v81 + v84;
                  double v82 = v81 - v83 - v84;
                  ++v80;
                }
                while (v76 != v80);
                uint64_t v85 = 0;
                double v86 = -v81;
                unint64_t v87 = v79;
                do
                {
                  uint64_t v88 = v20[v85];
                  double v89 = *(double *)(v88 + 8 * v74) * v86 / *(double *)&v23[8 * v74] - *v87;
                  double v90 = *(double *)(v88 + 8 * v78);
                  *unint64_t v87 = v90 + v89 - v90 - v89;
                  *(double *)(v88 + 8 * v78) = v90 + v89;
                  ++v85;
                  unint64_t v87 = (double *)((char *)v87 + v17);
                }
                while (v76 != v85);
                ++v78;
                ++v79;
              }
              while (v78 != v76);
            }
            uint64_t v91 = 0;
            do
              *(void *)(v20[v91++] + 8 * v74) = 0;
            while (v76 != v91);
            ++v76;
          }
          while (v74 != a1 - 1);
        }
        unint64_t v92 = (void *)v20[v26];
        *(void *)(a3 + 8 * v26) = v92[v26];
        v92[v26] = 0x3FF0000000000000;
        bzero(v92, 8 * v26);
        memmove(v22, v22 + 8, 8 * v26);
        *(void *)&v22[8 * v26] = 0;
        uint64_t v164 = 0;
        std::vector<double>::vector(&__p, a1, &v164);
        unint64_t v96 = 0;
        if (a1 <= 1) {
          uint64_t v97 = 1;
        }
        else {
          uint64_t v97 = a1;
        }
        v93.n128_u64[0] = 0;
        unint64_t v98 = 1;
        v94.n128_u64[0] = -4.0;
        v95.n128_u64[0] = 0.5;
        double v99 = 0.0;
        double v100 = 0.0;
        do
        {
          if (a1 <= v98) {
            unint64_t v101 = v98;
          }
          else {
            unint64_t v101 = a1;
          }
          double v102 = *(double *)(a3 + 8 * v96);
          double v103 = fabs(v102) + fabs(*(double *)&v22[8 * v96]);
          if (v99 < v103) {
            double v99 = v103;
          }
          double v104 = v99 * a6;
          unint64_t v105 = v96 + 1;
          uint64_t v106 = (double *)__p;
          while (1)
          {
            unint64_t v107 = v96;
            while (1)
            {
              double v108 = fabs(*(double *)&v22[8 * v107]);
              if (v108 <= v104) {
                break;
              }
              if (++v107 >= a1)
              {
                unint64_t v107 = v101;
                break;
              }
            }
            if (v107 == v96) {
              break;
            }
            double v109 = *(double *)(a3 + 8 * v105);
            double v110 = v102 + v109;
            double v111 = (v102 * v109 - *(double *)&v22[8 * v96] * *(double *)&v22[8 * v96]) * -4.0 + v110 * v110;
            double v112 = sqrt(v111);
            if (v111 >= 0.0) {
              double v113 = v112;
            }
            else {
              double v113 = 0.0;
            }
            double v114 = (v110 + v113) * 0.5;
            double v115 = (v110 - v113) * 0.5;
            if (vabdd_f64(v102, v114) <= vabdd_f64(v102, v115)) {
              double v115 = v114;
            }
            unint64_t v116 = v96;
            do
            {
              double v117 = -v115 - v106[v116];
              double v118 = *(double *)(a3 + 8 * v116);
              v106[v116] = v118 + v117 - v118 - v117;
              *(double *)(a3 + 8 * v116++) = v118 + v117;
            }
            while (v116 < a1);
            double v119 = *(double *)(a3 + 8 * v107);
            unint64_t v120 = v107 - 1;
            double v121 = *(double *)&v22[8 * v107 - 8];
            double v122 = sqrt(v121 * v121 + v119 * v119);
            double v123 = v119 / v122;
            double v124 = v121 / v122;
            double v125 = *(double *)(a3 + 8 * (v107 - 1));
            double v126 = v119 * (v123 * v123) + v124 * v124 * v125 + v123 * (v124 + v124) * v121;
            double v127 = v125 * (v123 * v123);
            double v128 = (v125 - v119) * (v124 * v123);
            *(double *)(a3 + 8 * v107) = v126;
            float v129 = v20;
            uint64_t v130 = v97;
            do
            {
              uint64_t v131 = *v129++;
              double v132 = *(double *)(v131 + 8 * v107);
              double v133 = *(double *)(v131 + 8 * v120);
              *(double *)(v131 + 8 * v107) = v123 * v132 + v124 * v133;
              *(double *)(v131 + 8 * v120) = v132 * -v124 + v123 * v133;
              --v130;
            }
            while (v130);
            double v102 = v127 + v124 * v124 * v119 + -(v123 * (v124 + v124)) * v121;
            double v134 = v128 + (v123 * v123 - v124 * v124) * v121;
            if (v107 > v105 && v120 > v96)
            {
              double v135 = v124 * *(double *)&v22[8 * v107 - 16];
              do
              {
                unint64_t v136 = v120 - 1;
                double v137 = v123 * *(double *)&v22[8 * v120 - 8];
                *(double *)&v22[8 * v120 - 8] = v137;
                double v138 = sqrt(v135 * v135 + v134 * v134);
                double v123 = v134 / v138;
                double v139 = v135 / v138;
                *(double *)&v22[8 * v120] = v135 * v139 + v123 * v134;
                double v140 = v139 * v139;
                double v141 = *(double *)(a3 + 8 * (v120 - 1));
                double v142 = v123 * (v139 + v139);
                *(double *)(a3 + 8 * v120) = v102 * (v123 * v123) + v139 * v139 * v141 + v142 * v137;
                if (v120 != 1) {
                  double v135 = v139 * *(double *)&v22[8 * v120 - 16];
                }
                double v134 = v139 * v123 * (v141 - v102) + -(v140 - v123 * v123) * v137;
                double v102 = v123 * v123 * v141 + v140 * v102 - v142 * v137;
                unint64_t v143 = v20;
                uint64_t v144 = v97;
                do
                {
                  uint64_t v145 = *v143++;
                  double v146 = *(double *)(v145 + 8 * v120);
                  double v147 = *(double *)(v145 + 8 * v136);
                  *(double *)(v145 + 8 * v120) = v123 * v146 + v139 * v147;
                  *(double *)(v145 + 8 * v136) = v146 * -v139 + v123 * v147;
                  --v144;
                }
                while (v144);
                --v120;
              }
              while (v136 > v96);
            }
            double v100 = v100 + v115;
            *(double *)(a3 + 8 * v96) = v102;
            *(double *)&v22[8 * v96] = v134;
            if (v108 <= v104) {
              *(void *)&v22[8 * v107] = 0;
            }
          }
          *(double *)(a3 + 8 * v96) = v100 + v102;
          *(void *)&v22[8 * v96] = 0;
          ++v98;
          ++v96;
        }
        while (v105 != v97);
        size_t v16 = v163;
        uint64_t v6 = v6;
        uint64_t v148 = v161;
        if (v26)
        {
          unint64_t v149 = 0;
          do
          {
            unint64_t v150 = v149++;
            if (v149 < a1)
            {
              unint64_t v151 = v149;
              do
              {
                v93.n128_u64[0] = *(void *)(a3 + 8 * v151);
                v94.n128_u64[0] = *(void *)(a3 + 8 * v150);
                if (v93.n128_f64[0] > v94.n128_f64[0])
                {
                  *(void *)(a3 + 8 * v150) = v93.n128_u64[0];
                  *(void *)(a3 + 8 * v151) = v94.n128_u64[0];
                  int v152 = v20;
                  unint64_t v153 = a1;
                  do
                  {
                    uint64_t v154 = *v152++;
                    v93.n128_u64[0] = *(void *)(v154 + 8 * v150);
                    v94.n128_u64[0] = *(void *)(v154 + 8 * v151);
                    *(void *)(v154 + 8 * v150) = v94.n128_u64[0];
                    *(void *)(v154 + 8 * v151) = v93.n128_u64[0];
                    --v153;
                  }
                  while (v153);
                }
                ++v151;
              }
              while (v151 != a1);
            }
          }
          while (v149 != v26);
        }
        if (v162)
        {
          for (uint64_t j = 0; j != v162; ++j)
          {
            int v156 = v20;
            uint64_t v157 = v148;
            uint64_t v158 = v97;
            do
            {
              uint64_t v159 = *v156++;
              v93.n128_u64[0] = *(void *)(v159 + 8 * j);
              *v157++ = v93.n128_u64[0];
              --v158;
            }
            while (v158);
            uint64_t v148 = (void *)((char *)v148 + v17);
          }
        }
        if (__p)
        {
          unint64_t v166 = __p;
          operator delete(__p);
        }
        if (v167[0])
        {
          v167[1] = v167[0];
          operator delete(v167[0]);
        }
        MEMORY[0x25335E9F0](v20, 0x80C80B8603338, v93, v94, v95);
      }
      MEMORY[0x25335E9F0](v16, 0x1000C8000313F17);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_24F4FFCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x25335E9F0](v19, 0x80C80B8603338);
  MEMORY[0x25335E9F0](a13, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void *cv3d::cv::gess::isochart::IsoMap::GetPrimaryEnergyDimension(void *this, float a2, unint64_t *a3)
{
  float v5 = *((float *)this + 14);
  if (fabsf(v5) < 0.00000001)
  {
    *a3 = 0;
    return this;
  }
  if (a2 >= 1.0) {
    *a3 = *((void *)this + 1);
  }
  uint64_t v6 = (float *)*((void *)this + 4);
  float v7 = *v6;
  float v8 = *v6 + v6[1];
  if (v8 >= (float)(v5 * 0.99))
  {
    unint64_t v10 = 2;
  }
  else
  {
    unint64_t v9 = *((void *)this + 1);
    unint64_t v10 = 2;
    if (v9 <= 2) {
      unint64_t v9 = 2;
    }
    float v11 = *v6 + v6[1];
    while (v9 != v10)
    {
      float v11 = v11 + v6[v10++];
      if (v11 >= (float)(v5 * 0.99)) {
        goto LABEL_14;
      }
    }
    unint64_t v10 = v9;
  }
LABEL_14:
  *((void *)this + 2) = v10;
  unint64_t v12 = v10 - 1;
  if ((v10 - 1) >> 62) {
    size_t v13 = -1;
  }
  else {
    size_t v13 = 4 * (v10 - 1);
  }
  this = operator new[](v13, MEMORY[0x263F8C180]);
  if (this)
  {
    if (v10 == 1)
    {
      unint64_t v17 = 2;
    }
    else
    {
      uint64_t v14 = 0;
      do
      {
        float v15 = sqrtf(v7);
        if (v7 < 0.0) {
          float v15 = 0.0;
        }
        float v7 = v6[v14 + 1];
        float v16 = sqrtf(v7);
        if (v7 < 0.0) {
          float v16 = 0.0;
        }
        *((float *)this + v14++) = v15 - v16;
      }
      while (v12 != v14);
      unint64_t v17 = 2;
      if (v8 < (float)(v5 * a2) && v10 >= 3)
      {
        unint64_t v17 = 2;
        do
          float v8 = v8 + v6[v17++];
        while (v8 < (float)(v5 * a2) && v17 < v10);
      }
    }
    if (a2 >= 0.91)
    {
      unint64_t v25 = 2;
      if (v17 > 2) {
        unint64_t v25 = v17;
      }
      goto LABEL_51;
    }
    unint64_t v19 = v17 - 1;
    if (v17 - 1 <= v12) {
      goto LABEL_50;
    }
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = (uint64_t)this + 4 * v17 - 4;
    float v23 = 0.0;
    while (1)
    {
      if (v20)
      {
        float v24 = *(float *)(v22 + 4 * v20);
        if (v23 >= v24) {
          goto LABEL_44;
        }
      }
      else
      {
        float v24 = *((float *)this + v19);
      }
      uint64_t v21 = v19 + v20;
      float v23 = v24;
LABEL_44:
      ++v20;
      if (v19 + v20 <= v12)
      {
        if (v21)
        {
          unint64_t v25 = v21 + 1;
          goto LABEL_51;
        }
LABEL_50:
        unint64_t v25 = 2;
LABEL_51:
        *a3 = v25;
        JUMPOUT(0x25335E9F0);
      }
    }
  }
  return this;
}

BOOL cv3d::cv::gess::isochart::IsoMap::GetDestineVectors(cv3d::cv::gess::isochart::IsoMap *this, unint64_t a2, float *a3)
{
  unint64_t v3 = *(void *)this;
  if (a2 - 1 < *(void *)this)
  {
    uint64_t v4 = 0;
    uint64_t v6 = *((void *)this + 4);
    uint64_t v5 = *((void *)this + 5);
    do
    {
      float v7 = *(float *)(v6 + 4 * v4);
      if (v7 < 0.0)
      {
        *(_DWORD *)(v6 + 4 * v4) = 0;
        float v7 = 0.0;
      }
      uint64_t v8 = 0;
      float v9 = sqrtf(v7);
      if (v7 >= 0.0) {
        float v10 = v9;
      }
      else {
        float v10 = 0.0;
      }
      float v11 = a3;
      do
      {
        *float v11 = v10 * *(float *)(v5 + 4 * v8++);
        v11 += a2;
      }
      while (v3 != v8);
      ++v4;
      ++a3;
      v5 += 4 * v3;
    }
    while (v4 != a2);
  }
  return v3 >= a2;
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    float v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_24F500044(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeBoundaryByAngle(void *a1, uint64_t *a2, unint64_t a3, unsigned char *a4)
{
  if (a3 >= 2 && a1[33] - a1[32] >= 0x20uLL)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v10 = v8[16];
    uint64_t v9 = v8[17];
    std::vector<unsigned int>::size_type v11 = ((v8[20] - v8[19]) >> 2);
    std::vector<unsigned int>::vector(&v30, v11);
    std::vector<BOOL>::vector(v29, v11);
    std::vector<float>::vector(v28, -858993459 * ((unint64_t)(v9 - v10) >> 2));
    float v27 = 0.0;
    if (cv3d::cv::gess::isochart::IsoChartMesh::CalculateEdgeAngleDistance((uint64_t)a1, (uint64_t *)v28, &v27))
    {
      float v24 = a4;
      uint64_t v12 = a1[32];
      if (a1[33] != v12)
      {
        uint64_t v13 = 0;
        unsigned int v14 = 0;
        do
        {
          float v15 = (uint64_t *)(v12 + 16 * v13);
          uint64_t v17 = *v15;
          float v16 = (std::__shared_weak_count *)v15[1];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          cv3d::cv::gess::isochart::IsoChartMesh::CalculateFuzzyRegion(v17, v29);
          uint64_t v18 = *(void *)(v17 + 40);
          std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_father");
          int v31 = -1;
          int v19 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v18 + 56), (uint64_t)&v31, (unsigned __int8 *)__p);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v20 = *(uint64_t **)(v17 + 40);
          if (v20[20] != v20[19])
          {
            unint64_t v21 = 0;
            do
            {
              LODWORD(__p[0]) = v19;
              uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v20 + 7, (unsigned int *)__p);
              uint64_t v23 = *(void *)(v22 + 40);
              if (v21 >= (*(void *)(v22 + 48) - v23) >> 2) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(_DWORD *)(*a2 + 4 * *(unsigned int *)(v23 + 4 * v21++)) = v14;
              uint64_t v20 = *(uint64_t **)(v17 + 40);
            }
            while (v21 < (v20[20] - v20[19]) >> 2);
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          uint64_t v12 = a1[32];
          uint64_t v13 = ++v14;
        }
        while (v14 < (unint64_t)((a1[33] - v12) >> 4));
      }
      cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByAngle((uint64_t)a1, a2, v29, (uint64_t)v28, v27);
      cv3d::cv::gess::isochart::IsoChartMesh::ApplyBoundaryOptResult((uint64_t)a1, a2, &v30.__begin_, a3, v24);
    }
    if (v28[0])
    {
      v28[1] = v28[0];
      operator delete(v28[0]);
    }
    if (v29[0]) {
      operator delete(v29[0]);
    }
    if (v30.__begin_)
    {
      v30.__end_ = v30.__begin_;
      operator delete(v30.__begin_);
    }
  }
}

void sub_24F5002A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::CalculateEdgeAngleDistance(uint64_t a1, uint64_t *a2, float *a3)
{
  unint64_t v3 = a3;
  *a3 = 0.0;
  unint64_t v6 = -858993459
     * ((*(void *)(*(void *)(a1 + 40) + 136) - *(void *)(*(void *)(a1 + 40) + 128)) >> 2);
  v32.i8[0] = 0;
  std::vector<BOOL>::vector(&__p, v6, (unsigned __int8 *)&v32);
  if (!v6) {
    goto LABEL_13;
  }
  unint64_t v7 = 0;
  unint64_t v29 = v3;
  unint64_t v30 = 0;
  uint64_t v8 = __p;
  do
  {
    if ((v8[v7 >> 6] & (1 << v7)) != 0) {
      goto LABEL_10;
    }
    unsigned int v33 = v7;
    unint64_t v9 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v33);
    uint64_t v10 = *a2;
    *(_DWORD *)(*a2 + 4 * v7) = 0;
    *(_DWORD *)(v10 + 4 * v9) = 0;
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v11, *(_DWORD *)(v11 + 180), v33);
    if ((*v12 & v13) == 0)
    {
      unsigned int v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v11 + 104, &v33);
      float v15 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v11, *(_DWORD *)(v11 + 180), *v14);
      if ((*v15 & v16) == 0)
      {
        unsigned int v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v33) + 16);
        uint64_t v18 = *(void *)(a1 + 40) + 104;
        int v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v18, &v33);
        uint64_t v20 = cv3d::cv::gess::mesh::Topology::h(v18, v19);
        if (v17 == -1)
        {
          int v27 = 84;
          double v28 = "fh1.Valid()";
        }
        else
        {
          unsigned int v21 = *(_DWORD *)(v20 + 16);
          if (v21 != -1)
          {
            cv3d::cv::gess::math::FaceNormal(*(void *)(a1 + 40), v17, &v32);
            cv3d::cv::gess::math::FaceNormal(*(void *)(a1 + 40), v21, &v31);
            float32x4_t v22 = vmulq_f32(v32, v31);
            v22.i32[3] = 0;
            uint64_t v23 = *a2;
            *(float *)(*a2 + 4 * v7) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22));
            v22.f32[0] = 1.0 - *(float *)(v23 + 4 * v7);
            *(_DWORD *)(v23 + 4 * v7) = v22.i32[0];
            unint64_t v3 = v29;
            *unint64_t v29 = v22.f32[0] + *v29;
            ++v30;
            *(_DWORD *)(v23 + 4 * v9) = *(_DWORD *)(v23 + 4 * v7);
            goto LABEL_9;
          }
          int v27 = 85;
          double v28 = "fh2.Valid()";
        }
        __assert_rtn("CalculateEdgeAngleDistance", "MeshOptimizeBoundaries.cpp", v27, v28);
      }
    }
LABEL_9:
    uint64_t v8 = __p;
    *((void *)__p + (v7 >> 6)) |= 1 << v7;
    *(void *)((char *)v8 + ((v9 >> 3) & 0x1FFFFFF8)) |= 1 << v9;
LABEL_10:
    ++v7;
  }
  while (v6 != v7);
  if (v30)
  {
    float v24 = *v3 / (float)v30;
    *unint64_t v3 = v24;
    BOOL v25 = fabsf(v24) > 0.00000001;
    goto LABEL_14;
  }
LABEL_13:
  BOOL v25 = 0;
LABEL_14:
  if (__p) {
    operator delete(__p);
  }
  return v25;
}

void sub_24F5005A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateFuzzyRegion(uint64_t a1, void *a2)
{
  unint64_t v4 = ((*(void *)(*(void *)(a1 + 40) + 112) - *(void *)(*(void *)(a1 + 40) + 104)) >> 2);
  LOBYTE(v39) = 0;
  std::vector<BOOL>::vector(v42, v4, (unsigned __int8 *)&v39);
  uint64_t v39 = 0;
  double v40 = 0;
  uint64_t v41 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::FindNewBoundaryVert(a1, (uint64_t)&v39, v42);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v5 + 152);
  uint64_t v6 = *(void *)(v5 + 160);
  std::string::basic_string[abi:ne180100]<0>(&__p, "f:index_in_father");
  v34[0] = -1;
  unsigned int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v5 + 56), (uint64_t)v34, (unsigned __int8 *)&__p);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if (v8 == -1) {
    __assert_rtn("CalculateFuzzyRegion", "MeshOptimizeBoundaries.cpp", 123, "f_id_father_ah.Valid()");
  }
  uint64_t v9 = ((unint64_t)(v6 - v7) >> 2);
  if (v39 == v40 && v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      LODWORD(__p) = v8;
      uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v11 + 56), (unsigned int *)&__p);
      uint64_t v13 = *(void *)(v12 + 40);
      if (i >= (*(void *)(v12 + 48) - v13) >> 2) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(void *)(*a2 + (((unint64_t)*(unsigned int *)(v13 + 4 * i) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v13 + 4 * i));
    }
  }
  std::string __p = 0;
  double v37 = 0;
  uint64_t v38 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::SpreadFuzzyVert(a1, (char **)&v39, (uint64_t)&__p, v42);
  unsigned int v14 = (unsigned int *)__p;
  uint64_t v15 = v37 - (unsigned char *)__p;
  if (v37 == __p) {
    __assert_rtn("CalculateFuzzyRegion", "MeshOptimizeBoundaries.cpp", 136, "max_level > 0");
  }
  uint64_t v16 = v15 >> 2;
  unint64_t v17 = (v15 >> 2) - 1;
  if (!v17)
  {
LABEL_31:
    if (!v14) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v16 == 2)
  {
    unint64_t v18 = 0;
    if (!v9) {
      goto LABEL_22;
    }
  }
  else
  {
    float v19 = (float)((float)(unint64_t)v16 * 0.3) + 0.5;
    if (v17 >= (unint64_t)v19) {
      unint64_t v18 = (unint64_t)v19;
    }
    else {
      unint64_t v18 = v17;
    }
    if (!v9) {
      goto LABEL_22;
    }
  }
  for (unint64_t j = 0; j != v9; ++j)
  {
    uint64_t v21 = *(void *)(a1 + 40);
    v34[0] = v8;
    uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v21 + 56), v34);
    uint64_t v23 = *(void *)(v22 + 40);
    if (j >= (*(void *)(v22 + 48) - v23) >> 2) {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    *(void *)(*a2 + (((unint64_t)*(unsigned int *)(v23 + 4 * j) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v23 + 4 * j);
  }
  unsigned int v14 = (unsigned int *)__p;
LABEL_22:
  unint64_t v24 = v14[v18];
  BOOL v25 = v39;
  if (v24 < (v40 - (unsigned char *)v39) >> 2)
  {
    do
    {
      int v35 = v25[v24];
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v34, *(void *)(a1 + 40) + 104, &v35);
      for (unsigned int k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v34);
            ;
            unsigned int k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v34))
      {
        unsigned int v33 = k;
        if (k == -1) {
          break;
        }
        int v27 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), k);
        if ((*v27 & v28) == 0)
        {
          unint64_t v29 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v33) + 16);
          uint64_t v30 = *(void *)(a1 + 40);
          unsigned int v43 = v8;
          uint64_t v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v30 + 56), &v43);
          uint64_t v32 = *(void *)(v31 + 40);
          if (v29 >= (*(void *)(v31 + 48) - v32) >> 2) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*a2 + (((unint64_t)*(unsigned int *)(v32 + 4 * v29) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v32 + 4 * v29));
        }
      }
      ++v24;
      BOOL v25 = v39;
    }
    while (v24 < (v40 - (unsigned char *)v39) >> 2);
    unsigned int v14 = (unsigned int *)__p;
    goto LABEL_31;
  }
LABEL_32:
  double v37 = v14;
  operator delete(v14);
LABEL_33:
  if (v39)
  {
    double v40 = v39;
    operator delete(v39);
  }
  if (v42[0]) {
    operator delete(v42[0]);
  }
}

void sub_24F500994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByAngle(uint64_t a1, void *a2, void *a3, uint64_t a4, float a5)
{
  cv3d::cv::gess::isochart::CGraphcut::CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v16);
  std::vector<unsigned int>::vector(&v15, ((*(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152)) >> 2));
  char v10 = 1;
  do
  {
    char v11 = v10;
    std::string __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
    cv3d::cv::gess::isochart::IsoChartMesh::DriveGraphCutByAngle(a1, (cv3d::cv::gess::isochart::CGraphcut *)v16, (uint64_t *)&v15, a2, a3, &__p, a5);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    char v10 = 0;
  }
  while ((v11 & 1) != 0);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  cv3d::cv::gess::isochart::CGraphcut::~CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v16);
}

void sub_24F500B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::ApplyBoundaryOptResult(uint64_t a1, uint64_t *a2, _DWORD **a3, unint64_t a4, unsigned char *a5)
{
  unint64_t v12 = a4;
  *a5 = 1;
  unint64_t v5 = ((*(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152)) >> 2);
  if (v5 < 2)
  {
LABEL_5:
    if (((*(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152)) >> 2))
    {
      uint64_t v9 = (int *)*a2;
      char v10 = *a3;
      do
      {
        int v11 = *v9++;
        *v10++ = v11;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v6 = (int *)(*a2 + 4);
    unint64_t v7 = v5 - 1;
    while (1)
    {
      int v8 = *v6++;
      if (*(_DWORD *)*a2 != v8) {
        break;
      }
      if (!--v7) {
        goto LABEL_5;
      }
    }
  }
  cv3d::cv::gess::isochart::IsoChartMesh::MakePartitionValid(a1, &v12, a2, a5);
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindNewBoundaryVert(uint64_t a1, uint64_t a2, void *a3)
{
  int v44 = -1;
  uint64_t v6 = *(void *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  unsigned int v46 = -1;
  int v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v6 + 8), (uint64_t)&v46, (unsigned __int8 *)__p);
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  LODWORD(__p[0]) = v7;
  uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v8 + 8), (unsigned int *)__p);
  unint64_t v10 = *(void *)(*(void *)(a1 + 40) + 112) - *(void *)(*(void *)(a1 + 40) + 104);
  if ((v10 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v11 = v9;
    unint64_t v12 = 0;
    uint64_t v13 = (v10 >> 2);
    while (1)
    {
      unsigned int v45 = v12;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(__p, *(void *)(a1 + 40) + 104, &v45);
      unsigned int v46 = -1;
      unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
      if (HEdge != -1) {
        break;
      }
LABEL_9:
      if (v46 != -1) {
        goto LABEL_12;
      }
LABEL_35:
      if (++v12 == v13) {
        return;
      }
    }
    unsigned int v15 = HEdge;
    while (1)
    {
      uint64_t v16 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), v15);
      if ((v17 & *v16) != 0) {
        break;
      }
      unsigned int v15 = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
      if (v15 == -1) {
        goto LABEL_9;
      }
    }
    unsigned int v46 = v15;
LABEL_12:
    uint64_t v18 = *(void *)(v11 + 40);
    if (v45 >= (unint64_t)((*(void *)(v11 + 48) - v18) >> 2)) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    int v44 = *(_DWORD *)(v18 + 4 * v45);
    if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(*(void *)(a1 + 280) + 40), (uint64_t)&v44)) {
      goto LABEL_18;
    }
    uint64_t v19 = *(void *)(a1 + 40) + 104;
    uint64_t v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, &v46);
    unint64_t v21 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v19, v20) + 12);
    uint64_t v22 = *(void *)(a1 + 40) + 104;
    uint64_t v23 = cv3d::cv::gess::mesh::Topology::h(v22, &v46);
    uint64_t v24 = cv3d::cv::gess::mesh::Topology::h(v22, (unsigned int *)(v23 + 4));
    uint64_t v25 = *(void *)(v11 + 40);
    unint64_t v26 = (*(void *)(v11 + 48) - v25) >> 2;
    if (v26 <= v21) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    unint64_t v27 = *(unsigned int *)(v24 + 12);
    int v41 = *(_DWORD *)(v25 + 4 * v21);
    if (v26 <= v27) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    int v40 = *(_DWORD *)(v25 + 4 * v27);
    if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(*(void *)(a1 + 280) + 40), (uint64_t)&v41)
      || !cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(*(void *)(a1 + 280) + 40), (uint64_t)&v40))
    {
LABEL_18:
      *(void *)(*a3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unsigned int v28 = v45;
      uint64_t v30 = *(unsigned int **)(a2 + 8);
      unint64_t v29 = *(void *)(a2 + 16);
      if ((unint64_t)v30 >= v29)
      {
        uint64_t v32 = *(unsigned int **)a2;
        uint64_t v33 = ((uint64_t)v30 - *(void *)a2) >> 2;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = v29 - (void)v32;
        if (v35 >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          double v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v36);
          uint64_t v32 = *(unsigned int **)a2;
          uint64_t v30 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          double v37 = 0;
        }
        uint64_t v38 = &v37[4 * v33];
        *(_DWORD *)uint64_t v38 = v28;
        uint64_t v31 = v38 + 4;
        while (v30 != v32)
        {
          int v39 = *--v30;
          *((_DWORD *)v38 - 1) = v39;
          v38 -= 4;
        }
        *(void *)a2 = v38;
        *(void *)(a2 + 8) = v31;
        *(void *)(a2 + 16) = &v37[4 * v36];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        unsigned int *v30 = v45;
        uint64_t v31 = v30 + 1;
      }
      *(void *)(a2 + 8) = v31;
    }
    goto LABEL_35;
  }
}

void sub_24F500ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::SpreadFuzzyVert(uint64_t a1, char **a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  unint64_t v7 = 0;
  unint64_t v8 = ((unint64_t)(a2[1] - *a2) >> 2);
  unsigned int v40 = -1;
  uint64_t v36 = a3 + 16;
  uint64_t v9 = (uint64_t)(a2 + 2);
  do
  {
    unint64_t v10 = v8;
    unint64_t v12 = *(_DWORD **)(v5 + 8);
    unint64_t v11 = *(void *)(v5 + 16);
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = *(_DWORD **)v5;
      uint64_t v15 = ((uint64_t)v12 - *(void *)v5) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v36, v18);
        uint64_t v14 = *(_DWORD **)v5;
        unint64_t v12 = *(_DWORD **)(v5 + 8);
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v20 = &v19[4 * v15];
      *(_DWORD *)uint64_t v20 = v10;
      uint64_t v13 = v20 + 4;
      while (v12 != v14)
      {
        int v21 = *--v12;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      *(void *)uint64_t v5 = v20;
      *(void *)(v5 + 8) = v13;
      *(void *)(v5 + 16) = &v19[4 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *unint64_t v12 = v10;
      uint64_t v13 = v12 + 1;
    }
    *(void *)(v5 + 8) = v13;
    if (v7 < v10)
    {
      do
      {
        unsigned int v40 = *(_DWORD *)&(*a2)[4 * v7];
        cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v39, (void *)(*(void *)(a1 + 40) + 104), &v40);
        unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v39);
        if (Vertex != -1)
        {
          for (unsigned int i = Vertex;
                i != -1;
                unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v39))
          {
            unint64_t v24 = (unint64_t)i >> 6;
            if ((*(void *)(*a4 + 8 * v24) & (1 << i)) == 0)
            {
              unint64_t v26 = a2[1];
              unint64_t v25 = (unint64_t)a2[2];
              if ((unint64_t)v26 >= v25)
              {
                unsigned int v28 = *a2;
                uint64_t v29 = (v26 - *a2) >> 2;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v31 = v25 - (void)v28;
                if (v31 >> 1 > v30) {
                  unint64_t v30 = v31 >> 1;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v32);
                  unsigned int v28 = *a2;
                  unint64_t v26 = a2[1];
                }
                else
                {
                  uint64_t v33 = 0;
                }
                unint64_t v34 = &v33[4 * v29];
                *(_DWORD *)unint64_t v34 = i;
                unint64_t v27 = v34 + 4;
                while (v26 != v28)
                {
                  int v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                *a2 = v34;
                a2[1] = v27;
                a2[2] = &v33[4 * v32];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v26 = i;
                unint64_t v27 = v26 + 4;
              }
              a2[1] = v27;
              *(void *)(*a4 + 8 * v24) |= 1 << i;
            }
          }
        }
        ++v7;
      }
      while (v7 != v10);
    }
    unint64_t v8 = ((unint64_t)(a2[1] - *a2) >> 2);
    unint64_t v7 = v10;
    uint64_t v5 = a3;
  }
  while (v10 != v8);
}

void cv3d::cv::gess::isochart::IsoChartMesh::DriveGraphCutByAngle(uint64_t a1, cv3d::cv::gess::isochart::CGraphcut *a2, uint64_t *a3, void *a4, void *a5, void *a6, float a7)
{
  uint64_t v7 = *(void *)(a1 + 256);
  if (*(void *)(a1 + 264) != v7)
  {
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    do
    {
      uint64_t v17 = v7 + 16 * v15;
      unint64_t v18 = *(void **)v17;
      uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateSubChartAdjacentChart(v18, v16, a4);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      uint64_t v7 = *(void *)(a1 + 256);
      uint64_t v20 = *(void *)(a1 + 264);
      uint64_t v15 = ++v16;
    }
    while (v16 < (unint64_t)((v20 - v7) >> 4));
    if (v20 != v7)
    {
      uint64_t v21 = 0;
      unsigned int v22 = 0;
      do
      {
        uint64_t v23 = (uint64_t *)(v7 + 16 * v21);
        uint64_t v24 = *v23;
        uint64_t v25 = *(void *)(*v23 + 232);
        if (*(void *)(*v23 + 240) != v25)
        {
          unint64_t v26 = 0;
          do
          {
            unsigned int v27 = *(_DWORD *)(v25 + 4 * v26);
            if (v22 < v27)
            {
              cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle(a1, v22, v27, a2, a3, a4, a5, a6, a7);
              uint64_t v24 = *v23;
            }
            ++v26;
            uint64_t v25 = *(void *)(v24 + 232);
          }
          while (v26 < (*(void *)(v24 + 240) - v25) >> 2);
          uint64_t v7 = *(void *)(a1 + 256);
          uint64_t v20 = *(void *)(a1 + 264);
        }
        uint64_t v21 = ++v22;
      }
      while (v22 < (unint64_t)((v20 - v7) >> 4));
    }
  }
}

void sub_24F5012B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateSubChartAdjacentChart(void *a1, int a2, void *a3)
{
  uint64_t v6 = (uint64_t)(a1 + 29);
  a1[30] = a1[29];
  uint64_t v7 = a1[5];
  uint64_t v9 = *(void *)(v7 + 104);
  uint64_t v8 = *(void *)(v7 + 112);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  int v24 = -1;
  int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v7 + 8), (uint64_t)&v24, (unsigned __int8 *)__p);
  unint64_t v11 = v8 - v9;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = (v11 >> 2);
  if ((v11 >> 2))
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = a1[5];
      LODWORD(__p[0]) = v10;
      uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v14 + 8), (unsigned int *)__p);
      uint64_t v16 = *(void *)(v15 + 40);
      if (v13 >= (*(void *)(v15 + 48) - v16) >> 2) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      int v24 = *(_DWORD *)(v16 + 4 * v13);
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(__p, *(void *)(a1[35] + 40) + 104, &v24);
      while (1)
      {
        unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
        if (HEdge == -1) {
          break;
        }
        uint64_t v17 = *(void *)(a1[35] + 40) + 104;
        unint64_t v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v17, &HEdge);
        uint64_t v19 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v17, v18) + 16);
        if (v19 != -1)
        {
          __int32 v20 = *(_DWORD *)(*a3 + 4 * v19);
          if (v20 != a2) {
            cv3d::cv::gess::isochart::AddNoduplicateItem(v6, v20);
          }
        }
      }
      ++v13;
    }
    while (v13 != v12);
  }
}

void sub_24F50142C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle(uint64_t a1, int a2, int a3, cv3d::cv::gess::isochart::CGraphcut *this, uint64_t *a5, void *a6, void *a7, void *a8, float a9)
{
  std::string __p = 0;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  unint64_t v9 = *(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152);
  if ((v9 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v19 = (v9 >> 2);
    do
    {
      uint64_t v20 = *a5;
      *(_DWORD *)(*a5 + 4 * vstd::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = -1;
      if ((*(void *)(*a7 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18))
      {
        int v21 = *(_DWORD *)(*a6 + 4 * v18);
        if (v21 == a2 || v21 == a3)
        {
          char v23 = (char *)__p;
          uint64_t v24 = (v17 - (unsigned char *)__p) >> 2;
          *(_DWORD *)(v20 + 4 * vstd::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = v24;
          if (v17 >= v64)
          {
            unint64_t v26 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v27 = v64 - v23;
            if ((v64 - v23) >> 1 > v26) {
              unint64_t v26 = v27 >> 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v64, v28);
              char v23 = (char *)__p;
              uint64_t v17 = v63;
            }
            else
            {
              uint64_t v29 = 0;
            }
            unint64_t v30 = &v29[4 * v24];
            *(_DWORD *)unint64_t v30 = v18;
            uint64_t v25 = v30 + 4;
            while (v17 != v23)
            {
              int v31 = *((_DWORD *)v17 - 1);
              v17 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            std::string __p = v30;
            unint64_t v63 = v25;
            unint64_t v64 = &v29[4 * v28];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v17 = v18;
            uint64_t v25 = v17 + 4;
          }
          unint64_t v63 = v25;
          uint64_t v17 = v25;
        }
      }
      ++v18;
    }
    while (v18 != v19);
    if (__p != v17)
    {
      cv3d::cv::gess::isochart::CGraphcut::Clear(this);
      unint64_t v32 = v17 - (unsigned char *)__p;
      unint64_t v33 = ((unint64_t)(v17 - (unsigned char *)__p) >> 2);
      cv3d::cv::gess::isochart::CMaxFlow::InitGraphCut(this, v33, 0, 6);
      std::vector<int>::vector(&v61, v33);
      unint64_t v34 = v32 >> 2;
      uint64_t v55 = 4 * v33;
      if ((v32 >> 2))
      {
        unint64_t v35 = 0;
        do
        {
          int v36 = cv3d::cv::gess::isochart::CGraphcut::AddNode(this);
          v61.__begin_[v35 / 4] = v36;
          v35 += 4;
        }
        while (v55 != v35);
        if (v33)
        {
          uint64_t v37 = 0;
          do
          {
            unsigned int v60 = *((_DWORD *)__p + v37);
            std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v59, 3uLL);
            unint64_t v38 = v33;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(void *)(a1 + 40), &v60, v59);
            for (uint64_t i = 0; i != 12; i += 4)
            {
              unsigned int v58 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, (unsigned int *)((char *)v59[0] + i));
              unsigned int v40 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), v58);
              if ((*v40 & v41) == 0)
              {
                unint64_t v42 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v58) + 16);
                if ((*(void *)(*a7 + ((v42 >> 3) & 0x1FFFFFF8)) >> v42))
                {
                  uint64_t v43 = *(unsigned int *)(*a5 + 4 * v42);
                  if (v43 != -1)
                  {
                    uint64_t v44 = *(unsigned int *)(*a5 + 4 * v60);
                    if (v44 >= v34)
                    {
                      int v53 = 317;
                      uint64_t v54 = "face_graph_node_id[father_fh.Index()] < node_number";
                      goto LABEL_66;
                    }
                    if (v43 >= v34)
                    {
                      int v53 = 318;
                      uint64_t v54 = "face_graph_node_id[adj_fh.Index()] < node_number";
LABEL_66:
                      __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", v53, v54);
                    }
                    cv3d::cv::gess::isochart::CGraphcut::AddEges(this, v61.__begin_[v44], v61.__begin_[v43], 1.0 / (float)((float)(*(float *)(*a8 + 4 * v58) / a9) + 1.0), 1.0 / (float)((float)(*(float *)(*a8 + 4 * v58) / a9) + 1.0));
                  }
                }
                else
                {
                  uint64_t v45 = *(unsigned int *)(*a5 + 4 * v60);
                  if (v45 >= v34) {
                    __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 322, "face_graph_node_id[father_fh.Index()] < node_number");
                  }
                  float v46 = 3.4028e38;
                  if (*(_DWORD *)(*a6 + 4 * v42) == a2) {
                    float v47 = 3.4028e38;
                  }
                  else {
                    float v47 = 0.0;
                  }
                  if (*(_DWORD *)(*a6 + 4 * v42) == a2) {
                    float v46 = 0.0;
                  }
                  cv3d::cv::gess::isochart::CGraphcut::SetWeights(this, v61.__begin_[v45], v47, v46);
                }
              }
            }
            if (v59[0])
            {
              v59[1] = v59[0];
              operator delete(v59[0]);
            }
            ++v37;
            unint64_t v33 = v38;
          }
          while (v37 != v38);
        }
      }
      LODWORD(v59[0]) = 0;
      cv3d::cv::gess::isochart::CGraphcut::CutGraph(this, (float *)v59);
      if (v33)
      {
        uint64_t v48 = 0;
        do
        {
          uint64_t v49 = *(unsigned int *)((char *)__p + v48);
          uint64_t v50 = *(unsigned int *)(*a5 + 4 * v49);
          if (v50 >= v34) {
            __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 339, "face_graph_node_id[face_id] < node_number");
          }
          BOOL v51 = cv3d::cv::gess::isochart::CGraphcut::IsInSourceDomain(this, v61.__begin_[v50]);
          int v52 = a3;
          if (v51) {
            int v52 = a2;
          }
          *(_DWORD *)(*a6 + 4 * v49) = v52;
          v48 += 4;
        }
        while (v55 != v48);
      }
      if (v61.__begin_)
      {
        v61.__end_ = v61.__begin_;
        operator delete(v61.__begin_);
      }
      uint64_t v17 = (char *)__p;
    }
    if (v17)
    {
      unint64_t v63 = v17;
      operator delete(v17);
    }
  }
}

void sub_24F5018E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::AddNoduplicateItem(uint64_t a1, __int32 a2)
{
  unint64_t v4 = *(__int32 **)(a1 + 8);
  uint64_t v5 = wmemchr(*(__int32 **)a1, a2, ((uint64_t)v4 - *(void *)a1) >> 2);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = *(__int32 **)(a1 + 8);
  if (v6 == v7)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if ((unint64_t)v6 >= v8)
    {
      int v10 = *(__int32 **)a1;
      uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 16, v14);
        int v10 = *(__int32 **)a1;
        uint64_t v6 = *(__int32 **)(a1 + 8);
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = (__int32 *)&v15[4 * v11];
      uint64_t v17 = &v15[4 * v14];
      *uint64_t v16 = a2;
      unint64_t v9 = v16 + 1;
      while (v6 != v10)
      {
        __int32 v18 = *--v6;
        *--uint64_t v16 = v18;
      }
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *uint64_t v6 = a2;
      unint64_t v9 = v6 + 1;
    }
    *(void *)(a1 + 8) = v9;
  }
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeBoundaryByStretch(std::vector<unsigned int> *a1, uint64_t *a2, uint64_t a3, unint64_t a4, unsigned char *a5)
{
  *a5 = 0;
  if (a4 >= 2
    && (std::vector<unsigned int>::pointer)((char *)a1[11].__begin_ - (char *)a1[10].__end_cap_.__value_) >= (std::vector<unsigned int>::pointer)0x20)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    value = a1[1].__end_cap_.__value_;
    uint64_t v12 = *((void *)value + 19);
    uint64_t v11 = *((void *)value + 20);
    uint64_t v14 = *((void *)value + 13);
    uint64_t v13 = *((void *)value + 14);
    std::vector<float>::vector(v25, -858993459 * ((*((void *)value + 17) - *((void *)value + 16)) >> 2));
    std::vector<unsigned int>::vector(&v24, ((char *)a1[11].__begin_ - (char *)a1[10].__end_cap_.__value_) >> 4);
    std::vector<BOOL>::vector(v23, ((unint64_t)(v11 - v12) >> 2));
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v20, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    std::string __p = 0;
    __int32 v18 = 0;
    uint64_t v19 = 0;
    float v16 = 0.0;
    if (cv3d::cv::gess::isochart::IsoChartMesh::CalculateEdgeAngleDistance((uint64_t)a1, (uint64_t *)v25, &v16))
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsFuzzyRegion(a1, (uint64_t)&v26, (uint64_t *)a3, v23, &v24);
      std::vector<float>::resize((uint64_t)&__p, ((v27 - v26) >> 2) * ((unint64_t)(v13 - v14) >> 2));
      cv3d::cv::gess::isochart::IsoChartMesh::CalParamDistanceToAllLandmarks(a1, a2, &__p, &v26);
      char v15 = 0;
      cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV(a1, (uint64_t *)&__p, (uint64_t *)&v26, &v15);
      if (v15)
      {
        cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByStretch(a1, (v27 - v26) >> 2, (void *)a3, v23, &v24, 2uLL, (uint64_t *)&__p, v25, v16);
        cv3d::cv::gess::isochart::IsoChartMesh::ApplyBoundaryOptResult((uint64_t)a1, (uint64_t *)a3, (_DWORD **)&v20, a4, a5);
      }
    }
    if (__p)
    {
      __int32 v18 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      int v21 = v20;
      operator delete(v20);
    }
    if (v23[0]) {
      operator delete(v23[0]);
    }
    if (v24.__begin_)
    {
      v24.__end_ = v24.__begin_;
      operator delete(v24.__begin_);
    }
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
  }
}

void sub_24F501C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  unint64_t v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v23 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsFuzzyRegion(void *a1, uint64_t a2, uint64_t *a3, void *a4, void *a5)
{
  std::vector<BOOL>::vector(&v51, ((*(void *)(a1[5] + 112) - *(void *)(a1[5] + 104)) >> 2));
  uint64_t v7 = a1[32];
  float v46 = a1;
  if (a1[33] != v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      int v10 = (uint64_t **)(v7 + 16 * v8);
      uint64_t v11 = (*v10)[5];
      std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_father");
      int v52 = -1;
      int v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v11 + 56), (uint64_t)&v52, (unsigned __int8 *)__p);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v13 = (*v10)[5];
      LODWORD(__p[0]) = v12;
      uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v13 + 56), (unsigned int *)__p);
      char v15 = *v10;
      uint64_t v16 = *(void *)((*v10)[5] + 160) - *(void *)((*v10)[5] + 152);
      if (v16)
      {
        unint64_t v17 = v16 >> 2;
        uint64_t v19 = v14 + 40;
        __int32 v18 = *(unsigned int **)(v14 + 40);
        uint64_t v20 = (uint64_t)(*(void *)(v19 + 8) - (void)v18) >> 2;
        uint64_t v21 = *a3;
        if (v17 <= 1) {
          unint64_t v17 = 1;
        }
        do
        {
          if (!v20) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          unsigned int v22 = *v18++;
          *(_DWORD *)(v21 + 4 * v22) = v9;
          --v20;
          --v17;
        }
        while (v17);
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion(v15, a4, (_DWORD *)(*a5 + 4 * v8));
      uint64_t v23 = (*v10)[5];
      std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
      int v52 = -1;
      int v24 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v23 + 8), (uint64_t)&v52, (unsigned __int8 *)__p);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v24 == -1) {
        __assert_rtn("CalSubchartsFuzzyRegion", "MeshOptimizeBoundaries.cpp", 464, "v_id_father_ah.Valid()");
      }
      uint64_t v25 = (*v10)[5];
      LODWORD(__p[0]) = v24;
      uint64_t v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v25 + 8), (unsigned int *)__p);
      uint64_t v27 = *v10;
      uint64_t v28 = (*v10)[9];
      if ((*v10)[10] != v28)
      {
        uint64_t v29 = v26;
        unint64_t v30 = 0;
        do
        {
          unint64_t v31 = *(unsigned int *)(v28 + 4 * v30);
          uint64_t v32 = *(void *)(v29 + 40);
          if (v31 >= (*(void *)(v29 + 48) - v32) >> 2) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          unint64_t v33 = *(unsigned int *)(v32 + 4 * v31);
          if (((1 << v33) & *((void *)v51 + (v33 >> 6))) == 0)
          {
            unint64_t v35 = *(_DWORD **)(a2 + 8);
            unint64_t v34 = *(void *)(a2 + 16);
            if ((unint64_t)v35 >= v34)
            {
              uint64_t v37 = *(_DWORD **)a2;
              uint64_t v38 = ((uint64_t)v35 - *(void *)a2) >> 2;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v40 = v34 - (void)v37;
              if (v40 >> 1 > v39) {
                unint64_t v39 = v40 >> 1;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v41);
                uint64_t v37 = *(_DWORD **)a2;
                unint64_t v35 = *(_DWORD **)(a2 + 8);
              }
              else
              {
                unint64_t v42 = 0;
              }
              uint64_t v43 = &v42[4 * v38];
              *(_DWORD *)uint64_t v43 = v33;
              int v36 = v43 + 4;
              while (v35 != v37)
              {
                int v44 = *--v35;
                *((_DWORD *)v43 - 1) = v44;
                v43 -= 4;
              }
              *(void *)a2 = v43;
              *(void *)(a2 + 8) = v36;
              *(void *)(a2 + 16) = &v42[4 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              *unint64_t v35 = v33;
              int v36 = v35 + 1;
            }
            *(void *)(a2 + 8) = v36;
            *((void *)v51 + (v33 >> 6)) |= 1 << v33;
            uint64_t v27 = *v10;
          }
          ++v30;
          uint64_t v28 = v27[9];
        }
        while (v30 < (v27[10] - v28) >> 2);
      }
      uint64_t v7 = v46[32];
      uint64_t v8 = ++v9;
    }
    while (v9 < (unint64_t)((v46[33] - v7) >> 4));
  }
  if (v51) {
    operator delete(v51);
  }
}

void sub_24F502080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalParamDistanceToAllLandmarks(void *a1, uint64_t *a2, void *a3, void *a4)
{
  std::string __p = 0;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  double v59 = 0;
  unsigned int v60 = 0;
  std::vector<int> v61 = 0;
  unint64_t v4 = (_DWORD *)a4[1];
  if (v4 == (_DWORD *)*a4)
  {
    uint64_t v45 = 0;
    float v46 = 0;
    uint64_t v44 = a4[1];
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = ((*(void *)(a1[5] + 112) - *(void *)(a1[5] + 104)) >> 2);
    uint64_t v11 = 4 * v10;
    unint64_t v4 = (_DWORD *)*a4;
    do
    {
      unint64_t v12 = v4[v9];
      if ((*(void *)(a1[26] + ((v12 >> 3) & 0x1FFFFFF8)) >> v12))
      {
        uint64_t v14 = (char *)a1[9];
        uint64_t v13 = (char *)a1[10];
        uint64_t v15 = v13 - v14;
        if (v13 != v14)
        {
          uint64_t v16 = 0;
          unint64_t v17 = v15 >> 2;
          if (v17 <= 1) {
            unint64_t v17 = 1;
          }
          while (1)
          {
            int v18 = *(_DWORD *)v14;
            v14 += 4;
            if (v18 == v12) {
              break;
            }
            v16 += v11;
            if (!--v17) {
              goto LABEL_47;
            }
          }
          uint64_t v21 = __p;
          unsigned int v22 = v63;
          uint64_t v23 = (v63 - (unsigned char *)__p) >> 2;
          if (v10)
          {
            uint64_t v24 = *a2;
            uint64_t v25 = (_DWORD *)(*a3 + v11 * v23);
            uint64_t v26 = v10;
            do
            {
              *v25++ = *(_DWORD *)(v24 + v16);
              v24 += 4;
              --v26;
            }
            while (v26);
          }
          if (v22 >= v64)
          {
            if ((unint64_t)(v23 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v64 - v21;
            uint64_t v33 = v32 >> 1;
            if (v32 >> 1 <= (unint64_t)(v23 + 1)) {
              uint64_t v33 = v23 + 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v64, v34);
            }
            else {
              unint64_t v35 = 0;
            }
            uint64_t v40 = &v35[4 * v23];
            *(_DWORD *)uint64_t v40 = v12;
            uint64_t v27 = v40 + 4;
            unint64_t v42 = (char *)__p;
            unint64_t v41 = v63;
            if (v63 != __p)
            {
              do
              {
                int v43 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v40 - 1) = v43;
                v40 -= 4;
              }
              while (v41 != v42);
              unint64_t v41 = (char *)__p;
            }
            std::string __p = v40;
            unint64_t v63 = v27;
            unint64_t v64 = &v35[4 * v34];
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v22 = v12;
            uint64_t v27 = v22 + 4;
          }
          unint64_t v63 = v27;
        }
      }
      else
      {
        uint64_t v19 = v60;
        if (v60 >= v61)
        {
          uint64_t v28 = v60 - v59;
          if ((unint64_t)(v28 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = ((char *)v61 - (char *)v59) >> 1;
          if (v29 <= v28 + 1) {
            unint64_t v29 = v28 + 1;
          }
          if ((unint64_t)((char *)v61 - (char *)v59) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v61, v30);
          }
          else {
            unint64_t v31 = 0;
          }
          int v36 = (unsigned int *)&v31[4 * v28];
          *int v36 = v12;
          uint64_t v20 = v36 + 1;
          uint64_t v38 = v59;
          uint64_t v37 = v60;
          if (v60 != v59)
          {
            do
            {
              unsigned int v39 = *--v37;
              *--int v36 = v39;
            }
            while (v37 != v38);
            uint64_t v37 = v59;
          }
          double v59 = v36;
          unsigned int v60 = v20;
          std::vector<int> v61 = (unsigned int *)&v31[4 * v30];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *unsigned int v60 = v12;
          uint64_t v20 = v19 + 1;
        }
        unsigned int v60 = v20;
      }
LABEL_47:
      ++v9;
      unint64_t v4 = (_DWORD *)*a4;
      uint64_t v44 = a4[1];
    }
    while (v9 < (v44 - *a4) >> 2);
    uint64_t v45 = v60;
    float v46 = (char *)__p;
    if (v59 != v60)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistance((uint64_t)a1, &v59, (float *)(*a3 + 4 * ((unint64_t)(v63 - (unsigned char *)__p) >> 2) * v10));
      unint64_t v4 = (_DWORD *)*a4;
      uint64_t v44 = a4[1];
      float v46 = (char *)__p;
      uint64_t v45 = v59;
    }
  }
  uint64_t v47 = v44 - (void)v4;
  uint64_t v48 = v60;
  unint64_t v49 = v60 - v45;
  if (v49 + ((v63 - v46) >> 2) != v47 >> 2) {
    __assert_rtn("CalParamDistanceToAllLandmarks", "MeshOptimizeBoundaries.cpp", 592, "all_landmark.size() == old_landmark.size() + new_landmark.size()");
  }
  unint64_t v50 = (v63 - v46) >> 2;
  if (v63 != v46)
  {
    if (v50 <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = (v63 - v46) >> 2;
    }
    int v52 = v4;
    int v53 = (int *)v46;
    do
    {
      int v54 = *v53++;
      *v52++ = v54;
      --v51;
    }
    while (v51);
  }
  if (v48 == v45)
  {
    if (!v45) {
      goto LABEL_67;
    }
  }
  else
  {
    if (v49 <= 1) {
      uint64_t v55 = 1;
    }
    else {
      uint64_t v55 = v49;
    }
    double v56 = &v4[v50];
    uint64_t v57 = v45;
    do
    {
      int v58 = *v57++;
      *v56++ = v58;
      --v55;
    }
    while (v55);
  }
  unsigned int v60 = v45;
  operator delete(v45);
  float v46 = (char *)__p;
LABEL_67:
  if (v46)
  {
    unint64_t v63 = v46;
    operator delete(v46);
  }
}

void sub_24F50247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV(std::vector<unsigned int> *a1, uint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  *a4 = 0;
  uint64_t v8 = a1 + 12;
  std::vector<unsigned int>::size_type v9 = ((*((void *)a1[1].__end_cap_.__value_ + 14) - *((void *)a1[1].__end_cap_.__value_ + 13)) >> 2);
  if (v9 != a1[12].__end_ - a1[12].__begin_) {
    std::vector<int>::resize(a1 + 12, v9);
  }
  value = (std::vector<unsigned int> **)a1[10].__end_cap_.__value_;
  begiuint64_t n = (std::vector<unsigned int> **)a1[11].__begin_;
  while (value != begin)
  {
    std::vector<unsigned int>::size_type v12 = (uint64_t)(*((void *)(*value)[1].__end_cap_.__value_ + 14) - *((void *)(*value)[1].__end_cap_.__value_ + 13)) >> 2;
    if (v12 != (*value)[12].__end_ - (*value)[12].__begin_) {
      std::vector<int>::resize(*value + 12, v12);
    }
    value += 2;
  }
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = v14 - *a3;
  if (v14 != *a3)
  {
    uint64_t v16 = 0;
    unint64_t v17 = v15 >> 2;
    std::vector<unsigned int>::pointer v18 = v8->__begin_;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    do
    {
      v18[*(unsigned int *)(v13 + 4 * v16)] = v16;
      ++v16;
    }
    while (v17 != v16);
  }
  uint64_t v19 = a1[10].__end_cap_.__value_;
  if (a1[11].__begin_ == v19) {
    goto LABEL_27;
  }
  unint64_t v20 = 0;
  do
  {
    uint64_t v21 = &v19[4 * v20];
    uint64_t v22 = *(void *)(*(void *)v21 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
    int v39 = -1;
    int v23 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v22 + 8), (uint64_t)&v39, (unsigned __int8 *)__p);
    if (v38 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v24 = *(void *)(*(void *)v21 + 40);
    LODWORD(__p[0]) = v23;
    uint64_t v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v24 + 8), (unsigned int *)__p);
    if (a1[3].__end_ == a1[3].__begin_) {
      cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV();
    }
    uint64_t v26 = *(void *)v21;
    uint64_t v27 = *(unsigned int **)(*(void *)v21 + 72);
    uint64_t v28 = *(void *)(*(void *)v21 + 80) - (void)v27;
    if (v28)
    {
      unint64_t v29 = v28 >> 2;
      uint64_t v30 = *(void *)(v25 + 40);
      unint64_t v31 = (*(void *)(v25 + 48) - v30) >> 2;
      if (v29 <= 1) {
        unint64_t v29 = 1;
      }
      do
      {
        unsigned int v33 = *v27++;
        uint64_t v32 = v33;
        if (v31 <= v33) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        *(_DWORD *)(*(void *)(v26 + 288) + 4 * v32) = v8->__begin_[*(unsigned int *)(v30 + 4 * v32)];
        --v29;
      }
      while (v29);
    }
    ++v20;
    uint64_t v19 = a1[10].__end_cap_.__value_;
    std::vector<unsigned int>::pointer v34 = a1[11].__begin_;
  }
  while (v20 < ((char *)v34 - (char *)v19) >> 4);
  __p[0] = 0;
  if (v34 == v19)
  {
LABEL_27:
    *a4 = 1;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    while (1)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV(*(void *)&v19[v35], a2, 2uLL, (unint64_t *)__p);
      if (__p[0] != (void *)2) {
        break;
      }
      ++v36;
      uint64_t v19 = a1[10].__end_cap_.__value_;
      v35 += 4;
      if (v36 >= ((char *)a1[11].__begin_ - (char *)v19) >> 4) {
        goto LABEL_27;
      }
    }
  }
}

void sub_24F5026F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByStretch(void *a1, unint64_t a2, void *a3, void *a4, void *a5, unint64_t a6, uint64_t *a7, void *a8, float a9)
{
  cv3d::cv::gess::isochart::CGraphcut::CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v40);
  unint64_t v17 = (uint64_t *)a1[32];
  uint64_t v18 = a1[33] - (void)v17;
  if (v18)
  {
    unint64_t v19 = v18 >> 4;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    do
    {
      uint64_t v20 = *v17;
      v17 += 2;
      unint64_t v21 = (uint64_t)(*(void *)(v20 + 80) - *(void *)(v20 + 72)) >> 2;
      if (a2 <= v21) {
        a2 = v21;
      }
      --v19;
    }
    while (v19);
  }
  uint64_t v22 = a1[5];
  uint64_t v24 = *(void *)(v22 + 152);
  uint64_t v23 = *(void *)(v22 + 160);
  std::vector<float>::vector(v39, a2);
  std::vector<float>::vector(__p, (v23 - v24) >> 2);
  std::vector<unsigned int>::vector(&v37, (v23 - v24) >> 2);
  uint64_t v25 = a1[32];
  if (a1[33] != v25)
  {
    uint64_t v26 = 0;
    unsigned int v27 = 0;
    do
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateSubChartAdjacentChart(*(void **)(v25 + 16 * v26), v27, a3);
      uint64_t v25 = a1[32];
      uint64_t v28 = a1[33];
      uint64_t v26 = ++v27;
    }
    while (v27 < (unint64_t)((v28 - v25) >> 4));
    if (v28 != v25)
    {
      uint64_t v29 = 0;
      unsigned int v30 = 0;
      do
      {
        unint64_t v31 = (uint64_t *)(v25 + 16 * v29);
        uint64_t v32 = *v31;
        uint64_t v33 = *(void *)(*v31 + 232);
        if (*(void *)(*v31 + 240) != v33)
        {
          unint64_t v34 = 0;
          do
          {
            uint64_t v35 = *(unsigned int *)(v33 + 4 * v34);
            if (v30 < v35 && (*(_DWORD *)(*a5 + 4 * v29) || *(_DWORD *)(*a5 + 4 * v35)))
            {
              cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle((uint64_t)a1, v30, v35, (cv3d::cv::gess::isochart::CGraphcut *)v40, (uint64_t *)&v37, a3, a4, a6, a9, a7, a8, (float **)v39, __p);
              uint64_t v32 = *v31;
            }
            ++v34;
            uint64_t v33 = *(void *)(v32 + 232);
          }
          while (v34 < (*(void *)(v32 + 240) - v33) >> 2);
          uint64_t v25 = a1[32];
          uint64_t v28 = a1[33];
        }
        uint64_t v29 = ++v30;
      }
      while (v30 < (unint64_t)((v28 - v25) >> 4));
    }
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  cv3d::cv::gess::isochart::CGraphcut::~CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v40);
}

void sub_24F50291C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  cv3d::cv::gess::isochart::CGraphcut::~CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)&a24);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion(uint64_t *a1, void *a2, _DWORD *a3)
{
  cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks((cv3d::cv::gess::isochart::IsoChartMesh *)a1);
  if (!a1[35]) {
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion();
  }
  uint64_t v57 = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  uint64_t v6 = (void *)a1[5];
  uint64_t v7 = (uint64_t)(v6[14] - v6[13]) >> 2;
  uint64_t v9 = v6[19];
  uint64_t v8 = v6[20];
  std::vector<BOOL>::vector(v56, v7);
  cv3d::cv::gess::isochart::IsoChartMesh::FindNewBoundaryVert((uint64_t)a1, (uint64_t)&v57, v56);
  uint64_t v10 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(&__p, "f:index_in_father");
  v51[0] = -1;
  unsigned int v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v10 + 56), (uint64_t)v51, (unsigned __int8 *)&__p);
  if (SHIBYTE(v55) < 0) {
    operator delete(__p);
  }
  unint64_t v12 = v8 - v9;
  if (v57 == v58)
  {
    uint64_t v26 = (v12 >> 2);
    if ((v12 >> 2))
    {
      unint64_t v27 = 0;
      do
      {
        uint64_t v28 = a1[5];
        LODWORD(__p) = v11;
        uint64_t v29 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v28 + 56), (unsigned int *)&__p);
        uint64_t v30 = *(void *)(v29 + 40);
        if (v27 >= (*(void *)(v29 + 48) - v30) >> 2) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(void *)(*a2 + (((unint64_t)*(unsigned int *)(v30 + 4 * v27) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v30 + 4 * v27));
        ++v27;
      }
      while (v26 != v27);
    }
    *a3 = 0;
  }
  else
  {
    std::string __p = 0;
    int v54 = 0;
    uint64_t v55 = 0;
    cv3d::cv::gess::isochart::IsoChartMesh::SpreadFuzzyVert((uint64_t)a1, (char **)&v57, (uint64_t)&__p, v56);
    if (v54 == __p) {
      __assert_rtn("CalculateLandmarkAndFuzzyRegion", "MeshOptimizeBoundaries.cpp", 509, "max_level > 0");
    }
    uint64_t v13 = (v54 - (unsigned char *)__p) >> 2;
    float v14 = (float)((float)(unint64_t)v13 * 0.3) + 0.5;
    unint64_t v15 = v13 - 1;
    if (v15 >= (unint64_t)v14) {
      unint64_t v16 = (unint64_t)v14;
    }
    else {
      unint64_t v16 = v15;
    }
    do
    {
      unint64_t v17 = v16;
      unint64_t v18 = *((unsigned int *)__p + v16);
      unsigned int v19 = v7 - v18;
      --v16;
    }
    while (v17 && v19 < 0x19);
    if (v19 <= 0x18)
    {
      if (v7)
      {
        unint64_t v31 = 0;
        uint64_t v32 = (char *)v56[0];
        do
        {
          *(void *)&v32[(v31 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v31);
          ++v31;
        }
        while (v7 != v31);
      }
    }
    else
    {
      unint64_t v20 = (v58 - (unsigned char *)v57) >> 2;
      BOOL v21 = v20 > v18;
      unint64_t v22 = v20 - v18;
      if (v21)
      {
        uint64_t v23 = (char *)v56[0];
        uint64_t v24 = (unsigned int *)((char *)v57 + 4 * v18);
        do
        {
          unsigned int v25 = *v24++;
          *(void *)&v23[((unint64_t)v25 >> 3) & 0x1FFFFFF8] &= ~(1 << v25);
          --v22;
        }
        while (v22);
      }
    }
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks((uint64_t)a1, v56);
    if (v17)
    {
      *a3 = v16;
      if ((v12 >> 2))
      {
        unint64_t v33 = 0;
        do
        {
          uint64_t v34 = a1[5];
          v51[0] = v11;
          uint64_t v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v34 + 56), v51);
          uint64_t v36 = *(void *)(v35 + 40);
          if (v33 >= (*(void *)(v35 + 48) - v36) >> 2) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*a2 + (((unint64_t)*(unsigned int *)(v36 + 4 * v33) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v36 + 4 * v33);
          ++v33;
        }
        while ((v12 >> 2) != v33);
      }
      unint64_t v37 = *((unsigned int *)__p + v16 + 1);
      for (uint64_t i = v57; v37 < (v58 - (unsigned char *)v57) >> 2; uint64_t i = v57)
      {
        int v52 = i[v37];
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v51, a1[5] + 104, &v52);
        for (unsigned int j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v51);
              ;
              unsigned int j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v51))
        {
          unsigned int v50 = j;
          if (j == -1) {
            break;
          }
          uint64_t v40 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1[5], *(_DWORD *)(a1[5] + 180), j);
          if ((*v40 & v41) == 0)
          {
            unint64_t v42 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1[5] + 104, &v50) + 16);
            uint64_t v43 = a1[5];
            unsigned int v60 = v11;
            uint64_t v44 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v43 + 56), &v60);
            uint64_t v45 = *(void *)(v44 + 40);
            if (v42 >= (*(void *)(v44 + 48) - v45) >> 2) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(void *)(*a2 + (((unint64_t)*(unsigned int *)(v45 + 4 * v42) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v45 + 4 * v42));
          }
        }
        ++v37;
      }
    }
    else
    {
      *a3 = 0;
      if ((v12 >> 2))
      {
        unint64_t v46 = 0;
        do
        {
          uint64_t v47 = a1[5];
          v51[0] = v11;
          uint64_t v48 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v47 + 56), v51);
          uint64_t v49 = *(void *)(v48 + 40);
          if (v46 >= (*(void *)(v48 + 48) - v49) >> 2) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*a2 + (((unint64_t)*(unsigned int *)(v49 + 4 * v46) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v49 + 4 * v46));
          ++v46;
        }
        while ((v12 >> 2) != v46);
      }
    }
    if (__p)
    {
      int v54 = __p;
      operator delete(__p);
    }
  }
  if (v56[0]) {
    operator delete(v56[0]);
  }
  if (v57)
  {
    int v58 = v57;
    operator delete(v57);
  }
}

void sub_24F502E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  if (*a2 == a2[1]) {
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV();
  }
  if (!*(void *)(a1 + 280)) {
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV();
  }
  uint64_t v8 = *(void *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  LODWORD(v52[0]) = -1;
  int v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v8 + 8), (uint64_t)v52, (unsigned __int8 *)__p);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  LODWORD(__p[0]) = v9;
  uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v10 + 8), (unsigned int *)__p);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  unint64_t v14 = (v12 - v13) >> 2;
  std::vector<float>::vector(__p, v14 * v14);
  unint64_t v15 = (float *)__p[0];
  if (v12 != v13)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (*(void *)(*(void *)(*(void *)(a1 + 280) + 40) + 112)
         - *(void *)(*(void *)(*(void *)(a1 + 280) + 40) + 104)) >> 2;
    uint64_t v18 = *(void *)(v11 + 40);
    unint64_t v19 = (*(void *)(v11 + 48) - v18) >> 2;
    uint64_t v20 = *(void *)(a1 + 72);
    unint64_t v21 = v14 - 1;
    if (v14 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = (v12 - v13) >> 2;
    }
    uint64_t v23 = (float *)((char *)__p[0] + 4);
    uint64_t v24 = 4 * v14 + 4;
    unsigned int v25 = (float *)((char *)__p[0] + 4 * v14);
    uint64_t v26 = (unsigned int *)(v20 + 4);
    do
    {
      unint64_t v27 = *(unsigned int *)(v20 + 4 * v16);
      v15[v16 + v16 * v14] = 0.0;
      if (++v16 < v14)
      {
        uint64_t v28 = *(void *)(a1 + 288);
        int v29 = *(_DWORD *)(v28 + 4 * v27) * v17;
        uint64_t v30 = *a2;
        unint64_t v31 = v26;
        uint64_t v32 = v25;
        unint64_t v33 = v23;
        unint64_t v34 = v21;
        do
        {
          unsigned int v36 = *v31++;
          uint64_t v35 = v36;
          if (v19 <= v36) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          if (v19 <= v27) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          float v37 = *(float *)(v30 + 4 * (*(_DWORD *)(v18 + 4 * v27) + *(_DWORD *)(v28 + 4 * v35) * v17));
          if (v37 >= *(float *)(v30 + 4 * (*(_DWORD *)(v18 + 4 * v35) + v29))) {
            float v37 = *(float *)(v30 + 4 * (*(_DWORD *)(v18 + 4 * v35) + v29));
          }
          *uint64_t v32 = v37;
          *v33++ = v37;
          v32 += v14;
          --v34;
        }
        while (v34);
      }
      --v21;
      uint64_t v23 = (float *)((char *)v23 + v24);
      unsigned int v25 = (float *)((char *)v25 + v24);
      ++v26;
    }
    while (v16 != v22);
  }
  cv3d::cv::gess::isochart::IsoMap::Init((cv3d::cv::gess::isochart::IsoMap *)(a1 + 120), (v12 - v13) >> 2, v15);
  cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen((cv3d::cv::gess::isochart::IsoMap *)(a1 + 120), a3, a4);
  if (*a4 != a3) {
    __assert_rtn("CalculateLandmarkUV", "MeshOptimizeBoundaries.cpp", 679, "select_primary_dimension == calculated_primary_dimension");
  }
  std::vector<float>::vector(v52, v14 * a3);
  cv3d::cv::gess::isochart::IsoMap::GetDestineVectors((cv3d::cv::gess::isochart::IsoMap *)(a1 + 120), a3, v52[0]);
  char v38 = v52[0];
  uint64_t v39 = *(void *)(a1 + 40);
  unsigned int v55 = *(_DWORD *)(a1 + 192);
  uint64_t v40 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v39 + 80), &v55);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 32))(v40, (uint64_t)(*(void *)(*(void *)(a1 + 40) + 112) - *(void *)(*(void *)(a1 + 40) + 104)) >> 2);
  if (v12 != v13)
  {
    uint64_t v41 = 0;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    unint64_t v42 = (int *)(v38 + 1);
    do
    {
      unint64_t v43 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v41);
      int v44 = *(v42 - 1);
      uint64_t v45 = *(void *)(a1 + 40);
      unsigned int v55 = *(_DWORD *)(a1 + 192);
      uint64_t v46 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v45 + 80), &v55);
      uint64_t v47 = *(void *)(v46 + 40);
      if (v43 >= (*(void *)(v46 + 48) - v47) >> 3
        || (*(_DWORD *)(v47 + 8 * v43) = v44,
            int v48 = *v42,
            uint64_t v49 = *(void *)(a1 + 40),
            unsigned int v55 = *(_DWORD *)(a1 + 192),
            uint64_t v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v49 + 80), &v55), v51 = *(void *)(v50 + 40), v43 >= (*(void *)(v50 + 48) - v51) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v51 + 8 * v43 + 4) = v48;
      ++v41;
      v42 += a3;
    }
    while (v14 != v41);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24F5032C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle(uint64_t a1, unsigned int a2, unsigned int a3, cv3d::cv::gess::isochart::CGraphcut *a4, uint64_t *a5, void *a6, void *a7, unint64_t a8, float a9, uint64_t *a10, void *a11, float **a12, void *a13)
{
  uint64_t v13 = *(void *)(a1 + 256);
  uint64_t v80 = 0;
  double v81 = 0;
  double v82 = 0;
  unint64_t v14 = *(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152);
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    uint64_t v24 = (v14 >> 2);
    int64_t v71 = (uint64_t *)(v13 + 16 * a3);
    unint64_t v72 = (uint64_t *)(v13 + 16 * a2);
    do
    {
      uint64_t v25 = *a5;
      *(_DWORD *)(*a5 + 4 * v23) = -1;
      if ((*(void *)(*a7 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23))
      {
        int v26 = *(_DWORD *)(*a6 + 4 * v23);
        if (v26 == a2 || v26 == a3)
        {
          uint64_t v28 = (char *)v80;
          uint64_t v29 = (v22 - (unsigned char *)v80) >> 2;
          *(_DWORD *)(v25 + 4 * v23) = v29;
          if (v22 >= v82)
          {
            unint64_t v31 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v82 - v28;
            if ((v82 - v28) >> 1 > v31) {
              unint64_t v31 = v32 >> 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v82, v33);
              uint64_t v28 = (char *)v80;
              uint64_t v22 = v81;
            }
            else
            {
              unint64_t v34 = 0;
            }
            uint64_t v35 = &v34[4 * v29];
            *(_DWORD *)uint64_t v35 = v23;
            uint64_t v30 = v35 + 4;
            while (v22 != v28)
            {
              int v36 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            uint64_t v80 = v35;
            double v81 = v30;
            double v82 = &v34[4 * v33];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v22 = v23;
            uint64_t v30 = v22 + 4;
          }
          double v81 = v30;
          uint64_t v22 = v30;
        }
      }
      ++v23;
    }
    while (v23 != v24);
    if (v80 != v22)
    {
      long long v70 = a4;
      uint64_t v37 = 0;
      std::vector<int>::size_type v38 = (v22 - (unsigned char *)v80) >> 2;
      if (v38 <= 1) {
        uint64_t v39 = 1;
      }
      else {
        uint64_t v39 = (v22 - (unsigned char *)v80) >> 2;
      }
      uint64_t v75 = v39;
      float v40 = 0.0;
      uint64_t v41 = a10;
      do
      {
        uint64_t v42 = *((unsigned int *)v80 + v37);
        float v43 = cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion(a1, *((_DWORD *)v80 + v37), *v72, a12, a8, v41);
        float v44 = vabds_f32(v43, cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion(a1, v42, *v71, a12, a8, v41));
        *(float *)(*a13 + 4 * v42) = v44;
        float v40 = v40 + v44;
        ++v37;
        uint64_t v41 = a10;
      }
      while (v75 != v37);
      std::vector<int>::vector(&v79, v38);
      cv3d::cv::gess::isochart::CGraphcut::Clear(v70);
      cv3d::cv::gess::isochart::CMaxFlow::InitGraphCut(v70, v38, 0, 6);
      uint64_t v45 = 0;
      do
      {
        int v47 = cv3d::cv::gess::isochart::CGraphcut::AddNode(v70);
        v79.__begin_[v45++] = v47;
      }
      while (v75 != v45);
      uint64_t v48 = 0;
      do
      {
        unsigned int v78 = *((_DWORD *)v80 + v48);
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(void *)(a1 + 40), &v78, __p);
        for (uint64_t i = 0; i != 12; i += 4)
        {
          unsigned int v76 = *(_DWORD *)((char *)__p[0] + i);
          uint64_t v50 = *(void *)(a1 + 40);
          uint64_t v51 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v50 + 104, &v76);
          int v52 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v50, *(_DWORD *)(v50 + 180), *v51);
          if ((*v52 & v53) == 0)
          {
            uint64_t v54 = *(void *)(a1 + 40) + 104;
            unsigned int v55 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v54, &v76);
            unint64_t v56 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v54, v55) + 16);
            if ((*(void *)(*a7 + ((v56 >> 3) & 0x1FFFFFF8)) >> v56))
            {
              std::vector<int>::size_type v57 = *(unsigned int *)(*a5 + 4 * v56);
              if (v57 != -1)
              {
                if (v38 <= v57)
                {
                  int v68 = 811;
                  uint64_t v69 = "face_graph_node_id[adjacent_face_id] < node_number";
                  goto LABEL_69;
                }
                std::vector<int>::size_type v58 = *(unsigned int *)(*a5 + 4 * v78);
                if (v38 <= v58)
                {
                  int v68 = 812;
                  uint64_t v69 = "face_graph_node_id[father_fh.Index()] < node_number";
LABEL_69:
                  __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", v68, v69);
                }
                float v59 = 0.650000006 / ((float)(*(float *)(*a11 + 4 * v76) / a9) + 1.0);
                float v46 = (v40 + v40) / (float)v38;
                float v60 = v59
                    + (float)((float)((float)(*(float *)(*a13 + 4 * v78) + *(float *)(*a13 + 4 * v56)) / v46) * 0.35);
                cv3d::cv::gess::isochart::CGraphcut::AddEges(v70, v79.__begin_[v58], v79.__begin_[v57], v60, v60);
              }
            }
            else
            {
              std::vector<int>::size_type v61 = *(unsigned int *)(*a5 + 4 * v78);
              if (v38 <= v61) {
                __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 817, "face_graph_node_id[father_fh.Index()] < node_number");
              }
              float v62 = 3.4028e38;
              if (*(_DWORD *)(*a6 + 4 * v56) == a2) {
                float v63 = 3.4028e38;
              }
              else {
                float v63 = 0.0;
              }
              if (*(_DWORD *)(*a6 + 4 * v56) == a2) {
                float v62 = 0.0;
              }
              cv3d::cv::gess::isochart::CGraphcut::SetWeights(v70, v79.__begin_[v61], v63, v62);
            }
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v48;
      }
      while (v48 != v75);
      LODWORD(__p[0]) = 0;
      cv3d::cv::gess::isochart::CGraphcut::CutGraph(v70, (float *)__p);
      uint64_t v64 = 0;
      do
      {
        uint64_t v65 = *((unsigned int *)v80 + v64);
        std::vector<int>::size_type v66 = *(unsigned int *)(*a5 + 4 * v65);
        if (v38 <= v66) {
          __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 836, "face_graph_node_id[face_id] < node_number");
        }
        if (cv3d::cv::gess::isochart::CGraphcut::IsInSourceDomain(v70, v79.__begin_[v66])) {
          unsigned int v67 = a2;
        }
        else {
          unsigned int v67 = a3;
        }
        *(_DWORD *)(*a6 + 4 * v65) = v67;
        ++v64;
      }
      while (v75 != v64);
      if (v79.__begin_)
      {
        v79.__end_ = v79.__begin_;
        operator delete(v79.__begin_);
      }
      uint64_t v22 = (char *)v80;
    }
    if (v22)
    {
      double v81 = v22;
      operator delete(v22);
    }
  }
}

void sub_24F5038D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion(uint64_t a1, unsigned int a2, uint64_t a3, float **a4, unint64_t a5, uint64_t *a6)
{
  unsigned int v38 = a2;
  if (a5 >= 0x1A) {
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion();
  }
  uint64_t v7 = a5;
  std::vector<float>::vector(v37, 0x19uLL);
  std::vector<float>::vector(v36, 0x19uLL);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(void *)(a1 + 40), &v38, __p);
  for (uint64_t i = 0; i != 3; ++i)
  {
    while (1)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertGeodesicCoord(a1, (uint64_t *)v37, *((_DWORD *)__p[0] + i), (void *)a3, a4, v7, a6);
      if (v7) {
        break;
      }
      if (++i == 3) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = (float *)v37[0];
    uint64_t v13 = (float *)v36[0];
    uint64_t v14 = v7;
    do
    {
      float v15 = *v12++;
      float *v13 = v15 + *v13;
      ++v13;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = (float *)v36[0];
  do
  {
    *uint64_t v16 = *v16 / 3.0;
    ++v16;
    --v7;
  }
  while (v7);
LABEL_11:
  uint64_t v18 = *(void *)(a3 + 72);
  uint64_t v17 = *(void *)(a3 + 80);
  uint64_t v19 = *(void *)(a3 + 40);
  unsigned int v39 = *(_DWORD *)(a3 + 192);
  uint64_t v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v19 + 80), &v39);
  unint64_t v21 = (v17 - v18) >> 2;
  if (v17 == v18)
  {
    float v27 = 0.0;
    if (!__p[0]) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v24 = v20 + 40;
    uint64_t v23 = *(void *)(v20 + 40);
    unint64_t v25 = (*(void *)(v24 + 8) - v23) >> 3;
    if (v21 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = (v17 - v18) >> 2;
    }
    float v27 = 0.0;
    do
    {
      unint64_t v28 = *(unsigned int *)(*(void *)(a3 + 72) + 4 * v22);
      if (v25 <= v28) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      uint64_t v29 = 0;
      float v30 = 0.0;
      float v31 = (float)((float)((float)(*(float *)v36[0] - *(float *)(v23 + 8 * v28))
                          * (float)(*(float *)v36[0] - *(float *)(v23 + 8 * v28)))
                  + 0.0)
          + (float)((float)(*((float *)v36[0] + 1) - *(float *)(v23 + 8 * v28 + 4))
                  * (float)(*((float *)v36[0] + 1) - *(float *)(v23 + 8 * v28 + 4)));
      uint64_t v32 = ((uint64_t)(*(void *)(*(void *)(a1 + 40) + 112) - *(void *)(*(void *)(a1 + 40) + 104)) >> 2)
          * *(unsigned int *)(*(void *)(a3 + 288) + 4 * v28);
      do
      {
        float v30 = v30 + *(float *)(*a6 + 4 * (v32 + *(unsigned int *)((char *)__p[0] + v29)));
        v29 += 4;
      }
      while (v29 != 12);
      float v33 = sqrtf(v31) + (float)(v30 / -3.0);
      float v27 = v27 + (float)(v33 * v33);
      ++v22;
    }
    while (v22 != v26);
  }
  __p[1] = __p[0];
  operator delete(__p[0]);
LABEL_23:
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return v27 / (float)v21;
}

void sub_24F503BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertGeodesicCoord(uint64_t result, uint64_t *a2, int a3, void *a4, float **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = a4[9];
  uint64_t v7 = a4[10];
  unint64_t v9 = (v7 - v8) >> 2;
  if (v7 != v8)
  {
    uint64_t v10 = (float *)a4[21];
    uint64_t v11 = (*(void *)(*(void *)(result + 40) + 112) - *(void *)(*(void *)(result + 40) + 104)) >> 2;
    uint64_t v12 = *(void *)(result + 288);
    uint64_t v13 = *a7;
    uint64_t v14 = *a5;
    if (v9 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (v7 - v8) >> 2;
    }
    uint64_t v16 = (unsigned int *)a4[9];
    do
    {
      unsigned int v17 = *v16++;
      double result = (a3 + *(_DWORD *)(v12 + 4 * v17) * v11);
      float v18 = *(float *)(v13 + 4 * result) * *(float *)(v13 + 4 * result);
      *uint64_t v14 = v18;
      float v19 = *v10++;
      *v14++ = v19 - v18;
      --v15;
    }
    while (v15);
  }
  if (a6)
  {
    uint64_t v20 = 0;
    uint64_t v21 = a4[19];
    uint64_t v22 = a4[20];
    uint64_t v23 = *a2;
    uint64_t v24 = *a5;
    if (v9 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = (v7 - v8) >> 2;
    }
    uint64_t v26 = 4 * v9;
    do
    {
      *(_DWORD *)(v23 + 4 * v20) = 0;
      float v27 = 0.0;
      if (v7 != v8)
      {
        unint64_t v28 = v24;
        double result = v22;
        uint64_t v29 = v25;
        do
        {
          float v30 = *v28++;
          float v31 = v30;
          float v32 = *(float *)result;
          result += 4;
          float v27 = v27 + (float)(v31 * v32);
          *(float *)(v23 + 4 * v20) = v27;
          --v29;
        }
        while (v29);
      }
      float v33 = *(float *)(v21 + 4 * v20);
      float v34 = sqrtf(v33);
      float v35 = v34 + v34;
      if (v33 >= 0.0) {
        float v36 = v35;
      }
      else {
        float v36 = 0.0;
      }
      *(float *)(v23 + 4 * v20++) = v27 / v36;
      v22 += v26;
    }
    while (v20 != a6);
  }
  return result;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        }
        else
        {
          long long v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v11 = a3[23];
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *((void *)a3 + 1);
        }
        if (size != v11) {
          goto LABEL_22;
        }
        if (v12 >= 0) {
          uint64_t v13 = a3;
        }
        else {
          uint64_t v13 = *(unsigned __int8 **)a3;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            uint64_t v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15) {
                goto LABEL_29;
              }
            }
LABEL_22:
            BOOL v16 = 0;
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_23:
            }
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            BOOL v16 = *(void *)(*v3 + 32) == (void)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>;
            if (v9 < 0) {
              goto LABEL_23;
            }
          }
          if (v16) {
            return v6;
          }
          goto LABEL_25;
        }
        unsigned int v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_29;
        }
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      uint64_t v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

BOOL cv3d::cv::gess::isochart::IfNewPositionAcceptable(uint64_t a1, float *a2, _DWORD *a3, int *a4, _DWORD *a5)
{
  float v5 = *a2;
  float v6 = *(float *)(a1 + 28);
  if (*a2 < v6 && (*a3 | 2) == 2 || v5 > v6 && (*a3 | 2) == 3) {
    return 1;
  }
  if (vabds_f32(v5, v6) >= 0.000001) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  if (*a4 < v7) {
    return 1;
  }
  return fabsf((float)(*a4 - v7)) < (float)((float)v7 * 0.05) && *(_DWORD *)(a1 + 16) < *a5;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, char a7, int a8)
{
  int v10 = *a6;
  *(void *)(a1 + 80) = 0;
  uint64_t v11 = a1 + 80;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 76) = v10;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = -1;
  int v12 = (_DWORD *)(a1 + 104);
  *(void *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 120) = 1058642330;
  *(_WORD *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 180) = 0;
  *(void *)(a1 + 164) = 0;
  *(void *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(unsigned char *)(a1 + 752) = a7;
  *(_DWORD *)(a1 + 756) = a8;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v46 = 0;
  *int v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&v46, (unsigned __int8 *)__p);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v13, (_DWORD *)(v11 + 28), (unsigned __int8 *)__p);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v46) = 0;
  *(_DWORD *)(a1 + 112) = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v14 + 56), (uint64_t)&v46, (unsigned __int8 *)__p);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  int v47 = 0;
  uint64_t v46 = 0;
  *(_DWORD *)(a1 + 116) = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v15 + 56), (uint64_t)&v46, (unsigned __int8 *)__p);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  if (*v12 == -1)
  {
    uint64_t v41 = "uvs_ah_.Valid()";
    int v42 = 75;
    goto LABEL_44;
  }
  if (*(_DWORD *)(v11 + 28) == -1)
  {
    uint64_t v41 = "g_ah_.Valid()";
    int v42 = 76;
    goto LABEL_44;
  }
  if (*(_DWORD *)(a1 + 112) == -1)
  {
    uint64_t v41 = "f_gid_ah_.Valid()";
    int v42 = 77;
    goto LABEL_44;
  }
  if (*(_DWORD *)(a1 + 116) == -1)
  {
    uint64_t v41 = "uv_ind_ah_.Valid()";
    int v42 = 78;
LABEL_44:
    __assert_rtn("TetrisPacking", "TetrisPacking.cpp", v42, v41);
  }
  uint64_t v16 = *(void *)(a1 + 32);
  LODWORD(v46) = *(_DWORD *)(v11 + 28);
  uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v16 + 80), (unsigned int *)&v46);
  unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v21 = *(void *)(v19 + 152);
  uint64_t v20 = *(void *)(v19 + 160);
  unsigned int v43 = v18;
  uint64_t v22 = v18;
  std::vector<unsigned int>::reserve((std::vector<int> *)v11, v18);
  unint64_t v23 = v20 - v21;
  if (((v20 - v21) & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v24 = 0;
    int v25 = 0;
    uint64_t v26 = (v23 >> 2);
    do
    {
      if (v25 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(*(void *)(a1 + 32), *(_DWORD *)(a1 + 112), v24))
      {
        unint64_t v28 = *(_DWORD **)(a1 + 88);
        unint64_t v27 = *(void *)(a1 + 96);
        if ((unint64_t)v28 >= v27)
        {
          float v30 = *(_DWORD **)v11;
          uint64_t v31 = ((uint64_t)v28 - *(void *)v11) >> 2;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v27 - (void)v30;
          if (v33 >> 1 > v32) {
            unint64_t v32 = v33 >> 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            float v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v34);
            float v30 = *(_DWORD **)(a1 + 80);
            unint64_t v28 = *(_DWORD **)(a1 + 88);
          }
          else
          {
            float v35 = 0;
          }
          float v36 = &v35[4 * v31];
          *(_DWORD *)float v36 = v24;
          uint64_t v29 = v36 + 4;
          while (v28 != v30)
          {
            int v37 = *--v28;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          *(void *)(a1 + 80) = v36;
          *(void *)(a1 + 88) = v29;
          *(void *)(a1 + 96) = &v35[4 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          _DWORD *v28 = v24;
          uint64_t v29 = v28 + 1;
        }
        *(void *)(a1 + 88) = v29;
        ++v25;
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (v22 != (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2) {
    __assert_rtn("TetrisPacking", "TetrisPacking.cpp", 91, "g_starts_.size() == g_size");
  }
  *(_DWORD *)(a1 + 72) = v43;
  unsigned int v38 = **(_DWORD **)(a1 + 48);
  if (**(_DWORD **)(a1 + 56) < v38) {
    unsigned int v38 = **(_DWORD **)(a1 + 56);
  }
  float v39 = (float)v38 * 0.0078125;
  if (v39 >= *(float *)(a1 + 76)) {
    float v39 = *(float *)(a1 + 76);
  }
  *(float *)(a1 + 76) = v39;
  return a1;
}

void sub_24F50447C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v20 = (void *)v17[91];
  if (v20)
  {
    v17[92] = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)v17[88];
  if (v21)
  {
    v17[89] = v21;
    operator delete(v21);
  }
  std::string __p = a9;
  std::vector<cv3d::cv::gess::isochart::ChartInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v22 = (void *)v17[79];
  if (v22)
  {
    v17[80] = v22;
    operator delete(v22);
  }
  std::string __p = v18 + 66;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = v18 + 63;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v23 = 0;
  while (1)
  {
    uint64_t v24 = (void *)v17[v23 + 70];
    if (v24)
    {
      v17[v23 + 71] = v24;
      operator delete(v24);
    }
    v23 -= 3;
    if (v23 == -12)
    {
      uint64_t v25 = 0;
      while (1)
      {
        uint64_t v26 = (void *)v17[v25 + 58];
        if (v26)
        {
          v17[v25 + 59] = v26;
          operator delete(v26);
        }
        v25 -= 3;
        if (v25 == -12)
        {
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = (void *)v17[v27 + 46];
            if (v28)
            {
              v17[v27 + 47] = v28;
              operator delete(v28);
            }
            v27 -= 3;
            if (v27 == -12)
            {
              std::string __p = a10;
              std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              uint64_t v29 = *v18;
              if (*v18)
              {
                v17[11] = v29;
                operator delete(v29);
              }
              std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v17);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

void cv3d::cv::gess::isochart::TetrisPacking::Run(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  cv3d::cv::gess::isochart::TetrisPacking::Initialize(this);
  uint64_t v2 = *((void *)this + 3);
  if (!v2 || ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2) & 1) == 0)
  {
    uint64_t v3 = *((void *)this + 79);
    uint64_t v4 = *((void *)this + 80) - v3;
    if (v4)
    {
      unint64_t v5 = 0;
      unint64_t v6 = v4 >> 2;
LABEL_5:
      *((void *)this + 82) = *(unsigned int *)(v3 + 4 * v5);
      BOOL v7 = v5++ == v6 - 1;
      long long v8 = (unsigned int *)(v3 + 4 * v5);
      if (v7) {
        long long v8 = (unsigned int *)((char *)this + 72);
      }
      *((void *)this + 83) = *v8;
      uint64_t v9 = *((void *)this + 3);
      if (!v9 || ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9) & 1) == 0)
      {
        std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)this + 73);
        std::vector<std::vector<unsigned char>>::resize((uint64_t *)this + 73, *((void *)this + 33));
        unint64_t v10 = *((void *)this + 33);
        if (v10)
        {
          uint64_t v11 = 0;
          for (unint64_t i = 0; i < v10; ++i)
          {
            uint64_t v13 = (unint64_t *)(*((void *)this + 73) + v11);
            unint64_t v14 = *((void *)this + 32);
            unint64_t v15 = v13[1] - *v13;
            if (v14 <= v15)
            {
              if (v14 < v15) {
                v13[1] = *v13 + v14;
              }
            }
            else
            {
              std::vector<unsigned char>::__append(v13, v14 - v15);
              unint64_t v10 = *((void *)this + 33);
            }
            v11 += 24;
          }
        }
        *(float *)&double v16 = cv3d::cv::gess::isochart::TetrisPacking::InitialSpacePercent(this);
        while (1)
        {
          *((unsigned char *)this + 124) = 0;
          *(float *)&double v16 = cv3d::cv::gess::isochart::TetrisPacking::CreateUVAtlas(this, v16, v17, v18, v19);
          uint64_t v20 = *((void *)this + 3);
          if (v20)
          {
            if ((*(uint64_t (**)(uint64_t, float))(*(void *)v20 + 48))(v20, *(float *)&v16)) {
              break;
            }
          }
          if (*((unsigned char *)this + 124))
          {
            ++*((_DWORD *)this + 41);
            cv3d::cv::gess::isochart::TetrisPacking::AdjustEstimatedPercent((uint64_t)this);
          }
          if (*((unsigned char *)this + 125)) {
            break;
          }
          if (!*((unsigned char *)this + 124))
          {
            cv3d::cv::gess::isochart::TetrisPacking::ComputeFinalAtlasRect((uint64_t)this);
            cv3d::cv::gess::isochart::TetrisPacking::Normalize(this);
            *((_DWORD *)this + 41) = 0;
            uint64_t v3 = *((void *)this + 79);
            unint64_t v6 = (*((void *)this + 80) - v3) >> 2;
            if (v5 < v6) {
              goto LABEL_5;
            }
            goto LABEL_24;
          }
        }
      }
    }
    else
    {
LABEL_24:
      uint64_t v21 = *((void *)this + 3);
      if (!v21 || ((*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21) & 1) == 0)
      {
        std::vector<unsigned int>::vector(&v63, *((unsigned int *)this + 18));
        uint64_t v22 = *((void *)this + 79);
        uint64_t v23 = *((void *)this + 80) - v22;
        if (v23)
        {
          uint64_t v24 = 0;
          uint64_t v25 = v23 >> 2;
          BOOL v26 = v23 >> 2 != 0;
          uint64_t v27 = (v23 >> 2) - 1;
          begiuint64_t n = v63.__begin_;
          if (v27 == 0 || !v26) {
            uint64_t v25 = 1;
          }
          do
          {
            uint64_t v29 = *(unsigned int *)(v22 + 4 * v24);
            uint64_t v30 = v24 + 1;
            uint64_t v31 = (unsigned int *)(v22 + 4 * (v24 + 1));
            if (v24 == v27) {
              uint64_t v31 = (unsigned int *)((char *)this + 72);
            }
            uint64_t v32 = *v31;
            if (v29 < v32)
            {
              uint64_t v33 = v32 - v29;
              unint64_t v34 = (int *)(*((void *)this + 88) + 4 * v29);
              do
              {
                int v35 = *v34++;
                begin[v35] = v24;
                --v33;
              }
              while (v33);
            }
            ++v24;
          }
          while (v30 != v25);
        }
        float v36 = (uint64_t *)*((void *)this + 4);
        if (v36[20] != v36[19])
        {
          unint64_t v37 = 0;
          unsigned int v38 = 1;
          do
          {
            LODWORD(__p[0]) = *((_DWORD *)this + 28);
            uint64_t v39 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v36 + 7, (unsigned int *)__p);
            uint64_t v40 = *(void *)(v39 + 40);
            if (v37 >= (*(void *)(v39 + 48) - v40) >> 2
              || (unsigned int v41 = v63.__begin_[*(unsigned int *)(v40 + 4 * v37)],
                  uint64_t v42 = *((void *)this + 4),
                  LODWORD(__p[0]) = *((_DWORD *)this + 28),
                  v43 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v42 + 56), (unsigned int *)__p), uint64_t v44 = *(void *)(v43 + 40), v37 >= (*(void *)(v43 + 48) - v44) >> 2))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(_DWORD *)(v44 + 4 * v37) = v41;
            unint64_t v37 = v38;
            float v36 = (uint64_t *)*((void *)this + 4);
            ++v38;
          }
          while (v37 < (v36[20] - v36[19]) >> 2);
        }
        int v62 = -1;
        std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
        __int16 v64 = 0;
        int v45 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)v36 + 7, (uint64_t)&v64, (unsigned __int8 *)__p);
        int v62 = v45;
        if (v61 < 0) {
          operator delete(__p[0]);
        }
        if (v45 == -1)
        {
          uint64_t v46 = *((void *)this + 4);
          std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
          cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>(v46, &v62, (long long *)__p);
          if (v61 < 0) {
            operator delete(__p[0]);
          }
        }
        if (v62 == -1) {
          __assert_rtn("Run", "TetrisPacking.cpp", 155, "face_gid_ah.Valid()");
        }
        int v47 = (uint64_t *)*((void *)this + 4);
        if (v47[20] != v47[19])
        {
          unint64_t v48 = 0;
          unsigned int v49 = 1;
          do
          {
            LODWORD(__p[0]) = *((_DWORD *)this + 28);
            uint64_t v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v47 + 7, (unsigned int *)__p);
            uint64_t v51 = *(void *)(v50 + 40);
            if (v48 >= (*(void *)(v50 + 48) - v51) >> 2
              || (int v52 = *(_DWORD *)(v51 + 4 * v48),
                  uint64_t v53 = *((void *)this + 4),
                  LODWORD(__p[0]) = v62,
                  uint64_t v54 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)(v53 + 56), (unsigned int *)__p), v55 = *(void *)(v54 + 40), v48 >= (*(void *)(v54 + 48) - v55) >> 1))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(_WORD *)(v55 + 2 * v48) = v52;
            unint64_t v48 = v49;
            int v47 = (uint64_t *)*((void *)this + 4);
            ++v49;
          }
          while (v48 < (v47[20] - v47[19]) >> 2);
        }
        if (*((_DWORD *)this + 28) != -1)
        {
          cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v47 + 7, (unsigned int *)this + 28);
          int v47 = (uint64_t *)*((void *)this + 4);
        }
        *((_DWORD *)this + 28) = -1;
        LODWORD(__p[0]) = *((_DWORD *)this + 27);
        uint64_t v56 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v47 + 10, (unsigned int *)__p);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 32))(v56, (uint64_t)(*((void *)this + 80) - *((void *)this + 79)) >> 2);
        uint64_t v57 = *((void *)this + 4);
        LODWORD(__p[0]) = *((_DWORD *)this + 27);
        uint64_t v58 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v57 + 80), (unsigned int *)__p);
        if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 16))(v58) >= 2) {
          cv3d::cv::gess::alg::SortFaceByGroupID(*((uint64_t ***)this + 4), v59);
        }
        if (v63.__begin_)
        {
          v63.__end_ = v63.__begin_;
          operator delete(v63.__begin_);
        }
      }
    }
  }
}

void sub_24F504B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::TetrisPacking::Initialize(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  *((float *)this + 33) = (float)**((unsigned int **)this + 7) / (float)**((unsigned int **)this + 6);
  std::vector<cv3d::cv::gess::isochart::ChartInfo>::resize((uint64_t *)this + 85, *((unsigned int *)this + 18));
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 704), *((unsigned int *)this + 18));
  std::vector<cv3d::cv::gess::math::Matrix4T<float>>::resize((uint64_t *)this + 91, *((unsigned int *)this + 18));
  float v2 = *((float *)this + 19);
  float v3 = (float)(2 * (unint64_t)**((unsigned int **)this + 7)) + (float)(v2 * 2.0);
  *((void *)this + 32) = (unint64_t)(float)((float)(2 * (unint64_t)**((unsigned int **)this + 6))
                                                   + (float)(v2 * 2.0));
  *((void *)this + 33) = (unint64_t)v3;
  cv3d::cv::gess::isochart::TetrisPacking::PrepareChartsInfo(this);
  cv3d::cv::gess::isochart::TetrisPacking::SortCharts(this);

  cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture(this);
}

float cv3d::cv::gess::isochart::TetrisPacking::InitialSpacePercent(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  *((_DWORD *)this + 30) = 1058642330;
  *((_DWORD *)this + 168) = 0;
  unint64_t v1 = *((void *)this + 82);
  unint64_t v2 = *((void *)this + 83);
  if (v1 >= v2)
  {
    uint64_t v3 = *((void *)this + 88);
    uint64_t v4 = *((void *)this + 85);
    float result = 0.0;
  }
  else
  {
    uint64_t v3 = *((void *)this + 88);
    uint64_t v4 = *((void *)this + 85);
    float result = 0.0;
    uint64_t v6 = *((void *)this + 82);
    do
      float result = *(float *)(v4 + 232 * *(unsigned int *)(v3 + 4 * v6++) + 8) + result;
    while (v2 != v6);
    *((float *)this + 168) = result;
  }
  signed int v7 = **((_DWORD **)this + 6);
  signed int v8 = **((_DWORD **)this + 7);
  uint64_t v9 = (float *)(v4 + 232 * *(unsigned int *)(v3 + 4 * v1) + 16);
  for (float i = 0.6; ; *((float *)this + 30) = i)
  {
    float v11 = sqrtf(result / (float)(i * (float)(v8 * v7)));
    *((float *)this + 72) = v11;
    if (v7 >= (int)vcvtps_s32_f32((float)(v9[4] - v9[2]) / v11)
      && v8 >= (int)vcvtps_s32_f32((float)(v9[5] - v9[3]) / v11))
    {
      break;
    }
    float i = i / 1.01;
  }
  return result;
}

float cv3d::cv::gess::isochart::TetrisPacking::CreateUVAtlas(cv3d::cv::gess::isochart::TetrisPacking *this, double a2, double a3, double a4, double a5)
{
  cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack(this, a2, a3, a4, a5);
  uint64_t v11 = *((void *)this + 82);
  uint64_t v12 = *((void *)this + 88);
  LODWORD(v13) = *(_DWORD *)(*((void *)this + 85) + 232 * *(unsigned int *)(v12 + 4 * v11) + 8);
  *((_DWORD *)this + 35) = LODWORD(v13);
  *((_DWORD *)this + 36) = 1;
  for (unint64_t i = v11 + 1; i < *((void *)this + 83); ++i)
  {
    uint64_t v15 = *((void *)this + 3);
    if (v15)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15)) {
        return *(float *)&v13;
      }
      uint64_t v12 = *((void *)this + 88);
    }
    cv3d::cv::gess::isochart::TetrisPacking::PutChart((uint64_t)this, *(_DWORD *)(v12 + 4 * i), v13, v6, v7, v8, v9, v10);
    if (*((unsigned char *)this + 124)) {
      break;
    }
    ++*((_DWORD *)this + 36);
    uint64_t v12 = *((void *)this + 88);
    LODWORD(v6) = *((_DWORD *)this + 35);
    *(float *)&double v13 = *(float *)(*((void *)this + 85) + 232 * *(unsigned int *)(v12 + 4 * i) + 8) + *(float *)&v6;
    *((_DWORD *)this + 35) = LODWORD(v13);
  }
  return *(float *)&v13;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::AdjustEstimatedPercent(uint64_t this)
{
  float v1 = *(float *)(this + 120);
  unsigned int v2 = *(_DWORD *)(this + 72);
  if (v2 > 0x1D)
  {
    float v4 = (float)((float)(1.0 - (float)(*(float *)(this + 140) / *(float *)(this + 672))) * 0.25)
       + (float)((float)(1.0 - (float)((float)*(int *)(this + 144) / (float)v2)) / 10.0);
    if (v4 < 0.02) {
      float v4 = 0.01;
    }
    if (v4 > 0.2) {
      float v4 = 0.2;
    }
    float v3 = v1 - v4;
    *(float *)(this + 120) = v3;
    if (*(_DWORD *)(this + 164) >= 0xC9u)
    {
      *(unsigned char *)(this + 125) = 1;
      *(_DWORD *)(*(void *)(this + 40) + 76) = 2;
      return this;
    }
  }
  else
  {
    float v3 = (float)(v1 * *(float *)(this + 136)) + -0.005;
    *(float *)(this + 120) = v3;
  }
  if (v3 <= 0.0)
  {
    float v3 = v1 * 0.9;
    *(float *)(this + 120) = v1 * 0.9;
  }
  *(float *)(this + 288) = sqrtf(*(float *)(this + 672)/ (float)(v3 * (float)(**(_DWORD **)(this + 56) * **(_DWORD **)(this + 48))));
  return this;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::ComputeFinalAtlasRect(uint64_t this)
{
  float v1 = *(float *)(this + 76);
  float v2 = (float)(*(_DWORD *)(this + 152) - *(_DWORD *)(this + 148)) - (float)(v1 * 2.0);
  float v3 = (float)(*(_DWORD *)(this + 160) - *(_DWORD *)(this + 156)) - (float)(v1 * 2.0);
  float v4 = (float)(int)v3;
  float v5 = (float)(int)v2;
  float v6 = *(float *)(this + 132);
  if ((float)(v4 / v5) <= v6)
  {
    int v7 = (int)v2;
    int v9 = vcvtms_s32_f32((float)(v5 * v6) + 0.5);
    int v8 = (int)v2;
  }
  else
  {
    int v7 = (int)v3;
    int v8 = vcvtms_s32_f32((float)(v4 / v6) + 0.5);
    int v9 = (int)v3;
  }
  *(_DWORD *)(this + 248) = v7;
  *(void *)(this + 272) = v8;
  *(void *)(this + 280) = v9;
  return this;
}

void cv3d::cv::gess::isochart::TetrisPacking::Normalize(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  float v2 = *((float *)this + 72);
  float v3 = *((float *)this + 19);
  float v4 = (float)*((int *)this + 39);
  float v54 = -(float)(v2 * (float)(v3 + (float)*((int *)this + 37)));
  float v55 = -(float)(v2 * (float)(v3 + v4));
  v53[0] = xmmword_24F570A10;
  v53[1] = xmmword_24F5715A0;
  v53[2] = xmmword_24F5715B0;
  uint64_t v56 = 0x3F80000000000000;
  float v47 = (float)(1.0 / v2) / (float)*((int *)this + 62);
  float v49 = v47;
  long long v48 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v52 = 0x3F80000000000000;
  uint64_t v5 = *((void *)this + 4);
  LODWORD(v45[0]) = *((_DWORD *)this + 26);
  uint64_t v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v5 + 80), (unsigned int *)v45);
  unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  LOBYTE(v45[0]) = 0;
  std::vector<BOOL>::vector(&__p, v7, (unsigned __int8 *)v45);
  unint64_t v8 = *((void *)this + 82);
  if (v8 < *((void *)this + 83))
  {
    int v9 = "Attribute.h";
    double v10 = "operator[]";
    do
    {
      uint64_t v11 = *(unsigned int *)(*((void *)this + 88) + 4 * v8);
      uint64_t v12 = *((void *)this + 10);
      if (v11 == *((_DWORD *)this + 18) - 1) {
        unint64_t v13 = ((*(void *)(*((void *)this + 4) + 160) - *(void *)(*((void *)this + 4) + 152)) >> 2);
      }
      else {
        unint64_t v13 = *(unsigned int *)(v12 + 4 * (v11 + 1));
      }
      unint64_t v14 = *(unsigned int *)(v12 + 4 * v11);
      if (*(unsigned char *)(*((void *)this + 85) + 232 * v11 + 4))
      {
        cv3d::cv::gess::math::Matrix4T<float>::operator*((uint64_t)&v47, (uint64_t)v53, v44);
        cv3d::cv::gess::math::Matrix4T<float>::operator*((uint64_t)v44, *((void *)this + 91) + (v11 << 6), v45);
        if (v14 >= v13) {
          goto LABEL_24;
        }
        float32x4_t v42 = (float32x4_t)v45[1];
        float32x4_t v43 = (float32x4_t)v45[0];
        float32x4_t v40 = (float32x4_t)v45[3];
        float32x4_t v41 = (float32x4_t)v45[2];
        while (1)
        {
          uint64_t v15 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((void *)this + 4), *((_DWORD *)this + 29), v14);
          for (uint64_t i = 0; i != 12; i += 4)
          {
            unint64_t v17 = *(unsigned int *)(v15 + i);
            unint64_t v18 = v17 >> 6;
            uint64_t v19 = 1 << v17;
            uint64_t v20 = *((void *)__p + v18);
            if ((v19 & v20) == 0)
            {
              *((void *)__p + vstd::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = v19 | v20;
              uint64_t v21 = *((void *)this + 4);
              LODWORD(v45[0]) = *((_DWORD *)this + 26);
              uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v21 + 80), (unsigned int *)v45);
              unint64_t v23 = *(unsigned int *)(v15 + i);
              uint64_t v24 = *(void *)(v22 + 40);
              if (v23 >= (*(void *)(v22 + 48) - v24) >> 3)
              {
                int v38 = 182;
                uint64_t v39 = "index < data_.size()";
                goto LABEL_30;
              }
              uint64_t v25 = (float *)(v24 + 8 * v23);
              float32x4_t v26 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v40, v43, *v25), v42, v25[1]), (float32x4_t)0, v41);
              float32x4_t v27 = vdivq_f32(v26, (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3));
              if (fabsf(v27.f32[2]) > 0.0000001)
              {
                int v38 = 256;
                double v10 = "Normalize";
                int v9 = "TetrisPacking.cpp";
                uint64_t v39 = "std::fabs(curr_uv_3.Z()) <= 10e-8";
LABEL_30:
                __assert_rtn(v10, v9, v38, v39);
              }
              *(void *)uint64_t v25 = v27.i64[0];
            }
          }
          if (++v14 == v13) {
            goto LABEL_24;
          }
        }
      }
      if (v14 < v13)
      {
        do
        {
          uint64_t v28 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((void *)this + 4), *((_DWORD *)this + 29), v14);
          for (uint64_t j = 0; j != 12; j += 4)
          {
            unint64_t v30 = *(unsigned int *)(v28 + j);
            unint64_t v31 = v30 >> 6;
            uint64_t v32 = 1 << v30;
            uint64_t v33 = *((void *)__p + v31);
            if ((v32 & v33) == 0)
            {
              *((void *)__p + v31) = v32 | v33;
              uint64_t v34 = *((void *)this + 4);
              LODWORD(v45[0]) = *((_DWORD *)this + 26);
              uint64_t v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v34 + 80), (unsigned int *)v45);
              unint64_t v36 = *(unsigned int *)(v28 + j);
              uint64_t v37 = *(void *)(v35 + 40);
              if (v36 >= (*(void *)(v35 + 48) - v37) >> 3) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(void *)(v37 + 8 * v36) = 0;
            }
          }
          ++v14;
        }
        while (v14 != v13);
      }
LABEL_24:
      ++v8;
    }
    while (v8 < *((void *)this + 83));
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_24F505368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::isochart::ChartInfo>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::isochart::ChartInfo>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<cv3d::cv::gess::isochart::ChartInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 232 * a2);
  }
}

void std::vector<cv3d::cv::gess::math::Matrix4T<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + (a2 << 6);
    }
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__append(a1, a2 - v2);
  }
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::PrepareChartsInfo(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  uint64_t v3 = *((void *)this + 4);
  LODWORD(v200) = *((_DWORD *)this + 26);
  uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v3 + 80), (unsigned int *)&v200);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4))
  {
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = 0;
      char v8 = 1;
      do
      {
        char v9 = v8;
        uint64_t v10 = *((void *)this + 4);
        LODWORD(v200) = *((_DWORD *)this + 26);
        uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v10 + 80), (unsigned int *)&v200);
        uint64_t v12 = *(void *)(v11 + 40);
        if (v5 >= (*(void *)(v11 + 48) - v12) >> 3) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        if (fabsf(*(float *)(v12 + 8 * v5 + 4 * v7)) == INFINITY)
        {
          uint64_t v13 = *((void *)this + 4);
          LODWORD(v200) = *((_DWORD *)this + 26);
          uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v13 + 80), (unsigned int *)&v200);
          uint64_t v15 = *(void *)(v14 + 40);
          if (v5 >= (*(void *)(v14 + 48) - v15) >> 3) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
          *(_DWORD *)(v15 + 8 * v5 + 4 * v7) = 0;
        }
        else
        {
          uint64_t v16 = *((void *)this + 4);
          LODWORD(v200) = *((_DWORD *)this + 26);
          uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v16 + 80), (unsigned int *)&v200);
          if (v5 >= (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 3) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
        }
        char v8 = 0;
        uint64_t v7 = 1;
      }
      while ((v9 & 1) != 0);
      uint64_t v18 = *((void *)this + 4);
      LODWORD(v200) = *((_DWORD *)this + 26);
      uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v18 + 80), (unsigned int *)&v200);
      unint64_t v5 = ++v6;
    }
    while ((*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19) > (unint64_t)v6);
  }
  if (*((_DWORD *)this + 18))
  {
    unint64_t v20 = 0;
    uint64_t v21 = 8;
    do
    {
      float ChartArea = cv3d::cv::gess::isochart::TetrisPacking::GetChartArea(this, v20);
      *(float *)(*((void *)this + 85) + v21) = ChartArea;
      float v23 = ChartArea + *((float *)this + 32);
      *((float *)this + 32) = v23;
      ++v20;
      v21 += 232;
    }
    while (v20 < *((unsigned int *)this + 18));
  }
  else
  {
    float v23 = *((float *)this + 32);
  }
  LOBYTE(v1) = **((unsigned char **)this + 8);
  long long v200 = 0u;
  long long v201 = 0u;
  int v202 = 1065353216;
  uint64_t v24 = *((void *)this + 4);
  v191.i32[0] = *((_DWORD *)this + 26);
  uint64_t v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v24 + 80), (unsigned int *)&v191);
  unint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(v199, v26);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v198, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v197, 3uLL);
  unsigned int v27 = *((_DWORD *)this + 18);
  if (v27)
  {
    unsigned int v28 = 0;
    uint64_t v29 = "index < data_.size()";
    unint64_t v30 = "Attribute.h";
    unint64_t v31 = "operator[]";
    uint64_t v32 = 136;
    float v33 = 5.0;
    float v174 = sqrtf(v23 / (float)v1);
    while (1)
    {
      uint64_t v175 = v32;
      unsigned int v34 = v28;
      uint64_t v35 = *((void *)this + 10);
      if (v28 == v27 - 1) {
        unint64_t v36 = ((*(void *)(*((void *)this + 4) + 160) - *(void *)(*((void *)this + 4) + 152)) >> 2);
      }
      else {
        unint64_t v36 = *(unsigned int *)(v35 + 4 * (v28 + 1));
      }
      unint64_t v179 = v36;
      unint64_t v176 = *(unsigned int *)(v35 + 4 * v28);
      if (v176 < v36)
      {
        uint64_t v37 = *(unsigned int *)(v35 + 4 * v28);
        do
        {
          uint64_t v38 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((void *)this + 4), *((_DWORD *)this + 29), v37);
          uint64_t v39 = *((void *)this + 4);
          v191.i32[0] = v37;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v39, (unsigned int *)&v191, v198);
          for (uint64_t i = 0; i != 12; i += 4)
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>((uint64_t)&v200, (unsigned int *)(v38 + i), (_DWORD *)(v38 + i));
          ++v37;
        }
        while (v37 != v179);
      }
      uint64_t v41 = *((void *)this + 4);
      v191.i32[0] = *((_DWORD *)this + 28);
      uint64_t v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v41 + 56), (unsigned int *)&v191);
      uint64_t v43 = *(void *)(v42 + 40);
      if (v176 >= (*(void *)(v42 + 48) - v43) >> 2) {
        break;
      }
      if (*(_DWORD *)(v43 + 4 * v176) != v34)
      {
        int v173 = 1147;
        unint64_t v31 = "PrepareChartsInfo";
        unint64_t v30 = "TetrisPacking.cpp";
        uint64_t v29 = "mesh_.attribute(f_gid_ah_)[fs] == curr_chart_id";
LABEL_167:
        __assert_rtn(v31, v30, v173, v29);
      }
      float v44 = 3.4028e38;
      int8x16_t v178 = (int8x16_t)xmmword_24F578940;
      for (unint64_t j = 1; j != 19; ++j)
      {
        float v46 = (float)((float)((float)j * v33) / 180.0) * 3.14159265;
        if (v46 > 1.57079633) {
          float v46 = 1.5708;
        }
        __float2 v47 = __sincosf_stret(v46);
        long long v48 = (uint64_t **)v201;
        if ((void)v201)
        {
          v49.f32[0] = -v47.__sinval;
          v49.i32[1] = LODWORD(v47.__cosval);
          float32x2_t v180 = v49;
          float32x2_t v50 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          float32x2_t v51 = (float32x2_t)0x80000000800000;
          do
          {
            unint64_t v52 = *((unsigned int *)v48 + 4);
            uint64_t v53 = *((void *)this + 4);
            v191.i32[0] = *((_DWORD *)this + 26);
            uint64_t v54 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v53 + 80), (unsigned int *)&v191);
            uint64_t v55 = *(void *)(v54 + 40);
            if (v52 >= (*(void *)(v54 + 48) - v55) >> 3) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            float32x2_t v56 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v47.__sinval), LODWORD(v47.__cosval)), *(float *)(v55 + 8 * v52)), v180, *(float *)(v55 + 8 * v52 + 4));
            float32x2_t v50 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v50, v56), (int8x8_t)v56, (int8x8_t)v50);
            float32x2_t v51 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v56, v51), (int8x8_t)v56, (int8x8_t)v51);
            long long v48 = (uint64_t **)*v48;
          }
          while (v48);
          float32x2_t v57 = vsub_f32(v51, v50);
          float v58 = vmul_lane_f32(v57, v57, 1).f32[0];
          if (v58 < v44)
          {
            v59.i64[0] = __PAIR64__(LODWORD(v47.__sinval), LODWORD(v47.__cosval));
            v59.u64[1] = (unint64_t)v180;
            int8x16_t v178 = v59;
            float v44 = v58;
          }
        }
      }
      float v60 = (uint64_t **)v201;
      float32x2_t v61 = (float32x2_t)0x7F0000007FLL;
      if ((void)v201)
      {
        float32x2_t v177 = (float32x2_t)vextq_s8(v178, v178, 8uLL).u64[0];
        unint64_t v62 = v179;
        do
        {
          unint64_t v63 = *((unsigned int *)v60 + 4);
          uint64_t v64 = *((void *)this + 4);
          v191.i32[0] = *((_DWORD *)this + 26);
          uint64_t v65 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v64 + 80), (unsigned int *)&v191);
          uint64_t v66 = *(void *)(v65 + 40);
          if (v63 >= (*(void *)(v65 + 48) - v66) >> 3) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          unsigned int v67 = (float *)(v66 + 8 * v63);
          float v181 = *v67;
          float v182 = v67[1];
          uint64_t v68 = *((void *)this + 4);
          v191.i32[0] = *((_DWORD *)this + 26);
          uint64_t v69 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v68 + 80), (unsigned int *)&v191);
          uint64_t v70 = *(void *)(v69 + 40);
          if (v63 >= (*(void *)(v69 + 48) - v70) >> 3) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(float32x2_t *)(v70 + 8 * v63) = vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)v178.i8, v181), v177, v182);
          float v60 = (uint64_t **)*v60;
        }
        while (v60);
        int64_t v71 = (uint64_t **)v201;
        float32x2_t v61 = (float32x2_t)0x7F0000007FLL;
        if ((void)v201)
        {
          float32x2_t v72 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          float32x2_t v73 = (float32x2_t)0x80000000800000;
          do
          {
            unint64_t v74 = *((unsigned int *)v71 + 4);
            uint64_t v75 = *((void *)this + 4);
            v191.i32[0] = *((_DWORD *)this + 26);
            uint64_t v76 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v75 + 80), (unsigned int *)&v191);
            uint64_t v77 = *(void *)(v76 + 40);
            if (v74 >= (*(void *)(v76 + 48) - v77) >> 3) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            float32x2_t v78 = *(float32x2_t *)(v77 + 8 * v74);
            float32x2_t v72 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v72, v78), (int8x8_t)v78, (int8x8_t)v72);
            float32x2_t v73 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v78, v73), (int8x8_t)v78, (int8x8_t)v73);
            int64_t v71 = (uint64_t **)*v71;
          }
          while (v71);
          float32x2_t v61 = vsub_f32(v73, v72);
        }
      }
      else
      {
        unint64_t v62 = v179;
      }
      float v79 = v61.f32[1];
      if (v61.f32[0] >= v61.f32[1]) {
        float v79 = v61.f32[0];
      }
      uint64_t v80 = *((void *)this + 85);
      if (v79 > v174)
      {
        float v81 = *(float *)(v80 + 232 * v34 + 8);
        double v82 = (uint64_t **)v201;
        float v183 = v174 / v79;
        if ((void)v201)
        {
          do
          {
            unint64_t v83 = *((unsigned int *)v82 + 4);
            uint64_t v84 = *((void *)this + 4);
            v191.i32[0] = *((_DWORD *)this + 26);
            uint64_t v85 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v84 + 80), (unsigned int *)&v191);
            uint64_t v86 = *(void *)(v85 + 40);
            if (v83 >= (*(void *)(v85 + 48) - v86) >> 3) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(float32x2_t *)(v86 + 8 * v83) = vmul_n_f32(*(float32x2_t *)(v86 + 8 * v83), v183);
            double v82 = (uint64_t **)*v82;
          }
          while (v82);
          uint64_t v80 = *((void *)this + 85);
        }
        float v87 = v183 * (float)(v183 * v81);
        *(float *)(v80 + 232 * v34 + 8) = v87;
        *((float *)this + 32) = *((float *)this + 32) - (float)(v81 - v87);
      }
      unint64_t v88 = 0;
      *(unsigned char *)(v80 + 232 * v34 + 4) = 1;
      do
      {
        float v89 = (float)v88 * 3.14159265 / 3.0 * 0.5;
        __float2 v90 = __sincosf_stret(v89);
        uint64_t v91 = (uint64_t **)v201;
        if ((void)v201)
        {
          v92.f32[0] = -v90.__sinval;
          v92.i32[1] = LODWORD(v90.__cosval);
          float32x2_t v184 = v92;
          float v93 = -3.4028e38;
          float v94 = 3.4028e38;
          float v95 = 3.4028e38;
          float v96 = -3.4028e38;
          do
          {
            unint64_t v97 = *((unsigned int *)v91 + 4);
            uint64_t v98 = *((void *)this + 4);
            v191.i32[0] = *((_DWORD *)this + 26);
            uint64_t v99 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v98 + 80), (unsigned int *)&v191);
            uint64_t v100 = *(void *)(v99 + 40);
            if (v97 >= (*(void *)(v99 + 48) - v100) >> 3) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            float32x2_t v101 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v90.__sinval), LODWORD(v90.__cosval)), *(float *)(v100 + 8 * v97)), v184, *(float *)(v100 + 8 * v97 + 4));
            if (v101.f32[0] < v94) {
              float v94 = v101.f32[0];
            }
            if (v101.f32[1] < v95) {
              float v95 = v101.f32[1];
            }
            if (v93 < v101.f32[0]) {
              float v93 = v101.f32[0];
            }
            if (v96 < v101.f32[1]) {
              float v96 = v101.f32[1];
            }
            *((float32x2_t *)v199[0] + v97) = v101;
            uint64_t v91 = (uint64_t **)*v91;
          }
          while (v91);
        }
        else
        {
          float v95 = 3.4028e38;
          float v96 = -3.4028e38;
          float v93 = -3.4028e38;
          float v94 = 3.4028e38;
        }
        uint64_t v102 = *((void *)this + 85);
        double v103 = (float *)(v102 + 232 * v34 + 72 * v88);
        v103[14] = v89;
        v103[8] = v93;
        v103[9] = v96;
        v103[6] = v94;
        v103[7] = v95;
        if (!v88)
        {
          float v104 = v93 - v94;
          if ((float)(v93 - v94) < (float)(v96 - v95)) {
            float v104 = v96 - v95;
          }
          *(float *)(v102 + 232 * v34) = v104;
        }
        std::string __p = 0;
        uint64_t v195 = 0;
        unsigned int v196 = 0;
        uint64_t v105 = *((void *)this + 4);
        v191.i32[0] = *((_DWORD *)this + 26);
        uint64_t v106 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v105 + 80), (unsigned int *)&v191);
        unint64_t v107 = (*(uint64_t (**)(uint64_t))(*(void *)v106 + 16))(v106);
        v191.i8[0] = 0;
        std::vector<BOOL>::vector(&v193, v107, (unsigned __int8 *)&v191);
        float v33 = 5.0;
        unint64_t v108 = v176;
        if (v176 < v62)
        {
          do
          {
            uint64_t v109 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((void *)this + 4), *((_DWORD *)this + 29), v108);
            uint64_t v110 = *((void *)this + 4);
            v191.i32[0] = v108;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v110, (unsigned int *)&v191, v197);
            for (uint64_t k = 0; k != 3; ++k)
            {
              uint64_t v112 = *((void *)this + 4) + 104;
              double v113 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v112, (unsigned int *)v197[0] + k);
              uint64_t v114 = cv3d::cv::gess::mesh::Topology::h(v112, v113);
              if (*(_DWORD *)(v114 + 16) == -1) {
                goto LABEL_171;
              }
              uint64_t v115 = *((void *)this + 4);
              v191.i32[0] = *((_DWORD *)this + 28);
              uint64_t v116 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v115 + 56), (unsigned int *)&v191);
              unint64_t v117 = *(unsigned int *)(v114 + 16);
              uint64_t v118 = *(void *)(v116 + 40);
              if (v117 >= (*(void *)(v116 + 48) - v118) >> 2) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              if (*(_DWORD *)(v118 + 4 * v117) != v34) {
                goto LABEL_171;
              }
              uint64_t v119 = *((void *)this + 4);
              v191.i32[0] = *((_DWORD *)this + 29);
              uint64_t v120 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(v119 + 56), (unsigned int *)&v191);
              unint64_t v121 = *(unsigned int *)(v114 + 16);
              uint64_t v122 = *(void *)(v120 + 40);
              if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v120 + 48) - v122) >> 2) <= v121) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              double v123 = (_DWORD *)(v122 + 12 * v121);
              int v124 = *(_DWORD *)(v109 + 4 * k);
              if (*v123 != v124 && v123[1] != v124 && v123[2] != v124)
              {
LABEL_171:
                uint64_t v125 = (unsigned __int16)(k + 1) % 3u;
                double v126 = (uint64_t *)((char *)v199[0] + 8 * *(unsigned int *)(v109 + 4 * v125));
                uint64_t v127 = *((void *)this + 85) + 232 * v34 + 16;
                v191.i64[0] = *((void *)v199[0] + *(unsigned int *)(v109 + 4 * k));
                v191.i64[1] = *v126;
                v128.i64[0] = v191.i64[1];
                v128.i64[1] = v191.i64[0];
                int8x16_t v192 = vbslq_s8((int8x16_t)vcgtq_f32(v191, v128), (int8x16_t)vdupq_lane_s64(v191.i64[1], 0), (int8x16_t)vdupq_lane_s64(v191.i64[0], 0));
                unint64_t v129 = v127 + 72 * v88;
                unint64_t v130 = *(void *)(v129 + 56);
                unint64_t v131 = *(void *)(v129 + 64);
                double v132 = (uint64_t *)(v129 + 56);
                if (v130 >= v131)
                {
                  uint64_t v133 = std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeInfo>((uint64_t *)(v127 + 72 * v88 + 48), &v191);
                }
                else
                {
                  *(float32x4_t *)unint64_t v130 = v191;
                  *(int8x16_t *)(v130 + 16) = v192;
                  uint64_t v133 = v130 + 32;
                }
                *double v132 = v133;
                if (*((_DWORD *)this + 189) == 2)
                {
                  unint64_t v134 = *(unsigned int *)(v109 + 4 * k);
                  double v135 = (char *)v193;
                  if (((*(void *)((char *)v193 + ((v134 >> 3) & 0x1FFFFFF8)) >> v134) & 1) == 0)
                  {
                    unint64_t v136 = v195;
                    if (v195 >= v196)
                    {
                      double v138 = (char *)__p;
                      uint64_t v139 = (v195 - (unsigned char *)__p) >> 2;
                      unint64_t v140 = v139 + 1;
                      if ((unint64_t)(v139 + 1) >> 62) {
                        goto LABEL_168;
                      }
                      uint64_t v141 = v196 - (unsigned char *)__p;
                      if ((v196 - (unsigned char *)__p) >> 1 > v140) {
                        unint64_t v140 = v141 >> 1;
                      }
                      if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v142 = v140;
                      }
                      if (v142)
                      {
                        unint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v196, v142);
                        double v138 = (char *)__p;
                        unint64_t v136 = v195;
                        LODWORD(v134) = *(_DWORD *)(v109 + 4 * k);
                      }
                      else
                      {
                        unint64_t v143 = 0;
                      }
                      uint64_t v144 = &v143[4 * v139];
                      *(_DWORD *)uint64_t v144 = v134;
                      double v137 = v144 + 4;
                      while (v136 != v138)
                      {
                        int v145 = *((_DWORD *)v136 - 1);
                        v136 -= 4;
                        *((_DWORD *)v144 - 1) = v145;
                        v144 -= 4;
                      }
                      std::string __p = v144;
                      uint64_t v195 = v137;
                      unsigned int v196 = &v143[4 * v142];
                      if (v138) {
                        operator delete(v138);
                      }
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v195 = v134;
                      double v137 = v136 + 4;
                    }
                    uint64_t v195 = v137;
                    double v135 = (char *)v193;
                    *(void *)((char *)v193 + (((unint64_t)*(unsigned int *)(v109 + 4 * k) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v109 + 4 * k);
                  }
                  unint64_t v146 = *(unsigned int *)(v109 + 4 * v125);
                  if (((*(void *)&v135[(v146 >> 3) & 0x1FFFFFF8] >> v146) & 1) == 0)
                  {
                    double v147 = v195;
                    if (v195 >= v196)
                    {
                      unint64_t v149 = (char *)__p;
                      uint64_t v150 = (v195 - (unsigned char *)__p) >> 2;
                      unint64_t v151 = v150 + 1;
                      if ((unint64_t)(v150 + 1) >> 62) {
LABEL_168:
                      }
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      uint64_t v152 = v196 - (unsigned char *)__p;
                      if ((v196 - (unsigned char *)__p) >> 1 > v151) {
                        unint64_t v151 = v152 >> 1;
                      }
                      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v153 = v151;
                      }
                      if (v153)
                      {
                        uint64_t v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v196, v153);
                        unint64_t v149 = (char *)__p;
                        double v147 = v195;
                        LODWORD(v146) = *(_DWORD *)(v109 + 4 * v125);
                      }
                      else
                      {
                        uint64_t v154 = 0;
                      }
                      uint64_t v155 = &v154[4 * v150];
                      *(_DWORD *)uint64_t v155 = v146;
                      uint64_t v148 = v155 + 4;
                      while (v147 != v149)
                      {
                        int v156 = *((_DWORD *)v147 - 1);
                        v147 -= 4;
                        *((_DWORD *)v155 - 1) = v156;
                        v155 -= 4;
                      }
                      std::string __p = v155;
                      uint64_t v195 = v148;
                      unsigned int v196 = &v154[4 * v153];
                      if (v149) {
                        operator delete(v149);
                      }
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v195 = v146;
                      uint64_t v148 = v147 + 4;
                    }
                    uint64_t v195 = v148;
                    *(void *)((char *)v193 + (((unint64_t)*(unsigned int *)(v109 + 4 * v125) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v109 + 4 * v125);
                  }
                }
              }
            }
            ++v108;
            unint64_t v62 = v179;
          }
          while (v108 != v179);
        }
        if (!v88)
        {
          for (uint64_t m = 0; m != 144; m += 72)
            std::vector<cv3d::cv::gess::isochart::EdgeInfo>::reserve((uint64_t *)(*((void *)this + 85) + v175 + m), (uint64_t)(*(void *)(*((void *)this + 85) + 232 * v34 + 72)- *(void *)(*((void *)this + 85) + 232 * v34 + 64)) >> 5);
        }
        if (*((_DWORD *)this + 189) == 2)
        {
          uint64_t v188 = 0;
          unsigned int v189 = 0;
          uint64_t v190 = 0;
          cv3d::cv::gess::internal::Get2DConvexHull((char **)&__p, (uint64_t)v199[0], (char **)&v188);
          float32x4_t v185 = 0;
          unint64_t v186 = 0;
          unint64_t v187 = 0;
          std::vector<cv3d::cv::gess::isochart::EdgeInfo>::reserve((uint64_t *)&v185, (v189 - (unsigned char *)v188) >> 2);
          uint64_t v159 = (unsigned int *)v188;
          uint64_t v158 = v189;
          if (v189 != v188)
          {
            unint64_t v160 = 0;
            unint64_t v161 = (v189 - (unsigned char *)v188) >> 2;
            unsigned int v162 = 1;
            unint64_t v163 = v186;
            do
            {
              uint64_t v164 = (uint64_t *)((char *)v199[0] + 8 * v159[v160]);
              unint64_t v160 = v162;
              unint64_t v165 = (__int32 *)((char *)v199[0] + 8 * v159[v162 % v161]);
              v191.i64[0] = *v164;
              v166.i32[0] = *v165;
              v191.i32[2] = v166.i32[0];
              v167.i64[0] = v191.i64[0];
              v167.i32[2] = v166.i32[0];
              v166.i64[1] = v191.i64[0];
              v191.i32[3] = v165[1];
              v166.i32[1] = v191.i32[3];
              v167.i32[3] = v191.i32[3];
              int8x16_t v192 = vbslq_s8((int8x16_t)vcgtq_f32(v167, v166), (int8x16_t)vdupq_lane_s64(v166.i64[0], 0), (int8x16_t)vdupq_lane_s64(v191.i64[0], 0));
              if (v163 >= v187)
              {
                unint64_t v163 = std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeInfo>((uint64_t *)&v185, &v191);
                uint64_t v159 = (unsigned int *)v188;
                uint64_t v158 = v189;
              }
              else
              {
                *(float32x4_t *)unint64_t v163 = v191;
                *(int8x16_t *)(v163 + 16) = v192;
                v163 += 32;
              }
              unint64_t v186 = v163;
              unint64_t v161 = (v158 - (unsigned char *)v159) >> 2;
              unsigned int v162 = v160 + 1;
            }
            while (v161 > v160);
          }
          uint64_t v168 = (void *)(*((void *)this + 85) + 232 * v34 + 72 * v88);
          unsigned int v169 = (void *)v168[8];
          v168[8] = v185;
          float32x4_t v185 = v169;
          unint64_t v170 = v168[9];
          v168[9] = v186;
          unint64_t v186 = v170;
          unint64_t v171 = v168[10];
          v168[10] = v187;
          unint64_t v187 = v171;
          if (v185)
          {
            unint64_t v186 = (unint64_t)v185;
            operator delete(v185);
          }
          if (v188)
          {
            unsigned int v189 = v188;
            operator delete(v188);
          }
        }
        if (v193) {
          operator delete(v193);
        }
        if (__p)
        {
          uint64_t v195 = (char *)__p;
          operator delete(__p);
        }
        ++v88;
      }
      while (v88 != 3);
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(&v200);
      unsigned int v28 = v34 + 1;
      unsigned int v27 = *((_DWORD *)this + 18);
      uint64_t v32 = v175 + 232;
      uint64_t v29 = "index < data_.size()";
      unint64_t v30 = "Attribute.h";
      unint64_t v31 = "operator[]";
      if (v34 + 1 >= v27) {
        goto LABEL_147;
      }
    }
    int v173 = 182;
    goto LABEL_167;
  }
LABEL_147:
  if (v197[0])
  {
    v197[1] = v197[0];
    operator delete(v197[0]);
  }
  if (v198[0])
  {
    v198[1] = v198[0];
    operator delete(v198[0]);
  }
  if (v199[0])
  {
    v199[1] = v199[0];
    operator delete(v199[0]);
  }
}

void sub_24F50640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p) {
    operator delete(__p);
  }
  int v45 = *(void **)(v43 - 256);
  if (v45)
  {
    *(void *)(v43 - 248) = v45;
    operator delete(v45);
  }
  float v46 = *(void **)(v43 - 232);
  if (v46)
  {
    *(void *)(v43 - 224) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::SortCharts(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  unint64_t v2 = (unsigned int *)*((void *)this + 89);
  uint64_t v3 = *((void *)this + 88);
  unint64_t v4 = ((uint64_t)v2 - v3) >> 2;
  uint64_t v5 = *((unsigned int *)this + 18);
  if (v4 != v5) {
    cv3d::cv::gess::isochart::TetrisPacking::SortCharts();
  }
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      *(_DWORD *)(v3 + 4 * v6) = v6;
      ++v6;
    }
    while (v6 < *((unsigned int *)this + 18));
  }
  uint64_t v10 = this;
  unint64_t v7 = 126 - 2 * __clz(v4);
  if (v2 == (unsigned int *)v3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  return std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *,false>(v3, v2, (uint64_t)&v10, v8, 1);
}

void cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  if (*((float *)this + 32) <= 0.0) {
    cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture();
  }
  unint64_t v2 = (std::vector<unsigned int> *)((char *)this + 632);
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 632), **((unsigned __int8 **)this + 8));
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 8);
  unsigned int v4 = *v3;
  if (v4 == 1)
  {
    *v2->__begin_ = 0;
  }
  else
  {
    std::vector<unsigned int>::size_type v5 = *((unsigned int *)this + 18);
    if (v5 <= v4)
    {
      std::vector<int>::resize(v2, v5);
      if (*((_DWORD *)this + 18))
      {
        unint64_t v18 = 0;
        begiuint64_t n = v2->__begin_;
        do
        {
          begin[v18] = v18;
          ++v18;
        }
        while (v18 < *((unsigned int *)this + 18));
      }
    }
    else
    {
      unint64_t v6 = (_DWORD *)*((void *)this + 79);
      *unint64_t v6 = 0;
      unint64_t v7 = *((unsigned int *)this + 18);
      if (v7 <= 1) {
        cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture();
      }
      uint64_t v8 = (unsigned int *)*((void *)this + 88);
      uint64_t v9 = *((void *)this + 85);
      float v10 = *(float *)(v9 + 232 * *v8 + 8);
      float v11 = *((float *)this + 32);
      unsigned int v12 = *v3;
      float v13 = v11 / (float)v12;
      unint64_t v14 = 1;
      unsigned int v15 = 1;
      do
      {
        float v16 = *(float *)(v9 + 232 * v8[v14] + 8);
        if (v16 <= 0.0) {
          cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture();
        }
        if (v10 >= v13)
        {
          v6[v15] = v14;
          unsigned int v17 = v15 + 1;
          unsigned int v12 = *v3;
          if (v15 + 1 >= v12) {
            break;
          }
          float v11 = v11 - v10;
          float v13 = v11 / (float)(v12 - v15);
          float v16 = *(float *)(v9 + 232 * v8[v14] + 8);
          unint64_t v7 = *((unsigned int *)this + 18);
          float v10 = 0.0;
          ++v15;
        }
        else
        {
          unsigned int v17 = v15;
        }
        float v10 = v10 + v16;
        ++v14;
      }
      while (v14 < v7);
      if (v17 < v12)
      {
        std::vector<int>::resize(v2, v17);
      }
    }
  }
}

void *cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack(cv3d::cv::gess::isochart::TetrisPacking *this, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = *(unsigned int *)(*((void *)this + 88) + 4 * *((void *)this + 82));
  cv3d::cv::gess::isochart::TetrisPacking::ComputeChartsLengthInPixel((uint64_t)this, a2, a3, a4, a5);
  uint64_t v7 = *((void *)this + 85) + 232 * v6;
  int v9 = *(_DWORD *)(v7 + 40);
  int v8 = *(_DWORD *)(v7 + 44);
  if (v9 <= v8) {
    int v10 = *(_DWORD *)(v7 + 44);
  }
  else {
    int v10 = *(_DWORD *)(v7 + 40);
  }
  if (v10 <= 0) {
    cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack();
  }
  unint64_t v11 = (2 * v10);
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)this + 76);
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)this + 28);
  std::vector<std::vector<unsigned char>>::resize((uint64_t *)this + 76, v11);
  std::vector<std::vector<unsigned char>>::resize((uint64_t *)this + 28, v11);
  uint64_t v12 = *((void *)this + 76);
  if (*((void *)this + 77) != v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      unsigned int v15 = (unint64_t *)(v12 + v13);
      uint64_t v16 = *(void *)(v12 + v13);
      unint64_t v17 = v15[1] - v16;
      if (v11 <= v17)
      {
        if (v11 < v17) {
          v15[1] = v16 + v11;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(v15, v11 - v17);
      }
      unint64_t v18 = (unint64_t *)(*((void *)this + 28) + v13);
      unint64_t v19 = v18[1] - *v18;
      if (v11 <= v19)
      {
        if (v11 < v19) {
          v18[1] = *v18 + v11;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(v18, v11 - v19);
      }
      ++v14;
      uint64_t v12 = *((void *)this + 76);
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 77) - v12) >> 3));
  }
  uint64_t v20 = -96;
  do
  {
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + v20 + 488), v11);
    if (*((void *)this + 32) <= *((void *)this + 33)) {
      std::vector<unsigned int>::size_type v21 = *((void *)this + 33);
    }
    else {
      std::vector<unsigned int>::size_type v21 = *((void *)this + 32);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + v20 + 392), v21);
    v20 += 24;
  }
  while (v20);
  cv3d::cv::gess::isochart::TetrisPacking::DoTessellation(this, v6, 0, v22, v23, v24, v25, v26, v27);
  *((float *)this + 46) = (float)v8 / (float)v9;
  unsigned int v28 = (_DWORD *)*((void *)this + 73);
  if (v8 >= 0) {
    int v29 = v8;
  }
  else {
    int v29 = v8 + 1;
  }
  int v30 = (int)(-1431655765 * ((*((void *)this + 74) - (void)v28) >> 3)) / 2 - (v29 >> 1);
  int v31 = v30 + v8;
  *((_DWORD *)this + 39) = v30;
  *((_DWORD *)this + 40) = v30 + v8;
  int v32 = (v28[2] - *v28) / 2;
  if (v9 >= 0) {
    int v33 = v9;
  }
  else {
    int v33 = v9 + 1;
  }
  int v34 = v32 - (v33 >> 1);
  LODWORD(v35) = v34 + v9;
  *((_DWORD *)this + 37) = v34;
  *((_DWORD *)this + 38) = v34 + v9;
  if (v8 >= 1)
  {
    uint64_t v36 = v30;
    do
    {
      uint64_t v37 = *((int *)this + 37);
      if ((int)v37 < (int)v35)
      {
        do
        {
          *(unsigned char *)(*(void *)(*((void *)this + 73) + 24 * v36) + v37) = *(unsigned char *)(*(void *)(*((void *)this + 76)
                                                                                                  + 24 * (v36 - *((int *)this + 39)))
                                                                                      - *((int *)this + 37)
                                                                                      + v37);
          ++v37;
          uint64_t v35 = *((int *)this + 38);
        }
        while (v37 < v35);
        int v31 = *((_DWORD *)this + 40);
      }
      ++v36;
    }
    while (v36 < v31);
    int v34 = *((_DWORD *)this + 37);
    int v30 = *((_DWORD *)this + 39);
  }
  uint64_t v38 = *((void *)this + 91) + (v6 << 6);
  float v39 = *((float *)this + 72);
  uint64_t v40 = *((void *)this + 85) + 232 * v6;
  float v41 = *(float *)(v40 + 20);
  *(float *)(v38 + 48) = -(float)(*(float *)(v40 + 16) - (float)(v39 * (float)v34));
  *(float *)(v38 + 52) = -(float)(v41 - (float)(v39 * (float)v30));
  *(_OWORD *)uint64_t v38 = xmmword_24F570A10;
  *(_OWORD *)(v38 + 16) = xmmword_24F5715A0;
  *(_OWORD *)(v38 + 32) = xmmword_24F5715B0;
  *(void *)(v38 + 56) = 0x3F80000000000000;

  return cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo((uint64_t)this, (uint64_t)this + 296, (uint64_t)this + 584, v34, v35, v30, v31, 0);
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::PutChart(uint64_t this, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(this + 680);
  if (*(unsigned char *)(v8 + 232 * a2 + 4))
  {
    unsigned int v9 = a2;
    uint64_t v10 = this;
    *(_DWORD *)(this + 200) = 0x7FFFFFFF;
    LODWORD(a3) = *(_DWORD *)(this + 184);
    LODWORD(a4) = *(_DWORD *)(this + 132);
    if (*(float *)&a3 <= *(float *)&a4)
    {
      if (*(float *)&a3 < *(float *)&a4)
      {
        unsigned int v13 = 1;
      }
      else
      {
        int v12 = rand();
        LODWORD(a4) = 0.5;
        *(float *)&a3 = (float)v12 + 0.5;
        unsigned int v13 = vcvtms_s32_f32(*(float *)&a3);
      }
      unsigned int v59 = v13;
    }
    else
    {
      unsigned int v59 = 0;
    }
    uint64_t v14 = 0;
    *(void *)&v58[0] = 0;
    DWORD2(v58[0]) = 0x7FFFFFFF;
    memset((char *)v58 + 12, 0, 20);
    do
    {
      unsigned int v15 = &v66[v14];
      *(void *)unsigned int v15 = 0;
      *((_DWORD *)v15 + 2) = 0x7FFFFFFF;
      *(void *)(v15 + 20) = 0;
      *(void *)(v15 + 12) = 0;
      v14 += 32;
      *((_DWORD *)v15 + 7) = 0;
    }
    while (v14 != 256);
    uint64_t v16 = 0;
    uint64_t v17 = v8 + 232 * a2 + 16;
    unsigned int v57 = v9;
    uint64_t v56 = v17;
    do
    {
      cv3d::cv::gess::isochart::TetrisPacking::DoTessellation((cv3d::cv::gess::isochart::TetrisPacking *)v10, v9, v16, a3, a4, a5, a6, a7, a8);
      uint64_t v18 = v17 + 72 * v16;
      int v20 = *(_DWORD *)(v18 + 24);
      unint64_t v19 = (int *)(v18 + 24);
      std::vector<unsigned int>::size_type v21 = v19 + 1;
      cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(v10, v10 + 392, v10 + 608, 0, v20, 0, v19[1], 1);
      for (uint64_t i = 0; i != 96; i += 24)
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)(v10 + i + 488), *(char **)(v10 + i + 392), *(void *)(v10 + i + 400), (uint64_t)(*(void *)(v10 + i + 400) - *(void *)(v10 + i + 392)) >> 2);
      unint64_t v23 = *v21;
      if (v23 >= 2)
      {
        unint64_t v24 = v23 >> 1;
        double v25 = *(int **)(v10 + 560);
        double v26 = &v25[v23 - 1];
        do
        {
          int v27 = *v25;
          *v25++ = *v26;
          *v26-- = v27;
          --v24;
        }
        while (v24);
      }
      unint64_t v28 = *v19;
      if (v28 >= 2)
      {
        unint64_t v29 = v28 >> 1;
        int v30 = *(int **)(v10 + 536);
        int v31 = &v30[v28 - 1];
        do
        {
          int v32 = *v30;
          *v30++ = *v31;
          *v31-- = v32;
          --v29;
        }
        while (v29);
      }
      unint64_t v33 = *v21;
      if (v33 >= 2)
      {
        unint64_t v34 = v33 >> 1;
        uint64_t v35 = *(int **)(v10 + 512);
        uint64_t v36 = &v35[v33 - 1];
        do
        {
          int v37 = *v35;
          *v35++ = *v36;
          *v36-- = v37;
          --v34;
        }
        while (v34);
      }
      unint64_t v38 = *v19;
      if (v38 >= 2)
      {
        unint64_t v39 = v38 >> 1;
        uint64_t v40 = *(int **)(v10 + 488);
        float v41 = &v40[v38 - 1];
        do
        {
          int v42 = *v40;
          *v40++ = *v41;
          *v41-- = v42;
          --v39;
        }
        while (v39);
      }
      v64[0] = &unk_2700D8BD0;
      v64[1] = v10;
      v64[2] = v17 + 72 * v16;
      uint64_t v65 = v64;
      *(_DWORD *)(v10 + 188) = v16;
      unsigned int v43 = v59;
      if (!v16)
      {
        uint64_t v44 = 0;
        if (v59)
        {
          HIDWORD(v58[1]) = 1343554297;
          do
          {
            *(_DWORD *)&v66[v44 + 28] = 1343554297;
            v44 += 32;
          }
          while (v44 != 256);
        }
        else
        {
          HIDWORD(v58[1]) = -803929351;
          do
          {
            *(_DWORD *)&v66[v44 + 28] = -803929351;
            v44 += 32;
          }
          while (v44 != 256);
        }
      }
      int8x8_t v63 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v43 == 0), 0x1FuLL)), (int8x8_t)0x100000003, (int8x8_t)0x200000000);
      if (*(unsigned char *)(v10 + 752))
      {
        std::__function::__value_func<void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::__value_func[abi:ne180100]((uint64_t)context, (uint64_t)v64);
        void context[4] = &v63;
        unsigned int v61 = v59;
        unint64_t v62 = v66;
        int v45 = dispatch_queue_create("com.gcd.task2", MEMORY[0x263EF83A8]);
        dispatch_apply_f(8uLL, v45, context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::isochart::TetrisPacking::PutChart::$_1::__invoke);
        dispatch_release(v45);
        std::__function::__value_func<void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::~__value_func[abi:ne180100](context);
      }
      else
      {
        uint64_t v46 = 0;
        __float2 v47 = v66;
        do
        {
          LODWORD(context[0]) = v46 >> 1;
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void *, void *, unint64_t, unsigned int *, unsigned char *))(*v65 + 48))(v65, context, (unint64_t)&v63 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v46++ & 1)), &v59, v47);
          v47 += 32;
        }
        while (v46 != 8);
      }
      for (uint64_t j = 0; j != 256; j += 32)
      {
        float32x2_t v49 = &v66[j];
        if (cv3d::cv::gess::isochart::IfNewPositionAcceptable((uint64_t)v58, (float *)&v66[j + 28], &v66[j + 24], (int *)&v66[j + 8], &v66[j + 16]))
        {
          long long v50 = v49[1];
          v58[0] = *v49;
          v58[1] = v50;
        }
      }
      uint64_t v51 = *(void *)&v58[0];
      *(void *)(v10 + 192) = *(void *)&v58[0];
      *(_DWORD *)(v10 + 220) = HIDWORD(v58[1]);
      *(_OWORD *)(v10 + 200) = *(_OWORD *)((char *)v58 + 8);
      *(_DWORD *)(v10 + 216) = DWORD2(v58[1]);
      unsigned int v9 = v57;
      uint64_t v17 = v56;
      if (v51 == v16)
      {
        int v52 = *v21;
        if (*v21)
        {
          unint64_t v53 = 0;
          LODWORD(v54) = *v19;
          do
          {
            if (v54)
            {
              unint64_t v55 = 0;
              do
              {
                *(unsigned char *)(*(void *)(*(void *)(v10 + 224) + 24 * v53) + v55) = *(unsigned char *)(*(void *)(*(void *)(v10 + 608) + 24 * v53)
                                                                                            + v55);
                ++v55;
                unint64_t v54 = *v19;
              }
              while (v55 < v54);
              int v52 = *v21;
            }
            ++v53;
          }
          while (v53 < v52);
        }
      }
      std::__function::__value_func<void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::~__value_func[abi:ne180100](v64);
      ++v16;
    }
    while (v16 != 3);
    return cv3d::cv::gess::isochart::TetrisPacking::PutChartInPosition((cv3d::cv::gess::isochart::TetrisPacking *)v10, v57);
  }
  return this;
}

void sub_24F506EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::DoTessellation(cv3d::cv::gess::isochart::TetrisPacking *this, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9 = *((void *)this + 85) + 232 * a2 + 16;
  uint64_t v10 = v9 + 72 * a3;
  unsigned int v11 = *(_DWORD *)(v10 + 24);
  int v12 = -1431655765 * ((*((void *)this + 77) - *((void *)this + 76)) >> 3);
  if ((int)v11 > v12) {
    cv3d::cv::gess::isochart::TetrisPacking::DoTessellation();
  }
  uint64_t v13 = *(int *)(v10 + 28);
  if ((int)v13 > v12) {
    cv3d::cv::gess::isochart::TetrisPacking::DoTessellation();
  }
  uint64_t v14 = (float32x2_t *)(v9 + 72 * a3);
  float32x2_t v15 = v14[1];
  float32x2_t v16 = v14[4];
  if (v13)
  {
    uint64_t v17 = 0;
    if (v11 <= 1) {
      int v18 = 1;
    }
    else {
      int v18 = v11;
    }
    do
    {
      if (v11)
      {
        for (uint64_t i = 0; i != v18; *(unsigned char *)(*(void *)(*((void *)this + 76) + 24 * v17) + i++) = 0)
          ;
      }
      ++v17;
    }
    while (v17 != v13);
  }
  uint64_t v20 = v9 + 72 * a3;
  uint64_t v23 = *(void *)(v20 + 48);
  std::vector<unsigned int>::size_type v21 = (uint64_t *)(v20 + 48);
  uint64_t v22 = v23;
  if (v21[1] == v23) {
    goto LABEL_36;
  }
  unint64_t v24 = 0;
  int v25 = 0;
  float32x2_t v26 = vsub_f32(v15, v16);
  do
  {
    int v27 = (float32x2_t *)(v22 + 32 * v24);
    LODWORD(a9) = *((_DWORD *)this + 72);
    float32x2_t v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    int32x2_t v29 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(v27[2], v26), v28)));
    int32x2_t v30 = vcvt_s32_f32(vrndp_f32(vdiv_f32(vsub_f32(v27[3], v26), v28)));
    int32x2_t v31 = vcgt_s32((int32x2_t)0x200000002, vsub_s32(v30, v29));
    if (v31.i32[0] & v31.i32[1])
    {
      *(unsigned char *)(*(void *)(*((void *)this + 76)
                           + 24 * (unint64_t)(float)(*((float *)this + 19) + (float)v29.i32[1]))
               + (unint64_t)(float)(*((float *)this + 19) + (float)v29.i32[0])) = 1;
      ++v25;
    }
    else if (v31.i8[0])
    {
      int v32 = v29.i32[1] + 1;
      if (v29.i32[1] + 1 < v30.i32[1])
      {
        float v33 = (float)(int)floorf((float)(v27->f32[0] - v26.f32[0]) / *(float *)&a9);
        do
        {
          *(unsigned char *)(*(void *)(*((void *)this + 76)
                               + 24 * (unint64_t)(float)(*((float *)this + 19) + (float)v32))
                   + (unint64_t)(float)(*((float *)this + 19) + v33)) = 1;
          *(unsigned char *)(*(void *)(*((void *)this + 76)
                               + 24 * (unint64_t)(float)((float)(*((float *)this + 19) + (float)v32) + -1.0))
                   + (unint64_t)(float)(*((float *)this + 19) + v33)) = 1;
          v25 += 2;
          ++v32;
        }
        while (v30.i32[1] != v32);
      }
    }
    else if (v31.i8[4])
    {
      int v34 = v29.i32[0] + 1;
      if (v29.i32[0] + 1 < v30.i32[0])
      {
        float v35 = (float)(int)floorf((float)(v27->f32[1] - v26.f32[1]) / *(float *)&a9);
        do
        {
          *(unsigned char *)(*(void *)(*((void *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v35))
                   + (unint64_t)(float)(*((float *)this + 19) + (float)v34)) = 1;
          *(unsigned char *)(*(void *)(*((void *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v35))
                   + (unint64_t)(float)((float)(*((float *)this + 19) + (float)v34) + -1.0)) = 1;
          v25 += 2;
          ++v34;
        }
        while (v30.i32[0] != v34);
      }
    }
    else
    {
      float v36 = v27->f32[1];
      float v37 = (float)(v27[1].f32[1] - v36) / (float)(v27[1].f32[0] - v27->f32[0]);
      float v38 = v36 - (float)(v27->f32[0] * v37);
      if (fabsf(v37) >= 1.0)
      {
        int v41 = v29.i32[1] + 1;
        if (v29.i32[1] + 1 < v30.i32[1])
        {
          do
          {
            float v42 = (float)(int)floorf((float)((float)((float)((float)(v26.f32[1] + (float)((float)v41 * *((float *)this + 72)))- v38)/ v37)- v26.f32[0])/ *((float *)this + 72));
            *(unsigned char *)(*(void *)(*((void *)this + 76)
                                 + 24 * (unint64_t)(float)(*((float *)this + 19) + (float)v41))
                     + (unint64_t)(float)(*((float *)this + 19) + v42)) = 1;
            *(unsigned char *)(*(void *)(*((void *)this + 76)
                                 + 24 * (unint64_t)(float)((float)(*((float *)this + 19) + (float)v41) + -1.0))
                     + (unint64_t)(float)(*((float *)this + 19) + v42)) = 1;
            v25 += 2;
            ++v41;
          }
          while (v30.i32[1] != v41);
        }
      }
      else
      {
        int v39 = v29.i32[0] + 1;
        if (v29.i32[0] + 1 < v30.i32[0])
        {
          do
          {
            float v40 = (float)(int)floorf((float)((float)(v38+ (float)(v37* (float)(v26.f32[0] + (float)((float)v39 * *((float *)this + 72)))))- v26.f32[1])/ *((float *)this + 72));
            *(unsigned char *)(*(void *)(*((void *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v40))
                     + (unint64_t)(float)(*((float *)this + 19) + (float)v39)) = 1;
            *(unsigned char *)(*(void *)(*((void *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v40))
                     + (unint64_t)(float)((float)(*((float *)this + 19) + (float)v39) + -1.0)) = 1;
            v25 += 2;
            ++v39;
          }
          while (v30.i32[0] != v39);
        }
      }
    }
    ++v24;
    uint64_t v22 = *v21;
  }
  while (v24 < (v21[1] - *v21) >> 5);
  if (!v25)
  {
LABEL_36:
    int v43 = (int)*((float *)this + 19);
    if (v11 != 2 * v43 && v13 != 2 * v43) {
      return 0;
    }
  }
  else
  {
    int v43 = (int)*((float *)this + 19);
  }
  cv3d::cv::gess::isochart::TetrisPacking::GrowChart(this, a2, a3, v43);
  return 1;
}

void *cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, char a8)
{
  v21[4] = *MEMORY[0x263EF8340];
  int v18 = a5;
  int v19 = a4;
  int v16 = a7;
  int v17 = a6;
  int v12 = operator new(0x40uLL);
  *int v12 = &unk_2700D8C18;
  v12[1] = &v19;
  v12[2] = &v18;
  void v12[3] = &v17;
  v12[4] = &v16;
  *((unsigned char *)v12 + 40) = a8;
  v12[6] = a3;
  v12[7] = a2;
  v21[3] = v12;
  if (*(unsigned char *)(a1 + 752))
  {
    std::__function::__value_func<void ()(int)>::__value_func[abi:ne180100]((uint64_t)context, (uint64_t)v21);
    void context[4] = 0x100000001;
    uint64_t v13 = dispatch_queue_create("com.gcd.task2", MEMORY[0x263EF83A8]);
    dispatch_apply_f(4uLL, v13, context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_1::__invoke);
    dispatch_release(v13);
    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](context);
  }
  else
  {
    for (int i = 0; i != 4; ++i)
      std::function<void ()(int)>::operator()((uint64_t)v21, i);
  }
  return std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v21);
}

void sub_24F5074BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::PutChartInPosition(cv3d::cv::gess::isochart::TetrisPacking *this, unsigned int a2)
{
  cv3d::cv::gess::isochart::TetrisPacking::GetChartPutPosition((uint64_t)this, a2);
  uint64_t result = cv3d::cv::gess::isochart::TetrisPacking::CheckAtlasRange(this);
  if (result)
  {
    uint64_t v5 = *((void *)this + 85) + 232 * a2 + 72 * *((void *)this + 24);
    float v7 = *(float *)(v5 + 16);
    uint64_t v6 = (float32x2_t *)(v5 + 16);
    int v8 = *((_DWORD *)this + 53);
    double v9 = (float)((float)v8 / 180.0);
    float v10 = v9 * 3.14159265;
    __float2 v11 = __sincosf_stret(v10);
    v12.f32[0] = -v11.__sinval;
    v12.i32[1] = LODWORD(v11.__cosval);
    *uint64_t v6 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v11.__sinval), LODWORD(v11.__cosval)), v7), v12, v6->f32[1]);
    float v13 = v6[5].f32[0] + v9 * 3.14159265;
    __float2 v14 = __sincosf_stret(v13);
    v54[0] = LODWORD(v14.__cosval);
    v54[1] = LODWORD(v14.__sinval);
    float v56 = -v14.__sinval;
    float cosval = v14.__cosval;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long v60 = xmmword_24F570A10;
    uint64_t v61 = 0x3F80000000000000;
    int v49 = 1065353216;
    long long v50 = 0uLL;
    *(_DWORD *)uint64_t v51 = 1065353216;
    *(_OWORD *)&v51[4] = 0uLL;
    *(_DWORD *)&v51[20] = 1065353216;
    *(void *)unint64_t v53 = 0;
    uint64_t v52 = 0;
    *(_DWORD *)&v53[8] = 1065353216;
    *((_DWORD *)this + 46) = *((_DWORD *)this + 55);
    if (v8 > 179)
    {
      if (v8 == 180)
      {
        int v39 = *((_DWORD *)this + 45);
        uint64_t v40 = *((int *)this + 44);
        if ((int)v40 >= v39)
        {
          int v41 = *((_DWORD *)this + 43);
        }
        else
        {
          int v41 = *((_DWORD *)this + 43);
          do
          {
            uint64_t v42 = *((int *)this + 42);
            if ((int)v42 < v41)
            {
              int v43 = ~v42;
              do
              {
                uint64_t v44 = *(void *)(*((void *)this + 73) + 24 * v40);
                if (*(unsigned char *)(v44 + v42) != 1)
                {
                  char v45 = *(unsigned char *)(*(void *)(*((void *)this + 28) + 24 * (*((_DWORD *)this + 45) + ~v40))
                                 + v41
                                 + v43);
                  if (v45)
                  {
                    *(unsigned char *)(v44 + v42) = v45;
                    int v41 = *((_DWORD *)this + 43);
                  }
                }
                ++v42;
                --v43;
              }
              while (v42 < v41);
              int v39 = *((_DWORD *)this + 45);
            }
            ++v40;
          }
          while (v40 < v39);
        }
        float v29 = *((float *)this + 72);
        float v30 = v6->f32[1];
        float v31 = -(float)(v6->f32[0] - (float)(v29 * (float)v41));
        float v32 = (float)v39;
      }
      else
      {
        if (v8 != 270) {
          goto LABEL_56;
        }
        int v22 = *((_DWORD *)this + 45);
        uint64_t v23 = *((int *)this + 44);
        if ((int)v23 < v22)
        {
          int v24 = *((_DWORD *)this + 43);
          do
          {
            uint64_t v25 = *((int *)this + 42);
            if ((int)v25 < v24)
            {
              uint64_t v26 = 24 * v25;
              do
              {
                uint64_t v27 = *(void *)(*((void *)this + 73) + 24 * v23);
                if (*(unsigned char *)(v27 + v25) != 1)
                {
                  char v28 = *(unsigned char *)(*(void *)(*((void *)this + 28) - 24 * *((int *)this + 42) + v26)
                                 + *((_DWORD *)this + 45)
                                 + ~v23);
                  if (v28)
                  {
                    *(unsigned char *)(v27 + v25) = v28;
                    int v24 = *((_DWORD *)this + 43);
                  }
                }
                ++v25;
                v26 += 24;
              }
              while (v25 < v24);
              int v22 = *((_DWORD *)this + 45);
            }
            ++v23;
          }
          while (v23 < v22);
        }
        float v29 = *((float *)this + 72);
        float v30 = v6->f32[1];
        float v31 = -(float)(v6->f32[0] - (float)(v29 * (float)*((int *)this + 42)));
        float v32 = (float)v22;
      }
    }
    else if (v8)
    {
      if (v8 != 90) {
        goto LABEL_56;
      }
      LODWORD(v15) = *((_DWORD *)this + 44);
      int v16 = *((_DWORD *)this + 45);
      if ((int)v15 >= v16)
      {
        int v17 = *((_DWORD *)this + 43);
      }
      else
      {
        uint64_t v15 = (int)v15;
        int v17 = *((_DWORD *)this + 43);
        do
        {
          uint64_t v18 = *((int *)this + 42);
          if ((int)v18 < v17)
          {
            int v19 = ~v18;
            do
            {
              uint64_t v20 = *(void *)(*((void *)this + 73) + 24 * v15);
              if (*(unsigned char *)(v20 + v18) != 1)
              {
                char v21 = *(unsigned char *)(*(void *)(*((void *)this + 28) + 24 * (v17 + v19)) + v15 - *((int *)this + 44));
                if (v21)
                {
                  *(unsigned char *)(v20 + vstd::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = v21;
                  int v17 = *((_DWORD *)this + 43);
                }
              }
              ++v18;
              --v19;
            }
            while (v18 < v17);
            int v16 = *((_DWORD *)this + 45);
          }
          ++v15;
        }
        while (v15 < v16);
        LODWORD(v15) = *((_DWORD *)this + 44);
      }
      float v29 = *((float *)this + 72);
      float v30 = v6->f32[1];
      float v31 = -(float)(v6->f32[0] - (float)(v29 * (float)v17));
      float v32 = (float)(int)v15;
    }
    else
    {
      LODWORD(v33) = *((_DWORD *)this + 44);
      int v34 = *((_DWORD *)this + 45);
      if ((int)v33 < v34)
      {
        uint64_t v33 = (int)v33;
        int v35 = *((_DWORD *)this + 43);
        do
        {
          uint64_t v36 = *((int *)this + 42);
          if ((int)v36 < v35)
          {
            do
            {
              uint64_t v37 = *(void *)(*((void *)this + 73) + 24 * v33);
              if (*(unsigned char *)(v37 + v36) != 1)
              {
                char v38 = *(unsigned char *)(*(void *)(*((void *)this + 28) + 24 * (v33 - *((int *)this + 44)))
                               - *((int *)this + 42)
                               + v36);
                if (v38)
                {
                  *(unsigned char *)(v37 + v36) = v38;
                  int v35 = *((_DWORD *)this + 43);
                }
              }
              ++v36;
            }
            while (v36 < v35);
            int v34 = *((_DWORD *)this + 45);
          }
          ++v33;
        }
        while (v33 < v34);
        LODWORD(v33) = *((_DWORD *)this + 44);
      }
      float v29 = *((float *)this + 72);
      float v30 = v6->f32[1];
      float v31 = -(float)(v6->f32[0] - (float)(v29 * (float)*((int *)this + 42)));
      float v32 = (float)(int)v33;
    }
    int v49 = 1065353216;
    long long v50 = 0uLL;
    *((float *)&v52 + 1) = v31;
    *(float *)unint64_t v53 = -(float)(v30 - (float)(v29 * v32));
    *(void *)&unsigned char v51[16] = 0x3F80000000000000;
    *(_OWORD *)uint64_t v51 = xmmword_24F570A10;
    LODWORD(v52) = 0;
    *(void *)&v53[4] = 0x3F80000000000000;
LABEL_56:
    cv3d::cv::gess::math::Matrix4T<float>::operator*((uint64_t)&v49, (uint64_t)v54, v48);
    uint64_t v46 = 0;
    unint64_t v47 = *((void *)this + 91) + ((unint64_t)a2 << 6);
    do
    {
      *(_DWORD *)(v47 + v46) = *(_DWORD *)((char *)v48 + v46);
      v46 += 4;
    }
    while (v46 != 64);
    return cv3d::cv::gess::isochart::TetrisPacking::UpdateSpaceInfo((uint64_t)this, *((_DWORD *)this + 54));
  }
  return result;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::TryPut(uint64_t result, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  uint64_t v43 = result;
  int v47 = a3;
  int v10 = a8 - a7;
  int v11 = a8 - a9;
  if (a8 - a7 >= a9 && v11 >= a7)
  {
    int v41 = (void *)(result + 24 * a3 + 296);
    float v15 = *(float *)(result + 76);
    float v16 = (float)a9 - v15;
    float v17 = (float)(int)v15;
    unsigned int v18 = a3 & 0xFFFFFFFD;
    float v19 = (float)v10;
    int v40 = a6 + a5;
    float v20 = (float)v10 / (float)a6;
    int v21 = a7;
    int v22 = v11 + 1;
    uint64_t v23 = 4 * ((int)v15 + (uint64_t)a7);
    uint64_t v39 = *a2 + 4 * (int)v15;
    int v38 = (int)v15 + 1;
    float v24 = (float)a6 / (float)v10;
    do
    {
      int v25 = 0;
      if (v16 <= v17)
      {
        int v29 = 100000000;
      }
      else
      {
        uint64_t v26 = (int *)(*v41 + v23);
        int v27 = v38;
        char v28 = (int *)v39;
        int v29 = 100000000;
        do
        {
          int v31 = *v26++;
          int v30 = v31;
          int v32 = *v28++;
          int v33 = v32 + v30;
          v25 += v33;
          if (v33 < v29) {
            int v29 = v33;
          }
          float v34 = (float)v27++;
        }
        while (v16 > v34);
      }
      int v35 = v25 - v29 * a9;
      int v45 = v35;
      int v46 = v29;
      if (v29 <= a5)
      {
        float v37 = (float)(v40 - v29);
        if (v18) {
          float v36 = v19 / v37;
        }
        else {
          float v36 = v37 / v19;
        }
        float v44 = v36;
      }
      else if (v18)
      {
        float v44 = v20;
        float v36 = v20;
      }
      else
      {
        float v44 = v24;
        float v36 = v24;
      }
      uint64_t result = cv3d::cv::gess::isochart::IfNewPositionAcceptable(a10, &v44, &v47, &v45, &v46);
      if (result)
      {
        *(void *)a10 = *(int *)(v43 + 188);
        *(float *)(a10 + 28) = v36;
        *(_DWORD *)(a10 + 8) = v35;
        *(_DWORD *)(a10 + 12) = v21;
        *(_DWORD *)(a10 + 16) = v29;
        *(_DWORD *)(a10 + 20) = a4;
        *(_DWORD *)(a10 + 24) = a3;
      }
      ++v21;
      v23 += 4;
    }
    while (v22 != v21);
  }
  return result;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::GetChartPutPosition(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(void *)(this + 680) + 232 * a2 + 16;
  uint64_t v3 = *(void *)(this + 192);
  switch(*(_DWORD *)(this + 216))
  {
    case 0:
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 204);
      int v4 = *(_DWORD *)(this + 212);
      if (v4 == 180 || v4 == 0) {
        int v11 = *(_DWORD *)(v2 + 72 * v3 + 28);
      }
      else {
        int v11 = *(_DWORD *)(v2 + 72 * v3 + 24);
      }
      int v8 = *(_DWORD *)(this + 156) - v11 + *(_DWORD *)(this + 208);
      goto LABEL_17;
    case 1:
      int v6 = *(_DWORD *)(this + 204);
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 152) - *(_DWORD *)(this + 208);
      *(_DWORD *)(this + 176) = v6;
      break;
    case 2:
      int v7 = *(_DWORD *)(this + 208);
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 204);
      int v8 = *(_DWORD *)(this + 160) - v7;
LABEL_17:
      *(_DWORD *)(this + 176) = v8;
      break;
    case 3:
      *(_DWORD *)(this + 176) = *(_DWORD *)(this + 204);
      int v9 = *(_DWORD *)(this + 212);
      if (v9 == 180 || v9 == 0) {
        int v12 = *(_DWORD *)(v2 + 72 * v3 + 24);
      }
      else {
        int v12 = *(_DWORD *)(v2 + 72 * v3 + 28);
      }
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 208) + *(_DWORD *)(this + 148) - v12;
      break;
    default:
      break;
  }
  int v13 = *(_DWORD *)(this + 212);
  if (v13 <= 179)
  {
    if (v13)
    {
      if (v13 != 90) {
        return this;
      }
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v13 == 270)
  {
LABEL_27:
    int v14 = *(_DWORD *)(this + 168);
    unsigned int v18 = (int *)(v2 + 72 * v3 + 24);
    int v16 = *v18;
    int v17 = v18[1];
    goto LABEL_28;
  }
  if (v13 == 180)
  {
LABEL_25:
    int v14 = *(_DWORD *)(this + 168);
    uint64_t v15 = v2 + 72 * v3;
    int v17 = *(_DWORD *)(v15 + 24);
    int v16 = *(_DWORD *)(v15 + 28);
LABEL_28:
    *(_DWORD *)(this + 172) = v17 + v14;
    *(_DWORD *)(this + 180) = v16 + *(_DWORD *)(this + 176);
  }
  return this;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::CheckAtlasRange(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  int v1 = *((_DWORD *)this + 42);
  int v2 = *((_DWORD *)this + 43);
  if (v1 >= *((_DWORD *)this + 37)) {
    int v1 = *((_DWORD *)this + 37);
  }
  int v3 = *((_DWORD *)this + 44);
  if (v3 >= *((_DWORD *)this + 39)) {
    int v3 = *((_DWORD *)this + 39);
  }
  if (v2 <= *((_DWORD *)this + 38)) {
    int v2 = *((_DWORD *)this + 38);
  }
  if (*((_DWORD *)this + 45) <= *((_DWORD *)this + 40)) {
    int v4 = *((_DWORD *)this + 40);
  }
  else {
    int v4 = *((_DWORD *)this + 45);
  }
  float v5 = *((float *)this + 19);
  int v6 = (int)(float)((float)(v2 - v1) + (float)(v5 * -2.0));
  int v7 = (int)(float)((float)(v4 - v3) + (float)(v5 * -2.0));
  unsigned int v8 = **((_DWORD **)this + 6);
  if ((int)v8 < v6)
  {
    *((unsigned char *)this + 124) = 1;
    if (*((_DWORD *)this + 18) < 0x1Eu)
    {
      *((float *)this + 34) = (float)v8 / (float)v6;
      signed int v9 = **((_DWORD **)this + 7);
      goto LABEL_15;
    }
    return 0;
  }
  signed int v9 = **((_DWORD **)this + 7);
  uint64_t v10 = 1;
  if (v9 >= v7) {
    return v10;
  }
  *((unsigned char *)this + 124) = 1;
  if (*((_DWORD *)this + 18) >= 0x1Eu) {
    return 0;
  }
LABEL_15:
  if (v9 >= v7) {
    float v11 = *((float *)this + 34);
  }
  else {
    float v11 = (float)v9 / (float)v7;
  }
  uint64_t v10 = 0;
  *((float *)this + 34) = v11 * v11;
  return v10;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::UpdateSpaceInfo(uint64_t this, int a2)
{
  LODWORD(v2) = *(_DWORD *)(this + 168);
  int v3 = *(_DWORD *)(this + 172);
  int v4 = *(_DWORD *)(this + 152);
  uint64_t v5 = *(int *)(this + 148);
  if ((int)v2 >= (int)v5) {
    int v6 = *(_DWORD *)(this + 148);
  }
  else {
    int v6 = *(_DWORD *)(this + 168);
  }
  LODWORD(v7) = *(_DWORD *)(this + 176);
  int v8 = *(_DWORD *)(this + 180);
  int v9 = *(_DWORD *)(this + 160);
  uint64_t v10 = *(int *)(this + 156);
  if ((int)v7 >= (int)v10) {
    int v11 = *(_DWORD *)(this + 156);
  }
  else {
    int v11 = *(_DWORD *)(this + 176);
  }
  if (v3 <= v4) {
    int v12 = *(_DWORD *)(this + 152);
  }
  else {
    int v12 = *(_DWORD *)(this + 172);
  }
  if (v8 <= v9) {
    int v13 = *(_DWORD *)(this + 160);
  }
  else {
    int v13 = *(_DWORD *)(this + 180);
  }
  switch(a2)
  {
    case 0:
      if ((int)v7 < (int)v10)
      {
        if ((int)v5 < (int)v2)
        {
          uint64_t v14 = *(void *)(this + 296);
          do
          {
            *(_DWORD *)(v14 + 4 * v5++) += *(_DWORD *)(this + 156) - *(_DWORD *)(this + 176);
            uint64_t v2 = *(int *)(this + 168);
          }
          while (v5 < v2);
          int v3 = *(_DWORD *)(this + 172);
          int v4 = *(_DWORD *)(this + 152);
        }
        if (v3 < v4)
        {
          uint64_t v15 = *(void *)(this + 296);
          uint64_t v16 = v3;
          do
            *(_DWORD *)(v15 + 4 * v16++) += *(_DWORD *)(this + 156) - *(_DWORD *)(this + 176);
          while (v16 < *(int *)(this + 152));
          LODWORD(v2) = *(_DWORD *)(this + 168);
          int v3 = *(_DWORD *)(this + 172);
        }
      }
      if ((int)v2 < v3)
      {
        uint64_t v17 = *(void *)(this + 296);
        uint64_t v2 = (int)v2;
        do
        {
          uint64_t v18 = 0;
          uint64_t v19 = 24 * v11;
          do
          {
            if (v11 + v18 >= v13) {
              break;
            }
            int v20 = *(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + v19) + v2);
            ++v18;
            v19 += 24;
          }
          while (!v20);
          *(_DWORD *)(v17 + 4 * v2++) = v11 + v18 + ~v11;
        }
        while (v2 < *(int *)(this + 172));
      }
      uint64_t v21 = *(int *)(this + 176);
      if ((int)v21 < *(_DWORD *)(this + 180))
      {
        uint64_t v22 = *(void *)(this + 368);
        uint64_t v23 = *(void *)(this + 320);
        do
        {
          uint64_t v24 = 0;
          do
          {
            if (v6 + v24 >= v12) {
              break;
            }
          }
          while (!*(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + 24 * v21) + v6 + v24++));
          *(_DWORD *)(v22 + 4 * v21) = v6 + v24 + ~v6;
          uint64_t v26 = v12;
          int v27 = v12;
          while (v26 > v6)
          {
            uint64_t v28 = *(void *)(*(void *)(this + 584) + 24 * v21) + v26--;
            --v27;
            if (*(unsigned char *)(v28 - 1)) {
              goto LABEL_39;
            }
          }
          int v27 = v26;
LABEL_39:
          *(_DWORD *)(v23 + 4 * v21++) = v12 + ~v27;
        }
        while (v21 < *(int *)(this + 180));
      }
      break;
    case 1:
      if (v3 > v4)
      {
        if ((int)v10 < (int)v7)
        {
          uint64_t v61 = *(void *)(this + 320);
          do
          {
            *(_DWORD *)(v61 + 4 * v10++) += *(_DWORD *)(this + 172) - *(_DWORD *)(this + 152);
            uint64_t v7 = *(int *)(this + 176);
          }
          while (v10 < v7);
          int v8 = *(_DWORD *)(this + 180);
          int v9 = *(_DWORD *)(this + 160);
        }
        if (v8 < v9)
        {
          uint64_t v62 = *(void *)(this + 320);
          uint64_t v63 = v8;
          do
            *(_DWORD *)(v62 + 4 * v63++) += *(_DWORD *)(this + 172) - *(_DWORD *)(this + 152);
          while (v63 < *(int *)(this + 160));
          LODWORD(v7) = *(_DWORD *)(this + 176);
          int v8 = *(_DWORD *)(this + 180);
        }
      }
      if ((int)v7 < v8)
      {
        uint64_t v64 = *(void *)(this + 320);
        uint64_t v7 = (int)v7;
        do
        {
          uint64_t v65 = v12;
          int v66 = v12;
          while (v65 > v6)
          {
            uint64_t v67 = *(void *)(*(void *)(this + 584) + 24 * v7) + v65--;
            --v66;
            if (*(unsigned char *)(v67 - 1)) {
              goto LABEL_113;
            }
          }
          int v66 = v65;
LABEL_113:
          *(_DWORD *)(v64 + 4 * v7++) = v12 + ~v66;
        }
        while (v7 < *(int *)(this + 180));
      }
      uint64_t v68 = *(int *)(this + 168);
      if ((int)v68 < *(_DWORD *)(this + 172))
      {
        uint64_t v69 = *(void *)(this + 296);
        uint64_t v70 = *(void *)(this + 344);
        do
        {
          uint64_t v71 = 0;
          uint64_t v72 = 24 * v11;
          do
          {
            if (v11 + v71 >= v13) {
              break;
            }
            int v73 = *(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + v72) + v68);
            ++v71;
            v72 += 24;
          }
          while (!v73);
          *(_DWORD *)(v69 + 4 * v68) = v11 + v71 + ~v11;
          uint64_t v74 = 24 * v13 - 24;
          uint64_t v75 = v13;
          int v76 = v13;
          while (v75 > v11)
          {
            --v75;
            --v76;
            int v77 = *(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + v74) + v68);
            v74 -= 24;
            if (v77) {
              goto LABEL_124;
            }
          }
          int v76 = v75;
LABEL_124:
          *(_DWORD *)(v70 + 4 * v68++) = v13 + ~v76;
        }
        while (v68 < *(int *)(this + 172));
      }
      break;
    case 2:
      if (v8 > v9)
      {
        if ((int)v5 < (int)v2)
        {
          uint64_t v29 = *(void *)(this + 344);
          do
            *(_DWORD *)(v29 + 4 * v5++) += *(_DWORD *)(this + 180) - *(_DWORD *)(this + 160);
          while (v5 < *(int *)(this + 168));
          int v3 = *(_DWORD *)(this + 172);
          int v4 = *(_DWORD *)(this + 152);
          LODWORD(v2) = *(_DWORD *)(this + 168);
        }
        if (v3 < v4)
        {
          uint64_t v30 = *(void *)(this + 344);
          uint64_t v31 = v3;
          do
            *(_DWORD *)(v30 + 4 * v31++) += *(_DWORD *)(this + 180) - *(_DWORD *)(this + 160);
          while (v31 < *(int *)(this + 152));
          LODWORD(v2) = *(_DWORD *)(this + 168);
          int v3 = *(_DWORD *)(this + 172);
        }
      }
      if ((int)v2 < v3)
      {
        uint64_t v32 = *(void *)(this + 344);
        uint64_t v2 = (int)v2;
        do
        {
          uint64_t v33 = 24 * v13 - 24;
          uint64_t v34 = v13;
          int v35 = v13;
          while (v34 > v11)
          {
            --v34;
            --v35;
            int v36 = *(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + v33) + v2);
            v33 -= 24;
            if (v36) {
              goto LABEL_57;
            }
          }
          int v35 = v34;
LABEL_57:
          *(_DWORD *)(v32 + 4 * v2++) = v13 + ~v35;
        }
        while (v2 < *(int *)(this + 172));
      }
      uint64_t v37 = *(int *)(this + 176);
      if ((int)v37 < *(_DWORD *)(this + 180))
      {
        uint64_t v38 = *(void *)(this + 368);
        uint64_t v39 = *(void *)(this + 320);
        do
        {
          uint64_t v40 = 0;
          do
          {
            if (v6 + v40 >= v12) {
              break;
            }
          }
          while (!*(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + 24 * v37) + v6 + v40++));
          *(_DWORD *)(v38 + 4 * v37) = v6 + v40 + ~v6;
          uint64_t v42 = v12;
          int v43 = v12;
          while (v42 > v6)
          {
            uint64_t v44 = *(void *)(*(void *)(this + 584) + 24 * v37) + v42--;
            --v43;
            if (*(unsigned char *)(v44 - 1)) {
              goto LABEL_68;
            }
          }
          int v43 = v42;
LABEL_68:
          *(_DWORD *)(v39 + 4 * v37++) = v12 + ~v43;
        }
        while (v37 < *(int *)(this + 180));
      }
      break;
    case 3:
      if ((int)v2 < (int)v5)
      {
        if ((int)v10 < (int)v7)
        {
          uint64_t v45 = *(void *)(this + 368);
          do
          {
            *(_DWORD *)(v45 + 4 * v10++) += *(_DWORD *)(this + 148) - *(_DWORD *)(this + 168);
            uint64_t v7 = *(int *)(this + 176);
          }
          while (v10 < v7);
          int v8 = *(_DWORD *)(this + 180);
          int v9 = *(_DWORD *)(this + 160);
        }
        if (v8 < v9)
        {
          uint64_t v46 = *(void *)(this + 368);
          uint64_t v47 = v8;
          do
            *(_DWORD *)(v46 + 4 * v47++) += *(_DWORD *)(this + 148) - *(_DWORD *)(this + 168);
          while (v47 < *(int *)(this + 160));
          LODWORD(v7) = *(_DWORD *)(this + 176);
          int v8 = *(_DWORD *)(this + 180);
        }
      }
      if ((int)v7 < v8)
      {
        uint64_t v48 = *(void *)(this + 368);
        uint64_t v7 = (int)v7;
        do
        {
          uint64_t v49 = 0;
          do
          {
            if (v6 + v49 >= v12) {
              break;
            }
          }
          while (!*(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + 24 * v7) + v6 + v49++));
          *(_DWORD *)(v48 + 4 * v7++) = v6 + v49 + ~v6;
        }
        while (v7 < *(int *)(this + 180));
      }
      uint64_t v51 = *(int *)(this + 168);
      if ((int)v51 < *(_DWORD *)(this + 172))
      {
        uint64_t v52 = *(void *)(this + 296);
        uint64_t v53 = *(void *)(this + 344);
        do
        {
          uint64_t v54 = 0;
          uint64_t v55 = 24 * v11;
          do
          {
            if (v11 + v54 >= v13) {
              break;
            }
            int v56 = *(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + v55) + v51);
            ++v54;
            v55 += 24;
          }
          while (!v56);
          *(_DWORD *)(v52 + 4 * v51) = v11 + v54 + ~v11;
          uint64_t v57 = 24 * v13 - 24;
          uint64_t v58 = v13;
          int v59 = v13;
          while (v58 > v11)
          {
            --v58;
            --v59;
            int v60 = *(unsigned __int8 *)(*(void *)(*(void *)(this + 584) + v57) + v51);
            v57 -= 24;
            if (v60) {
              goto LABEL_95;
            }
          }
          int v59 = v58;
LABEL_95:
          *(_DWORD *)(v53 + 4 * v51++) = v13 + ~v59;
        }
        while (v51 < *(int *)(this + 172));
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(this + 148) = v6;
  *(_DWORD *)(this + 152) = v12;
  *(_DWORD *)(this + 156) = v11;
  *(_DWORD *)(this + 160) = v13;
  return this;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::ComputeChartsLengthInPixel(uint64_t this, double a2, double a3, double a4, double a5)
{
  unint64_t v5 = *(void *)(this + 656);
  unint64_t v6 = *(void *)(this + 664);
  if (v5 < v6)
  {
    uint64_t v7 = *(void *)(this + 704);
    uint64_t v8 = *(void *)(this + 680);
    do
    {
      unsigned int v9 = *(_DWORD *)(v7 + 4 * v5);
      if (*(unsigned char *)(v8 + 232 * v9 + 4))
      {
        uint64_t v10 = 0;
        uint64_t v11 = v8 + 232 * v9;
        do
        {
          uint64_t v12 = v11 + v10;
          LODWORD(a5) = *(_DWORD *)(this + 288);
          float32x2_t v13 = *(float32x2_t *)(v11 + v10 + 24);
          float32x2_t v14 = vsub_f32(*(float32x2_t *)(v11 + v10 + 32), v13);
          uint64_t v15 = (const float *)(this + 288);
          float32x2_t v16 = vcvt_f32_s32((int32x2_t)vmax_u32((uint32x2_t)vcvt_s32_f32(vrndp_f32(vdiv_f32(v14, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0)))), (uint32x2_t)0x100000001));
          float32x2_t v17 = vmla_n_f32(vneg_f32(v14), v16, *(float *)&a5);
          float32x2_t v18 = vmul_f32(v17, (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)(v12 + 48) = v18;
          v17.i32[0] = *(_DWORD *)(this + 76);
          float32x2_t v19 = vld1_dup_f32(v15);
          *(float32x2_t *)(v12 + 16) = vsub_f32(vmls_lane_f32(v13, v19, v17, 0), v18);
          a5 = COERCE_DOUBLE(vcvt_s32_f32(vmla_n_f32(v16, (float32x2_t)0x4000000040000000, *(float *)(this + 76))));
          *(double *)(v12 + 40) = a5;
          v10 += 72;
        }
        while (v10 != 216);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return this;
}

void *cv3d::cv::gess::isochart::TetrisPacking::GrowChart(void *this, unsigned int a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = this[85] + 232 * a2 + 72 * a3;
    unsigned int v6 = *(_DWORD *)(v5 + 40);
    unsigned int v7 = *(_DWORD *)(v5 + 44);
    if (v6 <= 1) {
      int v8 = 1;
    }
    else {
      int v8 = v6;
    }
    if (v7 <= 1) {
      int v9 = 1;
    }
    else {
      int v9 = v7;
    }
    do
    {
      int v10 = v4 + 1;
      if (v7)
      {
        uint64_t v11 = 0;
        char v12 = v4 + 2;
        do
        {
          if (v6)
          {
            for (uint64_t i = 0; i != v8; ++i)
            {
              if (v10 == *(unsigned __int8 *)(*(void *)(this[76] + 24 * v11) + i))
              {
                for (int j = -1; j != 2; ++j)
                {
                  unsigned int v15 = j + v11;
                  if (j + (int)v11 >= 0 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(this[77] - this[76]) >> 3) > v15)
                  {
                    for (int k = -1; k != 2; ++k)
                    {
                      uint64_t v17 = (i + k);
                      if ((int)i + k >= 0)
                      {
                        uint64_t v18 = *(void *)(this[76] + 24 * v15);
                        if (*(void *)(this[76] + 24 * v15 + 8) - v18 > (unint64_t)v17
                          && !*(unsigned char *)(v18 + v17))
                        {
                          *(unsigned char *)(v18 + v17) = v12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v11;
        }
        while (v11 != v9);
      }
      int v4 = v10;
    }
    while (v10 != a4);
  }
  return this;
}

float cv3d::cv::gess::isochart::TetrisPacking::GetChartArea(cv3d::cv::gess::isochart::TetrisPacking *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = *(unsigned int *)(v3 + 4 * a2);
  if (*((_DWORD *)this + 18) - 1 == a2) {
    uint64_t v3 = (*(void *)(*((void *)this + 4) + 160) - *(void *)(*((void *)this + 4) + 152)) >> 2;
  }
  else {
    LODWORD(v3) = *(_DWORD *)(v3 + 4 * (a2 + 1));
  }
  float v5 = 0.0;
  if (v4 < v3)
  {
    uint64_t v6 = v3;
    do
    {
      unsigned int v7 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((void *)this + 4), *((_DWORD *)this + 29), v4);
      uint64_t v8 = *((void *)this + 4);
      unsigned int v22 = *((_DWORD *)this + 26);
      uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v8 + 80), &v22);
      unint64_t v10 = *v7;
      uint64_t v11 = *(void *)(v9 + 40);
      if (v10 >= (*(void *)(v9 + 48) - v11) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      uint64_t v12 = *((void *)this + 4);
      unsigned int v23 = *((_DWORD *)this + 26);
      uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v12 + 80), &v23);
      unint64_t v14 = v7[1];
      uint64_t v15 = *(void *)(v13 + 40);
      if (v14 >= (*(void *)(v13 + 48) - v15) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      uint64_t v16 = *((void *)this + 4);
      unsigned int v24 = *((_DWORD *)this + 26);
      uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v16 + 80), &v24);
      unint64_t v18 = v7[2];
      uint64_t v19 = *(void *)(v17 + 40);
      if (v18 >= (*(void *)(v17 + 48) - v19) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      int v20 = (float *)(v11 + 8 * v10);
      float v5 = v5
         + (float)(fabsf((float)((float)(*(float *)(v15 + 8 * v14) - *v20) * (float)(*(float *)(v19 + 8 * v18 + 4) - v20[1]))- (float)((float)(*(float *)(v15 + 8 * v14 + 4) - v20[1]) * (float)(*(float *)(v19 + 8 * v18) - *v20)))* 0.5);
      ++v4;
    }
    while (v6 != v4);
  }
  return v5;
}

void std::vector<cv3d::cv::gess::isochart::EdgeInfo>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    unint64_t v10 = (char *)__p + 32 * v6;
    std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      v9 += (v8 - v9 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F5088F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cv3d::cv::gess::isochart::ChartInfo>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x34F72C234F72C235 * ((v6 - v7) >> 3) >= a2)
  {
    return std::vector<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    uint64_t v8 = 0x34F72C234F72C235 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x11A7B9611A7B961) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x8D3DCB08D3DCB0) {
      unint64_t v11 = 0x11A7B9611A7B961;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v18 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = &v12[232 * v8];
    uint64_t v16 = v15;
    uint64_t v17 = &v12[232 * v11];
    std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end((uint64_t)&v14, a2);
    std::vector<cv3d::cv::gess::isochart::ChartInfo>::__swap_out_circular_buffer(a1, &v14);
    return std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_24F508A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v3 = v2 + 232 * a2;
    do
    {
      uint64_t v4 = 0;
      *(_DWORD *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 4) = 0;
      *(_DWORD *)(v2 + 8) = 0;
      do
      {
        uint64_t v5 = (void *)(v2 + v4);
        v5[6] = 0;
        v5[9] = 0;
        v5[10] = 0;
        v5[8] = 0;
        v5[3] = 0;
        v5[4] = 0;
        v4 += 72;
        v5[2] = 0;
      }
      while (v4 != 216);
      v2 += 232;
    }
    while (v2 != v3);
    uint64_t v2 = v3;
  }
  *(void *)(result + 8) = v2;
  return result;
}

uint64_t std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v3 = v2 + 232 * a2;
    do
    {
      uint64_t v4 = 0;
      *(_DWORD *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 4) = 0;
      *(_DWORD *)(v2 + 8) = 0;
      do
      {
        uint64_t v5 = (void *)(v2 + v4);
        v5[6] = 0;
        v5[9] = 0;
        v5[10] = 0;
        v5[8] = 0;
        v5[3] = 0;
        v5[4] = 0;
        v4 += 72;
        v5[2] = 0;
      }
      while (v4 != 216);
      v2 += 232;
    }
    while (v2 != v3);
    uint64_t v2 = v3;
  }
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t std::vector<cv3d::cv::gess::isochart::ChartInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(232 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(void *)(v9 - 232);
      v9 -= 232;
      *(_DWORD *)(v7 - 224) = *(_DWORD *)(v9 + 8);
      *(void *)(v7 - 232) = v10;
      std::array<cv3d::cv::gess::isochart::PositionInfo,3ul>::array(v7 - 216, v9 + 16);
      uint64_t v7 = *((void *)&v16 + 1) - 232;
      *((void *)&v16 + 1) -= 232;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_24F508CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::array<cv3d::cv::gess::isochart::PositionInfo,3ul>::array(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 216; i += 72)
  {
    uint64_t v5 = a1 + i;
    *(_DWORD *)uint64_t v5 = *(_DWORD *)(a2 + i);
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(a2 + i + 4);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + i + 8);
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + i + 12);
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + i + 16);
    *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + i + 20);
    *(void *)(v5 + 24) = *(void *)(a2 + i + 24);
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + i + 32);
    *(_DWORD *)(v5 + 36) = *(_DWORD *)(a2 + i + 36);
    int v6 = *(_DWORD *)(a2 + i + 40);
    *(void *)(v5 + 48) = 0;
    uint64_t v7 = (void *)(a1 + i + 48);
    *((_DWORD *)v7 - 2) = v6;
    v7[1] = 0;
    v7[2] = 0;
    std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__init_with_size[abi:ne180100]<cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>(v7, *(_DWORD **)(a2 + i + 48), *(_DWORD **)(a2 + i + 56), (uint64_t)(*(void *)(a2 + i + 56) - *(void *)(a2 + i + 48)) >> 5);
  }
  return a1;
}

void sub_24F508D6C(_Unwind_Exception *exception_object)
{
  for (; v2; v2 -= 72)
  {
    uint64_t v4 = *(void **)(v1 + v2 - 24);
    if (v4)
    {
      *(void *)(v1 + v2 - 16) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__init_with_size[abi:ne180100]<cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<tinyexr::OffsetData>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24F508DF0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = a4;
  while (a2 != a3)
  {
    _DWORD *result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    result[3] = a2[3];
    result[4] = a2[4];
    result[5] = a2[5];
    result[6] = a2[6];
    result[7] = a2[7];
    result += 8;
    a2 += 8;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = 0;
      uint64_t v4 = v1 + 232;
      do
      {
        uint64_t v5 = *(void **)(v1 + v3 + 208);
        if (v5)
        {
          *(void *)(v1 + v3 + 216) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != -216);
      v1 += 232;
    }
    while (v4 != v2);
  }
}

uint64_t std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = 0;
    *(void *)(a1 + 16) = i - 232;
    do
    {
      int v6 = *(void **)(i + v5 - 24);
      if (v6)
      {
        *(void *)(i + v5 - 16) = v6;
        operator delete(v6);
      }
      v5 -= 72;
    }
    while (v5 != -216);
  }
}

void std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 6)
  {
    if (a2)
    {
      char v14 = &v7[4 * a2];
      unint64_t v15 = a2 << 6;
      do
      {
        *uint64_t v7 = xmmword_24F578950;
        v7[1] = unk_24F578960;
        v7[2] = xmmword_24F578970;
        v7[3] = unk_24F578980;
        v7 += 4;
        v15 -= 64;
      }
      while (v15);
      uint64_t v7 = v14;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = (uint64_t)v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v23 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v16 = &v13[64 * v10];
    std::string __p = v13;
    int v20 = v16;
    unsigned int v22 = &v13[64 * v12];
    unint64_t v17 = a2 << 6;
    uint64_t v18 = &v16[64 * a2];
    do
    {
      *(_OWORD *)long long v16 = xmmword_24F578950;
      *((_OWORD *)v16 + 1) = unk_24F578960;
      *((_OWORD *)v16 + 2) = xmmword_24F578970;
      *((_OWORD *)v16 + 3) = unk_24F578980;
      v16 += 64;
      v17 -= 64;
    }
    while (v17);
    uint64_t v21 = v18;
    std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__swap_out_circular_buffer(a1, &__p);
    if (v21 != v20) {
      v21 += (v20 - v21 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F509110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 64;
      uint64_t v6 = v3 - 64;
      *(_OWORD *)(v4 - 64) = xmmword_24F578950;
      *(_OWORD *)(v4 - 48) = unk_24F578960;
      uint64_t v7 = -64;
      *(_OWORD *)(v4 - 32) = xmmword_24F578970;
      *(_OWORD *)(v4 - 16) = unk_24F578980;
      do
      {
        *(_DWORD *)(v4 + v7) = *(_DWORD *)(v3 + v7);
        v7 += 4;
      }
      while (v7);
      v3 -= 64;
      v4 -= 64;
    }
    while (v6 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  _DWORD *result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__function::__value_func<void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_1::__invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::__value_func[abi:ne180100]((uint64_t)v8, a1);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  int v7 = a2 >> 1;
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, int *, unint64_t, uint64_t, unint64_t))(*(void *)v9 + 48))(v9, &v7, v4 + 4 * (a2 & 1), a1 + 40, v5 + 32 * a2);
  return std::__function::__value_func<void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::~__value_func[abi:ne180100](v8);
}

void sub_24F50933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_1::__invoke(uint64_t a1, int a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(int)>::__value_func[abi:ne180100]((uint64_t)v4, a1);
  std::function<void ()(int)>::operator()((uint64_t)v4, a2);
  return std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v4);
}

void sub_24F5093CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeInfo>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v7, v9);
  uint64_t v11 = &v10[32 * v4];
  std::string __p = v10;
  long long v16 = v11;
  uint64_t v18 = &v10[32 * v12];
  *(_DWORD *)uint64_t v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  *((_DWORD *)v11 + 3) = a2[3];
  *((_DWORD *)v11 + 4) = a2[4];
  *((_DWORD *)v11 + 5) = a2[5];
  *((_DWORD *)v11 + 6) = a2[6];
  *((_DWORD *)v11 + 7) = a2[7];
  unint64_t v17 = v11 + 32;
  std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    v17 += (v16 - v17 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_24F509504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

float std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a7 - 16;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 16) = v9;
      *(_DWORD *)(v8 - 12) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 - 4) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 4) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 24);
      float result = *(float *)(a3 + 28);
      *(float *)(v8 + 12) = result;
      v8 -= 32;
      v7 -= 32;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    float v104 = a2 - 1;
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unsigned int v45 = *(a2 - 1);
                unsigned int v46 = *v12;
                if (*(float *)(*(void *)(*(void *)a3 + 680) + 232 * v45) > *(float *)(*(void *)(*(void *)a3 + 680)
                                                                                             + 232 * *v12))
                {
                  *uint64_t v12 = v45;
                  *(a2 - 1) = v46;
                }
                break;
              case 3uLL:
                float result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v12, v12 + 1, v104, a3);
                break;
              case 4uLL:
                float result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v12, v12 + 1, v12 + 2, v104, a3);
                break;
              case 5uLL:
                uint64_t v47 = v12 + 2;
                uint64_t v48 = v12 + 3;
                float result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                unsigned int v49 = *(a2 - 1);
                unsigned int v50 = v12[3];
                uint64_t v51 = *(void *)(*(void *)a3 + 680);
                if (*(float *)(v51 + 232 * v49) > *(float *)(v51 + 232 * v50))
                {
                  *uint64_t v48 = v49;
                  *(a2 - 1) = v50;
                  unsigned int v52 = *v48;
                  unsigned int v53 = *v47;
                  float v54 = *(float *)(v51 + 232 * *v48);
                  if (v54 > *(float *)(v51 + 232 * *v47))
                  {
                    *uint64_t v47 = v52;
                    *uint64_t v48 = v53;
                    unsigned int v55 = v12[1];
                    if (v54 > *(float *)(v51 + 232 * v55))
                    {
                      v12[1] = v52;
                      v12[2] = v55;
                      unsigned int v56 = *v12;
                      if (v54 > *(float *)(v51 + 232 * *v12))
                      {
                        *uint64_t v12 = v52;
                        v12[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v57 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v58 = 0;
                  uint64_t v59 = *(void *)(*(void *)a3 + 680);
                  int v60 = v12;
                  do
                  {
                    unsigned int v62 = *v60;
                    unsigned int v61 = v60[1];
                    int v60 = v57;
                    unsigned int v63 = v62;
                    float v64 = *(float *)(v59 + 232 * v61);
                    if (v64 > *(float *)(v59 + 232 * v62))
                    {
                      uint64_t v65 = v58;
                      while (1)
                      {
                        *(unsigned int *)((char *)v12 + v65 + 4) = v63;
                        if (!v65) {
                          break;
                        }
                        unsigned int v63 = *(unsigned int *)((char *)v12 + v65 - 4);
                        v65 -= 4;
                        if (v64 <= *(float *)(v59 + 232 * v63))
                        {
                          int v66 = (unsigned int *)((char *)v12 + v65 + 4);
                          goto LABEL_80;
                        }
                      }
                      int v66 = v12;
LABEL_80:
                      *int v66 = v61;
                    }
                    uint64_t v57 = v60 + 1;
                    v58 += 4;
                  }
                  while (v60 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              unint64_t v97 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v98 = *(void *)(*(void *)a3 + 680);
                do
                {
                  unsigned int v100 = *v11;
                  unsigned int v99 = v11[1];
                  uint64_t v11 = v97;
                  unsigned int v101 = v100;
                  float v102 = *(float *)(v98 + 232 * v99);
                  if (v102 > *(float *)(v98 + 232 * v100))
                  {
                    double v103 = v11;
                    do
                    {
                      *double v103 = v101;
                      unsigned int v101 = *(v103 - 2);
                      --v103;
                    }
                    while (v102 > *(float *)(v98 + 232 * v101));
                    *double v103 = v99;
                  }
                  unint64_t v97 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v67 = (v14 - 2) >> 1;
              uint64_t v68 = *(void *)a3;
              int64_t v69 = v67;
              do
              {
                int64_t v70 = v69;
                if (v67 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v12[v71];
                  if (2 * v70 + 2 < (uint64_t)v14)
                  {
                    uint64_t v73 = *(void *)(v68 + 680);
                    if (*(float *)(v73 + 232 * *v72) > *(float *)(v73 + 232 * v72[1]))
                    {
                      ++v72;
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v73 = *(void *)(v68 + 680);
                  }
                  uint64_t v74 = &v12[v70];
                  unsigned int v75 = *v72;
                  unsigned int v76 = *v74;
                  float result = 232 * *v74;
                  float v77 = *(float *)(v73 + result);
                  if (*(float *)(v73 + 232 * *v72) <= v77)
                  {
                    do
                    {
                      float result = (uint64_t)v72;
                      unsigned int *v74 = v75;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v78 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      uint64_t v72 = &v12[v71];
                      uint64_t v79 = v78 + 2;
                      if (v79 < (uint64_t)v14 && *(float *)(v73 + 232 * *v72) > *(float *)(v73 + 232 * v72[1]))
                      {
                        ++v72;
                        uint64_t v71 = v79;
                      }
                      unsigned int v75 = *v72;
                      uint64_t v74 = (unsigned int *)result;
                    }
                    while (*(float *)(v73 + 232 * *v72) <= v77);
                    *(_DWORD *)float result = v76;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v80 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v81 = 0;
                unsigned int v82 = *v12;
                uint64_t v83 = *(void *)a3;
                uint64_t v84 = v12;
                do
                {
                  uint64_t v85 = v84;
                  v84 += v81 + 1;
                  uint64_t v86 = 2 * v81;
                  uint64_t v81 = (2 * v81) | 1;
                  uint64_t v87 = v86 + 2;
                  if (v87 < v80)
                  {
                    float result = 232 * v84[1];
                    if (*(float *)(*(void *)(v83 + 680) + 232 * *v84) > *(float *)(*(void *)(v83 + 680) + result))
                    {
                      ++v84;
                      uint64_t v81 = v87;
                    }
                  }
                  *uint64_t v85 = *v84;
                }
                while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                if (v84 == --a2)
                {
                  *uint64_t v84 = v82;
                }
                else
                {
                  *uint64_t v84 = *a2;
                  *a2 = v82;
                  uint64_t v88 = (char *)v84 - (char *)v12 + 4;
                  if (v88 >= 5)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 2) - 2) >> 1;
                    __float2 v90 = &v12[v89];
                    unsigned int v91 = *v90;
                    unsigned int v92 = *v84;
                    uint64_t v93 = *(void *)(v83 + 680);
                    float v94 = *(float *)(v93 + 232 * *v84);
                    if (*(float *)(v93 + 232 * *v90) > v94)
                    {
                      do
                      {
                        float v95 = v90;
                        *uint64_t v84 = v91;
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        __float2 v90 = &v12[v89];
                        unsigned int v91 = *v90;
                        uint64_t v84 = v95;
                      }
                      while (*(float *)(v93 + 232 * *v90) > v94);
                      *float v95 = v92;
                    }
                  }
                }
              }
              while (v80-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v11, &v11[v14 >> 1], v104, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v11 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            float result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v16 - 1, v16, &v11[v15 + 1], a3);
            unsigned int v17 = *v11;
            *uint64_t v11 = *v16;
            *long long v16 = v17;
          }
          else
          {
            float result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(&v11[v14 >> 1], v11, v104, a3);
          }
          --a4;
          unsigned int v18 = *v11;
          uint64_t v19 = *(void *)a3;
          if (a5) {
            break;
          }
          uint64_t v20 = *(void *)(v19 + 680);
          float v21 = *(float *)(v20 + 232 * v18);
          if (*(float *)(v20 + 232 * *(v11 - 1)) > v21) {
            goto LABEL_13;
          }
          if (v21 <= *(float *)(v20 + 232 * *v104))
          {
            uint64_t v37 = v11 + 1;
            do
            {
              uint64_t v12 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v21 <= *(float *)(v20 + 232 * *v12));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              unsigned int v36 = v12[1];
              ++v12;
            }
            while (v21 <= *(float *)(v20 + 232 * v36));
          }
          uint64_t v38 = a2;
          if (v12 < a2)
          {
            uint64_t v38 = a2;
            do
              unsigned int v39 = *--v38;
            while (v21 > *(float *)(v20 + 232 * v39));
          }
          if (v12 < v38)
          {
            unsigned int v40 = *v12;
            unsigned int v41 = *v38;
            do
            {
              *uint64_t v12 = v41;
              *uint64_t v38 = v40;
              do
              {
                unsigned int v42 = v12[1];
                ++v12;
                unsigned int v40 = v42;
              }
              while (v21 <= *(float *)(v20 + 232 * v42));
              do
              {
                unsigned int v43 = *--v38;
                unsigned int v41 = v43;
              }
              while (v21 > *(float *)(v20 + 232 * v43));
            }
            while (v12 < v38);
          }
          uint64_t v44 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v44;
          }
          a5 = 0;
          *uint64_t v44 = v18;
        }
        uint64_t v20 = *(void *)(v19 + 680);
        float v21 = *(float *)(v20 + 232 * v18);
LABEL_13:
        uint64_t v22 = 0;
        do
          unsigned int v23 = v11[++v22];
        while (*(float *)(v20 + 232 * v23) > v21);
        unsigned int v24 = &v11[v22];
        int v25 = a2;
        if (v22 == 1)
        {
          int v25 = a2;
          do
          {
            if (v24 >= v25) {
              break;
            }
            unsigned int v27 = *--v25;
          }
          while (*(float *)(v20 + 232 * v27) <= v21);
        }
        else
        {
          do
            unsigned int v26 = *--v25;
          while (*(float *)(v20 + 232 * v26) <= v21);
        }
        if (v24 >= v25)
        {
          uint64_t v34 = v24 - 1;
        }
        else
        {
          unsigned int v28 = *v25;
          unsigned int v29 = v23;
          uint64_t v30 = &v11[v22];
          uint64_t v31 = v25;
          do
          {
            unsigned int *v30 = v28;
            *uint64_t v31 = v29;
            do
            {
              unsigned int v32 = v30[1];
              ++v30;
              unsigned int v29 = v32;
            }
            while (*(float *)(v20 + 232 * v32) > v21);
            do
            {
              unsigned int v33 = *--v31;
              unsigned int v28 = v33;
            }
            while (*(float *)(v20 + 232 * v33) <= v21);
          }
          while (v30 < v31);
          uint64_t v34 = v30 - 1;
        }
        if (v34 != v11) {
          *uint64_t v11 = *v34;
        }
        unsigned int *v34 = v18;
        if (v24 >= v25) {
          break;
        }
LABEL_34:
        float result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *,false>(v11, v34, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v34 + 1;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v11, v34, a3);
      uint64_t v12 = v34 + 1;
      float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v34 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v34;
    if (!v35) {
      continue;
    }
    return result;
  }
}

unsigned int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = *result;
  uint64_t v6 = *(void *)(*(void *)a4 + 680);
  float v7 = *(float *)(v6 + 232 * *a2);
  float v8 = *(float *)(v6 + 232 * *result);
  unsigned int v9 = *a3;
  float v10 = *(float *)(v6 + 232 * *a3);
  if (v7 <= v8)
  {
    if (v10 > v7)
    {
      *a2 = v9;
      *a3 = v4;
      unsigned int v11 = *result;
      if (*(float *)(v6 + 232 * *a2) > *(float *)(v6 + 232 * *result))
      {
        _DWORD *result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 <= v7)
    {
      _DWORD *result = v4;
      *a2 = v5;
      if (*(float *)(v6 + 232 * *a3) <= v8) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      _DWORD *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(a2 - 1);
      unsigned int v9 = *a1;
      if (*(float *)(*(void *)(*(void *)a3 + 680) + 232 * v8) > *(float *)(*(void *)(*(void *)a3 + 680)
                                                                                  + 232 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      float v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      unsigned int v23 = *(a2 - 1);
      unsigned int v24 = a1[3];
      uint64_t v25 = *(void *)(*(void *)a3 + 680);
      if (*(float *)(v25 + 232 * v23) > *(float *)(v25 + 232 * v24))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v24;
        unsigned int v26 = *v22;
        unsigned int v27 = *v21;
        float v28 = *(float *)(v25 + 232 * *v22);
        if (v28 > *(float *)(v25 + 232 * *v21))
        {
          *float v21 = v26;
          *uint64_t v22 = v27;
          unsigned int v29 = a1[1];
          if (v28 > *(float *)(v25 + 232 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            unsigned int v30 = *a1;
            if (v28 > *(float *)(v25 + 232 * *a1))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      float v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *(void *)(*(void *)a3 + 680);
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    unsigned int v15 = *v11;
    unsigned int v16 = *v10;
    float v17 = *(float *)(v13 + 232 * *v11);
    if (v17 > *(float *)(v13 + 232 * *v10))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + vstd::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        unsigned int v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(float *)(v13 + 232 * v16))
        {
          uint64_t v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      unsigned int *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    float v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

unsigned int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a2, a3, a5);
  unsigned int v11 = *a3;
  uint64_t v12 = *(void *)(*(void *)a5 + 680);
  if (*(float *)(v12 + 232 * *a4) > *(float *)(v12 + 232 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    unsigned int v13 = *a2;
    if (*(float *)(v12 + 232 * *a3) > *(float *)(v12 + 232 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      unsigned int v14 = *a1;
      if (*(float *)(v12 + 232 * *a2) > *(float *)(v12 + 232 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_2700D8BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D8BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::operator()(uint64_t a1, int *a2, int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *a2;
  int v8 = *a3;
  if (*a2 == v8)
  {
    int v9 = 1;
  }
  else
  {
    switch(v8)
    {
      case 0:
      case 2:
        BOOL v10 = v7 - v8 == 1;
        goto LABEL_6;
      case 1:
      case 3:
        BOOL v10 = v7 - v8 == -1;
LABEL_6:
        int v9 = v10;
        break;
      default:
        int v9 = 0;
        break;
    }
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if ((v7 | 2) == 3) {
    uint64_t v12 = (int *)(v11 + 24);
  }
  else {
    uint64_t v12 = (int *)(v11 + 28);
  }
  int v13 = *v12;
  unsigned int v14 = (int *)(v11 + 28);
  unsigned int v15 = (int *)(v11 + 24);
  if ((v7 | 2) == 3) {
    unsigned int v15 = v14;
  }
  int v16 = *v15;
  int v17 = v8 - v7 + 6;
  int v18 = v17 & 3;
  int v20 = -v17;
  BOOL v19 = v20 < 0;
  int v21 = v20 & 3;
  if (v19) {
    int v22 = v18;
  }
  else {
    int v22 = -v21;
  }
  uint64_t v23 = 156;
  if (*a4) {
    uint64_t v24 = 156;
  }
  else {
    uint64_t v24 = 148;
  }
  if (*a4) {
    uint64_t v25 = 160;
  }
  else {
    uint64_t v25 = 152;
  }
  int v26 = *(_DWORD *)(v6 + v25);
  int v27 = *(_DWORD *)(v6 + v24);
  if (*a4) {
    uint64_t v23 = 148;
  }
  int v28 = *(_DWORD *)(v6 + v23);
  if (*a4) {
    uint64_t v29 = 152;
  }
  else {
    uint64_t v29 = 160;
  }
  BOOL v10 = v9 == 0;
  uint64_t v30 = 392;
  if (!v10) {
    uint64_t v30 = 488;
  }
  return cv3d::cv::gess::isochart::TetrisPacking::TryPut(v6, (void *)(v6 + v30 + 24 * v7), v8, 90 * v22, v13, v26 - v27, v28, *(_DWORD *)(v6 + v29), v16, a5);
}

void *std::__function::__value_func<void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_2700D8C18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D8C18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::operator()(uint64_t result, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = *(int **)(result + 16);
      uint64_t v3 = **(int **)(result + 8);
      if ((int)v3 < *v2)
      {
        int v4 = *(unsigned __int8 *)(result + 40);
        uint64_t v5 = **(void **)(result + 56);
        uint64_t v6 = *(int **)(result + 24);
        int v7 = *(int **)(result + 32);
        do
        {
          int v8 = *v6;
          int v9 = *v7;
          if (*v7 <= *v6) {
            int v9 = *v6;
          }
          BOOL v10 = *(void **)(result + 48);
          uint64_t v11 = 24 * v8;
          uint64_t v12 = v9 - (uint64_t)v8;
          int v13 = *v6;
          if (v4)
          {
            while (v12)
            {
              int v14 = *(unsigned __int8 *)(*(void *)(*v10 + v11) + v3);
              v11 += 24;
              ++v13;
              --v12;
              if (v14 == 1) {
                goto LABEL_14;
              }
            }
          }
          else
          {
            while (v12)
            {
              int v15 = *(unsigned __int8 *)(*(void *)(*v10 + v11) + v3);
              v11 += 24;
              ++v13;
              --v12;
              if (v15) {
                goto LABEL_14;
              }
            }
          }
          int v13 = v9;
LABEL_14:
          *(_DWORD *)(v5 + 4 * v3++) = v13 + ~v8;
        }
        while (v3 < *v2);
      }
      break;
    case 1:
      uint64_t v44 = *(int **)(result + 32);
      uint64_t v45 = **(int **)(result + 24);
      if ((int)v45 < *v44)
      {
        int v46 = *(unsigned __int8 *)(result + 40);
        uint64_t v47 = *(void *)(*(void *)(result + 56) + 24);
        unsigned int v49 = *(int **)(result + 8);
        uint64_t v48 = *(int **)(result + 16);
        do
        {
          uint64_t v50 = *v49;
          if ((int)v50 >= *v48) {
            int v51 = *v48;
          }
          else {
            int v51 = *v49;
          }
          unsigned int v52 = *(void **)(result + 48);
          uint64_t v53 = *v48;
          uint64_t v54 = v53;
          if (v46)
          {
            while (v53 > v50)
            {
              int v55 = v53 - 1;
              int v56 = *(unsigned __int8 *)(*(void *)(*v52 + 24 * v45) + v53-- - 1);
              if (v56 == 1)
              {
                int v51 = v55;
                break;
              }
            }
          }
          else
          {
            while (v54 > v50)
            {
              int v57 = v54 - 1;
              if (*(unsigned __int8 *)(*(void *)(*v52 + 24 * v45) + v54-- - 1))
              {
                int v51 = v57;
                break;
              }
            }
          }
          *(_DWORD *)(v47 + 4 * v45++) = *v48 + ~v51;
        }
        while (v45 < *v44);
      }
      break;
    case 2:
      int v16 = *(int **)(result + 16);
      uint64_t v17 = **(int **)(result + 8);
      if ((int)v17 < *v16)
      {
        int v18 = *(unsigned __int8 *)(result + 40);
        uint64_t v19 = *(void *)(*(void *)(result + 56) + 48);
        int v21 = *(int **)(result + 24);
        int v20 = *(int **)(result + 32);
        do
        {
          int v22 = *v20;
          uint64_t v23 = *v21;
          if ((int)v23 >= *v20) {
            int v24 = *v20;
          }
          else {
            int v24 = *v21;
          }
          uint64_t v25 = *(void **)(result + 48);
          uint64_t v26 = 24 * v22 - 24;
          uint64_t v27 = *v20;
          if (v18)
          {
            while (v27 > v23)
            {
              --v27;
              int v28 = *(unsigned __int8 *)(*(void *)(*v25 + v26) + v17);
              v26 -= 24;
              if (v28 == 1) {
                goto LABEL_27;
              }
            }
          }
          else
          {
            while (v27 > v23)
            {
              --v27;
              int v29 = *(unsigned __int8 *)(*(void *)(*v25 + v26) + v17);
              v26 -= 24;
              if (v29)
              {
LABEL_27:
                int v24 = v27;
                break;
              }
            }
          }
          *(_DWORD *)(v19 + 4 * v17++) = v22 + ~v24;
        }
        while (v17 < *v16);
      }
      break;
    case 3:
      uint64_t v30 = *(int **)(result + 32);
      uint64_t v31 = **(int **)(result + 24);
      if ((int)v31 < *v30)
      {
        int v32 = *(unsigned __int8 *)(result + 40);
        uint64_t v33 = *(void *)(*(void *)(result + 56) + 72);
        uint64_t v34 = *(int **)(result + 8);
        BOOL v35 = *(int **)(result + 16);
        do
        {
          int v36 = *v35;
          if (*v35 <= *v34) {
            int v36 = *v34;
          }
          uint64_t v37 = *(void **)(result + 48);
          uint64_t v38 = *v34;
          uint64_t v39 = v38;
          if (v32)
          {
            while (v36 != v38)
            {
              int v40 = v38 + 1;
              int v41 = *(unsigned __int8 *)(*(void *)(*v37 + 24 * v31) + v38++);
              if (v41 == 1)
              {
                int v36 = v40;
                break;
              }
            }
          }
          else
          {
            while (v36 != v39)
            {
              int v42 = v39 + 1;
              if (*(unsigned __int8 *)(*(void *)(*v37 + 24 * v31) + v39++))
              {
                int v36 = v42;
                break;
              }
            }
          }
          *(_DWORD *)(v33 + 4 * v31++) = v36 + ~*v34;
        }
        while (v31 < *v30);
      }
      break;
    default:
      return result;
  }
  return result;
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      BOOL v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  BOOL v10 = operator new(0x18uLL);
  *BOOL v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *BOOL v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *BOOL v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_24F50AB50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CalculateLandmarkVertices(uint64_t a1, unsigned int **a2, char *a3, _WORD *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*a4)
  {
    unint64_t v6 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
    if ((unsigned __int16)*a4 >= (v6 >> 2))
    {
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)a2, (v6 >> 2));
      if ((v6 >> 2))
      {
        uint64_t v10 = 0;
        do
        {
          (*a2)[v10] = v10;
          ++v10;
        }
        while ((v6 >> 2) != v10);
      }
    }
    else
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v15);
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)v15, (void **)a1);
      int v13 = 1065353216;
      char v12 = 0;
      __int16 v14 = 1;
      int v11 = 1065353216;
      cv3d::cv::gess::internal::Simplify::Simplify(&v17, v15, &v11);
      cv3d::cv::gess::internal::Simplify::Calculate((cv3d::cv::gess::internal::Simplify *)&v17);
      unint64_t v9 = (v6 >> 2);
      if (v9 != (v18 - (uint64_t)v17) >> 2) {
        __assert_rtn("CalculateLandmarkVertices", "IsoChartLandmark.cpp", 29, "simplifier.v_importances.size() == v_size");
      }
      if (&v17 != (char **)a3) {
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(a3, v17, v18, v9);
      }
      cv3d::cv::gess::isochart::CollectLandmarkVertices(a1, &v17, a4, a2);
      cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)&v17);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
  }
}

void sub_24F50ACE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::CollectLandmarkVertices(uint64_t a1, void *a2, _WORD *a3, unsigned int **a4)
{
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  unint64_t v8 = ((*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::reserve(&v71, v8);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v72;
    do
    {
      uint64_t v11 = *(unsigned int *)(*a2 + 4 * v9);
      if (v10 >= v73)
      {
        uint64_t v12 = (v10 - (unsigned char *)v71) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = (v73 - (unsigned char *)v71) >> 2;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)(v73 - (unsigned char *)v71) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v73, v14);
        }
        else {
          unint64_t v15 = 0;
        }
        unint64_t v16 = &v15[8 * v12];
        *(void *)unint64_t v16 = v9 | (v11 << 32);
        uint64_t v10 = v16 + 8;
        uint64_t v18 = (char *)v71;
        size_t v17 = v72;
        if (v72 != v71)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          size_t v17 = (char *)v71;
        }
        uint64_t v71 = v16;
        uint64_t v72 = v10;
        uint64_t v73 = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v10 = v9 | (v11 << 32);
        v10 += 8;
      }
      uint64_t v72 = v10;
      ++v9;
    }
    while (v9 != v8);
  }
  else
  {
    uint64_t v10 = v72;
  }
  unint64_t v20 = 126 - 2 * __clz((v10 - (unsigned char *)v71) >> 3);
  if (v10 == v71) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>((uint64_t)v71, (uint64_t *)v10, v21, 1);
  uint64_t v22 = v72 - (unsigned char *)v71;
  if ((unint64_t)(v72 - (unsigned char *)v71) <= 0xF) {
    __assert_rtn("CollectLandmarkVertices", "IsoChartLandmark.cpp", 50, "vh_importance_pairs.size() >= 2");
  }
  a4[1] = *a4;
  if (*(void *)(a1 + 112) == *(void *)(a1 + 104))
  {
    v28.i64[0] = 0x7F0000007FLL;
    v28.i64[1] = 0x7F0000007FLL;
  }
  else
  {
    LODWORD(v23) = 0;
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v25.i64[0] = 0x80000000800000;
    v25.i64[1] = 0x80000000800000;
    unsigned int v26 = 1;
    do
    {
      float32x4_t v65 = v25;
      float32x4_t v66 = v24;
      uint64_t v27 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v23);
      float32x4_t v24 = vminq_f32(v66, *v27);
      float32x4_t v25 = vmaxq_f32(v65, *v27);
      unint64_t v23 = v26++;
    }
    while (v23 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
    uint64_t v22 = v72 - (unsigned char *)v71;
    float32x4_t v28 = vsubq_f32(v25, v24);
  }
  float32x4_t v67 = v28;
  LOWORD(v4) = *a3;
  unsigned __int8 v69 = 0;
  std::vector<BOOL>::vector(&__p, v22 >> 3, &v69);
  int v29 = (char *)v71;
  if (v72 != v71)
  {
    unint64_t v30 = 0;
    float32x4_t v31 = vmulq_f32(v67, v67);
    v31.i32[3] = 0;
    float v32 = (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31))) / (float)v4) * 0.5;
    uint64_t v33 = a4 + 2;
    do
    {
      unsigned int v34 = *(_DWORD *)&v29[8 * v30];
      int v36 = *a4;
      BOOL v35 = a4[1];
      if (*a4 == v35)
      {
LABEL_37:
        if ((unint64_t)v36 >= *v33)
        {
          uint64_t v40 = v36 - *a4;
          if ((unint64_t)(v40 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = *v33 - (void)*a4;
          uint64_t v42 = v41 >> 1;
          if (v41 >> 1 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = (unsigned int *)&v44[4 * v40];
          unsigned int *v45 = v34;
          uint64_t v39 = v45 + 1;
          uint64_t v47 = *a4;
          int v46 = a4[1];
          if (v46 != *a4)
          {
            do
            {
              unsigned int v48 = *--v46;
              *--uint64_t v45 = v48;
            }
            while (v46 != v47);
            int v46 = *a4;
          }
          *a4 = v45;
          a4[1] = v39;
          a4[2] = (unsigned int *)&v44[4 * v43];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *int v36 = v34;
          uint64_t v39 = v36 + 1;
        }
        a4[1] = v39;
        *(void *)((char *)__p + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
        if ((unsigned __int16)*a3 <= (unint64_t)(v39 - *a4)) {
          goto LABEL_77;
        }
      }
      else
      {
        while (1)
        {
          float32x4_t v68 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v34);
          float32x4_t v37 = vsubq_f32(v68, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v36));
          float32x4_t v38 = vmulq_f32(v37, v37);
          v38.i32[3] = 0;
          if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38))) < v32) {
            break;
          }
          if (++v36 == v35)
          {
            int v36 = a4[1];
            goto LABEL_37;
          }
        }
      }
      ++v30;
      int v29 = (char *)v71;
      unsigned int v49 = v72;
    }
    while (v30 < (v72 - (unsigned char *)v71) >> 3);
    if (v72 != v71)
    {
      for (unint64_t i = 0; i < (v49 - v29) >> 3; ++i)
      {
        if (((*(void *)((char *)__p + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        {
          unsigned int v51 = *(_DWORD *)&v29[8 * i];
          uint64_t v53 = a4[1];
          unint64_t v52 = (unint64_t)a4[2];
          if ((unint64_t)v53 >= v52)
          {
            uint64_t v55 = v53 - *a4;
            if ((unint64_t)(v55 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v52 - (void)*a4;
            uint64_t v57 = v56 >> 1;
            if (v56 >> 1 <= (unint64_t)(v55 + 1)) {
              uint64_t v57 = v55 + 1;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58) {
              uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v58);
            }
            else {
              uint64_t v59 = 0;
            }
            int v60 = &v59[4 * v55];
            *(_DWORD *)int v60 = v51;
            uint64_t v54 = (unsigned int *)(v60 + 4);
            unsigned int v62 = *a4;
            unsigned int v61 = a4[1];
            if (v61 != *a4)
            {
              do
              {
                int v63 = *--v61;
                *((_DWORD *)v60 - 1) = v63;
                v60 -= 4;
              }
              while (v61 != v62);
              unsigned int v61 = *a4;
            }
            *a4 = (unsigned int *)v60;
            a4[1] = v54;
            a4[2] = (unsigned int *)&v59[4 * v58];
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *uint64_t v53 = v51;
            uint64_t v54 = v53 + 1;
          }
          a4[1] = v54;
          if ((unsigned __int16)*a3 <= (unint64_t)(v54 - *a4)) {
            break;
          }
          int v29 = (char *)v71;
          unsigned int v49 = v72;
        }
      }
    }
  }
LABEL_77:
  if (__p) {
    operator delete(__p);
  }
  if (v71)
  {
    uint64_t v72 = (char *)v71;
    operator delete(v71);
  }
}

void sub_24F50B24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::reserve(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void cv3d::cv::gess::isochart::CalculateVertexImportance(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  v23[35] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 13);
  uint64_t v3 = *((void *)this + 14);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v20);
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)v20, (void **)this);
  int v18 = 1065353216;
  char v17 = 0;
  __int16 v19 = 1;
  int v16 = 1065353216;
  cv3d::cv::gess::internal::Simplify::Simplify(v23, v20, &v16);
  cv3d::cv::gess::internal::Simplify::Calculate((cv3d::cv::gess::internal::Simplify *)v23);
  uint64_t v5 = v3 - v4;
  uint64_t v6 = ((unint64_t)(v3 - v4) >> 2);
  if (v6 != (uint64_t)(v23[1] - v23[0]) >> 2) {
    __assert_rtn("CalculateVertexImportance", "IsoChartLandmark.cpp", 98, "simplifier.v_importances.size() == v_size");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  unint64_t v7 = (uint64_t *)((char *)this + 8);
  int v22 = 0;
  int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)this + 1, (uint64_t)&v22, (unsigned __int8 *)__p);
  int v15 = v8;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v8 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>((uint64_t)this, &v15, (long long *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(v23[0] + 4 * v9);
      LODWORD(__p[0]) = v15;
      uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v7, (unsigned int *)__p);
      uint64_t v12 = *(void *)(v11 + 40);
      if (v9 >= (*(void *)(v11 + 48) - v12) >> 2) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v12 + 4 * v9++) = v10;
    }
    while (v6 != v9);
  }
  cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)v23);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_24F50B52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)&a22);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CollectLandmarks(uint64_t a1, _WORD *a2, unsigned int **a3)
{
  unint64_t v6 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  unsigned __int8 v7 = 0;
  std::vector<BOOL>::vector(__p, v6, &v7);
  cv3d::cv::gess::isochart::CollectLandmarks(a1, a2, __p, a3);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_24F50B600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::CollectLandmarks(uint64_t a1, _WORD *a2, void *a3, unsigned int **a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "v:importance");
  LODWORD(v68[0]) = 0;
  int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 8), (uint64_t)v68, (unsigned __int8 *)&__p);
  if (v71 < 0) {
    operator delete(__p);
  }
  if (v10 == -1)
  {
    cv3d::cv::gess::isochart::CalculateVertexImportance((cv3d::cv::gess::isochart *)a1, v9);
    std::string::basic_string[abi:ne180100]<0>(&__p, "v:importance");
    LODWORD(v68[0]) = 0;
    int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 8), (uint64_t)v68, (unsigned __int8 *)&__p);
    if (v71 < 0) {
      operator delete(__p);
    }
    if (v10 == -1) {
      cv3d::cv::gess::isochart::CollectLandmarks();
    }
  }
  unint64_t v11 = ((*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::vector(&__p, v11);
  uint64_t v12 = (uint64_t *)__p;
  if (v11)
  {
    uint64_t v13 = 0;
    for (unint64_t i = 0; i != v11; ++i)
    {
      LODWORD(v12[v13]) = i;
      LODWORD(v68[0]) = v10;
      uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 8), (unsigned int *)v68);
      uint64_t v16 = *(void *)(v15 + 40);
      if (i >= (*(void *)(v15 + 48) - v16) >> 2) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      uint64_t v12 = (uint64_t *)__p;
      *(_DWORD *)((char *)__p + v13 * 8 + 4) = *(_DWORD *)(v16 + 4 * i);
      ++v13;
    }
  }
  unint64_t v17 = 126 - 2 * __clz(v70 - v12);
  if (v70 == v12) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>((uint64_t)v12, v70, v18, 1);
  int64_t v19 = (char *)v70 - (unsigned char *)__p;
  if ((unint64_t)((char *)v70 - (unsigned char *)__p) <= 0xF) {
    __assert_rtn("CollectLandmarks", "IsoChartLandmark.cpp", 135, "vh_importance_pairs.size() >= 2");
  }
  a4[1] = *a4;
  if (*(void *)(a1 + 112) == *(void *)(a1 + 104))
  {
    v25.i64[0] = 0x7F0000007FLL;
    v25.i64[1] = 0x7F0000007FLL;
  }
  else
  {
    LODWORD(v20) = 0;
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v22.i64[0] = 0x80000000800000;
    v22.i64[1] = 0x80000000800000;
    unsigned int v23 = 1;
    do
    {
      float32x4_t v62 = v22;
      float32x4_t v64 = v21;
      float32x4_t v24 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v20);
      float32x4_t v21 = vminq_f32(v64, *v24);
      float32x4_t v22 = vmaxq_f32(v62, *v24);
      unint64_t v20 = v23++;
    }
    while (v20 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
    int64_t v19 = (char *)v70 - (unsigned char *)__p;
    float32x4_t v25 = vsubq_f32(v22, v21);
  }
  float32x4_t v65 = v25;
  LOWORD(v4) = *a2;
  unsigned __int8 v67 = 0;
  std::vector<BOOL>::vector(v68, v19 >> 3, &v67);
  unsigned int v26 = __p;
  if (v70 != __p)
  {
    unint64_t v27 = 0;
    float32x4_t v28 = vmulq_f32(v65, v65);
    v28.i32[3] = 0;
    float v29 = (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28))) / (float)v4) * 0.3;
    uint64_t v63 = (uint64_t)(a4 + 2);
    while (2)
    {
      unint64_t v30 = *(unsigned int *)&v26[8 * v27];
      float32x4_t v31 = *a4;
      float v32 = a4[1];
      while (v31 != v32)
      {
        float32x4_t v66 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v30);
        float32x4_t v33 = vsubq_f32(v66, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v31));
        float32x4_t v34 = vmulq_f32(v33, v33);
        v34.i32[3] = 0;
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34))) < v29) {
          goto LABEL_44;
        }
        ++v31;
      }
      if (((*(void *)(*a3 + ((v30 >> 3) & 0x1FFFFFF8)) >> v30) & 1) == 0)
      {
        int v36 = a4[1];
        unint64_t v35 = (unint64_t)a4[2];
        if ((unint64_t)v36 >= v35)
        {
          uint64_t v38 = v36 - *a4;
          if ((unint64_t)(v38 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v35 - (void)*a4;
          uint64_t v40 = v39 >> 1;
          if (v39 >> 1 <= (unint64_t)(v38 + 1)) {
            uint64_t v40 = v38 + 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v40;
          }
          if (v41) {
            uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v63, v41);
          }
          else {
            uint64_t v42 = 0;
          }
          unint64_t v43 = (unsigned int *)&v42[4 * v38];
          *unint64_t v43 = v30;
          float32x4_t v37 = v43 + 1;
          uint64_t v45 = *a4;
          uint64_t v44 = a4[1];
          if (v44 != *a4)
          {
            do
            {
              unsigned int v46 = *--v44;
              *--unint64_t v43 = v46;
            }
            while (v44 != v45);
            uint64_t v44 = *a4;
          }
          *a4 = v43;
          a4[1] = v37;
          a4[2] = (unsigned int *)&v42[4 * v41];
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          *int v36 = v30;
          float32x4_t v37 = v36 + 1;
        }
        a4[1] = v37;
        *(void *)((char *)v68[0] + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
        if ((unsigned __int16)*a2 <= (unint64_t)(v37 - *a4)) {
          goto LABEL_68;
        }
      }
LABEL_44:
      ++v27;
      unsigned int v26 = __p;
      uint64_t v47 = v70;
      if (v27 < ((char *)v70 - (unsigned char *)__p) >> 3) {
        continue;
      }
      break;
    }
    if (v70 != __p)
    {
      for (unint64_t j = 0; j < ((char *)v47 - v26) >> 3; ++j)
      {
        if (((*(void *)((char *)v68[0] + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
        {
          unint64_t v49 = *(unsigned int *)&v26[8 * j];
          if (((*(void *)(*a3 + ((v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) == 0)
          {
            unsigned int v51 = a4[1];
            unint64_t v50 = (unint64_t)a4[2];
            if ((unint64_t)v51 >= v50)
            {
              uint64_t v53 = v51 - *a4;
              if ((unint64_t)(v53 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v54 = v50 - (void)*a4;
              uint64_t v55 = v54 >> 1;
              if (v54 >> 1 <= (unint64_t)(v53 + 1)) {
                uint64_t v55 = v53 + 1;
              }
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v55;
              }
              if (v56) {
                uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v63, v56);
              }
              else {
                uint64_t v57 = 0;
              }
              unint64_t v58 = (unsigned int *)&v57[4 * v53];
              unsigned int *v58 = v49;
              unint64_t v52 = v58 + 1;
              int v60 = *a4;
              uint64_t v59 = a4[1];
              if (v59 != *a4)
              {
                do
                {
                  unsigned int v61 = *--v59;
                  *--unint64_t v58 = v61;
                }
                while (v59 != v60);
                uint64_t v59 = *a4;
              }
              *a4 = v58;
              a4[1] = v52;
              a4[2] = (unsigned int *)&v57[4 * v56];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              unsigned int *v51 = v49;
              unint64_t v52 = v51 + 1;
            }
            a4[1] = v52;
            if ((unsigned __int16)*a2 <= (unint64_t)(v52 - *a4)) {
              break;
            }
            unsigned int v26 = __p;
            uint64_t v47 = v70;
          }
        }
      }
    }
  }
LABEL_68:
  if (v68[0]) {
    operator delete(v68[0]);
  }
  if (__p)
  {
    int64_t v70 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_24F50BB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::internal::Simplify::~Simplify(cv3d::cv::gess::internal::Simplify *this)
{
  uint64_t v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 30) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 24) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 20);
  if (v5)
  {
    *((void *)this + 21) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 17);
  if (v6) {
    operator delete(v6);
  }
  unsigned __int8 v7 = (void *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 11);
  if (v8)
  {
    *((void *)this + 12) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 3);
  int v10 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v10;
    operator delete(v10);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (int *)result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *(void *)v10;
                if (HIDWORD(*(void *)v10) < HIDWORD(v44))
                {
                  *int v10 = v44;
                  *((_DWORD *)a2 - 2) = v45;
                  int v46 = v10[1];
                  v10[1] = *((_DWORD *)a2 - 1);
                  *((_DWORD *)a2 - 1) = v46;
                }
                break;
              case 3uLL:
                __n128 result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v10, v10 + 2, a2 - 1);
                break;
              case 4uLL:
                __n128 result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v10, v10 + 2, (uint64_t)(v10 + 4), (uint64_t)(a2 - 1));
                break;
              case 5uLL:
                __n128 result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v10, v10 + 2, (uint64_t)(v10 + 4), (uint64_t)(v10 + 6));
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = *((void *)v10 + 3);
                if (HIDWORD(v48) < HIDWORD(v47))
                {
                  v10[6] = v47;
                  *((_DWORD *)a2 - 2) = v48;
                  int v49 = v10[7];
                  v10[7] = *((_DWORD *)a2 - 1);
                  *((_DWORD *)a2 - 1) = v49;
                  uint64_t v50 = *((void *)v10 + 2);
                  unint64_t v51 = *((void *)v10 + 3);
                  unint64_t v52 = HIDWORD(v51);
                  if (HIDWORD(v50) < HIDWORD(v51))
                  {
                    *((void *)v10 + 2) = v51;
                    *((void *)v10 + 3) = v50;
                    uint64_t v53 = *((void *)v10 + 1);
                    uint64_t v54 = *((void *)v10 + 2);
                    if (HIDWORD(v53) < HIDWORD(v54))
                    {
                      _DWORD v10[2] = v54;
                      v10[3] = v52;
                      *((void *)v10 + 2) = v53;
                      uint64_t v55 = *(void *)v10;
                      uint64_t v56 = *((void *)v10 + 1);
                      uint64_t v57 = HIDWORD(*(void *)v10);
                      if (v57 < HIDWORD(v56))
                      {
                        *int v10 = v56;
                        v10[1] = v52;
                        _DWORD v10[2] = v55;
                        v10[3] = v57;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v58 = (uint64_t *)(v10 + 2);
            BOOL v60 = v10 == (int *)a2 || v58 == a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                float32x4_t v62 = (uint64_t *)v10;
                do
                {
                  uint64_t v64 = *v62;
                  uint64_t v63 = v62[1];
                  float32x4_t v62 = v58;
                  if (HIDWORD(v64) < HIDWORD(v63))
                  {
                    uint64_t v65 = v61;
                    while (1)
                    {
                      float32x4_t v66 = (char *)v10 + v65;
                      int v67 = *(int *)((char *)v10 + v65 + 4);
                      *((_DWORD *)v66 + 2) = v64;
                      *((_DWORD *)v66 + 3) = v67;
                      if (!v65) {
                        break;
                      }
                      uint64_t v64 = *((void *)v66 - 1);
                      v65 -= 8;
                      if (HIDWORD(v64) >= HIDWORD(v63))
                      {
                        float32x4_t v68 = (int *)((char *)v10 + v65 + 8);
                        goto LABEL_87;
                      }
                    }
                    float32x4_t v68 = v10;
LABEL_87:
                    *(void *)float32x4_t v68 = v63;
                  }
                  ++v58;
                  v61 += 8;
                }
                while (v62 + 1 != a2);
              }
            }
            else if (!v60)
            {
              float v96 = v10 + 3;
              do
              {
                uint64_t v98 = *(void *)v9;
                uint64_t v97 = *((void *)v9 + 1);
                unint64_t v9 = (int *)v58;
                if (HIDWORD(v98) < HIDWORD(v97))
                {
                  unsigned int v99 = v96;
                  do
                  {
                    unsigned int v100 = v99;
                    *(v99 - 1) = v98;
                    int v101 = *(v99 - 2);
                    v99 -= 2;
                    *unsigned int v100 = v101;
                    uint64_t v98 = *(void *)(v100 - 5);
                  }
                  while (HIDWORD(v98) < HIDWORD(v97));
                  *(void *)(v99 - 1) = v97;
                }
                ++v58;
                v96 += 2;
              }
              while (v9 + 2 != (int *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (int *)a2)
            {
              int64_t v69 = (v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  uint64_t v73 = &v10[2 * v72];
                  unint64_t v74 = *(void *)v73;
                  if (2 * v71 + 2 < (uint64_t)v12)
                  {
                    __n128 result = HIDWORD(v74);
                    if (HIDWORD(*((void *)v73 + 1)) < HIDWORD(v74))
                    {
                      unint64_t v74 = *((void *)v73 + 1);
                      v73 += 2;
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  unsigned int v75 = &v10[2 * v71];
                  uint64_t v76 = *(void *)v75;
                  unint64_t v77 = HIDWORD(v74);
                  uint64_t v78 = HIDWORD(*(void *)v75);
                  if (v78 >= v77)
                  {
                    LODWORD(v79) = *v73;
                    do
                    {
                      __n128 result = (uint64_t)v75;
                      unsigned int v75 = v73;
                      *(_DWORD *)__n128 result = v79;
                      *(_DWORD *)(result + 4) = v73[1];
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v80 = (2 * v72) | 1;
                      uint64_t v73 = &v10[2 * v80];
                      uint64_t v72 = 2 * v72 + 2;
                      unint64_t v79 = *(void *)v73;
                      if (v72 < (uint64_t)v12)
                      {
                        if (HIDWORD(*((void *)v73 + 1)) >= HIDWORD(v79))
                        {
                          uint64_t v72 = v80;
                        }
                        else
                        {
                          unint64_t v79 = *((void *)v73 + 1);
                          v73 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v72 = v80;
                      }
                      __n128 result = HIDWORD(v79);
                    }
                    while (v78 >= HIDWORD(v79));
                    *unsigned int v75 = v76;
                    v75[1] = v78;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v81 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v82 = 0;
                uint64_t v83 = *(void *)v10;
                uint64_t v84 = v10;
                do
                {
                  uint64_t v85 = (uint64_t *)&v84[2 * v82 + 2];
                  uint64_t v86 = (2 * v82) | 1;
                  uint64_t v87 = 2 * v82 + 2;
                  if (v87 < v81 && *((_DWORD *)v85 + 3) < *((_DWORD *)v85 + 1))
                  {
                    ++v85;
                    uint64_t v86 = v87;
                  }
                  *uint64_t v84 = *(_DWORD *)v85;
                  v84[1] = *((_DWORD *)v85 + 1);
                  uint64_t v84 = v85;
                  uint64_t v82 = v86;
                }
                while (v86 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v85 == a2 - 1)
                {
                  *uint64_t v85 = v83;
                }
                else
                {
                  *(_DWORD *)uint64_t v85 = *((_DWORD *)a2 - 2);
                  *((_DWORD *)v85 + 1) = *((_DWORD *)a2 - 1);
                  *(a2 - 1) = v83;
                  uint64_t v88 = (char *)v85 - (char *)v10 + 8;
                  if (v88 >= 9)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 3) - 2) >> 1;
                    __float2 v90 = (uint64_t *)&v10[2 * v89];
                    uint64_t v91 = *v90;
                    uint64_t v92 = *v85;
                    unint64_t v93 = HIDWORD(*v85);
                    if (v93 < HIDWORD(*v90))
                    {
                      do
                      {
                        float v94 = v85;
                        uint64_t v85 = v90;
                        *(_DWORD *)float v94 = v91;
                        *((_DWORD *)v94 + 1) = *((_DWORD *)v90 + 1);
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        __float2 v90 = (uint64_t *)&v10[2 * v89];
                        uint64_t v91 = *v90;
                      }
                      while (v93 < HIDWORD(*v90));
                      *(_DWORD *)uint64_t v85 = v92;
                      *((_DWORD *)v85 + 1) = v93;
                    }
                  }
                }
                --a2;
              }
              while (v81-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          char v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v9, &v9[2 * (v12 >> 1)], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v9 + 2, v14 - 2, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v9 + 4, &v9[2 * v13 + 2], a2 - 3);
            __n128 result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v14 - 2, v14, (uint64_t *)&v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)unint64_t v9 = *(void *)v14;
            *(void *)char v14 = v15;
          }
          else
          {
            __n128 result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(&v9[2 * (v12 >> 1)], v9, a2 - 1);
          }
          --a3;
          unint64_t v16 = *(void *)v9;
          if (a4) {
            break;
          }
          unint64_t v17 = HIDWORD(v16);
          if (HIDWORD(v16) < *(v9 - 1)) {
            goto LABEL_13;
          }
          if (*((_DWORD *)a2 - 1) >= HIDWORD(v16))
          {
            float32x4_t v34 = v9 + 2;
            do
            {
              int v10 = v34;
              if (v34 >= (int *)a2) {
                break;
              }
              unsigned int v35 = v34[1];
              v34 += 2;
            }
            while (v35 >= HIDWORD(v16));
          }
          else
          {
            float v32 = v9;
            do
            {
              int v10 = v32 + 2;
              unsigned int v33 = v32[3];
              v32 += 2;
            }
            while (v33 >= HIDWORD(v16));
          }
          int v36 = (int *)a2;
          if (v10 < (int *)a2)
          {
            float32x4_t v37 = a2;
            do
            {
              int v36 = (int *)(v37 - 1);
              unsigned int v38 = *((_DWORD *)v37-- - 1);
            }
            while (v38 < HIDWORD(v16));
          }
          if (v10 < v36)
          {
            int v39 = *v10;
            int v40 = *v36;
            do
            {
              *int v10 = v40;
              *int v36 = v39;
              int v41 = v10[1];
              v10[1] = v36[1];
              v36[1] = v41;
              do
              {
                uint64_t v42 = *((void *)v10 + 1);
                v10 += 2;
                int v39 = v42;
              }
              while (HIDWORD(v42) >= HIDWORD(v16));
              do
              {
                uint64_t v43 = *((void *)v36 - 1);
                v36 -= 2;
                int v40 = v43;
              }
              while (HIDWORD(v43) < HIDWORD(v16));
            }
            while (v10 < v36);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            int *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *((void *)v10 - 1) = v16;
        }
        unint64_t v17 = HIDWORD(v16);
LABEL_13:
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = *(void *)&v9[v18 + 2];
          v18 += 2;
        }
        while (v17 < HIDWORD(v19));
        unint64_t v20 = &v9[v18];
        float32x4_t v21 = a2;
        if (v18 == 2)
        {
          float32x4_t v24 = a2;
          while (v20 < (int *)v24)
          {
            float32x4_t v22 = v24 - 1;
            unsigned int v25 = *((_DWORD *)v24-- - 1);
            if (v17 < v25) {
              goto LABEL_23;
            }
          }
          float32x4_t v22 = v24;
        }
        else
        {
          do
          {
            float32x4_t v22 = v21 - 1;
            unsigned int v23 = *((_DWORD *)v21-- - 1);
          }
          while (v17 >= v23);
        }
LABEL_23:
        if (v20 >= (int *)v22)
        {
          int v10 = v20;
        }
        else
        {
          int v26 = *(_DWORD *)v22;
          int v10 = v20;
          unint64_t v27 = (int *)v22;
          do
          {
            *int v10 = v26;
            *unint64_t v27 = v19;
            int v28 = v10[1];
            v10[1] = v27[1];
            v27[1] = v28;
            do
            {
              uint64_t v29 = *((void *)v10 + 1);
              v10 += 2;
              LODWORD(v19) = v29;
            }
            while (v17 < HIDWORD(v29));
            do
            {
              uint64_t v30 = *((void *)v27 - 1);
              v27 -= 2;
              int v26 = v30;
            }
            while (v17 >= HIDWORD(v30));
          }
          while (v10 < v27);
        }
        if (v10 - 2 != v9)
        {
          int *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v16;
        *(v10 - 1) = v17;
        if (v20 >= (int *)v22) {
          break;
        }
LABEL_36:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v9, (uint64_t *)v10 - 1);
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_36;
      }
    }
    a2 = (uint64_t *)(v10 - 2);
    if (!v31) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(int *result, int *a2, uint64_t *a3)
{
  int v3 = *a2;
  unsigned int v4 = a2[1];
  unint64_t v5 = *a3;
  unint64_t v6 = HIDWORD(*a3);
  if (result[1] < v4)
  {
    int v7 = *result;
    if (v4 >= v6)
    {
      unsigned int *result = v3;
      *a2 = v7;
      int v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      uint64_t v13 = *(void *)a2;
      if (HIDWORD(*(void *)a2) >= HIDWORD(*a3)) {
        return result;
      }
      *a2 = *a3;
      *(_DWORD *)a3 = v13;
      int v8 = (int *)a3 + 1;
      __n128 result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *(_DWORD *)a3 = v7;
      int v8 = (int *)a3 + 1;
    }
    unint64_t v9 = v8;
    goto LABEL_10;
  }
  if (v4 < v6)
  {
    *a2 = v5;
    *(_DWORD *)a3 = v3;
    unint64_t v9 = a2 + 1;
    int v10 = a2[1];
    a2[1] = *((_DWORD *)a3 + 1);
    *((_DWORD *)a3 + 1) = v10;
    uint64_t v11 = *(void *)result;
    if (HIDWORD(*(void *)result) < HIDWORD(*(void *)a2))
    {
      *result++ = *(void *)a2;
      *a2 = v11;
LABEL_10:
      int v14 = *result;
      unsigned int *result = *v9;
      int *v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (HIDWORD(*a1) < HIDWORD(v6))
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        int v8 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3));
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if (HIDWORD(v21) >= HIDWORD(v20)) {
        return 1;
      }
      *((_DWORD *)a1 + 6) = v20;
      *((_DWORD *)a2 - 2) = v21;
      int v22 = *((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 7) = *((_DWORD *)a2 - 1);
      *((_DWORD *)a2 - 1) = v22;
      uint64_t v23 = a1[2];
      unint64_t v24 = a1[3];
      unint64_t v25 = HIDWORD(v24);
      if (HIDWORD(v23) >= HIDWORD(v24)) {
        return 1;
      }
      a1[2] = v24;
      a1[3] = v23;
      uint64_t v26 = a1[1];
      uint64_t v27 = a1[2];
      if (HIDWORD(v26) >= HIDWORD(v27)) {
        return 1;
      }
      *((_DWORD *)a1 + 2) = v27;
      *((_DWORD *)a1 + 3) = v25;
      a1[2] = v26;
      uint64_t v28 = *a1;
      uint64_t v29 = a1[1];
      unint64_t v30 = HIDWORD(*a1);
      if (v30 >= HIDWORD(v29)) {
        return 1;
      }
      *(_DWORD *)a1 = v29;
      *((_DWORD *)a1 + 1) = v25;
      BOOL result = 1;
      *((_DWORD *)a1 + 2) = v28;
      *((_DWORD *)a1 + 3) = v30;
      return result;
    default:
      unint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a1 + 2);
      int v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *v10;
    uint64_t v14 = *v9;
    unint64_t v15 = HIDWORD(*v10);
    if (HIDWORD(*v9) < v15)
    {
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = (uint64_t)a1 + v16;
        int v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16) {
          break;
        }
        uint64_t v14 = *(void *)(v17 + 8);
        v16 -= 8;
        if (HIDWORD(v14) >= v15)
        {
          uint64_t v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *uint64_t v19 = v13;
      v19[1] = v15;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(int *a1, int *a2, uint64_t a3, uint64_t a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(a1, a2, (uint64_t *)a3);
  uint64_t v9 = *(void *)a3;
  if (HIDWORD(*(void *)a3) < HIDWORD(*(void *)a4))
  {
    *(_DWORD *)a3 = *(void *)a4;
    *(_DWORD *)a4 = v9;
    int v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    uint64_t v11 = *(void *)a2;
    if (HIDWORD(*(void *)a2) < HIDWORD(*(void *)a3))
    {
      *a2 = *(void *)a3;
      *(_DWORD *)a3 = v11;
      int v12 = a2[1];
      a2[1] = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      uint64_t v13 = *(void *)a1;
      if (HIDWORD(*(void *)a1) < HIDWORD(*(void *)a2))
      {
        *a1 = *(void *)a2;
        *a2 = v13;
        int v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

void *std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (void *)a1[1];
    unint64_t v5 = &v4[a2];
    uint64_t v6 = 8 * a2;
    do
    {
      *v4++ = 0xFFFFFFFFLL;
      v6 -= 8;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_24F50C89C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (int *)result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *(void *)v10;
                if (HIDWORD(*(void *)v10) < HIDWORD(v44))
                {
                  *int v10 = v44;
                  *((_DWORD *)a2 - 2) = v45;
                  int v46 = v10[1];
                  v10[1] = *((_DWORD *)a2 - 1);
                  *((_DWORD *)a2 - 1) = v46;
                }
                break;
              case 3uLL:
                BOOL result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v10, v10 + 2, a2 - 1);
                break;
              case 4uLL:
                BOOL result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v10, v10 + 2, (uint64_t)(v10 + 4), (uint64_t)(a2 - 1));
                break;
              case 5uLL:
                BOOL result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v10, v10 + 2, (uint64_t)(v10 + 4), (uint64_t)(v10 + 6));
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = *((void *)v10 + 3);
                if (HIDWORD(v48) < HIDWORD(v47))
                {
                  v10[6] = v47;
                  *((_DWORD *)a2 - 2) = v48;
                  int v49 = v10[7];
                  v10[7] = *((_DWORD *)a2 - 1);
                  *((_DWORD *)a2 - 1) = v49;
                  uint64_t v50 = *((void *)v10 + 2);
                  unint64_t v51 = *((void *)v10 + 3);
                  unint64_t v52 = HIDWORD(v51);
                  if (HIDWORD(v50) < HIDWORD(v51))
                  {
                    *((void *)v10 + 2) = v51;
                    *((void *)v10 + 3) = v50;
                    uint64_t v53 = *((void *)v10 + 1);
                    uint64_t v54 = *((void *)v10 + 2);
                    if (HIDWORD(v53) < HIDWORD(v54))
                    {
                      _DWORD v10[2] = v54;
                      v10[3] = v52;
                      *((void *)v10 + 2) = v53;
                      uint64_t v55 = *(void *)v10;
                      uint64_t v56 = *((void *)v10 + 1);
                      uint64_t v57 = HIDWORD(*(void *)v10);
                      if (v57 < HIDWORD(v56))
                      {
                        *int v10 = v56;
                        v10[1] = v52;
                        _DWORD v10[2] = v55;
                        v10[3] = v57;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v58 = (uint64_t *)(v10 + 2);
            BOOL v60 = v10 == (int *)a2 || v58 == a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                float32x4_t v62 = (uint64_t *)v10;
                do
                {
                  uint64_t v64 = *v62;
                  uint64_t v63 = v62[1];
                  float32x4_t v62 = v58;
                  if (HIDWORD(v64) < HIDWORD(v63))
                  {
                    uint64_t v65 = v61;
                    while (1)
                    {
                      float32x4_t v66 = (char *)v10 + v65;
                      int v67 = *(int *)((char *)v10 + v65 + 4);
                      *((_DWORD *)v66 + 2) = v64;
                      *((_DWORD *)v66 + 3) = v67;
                      if (!v65) {
                        break;
                      }
                      uint64_t v64 = *((void *)v66 - 1);
                      v65 -= 8;
                      if (HIDWORD(v64) >= HIDWORD(v63))
                      {
                        float32x4_t v68 = (int *)((char *)v10 + v65 + 8);
                        goto LABEL_87;
                      }
                    }
                    float32x4_t v68 = v10;
LABEL_87:
                    *(void *)float32x4_t v68 = v63;
                  }
                  ++v58;
                  v61 += 8;
                }
                while (v62 + 1 != a2);
              }
            }
            else if (!v60)
            {
              float v96 = v10 + 3;
              do
              {
                uint64_t v98 = *(void *)v9;
                uint64_t v97 = *((void *)v9 + 1);
                uint64_t v9 = (int *)v58;
                if (HIDWORD(v98) < HIDWORD(v97))
                {
                  unsigned int v99 = v96;
                  do
                  {
                    unsigned int v100 = v99;
                    *(v99 - 1) = v98;
                    int v101 = *(v99 - 2);
                    v99 -= 2;
                    *unsigned int v100 = v101;
                    uint64_t v98 = *(void *)(v100 - 5);
                  }
                  while (HIDWORD(v98) < HIDWORD(v97));
                  *(void *)(v99 - 1) = v97;
                }
                ++v58;
                v96 += 2;
              }
              while (v9 + 2 != (int *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (int *)a2)
            {
              int64_t v69 = (v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  uint64_t v73 = &v10[2 * v72];
                  unint64_t v74 = *(void *)v73;
                  if (2 * v71 + 2 < (uint64_t)v12)
                  {
                    BOOL result = HIDWORD(v74);
                    if (HIDWORD(*((void *)v73 + 1)) < HIDWORD(v74))
                    {
                      unint64_t v74 = *((void *)v73 + 1);
                      v73 += 2;
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  unsigned int v75 = &v10[2 * v71];
                  uint64_t v76 = *(void *)v75;
                  unint64_t v77 = HIDWORD(v74);
                  uint64_t v78 = HIDWORD(*(void *)v75);
                  if (v78 >= v77)
                  {
                    LODWORD(v79) = *v73;
                    do
                    {
                      BOOL result = (uint64_t)v75;
                      unsigned int v75 = v73;
                      *(_DWORD *)BOOL result = v79;
                      *(_DWORD *)(result + 4) = v73[1];
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v80 = (2 * v72) | 1;
                      uint64_t v73 = &v10[2 * v80];
                      uint64_t v72 = 2 * v72 + 2;
                      unint64_t v79 = *(void *)v73;
                      if (v72 < (uint64_t)v12)
                      {
                        if (HIDWORD(*((void *)v73 + 1)) >= HIDWORD(v79))
                        {
                          uint64_t v72 = v80;
                        }
                        else
                        {
                          unint64_t v79 = *((void *)v73 + 1);
                          v73 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v72 = v80;
                      }
                      BOOL result = HIDWORD(v79);
                    }
                    while (v78 >= HIDWORD(v79));
                    *unsigned int v75 = v76;
                    v75[1] = v78;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v81 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v82 = 0;
                uint64_t v83 = *(void *)v10;
                uint64_t v84 = v10;
                do
                {
                  uint64_t v85 = (uint64_t *)&v84[2 * v82 + 2];
                  uint64_t v86 = (2 * v82) | 1;
                  uint64_t v87 = 2 * v82 + 2;
                  if (v87 < v81 && *((_DWORD *)v85 + 3) < *((_DWORD *)v85 + 1))
                  {
                    ++v85;
                    uint64_t v86 = v87;
                  }
                  *uint64_t v84 = *(_DWORD *)v85;
                  v84[1] = *((_DWORD *)v85 + 1);
                  uint64_t v84 = v85;
                  uint64_t v82 = v86;
                }
                while (v86 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v85 == a2 - 1)
                {
                  *uint64_t v85 = v83;
                }
                else
                {
                  *(_DWORD *)uint64_t v85 = *((_DWORD *)a2 - 2);
                  *((_DWORD *)v85 + 1) = *((_DWORD *)a2 - 1);
                  *(a2 - 1) = v83;
                  uint64_t v88 = (char *)v85 - (char *)v10 + 8;
                  if (v88 >= 9)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 3) - 2) >> 1;
                    __float2 v90 = (uint64_t *)&v10[2 * v89];
                    uint64_t v91 = *v90;
                    uint64_t v92 = *v85;
                    unint64_t v93 = HIDWORD(*v85);
                    if (v93 < HIDWORD(*v90))
                    {
                      do
                      {
                        float v94 = v85;
                        uint64_t v85 = v90;
                        *(_DWORD *)float v94 = v91;
                        *((_DWORD *)v94 + 1) = *((_DWORD *)v90 + 1);
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        __float2 v90 = (uint64_t *)&v10[2 * v89];
                        uint64_t v91 = *v90;
                      }
                      while (v93 < HIDWORD(*v90));
                      *(_DWORD *)uint64_t v85 = v92;
                      *((_DWORD *)v85 + 1) = v93;
                    }
                  }
                }
                --a2;
              }
              while (v81-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          int v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v9, &v9[2 * (v12 >> 1)], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v9 + 2, v14 - 2, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v9 + 4, &v9[2 * v13 + 2], a2 - 3);
            BOOL result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v14 - 2, v14, (uint64_t *)&v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)int v14 = v15;
          }
          else
          {
            BOOL result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(&v9[2 * (v12 >> 1)], v9, a2 - 1);
          }
          --a3;
          unint64_t v16 = *(void *)v9;
          if (a4) {
            break;
          }
          unint64_t v17 = HIDWORD(v16);
          if (HIDWORD(v16) < *(v9 - 1)) {
            goto LABEL_13;
          }
          if (*((_DWORD *)a2 - 1) >= HIDWORD(v16))
          {
            float32x4_t v34 = v9 + 2;
            do
            {
              int v10 = v34;
              if (v34 >= (int *)a2) {
                break;
              }
              unsigned int v35 = v34[1];
              v34 += 2;
            }
            while (v35 >= HIDWORD(v16));
          }
          else
          {
            float v32 = v9;
            do
            {
              int v10 = v32 + 2;
              unsigned int v33 = v32[3];
              v32 += 2;
            }
            while (v33 >= HIDWORD(v16));
          }
          int v36 = (int *)a2;
          if (v10 < (int *)a2)
          {
            float32x4_t v37 = a2;
            do
            {
              int v36 = (int *)(v37 - 1);
              unsigned int v38 = *((_DWORD *)v37-- - 1);
            }
            while (v38 < HIDWORD(v16));
          }
          if (v10 < v36)
          {
            int v39 = *v10;
            int v40 = *v36;
            do
            {
              *int v10 = v40;
              *int v36 = v39;
              int v41 = v10[1];
              v10[1] = v36[1];
              v36[1] = v41;
              do
              {
                uint64_t v42 = *((void *)v10 + 1);
                v10 += 2;
                int v39 = v42;
              }
              while (HIDWORD(v42) >= HIDWORD(v16));
              do
              {
                uint64_t v43 = *((void *)v36 - 1);
                v36 -= 2;
                int v40 = v43;
              }
              while (HIDWORD(v43) < HIDWORD(v16));
            }
            while (v10 < v36);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            int *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *((void *)v10 - 1) = v16;
        }
        unint64_t v17 = HIDWORD(v16);
LABEL_13:
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = *(void *)&v9[v18 + 2];
          v18 += 2;
        }
        while (v17 < HIDWORD(v19));
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 2)
        {
          unint64_t v24 = a2;
          while (v20 < (int *)v24)
          {
            int v22 = v24 - 1;
            unsigned int v25 = *((_DWORD *)v24-- - 1);
            if (v17 < v25) {
              goto LABEL_23;
            }
          }
          int v22 = v24;
        }
        else
        {
          do
          {
            int v22 = v21 - 1;
            unsigned int v23 = *((_DWORD *)v21-- - 1);
          }
          while (v17 >= v23);
        }
LABEL_23:
        if (v20 >= (int *)v22)
        {
          int v10 = v20;
        }
        else
        {
          int v26 = *(_DWORD *)v22;
          int v10 = v20;
          uint64_t v27 = (int *)v22;
          do
          {
            *int v10 = v26;
            *uint64_t v27 = v19;
            int v28 = v10[1];
            v10[1] = v27[1];
            v27[1] = v28;
            do
            {
              uint64_t v29 = *((void *)v10 + 1);
              v10 += 2;
              LODWORD(v19) = v29;
            }
            while (v17 < HIDWORD(v29));
            do
            {
              uint64_t v30 = *((void *)v27 - 1);
              v27 -= 2;
              int v26 = v30;
            }
            while (v17 >= HIDWORD(v30));
          }
          while (v10 < v27);
        }
        if (v10 - 2 != v9)
        {
          int *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v16;
        *(v10 - 1) = v17;
        if (v20 >= (int *)v22) {
          break;
        }
LABEL_36:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v9, (uint64_t *)v10 - 1);
      BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_36;
      }
    }
    a2 = (uint64_t *)(v10 - 2);
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (HIDWORD(*a1) < HIDWORD(v6))
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        int v8 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3));
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if (HIDWORD(v21) >= HIDWORD(v20)) {
        return 1;
      }
      *((_DWORD *)a1 + 6) = v20;
      *((_DWORD *)a2 - 2) = v21;
      int v22 = *((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 7) = *((_DWORD *)a2 - 1);
      *((_DWORD *)a2 - 1) = v22;
      uint64_t v23 = a1[2];
      unint64_t v24 = a1[3];
      unint64_t v25 = HIDWORD(v24);
      if (HIDWORD(v23) >= HIDWORD(v24)) {
        return 1;
      }
      a1[2] = v24;
      a1[3] = v23;
      uint64_t v26 = a1[1];
      uint64_t v27 = a1[2];
      if (HIDWORD(v26) >= HIDWORD(v27)) {
        return 1;
      }
      *((_DWORD *)a1 + 2) = v27;
      *((_DWORD *)a1 + 3) = v25;
      a1[2] = v26;
      uint64_t v28 = *a1;
      uint64_t v29 = a1[1];
      unint64_t v30 = HIDWORD(*a1);
      if (v30 >= HIDWORD(v29)) {
        return 1;
      }
      *(_DWORD *)a1 = v29;
      *((_DWORD *)a1 + 1) = v25;
      BOOL result = 1;
      *((_DWORD *)a1 + 2) = v28;
      *((_DWORD *)a1 + 3) = v30;
      return result;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a1 + 2);
      int v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *v10;
    uint64_t v14 = *v9;
    unint64_t v15 = HIDWORD(*v10);
    if (HIDWORD(*v9) < v15)
    {
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = (uint64_t)a1 + v16;
        int v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16) {
          break;
        }
        uint64_t v14 = *(void *)(v17 + 8);
        v16 -= 8;
        if (HIDWORD(v14) >= v15)
        {
          uint64_t v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *uint64_t v19 = v13;
      v19[1] = v15;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

void *cv3d::cv::gess::isochart::GetSubFaceVid(void *result, int a2)
{
  uint64_t v2 = *result;
  if (result[1] - *result != 768) {
    cv3d::cv::gess::isochart::GetSubFaceVid();
  }
  *(_OWORD *)uint64_t v2 = xmmword_24F5789A0;
  *(_OWORD *)(v2 + 16) = xmmword_24F5789B0;
  *(_OWORD *)(v2 + 32) = xmmword_24F5789C0;
  *(_OWORD *)(v2 + 48) = xmmword_24F5789D0;
  *(_OWORD *)(v2 + 64) = xmmword_24F5789E0;
  *(_OWORD *)(v2 + 80) = xmmword_24F5789F0;
  *(_OWORD *)(v2 + 96) = xmmword_24F578A00;
  *(_OWORD *)(v2 + 112) = xmmword_24F578A10;
  *(_OWORD *)(v2 + 128) = xmmword_24F578A20;
  *(_OWORD *)(v2 + 144) = xmmword_24F578A30;
  *(_OWORD *)(v2 + 160) = xmmword_24F578A40;
  *(_OWORD *)(v2 + 176) = xmmword_24F578A50;
  *(_OWORD *)(v2 + 192) = xmmword_24F578A60;
  *(_OWORD *)(v2 + 208) = xmmword_24F578A70;
  *(_OWORD *)(v2 + 224) = xmmword_24F578A80;
  *(_OWORD *)(v2 + 240) = xmmword_24F578A90;
  *(_OWORD *)(v2 + 256) = xmmword_24F578AA0;
  *(_OWORD *)(v2 + 272) = xmmword_24F578AB0;
  *(_OWORD *)(v2 + 288) = xmmword_24F578AC0;
  *(_OWORD *)(v2 + 304) = xmmword_24F578AD0;
  *(_OWORD *)(v2 + 320) = xmmword_24F578AE0;
  *(_OWORD *)(v2 + 336) = xmmword_24F578AF0;
  *(_OWORD *)(v2 + 352) = xmmword_24F578B00;
  *(_OWORD *)(v2 + 368) = xmmword_24F578B10;
  *(_OWORD *)(v2 + 384) = xmmword_24F578B20;
  *(void *)(v2 + 400) = 0x1A00000019;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  BOOL v5 = (_OWORD *)(*result + 696);
  uint64_t v6 = (_OWORD *)(*result + 408);
  *uint64_t v6 = xmmword_24F578B30;
  v6[1] = xmmword_24F578B40;
  v6[2] = xmmword_24F578B50;
  v6[3] = xmmword_24F578B60;
  void v6[4] = xmmword_24F578B70;
  v6[5] = xmmword_24F578B80;
  v6[6] = xmmword_24F578B90;
  v6[7] = xmmword_24F578BA0;
  v6[8] = xmmword_24F578BB0;
  v6[9] = xmmword_24F578BC0;
  v6[10] = xmmword_24F578BD0;
  v6[11] = xmmword_24F578BE0;
  v6[12] = xmmword_24F578BF0;
  v6[13] = xmmword_24F578C00;
  v6[14] = xmmword_24F578C10;
  v6[15] = xmmword_24F578C20;
  v6[16] = xmmword_24F578C30;
  v6[17] = xmmword_24F578C40;
  *BOOL v5 = xmmword_24F578C50;
  v5[1] = xmmword_24F578C60;
  v5[2] = xmmword_24F578C70;
  v5[3] = xmmword_24F578C80;
  *(void *)(v3 + 760) = 0x2C0000002BLL;
  uint64_t v7 = v4 - v3;
  if (v4 != v3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v7 / 12;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
        *(_DWORD *)(v3 + i) += a2;
      ++v8;
      v3 += 12;
    }
    while (v8 != v9);
  }
  return result;
}

float cv3d::cv::gess::isochart::Face2DArea(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v6 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *a3, *a2);
  unsigned int v15 = *a4;
  uint64_t v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), &v15);
  unint64_t v8 = *v6;
  uint64_t v9 = *(void *)(v7 + 40);
  unint64_t v10 = (*(void *)(v7 + 48) - v9) >> 3;
  if (v10 <= v8) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  unint64_t v11 = v6[1];
  if (v10 <= v11) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  unint64_t v12 = v6[2];
  if (v10 <= v12) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  uint64_t v13 = (float *)(v9 + 8 * v8);
  return fabsf((float)((float)((float)(*(float *)(v9 + 8 * v11) - *v13) * (float)(*(float *)(v9 + 8 * v12 + 4) - v13[1]))- (float)((float)(*(float *)(v9 + 8 * v11 + 4) - v13[1]) * (float)(*(float *)(v9 + 8 * v12) - *v13)))* 0.5);
}

uint64_t cv3d::cv::gess::isochart::ComputeIMTFromHighMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v91 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v89, "f:imt");
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  unsigned int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v87, (unsigned __int8 *)&v89);
  unsigned int v91 = v6;
  if (v90 < 0)
  {
    operator delete((void *)v89);
    unsigned int v6 = v91;
  }
  if (v6 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "f:imt");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v91, &v89);
    if (v90 < 0) {
      operator delete((void *)v89);
    }
    unsigned int v6 = v91;
  }
  LODWORD(v89) = v6;
  uint64_t v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), (unsigned int *)&v89);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7))
  {
    unint64_t v8 = 0;
    do
    {
      LODWORD(v89) = v91;
      uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), (unsigned int *)&v89);
      uint64_t v10 = *(void *)(v9 + 40);
      if (v8 >= (*(void *)(v9 + 48) - v10) >> 4) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      unint64_t v11 = (void *)(v10 + 16 * v8);
      *unint64_t v11 = 0;
      v11[1] = 0;
      ++v8;
      LODWORD(v89) = v91;
      uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), (unsigned int *)&v89);
    }
    while (v8 < (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12));
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v89, 45 * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2));
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v87, 45 * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2));
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v86, 3uLL);
  if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
  {
    int v14 = 0;
    unint64_t v15 = 0;
    do
    {
      v84[0].i32[0] = v15;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)v84, v86);
      float32x4_t v68 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v86[0]);
      float32x4_t v66 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v86[0] + 1));
      float32x4_t v65 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v86[0] + 2));
      cv3d::cv::gess::math::FaceNormal(a1, v15, v84);
      unsigned int v16 = 0;
      int v17 = 0;
      v18.i64[0] = 0x3E0000003E000000;
      v18.i64[1] = 0x3E0000003E000000;
      float32x4_t v19 = vmulq_f32(vsubq_f32(v66, v68), v18);
      float32x4_t v20 = vmulq_f32(vsubq_f32(v65, v68), v18);
      do
      {
        unsigned int v21 = 0;
        for (unsigned int i = v16; i != -1; --i)
        {
          unsigned int v23 = v14 + v17 + v21;
          *(float32x4_t *)(v89 + 16 * v23) = vaddq_f32(vmulq_n_f32(v20, (float)i), vaddq_f32(v68, vmulq_n_f32(v19, (float)v21)));
          v87[v23] = v84[0];
          ++v21;
        }
        ++v16;
        v17 += v21;
      }
      while (v16 != 9);
      if (v17 != 45) {
        __assert_rtn("ComputeIMTFromHighMesh", "IMTComputation.cpp", 133, "cur_index == SUBDIV_VERTEX_NUMBER");
      }
      ++v15;
      v14 += 45;
    }
    while (v15 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)a1, v13);
  float v25 = v24;
  uint64_t v85 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(v84, a2, &v85, a3);
  if (cv3d::cv::gess::alg::MPSMeshIntersector::initialized((cv3d::cv::gess::alg::MPSMeshIntersector *)v84))
  {
    uint64_t v26 = (*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v78 = 0;
    unint64_t v79 = 0;
    uint64_t v80 = 0;
    cv3d::cv::gess::internal::TwoWayRaycast(&v89, (uint64_t)&v87, v84, v26, (uint64_t)&v81, (uint64_t)&v78, v25);
    if ((v82 - (unsigned char *)v81) >> 2 != (uint64_t)(*((void *)&v89 + 1) - v89) >> 4) {
      __assert_rtn("ComputeIMTFromHighMesh", "IMTComputation.cpp", 152, "intersect_high_fhs.size() == positions.size()");
    }
    uint64_t v88 = v87;
    std::vector<float>::vector(v77, (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
    unsigned int v75 = -1;
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v71) = 0;
    int64_t v70 = 0;
    unsigned int v27 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a2 + 56), (uint64_t)&v70, (unsigned __int8 *)&__p);
    unsigned int v76 = v27;
    if (v74 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    int64_t v70 = 0;
    unsigned int v28 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&v70, (unsigned __int8 *)&__p);
    unsigned int v75 = v28;
    if (v74 < 0) {
      operator delete(__p);
    }
    BOOL v29 = v27 == -1 || v28 == -1;
    uint64_t v30 = !v29;
    if (!v29)
    {
      std::vector<float>::vector(&__p, (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
      std::vector<float>::vector(&v70, (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
      if (*(void *)(a2 + 160) == *(void *)(a2 + 152))
      {
        unint64_t v38 = 0;
        float v34 = 0.0;
        float v32 = 0.0;
      }
      else
      {
        uint64_t v31 = 0;
        float v32 = 0.0;
        unsigned int v33 = 1;
        float v34 = 0.0;
        do
        {
          unsigned int v92 = v33 - 1;
          float v35 = cv3d::cv::gess::isochart::Face2DArea(a2, &v92, &v76, &v75);
          *((float *)__p + v31) = v35;
          unsigned int v92 = v33 - 1;
          float v36 = cv3d::cv::gess::mesh::TriMesh::Area(a2, &v92);
          float32x4_t v37 = (float *)v70;
          *((float *)v70 + v31) = v36;
          float v34 = v34 + *((float *)__p + v31);
          float v32 = v32 + v37[v31];
          uint64_t v31 = v33;
          unint64_t v38 = (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2;
        }
        while (v38 > v33++);
      }
      if (v32 <= 1.0e-16) {
        float v40 = 1.0;
      }
      else {
        float v40 = v34 / v32;
      }
      if (v38)
      {
        uint64_t v41 = 0;
        do
        {
          float v42 = *((float *)v70 + v41);
          if (v42 <= 1.0e-16)
          {
            *((float *)v77[0] + v41) = v40;
          }
          else
          {
            float v43 = *((float *)__p + v41) / v42;
            if (v40 * 0.001 > v43 || v40 * 1000.0 < v43) {
              float v43 = v40;
            }
            *((float *)v77[0] + v41) = v43;
          }
          ++v41;
        }
        while (v38 > v41);
      }
      if (v70)
      {
        int64_t v71 = v70;
        operator delete(v70);
      }
      if (__p)
      {
        uint64_t v73 = __p;
        operator delete(__p);
      }
      uint64_t v46 = *(void *)(a1 + 152);
      uint64_t v45 = *(void *)(a1 + 160);
      unint64_t v47 = 45 * ((v45 - v46) >> 2);
      std::vector<float>::vector(&__p, v47);
      uint64_t v48 = (unsigned int *)v81;
      if (v47 == (v82 - (unsigned char *)v81) >> 2)
      {
        if (v47 == (uint64_t)(*((void *)&v89 + 1) - v89) >> 4)
        {
          if (v45 != v46)
          {
            int v49 = (float *)v77[0];
            uint64_t v50 = (float *)__p;
            if (v47 <= 1) {
              uint64_t v51 = 1;
            }
            else {
              uint64_t v51 = 45 * ((v45 - v46) >> 2);
            }
            do
            {
              unsigned int v53 = *v48++;
              uint64_t v52 = v53;
              if (v53 == -1) {
                float v54 = 1.0;
              }
              else {
                float v54 = v49[v52] / v40;
              }
              *v50++ = v54;
              --v51;
            }
            while (v51);
          }
          std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::vector(&v70, 0x40uLL);
          if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
          {
            unint64_t v55 = 0;
            float32x4_t v67 = (float32x4_t)vdupq_n_s32(0x3C800000u);
            do
            {
              cv3d::cv::gess::isochart::GetSubFaceVid(&v70, 45 * v55);
              uint64_t v56 = 0;
              float32x4_t v57 = 0uLL;
              do
              {
                float v58 = (float)((float)(*((float *)__p + *(unsigned int *)((char *)v70 + v56))
                                    + *((float *)__p + *(unsigned int *)((char *)v70 + v56 + 4)))
                            + *((float *)__p + *(unsigned int *)((char *)v70 + v56 + 8)))
                    / 3.0;
                v59.i32[1] = 0;
                v59.i32[3] = 0;
                v59.f32[0] = v58 * v58;
                v59.f32[2] = v58 * v58;
                float32x4_t v57 = vaddq_f32(v57, vmulq_f32(v59, v67));
                v56 += 12;
              }
              while (v56 != 768);
              float32x4_t v69 = v57;
              unsigned int v92 = v91;
              uint64_t v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v92);
              uint64_t v61 = *(void *)(v60 + 40);
              if (v55 >= (*(void *)(v60 + 48) - v61) >> 4) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(float32x4_t *)(v61 + 16 * v55++) = v69;
            }
            while (v55 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
          }
          if (v70)
          {
            int64_t v71 = v70;
            operator delete(v70);
          }
          if (__p)
          {
            uint64_t v73 = __p;
            operator delete(__p);
          }
LABEL_81:
          if (v77[0])
          {
            v77[1] = v77[0];
            operator delete(v77[0]);
          }
          if (v78)
          {
            unint64_t v79 = v78;
            operator delete(v78);
          }
          if (v81)
          {
            uint64_t v82 = v81;
            operator delete(v81);
          }
          goto LABEL_87;
        }
        uint64_t v63 = "positions.size() == vertex_signal_count";
        int v64 = 225;
      }
      else
      {
        uint64_t v63 = "intersect_high_fhs.size() == vertex_signal_count";
        int v64 = 224;
      }
      __assert_rtn("ComputeIMTFromHighMesh", "IMTComputation.cpp", v64, v63);
    }
    if (v91 != -1) {
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 56), &v91);
    }
    unsigned int v91 = -1;
    goto LABEL_81;
  }
  if (v91 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 56), &v91);
  }
  uint64_t v30 = 0;
  unsigned int v91 = -1;
LABEL_87:
  cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector((cv3d::cv::gess::alg::MPSMeshIntersector *)v84);
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  if ((void)v89)
  {
    *((void *)&v89 + 1) = v89;
    operator delete((void *)v89);
  }
  return v30;
}

void sub_24F50DE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector((cv3d::cv::gess::alg::MPSMeshIntersector *)&a34);
  float v36 = *(void **)(v34 - 168);
  if (v36)
  {
    *(void *)(v34 - 160) = v36;
    operator delete(v36);
  }
  float32x4_t v37 = *(void **)(v34 - 144);
  if (v37)
  {
    *(void *)(v34 - 136) = v37;
    operator delete(v37);
  }
  unint64_t v38 = *(void **)(v34 - 112);
  if (v38)
  {
    *(void *)(v34 - 104) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CalIMTFromPerVertexSignal(float32x4_t *a1, float *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  v34[1] = *MEMORY[0x263EF8340];
  std::vector<float>::vector(v28, a4);
  std::vector<float>::vector(__p, v4);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v34[0] = 0;
  float32x4_t v25 = 0u;
  int32x4_t v26 = 0u;
  cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(a1, a1 + 1, a1 + 2, &v32, (uint64_t)&v33, (float *)v34, &v26, &v25);
  float v8 = fabsf((float)((float)((float)(*(float *)&v33 - *(float *)&v32) * (float)(*((float *)v34 + 1) - *((float *)&v32 + 1)))- (float)((float)(*((float *)&v33 + 1) - *((float *)&v32 + 1)) * (float)(*(float *)v34 - *(float *)&v32)))* 0.5);
  if (v8 >= 1.0e-16 && v4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (float *)v28[0];
    unint64_t v11 = (float *)__p[0];
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = a2;
      do
      {
        *(float *)((char *)&v29 + v12) = *v13;
        v12 += 4;
        v13 += v4;
      }
      while (v12 != 12);
      float v14 = v29;
      float v15 = v30;
      float v16 = v31;
      v10[v9] = (float)((float)((float)(v30 * (float)(*((float *)v34 + 1) - *((float *)&v32 + 1)))
                              + (float)(v29 * (float)(*((float *)&v33 + 1) - *((float *)v34 + 1))))
                      + (float)(v31 * (float)(*((float *)&v32 + 1) - *((float *)&v33 + 1))))
              / v8;
      v11[v9++] = (float)((float)((float)(v15 * (float)(*(float *)&v32 - *(float *)v34))
                                + (float)(v14 * (float)(*(float *)v34 - *(float *)&v33)))
                        + (float)(v16 * (float)(*(float *)&v33 - *(float *)&v32)))
                / v8;
      ++a2;
    }
    while (v9 != v4);
    *(_DWORD *)(a3 + 8) = 0;
    *(void *)a3 = 0;
    float v17 = 0.0;
    float32x4_t v18 = (float *)v28[0];
    float v19 = 0.0;
    float v20 = 0.0;
    unsigned int v21 = (float *)__p[0];
    do
    {
      float v17 = v17 + (float)(*v18 * *v18);
      *(float *)a3 = v17;
      float v19 = v19 + (float)(*v21 * *v21);
      *(float *)(a3 + 8) = v19;
      float v22 = *v18++;
      float v23 = v22;
      float v24 = *v21++;
      float v20 = v20 + (float)(v23 * v24);
      *(float *)(a3 + 4) = v20;
      --v4;
    }
    while (v4);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
    *(void *)a3 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
}

void sub_24F50E1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::Vertex3DTo2D(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float *a5)
{
  float32x4_t v5 = vsubq_f32(*a1, *a2);
  float32x4_t v6 = vmulq_f32(v5, *a3);
  v6.i32[3] = 0;
  *a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6));
  float32x4_t v7 = vmulq_f32(v5, *a4);
  v7.i32[3] = 0;
  float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7));
  a5[1] = result;
  return result;
}

float cv3d::cv::gess::isochart::CalculateSignalLengthOnOneFace(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float *a6)
{
  float32x4_t v6 = vsubq_f32(*a1, *a3);
  float32x4_t v7 = vmulq_f32(v6, *a4);
  v7.i32[3] = 0;
  float32x4_t v8 = vmulq_f32(v6, *a5);
  v8.i32[3] = 0;
  float32x4_t v9 = vsubq_f32(*a2, *a3);
  float32x4_t v10 = vmulq_f32(*a4, v9);
  v10.i32[3] = 0;
  float32x4_t v11 = vmulq_f32(*a5, v9);
  v11.i32[3] = 0;
  v10.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7));
  v11.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
  return sqrtf((float)((float)(v11.f32[0] * (float)(v11.f32[0] * a6[2])) + (float)((float)(v10.f32[0] * *a6) * v10.f32[0]))+ (float)((float)(v10.f32[0] * (float)(a6[1] + a6[1])) * v11.f32[0]));
}

float cv3d::cv::gess::isochart::HEdgeSignalLength(uint64_t a1, unsigned int *a2, uint64_t *a3, unsigned int *a4)
{
  unsigned int v8 = -1;
  unsigned int v52 = -1;
  unsigned int v53 = -1;
  float32x4_t v9 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v10 & *v9) == 0)
  {
    unsigned int v8 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 16);
    unsigned int v53 = v8;
  }
  float32x4_t v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  uint64_t v12 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v11);
  if ((v13 & *v12) != 0)
  {
    if (v8 != -1)
    {
      unsigned int v14 = -1;
      goto LABEL_8;
    }
LABEL_17:
    cv3d::cv::gess::isochart::HEdgeSignalLength();
  }
  float v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  unsigned int v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v15) + 16);
  unsigned int v52 = v14;
  if (v8 == -1)
  {
    unsigned int v52 = -1;
    unsigned int v53 = v14;
    BOOL v16 = v14 == -1;
    unsigned int v14 = -1;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_8:
  uint64_t v17 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  float32x4_t v50 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v17 + 12));
  float32x4_t v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  uint64_t v19 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v18);
  float32x4_t v49 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v19 + 12));
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v53, __p);
  float32x4_t v47 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
  unsigned int v20 = v53;
  uint64_t v21 = *a3;
  unsigned int v54 = *a4;
  float v22 = (uint64_t *)(a1 + 56);
  uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v54);
  uint64_t v24 = *(void *)(v23 + 40);
  if (v53 >= (unint64_t)((*(void *)(v23 + 48) - v24) >> 4)) {
    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
  }
  float32x4_t v25 = vsubq_f32(v50, v47);
  float32x4_t v26 = *(float32x4_t *)(v21 + 32 * v20);
  float32x4_t v27 = vmulq_f32(v25, v26);
  v27.i32[3] = 0;
  float32x4_t v28 = *(float32x4_t *)(v21 + 16 * ((2 * v20) | 1));
  float32x4_t v29 = vmulq_f32(v25, v28);
  v29.i32[3] = 0;
  float32x4_t v30 = vsubq_f32(v49, v47);
  float32x4_t v31 = vmulq_f32(v30, v26);
  v31.i32[3] = 0;
  float32x4_t v32 = vmulq_f32(v30, v28);
  v32.i32[3] = 0;
  v31.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27));
  v29.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
  float v33 = sqrtf((float)((float)(v29.f32[0] * (float)(v29.f32[0] * *(float *)(v24 + 16 * v53 + 8)))+ (float)((float)(v31.f32[0] * *(float *)(v24 + 16 * v53)) * v31.f32[0]))+ (float)((float)(v31.f32[0] * (float)(*(float *)(v24 + 16 * v53 + 4) + *(float *)(v24 + 16 * v53 + 4)))* v29.f32[0]));
  if (v14 != -1)
  {
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v52, __p);
    float32x4_t v48 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
    unsigned int v34 = v52;
    uint64_t v35 = *a3;
    unsigned int v54 = *a4;
    uint64_t v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v22, &v54);
    uint64_t v37 = *(void *)(v36 + 40);
    if (v52 >= (unint64_t)((*(void *)(v36 + 48) - v37) >> 4)) {
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    }
    float32x4_t v38 = vsubq_f32(v50, v48);
    float32x4_t v39 = *(float32x4_t *)(v35 + 32 * v34);
    float32x4_t v40 = vmulq_f32(v38, v39);
    v40.i32[3] = 0;
    float32x4_t v41 = *(float32x4_t *)(v35 + 16 * ((2 * v34) | 1));
    float32x4_t v42 = vmulq_f32(v38, v41);
    v42.i32[3] = 0;
    float32x4_t v43 = vsubq_f32(v49, v48);
    float32x4_t v44 = vmulq_f32(v43, v39);
    v44.i32[3] = 0;
    float32x4_t v45 = vmulq_f32(v43, v41);
    v45.i32[3] = 0;
    v44.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44))
               - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40));
    v42.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45))
               - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42));
    float v33 = (float)(v33
                + sqrtf((float)((float)(v42.f32[0] * (float)(v42.f32[0] * *(float *)(v37 + 16 * v52 + 8)))+ (float)((float)(v44.f32[0] * *(float *)(v37 + 16 * v52)) * v44.f32[0]))+ (float)((float)(v44.f32[0]* (float)(*(float *)(v37 + 16 * v52 + 4) + *(float *)(v37 + 16 * v52 + 4)))* v42.f32[0])))* 0.5;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v33;
}

void sub_24F50E6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F50E74C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::InitializeVIDRoot(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  int v16 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t)this, &v16, (long long *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v16;
  uint64_t v3 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)this + 1, (unsigned int *)__p);
  unint64_t v4 = *((void *)this + 14) - *((void *)this + 13);
  if ((v4 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (v4 >> 2);
    do
    {
      uint64_t v7 = *(void *)(v3 + 40);
      if (v5 >= (*(void *)(v3 + 48) - v7) >> 2) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(_DWORD *)(v7 + 4 * v5) = v5;
      ++v5;
    }
    while (v6 != v5);
  }
  int v13 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t)this, &v13, (long long *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v13;
  uint64_t result = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)this + 7, (unsigned int *)__p);
  unint64_t v9 = *((void *)this + 20) - *((void *)this + 19);
  if ((v9 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v10 = 0;
    uint64_t v11 = (v9 >> 2);
    do
    {
      uint64_t v12 = *(void *)(result + 40);
      if (v10 >= (*(void *)(result + 48) - v12) >> 2) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(_DWORD *)(v12 + 4 * v10) = v10;
      ++v10;
    }
    while (v11 != v10);
  }
  return result;
}

void sub_24F50E8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>(uint64_t a1, _DWORD *a2, long long *a3)
{
  int v6 = -1;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(a1 + 8), (uint64_t)&v6, a3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>(uint64_t a1, _DWORD *a2, long long *a3)
{
  int v6 = -1;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(a1 + 56), (uint64_t)&v6, a3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

uint64_t cv3d::cv::gess::isochart::MergeToRootMesh(uint64_t *a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  unsigned int v67 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v3 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a2, &v67, (unsigned __int8 *)&__p);
  BOOL v4 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a2, &v67, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_7:
  LODWORD(__p.__r_.__value_.__l.__data_) = v67;
  uint64_t v61 = (uint64_t *)(a2 + 80);
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a2 + 80), (unsigned int *)&__p);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, (a1[1] - *a1) >> 4);
  if (a1[1] != *a1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      std::to_string(&__p, v7);
      unsigned int v8 = std::string::insert(&__p, 0, "g", 1uLL);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
      *(void *)float32x4_t v69 = v8->__r_.__value_.__l.__size_;
      *(void *)((char *)&v69[1] + 3) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
      char v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      unsigned int v68 = v67;
      uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v61, &v68);
      uint64_t v12 = *(void *)(v11 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v11 + 48) - v12) >> 3) <= v7) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      uint64_t v13 = v12 + v6;
      if (*(char *)(v12 + v6 + 23) < 0) {
        operator delete(*(void **)v13);
      }
      *(void *)uint64_t v13 = v9;
      *(void *)(v13 + 8) = *(void *)v69;
      *(void *)(v13 + 15) = *(void *)((char *)&v69[1] + 3);
      *(unsigned char *)(v13 + 23) = v10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (a1[1] - *a1) >> 4);
  }
  unsigned int v68 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v69[0] = 0;
  float32x4_t v62 = (uint64_t **)(a2 + 56);
  unsigned int v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a2 + 56), (uint64_t)v69, (unsigned __int8 *)&__p);
  unsigned int v68 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14 != -1)
  {
    if (v68 != -1) {
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v62, &v68);
    }
    unsigned int v68 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a2, &v68, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int v64 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  *(void *)&v69[1] = 0;
  v69[0] = 0;
  unsigned int v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v62, (uint64_t)v69, (unsigned __int8 *)&__p);
  unsigned int v65 = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15 != -1)
  {
    if (v65 != -1) {
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v62, &v65);
    }
    unsigned int v65 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a2, &v65, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(void *)float32x4_t v69 = 0;
  unsigned int v16 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)v61, (uint64_t)v69, (unsigned __int8 *)&__p);
  unsigned int v64 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v16 != -1)
  {
    if (v64 != -1) {
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v61, &v64);
    }
    unsigned int v64 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(void *)float32x4_t v69 = 0;
  unsigned int v64 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>(v61, (uint64_t)v69, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v65 == -1) {
    cv3d::cv::gess::isochart::MergeToRootMesh();
  }
  if (v64 == -1) {
    cv3d::cv::gess::isochart::MergeToRootMesh();
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v64;
  uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v61, (unsigned int *)&__p);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
  uint64_t v19 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v60 = v20;
      uint64_t v21 = *(uint64_t **)(v19 + 16 * v20);
      std::string::basic_string[abi:ne180100]<0>(&__p, "f:index_in_root");
      float v22 = v21 + 7;
      v69[0] = -1;
      unsigned int v63 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)v21 + 7, (uint64_t)v69, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v55 = v21[19];
      uint64_t v56 = v21[20];
      unint64_t v57 = (v56 - v55) >> 2;
      if (v56 != v55)
      {
        unint64_t v23 = 0;
        if (v57 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = (v56 - v55) >> 2;
        }
        do
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = v63;
          uint64_t v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v21 + 7, (unsigned int *)&__p);
          uint64_t v26 = *(void *)(v25 + 40);
          if (v23 >= (*(void *)(v25 + 48) - v26) >> 2) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          unint64_t v27 = *(unsigned int *)(v26 + 4 * v23);
          LODWORD(__p.__r_.__value_.__l.__data_) = v68;
          uint64_t v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)v62, (unsigned int *)&__p);
          uint64_t v29 = *(void *)(v28 + 40);
          if (v27 >= (*(void *)(v28 + 48) - v29) >> 2) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
          *(_DWORD *)(v29 + 4 * v27) = v60;
          ++v23;
        }
        while (v24 != v23);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
      *(void *)&v69[1] = 0;
      v69[0] = 0;
      unsigned int v59 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)v21 + 7, (uint64_t)v69, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
      float32x4_t v30 = v21 + 10;
      *(void *)float32x4_t v69 = 0;
      int v31 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)v21 + 10, (uint64_t)v69, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = v64;
      uint64_t v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v61, (unsigned int *)&__p);
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
      LODWORD(__p.__r_.__value_.__l.__data_) = v31;
      uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v21 + 10, (unsigned int *)&__p);
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
      LODWORD(__p.__r_.__value_.__l.__data_) = v64;
      uint64_t v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v61, (unsigned int *)&__p);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 32))(v36, v35 + v33);
      if (v35)
      {
        uint64_t v37 = 0;
        for (unint64_t i = 0; i != v35; ++i)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = v31;
          uint64_t v39 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v30, (unsigned int *)&__p);
          uint64_t v40 = *(void *)(v39 + 40);
          if (i >= (*(void *)(v39 + 48) - v40) >> 3) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = v64;
          uint64_t result = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v61, (unsigned int *)&__p);
          uint64_t v41 = *(void *)(result + 40);
          if (v33 + i >= (*(void *)(result + 48) - v41) >> 3) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
          float32x4_t v42 = (_DWORD *)(v41 + 8 * v33 + v37);
          *float32x4_t v42 = *(_DWORD *)(v40 + v37);
          v42[1] = *(_DWORD *)(v40 + v37 + 4);
          v37 += 8;
        }
      }
      if (v56 != v55)
      {
        unint64_t v43 = 0;
        if (v57 <= 1) {
          uint64_t v44 = 1;
        }
        else {
          uint64_t v44 = (v56 - v55) >> 2;
        }
        while (1)
        {
          v69[0] = v59;
          uint64_t v45 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v22, v69);
          uint64_t v46 = *(void *)(v45 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v45 + 48) - v46) >> 2) <= v43) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          uint64_t v47 = 0;
          uint64_t v48 = v46 + 12 * v43;
          __p.__r_.__value_.__r.__words[0] = *(void *)v48;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v48 + 8);
          do
          {
            *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + v47) += v33;
            v47 += 4;
          }
          while (v47 != 12);
          v69[0] = v63;
          uint64_t v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v22, v69);
          uint64_t v50 = *(void *)(v49 + 40);
          if (v43 >= (*(void *)(v49 + 48) - v50) >> 2) {
            break;
          }
          unint64_t v51 = *(unsigned int *)(v50 + 4 * v43);
          v69[0] = v65;
          uint64_t result = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v62, v69);
          uint64_t v52 = *(void *)(result + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(result + 48) - v52) >> 2) <= v51)
          {
            int v54 = 182;
LABEL_80:
            __assert_rtn("operator[]", "Attribute.h", v54, "index < data_.size()");
          }
          uint64_t v53 = v52 + 12 * v51;
          *(void *)uint64_t v53 = __p.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v53 + 8) = __p.__r_.__value_.__r.__words[1];
          if (++v43 == v44) {
            goto LABEL_71;
          }
        }
        int v54 = 187;
        goto LABEL_80;
      }
LABEL_71:
      uint64_t v20 = v60 + 1;
      uint64_t v19 = *a1;
    }
    while (v60 + 1 < (unint64_t)((a1[1] - *a1) >> 4));
  }
  return result;
}

void sub_24F50F258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::InitRootMeshGroup(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  int v17 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v3 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v17, (unsigned __int8 *)__p);
  BOOL v4 = v3;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>((uint64_t)this, &v17, (long long *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
LABEL_7:
  LODWORD(__p[0]) = v17;
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 1);
  LODWORD(__p[0]) = v17;
  uint64_t v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p);
  unint64_t v7 = *(uint64_t **)(v6 + 40);
  if (*(uint64_t **)(v6 + 48) == v7) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  if (*((char *)v7 + 23) < 0)
  {
    v7[1] = 2;
    unint64_t v7 = (uint64_t *)*v7;
  }
  else
  {
    *((unsigned char *)v7 + 23) = 2;
  }
  strcpy((char *)v7, "g0");
  uint64_t v9 = *((void *)this + 19);
  uint64_t v8 = *((void *)this + 20);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  int v18 = 0;
  int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)this + 7, (uint64_t)&v18, (unsigned __int8 *)__p);
  int v14 = v10;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v10 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>((uint64_t)this, &v14, (long long *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  if (((unint64_t)(v8 - v9) >> 2))
  {
    unint64_t v11 = 0;
    do
    {
      LODWORD(__p[0]) = v14;
      uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)__p);
      uint64_t v13 = *(void *)(v12 + 40);
      if (v11 >= (*(void *)(v12 + 48) - v13) >> 2) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(_DWORD *)(v13 + 4 * v11++) = 0;
    }
    while (((unint64_t)(v8 - v9) >> 2) != v11);
  }
}

void sub_24F50F4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::TrySplitMeshByComponents(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v48, v3, (unsigned __int8 *)&__p);
  uint64_t v5 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4 == v5)
  {
    unsigned int v42 = 0;
    goto LABEL_44;
  }
  unint64_t v6 = 0;
  unsigned int v42 = 0;
  unsigned int v7 = 0;
  while (1)
  {
    unint64_t v8 = v6 >> 6;
    uint64_t v9 = 1 << v6;
    uint64_t v10 = *((void *)v48 + v8);
    if ((v10 & v9) == 0) {
      break;
    }
LABEL_40:
    unint64_t v6 = ++v7;
    if (v7 >= (unint64_t)((v4 - v5) >> 2)) {
      goto LABEL_44;
    }
  }
  *((void *)v48 + v8) = v10 | v9;
  std::string __p = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v47, 1uLL);
  uint64_t v13 = v11;
  *unint64_t v11 = v7;
  int v14 = (char *)(v11 + 1);
  char v16 = (char *)__p;
  unsigned int v15 = v46;
  if (v46 != __p)
  {
    do
    {
      int v17 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *--unint64_t v11 = v17;
    }
    while (v15 != v16);
    unsigned int v15 = (char *)__p;
  }
  unsigned int v41 = v7;
  std::string __p = v11;
  uint64_t v46 = v14;
  uint64_t v47 = (char *)&v13[v12];
  if (v15)
  {
    operator delete(v15);
    unint64_t v11 = __p;
  }
  unint64_t v18 = 0;
  ++v42;
  uint64_t v46 = v14;
  do
  {
    LODWORD(v43) = v11[v18];
    unsigned int v19 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v43);
    unsigned int v44 = v19;
    do
    {
      unsigned int v44 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v44) + 4);
      uint64_t v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v44);
      uint64_t v21 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v20);
      if ((*v21 & v22) == 0)
      {
        unint64_t v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v44);
        unint64_t v24 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v23) + 16);
        if (((1 << v24) & *((void *)v48 + (v24 >> 6))) == 0)
        {
          uint64_t v25 = v46;
          if (v46 >= v47)
          {
            uint64_t v27 = (v46 - (unsigned char *)__p) >> 2;
            if ((unint64_t)(v27 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v28 = (v47 - (unsigned char *)__p) >> 1;
            if (v28 <= v27 + 1) {
              unint64_t v28 = v27 + 1;
            }
            if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            if (v29) {
              float32x4_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v47, v29);
            }
            else {
              float32x4_t v30 = 0;
            }
            int v31 = &v30[4 * v27];
            *(_DWORD *)int v31 = v24;
            uint64_t v26 = v31 + 4;
            uint64_t v33 = (char *)__p;
            uint64_t v32 = v46;
            if (v46 != __p)
            {
              do
              {
                int v34 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v31 - 1) = v34;
                v31 -= 4;
              }
              while (v32 != v33);
              uint64_t v32 = (char *)__p;
            }
            std::string __p = v31;
            uint64_t v46 = v26;
            uint64_t v47 = &v30[4 * v29];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v46 = v24;
            uint64_t v26 = v25 + 4;
          }
          uint64_t v46 = v26;
          *((void *)v48 + (v24 >> 6)) |= 1 << v24;
        }
      }
    }
    while (v44 != v19);
    ++v18;
    unint64_t v11 = __p;
    unint64_t v35 = v46 - (unsigned char *)__p;
  }
  while (v18 < ((unint64_t)(v46 - (unsigned char *)__p) >> 2));
  unint64_t v36 = *(void *)(a1 + 160) - *(void *)(a1 + 152);
  unsigned int v37 = v42;
  if (v35 < v36)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v43);
    cv3d::cv::gess::isochart::GenerateMeshFromFaceList(a1, (unsigned int **)&__p, v43);
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100](a2, &v43);
    if (*((void *)&v43 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
    }
    unint64_t v11 = __p;
    unsigned int v37 = v40;
  }
  if (v11)
  {
    uint64_t v46 = (char *)v11;
    operator delete(v11);
  }
  if (v35 < v36)
  {
    uint64_t v5 = *(void *)(a1 + 152);
    uint64_t v4 = *(void *)(a1 + 160);
    unsigned int v40 = v37;
    unsigned int v7 = v41;
    goto LABEL_40;
  }
  unsigned int v42 = v37;
LABEL_44:
  if (v48) {
    operator delete(v48);
  }
  return v42;
}

void sub_24F50F830(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
}

void sub_24F50F88C()
{
}

void sub_24F50F8B8()
{
}

void cv3d::cv::gess::isochart::GenerateMeshFromFaceList(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  int64_t v212 = 0;
  long long v213 = 0;
  uint64_t v214 = 0;
  uint64_t v184 = a1 + 104;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v211, (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  uint64_t v208 = 0;
  uint64_t v209 = 0;
  unsigned int v210 = 0;
  unsigned int v205 = 0;
  unint64_t v206 = 0;
  unint64_t v207 = 0;
  memset(&v204, 0, sizeof(v204));
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v202, 3uLL);
  std::vector<unsigned int>::reserve(&v204, (((char *)a2[1] - (char *)*a2) >> 1) + a2[1] - *a2);
  uint64_t v5 = *a2;
  unint64_t v179 = a2[1];
  if (*a2 == v179) {
    goto LABEL_86;
  }
  do
  {
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, v5, &v202);
    float v181 = v5;
    unint64_t v6 = (unsigned int *)v202;
    unsigned int v7 = v203;
    while (v6 != v7)
    {
      uint64_t v8 = *v6;
      int v9 = *((_DWORD *)v211[0] + v8);
      if (v9 == -1)
      {
        int v17 = v213;
        if (v213 >= v214)
        {
          uint64_t v19 = (v213 - v212) >> 2;
          if ((unint64_t)(v19 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v20 = (v214 - v212) >> 1;
          if (v20 <= v19 + 1) {
            unint64_t v20 = v19 + 1;
          }
          if ((unint64_t)(v214 - v212) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21)
          {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v214, v21);
            LODWORD(v8) = *v6;
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v26 = &v22[4 * v19];
          *(_DWORD *)uint64_t v26 = v8;
          unint64_t v18 = v26 + 4;
          unint64_t v28 = v212;
          uint64_t v27 = v213;
          if (v213 != v212)
          {
            do
            {
              int v29 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v26 - 1) = v29;
              v26 -= 4;
            }
            while (v27 != v28);
            uint64_t v27 = v212;
          }
          int64_t v212 = v26;
          long long v213 = v18;
          uint64_t v214 = &v22[4 * v21];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(_DWORD *)long long v213 = v8;
          unint64_t v18 = v17 + 4;
        }
        long long v213 = v18;
        int v9 = ((unint64_t)(v18 - v212) >> 2) - 1;
        *((_DWORD *)v211[0] + *v6) = v9;
        uint64_t v30 = 0;
        *(_OWORD *)std::string __p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v6);
        int v31 = v206;
        do
        {
          if (v31 >= v207)
          {
            uint64_t v33 = v205;
            uint64_t v34 = (v31 - v205) >> 2;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v207 - v205;
            if ((v207 - v205) >> 1 > v35) {
              unint64_t v35 = v36 >> 1;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              float32x4_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v207, v37);
              uint64_t v33 = v205;
              int v31 = v206;
            }
            else
            {
              float32x4_t v38 = 0;
            }
            uint64_t v39 = &v38[4 * v34];
            *(_DWORD *)uint64_t v39 = *((_DWORD *)__p + v30);
            uint64_t v32 = v39 + 4;
            while (v31 != v33)
            {
              int v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            unsigned int v205 = v39;
            unint64_t v206 = v32;
            unint64_t v207 = &v38[4 * v37];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(_DWORD *)int v31 = *((_DWORD *)__p + v30);
            uint64_t v32 = v31 + 4;
          }
          unint64_t v206 = v32;
          ++v30;
          int v31 = v32;
        }
        while (v30 != 3);
        std::vector<int>::pointer end = v204.__end_;
        if (v204.__end_ < v204.__end_cap_.__value_)
        {
LABEL_53:
          *std::vector<int>::pointer end = v9;
          unint64_t v24 = end + 1;
          goto LABEL_68;
        }
        begiuint64_t n = v204.__begin_;
        int64_t v41 = v204.__end_ - v204.__begin_;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        int64_t v43 = (char *)v204.__end_cap_.__value_ - (char *)v204.__begin_;
        if (((char *)v204.__end_cap_.__value_ - (char *)v204.__begin_) >> 1 > v42) {
          unint64_t v42 = v43 >> 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v42;
        }
        if (v15)
        {
          char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v204.__end_cap_, v15);
          begiuint64_t n = v204.__begin_;
          std::vector<int>::pointer end = v204.__end_;
        }
        else
        {
          char v16 = 0;
        }
        unint64_t v23 = (int *)&v16[4 * v41];
        *unint64_t v23 = v9;
        unint64_t v24 = v23 + 1;
        while (end != begin)
        {
          int v44 = *--end;
          *--unint64_t v23 = v44;
        }
      }
      else
      {
        std::vector<int>::pointer end = v204.__end_;
        if (v204.__end_ < v204.__end_cap_.__value_) {
          goto LABEL_53;
        }
        begiuint64_t n = v204.__begin_;
        int64_t v12 = v204.__end_ - v204.__begin_;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        int64_t v14 = (char *)v204.__end_cap_.__value_ - (char *)v204.__begin_;
        if (((char *)v204.__end_cap_.__value_ - (char *)v204.__begin_) >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v204.__end_cap_, v15);
          begiuint64_t n = v204.__begin_;
          std::vector<int>::pointer end = v204.__end_;
        }
        else
        {
          char v16 = 0;
        }
        unint64_t v23 = (int *)&v16[4 * v12];
        *unint64_t v23 = v9;
        unint64_t v24 = v23 + 1;
        while (end != begin)
        {
          int v25 = *--end;
          *--unint64_t v23 = v25;
        }
      }
      v204.__begin_ = v23;
      v204.__end_ = v24;
      v204.__end_cap_.__value_ = (int *)&v16[4 * v15];
      if (begin) {
        operator delete(begin);
      }
LABEL_68:
      v204.__end_ = v24;
      ++v6;
    }
    uint64_t v45 = v209;
    if (v209 >= v210)
    {
      uint64_t v48 = (v209 - (char *)v208) >> 2;
      uint64_t v46 = v181;
      if ((unint64_t)(v48 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v49 = (v210 - (char *)v208) >> 1;
      if (v49 <= v48 + 1) {
        unint64_t v49 = v48 + 1;
      }
      if ((unint64_t)(v210 - (char *)v208) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v49;
      }
      if (v50) {
        unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v210, v50);
      }
      else {
        unint64_t v51 = 0;
      }
      uint64_t v52 = (unsigned int *)&v51[4 * v48];
      unsigned int *v52 = *v181;
      uint64_t v47 = (char *)(v52 + 1);
      int v54 = v208;
      uint64_t v53 = (unsigned int *)v209;
      if (v209 != (char *)v208)
      {
        do
        {
          unsigned int v55 = *--v53;
          *--uint64_t v52 = v55;
        }
        while (v53 != v54);
        uint64_t v53 = v208;
      }
      uint64_t v208 = v52;
      uint64_t v209 = v47;
      unsigned int v210 = &v51[4 * v50];
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      uint64_t v46 = v181;
      *(_DWORD *)uint64_t v209 = *v181;
      uint64_t v47 = v45 + 4;
    }
    uint64_t v209 = v47;
    uint64_t v5 = v46 + 1;
  }
  while (v5 != v179);
LABEL_86:
  cv3d::cv::gess::io::MeshFromArray<float,unsigned int>(a3, &v205, &v204);
  int v201 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>(a3, &v201, (long long *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v201;
  float32x2_t v180 = (uint64_t *)(a3 + 8);
  uint64_t v56 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(a3 + 8), (unsigned int *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  LODWORD(v190) = -1;
  int v57 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(a1 + 8), (uint64_t)&v190, (unsigned __int8 *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  if (v57 == -1) {
    __assert_rtn("GenerateMeshFromFaceList", "IsoChartUtils.cpp", 205, "v_id_root_father_ah.Valid()");
  }
  LODWORD(__p[0]) = v57;
  uint64_t v58 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  uint64_t v59 = (*(void *)(a3 + 112) - *(void *)(a3 + 104)) >> 2;
  uint64_t v60 = v59;
  if (v59)
  {
    unint64_t v61 = 0;
    while (1)
    {
      unint64_t v62 = *(unsigned int *)&v212[4 * v61];
      uint64_t v63 = *(void *)(v58 + 40);
      if (v62 >= (*(void *)(v58 + 48) - v63) >> 2) {
        break;
      }
      uint64_t v64 = *(void *)(v56 + 40);
      if (v61 >= (*(void *)(v56 + 48) - v64) >> 2)
      {
        int v167 = 182;
LABEL_214:
        __assert_rtn("operator[]", "Attribute.h", v167, "index < data_.size()");
      }
      *(_DWORD *)(v64 + 4 * v61++) = *(_DWORD *)(v63 + 4 * v62);
      if (v59 == v61) {
        goto LABEL_96;
      }
    }
    int v167 = 187;
    goto LABEL_214;
  }
LABEL_96:
  int v198 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>(a3, &v198, (long long *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v198;
  float v182 = (uint64_t *)(a3 + 56);
  uint64_t v65 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(a3 + 56), (unsigned int *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  float32x4_t v66 = (uint64_t *)(a1 + 56);
  LODWORD(v190) = -1;
  int v67 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(a1 + 56), (uint64_t)&v190, (unsigned __int8 *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  if (v67 == -1) {
    __assert_rtn("GenerateMeshFromFaceList", "IsoChartUtils.cpp", 218, "f_id_root_father_ah.Valid()");
  }
  LODWORD(__p[0]) = v67;
  uint64_t v68 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v66, (unsigned int *)__p);
  uint64_t v69 = (*(void *)(a3 + 160) - *(void *)(a3 + 152)) >> 2;
  uint64_t v70 = v69;
  if (v69)
  {
    unint64_t v71 = 0;
    while (1)
    {
      unint64_t v72 = v208[v71];
      uint64_t v73 = *(void *)(v68 + 40);
      if (v72 >= (*(void *)(v68 + 48) - v73) >> 2) {
        break;
      }
      uint64_t v74 = *(void *)(v65 + 40);
      if (v71 >= (*(void *)(v65 + 48) - v74) >> 2)
      {
        int v168 = 182;
LABEL_217:
        __assert_rtn("operator[]", "Attribute.h", v168, "index < data_.size()");
      }
      *(_DWORD *)(v74 + 4 * v71++) = *(_DWORD *)(v73 + 4 * v72);
      if (v70 == v71) {
        goto LABEL_106;
      }
    }
    int v168 = 187;
    goto LABEL_217;
  }
LABEL_106:
  int v197 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>(a3, &v197, (long long *)__p);
  float32x2_t v177 = (uint64_t *)(a1 + 56);
  uint64_t v178 = v70;
  uint64_t v175 = (uint64_t **)(a1 + 8);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  int v174 = v59;
  if (v59)
  {
    unint64_t v75 = 0;
    unsigned int v76 = "vhs_new[ii].Index() < mesh.VSize()";
    unint64_t v77 = "IsoChartUtils.cpp";
    uint64_t v78 = "GenerateMeshFromFaceList";
    while (1)
    {
      uint64_t v79 = v60;
      uint64_t v80 = v212;
      if (*(unsigned int *)&v212[4 * v75] >= (unint64_t)((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2)) {
        break;
      }
      LODWORD(__p[0]) = v197;
      uint64_t v81 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(v180, (unsigned int *)__p);
      uint64_t v82 = *(void *)(v81 + 40);
      if (v75 >= (*(void *)(v81 + 48) - v82) >> 2)
      {
        int v169 = 182;
        uint64_t v78 = "operator[]";
        unint64_t v77 = "Attribute.h";
        unsigned int v76 = "index < data_.size()";
LABEL_220:
        __assert_rtn(v78, v77, v169, v76);
      }
      *(_DWORD *)(v82 + 4 * v75) = *(_DWORD *)&v80[4 * v75];
      ++v75;
      uint64_t v60 = v79;
      if (v79 == v75) {
        goto LABEL_113;
      }
    }
    int v169 = 229;
    goto LABEL_220;
  }
LABEL_113:
  int v196 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_father");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>(a3, &v196, (long long *)__p);
  uint64_t v173 = v60;
  if (v200 < 0)
  {
    operator delete(__p[0]);
    if (!v70) {
      goto LABEL_121;
    }
LABEL_117:
    unint64_t v83 = 0;
    uint64_t v84 = "fhs_new[ii].Index() < mesh.FSize()";
    uint64_t v85 = "IsoChartUtils.cpp";
    uint64_t v86 = "GenerateMeshFromFaceList";
    while (1)
    {
      uint64_t v87 = v208;
      if (v208[v83] >= (unint64_t)((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2)) {
        break;
      }
      LODWORD(__p[0]) = v196;
      uint64_t v88 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v182, (unsigned int *)__p);
      uint64_t v89 = *(void *)(v88 + 40);
      if (v83 >= (*(void *)(v88 + 48) - v89) >> 2)
      {
        int v170 = 182;
        uint64_t v86 = "operator[]";
        uint64_t v85 = "Attribute.h";
        uint64_t v84 = "index < data_.size()";
LABEL_223:
        __assert_rtn(v86, v85, v170, v84);
      }
      *(_DWORD *)(v89 + 4 * v83) = v87[v83];
      if (v70 == ++v83) {
        goto LABEL_121;
      }
    }
    int v170 = 237;
    goto LABEL_223;
  }
  if (v70) {
    goto LABEL_117;
  }
LABEL_121:
  int v194 = -1;
  int v195 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  uint64_t v190 = 0;
  float32x4_t v191 = 0;
  char v90 = (uint64_t *)(a1 + 56);
  int v91 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)v66, (uint64_t)&v190, (unsigned __int8 *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  if (v91 == -1)
  {
    int v92 = 0;
LABEL_134:
    int v183 = -1;
    goto LABEL_141;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  LODWORD(v190) = 0;
  int v183 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 32), (uint64_t)&v190, (unsigned __int8 *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  if (v183 == -1)
  {
    int v92 = 0;
    goto LABEL_134;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a3, &v195, (long long *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a3, &v194, (long long *)__p);
  if (v200 < 0)
  {
    operator delete(__p[0]);
    if (!v70) {
      goto LABEL_140;
    }
LABEL_136:
    unint64_t v93 = 0;
    while (1)
    {
      LODWORD(__p[0]) = v91;
      uint64_t v94 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v177, (unsigned int *)__p);
      unint64_t v95 = v208[v93];
      uint64_t v96 = *(void *)(v94 + 40);
      if (v95 >= (*(void *)(v94 + 48) - v96) >> 4) {
        break;
      }
      LODWORD(__p[0]) = v195;
      uint64_t v97 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v182, (unsigned int *)__p);
      uint64_t v98 = *(void *)(v97 + 40);
      if (v93 >= (*(void *)(v97 + 48) - v98) >> 4)
      {
        int v172 = 182;
LABEL_229:
        __assert_rtn("operator[]", "Attribute.h", v172, "index < data_.size()");
      }
      *(_OWORD *)(v98 + 16 * v93++) = *(_OWORD *)(v96 + 16 * v95);
      if (v178 == v93) {
        goto LABEL_140;
      }
    }
    int v172 = 187;
    goto LABEL_229;
  }
  if (v70) {
    goto LABEL_136;
  }
LABEL_140:
  int v92 = 1;
LABEL_141:
  int v193 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v190) = 0;
  int v99 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v182, (uint64_t)&v190, (unsigned __int8 *)__p);
  int v193 = v99;
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  if (v99 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a3, &v193, (long long *)__p);
    if (v200 < 0) {
      operator delete(__p[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v190) = 0;
  int v176 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v177, (uint64_t)&v190, (unsigned __int8 *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  int v192 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v190) = 0;
  int v100 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a3 + 32), (uint64_t)&v190, (unsigned __int8 *)__p);
  int v192 = v100;
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  if (v100 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a3, &v192, (long long *)__p);
    if (v200 < 0) {
      operator delete(__p[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  int v101 = (uint64_t *)(a1 + 32);
  LODWORD(v190) = 0;
  int v102 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 32), (uint64_t)&v190, (unsigned __int8 *)__p);
  if (v200 < 0) {
    operator delete(__p[0]);
  }
  if (v102 == -1) {
    __assert_rtn("GenerateMeshFromFaceList", "IsoChartUtils.cpp", 274, "h_length_father_ah.Valid()");
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v190, 3uLL);
  if (v178)
  {
    unint64_t v103 = 0;
    while (1)
    {
      LODWORD(v187[0]) = v176;
      uint64_t v104 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v90, (unsigned int *)v187);
      unint64_t v105 = v208[v103];
      uint64_t v106 = *(void *)(v104 + 40);
      if (v105 >= (*(void *)(v104 + 48) - v106) >> 2) {
        break;
      }
      int v107 = *(_DWORD *)(v106 + 4 * v105);
      LODWORD(v187[0]) = v193;
      uint64_t v108 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v182, (unsigned int *)v187);
      uint64_t v109 = *(void *)(v108 + 40);
      if (v103 >= (*(void *)(v108 + 48) - v109) >> 2)
      {
LABEL_206:
        int v163 = 182;
LABEL_208:
        uint64_t v164 = "Attribute.h";
        unint64_t v165 = "operator[]";
        float32x4_t v166 = "index < data_.size()";
        goto LABEL_209;
      }
      *(_DWORD *)(v109 + 4 * v103) = v107;
      LODWORD(v187[0]) = v103;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a3, (unsigned int *)v187, __p);
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, &v208[v103], &v190);
      for (uint64_t i = 0; i != 12; i += 4)
      {
        LODWORD(v187[0]) = v102;
        uint64_t v111 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v101, (unsigned int *)v187);
        unint64_t v112 = *(unsigned int *)((char *)v190 + i);
        uint64_t v113 = *(void *)(v111 + 40);
        if (v112 >= (*(void *)(v111 + 48) - v113) >> 2) {
          goto LABEL_207;
        }
        int v114 = *(_DWORD *)(v113 + 4 * v112);
        LODWORD(v187[0]) = v192;
        uint64_t v115 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v187);
        uint64_t v116 = (char *)__p[0];
        unint64_t v117 = *(unsigned int *)((char *)__p[0] + i);
        uint64_t v118 = *(void *)(v115 + 40);
        if (v117 >= (*(void *)(v115 + 48) - v118) >> 2) {
          goto LABEL_206;
        }
        *(_DWORD *)(v118 + 4 * v117) = v114;
        if (v92)
        {
          LODWORD(v187[0]) = v183;
          uint64_t v119 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v101, (unsigned int *)v187);
          unint64_t v120 = *(unsigned int *)((char *)v190 + i);
          uint64_t v121 = *(void *)(v119 + 40);
          if (v120 >= (*(void *)(v119 + 48) - v121) >> 2) {
            goto LABEL_207;
          }
          int v122 = *(_DWORD *)(v121 + 4 * v120);
          LODWORD(v187[0]) = v194;
          uint64_t v123 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v187);
          uint64_t v116 = (char *)__p[0];
          unint64_t v124 = *(unsigned int *)((char *)__p[0] + i);
          uint64_t v125 = *(void *)(v123 + 40);
          if (v124 >= (*(void *)(v123 + 48) - v125) >> 2) {
            goto LABEL_206;
          }
          *(_DWORD *)(v125 + 4 * v124) = v122;
        }
        uint64_t v126 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)&v116[i]) + 12);
        uint64_t v127 = v212;
        if (*(_DWORD *)&v127[4 * v126] != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v184, (unsigned int *)((char *)v190 + i))+ 12))
        {
          int v163 = 291;
          unint64_t v165 = "GenerateMeshFromFaceList";
          uint64_t v164 = "IsoChartUtils.cpp";
          float32x4_t v166 = "vhs_new[generated_mesh.HEdgeStart(hhs[j]).Index()] == mesh.HEdgeStart(hhs_father[j])";
          goto LABEL_209;
        }
        LODWORD(v187[0]) = v192;
        uint64_t v128 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v187);
        unint64_t v129 = (unsigned int *)((char *)__p[0] + i);
        unint64_t v130 = *(unsigned int *)((char *)__p[0] + i);
        uint64_t v131 = *(void *)(v128 + 40);
        if (v130 >= (*(void *)(v128 + 48) - v131) >> 2) {
          goto LABEL_206;
        }
        float v132 = *(float *)(v131 + 4 * v130);
        uint64_t v133 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
        uint64_t v134 = cv3d::cv::gess::mesh::Topology::h(a3 + 104, v133);
        float32x4_t v186 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a3, *(_DWORD *)(a3 + 176), *(_DWORD *)(v134 + 12));
        uint64_t v135 = cv3d::cv::gess::mesh::Topology::h(a3 + 104, v129);
        float32x4_t v136 = vsubq_f32(v186, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a3, *(_DWORD *)(a3 + 176), *(_DWORD *)(v135 + 12)));
        float32x4_t v137 = vmulq_f32(v136, v136);
        v137.i32[3] = 0;
        if (vabds_f32(v132, sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v137, v137)))) >= 0.0001)
        {
          int v163 = 293;
          unint64_t v165 = "GenerateMeshFromFaceList";
          uint64_t v164 = "IsoChartUtils.cpp";
          float32x4_t v166 = "std::fabs(generated_mesh.attribute(h_length_ah)[hhs[j].Index()] - HEdgeLength(generated_mesh, hhs[j])) < 10e-5";
LABEL_209:
          __assert_rtn(v165, v164, v163, v166);
        }
        double v138 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
        uint64_t v139 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a3, *(_DWORD *)(a3 + 180), *v138);
        if ((*v139 & v140) != 0)
        {
          LODWORD(v187[0]) = v192;
          uint64_t v141 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v187);
          unint64_t v142 = *(unsigned int *)((char *)__p[0] + i);
          uint64_t v143 = *(void *)(v141 + 40);
          if (v142 >= (*(void *)(v141 + 48) - v143) >> 2) {
            goto LABEL_206;
          }
          int v144 = *(_DWORD *)(v143 + 4 * v142);
          LODWORD(v187[0]) = v192;
          uint64_t v145 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v187);
          unint64_t v146 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
          uint64_t v147 = *(void *)(v145 + 40);
          if (v146 >= (*(void *)(v145 + 48) - v147) >> 2) {
            goto LABEL_206;
          }
          *(_DWORD *)(v147 + 4 * v146) = v144;
          if (v92)
          {
            LODWORD(v187[0]) = v194;
            uint64_t v148 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v187);
            unint64_t v149 = *(unsigned int *)((char *)__p[0] + i);
            uint64_t v150 = *(void *)(v148 + 40);
            if (v149 >= (*(void *)(v148 + 48) - v150) >> 2) {
              goto LABEL_206;
            }
            int v151 = *(_DWORD *)(v150 + 4 * v149);
            LODWORD(v187[0]) = v194;
            uint64_t v152 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v187);
            unint64_t v153 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
            uint64_t v154 = *(void *)(v152 + 40);
            if (v153 >= (*(void *)(v152 + 48) - v154) >> 2) {
              goto LABEL_206;
            }
            *(_DWORD *)(v154 + 4 * v153) = v151;
          }
        }
      }
      ++v103;
      char v90 = (uint64_t *)(a1 + 56);
      if (v103 == v178) {
        goto LABEL_179;
      }
    }
LABEL_207:
    int v163 = 187;
    goto LABEL_208;
  }
LABEL_179:
  int v189 = -1;
  std::string::basic_string[abi:ne180100]<0>(v187, "v:importance");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a3, &v189, (long long *)v187);
  if (v188 < 0) {
    operator delete(v187[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v187, "v:importance");
  v215[0] = 0;
  int v155 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(v175, (uint64_t)v215, (unsigned __int8 *)v187);
  if (v188 < 0) {
    operator delete(v187[0]);
  }
  if (v155 != -1 && v174)
  {
    unint64_t v156 = 0;
    while (1)
    {
      LODWORD(v187[0]) = v155;
      uint64_t v157 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)v175, (unsigned int *)v187);
      unint64_t v158 = *(unsigned int *)&v212[4 * v156];
      uint64_t v159 = *(void *)(v157 + 40);
      if (v158 >= (*(void *)(v157 + 48) - v159) >> 2) {
        break;
      }
      int v160 = *(_DWORD *)(v159 + 4 * v158);
      LODWORD(v187[0]) = v189;
      uint64_t v161 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v180, (unsigned int *)v187);
      uint64_t v162 = *(void *)(v161 + 40);
      if (v156 >= (*(void *)(v161 + 48) - v162) >> 2)
      {
        int v171 = 182;
LABEL_226:
        __assert_rtn("operator[]", "Attribute.h", v171, "index < data_.size()");
      }
      *(_DWORD *)(v162 + 4 * v156++) = v160;
      if (v173 == v156) {
        goto LABEL_189;
      }
    }
    int v171 = 187;
    goto LABEL_226;
  }
LABEL_189:
  if (v190)
  {
    float32x4_t v191 = v190;
    operator delete(v190);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v202)
  {
    uint64_t v203 = (unsigned int *)v202;
    operator delete(v202);
  }
  if (v204.__begin_)
  {
    v204.__end_ = v204.__begin_;
    operator delete(v204.__begin_);
  }
  if (v205)
  {
    unint64_t v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    uint64_t v209 = (char *)v208;
    operator delete(v208);
  }
  if (v211[0])
  {
    v211[1] = v211[0];
    operator delete(v211[0]);
  }
  if (v212)
  {
    long long v213 = v212;
    operator delete(v212);
  }
}

void sub_24F510B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a45) {
    operator delete(a45);
  }
  uint64_t v48 = *(void **)(v46 - 232);
  if (v48)
  {
    *(void *)(v46 - 224) = v48;
    operator delete(v48);
  }
  unint64_t v49 = *(void **)(v46 - 208);
  if (v49)
  {
    *(void *)(v46 - 200) = v49;
    operator delete(v49);
  }
  unint64_t v50 = *(void **)(v46 - 184);
  if (v50)
  {
    *(void *)(v46 - 176) = v50;
    operator delete(v50);
  }
  unint64_t v51 = *(void **)(v46 - 160);
  if (v51)
  {
    *(void *)(v46 - 152) = v51;
    operator delete(v51);
  }
  uint64_t v52 = *(void **)(v46 - 136);
  if (v52)
  {
    *(void *)(v46 - 128) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(uint64_t a1, _DWORD *a2, long long *a3)
{
  int v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<float>((uint64_t *)(a1 + 32), (uint64_t)&v6, a3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v4);
}

{
  uint64_t v4;
  int v6;

  int v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<float>((uint64_t *)(a1 + 56), (uint64_t)&v6, a3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

uint64_t cv3d::cv::gess::isochart::FindAllBoundaries(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a1 + 104;
  if (a3[1] - *a3 != *(void *)(a1 + 112) - *(void *)(a1 + 104)) {
    cv3d::cv::gess::isochart::FindAllBoundaries();
  }
  unint64_t v7 = -858993459 * ((*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v39, v7, (unsigned __int8 *)&__p);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v34 = v7;
    unint64_t v35 = a2;
    do
    {
      if (((*(void *)((char *)v39 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0
        || (unint64_t v11 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v8),
            (*v11 & v12) == 0))
      {
        uint64_t v10 = v9;
      }
      else
      {
        std::string __p = 0;
        unint64_t v37 = 0;
        uint64_t v38 = 0;
        std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::push_back[abi:ne180100](a2, (uint64_t)&__p);
        if (__p)
        {
          unint64_t v37 = __p;
          operator delete(__p);
        }
        LODWORD(__p) = v8;
        uint64_t v13 = a2[1];
        int64_t v14 = (char **)(v13 - 24);
        LODWORD(v15) = v8;
        char v16 = (char **)(v13 - 16);
        int v17 = (void *)(v13 - 8);
        do
        {
          unint64_t v18 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v15);
          if ((*v18 & v19) == 0) {
            __assert_rtn("FindAllBoundaries", "IsoChartUtils.cpp", 335, "mesh.is_boundary(cur)");
          }
          int v20 = (int)__p;
          *(void *)((char *)v39 + (((unint64_t)__p >> 3) & 0x1FFFFFF8)) |= 1 << (char)__p;
          unint64_t v21 = *v16;
          if ((unint64_t)*v16 >= *v17)
          {
            uint64_t v23 = (v21 - *v14) >> 2;
            if ((unint64_t)(v23 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = *v17 - (void)*v14;
            uint64_t v25 = v24 >> 1;
            if (v24 >> 1 <= (unint64_t)(v23 + 1)) {
              uint64_t v25 = v23 + 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26)
            {
              uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v17, v26);
              int v20 = (int)__p;
            }
            else
            {
              uint64_t v27 = 0;
            }
            unint64_t v28 = &v27[4 * v23];
            *(_DWORD *)unint64_t v28 = v20;
            uint64_t v22 = v28 + 4;
            int v29 = *v16;
            uint64_t v30 = *v14;
            if (*v16 != *v14)
            {
              do
              {
                int v31 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v28 - 1) = v31;
                v28 -= 4;
              }
              while (v29 != v30);
              int v29 = *v14;
            }
            *int64_t v14 = v28;
            *char v16 = v22;
            *int v17 = &v27[4 * v26];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v21 = v20;
            uint64_t v22 = v21 + 4;
          }
          *char v16 = v22;
          *(_DWORD *)(*a3 + 4 * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v3, (unsigned int *)&__p) + 12)) = v9;
          uint64_t v15 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v3, (unsigned int *)&__p) + 8);
          LODWORD(__p) = v15;
        }
        while (v15 != -1 && v8 != v15);
        unint64_t v7 = v34;
        a2 = v35;
        uint64_t v10 = (v9 + 1);
      }
      ++v8;
      uint64_t v9 = v10;
    }
    while (v8 != v7);
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v39) {
    operator delete(v39);
  }
  return v10;
}

void sub_24F5110E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::NormalizeUVCoords(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v3 = (uint64_t **)((char *)this + 80);
  uint64_t v36 = 0;
  int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v3, (uint64_t)&v36, (unsigned __int8 *)__p);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v4 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    uint64_t v36 = 0;
    int v4 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (uint64_t)&v36, (long long *)__p);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
  }
  LODWORD(__p[0]) = v4;
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    float v8 = -3.4028e38;
    float v9 = 3.4028e38;
    float v10 = 3.4028e38;
    float v11 = -3.4028e38;
    do
    {
      LODWORD(__p[0]) = v4;
      uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      uint64_t v13 = *(void *)(v12 + 40);
      if (v7 >= (*(void *)(v12 + 48) - v13) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      int64_t v14 = (float *)(v13 + v6);
      float v15 = v14[1];
      if (*v14 < v9) {
        float v9 = *v14;
      }
      if (v15 < v10) {
        float v10 = v14[1];
      }
      if (v8 < *v14) {
        float v8 = *v14;
      }
      if (v11 < v15) {
        float v11 = v14[1];
      }
      ++v7;
      LODWORD(__p[0]) = v4;
      uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      v6 += 8;
    }
    while (v7 < (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16));
  }
  else
  {
    float v10 = 3.4028e38;
    float v11 = -3.4028e38;
    float v8 = -3.4028e38;
    float v9 = 3.4028e38;
  }
  LODWORD(__p[0]) = v4;
  uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
  if (result)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    float v21 = v8 - v9;
    float v22 = v11 - v10;
    do
    {
      LODWORD(__p[0]) = v4;
      uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      uint64_t v24 = *(void *)(v23 + 40);
      if (v20 >= (*(void *)(v23 + 48) - v24) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      float v25 = *(float *)(v24 + v19);
      LODWORD(__p[0]) = v4;
      uint64_t v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      uint64_t v27 = *(void *)(v26 + 40);
      if (v20 >= (*(void *)(v26 + 48) - v27) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(float *)(v27 + v19) = (float)(v25 - v9) / v21;
      LODWORD(__p[0]) = v4;
      uint64_t v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      uint64_t v29 = *(void *)(v28 + 40);
      if (v20 >= (*(void *)(v28 + 48) - v29) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      float v30 = *(float *)(v29 + v19 + 4);
      LODWORD(__p[0]) = v4;
      uint64_t v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      uint64_t v32 = *(void *)(v31 + 40);
      if (v20 >= (*(void *)(v31 + 48) - v32) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(float *)(v32 + v19 + 4) = (float)(v30 - v10) / v22;
      ++v20;
      LODWORD(__p[0]) = v4;
      uint64_t v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 16))(v33);
      v19 += 8;
    }
    while (v20 < result);
  }
  return result;
}

void sub_24F511424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::RescaleCharts(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v3 = (uint64_t *)(this + 10);
  uint64_t v42 = 0;
  int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(this + 10, (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v43) = 0;
  uint64_t v42 = 0;
  int v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 7, (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v4;
  unint64_t v7 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p);
  if (this[20] == this[19])
  {
    float v12 = 0.0;
    float v11 = 0.0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    float v11 = 0.0;
    float v12 = 0.0;
    do
    {
      LODWORD(__p[0]) = v5;
      uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p);
      uint64_t v14 = *(void *)(v13 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v13 + 48) - v14) >> 2) <= v10) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      unint64_t v15 = *(unsigned int *)(v14 + v9);
      uint64_t v16 = v7[5];
      unint64_t v17 = (v7[6] - v16) >> 3;
      if (v17 <= v15) {
        cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
      }
      uint64_t v18 = v14 + v9;
      unint64_t v19 = *(unsigned int *)(v14 + v9 + 4);
      if (v17 <= v19) {
        cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
      }
      unint64_t v20 = *(unsigned int *)(v18 + 8);
      if (v17 <= v20) {
        cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
      }
      float v38 = v12;
      float v21 = (float *)(v16 + 8 * v15);
      float v22 = (float *)(v16 + 8 * v19);
      uint64_t v23 = (float *)(v16 + 8 * v20);
      float v25 = *v22;
      float v24 = v22[1];
      float v27 = *v21;
      float v26 = v21[1];
      float v29 = *v23;
      float v28 = v23[1];
      LODWORD(__p[0]) = v10;
      float v30 = cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)this, (unsigned int *)__p);
      LODWORD(__p[0]) = v6;
      uint64_t v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 7, (unsigned int *)__p);
      uint64_t v32 = *(void *)(v31 + 40);
      if (v10 >= (*(void *)(v31 + 48) - v32) >> 4) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      float v11 = v11
          + fabsf((float)((float)((float)(v25 - v27) * (float)(v28 - v26)) - (float)((float)(v24 - v26) * (float)(v29 - v27)))* 0.5);
      float v12 = v38 + (float)(v30 * powf(*(float *)(v32 + v8), 0.25));
      ++v10;
      v9 += 12;
      v8 += 16;
    }
    while (v10 < ((char *)this[20] - (char *)this[19]) >> 2);
  }
  float v33 = v12 / v11;
  if (v11 <= 0.00000001) {
    float v33 = 1.0;
  }
  float v39 = v33;
  unint64_t result = (*(uint64_t (**)(void *))(*v7 + 16))(v7);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      LODWORD(__p[0]) = v4;
      uint64_t v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v3, (unsigned int *)__p);
      uint64_t v37 = *(void *)(v36 + 40);
      if (i >= (*(void *)(v36 + 48) - v37) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(float32x2_t *)(v37 + 8 * i) = vmul_n_f32(*(float32x2_t *)(v37 + 8 * i), v39);
      unint64_t result = (*(uint64_t (**)(void *))(*v7 + 16))(v7);
    }
  }
  return result;
}

void sub_24F51177C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::AssignUvidByVid(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  int v15 = 0;
  uint64_t v14 = 0;
  int v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v14, (unsigned __int8 *)__p);
  int v13 = v3;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v3 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t)this, &v13, (long long *)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (this[20] != this[19])
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      LODWORD(v14) = v5;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)this, (unsigned int *)&v14, __p);
      uint64_t v6 = *(void *)__p[0];
      int v7 = *((_DWORD *)__p[0] + 2);
      LODWORD(v14) = v13;
      uint64_t v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)&v14);
      uint64_t v9 = *(void *)(v8 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 48) - v9) >> 2) <= v5) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      uint64_t v10 = v9 + v4;
      *(void *)uint64_t v10 = v6;
      *(_DWORD *)(v10 + 8) = v7;
      ++v5;
      v4 += 12;
    }
    while (v5 < ((char *)this[20] - (char *)this[19]) >> 2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24F511928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::ResetUV(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  int v3 = (uint64_t **)((char *)this + 80);
  uint64_t v16 = 0;
  int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v3, (uint64_t)&v16, (unsigned __int8 *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v4 == -1) {
    cv3d::cv::gess::isochart::ResetUV();
  }
  LODWORD(__p[0]) = v4;
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (result)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      LODWORD(__p[0]) = v4;
      uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      uint64_t v10 = *(void *)(v9 + 40);
      if (v8 >= (*(void *)(v9 + 48) - v10) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(_DWORD *)(v10 + v7) = 0;
      LODWORD(__p[0]) = v4;
      uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      uint64_t v12 = *(void *)(v11 + 40);
      if (v8 >= (*(void *)(v11 + 48) - v12) >> 3) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(_DWORD *)(v12 + v7 + 4) = 0;
      ++v8;
      LODWORD(__p[0]) = v4;
      uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p);
      unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
      v7 += 8;
    }
    while (v8 < result);
  }
  return result;
}

void sub_24F511AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsochartCountBoundaryLoops(uint64_t a1)
{
  std::vector<BOOL>::vector(&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2));
  if (*(void *)(a1 + 136) == *(void *)(a1 + 128)) {
    goto LABEL_18;
  }
  unint64_t v2 = 0;
  unsigned int v3 = 1;
  do
  {
    int v4 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v2);
    if ((*v4 & v5) != 0) {
      *(void *)((char *)__p + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
    }
    uint64_t v7 = *(void *)(a1 + 128);
    uint64_t v6 = *(void *)(a1 + 136);
    unint64_t v2 = v3;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) > v3++);
  if (v6 == v7)
  {
LABEL_18:
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v9);
      if ((*v12 & v13) != 0 && ((*(void *)((char *)__p + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      {
        uint64_t v11 = (v11 + 1);
        unsigned int v17 = v10;
        unsigned int v14 = v10;
        do
        {
          *(void *)((char *)__p + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) |= 1 << v14;
          unsigned int v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v17) + 8);
          unsigned int v17 = v14;
        }
        while (v14 != -1 && v14 != v10);
      }
      unint64_t v9 = ++v10;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) > v10);
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_24F511C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsochartCountGenus(void *a1, int a2, int a3)
{
  int v3 = ((a1[14] - a1[13]) >> 2) + a3 - (int)(-858993459 * ((a1[17] - a1[16]) >> 2)) / 2 + ((a1[20] - a1[19]) >> 2);
  return (a2 - v3 / 2) & ~((a2 - v3 / 2) >> 31);
}

uint64_t cv3d::cv::gess::isochart::CalculateMaxAvgStretch(uint64_t a1, float *a2, float *a3, void *a4)
{
  *a4 = 0;
  *a2 = -3.4028e38;
  *a3 = 0.0;
  int v4 = *(float **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = v5 - *(void *)a1;
  if (v5 == *(void *)a1) {
    return 0;
  }
  unint64_t v7 = 0;
  unint64_t v8 = v6 >> 2;
  if (v8 <= 1) {
    unint64_t v8 = 1;
  }
  float v9 = 0.0;
  do
  {
    float v10 = *v4;
    if (*v4 < 3.4028e38)
    {
      if (*a2 < v10)
      {
        *a2 = v10;
        float v10 = *v4;
        float v9 = *a3;
      }
      float v9 = v10 + v9;
      *a3 = v9;
      *a4 = ++v7;
    }
    ++v4;
    --v8;
  }
  while (v8);
  if (!v7) {
    return 0;
  }
  *a3 = v9 / (float)v7;
  return 1;
}

float cv3d::cv::gess::isochart::CalculateTriMeshSurfaceArea(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v4 = *((void *)this + 19);
  uint64_t v3 = *((void *)this + 20);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  int v16 = 0;
  int v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)this + 7, (uint64_t)&v16, (unsigned __int8 *)__p);
  int v15 = v5;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>((uint64_t)this, &v15, (long long *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v3 == v4) {
    return 0.0;
  }
  unint64_t v6 = 0;
  if ((unint64_t)((v3 - v4) >> 2) <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = (v3 - v4) >> 2;
  }
  float v8 = 0.0;
  do
  {
    LODWORD(__p[0]) = v6;
    float v9 = cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)this, (unsigned int *)__p);
    LODWORD(__p[0]) = v15;
    uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)this + 7, (unsigned int *)__p);
    uint64_t v11 = *(void *)(v10 + 40);
    if (v6 >= (*(void *)(v10 + 48) - v11) >> 2) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    *(float *)(v11 + 4 * v6) = v9;
    float v8 = v8 + v9;
    ++v6;
  }
  while (v7 != v6);
  return v8;
}

void sub_24F511EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::CalculateHEdgeLength(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v4 = *((void *)this + 16);
  uint64_t v3 = *((void *)this + 17);
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 2);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v25, v5, (unsigned __int8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  int v26 = 0;
  int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)this + 4, (uint64_t)&v26, (unsigned __int8 *)__p);
  int v24 = v6;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v6 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>((uint64_t)this, &v24, (long long *)__p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = v25;
  if (v3 == v4)
  {
    if (!v25) {
      return;
    }
  }
  else
  {
    unint64_t v8 = 0;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      if ((v7[v8 >> 6] & (1 << v8)) == 0)
      {
        LODWORD(__p[0]) = v8;
        unint64_t v9 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v8;
        uint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
        uint64_t v11 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v10);
        float32x4_t v21 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v11 + 12));
        uint64_t v12 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
        float32x4_t v20 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v12 + 12));
        LODWORD(__p[0]) = v24;
        uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)this + 4, (unsigned int *)__p);
        uint64_t v14 = *(void *)(v13 + 40);
        if (v8 >= (*(void *)(v13 + 48) - v14) >> 2) {
          goto LABEL_18;
        }
        float32x4_t v15 = vsubq_f32(v21, v20);
        float32x4_t v16 = vmulq_f32(v15, v15);
        v16.i32[3] = 0;
        float v17 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
        *(float *)(v14 + 4 * v8) = v17;
        LODWORD(__p[0]) = v24;
        uint64_t v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)this + 4, (unsigned int *)__p);
        uint64_t v19 = *(void *)(v18 + 40);
        if (v9 >= (*(void *)(v18 + 48) - v19) >> 2) {
LABEL_18:
        }
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(float *)(v19 + 4 * v9) = v17;
        uint64_t v7 = v25;
        *((void *)v25 + (v8 >> 6)) |= 1 << v8;
        *(void *)((char *)v7 + ((v9 >> 3) & 0x1FFFFFF8)) |= 1 << v9;
      }
      ++v8;
    }
    while (v5 != v8);
  }
  operator delete(v7);
}

void sub_24F51214C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::CalculateHEdgeSignalLength(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unsigned int v21 = a3;
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 2);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v20, v7, (unsigned __int8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  int v22 = 0;
  int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 32), (uint64_t)&v22, (unsigned __int8 *)__p);
  int v19 = v8;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v8 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a1, &v19, (long long *)__p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v9 = v20;
  if (v5 == v6)
  {
    if (!v20) {
      return;
    }
  }
  else
  {
    unint64_t v10 = 0;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      if ((v9[v10 >> 6] & (1 << v10)) == 0)
      {
        LODWORD(__p[0]) = v10;
        unint64_t v11 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v10;
        float v12 = cv3d::cv::gess::isochart::HEdgeSignalLength(a1, (unsigned int *)__p, a2, &v21);
        LODWORD(__p[0]) = v19;
        uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 32), (unsigned int *)__p);
        uint64_t v14 = *(void *)(v13 + 40);
        if (v10 >= (*(void *)(v13 + 48) - v14) >> 2
          || (*(float *)(v14 + 4 * v10) = v12,
              LODWORD(__p[0]) = v19,
              uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 32), (unsigned int *)__p), v16 = *(void *)(v15 + 40), v11 >= (*(void *)(v15 + 48) - v16) >> 2))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(float *)(v16 + 4 * v11) = v12;
        unint64_t v9 = v20;
        *((void *)v20 + (v10 >> 6)) |= 1 << v10;
        *(void *)((char *)v9 + ((v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
      }
      ++v10;
    }
    while (v7 != v10);
  }
  operator delete(v9);
}

void sub_24F5123A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::CalculateInfiniteStretchArea(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v2 = *(void *)(a1 + 160);
  unint64_t v4 = (v2 - v3) >> 2;
  if (v4 != (uint64_t)(a2[1] - *a2) >> 2) {
    cv3d::cv::gess::isochart::CalculateInfiniteStretchArea();
  }
  if (v2 == v3) {
    return 0.0;
  }
  uint64_t v7 = 0;
  if (v4 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = (v2 - v3) >> 2;
  }
  float v9 = 0.0;
  do
  {
    if (*(float *)(*a2 + 4 * v7) >= 3.4028e38)
    {
      unsigned int v11 = v7;
      float v9 = v9 + cv3d::cv::gess::mesh::TriMesh::Area(a1, &v11);
    }
    ++v7;
  }
  while (v8 != v7);
  return v9;
}

float cv3d::cv::gess::isochart::CalculateInfiniteStretch2DAreaRatio(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = a1[19];
  uint64_t v3 = a1[20];
  unint64_t v5 = (v3 - v4) >> 2;
  if (v5 != (uint64_t)(a3[1] - *a3) >> 2) {
    cv3d::cv::gess::isochart::CalculateInfiniteStretch2DAreaRatio();
  }
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (v3 == v4) {
    goto LABEL_18;
  }
  uint64_t v9 = 0;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  float v10 = 0.0;
  float v11 = 0.0;
  do
  {
    unsigned int v26 = v9;
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)a1, &v26, __p);
    unsigned int v26 = a2;
    uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, &v26);
    unint64_t v13 = *(unsigned int *)__p[0];
    uint64_t v14 = *(void *)(v12 + 40);
    if (v13 >= (*(void *)(v12 + 48) - v14) >> 3) {
      goto LABEL_16;
    }
    unsigned int v26 = a2;
    uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, &v26);
    unint64_t v16 = *((unsigned int *)__p[0] + 1);
    uint64_t v17 = *(void *)(v15 + 40);
    if (v16 >= (*(void *)(v15 + 48) - v17) >> 3
      || (unsigned int v26 = a2,
          v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, &v26), v19 = *((unsigned int *)__p[0] + 2), uint64_t v21 = v18 + 40, v20 = *(void *)(v18 + 40), v19 >= (*(void *)(v21 + 8) - v20) >> 3))
    {
LABEL_16:
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    }
    int v22 = (float *)(v14 + 8 * v13);
    float v23 = fabsf((float)((float)((float)(*(float *)(v17 + 8 * v16) - *v22) * (float)(*(float *)(v20 + 8 * v19 + 4) - v22[1]))- (float)((float)(*(float *)(v17 + 8 * v16 + 4) - v22[1]) * (float)(*(float *)(v20 + 8 * v19) - *v22)))* 0.5);
    float v10 = v10 + v23;
    if (*(float *)(*a3 + 4 * v9) < 3.4028e38) {
      float v23 = -0.0;
    }
    float v11 = v11 + v23;
    ++v9;
  }
  while (v5 != v9);
  if (v10 <= 0.0) {
LABEL_18:
  }
    __assert_rtn("CalculateInfiniteStretch2DAreaRatio", "IsoChartUtils.cpp", 563, "total_area > 0.0f");
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11 / v10;
}

void sub_24F5126B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::IsVertexManifold(cv3d::cv::gess::isochart *this, const cv3d::cv::gess::mesh::TriMesh *a2)
{
  float v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  cv3d::cv::gess::alg::FindNonManifoldVertices((uint64_t)this, &v11, (unsigned int **)&v8, (unsigned int **)&__p);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  uint64_t v2 = v11;
  uint64_t v3 = v12;
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  return v2 == v3;
}

void sub_24F512768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  cv3d::cv::gess::isochart::IsVertexManifold((uint64_t)&__p, (uint64_t)&a13, v13 - 40);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CalculateFaceL2Stretch(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  if (fabsf(*a7) >= 1.0e-16)
  {
    float v8 = *a8;
    if (*a8 >= 0.0)
    {
      float v9 = fabsf(v8);
      if (v9 >= 0.00000001 || v8 >= (float)(*a7 * 0.5))
      {
        long long v26 = 0u;
        long long v27 = 0u;
        if (v9 > 1.0e-16)
        {
          std::vector<float>::vector(__p, 3uLL);
          uint64_t v17 = 0;
          uint64_t v18 = (float *)__p[0];
          float v19 = v8 + v8;
          do
          {
            float v20 = *(float *)(a1 + v17);
            *uint64_t v18 = v20;
            float v21 = *(float *)(a2 + v17);
            v18[1] = v21;
            float v22 = *(float *)(a3 + v17);
            v18[2] = v22;
            float v23 = *a6;
            float v24 = *a5;
            float v25 = *a4;
            *(float *)((char *)&__p[-1] + v17) = (float)((float)((float)(v21 * (float)(a6[1] - a4[1]))
                                                               + (float)(v20 * (float)(a5[1] - a6[1])))
                                                       + (float)(v22 * (float)(a4[1] - a5[1])))
                                               / v19;
            *(float *)((char *)&v26 + v17) = (float)((float)((float)(v21 * (float)(v25 - v23))
                                                           + (float)(v20 * (float)(v23 - v24)))
                                                   + (float)(v22 * (float)(v24 - v25)))
                                           / v19;
            v17 += 4;
          }
          while (v17 != 12);
          __p[1] = v18;
          operator delete(v18);
        }
      }
    }
  }
}

void cv3d::cv::gess::isochart::CalculateFaceLnStretch(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8 = *a7;
  if (*a7 > 0.0)
  {
    float v9 = *a8;
    if (*a8 >= 0.0 && (v9 >= 1.0e-16 || v8 * 0.5 <= v9))
    {
      float v17 = fabsf(v9);
      if (fabsf(v8) >= 1.0e-16 || v17 >= 1.0e-16)
      {
        float32x4_t v18 = 0uLL;
        float32x4_t v35 = 0u;
        float32x4_t v36 = 0u;
        float32x4_t v19 = 0uLL;
        if (v17 > 1.0e-16)
        {
          std::vector<float>::vector(__p, 3uLL);
          uint64_t v20 = 0;
          float v21 = (float *)__p[0];
          float v22 = v9 + v9;
          do
          {
            float v23 = *(float *)(a1 + v20 * 4);
            *float v21 = v23;
            float v24 = *(float *)(a2 + v20 * 4);
            v21[1] = v24;
            float v25 = *(float *)(a3 + v20 * 4);
            v21[2] = v25;
            float v26 = *a6;
            float v27 = *a5;
            float v28 = *a4;
            v36.f32[v20] = (float)((float)((float)(v24 * (float)(a6[1] - a4[1])) + (float)(v23 * (float)(a5[1] - a6[1])))
                                 + (float)(v25 * (float)(a4[1] - a5[1])))
                         / v22;
            v35.f32[v20++] = (float)((float)((float)(v24 * (float)(v28 - v26)) + (float)(v23 * (float)(v26 - v27)))
                                   + (float)(v25 * (float)(v27 - v28)))
                           / v22;
          }
          while (v20 != 3);
          __p[1] = v21;
          operator delete(v21);
          float32x4_t v18 = v35;
          float32x4_t v19 = v36;
        }
        float32x4_t v29 = vmulq_f32(v19, v19);
        v29.i32[3] = 0;
        float v30 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
        float32x4_t v31 = vmulq_f32(v18, v18);
        v31.i32[3] = 0;
        float v32 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
        float32x4_t v33 = vmulq_f32(v19, v18);
        v33.i32[3] = 0;
        v33.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33));
        float v34 = (float)(v33.f32[0] * (float)(v33.f32[0] * 4.0)) + (float)((float)(v30 - v32) * (float)(v30 - v32));
        if (v34 < 0.0) {
          cv3d::cv::gess::isochart::CalculateFaceLnStretch();
        }
        if ((float)((float)((float)(v30 + v32) + sqrtf(v34)) * 0.5) < 0.0) {
          cv3d::cv::gess::isochart::CalculateFaceLnStretch();
        }
      }
    }
  }
}

float cv3d::cv::gess::isochart::CalculateFaceSigL2Stretch(float *a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, float *a7)
{
  float result = 0.0;
  if (fabsf(*a4) >= 1.0e-16)
  {
    float v8 = *a5;
    if (*a5 >= 0.0 && fabsf(v8) >= 1.0e-16)
    {
      uint64_t __b = 0;
      uint64_t v12 = 0;
      cv3d::cv::gess::isochart::AffineIMTOn2D(a1, a2, a3, (float *)&__b, a6, a6 + 8, a6 + 16, a7, v8, v10);
      return (float)(*(float *)&__b + *(float *)&v12) * 0.5 * *a4;
    }
    else
    {
      return 3.4028e38;
    }
  }
  return result;
}

float cv3d::cv::gess::isochart::AffineIMTOn2D(float *a1, float *a2, float *a3, float *__b, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10)
{
  float v12 = fabsf(a9);
  if (v12 >= 1.0e-16)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    float v15 = 0.0;
    BOOL v16 = v12 > 1.0e-16;
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
    if (v16)
    {
      std::vector<float>::vector(__p, 3uLL);
      uint64_t v26 = 0;
      float v27 = (float *)__p[0];
      float v28 = a9 + a9;
      char v29 = 1;
      do
      {
        float v30 = *(float *)(a5 + 4 * v26);
        *float v27 = v30;
        float v31 = *(float *)(a6 + 4 * v26);
        v27[1] = v31;
        float v32 = *(float *)(a7 + 4 * v26);
        v27[2] = v32;
        float v33 = *a3;
        float v34 = *a2;
        float v35 = *a1;
        *((float *)&__p[-1] + v26) = (float)((float)((float)(v31 * (float)(a3[1] - a1[1]))
                                                   + (float)(v30 * (float)(a2[1] - a3[1])))
                                           + (float)(v32 * (float)(a1[1] - a2[1])))
                                   / v28;
        char v36 = v29;
        *((float *)&v37 + v26) = (float)((float)((float)(v31 * (float)(v35 - v33)) + (float)(v30 * (float)(v33 - v34)))
                                       + (float)(v32 * (float)(v34 - v35)))
                               / v28;
        uint64_t v26 = 1;
        char v29 = 0;
      }
      while ((v36 & 1) != 0);
      __p[1] = v27;
      operator delete(v27);
      float v18 = *((float *)&v38 + 1);
      float v19 = *(float *)&v38;
      float v15 = *((float *)&v37 + 1);
      float v17 = *(float *)&v37;
    }
    *a10 = (float)(v18 * v18) + (float)(v19 * v19);
    a10[1] = (float)(v18 * v15) + (float)(v19 * v17);
    a10[2] = (float)(v15 * v15) + (float)(v17 * v17);
    *uint64_t __b = (float)((float)((float)(v18 * v18) * a8[2]) + (float)((float)(v19 * v19) * *a8))
         + (float)((float)((float)(v19 + v19) * v18) * a8[1]);
    __b[2] = (float)((float)((float)(v15 * v15) * a8[2]) + (float)((float)(v17 * v17) * *a8))
           + (float)((float)((float)(v17 + v17) * v15) * a8[1]);
    float result = (float)((float)((float)(v18 * v15) * a8[2]) + (float)((float)(v19 * v17) * *a8))
           + (float)((float)((float)(v18 * v17) + (float)(v19 * v15)) * a8[1]);
    __b[1] = result;
  }
  else
  {
    memset_pattern16(__b, &unk_24F5786F0, 0xCuLL);
  }
  return result;
}

BOOL cv3d::cv::gess::isochart::MeasureTriMeshStretch(uint64_t a1, float *a2, float *a3, uint64_t a4, void *a5)
{
  if (*(void *)(a1 + 160) == *(void *)(a1 + 152)) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(void *)&long long v56 = 0;
  unsigned int v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v56, (unsigned __int8 *)__p);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  DWORD2(v56) = 0;
  *(void *)&long long v56 = 0;
  int v51 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v56, (unsigned __int8 *)__p);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  BOOL v8 = 0;
  if (v7 != -1 && v51 != -1)
  {
    *a3 = 0.0;
    *a2 = 0.0;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    unint64_t v9 = (uint64_t)(a5[1] - *a5) >> 2;
    if (v9 != (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2) {
      __assert_rtn("MeasureTriMeshStretch", "IsoChartUtils.cpp", 666, "f_stretchs.size() == mesh.FSize()");
    }
    *(void *)(a4 + 8) = *(void *)a4;
    std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::reserve((void **)a4, v9);
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v10 = 0;
      do
      {
        LODWORD(v56) = v10;
        float v11 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)&v56);
        float v58 = v11;
        LODWORD(v56) = v10;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v56, __p);
        LODWORD(v56) = v51;
        uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v56);
        uint64_t v13 = *(void *)(v12 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v12 + 48) - v13) >> 2) <= v10) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        LODWORD(v56) = v7;
        uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v56);
        float v15 = (unsigned int *)(v13 + 12 * v10);
        unint64_t v16 = *v15;
        uint64_t v17 = *(void *)(v14 + 40);
        if (v16 >= (*(void *)(v14 + 48) - v17) >> 3) {
          goto LABEL_44;
        }
        LODWORD(v56) = v7;
        uint64_t v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v56);
        unint64_t v19 = v15[1];
        uint64_t v20 = *(void *)(v18 + 40);
        if (v19 >= (*(void *)(v18 + 48) - v20) >> 3
          || (LODWORD(v56) = v7,
              uint64_t v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v56), v22 = v15[2], v23 = *(void *)(v21 + 40), v22 >= (*(void *)(v21 + 48) - v23) >> 3))
        {
LABEL_44:
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        float v24 = (float *)(v17 + 8 * v16);
        float v57 = fabsf((float)((float)((float)(*(float *)(v20 + 8 * v19) - *v24)* (float)(*(float *)(v23 + 8 * v22 + 4) - v24[1]))- (float)((float)(*(float *)(v20 + 8 * v19 + 4) - v24[1])* (float)(*(float *)(v23 + 8 * v22) - *v24)))* 0.5);
        long long v56 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
        long long v55 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 1));
        long long v54 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 2));
        v61[0] = v7;
        uint64_t v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v61);
        unint64_t v26 = *v15;
        uint64_t v27 = *(void *)(v25 + 40);
        if (v26 >= (*(void *)(v25 + 48) - v27) >> 3) {
          goto LABEL_45;
        }
        v61[0] = v7;
        uint64_t v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v61);
        unint64_t v29 = v15[1];
        uint64_t v30 = *(void *)(v28 + 40);
        if (v29 >= (*(void *)(v28 + 48) - v30) >> 3
          || (v61[0] = v7,
              uint64_t v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v61), v32 = v15[2], v33 = *(void *)(v31 + 40), v32 >= (*(void *)(v31 + 48) - v33) >> 3))
        {
LABEL_45:
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        cv3d::cv::gess::isochart::CalculateFaceL2Stretch((uint64_t)&v56, (uint64_t)&v55, (uint64_t)&v54, (float *)(v27 + 8 * v26), (float *)(v30 + 8 * v29), (float *)(v33 + 8 * v32), &v58, &v57);
        float v35 = v34;
        if (v34 >= 3.4028e38)
        {
          *a3 = v11 + *a3;
        }
        else
        {
          uint64_t v37 = *(float **)(a4 + 8);
          unint64_t v36 = *(void *)(a4 + 16);
          if ((unint64_t)v37 >= v36)
          {
            float v39 = *(float **)a4;
            uint64_t v40 = ((uint64_t)v37 - *(void *)a4) >> 3;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = v36 - (void)v39;
            if (v42 >> 2 > v41) {
              unint64_t v41 = v42 >> 2;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4 + 16, v43);
              float v39 = *(float **)a4;
              uint64_t v37 = *(float **)(a4 + 8);
            }
            else
            {
              int v44 = 0;
            }
            uint64_t v45 = (float *)&v44[8 * v40];
            float *v45 = v35;
            v45[1] = v11;
            uint64_t v46 = v45;
            if (v37 != v39)
            {
              do
              {
                uint64_t v47 = *((void *)v37 - 1);
                v37 -= 2;
                *((void *)v46 - 1) = v47;
                v46 -= 2;
              }
              while (v37 != v39);
              float v39 = *(float **)a4;
            }
            uint64_t v38 = v45 + 2;
            *(void *)a4 = v46;
            *(void *)(a4 + 8) = v45 + 2;
            *(void *)(a4 + 16) = &v44[8 * v43];
            if (v39)
            {
              operator delete(v39);
              float v11 = v58;
            }
          }
          else
          {
            *uint64_t v37 = v34;
            v37[1] = v11;
            uint64_t v38 = v37 + 2;
          }
          *(void *)(a4 + 8) = v38;
        }
        *a2 = v11 + *a2;
        *(float *)(*a5 + 4 * v10++) = v35;
      }
      while (v10 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
    }
    unint64_t v48 = *(void *)(a4 + 8);
    BOOL v8 = v48 != *(void *)a4;
    if (v48 != *(void *)a4) {
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*,false>(*(void *)a4, v48, 126 - 2 * __clz((uint64_t)(v48 - *(void *)a4) >> 3), 1);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return v8;
}

void sub_24F51336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::isochart *this, const cv3d::cv::gess::mesh::TriMesh *a2, float *a3, float *a4, float *a5, float *a6)
{
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<float>::vector(__p, (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2);
  float v30 = 0.0;
  float v29 = 0.0;
  BOOL v11 = cv3d::cv::gess::isochart::MeasureTriMeshStretch((uint64_t)this, &v30, &v29, (uint64_t)&v26, __p);
  if (v11)
  {
    uint64_t v12 = (char *)v26;
    unint64_t v13 = (v27 - (unsigned char *)v26) >> 3;
    unint64_t v14 = v13 - v13 / 0x1388;
    if (v14 <= 1) {
      __assert_rtn("MeasureTriMeshStretch", "IsoChartUtils.cpp", 709, "statistic_avg_count > 1");
    }
    *(_DWORD *)a2 = *((_DWORD *)v26 + 2 * v14 - 2);
    unint64_t v15 = v13 / 0x1388;
    *a4 = *(float *)&v12[(4 * v14) & 0xFFFFFFFFFFFFFFF8];
    *a3 = 0.0;
    if (v13 / 0x1388 < v14)
    {
      unint64_t v16 = v13 - 2 * v15;
      uint64_t v17 = (float *)&v12[8 * v15 + 4];
      float v18 = 0.0;
      float v19 = 0.0;
      do
      {
        float v19 = v19 + (float)(*(v17 - 1) * *v17);
        *a3 = v19;
        float v20 = *v17;
        v17 += 2;
        float v18 = v18 + v20;
        --v16;
      }
      while (v16);
      if (v18 > 0.0) {
        *a3 = v19 / v18;
      }
    }
    float v21 = v30;
    double v22 = v30 * 0.01;
    float v23 = *(float *)a2 / v22;
    *(float *)a2 = v23;
    *(float *)&double v22 = *a3 / v22;
    *a3 = *(float *)&v22;
    *a5 = v29 / v21;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  return v11;
}

void sub_24F513588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(uint64_t a1, unint64_t *a2, void *a3, float *a4)
{
  if (*(void *)(a1 + 160) == *(void *)(a1 + 152)) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v76, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v74 = 0;
  unsigned int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v74, (unsigned __int8 *)v76);
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v76, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v75) = 0;
  uint64_t v74 = 0;
  uint64_t v68 = (uint64_t *)(a1 + 56);
  int v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v74, (unsigned __int8 *)v76);
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  if (v6 == -1) {
    return 0;
  }
  if (v7 == -1)
  {
    LODWORD(v76[0]) = v6;
    uint64_t v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)v76);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) != (uint64_t)(*(void *)(a1 + 112)
                                                                                    - *(void *)(a1 + 104)) >> 2)
      cv3d::cv::gess::isochart::MeasureTriMeshLnStretch();
  }
  std::vector<float>::vector(v76, (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  std::vector<float>::vector(&v74, (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (*(void *)(a1 + 160) == *(void *)(a1 + 152)) {
    goto LABEL_53;
  }
  uint64_t v65 = a2;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  float v11 = 0.0;
  float v12 = 0.0;
  int v69 = v7;
  do
  {
    if (v7 == -1)
    {
      LODWORD(v72) = v10;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v72, __p);
      unint64_t v15 = (unsigned int *)__p[0];
    }
    else
    {
      LODWORD(v72) = v7;
      uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v68, (unsigned int *)&v72);
      uint64_t v14 = *(void *)(v13 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v13 + 48) - v14) >> 2) <= v10) {
        goto LABEL_61;
      }
      unint64_t v15 = (unsigned int *)(v14 + v9);
    }
    unint64_t v16 = v15[2];
    unint64_t v17 = v15[1];
    unint64_t v18 = *v15;
    LODWORD(v72) = v6;
    uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v72);
    uint64_t v20 = *(void *)(v19 + 40);
    if (v18 >= (*(void *)(v19 + 48) - v20) >> 3
      || (LODWORD(v72) = v6,
          uint64_t v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v72), v22 = *(void *)(v21 + 40), v17 >= (*(void *)(v21 + 48) - v22) >> 3)|| (LODWORD(v72) = v6, v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v72), v24 = *(void *)(v23 + 40), v16 >= (*(void *)(v23 + 48) - v24) >> 3))
    {
LABEL_61:
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    }
    uint64_t v25 = (float *)(v20 + 8 * v18);
    *((float *)v76[0] + v10) = fabsf((float)((float)((float)(*(float *)(v22 + 8 * v17) - *v25)* (float)(*(float *)(v24 + 8 * v16 + 4) - v25[1]))- (float)((float)(*(float *)(v22 + 8 * v17 + 4) - v25[1])* (float)(*(float *)(v24 + 8 * v16) - *v25)))* 0.5);
    LODWORD(v72) = v10;
    float v26 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)&v72);
    uint64_t v27 = (float *)v74;
    *((float *)v74 + v10) = v26;
    float v11 = v11 + v27[v10];
    float v12 = v12 + *((float *)v76[0] + v10++);
    uint64_t v29 = *(void *)(a1 + 152);
    uint64_t v28 = *(void *)(a1 + 160);
    v9 += 12;
    int v7 = v69;
  }
  while (v10 < (v28 - v29) >> 2);
  if (v11 < 1.0e-16) {
    goto LABEL_53;
  }
  float v30 = sqrtf(v12 / v11);
  float v31 = 0.0;
  if ((float)(v12 / v11) >= 0.0) {
    float v31 = v30;
  }
  *a4 = v31;
  unint64_t v32 = v65;
  if (v28 != v29)
  {
    unint64_t v33 = 0;
    do
    {
      LODWORD(v72) = v33;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v72, __p);
      if (v69 == -1)
      {
        LODWORD(v72) = v33;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v72, __p);
        uint64_t v37 = (unsigned int *)__p[0];
        unint64_t v36 = (unsigned int *)__p[0];
      }
      else
      {
        LODWORD(v72) = v69;
        uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v68, (unsigned int *)&v72);
        uint64_t v35 = *(void *)(v34 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v34 + 48) - v35) >> 2) <= v33) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        unint64_t v36 = (unsigned int *)(v35 + 12 * v33);
        uint64_t v37 = (unsigned int *)__p[0];
      }
      unint64_t v39 = v36[1];
      unint64_t v38 = v36[2];
      unint64_t v40 = *v36;
      long long v72 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v37);
      long long v71 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 1));
      long long v70 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 2));
      v78[0] = v6;
      uint64_t v41 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v78);
      uint64_t v42 = *(void *)(v41 + 40);
      if (v40 >= (*(void *)(v41 + 48) - v42) >> 3
        || (v78[0] = v6,
            v43 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v78), uint64_t v44 = *(void *)(v43 + 40), v39 >= (*(void *)(v43 + 48) - v44) >> 3)|| (v78[0] = v6, v45 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v78), v46 = *(void *)(v45 + 40), v38 >= (*(void *)(v45 + 48) - v46) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      cv3d::cv::gess::isochart::CalculateFaceLnStretch((uint64_t)&v72, (uint64_t)&v71, (uint64_t)&v70, (float *)(v42 + 8 * v40), (float *)(v44 + 8 * v39), (float *)(v46 + 8 * v38), (float *)v74 + v33, (float *)v76[0] + v33);
      float v48 = v47;
      unint64_t v32 = v65;
      if (v47 < 3.4028e38)
      {
        int v49 = *((_DWORD *)v74 + v33);
        int v51 = (float *)v65[1];
        unint64_t v50 = v65[2];
        if ((unint64_t)v51 >= v50)
        {
          uint64_t v53 = (float *)*v65;
          uint64_t v54 = (uint64_t)((uint64_t)v51 - *v65) >> 3;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = v50 - (void)v53;
          if (v56 >> 2 > v55) {
            unint64_t v55 = v56 >> 2;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            float v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v65 + 2), v57);
            uint64_t v53 = (float *)*v65;
            int v51 = (float *)v65[1];
          }
          else
          {
            float v58 = 0;
          }
          uint64_t v59 = &v58[8 * v54];
          *(float *)uint64_t v59 = v48;
          *((_DWORD *)v59 + 1) = v49;
          char v60 = v59;
          if (v51 != v53)
          {
            do
            {
              uint64_t v61 = *((void *)v51 - 1);
              v51 -= 2;
              *((void *)v60 - 1) = v61;
              v60 -= 8;
            }
            while (v51 != v53);
            uint64_t v53 = (float *)*v65;
          }
          uint64_t v52 = v59 + 8;
          *uint64_t v65 = (unint64_t)v60;
          v65[1] = (unint64_t)(v59 + 8);
          v65[2] = (unint64_t)&v58[8 * v57];
          if (v53) {
            operator delete(v53);
          }
        }
        else
        {
          float *v51 = v47;
          *((_DWORD *)v51 + 1) = v49;
          uint64_t v52 = v51 + 2;
        }
        v65[1] = (unint64_t)v52;
      }
      *(float *)(*a3 + 4 * v33++) = v48;
    }
    while (v33 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  }
  unint64_t v62 = v32[1];
  if (v62 == *v32)
  {
LABEL_53:
    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v63 = 1;
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*,false>(*v32, v62, 126 - 2 * __clz((uint64_t)(v62 - *v32) >> 3), 1);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v74)
  {
    unint64_t v75 = v74;
    operator delete(v74);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  return v63;
}

void sub_24F513C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  float v30 = *(void **)(v28 - 152);
  if (v30)
  {
    *(void *)(v28 - 144) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::VisualizeVertexStretch(uint64_t a1, float *a2, _DWORD *a3)
{
  uint64_t v41 = 0;
  unint64_t v38 = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  std::vector<float>::vector(v37, (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  int v36 = 0;
  if (!*a3)
  {
    if (cv3d::cv::gess::isochart::MeasureTriMeshStretch(a1, (float *)&v41 + 1, (float *)&v41, (uint64_t)&v38, v37)) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v20 = 0;
    goto LABEL_36;
  }
  if (!cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(a1, (unint64_t *)&v38, v37, (float *)&v36))goto LABEL_20; {
LABEL_3:
  }
  unint64_t v6 = ((v39 - (unsigned char *)v38) >> 3) - ((v39 - (unsigned char *)v38) >> 3) / 0x1388uLL;
  if (v6 < 2) {
    __assert_rtn("VisualizeVertexStretch", "IsoChartUtils.cpp", 810, "statistic_avg_count > 1");
  }
  float v7 = *((float *)v38 + 2 * v6 - 2);
  unint64_t v8 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
  LODWORD(v32) = 0;
  std::vector<float>::vector(&v34, v8, &v32);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v32, 3uLL);
  if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
  {
    unint64_t v9 = 0;
    do
    {
      if (*((float *)v37[0] + v9) <= v7)
      {
        LODWORD(__p[0]) = v9;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)__p, &v32);
        unint64_t v10 = (int *)v32;
        float v11 = v33;
        if (v32 != v33)
        {
          float v12 = (float *)v37[0];
          uint64_t v13 = (float *)v34;
          do
          {
            int v14 = *v10++;
            v13[v14] = v12[v9] + v13[v14];
          }
          while (v10 != v11);
        }
      }
      ++v9;
    }
    while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  }
  unint64_t v15 = (float *)v34;
  if (v34 == v35)
  {
    float v17 = 3.4028e38;
    float v16 = -3.4028e38;
  }
  else
  {
    float v16 = -3.4028e38;
    float v17 = 3.4028e38;
    do
    {
      float v18 = *v15++;
      float v19 = v18;
      if (v16 < v18) {
        float v16 = v19;
      }
      if (v17 > v19) {
        float v17 = v19;
      }
    }
    while (v15 != v35);
  }
  int v31 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  v42[0] = 0;
  v42[1] = 0;
  int v21 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v42, (unsigned __int8 *)__p);
  int v31 = v21;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (v21 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v31, (long long *)__p);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
  {
    unint64_t v22 = 0;
    float v23 = v16 - v17;
    do
    {
      float v28 = powf((float)(*((float *)v34 + v22) - v17) / v23, *a2);
      LODWORD(__p[0]) = v31;
      uint64_t v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
      uint64_t v25 = *(void *)(v24 + 40);
      if (v22 >= (*(void *)(v24 + 48) - v25) >> 4) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      HIDWORD(v26) = 0;
      *(void *)&long long v26 = LODWORD(v28);
      *((float *)&v26 + 2) = 1.0 - v28;
      *(_OWORD *)(v25 + 16 * v22++) = v26;
    }
    while (v22 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  }
  if (v32)
  {
    unint64_t v33 = (int *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  uint64_t v20 = 1;
LABEL_36:
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
  return v20;
}

void sub_24F51403C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::MeetLnStretchCriteria(cv3d::cv::gess::isochart *this, const cv3d::cv::gess::mesh::TriMesh *a2)
{
  float v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::vector<float>::vector(&__p, (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2);
  float v9 = 0.0;
  if (cv3d::cv::gess::isochart::MeasureTriMeshLnStretch((uint64_t)this, (unint64_t *)&v12, &__p, &v9))
  {
    if (__p == v11)
    {
      float v6 = 0.0;
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = (float *)__p;
      do
      {
        float v5 = *v4++;
        if (v5 > (float)(v9 * 200000000.0)) {
          ++v3;
        }
      }
      while (v4 != v11);
      float v6 = (float)v3;
    }
    BOOL v7 = (float)((float)(unint64_t)((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2) * 0.01) > v6;
    if (__p) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v7 = 0;
    if (__p)
    {
LABEL_12:
      float v11 = __p;
      operator delete(__p);
    }
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  return v7;
}

void sub_24F5141D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::MeasureUvUtilization(uint64_t a1, void *a2, unint64_t a3, float *a4)
{
  unint64_t result = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
  if (result)
  {
    unint64_t result = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
    if (result)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      float v11 = 0.0;
      do
      {
        uint64_t v12 = a2[5];
        if (0xAAAAAAAAAAAAAAABLL * ((a2[6] - v12) >> 2) <= v10) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        unint64_t v13 = *(unsigned int *)(v12 + v9);
        uint64_t v14 = *(void *)(a1 + 40);
        unint64_t v15 = (*(void *)(a1 + 48) - v14) >> 3;
        if (v15 <= v13) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        uint64_t v16 = v12 + v9;
        unint64_t v17 = *(unsigned int *)(v12 + v9 + 4);
        if (v15 <= v17) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        unint64_t v18 = *(unsigned int *)(v16 + 8);
        if (v15 <= v18) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        float v19 = (float *)(v14 + 8 * v13);
        float v11 = v11
            + fabsf((float)((float)((float)(*(float *)(v14 + 8 * v17) - *v19)* (float)(*(float *)(v14 + 8 * v18 + 4) - v19[1]))- (float)((float)(*(float *)(v14 + 8 * v17 + 4) - v19[1])* (float)(*(float *)(v14 + 8 * v18) - *v19)))* 0.5);
        ++v10;
        unint64_t result = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
        v9 += 12;
      }
      while (v10 < result);
    }
    else
    {
      float v11 = 0.0;
    }
    *a4 = v11 / (float)a3;
  }
  return result;
}

unint64_t cv3d::cv::gess::isochart::MeasureUvUtilization(unint64_t this, const cv3d::cv::gess::mesh::TriMesh *a2, float *a3)
{
  if (*(void *)(this + 160) != *(void *)(this + 152))
  {
    uint64_t v4 = this;
    int v14 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    float v5 = (uint64_t *)(v4 + 80);
    uint64_t v15 = 0;
    int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v4 + 80), (uint64_t)&v15, (unsigned __int8 *)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    int v16 = 0;
    uint64_t v15 = 0;
    int v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v4 + 56), (uint64_t)&v15, (unsigned __int8 *)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v4, &v14, (unsigned __int8 *)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v6 == -1) {
      cv3d::cv::gess::isochart::MeasureUvUtilization();
    }
    if (v7 == -1) {
      cv3d::cv::gess::isochart::MeasureUvUtilization();
    }
    if (v14 == -1) {
      cv3d::cv::gess::isochart::MeasureUvUtilization();
    }
    LODWORD(__p[0]) = v6;
    uint64_t v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v4 + 80), (unsigned int *)__p);
    LODWORD(__p[0]) = v7;
    uint64_t v9 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(v4 + 56), (unsigned int *)__p);
    LODWORD(__p[0]) = v14;
    uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v5, (unsigned int *)__p);
    unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    return cv3d::cv::gess::isochart::MeasureUvUtilization(v8, v9, v11, (float *)a2);
  }
  return this;
}

void sub_24F514548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t cv3d::cv::gess::isochart::NormalizeMeshPosition(uint64_t a1, void *a2)
{
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a2, (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
  {
    unint64_t v5 = 0;
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v7.i64[0] = 0x80000000800000;
    v7.i64[1] = 0x80000000800000;
    do
    {
      float32x4_t v24 = v7;
      float32x4_t v26 = v6;
      unsigned int v28 = *(_DWORD *)(a1 + 176);
      uint64_t v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v28);
      uint64_t v9 = *(void *)(v8 + 40);
      if (v5 >= (*(void *)(v8 + 48) - v9) >> 4) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(_OWORD *)(*a2 + 16 * v5) = *(_OWORD *)(v9 + 16 * v5);
      unsigned int v28 = *(_DWORD *)(a1 + 176);
      uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v28);
      uint64_t v11 = *(void *)(v10 + 40);
      if (v5 >= (*(void *)(v10 + 48) - v11) >> 4) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      float32x4_t result = *(float32x4_t *)(v11 + 16 * v5);
      float32x4_t v6 = vminq_f32(v26, result);
      float32x4_t v7 = vmaxq_f32(v24, result);
      ++v5;
      uint64_t v13 = *(void *)(a1 + 104);
      uint64_t v12 = *(void *)(a1 + 112);
    }
    while (v5 < (v12 - v13) >> 2);
    if (v12 != v13)
    {
      unint64_t v14 = 0;
      v15.i64[0] = 0x3F0000003F000000;
      v15.i64[1] = 0x3F0000003F000000;
      float32x4_t v16 = vmulq_f32(vaddq_f32(v6, v7), v15);
      float32x4_t v17 = vsubq_f32(v7, v6);
      float v18 = v17.f32[1];
      if (v17.f32[0] >= v17.f32[1]) {
        float v18 = v17.f32[0];
      }
      v17.i32[0] = v17.i32[2];
      if (v18 >= v17.f32[2]) {
        v17.f32[0] = v18;
      }
      if (v17.f32[0] <= 0.0) {
        float v19 = 2.0;
      }
      else {
        float v19 = 2.0 / v17.f32[0];
      }
      float v25 = v19;
      float32x4_t v27 = v16;
      do
      {
        unsigned int v28 = *(_DWORD *)(a1 + 176);
        uint64_t v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v28);
        uint64_t v21 = *(void *)(v20 + 40);
        if (v14 >= (*(void *)(v20 + 48) - v21) >> 4) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        *(float32x4_t *)(v21 + 16 * v14) = vsubq_f32(*(float32x4_t *)(v21 + 16 * v14), v27);
        unsigned int v28 = *(_DWORD *)(a1 + 176);
        uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v28);
        uint64_t v23 = *(void *)(v22 + 40);
        if (v14 >= (*(void *)(v22 + 48) - v23) >> 4) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        float32x4_t result = vmulq_n_f32(*(float32x4_t *)(v23 + 16 * v14), v25);
        *(float32x4_t *)(v23 + 16 * v14++) = result;
      }
      while (v14 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::ExportFaceColorMap(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  if ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2 != (uint64_t)(a4[1] - *a4) >> 4) {
    cv3d::cv::gess::isochart::ExportFaceColorMap();
  }
  std::string::basic_string[abi:ne180100]<0>(v55, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  __p[0] = 0;
  int v51 = (uint64_t *)(a1 + 80);
  int v50 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)__p, (unsigned __int8 *)v55);
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  int v54 = -1;
  std::string::basic_string[abi:ne180100]<0>(v55, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v54, (unsigned __int8 *)v55);
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v55, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  uint64_t v8 = (uint64_t *)(a1 + 56);
  LODWORD(__p[1]) = 0;
  __p[0] = 0;
  int v48 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)__p, (unsigned __int8 *)v55);
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v55, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(__p[0]) = 0;
  int v49 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)__p, (unsigned __int8 *)v55);
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  LODWORD(v55[0]) = v54;
  uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v51, (unsigned int *)v55);
  unint64_t v10 = (*(unsigned __int16 (**)(uint64_t))(*(void *)v9 + 16))(v9);
  std::vector<std::shared_ptr<cv3d::cv::gess::util::Image>>::vector(v55, v10);
  if (v10) {
    operator new[]();
  }
  if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
  {
    unint64_t v11 = 0;
    float v12 = (float)a5;
    uint64_t v13 = 0xFFFFFFFFLL;
    unsigned int v47 = a5;
    uint64_t v45 = (uint64_t *)(a1 + 56);
    uint64_t v46 = a1;
    do
    {
      LODWORD(v52.__r_.__value_.__l.__data_) = v49;
      uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(v8, (unsigned int *)&v52);
      uint64_t v15 = *(void *)(v14 + 40);
      if (v11 >= (*(void *)(v14 + 48) - v15) >> 1) {
LABEL_48:
      }
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      if ((int)v13 < *(unsigned __int16 *)(v15 + 2 * v11))
      {
        LODWORD(v52.__r_.__value_.__l.__data_) = v49;
        uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(v8, (unsigned int *)&v52);
        uint64_t v17 = *(void *)(v16 + 40);
        if (v11 >= (*(void *)(v16 + 48) - v17) >> 1) {
          goto LABEL_48;
        }
        uint64_t v13 = *(unsigned __int16 *)(v17 + 2 * v11);
      }
      LODWORD(v52.__r_.__value_.__l.__data_) = v48;
      uint64_t v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v8, (unsigned int *)&v52);
      uint64_t v19 = *(void *)(v18 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v18 + 48) - v19) >> 2) <= v11) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      std::vector<cv3d::cv::gess::math::Vector2T<int>>::vector(__p, 3uLL);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unsigned int v22 = 0;
      unsigned int v23 = 0;
      uint64_t v24 = v19 + 12 * v11;
      unsigned int v25 = -1;
      unsigned int v26 = -1;
      do
      {
        LODWORD(v52.__r_.__value_.__l.__data_) = v50;
        uint64_t v27 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v51, (unsigned int *)&v52);
        unint64_t v28 = *(unsigned int *)(v24 + 4 * v21);
        uint64_t v29 = *(void *)(v27 + 40);
        if (v28 >= (*(void *)(v27 + 48) - v29) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        float v30 = *(float *)(v29 + 8 * v28);
        LODWORD(v52.__r_.__value_.__l.__data_) = v50;
        uint64_t v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v51, (unsigned int *)&v52);
        unint64_t v32 = *(unsigned int *)(v24 + 4 * v21);
        uint64_t v33 = *(void *)(v31 + 40);
        if (v32 >= (*(void *)(v31 + 48) - v33) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        unsigned int v34 = (int)(float)(v30 * v12);
        unsigned int v35 = (int)(float)(*(float *)(v33 + 8 * v32 + 4) * v12);
        int v36 = __p[0];
        uint64_t v37 = (unsigned int *)((char *)__p[0] + v20);
        *uint64_t v37 = v34;
        v37[1] = v35;
        if (v34 < v26) {
          unsigned int v26 = (int)(float)(v30 * v12);
        }
        if (v35 < v25) {
          unsigned int v25 = v35;
        }
        if (v23 <= v34) {
          unsigned int v23 = (int)(float)(v30 * v12);
        }
        if (v22 <= v35) {
          unsigned int v22 = v35;
        }
        ++v21;
        v20 += 8;
      }
      while (v21 != 3);
      if (v23 <= v26) {
        goto LABEL_43;
      }
      int v38 = (v22 - v25) * (v23 - v26);
      do
      {
        unsigned int v39 = v25;
        if (v22 > v25)
        {
          do
          {
            unint64_t v40 = 0;
            int v41 = 0;
            uint64_t v42 = (char *)__p[0] + 4;
            do
            {
              unint64_t v43 = v40 - 2;
              if (v40 < 2) {
                unint64_t v43 = v40 + 1;
              }
              v41 += (int)fabs((double)(int)((*((_DWORD *)__p[0] + 2 * v43) - v26) * (v39 - *v42)
                                           + (*((_DWORD *)__p[0] + 2 * v43 + 1) - v39) * (*(v42 - 1) - v26)));
              v42 += 2;
              ++v40;
            }
            while (v40 != 3);
            if (v41 <= v38)
            {
              uint64_t v44 = (unsigned char *)(*(void *)(*((void *)v55[0] + 2 * v13) + 16)
                            + (v26 + *(_DWORD *)(*((void *)v55[0] + 2 * v13) + 4) * (~v39 + v47))
                            * *(_DWORD *)(*((void *)v55[0] + 2 * v13) + 12));
              *uint64_t v44 = (int)(*(float *)(*a4 + 16 * v11) * 255.999);
              v44[1] = (int)(*(float *)(*a4 + 16 * v11 + 4) * 255.999);
              v44[2] = (int)(*(float *)(*a4 + 16 * v11 + 8) * 255.999);
            }
            ++v39;
          }
          while (v39 != v22);
        }
        ++v26;
      }
      while (v26 != v23);
      int v36 = __p[0];
      if (__p[0])
      {
LABEL_43:
        __p[1] = v36;
        operator delete(v36);
      }
      ++v11;
      uint64_t v8 = v45;
    }
    while (v11 < (uint64_t)(*(void *)(v46 + 160) - *(void *)(v46 + 152)) >> 2);
  }
  __p[0] = v55;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_24F514E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v43 - 121) < 0) {
    operator delete(*(void **)(v43 - 144));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  unint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

float32x4_t *cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, void *a4, uint64_t a5, float *a6, int32x4_t *a7, float32x4_t *a8)
{
  *(float32x4_t *)a7 = vsubq_f32(*a2, *result);
  int32x4_t v8 = (int32x4_t)vsubq_f32(*a3, *result);
  *a8 = (float32x4_t)v8;
  float32x4_t v9 = *(float32x4_t *)a7;
  float32x4_t v10 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL), v8), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL)), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(v8, (int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL)), v8), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), *a7));
  float32x4_t v11 = vmulq_f32(v10, v10);
  v11.i32[3] = 0;
  float32x4_t v12 = vpaddq_f32(v11, v11);
  float32x4_t v13 = vpaddq_f32(v12, v12);
  float32x4_t v14 = (float32x4_t)xmmword_24F570A10;
  int32x4_t v15 = (int32x4_t)xmmword_24F570A10;
  if (v13.f32[0] > 0.0) {
    int32x4_t v15 = (int32x4_t)vdivq_f32(v10, vsqrtq_f32(v13));
  }
  float32x4_t v16 = vmulq_f32(v9, v9);
  v16.i32[3] = 0;
  float32x4_t v17 = vpaddq_f32(v16, v16);
  float32x4_t v18 = vpaddq_f32(v17, v17);
  int32x4_t v19 = (int32x4_t)xmmword_24F570A10;
  if (v18.f32[0] > 0.0) {
    int32x4_t v19 = (int32x4_t)vdivq_f32(v9, vsqrtq_f32(v18));
  }
  *a7 = v19;
  float32x4_t v20 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v15, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), v15), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL), v19)), (float32x4_t)vzip2q_s32(vzip1q_s32(v19, (int32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL)), v19), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), v15));
  float32x4_t v21 = vmulq_f32(v20, v20);
  v21.i32[3] = 0;
  float32x4_t v22 = vpaddq_f32(v21, v21);
  float32x4_t v23 = vpaddq_f32(v22, v22);
  if (v23.f32[0] > 0.0) {
    float32x4_t v14 = vdivq_f32(v20, vsqrtq_f32(v23));
  }
  *a8 = v14;
  *a4 = 0;
  float32x4_t v24 = vmulq_f32(vsubq_f32(*a2, *result), *(float32x4_t *)a7);
  v24.i32[3] = 0;
  *(float *)a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24));
  *(_DWORD *)(a5 + 4) = 0;
  float32x4_t v25 = vsubq_f32(*a3, *result);
  float32x4_t v26 = vmulq_f32(v25, *(float32x4_t *)a7);
  v26.i32[3] = 0;
  float32x4_t v27 = vmulq_f32(v25, *a8);
  v27.i32[3] = 0;
  *a6 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26));
  a6[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27));
  float32x4_t v28 = vsubq_f32(*a3, *a2);
  float32x4_t v29 = vmulq_f32(v28, v28);
  v29.i32[3] = 0;
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)) < 1.0e-16) {
    a6[1] = 0.0;
  }
  return result;
}

uint64_t cv3d::cv::gess::isochart::CheckAndRepairSelfIntersectionForChartedMesh(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v46.__end_) = 0;
  v46.__begin_ = 0;
  int v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v46, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  if (v3 == -1) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v46.__begin_) = 0;
  unsigned int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(this + 7, (uint64_t)&v46, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  int v48 = -1;
  if (v4 == -1) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v5 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v48, (unsigned __int8 *)&__p);
  BOOL v6 = v5;
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
  {
    operator delete(__p.__begin_);
    if (!v6) {
      return 0;
    }
  }
  else if (!v5)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v46.__begin_ = 0;
  int v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(this + 10, (uint64_t)&v46, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  if (v7 == -1) {
    return 0;
  }
  v47[0] = v48;
  v47[1] = v4;
  v47[2] = v3;
  v47[3] = v7;
  LODWORD(v46.__begin_) = v48;
  uint64_t v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)&v46);
  std::vector<unsigned int>::size_type v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  std::vector<unsigned int>::vector(&__p, v9);
  if (this[20] != this[19])
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    int v12 = 0;
    do
    {
      if (v12 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>((uint64_t)this, v4, v10)) {
        __p.__begin_[v12++] = v11;
      }
      unsigned int v10 = ++v11;
    }
    while (v11 < (unint64_t)(((char *)this[20] - (char *)this[19]) >> 2));
  }
  std::vector<int>::pointer end = __p.__end_;
  if (__p.__end_ != __p.__begin_)
  {
    unint64_t v14 = 0;
    unsigned int v15 = 0;
    char v16 = 0;
    unint64_t v17 = __p.__end_ - __p.__begin_;
    std::vector<int>::pointer end = __p.__begin_;
    do
    {
      LODWORD(v45.__begin_) = 0;
      unsigned int v18 = end[v14];
      LODWORD(v45.__begin_) = v18;
      if (v17 - 1 <= v14) {
        unint64_t v19 = (unint64_t)((char *)this[20] - (char *)this[19]) >> 2;
      }
      else {
        LODWORD(v19) = end[v15 + 1];
      }
      std::vector<cv3d::cv::gess::mesh::FaceHandle>::vector(&v46, v19 - v18);
      begiuint64_t n = v45.__begin_;
      if (LODWORD(v45.__begin_) < v19)
      {
        do
        {
          v46.__begin_[begin - LODWORD(v45.__begin_)] = begin;
          ++begin;
        }
        while (v19 != begin);
      }
      int v22 = cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart((uint64_t)this, (uint64_t *)&v46, v47);
      if (v22)
      {
        unsigned int v50 = v19 - 1;
        cv3d::cv::gess::alg::SortFaceByGroupID32Bit((cv3d::cv::gess::alg *)this, (cv3d::cv::gess::mesh::TriMesh *)&v45, &v50, v21);
      }
      if (v46.__begin_)
      {
        v46.__end_ = v46.__begin_;
        operator delete(v46.__begin_);
      }
      v16 |= v22;
      std::vector<int>::pointer end = __p.__begin_;
      unint64_t v17 = __p.__end_ - __p.__begin_;
      unint64_t v14 = ++v15;
    }
    while (v17 > v15);
    if (v16)
    {
      LODWORD(v46.__begin_) = v47[0];
      uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)&v46);
      std::vector<unsigned int>::size_type v24 = (*(unsigned int (**)(uint64_t))(*(void *)v23 + 16))(v23);
      std::vector<unsigned int>::vector(&v46, v24);
      if (this[20] != this[19])
      {
        unint64_t v25 = 0;
        int v26 = 0;
        unsigned int v27 = -1;
        unsigned int v28 = 1;
        do
        {
          LODWORD(v45.__begin_) = v4;
          uint64_t v29 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)&v45);
          uint64_t v30 = *(void *)(v29 + 40);
          if (v25 >= (*(void *)(v29 + 48) - v30) >> 2) {
LABEL_58:
          }
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          if (v27 != *(_DWORD *)(v30 + 4 * v25))
          {
            LODWORD(v45.__begin_) = v4;
            uint64_t v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)&v45);
            uint64_t v32 = *(void *)(v31 + 40);
            if (v25 >= (*(void *)(v31 + 48) - v32) >> 2) {
              goto LABEL_58;
            }
            unsigned int v27 = *(_DWORD *)(v32 + 4 * v25);
            v46.__begin_[v26++] = v27;
          }
          unint64_t v25 = v28++;
        }
        while (v25 < ((char *)this[20] - (char *)this[19]) >> 2);
      }
      std::vector<unsigned int>::vector(&v45, v24);
      if (v24)
      {
        uint64_t v33 = 0;
        std::vector<unsigned int>::pointer v34 = v46.__begin_;
        std::vector<unsigned int>::pointer v35 = v45.__begin_;
        do
        {
          v35[v34[v33]] = v33;
          ++v33;
        }
        while (v24 != v33);
      }
      if (this[20] != this[19])
      {
        unint64_t v36 = 0;
        unsigned int v37 = 1;
        do
        {
          unsigned int v50 = v4;
          uint64_t v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, &v50);
          uint64_t v39 = *(void *)(v38 + 40);
          if (v36 >= (*(void *)(v38 + 48) - v39) >> 2) {
LABEL_59:
          }
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          uint64_t v40 = *(unsigned int *)(v39 + 4 * v36);
          unsigned int v41 = v45.__begin_[v40];
          if (v41 != v40)
          {
            unsigned int v50 = v4;
            uint64_t v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, &v50);
            uint64_t v43 = *(void *)(v42 + 40);
            if (v36 >= (*(void *)(v42 + 48) - v43) >> 2) {
              goto LABEL_59;
            }
            *(_DWORD *)(v43 + 4 * v36) = v41;
          }
          unint64_t v36 = v37++;
        }
        while (v36 < ((char *)this[20] - (char *)this[19]) >> 2);
      }
      if (v45.__begin_)
      {
        v45.__end_ = v45.__begin_;
        operator delete(v45.__begin_);
      }
      if (v46.__begin_)
      {
        v46.__end_ = v46.__begin_;
        operator delete(v46.__begin_);
      }
      std::vector<int>::pointer end = __p.__begin_;
    }
  }
  if (end)
  {
    __p.__end_ = end;
    operator delete(end);
  }
  return 1;
}

void sub_24F5156AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float v40 = *(float *)(a2 - 8);
                float v41 = *(float *)v10;
                if (v40 < *(float *)v10)
                {
                  *(float *)unint64_t v10 = v40;
                  *(float *)(a2 - 8) = v41;
                  int v42 = *(_DWORD *)(v10 + 4);
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v42;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v10, (float *)(v10 + 8), (float *)(a2 - 8));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v10, v10 + 8, v10 + 16, a2 - 8);
                break;
              case 5uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v10, v10 + 8, v10 + 16, v10 + 24);
                float v43 = *(float *)(a2 - 8);
                float v44 = *(float *)(v10 + 24);
                if (v43 < v44)
                {
                  *(float *)(v10 + 24) = v43;
                  *(float *)(a2 - 8) = v44;
                  int v45 = *(_DWORD *)(v10 + 28);
                  *(_DWORD *)(v10 + 28) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v45;
                  float v46 = *(float *)(v10 + 24);
                  float v47 = *(float *)(v10 + 16);
                  if (v46 < v47)
                  {
                    int v48 = *(_DWORD *)(v10 + 20);
                    int v49 = *(_DWORD *)(v10 + 28);
                    *(float *)(v10 + 16) = v46;
                    *(_DWORD *)(v10 + 20) = v49;
                    *(float *)(v10 + 24) = v47;
                    *(_DWORD *)(v10 + 28) = v48;
                    float v50 = *(float *)(v10 + 8);
                    if (v46 < v50)
                    {
                      int v51 = *(_DWORD *)(v10 + 12);
                      *(float *)(v10 + 8) = v46;
                      *(_DWORD *)(v10 + 12) = v49;
                      *(float *)(v10 + 16) = v50;
                      *(_DWORD *)(v10 + 20) = v51;
                      float v52 = *(float *)v10;
                      if (v46 < *(float *)v10)
                      {
                        int v53 = *(_DWORD *)(v10 + 4);
                        *(float *)unint64_t v10 = v46;
                        *(_DWORD *)(v10 + 4) = v49;
                        *(float *)(v10 + 8) = v52;
                        *(_DWORD *)(v10 + 12) = v53;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 191)
          {
            unint64_t v54 = v10 + 8;
            BOOL v56 = v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  float v60 = *(float *)(v58 + 8);
                  float v61 = *(float *)v58;
                  if (v60 < *(float *)v58)
                  {
                    int v62 = *(_DWORD *)(v58 + 12);
                    uint64_t v63 = v57;
                    while (1)
                    {
                      uint64_t v64 = v10 + v63;
                      int v65 = *(_DWORD *)(v10 + v63 + 4);
                      *(float *)(v64 + 8) = v61;
                      *(_DWORD *)(v64 + 12) = v65;
                      if (!v63) {
                        break;
                      }
                      float v61 = *(float *)(v64 - 8);
                      v63 -= 8;
                      if (v60 >= v61)
                      {
                        uint64_t v66 = v10 + v63 + 8;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v10;
LABEL_83:
                    *(float *)uint64_t v66 = v60;
                    *(_DWORD *)(v66 + 4) = v62;
                  }
                  unint64_t v54 = v59 + 8;
                  v57 += 8;
                  unint64_t v58 = v59;
                }
                while (v59 + 8 != a2);
              }
            }
            else if (!v56)
            {
              unint64_t v95 = (float *)(v10 + 12);
              do
              {
                unint64_t v96 = v54;
                float v97 = *(float *)(a1 + 8);
                float v98 = *(float *)a1;
                if (v97 < *(float *)a1)
                {
                  int v99 = *(_DWORD *)(a1 + 12);
                  int v100 = v95;
                  do
                  {
                    int v101 = v100;
                    *(v100 - 1) = v98;
                    int v102 = *((_DWORD *)v100 - 2);
                    v100 -= 2;
                    *(_DWORD *)int v101 = v102;
                    float v98 = *(v101 - 5);
                  }
                  while (v97 < v98);
                  *(v100 - 1) = v97;
                  *(_DWORD *)int v100 = v99;
                }
                unint64_t v54 = v96 + 8;
                v95 += 2;
                a1 = v96;
              }
              while (v96 + 8 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v67 = (v12 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  unint64_t v71 = v10 + 8 * v70;
                  if (2 * v69 + 2 < (uint64_t)v12 && *(float *)v71 < *(float *)(v71 + 8))
                  {
                    v71 += 8;
                    uint64_t v70 = 2 * v69 + 2;
                  }
                  unint64_t v72 = v10 + 8 * v69;
                  float v73 = *(float *)v71;
                  float v74 = *(float *)v72;
                  if (*(float *)v71 >= *(float *)v72)
                  {
                    int v75 = *(_DWORD *)(v72 + 4);
                    do
                    {
                      unsigned int v76 = (float *)v72;
                      unint64_t v72 = v71;
                      *unsigned int v76 = v73;
                      v76[1] = *(float *)(v71 + 4);
                      if (v67 < v70) {
                        break;
                      }
                      uint64_t v77 = 2 * v70;
                      uint64_t v70 = (2 * v70) | 1;
                      unint64_t v71 = v10 + 8 * v70;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(float *)v71 < *(float *)(v71 + 8))
                      {
                        v71 += 8;
                        uint64_t v70 = v78;
                      }
                      float v73 = *(float *)v71;
                    }
                    while (*(float *)v71 >= v74);
                    *(float *)unint64_t v72 = v74;
                    *(_DWORD *)(v72 + 4) = v75;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              uint64_t v79 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v80 = 0;
                float v82 = *(float *)v10;
                int v81 = *(_DWORD *)(v10 + 4);
                unint64_t v83 = (_DWORD *)v10;
                do
                {
                  uint64_t v84 = v83;
                  v83 += 2 * v80 + 2;
                  uint64_t v85 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v86 = v85 + 2;
                  if (v86 < v79 && *(float *)v83 < *((float *)v83 + 2))
                  {
                    v83 += 2;
                    uint64_t v80 = v86;
                  }
                  *uint64_t v84 = *v83;
                  v84[1] = v83[1];
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v83 == (_DWORD *)(a2 - 8))
                {
                  *(float *)unint64_t v83 = v82;
                  v83[1] = v81;
                }
                else
                {
                  _DWORD *v83 = *(_DWORD *)(a2 - 8);
                  v83[1] = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 8) = v82;
                  *(_DWORD *)(a2 - 4) = v81;
                  uint64_t v87 = (uint64_t)v83 - v10 + 8;
                  if (v87 >= 9)
                  {
                    unint64_t v88 = (((unint64_t)v87 >> 3) - 2) >> 1;
                    uint64_t v89 = (float *)(v10 + 8 * v88);
                    float v90 = *v89;
                    float v91 = *(float *)v83;
                    if (*v89 < *(float *)v83)
                    {
                      int v92 = v83[1];
                      do
                      {
                        unint64_t v93 = (float *)v83;
                        unint64_t v83 = v89;
                        *unint64_t v93 = v90;
                        v93[1] = v89[1];
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        uint64_t v89 = (float *)(v10 + 8 * v88);
                        float v90 = *v89;
                      }
                      while (*v89 < v91);
                      *(float *)unint64_t v83 = v91;
                      v83[1] = v92;
                    }
                  }
                }
                a2 -= 8;
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = (float *)(v10 + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8 * (v12 >> 1)), (float *)(a2 - 8));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8), v14 - 2, (float *)(a2 - 16));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v13), (float *)(a2 - 24));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(v14 - 2, v14, (float *)(a1 + 8 + 8 * v13));
            uint64_t v15 = *(void *)a1;
            *(void *)a1 = *(void *)v14;
            *(void *)unint64_t v14 = v15;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8 * (v12 >> 1)), (float *)a1, (float *)(a2 - 8));
          }
          --a3;
          float v16 = *(float *)a1;
          if ((a4 & 1) != 0 || *(float *)(a1 - 8) < v16) {
            break;
          }
          if (v16 >= *(float *)(a2 - 8))
          {
            unint64_t v31 = a1 + 8;
            do
            {
              unint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              v31 += 8;
            }
            while (v16 >= *(float *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              float v30 = *(float *)(v10 + 8);
              v10 += 8;
            }
            while (v16 >= v30);
          }
          uint64_t v32 = (float *)a2;
          if (v10 < a2)
          {
            uint64_t v32 = (float *)a2;
            do
            {
              float v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v16 < v33);
          }
          int v34 = *(_DWORD *)(a1 + 4);
          if (v10 < (unint64_t)v32)
          {
            float v35 = *(float *)v10;
            float v36 = *v32;
            do
            {
              *(float *)unint64_t v10 = v36;
              *uint64_t v32 = v35;
              int v37 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v32[1];
              *((_DWORD *)v32 + 1) = v37;
              do
              {
                float v38 = *(float *)(v10 + 8);
                v10 += 8;
                float v35 = v38;
              }
              while (v16 >= v38);
              do
              {
                float v39 = *(v32 - 2);
                v32 -= 2;
                float v36 = v39;
              }
              while (v16 < v39);
            }
            while (v10 < (unint64_t)v32);
          }
          BOOL v4 = v10 - 8 >= a1;
          BOOL v5 = v10 - 8 == a1;
          if (v10 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(float *)(v10 - 8) = v16;
          *(_DWORD *)(v10 - 4) = v34;
        }
        uint64_t v17 = 0;
        int v18 = *(_DWORD *)(a1 + 4);
        do
        {
          float v19 = *(float *)(a1 + v17 + 8);
          v17 += 8;
        }
        while (v19 < v16);
        unint64_t v20 = a1 + v17;
        float32x4_t v21 = (float *)a2;
        if (v17 == 8)
        {
          float32x4_t v21 = (float *)a2;
          do
          {
            if (v20 >= (unint64_t)v21) {
              break;
            }
            float v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
        else
        {
          do
          {
            float v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= v16);
        }
        if (v20 >= (unint64_t)v21)
        {
          unint64_t v10 = a1 + v17;
        }
        else
        {
          float v24 = *v21;
          unint64_t v10 = a1 + v17;
          unint64_t v25 = v21;
          do
          {
            *(float *)unint64_t v10 = v24;
            *unint64_t v25 = v19;
            int v26 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v25[1];
            *((_DWORD *)v25 + 1) = v26;
            do
            {
              float v27 = *(float *)(v10 + 8);
              v10 += 8;
              float v19 = v27;
            }
            while (v27 < v16);
            do
            {
              float v28 = *(v25 - 2);
              v25 -= 2;
              float v24 = v28;
            }
            while (v28 >= v16);
          }
          while (v10 < (unint64_t)v25);
        }
        if (v10 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
        }
        *(float *)(v10 - 8) = v16;
        *(_DWORD *)(v10 - 4) = v18;
        if (v20 >= (unint64_t)v21) {
          break;
        }
LABEL_32:
        std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*,false>(a1, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(a1, v10 - 8);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(v10, a2))
      {
        break;
      }
      if (!v29) {
        goto LABEL_32;
      }
    }
    a2 = v10 - 8;
    if (!v29) {
      continue;
    }
    break;
  }
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(float *a1, float *a2, float *a3)
{
  float result = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 >= result)
    {
      *a1 = result;
      *a2 = v4;
      int v11 = *((_DWORD *)a1 + 1);
      a1[1] = a2[1];
      *((_DWORD *)a2 + 1) = v11;
      float result = *a2;
      if (*a3 >= *a2) {
        return result;
      }
      *a2 = *a3;
      *a3 = result;
      int v7 = a3 + 1;
      BOOL v6 = a2 + 1;
    }
    else
    {
      *a1 = v5;
      BOOL v6 = a1 + 1;
      *a3 = v4;
      int v7 = a3 + 1;
    }
    uint64_t v8 = v7;
    goto LABEL_10;
  }
  if (v5 < result)
  {
    *a2 = v5;
    *a3 = result;
    uint64_t v8 = a2 + 1;
    int v9 = *((_DWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_DWORD *)a3 + 1) = v9;
    float result = *a2;
    float v10 = *a1;
    if (*a2 < *a1)
    {
      *a1 = result;
      BOOL v6 = a1 + 1;
      *a2 = v10;
LABEL_10:
      float result = *v6;
      *BOOL v6 = *v8;
      float *v8 = result;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a1 + 24);
      float v20 = *(float *)(a2 - 8);
      float v21 = *(float *)(a1 + 24);
      if (v20 < v21)
      {
        *(float *)(a1 + 24) = v20;
        *(float *)(a2 - 8) = v21;
        int v22 = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v22;
        float v23 = *(float *)(a1 + 24);
        float v24 = *(float *)(a1 + 16);
        if (v23 < v24)
        {
          int v25 = *(_DWORD *)(a1 + 20);
          int v26 = *(_DWORD *)(a1 + 28);
          *(float *)(a1 + 16) = v23;
          *(_DWORD *)(a1 + 20) = v26;
          *(float *)(a1 + 24) = v24;
          *(_DWORD *)(a1 + 28) = v25;
          float v27 = *(float *)(a1 + 8);
          if (v23 < v27)
          {
            int v28 = *(_DWORD *)(a1 + 12);
            *(float *)(a1 + 8) = v23;
            *(_DWORD *)(a1 + 12) = v26;
            *(float *)(a1 + 16) = v27;
            *(_DWORD *)(a1 + 20) = v28;
            float v29 = *(float *)a1;
            if (v23 < *(float *)a1)
            {
              int v30 = *(_DWORD *)(a1 + 4);
              *(float *)a1 = v23;
              *(_DWORD *)(a1 + 4) = v26;
              *(float *)(a1 + 8) = v29;
              *(_DWORD *)(a1 + 12) = v30;
            }
          }
        }
      }
      return 1;
    default:
      int v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v10 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)v10;
    float v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      int v15 = *(_DWORD *)(v10 + 4);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        int v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16) {
          break;
        }
        float v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          uint64_t v19 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *(float *)uint64_t v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8) {
        return v10 + 8 == a2;
      }
    }
    int v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2) {
      return 1;
    }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(a1, (float *)a2, (float *)a3);
  float result = *(float *)a4;
  float v9 = *(float *)a3;
  if (*(float *)a4 < *(float *)a3)
  {
    *(float *)a3 = result;
    *(float *)a4 = v9;
    int v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    float result = *(float *)a3;
    float v11 = *(float *)a2;
    if (*(float *)a3 < *(float *)a2)
    {
      *(float *)a2 = result;
      *(float *)a3 = v11;
      int v12 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      float result = *(float *)a2;
      float v13 = *a1;
      if (*(float *)a2 < *a1)
      {
        *a1 = result;
        *(float *)a2 = v13;
        float result = a1[1];
        a1[1] = *(float *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float v40 = *(float *)(a2 - 8);
                float v41 = *(float *)v10;
                if (v40 < *(float *)v10)
                {
                  *(float *)unint64_t v10 = v40;
                  *(float *)(a2 - 8) = v41;
                  int v42 = *(_DWORD *)(v10 + 4);
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v42;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v10, (float *)(v10 + 8), (float *)(a2 - 8));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v10, v10 + 8, v10 + 16, a2 - 8);
                break;
              case 5uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v10, v10 + 8, v10 + 16, v10 + 24);
                float v43 = *(float *)(a2 - 8);
                float v44 = *(float *)(v10 + 24);
                if (v43 < v44)
                {
                  *(float *)(v10 + 24) = v43;
                  *(float *)(a2 - 8) = v44;
                  int v45 = *(_DWORD *)(v10 + 28);
                  *(_DWORD *)(v10 + 28) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v45;
                  float v46 = *(float *)(v10 + 24);
                  float v47 = *(float *)(v10 + 16);
                  if (v46 < v47)
                  {
                    int v48 = *(_DWORD *)(v10 + 20);
                    int v49 = *(_DWORD *)(v10 + 28);
                    *(float *)(v10 + 16) = v46;
                    *(_DWORD *)(v10 + 20) = v49;
                    *(float *)(v10 + 24) = v47;
                    *(_DWORD *)(v10 + 28) = v48;
                    float v50 = *(float *)(v10 + 8);
                    if (v46 < v50)
                    {
                      int v51 = *(_DWORD *)(v10 + 12);
                      *(float *)(v10 + 8) = v46;
                      *(_DWORD *)(v10 + 12) = v49;
                      *(float *)(v10 + 16) = v50;
                      *(_DWORD *)(v10 + 20) = v51;
                      float v52 = *(float *)v10;
                      if (v46 < *(float *)v10)
                      {
                        int v53 = *(_DWORD *)(v10 + 4);
                        *(float *)unint64_t v10 = v46;
                        *(_DWORD *)(v10 + 4) = v49;
                        *(float *)(v10 + 8) = v52;
                        *(_DWORD *)(v10 + 12) = v53;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 191)
          {
            unint64_t v54 = v10 + 8;
            BOOL v56 = v10 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  unint64_t v59 = v54;
                  float v60 = *(float *)(v58 + 8);
                  float v61 = *(float *)v58;
                  if (v60 < *(float *)v58)
                  {
                    int v62 = *(_DWORD *)(v58 + 12);
                    uint64_t v63 = v57;
                    while (1)
                    {
                      uint64_t v64 = v10 + v63;
                      int v65 = *(_DWORD *)(v10 + v63 + 4);
                      *(float *)(v64 + 8) = v61;
                      *(_DWORD *)(v64 + 12) = v65;
                      if (!v63) {
                        break;
                      }
                      float v61 = *(float *)(v64 - 8);
                      v63 -= 8;
                      if (v60 >= v61)
                      {
                        uint64_t v66 = v10 + v63 + 8;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v10;
LABEL_83:
                    *(float *)uint64_t v66 = v60;
                    *(_DWORD *)(v66 + 4) = v62;
                  }
                  unint64_t v54 = v59 + 8;
                  v57 += 8;
                  unint64_t v58 = v59;
                }
                while (v59 + 8 != a2);
              }
            }
            else if (!v56)
            {
              unint64_t v95 = (float *)(v10 + 12);
              do
              {
                unint64_t v96 = v54;
                float v97 = *(float *)(a1 + 8);
                float v98 = *(float *)a1;
                if (v97 < *(float *)a1)
                {
                  int v99 = *(_DWORD *)(a1 + 12);
                  int v100 = v95;
                  do
                  {
                    int v101 = v100;
                    *(v100 - 1) = v98;
                    int v102 = *((_DWORD *)v100 - 2);
                    v100 -= 2;
                    *(_DWORD *)int v101 = v102;
                    float v98 = *(v101 - 5);
                  }
                  while (v97 < v98);
                  *(v100 - 1) = v97;
                  *(_DWORD *)int v100 = v99;
                }
                unint64_t v54 = v96 + 8;
                v95 += 2;
                a1 = v96;
              }
              while (v96 + 8 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v67 = (v12 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  unint64_t v71 = v10 + 8 * v70;
                  if (2 * v69 + 2 < (uint64_t)v12 && *(float *)v71 < *(float *)(v71 + 8))
                  {
                    v71 += 8;
                    uint64_t v70 = 2 * v69 + 2;
                  }
                  unint64_t v72 = v10 + 8 * v69;
                  float v73 = *(float *)v71;
                  float v74 = *(float *)v72;
                  if (*(float *)v71 >= *(float *)v72)
                  {
                    int v75 = *(_DWORD *)(v72 + 4);
                    do
                    {
                      unsigned int v76 = (float *)v72;
                      unint64_t v72 = v71;
                      *unsigned int v76 = v73;
                      v76[1] = *(float *)(v71 + 4);
                      if (v67 < v70) {
                        break;
                      }
                      uint64_t v77 = 2 * v70;
                      uint64_t v70 = (2 * v70) | 1;
                      unint64_t v71 = v10 + 8 * v70;
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v12 && *(float *)v71 < *(float *)(v71 + 8))
                      {
                        v71 += 8;
                        uint64_t v70 = v78;
                      }
                      float v73 = *(float *)v71;
                    }
                    while (*(float *)v71 >= v74);
                    *(float *)unint64_t v72 = v74;
                    *(_DWORD *)(v72 + 4) = v75;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              uint64_t v79 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v80 = 0;
                float v82 = *(float *)v10;
                int v81 = *(_DWORD *)(v10 + 4);
                unint64_t v83 = (_DWORD *)v10;
                do
                {
                  uint64_t v84 = v83;
                  v83 += 2 * v80 + 2;
                  uint64_t v85 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v86 = v85 + 2;
                  if (v86 < v79 && *(float *)v83 < *((float *)v83 + 2))
                  {
                    v83 += 2;
                    uint64_t v80 = v86;
                  }
                  *uint64_t v84 = *v83;
                  v84[1] = v83[1];
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v83 == (_DWORD *)(a2 - 8))
                {
                  *(float *)unint64_t v83 = v82;
                  v83[1] = v81;
                }
                else
                {
                  _DWORD *v83 = *(_DWORD *)(a2 - 8);
                  v83[1] = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 8) = v82;
                  *(_DWORD *)(a2 - 4) = v81;
                  uint64_t v87 = (uint64_t)v83 - v10 + 8;
                  if (v87 >= 9)
                  {
                    unint64_t v88 = (((unint64_t)v87 >> 3) - 2) >> 1;
                    uint64_t v89 = (float *)(v10 + 8 * v88);
                    float v90 = *v89;
                    float v91 = *(float *)v83;
                    if (*v89 < *(float *)v83)
                    {
                      int v92 = v83[1];
                      do
                      {
                        unint64_t v93 = (float *)v83;
                        unint64_t v83 = v89;
                        *unint64_t v93 = v90;
                        v93[1] = v89[1];
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        uint64_t v89 = (float *)(v10 + 8 * v88);
                        float v90 = *v89;
                      }
                      while (*v89 < v91);
                      *(float *)unint64_t v83 = v91;
                      v83[1] = v92;
                    }
                  }
                }
                a2 -= 8;
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          float v14 = (float *)(v10 + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8 * (v12 >> 1)), (float *)(a2 - 8));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8), v14 - 2, (float *)(a2 - 16));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v13), (float *)(a2 - 24));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(v14 - 2, v14, (float *)(a1 + 8 + 8 * v13));
            uint64_t v15 = *(void *)a1;
            *(void *)a1 = *(void *)v14;
            *(void *)float v14 = v15;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8 * (v12 >> 1)), (float *)a1, (float *)(a2 - 8));
          }
          --a3;
          float v16 = *(float *)a1;
          if ((a4 & 1) != 0 || *(float *)(a1 - 8) < v16) {
            break;
          }
          if (v16 >= *(float *)(a2 - 8))
          {
            unint64_t v31 = a1 + 8;
            do
            {
              unint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              v31 += 8;
            }
            while (v16 >= *(float *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              float v30 = *(float *)(v10 + 8);
              v10 += 8;
            }
            while (v16 >= v30);
          }
          uint64_t v32 = (float *)a2;
          if (v10 < a2)
          {
            uint64_t v32 = (float *)a2;
            do
            {
              float v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v16 < v33);
          }
          int v34 = *(_DWORD *)(a1 + 4);
          if (v10 < (unint64_t)v32)
          {
            float v35 = *(float *)v10;
            float v36 = *v32;
            do
            {
              *(float *)unint64_t v10 = v36;
              *uint64_t v32 = v35;
              int v37 = *(_DWORD *)(v10 + 4);
              *(float *)(v10 + 4) = v32[1];
              *((_DWORD *)v32 + 1) = v37;
              do
              {
                float v38 = *(float *)(v10 + 8);
                v10 += 8;
                float v35 = v38;
              }
              while (v16 >= v38);
              do
              {
                float v39 = *(v32 - 2);
                v32 -= 2;
                float v36 = v39;
              }
              while (v16 < v39);
            }
            while (v10 < (unint64_t)v32);
          }
          BOOL v4 = v10 - 8 >= a1;
          BOOL v5 = v10 - 8 == a1;
          if (v10 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(float *)(v10 - 8) = v16;
          *(_DWORD *)(v10 - 4) = v34;
        }
        uint64_t v17 = 0;
        int v18 = *(_DWORD *)(a1 + 4);
        do
        {
          float v19 = *(float *)(a1 + v17 + 8);
          v17 += 8;
        }
        while (v19 < v16);
        unint64_t v20 = a1 + v17;
        float v21 = (float *)a2;
        if (v17 == 8)
        {
          float v21 = (float *)a2;
          do
          {
            if (v20 >= (unint64_t)v21) {
              break;
            }
            float v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
        else
        {
          do
          {
            float v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= v16);
        }
        if (v20 >= (unint64_t)v21)
        {
          unint64_t v10 = a1 + v17;
        }
        else
        {
          float v24 = *v21;
          unint64_t v10 = a1 + v17;
          int v25 = v21;
          do
          {
            *(float *)unint64_t v10 = v24;
            *int v25 = v19;
            int v26 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v25[1];
            *((_DWORD *)v25 + 1) = v26;
            do
            {
              float v27 = *(float *)(v10 + 8);
              v10 += 8;
              float v19 = v27;
            }
            while (v27 < v16);
            do
            {
              float v28 = *(v25 - 2);
              v25 -= 2;
              float v24 = v28;
            }
            while (v28 >= v16);
          }
          while (v10 < (unint64_t)v25);
        }
        if (v10 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
        }
        *(float *)(v10 - 8) = v16;
        *(_DWORD *)(v10 - 4) = v18;
        if (v20 >= (unint64_t)v21) {
          break;
        }
LABEL_32:
        std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*,false>(a1, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*>(a1, v10 - 8);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*>(v10, a2))
      {
        break;
      }
      if (!v29) {
        goto LABEL_32;
      }
    }
    a2 = v10 - 8;
    if (!v29) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a1 + 24);
      float v20 = *(float *)(a2 - 8);
      float v21 = *(float *)(a1 + 24);
      if (v20 < v21)
      {
        *(float *)(a1 + 24) = v20;
        *(float *)(a2 - 8) = v21;
        int v22 = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v22;
        float v23 = *(float *)(a1 + 24);
        float v24 = *(float *)(a1 + 16);
        if (v23 < v24)
        {
          int v25 = *(_DWORD *)(a1 + 20);
          int v26 = *(_DWORD *)(a1 + 28);
          *(float *)(a1 + 16) = v23;
          *(_DWORD *)(a1 + 20) = v26;
          *(float *)(a1 + 24) = v24;
          *(_DWORD *)(a1 + 28) = v25;
          float v27 = *(float *)(a1 + 8);
          if (v23 < v27)
          {
            int v28 = *(_DWORD *)(a1 + 12);
            *(float *)(a1 + 8) = v23;
            *(_DWORD *)(a1 + 12) = v26;
            *(float *)(a1 + 16) = v27;
            *(_DWORD *)(a1 + 20) = v28;
            float v29 = *(float *)a1;
            if (v23 < *(float *)a1)
            {
              int v30 = *(_DWORD *)(a1 + 4);
              *(float *)a1 = v23;
              *(_DWORD *)(a1 + 4) = v26;
              *(float *)(a1 + 8) = v29;
              *(_DWORD *)(a1 + 12) = v30;
            }
          }
        }
      }
      return 1;
    default:
      float v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v10 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)v10;
    float v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      int v15 = *(_DWORD *)(v10 + 4);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        int v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16) {
          break;
        }
        float v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          uint64_t v19 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *(float *)uint64_t v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8) {
        return v10 + 8 == a2;
      }
    }
    float v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2) {
      return 1;
    }
  }
}

void *std::vector<std::shared_ptr<cv3d::cv::gess::util::Image>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24F516BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<cv3d::cv::gess::math::Vector2T<int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24F516C4C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<cv3d::cv::gess::mesh::FaceHandle>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_24F516CC8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::VertexHandle>(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *a1;
  float v6 = (void *)a1[1];
  if ((void *)*a1 == v6)
  {
    uint64_t v7 = 0;
    int v8 = (void *)*a1;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = (void *)*a1;
    while (*v8)
    {
      v8 += 2;
      uint64_t v7 = (v7 + 1);
      if (v8 == v6) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    uint64_t v9 = (uint64_t)(a1 + 2);
    unint64_t v10 = a1[2];
    if ((unint64_t)v6 >= v10)
    {
      uint64_t v12 = ((uint64_t)v6 - v5) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v10 - v5;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      float v27 = a1 + 2;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      uint64_t v17 = &v16[16 * v12];
      *(void *)&long long v24 = v16;
      *((void *)&v24 + 1) = v17;
      int v26 = &v16[16 * v18];
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      int v25 = v17 + 16;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__swap_out_circular_buffer(a1, &v24);
      uint64_t v11 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)&v24);
    }
    else
    {
      uint64_t v11 = v6 + 2;
      *float v6 = 0;
      v6[1] = 0;
      a1[1] = (uint64_t)(v6 + 2);
    }
    a1[1] = (uint64_t)v11;
  }
  float v23 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, &v23, &v24);
  uint64_t v19 = *a1 + 16 * v7;
  long long v20 = v24;
  long long v24 = 0uLL;
  float v21 = *(std::__shared_weak_count **)(v19 + 8);
  *(_OWORD *)uint64_t v19 = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  return v7;
}

void sub_24F516E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(long long *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  float v6 = operator new(0x58uLL);
  BOOL result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24F516EAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,0>(void *a1, long long *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8C60;
  cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1 + 3, a2, a3);
  a1[3] = &unk_2700D8C98;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return a1;
}

void sub_24F516F2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8C60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::~AttributeT(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Reserve(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Resize(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Clear(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2) {
    operator delete(v2);
  }
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::PushBack(void *a1)
{
  unint64_t v4 = a1[7];
  uint64_t v2 = (uint64_t)(a1 + 7);
  unint64_t v3 = v4;
  uint64_t v5 = *(_DWORD **)(v2 - 8);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void **)(v2 - 16);
    uint64_t v8 = *(void *)(v2 - 16);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v3 - v8;
    uint64_t v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = -1;
    float v6 = v14 + 4;
    uint64_t v17 = (char *)a1[5];
    uint64_t v16 = (char *)a1[6];
    if (v16 != v17)
    {
      do
      {
        int v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*v7;
    }
    a1[5] = v14;
    a1[6] = v6;
    a1[7] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v5 = -1;
    float v6 = v5 + 1;
  }
  a1[6] = v6;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 40);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(*(void *)(result + 40) + 4 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(void *)(result + 40) + 4 * a3) = *(_DWORD *)(*(void *)(result + 40) + 4 * a2);
  return result;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Clone()
{
}

void sub_24F5171CC(_Unwind_Exception *a1)
{
  MEMORY[0x25335EA10](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::MemoryConsumption(uint64_t a1)
{
  return *(void *)(a1 + 56) - *(void *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  *(void *)this = &unk_2700D8C98;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  int v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(void *)int v4 = &unk_2700D8C98;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::VertexHandle*,cv3d::cv::gess::mesh::VertexHandle*>((void *)v4 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_24F5172C0(_Unwind_Exception *a1)
{
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

void *std::vector<cv3d::cv::gess::mesh::VertexHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::VertexHandle*,cv3d::cv::gess::mesh::VertexHandle*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    BOOL result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F517334(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_24F5173B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::FaceHandle>(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *a1;
  float v6 = (void *)a1[1];
  if ((void *)*a1 == v6)
  {
    uint64_t v7 = 0;
    size_t v8 = (void *)*a1;
  }
  else
  {
    uint64_t v7 = 0;
    size_t v8 = (void *)*a1;
    while (*v8)
    {
      v8 += 2;
      uint64_t v7 = (v7 + 1);
      if (v8 == v6) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    uint64_t v9 = (uint64_t)(a1 + 2);
    unint64_t v10 = a1[2];
    if ((unint64_t)v6 >= v10)
    {
      uint64_t v12 = ((uint64_t)v6 - v5) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v10 - v5;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      float v27 = a1 + 2;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      uint64_t v17 = &v16[16 * v12];
      *(void *)&long long v24 = v16;
      *((void *)&v24 + 1) = v17;
      int v26 = &v16[16 * v18];
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      int v25 = v17 + 16;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__swap_out_circular_buffer(a1, &v24);
      uint64_t v11 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)&v24);
    }
    else
    {
      uint64_t v11 = v6 + 2;
      *float v6 = 0;
      v6[1] = 0;
      a1[1] = (uint64_t)(v6 + 2);
    }
    a1[1] = (uint64_t)v11;
  }
  float v23 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, &v23, &v24);
  uint64_t v19 = *a1 + 16 * v7;
  long long v20 = v24;
  long long v24 = 0uLL;
  float v21 = *(std::__shared_weak_count **)(v19 + 8);
  *(_OWORD *)uint64_t v19 = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  return v7;
}

void sub_24F5175A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(long long *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  float v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24F517608(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,0>(void *a1, long long *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8D40;
  cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1 + 3, a2, a3);
  a1[3] = &unk_2700D8D78;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return a1;
}

void sub_24F517688(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8D40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::~AttributeT(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Reserve(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Resize(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Clear(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2) {
    operator delete(v2);
  }
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::PushBack(void *a1)
{
  unint64_t v4 = a1[7];
  uint64_t v2 = (uint64_t)(a1 + 7);
  unint64_t v3 = v4;
  uint64_t v5 = *(_DWORD **)(v2 - 8);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void **)(v2 - 16);
    uint64_t v8 = *(void *)(v2 - 16);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v3 - v8;
    uint64_t v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = -1;
    float v6 = v14 + 4;
    uint64_t v17 = (char *)a1[5];
    uint64_t v16 = (char *)a1[6];
    if (v16 != v17)
    {
      do
      {
        int v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*v7;
    }
    a1[5] = v14;
    a1[6] = v6;
    a1[7] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v5 = -1;
    float v6 = v5 + 1;
  }
  a1[6] = v6;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 40);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(*(void *)(result + 40) + 4 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(void *)(result + 40) + 4 * a3) = *(_DWORD *)(*(void *)(result + 40) + 4 * a2);
  return result;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Clone()
{
}

void sub_24F517928(_Unwind_Exception *a1)
{
  MEMORY[0x25335EA10](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::MemoryConsumption(uint64_t a1)
{
  return *(void *)(a1 + 56) - *(void *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  *(void *)this = &unk_2700D8D78;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  int v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(void *)int v4 = &unk_2700D8D78;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::mesh::FaceHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle*>((void *)v4 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_24F517A1C(_Unwind_Exception *a1)
{
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

void *std::vector<cv3d::cv::gess::mesh::FaceHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F517A90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_24F517B14(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<float>(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *a1;
  float v6 = (void *)a1[1];
  if ((void *)*a1 == v6)
  {
    uint64_t v7 = 0;
    size_t v8 = (void *)*a1;
  }
  else
  {
    uint64_t v7 = 0;
    size_t v8 = (void *)*a1;
    while (*v8)
    {
      v8 += 2;
      uint64_t v7 = (v7 + 1);
      if (v8 == v6) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    uint64_t v9 = (uint64_t)(a1 + 2);
    unint64_t v10 = a1[2];
    if ((unint64_t)v6 >= v10)
    {
      uint64_t v12 = ((uint64_t)v6 - v5) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v10 - v5;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      float v27 = a1 + 2;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      uint64_t v17 = &v16[16 * v12];
      *(void *)&long long v24 = v16;
      *((void *)&v24 + 1) = v17;
      int v26 = &v16[16 * v18];
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      int v25 = v17 + 16;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__swap_out_circular_buffer(a1, &v24);
      uint64_t v11 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)&v24);
    }
    else
    {
      uint64_t v11 = v6 + 2;
      *float v6 = 0;
      v6[1] = 0;
      a1[1] = (uint64_t)(v6 + 2);
    }
    a1[1] = (uint64_t)v11;
  }
  float v23 = cv3d::cv::gess::util::os::GessTypeID<float>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<float>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, &v23, &v24);
  uint64_t v19 = *a1 + 16 * v7;
  long long v20 = v24;
  long long v24 = 0uLL;
  float v21 = *(std::__shared_weak_count **)(v19 + 8);
  *(_OWORD *)uint64_t v19 = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  return v7;
}

void sub_24F517E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<float>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(long long *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  float v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24F517E64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,0>(void *a1, long long *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8E20;
  cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1 + 3, a2, a3);
  a1[3] = &unk_2700D8E58;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return a1;
}

void sub_24F517EE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8E20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void cv3d::cv::gess::mesh::AttributeT<float>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<float>::~AttributeT(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<float>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<float>::Reserve(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<float>::Resize(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<float>::Clear(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2) {
    operator delete(v2);
  }
}

void cv3d::cv::gess::mesh::AttributeT<float>::PushBack(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  unint64_t v3 = a1[7];
  int v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    float v6 = (char *)a1[5];
    uint64_t v7 = (v4 - v6) >> 2;
    if ((unint64_t)(v7 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = v3 - (void)v6;
    unint64_t v9 = (uint64_t)(v3 - (void)v6) >> 1;
    if (v9 <= v7 + 1) {
      unint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v10);
      float v6 = (char *)a1[5];
      int v4 = (char *)a1[6];
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[4 * v7];
    unint64_t v13 = &v11[4 * v10];
    *(_DWORD *)uint64_t v12 = 0;
    uint64_t v5 = v12 + 4;
    while (v4 != v6)
    {
      int v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_DWORD *)int v4 = 0;
    uint64_t v5 = v4 + 4;
  }
  a1[6] = v5;
}

float cv3d::cv::gess::mesh::AttributeT<float>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  float result = *(float *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(float *)(v3 + 4 * a3) = result;
  return result;
}

float cv3d::cv::gess::mesh::AttributeT<float>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  float result = *(float *)(v3 + 4 * a2);
  *(float *)(v3 + 4 * a3) = result;
  return result;
}

float cv3d::cv::gess::mesh::AttributeT<float>::Blend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  float result = (float)(*(float *)(v3 + 4 * a2) + *(float *)(v3 + 4 * a3)) * 0.5;
  *(float *)(v3 + 4 * a2) = result;
  return result;
}

void cv3d::cv::gess::mesh::AttributeT<float>::Clone()
{
}

void sub_24F518194(_Unwind_Exception *a1)
{
  MEMORY[0x25335EA10](v1, 0x1093C40855A9725);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<float>::MemoryConsumption(uint64_t a1)
{
  return *(void *)(a1 + 56) - *(void *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<float>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  *(void *)this = &unk_2700D8E58;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    float v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = &v6[4 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<float>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  int v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(void *)int v4 = &unk_2700D8E58;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v4 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_24F518330(_Unwind_Exception *a1)
{
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<float>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_24F5183AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<float> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<float> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::MergeSmallCharts(uint64_t *a1, unint64_t a2, uint64_t a3, const float *a4, const float *a5, uint64_t a6, BOOL a7, char a8)
{
  _OWORD v48[4] = *MEMORY[0x263EF8340];
  BOOL v47 = a7;
  unint64_t v10 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  uint64_t v12 = (uint64_t)v11 - *a1;
  if ((unint64_t)v12 >= 0x50)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__init_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(&v44, v10, v11, v12 >> 4);
    uint64_t v19 = *(void *)(a3 + 152);
    uint64_t v18 = *(void *)(a3 + 160);
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::vector(&v42, (a1[1] - *a1) >> 4);
    uint64_t v20 = v44;
    if (v45 != v44)
    {
      unint64_t v21 = 0;
      do
      {
        std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,void>(*(cv3d::cv::gess::mesh::TriMesh **)(v20 + 16 * v21), a4, a5, &v47, &v41);
        int v22 = &v42[2 * v21];
        long long v23 = v41;
        long long v41 = 0uLL;
        long long v24 = (std::__shared_weak_count *)v22[1];
        *(_OWORD *)int v22 = v23;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if (*((void *)&v41 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
        }
        ++v21;
        uint64_t v20 = v44;
      }
      while (v21 < (v45 - v44) >> 4);
    }
    std::vector<unsigned int>::size_type v25 = (v18 - v19) >> 2;
    cv3d::cv::gess::isochart::IsoChartMesh::CalAdjacentChartsForEachChart((uint64_t *)&v42, a3, v25);
    uint64_t v26 = *(void *)(a6 + 24);
    if (!v26 || ((*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26) & 1) == 0)
    {
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__clear[abi:ne180100](a1);
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v48, a6);
      cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging((uint64_t *)&v42, &v44, a2, v25, a4, a5, (uint64_t)v48, v47, a8);
      std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v48);
      uint64_t v27 = *(void *)(a6 + 24);
      if (!v27 || ((*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27) & 1) == 0)
      {
        int v28 = v42;
        unint64_t v29 = 0;
        if (v43 != v42)
        {
          unint64_t v30 = ((char *)v43 - (char *)v42) >> 4;
          if (v30 <= 1) {
            unint64_t v30 = 1;
          }
          do
          {
            unint64_t v31 = *v28;
            v28 += 2;
            if (v31) {
              ++v29;
            }
            --v30;
          }
          while (v30);
        }
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::resize(a1, v29);
        uint64_t v32 = v44;
        if (v45 != v44)
        {
          uint64_t v33 = 0;
          unint64_t v34 = 0;
          uint64_t v35 = 0;
          do
          {
            uint64_t v36 = *(void *)(v32 + v33 * 8);
            if (v36)
            {
              uint64_t v37 = *a1;
              uint64_t v38 = *(void *)(v32 + v33 * 8 + 8);
              if (v38) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
              }
              float v39 = (void *)(v37 + 16 * v35);
              float v40 = (std::__shared_weak_count *)v39[1];
              void *v39 = v36;
              v39[1] = v38;
              if (v40) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v40);
              }
              uint64_t v32 = v44;
              if ((*(void *)(v44 + v33 * 8) != 0) != (v42[v33] != 0)) {
LABEL_32:
              }
                __assert_rtn("MergeSmallCharts", "MergeCharts.cpp", 76, "!chart_mesh_list_backup[i] == !children[i]");
              ++v35;
            }
            else if (v42[v33])
            {
              goto LABEL_32;
            }
            ++v34;
            v33 += 2;
          }
          while (v34 < (v45 - v32) >> 4);
        }
      }
    }
    *(void *)&long long v41 = &v42;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    int v42 = (void **)&v44;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v42);
  }
}

void sub_24F5187CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ***a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = &a13;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalAdjacentChartsForEachChart(uint64_t *a1, uint64_t a2, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::vector(&v20, __n);
  uint64_t v5 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = 16 * v6;
      uint64_t v9 = *(void *)(*(void *)(v5 + 16 * v6) + 40);
      std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
      int v21 = -1;
      int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v9 + 56), (uint64_t)&v21, (unsigned __int8 *)__p);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v10 == -1) {
        __assert_rtn("CalAdjacentChartsForEachChart", "MergeCharts.cpp", 90, "f_id_root_ah.Valid()");
      }
      uint64_t v5 = *a1;
      uint64_t v11 = *(uint64_t **)(*(void *)(*a1 + v8) + 40);
      if (v11[20] != v11[19])
      {
        unint64_t v12 = 0;
        do
        {
          LODWORD(__p[0]) = v10;
          uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v11 + 7, (unsigned int *)__p);
          uint64_t v14 = *(void *)(v13 + 40);
          if (v12 >= (*(void *)(v13 + 48) - v14) >> 2) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v20.__begin_[*(unsigned int *)(v14 + 4 * v12)] = v7;
          uint64_t v5 = *a1;
          ++v12;
          uint64_t v11 = *(uint64_t **)(*(void *)(*a1 + v8) + 40);
        }
        while (v12 < (v11[20] - v11[19]) >> 2);
      }
      uint64_t v15 = a1[1];
      uint64_t v6 = ++v7;
    }
    while (v7 < (unint64_t)((v15 - v5) >> 4));
    if (v15 != v5)
    {
      uint64_t v16 = 0;
      unsigned int v17 = 0;
      do
      {
        cv3d::cv::gess::isochart::IsoChartMesh::CalculateAdjacentChart(*(void **)(v5 + 16 * v16), v17, &v20, a2);
        uint64_t v5 = *a1;
        uint64_t v16 = ++v17;
      }
      while (v17 < (unint64_t)((a1[1] - *a1) >> 4));
    }
  }
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
}

void sub_24F5189F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(uint64_t *a1, void *a2, unint64_t a3, unint64_t a4, const float *a5, const float *a6, uint64_t a7, BOOL a8, char a9)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  unint64_t v150 = a4;
  BOOL v149 = a8;
  uint64_t v148 = 0;
  memset(v146, 0, sizeof(v146));
  char v147 = 0;
  int v145 = 0x7FFFFFFF;
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = v10 - *a1;
  unint64_t v13 = v12 >> 4;
  if (a3 && v13 > a3) {
    int v145 = ((unint64_t)v12 >> 4) - a3;
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize(v146, v13);
  uint64_t v14 = *(void *)(a7 + 24);
  if (!v14 || ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14) & 1) == 0)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(v144, v13);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v143, v13);
    LOBYTE(v156.__m_.__sig) = 1;
    std::vector<BOOL>::vector(v142, v13, (unsigned __int8 *)&v156);
    if (v10 != v11)
    {
      uint64_t v15 = 0;
      unsigned int v16 = 1;
      do
      {
        unsigned int v17 = (uint64_t *)(*a1 + 16 * v15);
        cv3d::cv::gess::isochart::IsoChartMesh::CalculateAverageNormal(*v17, (float32x4_t *)v143[0] + v15);
        if (*(void *)(*v17 + 232) != *(void *)(*v17 + 240)
          && *(void *)(*(void *)(*v17 + 40) + 160) != *(void *)(*(void *)(*v17 + 40) + 152))
        {
          uint64_t v18 = operator new(0x28uLL);
          v18[1] = 0;
          v18[2] = 0;
          *uint64_t v18 = &unk_2700D8F38;
          *((_DWORD *)v18 + 6) = 0;
          v18[4] = -1;
          char v19 = (void *)(v144[0] + 16 * v15);
          std::vector<unsigned int> v20 = (std::__shared_weak_count *)v19[1];
          *char v19 = v18 + 3;
          v19[1] = v18;
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          long long v21 = *(_OWORD *)(v144[0] + 16 * v15);
          uint64_t v22 = *(void *)(v144[0] + 16 * v15);
          *(float *)uint64_t v22 = -(float)((float)((float)(v16 - 1) / (float)v13)
                                 + (float)(unint64_t)((uint64_t)(*(void *)(*(void *)(*v17 + 40) + 160)
                                                                     - *(void *)(*(void *)(*v17 + 40) + 152)) >> 2));
          *(_DWORD *)(v22 + 4) = v16 - 1;
          long long v141 = v21;
          if (*((void *)&v21 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert(v146, &v141);
          if (*((void *)&v141 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v141 + 1));
          }
        }
        uint64_t v15 = v16;
      }
      while (v13 > v16++);
    }
    uint64_t v24 = *(void *)(a7 + 24);
    if (!v24 || ((*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24) & 1) == 0)
    {
      memset(v156.__m_.__opaque, 0, sizeof(v156.__m_.__opaque));
      v156.__m_.__uint64_t sig = 850045863;
      if (a9)
      {
        uint64_t v137 = 0;
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        uint64_t v131 = 0;
        float v132 = 0;
        uint64_t v133 = 0;
        memset(v155.__m_.__opaque, 0, sizeof(v155.__m_.__opaque));
        v155.__m_.__uint64_t sig = 850045863;
        if (v148)
        {
          do
          {
            uint64_t v25 = *(void *)(a7 + 24);
            if (v25 && ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(v25) & 1) != 0) {
              break;
            }
            unsigned int v26 = std::thread::hardware_concurrency();
            if (v26 <= 2) {
              unint64_t v27 = 2;
            }
            else {
              unint64_t v27 = v26;
            }
            uint64_t v29 = v134;
            for (uint64_t i = v135; i != v29; i -= 16)
            {
              unint64_t v30 = *(std::__shared_weak_count **)(i - 8);
              if (v30) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v30);
              }
            }
            uint64_t v135 = v29;
            unint64_t v31 = v131;
            uint64_t v32 = v132;
            if (v132 != v131)
            {
              do
              {
                uint64_t v33 = (std::__shared_weak_count *)*(v32 - 1);
                if (v33) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                }
                v32 -= 2;
              }
              while (v32 != v31);
              uint64_t v29 = v135;
            }
            float v132 = v31;
            if (v27 > (v29 - v134) >> 4)
            {
              while (1)
              {
                unint64_t v31 = v132;
                if (v27 < ((char *)v132 - (char *)v131) >> 4 || v148 == 0) {
                  break;
                }
                cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(v146, 0, context);
                if (!*(void *)&context[0]) {
                  __assert_rtn("PerformMerging", "MergeCharts.cpp", 379, "top != nullptr");
                }
                uint64_t v35 = *(unsigned int *)(*(void *)&context[0] + 4);
                if (*(void *)&context[0] != *(void *)(v144[0] + 16 * v35)) {
                  __assert_rtn("PerformMerging", "MergeCharts.cpp", 382, "top == heap_items[index]");
                }
                uint64_t v36 = *(void *)(*a1 + 16 * v35);
                if (v36)
                {
                  uint64_t v37 = v134;
LABEL_45:
                  if (v37 == v135)
                  {
                    int v42 = &v134;
                  }
                  else
                  {
                    uint64_t v38 = *(void *)(*a1 + 16 * *(unsigned int *)(*(void *)v37 + 4));
                    float v39 = *(_DWORD **)(v38 + 232);
                    float v40 = *(_DWORD **)(v38 + 240);
                    while (1)
                    {
                      if (v39 == v40)
                      {
                        v37 += 16;
                        goto LABEL_45;
                      }
                      if (*v39 == v35) {
                        break;
                      }
                      for (unint64_t j = *(_DWORD **)(v36 + 232); j != *(_DWORD **)(v36 + 240); ++j)
                      {
                        if (*v39 == *j) {
                          goto LABEL_55;
                        }
                      }
                      ++v39;
                    }
LABEL_55:
                    int v42 = (uint64_t *)&v131;
                  }
                  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::emplace_back<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>&>(v42, context);
                }
                if (*((void *)&context[0] + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&context[0] + 1));
                }
                if (v27 <= (v135 - v134) >> 4)
                {
                  unint64_t v31 = v132;
                  break;
                }
              }
            }
            for (int k = v131; k != v31; k += 2)
            {
              *(void *)&long long v130 = *k;
              uint64_t v44 = k[1];
              *((void *)&v130 + 1) = v44;
              if (v44) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
              }
              cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert(v146, &v130);
              if (*((void *)&v130 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v130 + 1));
              }
            }
            uint64_t v46 = v137;
            for (uint64_t m = v138; m != v46; std::thread::~thread((std::thread *)(m - 8)))
              ;
            uint64_t v138 = v46;
            uint64_t v127 = 0;
            uint64_t v128 = 0;
            uint64_t v129 = 0;
            BOOL v47 = operator new(0x68uLL);
            *BOOL v47 = &unk_2700D8F70;
            v47[1] = a1;
            v47[2] = a2;
            v47[3] = &v150;
            _DWORD v47[4] = v142;
            v47[5] = v143;
            v47[6] = a5;
            v47[7] = a6;
            v47[8] = v146;
            v47[9] = &v145;
            v47[10] = &v155;
            v47[11] = &v149;
            v47[12] = &v127;
            v154[3] = v47;
            std::__function::__value_func<void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::__value_func[abi:ne180100]((uint64_t)context, (uint64_t)v154);
            unint64_t v153 = &v134;
            int v48 = dispatch_queue_create("com.gcd.task1", MEMORY[0x263EF83A8]);
            dispatch_apply_f((v135 - v134) >> 4, v48, context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke);
            dispatch_release(v48);
            unint64_t v49 = 126 - 2 * __clz((v128 - (unsigned char *)v127) >> 3);
            if (v128 == v127) {
              uint64_t v50 = 0;
            }
            else {
              uint64_t v50 = v49;
            }
            std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *,false>((uint64_t)v127, (unsigned int *)v128, v50, 1);
            int v51 = (char *)v127;
            if (v128 != v127)
            {
              uint64_t v52 = 0;
              unsigned int v53 = 0;
              do
              {
                unint64_t v54 = &v51[8 * v52];
                uint64_t v56 = *(unsigned int *)v54;
                __int32 v55 = *((_DWORD *)v54 + 1);
                uint64_t v57 = *a1 + 16 * v56;
                std::vector<unsigned int> __p = 0;
                uint64_t v125 = 0;
                uint64_t v126 = 0;
                uint64_t v121 = 0;
                int v122 = 0;
                uint64_t v123 = 0;
                uint64_t v58 = *(void *)(*(void *)v57 + 232);
                if (*(void *)(*(void *)v57 + 240) == v58)
                {
                  float v91 = 0;
                }
                else
                {
                  unsigned int v120 = v53;
                  uint64_t v59 = 0;
                  unsigned int v60 = 0;
                  do
                  {
                    uint64_t v61 = *(unsigned int *)(v58 + 4 * v59);
                    int v62 = (uint64_t *)(*a1 + 16 * v61);
                    uint64_t v63 = *v62;
                    uint64_t v64 = (std::__shared_weak_count *)v62[1];
                    if (v64) {
                      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (v63) {
                      goto LABEL_82;
                    }
                    for (uint64_t n = (unsigned int *)v127; ; n += 2)
                    {
                      if (n == (unsigned int *)v128) {
                        goto LABEL_85;
                      }
                      if (n[1] == v61) {
                        break;
                      }
                    }
                    int64_t v69 = v125;
                    if (v125 >= v126)
                    {
                      unint64_t v71 = (char *)__p;
                      uint64_t v72 = (v125 - (unsigned char *)__p) >> 2;
                      unint64_t v73 = v72 + 1;
                      if ((unint64_t)(v72 + 1) >> 62) {
                        goto LABEL_192;
                      }
                      uint64_t v74 = v126 - (unsigned char *)__p;
                      if ((v126 - (unsigned char *)__p) >> 1 > v73) {
                        unint64_t v73 = v74 >> 1;
                      }
                      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v75 = v73;
                      }
                      if (v75)
                      {
                        unsigned int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v126, v75);
                        unint64_t v71 = (char *)__p;
                        int64_t v69 = v125;
                        LODWORD(v61) = n[1];
                      }
                      else
                      {
                        unsigned int v76 = 0;
                      }
                      uint64_t v77 = &v76[4 * v72];
                      *(_DWORD *)uint64_t v77 = v61;
                      uint64_t v70 = v77 + 4;
                      while (v69 != v71)
                      {
                        int v78 = *((_DWORD *)v69 - 1);
                        v69 -= 4;
                        *((_DWORD *)v77 - 1) = v78;
                        v77 -= 4;
                      }
                      std::vector<unsigned int> __p = v77;
                      uint64_t v125 = v70;
                      uint64_t v126 = &v76[4 * v75];
                      if (v71) {
                        operator delete(v71);
                      }
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v125 = v61;
                      uint64_t v70 = v69 + 4;
                    }
                    uint64_t v125 = v70;
                    uint64_t v79 = v122;
                    if (v122 >= v123)
                    {
                      int v81 = v121;
                      uint64_t v82 = v122 - v121;
                      unint64_t v83 = v82 + 1;
                      if ((unint64_t)(v82 + 1) >> 62) {
LABEL_192:
                      }
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      uint64_t v84 = (char *)v123 - (char *)v121;
                      if (((char *)v123 - (char *)v121) >> 1 > v83) {
                        unint64_t v83 = v84 >> 1;
                      }
                      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v85 = v83;
                      }
                      if (v85)
                      {
                        uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v123, v85);
                        int v81 = v121;
                        uint64_t v79 = v122;
                      }
                      else
                      {
                        uint64_t v86 = 0;
                      }
                      uint64_t v87 = (unsigned int *)&v86[4 * v82];
                      *uint64_t v87 = *n;
                      uint64_t v80 = v87 + 1;
                      while (v79 != v81)
                      {
                        unsigned int v88 = *--v79;
                        *--uint64_t v87 = v88;
                      }
                      uint64_t v121 = v87;
                      uint64_t v123 = (unsigned int *)&v86[4 * v85];
                      if (v81) {
                        operator delete(v81);
                      }
                    }
                    else
                    {
                      *int v122 = *n;
                      uint64_t v80 = v122 + 1;
                    }
                    int v122 = v80;
                    uint64_t v89 = (uint64_t *)(*a1 + 16 * *n);
                    uint64_t v63 = *v89;
                    float v90 = (std::__shared_weak_count *)v89[1];
                    if (v90) {
                      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (v64) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                    }
                    uint64_t v64 = v90;
                    if (v63)
                    {
LABEL_82:
                      int v65 = *(__int32 **)(v63 + 232);
                      uint64_t v66 = *(__int32 **)(v63 + 240);
                      __int32 v151 = v55;
                      int64_t v67 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(v65, v66, &v151);
                      if (*(__int32 **)(v63 + 240) != v67) {
                        *(void *)(v63 + 240) = v67;
                      }
                      cv3d::cv::gess::isochart::AddNoduplicateItem(v63 + 232, v56);
                    }
LABEL_85:
                    if (v64) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                    }
                    uint64_t v58 = *(void *)(*(void *)v57 + 232);
                    uint64_t v59 = ++v60;
                  }
                  while (v60 < (unint64_t)((*(void *)(*(void *)v57 + 240) - v58) >> 2));
                  float v91 = (char *)__p;
                  if (v125 == __p)
                  {
                    unsigned int v53 = v120;
                  }
                  else
                  {
                    unint64_t v92 = 0;
                    unsigned int v93 = 1;
                    unsigned int v53 = v120;
                    do
                    {
                      uint64_t v94 = *(void *)v57;
                      __int32 v151 = *(_DWORD *)&v91[4 * v92];
                      unint64_t v95 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(*(__int32 **)(v94 + 232), *(__int32 **)(v94 + 240), &v151);
                      if (*(__int32 **)(v94 + 240) != v95) {
                        *(void *)(v94 + 240) = v95;
                      }
                      cv3d::cv::gess::isochart::AddNoduplicateItem(*(void *)v57 + 232, v121[v92]);
                      unint64_t v92 = v93;
                      float v91 = (char *)__p;
                      ++v93;
                    }
                    while (v92 < (v125 - (unsigned char *)__p) >> 2);
                  }
                }
                if (v121)
                {
                  operator delete(v121);
                  float v91 = (char *)__p;
                }
                if (v91)
                {
                  uint64_t v125 = v91;
                  operator delete(v91);
                }
                int v51 = (char *)v127;
                uint64_t v52 = ++v53;
              }
              while (v53 < (unint64_t)((v128 - (unsigned char *)v127) >> 3));
            }
            int v96 = v145;
            std::__function::__value_func<void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::~__value_func[abi:ne180100](context);
            std::__function::__value_func<void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::~__value_func[abi:ne180100](v154);
            if (v127)
            {
              uint64_t v128 = (char *)v127;
              operator delete(v127);
            }
          }
          while (v96 >= 1 && v148);
        }
        std::mutex::~mutex(&v155);
        v155.__m_.__uint64_t sig = (uint64_t)&v131;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v97);
        v155.__m_.__uint64_t sig = (uint64_t)&v134;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
        v155.__m_.__uint64_t sig = (uint64_t)&v137;
        std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      }
      else if (v148)
      {
        float v98 = (float)v13;
        do
        {
          uint64_t v99 = *(void *)(a7 + 24);
          if (v99 && ((*(uint64_t (**)(uint64_t))(*(void *)v99 + 48))(v99) & 1) != 0) {
            break;
          }
          cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(v146, 0, &v155);
          if (!v155.__m_.__sig) {
            __assert_rtn("PerformMerging", "MergeCharts.cpp", 178, "top != nullptr");
          }
          uint64_t v100 = *(unsigned int *)(v155.__m_.__sig + 4);
          if (v155.__m_.__sig != *(void *)(v144[0] + 16 * v100)) {
            __assert_rtn("PerformMerging", "MergeCharts.cpp", 181, "top == heap_items[index]");
          }
          if (*(void *)(*a1 + 16 * v100))
          {
            LOBYTE(v137) = 0;
            LODWORD(v154[0]) = 0;
            cv3d::cv::gess::isochart::IsoChartMesh::MergeAdjacentChart(a1, a2, v100, v150, v142, (uint64_t *)v143, &v137, v154, &v156, a5, a6, v149);
            if (!(_BYTE)v137) {
              goto LABEL_174;
            }
            uint64_t v101 = *a1 + 16 * v100;
            uint64_t v102 = *(void *)v101;
            uint64_t v103 = *(void *)(*(void *)v101 + 232);
            if (*(void *)(*(void *)v101 + 240) != v103)
            {
              unint64_t v104 = 0;
              unsigned int v105 = 1;
              int v106 = v154[0];
              do
              {
                int v107 = (uint64_t *)(*a1 + 16 * *(unsigned int *)(v103 + 4 * v104));
                uint64_t v108 = *v107;
                uint64_t v109 = (std::__shared_weak_count *)v107[1];
                if (v109) {
                  atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v108)
                {
                  uint64_t v110 = *(__int32 **)(v108 + 232);
                  uint64_t v111 = *(__int32 **)(v108 + 240);
                  LODWORD(context[0]) = v106;
                  unint64_t v112 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(v110, v111, (__int32 *)context);
                  if (*(__int32 **)(v108 + 240) != v112) {
                    *(void *)(v108 + 240) = v112;
                  }
                  cv3d::cv::gess::isochart::AddNoduplicateItem(v108 + 232, v100);
                }
                if (v109) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v109);
                }
                unint64_t v104 = v105;
                uint64_t v103 = *(void *)(*(void *)v101 + 232);
                ++v105;
              }
              while (v104 < (*(void *)(*(void *)v101 + 240) - v103) >> 2);
              uint64_t v102 = *(void *)(*a1 + 16 * v100);
            }
            uint64_t sig = v155.__m_.__sig;
            *(float *)v155.__m_.__uint64_t sig = -(float)((float)((float)v100 / v98)
                                               + (float)(unint64_t)((uint64_t)(*(void *)(*(void *)(v102 + 40)
                                                                                               + 160)
                                                                                   - *(void *)(*(void *)(v102 + 40)
                                                                                               + 152)) >> 2));
            unsigned long long v140 = __PAIR128__(*(unint64_t *)v155.__m_.__opaque, sig);
            if (*(void *)v155.__m_.__opaque) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v155.__m_.__opaque + 8), 1uLL, memory_order_relaxed);
            }
            cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert(v146, (long long *)&v140);
            if (*((void *)&v140 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
            }
            if (!--v145) {
              int v114 = 6;
            }
            else {
LABEL_174:
            }
              int v114 = 0;
          }
          else
          {
            int v114 = 5;
          }
          if (*(void *)v155.__m_.__opaque) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v155.__m_.__opaque);
          }
        }
        while (v114 != 6 && v148);
      }
      std::mutex::~mutex(&v156);
    }
    if (v142[0]) {
      operator delete(v142[0]);
    }
    if (v143[0])
    {
      v143[1] = v143[0];
      operator delete(v143[0]);
    }
    v156.__m_.__uint64_t sig = (uint64_t)v144;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  }
  return cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)v146);
}

void sub_24F519728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (__p) {
    operator delete(__p);
  }
  if (a48) {
    operator delete(a48);
  }
  *(void *)(v55 - 184) = &a51;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 184));
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        unsigned int v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__append(a1, v5);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateAdjacentChart(void *a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 29);
  a1[30] = a1[29];
  uint64_t v9 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  int v27 = -1;
  int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v9 + 56), (uint64_t)&v27, (unsigned __int8 *)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = a1[5];
  LODWORD(__p[0]) = v10;
  uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v11 + 56), (unsigned int *)__p);
  uint64_t v13 = a1[5];
  uint64_t v15 = *(void *)(v13 + 152);
  uint64_t v14 = *(void *)(v13 + 160);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  uint64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    unint64_t v17 = 0;
    unint64_t v18 = v16 >> 2;
    if (v18 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v18;
    }
    do
    {
      uint64_t v20 = *(void *)(v12 + 40);
      if (v17 >= (*(void *)(v12 + 48) - v20) >> 2) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a4, (unsigned int *)(v20 + 4 * v17), __p);
      for (uint64_t i = 0; i != 12; i += 4)
      {
        uint64_t v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a4 + 104, (unsigned int *)((char *)__p[0] + i));
        uint64_t v23 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a4 + 104, v22) + 16);
        if (v23 != -1)
        {
          __int32 v24 = *(_DWORD *)(*a3 + 4 * v23);
          if (v24 != a2) {
            cv3d::cv::gess::isochart::AddNoduplicateItem(v8, v24);
          }
        }
      }
      ++v17;
    }
    while (v17 != v19);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24F519AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize(uint64_t *a1, unint64_t a2)
{
  return 1;
}

void sub_24F519B50(void *a1)
{
}

float32x4_t cv3d::cv::gess::isochart::IsoChartMesh::CalculateAverageNormal(uint64_t a1, float32x4_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152);
  if (v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v3 >> 2;
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    float32x4_t v8 = 0uLL;
    do
    {
      float32x4_t v11 = v8;
      cv3d::cv::gess::math::FaceNormal(*(void *)(a1 + 40), v5, &v12);
      float32x4_t v8 = vaddq_f32(v11, v12);
      ++v5;
    }
    while (v7 != v5);
  }
  else
  {
    float32x4_t v8 = 0uLL;
  }
  float32x4_t v9 = vmulq_f32(v8, v8);
  v9.i32[3] = 0;
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  v9.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v9.f32));
  float32x4_t result = vdivq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
  *a2 = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *(void *)a2;
  if (!*(void *)a2) {
    return 0;
  }
  unint64_t v5 = a1[4];
  if (v5 >= (a1[1] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::push_back[abi:ne180100](a1, a2);
  }
  else
  {
    unint64_t v6 = (void *)(*a1 + 16 * v5);
    uint64_t v7 = *((void *)a2 + 1);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    float32x4_t v8 = (std::__shared_weak_count *)v6[1];
    *unint64_t v6 = v2;
    v6[1] = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v9 = a1[4];
  *(void *)(*(void *)a2 + 8) = v9;
  a1[4] = v9 + 1;
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(a1, v9);
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::MergeAdjacentChart(uint64_t *a1, void *a2, unsigned int a3, unint64_t a4, void *a5, uint64_t *a6, unsigned char *a7, _DWORD *a8, std::mutex *a9, const float *a10, const float *a11, BOOL a12)
{
  *a7 = 0;
  uint64_t v12 = *a1;
  uint64_t v13 = (uint64_t *)(*a1 + 16 * a3);
  uint64_t v14 = *v13;
  uint64_t v15 = *(void *)(*v13 + 232);
  uint64_t v16 = *(void *)(*v13 + 240) - v15;
  if (!v16) {
    return;
  }
  unint64_t v19 = a3;
  unint64_t v20 = v16 >> 2;
  if (v20 != 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (_DWORD *)(v15 + 4);
    unint64_t v23 = v20 - 1;
    do
    {
      unint64_t v24 = v21 + 1;
      if (*(void *)(v12 + 16 * *(unsigned int *)(v15 + 4 * v21))) {
        BOOL v25 = v24 >= v20;
      }
      else {
        BOOL v25 = 1;
      }
      if (!v25)
      {
        uint64_t v26 = *a6;
        int v27 = v22;
        unint64_t v28 = v23;
        do
        {
          uint64_t v29 = *v27;
          if (*(void *)(v12 + 16 * v29))
          {
            uint64_t v30 = *(unsigned int *)(v15 + 4 * v21);
            float32x4_t v31 = *(float32x4_t *)(v26 + 16 * v19);
            float32x4_t v32 = vmulq_f32(v31, *(float32x4_t *)(v26 + 16 * v30));
            v32.i32[3] = 0;
            float32x4_t v33 = vmulq_f32(v31, *(float32x4_t *)(v26 + 16 * v29));
            v33.i32[3] = 0;
            if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)) < vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)))
            {
              *(_DWORD *)(v15 + 4 * v21) = v29;
              *int v27 = v30;
            }
          }
          ++v27;
          --v28;
        }
        while (v28);
      }
      --v23;
      ++v22;
      ++v21;
    }
    while (v24 != v20 - 1);
  }
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  *a8 = -1;
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  uint64_t v70 = 0;
  unint64_t v71 = 0;
  unint64_t v36 = (unint64_t)(float)((float)a4 * 0.7);
  if (v36 <= 0x2BC) {
    unint64_t v36 = 700;
  }
  unint64_t v66 = v36;
  if (v20 <= 1) {
    uint64_t v37 = 1;
  }
  else {
    uint64_t v37 = v20;
  }
  while (1)
  {
    unint64_t v38 = *(unsigned int *)(*(void *)(v14 + 232) + 4 * v35);
    if ((*(void *)(*a5 + ((v38 >> 3) & 0x1FFFFFF8)) >> v38)) {
      break;
    }
LABEL_34:
    if (v37 == ++v35)
    {
      std::mutex::lock(a9);
      *(void *)(*a5 + ((v19 >> 3) & 0x1FFFFFF8)) &= ~(1 << v19);
      *a7 = 0;
      std::mutex::unlock(a9);
      float v40 = v34;
      if (v34) {
        goto LABEL_36;
      }
      goto LABEL_37;
    }
  }
  long long v39 = *(_OWORD *)(*a1 + 16 * v38);
  float v40 = *(std::__shared_weak_count **)(*a1 + 16 * v38 + 8);
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v69 = v39;
  if (v34)
  {
    uint64_t v67 = v39;
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    *(void *)&long long v39 = v67;
  }
  if (!(void)v39
    || (uint64_t v41 = *(void *)(*(void *)(v39 + 40) + 160) - *(void *)(*(void *)(v39 + 40) + 152)) == 0
    || ((uint64_t)(*(void *)(*(void *)(*v13 + 40) + 160) - *(void *)(*(void *)(*v13 + 40) + 152)) >> 2)
     + (v41 >> 2) > v66
    || (cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart(a1, v13, (uint64_t)&v69, &v72, &v70, a10, a11, a12),
        (int v42 = v72) == 0))
  {
LABEL_33:
    unint64_t v34 = v40;
    goto LABEL_34;
  }
  BOOL v68 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::TryParameterize(v72, &v68);
  if (!v68)
  {
    float v43 = v73;
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    uint64_t v44 = v71;
    uint64_t v70 = 0;
    unint64_t v71 = 0;
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    goto LABEL_33;
  }
  *a8 = v38;
  uint64_t v45 = *a1;
  if (*(void *)(*(void *)(*a1 + 16 * v38) + 40) != *(void *)(*a2 + 16 * v38))
  {
    uint64_t v61 = "&(children[additional_chart_id]->mesh_) == &(*children_mesh[additional_chart_id])";
    int v62 = 636;
    goto LABEL_64;
  }
  if (*(void *)(*(void *)(v45 + 16 * v19) + 40) != *(void *)(*a2 + 16 * v19))
  {
    uint64_t v61 = "&(children[main_chart_id]->mesh_) == &(*children_mesh[main_chart_id])";
    int v62 = 637;
LABEL_64:
    __assert_rtn("MergeAdjacentChart", "MergeCharts.cpp", v62, v61);
  }
  uint64_t v46 = (void *)(v45 + 16 * v38);
  BOOL v47 = (std::__shared_weak_count *)v46[1];
  void *v46 = 0;
  v46[1] = 0;
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  int v48 = (void *)(*a1 + 16 * v19);
  unint64_t v49 = (std::__shared_weak_count *)v48[1];
  *int v48 = 0;
  v48[1] = 0;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  uint64_t v50 = (void *)(*a2 + 16 * *a8);
  int v51 = (std::__shared_weak_count *)v50[1];
  *uint64_t v50 = 0;
  v50[1] = 0;
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  uint64_t v52 = (void *)(*a2 + 16 * v19);
  unsigned int v53 = (std::__shared_weak_count *)v52[1];
  void *v52 = 0;
  v52[1] = 0;
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  unint64_t v54 = (cv3d::cv::gess::isochart::IsoChartMesh **)(*a1 + 16 * v19);
  uint64_t v55 = v73;
  if (v73) {
    atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v56 = (std::__shared_weak_count *)v54[1];
  *unint64_t v54 = v42;
  v54[1] = (cv3d::cv::gess::isochart::IsoChartMesh *)v55;
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  uint64_t v57 = (cv3d::cv::gess::isochart **)(*a2 + 16 * v19);
  uint64_t v59 = v70;
  uint64_t v58 = v71;
  if (v71) {
    atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v60 = (std::__shared_weak_count *)v57[1];
  *uint64_t v57 = v59;
  v57[1] = (cv3d::cv::gess::isochart *)v58;
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  *a7 = 1;
  if (v40) {
LABEL_36:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
LABEL_37:
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
}

void sub_24F51A0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  int v27 = *(std::__shared_weak_count **)(v25 - 104);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::emplace_back<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  unint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)v4, v13);
    uint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v19[2] = v15 + 16;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_24F51A230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart(void *a1, uint64_t *a2, uint64_t a3, void *a4, cv3d::cv::gess::isochart **a5, const float *a6, const float *a7, BOOL a8)
{
  if (!*a2) {
    cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart();
  }
  if (!*(void *)a3) {
    cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart();
  }
  uint64_t v16 = (std::__shared_weak_count *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::vector<unsigned int>::vector(&v60, (uint64_t)(*(void *)(*(void *)(*a2 + 40) + 112) - *(void *)(*(void *)(*a2 + 40) + 104)) >> 2);
  std::vector<BOOL>::vector(v59, (uint64_t)(*(void *)(*(void *)(*a2 + 40) + 112) - *(void *)(*(void *)(*a2 + 40) + 104)) >> 2);
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  std::vector<unsigned int> __p = 0;
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  char v52 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts((uint64_t)a2, a3, &v60, v59, &v56, &__p, &v52);
  if (v52)
  {
    uint64_t v17 = v57 - (unsigned char *)v56;
    if ((unint64_t)(v57 - (unsigned char *)v56) >= 8)
    {
      char v51 = 0;
      cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology((uint64_t)&v56, *(void *)(*a2 + 40), &v51);
      if (v51)
      {
        cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology((uint64_t)&__p, *(void *)(*(void *)a3 + 40), &v51);
        if (v51)
        {
          unint64_t v49 = 0;
          uint64_t v50 = 0;
          BOOL v47 = 0;
          int v48 = 0;
          cv3d::cv::gess::isochart::IsoChartMesh::MergeTwoCharts(a2, a3, (uint64_t *)&v60, v59, v17 >> 2, (uint64_t)&v49, &v47, a6, a7, a8);
          unint64_t v18 = v47;
          if (cv3d::cv::gess::isochart::IsVertexManifold(v47, v19)
            && cv3d::cv::gess::isochart::IsochartCountBoundaryLoops((uint64_t)v18) <= 1)
          {
            uint64_t v45 = v18;
            unint64_t v20 = v49;
            uint64_t v21 = v49 + 29;
            uint64_t v22 = *(void *)a3;
            uint64_t v23 = *(void *)(*(void *)a3 + 232);
            if (*(void *)(*(void *)a3 + 240) != v23)
            {
              unint64_t v24 = 0;
              uint64_t v46 = (uint64_t)(v49 + 31);
              do
              {
                uint64_t v25 = *(unsigned int *)(v23 + 4 * v24);
                if (*(void *)(*a1 + 16 * v25) != *a2)
                {
                  int v27 = (_DWORD *)v20[30];
                  unint64_t v26 = v20[31];
                  if ((unint64_t)v27 >= v26)
                  {
                    uint64_t v29 = (_DWORD *)*v21;
                    uint64_t v30 = ((uint64_t)v27 - *v21) >> 2;
                    unint64_t v31 = v30 + 1;
                    if ((unint64_t)(v30 + 1) >> 62) {
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v32 = v26 - (void)v29;
                    if (v32 >> 1 > v31) {
                      unint64_t v31 = v32 >> 1;
                    }
                    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v33 = v31;
                    }
                    if (v33)
                    {
                      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v46, v33);
                      uint64_t v29 = (_DWORD *)v20[29];
                      int v27 = (_DWORD *)v20[30];
                      LODWORD(v25) = *(_DWORD *)(v23 + 4 * v24);
                    }
                    else
                    {
                      unint64_t v34 = 0;
                    }
                    uint64_t v35 = &v34[4 * v30];
                    *(_DWORD *)uint64_t v35 = v25;
                    unint64_t v28 = v35 + 4;
                    while (v27 != v29)
                    {
                      int v36 = *--v27;
                      *((_DWORD *)v35 - 1) = v36;
                      v35 -= 4;
                    }
                    v20[29] = v35;
                    v20[30] = v28;
                    v20[31] = &v34[4 * v33];
                    if (v29) {
                      operator delete(v29);
                    }
                  }
                  else
                  {
                    *int v27 = v25;
                    unint64_t v28 = v27 + 1;
                  }
                  v20[30] = v28;
                  uint64_t v22 = *(void *)a3;
                }
                ++v24;
                uint64_t v23 = *(void *)(v22 + 232);
              }
              while (v24 < (*(void *)(v22 + 240) - v23) >> 2);
            }
            uint64_t v37 = *a2;
            uint64_t v38 = *(void *)(*a2 + 232);
            if (*(void *)(*a2 + 240) != v38)
            {
              unint64_t v39 = 0;
              do
              {
                uint64_t v40 = *(unsigned int *)(v38 + 4 * v39);
                if (*(void *)(*a1 + 16 * v40) != *(void *)a3)
                {
                  cv3d::cv::gess::isochart::AddNoduplicateItem((uint64_t)v21, v40);
                  uint64_t v37 = *a2;
                }
                ++v39;
                uint64_t v38 = *(void *)(v37 + 232);
              }
              while (v39 < (*(void *)(v37 + 240) - v38) >> 2);
            }
            uint64_t v41 = v50;
            if (v50) {
              atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v42 = (std::__shared_weak_count *)a4[1];
            *a4 = v20;
            a4[1] = v41;
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            float v43 = v48;
            if (v48) {
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v44 = (std::__shared_weak_count *)a5[1];
            *a5 = v45;
            a5[1] = (cv3d::cv::gess::isochart *)v43;
            if (v44) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v44);
            }
          }
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          if (v50) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          }
        }
      }
    }
  }
  if (__p)
  {
    unint64_t v54 = __p;
    operator delete(__p);
  }
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
  if (v59[0]) {
    operator delete(v59[0]);
  }
  if (v60.__begin_)
  {
    v60.__end_ = v60.__begin_;
    operator delete(v60.__begin_);
  }
}

void sub_24F51A5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  unint64_t v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::TryParameterize(cv3d::cv::gess::isochart::IsoChartMesh *this, BOOL *a2)
{
  *a2 = 0;
  uint64_t result = cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization(this);
  if (result)
  {
    uint64_t v5 = *((void *)this + 4);
    if (!v5 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5), (result & 1) == 0))
    {
      LOWORD(v9) = 256;
      BYTE2(v9) = 1;
      int64x2_t v10 = vdupq_n_s64(0xAuLL);
      uint64_t v11 = 20;
      long long v12 = xmmword_24F5788C0;
      uint64_t v13 = 0x7F7FFFFFFF7FFFFFLL;
      uint64_t v14 = -1;
      memset(v15, 0, sizeof(v15));
      char v16 = 0;
      memset(v17, 0, sizeof(v17));
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v8 = 0;
      unint64_t v21 = 0;
      float v7 = 0.0;
      *a2 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(this, &v9, (float *)&v8 + 1, (float *)&v8, &v21, &v7, 0);
      uint64_t v6 = *((void *)this + 4);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      }
      if (*((void *)&v19 + 1))
      {
        *(void *)&long long v20 = *((void *)&v19 + 1);
        operator delete(*((void **)&v19 + 1));
      }
      if ((void)v18)
      {
        *((void *)&v18 + 1) = v18;
        operator delete((void *)v18);
      }
      unint64_t v21 = (unint64_t)v17 + 8;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      return cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v15);
    }
  }
  return result;
}

void sub_24F51A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo((cv3d::cv::gess::isochart::ChartOptimizeInfo *)va);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, unsigned char *a7)
{
  *a7 = 0;
  uint64_t v13 = *(void *)(*(void *)a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  unsigned int v76 = -1;
  int v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v13 + 8), (uint64_t)&v76, (unsigned __int8 *)__p);
  if (v75 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *(void *)(*(void *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  unsigned int v76 = -1;
  int v16 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v15 + 8), (uint64_t)&v76, (unsigned __int8 *)__p);
  if (v75 < 0) {
    operator delete(__p[0]);
  }
  if (v14 == -1) {
    cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts();
  }
  if (v16 == -1) {
    cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts();
  }
  long long v69 = a7;
  uint64_t v17 = *(void *)(*(void *)a1 + 40);
  LODWORD(__p[0]) = v14;
  uint64_t v72 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v17 + 8), (unsigned int *)__p);
  uint64_t v18 = *(void *)(*(void *)a2 + 40);
  LODWORD(__p[0]) = v16;
  uint64_t v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v18 + 8), (unsigned int *)__p);
  unint64_t v19 = (uint64_t)(*(void *)(*(void *)(*(void *)a2 + 40) + 112)
                - *(void *)(*(void *)(*(void *)a2 + 40) + 104)) >> 2;
  std::vector<BOOL>::vector(__p, v19);
  uint64_t v20 = *(void *)(*(void *)a2 + 40);
  if (*(void *)(v20 + 112) != *(void *)(v20 + 104))
  {
    unint64_t v21 = 0;
    do
    {
      unsigned int v76 = v21;
      BOOL is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary(v20, (uint64_t)&v76);
      unint64_t v23 = v21 >> 6;
      uint64_t v24 = 1 << v21;
      if (is_boundary) {
        uint64_t v25 = *((void *)__p[0] + v23) | v24;
      }
      else {
        uint64_t v25 = *((void *)__p[0] + v23) & ~v24;
      }
      *((void *)__p[0] + v23) = v25;
      ++v21;
      uint64_t v20 = *(void *)(*(void *)a2 + 40);
    }
    while (v21 < (uint64_t)(*(void *)(v20 + 112) - *(void *)(v20 + 104)) >> 2);
  }
  uint64_t v26 = *(void *)(*(void *)a1 + 40);
  if (*(void *)(v26 + 112) != *(void *)(v26 + 104))
  {
    unint64_t v27 = 0;
    uint64_t v67 = (uint64_t)(a5 + 2);
    BOOL v68 = a6 + 2;
    uint64_t v70 = a5;
    do
    {
      unsigned int v76 = v27;
      *(void *)(*a4 + 8 * (v27 >> 6)) |= 1 << v27;
      if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(v26, (uint64_t)&v76))
      {
        uint64_t v28 = *(void *)(*(void *)(*(void *)a2 + 40) + 112)
            - *(void *)(*(void *)(*(void *)a2 + 40) + 104);
        if (!v28) {
          goto LABEL_34;
        }
        unint64_t v29 = 0;
        uint64_t v30 = 0;
        unint64_t v31 = v27 >> 6;
        unint64_t v32 = v28 >> 2;
        uint64_t v33 = *(void *)(v72 + 40);
        uint64_t v34 = *(void *)(v71 + 40);
        int v35 = -1;
        unsigned int v36 = 1;
        do
        {
          if ((*(void *)((char *)__p[0] + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29))
          {
            if ((*(void *)(v72 + 48) - v33) >> 2 <= (unint64_t)v76
              || (*(void *)(v71 + 48) - v34) >> 2 <= v29)
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            if (*(_DWORD *)(v33 + 4 * v76) == *(_DWORD *)(v34 + 4 * v29))
            {
              if (v30) {
                goto LABEL_72;
              }
              int v35 = v36 - 1;
              uint64_t v30 = 1;
            }
          }
          unint64_t v29 = v36;
        }
        while (v32 > v36++);
        if (v30 == 1)
        {
          uint64_t v38 = (int *)*a6;
          unint64_t v39 = (int *)a6[1];
          uint64_t v40 = (int *)*a6;
          if ((int *)*a6 != v39)
          {
            while (*v40 != v35)
            {
              if (++v40 == v39)
              {
                uint64_t v40 = (int *)a6[1];
                break;
              }
            }
          }
          if (v40 != v39) {
            goto LABEL_72;
          }
          if ((unint64_t)v39 >= *v68)
          {
            uint64_t v43 = v39 - v38;
            if ((unint64_t)(v43 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v44 = *v68 - (void)v38;
            uint64_t v45 = v44 >> 1;
            if (v44 >> 1 <= (unint64_t)(v43 + 1)) {
              uint64_t v45 = v43 + 1;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v45;
            }
            if (v46) {
              BOOL v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v68, v46);
            }
            else {
              BOOL v47 = 0;
            }
            int v48 = (int *)&v47[4 * v43];
            *int v48 = v35;
            uint64_t v41 = v48 + 1;
            uint64_t v50 = (int *)*a6;
            unint64_t v49 = (char *)a6[1];
            if (v49 == (char *)*a6)
            {
              int v42 = (int **)a6;
            }
            else
            {
              do
              {
                int v51 = *((_DWORD *)v49 - 1);
                v49 -= 4;
                *--int v48 = v51;
              }
              while (v49 != (char *)v50);
              int v42 = (int **)a6;
              unint64_t v49 = (char *)*a6;
            }
            *int v42 = v48;
            v42[1] = v41;
            void v42[2] = (int *)&v47[4 * v46];
            if (v49)
            {
              operator delete(v49);
              int v42 = (int **)a6;
            }
            unint64_t v31 = v27 >> 6;
            a5 = v70;
          }
          else
          {
            int *v39 = v35;
            uint64_t v41 = v39 + 1;
            int v42 = (int **)a6;
          }
          v42[1] = v41;
          unsigned int v53 = (unsigned int *)a5[1];
          unint64_t v52 = a5[2];
          if ((unint64_t)v53 >= v52)
          {
            uint64_t v55 = *a5;
            uint64_t v56 = ((uint64_t)v53 - *a5) >> 2;
            if ((unint64_t)(v56 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v57 = v31;
            uint64_t v58 = v52 - v55;
            uint64_t v59 = v58 >> 1;
            if (v58 >> 1 <= (unint64_t)(v56 + 1)) {
              uint64_t v59 = v56 + 1;
            }
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v59;
            }
            if (v60) {
              uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v67, v60);
            }
            else {
              uint64_t v61 = 0;
            }
            int v62 = (unsigned int *)&v61[4 * v56];
            *int v62 = v76;
            unint64_t v54 = v62 + 1;
            uint64_t v64 = (char *)*v70;
            uint64_t v63 = (char *)v70[1];
            if (v63 == (char *)*v70)
            {
              unint64_t v66 = (unsigned int **)v70;
            }
            else
            {
              do
              {
                unsigned int v65 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *--int v62 = v65;
              }
              while (v63 != v64);
              unint64_t v66 = (unsigned int **)v70;
              uint64_t v63 = (char *)*v70;
            }
            *unint64_t v66 = v62;
            v66[1] = v54;
            v66[2] = (unsigned int *)&v61[4 * v60];
            if (v63) {
              operator delete(v63);
            }
            unint64_t v31 = v57;
            a5 = v70;
          }
          else
          {
            *unsigned int v53 = v76;
            unint64_t v54 = v53 + 1;
          }
          a5[1] = v54;
          *(_DWORD *)(*a3 + 4 * v27) = v35;
          *(void *)(*a4 + 8 * v31) &= ~(1 << v27);
        }
        else
        {
LABEL_34:
          *(_DWORD *)(*a3 + 4 * v27) = v19++;
        }
      }
      else
      {
        *(_DWORD *)(*a3 + 4 * v27) = v19++;
      }
      ++v27;
      uint64_t v26 = *(void *)(*(void *)a1 + 40);
    }
    while (v27 < (uint64_t)(*(void *)(v26 + 112) - *(void *)(v26 + 104)) >> 2);
  }
  unsigned char *v69 = 1;
LABEL_72:
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_24F51AD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(unsigned int **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology();
  }
  *a3 = 0;
  __dst = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unsigned int v42 = *v3;
  float v7 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v45, 1uLL);
  uint64_t v9 = (char *)&v7[v8];
  *float v7 = v42;
  int64x2_t v10 = v7 + 1;
  long long v12 = (char *)__dst;
  uint64_t v11 = (char *)v44;
  if (v44 != __dst)
  {
    do
    {
      unsigned int v13 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--float v7 = v13;
    }
    while (v11 != v12);
    uint64_t v11 = (char *)__dst;
  }
  __dst = v7;
  uint64_t v44 = v10;
  uint64_t v45 = v9;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v44 = v10;
  uint64_t v15 = *(unsigned int **)a1;
  int v14 = *(unsigned char **)(a1 + 8);
  int v16 = (unsigned char *)(*(void *)a1 + 4);
  int64_t v17 = v14 - v16;
  if (v14 != v16)
  {
    memmove(*(void **)a1, v16, v14 - v16);
    int64x2_t v10 = v44;
  }
  uint64_t v18 = (char *)v15 + v17;
  *(void *)(a1 + 8) = (char *)v15 + v17;
  unint64_t v19 = (unsigned int *)__dst;
  if (__dst != v10)
  {
    uint64_t v20 = (void *)(a2 + 104);
    do
    {
      unsigned int v42 = *v19;
      size_t v21 = (char *)v10 - (char *)(v19 + 1);
      if (v21) {
        memmove(v19, v19 + 1, v21);
      }
      uint64_t v44 = (unsigned int *)((char *)v19 + v21);
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v41, v20, &v42);
      for (unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v41);
            i != -1;
            unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v41))
      {
        unint64_t v23 = *(unsigned int **)a1;
        uint64_t v24 = *(void *)(a1 + 8) - *(void *)a1;
        if (v24)
        {
          uint64_t v25 = 0;
          unint64_t v26 = v24 >> 2;
          if (v26 <= 1) {
            unint64_t v26 = 1;
          }
          while (v23[v25] != i)
          {
            ++v25;
            if (!--v26) {
              goto LABEL_40;
            }
          }
          unint64_t v27 = v44;
          if (v44 >= (unsigned int *)v45)
          {
            uint64_t v29 = ((char *)v44 - (unsigned char *)__dst) >> 2;
            if ((unint64_t)(v29 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v30 = (v45 - (unsigned char *)__dst) >> 1;
            if (v30 <= v29 + 1) {
              unint64_t v30 = v29 + 1;
            }
            if ((unint64_t)(v45 - (unsigned char *)__dst) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            if (v31)
            {
              unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v45, v31);
              unsigned int i = v23[v25];
            }
            else
            {
              unint64_t v32 = 0;
            }
            uint64_t v33 = &v32[4 * v29];
            *(_DWORD *)uint64_t v33 = i;
            uint64_t v28 = (unsigned int *)(v33 + 4);
            int v35 = (char *)__dst;
            uint64_t v34 = (char *)v44;
            if (v44 != __dst)
            {
              do
              {
                int v36 = *((_DWORD *)v34 - 1);
                v34 -= 4;
                *((_DWORD *)v33 - 1) = v36;
                v33 -= 4;
              }
              while (v34 != v35);
              uint64_t v34 = (char *)__dst;
            }
            __dst = v33;
            uint64_t v44 = v28;
            uint64_t v45 = &v32[4 * v31];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *uint64_t v44 = i;
            uint64_t v28 = v27 + 1;
          }
          uint64_t v44 = v28;
          uint64_t v37 = *(void *)(a1 + 8);
          uint64_t v38 = *(void *)a1 + v25 * 4;
          uint64_t v39 = v37 - *(void *)a1 - v25 * 4;
          uint64_t v40 = v39 - 4;
          if (v38 + 4 != v37) {
            memmove((void *)v38, (const void *)(v38 + 4), v39 - 4);
          }
          *(void *)(a1 + 8) = v38 + (v40 & 0xFFFFFFFFFFFFFFFCLL);
        }
LABEL_40:
        ;
      }
      unint64_t v19 = (unsigned int *)__dst;
      int64x2_t v10 = v44;
    }
    while (__dst != v44);
    uint64_t v18 = *(char **)(a1 + 8);
    int64x2_t v10 = (unsigned int *)__dst;
  }
  if (*(char **)a1 == v18) {
    *a3 = 1;
  }
  if (v10)
  {
    uint64_t v44 = v10;
    operator delete(v10);
  }
}

void sub_24F51B04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::MergeTwoCharts(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, cv3d::cv::gess::mesh::TriMesh **a7, const float *a8, const float *a9, BOOL a10)
{
  BOOL v391 = a10;
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v388);
  long long v15 = v388;
  long long v388 = 0uLL;
  int v16 = (std::__shared_weak_count *)a7[1];
  *(_OWORD *)a7 = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (*((void *)&v388 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v388 + 1));
    }
  }
  unsigned int v390 = -1;
  int64_t v17 = *a7;
  if (v391)
  {
    std::string::basic_string[abi:ne180100]<0>(&v388, "f:imt");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v17, &v390, &v388);
    if (SHIBYTE(v389) < 0) {
      operator delete((void *)v388);
    }
    int64_t v17 = *a7;
  }
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,void>(v17, a8, a9, &v391, &v388);
  long long v18 = v388;
  long long v388 = 0uLL;
  unint64_t v19 = *(std::__shared_weak_count **)(a6 + 8);
  *(_OWORD *)a6 = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (*((void *)&v388 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v388 + 1));
    }
  }
  long long v388 = 0uLL;
  v389 = 0;
  memset(&v387, 0, sizeof(v387));
  std::vector<float>::reserve((void **)&v388, 3* (((uint64_t)(*(void *)(*(void *)(*(void *)a2 + 40) + 112)- *(void *)(*(void *)(*(void *)a2 + 40) + 104)) >> 2)- a5+ ((uint64_t)(*(void *)(*(void *)(*a1 + 40) + 112) - *(void *)(*(void *)(*a1 + 40) + 104)) >> 2)));
  std::vector<unsigned int>::reserve(&v387, 3* (((uint64_t)(*(void *)(*(void *)(*a1 + 40) + 160) - *(void *)(*(void *)(*a1 + 40) + 152)) >> 2)+ ((uint64_t)(*(void *)(*(void *)(*(void *)a2 + 40) + 160)- *(void *)(*(void *)(*(void *)a2 + 40) + 152)) >> 2)));
  uint64_t v20 = *(void *)(*(void *)a2 + 40);
  if (*(void *)(v20 + 112) != *(void *)(v20 + 104))
  {
    unint64_t v21 = 0;
    do
    {
      LODWORD(v386[0]) = *(_DWORD *)(v20 + 176);
      uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v20 + 8), (unsigned int *)v386);
      uint64_t v23 = *(void *)(v22 + 40);
      if (v21 >= (*(void *)(v22 + 48) - v23) >> 4) {
        goto LABEL_312;
      }
      uint64_t v24 = (_DWORD *)(v23 + 16 * v21);
      uint64_t v25 = (char *)*((void *)&v388 + 1);
      if (*((void *)&v388 + 1) >= (unint64_t)v389)
      {
        unint64_t v27 = (char *)v388;
        uint64_t v28 = (uint64_t)(*((void *)&v388 + 1) - v388) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          goto LABEL_335;
        }
        uint64_t v30 = (uint64_t)&v389[-v388];
        if ((uint64_t)&v389[-v388] >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v389, v31);
          uint64_t v25 = (char *)*((void *)&v388 + 1);
          unint64_t v27 = (char *)v388;
        }
        else
        {
          unint64_t v32 = 0;
        }
        uint64_t v33 = &v32[4 * v28];
        *(_DWORD *)uint64_t v33 = *v24;
        unint64_t v26 = v33 + 4;
        while (v25 != v27)
        {
          int v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        *(void *)&long long v388 = v33;
        *((void *)&v388 + 1) = v26;
        v389 = &v32[4 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        **((_DWORD **)&v388 + 1) = *v24;
        unint64_t v26 = v25 + 4;
      }
      *((void *)&v388 + 1) = v26;
      uint64_t v35 = *(void *)(*(void *)a2 + 40);
      LODWORD(v386[0]) = *(_DWORD *)(v35 + 176);
      uint64_t v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v35 + 8), (unsigned int *)v386);
      uint64_t v37 = *(void *)(v36 + 40);
      if (v21 >= (*(void *)(v36 + 48) - v37) >> 4) {
        goto LABEL_312;
      }
      uint64_t v38 = v37 + 16 * v21;
      uint64_t v39 = (char *)*((void *)&v388 + 1);
      if (*((void *)&v388 + 1) >= (unint64_t)v389)
      {
        uint64_t v41 = (char *)v388;
        uint64_t v42 = (uint64_t)(*((void *)&v388 + 1) - v388) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          goto LABEL_335;
        }
        uint64_t v44 = (uint64_t)&v389[-v388];
        if ((uint64_t)&v389[-v388] >> 1 > v43) {
          unint64_t v43 = v44 >> 1;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v389, v45);
          uint64_t v39 = (char *)*((void *)&v388 + 1);
          uint64_t v41 = (char *)v388;
        }
        else
        {
          unint64_t v46 = 0;
        }
        BOOL v47 = &v46[4 * v42];
        *(_DWORD *)BOOL v47 = *(_DWORD *)(v38 + 4);
        uint64_t v40 = v47 + 4;
        while (v39 != v41)
        {
          int v48 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        *(void *)&long long v388 = v47;
        *((void *)&v388 + 1) = v40;
        v389 = &v46[4 * v45];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        **((_DWORD **)&v388 + 1) = *(_DWORD *)(v38 + 4);
        uint64_t v40 = v39 + 4;
      }
      *((void *)&v388 + 1) = v40;
      uint64_t v49 = *(void *)(*(void *)a2 + 40);
      LODWORD(v386[0]) = *(_DWORD *)(v49 + 176);
      uint64_t v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v49 + 8), (unsigned int *)v386);
      uint64_t v51 = *(void *)(v50 + 40);
      if (v21 >= (*(void *)(v50 + 48) - v51) >> 4) {
LABEL_312:
      }
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      uint64_t v52 = v51 + 16 * v21;
      unsigned int v53 = (char *)*((void *)&v388 + 1);
      if (*((void *)&v388 + 1) >= (unint64_t)v389)
      {
        uint64_t v55 = (char *)v388;
        uint64_t v56 = (uint64_t)(*((void *)&v388 + 1) - v388) >> 2;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62) {
LABEL_335:
        }
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        uint64_t v58 = (uint64_t)&v389[-v388];
        if ((uint64_t)&v389[-v388] >> 1 > v57) {
          unint64_t v57 = v58 >> 1;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          unint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v389, v59);
          unsigned int v53 = (char *)*((void *)&v388 + 1);
          uint64_t v55 = (char *)v388;
        }
        else
        {
          unint64_t v60 = 0;
        }
        uint64_t v61 = &v60[4 * v56];
        *(_DWORD *)uint64_t v61 = *(_DWORD *)(v52 + 8);
        unint64_t v54 = v61 + 4;
        while (v53 != v55)
        {
          int v62 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        *(void *)&long long v388 = v61;
        *((void *)&v388 + 1) = v54;
        v389 = &v60[4 * v59];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        **((_DWORD **)&v388 + 1) = *(_DWORD *)(v52 + 8);
        unint64_t v54 = v53 + 4;
      }
      *((void *)&v388 + 1) = v54;
      ++v21;
      uint64_t v20 = *(void *)(*(void *)a2 + 40);
    }
    while (v21 < (uint64_t)(*(void *)(v20 + 112) - *(void *)(v20 + 104)) >> 2);
  }
  uint64_t v63 = *a1;
  uint64_t v64 = *(void *)(*a1 + 40);
  if (*(void *)(v64 + 112) != *(void *)(v64 + 104))
  {
    unint64_t v65 = 0;
    do
    {
      if ((*(void *)(*a4 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v65))
      {
        LODWORD(v386[0]) = *(_DWORD *)(v64 + 176);
        uint64_t v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v64 + 8), (unsigned int *)v386);
        uint64_t v67 = *(void *)(v66 + 40);
        if (v65 >= (*(void *)(v66 + 48) - v67) >> 4) {
          goto LABEL_315;
        }
        BOOL v68 = (_DWORD *)(v67 + 16 * v65);
        long long v69 = (char *)*((void *)&v388 + 1);
        if (*((void *)&v388 + 1) >= (unint64_t)v389)
        {
          uint64_t v71 = (char *)v388;
          uint64_t v72 = (uint64_t)(*((void *)&v388 + 1) - v388) >> 2;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            goto LABEL_336;
          }
          uint64_t v74 = (uint64_t)&v389[-v388];
          if ((uint64_t)&v389[-v388] >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            unsigned int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v389, v75);
            long long v69 = (char *)*((void *)&v388 + 1);
            uint64_t v71 = (char *)v388;
          }
          else
          {
            unsigned int v76 = 0;
          }
          uint64_t v77 = &v76[4 * v72];
          *(_DWORD *)uint64_t v77 = *v68;
          uint64_t v70 = v77 + 4;
          while (v69 != v71)
          {
            int v78 = *((_DWORD *)v69 - 1);
            v69 -= 4;
            *((_DWORD *)v77 - 1) = v78;
            v77 -= 4;
          }
          *(void *)&long long v388 = v77;
          *((void *)&v388 + 1) = v70;
          v389 = &v76[4 * v75];
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          **((_DWORD **)&v388 + 1) = *v68;
          uint64_t v70 = v69 + 4;
        }
        *((void *)&v388 + 1) = v70;
        uint64_t v79 = *(void *)(*a1 + 40);
        LODWORD(v386[0]) = *(_DWORD *)(v79 + 176);
        uint64_t v80 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v79 + 8), (unsigned int *)v386);
        uint64_t v81 = *(void *)(v80 + 40);
        if (v65 >= (*(void *)(v80 + 48) - v81) >> 4) {
          goto LABEL_315;
        }
        uint64_t v82 = v81 + 16 * v65;
        unint64_t v83 = (char *)*((void *)&v388 + 1);
        if (*((void *)&v388 + 1) >= (unint64_t)v389)
        {
          unint64_t v85 = (char *)v388;
          uint64_t v86 = (uint64_t)(*((void *)&v388 + 1) - v388) >> 2;
          unint64_t v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 62) {
            goto LABEL_336;
          }
          uint64_t v88 = (uint64_t)&v389[-v388];
          if ((uint64_t)&v389[-v388] >> 1 > v87) {
            unint64_t v87 = v88 >> 1;
          }
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v87;
          }
          if (v89)
          {
            float v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v389, v89);
            unint64_t v83 = (char *)*((void *)&v388 + 1);
            unint64_t v85 = (char *)v388;
          }
          else
          {
            float v90 = 0;
          }
          float v91 = &v90[4 * v86];
          *(_DWORD *)float v91 = *(_DWORD *)(v82 + 4);
          uint64_t v84 = v91 + 4;
          while (v83 != v85)
          {
            int v92 = *((_DWORD *)v83 - 1);
            v83 -= 4;
            *((_DWORD *)v91 - 1) = v92;
            v91 -= 4;
          }
          *(void *)&long long v388 = v91;
          *((void *)&v388 + 1) = v84;
          v389 = &v90[4 * v89];
          if (v85) {
            operator delete(v85);
          }
        }
        else
        {
          **((_DWORD **)&v388 + 1) = *(_DWORD *)(v82 + 4);
          uint64_t v84 = v83 + 4;
        }
        *((void *)&v388 + 1) = v84;
        uint64_t v93 = *(void *)(*a1 + 40);
        LODWORD(v386[0]) = *(_DWORD *)(v93 + 176);
        uint64_t v94 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v93 + 8), (unsigned int *)v386);
        uint64_t v95 = *(void *)(v94 + 40);
        if (v65 >= (*(void *)(v94 + 48) - v95) >> 4) {
LABEL_315:
        }
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        uint64_t v96 = v95 + 16 * v65;
        float v97 = (char *)*((void *)&v388 + 1);
        if (*((void *)&v388 + 1) >= (unint64_t)v389)
        {
          uint64_t v99 = (char *)v388;
          uint64_t v100 = (uint64_t)(*((void *)&v388 + 1) - v388) >> 2;
          unint64_t v101 = v100 + 1;
          if ((unint64_t)(v100 + 1) >> 62) {
LABEL_336:
          }
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          uint64_t v102 = (uint64_t)&v389[-v388];
          if ((uint64_t)&v389[-v388] >> 1 > v101) {
            unint64_t v101 = v102 >> 1;
          }
          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v103 = v101;
          }
          if (v103)
          {
            unint64_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v389, v103);
            float v97 = (char *)*((void *)&v388 + 1);
            uint64_t v99 = (char *)v388;
          }
          else
          {
            unint64_t v104 = 0;
          }
          unsigned int v105 = &v104[4 * v100];
          *(_DWORD *)unsigned int v105 = *(_DWORD *)(v96 + 8);
          float v98 = v105 + 4;
          while (v97 != v99)
          {
            int v106 = *((_DWORD *)v97 - 1);
            v97 -= 4;
            *((_DWORD *)v105 - 1) = v106;
            v105 -= 4;
          }
          *(void *)&long long v388 = v105;
          *((void *)&v388 + 1) = v98;
          v389 = &v104[4 * v103];
          if (v99) {
            operator delete(v99);
          }
        }
        else
        {
          **((_DWORD **)&v388 + 1) = *(_DWORD *)(v96 + 8);
          float v98 = v97 + 4;
        }
        *((void *)&v388 + 1) = v98;
        uint64_t v63 = *a1;
      }
      ++v65;
      uint64_t v64 = *(void *)(v63 + 40);
    }
    while (v65 < (uint64_t)(*(void *)(v64 + 112) - *(void *)(v64 + 104)) >> 2);
  }
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v386, 3uLL);
  uint64_t v107 = *(void *)(*(void *)a2 + 40);
  if (*(void *)(v107 + 160) != *(void *)(v107 + 152))
  {
    unint64_t v108 = 0;
    do
    {
      LODWORD(__p[0]) = v108;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v107, (unsigned int *)__p, v386);
      uint64_t v109 = 0;
      std::vector<int>::pointer end = v387.__end_;
      do
      {
        int v111 = *((_DWORD *)v386[0] + v109);
        if (end >= v387.__end_cap_.__value_)
        {
          begiuint64_t n = v387.__begin_;
          uint64_t v114 = end - v387.__begin_;
          unint64_t v115 = v114 + 1;
          if ((unint64_t)(v114 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          int64_t v116 = (char *)v387.__end_cap_.__value_ - (char *)v387.__begin_;
          if (((char *)v387.__end_cap_.__value_ - (char *)v387.__begin_) >> 1 > v115) {
            unint64_t v115 = v116 >> 1;
          }
          if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v117 = v115;
          }
          if (v117)
          {
            uint64_t v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v387.__end_cap_, v117);
            begiuint64_t n = v387.__begin_;
            std::vector<int>::pointer end = v387.__end_;
          }
          else
          {
            uint64_t v118 = 0;
          }
          uint64_t v119 = (int *)&v118[4 * v114];
          *uint64_t v119 = v111;
          unint64_t v112 = v119 + 1;
          while (end != begin)
          {
            int v120 = *--end;
            *--uint64_t v119 = v120;
          }
          v387.__begin_ = v119;
          v387.__end_ = v112;
          v387.__end_cap_.__value_ = (int *)&v118[4 * v117];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *std::vector<int>::pointer end = v111;
          unint64_t v112 = end + 1;
        }
        v387.__end_ = v112;
        ++v109;
        std::vector<int>::pointer end = v112;
      }
      while (v109 != 3);
      ++v108;
      uint64_t v107 = *(void *)(*(void *)a2 + 40);
    }
    while (v108 < (uint64_t)(*(void *)(v107 + 160) - *(void *)(v107 + 152)) >> 2);
  }
  uint64_t v121 = *(void *)(*a1 + 40);
  if (*(void *)(v121 + 160) != *(void *)(v121 + 152))
  {
    unint64_t v122 = 0;
    do
    {
      LODWORD(__p[0]) = v122;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v121, (unsigned int *)__p, v386);
      uint64_t v123 = 0;
      std::vector<int>::pointer v124 = v387.__end_;
      do
      {
        uint64_t v125 = *((unsigned int *)v386[0] + v123);
        uint64_t v126 = *a3;
        if (v124 >= v387.__end_cap_.__value_)
        {
          std::vector<int>::pointer v128 = v387.__begin_;
          uint64_t v129 = v124 - v387.__begin_;
          unint64_t v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          int64_t v131 = (char *)v387.__end_cap_.__value_ - (char *)v387.__begin_;
          if (((char *)v387.__end_cap_.__value_ - (char *)v387.__begin_) >> 1 > v130) {
            unint64_t v130 = v131 >> 1;
          }
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v132 = v130;
          }
          if (v132)
          {
            uint64_t v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v387.__end_cap_, v132);
            std::vector<int>::pointer v128 = v387.__begin_;
            std::vector<int>::pointer v124 = v387.__end_;
          }
          else
          {
            uint64_t v133 = 0;
          }
          uint64_t v134 = (int *)&v133[4 * v129];
          *uint64_t v134 = *(_DWORD *)(v126 + 4 * v125);
          uint64_t v127 = v134 + 1;
          while (v124 != v128)
          {
            int v135 = *--v124;
            *--uint64_t v134 = v135;
          }
          v387.__begin_ = v134;
          v387.__end_ = v127;
          v387.__end_cap_.__value_ = (int *)&v133[4 * v132];
          if (v128) {
            operator delete(v128);
          }
        }
        else
        {
          void *v124 = *(_DWORD *)(v126 + 4 * v125);
          uint64_t v127 = v124 + 1;
        }
        v387.__end_ = v127;
        ++v123;
        std::vector<int>::pointer v124 = v127;
      }
      while (v123 != 3);
      ++v122;
      uint64_t v121 = *(void *)(*a1 + 40);
    }
    while (v122 < (uint64_t)(*(void *)(v121 + 160) - *(void *)(v121 + 152)) >> 2);
  }
  cv3d::cv::gess::io::MeshFromArray<float,unsigned int>(*a7, &v388, &v387);
  uint64_t v136 = (uint64_t)*a7;
  if (((uint64_t)(*(void *)(*(void *)(*(void *)a2 + 40) + 160)
                - *(void *)(*(void *)(*(void *)a2 + 40) + 152)) >> 2)
     + ((uint64_t)(*(void *)(*(void *)(*a1 + 40) + 160) - *(void *)(*(void *)(*a1 + 40) + 152)) >> 2) != (uint64_t)(*((void *)*a7 + 20) - *((void *)*a7 + 19)) >> 2)
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", 877, "new_mesh->FSize() == (chart1->mesh_.FSize() + chart2->mesh_.FSize())");
  int v384 = -1;
  int v385 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>(v136, &v385, (long long *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v137 = (uint64_t)*a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(v137, &v384, (long long *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v138 = *(void *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  LODWORD(v376) = -1;
  int v139 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v138 + 8), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v140 = *(void *)(*(void *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  LODWORD(v376) = -1;
  int v141 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v140 + 8), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v142 = *(void *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  LODWORD(v376) = 0;
  int v143 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v142 + 8), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v144 = *(void *)(*(void *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  LODWORD(v376) = 0;
  int v145 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v144 + 8), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  if (v139 == -1)
  {
    unint64_t v365 = "v_id_root_mesh1_ah.Valid()";
    int v366 = 892;
    goto LABEL_324;
  }
  if (v141 == -1)
  {
    unint64_t v365 = "v_id_root_mesh2_ah.Valid()";
    int v366 = 893;
LABEL_324:
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", v366, v365);
  }
  unint64_t v146 = *(uint64_t **)(*(void *)a2 + 40);
  if (v146[14] != v146[13])
  {
    unint64_t v147 = 0;
    do
    {
      LODWORD(__p[0]) = v141;
      uint64_t v148 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(v146 + 1, (unsigned int *)__p);
      uint64_t v149 = *(void *)(v148 + 40);
      if (v147 >= (*(void *)(v148 + 48) - v149) >> 2) {
        goto LABEL_311;
      }
      unint64_t v150 = *a7;
      LODWORD(__p[0]) = v385;
      uint64_t v151 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)v150 + 1, (unsigned int *)__p);
      uint64_t v152 = *(void *)(v151 + 40);
      if (v147 >= (*(void *)(v151 + 48) - v152) >> 2) {
        goto LABEL_311;
      }
      *(_DWORD *)(v152 + 4 * v147) = *(_DWORD *)(v149 + 4 * v147);
      uint64_t v153 = *(void *)(*(void *)a2 + 40);
      LODWORD(__p[0]) = v145;
      uint64_t v154 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v153 + 8), (unsigned int *)__p);
      uint64_t v155 = *(void *)(v154 + 40);
      if (v147 >= (*(void *)(v154 + 48) - v155) >> 2
        || (int v156 = *(_DWORD *)(v155 + 4 * v147),
            uint64_t v157 = *a7,
            LODWORD(__p[0]) = v384,
            uint64_t v158 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)v157 + 1, (unsigned int *)__p), v159 = *(void *)(v158 + 40), v147 >= (*(void *)(v158 + 48) - v159) >> 2))
      {
LABEL_311:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v159 + 4 * v147++) = v156;
      unint64_t v146 = *(uint64_t **)(*(void *)a2 + 40);
    }
    while (v147 < (v146[14] - v146[13]) >> 2);
  }
  uint64_t v160 = *a1;
  uint64_t v161 = *(uint64_t **)(*a1 + 40);
  if (v161[14] != v161[13])
  {
    uint64_t v162 = 0;
    unint64_t v163 = 0;
    uint64_t v164 = "index < data_.size()";
    unint64_t v165 = "Attribute.h";
    float32x4_t v166 = "operator[]";
    do
    {
      if ((*(void *)(*a4 + ((v163 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v163))
      {
        LODWORD(__p[0]) = v139;
        uint64_t v167 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(v161 + 1, (unsigned int *)__p);
        uint64_t v168 = *(void *)(v167 + 40);
        if (v163 >= (*(void *)(v167 + 48) - v168) >> 2) {
          goto LABEL_313;
        }
        int v169 = *a7;
        LODWORD(__p[0]) = v385;
        uint64_t v170 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)v169 + 1, (unsigned int *)__p);
        unint64_t v171 = *(unsigned int *)(*a3 + 4 * v163);
        uint64_t v172 = *(void *)(v170 + 40);
        if (v171 >= (*(void *)(v170 + 48) - v172) >> 2) {
          goto LABEL_313;
        }
        *(_DWORD *)(v172 + 4 * v171) = *(_DWORD *)(v168 + 4 * v163);
        uint64_t v173 = *(void *)(*a1 + 40);
        LODWORD(__p[0]) = v143;
        uint64_t v174 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v173 + 8), (unsigned int *)__p);
        uint64_t v175 = *(void *)(v174 + 40);
        if (v163 >= (*(void *)(v174 + 48) - v175) >> 2
          || (int v176 = *(_DWORD *)(v175 + 4 * v163),
              float32x2_t v177 = *a7,
              LODWORD(__p[0]) = v384,
              uint64_t v178 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)v177 + 1, (unsigned int *)__p), v179 = *a3, v180 = *(unsigned int *)(*a3 + 4 * v163), v181 = *(void *)(v178 + 40), v180 >= (*(void *)(v178 + 48) - v181) >> 2))
        {
LABEL_313:
          int v364 = 182;
          goto LABEL_314;
        }
        *(_DWORD *)(v181 + 4 * v180) = v176;
        if (v162
           + ((uint64_t)(*(void *)(*(void *)(*(void *)a2 + 40) + 112)
                      - *(void *)(*(void *)(*(void *)a2 + 40) + 104)) >> 2) != *(_DWORD *)(v179 + 4 * v163))
        {
          int v364 = 904;
          float32x4_t v166 = "MergeTwoCharts";
          unint64_t v165 = "MergeCharts.cpp";
          uint64_t v164 = "vert_map[i] == j + chart2->mesh_.VSize()";
LABEL_314:
          __assert_rtn(v166, v165, v364, v164);
        }
        ++v162;
        uint64_t v160 = *a1;
      }
      ++v163;
      uint64_t v161 = *(uint64_t **)(v160 + 40);
    }
    while (v163 < (v161[14] - v161[13]) >> 2);
  }
  int v381 = -1;
  uint64_t v182 = (uint64_t)*a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>(v182, &v381, (long long *)__p);
  uint64_t v183 = a2;
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v184 = *(void *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  LODWORD(v376) = -1;
  int v185 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v184 + 56), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v186 = *(void *)(*(void *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  LODWORD(v376) = -1;
  int v187 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v186 + 56), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  if (v185 == -1)
  {
    v367 = "f_id_root_mesh1_ah.Valid()";
    int v368 = 916;
    goto LABEL_327;
  }
  if (v187 == -1)
  {
    v367 = "f_id_root_mesh2_ah.Valid()";
    int v368 = 917;
LABEL_327:
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", v368, v367);
  }
  char v188 = *(uint64_t **)(*(void *)a2 + 40);
  if (v188[20] != v188[19])
  {
    unint64_t v189 = 0;
    do
    {
      LODWORD(__p[0]) = v187;
      uint64_t v190 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v188 + 7, (unsigned int *)__p);
      uint64_t v191 = *(void *)(v190 + 40);
      if (v189 >= (*(void *)(v190 + 48) - v191) >> 2
        || (int v192 = *a7,
            LODWORD(__p[0]) = v381,
            v193 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)v192 + 7, (unsigned int *)__p), uint64_t v194 = *(void *)(v193 + 40), v189 >= (*(void *)(v193 + 48) - v194) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v194 + 4 * v189) = *(_DWORD *)(v191 + 4 * v189);
      ++v189;
      char v188 = *(uint64_t **)(*(void *)a2 + 40);
    }
    while (v189 < (v188[20] - v188[19]) >> 2);
  }
  int v195 = *(uint64_t **)(*a1 + 40);
  if (v195[20] != v195[19])
  {
    unint64_t v196 = 0;
    do
    {
      LODWORD(__p[0]) = v185;
      uint64_t v197 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v195 + 7, (unsigned int *)__p);
      uint64_t v198 = *(void *)(v197 + 40);
      if (v196 >= (*(void *)(v197 + 48) - v198) >> 2
        || (uint64_t v199 = *a7,
            LODWORD(__p[0]) = v381,
            uint64_t v200 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)v199 + 7, (unsigned int *)__p), v201 = v196+ ((uint64_t)(*(void *)(*(void *)(*(void *)a2 + 40) + 160)- *(void *)(*(void *)(*(void *)a2 + 40) + 152)) >> 2), v202 = *(void *)(v200 + 40), v201 >= (*(void *)(v200 + 48) - v202) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v202 + 4 * v201) = *(_DWORD *)(v198 + 4 * v196++);
      int v195 = *(uint64_t **)(*a1 + 40);
    }
    while (v196 < (v195[20] - v195[19]) >> 2);
  }
  unsigned int v380 = -1;
  uint64_t v203 = *a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v376) = 0;
  unsigned int v204 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v203 + 7, (uint64_t)&v376, (unsigned __int8 *)__p);
  unsigned int v380 = v204;
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  if (v204 == -1)
  {
    uint64_t v205 = (uint64_t)*a7;
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v205, &v380, (long long *)__p);
    if (v383 < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int v379 = -1;
  unint64_t v206 = *a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v376) = 0;
  unsigned int v207 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v206 + 4, (uint64_t)&v376, (unsigned __int8 *)__p);
  unsigned int v379 = v207;
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  if (v207 == -1)
  {
    uint64_t v208 = (uint64_t)*a7;
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v208, &v379, (long long *)__p);
    if (v383 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v209 = *(void *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v376) = 0;
  unsigned int v210 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v209 + 56), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v211 = *(void *)(*(void *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v376) = 0;
  unsigned int v212 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v211 + 56), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v213 = *(void *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  uint64_t v376 = 0;
  v377 = 0;
  unsigned int v214 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v213 + 56), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v215 = *(void *)(*(void *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  uint64_t v376 = 0;
  v377 = 0;
  unsigned int v373 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v215 + 56), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v216 = *(void *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v376) = 0;
  unsigned int v217 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v216 + 32), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v371 = v214;
  uint64_t v218 = *(void *)(*(void *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v376) = 0;
  unsigned int v219 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v218 + 32), (uint64_t)&v376, (unsigned __int8 *)__p);
  if (v383 < 0) {
    operator delete(__p[0]);
  }
  if (v210 == -1)
  {
    v369 = "f_area_chart1_ah.Valid()";
    int v370 = 947;
    goto LABEL_332;
  }
  if (v212 == -1)
  {
    v369 = "f_area_chart2_ah.Valid()";
    int v370 = 948;
    goto LABEL_332;
  }
  if (v217 == -1)
  {
    v369 = "h_length_chart1_ah.Valid()";
    int v370 = 949;
    goto LABEL_332;
  }
  if (v219 == -1)
  {
    v369 = "h_length_chart2_ah.Valid()";
    int v370 = 950;
LABEL_332:
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", v370, v369);
  }
  unsigned int v220 = -1;
  unsigned int v378 = -1;
  if (v391)
  {
    uint64_t v221 = (uint64_t)*a7;
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v221, &v378, (long long *)__p);
    if (v383 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v222 = *(void *)(*a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    LODWORD(v376) = 0;
    cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v222 + 32), (uint64_t)&v376, (unsigned __int8 *)__p);
    if (v383 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v223 = *(void *)(*(void *)a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    LODWORD(v376) = 0;
    unsigned int v220 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v223 + 32), (uint64_t)&v376, (unsigned __int8 *)__p);
    if (v383 < 0) {
      operator delete(__p[0]);
    }
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v376, 3uLL);
  unint64_t v224 = *(uint64_t **)(*(void *)a2 + 40);
  if (v224[20] != v224[19])
  {
    unint64_t v225 = 0;
    do
    {
      v392[0] = v212;
      uint64_t v226 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v224 + 7, v392);
      uint64_t v227 = *(void *)(v226 + 40);
      if (v225 >= (*(void *)(v226 + 48) - v227) >> 2) {
        goto LABEL_309;
      }
      int v228 = *(_DWORD *)(v227 + 4 * v225);
      uint64_t v229 = *a7;
      v392[0] = v380;
      uint64_t v230 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v229 + 7, v392);
      uint64_t v231 = *(void *)(v230 + 40);
      if (v225 >= (*(void *)(v230 + 48) - v231) >> 2) {
        goto LABEL_309;
      }
      *(_DWORD *)(v231 + 4 * v225) = v228;
      if (v390 != -1)
      {
        uint64_t v232 = *(void *)(*(void *)a2 + 40);
        v392[0] = v373;
        uint64_t v233 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v232 + 56), v392);
        uint64_t v234 = *(void *)(v233 + 40);
        if (v225 >= (*(void *)(v233 + 48) - v234) >> 4) {
          goto LABEL_309;
        }
        uint64_t v235 = *a7;
        v392[0] = v390;
        uint64_t v236 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v235 + 7, v392);
        uint64_t v237 = *(void *)(v236 + 40);
        if (v225 >= (*(void *)(v236 + 48) - v237) >> 4) {
          goto LABEL_309;
        }
        *(_OWORD *)(v237 + 16 * v225) = *(_OWORD *)(v234 + 16 * v225);
      }
      uint64_t v238 = (uint64_t)*a7;
      v392[0] = v225;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v238, v392, __p);
      uint64_t v239 = *(void *)(*(void *)a2 + 40);
      v392[0] = v225;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v239, v392, &v376);
      for (uint64_t i = 0; i != 12; i += 4)
      {
        uint64_t v241 = *(void *)(*(void *)a2 + 40);
        v392[0] = v219;
        uint64_t v242 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v241 + 32), v392);
        unint64_t v243 = *(unsigned int *)((char *)v376 + i);
        uint64_t v244 = *(void *)(v242 + 40);
        if (v243 >= (*(void *)(v242 + 48) - v244) >> 2) {
          goto LABEL_309;
        }
        int v245 = *(_DWORD *)(v244 + 4 * v243);
        float32x4_t v246 = *a7;
        v392[0] = v379;
        uint64_t v247 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v246 + 4, v392);
        unint64_t v248 = (unsigned int *)((char *)__p[0] + i);
        unint64_t v249 = *(unsigned int *)((char *)__p[0] + i);
        uint64_t v250 = *(void *)(v247 + 40);
        if (v249 >= (*(void *)(v247 + 48) - v250) >> 2) {
          goto LABEL_309;
        }
        *(_DWORD *)(v250 + 4 * v249) = v245;
        uint64_t v251 = (uint64_t)*a7;
        v252 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v248);
        unint64_t v253 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v251, *(_DWORD *)(v251 + 180), *v252);
        if ((*v253 & v254) != 0)
        {
          int64_t v255 = *a7;
          v392[0] = v379;
          uint64_t v256 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v255 + 4, v392);
          unint64_t v257 = *(unsigned int *)((char *)__p[0] + i);
          uint64_t v258 = *(void *)(v256 + 40);
          if (v257 >= (*(void *)(v256 + 48) - v258) >> 2) {
            goto LABEL_309;
          }
          int v259 = *(_DWORD *)(v258 + 4 * v257);
          uint64_t v260 = *a7;
          v392[0] = v379;
          uint64_t v261 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v260 + 4, v392);
          unint64_t v262 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + i));
          uint64_t v263 = *(void *)(v261 + 40);
          if (v262 >= (*(void *)(v261 + 48) - v263) >> 2) {
            goto LABEL_309;
          }
          *(_DWORD *)(v263 + 4 * v262) = v259;
        }
        if (v391)
        {
          uint64_t v264 = *(void *)(*(void *)a2 + 40);
          v392[0] = v220;
          uint64_t v265 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v264 + 32), v392);
          unint64_t v266 = *(unsigned int *)((char *)v376 + i);
          uint64_t v267 = *(void *)(v265 + 40);
          if (v266 >= (*(void *)(v265 + 48) - v267) >> 2) {
            goto LABEL_309;
          }
          int v268 = *(_DWORD *)(v267 + 4 * v266);
          float32x4_t v269 = *a7;
          v392[0] = v378;
          uint64_t v270 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v269 + 4, v392);
          float32x4_t v271 = (unsigned int *)((char *)__p[0] + i);
          unint64_t v272 = *(unsigned int *)((char *)__p[0] + i);
          uint64_t v273 = *(void *)(v270 + 40);
          if (v272 >= (*(void *)(v270 + 48) - v273) >> 2) {
            goto LABEL_309;
          }
          *(_DWORD *)(v273 + 4 * v272) = v268;
          uint64_t v274 = (uint64_t)*a7;
          float32x4_t v275 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v271);
          float32x4_t v276 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v274, *(_DWORD *)(v274 + 180), *v275);
          if ((*v276 & v277) != 0)
          {
            float32x4_t v278 = *a7;
            v392[0] = v378;
            uint64_t v279 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v278 + 4, v392);
            unint64_t v280 = *(unsigned int *)((char *)__p[0] + i);
            uint64_t v281 = *(void *)(v279 + 40);
            if (v280 >= (*(void *)(v279 + 48) - v281) >> 2) {
              goto LABEL_309;
            }
            int v282 = *(_DWORD *)(v281 + 4 * v280);
            float32x4_t v283 = *a7;
            v392[0] = v378;
            uint64_t v284 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v283 + 4, v392);
            unint64_t v285 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + i));
            uint64_t v286 = *(void *)(v284 + 40);
            if (v285 >= (*(void *)(v284 + 48) - v286) >> 2) {
              goto LABEL_309;
            }
            *(_DWORD *)(v286 + 4 * v285) = v282;
          }
        }
      }
      float32x4_t v287 = *a7;
      v392[0] = v380;
      uint64_t v288 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v287 + 7, v392);
      uint64_t v289 = *(void *)(v288 + 40);
      if (v225 >= (*(void *)(v288 + 48) - v289) >> 2) {
LABEL_309:
      }
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      float v290 = *(float *)(v289 + 4 * v225);
      uint64_t v291 = (uint64_t)*a7;
      v392[0] = v225;
      uint64_t v183 = a2;
      if (vabds_f32(v290, cv3d::cv::gess::mesh::TriMesh::Area(v291, v392)) >= 0.0001) {
        __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", 987, "std::fabs(new_mesh->attribute(f_area_ah)[i] - new_mesh->Area(mesh::FaceHandle(static_cast<uint32_t>(i)))) < 10e-5");
      }
      ++v225;
      unint64_t v224 = *(uint64_t **)(*(void *)a2 + 40);
    }
    while (v225 < (v224[20] - v224[19]) >> 2);
  }
  float32x4_t v292 = *(uint64_t **)(*a1 + 40);
  if (v292[20] != v292[19])
  {
    unint64_t v293 = 0;
    do
    {
      v392[0] = v210;
      uint64_t v294 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v292 + 7, v392);
      uint64_t v295 = *(void *)(v294 + 40);
      if (v293 >= (*(void *)(v294 + 48) - v295) >> 2) {
        goto LABEL_310;
      }
      int v296 = *(_DWORD *)(v295 + 4 * v293);
      float32x4_t v297 = *a7;
      v392[0] = v380;
      uint64_t v298 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v297 + 7, v392);
      uint64_t v299 = *(void *)(*(void *)(*(void *)v183 + 40) + 160)
           - *(void *)(*(void *)(*(void *)v183 + 40) + 152);
      unint64_t v300 = v293 + (v299 >> 2);
      uint64_t v301 = *(void *)(v298 + 40);
      if (v300 >= (*(void *)(v298 + 48) - v301) >> 2) {
        goto LABEL_310;
      }
      *(_DWORD *)(v301 + 4 * v300) = v296;
      if (v390 != -1)
      {
        uint64_t v302 = *(void *)(*a1 + 40);
        v392[0] = v371;
        uint64_t v303 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v302 + 56), v392);
        uint64_t v304 = *(void *)(v303 + 40);
        if (v293 >= (*(void *)(v303 + 48) - v304) >> 4) {
          goto LABEL_310;
        }
        float32x4_t v305 = *a7;
        v392[0] = v390;
        uint64_t v306 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v305 + 7, v392);
        unint64_t v307 = v293
             + ((uint64_t)(*(void *)(*(void *)(*(void *)v183 + 40) + 160)
                        - *(void *)(*(void *)(*(void *)v183 + 40) + 152)) >> 2);
        uint64_t v308 = *(void *)(v306 + 40);
        if (v307 >= (*(void *)(v306 + 48) - v308) >> 4) {
          goto LABEL_310;
        }
        *(_OWORD *)(v308 + 16 * v307) = *(_OWORD *)(v304 + 16 * v293);
        uint64_t v299 = *(void *)(*(void *)(*(void *)v183 + 40) + 160)
             - *(void *)(*(void *)(*(void *)v183 + 40) + 152);
      }
      uint64_t v309 = (uint64_t)*a7;
      v392[0] = ((unint64_t)v299 >> 2) + v293;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v309, v392, __p);
      uint64_t v310 = *(void *)(*a1 + 40);
      v392[0] = v293;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v310, v392, &v376);
      for (uint64_t j = 0; j != 12; j += 4)
      {
        uint64_t v312 = *(void *)(*a1 + 40);
        v392[0] = v217;
        uint64_t v313 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v312 + 32), v392);
        unint64_t v314 = *(unsigned int *)((char *)v376 + j);
        uint64_t v315 = *(void *)(v313 + 40);
        if (v314 >= (*(void *)(v313 + 48) - v315) >> 2) {
          goto LABEL_310;
        }
        int v316 = *(_DWORD *)(v315 + 4 * v314);
        float v317 = *a7;
        v392[0] = v379;
        uint64_t v318 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v317 + 4, v392);
        float32x4_t v319 = (unsigned int *)((char *)__p[0] + j);
        unint64_t v320 = *(unsigned int *)((char *)__p[0] + j);
        uint64_t v321 = *(void *)(v318 + 40);
        if (v320 >= (*(void *)(v318 + 48) - v321) >> 2) {
          goto LABEL_310;
        }
        *(_DWORD *)(v321 + 4 * v320) = v316;
        uint64_t v322 = (uint64_t)*a7;
        float v323 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v319);
        float v324 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v322, *(_DWORD *)(v322 + 180), *v323);
        if ((*v324 & v325) != 0)
        {
          v326 = *a7;
          v392[0] = v379;
          uint64_t v327 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v326 + 4, v392);
          unint64_t v328 = *(unsigned int *)((char *)__p[0] + j);
          uint64_t v329 = *(void *)(v327 + 40);
          if (v328 >= (*(void *)(v327 + 48) - v329) >> 2) {
            goto LABEL_310;
          }
          int v330 = *(_DWORD *)(v329 + 4 * v328);
          v331 = *a7;
          v392[0] = v379;
          uint64_t v332 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v331 + 4, v392);
          unint64_t v333 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + j));
          uint64_t v334 = *(void *)(v332 + 40);
          if (v333 >= (*(void *)(v332 + 48) - v334) >> 2) {
            goto LABEL_310;
          }
          *(_DWORD *)(v334 + 4 * v333) = v330;
        }
        if (v391)
        {
          uint64_t v335 = *(void *)(*a1 + 40);
          v392[0] = v220;
          uint64_t v336 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v335 + 32), v392);
          unint64_t v337 = *(unsigned int *)((char *)v376 + j);
          uint64_t v338 = *(void *)(v336 + 40);
          if (v337 >= (*(void *)(v336 + 48) - v338) >> 2) {
            goto LABEL_310;
          }
          int v339 = *(_DWORD *)(v338 + 4 * v337);
          float32x4_t v340 = *a7;
          v392[0] = v378;
          uint64_t v341 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v340 + 4, v392);
          float32x4_t v342 = (unsigned int *)((char *)__p[0] + j);
          unint64_t v343 = *(unsigned int *)((char *)__p[0] + j);
          uint64_t v344 = *(void *)(v341 + 40);
          if (v343 >= (*(void *)(v341 + 48) - v344) >> 2) {
            goto LABEL_310;
          }
          *(_DWORD *)(v344 + 4 * v343) = v339;
          uint64_t v345 = (uint64_t)*a7;
          v346 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v342);
          v347 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v345, *(_DWORD *)(v345 + 180), *v346);
          if ((*v347 & v348) != 0)
          {
            v349 = *a7;
            v392[0] = v378;
            uint64_t v350 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v349 + 4, v392);
            unint64_t v351 = *(unsigned int *)((char *)__p[0] + j);
            uint64_t v352 = *(void *)(v350 + 40);
            if (v351 >= (*(void *)(v350 + 48) - v352) >> 2) {
              goto LABEL_310;
            }
            int v353 = *(_DWORD *)(v352 + 4 * v351);
            v354 = *a7;
            v392[0] = v378;
            uint64_t v355 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v354 + 4, v392);
            unint64_t v356 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + j));
            uint64_t v357 = *(void *)(v355 + 40);
            if (v356 >= (*(void *)(v355 + 48) - v357) >> 2) {
              goto LABEL_310;
            }
            *(_DWORD *)(v357 + 4 * v356) = v353;
          }
        }
      }
      v358 = *a7;
      v392[0] = v380;
      uint64_t v359 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v358 + 7, v392);
      unint64_t v360 = v293
           + ((uint64_t)(*(void *)(*(void *)(*(void *)v183 + 40) + 160)
                      - *(void *)(*(void *)(*(void *)v183 + 40) + 152)) >> 2);
      uint64_t v361 = *(void *)(v359 + 40);
      if (v360 >= (*(void *)(v359 + 48) - v361) >> 2) {
LABEL_310:
      }
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      float v362 = *(float *)(v361 + 4 * v360);
      uint64_t v363 = (uint64_t)*a7;
      v392[0] = v293
              + ((uint64_t)(*(void *)(*(void *)(*(void *)v183 + 40) + 160)
                         - *(void *)(*(void *)(*(void *)v183 + 40) + 152)) >> 2);
      if (vabds_f32(v362, cv3d::cv::gess::mesh::TriMesh::Area(v363, v392)) >= 0.0001) {
        __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", 1014, "std::fabs(new_mesh->attribute(f_area_ah)[i + chart2->mesh_.FSize()] - new_mesh->Area(mesh::FaceHandle(static_cast<uint32_t>(i + chart2->mesh_.FSize())))) < 10e-5");
      }
      ++v293;
      float32x4_t v292 = *(uint64_t **)(*a1 + 40);
    }
    while (v293 < (v292[20] - v292[19]) >> 2);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v386[0])
  {
    v386[1] = v386[0];
    operator delete(v386[0]);
  }
  if (v387.__begin_)
  {
    v387.__end_ = v387.__begin_;
    operator delete(v387.__begin_);
  }
  if ((void)v388)
  {
    *((void *)&v388 + 1) = v388;
    operator delete((void *)v388);
  }
}

void sub_24F51CE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  unint64_t v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(void *)(v30 - 136) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__init_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24F51D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24F51D220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    int v14 = v13;
    long long v15 = &v13[16 * v10];
    int64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    int v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(&v14);
  }
}

void sub_24F51D324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24F51D3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

__int32 *std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(__int32 *a1, __int32 *a2, __int32 *a3)
{
  uint64_t result = wmemchr(a1, *a3, a2 - a1);
  if (!result) {
    uint64_t result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      if (*v6 != *a3) {
        *result++ = *v6;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::__value_func[abi:ne180100]((uint64_t)v7, a1);
  long long v4 = *(_OWORD *)(**(void **)(a1 + 32) + 16 * a2);
  long long v6 = v4;
  if (*((void *)&v4 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v8 + 48))(v8, &v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  return std::__function::__value_func<void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::~__value_func[abi:ne180100](v7);
}

void sub_24F51D6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (unsigned int *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unsigned int v39 = *(a2 - 2);
                unsigned int v40 = *v10;
                if (v39 < *v10)
                {
                  *uint64_t v10 = v39;
                  *(a2 - 2) = v40;
                  unsigned int v41 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v10, v10 + 2, v10 + 4, v10 + 6);
                unsigned int v42 = *(a2 - 2);
                unsigned int v43 = v10[6];
                if (v42 < v43)
                {
                  v10[6] = v42;
                  *(a2 - 2) = v43;
                  unsigned int v44 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v44;
                  unsigned int v45 = v10[6];
                  unsigned int v46 = v10[4];
                  if (v45 < v46)
                  {
                    unsigned int v47 = v10[5];
                    unsigned int v48 = v10[7];
                    float v10[4] = v45;
                    v10[5] = v48;
                    v10[6] = v46;
                    v10[7] = v47;
                    unsigned int v49 = v10[2];
                    if (v45 < v49)
                    {
                      unsigned int v50 = v10[3];
                      _DWORD v10[2] = v45;
                      v10[3] = v48;
                      float v10[4] = v49;
                      v10[5] = v50;
                      unsigned int v51 = *v10;
                      if (v45 < *v10)
                      {
                        unsigned int v52 = v10[1];
                        *uint64_t v10 = v45;
                        v10[1] = v48;
                        _DWORD v10[2] = v51;
                        v10[3] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v53 = v10 + 2;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 0;
                unint64_t v57 = v10;
                do
                {
                  unsigned int v58 = v57[2];
                  unsigned int v59 = *v57;
                  unint64_t v57 = v53;
                  if (v58 < v59)
                  {
                    unsigned int v61 = *v53;
                    unsigned int v60 = v53[1];
                    uint64_t v62 = v56;
                    while (1)
                    {
                      uint64_t v63 = (char *)v10 + v62;
                      int v64 = *(unsigned int *)((char *)v10 + v62 + 4);
                      *((_DWORD *)v63 + 2) = v59;
                      *((_DWORD *)v63 + 3) = v64;
                      if (!v62) {
                        break;
                      }
                      unsigned int v59 = *((_DWORD *)v63 - 2);
                      v62 -= 8;
                      if (v59 <= v61)
                      {
                        unint64_t v65 = (unsigned int *)((char *)v10 + v62 + 8);
                        goto LABEL_84;
                      }
                    }
                    unint64_t v65 = v10;
LABEL_84:
                    *unint64_t v65 = v61;
                    v65[1] = v60;
                  }
                  unsigned int v53 = v57 + 2;
                  v56 += 8;
                }
                while (v57 + 2 != a2);
              }
            }
            else if (!v55)
            {
              uint64_t v93 = v10 + 3;
              do
              {
                unsigned int v94 = v9[2];
                unsigned int v95 = *v9;
                uint64_t v9 = v53;
                if (v94 < v95)
                {
                  uint64_t v96 = *(void *)v53;
                  float v97 = v93;
                  do
                  {
                    float v98 = v97;
                    *(v97 - 1) = v95;
                    unsigned int v99 = *(v97 - 2);
                    v97 -= 2;
                    *float v98 = v99;
                    unsigned int v95 = *(v98 - 5);
                  }
                  while (v95 > v96);
                  *(void *)(v97 - 1) = v96;
                }
                unsigned int v53 = v9 + 2;
                v93 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  uint64_t v70 = &v10[2 * v69];
                  if (2 * v68 + 2 < (uint64_t)v12)
                  {
                    unsigned int v72 = *v70;
                    unsigned int v71 = v70[2];
                    if (*v70 <= v71) {
                      unsigned int v72 = v70[2];
                    }
                    if (*v70 < v71)
                    {
                      v70 += 2;
                      uint64_t v69 = 2 * v68 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v72 = *v70;
                  }
                  unint64_t v73 = &v10[2 * v68];
                  if (v72 >= *v73)
                  {
                    unsigned int v74 = *v73;
                    unsigned int v75 = v73[1];
                    do
                    {
                      uint64_t result = (uint64_t)v73;
                      unint64_t v73 = v70;
                      *(_DWORD *)uint64_t result = v72;
                      *(_DWORD *)(result + 4) = v70[1];
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t result = (2 * v69) | 1;
                      uint64_t v70 = &v10[2 * result];
                      uint64_t v69 = 2 * v69 + 2;
                      if (v69 < (uint64_t)v12)
                      {
                        unsigned int v72 = *v70;
                        unsigned int v76 = v70[2];
                        if (*v70 <= v76) {
                          unsigned int v72 = v70[2];
                        }
                        if (*v70 >= v76) {
                          uint64_t v69 = result;
                        }
                        else {
                          v70 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v72 = *v70;
                        uint64_t v69 = result;
                      }
                    }
                    while (v72 >= v74);
                    *unint64_t v73 = v74;
                    v73[1] = v75;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v77 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v78 = 0;
                uint64_t v79 = *(void *)v10;
                uint64_t v80 = v10;
                do
                {
                  uint64_t v81 = &v80[2 * v78 + 2];
                  uint64_t v82 = (2 * v78) | 1;
                  uint64_t v78 = 2 * v78 + 2;
                  if (v78 < v77)
                  {
                    unsigned int v84 = *v81;
                    unsigned int v83 = v81[2];
                    if (*v81 <= v83) {
                      unsigned int v84 = v81[2];
                    }
                    if (*v81 >= v83) {
                      uint64_t v78 = v82;
                    }
                    else {
                      v81 += 2;
                    }
                  }
                  else
                  {
                    unsigned int v84 = *v81;
                    uint64_t v78 = v82;
                  }
                  unsigned int *v80 = v84;
                  v80[1] = v81[1];
                  uint64_t v80 = v81;
                }
                while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                if (v81 == a2 - 2)
                {
                  *(void *)uint64_t v81 = v79;
                }
                else
                {
                  *uint64_t v81 = *(a2 - 2);
                  v81[1] = *(a2 - 1);
                  *((void *)a2 - 1) = v79;
                  uint64_t v85 = (char *)v81 - (char *)v10 + 8;
                  if (v85 >= 9)
                  {
                    unint64_t v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                    unint64_t v87 = &v10[2 * v86];
                    unsigned int v88 = *v87;
                    if (*v87 < *v81)
                    {
                      unsigned int v89 = *v81;
                      unsigned int v90 = v81[1];
                      do
                      {
                        float v91 = v81;
                        uint64_t v81 = v87;
                        unsigned int *v91 = v88;
                        v91[1] = v87[1];
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                        unint64_t v87 = &v10[2 * v86];
                        unsigned int v88 = *v87;
                      }
                      while (*v87 < v89);
                      *uint64_t v81 = v89;
                      v81[1] = v90;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v77-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          long long v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v9 + 2, v14 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)long long v14 = v15;
          }
          else
          {
            uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(v9 - 2) < *v9) {
            break;
          }
          uint64_t v29 = *(void *)v9;
          if (*(a2 - 2) <= *(void *)v9)
          {
            unint64_t v31 = v9 + 2;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              v31 += 2;
            }
            while (*v10 <= v29);
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              unsigned int v30 = v10[2];
              v10 += 2;
            }
            while (v30 <= v29);
          }
          unint64_t v32 = a2;
          if (v10 < a2)
          {
            unint64_t v32 = a2;
            do
            {
              unsigned int v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v33 > v29);
          }
          if (v10 < v32)
          {
            unsigned int v34 = *v10;
            unsigned int v35 = *v32;
            do
            {
              *uint64_t v10 = v35;
              *unint64_t v32 = v34;
              unsigned int v36 = v10[1];
              v10[1] = v32[1];
              v32[1] = v36;
              do
              {
                unsigned int v37 = v10[2];
                v10 += 2;
                unsigned int v34 = v37;
              }
              while (v37 <= v29);
              do
              {
                unsigned int v38 = *(v32 - 2);
                v32 -= 2;
                unsigned int v35 = v38;
              }
              while (v38 > v29);
            }
            while (v10 < v32);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            unsigned int *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *((void *)v10 - 1) = v29;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)v9;
        do
        {
          unsigned int v18 = v9[v16 + 2];
          v16 += 2;
        }
        while (v18 < v17);
        unint64_t v19 = &v9[v16];
        uint64_t v20 = a2;
        if (v16 == 2)
        {
          uint64_t v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            unsigned int v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v17);
        }
        else
        {
          do
          {
            unsigned int v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v17);
        }
        if (v19 >= v20)
        {
          uint64_t v10 = &v9[v16];
        }
        else
        {
          unsigned int v23 = *v20;
          uint64_t v10 = &v9[v16];
          uint64_t v24 = v20;
          do
          {
            *uint64_t v10 = v23;
            unsigned int *v24 = v18;
            unsigned int v25 = v10[1];
            v10[1] = v24[1];
            v24[1] = v25;
            do
            {
              unsigned int v26 = v10[2];
              v10 += 2;
              unsigned int v18 = v26;
            }
            while (v26 < v17);
            do
            {
              unsigned int v27 = *(v24 - 2);
              v24 -= 2;
              unsigned int v23 = v27;
            }
            while (v27 >= v17);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != v9)
        {
          unsigned int *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *((void *)v10 - 1) = v17;
        if (v19 >= v20) {
          break;
        }
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v9, v10 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v28) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    return result;
  }
}

unsigned int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  unsigned int v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      __int32 *result = v3;
      *a2 = v4;
      unsigned int v10 = result[1];
      result[1] = a2[1];
      a2[1] = v10;
      unsigned int v11 = *a2;
      if (*a3 >= *a2) {
        return result;
      }
      *a2 = *a3;
      *a3 = v11;
      long long v6 = a3 + 1;
      uint64_t result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *a3 = v4;
      long long v6 = a3 + 1;
    }
    uint64_t v7 = v6;
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    uint64_t v7 = a2 + 1;
    unsigned int v8 = a2[1];
    a2[1] = a3[1];
    a3[1] = v8;
    unsigned int v9 = *result;
    if (*a2 < *result)
    {
      *result++ = *a2;
      *a2 = v9;
LABEL_10:
      unsigned int v12 = *result;
      __int32 *result = *v7;
      *uint64_t v7 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unsigned int v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      unsigned int v20 = *(a2 - 2);
      unsigned int v21 = a1[6];
      if (v20 < v21)
      {
        a1[6] = v20;
        *(a2 - 2) = v21;
        unsigned int v22 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v22;
        unsigned int v23 = a1[6];
        unsigned int v24 = a1[4];
        if (v23 < v24)
        {
          unsigned int v25 = a1[5];
          unsigned int v26 = a1[7];
          a1[4] = v23;
          a1[5] = v26;
          a1[6] = v24;
          a1[7] = v25;
          unsigned int v27 = a1[2];
          if (v23 < v27)
          {
            unsigned int v28 = a1[3];
            a1[2] = v23;
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v28;
            unsigned int v29 = *a1;
            if (v23 < *a1)
            {
              unsigned int v30 = a1[1];
              *a1 = v23;
              a1[1] = v26;
              a1[2] = v29;
              a1[3] = v30;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      unsigned int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *v9;
    if (*v10 < *v9)
    {
      unsigned int v15 = *v10;
      unsigned int v14 = v10[1];
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = (unsigned int *)((char *)a1 + v16);
        int v18 = *(unsigned int *)((char *)a1 + v16 + 20);
        v17[6] = v13;
        v17[7] = v18;
        if (v16 == -16) {
          break;
        }
        unsigned int v13 = v17[2];
        v16 -= 8;
        if (v13 <= v15)
        {
          unint64_t v19 = (unsigned int *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      unint64_t v19 = a1;
LABEL_13:
      *unint64_t v19 = v15;
      v19[1] = v14;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

unsigned int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  unsigned int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unsigned int v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    unsigned int v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      unsigned int v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      unsigned int v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        unsigned int v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,void>@<X0>(cv3d::cv::gess::mesh::TriMesh *a1@<X1>, const float *a2@<X2>, const float *a3@<X3>, BOOL *a4@<X4>, void *a5@<X8>)
{
  unsigned int v10 = operator new(0x180uLL);
  BOOL result = std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_24F51E248(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(void *a1, cv3d::cv::gess::mesh::TriMesh *a2, const float *a3, const float *a4, BOOL *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8F00;
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)(a1 + 3), a2, a3, a4, *a5);
  return a1;
}

void sub_24F51E2A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8F00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__on_zero_shared(uint64_t a1)
{
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    while (*(void *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::CutTopData((uint64_t *)a1);
  }
  unsigned int v3 = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::CutTopData(uint64_t *a1)
{
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(a1, 0, &v3);
  if (v3) {
    uint64_t v1 = *(unsigned int *)(v3 + 4);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        unsigned int v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::__append(a1, v5);
  }
}

void std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    unsigned int v14 = v13;
    unsigned int v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(&v14);
  }
}

void sub_24F51E568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8F38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

void **std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)result, v13);
    unsigned int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unsigned int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    BOOL result = std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_24F51E700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_2700D8F70;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D8F70;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  char v25 = 0;
  unsigned int v24 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::MergeAdjacentChart(*(uint64_t **)(a1 + 8), *(void **)(a1 + 16), *(_DWORD *)(v4 + 4), **(void **)(a1 + 24), *(void **)(a1 + 32), *(uint64_t **)(a1 + 40), &v25, &v24, *(std::mutex **)(a1 + 80), *(const float **)(a1 + 48), *(const float **)(a1 + 56), **(unsigned char **)(a1 + 88));
  if (v25)
  {
    long long v5 = *(std::mutex **)(a1 + 80);
    std::mutex::lock(v5);
    unint64_t v6 = *(void ***)(a1 + 96);
    unint64_t v7 = *(unsigned int *)(v4 + 4) | ((unint64_t)v24 << 32);
    uint64_t v8 = (unint64_t *)v6[1];
    unint64_t v9 = (unint64_t)v6[2];
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v11 = ((char *)v8 - (unsigned char *)*v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v9 - (void)*v6;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        unsigned int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v6 + 2), v14);
      }
      else {
        unsigned int v15 = 0;
      }
      uint64_t v16 = (unint64_t *)&v15[8 * v11];
      long long v17 = &v15[8 * v14];
      *uint64_t v16 = v7;
      uint64_t v10 = v16 + 1;
      unint64_t v19 = (char *)*v6;
      uint64_t v18 = (char *)v6[1];
      if (v18 != *v6)
      {
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *--uint64_t v16 = v20;
        }
        while (v18 != v19);
        uint64_t v18 = (char *)*v6;
      }
      *unint64_t v6 = v16;
      v6[1] = v10;
      v6[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      unint64_t *v8 = v7;
      uint64_t v10 = v8 + 1;
    }
    v6[1] = v10;
    unsigned int v21 = *(void **)(a1 + 8);
    *(float *)uint64_t v4 = -(float)((float)((float)*(unsigned int *)(v4 + 4)
                                  / (float)(unint64_t)((uint64_t)(v21[1] - *v21) >> 4))
                          + (float)(unint64_t)((uint64_t)(*(void *)(*(void *)(*(void *)(*v21
                                                                                                  + 16 * *(unsigned int *)(v4 + 4))
                                                                                      + 40)
                                                                          + 160)
                                                              - *(void *)(*(void *)(*(void *)(*v21
                                                                                                  + 16 * *(unsigned int *)(v4 + 4))
                                                                                      + 40)
                                                                          + 152)) >> 2));
    unsigned int v22 = *(uint64_t **)(a1 + 64);
    *(void *)&long long v23 = v4;
    *((void *)&v23 + 1) = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert(v22, &v23);
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
    --**(_DWORD **)(a1 + 72);
    std::mutex::unlock(v5);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_24F51E9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex::unlock(v16);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,void>@<X0>(cv3d::cv::gess::mesh::TriMesh *a1@<X1>, const float *a2@<X2>, const float *a3@<X3>, BOOL *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x180uLL);
  __n128 result = std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_24F51EB18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(void *a1, cv3d::cv::gess::mesh::TriMesh *a2, const float *a3, const float *a4, BOOL *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D8F00;
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)(a1 + 3), a2, a3, a4, *a5);
  return a1;
}

void sub_24F51EB78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::isochart::IsoChartMesh *cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::mesh::TriMesh *a2, const float *a3, const float *a4, char a5)
{
  *(_WORD *)this = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = a2;
  *((void *)this + 6) = a3;
  *((void *)this + 7) = a4;
  *((unsigned char *)this + 64) = a5;
  *((_DWORD *)this + 17) = -1;
  *((void *)this + 9) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *((void *)this + 14) = 0;
  cv3d::cv::gess::isochart::IsoMap::IsoMap((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120));
  *((void *)this + 24) = -1;
  *((void *)this + 23) = 0;
  *((void *)this + 25) = -1;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 44) = 0;
  uint64_t v6 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v25[0] = 0;
  int v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v6 + 80), (uint64_t)v25, (unsigned __int8 *)__p);
  *((_DWORD *)this + 48) = v7;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v7 == -1)
  {
    uint64_t v8 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v25[0] = 0;
    *((_DWORD *)this + 48) = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v8 + 80), (uint64_t)v25, (long long *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = *((void *)this + 5);
  LODWORD(v25[0]) = *((_DWORD *)this + 48);
  uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v9 + 80), (unsigned int *)v25);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, (uint64_t)(*(void *)(*((void *)this + 5) + 112) - *(void *)(*((void *)this + 5) + 104)) >> 2);
  uint64_t v11 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v25[0]) = 0;
  int v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v11 + 56), (uint64_t)v25, (unsigned __int8 *)__p);
  *((_DWORD *)this + 49) = v12;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v12 == -1)
  {
    uint64_t v13 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v13, (_DWORD *)this + 49, (long long *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v14 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v25[0]) = 0;
  int v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v14 + 32), (uint64_t)v25, (unsigned __int8 *)__p);
  *((_DWORD *)this + 50) = v15;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v15 == -1)
  {
    uint64_t v16 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v16, (_DWORD *)this + 50, (long long *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v17 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  LODWORD(v25[0]) = 0;
  int v18 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v17 + 32), (uint64_t)v25, (unsigned __int8 *)__p);
  *((_DWORD *)this + 51) = v18;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v18 == -1)
  {
    uint64_t v19 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v19, (_DWORD *)this + 51, (long long *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*((unsigned char *)this + 64))
  {
    uint64_t v20 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
    v25[0] = 0;
    v25[1] = 0;
    int v21 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v20 + 56), (uint64_t)v25, (unsigned __int8 *)__p);
    *((_DWORD *)this + 17) = v21;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      int v21 = *((_DWORD *)this + 17);
    }
    if (v21 == -1) {
      *((unsigned char *)this + 64) = 0;
    }
  }
  return this;
}

void sub_24F51EEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, cv3d::cv::gess::isochart::IsoMap *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  int v21 = (void *)v17[42];
  if (v21)
  {
    v17[43] = v21;
    operator delete(v21);
  }
  unsigned int v22 = (void *)v17[39];
  if (v22)
  {
    v17[40] = v22;
    operator delete(v22);
  }
  long long v23 = (void *)v17[36];
  if (v23)
  {
    v17[37] = v23;
    operator delete(v23);
  }
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  char v24 = (void *)v17[29];
  if (v24)
  {
    v17[30] = v24;
    operator delete(v24);
  }
  if (*v19) {
    operator delete(*v19);
  }
  cv3d::cv::gess::isochart::IsoMap::~IsoMap(a9);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(v15, *v18);
  char v25 = *v16;
  if (*v16)
  {
    v17[10] = v25;
    operator delete(v25);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v17 + 1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  uint64_t v2 = *((void *)this + 10) - *((void *)this + 9);
  if ((unint64_t)v2 < 8) {
    return 0;
  }
  unint64_t v3 = v2 >> 2;
  unint64_t v4 = (uint64_t)(*(void *)(*((void *)this + 5) + 112) - *(void *)(*((void *)this + 5) + 104)) >> 2;
  *((void *)this + 27) = 0;
  std::vector<BOOL>::resize((uint64_t)this + 208, v4, 0);
  long long v5 = (unsigned int *)*((void *)this + 9);
  uint64_t v6 = *((void *)this + 26);
  uint64_t v7 = v3 <= 1 ? 1 : v3;
  do
  {
    unsigned int v8 = *v5++;
    *(void *)(v6 + (((unint64_t)v8 >> 3) & 0x1FFFFFF8)) |= 1 << v8;
    --v7;
  }
  while (v7);
  *((void *)this + 40) = *((void *)this + 39);
  std::vector<float>::resize((uint64_t)this + 312, v4 * v3);
  cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistance((uint64_t)this, (unsigned int **)this + 9, *((float **)this + 39));
  uint64_t v9 = *((void *)this + 4);
  if (v9)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9)) {
      return 0;
    }
  }
  std::vector<float>::vector(&__p, v3 * v3);
  cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicMatrix(this, &__p);
  if (v3 >= 0x19) {
    unint64_t v11 = 25;
  }
  else {
    unint64_t v11 = v3;
  }
  unint64_t v18 = 0;
  cv3d::cv::gess::isochart::IsoMap::Init((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120), v3, (float *)__p);
  cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120), v11, &v18);
  uint64_t v20 = __p;
  if (v11 < v18) {
    __assert_rtn("IsomapParameterization", "IsoChartMesh.cpp", 89, "max_eigen_dimension >= calculated_dimension");
  }
  uint64_t v12 = *((void *)this + 4);
  if (v12 && ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) & 1) != 0
    || (uint64_t v13 = (unint64_t *)((char *)this + 184),
        cv3d::cv::gess::isochart::IsoMap::GetPrimaryEnergyDimension((char *)this + 120, 0.9, (unint64_t *)this + 23), (uint64_t v14 = *((void *)this + 4)) != 0)&& ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14) & 1) != 0|| (v15 = *v13) == 0)
  {
    uint64_t v10 = 0;
  }
  else
  {
    if (v15 <= 2 && v18 >= 3)
    {
      unint64_t v15 = 3;
      unint64_t *v13 = 3;
    }
    uint64_t v16 = *((void *)this + 42);
    if (v16 != *((void *)this + 43)) {
      *((void *)this + 43) = v16;
    }
    std::vector<float>::resize((uint64_t)this + 336, v15 * v4);
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord(this);
    uint64_t v10 = 1;
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24F51F274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistance(uint64_t a1, unsigned int **a2, float *a3)
{
  uint64_t v6 = *a2;
  long long v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v9 = *(void *)(v8 + 112);
  unint64_t v11 = (v9 - v10) >> 2;
  std::vector<float>::vector(v48, v11);
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  uint64_t v47 = 0;
  std::vector<unsigned int> __p = 0;
  unsigned int v43 = 0;
  uint64_t v44 = 0;
  if (*(unsigned char *)(a1 + 64))
  {
    std::vector<float>::resize((uint64_t)&v45, (v9 - v10) >> 2);
    std::vector<float>::resize((uint64_t)&__p, v11 * v7);
  }
  uint64_t v12 = 4 * v11;
  if (v5 == v6)
  {
    if (*(unsigned char *)(a1 + 64)) {
LABEL_23:
    }
      cv3d::cv::gess::isochart::CombineGeodesicAndSignalDistance(a3, (float **)&__p, v11 * v7);
LABEL_24:
    if (v5 != v6)
    {
      uint64_t v28 = 0;
      unsigned int v29 = *a2;
      if (v7 <= 1) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = v7;
      }
      do
      {
        unint64_t v31 = &a3[v29[v28]];
        unint64_t v32 = v29;
        uint64_t v33 = v30;
        do
        {
          unsigned int v34 = *v32++;
          unint64_t v35 = v28 * v11 + v34;
          float v36 = *v31;
          if (*v31 >= a3[v35]) {
            float v36 = a3[v35];
          }
          *unint64_t v31 = v36;
          a3[v35] = v36;
          unint64_t v31 = (float *)((char *)v31 + v12);
          --v33;
        }
        while (v33);
        ++v28;
      }
      while (v28 != v30);
    }
  }
  else
  {
    unsigned int v37 = v6;
    unsigned int v38 = v5;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v11 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (v9 - v10) >> 2;
    }
    if (v7 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v7;
    }
    unint64_t v39 = v7;
    uint64_t v40 = v16;
    uint64_t v17 = a3;
    while (1)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      if (v18)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18)) {
          break;
        }
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra(a1, &(*a2)[v14], (uint64_t *)v48, (uint64_t)&v45);
      if (v9 != v10)
      {
        uint64_t v19 = (int *)v48[0];
        uint64_t v20 = v17;
        uint64_t v21 = v15;
        do
        {
          int v22 = *v19++;
          *(_DWORD *)v20++ = v22;
          --v21;
        }
        while (v21);
      }
      int v23 = *(unsigned __int8 *)(a1 + 64);
      if (*(unsigned char *)(a1 + 64))
      {
        char v24 = (int *)v45;
        if (v11 != (v46 - (unsigned char *)v45) >> 2) {
          __assert_rtn("CalculateGeodesicDistance", "IsoChartMesh.cpp", 166, "signal_distances.size() == v_size");
        }
        if (v9 != v10)
        {
          char v25 = (char *)__p + v13;
          uint64_t v26 = v15;
          do
          {
            int v27 = *v24++;
            *v25++ = v27;
            --v26;
          }
          while (v26);
        }
      }
      ++v14;
      uint64_t v17 = (float *)((char *)v17 + v12);
      v13 += v12;
      if (v14 == v40)
      {
        long long v5 = v38;
        unint64_t v7 = v39;
        uint64_t v6 = v37;
        if (!v23) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
  }
  if (__p)
  {
    unsigned int v43 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    unsigned int v46 = v45;
    operator delete(v45);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
}

void sub_24F51F528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void *cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicMatrix(void *result, void *a2)
{
  uint64_t v2 = (char *)result[9];
  unint64_t v3 = (char *)result[10];
  uint64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 2;
    uint64_t v7 = (uint64_t)(*(void *)(result[5] + 112) - *(void *)(result[5] + 104)) >> 2;
    uint64_t v8 = result[39];
    uint64_t v9 = (_DWORD *)*a2;
    if (v6 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v6;
    }
    uint64_t v11 = 4 * v6;
    do
    {
      uint64_t v12 = (unsigned int *)v2;
      uint64_t v13 = v9;
      __n128 result = (void *)v10;
      do
      {
        unsigned int v14 = *v12++;
        *v13++ = *(_DWORD *)(v8 + 4 * (v5 * v7 + v14));
        __n128 result = (void *)((char *)result - 1);
      }
      while (result);
      ++v5;
      uint64_t v9 = (_DWORD *)((char *)v9 + v11);
    }
    while (v5 != v10);
  }
  return result;
}

float *cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  if (*((void *)this + 23) <= 1uLL) {
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord();
  }
  uint64_t v2 = (uint64_t *)*((void *)this + 5);
  uint64_t v81 = v2[13];
  uint64_t v82 = v2[14];
  uint64_t v4 = *((void *)this + 9);
  uint64_t v3 = *((void *)this + 10);
  unint64_t v5 = (v3 - v4) >> 2;
  LODWORD(v85[0]) = *((_DWORD *)this + 48);
  uint64_t v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v2 + 10, (unsigned int *)v85);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, (v82 - v81) >> 2);
  unint64_t v7 = *((void *)this + 23);
  if ((v7 * v5) >> 62) {
    size_t v8 = -1;
  }
  else {
    size_t v8 = 4 * v7 * v5;
  }
  __n128 result = (float *)operator new[](v8, MEMORY[0x263F8C180]);
  if (result)
  {
    uint64_t v10 = result;
    cv3d::cv::gess::isochart::IsoMap::GetDestineVectors((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120), v7, result);
    unint64_t v79 = (v82 - v81) >> 2;
    uint64_t v80 = v10;
    std::vector<float>::vector(v85, *((void *)this + 23));
    if (v3 != v4)
    {
      uint64_t v11 = 0;
      if (v5 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = (v3 - v4) >> 2;
      }
      unint64_t v13 = *((void *)this + 23);
      unsigned int v14 = v80;
      do
      {
        unint64_t v15 = *(unsigned int *)(*((void *)this + 9) + 4 * v11);
        if (v13)
        {
          uint64_t v16 = 0;
          int v17 = 0;
          do
          {
            float v18 = v14[v16];
            if (fabsf(v18) == INFINITY) {
              __assert_rtn("CalculateVertMappingCoord", "IsoChartMesh.cpp", 362, "!std::isinf(pf_coords[jj])");
            }
            *(float *)(*((void *)this + 42) + 4
                                              * (v15 * v13 + (unsigned __int16)v17++)) = v18;
            uint64_t v16 = (unsigned __int16)v17;
          }
          while (v13 > (unsigned __int16)v17);
        }
        uint64_t v19 = *(void *)v14;
        uint64_t v20 = *((void *)this + 5);
        LODWORD(v84[0]) = *((_DWORD *)this + 48);
        uint64_t v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v20 + 80), (unsigned int *)v84);
        uint64_t v22 = *(void *)(v21 + 40);
        if (v15 >= (*(void *)(v21 + 48) - v22) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(void *)(v22 + 8 * v15) = v19;
        unint64_t v13 = *((void *)this + 23);
        v14 += v13;
        ++v11;
      }
      while (v11 != v12);
    }
    int v23 = (float *)*((void *)this + 21);
    std::vector<float>::vector(v84, (v3 - v4) >> 2);
    if (v82 != v81)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      if (v5 <= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = (v3 - v4) >> 2;
      }
      if (v79 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = (v82 - v81) >> 2;
      }
      uint64_t v28 = 4 * v5;
      do
      {
        if (((*(void *)(*((void *)this + 26) + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
        {
          if (v3 != v4)
          {
            unsigned int v29 = (float *)v84[0];
            uint64_t v30 = (float *)(*((void *)this + 39) + v24);
            unint64_t v31 = v23;
            uint64_t v32 = v26;
            do
            {
              float v33 = *v31++;
              *v29++ = v33 - (float)(*v30 * *v30);
              v30 += v79;
              --v32;
            }
            while (v32);
          }
          uint64_t v34 = *((void *)this + 23);
          unint64_t v35 = (void *)(*((void *)this + 42) + 4 * v34 * v25);
          if (v34)
          {
            uint64_t v36 = 0;
            unsigned int v37 = (float *)v84[0];
            uint64_t v39 = *((void *)this + 19);
            unsigned int v38 = (float *)*((void *)this + 20);
            do
            {
              *((_DWORD *)v35 + v36) = 0;
              float v40 = 0.0;
              float v41 = 0.0;
              if (v3 != v4)
              {
                unsigned int v42 = v37;
                unsigned int v43 = v38;
                uint64_t v44 = v26;
                do
                {
                  float v45 = *v42++;
                  float v46 = v45;
                  float v47 = *v43++;
                  float v41 = v41 + (float)(v46 * v47);
                  *((float *)v35 + v36) = v41;
                  --v44;
                }
                while (v44);
              }
              float v48 = *(float *)(v39 + 4 * v36);
              if (v48 > 0.0)
              {
                float v49 = sqrtf(v48);
                float v50 = v49 + v49;
                if (v48 < 0.0) {
                  float v50 = 0.0;
                }
                float v40 = v41 / v50;
              }
              *((float *)v35 + v36++) = v40;
              unsigned int v38 = (float *)((char *)v38 + v28);
            }
            while (v36 != v34);
          }
          uint64_t v51 = *v35;
          uint64_t v52 = *((void *)this + 5);
          LODWORD(__p[0]) = *((_DWORD *)this + 48);
          uint64_t v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v52 + 80), (unsigned int *)__p);
          uint64_t v54 = *(void *)(v53 + 40);
          if (v25 >= (*(void *)(v53 + 48) - v54) >> 3) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(v54 + 8 * v25) = v51;
        }
        ++v25;
        v24 += 4;
      }
      while (v25 != v27);
    }
    uint64_t v55 = *((void *)this + 5);
    uint64_t v57 = *(void *)(v55 + 152);
    uint64_t v56 = *(void *)(v55 + 160);
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    uint64_t v58 = *((void *)this + 5);
    unsigned int v86 = *((_DWORD *)this + 48);
    uint64_t v59 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v58 + 80), &v86);
    unint64_t v61 = (v56 - v57) >> 2;
    if (v56 == v57)
    {
      unint64_t v63 = 0;
    }
    else
    {
      uint64_t v62 = 0;
      unint64_t v63 = 0;
      if (v61 <= 1) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = v61;
      }
      do
      {
        uint64_t v65 = *((void *)this + 5);
        unsigned int v86 = v62;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v65, &v86, __p);
        unint64_t v68 = *((unsigned int *)__p[0] + 1);
        uint64_t v69 = *(void *)(v59 + 40);
        unint64_t v70 = (*(void *)(v59 + 48) - v69) >> 3;
        if (v70 <= v68 || (unint64_t v71 = *(unsigned int *)__p[0], v70 <= v71)) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        unint64_t v72 = *((unsigned int *)__p[0] + 2);
        if (v70 <= v72) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        v66.i64[0] = *(void *)(v69 + 8 * v71);
        *(float32x2_t *)v67.i8 = vsub_f32(*(float32x2_t *)(v69 + 8 * v68), *(float32x2_t *)v66.i8);
        *(float32x2_t *)v66.i8 = vsub_f32(*(float32x2_t *)(v69 + 8 * v72), *(float32x2_t *)v66.i8);
        float32x4_t v73 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL), v66);
        __n128 v60 = (__n128)vzip2q_s32(vzip1q_s32(v66, (int32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 0xCuLL)), v66);
        v60.n128_f32[0] = COERCE_FLOAT(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v67, (int32x4_t)vextq_s8(*(int8x16_t *)&v67, *(int8x16_t *)&v67, 0xCuLL)), v67), v73), *(float32x4_t *)&v60, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v67, *(int8x16_t *)&v67, 4uLL), v67)).i32[2]);
        if (v60.n128_f32[0] >= 0.0) {
          ++v63;
        }
        ++v62;
      }
      while (v64 != v62);
    }
    if (v63 < v61 - v63 && v82 != v81)
    {
      uint64_t v75 = *(void *)(v59 + 40);
      uint64_t v76 = (*(void *)(v59 + 48) - v75) >> 3;
      uint64_t v77 = (v82 - v81) >> 2;
      if (v79 <= 1) {
        uint64_t v77 = 1;
      }
      uint64_t v78 = (float *)(v75 + 4);
      do
      {
        if (!v76) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        v60.n128_f32[0] = -*v78;
        float *v78 = v60.n128_f32[0];
        v78 += 2;
        --v76;
        --v77;
      }
      while (v77);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v84[0])
    {
      v84[1] = v84[0];
      operator delete(v84[0]);
    }
    if (v85[0])
    {
      v85[1] = v85[0];
      operator delete(v85[0]);
    }
    return (float *)MEMORY[0x25335E9F0](v80, 0x1000C8052888210, v60);
  }
  return result;
}

void sub_24F51FB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  MEMORY[0x25335E9F0](a10, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks(uint64_t a1, void *a2)
{
}

float *cv3d::cv::gess::isochart::CombineGeodesicAndSignalDistance(float *result, float **a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    float v4 = 0.0;
    float v5 = 0.0;
    do
    {
      float v5 = v5 + (*a2)[v3];
      float v4 = v4 + result[v3++];
    }
    while (a3 != v3);
    float v6 = v5 / (float)a3;
    if (v6 > 0.00000001)
    {
      float v7 = (float)(v4 / (float)a3) / v6;
      size_t v8 = *a2;
      do
      {
        float v9 = *v8++;
        float v10 = (float)((float)(v7 * v9) * 0.3) + *result * *(double *)"";
        *result++ = v10;
        --a3;
      }
      while (a3);
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = (a3[1] - *a3) >> 2;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v5 + 104);
  uint64_t v6 = *(void *)(v5 + 112);
  if (v4 != (v6 - v7) >> 2) {
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra();
  }
  LOBYTE(v46[0]) = 0;
  std::vector<BOOL>::vector(v50, v4, (unsigned __int8 *)v46);
  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(v49, v4);
  if (v6 != v7)
  {
    uint64_t v12 = 0;
    if (v4 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v4;
    }
    do
    {
      unsigned int v14 = operator new(0x28uLL);
      v14[1] = 0;
      void v14[2] = 0;
      *unsigned int v14 = &unk_2700D8F38;
      *((_DWORD *)v14 + 6) = 0;
      v14[4] = -1;
      unint64_t v15 = (void *)(v49[0] + v12);
      uint64_t v16 = *(std::__shared_weak_count **)(v49[0] + v12 + 8);
      *unint64_t v15 = v14 + 3;
      v15[1] = v14;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v12 += 16;
      --v13;
    }
    while (v13);
  }
  uint64_t v48 = 0;
  memset(v46, 0, sizeof(v46));
  char v47 = 0;
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize((uint64_t *)v46, v4);
  int v17 = (_DWORD *)*a3;
  uint64_t v18 = a3[1] - *a3;
  if (v18 >= 1) {
    memset_pattern16((void *)*a3, &unk_24F5786F0, 4 * (((unint64_t)v18 >> 2) - ((unint64_t)v18 > 3)) + 4);
  }
  int v19 = *(unsigned __int8 *)(a1 + 64);
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v20 = *(void *)(a4 + 8) - *(void *)a4;
    if (v20 >= 1) {
      memset_pattern16(*(void **)a4, &unk_24F5786F0, 4 * (((unint64_t)v20 >> 2) - ((unint64_t)v20 > 3)) + 4);
    }
  }
  unint64_t v21 = *a2;
  *(void *)((char *)v50[0] + ((v21 >> 3) & 0x1FFFFFF8)) |= 1 << v21;
  v17[v21] = 0;
  if (v19) {
    *(_DWORD *)(*(void *)a4 + 4 * v21) = 0;
  }
  long long v22 = *(_OWORD *)(v49[0] + 16 * v21);
  int v23 = *(_DWORD **)(v49[0] + 16 * v21);
  *int v23 = 0;
  v23[1] = v21;
  long long v45 = v22;
  if (*((void *)&v22 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t *)v46, &v45);
  if (*((void *)&v45 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
  }
  if (v6 != v7)
  {
    uint64_t v24 = 0;
    if (v4 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v4;
    }
    do
    {
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at((uint64_t *)v46, 0, &v43);
      unsigned int v42 = *(_DWORD *)(v43 + 4);
      *(void *)((char *)v50[0] + (((unint64_t)v42 >> 3) & 0x1FFFFFF8)) |= 1 << v42;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v41, *(void *)(a1 + 40) + 104, &v42);
      unsigned int HEdge = -1;
      while (1)
      {
        unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v41);
        if (HEdge == -1) {
          break;
        }
        uint64_t v26 = *(void *)(a1 + 40) + 104;
        uint64_t v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, &HEdge);
        v39[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12);
        if (((*(void *)((char *)v50[0] + (((unint64_t)v39[0] >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v39[0])) & 1) == 0) {
          cv3d::cv::gess::isochart::IsoChartMesh::UpdateAdjacentVertexGeodistance(a1, &v42, v39, &HEdge, v50, a3, (void *)a4);
        }
      }
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v39, *(void *)(a1 + 40) + 104, &v42);
      while (1)
      {
        unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v39);
        if (HEdge == -1) {
          break;
        }
        uint64_t v28 = *(void *)(a1 + 40) + 104;
        unsigned int v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v28, &HEdge);
        unint64_t v30 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v28, v29) + 12);
        if (((*(void *)((char *)v50[0] + ((v30 >> 3) & 0x1FFFFFF8)) >> v30) & 1) == 0)
        {
          uint64_t v31 = v49[0];
          uint64_t v32 = *(void *)(v49[0] + 16 * v30);
          if (*(void *)(v32 + 8) == -1)
          {
            *(_DWORD *)(v32 + 4) = v30;
            *(float *)uint64_t v32 = -*(float *)(*a3 + 4 * v30);
            *(void *)&long long v36 = v32;
            uint64_t v35 = *(void *)(v31 + 16 * v30 + 8);
            *((void *)&v36 + 1) = v35;
            if (v35) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
            }
            cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t *)v46, &v36);
            uint64_t v34 = (std::__shared_weak_count *)*((void *)&v36 + 1);
            if (*((void *)&v36 + 1)) {
LABEL_39:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          }
          else
          {
            uint64_t v37 = *(void *)(v49[0] + 16 * v30);
            float v33 = *(std::__shared_weak_count **)(v49[0] + 16 * v30 + 8);
            unsigned int v38 = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update((uint64_t *)v46, &v37, -*(float *)(*a3 + 4 * v30));
            uint64_t v34 = v38;
            if (v38) {
              goto LABEL_39;
            }
          }
        }
      }
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)v46);
  v46[0] = (void **)v49;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v46);
  if (v50[0]) {
    operator delete(v50[0]);
  }
}

void sub_24F520114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void **a23)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&a23);
  a23 = (void **)(v23 - 136);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a23);
  uint64_t v25 = *(void **)(v23 - 112);
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

float32x4_t *cv3d::cv::gess::isochart::IsoChartMesh::UpdateAdjacentVertexGeodistance(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, void *a5, void *a6, void *a7)
{
  uint64_t v14 = *(void *)(a1 + 40);
  unsigned int v45 = *(_DWORD *)(a1 + 200);
  uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v14 + 32), &v45);
  unint64_t v16 = *a4;
  uint64_t v17 = *(void *)(v15 + 40);
  if (v16 >= (*(void *)(v15 + 48) - v17) >> 2) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  uint64_t v18 = *(void *)(a1 + 40);
  unsigned int v46 = *(_DWORD *)(a1 + 204);
  uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v18 + 32), &v46);
  unint64_t v20 = *a4;
  uint64_t v21 = *(void *)(v19 + 40);
  if (v20 >= (*(void *)(v19 + 48) - v21) >> 2) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  uint64_t v22 = *a3;
  uint64_t v23 = *a2;
  float v24 = *(float *)(*a6 + 4 * v23) + *(float *)(v17 + 4 * v16);
  if (*(float *)(*a6 + 4 * v22) > v24)
  {
    *(float *)(*a6 + 4 * v22) = v24;
    if (*(unsigned char *)(a1 + 64)) {
      *(float *)(*a7 + 4 * v22) = *(float *)(*a7 + 4 * v23) + *(float *)(v21 + 4 * v20);
    }
  }
  uint64_t v25 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), *a4);
  if ((v26 & *v25) == 0)
  {
    uint64_t v27 = *(void *)(a1 + 40) + 104;
    uint64_t v28 = cv3d::cv::gess::mesh::Topology::h(v27, a4);
    unsigned int v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v27, (unsigned int *)(v28 + 8));
    unsigned __int32 v44 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v27, v29) + 12);
    if ((*(void *)(*a5 + (((unint64_t)v44 >> 3) & 0x1FFFFFF8)) >> v44))
    {
      if (*(float *)(*a6 + 4 * v44) <= *(float *)(*a6 + 4 * *a2))
      {
        uint64_t v32 = &v44;
        uint64_t v31 = a1;
        unint64_t v30 = a2;
      }
      else
      {
        unint64_t v30 = &v44;
        uint64_t v31 = a1;
        uint64_t v32 = a2;
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceABC(v31, v32, v30, a3, a6);
    }
  }
  uint64_t v33 = *(void *)(a1 + 40);
  uint64_t v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v33 + 104, a4);
  __n128 result = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v33, *(_DWORD *)(v33 + 180), *v34);
  if ((v36 & result->i64[0]) == 0)
  {
    uint64_t v37 = *(void *)(a1 + 40) + 104;
    unsigned int v38 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v37, a4);
    uint64_t v39 = cv3d::cv::gess::mesh::Topology::h(v37, v38);
    float v40 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v37, (unsigned int *)(v39 + 8));
    __n128 result = (float32x4_t *)cv3d::cv::gess::mesh::Topology::h(v37, v40);
    unsigned __int32 v44 = result->u32[3];
    if ((*(void *)(*a5 + (((unint64_t)v44 >> 3) & 0x1FFFFFF8)) >> v44))
    {
      if (*(float *)(*a6 + 4 * v44) <= *(float *)(*a6 + 4 * *a2))
      {
        uint64_t v43 = &v44;
        uint64_t v42 = a1;
        float v41 = a2;
      }
      else
      {
        float v41 = &v44;
        uint64_t v42 = a1;
        uint64_t v43 = a2;
      }
      return cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceABC(v42, v43, v41, a3, a6);
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update(uint64_t *a1, uint64_t *a2, float a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v4 = *(void *)(v3 + 8);
    if (v4 < a1[4])
    {
      float v5 = *(float *)v3;
      *(float *)uint64_t v3 = a3;
      if (v5 <= a3) {
        cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(a1, v4);
      }
      else {
        cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::downheap(a1, v4);
      }
    }
  }
}

float32x4_t *cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceABC(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  uint64_t v9 = *a3;
  float v10 = *(float *)(*a5 + 4 * v9);
  float v11 = *(float *)(*a5 + 4 * *a2);
  float32x4_t v35 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 176), v9);
  float32x4_t v36 = vsubq_f32(v35, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 176), *a4));
  float32x4_t v34 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 176), *a2);
  __n128 result = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 176), *a4);
  float32x4_t v13 = vsubq_f32(v34, *result);
  float32x4_t v14 = vmulq_f32(v36, v36);
  v14.i32[3] = 0;
  float v15 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)));
  float32x4_t v16 = vmulq_f32(v13, v13);
  v16.i32[3] = 0;
  float v17 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
  float v18 = v15 * v17;
  if (fabsf(v15 * v17) >= 0.00000001)
  {
    float v19 = v10 - v11;
    float32x4_t v20 = vmulq_f32(v13, v36);
    v20.i32[3] = 0;
    float v21 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20)) / v18;
    float32x4_t v22 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), (int32x4_t)v13), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v36, (int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL)), (int32x4_t)v36)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v13, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL)), (int32x4_t)v13), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), (int32x4_t)v36));
    float32x4_t v23 = vmulq_f32(v22, v22);
    v23.i32[3] = 0;
    v22.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23))) / v18;
    float v24 = (float)((float)(v17 * v17) + (float)(v15 * v15)) + (float)((float)((float)(v15 * -2.0) * v17) * v21);
    float v25 = (float)((float)(v10 - v11) * (float)(v17 + v17)) * (float)-(float)(v17 - (float)(v15 * v21));
    float v26 = (float)((float)(v24 * -4.0)
                * (float)((float)(v17 * v17)
                        * (float)((float)(v22.f32[0] * (float)((float)-(float)(v15 * v15) * v22.f32[0]))
                                + (float)(v19 * v19))))
        + (float)(v25 * v25);
    if (v26 >= 0.0 && fabsf(v24) >= 0.00000001)
    {
      float v27 = (float)(sqrtf(v26) - v25) / (float)(v24 + v24);
      if (v27 >= v19 && fabsf(v27) >= 0.00000001)
      {
        float v28 = (float)(v17 * (float)(v27 - v19)) / v27;
        BOOL v29 = v28 <= (float)(v15 / v21) || v21 <= 0.00000001;
        float v30 = v15 * v21;
        if (v29 && v28 >= v30)
        {
          uint64_t v32 = *a4;
          float v33 = v27 + *(float *)(*a5 + 4 * *a2);
          if (*(float *)(*a5 + 4 * v32) > v33) {
            *(float *)(*a5 + 4 * v32) = v33;
          }
        }
      }
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::Partition(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4, int a5)
{
  cv3d::cv::gess::isochart::IsoChartMesh::CollectRepresentativeVertices((cv3d::cv::gess::isochart::IsoChartMesh *)a1);
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v10 || ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10) & 1) == 0)
  {
    char v33 = 0;
    LODWORD(v37.__begin_) = a5;
    cv3d::cv::gess::isochart::IsoChartMesh::PartitionGeneralShape(a1, a2, (unsigned int *)&v37, *a4 != 0, &v33);
    uint64_t v12 = *(void *)(a1 + 32);
    if (!v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) & 1) == 0)
    {
      if (!v33)
      {
        uint64_t v13 = *a2;
        float32x4_t v14 = (void *)a2[1];
        if ((void *)*a2 != v14)
        {
          do
          {
            float32x4_t v16 = *(cv3d::cv::gess::alg **)v13;
            float v15 = *(std::__shared_weak_count **)(v13 + 8);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (!cv3d::cv::gess::isochart::IsVertexManifold(v16, v11))
            {
              cv3d::cv::gess::alg::FixNonManifoldVertices(v16, v11);
              char v33 = 1;
            }
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            v13 += 16;
          }
          while ((void *)v13 != v14);
        }
      }
      uint64_t v17 = *(void *)(a1 + 32);
      if (!v17 || ((*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17) & 1) == 0)
      {
        memset(&v37, 0, sizeof(v37));
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__init_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(&v37, (void *)*a2, (void *)a2[1], (a2[1] - *a2) >> 4);
        if (v37.__end_ != v37.__begin_)
        {
          int64_t v18 = ((char *)v37.__end_ - (char *)v37.__begin_) >> 4;
          do
          {
            float32x4_t v34 = 0;
            float32x4_t v35 = 0;
            uint64_t v36 = 0;
            int64_t v19 = v18 - 1;
            cv3d::cv::gess::isochart::TrySplitMeshByComponents(*(void *)&v37.__begin_[4 * v18 - 4], (uint64_t *)&v34);
            if (v34 != (std::vector<unsigned int> *)v35)
            {
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>((uint64_t)&v38, (long long *)(*a2 + 16 * v18), (long long *)a2[1], *a2 + 16 * v18 - 16);
              float v21 = v20;
              for (uint64_t i = (void *)a2[1]; i != v21; i -= 2)
              {
                float32x4_t v23 = (std::__shared_weak_count *)*(i - 1);
                if (v23) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                }
              }
              a2[1] = (uint64_t)v21;
              float v24 = (long long *)v34;
              float v25 = (long long *)v35;
              while (v24 != v25)
                std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100](a2, v24++);
            }
            uint64_t v39 = &v34;
            std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            int64_t v18 = v19;
          }
          while (v19);
        }
        float32x4_t v34 = &v37;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        uint64_t v26 = *(void *)(a1 + 32);
        if (!v26 || ((*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26) & 1) == 0)
        {
          a3[1] = 0;
          std::vector<BOOL>::resize((uint64_t)a3, (a2[1] - *a2) >> 4, 0);
          std::vector<unsigned int>::vector(&v37, (a2[1] - *a2) >> 4);
          uint64_t v27 = *a2;
          if (a2[1] != *a2)
          {
            uint64_t v28 = 0;
            unint64_t v29 = 0;
            do
            {
              unsigned int v30 = cv3d::cv::gess::isochart::IsochartCountBoundaryLoops(*(void *)(v27 + v28));
              v37.__begin_[v29] = v30;
              if (cv3d::cv::gess::alg::CountConnectedComponents(*(cv3d::cv::gess::alg **)(*a2 + v28), v31) != 1)__assert_rtn("Partition", "IsoChartMesh.cpp", 458, "1 == alg::CountConnectedComponents(*children_mesh[i])"); {
              if ((int)cv3d::cv::gess::isochart::IsochartCountGenus(*(void **)(*a2 + v28), 1, v37.__begin_[v29]) >= 1)
              }
                *(void *)(*a3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
              if (v37.__begin_[v29] >= 2)
              {
                cv3d::cv::gess::isochart::IsoChartMesh::ProcessSingleBoundaryLoopAndComponent(a2, v29, a5, **(float **)(a1 + 48), 0.0005);
                uint64_t v32 = a2[1] - *a2;
                if (a3[1] != v32 >> 4) {
                  std::vector<BOOL>::resize((uint64_t)a3, v32 >> 4, 0);
                }
              }
              ++v29;
              uint64_t v27 = *a2;
              v28 += 16;
            }
            while (v29 < (a2[1] - *a2) >> 4);
          }
          if (v37.__begin_)
          {
            v37.__end_ = v37.__begin_;
            operator delete(v37.__begin_);
          }
        }
      }
    }
  }
}

void sub_24F520A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **p_p, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18)
{
  a18 = (uint64_t *)&p_p;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  p_p = &__p;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CollectRepresentativeVertices(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  uint64_t v2 = (void *)((char *)this + 104);
  uint64_t v3 = (uint64_t **)((char *)this + 96);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  *(v2 - 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
  unint64_t v4 = v2[10];
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      unsigned int v16 = -1;
      unsigned int v17 = -1;
      uint64_t v6 = (unsigned int *)*((void *)this + 9);
      uint64_t v7 = (unsigned int *)*((void *)this + 10);
      if (v6 != v7)
      {
        uint64_t v8 = *((void *)this + 42);
        int v9 = -1;
        float v10 = 3.4028e38;
        float v11 = -3.4028e38;
        int v12 = -1;
        do
        {
          uint64_t v13 = *v6;
          unint64_t v14 = i + v4 * v13;
          float v15 = *(float *)(v8 + 4 * v14);
          if (v15 > v11)
          {
            unsigned int v17 = *v6;
            float v15 = *(float *)(v8 + 4 * v14);
            int v12 = v13;
            float v11 = v15;
          }
          if (v15 < v10)
          {
            int v9 = *v6;
            unsigned int v16 = *v6;
            float v10 = *(float *)(v8 + 4 * v14);
          }
          ++v6;
        }
        while (v6 != v7);
        if (v12 != -1 && v9 != -1)
        {
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v3, &v17, &v17);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v3, &v16, &v16);
          unint64_t v4 = *((void *)this + 23);
        }
      }
    }
  }
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::ProcessSingleBoundaryLoopAndComponent(uint64_t *a1, unsigned int a2, char a3, float a4, float a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  float v26 = a5;
  float v27 = a4;
  uint64_t v7 = a2;
  unsigned int v25 = 0;
  uint64_t v8 = 16 * a2;
  do
  {
    cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v28, *(cv3d::cv::gess::mesh::TriMesh **)(*a1 + v8), &v27, &v26, a3);
    if (cv3d::cv::gess::isochart::IsoChartMesh::CheckAndCutMultipleBoundaries((cv3d::cv::gess::isochart::IsoChartMesh *)v28, &v25))
    {
      unsigned int AllBoundaries = v25;
    }
    else
    {
      float32x4_t v22 = 0;
      float32x4_t v23 = 0;
      uint64_t v24 = 0;
      cv3d::cv::gess::isochart::TrySplitMeshByComponents(*(void *)(*a1 + v8), (uint64_t *)&v22);
      if (v23 == v22 || (unint64_t)(v23 - v22) < 0x11)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x25335E550](exception, "Unexpected boundary status.");
      }
      uint64_t v10 = *a1;
      uint64_t v12 = *(void *)v22;
      uint64_t v11 = *((void *)v22 + 1);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (void *)(v10 + 16 * v7);
      unint64_t v14 = (std::__shared_weak_count *)v13[1];
      void *v13 = v12;
      v13[1] = v11;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      float v15 = v22;
      if ((unint64_t)(v23 - v22) >= 0x11)
      {
        unsigned int v16 = 2;
        unint64_t v17 = 1;
        do
        {
          std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100](a1, (long long *)&v15[16 * v17]);
          unint64_t v17 = v16;
          float v15 = v22;
          ++v16;
        }
        while (v17 < (v23 - v22) >> 4);
      }
      memset(v21, 0, sizeof(v21));
      std::vector<unsigned int>::vector(&v20, (uint64_t)(*(void *)(*(void *)(*a1 + v8) + 112) - *(void *)(*(void *)(*a1 + v8) + 104)) >> 2);
      unsigned int AllBoundaries = cv3d::cv::gess::isochart::FindAllBoundaries(*(void *)(*a1 + v8), (uint64_t *)v21, &v20);
      unsigned int v25 = AllBoundaries;
      if (v20.__begin_)
      {
        v20.__end_ = v20.__begin_;
        operator delete(v20.__begin_);
      }
      v20.__begin_ = (std::vector<unsigned int>::pointer)v21;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      v21[0] = (void **)&v22;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v21);
    }
    cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v28);
  }
  while (AllBoundaries > 1);
  return 1;
}

void sub_24F520DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a13 = &a16;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)&a21);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::CheckAndCutMultipleBoundaries(cv3d::cv::gess::isochart::IsoChartMesh *this, unsigned int *a2)
{
  *a2 = 0;
  std::vector<unsigned int>::size_type v4 = (uint64_t)(*(void *)(*((void *)this + 5) + 112) - *(void *)(*((void *)this + 5) + 104)) >> 2;
  memset(v9, 0, sizeof(v9));
  unsigned int AllBoundaries = cv3d::cv::gess::isochart::FindAllBoundaries(*((void *)this + 5), v9, &__p);
  *a2 = AllBoundaries;
  if (AllBoundaries < 2) {
    goto LABEL_4;
  }
  if (cv3d::cv::gess::isochart::IsoChartMesh::DecreaseBoundary((uint64_t)this, v9, &__p))
  {
    --*a2;
LABEL_4:
    uint64_t v6 = 1;
    goto LABEL_6;
  }
  uint64_t v6 = 0;
LABEL_6:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  __p.__begin_ = (std::vector<unsigned int>::pointer)v9;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v6;
}

void sub_24F520F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  std::vector<unsigned int> __p = &a12;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::DecreaseBoundary(uint64_t a1, void *a2, void *a3)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) < 2) {
    return 1;
  }
  std::vector<unsigned int> __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathBetweenBoundaries(a1, a2, a3, (uint64_t)&__p);
  if (v3) {
    cv3d::cv::gess::isochart::IsoChartMesh::CutChartAlongPath(a1, (uint64_t *)&__p);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_24F520FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathToOtherBoundary(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unsigned int *a6, _DWORD *a7)
{
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(v10 + 104);
  uint64_t v12 = *(void *)(v10 + 112);
  unint64_t v13 = (v12 - v11) >> 2;
  LOBYTE(v90[0]) = 0;
  std::vector<BOOL>::vector(&v94, v13, (unsigned __int8 *)v90);
  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(v93, v13);
  if (v12 != v11)
  {
    uint64_t v14 = 0;
    if (v13 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (v12 - v11) >> 2;
    }
    do
    {
      unsigned int v16 = operator new(0x28uLL);
      v16[1] = 0;
      v16[2] = 0;
      *unsigned int v16 = &unk_2700D8F38;
      *((_DWORD *)v16 + 6) = 0;
      v16[4] = -1;
      unint64_t v17 = (void *)(v93[0] + v14);
      int64_t v18 = *(std::__shared_weak_count **)(v93[0] + v14 + 8);
      *unint64_t v17 = v16 + 3;
      v17[1] = v16;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      v14 += 16;
      --v15;
    }
    while (v15);
  }
  uint64_t v92 = 0;
  memset(v90, 0, sizeof(v90));
  char v91 = 0;
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize((uint64_t *)v90, (v12 - v11) >> 2);
  LODWORD(v81) = 2139095039;
  std::vector<float>::vector(v89, (v12 - v11) >> 2, &v81);
  uint64_t v19 = *(void *)(a5 + 8) - *(void *)a5;
  if (v13 != v19 >> 2) {
    __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", 538, "next_vid_on_path.size() == v_size");
  }
  if (v19 >= 1) {
    memset(*(void **)a5, 255, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
  }
  uint64_t v72 = v12;
  uint64_t v20 = a3;
  uint64_t v21 = *a2 + 24 * a3;
  float32x4_t v22 = *(unsigned int **)(v21 + 8);
  if (v22 != *(unsigned int **)v21)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    float32x4_t v22 = *(unsigned int **)v21;
    do
    {
      unsigned int v25 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), v22[v24]);
      if ((*v25 & v26) == 0) {
        __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", 544, "mesh_.is_boundary(boundaries[i])");
      }
      unint64_t v27 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, (unsigned int *)(*(void *)v21 + v23))+ 12);
      *(void *)&v94[(v27 >> 3) & 0x1FFFFFF8] |= 1 << v27;
      *((_DWORD *)v89[0] + v27) = 0;
      long long v28 = *(_OWORD *)(v93[0] + 16 * v27);
      uint64_t v29 = *(_DWORD **)(v93[0] + 16 * v27);
      *uint64_t v29 = 0x80000000;
      v29[1] = v27;
      long long v88 = v28;
      if (*((void *)&v28 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t *)v90, &v88);
      if (*((void *)&v88 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v88 + 1));
      }
      ++v24;
      float32x4_t v22 = *(unsigned int **)v21;
      v23 += 4;
    }
    while (v24 < (uint64_t)(*(void *)(v21 + 8) - *(void *)v21) >> 2);
  }
  uint64_t v75 = *(unsigned int *)(*a4
                        + 4
                        * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, v22) + 12));
  if (v75 != v20) {
    __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", 555, "curr_boundary_id == curr_boundary_index");
  }
  if (v72 != v11)
  {
    uint64_t v30 = 0;
    if (v13 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v13;
    }
    while (1)
    {
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at((uint64_t *)v90, 0, &v86);
      if (v86)
      {
        unsigned int v85 = *(_DWORD *)(v86 + 4);
        *(void *)&v94[((unint64_t)v85 >> 3) & 0x1FFFFFF8] |= 1 << v85;
        if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(a1 + 40), (uint64_t)&v85)
          && (uint64_t v32 = v85, *(_DWORD *)(*a4 + 4 * v85) != v75))
        {
          *a6 = v85;
          *a7 = *((_DWORD *)v89[0] + v32);
          if (*(_DWORD *)(*(void *)a5 + 4 * v32) == -1)
          {
            int v70 = 567;
            unint64_t v71 = "next_vid_on_path[curr_vh.Index()] != INVALID_INDEX";
            goto LABEL_90;
          }
          if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(a1 + 40), (uint64_t)&v85))
          {
            int v70 = 568;
            unint64_t v71 = "mesh_.is_boundary(curr_vh)";
LABEL_90:
            __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", v70, v71);
          }
          int v69 = 1;
        }
        else
        {
          cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v84, *(void *)(a1 + 40) + 104, &v85);
          uint64_t v81 = 0;
          std::vector<unsigned int> __p = 0;
          unint64_t v83 = 0;
          while (1)
          {
            int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v84);
            int v34 = HEdge;
            float32x4_t v35 = (char *)__p;
            if (HEdge == -1) {
              break;
            }
            if ((unint64_t)__p >= v83)
            {
              uint64_t v37 = ((unsigned char *)__p - v81) >> 2;
              if ((unint64_t)(v37 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v38 = (uint64_t)(v83 - (void)v81) >> 1;
              if (v38 <= v37 + 1) {
                unint64_t v38 = v37 + 1;
              }
              if (v83 - (unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v38;
              }
              if (v39) {
                float v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v83, v39);
              }
              else {
                float v40 = 0;
              }
              float v41 = &v40[4 * v37];
              *(_DWORD *)float v41 = v34;
              uint64_t v36 = v41 + 4;
              uint64_t v43 = v81;
              uint64_t v42 = (char *)__p;
              if (__p != v81)
              {
                do
                {
                  int v44 = *((_DWORD *)v42 - 1);
                  v42 -= 4;
                  *((_DWORD *)v41 - 1) = v44;
                  v41 -= 4;
                }
                while (v42 != v43);
                uint64_t v42 = v81;
              }
              uint64_t v81 = v41;
              std::vector<unsigned int> __p = v36;
              unint64_t v83 = (unint64_t)&v40[4 * v39];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(_DWORD *)std::vector<unsigned int> __p = HEdge;
              uint64_t v36 = v35 + 4;
            }
            std::vector<unsigned int> __p = v36;
          }
          if (__p != v81)
          {
            uint64_t v45 = 0;
            unint64_t v46 = 0;
            float32x4_t v35 = v81;
            do
            {
              uint64_t v47 = *(void *)(a1 + 40) + 104;
              uint64_t v48 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v47, (unsigned int *)&v35[v45]);
              unint64_t v49 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v47, v48) + 12);
              if (((*(void *)&v94[(v49 >> 3) & 0x1FFFFFF8] >> v49) & 1) == 0)
              {
                uint64_t v50 = *(void *)(a1 + 40);
                v95[0] = *(_DWORD *)(a1 + 200);
                uint64_t v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v50 + 32), v95);
                unint64_t v52 = *(unsigned int *)&v35[4 * v46];
                uint64_t v53 = *(void *)(v51 + 40);
                if (v52 >= (*(void *)(v51 + 48) - v53) >> 2) {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                float v54 = *(float *)(v53 + 4 * v52);
                unsigned int v55 = v85;
                float v56 = *((float *)v89[0] + v85);
                if (v54 < (float)(v56 * 0.0000001)) {
                  float v54 = v56 * 0.0000001;
                }
                float v57 = v56 + v54;
                if (*((float *)v89[0] + v49) > v57)
                {
                  *((float *)v89[0] + v49) = v57;
                  *(_DWORD *)(*(void *)a5 + 4 * v49) = v55;
                }
              }
              ++v46;
              float32x4_t v35 = v81;
              v45 += 4;
            }
            while (v46 < ((unsigned char *)__p - v81) >> 2);
            if (__p != v81)
            {
              uint64_t v58 = 0;
              unint64_t v59 = 0;
              do
              {
                __n128 v60 = (unsigned int *)&v35[v58];
                uint64_t v61 = *(void *)(a1 + 40) + 104;
                uint64_t v62 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v61, v60);
                unint64_t v63 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v61, v62) + 12);
                if (((*(void *)&v94[(v63 >> 3) & 0x1FFFFFF8] >> v63) & 1) == 0)
                {
                  uint64_t v64 = v93[0];
                  uint64_t v65 = *(void *)(v93[0] + 16 * v63);
                  if (*(void *)(v65 + 8) == -1)
                  {
                    *(_DWORD *)(v65 + 4) = v63;
                    *(float *)uint64_t v65 = -*((float *)v89[0] + v63);
                    *(void *)&long long v78 = v65;
                    uint64_t v68 = *(void *)(v64 + 16 * v63 + 8);
                    *((void *)&v78 + 1) = v68;
                    if (v68) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
                    }
                    cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t *)v90, &v78);
                    int32x4_t v67 = (std::__shared_weak_count *)*((void *)&v78 + 1);
                    if (!*((void *)&v78 + 1)) {
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    uint64_t v79 = *(void *)(v93[0] + 16 * v63);
                    int32x4_t v66 = *(std::__shared_weak_count **)(v93[0] + 16 * v63 + 8);
                    uint64_t v80 = v66;
                    if (v66) {
                      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update((uint64_t *)v90, &v79, -*((float *)v89[0] + v63));
                    int32x4_t v67 = v80;
                    if (!v80) {
                      goto LABEL_64;
                    }
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v67);
                }
LABEL_64:
                ++v59;
                float32x4_t v35 = v81;
                v58 += 4;
              }
              while (v59 < ((unsigned char *)__p - v81) >> 2);
            }
          }
          if (v35)
          {
            std::vector<unsigned int> __p = v35;
            operator delete(v35);
          }
          int v69 = 0;
        }
      }
      else
      {
        int v69 = 8;
      }
      if (v87) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      }
      if (!v69 && ++v30 != v31) {
        continue;
      }
      break;
    }
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)v90);
  v90[0] = (void **)v93;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v90);
  if (v94) {
    operator delete(v94);
  }
}

void sub_24F52174C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32)
{
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&a32);
  a32 = v32 - 160;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  int v34 = *(void **)(v32 - 136);
  if (v34) {
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = a3;
  uint64_t v8 = *(int **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  int v9 = (void *)(a4 + 16);
  do
  {
    if ((unint64_t)v8 >= *v9)
    {
      uint64_t v10 = *(int **)a4;
      uint64_t v11 = ((uint64_t)v8 - *(void *)a4) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = *v9 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v9, v14);
        uint64_t v10 = *(int **)a4;
        uint64_t v8 = *(int **)(a4 + 8);
      }
      else
      {
        uint64_t v15 = 0;
      }
      unsigned int v16 = &v15[4 * v11];
      *(_DWORD *)unsigned int v16 = v7;
      unint64_t v17 = (int *)(v16 + 4);
      while (v8 != v10)
      {
        int v18 = *--v8;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      *(void *)a4 = v16;
      *(void *)(a4 + 8) = v17;
      *(void *)(a4 + 16) = &v15[4 * v14];
      if (v10) {
        operator delete(v10);
      }
      uint64_t v8 = v17;
    }
    else
    {
      *v8++ = v7;
    }
    *(void *)(a4 + 8) = v8;
    LODWORD(v7) = *(_DWORD *)(*a2 + 4 * v7);
  }
  while (v7 != -1);
  uint64_t v19 = *(int **)a4;
  unint64_t v20 = (((uint64_t)v8 - *(void *)a4) >> 2) - 1;
  if (v20)
  {
    for (unint64_t i = 0; i < v20; ++i)
    {
      int v22 = v19[i];
      v19[i] = v19[v20];
      v19[v20--] = v22;
    }
  }
  uint64_t v23 = *(void *)(a1 + 40);
  int v27 = *v19;
  if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(v23, (uint64_t)&v27)) {
    cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource();
  }
  uint64_t v24 = *(void *)(a1 + 40);
  int v26 = *(_DWORD *)(*(void *)(a4 + 8) - 4);
  BOOL result = cv3d::cv::gess::mesh::PolyMesh::is_boundary(v24, (uint64_t)&v26);
  if (!result) {
    cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource();
  }
  return result;
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathBetweenBoundaries(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  std::vector<unsigned int>::vector(&v15, (uint64_t)(*(void *)(*(void *)(a1 + 40) + 112) - *(void *)(*(void *)(a1 + 40) + 104)) >> 2);
  if (a2[1] == *a2)
  {
LABEL_7:
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    float v9 = 3.4028e38;
    while (1)
    {
      unsigned int v13 = -1;
      float v14 = 0.0;
      cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathToOtherBoundary(a1, a2, v8, a3, (uint64_t)&v15, &v13, &v14);
      if (v13 == -1) {
        break;
      }
      float v10 = v14;
      if (v14 < v9)
      {
        cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource(a1, &v15, v13, a4);
        float v9 = v10;
      }
      if (++v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)) {
        goto LABEL_7;
      }
    }
    uint64_t v11 = 0;
  }
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  return v11;
}

void sub_24F521AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CutChartAlongPath(uint64_t a1, uint64_t *a2)
{
  long long v88 = 0;
  unsigned int v89 = 0;
  uint64_t v90 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath(a1, a2, (uint64_t)&v88);
  uint64_t v3 = v88;
  if ((unint64_t)(v89 - (unsigned char *)v88) <= 7) {
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 684, "split_path.size() >= 2");
  }
  unint64_t v4 = 0;
  uint64_t v5 = (*(void *)(*(void *)(a1 + 40) + 112) - *(void *)(*(void *)(a1 + 40) + 104)) >> 2;
  do
  {
    v75[0] = v3[v4++];
    v91[0] = v3[v4];
    std::vector<unsigned int> __p = 0;
    uint64_t v86 = 0;
    unint64_t v87 = 0;
    v73[0] = (void *)-1;
    cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit(a1, (uint64_t)v75, v91, (char **)&__p, (unint64_t *)v73);
    uint64_t v6 = *(void *)(a1 + 40);
    *(_OWORD *)uint64_t v76 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v6, *(_DWORD *)(v6 + 176), v75[0]);
    unsigned int v83 = -1;
    unsigned int appended = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(v6, v76, &v83);
    uint64_t v7 = *(void *)(a1 + 40);
    LODWORD(v77) = -1;
    v76[0] = (void *)-1;
    v76[1] = (void *)-1;
    unsigned int v83 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(v7, 1, (long long *)v76);
    uint64_t v8 = *(void *)(a1 + 40);
    LODWORD(v77) = -1;
    v76[0] = (void *)-1;
    v76[1] = (void *)-1;
    unsigned int v82 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(v8, 1, (long long *)v76);
    LODWORD(v76[0]) = *(v86 - 1);
    float v9 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), v76[0]);
    if ((*v9 & v10) == 0) {
      __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 703, "mesh_.is_boundary(bh0)");
    }
    unsigned int v81 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, (unsigned int *)v76) + 4);
    unint64_t v11 = (unint64_t)v73[0];
    unsigned int v80 = *((_DWORD *)__p + (uint64_t)v73[0]);
    unsigned int v79 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v80);
    uint64_t v12 = *(void *)(a1 + 40) + 104;
    unsigned int v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, (unsigned int *)__p);
    int v78 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12);
    uint64_t v14 = cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v81);
    if (v78 != *(_DWORD *)(v14 + 12)) {
      __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 707, "vhc == mesh_.HEdgeStart(bh1)");
    }
    cv3d::cv::gess::mesh::Topology::SetPrevNext(*(void *)(a1 + 40) + 104, &v81, &v82);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(*(void *)(a1 + 40) + 104, &v82, &v83);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(*(void *)(a1 + 40) + 104, &v83, (unsigned int *)v76);
    cv3d::cv::gess::mesh::Topology::SetTwin(*(void *)(a1 + 40) + 104, &v80, &v83);
    cv3d::cv::gess::mesh::Topology::SetTwin(*(void *)(a1 + 40) + 104, &v79, &v82);
    std::vector<unsigned int> v15 = (char *)__p;
    if (v11 < ((char *)v86 - (unsigned char *)__p) >> 2)
    {
      uint64_t v16 = 4 * v11;
      do
      {
        cv3d::cv::gess::mesh::Topology::SetStart((void *)(*(void *)(a1 + 40) + 104), (unsigned int *)&v15[v16], &appended);
        ++v11;
        std::vector<unsigned int> v15 = (char *)__p;
        v16 += 4;
      }
      while (v11 < ((char *)v86 - (unsigned char *)__p) >> 2);
    }
    cv3d::cv::gess::mesh::Topology::SetStart((void *)(*(void *)(a1 + 40) + 104), &v83, v91);
    cv3d::cv::gess::mesh::Topology::SetStart((void *)(*(void *)(a1 + 40) + 104), &v82, v75);
    cv3d::cv::gess::mesh::Topology::SetStart((void *)(*(void *)(a1 + 40) + 104), &v81, &v78);
    if (__p)
    {
      uint64_t v86 = (unsigned int *)__p;
      operator delete(__p);
    }
    uint64_t v3 = v88;
    unint64_t v17 = ((v89 - (unsigned char *)v88) >> 2) - 1;
  }
  while (v4 < v17);
  uint64_t v18 = *(void *)(a1 + 40);
  unsigned int appended = v88[v17];
  std::vector<unsigned int> __p = 0;
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  v76[0] = 0;
  v76[1] = 0;
  uint64_t v77 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v75, v18 + 104, &appended);
  unsigned int HEdgeClockwise = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdgeClockwise((cv3d::cv::gess::mesh::OneRingHEdge *)v75);
  unint64_t v20 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), HEdgeClockwise);
  if ((*v20 & v21) == 0) {
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 733, "mesh_.is_boundary(hh)");
  }
  unsigned int v83 = HEdgeClockwise;
  unsigned int v82 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v83) + 4);
  do
  {
    int v22 = v86;
    if (v86 >= v87)
    {
      uint64_t v24 = ((char *)v86 - (unsigned char *)__p) >> 2;
      if ((unint64_t)(v24 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = ((char *)v87 - (unsigned char *)__p) >> 1;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if ((unint64_t)((char *)v87 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v87, v26);
      }
      else {
        int v27 = 0;
      }
      long long v28 = (unsigned int *)&v27[4 * v24];
      unsigned int *v28 = HEdgeClockwise;
      uint64_t v23 = v28 + 1;
      uint64_t v30 = (char *)__p;
      uint64_t v29 = (char *)v86;
      if (v86 != __p)
      {
        do
        {
          unsigned int v31 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *--long long v28 = v31;
        }
        while (v29 != v30);
        uint64_t v29 = (char *)__p;
      }
      std::vector<unsigned int> __p = v28;
      uint64_t v86 = v23;
      unint64_t v87 = (unsigned int *)&v27[4 * v26];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *uint64_t v86 = HEdgeClockwise;
      uint64_t v23 = v22 + 1;
    }
    uint64_t v86 = v23;
    unsigned int HEdgeClockwise = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdgeClockwise((cv3d::cv::gess::mesh::OneRingHEdge *)v75);
    uint64_t v32 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), HEdgeClockwise);
  }
  while ((*v32 & v33) == 0 && HEdgeClockwise != -1);
  float32x4_t v35 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), HEdgeClockwise);
  if ((*v35 & v36) == 0) {
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 740, "mesh_.is_boundary(hh)");
  }
  unsigned int v81 = HEdgeClockwise;
  unsigned int v80 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v81) + 4);
  do
  {
    uint64_t v37 = (char *)v76[1];
    if (v76[1] >= v77)
    {
      int64_t v39 = ((char *)v76[1] - (char *)v76[0]) >> 2;
      if ((unint64_t)(v39 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v40 = (v77 - (char *)v76[0]) >> 1;
      if (v40 <= v39 + 1) {
        unint64_t v40 = v39 + 1;
      }
      if ((unint64_t)(v77 - (char *)v76[0]) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41) {
        uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v77, v41);
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v43 = (unsigned int *)&v42[4 * v39];
      *uint64_t v43 = HEdgeClockwise;
      unint64_t v38 = v43 + 1;
      uint64_t v45 = (char *)v76[0];
      int v44 = (char *)v76[1];
      if (v76[1] != v76[0])
      {
        do
        {
          unsigned int v46 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *--uint64_t v43 = v46;
        }
        while (v44 != v45);
        int v44 = (char *)v76[0];
      }
      v76[0] = v43;
      v76[1] = v38;
      uint64_t v77 = &v42[4 * v41];
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *(_DWORD *)v76[1] = HEdgeClockwise;
      unint64_t v38 = v37 + 4;
    }
    v76[1] = v38;
    unsigned int HEdgeClockwise = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdgeClockwise((cv3d::cv::gess::mesh::OneRingHEdge *)v75);
  }
  while (HEdgeClockwise != -1);
  uint64_t v47 = *(void *)(a1 + 40);
  *(_OWORD *)float32x4_t v73 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v47, *(_DWORD *)(v47 + 176), appended);
  v91[0] = -1;
  unsigned int v79 = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(v47, v73, v91);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(*(void *)(a1 + 40) + 104, &v80, &v83);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(*(void *)(a1 + 40) + 104, &v82, &v81);
  uint64_t v48 = (unsigned int *)v76[0];
  unint64_t v49 = (unsigned int *)v76[1];
  while (v48 != v49)
    cv3d::cv::gess::mesh::Topology::SetStart((void *)(*(void *)(a1 + 40) + 104), v48++, &v79);
  uint64_t v50 = (_DWORD *)cv3d::cv::gess::mesh::Topology::v((void *)(*(void *)(a1 + 40) + 104), &appended);
  if (*v50 != v83)
  {
    unint64_t v71 = "mesh_.VertexHEdge(vha) == bh0";
    int v72 = 758;
    goto LABEL_87;
  }
  uint64_t v51 = cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v81);
  if (*(_DWORD *)(v51 + 12) != v79)
  {
    unint64_t v71 = "mesh_.HEdgeStart(bh2) == v_new";
    int v72 = 759;
    goto LABEL_87;
  }
  uint64_t v52 = *(void *)(a1 + 40);
  if (((v89 - (unsigned char *)v88) >> 2) + v5 != (uint64_t)(*(void *)(v52 + 112) - *(void *)(v52 + 104)) >> 2)
  {
    unint64_t v71 = "mesh_.VSize() == (v_size_before + split_path.size())";
    int v72 = 762;
LABEL_87:
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", v72, v71);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "v:index_in_root");
  v91[0] = -1;
  int v53 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v52 + 8), (uint64_t)v91, (unsigned __int8 *)v73);
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (v53 == -1) {
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 765, "v_id_root_ah.Valid()");
  }
  if (v89 != (unsigned char *)v88)
  {
    uint64_t v54 = 0;
    unsigned int v55 = 0;
    float v56 = "index < data_.size()";
    float v57 = "Attribute.h";
    uint64_t v58 = "operator[]";
    while (1)
    {
      uint64_t v59 = *(void *)(a1 + 40);
      LODWORD(v73[0]) = v53;
      uint64_t v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v59 + 8), (unsigned int *)v73);
      unint64_t v61 = v5 + v55;
      uint64_t v62 = *(void *)(v60 + 40);
      if (v61 >= (*(void *)(v60 + 48) - v62) >> 2) {
        break;
      }
      if (*(_DWORD *)(v62 + 4 * v61) != -1)
      {
        int v70 = 767;
        uint64_t v58 = "CutChartAlongPath";
        float v57 = "IsoChartMesh.cpp";
        float v56 = "!mesh_.attribute(v_id_root_ah)[ii + v_size_before].Valid()";
LABEL_80:
        __assert_rtn(v58, v57, v70, v56);
      }
      uint64_t v63 = *(void *)(a1 + 40);
      LODWORD(v73[0]) = v53;
      uint64_t v64 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v63 + 8), (unsigned int *)v73);
      unint64_t v65 = v88[v54];
      uint64_t v66 = *(void *)(v64 + 40);
      if (v65 >= (*(void *)(v64 + 48) - v66) >> 2) {
        break;
      }
      uint64_t v67 = *(void *)(a1 + 40);
      LODWORD(v73[0]) = v53;
      uint64_t v68 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v67 + 8), (unsigned int *)v73);
      uint64_t v69 = *(void *)(v68 + 40);
      if (v61 >= (*(void *)(v68 + 48) - v69) >> 2) {
        break;
      }
      *(_DWORD *)(v69 + 4 * v61) = *(_DWORD *)(v66 + 4 * v65);
      uint64_t v54 = ++v55;
      if (v55 >= (unint64_t)((v89 - (unsigned char *)v88) >> 2)) {
        goto LABEL_69;
      }
    }
    int v70 = 182;
    goto LABEL_80;
  }
LABEL_69:
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  if (__p)
  {
    uint64_t v86 = (unsigned int *)__p;
    operator delete(__p);
  }
  if (v88)
  {
    unsigned int v89 = v88;
    operator delete(v88);
  }
}

void sub_24F5223C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a26) {
    operator delete(a26);
  }
  uint64_t v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(void *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath();
  }
  if (v4 - v3 == 4)
  {
    LODWORD(v8) = 0;
LABEL_7:
    unsigned int v9 = v8;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v28 = *(_DWORD *)(v3 + 4 * v8);
      if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(v10, (uint64_t)&v28)) {
        break;
      }
      uint64_t v3 = *a2;
      uint64_t v8 = ++v9;
      if (((a2[1] - *a2) >> 2) - 1 <= (unint64_t)v9) {
        goto LABEL_7;
      }
    }
  }
  if (!v9) {
    cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath();
  }
  unint64_t v11 = v9 - 1;
  uint64_t v12 = *a2;
  if (v11 < (a2[1] - *a2) >> 2)
  {
    unint64_t v13 = v9 - 1;
    do
    {
      int v14 = *(_DWORD *)(v12 + 4 * v13);
      if (v14 == -1) {
        cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath();
      }
      uint64_t v16 = *(_DWORD **)(a3 + 8);
      unint64_t v15 = *(void *)(a3 + 16);
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = *(_DWORD **)a3;
        uint64_t v19 = ((uint64_t)v16 - *(void *)a3) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v15 - (void)v18;
        if (v21 >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a3 + 16, v22);
          uint64_t v18 = *(_DWORD **)a3;
          uint64_t v16 = *(_DWORD **)(a3 + 8);
          int v14 = *(_DWORD *)(v12 + 4 * v13);
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[4 * v19];
        *(_DWORD *)uint64_t v24 = v14;
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *--v16;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *(void *)a3 = v24;
        *(void *)(a3 + 8) = v17;
        *(void *)(a3 + 16) = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v16 = v14;
        unint64_t v17 = v16 + 1;
      }
      *(void *)(a3 + 8) = v17;
      if (v13 != v11)
      {
        uint64_t v26 = *(void *)(a1 + 40);
        int v27 = *(_DWORD *)(*a2 + 4 * v13);
        if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(v26, (uint64_t)&v27)) {
          break;
        }
      }
      ++v13;
      uint64_t v12 = *a2;
    }
    while (v13 < (a2[1] - *a2) >> 2);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit(uint64_t a1, uint64_t a2, _DWORD *a3, char **a4, unint64_t *a5)
{
  if (*a4 != a4[1]) {
    cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit();
  }
  if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(a1 + 40), a2)) {
    cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit();
  }
  std::vector<unsigned int> __p = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v40, *(void *)(a1 + 40) + 104, a2);
  uint64_t v10 = a4 + 2;
  while (1)
  {
    int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v40);
    int v12 = HEdge;
    unint64_t v13 = a4[1];
    if (HEdge == -1) {
      break;
    }
    if ((unint64_t)v13 >= *v10)
    {
      uint64_t v15 = (v13 - *a4) >> 2;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = *v10 - (void)*a4;
      uint64_t v17 = v16 >> 1;
      if (v16 >> 1 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v18);
      }
      else {
        uint64_t v19 = 0;
      }
      unint64_t v20 = &v19[4 * v15];
      *(_DWORD *)unint64_t v20 = v12;
      int v14 = v20 + 4;
      unint64_t v22 = *a4;
      uint64_t v21 = a4[1];
      if (v21 != *a4)
      {
        do
        {
          int v23 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v20 - 1) = v23;
          v20 -= 4;
        }
        while (v21 != v22);
        uint64_t v21 = *a4;
      }
      *a4 = v20;
      a4[1] = v14;
      a4[2] = &v19[4 * v18];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = HEdge;
      int v14 = v13 + 4;
    }
    a4[1] = v14;
  }
  uint64_t v24 = *a4;
  uint64_t v25 = v13 - *a4;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&__p, v25 >> 1);
  unint64_t v26 = v25 >> 2;
  if (v13 != v24)
  {
    uint64_t v27 = 0;
    if (v26 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v26;
    }
    do
    {
      *((_DWORD *)__p + v27) = *(_DWORD *)&(*a4)[4 * v27];
      *((_DWORD *)__p + v26 + v27) = *(_DWORD *)&(*a4)[4 * v27];
      ++v27;
    }
    while (v28 != v27);
  }
  uint64_t v29 = __p;
  if (v42 == __p) {
    goto LABEL_46;
  }
  unint64_t v30 = 0;
  uint64_t v31 = 4;
  uint64_t v32 = "boundary_index < adj_h_size";
  while (1)
  {
    uint64_t v33 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), v29[v30]);
    if ((*v33 & v34) != 0) {
      break;
    }
    ++v30;
    uint64_t v29 = __p;
    v31 += 4;
    if (v30 >= (v42 - (unsigned char *)__p) >> 2) {
      goto LABEL_31;
    }
  }
  if (v30 >= v26)
  {
LABEL_46:
    uint64_t v32 = "boundary_index < adj_h_size";
LABEL_31:
    int v35 = 823;
LABEL_44:
    __assert_rtn("FindAdjacentHEdgeToSplit", "IsoChartMesh.cpp", v35, v32);
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  do
  {
    *(_DWORD *)&(*a4)[4 * v37] = *(_DWORD *)((char *)__p + v31);
    uint64_t v38 = *(void *)(a1 + 40) + 104;
    int64_t v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v38, (unsigned int *)&(*a4)[v36]);
    if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v38, v39) + 12) == *a3) {
      *a5 = v37;
    }
    ++v37;
    v36 += 4;
    v31 += 4;
  }
  while (v26 != v37);
  if (*a5 >= v26)
  {
    uint64_t v32 = "split_hh_index < adj_h_size";
    int v35 = 830;
    goto LABEL_44;
  }
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
}

void sub_24F522940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::ProcessPlaneLikeShape(uint64_t this, BOOL *a2)
{
  uint64_t v187 = *MEMORY[0x263EF8340];
  *a2 = 0;
  uint64_t v2 = *(void **)(this + 40);
  unint64_t v3 = v2[20] - v2[19];
  if ((v3 >> 2))
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    unint64_t v6 = v2[14] - v2[13];
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v4 + 196);
      this = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v7 + 56), (unsigned int *)__p);
      uint64_t v8 = *(void *)(this + 40);
      if (v5 >= (*(void *)(this + 48) - v8) >> 2) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      if (*(float *)(v8 + 4 * v5) > 1.0e-16) {
        break;
      }
      if ((v3 >> 2) == ++v5) {
        return this;
      }
    }
    float32x4_t v185 = 0u;
    float32x4_t v186 = 0u;
    float32x4_t v184 = 0u;
    long long v179 = 0u;
    memset(v178, 0, sizeof(v178));
    LOBYTE(__p[0]) = 0;
    std::vector<BOOL>::vector(&v177, (v6 >> 2), (unsigned __int8 *)__p);
    LOBYTE(__p[0]) = 0;
    std::vector<BOOL>::vector(&v176, (v3 >> 2), (unsigned __int8 *)__p);
    float32x4_t v182 = 0u;
    float32x4_t v183 = 0u;
    float32x4_t v181 = 0u;
    unsigned int v175 = v5;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v174, 3uLL);
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(void *)(v4 + 40), &v175, v174);
    for (uint64_t i = 0; i != 3; ++i)
      *(&v181 + i) = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(void *)(v4 + 40), *(_DWORD *)(*(void *)(v4 + 40) + 176), *((_DWORD *)v174[0] + i));
    uint64_t v10 = 0;
    unsigned int v11 = -1;
    float v12 = 3.4028e38;
    do
    {
      if (v10 == 2) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = v10 + 1;
      }
      float32x4_t v14 = *(&v181 + v10);
      float32x4_t v15 = vsubq_f32(*(&v181 + v13), v14);
      float32x4_t v16 = vmulq_f32(v15, v15);
      v16.i32[3] = 0;
      float32x4_t v17 = vpaddq_f32(v16, v16);
      float32x4_t v18 = vpaddq_f32(v17, v17);
      float32x4_t v19 = (float32x4_t)xmmword_24F570A10;
      if (v18.f32[0] > 0.0) {
        float32x4_t v19 = vdivq_f32(v15, vsqrtq_f32(v18));
      }
      float32x4_t v20 = vsubq_f32(*(&v181 + (v10 + 2) % 3u), v14);
      float32x4_t v21 = vmulq_f32(v20, v20);
      v21.i32[3] = 0;
      float32x4_t v22 = vpaddq_f32(v21, v21);
      float32x4_t v23 = vpaddq_f32(v22, v22);
      float32x4_t v24 = (float32x4_t)xmmword_24F570A10;
      if (v23.f32[0] > 0.0) {
        float32x4_t v24 = vdivq_f32(v20, vsqrtq_f32(v23));
      }
      float32x4_t v25 = vmulq_f32(v19, v24);
      v25.i32[3] = 0;
      float v26 = fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)));
      if (v12 > v26)
      {
        unsigned int v11 = v10;
        float v12 = v26;
      }
      ++v10;
    }
    while (v10 != 3);
    if (v11 > 2) {
      __assert_rtn("ProcessPlaneLikeShape", "IsoChartMesh.cpp", 916, "origin_index < 3");
    }
    if (v11 == 2) {
      unsigned int v27 = 0;
    }
    else {
      unsigned int v27 = v11 + 1;
    }
    float32x4_t v28 = *(&v181 + v11);
    float32x4_t v29 = vsubq_f32(*(&v181 + v27), v28);
    unsigned int v30 = v11 - 1;
    if (!v11) {
      unsigned int v30 = 2;
    }
    float32x4_t v151 = *(&v181 + v11);
    int32x4_t v31 = (int32x4_t)vsubq_f32(*(&v181 + v30), v28);
    float32x4_t v32 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v29, (int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL)), (int32x4_t)v29);
    float32x4_t v33 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL), (int32x4_t)v29);
    int32x4_t v34 = (int32x4_t)vmlsq_f32(vmulq_f32(v32, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL), v31)), (float32x4_t)vzip2q_s32(vzip1q_s32(v31, (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL)), v31), v33);
    float32x4_t v35 = vmulq_f32(v33, (float32x4_t)vzip2q_s32(vzip1q_s32(v34, (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL)), v34));
    float32x4_t v36 = vmulq_f32(v29, v29);
    v36.i32[3] = 0;
    float32x4_t v37 = vmlsq_f32(v35, v32, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL), v34));
    float32x4_t v38 = vpaddq_f32(v36, v36);
    float32x4_t v39 = vpaddq_f32(v38, v38);
    float32x4_t v152 = (float32x4_t)xmmword_24F570A10;
    float32x4_t v154 = (float32x4_t)xmmword_24F570A10;
    if (v39.f32[0] > 0.0) {
      float32x4_t v154 = vdivq_f32(v29, vsqrtq_f32(v39));
    }
    float32x4_t v40 = vmulq_f32(v37, v37);
    v40.i32[3] = 0;
    float32x4_t v41 = vpaddq_f32(v40, v40);
    float32x4_t v42 = vpaddq_f32(v41, v41);
    if (v42.f32[0] > 0.0) {
      float32x4_t v152 = vdivq_f32(v37, vsqrtq_f32(v42));
    }
    int v43 = 3;
    do
    {
      uint64_t v44 = v11 % 3;
      float32x4_t v156 = *(&v181 + v44);
      uint64_t v45 = *(void *)(v4 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
      uint64_t v46 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v45 + 80), (unsigned int *)__p);
      unint64_t v47 = *((unsigned int *)v174[0] + v44);
      uint64_t v48 = *(void *)(v46 + 40);
      if (v47 >= (*(void *)(v46 + 48) - v48) >> 3) {
        goto LABEL_112;
      }
      float32x4_t v157 = vsubq_f32(v156, v151);
      float32x4_t v49 = vmulq_f32(v154, v157);
      v49.i32[3] = 0;
      *(float *)(v48 + 8 * v47) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v49, v49));
      uint64_t v50 = *(void *)(v4 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
      uint64_t v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v50 + 80), (unsigned int *)__p);
      unint64_t v52 = *((unsigned int *)v174[0] + v44);
      uint64_t v53 = *(void *)(v51 + 40);
      if (v52 >= (*(void *)(v51 + 48) - v53) >> 3) {
LABEL_112:
      }
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      float32x4_t v54 = vmulq_f32(v152, v157);
      v54.i32[3] = 0;
      *(float *)(v53 + 8 * v52 + 4) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v54, v54));
      uint64_t v55 = *(void *)(v4 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
      uint64_t v56 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v55 + 80), (unsigned int *)__p);
      unint64_t v57 = *((unsigned int *)v174[0] + v44);
      uint64_t v58 = *(void *)(v56 + 40);
      if (v57 >= (*(void *)(v56 + 48) - v58) >> 3
        || (uint64_t v59 = *(void *)(v4 + 40),
            LODWORD(__p[0]) = *(_DWORD *)(v4 + 192),
            v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v59 + 80), (unsigned int *)__p), unint64_t v62 = *((unsigned int *)v174[0] + v44), v63 = *(void *)(v60 + 40), v62 >= (*(void *)(v60 + 48) - v63) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      LODWORD(v61) = *(_DWORD *)(v58 + 8 * v57);
      DWORD1(v61) = *(_DWORD *)(v63 + 8 * v62 + 4);
      *((_OWORD *)&v184 + v44) = v61;
      *(void *)((char *)v177 + ((v62 >> 3) & 0x1FFFFFF8)) |= 1 << v62;
      ++v11;
      --v43;
    }
    while (v43);
    LODWORD(__p[0]) = v175;
    std::deque<unsigned int>::push_back(v178, __p);
    *(void *)((char *)v176 + (((unint64_t)v175 >> 3) & 0x1FFFFFF8)) |= 1 << v175;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v173, 3uLL);
    uint64_t v64 = *((void *)&v179 + 1);
    if (*((void *)&v179 + 1))
    {
      float32x4_t v155 = v182;
      float32x4_t v158 = v181;
      float32x4_t v153 = v183;
      while (1)
      {
        int v65 = *(_DWORD *)(*(void *)(v178[1] + (((unint64_t)v179 >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * (v179 & 0x3FF));
        *(void *)&long long v179 = v179 + 1;
        *((void *)&v179 + 1) = v64 - 1;
        if ((unint64_t)v179 >= 0x800)
        {
          operator delete(*(void **)v178[1]);
          v178[1] += 8;
          *(void *)&long long v179 = v179 - 1024;
        }
        LODWORD(v180) = v65;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(void *)(v4 + 40), (unsigned int *)&v180, v173);
        uint64_t v66 = 0;
        while (1)
        {
          unint64_t v67 = *((unsigned int *)v173[0] + v66);
          if (((1 << v67) & v177[v67 >> 6]) == 0) {
            break;
          }
          if (++v66 == 3) {
            goto LABEL_84;
          }
        }
        unint64_t v68 = *((unsigned int *)v173[0] + (v66 + 1) % 3u);
        if (((*(void *)((char *)v177 + ((v68 >> 3) & 0x1FFFFFF8)) >> v68) & 1) == 0)
        {
          float32x4_t v181 = v158;
          float32x4_t v182 = v155;
          float32x4_t v183 = v153;
          __assert_rtn("ProcessPlaneLikeShape", "IsoChartMesh.cpp", 958, "rgb_vert_processed[vid0]");
        }
        unint64_t v69 = *((unsigned int *)v173[0] + (v66 + 2) % 3u);
        if (((*(void *)((char *)v177 + ((v69 >> 3) & 0x1FFFFFF8)) >> v69) & 1) == 0)
        {
          float32x4_t v181 = v158;
          float32x4_t v182 = v155;
          float32x4_t v183 = v153;
          __assert_rtn("ProcessPlaneLikeShape", "IsoChartMesh.cpp", 959, "rgb_vert_processed[vid1]");
        }
        uint64_t v70 = *(void *)(v4 + 40);
        LODWORD(__p[0]) = *(_DWORD *)(v70 + 176);
        uint64_t v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v70 + 8), (unsigned int *)__p);
        uint64_t v72 = *(void *)(v71 + 40);
        if (v68 >= (*(void *)(v71 + 48) - v72) >> 4) {
          goto LABEL_115;
        }
        float32x4_t v158 = *(float32x4_t *)(v72 + 16 * v68);
        uint64_t v73 = *(void *)(v4 + 40);
        LODWORD(__p[0]) = *(_DWORD *)(v73 + 176);
        uint64_t v74 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v73 + 8), (unsigned int *)__p);
        uint64_t v75 = *(void *)(v74 + 40);
        if (v69 >= (*(void *)(v74 + 48) - v75) >> 4
          || (float32x4_t v155 = *(float32x4_t *)(v75 + 16 * v69),
              uint64_t v76 = *(void *)(v4 + 40),
              LODWORD(__p[0]) = *(_DWORD *)(v76 + 176),
              uint64_t v77 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v76 + 8), (unsigned int *)__p), v78 = *(void *)(v77 + 40), v67 >= (*(void *)(v77 + 48) - v78) >> 4))
        {
LABEL_115:
          float32x4_t v181 = v158;
          float32x4_t v182 = v155;
          float32x4_t v183 = v153;
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        float32x4_t v153 = *(float32x4_t *)(v78 + 16 * v67);
        float32x4_t v79 = vsubq_f32(v155, v158);
        float32x4_t v80 = vmulq_f32(v79, v79);
        v80.i32[3] = 0;
        float v81 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v80, v80)));
        if (fabsf(v81) < 0.00000001) {
          break;
        }
        float32x4_t v82 = vsubq_f32(v153, v158);
        float32x4_t v83 = vmulq_f32(v82, v82);
        v83.i32[3] = 0;
        float v84 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v83, v83)));
        if (fabsf(v84) >= 0.00000001)
        {
          float32x4_t v93 = vmulq_f32(v82, v79);
          v93.i32[3] = 0;
          float v94 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v93, v93)) / (float)(v81 * v84);
          if (v94 < -1.0) {
            float v94 = -1.0;
          }
          if (v94 <= 1.0) {
            _S15 = v94;
          }
          else {
            _S15 = 1.0;
          }
          float v96 = 1.0 - (float)(_S15 * _S15);
          float v97 = sqrtf(v96);
          if (v96 >= 0.0) {
            float v98 = v97;
          }
          else {
            float v98 = 0.0;
          }
          uint64_t v99 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v100 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v99 + 80), (unsigned int *)__p);
          uint64_t v101 = *(void *)(v100 + 40);
          if (v69 >= (*(void *)(v100 + 48) - v101) >> 3
            || (uint64_t v102 = *(void *)(v4 + 40),
                LODWORD(__p[0]) = *(_DWORD *)(v4 + 192),
                uint64_t v103 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v102 + 80), (unsigned int *)__p), v105 = *(void *)(v103 + 40), v68 >= (*(void *)(v103 + 48) - v105) >> 3))
          {
            float32x4_t v181 = v158;
            float32x4_t v182 = v155;
            float32x4_t v183 = v153;
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          float32x2_t v106 = vsub_f32(*(float32x2_t *)(v101 + 8 * v69), *(float32x2_t *)(v105 + 8 * v68));
          int32x2_t v107 = (int32x2_t)vmul_f32(v106, v106);
          *(float *)v107.i32 = sqrtf(vmlas_n_f32(*(float *)&v107.i32[1], v106.f32[0], v106.f32[0]));
          *(float32x2_t *)&_Q0 = vdiv_f32(v106, (float32x2_t)vdup_lane_s32(v107, 0));
          if (*(float *)v107.i32 <= 0.0) {
            *(double *)&_Q0 = COERCE_DOUBLE(1065353216);
          }
          float v108 = vmlas_n_f32(-(float)(*((float *)&_Q0 + 1) * v98), _S15, *(float *)&_Q0);
          __asm { FMLA            S3, S15, V0.S[1] }
          *((_OWORD *)&v184 + v66) = __PAIR64__(LODWORD(_S3), LODWORD(v108));
          BOOL v114 = _NF != _VF;
          unint64_t v115 = &v184 + (v66 + 1) % 3u;
          v115->i64[0] = 0;
          v115->i64[1] = 0;
          *((_OWORD *)&v184 + (v66 + 2) % 3u) = _Q0;
          int32x4_t v116 = (int32x4_t)vsubq_f32(v185, v184);
          int32x4_t v117 = (int32x4_t)vsubq_f32(v186, v184);
          char v118 = v114 ^ (COERCE_FLOAT(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v116, (int32x4_t)vextq_s8(*(int8x16_t *)&v116, *(int8x16_t *)&v116, 0xCuLL)), v116), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v117, *(int8x16_t *)&v117, 4uLL), v117)), (float32x4_t)vzip2q_s32(vzip1q_s32(v117, (int32x4_t)vextq_s8(
                                                                      *(int8x16_t *)&v117,
                                                                      *(int8x16_t *)&v117,
                                                                      0xCuLL)),
                                                       v117),
                                        (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v116, *(int8x16_t *)&v116, 4uLL), v116)).i32[2]) >= 0.0);
          float v119 = (float)(v98 * *((float *)&_Q0 + 1)) + (float)(*(float *)&_Q0 * _S15);
          float v120 = (float)(*((float *)&_Q0 + 1) * _S15) - (float)(v98 * *(float *)&_Q0);
          if (v118) {
            float v121 = _S3;
          }
          else {
            float v121 = v120;
          }
          if (v118) {
            float v122 = v108;
          }
          else {
            float v122 = v119;
          }
          uint64_t v123 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v124 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v123 + 80), (unsigned int *)__p);
          uint64_t v125 = *(void *)(v124 + 40);
          if (v68 >= (*(void *)(v124 + 48) - v125) >> 3) {
            goto LABEL_116;
          }
          float v126 = *(float *)(v125 + 8 * v68);
          uint64_t v127 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v128 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v127 + 80), (unsigned int *)__p);
          uint64_t v129 = *(void *)(v128 + 40);
          if (v67 >= (*(void *)(v128 + 48) - v129) >> 3) {
            goto LABEL_116;
          }
          *(float *)(v129 + 8 * v67) = v126 + (float)(v84 * v122);
          uint64_t v130 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v131 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v130 + 80), (unsigned int *)__p);
          uint64_t v132 = *(void *)(v131 + 40);
          if (v68 >= (*(void *)(v131 + 48) - v132) >> 3) {
            goto LABEL_116;
          }
          float v133 = *(float *)(v132 + 8 * v68 + 4);
          uint64_t v134 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v135 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v134 + 80), (unsigned int *)__p);
          uint64_t v136 = *(void *)(v135 + 40);
          if (v67 >= (*(void *)(v135 + 48) - v136) >> 3) {
            goto LABEL_116;
          }
          *(float *)(v136 + 8 * v67 + 4) = v133 + (float)(v84 * v121);
          uint64_t v137 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v138 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v137 + 80), (unsigned int *)__p);
          uint64_t v139 = *(void *)(v138 + 40);
          if (v67 >= (*(void *)(v138 + 48) - v139) >> 3) {
            goto LABEL_116;
          }
          if (fabsf(*(float *)(v139 + 8 * v67)) == INFINITY) {
            break;
          }
          uint64_t v140 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v141 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v140 + 80), (unsigned int *)__p);
          uint64_t v142 = *(void *)(v141 + 40);
          if (v67 >= (*(void *)(v141 + 48) - v142) >> 3)
          {
LABEL_116:
            float32x4_t v181 = v158;
            float32x4_t v182 = v155;
            float32x4_t v183 = v153;
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          if (fabsf(*(float *)(v142 + 8 * v67 + 4)) == INFINITY) {
            break;
          }
        }
        else
        {
          uint64_t v85 = *(void *)(v4 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v4 + 192);
          uint64_t v86 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v85 + 80), (unsigned int *)__p);
          uint64_t v87 = *(void *)(v86 + 40);
          if (v68 >= (*(void *)(v86 + 48) - v87) >> 3
            || (uint64_t v88 = *(void *)(v4 + 40),
                LODWORD(__p[0]) = *(_DWORD *)(v4 + 192),
                uint64_t v89 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v88 + 80), (unsigned int *)__p), v90 = *(void *)(v89 + 40), v67 >= (*(void *)(v89 + 48) - v90) >> 3))
          {
            float32x4_t v181 = v158;
            float32x4_t v182 = v155;
            float32x4_t v183 = v153;
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          char v91 = (_DWORD *)(v87 + 8 * v68);
          uint64_t v92 = (_DWORD *)(v90 + 8 * v67);
          *uint64_t v92 = *v91;
          v92[1] = v91[1];
        }
        v177[v67 >> 6] |= 1 << v67;
LABEL_84:
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(void *)(v4 + 40), (unsigned int *)&v180, __p);
        for (uint64_t j = 0; j != 12; j += 4)
        {
          HIDWORD(v172) = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(void *)(v4 + 40) + 104, (unsigned int *)((char *)__p[0] + j));
          uint64_t v144 = cv3d::cv::gess::mesh::Topology::h(*(void *)(v4 + 40) + 104, (unsigned int *)&v172 + 1);
          unint64_t v145 = *(unsigned int *)(v144 + 16);
          if (v145 != -1)
          {
            unint64_t v146 = v145 >> 6;
            uint64_t v147 = 1 << v145;
            if ((v176[v145 >> 6] & (1 << v145)) == 0)
            {
              LODWORD(v172) = *(_DWORD *)(v144 + 16);
              std::deque<unsigned int>::push_back(v178, &v172);
              v176[v146] |= v147;
            }
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        uint64_t v64 = *((void *)&v179 + 1);
        if (!*((void *)&v179 + 1))
        {
          float32x4_t v181 = v158;
          float32x4_t v182 = v155;
          float32x4_t v183 = v153;
          goto LABEL_93;
        }
      }
      float32x4_t v181 = v158;
      float32x4_t v182 = v155;
      float32x4_t v183 = v153;
    }
    else
    {
LABEL_93:
      LOWORD(__p[0]) = 256;
      BYTE2(__p[0]) = 1;
      int64x2_t v161 = vdupq_n_s64(0xAuLL);
      uint64_t v162 = 20;
      long long v163 = xmmword_24F5788C0;
      uint64_t v164 = 0x7F7FFFFFFF7FFFFFLL;
      uint64_t v165 = -1;
      memset(v166, 0, sizeof(v166));
      char v167 = 0;
      memset(v168, 0, sizeof(v168));
      long long v169 = 0u;
      long long v170 = 0u;
      long long v171 = 0u;
      uint64_t v172 = 0;
      float v159 = 0.0;
      unint64_t v180 = 0;
      BOOL v148 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch((cv3d::cv::gess::isochart::IsoChartMesh *)v4, (float **)__p, (float *)&v172 + 1, (float *)&v172, &v180, &v159, 0);
      if (v180) {
        BOOL v149 = v148;
      }
      else {
        BOOL v149 = 1;
      }
      *a2 = v149;
      if (*((void *)&v170 + 1))
      {
        *(void *)&long long v171 = *((void *)&v170 + 1);
        operator delete(*((void **)&v170 + 1));
      }
      if ((void)v169)
      {
        *((void *)&v169 + 1) = v169;
        operator delete((void *)v169);
      }
      unint64_t v180 = (unint64_t)v168 + 8;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v166);
    }
    if (v173[0])
    {
      v173[1] = v173[0];
      operator delete(v173[0]);
    }
    if (v174[0])
    {
      v174[1] = v174[0];
      operator delete(v174[0]);
    }
    if (v176) {
      operator delete(v176);
    }
    if (v177) {
      operator delete(v177);
    }
    return std::deque<int>::~deque[abi:ne180100](v178);
  }
  return this;
}

void sub_24F523838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, long long a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo((cv3d::cv::gess::isochart::ChartOptimizeInfo *)&__p);
  uint64_t v56 = (void *)v54[24];
  if (v56)
  {
    v54[25] = v56;
    operator delete(v56);
  }
  unint64_t v57 = (void *)v54[27];
  if (v57)
  {
    v54[28] = v57;
    operator delete(v57);
  }
  uint64_t v58 = (void *)v54[31];
  if (v58) {
    operator delete(v58);
  }
  uint64_t v59 = (void *)v54[34];
  if (v59) {
    operator delete(v59);
  }
  std::deque<int>::~deque[abi:ne180100](&a54);
  _Unwind_Resume(a1);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)unint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(uint64_t a1, void *a2, unint64_t *a3, uint64_t *a4, BOOL a5)
{
  BOOL v34 = a5;
  unint64_t v8 = *(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152);
  std::vector<std::vector<cv3d::cv::gess::mesh::FaceHandle>>::vector(&v32, *a3);
  if ((v8 >> 2))
  {
    uint64_t v9 = 0;
    uint64_t v10 = (v8 >> 2);
    do
    {
      unint64_t v11 = *(unsigned int *)(*a2 + 4 * v9);
      if (*a3 <= v11) {
        __assert_rtn("GenerateAllSubCharts", "MeshPartitionChart.cpp", 36, "face_chart_id[fi] < max_sub_chart_count");
      }
      float v12 = (char **)(v32 + 24 * v11);
      float32x4_t v14 = (void **)(v12 + 1);
      unsigned int v13 = v12[1];
      float32x4_t v16 = v12 + 2;
      unint64_t v15 = (unint64_t)v12[2];
      if ((unint64_t)v13 >= v15)
      {
        uint64_t v18 = (v13 - *v12) >> 2;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v15 - (void)*v12;
        uint64_t v20 = v19 >> 1;
        if (v19 >> 1 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          float32x4_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v16, v21);
        }
        else {
          float32x4_t v22 = 0;
        }
        float32x4_t v23 = &v22[4 * v18];
        *(_DWORD *)float32x4_t v23 = v9;
        float32x4_t v17 = v23 + 4;
        float32x4_t v24 = (char *)*v14;
        float32x4_t v25 = *v12;
        if (*v14 != *v12)
        {
          do
          {
            int v26 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v23 - 1) = v26;
            v23 -= 4;
          }
          while (v24 != v25);
          float32x4_t v24 = *v12;
        }
        *float v12 = v23;
        *float32x4_t v14 = v17;
        *float32x4_t v16 = &v22[4 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v13 = v9;
        float32x4_t v17 = v13 + 4;
      }
      *float32x4_t v14 = v17;
      ++v9;
    }
    while (v9 != v10);
  }
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__clear[abi:ne180100]((uint64_t *)(a1 + 256));
  uint64_t v27 = v32;
  for (uint64_t i = v33; v27 != i; v27 += 24)
  {
    if (*(void *)(v27 + 8) != *(void *)v27)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v31);
      cv3d::cv::gess::isochart::GenerateMeshFromFaceList(*(void *)(a1 + 40), (unsigned int **)v27, v31);
      std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,void>((cv3d::cv::gess::mesh::TriMesh *)v31, *(const float **)(a1 + 48), *(const float **)(a1 + 56), &v34, &v30);
      std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::push_back[abi:ne180100]((uint64_t *)(a1 + 256), &v30);
      *(void *)(v30 + 280) = a1;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::push_back[abi:ne180100](a4, &v31);
      if (*((void *)&v30 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
      }
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
    }
  }
  *(void *)&long long v31 = &v32;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
}

void sub_24F523C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x24F523CD4);
}

void sub_24F523CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  a13 = (void **)&a15;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    float32x4_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    BOOL result = std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(v18);
  }
  else
  {
    *long long v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_24F523DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::isochart::AllElementsIdentical(int **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 1;
  }
  int v5 = *v2;
  uint64_t v4 = v2 + 1;
  int v3 = v5;
  do
  {
    int v6 = *(v4 - 1);
    BOOL result = v6 == v3;
  }
  while (v6 == v3 && v4++ != v1);
  return result;
}

uint64_t cv3d::cv::gess::isochart::BiPartitionChartMesh(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v16 = a3;
  int v17 = a2;
  long long v15 = 0u;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  memset(v12, 0, sizeof(v12));
  std::deque<unsigned int>::push_back(v14, &v17);
  std::deque<unsigned int>::push_back(v12, &v16);
  int v6 = *(_DWORD **)a4;
  uint64_t v7 = *(void *)(a4 + 8) - *(void *)a4;
  if (v7 >= 1) {
    memset(*(void **)a4, 255, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  }
  v6[v17] = 0;
  v6[v16] = 1;
  v11[0] = a1;
  v11[1] = a4;
  while (1)
  {
    while (*((void *)&v15 + 1))
    {
      cv3d::cv::gess::isochart::BiPartitionChartMesh(cv3d::cv::gess::mesh::TriMesh const&,unsigned int,unsigned int,std::vector<unsigned int> &)::$_0::operator()((uint64_t)v11, v14, 0);
      if (*((void *)&v13 + 1)) {
        goto LABEL_8;
      }
    }
    if (!*((void *)&v13 + 1)) {
      break;
    }
LABEL_8:
    cv3d::cv::gess::isochart::BiPartitionChartMesh(cv3d::cv::gess::mesh::TriMesh const&,unsigned int,unsigned int,std::vector<unsigned int> &)::$_0::operator()((uint64_t)v11, v12, 1);
  }
  uint64_t v8 = *(_DWORD **)a4;
  uint64_t v9 = *(_DWORD **)(a4 + 8);
  while (v8 != v9)
  {
    if (*v8 == -1) {
      _DWORD *v8 = 0;
    }
    ++v8;
  }
  std::deque<int>::~deque[abi:ne180100](v12);
  std::deque<int>::~deque[abi:ne180100](v14);
  return 1;
}

void sub_24F523F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::BiPartitionChartMesh(cv3d::cv::gess::mesh::TriMesh const&,unsigned int,unsigned int,std::vector<unsigned int> &)::$_0::operator()(uint64_t a1, int64x2_t *a2, int a3)
{
  unsigned int v6 = *(_DWORD *)(*(void *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * (a2[2].i64[0] & 0x3FF));
  a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_24F578D00);
  std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
  uint64_t v7 = *(void *)a1 + 104;
  unsigned int v18 = v6;
  unsigned int v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v7, &v18);
  unsigned int v17 = v8;
  do
  {
    unsigned int v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(void *)a1 + 104, &v17) + 8);
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(*(void *)a1 + 104, &v17);
    unint64_t v11 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v9, *(_DWORD *)(v9 + 180), *v10);
    if ((v12 & *v11) == 0)
    {
      uint64_t v13 = *(void *)a1 + 104;
      float32x4_t v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v13, &v17);
      uint64_t v15 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v13, v14) + 16);
      if (*(_DWORD *)(**(void **)(a1 + 8) + 4 * v15) == -1)
      {
        int v16 = v15;
        std::deque<unsigned int>::push_back(a2, &v16);
        *(_DWORD *)(**(void **)(a1 + 8) + 4 * v15) = a3;
      }
    }
  }
  while (v17 != v8);
}

void cv3d::cv::gess::isochart::IsoChartMesh::PartitionGeneralShape(uint64_t a1, uint64_t *a2, unsigned int *a3, BOOL a4, unsigned char *a5)
{
  if (*(void *)(a1 + 112) >= 2uLL)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152);
    std::vector<unsigned int>::size_type v9 = v8 >> 2;
    if ((unint64_t)v8 <= 0xF)
    {
      std::vector<unsigned int>::vector(&v39, v9);
      unint64_t v10 = (uint64_t)(*(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152)) >> 2;
      if (*(void *)(*(void *)(a1 + 40) + 160) != *(void *)(*(void *)(a1 + 40) + 152))
      {
        uint64_t v11 = 0;
        begiuint64_t n = v39.__begin_;
        do
        {
          begin[v11] = v11;
          ++v11;
        }
        while (v10 > v11);
      }
      std::vector<unsigned int> __p = (void *)v10;
      cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v39, (unint64_t *)&__p, a2, a4);
      goto LABEL_44;
    }
    std::vector<unsigned int>::vector(&v39, v9);
    cv3d::cv::gess::isochart::IsoChartMesh::ClusterFacesByParameterDistance((void *)a1, (uint64_t *)&v39);
    std::vector<unsigned int>::pointer v16 = v39.__begin_;
    std::vector<unsigned int>::pointer end = v39.__end_;
    if (v39.__end_ == v39.__begin_) {
      __assert_rtn("PartitionGeneralShape", "MeshPartitionChart.cpp", 135, "face_chart_id.size() > 0");
    }
    unsigned int v18 = *v39.__begin_;
    std::vector<unsigned int>::pointer v19 = v39.__begin_;
    do
    {
      if (*v19 != v18) {
        goto LABEL_14;
      }
      ++v19;
    }
    while (v19 != v39.__end_);
    cv3d::cv::gess::isochart::CalculateVertexImportance(*(cv3d::cv::gess::isochart **)(a1 + 40), v15);
    cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization((cv3d::cv::gess::isochart::IsoChartMesh *)a1);
    cv3d::cv::gess::isochart::IsoChartMesh::ClusterFacesByParameterDistance((void *)a1, (uint64_t *)&v39);
    std::vector<unsigned int>::pointer v16 = v39.__begin_;
    std::vector<unsigned int>::pointer end = v39.__end_;
    unsigned int v18 = *v39.__begin_;
LABEL_14:
    while (v16 != end)
    {
      if (*v16 != v18)
      {
        unint64_t v29 = *(void *)(a1 + 112);
        unint64_t v35 = v29;
        if (*(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152) >= 0x4DuLL) {
          cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult(a1, &v35, (uint64_t *)&v39, a5);
        }
        std::vector<unsigned int> __p = 0;
        float32x4_t v37 = 0;
        uint64_t v38 = 0;
        cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v39, &v35, (uint64_t *)&__p, a4);
        uint64_t v30 = *(void *)(a1 + 32);
        if (!v30 || ((*(uint64_t (**)(uint64_t))(*(void *)v30 + 48))(v30) & 1) == 0)
        {
          LOBYTE(p_p) = 0;
          if (*a3 >= (unint64_t)(v39.__end_ - v39.__begin_))
          {
            cv3d::cv::gess::isochart::IsoChartMesh::OptimizeBoundaryByStretch((std::vector<unsigned int> *)a1, (uint64_t *)(a1 + 312), (uint64_t)&v39, v29, &p_p);
            if ((_BYTE)p_p)
            {
              long long v31 = (uint64_t *)__p;
              for (uint64_t i = v37; i != v31; i -= 2)
              {
                uint64_t v33 = (std::__shared_weak_count *)*(i - 1);
                if (v33) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                }
              }
              float32x4_t v37 = v31;
              cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v39, &v35, (uint64_t *)&__p, a4);
            }
          }
          std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__clear[abi:ne180100]((uint64_t *)(a1 + 256));
          *a5 |= p_p;
          if (&__p != (void **)a2) {
            std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__assign_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>((uint64_t)a2, (uint64_t *)__p, v37, ((char *)v37 - (unsigned char *)__p) >> 4);
          }
        }
        p_p = &__p;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&p_p);
        goto LABEL_44;
      }
      ++v16;
    }
    std::vector<float>::vector(&__p, (uint64_t)(*(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152)) >> 2);
    uint64_t v20 = *(void *)(a1 + 40);
    if (*(void *)(v20 + 160) != *(void *)(v20 + 152))
    {
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      unint64_t v23 = 0;
      unsigned int v24 = -1;
      while (1)
      {
        LODWORD(p_p) = v22;
        float v25 = cv3d::cv::gess::mesh::TriMesh::Area(v20, (unsigned int *)&p_p);
        int v26 = (uint64_t *)__p;
        *((float *)__p + v21) = v25;
        if (!v22) {
          break;
        }
        float v27 = *((float *)v26 + v21);
        if (v27 <= *((float *)v26 + v23))
        {
          if (v24 != -1 && v27 <= *((float *)v26 + v24)) {
            break;
          }
          unint64_t v28 = v23;
          unsigned int v24 = v22;
        }
        else
        {
          unint64_t v28 = v22;
          unsigned int v24 = v23;
        }
LABEL_24:
        unint64_t v21 = (v22 + 1);
        uint64_t v20 = *(void *)(a1 + 40);
        unint64_t v22 = v21;
        unint64_t v23 = v28;
        if (v21 >= (uint64_t)(*(void *)(v20 + 160) - *(void *)(v20 + 152)) >> 2) {
          goto LABEL_38;
        }
      }
      unint64_t v28 = v23;
      goto LABEL_24;
    }
    LODWORD(v28) = 0;
    int v34 = 0;
    int v26 = (uint64_t *)__p;
    unsigned int v24 = -1;
    if (__p)
    {
LABEL_38:
      float32x4_t v37 = v26;
      operator delete(v26);
      uint64_t v20 = *(void *)(a1 + 40);
      int v34 = v28;
    }
    cv3d::cv::gess::isochart::BiPartitionChartMesh(v20, v34, v24, (uint64_t)&v39);
    std::vector<unsigned int> __p = (void *)2;
    cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v39, (unint64_t *)&__p, a2, a4);
    *a5 = 0;
LABEL_44:
    if (v39.__begin_)
    {
      v39.__end_ = v39.__begin_;
      operator delete(v39.__begin_);
    }
  }
}

void sub_24F52448C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::ClusterFacesByParameterDistance(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void *)a1[5];
  unint64_t v5 = v4[20] - v4[19];
  uint64_t v7 = v4[13];
  uint64_t v6 = v4[14];
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, 3uLL);
  if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (unint64_t)(v6 - v7) >> 2;
    uint64_t v10 = (v5 >> 2);
    do
    {
      uint64_t v11 = a1[5];
      unsigned int v21 = v8;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v11, &v21, &__p);
      uint64_t v12 = *a2;
      *(_DWORD *)(*a2 + 4 * v8) = -1;
      unint64_t v13 = a1[14];
      if (v13)
      {
        LODWORD(v14) = 0;
        uint64_t v15 = (int *)__p;
        std::vector<unsigned int>::pointer v16 = v23;
        float v17 = 3.4028e38;
        do
        {
          if (v15 == v16)
          {
            float v18 = 0.0;
          }
          else
          {
            float v18 = 0.0;
            std::vector<unsigned int>::pointer v19 = v15;
            do
            {
              int v20 = *v19++;
              float v18 = v18 + *(float *)(a1[39] + 4 * (v20 + v14 * v9));
            }
            while (v19 != v16);
          }
          if (v18 < v17)
          {
            *(_DWORD *)(v12 + 4 * v8) = v14;
            float v17 = v18;
          }
          unint64_t v14 = (v14 + 1);
        }
        while (v13 > v14);
      }
      ++v8;
    }
    while (v8 != v10);
  }
  if (__p)
  {
    unint64_t v23 = (int *)__p;
    operator delete(__p);
  }
}

void sub_24F524608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult(uint64_t a1, unint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  unint64_t v5 = *a2;
  if (!v5) {
    cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult();
  }
  uint64_t v63 = 0;
  memset(v61, 0, sizeof(v61));
  char v62 = 0;
  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::resize(v61, v5);
  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::vector(v60, *a2);
  unint64_t v8 = *a2;
  if (*a2)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v11 = operator new(0x28uLL);
      v11[1] = 0;
      void v11[2] = 0;
      *uint64_t v11 = &unk_2700D8FB8;
      *((_DWORD *)v11 + 6) = 0;
      *((_DWORD *)v11 + 7) = v10;
      v11[4] = -1;
      uint64_t v12 = (void *)(v60[0] + 16 * v9);
      unint64_t v13 = (std::__shared_weak_count *)v12[1];
      *uint64_t v12 = v11 + 3;
      v12[1] = v11;
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        unint64_t v8 = *a2;
      }
      uint64_t v9 = ++v10;
    }
    while (v8 > v10);
  }
  unint64_t v14 = *(void *)(*(void *)(a1 + 40) + 160) - *(void *)(*(void *)(a1 + 40) + 152);
  uint64_t v15 = (v14 >> 2);
  uint64_t v16 = v14 & 0x3FFFFFFFCLL;
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    float v17 = (unsigned int *)*a3;
    uint64_t v18 = v60[0];
    uint64_t v19 = v15;
    do
    {
      unsigned int v21 = *v17++;
      uint64_t v20 = v21;
      if (v8 <= v21) {
        __assert_rtn("SmoothPartitionResult", "MeshPartitionChart.cpp", 269, "face_chart_id[i] < max_sub_chart_count");
      }
      --**(_DWORD **)(v18 + 16 * v20);
      --v19;
    }
    while (v19);
  }
  else if (!v8)
  {
    unint64_t v24 = 0;
    goto LABEL_19;
  }
  unint64_t v22 = 0;
  do
  {
    long long v23 = *(_OWORD *)(v60[0] + 16 * v22);
    long long v59 = v23;
    if (*((void *)&v23 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::insert(v61, &v59);
    if (*((void *)&v59 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
    }
    ++v22;
    unint64_t v24 = *a2;
  }
  while (v22 < *a2);
LABEL_19:
  std::vector<std::vector<unsigned int>>::vector(v58, v24);
  if (*a2)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      std::vector<unsigned int>::reserve((std::vector<int> *)&v58[0][v26], -**(_DWORD **)(v60[0] + v25));
      ++v27;
      v26 += 3;
      v25 += 16;
    }
    while (v27 < *a2);
  }
  if (v16)
  {
    uint64_t v28 = 0;
    do
    {
      unint64_t v29 = &v58[0][3 * *(unsigned int *)(*a3 + 4 * v28)];
      long long v31 = (char **)(v29 + 1);
      uint64_t v30 = (char *)v29[1];
      uint64_t v33 = v29 + 2;
      uint64_t v32 = (char *)v29[2];
      if (v30 >= v32)
      {
        unint64_t v35 = (char *)*v29;
        uint64_t v36 = (v30 - (unsigned char *)*v29) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v32 - v35;
        if (v38 >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          float32x4_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v33, v39);
          uint64_t v30 = *v31;
          unint64_t v35 = (char *)*v29;
        }
        else
        {
          float32x4_t v40 = 0;
        }
        float32x4_t v41 = &v40[4 * v36];
        *(_DWORD *)float32x4_t v41 = v28;
        int v34 = v41 + 4;
        while (v30 != v35)
        {
          int v42 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v41 - 1) = v42;
          v41 -= 4;
        }
        *unint64_t v29 = v41;
        *long long v31 = v34;
        *uint64_t v33 = &v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v30 = v28;
        int v34 = v30 + 4;
      }
      *long long v31 = v34;
      ++v28;
    }
    while (v28 != v15);
  }
  while (v63)
  {
    cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::remove_at(v61, 0, &v56);
    if (!v56 || *(int *)v56 >= 1) {
      __assert_rtn("SmoothPartitionResult", "MeshPartitionChart.cpp", 292, "top != nullptr && (top->weight <= 0)");
    }
    unsigned int v43 = *((_DWORD *)v56 + 1);
    uint64_t v44 = &v58[0][3 * v43];
    uint64_t v45 = (char *)*v44;
    uint64_t v46 = (char *)v44[1];
    uint64_t v47 = v46 - (unsigned char *)*v44;
    if ((unint64_t)v47 >= 0x14 && v46 != v45)
    {
      unint64_t v49 = 0;
      uint64_t v50 = v47 >> 2;
      uint64_t v51 = (_DWORD *)*a3;
      do
      {
        unsigned int v55 = *(_DWORD *)&v45[4 * v49];
        uint64_t v52 = v55;
        if (v43 != v51[v55]) {
          __assert_rtn("SmoothPartitionResult", "MeshPartitionChart.cpp", 301, "top->data == face_chart_id[fid]");
        }
        cv3d::cv::gess::isochart::IsoChartMesh::SmoothOneFace(a1, &v55, a3);
        uint64_t v51 = (_DWORD *)*a3;
        unsigned int v43 = *((_DWORD *)v56 + 1);
        if (*(_DWORD *)(*a3 + 4 * v52) != v43 && (unint64_t)--v50 <= 4) {
          break;
        }
        ++v49;
        uint64_t v45 = (char *)v58[0][3 * v43];
      }
      while (v49 < ((char *)v58[0][3 * v43 + 1] - (char *)v45) >> 2);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
  }
  cv3d::cv::gess::isochart::IsoChartMesh::MakePartitionValid(a1, a2, a3, a4);
  uint64_t v56 = v58;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  v58[0] = (void **)v60;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v58);
  return cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::~MaxHeap((uint64_t)v61);
}

void sub_24F524A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v8 = va_arg(va2, void **);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  va_copy((va_list)v5, va1);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  va_copy((va_list)v8, va2);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::~MaxHeap((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::resize(uint64_t *a1, unint64_t a2)
{
  return 1;
}

void sub_24F524B30(void *a1)
{
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::insert(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *(void *)a2;
  if (!*(void *)a2) {
    return 0;
  }
  unint64_t v5 = a1[4];
  if (v5 >= (a1[1] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::push_back[abi:ne180100](a1, a2);
  }
  else
  {
    uint64_t v6 = (void *)(*a1 + 16 * v5);
    uint64_t v7 = *((void *)a2 + 1);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = (std::__shared_weak_count *)v6[1];
    *uint64_t v6 = v2;
    v6[1] = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v9 = a1[4];
  *(void *)(*(void *)a2 + 8) = v9;
  a1[4] = v9 + 1;
  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::upheap(a1, v9);
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::SmoothOneFace(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unsigned int v6 = *(_DWORD *)(*a3 + 4 * *a2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(void *)(a1 + 40), a2, __p);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  do
  {
    v39[0] = *(_DWORD *)((char *)__p[0] + v7 * 4);
    unsigned int v37 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, v39);
    uint64_t v9 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), v37);
    if ((*v9 & v10) != 0)
    {
      v39[v7 + 1] = v6;
    }
    else
    {
      unsigned int v11 = *(_DWORD *)(*a3
                      + 4
                      * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v37) + 16));
      v39[v7 + 1] = v11;
      if (v11 != v6) {
        ++v8;
      }
    }
    ++v7;
  }
  while (v7 != 3);
  if (v8 == 3)
  {
    unsigned int v16 = 0;
    for (uint64_t i = 1; i != 3; ++i)
    {
      uint64_t v28 = *(void *)(a1 + 40);
      v39[0] = *(_DWORD *)(a1 + 200);
      uint64_t v29 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v28 + 32), v39);
      unint64_t v30 = *((unsigned int *)__p[0] + v16);
      uint64_t v31 = *(void *)(v29 + 40);
      if (v30 >= (*(void *)(v29 + 48) - v31) >> 2
        || (float v32 = *(float *)(v31 + 4 * v30),
            uint64_t v33 = *(void *)(a1 + 40),
            v39[0] = *(_DWORD *)(a1 + 200),
            uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v33 + 32), v39),
            unint64_t v35 = *((unsigned int *)__p[0] + i),
            uint64_t v36 = *(void *)(v34 + 40),
            v35 >= (*(void *)(v34 + 48) - v36) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      if (v32 < *(float *)(v36 + 4 * v35)) {
        unsigned int v16 = i;
      }
    }
LABEL_32:
    unsigned int v13 = v39[v16 + 1];
  }
  else
  {
    if (v8 != 2) {
      goto LABEL_34;
    }
    unint64_t v12 = 0;
    while (1)
    {
      unsigned int v13 = v39[v12 + 1];
      if (v13 != v6)
      {
        int v14 = v12 > 1 ? -2 : 1;
        if (v13 == v39[(v14 + v12) + 1]) {
          break;
        }
        uint64_t v15 = (v12 - 1);
        if (!v12) {
          uint64_t v15 = 2;
        }
        if (v13 == v39[v15 + 1]) {
          break;
        }
      }
      if (++v12 == 3)
      {
        unsigned int v16 = 0;
        for (uint64_t j = 1; j != 3; ++j)
        {
          uint64_t v18 = *(void *)(a1 + 40);
          v39[0] = *(_DWORD *)(a1 + 200);
          uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v18 + 32), v39);
          unint64_t v20 = *((unsigned int *)__p[0] + v16);
          uint64_t v21 = *(void *)(v19 + 40);
          if (v20 >= (*(void *)(v19 + 48) - v21) >> 2
            || (float v22 = *(float *)(v21 + 4 * v20),
                uint64_t v23 = *(void *)(a1 + 40),
                v39[0] = *(_DWORD *)(a1 + 200),
                uint64_t v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v23 + 32), v39),
                unint64_t v25 = *((unsigned int *)__p[0] + j),
                uint64_t v26 = *(void *)(v24 + 40),
                v25 >= (*(void *)(v24 + 48) - v26) >> 2))
          {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          if (v22 < *(float *)(v26 + 4 * v25)) {
            unsigned int v16 = j;
          }
        }
        goto LABEL_32;
      }
    }
  }
  *(_DWORD *)(*a3 + 4 * *a2) = v13;
LABEL_34:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24F524EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::MakePartitionValid(uint64_t a1, unint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  BOOL v8 = 0;
  unint64_t v9 = 0;
  BOOL v12 = 0;
  *a4 = 0;
  while (1)
  {
    int v10 = 0;
    unsigned __int8 v11 = 0;
    if (!v8)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::SatifyManifoldRule(a1, a2, a3, &v11, &v12);
      int v10 = v11;
      BOOL v8 = v12;
    }
    *a4 = v8;
    if (v8 && !v10) {
      break;
    }
    if (v10)
    {
      v9 += 2;
      if (v9 < *a2) {
        continue;
      }
    }
    *a4 = 0;
    return;
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::SatifyManifoldRule(uint64_t a1, unint64_t *a2, uint64_t *a3, unsigned char *a4, BOOL *a5)
{
  int v10 = 0;
  unint64_t v11 = 0;
  *a4 = 0;
  do
  {
    unint64_t v12 = *(void *)(*(void *)(a1 + 40) + 112) - *(void *)(*(void *)(a1 + 40) + 104);
    uint64_t v13 = (v12 >> 2);
    if ((v12 >> 2))
    {
      uint64_t v14 = 0;
      LOBYTE(v15) = 0;
      do
      {
        unsigned __int8 v18 = 0;
        int v17 = v14;
        cv3d::cv::gess::isochart::IsoChartMesh::MakeValidationAroundVertex(a1, (uint64_t)&v17, a3, &v18);
        BOOL v15 = (v18 | v15) != 0;
        ++v14;
      }
      while (v13 != v14);
      int v10 = *a4;
    }
    else
    {
      BOOL v15 = 0;
    }
    ++v11;
    v10 |= v15;
    *a4 = v10;
    unint64_t v16 = *a2;
  }
  while (v15 && v11 <= v16);
  *a5 = v11 <= v16;
}

void cv3d::cv::gess::isochart::IsoChartMesh::MakeValidationAroundVertex(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  *a4 = 0;
  float v81 = 0;
  float32x4_t v82 = 0;
  float32x4_t v83 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v80, *(void *)(a1 + 40) + 104, a2);
  for (unsigned int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v80);
        ;
        unsigned int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v80))
  {
    unsigned int v79 = i;
    if (i == -1) {
      break;
    }
    uint64_t v7 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), i);
    if ((*v7 & v8) == 0)
    {
      uint64_t v9 = cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v79);
      uint64_t v10 = v9;
      unint64_t v11 = v82;
      if (v82 >= v83)
      {
        uint64_t v13 = (v82 - v81) >> 2;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = (v83 - v81) >> 1;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        if ((unint64_t)(v83 - v81) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v83, v15);
        }
        else {
          unint64_t v16 = 0;
        }
        int v17 = &v16[4 * v13];
        *(_DWORD *)int v17 = *(_DWORD *)(v10 + 16);
        unint64_t v12 = v17 + 4;
        uint64_t v19 = v81;
        unsigned __int8 v18 = v82;
        if (v82 != v81)
        {
          do
          {
            int v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          unsigned __int8 v18 = v81;
        }
        float v81 = v17;
        float32x4_t v82 = v12;
        float32x4_t v83 = &v16[4 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)float32x4_t v82 = *(_DWORD *)(v9 + 16);
        unint64_t v12 = v11 + 4;
      }
      float32x4_t v82 = v12;
    }
  }
  uint64_t v21 = v81;
  float v22 = v82;
  uint64_t v23 = v82 - v81;
  if (v82 == v81) {
    goto LABEL_100;
  }
  if ((unint64_t)v23 <= 7)
  {
LABEL_101:
    float32x4_t v82 = v21;
    operator delete(v21);
    return;
  }
  unint64_t v24 = v23 >> 2;
  uint64_t v25 = *a3;
  int v26 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)v81);
  uint64_t v27 = 2;
  if (v24 > 2) {
    uint64_t v27 = v24;
  }
  int v28 = *(_DWORD *)(v25 + 4 * *((unsigned int *)v81 + 1));
  if (v26 == v28)
  {
    uint64_t v29 = 2;
    while (1)
    {
      unint64_t v30 = v29;
      if (v27 == v29) {
        break;
      }
      int v28 = *(_DWORD *)(v25 + 4 * *(unsigned int *)&v81[4 * v29++]);
      if (v26 != v28) {
        goto LABEL_32;
      }
    }
    int v28 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)v81);
LABEL_32:
    if (v30 >= v24)
    {
      float v22 = v81;
      goto LABEL_100;
    }
  }
  unint64_t v31 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  std::vector<unsigned int> __p = 0;
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  while (1)
  {
    uint64_t v32 = *(unsigned int *)&v21[4 * v31];
    int v33 = *(_DWORD *)(*a3 + 4 * v32);
    uint64_t v34 = (char *)v76;
    unint64_t v35 = v77;
    uint64_t v36 = v76;
    if (v76 == v77) {
      break;
    }
    while (*v36 != v33)
    {
      if (++v36 == (_DWORD *)v77) {
        goto LABEL_37;
      }
    }
    ++v31;
LABEL_91:
    if (v31 >= (v22 - v21) >> 2) {
      goto LABEL_92;
    }
  }
LABEL_37:
  if (v77 >= v78)
  {
    uint64_t v38 = (v77 - (unsigned char *)v76) >> 2;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = v78 - (unsigned char *)v76;
    if ((v78 - (unsigned char *)v76) >> 1 > v39) {
      unint64_t v39 = v40 >> 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v78, v41);
      uint64_t v34 = (char *)v76;
      unint64_t v35 = v77;
    }
    else
    {
      int v42 = 0;
    }
    unsigned int v43 = (int *)&v42[4 * v38];
    *unsigned int v43 = v33;
    unsigned int v37 = (char *)(v43 + 1);
    while (v35 != v34)
    {
      int v44 = *((_DWORD *)v35 - 1);
      v35 -= 4;
      *--unsigned int v43 = v44;
    }
    uint64_t v76 = v43;
    uint64_t v77 = v37;
    uint64_t v78 = &v42[4 * v41];
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v77 = v33;
    unsigned int v37 = v35 + 4;
  }
  uint64_t v77 = v37;
  uint64_t v45 = (char *)__p;
  uint64_t v71 = (char *)__p;
  if ((unint64_t)__p >= v72)
  {
    unint64_t v47 = (uint64_t)(v72 - (void)__p) >> 1;
    if (v47 <= 1) {
      unint64_t v47 = 1;
    }
    if (v72 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v47;
    }
    unint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v72, v48);
    *(_DWORD *)unint64_t v49 = v32;
    uint64_t v46 = v49 + 4;
    uint64_t v52 = (char *)__p;
    uint64_t v51 = v71;
    uint64_t v53 = v49;
    if (v71 != __p)
    {
      do
      {
        int v54 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v53 - 1) = v54;
        v53 -= 4;
      }
      while (v51 != v52);
      uint64_t v51 = (char *)__p;
    }
    std::vector<unsigned int> __p = v53;
    uint64_t v71 = v49 + 4;
    unint64_t v72 = (unint64_t)&v49[4 * v50];
    if (v51) {
      operator delete(v51);
    }
  }
  else
  {
    *(_DWORD *)std::vector<unsigned int> __p = v32;
    uint64_t v46 = v45 + 4;
  }
  uint64_t v71 = v46;
  unsigned int v55 = (char *)v73;
  uint64_t v74 = (char *)v73;
  ++v31;
  unint64_t v57 = v81;
  uint64_t v56 = v82;
  if (v31 >= (v82 - v81) >> 2) {
    goto LABEL_109;
  }
  unint64_t v58 = v31;
  do
  {
    uint64_t v59 = *(unsigned int *)&v57[4 * v58];
    if (*(_DWORD *)(*a3 + 4 * v59) == v33)
    {
      if (v55 >= v75)
      {
        uint64_t v60 = (v55 - (unsigned char *)v73) >> 2;
        if ((unint64_t)(v60 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v61 = (v75 - (unsigned char *)v73) >> 1;
        if (v61 <= v60 + 1) {
          unint64_t v61 = v60 + 1;
        }
        if ((unint64_t)(v75 - (unsigned char *)v73) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v61;
        }
        if (v62) {
          uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v75, v62);
        }
        else {
          uint64_t v63 = 0;
        }
        uint64_t v64 = &v63[4 * v60];
        *(_DWORD *)uint64_t v64 = v59;
        unsigned int v55 = v64 + 4;
        uint64_t v66 = (char *)v73;
        int v65 = v74;
        if (v74 != v73)
        {
          do
          {
            int v67 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v64 - 1) = v67;
            v64 -= 4;
          }
          while (v65 != v66);
          int v65 = (char *)v73;
        }
        uint64_t v73 = v64;
        uint64_t v74 = v55;
        uint64_t v75 = &v63[4 * v62];
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v55 = v59;
        v55 += 4;
      }
      uint64_t v74 = v55;
      unint64_t v57 = v81;
      uint64_t v56 = v82;
    }
    ++v58;
  }
  while (v58 < (v56 - v57) >> 2);
  if (v73 == v55
    || (cv3d::cv::gess::isochart::IsoChartMesh::TryConnectAllFacesInSameChart(a1, (char **)&v73, &__p), v73 == v74))
  {
LABEL_109:
    if (*a4) {
      goto LABEL_92;
    }
    uint64_t v21 = v81;
    float v22 = v82;
    goto LABEL_91;
  }
  cv3d::cv::gess::isochart::IsoChartMesh::AdjustChartIDToAvoidNonmanifold(v68, a3, (unsigned int **)&v73, (unsigned int **)&__p, v33, v26, v28);
  *a4 = 1;
LABEL_92:
  if (__p)
  {
    uint64_t v71 = (char *)__p;
    operator delete(__p);
  }
  if (v73)
  {
    uint64_t v74 = (char *)v73;
    operator delete(v73);
  }
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
  float v22 = v81;
LABEL_100:
  uint64_t v21 = v22;
  if (v22) {
    goto LABEL_101;
  }
}

void sub_24F525618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  uint64_t v21 = *(void **)(v19 - 104);
  if (v21)
  {
    *(void *)(v19 - 96) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryConnectAllFacesInSameChart(uint64_t a1, char **a2, void **a3)
{
  int v3 = (char *)*a3;
  if (a3[1] != *a3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (uint64_t)(a3 + 2);
    do
    {
      if (*a2 == a2[1]) {
        break;
      }
      unsigned int v34 = *(_DWORD *)&v3[4 * v7];
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(void *)(a1 + 40), &v34, __p);
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v10 = *(void *)(a1 + 40);
        unint64_t v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v10 + 104, (unsigned int *)__p[0] + i);
        unint64_t v12 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v10, *(_DWORD *)(v10 + 180), *v11);
        if ((*v12 & v13) == 0)
        {
          uint64_t v14 = *(void *)(a1 + 40) + 104;
          unint64_t v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)__p[0] + i);
          int v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v14, v15) + 16);
          unsigned __int8 v18 = *a2;
          int v17 = a2[1];
          if (*a2 != v17)
          {
            while (*(_DWORD *)v18 != v16)
            {
              v18 += 4;
              if (v18 == v17)
              {
                unsigned __int8 v18 = a2[1];
                break;
              }
            }
          }
          if (v18 != v17)
          {
            int v20 = a3[1];
            unint64_t v19 = (unint64_t)a3[2];
            if ((unint64_t)v20 >= v19)
            {
              uint64_t v22 = ((char *)v20 - (unsigned char *)*a3) >> 2;
              if ((unint64_t)(v22 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v23 = v19 - (void)*a3;
              uint64_t v24 = v23 >> 1;
              if (v23 >> 1 <= (unint64_t)(v22 + 1)) {
                uint64_t v24 = v22 + 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v24;
              }
              if (v25) {
                int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v8, v25);
              }
              else {
                int v26 = 0;
              }
              uint64_t v27 = &v26[4 * v22];
              *(_DWORD *)uint64_t v27 = v16;
              uint64_t v21 = v27 + 4;
              uint64_t v29 = (char *)*a3;
              int v28 = (char *)a3[1];
              if (v28 != *a3)
              {
                do
                {
                  int v30 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v27 - 1) = v30;
                  v27 -= 4;
                }
                while (v28 != v29);
                int v28 = (char *)*a3;
              }
              *a3 = v27;
              a3[1] = v21;
              a3[2] = &v26[4 * v25];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              _DWORD *v20 = v16;
              uint64_t v21 = v20 + 1;
            }
            a3[1] = v21;
            unint64_t v31 = a2[1];
            int64_t v32 = v31 - (v18 + 4);
            if (v31 != v18 + 4) {
              memmove(v18, v18 + 4, v31 - (v18 + 4));
            }
            a2[1] = &v18[v32];
          }
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v7;
      int v3 = (char *)*a3;
    }
    while (v7 < ((unsigned char *)a3[1] - (unsigned char *)*a3) >> 2);
  }
}

void sub_24F5258A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::AdjustChartIDToAvoidNonmanifold(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int **a4, int a5, int a6, int a7)
{
  if (a6 != a5) {
    a7 = a6;
  }
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  unint64_t v10 = v9 - *a3;
  unint64_t v11 = *a4;
  unint64_t v12 = a4[1];
  uint64_t v13 = (char *)v12 - (char *)*a4;
  if (v10 <= v13 >> 2)
  {
    if (v9 != v8)
    {
      uint64_t v17 = *a2;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      do
      {
        unsigned int v18 = *v8++;
        *(_DWORD *)(v17 + 4 * vstd::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = a7;
        --v10;
      }
      while (v10);
    }
  }
  else if (v12 != v11)
  {
    uint64_t v14 = v13 >> 2;
    uint64_t v15 = *a2;
    if ((unint64_t)(v13 >> 2) <= 1) {
      uint64_t v14 = 1;
    }
    do
    {
      unsigned int v16 = *v11++;
      *(_DWORD *)(v15 + 4 * v16) = a7;
      --v14;
    }
    while (v14);
  }
}

void *std::vector<std::vector<cv3d::cv::gess::mesh::FaceHandle>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F5259DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  int64x2_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__assign_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100]((void *)a1, v12);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>((uint64_t)&v20, a2, v15, v9);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      unint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_24F525C78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_24F525C80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24F525DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::~MaxHeap(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    while (*(void *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::CutTopData((uint64_t *)a1);
  }
  int v3 = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::CutTopData(uint64_t *a1)
{
  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::remove_at(a1, 0, &v3);
  if (v3) {
    uint64_t v1 = *(unsigned int *)(v3 + 4);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::remove_at(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[4];
  if (v4 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v4 - 1);
    uint64_t v7 = a1[4] - 1;
    a1[4] = v7;
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(*a1 + 16 * v7);
    *(void *)(v9 + 8) = -1;
    if (**(_DWORD **)(v8 + 16 * a2) >= *(_DWORD *)v9) {
      cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::upheap(a1, a2);
    }
    else {
      cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::downheap(a1, a2);
    }
    long long v10 = *(_OWORD *)(*a1 + 16 * a1[4]);
    *(_OWORD *)a3 = v10;
    if (*((void *)&v10 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::downheap(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[4];
  if (v2 > a2)
  {
    unint64_t v4 = a2;
    do
    {
      unint64_t v5 = (2 * a2) | 1;
      uint64_t v6 = *a1;
      int v7 = **(_DWORD **)(*a1 + 16 * a2);
      if (v5 < v2)
      {
        int v8 = **(_DWORD **)(v6 + 16 * v5);
        unint64_t v4 = v8 <= v7 ? a2 : (2 * a2) | 1;
        if (v8 > v7) {
          int v7 = **(_DWORD **)(v6 + 16 * v5);
        }
      }
      unint64_t v9 = 2 * a2 + 2;
      if (v9 < v2 && **(_DWORD **)(v6 + 16 * v9) > v7) {
        unint64_t v4 = 2 * a2 + 2;
      }
      if (v4 == a2) {
        break;
      }
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v4);
      unint64_t v2 = a1[4];
      a2 = v4;
    }
    while (v4 < v2);
  }
}

void cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::upheap(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    do
    {
      unint64_t v3 = a2 - 1;
      unint64_t v4 = (unint64_t)(a2 - 1) >> 1;
      if (**(_DWORD **)(*a1 + 16 * a2) <= **(_DWORD **)(*a1 + 16 * v4)) {
        break;
      }
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, (unint64_t)(a2 - 1) >> 1);
      a2 = v4;
    }
    while (v3 > 1);
  }
}

void std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        int v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::__append(a1, v5);
  }
}

void std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    unint64_t v14 = v13;
    long long v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(&v14);
  }
}

void sub_24F5261CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  int64x2_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

void **std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_24F5264A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::InitOptimizeInfo(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)*((void *)this + 5);
  unint64_t v9 = v8[14] - v8[13];
  unsigned int v31 = *((_DWORD *)this + 48);
  uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8 + 10, &v31);
  uint64_t v11 = (v9 >> 2);
  if ((v9 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v12 = *(float32x2_t **)(v10 + 40);
    uint64_t v13 = (uint64_t)(*(void *)(v10 + 48) - (void)v12) >> 3;
    float32x2_t v14 = *(float32x2_t *)((char *)a2 + 44);
    float32x2_t v15 = *(float32x2_t *)((char *)a2 + 52);
    uint64_t v16 = (v9 >> 2);
    do
    {
      if (!v13) {
        cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
      }
      float32x2_t v14 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v14, *v12), (int8x8_t)*v12, (int8x8_t)v14);
      *(float32x2_t *)((char *)a2 + 44) = v14;
      float32x2_t v17 = *v12++;
      float32x2_t v15 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v17, v15), (int8x8_t)v17, (int8x8_t)v15);
      *(float32x2_t *)((char *)a2 + 52) = v15;
      --v13;
      --v16;
    }
    while (v16);
  }
  uint64_t v29 = v10;
  uint64_t v18 = (void *)((char *)a2 + 160);
  *((void *)a2 + 21) = *((void *)a2 + 20);
  unint64_t v19 = (void *)((char *)a2 + 136);
  *((void *)a2 + std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18) = *((void *)a2 + 17);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__clear[abi:ne180100]((uint64_t *)a2 + 14);
  std::vector<float>::resize((uint64_t)a2 + 160, (uint64_t)(*(void *)(*((void *)this + 5) + 160) - *(void *)(*((void *)this + 5) + 152)) >> 2);
  std::vector<float>::resize((uint64_t)a2 + 136, (v9 >> 2));
  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::resize((uint64_t *)a2 + 14, (v9 >> 2));
  if ((v9 >> 2))
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = operator new(0x28uLL);
      v22[1] = 0;
      v22[2] = 0;
      *uint64_t v22 = &unk_2700D8FF0;
      v22[3] = 0xFFFFFFFF00000000;
      v22[4] = -1;
      uint64_t v23 = (void *)(*((void *)a2 + 14) + v21);
      uint64_t v24 = (std::__shared_weak_count *)v23[1];
      *uint64_t v23 = v22 + 3;
      v23[1] = v22;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      v21 += 16;
    }
    while (16 * v11 != v21);
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength(*((float32x4_t **)this + 5), v20);
  *((_DWORD *)a2 + 1) = v25;
  *((void *)a2 + 2) = a3;
  *((void *)a2 + 3) = a4;
  *((_DWORD *)a2 + 2) = 953267991;
  float v26 = **((float **)this + 7) * 0.2;
  *((float *)a2 + 10) = v26;
  int v27 = *((unsigned __int8 *)this + 64);
  *(unsigned char *)a2 = v27;
  cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch(*((void *)this + 5), v29, (void *)a2 + 20, v27, (unsigned int *)this + 17);
  if ((v9 >> 2))
  {
    uint64_t v28 = 0;
    do
    {
      int v30 = v28;
      *(float *)(*v19 + 4 * v28++) = cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertexStretch((uint64_t)this, (uint64_t)&v30, v18);
    }
    while (v11 != v28);
  }
}

void std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::__append(a1, v5);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch(uint64_t a1, uint64_t a2, void *a3, int a4, unsigned int *a5)
{
  unint64_t v7 = ((*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  std::vector<float>::resize((uint64_t)a3, v7);
  int v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  unsigned int v25 = 0;
  unsigned int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 56), (uint64_t)&v25, (unsigned __int8 *)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v8 == -1) {
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch();
  }
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (v7)
  {
    for (unint64_t i = 0; i != v7; ++i)
    {
      unsigned int v21 = i;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v21, __p);
      unint64_t v10 = *(unsigned int *)__p[0];
      uint64_t v11 = *(void *)(a2 + 40);
      unint64_t v12 = (*(void *)(a2 + 48) - v11) >> 3;
      if (v12 <= v10
        || (unint64_t v13 = *((unsigned int *)__p[0] + 1), v12 <= v13)
        || (unint64_t v14 = *((unsigned int *)__p[0] + 2), v12 <= v14)
        || (unsigned int v25 = v8,
            uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 56), &v25),
            uint64_t v16 = *(void *)(v15 + 40),
            i >= (*(void *)(v15 + 48) - v16) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch(a1, &v21, (float *)(v11 + 8 * v10), (float *)(v11 + 8 * v13), (float *)(v11 + 8 * v14), (float *)(v16 + 4 * i), (float *)&v24, a4, a5);
      *(_DWORD *)(*a3 + 4 * i) = v17;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24F526920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertexStretch(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  cv3d::cv::gess::isochart::GetAdjacentFaces(*(void *)(a1 + 40), a2, (void **)&v9);
  if (v10 == v9)
  {
    float v5 = 0.0;
    if (!v9) {
      return v5;
    }
LABEL_7:
    unint64_t v10 = v9;
    operator delete(v9);
    return v5;
  }
  uint64_t v4 = 0;
  float v5 = 0.0;
  unsigned int v6 = 1;
  while (fabsf(v5 + -3.4028e38) >= 0.00000001)
  {
    float v5 = v5 + *(float *)(*a3 + 4 * v9[v4]);
    uint64_t v4 = v6;
    if (v10 - v9 <= (unint64_t)v6++) {
      goto LABEL_7;
    }
  }
  float v5 = 3.4028e38;
  if (v9) {
    goto LABEL_7;
  }
  return v5;
}

void sub_24F526A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::OptimizeInfiniteStretch(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2, BOOL *a3)
{
  float v5 = (uint64_t *)((char *)a2 + 72);
  unint64_t v6 = *(void *)(*((void *)this + 5) + 112) - *(void *)(*((void *)this + 5) + 104);
  uint64_t v7 = (v6 >> 2);
  uint64_t v8 = v6 & 0x3FFFFFFFCLL;
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(_DWORD **)(*((void *)a2 + 14) + v9);
      *uint64_t v11 = *(_DWORD *)(*((void *)a2 + 17) + 4 * v10);
      v11[1] = v10++;
      v9 += 16;
    }
    while (v7 != v10);
  }
  uint64_t v12 = 0;
  unint64_t v24 = *((void *)a2 + 8);
  *((unsigned char *)a2 + 1) = 0;
  while (1)
  {
    if (v8)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        if (*(float *)(*((void *)a2 + 17) + 4 * v14) >= 3.4028e38)
        {
          uint64_t v15 = *((void *)a2 + 14);
          uint64_t v16 = *(void *)(v15 + v13);
          if (*(void *)(v16 + 8) == -1)
          {
            uint64_t v17 = *(void *)(v15 + v13 + 8);
            *(void *)&long long v26 = v16;
            *((void *)&v26 + 1) = v17;
            if (v17) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
            cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::insert(v5, &v26);
            if (*((void *)&v26 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
            }
          }
        }
        ++v14;
        v13 += 16;
      }
      while (v7 != v14);
    }
    cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVerticesInHeap(this, a2);
    uint64_t result = *((void *)this + 4);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
      if (result) {
        return result;
      }
    }
    unint64_t v19 = 0;
    if (v8)
    {
      char v20 = (float *)*((void *)a2 + 17);
      uint64_t v21 = v7;
      do
      {
        float v22 = *v20++;
        if (v22 >= 3.4028e38) {
          ++v19;
        }
        --v21;
      }
      while (v21);
    }
    if (*((void *)a2 + 8) <= v19)
    {
      unint64_t v19 = *((void *)a2 + 8);
LABEL_29:
      *a3 = v19 < v24;
      return result;
    }
    *((void *)a2 + 8) = v19;
    if (v19) {
      BOOL v23 = (unint64_t)++v12 >= *((void *)a2 + 2);
    }
    else {
      BOOL v23 = 1;
    }
    if (v23) {
      goto LABEL_29;
    }
  }
}

void sub_24F526C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::insert(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *(void *)a2;
  if (!*(void *)a2) {
    return 0;
  }
  unint64_t v5 = a1[4];
  if (v5 >= (a1[1] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::push_back[abi:ne180100](a1, a2);
  }
  else
  {
    unint64_t v6 = (void *)(*a1 + 16 * v5);
    uint64_t v7 = *((void *)a2 + 1);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (std::__shared_weak_count *)v6[1];
    *unint64_t v6 = v2;
    v6[1] = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  uint64_t v9 = a1[4];
  *(void *)(*(void *)a2 + 8) = v9;
  a1[4] = v9 + 1;
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(a1, v9);
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVerticesInHeap(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2)
{
  if (*((void *)a2 + 13))
  {
    uint64_t v4 = (uint64_t *)((char *)a2 + 72);
    do
    {
      uint64_t v5 = *((void *)this + 4);
      if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5) & 1) != 0) {
        break;
      }
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(v4, 0, &v16);
      if (!v16) {
        __assert_rtn("OptimizeVerticesInHeap", "MeshOptimizeStretch.cpp", 435, "top != nullptr");
      }
      if (*(float *)v16 >= *((float *)a2 + 10))
      {
        unsigned int v15 = *(_DWORD *)(v16 + 4);
        if (*((unsigned char *)a2 + 2) || !cv3d::cv::gess::mesh::PolyMesh::is_boundary(*((void *)this + 5), (uint64_t)&v15))
        {
          char v14 = 0;
          cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexParamStretch((uint64_t)this, (int *)&v15, a2, &v14);
          if (v14)
          {
            uint64_t v6 = *(void *)(*((void *)a2 + 14) + 16 * v15);
            if (*(void *)(v6 + 8) != -1) {
              __assert_rtn("OptimizeVerticesInHeap", "MeshOptimizeStretch.cpp", 446, "heap_items[vh.Index()]->GetPos() == NOT_IN_HEAP");
            }
            *(_DWORD *)uint64_t v6 = *(_DWORD *)(*((void *)a2 + 17) + 4 * v15);
            cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v13, (void *)(*((void *)this + 5) + 104), &v15);
            for (unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v13);
                  i != -1;
                  unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v13))
            {
              uint64_t v8 = *((void *)a2 + 14);
              uint64_t v9 = *(void *)(v8 + 16 * i);
              if (*(void *)(v9 + 8) == -1)
              {
                *(_DWORD *)uint64_t v9 = *(_DWORD *)(*((void *)a2 + 17) + 4 * i);
              }
              else
              {
                uint64_t v11 = *(void *)(v8 + 16 * i);
                uint64_t v10 = *(std::__shared_weak_count **)(v8 + 16 * i + 8);
                uint64_t v12 = v10;
                if (v10) {
                  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update(v4, &v11, *(float *)(*((void *)a2 + 17) + 4 * i));
                if (v12) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
                }
              }
            }
          }
        }
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
    while (*((void *)a2 + 13));
  }
}

void sub_24F526EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2)
{
  uint64_t v4 = (uint64_t *)((char *)a2 + 72);
  uint64_t v5 = (void *)*((void *)this + 5);
  unint64_t v6 = v5[14] - v5[13];
  unint64_t v7 = v5[20] - v5[19];
  uint64_t v8 = (v6 >> 2);
  uint64_t v28 = v6 & 0x3FFFFFFFCLL;
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(_DWORD **)(*((void *)a2 + 14) + v9);
      *uint64_t v11 = *(_DWORD *)(*((void *)a2 + 17) + 4 * v10);
      v11[1] = v10++;
      v9 += 16;
    }
    while (v8 != v10);
  }
  unint64_t v12 = 0;
  uint64_t v13 = v7 & 0x3FFFFFFFCLL;
  uint64_t v27 = (v7 >> 2);
  do
  {
    if (v28)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v8;
      do
      {
        uint64_t v16 = *((void *)a2 + 14);
        uint64_t v17 = *(void *)(v16 + v14);
        if (*(void *)(v17 + 8) != -1) {
          cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch();
        }
        uint64_t v18 = *(void *)(v16 + v14 + 8);
        *(void *)&long long v29 = v17;
        *((void *)&v29 + 1) = v18;
        if (v18) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
        }
        cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::insert(v4, &v29);
        if (*((void *)&v29 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
        }
        v14 += 16;
        --v15;
      }
      while (v15);
    }
    cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVerticesInHeap(this, a2);
    uint64_t result = *((void *)this + 4);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
      if (result) {
        break;
      }
    }
    unint64_t v20 = 0;
    if (v13)
    {
      uint64_t v21 = (float *)*((void *)a2 + 20);
      float v22 = -3.4028e38;
      uint64_t v23 = v27;
      do
      {
        float v24 = *v21++;
        float v25 = v24;
        if (v22 < v24) {
          float v22 = v25;
        }
        if (v25 >= 3.4028e38) {
          ++v20;
        }
        --v23;
      }
      while (v23);
    }
    else
    {
      float v22 = -3.4028e38;
    }
    if ((float)(*((float *)a2 + 15) - v22) < 0.00004 && *((void *)a2 + 8) <= v20) {
      break;
    }
    *((float *)a2 + 15) = v22;
    *((void *)a2 + 8) = v20;
    ++v12;
  }
  while (v12 < *((void *)a2 + 2));
  return result;
}

void sub_24F5270E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(cv3d::cv::gess::isochart::IsoChartMesh *this, float **a2, float *a3, float *a4, unint64_t *a5, float *a6, int a7)
{
  cv3d::cv::gess::isochart::IsoChartMesh::InitOptimizeInfo(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2, 10, 10);
  v14.n128_u32[0] = 1036831949;
  if (a7) {
    float v15 = 0.05;
  }
  else {
    float v15 = 0.1;
  }
  uint64_t v16 = a2[20];
  uint64_t v17 = a2[21];
  if (v16 == v17)
  {
    unint64_t v18 = 0;
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      float v19 = *v16++;
      v14.n128_f32[0] = v19;
      if (v19 >= 3.4028e38) {
        ++v18;
      }
    }
    while (v16 != v17);
  }
  *a5 = v18;
  uint64_t v20 = *((void *)this + 4);
  if (v20)
  {
    if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v20 + 48))(v20, v14)) {
      return 0;
    }
    unint64_t v18 = *a5;
  }
  if (v18 > 0x1F3
    || (float)(v15
             * (float)(unint64_t)((uint64_t)(*(void *)(*((void *)this + 5) + 160)
                                                 - *(void *)(*((void *)this + 5) + 152)) >> 2)) <= (float)v18)
  {
    BOOL result = 0;
    *a3 = 3.4028e38;
    return result;
  }
  *((unsigned char *)a2 + 1) = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::OptimizeInfiniteStretch(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2, &v30);
  uint64_t v21 = *((void *)this + 4);
  if (v21 && ((*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21) & 1) != 0) {
    return 0;
  }
  if (!a2[8])
  {
    cv3d::cv::gess::isochart::IsoChartMesh::InitOptimizeInfo(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2, 10, 10);
    *((unsigned char *)a2 + 1) = 1;
    cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2);
    uint64_t v27 = *((void *)this + 4);
    if (v27)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27)) {
        return 0;
      }
    }
  }
  uint64_t v29 = 0;
  cv3d::cv::gess::isochart::CalculateMaxAvgStretch((uint64_t)(a2 + 20), a3, a4, &v29);
  float v22 = a2[20];
  uint64_t v23 = a2[21];
  if (v22 == v23)
  {
    *a5 = 0;
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      float v25 = *v22++;
      if (v25 >= 3.4028e38) {
        ++v24;
      }
    }
    while (v22 != v23);
    *a5 = v24;
    if (v24) {
      return 0;
    }
  }
  float v28 = cv3d::cv::gess::isochart::CalculateInfiniteStretchArea(*((void *)this + 5), a2 + 20);
  *a6 = v28;
  if (v28 > (float)(**((float **)this + 6) * 1.0e-16)) {
    return 0;
  }
  return *a3 <= **((float **)this + 7);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  LOWORD(v5) = 256;
  BYTE2(v5) = 1;
  int64x2_t v6 = vdupq_n_s64(0xAuLL);
  uint64_t v7 = 20;
  long long v8 = xmmword_24F5788C0;
  uint64_t v9 = 0x7F7FFFFFFF7FFFFFLL;
  uint64_t v10 = -1;
  memset(v11, 0, sizeof(v11));
  char v12 = 0;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v4 = 0;
  unint64_t v17 = 0;
  BOOL v1 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(this, &v5, (float *)&v4 + 1, (float *)&v4, &v17, &v3, 0);
  if (*((void *)&v15 + 1))
  {
    *(void *)&long long v16 = *((void *)&v15 + 1);
    operator delete(*((void **)&v15 + 1));
  }
  if ((void)v14)
  {
    *((void *)&v14 + 1) = v14;
    operator delete((void *)v14);
  }
  unint64_t v17 = (unint64_t)v13 + 8;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v11);
  return v1;
}

void sub_24F52746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo((cv3d::cv::gess::isochart::ChartOptimizeInfo *)va);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalFaceGeoL2SquaredStretch(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  *a7 = (float)((float)((float)(*a4 - *a3) * (float)(a5[1] - a3[1]))
              - (float)((float)(a4[1] - a3[1]) * (float)(*a5 - *a3)))
      * 0.5;
  uint64_t v14 = a1 + 104;
  long long v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  long long v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, v15);
  uint64_t v17 = cv3d::cv::gess::mesh::Topology::h(v14, v16);
  unint64_t v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  uint64_t v19 = cv3d::cv::gess::mesh::Topology::h(v14, v18);
  uint64_t v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)(v19 + 8));
  uint64_t v21 = cv3d::cv::gess::mesh::Topology::h(v14, v20);
  float v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  uint64_t v23 = cv3d::cv::gess::mesh::Topology::h(v14, v22);
  long long v26 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v17 + 12));
  long long v25 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v21 + 12));
  long long v24 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v23 + 12));
  cv3d::cv::gess::isochart::CalculateFaceL2Stretch((uint64_t)&v26, (uint64_t)&v25, (uint64_t)&v24, a3, a4, a5, a6, a7);
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSigL2SquaredStretch(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  v34[1] = *MEMORY[0x263EF8340];
  *a7 = (float)((float)((float)(*a4 - *a3) * (float)(a5[1] - a3[1]))
              - (float)((float)(a4[1] - a3[1]) * (float)(*a5 - *a3)))
      * 0.5;
  uint64_t v14 = a1 + 104;
  long long v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  long long v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, v15);
  uint64_t v17 = cv3d::cv::gess::mesh::Topology::h(v14, v16);
  unint64_t v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  uint64_t v19 = cv3d::cv::gess::mesh::Topology::h(v14, v18);
  uint64_t v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)(v19 + 8));
  uint64_t v21 = cv3d::cv::gess::mesh::Topology::h(v14, v20);
  float v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  uint64_t v23 = cv3d::cv::gess::mesh::Topology::h(v14, v22);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v34[0] = 0;
  float32x4_t v30 = 0u;
  int32x4_t v31 = 0u;
  float32x4_t v29 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v17 + 12));
  float32x4_t v28 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v21 + 12));
  float32x4_t v27 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v23 + 12));
  cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(&v29, &v28, &v27, &v32, (uint64_t)&v33, (float *)v34, &v31, &v30);
  return cv3d::cv::gess::isochart::CalculateFaceSigL2Stretch(a3, a4, a5, a6, a7, (uint64_t)&v32, a8);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7, int a8, unsigned int *a9)
{
  if (a8)
  {
    if (*a9 == -1) {
      cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch();
    }
    unsigned int v19 = *a9;
    uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v19);
    unint64_t v17 = *a2;
    uint64_t v18 = *(void *)(v16 + 40);
    if (v17 >= (*(void *)(v16 + 48) - v18) >> 4) {
      cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
    }
    cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSigL2SquaredStretch(a1, a2, a3, a4, a5, a6, a7, (float *)(v18 + 16 * v17));
  }
  else
  {
    cv3d::cv::gess::isochart::IsoChartMesh::CalFaceGeoL2SquaredStretch(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t cv3d::cv::gess::isochart::GetAdjacentFaces(uint64_t a1, uint64_t a2, void **a3)
{
  if (*a3 != a3[1]) {
    cv3d::cv::gess::isochart::GetAdjacentFaces();
  }
  uint64_t v5 = a1 + 104;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v24, a1 + 104, a2);
  uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v24);
  for (unsigned int i = result; result != -1; unsigned int i = result)
  {
    uint64_t v7 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), result);
    if ((v8 & *v7) == 0)
    {
      uint64_t v9 = cv3d::cv::gess::mesh::Topology::h(v5, &i);
      uint64_t v10 = v9;
      char v12 = a3[1];
      unint64_t v11 = (unint64_t)a3[2];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - (unsigned char *)*a3) >> 2;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*a3;
        uint64_t v16 = v15 >> 1;
        if (v15 >> 1 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unsigned int v19 = &v18[4 * v14];
        *(_DWORD *)unsigned int v19 = *(_DWORD *)(v10 + 16);
        uint64_t v13 = v19 + 4;
        uint64_t v21 = (char *)*a3;
        uint64_t v20 = (char *)a3[1];
        if (v20 != *a3)
        {
          do
          {
            int v22 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)*a3;
        }
        *a3 = v19;
        a3[1] = v13;
        a3[2] = &v18[4 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *char v12 = *(_DWORD *)(v9 + 16);
        uint64_t v13 = v12 + 1;
      }
      a3[1] = v13;
    }
    uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v24);
  }
  return result;
}