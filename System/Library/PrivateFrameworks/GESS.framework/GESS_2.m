void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexParamStretch(uint64_t a1, int *a2, cv3d::cv::gess::isochart::ChartOptimizeInfo *a3, unsigned char *a4)
{
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  float v39;
  uint64_t v40;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float v48;
  float v49;
  void *v50[2];
  void *v51[2];
  long long v52;
  void *v53[2];
  void *v54[2];
  long long v55;
  void *v56[2];
  void *__p[2];
  long long v58;
  void *v59;
  char *v60;
  char *v61;
  char *v62;
  unsigned char *v63;
  _DWORD *v64;
  unsigned char *v65;
  uint64_t v66;
  unsigned int v67[3];

  *a4 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  cv3d::cv::gess::isochart::GetAdjacentHEdges(*(void *)(a1 + 40), (uint64_t)a2, (void **)&v64);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v62, (v65 - (unsigned char *)v64) >> 2);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v8 = v64;
  if (v65 == (unsigned char *)v64)
  {
    v29 = 0;
    v28 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(void *)(a1 + 40) + 104;
      v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v11, &v8[v9]);
      v13 = cv3d::cv::gess::mesh::Topology::h(v11, v12);
      *(_DWORD *)&v62[4 * v9] = *(_DWORD *)(v13 + 12);
      v14 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), v64[v9]);
      if ((*v14 & v15) == 0)
      {
        v16 = cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v64[v9]);
        v17 = v16;
        v18 = v60;
        if (v60 >= v61)
        {
          v20 = (v60 - (unsigned char *)v59) >> 2;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          v21 = (v61 - (unsigned char *)v59) >> 1;
          if (v21 <= v20 + 1) {
            v21 = v20 + 1;
          }
          if ((unint64_t)(v61 - (unsigned char *)v59) >= 0x7FFFFFFFFFFFFFFCLL) {
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            v22 = v21;
          }
          if (v22) {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v61, v22);
          }
          else {
            v23 = 0;
          }
          v24 = &v23[4 * v20];
          *(_DWORD *)v24 = *(_DWORD *)(v17 + 16);
          v19 = v24 + 4;
          v26 = (char *)v59;
          v25 = v60;
          if (v60 != v59)
          {
            do
            {
              v27 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *((_DWORD *)v24 - 1) = v27;
              v24 -= 4;
            }
            while (v25 != v26);
            v25 = (char *)v59;
          }
          v59 = v24;
          v60 = v19;
          v61 = &v23[4 * v22];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_DWORD *)v60 = *(_DWORD *)(v16 + 16);
          v19 = v18 + 4;
        }
        v60 = v19;
      }
      v9 = ++v10;
      v8 = v64;
    }
    while (v10 < (unint64_t)((v65 - (unsigned char *)v64) >> 2));
    v28 = (char *)v59;
    v29 = (uint64_t)v60;
  }
  v45 = 0;
  v44 = 0;
  v46 = 0;
  *(_OWORD *)v50 = 0u;
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)v56 = 0u;
  *(_OWORD *)__p = 0u;
  v58 = 0u;
  v43 = *a2;
  v55 = 0u;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v54[1], v28, v29, (v29 - (uint64_t)v28) >> 2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)v56, v62, (uint64_t)v63, (v63 - v62) >> 2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&__p[1], (char *)v64, (uint64_t)v65, (v65 - (unsigned char *)v64) >> 2);
  std::vector<float>::resize((uint64_t)v50, (v60 - (unsigned char *)v59) >> 2);
  std::vector<float>::resize((uint64_t)&v51[1], (v60 - (unsigned char *)v59) >> 2);
  std::vector<float>::resize((uint64_t)v53, (v60 - (unsigned char *)v59) >> 2);
  v30 = *(void *)(a1 + 40);
  v67[0] = *(_DWORD *)(a1 + 192);
  v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v30 + 80), v67);
  v32 = *a2;
  v33 = *(void *)(v31 + 40);
  if (v32 >= (*(void *)(v31 + 48) - v33) >> 3) {
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  }
  v44 = *(void *)(v33 + 8 * v32);
  v47 = *(_DWORD *)(*((void *)a3 + 17) + 4 * v32);
  v34 = (unsigned int *)v59;
  if (v60 != v59)
  {
    v35 = (v60 - (unsigned char *)v59) >> 2;
    v36 = *((void *)a3 + 20);
    v37 = v50[0];
    if (v35 <= 1) {
      v35 = 1;
    }
    do
    {
      v38 = *v34++;
      *v37++ = *(_DWORD *)(v36 + 4 * v38);
      --v35;
    }
    while (v35);
  }
  if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(a1 + 40), (uint64_t)a2)) {
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt(a1, (uint64_t)a3, &v43);
  }
  else {
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt((cv3d::cv::gess::isochart::IsoChartMesh *)a1, (cv3d::cv::gess::isochart::VertexOptimizeInfo *)&v43);
  }
  if (fabsf(v49) <= 1.0e-16)
  {
    *a4 = 0;
  }
  else
  {
    *a4 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexStretchAroundCenter((cv3d::cv::gess::isochart::IsoChartMesh *)a1, a3, (cv3d::cv::gess::isochart::VertexOptimizeInfo *)&v43);
    v39 = v48;
    if (v48 >= 3.4028e38)
    {
      v40 = 9;
      do
      {
        v49 = v49 * 1.1;
        *a4 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexStretchAroundCenter((cv3d::cv::gess::isochart::IsoChartMesh *)a1, a3, (cv3d::cv::gess::isochart::VertexOptimizeInfo *)&v43);
      }
      while ((v48 < v39 || v48 >= 3.4028e38) && v40-- != 0);
    }
  }
  if (__p[1])
  {
    *(void **)&v58 = __p[1];
    operator delete(__p[1]);
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
  if (v54[1])
  {
    *(void **)&v55 = v54[1];
    operator delete(v54[1]);
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (v51[1])
  {
    *(void **)&v52 = v51[1];
    operator delete(v51[1]);
  }
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  if (v59)
  {
    v60 = (char *)v59;
    operator delete(v59);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
}

void sub_24F527EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(void *)(v33 - 128) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::GetAdjacentHEdges(uint64_t a1, uint64_t a2, void **a3)
{
  if (*a3 != a3[1]) {
    cv3d::cv::gess::isochart::GetAdjacentHEdges();
  }
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v18, a1 + 104, a2);
  uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v18);
  if (result != -1)
  {
    int v5 = result;
    do
    {
      v7 = a3[1];
      unint64_t v6 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*a3) >> 2;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*a3;
        uint64_t v11 = v10 >> 1;
        if (v10 >> 1 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v12);
        }
        else {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = v5;
        v8 = v14 + 4;
        v16 = (char *)*a3;
        v15 = (char *)a3[1];
        if (v15 != *a3)
        {
          do
          {
            int v17 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v14 - 1) = v17;
            v14 -= 4;
          }
          while (v15 != v16);
          v15 = (char *)*a3;
        }
        *a3 = v14;
        a3[1] = v8;
        a3[2] = &v13[4 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        _DWORD *v7 = v5;
        v8 = v7 + 1;
      }
      a3[1] = v8;
      uint64_t result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v18);
      int v5 = result;
    }
    while (result != -1);
  }
  return result;
}

unint64_t cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v62 = *a3;
  if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(void *)(a1 + 40), (uint64_t)&v62)) {
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt();
  }
  uint64_t v6 = *(void *)(a1 + 40);
  unsigned int v63 = *(_DWORD *)(a1 + 192);
  uint64_t v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v6 + 80), &v63);
  uint64_t v8 = v62;
  uint64_t v9 = *(void *)(v7 + 40);
  unint64_t v10 = (*(void *)(v7 + 48) - v9) >> 3;
  if (v10 <= v62) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  uint64_t v11 = v7;
  unint64_t v12 = (unsigned int *)*((void *)a3 + 17);
  v13 = (_DWORD *)*((void *)a3 + 18);
  v14 = (float *)(v9 + 8 * v62);
  a3[5] = *(_DWORD *)v14;
  a3[6] = *((_DWORD *)v14 + 1);
  a3[3] = *(_DWORD *)v14;
  a3[4] = *((_DWORD *)v14 + 1);
  a3[8] = *(_DWORD *)(*(void *)(a2 + 136) + 4 * v8);
  a3[9] = 2139095039;
  if (v13 != v12)
  {
    unint64_t v15 = v13 - v12;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    float v16 = 3.4028e38;
    do
    {
      unsigned int v18 = *v12++;
      uint64_t v17 = v18;
      if (v10 <= v18) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      float v19 = (float)((float)(v14[1] - *(float *)(v9 + 8 * v17 + 4)) * (float)(v14[1] - *(float *)(v9 + 8 * v17 + 4)))
          + (float)((float)(*v14 - *(float *)(v9 + 8 * v17)) * (float)(*v14 - *(float *)(v9 + 8 * v17)));
      if (v19 < v16)
      {
        *((float *)a3 + 9) = v19;
        float v16 = v19;
      }
      --v15;
    }
    while (v15);
  }
  unsigned int v63 = -1;
  v20 = (unsigned int *)*((void *)a3 + 20);
  v21 = (unsigned int *)*((void *)a3 + 21);
  while (v20 != v21)
  {
    v22 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), *v20);
    if ((v23 & *v22) != 0)
    {
      unsigned int v63 = *v20;
      break;
    }
    ++v20;
  }
  uint64_t v24 = *(void *)(a1 + 40) + 104;
  for (i = &v63; ; i = &v61)
  {
    unint64_t result = cv3d::cv::gess::mesh::Topology::h(v24, i);
    unsigned int v61 = *(_DWORD *)(result + 8);
    if (v61 == v63) {
      break;
    }
    unint64_t v27 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v61) + 12);
    uint64_t v28 = *(void *)(a1 + 40) + 104;
    v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v28, &v61);
    unint64_t v30 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v28, v29) + 12);
    if (v30 != v62)
    {
      uint64_t v31 = *(void *)(v11 + 40);
      unint64_t v32 = (*(void *)(v11 + 48) - v31) >> 3;
      if (v32 <= v62) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      if (v32 <= v27) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      if (v32 <= v30) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      if (*((float *)a3 + 9) > v33) {
        *((float *)a3 + 9) = v33;
      }
    }
    uint64_t v24 = *(void *)(a1 + 40) + 104;
  }
  v34 = (unsigned int *)*((void *)a3 + 20);
  v35 = (unsigned int *)*((void *)a3 + 21);
  while (v34 != v35)
  {
    uint64_t v36 = *(void *)(a1 + 40);
    v37 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v36, *(_DWORD *)(v36 + 180), *v34);
    if ((v38 & *v37) != 0
      || (v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v36 + 104, v34),
          unint64_t result = cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v36, *(_DWORD *)(v36 + 180), *v39),
          (v40 & *(void *)result) != 0))
    {
      uint64_t v41 = *(void *)(a1 + 40) + 104;
      v42 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v41, v34);
      unint64_t v43 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v41, v42) + 12);
      unint64_t v44 = v62;
      uint64_t v45 = *(void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 180), *v34);
      v46 = (int *)v34;
      if ((v47 & v45) == 0) {
        v46 = (int *)cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, v34);
      }
      int v60 = *v46;
      uint64_t v48 = *(void *)(a1 + 40) + 104;
      for (j = (unsigned int *)&v60; ; j = &v59)
      {
        unint64_t result = cv3d::cv::gess::mesh::Topology::h(v48, j);
        unsigned int v59 = *(_DWORD *)(result + 8);
        if (v59 == v60) {
          break;
        }
        unint64_t v50 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(void *)(a1 + 40) + 104, &v59) + 12);
        if (v50 != v44 && v50 != v43)
        {
          uint64_t v52 = *(void *)(v11 + 40);
          unint64_t v53 = (*(void *)(v11 + 48) - v52) >> 3;
          if (v53 <= v50) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
          if (v53 <= v44) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
          if (v53 <= v43) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
          if (*((float *)a3 + 9) > v54) {
            *((float *)a3 + 9) = v54;
          }
        }
        uint64_t v48 = *(void *)(a1 + 40) + 104;
      }
    }
    ++v34;
  }
  float v55 = *((float *)a3 + 9);
  float v56 = sqrtf(v55) * 0.8;
  BOOL v57 = v55 < 0.0;
  float v58 = 0.0;
  if (!v57) {
    float v58 = v56;
  }
  *((float *)a3 + 9) = v58;
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::VertexOptimizeInfo *a2)
{
  int v39 = *(_DWORD *)a2;
  uint64_t v4 = *((void *)this + 5);
  v38.i32[0] = *((_DWORD *)this + 48);
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v4 + 80), (unsigned int *)&v38);
  uint64_t v6 = (unsigned int *)*((void *)a2 + 17);
  uint64_t v7 = *((void *)a2 + 18) - (void)v6;
  if (!v7) {
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt();
  }
  uint64_t v8 = v5;
  unint64_t v9 = v7 >> 2;
  float32x2_t v10 = 0;
  *(void *)((char *)a2 + 12) = 0;
  uint64_t v11 = (float *)((char *)a2 + 12);
  uint64_t v12 = *(void *)(v5 + 40);
  unint64_t v13 = (*(void *)(v5 + 48) - v12) >> 3;
  if (v9 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v9;
  }
  uint64_t v15 = v14;
  do
  {
    unsigned int v17 = *v6++;
    uint64_t v16 = v17;
    if (v13 <= v17) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    float32x2_t v18 = *(float32x2_t *)(v12 + 8 * v16);
    float32x2_t v10 = vadd_f32(v10, v18);
    *(float32x2_t *)uint64_t v11 = v10;
    --v15;
  }
  while (v15);
  v18.f32[0] = (float)v9;
  *(float32x2_t *)&long long v19 = vdiv_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v18, 0));
  *((void *)&v19 + 1) = v19;
  *(_OWORD *)((char *)a2 + 12) = v19;
  cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v39, v11, (float *)a2 + 8, (float **)a2 + 8, (uint64_t *)a2 + 14);
  uint64_t v20 = 0;
  float32x2_t v38 = 0;
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
  float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3E4CCCCCu);
  do
  {
    unint64_t v23 = *(unsigned int *)(*((void *)a2 + 17) + 4 * v20);
    uint64_t v24 = *(void *)(v8 + 40);
    if (v23 >= (*(void *)(v8 + 48) - v24) >> 3) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    float32x2_t v38 = vadd_f32(vmul_f32(*(float32x2_t *)(v24 + 8 * v23), v21), vmul_f32(*(float32x2_t *)((char *)a2 + 20), v22));
    float v37 = 0.0;
    cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v39, (float *)&v38, &v37, (float **)a2 + 11, (uint64_t *)a2 + 14);
    if (v37 < *((float *)a2 + 8))
    {
      *((float *)a2 + 8) = v37;
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)a2 + 64, *((char **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 2);
      *(float32x2_t *)((char *)a2 + 12) = v38;
    }
    ++v20;
  }
  while (v14 != v20);
  *((_DWORD *)a2 + 9) = 2139095039;
  v25 = (unsigned int *)*((void *)a2 + 17);
  uint64_t v26 = *(void *)(v8 + 40);
  unint64_t v27 = (*(void *)(v8 + 48) - v26) >> 3;
  float v28 = *((float *)a2 + 5);
  float v29 = *((float *)a2 + 6);
  float v30 = 3.4028e38;
  do
  {
    unsigned int v32 = *v25++;
    uint64_t v31 = v32;
    if (v27 <= v32) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    float v33 = (float)((float)(*(float *)(v26 + 8 * v31 + 4) - v29) * (float)(*(float *)(v26 + 8 * v31 + 4) - v29))
        + (float)((float)(*(float *)(v26 + 8 * v31) - v28) * (float)(*(float *)(v26 + 8 * v31) - v28));
    if (v33 < v30)
    {
      *((float *)a2 + 9) = v33;
      float v30 = v33;
    }
    --v14;
  }
  while (v14);
  float v34 = sqrtf(v30) * 0.8;
  BOOL v35 = v30 < 0.0;
  float v36 = 0.0;
  if (!v35) {
    float v36 = v34;
  }
  *((float *)a2 + 9) = v36;
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexStretchAroundCenter(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2, cv3d::cv::gess::isochart::VertexOptimizeInfo *a3)
{
  float v84 = *(float *)a3;
  float v6 = *((float *)a3 + 7);
  float v8 = *((float *)a3 + 3);
  float v9 = *((float *)a3 + 4);
  uint64_t v7 = (float *)((char *)a3 + 12);
  v83[0] = v8;
  v83[1] = v9;
  float32x2_t v10 = (float *)((char *)a3 + 32);
  float v11 = *((float *)a3 + 8);
  float v12 = *((float *)a2 + 2) * (float)((float)(*((float *)a2 + 1) * *((float *)a2 + 1)) * *((float *)a2 + 2));
  uint64_t v82 = 0;
  float v81 = 0.0;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v13 = 2;
  v80.__x_[0] = 2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v13 = i + 1812433253 * (v13 ^ (v13 >> 30));
    v80.__x_[i] = v13;
  }
  v80.__i_ = 0;
  uint64_t v15 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  uint64_t v86 = 0;
  unsigned int v85 = 0;
  cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v15 + 56), (uint64_t)&v85, (unsigned __int8 *)__p);
  float v69 = v6;
  float v70 = v11;
  if (v79 < 0) {
    operator delete(__p[0]);
  }
  float v67 = v9;
  float v68 = v8;
  float v16 = 0.0;
  if (*((float *)a3 + 7) >= 3.4028e38) {
  if (*((void *)a2 + 3))
  }
  {
    unint64_t v17 = 0;
    double v18 = v12;
    long long v19 = (float **)((char *)a3 + 64);
    v75 = (float *)((char *)a3 + 4);
    v71 = v10;
    v72 = v7;
    do
    {
      if (*((float *)a3 + 7) < 3.4028e38) {
        goto LABEL_23;
      }
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(__p, *((void *)this + 5) + 104, a3);
      unsigned int v77 = -1;
      unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
      unsigned int v76 = HEdge;
      if (HEdge == -1) {
        goto LABEL_23;
      }
      uint64_t v21 = 0;
      do
      {
        float32x2_t v22 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*((void *)this + 5), *(_DWORD *)(*((void *)this + 5) + 180), HEdge);
        if ((v23 & *v22) == 0
          && *(float *)(*((void *)a2 + 20)
                      + 4
                      * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 5) + 104, &v76) + 16)) >= 3.4028e38)
        {
          ++v21;
          unsigned int v77 = v76;
        }
        unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
        unsigned int v76 = HEdge;
      }
      while (HEdge != -1);
      if (v21 != 1)
      {
LABEL_23:
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v46 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v80);
        float v47 = (float)((float)v46 + (float)v46) * 3.14159265 * 2.32830644e-10;
      }
      else
      {
        uint64_t v24 = *((void *)this + 5);
        unsigned int v85 = *((_DWORD *)this + 48);
        uint64_t v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v24 + 80), &v85);
        unint64_t v26 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*((void *)this + 5) + 104, &v77) + 12);
        if (v26 >= (uint64_t)(*(void *)(v25 + 48) - *(void *)(v25 + 40)) >> 3) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        uint64_t v73 = *(void *)(v25 + 40);
        unint64_t v74 = v26;
        uint64_t v27 = *((void *)this + 5);
        unsigned int v85 = *((_DWORD *)this + 48);
        uint64_t v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v27 + 80), &v85);
        uint64_t v29 = *((void *)this + 5) + 104;
        float v30 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v29, &v77);
        unint64_t v31 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v29, v30) + 12);
        uint64_t v32 = *(void *)(v28 + 40);
        if (v31 >= (*(void *)(v28 + 48) - v32) >> 3) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        uint64_t v33 = *((void *)this + 5);
        unsigned int v85 = *((_DWORD *)this + 48);
        uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v33 + 80), &v85);
        uint64_t v35 = *((void *)this + 5) + 104;
        uint64_t v36 = cv3d::cv::gess::mesh::Topology::h(v35, &v77);
        unint64_t v37 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v35, (unsigned int *)(v36 + 4)) + 12);
        uint64_t v38 = *(void *)(v34 + 40);
        if (v37 >= (*(void *)(v34 + 48) - v38) >> 3) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        int v39 = (float *)(v73 + 8 * v74);
        uint64_t v40 = (float *)(v38 + 8 * v37);
        float v41 = v39[1];
        float v42 = *v40 - *v39;
        float v43 = v40[1] - v41;
        float v44 = atan2f(*(float *)(v32 + 8 * v31 + 4) - v41, *(float *)(v32 + 8 * v31) - *v39);
        float v45 = atan2f(v43, v42);
        if (vabds_f32(v45, v44) <= 3.14159265)
        {
          float32x2_t v10 = v71;
          uint64_t v7 = v72;
          long long v19 = (float **)((char *)a3 + 64);
        }
        else
        {
          float32x2_t v10 = v71;
          uint64_t v7 = v72;
          long long v19 = (float **)((char *)a3 + 64);
          if (v45 >= v44) {
            float v44 = v44 + 6.28318531;
          }
          else {
            float v45 = v45 + 6.28318531;
          }
        }
        float v47 = v44
            + (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v80)
                            * 2.3283e-10)
                    * (float)(v45 - v44));
      }
      float v48 = *((float *)a3 + 5);
      float v49 = *((float *)a3 + 9);
      __float2 v50 = __sincosf_stret(v47);
      float v51 = *((float *)a3 + 6) + (float)(v49 * v50.__sinval);
      *((float *)a3 + 3) = v48 + (float)(v49 * v50.__cosval);
      *((float *)a3 + 4) = v51;
      if (*((unsigned char *)a2 + 1) && cv3d::cv::gess::mesh::PolyMesh::is_boundary(*((void *)this + 5), (uint64_t)&v84))
      {
        float v52 = *((float *)a2 + 13);
        float v53 = *((float *)a3 + 4);
        if (*((float *)a3 + 3) < v52) {
          float v52 = *((float *)a3 + 3);
        }
        *((float *)a3 + 3) = v52;
        if (*((float *)a2 + 11) >= v52) {
          float v52 = *((float *)a2 + 11);
        }
        *((float *)a3 + 3) = v52;
        float v54 = *((float *)a2 + 14);
        if (v53 < v54) {
          float v54 = v53;
        }
        *((float *)a3 + 4) = v54;
        if (*((float *)a2 + 12) >= v54) {
          float v54 = *((float *)a2 + 12);
        }
        *((float *)a3 + 4) = v54;
      }
      cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v84, v7, v10, v19, (uint64_t *)a3 + 14);
      float v55 = *((float *)a3 + 1);
      float v56 = *((float *)a3 + 2);
      float v58 = *((float *)a3 + 3);
      float v57 = *((float *)a3 + 4);
      double v59 = (float)((float)((float)(v56 - v57) * (float)(v56 - v57)) + (float)((float)(v55 - v58) * (float)(v55 - v58)));
      while (v59 > v18)
      {
        float v81 = (float)(v55 + v58) * 0.5;
        *(float *)&uint64_t v82 = (float)(v56 + v57) * 0.5;
        cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v84, &v81, (float *)&v82 + 1, (float **)a3 + 11, (uint64_t *)a3 + 14);
        float v61 = *((float *)a3 + 7);
        float v60 = *((float *)a3 + 8);
        float v62 = *((float *)&v82 + 1);
        if (v61 >= v60)
        {
          *((_DWORD *)a3 + 7) = HIDWORD(v82);
          float v55 = v81;
          float v56 = *(float *)&v82;
          *((float *)a3 + 1) = v81;
          *((float *)a3 + 2) = v56;
          float v58 = *((float *)a3 + 3);
          float v57 = *((float *)a3 + 4);
          float v61 = v62;
        }
        else
        {
          *((_DWORD *)a3 + 8) = HIDWORD(v82);
          float v58 = v81;
          float v57 = *(float *)&v82;
          *((float *)a3 + 3) = v81;
          *((float *)a3 + 4) = v57;
          float v55 = *((float *)a3 + 1);
          float v56 = *((float *)a3 + 2);
          float v60 = v62;
        }
        double v63 = (float)((float)((float)(v56 - v57) * (float)(v56 - v57)) + (float)((float)(v55 - v58) * (float)(v55 - v58)));
        BOOL v64 = vabdd_f64(v59, v63) < 1.00000002e-16 || v59 < v63;
        double v59 = (float)((float)((float)(v56 - v57) * (float)(v56 - v57)) + (float)((float)(v55 - v58) * (float)(v55 - v58)));
        if (v64) {
          goto LABEL_47;
        }
      }
      float v61 = *((float *)a3 + 7);
      float v60 = *((float *)a3 + 8);
LABEL_47:
      if (v61 <= v60)
      {
        if (v61 < 3.4028e38
        {
          goto LABEL_53;
        }
        *(void *)v75 = *(void *)v7;
        float v60 = *v10;
      }
      else
      {
        *((float *)a3 + 1) = v58;
        *((float *)a3 + 2) = v57;
      }
      *((float *)a3 + 7) = v60;
LABEL_53:
      ++v17;
    }
    while (v17 < *((void *)a2 + 3));
  }
  float v65 = *((float *)a3 + 7);
  if (v65 >= v70)
  {
    if (v65 >= 3.4028e38)
    {
      {
        *((_DWORD *)a3 + 8) = *((_DWORD *)a3 + 7);
        *(void *)((char *)a3 + 12) = *(void *)((char *)a3 + 4);
LABEL_66:
        cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v84, v7, v10, (float **)a3 + 8, (uint64_t *)a3 + 14);
        cv3d::cv::gess::isochart::IsoChartMesh::UpdateOptimizeResult((uint64_t)this, (uint64_t)a2, (unsigned int *)a3);
        return 1;
      }
      float v65 = *v10;
    }
    else
    {
      *((float *)a3 + 8) = v70;
      float v65 = v70;
      *((float *)a3 + 3) = v68;
      *((float *)a3 + 4) = v67;
    }
  }
  else
  {
    *((float *)a3 + 8) = v65;
    *(void *)((char *)a3 + 12) = *(void *)((char *)a3 + 4);
  }
  if (v65 < v69) {
    goto LABEL_66;
  }
  return 0;
}

void sub_24F528D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::VertexOptimizeInfo::~VertexOptimizeInfo(cv3d::cv::gess::isochart::VertexOptimizeInfo *this)
{
  v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 5);
  if (v7)
  {
    *((void *)this + 6) = v7;
    operator delete(v7);
  }
}

float anonymous namespace'::IsochartVertexToEdgeDistance2D(float32x2_t *a1, float32x2_t *a2, float *a3)
{
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(__p, 2uLL);
  float v6 = (float *)__p[0];
  float32x2_t v7 = vsub_f32(*a1, *a2);
  *(float32x2_t *)__p[0] = v7;
  float v8 = a2->f32[1];
  float v9 = *a3 - a2->f32[0];
  float v10 = a3[1] - v8;
  float v11 = (float)(v10 * v10) + (float)(v9 * v9);
  if (fabsf(v11) >= 0.00000001)
  {
    float v13 = vmlas_n_f32(vmuls_lane_f32(v10, v7, 1), v9, v7.f32[0]) / v11;
    if (v13 < 0.0) {
      float v13 = 0.0;
    }
    if (v13 > 1.0) {
      float v13 = 1.0;
    }
    float v14 = a2->f32[0] + (float)(v9 * v13);
    float v15 = v8 + (float)(v10 * v13);
    v6[2] = v14;
    v6[3] = v15;
    float v12 = (float)((float)(v15 - a1->f32[1]) * (float)(v15 - a1->f32[1]))
        + (float)((float)(v14 - a1->f32[0]) * (float)(v14 - a1->f32[0]));
  }
  else
  {
    float v12 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v7, v7).i32[1]), v7.f32[0], v7.f32[0]);
  }
  __p[1] = v6;
  operator delete(v6);
  return v12;
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch(uint64_t a1, _DWORD *a2, float *a3, float *a4, float **a5, uint64_t *a6)
{
  *a4 = 0.0;
  uint64_t v12 = *(void *)(a1 + 40);
  LODWORD(__p[0]) = *(_DWORD *)(a1 + 192);
  uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v12 + 80), (unsigned int *)__p);
  int v42 = 0;
  a5[1] = *a5;
  std::vector<float>::resize((uint64_t)a5, (a6[1] - *a6) >> 2);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  uint64_t v14 = *a6;
  if (a6[1] != *a6)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    while (1)
    {
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(void *)(a1 + 40), (unsigned int *)(v14 + 4 * v15), __p);
      uint64_t v17 = *(void *)(a1 + 40);
      unsigned int v43 = *(_DWORD *)(a1 + 196);
      uint64_t v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v17 + 56), &v43);
      long long v19 = (unsigned int *)(*a6 + 4 * v15);
      unint64_t v20 = *v19;
      uint64_t v21 = *(void *)(v18 + 40);
      if (v20 >= (*(void *)(v18 + 48) - v21) >> 2) {
        break;
      }
      unint64_t v22 = *(unsigned int *)__p[0];
      if (v22 == *a2)
      {
        unint64_t v23 = *((unsigned int *)__p[0] + 1);
        uint64_t v24 = *(void *)(v13 + 40);
        unint64_t v25 = (*(void *)(v13 + 48) - v24) >> 3;
        if (v25 <= v23) {
          goto LABEL_30;
        }
        unint64_t v26 = *((unsigned int *)__p[0] + 2);
        if (v25 <= v26) {
          goto LABEL_30;
        }
        uint64_t v27 = *(void *)(a1 + 40);
        uint64_t v28 = (float *)(v24 + 8 * v23);
        uint64_t v29 = a3;
        float v30 = (float *)(v24 + 8 * v26);
      }
      else
      {
        unint64_t v31 = *((unsigned int *)__p[0] + 1);
        uint64_t v27 = *(void *)(a1 + 40);
        uint64_t v32 = *(void *)(v13 + 40);
        unint64_t v33 = (*(void *)(v13 + 48) - v32) >> 3;
        if (v31 == *a2)
        {
          if (v33 <= v22) {
            goto LABEL_30;
          }
          unint64_t v34 = *((unsigned int *)__p[0] + 2);
          if (v33 <= v34) {
            goto LABEL_30;
          }
          uint64_t v29 = (float *)(v32 + 8 * v22);
          uint64_t v28 = a3;
          float v30 = (float *)(v32 + 8 * v34);
        }
        else
        {
          if (v33 <= v22 || v33 <= v31)
          {
LABEL_30:
            int v40 = 187;
            goto LABEL_32;
          }
          uint64_t v29 = (float *)(v32 + 8 * v22);
          float v30 = a3;
          uint64_t v28 = (float *)(v32 + 8 * v31);
        }
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalFaceGeoL2SquaredStretch(v27, v19, v29, v28, v30, (float *)(v21 + 4 * v20), (float *)&v42);
      uint64_t v35 = *a5;
      (*a5)[v15] = v36;
      uint64_t v15 = ++v16;
      uint64_t v14 = *a6;
      if (v16 >= (unint64_t)((a6[1] - *a6) >> 2)) {
        goto LABEL_18;
      }
    }
    int v40 = 182;
LABEL_32:
    __assert_rtn("operator[]", "Attribute.h", v40, "index < data_.size()");
  }
  uint64_t v35 = *a5;
LABEL_18:
  uint64_t v37 = (char *)a5[1] - (char *)v35;
  if (v37)
  {
    unint64_t v38 = v37 >> 2;
    if (v38 <= 1) {
      unint64_t v38 = 1;
    }
    float v39 = 0.0;
    while (*v35 < 3.4028e38)
    {
      float v39 = v39 + *v35++;
      if (!--v38) {
        goto LABEL_27;
      }
    }
    float v39 = 3.4028e38;
  }
  else
  {
    float v39 = 0.0;
  }
LABEL_27:
  *a4 = v39;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24F529138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float anonymous namespace'::CalculateAdjFlipFaceArea(uint64_t a1, float *a2, unsigned int **a3, unsigned int a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 == v5) {
    return 0.0;
  }
  uint64_t v8 = a1 + 104;
  float v9 = (uint64_t *)(a1 + 80);
  float v10 = 0.0;
  do
  {
    float v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, v4);
    uint64_t v12 = cv3d::cv::gess::mesh::Topology::h(v8, v11);
    uint64_t v13 = cv3d::cv::gess::mesh::Topology::h(v8, v4);
    uint64_t v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)(v13 + 8));
    uint64_t v15 = cv3d::cv::gess::mesh::Topology::h(v8, v14);
    unsigned int v23 = a4;
    uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v9, &v23);
    unint64_t v17 = *(unsigned int *)(v12 + 12);
    uint64_t v18 = *(void *)(v16 + 40);
    if (v17 >= (*(void *)(v16 + 48) - v18) >> 3) {
      cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
    }
    unsigned int v24 = a4;
    uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v9, &v24);
    unint64_t v20 = *(unsigned int *)(v15 + 12);
    uint64_t v21 = *(void *)(v19 + 40);
    if (v20 >= (*(void *)(v19 + 48) - v21) >> 3) {
      cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
    }
    float v10 = v10
        - fminf((float)((float)((float)(*(float *)(v18 + 8 * v17) - *a2) * (float)(*(float *)(v21 + 8 * v20 + 4) - a2[1]))- (float)((float)(*(float *)(v18 + 8 * v17 + 4) - a2[1]) * (float)(*(float *)(v21 + 8 * v20) - *a2)))* 0.5, 0.0);
    ++v4;
  }
  while (v4 != v5);
  return v10;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

void cv3d::cv::gess::isochart::IsoChartMesh::UpdateOptimizeResult(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v7 = *((void *)a3 + 14);
  uint64_t v6 = *((void *)a3 + 15);
  uint64_t v9 = *((void *)a3 + 17);
  uint64_t v8 = *((void *)a3 + 18);
  uint64_t v10 = *(void *)(a1 + 40);
  unsigned int v26 = *(_DWORD *)(a1 + 192);
  uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v10 + 80), &v26);
  unint64_t v12 = *a3;
  uint64_t v13 = *(void *)(v11 + 40);
  if (v12 >= (*(void *)(v11 + 48) - v13) >> 3) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  uint64_t v14 = (_DWORD *)(v13 + 8 * v12);
  _DWORD *v14 = a3[3];
  v14[1] = a3[4];
  *(_DWORD *)(*(void *)(a2 + 136) + 4 * v12) = a3[8];
  if (v6 != v7)
  {
    unint64_t v15 = (v6 - v7) >> 2;
    uint64_t v16 = (int *)*((void *)a3 + 8);
    unint64_t v17 = (unsigned int *)*((void *)a3 + 14);
    uint64_t v18 = *(void *)(a2 + 160);
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      int v19 = *v16++;
      int v20 = v19;
      unsigned int v21 = *v17++;
      *(_DWORD *)(v18 + 4 * v21) = v20;
      --v15;
    }
    while (v15);
  }
  if (v8 != v9)
  {
    uint64_t v22 = 0;
    if ((unint64_t)((v8 - v9) >> 2) <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = (v8 - v9) >> 2;
    }
    uint64_t v24 = *((void *)a3 + 17);
    do
    {
      float v25 = cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertexStretch(a1, v24 + v22, (void *)(a2 + 160));
      uint64_t v24 = *((void *)a3 + 17);
      *(float *)(*(void *)(a2 + 136) + 4 * *(unsigned int *)(v24 + v22)) = v25;
      v22 += 4;
      --v23;
    }
    while (v23);
  }
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalculateAdjustedVertexStretch(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(float **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v3) {
    return 0.0;
  }
  unint64_t v4 = v3 >> 2;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  float result = 0.0;
  while (*v2 < 3.4028e38)
  {
    float result = result + *v2++;
    if (!--v4) {
      return result;
    }
  }
  return 3.4028e38;
}

void std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    unint64_t v15 = &v13[16 * v10];
    unint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(&v14);
  }
}

void sub_24F5295C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>,std::reverse_iterator<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D8FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

void **std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_24F5298A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::LoadImageFromTextureFilePath(uint64_t a1, uint64_t a2)
{
  std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v17 = __p;
  }
  std::string::size_type v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v7 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v17;
  }
  else {
    uint64_t v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v8 != v7)
  {
    do
    {
      v8->__r_.__value_.__s.__data_[0] = __tolower(v8->__r_.__value_.__s.__data_[0]);
      uint64_t v8 = (std::string *)((char *)v8 + 1);
    }
    while (v8 != v7);
    std::string::size_type v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
    char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  if (v5 < 0) {
    std::string::size_type v4 = size;
  }
  if (v4 == 4)
  {
    long long v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if (v5 >= 0) {
      long long v9 = &v17;
    }
    if (LODWORD(v9->__r_.__value_.__l.__data_) == 1920492846)
    {
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v15 = *(std::string *)a1;
      }
      uint64_t v10 = cv3d::cv::gess::io::LoadExr(&v15, a2);
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_37;
      }
      unint64_t v11 = (std::__fs::filesystem::path *)&v15;
      goto LABEL_36;
    }
    if (LODWORD(v9->__r_.__value_.__l.__data_) == 1735290926)
    {
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v14 = *(std::string *)a1;
      }
      uint64_t v10 = cv3d::cv::gess::io::LoadJpeg(&v14, a2);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_37;
      }
      unint64_t v11 = (std::__fs::filesystem::path *)&v14;
      goto LABEL_36;
    }
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13.__pn_, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    v13.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
  }
  uint64_t v10 = cv3d::cv::gess::io::LoadJpeg(&v13, a2);
  if ((SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_37;
  }
  unint64_t v11 = &v13;
LABEL_36:
  operator delete(v11->__pn_.__r_.__value_.__l.__data_);
LABEL_37:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_24F529AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = *(void *)(a4 + 24);
  if (v7)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)v7 + 48);
    return v8();
  }
  if (*(char *)(a3 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else {
    std::string v21 = *(std::string *)(a3 + 32);
  }
  std::string::size_type v11 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  char v12 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v21.__r_.__value_.__l.__size_;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v14 = (std::string *)((char *)&v21 + HIBYTE(v21.__r_.__value_.__r.__words[2]));
  }
  else {
    std::string v14 = (std::string *)(v21.__r_.__value_.__r.__words[0] + v21.__r_.__value_.__l.__size_);
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v15 = &v21;
  }
  else {
    std::string v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if (v15 != v14)
  {
    do
    {
      v15->__r_.__value_.__s.__data_[0] = __tolower(v15->__r_.__value_.__s.__data_[0]);
      std::string v15 = (std::string *)((char *)v15 + 1);
    }
    while (v15 != v14);
    std::string::size_type v11 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
    char v12 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  if (v12 < 0) {
    std::string::size_type v11 = size;
  }
  if (v11 != 4)
  {
LABEL_24:
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v18 = *(std::string *)a1;
    }
    cv3d::cv::gess::io::SaveJpeg((uint64_t)&v18, a2);
  }
  uint64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v12 >= 0) {
    uint64_t v16 = &v21;
  }
  if (LODWORD(v16->__r_.__value_.__l.__data_) != 1920492846)
  {
    if (LODWORD(v16->__r_.__value_.__l.__data_) == 1735290926)
    {
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v19 = *(std::string *)a1;
      }
      cv3d::cv::gess::io::SavePng((uint64_t)&v19, a2);
    }
    goto LABEL_24;
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v20 = *(std::string *)a1;
  }
  BOOL v17 = cv3d::cv::gess::io::SaveExr((char *)&v20, (uint64_t)a2, a5);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_24F529D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::SCENEKIT_TANGENTIAL(uint64_t a1, int32x4_t *a2, float32x4_t *a3, float64x2_t a4, float64x2_t a5)
{
  a4.f64[0] = fabsf(*(float *)(a1 + 8));
  a5.f64[0] = 0.999;
  int8x16_t v5 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a5, a4).i64[0], 0);
  int32x4_t v6 = (int32x4_t)xmmword_24F570A10;
  int32x4_t v7 = (int32x4_t)vbslq_s8(v5, (int8x16_t)xmmword_24F5715B0, (int8x16_t)xmmword_24F570A10);
  float32x4_t v8 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 4uLL), *(int32x4_t *)a1), (float32x4_t)vzip2q_s32(vzip1q_s32(v7, (int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL)), v7)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 0xCuLL)), *(int32x4_t *)a1), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 4uLL), v7));
  float32x4_t v9 = vmulq_f32(v8, v8);
  v9.i32[3] = 0;
  float32x4_t v10 = vpaddq_f32(v9, v9);
  float32x4_t v11 = vpaddq_f32(v10, v10);
  if (v11.f32[0] > 0.0) {
    int32x4_t v6 = (int32x4_t)vdivq_f32(v8, vsqrtq_f32(v11));
  }
  *a2 = v6;
  *a3 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL), v6), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 0xCuLL)), *(int32x4_t *)a1)), (float32x4_t)vzip2q_s32(vzip1q_s32(v6, (int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL)), v6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 4uLL), *(int32x4_t *)a1));
  return 1;
}

uint64_t cv3d::cv::gess::alg::internal::PREPARE_OBJ_ORTHOGONAL_TANGENTIAL(uint64_t a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v42, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v40.i32[2] = 0;
  v40.i64[0] = 0;
  int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v40, (unsigned __int8 *)v42);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v4 == -1) {
    return 0;
  }
  LODWORD(v42[0]) = v4;
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)v42);
  std::string::basic_string[abi:ne180100]<0>(v42, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v40.i64[0] = 0;
  int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v40, (unsigned __int8 *)v42);
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v6 == -1) {
    return 0;
  }
  LODWORD(v42[0]) = v6;
  uint64_t v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)v42);
  std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::resize(a2, (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v42, 3uLL);
  if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
  {
    unint64_t v9 = 0;
    v8.i32[0] = 897988541;
    float32x4_t v35 = v8;
    do
    {
      unsigned int v41 = v9;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v41, v42);
      float32x4_t v39 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v42[0] + 1));
      float32x4_t v38 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v42[0]);
      float32x4_t v37 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v42[0] + 2));
      float32x4_t v10 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v42[0]);
      unsigned int v11 = v41;
      uint64_t v12 = *(void *)(v5 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v5 + 48) - v12) >> 2) <= v41) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      float32x4_t v36 = *v10;
      cv3d::cv::gess::math::FaceNormal(a1, v41, (float32x4_t *)&v40);
      std::string v14 = (unsigned int *)(v12 + 12 * v11);
      unint64_t v15 = v14[1];
      uint64_t v16 = *(void *)(v7 + 40);
      unint64_t v17 = (*(void *)(v7 + 48) - v16) >> 3;
      if (v17 <= v15 || (unint64_t v18 = *v14, v17 <= v18)) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      unint64_t v19 = v14[2];
      if (v17 <= v19) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      std::string v20 = (float *)(v16 + 8 * v15);
      std::string v21 = (float *)(v16 + 8 * v18);
      float v22 = v21[1];
      uint64_t v23 = (float *)(v16 + 8 * v19);
      float v24 = v20[1] - v22;
      float v25 = v23[1] - v22;
      float v26 = (float)((float)(*v20 - *v21) * v25) - (float)(v24 * (float)(*v23 - *v21));
      if (fabsf(v26) >= v35.f32[0])
      {
        int32x4_t v32 = (int32x4_t)vmulq_n_f32(vsubq_f32(vmulq_n_f32(vsubq_f32(v39, v38), v25), vmulq_n_f32(vsubq_f32(v37, v36), v24)), 1.0 / v26);
        int8x16_t v28 = v40;
        int32x4_t v31 = (int32x4_t)vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL), v32), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v40, (int32x4_t)vextq_s8(v28, v28, 0xCuLL)), (int32x4_t)v40)), (float32x4_t)vzip2q_s32(vzip1q_s32(v32, (int32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL)), v32), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v28, v28, 4uLL), (int32x4_t)v40));
      }
      else
      {
        v13.f32[0] = fabsf(*(float *)v40.i32 + -1.0);
        int32x4_t v27 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v35, v13), 0), (int8x16_t)xmmword_24F5715A0, (int8x16_t)xmmword_24F570A10);
        int8x16_t v28 = v40;
        float32x4_t v29 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v40, (int32x4_t)vextq_s8(v28, v28, 0xCuLL)), (int32x4_t)v40);
        float32x4_t v30 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v28, v28, 4uLL), (int32x4_t)v40);
        int32x4_t v31 = (int32x4_t)vmlsq_f32(vmulq_f32(v29, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL), v27)), (float32x4_t)vzip2q_s32(vzip1q_s32(v27, (int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL)), v27), v30);
        int32x4_t v32 = (int32x4_t)vmlsq_f32(vmulq_f32(v29, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL), v31)), (float32x4_t)vzip2q_s32(vzip1q_s32(v31, (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL)), v31), v30);
      }
      unint64_t v33 = (int8x16_t *)(*a2 + 48 * v41);
      *unint64_t v33 = v28;
      v33[1] = (int8x16_t)v32;
      v33[2] = (int8x16_t)v31;
      ++v9;
    }
    while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  return 1;
}

void sub_24F52A2C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 48 * a2;
  }
}

BOOL cv3d::cv::gess::alg::internal::CheckLazyLoading(cv3d::cv::gess::alg::internal *this, const Material *a2)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *((void *)this + 4);
  if (v2 == v3) {
    return 0;
  }
  LOBYTE(result) = 0;
  do
  {
    BOOL result = result || *(unsigned char *)(v2 + 4) == 0;
    v2 += 48;
  }
  while (v2 != v3);
  return result;
}

uint64_t cv3d::cv::gess::alg::internal::TransferMapKd(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v130.__r_.__value_.__l.__data_) = 0;
  int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)&v130, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v8;
  uint64_t v125 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)(a1 + 56), (unsigned int *)&__p);
  int v9 = -1;
  int v133 = -1;
  if (v8 == -1)
  {
    BOOL v10 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    BOOL v10 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a1, &v133, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v9 = v133;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v9;
  unsigned int v11 = (uint64_t *)(a1 + 80);
  uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)(a1 + 80), (unsigned int *)&__p);
  uint64_t v124 = *(void *)(v12 + 40);
  if (*(void *)(v12 + 48) == v124) {
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  }
  if (!v10)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = -1;
    uint64_t v128 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&__p);
LABEL_16:
    int v15 = 0;
    int v14 = -1;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v130.__r_.__value_.__r.__words[1]) = 0;
  v130.__r_.__value_.__r.__words[0] = 0;
  int v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v130, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v13;
  uint64_t v128 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&__p);
  if (v13 == -1) {
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v130.__r_.__value_.__r.__words[0] = 0;
  int v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v130, (unsigned __int8 *)&__p);
  int v15 = v14 != -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_17:
  LODWORD(__p.__r_.__value_.__l.__data_) = v14;
  uint64_t v127 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&__p);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  if (v16 == v17)
  {
LABEL_24:
    unsigned int v20 = *(_DWORD *)(a4 + 8);
    if (v20)
    {
      unsigned int v21 = 0;
      unsigned int v22 = *(_DWORD *)(a4 + 4);
      unsigned int v23 = v22;
      do
      {
        if (v23)
        {
          unsigned int v24 = 0;
          do
          {
            if (*(unsigned char *)(*(void *)(a4 + 16) + *(_DWORD *)(a4 + 12) * (v24 + v23 * v21)))
            {
              uint64_t v25 = *(void *)(a5 + 16);
              uint64_t v26 = (v24 + *(_DWORD *)(a5 + 4) * v21) * *(_DWORD *)(a5 + 12);
              unint64_t v27 = *(unsigned int *)(v25 + 16 * v26 + 4);
              LOWORD(v132) = 0;
              uint64_t v28 = *(void *)(v125 + 40);
              if (v27 >= (*(void *)(v125 + 48) - v28) >> 1) {
                cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
              }
              LOWORD(v132) = *(_WORD *)(v28 + 2 * v27);
              float32x4_t v29 = std::map<unsigned short,std::string>::at(v124, (unsigned __int16 *)&v132);
              uint64_t v30 = *a2
                  + 48 * *(unsigned __int16 *)std::map<std::string,std::string>::at((uint64_t)(a2 + 6), (void **)v29)
                  + 24;
              LODWORD(v130.__r_.__value_.__l.__data_) = 1;
              uint64_t v31 = a2[3]
                  + 48
                  * *(unsigned __int16 *)std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(v30, (int *)&v130);
              uint64_t v32 = *(void *)(v31 + 8);
              unint64_t v33 = *(std::__shared_weak_count **)(v31 + 16);
              if (v33) {
                atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v34 = *(void *)(v128 + 40);
              if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v128 + 48) - v34) >> 2) <= v27) {
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              }
              float32x4_t v35 = (unsigned int *)(v34 + 12 * v27);
              unint64_t v36 = *v35;
              uint64_t v37 = *(void *)(v127 + 40);
              unint64_t v38 = (*(void *)(v127 + 48) - v37) >> 3;
              if (v38 <= v36) {
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              }
              unint64_t v39 = v35[1];
              if (v38 <= v39) {
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              }
              unint64_t v40 = v35[2];
              if (v38 <= v40) {
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              }
              if (v15)
              {
                uint64_t v41 = v25 + 16 * v26;
                float v42 = *(float *)(v41 + 8);
                float v43 = *(float *)(v41 + 12);
                float v44 = (float *)(v37 + 8 * v36);
                float v45 = (float *)(v37 + 8 * v39);
                float v46 = *v45;
                float v47 = (float)(1.0 - v42) - v43;
                float v48 = (float *)(v37 + 8 * v40);
                float v49 = *v48;
                float v50 = (float)((float)(v42 * v44[1]) + (float)(v43 * v45[1])) + (float)(v47 * v48[1]);
                unsigned int v52 = *(_DWORD *)(v32 + 4);
                unsigned int v51 = *(_DWORD *)(v32 + 8);
                double v53 = (float)((float)(1.0 - v50) * (float)v51) + -0.5;
                if (v53 < 0.0) {
                  double v53 = 0.0;
                }
                unsigned int v54 = v51 - 1;
                if (v53 > (double)v54) {
                  double v53 = (double)v54;
                }
                double v55 = (float)((float)((float)((float)(v42 * *v44) + (float)(v43 * v46)) + (float)(v47 * v49))
                            * (float)v52)
                    + -0.5;
                if (v55 < 0.0) {
                  double v55 = 0.0;
                }
                if (v55 > (double)(v52 - 1)) {
                  double v55 = (double)(v52 - 1);
                }
                float v56 = v55;
                float v57 = v53;
                LOBYTE(v15) = cv3d::cv::gess::util::ImageT<float>::at(v32, (float *)&__p, v56, v57);
              }
              else
              {
                LOBYTE(v15) = 0;
              }
              uint64_t v58 = 0;
              uint64_t v59 = *(void *)(a3 + 16) + 4 * *(_DWORD *)(a3 + 12) * (v24 + v21 * *(_DWORD *)(a3 + 4));
              do
              {
                *(_DWORD *)(v59 + v58) = *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + v58);
                v58 += 4;
              }
              while (v58 != 12);
              if (v33) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v33);
              }
              unsigned int v22 = *(_DWORD *)(a4 + 4);
            }
            ++v24;
            unsigned int v23 = v22;
          }
          while (v24 < v22);
          unsigned int v20 = *(_DWORD *)(a4 + 8);
          unsigned int v23 = v22;
        }
        ++v21;
      }
      while (v21 < v20);
    }
  }
  else
  {
    BOOL v18 = 0;
    do
    {
      while (v18)
      {
        v16 += 48;
        BOOL v18 = 1;
        if (v16 == v17) {
          goto LABEL_56;
        }
      }
      int v19 = *(unsigned __int8 *)(v16 + 4);
      BOOL v18 = *(unsigned char *)(v16 + 4) == 0;
      v16 += 48;
    }
    while (v16 != v17);
    if (v19) {
      goto LABEL_24;
    }
LABEL_56:
    int v60 = -1;
    int v132 = -1;
    if (v15)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      char ImageFromTextureFilePath = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v132, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v60 = v132;
    }
    else
    {
      char ImageFromTextureFilePath = 0;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = v60;
    uint64_t v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v11, (unsigned int *)&__p);
    unsigned __int16 v63 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 16))(v62);
    unsigned __int16 v131 = 0;
    if (v63)
    {
      unsigned __int16 v64 = 0;
      uint64_t v65 = v125;
      do
      {
        int v66 = *(_DWORD *)(a4 + 8);
        if (v66)
        {
          unsigned int v67 = 0;
          unsigned int v68 = 0;
          int v69 = 0;
          int v70 = *(_DWORD *)(a4 + 4);
          int v71 = *(_DWORD *)(a4 + 12);
          int v72 = *(_DWORD *)(a5 + 12);
          uint64_t v73 = *(void *)(v65 + 40);
          while (!v70)
          {
LABEL_71:
            ++v69;
            v68 += *(_DWORD *)(a5 + 4) * v72;
            v67 += v70 * v71;
            if (v69 == v66) {
              goto LABEL_115;
            }
          }
          uint64_t v74 = *(unsigned int *)(a4 + 4);
          unsigned int v75 = v67;
          unsigned int v76 = v68;
          while (1)
          {
            if (*(unsigned char *)(*(void *)(a4 + 16) + v75))
            {
              unint64_t v77 = *(unsigned int *)(*(void *)(a5 + 16) + 16 * v76 + 4);
              if ((*(void *)(v65 + 48) - v73) >> 1 <= v77) {
                cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
              }
              if (*(unsigned __int16 *)(v73 + 2 * v77) == v64) {
                break;
              }
            }
            v76 += v72;
            v75 += v71;
            if (!--v74) {
              goto LABEL_71;
            }
          }
          v78 = std::map<unsigned short,std::string>::at(v124, &v131);
          uint64_t v79 = *a2
              + 48 * *(unsigned __int16 *)std::map<std::string,std::string>::at((uint64_t)(a2 + 6), (void **)v78)
              + 24;
          LODWORD(__p.__r_.__value_.__l.__data_) = 1;
          std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v80 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(v79, (int *)&__p);
          uint64_t v81 = a2[3];
          if (*(unsigned char *)(v81 + 48 * *(unsigned __int16 *)v80 + 4))
          {
            uint64_t v82 = v81 + 48 * *(unsigned __int16 *)v80;
            uint64_t v84 = *(void *)(v82 + 8);
            v83 = *(std::__shared_weak_count **)(v82 + 16);
            uint64_t v65 = v125;
            if (v83) {
              atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v85 = v81 + 48 * *(unsigned __int16 *)v80;
            uint64_t v86 = (const std::string::value_type **)(v85 + 24);
            uint64_t v65 = v125;
            if (*(char *)(v85 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *v86, *(void *)(v81 + 48 * *(unsigned __int16 *)v80 + 32));
            }
            else
            {
              long long v87 = *(_OWORD *)v86;
              __p.__r_.__value_.__r.__words[2] = *(void *)(v85 + 40);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v87;
            }
            v83 = (std::__shared_weak_count *)operator new(0x30uLL);
            v83->__shared_owners_ = 0;
            v83->__shared_weak_owners_ = 0;
            v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D7EB0;
            v83[1].__vftable = 0;
            uint64_t v84 = (uint64_t)&v83[1];
            v83[1].__shared_owners_ = 0;
            v83[1].__shared_weak_owners_ = 0;
            if (ImageFromTextureFilePath)
            {
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v130, (char *)&__p);
              char ImageFromTextureFilePath = cv3d::cv::gess::alg::internal::LoadImageFromTextureFilePath((uint64_t)&v130, v84);
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v130.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              char ImageFromTextureFilePath = 0;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          unsigned int v88 = *(_DWORD *)(a4 + 8);
          if (v88)
          {
            unsigned int v89 = 0;
            unsigned int v90 = *(_DWORD *)(a4 + 4);
            unsigned int v91 = v90;
            do
            {
              if (v91)
              {
                unsigned int v92 = 0;
                do
                {
                  if (*(unsigned char *)(*(void *)(a4 + 16) + *(_DWORD *)(a4 + 12) * (v92 + v91 * v89)))
                  {
                    uint64_t v93 = *(void *)(a5 + 16);
                    uint64_t v94 = (v92 + *(_DWORD *)(a5 + 4) * v89) * *(_DWORD *)(a5 + 12);
                    unint64_t v95 = *(unsigned int *)(v93 + 16 * v94 + 4);
                    uint64_t v96 = *(void *)(v65 + 40);
                    if (v95 >= (*(void *)(v65 + 48) - v96) >> 1) {
                      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                    }
                    if (*(unsigned __int16 *)(v96 + 2 * v95) == v131)
                    {
                      uint64_t v97 = *(void *)(v128 + 40);
                      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v128 + 48) - v97) >> 2) <= v95) {
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      }
                      v98 = (unsigned int *)(v97 + 12 * v95);
                      unint64_t v99 = *v98;
                      uint64_t v100 = *(void *)(v127 + 40);
                      unint64_t v101 = (*(void *)(v127 + 48) - v100) >> 3;
                      if (v101 <= v99) {
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      }
                      unint64_t v102 = v98[1];
                      if (v101 <= v102) {
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      }
                      unint64_t v103 = v98[2];
                      if (v101 <= v103) {
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      }
                      if (ImageFromTextureFilePath)
                      {
                        uint64_t v104 = v93 + 16 * v94;
                        float v105 = *(float *)(v104 + 8);
                        float v106 = *(float *)(v104 + 12);
                        v107 = (float *)(v100 + 8 * v99);
                        v108 = (float *)(v100 + 8 * v102);
                        float v109 = *v108;
                        float v110 = (float)(1.0 - v105) - v106;
                        v111 = (float *)(v100 + 8 * v103);
                        float v112 = *v111;
                        float v113 = (float)((float)(v105 * v107[1]) + (float)(v106 * v108[1])) + (float)(v110 * v111[1]);
                        unsigned int v115 = *(_DWORD *)(v84 + 4);
                        unsigned int v114 = *(_DWORD *)(v84 + 8);
                        double v116 = (float)((float)(1.0 - v113) * (float)v114) + -0.5;
                        if (v116 < 0.0) {
                          double v116 = 0.0;
                        }
                        unsigned int v117 = v114 - 1;
                        if (v116 > (double)v117) {
                          double v116 = (double)v117;
                        }
                        double v118 = (float)((float)((float)((float)(v105 * *v107) + (float)(v106 * v109))
                                             + (float)(v110 * v112))
                                     * (float)v115)
                             + -0.5;
                        if (v118 < 0.0) {
                          double v118 = 0.0;
                        }
                        if (v118 > (double)(v115 - 1)) {
                          double v118 = (double)(v115 - 1);
                        }
                        float v119 = v118;
                        float v120 = v116;
                        char ImageFromTextureFilePath = cv3d::cv::gess::util::ImageT<float>::at(v84, (float *)&__p, v119, v120);
                      }
                      else
                      {
                        char ImageFromTextureFilePath = 0;
                      }
                      uint64_t v121 = 0;
                      uint64_t v122 = *(void *)(a3 + 16) + 4 * *(_DWORD *)(a3 + 12) * (v92 + v89 * *(_DWORD *)(a3 + 4));
                      do
                      {
                        *(_DWORD *)(v122 + v121) = *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + v121);
                        v121 += 4;
                      }
                      while (v121 != 12);
                      unsigned int v90 = *(_DWORD *)(a4 + 4);
                    }
                  }
                  ++v92;
                  unsigned int v91 = v90;
                }
                while (v92 < v90);
                unsigned int v88 = *(_DWORD *)(a4 + 8);
                unsigned int v91 = v90;
              }
              ++v89;
            }
            while (v89 < v88);
          }
          if (v83) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v83);
          }
        }
LABEL_115:
        unsigned __int16 v64 = ++v131;
      }
      while (v131 < v63);
    }
    LOBYTE(v15) = ImageFromTextureFilePath & 1;
  }
  return v15 & 1;
}

void sub_24F52AEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

uint64_t cv3d::cv::gess::util::ImageT<float>::at(uint64_t a1, float *a2, float a3, float a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if ((int)v4 >= 1)
  {
    int v6 = *(_DWORD *)(a1 + 4);
    int v5 = *(_DWORD *)(a1 + 8);
    int v7 = (int)vcvtms_s32_f32(a3) % v6;
    int v8 = (int)vcvtms_s32_f32(a4) % v5;
    float v9 = a3 - (float)v7;
    float v10 = a4 - (float)v8;
    int v11 = (int)vcvtps_s32_f32(a4) % v5;
    int v12 = (int)vcvtps_s32_f32(a3) % v6;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = v8 * v6;
    int v15 = (float *)(v13 + 4 * ((v14 + v7) * v4));
    int v16 = v11 * v6;
    uint64_t v17 = (float *)(v13 + 4 * ((v16 + v7) * v4));
    BOOL v18 = (float *)(v13 + 4 * ((v14 + v12) * v4));
    int v19 = (float *)(v13 + 4 * ((v16 + v12) * v4));
    do
    {
      float v20 = *v15++;
      float v21 = v20;
      float v22 = *v17++;
      float v23 = v22;
      float v24 = *v18++;
      float v25 = v24;
      float v26 = *v19++;
      *a2++ = (float)(v9 * (float)((float)(v10 * v26) + (float)((float)(1.0 - v10) * v25)))
            + (float)((float)(1.0 - v9) * (float)((float)(v10 * v23) + (float)((float)(1.0 - v10) * v21)));
      --v4;
    }
    while (v4);
  }
  return 1;
}

BOOL cv3d::cv::gess::alg::internal::TransferMapNorm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  uint64_t v56 = a1;
  int v14 = (uint64_t *)(a1 + 8);
  v59[0] = 0;
  v59[1] = 0;
  int v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v59, (unsigned __int8 *)__p);
  if (v58 < 0) {
    operator delete(__p[0]);
  }
  int v53 = v15;
  LODWORD(__p[0]) = v15;
  uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v14, (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  unsigned int v17 = *(_DWORD *)(a4 + 8);
  if (v17)
  {
    unsigned int v18 = 0;
    unsigned int v19 = *(_DWORD *)(a4 + 4);
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v54 = _Q0;
    unsigned int v25 = v19;
    do
    {
      if (v25)
      {
        unsigned int v26 = 0;
        do
        {
          if (*(unsigned char *)(*(void *)(a4 + 16) + *(_DWORD *)(a4 + 12) * (v26 + v18 * v25)))
          {
            uint64_t v27 = *(void *)(a5 + 16);
            uint64_t v28 = (v26 + v18 * *(_DWORD *)(a5 + 4)) * *(_DWORD *)(a5 + 12);
            LODWORD(v59[0]) = *(_DWORD *)(v27 + 16 * v28 + 4);
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v56, (unsigned int *)v59, __p);
            unint64_t v29 = *(unsigned int *)__p[0];
            uint64_t v30 = *(void *)(v16 + 40);
            unint64_t v31 = (*(void *)(v16 + 48) - v30) >> 4;
            if (v31 <= v29) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            unint64_t v32 = *((unsigned int *)__p[0] + 1);
            if (v31 <= v32) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            unint64_t v33 = *((unsigned int *)__p[0] + 2);
            if (v31 <= v33) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            float32x4_t v34 = *(float32x4_t *)(*a8
                                 + 48
                                 * *(unsigned int *)(*(void *)(a7 + 16)
                                                   + 4 * (v26 + v18 * *(_DWORD *)(a7 + 4)) * *(_DWORD *)(a7 + 12))
                                 + 32);
            float32x4_t v35 = *(float32x4_t *)(*(void *)(a6 + 16) + 16
                                                        * (v26 + v18 * *(_DWORD *)(a6 + 4))
                                                        * *(_DWORD *)(a6 + 12));
            float32x4_t v36 = vmulq_f32(v34, v35);
            v36.i32[3] = 0;
            float32x4_t v37 = vsubq_f32(v34, vmulq_n_f32(v35, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36))));
            float32x4_t v38 = vmulq_f32(v37, v37);
            v38.i32[3] = 0;
            float32x4_t v39 = vpaddq_f32(v38, v38);
            float32x4_t v40 = vpaddq_f32(v39, v39);
            float32x4_t v41 = (float32x4_t)xmmword_24F570A10;
            if (v40.f32[0] > 0.0) {
              float32x4_t v41 = vdivq_f32(v37, vsqrtq_f32(v40));
            }
            uint64_t v42 = v27 + 16 * v28;
            float32x4_t v43 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v30 + 16 * v33), (float)(1.0 - *(float *)(v42 + 8)) - *(float *)(v42 + 12)), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v30 + 16 * v29), *(float *)(v42 + 8)), vmulq_n_f32(*(float32x4_t *)(v30 + 16 * v32), *(float *)(v42 + 12))));
            float32x4_t v44 = vmulq_f32(v43, v43);
            v44.i32[3] = 0;
            v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
            v44.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v44.f32));
            float32x4_t v45 = vdivq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0));
            float32x4_t v46 = vmulq_f32(v45, vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), (int32x4_t)v35), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v41, (int32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL)), (int32x4_t)v41)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v35, (int32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL)), (int32x4_t)v35), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL), (int32x4_t)v41)));
            v46.i32[3] = 0;
            float32x4_t v47 = vmulq_f32(v45, v41);
            v47.i32[3] = 0;
            float32x4_t v48 = vmulq_f32(v45, v35);
            v48.i32[3] = 0;
            v45.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46))));
            v45.i64[1] = COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)));
            float32x4_t v49 = vmulq_f32(v45, v45);
            v49.i32[3] = 0;
            v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
            v49.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v49.f32));
            v47.i64[0] = 0x3F0000003F000000;
            v47.i64[1] = 0x3F0000003F000000;
            float32x4_t v50 = vmulq_f32(vaddq_f32(vdivq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0)), v54), v47);
            uint64_t v51 = *(void *)(a3 + 16) + 4 * (v26 + v18 * *(_DWORD *)(a3 + 4)) * *(_DWORD *)(a3 + 12);
            *(_DWORD *)(v51 + 8) = v50.i32[2];
            *(void *)uint64_t v51 = v50.i64[0];
            unsigned int v19 = *(_DWORD *)(a4 + 4);
          }
          ++v26;
          unsigned int v25 = v19;
        }
        while (v26 < v19);
        unsigned int v17 = *(_DWORD *)(a4 + 8);
        unsigned int v25 = v19;
      }
      ++v18;
    }
    while (v18 < v17);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v53 != -1;
}

void sub_24F52B3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::TransferMapNormSCENEKIT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  uint64_t v55 = a1;
  v58[0] = 0;
  v58[1] = 0;
  int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v58, (unsigned __int8 *)__p);
  if (v57 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v10;
  uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13)
  {
    unsigned int v14 = 0;
    unsigned int v15 = *(_DWORD *)(a3 + 4);
    v12.f64[0] = 0.999;
    float64x2_t v53 = v12;
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v54 = _Q0;
    unsigned int v21 = v15;
    do
    {
      if (v21)
      {
        unsigned int v22 = 0;
        do
        {
          if (*(unsigned char *)(*(void *)(a3 + 16) + *(_DWORD *)(a3 + 12) * (v22 + v14 * v21)))
          {
            uint64_t v23 = *(void *)(a4 + 16);
            uint64_t v24 = (v22 + v14 * *(_DWORD *)(a4 + 4)) * *(_DWORD *)(a4 + 12);
            LODWORD(v58[0]) = *(_DWORD *)(v23 + 16 * v24 + 4);
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v55, (unsigned int *)v58, __p);
            unint64_t v26 = *(unsigned int *)__p[0];
            uint64_t v27 = *(void *)(v11 + 40);
            unint64_t v28 = (*(void *)(v11 + 48) - v27) >> 4;
            if (v28 <= v26) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            unint64_t v29 = *((unsigned int *)__p[0] + 1);
            if (v28 <= v29) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            unint64_t v30 = *((unsigned int *)__p[0] + 2);
            if (v28 <= v30) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            uint64_t v31 = *(void *)(a5 + 16) + 16 * (v22 + v14 * *(_DWORD *)(a5 + 4)) * *(_DWORD *)(a5 + 12);
            if (v10 == -1)
            {
              float32x4_t v33 = *(float32x4_t *)v31;
              float32x4_t v41 = 0uLL;
              float32x4_t v40 = 0uLL;
            }
            else
            {
              v25.f64[0] = fabsf(*(float *)(v31 + 8));
              int8x16_t v32 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v53, v25).i64[0], 0), (int8x16_t)xmmword_24F5715B0, (int8x16_t)xmmword_24F570A10);
              float32x4_t v33 = *(float32x4_t *)v31;
              float32x4_t v34 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL), *(int32x4_t *)v31);
              float32x4_t v35 = (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)v31, (int32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL)), *(int32x4_t *)v31);
              float32x4_t v36 = vmlsq_f32(vmulq_f32(v34, (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v32, (int32x4_t)vextq_s8(v32, v32, 0xCuLL)), (int32x4_t)v32)), v35, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v32, v32, 4uLL), (int32x4_t)v32));
              float32x4_t v37 = vmulq_f32(v36, v36);
              v37.i32[3] = 0;
              float32x4_t v38 = vpaddq_f32(v37, v37);
              float32x4_t v39 = vpaddq_f32(v38, v38);
              float32x4_t v40 = (float32x4_t)xmmword_24F570A10;
              if (v39.f32[0] > 0.0) {
                float32x4_t v40 = vdivq_f32(v36, vsqrtq_f32(v39));
              }
              float32x4_t v41 = vmlsq_f32(vmulq_f32(v35, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL), (int32x4_t)v40)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v40, (int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL)), (int32x4_t)v40), v34);
            }
            uint64_t v42 = v23 + 16 * v24;
            float32x4_t v43 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + 16 * v30), (float)(1.0 - *(float *)(v42 + 8)) - *(float *)(v42 + 12)), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + 16 * v26), *(float *)(v42 + 8)), vmulq_n_f32(*(float32x4_t *)(v27 + 16 * v29), *(float *)(v42 + 12))));
            float32x4_t v44 = vmulq_f32(v43, v43);
            v44.i32[3] = 0;
            v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
            v44.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v44.f32));
            float32x4_t v45 = vdivq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0));
            float32x4_t v46 = vmulq_f32(v45, v40);
            v46.i32[3] = 0;
            float32x4_t v47 = vmulq_f32(v45, v41);
            v47.i32[3] = 0;
            float32x4_t v48 = vmulq_f32(v45, v33);
            v48.i32[3] = 0;
            v45.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46))));
            v45.i64[1] = COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)));
            float32x4_t v49 = vmulq_f32(v45, v45);
            v49.i32[3] = 0;
            v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
            v49.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v49.f32));
            v46.i64[0] = 0x3F0000003F000000;
            v46.i64[1] = 0x3F0000003F000000;
            float32x4_t v50 = vmulq_f32(vaddq_f32(vdivq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0)), v54), v46);
            uint64_t v51 = *(void *)(a2 + 16) + 4 * (v22 + v14 * *(_DWORD *)(a2 + 4)) * *(_DWORD *)(a2 + 12);
            *(_DWORD *)(v51 + 8) = v50.i32[2];
            *(void *)uint64_t v51 = v50.i64[0];
            unsigned int v15 = *(_DWORD *)(a3 + 4);
          }
          ++v22;
          unsigned int v21 = v15;
        }
        while (v22 < v15);
        unsigned int v13 = *(_DWORD *)(a3 + 8);
        unsigned int v21 = v15;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10 != -1;
}

void sub_24F52B810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::TransferMapNormObj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  float32x4_t v33 = 0uLL;
  int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v33, (unsigned __int8 *)__p);
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  int v29 = v8;
  LODWORD(__p[0]) = v8;
  uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = *(_DWORD *)(a3 + 4);
    unsigned int v13 = v12;
    do
    {
      if (v13)
      {
        unsigned int v14 = 0;
        do
        {
          if (*(unsigned char *)(*(void *)(a3 + 16) + *(_DWORD *)(a3 + 12) * (v14 + v13 * v11)))
          {
            uint64_t v15 = *(void *)(a4 + 16);
            uint64_t v16 = (v14 + *(_DWORD *)(a4 + 4) * v11) * *(_DWORD *)(a4 + 12);
            unsigned int v30 = *(_DWORD *)(v15 + 16 * v16 + 4);
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v30, __p);
            unint64_t v17 = *(unsigned int *)__p[0];
            uint64_t v18 = *(void *)(v9 + 40);
            unint64_t v19 = (*(void *)(v9 + 48) - v18) >> 4;
            if (v19 <= v17) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            unint64_t v20 = *((unsigned int *)__p[0] + 1);
            if (v19 <= v20) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            unint64_t v21 = *((unsigned int *)__p[0] + 2);
            if (v19 <= v21) {
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            }
            uint64_t v22 = 0;
            uint64_t v23 = v15 + 16 * v16;
            float32x4_t v24 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v18 + 16 * v21), (float)(1.0 - *(float *)(v23 + 8)) - *(float *)(v23 + 12)), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v18 + 16 * v17), *(float *)(v23 + 8)), vmulq_n_f32(*(float32x4_t *)(v18 + 16 * v20), *(float *)(v23 + 12))));
            float32x4_t v25 = vmulq_f32(v24, v24);
            v25.i32[3] = 0;
            v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
            v25.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v25.f32));
            float32x4_t v33 = vdivq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0));
            uint64_t v26 = *(void *)(a2 + 16) + 4 * *(_DWORD *)(a2 + 12) * (v14 + v11 * *(_DWORD *)(a2 + 4));
            do
            {
              float v27 = (v33.f32[v22] + 1.0) * 0.5;
              *(float *)(v26 + v22 * 4) = v27;
              ++v22;
            }
            while (v22 != 3);
            unsigned int v12 = *(_DWORD *)(a3 + 4);
          }
          ++v14;
          unsigned int v13 = v12;
        }
        while (v14 < v12);
        unsigned int v10 = *(_DWORD *)(a3 + 8);
        unsigned int v13 = v12;
      }
      ++v11;
    }
    while (v11 < v10);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v29 != -1;
}

void sub_24F52BAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::TransferMapDisp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5 = *(_DWORD *)(a2 + 8);
  if (!v5) {
    goto LABEL_18;
  }
  int v6 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 4);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 12);
  char v10 = 1;
  float v11 = -3.4028e38;
  float v12 = 3.4028e38;
  do
  {
    if (v7)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(a3 + 16);
      int v15 = *(_DWORD *)(a3 + 4) * v6;
      int v16 = *(_DWORD *)(a3 + 12);
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      unsigned int v19 = *(_DWORD *)(a1 + 4) * v18 * v6;
      do
      {
        if (*(unsigned char *)(v8 + (v9 * (v7 * v6 + v13))))
        {
          unint64_t v20 = (_DWORD *)(v14 + 16 * ((v15 + v13) * v16));
          if (v18)
          {
            unint64_t v21 = (_DWORD *)(v17 + 4 * v19);
            uint64_t v22 = v18;
            do
            {
              *v21++ = *v20;
              --v22;
            }
            while (v22);
          }
          if (*(float *)v20 >= v11) {
            float v11 = *(float *)v20;
          }
          if (v12 >= *(float *)v20) {
            float v12 = *(float *)v20;
          }
          BOOL v23 = (v10 & 1) == 0;
          char v10 = 0;
          if (!v23)
          {
            float v12 = *(float *)v20;
            float v11 = *(float *)v20;
          }
        }
        ++v13;
        v19 += v18;
      }
      while (v13 != v7);
    }
    ++v6;
  }
  while (v6 != v5);
  if ((v10 & 1) == 0)
  {
    float v26 = -v12;
    if (v11 >= (float)-v12) {
      float v26 = v11;
    }
    if (v26 > 0.0)
    {
      uint64_t v27 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
      if (v27)
      {
        unint64_t v28 = *(float **)(a1 + 16);
        do
        {
          *unint64_t v28 = *v28 + 0.5;
          ++v28;
          --v27;
        }
        while (v27);
      }
    }
    if (a5)
    {
      double v29 = v12;
      if (*(double *)(a4 + 336) < v29) {
        double v29 = *(double *)(a4 + 336);
      }
      double v30 = v11;
      if (*(double *)(a4 + 344) > v30) {
        double v30 = *(double *)(a4 + 344);
      }
      *(double *)(a4 + 336) = v29;
      *(double *)(a4 + 344) = v30;
    }
  }
  else
  {
LABEL_18:
    uint64_t v24 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
    if (v24)
    {
      float32x4_t v25 = *(float **)(a1 + 16);
      do
      {
        float *v25 = *v25 + 0.5;
        ++v25;
        --v24;
      }
      while (v24);
    }
    char v10 = 1;
  }
  return (v10 & 1) == 0;
}

BOOL cv3d::cv::gess::alg::internal::GetProjectionIntersections(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, float32_t a8)
{
  std::string::basic_string[abi:ne180100]<0>(v94, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  unsigned int v92 = 0;
  uint64_t v93 = 0;
  int v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v92, (unsigned __int8 *)v94);
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  LODWORD(v94[0]) = v15;
  uint64_t v77 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v94);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v94, 3uLL);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v92, 0x40000uLL);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v90, 0x40000uLL);
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(v89, 0xAAAAAAAAAAAAAAABLL * ((v93 - v92) >> 4));
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((v91 - v90) >> 4));
  uint64_t v87 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a3, (double *)&v87);
  uint64_t v86 = 0;
  std::vector<unsigned int>::vector(&v85, 0x80000uLL);
  unsigned int v16 = *(_DWORD *)(a2 + 8);
  if (!v16)
  {
    BOOL v56 = 1;
    goto LABEL_81;
  }
  unsigned int v75 = a3;
  unsigned int v17 = 0;
  unint64_t v18 = 0;
  unsigned int v19 = *(_DWORD *)(a2 + 4);
  unsigned int v20 = v19;
  BOOL v76 = 1;
  do
  {
    if (v20)
    {
      unsigned int v21 = 0;
      do
      {
        if (*(unsigned char *)(*(void *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v21 + v20 * v17)))
        {
          unsigned int v84 = *(_DWORD *)(*(void *)(a7 + 16) + 4 * (v21 + *(_DWORD *)(a7 + 4) * v17) * *(_DWORD *)(a7 + 12));
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v84, v94);
          uint64_t v22 = (float *)(*(void *)(a6 + 16) + 16 * (v21 + *(_DWORD *)(a6 + 4) * v17) * *(_DWORD *)(a6 + 12));
          float v82 = *v22;
          float v81 = v22[1];
          float v83 = v22[2];
          float32x4_t v80 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v94[0]);
          float32x4_t v79 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v94[0] + 1));
          BOOL v23 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v94[0] + 2));
          unint64_t v24 = *(unsigned int *)v94[0];
          uint64_t v25 = *(void *)(v77 + 40);
          unint64_t v26 = (*(void *)(v77 + 48) - v25) >> 4;
          if (v26 <= v24) {
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          unint64_t v27 = *((unsigned int *)v94[0] + 1);
          if (v26 <= v27) {
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          unint64_t v28 = *((unsigned int *)v94[0] + 2);
          if (v26 <= v28) {
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          float32x4_t v29 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v28), v83), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v27), v81), vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v24), v82)));
          float32x4_t v30 = vmulq_f32(v29, v29);
          v30.i32[3] = 0;
          float32x4_t v31 = vpaddq_f32(v30, v30);
          float32x4_t v32 = vpaddq_f32(v31, v31);
          float32x4_t v33 = (float32x4_t)xmmword_24F570A10;
          if (v32.f32[0] > 0.0) {
            float32x4_t v33 = vdivq_f32(v29, vsqrtq_f32(v32));
          }
          float32x4_t v34 = vaddq_f32(vaddq_f32(vmulq_n_f32(v80, v82), vmulq_n_f32(v79, v81)), vmulq_n_f32(*v23, v83));
          float32x4_t v35 = (float32x4_t *)&v92[48 * v18];
          float32x4_t *v35 = v34;
          v35[1] = v33;
          v35[2].i32[0] = 0;
          v35[2].f32[1] = a8;
          float32x4_t v36 = (float32x4_t *)&v90[48 * v18];
          *float32x4_t v36 = v34;
          v36[1] = vnegq_f32(v33);
          v36[2].i32[0] = 0;
          v36[2].f32[1] = a8;
          float32x4_t v37 = &v85.__begin_[2 * v18];
          unsigned int *v37 = v21;
          v37[1] = v17;
          if (++v18 == 0x40000)
          {
            uint64_t v86 = 2;
            cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
            BOOL v38 = v76 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v92, v89);
            LODWORD(v86) = 1;
            cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
            BOOL v76 = v38 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v90, __p);
            uint64_t v39 = 0;
            uint64_t v40 = 1;
            uint64_t v41 = 12;
            while (1)
            {
              unsigned int v42 = v85.__begin_[v40 - 1];
              unsigned int v43 = v85.__begin_[v40];
              float32x4_t v44 = (char *)v89[0];
              float32x4_t v45 = (char *)v89[0] + v41;
              float v46 = *(float *)((char *)v89[0] + v41 - 12);
              if (v46 == -1.0)
              {
                unsigned int v52 = (char *)__p[0] + v41 - 12;
                float v49 = *(float *)v52;
                if (*(float *)v52 != -1.0 && *(_DWORD *)((char *)__p[0] + v41 - 8) < a4) {
                  goto LABEL_33;
                }
              }
              else
              {
                unsigned int v47 = *((_DWORD *)v45 - 2);
                float32x4_t v48 = (char *)__p[0] + v41 - 12;
                float v49 = *(float *)v48;
                if (*(float *)v48 == -1.0)
                {
                  if (v47 < a4)
                  {
LABEL_36:
                    uint64_t v53 = *(void *)(a5 + 16) + 16 * (v42 + *(_DWORD *)(a5 + 4) * v43) * *(_DWORD *)(a5 + 12);
                    *(void *)uint64_t v53 = *(void *)(v45 - 12);
                    *(_DWORD *)(v53 + 8) = *(_DWORD *)&v44[v41 - 4];
                    int v54 = *(_DWORD *)&v44[v41];
                    goto LABEL_41;
                  }
                }
                else
                {
                  unsigned int v50 = *(_DWORD *)((char *)__p[0] + v41 - 8);
                  if (v47 < a4 && v50 < a4)
                  {
                    if (v46 >= v49) {
                      *(float *)float32x4_t v48 = -v49;
                    }
                    else {
                      float32x4_t v48 = (char *)v89[0] + 16 * v39;
                    }
                    uint64_t v53 = *(void *)(a5 + 16) + 16 * (v42 + *(_DWORD *)(a5 + 4) * v43) * *(_DWORD *)(a5 + 12);
                    *(void *)uint64_t v53 = *(void *)v48;
                    *(_DWORD *)(v53 + 8) = *((_DWORD *)v48 + 2);
                    int v54 = *((_DWORD *)v48 + 3);
                    goto LABEL_41;
                  }
                  if (v47 < a4) {
                    goto LABEL_36;
                  }
                  if (v50 < a4)
                  {
                    unsigned int v52 = (char *)__p[0] + 16 * v39;
LABEL_33:
                    *(float *)unsigned int v52 = -v49;
                    uint64_t v53 = *(void *)(a5 + 16) + 16 * (v42 + *(_DWORD *)(a5 + 4) * v43) * *(_DWORD *)(a5 + 12);
                    *(void *)uint64_t v53 = *(void *)v52;
                    *(_DWORD *)(v53 + 8) = *((_DWORD *)v52 + 2);
                    int v54 = *((_DWORD *)v52 + 3);
LABEL_41:
                    *(_DWORD *)(v53 + 12) = v54;
                    goto LABEL_42;
                  }
                }
              }
              *(unsigned char *)(*(void *)(a2 + 16) + (v42 + *(_DWORD *)(a2 + 4) * v43) * *(_DWORD *)(a2 + 12)) = 0;
LABEL_42:
              ++v39;
              v41 += 16;
              v40 += 2;
              if (v41 == 4194316)
              {
                unint64_t v18 = 0;
                break;
              }
            }
          }
          unsigned int v19 = *(_DWORD *)(a2 + 4);
        }
        ++v21;
        unsigned int v20 = v19;
      }
      while (v21 < v19);
      unsigned int v16 = *(_DWORD *)(a2 + 8);
      unsigned int v20 = v19;
    }
    ++v17;
  }
  while (v17 < v16);
  if (!v18)
  {
    a3 = v75;
    BOOL v56 = v76;
    goto LABEL_81;
  }
  uint64_t v86 = 2;
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
  BOOL v55 = v76 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v92, v89);
  LODWORD(v86) = 1;
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
  BOOL v56 = v55 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v90, __p);
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  int v59 = 1;
  unsigned int v60 = 1;
  do
  {
    unsigned int v61 = v85.__begin_[v59 - 1];
    unsigned int v62 = v85.__begin_[v59];
    unsigned __int16 v63 = (char *)v89[0];
    unsigned __int16 v64 = (char *)v89[0] + v57;
    float v65 = *(float *)((char *)v89[0] + v57);
    if (v65 == -1.0)
    {
      float v68 = *(float *)((char *)__p[0] + v57);
      if (v68 == -1.0 || *(_DWORD *)((char *)__p[0] + v57 + 4) >= a4)
      {
LABEL_73:
        *(unsigned char *)(*(void *)(a2 + 16) + (v61 + *(_DWORD *)(a2 + 4) * v62) * *(_DWORD *)(a2 + 12)) = 0;
        goto LABEL_79;
      }
      unsigned int v67 = (char *)__p[0] + 16 * v58;
    }
    else
    {
      unsigned int v66 = *((_DWORD *)v64 + 1);
      unsigned int v67 = (char *)__p[0] + v57;
      float v68 = *(float *)((char *)__p[0] + v57);
      if (v68 == -1.0)
      {
        if (v66 >= a4) {
          goto LABEL_73;
        }
LABEL_74:
        uint64_t v71 = *(void *)(a5 + 16) + 16 * (v61 + *(_DWORD *)(a5 + 4) * v62) * *(_DWORD *)(a5 + 12);
        *(void *)uint64_t v71 = *(void *)((char *)v89[0] + v57);
        *(_DWORD *)(v71 + 8) = *(_DWORD *)&v63[v57 + 8];
        int v72 = *(_DWORD *)&v63[v57 + 12];
        goto LABEL_78;
      }
      unsigned int v69 = *((_DWORD *)v67 + 1);
      if (v66 < a4 && v69 < a4)
      {
        if (v65 >= v68)
        {
          unsigned __int16 v64 = (char *)__p[0] + 16 * v58;
          *(float *)unsigned int v67 = -v68;
        }
        uint64_t v71 = *(void *)(a5 + 16) + 16 * (v61 + *(_DWORD *)(a5 + 4) * v62) * *(_DWORD *)(a5 + 12);
        *(void *)uint64_t v71 = *(void *)v64;
        *(_DWORD *)(v71 + 8) = *((_DWORD *)v64 + 2);
        int v72 = *((_DWORD *)v64 + 3);
        goto LABEL_78;
      }
      if (v66 < a4) {
        goto LABEL_74;
      }
      if (v69 >= a4) {
        goto LABEL_73;
      }
    }
    *(float *)unsigned int v67 = -v68;
    uint64_t v71 = *(void *)(a5 + 16) + 16 * (v61 + *(_DWORD *)(a5 + 4) * v62) * *(_DWORD *)(a5 + 12);
    *(void *)uint64_t v71 = *(void *)v67;
    *(_DWORD *)(v71 + 8) = *((_DWORD *)v67 + 2);
    int v72 = *((_DWORD *)v67 + 3);
LABEL_78:
    *(_DWORD *)(v71 + 12) = v72;
LABEL_79:
    uint64_t v58 = v60;
    v57 += 16;
    BOOL v73 = v18 > v60++;
    v59 += 2;
  }
  while (v73);
  a3 = v75;
LABEL_81:
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v87);
  if (v85.__begin_)
  {
    v85.__end_ = v85.__begin_;
    operator delete(v85.__begin_);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  if (v90)
  {
    unsigned int v91 = v90;
    operator delete(v90);
  }
  if (v92)
  {
    uint64_t v93 = v92;
    operator delete(v92);
  }
  if (v94[0])
  {
    v94[1] = v94[0];
    operator delete(v94[0]);
  }
  return v56;
}

void sub_24F52C514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  uint64_t v40 = *(void **)(v38 - 200);
  if (v40)
  {
    *(void *)(v38 - 192) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *(void **)(v38 - 176);
  if (v41)
  {
    *(void *)(v38 - 168) = v41;
    operator delete(v41);
  }
  unsigned int v42 = *(void **)(v38 - 152);
  if (v42)
  {
    *(void *)(v38 - 144) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::internal::GenerateDispMapWithFaceNormals(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  int v3 = 0;
  uint64_t v4 = *(void *)(a2 + 4);
  int v5 = v2;
  uint64_t v6 = 0;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v3);
}

void sub_24F52CDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a35) {
    operator delete(a35);
  }
  uint64_t v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  uint64_t v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  uint64_t v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *(void *)(v36 - 128);
  if (v41) {
    MEMORY[0x25335E9F0](v41, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::util::ImageT<float>::Dilate()
{
}

void sub_24F52D328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v22 = a15;
  if (__p)
  {
    operator delete(__p);
    uint64_t v22 = a15;
  }
  MEMORY[0x25335E9F0](v22, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateEdgeDistanceMap(uint64_t a1, uint64_t *a2, void *a3, void *a4, void *a5, int a6)
{
  uint64_t v8 = (void *)(a1 + 104);
  unint64_t v9 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
  LODWORD(v82[0]) = 0;
  std::vector<float>::vector(&v83, v9, v82);
  if (v8[1] == *v8)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      LODWORD(v82[0]) = v11 - 1;
      if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)v82)) {
        v83[v10] = 1.0;
      }
      uint64_t v10 = v11;
      unint64_t v12 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
    }
    while (v12 > v11++);
  }
  if ((char *)v84 - (char *)v83 >= 1) {
    memset_pattern16(v83, &unk_24F578D60, 4 * (((unint64_t)((char *)v84 - (char *)v83) >> 2) - ((unint64_t)((char *)v84 - (char *)v83) > 3))+ 4);
  }
  unint64_t v12 = v12;
  if (v12)
  {
    int v72 = operator new(4 * v12);
    memset_pattern16(v72, &unk_24F5709C0, 4 * v12);
    uint64_t v14 = 0;
    do
    {
      LODWORD(v82[0]) = v14;
      if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)v82))
      {
        v83[v14] = 0.0;
        *((_DWORD *)v72 + v14) = 3;
      }
      ++v14;
    }
    while (v12 != v14);
  }
  else
  {
    int v72 = 0;
  }
  int v15 = v72;
  if (a6)
  {
    int v16 = 0;
    while (!v12)
    {
LABEL_37:
      if (++v16 == a6) {
        goto LABEL_38;
      }
    }
    uint64_t v17 = 0;
    do
    {
      if (*((_DWORD *)v72 + v17) == 3)
      {
        LODWORD(__p[0]) = v17;
        cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v82, v8, (unsigned int *)__p);
        for (unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v82);
              i != -1;
              unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v82))
        {
          uint64_t v19 = i;
          float32x4_t v78 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), i);
          float32x4_t v20 = vsubq_f32(v78, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v17));
          float32x4_t v21 = vmulq_f32(v20, v20);
          v21.i32[3] = 0;
          float v22 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21)));
          int v23 = *((_DWORD *)v72 + v19);
          if (v23 == 2)
          {
            float v24 = v22 + v83[v17];
            if (v83[v19] > v24) {
              v83[v19] = v24;
            }
          }
          else if (v23 == 1)
          {
            v83[v19] = v22 + v83[v17];
            *((_DWORD *)v72 + v19) = 2;
          }
        }
      }
      ++v17;
    }
    while (v17 != v12);
    uint64_t v25 = v12;
    unint64_t v26 = (int *)v72;
    while (*v26 != 3)
    {
      if (*v26 == 2)
      {
        int v27 = 3;
LABEL_35:
        *unint64_t v26 = v27;
      }
      ++v26;
      if (!--v25) {
        goto LABEL_37;
      }
    }
    int v27 = 4;
    goto LABEL_35;
  }
LABEL_38:
  if (v12)
  {
    float v28 = -1.0;
    float32x4_t v29 = v83;
    uint64_t v30 = v12;
    do
    {
      float v31 = *v29++;
      float v32 = v31;
      if (v31 > v28) {
        float v28 = v32;
      }
      --v30;
    }
    while (v30);
    if (v28 < 0.00000001) {
      float v28 = 0.00000001;
    }
    float32x4_t v33 = v83;
    do
    {
      float v34 = 0.0;
      if (*v33 >= -0.001) {
        float v34 = (float)(v28 - *v33) / v28;
      }
      *v33++ = v34;
      --v12;
    }
    while (v12);
  }
  unint64_t v35 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
  LODWORD(__p[0]) = 1056964608;
  std::vector<float>::vector(v82, v35, __p);
  cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(a1, v82, &v83);
  uint64_t v36 = v83;
  float32x4_t v37 = v84;
  if (v83 != v84)
  {
    while (1)
    {
      float v38 = *v36;
      if (*v36 > 1.0) {
        break;
      }
      float v39 = 0.0;
      if (v38 >= 0.0) {
        goto LABEL_53;
      }
LABEL_54:
      *v36++ = v39;
      if (v36 == v37) {
        goto LABEL_55;
      }
    }
    *uint64_t v36 = 1.0;
    float v38 = 1.0;
LABEL_53:
    float v39 = v38;
    goto LABEL_54;
  }
LABEL_55:
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  uint64_t v40 = *a2;
  uint64_t v41 = a2[1];
  if (v41 != *a2)
  {
    uint64_t v42 = 0;
    unsigned int v43 = 0;
    do
    {
      uint64_t v44 = v40 + 24 * v42;
      unsigned int v45 = *(_DWORD *)(v44 + 8);
      uint64_t v74 = (unsigned int *)(v44 + 8);
      if (v45)
      {
        unsigned int v73 = v43;
        unsigned int v46 = 0;
        uint64_t v47 = v40 + 24 * v42;
        unsigned int v49 = *(_DWORD *)(v47 + 4);
        v47 += 4;
        unsigned int v48 = v49;
        unsigned int v50 = (void *)(v47 + 12);
        BOOL v76 = (unsigned int *)v47;
        uint64_t v51 = (_DWORD *)(v47 + 8);
        uint64_t v52 = *a4 + 24 * v42;
        uint64_t v53 = *a3 + 24 * v42;
        uint64_t v77 = (_DWORD *)(v52 + 4);
        float32x4_t v79 = (void *)(v52 + 16);
        int v54 = (_DWORD *)(v52 + 12);
        BOOL v55 = (void *)(v53 + 16);
        BOOL v56 = (_DWORD *)(v53 + 4);
        uint64_t v57 = (_DWORD *)(v53 + 12);
        unsigned int v58 = v49;
        do
        {
          if (v58)
          {
            unsigned int v59 = 0;
            do
            {
              if (*(unsigned char *)(*v50 + *v51 * (v59 + v46 * v58)))
              {
                unsigned int v80 = *(_DWORD *)(*v79 + 4 * (v59 + v46 * *v77) * *v54);
                cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v80, __p);
                _Q0 = *(_OWORD *)(*v55 + 16 * (v59 + v46 * *v56) * *v57);
                _S1 = v83[*((unsigned int *)__p[0] + 2)];
                __asm { FMLA            S2, S1, V0.S[2] }
                unsigned int v67 = (_DWORD *)(*(void *)(*(void *)(*a5 + 16 * v42) + 16)
                               + 4
                               * (v59 + v46 * *(_DWORD *)(*(void *)(*a5 + 16 * v42) + 4))
                               * *(_DWORD *)(*(void *)(*a5 + 16 * v42) + 12));
                *unsigned int v67 = _S2;
                v67[1] = _S2;
                v67[2] = _S2;
                unsigned int v48 = *v76;
              }
              ++v59;
              unsigned int v58 = v48;
            }
            while (v59 < v48);
            unsigned int v45 = *v74;
            unsigned int v58 = v48;
          }
          ++v46;
        }
        while (v46 < v45);
        int v15 = v72;
        uint64_t v40 = *a2;
        uint64_t v41 = a2[1];
        unsigned int v43 = v73;
      }
      uint64_t v42 = ++v43;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v41 - v40) >> 3) > v43);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v82[0])
  {
    v82[1] = v82[0];
    operator delete(v82[0]);
  }
  if (v15) {
    operator delete(v15);
  }
  if (v83)
  {
    unsigned int v84 = v83;
    operator delete(v83);
  }
  return 1;
}

void sub_24F52D91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  float32x4_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    std::string __p = v12;
    int v16 = &v12[48 * v8];
    unint64_t v18 = &v12[48 * v11];
    size_t v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(a1, &__p);
    if (v17 != v16) {
      uint64_t v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F52DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v2 + 32);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *BOOL result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<cv3d::cv::gess::math::RayT<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 48 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(_OWORD *)(v4 + 16) = xmmword_24F578D50;
      *(void *)(v4 + 32) = 0x7F7FFFFF3089705FLL;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_24F52DC5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (void *)a1[1];
    uint64_t v5 = &v4[2 * a2];
    do
    {
      *uint64_t v4 = -1082130432;
      v4[1] = 0;
      v4 += 2;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_24F52DD28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::internal::CalculateVariance(uint64_t *a1, uint64_t a2, uint64_t a3, float32x2_t a4, float a5)
{
  uint64_t v7 = a1;
  uint64_t v8 = 0;
  int32x2_t v9 = *(int32x2_t *)(*a1 + 4);
  a4.f32[1] = 1.0 - a5;
  __asm { FMOV            V1.2D, #-0.5 }
  float64x2_t v15 = vaddq_f64(vcvtq_f64_f32(vmul_f32(a4, vcvt_f32_u32((uint32x2_t)v9))), _Q1);
  int32x2_t v16 = vadd_s32(v9, (int32x2_t)-1);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  float64x2_t v18 = vcvtq_f64_u64(v17);
  float64x2_t v19 = (float64x2_t)vbicq_s8((int8x16_t)v15, (int8x16_t)vcltzq_f64(v15));
  float32x2_t v20 = vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v19, v18), (int8x16_t)v18, (int8x16_t)v19));
  LOBYTE(a1) = 1;
  do
  {
    while ((a1 & 1) == 0)
    {
      LOBYTE(a1) = 0;
      if (++v8 == 9) {
        return;
      }
    }
    int v21 = *(_DWORD *)(*v7 + 4);
    double v22 = (double)(*(_DWORD *)(*v7 + 8) - 1);
    float32x2_t v23 = vadd_f32(v20, vcvt_f32_s32(*(int32x2_t *)(a3 + 8 * v8)));
    float64x2_t v24 = vcvtq_f64_f32(v23);
    int32x2_t v25 = vcltz_f32(v23);
    double v26 = v24.f64[1];
    if (v25.i8[4]) {
      double v26 = 0.0;
    }
    if (v26 <= v22) {
      double v22 = v26;
    }
    if (v25.i8[0]) {
      v24.f64[0] = 0.0;
    }
    if (v24.f64[0] > (double)(v21 - 1)) {
      v24.f64[0] = (double)(v21 - 1);
    }
    float v27 = v22;
    float v28 = v24.f64[0];
    LODWORD(a1) = cv3d::cv::gess::util::ImageT<float>::at(*v7, (float *)(a2 + 12 * v8++), v28, v27);
  }
  while (v8 != 9);
  if (a1)
  {
    uint64_t v29 = 0;
    float v30 = 0.0;
    do
    {
      uint64_t v31 = 0;
      float v32 = 0.0;
      float v33 = 0.0;
      do
      {
        float v34 = *(float *)(a2 + v31);
        float v33 = v33 + v34;
        float v32 = v32 + (float)(v34 * v34);
        v31 += 12;
      }
      while (v31 != 108);
      float v30 = v30 + fmaxf((float)((float)(v32 / 9.0) - (float)((float)(v33 / 9.0) * (float)(v33 / 9.0))) / 6.5, 0.00001);
      ++v29;
      a2 += 4;
    }
    while (v29 != 3);
    float v35 = v30 / (v30 + 0.001);
    pow(1.0 - v35, 0.454545445);
  }
}

uint64_t cv3d::cv::gess::alg::internal::CalculateGradient(uint64_t result, uint64_t a2, uint64_t a3, float32x2_t a4, float a5)
{
  uint64_t v7 = (uint64_t *)result;
  uint64_t v8 = 0;
  int32x2_t v9 = *(int32x2_t *)(*(void *)result + 4);
  a4.f32[1] = 1.0 - a5;
  __asm { FMOV            V1.2D, #-0.5 }
  float64x2_t v15 = vaddq_f64(vcvtq_f64_f32(vmul_f32(a4, vcvt_f32_u32((uint32x2_t)v9))), _Q1);
  int32x2_t v16 = vadd_s32(v9, (int32x2_t)-1);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  float64x2_t v18 = vcvtq_f64_u64(v17);
  float64x2_t v19 = (float64x2_t)vbicq_s8((int8x16_t)v15, (int8x16_t)vcltzq_f64(v15));
  float32x2_t v20 = vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v19, v18), (int8x16_t)v18, (int8x16_t)v19));
  LOBYTE(result) = 1;
  do
  {
    while ((result & 1) == 0)
    {
      BOOL result = 0;
      if (++v8 == 9) {
        return result;
      }
    }
    int v21 = *(_DWORD *)(*v7 + 4);
    double v22 = (double)(*(_DWORD *)(*v7 + 8) - 1);
    float32x2_t v23 = vadd_f32(v20, vcvt_f32_s32(*(int32x2_t *)(a3 + 8 * v8)));
    float64x2_t v24 = vcvtq_f64_f32(v23);
    int32x2_t v25 = vcltz_f32(v23);
    double v26 = v24.f64[1];
    if (v25.i8[4]) {
      double v26 = 0.0;
    }
    if (v26 <= v22) {
      double v22 = v26;
    }
    if (v25.i8[0]) {
      v24.f64[0] = 0.0;
    }
    if (v24.f64[0] > (double)(v21 - 1)) {
      v24.f64[0] = (double)(v21 - 1);
    }
    float v27 = v22;
    float v28 = v24.f64[0];
    BOOL result = cv3d::cv::gess::util::ImageT<float>::at(*v7, (float *)(a2 + 12 * v8++), v28, v27);
  }
  while (v8 != 9);
  if (result)
  {
    uint64_t v29 = a2 + 96;
    float v30 = 0.0;
    uint64_t v31 = -12;
    do
    {
      float v32 = *(float *)(v29 + v31 - 84);
      float v33 = *(float *)(v29 + v31 - 60);
      float v34 = *(float *)(v29 + v31 - 12);
      float v35 = *(float *)(v29 + v31 + 12);
      float v36 = (float)((float)((float)((float)(v33 - v32) + (float)(*(float *)(v29 + v31 - 48) * -2.0))
                          + (float)(*(float *)(v29 + v31 - 24) * 2.0))
                  - v34)
          + v35;
      float v37 = (float)(v33 + (float)(v32 + (float)(*(float *)(v29 + v31 - 72) * 2.0))) - v34;
      float v30 = v30
          + (float)((float)((float)((float)(v37 + (float)(*(float *)(v29 + v31) * -2.0)) - v35)
                          * (float)((float)(v37 + (float)(*(float *)(v29 + v31) * -2.0)) - v35))
                  + (float)(v36 * v36));
      v31 += 4;
    }
    while (v31);
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::internal::CustomImplicitLaplacianSmoothing(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t)(a3[1] - *a3) >> 2;
  if (v4 == ((*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2))
  {
    uint64_t v5 = a2[1] - *a2;
    if (v5 == 4 || v5 >> 2 == v4) {
      cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(&v8, v4, v4);
    }
  }
  return 0;
}

void sub_24F52E9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(&a39);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::math::SparseMatrixT<double>::SortMatrix(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (long long *)a1[3];
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v2) >> 3));
  float64x2_t v15 = (uint64_t (*)(long long *, long long *))cv3d::cv::gess::math::MatrixElementT<double>::order;
  if (v3 == (long long *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,false>(v2, v3, &v15, v5, 1);
  if (*a1 != -1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a1[5];
    do
      *(void *)(v7 + 8 * v6++) = 0;
    while (v6 < *a1 + 1);
  }
  uint64_t v8 = (char *)a1[2];
  int32x2_t v9 = (char *)a1[3];
  int64_t v10 = v9 - v8;
  if (v9 != v8)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 / 24;
    uint64_t v13 = a1[5];
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    do
    {
      ++v11;
      uint64_t v14 = *(void *)v8;
      v8 += 24;
      *(void *)(v13 + 8 * v14 + 8) = v11;
    }
    while (v12 != v11);
  }
}

void cv3d::cv::gess::math::SparseMatrixT<double>::BCG()
{
}

uint64_t cv3d::cv::gess::alg::internal::PrepareLowMeshPerVertexReliabilityWeight(uint64_t a1, float **a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (char *)a2[1] - (char *)*a2;
  if (v5)
  {
    unint64_t v6 = v5 >> 2;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      float v7 = *v4 + -0.02;
      if (v7 >= 0.0) {
        float v8 = v7 * 0.75;
      }
      else {
        float v8 = 0.0;
      }
      if (v8 < 0.0) {
        float v8 = 0.0;
      }
      if (v8 > 1.0) {
        float v8 = 1.0;
      }
      *v4++ = v8;
      --v6;
    }
    while (v6);
  }
  unint64_t v9 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
  int v12 = 1061997773;
  std::vector<float>::vector(__p, v9, &v12);
  uint64_t v10 = cv3d::cv::gess::alg::internal::CustomImplicitLaplacianSmoothing(a1, __p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_24F52EEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::WeakenAomapWithLowMeshPerVertexReliabilityWeight(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  unsigned int v12 = *(_DWORD *)(a3 + 8);
  if (v12)
  {
    unsigned int v13 = 0;
    unsigned int v14 = *(_DWORD *)(a3 + 4);
    unsigned int v15 = v14;
    do
    {
      if (v15)
      {
        unsigned int v16 = 0;
        do
        {
          if (*(unsigned char *)(*(void *)(a3 + 16) + *(_DWORD *)(a3 + 12) * (v16 + v15 * v13)))
          {
            unsigned int v23 = *(_DWORD *)(*(void *)(a5 + 16) + 4 * (v16 + *(_DWORD *)(a5 + 4) * v13) * *(_DWORD *)(a5 + 12));
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v23, __p);
            uint64_t v17 = *(unsigned int *)(a6 + 12);
            if (v17)
            {
              float64x2_t v18 = (float *)(*(void *)(a4 + 16) + 16 * (v16 + *(_DWORD *)(a4 + 4) * v13) * *(_DWORD *)(a4 + 12));
              float v19 = v18[1] * *(float *)(*a2 + 4 * *((unsigned int *)__p[0] + 1))
                  + *(float *)(*a2 + 4 * *(unsigned int *)__p[0]) * *v18
                  + *(float *)(*a2 + 4 * *((unsigned int *)__p[0] + 2)) * v18[2];
              float32x2_t v20 = (float *)(*(void *)(a6 + 16) + 4 * v17 * (v16 + v13 * *(_DWORD *)(a6 + 4)));
              do
              {
                float v21 = 1.0 - v19 + (float)(*v20 * v19);
                *v20++ = v21;
                --v17;
              }
              while (v17);
            }
            unsigned int v14 = *(_DWORD *)(a3 + 4);
          }
          ++v16;
          unsigned int v15 = v14;
        }
        while (v16 < v14);
        unsigned int v12 = *(_DWORD *)(a3 + 8);
        unsigned int v15 = v14;
      }
      ++v13;
    }
    while (v13 < v12);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_24F52F084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::PrepareBatch_RayIntersection(uint64_t a1, unsigned int a2, cv3d::cv::gess::alg::MPSMeshIntersector *a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t a7, int a8)
{
  int v15 = a5;
  unsigned int v16 = (void *)MEMORY[0x25335EE00]();
  uint64_t v17 = cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(a3);
  id v18 = *(id *)a1;
  *(void *)a1 = v17;

  id v19 = *(id *)a1;
  id v67 = 0;
  uint64_t v20 = GetMTLLibrary(v19, (uint64_t)&v67, a6, a8);
  id v21 = v67;
  double v22 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v20;

  if (!v21)
  {
    uint64_t v25 = cv3d::cv::gess::alg::MPSMeshIntersector::getMPSRayIntersectorInternal(a3);
    double v26 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v25;

    uint64_t v27 = cv3d::cv::gess::alg::MPSMeshIntersector::getMPSTriangleAccelerationStructureInternal(a3);
    float v28 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v27;

    uint64_t v29 = [*(id *)a1 newBufferWithLength:4 * a2 options:0];
    float v30 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v29;

    uint64_t v31 = [*(id *)a1 newBufferWithLength:4 * a2 options:0];
    float v32 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v31;

    uint64_t v33 = [*(id *)a1 newBufferWithLength:12 * a2 options:0];
    float v34 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v33;

    uint64_t v35 = [*(id *)a1 newBufferWithLength:12 * a2 options:0];
    float v36 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v35;

    uint64_t v37 = [*(id *)a1 newBufferWithLength:4 * a2 options:0];
    float v38 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v37;

    uint64_t v39 = [*(id *)a1 newBufferWithLength:32 * a2 options:32];
    uint64_t v40 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v39;

    uint64_t v41 = [*(id *)a1 newBufferWithLength:16 * a2 options:32];
    uint64_t v42 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v41;

    uint64_t v43 = [*(id *)a1 newBufferWithLength:4 * a2 options:32];
    uint64_t v44 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v43;

    uint64_t v45 = [*(id *)a1 newBufferWithLength:4 * a2 options:32];
    unsigned int v46 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v45;

    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 32)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 48))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 64)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 80)))))) & 1) != 0|| !*(void *)(a1 + 96))
    {
      if (v15) {
        *(_DWORD *)(a4 + 384) = 2;
      }
      if (*(void *)(a7 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
        std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 2);
        if (v66 < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_8;
    }
    id v47 = objc_alloc_init(MEMORY[0x263F12850]);
    [v47 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:1];
    unsigned int v48 = (void *)[*(id *)(a1 + 8) newFunctionWithName:@"szPPfSnwed"];
    [v47 setComputeFunction:v48];

    id v49 = *(id *)a1;
    id v64 = 0;
    uint64_t v50 = [v49 newComputePipelineStateWithDescriptor:v47 options:0 reflection:0 error:&v64];
    id v51 = v64;
    uint64_t v52 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = v50;

    if (*(void *)(a1 + 104))
    {
      uint64_t v53 = (void *)[*(id *)(a1 + 8) newFunctionWithName:@"EDhdscza3Z"];
      [v47 setComputeFunction:v53];

      id v54 = *(id *)a1;
      id v63 = v51;
      uint64_t v55 = [v54 newComputePipelineStateWithDescriptor:v47 options:0 reflection:0 error:&v63];
      id v56 = v63;

      uint64_t v57 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v55;

      if (!*(void *)(a1 + 112))
      {
        if (v15) {
          *(_DWORD *)(a4 + 384) = 5;
        }
        if (*(void *)(a7 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
          std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 5);
          if (v66 < 0) {
            operator delete(__p[0]);
          }
        }
        int v23 = 1;
        id v51 = v56;
        goto LABEL_38;
      }
      unsigned int v58 = (void *)[*(id *)(a1 + 8) newFunctionWithName:@"kKPMS8MNt0"];
      [v47 setComputeFunction:v58];

      id v59 = *(id *)a1;
      id v62 = v56;
      uint64_t v60 = [v59 newComputePipelineStateWithDescriptor:v47 options:0 reflection:0 error:&v62];
      id v51 = v62;

      unsigned int v61 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v60;

      if (*(void *)(a1 + 120))
      {
        int v23 = 0;
LABEL_38:

        goto LABEL_9;
      }
      if (v15) {
        *(_DWORD *)(a4 + 384) = 5;
      }
      if (!*(void *)(a7 + 24))
      {
LABEL_37:
        int v23 = 1;
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 5);
    }
    else
    {
      if (v15) {
        *(_DWORD *)(a4 + 384) = 5;
      }
      if (!*(void *)(a7 + 24)) {
        goto LABEL_37;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 5);
    }
    if (v66 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_37;
  }
  if (v15) {
    *(_DWORD *)(a4 + 384) = 5;
  }
  if (*(void *)(a7 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
    std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 5);
    if (v66 < 0) {
      operator delete(__p[0]);
    }
  }

LABEL_8:
  int v23 = 1;
LABEL_9:
  return v23 == 0;
}

void sub_24F52F5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayIntersection(uint64_t a1, unsigned int a2, void *a3, float a4, float a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  float v60 = a4;
  v61[0] = a5;
  if (((a3[1] - *a3) >> 4) >= 0xFF) {
    unsigned int v13 = 255;
  }
  else {
    unsigned int v13 = (a3[1] - *a3) >> 4;
  }
  uint64_t v14 = MEMORY[0x25335EE00]();
  uint64_t v42 = (void *)[*(id *)a1 newCommandQueue];
  uint64_t v15 = [*(id *)(a1 + 48) contents];
  if (a2)
  {
    unsigned int v16 = (float *)v15;
    uint64_t v17 = a2;
    do
    {
      int v18 = rand();
      float v19 = (float)((float)((float)v18 * 4.6566e-10) + (float)((float)v18 * 4.6566e-10)) * 3.14159265;
      *v16++ = v19;
      --v17;
    }
    while (v17);
  }
  uint64_t v20 = [v42 commandBuffer];
  uint64_t v38 = a7;
  char v39 = a8;
  context = (void *)v14;
  unint64_t v21 = [*(id *)(a1 + 104) maxTotalThreadsPerThreadgroup];
  unint64_t v22 = a2;
  if (v21 >= a2) {
    unint64_t v23 = a2;
  }
  else {
    unint64_t v23 = v21;
  }
  float64x2_t v24 = [v20 computeCommandEncoder];
  [v24 setBuffer:*(void *)(a1 + 88) offset:0 atIndex:0];
  [v24 setBuffer:*(void *)(a1 + 72) offset:0 atIndex:1];
  [v24 setBuffer:*(void *)(a1 + 96) offset:0 atIndex:2];
  [v24 setBuffer:*(void *)(a1 + 80) offset:0 atIndex:3];
  [v24 setComputePipelineState:*(void *)(a1 + 104)];
  uint64_t v58 = a2;
  int64x2_t v59 = vdupq_n_s64(1uLL);
  unint64_t v56 = v23;
  int64x2_t v57 = v59;
  [v24 dispatchThreads:&v58 threadsPerThreadgroup:&v56];
  uint64_t v25 = (cv3d::cv::gess::util::os *)[v24 endEncoding];
  if (v13)
  {
    uint64_t v26 = 0;
    do
    {
      unint64_t v27 = [*(id *)(a1 + 112) maxTotalThreadsPerThreadgroup];
      if (v27 >= v22) {
        unint64_t v28 = v22;
      }
      else {
        unint64_t v28 = v27;
      }
      LODWORD(__p[0]) = 0;
      uint64_t v29 = (_DWORD *)(*a3 + v26);
      LODWORD(__p[0]) = *v29;
      int v55 = 0;
      int v55 = v29[1];
      int v54 = 0;
      int v54 = v29[2];
      float v30 = [v20 computeCommandEncoder];

      [v30 setBuffer:*(void *)(a1 + 32) offset:0 atIndex:0];
      [v30 setBuffer:*(void *)(a1 + 40) offset:0 atIndex:1];
      [v30 setBuffer:*(void *)(a1 + 56) offset:0 atIndex:2];
      [v30 setBytes:__p length:4 atIndex:3];
      [v30 setBytes:&v55 length:4 atIndex:4];
      [v30 setBytes:&v54 length:4 atIndex:5];
      [v30 setBytes:&v60 length:4 atIndex:6];
      [v30 setBytes:v61 length:4 atIndex:7];
      [v30 setBuffer:*(void *)(a1 + 48) offset:0 atIndex:8];
      [v30 setComputePipelineState:*(void *)(a1 + 112)];
      unint64_t v52 = v22;
      int64x2_t v53 = vdupq_n_s64(1uLL);
      unint64_t v50 = v28;
      int64x2_t v51 = v53;
      [v30 dispatchThreads:&v52 threadsPerThreadgroup:&v50];
      [v30 endEncoding];
      [*(id *)(a1 + 24) encodeIntersectionToCommandBuffer:v20 intersectionType:1 rayBuffer:*(void *)(a1 + 56) rayBufferOffset:0 intersectionBuffer:*(void *)(a1 + 64) intersectionBufferOffset:0 rayCount:v22 accelerationStructure:*(void *)(a1 + 16)];
      unint64_t v31 = [*(id *)(a1 + 120) maxTotalThreadsPerThreadgroup];
      if (v31 >= v22) {
        unint64_t v32 = v22;
      }
      else {
        unint64_t v32 = v31;
      }
      uint64_t v33 = [v20 computeCommandEncoder];

      [v33 setBuffer:*(void *)(a1 + 64) offset:0 atIndex:0];
      [v33 setBuffer:*(void *)(a1 + 40) offset:0 atIndex:1];
      [v33 setBuffer:*(void *)(a1 + 56) offset:0 atIndex:2];
      [v33 setBuffer:*(void *)(a1 + 72) offset:0 atIndex:3];
      [v33 setBuffer:*(void *)(a1 + 88) offset:0 atIndex:4];
      [v33 setBuffer:*(void *)(a1 + 80) offset:0 atIndex:5];
      [v33 setBuffer:*(void *)(a1 + 96) offset:0 atIndex:6];
      [v33 setComputePipelineState:*(void *)(a1 + 120)];
      unint64_t v48 = v22;
      int64x2_t v49 = vdupq_n_s64(1uLL);
      unint64_t v46 = v32;
      int64x2_t v47 = v49;
      [v33 dispatchThreads:&v48 threadsPerThreadgroup:&v46];
      uint64_t v25 = (cv3d::cv::gess::util::os *)[v33 endEncoding];
      v26 += 16;
      float64x2_t v24 = v33;
    }
    while (16 * v13 != v26);
  }
  else
  {
    uint64_t v33 = v24;
  }
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v25);
  [v20 commit];
  [v20 waitUntilCompleted];
  float v34 = [v20 error];
  BOOL v36 = cv3d::cv::gess::alg::internal::GPUEncountersError(v34, v35);

  if (v36)
  {
    if (v39) {
      *(_DWORD *)(v38 + 384) = 16;
    }
    if (*(void *)(a9 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a9, 16);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return !v36;
}

void sub_24F52FBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::PrepareBatch_RayTracing(uint64_t a1, unsigned int a2, cv3d::cv::gess::alg::MPSMeshIntersector *a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t a7, int a8)
{
  int v15 = a5;
  unsigned int v16 = (void *)MEMORY[0x25335EE00]();
  uint64_t v17 = cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(a3);
  id v18 = *(id *)a1;
  *(void *)a1 = v17;

  id v19 = *(id *)a1;
  id v46 = 0;
  uint64_t v20 = GetMTLLibrary(v19, (uint64_t)&v46, a6, a8);
  id v21 = v46;
  unint64_t v22 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v20;

  if (v21)
  {
    if (v15) {
      *(_DWORD *)(a4 + 384) = 5;
    }
    if (*(void *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 5);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
    }

LABEL_8:
    int v23 = 1;
    goto LABEL_9;
  }
  uint64_t v25 = cv3d::cv::gess::alg::MPSMeshIntersector::getMTLAccelerationStructureInternal(a3);
  uint64_t v26 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v25;

  uint64_t v27 = 4 * a2;
  uint64_t v28 = [*(id *)a1 newBufferWithLength:v27 options:0];
  uint64_t v29 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v28;

  uint64_t v30 = 12 * a2;
  uint64_t v31 = [*(id *)a1 newBufferWithLength:v30 options:0];
  unint64_t v32 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v31;

  uint64_t v33 = [*(id *)a1 newBufferWithLength:v30 options:0];
  float v34 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v33;

  uint64_t v35 = [*(id *)a1 newBufferWithLength:v27 options:0];
  BOOL v36 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v35;

  if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 32)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 48))))))
  {
    if (v15) {
      *(_DWORD *)(a4 + 384) = 2;
    }
    if (*(void *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 2);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_8;
  }
  id v37 = objc_alloc_init(MEMORY[0x263F12850]);
  [v37 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:1];
  uint64_t v38 = (void *)[*(id *)(a1 + 8) newFunctionWithName:@"rtak"];
  [v37 setComputeFunction:v38];

  id v39 = *(id *)a1;
  id v43 = 0;
  uint64_t v40 = [v39 newComputePipelineStateWithDescriptor:v37 options:0 reflection:0 error:&v43];
  id v41 = v43;
  uint64_t v42 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v40;

  if (*(void *)(a1 + 24))
  {
    int v23 = 0;
  }
  else
  {
    if (v15) {
      *(_DWORD *)(a4 + 384) = 5;
    }
    if (*(void *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a7, 5);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
    }
    int v23 = 1;
  }

LABEL_9:
  return v23 == 0;
}

void sub_24F52FF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayTracing(uint64_t a1, unsigned int a2, int a3, float a4, float a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  float v38 = a5;
  float v39 = a4;
  int v37 = 3;
  if (a3 == 2)
  {
    int v13 = 1;
  }
  else
  {
    if (a3 != 1) {
      goto LABEL_6;
    }
    int v13 = 2;
  }
  int v37 = v13;
LABEL_6:
  uint64_t v14 = (void *)MEMORY[0x25335EE00]();
  int v15 = (void *)[*(id *)a1 newCommandQueue];
  uint64_t v16 = [*(id *)(a1 + 56) contents];
  if (a2)
  {
    uint64_t v17 = (float *)v16;
    uint64_t v18 = a2;
    do
    {
      int v19 = rand();
      float v20 = (float)((float)((float)v19 * 4.6566e-10) + (float)((float)v19 * 4.6566e-10)) * 3.14159265;
      *v17++ = v20;
      --v18;
    }
    while (v18);
  }
  id v21 = objc_msgSend(v15, "commandBuffer", a9);
  unint64_t v22 = [*(id *)(a1 + 24) maxTotalThreadsPerThreadgroup];
  if (v22 >= a2) {
    unint64_t v23 = a2;
  }
  else {
    unint64_t v23 = v22;
  }
  float64x2_t v24 = [v21 computeCommandEncoder];
  [v24 setBuffer:*(void *)(a1 + 32) offset:0 atIndex:0];
  [v24 setBuffer:*(void *)(a1 + 40) offset:0 atIndex:1];
  [v24 setBuffer:*(void *)(a1 + 48) offset:0 atIndex:2];
  [v24 setAccelerationStructure:*(void *)(a1 + 16) atBufferIndex:3];
  [v24 useResource:*(void *)(a1 + 16) usage:1];
  [v24 setBuffer:*(void *)(a1 + 56) offset:0 atIndex:4];
  [v24 setBytes:&v39 length:4 atIndex:5];
  [v24 setBytes:&v38 length:4 atIndex:6];
  [v24 setBytes:&v37 length:4 atIndex:7];
  [v24 setComputePipelineState:*(void *)(a1 + 24)];
  uint64_t v35 = a2;
  int64x2_t v36 = vdupq_n_s64(1uLL);
  unint64_t v33 = v23;
  int64x2_t v34 = v36;
  [v24 dispatchThreads:&v35 threadsPerThreadgroup:&v33];
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)[v24 endEncoding]);
  [v21 commit];
  [v21 waitUntilCompleted];
  uint64_t v25 = [v21 error];
  BOOL v27 = cv3d::cv::gess::alg::internal::GPUEncountersError(v25, v26);

  if (v27)
  {
    if (a8) {
      *(_DWORD *)(a7 + 384) = 16;
    }
    if (*(void *)(v30 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(v30, 16);
      if (v32 < 0) {
        operator delete(__p);
      }
    }
  }

  return !v27;
}

void sub_24F53027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::internal::GenerateAomapWithIntersections(uint64_t a1)
{
  v5[44] = *(void **)MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v5[0] = 0;
  v5[1] = 0;
  int v2 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v5, (unsigned __int8 *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v2;
  cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v5, 3uLL);
  operator new[]();
}

void sub_24F531370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  cv3d::cv::gess::alg::internal::AoBatchImpl_RayIntersection::~AoBatchImpl_RayIntersection((id *)&a49);
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  MEMORY[0x25335E9F0](v72, 0x1000C8077774924);
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::internal::AoBatchImpl_RayTracing::~AoBatchImpl_RayTracing(id *this)
{
}

void cv3d::cv::gess::alg::internal::AoBatchImpl_RayIntersection::~AoBatchImpl_RayIntersection(id *this)
{
}

void cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  operator new[]();
}

void sub_24F5317A0(_Unwind_Exception *exception_object)
{
  char v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    MEMORY[0x25335E9F0](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = a1[6];
  if (v3) {
    MEMORY[0x25335E9F0](v3, 0x1000C8000313F17);
  }
  uint64_t v4 = a1[7];
  if (v4) {
    MEMORY[0x25335E9F0](v4, 0x1000C8000313F17);
  }
  uint64_t v5 = a1[8];
  if (v5) {
    MEMORY[0x25335E9F0](v5, 0x1000C8000313F17);
  }
  uint64_t v6 = a1[9];
  if (v6) {
    MEMORY[0x25335E9F0](v6, 0x1000C8000313F17);
  }
  uint64_t v7 = a1[10];
  if (v7) {
    MEMORY[0x25335E9F0](v7, 0x1000C8000313F17);
  }
  uint64_t v8 = a1[11];
  if (v8) {
    MEMORY[0x25335E9F0](v8, 0x1000C8000313F17);
  }
  uint64_t v9 = a1[12];
  if (v9) {
    MEMORY[0x25335E9F0](v9, 0x1000C8000313F17);
  }
  uint64_t v10 = (void *)a1[2];
  if (v10)
  {
    a1[3] = v10;
    operator delete(v10);
  }
  return a1;
}

BOOL cv3d::cv::gess::math::MatrixElementT<double>::order(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 == *a2) {
    return a1[1] < a2[1];
  }
  return 0;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,false>(uint64_t a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  if (result != a2)
  {
    uint64_t v28 = v3;
    uint64_t v29 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        unsigned int v12 = *a3;
        long long v26 = *(_OWORD *)v10;
        uint64_t v27 = *(void *)(v10 + 16);
        uint64_t v13 = *(void *)(v11 + 16);
        long long v24 = *(_OWORD *)v11;
        uint64_t v25 = v13;
        BOOL result = v12(&v26, &v24);
        if (result)
        {
          long long v22 = *(_OWORD *)v10;
          uint64_t v23 = *(void *)(v10 + 16);
          uint64_t v14 = v9;
          while (1)
          {
            uint64_t v15 = v6 + v14;
            *(_OWORD *)(v15 + 24) = *(_OWORD *)(v6 + v14);
            *(void *)(v15 + 40) = *(void *)(v6 + v14 + 16);
            if (!v14) {
              break;
            }
            unint64_t v16 = *a3;
            long long v20 = v22;
            uint64_t v21 = v23;
            long long v18 = *(_OWORD *)(v15 - 24);
            uint64_t v19 = *(void *)(v15 - 8);
            BOOL result = v16(&v20, &v18);
            v14 -= 24;
            if ((result & 1) == 0)
            {
              uint64_t v17 = v6 + v14 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v17 = v6;
LABEL_10:
          *(_OWORD *)uint64_t v17 = v22;
          *(void *)(v17 + 16) = v23;
        }
        uint64_t v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  if (result != a2)
  {
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    uint64_t v6 = result;
    for (uint64_t i = result + 24; v6 + 24 != a2; uint64_t i = v6 + 24)
    {
      uint64_t v9 = v6;
      uint64_t v6 = i;
      uint64_t v10 = *a3;
      long long v23 = *(_OWORD *)v6;
      uint64_t v24 = *(void *)(v6 + 16);
      uint64_t v11 = *(void *)(v9 + 16);
      long long v21 = *(_OWORD *)v9;
      uint64_t v22 = v11;
      BOOL result = v10(&v23, &v21);
      if (result)
      {
        long long v19 = *(_OWORD *)v6;
        uint64_t v20 = *(void *)(v6 + 16);
        uint64_t v12 = v6;
        do
        {
          uint64_t v13 = v12 - 24;
          *(_OWORD *)uint64_t v12 = *(_OWORD *)(v12 - 24);
          *(void *)(v12 + 16) = *(void *)(v12 - 8);
          uint64_t v14 = *a3;
          long long v17 = v19;
          uint64_t v18 = v20;
          long long v15 = *(_OWORD *)(v12 - 48);
          uint64_t v16 = *(void *)(v12 - 32);
          BOOL result = v14(&v17, &v15);
          uint64_t v12 = v13;
        }
        while ((result & 1) != 0);
        *(_OWORD *)uint64_t v13 = v19;
        *(void *)(v13 + 16) = v20;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  uint64_t v8 = *a4;
  long long v49 = *a2;
  uint64_t v50 = *((void *)a2 + 2);
  long long v47 = *a1;
  uint64_t v48 = *((void *)a1 + 2);
  char v9 = v8(&v49, &v47);
  uint64_t v10 = *a4;
  if ((v9 & 1) == 0)
  {
    long long v45 = *a3;
    uint64_t v46 = *((void *)a3 + 2);
    long long v43 = *a2;
    uint64_t v44 = *((void *)a2 + 2);
    uint64_t result = v10(&v45, &v43);
    if (!result) {
      return result;
    }
    uint64_t v15 = *((void *)a2 + 2);
    long long v16 = *a2;
    uint64_t v17 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v17;
    *a3 = v16;
    *((void *)a3 + 2) = v15;
    uint64_t v18 = *a4;
    uint64_t v42 = *((void *)a2 + 2);
    long long v41 = *a2;
    long long v19 = *a1;
    uint64_t v40 = *((void *)a1 + 2);
    long long v39 = v19;
    if (!v18(&v41, &v39)) {
      return 1;
    }
    uint64_t v20 = *((void *)a1 + 2);
    long long v21 = *a1;
    uint64_t v22 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v22;
    *a2 = v21;
    *((void *)a2 + 2) = v20;
    return 2;
  }
  long long v37 = *a3;
  uint64_t v38 = *((void *)a3 + 2);
  long long v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  if (!v10(&v37, &v35))
  {
    uint64_t v23 = *((void *)a1 + 2);
    long long v24 = *a1;
    uint64_t v25 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v25;
    *a2 = v24;
    *((void *)a2 + 2) = v23;
    uint64_t v26 = *a4;
    uint64_t v34 = *((void *)a3 + 2);
    long long v33 = *a3;
    long long v27 = *a2;
    uint64_t v32 = *((void *)a2 + 2);
    long long v31 = v27;
    if (!v26(&v33, &v31)) {
      return 1;
    }
    uint64_t v28 = *((void *)a2 + 2);
    long long v29 = *a2;
    uint64_t v30 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v30;
    *a3 = v29;
    *((void *)a3 + 2) = v28;
    return 2;
  }
  uint64_t v11 = *((void *)a1 + 2);
  long long v12 = *a1;
  uint64_t v13 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v13;
  *a3 = v12;
  *((void *)a3 + 2) = v11;
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v53 = *a1;
  uint64_t v54 = *((void *)a1 + 2);
  uint64_t v6 = *a3;
  long long v51 = v53;
  uint64_t v52 = v54;
  long long v49 = *(long long *)((char *)a2 - 24);
  uint64_t v50 = *((void *)a2 - 1);
  if (v6(&v51, &v49))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = (long long *)((char *)v7 + 24);
      char v9 = *a3;
      long long v47 = v53;
      uint64_t v48 = v54;
      long long v45 = *(long long *)((char *)v7 + 24);
      uint64_t v46 = *((void *)v7 + 5);
      char v10 = v9(&v47, &v45);
      uint64_t v7 = v8;
    }
    while ((v10 & 1) == 0);
  }
  else
  {
    uint64_t v11 = (long long *)((char *)a1 + 24);
    do
    {
      uint64_t v8 = v11;
      if (v11 >= v4) {
        break;
      }
      long long v12 = *a3;
      long long v43 = v53;
      uint64_t v44 = v54;
      long long v41 = *v8;
      uint64_t v42 = *((void *)v8 + 2);
      int v13 = v12(&v43, &v41);
      uint64_t v11 = (long long *)((char *)v8 + 24);
    }
    while (!v13);
  }
  if (v8 >= v4)
  {
    uint64_t v14 = v4;
  }
  else
  {
    do
    {
      uint64_t v14 = (long long *)((char *)v4 - 24);
      uint64_t v15 = *a3;
      long long v39 = v53;
      uint64_t v40 = v54;
      long long v37 = *(long long *)((char *)v4 - 24);
      uint64_t v38 = *((void *)v4 - 1);
      uint64_t v4 = (long long *)((char *)v4 - 24);
    }
    while ((v15(&v39, &v37) & 1) != 0);
  }
  while (v8 < v14)
  {
    long long v16 = *v8;
    uint64_t v56 = *((void *)v8 + 2);
    long long v55 = v16;
    long long v17 = *v14;
    *((void *)v8 + 2) = *((void *)v14 + 2);
    long long *v8 = v17;
    long long v18 = v55;
    *((void *)v14 + 2) = v56;
    long long *v14 = v18;
    do
    {
      long long v35 = v53;
      uint64_t v36 = v54;
      uint64_t v19 = *((void *)v8 + 5);
      long long v20 = *(long long *)((char *)v8 + 24);
      uint64_t v8 = (long long *)((char *)v8 + 24);
      long long v21 = *a3;
      long long v33 = v20;
      uint64_t v34 = v19;
    }
    while (!v21(&v35, &v33));
    do
    {
      long long v31 = v53;
      uint64_t v32 = v54;
      uint64_t v22 = *((void *)v14 - 1);
      long long v23 = *(long long *)((char *)v14 - 24);
      uint64_t v14 = (long long *)((char *)v14 - 24);
      long long v24 = *a3;
      long long v29 = v23;
      uint64_t v30 = v22;
    }
    while ((v24(&v31, &v29) & 1) != 0);
  }
  uint64_t v25 = (long long *)((char *)v8 - 24);
  if ((long long *)((char *)v8 - 24) != a1)
  {
    long long v26 = *v25;
    *((void *)a1 + 2) = *((void *)v8 - 1);
    *a1 = v26;
  }
  long long v27 = v53;
  *((void *)v8 - 1) = v54;
  long long *v25 = v27;
  return v8;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>(long long *a1, unint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v47 = *a1;
  uint64_t v48 = *((void *)a1 + 2);
  do
  {
    uint64_t v7 = *a3;
    long long v45 = *(long long *)((char *)a1 + v6 + 24);
    uint64_t v46 = *(void *)((char *)a1 + v6 + 40);
    long long v43 = v47;
    uint64_t v44 = v48;
    v6 += 24;
  }
  while ((v7(&v45, &v43) & 1) != 0);
  uint64_t v8 = (long long *)((char *)a1 + v6);
  uint64_t v9 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    while ((unint64_t)v8 < a2)
    {
      long long v12 = *a3;
      unint64_t v10 = a2 - 24;
      long long v41 = *(_OWORD *)(a2 - 24);
      uint64_t v42 = *(void *)(a2 - 8);
      long long v39 = v47;
      uint64_t v40 = v48;
      a2 -= 24;
      if (v12(&v41, &v39)) {
        goto LABEL_9;
      }
    }
    unint64_t v10 = a2;
  }
  else
  {
    do
    {
      unint64_t v10 = a2 - 24;
      uint64_t v11 = *a3;
      long long v37 = *(_OWORD *)(a2 - 24);
      uint64_t v38 = *(void *)(a2 - 8);
      long long v35 = v47;
      uint64_t v36 = v48;
      a2 -= 24;
    }
    while (!v11(&v37, &v35));
  }
LABEL_9:
  if ((unint64_t)v8 < v10)
  {
    int v13 = v8;
    unint64_t v14 = v10;
    do
    {
      long long v49 = *v13;
      long long v15 = v49;
      uint64_t v50 = *((void *)v13 + 2);
      uint64_t v16 = v50;
      uint64_t v17 = *(void *)(v14 + 16);
      long long *v13 = *(_OWORD *)v14;
      *((void *)v13 + 2) = v17;
      *(void *)(v14 + 16) = v16;
      *(_OWORD *)unint64_t v14 = v15;
      do
      {
        uint64_t v18 = *((void *)v13 + 5);
        long long v19 = *(long long *)((char *)v13 + 24);
        int v13 = (long long *)((char *)v13 + 24);
        long long v20 = *a3;
        long long v33 = v19;
        uint64_t v34 = v18;
        long long v31 = v47;
        uint64_t v32 = v48;
      }
      while ((v20(&v33, &v31) & 1) != 0);
      do
      {
        uint64_t v21 = *(void *)(v14 - 8);
        long long v22 = *(_OWORD *)(v14 - 24);
        v14 -= 24;
        long long v23 = *a3;
        long long v29 = v22;
        uint64_t v30 = v21;
        long long v27 = v47;
        uint64_t v28 = v48;
      }
      while (!v23(&v29, &v27));
    }
    while ((unint64_t)v13 < v14);
    uint64_t v9 = (uint64_t)v13 - 24;
  }
  if ((long long *)v9 != a1)
  {
    long long v24 = *(_OWORD *)v9;
    *((void *)a1 + 2) = *(void *)(v9 + 16);
    *a1 = v24;
  }
  long long v25 = v47;
  *(void *)(v9 + 16) = v48;
  *(_OWORD *)uint64_t v9 = v25;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *a3;
      long long v35 = *(_OWORD *)(a2 - 24);
      uint64_t v36 = *(void *)(a2 - 8);
      long long v33 = *(_OWORD *)a1;
      uint64_t v34 = *(void *)(a1 + 16);
      if (v8(&v35, &v33))
      {
        uint64_t v9 = a2 - 24;
        uint64_t v10 = *(void *)(a1 + 16);
        long long v11 = *(_OWORD *)a1;
        uint64_t v12 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v12;
        *(_OWORD *)uint64_t v9 = v11;
        *(void *)(v9 + 16) = v10;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, a1 + 24, a1 + 48, (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, a1 + 24, a1 + 48, a1 + 72, (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v13 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    uint64_t v17 = *a3;
    long long v31 = *(_OWORD *)v14;
    uint64_t v32 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v13 + 16);
    long long v29 = *(_OWORD *)v13;
    uint64_t v30 = v18;
    if (v17(&v31, &v29))
    {
      long long v27 = *(_OWORD *)v14;
      uint64_t v28 = *(void *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + v19 + 48);
        *(void *)(v20 + 88) = *(void *)(a1 + v19 + 64);
        if (v19 == -48) {
          break;
        }
        uint64_t v21 = *a3;
        long long v25 = v27;
        uint64_t v26 = v28;
        long long v23 = *(_OWORD *)(v20 + 24);
        uint64_t v24 = *(void *)(v20 + 40);
        v19 -= 24;
        if ((v21(&v25, &v23) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v22 = v27;
      *(void *)(v22 + 16) = v28;
      if (++v16 == 8) {
        return v14 + 24 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  uint64_t v10 = *a5;
  long long v34 = *a4;
  uint64_t v35 = *((void *)a4 + 2);
  long long v32 = *(_OWORD *)a3;
  uint64_t v33 = *(void *)(a3 + 16);
  if (v10(&v34, &v32))
  {
    uint64_t v12 = *(void *)(a3 + 16);
    long long v13 = *(_OWORD *)a3;
    uint64_t v14 = *((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    *(void *)(a3 + 16) = v14;
    *a4 = v13;
    *((void *)a4 + 2) = v12;
    uint64_t v15 = *a5;
    uint64_t v31 = *(void *)(a3 + 16);
    long long v30 = *(_OWORD *)a3;
    long long v16 = *(_OWORD *)a2;
    uint64_t v29 = *(void *)(a2 + 16);
    long long v28 = v16;
    if (v15(&v30, &v28))
    {
      uint64_t v17 = *(void *)(a2 + 16);
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(void *)(a3 + 16) = v17;
      uint64_t v20 = *a5;
      uint64_t v27 = *(void *)(a2 + 16);
      long long v26 = *(_OWORD *)a2;
      long long v21 = *(_OWORD *)a1;
      uint64_t v25 = *(void *)(a1 + 16);
      long long v24 = v21;
      if (v20(&v26, &v24))
      {
        uint64_t v22 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v23 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v23;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v22;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, a2, a3, (long long *)a4, a6);
  uint64_t v12 = *a6;
  long long v45 = *a5;
  uint64_t v46 = *((void *)a5 + 2);
  long long v43 = *(_OWORD *)a4;
  uint64_t v44 = *(void *)(a4 + 16);
  if (v12(&v45, &v43))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *((void *)a5 + 2);
    *(_OWORD *)a4 = *a5;
    *(void *)(a4 + 16) = v16;
    *a5 = v15;
    *((void *)a5 + 2) = v14;
    uint64_t v17 = *a6;
    uint64_t v42 = *(void *)(a4 + 16);
    long long v41 = *(_OWORD *)a4;
    long long v18 = *(_OWORD *)a3;
    uint64_t v40 = *(void *)(a3 + 16);
    long long v39 = v18;
    if (v17(&v41, &v39))
    {
      uint64_t v19 = *(void *)(a3 + 16);
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(void *)(a4 + 16) = v19;
      uint64_t v22 = *a6;
      uint64_t v38 = *(void *)(a3 + 16);
      long long v37 = *(_OWORD *)a3;
      __n128 v23 = *(__n128 *)a2;
      uint64_t v36 = *(void *)(a2 + 16);
      __n128 v35 = v23;
      if (v22(&v37, (long long *)&v35))
      {
        uint64_t v24 = *(void *)(a2 + 16);
        __n128 v25 = *(__n128 *)a2;
        uint64_t v26 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v26;
        *(__n128 *)a3 = v25;
        *(void *)(a3 + 16) = v24;
        uint64_t v27 = *a6;
        uint64_t v34 = *(void *)(a2 + 16);
        __n128 v33 = *(__n128 *)a2;
        __n128 v28 = *(__n128 *)a1;
        uint64_t v32 = *(void *)(a1 + 16);
        __n128 v31 = v28;
        if (v27((long long *)&v33, (long long *)&v31))
        {
          uint64_t v29 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v30 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v30;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,cv3d::cv::gess::math::MatrixElementT<double>*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, long long *))
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, a4, v9, v12);
        uint64_t v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        long long v15 = *a4;
        __n128 v27 = *v14;
        uint64_t v28 = v14[1].n128_i64[0];
        __n128 v25 = *a1;
        unint64_t v26 = a1[1].n128_u64[0];
        if (v15(&v27, (long long *)&v25))
        {
          unint64_t v16 = v14[1].n128_u64[0];
          __n128 v17 = *v14;
          unint64_t v18 = a1[1].n128_u64[0];
          __n128 *v14 = *a1;
          v14[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, a4, v9, a1);
        }
        uint64_t v14 = (__n128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v19 = v8 / 0x18uLL;
      long long v20 = (__n128 *)((char *)a2 - 24);
      do
      {
        __n128 v29 = *a1;
        unint64_t v30 = a1[1].n128_u64[0];
        uint64_t v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, (unsigned int (**)(long long *, long long *))a4, v19);
        if (v20 == (__n128 *)v21)
        {
          *(__n128 *)uint64_t v21 = v29;
          *(void *)(v21 + 16) = v30;
        }
        else
        {
          __n128 v22 = *v20;
          *(void *)(v21 + 16) = v20[1].n128_u64[0];
          *(__n128 *)uint64_t v21 = v22;
          __n128 *v20 = v29;
          v20[1].n128_u64[0] = v30;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, v21 + 24, (unsigned int (**)(long long *, long long *))a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - (uint64_t)a1) >> 3));
        }
        long long v20 = (__n128 *)((char *)v20 - 24);
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, unsigned int (**a2)(__n128 *, long long *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v41 = v4;
    uint64_t v42 = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3)
      {
        long long v15 = *a2;
        __n128 v39 = *(__n128 *)v13;
        uint64_t v40 = *(void *)(v13 + 16);
        long long v37 = *(_OWORD *)(v13 + 24);
        uint64_t v38 = *(void *)(v13 + 40);
        if (v15(&v39, &v37))
        {
          v13 += 24;
          uint64_t v12 = v14;
        }
      }
      unint64_t v16 = (uint64_t (*)(__n128 *, __n128 *))*a2;
      __n128 v35 = *(__n128 *)v13;
      uint64_t v36 = *(void *)(v13 + 16);
      __n128 v33 = *v7;
      unint64_t v34 = v7[1].n128_u64[0];
      if ((v16(&v35, &v33) & 1) == 0)
      {
        __n128 v31 = *v7;
        unint64_t v32 = v7[1].n128_u64[0];
        do
        {
          unint64_t v18 = (__n128 *)v13;
          __n128 v19 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          __n128 *v7 = v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v20;
          if (2 * v12 + 2 < a3)
          {
            uint64_t v21 = *a2;
            __n128 v29 = *(__n128 *)v13;
            uint64_t v30 = *(void *)(v13 + 16);
            long long v27 = *(_OWORD *)(v13 + 24);
            uint64_t v28 = *(void *)(v13 + 40);
            if (v21(&v29, &v27))
            {
              v13 += 24;
              uint64_t v20 = 2 * v12 + 2;
            }
          }
          __n128 v22 = *a2;
          __n128 v25 = *(__n128 *)v13;
          uint64_t v26 = *(void *)(v13 + 16);
          __n128 v23 = v31;
          unint64_t v24 = v32;
          uint64_t v7 = v18;
          uint64_t v12 = v20;
        }
        while (!v22(&v25, (long long *)&v23));
        __n128 result = v31;
        v18[1].n128_u64[0] = v32;
        *unint64_t v18 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, unsigned int (**a2)(long long *, long long *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *a2;
      uint64_t v13 = *(void *)(v9 + 16);
      long long v19 = *(_OWORD *)v9;
      uint64_t v20 = v13;
      uint64_t v14 = *(void *)(v9 + 40);
      long long v17 = *(_OWORD *)(v9 + 24);
      uint64_t v18 = v14;
      if (v12(&v19, &v17))
      {
        v9 += 24;
        uint64_t v10 = v11;
      }
    }
    long long v15 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v15;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    unint64_t v10 = v6 >> 1;
    uint64_t v11 = (long long *)(a1 + 24 * (v6 >> 1));
    uint64_t v12 = *a3;
    long long v27 = *v11;
    uint64_t v28 = *((void *)v11 + 2);
    long long v25 = *(_OWORD *)(a2 - 24);
    uint64_t v26 = *(void *)(a2 - 8);
    if (v12(&v27, &v25))
    {
      uint64_t v14 = (long long *)(a2 - 24);
      long long v23 = *(_OWORD *)(a2 - 24);
      uint64_t v24 = *(void *)(a2 - 8);
      do
      {
        long long v15 = v11;
        long long v16 = *v11;
        *((void *)v14 + 2) = *((void *)v11 + 2);
        long long *v14 = v16;
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        uint64_t v11 = (long long *)(a1 + 24 * v10);
        long long v17 = *a3;
        long long v21 = *v11;
        uint64_t v22 = *((void *)v11 + 2);
        long long v19 = v23;
        uint64_t v20 = v24;
        char v18 = v17(&v21, &v19);
        uint64_t v14 = v15;
      }
      while ((v18 & 1) != 0);
      double result = *(double *)&v23;
      long long *v15 = v23;
      *((void *)v15 + 2) = v24;
    }
  }
  return result;
}

uint64_t *cv3d::cv::gess::math::SparseMatrixT<double>::Multiply(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (unint64_t *)result[5];
    unint64_t v6 = *v5;
    do
    {
      uint64_t v7 = v4 + 1;
      unint64_t v8 = v5[v4 + 1];
      double v9 = 0.0;
      unint64_t v10 = v8 - v6;
      if (v8 > v6)
      {
        uint64_t v11 = (double *)(result[2] + 24 * v6 + 16);
        do
        {
          double v9 = v9 + *v11 * *(double *)(a2 + 8 * *((void *)v11 - 1));
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      *(double *)(a3 + 8 * v4) = v9;
      unint64_t v6 = v8;
      ++v4;
    }
    while (v7 != v3);
  }
  return result;
}

BOOL cv3d::cv::gess::alg::internal::CompileShaders(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v11 = *(void **)a1;
  id v18 = 0;
  uint64_t v12 = GetMTLLibrary(v11, (uint64_t)&v18, a5, a7);
  id v13 = v18;
  uint64_t v14 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v12;

  if (v13)
  {
    if (a4) {
      *(_DWORD *)(a3 + 384) = 5;
    }
    if (*(void *)(a6 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a6, 5);
      if (v17 < 0) {
        operator delete(__p);
      }
    }
  }

  return v13 == 0;
}

void sub_24F53316C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::InternalRasterize(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  context = (void *)MEMORY[0x25335EE00]();
  int64_t v18 = *(void *)(a3 + 8) - *(void *)a3;
  v142 = *(unsigned int **)(a5 + 4);
  int v19 = a2[3];
  int v144 = a2[1];
  int v140 = a2[2];
  int v141 = *a2;
  uint64_t v20 = (void *)[*(id *)a1 newBufferWithLength:v18 options:0];
  uint64_t v146 = a1;
  id v145 = (id)[*(id *)a1 newBufferWithLength:(unint64_t)(2* (((unint64_t)((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2)* (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL options:0];
  if (v20 && v145)
  {
    id v127 = v145;
    uint64_t v21 = [v127 contents];
    id v126 = v20;
    memcpy((void *)[v126 contents], *(const void **)a3, v18);
    uint64_t v22 = *(void *)(a3 + 8) - *(void *)a3;
    if ((unint64_t)v22 >= 0xC)
    {
      uint64_t v23 = 0;
      unint64_t v24 = (v22 >> 2) / 3uLL;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      do
      {
        *(_DWORD *)(v21 + 4 * v23) = v23;
        ++v23;
      }
      while (v24 != v23);
    }
    uint64_t v137 = [*(id *)a1 newBufferWithLength:64 options:0];
    if (!v137)
    {
      if (a10) {
        *(_DWORD *)(a9 + 384) = 2;
      }
      __n128 v35 = 0;
      if (*(void *)(a11 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(&v158, (char *)&unk_24F58DDD7);
        std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 2);
        if (SBYTE7(v159) < 0) {
          operator delete((void *)v158);
        }
      }
      int v34 = 1;
      goto LABEL_76;
    }
    long long v158 = xmmword_24F570A10;
    long long v159 = xmmword_24F5715A0;
    long long v160 = xmmword_24F5715B0;
    long long v161 = xmmword_24F578DE0;
    std::string v130 = [*(id *)(a1 + 8) commandBuffer];
    long long v25 = objc_opt_new();
    v138 = v25;
    if (v141)
    {
      uint64_t v26 = [v25 colorAttachments];
      long long v27 = [v26 objectAtIndexedSubscript:1];

      [v27 setTexture:*(void *)(a1 + 32)];
      [v27 setLoadAction:2];
      [v27 setStoreAction:1];
      objc_msgSend(v27, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

      long long v25 = v138;
    }
    if (!v19)
    {
      if (v144)
      {
        uint64_t v28 = [v25 colorAttachments];
        uint64_t v29 = [v28 objectAtIndexedSubscript:2];

        [v29 setTexture:*(void *)(a1 + 40)];
        [v29 setLoadAction:2];
        [v29 setStoreAction:1];
        objc_msgSend(v29, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        long long v25 = v138;
      }
      if (v140)
      {
        uint64_t v30 = [v25 colorAttachments];
        __n128 v31 = [v30 objectAtIndexedSubscript:3];

        [v31 setTexture:*(void *)(a1 + 24)];
        [v31 setLoadAction:2];
        [v31 setStoreAction:1];
        objc_msgSend(v31, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        long long v25 = v138;
      }
    }
    unint64_t v32 = v25;
    objc_msgSend(v25, "setRenderTargetWidth:");
    objc_msgSend(v32, "setRenderTargetHeight:");
    [v32 setRenderTargetArrayLength:1];
    [v32 setDefaultRasterSampleCount:1];
    std::string::basic_string[abi:ne180100]<0>(&v157, "VSAC");
    std::string::basic_string[abi:ne180100]<0>(&v154, (char *)&unk_24F58DDD7);
    if (!v144 || v19)
    {
      if (v144 | v19)
      {
        if (v19 && v144)
        {
          if (v156 < 0)
          {
            uint64_t v155 = 6;
            uint64_t v36 = v154;
          }
          else
          {
            char v156 = 6;
            uint64_t v36 = (void **)&v154;
          }
          __int16 v39 = 20304;
        }
        else
        {
          if (v156 < 0)
          {
            uint64_t v155 = 6;
            uint64_t v36 = v154;
          }
          else
          {
            char v156 = 6;
            uint64_t v36 = (void **)&v154;
          }
          __int16 v39 = 16973;
        }
        *((_WORD *)v36 + 2) = v39;
        *(_DWORD *)uint64_t v36 = 1111708486;
        uint64_t v38 = (char *)v36 + 6;
LABEL_50:
        *uint64_t v38 = 0;
        if (SHIBYTE(v157.__end_cap_.__value_) >= 0) {
          begin = &v157;
        }
        else {
          begin = v157.__begin_;
        }
        uint64_t v135 = [NSString stringWithUTF8String:begin];
        if (v156 >= 0) {
          uint64_t v41 = (void **)&v154;
        }
        else {
          uint64_t v41 = v154;
        }
        int v133 = [NSString stringWithUTF8String:v41];
        unsigned __int16 v131 = (void *)[*(id *)(a1 + 16) newFunctionWithName:v135];
        uint64_t v128 = a7;
        uint64_t v42 = (void *)[*(id *)(a1 + 16) newFunctionWithName:v133];
        id v43 = objc_alloc_init(MEMORY[0x263F129C0]);
        [v43 setVertexFunction:v131];
        [v43 setFragmentFunction:v42];
        if (v141)
        {
          uint64_t v44 = [v43 colorAttachments];
          long long v45 = [v44 objectAtIndexedSubscript:1];
          [v45 setPixelFormat:53];
        }
        if (!v19)
        {
          if (v144)
          {
            uint64_t v46 = [v43 colorAttachments];
            long long v47 = [v46 objectAtIndexedSubscript:2];
            [v47 setPixelFormat:53];
          }
          if (v140)
          {
            uint64_t v48 = [v43 colorAttachments];
            long long v49 = [v48 objectAtIndexedSubscript:3];
            [v49 setPixelFormat:125];
          }
        }
        uint64_t v50 = *(void **)v146;
        id v153 = 0;
        uint64_t v125 = (void *)[v50 newRenderPipelineStateWithDescriptor:v43 error:&v153];
        id v51 = v153;
        if (v51)
        {
          uint64_t v52 = v51;
          if (a10) {
            *(_DWORD *)(a9 + 384) = 5;
          }
          __n128 v35 = (void *)v137;
          long long v53 = v130;
          if (*(void *)(a11 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(v151, (char *)&unk_24F58DDD7);
            std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 5);
            if (v152 < 0) {
              operator delete(v151[0]);
            }
          }

          if (v156 < 0) {
            operator delete(v154);
          }
          if (SHIBYTE(v157.__end_cap_.__value_) < 0) {
            operator delete(v157.__begin_);
          }
        }
        else
        {

          if (v156 < 0) {
            operator delete(v154);
          }
          long long v55 = v125;
          if (SHIBYTE(v157.__end_cap_.__value_) < 0) {
            operator delete(v157.__begin_);
          }
          v157.__begin_ = v142;
          uint64_t v56 = objc_msgSend(v130, "renderCommandEncoderWithDescriptor:", v138, v125);
          [v56 setRenderPipelineState:v55];
          [v56 setCullMode:0];
          [v56 setFrontFacingWinding:1];
          [v56 setVertexBuffer:v126 offset:0 atIndex:0];
          [v56 setVertexBytes:&v158 length:64 atIndex:1];
          [v56 setFragmentBytes:&v157 length:8 atIndex:0];
          unint64_t v57 = 3 * ((v18 >> 2) / 9uLL);
          [v56 drawIndexedPrimitives:3 indexCount:v57 indexType:1 indexBuffer:v127 indexBufferOffset:0];
          [v56 endEncoding];

          if (v19)
          {
            int64x2_t v59 = objc_opt_new();
            float v60 = v59;
            v139 = v59;
            if (v144)
            {
              unsigned int v61 = [v59 colorAttachments];
              id v62 = [v61 objectAtIndexedSubscript:0];

              [v62 setTexture:*(void *)(v146 + 40)];
              [v62 setLoadAction:2];
              [v62 setStoreAction:1];
              objc_msgSend(v62, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
            }
            if (v140)
            {
              id v63 = [v60 colorAttachments];
              id v64 = [v63 objectAtIndexedSubscript:1];

              [v64 setTexture:*(void *)(v146 + 24)];
              [v64 setLoadAction:2];
              [v64 setStoreAction:1];
              objc_msgSend(v64, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
            }
            [v60 setRenderTargetWidth:v142];
            [v60 setRenderTargetHeight:HIDWORD(v142)];
            [v60 setRenderTargetArrayLength:1];
            [v60 setDefaultRasterSampleCount:1];
            std::string::basic_string[abi:ne180100]<0>(&v157, (char *)&unk_24F58DDD7);
            std::string::basic_string[abi:ne180100]<0>(&v154, (char *)&unk_24F58DDD7);
            if (v144)
            {
              if (SHIBYTE(v157.__end_cap_.__value_) < 0)
              {
                v157.__end_ = (std::vector<unsigned int>::pointer)7;
                float v65 = (char *)v157.__begin_;
              }
              else
              {
                HIBYTE(v157.__end_cap_.__value_) = 7;
                float v65 = (char *)&v157;
              }
              strcpy(v65, "BVSCBPO");
              if (v156 < 0)
              {
                uint64_t v155 = 7;
                id v67 = v154;
              }
              else
              {
                char v156 = 7;
                id v67 = (void **)&v154;
              }
              int v68 = 1330659907;
            }
            else
            {
              if (SHIBYTE(v157.__end_cap_.__value_) < 0)
              {
                v157.__end_ = (std::vector<unsigned int>::pointer)7;
                char v66 = (char *)v157.__begin_;
              }
              else
              {
                HIBYTE(v157.__end_cap_.__value_) = 7;
                char v66 = (char *)&v157;
              }
              strcpy(v66, "BVSCBMB");
              if (v156 < 0)
              {
                uint64_t v155 = 7;
                id v67 = v154;
              }
              else
              {
                char v156 = 7;
                id v67 = (void **)&v154;
              }
              int v68 = 1112359491;
            }
            *(_DWORD *)((char *)v67 + 3) = v68;
            *(_DWORD *)id v67 = 1129530946;
            *((unsigned char *)v67 + 7) = 0;
            if (SHIBYTE(v157.__end_cap_.__value_) >= 0) {
              unsigned int v69 = &v157;
            }
            else {
              unsigned int v69 = v157.__begin_;
            }
            uint64_t v70 = [NSString stringWithUTF8String:v69];
            unint64_t v132 = v57;
            v134 = (void *)v70;
            if (v156 >= 0) {
              uint64_t v71 = (void **)&v154;
            }
            else {
              uint64_t v71 = v154;
            }
            uint64_t v72 = [NSString stringWithUTF8String:v71];
            unsigned int v73 = (void *)[*(id *)(v146 + 16) newFunctionWithName:v70];
            uint64_t v74 = (void *)[*(id *)(v146 + 16) newFunctionWithName:v72];
            unsigned int v75 = objc_opt_new();
            [v75 setVertexFunction:v73];
            [v75 setFragmentFunction:v74];
            if (v144)
            {
              BOOL v76 = [v75 colorAttachments];
              uint64_t v77 = [v76 objectAtIndexedSubscript:0];
              [v77 setPixelFormat:53];
            }
            if (v140)
            {
              float32x4_t v78 = [v75 colorAttachments];
              float32x4_t v79 = [v78 objectAtIndexedSubscript:1];
              [v79 setPixelFormat:125];
            }
            unsigned int v80 = *(void **)v146;
            id v150 = 0;
            v136 = (void *)[v80 newRenderPipelineStateWithDescriptor:v75 error:&v150];
            id v81 = v150;
            if (v81)
            {
              float v82 = v81;
              if (a10) {
                *(_DWORD *)(a9 + 384) = 5;
              }
              if (*(void *)(a11 + 24))
              {
                std::string::basic_string[abi:ne180100]<0>(v151, (char *)&unk_24F58DDD7);
                std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 5);
                if (v152 < 0) {
                  operator delete(v151[0]);
                }
              }

              if (v156 < 0) {
                operator delete(v154);
              }
              __n128 v35 = (void *)v137;
              long long v53 = v130;
              if (SHIBYTE(v157.__end_cap_.__value_) < 0) {
                operator delete(v157.__begin_);
              }

              goto LABEL_74;
            }

            if (v156 < 0) {
              operator delete(v154);
            }
            if (SHIBYTE(v157.__end_cap_.__value_) < 0) {
              operator delete(v157.__begin_);
            }
            v157.__begin_ = v142;
            float v83 = [v130 renderCommandEncoderWithDescriptor:v139];
            [v83 setRenderPipelineState:v136];
            [v83 setCullMode:0];
            [v83 setFrontFacingWinding:1];
            [v83 setVertexBuffer:v126 offset:0 atIndex:0];
            [v83 setVertexBytes:&v158 length:64 atIndex:1];
            [v83 setFragmentBytes:&v157 length:8 atIndex:0];
            [v83 drawIndexedPrimitives:3 indexCount:v132 indexType:1 indexBuffer:v127 indexBufferOffset:0];
            [v83 endEncoding];
          }
          long long v53 = v130;
          cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v58);
          [v130 commit];
          [v130 waitUntilCompleted];
          unsigned int v84 = [v130 error];
          __n128 v35 = (void *)v137;
          BOOL v86 = cv3d::cv::gess::alg::internal::GPUEncountersError(v84, v85);

          if (!v86)
          {
            uint64_t v87 = 4 * v142;
            if (v141)
            {
              std::vector<unsigned int>::vector(&v157, (HIDWORD(v142) * v142));
              unsigned int v88 = *(void **)(v146 + 32);
              memset(v149, 0, 24);
              v149[3] = v142;
              v149[4] = HIDWORD(v142);
              v149[5] = 1;
              [v88 getBytes:v157.__begin_ bytesPerRow:v87 fromRegion:v149 mipmapLevel:0];
              int v89 = *(_DWORD *)(a5 + 8);
              unsigned int v90 = v157.__begin_;
              if (v89)
              {
                int v91 = 0;
                int v92 = 0;
                uint64_t v93 = *(unsigned int *)(a5 + 4);
                uint64_t v94 = *(void *)(a5 + 16);
                int v95 = *(_DWORD *)(a5 + 12);
                unsigned int v96 = v93 * v95 * (v89 - 1);
                do
                {
                  uint64_t v97 = v93;
                  int v98 = v91;
                  unsigned int v99 = v96;
                  if (v93)
                  {
                    do
                    {
                      *(unsigned char *)(v94 + v99) = v90[v98] > 0x80;
                      v99 += v95;
                      ++v98;
                      --v97;
                    }
                    while (v97);
                  }
                  ++v92;
                  v96 -= v93 * v95;
                  v91 += v93;
                }
                while (v92 != v89);
                unsigned int v90 = v157.__begin_;
              }
              if (v90)
              {
                v157.__end_ = v90;
                operator delete(v90);
              }
            }
            if (v144)
            {
              std::vector<unsigned int>::vector(&v157, (HIDWORD(v142) * v142));
              uint64_t v100 = *(void **)(v146 + 40);
              memset(v148, 0, 24);
              v148[3] = v142;
              v148[4] = HIDWORD(v142);
              v148[5] = 1;
              [v100 getBytes:v157.__begin_ bytesPerRow:v87 fromRegion:v148 mipmapLevel:0];
              unsigned int v101 = *(_DWORD *)(a5 + 8);
              if (v101)
              {
                unsigned int v102 = 0;
                unsigned int v103 = *(_DWORD *)(a5 + 4);
                int v104 = -1;
                do
                {
                  if (v103)
                  {
                    unsigned int v105 = 0;
                    unsigned int v106 = v101 + v104;
                    do
                    {
                      *(_DWORD *)(*(void *)(a6 + 16) + 4
                                                       * (v105 + v106 * *(_DWORD *)(a6 + 4))
                                                       * *(_DWORD *)(a6 + 12)) = *(_DWORD *)(*a4
                                                                                           + 4
                                                                                           * v157.__begin_[v105 + v102 * v103]);
                      ++v105;
                      unsigned int v103 = *(_DWORD *)(a5 + 4);
                    }
                    while (v105 < v103);
                    unsigned int v101 = *(_DWORD *)(a5 + 8);
                  }
                  ++v102;
                  --v104;
                }
                while (v102 < v101);
              }
              if (v157.__begin_)
              {
                v157.__end_ = v157.__begin_;
                operator delete(v157.__begin_);
              }
            }
            if (v140)
            {
              unsigned int v107 = HIDWORD(v142) >> 2;
              v129 = v20;
              std::vector<float>::vector(&v157, (4 * v142 * (HIDWORD(v142) >> 2)));
              uint64_t v108 = 0;
              int v109 = -1;
              do
              {
                unint64_t v110 = v108 * v107;
                if (v108 == 3) {
                  unsigned int v111 = HIDWORD(v142);
                }
                else {
                  unsigned int v111 = v107 + v108 * v107;
                }
                std::vector<float>::resize((uint64_t)&v157, 4 * v142 * (v111 - v110));
                float v112 = *(void **)(v146 + 24);
                v147[0] = 0;
                v147[1] = v108 * v107;
                v147[2] = 0;
                v147[3] = v142;
                v147[4] = v111 - v110;
                v147[5] = 1;
                [v112 getBytes:v157.__begin_ bytesPerRow:16 * v142 fromRegion:v147 mipmapLevel:0];
                uint64_t v20 = v129;
                if (v110 < v111)
                {
                  int v113 = 0;
                  uint64_t v114 = *(unsigned int *)(a5 + 4);
                  uint64_t v115 = *(void *)(v128 + 16);
                  int v116 = *(_DWORD *)(v128 + 12);
                  std::vector<unsigned int>::pointer v117 = v157.__begin_;
                  int v118 = *(_DWORD *)(v128 + 4) * v116;
                  int v119 = v118 * (*(_DWORD *)(a5 + 8) + v109);
                  do
                  {
                    uint64_t v120 = v114;
                    int v121 = v113;
                    unsigned int v122 = v119;
                    if (v114)
                    {
                      do
                      {
                        v123 = (unsigned int *)(v115 + 16 * v122);
                        uint64_t v124 = &v117[4 * v121];
                        unsigned int *v123 = *v124;
                        v123[1] = v124[1];
                        v123[2] = v124[2];
                        v122 += v116;
                        ++v121;
                        --v120;
                      }
                      while (v120);
                    }
                    LODWORD(v110) = v110 + 1;
                    v119 -= v118;
                    v113 += v114;
                  }
                  while (v110 < v111);
                }
                ++v108;
                v109 -= v107;
              }
              while (v108 != 4);
              if (v157.__begin_)
              {
                v157.__end_ = v157.__begin_;
                operator delete(v157.__begin_);
              }
              int v34 = 0;
              __n128 v35 = (void *)v137;
              long long v53 = v130;
            }
            else
            {
              int v34 = 0;
            }
            goto LABEL_75;
          }
          if (a10) {
            *(_DWORD *)(a9 + 384) = 16;
          }
          if (*(void *)(a11 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(&v157, (char *)&unk_24F58DDD7);
            std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 16);
            if (SHIBYTE(v157.__end_cap_.__value_) < 0) {
              operator delete(v157.__begin_);
            }
          }
        }
LABEL_74:
        int v34 = 1;
LABEL_75:

LABEL_76:
        goto LABEL_77;
      }
      if (v156 < 0)
      {
        uint64_t v155 = 7;
        __n128 v33 = v154;
      }
      else
      {
        char v156 = 7;
        __n128 v33 = (void **)&v154;
      }
      int v37 = 1112359491;
    }
    else
    {
      if (v156 < 0)
      {
        uint64_t v155 = 7;
        __n128 v33 = v154;
      }
      else
      {
        char v156 = 7;
        __n128 v33 = (void **)&v154;
      }
      int v37 = 1330659907;
    }
    *(_DWORD *)((char *)v33 + 3) = v37;
    *(_DWORD *)__n128 v33 = 1129206598;
    uint64_t v38 = (char *)v33 + 7;
    goto LABEL_50;
  }
  if (a10) {
    *(_DWORD *)(a9 + 384) = 2;
  }
  if (*(void *)(a11 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v158, (char *)&unk_24F58DDD7);
    std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a11, 2);
    if (SBYTE7(v159) < 0) {
      operator delete((void *)v158);
    }
  }
  int v34 = 1;
LABEL_77:

  return v34 == 0;
}

void sub_24F534288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::internal::GPURasterize()
{
}

void sub_24F5359F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void ***a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,id *a48)
{
  if (*(char *)(v48 - 153) < 0) {
    operator delete(*(void **)(v48 - 176));
  }
  if (a31) {
    MEMORY[0x25335E9F0](a31 - 16, 0x1000C80451B5BE8);
  }
  if (a35) {
    MEMORY[0x25335E9F0](a35, 0x1000C8052888210);
  }
  if (a39) {
    MEMORY[0x25335E9F0](a39, 0x1000C8077774924);
  }
  a37 = &a42;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a42 = (void **)&a45;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a42);
  uint64_t v50 = a48;
  a48 = 0;
  if (v50) {
    std::default_delete<cv3d::cv::gess::alg::internal::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&a48, v50);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>::AllocateMemory(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    MEMORY[0x25335E9F0](v1, 0x1000C8052888210);
  }
  operator new[]();
}

void cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>::AllocateMemory(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    MEMORY[0x25335E9F0](v1 - 16, 0x1000C80451B5BE8);
  }
  operator new[]();
}

void cv3d::cv::gess::alg::internal::RasterizeSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  MEMORY[0x25335EE00]();
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v9, a9);
  cv3d::cv::gess::alg::internal::GPURasterize();
}

void sub_24F535DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F535EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::default_delete<cv3d::cv::gess::alg::internal::MetalContextImpl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x25335EA10);
  }
}

unint64_t cv3d::cv::gess::alg::internal::aligned_with_page_size(unint64_t this)
{
  unint64_t v1 = this % *MEMORY[0x263EF8AF8];
  if (v1) {
    return *MEMORY[0x263EF8AF8] + this - v1;
  }
  return this;
}

uint64_t cv3d::cv::gess::alg::internal::RunRoughness(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t *a11, uint64_t a12, unsigned __int8 a13)
{
  int v79 = a6;
  v80[0] = a5;
  int v19 = (void *)MEMORY[0x25335EE00]();
  unint64_t v20 = (a6 * a5);
  uint64_t v21 = (void *)MEMORY[0x263EF8AF8];
  unint64_t v22 = 12 * v20 % *MEMORY[0x263EF8AF8];
  if (v22) {
    uint64_t v23 = *MEMORY[0x263EF8AF8] + 12 * v20 - v22;
  }
  else {
    uint64_t v23 = 12 * v20;
  }
  unint64_t v24 = (void *)[*a1 newBufferWithBytesNoCopy:*(void *)(a2 + 16) length:v23 options:0 deallocator:0];
  unint64_t v25 = 4 * v20;
  unint64_t v26 = v25 % *v21;
  if (v26) {
    uint64_t v27 = *v21 + 4 * v20 - v26;
  }
  else {
    uint64_t v27 = 4 * v20;
  }
  uint64_t v28 = (void *)[*a1 newBufferWithBytesNoCopy:*(void *)(a3 + 16) length:v27 options:0 deallocator:0];
  unint64_t v29 = v25 % *v21;
  if (v29) {
    uint64_t v30 = *v21 + v25 - v29;
  }
  else {
    uint64_t v30 = 4 * v20;
  }
  uint64_t v31 = [*a1 newBufferWithBytesNoCopy:*(void *)(a4 + 16) length:v30 options:0 deallocator:0];
  unint64_t v32 = (void *)v31;
  if (v24 && v28 && v31)
  {
    int v75 = 31;
    std::vector<float>::vector(&v76, 0x3C1uLL);
    char v66 = v19;
    id v63 = v32;
    int v33 = 0;
    int v34 = 0;
    float v35 = (float)((float)((float)0x1Fu * 0.3) + 0.8) * 0.5;
    double v36 = 1.0 / ((float)((float)(v35 * v35) + (float)(v35 * v35)) * 3.14159265);
    float v37 = v35 * (float)(v35 + v35);
    uint64_t v38 = v76;
    float v39 = 0.0;
    do
    {
      for (int i = 0; i != 31; ++i)
      {
        float v41 = v36 * expf((float)-((v33 - 15) * (v33 - 15) + (i - 15) * (i - 15)) / v37);
        float v39 = v39 + v41;
        v38[v34 + i] = v41;
      }
      ++v33;
      v34 += 31;
    }
    while (v33 != 31);
    int v42 = 0;
    int v43 = 0;
    uint64_t v44 = v76;
    unint64_t v32 = v63;
    do
    {
      for (int j = 0; j != 31; ++j)
        v44[v42 + j] = v44[v42 + j] / v39;
      ++v43;
      v42 += 31;
    }
    while (v43 != 31);
    id v46 = *a1;
    id v74 = 0;
    long long v47 = GetMTLLibrary(v46, (uint64_t)&v74, a11, a13);
    id v48 = v74;
    if (v48)
    {
      id v49 = v48;
      if (a10) {
        *(_DWORD *)(a9 + 384) = 5;
      }
      if (*(void *)(a12 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
        std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a12, 5);
        if (v73 < 0) {
          operator delete(__p[0]);
        }
      }
      int v50 = 1;
      unsigned int v51 = 1;
    }
    else
    {
      id v64 = objc_alloc_init(MEMORY[0x263F12850]);
      [v64 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:1];
      uint64_t v52 = (void *)[v47 newFunctionWithName:@"wkecUsTj5u"];
      [v64 setComputeFunction:v52];

      id v53 = *a1;
      id v71 = 0;
      uint64_t v54 = (void *)[v53 newComputePipelineStateWithDescriptor:v64 options:0 reflection:0 error:&v71];
      id v49 = v71;
      if (v54)
      {
        float v65 = [a1[1] commandBuffer];
        long long v55 = v54;
        unint64_t v56 = [v54 maxTotalThreadsPerThreadgroup];
        if (v56 >= v20) {
          unint64_t v57 = v20;
        }
        else {
          unint64_t v57 = v56;
        }
        uint64_t v58 = [v65 computeCommandEncoder];
        [v58 setBuffer:v24 offset:0 atIndex:0];
        [v58 setBuffer:v28 offset:0 atIndex:1];
        [v58 setBuffer:v32 offset:0 atIndex:2];
        [v58 setBytes:v76 length:(char *)v77 - (char *)v76 atIndex:3];
        [v58 setBytes:&v75 length:4 atIndex:4];
        [v58 setBytes:v80 length:4 atIndex:5];
        [v58 setBytes:&v79 length:4 atIndex:6];
        [v58 setComputePipelineState:v55];
        unint64_t v69 = v20;
        int64x2_t v70 = vdupq_n_s64(1uLL);
        unint64_t v67 = v57;
        int64x2_t v68 = v70;
        [v58 dispatchThreads:&v69 threadsPerThreadgroup:&v67];
        cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)[v58 endEncoding]);
        [v65 commit];
        [v65 waitUntilCompleted];
        int64x2_t v59 = [v65 error];
        BOOL v61 = cv3d::cv::gess::alg::internal::GPUEncountersError(v59, v60);

        uint64_t v54 = v55;
        if (v61)
        {
          if (a10) {
            *(_DWORD *)(a9 + 384) = 16;
          }
          if (*(void *)(a12 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
            std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a12, 16);
            if (v73 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        unsigned int v51 = !v61;

        int v50 = 0;
      }
      else
      {
        if (a10) {
          *(_DWORD *)(a9 + 384) = 5;
        }
        if (*(void *)(a12 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
          std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a12, 5);
          if (v73 < 0) {
            operator delete(__p[0]);
          }
        }
        int v50 = 1;
        unsigned int v51 = 1;
      }
    }
    if (v76)
    {
      uint64_t v77 = v76;
      operator delete(v76);
    }
    int v19 = v66;
  }
  else
  {
    if (a10) {
      *(_DWORD *)(a9 + 384) = 2;
    }
    if (*(void *)(a12 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a12, 2);
      if (v78 < 0) {
        operator delete(v76);
      }
    }
    int v50 = 1;
    unsigned int v51 = 1;
  }

  if (v50) {
    return 0;
  }
  else {
    return v51;
  }
}

void sub_24F536598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  uint64_t v40 = *(void **)(v38 - 152);
  if (v40)
  {
    *(void *)(v38 - 144) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateRoughnessMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  v25[4] = *MEMORY[0x263EF8340];
  int v16 = *(_DWORD *)(a1 + 4);
  int v17 = *(_DWORD *)(a1 + 8);
  context = (void *)MEMORY[0x25335EE00]();
  id v23 = 0;
  id v24 = 0;
  cv3d::cv::gess::alg::internal::ConfigureProcessingContext((uint64_t)&v23);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v25, a8);
  uint64_t v20 = cv3d::cv::gess::alg::internal::RunRoughness(&v23, a1, a2, a3, v16, v17, v18, v19, a5, a6, a7, (uint64_t)v25, a9);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v25);

  return v20;
}

void sub_24F5367D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::ValidateOSStatus(cv3d::cv::gess::alg::internal *this)
{
  cv3d::cv::gess::util::os::GetSystemPhysicalMemory(this);
  cv3d::cv::gess::util::os::GetDiskSpaceInfo(&v3);
  return cv3d::cv::gess::util::os::GetSystemMemoryInfo(&v2);
}

uint64_t cv3d::cv::gess::alg::internal::CreateUVIsoChart(uint64_t a1, int a2, char a3, unsigned int a4, int *a5, uint64_t a6, char a7, uint64_t a8, float a9, uint64_t a10)
{
  v36[4] = *MEMORY[0x263EF8340];
  char v25 = 0;
  int v26 = 100000;
  char v27 = 0;
  uint64_t v30 = 1;
  __int16 v31 = 257;
  char v32 = 1;
  int v28 = a2;
  char v29 = a3;
  uint64_t v23 = a4;
  float v24 = a9;
  int v33 = *a5;
  if (a7)
  {
    long long v19 = 0u;
    memset(v20, 0, sizeof(v20));
    memset(v18, 0, sizeof(v18));
    int v21 = 3;
    char v22 = 1;
    v36[0] = &unk_2700D9028;
    v36[3] = v36;
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v35, a8);
    std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v34, (uint64_t)v36);
    BOOL v13 = cv3d::cv::gess::alg::IsoChartParameterize(a1, (uint64_t)&v23, (uint64_t)v18, (uint64_t)v35, (uint64_t)v34);
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v34);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v35);
    if (v21)
    {
      if (v21 == 1)
      {
        *(_DWORD *)(a6 + 384) = 22;
        if (*(void *)(a10 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
          std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a10, 22);
LABEL_10:
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else
      {
        if (v21 != 2)
        {
          uint64_t v14 = *(void *)(a8 + 24);
          if (!v14 || ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14) & 1) == 0)
          {
            *(void *)(a6 + 224) = *(void *)&v18[0];
            *(void *)(a6 + 232) = *((void *)&v19 + 1);
            *(void *)(a6 + 256) = *(void *)v20;
            *(void *)(a6 + 264) = *(void *)&v20[8];
            *(void *)(a6 + 240) = *(void *)&v20[16];
            *(_DWORD *)(a6 + 248) = *(_DWORD *)&v20[24];
            std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v36);
            return v13;
          }
          goto LABEL_14;
        }
        *(_DWORD *)(a6 + 384) = 11;
        if (*(void *)(a10 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
          std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a10, 11);
          goto LABEL_10;
        }
      }
    }
LABEL_14:
    std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v36);
    return 0;
  }
  return cv3d::cv::gess::alg::IsoChartParameterize(a1, (uint64_t)&v23);
}

void sub_24F536AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v15 - 88));
  _Unwind_Resume(a1);
}

double cv3d::cv::gess::alg::internal::CreateBlenderUV2(uint64_t a1, int a2, char a3, int a4, int *a5, uint64_t a6, char a7, uint64_t a8)
{
  v19[0] = 1.0472;
  LODWORD(v19[1]) = a2;
  char v20 = a3;
  if (a4 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
  if (!a4) {
    int v8 = 0;
  }
  int v21 = v8;
  int v22 = *a5;
  if (a7)
  {
    long long v15 = 0u;
    memset(v16, 0, sizeof(v16));
    memset(v14, 0, sizeof(v14));
    int v17 = 3;
    char v18 = 1;
    cv3d::cv::gess::alg::BlenderUV2Parameterize(a1, v19, v14);
    if (v17)
    {
      if (v17 == 2)
      {
        *(_DWORD *)(a6 + 384) = 11;
        if (*(void *)(a8 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
          std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a8, 11);
          if (v13 < 0) {
            operator delete(__p);
          }
        }
      }
      else
      {
        *(void *)(a6 + 224) = *(void *)&v14[0];
        *(void *)(a6 + 232) = *((void *)&v15 + 1);
        double result = *(double *)v16;
        *(void *)(a6 + 256) = *(void *)v16;
        *(void *)(a6 + 264) = *(void *)&v16[8];
      }
    }
  }
  else
  {
    cv3d::cv::gess::alg::BlenderUV2Parameterize(a1, v19);
  }
  return result;
}

void sub_24F536C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::CreateUVAuto(uint64_t a1, int a2, char a3, unsigned int a4, uint64_t a5, char a6, unsigned int a7, int a8, float a9, int *a10, uint64_t a11, uint64_t a12)
{
  v25[4] = *MEMORY[0x263EF8340];
  if (a7 >= (unint64_t)((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2))
  {
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, a11);
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v24, a12);
    uint64_t UVIsoChart = cv3d::cv::gess::alg::internal::CreateUVIsoChart(a1, a2, a3, a4, a10, a5, a6, (uint64_t)v25, a9, (uint64_t)v24);
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v24);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v25);
  }
  else
  {
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v23, a12);
    cv3d::cv::gess::alg::internal::CreateBlenderUV2(a1, a2, a3, a8, a10, a5, a6, (uint64_t)v23);
    uint64_t UVIsoChart = v18;
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v23);
  }
  return UVIsoChart;
}

void sub_24F536D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::GetLowMeshFromHighMesh(cv3d::cv::gess::mesh::PolyMesh *a1, cv3d::cv::gess::mesh::PolyMesh *this, uint64_t a3, int *a4, int *a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::chrono::system_clock::time_point *a12)
{
  v62[4] = *MEMORY[0x263EF8340];
  int v19 = a7;
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)this, (void **)a1);
  uint64_t v20 = (*((void *)a1 + 20) - *((void *)a1 + 19)) >> 2;
  unsigned int v21 = *(_DWORD *)(a3 + 4);
  float v22 = 0.0;
  if (v21 <= v20)
  {
    float v22 = *(float *)a3;
    unsigned int v23 = (float)((float)(1.0 - *(float *)a3) * (float)v20);
    if (v21 > v23 || (unsigned int v21 = *(_DWORD *)(a3 + 8), v21 < v23)) {
      float v22 = 1.0 - (float)((float)v21 / (float)v20);
    }
  }
  __int16 v51 = 256;
  int v52 = 1065353216;
  float v50 = v22;
  if (v20 >= 0x1E8481 && v22 > 0.99) {
    HIBYTE(v51) = 0;
  }
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v62, a9);
  cv3d::cv::gess::alg::QuadricErrorMetricSimplify(this, (int *)&v50, (uint64_t)v62);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v62);
  uint64_t v24 = *(void *)(a9 + 24);
  if (v24)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24)) {
      return 0;
    }
    uint64_t v25 = *(void *)(a9 + 24);
    if (v25)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(v25)) {
        return 0;
      }
    }
  }
  cv3d::cv::gess::alg::TangentialRelaxation(this, (cv3d::cv::gess::mesh::TriMesh *)2, 1.0, 1);
  if (*(void *)(a8 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()(a8, (uint64_t)__p, 15.0);
    if (v54 < 0) {
      operator delete(__p[0]);
    }
  }
  v26.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v19) {
    *(double *)(a6 + 120) = (double)(v26.__d_.__rep_ - a12->__d_.__rep_) / 1000000.0;
  }
  a12->__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  int v56 = 0;
  uint64_t v55 = 0;
  int v27 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)a1 + 7, (uint64_t)&v55, (unsigned __int8 *)__p);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v55 = 0;
  int v28 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)a1 + 10, (uint64_t)&v55, (unsigned __int8 *)__p);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  BOOL v30 = v27 != -1 && v28 != -1;
  int v31 = *(_DWORD *)(a3 + 12);
  if (v31)
  {
    if (v31 == 2)
    {
      if (v30 && !cv3d::cv::gess::alg::ComputeIMTFromHighMesh(this, a1, a11))
      {
        int UVAuto = 0;
      }
      else
      {
        int v32 = *a4;
        int v33 = *a5;
        unsigned int v34 = *(_DWORD *)(a3 + 16);
        float v35 = *(float *)(a3 + 20);
        int v36 = *(_DWORD *)(a3 + 24);
        std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v60, a9);
        std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v59, a10);
        int UVAuto = cv3d::cv::gess::alg::internal::CreateUVAuto((uint64_t)this, v32, v33, v34, a6, a7, 0x7A120u, v36, v35, (int *)(a3 + 28), (uint64_t)v60, (uint64_t)v59);
        std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v59);
        std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v60);
      }
      uint64_t v42 = *(void *)(a9 + 24);
      if (!v42) {
        goto LABEL_44;
      }
    }
    else
    {
      if (v30 && !cv3d::cv::gess::alg::ComputeIMTFromHighMesh(this, a1, a11))
      {
        int UVAuto = 0;
      }
      else
      {
        int v43 = *a4;
        int v44 = *a5;
        unsigned int v45 = *(_DWORD *)(a3 + 16);
        float v46 = *(float *)(a3 + 20);
        std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v58, a9);
        std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v57, a10);
        int UVAuto = cv3d::cv::gess::alg::internal::CreateUVIsoChart((uint64_t)this, v43, v44, v45, (int *)(a3 + 28), a6, a7, (uint64_t)v58, v46, (uint64_t)v57);
        std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v57);
        std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v58);
      }
      uint64_t v42 = *(void *)(a9 + 24);
      if (!v42) {
        goto LABEL_44;
      }
    }
  }
  else
  {
    uint64_t v38 = *(void *)a4;
    uint64_t v39 = *(void *)a5;
    int v40 = *(_DWORD *)(a3 + 24);
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v61, a10);
    cv3d::cv::gess::alg::internal::CreateBlenderUV2((uint64_t)this, v38, v39, v40, (int *)(a3 + 28), a6, a7, (uint64_t)v61);
    int UVAuto = v41;
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v61);
    uint64_t v42 = *(void *)(a9 + 24);
    if (!v42) {
      goto LABEL_44;
    }
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v42 + 48))(v42)) {
    return 0;
  }
LABEL_44:
  if (*(void *)(a8 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()(a8, (uint64_t)__p, 21.0);
    if (v54 < 0) {
      operator delete(__p[0]);
    }
  }
  LODWORD(v55) = -1;
  if (UVAuto)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    BOOL v47 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v55, (unsigned __int8 *)__p);
    if (v54 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v47 = 0;
  }
  a12->__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  return v47;
}

void sub_24F537344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (a13) {
      *(_DWORD *)(a16 + 384) = 1;
    }
    if (*(void *)(a15 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(a15, 1);
      if (a24 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x24F537268);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(float,std::string const&)>::operator()(uint64_t a1, uint64_t a2, float a3)
{
  float v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, float *, uint64_t))(*(void *)v3 + 48))(v3, &v5, a2);
}

BOOL cv3d::cv::gess::alg::internal::DetailMap(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, _Unwind_Exception *a6, uint64_t a7)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  int v14 = *(unsigned __int8 *)(a4 + 504);
  std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v126, a7);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v124, a7 + 32);
  char v78 = (cv3d::cv::gess::alg::BakeCallbackBundle *)a7;
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v122, a7 + 64);
  v105.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  unsigned int v103 = 0;
  unsigned int v102 = 0;
  uint64_t v104 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v102, *(const void **)(a4 + 456), *(void *)(a4 + 464), (uint64_t)(*(void *)(a4 + 464) - *(void *)(a4 + 456)) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
  long long v15 = (cv3d::cv::gess::alg::internal *)cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v82, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  cv3d::cv::gess::alg::internal::ValidateOSStatus(v15);
  int v16 = a6;
  cv3d::cv::gess::alg::internal::CustomSortGPU((unint64_t **)&v102);
  BOOL GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v102);
  if (!GPU)
  {
    if ((_BYTE)a6) {
      *(_DWORD *)(a5 + 384) = 17;
    }
    if (v123)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 17);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v127)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v126, (uint64_t)&__str, 7.0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v14) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = GPU;
  }
  if (v18)
  {
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)(a4 + 480), 0);
    if (__str.__r_.__value_.__s.__data_[0] != 255 && __str.__r_.__value_.__s.__data_[0])
    {
      BOOL GPU = 1;
    }
    else
    {
      if ((_BYTE)a6) {
        *(_DWORD *)(a5 + 384) = 4;
      }
      if (v123)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
        std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 4);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      BOOL GPU = 0;
    }
  }
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v82);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v19);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v99);
  uint64_t v20 = (char *)operator new(0x60uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)uint64_t v20 = &unk_2700D9070;
  *(_OWORD *)(v20 + 72) = 0u;
  *((void *)v20 + 9) = v20 + 80;
  unint64_t v21 = *(unsigned int *)(a4 + 60);
  uint64_t v98 = *(unsigned int *)(a4 + 56);
  *(_OWORD *)(v20 + 24) = 0u;
  int v79 = (cv3d::cv::gess::alg *)(v20 + 24);
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *((void *)v20 + 11) = 0;
  unint64_t v97 = v21;
  uint64_t v77 = a3;
  if (!GPU)
  {
    BOOL v22 = 0;
    goto LABEL_56;
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, (char *)&unk_24F58DDD7);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v82, &v96, 0, 0);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  LOWORD(v118[0]) = 1;
  BYTE2(v118[0]) = 1;
  HIDWORD(v118[0]) = 2;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __str = *(std::string *)a1;
  }
  BOOL ObjFile = cv3d::cv::gess::io::LoadObjFile((long long *)&__str, (uint64_t)v99, (uint64_t)v79, (uint64_t)v118);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  LODWORD(v80[0]) = 0;
  if (ObjFile
    && (LODWORD(__str.__r_.__value_.__l.__data_) = 1,
        cv3d::cv::gess::alg::ComputeUVUtilization((uint64_t)v99, v79, (float *)v80, (int *)&__str))
    && (cv3d::cv::gess::alg::AutoMapNumberAndResolution(v79, (Material *)v80, (float *)&v98, &v97, v24) & 1) != 0)
  {
    cv3d::cv::gess::alg::RepairEverything(v99, v25, v26);
    char v27 = 0;
    int v28 = 1;
  }
  else
  {
    if ((_BYTE)a6) {
      *(_DWORD *)(a5 + 384) = 7;
    }
    if (v123)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 7);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    int v28 = 0;
    char v27 = 1;
  }
  if (v127
    && (std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7),
        std::function<void ()(float,std::string const&)>::operator()((uint64_t)v126, (uint64_t)&__str, 10.0),
        SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v27 & 1) == 0)
    {
LABEL_47:
      if (*((void *)v99 + 20) - *((void *)v99 + 19) <= 7uLL)
      {
        if ((_BYTE)a6) {
          *(_DWORD *)(a5 + 384) = 9;
        }
        if (v123)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
          std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 9);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        int v28 = 0;
      }
    }
  }
  else if ((v27 & 1) == 0)
  {
    goto LABEL_47;
  }
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v82);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v29);
  BOOL v22 = v28 != 0;
LABEL_56:
  v30.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((_BYTE)a6) {
    *(double *)a5 = (double)(v30.__d_.__rep_ - v105.__d_.__rep_) / 1000000.0;
  }
  v31.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v105.__d_.__rep_ = v31.__d_.__rep_;
  if (v125 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(void *)v125 + 48))(v125))
  {
    if ((_BYTE)a6) {
      *(_DWORD *)(a5 + 384) = 10;
    }
    if (v123)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 10);
      if (v83 < 0) {
        operator delete(v82[0]);
      }
    }
    BOOL v32 = 0;
    goto LABEL_174;
  }
  int v33 = (cv3d::cv::gess::util::os *)_ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v94);
  if (v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v93, (char *)&unk_24F58DDD7);
    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v82, &v93, 0, 0);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__str, (char *)&unk_24F58DDD7);
    v129.__data_ = (const std::string_view::value_type *)&__str;
    BOOL v34 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)a2, v129);
    BOOL v35 = v34;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v35) {
        goto LABEL_71;
      }
    }
    else if (v34)
    {
LABEL_71:
      int v36 = a6;
      float v37 = v99;
      uint64_t v38 = v94;
      std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v121, (uint64_t)v126);
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)v124);
      std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v119, (uint64_t)v122);
      uint64_t v39 = v38;
      a6 = v36;
      BOOL LowMeshFromHighMesh = cv3d::cv::gess::alg::internal::GetLowMeshFromHighMesh(v37, v39, a4, (int *)&v98, (int *)&v97, a5, v36, (uint64_t)v121, (uint64_t)v120, (uint64_t)v119, (uint64_t)&v102, &v105);
      std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v119);
      std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v120);
      std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v121);
LABEL_91:
      cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v82);
      BOOL v22 = LowMeshFromHighMesh;
      goto LABEL_92;
    }
    HIDWORD(v118[0]) = 3;
    LOWORD(v118[0]) = 1;
    BYTE2(v118[0]) = 0;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __str = *(std::string *)a2;
    }
    char v43 = cv3d::cv::gess::io::LoadObjFile((long long *)&__str, (uint64_t **)v94, v118);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    cv3d::cv::gess::alg::RepairEverything(v94, v41, v42);
    v44.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if ((_BYTE)a6) {
      *(double *)(a5 + 112) = (double)(v44.__d_.__rep_ - v31.__d_.__rep_) / 1000000.0;
    }
    if (v127
      && (std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7),
          std::function<void ()(float,std::string const&)>::operator()((uint64_t)v126, (uint64_t)&__str, 21.0),
          SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0))
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v43) {
        goto LABEL_83;
      }
    }
    else if (v43)
    {
LABEL_83:
      BOOL LowMeshFromHighMesh = 1;
      goto LABEL_91;
    }
    if ((_BYTE)a6) {
      *(_DWORD *)(a5 + 384) = 8;
    }
    if (v123)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 8);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    BOOL LowMeshFromHighMesh = 0;
    goto LABEL_91;
  }
LABEL_92:
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v33);
  if (v125 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(void *)v125 + 48))(v125))
  {
    if (v16) {
      *(_DWORD *)(a5 + 384) = 10;
    }
    if (!v123) {
      goto LABEL_171;
    }
    goto LABEL_169;
  }
  v105.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(&v92, (char *)&unk_24F58DDD7);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v82, &v92, 0, 0);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v92.__r_.__value_.__l.__data_);
    if (v22) {
      goto LABEL_100;
    }
LABEL_102:
    int v45 = 0;
    goto LABEL_103;
  }
  if (!v22) {
    goto LABEL_102;
  }
LABEL_100:
  int v45 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v99);
LABEL_103:
  if (v127)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v126, (uint64_t)&__str, 25.0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v125 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(void *)v125 + 48))(v125))
  {
    if (v16) {
      *(_DWORD *)(a5 + 384) = 10;
    }
    if (v123)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 10);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v82);
    goto LABEL_171;
  }
  if (!v45)
  {
    BOOL v64 = 0;
    goto LABEL_142;
  }
  int v46 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v94);
  int v47 = -1;
  LODWORD(v118[0]) = -1;
  if (v46)
  {
    id v48 = v94;
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    BOOL v49 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v48, v118, (unsigned __int8 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v47 = v118[0];
  }
  else
  {
    BOOL v49 = 0;
  }
  LODWORD(v106) = v47;
  float v50 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v94 + 10, (unsigned int *)&v106);
  uint64_t v51 = (*(uint64_t (**)(void *))(*v50 + 16))(v50);
  LODWORD(v80[0]) = -1;
  int v52 = v94;
  std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  BOOL v53 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)v52, v80, (unsigned __int8 *)&__str);
  BOOL v54 = v53;
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v53) {
      goto LABEL_126;
    }
LABEL_124:
    uint64_t v55 = v94;
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)v55, v80, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_126;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (!v54) {
    goto LABEL_124;
  }
LABEL_126:
  BOOL v74 = v49;
  exception_object = a6;
  LODWORD(v106) = v80[0];
  int v56 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)v94 + 10, (unsigned int *)&v106);
  (*(void (**)(void *, uint64_t))(*v56 + 32))(v56, 1);
  uint64_t v75 = a5;
  unint64_t v57 = (uint64_t **)v56[5];
  if ((uint64_t **)v56[6] == v57) {
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  }
  if (v51)
  {
    uint64_t v58 = 0;
    for (unint64_t i = 0; i != v51; ++i)
    {
      uint64_t v60 = v50[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v50[6] - v60) >> 3) <= i) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      BOOL v61 = (long long *)(v60 + v58);
      if (*((char *)v61 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v61, *((void *)v61 + 1));
      }
      else
      {
        long long v62 = *v61;
        __str.__r_.__value_.__r.__words[2] = *((void *)v61 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v62;
      }
      unsigned __int16 v91 = i;
      unsigned int v106 = &v91;
      id v63 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v57, &v91, (uint64_t)&std::piecewise_construct, &v106);
      std::string::operator=((std::string *)(v63 + 5), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v58 += 24;
    }
  }
  a5 = v75;
  a6 = exception_object;
  BOOL v64 = v74;
  if (v127)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v126, (uint64_t)&__str, 30.0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
LABEL_142:
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v82);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v65);
  if (v125 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(void *)v125 + 48))(v125))
  {
    if (v16) {
      *(_DWORD *)(a5 + 384) = 10;
    }
    if (!v123) {
      goto LABEL_171;
    }
    goto LABEL_169;
  }
  if (v64)
  {
    cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v82, (const cv3d::cv::gess::alg::ConfigBake *)a4);
    unint64_t v84 = __PAIR64__(v97, v98);
    v118[3] = 0;
    if (v127)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D90A8;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
      p_str = &__str;
      std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](&__str, v118);
      std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](&__str);
    }
    uint64_t v66 = (uint64_t)a6;
    cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&__str, v78);
    std::function<void ()(float,std::string const&)>::operator=(&__str, (uint64_t)v118);
    v67.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v16) {
      *(double *)(a5 + 280) = (double)(v67.__d_.__rep_ - v105.__d_.__rep_) / 1000000.0;
    }
    int64x2_t v68 = v99;
    unint64_t v69 = v94;
    cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v107, (const cv3d::cv::gess::alg::BakeCallbackBundle *)&__str);
    BOOL v32 = cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(v68, (uint64_t)v79, (uint64_t)v69, v77, (uint64_t)v82, a5, v66, (const cv3d::cv::gess::alg::BakeCallbackBundle *)v107);
    std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v111);
    std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v110);
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v109);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v108);
    std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v107);
    if (v127)
    {
      std::string::basic_string[abi:ne180100]<0>(v80, (char *)&unk_24F58DDD7);
      std::function<void ()(float,std::string const&)>::operator()((uint64_t)v126, (uint64_t)v80, 100.0);
      if (v81 < 0) {
        operator delete(v80[0]);
      }
    }
    std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v117);
    std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v116);
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v115);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v114);
    std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](&__str);
    std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v118);
    if (v90 < 0) {
      operator delete(v89);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    if (v85)
    {
      BOOL v86 = v85;
      operator delete(v85);
    }
    cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput((void **)&v84);
  }
  else
  {
    BOOL v32 = 0;
  }
  int64x2_t v70 = v125;
  if (v125)
  {
    int64x2_t v70 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(void *)v125 + 48))(v125);
    if (v70)
    {
      if (v16) {
        *(_DWORD *)(a5 + 384) = 10;
      }
      if (!v123) {
        goto LABEL_171;
      }
LABEL_169:
      std::string::basic_string[abi:ne180100]<0>(v82, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v122, 10);
      if (v83 < 0) {
        operator delete(v82[0]);
      }
LABEL_171:
      BOOL v32 = 0;
      goto LABEL_172;
    }
  }
  for (unint64_t j = 0; ; ++j)
  {
    char v73 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v70);
    if (j >= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)v73 + 1) - *(void *)v73) >> 3)) {
      break;
    }
    int64x2_t v70 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v73);
  }
LABEL_172:
  if (v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
  }
LABEL_174:
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20);
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
  if (v102)
  {
    unsigned int v103 = v102;
    operator delete(v102);
  }
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v122);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v124);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v126);
  return v32;
}

void sub_24F538D4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x24F538DACLL);
}

void sub_24F538D74(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x24F538DF4);
}

void sub_24F538DA8(_Unwind_Exception *a1)
{
  if (STACK[0x2D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D8]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (STACK[0x310]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x310]);
  }
  uint64_t v3 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v3;
    operator delete(v3);
  }
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100]((void *)(v2 - 200));
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v2 - 168));
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100]((void *)(v2 - 136));
  _Unwind_Resume(a1);
}

void *std::function<void ()(float,std::string const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle(cv3d::cv::gess::alg::BakeCallbackBundle *this)
{
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100]((void *)this + 16);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100]((void *)this + 12);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100]((void *)this + 8);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 4);

  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](this);
}

void cv3d::cv::gess::alg::ConfigBake::~ConfigBake(void **this)
{
  if (*((char *)this + 535) < 0) {
    operator delete(this[64]);
  }
  if (*((char *)this + 503) < 0) {
    operator delete(this[60]);
  }
  uint64_t v2 = this[57];
  if (v2)
  {
    this[58] = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(this + 7);
}

uint64_t cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::PolyMesh *a1, cv3d::cv::gess::alg *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const cv3d::cv::gess::alg::BakeCallbackBundle *a9)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)a9);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v97, (uint64_t)a9 + 32);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v95, (uint64_t)a9 + 64);
  v78.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  BOOL v76 = 0;
  uint64_t v75 = 0;
  uint64_t v77 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v75, *(const void **)(a6 + 456), *(void *)(a6 + 464), (uint64_t)(*(void *)(a6 + 464) - *(void *)(a6 + 456)) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
  long long v15 = (cv3d::cv::gess::alg::internal *)cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v60, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  cv3d::cv::gess::alg::internal::ValidateOSStatus(v15);
  cv3d::cv::gess::alg::internal::CustomSortGPU((unint64_t **)&v75);
  BOOL GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v75);
  if (GPU)
  {
    if (!v100) {
      goto LABEL_18;
    }
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v99, (uint64_t)&__str, 7.0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!GPU) {
        goto LABEL_25;
      }
    }
    else if (!GPU)
    {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  if ((_BYTE)a8) {
    *(_DWORD *)(a7 + 384) = 17;
  }
  if (v96)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
    std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v95, 17);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v100) {
    goto LABEL_12;
  }
  if (!GPU)
  {
LABEL_25:
    char v17 = 0;
    goto LABEL_26;
  }
LABEL_18:
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)(a6 + 480), 0);
  if (__str.__r_.__value_.__s.__data_[0] == 255 || !__str.__r_.__value_.__s.__data_[0])
  {
    if ((_BYTE)a8) {
      *(_DWORD *)(a7 + 384) = 4;
    }
    if (v96)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v95, 4);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_25;
  }
  char v17 = 1;
LABEL_26:
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v60);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v18);
  unint64_t v19 = *(unsigned int *)(a6 + 60);
  uint64_t v73 = *(unsigned int *)(a6 + 56);
  unint64_t v72 = v19;
  if ((v17 & 1) == 0)
  {
    int v23 = 0;
    goto LABEL_45;
  }
  LODWORD(__str.__r_.__value_.__l.__data_) = 0;
  LODWORD(v60[0]) = 1;
  uint64_t v20 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::alg::ComputeUVUtilization((uint64_t)a1, a2, (float *)&__str, (int *)v60);
  if (v20)
  {
    uint64_t v20 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::alg::AutoMapNumberAndResolution(a2, (Material *)&__str, (float *)&v73, &v72, v21);
    int v22 = (int)v20;
  }
  else
  {
    int v22 = 0;
  }
  if (!v100
    || (std::string::basic_string[abi:ne180100]<0>(v60, (char *)&unk_24F58DDD7),
        uint64_t v20 = (cv3d::cv::gess::util::os *)std::function<void ()(float,std::string const&)>::operator()((uint64_t)v99, (uint64_t)v60, 10.0), (v61 & 0x80000000) == 0))
  {
    if (v22) {
      goto LABEL_34;
    }
LABEL_43:
    int v23 = 0;
    goto LABEL_44;
  }
  operator delete(v60[0]);
  if (!v22) {
    goto LABEL_43;
  }
LABEL_34:
  if (*((void *)a1 + 20) - *((void *)a1 + 19) <= 7uLL)
  {
    if ((_BYTE)a8) {
      *(_DWORD *)(a7 + 384) = 9;
    }
    if (v96)
    {
      std::string::basic_string[abi:ne180100]<0>(v60, (char *)&unk_24F58DDD7);
      uint64_t v20 = (cv3d::cv::gess::util::os *)std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v95, 9);
      if (v61 < 0) {
        operator delete(v60[0]);
      }
    }
    goto LABEL_43;
  }
  int v23 = 1;
LABEL_44:
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v20);
LABEL_45:
  v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((_BYTE)a8) {
    *(double *)(a7 + 280) = *(double *)(a7 + 280) + (double)(v24.__d_.__rep_ - v78.__d_.__rep_) / 1000000.0;
  }
  v78.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  uint64_t v25 = v98;
  if (v98)
  {
    uint64_t v25 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(void *)v98 + 48))(v98);
    if (v25)
    {
      if ((_BYTE)a8) {
        *(_DWORD *)(a7 + 384) = 10;
      }
      if (!v96) {
        goto LABEL_133;
      }
      goto LABEL_52;
    }
  }
  if (v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&v71, (char *)&unk_24F58DDD7);
    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v60, &v71, 0, 0);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a3 + 184))
    {
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom(a4, (void **)a3);
      cv3d::cv::gess::alg::RepairEverything((cv3d::cv::gess::alg *)a4, v26, v27);
      if (v100)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
        std::function<void ()(float,std::string const&)>::operator()((uint64_t)v99, (uint64_t)&__str, 21.0);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      BOOL LowMeshFromHighMesh = 1;
    }
    else
    {
      std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v94, (uint64_t)v99);
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v93, (uint64_t)v97);
      std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v92, (uint64_t)v95);
      BOOL LowMeshFromHighMesh = cv3d::cv::gess::alg::internal::GetLowMeshFromHighMesh(a1, (cv3d::cv::gess::mesh::PolyMesh *)a4, a6, (int *)&v73, (int *)&v72, a7, a8, (uint64_t)v94, (uint64_t)v93, (uint64_t)v92, (uint64_t)&v75, &v78);
      std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v92);
      std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v93);
      std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v94);
    }
    v29.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if ((_BYTE)a8) {
      *(double *)(a7 + 280) = *(double *)(a7 + 280) + (double)(v29.__d_.__rep_ - v78.__d_.__rep_) / 1000000.0;
    }
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v60);
  }
  else
  {
    BOOL LowMeshFromHighMesh = 0;
  }
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v25);
  if (v98 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(void *)v98 + 48))(v98))
  {
    if ((_BYTE)a8) {
      *(_DWORD *)(a7 + 384) = 10;
    }
    if (!v96) {
      goto LABEL_133;
    }
LABEL_52:
    std::string::basic_string[abi:ne180100]<0>(v60, (char *)&unk_24F58DDD7);
    std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v95, 10);
    goto LABEL_131;
  }
  v78.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(&v70, (char *)&unk_24F58DDD7);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v60, &v70, 0, 0);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v70.__r_.__value_.__l.__data_);
    if (!LowMeshFromHighMesh)
    {
LABEL_102:
      BOOL v32 = 0;
      goto LABEL_103;
    }
  }
  else if (!LowMeshFromHighMesh)
  {
    goto LABEL_102;
  }
  int v30 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a4);
  int v31 = -1;
  LODWORD(v91[0]) = -1;
  uint64_t v54 = a5;
  if (v30)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    BOOL v32 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)a4, v91, (unsigned __int8 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v31 = v91[0];
  }
  else
  {
    BOOL v32 = 0;
  }
  LODWORD(v79) = v31;
  exception_object = (_Unwind_Exception *)a4;
  int v33 = a4 + 10;
  BOOL v34 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(a4 + 10, (unsigned int *)&v79);
  uint64_t v35 = (*(uint64_t (**)(void *))(*v34 + 16))(v34);
  LODWORD(v58[0]) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  BOOL v36 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)exception_object, v58, (unsigned __int8 *)&__str);
  BOOL v37 = v36;
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v36) {
      goto LABEL_87;
    }
LABEL_85:
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)exception_object, v58, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_87;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (!v37) {
    goto LABEL_85;
  }
LABEL_87:
  LODWORD(v79) = v58[0];
  uint64_t v38 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>(v33, (unsigned int *)&v79);
  (*(void (**)(void *, uint64_t))(*v38 + 32))(v38, 1);
  uint64_t v53 = a7;
  uint64_t v39 = (uint64_t **)v38[5];
  if ((uint64_t **)v38[6] == v39) {
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  }
  if (v35)
  {
    uint64_t v40 = 0;
    for (unint64_t i = 0; i != v35; ++i)
    {
      uint64_t v42 = v34[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v34[6] - v42) >> 3) <= i) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      char v43 = (long long *)(v42 + v40);
      if (*((char *)v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v43, *((void *)v43 + 1));
      }
      else
      {
        long long v44 = *v43;
        __str.__r_.__value_.__r.__words[2] = *((void *)v43 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v44;
      }
      unsigned __int16 v69 = i;
      int v79 = &v69;
      int v45 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v39, &v69, (uint64_t)&std::piecewise_construct, &v79);
      std::string::operator=((std::string *)(v45 + 5), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v40 += 24;
    }
  }
  a7 = v53;
  a5 = v54;
  a4 = (uint64_t *)exception_object;
  if (v100)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v99, (uint64_t)&__str, 30.0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
LABEL_103:
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v60);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v46);
  if (v98 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(void *)v98 + 48))(v98))
  {
    if ((_BYTE)a8) {
      *(_DWORD *)(a7 + 384) = 10;
    }
    if (!v96) {
      goto LABEL_133;
    }
    goto LABEL_130;
  }
  if (v32)
  {
    cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v60, (const cv3d::cv::gess::alg::ConfigBake *)a6);
    unint64_t v62 = __PAIR64__(v72, v73);
    v91[3] = 0;
    if (v100)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D90F0;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
      p_str = &__str;
      std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](&__str, v91);
      std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](&__str);
    }
    cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&__str, a9);
    std::function<void ()(float,std::string const&)>::operator=(&__str, (uint64_t)v91);
    v47.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if ((_BYTE)a8) {
      *(double *)(a7 + 280) = (double)(v47.__d_.__rep_ - v78.__d_.__rep_) / 1000000.0;
    }
    cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v80, (const cv3d::cv::gess::alg::BakeCallbackBundle *)&__str);
    uint64_t v48 = cv3d::cv::gess::alg::InternalBake(a1, (uint64_t)a2, (uint64_t)a4, a5, (uint64_t)v60, a7, a8, (cv3d::cv::gess::alg::BakeCallbackBundle *)v80);
    std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v84);
    std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v83);
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v82);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v81);
    std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v80);
    if (v100)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, (char *)&unk_24F58DDD7);
      std::function<void ()(float,std::string const&)>::operator()((uint64_t)v99, (uint64_t)v58, 100.0);
      if (v59 < 0) {
        operator delete(v58[0]);
      }
    }
    std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v90);
    std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v89);
    std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v88);
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v87);
    std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](&__str);
    std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v91);
    if (v68 < 0) {
      operator delete(v67);
    }
    if (v66 < 0) {
      operator delete(v65);
    }
    if (v63)
    {
      BOOL v64 = v63;
      operator delete(v63);
    }
    cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput((void **)&v62);
  }
  else
  {
    uint64_t v48 = 0;
  }
  BOOL v49 = v98;
  if (v98)
  {
    BOOL v49 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(void *)v98 + 48))(v98);
    if (v49)
    {
      if ((_BYTE)a8) {
        *(_DWORD *)(a7 + 384) = 10;
      }
      if (!v96) {
        goto LABEL_133;
      }
LABEL_130:
      std::string::basic_string[abi:ne180100]<0>(v60, (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v95, 10);
LABEL_131:
      if (v61 < 0) {
        operator delete(v60[0]);
      }
LABEL_133:
      uint64_t v48 = 0;
      goto LABEL_134;
    }
  }
  for (unint64_t j = 0; ; ++j)
  {
    int v52 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v49);
    if (j >= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)v52 + 1) - *(void *)v52) >> 3)) {
      break;
    }
    BOOL v49 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v52);
  }
LABEL_134:
  if (v75)
  {
    BOOL v76 = v75;
    operator delete(v75);
  }
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v95);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v97);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v99);
  return v48;
}

void sub_24F53A00C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x24F53A06CLL);
}

void sub_24F53A034(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x24F53A094);
}

void sub_24F53A068(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100]((void *)(v1 - 192));
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v1 - 160));
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100]((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateCustomizedEdgeDistanceMap(long long *a1, char *a2, uint64_t a3, unsigned int a4, char a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (a4 <= 0x200) {
    unsigned int v8 = 512;
  }
  else {
    unsigned int v8 = a4;
  }
  if (v8 >= 0x2000) {
    unsigned int v9 = 0x2000;
  }
  else {
    unsigned int v9 = v8;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v62);
  __int16 v59 = 0;
  int v61 = 3;
  char v60 = 1;
  if ((cv3d::cv::gess::io::LoadObjFile(a1, v62, &v59) & 1) == 0) {
    goto LABEL_50;
  }
  cv3d::cv::gess::alg::RepairEverything((cv3d::cv::gess::alg *)v62, v10, v11);
  uint64_t v12 = v62;
  if ((unint64_t)((char *)v12[20] - (char *)v12[19]) < 8) {
    goto LABEL_50;
  }
  unsigned int v58 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v50[0] = 0;
  int v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v12 + 10, (uint64_t)v50, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v14 = v62;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v14, &v58, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v15 = v62;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v50[1]) = 0;
  v50[0] = 0;
  int v16 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v15 + 7, (uint64_t)v50, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v17 = v62;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v50[0]) = 0;
  int v18 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(v17 + 7, (uint64_t)v50, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v19 = 1;
  if (v13 == -1 || (unsigned int v20 = v58, v58 == -1) || v16 == -1 || v18 == -1)
  {
    __p.__r_.__value_.__s.__data_[12] = 0;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 100000;
    __p.__r_.__value_.__s.__data_[20] = 0;
    uint64_t v34 = 1;
    __int16 v35 = 1;
    char v36 = 1;
    LODWORD(v33) = v9;
    BYTE4(v33) = a5;
    __p.__r_.__value_.__r.__words[0] = 200;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 1036831949;
    int v37 = 1090519040;
    char v19 = cv3d::cv::gess::alg::IsoChartParameterize((uint64_t)v62, (uint64_t)&__p);
    unint64_t v21 = v62;
    std::string::basic_string[abi:ne180100]<0>(v50, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v21, &v58, (unsigned __int8 *)v50);
    if (SBYTE7(v51[0]) < 0) {
      operator delete(v50[0]);
    }
    unsigned int v20 = v58;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v20;
  uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v62 + 10, (unsigned int *)&__p);
  unint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::vector(v57, v23);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::vector(v56, v23);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::vector(v55, v23);
  if (v23)
  {
    uint64_t v24 = v57[0];
    *(int32x2_t *)(v57[0] + 4) = vdup_n_s32(v9);
    *(_DWORD *)(v24 + 12) = 1;
    cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory(v24);
  }
  if (v19)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v64 = 0;
    cv3d::cv::gess::alg::internal::GPURasterize();
  }
  std::vector<std::shared_ptr<cv3d::cv::gess::util::Imagef>>::vector(v54, 0);
  v53[0] = 0;
  v53[1] = 0;
  *(_OWORD *)float v50 = 0u;
  memset(v51, 0, sizeof(v51));
  int v52 = v53;
  v44[0] = v58;
  cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v62 + 10, v44);
  unsigned int v49 = -1;
  uint64_t v25 = v62;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  BOOL v26 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)v25, &v49, (unsigned __int8 *)&__p);
  BOOL v27 = v26;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v26) {
      goto LABEL_35;
    }
LABEL_33:
    int v28 = v62;
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)v28, &v49, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_35;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v27) {
    goto LABEL_33;
  }
LABEL_35:
  v44[0] = v49;
  std::chrono::system_clock::time_point v29 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)v62 + 10, v44);
  (*(void (**)(void *, uint64_t))(*v29 + 32))(v29, 1);
  if (v29[6] == v29[5]) {
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  }
  LOBYTE(v44[0]) = 0;
  v44[1] = 1;
  LOWORD(v45) = 0;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v46);
  BYTE1(v45) = 1;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__str, a2);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".usda");
  std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&__str, (const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v43, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v43 = __str;
  }
  int v30 = v62;
  cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption((cv3d::cv::gess::io::SaveUsdOption *)&__p, (const cv3d::cv::gess::io::SaveObjOption *)v44);
  cv3d::cv::gess::io::SaveUsdaFile((uint64_t)&v43, (uint64_t)v30, (uint64_t *)v50, (uint64_t)&__p);
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)&v35, v38);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v33);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v47, v47[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v46, (void *)v46[1]);
  std::__tree<std::string>::destroy((uint64_t)&v52, v53[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v51 + 8;
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_50:
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  return 0;
}

void sub_24F53AB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a36);
  cv3d::cv::gess::mesh::Material::~Material((char **)&a56);
  a15 = &a66;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a15 = &a69;
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a15 = (void *)(v69 - 240);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a15 = (void *)(v69 - 216);
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::string v71 = *(std::__shared_weak_count **)(v69 - 168);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::util::ImageT<float>::Flip(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    int v2 = 0;
    int v3 = 0;
    unsigned int v4 = v1 >> 1;
    uint64_t v5 = *(unsigned int *)(a1 + 4);
    int v6 = v5 * (v1 - 1);
    do
    {
      if (v5)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v9 = *(unsigned int *)(a1 + 12);
        unsigned int v10 = v9 * v2;
        unsigned int v11 = v9 * v6;
        do
        {
          if (v9)
          {
            uint64_t v12 = (int *)(v8 + 4 * v10);
            uint64_t v13 = v9;
            int v14 = (int *)(v8 + 4 * v11);
            do
            {
              int v15 = *v12;
              *v12++ = *v14;
              *v14++ = v15;
              --v13;
            }
            while (v13);
          }
          ++v7;
          v10 += v9;
          v11 += v9;
        }
        while (v7 != v5);
      }
      ++v3;
      v2 += v5;
      v6 -= v5;
    }
    while (v3 != v4);
  }
  return 1;
}

void cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption(void **this)
{
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)(this + 5), this[6]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)(this + 2), this[3]);
}

void cv3d::cv::gess::mesh::Material::~Material(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  int v2 = this + 3;
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  int v2 = this;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    double result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F53AF54(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::string::operator=((std::string *)(a1 + 16), a2);
  *(std::chrono::system_clock::time_point *)(a1 + 40) = std::chrono::system_clock::now();
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)(a1 + 56));
  return a1;
}

void sub_24F53AFD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable(cv3d::cv::gess::util::os::MemoryLogTable *this)
{
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)this;
  *((std::chrono::system_clock::time_point *)this + 6) = std::chrono::system_clock::now();
  BOOL v2 = cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryLogTable *)((char *)this + 120));
  int v3 = (uint64_t *)cv3d::cv::gess::util::os::GlobalMemoryLogs((cv3d::cv::gess::util::os *)v2);
  unsigned int v4 = v3;
  unint64_t v5 = v3[1];
  if (v5 >= v3[2])
  {
    uint64_t v6 = std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__push_back_slow_path<cv3d::cv::gess::util::os::MemoryLogItem const&>(v3, (long long *)this + 1);
  }
  else
  {
    std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__construct_one_at_end[abi:ne180100]<cv3d::cv::gess::util::os::MemoryLogItem const&>((uint64_t)v3, (long long *)this + 1);
    uint64_t v6 = v5 + 184;
  }
  v4[1] = v6;
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

__n128 std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__construct_one_at_end[abi:ne180100]<cv3d::cv::gess::util::os::MemoryLogItem const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)(v4 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v4 + 24) = v6;
  long long v7 = *(long long *)((char *)a2 + 56);
  long long v8 = *(long long *)((char *)a2 + 72);
  long long v9 = *(long long *)((char *)a2 + 88);
  *(_OWORD *)(v4 + 104) = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(v4 + 88) = v9;
  *(_OWORD *)(v4 + 72) = v8;
  *(_OWORD *)(v4 + 56) = v7;
  __n128 result = *(__n128 *)((char *)a2 + 120);
  long long v11 = *(long long *)((char *)a2 + 136);
  long long v12 = *(long long *)((char *)a2 + 152);
  *(_OWORD *)(v4 + 168) = *(long long *)((char *)a2 + 168);
  *(_OWORD *)(v4 + 152) = v12;
  *(_OWORD *)(v4 + 136) = v11;
  *(__n128 *)(v4 + 120) = result;
  *(void *)(a1 + 8) = v4 + 184;
  return result;
}

void sub_24F53B144(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__push_back_slow_path<cv3d::cv::gess::util::os::MemoryLogItem const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xB21642C8590B21) {
    unint64_t v9 = 0x1642C8590B21642;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v26 = a1 + 2;
  if (v9) {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  long long v11 = (std::string *)&v10[184 * v4];
  v23[0] = v10;
  v23[1] = v11;
  uint64_t v24 = v11;
  uint64_t v25 = &v10[184 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v11 = v24;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  uint64_t v13 = &v10[184 * v4];
  long long v14 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)(v13 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v14;
  long long v15 = *(long long *)((char *)a2 + 56);
  long long v16 = *(long long *)((char *)a2 + 72);
  long long v17 = *(long long *)((char *)a2 + 88);
  *(_OWORD *)(v13 + 104) = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(v13 + 88) = v17;
  *(_OWORD *)(v13 + 72) = v16;
  *(_OWORD *)(v13 + 56) = v15;
  long long v18 = *(long long *)((char *)a2 + 120);
  long long v19 = *(long long *)((char *)a2 + 136);
  long long v20 = *(long long *)((char *)a2 + 152);
  *(_OWORD *)(v13 + 168) = *(long long *)((char *)a2 + 168);
  *(_OWORD *)(v13 + 152) = v20;
  *(_OWORD *)(v13 + 136) = v19;
  *(_OWORD *)(v13 + 120) = v18;
  uint64_t v24 = (std::string *)((char *)v11 + 184);
  std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__swap_out_circular_buffer(a1, v23);
  uint64_t v21 = a1[1];
  std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::~__split_buffer((uint64_t)v23);
  return v21;
}

void sub_24F53B2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v22 = a6;
  *((void *)&v22 + 1) = a7;
  long long v21 = v22;
  v19[0] = a1;
  v19[1] = &v21;
  float v19[2] = &v22;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 184);
      *(void *)(v9 - 168) = *(void *)(a3 - 168);
      *(_OWORD *)(v9 - 184) = v10;
      *(void *)(a3 - 176) = 0;
      *(void *)(a3 - 168) = 0;
      *(void *)(a3 - 184) = 0;
      long long v11 = *(_OWORD *)(a3 - 80);
      long long v13 = *(_OWORD *)(a3 - 128);
      long long v12 = *(_OWORD *)(a3 - 112);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v9 - 80) = v11;
      *(_OWORD *)(v9 - 128) = v13;
      *(_OWORD *)(v9 - 112) = v12;
      long long v14 = *(_OWORD *)(a3 - 144);
      *(_OWORD *)(v9 - 160) = *(_OWORD *)(a3 - 160);
      *(_OWORD *)(v9 - 144) = v14;
      long long v15 = *(_OWORD *)(a3 - 16);
      long long v17 = *(_OWORD *)(a3 - 64);
      long long v16 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v15;
      *(_OWORD *)(v9 - 64) = v17;
      *(_OWORD *)(v9 - 48) = v16;
      v9 -= 184;
      v7 -= 184;
      a3 -= 184;
    }
    while (a3 != a5);
    *((void *)&v22 + 1) = v9;
  }
  char v20 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v19);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 184;
  }
}

uint64_t std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 23;
      *(void *)(a1 + 16) = v2 - 23;
      if (*((char *)v2 - 161) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

cv3d::cv::gess::alg::ConfigBake *cv3d::cv::gess::alg::ConfigBake::ConfigBake(cv3d::cv::gess::alg::ConfigBake *this, const cv3d::cv::gess::alg::ConfigBake *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((_OWORD *)this + 1) = v5;
  *((_OWORD *)this + 2) = v6;
  *(_OWORD *)this = v4;
  cv3d::cv::gess::alg::ConfigOutput::ConfigOutput((uint64_t)this + 56, (uint64_t)a2 + 56);
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 57, *((const void **)a2 + 57), *((void *)a2 + 58), (uint64_t)(*((void *)a2 + 58) - *((void *)a2 + 57)) >> 3);
  uint64_t v7 = (std::string *)((char *)this + 480);
  if (*((char *)a2 + 503) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 60), *((void *)a2 + 61));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 30);
    *((void *)this + 62) = *((void *)a2 + 62);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((unsigned char *)this + 504) = *((unsigned char *)a2 + 504);
  uint64_t v9 = (std::string *)((char *)this + 512);
  if (*((char *)a2 + 535) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 64), *((void *)a2 + 65));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 32);
    *((void *)this + 66) = *((void *)a2 + 66);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = *((void *)a2 + 67);
  *((_DWORD *)this + 136) = *((_DWORD *)a2 + 136);
  *((void *)this + 67) = v11;
  return this;
}

void sub_24F53B61C(_Unwind_Exception *a1)
{
  cv3d::cv::gess::alg::ConfigSystem::~ConfigSystem(v2);
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::ConfigSystem::~ConfigSystem(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

uint64_t cv3d::cv::gess::alg::ConfigOutput::ConfigOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  if (*(char *)(a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *(const std::string::value_type **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v7;
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  if (*(char *)(a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 176), *(const std::string::value_type **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v8;
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 204) = *(unsigned char *)(a2 + 204);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  if (*(char *)(a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 216), *(const std::string::value_type **)(a2 + 216), *(void *)(a2 + 224));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v9;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  if (*(char *)(a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 256), *(const std::string::value_type **)(a2 + 256), *(void *)(a2 + 264));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = v10;
  }
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  if (*(char *)(a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 296), *(const std::string::value_type **)(a2 + 296), *(void *)(a2 + 304));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 296);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = v11;
  }
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  if (*(char *)(a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 336), *(const std::string::value_type **)(a2 + 336), *(void *)(a2 + 344));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v12;
  }
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  long long v13 = (std::string *)(a1 + 376);
  if (*(char *)(a2 + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 376), *(void *)(a2 + 384));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 376);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return a1;
}

void sub_24F53B974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (v10[359] < 0) {
    operator delete(*v11);
  }
  if (v10[319] < 0) {
    operator delete(*v18);
  }
  if (v10[279] < 0) {
    operator delete(*v17);
  }
  if (v10[239] < 0) {
    operator delete(*v16);
  }
  if (v10[199] < 0) {
    operator delete(*v15);
  }
  if (v10[159] < 0) {
    operator delete(*v14);
  }
  if (v10[119] < 0) {
    operator delete(*v13);
  }
  if (v10[79] < 0) {
    operator delete(*v12);
  }
  if (v10[39] < 0) {
    operator delete(*a10);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(void **this)
{
  if (*((char *)this + 399) < 0) {
    operator delete(this[47]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

cv3d::cv::gess::alg::BakeCallbackBundle *cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle(cv3d::cv::gess::alg::BakeCallbackBundle *this, const cv3d::cv::gess::alg::BakeCallbackBundle *a2)
{
  uint64_t v4 = std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)this, (uint64_t)a2);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](v4 + 32, (uint64_t)a2 + 32);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)this + 64, (uint64_t)a2 + 64);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::__value_func[abi:ne180100]((uint64_t)this + 96, (uint64_t)a2 + 96);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::__value_func[abi:ne180100]((uint64_t)this + 128, (uint64_t)a2 + 128);
  return this;
}

void sub_24F53BB90(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F53BE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 24)
  {
    uint64_t result = *(void *)(i - 8);
    if (result)
    {
      uint64_t result = MEMORY[0x25335E9F0](result, 0x1000C8077774924);
      *(void *)(i - 8) = 0;
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F53BFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 24)
  {
    uint64_t result = *(void *)(i - 8);
    if (result)
    {
      uint64_t result = MEMORY[0x25335E9F0](result, 0x1000C8052888210);
      *(void *)(i - 8) = 0;
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F53C15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 24)
  {
    uint64_t v5 = *(void *)(i - 8);
    if (v5)
    {
      uint64_t result = MEMORY[0x25335E9F0](v5 - 16, 0x1000C80451B5BE8);
      *(void *)(i - 8) = 0;
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *std::vector<std::shared_ptr<cv3d::cv::gess::util::Imagef>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24F53C29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__push_back_slow_path<cv3d::cv::gess::mesh::ObjMaterial const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (std::string *)&v10[48 * v4];
  long long v16 = &v10[48 * v9];
  std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial const&,cv3d::cv::gess::mesh::ObjMaterial*>(v14, a2);
  long long v15 = v14 + 2;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<cv3d::cv::gess::mesh::ObjMaterial>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_24F53C3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::ObjMaterial>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial const&,cv3d::cv::gess::mesh::ObjMaterial*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_24F53C414(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_24F53C470(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  long long v6 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

cv3d::cv::gess::io::SaveUsdOption *cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption(cv3d::cv::gess::io::SaveUsdOption *this, const cv3d::cv::gess::io::SaveObjOption *a2)
{
  uint64_t v4 = *(void *)a2;
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *(void *)this = v4;
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::map[abi:ne180100]((uint64_t *)this + 2, (uint64_t)a2 + 16);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::map[abi:ne180100]((uint64_t *)this + 5, (uint64_t)a2 + 40);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  std::string::basic_string[abi:ne180100]<0>((void *)this + 9, "CorePhotogrammetry Bake");
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 14, "ObjectCapture");
  return this;
}

void sub_24F53C7D4(_Unwind_Exception *a1)
{
  if (v1[95] < 0) {
    operator delete(*v2);
  }
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_24F53C854(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  int v6 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_24F53CB8C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_24F53CC40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_24F53CC9C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>(v5, v6, v4 + 8, v4 + 8);
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  long long v6 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *a2;
  uint64_t result = std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__value_func[abi:ne180100]((uint64_t)(v6 + 10), (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_24F53CE34(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0,std::allocator<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0,std::allocator<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0>,void ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2700D9028;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0,std::allocator<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2700D9028;
}

uint64_t std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::Material>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D9070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::Material>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D9070;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::Material>::__on_zero_shared(uint64_t a1)
{
}

void std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)a1;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2700D90A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D90A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::operator()(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  if (*(void *)(result + 24))
  {
    float v4 = *a2 / 100.0 * 70.0 + 30.0;
    return std::function<void ()(float,std::string const&)>::operator()(result, a3, v4);
  }
  return result;
}

void *std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    float v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F53D618(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2700D90F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D90F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::operator()(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  if (*(void *)(result + 24))
  {
    float v4 = *a2 / 100.0 * 70.0 + 30.0;
    return std::function<void ()(float,std::string const&)>::operator()(result, a3, v4);
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::TwoWayRaycast(void *a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6, float a7)
{
  v19[4] = *MEMORY[0x263EF8340];
  float v18 = a7;
  int v17 = a4;
  uint64_t v16 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a3, (double *)&v16);
  uint64_t v15 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v15);
  uint64_t v12 = (uint64_t)(a1[1] - *a1) >> 4;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize(a5, v12);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(a6, v12);
  long long v13 = operator new(0x40uLL);
  void *v13 = &unk_2700D9138;
  v13[1] = a3;
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = &v18;
  v13[5] = &v17;
  v13[6] = a5;
  v13[7] = a6;
  void v19[3] = v13;
  cv3d::cv::gess::internal::parallel_for (v12, (uint64_t)v19, 0);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v19);
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v16);
  return 1;
}

void sub_24F53D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_2700D9138;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D9138;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v4 = *a2;
  unint64_t v5 = *a3;
  if (*a3 - *a2 >= 0x20000) {
    uint64_t v6 = 0x20000;
  }
  else {
    uint64_t v6 = *a3 - *a2;
  }
  cv3d::cv::gess::alg::MultipleBufferComponent::MultipleBufferComponent((cv3d::cv::gess::alg::MultipleBufferComponent *)v23, *(const cv3d::cv::gess::alg::MPSMeshIntersector **)(a1 + 8), 3uLL, 2 * v6);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(__p, 2 * v6);
  if (v5 > v4)
  {
    uint64_t v7 = 16 * v4;
    do
    {
      if ((int)v5 - (int)v4 <= (int)v6) {
        uint64_t v8 = v5 - v4;
      }
      else {
        uint64_t v8 = v6;
      }
      if (v8 != v6) {
        std::vector<cv3d::cv::gess::math::RayT<float>>::resize((uint64_t *)__p, 2 * v8);
      }
      if (v8)
      {
        BOOL v9 = (char *)__p[0];
        uint64_t v10 = 84;
        uint64_t v11 = v7;
        uint64_t v12 = v8;
        do
        {
          long long v13 = *(_OWORD *)(**(void **)(a1 + 24) + v11);
          BOOL v14 = &v9[v10];
          *(_OWORD *)(v14 - 84) = *(_OWORD *)(**(void **)(a1 + 16) + v11);
          *(_OWORD *)(v14 - 68) = v13;
          *(void *)(v14 - 52) = 0x7F7FFFFF3089705FLL;
          uint64_t v15 = (char *)__p[0] + v10;
          *((_DWORD *)v15 - 13) = 0;
          *((_DWORD *)v15 - 12) = **(_DWORD **)(a1 + 32);
          float32x4_t v16 = vnegq_f32(*(float32x4_t *)(**(void **)(a1 + 24) + v11));
          *(_OWORD *)(v15 - 36) = *(_OWORD *)(**(void **)(a1 + 16) + v11);
          *(float32x4_t *)(v15 - 20) = v16;
          *(void *)(v15 - 4) = 0x7F7FFFFF3089705FLL;
          BOOL v9 = (char *)__p[0];
          int v17 = (char *)__p[0] + v10;
          *(v17 - 1) = 0;
          *int v17 = **(_DWORD **)(a1 + 32);
          v11 += 16;
          v10 += 96;
          --v12;
        }
        while (v12);
      }
      float v18 = *(int **)(a1 + 8);
      int v19 = **(_DWORD **)(a1 + 40);
      long long v21 = *(_OWORD *)(a1 + 48);
      uint64_t v25 = 0;
      uint64_t v20 = operator new(0x30uLL);
      void *v20 = &unk_2700D9180;
      v20[1] = v8;
      v20[2] = v4;
      *((_DWORD *)v20 + 6) = v19;
      *((_OWORD *)v20 + 2) = v21;
      uint64_t v25 = v20;
      cv3d::cv::gess::alg::MPSMeshIntersector::intersectRaysMultipleBuffer(v18, (uint64_t)v23, (uint64_t *)__p, (uint64_t)v24, v4 + 3 * v6 >= v5);
      std::__function::__value_func<void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::~__value_func[abi:ne180100](v24);
      v4 += v6;
      v7 += 16 * v6;
    }
    while (v4 < v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  cv3d::cv::gess::alg::MultipleBufferComponent::~MultipleBufferComponent((cv3d::cv::gess::alg::MultipleBufferComponent *)v23);
}

void sub_24F53DB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void std::vector<cv3d::cv::gess::math::RayT<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::math::RayT<float>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 48 * a2;
  }
}

void std::vector<cv3d::cv::gess::math::RayT<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 48 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_OWORD *)(v7 + 16) = xmmword_24F578D50;
        *(void *)(v7 + 32) = 0x7F7FFFFF3089705FLL;
        v7 += 48;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v20 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    BOOL v14 = &v12[48 * v8];
    std::string __p = v12;
    int v17 = v14;
    int v19 = &v12[48 * v11];
    uint64_t v15 = &v14[48 * a2];
    do
    {
      *(void *)BOOL v14 = 0;
      *((void *)v14 + 1) = 0;
      *((_OWORD *)v14 + 1) = xmmword_24F578D50;
      *((void *)v14 + 4) = 0x7F7FFFFF3089705FLL;
      v14 += 48;
    }
    while (v14 != v15);
    float v18 = v15;
    std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(a1, &__p);
    if (v18 != v17) {
      float v18 = &v17[(v18 - v17 - 48) % 0x30uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F53DD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(void *)(v4 + 32) = *(void *)(v2 + 32);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *__n128 result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_2700D9180;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D9180;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  if (*(void *)(result + 8))
  {
    uint64_t v2 = 0;
    for (uint64_t i = 28; ; i += 32)
    {
      uint64_t v4 = *a2;
      uint64_t v5 = *a2 + i;
      float v7 = *(float *)(v5 - 28);
      uint64_t v6 = v5 - 28;
      float v8 = v7;
      unint64_t v9 = (float *)(v6 + 16);
      unsigned int v10 = *(_DWORD *)(result + 24);
      if (v7 == -1.0) {
        break;
      }
      unsigned int v11 = *(_DWORD *)(*a2 + i - 24);
      float v12 = *v9;
      if (*v9 != -1.0)
      {
        unsigned int v13 = *(_DWORD *)(v4 + i - 8);
        if (v11 < v10 && v13 < v10)
        {
          if (v8 >= v12) {
            uint64_t v17 = v6 + 16;
          }
          else {
            uint64_t v17 = v6;
          }
          float v18 = (float *)(v4 + i);
          if (v8 < v12)
          {
            float v19 = *(v18 - 5);
            float v20 = *(v18 - 4);
          }
          else
          {
            float v19 = *(v18 - 1);
            float v20 = *v18;
          }
          HIDWORD(v16) = 0;
          *(void *)&long long v16 = __PAIR64__(LODWORD(v20), LODWORD(v19));
          *((float *)&v16 + 2) = (float)(1.0 - v19) - v20;
          *(_DWORD *)(**(void **)(result + 32) + 4 * (v2 + *(void *)(result + 16))) = *(_DWORD *)(v17 + 4);
          goto LABEL_26;
        }
        if (v11 < v10) {
          goto LABEL_18;
        }
LABEL_14:
        if (v13 < v10)
        {
          *(_DWORD *)(**(void **)(result + 32) + 4 * (v2 + *(void *)(result + 16))) = v13;
          uint64_t v15 = (float *)(v4 + i);
          HIDWORD(v16) = 0;
          *(void *)&long long v16 = *(void *)(v15 - 1);
          *((float *)&v16 + 2) = (float)(1.0 - *(float *)&v16) - *v15;
LABEL_26:
          *(_OWORD *)(**(void **)(result + 40) + 16 * (v2 + *(void *)(result + 16))) = v16;
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v11 < v10)
      {
LABEL_18:
        *(_DWORD *)(**(void **)(result + 32) + 4 * (v2 + *(void *)(result + 16))) = v11;
        HIDWORD(v16) = 0;
        *(void *)&long long v16 = *(void *)(v4 + i - 20);
        *((float *)&v16 + 2) = (float)(1.0 - *(float *)&v16) - *((float *)&v16 + 1);
        goto LABEL_26;
      }
LABEL_17:
      *(_DWORD *)(**(void **)(result + 32) + 4 * (v2 + *(void *)(result + 16))) = -1;
LABEL_27:
      if ((unint64_t)++v2 >= *(void *)(result + 8)) {
        return result;
      }
    }
    if (*v9 == -1.0) {
      goto LABEL_17;
    }
    unsigned int v13 = *(_DWORD *)(v4 + i - 8);
    goto LABEL_14;
  }
  return result;
}

void *std::__function::__value_func<void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t cv3d::cv::gess::MAJOR_VERSION(cv3d::cv::gess *this)
{
  p_str = &__str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "1.4.26");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  long long v3 = (char *)p_str + size;
  if (size >= 1)
  {
    uint64_t v4 = p_str;
    do
    {
      uint64_t v5 = memchr(v4, 46, size);
      if (!v5) {
        break;
      }
      if (*v5 == 46) {
        goto LABEL_12;
      }
      uint64_t v4 = (std::string *)(v5 + 1);
      int64_t size = v3 - (unsigned char *)v4;
    }
    while (v3 - (unsigned char *)v4 > 0);
  }
  uint64_t v5 = v3;
LABEL_12:
  if (v5 == v3) {
    std::string::size_type v6 = -1;
  }
  else {
    std::string::size_type v6 = v5 - (unsigned char *)p_str;
  }
  std::string::basic_string(&v9, &__str, 0, v6, (std::allocator<char> *)&v11);
  unsigned __int16 v7 = std::stoul(&v9, 0, 10);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_24F53E19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::MINOR_VERSION(cv3d::cv::gess *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "1.4.26");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  long long v3 = (unsigned __int8 *)p_str + size;
  if (size >= 1)
  {
    size_t v4 = size;
    uint64_t v5 = p_str;
    do
    {
      std::string::size_type v6 = (unsigned __int8 *)memchr(v5, 46, v4);
      if (!v6) {
        break;
      }
      if (*v6 == 46) {
        goto LABEL_13;
      }
      uint64_t v5 = (std::string *)(v6 + 1);
      size_t v4 = v3 - (unsigned __int8 *)v5;
    }
    while (v3 - (unsigned __int8 *)v5 > 0);
  }
  std::string::size_type v6 = (unsigned __int8 *)p_str + size;
LABEL_13:
  if (v6 == v3) {
    std::string::size_type v7 = 0;
  }
  else {
    std::string::size_type v7 = v6 - (unsigned __int8 *)p_str + 1;
  }
  if (size)
  {
    float v8 = p_str;
    std::string v9 = (std::string *)((char *)p_str + size);
    do
    {
      unsigned int v10 = v8;
      char v11 = (unsigned __int8 *)v8;
      while (1)
      {
        int v12 = *v11++;
        if (v12 == 46) {
          break;
        }
        unsigned int v10 = (std::string *)v11;
        if (v11 == v3)
        {
          unsigned int v10 = v9;
          goto LABEL_23;
        }
      }
      float v8 = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
      std::string v9 = v10;
    }
    while (v11 != v3);
LABEL_23:
    if (v10 == (std::string *)v3) {
      uint64_t v13 = -1;
    }
    else {
      uint64_t v13 = (char *)v10 - (char *)p_str;
    }
    if (size >= 1)
    {
      BOOL v14 = p_str;
      do
      {
        unint64_t v15 = (unint64_t)memchr(v14, 46, size);
        if (!v15) {
          break;
        }
        if (*(unsigned char *)v15 == 46) {
          goto LABEL_34;
        }
        BOOL v14 = (std::string *)(v15 + 1);
        int64_t size = v3 - (unsigned __int8 *)v14;
      }
      while (v3 - (unsigned __int8 *)v14 > 0);
    }
  }
  else
  {
    uint64_t v13 = -1;
  }
  unint64_t v15 = (unint64_t)v3;
LABEL_34:
  long long v16 = (char *)p_str + ~v15;
  if ((unsigned __int8 *)v15 == v3) {
    long long v16 = 0;
  }
  std::string::basic_string(&v19, &__str, v7, (std::string::size_type)&v16[v13], (std::allocator<char> *)&v21);
  unsigned __int16 v17 = std::stoul(&v19, 0, 10);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_24F53E374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::PATCH_VERSION(cv3d::cv::gess *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "1.4.26");
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  long long v3 = (unsigned __int8 *)p_str + size;
  if (size)
  {
    size_t v4 = p_str;
    uint64_t v5 = (std::string *)((char *)p_str + size);
    do
    {
      std::string::size_type v6 = v4;
      std::string::size_type v7 = (unsigned __int8 *)v4;
      while (1)
      {
        int v8 = *v7++;
        if (v8 == 46) {
          break;
        }
        std::string::size_type v6 = (std::string *)v7;
        if (v7 == v3)
        {
          std::string::size_type v6 = v5;
          goto LABEL_13;
        }
      }
      size_t v4 = (std::string *)((char *)&v6->__r_.__value_.__l.__data_ + 1);
      uint64_t v5 = v6;
    }
    while (v7 != v3);
LABEL_13:
    if (v6 == (std::string *)v3) {
      std::string::size_type v9 = 0;
    }
    else {
      std::string::size_type v9 = (char *)v6 - (char *)p_str + 1;
    }
    unsigned int v10 = p_str;
    char v11 = (std::string *)((char *)p_str + size);
    do
    {
      int v12 = v10;
      uint64_t v13 = (unsigned __int8 *)v10;
      while (1)
      {
        int v14 = *v13++;
        if (v14 == 46) {
          break;
        }
        int v12 = (std::string *)v13;
        if (v13 == v3) {
          goto LABEL_24;
        }
      }
      unsigned int v10 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      char v11 = v12;
    }
    while (v13 != v3);
    char v11 = v12;
  }
  else
  {
    std::string::size_type v9 = 0;
    char v11 = p_str;
  }
LABEL_24:
  unint64_t v15 = (char *)p_str + ~(unint64_t)v11;
  if (v11 == (std::string *)v3) {
    unint64_t v15 = 0;
  }
  std::string::basic_string(&v18, &__str, v9, (std::string::size_type)&v15[size], (std::allocator<char> *)&v20);
  unsigned __int16 v16 = std::stoul(&v18, 0, 10);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_24F53E4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::CutHEdges(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, double a5)
{
  unsigned int v54 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "flags hedges");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v54, (long long *)__p);
  if (SBYTE7(v51) < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v54;
  uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p);
  uint64_t v10 = *(void *)(a1 + 136) - *(void *)(a1 + 128);
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = 0;
    unint64_t v13 = v10 / 20;
    uint64_t v14 = *(void *)(v9 + 40);
    if (v13 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v13;
    }
    do
    {
      if (*(void *)(v9 + 48) <= (unint64_t)v12) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(void *)(v14 + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) &= ~(1 << v12);
      ++v12;
    }
    while (v15 != v12);
    for (uint64_t i = 0; i != v15; ++i)
    {
      unsigned int v53 = i;
      if (*(void *)(v11 + 48) <= (unint64_t)i) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      uint64_t v17 = *(void *)(v11 + 40);
      unint64_t v18 = (unint64_t)i >> 6;
      uint64_t v19 = *(void *)(v17 + 8 * v18);
      if ((v19 & (1 << i)) == 0)
      {
        *(void *)(v17 + 8 * v18) = v19 | (1 << i);
        unint64_t v20 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v53);
        if (*(void *)(v11 + 48) <= v20) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        *(void *)(*(void *)(v11 + 40) + ((v20 >> 3) & 0x1FFFFFF8)) |= 1 << v20;
        unint64_t v21 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v53) + 12);
        uint64_t v22 = *(void *)(a2 + 40);
        if (v21 >= (*(void *)(a2 + 48) - v22) >> 2) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        int v23 = *(_DWORD *)(v22 + 4 * v21);
        uint64_t v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v53);
        unint64_t v25 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v24) + 12);
        uint64_t v26 = *(void *)(a2 + 40);
        if (v25 >= (*(void *)(a2 + 48) - v26) >> 2) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        int v27 = *(_DWORD *)(v26 + 4 * v25);
        if ((v23 != 1 || v27 != 1) && (v23 != 1 || v27 != 4) && (v23 != 4 || v27 != 1))
        {
          BOOL v28 = v23 == 4;
          BOOL v29 = v27 == 2;
          if (v27 != 2) {
            BOOL v28 = 0;
          }
          if (v27 == 4) {
            BOOL v29 = 1;
          }
          if (v23 != 2) {
            BOOL v29 = 0;
          }
          if (!v29 && !v28)
          {
            BOOL v31 = v23 == 2 && v27 == 1;
            BOOL v32 = v27 == 2 && v23 == 1;
            if (v32 || v31)
            {
              uint64_t v33 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v53);
              float32x4_t v45 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v33 + 12));
              uint64_t v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v53);
              uint64_t v35 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v34);
              char v36 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v35 + 12));
              v37.i64[0] = 0x3F0000003F000000;
              v37.i64[1] = 0x3F0000003F000000;
              float32x4_t v52 = vmulq_f32(vaddq_f32(v45, *v36), v37);
              uint64_t v38 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v53);
              long long v46 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v38 + 12));
              uint64_t v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v53);
              uint64_t v40 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v39);
              long long v41 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v40 + 12));
              *(_OWORD *)std::string __p = v46;
              long long v51 = v41;
              cv3d::cv::gess::math::PlaneT<float>::intersectLine(a4, (float32x4_t *)__p, &v52, 0, a5);
              int v48 = -1;
              unsigned int appended = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(a1, &v52, &v48);
              cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, &v53, &appended, 0);
              unint64_t v42 = appended;
              uint64_t v43 = *(void *)(a2 + 40);
              if (appended >= (unint64_t)((*(void *)(a2 + 48) - v43) >> 2)) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(_DWORD *)(v43 + 4 * appended) = 4;
              if (*(void *)(a3 + 48) <= v42) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(void *)(*(void *)(a3 + 40) + ((v42 >> 3) & 0x1FFFFFF8)) |= 1 << v42;
            }
            else if (v23 != 4 || v27 != 4)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x25335E550](exception, "Invalid he status.");
            }
          }
        }
      }
    }
  }
  if (v54 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 32), &v54);
  }
}

void sub_24F53E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::math::PlaneT<float>::intersectLine(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int a4, double a5)
{
  float32x4_t v5 = *a2;
  float32x4_t v6 = a2[1];
  float32x4_t v7 = vsubq_f32(v6, *a2);
  float32x4_t v8 = *a1;
  float32x4_t v9 = vmulq_f32(v7, v7);
  v9.i32[3] = 0;
  float32x4_t v10 = vpaddq_f32(v9, v9);
  float32x4_t v11 = vpaddq_f32(v10, v10);
  if (v11.f32[0] <= 0.0) {
    float32x4_t v12 = (float32x4_t)xmmword_24F570A10;
  }
  else {
    float32x4_t v12 = vdivq_f32(v7, vsqrtq_f32(v11));
  }
  float32x4_t v13 = vmulq_f32(v8, v12);
  v13.i32[3] = 0;
  if (fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13))) < a5)
  {
    float32x4_t v14 = vmulq_f32(v5, v8);
    v14.i32[3] = 0;
    if (fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)) + a1[1].f32[0]) < a5 && a4 != 0)
    {
      float32x4_t v16 = vaddq_f32(v5, v6);
      v17.i64[0] = 0x3F0000003F000000;
      v17.i64[1] = 0x3F0000003F000000;
      *a3 = vmulq_f32(v16, v17);
      return 1;
    }
    return 0;
  }
  float32x4_t v19 = vmulq_f32(v8, v7);
  v19.i32[3] = 0;
  float v20 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  if (fabsf(v20) < a5) {
    return 0;
  }
  float32x4_t v21 = vmulq_f32(v5, v8);
  v21.i32[3] = 0;
  float v22 = (float)-(float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21)) + a1[1].f32[0]) / v20;
  *a3 = vaddq_f32(v5, vmulq_n_f32(v7, v22));
  return a5 + 1.0 >= v22 && 0.0 - a5 <= v22;
}

uint64_t cv3d::cv::gess::alg::PlaneCut(float32x4_t *this, float32x4_t *a2, GeometryQuality *a3, int *a4, unsigned __int8 a5, double a6)
{
  if ((a3 & 1) == 0)
  {
    a2[1].f32[0] = -a2[1].f32[0];
    *a2 = vnegq_f32(*a2);
  }
  int v10 = a5;
  v83[0] = 0;
  v83[1] = 0;
  int v84 = 0;
  *(void *)&long long v11 = 0x80000000800000;
  *((void *)&v11 + 1) = 0x80000000800000;
  int32x4_t v85 = vdupq_n_s32(0x7F7FFFFFu);
  long long v86 = v11;
  cv3d::cv::gess::alg::MeasureGeometryQuality(this, (const cv3d::cv::gess::mesh::PolyMesh *)v83, a3);
  if (a6 == 0.0) {
    a6 = *(float *)v83 / 1000.0;
  }
  for (uint64_t i = 0; i != 3; ++i)
    v82[i] = *(float *)&v85.i32[i];
  for (uint64_t j = 0; j != 3; ++j)
    v82[j + 3] = *(float *)&v87[j - 3];
  float v14 = *(float *)v83;
  unsigned int v81 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "CutStatus vertex");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::alg::CutStatus>((uint64_t)this, &v81, (long long *)__p);
  int v74 = v10;
  if (v80 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v81;
  uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::alg::CutStatus>(&this->i64[1], (unsigned int *)__p);
  if (this[7].i64[0] != this[6].i64[1])
  {
    unint64_t v16 = 0;
    do
    {
      float32x4_t v17 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, this[11].u32[0], v16);
      uint64_t v18 = *(void *)(v15 + 40);
      if (v16 >= (unint64_t)((*(void *)(v15 + 48) - v18) >> 2)) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      float32x4_t v19 = vmulq_f32(*a2, *v17);
      v19.i32[3] = 0;
      double v20 = (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19)) + a2[1].f32[0]);
      if (v20 >= -a6) {
        int v21 = 4;
      }
      else {
        int v21 = 2;
      }
      if (a6 < v20) {
        int v21 = 1;
      }
      *(_DWORD *)(v18 + 4 * v16++) = v21;
    }
    while (v16 < (this[7].i64[0] - this[6].i64[1]) >> 2);
  }
  unsigned int v78 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "PlaneCutAffected vertex");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v78, (long long *)__p);
  if (v80 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v78;
  uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(&this->i64[1], (unsigned int *)__p);
  cv3d::cv::gess::alg::CutHEdges((uint64_t)this, v15, v22, a2, a6);
  if (this[10].i64[0] != this[9].i64[1])
  {
    unint64_t v23 = 0;
    uint64_t v24 = "index < data_.size()";
    unint64_t v25 = "operator[]";
    do
    {
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
      LODWORD(v75) = v23;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)this, (unsigned int *)&v75, __p);
      uint64_t v26 = 0;
      int v27 = (char *)__p[0];
      uint64_t v28 = *(void *)(v15 + 40);
      int v29 = 4;
      do
      {
        unint64_t v30 = *(unsigned int *)((char *)__p[0] + v26);
        if ((*(void *)(v15 + 48) - v28) >> 2 <= v30)
        {
          int v39 = 182;
          uint64_t v40 = "Attribute.h";
          goto LABEL_95;
        }
        int v31 = *(_DWORD *)(v28 + 4 * v30);
        if (v31 == 1)
        {
          if (v29 == 2)
          {
            int v39 = 129;
            unint64_t v25 = "PlaneCut";
            uint64_t v40 = "Edit.cpp";
            uint64_t v24 = "fcs != REMOVE";
LABEL_95:
            __assert_rtn(v25, v40, v39, v24);
          }
          int v29 = 1;
        }
        else if (v31 == 2)
        {
          if (v29 == 1)
          {
            int v39 = 132;
            unint64_t v25 = "PlaneCut";
            uint64_t v40 = "Edit.cpp";
            uint64_t v24 = "fcs != KEEP";
            goto LABEL_95;
          }
          int v29 = 2;
        }
        v26 += 4;
      }
      while (v26 != 12);
      if (v29 != 2 && v29 != 4) {
        goto LABEL_39;
      }
      uint64_t v32 = 0;
      uint64_t v33 = *(void *)(v22 + 40);
      do
      {
        unint64_t v34 = *(unsigned int *)&v27[v32];
        if (*(void *)(v22 + 48) <= v34) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        v32 += 4;
        *(void *)(v33 + ((v34 >> 3) & 0x1FFFFFF8)) |= 1 << v34;
      }
      while (v32 != 12);
      cv3d::cv::gess::mesh::TriMesh::DeleteFace((uint64_t)this, (unsigned int *)&v75);
      int v27 = (char *)__p[0];
      if (__p[0])
      {
LABEL_39:
        __p[1] = v27;
        operator delete(v27);
      }
      ++v23;
    }
    while (v23 < (this[10].i64[0] - this[9].i64[1]) >> 2);
  }
  if (!cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)this))
  {
    uint64_t v38 = 0;
    goto LABEL_54;
  }
  cv3d::cv::gess::mesh::TriMesh::RemoveDanglingUV((cv3d::cv::gess::mesh::TriMesh *)this);
  LODWORD(v75) = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v35 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v75, (unsigned __int8 *)__p);
  BOOL v37 = v35;
  if ((v80 & 0x80000000) == 0)
  {
    if (!v35) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  operator delete(__p[0]);
  if (v37) {
LABEL_48:
  }
    cv3d::cv::gess::alg::SortFaceByGroupID((uint64_t **)this, v36);
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  double v75 = 0.0;
  double v76 = 0.0;
  int v41 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)&this->i64[1], (uint64_t)&v75, (unsigned __int8 *)__p);
  if (v80 < 0) {
    operator delete(__p[0]);
  }
  if (v41 == -1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)this);
  }
LABEL_54:
  unint64_t v42 = (this[7].i64[0] - this[6].i64[1]) >> 2;
  LOBYTE(v75) = 0;
  std::vector<BOOL>::vector(__p, v42, (unsigned __int8 *)&v75);
  uint64_t v44 = this[6].i64[1];
  uint64_t v43 = this[7].i64[0];
  if (v43 != v44)
  {
    unint64_t v45 = 0;
    unsigned int v46 = 0;
    double v47 = v14;
    do
    {
      if (*(void *)(v22 + 48) <= v45) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      unint64_t v48 = v45 >> 6;
      uint64_t v49 = 1 << v45;
      if ((*(void *)(*(void *)(v22 + 40) + 8 * v48) & v49) != 0)
      {
        *((void *)__p[0] + v48) |= v49;
        v87[0] = v46;
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(&v75, &this[6].u32[2], v87);
        for (unsigned int k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v75);
              ;
              unsigned int k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v75))
        {
          v87[0] = k;
          if (k == -1) {
            break;
          }
          long long v51 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&this[6].i64[1], v87);
          uint64_t v52 = cv3d::cv::gess::mesh::Topology::h((uint64_t)&this[6].i64[1], v51);
          *(void *)((char *)__p[0] + (((unint64_t)*(unsigned int *)(v52 + 12) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v52 + 12);
        }
        uint64_t v44 = this[6].i64[1];
        uint64_t v43 = this[7].i64[0];
      }
      unint64_t v45 = ++v46;
    }
    while (v46 < (unint64_t)((v43 - v44) >> 2));
    double v53 = 0.001;
    if (a6 >= 0.001) {
      double v53 = a6;
    }
    double v54 = v47 + v47 >= v53 ? v47 + v47 : v53;
    if (v43 != v44)
    {
      unint64_t v55 = 0;
      unsigned int v56 = 0;
      double v57 = v82[0] - v54;
      double v58 = v82[1] - v54;
      double v59 = v82[2] - v54;
      double v60 = v54 + v82[3];
      double v61 = v54 + v82[4];
      double v62 = v54 + v82[5];
      while (1)
      {
        if (*(void *)(v22 + 48) <= v55) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        if ((*(void *)(*(void *)(v22 + 40) + 8 * (v55 >> 6)) & (1 << v55)) != 0)
        {
          LODWORD(v75) = this[11].i32[0];
          uint64_t v63 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(&this->i64[1], (unsigned int *)&v75);
          uint64_t v64 = *(void *)(v63 + 40);
          if (v55 >= (*(void *)(v63 + 48) - v64) >> 4) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          float32x4_t v65 = vmulq_f32(*a2, *(float32x4_t *)(v64 + 16 * v55));
          v65.i32[3] = 0;
          if (v54 < fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v65, v65)) + a2[1].f32[0]))
          {
            int v72 = 0;
            if (v74) {
              goto LABEL_97;
            }
            goto LABEL_98;
          }
        }
        if ((*((void *)__p[0] + (v55 >> 6)) & (1 << v55)) != 0)
        {
          v87[0] = this[11].u32[0];
          uint64_t v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(&this->i64[1], v87);
          uint64_t v67 = *(void *)(v66 + 40);
          if (v55 >= (*(void *)(v66 + 48) - v67) >> 4) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          uint64_t v68 = 0;
          uint64_t v69 = v67 + 16 * v56;
          do
          {
            *(&v75 + v68) = *(float *)(v69 + 4 * v68);
            ++v68;
          }
          while (v68 != 3);
          if (v57 > v75 || v58 > v76) {
            break;
          }
          BOOL v70 = v59 > v77 || v60 < v75;
          BOOL v71 = v70 || v61 < v76;
          if (v71 || v62 < v77) {
            break;
          }
        }
        unint64_t v55 = ++v56;
        if (v56 >= (unint64_t)((this[7].i64[0] - this[6].i64[1]) >> 2))
        {
          uint64_t v38 = v38;
          goto LABEL_99;
        }
      }
      if (v74)
      {
        int v72 = 1;
LABEL_97:
        uint64_t v38 = 0;
        *a4 = v72;
        goto LABEL_99;
      }
LABEL_98:
      uint64_t v38 = 0;
    }
  }
LABEL_99:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v78 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(&this->i64[1], &v78);
  }
  unsigned int v78 = -1;
  if (v81 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(&this->i64[1], &v81);
  }
  return v38;
}

void sub_24F53F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::alg::CutStatus>(uint64_t a1, _DWORD *a2, long long *a3)
{
  int v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::alg::CutStatus>((uint64_t *)(a1 + 8), (uint64_t)&v6, a3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

uint64_t cv3d::cv::gess::alg::BoxCut(float32x4_t *a1, float32x4_t *a2, int a3, double a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  for (uint64_t i = 0; i != 12; i += 2)
  {
    float32x4_t v7 = &v10[i];
    float32x4_t *v7 = (float32x4_t)xmmword_24F570A10;
    v7[1].i32[0] = 0;
  }
  LOBYTE(result) = cv3d::cv::gess::math::OBBT<float>::GetFacePlanes(a2, v10);
  for (uint64_t j = 0; j != 12; j += 2)
  {
    if (result) {
      uint64_t result = cv3d::cv::gess::alg::PlaneCut(a1, &v10[j], 0, 0, 0, a4);
    }
    else {
      uint64_t result = 0;
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::math::OBBT<float>::GetFacePlanes(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v3 = 0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 1;
  do
  {
    cv3d::cv::gess::math::OBBT<float>::FacePlane(a1, v3, &v6);
    v4[-1] = v6;
    v4->i32[0] = v7;
    v4 += 2;
    ++v3;
  }
  while (v3 != 6);
  return 1;
}

uint64_t cv3d::cv::gess::alg::BoxCut(float32x4_t *a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4 = 0;
  float32x4_t v41 = 0u;
  float32x4_t v42 = 0u;
  long long v39 = 0u;
  float32x4_t v40 = 0u;
  long long v35 = xmmword_24F578DE0;
  float32x2_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = 0;
    int32x2_t v7 = 0;
    do
    {
      *(float *)v7.i32 = *(float *)v7.i32 + (float)(*(float *)(v5 + 4 * v6) * *(float *)((char *)&v35 + v6));
      v6 += 4;
    }
    while (v6 != 16);
    v36.i32[v4++] = v7.i32[0];
    v5 += 4;
  }
  while (v4 != 4);
  uint64_t v8 = 0;
  v7.i32[0] = HIDWORD(v37);
  float32x2_t v9 = vdiv_f32(v36, (float32x2_t)vdup_lane_s32(v7, 0));
  float v10 = *(float *)&v37 / *((float *)&v37 + 1);
  *(float32x2_t *)v11.f32 = v9;
  v11.f32[2] = *(float *)&v37 / *((float *)&v37 + 1);
  v11.i32[3] = 0;
  float32x4_t v38 = v11;
  long long v34 = xmmword_24F578940;
  long long v35 = 0uLL;
  uint64_t v12 = a2;
  do
  {
    uint64_t v13 = 0;
    int32x2_t v14 = 0;
    do
    {
      *(float *)v14.i32 = *(float *)v14.i32 + (float)(*(float *)(v12 + 4 * v13) * *(float *)((char *)&v34 + v13));
      v13 += 4;
    }
    while (v13 != 16);
    *((_DWORD *)&v35 + v8++) = v14.i32[0];
    v12 += 4;
  }
  while (v8 != 4);
  uint64_t v15 = 0;
  v14.i32[0] = HIDWORD(v35);
  *(float32x2_t *)v16.f32 = vsub_f32(vdiv_f32(*(float32x2_t *)&v35, (float32x2_t)vdup_lane_s32(v14, 0)), v9);
  v16.f32[2] = (float)(*((float *)&v35 + 2) / *((float *)&v35 + 3)) - v10;
  v16.i32[3] = 0;
  float32x4_t v17 = vmulq_f32(v16, v16);
  v17.i32[3] = 0;
  float32x2_t v18 = (float32x2_t)vpaddq_f32(v17, v17).u64[0];
  v18.f32[0] = sqrtf(vaddv_f32(v18));
  float32x4_t v40 = vdivq_f32(v16, (float32x4_t)vdupq_lane_s32((int32x2_t)v18, 0));
  long long v33 = xmmword_24F578E60;
  long long v34 = 0uLL;
  uint64_t v19 = a2;
  do
  {
    uint64_t v20 = 0;
    int32x2_t v21 = 0;
    do
    {
      *(float *)v21.i32 = *(float *)v21.i32 + (float)(*(float *)(v19 + 4 * v20) * *(float *)((char *)&v33 + v20));
      v20 += 4;
    }
    while (v20 != 16);
    *((_DWORD *)&v34 + v15++) = v21.i32[0];
    v19 += 4;
  }
  while (v15 != 4);
  uint64_t v22 = 0;
  v21.i32[0] = HIDWORD(v34);
  *(float32x2_t *)v23.f32 = vsub_f32(vdiv_f32(*(float32x2_t *)&v34, (float32x2_t)vdup_lane_s32(v21, 0)), v9);
  v23.f32[2] = (float)(*((float *)&v34 + 2) / *((float *)&v34 + 3)) - v10;
  v23.i32[3] = 0;
  float32x4_t v24 = vmulq_f32(v23, v23);
  v24.i32[3] = 0;
  float32x2_t v25 = (float32x2_t)vpaddq_f32(v24, v24).u64[0];
  v25.f32[0] = sqrtf(vaddv_f32(v25));
  float32x4_t v41 = vdivq_f32(v23, (float32x4_t)vdupq_lane_s32((int32x2_t)v25, 0));
  long long v32 = xmmword_24F578E70;
  long long v33 = 0uLL;
  do
  {
    uint64_t v26 = 0;
    int32x2_t v27 = 0;
    do
    {
      *(float *)v27.i32 = *(float *)v27.i32 + (float)(*(float *)(a2 + 4 * v26) * *(float *)((char *)&v32 + v26));
      v26 += 4;
    }
    while (v26 != 16);
    *((_DWORD *)&v33 + v22++) = v27.i32[0];
    a2 += 4;
  }
  while (v22 != 4);
  v27.i32[0] = HIDWORD(v33);
  *(float32x2_t *)v28.f32 = vsub_f32(vdiv_f32(*(float32x2_t *)&v33, (float32x2_t)vdup_lane_s32(v27, 0)), v9);
  v28.f32[2] = (float)(*((float *)&v33 + 2) / *((float *)&v33 + 3)) - v10;
  v28.i32[3] = 0;
  float32x4_t v29 = vmulq_f32(v28, v28);
  v29.i32[3] = 0;
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  v29.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v29.f32));
  v18.i32[1] = v25.i32[0];
  *(float32x2_t *)&long long v30 = vmul_f32(v18, (float32x2_t)0x3F0000003F000000);
  *((float *)&v30 + 2) = v29.f32[0] * 0.5;
  HIDWORD(v30) = 0;
  float32x4_t v42 = vdivq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0));
  long long v39 = v30;
  return cv3d::cv::gess::alg::BoxCut(a1, &v38, a3, a4);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::alg::CutStatus>(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)a1[1];
  if ((void *)*a1 == v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)*a1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)*a1;
    while (*v8)
    {
      v8 += 2;
      uint64_t v7 = (v7 + 1);
      if (v8 == v6) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    uint64_t v9 = (uint64_t)(a1 + 2);
    unint64_t v10 = a1[2];
    if ((unint64_t)v6 >= v10)
    {
      uint64_t v12 = ((uint64_t)v6 - v5) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v10 - v5;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      int32x2_t v27 = a1 + 2;
      float32x4_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      float32x4_t v17 = &v16[16 * v12];
      *(void *)&long long v24 = v16;
      *((void *)&v24 + 1) = v17;
      uint64_t v26 = &v16[16 * v18];
      *(void *)float32x4_t v17 = 0;
      *((void *)v17 + 1) = 0;
      float32x2_t v25 = v17 + 16;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__swap_out_circular_buffer(a1, &v24);
      float32x4_t v11 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)&v24);
    }
    else
    {
      float32x4_t v11 = v6 + 2;
      *uint64_t v6 = 0;
      v6[1] = 0;
      a1[1] = (uint64_t)(v6 + 2);
    }
    a1[1] = (uint64_t)v11;
  }
  float32x4_t v23 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, &v23, &v24);
  uint64_t v19 = *a1 + 16 * v7;
  long long v20 = v24;
  long long v24 = 0uLL;
  int32x2_t v21 = *(std::__shared_weak_count **)(v19 + 8);
  *(_OWORD *)uint64_t v19 = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  return v7;
}

void sub_24F53FA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(long long *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24F53FAE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,0>(void *a1, long long *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D91C8;
  cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1 + 3, a2, a3);
  a1[3] = &unk_2700D9200;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return a1;
}

void sub_24F53FB60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D91C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D91C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::~AttributeT(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Size(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Reserve(uint64_t a1, std::vector<int>::size_type a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Resize(uint64_t a1, std::vector<unsigned int>::size_type a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Clear(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2) {
    operator delete(v2);
  }
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::PushBack(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  unint64_t v3 = a1[7];
  uint64_t v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = (char *)a1[5];
    uint64_t v7 = (v4 - v6) >> 2;
    if ((unint64_t)(v7 + 1) >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = v3 - (void)v6;
    unint64_t v9 = (uint64_t)(v3 - (void)v6) >> 1;
    if (v9 <= v7 + 1) {
      unint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      float32x4_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v10);
      uint64_t v6 = (char *)a1[5];
      uint64_t v4 = (char *)a1[6];
    }
    else
    {
      float32x4_t v11 = 0;
    }
    uint64_t v12 = &v11[4 * v7];
    unint64_t v13 = &v11[4 * v10];
    *(_DWORD *)uint64_t v12 = 0;
    uint64_t v5 = v12 + 4;
    while (v4 != v6)
    {
      int v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v4 = 0;
    uint64_t v5 = v4 + 4;
  }
  a1[6] = v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 40);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(v3 + 4 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(void *)(result + 40) + 4 * a3) = *(_DWORD *)(*(void *)(result + 40) + 4 * a2);
  return result;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Clone()
{
}

void sub_24F53FDF4(_Unwind_Exception *a1)
{
  MEMORY[0x25335EA10](v1, 0x1093C400FBCE358);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::MemoryConsumption(uint64_t a1)
{
  return *(void *)(a1 + 56) - *(void *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  *(void *)this = &unk_2700D9200;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  int v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(void *)int v4 = &unk_2700D9200;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::alg::CutStatus>::__init_with_size[abi:ne180100]<cv3d::cv::gess::alg::CutStatus*,cv3d::cv::gess::alg::CutStatus*>((void *)v4 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_24F53FEE8(_Unwind_Exception *a1)
{
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

void *std::vector<cv3d::cv::gess::alg::CutStatus>::__init_with_size[abi:ne180100]<cv3d::cv::gess::alg::CutStatus*,cv3d::cv::gess::alg::CutStatus*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F53FF5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_24F53FFE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::alg::CutStatus>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

float32_t cv3d::cv::gess::math::OBBT<float>::FacePlane@<S0>(float32x4_t *a1@<X0>, int a2@<W1>, float32x4_t *a3@<X8>)
{
  switch(a2)
  {
    case 1:
      float v3 = a1[1].f32[0];
      float32x4_t v4 = a1[2];
      goto LABEL_9;
    case 2:
      float32x4_t v5 = a1[3];
      float32x4_t v6 = vnegq_f32(v5);
      float v7 = a1[1].f32[1];
      goto LABEL_7;
    case 3:
      float v3 = a1[1].f32[1];
      float32x4_t v4 = a1[3];
      goto LABEL_9;
    case 4:
      float32x4_t v5 = a1[4];
      float32x4_t v6 = vnegq_f32(v5);
      float v7 = a1[1].f32[2];
      goto LABEL_7;
    case 5:
      float v3 = a1[1].f32[2];
      float32x4_t v4 = a1[4];
LABEL_9:
      float32x4_t v12 = vaddq_f32(*a1, vmulq_n_f32(v4, v3));
      float32x4_t v13 = vmulq_f32(v4, v4);
      v13.i32[3] = 0;
      v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
      v13.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v13.f32));
      float32x4_t v14 = vdivq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0));
      *a3 = v14;
      float32x4_t v11 = vmulq_f32(v12, v14);
      break;
    default:
      float32x4_t v5 = a1[2];
      float32x4_t v6 = vnegq_f32(v5);
      float v7 = a1[1].f32[0];
LABEL_7:
      float32x4_t v8 = vsubq_f32(*a1, vmulq_n_f32(v5, v7));
      float32x4_t v9 = vmulq_f32(v5, v5);
      v9.i32[3] = 0;
      v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
      v9.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v9.f32));
      float32x4_t v10 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
      *a3 = v10;
      float32x4_t v11 = vmulq_f32(v8, v10);
      break;
  }
  v11.i32[3] = 0;
  v11.f32[0] = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11));
  a3[1].i32[0] = v11.i32[0];
  return v11.f32[0];
}

BOOL cv3d::cv::gess::alg::operator==(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL cv3d::cv::gess::alg::operator!=(void *a1, void *a2)
{
  return !cv3d::cv::gess::alg::operator==(a1, a2);
}

uint64_t cv3d::cv::gess::alg::CountBoundaryLoops(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  std::vector<BOOL>::vector(&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2));
  if (*((void *)this + 17) == *((void *)this + 16)) {
    goto LABEL_18;
  }
  unint64_t v3 = 0;
  unsigned int v4 = 1;
  do
  {
    float32x4_t v5 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v3);
    if ((*v5 & v6) != 0) {
      *(void *)((char *)__p + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
    }
    uint64_t v8 = *((void *)this + 16);
    uint64_t v7 = *((void *)this + 17);
    unint64_t v3 = v4;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 2) > v4++);
  if (v7 == v8)
  {
LABEL_18:
    uint64_t v12 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    do
    {
      float32x4_t v13 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v10);
      if ((*v13 & v14) != 0 && ((*(void *)((char *)__p + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        uint64_t v12 = (v12 + 1);
        unsigned int v23 = v11;
        unsigned int v15 = v11;
LABEL_13:
        *(void *)((char *)__p + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
        float32x4_t v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v23);
        uint64_t v17 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v16);
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v22, (char *)this + 104, v17 + 12);
        while (1)
        {
          unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v22);
          unsigned int v15 = HEdge;
          if (HEdge == -1) {
            break;
          }
          uint64_t v19 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), HEdge);
          if ((*v19 & v20) != 0)
          {
            unsigned int v23 = v15;
            if (v15 != v11) {
              goto LABEL_13;
            }
            break;
          }
        }
      }
      unint64_t v10 = ++v11;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2) > v11);
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_24F54043C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::CountConnectedComponents(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  unint64_t v3 = (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2;
  LOBYTE(v18[0]) = 0;
  std::vector<BOOL>::vector(&__p, v3, (unsigned __int8 *)v18);
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  if (*((void *)this + 20) == *((void *)this + 19))
  {
    uint64_t v5 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    do
    {
      unint64_t v7 = v4 >> 6;
      uint64_t v8 = 1 << v4;
      if ((*((void *)__p + (v4 >> 6)) & (1 << v4)) == 0)
      {
        unsigned int __src = v6;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::__assign_with_size_random_access[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(v18, (char *)&__src, 1uLL);
        uint64_t v5 = (v5 + 1);
        *((void *)__p + v7) |= v8;
        while (*((void *)&v19 + 1))
        {
          unsigned int __src = *(_DWORD *)(*(void *)(*((void *)&v18[0] + 1) + (((unint64_t)v19 >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v19 & 0x3FF));
          *(void *)&long long v19 = v19 + 1;
          --*((void *)&v19 + 1);
          if ((unint64_t)v19 >= 0x800)
          {
            operator delete(**((void ***)&v18[0] + 1));
            *((void *)&v18[0] + 1) += 8;
            *(void *)&long long v19 = v19 - 1024;
          }
          unsigned int v9 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)this + 104, &__src);
          unsigned int v16 = v9;
          do
          {
            unsigned int v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v16) + 4);
            unint64_t v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v16);
            unsigned int v11 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), *v10);
            if ((*v11 & v12) == 0)
            {
              float32x4_t v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v16);
              unsigned int v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v13) + 16);
              if (((*(void *)((char *)__p + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
              {
                std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v18, &v15);
                *(void *)((char *)__p + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
              }
            }
          }
          while (v16 != v9);
        }
      }
      unint64_t v4 = ++v6;
    }
    while (v6 < (unint64_t)((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2));
  }
  std::deque<int>::~deque[abi:ne180100](v18);
  if (__p) {
    operator delete(__p);
  }
  return v5;
}

void sub_24F540684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float32x4_t *cv3d::cv::gess::alg::ComputeAverageEdgeLength(float32x4_t *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  if (this[8].i64[1] != this[8].i64[0])
  {
    uint64_t v2 = (uint64_t)this;
    LODWORD(v3) = 0;
    uint64_t v4 = (uint64_t)&this[6].i64[1];
    float v5 = 0.0;
    do
    {
      unsigned int v12 = v3;
      unsigned int v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, &v12) + 12);
      unint64_t v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, &v12);
      uint64_t v8 = cv3d::cv::gess::mesh::Topology::h(v4, v7);
      float32x4_t v11 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), *(_DWORD *)(v8 + 12));
      this = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), v6);
      float32x4_t v9 = vsubq_f32(v11, *this);
      float32x4_t v10 = vmulq_f32(v9, v9);
      v10.i32[3] = 0;
      unint64_t v3 = (v3 + 1);
      float v5 = v5 + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)));
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v2 + 136) - *(void *)(v2 + 128)) >> 2) > v3);
  }
  return this;
}

uint64_t cv3d::cv::gess::alg::ComputeAverageVertexValence(uint64_t this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v2 = this + 104;
  if (*(void *)(this + 112) != *(void *)(this + 104))
  {
    uint64_t v3 = this;
    LODWORD(v4) = 0;
    float v5 = 0.0;
    do
    {
      int v6 = v4;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v7, v2, &v6);
      while (1)
      {
        this = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v7);
        if (this == -1) {
          break;
        }
        float v5 = v5 + 1.0;
      }
      unint64_t v4 = (v4 + 1);
    }
    while (v4 < (uint64_t)(*(void *)(v3 + 112) - *(void *)(v3 + 104)) >> 2);
  }
  return this;
}

uint64_t cv3d::cv::gess::alg::ComputeVertexValenceDeviation(uint64_t this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v2 = this + 104;
  if (*(void *)(this + 112) != *(void *)(this + 104))
  {
    uint64_t v3 = this;
    LODWORD(v4) = 0;
    float v5 = 0.0;
    do
    {
      int v11 = v4;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v12, v2, &v11);
      this = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v12);
      if (this == -1)
      {
        int v10 = 6;
      }
      else
      {
        int v6 = 0;
        LOBYTE(v7) = 0;
        do
        {
          if (v7)
          {
            BOOL v7 = 1;
          }
          else
          {
            uint64_t v8 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v3, *(_DWORD *)(v3 + 180), this);
            BOOL v7 = (v9 & *v8) != 0;
          }
          this = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v12);
          --v6;
        }
        while (this != -1);
        if (v7)
        {
          if (-v6 >= 3) {
            int v10 = -3 - v6;
          }
          else {
            int v10 = v6 + 3;
          }
        }
        else if (~v6 > 4)
        {
          int v10 = -6 - v6;
        }
        else
        {
          int v10 = v6 + 6;
        }
      }
      float v5 = v5 + (float)v10;
      unint64_t v4 = (v4 + 1);
    }
    while (v4 < (uint64_t)(*(void *)(v3 + 112) - *(void *)(v3 + 104)) >> 2);
  }
  return this;
}

float32x4_t *cv3d::cv::gess::alg::ComputeEdgeStandardDeviation(float32x4_t *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  if (this[8].i64[1] != this[8].i64[0])
  {
    uint64_t v2 = (uint64_t)this;
    LODWORD(v3) = 0;
    uint64_t v4 = (uint64_t)&this[6].i64[1];
    float v5 = 0.0;
    float v6 = 0.0;
    do
    {
      unsigned int v13 = v3;
      unsigned int v7 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, &v13) + 12);
      uint64_t v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, &v13);
      uint64_t v9 = cv3d::cv::gess::mesh::Topology::h(v4, v8);
      float32x4_t v12 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), *(_DWORD *)(v9 + 12));
      this = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), v7);
      float32x4_t v10 = vsubq_f32(v12, *this);
      float32x4_t v11 = vmulq_f32(v10, v10);
      v11.i32[3] = 0;
      v11.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11));
      float v5 = v5 + v11.f32[0];
      unint64_t v3 = (v3 + 1);
      float v6 = v6 + sqrtf(v11.f32[0]);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v2 + 136) - *(void *)(v2 + 128)) >> 2) > v3);
  }
  return this;
}

void cv3d::cv::gess::alg::ComputeFaceAngleStandardDeviation(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  if (*((void *)this + 17) != *((void *)this + 16))
  {
    unsigned int v3 = 0;
    int v4 = 0;
    double v5 = 0.0;
    unsigned int v6 = 1;
    double v7 = 0.0;
    do
    {
      double v8 = cv3d::cv::gess::mesh::PolyMesh::Angle((uint64_t)this, v3);
      double v7 = v7 + v8;
      double v5 = v5 + v8 * v8;
      ++v4;
      unsigned int v3 = v6;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2) > v6++);
  }
}

float32x4_t cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox@<Q0>(cv3d::cv::gess::alg *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v4 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  result.i64[0] = 0x80000000800000;
  result.i64[1] = 0x80000000800000;
  *a2 = v4;
  a2[1] = result;
  if (*((void *)this + 14) != *((void *)this + 13))
  {
    LODWORD(v7) = 0;
    unsigned int v8 = 1;
    do
    {
      float32x4_t v10 = v4;
      float32x4_t v11 = result;
      uint64_t v9 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), v7);
      float32x4_t v4 = vminq_f32(v10, *v9);
      float32x4_t result = vmaxq_f32(v11, *v9);
      *a2 = v4;
      a2[1] = result;
      unint64_t v7 = v8++;
    }
    while (v7 < (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 2);
  }
  return result;
}

void *cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox@<X0>(void *result@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v3.i64[0] = 0x80000000800000;
  v3.i64[1] = 0x80000000800000;
  *a2 = v2;
  a2[1] = v3;
  uint64_t v4 = result[1];
  uint64_t v5 = v4 - *result;
  if (v4 != *result)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 >> 4;
    do
    {
      float32x4_t v8 = *(float32x4_t *)(*result + 16 * v6);
      float32x4_t v2 = vminq_f32(v2, v8);
      float32x4_t v3 = vmaxq_f32(v3, v8);
      ++v6;
    }
    while (v7 > v6);
    *a2 = v2;
    a2[1] = v3;
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::MeasureTopologyQuality(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2, TopologyQuality *a3)
{
  uint64_t v6 = *((void *)this + 13);
  uint64_t v5 = *((void *)this + 14);
  if (*((void *)this + 17) == *((void *)this + 16))
  {
    int v8 = 0;
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    unint64_t v9 = 0;
    do
    {
      float32x4_t v10 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v9);
      if (((unint64_t)a2 & *v10) != 0) {
        ++v8;
      }
      else {
        ++v7;
      }
      ++v9;
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2));
  }
  unint64_t v11 = (unint64_t)(v5 - v6) >> 2;
  uint64_t v12 = (*((void *)this + 20) - *((void *)this + 19)) >> 2;
  int v13 = cv3d::cv::gess::alg::CountBoundaryLoops(this, a2);
  int v15 = cv3d::cv::gess::alg::CountConnectedComponents(this, v14);
  *(_DWORD *)a2 = v11;
  *((_DWORD *)a2 + 1) = v7;
  *((_DWORD *)a2 + 2) = v8;
  *((_DWORD *)a2 + 3) = (v7 + v8) >> 1;
  *((_DWORD *)a2 + 4) = v12;
  *((_DWORD *)a2 + 5) = v13;
  *((_DWORD *)a2 + 6) = (v15 - (int)(v11 - ((v7 + v8) >> 1) + v13 + v12) / 2) & ~((v15
                                                                                               - (int)(v11 - ((v7 + v8) >> 1) + v13 + v12)
                                                                                               / 2) >> 31);
  *((_DWORD *)a2 + 7) = v15;
  return 1;
}

uint64_t cv3d::cv::gess::alg::MeasureGeometryQuality(float32x4_t *this, const cv3d::cv::gess::mesh::PolyMesh *a2, GeometryQuality *a3)
{
  cv3d::cv::gess::alg::ComputeAverageEdgeLength(this, a2);
  *(_DWORD *)a2 = v5;
  cv3d::cv::gess::alg::ComputeAverageVertexValence((uint64_t)this, v6);
  *((_DWORD *)a2 + 1) = v7;
  cv3d::cv::gess::alg::ComputeVertexValenceDeviation((uint64_t)this, v8);
  *((_DWORD *)a2 + 2) = v9;
  cv3d::cv::gess::alg::ComputeEdgeStandardDeviation(this, v10);
  *((_DWORD *)a2 + 3) = v11;
  cv3d::cv::gess::alg::ComputeFaceAngleStandardDeviation((cv3d::cv::gess::alg *)this, v12);
  *(float *)&double v13 = v13;
  *((_DWORD *)a2 + 4) = LODWORD(v13);
  if (this[7].i64[0] == this[6].i64[1])
  {
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16.i64[0] = 0x80000000800000;
    v16.i64[1] = 0x80000000800000;
  }
  else
  {
    LODWORD(v14) = 0;
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16.i64[0] = 0x80000000800000;
    v16.i64[1] = 0x80000000800000;
    unsigned int v17 = 1;
    do
    {
      float32x4_t v20 = v15;
      float32x4_t v21 = v16;
      uint64_t v18 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, this[11].u32[0], v14);
      float32x4_t v15 = vminq_f32(v20, *v18);
      float32x4_t v16 = vmaxq_f32(v21, *v18);
      unint64_t v14 = v17++;
    }
    while (v14 < (this[7].i64[0] - this[6].i64[1]) >> 2);
  }
  *((float32x4_t *)a2 + 2) = v15;
  *((float32x4_t *)a2 + 3) = v16;
  return 1;
}

uint64_t cv3d::cv::gess::alg::ComputeUVUtilization(uint64_t a1, void *a2, float *a3, int *a4)
{
  unsigned int v92 = -1;
  unsigned int v93 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  uint64_t v84 = a1;
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v93, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a1, &v92, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  int v8 = (uint64_t *)(a1 + 80);
  int v89 = 0;
  unsigned int v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v89, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v89) = 0;
  long long v86 = (uint64_t **)(a1 + 56);
  int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)&v89, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v90) = 0;
  int v89 = 0;
  unsigned int v85 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v86, (uint64_t)&v89, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  BOOL v14 = v93 == -1 || v92 == -1 || v9 == -1 || v10 == -1 || v85 == -1;
  uint64_t result = !v14;
  if (!v14)
  {
    unsigned int v77 = result;
    unsigned int v78 = a3;
    LODWORD(__p.__begin_) = v93;
    uint64_t v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, (unsigned int *)&__p);
    std::vector<int>::size_type v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned int>::reserve(&__p, v17);
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v18 = 0;
      int v19 = 0;
      unsigned int v20 = 0;
      do
      {
        LODWORD(v89) = v10;
        uint64_t v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)v86, (unsigned int *)&v89);
        uint64_t v22 = *(void *)(v21 + 40);
        if (v18 >= (*(void *)(v21 + 48) - v22) >> 1) {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        if (v19 == *(unsigned __int16 *)(v22 + 2 * v18))
        {
          std::vector<int>::pointer end = __p.__end_;
          if (__p.__end_ >= __p.__end_cap_.__value_)
          {
            std::vector<int>::pointer begin = __p.__begin_;
            int64_t v26 = __p.__end_ - __p.__begin_;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            int64_t v28 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
            if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v27) {
              unint64_t v27 = v28 >> 1;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v29);
              std::vector<int>::pointer begin = __p.__begin_;
              std::vector<int>::pointer end = __p.__end_;
            }
            else
            {
              long long v30 = 0;
            }
            int v31 = (int *)&v30[4 * v26];
            *int v31 = v20;
            long long v24 = v31 + 1;
            while (end != begin)
            {
              int v32 = *--end;
              *--int v31 = v32;
            }
            __p.__begin_ = v31;
            __p.__end_ = v24;
            __p.__end_cap_.__value_ = (int *)&v30[4 * v29];
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            *__p.__end_ = v20;
            long long v24 = end + 1;
          }
          __p.__end_ = v24;
          ++v19;
        }
        unint64_t v18 = ++v20;
      }
      while (v20 < (unint64_t)((uint64_t)(*(void *)(v84 + 160) - *(void *)(v84 + 152)) >> 2));
    }
    LODWORD(v88.__begin_) = v93;
    uint64_t v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, (unsigned int *)&v88);
    unint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 16))(v33);
    std::vector<float>::vector(&v89, v34);
    v94[0] = v93;
    uint64_t v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, v94);
    std::vector<unsigned int>::size_type v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
    std::vector<unsigned int>::vector(&v88, v36);
    unsigned __int16 v37 = 0;
    unint64_t v38 = 0;
    uint64_t v39 = (uint64_t)(a2 + 6);
    char v80 = a2;
    unsigned int v81 = a4;
    int v79 = a2 + 6;
    while (1)
    {
      unsigned __int16 v87 = v37;
      v94[0] = v93;
      uint64_t v40 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, v94);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v40 + 16))(v40) <= (unint64_t)v37) {
        break;
      }
      v94[0] = v92;
      float32x4_t v42 = (uint64_t *)(cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>(v8, v94)+ 40);
      uint64_t v41 = *v42;
      if (v42[1] == *v42) {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      uint64_t v43 = std::map<unsigned short,std::string>::at(v41, &v87);
      uint64_t v44 = (unsigned __int16 *)std::map<std::string,std::string>::at(v39, (void **)v43);
      unint64_t v45 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(*a2 + 48 * *v44 + 24, a4);
      unsigned int v46 = *(unsigned __int16 *)v45;
      uint64_t v47 = a2[3] + 48 * *(unsigned __int16 *)v45;
      uint64_t v48 = *(void *)(v47 + 8);
      uint64_t v49 = *(std::__shared_weak_count **)(v47 + 16);
      if (v49)
      {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v50 = a2[3] + 48 * v46;
        uint64_t v52 = *(void *)(v50 + 8);
        long long v51 = *(std::__shared_weak_count **)(v50 + 16);
        int v53 = *(_DWORD *)(v48 + 4);
        if (v51)
        {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          int v54 = *(_DWORD *)(v52 + 8);
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        else
        {
          int v54 = *(_DWORD *)(v52 + 8);
        }
        unsigned int v55 = v54 * v53;
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      else
      {
        unsigned int v55 = *(_DWORD *)(v48 + 8) * *(_DWORD *)(v48 + 4);
      }
      uint64_t v56 = v87;
      v88.__begin_[v87] = v55;
      unint64_t v57 = __p.__begin_[v56];
      if (v56 + 1 == __p.__end_ - __p.__begin_) {
        unint64_t v58 = ((*(void *)(v84 + 160) - *(void *)(v84 + 152)) >> 2);
      }
      else {
        unint64_t v58 = __p.__begin_[v56 + 1];
      }
      if (v57 >= v58)
      {
        float v60 = 0.0;
      }
      else
      {
        unsigned int v82 = v55;
        unint64_t v83 = v38;
        uint64_t v59 = 12 * v57;
        float v60 = 0.0;
        do
        {
          v94[0] = v85;
          uint64_t v61 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v86, v94);
          uint64_t v62 = *(void *)(v61 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v61 + 48) - v62) >> 2) <= v57) {
            goto LABEL_85;
          }
          v94[0] = v9;
          uint64_t v63 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8, v94);
          unint64_t v64 = *(unsigned int *)(v62 + v59);
          uint64_t v65 = *(void *)(v63 + 40);
          if (v64 >= (*(void *)(v63 + 48) - v65) >> 3) {
            goto LABEL_85;
          }
          v94[0] = v9;
          uint64_t v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8, v94);
          unint64_t v67 = *(unsigned int *)(v62 + v59 + 4);
          uint64_t v68 = *(void *)(v66 + 40);
          if (v67 >= (*(void *)(v66 + 48) - v68) >> 3
            || (v94[0] = v9,
                uint64_t v69 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8, v94), v70 = *(unsigned int *)(v62 + v59 + 8), v71 = *(void *)(v69 + 40), v70 >= (*(void *)(v69 + 48) - v71) >> 3))
          {
LABEL_85:
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          int v72 = (float *)(v65 + 8 * v64);
          float v60 = v60
              + fabsf((float)((float)((float)(*(float *)(v68 + 8 * v67) - *v72)* (float)(*(float *)(v71 + 8 * v70 + 4) - v72[1]))- (float)((float)(*(float *)(v68 + 8 * v67 + 4) - v72[1])* (float)(*(float *)(v71 + 8 * v70) - *v72)))* 0.5);
          ++v57;
          v59 += 12;
        }
        while (v58 != v57);
        uint64_t v56 = v87;
        a2 = v80;
        a4 = v81;
        unint64_t v38 = v83;
        uint64_t v39 = (uint64_t)v79;
        unsigned int v55 = v82;
      }
      if (v60 <= 1.0) {
        float v73 = v60;
      }
      else {
        float v73 = 1.0;
      }
      *((float *)v89 + v56) = v73;
      v38 += v55;
      unsigned __int16 v37 = v56 + 1;
    }
    unsigned __int16 v74 = 0;
    float v75 = 0.0;
    while (1)
    {
      v94[0] = v93;
      uint64_t v76 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, v94);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v76 + 16))(v76) <= (unint64_t)v74) {
        break;
      }
      float v75 = v75 + (float)(*((float *)v89 + v74) * (float)((float)v88.__begin_[v74] / (float)v38));
      ++v74;
    }
    float *v78 = v75;
    if (v88.__begin_)
    {
      v88.__end_ = v88.__begin_;
      operator delete(v88.__begin_);
    }
    if (v89)
    {
      char v90 = v89;
      operator delete(v89);
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    return v77;
  }
  return result;
}

void sub_24F5415D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeUVUtilization(uint64_t **this, const cv3d::cv::gess::mesh::PolyMesh *a2, float *a3)
{
  int v32 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v32, (unsigned __int8 *)__p);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v33 = 0;
  int v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(this + 10, (uint64_t)&v33, (unsigned __int8 *)__p);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  int v34 = 0;
  uint64_t v33 = 0;
  int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v33, (unsigned __int8 *)__p);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  BOOL v8 = v32 == -1 || v5 == -1 || v6 == -1;
  uint64_t result = !v8;
  if (!v8)
  {
    unsigned int v28 = result;
    unint64_t v29 = (float *)a2;
    LODWORD(__p[0]) = v32;
    uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p);
    unint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    if (this[20] == this[19])
    {
      float v12 = 0.0;
    }
    else
    {
      unint64_t v11 = 0;
      float v12 = 0.0;
      unsigned int v13 = 1;
      do
      {
        LODWORD(__p[0]) = v6;
        uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p);
        uint64_t v15 = *(void *)(v14 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v14 + 48) - v15) >> 2) <= v11) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        uint64_t v16 = (unsigned int *)(v15 + 12 * v11);
        LODWORD(__p[0]) = v5;
        uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p);
        unint64_t v18 = *v16;
        uint64_t v19 = *(void *)(v17 + 40);
        if (v18 >= (*(void *)(v17 + 48) - v19) >> 3) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        LODWORD(__p[0]) = v5;
        uint64_t v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p);
        unint64_t v21 = v16[1];
        uint64_t v22 = *(void *)(v20 + 40);
        if (v21 >= (*(void *)(v20 + 48) - v22) >> 3) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        LODWORD(__p[0]) = v5;
        uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p);
        unint64_t v24 = v16[2];
        uint64_t v25 = *(void *)(v23 + 40);
        if (v24 >= (*(void *)(v23 + 48) - v25) >> 3) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        int64_t v26 = (float *)(v19 + 8 * v18);
        float v12 = v12
            + fabsf((float)((float)((float)(*(float *)(v22 + 8 * v21) - *v26)* (float)(*(float *)(v25 + 8 * v24 + 4) - v26[1]))- (float)((float)(*(float *)(v22 + 8 * v21 + 4) - v26[1])* (float)(*(float *)(v25 + 8 * v24) - *v26)))* 0.5);
        unint64_t v11 = v13++;
      }
      while (v11 < ((char *)this[20] - (char *)this[19]) >> 2);
    }
    float *v29 = v12 / (float)v27;
    return v28;
  }
  return result;
}

void sub_24F54191C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::VerifyManifoldEdges(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  float32x4_t v2 = this;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2);
  LOBYTE(v43[0]) = 0;
  std::vector<BOOL>::vector(&v44, v3, (unsigned __int8 *)v43);
  uint64_t v4 = (uint64_t)v2 + 104;
  unint64_t v5 = (uint64_t)(*((void *)v2 + 14) - *((void *)v2 + 13)) >> 2;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(v43, v5, (unsigned __int8 *)&__p);
  uint64_t v7 = *((void *)v2 + 16);
  uint64_t v6 = *((void *)v2 + 17);
  if (v6 == v7)
  {
LABEL_38:
    uint64_t v21 = 1;
    goto LABEL_39;
  }
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  unsigned __int16 v37 = v2;
  while (1)
  {
    if ((*(void *)((char *)v44 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8)) {
      goto LABEL_37;
    }
    LODWORD(__p) = v9;
    unsigned int v42 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)&__p) + 12);
    if ((*(void *)((char *)v43[0] + (((unint64_t)v42 >> 3) & 0x1FFFFFF8)) >> v42)) {
      break;
    }
    std::vector<int> __p = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v38, v4, &v42);
    for (unsigned int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v38);
          i != -1;
          unsigned int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v38))
    {
      *(void *)((char *)v44 + (((unint64_t)i >> 3) & 0x1FFFFFF8)) |= 1 << i;
      unint64_t v11 = v40;
      if (v40 >= v41)
      {
        uint64_t v13 = (v40 - (unsigned char *)__p) >> 2;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = (v41 - (unsigned char *)__p) >> 1;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        if ((unint64_t)(v41 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v41, v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[4 * v13];
        *(_DWORD *)uint64_t v17 = i;
        float v12 = v17 + 4;
        uint64_t v19 = (char *)__p;
        unint64_t v18 = v40;
        if (v40 != __p)
        {
          do
          {
            int v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          unint64_t v18 = (char *)__p;
        }
        std::vector<int> __p = v17;
        uint64_t v40 = v12;
        uint64_t v41 = &v16[4 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v40 = i;
        float v12 = v11 + 4;
      }
      uint64_t v40 = v12;
    }
    uint64_t v21 = 1;
    *(void *)((char *)v43[0] + (((unint64_t)v42 >> 3) & 0x1FFFFFF8)) |= 1 << v42;
    uint64_t v22 = (unsigned int *)__p;
    uint64_t v23 = v40;
    if ((unint64_t)(v40 - (unsigned char *)__p) >= 5)
    {
      unint64_t v24 = 0;
      int v25 = 0;
      int v26 = 2;
      while (1)
      {
        unint64_t v27 = v24;
        unint64_t v24 = (v25 + 1);
        unint64_t v28 = (v23 - (char *)v22) >> 2;
        unsigned int v29 = v26;
        unint64_t v30 = v24;
        if (v28 > v24) {
          break;
        }
LABEL_29:
        unint64_t v35 = v28 - 1;
        ++v26;
        int v25 = v24;
        if (v35 <= v24)
        {
          uint64_t v21 = 1;
          goto LABEL_32;
        }
      }
      while (1)
      {
        char v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, &v22[v27]);
        uint64_t v32 = cv3d::cv::gess::mesh::Topology::h(v4, v31);
        uint64_t v33 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)__p + v30);
        if (*(_DWORD *)(v32 + 12) == *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, v33) + 12)) {
          break;
        }
        unint64_t v30 = v29;
        uint64_t v22 = (unsigned int *)__p;
        uint64_t v23 = v40;
        unint64_t v28 = (v40 - (unsigned char *)__p) >> 2;
        if (v28 <= v29++) {
          goto LABEL_29;
        }
      }
      uint64_t v21 = 0;
      uint64_t v22 = (unsigned int *)__p;
LABEL_32:
      float32x4_t v2 = v37;
    }
    if (v22)
    {
      uint64_t v40 = (char *)v22;
      operator delete(v22);
    }
    if (!v21) {
      goto LABEL_39;
    }
    uint64_t v7 = *((void *)v2 + 16);
    uint64_t v6 = *((void *)v2 + 17);
LABEL_37:
    unint64_t v8 = ++v9;
    if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) <= v9) {
      goto LABEL_38;
    }
  }
  uint64_t v21 = 0;
LABEL_39:
  if (v43[0]) {
    operator delete(v43[0]);
  }
  if (v44) {
    operator delete(v44);
  }
  return v21;
}

void sub_24F541CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::FindNonOrientableManifoldEdges(uint64_t a1, char **a2, char **a3)
{
  memset(v56, 0, sizeof(v56));
  int v57 = 1065353216;
  a2[1] = *a2;
  a3[1] = *a3;
  uint64_t v3 = -858993459 * ((*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 104;
    do
    {
      unsigned int v9 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v7);
      if ((*v9 & v10) != 0) {
        goto LABEL_25;
      }
      unsigned int v54 = v7;
      unsigned int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, &v54) + 12);
      unsigned int v54 = v7;
      float v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v54);
      unsigned int v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, v12) + 12);
      if (*((void *)&v56[0] + 1))
      {
        unint64_t v14 = v13 ^ v11;
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v56 + 8));
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v16 = v13 ^ v11;
          if (*((void *)&v56[0] + 1) <= v14) {
            unint64_t v16 = v14 % *((void *)&v56[0] + 1);
          }
        }
        else
        {
          unint64_t v16 = (DWORD2(v56[0]) - 1) & v14;
        }
        uint64_t v17 = *(uint64_t ***)(*(void *)&v56[0] + 8 * v16);
        if (v17)
        {
          for (unsigned int i = *v17; i; unsigned int i = (uint64_t *)*i)
          {
            unint64_t v19 = i[1];
            if (v19 == v14)
            {
              if (*((_DWORD *)i + 4) == v11 && *((_DWORD *)i + 5) == v13)
              {
                ++*((_WORD *)i + 12);
                goto LABEL_25;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v19 >= *((void *)&v56[0] + 1)) {
                  v19 %= *((void *)&v56[0] + 1);
                }
              }
              else
              {
                v19 &= *((void *)&v56[0] + 1) - 1;
              }
              if (v19 != v16) {
                break;
              }
            }
          }
        }
      }
      unsigned int v54 = v11;
      unsigned int v55 = v13;
LABEL_25:
      ++v7;
    }
    while (v7 != v3);
    for (uint64_t j = 0; j != v3; ++j)
    {
      uint64_t v22 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), j);
      if ((*v22 & v23) == 0)
      {
        unsigned int v54 = j;
        unsigned int v24 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, &v54) + 12);
        unsigned int v54 = j;
        int v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v54);
        unsigned int v26 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, v25) + 12);
        unsigned int v54 = v24;
        unsigned int v55 = v26;
        unsigned int v54 = v26;
        unsigned int v55 = v24;
        if (v27 != 2 || v28)
        {
          if (v27 != 1 || v28 >= 2)
          {
            uint64_t v33 = a3[1];
            unint64_t v32 = (unint64_t)a3[2];
            if ((unint64_t)v33 >= v32)
            {
              uint64_t v40 = (v33 - *a3) >> 2;
              if ((unint64_t)(v40 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v41 = v32 - (void)*a3;
              uint64_t v42 = v41 >> 1;
              if (v41 >> 1 <= (unint64_t)(v40 + 1)) {
                uint64_t v42 = v40 + 1;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v42;
              }
              if (v43) {
                uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v43);
              }
              else {
                uint64_t v44 = 0;
              }
              uint64_t v49 = &v44[4 * v40];
              *(_DWORD *)uint64_t v49 = j;
              int v34 = v49 + 4;
              long long v51 = *a3;
              uint64_t v50 = a3[1];
              if (v50 != *a3)
              {
                do
                {
                  int v52 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v49 - 1) = v52;
                  v49 -= 4;
                }
                while (v50 != v51);
                uint64_t v50 = *a3;
              }
              *a3 = v49;
              a3[1] = v34;
              a3[2] = &v44[4 * v43];
              if (v50) {
                operator delete(v50);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v33 = j;
              int v34 = v33 + 4;
            }
            a3[1] = v34;
          }
        }
        else
        {
          unint64_t v30 = a2[1];
          unint64_t v29 = (unint64_t)a2[2];
          if ((unint64_t)v30 >= v29)
          {
            uint64_t v35 = (v30 - *a2) >> 2;
            if ((unint64_t)(v35 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v29 - (void)*a2;
            uint64_t v37 = v36 >> 1;
            if (v36 >> 1 <= (unint64_t)(v35 + 1)) {
              uint64_t v37 = v35 + 1;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v37;
            }
            if (v38) {
              uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a2 + 2), v38);
            }
            else {
              uint64_t v39 = 0;
            }
            unint64_t v45 = &v39[4 * v35];
            *(_DWORD *)unint64_t v45 = j;
            char v31 = v45 + 4;
            uint64_t v47 = *a2;
            unsigned int v46 = a2[1];
            if (v46 != *a2)
            {
              do
              {
                int v48 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v45 - 1) = v48;
                v45 -= 4;
              }
              while (v46 != v47);
              unsigned int v46 = *a2;
            }
            *a2 = v45;
            a2[1] = v31;
            a2[2] = &v39[4 * v38];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v30 = j;
            char v31 = v30 + 4;
          }
          a2[1] = v31;
        }
      }
    }
  }
}

void sub_24F5420F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Unwind_Resume(a1);
}

char *std::unordered_map<std::pair<unsigned int,unsigned int>,unsigned short,anonymous namespace'::pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,unsigned short>>>::operator[](float *a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  unint64_t v7 = v6 ^ *a2;
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v6 ^ v5;
      if (v8 <= v7) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      unsigned int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v5 && *((_DWORD *)v11 + 5) == v6) {
              return (char *)(v11 + 3);
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unsigned int v11 = operator new(0x20uLL);
  *unsigned int v11 = 0;
  v11[1] = v7;
  v11[2] = *(void *)a2;
  *((_WORD *)v11 + 12) = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (v8 && (float)(v15 * (float)v8) >= v14)
  {
    unint64_t v7 = v2;
    goto LABEL_68;
  }
  BOOL v16 = (v8 & (v8 - 1)) == 0;
  if (v8 < 3) {
    BOOL v16 = 0;
  }
  unint64_t v17 = (2 * v8) | !v16;
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v8 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v8)
  {
    if (*(void *)&prime >= v8) {
      goto LABEL_64;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = *((void *)a1 + 1);
      goto LABEL_64;
    }
    if (!*(void *)&prime)
    {
      uint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v8 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_64;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v20 = operator new(8 * *(void *)&prime);
  uint64_t v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  uint64_t v23 = (void *)*((void *)a1 + 2);
  if (v23)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
    unint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_60;
          }
          *uint64_t v23 = *v29;
          void *v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          unint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_60:
        uint64_t v23 = v29;
        unint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v8 = (unint64_t)prime;
LABEL_64:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7) {
      v7 %= v8;
    }
  }
  else
  {
    unint64_t v7 = (v8 - 1) & v7;
  }
LABEL_68:
  char v31 = *(void **)a1;
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v7);
  if (v32)
  {
    *unsigned int v11 = *v32;
LABEL_76:
    *unint64_t v32 = v11;
    goto LABEL_77;
  }
  *unsigned int v11 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v11;
  v31[v7] = a1 + 4;
  if (*v11)
  {
    unint64_t v33 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    unint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return (char *)(v11 + 3);
}

void sub_24F54251C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::FindNonManifoldVertices(uint64_t a1, char **a2, unsigned int **a3, unsigned int **a4)
{
  a2[1] = *a2;
  uint64_t v6 = a1 + 104;
  int v7 = -858993459 * ((*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  unint64_t v93 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
  unint64_t v97 = (v93 >> 2);
  std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::vector(v102, v97);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      LODWORD(__p) = i;
      uint64_t v9 = cv3d::cv::gess::mesh::Topology::h(v6, (unsigned int *)&__p);
      uint64_t v10 = (char **)(v102[0] + 24 * *(unsigned int *)(v9 + 12));
      unint64_t v12 = (void **)(v10 + 1);
      unsigned int v11 = v10[1];
      float v14 = v10 + 2;
      unint64_t v13 = (unint64_t)v10[2];
      if ((unint64_t)v11 >= v13)
      {
        uint64_t v16 = (v11 - *v10) >> 2;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - (void)*v10;
        uint64_t v18 = v17 >> 1;
        if (v17 >> 1 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v14, v19);
        }
        else {
          int v20 = 0;
        }
        uint64_t v21 = &v20[4 * v16];
        *(_DWORD *)uint64_t v21 = i;
        float v15 = v21 + 4;
        uint64_t v22 = (char *)*v12;
        uint64_t v23 = *v10;
        if (*v12 != *v10)
        {
          do
          {
            int v24 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v21 - 1) = v24;
            v21 -= 4;
          }
          while (v22 != v23);
          uint64_t v22 = *v10;
        }
        *uint64_t v10 = v21;
        *unint64_t v12 = v15;
        void *v14 = &v20[4 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v11 = i;
        float v15 = v11 + 4;
      }
      *unint64_t v12 = v15;
    }
  }
  if ((v93 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v25 = 0;
    uint64_t v94 = (uint64_t)(a2 + 2);
    do
    {
      if (*(void *)(v102[0] + 24 * v25 + 8) == *(void *)(v102[0] + 24 * v25))
      {
        unint64_t v43 = a2[1];
        unint64_t v49 = (unint64_t)a2[2];
        if ((unint64_t)v43 >= v49)
        {
          uint64_t v51 = (v43 - *a2) >> 2;
          if ((unint64_t)(v51 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v49 - (void)*a2;
          uint64_t v53 = v52 >> 1;
          if (v52 >> 1 <= (unint64_t)(v51 + 1)) {
            uint64_t v53 = v51 + 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v53;
          }
          if (v47) {
            int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v47);
          }
          else {
            int v48 = 0;
          }
          uint64_t v69 = &v48[4 * v51];
          *(_DWORD *)uint64_t v69 = v25;
          uint64_t v50 = v69 + 4;
          uint64_t v71 = *a2;
          unint64_t v70 = a2[1];
          if (v70 != *a2)
          {
            do
            {
              int v72 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v69 - 1) = v72;
              v69 -= 4;
            }
            while (v70 != v71);
LABEL_97:
            unint64_t v70 = *a2;
          }
LABEL_98:
          *a2 = v69;
          a2[1] = v50;
          a2[2] = &v48[4 * v47];
          if (v70) {
            operator delete(v70);
          }
          goto LABEL_100;
        }
      }
      else
      {
        uint8x8_t v27 = *a4;
        unint64_t v26 = a4[1];
        if (*a4 != v26)
        {
          char v28 = 0;
          while (v25 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, v27) + 12))
          {
            unint64_t v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, v27);
            BOOL v30 = v25 == *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v6, v29) + 12);
            v28 |= v30;
            ++v27;
            BOOL v30 = v30 || v27 == v26;
            if (v30)
            {
              if (v28) {
                goto LABEL_101;
              }
              goto LABEL_32;
            }
          }
          goto LABEL_101;
        }
LABEL_32:
        unint64_t v32 = *a3;
        char v31 = a3[1];
        if (*a3 != v31)
        {
          char v33 = 0;
          while (v25 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, v32) + 12))
          {
            int v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, v32);
            BOOL v30 = v25 == *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v6, v34) + 12);
            v33 |= v30;
            ++v32;
            if (v30 || v32 == v31)
            {
              if (v33) {
                goto LABEL_101;
              }
              goto LABEL_41;
            }
          }
          goto LABEL_101;
        }
LABEL_41:
        uint64_t v36 = v102[0] + 24 * v25;
        uint64_t v37 = *(unsigned int **)v36;
        unint64_t v38 = *(unsigned int **)(v36 + 8);
        if (*(unsigned int **)v36 == v38) {
          goto LABEL_66;
        }
        unsigned int v39 = 0;
        do
        {
          uint64_t v40 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v37);
          if ((*v40 & v41) != 0) {
            ++v39;
          }
          ++v37;
        }
        while (v37 != v38);
        if (v39 <= 1)
        {
LABEL_66:
          LODWORD(__p) = v25;
          cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v101, v6, &__p);
          std::vector<int> __p = 0;
          unsigned int v99 = 0;
          uint64_t v100 = 0;
          while (1)
          {
            int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v101);
            int v55 = HEdge;
            if (HEdge == -1) {
              break;
            }
            uint64_t v56 = v99;
            if (v99 >= v100)
            {
              uint64_t v58 = (v99 - (unsigned char *)__p) >> 2;
              if ((unint64_t)(v58 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v59 = (v100 - (unsigned char *)__p) >> 1;
              if (v59 <= v58 + 1) {
                unint64_t v59 = v58 + 1;
              }
              if ((unint64_t)(v100 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v59;
              }
              if (v60) {
                uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v100, v60);
              }
              else {
                uint64_t v61 = 0;
              }
              uint64_t v62 = &v61[4 * v58];
              *(_DWORD *)uint64_t v62 = v55;
              int v57 = v62 + 4;
              unint64_t v64 = (char *)__p;
              uint64_t v63 = v99;
              if (v99 != __p)
              {
                do
                {
                  int v65 = *((_DWORD *)v63 - 1);
                  v63 -= 4;
                  *((_DWORD *)v62 - 1) = v65;
                  v62 -= 4;
                }
                while (v63 != v64);
                uint64_t v63 = (char *)__p;
              }
              std::vector<int> __p = v62;
              unsigned int v99 = v57;
              uint64_t v100 = &v61[4 * v60];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v99 = HEdge;
              int v57 = v56 + 4;
            }
            unsigned int v99 = v57;
          }
          unint64_t v67 = *(char **)(v102[0] + 24 * v25);
          uint64_t v66 = *(char **)(v102[0] + 24 * v25 + 8);
          if (v66 - v67 == v99 - (unsigned char *)__p)
          {
            while (v67 != v66)
            {
              int64_t v68 = v99 - (unsigned char *)__p;
              if (__p != v99)
              {
                int64_t v68 = 0;
                while (*(_DWORD *)((char *)__p + v68) != *(_DWORD *)v67)
                {
                  v68 += 4;
                  if ((char *)__p + v68 == v99)
                  {
                    int64_t v68 = v99 - (unsigned char *)__p;
                    break;
                  }
                }
              }
              if ((char *)__p + v68 == v99)
              {
                unsigned __int16 v74 = a2[1];
                unint64_t v80 = (unint64_t)a2[2];
                if ((unint64_t)v74 < v80) {
                  goto LABEL_113;
                }
                uint64_t v88 = (v74 - *a2) >> 2;
                if ((unint64_t)(v88 + 1) >> 62) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v89 = v80 - (void)*a2;
                uint64_t v90 = v89 >> 1;
                if (v89 >> 1 <= (unint64_t)(v88 + 1)) {
                  uint64_t v90 = v88 + 1;
                }
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v78 = v90;
                }
                if (v78) {
                  int v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v78);
                }
                else {
                  int v79 = 0;
                }
                unsigned int v82 = &v79[4 * v88];
                *(_DWORD *)unsigned int v82 = v25;
                unsigned int v81 = v82 + 4;
                unsigned __int16 v91 = *a2;
                unint64_t v83 = a2[1];
                if (v83 != *a2)
                {
                  do
                  {
                    int v92 = *((_DWORD *)v83 - 1);
                    v83 -= 4;
                    *((_DWORD *)v82 - 1) = v92;
                    v82 -= 4;
                  }
                  while (v83 != v91);
                  goto LABEL_133;
                }
                goto LABEL_134;
              }
              v67 += 4;
            }
          }
          else
          {
            unsigned __int16 v74 = a2[1];
            unint64_t v73 = (unint64_t)a2[2];
            if ((unint64_t)v74 < v73)
            {
LABEL_113:
              *(_DWORD *)unsigned __int16 v74 = v25;
              unsigned int v81 = v74 + 4;
            }
            else
            {
              uint64_t v75 = (v74 - *a2) >> 2;
              if ((unint64_t)(v75 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v76 = v73 - (void)*a2;
              uint64_t v77 = v76 >> 1;
              if (v76 >> 1 <= (unint64_t)(v75 + 1)) {
                uint64_t v77 = v75 + 1;
              }
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78) {
                int v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v78);
              }
              else {
                int v79 = 0;
              }
              unsigned int v82 = &v79[4 * v75];
              *(_DWORD *)unsigned int v82 = v25;
              unsigned int v81 = v82 + 4;
              uint64_t v84 = *a2;
              unint64_t v83 = a2[1];
              if (v83 != *a2)
              {
                do
                {
                  int v85 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *((_DWORD *)v82 - 1) = v85;
                  v82 -= 4;
                }
                while (v83 != v84);
LABEL_133:
                unint64_t v83 = *a2;
              }
LABEL_134:
              *a2 = v82;
              a2[1] = v81;
              a2[2] = &v79[4 * v78];
              if (v83) {
                operator delete(v83);
              }
            }
            a2[1] = v81;
          }
          if (__p)
          {
            unsigned int v99 = (char *)__p;
            operator delete(__p);
          }
          goto LABEL_101;
        }
        unint64_t v43 = a2[1];
        unint64_t v42 = (unint64_t)a2[2];
        if ((unint64_t)v43 >= v42)
        {
          uint64_t v44 = (v43 - *a2) >> 2;
          if ((unint64_t)(v44 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v45 = v42 - (void)*a2;
          uint64_t v46 = v45 >> 1;
          if (v45 >> 1 <= (unint64_t)(v44 + 1)) {
            uint64_t v46 = v44 + 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47) {
            int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v47);
          }
          else {
            int v48 = 0;
          }
          uint64_t v69 = &v48[4 * v44];
          *(_DWORD *)uint64_t v69 = v25;
          uint64_t v50 = v69 + 4;
          long long v86 = *a2;
          unint64_t v70 = a2[1];
          if (v70 != *a2)
          {
            do
            {
              int v87 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v69 - 1) = v87;
              v69 -= 4;
            }
            while (v70 != v86);
            goto LABEL_97;
          }
          goto LABEL_98;
        }
      }
      *(_DWORD *)unint64_t v43 = v25;
      uint64_t v50 = v43 + 4;
LABEL_100:
      a2[1] = v50;
LABEL_101:
      ++v25;
    }
    while (v25 != v97);
  }
  std::vector<int> __p = v102;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_24F542C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a18;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::FindNonManifoldOrientable(uint64_t a1, char **a2, char **a3, char **a4)
{
  cv3d::cv::gess::alg::FindNonOrientableManifoldEdges(a1, a2, a3);

  cv3d::cv::gess::alg::FindNonManifoldVertices(a1, a4, (unsigned int **)a2, (unsigned int **)a3);
}

BOOL cv3d::cv::gess::alg::IsManifold(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<int> __p = 0;
  float v14 = 0;
  uint64_t v15 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  cv3d::cv::gess::alg::FindNonOrientableManifoldEdges((uint64_t)this, (char **)&v16, (char **)&__p);
  cv3d::cv::gess::alg::FindNonManifoldVertices((uint64_t)this, &v10, (unsigned int **)&v16, (unsigned int **)&__p);
  uint64_t v4 = __p;
  uint64_t v3 = v14;
  unsigned int v5 = v10;
  uint64_t v6 = v11;
  if (v10)
  {
    unsigned int v11 = v10;
    operator delete(v10);
    int v7 = __p;
    if (!__p) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v7 = __p;
  if (__p)
  {
LABEL_3:
    float v14 = v7;
    operator delete(v7);
  }
LABEL_4:
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  return v3 == v4 && v6 == v5;
}

void sub_24F542D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  cv3d::cv::gess::isochart::IsVertexManifold((uint64_t)&__p, (uint64_t)&a13, (uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::IsOrientable(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<int> __p = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  cv3d::cv::gess::alg::FindNonOrientableManifoldEdges((uint64_t)this, (char **)&v9, (char **)&__p);
  uint64_t v3 = v9;
  unint64_t v2 = v10;
  if (!__p)
  {
    uint64_t v4 = v9;
    if (!v9) {
      return v2 == v3;
    }
    goto LABEL_3;
  }
  int v7 = __p;
  operator delete(__p);
  uint64_t v4 = v9;
  if (v9)
  {
LABEL_3:
    uint64_t v10 = v4;
    operator delete(v4);
  }
  return v2 == v3;
}

void sub_24F542E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeVertexTBN(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 2) {
    return 0;
  }
  std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::vector(v64, (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  if (!cv3d::cv::gess::alg::internal::PREPARE_OBJ_ORTHOGONAL_TANGENTIAL(a1, (uint64_t *)v64)) {
    goto LABEL_53;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  int v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v3 == -1 && !cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a1)) {
    goto LABEL_53;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v4 == -1)
  {
LABEL_53:
    uint64_t v58 = 0;
  }
  else
  {
    LODWORD(__p[0]) = v4;
    uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_TANGENT[0]);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
    int v61 = v6;
    if (v63 < 0) {
      operator delete(__p[0]);
    }
    if (v6 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_TANGENT[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v61, (long long *)__p);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
    }
    LODWORD(__p[0]) = v61;
    uint64_t v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_BITANGENT[0]);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
    int v60 = v8;
    if (v63 < 0) {
      operator delete(__p[0]);
    }
    if (v8 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_BITANGENT[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v60, (long long *)__p);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
    }
    LODWORD(__p[0]) = v60;
    uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    uint64_t v10 = v9;
    if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
    {
      unint64_t v11 = 0;
      unsigned int v12 = 1;
      do
      {
        uint64_t v13 = *(void *)(v7 + 40);
        if (v11 >= (*(void *)(v7 + 48) - v13) >> 4) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        float v14 = (void *)(v13 + 16 * v11);
        void *v14 = 0;
        v14[1] = 0;
        uint64_t v15 = *(void *)(v9 + 40);
        if (v11 >= (*(void *)(v9 + 48) - v15) >> 4) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        uint64_t v16 = (void *)(v15 + 16 * v11);
        void *v16 = 0;
        v16[1] = 0;
        unint64_t v11 = v12++;
      }
      while (v11 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
    }
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      LODWORD(v18) = 0;
      do
      {
        LODWORD(v65) = v18;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v65, __p);
        uint64_t v19 = 0;
        int v20 = (float32x4_t *)((char *)v64[0] + 48 * v65);
        float32x4_t v17 = v20[1];
        float32x4_t v21 = v20[2];
        do
        {
          unint64_t v22 = *(unsigned int *)((char *)__p[0] + v19);
          uint64_t v23 = *(void *)(v7 + 40);
          if (v22 >= (*(void *)(v7 + 48) - v23) >> 4
            || (*(float32x4_t *)(v23 + 16 * v22) = vaddq_f32(v17, *(float32x4_t *)(v23 + 16 * v22)),
                unint64_t v24 = *(unsigned int *)((char *)__p[0] + v19),
                uint64_t v25 = *(void *)(v10 + 40),
                v24 >= (*(void *)(v10 + 48) - v25) >> 4))
          {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v19 += 4;
          *(float32x4_t *)(v25 + 16 * v24) = vaddq_f32(v21, *(float32x4_t *)(v25 + 16 * v24));
        }
        while (v19 != 12);
        unint64_t v18 = (v18 + 1);
      }
      while (v18 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
    }
    if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
    {
      unint64_t v26 = 0;
      unsigned int v27 = 1;
      v17.i32[0] = 897988541;
      do
      {
        uint64_t v28 = *(void *)(v7 + 40);
        if (v26 >= (*(void *)(v7 + 48) - v28) >> 4) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        uint64_t v29 = *(void *)(v5 + 40);
        if (v26 >= (*(void *)(v5 + 48) - v29) >> 4) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        float32x4_t v30 = *(float32x4_t *)(v28 + 16 * v26);
        float32x4_t v31 = *(float32x4_t *)(v29 + 16 * v26);
        float32x4_t v32 = vmulq_f32(v30, v31);
        v32.i32[3] = 0;
        float32x4_t v33 = vsubq_f32(v30, vmulq_n_f32(v31, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32))));
        float32x4_t v34 = vmulq_f32(v33, v33);
        v34.i32[3] = 0;
        float32x4_t v35 = vpaddq_f32(v34, v34);
        int32x4_t v36 = (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL);
        int32x4_t v37 = (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL);
        if (fabsf(sqrtf(vaddv_f32(*(float32x2_t *)v35.f32))) >= 0.000001)
        {
          float32x4_t v52 = vpaddq_f32(v35, v35);
          int32x4_t v53 = (int32x4_t)xmmword_24F570A10;
          if (v52.f32[0] > 0.0) {
            int32x4_t v53 = (int32x4_t)vdivq_f32(v33, vsqrtq_f32(v52));
          }
          *(int32x4_t *)(v28 + 16 * v26) = v53;
          float32x4_t v54 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v31, v36), (int32x4_t)v31), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL), v53)), (float32x4_t)vzip2q_s32(vzip1q_s32(v53, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 0xCuLL)), v53), (float32x4_t)vuzp2q_s32(v37, (int32x4_t)v31));
          float32x4_t v55 = vmulq_f32(v54, v54);
          v55.i32[3] = 0;
          float32x4_t v56 = vpaddq_f32(v55, v55);
          float32x4_t v57 = vpaddq_f32(v56, v56);
          float32x4_t v50 = (float32x4_t)xmmword_24F570A10;
          if (v57.f32[0] > 0.0) {
            float32x4_t v50 = vdivq_f32(v54, vsqrtq_f32(v57));
          }
          uint64_t v51 = *(void *)(v10 + 40);
          if (v26 >= (*(void *)(v10 + 48) - v51) >> 4) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
        }
        else
        {
          v33.f32[0] = fabsf(v31.f32[0] + -1.0);
          int32x4_t v38 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v17, v33), 0), (int8x16_t)xmmword_24F5715A0, (int8x16_t)xmmword_24F570A10);
          float32x4_t v39 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v31, v36), (int32x4_t)v31);
          float32x4_t v40 = (float32x4_t)vuzp2q_s32(v37, (int32x4_t)v31);
          float32x4_t v41 = vmlsq_f32(vmulq_f32(v39, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), v38)), (float32x4_t)vzip2q_s32(vzip1q_s32(v38, (int32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL)), v38), v40);
          float32x4_t v42 = vmulq_f32(v41, v41);
          v42.i32[3] = 0;
          float32x4_t v43 = vpaddq_f32(v42, v42);
          float32x4_t v44 = vpaddq_f32(v43, v43);
          int32x4_t v45 = (int32x4_t)xmmword_24F570A10;
          if (v44.f32[0] > 0.0) {
            int32x4_t v45 = (int32x4_t)vdivq_f32(v41, vsqrtq_f32(v44));
          }
          *(int32x4_t *)(v28 + 16 * v26) = v45;
          float32x4_t v46 = vmlaq_f32(vmulq_f32(v39, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), v45)), (float32x4_t)vzip2q_s32(vzip1q_s32(v45, (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL)), v45), vnegq_f32(v40));
          float32x4_t v47 = vmulq_f32(v46, v46);
          v47.i32[3] = 0;
          float32x4_t v48 = vpaddq_f32(v47, v47);
          float32x4_t v49 = vpaddq_f32(v48, v48);
          float32x4_t v50 = (float32x4_t)xmmword_24F570A10;
          if (v49.f32[0] > 0.0) {
            float32x4_t v50 = vdivq_f32(v46, vsqrtq_f32(v49));
          }
          uint64_t v51 = *(void *)(v10 + 40);
          if (v26 >= (*(void *)(v10 + 48) - v51) >> 4) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
        }
        *(float32x4_t *)(v51 + 16 * v26) = v50;
        unint64_t v26 = v27++;
      }
      while (v26 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v58 = 1;
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  return v58;
}

void sub_24F5434B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F5435EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F543680(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::deque<cv3d::cv::gess::mesh::FaceHandle>::__assign_with_size_random_access[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(void *a1, char *__src, unint64_t a3)
{
  unint64_t v5 = a1[5];
  if (v5 >= a3)
  {
    uint64_t v10 = a1[1];
    unint64_t v11 = (void **)(v10 + 8 * (a1[4] >> 10));
    if (a1[2] == v10) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = (char *)*v11 + 4 * (a1[4] & 0x3FFLL);
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cv3d::cv::gess::mesh::FaceHandle const*,cv3d::cv::gess::mesh::FaceHandle const*,std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>,0>(__src, v12, &__src[4 * a3], v11, v14);
    return (void *)std::deque<cv3d::cv::gess::mesh::FaceHandle>::__erase_to_end((uint64_t)a1, v14[1], (uint64_t)v14[2]);
  }
  else
  {
    int v6 = &__src[4 * v5];
    uint64_t v7 = a1[1];
    int v8 = (void **)(v7 + 8 * (a1[4] >> 10));
    if (a1[2] == v7) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (char *)*v8 + 4 * (a1[4] & 0x3FFLL);
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cv3d::cv::gess::mesh::FaceHandle const*,cv3d::cv::gess::mesh::FaceHandle const*,std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>,0>(__src, v9, v6, v8, v14);
    return std::deque<cv3d::cv::gess::mesh::FaceHandle>::__append_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(a1, (int *)v6, a3 - a1[5]);
  }
}

void *std::deque<cv3d::cv::gess::mesh::FaceHandle>::__append_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(void *a1, int *a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 7) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(a1, a3 - v10);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  unint64_t v11 = (void *)(v6 + 8 * (v9 >> 10));
  if (v7 == v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v11 + 4 * (v9 & 0x3FF);
  }
  v19[0] = v6 + 8 * (v9 >> 10);
  v19[1] = v12;
  uint64_t result = std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>::operator+[abi:ne180100]((uint64_t)v19, a3);
  while (v12 != v14)
  {
    uint64_t v15 = (_DWORD *)(v11 == result ? v14 : *v11 + 4096);
    if ((_DWORD *)v12 == v15)
    {
      uint64_t v15 = (_DWORD *)v12;
    }
    else
    {
      uint64_t v16 = (_DWORD *)v12;
      do
      {
        int v17 = *a2++;
        *v16++ = v17;
      }
      while (v16 != v15);
    }
    a1[5] += ((uint64_t)v15 - v12) >> 2;
    if (v11 == result) {
      break;
    }
    uint64_t v18 = v11[1];
    ++v11;
    uint64_t v12 = v18;
  }
  return result;
}

uint64_t std::deque<cv3d::cv::gess::mesh::FaceHandle>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  int v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 10));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 4 * (v5 & 0x3FF);
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 2) + ((v8 - a2) << 7);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 2);
    if (v12 >= 1)
    {
      uint64_t v13 = (char *)(v6 + 8 * (v4 >> 10));
      if (v7 == v6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)v13 + 4 * (*(void *)(result + 32) & 0x3FFLL);
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (v11 >> 2) + ((a2 - v13) << 7) - ((v14 - *(void *)v13) >> 2);
      }
      std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        uint64_t result = std::deque<cv3d::cv::gess::mesh::FaceHandle>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cv3d::cv::gess::mesh::FaceHandle const*,cv3d::cv::gess::mesh::FaceHandle const*,std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 2 >= v11 >> 2 ? v11 >> 2 : (a3 - v9) >> 2;
      if (v12) {
        unsigned int __src = (char *)memmove(__dst, v9, 4 * v12);
      }
      v9 += 4 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(void *a1, unint64_t a2)
{
  int v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x3FF) != 0) {
    unint64_t v6 = (v5 >> 10) + 1;
  }
  else {
    unint64_t v6 = v5 >> 10;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 10) {
    unint64_t v8 = v7 >> 10;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      int v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          float32x4_t v31 = &v29[8 * (v28 >> 2)];
          float32x4_t v32 = (uint64_t *)a1[1];
          int v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            int v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            float32x4_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)float32x4_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          int32x4_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            int v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            int v3 = (char *)a1[1];
          }
          unsigned int v27 = &v3[-8 * (v24 >> 1)];
          int v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)int v3 = v18;
      int v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<int *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<int *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 1023;
          }
          else {
            uint64_t v64 = 1024;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          unint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              unsigned int v81 = &v79[8 * (v78 >> 2)];
              unsigned int v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      unsigned __int16 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        std::__split_buffer<int *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        float32x4_t v39 = (void *)a1[1];
        float32x4_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              float32x4_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              float32x4_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                float32x4_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                float32x4_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)float32x4_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              float32x4_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                float32x4_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int32x4_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                float32x4_t v40 = (char *)__p[1];
              }
              float32x4_t v47 = &v40[-8 * (v44 >> 1)];
              float32x4_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)float32x4_t v40 = *v39;
          float32x4_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          float32x4_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      float32x4_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<int *>::push_front((uint64_t)__p, v57);
      }
      unint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_24F543F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 2);
    if (v4 < 1) {
      result -= (unint64_t)(1023 - v4) >> 10;
    }
    else {
      result += (unint64_t)v4 >> 10;
    }
  }
  return result;
}

uint64_t std::deque<cv3d::cv::gess::mesh::FaceHandle>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t cv3d::cv::gess::alg::ComputeFieldsFromRandomInitialValue(uint64_t a1, float *a2, unsigned char *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  char inited = cv3d::cv::gess::internal::InitRandomTangent(a4, a5);
  unsigned int v13 = *a3;
  if (*a3)
  {
    unsigned int v14 = 0;
    do
    {
      if (inited)
      {
        char inited = cv3d::cv::gess::internal::OptimizeOrientationsRoSy4Extrinsic(a1, a4, a5);
        unsigned int v13 = *a3;
      }
      else
      {
        char inited = 0;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  unsigned int v19 = *(_DWORD *)(a1 + 176);
  uint64_t v15 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v19);
  uint64_t result = (inited & 1) != 0 && cv3d::cv::gess::internal::InitRandomPosition(v15, a4, a6, *a2);
  unsigned int v17 = *a3;
  if (*a3)
  {
    unsigned int v18 = 0;
    do
    {
      if (result)
      {
        uint64_t result = cv3d::cv::gess::internal::OptimizePositionsRoSy4Extrinsic(a1, a4, a5, a6, *a2);
        unsigned int v17 = *a3;
      }
      else
      {
        uint64_t result = 0;
      }
      ++v18;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::ComputeFieldsFromCoarserHierarchy(uint64_t a1, void *a2, void *a3, void *a4, float *a5, unsigned char *a6, uint64_t *a7, uint64_t *a8, void *a9)
{
  uint64_t v14 = (uint64_t)(a2[1] - *a2) >> 2;
  char inited = v14 == (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2
        && v14 == (a8[1] - *a8) >> 4
        && v14 == (uint64_t)(a9[1] - *a9) >> 4;
  unsigned int v37 = *(_DWORD *)(a1 + 176);
  uint64_t v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v37);
  uint64_t v16 = *a8;
  if (a8[1] != *a8)
  {
    unint64_t v17 = 0;
    unsigned int v18 = 1;
    do
    {
      uint64_t v19 = *(unsigned int *)(*a2 + 4 * v17);
      if (v19 == -1)
      {
        if ((inited & 1) != 0
          && cv3d::cv::gess::internal::InitRandomTangentHelper((float *)(*a7 + 16 * v17), (float32x4_t *)(v16 + 16 * v17)))
        {
          uint64_t v26 = *(void *)(v32 + 40);
          if (v17 >= (*(void *)(v32 + 48) - v26) >> 4) {
            cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
          }
          char inited = cv3d::cv::gess::internal::InitRandomPositionHelper((float32x4_t *)(v26 + 16 * v17), (float *)(*a7 + 16 * v17), (float32x4_t *)(*a9 + 16 * v17), *a5);
        }
        else
        {
          char inited = 0;
        }
      }
      else
      {
        float32x4_t v20 = *(float32x4_t *)(*a3 + 16 * v19);
        float32x4_t v21 = *(float32x4_t *)(*a7 + 16 * v17);
        float32x4_t v22 = vmulq_f32(v20, v21);
        v22.i32[3] = 0;
        *(float32x4_t *)(v16 + 16 * v17) = vsubq_f32(v20, vmulq_n_f32(v21, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22))));
        float32x4_t v35 = *(float32x4_t *)(*a4 + 16 * *(unsigned int *)(*a2 + 4 * v17));
        float32x4_t v36 = v21;
        unsigned int v38 = *(_DWORD *)(a1 + 176);
        uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v38);
        uint64_t v24 = *(void *)(v23 + 40);
        if (v17 >= (*(void *)(v23 + 48) - v24) >> 4) {
          cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
        }
        float32x4_t v25 = vmulq_f32(v36, vsubq_f32(v35, *(float32x4_t *)(v24 + 16 * v17)));
        v25.i32[3] = 0;
        *(float32x4_t *)(*a9 + 16 * v17) = vsubq_f32(v35, vmulq_n_f32(v36, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25))));
      }
      unint64_t v17 = v18;
      uint64_t v16 = *a8;
      ++v18;
    }
    while (v17 < (a8[1] - *a8) >> 4);
  }
  unsigned int v27 = *a6;
  if (*a6)
  {
    unsigned int v28 = 0;
    do
    {
      if (inited)
      {
        char inited = cv3d::cv::gess::internal::OptimizeOrientationsRoSy4Extrinsic(a1, a7, a8);
        unsigned int v27 = *a6;
      }
      else
      {
        char inited = 0;
      }
      ++v28;
    }
    while (v28 < v27);
    if (v27)
    {
      for (unsigned int i = 0; i < v27; ++i)
      {
        if (inited)
        {
          char inited = cv3d::cv::gess::internal::OptimizePositionsRoSy4Extrinsic(a1, a7, a8, a9, *a5);
          unsigned int v27 = *a6;
        }
        else
        {
          char inited = 0;
        }
      }
    }
  }
  return inited & 1;
}

uint64_t cv3d::cv::gess::alg::TriMesh2QuadMesh(uint64_t a1, cv3d::cv::gess::mesh::QuadMesh *a2, std::string *__str, uint64_t a4, unsigned __int8 a5)
{
  if (*(void *)(a1 + 112) == *(void *)(a1 + 104)) {
    return 0;
  }
  if (*(void *)(a1 + 160) == *(void *)(a1 + 152)) {
    return 0;
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 128)) {
    return 0;
  }
  float v10 = std::stof(__str, 0);
  if (v10 < 0.00000001) {
    return 0;
  }
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)v158);
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)v158, (void **)a1);
  uint64_t v120 = __str;
  unsigned int v157 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v150, "h:is_quadmesh_diagonal");
  LOBYTE(v154) = 0;
  unsigned int v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>(v159, (uint64_t)&v154, (unsigned __int8 *)&v150);
  unsigned int v157 = v13;
  if (SHIBYTE(v151) < 0) {
    operator delete((void *)v150);
  }
  if (v13 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v150, "h:is_quadmesh_diagonal");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)v158, &v157, &v150);
    if (SHIBYTE(v151) < 0) {
      operator delete((void *)v150);
    }
  }
  int v119 = a5;
  float v156 = 0.0;
  if (__str[1].__r_.__value_.__s.__data_[2])
  {
    int v14 = 1;
    uint64_t inited = 1;
  }
  else
  {
    uint64_t v116 = (uint64_t)a2;
    uint64_t v117 = a4;
    uint64_t v16 = v161;
    uint64_t v15 = v162;
    float v17 = cv3d::cv::gess::mesh::TriMesh::CalculateSurfaceArea((cv3d::cv::gess::mesh::TriMesh *)v158);
    unsigned int v18 = (float)(v10 * (float)(unint64_t)((v15 - v16) >> 2));
    if (v18 <= 1) {
      unsigned int v18 = 1;
    }
    float v19 = sqrtf(v17 / (float)v18);
    float v156 = v19;
    float32x4_t v20 = (double *)v117;
    if (a5) {
      *(float *)(v117 + 40) = v19;
    }
    if (v120[1].__r_.__value_.__s.__data_[1])
    {
      std::vector<double>::vector(&v154, 0xCCCCCCCCCCCCCCCDLL * ((v164 - v163) >> 2));
      LOBYTE(v150) = 0;
      std::vector<BOOL>::vector(&v152, 0xCCCCCCCCCCCCCCCDLL * ((v164 - v163) >> 2), (unsigned __int8 *)&v150);
      uint64_t v22 = v163;
      uint64_t v21 = v164;
      uint64_t v23 = v152;
      if (v164 == v163)
      {
        unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v164 - v163) >> 2);
        double v25 = 0.0;
        uint64_t v27 = v164;
      }
      else
      {
        unint64_t v24 = 0;
        double v25 = 0.0;
        unsigned int v26 = 1;
        uint64_t v27 = v164;
        do
        {
          if ((v23[v24 >> 6] & (1 << v24)) == 0)
          {
            LODWORD(v150) = v26 - 1;
            double v28 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength((uint64_t)v158, (unsigned int *)&v150);
            v154[v24] = v28;
            LODWORD(v150) = v26 - 1;
            uint64_t v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v161, (unsigned int *)&v150);
            uint64_t v30 = v154;
            v154[*v29] = v28;
            double v31 = v30[v24];
            v152[v24 >> 6] |= 1 << v24;
            LODWORD(v150) = v26 - 1;
            uint64_t v32 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v161, (unsigned int *)&v150);
            double v25 = v25 + v31;
            uint64_t v23 = v152;
            *(void *)((char *)v152 + (((unint64_t)*v32 >> 3) & 0x1FFFFFF8)) |= 1 << *v32;
            uint64_t v22 = v163;
            uint64_t v27 = v164;
          }
          unint64_t v24 = v26;
          unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v22) >> 2);
          BOOL v34 = v33 > v26++;
        }
        while (v34);
        uint64_t v21 = v22;
      }
      float32x4_t v20 = (double *)v117;
      if (v153)
      {
        *(void *)&long long v150 = v23;
        DWORD2(v150) = 0;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v150, (unint64_t)v153);
        uint64_t v21 = v163;
        uint64_t v27 = v164;
      }
      if ((v25 + v25) / (double)v33 + (v25 + v25) / (double)v33 >= v156 * 0.5) {
        double v35 = v156 * 0.5;
      }
      else {
        double v35 = (v25 + v25) / (double)v33 + (v25 + v25) / (double)v33;
      }
      long long v150 = 0uLL;
      uint64_t v151 = 0;
      if (v27 != v21)
      {
        unint64_t v36 = 0;
        unsigned int v37 = v152;
        unsigned int v38 = 1;
        do
        {
          unint64_t v39 = v36 >> 6;
          uint64_t v40 = 1 << v36;
          uint64_t v41 = v37[v36 >> 6];
          if ((v41 & (1 << v36)) == 0)
          {
            double v42 = v154[v36];
            if (v42 > v35)
            {
              LODWORD(v148) = v38 - 1;
              *((double *)&v148 + 1) = v42;
              std::priority_queue<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::vector<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::allocator<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>::push((uint64_t *)&v150, &v148);
              unsigned int v37 = v152;
              uint64_t v41 = v152[v39];
            }
            v37[v39] = v41 | v40;
            LODWORD(v148) = v38 - 1;
            uint64_t v43 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v161, (unsigned int *)&v148);
            unsigned int v37 = v152;
            *(void *)((char *)v152 + (((unint64_t)*v43 >> 3) & 0x1FFFFFF8)) |= 1 << *v43;
            uint64_t v21 = v163;
            uint64_t v27 = v164;
          }
          unint64_t v36 = v38;
          BOOL v34 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v21) >> 2) > v38++;
        }
        while (v34);
        int32x4_t v45 = (unsigned char *)*((void *)&v150 + 1);
        uint64_t v44 = (_OWORD *)v150;
        if ((void)v150 != *((void *)&v150 + 1))
        {
          int64_t v46 = "adj_hhs.size() == 3";
          do
          {
            v147[0] = *v44;
            uint64_t v47 = v45 - (unsigned char *)v44;
            if (v45 - (unsigned char *)v44 >= 17)
            {
              uint64_t v48 = 0;
              uint64_t v49 = v47 >> 4;
              long long v148 = *v44;
              int64_t v50 = (unint64_t)((v47 >> 4) - 2) >> 1;
              uint64_t v51 = v44;
              do
              {
                uint64_t v52 = v51;
                v51 += v48 + 1;
                uint64_t v53 = 2 * v48;
                uint64_t v48 = (2 * v48) | 1;
                uint64_t v54 = v53 + 2;
                if (v54 < v49 && *((double *)v51 + 1) < *((double *)v51 + 3))
                {
                  ++v51;
                  uint64_t v48 = v54;
                }
                *uint64_t v52 = *v51;
              }
              while (v48 <= v50);
              uint64_t v55 = v45 - 16;
              if (v51 == (_OWORD *)(v45 - 16))
              {
                *uint64_t v51 = v148;
              }
              else
              {
                *uint64_t v51 = *v55;
                *uint64_t v55 = v148;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength> &,std::__wrap_iter<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength*>>((uint64_t)v44, (uint64_t)(v51 + 1), v51 + 1 - v44);
              }
              int32x4_t v45 = (unsigned char *)*((void *)&v150 + 1);
            }
            v45 -= 16;
            *((void *)&v150 + 1) = v45;
            LODWORD(v142) = -1;
            if (cv3d::cv::gess::mesh::TriMesh::SplitEdge((uint64_t)v158, (unsigned int *)v147, (unsigned int *)&v142, 0))
            {
              if (v142 == -1) {
                __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 201, "added_vh.Valid()");
              }
              long long v148 = 0uLL;
              v149 = 0;
              cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(&v145, &v161, &v142);
              for (int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v145);
                    i != -1;
                    int i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v145))
              {
                uint64_t v57 = *((void *)&v148 + 1);
                if (*((void *)&v148 + 1) >= (unint64_t)v149)
                {
                  uint64_t v59 = (uint64_t)(*((void *)&v148 + 1) - v148) >> 2;
                  if ((unint64_t)(v59 + 1) >> 62) {
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v60 = (uint64_t)&v149[-v148] >> 1;
                  if (v60 <= v59 + 1) {
                    unint64_t v60 = v59 + 1;
                  }
                  if ((unint64_t)&v149[-v148] >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v61 = v60;
                  }
                  if (v61) {
                    long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v149, v61);
                  }
                  else {
                    long long v62 = 0;
                  }
                  char v63 = &v62[4 * v59];
                  *(_DWORD *)char v63 = i;
                  uint64_t v58 = v63 + 4;
                  uint64_t v64 = (char *)*((void *)&v148 + 1);
                  uint64_t v65 = (char *)v148;
                  if (*((void *)&v148 + 1) != (void)v148)
                  {
                    do
                    {
                      int v66 = *((_DWORD *)v64 - 1);
                      v64 -= 4;
                      *((_DWORD *)v63 - 1) = v66;
                      v63 -= 4;
                    }
                    while (v64 != v65);
                    uint64_t v64 = (char *)v148;
                  }
                  *(void *)&long long v148 = v63;
                  *((void *)&v148 + 1) = v58;
                  v149 = &v62[4 * v61];
                  if (v64) {
                    operator delete(v64);
                  }
                }
                else
                {
                  **((_DWORD **)&v148 + 1) = i;
                  uint64_t v58 = (_DWORD *)(v57 + 4);
                }
                *((void *)&v148 + 1) = v58;
              }
              unint64_t v67 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v158, v167, v147[0]);
              if ((*v67 & v68) != 0
                || (uint64_t v69 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v161, (unsigned int *)v147),
                    uint64_t v70 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v158, v167, *v69),
                    (*v70 & v71) != 0))
              {
                uint64_t v72 = (unsigned int *)*((void *)&v148 + 1);
                uint64_t v73 = (unsigned int *)v148;
                if (*((void *)&v148 + 1) - (void)v148 != 12)
                {
                  int v75 = 211;
LABEL_180:
                  __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", v75, v46);
                }
              }
              else
              {
                uint64_t v72 = (unsigned int *)*((void *)&v148 + 1);
                uint64_t v73 = (unsigned int *)v148;
                if (*((void *)&v148 + 1) - (void)v148 != 16)
                {
                  int v75 = 213;
                  int64_t v46 = "adj_hhs.size() == 4";
                  goto LABEL_180;
                }
              }
              if (v73 != v72)
              {
                do
                {
                  double v74 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength((uint64_t)v158, v73);
                  if (v35 < v74)
                  {
                    LODWORD(v145) = *v73;
                    *((double *)&v145 + 1) = v74;
                    std::priority_queue<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::vector<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::allocator<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>::push((uint64_t *)&v150, &v145);
                  }
                  ++v73;
                }
                while (v73 != v72);
                uint64_t v72 = (unsigned int *)v148;
              }
              if (v72)
              {
                *((void *)&v148 + 1) = v72;
                operator delete(v72);
              }
              int32x4_t v45 = (unsigned char *)*((void *)&v150 + 1);
            }
            uint64_t v44 = (_OWORD *)v150;
          }
          while ((unsigned char *)v150 != v45);
        }
        float32x4_t v20 = (double *)v117;
        if (v45)
        {
          *((void *)&v150 + 1) = v45;
          operator delete(v45);
        }
      }
      if (v152) {
        operator delete(v152);
      }
      if (v154)
      {
        uint64_t v155 = v154;
        operator delete(v154);
      }
    }
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v150, (v162 - v161) >> 2);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v154, (v162 - v161) >> 2);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v152, (v162 - v161) >> 2);
    std::vector<float>::vector(&v148, (v162 - v161) >> 2);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v147, (v166 - v165) >> 2);
    cv3d::cv::gess::internal::ComputeSmoothNormals(v158, &v152, v147);
    cv3d::cv::gess::internal::ComputeVertexAreas((uint64_t)v158, &v148);
    v76.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v120[1].__r_.__value_.__s.__data_[0])
    {
      v77.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      long long v145 = 0uLL;
      uint64_t v146 = 0;
      v143 = 0;
      uint64_t v144 = 0;
      float32x4_t v140 = 0uLL;
      uint64_t v141 = 0;
      v142 = 0;
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      v138 = 0;
      uint64_t v139 = 0;
      v134 = 0;
      uint64_t v135 = 0;
      cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(v158, (uint64_t *)&v152, (uint64_t *)&v148, (uint64_t *)&v145, (uint64_t *)&v142, (uint64_t *)&v140, (uint64_t *)&v137, (uint64_t *)&v134);
      if (0xAAAAAAAAAAAAAAABLL * ((v138 - (unsigned char *)v137) >> 3) != (uint64_t)(*((void *)&v145 + 1) - v145) >> 4) {
        __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 256, "hierarchy_mesh_list.size() == fine_to_coarse_vertex_mappings.size()");
      }
      v78.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (a5) {
        double *v20 = (double)(v78.__d_.__rep_ - v77.__d_.__rep_) / 1000000.0;
      }
      LOBYTE(v121) = 6;
      unsigned __int16 v131 = 0;
      unint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v128 = 0;
      std::__fs::filesystem::path::__string_view v129 = 0;
      uint64_t v130 = 0;
      uint64_t v125 = 0;
      id v126 = 0;
      uint64_t v127 = 0;
      std::vector<int> __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      uint64_t v79 = *((void *)&v145 + 1);
      uint64_t v80 = *((void *)&v145 + 1) - v145;
      if (*((void *)&v145 + 1) == (void)v145)
      {
        int v87 = 0;
      }
      else
      {
        uint64_t v81 = 0;
        unint64_t v82 = v80 >> 4;
        unsigned int v83 = 1;
        uint64_t v79 = v145;
        do
        {
          unint64_t v84 = v82 + ~v81;
          uint64_t v85 = *(void *)(v79 + 16 * v84);
          uint64_t v86 = (uint64_t *)&v142[3 * v84];
          if (v83 == 1)
          {
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&v125, (uint64_t)(*(void *)(v85 + 112) - *(void *)(v85 + 104)) >> 2);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&__p, (uint64_t)(*(void *)(v85 + 112) - *(void *)(v85 + 104)) >> 2);
            cv3d::cv::gess::alg::ComputeFieldsFromRandomInitialValue(v85, &v156, &v121, v86, (uint64_t *)&__p, &v125);
          }
          else
          {
            if ((uint64_t)(*(void *)(*(void *)(v79 + 16 * (v82 - v81)) + 112)
                         - *(void *)(*(void *)(v79 + 16 * (v82 - v81)) + 104)) >> 2 != (v126 - (unsigned char *)v125) >> 4)
              __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 288, "hierarchy_mesh_list[hierarchy_mesh_list.size() - level_i]->VSize() == cur_field_positions.size()");
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v128, (long long *)__p, v123, ((char *)v123 - (unsigned char *)__p) >> 4);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v131, (long long *)v125, (long long *)v126, (v126 - (unsigned char *)v125) >> 4);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&__p, (uint64_t)(*(void *)(v85 + 112) - *(void *)(v85 + 104)) >> 2);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&v125, (uint64_t)(*(void *)(v85 + 112) - *(void *)(v85 + 104)) >> 2);
            cv3d::cv::gess::alg::ComputeFieldsFromCoarserHierarchy(v85, (void *)v137 + 3 * (((uint64_t)(*((void *)&v145 + 1) - v145) >> 4) - v81), &v128, &v131, &v156, &v121, v86, (uint64_t *)&__p, &v125);
          }
          uint64_t v81 = v83;
          uint64_t v79 = v145;
          unint64_t v82 = (uint64_t)(*((void *)&v145 + 1) - v145) >> 4;
          BOOL v34 = v82 > v83++;
        }
        while (v34);
        int v87 = v125;
        uint64_t v80 = (uint64_t)v126;
        float32x4_t v20 = (double *)v117;
      }
      if ((uint64_t)(*(void *)(*(void *)v79 + 112) - *(void *)(*(void *)v79 + 104)) >> 2 != (v80 - (uint64_t)v87) >> 4) {
        __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 308, "hierarchy_mesh_list[0]->VSize() == cur_field_positions.size()");
      }
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v128, (long long *)__p, v123, ((char *)v123 - (unsigned char *)__p) >> 4);
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v131, (long long *)v125, (long long *)v126, (v126 - (unsigned char *)v125) >> 4);
      cv3d::cv::gess::alg::ComputeFieldsFromCoarserHierarchy((uint64_t)v158, v137, &v128, &v131, &v156, &v121, (uint64_t *)&v152, (uint64_t *)&v154, &v150);
      if (__p)
      {
        uint64_t v123 = (long long *)__p;
        operator delete(__p);
      }
      if (v125)
      {
        id v126 = (char *)v125;
        operator delete(v125);
      }
      if (v128)
      {
        std::__fs::filesystem::path::__string_view v129 = v128;
        operator delete(v128);
      }
      if (v131)
      {
        unint64_t v132 = v131;
        operator delete(v131);
      }
      unsigned __int16 v131 = &v134;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
      v134 = &v137;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
      uint64_t v137 = &v140;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
      v140.i64[0] = (uint64_t)&v142;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      v142 = (void **)&v145;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v142);
    }
    else
    {
      LOBYTE(v145) = 10;
      cv3d::cv::gess::alg::ComputeFieldsFromRandomInitialValue((uint64_t)v158, &v156, &v145, (uint64_t *)&v152, (uint64_t *)&v154, &v150);
    }
    v88.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v119) {
      v20[1] = (double)(v88.__d_.__rep_ - v76.__d_.__rep_) / 1000000.0;
    }
    if ((v153 - (unsigned char *)v152) >> 4 != (v162 - v161) >> 2) {
      __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 333, "v_normals.size() == mesh.VSize()");
    }
    v89.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v164 != v163)
    {
      unint64_t v90 = 0;
      unsigned int v91 = 1;
      do
      {
        LODWORD(v145) = v157;
        uint64_t v92 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v159, (unsigned int *)&v145);
        if (*(void *)(v92 + 48) <= v90) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(void *)(*(void *)(v92 + 40) + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v90);
        unint64_t v90 = v91;
        BOOL v34 = 0xCCCCCCCCCCCCCCCDLL * ((v164 - v163) >> 2) > v91++;
      }
      while (v34);
    }
    LODWORD(v125) = 0;
    int v121 = 0;
    LODWORD(__p) = 0;
    long long v145 = 0uLL;
    uint64_t v146 = 0;
    v143 = 0;
    uint64_t v144 = 0;
    float32x4_t v140 = 0uLL;
    uint64_t v141 = 0;
    v142 = 0;
    cv3d::cv::gess::internal::ClassifyAndCollapseEdges((uint64_t)v158, (uint64_t *)&v152, (uint64_t *)&v154, (uint64_t *)&v150, &v156, &v157, (uint64_t *)&v145, &v142, &v140, &v125, &__p);
    v93.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    a4 = v117;
    if (v119)
    {
      *(double *)(v117 + 16) = (double)(v93.__d_.__rep_ - v89.__d_.__rep_) / 1000000.0;
      int v94 = (int)__p;
      *(_DWORD *)(v117 + 44) = v125;
      *(_DWORD *)(v117 + 48) = v94;
    }
    v95.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v137 = 0;
    v138 = 0;
    uint64_t v139 = 0;
    cv3d::cv::gess::internal::ExtractQuadFaces((uint64_t *)&v145, (uint64_t)&v140, (uint64_t)&v142, (unsigned int *)&v137, (uint64_t)&v156, &v121);
    v134 = 0;
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    unsigned __int16 v131 = 0;
    unint64_t v132 = 0;
    uint64_t v133 = 0;
    cv3d::cv::gess::internal::CollectIrregularFaces((uint64_t *)&v137, (uint64_t *)&v134, (uint64_t *)&v131);
    cv3d::cv::gess::internal::ReorderIrregularFaceIndices((uint64_t *)&v140, (std::vector<unsigned int>::pointer **)&v131);
    uint64_t inited = cv3d::cv::gess::mesh::QuadMesh::InitVF(v116, (uint64_t *)&v140, (uint64_t *)&v134, (uint64_t *)&v131);
    v96.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v119)
    {
      *(double *)(v117 + 24) = (double)(v96.__d_.__rep_ - v95.__d_.__rep_) / 1000000.0;
      *(_DWORD *)(v117 + 52) = v121;
    }
    uint64_t v128 = &v131;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
    a2 = (cv3d::cv::gess::mesh::QuadMesh *)v116;
    if (v134)
    {
      uint64_t v135 = v134;
      operator delete(v134);
    }
    if (v137)
    {
      v138 = v137;
      operator delete(v137);
    }
    if (v140.i64[0])
    {
      v140.i64[1] = v140.i64[0];
      operator delete((void *)v140.i64[0]);
    }
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    v142 = (void **)&v145;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v142);
    if (*(void *)&v147[0])
    {
      *((void *)&v147[0] + 1) = *(void *)&v147[0];
      operator delete(*(void **)&v147[0]);
    }
    if ((void)v148)
    {
      *((void *)&v148 + 1) = v148;
      operator delete((void *)v148);
    }
    if (v152)
    {
      id v153 = v152;
      operator delete(v152);
    }
    if (v154)
    {
      uint64_t v155 = v154;
      operator delete(v154);
    }
    if ((void)v150)
    {
      *((void *)&v150 + 1) = v150;
      operator delete((void *)v150);
    }
    int v14 = v120[1].__r_.__value_.__s.__data_[2];
    if (!v120[1].__r_.__value_.__s.__data_[2]) {
      goto LABEL_168;
    }
  }
  if (v120[1].__r_.__value_.__s.__data_[3])
  {
    uint64_t v118 = a4;
    v114.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    std::string::basic_string[abi:ne180100]<0>(&v150, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v155) = 0;
    v154 = 0;
    int v97 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v160, (uint64_t)&v154, (unsigned __int8 *)&v150);
    if (SHIBYTE(v151) < 0) {
      operator delete((void *)v150);
    }
    LODWORD(v154) = -1;
    std::string::basic_string[abi:ne180100]<0>(&v150, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)v158, &v154, (unsigned __int8 *)&v150);
    unsigned int v115 = inited;
    if (SHIBYTE(v151) < 0) {
      operator delete((void *)v150);
    }
    if (v97 != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v150, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
      BOOL v98 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)v158, &v154, (unsigned __int8 *)&v150);
      if (SHIBYTE(v151) < 0) {
        operator delete((void *)v150);
      }
      if (!v98)
      {
        std::string::basic_string[abi:ne180100]<0>(&v150, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
        cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<unsigned int>>((uint64_t)v158, &v154, &v150);
        if (SHIBYTE(v151) < 0) {
          operator delete((void *)v150);
        }
      }
      if (v166 != v165)
      {
        unint64_t v99 = 0;
        unsigned int v100 = 0;
        do
        {
          LODWORD(v150) = v154;
          uint64_t v101 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)v160, (unsigned int *)&v150);
          uint64_t v102 = *(void *)(v101 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v101 + 48) - v102) >> 3) <= v99) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          std::vector<int>::resize((std::vector<unsigned int> *)(v102 + 24 * v99), 3uLL);
          for (uint64_t j = 0; j != 12; j += 4)
          {
            LODWORD(v150) = v97;
            uint64_t v104 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v160, (unsigned int *)&v150);
            uint64_t v105 = *(void *)(v104 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 48) - v105) >> 2) <= v99
              || (int v106 = *(_DWORD *)(v105 + 12 * v100 + j),
                  LODWORD(v150) = v154,
                  uint64_t v107 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)v160, (unsigned int *)&v150), v108 = *(void *)(v107 + 40), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v107 + 48) - v108) >> 3) <= v99))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(_DWORD *)(*(void *)(v108 + 24 * v99) + j) = v106;
          }
          unint64_t v99 = ++v100;
        }
        while (v100 < (unint64_t)((v166 - v165) >> 2));
      }
    }
    cv3d::cv::gess::internal::ExtractQuadFacesByDiagonal((uint64_t)v158, &v157);
    v109.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    a4 = v118;
    uint64_t inited = v115;
    if (v119) {
      *(double *)(v118 + 24) = (double)(v109.__d_.__rep_ - v114.__d_.__rep_) / 1000000.0;
    }
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)v158);
    cv3d::cv::gess::mesh::QuadMesh::CopyFrom(a2, (const cv3d::cv::gess::mesh::TriMesh *)v158);
    int v14 = v120[1].__r_.__value_.__s.__data_[2];
  }
LABEL_168:
  if (!v14)
  {
    v110.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v154) = -1;
    std::string::basic_string[abi:ne180100]<0>(&v150, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)a2, &v154, (unsigned __int8 *)&v150);
    if (SHIBYTE(v151) < 0) {
      operator delete((void *)v150);
    }
    cv3d::cv::gess::internal::FinalFaceMergingByDiagonal((uint64_t)a2, &v156, (int *)&v154);
    cv3d::cv::gess::alg::FixNonManifoldVertices(a2, v111);
    cv3d::cv::gess::alg::RemoveDanglingElements(a2, v112);
    v113.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v119) {
      *(double *)(a4 + 32) = (double)(v113.__d_.__rep_ - v110.__d_.__rep_) / 1000000.0;
    }
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v158);
  return inited;
}

void sub_24F545628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = (void *)v66[12];
  if (v68)
  {
    v66[13] = v68;
    operator delete(v68);
  }
  uint64_t v69 = (void *)v66[16];
  if (v69)
  {
    v66[17] = v69;
    operator delete(v69);
  }
  uint64_t v70 = (void *)v66[24];
  if (v70)
  {
    v66[25] = v70;
    operator delete(v70);
  }
  uint64_t v71 = (void *)v66[27];
  if (v71)
  {
    v66[28] = v71;
    operator delete(v71);
  }
  uint64_t v72 = (void *)v66[20];
  if (v72)
  {
    v66[21] = v72;
    operator delete(v72);
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a66);
  _Unwind_Resume(a1);
}

float cv3d::cv::gess::mesh::TriMesh::CalculateSurfaceArea(cv3d::cv::gess::mesh::TriMesh *this)
{
  uint64_t v1 = *((void *)this + 20) - *((void *)this + 19);
  if (!v1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = v1 >> 2;
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  float v6 = 0.0;
  do
  {
    unsigned int v8 = v3;
    float v6 = v6 + cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)this, &v8);
    ++v3;
  }
  while (v5 != v3);
  return v6;
}

uint64_t std::priority_queue<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::vector<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::allocator<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>::push(uint64_t *a1, _OWORD *a2)
{
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v7 = (_OWORD *)*a1;
    uint64_t v8 = ((uint64_t)v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    unsigned int v13 = &v12[16 * v8];
    *(_OWORD *)unsigned int v13 = *a2;
    uint64_t v6 = (uint64_t)(v13 + 16);
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *(v5 - 1);
        v13 -= 16;
        --v5;
      }
      while (v5 != v7);
      uint64_t v5 = (_OWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  uint64_t v14 = *a1;
  uint64_t v15 = (v6 - *a1) >> 4;

  return std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength> &,std::__wrap_iter<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength*>>(v14, v6, v15);
}

uint64_t cv3d::cv::gess::alg::QuadMesh2TriMesh(void **this, const cv3d::cv::gess::mesh::QuadMesh *a2, cv3d::cv::gess::mesh::TriMesh *a3)
{
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)a2, this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "h:is_quadmesh_diagonal");
  LOBYTE(v26) = 0;
  int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)a2 + 4, (uint64_t)&v26, (unsigned __int8 *)&__p);
  int v29 = v4;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  if (v4 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "h:is_quadmesh_diagonal");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)a2, &v29, &__p);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
  }
  else if (*((void *)a2 + 17) != *((void *)a2 + 16))
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      LODWORD(__p) = v29;
      uint64_t v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)a2 + 4, (unsigned int *)&__p);
      if (*(void *)(v7 + 48) <= v5) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(void *)(*(void *)(v7 + 40) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v5);
      unint64_t v5 = v6;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2) > v6++);
  }
  long long __p = 0uLL;
  double v28 = 0;
  if (*((void *)a2 + 20) != *((void *)a2 + 19))
  {
    LODWORD(v9) = 0;
    do
    {
      unsigned int v26 = v9;
      *((void *)&__p + 1) = __p;
      unsigned int v10 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)a2 + 104, &v26);
      unsigned int v25 = v10;
      do
      {
        unsigned int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)a2 + 104, &v25) + 8);
        unsigned int v25 = v11;
        uint64_t v12 = *((void *)&__p + 1);
        if (*((void *)&__p + 1) >= (unint64_t)v28)
        {
          uint64_t v14 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v15 = (uint64_t)&v28[-__p] >> 1;
          if (v15 <= v14 + 1) {
            unint64_t v15 = v14 + 1;
          }
          if ((unint64_t)&v28[-__p] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v28, v16);
            unsigned int v11 = v25;
          }
          else
          {
            float v17 = 0;
          }
          unsigned int v18 = (unsigned int *)&v17[4 * v14];
          *unsigned int v18 = v11;
          unsigned int v13 = v18 + 1;
          float v19 = (char *)*((void *)&__p + 1);
          float32x4_t v20 = (char *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
            {
              unsigned int v21 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *--unsigned int v18 = v21;
            }
            while (v19 != v20);
            float v19 = (char *)__p;
          }
          *(void *)&long long __p = v18;
          *((void *)&__p + 1) = v13;
          double v28 = &v17[4 * v16];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          **((_DWORD **)&__p + 1) = v11;
          unsigned int v13 = (_DWORD *)(v12 + 4);
        }
        *((void *)&__p + 1) = v13;
      }
      while (v25 != v10);
      uint64_t v22 = __p;
      unint64_t v23 = (unint64_t)v13 - __p;
      if ((unint64_t)((unint64_t)v13 - __p) >= 0x10)
      {
        if (v23 >= 0x15) {
          __assert_rtn("QuadMesh2TriMesh", "QuadMeshConvert.cpp", 475, "fh_hhs.size() <= 5");
        }
        if (v23 == 16)
        {
          cv3d::cv::gess::internal::Quad2Triangles((uint64_t)a2, &v26, (unsigned int **)&__p, v29);
          unsigned int v13 = (_DWORD *)*((void *)&__p + 1);
          uint64_t v22 = __p;
        }
        if ((_DWORD *)((char *)v13 - v22) == (_DWORD *)20) {
          cv3d::cv::gess::internal::Pentagon2Triangles((uint64_t)a2, &v26, (unsigned int **)&__p, v29);
        }
      }
      unint64_t v9 = (v9 + 1);
    }
    while (v9 < (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return 1;
}

void sub_24F545DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeDifferenceBetweenQuadMeshAndTriMesh(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::QuadMesh *a2, const cv3d::cv::gess::mesh::TriMesh *a3, float *a4)
{
  if (*((void *)this + 14) == *((void *)this + 13) || *((void *)a2 + 14) == *((void *)a2 + 13)) {
    return 0;
  }
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v35);
  cv3d::cv::gess::alg::QuadMesh2TriMesh((void **)this, (const cv3d::cv::gess::mesh::QuadMesh *)&v35, v7);
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v32);
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom(&v32, &v35);
  cv3d::cv::gess::alg::ProjectionOptions::ProjectionOptions(&v31);
  int v31 = 1065353216;
  uint64_t v9 = cv3d::cv::gess::alg::Mesh2MeshProjection((cv3d::cv::gess::alg *)&v32, a2, (const cv3d::cv::gess::mesh::TriMesh *)&v31, v8);
  if (v38 == v37)
  {
    double v12 = 0.0;
  }
  else
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    double v12 = 0.0;
    do
    {
      v29[0].i32[0] = v34;
      uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v33, (unsigned int *)v29);
      uint64_t v14 = *(void *)(v13 + 40);
      if (v10 >= (*(void *)(v13 + 48) - v14) >> 4
        || (v29[0].i32[0] = v39,
            uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v36, (unsigned int *)v29), v16 = *(void *)(v15 + 40), v10 >= (*(void *)(v15 + 48) - v16) >> 4))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      float32x4_t v27 = *(float32x4_t *)(v14 + 16 * v10);
      float32x4_t v28 = *(float32x4_t *)(v16 + 16 * v10);
      unsigned int v30 = v11;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v29, &v37, &v30);
      unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v29);
      float32x4_t v18 = vsubq_f32(v27, v28);
      float32x4_t v19 = vmulq_f32(v18, v18);
      v19.i32[3] = 0;
      float v20 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19)));
      float v21 = 0.0;
      while (1)
      {
        unsigned int v30 = HEdge;
        if (HEdge == -1) {
          break;
        }
        uint64_t v22 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)&v35, v40, HEdge);
        if ((*v22 & v23) == 0)
        {
          uint64_t v24 = cv3d::cv::gess::mesh::Topology::h((uint64_t)&v37, &v30);
          float v21 = v21 + (float)(cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)&v35, (unsigned int *)(v24 + 16)) / 3.0);
        }
        unsigned int HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v29);
      }
      double v12 = v12 + (float)(v20 * v21);
      unint64_t v10 = ++v11;
    }
    while (v11 < (unint64_t)((v38 - v37) >> 2));
  }
  cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox((cv3d::cv::gess::alg *)&v35, v29);
  float32x4_t v25 = vsubq_f32(v29[1], v29[0]);
  v25.f32[0] = v12 / vmulq_laneq_f32(vmulq_lane_f32(v25, *(float32x2_t *)v25.f32, 1), v25, 2).f32[0];
  *(_DWORD *)a3 = v25.i32[0];
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v32);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v35);
  return v9;
}

void sub_24F546054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t cv3d::cv::gess::alg::CheckBakeOption(cv3d::cv::gess::alg *this, const cv3d::cv::gess::alg::ConfigBake *a2, cv3d::cv::gess::alg::ConfigBake *a3)
{
  long long v5 = *(_OWORD *)this;
  long long v6 = *((_OWORD *)this + 1);
  long long v7 = *((_OWORD *)this + 2);
  *((unsigned char *)a2 + 48) = *((unsigned char *)this + 48);
  *((_OWORD *)a2 + 1) = v6;
  *((_OWORD *)a2 + 2) = v7;
  *(_OWORD *)a2 = v5;
  cv3d::cv::gess::alg::ConfigOutput::operator=((uint64_t)a2 + 56, (uint64_t)this + 56);
  if (a2 != this) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)a2 + 456, *((char **)this + 57), *((void *)this + 58), (uint64_t)(*((void *)this + 58) - *((void *)this + 57)) >> 3);
  }
  std::string::operator=((std::string *)a2 + 20, (const std::string *)this + 20);
  *((unsigned char *)a2 + 504) = *((unsigned char *)this + 504);
  std::string::operator=((std::string *)((char *)a2 + 512), (const std::string *)((char *)this + 512));
  int v8 = *((_DWORD *)this + 136);
  *((void *)a2 + 67) = *((void *)this + 67);
  *((_DWORD *)a2 + 136) = v8;
  *((_DWORD *)a2 + 15) = 1;
  return 1;
}

uint64_t cv3d::cv::gess::alg::TriModel2QuadModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v184 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v182, a6);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, a6 + 32);
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v153);
  cv3d::cv::gess::alg::CheckBakeOption((cv3d::cv::gess::alg *)(a3 + 32), (const cv3d::cv::gess::alg::ConfigBake *)v153, v12);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v151);
  uint64_t v124 = a6 + 32;
  uint64_t v13 = (char *)operator new(0x60uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)uint64_t v13 = &unk_2700D9070;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *((void *)v13 + 11) = 0;
  *((void *)v13 + 9) = v13 + 80;
  v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  LOWORD(__p) = 1;
  BYTE2(__p) = 1;
  HIDWORD(__p) = 2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __str = *(_OWORD *)a1;
    *(void *)&__str[16] = *(void *)(a1 + 16);
  }
  uint64_t v123 = (uint64_t)(v13 + 24);
  BOOL ObjFile = cv3d::cv::gess::io::LoadObjFile((long long *)__str, (uint64_t)v151, (uint64_t)(v13 + 24), (uint64_t)&__p);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (!ObjFile && *((void *)v151 + 20) == *((void *)v151 + 19) && *((void *)v151 + 14) == *((void *)v151 + 13)) {
    goto LABEL_23;
  }
  uint64_t v18 = *((void *)v13 + 6);
  uint64_t v19 = *((void *)v13 + 7);
  cv3d::cv::gess::alg::RepairEverything(v151, v15, v16);
  v20.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a5) {
    *(double *)(a4 + 64) = (double)(v20.__d_.__rep_ - v14.__d_.__rep_) / 1000000.0;
  }
  uint64_t v125 = a4;
  uint64_t v21 = *((void *)v13 + 6);
  if (v21 == *((void *)v13 + 7)) {
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v22 = *(std::__shared_weak_count **)(v21 + 16);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (v23)
  {
    uint64_t v24 = *((void *)v13 + 6);
    uint64_t v23 = *(void *)(v24 + 8);
    float32x4_t v25 = *(std::__shared_weak_count **)(v24 + 16);
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      LODWORD(v155) = *(_DWORD *)(v23 + 4);
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      goto LABEL_18;
    }
LABEL_17:
    LODWORD(v155) = *(_DWORD *)(v23 + 4);
  }
LABEL_18:
  if (v183)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v182, (uint64_t)__str, 10.0);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
  }
  if (v181 && ((*(uint64_t (**)(uint64_t))(*(void *)v181 + 48))(v181) & 1) != 0)
  {
LABEL_23:
    uint64_t v26 = 0;
    goto LABEL_219;
  }
  uint64_t v27 = *((void *)v13 + 3);
  uint64_t v28 = *((void *)v13 + 4);
  if (v27 != v28)
  {
    while (1)
    {
      uint64_t v29 = *(void *)(v27 + 32);
      if (!v29) {
        break;
      }
      uint64_t v30 = v27 + 32;
      do
      {
        int v31 = *(_DWORD *)(v29 + 28);
        BOOL v32 = v31 < 1;
        if (v31 >= 1) {
          unint64_t v33 = (uint64_t *)v29;
        }
        else {
          unint64_t v33 = (uint64_t *)(v29 + 8);
        }
        if (!v32) {
          uint64_t v30 = v29;
        }
        uint64_t v29 = *v33;
      }
      while (*v33);
      if (v30 == v27 + 32 || *(int *)(v30 + 28) >= 2) {
        break;
      }
      v27 += 48;
      if (v27 == v28) {
        goto LABEL_38;
      }
    }
  }
  char v156 = 0;
  char v158 = 0;
  char v157 = 0;
LABEL_38:
  __int32 v34 = v151;
  std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  long long __p = 0;
  uint64_t v135 = 0;
  int v35 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)v34 + 1, (uint64_t)&__p, __str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v35 == -1) {
    int v36 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v151);
  }
  else {
    int v36 = 1;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v149);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v147);
  std::string::basic_string[abi:ne180100]<0>(&v145, "0.25");
  int v146 = 257;
  std::string::operator=(&v145, (const std::string *)a3);
  LOWORD(v146) = *(_WORD *)(a3 + 24);
  if (a5) {
    uint64_t v37 = v125;
  }
  else {
    uint64_t v37 = 0;
  }
  cv3d::cv::gess::alg::TriMesh2QuadMesh((uint64_t)v151, v147, &v145, v37, a5 != 0);
  if (v183)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v182, (uint64_t)__str, 40.0);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
  }
  if (!v181 || ((*(uint64_t (**)(uint64_t))(*(void *)v181 + 48))(v181) & 1) == 0)
  {
    cv3d::cv::gess::alg::QuadMesh2TriMesh((void **)v147, v149, v38);
    __int32 v39 = v149;
    std::string::basic_string[abi:ne180100]<0>(__str, "h:is_quadmesh_diagonal");
    LOBYTE(__p) = 0;
    int v40 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)v39 + 4, (uint64_t)&__p, __str);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    if (v40 != -1)
    {
      LODWORD(v140.__r_.__value_.__l.__data_) = -1;
      uint64_t v41 = v149;
      std::string::basic_string[abi:ne180100]<0>(__str, "f:hedge_diagonal");
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<BOOL>>((uint64_t)v41, &v140, (long long *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__str, 3uLL);
      int v118 = v36;
      uint64_t v120 = a5;
      uint64_t v121 = a6;
      uint64_t v116 = v19;
      uint64_t v117 = v18;
      uint64_t v122 = a2;
      uint64_t v43 = v149;
      if (*((void *)v149 + 20) != *((void *)v149 + 19))
      {
        unint64_t v44 = 0;
        unsigned int v45 = 0;
        do
        {
          LODWORD(__p) = v45;
          cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges((uint64_t)v43, (unsigned int *)&__p, __str);
          for (uint64_t i = 0; i != 3; ++i)
          {
            LODWORD(__p) = v40;
            uint64_t v47 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v149 + 4, (unsigned int *)&__p);
            unint64_t v48 = *(unsigned int *)(*(void *)__str + 4 * i);
            if (*(void *)(v47 + 48) <= v48
              || (uint64_t v49 = *(void *)(*(void *)(v47 + 40) + ((v48 >> 3) & 0x1FFFFFF8)),
                  LODWORD(__p) = v140.__r_.__value_.__l.__data_,
                  uint64_t v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<BOOL>>((uint64_t *)v149 + 7, (unsigned int *)&__p), v51 = *(void *)(v50 + 40), 0xAAAAAAAAAAAAAAABLL * (*(void *)(v50 + 48) - v51) <= v44))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(unsigned char *)(v51 + 3 * v45 + i) = (v49 & (1 << v48)) != 0;
          }
          uint64_t v43 = v149;
          unint64_t v44 = ++v45;
        }
        while (v45 < (unint64_t)((uint64_t)(*((void *)v149 + 20) - *((void *)v149 + 19)) >> 2));
      }
      LOBYTE(v142) = 0;
      cv3d::cv::gess::alg::FixNonManifoldEdges(v43, (cv3d::cv::gess::mesh::TriMesh *)&v142, v42);
      uint64_t v52 = v149;
      if (*((void *)v149 + 20) == *((void *)v149 + 19))
      {
        unint64_t v60 = *(void **)__str;
        if (!*(void *)__str) {
          goto LABEL_78;
        }
      }
      else
      {
        unint64_t v53 = 0;
        unsigned int v54 = 0;
        do
        {
          LODWORD(__p) = v54;
          cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges((uint64_t)v52, (unsigned int *)&__p, __str);
          for (uint64_t j = 0; j != 3; ++j)
          {
            LODWORD(__p) = v140.__r_.__value_.__l.__data_;
            uint64_t v56 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<BOOL>>((uint64_t *)v149 + 7, (unsigned int *)&__p);
            uint64_t v57 = *(void *)(v56 + 40);
            if (0xAAAAAAAAAAAAAAABLL * (*(void *)(v56 + 48) - v57) <= v53) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            int v58 = *(unsigned __int8 *)(v57 + 3 * v54 + j);
            LODWORD(__p) = v40;
            uint64_t v59 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v149 + 4, (unsigned int *)&__p);
            unint64_t v60 = *(void **)__str;
            unint64_t v61 = *(unsigned int *)(*(void *)__str + 4 * j);
            if (*(void *)(v59 + 48) <= v61) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            uint64_t v62 = *(void *)(v59 + 40);
            unint64_t v63 = v61 >> 6;
            uint64_t v64 = 1 << v61;
            if (v58) {
              uint64_t v65 = *(void *)(v62 + 8 * v63) | v64;
            }
            else {
              uint64_t v65 = *(void *)(v62 + 8 * v63) & ~v64;
            }
            *(void *)(v62 + 8 * v63) = v65;
          }
          uint64_t v52 = v149;
          unint64_t v53 = ++v54;
        }
        while (v54 < (unint64_t)((uint64_t)(*((void *)v149 + 20) - *((void *)v149 + 19)) >> 2));
      }
      *(void *)&__str[8] = v60;
      operator delete(v60);
LABEL_78:
      int v66 = (char *)operator new(0x60uLL);
      *((void *)v66 + 1) = 0;
      *((void *)v66 + 2) = 0;
      *(void *)int v66 = &unk_2700D9070;
      *(_OWORD *)(v66 + 72) = 0u;
      *((void *)v66 + 9) = v66 + 80;
      int v172 = 3;
      char v173 = 1;
      char v67 = BYTE4(v155);
      LODWORD(__p) = 1065749138;
      HIDWORD(__p) = v155;
      *(_OWORD *)(v66 + 24) = 0u;
      *(_OWORD *)(v66 + 40) = 0u;
      *(_OWORD *)(v66 + 56) = 0u;
      *((void *)v66 + 11) = 0;
      uint64_t v142 = 0;
      unint64_t v143 = 0;
      unint64_t v144 = 0;
      memset(v171, 0, sizeof(v171));
      memset(__str, 0, sizeof(__str));
      LOBYTE(v135) = v67;
      int v136 = v154;
      HIDWORD(v135) = 2;
      if (v118) {
        char v68 = cv3d::cv::gess::alg::BlenderUV2ParameterizeWithDiagonal(v149, &__p, __str);
      }
      else {
        char v68 = 0;
      }
      if (v120)
      {
        uint64_t v69 = *(void *)&v171[16];
        *(void *)(v125 + 288) = *(void *)__str;
        *(void *)(v125 + 320) = v69;
      }
      if (v183)
      {
        std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_24F58DDD7);
        std::function<void ()(float,std::string const&)>::operator()((uint64_t)v182, (uint64_t)__str, 50.0);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
      }
      if (v181 && ((*(uint64_t (**)(uint64_t))(*(void *)v181 + 48))(v181) & 1) != 0)
      {
        uint64_t v26 = 0;
LABEL_212:
        *(void *)std::string __str = &v142;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66);
        goto LABEL_213;
      }
      unsigned int v115 = (uint64_t *)(v66 + 24);
      if (v68)
      {
        int v70 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v149);
        int data = -1;
        LODWORD(v140.__r_.__value_.__l.__data_) = -1;
        if (v70)
        {
          uint64_t v72 = v149;
          std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
          BOOL v73 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v72, &v140, __str);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          int data = (int)v140.__r_.__value_.__l.__data_;
        }
        else
        {
          BOOL v73 = 0;
        }
      }
      else
      {
        BOOL v73 = 0;
        int data = -1;
        LODWORD(v140.__r_.__value_.__l.__data_) = -1;
      }
      int v119 = v66;
      LODWORD(__p) = data;
      double v74 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v149 + 10, (unsigned int *)&__p);
      uint64_t v75 = (*(uint64_t (**)(void *))(*v74 + 16))(v74);
      LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = -1;
      std::chrono::system_clock::time_point v76 = v149;
      std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
      BOOL v77 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)v76, &__replacement, __str);
      BOOL v78 = v77;
      if ((__str[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__str);
        if (v78) {
          goto LABEL_104;
        }
      }
      else if (v77)
      {
        goto LABEL_104;
      }
      uint64_t v79 = v149;
      std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)v79, &__replacement, (long long *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
LABEL_104:
      LODWORD(__p) = __replacement.__pn_.__r_.__value_.__l.__data_;
      uint64_t v80 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)v149 + 10, (unsigned int *)&__p);
      (*(void (**)(void *, uint64_t))(*v80 + 32))(v80, 1);
      uint64_t v81 = (uint64_t **)v80[5];
      if ((uint64_t **)v80[6] == v81) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      if (v75)
      {
        uint64_t v82 = 0;
        for (unint64_t k = 0; k != v75; ++k)
        {
          uint64_t v84 = v74[5];
          if (0xAAAAAAAAAAAAAAABLL * ((v74[6] - v84) >> 3) <= k) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          uint64_t v85 = (long long *)(v84 + v82);
          if (*((char *)v85 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v85, *((void *)v85 + 1));
          }
          else
          {
            long long v86 = *v85;
            *(void *)&__str[16] = *((void *)v85 + 2);
            *(_OWORD *)std::string __str = v86;
          }
          LOWORD(pn.__r_.__value_.__l.__data_) = k;
          long long __p = &pn;
          int v87 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v81, (unsigned __int16 *)&pn, (uint64_t)&std::piecewise_construct, (_WORD **)&__p);
          std::string::operator=((std::string *)(v87 + 5), (const std::string *)__str);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          v82 += 24;
        }
      }
      *(void *)&__str[24] = 0;
      *(void *)&v171[24] = 0;
      uint64_t v174 = 0;
      uint64_t v178 = 0;
      v179[3] = 0;
      std::function<void ()(float,std::string const&)>::operator=(__str, v121);
      int v88 = v73;
      std::function<BOOL ()(void)>::operator=(v171, v124);
      if (v117 != v116)
      {
        if (v120)
        {
          if (v73)
          {
            std::chrono::system_clock::time_point v89 = v151;
            unint64_t v90 = v149;
            unsigned int v91 = (cv3d::cv::gess::alg::BakeCallbackBundle *)v169;
            cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v169, (const cv3d::cv::gess::alg::BakeCallbackBundle *)__str);
            int v93 = cv3d::cv::gess::alg::InternalBakeHelper(v89, v123, (uint64_t)v90, (uint64_t)v115, (uint64_t)v153, v125 + 64, 1, v92, (uint64_t)&v142, 1, (uint64_t)v169);
LABEL_120:
            int v88 = v93;
            cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle(v91);
          }
        }
        else if (v73)
        {
          int v94 = v151;
          std::chrono::system_clock::time_point v95 = v149;
          unsigned int v91 = (cv3d::cv::gess::alg::BakeCallbackBundle *)v168;
          cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v168, (const cv3d::cv::gess::alg::BakeCallbackBundle *)__str);
          int v93 = cv3d::cv::gess::alg::InternalBakeHelper(v94, v123, (uint64_t)v95, (uint64_t)v115, (uint64_t)v153, 0, 0, v96, (uint64_t)&v142, 1, (uint64_t)v168);
          goto LABEL_120;
        }
      }
      if (v183)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
        std::function<void ()(float,std::string const&)>::operator()((uint64_t)v182, (uint64_t)&__p, 90.0);
        if (v137 < 0) {
          operator delete(__p);
        }
      }
      if (v181 && ((*(uint64_t (**)(uint64_t))(*(void *)v181 + 48))(v181) & 1) != 0)
      {
        cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)__str);
        uint64_t v26 = 0;
        int v66 = v119;
        goto LABEL_212;
      }
      std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v179);
      std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](&v175);
      std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](&v171[32]);
      std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v171);
      std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](__str);
      std::string::basic_string[abi:ne180100]<0>(&v140, "0.25");
      int v141 = 16843009;
      cv3d::cv::gess::alg::TriMesh2QuadMesh((uint64_t)v149, v147, &v140, 0, 0);
      LOBYTE(__p) = 0;
      HIDWORD(__p) = 1;
      LOWORD(v135) = 0;
      int v66 = v119;
      cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)&v136);
      LOBYTE(__p) = 1;
      BYTE1(v135) = 1;
      LODWORD(pn.__r_.__value_.__l.__data_) = 1;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
      int v97 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v139, (int *)&pn, (uint64_t)&std::piecewise_construct, &__replacement);
      *(void *)std::string __str = &unk_2700D93C0;
      *(void *)&__str[24] = __str;
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__str, v97 + 5);
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](__str);
      LODWORD(pn.__r_.__value_.__l.__data_) = 2;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
      BOOL v98 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v139, (int *)&pn, (uint64_t)&std::piecewise_construct, &__replacement);
      *(void *)std::string __str = &unk_2700D93C0;
      *(void *)&__str[24] = __str;
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__str, v98 + 5);
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](__str);
      LODWORD(pn.__r_.__value_.__l.__data_) = 3;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
      unint64_t v99 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v139, (int *)&pn, (uint64_t)&std::piecewise_construct, &__replacement);
      *(void *)std::string __str = &unk_2700D93C0;
      *(void *)&__str[24] = __str;
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__str, v99 + 5);
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](__str);
      LODWORD(pn.__r_.__value_.__l.__data_) = 4;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
      unsigned int v100 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v139, (int *)&pn, (uint64_t)&std::piecewise_construct, &__replacement);
      *(void *)std::string __str = &unk_2700D93C0;
      *(void *)&__str[24] = __str;
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__str, v100 + 5);
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](__str);
      LODWORD(pn.__r_.__value_.__l.__data_) = 5;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
      uint64_t v101 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v139, (int *)&pn, (uint64_t)&std::piecewise_construct, &__replacement);
      *(void *)std::string __str = &unk_2700D93C0;
      *(void *)&__str[24] = __str;
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__str, v101 + 5);
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](__str);
      LODWORD(pn.__r_.__value_.__l.__data_) = 7;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
      uint64_t v102 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v139, (int *)&pn, (uint64_t)&std::piecewise_construct, &__replacement);
      *(void *)std::string __str = &unk_2700D93C0;
      *(void *)&__str[24] = __str;
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__str, v102 + 5);
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](__str);
      LODWORD(pn.__r_.__value_.__l.__data_) = 13;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
      unsigned int v103 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v139, (int *)&pn, (uint64_t)&std::piecewise_construct, &__replacement);
      *(void *)std::string __str = &unk_2700D93C0;
      *(void *)&__str[24] = __str;
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__str, v103 + 5);
      std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](__str);
      if (v88)
      {
        if (cv3d::cv::gess::alg::CopyAllConfigMapToImageSaveFormat((cv3d::cv::gess::alg *)&v155, (const cv3d::cv::gess::alg::ConfigOutput *)&v136, v104))
        {
          if (*(char *)(v122 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v122, *(void *)(v122 + 8));
          }
          else
          {
            *(_OWORD *)std::string __str = *(_OWORD *)v122;
            *(void *)&__str[16] = *(void *)(v122 + 16);
          }
          int v88 = cv3d::cv::gess::io::SaveObjFile(__str, (uint64_t)v147, v115, (uint64_t)&__p);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
        }
        else
        {
          int v88 = 0;
        }
      }
      unint64_t v105 = v143;
      if (v143 >= v144)
      {
        uint64_t v106 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v142, (long long *)v122);
      }
      else
      {
        std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>((uint64_t)&v142, (long long *)v122);
        uint64_t v106 = v105 + 24;
      }
      unint64_t v143 = v106;
      if (*(char *)(v122 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v122, *(void *)(v122 + 8));
      }
      else
      {
        *(_OWORD *)std::string __str = *(_OWORD *)v122;
        *(void *)&__str[16] = *(void *)(v122 + 16);
      }
      std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".mtl");
      uint64_t v107 = (long long *)std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)__str, &__replacement);
      unint64_t v108 = v143;
      if (v143 >= v144)
      {
        uint64_t v109 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v142, v107);
      }
      else
      {
        std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>((uint64_t)&v142, v107);
        uint64_t v109 = v108 + 24;
      }
      unint64_t v143 = v109;
      if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
      }
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (v159) {
        int v110 = v88;
      }
      else {
        int v110 = 0;
      }
      if (v110 != 1) {
        goto LABEL_202;
      }
      if (*(char *)(v122 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__replacement.__pn_, *(const std::string::value_type **)v122, *(void *)(v122 + 8));
      }
      else {
        std::__fs::filesystem::path __replacement = *(std::__fs::filesystem::path *)v122;
      }
      std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>((std::string *)__str, ".usda");
      std::__fs::filesystem::path::replace_extension(&__replacement, (const std::__fs::filesystem::path *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption((cv3d::cv::gess::io::SaveUsdOption *)__str, (const cv3d::cv::gess::io::SaveObjOption *)&__p);
      std::string::operator=((std::string *)&v171[40], &v165);
      uint64_t v175 = v166;
      int v176 = v167;
      if (SHIBYTE(v179[0]) < 0)
      {
        uint64_t v178 = 13;
        unsigned int v111 = v177;
      }
      else
      {
        unsigned int v111 = (char *)&v177;
        HIBYTE(v179[0]) = 13;
      }
      strcpy(v111, "ObjectCapture");
      if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&pn, __replacement.__pn_.__r_.__value_.__l.__data_, __replacement.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string pn = __replacement.__pn_;
      }
      cv3d::cv::gess::io::SaveUsdaFile((uint64_t)&pn, (uint64_t)v147, v115, (uint64_t)__str);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v160, "usda")) {
        goto LABEL_196;
      }
      if (*(char *)(v122 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&pn, *(const std::string::value_type **)v122, *(void *)(v122 + 8));
        if (*(char *)(v122 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v131.__pn_, *(const std::string::value_type **)v122, *(void *)(v122 + 8));
LABEL_170:
          std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&v130.__pn_, ".usdc");
          std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&pn, &v130);
          if (SHIBYTE(v130.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__pn_.__r_.__value_.__l.__data_);
          }
          std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&v130.__pn_, ".usdz");
          std::__fs::filesystem::path::replace_extension(&v131, &v130);
          if (SHIBYTE(v130.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__pn_.__r_.__value_.__l.__data_);
          }
          int v129 = 0;
          std::string::basic_string[abi:ne180100]<0>(&v130, (char *)&unk_24F58DDD7);
          if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v128, __replacement.__pn_.__r_.__value_.__l.__data_, __replacement.__pn_.__r_.__value_.__l.__size_);
          }
          else {
            std::string v128 = __replacement.__pn_;
          }
          if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v127, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
          }
          else {
            std::string v127 = pn;
          }
          if (SHIBYTE(v131.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v126, v131.__pn_.__r_.__value_.__l.__data_, v131.__pn_.__r_.__value_.__l.__size_);
          }
          else {
            std::string v126 = v131.__pn_;
          }
          char v112 = cv3d::cv::gess::io::UsdzConvert((uint64_t *)&v128, (uint64_t *)&v127, (uint64_t *)&v126, &v129, &v130.__pn_);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v126.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v127.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v128.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v130.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v131.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v131.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(pn.__r_.__value_.__l.__data_);
          }
          if ((v112 & 1) == 0)
          {
            char v113 = 0;
            goto LABEL_198;
          }
LABEL_196:
          char v113 = 1;
LABEL_198:
          cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption((void **)__str);
          if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
          }
          if ((v113 & 1) == 0) {
            goto LABEL_209;
          }
          int v88 = 1;
LABEL_202:
          if (v183)
          {
            std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_24F58DDD7);
            std::function<void ()(float,std::string const&)>::operator()((uint64_t)v182, (uint64_t)__str, 100.0);
            if ((__str[23] & 0x80000000) != 0) {
              operator delete(*(void **)__str);
            }
          }
          if (v88)
          {
            if (*(void *)(v121 + 88)) {
              std::function<void ()(std::vector<std::__fs::filesystem::path> const&)>::operator()(v121 + 64);
            }
            uint64_t v26 = 1;
            goto LABEL_210;
          }
LABEL_209:
          uint64_t v26 = 0;
LABEL_210:
          std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v139, v139[1]);
          std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)&v136, v138);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          goto LABEL_212;
        }
      }
      else
      {
        std::string pn = *(std::string *)v122;
      }
      std::__fs::filesystem::path v131 = *(std::__fs::filesystem::path *)v122;
      goto LABEL_170;
    }
  }
  uint64_t v26 = 0;
LABEL_213:
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  if (v148) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v148);
  }
  if (v150) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v150);
  }
LABEL_219:
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  if (v152) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v152);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  if (v164 < 0) {
    operator delete(v163);
  }
  if (v161)
  {
    uint64_t v162 = v161;
    operator delete(v161);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(&v155);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v180);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v182);
  return v26;
}

void sub_24F5476D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption((void **)&STACK[0x5A0]);
  if (a57 < 0) {
    operator delete(a52);
  }
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a59);
  if (a72 < 0) {
    operator delete(a69);
  }
  STACK[0x5A0] = (unint64_t)&a73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5A0]);
  std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  if (a75 < 0) {
    operator delete(a74);
  }
  if (STACK[0x210]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x210]);
  }
  if (STACK[0x220]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x220]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  if (STACK[0x230]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x230]);
  }
  cv3d::cv::gess::alg::ConfigBake::~ConfigBake((void **)&STACK[0x238]);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v76 - 160));
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100]((void *)(v76 - 128));
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<BOOL>>(uint64_t a1, _DWORD *a2, long long *a3)
{
  char v7 = 0;
  __int16 v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<BOOL>>((uint64_t *)(a1 + 56), (uint64_t)&v6, a3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    __int16 v6 = a1;
  }
  else {
    __int16 v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

uint64_t std::function<void ()(std::vector<std::__fs::filesystem::path> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

_OWORD *std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  __int16 v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v13 = (_OWORD *)a1[1];
    double v12 = (_OWORD **)(a1 + 1);
    uint64_t result = v13;
    std::chrono::system_clock::time_point v14 = (char *)v13;
    if (v6 != a3)
    {
      std::chrono::system_clock::time_point v14 = (char *)result;
      do
      {
        long long v15 = *v6++;
        *(_OWORD *)std::chrono::system_clock::time_point v14 = v15;
        v14 += 16;
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v25 = v14 - (char *)result;
    goto LABEL_27;
  }
  float v17 = (_OWORD *)a1[1];
  double v12 = (_OWORD **)(a1 + 1);
  uint64_t v16 = v17;
  unint64_t v18 = v17 - result;
  if (v18 >= a4)
  {
    std::chrono::system_clock::time_point v14 = (char *)result;
    if (a2 != a3)
    {
      uint64_t v26 = result;
      do
      {
        long long v27 = *v6++;
        *v26++ = v27;
        v14 += 16;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  uint64_t v19 = &a2[v18];
  if (v16 != result)
  {
    uint64_t v20 = 16 * v18;
    do
    {
      long long v21 = *v6++;
      *result++ = v21;
      v20 -= 16;
    }
    while (v20);
    uint64_t result = *v12;
  }
  uint64_t v22 = (char *)result;
  if (v19 != a3)
  {
    uint64_t v22 = (char *)result;
    uint64_t v23 = result;
    do
    {
      long long v24 = *v19++;
      *v23++ = v24;
      v22 += 16;
    }
    while (v19 != a3);
  }
  int64_t v25 = v22 - (char *)result;
LABEL_27:
  *double v12 = (_OWORD *)((char *)result + v25);
  return result;
}

uint64_t cv3d::cv::gess::alg::ConfigOutput::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 204) = *(unsigned char *)(a2 + 204);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a2 + 376));
  return a1;
}

cv3d::cv::gess::alg::ConfigBake *cv3d::cv::gess::alg::ConfigBake::ConfigBake(cv3d::cv::gess::alg::ConfigBake *this)
{
  *(_DWORD *)this = 1061997773;
  *(_OWORD *)((char *)this + 4) = xmmword_24F578E90;
  *(void *)((char *)this + 20) = 0x13DCCCCCDLL;
  *(void *)((char *)this + 28) = 0x241000000;
  *(void *)((char *)this + 36) = 1065353216;
  *((_DWORD *)this + 11) = 2139095039;
  *((unsigned char *)this + 48) = 1;
  cv3d::cv::gess::alg::ConfigOutput::ConfigOutput((cv3d::cv::gess::alg::ConfigBake *)((char *)this + 56));
  *((unsigned char *)this + 504) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 64, "CorePhotogrammetry Bake");
  *((void *)this + 67) = 0;
  *((_DWORD *)this + 136) = 0;
  return this;
}

void sub_24F547EF4(_Unwind_Exception *a1)
{
  cv3d::cv::gess::alg::ConfigSystem::~ConfigSystem(v2);
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v1);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::alg::ConfigOutput *cv3d::cv::gess::alg::ConfigOutput::ConfigOutput(cv3d::cv::gess::alg::ConfigOutput *this)
{
  *(void *)this = 4096;
  *((unsigned char *)this + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 2, "png");
  *((_DWORD *)this + 10) = 1065017672;
  *((unsigned char *)this + 48) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 7, "png");
  *((_DWORD *)this + 20) = 1065017672;
  *((unsigned char *)this + 88) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 12, "png");
  *((_DWORD *)this + 30) = 1065017672;
  *((unsigned char *)this + 128) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 17, "png");
  *((_DWORD *)this + 40) = 1065017672;
  std::string::basic_string[abi:ne180100]<0>(__p, "exr");
  *((unsigned char *)this + 168) = 1;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v2 = SHIBYTE(v8);
    *((_DWORD *)this + 50) = 1065017672;
    *((unsigned char *)this + 204) = 1;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 11) = *(_OWORD *)__p;
    *((void *)this + 24) = v8;
    *((_DWORD *)this + 50) = 1065017672;
    *((unsigned char *)this + 204) = 1;
  }
  *((unsigned char *)this + 208) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 27, "png");
  *((_DWORD *)this + 60) = 1065017672;
  std::string::basic_string[abi:ne180100]<0>(__p, "png");
  *((unsigned char *)this + 248) = 0;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 256), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v3 = SHIBYTE(v8);
    *((_DWORD *)this + 70) = 1065017672;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 16) = *(_OWORD *)__p;
    *((void *)this + 34) = v8;
    *((_DWORD *)this + 70) = 1065017672;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "exr");
  *((unsigned char *)this + 288) = 0;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 296), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v4 = SHIBYTE(v8);
    *((_DWORD *)this + 80) = 1065017672;
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 296) = *(_OWORD *)__p;
    *((void *)this + 39) = v8;
    *((_DWORD *)this + 80) = 1065017672;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "exr");
  *((unsigned char *)this + 328) = 0;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v5 = SHIBYTE(v8);
    *((_DWORD *)this + 90) = 1065017672;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + 21) = *(_OWORD *)__p;
    *((void *)this + 44) = v8;
    *((_DWORD *)this + 90) = 1065017672;
  }
  *((unsigned char *)this + 368) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 47, "usdz");
  return this;
}

void sub_24F5481D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15[319] < 0) {
    operator delete(*v23);
  }
  if (v15[279] < 0) {
    operator delete(*v22);
  }
  if (v15[239] < 0) {
    operator delete(*v21);
  }
  if (v15[199] < 0) {
    operator delete(*v20);
  }
  if (v15[159] < 0) {
    operator delete(*v19);
  }
  if (v15[119] < 0) {
    operator delete(*v18);
  }
  if (v15[79] < 0) {
    operator delete(*v17);
  }
  if (v15[39] < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(a1);
}

void sub_24F5482F4()
{
}

void sub_24F5482FC()
{
}

void std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_24F54835C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  v15.__first_ = v10;
  v15.__begin_ = end;
  v15.__end_ = end;
  v15.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = v15.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  v15.__end_ = end + 1;
  std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  uint64_t v13 = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_24F548474(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength> &,std::__wrap_iter<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength*>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    double v4 = *(double *)(a2 - 8);
    if (*(double *)(result + 16 * v3 + 8) < v4)
    {
      uint64_t v7 = *(void *)(a2 - 16);
      uint64_t v5 = a2 - 16;
      uint64_t v6 = v7;
      do
      {
        uint64_t v8 = (_OWORD *)v5;
        uint64_t v5 = result + 16 * v3;
        _OWORD *v8 = *(_OWORD *)v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
      }
      while (*(double *)(result + 16 * v3 + 8) < v4);
      *(void *)uint64_t v5 = v6;
      *(double *)(v5 + 8) = v4;
    }
  }
  return result;
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xD0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_24F54866C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D92A8;
  cv3d::cv::gess::mesh::QuadMesh::QuadMesh((cv3d::cv::gess::mesh::QuadMesh *)(a1 + 3));
  return a1;
}

void sub_24F5486C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::QuadMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D92A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::QuadMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D92A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::QuadMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<BOOL>>(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)a1[1];
  if ((void *)*a1 == v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)*a1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)*a1;
    while (*v8)
    {
      v8 += 2;
      uint64_t v7 = (v7 + 1);
      if (v8 == v6) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    uint64_t v9 = (uint64_t)(a1 + 2);
    unint64_t v10 = a1[2];
    if ((unint64_t)v6 >= v10)
    {
      uint64_t v12 = ((uint64_t)v6 - v5) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v10 - v5;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      long long v27 = a1 + 2;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      float v17 = &v16[16 * v12];
      *(void *)&long long v24 = v16;
      *((void *)&v24 + 1) = v17;
      uint64_t v26 = &v16[16 * v18];
      *(void *)float v17 = 0;
      *((void *)v17 + 1) = 0;
      int64_t v25 = v17 + 16;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__swap_out_circular_buffer(a1, &v24);
      unint64_t v11 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)&v24);
    }
    else
    {
      unint64_t v11 = v6 + 2;
      *uint64_t v6 = 0;
      v6[1] = 0;
      a1[1] = (uint64_t)(v6 + 2);
    }
    a1[1] = (uint64_t)v11;
  }
  uint64_t v23 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, &v23, &v24);
  uint64_t v19 = *a1 + 16 * v7;
  long long v20 = v24;
  long long v24 = 0uLL;
  long long v21 = *(std::__shared_weak_count **)(v19 + 8);
  *(_OWORD *)uint64_t v19 = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  return v7;
}

void sub_24F5488DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(long long *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24F548940(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,0>(void *a1, long long *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2700D92E0;
  cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1 + 3, a2, a3);
  a1[3] = &unk_2700D9318;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return a1;
}

void sub_24F5489C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D92E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2700D92E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::~AttributeT(a1);

  JUMPOUT(0x25335EA10);
}

unint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * (*(void *)(a1 + 48) - *(void *)(a1 + 40));
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Reserve(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Resize(uint64_t a1, unint64_t a2)
{
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Clear(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2) {
    operator delete(v2);
  }
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::PushBack(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  unint64_t v3 = a1[7];
  double v4 = (unsigned char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = (unsigned char *)a1[5];
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - v6);
    if (v7 + 1 >= 0x5555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v3 - (void)v6);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x5555555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(v2, v10);
      uint64_t v6 = (unsigned char *)a1[5];
      double v4 = (unsigned char *)a1[6];
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v11[3 * v7];
    *(_WORD *)uint64_t v12 = 0;
    v12[2] = 0;
    unint64_t v13 = &v11[3 * v10];
    uint64_t v5 = v12 + 3;
    if (v4 == v6)
    {
      uint64_t v14 = v12;
    }
    else
    {
      do
      {
        uint64_t v14 = v12 - 3;
        unint64_t v15 = v4 - 3;
        uint64_t v16 = -3;
        do
          v12[v16] = v4[v16];
        while (!__CFADD__(v16++, 1));
        v4 -= 3;
        v12 -= 3;
      }
      while (v15 != v6);
    }
    a1[5] = v14;
    a1[6] = v5;
    a1[7] = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_WORD *)double v4 = 0;
    v4[2] = 0;
    uint64_t v5 = v4 + 3;
  }
  a1[6] = v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 40);
  double v4 = (char *)(v3 + 3 * a2);
  char v5 = *v4;
  char v6 = v4[1];
  char v7 = v4[2];
  unint64_t v8 = (char *)(v3 + 3 * a3);
  *double v4 = *v8;
  v4[1] = v8[1];
  v4[2] = v8[2];
  char *v8 = v5;
  v8[1] = v6;
  v8[2] = v7;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 40);
  uint64_t v4 = v3 + 3 * a2;
  uint64_t v5 = v3 + 3 * a3;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)v4;
  *(_WORD *)(v5 + 1) = *(_WORD *)(v4 + 1);
  return result;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Clone()
{
}

void sub_24F548CF4(_Unwind_Exception *a1)
{
  MEMORY[0x25335EA10](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::MemoryConsumption(uint64_t a1)
{
  return *(void *)(a1 + 56) - *(void *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  *(void *)this = &unk_2700D9318;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * (v4 - (unsigned char *)*a1) < a2)
  {
    if (a2 >= 0x5555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 3;
    char v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(v3, a2);
    char v7 = &v6[3 * v5];
    uint64_t v9 = &v6[3 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v13 = v7;
      do
      {
        uint64_t v12 = v13 - 3;
        uint64_t v14 = v11 - 3;
        uint64_t v15 = -3;
        do
          v13[v15] = v11[v15];
        while (!__CFADD__(v15++, 1));
        v11 -= 3;
        v13 -= 3;
      }
      while (v14 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(3 * a2);
}

void std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__append((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 3 * a2;
  }
}

void std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * (v6 - (void)v7) >= a2)
  {
    if (a2)
    {
      size_t v14 = 3 * ((3 * a2 - 3) / 3) + 3;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    *(void *)(a1 + 8) = v7;
  }
  else
  {
    uint64_t v8 = *(char **)a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (void)&v7[-*(void *)a1];
    unint64_t v10 = v9 + a2;
    if (v9 + a2 >= 0x5555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v5 - (void)v8);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x5555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(v4, v12);
      uint64_t v8 = *(char **)a1;
      char v7 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v15 = &v13[3 * v9];
    uint64_t v16 = &v13[3 * v12];
    size_t v17 = 3 * ((3 * a2 - 3) / 3) + 3;
    bzero(v15, v17);
    uint64_t v18 = &v15[v17];
    if (v7 == v8)
    {
      uint64_t v19 = v15;
    }
    else
    {
      do
      {
        uint64_t v19 = v15 - 3;
        long long v20 = v7 - 3;
        uint64_t v21 = -3;
        do
          v15[v21] = v7[v21];
        while (!__CFADD__(v21++, 1));
        v7 -= 3;
        v15 -= 3;
      }
      while (v20 != v8);
    }
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v18;
    *(void *)(a1 + 16) = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t *a2)
{
  uint64_t v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(void *)uint64_t v4 = &unk_2700D9318;
  *((void *)v4 + 5) = 0;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<BOOL>*,cv3d::cv::gess::math::Vector3T<BOOL>*>((char *)v4 + 40, a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * (a2[6] - a2[5]));
  return a1;
}

void sub_24F5490FC(_Unwind_Exception *a1)
{
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

char *std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<BOOL>*,cv3d::cv::gess::math::Vector3T<BOOL>*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      for (uint64_t i = 0; i != 3; ++i)
        *(unsigned char *)(v7 + i) = *(unsigned char *)(a2 + i);
      a2 += 3;
      v7 += 3;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_24F549180(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x5555555555555556) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[3 * v4];
  return result;
}

void std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_24F549254(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x25335EA10);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<BOOL>>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (!v4) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>) {
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v4;
}

void std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2700D93C0;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2700D93C0;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a2;
  int v3 = *(char *)(a2 + 23);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v3 < 0) {
    operator delete(v2);
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::FixNonManifoldVertices(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::PolyMesh *a2)
{
  unsigned int v77 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ring hedges");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t)this, &v77, &__p);
  if (SHIBYTE(v76) < 0) {
    operator delete((void *)__p);
  }
  LODWORD(__p) = v77;
  uint64_t v69 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t *)this + 1, (unsigned int *)&__p);
  unsigned int v74 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hedges flags");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v74, &__p);
  uint64_t v62 = (void *)((char *)this + 8);
  if (SHIBYTE(v76) < 0) {
    operator delete((void *)__p);
  }
  LODWORD(__p) = v74;
  unint64_t v61 = (void *)((char *)this + 32);
  uint64_t v3 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)&__p);
  char v68 = (unsigned int *)this;
  if (*((void *)this + 17) != *((void *)this + 16))
  {
    unint64_t v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = (char *)this + 104;
    do
    {
      LODWORD(__p) = v5;
      if (*(void *)(v3 + 48) <= v4) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(void *)(*(void *)(v3 + 40) + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v4);
      unint64_t v7 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&__p) + 12);
      if (v7 != -1)
      {
        uint64_t v8 = *(void *)(v69 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v69 + 48) - v8) >> 3) <= v7) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        unint64_t v9 = (char **)(v8 + 24 * v7);
        unint64_t v11 = (void **)(v9 + 1);
        unint64_t v10 = v9[1];
        unint64_t v13 = v9 + 2;
        unint64_t v12 = (unint64_t)v9[2];
        if ((unint64_t)v10 >= v12)
        {
          uint64_t v15 = (v10 - *v9) >> 2;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v12 - (void)*v9;
          uint64_t v17 = v16 >> 1;
          if (v16 >> 1 <= (unint64_t)(v15 + 1)) {
            uint64_t v17 = v15 + 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v13, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          long long v20 = &v19[4 * v15];
          *(_DWORD *)long long v20 = __p;
          size_t v14 = v20 + 4;
          uint64_t v21 = (char *)*v11;
          uint64_t v22 = *v9;
          if (*v11 != *v9)
          {
            do
            {
              int v23 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *((_DWORD *)v20 - 1) = v23;
              v20 -= 4;
            }
            while (v21 != v22);
            uint64_t v21 = *v9;
          }
          *unint64_t v9 = v20;
          *unint64_t v11 = v14;
          void *v13 = &v19[4 * v18];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v10 = __p;
          size_t v14 = v10 + 4;
        }
        *unint64_t v11 = v14;
        this = (cv3d::cv::gess::alg *)v68;
      }
      unint64_t v4 = ++v5;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2) > v5);
  }
  uint64_t v24 = *((void *)this + 13);
  uint64_t v25 = *((void *)this + 14);
  uint64_t v26 = (void *)((char *)this + 104);
  unint64_t v27 = v25 - v24;
  uint64_t v28 = 0;
  if ((v27 >> 2))
  {
    unint64_t v29 = 0;
    uint64_t v63 = (v27 >> 2);
    do
    {
      unsigned int v73 = v29;
      uint64_t v30 = *(void *)(v69 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v69 + 48) - v30) >> 3) <= v29) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      uint64_t v31 = (*(void *)(v30 + 24 * v29 + 8) - *(void *)(v30 + 24 * v29)) & 0x3FFFFFFFCLL;
      BOOL v32 = (int *)cv3d::cv::gess::mesh::Topology::v(v26, &v73);
      if (v31)
      {
        unint64_t v33 = v73;
        uint64_t v35 = *(void *)(v69 + 40);
        uint64_t v34 = *(void *)(v69 + 48);
        if (0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3) <= v73) {
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        }
        unint64_t v64 = v29;
        uint64_t v65 = v28;
        char v66 = 0;
        int v36 = *v32;
        for (uint64_t i = *(unsigned int **)(v35 + 24 * v73); i != *(unsigned int **)(v35 + 24 * v33 + 8); ++i)
        {
          unint64_t v38 = *i;
          if (*(void *)(v3 + 48) <= v38) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
          if (((*(void *)(*(void *)(v3 + 40) + ((v38 >> 3) & 0x1FFFFFF8)) >> v38) & 1) == 0)
          {
            char v39 = 0;
            long long __p = 0uLL;
            uint64_t v76 = 0;
            unsigned int v72 = *i;
            unsigned int v40 = v72;
            unsigned int v41 = v72;
            do
            {
              unsigned int v71 = v41;
              uint64_t v42 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v26, &v72);
              unint64_t v43 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v26, (unsigned int *)(v42 + 4));
              unsigned int v72 = v43;
              BOOL v44 = v43 == v36;
              if (*(void *)(v3 + 48) <= v43) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(void *)(*(void *)(v3 + 40) + ((v43 >> 3) & 0x1FFFFFF8)) |= 1 << v43;
              uint64_t v45 = *((void *)&__p + 1);
              if (*((void *)&__p + 1) >= (unint64_t)v76)
              {
                uint64_t v47 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
                if ((unint64_t)(v47 + 1) >> 62) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v48 = (uint64_t)&v76[-__p] >> 1;
                if (v48 <= v47 + 1) {
                  unint64_t v48 = v47 + 1;
                }
                if ((unint64_t)&v76[-__p] >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v48;
                }
                if (v49)
                {
                  uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v76, v49);
                  LODWORD(v43) = v72;
                }
                else
                {
                  uint64_t v50 = 0;
                }
                uint64_t v51 = &v50[4 * v47];
                *(_DWORD *)uint64_t v51 = v43;
                int64_t v46 = v51 + 4;
                uint64_t v52 = (char *)*((void *)&__p + 1);
                unint64_t v53 = (char *)__p;
                if (*((void *)&__p + 1) != (void)__p)
                {
                  do
                  {
                    int v54 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v51 - 1) = v54;
                    v51 -= 4;
                  }
                  while (v52 != v53);
                  uint64_t v52 = (char *)__p;
                }
                *(void *)&long long __p = v51;
                *((void *)&__p + 1) = v46;
                uint64_t v76 = &v50[4 * v49];
                if (v52) {
                  operator delete(v52);
                }
              }
              else
              {
                **((_DWORD **)&__p + 1) = v43;
                int64_t v46 = (_DWORD *)(v45 + 4);
              }
              v39 |= v44;
              *((void *)&__p + 1) = v46;
              unsigned int v41 = v72;
            }
            while (v72 != -1 && v72 != v40);
            uint64_t v56 = (void *)__p;
            if ((v39 & 1) == 0)
            {
              if ((unint64_t)((unint64_t)v46 - __p) <= 7) {
                __assert_rtn("FixNonManifoldVertices", "Repair.cpp", 99, "sector.size() > 1");
              }
              long long v78 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v68, v68[44], v73);
              v79[0] = -1;
              unsigned int appended = cv3d::cv::gess::mesh::PolyMesh::AppendVertex((uint64_t)v68, &v78, v79);
              cv3d::cv::gess::mesh::MeshProperty::CopyAllAttributes((uint64_t)v68, v73, appended, 1);
              int v58 = (unsigned int *)*((void *)&__p + 1);
              uint64_t v57 = (unsigned int *)__p;
              *(void *)&long long v78 = v68;
              *((void *)&v78 + 1) = v67 & 0xFFFFFFFF00000000 | appended;
              uint64_t v67 = *((void *)&v78 + 1);
              while (v57 != v58)
              {
                v79[0] = *v57;
                cv3d::cv::gess::mesh::Topology::SetStart((void *)(v78 + 104), v79, (_DWORD *)&v78 + 2);
                ++v57;
              }
              cv3d::cv::gess::mesh::Topology::SetHEdge(v26, &appended, &v71);
              char v66 = 1;
              uint64_t v56 = (void *)__p;
            }
            if (v56)
            {
              *((void *)&__p + 1) = v56;
              operator delete(v56);
            }
            unint64_t v33 = v73;
            uint64_t v35 = *(void *)(v69 + 40);
            uint64_t v34 = *(void *)(v69 + 48);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3) <= v33) {
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          }
        }
        uint64_t v28 = v65;
        uint64_t v59 = v66 & 1;
        unint64_t v29 = v64;
      }
      else
      {
        *BOOL v32 = -1;
        uint64_t v59 = 1;
      }
      v28 += v59;
      ++v29;
    }
    while (v29 != v63);
  }
  if (v77 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v62, &v77);
  }
  unsigned int v77 = -1;
  if (v74 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v61, &v74);
  }
  return v28;
}

void sub_24F549A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::RemoveDanglingElements(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v3 = *((void *)this + 14) - *((void *)this + 13);
  uint64_t v4 = (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2;
  uint64_t v5 = (uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2;
  cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(this);
  return v4
       + (v3 >> 2)
       - 0x3333333333333333 * v5
       - (((uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 2)
        + ((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2))
       + 0x3333333333333333 * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2);
}

uint64_t cv3d::cv::gess::alg::RepairEverything(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::PolyMesh *a2, BOOL *a3)
{
  *(unsigned char *)a2 = 0;
  if (cv3d::cv::gess::alg::FixNonManifoldVertices(this, a2)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = *(unsigned char *)a2 == 0;
  }
  char v7 = !v6;
  *(unsigned char *)a2 = v7;
  if (cv3d::cv::gess::alg::RemoveDanglingElements(this, v5)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(unsigned char *)a2 == 0;
  }
  char v9 = !v8;
  *(unsigned char *)a2 = v9;
  return 1;
}

{
  char v4;

  uint64_t v4 = 0;
  return cv3d::cv::gess::alg::RepairEverything(this, (cv3d::cv::gess::mesh::PolyMesh *)&v4, a3);
}

uint64_t cv3d::cv::gess::alg::RepairEverything(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, BOOL *a3)
{
  *(unsigned char *)a2 = 0;
  uint64_t result = cv3d::cv::gess::alg::RepairEverything(this, a2, a3);
  char v8 = 0;
  if (result)
  {
    uint64_t result = cv3d::cv::gess::alg::FixNonManifoldEdges(this, (cv3d::cv::gess::mesh::TriMesh *)&v8, v6);
    char v7 = v8;
  }
  else
  {
    char v7 = 0;
  }
  *(unsigned char *)a2 |= v7;
  return result;
}

{
  char v4;

  uint64_t v4 = 0;
  return cv3d::cv::gess::alg::RepairEverything(this, (cv3d::cv::gess::mesh::TriMesh *)&v4, a3);
}

uint64_t cv3d::cv::gess::alg::FixNonManifoldEdges(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, BOOL *a3)
{
  *(unsigned char *)a2 = 0;
  if (cv3d::cv::gess::alg::VerifyManifoldEdges(this, a2)) {
    return 1;
  }
  uint64_t fixed = cv3d::cv::gess::mesh::TriMesh::FixNonManifoldEdge(this);
  if (fixed)
  {
    cv3d::cv::gess::alg::FixNonManifoldVertices(this, v6);
    cv3d::cv::gess::alg::RemoveDanglingElements(this, v7);
  }
  *(unsigned char *)a2 = 1;
  return fixed;
}

uint64_t cv3d::cv::gess::alg::CheckDegeneratedTriangles(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  double v6 = 0.0;
  if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
  {
    unsigned int v7 = 1;
    do
    {
      LODWORD(__p[0]) = v7 - 1;
      double v6 = v6 + cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)__p);
      uint64_t v9 = *(void *)(a1 + 152);
      uint64_t v8 = *(void *)(a1 + 160);
      unint64_t v10 = (v8 - v9) >> 2;
    }
    while (v10 > v7++);
    if (v8 != v9) {
      double v6 = v6 / (double)v10;
    }
  }
  double v12 = v6 * 0.0001;
  if (v6 * 0.0001 > 0.000001) {
    double v12 = 0.000001;
  }
  if (v12 >= 1.0e-10) {
    double v13 = v12;
  }
  else {
    double v13 = 1.0e-10;
  }
  *a3 = 0;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
  {
    LODWORD(v14) = 0;
    do
    {
      unsigned int v37 = v14;
      uint64_t v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v37);
      uint64_t v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v15);
      uint64_t v17 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v16);
      *(_DWORD *)__p[0] = *(_DWORD *)(v17 + 12);
      unint64_t v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v37);
      uint64_t v19 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v18);
      long long v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(v19 + 8));
      uint64_t v21 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v20);
      *((_DWORD *)__p[0] + 1) = *(_DWORD *)(v21 + 12);
      uint64_t v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v37);
      uint64_t v23 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v22);
      uint64_t v24 = __p[0];
      *((_DWORD *)__p[0] + 2) = *(_DWORD *)(v23 + 12);
      float32x4_t v36 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v24[1]);
      float32x4_t v35 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
      float32x4_t v34 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 2));
      uint64_t v25 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
      int32x4_t v26 = (int32x4_t)vsubq_f32(v36, v35);
      int32x4_t v27 = (int32x4_t)vsubq_f32(v34, *v25);
      float32x4_t v28 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v26, (int32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 0xCuLL)), v26), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL), v27)), (float32x4_t)vzip2q_s32(vzip1q_s32(v27, (int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL)), v27), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL), v26));
      float32x4_t v29 = vmulq_f32(v28, v28);
      v29.i32[3] = 0;
      if (v13 > sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
      {
        uint64_t v30 = 0;
        uint64_t v31 = (char *)__p[0];
        uint64_t v32 = *a2;
        do
        {
          *(_DWORD *)(v32 + 4 * *(unsigned int *)&v31[v30]) = 1056964608;
          v30 += 4;
        }
        while (v30 != 12);
        *a3 = 1;
      }
      unint64_t v14 = (v14 + 1);
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_24F549FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::RepairDegeneratedTriangles(float32x4_t *this, cv3d::cv::gess::mesh::TriMesh *a2, float a3, unsigned char *a4, BOOL *a5)
{
  int v6 = (int)a2;
  unint64_t v9 = (this[7].i64[0] - this[6].i64[1]) >> 2;
  int v16 = 0;
  std::vector<float>::vector(&__p, v9, &v16);
  LOBYTE(v16) = 0;
  *a4 = 0;
  double v10 = a3;
  unsigned int v11 = -1;
  do
  {
    cv3d::cv::gess::alg::CheckDegeneratedTriangles((uint64_t)this, (uint64_t *)&__p, &v16);
    int v13 = v16;
    if (v6)
    {
      if (!(_BYTE)v16) {
        break;
      }
      cv3d::cv::gess::alg::ComputeAverageEdgeLength(this, v12);
      if (!cv3d::cv::gess::alg::CollapseShortEdges((cv3d::cv::gess::alg *)this, 0, v14, v10, 1, 0.000001, 4))goto LABEL_9; {
      std::vector<float>::resize((uint64_t)&__p, (this[7].i64[0] - this[6].i64[1]) >> 2);
      }
      if (v18 - (unsigned char *)__p >= 1) {
        bzero(__p, 4 * (((unint64_t)(v18 - (unsigned char *)__p) >> 2) - ((unint64_t)(v18 - (unsigned char *)__p) > 3)) + 4);
      }
      cv3d::cv::gess::alg::CheckDegeneratedTriangles((uint64_t)this, (uint64_t *)&__p, &v16);
      *a4 = 1;
      int v13 = v16;
    }
    if (!v13) {
      break;
    }
LABEL_9:
    cv3d::cv::gess::alg::TangentialRelaxation((uint64_t)this, &__p, 5, 0);
    *a4 = 1;
    ++v11;
  }
  while (v11 < 9);
  if (__p)
  {
    unint64_t v18 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_24F54A15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::IsPointInTriangle(float *a1, float *a2, float *a3, float *a4)
{
  float v4 = a3[1];
  float v5 = a2[1];
  float v6 = *a3 - *a2;
  float v7 = *a1;
  float v8 = a1[1];
  float v9 = (float)(v6 * (float)(v8 - v5)) - (float)((float)(v4 - v5) * (float)(*a1 - *a2));
  BOOL result = 0;
  if (v9 >= 0.0)
  {
    float v11 = *a4;
    float v12 = a4[1];
    float v13 = *a4 - *a2;
    float v14 = (float)((float)(v6 * (float)(v12 - v5)) - (float)((float)(v4 - v5) * v13)) + 1.0e-12;
    if (v9 <= v14)
    {
      float v15 = (float)((float)(v11 - *a3) * (float)(v8 - v4)) - (float)((float)(v12 - v4) * (float)(v7 - *a3));
      if (v15 >= 0.0)
      {
        BOOL result = 0;
        if (v15 <= v14)
        {
          float v16 = (float)((float)(v7 - v11) * (float)(v12 - v5)) - (float)((float)(v8 - v12) * v13);
          if (v16 >= 0.0 && v16 <= v14) {
            return (float)((float)(v9 + v15) + v16) <= v14;
          }
        }
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::Edge2DIntersects(float *a1, float *a2, float *a3, float *a4, double *a5, double *a6)
{
  float v6 = a1[1];
  float v7 = *a2 - *a1;
  float v8 = a2[1] - v6;
  float v9 = a4[1];
  float v10 = a3[1];
  float v11 = *a4 - *a3;
  float v12 = v9 - v10;
  double v13 = (float)((float)(v7 * (float)(v9 - v10)) - (float)(v8 * v11));
  float v14 = *a3 - *a1;
  float v15 = v10 - v6;
  double v16 = *a5;
  double v17 = *a6 * *a6;
  double v18 = (float)((float)(v8 * v8) + (float)(v7 * v7));
  if (fabs(v13 / sqrt(fmax(v18 * (float)((float)(v12 * v12) + (float)(v11 * v11)), 1.17549435e-38))) < v17)
  {
    if (fabs((float)((float)(v14 * v8) - (float)(v15 * v7))/ sqrt(fmax(v18 * (float)((float)(v15 * v15) + (float)(v14 * v14)), 1.17549435e-38))) < v17)
    {
      double v19 = v16 * v16;
      float v20 = (float)(v8 * v15) + (float)(v14 * v7);
      if (v20 >= 0.0 && v19 + v18 >= v20) {
        return 4;
      }
      float v21 = (float)(v8 * (float)(v9 - v6)) + (float)((float)(*a4 - *a1) * v7);
      if (v21 >= 0.0 && v19 + v18 >= v21) {
        return 4;
      }
    }
    return 3;
  }
  double v23 = (float)((float)(v14 * v12) - (float)(v15 * v11)) / v13;
  double v24 = (float)((float)(v14 * v8) - (float)(v15 * v7)) / v13;
  double v25 = 1.0 - v16;
  if (v23 > v16 && v23 < v25 && v24 > v16 && v24 < v25) {
    return 0;
  }
  double v29 = -v16;
  BOOL v30 = v23 >= v25;
  if (v23 > v16 + 1.0) {
    BOOL v30 = 0;
  }
  int v32 = v23 <= v16 && v23 >= v29 || v30;
  if (v24 > v16 || v24 < v29)
  {
    if (v24 > v16 + 1.0)
    {
      BOOL v34 = 0;
      goto LABEL_37;
    }
    BOOL v34 = v24 >= 1.0 - v16;
  }
  else
  {
    BOOL v34 = 1;
  }
  if (v32 & v34) {
    return 2;
  }
LABEL_37:
  if (!v32 || (v24 >= v29 ? (BOOL v35 = v24 > v16 + 1.0) : (BOOL v35 = 1), v35))
  {
    if (!v34) {
      return 3;
    }
    double v36 = v16 + 1.0;
    if (v23 < v29 || v23 > v36) {
      return 3;
    }
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, float a3)
{
  float v7 = a3;
  std::vector<float>::vector(__p, (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 2, &v7);
  uint64_t v4 = cv3d::cv::gess::alg::ImplicitLaplacianSmoothing((uint64_t)this, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_24F54A4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
  uint64_t v3 = a2[1] - *a2;
  BOOL v4 = v3 == 4 || (v2 >> 2) == v3 >> 2;
  uint64_t result = v4;
  if (v4) {
    cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(&v6, (v2 >> 2), (v2 >> 2));
  }
  return result;
}

void sub_24F54AF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(&a37);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t)(a3[1] - *a3) >> 2;
  if (v4 == ((*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2))
  {
    uint64_t v5 = a2[1] - *a2;
    if (v5 == 4 || v5 >> 2 == v4) {
      cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(&v8, v4, v4);
    }
  }
  return 0;
}

void sub_24F54B8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(&a39);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, float a3, int a4, int a5)
{
  int v7 = (int)a2;
  float v9 = (char *)this + 104;
  unint64_t v10 = *((void *)this + 14) - *((void *)this + 13);
  unint64_t v11 = (v10 >> 2);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(__p, v11);
  LODWORD(v43[0]) = *((_DWORD *)v9 + 18);
  uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v9 - 12, (unsigned int *)v43);
  float32x4_t v45 = 0uLL;
  if (!v7) {
    goto LABEL_30;
  }
  uint64_t v13 = v12;
  int v14 = 0;
  uint64_t v15 = v10 & 0x3FFFFFFFCLL;
  float v16 = fabsf(a3);
  do
  {
    if (!v15) {
      goto LABEL_29;
    }
    unint64_t v17 = 0;
    do
    {
      int v44 = v17;
      if (a4)
      {
        BOOL is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)this, (uint64_t)&v44);
        char v19 = v16 < 0.000001 || is_boundary;
        if (v19)
        {
LABEL_15:
          uint64_t v24 = *(void *)(v13 + 40);
          if (v17 >= (*(void *)(v13 + 48) - v24) >> 4) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *((_OWORD *)__p[0] + v17) = *(_OWORD *)(v24 + 16 * v17);
          goto LABEL_25;
        }
      }
      else if (v16 < 0.000001)
      {
        goto LABEL_15;
      }
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v43, v9, (unsigned int *)&v44);
      unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v43);
      double v21 = 0.0;
      v22.i32[1] = 0;
      float32x4_t v41 = 0u;
      while (Vertex != -1)
      {
        uint64_t v23 = *(void *)(v13 + 40);
        if (Vertex >= (unint64_t)((*(void *)(v13 + 48) - v23) >> 4))
        {
          int v36 = 182;
          unsigned int v37 = "index < data_.size()";
          unint64_t v38 = "Attribute.h";
          char v39 = "operator[]";
          goto LABEL_34;
        }
        double v21 = v21 + 1.0;
        float32x4_t v41 = vaddq_f32(v41, *(float32x4_t *)(v23 + 16 * Vertex));
        unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v43);
      }
      if (v21 <= 0.0)
      {
        int v36 = 206;
        char v39 = "ExplicitUmbrellaSmoothing";
        unint64_t v38 = "Smooth.cpp";
        unsigned int v37 = "weight > 0.0";
LABEL_34:
        __assert_rtn(v39, v38, v36, v37);
      }
      *(float *)v22.i32 = v21;
      float32x4_t v25 = vdivq_f32(v41, (float32x4_t)vdupq_lane_s32(v22, 0));
      uint64_t v26 = *(void *)(v13 + 40);
      if ((*(void *)(v13 + 48) - v26) >> 4 <= v17) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      float32x4_t v27 = vaddq_f32(vmulq_n_f32(v25, a3), vmulq_n_f32(*(float32x4_t *)(v26 + 16 * v17), 1.0 - a3));
      if (a5)
      {
        float32x4_t v42 = v27;
        cv3d::cv::gess::math::VertexNormal((uint64_t)this, v44, &v45);
        float32x4_t v28 = vmulq_f32(v45, v45);
        v28.i32[3] = 0;
        if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)) <= 0.0)
        {
          float32x4_t v27 = v42;
        }
        else
        {
          uint64_t v29 = *(void *)(v13 + 40);
          if (v17 >= (*(void *)(v13 + 48) - v29) >> 4) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          float32x4_t v30 = *(float32x4_t *)(v29 + 16 * v17);
          float32x4_t v31 = vsubq_f32(v42, v30);
          float32x4_t v32 = vmulq_f32(v45, v31);
          v32.i32[3] = 0;
          float32x4_t v27 = vaddq_f32(v30, vsubq_f32(v31, vmulq_n_f32(v45, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)))));
        }
      }
      *((float32x4_t *)__p[0] + v17) = v27;
LABEL_25:
      ++v17;
    }
    while (v17 != v11);
    unint64_t v33 = 0;
    do
    {
      uint64_t v34 = *(void *)(v13 + 40);
      if (v33 >= (*(void *)(v13 + 48) - v34) >> 4) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_OWORD *)(v34 + 16 * v33) = *((_OWORD *)__p[0] + v33);
      ++v33;
    }
    while (v11 != v33);
LABEL_29:
    ++v14;
  }
  while (v14 != v7);
LABEL_30:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_24F54BD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  uint64_t v5 = a2[1] - *a2;
  uint64_t v6 = (void *)(a1 + 104);
  if (v5 >> 2 != (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2) {
    cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing();
  }
  unint64_t v11 = ((unint64_t)v5 >> 2);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(__p, v11);
  LODWORD(v40[0]) = *(_DWORD *)(a1 + 176);
  uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v40);
  float32x4_t v42 = 0uLL;
  if (a3)
  {
    uint64_t v13 = v12;
    int v14 = 0;
    uint64_t v15 = v5 & 0x3FFFFFFFCLL;
    do
    {
      if (v15)
      {
        unint64_t v16 = 0;
        do
        {
          int v41 = v16;
          if (a4 && cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v41))
          {
            uint64_t v17 = *(void *)(v13 + 40);
            if (v16 >= (*(void *)(v13 + 48) - v17) >> 4) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *((_OWORD *)__p[0] + v16) = *(_OWORD *)(v17 + 16 * v16);
          }
          else
          {
            cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v40, v6, (unsigned int *)&v41);
            unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v40);
            double v19 = 0.0;
            v20.i32[1] = 0;
            float32x4_t v38 = 0u;
            while (Vertex != -1)
            {
              uint64_t v21 = *(void *)(v13 + 40);
              if (Vertex >= (unint64_t)((*(void *)(v13 + 48) - v21) >> 4))
              {
                int v33 = 182;
                uint64_t v34 = "index < data_.size()";
                BOOL v35 = "Attribute.h";
                int v36 = "operator[]";
                goto LABEL_31;
              }
              double v19 = v19 + 1.0;
              float32x4_t v38 = vaddq_f32(v38, *(float32x4_t *)(v21 + 16 * Vertex));
              unsigned int Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v40);
            }
            if (v19 <= 0.0)
            {
              int v33 = 260;
              int v36 = "ExplicitUmbrellaSmoothing";
              BOOL v35 = "Smooth.cpp";
              uint64_t v34 = "weight > 0.0";
LABEL_31:
              __assert_rtn(v36, v35, v33, v34);
            }
            *(float *)v20.i32 = v19;
            float32x4_t v22 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(v20, 0));
            uint64_t v23 = *(void *)(v13 + 40);
            if ((*(void *)(v13 + 48) - v23) >> 4 <= v16) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            float32x4_t v24 = vaddq_f32(vmulq_n_f32(v22, *(float *)(*a2 + 4 * v16)), vmulq_n_f32(*(float32x4_t *)(v23 + 16 * v16), 1.0 - *(float *)(*a2 + 4 * v16)));
            if (a5)
            {
              float32x4_t v39 = v24;
              cv3d::cv::gess::math::VertexNormal(a1, v41, &v42);
              float32x4_t v25 = vmulq_f32(v42, v42);
              v25.i32[3] = 0;
              if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)) <= 0.0)
              {
                float32x4_t v24 = v39;
              }
              else
              {
                uint64_t v26 = *(void *)(v13 + 40);
                if (v16 >= (*(void *)(v13 + 48) - v26) >> 4) {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                float32x4_t v27 = *(float32x4_t *)(v26 + 16 * v16);
                float32x4_t v28 = vsubq_f32(v39, v27);
                float32x4_t v29 = vmulq_f32(v42, v28);
                v29.i32[3] = 0;
                float32x4_t v24 = vaddq_f32(v27, vsubq_f32(v28, vmulq_n_f32(v42, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)))));
              }
            }
            *((float32x4_t *)__p[0] + v16) = v24;
          }
          ++v16;
        }
        while (v16 != v11);
        unint64_t v30 = 0;
        do
        {
          uint64_t v31 = *(void *)(v13 + 40);
          if (v30 >= (*(void *)(v13 + 48) - v31) >> 4) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(_OWORD *)(v31 + 16 * v30) = *((_OWORD *)__p[0] + v30);
          ++v30;
        }
        while (v11 != v30);
      }
      ++v14;
    }
    while (v14 != a3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_24F54C118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::FillAllHoles(uint64_t a1, float *a2)
{
  cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox((cv3d::cv::gess::alg *)a1, v86);
  float32x4_t v72 = v86[1];
  float32x4_t v73 = v86[0];
  float v4 = *a2;
  uint64_t v75 = *(void *)(a1 + 160);
  uint64_t v76 = (uint64_t)a2;
  uint64_t v74 = *(void *)(a1 + 152);
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  unint64_t v5 = -858993459 * ((*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(v82, v5, (unsigned __int8 *)&__p);
  if (v5)
  {
    unint64_t v6 = 0;
    float32x4_t v7 = vsubq_f32(v72, v73);
    float32x4_t v8 = vmulq_f32(v7, v7);
    v8.i32[3] = 0;
    float v9 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8))) * v4;
    do
    {
      unint64_t v10 = v6 >> 6;
      uint64_t v11 = 1 << v6;
      if ((*((void *)v82[0] + (v6 >> 6)) & (1 << v6)) == 0)
      {
        uint64_t v12 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v6);
        if ((*v12 & v13) != 0)
        {
          long long __p = 0uLL;
          uint64_t v81 = 0;
          std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::push_back[abi:ne180100](&v83, (uint64_t)&__p);
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          unsigned int v14 = 0;
          uint64_t v15 = (char **)(v84 - 24);
          LODWORD(__p) = v6;
          unint64_t v16 = (char **)(v84 - 16);
          uint64_t v17 = (void *)(v84 - 8);
          float v18 = 0.0;
          do
          {
            float v19 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength(a1, (unsigned int *)&__p);
            int v20 = __p;
            unint64_t v21 = (unint64_t)__p >> 6;
            uint64_t v22 = *((void *)v82[0] + v21);
            if (((1 << __p) & v22) != 0) {
              __assert_rtn("FillAllHoles", "FillHole.cpp", 47, "edge_iterated[curr_bhe.Index()] == false");
            }
            float v23 = v19;
            *((void *)v82[0] + v21) = (1 << __p) | v22;
            float32x4_t v24 = *v16;
            if ((unint64_t)*v16 >= *v17)
            {
              uint64_t v26 = (v24 - *v15) >> 2;
              if ((unint64_t)(v26 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v27 = *v17 - (void)*v15;
              uint64_t v28 = v27 >> 1;
              if (v27 >> 1 <= (unint64_t)(v26 + 1)) {
                uint64_t v28 = v26 + 1;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v28;
              }
              if (v29)
              {
                unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v17, v29);
                int v20 = __p;
              }
              else
              {
                unint64_t v30 = 0;
              }
              uint64_t v31 = &v30[4 * v26];
              *(_DWORD *)uint64_t v31 = v20;
              float32x4_t v25 = v31 + 4;
              float32x4_t v32 = *v16;
              int v33 = *v15;
              if (*v16 != *v15)
              {
                do
                {
                  int v34 = *((_DWORD *)v32 - 1);
                  v32 -= 4;
                  *((_DWORD *)v31 - 1) = v34;
                  v31 -= 4;
                }
                while (v32 != v33);
                float32x4_t v32 = *v15;
              }
              unsigned int *v15 = v31;
              unsigned int *v16 = v25;
              *uint64_t v17 = &v30[4 * v29];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_DWORD *)float32x4_t v24 = v20;
              float32x4_t v25 = v24 + 4;
            }
            unsigned int *v16 = v25;
            float v18 = v18 + v23;
            ++v14;
            LODWORD(__p) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p) + 8);
          }
          while (v6 != __p);
          if (v18 > v9 || v14 > *(_DWORD *)(v76 + 4))
          {
            uint64_t v36 = v84 - 24;
            BOOL v35 = *(void **)(v84 - 24);
            if (v35)
            {
              *(void *)(v84 - 16) = v35;
              operator delete(v35);
            }
            uint64_t v84 = v36;
          }
        }
        else
        {
          uint64_t v37 = *((void *)v82[0] + v10);
          if ((v37 & v11) != 0) {
            __assert_rtn("FillAllHoles", "FillHole.cpp", 68, "edge_iterated[i] == false");
          }
          *((void *)v82[0] + v10) = v37 | v11;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  uint64_t v38 = v83;
  uint64_t v39 = v76;
  if (v84 != v83)
  {
    uint64_t v40 = 0;
    unsigned int v41 = 1;
    do
    {
      cv3d::cv::gess::alg::FillOneHole(a1, (unsigned int **)(v38 + 24 * v40), v76);
      uint64_t v40 = v41;
      uint64_t v38 = v83;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v84 - v83) >> 3) > v41++);
  }
  if (*(unsigned char *)(v76 + 13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "v:is_on_boundary_loop_fill_hole");
    LOBYTE(v79) = 0;
    int v43 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 8), (uint64_t)&v79, (unsigned __int8 *)&__p);
    LODWORD(v78[0]) = v43;
    if (SHIBYTE(v81) < 0) {
      operator delete((void *)__p);
    }
    if (v43 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "v:is_on_boundary_loop_fill_hole");
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, v78, &__p);
      if (SHIBYTE(v81) < 0) {
        operator delete((void *)__p);
      }
    }
    if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
    {
      unint64_t v44 = 0;
      unsigned int v45 = 1;
      do
      {
        LODWORD(__p) = v78[0];
        uint64_t v46 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)&__p);
        if (*(void *)(v46 + 48) <= v44) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(void *)(*(void *)(v46 + 40) + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v44);
        unint64_t v44 = v45++;
      }
      while (v44 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
    }
    uint64_t v47 = v83;
    uint64_t v48 = v84;
    if (v84 != v83)
    {
      uint64_t v49 = 0;
      unsigned int v50 = 0;
      do
      {
        if (*(void *)(v47 + 24 * v49 + 8) != *(void *)(v47 + 24 * v49))
        {
          unint64_t v51 = 0;
          unsigned int v52 = 1;
          do
          {
            LODWORD(__p) = v78[0];
            uint64_t v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)&__p);
            unint64_t v54 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(*(void *)(v83 + 24 * v49) + 4 * v51))+ 12);
            if (*(void *)(v53 + 48) <= v54) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(void *)(*(void *)(v53 + 40) + ((v54 >> 3) & 0x1FFFFFF8)) |= 1 << v54;
            unint64_t v51 = v52;
            uint64_t v47 = v83;
            ++v52;
          }
          while (v51 < (uint64_t)(*(void *)(v83 + 24 * v49 + 8) - *(void *)(v83 + 24 * v49)) >> 2);
          uint64_t v48 = v84;
        }
        uint64_t v49 = ++v50;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v48 - v47) >> 3) > v50);
    }
    uint64_t v39 = v76;
  }
  cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)a1);
  if (((unint64_t)(v75 - v74) >> 2) < (unint64_t)((uint64_t)(*(void *)(a1 + 160)
                                                                                       - *(void *)(a1 + 152)) >> 2))
  {
    if (*(unsigned char *)(v39 + 13))
    {
      uint64_t v55 = 0;
      unint64_t v56 = (unint64_t)(v75 - v74) >> 2;
      long long __p = 0uLL;
      uint64_t v81 = 0;
      do
      {
        if (v55 >= v81)
        {
          uint64_t v57 = (uint64_t)&v55[-__p] >> 2;
          if ((unint64_t)(v57 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v58 = (uint64_t)&v81[-__p] >> 1;
          if (v58 <= v57 + 1) {
            unint64_t v58 = v57 + 1;
          }
          if ((unint64_t)&v81[-__p] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v58;
          }
          if (v59) {
            unint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v81, v59);
          }
          else {
            unint64_t v60 = 0;
          }
          unint64_t v61 = &v60[4 * v57];
          *(_DWORD *)unint64_t v61 = v56;
          uint64_t v55 = v61 + 4;
          uint64_t v62 = (char *)*((void *)&__p + 1);
          uint64_t v63 = (char *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
            {
              int v64 = *((_DWORD *)v62 - 1);
              v62 -= 4;
              *((_DWORD *)v61 - 1) = v64;
              v61 -= 4;
            }
            while (v62 != v63);
            uint64_t v62 = (char *)__p;
          }
          *(void *)&long long __p = v61;
          *((void *)&__p + 1) = v55;
          uint64_t v81 = &v60[4 * v59];
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v55 = v56;
          v55 += 4;
        }
        *((void *)&__p + 1) = v55;
        unint64_t v56 = (v56 + 1);
      }
      while (v56 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
      cv3d::cv::gess::alg::IsotropicRemeshing(a1, (unsigned int **)&__p, 10, 2, 1.33333333, 0.8, 0.2);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "v:is_on_boundary_loop_fill_hole");
      LOBYTE(v78[0]) = 0;
      unsigned int v65 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 8), (uint64_t)v78, (unsigned __int8 *)&__p);
      unsigned int v79 = v65;
      if (SHIBYTE(v81) < 0) {
        operator delete((void *)__p);
      }
      if (v65 != -1)
      {
        unint64_t v66 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
        LODWORD(v78[0]) = 0;
        std::vector<float>::vector(&__p, v66, v78);
        if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
        {
          unint64_t v67 = 0;
          unsigned int v68 = 0;
          do
          {
            LODWORD(v78[0]) = v65;
            uint64_t v69 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)v78);
            if (*(void *)(v69 + 48) <= v67) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            if ((*(void *)(*(void *)(v69 + 40) + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v67))
            {
              *(_DWORD *)(__p + 4 * v67) = 1061997773;
              unsigned int v77 = v68;
              cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v78, (void *)(a1 + 104), &v77);
              for (unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v78);
                    i != -1;
                    unsigned int i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v78))
              {
                *(_DWORD *)(__p + 4 * i) = 1061997773;
              }
            }
            unint64_t v67 = ++v68;
          }
          while (v68 < (unint64_t)((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2));
        }
        cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(a1, &__p);
        cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 8), &v79);
        unsigned int v79 = -1;
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
    }
    if (!*(_DWORD *)(v39 + 8)) {
      cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a1);
    }
  }
  if (v82[0]) {
    operator delete(v82[0]);
  }
  v82[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
  return 1;
}

void sub_24F54CA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char *__p,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  long long __p = &a31;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::FillOneHole(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8)) {
    return cv3d::cv::gess::internal::FillTargetHoleMinimumWeight(a1, a2);
  }
  else {
    return cv3d::cv::gess::internal::FillTargetHoleEar<cv3d::cv::gess::internal::MinimumWeightEar>(a1, a2);
  }
}

BOOL cv3d::cv::gess::alg::QEMSimplify(cv3d::cv::gess::mesh::PolyMesh *a1, int *a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[3] = 0;
  BOOL v2 = cv3d::cv::gess::alg::QuadricErrorMetricSimplify(a1, a2, (uint64_t)v4);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v4);
  return v2;
}

void sub_24F54CB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::QuadricErrorMetricSimplify(cv3d::cv::gess::mesh::PolyMesh *a1, int *a2, uint64_t a3)
{
  v11[32] = *MEMORY[0x263EF8340];
  __int16 v9 = 0;
  char v7 = *((unsigned char *)a2 + 5);
  int v8 = a2[2];
  int v6 = *a2;
  cv3d::cv::gess::internal::Simplify::Simplify(v10, a1, &v6);
  if (*(void *)(a3 + 24)) {
    std::function<BOOL ()(void)>::operator=(v11, a3);
  }
  cv3d::cv::gess::internal::Simplify::Calculate((cv3d::cv::gess::internal::Simplify *)v10);
  cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)v10);
  return cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(a1);
}

void sub_24F54CC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x24F54CBE4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::QEMSimplify()
{
  return 0;
}

BOOL cv3d::cv::gess::alg::GPUEncountersError(cv3d::cv::gess::alg *this, NSError *a2)
{
  BOOL v2 = this;
  uint64_t v3 = v2;
  BOOL v4 = v2 && [(cv3d::cv::gess::alg *)v2 code];

  return v4;
}

void sub_24F54CCA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::MPSRaytracingSupported(cv3d::cv::gess::alg *this)
{
  v8[1] = *MEMORY[0x263EF8340];
  BOOL v2 = (void *)MEMORY[0x25335EE00]();
  id v3 = MTLCreateSystemDefaultDevice();
  v8[0] = v3;
  BOOL v4 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:1];

  if ([v4 count] <= (unint64_t)this)
  {
    uint64_t v6 = 0;
  }
  else
  {
    unint64_t v5 = [v4 objectAtIndexedSubscript:this];
    uint64_t v6 = [v5 supportsRaytracing];
  }
  return v6;
}

void sub_24F54CD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::MultipleBufferComponent::MultipleBufferComponent(cv3d::cv::gess::alg::MultipleBufferComponent *this, const cv3d::cv::gess::alg::MPSMeshIntersector *a2, uint64_t a3, uint64_t a4)
{
  *(void *)this = 0;
  MEMORY[0x25335EE00]();
  *((void *)this + 2) = a4;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = a3;
  operator new();
}

void sub_24F54D0AC(_Unwind_Exception *exception_object)
{
  id v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<cv3d::cv::gess::alg::MultipleBufferComponent::impl>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::MultipleBufferComponent::~MultipleBufferComponent(void ***this)
{
  BOOL v2 = (void *)MEMORY[0x25335EE00]();
  BOOL v4 = *this + 2;
  id v3 = (void *)*v4;
  if ((void *)*v4 != (*this)[1])
  {
    unint64_t v5 = 0;
    id v3 = (*this)[1];
    do
    {
      uint64_t v6 = (void *)v3[v5];
      v3[v5] = 0;

      ++v5;
      id v3 = (*this)[1];
      char v7 = (*this)[2];
    }
    while (v5 < (v7 - (unsigned char *)v3) >> 3);
    BOOL v4 = *this + 2;
    while (v7 != (unsigned char *)v3)
    {
      int v8 = (void *)*((void *)v7 - 1);
      v7 -= 8;
    }
  }
  *BOOL v4 = v3;
  unint64_t v10 = *this + 5;
  __int16 v9 = (void *)*v10;
  if ((void *)*v10 != (*this)[4])
  {
    unint64_t v11 = 0;
    __int16 v9 = (*this)[4];
    do
    {
      uint64_t v12 = (void *)v9[v11];
      v9[v11] = 0;

      ++v11;
      __int16 v9 = (*this)[4];
      uint64_t v13 = (*this)[5];
    }
    while (v11 < (v13 - (unsigned char *)v9) >> 3);
    unint64_t v10 = *this + 5;
    while (v13 != (unsigned char *)v9)
    {
      unsigned int v14 = (void *)*((void *)v13 - 1);
      v13 -= 8;
    }
  }
  *unint64_t v10 = v9;
  uint64_t v15 = **this;
  **this = 0;

  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  unint64_t v16 = *this;
  *this = 0;
  if (v16) {
    std::default_delete<cv3d::cv::gess::alg::MultipleBufferComponent::impl>::operator()[abi:ne180100]((uint64_t)this, v16);
  }
}

void cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(void *this, const cv3d::cv::gess::mesh::TriMesh *a2)
{
}

void cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(void *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  MEMORY[0x25335EE00]();
  operator new();
}

{
  *a1 = 0;
  a1[1] = 0;
  MEMORY[0x25335EE00]();
  operator new();
}

void sub_24F54DA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  unint64_t v30 = *v21;
  char *v21 = 0;
  if (v30) {
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)v21, v30);
  }
  _Unwind_Resume(a1);
}

void *cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  result[1] = *a2;
  if (*(unsigned char *)(*result + 32))
  {
    id v3 = *(void **)(*result + 48);
    if (v2 >= 3) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = v2;
    }
    return (void *)[v3 setCullMode:v4];
  }
  return result;
}

void sub_24F54E470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  unint64_t v30 = *v21;
  char *v21 = 0;
  if (v30) {
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)v21, v30);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector(void ***this)
{
  uint64_t v2 = (void *)MEMORY[0x25335EE00]();
  [(*this)[2] setPurgeableState:4];
  id v3 = (*this)[2];
  (*this)[2] = 0;

  [(*this)[3] setPurgeableState:4];
  uint64_t v4 = (*this)[3];
  (*this)[3] = 0;

  unint64_t v5 = (*this)[1];
  (*this)[1] = 0;

  uint64_t v6 = **this;
  **this = 0;

  char v7 = (*this)[6];
  (*this)[6] = 0;

  int v8 = (*this)[5];
  (*this)[5] = 0;

  __int16 v9 = (*this)[7];
  (*this)[7] = 0;

  unint64_t v10 = (*this)[8];
  (*this)[8] = 0;

  unint64_t v11 = *this;
  *this = 0;
  if (v11) {
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)this, v11);
  }
}

double cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions(uint64_t a1, double *a2)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::initialized(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  return *((unsigned __int8 *)this + 16);
}

BOOL cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays(uint64_t a1, uint64_t *a2, void *a3)
{
  context = (void *)MEMORY[0x25335EE00]();
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 4);
  uint64_t v38 = (void *)[**(id **)a1 newBufferWithLength:0x5555555555555560 * ((v6 - *a2) >> 4) options:0];
  int v8 = (void *)[**(id **)a1 newBufferWithLength:16 * v7 options:0];
  id v9 = v38;
  uint64_t v10 = [v9 contents];
  if (v6 != v5)
  {
    uint64_t v11 = 0;
    if (v7 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v7;
    }
    uint64_t v13 = *a2;
    uint64_t v14 = v10 + 16;
    do
    {
      uint64_t v15 = v13 + v11;
      int v16 = *(_DWORD *)(v15 + 24);
      *(void *)uint64_t v14 = *(void *)(v15 + 16);
      *(_DWORD *)(v14 + 8) = v16;
      uint64_t v17 = *a2 + v11;
      int v18 = *(_DWORD *)(v17 + 8);
      *(void *)(v14 - 16) = *(void *)v17;
      *(_DWORD *)(v14 - 8) = v18;
      uint64_t v13 = *a2;
      uint64_t v19 = *a2 + v11;
      *(_DWORD *)(v14 - 4) = *(_DWORD *)(v19 + 32);
      *(_DWORD *)(v14 + 12) = *(_DWORD *)(v19 + 36);
      v11 += 48;
      v14 += 32;
      --v12;
    }
    while (v12);
  }
  int v20 = [*(id *)(*(void *)a1 + 8) commandBuffer];
  unint64_t v21 = *(id **)a1;
  if (*(unsigned char *)(*(void *)a1 + 32))
  {
    uint64_t v22 = (cv3d::cv::gess::util::os *)[v21[6] encodeIntersectionToCommandBuffer:v20 intersectionType:*(_DWORD *)(a1 + 12) == 1 rayBuffer:v9 rayBufferOffset:0 intersectionBuffer:v8 intersectionBufferOffset:0 rayCount:v7 accelerationStructure:v21[5]];
  }
  else
  {
    uint64_t v23 = *(int *)(a1 + 8);
    if (*(_DWORD *)(a1 + 12) == 1) {
      int v24 = 1;
    }
    else {
      int v24 = 2;
    }
    int v46 = v24;
    if (v23 > 2) {
      int v25 = 5;
    }
    else {
      int v25 = dword_24F578ED8[v23];
    }
    int v45 = v25;
    unint64_t v26 = [v21[8] maxTotalThreadsPerThreadgroup];
    if (v26 >= v7) {
      unint64_t v27 = v7;
    }
    else {
      unint64_t v27 = v26;
    }
    uint64_t v28 = [v20 computeCommandEncoder];
    [v28 setBuffer:v9 offset:0 atIndex:0];
    [v28 setBuffer:v8 offset:0 atIndex:1];
    [v28 setAccelerationStructure:*(void *)(*(void *)a1 + 56) atBufferIndex:2];
    [v28 useResource:*(void *)(*(void *)a1 + 56) usage:1];
    [v28 setBytes:&v46 length:4 atIndex:3];
    [v28 setBytes:&v45 length:4 atIndex:4];
    [v28 setComputePipelineState:*(void *)(*(void *)a1 + 64)];
    unint64_t v43 = v7;
    int64x2_t v44 = vdupq_n_s64(1uLL);
    unint64_t v41 = v27;
    int64x2_t v42 = v44;
    [v28 dispatchThreads:&v43 threadsPerThreadgroup:&v41];
    [v28 endEncoding];
  }
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v22);
  [v20 commit];
  [v20 waitUntilCompleted];
  unint64_t v29 = [v20 error];
  BOOL v31 = cv3d::cv::gess::alg::GPUEncountersError(v29, v30);

  id v32 = v8;
  uint64_t v33 = [v32 contents];
  if (v6 != v5)
  {
    if (v7 <= 1) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = v7;
    }
    BOOL v35 = (_DWORD *)(*a3 + 8);
    uint64_t v36 = v33 + 8;
    do
    {
      *(v35 - 2) = *(_DWORD *)(v36 - 8);
      *(v35 - 1) = *(_DWORD *)(v36 - 4);
      _DWORD *v35 = *(void *)v36;
      v35[1] = *(_DWORD *)(v36 + 4);
      v35 += 4;
      v36 += 16;
      --v34;
    }
    while (v34);
  }

  return !v31;
}

void sub_24F54EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::MPSMeshIntersector::intersectRay(uint64_t a1, long long *a2, _DWORD *a3)
{
  long long v10 = a2[1];
  long long v11 = *a2;
  uint64_t v5 = *((void *)a2 + 4);
  uint64_t v6 = operator new(0x30uLL);
  v13[1] = (uint64_t)(v6 + 3);
  v13[2] = (uint64_t)(v6 + 3);
  *uint64_t v6 = v11;
  v6[1] = v10;
  *((void *)v6 + 4) = v5;
  v13[0] = (uint64_t)v6;
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, 1uLL);
  BOOL v7 = cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays(a1, v13, __p);
  int v8 = __p[0];
  *a3 = *(_DWORD *)__p[0];
  a3[1] = v8[1];
  a3[2] = v8[2];
  a3[3] = v8[3];
  __p[1] = v8;
  operator delete(v8);
  operator delete(v6);
  return v7;
}

void sub_24F54EB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::intersectRaysMultipleBuffer(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  v56[4] = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x25335EE00]();
  dispatch_semaphore_wait(**(dispatch_semaphore_t **)a2, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v10 = *(void *)(a2 + 24);
  long long v11 = *(dispatch_semaphore_t **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4) >= *(void *)(a2 + 16)) {
    unint64_t v12 = *(void *)(a2 + 16);
  }
  else {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4);
  }
  *(void *)(a2 + 24) = (unint64_t)(v10 + 1) % *(void *)(a2 + 8);
  uint64_t v13 = [(objc_class *)v11[1][v10].isa contents];
  if (v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a3;
    uint64_t v16 = v13 + 16;
    unint64_t v17 = v12;
    do
    {
      uint64_t v18 = v15 + v14;
      int v19 = *(_DWORD *)(v18 + 24);
      *(void *)uint64_t v16 = *(void *)(v18 + 16);
      *(_DWORD *)(v16 + 8) = v19;
      uint64_t v20 = *a3 + v14;
      int v21 = *(_DWORD *)(v20 + 8);
      *(void *)(v16 - 16) = *(void *)v20;
      *(_DWORD *)(v16 - 8) = v21;
      uint64_t v15 = *a3;
      uint64_t v22 = *a3 + v14;
      *(_DWORD *)(v16 - 4) = *(_DWORD *)(v22 + 32);
      *(_DWORD *)(v16 + 12) = *(_DWORD *)(v22 + 36);
      v14 += 48;
      v16 += 32;
      --v17;
    }
    while (v17);
  }
  uint64_t v23 = [*(id *)(*(void *)a1 + 8) commandBuffer];
  if ((a5 & 1) == 0)
  {
    long long __p = 0;
    p_p = &__p;
    uint64_t v51 = 0x3032000000;
    unsigned int v52 = __Block_byref_object_copy_;
    uint64_t v53 = __Block_byref_object_dispose_;
    id v54 = **(id **)a2;
    v47[0] = 0;
    v47[1] = v47;
    v47[2] = 0x3032000000;
    v47[3] = __Block_byref_object_copy_;
    v47[4] = __Block_byref_object_dispose_;
    id v48 = *(id *)(*(void *)(*(void *)a2 + 32) + 8 * v10);
    v46[0] = 0;
    v46[1] = v46;
    v46[2] = 0x2020000000;
    v46[3] = v12;
    v55[0] = MEMORY[0x263EF8330];
    v55[1] = 3321888768;
    v55[2] = ___ZN4cv3d2cv4gess3alg18MPSMeshIntersector27intersectRaysMultipleBufferERNS2_23MultipleBufferComponentERKNSt3__16vectorINS1_4math4RayTIfEENS6_9allocatorISA_EEEENS6_8functionIFvRKNS7_INS8_16RayIntersectionTIfjEENSB_ISI_EEEEEEEb_block_invoke;
    void v55[3] = &unk_2700D9400;
    v55[4] = &__p;
    v55[5] = v47;
    v55[6] = v46;
    std::__function::__value_func<void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::__value_func[abi:ne180100]((uint64_t)v56, a4);
    [v23 addCompletedHandler:v55];
    std::__function::__value_func<void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::~__value_func[abi:ne180100](v56);
    _Block_object_dispose(v46, 8);
    _Block_object_dispose(v47, 8);

    _Block_object_dispose(&__p, 8);
  }
  uint64_t v24 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 32))
  {
    int v25 = (cv3d::cv::gess::util::os *)objc_msgSend(*(id *)(v24 + 48), "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v23, a1[3] == 1, *(void *)(*(void *)(*(void *)a2 + 8) + 8 * v10), 0, *(void *)(*(void *)(*(void *)a2 + 32) + 8 * v10), 0, v12, *(void *)(v24 + 40), context);
  }
  else
  {
    uint64_t v26 = a1[2];
    if (a1[3] == 1) {
      int v27 = 1;
    }
    else {
      int v27 = 2;
    }
    LODWORD(__p) = v27;
    if (v26 > 2) {
      int v28 = 5;
    }
    else {
      int v28 = dword_24F578ED8[v26];
    }
    LODWORD(v47[0]) = v28;
    unint64_t v29 = [*(id *)(v24 + 64) maxTotalThreadsPerThreadgroup];
    if (v29 >= v12) {
      unint64_t v30 = v12;
    }
    else {
      unint64_t v30 = v29;
    }
    BOOL v31 = [v23 computeCommandEncoder];
    [v31 setBuffer:*(void *)(*(void *)(*(void *)a2 + 8) + 8 * v10) offset:0 atIndex:0];
    [v31 setBuffer:*(void *)(*(void *)(*(void *)a2 + 32) + 8 * v10) offset:0 atIndex:1];
    [v31 setAccelerationStructure:*(void *)(*(void *)a1 + 56) atBufferIndex:2];
    [v31 useResource:*(void *)(*(void *)a1 + 56) usage:1];
    [v31 setBytes:&__p length:4 atIndex:3];
    [v31 setBytes:v47 length:4 atIndex:4];
    [v31 setComputePipelineState:*(void *)(*(void *)a1 + 64)];
    unint64_t v44 = v12;
    int64x2_t v45 = vdupq_n_s64(1uLL);
    unint64_t v42 = v30;
    int64x2_t v43 = v45;
    [v31 dispatchThreads:&v44 threadsPerThreadgroup:&v42];
    [v31 endEncoding];
  }
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v25);
  [v23 commit];
  if (a5)
  {
    [v23 waitUntilCompleted];
    id v32 = [v23 error];
    BOOL v34 = cv3d::cv::gess::alg::GPUEncountersError(v32, v33);

    dispatch_semaphore_signal(**(dispatch_semaphore_t **)a2);
    uint64_t v35 = [*(id *)(*(void *)(*(void *)a2 + 32) + 8 * v10) contents];
    std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(&__p, v12);
    if (v12)
    {
      uint64_t v36 = (char *)__p + 8;
      uint64_t v37 = v35 + 8;
      do
      {
        *(v36 - 2) = *(_DWORD *)(v37 - 8);
        *(v36 - 1) = *(_DWORD *)(v37 - 4);
        *uint64_t v36 = *(void *)v37;
        v36[1] = *(_DWORD *)(v37 + 4);
        v36 += 4;
        v37 += 16;
        --v12;
      }
      while (v12);
    }
    uint64_t v38 = *(void *)(a4 + 24);
    if (!v38) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v38 + 48))(v38, &__p);
    uint64_t v39 = !v34;
    if (__p)
    {
      p_p = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v39 = 1;
  }

  return v39;
}

void sub_24F54F108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZN4cv3d2cv4gess3alg18MPSMeshIntersector27intersectRaysMultipleBufferERNS2_23MultipleBufferComponentERKNSt3__16vectorINS1_4math4RayTIfEENS6_9allocatorISA_EEEENS6_8functionIFvRKNS7_INS8_16RayIntersectionTIfjEENSB_ISI_EEEEEEEb_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1[4] + 8) + 40));
  uint64_t v4 = [*(id *)(*(void *)(a1[5] + 8) + 40) contents];
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, *(void *)(*(void *)(a1[6] + 8) + 24));
  if (*(void *)(*(void *)(a1[6] + 8) + 24))
  {
    unint64_t v5 = 0;
    uint64_t v6 = (char *)__p[0] + 8;
    uint64_t v7 = v4 + 8;
    do
    {
      *(v6 - 2) = *(_DWORD *)(v7 - 8);
      *(v6 - 1) = *(_DWORD *)(v7 - 4);
      *uint64_t v6 = *(void *)v7;
      v6[1] = *(_DWORD *)(v7 + 4);
      ++v5;
      v6 += 4;
      v7 += 16;
    }
    while (v5 < *(void *)(*(void *)(a1[6] + 8) + 24));
  }
  uint64_t v8 = a1[10];
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 48))(v8, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24F54F2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c102_ZTSNSt3__18functionIFvRKNS_6vectorIN4cv3d2cv4gess4math16RayIntersectionTIfjEENS_9allocatorIS7_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void *__destroy_helper_block_ea8_56c102_ZTSNSt3__18functionIFvRKNS_6vectorIN4cv3d2cv4gess4math16RayIntersectionTIfjEENS_9allocatorIS7_EEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  return **(void **)this;
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMTLAccelerationStructureInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  if (*(unsigned char *)(*(void *)this + 32)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)this + 56);
  }
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMPSRayIntersectorInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  if (*(unsigned char *)(*(void *)this + 32)) {
    return *(void *)(*(void *)this + 48);
  }
  else {
    return 0;
  }
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMPSTriangleAccelerationStructureInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  if (*(unsigned char *)(*(void *)this + 32)) {
    return *(void *)(*(void *)this + 40);
  }
  else {
    return 0;
  }
}

void cv3d::cv::gess::alg::RayCast()
{
  v0[8] = *MEMORY[0x263EF8340];
  v0[3] = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(v0);
}

void sub_24F54F46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  id v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__append(a1, a2 - v2);
  }
}

uint64_t std::__split_buffer<objc_object  {objcproto9MTLBuffer}* {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = &v7[2 * a2];
      do
      {
        void *v7 = -1082130432;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = (uint64_t)v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v21 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = &v13[16 * v10];
    long long __p = v13;
    uint64_t v18 = v15;
    uint64_t v20 = &v13[16 * v12];
    uint64_t v16 = &v15[16 * a2];
    do
    {
      *(void *)uint64_t v15 = -1082130432;
      *((void *)v15 + 1) = 0;
      v15 += 16;
    }
    while (v15 != v16);
    int v19 = v16;
    std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__swap_out_circular_buffer(a1, &__p);
    if (v19 != v18) {
      v19 += (v18 - v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F54F648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 16);
    v2 -= 16;
    *(void *)(v4 - 16) = v5;
    v4 -= 16;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *double result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::default_delete<cv3d::cv::gess::alg::MultipleBufferComponent::impl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v4 = a2 + 4;
    std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = a2 + 1;
    std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v4);

    return MEMORY[0x25335EA10](a2, 0x80C40C96DFCA5);
  }
  return result;
}

void std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x25335EA10);
  }
}

uint64_t std::__function::__value_func<void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_2700D9440;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D9440;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *a3;
  unint64_t v6 = *a3 - *a2;
  if (v6 >= 0x40000) {
    unint64_t v7 = 0x40000;
  }
  else {
    unint64_t v7 = *a3 - *a2;
  }
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v21, v7);
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, v7);
  if (v5 > v4)
  {
    uint64_t v8 = 48 * v4;
    uint64_t v9 = 16 * v4;
    unint64_t v10 = v6;
    do
    {
      if (v10 >= v6) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x40000) {
        uint64_t v12 = 0x40000;
      }
      else {
        uint64_t v12 = v11;
      }
      if (v5 - v4 >= v7) {
        unint64_t v13 = v7;
      }
      else {
        unint64_t v13 = v5 - v4;
      }
      if (v7 > v5 - v4)
      {
        std::vector<cv3d::cv::gess::math::RayT<float>>::resize((uint64_t *)&v21, v13);
        std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::resize((uint64_t *)__p, 0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)v21) >> 4));
      }
      if (v13)
      {
        uint64_t v14 = 0;
        do
        {
          uint64_t v15 = **(void **)(a1 + 8) + v8 + v14;
          uint64_t v16 = (char *)v21 + v14;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)v15;
          *((_OWORD *)v16 + 1) = *(_OWORD *)(v15 + 16);
          *((void *)v16 + 4) = *(void *)(v15 + 32);
          v14 += 48;
        }
        while (48 * v12 != v14);
      }
      cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays(*(void *)(a1 + 24), (uint64_t *)&v21, __p);
      if (v13)
      {
        uint64_t v17 = 0;
        do
        {
          uint64_t v18 = (char *)__p[0] + v17;
          uint64_t v19 = **(void **)(a1 + 16) + v9 + v17;
          *(void *)uint64_t v19 = *(void *)((char *)__p[0] + v17);
          *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
          *(_DWORD *)(v19 + 12) = *((_DWORD *)v18 + 3);
          v17 += 16;
        }
        while (16 * v12 != v17);
      }
      v4 += v7;
      v10 -= v7;
      v8 += 48 * v7;
      v9 += 16 * v7;
    }
    while (v4 < v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
}

void sub_24F54FB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::Parameterize(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v293 = *MEMORY[0x263EF8340];
  v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  float v7 = cosf(*a2);
  cv3d::cv::gess::mesh::PolyMesh::ComputeFaceNormal((uint64_t **)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
  long long v290 = 0uLL;
  v250 = (uint64_t **)(a1 + 56);
  unsigned int v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v290, (unsigned __int8 *)__p);
  unsigned int v286 = v8;
  if (SBYTE7(v288) < 0)
  {
    operator delete(__p[0]);
    unsigned int v8 = v286;
  }
  if (v8 == -1) {
    cv3d::cv::gess::alg::Parameterize();
  }
  uint64_t v9 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  unint64_t __n = v9;
  std::vector<std::pair<cv3d::cv::gess::mesh::FaceHandle,float>>::vector(&v284, v9);
  unsigned int v251 = v9;
  if (v9)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    do
    {
      LODWORD(__p[0]) = v10;
      float v12 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)__p);
      unint64_t v13 = (float *)((char *)v284 + v11);
      float *v13 = *(float *)__p;
      v13[1] = v12;
      v11 += 8;
      ++v10;
    }
    while (8 * __n != v11);
  }
  unint64_t v14 = 126 - 2 * __clz((v285 - (unsigned char *)v284) >> 3);
  if (v285 == v284) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>((unint64_t)v284, (unint64_t)v285, v15, 1);
  v281 = 0;
  v282 = 0;
  v283 = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::reserve(&v281, 0x32uLL);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v279, __n, (unsigned __int8 *)__p);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
  v248 = a2;
  uint64_t v249 = a3;
  memset(&v278, 0, sizeof(v278));
  std::vector<unsigned int>::reserve(&v278, (unint64_t)((double)__n * 0.5));
  if (__n)
  {
    unint64_t v16 = 0;
    do
    {
      if ((*(void *)((char *)v279 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16))
      {
        ++v16;
      }
      else
      {
        v278.__end_ = v278.__begin_;
        uint64_t v17 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v286, *((_DWORD *)v284 + 2 * v16));
        float v259 = *((float *)v284 + 2 * v16 + 1);
        float32x4_t v255 = *v17;
        std::vector<int>::pointer end = v278.__end_;
        if (v278.__end_ >= v278.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v278.__begin_;
          int64_t v21 = v278.__end_ - v278.__begin_;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          int64_t v23 = (char *)v278.__end_cap_.__value_ - (char *)v278.__begin_;
          if (((char *)v278.__end_cap_.__value_ - (char *)v278.__begin_) >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v278.__end_cap_, v24);
            std::vector<int>::pointer begin = v278.__begin_;
            std::vector<int>::pointer end = v278.__end_;
          }
          else
          {
            int v25 = 0;
          }
          uint64_t v26 = (int *)&v25[4 * v21];
          *uint64_t v26 = v16;
          uint64_t v19 = v26 + 1;
          while (end != begin)
          {
            int v27 = *--end;
            *--uint64_t v26 = v27;
          }
          v278.__begin_ = v26;
          v278.__end_ = v19;
          v278.__end_cap_.__value_ = (int *)&v25[4 * v24];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v278.__end_ = v16;
          uint64_t v19 = end + 1;
        }
        float32x4_t v256 = vaddq_f32(vmulq_n_f32(v255, v259), (float32x4_t)0);
        v278.__end_ = v19;
        ++v16;
        int v28 = v284;
        for (unint64_t i = v16; i < (v285 - (unsigned char *)v28) >> 3; ++i)
        {
          unint64_t v30 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v286, v28[2 * i]);
          float32x4_t v260 = *v30;
          float32x4_t v31 = vmulq_f32(*v30, *v17);
          v31.i32[3] = 0;
          int v28 = v284;
          if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31)) > v7)
          {
            float v253 = *((float *)v284 + 2 * i + 1);
            std::vector<int>::pointer v32 = v278.__end_;
            if (v278.__end_ >= v278.__end_cap_.__value_)
            {
              std::vector<int>::pointer v34 = v278.__begin_;
              int64_t v35 = v278.__end_ - v278.__begin_;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              int64_t v37 = (char *)v278.__end_cap_.__value_ - (char *)v278.__begin_;
              if (((char *)v278.__end_cap_.__value_ - (char *)v278.__begin_) >> 1 > v36) {
                unint64_t v36 = v37 >> 1;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v278.__end_cap_, v38);
                std::vector<int>::pointer v34 = v278.__begin_;
                std::vector<int>::pointer v32 = v278.__end_;
              }
              else
              {
                uint64_t v39 = 0;
              }
              uint64_t v40 = (int *)&v39[4 * v35];
              *uint64_t v40 = i;
              uint64_t v33 = v40 + 1;
              while (v32 != v34)
              {
                int v41 = *--v32;
                *--uint64_t v40 = v41;
              }
              v278.__begin_ = v40;
              v278.__end_ = v33;
              v278.__end_cap_.__value_ = (int *)&v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *v278.__end_ = i;
              uint64_t v33 = v32 + 1;
            }
            float32x4_t v256 = vaddq_f32(v256, vmulq_n_f32(v260, v253));
            v278.__end_ = v33;
            int v28 = v284;
          }
        }
        float32x4_t v42 = vmulq_f32(v256, v256);
        v42.i32[3] = 0;
        v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
        v42.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v42.f32));
        float32x4_t v43 = vdivq_f32(v256, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0));
        unint64_t v44 = v282;
        float32x4_t v261 = v43;
        if (v282 >= v283)
        {
          uint64_t v46 = ((char *)v282 - (unsigned char *)v281) >> 4;
          if ((unint64_t)(v46 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v47 = ((char *)v283 - (unsigned char *)v281) >> 3;
          if (v47 <= v46 + 1) {
            unint64_t v47 = v46 + 1;
          }
          if ((unint64_t)((char *)v283 - (unsigned char *)v281) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48) {
            uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)&v283, v48);
          }
          else {
            uint64_t v49 = 0;
          }
          unsigned int v50 = (float32x4_t *)&v49[16 * v46];
          *unsigned int v50 = v261;
          int64x2_t v45 = v50 + 1;
          unsigned int v52 = (float32x4_t *)v281;
          uint64_t v51 = v282;
          if (v282 != v281)
          {
            do
            {
              float32x4_t v53 = v51[-1];
              --v51;
              v50[-1] = v53;
              --v50;
            }
            while (v51 != v52);
            uint64_t v51 = (float32x4_t *)v281;
          }
          v281 = v50;
          v282 = v45;
          v283 = (float32x4_t *)&v49[16 * v48];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          float32x4_t *v282 = v43;
          int64x2_t v45 = v44 + 1;
        }
        v282 = v45;
        std::vector<int>::pointer v54 = v278.__begin_;
        std::vector<int>::pointer v55 = v278.__end_;
        while (v54 != v55)
        {
          float32x4_t v56 = vmulq_f32(v261, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v286, *((_DWORD *)v284 + 2 * *v54)));
          v56.i32[3] = 0;
          if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v56, v56)) > v7) {
            *(void *)((char *)v279 + (((unint64_t)*v54 >> 3) & 0x1FFFFFF8)) |= 1 << *v54;
          }
          ++v54;
        }
      }
    }
    while (v16 != __n);
  }
  v285 = v284;
  unint64_t v57 = __n;
  std::vector<unsigned int>::vector(&v277, __n);
  unint64_t v58 = (unint64_t)((char *)v282 - (unsigned char *)v281) >> 4;
  if (__n)
  {
    for (uint64_t j = 0; j != __n; ++j)
    {
      if (v58)
      {
        uint64_t v60 = 0;
        unsigned int v61 = 0;
        float v62 = -3.4028e38;
        do
        {
          uint64_t v63 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v286, j);
          float32x4_t v64 = vmulq_f32(*v63, *((float32x4_t *)v281 + v60));
          v64.i32[3] = 0;
          float v65 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v64, v64));
          if (v65 > v62)
          {
            float v62 = v65;
            unsigned int v61 = v60;
          }
          ++v60;
        }
        while (v58 != v60);
      }
      else
      {
        unsigned int v61 = 0;
      }
      v277.__begin_[j] = v61;
    }
  }
  v274 = 0;
  v275 = 0;
  v276 = 0;
  std::vector<unsigned int>::vector(&v273, __n);
  int v254 = v58;
  unint64_t v257 = v58;
  std::vector<BOOL>::resize((uint64_t)&v279, __n, 0);
  if (v280)
  {
    __p[0] = v279;
    LODWORD(__p[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__p, v280);
  }
  if (__n)
  {
    unint64_t v66 = 0;
    do
    {
      if ((*((void *)v279 + (v66 >> 6)) & (1 << v66)) == 0)
      {
        unint64_t v67 = v275;
        if (v275 >= v276)
        {
          uint64_t v69 = (char *)v274;
          uint64_t v70 = (v275 - (unsigned char *)v274) >> 2;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v72 = v276 - (unsigned char *)v274;
          if ((v276 - (unsigned char *)v274) >> 1 > v71) {
            unint64_t v71 = v72 >> 1;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v276, v73);
            uint64_t v69 = (char *)v274;
            unint64_t v67 = v275;
          }
          else
          {
            uint64_t v74 = 0;
          }
          uint64_t v75 = &v74[4 * v70];
          *(_DWORD *)uint64_t v75 = 1;
          unsigned int v68 = v75 + 4;
          while (v67 != v69)
          {
            int v76 = *((_DWORD *)v67 - 1);
            v67 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          v274 = v75;
          v275 = v68;
          v276 = &v74[4 * v73];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *(_DWORD *)v275 = 1;
          unsigned int v68 = v67 + 4;
        }
        v275 = v68;
        unsigned int v77 = v274;
        long long v288 = 0u;
        long long v289 = 0u;
        *(_OWORD *)long long __p = 0u;
        LODWORD(v290) = v66;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v290);
        uint64_t v78 = ((unint64_t)(v68 - v77) >> 2) - 1;
        *((void *)v279 + (v66 >> 6)) |= 1 << v66;
        v273.__begin_[v66] = v78;
        uint64_t v79 = *((void *)&v289 + 1);
        unint64_t v57 = __n;
        if (*((void *)&v289 + 1))
        {
          unsigned int v80 = v277.__begin_[v66];
          do
          {
            uint64_t v81 = v289;
            LODWORD(v290) = *(_DWORD *)(*(void *)((char *)__p[1]
                                                  + (((unint64_t)v289 >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * (v289 & 0x3FF));
            *(void *)&long long v289 = v289 + 1;
            *((void *)&v289 + 1) = v79 - 1;
            if ((unint64_t)(v81 + 1) >= 0x800)
            {
              operator delete(*(void **)__p[1]);
              __p[1] = (char *)__p[1] + 8;
              *(void *)&long long v289 = v289 - 1024;
            }
            int v82 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v290);
            LODWORD(v270[0]) = v82;
            do
            {
              LODWORD(v270[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v270) + 8);
              uint64_t v83 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v270);
              uint64_t v84 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v83);
              if ((*v84 & v85) == 0)
              {
                long long v86 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v270);
                LODWORD(v266[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v86) + 16);
                if (((*(void *)((char *)v279 + (((unint64_t)LODWORD(v266[0]) >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v266[0])) & 1) == 0
                  && v277.__begin_[LODWORD(v266[0])] == v80)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, v266);
                  uint64_t v87 = LODWORD(v266[0]);
                  *(void *)((char *)v279 + (((unint64_t)LODWORD(v266[0]) >> 3) & 0x1FFFFFF8)) |= 1 << SLOBYTE(v266[0]);
                  v273.__begin_[v87] = v78;
                  ++*((_DWORD *)v274 + v78);
                }
              }
            }
            while (LODWORD(v270[0]) != v82);
            uint64_t v79 = *((void *)&v289 + 1);
          }
          while (*((void *)&v289 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](__p);
      }
      ++v66;
    }
    while (v66 != v57);
    uint64_t v88 = 0;
    do
    {
      if (*((_DWORD *)v274 + v273.__begin_[v88]) == 1)
      {
        std::chrono::system_clock::time_point v89 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v286, v88);
        unsigned int v90 = v277.__begin_[v88];
        LODWORD(__p[0]) = v88;
        int v91 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v91;
        float v92 = 0.0;
        uint64_t v93 = 0xFFFFFFFFLL;
        do
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          int v94 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          std::chrono::system_clock::time_point v95 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v94);
          if ((*v95 & v96) == 0)
          {
            int v97 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            uint64_t v98 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v97);
            uint64_t v99 = *(unsigned int *)(v98 + 16);
            float32x4_t v100 = vmulq_f32(*((float32x4_t *)v281 + v277.__begin_[v99]), *v89);
            v100.i32[3] = 0;
            float v101 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v100, v100));
            if (v101 > v92)
            {
              float v102 = v101 * (float)*((unsigned int *)v274 + v273.__begin_[v99]);
              if (v102 > v7)
              {
                uint64_t v93 = *(unsigned int *)(v98 + 16);
                float v92 = v102;
                unsigned int v90 = v277.__begin_[v99];
              }
            }
          }
        }
        while (LODWORD(__p[0]) != v91);
        if (v277.__begin_[v88] != v90)
        {
          v277.__begin_[v88] = v90;
          std::vector<unsigned int>::pointer v103 = v273.__begin_;
          uint64_t v104 = v274;
          *((_DWORD *)v274 + v273.__begin_[v88]) = 0;
          uint64_t v105 = v103[v93];
          v103[v88] = v105;
          ++v104[v105];
        }
      }
      ++v88;
    }
    while (v88 != v57);
    uint64_t v106 = 0;
    do
    {
      if (*((_DWORD *)v274 + v273.__begin_[v106]) == 2)
      {
        LODWORD(__p[0]) = v106;
        int v107 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v107;
        while (1)
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          unint64_t v108 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          uint64_t v109 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v108);
          if ((*v109 & v110) == 0)
          {
            unsigned int v111 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            signed int v112 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v111) + 16);
            if (v277.__begin_[v112] == v277.__begin_[v106]) {
              break;
            }
          }
          if (LODWORD(__p[0]) == v107) {
            goto LABEL_134;
          }
        }
        if (v112 != -1)
        {
          char v113 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v286, v106);
          std::chrono::system_clock::time_point v114 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v286, v112);
          unsigned int v115 = v277.__begin_[v106];
          LODWORD(v290) = v106;
          uint64_t v116 = v112;
          int v117 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v290);
          LODWORD(__p[0]) = v117;
          float v118 = 0.0;
          uint64_t v262 = 0xFFFFFFFFLL;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            int v119 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            uint64_t v120 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v119);
            if ((*v120 & v121) == 0)
            {
              uint64_t v122 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              uint64_t v123 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v122);
              uint64_t v124 = *(unsigned int *)(v123 + 16);
              uint64_t v125 = v277.__begin_[v124];
              if (v125 != v277.__begin_[v106])
              {
                float32x4_t v126 = *((float32x4_t *)v281 + v125);
                float32x4_t v127 = vmulq_f32(*v113, v126);
                v127.i32[3] = 0;
                float v128 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v127, v127));
                float32x4_t v129 = vmulq_f32(v126, *v114);
                v129.i32[3] = 0;
                float v130 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v129, v129));
                if (v128 > v7 && v130 > v7)
                {
                  float v132 = (float)(v128 + v130) * (float)*((unsigned int *)v274 + v273.__begin_[v124]);
                  if (v132 > v118)
                  {
                    uint64_t v262 = *(unsigned int *)(v123 + 16);
                    unsigned int v115 = v277.__begin_[v124];
                    float v118 = v132;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v117);
          LODWORD(v290) = v112;
          int v133 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v290);
          LODWORD(__p[0]) = v133;
          uint64_t v134 = v262;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            uint64_t v135 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            int v136 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v135);
            if ((*v136 & v137) == 0)
            {
              v138 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              uint64_t v139 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v138);
              uint64_t v140 = *(unsigned int *)(v139 + 16);
              uint64_t v141 = v277.__begin_[v140];
              if (v141 != v277.__begin_[v116])
              {
                float32x4_t v142 = *((float32x4_t *)v281 + v141);
                float32x4_t v143 = vmulq_f32(*v113, v142);
                v143.i32[3] = 0;
                float v144 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v143, v143));
                float32x4_t v145 = vmulq_f32(v142, *v114);
                v145.i32[3] = 0;
                float v146 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v145, v145));
                if (v144 > v7 && v146 > v7)
                {
                  float v148 = (float)(v144 + v146) * (float)*((unsigned int *)v274 + v273.__begin_[v140]);
                  if (v148 > v118)
                  {
                    uint64_t v134 = *(unsigned int *)(v139 + 16);
                    unsigned int v115 = v277.__begin_[v140];
                    float v118 = v148;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v133);
          std::vector<unsigned int>::pointer v149 = v277.__begin_;
          if (v277.__begin_[v106] != v115 && v277.__begin_[v116] != v115)
          {
            v277.__begin_[v116] = v115;
            v149[v106] = v115;
            std::vector<unsigned int>::pointer v150 = v273.__begin_;
            uint64_t v151 = v274;
            *((_DWORD *)v274 + v273.__begin_[v106]) = 0;
            uint64_t v152 = v150[v134];
            v150[v116] = v152;
            v150[v106] = v152;
            v151[v152] += 2;
          }
        }
      }
LABEL_134:
      ++v106;
    }
    while (v106 != v57);
  }
  unsigned int v271 = -1;
  unsigned int v272 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  BOOL v153 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v272, (unsigned __int8 *)__p);
  BOOL v154 = v153;
  if (SBYTE7(v288) < 0)
  {
    operator delete(__p[0]);
    if (v154) {
      goto LABEL_162;
    }
LABEL_164:
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a1, &v272, (long long *)__p);
    if (SBYTE7(v288) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_166;
  }
  if (!v153) {
    goto LABEL_164;
  }
LABEL_162:
  LODWORD(__p[0]) = v272;
  uint64_t v155 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)__p);
  (*(void (**)(uint64_t))(*(void *)v155 + 40))(v155);
LABEL_166:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v290) = 0;
  unsigned int v156 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(v250, (uint64_t)&v290, (unsigned __int8 *)__p);
  unsigned int v271 = v156;
  if (SBYTE7(v288) < 0) {
    operator delete(__p[0]);
  }
  if (v156 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v271, (long long *)__p);
    if (SBYTE7(v288) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v280)
  {
    __p[0] = v279;
    LODWORD(__p[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__p, v280);
  }
  if (v57)
  {
    unint64_t v157 = 0;
    char v158 = (uint64_t *)(a1 + 80);
    do
    {
      if ((*((void *)v279 + (v157 >> 6)) & (1 << v157)) == 0)
      {
        LODWORD(__p[0]) = v272;
        uint64_t v159 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v158, (unsigned int *)__p);
        (*(void (**)(uint64_t))(*(void *)v159 + 48))(v159);
        LODWORD(__p[0]) = v272;
        uint64_t v160 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v158, (unsigned int *)__p);
        unsigned int v161 = (*(uint64_t (**)(uint64_t))(*(void *)v160 + 16))(v160) - 1;
        std::to_string((std::string *)__p, v161);
        uint64_t v162 = std::string::insert((std::string *)__p, 0, "g", 1uLL);
        std::string::size_type v163 = v162->__r_.__value_.__r.__words[0];
        *(void *)&long long v290 = v162->__r_.__value_.__l.__size_;
        *(void *)((char *)&v290 + 7) = *(std::string::size_type *)((char *)&v162->__r_.__value_.__r.__words[1] + 7);
        char v164 = HIBYTE(v162->__r_.__value_.__r.__words[2]);
        v162->__r_.__value_.__l.__size_ = 0;
        v162->__r_.__value_.__r.__words[2] = 0;
        v162->__r_.__value_.__r.__words[0] = 0;
        uint64_t v165 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(a1, v272, v161);
        uint64_t v166 = v165;
        if (*(char *)(v165 + 23) < 0) {
          operator delete(*(void **)v165);
        }
        *(void *)uint64_t v166 = v163;
        *(void *)(v166 + 8) = v290;
        *(void *)(v166 + 15) = *(void *)((char *)&v290 + 7);
        *(unsigned char *)(v166 + 23) = v164;
        if (SBYTE7(v288) < 0) {
          operator delete(__p[0]);
        }
        long long v288 = 0u;
        long long v289 = 0u;
        *(_OWORD *)long long __p = 0u;
        LODWORD(v290) = v157;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v290);
        unint64_t v57 = __n;
        *((void *)v279 + (v157 >> 6)) |= 1 << v157;
        uint64_t v167 = *((void *)&v289 + 1);
        if (*((void *)&v289 + 1))
        {
          unsigned int v168 = v277.__begin_[v157];
          do
          {
            uint64_t v169 = v289;
            unsigned int v170 = *(_DWORD *)(*(void *)((char *)__p[1] + (((unint64_t)v289 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v289 & 0x3FF));
            LODWORD(v290) = v170;
            *(void *)&long long v289 = v289 + 1;
            *((void *)&v289 + 1) = v167 - 1;
            if ((unint64_t)(v169 + 1) >= 0x800)
            {
              operator delete(*(void **)__p[1]);
              __p[1] = (char *)__p[1] + 8;
              *(void *)&long long v289 = v289 - 1024;
              unsigned int v170 = v290;
            }
            *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v271, v170) = v161;
            int v171 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v290);
            LODWORD(v270[0]) = v171;
            do
            {
              LODWORD(v270[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v270) + 8);
              int v172 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v270);
              char v173 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v172);
              if ((*v173 & v174) == 0)
              {
                uint64_t v175 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v270);
                LODWORD(v266[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v175) + 16);
                if (((*(void *)((char *)v279 + (((unint64_t)LODWORD(v266[0]) >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v266[0])) & 1) == 0
                  && v277.__begin_[LODWORD(v266[0])] == v168)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, v266);
                  *(void *)((char *)v279 + (((unint64_t)LODWORD(v266[0]) >> 3) & 0x1FFFFFF8)) |= 1 << SLOBYTE(v266[0]);
                }
              }
            }
            while (LODWORD(v270[0]) != v171);
            uint64_t v167 = *((void *)&v289 + 1);
          }
          while (*((void *)&v289 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](__p);
        char v158 = (uint64_t *)(a1 + 80);
      }
      ++v157;
    }
    while (v157 != v57);
  }
  if (v286 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v250, &v286);
  }
  unsigned int v286 = -1;
  __p[0] = &unk_2700D9488;
  __p[1] = &v277;
  *((void *)&v288 + 1) = __p;
  cv3d::cv::gess::alg::SortFaceByGroupID(a1, (uint64_t)__p);
  std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](__p);
  std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(v270, v257);
  if (v254)
  {
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    long long v178 = xmmword_24F578F00;
    long long v179 = unk_24F578F10;
    do
    {
      uint64_t v180 = 0;
      uint64_t v181 = (char *)v270[0];
      v182 = (char *)v270[0] + 36 * v177;
      float32x4_t v183 = *((float32x4_t *)v281 + v177);
      float32x4_t v184 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v183, (int8x16_t)v183, 4uLL), (int32x4_t)v183);
      int8x16_t v185 = (int8x16_t)vmulq_f32(v183, (float32x4_t)xmmword_24F5715A0);
      float32x4_t v186 = vmulq_f32(v183, (float32x4_t)xmmword_24F5715B0);
      v186.i32[3] = 0;
      float32x4_t v263 = v186;
      float32x4_t v187 = vmlsq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v185, (int32x4_t)vextq_s8(v185, v185, 0xCuLL)), (int32x4_t)v185), (float32x4_t)xmmword_24F5715A0, v184);
      float32x4_t v188 = vmulq_f32(v187, v187);
      v188.i32[3] = 0;
      LODWORD(v290) = 0;
      DWORD1(v290) = v187.i32[2];
      LODWORD(v291) = 0;
      *((float *)&v291 + 3) = -v187.f32[0];
      *((float32x2_t *)&v290 + 1) = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v187, (int8x16_t)v187, 4uLL));
      *(void *)((char *)&v291 + 4) = v187.i64[0];
      float v189 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v188, v188));
      int v292 = 0;
      *(_OWORD *)v182 = xmmword_24F570A10;
      *((_OWORD *)v182 + 1) = xmmword_24F570A10;
      *((_DWORD *)v182 + 8) = 1065353216;
      *(_OWORD *)long long __p = v178;
      long long v288 = v179;
      LODWORD(v289) = 1065353216;
      do
      {
        *(float *)((char *)__p + v180) = *(float *)&v181[v176 + v180] + *(float *)((char *)&v290 + v180);
        v180 += 4;
      }
      while (v180 != 36);
      *(_OWORD *)v182 = *(_OWORD *)__p;
      *((_OWORD *)v182 + 1) = v288;
      *((_DWORD *)v182 + 8) = v289;
      cv3d::cv::gess::math::Matrix3T<float>::operator*((float *)&v290, (uint64_t)&v290, (uint64_t)__p);
      uint64_t v190 = 0;
      int v292 = v289;
      float v191 = sqrtf(v189);
      long long v290 = *(_OWORD *)__p;
      long long v291 = v288;
      float v192 = (1.0 - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v263, v263))) / (float)(v191 * v191);
      long long v179 = unk_24F578F10;
      long long v178 = xmmword_24F578F00;
      *(_OWORD *)long long __p = xmmword_24F578F00;
      long long v288 = unk_24F578F10;
      LODWORD(v289) = 1065353216;
      do
      {
        *(float *)((char *)__p + v190) = *(float *)((char *)&v290 + v190) * v192;
        v190 += 4;
      }
      while (v190 != 36);
      uint64_t v193 = 0;
      long long v290 = *(_OWORD *)__p;
      long long v291 = v288;
      int v292 = v289;
      *(_OWORD *)long long __p = xmmword_24F578F00;
      long long v288 = unk_24F578F10;
      LODWORD(v289) = 1065353216;
      do
      {
        *(float *)((char *)__p + v193) = *(float *)&v181[v176 + v193] + *(float *)((char *)&v290 + v193);
        v193 += 4;
      }
      while (v193 != 36);
      *(_OWORD *)v182 = *(_OWORD *)__p;
      *((_OWORD *)v182 + 1) = v288;
      *((_DWORD *)v182 + 8) = v289;
      ++v177;
      v176 += 36;
    }
    while (v177 != v257);
  }
  unsigned int v269 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  *(void *)((char *)&v290 + 4) = 0;
  LODWORD(v290) = 0;
  unsigned int v194 = v251;
  unsigned int v195 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v250, (uint64_t)&v290, (unsigned __int8 *)__p);
  unsigned int v269 = v195;
  if (SBYTE7(v288) < 0) {
    operator delete(__p[0]);
  }
  if (v195 != -1)
  {
    if (v269 != -1) {
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v250, &v269);
    }
    unsigned int v269 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, &v269, (long long *)__p);
  if (SBYTE7(v288) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(void *)&long long v290 = 0;
  int v196 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v290, (unsigned __int8 *)__p);
  if (SBYTE7(v288) < 0) {
    operator delete(__p[0]);
  }
  if (v196 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    *(void *)&long long v290 = 0;
    int v196 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (uint64_t)&v290, (long long *)__p);
    if (SBYTE7(v288) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(__p[0]) = v196;
    uint64_t v197 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p);
    (*(void (**)(uint64_t))(*(void *)v197 + 40))(v197);
  }
  long long v290 = 0u;
  long long v291 = 0u;
  int v292 = 1065353216;
  LODWORD(__p[0]) = v196;
  v198 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p);
  unsigned int v199 = 0;
  uint64_t v200 = 0;
  int32x2_t v201 = vdup_n_s32(0x7F7FFFFFu);
  while (1)
  {
    unsigned int v264 = v199;
    if (v199 == v194) {
      break;
    }
    uint64_t v202 = v199;
    if (v200 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v271, v199)) {
      break;
    }
    uint64_t v223 = v200;
LABEL_240:
    unsigned int v224 = v277.__begin_[v202];
    v225 = (char *)v270[0];
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    unsigned int v226 = v202;
    LODWORD(v266[0]) = v199;
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)v266, __p);
    uint64_t v227 = 0;
    int v268 = 0;
    v228 = (float *)&v225[36 * v224];
    uint64_t v267 = 0;
    uint64_t v200 = v223;
    do
    {
      LODWORD(v266[0]) = *((_DWORD *)__p[0] + v227);
      if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(&v290, (unsigned int *)v266))
      {
        LODWORD(v266[0]) = *((_DWORD *)__p[0] + v227);
        v229 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(&v290, (unsigned int *)v266);
        if (!v229) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        *((_DWORD *)&v267 + v227) = *((_DWORD *)v229 + 5);
      }
      else
      {
        (*(void (**)(void *))(*v198 + 48))(v198);
        int v230 = (*(uint64_t (**)(void *))(*v198 + 16))(v198);
        LODWORD(v265) = *((_DWORD *)__p[0] + v227);
        v266[0] = &v265;
        unint64_t v231 = (v230 - 1);
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)&v290, (unsigned int *)&v265, (uint64_t)&std::piecewise_construct, v266)+ 5) = v231;
        *((_DWORD *)&v267 + v227) = v231;
        v232 = (long long *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + v227));
        uint64_t v233 = 0;
        long long v265 = *v232;
        v266[0] = 0;
        v266[1] = 0;
        v234 = v228;
        do
        {
          uint64_t v235 = 0;
          float v236 = 0.0;
          v237 = v234;
          do
          {
            float v238 = *v237;
            v237 += 3;
            float v236 = v236 + (float)(v238 * *(float *)((char *)&v266[-2] + v235));
            v235 += 4;
          }
          while (v235 != 12);
          *((float *)v266 + v233++) = v236;
          ++v234;
        }
        while (v233 != 3);
        uint64_t v239 = v198[5];
        if (v231 >= (v198[6] - v239) >> 3) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(_DWORD **)(v239 + 8 * v231) = v266[0];
      }
      ++v227;
    }
    while (v227 != 3);
    uint64_t v240 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v269, v226);
    *(void *)uint64_t v240 = v267;
    *(_DWORD *)(v240 + 8) = v268;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    unsigned int v199 = v264 + 1;
    unsigned int v194 = v251;
    if (v264 + 1 > v251) {
      goto LABEL_254;
    }
  }
  if (v200)
  {
    int v258 = v200;
    unsigned __int8 v203 = 0;
    unsigned __int8 v204 = 0;
    v205 = (uint64_t *)v291;
    uint64_t v206 = v198[5];
    unint64_t v207 = (v198[6] - v206) >> 3;
    float v208 = 3.4028e38;
    do
    {
      unsigned int v209 = v203;
      __float2 v210 = __sincosf_stret((float)v203 * 0.19635);
      if (v205)
      {
        v211.f32[0] = -v210.__sinval;
        v211.i32[1] = LODWORD(v210.__cosval);
        float32x2_t v212 = (float32x2_t)0x80000000800000;
        v213 = (uint64_t **)v205;
        float32x2_t v214 = (float32x2_t)v201;
        do
        {
          unint64_t v215 = *((unsigned int *)v213 + 5);
          if (v207 <= v215) {
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          float32x2_t v216 = (float32x2_t)vbsl_s8((int8x8_t)vcgtd_f64((float)((float)v203 * 0.19635), 0.00000001), (int8x8_t)vmla_lane_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v210.__sinval), LODWORD(v210.__cosval)), COERCE_FLOAT(*(void *)(v206 + 8 * v215))), v211, *(float32x2_t *)(v206 + 8 * v215), 1), *(int8x8_t *)(v206 + 8 * v215));
          float32x2_t v214 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v214, v216), (int8x8_t)v216, (int8x8_t)v214);
          float32x2_t v212 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v216, v212), (int8x8_t)v216, (int8x8_t)v212);
          v213 = (uint64_t **)*v213;
        }
        while (v213);
        float32x2_t v217 = vsub_f32(v212, v214);
        LODWORD(v218) = vmul_lane_f32(v217, v217, 1).u32[0];
      }
      else
      {
        float v218 = INFINITY;
      }
      if (v218 < v208)
      {
        float v208 = v218;
        unsigned __int8 v204 = v203;
      }
      ++v203;
    }
    while (v209 < 7);
    float v219 = (float)v204 * 0.19635;
    unsigned int v194 = v251;
    unsigned int v199 = v264;
    LODWORD(v200) = v258;
    if (v219 > 0.00000001)
    {
      __float2 v220 = __sincosf_stret(v219);
      if (v205)
      {
        v221.f32[0] = -v220.__sinval;
        v221.i32[1] = LODWORD(v220.__cosval);
        do
        {
          unint64_t v222 = *((unsigned int *)v205 + 5);
          if (v207 <= v222) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(float32x2_t *)(v206 + 8 * v222) = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v220.__sinval), LODWORD(v220.__cosval)), *(float *)(v206 + 8 * v222)), v221, *(float *)(v206 + 8 * v222 + 4));
          v205 = (uint64_t *)*v205;
        }
        while (v205);
      }
    }
  }
  if (v199 != v194)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(&v290);
    uint64_t v223 = (v200 + 1);
    uint64_t v202 = v199;
    goto LABEL_240;
  }
LABEL_254:
  v241.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(unsigned char *)(v249 + 80))
  {
    *(double *)uint64_t v249 = (double)(v241.__d_.__rep_ - rep) / 1000000.0;
    LODWORD(__p[0]) = v272;
    uint64_t v242 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)__p);
    *(void *)(v249 + 40) = (*(uint64_t (**)(uint64_t))(*(void *)v242 + 16))(v242);
  }
  v243.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*((_DWORD *)v248 + 3) == 1)
  {
    cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(__p, a1, v249, v248 + 1, v248 + 2, v248 + 4, 1, 0);
    cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)__p);
    cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)__p);
  }
  else
  {
    cv3d::cv::gess::binpack::Binpack::Binpack((cv3d::cv::gess::binpack::Binpack *)__p, (cv3d::cv::gess::mesh::TriMesh *)a1, (const unsigned int *)v248 + 1, (const unsigned __int8 *)v248 + 8);
    cv3d::cv::gess::binpack::Binpack::BinpackTexture((cv3d::cv::gess::binpack::Binpack *)__p);
    if ((void)v288)
    {
      *((void *)&v288 + 1) = v288;
      operator delete((void *)v288);
    }
  }
  int v244 = *(_DWORD *)(v249 + 76);
  v245.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(unsigned char *)(v249 + 80))
  {
    *(double *)(v249 + 48) = (double)(v245.__d_.__rep_ - v243.__d_.__rep_) / 1000000.0;
    *(void *)(v249 + 56) = *((unsigned __int8 *)v248 + 8);
  }
  if (v270[0])
  {
    v270[1] = v270[0];
    operator delete(v270[0]);
  }
  if (v273.__begin_)
  {
    v273.__end_ = v273.__begin_;
    operator delete(v273.__begin_);
  }
  if (v274)
  {
    v275 = (char *)v274;
    operator delete(v274);
  }
  if (v277.__begin_)
  {
    v277.__end_ = v277.__begin_;
    operator delete(v277.__begin_);
  }
  if (v278.__begin_)
  {
    v278.__end_ = v278.__begin_;
    operator delete(v278.__begin_);
  }
  if (v279) {
    operator delete(v279);
  }
  if (v281)
  {
    v282 = (float32x4_t *)v281;
    operator delete(v281);
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  return v244 != 2;
}

void sub_24F551728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a48) {
    operator delete(a48);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a57) {
    operator delete(a57);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  int v8 = 0;
  int v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v8, (unsigned __int8 *)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (v4 == -1) {
    cv3d::cv::gess::alg::SortFaceByGroupID();
  }
  LODWORD(__p[0]) = v4;
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)__p);
  int v7 = ((*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2) - 1;
  int v8 = 0;
  __p[0] = &unk_2700D9518;
  __p[1] = (void *)a1;
  uint64_t v10 = a2;
  uint64_t v11 = __p;
  std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](__p);
  return 1;
}

void sub_24F551AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL cv3d::cv::gess::alg::Parameterize(uint64_t a1, float *a2)
{
  memset(v3, 0, sizeof(v3));
  int v4 = 3;
  char v5 = 0;
  return cv3d::cv::gess::alg::Parameterize(a1, a2, (uint64_t)v3);
}

BOOL cv3d::cv::gess::alg::BlenderUV2Parameterize(uint64_t a1, float *a2)
{
  memset(v3, 0, sizeof(v3));
  int v4 = 3;
  char v5 = 1;
  return cv3d::cv::gess::internal::BlenderUV2Parameterize(a1, a2, (uint64_t)v3);
}

uint64_t cv3d::cv::gess::alg::IsoChartParameterize(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  memset(v3, 0, sizeof(v3));
  int v4 = 3;
  char v5 = 1;
  v7[3] = 0;
  v6[3] = 0;
  cv3d::cv::gess::alg::IsoChartParameterize(a1, a2, (uint64_t)v3, (uint64_t)v7, (uint64_t)v6);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v7);
  return 1;
}

void sub_24F551C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v12 - 56));
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::IsoChartParameterize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unsigned int v24 = -1;
  unsigned int v25 = -1;
  unsigned int v22 = -1;
  unsigned int v23 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  uint64_t v20 = 0;
  unsigned int v25 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v20, (unsigned __int8 *)&__p);
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v24, (unsigned __int8 *)&__p);
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v21) = 0;
  uint64_t v20 = 0;
  unsigned int v23 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v20, (unsigned __int8 *)&__p);
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v20) = 0;
  unsigned int v22 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)&v20, (unsigned __int8 *)&__p);
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(__p);
  }
  if (v25 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 80), &v25);
    unsigned int v25 = -1;
  }
  if (v24 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 80), &v24);
    unsigned int v24 = -1;
  }
  if (v23 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 56), &v23);
    unsigned int v23 = -1;
  }
  if (v22 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 56), &v22);
    unsigned int v22 = -1;
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v20, (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  float32x4_t v10 = cv3d::cv::gess::isochart::NormalizeMeshPosition(a1, &v20);
  uint64_t v11 = *(void *)(a4 + 24);
  if (v11)
  {
    if ((*(uint64_t (**)(uint64_t, float32x4_t))(*(void *)v11 + 48))(v11, v10))
    {
LABEL_29:
      BOOL v14 = 0;
      goto LABEL_35;
    }
    BOOL v12 = *(void *)(a4 + 24) == 0;
  }
  else
  {
    BOOL v12 = 1;
  }
  long long __p = (void *)4286578687;
  int v28 = 0;
  v29[3] = 0;
  v30[3] = 0;
  v30[4] = a1;
  v30[5] = a2;
  v30[7] = a2 + 8;
  int v31 = *(_DWORD *)(a2 + 16);
  char v32 = *(unsigned char *)(a2 + 12);
  char v33 = *(unsigned char *)(a2 + 20);
  uint64_t v34 = a2 + 24;
  uint64_t v35 = a2 + 28;
  uint64_t v36 = a2 + 44;
  char v37 = *(unsigned char *)(a2 + 41);
  *(_OWORD *)unint64_t v38 = 0u;
  memset(v39, 0, sizeof(v39));
  uint64_t v40 = a3;
  uint64_t v41 = a2 + 32;
  uint64_t v42 = a2 + 36;
  char v43 = *(unsigned char *)(a2 + 40);
  char v44 = *(unsigned char *)(a2 + 42);
  v45.__m_.__sig = 850045863;
  memset(v45.__m_.__opaque, 0, sizeof(v45.__m_.__opaque));
  if (!v12) {
    std::function<BOOL ()(void)>::operator=(v29, a4);
  }
  if (*(void *)(a5 + 24)) {
    std::function<void ()(std::string const&)>::operator=(v30, a5);
  }
  cv3d::cv::gess::isochart::IsoChart::Run((cv3d::cv::gess::isochart::IsoChart *)&__p);
  std::mutex::~mutex(&v45);
  uint64_t v26 = (void **)v39 + 1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v29);
  uint64_t v13 = *(void *)(a4 + 24);
  if (v13 && ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13) & 1) != 0) {
    goto LABEL_29;
  }
  if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
  {
    unint64_t v15 = 0;
    do
    {
      unint64_t v16 = v20;
      LODWORD(__p) = *(_DWORD *)(a1 + 176);
      uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&__p);
      uint64_t v18 = *(void *)(v17 + 40);
      if (v15 >= (*(void *)(v17 + 48) - v18) >> 4) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_OWORD *)(v18 + 16 * v15) = v16[v15];
      ++v15;
    }
    while (v15 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  }
  BOOL v14 = (*(_DWORD *)(a3 + 76) & 0xFFFFFFFD) != 0;
LABEL_35:
  if (v20)
  {
    int64_t v21 = v20;
    operator delete(v20);
  }
  return v14;
}

void sub_24F5520AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<void ()(std::string const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(std::string const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void cv3d::cv::gess::isochart::IsoChart::~IsoChart(cv3d::cv::gess::isochart::IsoChart *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 240));
  uint64_t v3 = (void **)((char *)this + 184);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)this + 6);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 2);
}

uint64_t cv3d::cv::gess::alg::XAtlasPacking(std::vector<unsigned int>::size_type *this, unint64_t *a2, std::vector<int>::size_type *a3, unint64_t *a4, unsigned int *a5, float *a6, const float *a7, const unsigned int *a8, const unsigned int *a9, float *a10, unsigned __int16 *a11, unsigned int *a12)
{
  return cv3d::cv::gess::internal::XAtlasPacking(this, a2, a3, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)a9, a10, a11, 0);
}

uint64_t cv3d::cv::gess::alg::CalculateChartInfo(uint64_t a1, std::vector<unsigned int> *this, unsigned int *a3)
{
  this->__end_ = this->__begin_;
  std::vector<unsigned int>::size_type v6 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  __x[0] = -1;
  std::vector<unsigned int>::resize(this, v6, __x);
  int v39 = -1;
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(void *)unint64_t v38 = 0;
  cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)v38, (unsigned __int8 *)__x);
  if (SBYTE7(v34) < 0) {
    operator delete(*(void **)__x);
  }
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v39, (unsigned __int8 *)__x);
  if (SBYTE7(v34) < 0) {
    operator delete(*(void **)__x);
  }
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  *(void *)&v38[4] = 0;
  *(_DWORD *)unint64_t v38 = 0;
  unsigned int v29 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)v38, (unsigned __int8 *)__x);
  if (SBYTE7(v34) < 0) {
    operator delete(*(void **)__x);
  }
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  *(_WORD *)unint64_t v38 = 0;
  cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 80), (uint64_t)v38, (unsigned __int8 *)__x);
  if (SBYTE7(v34) < 0) {
    operator delete(*(void **)__x);
  }
  unint64_t v7 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  LOBYTE(__x[0]) = 0;
  std::vector<BOOL>::vector(v38, v7, (unsigned __int8 *)__x);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v37, 3uLL);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  int v28 = a3;
  long long v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)__x = 0u;
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 160);
  if (v8 == v9)
  {
    unsigned int v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(*(void *)v38 + 8 * (v10 >> 6));
      if ((v13 & (1 << v10)) == 0)
      {
        *(void *)(*(void *)v38 + 8 * (v10 >> 6)) = v13 | (1 << v10);
        v31[0] = v12;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__x, v31);
        this->__begin_[v10] = v11;
        while (*((void *)&v35 + 1))
        {
          unsigned int v32 = *(_DWORD *)(*(void *)(*(void *)&__x[2] + (((unint64_t)v35 >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * (v35 & 0x3FF));
          *(void *)&long long v35 = v35 + 1;
          --*((void *)&v35 + 1);
          if ((unint64_t)v35 >= 0x800)
          {
            operator delete(**(void ***)&__x[2]);
            *(void *)&__x[2] += 8;
            *(void *)&long long v35 = v35 - 1024;
          }
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v32, v37);
          for (uint64_t i = 0; i != 3; ++i)
          {
            cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v31, a1 + 104, (char *)v37[0] + 4 * i);
            for (unsigned int j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v31);
                  ;
                  unsigned int j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v31))
            {
              unsigned int v30 = j;
              if (j == -1) {
                break;
              }
              unint64_t v16 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), j);
              if ((*v16 & v17) == 0)
              {
                uint64_t v18 = (unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v30) + 16);
                if (((*(void *)(*(void *)v38 + (((unint64_t)*v18 >> 3) & 0x1FFFFFF8)) >> *v18) & 1) == 0)
                {
                  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, v18, __p);
                  uint64_t v19 = 0;
                  while (*(_DWORD *)((char *)__p[0] + v19) != *((_DWORD *)v37[0] + i))
                  {
                    v19 += 4;
                    if (v19 == 12)
                    {
                      uint64_t v26 = 0;
                      goto LABEL_38;
                    }
                  }
                  v40[0] = v29;
                  uint64_t v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v40);
                  unint64_t v21 = *v18;
                  uint64_t v22 = *(void *)(v20 + 40);
                  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v20 + 48) - v22) >> 2) <= v21
                    || (int v23 = *(_DWORD *)(v22 + 12 * v21 + v19),
                        v40[0] = v29,
                        uint64_t v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v40), v25 = *(void *)(v24 + 40), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v24 + 48) - v25) >> 2) <= v32))
                  {
                    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                  }
                  if (v23 == *(_DWORD *)(v25 + 12 * v32 + 4 * i))
                  {
                    this->__begin_[*v18] = v11;
                    *(void *)(*(void *)v38 + (((unint64_t)*v18 >> 3) & 0x1FFFFFF8)) |= 1 << *v18;
                    std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__x, v18);
                  }
                }
              }
            }
          }
        }
        ++v11;
        uint64_t v9 = *(void *)(a1 + 152);
        uint64_t v8 = *(void *)(a1 + 160);
      }
      unint64_t v10 = ++v12;
    }
    while (v12 < (unint64_t)((v8 - v9) >> 2));
  }
  *int v28 = v11;
  uint64_t v26 = 1;
LABEL_38:
  std::deque<int>::~deque[abi:ne180100](__x);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (*(void *)v38) {
    operator delete(*(void **)v38);
  }
  return v26;
}

void sub_24F5526FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  std::deque<int>::~deque[abi:ne180100](&a15);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  int v31 = *(void **)(v29 - 120);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::Repack(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4, float *a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  memset(&v34, 0, sizeof(v34));
  unsigned int v33 = 0;
  if (cv3d::cv::gess::alg::CalculateChartInfo(a1, &v34, &v33))
  {
    int v32 = -1;
    int v30 = -1;
    int v31 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, "f:original_id");
    std::string::basic_string[abi:ne180100]<0>(&v35, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v32, (unsigned __int8 *)&v35);
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
    std::string::basic_string[abi:ne180100]<0>(&v35, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    *(_DWORD *)uint64_t v22 = 0;
    int v31 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)v22, (unsigned __int8 *)&v35);
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
    LODWORD(v35) = 0;
    int v30 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v35, (unsigned __int8 *)__p);
    if (v32 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a1, &v32, &v35);
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)v35);
      }
    }
    if (v31 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v31, &v35);
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)v35);
      }
    }
    if (v30 == -1) {
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v30, (long long *)__p);
    }
    LODWORD(v35) = v32;
    uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v35);
    (*(void (**)(uint64_t, void))(*(void *)v10 + 32))(v10, v33);
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v12 = 0;
      unsigned int v13 = 0;
      do
      {
        unsigned int v14 = v34.__begin_[v12];
        LODWORD(v35) = v31;
        uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v35);
        uint64_t v16 = *(void *)(v15 + 40);
        if (v12 >= (*(void *)(v15 + 48) - v16) >> 2
          || (*(_DWORD *)(v16 + 4 * v12) = v14,
              LODWORD(v35) = v30,
              uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v35), v18 = *(void *)(v17 + 40), v12 >= (*(void *)(v17 + 48) - v18) >> 2))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(_DWORD *)(v18 + 4 * v12) = v13++;
        unint64_t v12 = v13;
      }
      while (v13 < (unint64_t)((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2));
    }
    cv3d::cv::gess::alg::SortFaceByGroupID32Bit((uint64_t **)a1, v11);
    if (a2 == 2)
    {
      uint64_t v19 = cv3d::cv::gess::internal::XAtlasPacking((uint64_t **)a1, a3, a4, a5, 0, 0);
    }
    else if (a2 == 1)
    {
      long long v24 = 0u;
      memset(v25, 0, sizeof(v25));
      *(_OWORD *)uint64_t v22 = 0u;
      long long v23 = 0u;
      int v26 = 3;
      char v27 = 1;
      char v21 = *a4;
      cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(&v35, a1, v22, a3, &v21, a5, 1, 0);
      cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)&v35);
      uint64_t v19 = v26 != 2;
      cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)&v35);
    }
    else if (a2)
    {
      uint64_t v19 = 1;
    }
    else
    {
      v22[0] = *a4;
      cv3d::cv::gess::binpack::Binpack::Binpack((cv3d::cv::gess::binpack::Binpack *)&v35, (cv3d::cv::gess::mesh::TriMesh *)a1, a3, v22);
      uint64_t v19 = cv3d::cv::gess::binpack::Binpack::BinpackTexture((cv3d::cv::gess::binpack::Binpack *)&v35);
      if (v36)
      {
        char v37 = v36;
        operator delete(v36);
      }
    }
    cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>((uint64_t *)a1, &v30);
    if (v30 != -1) {
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 56), (unsigned int *)&v30);
    }
    int v30 = -1;
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
  return v19;
}

void sub_24F552B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)&a34);
  if (a28 < 0) {
    operator delete(__p);
  }
  uint64_t v41 = *(void **)(v39 + 8);
  if (v41)
  {
    *(void *)(v39 + 16) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID32Bit(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  int v7 = 0;
  int v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(this + 7, (uint64_t)&v7, (unsigned __int8 *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v3 == -1) {
    cv3d::cv::gess::alg::SortFaceByGroupID32Bit();
  }
  LODWORD(__p[0]) = v3;
  uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)__p);
  int v6 = ((unint64_t)((char *)this[20] - (char *)this[19]) >> 2) - 1;
  int v7 = 0;
  __p[0] = &unk_2700D95A8;
  __p[1] = this;
  uint64_t v10 = __p;
  std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](__p);
  return 1;
}

void sub_24F552D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(uint64_t *a1, int *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  int v2 = *a2;
  if (*a2 != -1)
  {
    LODWORD(v8[0]) = *a2;
    uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(a1 + 7, (unsigned int *)v8);
    int v6 = ((unint64_t)(a1[20] - a1[19]) >> 2) - 1;
    int v7 = 0;
    v8[0] = &unk_2700D94D0;
    v8[1] = a1;
    v8[3] = v8;
    std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](v8);
  }
  return v2 != -1;
}

void sub_24F552E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::quick_sort<unsigned int>(uint64_t result, int *a2, int *a3, uint64_t a4)
{
  int v4 = *a2;
  int v5 = *a3;
  if (*a2 < *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    if (v4 >= (unint64_t)((*(void *)(result + 48) - v7) >> 2)) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    unsigned int v11 = *(_DWORD *)(v7 + 4 * v4);
    int v12 = *a2;
    while (1)
    {
      uint64_t v13 = *(void *)(v6 + 40);
      if (v12 >= (unint64_t)((*(void *)(v6 + 48) - v13) >> 2)) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      unsigned int v14 = *(_DWORD *)(v13 + 4 * v12);
      if (v14 >= v11)
      {
        if (v14 > v11)
        {
          int v17 = v5;
          int v18 = v12;
          uint64_t v16 = *(void *)(a4 + 24);
          if (!v16) {
LABEL_17:
          }
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, int *, int *))(*(void *)v16 + 48))(v16, &v18, &v17);
          --v5;
          goto LABEL_12;
        }
      }
      else
      {
        int v17 = v12;
        int v18 = v4;
        uint64_t v15 = *(void *)(a4 + 24);
        if (!v15) {
          goto LABEL_17;
        }
        (*(void (**)(uint64_t, int *, int *))(*(void *)v15 + 48))(v15, &v18, &v17);
        ++v4;
      }
      ++v12;
LABEL_12:
      if (v12 > v5)
      {
        int v17 = v4 - 1;
        int v18 = v12;
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v7) = 0;
  int v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(this + 7, (uint64_t)&v7, (unsigned __int8 *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v3 == -1) {
    cv3d::cv::gess::alg::SortFaceByGroupID();
  }
  LODWORD(__p[0]) = v3;
  uint64_t v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)this + 7, (unsigned int *)__p);
  int v6 = ((unint64_t)((char *)this[20] - (char *)this[19]) >> 2) - 1;
  int v7 = 0;
  __p[0] = &unk_2700D9560;
  __p[1] = this;
  uint64_t v10 = __p;
  std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](__p);
  return 1;
}

void sub_24F5530D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t anonymous namespace'::quick_sort<unsigned short>(uint64_t result, int *a2, int *a3, uint64_t a4)
{
  int v4 = *a2;
  int v5 = *a3;
  if (*a2 < *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    if (v4 >= (unint64_t)((*(void *)(result + 48) - v7) >> 1)) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    unsigned int v11 = *(unsigned __int16 *)(v7 + 2 * v4);
    int v12 = *a2;
    while (1)
    {
      uint64_t v13 = *(void *)(v6 + 40);
      if (v12 >= (unint64_t)((*(void *)(v6 + 48) - v13) >> 1)) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      unsigned int v14 = *(unsigned __int16 *)(v13 + 2 * v12);
      if (v14 >= v11)
      {
        if (v14 > v11)
        {
          int v17 = v5;
          int v18 = v12;
          uint64_t v16 = *(void *)(a4 + 24);
          if (!v16) {
LABEL_17:
          }
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, int *, int *))(*(void *)v16 + 48))(v16, &v18, &v17);
          --v5;
          goto LABEL_12;
        }
      }
      else
      {
        int v17 = v12;
        int v18 = v4;
        uint64_t v15 = *(void *)(a4 + 24);
        if (!v15) {
          goto LABEL_17;
        }
        (*(void (**)(uint64_t, int *, int *))(*(void *)v15 + 48))(v15, &v18, &v17);
        ++v4;
      }
      ++v12;
LABEL_12:
      if (v12 > v5)
      {
        int v17 = v4 - 1;
        int v18 = v12;
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, const unsigned int *a3, const unsigned int *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(unsigned int *)a2;
  unint64_t v5 = *a3;
  if (v4 > v5) {
    return 0;
  }
  unint64_t v7 = ((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2) - 1;
  if (v7 < v4 || v7 < v5) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  int v16 = 0;
  int v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)this + 7, (uint64_t)&v16, (unsigned __int8 *)__p);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v12 == -1) {
    cv3d::cv::gess::alg::SortFaceByGroupID32Bit();
  }
  LODWORD(__p[0]) = v12;
  uint64_t v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)__p);
  int v14 = *(_DWORD *)a2;
  int v15 = *a3;
  int v16 = v14;
  __p[0] = &unk_2700D95F0;
  __p[1] = this;
  uint64_t v19 = __p;
  std::__function::__value_func<void ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:ne180100](__p);
  return 1;
}

void sub_24F5533BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v46 = *(void *)(a2 - 8);
                uint64_t v47 = *(void *)v10;
                if (*((float *)&v46 + 1) > COERCE_FLOAT(HIDWORD(*(void *)v10)))
                {
                  *(_DWORD *)unint64_t v10 = v46;
                  *(_DWORD *)(a2 - 8) = v47;
                  int v48 = *(_DWORD *)(v10 + 4);
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v48;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v10, (float *)(v10 + 8), (float *)(a2 - 8));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), a2 - 8);
                break;
              case 5uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), v10 + 24);
                uint64_t v49 = *(void *)(a2 - 8);
                uint64_t v50 = *(void *)(v10 + 24);
                if (*((float *)&v49 + 1) > *((float *)&v50 + 1))
                {
                  *(_DWORD *)(v10 + 24) = v49;
                  *(_DWORD *)(a2 - 8) = v50;
                  int v51 = *(_DWORD *)(v10 + 28);
                  *(_DWORD *)(v10 + 28) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v51;
                  uint64_t v52 = *(void *)(v10 + 16);
                  unint64_t v53 = *(void *)(v10 + 24);
                  unint64_t v54 = HIDWORD(v53);
                  if (*((float *)&v53 + 1) > *((float *)&v52 + 1))
                  {
                    *(void *)(v10 + 16) = v53;
                    *(void *)(v10 + 24) = v52;
                    uint64_t v55 = *(void *)(v10 + 8);
                    uint64_t v56 = *(void *)(v10 + 16);
                    if (*((float *)&v56 + 1) > *((float *)&v55 + 1))
                    {
                      *(_DWORD *)(v10 + 8) = v56;
                      *(_DWORD *)(v10 + 12) = v54;
                      *(void *)(v10 + 16) = v55;
                      uint64_t v57 = *(void *)v10;
                      uint64_t v58 = *(void *)(v10 + 8);
                      uint64_t v59 = HIDWORD(*(void *)v10);
                      if (*((float *)&v58 + 1) > COERCE_FLOAT(HIDWORD(*(void *)v10)))
                      {
                        *(_DWORD *)unint64_t v10 = v58;
                        *(_DWORD *)(v10 + 4) = v54;
                        *(_DWORD *)(v10 + 8) = v57;
                        *(_DWORD *)(v10 + 12) = v59;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 191)
          {
            unint64_t v60 = v10 + 8;
            BOOL v62 = v10 == a2 || v60 == a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = v10;
                do
                {
                  unint64_t v65 = v60;
                  uint64_t v66 = *(void *)v64;
                  if (*(float *)(v64 + 12) > COERCE_FLOAT(HIDWORD(*(void *)v64)))
                  {
                    int v67 = *(_DWORD *)(v64 + 8);
                    float v68 = *(float *)(v64 + 12);
                    uint64_t v69 = v63;
                    while (1)
                    {
                      uint64_t v70 = v10 + v69;
                      *(_DWORD *)(v70 + 8) = v66;
                      *(_DWORD *)(v70 + 12) = *(_DWORD *)(v10 + v69 + 4);
                      if (!v69) {
                        break;
                      }
                      uint64_t v66 = *(void *)(v70 - 8);
                      v69 -= 8;
                      if (v68 <= *((float *)&v66 + 1))
                      {
                        uint64_t v71 = v10 + v69 + 8;
                        goto LABEL_86;
                      }
                    }
                    uint64_t v71 = v10;
LABEL_86:
                    *(_DWORD *)uint64_t v71 = v67;
                    *(float *)(v71 + 4) = v68;
                  }
                  unint64_t v60 = v65 + 8;
                  v63 += 8;
                  unint64_t v64 = v65;
                }
                while (v65 + 8 != a2);
              }
            }
            else if (!v62)
            {
              float32x4_t v100 = (float *)(v10 + 12);
              do
              {
                unint64_t v101 = v60;
                uint64_t v102 = *(void *)a1;
                if (*(float *)(a1 + 12) > COERCE_FLOAT(HIDWORD(*(void *)a1)))
                {
                  int v103 = *(_DWORD *)(a1 + 8);
                  float v104 = *(float *)(a1 + 12);
                  uint64_t v105 = v100;
                  do
                  {
                    uint64_t v106 = v105;
                    int v107 = *((_DWORD *)v105 - 2);
                    v105 -= 2;
                    *((_DWORD *)v106 - 1) = v102;
                    *(_DWORD *)uint64_t v106 = v107;
                    uint64_t v102 = *(void *)(v106 - 5);
                  }
                  while (v104 > *((float *)&v102 + 1));
                  *((_DWORD *)v105 - 1) = v103;
                  *uint64_t v105 = v104;
                }
                unint64_t v60 = v101 + 8;
                v100 += 2;
                a1 = v101;
              }
              while (v101 + 8 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v72 = (v12 - 2) >> 1;
              int64_t v73 = v72;
              do
              {
                int64_t v74 = v73;
                if (v72 >= v73)
                {
                  uint64_t v75 = (2 * v73) | 1;
                  unint64_t v76 = v10 + 8 * v75;
                  if (2 * v74 + 2 < (uint64_t)v12 && *(float *)(v76 + 4) > *(float *)(v76 + 12))
                  {
                    v76 += 8;
                    uint64_t v75 = 2 * v74 + 2;
                  }
                  unint64_t v77 = v10 + 8 * v74;
                  uint64_t v78 = *(void *)v76;
                  float v79 = *(float *)(v77 + 4);
                  if (COERCE_FLOAT(HIDWORD(*(void *)v76)) <= v79)
                  {
                    int v80 = *(_DWORD *)v77;
                    do
                    {
                      uint64_t v81 = (_DWORD *)v77;
                      unint64_t v77 = v76;
                      *uint64_t v81 = v78;
                      v81[1] = *(_DWORD *)(v76 + 4);
                      if (v72 < v75) {
                        break;
                      }
                      uint64_t v82 = 2 * v75;
                      uint64_t v75 = (2 * v75) | 1;
                      unint64_t v76 = v10 + 8 * v75;
                      uint64_t v83 = v82 + 2;
                      if (v83 < (uint64_t)v12 && *(float *)(v76 + 4) > *(float *)(v76 + 12))
                      {
                        v76 += 8;
                        uint64_t v75 = v83;
                      }
                      uint64_t v78 = *(void *)v76;
                    }
                    while (COERCE_FLOAT(HIDWORD(*(void *)v76)) <= v79);
                    *(_DWORD *)unint64_t v77 = v80;
                    *(float *)(v77 + 4) = v79;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              uint64_t v84 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v85 = 0;
                float v86 = *(float *)v10;
                int v87 = *(_DWORD *)(v10 + 4);
                unint64_t v88 = v10;
                do
                {
                  std::chrono::system_clock::time_point v89 = (_DWORD *)v88;
                  v88 += 8 * v85 + 8;
                  uint64_t v90 = 2 * v85;
                  uint64_t v85 = (2 * v85) | 1;
                  uint64_t v91 = v90 + 2;
                  if (v91 < v84 && *(float *)(v88 + 4) > *(float *)(v88 + 12))
                  {
                    v88 += 8;
                    uint64_t v85 = v91;
                  }
                  *std::chrono::system_clock::time_point v89 = *(_DWORD *)v88;
                  v89[1] = *(_DWORD *)(v88 + 4);
                }
                while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
                if (v88 == a2 - 8)
                {
                  *(float *)unint64_t v88 = v86;
                  *(_DWORD *)(v88 + 4) = v87;
                }
                else
                {
                  *(_DWORD *)unint64_t v88 = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(v88 + 4) = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 8) = v86;
                  *(_DWORD *)(a2 - 4) = v87;
                  uint64_t v92 = v88 - v10 + 8;
                  if (v92 >= 9)
                  {
                    unint64_t v93 = (((unint64_t)v92 >> 3) - 2) >> 1;
                    unint64_t v94 = v10 + 8 * v93;
                    uint64_t v95 = *(void *)v94;
                    float v96 = *(float *)(v88 + 4);
                    if (COERCE_FLOAT(HIDWORD(*(void *)v94)) > v96)
                    {
                      int v97 = *(_DWORD *)v88;
                      do
                      {
                        uint64_t v98 = (_DWORD *)v88;
                        unint64_t v88 = v94;
                        _DWORD *v98 = v95;
                        v98[1] = *(_DWORD *)(v94 + 4);
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                        unint64_t v94 = v10 + 8 * v93;
                        uint64_t v95 = *(void *)v94;
                      }
                      while (COERCE_FLOAT(HIDWORD(*(void *)v94)) > v96);
                      *(_DWORD *)unint64_t v88 = v97;
                      *(float *)(v88 + 4) = v96;
                    }
                  }
                }
                a2 -= 8;
              }
              while (v84-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 8 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8 * (v12 >> 1)), (float *)(a2 - 8));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8), (float *)(v14 - 8), (float *)(a2 - 16));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v13), (float *)(a2 - 24));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(v14 - 8), (float *)v14, (float *)(a1 + 8 + 8 * v13));
            float v15 = *(float *)a1;
            *(_DWORD *)a1 = *(_DWORD *)v14;
            *(float *)unint64_t v14 = v15;
            int v16 = *(_DWORD *)(a1 + 4);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v14 + 4);
            *(_DWORD *)(v14 + 4) = v16;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8 * (v12 >> 1)), (float *)a1, (float *)(a2 - 8));
          }
          --a3;
          if (a4) {
            break;
          }
          float v17 = *(float *)a1;
          float v18 = *(float *)(a1 + 4);
          float v19 = v18;
          if (*(float *)(a1 - 4) > v18) {
            goto LABEL_12;
          }
          if (v18 <= *(float *)(a2 - 4))
          {
            unint64_t v36 = a1 + 8;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              float v37 = *(float *)(v36 + 4);
              v36 += 8;
            }
            while (v18 <= v37);
          }
          else
          {
            unint64_t v34 = a1;
            do
            {
              unint64_t v10 = v34 + 8;
              float v35 = *(float *)(v34 + 12);
              v34 += 8;
            }
            while (v18 <= v35);
          }
          uint64_t v38 = (_DWORD *)a2;
          if (v10 < a2)
          {
            unint64_t v39 = a2;
            do
            {
              uint64_t v38 = (_DWORD *)(v39 - 8);
              float v40 = *(float *)(v39 - 4);
              v39 -= 8;
            }
            while (v18 > v40);
          }
          if (v10 < (unint64_t)v38)
          {
            float v41 = *(float *)v10;
            float v42 = *(float *)v38;
            do
            {
              *(float *)unint64_t v10 = v42;
              *(float *)uint64_t v38 = v41;
              int v43 = *(_DWORD *)(v10 + 4);
              *(_DWORD *)(v10 + 4) = v38[1];
              v38[1] = v43;
              do
              {
                uint64_t v44 = *(void *)(v10 + 8);
                v10 += 8;
                float v41 = *(float *)&v44;
              }
              while (v18 <= *((float *)&v44 + 1));
              do
              {
                uint64_t v45 = *((void *)v38 - 1);
                v38 -= 2;
                float v42 = *(float *)&v45;
              }
              while (v18 > *((float *)&v45 + 1));
            }
            while (v10 < (unint64_t)v38);
          }
          BOOL v4 = v10 - 8 >= a1;
          BOOL v5 = v10 - 8 == a1;
          if (v10 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(float *)(v10 - 8) = v17;
          *(float *)(v10 - 4) = v18;
        }
        float v17 = *(float *)a1;
        float v18 = *(float *)(a1 + 4);
        float v19 = v18;
LABEL_12:
        uint64_t v20 = 0;
        do
        {
          uint64_t v21 = *(void *)(a1 + v20 + 8);
          v20 += 8;
        }
        while (v19 < *((float *)&v21 + 1));
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 8)
        {
          int v26 = (float *)a2;
          while (v22 < (unint64_t)v26)
          {
            long long v24 = v26 - 2;
            float v27 = *(v26 - 1);
            v26 -= 2;
            if (v19 < v27) {
              goto LABEL_22;
            }
          }
          long long v24 = v26;
        }
        else
        {
          do
          {
            long long v24 = (float *)(v23 - 8);
            float v25 = *(float *)(v23 - 4);
            v23 -= 8;
          }
          while (v19 >= v25);
        }
LABEL_22:
        if (v22 >= (unint64_t)v24)
        {
          unint64_t v10 = v22;
        }
        else
        {
          int v28 = *(_DWORD *)v24;
          unint64_t v10 = v22;
          char v29 = v24;
          do
          {
            *(_DWORD *)unint64_t v10 = v28;
            *(_DWORD *)char v29 = v21;
            int v30 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v29[1];
            *((_DWORD *)v29 + 1) = v30;
            do
            {
              uint64_t v31 = *(void *)(v10 + 8);
              v10 += 8;
              LODWORD(v21) = v31;
            }
            while (v19 < *((float *)&v31 + 1));
            do
            {
              uint64_t v32 = *((void *)v29 - 1);
              v29 -= 2;
              int v28 = v32;
            }
            while (v19 >= *((float *)&v32 + 1));
          }
          while (v10 < (unint64_t)v29);
        }
        if (v10 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
        }
        *(float *)(v10 - 8) = v17;
        *(float *)(v10 - 4) = v18;
        if (v22 >= (unint64_t)v24) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(a1, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(a1, v10 - 8);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(v10, a2))
      {
        break;
      }
      if (!v33) {
        goto LABEL_35;
      }
    }
    a2 = v10 - 8;
    if (!v33) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(void *)(a2 - 8);
      uint64_t v7 = *(void *)a1;
      if (*((float *)&v6 + 1) > COERCE_FLOAT(HIDWORD(*(void *)a1)))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 8) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      uint64_t v19 = *(void *)(a2 - 8);
      uint64_t v20 = *(void *)(a1 + 24);
      if (*((float *)&v19 + 1) <= *((float *)&v20 + 1)) {
        return 1;
      }
      *(_DWORD *)(a1 + 24) = v19;
      *(_DWORD *)(a2 - 8) = v20;
      int v21 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v21;
      uint64_t v22 = *(void *)(a1 + 16);
      unint64_t v23 = *(void *)(a1 + 24);
      unint64_t v24 = HIDWORD(v23);
      if (*((float *)&v23 + 1) <= *((float *)&v22 + 1)) {
        return 1;
      }
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v22;
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 16);
      if (*((float *)&v26 + 1) <= *((float *)&v25 + 1)) {
        return 1;
      }
      *(_DWORD *)(a1 + 8) = v26;
      *(_DWORD *)(a1 + 12) = v24;
      *(void *)(a1 + 16) = v25;
      uint64_t v27 = *(void *)a1;
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = HIDWORD(*(void *)a1);
      if (*((float *)&v28 + 1) <= COERCE_FLOAT(HIDWORD(*(void *)a1))) {
        return 1;
      }
      *(_DWORD *)a1 = v28;
      *(_DWORD *)(a1 + 4) = v24;
      BOOL result = 1;
      *(_DWORD *)(a1 + 8) = v27;
      *(_DWORD *)(a1 + 12) = v29;
      return result;
    default:
      char v9 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v10 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)(v10 + 4);
    uint64_t v14 = *v9;
    if (v13 > COERCE_FLOAT(HIDWORD(*v9)))
    {
      int v15 = *(_DWORD *)v10;
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16) {
          break;
        }
        uint64_t v14 = *(void *)(v17 + 8);
        v16 -= 8;
        if (v13 <= *((float *)&v14 + 1))
        {
          uint64_t v18 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v18 = v15;
      *(float *)(v18 + 4) = v13;
      if (++v12 == 8) {
        return v10 + 8 == a2;
      }
    }
    char v9 = (uint64_t *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2700D9488;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D9488;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = **(void **)(result + 8);
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * *a3);
  *(_DWORD *)(v4 + 4 * *a3) = v5;
  return result;
}

void *std::__function::__value_func<void ()(std::string const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F5541C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

void *std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2700D94D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D94D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v7 = *a2;
  unsigned int v6 = v3;
}

uint64_t anonymous namespace'::MeshFaceSwap(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = a1 + 104;
  unsigned int v19 = *a2;
  unsigned int v7 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v19);
  unsigned int v19 = *a3;
  unsigned int v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v6, &v19);
  unsigned int v19 = v7;
  do
  {
    unsigned int v9 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v19) + 8);
    unsigned int v18 = *a3;
    unsigned int v19 = v9;
    cv3d::cv::gess::mesh::Topology::SetFace(v6, &v18, &v19);
  }
  while (v19 != -1 && v19 != v7);
  unsigned int v19 = v8;
  do
  {
    unsigned int v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v19) + 8);
    unsigned int v18 = *a2;
    unsigned int v19 = v11;
    uint64_t result = cv3d::cv::gess::mesh::Topology::SetFace(v6, &v18, &v19);
  }
  while (v19 != -1 && v19 != v8);
  int v15 = *(uint64_t **)(a1 + 56);
  uint64_t v14 = *(uint64_t **)(a1 + 64);
  if (v15 != v14)
  {
    uint64_t v16 = *a2;
    uint64_t v17 = *a3;
    do
    {
      uint64_t result = *v15;
      if (*v15) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 56))(result, v16, v17);
      }
      v15 += 2;
    }
    while (v15 != v14);
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_2700D9518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700D9518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v4 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v10 = *a3;
  unsigned int v5 = v10;
  unsigned int v11 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned int v10 = v5;
  unsigned int v11 = v4;
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned int *))(*(void *)v8 + 48))(v8, &v11, &v10);
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_2700D9560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D9560;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v7 = *a2;
  unsigned int v6 = v3;
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_2700D95A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D95A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v7 = *a2;
  unsigned int v6 = v3;
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_2700D95F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D95F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v7 = *a2;
  unsigned int v6 = v3;
}

uint64_t cv3d::cv::gess::alg::ValidateLODInput(uint64_t a1, long long *a2, uint64_t a3)
{
  if (*(void *)(a1 + 160) == *(void *)(a1 + 152)
    || *((_DWORD *)a2 + 1) < *((_DWORD *)a2 + 2)
    || *((_DWORD *)a2 + 3) < *((_DWORD *)a2 + 4))
  {
    return 0;
  }
  long long v7 = *a2;
  long long v8 = a2[1];
  *(void *)(a3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v8;
  std::string::operator=((std::string *)(a3 + 40), (const std::string *)((char *)a2 + 40));
  char v9 = *((unsigned char *)a2 + 80);
  *(_OWORD *)(a3 + 64) = a2[4];
  *(unsigned char *)(a3 + 80) = v9;
  cv3d::cv::gess::alg::ConfigOutput::operator=(a3 + 88, (uint64_t)a2 + 88);
  if (!*(_DWORD *)a2)
  {
    int v10 = 1;
    goto LABEL_9;
  }
  if (*(_DWORD *)a2 >= 0x1Fu)
  {
    int v10 = 30;
LABEL_9:
    *(_DWORD *)a3 = v10;
  }
  if (*((_DWORD *)a2 + 1) > 0x493E0u) {
    *(_DWORD *)(a3 + 4) = 300000;
  }
  if (*((_DWORD *)a2 + 2) <= 0x3E7u) {
    *(_DWORD *)(a3 + 8) = 1000;
  }
  if (*((_DWORD *)a2 + 3) > 0x2000u) {
    *(_DWORD *)(a3 + 12) = 0x2000;
  }
  if (*((_DWORD *)a2 + 4) <= 0x7Fu) {
    *(_DWORD *)(a3 + 16) = 128;
  }
  uint64_t v11 = *(void *)(a1 + 160) - *(void *)(a1 + 152);
  unint64_t v12 = v11 >> 2;
  unint64_t v13 = (unint64_t)v11 >> 2;
  if (v12 < *((unsigned int *)a2 + 2))
  {
    *(_DWORD *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v13;
    *(_DWORD *)(a3 + 8) = v13;
  }
  if (v12 < *((unsigned int *)a2 + 1)) {
    *(_DWORD *)(a3 + 4) = v13;
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::ComputeLODSizes(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a4;
  uint64_t v6 = a4[1] - *a4;
  if (v6)
  {
    unint64_t v11 = v6 >> 2;
    float v12 = *(float *)(a2 + 36);
    float v13 = (float)*(unsigned int *)(a2 + 16);
    float v14 = (float)*(unsigned int *)(a2 + 12);
    unsigned int v15 = (float)((float)(v12 * v13) / v14);
    if (v15 <= 1) {
      unsigned int v15 = 1;
    }
    if (v12 <= 2) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v12;
    }
    float v17 = 1.0 / (float)(*(_DWORD *)a2 - 1);
    float v18 = powf((float)v15 / (float)v16, v17);
    float v19 = powf(v13 / v14, v17);
    uint64_t v20 = (*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
    unsigned int v21 = *(_DWORD *)(a2 + 8);
    if (v21 >= v20) {
      unsigned int v21 = (*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
    }
    if (*(_DWORD *)(a2 + 4) >= v20) {
      unsigned int v22 = (*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
    }
    else {
      unsigned int v22 = *(_DWORD *)(a2 + 4);
    }
    uint64_t v23 = 0;
    long double v24 = powf((float)v21 / (float)v22, v17);
    uint64_t v25 = *a3;
    long double v26 = v19;
    long double v27 = v18;
    uint64_t v28 = *a5;
    do
    {
      *(double *)&unint64_t v29 = pow(v24, (double)v23) * (double)v22;
      *(_DWORD *)(v25 + 4 * v23) = *(double *)&v29;
      LODWORD(v29) = *(_DWORD *)(a2 + 12);
      double v30 = (double)v29;
      long double v31 = pow(v26, (double)v23);
      *(_DWORD *)(v5 + 4 * v23) = 1 << vcvtas_u32_f32(log2f((float)(v31 * v30)));
      unsigned int v32 = (pow(v27, (double)v23) * (double)v16);
      if (v32 <= 1) {
        unsigned int v32 = 1;
      }
      *(_DWORD *)(v28 + 4 * v23++) = 1 << vcvtas_u32_f32(log2f((float)v32));
    }
    while (v11 > v23);
  }
  return 1;
}

BOOL cv3d::cv::gess::alg::InitializeMaterialAttributes(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  int v22 = -1;
  if (cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)this))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    BOOL v3 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v22, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v4 = v22;
  }
  else
  {
    BOOL v3 = 0;
    int v4 = -1;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v4;
  uint64_t v5 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)&__p);
  uint64_t v6 = (*(uint64_t (**)(void *))(*v5 + 16))(v5);
  int v20 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  BOOL v7 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)this, &v20, (unsigned __int8 *)&__p);
  BOOL v8 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v8) {
      goto LABEL_12;
    }
  }
  else if (v7)
  {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)this, &v20, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_12:
  LODWORD(__p.__r_.__value_.__l.__data_) = v20;
  char v9 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)this + 10, (unsigned int *)&__p);
  (*(void (**)(void *, uint64_t))(*v9 + 32))(v9, 1);
  unint64_t v11 = v9 + 5;
  int v10 = (uint64_t **)v9[5];
  if ((uint64_t **)v11[1] == v10) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  if (v6)
  {
    uint64_t v12 = 0;
    for (unint64_t i = 0; i != v6; ++i)
    {
      uint64_t v14 = v5[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v5[6] - v14) >> 3) <= i) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      unsigned int v15 = (long long *)(v14 + v12);
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v15, *((void *)v15 + 1));
      }
      else
      {
        long long v16 = *v15;
        __p.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
      }
      unsigned __int16 v19 = i;
      uint64_t v23 = &v19;
      float v17 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v10, &v19, (uint64_t)&std::piecewise_construct, &v23);
      std::string::operator=((std::string *)(v17 + 5), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v12 += 24;
    }
  }
  return v3;
}

void sub_24F554CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeLowMeshUV(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, unsigned int *a6)
{
  if (a3[5])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    int v36 = 0;
    uint64_t v35 = 0;
    int v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a2 + 56), (uint64_t)&v35, (unsigned __int8 *)&__p);
    if (v27 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    uint64_t v35 = 0;
    int v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&v35, (unsigned __int8 *)&__p);
    if (v27 < 0) {
      operator delete(__p);
    }
    int v14 = 1;
    if (v12 != -1 && v13 != -1) {
      int v14 = cv3d::cv::gess::alg::ComputeIMTFromHighMesh(a1, a2, a4);
    }
    uint64_t result = 0;
    LODWORD(v25) = 100000;
    __int16 v32 = 257;
    LOBYTE(v24) = 0;
    char v26 = 0;
    char v33 = 1;
    int v28 = *a5;
    char v29 = 1;
    std::string __p = (void *)a3[6];
    int v23 = a3[7];
    float v34 = (float)*a6;
    int v16 = a3[8];
    if (v16 == 2) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
    if (v16) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v30 = v18;
    int v31 = 0;
    if (v14) {
      return cv3d::cv::gess::alg::IsoChartParameterize(a1, (uint64_t)&__p);
    }
  }
  else
  {
    int v19 = *a5;
    LODWORD(__p) = 1065749138;
    HIDWORD(__p) = v19;
    LOBYTE(v23) = 1;
    float v25 = (float)*a6;
    int v20 = a3[8];
    if (v20 == 2) {
      int v21 = 2;
    }
    else {
      int v21 = 1;
    }
    if (!v20) {
      int v21 = 0;
    }
    int v24 = v21;
    return cv3d::cv::gess::alg::BlenderUV2Parameterize(a1, (float *)&__p);
  }
  return result;
}

void sub_24F554EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::GenerateLODInMemory(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, uint64_t *a5)
{
  v63[4] = *MEMORY[0x263EF8340];
  cv3d::cv::gess::alg::ConfigLOD::ConfigLOD((cv3d::cv::gess::alg::ConfigLOD *)__n);
  if ((cv3d::cv::gess::alg::ValidateLODInput(a1, a3, (uint64_t)__n) & 1) == 0)
  {
LABEL_31:
    uint64_t GPU = 0;
    goto LABEL_44;
  }
  uint64_t v10 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 != v9)
  {
    uint64_t v11 = v9 - 184;
    int v12 = (void (***)(void))(v9 - 184);
    int v13 = (void (***)(void))(v9 - 184);
    do
    {
      int v14 = *v13;
      v13 -= 23;
      (*v14)(v12);
      v11 -= 184;
      BOOL v15 = v12 == (void (***)(void))v10;
      int v12 = v13;
    }
    while (!v15);
    uint64_t v17 = *a5;
    uint64_t v16 = a5[1];
    goto LABEL_8;
  }
  uint64_t v17 = *a5;
  uint64_t v16 = a5[1];
  if (*a5 != v16)
  {
LABEL_8:
    a4[1] = v10;
    while (v16 != v17)
    {
      v16 -= 72;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(v16);
    }
    a5[1] = v17;
  }
  if (v57)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v46[1] = 0;
    v46[0] = 0;
    int v18 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v46, (unsigned __int8 *)__p);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (v18 == -1) {
      goto LABEL_31;
    }
  }
  std::vector<unsigned int>::vector(&v51, __n[0]);
  std::vector<unsigned int>::vector(&v50, __n[0]);
  std::vector<unsigned int>::vector(&v49, __n[0]);
  cv3d::cv::gess::alg::ComputeLODSizes(a1, (uint64_t)__n, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49);
  std::vector<cv3d::cv::gess::mesh::TriMesh>::resize(a4, __n[0]);
  std::vector<cv3d::cv::gess::mesh::Material>::resize(a5, __n[0]);
  cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)v46, (void **)a1);
  v46[0] = &unk_2700D7EE8;
  float v43 = 0.618;
  __int16 v44 = 256;
  int v45 = 1065353216;
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)__p);
  long long v36 = v54;
  char v37 = v55;
  cv3d::cv::gess::alg::ConfigOutput::operator=((uint64_t)v38, (uint64_t)v56);
  HIDWORD(v38[0]) = 1;
  int v31 = 0;
  __int16 v32 = 0;
  uint64_t v33 = 0;
  uint64_t GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v31);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v39, (char *)v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 3);
  std::string::operator=(&v40, &v53);
  if (v31)
  {
    __int16 v32 = v31;
    operator delete(v31);
  }
  if (__n[0])
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      float v43 = (float)((float)(unint64_t)((v48 - v47) >> 2) - (float)v51.__begin_[v22])
          / (float)(unint64_t)((v48 - v47) >> 2);
      if (GPU)
      {
        v63[3] = 0;
        BOOL v24 = cv3d::cv::gess::alg::QuadricErrorMetricSimplify((cv3d::cv::gess::mesh::PolyMesh *)v46, (int *)&v43, (uint64_t)v63);
        std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v63);
      }
      else
      {
        BOOL v24 = 0;
      }
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)(*a4 + v21), v46);
      if (v24
        && cv3d::cv::gess::alg::ComputeLowMeshUV(*a4 + v21, a1, __n, (uint64_t)v39, (int *)&v50.__begin_[v22], &v49.__begin_[v22]))
      {
        BOOL v26 = cv3d::cv::gess::alg::InitializeMaterialAttributes((cv3d::cv::gess::alg *)(*a4 + v21), v25);
        LODWORD(v38[0]) = v50.__begin_[v22];
        if (v26)
        {
          uint64_t v27 = *a4 + v21;
          uint64_t v28 = *a5 + v20;
          memset(v58, 0, sizeof(v58));
          memset(v59, 0, sizeof(v59));
          memset(v60, 0, sizeof(v60));
          memset(v61, 0, sizeof(v61));
          memset(v62, 0, sizeof(v62));
          uint64_t GPU = cv3d::cv::gess::alg::InternalBake((cv3d::cv::gess::alg *)a1, a2, v27, v28, (uint64_t)__p, 0, 0, (cv3d::cv::gess::alg::BakeCallbackBundle *)v58);
          std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v62);
          std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v61);
          std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v60);
          std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v59);
          std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v58);
        }
        else
        {
          uint64_t GPU = 0;
        }
      }
      else
      {
        uint64_t GPU = 0;
        LODWORD(v38[0]) = v50.__begin_[v22];
      }
      ++v23;
      v21 += 184;
      v20 += 72;
      ++v22;
    }
    while (v23 < __n[0]);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v38);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v46);
  if (v49.__begin_)
  {
    v49.__end_ = v49.__begin_;
    operator delete(v49.__begin_);
  }
  if (v50.__begin_)
  {
    v50.__end_ = v50.__begin_;
    operator delete(v50.__begin_);
  }
  if (v51.__begin_)
  {
    v51.__end_ = v51.__begin_;
    operator delete(v51.__begin_);
  }
LABEL_44:
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v56);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  return GPU;
}

void sub_24F555444()
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v0 - 128));
  JUMPOUT(0x24F555458);
}

void sub_24F555454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  cv3d::cv::gess::alg::ConfigBake::~ConfigBake((void **)va);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&STACK[0x280]);
  uint64_t v11 = (void *)STACK[0x340];
  if (STACK[0x340])
  {
    STACK[0x348] = (unint64_t)v11;
    operator delete(v11);
  }
  int v12 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v12;
    operator delete(v12);
  }
  int v13 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v13;
    operator delete(v13);
  }
  cv3d::cv::gess::alg::ConfigLOD::~ConfigLOD((void **)&STACK[0x388]);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cv3d::cv::gess::mesh::TriMesh>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((v3 - *result) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<cv3d::cv::gess::mesh::TriMesh>::__append(result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 184 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = v3 - 184;
      uint64_t v9 = (uint64_t (***)(void))(v3 - 184);
      uint64_t v10 = (uint64_t (***)(void))(v3 - 184);
      do
      {
        uint64_t v11 = *v10;
        v10 -= 23;
        uint64_t result = (uint64_t *)(*v11)(v9);
        v8 -= 184;
        BOOL v12 = v9 == (uint64_t (***)(void))v7;
        uint64_t v9 = v10;
      }
      while (!v12);
    }
    v2[1] = v7;
  }
  return result;
}

void std::vector<cv3d::cv::gess::mesh::Material>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<cv3d::cv::gess::mesh::Material>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 72 * a2;
    while (v3 != v7)
    {
      v3 -= 72;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(v3);
    }
    a1[1] = v7;
  }
}

void cv3d::cv::gess::alg::ConfigLOD::~ConfigLOD(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
}

BOOL cv3d::cv::gess::alg::GenerateLOD(uint64_t **this, const cv3d::cv::gess::mesh::TriMesh *a2, std::__fs::filesystem::path *a3, std::__fs::filesystem::path *a4, const cv3d::cv::gess::alg::ConfigLOD *a5)
{
  v66[4] = *MEMORY[0x263EF8340];
  std::__fs::filesystem::__status(a3, 0);
  BOOL v9 = 0;
  if (LOBYTE(__p[0]) && LOBYTE(__p[0]) != 255)
  {
    cv3d::cv::gess::alg::ConfigLOD::ConfigLOD((cv3d::cv::gess::alg::ConfigLOD *)__n);
    if ((cv3d::cv::gess::alg::ValidateLODInput((uint64_t)this, (long long *)a4, (uint64_t)__n) & 1) == 0) {
      goto LABEL_45;
    }
    if (!v58) {
      goto LABEL_8;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v47[1] = 0;
    v47[0] = 0;
    int v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 1, (uint64_t)v47, (unsigned __int8 *)__p);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    if (v10 == -1)
    {
LABEL_45:
      BOOL v9 = 0;
    }
    else
    {
LABEL_8:
      std::vector<unsigned int>::vector(&v52, __n[0]);
      std::vector<unsigned int>::vector(&v51, __n[0]);
      std::vector<unsigned int>::vector(&v50, __n[0]);
      cv3d::cv::gess::alg::ComputeLODSizes((uint64_t)this, (uint64_t)__n, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50);
      cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)v47, (void **)this);
      v47[0] = &unk_2700D7EE8;
      float v44 = 0.618;
      __int16 v45 = 256;
      int v46 = 1065353216;
      cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)__p);
      long long v37 = v55;
      char v38 = v56;
      cv3d::cv::gess::alg::ConfigOutput::operator=((uint64_t)v39, (uint64_t)v57);
      HIDWORD(v39[0]) = 1;
      __int16 v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      BOOL GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v32);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v40, (char *)v32, (uint64_t)v33, (v33 - (unsigned char *)v32) >> 3);
      std::string::operator=(&v41, &v54);
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v32);
      if (__n[0])
      {
        uint64_t v12 = 0;
        unsigned int v13 = 0;
        unint64_t v14 = 0;
        while (1)
        {
          float v44 = (float)((float)(unint64_t)((v49 - v48) >> 2) - (float)v52.__begin_[v12])
              / (float)(unint64_t)((v49 - v48) >> 2);
          if (GPU)
          {
            v66[3] = 0;
            BOOL v15 = cv3d::cv::gess::alg::QuadricErrorMetricSimplify((cv3d::cv::gess::mesh::PolyMesh *)v47, (int *)&v44, (uint64_t)v66);
            std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v66);
          }
          else
          {
            BOOL v15 = 0;
          }
          cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)&v32);
          cv3d::cv::gess::mesh::PolyMesh::CloneFrom((uint64_t *)&v32, v47);
          BOOL v17 = v15
             && cv3d::cv::gess::alg::ComputeLowMeshUV((uint64_t)&v32, (uint64_t)this, __n, (uint64_t)v40, (int *)&v51.__begin_[v12], &v50.__begin_[v12])&& cv3d::cv::gess::alg::InitializeMaterialAttributes((cv3d::cv::gess::alg *)&v32, v16);
          LODWORD(v39[0]) = v51.__begin_[v12];
          std::to_string(&v29, v13);
          int v18 = std::string::insert(&v29, 0, "LOD", 3uLL);
          std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
          v64.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
          char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          v30.__pn_.__r_.__value_.__r.__words[0] = v19;
          *(std::string::size_type *)((char *)&v30.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 7);
          v30.__pn_.__r_.__value_.__l.__size_ = v64.__r_.__value_.__r.__words[0];
          *((unsigned char *)&v30.__pn_.__r_.__value_.__s + 23) = v20;
          std::__fs::filesystem::operator/[abi:ne180100](&v30, (uint64_t)a3, &v31);
          if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          std::__fs::filesystem::__status(&v31, 0);
          BOOL v21 = v30.__pn_.__r_.__value_.__s.__data_[0] == 2 && v17;
          if (v30.__pn_.__r_.__value_.__s.__data_[0] != 2 && v17) {
            BOOL v21 = std::__fs::filesystem::__create_directory(&v31, 0);
          }
          std::to_string(&v28, v13);
          uint64_t v22 = std::string::insert(&v28, 0, "lod", 3uLL);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v64.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          BOOL v24 = std::string::append(&v64, ".obj", 4uLL);
          std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
          v65[0] = v24->__r_.__value_.__l.__size_;
          *(void *)((char *)v65 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
          char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          v29.__r_.__value_.__r.__words[0] = v25;
          *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v65 + 7);
          v29.__r_.__value_.__l.__size_ = v65[0];
          *((unsigned char *)&v29.__r_.__value_.__s + 23) = v26;
          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v29, (uint64_t)&v31, &v30);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v28.__r_.__value_.__l.__data_);
            if (!v21)
            {
LABEL_37:
              BOOL v9 = 0;
              goto LABEL_38;
            }
          }
          else if (!v21)
          {
            goto LABEL_37;
          }
          memset(v63, 0, sizeof(v63));
          memset(v62, 0, sizeof(v62));
          memset(v61, 0, sizeof(v61));
          memset(v60, 0, sizeof(v60));
          memset(v59, 0, sizeof(v59));
          BOOL v9 = cv3d::cv::gess::alg::InternalBake((cv3d::cv::gess::alg *)this, (uint64_t)a2, (uint64_t)&v32, (long long *)&v30, (uint64_t)__p, 0, 0, (cv3d::cv::gess::alg::BakeCallbackBundle *)v59);
          std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v63);
          std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v62);
          std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v61);
          std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v60);
          std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v59);
LABEL_38:
          if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__pn_.__r_.__value_.__l.__data_);
          }
          if (v9)
          {
            ++v14;
            ++v13;
            ++v12;
            LOBYTE(GPU) = 1;
            if (v14 < __n[0]) {
              continue;
            }
          }
          goto LABEL_47;
        }
      }
      BOOL v9 = GPU;
LABEL_47:
      cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v32);
      if (v43 < 0) {
        operator delete(v42);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v39);
      cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v47);
      if (v50.__begin_)
      {
        v50.__end_ = v50.__begin_;
        operator delete(v50.__begin_);
      }
      if (v51.__begin_)
      {
        v51.__end_ = v51.__begin_;
        operator delete(v51.__begin_);
      }
      if (v52.__begin_)
      {
        v52.__end_ = v52.__begin_;
        operator delete(v52.__begin_);
      }
    }
    cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v57);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
  }
  return v9;
}

void sub_24F555C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::alg::ConfigLOD::~ConfigLOD((void **)&STACK[0x498]);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::GenerateLOD(cv3d::cv::gess::alg *this, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *a3, const cv3d::cv::gess::alg::ConfigLOD *a4)
{
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v19);
  v18[0] = 0;
  v18[1] = 0;
  memset(v16, 0, sizeof(v16));
  BOOL v17 = v18;
  __int16 v13 = 1;
  char v14 = 1;
  int v15 = 3;
  if (*((char *)this + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else {
    std::string __p = *(std::string *)this;
  }
  BOOL ObjFile = cv3d::cv::gess::io::LoadObjFile((long long *)&__p, (uint64_t)&v19, (uint64_t)v16, (uint64_t)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a3[5].__pn_.__r_.__value_.__s.__data_[16])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v21[0] = 0;
    v21[1] = 0;
    int v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(&v20, (uint64_t)v21, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9 == -1)
    {
      if (!ObjFile || !cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal(&v19)) {
        goto LABEL_17;
      }
    }
    else if (!ObjFile)
    {
LABEL_17:
      BOOL v10 = 0;
      goto LABEL_18;
    }
  }
  else if (!ObjFile)
  {
    goto LABEL_17;
  }
  BOOL v10 = cv3d::cv::gess::alg::GenerateLOD(&v19, (const cv3d::cv::gess::mesh::TriMesh *)v16, a2, a3, v7);
LABEL_18:
  std::__tree<std::string>::destroy((uint64_t)&v17, v18[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16[1] + 8;
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v19);
  return v10;
}

void sub_24F555FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

cv3d::cv::gess::alg::ConfigLOD *cv3d::cv::gess::alg::ConfigLOD::ConfigLOD(cv3d::cv::gess::alg::ConfigLOD *this)
{
  *(_OWORD *)this = xmmword_24F578F30;
  *((void *)this + 2) = 0x100000100;
  *((void *)this + 3) = 0x3DCCCCCD000000C8;
  *((void *)this + 4) = 0x4100000000000001;
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>((std::string *)((char *)this + 40), (char *)&unk_24F58DDD7);
  *((void *)this + 8) = 0x3F80000000000002;
  *((void *)this + 9) = 0x7F7FFFFF00000000;
  *((unsigned char *)this + 80) = 1;
  cv3d::cv::gess::alg::ConfigOutput::ConfigOutput((cv3d::cv::gess::alg::ConfigLOD *)((char *)this + 88));
  *((_DWORD *)this + 23) = 1;
  *((unsigned char *)this + 96) = 1;
  *((unsigned char *)this + 136) = 1;
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 216) = 0;
  *((unsigned char *)this + 256) = 0;
  *((unsigned char *)this + 296) = 0;
  *((unsigned char *)this + 336) = 0;
  *((unsigned char *)this + 376) = 0;
  *((unsigned char *)this + 416) = 0;
  *((unsigned char *)this + 456) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = 2;
  return this;
}

void sub_24F5560DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

cv3d::cv::gess::mesh::PolyMesh *std::vector<cv3d::cv::gess::mesh::TriMesh>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (cv3d::cv::gess::mesh::PolyMesh *)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (cv3d::cv::gess::mesh::TriMesh *)*((void *)result - 1);
  if (0xD37A6F4DE9BD37A7 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      __int16 v13 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v7 + 184 * a2);
      uint64_t v14 = 184 * a2;
      do
      {
        uint64_t result = cv3d::cv::gess::mesh::TriMesh::TriMesh(v7);
        uint64_t v7 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v7 + 184);
        v14 -= 184;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1642C8590B21642) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xB21642C8590B21) {
      unint64_t v11 = 0x1642C8590B21642;
    }
    else {
      unint64_t v11 = v9;
    }
    BOOL v21 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v15 = (cv3d::cv::gess::mesh::TriMesh *)&v12[184 * v8];
    v18[0] = v12;
    v18[1] = v15;
    std::string::size_type v19 = v15;
    char v20 = &v12[184 * v11];
    uint64_t v16 = 184 * a2;
    BOOL v17 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v15 + 184 * a2);
    do
    {
      cv3d::cv::gess::mesh::TriMesh::TriMesh(v15);
      int v15 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v15 + 184);
      v16 -= 184;
    }
    while (v16);
    std::string::size_type v19 = v17;
    std::vector<cv3d::cv::gess::mesh::TriMesh>::__swap_out_circular_buffer(a1, v18);
    return (cv3d::cv::gess::mesh::PolyMesh *)std::__split_buffer<cv3d::cv::gess::mesh::TriMesh>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_24F55625C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::TriMesh>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::mesh::TriMesh>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::TriMesh>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::TriMesh>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)(a7 + v11 - 184), (void **)(a3 + v11 - 184));
      v11 -= 184;
      *(void *)uint64_t v12 = &unk_2700D7EE8;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_24F556398(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::TriMesh>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<cv3d::cv::gess::mesh::TriMesh>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 184);
    *(void *)(a1 + 16) = i - 184;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<cv3d::cv::gess::mesh::Material>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 72 * a2;
      do
      {
        *(void *)(v7 + 64) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(void *)(v7 + 48) = v7 + 56;
        v7 += 72;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[72 * v8];
    v16[0] = v12;
    v16[1] = v14;
    _OWORD v16[3] = &v12[72 * v11];
    int v15 = &v14[72 * a2];
    do
    {
      *((void *)v14 + 8) = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((void *)v14 + 6) = v14 + 56;
      v14 += 72;
    }
    while (v14 != v15);
    void v16[2] = v15;
    std::vector<cv3d::cv::gess::mesh::Material>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<cv3d::cv::gess::mesh::Material>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_24F556588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::Material>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cv3d::cv::gess::mesh::Material>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = (void *)a2[1];
  while (v4 != v5)
  {
    v6 -= 9;
    v4 -= 72;
    uint64_t result = std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  uint64_t *v3 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material*>(void *result, uint64_t a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  result[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  *(_OWORD *)(result + 3) = *(_OWORD *)(a2 + 24);
  result[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  result[6] = *(void *)(a2 + 48);
  uint64_t v2 = (void *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 56);
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = *(void *)(a2 + 64);
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 48) = v2;
    void *v2 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

uint64_t std::__split_buffer<cv3d::cv::gess::mesh::Material>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

vm_address_t cv3d::cv::gess::alg::custom_vm_allocate_float(cv3d::cv::gess::alg *this)
{
  kern_return_t v2;
  vm_address_t result;
  BOOL v4;
  void *exception;
  std::bad_alloc v6;
  vm_address_t address;

  address = 0;
  vm_size_t v1 = cv3d::cv::gess::alg::internal::aligned_with_page_size(4 * (void)this);
  uint64_t v2 = vm_allocate(*MEMORY[0x263EF8960], &address, v1, 1);
  uint64_t result = address;
  if (v2) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = address == 0;
  }
  if (v4)
  {
    std::bad_alloc::bad_alloc(&v6);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = MEMORY[0x263F8C3B8] + 16;
  }
  return result;
}

void sub_24F5567A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_alloc a9)
{
}

void cv3d::cv::gess::alg::custom_vm_deallocate_float(cv3d::cv::gess::alg *this, float *a2)
{
  cv3d::cv::gess::alg::internal::aligned_with_page_size(4 * a2);

  JUMPOUT(0x25335F1B0);
}

uint64_t cv3d::cv::gess::alg::imgfbuffer2vmbuffer(uint64_t a1, cv3d::cv::gess::alg *this)
{
  int v2 = (int)this;
  uint64_t v4 = this;
  vm_address_t v5 = cv3d::cv::gess::alg::custom_vm_allocate_float((cv3d::cv::gess::alg *)this);
  uint64_t result = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v7 = (_DWORD *)v5;
    uint64_t v8 = *(int **)(a1 + 16);
    do
    {
      int v9 = *v8++;
      *v7++ = v9;
      --v4;
    }
    while (v4);
    goto LABEL_6;
  }
  if (result) {
LABEL_6:
  }
    uint64_t result = MEMORY[0x25335E9F0](result, 0x1000C8052888210);
  *(void *)(a1 + 16) = v5;
  return result;
}

void cv3d::cv::gess::alg::imgfvmbuffer2buffer()
{
}

uint64_t cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution(cv3d::cv::gess::alg *this, float *a2, float *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5 = *a4;
  if (!*a4) {
    cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution();
  }
  unint64_t v6 = *(void *)a3;
  unint64_t v7 = *(void *)this;
  BOOL v8 = v5 == 1;
  if (v5 != 1 && (float)v7 * 0.7999 < (double)(v6 * v6 * (v5 - 1)))
  {
    uint64_t v9 = v5 - 2;
    do
    {
      *a4 = v9 + 1;
      unint64_t v6 = *(void *)a3;
      unint64_t v7 = *(void *)this;
      BOOL v8 = v9 == 0;
      if (!v9) {
        break;
      }
      double v10 = (double)(v6 * v6 * v9--);
    }
    while ((float)v7 * 0.7999 < v10);
  }
  if (v8)
  {
    float v11 = *a2;
    BOOL v12 = *a2 > 0.0001 && v11 < 0.65;
    float v13 = v11 / 0.65;
    if (!v12) {
      float v13 = 1.0;
    }
    if (v6 >= 0x11)
    {
      unint64_t v14 = (unint64_t)(float)(fmaxf(fminf(v13, 1.0), 0.1) * (float)(3 * v7));
      if (v6 * v6 > v14)
      {
        do
        {
          unint64_t v15 = v6;
          v6 >>= 1;
        }
        while (v15 >= 0x22 && v6 * v6 > v14);
        *(void *)a3 = v6;
      }
    }
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::AutoMapNumberAndResolution(cv3d::cv::gess::alg *this, float *a2, float *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)a3;
  if (*(void *)a3 <= 0x4000uLL)
  {
    if (v9 > 0xF) {
      goto LABEL_6;
    }
    unint64_t v9 = 16;
  }
  else
  {
    unint64_t v9 = 0x4000;
  }
  *(void *)a3 = v9;
LABEL_6:
  if ((v9 & (v9 - 1)) != 0)
  {
    unint64_t v9 = (1 << vcvtas_u32_f32(log2f((float)v9)));
    *(void *)a3 = v9;
  }
  if (*a4)
  {
    cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution(this, a2, a3, a4, a5);
    return 1;
  }
  float v10 = (float)*(unint64_t *)this * 0.75;
  float v11 = (float)(v9 * v9);
  if (v9 >= 0x11 && v10 <= (float)(v11 * 0.50001))
  {
    do
    {
      unint64_t v12 = v9;
      v9 >>= 1;
      float v11 = (float)(v9 * v9);
    }
    while (v12 >= 0x22 && v10 <= (float)(v11 * 0.50001));
    *(void *)a3 = v9;
  }
  float v13 = v10 / v11;
  *a4 = (unint64_t)v13;
  if (!(unint64_t)v13)
  {
    unint64_t v14 = 1;
    goto LABEL_20;
  }
  if ((unint64_t)v13 == 1 && v13 > 1.6)
  {
    unint64_t v14 = 2;
LABEL_20:
    *a4 = v14;
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::AutoMapNumberAndResolution(cv3d::cv::gess::alg *this, Material *a2, float *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v23 = 0;
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *((void *)this + 1);
  if (*(void *)this == v7) {
    goto LABEL_19;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = *(void *)(v6 + 32);
    if (v12)
    {
      uint64_t v13 = v6 + 32;
      do
      {
        int v14 = *(_DWORD *)(v12 + 28);
        BOOL v15 = v14 < 1;
        if (v14 >= 1) {
          uint64_t v16 = (uint64_t *)v12;
        }
        else {
          uint64_t v16 = (uint64_t *)(v12 + 8);
        }
        if (!v15) {
          uint64_t v13 = v12;
        }
        uint64_t v12 = *v16;
      }
      while (*v16);
      if (v13 != v6 + 32 && *(int *)(v13 + 28) <= 1)
      {
        int v22 = 1;
        uint64_t v17 = *((void *)this + 3)
            + 48
            * *(unsigned __int16 *)std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(v6 + 24, &v22);
        uint64_t v19 = *(void *)(v17 + 8);
        int v18 = *(std::__shared_weak_count **)(v17 + 16);
        if (v18)
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = v23 + (*(_DWORD *)(v19 + 8) * *(_DWORD *)(v19 + 4));
          uint64_t v23 = v11;
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        else
        {
          uint64_t v11 = v23 + (*(_DWORD *)(v19 + 8) * *(_DWORD *)(v19 + 4));
          uint64_t v23 = v11;
        }
      }
    }
    v6 += 48;
  }
  while (v6 != v7);
  if (!v11)
  {
LABEL_19:
    if (*(void *)a3 <= 0x4000uLL)
    {
      if (*(void *)a3 > 0xFuLL) {
        return 1;
      }
      uint64_t v20 = 16;
    }
    else
    {
      uint64_t v20 = 0x4000;
    }
    *(void *)a3 = v20;
    return 1;
  }
  cv3d::cv::gess::alg::AutoMapNumberAndResolution((cv3d::cv::gess::alg *)&v23, (float *)a2, a3, a4, a5);
  return 1;
}

uint64_t cv3d::cv::gess::alg::InternalBakeHelper(cv3d::cv::gess::alg *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v116, a11);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v114, a11 + 32);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v113, a11 + 64);
  int v107 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  BOOL v14 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a3, &v107, (unsigned __int8 *)__p);
  if (v96 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v107;
  uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)(a3 + 80), (unsigned int *)__p);
  uint64_t v80 = *(void *)(v15 + 40);
  if (*(void *)(v15 + 48) == v80) {
    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
  }
  uint64_t v105 = 0;
  unsigned int __src = 0;
  uint64_t v106 = 0;
  uint64_t v102 = 0;
  unint64_t v101 = 0;
  uint64_t v103 = 0;
  long long v97 = 0uLL;
  int v98 = 0;
  int32x4_t v99 = vdupq_n_s32(0x7F7FFFFFu);
  *(void *)&long long v16 = 0x80000000800000;
  *((void *)&v16 + 1) = 0x80000000800000;
  long long v100 = v16;
  std::string::basic_string[abi:ne180100]<0>(&v94, (char *)&unk_24F58DDD7);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v94, 0, 0);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (&__src != (void **)(a5 + 456)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&__src, *(char **)(a5 + 456), *(void *)(a5 + 464), (uint64_t)(*(void *)(a5 + 464) - *(void *)(a5 + 456)) >> 3);
  }
  cv3d::cv::gess::alg::internal::CustomSortGPU((unint64_t **)&__src);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v101, (char *)__src, (uint64_t)v105, (v105 - (unsigned char *)__src) >> 3);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v13.__d_.__rep_;
  if (v14)
  {
    BOOL GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v101);
    int data = -1;
    LODWORD(v108.__r_.__value_.__l.__data_) = -1;
    if (GPU)
    {
      std::string::basic_string[abi:ne180100]<0>(&v84, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      BOOL v19 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a3, &v108, (unsigned __int8 *)&v84);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      int data = (int)v108.__r_.__value_.__l.__data_;
    }
    else
    {
      BOOL v19 = 0;
    }
  }
  else
  {
    BOOL v19 = 0;
    int data = -1;
    LODWORD(v108.__r_.__value_.__l.__data_) = -1;
  }
  LODWORD(v84.__r_.__value_.__l.__data_) = data;
  uint64_t v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a3 + 80), (unsigned int *)&v84);
  unint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
  if (v115 && ((*(uint64_t (**)(uint64_t))(*(void *)v115 + 48))(v115) & 1) != 0) {
    goto LABEL_145;
  }
  BOOL __val = v19;
  float v79 = (cv3d::cv::gess::alg *)a3;
  if (v81)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    BOOL v24 = (uint64_t *)(a4 + 24);
    do
    {
      LOWORD(v84.__r_.__value_.__l.__data_) = v23;
      std::string::size_type v25 = std::map<unsigned short,std::string>::at(v80, (unsigned __int16 *)&v84);
      if (*((char *)v25 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v92, (const std::string::value_type *)*v25, v25[1]);
      }
      else
      {
        long long v26 = *(_OWORD *)v25;
        *(void *)&v92[16] = v25[2];
        *(_OWORD *)uint64_t v92 = v26;
      }
      *(void *)uint64_t v110 = v92;
      *((_WORD *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 48), (void **)v92, (uint64_t)&std::piecewise_construct, (long long **)v110)+ 28) = v23;
      if ((v92[23] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)v92, *(std::string::size_type *)&v92[8]);
      }
      else {
        std::string v93 = *(std::string *)v92;
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v84, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
        int32x4_t v86 = 0uLL;
        uint64_t v85 = &v86;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string v84 = v93;
        int32x4_t v86 = 0uLL;
        uint64_t v85 = &v86;
      }
      if (*(unsigned char *)(a5 + 64))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 1;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 1;
        unint64_t v27 = *(void *)(a4 + 32);
        if (v27 >= *(void *)(a4 + 40))
        {
          uint64_t v28 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v29 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v28 = v27 + 48;
          uint64_t v29 = a4;
          *(void *)(a4 + 32) = v27 + 48;
        }
        *(void *)(v29 + 32) = v28;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 104))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 2;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 2;
        unint64_t v30 = *(void *)(a4 + 32);
        if (v30 >= *(void *)(a4 + 40))
        {
          uint64_t v31 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v32 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v31 = v30 + 48;
          uint64_t v32 = a4;
          *(void *)(a4 + 32) = v30 + 48;
        }
        *(void *)(v32 + 32) = v31;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 144))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 7;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 7;
        unint64_t v33 = *(void *)(a4 + 32);
        if (v33 >= *(void *)(a4 + 40))
        {
          uint64_t v34 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v35 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v34 = v33 + 48;
          uint64_t v35 = a4;
          *(void *)(a4 + 32) = v33 + 48;
        }
        *(void *)(v35 + 32) = v34;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 224))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 3;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 3;
        unint64_t v36 = *(void *)(a4 + 32);
        if (v36 >= *(void *)(a4 + 40))
        {
          uint64_t v37 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v38 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v37 = v36 + 48;
          uint64_t v38 = a4;
          *(void *)(a4 + 32) = v36 + 48;
        }
        *(void *)(v38 + 32) = v37;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 184))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 4;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 4;
        unint64_t v39 = *(void *)(a4 + 32);
        if (v39 >= *(void *)(a4 + 40))
        {
          uint64_t v40 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v41 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v40 = v39 + 48;
          uint64_t v41 = a4;
          *(void *)(a4 + 32) = v39 + 48;
        }
        *(void *)(v41 + 32) = v40;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 264))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 5;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 5;
        unint64_t v42 = *(void *)(a4 + 32);
        if (v42 >= *(void *)(a4 + 40))
        {
          uint64_t v43 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v44 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v43 = v42 + 48;
          uint64_t v44 = a4;
          *(void *)(a4 + 32) = v42 + 48;
        }
        *(void *)(v44 + 32) = v43;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 304))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 8;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 8;
        unint64_t v45 = *(void *)(a4 + 32);
        if (v45 >= *(void *)(a4 + 40))
        {
          uint64_t v46 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v47 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v46 = v45 + 48;
          uint64_t v47 = a4;
          *(void *)(a4 + 32) = v45 + 48;
        }
        *(void *)(v47 + 32) = v46;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 344))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 11;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 11;
        unint64_t v48 = *(void *)(a4 + 32);
        if (v48 >= *(void *)(a4 + 40))
        {
          uint64_t v49 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v50 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v49 = v48 + 48;
          uint64_t v50 = a4;
          *(void *)(a4 + 32) = v48 + 48;
        }
        *(void *)(v50 + 32) = v49;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      if (*(unsigned char *)(a5 + 384))
      {
        LODWORD(v109.__r_.__value_.__l.__data_) = 13;
        *(void *)uint64_t v110 = &v109;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v85, (int *)&v109, (uint64_t)&std::piecewise_construct, (_DWORD **)v110)+ 16) = v22;
        *(_WORD *)&uint64_t v110[4] = 0;
        memset(&v110[8], 0, 32);
        uint64_t v111 = 0;
        *(_DWORD *)uint64_t v110 = 13;
        unint64_t v51 = *(void *)(a4 + 32);
        if (v51 >= *(void *)(a4 + 40))
        {
          uint64_t v52 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v24, (int *)v110);
          uint64_t v53 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(void *)(a4 + 32), (int *)v110);
          uint64_t v52 = v51 + 48;
          uint64_t v53 = a4;
          *(void *)(a4 + 32) = v51 + 48;
        }
        *(void *)(v53 + 32) = v52;
        if (SHIBYTE(v111) < 0) {
          operator delete(*(void **)&v110[24]);
        }
        if (*(void *)&v110[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v110[16]);
        }
        ++v22;
      }
      unint64_t v54 = *(void *)(a4 + 8);
      if (v54 >= *(void *)(a4 + 16))
      {
        uint64_t v55 = std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__push_back_slow_path<cv3d::cv::gess::mesh::ObjMaterial const&>((uint64_t *)a4, (long long *)&v84);
        uint64_t v56 = a4;
      }
      else
      {
        std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial const&,cv3d::cv::gess::mesh::ObjMaterial*>(*(std::string **)(a4 + 8), (long long *)&v84);
        uint64_t v55 = v54 + 48;
        uint64_t v56 = a4;
        *(void *)(a4 + 8) = v54 + 48;
      }
      *(void *)(v56 + 8) = v55;
      if (v117)
      {
        std::string::basic_string[abi:ne180100]<0>(v110, (char *)&unk_24F58DDD7);
        float v57 = (double)(unint64_t)(v23 + 1) * 10.0 / (double)v81;
        std::function<void ()(float,std::string const&)>::operator()((uint64_t)v116, (uint64_t)v110, v57);
        if ((v110[23] & 0x80000000) != 0) {
          operator delete(*(void **)v110);
        }
      }
      std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v85, v86.i64[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((v92[23] & 0x80000000) != 0) {
        operator delete(*(void **)v92);
      }
      ++v23;
    }
    while (v81 != v23);
  }
  if (v115 && ((*(uint64_t (**)(uint64_t))(*(void *)v115 + 48))(v115) & 1) != 0) {
    goto LABEL_145;
  }
  int v58 = 0;
  memset(v110, 0, 32);
  memset(v92, 0, sizeof(v92));
  memset(&v84, 0, 20);
  *(void *)&long long v59 = 0x80000000800000;
  *((void *)&v59 + 1) = 0x80000000800000;
  int32x4_t v86 = vdupq_n_s32(0x7F7FFFFFu);
  long long v87 = v59;
  if (__val)
  {
    if (cv3d::cv::gess::alg::MeasureGeometryQuality((float32x4_t *)v79, (const cv3d::cv::gess::mesh::PolyMesh *)&v97, (GeometryQuality *)v21))int v58 = cv3d::cv::gess::alg::MeasureTopologyQuality(v79, (const cv3d::cv::gess::mesh::PolyMesh *)v110, v21); {
    else
    }
      int v58 = 0;
  }
  if (v117)
  {
    std::string::basic_string[abi:ne180100]<0>(&v109, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v116, (uint64_t)&v109, 20.0);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
  }
  if (v115 && ((*(uint64_t (**)(uint64_t))(*(void *)v115 + 48))(v115) & 1) != 0) {
    goto LABEL_145;
  }
  if (v58)
  {
    if (cv3d::cv::gess::alg::MeasureGeometryQuality((float32x4_t *)a1, (const cv3d::cv::gess::mesh::PolyMesh *)&v84, (GeometryQuality *)v21))LOBYTE(v58) = cv3d::cv::gess::alg::MeasureTopologyQuality(a1, (const cv3d::cv::gess::mesh::PolyMesh *)v92, v60); {
    else
    }
      LOBYTE(v58) = 0;
  }
  if ((_BYTE)a7)
  {
    long long v61 = v97;
    *(_DWORD *)(a6 + 176) = v98;
    long long v62 = v100;
    *(int32x4_t *)(a6 + 192) = v99;
    *(_OWORD *)(a6 + 208) = v62;
    long long v63 = *(_OWORD *)&v110[16];
    *(_OWORD *)(a6 + 128) = *(_OWORD *)v110;
    *(_OWORD *)(a6 + 144) = v63;
    *(_OWORD *)(a6 + 160) = v61;
    *(_DWORD *)(a6 + 64) = v84.__r_.__value_.__r.__words[2];
    *(_OWORD *)(a6 + 48) = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
    long long v64 = v87;
    *(int32x4_t *)(a6 + 80) = v86;
    *(_OWORD *)(a6 + 96) = v64;
    long long v65 = *(_OWORD *)v92;
    *(_OWORD *)(a6 + 24) = *(_OWORD *)&v92[16];
    *(_OWORD *)(a6 + 8) = v65;
  }
  if (v117)
  {
    std::string::basic_string[abi:ne180100]<0>(&v109, (char *)&unk_24F58DDD7);
    std::function<void ()(float,std::string const&)>::operator()((uint64_t)v116, (uint64_t)&v109, 30.0);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
  }
  if (v115
    && (((*(uint64_t (**)(uint64_t))(*(void *)v115 + 48))(v115) & 1) != 0
     || v115 && ((*(uint64_t (**)(uint64_t))(*(void *)v115 + 48))(v115) & 1) != 0))
  {
LABEL_145:
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
  }
  else
  {
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
    cv3d::cv::gess::util::os::GlobalMemoryLogs(v67);
    v68.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if ((_BYTE)a7) {
      *(double *)(a6 + 280) = (double)(v68.__d_.__rep_ - rep) / 1000000.0 + *(double *)(a6 + 280);
    }
    std::chrono::system_clock::now();
    std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::vector(v91, v81);
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::vector(v90, v81);
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::vector(v89, v81);
    unsigned int v69 = *(_DWORD *)(a5 + 56);
    uint64_t v71 = *((void *)v79 + 19);
    uint64_t v70 = *((void *)v79 + 20);
    std::string::basic_string[abi:ne180100]<0>(&v88, (char *)&unk_24F58DDD7);
    unint64_t v72 = v69 * (unint64_t)v69;
    unint64_t v73 = ((unint64_t)(v70 - v71) >> 1) + ((unint64_t)(v70 - v71) >> 2);
    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v88, 21 * v72 * v81 + 16 * v72 + 12 * v72 + 2 * (v70 - v71 + 4 * v73), v70 - v71 + 16 * v72 + 8 * v72 + 4 * (v70 - v71 + v72) + 4 * v73);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (v81)
    {
      uint64_t v74 = v91[0];
      *(int32x2_t *)(v91[0] + 4) = vdup_n_s32(v69);
      *(_DWORD *)(v74 + 12) = 1;
      cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory(v74);
    }
    if (v58)
    {
      std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v112, (uint64_t)v113);
      cv3d::cv::gess::alg::internal::RasterizeSurface((uint64_t)v79, (uint64_t)v91, (uint64_t)v90, (uint64_t)v89, (uint64_t)&__src, a6, a7, a5 + 480, (uint64_t)v112);
    }
    if (v117)
    {
      std::string::basic_string[abi:ne180100]<0>(&v84, (char *)&unk_24F58DDD7);
      std::function<void ()(float,std::string const&)>::operator()((uint64_t)v116, (uint64_t)&v84, 55.0);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
    }
    if (v115) {
      (*(uint64_t (**)(uint64_t))(*(void *)v115 + 48))(v115);
    }
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
    __p[0] = v89;
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v90;
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v91;
    std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
  if (__src)
  {
    uint64_t v105 = __src;
    operator delete(__src);
  }
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v113);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v114);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v116);
  return 0;
}

void sub_24F55F348()
{
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  __cxa_end_catch();
  JUMPOUT(0x24F55F378);
}

void sub_24F55F36C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x24F559834);
}

void cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::AllocateMemory(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    MEMORY[0x25335E9F0](v1, 0x1000C80451B5BE8);
  }
  operator new[]();
}

uint64_t std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__push_back_slow_path<cv3d::cv::gess::util::os::MemoryLogItem const&>(a1, a2);
  }
  else
  {
    std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__construct_one_at_end[abi:ne180100]<cv3d::cv::gess::util::os::MemoryLogItem const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 184;
  }
  a1[1] = result;
  return result;
}

void std::vector<cv3d::cv::gess::mesh::Texture>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<cv3d::cv::gess::mesh::Texture>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v3);
    }
    a1[1] = v7;
  }
}

cv3d::cv::gess::io::ImageSaveFormat *cv3d::cv::gess::io::ImageSaveFormat::ImageSaveFormat(cv3d::cv::gess::io::ImageSaveFormat *this)
{
  int v2 = std::string::basic_string[abi:ne180100]<0>(this, "uchar");
  *((_WORD *)v2 + 12) = 100;
  std::string::basic_string[abi:ne180100]<0>(v2 + 4, ".jpg");
  return this;
}

void sub_24F55F5A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double cv3d::cv::gess::alg::CopyConfigMapToImageSaveFormat(uint64_t a1, uint64_t a2)
{
  double v3 = *(float *)(a1 + 32) * 100.0;
  if (v3 < 1.0) {
    double v3 = 1.0;
  }
  if (v3 > 100.0) {
    double v3 = 100.0;
  }
  *(_WORD *)(a2 + 24) = (int)v3;
  std::operator+<char>();
  unint64_t v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&v6;
  *(_OWORD *)unint64_t v4 = v6;
  *(void *)(a2 + 48) = v7;
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  float v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

uint64_t std::vector<std::__fs::filesystem::path>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(a1, a2);
  }
  else
  {
    std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(a1, a2);
    uint64_t result = v3 + 24;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t cv3d::cv::gess::mesh::Texture::SetImage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    uint64_t v3 = *(void *)(a1 + 8);
  }
  BOOL v6 = v3 && *(void *)(v3 + 16);
  *(unsigned char *)(a1 + 4) = v6;
  return 1;
}

BOOL cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::alg *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, const cv3d::cv::gess::alg::BakeCallbackBundle *a8)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(float,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v93, (uint64_t)a8);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v91, (uint64_t)a8 + 32);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::__value_func[abi:ne180100]((uint64_t)v90, (uint64_t)a8 + 64);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::__value_func[abi:ne180100]((uint64_t)v88, (uint64_t)a8 + 128);
  uint64_t v15 = (char *)operator new(0x60uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_2700D9070;
  *(_OWORD *)(v15 + 24) = 0u;
  long long v16 = (uint64_t *)(v15 + 24);
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((void *)v15 + cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(this + 11) = 0;
  *((void *)v15 + 9) = v15 + 80;
  unsigned int v87[3] = 0;
  if (v94)
  {
    v76[0] = (void **)&unk_2700D9638;
    v76[1] = (void **)v93;
    v76[3] = (void **)v76;
    std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](v76, v87);
    std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v76);
  }
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v82, a8);
  std::function<void ()(float,std::string const&)>::operator=(v82, (uint64_t)v87);
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v77, (const cv3d::cv::gess::alg::BakeCallbackBundle *)v82);
  int v18 = cv3d::cv::gess::alg::InternalBakeHelper(a1, a2, a3, (uint64_t)v16, a5, a6, a7, v17, (uint64_t)&v65, 1, (uint64_t)v77);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v81);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v80);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v79);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v78);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v77);
  if (v92 && ((*(uint64_t (**)(uint64_t))(*(void *)v92 + 48))(v92) & 1) != 0) {
    goto LABEL_118;
  }
  int v48 = a7;
  v47.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_24F58DDD7);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v76, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v60 = 1;
  __int16 v61 = 256;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v62);
  v59[0] = 1;
  LODWORD(v58.__r_.__value_.__l.__data_) = 1;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  BOOL v19 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v63, (int *)&v58, (uint64_t)&std::piecewise_construct, &v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D9680;
  unsigned int v69 = &v68;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](&v68, v19 + 5);
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](&v68);
  LODWORD(v58.__r_.__value_.__l.__data_) = 2;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  uint64_t v20 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v63, (int *)&v58, (uint64_t)&std::piecewise_construct, &v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D9680;
  unsigned int v69 = &v68;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](&v68, v20 + 5);
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](&v68);
  LODWORD(v58.__r_.__value_.__l.__data_) = 3;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  BOOL v21 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v63, (int *)&v58, (uint64_t)&std::piecewise_construct, &v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D9680;
  unsigned int v69 = &v68;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](&v68, v21 + 5);
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](&v68);
  LODWORD(v58.__r_.__value_.__l.__data_) = 4;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  uint64_t v22 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v63, (int *)&v58, (uint64_t)&std::piecewise_construct, &v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D9680;
  unsigned int v69 = &v68;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](&v68, v22 + 5);
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](&v68);
  LODWORD(v58.__r_.__value_.__l.__data_) = 5;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  uint64_t v23 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v63, (int *)&v58, (uint64_t)&std::piecewise_construct, &v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D9680;
  unsigned int v69 = &v68;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](&v68, v23 + 5);
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](&v68);
  LODWORD(v58.__r_.__value_.__l.__data_) = 7;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  BOOL v24 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v63, (int *)&v58, (uint64_t)&std::piecewise_construct, &v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D9680;
  unsigned int v69 = &v68;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](&v68, v24 + 5);
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](&v68);
  LODWORD(v58.__r_.__value_.__l.__data_) = 13;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::string::size_type v25 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v63, (int *)&v58, (uint64_t)&std::piecewise_construct, &v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2700D9680;
  unsigned int v69 = &v68;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](&v68, v25 + 5);
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__value_func[abi:ne180100](&v68);
  if (v18)
  {
    cv3d::cv::gess::alg::CopyAllConfigMapToImageSaveFormat((cv3d::cv::gess::alg *)(a5 + 56), (const cv3d::cv::gess::alg::ConfigOutput *)v62, v26);
    if (*((char *)a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a4, *((void *)a4 + 1));
    }
    else {
      std::string v68 = *(std::string *)a4;
    }
    int v18 = cv3d::cv::gess::io::SaveObjFile((char *)&v68, a3, v16, (uint64_t)v59);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v27 = v66;
  if ((unint64_t)v66 >= v67)
  {
    uint64_t v29 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v65, a4);
  }
  else
  {
    if (*((char *)a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)a4, *((void *)a4 + 1));
    }
    else
    {
      long long v28 = *a4;
      v66->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
    }
    uint64_t v29 = v27 + 1;
  }
  uint64_t v66 = v29;
  if (*((char *)a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else {
    std::string v58 = *(std::string *)a4;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&v68, ".mtl");
  unint64_t v30 = std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v58, (const std::__fs::filesystem::path *)&v68);
  uint64_t v31 = v66;
  if ((unint64_t)v66 >= v67)
  {
    unint64_t v33 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v65, (long long *)v30);
  }
  else
  {
    if (SHIBYTE(v30->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v66, v30->__pn_.__r_.__value_.__l.__data_, v30->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v32 = *(_OWORD *)&v30->__pn_.__r_.__value_.__l.__data_;
      v66->__r_.__value_.__r.__words[2] = v30->__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
    }
    unint64_t v33 = v31 + 1;
  }
  uint64_t v66 = v33;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a5 + 424)) {
    int v34 = v18;
  }
  else {
    int v34 = 0;
  }
  if (v34 != 1)
  {
LABEL_104:
    if (v94
      && (std::string::basic_string[abi:ne180100]<0>(&v68, (char *)&unk_24F58DDD7),
          std::function<void ()(float,std::string const&)>::operator()((uint64_t)v93, (uint64_t)&v68, 100.0),
          SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0))
    {
      operator delete(v68.__r_.__value_.__l.__data_);
      if (v18) {
        goto LABEL_107;
      }
    }
    else if (v18)
    {
LABEL_107:
      if (v89) {
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v89 + 48))(v89, &v65);
      }
      int v18 = 1;
    }
    char v42 = 1;
    goto LABEL_113;
  }
  if (*((char *)a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else {
    std::string v57 = *(std::string *)a4;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&v68, ".usda");
  std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v57, (const std::__fs::filesystem::path *)&v68);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption((cv3d::cv::gess::io::SaveUsdOption *)&v68, (const cv3d::cv::gess::io::SaveObjOption *)v59);
  std::string::operator=(&v71, (const std::string *)(a5 + 512));
  uint64_t v72 = *(void *)(a5 + 536);
  int v73 = *(_DWORD *)(a5 + 544);
  if (v75 < 0)
  {
    v74[1] = (void *)13;
    uint64_t v35 = (char *)v74[0];
  }
  else
  {
    uint64_t v35 = (char *)v74;
    char v75 = 13;
  }
  strcpy(v35, "ObjectCapture");
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v56, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v56 = v57;
  }
  cv3d::cv::gess::io::SaveUsdaFile((uint64_t)&v56, a3, v16, (uint64_t)&v68);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  uint64_t v36 = *(unsigned __int8 *)(a5 + 455);
  int v37 = (char)v36;
  if ((v36 & 0x80u) != 0) {
    uint64_t v36 = *(void *)(a5 + 440);
  }
  if (v36 == 4)
  {
    uint64_t v38 = v37 >= 0 ? (_DWORD *)(a5 + 432) : *(_DWORD **)(a5 + 432);
    if (*v38 == 1633973109) {
      goto LABEL_84;
    }
  }
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    std::string v56 = *(std::string *)a4;
LABEL_57:
    std::__fs::filesystem::path v55 = *(std::__fs::filesystem::path *)a4;
    goto LABEL_58;
  }
  std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  if ((*((char *)a4 + 23) & 0x80000000) == 0) {
    goto LABEL_57;
  }
  std::string::__init_copy_ctor_external(&v55.__pn_, *(const std::string::value_type **)a4, *((void *)a4 + 1));
LABEL_58:
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".usdc");
  std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v56, &__replacement);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".usdz");
  std::__fs::filesystem::path::replace_extension(&v55, &__replacement);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  }
  int v53 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__replacement, (char *)&unk_24F58DDD7);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = v57;
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v51, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string v51 = v56;
  }
  if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v55.__pn_.__r_.__value_.__l.__data_, v55.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v55.__pn_;
  }
  char v39 = cv3d::cv::gess::io::UsdzConvert((uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&pn, &v53, &__replacement.__pn_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if (v39) {
      goto LABEL_77;
    }
  }
  else if (v39)
  {
LABEL_77:
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    int v18 = 1;
LABEL_84:
    char v40 = 1;
    goto LABEL_98;
  }
  if (v48) {
    *(_DWORD *)(a6 + 384) = v53;
  }
  if (v90[3])
  {
    int v41 = v53;
    std::string::basic_string[abi:ne180100]<0>(&v52, (char *)&unk_24F58DDD7);
    std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()((uint64_t)v90, v41);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  int v18 = 0;
  char v40 = 0;
LABEL_98:
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v70, v70[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)&v68.__r_.__value_.__r.__words[2], v69);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v40) {
      goto LABEL_104;
    }
  }
  else if (v40)
  {
    goto LABEL_104;
  }
  char v42 = 0;
LABEL_113:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v63, v63[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v62, v62[1]);
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v76);
  BOOL v44 = v18 != 0;
  if ((v42 & 1) == 0)
  {
LABEL_118:
    BOOL v44 = 0;
    goto LABEL_119;
  }
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v43);
  v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v48) {
    *(double *)(a6 + 376) = (double)(v45.__d_.__rep_ - v47.__d_.__rep_) / 1000000.0;
  }
LABEL_119:
  v76[0] = (void **)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v76);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v86);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v85);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v84);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v83);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v82);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v87);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v88);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v90);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v91);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v93);
  return v44;
}

void sub_24F5603C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption(&a71);
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a58);
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)&STACK[0x238]);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a16) {
      *(_DWORD *)(a17 + 384) = 1;
    }
    if (*(void *)(v72 - 168))
    {
      std::string::basic_string[abi:ne180100]<0>(&STACK[0x238], (char *)&unk_24F58DDD7);
      std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::operator()(v72 - 192, 1);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        operator delete((void *)STACK[0x238]);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x24F5602C0);
  }
  STACK[0x238] = (unint64_t)&a70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x238]);
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&STACK[0x3A0]);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100]((void *)(v72 - 256));
  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100]((void *)(v72 - 224));
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100]((void *)(v72 - 192));
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v72 - 160));
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100]((void *)(v72 - 128));
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::CopyAllConfigMapToImageSaveFormat(cv3d::cv::gess::alg *this, const cv3d::cv::gess::alg::ConfigOutput *a2, cv3d::cv::gess::io::SaveMtlOption *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "uchar");
  __int16 v50 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v51, ".jpg");
  double v5 = *((float *)this + 10) * 100.0;
  if (v5 < 1.0) {
    double v5 = 1.0;
  }
  if (v5 > 100.0) {
    double v5 = 100.0;
  }
  __int16 v50 = (int)v5;
  std::operator+<char>();
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  std::string v51 = v46;
  std::string::basic_string[abi:ne180100]<0>(&v46, "uchar");
  __int16 v47 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v48, ".jpg");
  double v6 = *((float *)this + 20) * 100.0;
  if (v6 < 1.0) {
    double v6 = 1.0;
  }
  if (v6 > 100.0) {
    double v6 = 100.0;
  }
  __int16 v47 = (int)v6;
  std::operator+<char>();
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::string v48 = v43;
  std::string::basic_string[abi:ne180100]<0>(&v43, "uchar");
  __int16 v44 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v45, ".jpg");
  double v7 = *((float *)this + 50) * 100.0;
  if (v7 < 1.0) {
    double v7 = 1.0;
  }
  if (v7 > 100.0) {
    double v7 = 100.0;
  }
  __int16 v44 = (int)v7;
  std::operator+<char>();
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::string v45 = v40;
  std::string::basic_string[abi:ne180100]<0>(&v40, "uchar");
  __int16 v41 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v42, ".jpg");
  double v8 = *((float *)this + 40) * 100.0;
  if (v8 < 1.0) {
    double v8 = 1.0;
  }
  if (v8 > 100.0) {
    double v8 = 100.0;
  }
  __int16 v41 = (int)v8;
  std::operator+<char>();
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  std::string v42 = v37;
  std::string::basic_string[abi:ne180100]<0>(&v37, "uchar");
  __int16 v38 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v39, ".jpg");
  double v9 = *((float *)this + 60) * 100.0;
  if (v9 < 1.0) {
    double v9 = 1.0;
  }
  if (v9 > 100.0) {
    double v9 = 100.0;
  }
  __int16 v38 = (int)v9;
  std::operator+<char>();
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  std::string v39 = v34;
  std::string::basic_string[abi:ne180100]<0>(&v34, "uchar");
  __int16 v35 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v36, ".jpg");
  double v10 = *((float *)this + 30) * 100.0;
  if (v10 < 1.0) {
    double v10 = 1.0;
  }
  if (v10 > 100.0) {
    double v10 = 100.0;
  }
  __int16 v35 = (int)v10;
  std::operator+<char>();
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  std::string v36 = v31;
  std::string::basic_string[abi:ne180100]<0>(&v31, "uchar");
  __int16 v32 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v33, ".jpg");
  double v11 = *((float *)this + 70) * 100.0;
  if (v11 < 1.0) {
    double v11 = 1.0;
  }
  if (v11 > 100.0) {
    double v11 = 100.0;
  }
  __int16 v32 = (int)v11;
  std::operator+<char>();
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::string v33 = v28;
  std::string::basic_string[abi:ne180100]<0>(&v28, "uchar");
  __int16 v29 = 100;
  std::string::basic_string[abi:ne180100]<0>(&__p, ".jpg");
  double v12 = *((float *)this + 80) * 100.0;
  if (v12 < 1.0) {
    double v12 = 1.0;
  }
  if (v12 > 100.0) {
    double v12 = 100.0;
  }
  __int16 v29 = (int)v12;
  std::operator+<char>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v25;
  std::string::basic_string[abi:ne180100]<0>(&v25, "uchar");
  __int16 v26 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v27, ".jpg");
  double v13 = *((float *)this + 90) * 100.0;
  if (v13 < 1.0) {
    double v13 = 1.0;
  }
  if (v13 > 100.0) {
    double v13 = 100.0;
  }
  __int16 v26 = (int)v13;
  std::operator+<char>();
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  std::string v27 = v52;
  int v24 = 1;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  BOOL v14 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v14 + 5), &__str);
  *((_WORD *)v14 + 32) = v50;
  std::string::operator=((std::string *)v14 + 3, &v51);
  int v24 = 2;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  uint64_t v15 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v15 + 5), &v46);
  *((_WORD *)v15 + 32) = v47;
  std::string::operator=((std::string *)v15 + 3, &v48);
  int v24 = 3;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  long long v16 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v16 + 5), &v43);
  *((_WORD *)v16 + 32) = v44;
  std::string::operator=((std::string *)v16 + 3, &v45);
  int v24 = 4;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  uint64_t v17 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v17 + 5), &v40);
  *((_WORD *)v17 + 32) = v41;
  std::string::operator=((std::string *)v17 + 3, &v42);
  int v24 = 5;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  int v18 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v18 + 5), &v37);
  *((_WORD *)v18 + 32) = v38;
  std::string::operator=((std::string *)v18 + 3, &v39);
  int v24 = 7;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  BOOL v19 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v19 + 5), &v34);
  *((_WORD *)v19 + 32) = v35;
  std::string::operator=((std::string *)v19 + 3, &v36);
  int v24 = 8;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  uint64_t v20 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v20 + 5), &v31);
  *((_WORD *)v20 + 32) = v32;
  std::string::operator=((std::string *)v20 + 3, &v33);
  int v24 = 11;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  BOOL v21 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v21 + 5), &v28);
  *((_WORD *)v21 + 32) = v29;
  std::string::operator=((std::string *)v21 + 3, &__p);
  int v24 = 13;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  uint64_t v22 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v22 + 5), &v25);
  *((_WORD *)v22 + 32) = v26;
  std::string::operator=((std::string *)v22 + 3, &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_24F5610A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&__p);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a20);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a27);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a34);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a41);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a48);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a55);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat((void **)(v55 - 232));
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat((void **)(v55 - 176));
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::InternalBake(cv3d::cv::gess::alg *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, cv3d::cv::gess::alg::BakeCallbackBundle *a8)
{
  void v23[4] = *MEMORY[0x263EF8340];
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v19, a8);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, (char *)&unk_24F58DDD7);
  uint64_t v16 = cv3d::cv::gess::alg::InternalBakeHelper(a1, a2, a3, a4, a5, a6, a7, v15, 0, 0, (uint64_t)v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v23);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v19);
  return v16;
}

void sub_24F561390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&a21);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::InternalBake(cv3d::cv::gess::alg *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, cv3d::cv::gess::alg::BakeCallbackBundle *a8)
{
  void v21[4] = *MEMORY[0x263EF8340];
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v17, a8);
  BOOL v15 = cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(a1, a2, a3, a4, a5, a6, a7, (const cv3d::cv::gess::alg::BakeCallbackBundle *)v17);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v17);
  return v15;
}

void sub_24F5614B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)va);
  _Unwind_Resume(a1);
}

void *std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F561560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 24)
  {
    uint64_t result = *(void *)(i - 8);
    if (result)
    {
      uint64_t result = MEMORY[0x25335E9F0](result, 0x1000C80451B5BE8);
      *(void *)(i - 8) = 0;
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<cv3d::cv::gess::mesh::Texture>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 48 * a2;
      uint64_t v14 = 48 * a2;
      uint64_t v15 = v7 + 8;
      do
      {
        *(_WORD *)(v15 - 4) = 0;
        *(_OWORD *)uint64_t v15 = 0uLL;
        *(_OWORD *)(v15 + 16) = 0uLL;
        *(void *)(v15 + 32) = 0;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = *(void *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(result, v11);
    }
    else {
      double v12 = 0;
    }
    BOOL v19 = v12;
    uint64_t v20 = &v12[48 * v8];
    uint64_t v22 = &v12[48 * v11];
    uint64_t v16 = &v20[48 * a2];
    uint64_t v17 = 48 * a2;
    int v18 = v20 + 8;
    do
    {
      *((_WORD *)v18 - 2) = 0;
      *(_OWORD *)int v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      *((void *)v18 + 4) = 0;
      v18 += 48;
      v17 -= 48;
    }
    while (v17);
    BOOL v21 = v16;
    std::vector<cv3d::cv::gess::mesh::Texture>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<cv3d::cv::gess::mesh::Texture>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_24F56178C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::Texture>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2700D9638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2700D9638;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::operator()(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  if (*(void *)(result + 24))
  {
    float v4 = *a2 / 100.0 * 95.0;
    return std::function<void ()(float,std::string const&)>::operator()(result, a3, v4);
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__func()
{
}

void *std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2700D9680;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2700D9680;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  int v3 = *(char *)(a2 + 23);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v3 < 0) {
    operator delete(v2);
  }
  return 1;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, int **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t *)v5;
        int v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    unint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, int **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_24F561A30(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = v3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  float v4 = (void *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "uchar");
  *(_WORD *)(a1 + 32) = 100;
  std::string::basic_string[abi:ne180100]<0>(v4, ".jpg");
  return a1;
}

void sub_24F561AC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::SupportsBaking()
{
}

void sub_24F561C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, id *a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::Bake(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, cv3d::cv::gess::alg::BakeCallbackBundle *a6)
{
  void v18[4] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a5 + 24)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v10 = *(void *)(a5 + 8);
  unint64_t v11 = *(_Unwind_Exception **)(a5 + 16);
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v14, a6);
  BOOL v12 = cv3d::cv::gess::alg::internal::DetailMap(a1, a2, a3, a4, v10, v11, (uint64_t)v14);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v14);
  return v12;
}

void sub_24F561DD8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,long long a36,long long a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,uint64_t a43,int32x4_t a44,long long a45,long long a46,long long a47,long long a48,long long a49,int a50,uint64_t a51,int32x4_t a52,long long a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,long long a58,long long a59,long long a60,long long a61)
{
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)(v67 - 248));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (*(_DWORD *)(v66 + 24) == 1)
    {
      uint64_t v70 = *(const std::__fs::filesystem::path **)(v66 + 8);
      a40 = 0;
      a41 = 0;
      a36 = 0u;
      a37 = 0u;
      a38 = 0;
      *(void *)&long long v71 = 0x80000000800000;
      *((void *)&v71 + 1) = 0x80000000800000;
      a44 = vdupq_n_s32(0x7F7FFFFFu);
      a45 = v71;
      a46 = 0u;
      a47 = 0u;
      a48 = 0u;
      a49 = 0u;
      a42 = 0;
      a50 = 0;
      a52 = a44;
      a53 = v71;
      a55 = 0;
      a56 = 0;
      a54 = 0;
      *(long long *)((char *)&a61 + 12) = 0u;
      a60 = 0u;
      a61 = 0u;
      a58 = 0u;
      a59 = 0u;
      a57 = 0;
      LODWORD(STACK[0x240]) = 0;
      *(_OWORD *)&STACK[0x220] = 0u;
      *(_OWORD *)&STACK[0x230] = 0u;
      *(_OWORD *)&STACK[0x210] = xmmword_24F578FC0;
      cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&a16, v65);
      BOOL v72 = cv3d::cv::gess::alg::internal::DetailMap(v64, v63, v62, v61, (uint64_t)&a36, (_Unwind_Exception *)1, (uint64_t)&a16);
      cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&a16);
      std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>((std::string *)&__p, (char *)&unk_24F58DDD7);
      v74.__data_ = (const std::string_view::value_type *)&__p;
      BOOL v73 = std::__fs::filesystem::operator==[abi:ne180100](v70, v74);
      if (a15 < 0) {
        operator delete(__p);
      }
      if (!v73 && v72) {
        cv3d::cv::gess::io::SaveToJson((uint64_t)&a36);
      }
      __cxa_end_catch();
      JUMPOUT(0x24F561D90);
    }
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  _Unwind_Resume(a1);
}

void sub_24F561F20(_Unwind_Exception *a1)
{
}

void sub_24F561F4C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x24F561F54);
  }
  __clang_call_terminate(a1);
}

uint64_t cv3d::cv::gess::alg::Bake(cv3d::cv::gess::mesh::PolyMesh *a1, cv3d::cv::gess::alg *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, const cv3d::cv::gess::alg::BakeCallbackBundle *a9)
{
  void v24[4] = *MEMORY[0x263EF8340];
  v19[0] = a3;
  v19[1] = a4;
  if (*(_DWORD *)(a8 + 24)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v14 = *(void *)(a8 + 8);
  uint64_t v15 = *(void *)(a8 + 16);
  std::optional<cv3d::cv::gess::mesh::TriMesh const>::optional[abi:ne180100]<std::reference_wrapper<cv3d::cv::gess::mesh::TriMesh const>,0>((cv3d::cv::gess::mesh::PolyMesh *)v18, (uint64_t)v19);
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v20, a9);
  uint64_t v16 = cv3d::cv::gess::alg::internal::DetailMap(a1, a2, (uint64_t)v18, a5, a6, a7, v14, v15, (const cv3d::cv::gess::alg::BakeCallbackBundle *)v20);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v24);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v23);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v20);
  if (v18[184]) {
    cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v18);
  }
  return v16;
}

#error "24F56219C: call analysis failed (funcsize=97)"

void sub_24F562224(_Unwind_Exception *a1)
{
}

void sub_24F562268(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x24F562270);
  }
  __clang_call_terminate(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
}

cv3d::cv::gess::mesh::PolyMesh *std::optional<cv3d::cv::gess::mesh::TriMesh const>::optional[abi:ne180100]<std::reference_wrapper<cv3d::cv::gess::mesh::TriMesh const>,0>(cv3d::cv::gess::mesh::PolyMesh *this, uint64_t a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 184) = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    cv3d::cv::gess::mesh::PolyMesh::PolyMesh(this, *(void ***)a2);
    *(void *)this = &unk_2700D7EE8;
    *((unsigned char *)this + 184) = 1;
  }
  return this;
}

void sub_24F562334(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 184)) {
    cv3d::cv::gess::mesh::TriMesh::~TriMesh(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::ModelSimplification(uint64_t a1, long long *a2, int *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v13);
  int v6 = *a3;
  unsigned int v7 = a3[1];
  if (*a3 >= 0x64) {
    int v8 = 100;
  }
  else {
    int v8 = *a3;
  }
  v13[0] = 0;
  v13[1] = v8;
  v13[2] = v6;
  uint64_t v14 = 0xA00000001;
  uint64_t v15 = 0x13F800000;
  uint64_t v16 = 0x240800000;
  uint64_t v17 = v7 | 0x100000000;
  char v22 = 0;
  char v21 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  char v27 = 0;
  char v28 = 0;
  char v18 = 1;
  if (v20 < 0)
  {
    v19[1] = 3;
    int v9 = (_DWORD *)v19[0];
  }
  else
  {
    int v9 = v19;
    char v20 = 3;
  }
  *int v9 = 6778480;
  char v29 = 0;
  char v34 = 1;
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, (char *)&unk_24F58DDD7);
  memset(v41, 0, sizeof(v41));
  memset(v40, 0, sizeof(v40));
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  memset(v37, 0, sizeof(v37));
  BOOL v10 = cv3d::cv::gess::alg::internal::DetailMap(a1, (uint64_t)&__p, a2, (uint64_t)v13, 0, 0, (uint64_t)v37);
  std::__function::__value_func<void ()(std::vector<std::__fs::filesystem::path> const&)>::~__value_func[abi:ne180100](v41);
  std::__function::__value_func<BOOL ()(std::__fs::filesystem::path const&,cv3d::cv::gess::util::Imagef const&)>::~__value_func[abi:ne180100](v40);
  std::__function::__value_func<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>::~__value_func[abi:ne180100](v39);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v38);
  std::__function::__value_func<void ()(float,std::string const&)>::~__value_func[abi:ne180100](v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v30)
  {
    std::string v31 = v30;
    operator delete(v30);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput((void **)&v17);
  return v10;
}

void sub_24F562538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)(v15 - 224));
  if (a14 < 0) {
    operator delete(__p);
  }
  cv3d::cv::gess::alg::ConfigBake::~ConfigBake(&a15);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::SplitLongEdges(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, double a3, double a4, double a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v9 = *((void *)this + 16);
  uint64_t v8 = *((void *)this + 17);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  BOOL v10 = (uint64_t *)((char *)this + 32);
  LOBYTE(v60) = 0;
  unsigned int v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)this + 4, (uint64_t)&v60, (unsigned __int8 *)__p);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 2);
  if (v64 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = -858993459 * ((v8 - v9) >> 2);
  LOBYTE(v60) = 0;
  std::vector<BOOL>::vector(__p, v12, (unsigned __int8 *)&v60);
  int v60 = 0;
  uint64_t v61 = 0;
  long long v62 = 0;
  std::vector<cv3d::cv::gess::mesh::Vertex>::reserve(&v60, (unint64_t)((double)v12 * 0.1));
  if (v12)
  {
    unint64_t v14 = 0;
    unsigned int v57 = 0;
    float v15 = a3 * a3;
    double v16 = a4 * a4 * v15;
    do
    {
      unint64_t v17 = v14 >> 6;
      uint64_t v18 = 1 << v14;
      if ((*((void *)__p[0] + (v14 >> 6)) & (1 << v14)) == 0)
      {
        if (v11 == -1) {
          goto LABEL_14;
        }
        unsigned int v65 = v11;
        uint64_t v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v10, &v65);
        if (*(void *)(v19 + 48) <= v14) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        if ((*(void *)(*(void *)(v19 + 40) + 8 * v17) & v18) == 0)
        {
          v68[0] = v14;
          if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v68) == -1) {
            goto LABEL_14;
          }
          unsigned int v65 = v11;
          char v20 = v10;
          uint64_t v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v10, &v65);
          unsigned int v59 = v14;
          unint64_t v22 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v59);
          if (*(void *)(v21 + 48) <= v22) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          uint64_t v23 = *(void *)(*(void *)(v21 + 40) + ((v22 >> 3) & 0x1FFFFFF8)) >> v22;
          BOOL v10 = v20;
          if ((v23 & 1) == 0)
          {
LABEL_14:
            unsigned int v65 = v14;
            *((void *)__p[0] + v17) |= v18;
            char v24 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v65);
            *(void *)((char *)__p[0] + (((unint64_t)*v24 >> 3) & 0x1FFFFFF8)) |= 1 << *v24;
            char v25 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v65);
            if ((*v25 & v26) == 0)
            {
              char v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v65);
              char v28 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), *v27);
              if ((*v28 & v29) == 0)
              {
                unint64_t v30 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v65);
                uint64_t v31 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v30);
                float32x4_t v58 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v31 + 12));
                uint64_t v32 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v65);
                float32x4_t v33 = vsubq_f32(v58, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v32 + 12)));
                float32x4_t v34 = vmulq_f32(v33, v33);
                v34.i32[3] = 0;
                if (v16 < vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)))
                {
                  __int16 v35 = v61;
                  if (v61 >= v62)
                  {
                    uint64_t v37 = (v61 - (unsigned char *)v60) >> 2;
                    if ((unint64_t)(v37 + 1) >> 62) {
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v38 = (v62 - (unsigned char *)v60) >> 1;
                    if (v38 <= v37 + 1) {
                      unint64_t v38 = v37 + 1;
                    }
                    if ((unint64_t)(v62 - (unsigned char *)v60) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v39 = v38;
                    }
                    if (v39) {
                      std::string v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v62, v39);
                    }
                    else {
                      std::string v40 = 0;
                    }
                    __int16 v41 = &v40[4 * v37];
                    *(_DWORD *)__int16 v41 = v65;
                    char v36 = v41 + 4;
                    std::string v43 = (char *)v60;
                    uint64_t v42 = v61;
                    if (v61 != v60)
                    {
                      do
                      {
                        int v44 = *((_DWORD *)v42 - 1);
                        v42 -= 4;
                        *((_DWORD *)v41 - 1) = v44;
                        v41 -= 4;
                      }
                      while (v42 != v43);
                      uint64_t v42 = (char *)v60;
                    }
                    int v60 = v41;
                    uint64_t v61 = v36;
                    long long v62 = &v40[4 * v39];
                    if (v42) {
                      operator delete(v42);
                    }
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v61 = v65;
                    char v36 = v35 + 4;
                  }
                  uint64_t v61 = v36;
                  ++v57;
                }
              }
            }
          }
        }
      }
      ++v14;
    }
    while (v14 != v13);
  }
  else
  {
    unsigned int v57 = 0;
  }
  unint64_t v45 = v61 - (unsigned char *)v60;
  unint64_t v46 = (unint64_t)(v61 - (unsigned char *)v60) >> 2;
  uint64_t v47 = (*((void *)this + 14) - *((void *)this + 13)) >> 2;
  uint64_t v49 = *((void *)this + 19);
  uint64_t v48 = *((void *)this + 20);
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)this, (v47 + v46));
  uint64_t v50 = (v48 - v49) >> 2;
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)this, v50 + (v45 >> 1));
  cv3d::cv::gess::mesh::PolyMesh::ResizeHedges((uint64_t **)this, (v12 + 6 * v46));
  if ((int)v12 + 6 * (int)v46 > v12)
  {
    int v51 = 6 * v46;
    do
    {
      std::string v52 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v13);
      *v52 &= ~v53;
      LODWORD(v13) = v13 + 1;
      --v51;
    }
    while (v51);
  }
  if (v46)
  {
    uint64_t v54 = 0;
    uint64_t v55 = v45 & 0x3FFFFFFFCLL;
    do
    {
      v68[0] = v50;
      v68[1] = v50 + 1;
      unsigned int v65 = v12;
      int32x4_t v66 = vaddq_s32(vdupq_n_s32(v12), (int32x4_t)xmmword_24F579020);
      int v67 = v12 + 5;
      unsigned int v59 = v47;
      cv3d::cv::gess::mesh::TriMesh::SplitEdge((uint64_t)this, (unsigned int *)((char *)v60 + v54), &v59, v68, &v65, 0, 1);
      v54 += 4;
      LODWORD(v47) = v47 + 1;
      LODWORD(v12) = v12 + 6;
      LODWORD(v50) = v50 + 2;
    }
    while (v55 != v54);
  }
  if (v60)
  {
    uint64_t v61 = (char *)v60;
    operator delete(v60);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v57;
}

void sub_24F562AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::CollapseShortEdges(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, double a3, double a4, uint64_t a5, double a6, int a7)
{
  BOOL v10 = this;
  uint64_t v12 = *((void *)this + 16);
  uint64_t v11 = *((void *)this + 17);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  uint64_t v13 = (uint64_t *)((char *)v10 + 32);
  LOBYTE(v50) = 0;
  unsigned int v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)v10 + 4, (uint64_t)&v50, (unsigned __int8 *)__p);
  unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v12) >> 2);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = v15;
  LOBYTE(v50) = 0;
  std::vector<BOOL>::vector(__p, v15, (unsigned __int8 *)&v50);
  if (v15)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    float v19 = a3 * a3;
    uint64_t v20 = (uint64_t)v10 + 104;
    double v21 = a4 * a4 * v19;
    uint64_t v44 = v16;
    while (1)
    {
      unint64_t v22 = v17 >> 6;
      uint64_t v23 = 1 << v17;
      if ((*((void *)__p[0] + (v17 >> 6)) & (1 << v17)) == 0)
      {
        if (v14 == -1) {
          goto LABEL_16;
        }
        unsigned int v50 = v14;
        uint64_t v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v13, &v50);
        if (*(void *)(v24 + 48) <= v17) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        if ((*(void *)(*(void *)(v24 + 40) + 8 * v22) & v23) != 0) {
          goto LABEL_6;
        }
        unsigned int v47 = v17;
        if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v20, &v47) == -1) {
          goto LABEL_16;
        }
        char v25 = v10;
        uint64_t v26 = v18;
        uint64_t v27 = a5;
        unsigned int v50 = v14;
        uint64_t v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v13, &v50);
        unsigned int v46 = v17;
        unint64_t v29 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(v20, &v46);
        if (*(void *)(v28 + 48) <= v29) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        unint64_t v30 = *(void *)(*(void *)(v28 + 40) + ((v29 >> 3) & 0x1FFFFFF8));
        a5 = v27;
        uint64_t v18 = v26;
        BOOL v10 = v25;
        if (((v30 >> v29) & 1) == 0)
        {
          uint64_t v16 = v44;
LABEL_16:
          unsigned int v47 = v17;
          *((void *)__p[0] + v22) |= v23;
          unsigned int v50 = v17;
          if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v20, &v50) + 12) != -1)
          {
            uint64_t v31 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v20, &v47);
            *(void *)((char *)__p[0] + (((unint64_t)*v31 >> 3) & 0x1FFFFFF8)) |= 1 << *v31;
            if ((a5 & 1) != 0
              || (v37 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v10, *((_DWORD *)v10 + 45), v47), (*v37 & v38) == 0)&& (v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v20, &v47), std::string v40 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v10, *((_DWORD *)v10 + 45), *v39), (*v40 & v41) == 0))
            {
              uint64_t v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v20, &v47);
              uint64_t v33 = cv3d::cv::gess::mesh::Topology::h(v20, v32);
              float32x4_t v45 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v10, *((_DWORD *)v10 + 44), *(_DWORD *)(v33 + 12));
              uint64_t v34 = cv3d::cv::gess::mesh::Topology::h(v20, &v47);
              float32x4_t v35 = vsubq_f32(v45, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v10, *((_DWORD *)v10 + 44), *(_DWORD *)(v34 + 12)));
              float32x4_t v36 = vmulq_f32(v35, v35);
              v36.i32[3] = 0;
              if (v21 > vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36))) {
                uint64_t v18 = v18
              }
                    + cv3d::cv::gess::mesh::TriMesh::CollapseEdge((uint64_t)v10, &v47, a5, a7);
            }
          }
          goto LABEL_6;
        }
        uint64_t v16 = v44;
      }
LABEL_6:
      if (v16 == ++v17) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v18 = 0;
LABEL_24:
  cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(v10);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v18;
}

void sub_24F562EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::EqualizeValences(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v4 = *((void *)this + 16);
  uint64_t v3 = *((void *)this + 17);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  LOBYTE(v40) = 0;
  int v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)this + 4, (uint64_t)&v40, (unsigned __int8 *)__p);
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 2);
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (!v6) {
    return 0;
  }
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  do
  {
    if (v5 == -1) {
      goto LABEL_11;
    }
    LODWORD(__p[0]) = v5;
    uint64_t v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)__p);
    if (*(void *)(v9 + 48) <= v7) {
      cv3d::cv::gess::mesh::QuadMesh::InitVF();
    }
    if (((*(void *)(*(void *)(v9 + 40) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    {
      unsigned int v40 = v7;
      if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v40) == -1) {
        goto LABEL_11;
      }
      LODWORD(__p[0]) = v5;
      uint64_t v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)__p);
      unsigned int v39 = v7;
      unint64_t v11 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v39);
      if (*(void *)(v10 + 48) <= v11) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      if (((*(void *)(*(void *)(v10 + 40) + ((v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) == 0)
      {
LABEL_11:
        LODWORD(__p[0]) = v7;
        uint64_t v12 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v7);
        if ((v13 & *v12) == 0)
        {
          unsigned int v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
          unint64_t v15 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), *v14);
          if ((v16 & *v15) == 0)
          {
            unsigned int v38 = v8;
            int v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p) + 12);
            uint64_t v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
            int v19 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v18) + 12);
            uint64_t v20 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
            double v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)(v20 + 8));
            int v22 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v21) + 12);
            uint64_t v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
            uint64_t v24 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v23);
            char v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)(v24 + 8));
            int v26 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v25) + 12);
            unsigned int v27 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v17);
            unsigned int v28 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v19);
            unsigned int v29 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v22);
            unsigned int v30 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v26);
            int32x2_t v31 = vdup_n_s32(v27);
            int32x2_t v32 = vdup_n_s32(v28);
            int32x2_t v33 = vdup_n_s32(v29);
            int32x2_t v34 = vadd_s32(vadd_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x700000006, v32), (int8x8_t)vsub_s32((int32x2_t)0x700000006, v32), (int8x8_t)vadd_s32(v32, (int32x2_t)0xFFFFFFF9FFFFFFFALL)), (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x700000006, v31), (int8x8_t)vsub_s32((int32x2_t)0x700000006, v31), (int8x8_t)vadd_s32(v31, (int32x2_t)0xFFFFFFF9FFFFFFFALL))), (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x500000006, v33), (int8x8_t)vsub_s32((int32x2_t)0x500000006, v33), (int8x8_t)vadd_s32(v33, (int32x2_t)0xFFFFFFFBFFFFFFFALL)));
            int32x2_t v35 = vdup_n_s32(v30);
            int32x2_t v36 = vadd_s32(v34, (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x500000006, v35), (int8x8_t)vsub_s32((int32x2_t)0x500000006, v35), (int8x8_t)vadd_s32(v35, (int32x2_t)0xFFFFFFFBFFFFFFFALL)));
            if (vcgt_s32(v36, vdup_lane_s32(v36, 1)).u32[0])
            {
              unsigned int v40 = -1;
              uint64_t v8 = v38
                 + cv3d::cv::gess::mesh::TriMesh::FlipEdge((uint64_t)this, (unsigned int *)__p, 1, &v40);
            }
            else
            {
              uint64_t v8 = v38;
            }
          }
        }
      }
    }
    ++v7;
  }
  while (v6 != v7);
  return v8;
}

void sub_24F563264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::TangentialRelaxation(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, double a3, int a4)
{
  float v4 = a3;
  return cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(this, a2, v4, a4, 1);
}

uint64_t cv3d::cv::gess::alg::TangentialRelaxation(uint64_t a1, void *a2, int a3, int a4)
{
  return cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, a2, a3, a4, 1);
}

uint64_t cv3d::cv::gess::alg::IsotropicRemeshing(float32x4_t *this, cv3d::cv::gess::mesh::TriMesh *a2, cv3d::cv::gess::mesh::TriMesh *a3, double a4, double a5, double a6)
{
  if (a4 <= a5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25335E550](exception, "split ratio <= collapse ratio");
  }
  int v10 = (int)a2;
  cv3d::cv::gess::alg::ComputeAverageEdgeLength(this, a2);
  float v13 = v12;
  float v14 = a6;
  cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing((cv3d::cv::gess::alg *)this, a3, v14, 1, 1);
  if (v10 >= 1)
  {
    double v16 = v13;
    do
    {
      int v17 = cv3d::cv::gess::alg::SplitLongEdges((cv3d::cv::gess::alg *)this, 0, v16, a4, v15);
      int v19 = cv3d::cv::gess::alg::CollapseShortEdges((cv3d::cv::gess::alg *)this, 0, v16, a5, 0, v18, 4);
      int v21 = v19 | v17 | cv3d::cv::gess::alg::EqualizeValences((cv3d::cv::gess::alg *)this, v20);
      cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing((cv3d::cv::gess::alg *)this, a3, v14, 1, 1);
      if (v21) {
        BOOL v22 = v10 > 1;
      }
      else {
        BOOL v22 = 0;
      }
      --v10;
    }
    while (v22);
  }
  return 1;
}

void sub_24F5633D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::IsotropicRemeshing(uint64_t a1, unsigned int **a2, int a3, int a4, double a5, double a6, double a7)
{
  if (a5 <= a6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x25335E550](exception, "split ratio <= collapse ratio");
  }
  unsigned int v64 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  LOBYTE(v60[0]) = 0;
  unsigned int v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 32), (uint64_t)v60, (unsigned __int8 *)__p);
  unsigned int v64 = v14;
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v14 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v64, (long long *)__p);
    if (v63 < 0) {
      operator delete(__p[0]);
    }
  }
  LODWORD(__p[0]) = v64;
  uint64_t v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15))
  {
    unint64_t v16 = 0;
    do
    {
      LODWORD(__p[0]) = v64;
      uint64_t v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p);
      if (*(void *)(v17 + 48) <= v16) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(void *)(*(void *)(v17 + 40) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v16);
      ++v16;
      LODWORD(__p[0]) = v64;
      uint64_t v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p);
    }
    while (v16 < (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18));
  }
  float v61 = NAN;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:remesh_fixed");
  LOBYTE(v60[0]) = 0;
  unsigned int v19 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 8), (uint64_t)v60, (unsigned __int8 *)__p);
  float v61 = *(float *)&v19;
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if (v19 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "v:remesh_fixed");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v61, (long long *)__p);
    if (v63 < 0) {
      operator delete(__p[0]);
    }
  }
  *(float *)std::string __p = v61;
  uint64_t v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20))
  {
    unint64_t v21 = 0;
    do
    {
      *(float *)std::string __p = v61;
      uint64_t v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p);
      if (*(void *)(v22 + 48) <= v21) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(void *)(*(void *)(v22 + 40) + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v21);
      ++v21;
      *(float *)std::string __p = v61;
      uint64_t v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    }
    while (v21 < (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23));
  }
  unint64_t v24 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  LOBYTE(v60[0]) = 0;
  std::vector<BOOL>::vector(__p, v24, (unsigned __int8 *)v60);
  char v25 = *a2;
  int v26 = a2[1];
  if (*a2 != v26)
  {
    unsigned int v27 = (char *)__p[0];
    do
    {
      unsigned int v28 = *v25++;
      *(void *)&v27[((unint64_t)v28 >> 3) & 0x1FFFFFF8] |= 1 << v28;
    }
    while (v25 != v26);
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v60, 3uLL);
  unsigned int v30 = __p[1];
  if (__p[1])
  {
    unint64_t v31 = 0;
    do
    {
      if (((*(void *)((char *)__p[0] + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
      {
        LODWORD(v59[0]) = v31;
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)v59, v60);
        for (uint64_t i = 0; i != 12; i += 4)
        {
          LODWORD(v59[0]) = v64;
          uint64_t v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v59);
          unint64_t v34 = *(unsigned int *)((char *)v60[0] + i);
          if (*(void *)(v33 + 48) <= v34) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*(void *)(v33 + 40) + ((v34 >> 3) & 0x1FFFFFF8)) |= 1 << v34;
          LODWORD(v59[0]) = v64;
          uint64_t v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v59);
          unint64_t v36 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v60[0] + i));
          if (*(void *)(v35 + 48) <= v36) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*(void *)(v35 + 40) + ((v36 >> 3) & 0x1FFFFFF8)) |= 1 << v36;
          *(float *)unsigned int v59 = v61;
          uint64_t v37 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)v59);
          unint64_t v38 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v60[0] + i)) + 12);
          if (*(void *)(v37 + 48) <= v38) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*(void *)(v37 + 40) + ((v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
        }
        unsigned int v30 = __p[1];
      }
      ++v31;
    }
    while (v31 < (unint64_t)v30);
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)a1, v29);
  float v40 = v39;
  std::vector<float>::vector(v59, (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  if (*(void *)(a1 + 112) != *(void *)(a1 + 104))
  {
    unint64_t v41 = 0;
    unsigned int v43 = 1;
    do
    {
      float v65 = v61;
      uint64_t v44 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)&v65);
      if (*(void *)(v44 + 48) <= v41) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      if ((*(void *)(*(void *)(v44 + 40) + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41))
      {
        float v45 = 0.0;
      }
      else
      {
        float v42 = a7;
        float v45 = v42;
      }
      *((float *)v59[0] + v41) = v45;
      unint64_t v41 = v43++;
    }
    while (v41 < (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
  }
  cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, v59, a4, 1, 1);
  double v47 = v40;
  float v48 = a7;
  int v49 = a3 + 1;
  BOOL v50 = 1;
  while (v50)
  {
    if (--v49 < 1) {
      break;
    }
    int v51 = cv3d::cv::gess::alg::SplitLongEdges((cv3d::cv::gess::alg *)a1, 0, v47, a5, v46);
    int v53 = cv3d::cv::gess::alg::CollapseShortEdges((cv3d::cv::gess::alg *)a1, 0, v47, a6, 0, v52, 4);
    int v55 = cv3d::cv::gess::alg::EqualizeValences((cv3d::cv::gess::alg *)a1, v54);
    unint64_t v56 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
    float v65 = v48;
    std::vector<float>::resize((uint64_t)v59, v56, &v65);
    BOOL v50 = (v53 | v51 | v55) != 0;
    cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, v59, a4, 1, 1);
  }
  if (v64 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 32), &v64);
  }
  unsigned int v64 = -1;
  if (v61 != NAN) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 8), (unsigned int *)&v61);
  }
  float v61 = NAN;
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_24F563B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t cv3d::cv::gess::alg::CreasePreservedRemeshing(uint64_t a1, int a2, int a3, uint64_t a4, double a5, double a6)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  unsigned int v105 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  LOBYTE(v102[0]) = 0;
  unsigned int v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 32), (uint64_t)v102, (unsigned __int8 *)__p);
  unsigned int v105 = v9;
  if (v104 < 0) {
    operator delete(__p[0]);
  }
  if (v9 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v105, (long long *)__p);
    if (v104 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a1 + 136) != *(void *)(a1 + 128))
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      LODWORD(__p[0]) = v105;
      uint64_t v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p);
      if (*(void *)(v12 + 48) <= v10) {
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      }
      *(void *)(*(void *)(v12 + 40) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v10);
      unint64_t v10 = v11;
      BOOL v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) > v11++;
    }
    while (v13);
  }
  uint64_t v14 = a1 + 104;
  unint64_t v15 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
  float v16 = a6;
  *(float *)uint64_t v102 = v16;
  std::vector<float>::vector(__p, v15, v102);
  unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  LOBYTE(v100[0]) = 0;
  std::vector<BOOL>::vector(v102, v17, (unsigned __int8 *)v100);
  if (*(void *)(a1 + 136) != *(void *)(a1 + 128))
  {
    unint64_t v19 = 0;
    unsigned int v20 = 1;
    do
    {
      unint64_t v21 = v19 >> 6;
      uint64_t v22 = 1 << v19;
      uint64_t v23 = *((void *)v102[0] + (v19 >> 6));
      if ((v23 & (1 << v19)) == 0)
      {
        *((void *)v102[0] + v21) = v23 | v22;
        LODWORD(v100[0]) = v20 - 1;
        unint64_t v24 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100);
        *(void *)((char *)v102[0] + (((unint64_t)*v24 >> 3) & 0x1FFFFFF8)) |= 1 << *v24;
        LODWORD(v100[0]) = v20 - 1;
        char v25 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v19);
        if ((*v25 & v26) != 0
          || (unsigned int v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100),
              unsigned int v28 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v27),
              (*v28 & v29) != 0))
        {
          LODWORD(v100[0]) = v20 - 1;
          uint64_t v30 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100);
          *((_DWORD *)__p[0] + *(unsigned int *)(v30 + 12)) = 0;
          LODWORD(v100[0]) = v20 - 1;
          unint64_t v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100);
          uint64_t v32 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v31);
          *((_DWORD *)__p[0] + *(unsigned int *)(v32 + 12)) = 0;
          LODWORD(v100[0]) = v105;
          uint64_t v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v100);
          if (*(void *)(v33 + 48) <= v19) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*(void *)(v33 + 40) + 8 * v21) |= v22;
          LODWORD(v100[0]) = v105;
          uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v100);
          LODWORD(v100[0]) = v20 - 1;
          unint64_t v35 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100);
          if (*(void *)(v34 + 48) <= v35) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
        }
        else
        {
          LODWORD(v97) = 0;
          LODWORD(v100[0]) = v20 - 1;
          cv3d::cv::gess::math::EdgeDihedral(a1, (unsigned int *)v100, (float *)&v97);
          if (*(float *)&v97 <= 0.523598776) {
            goto LABEL_18;
          }
          LODWORD(v100[0]) = v20 - 1;
          uint64_t v36 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100);
          *((_DWORD *)__p[0] + *(unsigned int *)(v36 + 12)) = 0;
          LODWORD(v100[0]) = v20 - 1;
          uint64_t v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100);
          uint64_t v38 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v37);
          *((_DWORD *)__p[0] + *(unsigned int *)(v38 + 12)) = 0;
          LODWORD(v100[0]) = v105;
          uint64_t v39 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v100);
          if (*(void *)(v39 + 48) <= v19) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          *(void *)(*(void *)(v39 + 40) + 8 * v21) |= v22;
          LODWORD(v100[0]) = v105;
          uint64_t v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v100);
          LODWORD(v100[0]) = v20 - 1;
          unint64_t v35 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v100);
          if (*(void *)(v34 + 48) <= v35) {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
        }
        *(void *)(*(void *)(v34 + 40) + ((v35 >> 3) & 0x1FFFFFF8)) |= 1 << v35;
      }
LABEL_18:
      unint64_t v19 = v20;
      BOOL v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) > v20++;
    }
    while (v13);
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)a1, v18);
  if (a2 >= 1)
  {
    int v41 = 0;
    double v42 = a5 * a5 * (float)(v40 * v40);
    uint64_t v90 = (uint64_t *)(a1 + 32);
    do
    {
      unsigned int v43 = -858993459 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
      unsigned int v44 = v43;
      LOBYTE(v97) = 0;
      std::vector<BOOL>::vector(v100, v43, (unsigned __int8 *)&v97);
      long long v97 = 0;
      int v98 = 0;
      int32x4_t v99 = 0;
      std::vector<cv3d::cv::gess::mesh::Vertex>::reserve(&v97, (unint64_t)((double)v43 * 0.1));
      if (v43)
      {
        for (unint64_t i = 0; i != v43; ++i)
        {
          uint64_t v46 = *((void *)v100[0] + (i >> 6));
          if ((v46 & (1 << i)) == 0)
          {
            *(_DWORD *)int v107 = i;
            *((void *)v100[0] + (i >> 6)) = v46 | (1 << i);
            double v47 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)v107);
            *(void *)((char *)v100[0] + (((unint64_t)*v47 >> 3) & 0x1FFFFFF8)) |= 1 << *v47;
            float v48 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *(unsigned int *)v107);
            if ((*v48 & v49) == 0)
            {
              BOOL v50 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)v107);
              int v51 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v50);
              if ((*v51 & v52) == 0)
              {
                int v53 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)v107);
                uint64_t v54 = cv3d::cv::gess::mesh::Topology::h(v14, v53);
                float32x4_t v94 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v54 + 12));
                uint64_t v55 = cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)v107);
                float32x4_t v56 = vsubq_f32(v94, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v55 + 12)));
                float32x4_t v57 = vmulq_f32(v56, v56);
                v57.i32[3] = 0;
                if (v42 < vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v57, v57)))
                {
                  float32x4_t v58 = v98;
                  if (v98 >= v99)
                  {
                    uint64_t v60 = (v98 - (unsigned char *)v97) >> 2;
                    if ((unint64_t)(v60 + 1) >> 62) {
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v61 = (v99 - (unsigned char *)v97) >> 1;
                    if (v61 <= v60 + 1) {
                      unint64_t v61 = v60 + 1;
                    }
                    if ((unint64_t)(v99 - (unsigned char *)v97) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v62 = v61;
                    }
                    if (v62) {
                      char v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v99, v62);
                    }
                    else {
                      char v63 = 0;
                    }
                    unsigned int v64 = &v63[4 * v60];
                    *(_DWORD *)unsigned int v64 = *(_DWORD *)v107;
                    unsigned int v59 = v64 + 4;
                    int32x4_t v66 = (char *)v97;
                    float v65 = v98;
                    if (v98 != v97)
                    {
                      do
                      {
                        int v67 = *((_DWORD *)v65 - 1);
                        v65 -= 4;
                        *((_DWORD *)v64 - 1) = v67;
                        v64 -= 4;
                      }
                      while (v65 != v66);
                      float v65 = (char *)v97;
                    }
                    long long v97 = v64;
                    int v98 = v59;
                    int32x4_t v99 = &v63[4 * v62];
                    if (v65) {
                      operator delete(v65);
                    }
                  }
                  else
                  {
                    *(_DWORD *)int v98 = *(_DWORD *)v107;
                    unsigned int v59 = v58 + 4;
                  }
                  int v98 = v59;
                }
              }
            }
          }
        }
      }
      int v95 = v41;
      unint64_t v68 = v98 - (unsigned char *)v97;
      unint64_t v69 = (unint64_t)(v98 - (unsigned char *)v97) >> 2;
      uint64_t v70 = (*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
      uint64_t v72 = *(void *)(a1 + 152);
      uint64_t v71 = *(void *)(a1 + 160);
      cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, (v70 + v69));
      uint64_t v73 = (v71 - v72) >> 2;
      cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, v73 + (v68 >> 1));
      cv3d::cv::gess::mesh::PolyMesh::ResizeHedges((uint64_t **)a1, v43 + 6 * v69);
      if (v43 + 6 * v69 > v43)
      {
        int v74 = 6 * v69;
        do
        {
          char v75 = (void *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v44);
          *v75 &= ~v76;
          ++v44;
          --v74;
        }
        while (v74);
      }
      unint64_t v77 = (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2;
      *(float *)int v107 = v16;
      std::vector<float>::resize((uint64_t)__p, v77, v107);
      std::vector<BOOL>::resize((uint64_t)v102, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2), 0);
      if (v69)
      {
        uint64_t v78 = 0;
        do
        {
          v109[0] = v73;
          v109[1] = v73 + 1;
          *(_DWORD *)int v107 = v43;
          *(int32x4_t *)&void v107[4] = vaddq_s32(vdupq_n_s32(v43), (int32x4_t)xmmword_24F579020);
          unsigned int v108 = v43 + 5;
          unsigned int v96 = v70;
          if (cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, (unsigned int *)((char *)v97 + v78), &v96, v109, (unsigned int *)v107, 0, 1))
          {
            unsigned int v106 = v105;
            uint64_t v79 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v90, &v106);
            unint64_t v80 = *(unsigned int *)((char *)v97 + v78);
            if (*(void *)(v79 + 48) <= v80) {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            if ((*(void *)(*(void *)(v79 + 40) + ((v80 >> 3) & 0x1FFFFFF8)) >> v80))
            {
              *((_DWORD *)__p[0] + v96) = 0;
              unsigned int v106 = v105;
              uint64_t v81 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v90, &v106);
              if (*(void *)(v81 + 48) <= (unint64_t)*(unsigned int *)&v107[16]) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(void *)(*(void *)(v81 + 40) + (((unint64_t)*(unsigned int *)&v107[16] >> 3) & 0x1FFFFFF8)) |= 1 << v107[16];
              unsigned int v106 = v105;
              uint64_t v82 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v90, &v106);
              if (*(void *)(v82 + 48) <= (unint64_t)v108) {
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              }
              *(void *)(*(void *)(v82 + 40) + (((unint64_t)v108 >> 3) & 0x1FFFFFF8)) |= 1 << v108;
            }
          }
          v78 += 4;
          LODWORD(v70) = v70 + 1;
          v43 += 6;
          LODWORD(v73) = v73 + 2;
        }
        while ((v68 & 0x3FFFFFFFCLL) != v78);
      }
      cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, __p, a3, 1, 1);
      cv3d::cv::gess::alg::EqualizeValences((cv3d::cv::gess::alg *)a1, v83);
      uint64_t v14 = a1 + 104;
      if (*(void *)(a4 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(v107, (char *)&unk_24F58DDD7);
        std::function<void ()(float,std::string const&)>::operator()(a4, (uint64_t)v107, (float)((float)v95 / (float)a2) * 100.0);
        if (SHIBYTE(v108) < 0) {
          operator delete(*(void **)v107);
        }
      }
      if (v97)
      {
        int v98 = (char *)v97;
        operator delete(v97);
      }
      if (v100[0]) {
        operator delete(v100[0]);
      }
      int v41 = v95 + 1;
    }
    while (v95 + 1 != a2);
  }
  std::string::basic_string[abi:ne180100]<0>(v100, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  long long v97 = 0;
  int v98 = 0;
  int v84 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v97, (unsigned __int8 *)v100);
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  if (v84 != -1)
  {
    uint64_t v85 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a1);
LABEL_88:
    uint64_t v88 = v85;
    goto LABEL_89;
  }
  std::string::basic_string[abi:ne180100]<0>(v100, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
  long long v97 = 0;
  int v98 = 0;
  int v86 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v97, (unsigned __int8 *)v100);
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  if (v86 != -1)
  {
    uint64_t v85 = cv3d::cv::gess::mesh::PolyMesh::ComputeFaceNormal((uint64_t **)a1);
    goto LABEL_88;
  }
  std::string::basic_string[abi:ne180100]<0>(v100, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
  long long v97 = 0;
  int v98 = 0;
  if (cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v97, (unsigned __int8 *)v100) == -1)
  {
    BOOL v87 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v97, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
    *(void *)&void v107[4] = 0;
    *(_DWORD *)int v107 = 0;
    BOOL v87 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)v107, (unsigned __int8 *)&v97) != -1;
    if (SHIBYTE(v99) < 0) {
      operator delete(v97);
    }
  }
  if (v101 < 0)
  {
    operator delete(v100[0]);
    if (v87) {
      goto LABEL_87;
    }
  }
  else if (v87)
  {
LABEL_87:
    LODWORD(v100[0]) = 1091567616;
    uint64_t v85 = cv3d::cv::gess::mesh::TriMesh::ComputeMeshNormal((cv3d::cv::gess::mesh::TriMesh *)a1, (float *)v100);
    goto LABEL_88;
  }
  uint64_t v88 = 1;
LABEL_89:
  if (v102[0]) {
    operator delete(v102[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v88;
}

void sub_24F564810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  unsigned int v3 = -858993459 * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 2);
  unint64_t v4 = v3;
  LOBYTE(v28[0]) = 0;
  std::vector<BOOL>::vector(&v30, v3, (unsigned __int8 *)v28);
  std::string::basic_string[abi:ne180100]<0>(v28, "th:isnew_subdiv");
  std::string::basic_string[abi:ne180100]<0>(v26, "tv:isnew_subdiv");
  unsigned int v25 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v25, (long long *)v28);
  LODWORD(__p[0]) = v25;
  uint64_t v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)__p);
  unsigned int v24 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v24, (long long *)v26);
  LODWORD(__p[0]) = v24;
  unint64_t v6 = (void *)cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 1, (unsigned int *)__p);
  unsigned int v23 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  uint64_t v32 = 0;
  unsigned int v31 = 0;
  unsigned int v23 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)this + 7, (uint64_t)&v31, (unsigned __int8 *)__p);
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (!v3) {
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  for (unint64_t i = 0; i != v3; ++i)
  {
    uint64_t v8 = *((void *)v30 + (i >> 6));
    if ((v8 & (1 << i)) == 0)
    {
      *((void *)v30 + (i >> 6)) = v8 | (1 << i);
      LODWORD(__p[0]) = i;
      unsigned int v9 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
      *(void *)((char *)v30 + (((unint64_t)*v9 >> 3) & 0x1FFFFFF8)) |= 1 << *v9;
      LODWORD(__p[0]) = i;
      cv3d::cv::gess::mesh::TriMesh::SplitEdge((uint64_t)this, (unsigned int *)__p, 0);
    }
  }
LABEL_9:
  __p[0] = v6;
  __p[1] = this;
  uint64_t v11 = *((void *)this + 16);
  for (j = *((void *)this + 17); 0xCCCCCCCCCCCCCCCDLL * ((j - v11) >> 2) > v3; unint64_t v4 = v3)
  {
    if (*(void *)(v5 + 48) <= v4) {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    if ((*(void *)(*(void *)(v5 + 40) + 8 * (v4 >> 6)) & (1 << v4)) != 0)
    {
      unsigned int v31 = v3;
      unint64_t v12 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v31) + 12);
      if (v6[6] <= v12) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      uint64_t v13 = *(void *)(v6[5] + ((v12 >> 3) & 0x1FFFFFF8));
      uint64_t v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v31);
      unint64_t v15 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v14) + 12);
      if (v6[6] <= v15) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      if (((v13 & (1 << v12)) != 0) != ((*(void *)(v6[5] + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1))
      {
        int v16 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()((uint64_t *)__p, v31);
        unint64_t v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v31);
        int v18 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()((uint64_t *)__p, *v17);
        if (v16 == 2 && v18 == 2) {
          cv3d::cv::gess::mesh::TriMesh::FlipEdge((uint64_t)this, &v31, 1, &v23);
        }
      }
      if (*(void *)(v5 + 48) <= v4) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(void *)(*(void *)(v5 + 40) + 8 * (v4 >> 6)) &= ~(1 << v4);
      unint64_t v19 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v31);
      if (*(void *)(v5 + 48) <= v19) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(void *)(*(void *)(v5 + 40) + ((v19 >> 3) & 0x1FFFFFF8)) &= ~(1 << v19);
      uint64_t v11 = *((void *)this + 16);
      uint64_t j = *((void *)this + 17);
    }
    ++v3;
  }
  if (v25 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)this + 4, &v25);
  }
  unsigned int v25 = -1;
  if (v24 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)this + 1, &v24);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v30) {
    operator delete(v30);
  }
  return 1;
}

void sub_24F564E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()(uint64_t *a1, unsigned int a2)
{
  unsigned int v17 = a2;
  uint64_t v3 = *a1;
  unint64_t v4 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1[1] + 104, &v17) + 12);
  if (*(void *)(v3 + 48) <= v4) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  uint64_t v5 = *(void *)(*(void *)(v3 + 40) + ((v4 >> 3) & 0x1FFFFFF8));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] + 104;
  uint64_t v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, &v17);
  unint64_t v9 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v7, v8) + 12);
  if (*(void *)(v6 + 48) <= v9) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  unint64_t v10 = *(void *)(*(void *)(v6 + 40) + ((v9 >> 3) & 0x1FFFFFF8));
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1] + 104;
  uint64_t v13 = cv3d::cv::gess::mesh::Topology::h(v12, &v17);
  unint64_t v14 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v12, (unsigned int *)(v13 + 4)) + 12);
  if (*(void *)(v11 + 48) <= v14) {
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  }
  if ((v5 & (1 << v4)) != 0) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
  if (((v10 >> v9) & 1) == 0) {
    int v15 = (v5 & (1 << v4)) != 0;
  }
  return v15 + ((*(void *)(*(void *)(v11 + 40) + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1);
}

uint64_t cv3d::cv::gess::alg::MidpointSubdivision(uint64_t a1, unsigned int **a2)
{
  unsigned int v4 = -858993459 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2);
  unint64_t v5 = v4;
  LOBYTE(v48[0]) = 0;
  std::vector<BOOL>::vector(&v50, v4, (unsigned __int8 *)v48);
  std::string::basic_string[abi:ne180100]<0>(v48, "th:isnew_subdiv");
  std::string::basic_string[abi:ne180100]<0>(v46, "tv:isnew_subdiv");
  unsigned int v45 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v45, (long long *)v48);
  LODWORD(__p[0]) = v45;
  uint64_t v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 136) - *(void *)(a1 + 128);
  if (v8)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    uint64_t v11 = *(void *)(v6 + 40);
    unsigned int v12 = 1;
    do
    {
      if (*(void *)(v6 + 48) <= v9) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(void *)(v11 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
      unint64_t v9 = v12;
      BOOL v13 = v10 > v12++;
    }
    while (v13);
  }
  unsigned int v44 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v44, (long long *)v46);
  LODWORD(__p[0]) = v44;
  uint64_t v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
  if (v16)
  {
    unint64_t v17 = 0;
    unint64_t v18 = v16 >> 2;
    uint64_t v19 = *(void *)(v14 + 40);
    unsigned int v20 = 1;
    do
    {
      if (*(void *)(v14 + 48) <= v17) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(void *)(v19 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v17);
      unint64_t v17 = v20;
      BOOL v13 = v18 > v20++;
    }
    while (v13);
  }
  unsigned int v43 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v40) = 0;
  uint64_t v39 = 0;
  unsigned int v43 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v39, (unsigned __int8 *)__p);
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  char v22 = *a2;
  for (unint64_t i = a2[1]; v22 != i; ++v22)
  {
    cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v22, __p);
    uint64_t v23 = 0;
    unsigned int v24 = (char *)__p[0];
    do
    {
      unsigned int v25 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v24[v23]);
      unsigned int v24 = (char *)__p[0];
      unint64_t v26 = *(unsigned int *)((char *)__p[0] + v23);
      unint64_t v27 = v26 >> 6;
      uint64_t v28 = 1 << v26;
      uint64_t v29 = v50[v27];
      if ((v28 & v29) == 0
        && ((*(void *)((char *)v50 + (((unint64_t)*v25 >> 3) & 0x1FFFFFF8)) >> *v25) & 1) == 0)
      {
        v50[v27] = v28 | v29;
      }
      v23 += 4;
    }
    while (v23 != 12);
  }
  if (v4)
  {
    for (unint64_t j = 0; j != v4; ++j)
    {
      if ((*(void *)((char *)v50 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j))
      {
        LODWORD(v39) = j;
        cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, (unsigned int *)&v39, 0);
      }
    }
  }
  uint64_t v39 = v15;
  uint64_t v40 = a1;
  uint64_t v32 = *(void *)(a1 + 128);
  for (k = *(void *)(a1 + 136); 0xCCCCCCCCCCCCCCCDLL * ((k - v32) >> 2) > v4; unint64_t v5 = v4)
  {
    if (*(void *)(v7 + 48) <= v5) {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    if ((*(void *)(*(void *)(v7 + 40) + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      unsigned int v38 = v4;
      int v33 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()(&v39, v5);
      uint64_t v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v38);
      int v35 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()(&v39, *v34);
      if (v33 == 2 && v35 == 2) {
        cv3d::cv::gess::mesh::TriMesh::FlipEdge(a1, &v38, 1, &v43);
      }
      if (*(void *)(v7 + 48) <= v5) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(void *)(*(void *)(v7 + 40) + 8 * (v5 >> 6)) &= ~(1 << v5);
      unint64_t v36 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v38);
      if (*(void *)(v7 + 48) <= v36) {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(void *)(*(void *)(v7 + 40) + ((v36 >> 3) & 0x1FFFFFF8)) &= ~(1 << v36);
      uint64_t v32 = *(void *)(a1 + 128);
      uint64_t k = *(void *)(a1 + 136);
    }
    ++v4;
  }
  if (v45 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 32), &v45);
  }
  unsigned int v45 = -1;
  if (v44 != -1) {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((void *)(a1 + 8), &v44);
  }
  unsigned int v44 = -1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (v50) {
    operator delete(v50);
  }
  return 1;
}

void sub_24F5654F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  int v35 = *(void **)(v33 - 112);
  if (v35) {
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *cv3d::cv::gess::alg::ProjectionOptions::ProjectionOptions(_DWORD *this)
{
  *this = 1065353216;
  return this;
}

uint64_t cv3d::cv::gess::alg::Mesh2MeshProjection(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, const cv3d::cv::gess::mesh::TriMesh *a3, const cv3d::cv::gess::alg::ProjectionOptions *a4)
{
  int v5 = 1065353216;
  return cv3d::cv::gess::alg::Mesh2MeshProjection(this, a2, (const cv3d::cv::gess::mesh::TriMesh *)&v5, a4);
}

{
  uint64_t VertexNormalAttribute;
  const cv3d::cv::gess::mesh::PolyMesh *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  long long v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  long long v22;
  float32x4_t v23;
  void *__p[3];
  void *v25;
  _OWORD *v26;
  unint64_t v27;
  long long v28;
  float32x4_t v29;
  uint64_t v30;
  long long v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v34 = *MEMORY[0x263EF8340];
  if (this != a2)
  {
    VertexNormalAttribute = cv3d::cv::gess::internal::GetVertexNormalAttribute((uint64_t **)this, a2);
    cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)this, v7);
    unint64_t v9 = v8;
    unint64_t v10 = *(float *)a3;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    std::vector<cv3d::cv::gess::math::RayT<float>>::reserve((uint64_t *)&v25, (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 1);
    memset(__p, 0, sizeof(__p));
    LODWORD(v31) = *((_DWORD *)this + 44);
    uint64_t v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 1, (unsigned int *)&v31);
    if (*((void *)this + 14) == *((void *)this + 13))
    {
      unsigned int v20 = (uint64_t)v26;
    }
    else
    {
      unsigned int v12 = 0;
      BOOL v13 = v9 * v10;
      do
      {
        uint64_t v14 = *(void *)(VertexNormalAttribute + 40);
        if (v12 >= (unint64_t)((*(void *)(VertexNormalAttribute + 48) - v14) >> 4)) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        uint64_t v15 = *(void *)(v11 + 40);
        if (v12 >= (unint64_t)((*(void *)(v11 + 48) - v15) >> 4)) {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        uint64_t v16 = *(float32x4_t *)(v14 + 16 * v12);
        unint64_t v17 = *(_OWORD *)(v15 + 16 * v12);
        unsigned int v31 = v17;
        uint64_t v32 = v16;
        uint64_t v23 = v16;
        LODWORD(v33) = 0;
        *((float *)&v33 + 1) = v13;
        unint64_t v18 = v26;
        if ((unint64_t)v26 >= v27)
        {
          char v22 = v17;
          uint64_t v19 = std::vector<cv3d::cv::gess::math::RayT<float>>::__push_back_slow_path<cv3d::cv::gess::math::RayT<float> const&>((uint64_t *)&v25, (uint64_t)&v31);
          unint64_t v17 = v22;
        }
        else
        {
          *unint64_t v26 = v17;
          v18[1] = v32;
          *((void *)v18 + 4) = v33;
          uint64_t v19 = (unint64_t)(v18 + 3);
        }
        unint64_t v26 = (_OWORD *)v19;
        uint64_t v28 = v17;
        uint64_t v29 = vnegq_f32(v23);
        LODWORD(v30) = 0;
        *((float *)&v30 + 1) = v13;
        if (v19 >= v27)
        {
          unsigned int v20 = std::vector<cv3d::cv::gess::math::RayT<float>>::__push_back_slow_path<cv3d::cv::gess::math::RayT<float> const&>((uint64_t *)&v25, (uint64_t)&v28);
        }
        else
        {
          *(_OWORD *)uint64_t v19 = v17;
          *(float32x4_t *)(v19 + 16) = v29;
          *(void *)(v19 + 32) = v30;
          unsigned int v20 = v19 + 48;
        }
        unint64_t v26 = (_OWORD *)v20;
        ++v12;
      }
      while (v12 < (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 2);
    }
    std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::resize((uint64_t *)__p, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v25) >> 4));
    cv3d::cv::gess::alg::RayCast();
  }
  return 1;
}

void sub_24F5659FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::math::RayT<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    unint64_t v9 = (char *)__p + v5;
    unint64_t v10 = (char *)__p + 48 * v6;
    std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      unint64_t v9 = &v8[(v9 - v8 - 48) % 0x30uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_24F565B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    unint64_t v21 = v18;
    do
    {
      *(_DWORD *)unint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    char v22 = &v15[4 * v14];
    uint64_t v23 = (char *)*a1;
    for (unint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t std::vector<cv3d::cv::gess::math::RayT<float>>::__push_back_slow_path<cv3d::cv::gess::math::RayT<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v7, v9);
  unint64_t v11 = &v10[48 * v4];
  std::string __p = v10;
  uint64_t v16 = v11;
  unint64_t v18 = &v10[48 * v12];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  unint64_t v17 = v11 + 48;
  std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    unint64_t v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_24F565DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GESSVersionNumberMajor(cv3d::cv::gess *a1)
{
  return cv3d::cv::gess::MAJOR_VERSION(a1);
}

uint64_t GESSVersionNumberMinor(cv3d::cv::gess *a1)
{
  return cv3d::cv::gess::MINOR_VERSION(a1);
}

uint64_t GESSVersionNumberPatch(cv3d::cv::gess *a1)
{
  return cv3d::cv::gess::PATCH_VERSION(a1);
}

void sub_24F565EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F566160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24F566288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24F5663D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56650C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_24F5666F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_24F5668D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_24F566DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_24F567114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_24F5672FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_24F56751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_24F567630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F5676A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F567750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_24F5677F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F567890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F567924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F5679C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F567A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F567AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F567B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *>((int)&v17, __str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *>((int)&v18, __str, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_24F567D14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_24F567D1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial&,cv3d::cv::gess::mesh::ObjMaterial*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24F567DEC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial&,cv3d::cv::gess::mesh::ObjMaterial*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_24F567E6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  unint64_t v5 = __str;
  if (__str != a3)
  {
    p_std::string::size_type size = &__str[1].__r_.__value_.__l.__size_;
    do
    {
      std::string::operator=(this, v5);
      if (v5 != this) {
        std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>((uint64_t **)&this[1], (void *)v5[1].__r_.__value_.__l.__data_, p_size);
      }
      v5 += 2;
      this += 2;
      p_size += 6;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
          *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
          std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__node_insert_multi(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_multi<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(v5, (void *)((char *)a2 + 28));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_24F568060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  long long v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        long long v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      long long v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_multi<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(uint64_t **a1, uint64_t *a2)
{
  long long v4 = (uint64_t *)operator new(0x28uLL);
  uint64_t v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= (int)v5) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void std::vector<cv3d::cv::gess::mesh::Texture>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(uint64_t a1, int *a2, int *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<cv3d::cv::gess::mesh::Texture>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::Texture>,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = &a2[4 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::Texture>,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_24F56833C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_24F568344(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::mesh::Texture>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::Texture>,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture&,cv3d::cv::gess::mesh::Texture*>(a4 + v7, (int *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24F568414(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture&,cv3d::cv::gess::mesh::Texture*>(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v3;
  uint64_t v4 = *((void *)a2 + 2);
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 6);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_24F5684B4(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

int *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  long long v6 = a3;
  do
  {
    int v7 = *v5;
    *(_WORD *)(a4 + 4) = *((_WORD *)v5 + 2);
    *(_DWORD *)a4 = v7;
    uint64_t v9 = *((void *)v5 + 1);
    uint64_t v8 = *((void *)v5 + 2);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = *(std::__shared_weak_count **)(a4 + 16);
    *(void *)(a4 + 8) = v9;
    *(void *)(a4 + 16) = v8;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)v5 + 1);
    a4 += 48;
    v5 += 12;
  }
  while (v5 != v6);
  return v6;
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    char v17 = v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_WORD *)v8 + 28) = *((_WORD *)v9 + 28);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::string>::__insert_node_at(v5, v18, leaf_high, v17);
          char v17 = v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          unint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              unint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_24F5686DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)(v4 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::string>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_24F568818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_WORD *)v6 + 28) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_24F5688C8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t GESSIOLoadObjFile(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 meshType] == -1 || !objc_msgSend(v4, "meshType"))
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x25335EE00]();
    int v15 = 3;
    __int16 v13 = 257;
    char v14 = 1;
    if ([v4 meshType] == 1)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v11);
      __p[0] = v11;
      __p[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v4 setMeshImpl:__p];
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      objc_msgSend(v3, "path", __p[0]);
      id v6 = objc_claimAutoreleasedReturnValue();
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v6 UTF8String]);
      uint64_t v7 = cv3d::cv::gess::io::LoadObjFile((long long *)__p, v11, &v13);
      if (v10 < 0) {
        operator delete(__p[0]);
      }

      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    else
    {
      uint64_t v7 = 1;
    }
  }

  return v7;
}

void sub_24F568A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

uint64_t GESSIOSaveObjFile(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 valid])
  {
    uint64_t v5 = (void *)MEMORY[0x25335EE00]();
    int v13 = 1;
    cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v15);
    v12[0] = 1;
    __int16 v14 = 257;
    id v6 = (uint64_t **)[v4 meshImpl];
    if ([v4 meshType] == 1)
    {
      cv3d::cv::gess::io::ProvideAutoSavingNormalType(v6, &v13);
      v12[0] = v13 != 0;
      id v7 = [v3 path];
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v7 UTF8String]);
      uint64_t v8 = cv3d::cv::gess::io::SaveObjFile((uint64_t)__p, (uint64_t)v6, (uint64_t)v12);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v16, v16[1]);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v15, v15[1]);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_24F568BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a15);
  _Unwind_Resume(a1);
}

BOOL GESSIOLoadTexturedObjFile(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 meshType] == -1 || !objc_msgSend(v4, "meshType"))
  {
    BOOL ObjFile = 0;
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x25335EE00]();
    id v6 = (char *)operator new(0x60uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)id v6 = &unk_2700D9070;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(this + 11) = 0;
    *(_OWORD *)(v6 + 24) = 0u;
    *((void *)v6 + 9) = v6 + 80;
    char v17 = v6 + 24;
    uint64_t v18 = (std::__shared_weak_count *)v6;
    [v4 setMaterialImpl:&v17];
    __int16 v14 = 257;
    char v15 = 1;
    int v16 = 2;
    if ([v4 meshType] == 1)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v12);
      __p[0] = v12;
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v4 setMeshImpl:__p];
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      objc_msgSend(v3, "path", __p[0]);
      id v7 = objc_claimAutoreleasedReturnValue();
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v7 UTF8String]);
      BOOL ObjFile = cv3d::cv::gess::io::LoadObjFile((long long *)__p, (uint64_t)v12, (uint64_t)v17, (uint64_t)&v14);
      if (v11 < 0) {
        operator delete(__p[0]);
      }

      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      BOOL ObjFile = 1;
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }

  return ObjFile;
}

void sub_24F568DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }

  _Unwind_Resume(a1);
}

uint64_t GESSIOSaveTexturedObjFile(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 valid] && objc_msgSend(v4, "materialImpl"))
  {
    uint64_t v5 = MEMORY[0x25335EE00]();
    id v6 = (uint64_t **)[v4 meshImpl];
    uint64_t v7 = [v4 materialImpl];
    int v26 = 1;
    cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v28);
    context = (void *)v5;
    v25[0] = 1;
    __int16 v27 = 257;
    uint64_t v8 = operator new(0x34uLL);
    uint64_t v9 = 0;
    v8[12] = 13;
    *(_OWORD *)uint64_t v8 = xmmword_24F579030;
    *((_OWORD *)v8 + 1) = unk_24F579040;
    *((_OWORD *)v8 + 2) = xmmword_24F579050;
    do
    {
      char v10 = &v8[v9];
      unsigned int v11 = v8[v9];
      BOOL v12 = v11 > 0xB;
      int v13 = (1 << v11) & 0x888;
      if (v12 || v13 == 0)
      {
        __p[0] = &v8[v9];
        char v17 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t)v28, v10, (uint64_t)&std::piecewise_construct, (int **)__p);
        if (*((char *)v17 + 95) < 0)
        {
          v17[10] = 4;
          int v16 = (uint64_t *)v17[9];
        }
        else
        {
          int v16 = v17 + 9;
          *((unsigned char *)v17 + 95) = 4;
        }
        *(_DWORD *)int v16 = 1735290926;
      }
      else
      {
        __p[0] = &v8[v9];
        char v15 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t)v28, v10, (uint64_t)&std::piecewise_construct, (int **)__p);
        if (*((char *)v15 + 95) < 0)
        {
          v15[10] = 4;
          int v16 = (uint64_t *)v15[9];
        }
        else
        {
          int v16 = v15 + 9;
          *((unsigned char *)v15 + 95) = 4;
        }
        *(_DWORD *)int v16 = 1920492846;
      }
      *((unsigned char *)v16 + 4) = 0;
      ++v9;
    }
    while (v9 != 13);
    if ([v4 meshType] == 1)
    {
      cv3d::cv::gess::io::ProvideAutoSavingNormalType(v6, &v26);
      if (!v26) {
        v25[0] = 0;
      }
      objc_msgSend(v3, "path", v7);
      id v18 = objc_claimAutoreleasedReturnValue();
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v18 UTF8String]);
      uint64_t v19 = cv3d::cv::gess::io::SaveObjFile((char *)__p, (uint64_t)v6, v21, (uint64_t)v25);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v19 = 1;
    }
    operator delete(v8);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v29, v29[1]);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v28, v28[1]);
  }
  else
  {
    uint64_t v19 = 0;
  }

  return v19;
}

void sub_24F5690F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  operator delete(v21);
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a20);

  _Unwind_Resume(a1);
}

void sub_24F569AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  cv3d::cv::gess::io::LoadObjContents::~LoadObjContents((cv3d::cv::gess::io::LoadObjContents *)va);
  _Unwind_Resume(a1);
}

void sub_24F569DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F569E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F569E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F569F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F569F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void sub_24F56A1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::TopologyQuality::Description@<X0>(void *a1@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  cv3d::cv::gess::alg::operator<<(&v4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v5[-1] + *(void *)(v4 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[0] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x25335E950](&v7);
}

void sub_24F56A660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t GESSAlgMeasureTopologyQuality(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 valid])
  {
    uint64_t v5 = (cv3d::cv::gess::alg *)objc_msgSend(v3, "meshImpl", 0, 0, 0, 0);
    uint64_t v7 = cv3d::cv::gess::alg::MeasureTopologyQuality(v5, (const cv3d::cv::gess::mesh::PolyMesh *)&v9, v6);
    if (v7) {
      [v4 setQualityImpl:&v9];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_24F56A710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F56A8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::GeometryQuality::Description@<X0>(void *a1@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  cv3d::cv::gess::alg::operator<<(&v4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v5[-1] + *(void *)(v4 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[0] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x25335E950](&v7);
}

void sub_24F56AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t GESSAlgMeasureGeometryQuality(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 valid])
  {
    LODWORD(vcv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(this + 11) = 0;
    *(void *)&long long v5 = 0x80000000800000;
    *((void *)&v5 + 1) = 0x80000000800000;
    int32x4_t v12 = vdupq_n_s32(0x7F7FFFFFu);
    long long v13 = v5;
    char v6 = (float32x4_t *)objc_msgSend(v3, "meshImpl", 0, 0, v11);
    uint64_t v8 = cv3d::cv::gess::alg::MeasureGeometryQuality(v6, (const cv3d::cv::gess::mesh::PolyMesh *)&v10, v7);
    if (v8) {
      [v4 setQualityImpl:&v10];
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_24F56AAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  long long v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_24F56AC5C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x25335E950](v1);
  _Unwind_Resume(a1);
}

void *cv3d::cv::gess::alg::operator<<(void *a1)
{
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"--- TopologyQuality ---", 23);
  char v19 = 10;
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v19, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"vertices: ", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v20 = 10;
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v20, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"halfedges: ", 11);
  long long v5 = (void *)std::ostream::operator<<();
  char v21 = 10;
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v21, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"boundary halfedges: ", 20);
  uint64_t v7 = (void *)std::ostream::operator<<();
  char v22 = 10;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"edges: ", 7);
  long long v9 = (void *)std::ostream::operator<<();
  char v23 = 10;
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v23, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"faces: ", 7);
  uint64_t v11 = (void *)std::ostream::operator<<();
  char v24 = 10;
  int32x4_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v24, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"boundary loops: ", 16);
  long long v13 = (void *)std::ostream::operator<<();
  char v25 = 10;
  __int16 v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"genus: ", 7);
  char v15 = (void *)std::ostream::operator<<();
  char v26 = 10;
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v26, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"connected components: ", 22);
  char v17 = (void *)std::ostream::operator<<();
  char v27 = 10;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v27, 1);
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"--- GeometryQuality ---", 23);
  int v16 = 10;
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v16, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"average edge length: ", 21);
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v17 = 10;
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v17, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"average vertex valence: ", 24);
  long long v5 = (void *)std::ostream::operator<<();
  id v18 = 10;
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v18, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"vertex valence deviation: ", 26);
  uint64_t v7 = (void *)std::ostream::operator<<();
  char v19 = 10;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v19, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"edge length standard deviation: ", 32);
  long long v9 = (void *)std::ostream::operator<<();
  char v20 = 10;
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v20, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"face angle standard deviation: ", 31);
  uint64_t v11 = (void *)std::ostream::operator<<();
  char v21 = 10;
  int32x4_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"axis aligned bounding box: ", 27);
  __int16 v14 = cv3d::cv::gess::math::operator<<(v13);
  char v22 = 10;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v22, 1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25335E950](a1 + 112);
  return a1;
}

void *cv3d::cv::gess::math::operator<<(void *a1)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"min: (", 6);
  uint64_t v1 = (void *)cv3d::cv::gess::math::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"), max: (", 9);
  uint64_t v2 = (void *)cv3d::cv::gess::math::operator<<();

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)")", 1);
}

void tinyexr::miniz::tdefl_compress_normal()
{
  __assert_rtn("tdefl_find_match", "tinyexr.h", 3929, "max_match_len <= TDEFL_MAX_MATCH_LEN");
}

{
  __assert_rtn("tdefl_compress_normal", "tinyexr.h", 4305, "d->m_lookahead_size >= len_to_move");
}

{
  __assert_rtn("tdefl_record_match", "tinyexr.h", 4162, "(match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE)");
}

void tinyexr::miniz::tdefl_flush_block()
{
}

{
  __assert_rtn("tdefl_flush_block", "tinyexr.h", 3749, "!d->m_output_flush_remaining");
}

void tdefl_compress_buffer_cold_1()
{
}

void tinyexr::LevelIndex()
{
}

void tinyexr::ConvertHeader()
{
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10977, "!exr_header->tiled");
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10979, "exr_header->tiled");
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10982, "exr_header->tiled");
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10985, "!exr_header->tiled");
}

void tinyexr::PrecalculateTileInfo()
{
}

{
  __assert_rtn("CalculateNumYLevels", "tinyexr.h", 11715, "false");
}

void tinyexr::InitTileOffsets()
{
}

{
  __assert_rtn("InitTileOffsets", "tinyexr.h", 11777, "offset_data.num_x_levels == offset_data.num_y_levels");
}

void tinyexr::miniz::tdefl_compress_block()
{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3541, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3542, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3549, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3552, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3713, "d->m_huff_code_sizes[0][lit]");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3718, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3714, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3695, "d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3708, "d->m_huff_code_sizes[1][sym]");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3710, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3709, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3699, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3697, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3557, "code < TDEFL_MAX_HUFF_SYMBOLS_2");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3561, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3558, "bits <= ((1U << len) - 1U)");
}

void tinyexr::ReconstructLineOffsets()
{
  __assert_rtn("ReconstructLineOffsets", "tinyexr.h", 11581, "offsets->size() == n");
}

{
  __assert_rtn("ReconstructLineOffsets", "tinyexr.h", 11580, "head < marker");
}

void tinyexr::CalculateNumTiles()
{
  __assert_rtn("CalculateNumTiles", "tinyexr.h", 11727, "l <= std::numeric_limits<int>::max() - size + 1");
}

void tinyexr::LevelSize()
{
  __assert_rtn("LevelSize", "tinyexr.h", 11077, "level >= 0");
}

void tinyexr::DecodeTiledLevel()
{
}

{
  __assert_rtn("DecodeTiledLevel", "tinyexr.h", 11100, "num_x_tiles");
}

void tinyexr::AllocateImage()
{
}

{
  __assert_rtn("AllocateImage", "tinyexr.h", 10577, "0");
}

void tinyexr::DecodePixelData()
{
}

{
  __assert_rtn("DecodePixelData", "tinyexr.h", 10424, "0");
}

void cv3d::cv::gess::mesh::QuadMesh::InitVF()
{
}

void cv3d::cv::gess::mesh::QuadMesh::GetFaceVertices()
{
}

void cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges()
{
}

void cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>()
{
  __assert_rtn("attribute", "AttributeContainer.h", 111, "attributes_[h.Index()] != nullptr");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 112, "attributes_[h.Index()]->internal_type_id() == gess::util::os::GetTypeID<T>()");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 110, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::mesh::PolyMesh::_AddFace()
{
  __assert_rtn("_AddFace", "PolyMesh.cpp", 116, "vh[i] != vh[j]");
}

void cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>()
{
}

void cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>()
{
  __assert_rtn("attribute", "AttributeContainer.h", 129, "attributes_[h.Index()] != nullptr");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 130, "attributes_[h.Index()]->internal_type_id() == gess::util::os::GetTypeID<T>()");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 128, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

uint64_t std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>()
{
  __assert_rtn("Remove", "AttributeContainer.h", 193, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::mesh::OneRingVertex::NextVertex()
{
}

void cv3d::cv::gess::mesh::Topology::vertex()
{
}

{
  __assert_rtn("vertex", "Topology.cpp", 57, "ValidHandle(vh)");
}

void cv3d::cv::gess::mesh::Topology::hedge()
{
}

{
  __assert_rtn("hedge", "Topology.cpp", 61, "ValidHandle(hh)");
}

void cv3d::cv::gess::mesh::Topology::face()
{
}

{
  __assert_rtn("face", "Topology.cpp", 65, "ValidHandle(fh)");
}

void cv3d::cv::gess::mesh::Topology::v()
{
}

{
  __assert_rtn("v", "Topology.cpp", 82, "ValidHandle(vh)");
}

void cv3d::cv::gess::mesh::Topology::h()
{
}

void cv3d::cv::gess::mesh::Topology::f()
{
}

{
  __assert_rtn("f", "Topology.cpp", 90, "ValidHandle(fh)");
}

void cv3d::cv::gess::mesh::Topology::SetPrevNext()
{
}

void cv3d::cv::gess::mesh::Topology::SetTwin()
{
}

void cv3d::cv::gess::mesh::Topology::SetFace()
{
}

void cv3d::cv::gess::mesh::Topology::SetStart()
{
}

void cv3d::cv::gess::mesh::Topology::SetHEdge()
{
}

void cv3d::cv::gess::mesh::Topology::AppendVertex()
{
}

void cv3d::cv::gess::mesh::Topology::AppendHEdge()
{
}

void cv3d::cv::gess::mesh::Topology::AppendFace()
{
}

void cv3d::cv::gess::mesh::TriMesh::GetFaceVertices()
{
  __assert_rtn("GetFaceVertices", "TriMesh.cpp", 123, "fh.Valid() && vhs.size() == 3");
}

void cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges()
{
  __assert_rtn("GetFaceHEdges", "TriMesh.cpp", 131, "fh.Valid() && hhs.size() == 3");
}

void cv3d::cv::gess::mesh::TriMesh::FlipEdge()
{
  __assert_rtn("FlipEdge", "TriMesh.cpp", 149, "HEdgeNext(h5) == h3");
}

{
  __assert_rtn("FlipEdge", "TriMesh.cpp", 147, "HEdgeNext(h2) == h0");
}

void cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge()
{
}

void cv3d::cv::gess::mesh::TriMesh::SplitEdge()
{
  __assert_rtn("SplitEdge", "TriMesh.cpp", 333, "v2.Index() != v3.Index()");
}

{
  __assert_rtn("SplitEdge", "TriMesh.cpp", 325, "HEdgeNext(h5) == h3");
}

{
  __assert_rtn("SplitEdge", "TriMesh.cpp", 323, "HEdgeNext(h2) == h0");
}

void cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge()
{
}

{
  __assert_rtn("CollapseBoundaryEdge", "TriMesh.cpp", 779, "va == HEdgeEnd(h1)");
}

{
  __assert_rtn("CollapseBoundaryEdge", "TriMesh.cpp", 773, "HEdgeNext(h1) == h2");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
}

{
  __assert_rtn("dump", "json.hpp", 15573, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15574, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15601, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15602, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15643, "!val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "json.hpp", 15664, "!val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
}

{
  __assert_rtn("dump_escaped", "json.hpp", 16001, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "json.hpp", 15420, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15430, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15438, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15439, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "json.hpp", 15402, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
}

{
  __assert_rtn("grisu2", "json.hpp", 15227, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
}

{
  __assert_rtn("format_buffer", "json.hpp", 15318, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15264, "e > -1000");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15265, "e < 1000");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15344, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
}

{
  __assert_rtn("compute_boundaries", "json.hpp", 14523, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "json.hpp", 15166, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "json.hpp", 15165, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14804, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14805, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14810, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14814, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14815, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14811, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14939, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14940, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14961, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14997, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15095, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15104, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15084, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "json.hpp", 14883, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14884, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14885, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14886, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14911, "buf[len - 1] != '0'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal()
{
  __assert_rtn("scan_literal", "json.hpp", 7174, "std::char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string()
{
  __assert_rtn("scan_string", "json.hpp", 6251, "0x00 <= codepoint && codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "json.hpp", 6131, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number()
{
}

{
  __assert_rtn("scan_number", "json.hpp", 7160, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7127, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7143, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget()
{
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint()
{
  __assert_rtn("get_codepoint", "json.hpp", 6069, "0x0000 <= codepoint && codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "json.hpp", 6043, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "json.hpp", 6090, "ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
}

{
  __assert_rtn("end_object", "json.hpp", 5614, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
}

{
  __assert_rtn("end_array", "json.hpp", 5666, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "json.hpp", 11047, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "json.hpp", 11053, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "json.hpp", 11059, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++()
{
  __assert_rtn("operator++", "json.hpp", 11092, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==()
{
  __assert_rtn("operator==", "json.hpp", 11173, "m_object != nullptr");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

{
  __assert_rtn("handle_value", "json.hpp", 5484, "object_element");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*()
{
  __assert_rtn("operator*", "json.hpp", 11010, "m_object != nullptr");
}

{
  __assert_rtn("operator*", "json.hpp", 11016, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator*", "json.hpp", 11022, "m_it.array_iterator != m_object->m_value.array->end()");
}

void cv3d::cv::gess::io::WriteUsdaGeometry()
{
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 245, "m_uvs_ah.Valid()");
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 246, "m_group_ah.Valid()");
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 247, "m_groupid_to_objmat_ah.Valid()");
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 243, "f_uv_id_tri_ah.Valid() || f_uv_id_quad_ah.Valid()");
}

void cv3d::cv::gess::io::MeshFromObjContents()
{
  __assert_rtn("MeshFromObjContents", "MeshIO.cpp", 802, "attribute_size == mesh.FSize()");
}

{
  __assert_rtn("MeshFromObjContents", "MeshIO.cpp", 768, "attribute_size == mesh.FSize()");
}

{
  __assert_rtn("MeshFromObjContents", "MeshIO.cpp", 732, "attribute_size == mesh.FSize()");
}

void cv3d::cv::gess::math::EdgeDihedral()
{
}

void cv3d::cv::gess::internal::CalculateWeight()
{
  __assert_rtn("CalculateWeight", "FillHoleMinimumWeight.cpp", 105, "boundary_vhs.size() >= 1");
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>()
{
  __assert_rtn("operator[]", "json.hpp", 20222, "m_value.object->find(key) != m_value.object->end()");
}

void cv3d::cv::gess::isochart::CMaxFlow::AddNode()
{
}

void cv3d::cv::gess::isochart::CMaxFlow::AddEdge()
{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 77, "nodes[size_t(n0)].edges.size() <= 6");
}

{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 88, "nodes[size_t(n1)].edges.size() <= 6");
}

{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 93, "eid1 == reverse_edge(eid0)");
}

{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 92, "eid0 == reverse_edge(eid1)");
}

void cv3d::cv::gess::isochart::CMaxFlow::push_active()
{
  __assert_rtn("push_active", "Vis_Maxflow.h", 131, "nid >= 0");
}

void cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath()
{
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 206, "m.is_free()");
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 213, "e_nm.res > 0");
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 240, "m.is_free()");
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 247, "e_mn.res > 0");
}

void cv3d::cv::gess::isochart::CMaxFlow::trace_current_path()
{
  __assert_rtn("trace_current_path", "Vis_Maxflow.cpp", 276, "the_eid != invalid_edge_id() && edges[size_t(the_eid)].res > 0");
}

{
  __assert_rtn("trace_current_path", "Vis_Maxflow.cpp", 307, "node_pm.to_t()");
}

{
  __assert_rtn("trace_current_path", "Vis_Maxflow.cpp", 284, "node_qn.to_s()");
}

void cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath()
{
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 335, "ns.resident > 0");
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 338, "mt.resident < 0");
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 352, "bottleneck > 0");
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 359, "orphan_list.empty()");
}

void cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st()
{
  __assert_rtn("connecting_to_st", "Vis_Maxflow.cpp", 418, "std::fabs(q.resident) >= std::numeric_limits<float>::min()");
}

void cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans()
{
  __assert_rtn("AdoptOrphans", "Vis_Maxflow.cpp", 443, "std::fabs(p.resident) <= std::numeric_limits<float>::min()");
}

void cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow()
{
  __assert_rtn("ComputeMaxFlow", "Vis_Maxflow.h", 93, "m_nodeNumber == nodes.size()");
}

void cv3d::cv::gess::isochart::Geodesic::HEdgeLength()
{
}

void cv3d::cv::gess::internal::Quad2Triangles()
{
}

{
  __assert_rtn("Quad2Triangles", "QuadCommon.cpp", 21, "fh_hhs.size() == 4");
}

void cv3d::cv::gess::internal::Pentagon2Triangles()
{
}

{
  __assert_rtn("Pentagon2Triangles", "QuadCommon.cpp", 61, "fh_hhs.size() == 5");
}

void cv3d::cv::gess::internal::ComputeVertexAreas()
{
  __assert_rtn("ComputeVertexAreas", "QuadCommon.cpp", 670, "vi == mesh.HEdgeStart(hh).Index()");
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Insert()
{
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Remove()
{
}

{
  __assert_rtn("Remove", "EdgeErrorHeap.h", 80, "heap_node_items_[edge_index].IsEmpty()");
}

void cv3d::cv::gess::internal::Quadric::optimal()
{
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Update()
{
}

{
  __assert_rtn("Update", "EdgeErrorHeap.h", 97, "edge_index < heap_node_items_.size()");
}

void cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles()
{
  __assert_rtn("CheckDegenerateTriangles", "Collapser.cpp", 182, "mesh_.HEdgeStart(hh) == mesh_.HEdgeStart(target_) || mesh_.HEdgeStart(hh) == mesh_.HEdgeEnd(target_)");
}

void cv3d::cv::gess::internal::Collapser::Collapse()
{
  __assert_rtn("Collapse", "Collapser.cpp", 295, "h6 == h4");
}

{
  __assert_rtn("Collapse", "Collapser.cpp", 294, "va == mesh_.HEdgeEnd(h4)");
}

void cv3d::cv::gess::internal::Collapser::Reject()
{
  __assert_rtn("Reject", "Collapser.h", 79, "f_removed_ == 0");
}

void cv3d::cv::gess::internal::Collapser::CollapseBoundary()
{
  __assert_rtn("CollapseBoundary", "Collapser.cpp", 437, "va == mesh_.HEdgeEnd(h1)");
}

{
  __assert_rtn("CollapseBoundary", "Collapser.cpp", 431, "mesh_.HEdgeNext(h1) == h2");
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Penalize()
{
}

void cv3d::cv::gess::internal::CalculateFaceLabels()
{
}

void cv3d::cv::gess::internal::BipartitionChart()
{
}

{
  __assert_rtn("BipartitionChart", "BlenderUV2.cpp", 836, "in_seed0 != in_seed1");
}

{
  __assert_rtn("BipartitionChart", "BlenderUV2.cpp", 837, "chart_faces.size() >= 2");
}

void cv3d::cv::gess::internal::BipartitionChartWithDiagonal()
{
}

{
  __assert_rtn("BipartitionChartWithDiagonal", "BlenderUV2WithDiagonal.cpp", 253, "in_seed0 != in_seed1");
}

{
  __assert_rtn("BipartitionChartWithDiagonal", "BlenderUV2WithDiagonal.cpp", 254, "chart_faces.size() >= 2");
}

void cv3d::cv::gess::internal::AddChart()
{
  __assert_rtn("AddChart", "XAtlasPacking.cpp", 197, "atlas_image.pixel(static_cast<uint32_t>(xx), static_cast<uint32_t>(yy))[0] == false");
}

void cv3d::cv::gess::isochart::IsoChart::DoParameterize()
{
}

{
  __assert_rtn("DoParameterize", "IsoChart.cpp", 113, "children_mesh.empty()");
}

void cv3d::cv::gess::isochart::IsoMap::Init()
{
  __assert_rtn("Init", "IsoMap.cpp", 26, "pGeodesicMatrix != nullptr");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 28, "m_fSumOfEigenValue == 0.0");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 30, "!m_pfMatrixB");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 29, "m_dwPrimaryDimension == 0");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 27, "m_dwCalculatedDimension == 0");
}

void cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen()
{
  __assert_rtn("ComputeLargestEigen", "IsoMap.cpp", 97, "m_pfMatrixB != nullptr");
}

{
  __assert_rtn("ComputeLargestEigen", "IsoMap.cpp", 98, "m_pfAvgSquaredDstColumn != nullptr");
}

{
  __assert_rtn("ComputeLargestEigen", "IsoMap.cpp", 99, "dwSelectedDimension <= m_dwMatrixDimension");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV()
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion()
{
  __assert_rtn("CalculateLandmarkAndFuzzyRegion", "MeshOptimizeBoundaries.cpp", 480, "father_ != nullptr");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV()
{
}

{
  __assert_rtn("CalculateLandmarkUV", "MeshOptimizeBoundaries.cpp", 652, "father_ != nullptr");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion()
{
  __assert_rtn("CalculateFaceGeodesicDistortion", "MeshOptimizeBoundaries.cpp", 880, "dimension <= ORIGINAL_CHART_EIGEN_DIMENSION");
}

void cv3d::cv::gess::isochart::TetrisPacking::SortCharts()
{
  __assert_rtn("SortCharts", "TetrisPacking.cpp", 1300, "sorted_chart_index_.size() == chart_number_");
}

void cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture()
{
}

{
  __assert_rtn("PrepareMultiTexture", "TetrisPacking.cpp", 1326, "chart_number_ > 1");
}

{
  __assert_rtn("PrepareMultiTexture", "TetrisPacking.cpp", 1330, "charts_info_[sorted_chart_index_[i]].area > 0");
}

void cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack()
{
}

void cv3d::cv::gess::isochart::TetrisPacking::DoTessellation()
{
  __assert_rtn("DoTessellation", "TetrisPacking.cpp", 950, "num_x <= int(curr_chart_uv_board_.size())");
}

{
  __assert_rtn("DoTessellation", "TetrisPacking.cpp", 951, "num_y <= int(curr_chart_uv_board_.size())");
}

void cv3d::cv::gess::isochart::CollectLandmarks()
{
}

void cv3d::cv::gess::isochart::GetSubFaceVid()
{
  __assert_rtn("GetSubFaceVid", "IMTComputation.cpp", 14, "sub_face_vids.size() == SUBDIV_FACE_NUMBER");
}

void cv3d::cv::gess::isochart::HEdgeSignalLength()
{
}

void cv3d::cv::gess::isochart::MergeToRootMesh()
{
}

{
  __assert_rtn("MergeToRootMesh", "IsoChartUtils.cpp", 62, "m_uvs_ah.Valid()");
}

void cv3d::cv::gess::isochart::FindAllBoundaries()
{
  __assert_rtn("FindAllBoundaries", "IsoChartUtils.cpp", 322, "vert_boundary_id.size() == mesh.VSize()");
}

void cv3d::cv::gess::isochart::ResetUV()
{
}

void cv3d::cv::gess::isochart::CalculateInfiniteStretchArea()
{
  __assert_rtn("CalculateInfiniteStretchArea", "IsoChartUtils.cpp", 535, "mesh.FSize() == f_stretchs.size()");
}

void cv3d::cv::gess::isochart::CalculateInfiniteStretch2DAreaRatio()
{
  __assert_rtn("CalculateInfiniteStretch2DAreaRatio", "IsoChartUtils.cpp", 550, "mesh.FSize() == f_stretchs.size()");
}

void cv3d::cv::gess::isochart::IsVertexManifold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v5;
    operator delete(v5);
  }
}

void cv3d::cv::gess::isochart::CalculateFaceLnStretch()
{
  __assert_rtn("CalculateFaceLnStretch", "IsoChartUtils.cpp", 615, "temp >= 0.0");
}

{
  __assert_rtn("CalculateFaceLnStretch", "IsoChartUtils.cpp", 618, "temp1 >= 0.0");
}

void cv3d::cv::gess::isochart::MeasureTriMeshLnStretch()
{
  __assert_rtn("MeasureTriMeshLnStretch", "IsoChartUtils.cpp", 738, "mesh.attribute(uvs_ah).Size() == mesh.VSize()");
}

void cv3d::cv::gess::isochart::MeasureUvUtilization()
{
}

{
  __assert_rtn("MeasureUvUtilization", "IsoChartUtils.cpp", 890, "f_uvid_ah.Valid()");
}

{
  __assert_rtn("MeasureUvUtilization", "IsoChartUtils.cpp", 891, "g_ah.Valid()");
}

void cv3d::cv::gess::isochart::ExportFaceColorMap()
{
  __assert_rtn("ExportFaceColorMap", "IsoChartUtils.cpp", 924, "mesh.FSize() == f_colors.size()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart()
{
  __assert_rtn("TryMergeChart", "MergeCharts.cpp", 657, "chart1 != nullptr");
}

{
  __assert_rtn("TryMergeChart", "MergeCharts.cpp", 658, "chart2 != nullptr");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts()
{
}

{
  __assert_rtn("CollectSharedVerts", "MergeCharts.cpp", 731, "v_id_root_chart2_ah.Valid()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology()
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord()
{
  __assert_rtn("CalculateVertMappingCoord", "IsoChartMesh.cpp", 343, "primary_eigen_dimension_ >= 2");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra()
{
  __assert_rtn("CalculateGeodesicDistanceToVertexDijkstra", "IsoChartMesh.cpp", 203, "geodesic_distances.size() == mesh_.VSize()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource()
{
}

{
  __assert_rtn("RetreiveVertDijkstraPathToSource", "IsoChartMesh.cpp", 636, "mesh_.is_boundary(mesh::VertexHandle(dijkstra_path[0]))");
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath()
{
}

{
  __assert_rtn("FindSplitPath", "IsoChartMesh.cpp", 784, "start_cut_id > 0");
}

{
  __assert_rtn("FindSplitPath", "IsoChartMesh.cpp", 789, "dijkstra_path[i] != INVALID_INDEX");
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit()
{
}

{
  __assert_rtn("FindAdjacentHEdgeToSplit", "IsoChartMesh.cpp", 802, "adj_hhs.empty()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult()
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch()
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch()
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch()
{
}

void cv3d::cv::gess::isochart::GetAdjacentFaces()
{
}

void cv3d::cv::gess::isochart::GetAdjacentHEdges()
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt()
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt()
{
}

void cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing()
{
  __assert_rtn("ExplicitUmbrellaSmoothing", "Smooth.cpp", 235, "vertex_lamdas.size() == mesh.VSize()");
}

void cv3d::cv::gess::alg::Parameterize()
{
}

void cv3d::cv::gess::alg::SortFaceByGroupID()
{
}

{
  __assert_rtn("SortFaceByGroupID", "Parameterization.cpp", 752, "f_gid_handle.Valid()");
}

void cv3d::cv::gess::alg::SortFaceByGroupID32Bit()
{
}

{
  __assert_rtn("SortFaceByGroupID32Bit", "Parameterization.cpp", 797, "f_gid_handle.Valid()");
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::TriMesh>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    long long v5 = *v4;
    v4 += 23;
    (*v5)();
    v3 += 23;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution()
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x270EE4968](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x270EE4B98]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C60]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

void CGColorSpaceGetColorTable(CGColorSpaceRef space, uint8_t *table)
{
}

size_t CGColorSpaceGetColorTableCount(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5CF8](space);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D08](space);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x270EE62B8](provider);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x270EE62E0](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x270EE6738](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x270EE67A0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x270EE67E8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF5000](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

CGImageSourceStatus CGImageSourceGetStatus(CGImageSourceRef isrc)
{
  return MEMORY[0x270EF5058](isrc);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x270EF5E20]();
}

void NSLog(NSString *format, ...)
{
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x270F98248](this, __s);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98288](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98290](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98298](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F982A0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__stem(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F982C8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x270F982D0](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983C0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986E8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x270F98AD8](a1, a2);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::replace_extension(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__replacement)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98B30](this, __replacement);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x270F98B60](a1, __ec);
}

float std::stof(const std::string *__str, size_t *__idx)
{
  MEMORY[0x270F98B70](__str, __idx);
  return result;
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98BC8](__str, __idx, *(void *)&__base);
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

void std::locale::~locale(std::locale *this)
{
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x270F98C98]();
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x270F98DF8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x270F98E58](this);
}

void std::bad_alloc::~bad_alloc(std::bad_alloc *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

int getrusage(int a1, rusage *a2)
{
  return MEMORY[0x270ED9D50](*(void *)&a1, a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x270EDA090]();
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x270EDB020](*(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x270EDB0B0]();
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

int sgeev_(char *__jobvl, char *__jobvr, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__wr, __CLPK_real *__wi, __CLPK_real *__vl, __CLPK_integer *__ldvl, __CLPK_real *__vr, __CLPK_integer *__ldvr, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x270EDE748](__jobvl, __jobvr, __n, __a, __lda, __wr, __wi, __vl);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

void srand(unsigned int a1)
{
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x270EDB658](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6E8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB718](__str, __endptr, *(void *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x270EDB7D8](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x270EDB868](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x270EDBA80](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x270EDBA90](*(void *)&target_task, address, size);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}