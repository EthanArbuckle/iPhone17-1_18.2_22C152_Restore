id _AXDurationStringForDuration(char a1, double a2)
{
  id v4;
  void *v5;
  void v7[5];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;
  uint64_t vars8;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__8;
  v13 = __Block_byref_object_dispose__8;
  v14 = 0;
  if (_AXCachedDateComponentsFormatter_onceToken != -1) {
    dispatch_once(&_AXCachedDateComponentsFormatter_onceToken, &__block_literal_global_61);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___AXCachedDateComponentsFormatter_block_invoke_2;
  v7[3] = &unk_1E55875F8;
  v7[4] = &v9;
  v8 = a1;
  dispatch_sync((dispatch_queue_t)_AXCachedDateComponentsFormatter_AXDateComponentsFormatterQueue, v7);
  v4 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v5 = 0;
  }
  else
  {
    v5 = [v4 stringFromTimeInterval:a2];
  }

  return v5;
}

void sub_18D30B8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _AXIPCSimpleSendData(int a1, int a2, mach_msg_timeout_t timeout, uint64_t a4, int a5)
{
  memset(&msg[4], 0, 32);
  *(_DWORD *)&msg[28] = a2;
  int v9 = 1245184;
  uint64_t v10 = a4;
  int v11 = 16777472;
  int v12 = a5;
  uint64_t v13 = *MEMORY[0x1E4F14068];
  int v14 = a5;
  *(_DWORD *)msg = -2147483629;
  *(_DWORD *)&msg[8] = a1;
  *(void *)&msg[20] = 0x2000D5AD3;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v6 = mach_msg((mach_msg_header_t *)msg, 17, 0x44u, 0, 0, timeout, 0);
  if ((v6 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v6;
}

void _XSimpleSendData(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 68)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(unsigned char *)(a1 + 51) == 1
      && (unsigned int v4 = *(_DWORD *)(a1 + 52), v4 == *(_DWORD *)(a1 + 64)))
    {
      if (!*(_DWORD *)(a1 + 68))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 72);
        if (v5 > 7 && v5 - 8 > 0x1F)
        {
          uint64_t v7 = *(unsigned int *)(a1 + 12);
          uint64_t v8 = *(unsigned int *)(a1 + 28);
          uint64_t v9 = *(void *)(a1 + 40);
          uint64_t v10 = *(void *)(a1 + 80);
          long long v11 = *(_OWORD *)(a1 + 104);
          v12[0] = *(_OWORD *)(a1 + 88);
          v12[1] = v11;
          *(_DWORD *)(a2 + 32) = __AXXIPCSimpleSendData(v7, v8, v9, v4, v10, v12);
          mig_deallocate(*(void *)(a1 + 40), *(unsigned int *)(a1 + 52));
          *(void *)(a1 + 40) = 0;
          *(_DWORD *)(a1 + 52) = 0;
          return;
        }
      }
      int v6 = -309;
    }
    else
    {
      int v6 = -300;
    }
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

uint64_t __AXXIPCSimpleSendData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a3 length:a4];
  long long v11 = AXIPCServerGetServer(a1);
  int v12 = v11;
  if (v11)
  {
    long long v13 = a6[1];
    *(_OWORD *)buf = *a6;
    long long v17 = v13;
    [v11 _handleIncomingMessage:v10 securityToken:a5 auditToken:buf clientPort:a2 completion:0];
    if (a2)
    {
      if (mach_port_deallocate(*MEMORY[0x1E4F14960], a2)) {
        _AXAssert();
      }
      a2 = 0;
    }
  }
  else
  {
    int v14 = AXLogIPC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a1;
      _os_log_impl(&dword_18D308000, v14, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
    }

    a2 = 5;
  }

  return a2;
}

id AXIPCServerGetServer(uint64_t a1)
{
  v1 = [NSNumber numberWithInt:a1];
  [(id)ServerPortLock lock];
  v2 = [(id)ServerPortMapping objectForKey:v1];
  [(id)ServerPortLock unlock];

  return v2;
}

BOOL AXIncrefSendRight(mach_port_name_t name)
{
  kern_return_t v3;

  v2 = (ipc_space_t *)MEMORY[0x1E4F14960];
  v3 = mach_port_mod_refs(*MEMORY[0x1E4F14960], name, 0, 1);
  if (v3 == 17) {
    mach_port_mod_refs(*v2, name, 4u, 1);
  }
  return v3 == 0;
}

BOOL AXInPreboardScenario()
{
  if (AXDeviceIsAudioAccessory()) {
    return 0;
  }
  if (AXInPreboardScenario_onceToken != -1) {
    dispatch_once(&AXInPreboardScenario_onceToken, &__block_literal_global_0);
  }
  return InPreBoardMode != 0;
}

void __AXInPreboardScenario_block_invoke()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)_handleInPreBoardModeUpdate, @"AXInternalInPreBoardModeUpdatedNotification", 0, CFNotificationSuspensionBehaviorCoalesce);
  v1 = AXPreBoardQueue();
  dispatch_sync(v1, &__block_literal_global_3);
}

void _handleInPreBoardModeUpdate()
{
  v0 = AXPreBoardQueue();
  dispatch_async(v0, &__block_literal_global_51);
}

id AXPreBoardQueue()
{
  if (AXPreBoardQueue_onceToken != -1) {
    dispatch_once(&AXPreBoardQueue_onceToken, &__block_literal_global_53);
  }
  v0 = (void *)AXPreBoardQueue_PreBoardQueue;

  return v0;
}

void __AXInPreboardScenario_block_invoke_2()
{
  id v0 = +[AXBackBoardServer server];
  InPreBoardMode = [v0 inPreboardMode];
}

uint64_t AXInCheckerBoardScenario()
{
  if (AXInCheckerBoardScenario_onceToken != -1) {
    dispatch_once(&AXInCheckerBoardScenario_onceToken, &__block_literal_global_8);
  }
  return InCheckerBoardMode;
}

void __AXInCheckerBoardScenario_block_invoke()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)_handleInCheckerBoardModeUpdate, @"AXInternalInCheckerBoardModeUpdatedNotification", 0, CFNotificationSuspensionBehaviorCoalesce);
  id v1 = +[AXBackBoardServer server];
  InCheckerBoardMode = [v1 inCheckerBoardMode];
}

void _handleInCheckerBoardModeUpdate()
{
  id v0 = +[AXBackBoardServer server];
  InCheckerBoardMode = [v0 inCheckerBoardMode];

  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"AXInCheckerBoardScenarioUpdatedNotification", 0, 0, 1u);
}

uint64_t AXSessionIsLoginSession(BOOL *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AXSessionIsLoginSession_onceToken != -1) {
    dispatch_once(&AXSessionIsLoginSession_onceToken, &__block_literal_global_13);
  }
  v2 = (void *)SessionIsLoginSession;
  if (SessionIsLoginSession)
  {
    if (a1) {
      *a1 = 1;
    }
  }
  else
  {
    v3 = +[AXBackBoardServer server];
    [v3 sessionIsLoginSessionWithResult:&__block_literal_global_16];

    uint64_t v4 = SessionIsLoginSession;
    if (a1) {
      *a1 = SessionIsLoginSession != 0;
    }
    unsigned int v5 = AXLogCommon();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v7[0] = 67109120;
      v7[1] = v4 != 0;
      _os_log_impl(&dword_18D308000, v5, OS_LOG_TYPE_INFO, "Login session uninitialized, attempting to retrieve (initialized: %d now)", (uint8_t *)v7, 8u);
    }

    v2 = (void *)SessionIsLoginSession;
  }
  return [v2 BOOLValue];
}

void __AXSessionIsLoginSession_block_invoke()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)_handleSessionIsLoginSessionUpdate, @"AXInternalSessionIsLoginSessionChangedNotification", 0, CFNotificationSuspensionBehaviorCoalesce);
}

void _handleSessionIsLoginSessionUpdate()
{
  id v0 = +[AXBackBoardServer server];
  [v0 sessionIsLoginSessionWithResult:&__block_literal_global_56];
}

void __AXSessionIsLoginSession_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v3 = AXLogCommon();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl(&dword_18D308000, v3, OS_LOG_TYPE_INFO, "Retrieved login session status: %d", (uint8_t *)v6, 8u);
  }

  uint64_t v4 = [NSNumber numberWithBool:a2];
  unsigned int v5 = (void *)SessionIsLoginSession;
  SessionIsLoginSession = v4;
}

uint64_t AXUtilitiesFrameworkBundle()
{
  id v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = objc_opt_class();

  return [v0 bundleForClass:v1];
}

uint64_t AXUICanShowPointerControlSettings()
{
  id v0 = +[AXSettings sharedInstance];
  int v1 = [v0 laserEnabled];

  if (!v1) {
    return 0;
  }
  int v2 = _AXSAssistiveTouchEnabled();
  int v3 = _AXSAssistiveTouchScannerEnabled();
  int v4 = v2 | v3;
  unsigned int v5 = +[AXSettings sharedInstance];
  uint64_t v6 = [v5 assistiveTouchScanningMode];

  uint64_t v7 = +[AXPointerDeviceManager sharedInstance];
  uint64_t v8 = [v7 connectedDevices];
  uint64_t v9 = [v8 count];

  if (AXDeviceIsPhone())
  {
    if (v9) {
      BOOL v10 = v4 != 0;
    }
    else {
      BOOL v10 = 0;
    }
    return v6 == 3 && v3 != 0 || v10;
  }
  else
  {
    return v9 || v4 != 0;
  }
}

id AXZoomLensDefault()
{
  int IsPad = AXDeviceIsPad();
  int v1 = (void **)MEMORY[0x1E4F48278];
  if (!IsPad) {
    int v1 = (void **)MEMORY[0x1E4F48270];
  }
  int v2 = *v1;

  return v2;
}

id AXZoomAllLensEffects()
{
  if (AXZoomAllLensEffects_onceToken != -1) {
    dispatch_once(&AXZoomAllLensEffects_onceToken, &__block_literal_global_22);
  }
  id v0 = (void *)AXZoomAllLensEffects_Result;

  return v0;
}

void __AXZoomAllLensEffects_block_invoke()
{
  v6[5] = *MEMORY[0x1E4F143B8];
  id v0 = (void *)MEMORY[0x1E4F1CAA0];
  uint64_t v1 = *MEMORY[0x1E4F48258];
  v6[0] = *MEMORY[0x1E4F48268];
  v6[1] = v1;
  uint64_t v2 = *MEMORY[0x1E4F48248];
  _DWORD v6[2] = *MEMORY[0x1E4F48240];
  v6[3] = v2;
  v6[4] = *MEMORY[0x1E4F48260];
  int v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:5];
  uint64_t v4 = [v0 orderedSetWithArray:v3];
  unsigned int v5 = (void *)AXZoomAllLensEffects_Result;
  AXZoomAllLensEffects_Result = v4;
}

id AXZoomAllLensModes()
{
  if (AXZoomAllLensModes_onceToken != -1) {
    dispatch_once(&AXZoomAllLensModes_onceToken, &__block_literal_global_26);
  }
  id v0 = (void *)AXZoomAllLensModes_Result;

  return v0;
}

void __AXZoomAllLensModes_block_invoke()
{
  v9[3] = *MEMORY[0x1E4F143B8];
  id v0 = (void *)MEMORY[0x1E4F1CA70];
  uint64_t v1 = *MEMORY[0x1E4F48280];
  v9[0] = *MEMORY[0x1E4F48278];
  v9[1] = v1;
  v9[2] = *MEMORY[0x1E4F48270];
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:3];
  uint64_t v3 = [v0 orderedSetWithArray:v2];
  uint64_t v4 = (void *)AXZoomAllLensModes_Result;
  AXZoomAllLensModes_Result = v3;

  unsigned int v5 = (void *)AXZoomAllLensModes_Result;
  uint64_t v6 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:&stru_1EDC3DEF8 ascending:1 selector:sel_compare_];
  uint64_t v8 = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v8 count:1];
  [v5 sortUsingDescriptors:v7];
}

id AXZoomUserSelectableLensModes()
{
  if (AXZoomUserSelectableLensModes_onceToken != -1) {
    dispatch_once(&AXZoomUserSelectableLensModes_onceToken, &__block_literal_global_33);
  }
  id v0 = (void *)AXZoomUserSelectableLensModes_Result;

  return v0;
}

void __AXZoomUserSelectableLensModes_block_invoke()
{
  v15[3] = *MEMORY[0x1E4F143B8];
  int IsPad = AXDeviceIsPad();
  uint64_t v1 = (void *)MEMORY[0x1E4F1CA70];
  if (IsPad)
  {
    uint64_t v2 = *MEMORY[0x1E4F48280];
    v15[0] = *MEMORY[0x1E4F48278];
    v15[1] = v2;
    v15[2] = *MEMORY[0x1E4F48270];
    uint64_t v3 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v4 = v15;
    uint64_t v5 = 3;
  }
  else
  {
    uint64_t v6 = *MEMORY[0x1E4F48270];
    v14[0] = *MEMORY[0x1E4F48278];
    v14[1] = v6;
    uint64_t v3 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v4 = v14;
    uint64_t v5 = 2;
  }
  uint64_t v7 = [v3 arrayWithObjects:v4 count:v5];
  uint64_t v8 = [v1 orderedSetWithArray:v7];
  uint64_t v9 = (void *)AXZoomUserSelectableLensModes_Result;
  AXZoomUserSelectableLensModes_Result = v8;

  BOOL v10 = (void *)AXZoomUserSelectableLensModes_Result;
  long long v11 = [MEMORY[0x1E4F29008] sortDescriptorWithKey:&stru_1EDC3DEF8 ascending:1 selector:sel_compare_];
  long long v13 = v11;
  int v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v13 count:1];
  [v10 sortUsingDescriptors:v12];
}

id AXZoomDockPositions()
{
  if (AXZoomDockPositions_onceToken != -1) {
    dispatch_once(&AXZoomDockPositions_onceToken, &__block_literal_global_35);
  }
  id v0 = (void *)AXZoomDockPositions_Result;

  return v0;
}

void __AXZoomDockPositions_block_invoke()
{
  v6[4] = *MEMORY[0x1E4F143B8];
  id v0 = (void *)MEMORY[0x1E4F1CA70];
  uint64_t v1 = *MEMORY[0x1E4F48228];
  v6[0] = *MEMORY[0x1E4F48238];
  v6[1] = v1;
  uint64_t v2 = *MEMORY[0x1E4F48220];
  _DWORD v6[2] = *MEMORY[0x1E4F48230];
  v6[3] = v2;
  uint64_t v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];
  uint64_t v4 = [v0 orderedSetWithArray:v3];
  uint64_t v5 = (void *)AXZoomDockPositions_Result;
  AXZoomDockPositions_Result = v4;
}

uint64_t AXGetSiriRequireSiriForInterruptionsInValue()
{
  id v0 = [MEMORY[0x1E4F4E538] sharedPreferences];
  uint64_t v1 = [v0 isSiriAccessibilityBargeInEnabled] ^ 1;

  return v1;
}

void AXSetSiriRequireSiriForInterruptionsInValue(int a1)
{
  id v2 = [MEMORY[0x1E4F4E538] sharedPreferences];
  [v2 setSiriAccessibilityBargeInEnabled:a1 ^ 1u];
}

uint64_t AXGetSiriCallHangUpValue()
{
  id v0 = [getVTPreferencesClass() sharedPreferences];
  uint64_t v1 = [v0 canUseVoiceTriggerDuringPhoneCall];

  return v1;
}

id getVTPreferencesClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getVTPreferencesClass_softClass;
  uint64_t v7 = getVTPreferencesClass_softClass;
  if (!getVTPreferencesClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getVTPreferencesClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getVTPreferencesClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D30EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AXSetSiriCallHangUpValue(uint64_t a1)
{
  id v2 = [getVTPreferencesClass() sharedPreferences];
  [v2 setCanUseVoiceTriggerDuringPhoneCall:a1];
}

uint64_t AXApplicationSupportsHapticMusic(void *a1)
{
  id v1 = a1;
  id v2 = [v1 URL];

  if (v2)
  {
    id v3 = objc_alloc(MEMORY[0x1E4F4F6D0]);
    uint64_t v4 = [v1 URL];
    uint64_t v5 = (void *)[v3 initWithURL:v4];

    objc_opt_class();
    uint64_t v6 = [v5 infoDictionary];
    uint64_t v7 = [v6 objectForKey:@"MusicHapticsSupported"];
    uint64_t v8 = __UIAccessibilityCastAsClass();

    if ([v8 BOOLValue])
    {
      uint64_t v9 = 1;
    }
    else
    {
      BOOL v10 = [v1 bundleIdentifier];
      if ([v10 isEqualToString:@"com.apple.Music"])
      {
        uint64_t v9 = 1;
      }
      else
      {
        long long v11 = [v1 bundleIdentifier];
        if ([v11 isEqualToString:@"com.apple.music.classical"])
        {
          uint64_t v9 = 1;
        }
        else
        {
          int v12 = [v1 bundleIdentifier];
          uint64_t v9 = [v12 isEqualToString:@"com.apple.Preferences"];
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void ___handleInPreBoardModeUpdate_block_invoke()
{
  id v0 = +[AXBackBoardServer server];
  InPreBoardMode = [v0 inPreboardMode];

  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"AXInPreBoardScenarioUpdatedNotification", 0, 0, 1u);
}

uint64_t __AXPreBoardQueue_block_invoke()
{
  AXPreBoardQueue_PreBoardQueue = (uint64_t)dispatch_queue_create("AXPreBoardQueue", 0);

  return MEMORY[0x1F41817F8]();
}

void ___handleSessionIsLoginSessionUpdate_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [NSNumber numberWithBool:a2];
  uint64_t v4 = (void *)SessionIsLoginSession;
  SessionIsLoginSession = v3;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"AXSessionIsLoginSessionUpdatedNotification", 0, 0, 1u);
  uint64_t v6 = AXLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v2;
    _os_log_impl(&dword_18D308000, v6, OS_LOG_TYPE_INFO, "Updated login session status: %d", (uint8_t *)v7, 8u);
  }
}

Class __getVTPreferencesClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!VoiceTriggerLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __VoiceTriggerLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5585E50;
    uint64_t v5 = 0;
    VoiceTriggerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!VoiceTriggerLibraryCore_frameworkLibrary) {
    __getVTPreferencesClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("VTPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getVTPreferencesClass_block_invoke_cold_2();
  }
  getVTPreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __VoiceTriggerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VoiceTriggerLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_18D30F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id soft_AXUIAssistiveTouchStringForName(void *a1)
{
  id v1 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v2 = (void (*)(id, uint64_t))getAXUIAssistiveTouchStringForNameSymbolLoc_ptr;
  uint64_t v9 = getAXUIAssistiveTouchStringForNameSymbolLoc_ptr;
  if (!getAXUIAssistiveTouchStringForNameSymbolLoc_ptr)
  {
    uint64_t v3 = (void *)AccessibilityUIUtilitiesLibrary();
    v7[3] = (uint64_t)dlsym(v3, "AXUIAssistiveTouchStringForName");
    getAXUIAssistiveTouchStringForNameSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    int v2 = (void (*)(id, uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2) {
    soft_AXUIAssistiveTouchStringForName_cold_1();
  }
  long long v4 = v2(v1, 1);

  return v4;
}

void sub_18D30F708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D30FC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_paCurrentRouteSupportsTransparencyAccommodations()
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  id v0 = (uint64_t (*)(void))getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr;
  uint64_t v6 = getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr;
  if (!getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr)
  {
    id v1 = (void *)PersonalAudioLibrary();
    v4[3] = (uint64_t)dlsym(v1, "paCurrentRouteSupportsTransparencyAccommodations");
    getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr = (_UNKNOWN *)v4[3];
    id v0 = (uint64_t (*)(void))v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    soft_paCurrentRouteSupportsTransparencyAccommodations_cold_1();
  }
  return v0();
}

void sub_18D30FDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_paBluetoothDeviceSupportsSSL(void *a1)
{
  id v1 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v2 = (uint64_t (*)(id))getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr;
  uint64_t v9 = getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr;
  if (!getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr)
  {
    uint64_t v3 = (void *)PersonalAudioLibrary();
    v7[3] = (uint64_t)dlsym(v3, "paBluetoothDeviceSupportsSSL");
    getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    int v2 = (uint64_t (*)(id))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2) {
    soft_paBluetoothDeviceSupportsSSL_cold_1();
  }
  uint64_t v4 = v2(v1);

  return v4;
}

void sub_18D30FF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPASettingsClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getPASettingsClass_softClass;
  uint64_t v7 = getPASettingsClass_softClass;
  if (!getPASettingsClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getPASettingsClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getPASettingsClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D30FFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getWatchControlSettingsClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getWatchControlSettingsClass_softClass;
  uint64_t v7 = getWatchControlSettingsClass_softClass;
  if (!getWatchControlSettingsClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getWatchControlSettingsClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getWatchControlSettingsClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D3102FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D3105D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAXUIClientClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getAXUIClientClass_softClass;
  uint64_t v7 = getAXUIClientClass_softClass;
  if (!getAXUIClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAXUIClientClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getAXUIClientClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D3107B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D3113EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D311F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAXPISystemActionHelperClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getAXPISystemActionHelperClass_softClass;
  uint64_t v7 = getAXPISystemActionHelperClass_softClass;
  if (!getAXPISystemActionHelperClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAXPISystemActionHelperClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getAXPISystemActionHelperClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D3120E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _handleTripleClickPrefNotificationChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AXLogCommon();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    uint64_t v7 = a3;
    _os_log_impl(&dword_18D308000, v4, OS_LOG_TYPE_DEFAULT, "Handling triple click notification for %@", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v5 = [MEMORY[0x1E4F58CA0] sharedInstance];
  [v5 reloadControlsForExtension:@"com.apple.AccessibilityUIServer.AccessibilityControlsExtension" kind:0 reason:@"AX shortcut preference changed"];
}

void *__getAXUILocalizedStringForKeyWithTableSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)AccessibilityUIUtilitiesLibrary();
  uint64_t result = dlsym(v2, "AXUILocalizedStringForKeyWithTable");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXUILocalizedStringForKeyWithTableSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AccessibilityUIUtilitiesLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!AccessibilityUIUtilitiesLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __AccessibilityUIUtilitiesLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_1E5585FF0;
    uint64_t v4 = 0;
    AccessibilityUIUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = AccessibilityUIUtilitiesLibraryCore_frameworkLibrary;
  if (!AccessibilityUIUtilitiesLibraryCore_frameworkLibrary) {
    AccessibilityUIUtilitiesLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __AccessibilityUIUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AccessibilityUIUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getAXUIAssistiveTouchStringForNameSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)AccessibilityUIUtilitiesLibrary();
  uint64_t result = dlsym(v2, "AXUIAssistiveTouchStringForName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXUIAssistiveTouchStringForNameSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getHUComfortSoundsSettingsClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!HearingUtilitiesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __HearingUtilitiesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5586008;
    uint64_t v5 = 0;
    HearingUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!HearingUtilitiesLibraryCore_frameworkLibrary) {
    __getHUComfortSoundsSettingsClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("HUComfortSoundsSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getHUComfortSoundsSettingsClass_block_invoke_cold_2();
  }
  getHUComfortSoundsSettingsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __HearingUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  HearingUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getpaCurrentBluetoothDeviceSupportingTransparencyAccommodationsSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)PersonalAudioLibrary();
  uint64_t result = dlsym(v2, "paCurrentBluetoothDeviceSupportingTransparencyAccommodations");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getpaCurrentBluetoothDeviceSupportingTransparencyAccommodationsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                              + 24);
  return result;
}

uint64_t PersonalAudioLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!PersonalAudioLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __PersonalAudioLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_1E5586020;
    uint64_t v4 = 0;
    PersonalAudioLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = PersonalAudioLibraryCore_frameworkLibrary;
  if (!PersonalAudioLibraryCore_frameworkLibrary) {
    PersonalAudioLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __PersonalAudioLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PersonalAudioLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)PersonalAudioLibrary();
  uint64_t result = dlsym(v2, "paCurrentRouteSupportsTransparencyAccommodations");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getpaCurrentRouteSupportsTransparencyAccommodationsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void *__getpaBluetoothDeviceSupportsSSLSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)PersonalAudioLibrary();
  uint64_t result = dlsym(v2, "paBluetoothDeviceSupportsSSL");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getpaBluetoothDeviceSupportsSSLSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getPASettingsClass_block_invoke(uint64_t a1)
{
  PersonalAudioLibrary();
  Class result = objc_getClass("PASettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getPASettingsClass_block_invoke_cold_1();
  }
  getPASettingsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t WatchControlSettingsLibraryCore()
{
  if (!WatchControlSettingsLibraryCore_frameworkLibrary) {
    WatchControlSettingsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return WatchControlSettingsLibraryCore_frameworkLibrary;
}

uint64_t __WatchControlSettingsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  WatchControlSettingsLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getWatchControlSettingsClass_block_invoke(uint64_t a1)
{
  long long v3 = 0;
  if (!WatchControlSettingsLibraryCore()) {
    __getWatchControlSettingsClass_block_invoke_cold_1(&v3);
  }
  Class result = objc_getClass("WatchControlSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getWatchControlSettingsClass_block_invoke_cold_2();
  }
  getWatchControlSettingsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getAXUIClientClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AccessibilityUILibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __AccessibilityUILibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5586050;
    uint64_t v5 = 0;
    AccessibilityUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AccessibilityUILibraryCore_frameworkLibrary) {
    __getAXUIClientClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AXUIClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getAXUIClientClass_block_invoke_cold_2();
  }
  getAXUIClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AccessibilityUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AccessibilityUILibraryCore_frameworkLibrary = result;
  return result;
}

Class __getAXPISystemActionHelperClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AccessibilityPhysicalInteractionLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __AccessibilityPhysicalInteractionLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5586068;
    uint64_t v5 = 0;
    AccessibilityPhysicalInteractionLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AccessibilityPhysicalInteractionLibraryCore_frameworkLibrary) {
    __getAXPISystemActionHelperClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AXPISystemActionHelper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getAXPISystemActionHelperClass_block_invoke_cold_2();
  }
  getAXPISystemActionHelperClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AccessibilityPhysicalInteractionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AccessibilityPhysicalInteractionLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getSpeakThisServicesClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SpeakThisServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __SpeakThisServicesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5586080;
    uint64_t v5 = 0;
    SpeakThisServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpeakThisServicesLibraryCore_frameworkLibrary) {
    __getSpeakThisServicesClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SpeakThisServices");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSpeakThisServicesClass_block_invoke_cold_2();
  }
  getSpeakThisServicesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpeakThisServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpeakThisServicesLibraryCore_frameworkLibrary = result;
  return result;
}

id AXVoiceNameForVoiceId(void *a1, int a2)
{
  if (a1)
  {
    long long v3 = (void *)MEMORY[0x1E4FAF278];
    id v4 = a1;
    uint64_t v5 = [v3 sharedInstance];
    uint64_t v6 = [v5 resourceWithVoiceId:v4];

    uint64_t v7 = [v6 localizedName];
    if (a2
      && [v6 type] == 3
      && ([v6 subtype] != 7 || objc_msgSend(v6, "subtype") == 7 && objc_msgSend(v6, "footprint") != 3))
    {
      BOOL v10 = +[AXLanguageManager sharedInstance];
      long long v11 = [v6 primaryLanguage];
      int v12 = [v10 dialectForLanguageID:v11];

      long long v13 = NSString;
      int v14 = AXLocalizedString(@"siri.and.locale");
      uint64_t v15 = [v12 localeNameInCurrentLocale];
      objc_msgSend(v13, "stringWithFormat:", v14, v7, v15);
      id v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v8 = v7;
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id AXSiriTTSSynthesisVoiceFromVoiceIdentifier(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([MEMORY[0x1E4FAF288] isSiriVoiceIdentifier:v3])
  {
    id v17 = v4;
    id v18 = 0;
    uint64_t v16 = 0;
    uint64_t v5 = (id *)&v16;
    TTSGetComponentsInNamedSiriVoiceIdentifier();
    id v6 = v18;
    id v7 = v17;

    id v4 = v7;
LABEL_5:
    id v8 = *v5;
    goto LABEL_7;
  }
  if ([MEMORY[0x1E4FAF288] isVocalizerVoiceIdentifier:v3])
  {
    uint64_t v14 = 0;
    id v15 = 0;
    uint64_t v5 = (id *)&v14;
    TTSGetComponentsInNashvilleVoiceIdentifier();
    id v6 = v15;
    goto LABEL_5;
  }
  id v6 = 0;
  id v8 = 0;
LABEL_7:
  id v9 = objc_alloc(MEMORY[0x1E4FA4F68]);
  BOOL v10 = [v4 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];
  long long v11 = (void *)[v9 initWithLanguage:v10 name:v6];

  if ([MEMORY[0x1E4FAF288] isNeuralAXSiriVoiceIdentifier:v3])
  {
    uint64_t v12 = 5;
  }
  else if ([MEMORY[0x1E4FAF288] isNeuralSiriVoiceIdentifier:v3])
  {
    uint64_t v12 = 4;
  }
  else if ([MEMORY[0x1E4FAF288] isSiriVoiceIdentifier:v3])
  {
    uint64_t v12 = 3;
  }
  else
  {
    uint64_t v12 = 1;
  }
  [v11 setType:v12];

  return v11;
}

uint64_t AXSiriTTSSynthesisVoiceAssetsAreEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 language];
  id v6 = [v4 language];
  if ([v5 isEqualToString:v6]
    && (uint64_t v7 = [v3 type], v7 == objc_msgSend(v4, "type")))
  {
    id v8 = [v3 name];
    id v9 = [v4 name];
    uint64_t v10 = [v8 isEqualToString:v9];
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id AXClientsForSiriResource(void *a1)
{
  id v1 = a1;
  if ([v1 type] == 3)
  {
    int v2 = [MEMORY[0x1E4F1CA48] array];
    id v3 = objc_alloc_init(MEMORY[0x1E4FA4F30]);
    id v4 = [v1 voiceId];
    uint64_t v5 = [v1 primaryLanguage];
    id v6 = AXSiriTTSSynthesisVoiceFromVoiceIdentifier(v4, v5);

    dispatch_semaphore_t v7 = dispatch_semaphore_create(0);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __AXClientsForSiriResource_block_invoke;
    v15[3] = &unk_1E5586210;
    id v16 = v6;
    id v8 = v2;
    id v17 = v8;
    dispatch_semaphore_t v18 = v7;
    id v9 = v7;
    id v10 = v6;
    [v3 subscribedVoicesWithReply:v15];
    dispatch_time_t v11 = dispatch_time(0, 2000000000);
    dispatch_semaphore_wait(v9, v11);
    dispatch_semaphore_t v12 = v18;
    id v13 = v8;
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

void __AXClientsForSiriResource_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)v21;
    *(void *)&long long v5 = 138412546;
    long long v19 = v5;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v10 = objc_msgSend(v9, "voice", v19);
        int v11 = AXSiriTTSSynthesisVoiceAssetsAreEqual(v10, *(void **)(a1 + 32));

        if (v11)
        {
          dispatch_semaphore_t v12 = *(void **)(a1 + 40);
          id v13 = [v9 clientId];
          LOBYTE(v12) = [v12 containsObject:v13];

          if (v12)
          {
            uint64_t v14 = AXLogCommon();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              id v15 = [v9 voice];
              id v16 = [v15 name];
              id v17 = [v9 clientId];
              *(_DWORD *)buf = v19;
              v25 = v16;
              __int16 v26 = 2112;
              v27 = v17;
              _os_log_impl(&dword_18D308000, v14, OS_LOG_TYPE_INFO, "AXClientsForSiriResource: Found duplicate subscription %@ | %@", buf, 0x16u);
            }
          }
          else
          {
            dispatch_semaphore_t v18 = *(void **)(a1 + 40);
            uint64_t v14 = [v9 clientId];
            [v18 addObject:v14];
          }
        }
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v6);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id AXClientsForSiriVoice(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F1CA48];
  id v2 = a1;
  id v3 = [v1 array];
  id v4 = objc_alloc_init(MEMORY[0x1E4FA4F30]);
  long long v5 = [v2 identifier];
  uint64_t v6 = [v2 language];

  uint64_t v7 = AXSiriTTSSynthesisVoiceFromVoiceIdentifier(v5, v6);

  dispatch_semaphore_t v8 = dispatch_semaphore_create(0);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __AXClientsForSiriVoice_block_invoke;
  v16[3] = &unk_1E5586210;
  id v17 = v7;
  id v9 = v3;
  id v18 = v9;
  dispatch_semaphore_t v19 = v8;
  id v10 = v8;
  id v11 = v7;
  [v4 subscribedVoicesWithReply:v16];
  dispatch_time_t v12 = dispatch_time(0, 2000000000);
  dispatch_semaphore_wait(v10, v12);
  dispatch_semaphore_t v13 = v19;
  id v14 = v9;

  return v14;
}

void __AXClientsForSiriVoice_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)v21;
    *(void *)&long long v5 = 138412546;
    long long v19 = v5;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v10 = objc_msgSend(v9, "voice", v19);
        int v11 = AXSiriTTSSynthesisVoiceAssetsAreEqual(v10, *(void **)(a1 + 32));

        if (v11)
        {
          dispatch_time_t v12 = *(void **)(a1 + 40);
          dispatch_semaphore_t v13 = [v9 clientId];
          LOBYTE(v12) = [v12 containsObject:v13];

          if (v12)
          {
            id v14 = AXLogCommon();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              id v15 = [v9 voice];
              id v16 = [v15 name];
              id v17 = [v9 clientId];
              *(_DWORD *)buf = v19;
              v25 = v16;
              __int16 v26 = 2112;
              v27 = v17;
              _os_log_impl(&dword_18D308000, v14, OS_LOG_TYPE_INFO, "AXClientsForSiriVoice: Found duplicate subscription %@ | %@", buf, 0x16u);
            }
          }
          else
          {
            id v18 = *(void **)(a1 + 40);
            id v14 = [v9 clientId];
            [v18 addObject:v14];
          }
        }
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v6);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t AXResourceActivelyUsed(void *a1)
{
  id v1 = a1;
  id v2 = AXClientsForSiriResource(v1);
  id v3 = +[AXSettings sharedInstance];
  uint64_t v4 = [v3 selectedSpeechVoiceIdentifiers];
  long long v5 = [v1 voiceId];

  uint64_t v6 = [v4 containsObject:v5];
  if ([v2 count] == 1)
  {
    uint64_t v7 = [v2 firstObject];
    if ([v7 isEqualToString:@"com.apple.accessibility.AccessibilityUIServer"])
    {

      if ((v6 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      dispatch_semaphore_t v8 = [v2 firstObject];
      if ([v8 isEqualToString:@"com.apple.AccessibilityUIServer"])
      {

        if (!v6) {
          goto LABEL_13;
        }
      }
      else
      {
        id v9 = [v2 firstObject];
        int v10 = [v9 isEqualToString:@"com.apple.accessibility.axassetsd"];

        if (((v10 ^ 1 | v6) & 1) == 0)
        {
LABEL_12:
          uint64_t v6 = 0;
          goto LABEL_13;
        }
      }
    }
  }
  if ([v2 count]) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v6;
  }
LABEL_13:

  return v6;
}

void AXSwapSpeechSettingsIdentifiers(void *a1, void *a2, void *a3)
{
  id v33 = a1;
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[AXSettings sharedInstance];
  uint64_t v8 = *MEMORY[0x1E4F481F8];
  id v9 = [v7 speechVoiceIdentifierForLanguageWithoutFallback:v6 sourceKey:*MEMORY[0x1E4F481F8]];

  if ([v9 isEqualToString:v33])
  {
    int v10 = AXCRemapLanguageCodeToFallbackIfNeccessary();
    int v11 = +[AXSettings sharedInstance];
    [v11 setSpeechVoiceIdentifier:v5 forLanguage:v10 sourceKey:v8];

    if (([v10 isEqualToString:v6] & 1) == 0)
    {
      dispatch_time_t v12 = +[AXSettings sharedInstance];
      [v12 setSpeechVoiceIdentifier:0 forLanguage:v6 sourceKey:v8];
    }
  }
  dispatch_semaphore_t v13 = AXCLanguageCanonicalFormToGeneralLanguageUsingFallback();
  id v14 = +[AXSettings sharedInstance];
  id v15 = [v14 speechVoiceIdentifierForLanguageWithoutFallback:v13 sourceKey:v8];

  if ([v15 isEqualToString:v33])
  {
    id v16 = AXCLanguageCanonicalFormToGeneralLanguage();
    id v17 = +[AXSettings sharedInstance];
    [v17 setSpeechVoiceIdentifier:v5 forLanguage:v16 sourceKey:v8];

    if (([v16 isEqualToString:v6] & 1) == 0)
    {
      id v18 = +[AXSettings sharedInstance];
      [v18 setSpeechVoiceIdentifier:0 forLanguage:v13 sourceKey:v8];
    }
  }
  long long v19 = +[AXSettings sharedInstance];
  uint64_t v20 = *MEMORY[0x1E4F481E0];
  long long v21 = [v19 speechVoiceIdentifierForLanguageWithoutFallback:v13 sourceKey:*MEMORY[0x1E4F481E0]];

  if ([v21 isEqualToString:v33])
  {
    long long v22 = AXCLanguageCanonicalFormToGeneralLanguage();
    long long v23 = +[AXSettings sharedInstance];
    [v23 setSpeechVoiceIdentifier:v5 forLanguage:v22 sourceKey:v20];

    if (([v22 isEqualToString:v6] & 1) == 0)
    {
      v24 = +[AXSettings sharedInstance];
      [v24 setSpeechVoiceIdentifier:0 forLanguage:v13 sourceKey:v20];
    }
  }
  v25 = +[AXSettings sharedInstance];
  uint64_t v26 = *MEMORY[0x1E4F481E8];
  v27 = [v25 speechVoiceIdentifierForLanguageWithoutFallback:v13 sourceKey:*MEMORY[0x1E4F481E8]];

  if ([v27 isEqualToString:v33])
  {
    v32 = v15;
    v28 = v9;
    uint64_t v29 = AXCLanguageCanonicalFormToGeneralLanguage();
    v30 = +[AXSettings sharedInstance];
    [v30 setSpeechVoiceIdentifier:v5 forLanguage:v29 sourceKey:v26];

    if (([v29 isEqualToString:v6] & 1) == 0)
    {
      v31 = +[AXSettings sharedInstance];
      [v31 setSpeechVoiceIdentifier:0 forLanguage:v13 sourceKey:v26];
    }
    id v9 = v28;
    id v15 = v32;
  }
}

uint64_t AXVoiceActivelyUsed(void *a1)
{
  uint64_t v5 = a1;
  id v1 = AXClientsForSiriVoice((void *)v5);
  id v2 = +[AXSettings sharedInstance];
  id v3 = [v2 selectedSpeechVoiceIdentifiers];
  uint64_t v4 = [(id)v5 identifier];

  LODWORD(v5) = [v3 containsObject:v4];
  if ([v1 count] == 1
    && ([v1 firstObject],
        id v6 = objc_claimAutoreleasedReturnValue(),
        int v7 = [v6 isEqualToString:@"com.apple.accessibility.AccessibilityUIServer"],
        v6,
        (v7 ^ 1 | v5) != 1))
  {
    uint64_t v5 = 0;
  }
  else if ([v1 count])
  {
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = v5;
  }

  return v5;
}

id AXSiriDisplayNameForIdentifier()
{
  TTSGetComponentsInNamedSiriVoiceIdentifier();
  id v0 = 0;
  id v1 = 0;
  id v2 = [MEMORY[0x1E4F4E4C8] sharedInstance];
  id v3 = [v2 outputVoiceDescriptorForOutputLanguageCode:v1 voiceName:v0];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F4E4C8] sharedInstance];
    int v7 = [v0 lowercaseString];
    id v5 = [v6 outputVoiceDescriptorForOutputLanguageCode:v1 voiceName:v7];
  }
  uint64_t v8 = [v5 localizedDisplay];

  return v8;
}

uint64_t AXForceTouchAvailableAndEnabled()
{
  uint64_t result = _AXSForceTouchEnabled();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

double AXForceTouchThreshold()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0) {
    _registerForSensitivityChangedNotifications();
  }
  return *(float *)&_cachedPeek;
}

double AXForceTouchThresholdPeek()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0) {
    _registerForSensitivityChangedNotifications();
  }
  return *(float *)&_cachedPeek;
}

double AXForceTouchThresholdPeekPopMidpoint()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0) {
    _registerForSensitivityChangedNotifications();
  }
  return *(float *)&_cachedPeekPopMidpoint;
}

float _registerForSensitivityChangedNotifications()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)_handleMultiplerChanged, (CFStringRef)*MEMORY[0x1E4FB9138], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  _listeningForSensitivityMultiplerChanged = 1;

  return _calculateThresholds();
}

double AXForceTouchThresholdPop()
{
  if ((_listeningForSensitivityMultiplerChanged & 1) == 0) {
    _registerForSensitivityChangedNotifications();
  }
  return *(float *)&_cachedPop;
}

float _calculateThresholds()
{
  _AXSForceTouchSensitivity();
  *(float *)&_cachedPeek = v0 * 300.0;
  _AXSForceTouchSensitivity();
  *(float *)&_cachedPop = v1 * 400.0;
  float result = (float)((float)(v1 * 400.0) - *(float *)&_cachedPeek) * 0.5 + *(float *)&_cachedPeek;
  _cachedPeekPopMidpoint = LODWORD(result);
  return result;
}

void sub_18D317618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_18D318634(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_18D319740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

uint64_t _axEventTapHIDCallback(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[AXEventTapManager sharedManager];
  uint64_t v7 = [v6 _processHIDEvent:a1 taskPort:a2 bundleId:v5];

  return v7;
}

uint64_t _ioHIDEventFilterCallback(uint64_t a1, void *a2, __IOHIDServiceClient *a3, uint64_t a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  int Type = IOHIDEventGetType();
  if (Type != 17 && Type != 11)
  {
LABEL_12:
    BOOL v10 = 0;
    goto LABEL_15;
  }
  if (IOHIDEventGetIntegerValue()) {
    BOOL v9 = IOHIDEventGetIntegerValue() != 0;
  }
  else {
    BOOL v9 = 0;
  }
  BOOL v10 = 0;
  if (a3 && !v9)
  {
    CFTypeRef v11 = IOHIDServiceClientCopyProperty(a3, @"Transport");
    if (v11)
    {
      uint64_t v12 = v11;
      if (!CFEqual(v11, @"AirPlay"))
      {
        BOOL v10 = 0;
        goto LABEL_14;
      }
      CFRelease(v12);
      CFTypeRef v13 = IOHIDServiceClientCopyProperty(a3, @"Category");
      if (v13)
      {
        uint64_t v12 = v13;
        BOOL v10 = CFEqual(v13, @"Automotive") != 0;
LABEL_14:
        CFRelease(v12);
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v14 = 0;
  if (a4 && !v10)
  {
    if (IOHIDEventGetType() == 15) {
      return 0;
    }
    id v15 = +[AXEventTapManager sharedManager];
    char v16 = [v15 _accessibilityShouldIgnoreHIDServiceForContinuity:a3];

    if (v16)
    {
      return 0;
    }
    else
    {
      id v17 = (void *)MEMORY[0x192F9F1F0]();
      id v18 = a2;
      long long v19 = [v18 identifier];
      uint64_t v20 = +[AXEventRepresentation representationWithHIDEvent:a4 serviceClient:a3 hidStreamIdentifier:v19];

      long long v21 = [v18 handler];
      uint64_t v14 = ((uint64_t (**)(void, void *))v21)[2](v21, v20);

      if (CFAbsoluteTimeGetCurrent() - Current >= 0.016)
      {
        id v23 = v18;
        id v24 = v20;
        AXPerformBlockAsynchronouslyOnMainThread();
      }
    }
  }
  return v14;
}

void ___ioHIDEventFilterCallback_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = VOTLogCommon();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) identifier];
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl(&dword_18D308000, v2, OS_LOG_TYPE_DEFAULT, "Failed to handle event in time for event tap: %@", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v4 = [*(id *)(a1 + 32) failedToHandleInTime];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) failedToHandleInTime];
    v5[2](v5, *(void *)(a1 + 40));
  }
}

id AXRetainAutorelease(void *a1)
{
  id v1 = a1;

  return v1;
}

id AXSBTitleForMedusaGesture(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v11 = @"SIDE_APP_RESIZE_TO_HALF";
  switch(a1)
  {
    case 0:
      goto LABEL_16;
    case 1:
      uint64_t v14 = @"SIDE_APP_SHRINK_LEFT_APP";
      id v15 = @"SIDE_APP_SHRINK_RIGHT_APP";
      goto LABEL_13;
    case 2:
      uint64_t v14 = @"SIDE_APP_SHRINK_RIGHT_APP";
      id v15 = @"SIDE_APP_SHRINK_LEFT_APP";
      goto LABEL_13;
    case 3:
      uint64_t v14 = @"SIDE_APP_EXPAND_LEFT";
      id v15 = @"SIDE_APP_EXPAND_RIGHT";
      goto LABEL_13;
    case 4:
      uint64_t v14 = @"SIDE_APP_EXPAND_RIGHT";
      id v15 = @"SIDE_APP_EXPAND_LEFT";
      goto LABEL_13;
    case 5:
    case 6:
      CFTypeRef v11 = @"FLOAT_APP_SPLIT_VIEW";
      goto LABEL_16;
    case 7:
    case 8:
      CFTypeRef v11 = @"FLOAT_APP_SLIDE_OVER";
      goto LABEL_16;
    case 9:
      uint64_t v14 = @"FLOAT_APP_MOVE_RIGHT";
      id v15 = @"FLOAT_APP_MOVE_LEFT";
      goto LABEL_13;
    case 10:
      uint64_t v14 = @"FLOAT_APP_MOVE_LEFT";
      id v15 = @"FLOAT_APP_MOVE_RIGHT";
LABEL_13:
      if (a2) {
        CFTypeRef v11 = v15;
      }
      else {
        CFTypeRef v11 = v14;
      }
      goto LABEL_16;
    case 11:
      CFTypeRef v11 = @"FLOATING_APP_REMOVE_LEFT";
      goto LABEL_16;
    case 12:
      CFTypeRef v11 = @"FLOATING_APP_REMOVE_RIGHT";
      goto LABEL_16;
    case 13:
      CFTypeRef v11 = @"FLOAT_APP_SLIDE_OPEN_APP";
      goto LABEL_16;
    case 14:
      CFTypeRef v11 = @"FLOAT_APP_DISMISS";
      goto LABEL_16;
    case 15:
      CFTypeRef v11 = @"FLOATING_APP_SWITCHER";
      goto LABEL_16;
    case 16:
      CFTypeRef v11 = @"FLOATING_APP_SWITCHER_SWIPE_RIGHT";
LABEL_16:
      uint64_t v12 = AXParameterizedLocalizedString(1, v11, a3, a4, a5, a6, a7, a8, v8);
      break;
    default:
      uint64_t v12 = 0;
      break;
  }
  return v12;
}

void sub_18D31D044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  float result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_18D31E224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D31E460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D31E58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _isUILocked()
{
  if ((_isUILocked_isTokenInitialized & 1) == 0)
  {
    if (notify_register_check("com.apple.springboard.lockstate", &_isUILocked_token))
    {
      if (_isUILocked_isTokenInitialized != 1) {
        return 0;
      }
    }
    else
    {
      _isUILocked_isTokenInitialized = 1;
    }
  }
  uint64_t state64 = 0;
  notify_get_state(_isUILocked_token, &state64);
  return state64 != 0;
}

BOOL _isDeviceLockedWithPasscode()
{
  if ((_isDeviceLockedWithPasscode_isTokenInitialized & 1) == 0)
  {
    if (notify_register_check("com.apple.springboard.passcodeLockedOrBlocked", &_isDeviceLockedWithPasscode_token))
    {
      if (_isDeviceLockedWithPasscode_isTokenInitialized != 1) {
        return 0;
      }
    }
    else
    {
      _isDeviceLockedWithPasscode_isTokenInitialized = 1;
    }
  }
  uint64_t state64 = 0;
  notify_get_state(_isDeviceLockedWithPasscode_token, &state64);
  return state64 != 0;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

uint64_t AXBTRouteIsAirpods(void *a1)
{
  uint64_t v1 = AXBTRouteIsAirpods_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&AXBTRouteIsAirpods_onceToken, &__block_literal_global_6);
  }
  uint64_t v3 = [(id)AXBTRouteIsAirpods_ValidAirPodRoutes containsObject:v2];

  return v3;
}

uint64_t __AXBTRouteIsAirpods_block_invoke()
{
  AXBTRouteIsAirpods_ValidAirPodRoutes = [MEMORY[0x1E4F1CAD0] setWithArray:&unk_1EDC63180];

  return MEMORY[0x1F41817F8]();
}

BOOL AXIsBeatsProductId(void *a1)
{
  id v1 = a1;
  if ([v1 vendorId] == 76) {
    BOOL v2 = [v1 productId] == 8203
  }
      || [v1 productId] == 8210
      || [v1 productId] == 8230
      || [v1 productId] == 8218
      || [v1 productId] == 8221;
  else {
    BOOL v2 = 0;
  }

  return v2;
}

void sub_18D327578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18D327800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18D327B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

uint64_t accessoryEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return [a5 _accessoryEventForManager:a1 event:a2 device:a3 state:a4];
}

uint64_t serviceEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return [a6 _serviceEventForDevice:a1 serviceMask:a2 eventType:a3 specificEvent:a4 result:a5];
}

uint64_t sessionEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 _sessionEventForSession:a1 event:a2 result:a3];
}

void _prefChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AXLogAirPodSettings();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v11 = a3;
    _os_log_impl(&dword_18D308000, v4, OS_LOG_TYPE_DEFAULT, "Received pref change for %@", buf, 0xCu);
  }

  id v5 = +[AXAirPodSettingsManager sharedInstance];
  if ([v5 ignoreSettingNotifications])
  {
    int v6 = AXLogAirPodSettings();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18D308000, v6, OS_LOG_TYPE_DEFAULT, "Ignoring preference change", buf, 2u);
    }
  }
  else
  {
    uint64_t v7 = (void *)v5[6];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___prefChangedCallback_block_invoke;
    v8[3] = &unk_1E5585F48;
    uint64_t v9 = v5;
    [v7 afterDelay:v8 processBlock:0.2];
    int v6 = v9;
  }
}

uint64_t ___prefChangedCallback_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _applySettings];
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_18D32C16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id AXUIAddressForBTDevice()
{
  v2[31] = *MEMORY[0x1E4F143B8];
  if (BTDeviceGetAddressString())
  {
    float v0 = 0;
  }
  else
  {
    float v0 = [NSString stringWithUTF8String:v2];
  }

  return v0;
}

void sub_18D32DE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D330B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D331114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_18D33145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_18D331D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXAssistiveTouchChangeIconCount(void *a1, unint64_t a2)
{
  id v3 = a1;
  if ([v3 count] >= a2)
  {
    if ([v3 count] <= a2)
    {
      id v11 = v3;
    }
    else
    {
      AXAssistiveTouchRemoveIconsFromDictionary(v3, [v3 count] - a2);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v10 = v11;
  }
  else
  {
    uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", a2 - objc_msgSend(v3, "count"));
    for (unint64_t i = [v3 count] + 1; i <= a2; ++i)
    {
      int v6 = NSString;
      uint64_t v7 = [MEMORY[0x1E4F29128] UUID];
      uint64_t v8 = [v7 UUIDString];
      uint64_t v9 = [v6 stringWithFormat:@"__empty%d__%@", i, v8];
      [v4 addObject:v9];
    }
    uint64_t v10 = AXAssistiveTouchInsertIconsIntoDictionary(v3, v4);
  }

  return v10;
}

id AXAssistiveTouchInsertIconsIntoDictionary(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)[a1 mutableCopy];
  id v5 = (void *)[v3 mutableCopy];
  int v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v7 = [MEMORY[0x1E4F1CA48] array];
  }
  uint64_t v8 = v7;

  uint64_t v9 = [v4 count];
  unint64_t v10 = [v8 count] + v9;
  while ([v4 count] < v10)
  {
    if ([v4 count] < v10)
    {
      id v11 = [v8 firstObject];
      switch([v4 count])
      {
        case 1:
          id v15 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidMiddle"];
          [v4 setObject:v15 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidLeft"];

          [v4 setObject:v11 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];
          [v4 removeObjectForKey:@"AXAssistiveTouchIconLocationMidMiddle"];
          break;
        case 2:
        case 7:
          goto LABEL_10;
        case 3:
        case 5:
          uint64_t v12 = v4;
          CFTypeRef v13 = v11;
          uint64_t v14 = @"AXAssistiveTouchIconLocationBottomMiddle";
          goto LABEL_12;
        case 4:
          char v16 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationTopMiddle"];
          [v4 setObject:v16 forKeyedSubscript:@"AXAssistiveTouchIconLocationTopLeft"];

          id v17 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];
          [v4 setObject:v17 forKeyedSubscript:@"AXAssistiveTouchIconLocationTopRight"];

          id v18 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationBottomMiddle"];
          [v4 setObject:v18 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];

          [v4 removeObjectForKey:@"AXAssistiveTouchIconLocationBottomMiddle"];
LABEL_10:
          uint64_t v12 = v4;
          CFTypeRef v13 = v11;
          uint64_t v14 = @"AXAssistiveTouchIconLocationTopMiddle";
          goto LABEL_12;
        case 6:
          long long v19 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidLeft"];
          [v4 setObject:v19 forKeyedSubscript:@"AXAssistiveTouchIconLocationBottomLeft"];

          uint64_t v20 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];
          [v4 setObject:v20 forKeyedSubscript:@"AXAssistiveTouchIconLocationBottomRight"];

          long long v21 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationTopLeft"];
          [v4 setObject:v21 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidLeft"];

          long long v22 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationTopRight"];
          [v4 setObject:v22 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];

          id v23 = [v4 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationTopMiddle"];
          [v4 setObject:v23 forKeyedSubscript:@"AXAssistiveTouchIconLocationTopLeft"];

          [v4 removeObjectForKey:@"AXAssistiveTouchIconLocationTopMiddle"];
          uint64_t v12 = v4;
          CFTypeRef v13 = v11;
          uint64_t v14 = @"AXAssistiveTouchIconLocationTopRight";
LABEL_12:
          [v12 setObject:v13 forKeyedSubscript:v14];
          break;
        default:
          break;
      }
      if ([v8 count]) {
        [v8 removeObjectAtIndex:0];
      }
    }
  }

  return v4;
}

id AXAssistiveTouchRemoveIconsFromDictionary(void *a1, uint64_t a2)
{
  id v3 = (void *)[a1 mutableCopy];
  unint64_t v4 = [v3 count] - a2;
  if ([v3 count] > v4)
  {
    do
    {
      if ([v3 count] > v4)
      {
        uint64_t v6 = [v3 count];
        id v5 = @"AXAssistiveTouchIconLocationTopMiddle";
        switch(v6)
        {
          case 2:
            unint64_t v10 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidLeft"];
            [v3 setObject:v10 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidMiddle"];

            [v3 removeObjectForKey:@"AXAssistiveTouchIconLocationMidRight"];
            id v5 = @"AXAssistiveTouchIconLocationMidLeft";
            goto LABEL_8;
          case 3:
          case 8:
            goto LABEL_8;
          case 4:
          case 6:
            id v5 = @"AXAssistiveTouchIconLocationBottomMiddle";
            goto LABEL_8;
          case 5:
            id v7 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];
            [v3 setObject:v7 forKeyedSubscript:@"AXAssistiveTouchIconLocationBottomMiddle"];

            uint64_t v8 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationTopLeft"];
            [v3 setObject:v8 forKeyedSubscript:@"AXAssistiveTouchIconLocationTopMiddle"];

            uint64_t v9 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationTopRight"];
            [v3 setObject:v9 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];

            [v3 removeObjectForKey:@"AXAssistiveTouchIconLocationTopLeft"];
            id v5 = @"AXAssistiveTouchIconLocationTopRight";
            goto LABEL_8;
          case 7:
            id v11 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationTopLeft"];
            [v3 setObject:v11 forKeyedSubscript:@"AXAssistiveTouchIconLocationTopMiddle"];

            uint64_t v12 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];
            [v3 setObject:v12 forKeyedSubscript:@"AXAssistiveTouchIconLocationTopRight"];

            CFTypeRef v13 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationMidLeft"];
            [v3 setObject:v13 forKeyedSubscript:@"AXAssistiveTouchIconLocationTopLeft"];

            uint64_t v14 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationBottomRight"];
            [v3 setObject:v14 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidRight"];

            id v15 = [v3 objectForKeyedSubscript:@"AXAssistiveTouchIconLocationBottomLeft"];
            [v3 setObject:v15 forKeyedSubscript:@"AXAssistiveTouchIconLocationMidLeft"];

            [v3 removeObjectForKey:@"AXAssistiveTouchIconLocationBottomRight"];
            id v5 = @"AXAssistiveTouchIconLocationBottomLeft";
LABEL_8:
            [v3 removeObjectForKey:v5];
            break;
          default:
            break;
        }
      }
    }
    while (objc_msgSend(v3, "count", v5) > v4);
  }

  return v3;
}

id AXAssistiveTouchIcons()
{
  float v0 = AXAssistiveTouchSystemIcons();
  id v1 = AXAssistiveTouchAccessibilityIcons();
  BOOL v2 = [v0 arrayByAddingObjectsFromArray:v1];

  id v3 = AXAssistiveTouchScrollIcons();
  unint64_t v4 = [v2 arrayByAddingObjectsFromArray:v3];

  id v5 = AXAssistiveTouchCustomGesturesIcons();
  uint64_t v6 = [v4 arrayByAddingObjectsFromArray:v5];

  id v7 = AXAssistiveTouchSpecificActionIcons();
  uint64_t v8 = [v6 arrayByAddingObjectsFromArray:v7];

  uint64_t v9 = AXAssistiveTouchSiriShortcutsIcons();
  unint64_t v10 = [v8 arrayByAddingObjectsFromArray:v9];

  id v11 = AXAssistiveTouchDwellIcons();
  uint64_t v12 = [v10 arrayByAddingObjectsFromArray:v11];

  return v12;
}

id AXAssistiveTouchSystemIcons()
{
  if (AXAssistiveTouchSystemIcons_onceToken != -1) {
    dispatch_once(&AXAssistiveTouchSystemIcons_onceToken, &__block_literal_global_10);
  }
  float v0 = (void *)[(id)AXAssistiveTouchSystemIcons_Array mutableCopy];
  if ((AXDeviceCanArmApplePay() & 1) == 0)
  {
    [v0 removeObject:@"AXAssistiveTouchIcontTypeArmApplePay"];
    [v0 removeObject:@"AXAssistiveTouchIcontTypeConfirmApplePay"];
  }
  if (!AXDeviceIsSiriAvailable())
  {
    [v0 removeObject:@"AXAssistiveTouchIconTypeSiri"];
    [v0 removeObject:@"AXAssistiveTouchIconTypeTypeToSiri"];
  }
  if ((AXDeviceIsVoiceControlAvailable() & 1) == 0) {
    [v0 removeObject:@"AXAssistiveTouchIconTypeVoiceControl"];
  }
  if ((AXForceTouchAvailableAndEnabled() & 1) == 0) {
    [v0 removeObject:@"AXAssistiveTouchIconTypeForceTap"];
  }

  return v0;
}

id AXAssistiveTouchAccessibilityIcons()
{
  if (AXAssistiveTouchAccessibilityIcons_onceToken != -1) {
    dispatch_once(&AXAssistiveTouchAccessibilityIcons_onceToken, &__block_literal_global_336);
  }
  id v0 = (id)AXAssistiveTouchAccessibilityIcons_Array;
  if (AXRuntimeCheck_SupportsNearbyDeviceControl())
  {
    uint64_t v1 = [v0 arrayByAddingObject:@"AXAssistiveTouchIconTypeNearbyDeviceControl"];

    id v0 = (id)v1;
  }
  if (AXDeviceSupportsHoverTextTyping())
  {
    uint64_t v2 = [v0 arrayByAddingObject:@"AXAssistiveTouchIconTypeHoverTextTyping"];

    id v0 = (id)v2;
  }
  if (AXDeviceSupportsWatchRemoteScreen())
  {
    uint64_t v3 = [v0 arrayByAddingObject:@"AXAssistiveTouchIconTypeWatchRemoteScreen"];

    id v0 = (id)v3;
  }
  if (AXHasCapability(@"LiveTranscription"))
  {
    uint64_t v4 = [v0 arrayByAddingObject:@"AXAssistiveTouchIconTypeLiveCaptions"];

    id v0 = (id)v4;
  }
  id v5 = [v0 arrayByAddingObject:@"AXAssistiveTouchIconTypeLiveSpeech"];

  if (AXDeviceSupportsPhotosensitiveMitigation())
  {
    uint64_t v6 = [v5 arrayByAddingObject:@"AXAssistiveTouchIconTypeDimFlashingLights"];

    id v5 = (void *)v6;
  }
  if (AXDeviceSupportsMotionCues())
  {
    uint64_t v7 = [v5 arrayByAddingObject:@"AXAssistiveTouchIconTypeMotionCues"];

    id v5 = (void *)v7;
  }
  if (AXDeviceSupportsHapticMusic())
  {
    uint64_t v8 = [v5 arrayByAddingObject:@"AXAssistiveTouchIconTypeHapticMusic"];

    id v5 = (void *)v8;
  }
  if (AXHasCapability(@"AXClarityUI"))
  {
    uint64_t v9 = [v5 arrayByAddingObject:@"AXAssistiveTouchIconTypeAssistiveAccess"];

    id v5 = (void *)v9;
  }

  return v5;
}

id AXAssistiveTouchScrollIcons()
{
  if (AXAssistiveTouchScrollIcons_onceToken != -1) {
    dispatch_once(&AXAssistiveTouchScrollIcons_onceToken, &__block_literal_global_350_0);
  }
  id v0 = (void *)AXAssistiveTouchScrollIcons_Array;

  return v0;
}

id AXAssistiveTouchCustomGesturesIcons()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v0 = +[AXSettings sharedInstance];
  uint64_t v1 = [v0 assistiveTouchCustomGestures];

  if ([v1 count])
  {
    uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = NSString;
          uint64_t v9 = [*(id *)(*((void *)&v12 + 1) + 8 * i) name];
          unint64_t v10 = [v8 stringWithFormat:@"CustomGesture-%@", v9];
          [v2 addObject:v10];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v2;
}

id AXAssistiveTouchSpecificActionIcons()
{
  if (AXAssistiveTouchSpecificActionIcons_onceToken != -1) {
    dispatch_once(&AXAssistiveTouchSpecificActionIcons_onceToken, &__block_literal_global_352);
  }
  id v0 = (void *)AXAssistiveTouchSpecificActionIcons_Array;

  return v0;
}

id AXAssistiveTouchSiriShortcutsIcons()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v0 = +[AXSiriShortcutsManager sharedManager];
  uint64_t v1 = [v0 shortcuts];

  if ([v1 count])
  {
    uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v12 = v1;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = NSString;
          uint64_t v9 = [*(id *)(*((void *)&v13 + 1) + 8 * i) identifier];
          unint64_t v10 = [v8 stringWithFormat:@"%@-%@", @"SiriShortcut", v9];
          [v2 addObject:v10];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }

    uint64_t v1 = v12;
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v2;
}

id AXAssistiveTouchDwellIcons()
{
  if (AXAssistiveTouchDwellIcons_onceToken != -1) {
    dispatch_once(&AXAssistiveTouchDwellIcons_onceToken, &__block_literal_global_348);
  }
  id v0 = (void *)AXAssistiveTouchDwellIcons_Array;

  return v0;
}

uint64_t __AXAssistiveTouchSystemIcons_block_invoke()
{
  v4[47] = *MEMORY[0x1E4F143B8];
  v4[0] = @"AXAssistiveTouchIconTypeHome";
  v4[1] = @"AXAssistiveTouchIconTypeNotificationCenter";
  v4[2] = @"AXAssistiveTouchIconTypeCustom";
  v4[3] = @"AXAssistiveTouchIconTypeDevice";
  v4[4] = @"AXAssistiveTouchIconTypeSiri";
  v4[5] = @"AXAssistiveTouchIconTypeTypeToSiri";
  v4[6] = @"AXAssistiveTouchIconTypeControlCenter";
  v4[7] = @"AXAssistiveTouchIconTypeLockScreen";
  v4[8] = @"AXAssistiveTouchIconTypeRotateScreen";
  v4[9] = @"AXAssistiveTouchIconTypeVolumeUp";
  v4[10] = @"AXAssistiveTouchIconTypeVolumeDown";
  v4[11] = @"AXAssistiveTouchIconTypeMute";
  v4[12] = @"AXAssistiveTouchIconTypeGestures";
  v4[13] = @"AXAssistiveTouchIconTypeShake";
  v4[14] = @"AXAssistiveTouchIconTypeMultitasking";
  v4[15] = @"AXAssistiveTouchIconTypeScreenshot";
  v4[16] = @"AXAssistiveTouchIconTypeOrientation";
  v4[17] = @"AXAssistiveTouchIconTypeVoiceControl";
  v4[18] = @"AXAssistiveTouchIconTypePinch";
  v4[19] = @"AXAssistiveTouchIconTypeRotate";
  v4[20] = @"AXAssistiveTouchIconTypePinchAndRotate";
  v4[21] = @"AXAssistiveTouchIconTypeForceTap";
  v4[22] = @"AXAssistiveTouchIconTypeTap";
  v4[23] = @"AXAssistiveTouchIconTypeDoubleTap";
  v4[24] = @"AXAssistiveTouchIconTypeLongPress";
  v4[25] = @"AXAssistiveTouchIconTypeDragAndDrop";
  v4[26] = @"AXAssistiveTouchIconTypeMoveMenu";
  v4[27] = @"AXAssistiveTouchIconTypeSpotlight";
  v4[28] = @"AXAssistiveTouchIconTypeSOS";
  v4[29] = @"AXAssistiveTouchIconTypeSysdiagnose";
  v4[30] = @"AXAssistiveTouchIconTypeToggleDock";
  v4[31] = @"AXAssistiveTouchIconTypeReachability";
  v4[32] = @"AXAssistiveTouchIconTypeRebootDevice";
  v4[33] = @"AXAssistiveTouchIcontTypeArmApplePay";
  v4[34] = @"AXAssistiveTouchIconTypeTorch";
  v4[35] = @"AXAssistiveTouchIcontTypeConfirmApplePay";
  v4[36] = @"AXAssistiveTouchIconTypeSideApp";
  v4[37] = @"AXAssistiveTouchIconTypeScroll";
  v4[38] = @"AXAssistiveTouchIconTypeDwell";
  v4[39] = @"AXAssistiveTouchIconTypeCamera";
  v4[40] = @"AXAssistiveTouchIconTypeFrontFacingCamera";
  v4[41] = @"AXAssistiveTouchIconTypeSiriShortcutsMenu";
  v4[42] = @"AXAssistiveTouchIconTypeActionButton";
  v4[43] = @"AXAssistiveTouchIconTypeCameraButton";
  v4[44] = @"AXAssistiveTouchIconTypeCameraButtonLightPress";
  v4[45] = @"AXAssistiveTouchIconTypeCameraButtonDoubleLightPress";
  v4[46] = @"AXAssistiveTouchIconTypeVisualIntelligence";
  id v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:47];
  uint64_t v1 = [v0 mutableCopy];
  uint64_t v2 = (void *)AXAssistiveTouchSystemIcons_Array;
  AXAssistiveTouchSystemIcons_Array = v1;

  if (AXDeviceHasStaccato())
  {
    AXDeviceIsRingerSwitchAvailable();
  }
  else
  {
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeActionButton"];
    if (AXDeviceIsRingerSwitchAvailable()) {
      goto LABEL_5;
    }
  }
  [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeMute"];
LABEL_5:
  if ((AXDeviceIsSOSAvailable() & 1) == 0) {
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeSOS"];
  }
  if ((MGGetBoolAnswer() & 1) == 0) {
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeReachability"];
  }
  if ((AXDeviceSupportsSideApp() & 1) == 0)
  {
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeToggleDock"];
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeSideApp"];
  }
  if ((AXDeviceSupportsCameraButton() & 1) == 0)
  {
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeCameraButton"];
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeCameraButtonLightPress"];
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeCameraButtonDoubleLightPress"];
    [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeVisualIntelligence"];
  }
  if (!AXDeviceSupportsCameraButton()) {
    return [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeVisualIntelligence"];
  }
  uint64_t result = AXDeviceHasGreyMatterEnabled();
  if ((result & 1) == 0) {
    return [(id)AXAssistiveTouchSystemIcons_Array removeObject:@"AXAssistiveTouchIconTypeVisualIntelligence"];
  }
  return result;
}

void __AXAssistiveTouchAccessibilityIcons_block_invoke()
{
  v2[15] = *MEMORY[0x1E4F143B8];
  v2[0] = @"AXAssistiveTouchIconTypeAssistiveTouch";
  v2[1] = @"AXAssistiveTouchIconTypeClassicInvert";
  v2[2] = @"AXAssistiveTouchIconTypeColorFilters";
  v2[3] = @"AXAssistiveTouchIconTypeMagnifier";
  v2[4] = @"AXAssistiveTouchIconTypeVoiceOver";
  v2[5] = @"AXAssistiveTouchIconTypeSmartInvert";
  v2[6] = @"AXAssistiveTouchIconTypeZoom";
  v2[7] = @"AXAssistiveTouchIconTypeZoomController";
  v2[8] = @"AXAssistiveTouchIconTypeSwitchControl";
  v2[9] = @"AXAssistiveTouchIconTypeFullKeyboardAccess";
  v2[10] = @"AXAssistiveTouchIconTypeCommandAndControl";
  v2[11] = @"AXAssistiveTouchIconTypeSpeakScreen";
  v2[12] = @"AXAssistiveTouchIconTypeTripleClick";
  v2[13] = @"AXAssistiveTouchIconTypeDetectionMode";
  v2[14] = @"AXAssistiveTouchIconTypeBackgroundSounds";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:15];
  uint64_t v1 = (void *)AXAssistiveTouchAccessibilityIcons_Array;
  AXAssistiveTouchAccessibilityIcons_Array = v0;
}

void __AXAssistiveTouchDwellIcons_block_invoke()
{
  v2[4] = *MEMORY[0x1E4F143B8];
  v2[0] = @"AXAssistiveTouchIconTypeDwellPauseToggle";
  v2[1] = @"AXAssistiveTouchIconTypeDwellClick";
  v2[2] = @"AXAssistiveTouchIconTypeDwellLockToggle";
  v2[3] = @"AXAssistiveTouchIconTypeMoveMenu";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:4];
  uint64_t v1 = (void *)AXAssistiveTouchDwellIcons_Array;
  AXAssistiveTouchDwellIcons_Array = v0;
}

void __AXAssistiveTouchScrollIcons_block_invoke()
{
  v2[8] = *MEMORY[0x1E4F143B8];
  v2[0] = @"AXAssistiveTouchIconTypeScrollToTop";
  v2[1] = @"AXAssistiveTouchIconTypeScrollUp";
  v2[2] = @"AXAssistiveTouchIconTypeScrollToBottom";
  v2[3] = @"AXAssistiveTouchIconTypeScrollLeft";
  v2[4] = @"AXAssistiveTouchIconTypeScrollRight";
  void v2[5] = @"AXAssistiveTouchIconTypeContinuousScrollHorizontal";
  v2[6] = @"AXAssistiveTouchIconTypeScrollDown";
  v2[7] = @"AXAssistiveTouchIconTypeContinuousScrollVertical";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:8];
  uint64_t v1 = (void *)AXAssistiveTouchScrollIcons_Array;
  AXAssistiveTouchScrollIcons_Array = v0;
}

uint64_t __AXAssistiveTouchSpecificActionIcons_block_invoke()
{
  v4[3] = *MEMORY[0x1E4F143B8];
  v4[0] = @"AXAssistiveTouchIconTypeTrackpad";
  v4[1] = @"AXAssistiveTouchIconTypeCalibrateOnDeviceEyeTracking";
  v4[2] = @"AXAssistiveTouchIconTypeOnDeviceEyeTrackingZoomScreen";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:3];
  uint64_t v1 = [v0 mutableCopy];
  uint64_t v2 = (void *)AXAssistiveTouchSpecificActionIcons_Array;
  AXAssistiveTouchSpecificActionIcons_Array = v1;

  if ((AXDeviceSupportsVirtualTrackpad() & 1) == 0) {
    [(id)AXAssistiveTouchSpecificActionIcons_Array removeObject:@"AXAssistiveTouchIconTypeTrackpad"];
  }
  uint64_t result = AXDeviceSupportsOnDeviceEyeTracking();
  if ((result & 1) == 0) {
    return [(id)AXAssistiveTouchSpecificActionIcons_Array removeObject:@"AXAssistiveTouchIconTypeCalibrateOnDeviceEyeTracking"];
  }
  return result;
}

id AXAssistiveTouchEyeTrackingIcons()
{
  if (AXAssistiveTouchEyeTrackingIcons_onceToken != -1) {
    dispatch_once(&AXAssistiveTouchEyeTrackingIcons_onceToken, &__block_literal_global_358);
  }
  uint64_t v0 = (void *)AXAssistiveTouchEyeTrackingIcons_Array;

  return v0;
}

void __AXAssistiveTouchEyeTrackingIcons_block_invoke()
{
  v2[2] = *MEMORY[0x1E4F143B8];
  v2[0] = @"AXAssistiveTouchIconTypeEyeTrackingBubbleMode";
  v2[1] = @"AXAssistiveTouchIconTypeEyeTrackingAutoHide";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:2];
  uint64_t v1 = (void *)AXAssistiveTouchEyeTrackingIcons_Array;
  AXAssistiveTouchEyeTrackingIcons_Array = v0;
}

double AXAssitiveTouchPosition(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  switch(a2)
  {
    case 1:
      double v6 = 0.5;
      if (([v3 isEqualToString:@"AXAssistiveTouchIconLocationMidMiddle"] & 1) == 0)
      {
        _AXAssert();
        goto LABEL_9;
      }
      break;
    case 2:
    case 3:
    case 4:
      double v5 = _AXAssitiveTouchPositionForDefault4(v3);
      goto LABEL_5;
    case 5:
    case 6:
      double v5 = _AXAssitiveTouchPositionForDefault6(v3);
      goto LABEL_5;
    case 7:
    case 8:
      double v5 = _AXAssitiveTouchPositionForDefault8(v3);
LABEL_5:
      double v6 = v5;
      break;
    default:
LABEL_9:
      double v6 = *MEMORY[0x1E4F1DAD8];
      break;
  }

  return v6;
}

double _AXAssitiveTouchPositionForDefault8(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationTopLeft"])
  {
LABEL_2:
    double v2 = 0.205;
    goto LABEL_8;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationTopMiddle"]) {
    goto LABEL_4;
  }
  double v2 = 0.794;
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationTopRight"]) {
    goto LABEL_8;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationMidLeft"]) {
    goto LABEL_2;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationMidRight"]) {
    goto LABEL_8;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationBottomLeft"]) {
    goto LABEL_2;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationBottomMiddle"])
  {
LABEL_4:
    double v2 = 0.5;
    goto LABEL_8;
  }
  if (([v1 isEqualToString:@"AXAssistiveTouchIconLocationBottomRight"] & 1) == 0)
  {
    _AXAssert();
    double v2 = *MEMORY[0x1E4F1DAD8];
  }
LABEL_8:

  return v2;
}

double _AXAssitiveTouchPositionForDefault6(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationTopLeft"])
  {
LABEL_2:
    double v2 = 0.217;
    goto LABEL_6;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationTopMiddle"]) {
    goto LABEL_4;
  }
  double v2 = 0.782;
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationTopRight"]) {
    goto LABEL_6;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationMidLeft"]) {
    goto LABEL_2;
  }
  if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationBottomMiddle"])
  {
LABEL_4:
    double v2 = 0.5;
    goto LABEL_6;
  }
  if (([v1 isEqualToString:@"AXAssistiveTouchIconLocationMidRight"] & 1) == 0)
  {
    _AXAssert();
    double v2 = *MEMORY[0x1E4F1DAD8];
  }
LABEL_6:

  return v2;
}

double _AXAssitiveTouchPositionForDefault4(void *a1)
{
  id v1 = a1;
  double v2 = 0.5;
  if (([v1 isEqualToString:@"AXAssistiveTouchIconLocationTopMiddle"] & 1) == 0)
  {
    if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationMidLeft"])
    {
      double v2 = 0.203;
    }
    else if ([v1 isEqualToString:@"AXAssistiveTouchIconLocationMidRight"])
    {
      double v2 = 0.806;
    }
    else if (([v1 isEqualToString:@"AXAssistiveTouchIconLocationBottomMiddle"] & 1) == 0)
    {
      _AXAssert();
      double v2 = *MEMORY[0x1E4F1DAD8];
    }
  }

  return v2;
}

id AXAssistiveTouchLocationsForLayout(uint64_t a1)
{
  v13[8] = *MEMORY[0x1E4F143B8];
  switch(a1)
  {
    case 1:
      double v6 = @"AXAssistiveTouchIconLocationMidMiddle";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = &v6;
      uint64_t v3 = 1;
      break;
    case 2:
      v7[0] = @"AXAssistiveTouchIconLocationMidLeft";
      v7[1] = @"AXAssistiveTouchIconLocationMidRight";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = (__CFString **)v7;
      uint64_t v3 = 2;
      break;
    case 3:
      v8[0] = @"AXAssistiveTouchIconLocationTopMiddle";
      v8[1] = @"AXAssistiveTouchIconLocationMidLeft";
      v8[2] = @"AXAssistiveTouchIconLocationMidRight";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = (__CFString **)v8;
      uint64_t v3 = 3;
      break;
    case 4:
      v9[0] = @"AXAssistiveTouchIconLocationTopMiddle";
      v9[1] = @"AXAssistiveTouchIconLocationMidLeft";
      v9[2] = @"AXAssistiveTouchIconLocationMidRight";
      v9[3] = @"AXAssistiveTouchIconLocationBottomMiddle";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = (__CFString **)v9;
      uint64_t v3 = 4;
      break;
    case 5:
      v10[0] = @"AXAssistiveTouchIconLocationTopLeft";
      v10[1] = @"AXAssistiveTouchIconLocationTopMiddle";
      v10[2] = @"AXAssistiveTouchIconLocationTopRight";
      v10[3] = @"AXAssistiveTouchIconLocationMidLeft";
      v10[4] = @"AXAssistiveTouchIconLocationMidRight";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = (__CFString **)v10;
      uint64_t v3 = 5;
      break;
    case 7:
      v12[0] = @"AXAssistiveTouchIconLocationTopLeft";
      v12[1] = @"AXAssistiveTouchIconLocationTopRight";
      _OWORD v12[2] = @"AXAssistiveTouchIconLocationMidLeft";
      v12[3] = @"AXAssistiveTouchIconLocationMidRight";
      v12[4] = @"AXAssistiveTouchIconLocationBottomLeft";
      v12[5] = @"AXAssistiveTouchIconLocationBottomMiddle";
      v12[6] = @"AXAssistiveTouchIconLocationBottomRight";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = (__CFString **)v12;
      uint64_t v3 = 7;
      break;
    case 8:
      v13[0] = @"AXAssistiveTouchIconLocationTopLeft";
      v13[1] = @"AXAssistiveTouchIconLocationTopMiddle";
      v13[2] = @"AXAssistiveTouchIconLocationTopRight";
      v13[3] = @"AXAssistiveTouchIconLocationMidLeft";
      v13[4] = @"AXAssistiveTouchIconLocationMidRight";
      v13[5] = @"AXAssistiveTouchIconLocationBottomLeft";
      v13[6] = @"AXAssistiveTouchIconLocationBottomMiddle";
      v13[7] = @"AXAssistiveTouchIconLocationBottomRight";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = (__CFString **)v13;
      uint64_t v3 = 8;
      break;
    default:
      v11[0] = @"AXAssistiveTouchIconLocationTopLeft";
      v11[1] = @"AXAssistiveTouchIconLocationTopMiddle";
      v11[2] = @"AXAssistiveTouchIconLocationTopRight";
      v11[3] = @"AXAssistiveTouchIconLocationMidLeft";
      v11[4] = @"AXAssistiveTouchIconLocationMidRight";
      v11[5] = @"AXAssistiveTouchIconLocationBottomMiddle";
      id v1 = (void *)MEMORY[0x1E4F1C978];
      double v2 = (__CFString **)v11;
      uint64_t v3 = 6;
      break;
  }
  uint64_t v4 = [v1 arrayWithObjects:v2 count:v3];

  return v4;
}

uint64_t AXAssistiveTouchNamedLayout(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 8) {
    return 0;
  }
  return result;
}

__CFString *AXAssistiveTouchDefaultIconTypeForMouseButton(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"__NONE__";
  }
  else {
    return off_1E5586F00[a1 - 1];
  }
}

__CFString *AXAssistiveTouchDefaultLaserIconTypeForMouseButton(uint64_t a1)
{
  id v1 = @"__NONE__";
  if (a1 == 2) {
    id v1 = @"AXAssistiveTouchIconTypeMouseSecondaryClick";
  }
  if (a1 == 1) {
    return @"AXAssistiveTouchIconTypeMousePrimaryClick";
  }
  else {
    return v1;
  }
}

void sub_18D337A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __AXIsASVAssetViewer_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = [v0 bundleIdentifier];

  AXIsASVAssetViewer_sIsASVAssetViewer = [v1 isEqualToString:@"com.apple.AssetViewer.ASVAssetViewer"];
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t AXHasCapability(void *a1)
{
  id v1 = a1;
  double v2 = +[AXCapabilityManager sharedManager];
  uint64_t v3 = [v2 isCapabilityAvailable:v1];

  return v3;
}

void sub_18D33BD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getRTTTelephonyUtilitiesClass()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getRTTTelephonyUtilitiesClass_softClass;
  uint64_t v7 = getRTTTelephonyUtilitiesClass_softClass;
  if (!getRTTTelephonyUtilitiesClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getRTTTelephonyUtilitiesClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getRTTTelephonyUtilitiesClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D33BF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D33C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXDeviceSupportsLiveCaptionsInFaceTime_block_invoke(uint64_t a1, void *a2)
{
  return [a2 primaryLanguage];
}

Class __getAVCCaptionsClientClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AVConferenceLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __AVConferenceLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E55870E8;
    uint64_t v5 = 0;
    AVConferenceLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AVConferenceLibraryCore_frameworkLibrary) {
    __getAVCCaptionsClientClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AVCCaptionsClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getAVCCaptionsClientClass_block_invoke_cold_2();
  }
  getAVCCaptionsClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AVConferenceLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AVConferenceLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getUITextInputModeClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __UIKitLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587100;
    uint64_t v5 = 0;
    UIKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary) {
    __getUITextInputModeClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("UITextInputMode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getUITextInputModeClass_block_invoke_cold_2();
  }
  getUITextInputModeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getRTTTelephonyUtilitiesClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!RTTUtilitiesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __RTTUtilitiesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587118;
    uint64_t v5 = 0;
    RTTUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!RTTUtilitiesLibraryCore_frameworkLibrary) {
    __getRTTTelephonyUtilitiesClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("RTTTelephonyUtilities");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getRTTTelephonyUtilitiesClass_block_invoke_cold_2();
  }
  getRTTTelephonyUtilitiesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __RTTUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  RTTUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getCSPreferencesClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!CoreSpeechLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __CoreSpeechLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587130;
    uint64_t v5 = 0;
    CoreSpeechLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreSpeechLibraryCore_frameworkLibrary) {
    __getCSPreferencesClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("CSPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCSPreferencesClass_block_invoke_cold_2();
  }
  getCSPreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreSpeechLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreSpeechLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_18D33D0A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

__CFString *AXNameForDetectionMode(unsigned int a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5587198[a1];
  }
}

id AXLocalizedNameForDetectionMode(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 > 5)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = AXParameterizedLocalizedString(1, off_1E5587198[a1], a3, a4, a5, a6, a7, a8, v8);
  }
  return v10;
}

uint64_t AXDetectionModeForName(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"detection.people"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"detection.doors"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"detection.scenes"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"detection.point.speak"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"detection.text"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"detection.furniture"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 2;
  }

  return v2;
}

void sub_18D33EC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void AXIPCServerSetServerPort(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (AXIPCServerSetServerPort_onceToken != -1) {
    dispatch_once(&AXIPCServerSetServerPort_onceToken, &__block_literal_global_311);
  }
  uint64_t v3 = [NSNumber numberWithInt:a1];
  [(id)ServerPortLock lock];
  if (v4) {
    [(id)ServerPortMapping setObject:v4 forKey:v3];
  }
  else {
    [(id)ServerPortMapping removeObjectForKey:v3];
  }
  [(id)ServerPortLock unlock];
}

void sub_18D341484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_18D341D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t __AXXIPCSendData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  int v14 = a1;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v15 = AXIPCServerGetServer(a1);
  if (v15)
  {
    long long v16 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a4 length:a5];
    *(void *)buf = 0;
    id v24 = buf;
    uint64_t v25 = 0x2020000000;
    char v26 = 0;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ____AXXIPCSendData_block_invoke;
    v21[3] = &unk_1E55873C8;
    v21[4] = buf;
    int v22 = a2;
    long long v17 = a9[1];
    v20[0] = *a9;
    v20[1] = v17;
    [v15 _handleIncomingMessage:v16 securityToken:a8 auditToken:v20 clientPort:a3 completion:v21];
    if (a3 && mach_port_deallocate(*MEMORY[0x1E4F14960], a3)) {
      _AXAssert();
    }
    _Block_object_dispose(buf, 8);
    uint64_t v18 = 4294966991;
  }
  else
  {
    long long v16 = AXLogIPC();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_18D308000, v16, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
    }
    uint64_t v18 = 5;
  }

  return v18;
}

void sub_18D3430F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXXIPCSimpleSendDataWithFencePort(uint64_t a1, uint64_t a2, mach_port_name_t a3, uint64_t a4, unsigned int a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v12 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a4 length:a5];
  long long v13 = AXIPCServerGetServer(a1);
  int v14 = v13;
  if (v13)
  {
    *(void *)buf = 0;
    id v24 = buf;
    uint64_t v25 = 0x2020000000;
    char v26 = 0;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ____AXXIPCSimpleSendDataWithFencePort_block_invoke;
    v21[3] = &unk_1E55873C8;
    v21[4] = buf;
    mach_port_name_t v22 = a3;
    long long v15 = a7[1];
    v20[0] = *a7;
    v20[1] = v15;
    [v13 _handleIncomingMessage:v12 securityToken:a6 auditToken:v20 clientPort:a2 completion:v21];
    long long v16 = (ipc_space_t *)MEMORY[0x1E4F14960];
    if (a3) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], a3);
    }
    if (a2 && mach_port_deallocate(*v16, a2)) {
      _AXAssert();
    }
    _Block_object_dispose(buf, 8);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v18 = AXLogIPC();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_18D308000, v18, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
    }

    uint64_t v17 = 5;
  }

  return v17;
}

void sub_18D3434B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D343674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXXIPCSendDataWithAsyncReply(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((a3 - 1) >= 0xFFFFFFFE)
  {
    int v14 = AXLogIPC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl(&dword_18D308000, v14, OS_LOG_TYPE_DEFAULT, "Reply port was invalid, name: 0x%x", buf, 8u);
    }
    uint64_t v17 = 17;
  }
  else
  {
    int v13 = a1;
    int v14 = AXIPCServerGetServer(a1);
    if (v14)
    {
      long long v15 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a4 length:a5];
      *(void *)buf = 0;
      id v23 = buf;
      uint64_t v24 = 0x2020000000;
      char v25 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      _OWORD v20[2] = ____AXXIPCSendDataWithAsyncReply_block_invoke;
      v20[3] = &unk_1E55873C8;
      v20[4] = buf;
      int v21 = a3;
      long long v16 = a7[1];
      v19[0] = *a7;
      v19[1] = v16;
      [v14 _handleIncomingMessage:v15 securityToken:a6 auditToken:v19 clientPort:a2 completion:v20];
      if (a2 && mach_port_deallocate(*MEMORY[0x1E4F14960], a2)) {
        _AXAssert();
      }
      _Block_object_dispose(buf, 8);
      uint64_t v17 = 0;
    }
    else
    {
      long long v15 = AXLogIPC();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_18D308000, v15, OS_LOG_TYPE_DEFAULT, "Did not find server for server port %d", buf, 8u);
      }
      uint64_t v17 = 5;
    }
  }
  return v17;
}

void sub_18D3438E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXIPCServerSetServerPort_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v1 = (void *)ServerPortMapping;
  ServerPortMapping = (uint64_t)v0;

  ServerPortLock = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28E08]);

  return MEMORY[0x1F41817F8]();
}

Class __getUIWindowClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __UIKitLibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587410;
    uint64_t v5 = 0;
    UIKitLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary_0) {
    __getUIWindowClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("UIWindow");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getUIWindowClass_block_invoke_cold_2();
  }
  getUIWindowClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIKitLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_18D343E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAXUIClientClass_block_invoke_0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AccessibilityUILibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __AccessibilityUILibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587428;
    uint64_t v5 = 0;
    AccessibilityUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!AccessibilityUILibraryCore_frameworkLibrary_0) {
    __getAXUIClientClass_block_invoke_cold_1_0(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AXUIClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getAXUIClientClass_block_invoke_cold_2_0();
  }
  getAXUIClientClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AccessibilityUILibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  AccessibilityUILibraryCore_frameworkLibrary_0 = result;
  return result;
}

void _sendOnceRightDestroyedCallback(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 sendOnceRightDestroyed];
}

void sub_18D34626C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_18D3464E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_18D34665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D346938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D346A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D346E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AXIPCClient_handlePortInvalidCallback()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v0 = +[AXIPCClient allClients];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        [v5 serverPort];
        if (AXSafeEqual())
        {
          uint64_t v6 = [v5 portDeathHandler];

          if (v6) {
            [v5 _serverDied];
          }
        }
      }
      uint64_t v2 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  uint64_t v7 = AXLogIPC();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_18D308000, v7, OS_LOG_TYPE_INFO, "Client went invalid", v8, 2u);
  }
}

void sub_18D3477DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D347974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D348158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AXXIPCReplyToAsyncRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = +[AXIPCOutstandingAsyncRequest lookupByPort:a1];
  if (a3)
  {
    uint64_t v6 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a2 length:a3];
  }
  else
  {
    uint64_t v6 = 0;
  }
  [v5 rawResponseReceived:v6];

  return 0;
}

void OUTLINED_FUNCTION_0_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

uint64_t deviceMatchingCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 didAddDevice:a4];
}

uint64_t deviceRemovalCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 didRemoveDevice:a4];
}

uint64_t AXHomeClickHapticsSupported()
{
  if (AXHomeClickHapticsSupported_onceToken != -1) {
    dispatch_once(&AXHomeClickHapticsSupported_onceToken, &__block_literal_global_19);
  }
  return AXHomeClickHapticsSupported_HapticsSupported;
}

uint64_t __AXHomeClickHapticsSupported_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AXHomeClickHapticsSupported_HapticsSupported = result;
  return result;
}

uint64_t AXMIDINoteValueForNoteOrdinal(int a1)
{
  return (a1 - 12 * ((171 * a1) >> 11));
}

uint64_t AXMIDINoteOctaveForNoteOrdinal(int a1)
{
  return (171 * a1) >> 11;
}

id AXDateFromStringWithFormat(void *a1, void *a2)
{
  uint64_t v3 = AXDateFromStringWithFormat_predicate;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&AXDateFromStringWithFormat_predicate, &__block_literal_global_23);
  }
  [(id)AXDateFromStringWithFormat_formatter setDateFormat:v4];

  uint64_t v6 = [(id)AXDateFromStringWithFormat_formatter dateFromString:v5];

  return v6;
}

uint64_t __AXDateFromStringWithFormat_block_invoke()
{
  AXDateFromStringWithFormat_formatter = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28C10]);

  return MEMORY[0x1F41817F8]();
}

id AXDateStringForFormat(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = _AXCachedDateFormatterForFormat(a2);
  id v5 = [v4 stringFromDate:v3];

  return v5;
}

id _AXCachedDateFormatterForFormat(void *a1)
{
  id v1 = a1;
  uint64_t v9 = 0;
  long long v10 = &v9;
  uint64_t v11 = 0x3032000000;
  long long v12 = __Block_byref_object_copy__8;
  int v13 = __Block_byref_object_dispose__8;
  id v14 = 0;
  if (_AXCachedDateFormatterForFormat_onceToken != -1) {
    dispatch_once(&_AXCachedDateFormatterForFormat_onceToken, &__block_literal_global_54);
  }
  uint64_t v2 = _AXCachedDateFormatterForFormat_AXDateFormatterQueue;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _DWORD v6[2] = ___AXCachedDateFormatterForFormat_block_invoke_2;
  v6[3] = &unk_1E5586520;
  id v7 = v1;
  uint64_t v8 = &v9;
  id v3 = v1;
  dispatch_sync(v2, v6);
  id v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);

  return v4;
}

id AXDateStringForFormatWithTimeZone(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a1;
  id v7 = _AXCachedDateFormatterForFormat(a3);
  [v7 setTimeZone:v5];

  uint64_t v8 = [v7 stringFromDate:v6];

  [v7 setTimeZone:0];

  return v8;
}

id AXDateStringForFormatWithLocale(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  id v7 = _AXCachedDateFormatterForFormat(a2);
  uint64_t v8 = [v7 locale];
  [v7 setLocale:v5];

  uint64_t v9 = [v7 stringFromDate:v6];

  [v7 setLocale:v8];

  return v9;
}

id AXDateStringForFormatWithLocaleInCalendarAndTimeZone(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a1;
  int v13 = _AXCachedDateFormatterForFormat(a2);
  id v14 = [v13 locale];
  long long v15 = [v13 calendar];
  long long v16 = [v13 timeZone];
  [v13 setLocale:v11];

  [v13 setCalendar:v10];
  [v13 setTimeZone:v9];

  uint64_t v17 = [v13 stringFromDate:v12];

  [v13 setLocale:v14];
  [v13 setCalendar:v15];
  [v13 setTimeZone:v16];

  return v17;
}

id AXShortDurationStringForDuration(double a1)
{
  id v3 = objc_opt_new();
  [v3 setZeroFormattingBehavior:1];
  [v3 setUnitsStyle:1];
  [v3 setAllowedUnits:224];
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = [v3 stringFromTimeInterval:a1];
  }

  return v4;
}

id AXDurationStringForDuration(double a1)
{
  return _AXDurationStringForDuration(1, a1);
}

double AXDurationForDurationString(void *a1)
{
  id v1 = [a1 stringByReplacingOccurrencesOfString:@"-" withString:&stru_1EDC3DEF8];
  uint64_t v2 = [v1 componentsSeparatedByString:@":"];
  id v3 = [v2 reverseObjectEnumerator];
  id v4 = [v3 allObjects];

  double v5 = 0.0;
  if ((unint64_t)[v4 count] >= 3)
  {
    id v6 = [v4 objectAtIndexedSubscript:2];
    double v5 = (double)(3600 * [v6 integerValue]);
  }
  if ((unint64_t)[v4 count] >= 2)
  {
    id v7 = [v4 objectAtIndexedSubscript:1];
    double v5 = v5 + (double)(60 * [v7 integerValue]);
  }
  if ([v4 count])
  {
    uint64_t v8 = [v4 objectAtIndexedSubscript:0];
    double v5 = v5 + (double)[v8 integerValue];
  }
  return v5;
}

uint64_t AXPositionalStyleDurationStringForDuration(double a1)
{
  if (AXPositionalStyleDurationStringForDuration_onceToken != -1) {
    dispatch_once(&AXPositionalStyleDurationStringForDuration_onceToken, &__block_literal_global_10);
  }
  uint64_t v2 = &AXPositionalStyleDurationStringForDuration_hourMinuteSecondFormatter;
  if (a1 < 3600.0) {
    uint64_t v2 = &AXPositionalStyleDurationStringForDuration_minuteSecondFormatter;
  }
  id v3 = (void *)*v2;

  return [v3 stringFromTimeInterval:a1];
}

uint64_t __AXPositionalStyleDurationStringForDuration_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C00]);
  id v1 = (void *)AXPositionalStyleDurationStringForDuration_minuteSecondFormatter;
  AXPositionalStyleDurationStringForDuration_minuteSecondFormatter = (uint64_t)v0;

  [(id)AXPositionalStyleDurationStringForDuration_minuteSecondFormatter setAllowedUnits:192];
  [(id)AXPositionalStyleDurationStringForDuration_minuteSecondFormatter setUnitsStyle:0];
  [(id)AXPositionalStyleDurationStringForDuration_minuteSecondFormatter setZeroFormattingBehavior:1];
  id v2 = objc_alloc_init(MEMORY[0x1E4F28C00]);
  id v3 = (void *)AXPositionalStyleDurationStringForDuration_hourMinuteSecondFormatter;
  AXPositionalStyleDurationStringForDuration_hourMinuteSecondFormatter = (uint64_t)v2;

  [(id)AXPositionalStyleDurationStringForDuration_hourMinuteSecondFormatter setAllowedUnits:224];
  [(id)AXPositionalStyleDurationStringForDuration_hourMinuteSecondFormatter setUnitsStyle:0];
  id v4 = (void *)AXPositionalStyleDurationStringForDuration_hourMinuteSecondFormatter;

  return [v4 setZeroFormattingBehavior:1];
}

id AXClockTimeStringForDate(void *a1)
{
  id v1 = AXDateStringForFormat(a1, @"jjmm");
  id v2 = [MEMORY[0x1E4F488F0] axAttributedStringWithString:v1];
  [v2 setAttribute:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F48988]];

  return v2;
}

id AXLocalizeDurationTime(void *a1)
{
  id v1 = a1;
  if ([v1 containsString:@":"])
  {
    id v2 = [v1 componentsSeparatedByString:@":"];
    id v3 = (void *)[objc_allocWithZone(MEMORY[0x1E4F1CA48]) init];
    uint64_t v4 = [v2 count];
    uint64_t v5 = v4 - 1;
    if (v4 >= 1)
    {
      uint64_t v6 = 0;
      while (1)
      {
        id v7 = [v2 objectAtIndex:v5];
        uint64_t v8 = v7;
        if (!v6) {
          break;
        }
        if (v6 == 2)
        {
          if ((int)[v7 intValue] >= 1)
          {
            int v9 = 3;
            goto LABEL_12;
          }
        }
        else if (v6 == 1 && (int)[v7 intValue] > 0)
        {
          int v9 = 2;
          goto LABEL_12;
        }
LABEL_16:

        ++v6;
        if (--v5 == -1) {
          goto LABEL_17;
        }
      }
      int v9 = 1;
LABEL_12:
      [v8 doubleValue];
      if (v10 < 10.0 && [v8 length] == 2)
      {
        uint64_t v11 = [v8 substringFromIndex:1];

        uint64_t v8 = (void *)v11;
      }
      [v8 floatValue];
      int v13 = AXTimeStringForType(v9, v12);
      [v3 addObject:v13];

      goto LABEL_16;
    }
LABEL_17:
    id v14 = [v3 reverseObjectEnumerator];
    long long v15 = [v14 allObjects];
    long long v16 = [v15 componentsJoinedByString:@", "];

    id v17 = v16;
  }
  else
  {
    id v17 = v1;
  }

  return v17;
}

id AXTimeStringForType(int a1, float a2)
{
  switch(a1)
  {
    case 1:
      if (vabds_f32(floorf(a2), a2) <= 0.00001)
      {
        uint64_t v5 = @"seconds.format.integer";
        goto LABEL_9;
      }
      id v3 = NSString;
      uint64_t v4 = AXLocalizedString(@"seconds.format.float");
      objc_msgSend(v3, "localizedStringWithFormat:", v4, a2);
      goto LABEL_10;
    case 2:
      uint64_t v5 = @"minutes.format";
      goto LABEL_9;
    case 3:
      uint64_t v5 = @"hours.format";
      goto LABEL_9;
    case 4:
      uint64_t v5 = @"days.format";
      goto LABEL_9;
    default:
      uint64_t v5 = 0;
LABEL_9:
      uint64_t v6 = NSString;
      uint64_t v4 = AXLocalizedString(v5);
      objc_msgSend(v6, "localizedStringWithFormat:", v4, (int)a2);
      id v7 = LABEL_10:;

      return v7;
  }
}

id AXLocDuration(uint64_t a1, double a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F28C00]);
  uint64_t v5 = v4;
  if (a1) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 1;
  }
  [v4 setUnitsStyle:v6];
  id v7 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v7 setSecond:(uint64_t)a2];
  objc_msgSend(v7, "setNanosecond:", (uint64_t)((a2 - (double)objc_msgSend(v7, "second")) * 1000000000.0));
  uint64_t v8 = [v5 stringFromDateComponents:v7];
  uint64_t v9 = [v7 second];
  if (!a1 && a2 - (double)v9 > 0.0)
  {
    double v10 = AXFormatFloat();
    uint64_t v17 = AXParameterizedLocalizedString(1, @"AX_SUB_SECOND_ABBREVIATION", v11, v12, v13, v14, v15, v16, (uint64_t)v10);

    uint64_t v8 = (void *)v17;
  }

  return v8;
}

id AXStringForTimeSince(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    _AXLogWithFacility();
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  id v2 = [MEMORY[0x1E4F1C9A8] autoupdatingCurrentCalendar];
  id v3 = [MEMORY[0x1E4F1C9C8] date];
  id v4 = [v2 components:64 fromDate:v1 toDate:v3 options:0];

  uint64_t v5 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v6 = [v2 components:32 fromDate:v1 toDate:v5 options:0];
  uint64_t v7 = [v6 hour];

  uint64_t v8 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v9 = [v2 components:16 fromDate:v1 toDate:v8 options:0];
  uint64_t v10 = [v9 day];

  uint64_t v11 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v12 = [v2 components:8 fromDate:v1 toDate:v11 options:0];
  uint64_t v13 = [v12 month];

  uint64_t v14 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v15 = [v2 components:4 fromDate:v1 toDate:v14 options:0];
  uint64_t v16 = [v15 year];

  if (v16 >= 1)
  {
    uint64_t v17 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v18 = v2;
    uint64_t v19 = 4;
LABEL_11:
    uint64_t v21 = [v18 components:v19 fromDate:v1 toDate:v17 options:0];

    id v4 = (void *)v21;
    goto LABEL_12;
  }
  if (v13 >= 1)
  {
    uint64_t v17 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v18 = v2;
    uint64_t v19 = 8;
    goto LABEL_11;
  }
  if (v10 >= 1)
  {
    uint64_t v17 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v18 = v2;
    uint64_t v19 = 16;
    goto LABEL_11;
  }
  if (v7 >= 1)
  {
    uint64_t v17 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v18 = v2;
    uint64_t v19 = 32;
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v20 = [MEMORY[0x1E4F28C00] localizedStringFromDateComponents:v4 unitsStyle:4];

LABEL_13:

  return v20;
}

id AXTimeAgoStringForTimeSince(void *a1)
{
  id v1 = AXStringForTimeSince(a1);
  if (v1)
  {
    id v2 = NSString;
    id v3 = AXLocalizedString(@"time.ago");
    id v4 = objc_msgSend(v2, "localizedStringWithFormat:", v3, v1);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

uint64_t AXCurrentTimeForWatchFaces()
{
  return [MEMORY[0x1E4F1C9C8] date];
}

id AXClockTimeStringForDateIncludingSeconds(void *a1, int a2)
{
  id v3 = a1;
  id v4 = v3;
  if (a2)
  {
    uint64_t v5 = AXDateStringForFormat(v3, @"jjmm");
    uint64_t v6 = [MEMORY[0x1E4F1C9A8] currentCalendar];
    uint64_t v7 = [v6 component:128 fromDate:v4];

    uint64_t v8 = NSString;
    uint64_t v9 = AXLocalizedString(@"time.with.seconds.format");
    uint64_t v10 = objc_msgSend(v8, "localizedStringWithFormat:", v9, v7, v5);

    id v4 = (void *)v5;
  }
  else
  {
    uint64_t v10 = AXDateStringForFormat(v3, @"jjmma");
  }

  uint64_t v11 = [MEMORY[0x1E4F488F0] axAttributedStringWithString:v10];
  [v11 setAttribute:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F48988]];

  return v11;
}

id AXClockTimeVoiceOverSpokenStringForWatchFaces(int a1)
{
  id v2 = [MEMORY[0x1E4F1C9C8] date];
  id v3 = AXClockTimeStringForDateIncludingSeconds(v2, a1);

  return v3;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

id AXTemperatureFromIntegerInUnits(uint64_t a1, int a2, int a3)
{
  if (AXTemperatureFromIntegerInUnits_predicate != -1) {
    dispatch_once(&AXTemperatureFromIntegerInUnits_predicate, &__block_literal_global_24);
  }
  if (a2 != a3)
  {
    float v6 = (float)a1;
    if (a3) {
      float v7 = (float)((float)(v6 + -32.0) * 5.0) / 9.0;
    }
    else {
      float v7 = (float)((float)(v6 * 9.0) / 5.0) + 32.0;
    }
    a1 = llroundf(v7);
  }
  uint64_t v8 = (void *)AXTemperatureFromIntegerInUnits_formatter;
  uint64_t v9 = [NSNumber numberWithInteger:a1];
  uint64_t v10 = [v8 stringFromNumber:v9];

  return v10;
}

uint64_t __AXTemperatureFromIntegerInUnits_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  id v1 = (void *)AXTemperatureFromIntegerInUnits_formatter;
  AXTemperatureFromIntegerInUnits_formatter = (uint64_t)v0;

  id v2 = (void *)AXTemperatureFromIntegerInUnits_formatter;

  return [v2 setNumberStyle:1];
}

__CFString *AXTemperatureFromStringInUnits(void *a1, int a2, int a3)
{
  id v5 = a1;
  float v6 = v5;
  if (v5 && [v5 length])
  {
    float v7 = @"--";
    if (([v6 isEqualToString:@"--"] & 1) == 0)
    {
      AXTemperatureFromIntegerInUnits([v6 integerValue], a2, a3);
      float v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    float v7 = @"--";
  }

  return v7;
}

double AX_CGRectGetCenter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

double AX_CGPointGetDistanceToPoint(double a1, double a2, double a3, double a4)
{
  return sqrt((a3 - a1) * (a3 - a1) + (a4 - a2) * (a4 - a2));
}

double AX_CGRectBySubtractingRect(int a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  if (CGRectIsEmpty(*(CGRect *)&a3)) {
    return a3;
  }
  v27.origin.x = a7;
  v27.origin.y = a8;
  v27.size.width = a9;
  v27.size.height = a10;
  if (CGRectIsEmpty(v27)) {
    return a3;
  }
  v28.origin.x = a3;
  v28.origin.y = a4;
  v28.size.width = a5;
  v28.size.height = a6;
  v32.origin.x = a7;
  v32.origin.y = a8;
  v32.size.width = a9;
  v32.size.height = a10;
  if (!CGRectIntersectsRect(v28, v32)) {
    return a3;
  }
  v29.origin.x = a7;
  v29.origin.y = a8;
  v29.size.width = a9;
  v29.size.height = a10;
  v33.origin.x = a3;
  v33.origin.y = a4;
  v33.size.width = a5;
  v33.size.height = a6;
  if (CGRectContainsRect(v29, v33)) {
    return *MEMORY[0x1E4F1DB28];
  }
  v30.origin.x = a3;
  v30.origin.y = a4;
  v30.size.width = a5;
  v30.size.height = a6;
  v34.origin.x = a7;
  v34.origin.y = a8;
  v34.size.width = a9;
  v34.size.height = a10;
  CGRect v31 = CGRectIntersection(v30, v34);
  double v22 = a4 + a6;
  double v23 = v31.origin.y + v31.size.height;
  if (a4 >= v31.origin.y || v22 > v23)
  {
    if (a4 < v31.origin.y || v22 <= v23)
    {
      BOOL v24 = v31.origin.y - a4 > 0.0;
      if (!a2) {
        BOOL v24 = 0;
      }
    }
    else
    {
      BOOL v24 = 1;
    }
  }
  else
  {
    BOOL v24 = 1;
  }
  double v25 = a3 + a5;
  double v20 = v31.origin.x + v31.size.width;
  if (a3 < v31.origin.x && v25 <= v20)
  {
    double v20 = a3;
LABEL_23:
    if (v24 && a1) {
      return a3;
    }
    return v20;
  }
  if (a3 >= v31.origin.x && v25 > v20) {
    goto LABEL_23;
  }
  double v20 = a3;
  if (a2)
  {
    if (v31.origin.x - a3 > 0.0) {
      goto LABEL_23;
    }
  }
  return v20;
}

BOOL AX_CGRectAlmostEqualToRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  CGRect v35 = CGRectStandardize(*(CGRect *)&a1);
  CGFloat x = v35.origin.x;
  CGFloat y = v35.origin.y;
  CGFloat width = v35.size.width;
  CGFloat height = v35.size.height;
  v35.origin.CGFloat x = a5;
  v35.origin.CGFloat y = a6;
  v35.size.CGFloat width = a7;
  v35.size.CGFloat height = a8;
  CGRect v36 = CGRectStandardize(v35);
  CGFloat v25 = v36.origin.x;
  CGFloat v26 = v36.origin.y;
  CGFloat v27 = v36.size.width;
  CGFloat v28 = v36.size.height;
  CGFloat v34 = x;
  v36.origin.CGFloat x = x;
  v36.origin.CGFloat y = y;
  v36.size.CGFloat width = width;
  v36.size.CGFloat height = height;
  double MinX = CGRectGetMinX(v36);
  v37.origin.CGFloat x = v25;
  v37.origin.CGFloat y = v26;
  v37.size.CGFloat width = v27;
  v37.size.CGFloat height = v28;
  if (vabdd_f64(MinX, CGRectGetMinX(v37)) >= a9) {
    return 0;
  }
  v38.origin.CGFloat y = y;
  v38.origin.CGFloat x = v34;
  v38.size.CGFloat width = width;
  v38.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v38);
  v39.origin.CGFloat x = v25;
  v39.origin.CGFloat y = v26;
  v39.size.CGFloat width = v27;
  v39.size.CGFloat height = v28;
  if (vabdd_f64(MinY, CGRectGetMinY(v39)) >= a9) {
    return 0;
  }
  v40.origin.CGFloat x = v34;
  v40.origin.CGFloat y = y;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  double MaxX = CGRectGetMaxX(v40);
  v41.origin.CGFloat x = v25;
  v41.origin.CGFloat y = v26;
  v41.size.CGFloat width = v27;
  v41.size.CGFloat height = v28;
  if (vabdd_f64(MaxX, CGRectGetMaxX(v41)) >= a9) {
    return 0;
  }
  v42.origin.CGFloat x = v34;
  v42.origin.CGFloat y = y;
  v42.size.CGFloat width = width;
  v42.size.CGFloat height = height;
  double MaxY = CGRectGetMaxY(v42);
  v43.origin.CGFloat x = v25;
  v43.origin.CGFloat y = v26;
  v43.size.CGFloat width = v27;
  v43.size.CGFloat height = v28;
  return vabdd_f64(MaxY, CGRectGetMaxY(v43)) < a9;
}

double AX_CGPointGetMidpointToPoint(double a1, double a2, double a3)
{
  return (a1 + a3) * 0.5;
}

double AX_CGPointGetMidpointOfAllPoints(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 count];
  if (v2)
  {
    unint64_t v3 = v2;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = v1;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v15;
      double v8 = 0.0;
      double v9 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          double v8 = v8 + AX_CGPointFromString(*(void **)(*((void *)&v14 + 1) + 8 * i));
          double v9 = v9 + v11;
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v6);
    }
    else
    {
      double v8 = 0.0;
    }

    double v12 = v8 / (double)v3;
  }
  else
  {
    double v12 = *MEMORY[0x1E4F1DAD8];
  }

  return v12;
}

double AX_CGPointFromString(void *a1)
{
  id v1 = a1;
  double DoubleValue = *MEMORY[0x1E4F1DAD8];
  if ((unint64_t)[v1 length] >= 5)
  {
    unint64_t v3 = (__CFString *)v1;
    if (!ParseBracesAndCommas___braceCharacters) {
      ParseBracesAndCommas___braceCharacters = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, @"{[,]}");
    }
    CFIndex v19 = 0;
    CFIndex Length = CFStringGetLength(v3);
    result.CFIndex location = 0;
    result.length = 0;
    if (Length < 1)
    {
      uint64_t v6 = 0;
      CFIndex location = -1;
    }
    else
    {
      CFIndex v5 = Length;
      uint64_t v6 = 0;
      int v7 = 0;
      CFIndex v8 = 0;
      uint64_t v18 = &v19;
      CFIndex location = -1;
      CFIndex v10 = Length;
      CFIndex v11 = -1;
      while (1)
      {
        v21.CFIndex location = v8;
        v21.length = v10;
        if (!CFStringFindCharacterFromSet(v3, (CFCharacterSetRef)ParseBracesAndCommas___braceCharacters, v21, 0, &result))break; {
        if (result.location >= v5 || result.length != 1)
        }
          break;
        CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(v3, result.location);
        if ((CharacterAtIndex & 0xFFFFFFDF) == 0x5B)
        {
          if (!v7) {
            CFIndex location = result.location;
          }
          ++v7;
        }
        else if (CharacterAtIndex == 44)
        {
          if (v7 == 1)
          {
            if (v6 <= 0)
            {
              *v18++ = result.location;
              ++v6;
            }
            int v7 = 1;
          }
        }
        else if ((CharacterAtIndex & 0xFFFFFFDF) == 0x5D && !--v7)
        {
          CFIndex v11 = result.location;
          goto LABEL_28;
        }
        if (result.location + 1 < v5)
        {
          v10 += v8 + ~result.location;
          CFIndex v8 = result.location + 1;
          if (v10 > 0) {
            continue;
          }
        }
        goto LABEL_28;
      }
    }
    CFIndex v11 = -1;
LABEL_28:
    if (location == -1 || v11 == -1 || v6 != 1 || location >= v11 || (CFIndex v14 = v19, v19 <= location + 1) || v19 >= v11 - 1)
    {
    }
    else
    {
      v22.length = v19 + ~location;
      v22.CFIndex location = location + 1;
      CFStringRef v15 = CFStringCreateWithSubstring(0, v3, v22);
      v23.CFIndex location = v14 + 1;
      v23.length = v11 + ~v14;
      CFStringRef v16 = CFStringCreateWithSubstring(0, v3, v23);

      double DoubleValue = CFStringGetDoubleValue(v15);
      CFStringGetDoubleValue(v16);
      CFRelease(v15);
      CFRelease(v16);
    }
  }

  return DoubleValue;
}

double AX_CGPointGetOffsetAlongVectorWithDistance(double a1, double a2, double a3, double a4, double a5)
{
  if (a3 - a1 == 0.0) {
    return 0.0;
  }
  double v6 = sqrt(a5 * a5 / ((a4 - a2) / (a3 - a1) * ((a4 - a2) / (a3 - a1)) + 1.0));
  if (a3 >= a1) {
    double result = v6;
  }
  else {
    double result = -v6;
  }
  if (a5 < 0.0) {
    return -result;
  }
  return result;
}

CGFloat AX_CGRectToOrientation(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MainScreenBounds = AXDeviceGetMainScreenBounds();

  return AX_CGRectToOrientationWithScreenBounds(a1, a2, a3, a4, a5, MainScreenBounds, v10, v11, v12);
}

CGFloat AX_CGRectToOrientationWithScreenBounds(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  if (a1 == 4)
  {
    v27.origin.CGFloat x = a6;
    v27.origin.CGFloat y = a7;
    v27.size.CGFloat width = a8;
    v27.size.CGFloat height = a9;
    double MaxY = CGRectGetMaxY(v27);
    v28.origin.CGFloat x = a2;
    v28.origin.CGFloat y = a3;
    v28.size.CGFloat width = a4;
    v28.size.CGFloat height = a5;
    double v18 = MaxY - CGRectGetMaxY(v28);
    v29.origin.CGFloat x = a2;
    v29.origin.CGFloat y = a3;
    v29.size.CGFloat width = a4;
    v29.size.CGFloat height = a5;
    CGRectGetMinX(v29);
LABEL_7:
    v32.origin.CGFloat x = a2;
    v32.origin.CGFloat y = a3;
    v32.size.CGFloat width = a4;
    v32.size.CGFloat height = a5;
    CGRectGetHeight(v32);
    v33.origin.CGFloat x = a2;
    v33.origin.CGFloat y = a3;
    v33.size.CGFloat width = a4;
    v33.size.CGFloat height = a5;
    CGRectGetWidth(v33);
    return v18;
  }
  if (a1 == 3)
  {
    CGFloat MinY = CGRectGetMinY(*(CGRect *)&a2);
    v30.origin.CGFloat x = a6;
    v30.origin.CGFloat y = a7;
    v30.size.CGFloat width = a8;
    double v18 = MinY;
    v30.size.CGFloat height = a9;
    CGRectGetMaxX(v30);
    v31.origin.CGFloat x = a2;
    v31.origin.CGFloat y = a3;
    v31.size.CGFloat width = a4;
    v31.size.CGFloat height = a5;
    CGRectGetMaxX(v31);
    goto LABEL_7;
  }
  if (a1 != 2) {
    return a2;
  }
  v23.origin.CGFloat x = a6;
  v23.origin.CGFloat y = a7;
  v23.size.CGFloat width = a8;
  v23.size.CGFloat height = a9;
  double MaxX = CGRectGetMaxX(v23);
  v24.origin.CGFloat x = a2;
  v24.origin.CGFloat y = a3;
  v24.size.CGFloat width = a4;
  v24.size.CGFloat height = a5;
  double v17 = MaxX - CGRectGetMaxX(v24);
  v25.origin.CGFloat x = a6;
  v25.origin.CGFloat y = a7;
  v25.size.CGFloat width = a8;
  double v18 = v17;
  v25.size.CGFloat height = a9;
  CGRectGetMaxY(v25);
  v26.origin.CGFloat x = a2;
  v26.origin.CGFloat y = a3;
  v26.size.CGFloat width = a4;
  v26.size.CGFloat height = a5;
  CGRectGetMaxY(v26);
  return v18;
}

void AX_CGPathEnumerateElementsUsingBlock(const CGPath *a1, void *a2)
{
  id v3 = a2;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  char v12 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v10[3] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __AX_CGPathEnumerateElementsUsingBlock_block_invoke;
  aBlock[3] = &unk_1E5587630;
  CFIndex v8 = v11;
  id v4 = v3;
  id v7 = v4;
  double v9 = v10;
  CFIndex v5 = _Block_copy(aBlock);
  CGPathApply(a1, v5, (CGPathApplierFunction)_CGPathEnumerationIteration);

  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v11, 8);
}

void sub_18D353F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void _CGPathEnumerationIteration(const void *a1, uint64_t a2)
{
  id v3 = (void (**)(id, void))_Block_copy(a1);
  v3[2](v3, a2);
}

double AX_CGPathGetIntersectionPointWithOtherPath(const CGPath *a1, const CGPath *a2, char a3)
{
  if (a3)
  {
    uint64_t v46 = 0;
    v47 = (double *)&v46;
    uint64_t v48 = 0x3010000000;
    v49 = &unk_18D441ED1;
    int64x2_t v50 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    uint64_t v41 = 0;
    uint64_t v42 = (uint64_t)&v41;
    uint64_t v43 = 0x3010000000;
    v44 = &unk_18D441ED1;
    long long v45 = *MEMORY[0x1E4F1DAD8];
    uint64_t v35 = MEMORY[0x1E4F143A8];
    uint64_t v36 = 3221225472;
    uint64_t v37 = (uint64_t)___AX_CGPathGetIntersectionPointWithOtherPathExhaustive_block_invoke;
    CGRect v38 = &unk_1E5587740;
    v39.i64[1] = (uint64_t)&v46;
    CGRect v40 = a2;
    v39.i64[0] = (uint64_t)&v41;
    AX_CGPathEnumerateElementsUsingBlock(a1, &v35);
    double Center = v47[4];
    _Block_object_dispose(&v41, 8);
    CFIndex v5 = &v46;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = (uint64_t)&v35;
    uint64_t v37 = 0x3010000000;
    CGRect v38 = &unk_18D441ED1;
    int64x2_t v39 = *(int64x2_t *)MEMORY[0x1E4F1DAD8];
    uint64_t v46 = 0;
    v47 = (double *)&v46;
    uint64_t v48 = 0x3010000000;
    v49 = &unk_18D441ED1;
    int64x2_t v23 = v39;
    int64x2_t v50 = v39;
    uint64_t v41 = MEMORY[0x1E4F143A8];
    uint64_t v42 = 3221225472;
    uint64_t v43 = (uint64_t)___AX_CGPathGetIntersectionPointWithOtherPathNonExhaustive_block_invoke;
    v44 = &unk_1E5587680;
    *(void *)&long long v45 = &v35;
    *((void *)&v45 + 1) = &v46;
    AX_CGPathEnumerateElementsUsingBlock(a1, &v41);
    uint64_t v30 = 0;
    CGRect v31 = (double *)&v30;
    uint64_t v32 = 0x3010000000;
    CGRect v33 = &unk_18D441ED1;
    int64x2_t v34 = v23;
    uint64_t v25 = 0;
    CGRect v26 = (double *)&v25;
    uint64_t v27 = 0x3010000000;
    CGRect v28 = &unk_18D441ED1;
    int64x2_t v29 = v23;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = ___AX_CGPathGetIntersectionPointWithOtherPathNonExhaustive_block_invoke_2;
    v24[3] = &unk_1E5587680;
    v24[4] = &v30;
    v24[5] = &v25;
    AX_CGPathEnumerateElementsUsingBlock(a2, v24);
    double v6 = v47[4];
    double v7 = v47[5];
    double v8 = *(double *)(v36 + 32);
    double v9 = *(double *)(v36 + 40);
    if (v6 >= v8) {
      uint64_t v10 = *(void *)(v36 + 32);
    }
    else {
      uint64_t v10 = *((void *)v47 + 4);
    }
    if (v7 >= v9) {
      uint64_t v11 = *(void *)(v36 + 40);
    }
    else {
      uint64_t v11 = *((void *)v47 + 5);
    }
    double v12 = fmax(vabdd_f64(v6, v8), 3.0);
    double v13 = fmax(vabdd_f64(v7, v9), 3.0);
    double v14 = v26[4];
    double v15 = v26[5];
    double v16 = v31[4];
    double v17 = v31[5];
    if (v14 >= v16) {
      uint64_t v18 = *((void *)v31 + 4);
    }
    else {
      uint64_t v18 = *((void *)v26 + 4);
    }
    if (v15 >= v17) {
      uint64_t v19 = *((void *)v31 + 5);
    }
    else {
      uint64_t v19 = *((void *)v26 + 5);
    }
    double v20 = fmax(vabdd_f64(v14, v16), 3.0);
    double v21 = fmax(vabdd_f64(v15, v17), 3.0);
    CGRect v51 = CGRectIntersection(*(CGRect *)&v10, *(CGRect *)&v18);
    double Center = 1.79769313e308;
    if (v51.size.width > 0.0 && v51.size.height != 0.0) {
      double Center = AX_CGRectGetCenter(v51.origin.x, v51.origin.y, v51.size.width, v51.size.height);
    }
    _Block_object_dispose(&v25, 8);
    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v46, 8);
    CFIndex v5 = &v35;
  }
  _Block_object_dispose(v5, 8);
  return Center;
}

void sub_18D354358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose((const void *)(v30 - 96), 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

double AX_CGPathGetIntersectionPointWithRect(const CGPath *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v38[8] = *MEMORY[0x1E4F143B8];
  CGFloat MinX = CGRectGetMinX(*(CGRect *)&a2);
  v39.origin.CGFloat x = a2;
  v39.origin.CGFloat y = a3;
  v39.size.CGFloat width = a4;
  v39.size.CGFloat height = a5;
  *(CGFloat *)CGRect v38 = MinX;
  v38[1] = CGRectGetMinY(v39);
  v40.origin.CGFloat x = a2;
  v40.origin.CGFloat y = a3;
  v40.size.CGFloat width = a4;
  v40.size.CGFloat height = a5;
  CGFloat MaxX = CGRectGetMaxX(v40);
  v41.origin.CGFloat x = a2;
  v41.origin.CGFloat y = a3;
  v41.size.CGFloat width = a4;
  v41.size.CGFloat height = a5;
  *(CGFloat *)&v38[2] = MaxX;
  v38[3] = CGRectGetMinY(v41);
  v42.origin.CGFloat x = a2;
  v42.origin.CGFloat y = a3;
  v42.size.CGFloat width = a4;
  v42.size.CGFloat height = a5;
  CGFloat v12 = CGRectGetMaxX(v42);
  v43.origin.CGFloat x = a2;
  v43.origin.CGFloat y = a3;
  v43.size.CGFloat width = a4;
  v43.size.CGFloat height = a5;
  *(CGFloat *)&v38[4] = v12;
  v38[5] = CGRectGetMaxY(v43);
  v44.origin.CGFloat x = a2;
  v44.origin.CGFloat y = a3;
  v44.size.CGFloat width = a4;
  v44.size.CGFloat height = a5;
  CGFloat v13 = CGRectGetMinX(v44);
  v45.origin.CGFloat x = a2;
  v45.origin.CGFloat y = a3;
  v45.size.CGFloat width = a4;
  v45.size.CGFloat height = a5;
  uint64_t v14 = 0;
  *(CGFloat *)&v38[6] = v13;
  v38[7] = CGRectGetMaxY(v45);
  double v15 = (_OWORD *)MEMORY[0x1E4F1DAD8];
  do
  {
    Mutable = CGPathCreateMutable();
    if (Mutable)
    {
      double v17 = Mutable;
      uint64_t v18 = (double *)&v38[2 * v14];
      CGFloat v19 = *v18;
      CGFloat v20 = v18[1];
      double v21 = (double *)&v38[2 * ((v14 + 1) & 3)];
      CGFloat v22 = *v21;
      CGFloat v23 = v21[1];
      CGPathMoveToPoint(Mutable, 0, v19, v20);
      CGPathAddLineToPoint(v17, 0, v22, v23);
      double IntersectionPointWithOtherPath = AX_CGPathGetIntersectionPointWithOtherPath(a1, v17, 1);
      uint64_t v25 = &v37[v14];
      *(double *)uint64_t v25 = IntersectionPointWithOtherPath;
      *((void *)v25 + 1) = v26;
      CGPathRelease(v17);
    }
    else
    {
      v37[v14] = *v15;
    }
    ++v14;
  }
  while (v14 != 4);
  uint64_t v32 = 0;
  CGRect v33 = (double *)&v32;
  uint64_t v34 = 0x3010000000;
  uint64_t v35 = &unk_18D441ED1;
  long long v36 = *v15;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = __AX_CGPathGetIntersectionPointWithRect_block_invoke;
  v31[3] = &unk_1E5587658;
  v31[4] = &v32;
  AX_CGPathEnumerateElementsUsingBlock(a1, v31);
  uint64_t v27 = 0;
  double v28 = *(double *)v15;
  do
  {
    double v29 = *(double *)&v37[v27];
    if (AX_CGPointGetDistanceToPoint(v29, *((double *)&v37[v27] + 1), v33[4], v33[5]) < 1.79769313e308) {
      double v28 = v29;
    }
    ++v27;
  }
  while (v27 != 4);
  _Block_object_dispose(&v32, 8);
  return v28;
}

void sub_18D354668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AX_CGPathGetNumberOfElements(const CGPath *a1)
{
  uint64_t v4 = 0;
  CFIndex v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __AX_CGPathGetNumberOfElements_block_invoke;
  v3[3] = &unk_1E5587658;
  v3[4] = &v4;
  AX_CGPathEnumerateElementsUsingBlock(a1, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D35474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AX_CGPathGetStartingAndEndingPoints(const CGPath *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v11 = 0;
  CGFloat v12 = &v11;
  uint64_t v13 = 0x3010000000;
  uint64_t v14 = &unk_18D441ED1;
  long long v15 = *MEMORY[0x1E4F1DAD8];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3010000000;
  double v9 = &unk_18D441ED1;
  long long v10 = v15;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __AX_CGPathGetStartingAndEndingPoints_block_invoke;
  v5[3] = &unk_1E5587680;
  v5[4] = &v11;
  v5[5] = &v6;
  AX_CGPathEnumerateElementsUsingBlock(a1, v5);
  if (a2) {
    *a2 = *((_OWORD *)v12 + 2);
  }
  if (a3) {
    *a3 = *((_OWORD *)v7 + 2);
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v11, 8);
}

void sub_18D35487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

double AX_CGPathGetPointForElementAtIndex(const CGPath *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = (double *)&v5;
  uint64_t v7 = 0x3010000000;
  uint64_t v8 = &unk_18D441ED1;
  long long v9 = *MEMORY[0x1E4F1DAD8];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __AX_CGPathGetPointForElementAtIndex_block_invoke;
  v4[3] = &unk_1E55876A8;
  void v4[4] = &v5;
  v4[5] = a2;
  AX_CGPathEnumerateElementsUsingBlock(a1, v4);
  double v2 = v6[4];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_18D35498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGMutablePathRef AX_CGCreatePathPathWithUniformInset(const CGPath *a1, double a2)
{
  BoundingBoCGFloat x = CGPathGetBoundingBox(a1);
  CGFloat x = BoundingBox.origin.x;
  CGFloat y = BoundingBox.origin.y;
  CGFloat width = BoundingBox.size.width;
  CGFloat height = BoundingBox.size.height;
  CGFloat MidX = CGRectGetMidX(BoundingBox);
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  CGFloat MidY = CGRectGetMidY(v14);
  CGMutablePathRef Mutable = CGPathCreateMutable();
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = __AX_CGCreatePathPathWithUniformInset_block_invoke;
  v12[3] = &__block_descriptor_64_e33_v44__0i8__CGPoint_dd_12Q20Q28_B36l;
  *(CGFloat *)&v12[4] = MidX;
  *(CGFloat *)&v12[5] = MidY;
  *(double *)&v12[6] = a2;
  void v12[7] = Mutable;
  AX_CGPathEnumerateElementsUsingBlock(a1, v12);
  return Mutable;
}

double AX_CGPointInset(double a1, double a2, double a3, double a4, double a5)
{
  double v6 = a1;
  if (vabdd_f64(a1, a3) >= 2.22044605e-16)
  {
    double v7 = atan2(a2 - a4, a1 - a3);
    return v6 - a5 * __sincos_stret(v7).__cosval;
  }
  return v6;
}

id AX_CGPathGetDescription(const CGPath *a1)
{
  double v2 = [MEMORY[0x1E4F28E78] stringWithString:@"\n"];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __AX_CGPathGetDescription_block_invoke;
  v5[3] = &unk_1E55876F0;
  id v3 = v2;
  id v6 = v3;
  AX_CGPathEnumerateElementsUsingBlock(a1, v5);

  return v3;
}

uint64_t AX_CGPathCopyDataRepresentation(uint64_t result)
{
  if (result) {
    return MEMORY[0x1F40DB060]();
  }
  return result;
}

uint64_t AX_CGPathCreateWithDataRepresentation(uint64_t result)
{
  if (result) {
    return MEMORY[0x1F40DB098]();
  }
  return result;
}

void sub_18D35504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXAudioHDMIChannelLabelDescription(uint64_t a1)
{
  if ((int)a1 <= 32)
  {
    switch((int)a1)
    {
      case 1:
      case 5:
      case 10:
        goto LABEL_8;
      case 2:
      case 6:
      case 11:
        goto LABEL_9;
      case 3:
      case 9:
        goto LABEL_10;
      case 7:
        double v2 = @"ChannelLayout_LeftCenter";
        goto LABEL_16;
      case 8:
        double v2 = @"ChannelLayout_RightCenter";
        goto LABEL_16;
      default:
        goto LABEL_20;
    }
  }
  if ((int)a1 <= 43)
  {
    if (a1 == 33)
    {
      double v2 = @"ChannelLayout_RearLeft";
      goto LABEL_16;
    }
    if (a1 == 34)
    {
      double v2 = @"ChannelLayout_RearRight";
      goto LABEL_16;
    }
  }
  else
  {
    switch(a1)
    {
      case 0x2C:
LABEL_10:
        double v2 = @"ChannelLayout_Center";
        goto LABEL_16;
      case 0x12E:
LABEL_9:
        double v2 = @"ChannelLayout_Right";
        goto LABEL_16;
      case 0x12D:
LABEL_8:
        double v2 = @"ChannelLayout_Left";
LABEL_16:
        id v3 = AXLocalizedString(v2);
        goto LABEL_17;
    }
  }
LABEL_20:
  if (AXIsInternalInstall())
  {
    id v3 = objc_msgSend(NSString, "stringWithFormat:", @"%d - Unknown channel name - file a bug", a1);
  }
  else
  {
    id v3 = 0;
  }
LABEL_17:

  return v3;
}

void sub_18D356F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D3592DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AXAssertMainThreadCallback()
{
  id v0 = dispatch_get_current_queue();
  uint64_t v1 = (void *)MEMORY[0x1E4F14428];

  if (v0 != v1)
  {
    _AXAssert();
  }
}

void OUTLINED_FUNCTION_1_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id LocalizedString(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F28B50];
  id v2 = a1;
  id v3 = [v1 bundleForClass:objc_opt_class()];
  uint64_t v4 = [v3 localizedStringForKey:v2 value:&stru_1EDC3DEF8 table:@"TeachableMoments"];

  return v4;
}

id LocalizedItemString(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [NSString stringWithFormat:@"TeachableMomentItems-%@-%@", a2, @"iOS"];
  uint64_t v5 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  id v6 = [v5 localizedStringForKey:v3 value:0 table:v4];

  if (!v6 || [v6 isEqualToString:v3])
  {
    uint64_t v7 = AXLocStringKeyForModel(v3);

    uint64_t v8 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
    uint64_t v9 = [v8 localizedStringForKey:v7 value:0 table:v4];

    id v3 = (id)v7;
    id v6 = (void *)v9;
  }

  return v6;
}

uint64_t AXDeviceIsJ5XX()
{
  return MGIsDeviceOneOfType();
}

uint64_t AXDeviceHasTopTouchIDButton()
{
  if ((MGIsDeviceOneOfType() & 1) != 0
    || (MGIsDeviceOneOfType() & 1) != 0
    || (MGIsDeviceOneOfType() & 1) != 0
    || (MGIsDeviceOneOfType() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return MGIsDeviceOneOfType();
  }
}

uint64_t AXDeviceHasLongPress3dTouch()
{
  if (AXDeviceHasLongPress3dTouch_onceToken != -1) {
    dispatch_once(&AXDeviceHasLongPress3dTouch_onceToken, &__block_literal_global_28);
  }
  return AXDeviceHasLongPress3dTouch_HasLongPress3dTouch;
}

void __AXDeviceHasLongPress3dTouch_block_invoke()
{
  if ((MGGetBoolAnswer() & 1) != 0 || !MGGetBoolAnswer())
  {
    BOOL v0 = 0;
  }
  else
  {
    if (AXDeviceHasHomeButton_onceToken != -1) {
      dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_47);
    }
    BOOL v0 = AXDeviceHasHomeButton_hasHomeButton == 0;
  }
  AXDeviceHasLongPress3dTouch_HasLongPress3dTouch = v0;
}

uint64_t AXDeviceHasHomeButton()
{
  if (AXDeviceHasHomeButton_onceToken != -1) {
    dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_47);
  }
  return AXDeviceHasHomeButton_hasHomeButton;
}

uint64_t AXDeviceHasForcePress3dTouch()
{
  if (AXDeviceHasForcePress3dTouch_onceToken != -1) {
    dispatch_once(&AXDeviceHasForcePress3dTouch_onceToken, &__block_literal_global_43);
  }
  return AXDeviceHasForcePress3dTouch_HasForcePress3dTouch;
}

uint64_t __AXDeviceHasForcePress3dTouch_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AXDeviceHasForcePress3dTouch_HasForcePress3dTouch = result;
  return result;
}

uint64_t AXDeviceHas3DTouch()
{
  if (AXDeviceHas3DTouch_onceToken != -1) {
    dispatch_once(&AXDeviceHas3DTouch_onceToken, &__block_literal_global_45);
  }
  return AXDeviceHas3DTouch_Has3DTouch;
}

void __AXDeviceHas3DTouch_block_invoke()
{
  if (MGGetBoolAnswer())
  {
    BOOL v0 = 1;
  }
  else if (MGGetBoolAnswer())
  {
    if (AXDeviceHasHomeButton_onceToken != -1) {
      dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_47);
    }
    BOOL v0 = AXDeviceHasHomeButton_hasHomeButton == 0;
  }
  else
  {
    BOOL v0 = 0;
  }
  AXDeviceHas3DTouch_Has3DTouch = v0;
}

uint64_t AXDeviceHasTopButton()
{
  if (AXDeviceHasHomeButton_onceToken != -1) {
    dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_47);
  }
  if (AXDeviceHasHomeButton_hasHomeButton) {
    return 0;
  }

  return AXDeviceIsPad();
}

uint64_t AXDeviceHasSideButton()
{
  if (AXDeviceHasHomeButton_onceToken != -1) {
    dispatch_once(&AXDeviceHasHomeButton_onceToken, &__block_literal_global_47);
  }
  if (AXDeviceHasHomeButton_hasHomeButton || (AXDeviceHasTopButton() & 1) != 0) {
    return 0;
  }
  else {
    return AXDeviceIsRealityDevice() ^ 1;
  }
}

uint64_t __AXDeviceHasHomeButton_block_invoke()
{
  uint64_t result = MGGetSInt32Answer();
  AXDeviceHasHomeButton_hasHomeButton = result != 2;
  return result;
}

uint64_t AXDeviceHasReduceTransparency()
{
  return 1;
}

BOOL AXDeviceHasPearl()
{
  if (_AXSMossdeepEnabled()) {
    return 0;
  }
  if (AXDeviceHasPearl_onceToken != -1) {
    dispatch_once(&AXDeviceHasPearl_onceToken, &__block_literal_global_52);
  }
  return AXDeviceHasPearl_hasPearl != 0;
}

uint64_t __AXDeviceHasPearl_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AXDeviceHasPearl_hasPearl = result;
  return result;
}

uint64_t AXDeviceCanArmApplePay()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  BOOL v0 = (void *)getPKPassLibraryClass_softClass;
  uint64_t v7 = getPKPassLibraryClass_softClass;
  if (!getPKPassLibraryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getPKPassLibraryClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getPKPassLibraryClass_block_invoke((uint64_t)v3);
    BOOL v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return [v1 contactlessInterfaceCanBePresentedFromSource:0];
}

void sub_18D35C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsSecureDoubleClick()
{
  if (AXDeviceSupportsSecureDoubleClick_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsSecureDoubleClick_onceToken, &__block_literal_global_57_0);
  }
  return AXDeviceSupportsSecureDoubleClick_supportsSecureDoubleClick;
}

uint64_t __AXDeviceSupportsSecureDoubleClick_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    uint64_t result = MGGetBoolAnswer();
    char v1 = result ^ 1;
  }
  else
  {
    char v1 = 0;
  }
  AXDeviceSupportsSecureDoubleClick_supportsSecureDoubleClick = v1;
  return result;
}

BOOL AXDeviceIsSiriAvailable()
{
  if (!MGGetBoolAnswer()) {
    return 0;
  }
  BOOL v0 = [MEMORY[0x1E4F4E538] sharedPreferences];
  if ([v0 assistantIsEnabled]) {
    BOOL v1 = _AXSHomeButtonAssistant() != 1;
  }
  else {
    BOOL v1 = 0;
  }

  return v1;
}

BOOL AXDeviceIsSiriAvailableInClarity()
{
  BOOL v0 = [MEMORY[0x1E4F59078] sharedInstance];
  if ([v0 allowSiri]) {
    BOOL IsSiriAvailable = AXDeviceIsSiriAvailable();
  }
  else {
    BOOL IsSiriAvailable = 0;
  }

  return IsSiriAvailable;
}

uint64_t AXDeviceIsVoiceControlAvailable()
{
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    if (_AXSHomeButtonAssistant() == 1
      && ([MEMORY[0x1E4F59088] sharedSystemShellSwitcher],
          BOOL v1 = objc_claimAutoreleasedReturnValue(),
          int v2 = [v1 isClarityBoardEnabled],
          v1,
          (v2 & 1) == 0))
    {
      id v3 = +[AXSpringBoardServer server];
      int v4 = [v3 isScreenLockedWithPasscode:0];

      if (v4)
      {
        unsigned int v5 = v2 ^ 1;
        uint64_t v6 = [MEMORY[0x1E4F74230] sharedConnection];
        int v7 = [v6 effectiveBoolValueForSetting:*MEMORY[0x1E4F73EE0]];

        if (v7 == 2) {
          return 0;
        }
        else {
          return v5;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AXDeviceIsRingerSwitchAvailable()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceIsSOSAvailable()
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  BOOL v0 = (void *)getSOSManagerClass_softClass;
  uint64_t v7 = getSOSManagerClass_softClass;
  if (!getSOSManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSOSManagerClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getSOSManagerClass_block_invoke((uint64_t)v3);
    BOOL v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return [v1 deviceSupportsSOS];
}

void sub_18D35CBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsPencil()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsPhotosensitiveMitigation()
{
  if (AXDeviceSupportsPhotosensitiveMitigation_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsPhotosensitiveMitigation_onceToken, &__block_literal_global_81);
  }
  return AXDeviceSupportsPhotosensitiveMitigation_SupportsPSE;
}

void __AXDeviceSupportsPhotosensitiveMitigation_block_invoke()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl())
  {
    int v15 = -435113336;
    long long v14 = xmmword_18D4306A8;
    int v13 = 1839812531;
    long long v12 = xmmword_18D4306BC;
    int v11 = -1022451852;
    long long v10 = xmmword_18D4306D0;
    int v9 = 1729782187;
    long long v8 = xmmword_18D4306E4;
    int v7 = 996646949;
    long long v6 = xmmword_18D4306F8;
    int v5 = -563086000;
    long long v4 = xmmword_18D43070C;
    AXDeviceSupportsPhotosensitiveMitigation_SupportsPSE = MGIsDeviceOneOfType() ^ 1;
    BOOL v0 = AXLogCommon();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      id v1 = objc_msgSend(NSNumber, "numberWithBool:", AXDeviceSupportsPhotosensitiveMitigation_SupportsPSE, &v12, &v10, &v8, &v6, &v4, 0);
      *(_DWORD *)buf = 138412290;
      id v3 = v1;
      _os_log_impl(&dword_18D308000, v0, OS_LOG_TYPE_DEFAULT, "Allowing PSE Support: %@", buf, 0xCu);
    }
  }
}

uint64_t AXDeviceSupportsBootSound()
{
  if (_os_feature_enabled_impl())
  {
    return MGGetBoolAnswer();
  }
  else
  {
    id v1 = AXLogCommon();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v2 = 0;
      _os_log_impl(&dword_18D308000, v1, OS_LOG_TYPE_DEFAULT, "Boot chime - feature flag off", v2, 2u);
    }

    return 0;
  }
}

uint64_t AXDeviceSupportsHeadphoneNotifications()
{
  return AXDeviceIsPad() ^ 1;
}

void AXDeviceSizeMM()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(double *)&AXDeviceSizeMM__ResolvedValue_0 == 0.0 || *(double *)&AXDeviceSizeMM__ResolvedValue_1 == 0.0)
  {
    BOOL v0 = (void *)MGCopyAnswer();
    id v1 = [v0 objectForKeyedSubscript:@"main-screen-pitch"];
    [v1 doubleValue];
    double v3 = v2;

    long long v4 = [v0 objectForKeyedSubscript:@"main-screen-width"];
    [v4 doubleValue];
    double v6 = v5;

    int v7 = [v0 objectForKeyedSubscript:@"main-screen-height"];
    [v7 doubleValue];
    double v9 = v8;

    if (v3 <= 0.0 || v6 <= 0.0 || v9 <= 0.0)
    {
      long long v14 = AXLogDisplay();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        AXDeviceSizeMM_cold_1();
      }

      if (AXFallbackDeviceSizeMM_onceToken != -1) {
        dispatch_once(&AXFallbackDeviceSizeMM_onceToken, &__block_literal_global_270);
      }
      double v10 = *(double *)&AXFallbackDeviceSizeMM_DeviceDimensions_0;
      double v11 = *(double *)&AXFallbackDeviceSizeMM_DeviceDimensions_1;
      long long v12 = AXLogDisplay();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      int v15 = 134218240;
      double v16 = v10;
      __int16 v17 = 2048;
      double v18 = v11;
      int v13 = "Using (fallback!) physical device dimensions: [%.2fmm x %.2fmm]";
    }
    else
    {
      double v10 = v6 / v3 * 25.4;
      double v11 = v9 / v3 * 25.4;
      long long v12 = AXLogDisplay();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
LABEL_15:

        AXDeviceSizeMM__ResolvedValue_0 = *(void *)&v10;
        AXDeviceSizeMM__ResolvedValue_1 = *(void *)&v11;

        return;
      }
      int v15 = 134218240;
      double v16 = v10;
      __int16 v17 = 2048;
      double v18 = v11;
      int v13 = "Using physical device dimensions: [%.2fmm x %.2fmm]";
    }
    _os_log_impl(&dword_18D308000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v15, 0x16u);
    goto LABEL_15;
  }
}

id AXDeviceGetLocalizedShortModelName()
{
  if (AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelNameOnceToken != -1) {
    dispatch_once(&AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelNameOnceToken, &__block_literal_global_108);
  }
  BOOL v0 = (void *)AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelName;

  return v0;
}

void __AXDeviceGetLocalizedShortModelName_block_invoke()
{
  BOOL v0 = (void *)MGCopyAnswer();
  if (v0)
  {
    id v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFStringGetTypeID())
    {
      uint64_t v3 = [v1 copy];
      long long v4 = (void *)AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelName;
      AXDeviceGetLocalizedShortModelName__AXDeviceGetLocalizedShortModelName = v3;
    }
    CFRelease(v1);
  }
}

__CFString *AXkMobileKeyBagLockStatusNotificationID()
{
  return @"com.apple.mobile.keybagd.lock_status";
}

uint64_t AXDeviceSupportsSideApp()
{
  if (AXDeviceSupportsSideApp_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsSideApp_onceToken, &__block_literal_global_116);
  }
  return AXDeviceSupportsSideApp_DeviceSupportsMedusa;
}

void __AXDeviceSupportsSideApp_block_invoke()
{
  if (MGGetBoolAnswer()
    && (AXDeviceSupportsSideApp_DeviceSupportsMedusa = MGGetBoolAnswer(),
        (AXDeviceSupportsSideApp_DeviceSupportsMedusa & 1) != 0))
  {
    id v0 = [MEMORY[0x1E4F59088] sharedSystemShellSwitcher];
    AXDeviceSupportsSideApp_DeviceSupportsMedusa = [v0 isClarityBoardEnabled] ^ 1;
  }
  else
  {
    AXDeviceSupportsSideApp_DeviceSupportsMedusa = 0;
  }
}

BOOL AXDeviceIsUnlocked()
{
  int v0 = MKBGetDeviceLockState();
  return !v0 || v0 == 3;
}

BOOL AXDeviceHasSystemPasscode()
{
  return MKBGetDeviceLockState() != 3;
}

uint64_t AXCanQueryGraphicServicesFunctions()
{
  return 1;
}

void AXDeviceRegisterForDisplayUpdates(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 conformsToProtocol:&unk_1EDC90B00] && !_AXSMossdeepEnabled())
  {
    uint64_t v3 = AXLogDisplay();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      long long v4 = (objc_class *)objc_opt_class();
      double v5 = NSStringFromClass(v4);
      int v7 = 138412546;
      double v8 = v5;
      __int16 v9 = 2048;
      id v10 = v1;
      _os_log_impl(&dword_18D308000, v3, OS_LOG_TYPE_DEFAULT, "Did register for display updates: %@<%p>", (uint8_t *)&v7, 0x16u);
    }
    double v6 = _AXSharedDisplayManager();
    CFTypeID v2 = [v6 displayMonitor];

    [v2 addObserver:v1];
    goto LABEL_9;
  }
  if (!_AXSMossdeepEnabled())
  {
    CFTypeID v2 = AXLogDisplay();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
      AXDeviceRegisterForDisplayUpdates_cold_1();
    }
LABEL_9:
  }
}

id _AXSharedDisplayManager()
{
  if (_AXSharedDisplayManager_CanAccessDisplayManager)
  {
    id v0 = 0;
  }
  else
  {
    if (_AXSharedDisplayManager_onceToken != -1) {
      dispatch_once(&_AXSharedDisplayManager_onceToken, &__block_literal_global_280);
    }
    id v0 = (id)_AXSharedDisplayManager__Shared;
  }

  return v0;
}

void AXDeviceUnregisterForDisplayUpdates(void *a1)
{
  id v3 = a1;
  if ([v3 conformsToProtocol:&unk_1EDC90B00] && !_AXSMossdeepEnabled())
  {
    id v1 = _AXSharedDisplayManager();
    CFTypeID v2 = [v1 displayMonitor];

    [v2 removeObserver:v3];
  }
  else
  {
    _AXAssert();
  }
}

double AXDeviceGetMainScreenBounds()
{
  id v0 = _AXSharedDisplayManager();
  if ([v0 isInitialized])
  {
    id v1 = [v0 coreAnimationMainDisplay];
    [v1 referenceBounds];
    double v3 = v2;
  }
  else
  {
    double v3 = *MEMORY[0x1E4F1DB28];
  }

  return v3;
}

double AXDeviceGetMainScreenPixelBounds()
{
  id v0 = _AXSharedDisplayManager();
  if ([v0 isInitialized])
  {
    id v1 = [v0 coreAnimationMainDisplay];
    [v1 size];

    double v2 = (double *)MEMORY[0x1E4F1DAD8];
  }
  else
  {
    double v2 = (double *)MEMORY[0x1E4F1DB28];
  }
  double v3 = *v2;

  return v3;
}

double AXDeviceGetMainScreenScaleFactor()
{
  id v0 = _AXSharedDisplayManager();
  double v1 = 1.0;
  if ([v0 isInitialized])
  {
    double v2 = [v0 coreAnimationMainDisplay];
    [v2 scale];
    double v1 = v3;

    long long v4 = [v0 coreAnimationMainDisplay];
    [v4 size];
    double v6 = v5;
    double v8 = v7;

    if (v1 == 3.0 && v6 == 1280.0 && v8 == 2272.0) {
      double v1 = 4.0;
    }
  }

  return v1;
}

id AXDevicePrimeDisplayManager()
{
  return _AXSharedDisplayManager();
}

uint64_t AXDeviceSupportsBackTap()
{
  if (AXRuntimeCheck_HasANE() & 1) != 0 || (AXDeviceIsD22()) {
    int v0 = 1;
  }
  else {
    int v0 = MGIsDeviceOneOfType();
  }
  return AXDeviceIsPhone() & v0;
}

uint64_t AXDeviceSupportsHeadTracking()
{
  if (AXRuntimeCheck_HasANE() & 1) != 0 || (AXDeviceIsD22()) {
    return 1;
  }
  else {
    return MGIsDeviceOneOfType();
  }
}

uint64_t AXDeviceSupportsDetectionMode()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    if (AXDeviceSupportsDetectionMode_onceToken != -1) {
      dispatch_once(&AXDeviceSupportsDetectionMode_onceToken, &__block_literal_global_184);
    }
    return AXDeviceSupportsDetectionMode__AXDeviceSupportsDetectionMode != 0;
  }
  return result;
}

uint64_t __AXDeviceSupportsDetectionMode_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AXDeviceSupportsDetectionMode__AXDeviceSupportsDetectionMode = result;
  return result;
}

uint64_t AXDeviceSupportsHuman()
{
  if (AXDeviceSupportsHuman_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsHuman_onceToken, &__block_literal_global_189);
  }
  return AXDeviceSupportsHuman__AXDeviceSupportsHuman;
}

uint64_t __AXDeviceSupportsHuman_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  char v1 = 1;
  if (result > 111)
  {
    if (result > 159)
    {
      if ((unint64_t)(result - 192) <= 0x20 && ((1 << (result + 64)) & 0x100010001) != 0) {
        goto LABEL_6;
      }
      if (result == 176 || result == 160) {
        goto LABEL_5;
      }
    }
    else
    {
      switch(result)
      {
        case 112:
          goto LABEL_6;
        case 128:
LABEL_5:
          char v1 = 0;
LABEL_6:
          AXDeviceSupportsHuman__AXDeviceSupportsHuman = v1;
          return result;
        case 144:
          goto LABEL_6;
      }
    }
  }
  else if (result > 63)
  {
    if (result == 64) {
      goto LABEL_6;
    }
    if (result == 80 || result == 96) {
      goto LABEL_5;
    }
  }
  else if ((unint64_t)result <= 0x30 && ((1 << result) & 0x1000100070001) != 0)
  {
    goto LABEL_5;
  }
  return result;
}

uint64_t AXDeviceSupportsVoiceTriggers()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsVoicesRotor()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsAudiogramIngestion()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsComfortSounds()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsLaneChange()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    if (AXDeviceSupportsLaneChange_onceToken != -1) {
      dispatch_once(&AXDeviceSupportsLaneChange_onceToken, &__block_literal_global_198);
    }
    return AXDeviceSupportsLaneChange__AXDeviceSupportsLaneChange != 0;
  }
  return result;
}

uint64_t __AXDeviceSupportsLaneChange_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AXDeviceSupportsLaneChange__AXDeviceSupportsLaneChange = result;
  return result;
}

uint64_t AXDeviceSupportsWatchRemoteScreen()
{
  uint64_t v5 = 0;
  double v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v0 = (uint64_t (*)(void))getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr;
  double v8 = getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr;
  if (!getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr)
  {
    char v1 = (void *)AXWatchRemoteScreenServicesLibrary();
    v6[3] = (uint64_t)dlsym(v1, "AXWatchRemoteScreenIsTwiceFeatureOn");
    getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr = (_UNKNOWN *)v6[3];
    int v0 = (uint64_t (*)(void))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0) {
    AXDeviceSupportsWatchRemoteScreen_cold_1();
  }
  uint64_t result = v0();
  if (result)
  {
    uint64_t v5 = 0;
    double v6 = &v5;
    uint64_t v7 = 0x2020000000;
    double v3 = (uint64_t (*)(void))getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr;
    double v8 = getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr;
    if (!getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr)
    {
      long long v4 = (void *)AXWatchRemoteScreenServicesLibrary();
      v6[3] = (uint64_t)dlsym(v4, "AXWatchRemoteScreenIsPairedGizmoSupported");
      getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr = (_UNKNOWN *)v6[3];
      double v3 = (uint64_t (*)(void))v6[3];
    }
    _Block_object_dispose(&v5, 8);
    if (!v3) {
      AXDeviceSupportsWatchRemoteScreen_cold_2();
    }
    return v3();
  }
  return result;
}

void sub_18D35DD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsConcurrentHPLPMics()
{
  if (AXDeviceSupportsConcurrentHPLPMics_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsConcurrentHPLPMics_onceToken, &__block_literal_global_200);
  }
  return AXDeviceSupportsConcurrentHPLPMics__AXDeviceSupportsConcurrentHPLPMics;
}

uint64_t __AXDeviceSupportsConcurrentHPLPMics_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AXDeviceSupportsConcurrentHPLPMics__AXDeviceSupportsConcurrentHPLPMics = result;
  return result;
}

uint64_t AXDeviceSupportsHoverText()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    if (AXDeviceIsPhone())
    {
      return AXUICanShowPointerControlSettings();
    }
    else if (AXDeviceIsPad())
    {
      return 1;
    }
    else
    {
      return MEMORY[0x1F4105F00]();
    }
  }
  return result;
}

uint64_t AXDeviceSupportsHoverTextTyping()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    if (AXDeviceIsPad())
    {
      return 1;
    }
    else
    {
      return AXDeviceIsPhone();
    }
  }
  return result;
}

uint64_t AXDeviceHasJindo()
{
  if (AXProcessIsBackboard()) {
    return 0;
  }
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v1 = (uint64_t (*)(void))getSBUIIsSystemApertureEnabledSymbolLoc_ptr;
  double v6 = getSBUIIsSystemApertureEnabledSymbolLoc_ptr;
  if (!getSBUIIsSystemApertureEnabledSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke;
    void v2[3] = &unk_1E5585E30;
    v2[4] = &v3;
    __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke((uint64_t)v2);
    char v1 = (uint64_t (*)(void))v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v1) {
    AXDeviceHasJindo_cold_1();
  }
  return v1();
}

void sub_18D35DF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXDeviceSupportsPencilHover()
{
  if (AXDeviceSupportsPencilHover_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsPencilHover_onceToken, &__block_literal_global_207);
  }
  return AXDeviceSupportsPencilHover_isSupported;
}

void __AXDeviceSupportsPencilHover_block_invoke()
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = IOHIDEventSystemClientCreateWithType();
  if (v0)
  {
    char v1 = (__IOHIDEventSystemClient *)v0;
    v15[0] = @"PrimaryUsagePage";
    v15[1] = @"PrimaryUsage";
    v16[0] = &unk_1EDC624D8;
    v16[1] = &unk_1EDC624F0;
    double v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:2];
    IOHIDEventSystemClientSetMatching();
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    CFArrayRef v3 = IOHIDEventSystemClientCopyServices(v1);
    uint64_t v4 = [(__CFArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          double v8 = (void *)IOHIDServiceClientCopyProperty(*(IOHIDServiceClientRef *)(*((void *)&v10 + 1) + 8 * i), @"MaxHoverHeight");
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            objc_msgSend(v8, "doubleValue", (void)v10);
            AXDeviceSupportsPencilHover_isSupported = v9 > 0.0;

            goto LABEL_12;
          }
        }
        uint64_t v5 = [(__CFArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    CFRelease(v1);
  }
}

uint64_t AXDeviceSupportsSonification()
{
  return AXDeviceIsAudioAccessory() ^ 1;
}

uint64_t AXDeviceSupportsLiveCaptions()
{
  return 1;
}

uint64_t AXDeviceSupportsLiveSpeech()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsLiveSpeechCategories()
{
  return _os_feature_enabled_impl();
}

BOOL AXDeviceSupportsConfirmWith()
{
  double v2 = [MEMORY[0x1E4F74230] sharedConnection];
  char v3 = [v2 isPasscodeSet];
  if ((v3 & 1) == 0)
  {
    uint64_t v0 = [MEMORY[0x1E4F50548] manager];
    char v1 = [v0 identities:0];
    if (![v1 count])
    {
      BOOL v4 = 0;
LABEL_8:

      goto LABEL_9;
    }
  }
  if (AXDeviceSupportsSecureDoubleClick_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsSecureDoubleClick_onceToken, &__block_literal_global_57_0);
  }
  BOOL v4 = AXDeviceSupportsSecureDoubleClick_supportsSecureDoubleClick != 0;
  if ((v3 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_9:

  return v4;
}

uint64_t AXDeviceSupportsHaptics()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsReachability()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsVibration()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsVoiceBanking()
{
  uint64_t result = AXDeviceSupportsVoiceBankingSpeech();
  if (result)
  {
    return MEMORY[0x1F4105F38]();
  }
  return result;
}

uint64_t AXDeviceSupportsMotionCues()
{
  if (AXDeviceSupportsMotionCues_onceToken != -1) {
    dispatch_once(&AXDeviceSupportsMotionCues_onceToken, &__block_literal_global_231);
  }
  return AXDeviceSupportsMotionCues_DeviceSupportsMotionCues;
}

uint64_t __AXDeviceSupportsMotionCues_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    AXDeviceSupportsMotionCues_DeviceSupportsMotionCues = 1;
  }
  return result;
}

uint64_t AXDeviceSupportsVirtualTrackpad()
{
  uint64_t result = AXDeviceIsPad();
  if (result)
  {
    return _os_feature_enabled_impl();
  }
  return result;
}

uint64_t AXDeviceSupportsVoiceOverOnboarding()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsAirPodsHeadGestures()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    if (AXDeviceIsPhone() & 1) != 0 || (AXDeviceIsPad())
    {
      return 1;
    }
    else
    {
      return AXDeviceIsRealityDevice();
    }
  }
  return result;
}

uint64_t AXDeviceSupportsRealWorldDetection()
{
  return 1;
}

uint64_t AXDeviceSupportsMedina()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceIsSoundDetectionMedinaEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceSupportsKShotMedina()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

uint64_t AXDeviceIsKShotMedinaEnabled()
{
  return 0;
}

uint64_t AXDeviceIsAssistantWhileFaceDownEnabled()
{
  return 0;
}

uint64_t AXDeviceSetKShotPreboardEnabled()
{
  uint64_t v0 = AXLogCommon();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    AXDeviceSetKShotPreboardEnabled_cold_1();
  }

  return 0;
}

uint64_t AXDeviceSetAssistantWhileFaceDownEnabled()
{
  uint64_t v0 = AXLogCommon();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    AXDeviceSetAssistantWhileFaceDownEnabled_cold_1();
  }

  return 0;
}

BOOL AXDeviceHasFrontCameraPhysicallyMountedUpsideDown()
{
  return MGGetSInt32Answer() == 180;
}

uint64_t AXDeviceSupportsCameraButton()
{
  return MGGetBoolAnswer();
}

uint64_t AXDeviceSupportsGreyMatterSAE()
{
  return _os_feature_enabled_impl();
}

uint64_t AXDeviceIsVirtualMachine()
{
  if (AXDeviceIsVirtualMachine_onceToken != -1) {
    dispatch_once(&AXDeviceIsVirtualMachine_onceToken, &__block_literal_global_250);
  }
  return AXDeviceIsVirtualMachine_result;
}

uint64_t __AXDeviceIsVirtualMachine_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AXDeviceIsVirtualMachine_uint64_t result = result;
  return result;
}

BOOL AXDeviceIsPhysicalHardware()
{
  if (AXDeviceIsVirtualMachine_onceToken != -1) {
    dispatch_once(&AXDeviceIsVirtualMachine_onceToken, &__block_literal_global_250);
  }
  return AXDeviceIsVirtualMachine_result == 0;
}

uint64_t AXDeviceHasGreyMatterEnabled()
{
  uint64_t v3 = 2;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2050000000;
  uint64_t v0 = (void *)getGMAvailabilityWrapperClass_softClass;
  uint64_t v8 = getGMAvailabilityWrapperClass_softClass;
  if (!getGMAvailabilityWrapperClass_softClass)
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __getGMAvailabilityWrapperClass_block_invoke;
    v4[3] = &unk_1E5585E30;
    void v4[4] = &v5;
    __getGMAvailabilityWrapperClass_block_invoke((uint64_t)v4);
    uint64_t v0 = (void *)v6[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v5, 8);
  LODWORD(result) = [v1 shouldBeShownInSettingsReturningAvailabilityStatus:&v3];
  if (v3 == 2) {
    return 0;
  }
  else {
    return result;
  }
}

void sub_18D35E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPKPassLibraryClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!PassKitCoreLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __PassKitCoreLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587838;
    uint64_t v5 = 0;
    PassKitCoreLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!PassKitCoreLibraryCore_frameworkLibrary) {
    __getPKPassLibraryClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("PKPassLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getPKPassLibraryClass_block_invoke_cold_2();
  }
  getPKPassLibraryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PassKitCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PassKitCoreLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getSOSManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SOSLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __SOSLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587850;
    uint64_t v5 = 0;
    SOSLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!SOSLibraryCore_frameworkLibrary) {
    __getSOSManagerClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SOSManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSOSManagerClass_block_invoke_cold_2();
  }
  getSOSManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SOSLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SOSLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __AXFallbackDeviceSizeMM_block_invoke()
{
  switch(MGGetSInt32Answer())
  {
    case 1u:
    case 2u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4049000000000000;
      uint64_t v0 = 0x4052800000000000;
      goto LABEL_31;
    case 3u:
    case 4u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4068600000000000;
      uint64_t v0 = 0x4062600000000000;
      goto LABEL_31;
    case 5u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4049000000000000;
      uint64_t v0 = 0x4056800000000000;
      goto LABEL_31;
    case 6u:
    case 7u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4064000000000000;
      uint64_t v1 = 0x405E000000000000;
      goto LABEL_6;
    case 8u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x404D800000000000;
      uint64_t v0 = 0x405A400000000000;
      goto LABEL_31;
    case 9u:
    case 0xAu:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4051400000000000;
      uint64_t v1 = 0x405F000000000000;
LABEL_6:
      uint64_t v0 = v1;
      goto LABEL_31;
    case 0xBu:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4068800000000000;
      uint64_t v0 = 0x4070400000000000;
      goto LABEL_31;
    case 0xCu:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x403C333333333333;
      uint64_t v0 = 0x4041A66666666666;
      goto LABEL_31;
    case 0xDu:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x403899999999999ALL;
      uint64_t v0 = 0x403ECCCCCCCCCCCDLL;
      goto LABEL_31;
    case 0xEu:
      double v2 = (void *)&unk_1E91B3000;
      uint64_t v3 = 0x4065C00000000000;
      goto LABEL_20;
    case 0xFu:
    case 0x18u:
      goto LABEL_17;
    case 0x10u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x403B19999999999ALL;
      uint64_t v0 = 0x4040F33333333333;
      goto LABEL_31;
    case 0x11u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x403F000000000000;
      uint64_t v0 = 0x4043666666666666;
      goto LABEL_31;
    case 0x12u:
      if ((AXDeviceIsD32() & 1) != 0 || AXDeviceIsD42())
      {
LABEL_17:
        AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4051400000000000;
        uint64_t v0 = 0x4060E00000000000;
LABEL_31:
        AXFallbackDeviceSizeMM_DeviceDimensions_1 = v0;
        return;
      }
      if ((AXDeviceIsD33() & 1) != 0 || AXDeviceIsD43())
      {
        AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4052800000000000;
        uint64_t v0 = 0x4062C00000000000;
        goto LABEL_31;
      }
      return;
    case 0x13u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4051400000000000;
      uint64_t v0 = 0x4062200000000000;
      goto LABEL_31;
    case 0x14u:
      double v2 = &unk_1E91B3000;
      uint64_t v3 = 0x4064200000000000;
LABEL_20:
      v2[225] = v3;
      uint64_t v0 = 0x406CC00000000000;
      goto LABEL_31;
    case 0x16u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x404D000000000000;
      uint64_t v0 = 0x405F400000000000;
      goto LABEL_31;
    case 0x19u:
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = 0x4051C00000000000;
      uint64_t v0 = 0x4063400000000000;
      goto LABEL_31;
    default:
      if (audit_stringSOS_block_invoke_twiceToken != -1) {
        dispatch_once(&audit_stringSOS_block_invoke_twiceToken, &__block_literal_global_275);
      }
      uint64_t v0 = 0x4069666660000000;
      uint64_t v4 = 0x40630CCCC0000000;
      uint64_t v5 = MGGetProductType();
      if (v5 != 228444038 && v5 != 3645319985)
      {
        if (audit_stringSOS_block_invoke_onceToken2 != -1) {
          dispatch_once(&audit_stringSOS_block_invoke_onceToken2, &__block_literal_global_278_0);
        }
        uint64_t v0 = 0x4052800000000000;
        uint64_t v4 = 0x4049000000000000;
      }
      AXFallbackDeviceSizeMM_DeviceDimensions_0 = v4;
      goto LABEL_31;
  }
}

void __AXFallbackDeviceSizeMM_block_invoke_2()
{
  uint64_t v0 = AXLogDisplay();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    __AXFallbackDeviceSizeMM_block_invoke_2_cold_1();
  }
}

void __AXFallbackDeviceSizeMM_block_invoke_276()
{
  uint64_t v0 = AXLogDisplay();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    __AXFallbackDeviceSizeMM_block_invoke_276_cold_1();
  }
}

void sub_18D35EF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAXMDisplayManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AXMediaUtilitiesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __AXMediaUtilitiesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587868;
    uint64_t v5 = 0;
    AXMediaUtilitiesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!AXMediaUtilitiesLibraryCore_frameworkLibrary) {
    __getAXMDisplayManagerClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AXMDisplayManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getAXMDisplayManagerClass_block_invoke_cold_2();
  }
  getAXMDisplayManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AXMediaUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AXMediaUtilitiesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = (void *)AXWatchRemoteScreenServicesLibrary();
  uint64_t result = dlsym(v2, "AXWatchRemoteScreenIsTwiceFeatureOn");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXWatchRemoteScreenIsTwiceFeatureOnSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AXWatchRemoteScreenServicesLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!AXWatchRemoteScreenServicesLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    void v2[3] = __AXWatchRemoteScreenServicesLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5587880;
    uint64_t v4 = 0;
    AXWatchRemoteScreenServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = AXWatchRemoteScreenServicesLibraryCore_frameworkLibrary;
  if (!AXWatchRemoteScreenServicesLibraryCore_frameworkLibrary) {
    AXWatchRemoteScreenServicesLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __AXWatchRemoteScreenServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AXWatchRemoteScreenServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = (void *)AXWatchRemoteScreenServicesLibrary();
  uint64_t result = dlsym(v2, "AXWatchRemoteScreenIsPairedGizmoSupported");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXWatchRemoteScreenIsPairedGizmoSupportedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SpringBoardUIServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardUIServicesLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5587898;
    uint64_t v6 = 0;
    SpringBoardUIServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  double v2 = (void *)SpringBoardUIServicesLibraryCore_frameworkLibrary;
  if (!SpringBoardUIServicesLibraryCore_frameworkLibrary) {
    __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke_cold_1(v4);
  }
  if (v4[0]) {
    free(v4[0]);
  }
  uint64_t result = dlsym(v2, "SBUIIsSystemApertureEnabled");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBUIIsSystemApertureEnabledSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardUIServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardUIServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getGMAvailabilityWrapperClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!GenerativeModelsLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __GenerativeModelsLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E55878B0;
    uint64_t v5 = 0;
    GenerativeModelsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!GenerativeModelsLibraryCore_frameworkLibrary) {
    __getGMAvailabilityWrapperClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("GMAvailabilityWrapper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getGMAvailabilityWrapperClass_block_invoke_cold_2();
  }
  getGMAvailabilityWrapperClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __GenerativeModelsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  GenerativeModelsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void _btSessionEventCallback(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)MEMORY[0x192F9F1F0]();
  id v9 = a4;
  long long v10 = v9;
  if (a3 | a2)
  {
    if (a2 >= 4)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"%d", a2);
      long long v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      long long v11 = off_1E55879A8[(int)a2];
    }
    long long v13 = AXLogBluetooth();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      double v16 = v11;
      __int16 v17 = 1024;
      int v18 = a3;
      _os_log_impl(&dword_18D308000, v13, OS_LOG_TYPE_DEFAULT, "VOTBTM: session attach called back with %{public}@ (%d)", buf, 0x12u);
    }

    if ([v10 available])
    {
      [v10 postNotificationName:@"VOSBluetoothAvailabilityChangedNotification" object:*MEMORY[0x1E4F1CFC8]];
      [v10 _cleanup:1];
    }
    long long v14 = [NSNumber numberWithInt:1];
    [v10 attach:v14];
  }
  else
  {
    if ([v9 _setup:a1])
    {
      long long v12 = (void *)MEMORY[0x1E4F1CFD0];
    }
    else
    {
      [v10 _cleanup:0];
      long long v12 = (void *)MEMORY[0x1E4F1CFC8];
    }
    [v10 postNotificationName:@"VOSBluetoothAvailabilityChangedNotification" object:*v12];
  }
}

void _btLocalStatusEventCallback(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (void *)MEMORY[0x192F9F1F0]();
  id v7 = a4;
  switch(a2)
  {
    case 0:
      id v9 = AXLogBluetooth();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18D308000, v9, OS_LOG_TYPE_INFO, "Received BT_LOCAL_DEVICE_POWER_STATE_CHANGED event", buf, 2u);
      }

      [v7 _powerChanged];
      break;
    case 3:
      long long v11 = AXLogBluetooth();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v13 = 0;
        _os_log_impl(&dword_18D308000, v11, OS_LOG_TYPE_INFO, "received BT_LOCAL_DEVICE_CONNECTABILITY_CHANGED event", v13, 2u);
      }

      [v7 _connectabilityChanged];
      break;
    case 5:
      long long v10 = AXLogBluetooth();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v14 = 0;
        _os_log_impl(&dword_18D308000, v10, OS_LOG_TYPE_INFO, "received BT_LOCAL_DEVICE_CONNECTION_STATUS_CHANGED event", v14, 2u);
      }

      [v7 _connectedStatusChanged];
      break;
    case 6:
    case 7:
      uint64_t v8 = AXLogBluetooth();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v12 = 0;
        _os_log_impl(&dword_18D308000, v8, OS_LOG_TYPE_INFO, "received BT_LOCAL_DEVICE_DISCOVERY_STARTED/STOPPED event", v12, 2u);
      }

      [v7 _discoveryStateChanged];
      break;
    default:
      break;
  }
}

void _btDiscoveryStatusEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = (void *)MEMORY[0x192F9F1F0]();
  if (a2 == 1) {
    [a5 _restartScan];
  }
}

void _btDiscoveryEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)MEMORY[0x192F9F1F0]();
  id v9 = a5;
  long long v10 = [v9 addDeviceIfNeeded:a3];
  long long v11 = AXLogBluetooth();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 138543362;
    int v18 = v10;
    _os_log_impl(&dword_18D308000, v11, OS_LOG_TYPE_DEFAULT, "VOTBTM: Discovery event for device %{public}@", (uint8_t *)&v17, 0xCu);
  }

  if (v10)
  {
    if (a2 == 1)
    {
      long long v13 = AXLogBluetooth();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138543362;
        int v18 = v10;
        _os_log_impl(&dword_18D308000, v13, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_DISCOVERY_DEVICE_LOST event for device %{public}@", (uint8_t *)&v17, 0xCu);
      }

      long long v14 = (void *)v9[11];
      int v15 = [v10 address];
      [v14 setObject:0 forKeyedSubscript:v15];

      [v9 _removeDevice:v10];
      [v9 postNotificationName:@"VOSBluetoothDeviceRemovedNotification" object:v10];
      uint64_t v16 = v9[14];
      if (v16) {
        (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v10);
      }
    }
    else if (!a2)
    {
      long long v12 = AXLogBluetooth();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138543362;
        int v18 = v10;
        _os_log_impl(&dword_18D308000, v12, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_DISCOVERY_DEVICE_FOUND event for device %{public}@", (uint8_t *)&v17, 0xCu);
      }

      [v9 _addDiscoveredDevice:v10];
    }
  }
}

void pairingAgentStatusEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v9 = (void *)MEMORY[0x192F9F1F0]();
  id v10 = a5;
  long long v11 = v10;
  if (a3 == 4294901761)
  {
    long long v12 = 0;
  }
  else
  {
    long long v12 = [v10 addDeviceIfNeeded:a3];
    if (v12)
    {
      switch(a2)
      {
        case 0:
          long long v13 = AXLogBluetooth();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_17;
          }
          LOWORD(v1_Block_object_dispose(&STACK[0x240], 8) = 0;
          long long v14 = "VOTBTM: received BT_PAIRING_AGENT_STARTED event";
          goto LABEL_9;
        case 1:
          long long v13 = AXLogBluetooth();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_17;
          }
          LOWORD(v1_Block_object_dispose(&STACK[0x240], 8) = 0;
          long long v14 = "VOTBTM: received BT_PAIRING_AGENT_STOPPED event";
LABEL_9:
          int v15 = v13;
          uint32_t v16 = 2;
          goto LABEL_12;
        case 2:
          long long v13 = AXLogBluetooth();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_17;
          }
          int v18 = 138543362;
          uint64_t v19 = v12;
          long long v14 = "VOTBTM: received BT_PAIRING_ATTEMPT_STARTED event for device %{public}@";
          int v15 = v13;
          uint32_t v16 = 12;
LABEL_12:
          _os_log_impl(&dword_18D308000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v18, v16);
          goto LABEL_17;
        case 3:
          int v17 = AXLogBluetooth();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = 138543618;
            uint64_t v19 = v12;
            __int16 v20 = 1024;
            int v21 = a4;
            _os_log_impl(&dword_18D308000, v17, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_PAIRING_ATTEMPT_COMPLETE event for device %{public}@ with result %d", (uint8_t *)&v18, 0x12u);
          }

          if (a4)
          {
            long long v13 = [NSNumber numberWithInt:a4];
            [v11 postNotificationName:@"VOSBluetoothPairingPINResultFailedNotification" object:v12 error:v13];
LABEL_17:
          }
          else
          {
            [v11 postNotificationName:@"VOSBluetoothPairingPINResultSuccessNotification" object:v12];
          }
          break;
        default:
          break;
      }
    }
  }
}

void pairingAgentPincodeCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)MEMORY[0x192F9F1F0]();
  id v7 = a4;
  uint64_t v8 = [v7 addDeviceIfNeeded:a2];
  id v9 = AXLogBluetooth();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138543362;
    long long v11 = v8;
    _os_log_impl(&dword_18D308000, v9, OS_LOG_TYPE_DEFAULT, "VOTBTM: received pincode request for device %{public}@", (uint8_t *)&v10, 0xCu);
  }

  if (v8) {
    [v7 postNotificationName:@"VOSBluetoothPairingPINRequestNotification" object:v8];
  }
}

void pairingAgentUserConfirmationCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  *(void *)&v18[5] = *MEMORY[0x1E4F143B8];
  id v9 = (void *)MEMORY[0x192F9F1F0]();
  id v10 = a5;
  long long v11 = [v10 addDeviceIfNeeded:a2];
  if (v11)
  {
    uint64_t v12 = AXLogBluetooth();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a4)
    {
      if (v13)
      {
        *(_DWORD *)buf = 67109378;
        v18[0] = a3;
        LOWORD(v18[1]) = 2114;
        *(void *)((char *)&v18[1] + 2) = v11;
        _os_log_impl(&dword_18D308000, v12, OS_LOG_TYPE_DEFAULT, "VOTBTM: received user confirmation request (numeric comparison to %06u) for device %{public}@", buf, 0x12u);
      }

      long long v14 = (void *)MEMORY[0x1E4F1C9E8];
      int v15 = [NSNumber numberWithUnsignedInt:a3];
      uint32_t v16 = objc_msgSend(v14, "dictionaryWithObjectsAndKeys:", v11, @"device", v15, @"value", 0);
      [v10 postNotificationName:@"VOSBluetoothPairingUserNumericComparisionNotification" object:v16];
    }
    else
    {
      if (v13)
      {
        *(_DWORD *)buf = 138543362;
        *(void *)int v18 = v11;
        _os_log_impl(&dword_18D308000, v12, OS_LOG_TYPE_DEFAULT, "VOTBTM: received user confirmation request for device %{public}@", buf, 0xCu);
      }

      [v10 postNotificationName:@"VOSBluetoothPairingUserConfirmationNotification" object:v11];
    }
  }
}

void pairingAgentPassKeyDisplayCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v7 = (void *)MEMORY[0x192F9F1F0]();
  id v8 = a4;
  id v9 = [v8 addDeviceIfNeeded:a2];
  id v10 = AXLogBluetooth();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    int v15 = v9;
    _os_log_impl(&dword_18D308000, v10, OS_LOG_TYPE_DEFAULT, "VOTBTM: received passkey display request for device %{public}@", buf, 0xCu);
  }

  if (v9)
  {
    long long v11 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v12 = [NSNumber numberWithUnsignedInt:a3];
    BOOL v13 = objc_msgSend(v11, "dictionaryWithObjectsAndKeys:", v9, @"device", v12, @"value", 0);
    [v8 postNotificationName:@"VOSBluetoothPairingPassKeyDisplayNotification" object:v13];
  }
}

id VOSAddressForBTDevice()
{
  v2[31] = *MEMORY[0x1E4F143B8];
  if (BTDeviceGetAddressString())
  {
    uint64_t v0 = 0;
  }
  else
  {
    uint64_t v0 = [NSString stringWithUTF8String:v2];
  }

  return v0;
}

void _btServiceEventCallback(uint64_t a1, int a2, int a3, int a4, uint64_t a5, void *a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (void *)MEMORY[0x192F9F1F0]();
  BOOL v13 = a6;
  long long v14 = [v13 addDeviceIfNeeded:a1];
  if (a3 != 601)
  {
    int v15 = AXLogBluetooth();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = 67109888;
      *(_DWORD *)CGRect v40 = a2;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = a3;
      __int16 v41 = 1024;
      int v42 = a4;
      __int16 v43 = 1024;
      int v44 = a5;
      _os_log_impl(&dword_18D308000, v15, OS_LOG_TYPE_DEFAULT, "VOTBTM: _btServiceEventCallback: service = %u eventType = %d event = %d uint64_t result = %d", (uint8_t *)&v39, 0x1Au);
    }
  }
  if (a2 == -1 || (a2 & 0x40) == 0)
  {
    if (a3 != 2)
    {
      if (a3 == 1)
      {
        uint64_t v25 = [v14 connectedServicesCount];
        if (a4 != 12 || a5)
        {
          if (a4 == 2 && !a5) {
            goto LABEL_54;
          }
          CGRect v33 = AXLogBluetooth();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            int v39 = 134217984;
            *(void *)CGRect v40 = v25;
            _os_log_impl(&dword_18D308000, v33, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DISCONNECT event type with %lu currently connected services", (uint8_t *)&v39, 0xCu);
          }

          if (v25) {
            goto LABEL_52;
          }
          int v21 = @"VOSBluetoothDeviceDisconnectFailedNotification";
        }
        else
        {
          uint64_t v26 = AXLogBluetooth();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            int v39 = 134217984;
            *(void *)CGRect v40 = v25;
            _os_log_impl(&dword_18D308000, v26, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DISCONNECTION_RESULT event with %lu currently connected services", (uint8_t *)&v39, 0xCu);
          }

          if (v25) {
            goto LABEL_52;
          }
          int v21 = @"VOSBluetoothDeviceDisconnectSuccessNotification";
        }
      }
      else
      {
        if (a3) {
          goto LABEL_54;
        }
        uint64_t v16 = [v14 connectedServicesCount];
        if (([v14 isNameCached] & 1) == 0 && !BTDeviceGetName())
        {
          int v17 = (void *)v13[11];
          int v18 = [v14 address];
          [v17 setObject:v14 forKeyedSubscript:v18];

          [v13 postNotificationName:@"VOSBluetoothDeviceUpdatedNotification" object:v14];
          uint64_t v19 = v13[13];
          if (v19) {
            (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v14);
          }
        }
        if (a4 != 11 || a5)
        {
          BOOL v28 = a4 == 1 && a5 == 0;
          if (a4 && !v28)
          {
            double v29 = AXLogBluetooth();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              int v39 = 134217984;
              *(void *)CGRect v40 = v16;
              _os_log_impl(&dword_18D308000, v29, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_CONNECT event type with %lu currently connected services", (uint8_t *)&v39, 0xCu);
            }

            uint64_t v30 = AXLogBluetooth();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              int v39 = 67109120;
              *(_DWORD *)CGRect v40 = a5;
              _os_log_impl(&dword_18D308000, v30, OS_LOG_TYPE_DEFAULT, "VOTBTM: uint64_t result = %d", (uint8_t *)&v39, 8u);
            }

            CGRect v31 = [NSNumber numberWithInt:a5];
            [v13 postNotificationName:@"VOSBluetoothDeviceConnectFailedNotification" object:v14 error:v31];

            uint64_t v32 = [NSNumber numberWithInt:a5];
            [v13 postNotificationName:@"VOSBluetoothDeviceConnectFailedNotification" object:v14 error:v32];
          }
          goto LABEL_52;
        }
        __int16 v20 = AXLogBluetooth();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          int v39 = 134217984;
          *(void *)CGRect v40 = v16;
          _os_log_impl(&dword_18D308000, v20, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_CONNECTION_RESULT event with %lu currently connected services", (uint8_t *)&v39, 0xCu);
        }

        int v21 = @"VOSBluetoothDeviceConnectSuccessNotification";
      }
      [v13 postNotificationName:v21 object:v14];
LABEL_52:
      uint64_t v34 = v13[13];
      if (v34) {
        (*(void (**)(uint64_t, void *))(v34 + 16))(v34, v14);
      }
      goto LABEL_54;
    }
    if (a2 != -1)
    {
      if (a2 != 1) {
        goto LABEL_54;
      }
      uint64_t v22 = AXLogBluetooth();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v39) = 0;
        _os_log_impl(&dword_18D308000, v22, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DEPENDENT_EVENT event for BT_SERVICE_HANDSFREE", (uint8_t *)&v39, 2u);
      }

      if (a4 != 101 || a5)
      {
        if (a4 != 102 || a5) {
          goto LABEL_54;
        }
        CGFloat v23 = v13;
        uint64_t v24 = 0;
      }
      else
      {
        CGFloat v23 = v13;
        uint64_t v24 = 1;
      }
      [v23 setAudioConnected:v24];
      goto LABEL_54;
    }
    uint64_t v35 = AXLogBluetooth();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v39) = 0;
      _os_log_impl(&dword_18D308000, v35, OS_LOG_TYPE_DEFAULT, "VOTBTM: received BT_SERVICE_DEPENDENT_EVENT event for BT_SERVICE_ALL", (uint8_t *)&v39, 2u);
    }

    if (a4 == 701 && !a5)
    {
      [v14 clearName];
      [v13 postNotificationName:@"VOSBluetoothDeviceUpdatedNotification" object:v14];
      uint64_t v36 = v13[13];
      if (v36) {
        (*(void (**)(uint64_t, void *))(v36 + 16))(v36, v14);
      }
      uint64_t v37 = (void *)v13[11];
      CGRect v38 = [v14 address];
      [v37 setObject:v14 forKeyedSubscript:v38];
    }
  }
LABEL_54:
}

id AXLocStringKeyForModel(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    double v2 = NSString;
    if (AXDeviceIsRealityDevice())
    {
      long long v3 = @"VISION";
    }
    else if (AXDeviceIsPad())
    {
      long long v3 = @"IPAD";
    }
    else if (AXDeviceIsPod())
    {
      long long v3 = @"IPOD";
    }
    else
    {
      int IsWatch = AXDeviceIsWatch();
      long long v3 = @"IPHONE";
      if (IsWatch) {
        long long v3 = @"WATCH";
      }
    }
    long long v4 = [v2 stringWithFormat:@"%@_%@", v1, v3];
  }
  else
  {
    long long v4 = 0;
  }

  return v4;
}

id AXLocStringForDeviceVariant(void *a1, void *a2)
{
  id v3 = a1;
  long long v4 = a2;
  uint64_t v5 = AXLocStringKeyForHomeButton(v3);
  uint64_t v6 = AXLocStringKeyForModel(v5);
  id v7 = v4[2](v4, v6);
  id v8 = v7;
  if (v7 && ![v7 isEqualToString:v6]) {
    goto LABEL_13;
  }
  id v9 = v4[2](v4, v5);

  if (v9 && ![v9 isEqualToString:v5])
  {
    id v8 = v9;
    goto LABEL_13;
  }
  id v10 = AXLocStringKeyForModel(v3);

  id v8 = v4[2](v4, v10);

  if (v8 && ![v8 isEqualToString:v10])
  {
LABEL_11:
    uint64_t v6 = v10;
LABEL_13:
    id v12 = v8;
    id v10 = v6;
    long long v11 = v12;
    goto LABEL_14;
  }
  long long v11 = v4[2](v4, v3);

  if (v11 && (![v11 isEqualToString:v3] || _AXSMossdeepEnabled()))
  {
    id v8 = v11;
    goto LABEL_11;
  }
  id v12 = 0;
LABEL_14:

  return v12;
}

id AXLocStringKeyForHomeButton(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  int HasHomeButton = AXDeviceHasHomeButton();
  long long v4 = @"_NHB";
  if (HasHomeButton) {
    long long v4 = &stru_1EDC3DEF8;
  }
  uint64_t v5 = [v1 stringWithFormat:@"%@%@", v2, v4];

  return v5;
}

id AXLocStringKeyForExclusiveModel(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = v3;
  if (a1 == 2)
  {
    uint64_t v5 = NSString;
    int IsPod = AXDeviceIsPod();
    id v7 = &stru_1EDC3DEF8;
    id v8 = @"_IPOD";
  }
  else if (a1 == 1)
  {
    uint64_t v5 = NSString;
    int IsPod = AXDeviceIsPad();
    id v7 = &stru_1EDC3DEF8;
    id v8 = @"_IPAD";
  }
  else
  {
    if (a1)
    {
      id v9 = v3;
      goto LABEL_11;
    }
    uint64_t v5 = NSString;
    int IsPod = AXDeviceIsPhone();
    id v7 = &stru_1EDC3DEF8;
    id v8 = @"_IPHONE";
  }
  if (IsPod) {
    id v7 = v8;
  }
  id v9 = [v5 stringWithFormat:@"%@%@", v4, v7];
LABEL_11:
  id v10 = v9;

  return v10;
}

id AXLocStringKeyForHomeButtonAndExclusiveModel(uint64_t a1, void *a2)
{
  id v3 = AXLocStringKeyForHomeButton(a2);
  if (AXDeviceHasHomeButton())
  {
    id v4 = v3;
  }
  else
  {
    AXLocStringKeyForExclusiveModel(a1, v3);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v5 = v4;

  return v5;
}

id AXLocalizedStringWithLocale(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = AXUtilitiesFrameworkBundle();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v6 = _AXLocTables(1, 1);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v17;
LABEL_3:
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v17 != v9) {
        objc_enumerationMutation(v6);
      }
      long long v11 = AXNSLocalizedStringForLocale();
      id v12 = v11;
      if (v11)
      {
        if (!objc_msgSend(v11, "isEqualToString:", v3, v16)) {
          break;
        }
      }

      if (v8 == ++v10)
      {
        uint64_t v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v8) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    id v12 = 0;
  }

  if (v12) {
    BOOL v13 = v12;
  }
  else {
    BOOL v13 = v3;
  }
  id v14 = v13;

  return v14;
}

id _AXLocTables(uint64_t a1, uint64_t a2)
{
  id v4 = [MEMORY[0x1E4F1CA48] arrayWithObject:&stru_1EDC3DEF8];
  uint64_t v5 = v4;
  if (a1 == 2)
  {
    [v4 addObject:@"-D94"];
    uint64_t v6 = @"SwitchControl";
  }
  else if (a1 == 1)
  {
    uint64_t v6 = @"GeneralAccessibility";
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (a2 == 2)
  {
    uint64_t v6 = [(__CFString *)v6 stringByAppendingString:@"-iOS"];
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___AXLocTables_block_invoke;
  v10[3] = &unk_1E5587A48;
  long long v11 = v6;
  uint64_t v7 = v6;
  uint64_t v8 = [v5 axMapObjectsUsingBlock:v10];

  return v8;
}

id AXLocalizedString(void *a1)
{
  return AXLocalizedStringWithLocale(a1, 0);
}

id AXParameterizedLocalizedString(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  long long v11 = AXUtilitiesFrameworkBundle();
  id v12 = _AXLocTables(a1, 2);
  BOOL v13 = _AXLocTables(a1, 1);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v14 = [v12 arrayByAddingObjectsFromArray:v13];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v25;
LABEL_3:
    uint64_t v18 = 0;
    while (1)
    {
      if (*(void *)v25 != v17) {
        objc_enumerationMutation(v14);
      }
      long long v19 = [v11 localizedStringForKey:v10 value:&stru_1EDC3DEF8 table:*(void *)(*((void *)&v24 + 1) + 8 * v18)];
      __int16 v20 = v19;
      if (v19)
      {
        if (![v19 isEqualToString:v10]) {
          break;
        }
      }

      if (v16 == ++v18)
      {
        uint64_t v16 = [v14 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v16) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
    }

    if ([v20 isEqualToString:v10]) {
      goto LABEL_12;
    }
    id v21 = (id)[[NSString alloc] initWithFormat:v20 arguments:&a9];
  }
  else
  {
LABEL_10:

    __int16 v20 = 0;
LABEL_12:
    id v21 = v10;
  }
  uint64_t v22 = v21;

  return v22;
}

id AXAssistiveTouchScannerColorDescription(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1 >= 8)
  {
    BOOL v13 = [NSNumber numberWithInteger:a1];
    LOBYTE(v12) = 1;
    _AXLogWithFacility();

    uint64_t v9 = @"CURSOR_COLOR_BLUE";
  }
  else
  {
    uint64_t v9 = off_1E5587A80[a1];
  }
  id v10 = AXParameterizedLocalizedString(2, v9, v8, a4, a5, a6, a7, a8, v12);

  return v10;
}

id AXVoiceOverLocString(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id v10 = a1;
  long long v11 = VOTBundle();
  uint64_t v12 = AXNSLocalizedStringForLocale();

  return v12;
}

id AXVoiceOverRotorLocString(void *a1)
{
  id v1 = a1;
  if (!AXVoiceOverRotorLocString_VoiceOverBundle)
  {
    uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithPath:@"/System/Library/CoreServices/VoiceOverTouch.app"];
    id v3 = (void *)AXVoiceOverRotorLocString_VoiceOverBundle;
    AXVoiceOverRotorLocString_VoiceOverBundle = v2;
  }
  id v4 = v1;
  if ([v4 isEqualToString:*MEMORY[0x1E4F48758]])
  {
    uint64_t v5 = @"search.rotor.typing.mode";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48690]])
  {
    uint64_t v5 = @"search.rotor.slide.to.type";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48748]])
  {
    uint64_t v5 = @"search.rotor.textselection";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48678]])
  {
    uint64_t v5 = @"search.rotor.character";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48780]])
  {
    uint64_t v5 = @"search.rotor.word";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486D0]])
  {
    uint64_t v5 = @"search.rotor.line";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486A8]])
  {
    uint64_t v5 = @"search.rotor.header";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486D8]])
  {
    uint64_t v5 = @"search.rotor.link";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48698]])
  {
    uint64_t v5 = @"search.rotor.formelement";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48768]])
  {
    uint64_t v5 = @"search.rotor.visitedlink";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486F8]])
  {
    uint64_t v5 = @"search.rotor.nonvisitedlink";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486B8]])
  {
    uint64_t v5 = @"search.rotor.image";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48730]])
  {
    uint64_t v5 = @"search.rotor.statictext";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48750]])
  {
    uint64_t v5 = @"search.rotor.zoom";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48738]])
  {
    uint64_t v5 = @"search.rotor.table";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486E0]])
  {
    uint64_t v5 = @"search.rotor.list";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486C0]])
  {
    uint64_t v5 = @"search.rotor.landmark";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48638]])
  {
    uint64_t v5 = @"search.rotor.article";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48670]])
  {
    uint64_t v5 = @"search.rotor.button";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48740]])
  {
    uint64_t v5 = @"search.rotor.textfield";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48718]])
  {
    uint64_t v5 = @"search.rotor.searchfield";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48708]])
  {
    uint64_t v5 = @"search.rotor.radiobutton";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48680]])
  {
    uint64_t v5 = @"search.rotor.checkbox";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48710]])
  {
    uint64_t v5 = @"search.rotor.same";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48630]])
  {
    uint64_t v5 = @"search.rotor.allitems";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486B0]])
  {
    uint64_t v5 = @"search.rotor.hints";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48728]])
  {
    uint64_t v5 = @"search.rotor.rate";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48700]])
  {
    uint64_t v5 = @"search.rotor.punctuation";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48720]])
  {
    uint64_t v5 = @"search.rotor.sounds";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48778]])
  {
    uint64_t v5 = @"search.rotor.volume";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48640]])
  {
    uint64_t v5 = @"search.rotor.audio.ducking";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48648]])
  {
    uint64_t v5 = @"search.rotor.audio.ducking.amount";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486A0]])
  {
    uint64_t v5 = @"search.rotor.handwriting";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48658]])
  {
    uint64_t v5 = @"search.rotor.braille.gesture";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48688]])
  {
    uint64_t v5 = @"search.rotor.container";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48760]])
  {
    uint64_t v5 = @"search.rotor.vertical.navigation";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486F0]])
  {
    uint64_t v5 = @"search.rotor.navigation.direction";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486C8]])
  {
    uint64_t v5 = @"search.rotor.languages";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48770]])
  {
    uint64_t v5 = @"search.rotor.voices";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48668]])
  {
    uint64_t v5 = @"search.rotor.braille.languages";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48660]])
  {
    uint64_t v5 = @"search.rotor.braille.input.languages";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48650]])
  {
    uint64_t v5 = @"search.rotor.auto.advance.speed";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48628]])
  {
    uint64_t v5 = @"search.rotor.2dbraille.zoom";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48600]])
  {
    uint64_t v5 = @"search.rotor.2dbraille.intensity";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48610]])
  {
    uint64_t v5 = @"search.rotor.2dbraille.horizontal.pan";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48618]])
  {
    uint64_t v5 = @"search.rotor.2dbraille.vertical.pan";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48608]])
  {
    uint64_t v5 = @"search.rotor.2dbraille.invert";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48620]])
  {
    uint64_t v5 = @"search.rotor.2dbraille.text.mode";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F485E0]])
  {
    uint64_t v5 = @"search.rotor.audio.destination";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F485D8]])
  {
    uint64_t v5 = @"search.rotor.activities";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48788]])
  {
    uint64_t v5 = @"search.rotor.neural.vision";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48798]])
  {
    uint64_t v5 = @"search.rotor.toggle.live.regions";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F485F0]])
  {
    uint64_t v5 = @"search.rotor.exploration.mode";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F48790]])
  {
    uint64_t v5 = @"rotor.interaction.style";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F485F8]])
  {
    uint64_t v5 = @"search.rotor.image.descriptions";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F485E8]])
  {
    uint64_t v5 = @"search.rotor.detection.mode";
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F486E8]])
  {
    uint64_t v5 = @"search.rotor.misspelled.words";
  }
  else
  {
    uint64_t v5 = 0;
  }

  if (v5)
  {
    uint64_t v6 = [NSString stringWithFormat:@"%@.settings", v5];
    id v7 = [(id)AXVoiceOverRotorLocString_VoiceOverBundle localizedStringForKey:v6 value:0 table:@"VOTLocalizedStrings"];
    id v8 = v7;
    if (v7 && ![v7 isEqualToString:v6])
    {
      id v9 = v6;
    }
    else
    {
      id v9 = [NSString stringWithFormat:@"%@.visual", v5];

      id v10 = [(id)AXVoiceOverRotorLocString_VoiceOverBundle localizedStringForKey:v9 value:0 table:@"VOTLocalizedStrings"];

      if (v10 && ![v10 isEqualToString:v9])
      {
        id v8 = v10;
      }
      else
      {
        id v8 = [(id)AXVoiceOverRotorLocString_VoiceOverBundle localizedStringForKey:v5 value:0 table:@"VOTLocalizedStrings"];
      }
    }
  }
  else
  {
    id v8 = v4;
  }

  return v8;
}

id AXVoiceOverMediaDescriptionLocString(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a1 & 3) == 3) {
    id v9 = @"described.media.speech.and.braille";
  }
  else {
    id v9 = off_1E5587AC0[a1 & 3];
  }
  return AXParameterizedLocalizedString(1, v9, a3, a4, a5, a6, a7, a8, a9);
}

void AXVOLocalizedStringLoadPunctuationTable(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = VOTBundle();
  id v3 = AXLocalizationForLocale();

  if ([v3 length])
  {
    uint64_t v25 = (uint64_t)v1;
  }
  else
  {
    id v4 = [MEMORY[0x1E4F1CA20] currentLocale];
    uint64_t v5 = [v4 languageIdentifier];

    uint64_t v6 = VOTBundle();
    uint64_t v7 = AXLocalizationForLocale();

    id v3 = (void *)v7;
    uint64_t v25 = v5;
  }
  id v8 = VOTBundle();
  CFURLRef v9 = [v8 bundleURL];
  CFBundleRef v10 = CFBundleCreate(0, v9);

  long long v26 = v3;
  uint64_t v11 = CFBundleCopyLocalizedStringTableForLocalization();
  uint64_t v12 = (void *)__outputPunctuationTableStrings;
  __outputPunctuationTableStrings = v11;

  CFRelease(v10);
  uint64_t v13 = objc_opt_new();
  id v14 = (void *)__outputPunctuationTableStringsDict;
  __outputPunctuationTableStringsDict = v13;

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v15 = [(id)__outputPunctuationTableStrings allKeys];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v28 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        id v21 = objc_msgSend((id)__outputPunctuationTableStrings, "objectForKeyedSubscript:", v20, v25, v26);
        int v22 = [v21 isEqualToString:@"%#@unicodehex@"];

        if (v22)
        {
          CGFloat v23 = [(id)__outputPunctuationTableStrings objectForKeyedSubscript:v20];
          [(id)__outputPunctuationTableStringsDict setObject:v23 forKeyedSubscript:v20];
        }
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v27 objects:v31 count:16];
    }
    while (v17);
  }

  long long v24 = (void *)_outputPunctuationTableLocale;
  _outputPunctuationTableLocale = v25;
}

void AXVOLocalizedStringFreePunctuationTable()
{
  uint64_t v0 = (void *)__outputPunctuationTableStrings;
  __outputPunctuationTableStrings = 0;

  id v1 = (void *)__outputPunctuationTableStringsDict;
  __outputPunctuationTableStringsDict = 0;
}

id AXVOLocalizedStringForCharacter(uint64_t a1, void *a2)
{
  return AXVOLocalizedStringForCharacterWithPrefix(a1, a2, @"UnicodeHex.");
}

id AXVOLocalizedStringForCharacterWithPrefix(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_allocWithZone(NSString);
  if (WORD1(a1)) {
    uint64_t v8 = [v7 initWithFormat:@"%@%08x", v6, a1];
  }
  else {
    uint64_t v8 = [v7 initWithFormat:@"%@%04x", @"UnicodeHex.", a1];
  }
  CFURLRef v9 = (void *)v8;
  if (!v5)
  {
    CFBundleRef v10 = [MEMORY[0x1E4F1CA20] currentLocale];
    id v5 = [v10 languageIdentifier];
  }
  if ([v5 isEqualToString:_outputPunctuationTableLocale]
    && __outputPunctuationTableStrings
    && __outputPunctuationTableStringsDict
    && ([(id)__outputPunctuationTableStringsDict objectForKey:v9],
        uint64_t v11 = objc_claimAutoreleasedReturnValue(),
        v11,
        !v11))
  {
    uint64_t v15 = [(id)__outputPunctuationTableStrings objectForKey:v9];
  }
  else
  {
    uint64_t v12 = NSString;
    uint64_t v13 = VOTBundle();
    id v14 = AXNSLocalizedStringForLocale();
    uint64_t v15 = objc_msgSend(v12, "localizedStringWithFormat:", v14, 1);
  }
  if ([v15 isEqualToString:v9]) {
    id v16 = 0;
  }
  else {
    id v16 = v15;
  }

  return v16;
}

void AXLoadPunctuationTable(void *a1, uint64_t a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  id v7 = v6;
  uint64_t v8 = 1;
  if (a2 == 3)
  {
    uint64_t v8 = 2;
    CFURLRef v9 = &unk_1EDC631E0;
  }
  else
  {
    CFURLRef v9 = 0;
  }
  if (a2 == 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v8;
  }
  AXVOLocalizedStringLoadPunctuationTable(v6);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __AXLoadPunctuationTable_block_invoke;
  aBlock[3] = &unk_1E55879D0;
  id v24 = v7;
  id v34 = v24;
  id v11 = v5;
  id v35 = v11;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = [getSCRCPunctuationVerbosenessClass() verbosenessDictionaryForLevel:v10];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = __AXLoadPunctuationTable_block_invoke_2;
  v31[3] = &unk_1E55879F8;
  id v22 = v12;
  id v32 = v22;
  _AXEnumeratePunctuationDictionary(v13, v31);
  long long v29 = 0u;
  long long v30 = 0u;
  if (a2 == 2) {
    id v14 = &unk_1EDC631C8;
  }
  else {
    id v14 = v9;
  }
  long long v27 = 0uLL;
  long long v28 = 0uLL;
  uint64_t v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v36, 16, v22);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v28 != v17) {
          objc_enumerationMutation(v14);
        }
        long long v19 = objc_msgSend(getSCRCPunctuationVerbosenessClass(), "punctuationDictionaryForLevel:", (int)objc_msgSend(*(id *)(*((void *)&v27 + 1) + 8 * i), "intValue"));
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = __AXLoadPunctuationTable_block_invoke_114;
        v25[3] = &unk_1E5587A20;
        id v26 = v11;
        _AXEnumeratePunctuationDictionary(v19, v25);
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v27 objects:v36 count:16];
    }
    while (v16);
  }
  uint64_t v20 = (void *)__outputPunctuationTableStrings;
  __outputPunctuationTableStrings = 0;

  id v21 = (void *)__outputPunctuationTableStringsDict;
  __outputPunctuationTableStringsDict = 0;
}

void __AXLoadPunctuationTable_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v10 = a3;
  if ((unint64_t)(a2 - 1) > 2)
  {
    if (a2)
    {
      if (a2 == 4)
      {
        id v7 = *(void **)(a1 + 40);
        [v7 setObject:&stru_1EDC3DEF8 forIndex:a3];
      }
    }
    else
    {
      uint64_t v8 = *(void **)(a1 + 40);
      CFURLRef v9 = (void *)[[NSString alloc] initWithCharacters:&v10 length:1];
      [v8 setObject:v9 forIndex:v10];
    }
  }
  else
  {
    uint64_t v5 = AXVOLocalizedStringForCharacterWithPrefix(a3, *(void **)(a1 + 32), @"UnicodeHex.");
    if (v5 || (uint64_t v5 = (uint64_t)AXCopyUnicodeDescriptionStringForCharacter(a3)) != 0)
    {
      uint64_t v6 = [*(id *)(a1 + 40) setObject:v5 forIndex:a3];
    }
    else
    {
      uint64_t v6 = AXVOLocalizedStringForCharacterWithPrefix(a3, *(void **)(a1 + 32), @"UnicodeHex.Math.");
      if (!v6) {
        uint64_t v6 = _AXLogWithFacility();
      }
    }
    MEMORY[0x1F4181820](v6);
  }
}

__CFString *AXCopyUnicodeDescriptionStringForCharacter(UChar32 a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v8 = 0;
  if (u_charName(a1, U_EXTENDED_CHAR_NAME, buffer, 500, (UErrorCode *)&v8) < 1 || v8 != 0) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], buffer, 0x8000100u);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  v11.CFIndex location = 0;
  v11.length = 1;
  if (CFStringCompareWithOptions(v3, @"<", v11, 0))
  {
    MutableCopCGFloat y = CFStringCreateMutableCopy(v2, 0, v4);
    CFLocaleRef System = CFLocaleGetSystem();
    CFStringLowercase(MutableCopy, System);
  }
  else
  {
    MutableCopCGFloat y = 0;
  }
  CFRelease(v4);
  return MutableCopy;
}

id getSCRCPunctuationVerbosenessClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getSCRCPunctuationVerbosenessClass_softClass;
  uint64_t v7 = getSCRCPunctuationVerbosenessClass_softClass;
  if (!getSCRCPunctuationVerbosenessClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSCRCPunctuationVerbosenessClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getSCRCPunctuationVerbosenessClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D366F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _AXEnumeratePunctuationDictionary(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = objc_msgSend(v3, "allKeys", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        CFRange v11 = [v3 objectForKey:v10];
        uint64_t v12 = (int)[v11 intValue];

        unsigned __int16 v13 = strtol((const char *)[v10 UTF8String], 0, 16);
        v4[2](v4, v12, v13);
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }
}

void __AXLoadPunctuationTable_block_invoke_2(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)MEMORY[0x192F9F1F0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __AXLoadPunctuationTable_block_invoke_114(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2 == 1)
  {
    uint64_t v4 = a3;
    uint64_t v5 = [*(id *)(a1 + 32) objectForIndex:a3];

    if (!v5)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      [v6 setObject:&stru_1EDC3DEF8 forIndex:v4];
    }
  }
}

uint64_t AXUnicodeCodePointForCharacterString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  if ((unint64_t)(v2 - 1) < 2 || (_AXAssert(), v2))
  {
    LODWORD(v3) = 0;
    uint64_t v4 = 0;
    do
      uint64_t v3 = [v1 characterAtIndex:v4++] | (v3 << 16);
    while (v2 != v4);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id AXFormatAndListWithElements(void *a1)
{
  v27[500] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v26 = 0;
  uint64_t v2 = [MEMORY[0x1E4F1CA20] currentLocale];
  uint64_t v3 = [v2 localeIdentifier];

  id v4 = v3;
  [v4 UTF8String];
  uint64_t v5 = ulistfmt_open();
  if (v5)
  {
    id v25 = v4;
    unint64_t v7 = objc_msgSend(v1, "count", v5);
    v24[1] = v24;
    if (v7 >= 0x64) {
      uint64_t v9 = 100;
    }
    else {
      uint64_t v9 = v7;
    }
    MEMORY[0x1F4188790](v7, v8);
    CFRange v11 = (void **)((char *)v24 - v10);
    if ((unint64_t)(8 * v9) >= 0x200) {
      size_t v12 = 512;
    }
    else {
      size_t v12 = 8 * v9;
    }
    bzero(v11, v12);
    bzero(v11, 8 * v9);
    MEMORY[0x1F4188790](v13, v14);
    long long v16 = (char *)v24 - v15;
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v18 = [v1 objectAtIndexedSubscript:i];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          unint64_t v19 = [v18 length];
          if (v19 >= 0x1F4) {
            uint64_t v20 = 500;
          }
          else {
            uint64_t v20 = v19;
          }
          id v21 = malloc_type_malloc(2 * v20, 0x1000040BDFB0063uLL);
          objc_msgSend(v18, "getCharacters:range:", v21, 0, v20);
          v11[i] = v21;
          *(_DWORD *)&v16[4 * i] = v20;
        }
      }
    }
    int v22 = ulistfmt_format();
    ulistfmt_close();
    for (; v9; --v9)
    {
      if (*v11) {
        free(*v11);
      }
      ++v11;
    }
    if (v26 < 1)
    {
      uint64_t v6 = [NSString stringWithCharacters:v27 length:v22];
    }
    else
    {
      uint64_t v6 = 0;
    }
    id v4 = v25;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

id AXAirPodsLocalizedStringForKey(void *a1)
{
  id v1 = a1;
  uint64_t v2 = AXUtilitiesFrameworkBundle();
  uint64_t v3 = [v2 localizedStringForKey:v1 value:&stru_1EDC3DEF8 table:@"AXAirPods"];

  return v3;
}

id AXAirPodsB494LocalizedStringForKey(void *a1)
{
  id v1 = a1;
  uint64_t v2 = AXUtilitiesFrameworkBundle();
  uint64_t v3 = [v2 localizedStringForKey:v1 value:&stru_1EDC3DEF8 table:@"AXAirPods-B494"];

  return v3;
}

id AXAirPodsB698LocalizedStringForKey(void *a1)
{
  id v1 = a1;
  uint64_t v2 = AXUtilitiesFrameworkBundle();
  uint64_t v3 = [v2 localizedStringForKey:v1 value:&stru_1EDC3DEF8 table:@"AXAirPods-B698"];

  return v3;
}

id AXBeats463LocalizedStringForKey(void *a1)
{
  id v1 = a1;
  uint64_t v2 = AXUtilitiesFrameworkBundle();
  uint64_t v3 = [v2 localizedStringForKey:v1 value:&stru_1EDC3DEF8 table:@"AXBeats-B463"];

  return v3;
}

id AXWatchControlEltonLocalizedStringForKey(void *a1)
{
  id v1 = a1;
  uint64_t v2 = AXUtilitiesFrameworkBundle();
  uint64_t v3 = [v2 localizedStringForKey:v1 value:&stru_1EDC3DEF8 table:@"WatchControl-elton"];

  return v3;
}

id PSESettingsFooterText()
{
  return AXLocalizedStringWithLocale(@"PSE_FOOTER_TEXT", 0);
}

Class __getSCRCPunctuationVerbosenessClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!ScreenReaderCoreLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __ScreenReaderCoreLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5587A68;
    uint64_t v5 = 0;
    ScreenReaderCoreLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!ScreenReaderCoreLibraryCore_frameworkLibrary) {
    __getSCRCPunctuationVerbosenessClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SCRCPunctuationVerboseness");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSCRCPunctuationVerbosenessClass_block_invoke_cold_2();
  }
  getSCRCPunctuationVerbosenessClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ScreenReaderCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ScreenReaderCoreLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void sub_18D368FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D369C98(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t _ASUIEventFilterCallback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (SCATIsKeyboardKeyEvent())
  {
    if (IOHIDEventGetIntegerValue())
    {
      CFRetain(a4);
      AXPerformBlockOnMainThreadAfterDelay();
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (SCATIsGamepadKeyEvent() && (SCATIsATVRemoteButtonEvent() & 1) == 0)
  {
    if (+[AXGameControllerEvent axGameControllerKeyCodeForEvent:a4])
    {
      CFRetain(a4);
      AXPerformBlockOnMainThreadAfterDelay();
    }
    uint64_t v5 = 1;
  }
  if (AXIsInternalInstall() && SCATIsATVRemoteButtonSwitchCandidateEvent())
  {
    if (IOHIDEventGetIntegerValue())
    {
      CFRetain(a4);
      AXPerformBlockOnMainThreadAfterDelay();
    }
    return 1;
  }
  return v5;
}

void _ASUIDeviceMatchingCallback(void *a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  LOBYTE(v6) = 1;
  _AXLogWithFacility();
  if (objc_msgSend((id)IOHIDDeviceGetProperty(a4, @"IAPHIDAccessoryCategory"), "intValue", v6, @"Matched MFi device: %@", a4) == 7|| IOHIDDeviceConformsTo(a4, 1u, 0xAu))
  {
    if (IOHIDDeviceOpen(a4, 0)) {
      _AXLogWithFacility();
    }
    id context = a1;
    [context setDevice:a4];
    IOHIDDeviceRegisterInputValueCallback(a4, (IOHIDValueCallback)_ASUIInputValueCallback, context);
  }
  else
  {
    _AXLogWithFacility();
  }
}

uint64_t _ASUIInputValueCallback(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDValue *a4)
{
  uint64_t result = SCATIsMFIButtonDownValue(a4);
  if (result)
  {
    CFRetain(a4);
    return AXPerformBlockAsynchronouslyOnMainThread();
  }
  return result;
}

id _languageAndRegionNameForNonConformingCodes(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 isEqualToString:@"zh_CN-U-SD@sd=cnln"])
  {
    uint64_t v5 = @"Dongbei_CN";
LABEL_15:
    uint64_t v6 = AXLocalizedStringWithLocale(v5, v4);
    goto LABEL_16;
  }
  if ([v3 isEqualToString:@"zh_CN-U-SD@sd=cnsn"])
  {
    uint64_t v5 = @"Shaanxi_CN";
    goto LABEL_15;
  }
  if ([v3 isEqualToString:@"wuu_CN"])
  {
    uint64_t v5 = @"Shanghainese_CN";
    goto LABEL_15;
  }
  if ([v3 isEqualToString:@"zh_CN-U-SD@sd=cnsc"])
  {
    uint64_t v5 = @"Sichuanese_CN";
    goto LABEL_15;
  }
  if ([v3 isEqualToString:@"ca_ES-U-SD@sd=esvc"])
  {
    uint64_t v5 = @"Valencian_ES";
    goto LABEL_15;
  }
  if ([v3 isEqualToString:@"ar_001"])
  {
    uint64_t v5 = @"Arabic_WW";
    goto LABEL_15;
  }
  if ([v3 isEqualToString:@"en_GB-U-SD@sd=gbsct"])
  {
    uint64_t v5 = @"English_Scotland";
    goto LABEL_15;
  }
  uint64_t v6 = 0;
LABEL_16:

  return v6;
}

id _icuDisplayNameForLocale(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    id v8 = [v5 localeIdentifier];
    [v8 UTF8String];
    uint64_t v9 = uldn_openForContext();

    CFRange v11 = [MEMORY[0x1E4F1CA20] componentsFromLocaleIdentifier:v7];
    size_t v12 = (void *)*MEMORY[0x1E4F1C438];
    uint64_t v13 = [v11 objectForKey:*MEMORY[0x1E4F1C438]];
    uint64_t v14 = _icuDisplayName(v9, v12, v13);

    uint64_t v15 = _languageAndRegionNameForNonConformingCodes(v14, 0);

    if ([v6 isEqualToString:v12])
    {
      long long v16 = (void *)*MEMORY[0x1E4F1C400];
      long long v17 = [v11 objectForKey:*MEMORY[0x1E4F1C400]];
      uint64_t v18 = _icuDisplayName(v9, v16, v17);

      unint64_t v19 = (void *)v18;
      uint64_t v20 = (void *)*MEMORY[0x1E4F1C470];
      id v21 = [v11 objectForKey:*MEMORY[0x1E4F1C470]];
      CGRect v33 = _icuDisplayName(v9, v20, v21);

      int v22 = (void *)*MEMORY[0x1E4F1C498];
      CGFloat v23 = [v11 objectForKey:*MEMORY[0x1E4F1C498]];
      id v24 = _icuDisplayName(v9, v22, v23);

      id v25 = [MEMORY[0x1E4F1CA48] array];
      int v26 = v25;
      if (v19) {
        [v25 addObject:v19];
      }
      if (v33) {
        objc_msgSend(v26, "addObject:");
      }
      if (v24) {
        [v26 addObject:v24];
      }
      if ([v26 count])
      {
        long long v27 = NSString;
        [v26 componentsJoinedByString:@", "];
        id v32 = v19;
        long long v29 = v28 = v15;
        id v10 = [v27 stringWithFormat:@"%@ (%@)", v28, v29];

        uint64_t v15 = v28;
        unint64_t v19 = v32;
      }
      else
      {
        id v10 = v15;
      }
    }
    else if (![v6 isEqualToString:*MEMORY[0x1E4F1C430]] {
           || (_languageAndRegionNameForNonConformingCodes(v7, 0),
    }
               (id v10 = (id)objc_claimAutoreleasedReturnValue()) == 0))
    {
      _icuDisplayName(v9, v6, v7);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
    }
    uldn_close();

    if ([v10 isEqualToString:v7])
    {
      uint64_t v30 = [v5 displayNameForKey:v6 value:v7];

      id v10 = (id)v30;
    }
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id _icuDisplayName(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v7 = [v5 isEqualToString:*MEMORY[0x1E4F1C430]];
  id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E4FBA630];
  if (v7) {
    goto LABEL_6;
  }
  char v9 = [v5 isEqualToString:*MEMORY[0x1E4F1C438]];
  id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E4FBA628];
  if ((v9 & 1) != 0
    || (char v10 = [v5 isEqualToString:*MEMORY[0x1E4F1C400]],
        id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E4FBA638],
        (v10 & 1) != 0)
    || (char v11 = [v5 isEqualToString:*MEMORY[0x1E4F1C470]],
        id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E4FBA640],
        (v11 & 1) != 0)
    || (char v12 = [v5 isEqualToString:*MEMORY[0x1E4F1C498]],
        id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E4FBA648],
        (v12 & 1) != 0))
  {
LABEL_6:
    uint64_t v13 = v8;
    char v14 = 0;
    if (!v6)
    {
LABEL_16:
      id v25 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    if (([v5 isEqualToString:*MEMORY[0x1E4F1C3F0]] & 1) == 0)
    {
      long long v29 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v30 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *_icuDisplayName(const ULocaleDisplayNames *, NSString *__strong, NSString *__strong)");
      [v29 handleFailureInFunction:v30, @"AXDialectMap.m", 423, @"Unsupported key type %@", v5 file lineNumber description];
    }
    uint64_t v13 = 0;
    char v14 = 1;
    if (!v6) {
      goto LABEL_16;
    }
  }
  int v31 = 0;
  id v15 = v6;
  uint64_t v16 = [v15 UTF8String];
  if (v14) {
    int v17 = uldn_keyValueDisplayName();
  }
  else {
    int v17 = v13(a1, v16, 0, 0, &v31);
  }
  if (v31 != 15) {
    goto LABEL_16;
  }
  int v31 = 0;
  uint64_t v18 = [MEMORY[0x1E4F1CA58] dataWithLength:2 * v17];
  uint64_t v19 = [v15 UTF8String];
  id v20 = v18;
  uint64_t v21 = [v20 mutableBytes];
  unint64_t v22 = (unint64_t)(int)[v20 length] >> 1;
  if (v14) {
    int v23 = uldn_keyValueDisplayName();
  }
  else {
    int v23 = v13(a1, v19, v21, v22, &v31);
  }
  int v24 = v23;
  if (v31 > 0)
  {

    goto LABEL_16;
  }
  long long v27 = NSString;
  id v28 = v20;
  id v25 = objc_msgSend(v27, "stringWithCharacters:length:", objc_msgSend(v28, "bytes"), v24);

LABEL_17:

  return v25;
}

uint64_t AXLanguageIsSpeakableEmojiString()
{
  return MEMORY[0x1F4163FE0]();
}

void _updateLocaleForLanguagePreference(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = (void *)_AXSQuickSpeakCopyPreferredLocalesForLanguages();
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = objc_msgSend(v2, "langMaps", 0);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        char v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        char v10 = [v9 generalLanguageID];
        char v11 = [v3 objectForKey:v10];

        if (v11)
        {
          char v12 = [v9 dialectWithLocaleIdentifier:v11];
          if (v12) {
            [v9 setUserPreferredDialect:v12];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  [v2 updateCachedDialects];
}

void sub_18D370224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

uint64_t AXLanguageSupportedBySynthesizer(void *a1)
{
  id v1 = a1;
  if (AXLanguageSupportedBySynthesizer_registerOnce != -1) {
    dispatch_once(&AXLanguageSupportedBySynthesizer_registerOnce, &__block_literal_global_260);
  }
  if ([(id)AXLanguageSupportedBySynthesizer_Languages containsObject:v1])
  {
    uint64_t v2 = 1;
  }
  else
  {
    id v3 = (void *)AXLanguageSupportedBySynthesizer_Languages;
    id v4 = AXCLanguageConvertToCanonicalForm();
    uint64_t v2 = [v3 containsObject:v4];
  }
  return v2;
}

void __AXLanguageSupportedBySynthesizer_block_invoke()
{
  id v2 = [MEMORY[0x1E4FAF278] sharedInstance];
  uint64_t v0 = [v2 allAvailableLanguages];
  id v1 = (void *)AXLanguageSupportedBySynthesizer_Languages;
  AXLanguageSupportedBySynthesizer_Languages = v0;
}

id AXSystemLanguageReport()
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  v61 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v0 = [MEMORY[0x1E4F1CA20] systemLanguages];
  id v1 = AXSupportedVoiceOverLanguages();
  id v2 = [MEMORY[0x1E4F1CA80] set];
  id v3 = [MEMORY[0x1E4F1CA80] set];
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  id v4 = v0;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v90 objects:v101 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v91;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v91 != v7) {
          objc_enumerationMutation(v4);
        }
        char v9 = [*(id *)(*((void *)&v90 + 1) + 8 * i) axLanguageCode];
        [v2 axSafelyAddObject:v9];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v90 objects:v101 count:16];
    }
    while (v6);
  }

  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  id v10 = v1;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v86 objects:v100 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v87;
    do
    {
      for (uint64_t j = 0; j != v12; ++j)
      {
        if (*(void *)v87 != v13) {
          objc_enumerationMutation(v10);
        }
        long long v15 = [*(id *)(*((void *)&v86 + 1) + 8 * j) axLanguageCode];
        [v3 axSafelyAddObject:v15];
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v86 objects:v100 count:16];
    }
    while (v12);
  }

  long long v16 = [MEMORY[0x1E4F1CA80] set];
  int v17 = [MEMORY[0x1E4F1CA80] set];
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  id v18 = v4;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v82 objects:v99 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v83;
    do
    {
      for (uint64_t k = 0; k != v20; ++k)
      {
        if (*(void *)v83 != v21) {
          objc_enumerationMutation(v18);
        }
        int v23 = *(void **)(*((void *)&v82 + 1) + 8 * k);
        if ([v23 axIsRegionalLanguageCode]) {
          [v16 addObject:v23];
        }
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v82 objects:v99 count:16];
    }
    while (v20);
  }

  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id v24 = v10;
  uint64_t v25 = [v24 countByEnumeratingWithState:&v78 objects:v98 count:16];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)v79;
    do
    {
      for (uint64_t m = 0; m != v26; ++m)
      {
        if (*(void *)v79 != v27) {
          objc_enumerationMutation(v24);
        }
        long long v29 = *(void **)(*((void *)&v78 + 1) + 8 * m);
        if ([v29 axIsRegionalLanguageCode]) {
          [v17 addObject:v29];
        }
      }
      uint64_t v26 = [v24 countByEnumeratingWithState:&v78 objects:v98 count:16];
    }
    while (v26);
  }
  v59 = v24;

  uint64_t v30 = [MEMORY[0x1E4F1CA48] array];
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  id v31 = v2;
  uint64_t v32 = [v31 countByEnumeratingWithState:&v74 objects:v97 count:16];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = *(void *)v75;
    do
    {
      for (uint64_t n = 0; n != v33; ++n)
      {
        if (*(void *)v75 != v34) {
          objc_enumerationMutation(v31);
        }
        uint64_t v36 = _AXDictForLanguageData(*(void **)(*((void *)&v74 + 1) + 8 * n), 1, [v3 containsObject:*(void *)(*((void *)&v74 + 1) + 8 * n)]);
        [v30 addObject:v36];
      }
      uint64_t v33 = [v31 countByEnumeratingWithState:&v74 objects:v97 count:16];
    }
    while (v33);
  }
  v60 = v18;

  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v37 = v3;
  uint64_t v38 = [v37 countByEnumeratingWithState:&v70 objects:v96 count:16];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = *(void *)v71;
    do
    {
      for (iuint64_t i = 0; ii != v39; ++ii)
      {
        if (*(void *)v71 != v40) {
          objc_enumerationMutation(v37);
        }
        int v42 = *(void **)(*((void *)&v70 + 1) + 8 * ii);
        if (([v31 containsObject:v42] & 1) == 0)
        {
          __int16 v43 = _AXDictForLanguageData(v42, 0, 1);
          [v30 addObject:v43];
        }
      }
      uint64_t v39 = [v37 countByEnumeratingWithState:&v70 objects:v96 count:16];
    }
    while (v39);
  }

  [v61 setObject:v30 forKeyedSubscript:@"language"];
  int v44 = [MEMORY[0x1E4F1CA48] array];
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id v45 = v16;
  uint64_t v46 = [v45 countByEnumeratingWithState:&v66 objects:v95 count:16];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = *(void *)v67;
    do
    {
      for (juint64_t j = 0; jj != v47; ++jj)
      {
        if (*(void *)v67 != v48) {
          objc_enumerationMutation(v45);
        }
        int64x2_t v50 = _AXDictForLanguageData(*(void **)(*((void *)&v66 + 1) + 8 * jj), 1, [v17 containsObject:*(void *)(*((void *)&v66 + 1) + 8 * jj)]);
        [v44 addObject:v50];
      }
      uint64_t v47 = [v45 countByEnumeratingWithState:&v66 objects:v95 count:16];
    }
    while (v47);
  }

  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v51 = v17;
  uint64_t v52 = [v51 countByEnumeratingWithState:&v62 objects:v94 count:16];
  if (v52)
  {
    uint64_t v53 = v52;
    uint64_t v54 = *(void *)v63;
    do
    {
      for (kuint64_t k = 0; kk != v53; ++kk)
      {
        if (*(void *)v63 != v54) {
          objc_enumerationMutation(v51);
        }
        v56 = *(void **)(*((void *)&v62 + 1) + 8 * kk);
        if (([v45 containsObject:v56] & 1) == 0)
        {
          v57 = _AXDictForLanguageData(v56, 0, 1);
          [v44 addObject:v57];
        }
      }
      uint64_t v53 = [v51 countByEnumeratingWithState:&v62 objects:v94 count:16];
    }
    while (v53);
  }

  [v61 setObject:v44 forKeyedSubscript:@"locale"];

  return v61;
}

id AXSupportedVoiceOverLanguages()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = AXVoiceServicesTTSResourcesDirectory();
  id v1 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v21 = 0;
  id v2 = [v1 contentsOfDirectoryAtPath:v0 error:&v21];
  id v3 = v21;
  id v4 = v3;
  if (v3)
  {
    long long v14 = @"%@";
    id v15 = v3;
    LOBYTE(v13) = 1;
    _AXLogWithFacility();
    uint64_t v5 = (void *)MEMORY[0x1E4F1CBF0];
  }
  else
  {
    long long v16 = v0;
    uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v6 = v2;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v17 objects:v22 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v18 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if ([v11 rangeOfString:@"-"] != 0x7FFFFFFFFFFFFFFFLL
            && [v11 length] == 5)
          {
            [v5 addObject:v11];
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v17 objects:v22 count:16];
      }
      while (v8);
    }

    uint64_t v0 = v16;
  }
  objc_msgSend(v5, "addObjectsFromArray:", &unk_1EDC63258, v13, v14, v15);

  return v5;
}

id _AXDictForLanguageData(void *a1, uint64_t a2, uint64_t a3)
{
  void v20[5] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = +[AXLanguageManager nonlocalizedNameForLanguage:v5];
  uint64_t v7 = (void *)v6;
  if (v6) {
    uint64_t v8 = (__CFString *)v6;
  }
  else {
    uint64_t v8 = @"Unknown";
  }
  uint64_t v9 = v8;

  id v10 = [MEMORY[0x1E4F1CA20] autoupdatingCurrentLocale];
  uint64_t v11 = _icuDisplayNameForLocale(v10, (void *)*MEMORY[0x1E4F1C430], v5);
  uint64_t v12 = (void *)v11;
  if (v11) {
    uint64_t v13 = (__CFString *)v11;
  }
  else {
    uint64_t v13 = @"Unknown";
  }
  long long v14 = v13;

  v19[0] = @"languageID";
  v19[1] = @"localName";
  v20[0] = v5;
  v20[1] = v9;
  _OWORD v20[2] = v14;
  _OWORD v19[2] = @"currentName";
  v19[3] = @"supportedBySystem";
  id v15 = [NSNumber numberWithBool:a2];
  v20[3] = v15;
  v19[4] = @"supportedByVoiceOver";
  long long v16 = [NSNumber numberWithBool:a3];
  v20[4] = v16;
  long long v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:5];

  return v17;
}

void sub_18D3748E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18D3761C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void sub_18D37676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D377D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

BOOL AXEventTypeIsKeyboardKey(int a1)
{
  return a1 == 12 || (a1 & 0xFFFFFFFE) == 10;
}

BOOL AXEventTypeShouldLetBackboardProcess(int a1)
{
  return (a1 - 1029) < 2;
}

uint64_t AXEventTypeIsHomeButtonPress(int a1)
{
  return ((a1 - 1000) < 0x24) & (0xC00000003uLL >> (a1 + 24));
}

BOOL AXEventTypeIsLockButtonPress(int a1)
{
  return a1 == 1014 || (a1 & 0xFFFFFFFE) == 1010;
}

BOOL AXEventTypeIsVolumeButtonPress(int a1)
{
  return (a1 - 1006) < 4;
}

BOOL AXEventTypeIsRingerSwitchStateChange(int a1)
{
  return (a1 & 0xFFFFFFFE) == 1012;
}

BOOL AXEventTypeIsMotion(int a1)
{
  return a1 == 23;
}

BOOL AXEventTypeIsShake(int a1)
{
  return a1 == 1020;
}

BOOL AXEventTypeIsTouch(int a1)
{
  return a1 == 3001;
}

BOOL AXEventTypeIsOrientationChange(int a1)
{
  return a1 == 50;
}

void AXDenormalizePoint()
{
}

double AXNormalizePoint(int a1, double a2)
{
  AXDeviceGetMainScreenPixelBounds();
  double v5 = a2 / v4;
  if (a1) {
    return v5 * AXDeviceGetMainScreenScaleFactor();
  }
  return v5;
}

__CFString *AXDebugDescriptionForAXHandEventType(unsigned int a1)
{
  if (a1 > 0xC) {
    return 0;
  }
  else {
    return off_1E5587FB8[a1];
  }
}

void sub_18D37A454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AXEventKeyInfoSetSimulatedFNKeyDown(uint64_t result)
{
  _AXSimulatedEventKeyDowuint64_t n = result;
  return result;
}

void sub_18D37A9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 256), 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);
  _Block_object_dispose((const void *)(v41 - 160), 8);
  _Block_object_dispose((const void *)(v41 - 128), 8);
  _Block_object_dispose((const void *)(v41 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

Class __getUIKeyboardInputModeControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary_1)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __UIKitLibraryCore_block_invoke_1;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5588068;
    uint64_t v5 = 0;
    UIKitLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary_1) {
    __getUIKeyboardInputModeControllerClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("UIKeyboardInputModeController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getUIKeyboardInputModeControllerClass_block_invoke_cold_2();
  }
  getUIKeyboardInputModeControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIKitLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary_1 = result;
  return result;
}

uint64_t _ContextIDFromEvent(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = BKSHIDEventGetBaseAttributes();
  id v2 = v1;
  if (v1)
  {
    id v3 = [v1 token];
    uint64_t v4 = [v3 _identifierOfCAContext];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t _setInitialTouchCount(uint64_t a1, void *a2)
{
  uint64_t v3 = _initializeHIDStreamCountsIfNeeded_onceToken;
  id v4 = a2;
  if (v3 != -1) {
    dispatch_once(&_initializeHIDStreamCountsIfNeeded_onceToken, &__block_literal_global_854);
  }
  [(id)HIDStreamLock lock];
  uint64_t v5 = (void *)HIDStreamIdentifierTouchCounts;
  uint64_t v6 = [NSNumber numberWithInteger:a1];
  [v5 setObject:v6 forKey:v4];

  uint64_t v7 = (void *)HIDStreamLock;

  return [v7 unlock];
}

uint64_t AX_EventRepresentationContainsAnyTouchesInPath(void *a1, const CGPath *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = 0;
  if (v3 && a2)
  {
    if (CGPathIsEmpty(a2))
    {
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v5 = [v3 handInfo];
      uint64_t v6 = [v5 paths];
      unint64_t v7 = [v6 count];

      if (v7)
      {
        char v9 = 0;
        unint64_t v10 = 1;
        *(void *)&long long v8 = 134218498;
        long long v24 = v8;
        do
        {
          uint64_t v11 = objc_msgSend(v5, "paths", v24);
          uint64_t v12 = [v11 objectAtIndexedSubscript:v10 - 1];

          [v12 pathLocation];
          double v14 = v13;
          double v16 = v15;
          long long v17 = +[AXBackBoardServer server];
          objc_msgSend(v17, "convertFrame:fromContextId:", objc_msgSend(v12, "pathWindowContextID"), v14, v16, 0.0, 0.0);
          CGFloat v19 = v18;
          CGFloat v21 = v20;

          unint64_t v22 = GAXLogBlockedTouches();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v24;
            CGFloat v26 = v19;
            __int16 v27 = 2048;
            CGFloat v28 = v21;
            __int16 v29 = 2112;
            uint64_t v30 = a2;
            _os_log_debug_impl(&dword_18D308000, v22, OS_LOG_TYPE_DEBUG, "checking if touched point is contained in ignored path:\n touch (%f, %f), %@", buf, 0x20u);
          }

          v32.CGFloat x = v19;
          v32.CGFloat y = v21;
          if (CGPathContainsPoint(a2, 0, v32, 1)) {
            char v9 = 1;
          }

          uint64_t v4 = v9 & 1;
          if (v10 >= v7) {
            break;
          }
          ++v10;
        }
        while ((v9 & 1) == 0);
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
  }

  return v4;
}

BOOL AX_EventRepresentationContainsOnlyPathsForContextID(void *a1, int a2)
{
  id v3 = a1;
  if ([v3 type] == 3001)
  {
    uint64_t v4 = [v3 handInfo];
    uint64_t v5 = [v4 paths];
    unint64_t v6 = [v5 count];

    if (v6)
    {
      unint64_t v7 = 1;
      do
      {
        long long v8 = [v4 paths];
        char v9 = [v8 objectAtIndexedSubscript:v7 - 1];

        int v10 = [v9 pathWindowContextID];
        BOOL v11 = v10 == a2;

        if (v7 >= v6) {
          break;
        }
        ++v7;
      }
      while (v10 == a2);
    }
    else
    {
      BOOL v11 = 1;
    }
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

uint64_t ___initializeHIDStreamCountsIfNeeded_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v1 = (void *)HIDStreamIdentifierTouchCounts;
  HIDStreamIdentifierTouchCounts = (uint64_t)v0;

  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v3 = (void *)HIDStreamIdentifierPhasesForTouches;
  HIDStreamIdentifierPhasesForTouches = (uint64_t)v2;

  id v4 = objc_alloc_init(MEMORY[0x1E4F28E08]);
  uint64_t v5 = HIDStreamLock;
  HIDStreamLocuint64_t k = (uint64_t)v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

id _GetSubEventInfoFromDigitizerEventForPathEvent(uint64_t a1, uint64_t a2)
{
  id v2 = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (IOHIDEventGetType() == 11
      && IOHIDEventGetAttributeDataLength()
      && (uint64_t IntegerValue = IOHIDEventGetIntegerValue(),
          BKSHIDEventGetDigitizerAttributes(),
          (id v4 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v5 = v4;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      unint64_t v6 = objc_msgSend(v4, "pathAttributes", 0);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v14;
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v14 != v9) {
              objc_enumerationMutation(v6);
            }
            BOOL v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
            if ([v11 pathIndex] == IntegerValue)
            {
              id v2 = v11;
              goto LABEL_20;
            }
          }
          uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }
      id v2 = 0;
LABEL_20:
    }
    else
    {
      id v2 = 0;
    }
  }

  return v2;
}

void InitializeMaps(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  v476[509] = *MEMORY[0x1E4F143B8];
  v475[0] = @"LaserZoomPanningStyle";
  v475[1] = @"AssistiveTouchAlwaysShowMenu";
  v476[0] = &unk_1EDC62AF0;
  v476[1] = &unk_1EDC62B08;
  v475[2] = @"AssistiveTouchOpenMenuSwaggle";
  v475[3] = @"AssistiveTouchMouseBehavesLikeFinger";
  v476[2] = &unk_1EDC62B08;
  v476[3] = &unk_1EDC62B08;
  v475[4] = @"AssistiveTouchMouseKeys";
  v475[5] = @"AssistiveTouchMouseKeysOptionToggle";
  v476[4] = &unk_1EDC62AF0;
  v476[5] = &unk_1EDC62B08;
  v475[6] = @"AssistiveTouchMouseKeysUseMainKeyboardKeys";
  v475[7] = @"AssistiveTouchMouseKeysDelay";
  v476[6] = &unk_1EDC62B08;
  v476[7] = &unk_1EDC62B08;
  v475[8] = @"AssistiveTouchMouseAlwaysShowSoftwareKeyboard";
  v475[9] = @"AssistiveTouchMouseAllowAppleBluetoothDevicesPairing";
  v476[8] = &unk_1EDC62B08;
  v476[9] = &unk_1EDC62B08;
  v475[10] = @"AssistiveTouchMouseKeysMaxSpeed";
  v475[11] = @"AssistiveTouchVirtualTrackpadEnabled";
  v476[10] = &unk_1EDC62B08;
  v476[11] = &unk_1EDC62B08;
  v475[12] = @"AssistiveTouchVirtualTrackpadScrollToggle";
  v475[36] = @"AssistiveTouchScannerSelectTimeoutEnabled";
  v475[39] = kAXSAssistiveTouchScannerSpeechRatePreference;
  v475[55] = @"AssistiveTouchPointPickerDefaultsToRescanPreference";
  v475[84] = @"AXSAssistiveTouchMouseDwellControlMutatedMenuPreference";
  v476[118] = &unk_1EDC62B20;
  v476[119] = &unk_1EDC62B20;
  v476[120] = &unk_1EDC62B20;
  v476[121] = &unk_1EDC62B20;
  v476[122] = &unk_1EDC62B20;
  v476[123] = &unk_1EDC62B20;
  v476[124] = &unk_1EDC62B20;
  v476[125] = &unk_1EDC62B20;
  v476[126] = &unk_1EDC62B20;
  v476[127] = &unk_1EDC62B20;
  v476[128] = &unk_1EDC62B20;
  v476[129] = &unk_1EDC62B20;
  v476[130] = &unk_1EDC62B20;
  v476[131] = &unk_1EDC62B20;
  v476[132] = &unk_1EDC62B20;
  v476[133] = &unk_1EDC62B20;
  v476[134] = &unk_1EDC62B20;
  v476[135] = &unk_1EDC62B20;
  v476[136] = &unk_1EDC62B20;
  v476[137] = &unk_1EDC62B20;
  v476[138] = &unk_1EDC62B20;
  v475[139] = @"SCSwitchControlPointPickerHighPrecisionEnabled";
  v476[139] = &unk_1EDC62B20;
  v476[140] = &unk_1EDC62B20;
  v476[141] = &unk_1EDC62B20;
  v476[142] = &unk_1EDC62B20;
  v476[143] = &unk_1EDC62B20;
  v476[144] = &unk_1EDC62B20;
  v476[145] = &unk_1EDC62B20;
  v476[146] = &unk_1EDC62B20;
  v476[147] = &unk_1EDC62B20;
  v476[148] = &unk_1EDC62B20;
  v476[149] = &unk_1EDC62B20;
  v476[156] = &unk_1EDC62B38;
  v476[157] = &unk_1EDC62B38;
  v476[161] = &unk_1EDC62B50;
  v476[162] = &unk_1EDC62B50;
  v476[163] = &unk_1EDC62B50;
  v476[164] = &unk_1EDC62B50;
  v476[165] = &unk_1EDC62B50;
  v476[166] = &unk_1EDC62B50;
  v476[167] = &unk_1EDC62B50;
  v476[168] = &unk_1EDC62B50;
  v476[169] = &unk_1EDC62B50;
  v476[170] = &unk_1EDC62B50;
  v476[171] = &unk_1EDC62B50;
  v476[172] = &unk_1EDC62B50;
  v476[173] = &unk_1EDC62B50;
  v476[174] = &unk_1EDC62B50;
  v476[175] = &unk_1EDC62B50;
  v476[176] = &unk_1EDC62B50;
  v476[177] = &unk_1EDC62B50;
  v476[178] = &unk_1EDC62B50;
  v476[179] = &unk_1EDC62B50;
  v476[180] = &unk_1EDC62B50;
  v476[181] = &unk_1EDC62B50;
  v476[182] = &unk_1EDC62B50;
  v476[183] = &unk_1EDC62B50;
  v476[184] = &unk_1EDC62B50;
  v476[185] = &unk_1EDC62B50;
  v476[186] = &unk_1EDC62B50;
  v476[187] = &unk_1EDC62B50;
  v476[188] = &unk_1EDC62B50;
  v476[189] = &unk_1EDC62B50;
  v476[190] = &unk_1EDC62B50;
  v476[191] = &unk_1EDC62B50;
  v476[192] = &unk_1EDC62B50;
  v476[193] = &unk_1EDC62B50;
  v476[194] = &unk_1EDC62B50;
  v476[195] = &unk_1EDC62B50;
  v476[196] = &unk_1EDC62B50;
  v476[197] = &unk_1EDC62B50;
  v476[198] = &unk_1EDC62B50;
  v476[199] = &unk_1EDC62B50;
  v476[200] = &unk_1EDC62B50;
  v476[201] = &unk_1EDC62B50;
  v476[202] = &unk_1EDC62B68;
  v476[203] = &unk_1EDC62B68;
  v476[204] = &unk_1EDC62B68;
  v476[205] = &unk_1EDC62B68;
  v476[206] = &unk_1EDC62B68;
  v476[207] = &unk_1EDC62B68;
  v476[208] = &unk_1EDC62B68;
  v476[209] = &unk_1EDC62B68;
  v476[210] = &unk_1EDC62B68;
  v476[211] = &unk_1EDC62B68;
  v476[212] = &unk_1EDC62B68;
  v476[213] = &unk_1EDC62B68;
  v476[214] = &unk_1EDC62B68;
  v476[215] = &unk_1EDC62B68;
  v476[216] = &unk_1EDC62B68;
  v476[217] = &unk_1EDC62B68;
  v476[218] = &unk_1EDC62B68;
  v476[219] = &unk_1EDC62B68;
  v476[220] = &unk_1EDC62B68;
  v476[221] = &unk_1EDC62B68;
  v476[222] = &unk_1EDC62B68;
  v476[223] = &unk_1EDC62B68;
  v476[246] = &unk_1EDC62B80;
  v476[247] = &unk_1EDC62B80;
  v476[248] = &unk_1EDC62B80;
  v476[249] = &unk_1EDC62B80;
  v476[250] = &unk_1EDC62B80;
  v476[251] = &unk_1EDC62B80;
  v476[252] = &unk_1EDC62B80;
  v476[253] = &unk_1EDC62B80;
  v476[254] = &unk_1EDC62B80;
  v475[256] = @"SpeechCustomVoiceSettings";
  v475[259] = kAXSVoiceOverDelayUntilSpeakUnderTouch;
  v476[259] = &unk_1EDC62B98;
  v476[260] = &unk_1EDC62B80;
  v476[261] = &unk_1EDC62B80;
  v476[262] = &unk_1EDC62B80;
  v476[263] = &unk_1EDC62B80;
  v476[264] = &unk_1EDC62B80;
  v475[268] = *MEMORY[0x1E4FB93A0];
  v476[269] = &unk_1EDC62B98;
  v476[270] = &unk_1EDC62B98;
  v476[271] = &unk_1EDC62B98;
  v476[272] = &unk_1EDC62B98;
  v476[273] = &unk_1EDC62B98;
  v476[274] = &unk_1EDC62B98;
  v476[275] = &unk_1EDC62B98;
  v476[276] = &unk_1EDC62B98;
  v475[277] = kAXSVoiceOverPitchPreference;
  v476[278] = &unk_1EDC62B98;
  v476[279] = &unk_1EDC62B98;
  v476[280] = &unk_1EDC62B98;
  v476[281] = &unk_1EDC62B98;
  v476[282] = &unk_1EDC62B98;
  v476[283] = &unk_1EDC62B98;
  v476[284] = &unk_1EDC62B98;
  v476[285] = &unk_1EDC62B98;
  v476[286] = &unk_1EDC62B98;
  v476[287] = &unk_1EDC62B98;
  v476[288] = &unk_1EDC62B98;
  v476[289] = &unk_1EDC62B98;
  v476[290] = &unk_1EDC62B98;
  v476[292] = &unk_1EDC62B98;
  v476[293] = &unk_1EDC62B98;
  v476[294] = &unk_1EDC62B98;
  v476[295] = &unk_1EDC62B98;
  v476[296] = &unk_1EDC62B98;
  v476[297] = &unk_1EDC62B98;
  v476[298] = &unk_1EDC62B98;
  v476[299] = &unk_1EDC62B98;
  v476[300] = &unk_1EDC62B98;
  v476[301] = &unk_1EDC62B98;
  v476[302] = &unk_1EDC62B98;
  v475[303] = @"VoiceOverExploreFocusAffectsNativeFocus";
  v476[303] = &unk_1EDC62B98;
  v475[304] = @"VoiceOverTouchDescribedMedia";
  v475[308] = @"AXSVoiceOverTouchSingleLetterQuickNavPreference";
  v475[340] = kAXSVoiceOverDoubleTapInterval;
  v476[364] = &unk_1EDC62BB0;
  v476[375] = &unk_1EDC62AF0;
  v475[377] = @"AXSImageCaptionGenderStrategy";
  v476[377] = &unk_1EDC62B98;
  v476[378] = &unk_1EDC62B98;
  v475[379] = @"AXSImageCaptioningDisabledApps";
  v476[379] = &unk_1EDC62B98;
  v476[389] = &unk_1EDC62B50;
  v476[390] = &unk_1EDC62B50;
  v476[393] = &unk_1EDC62BC8;
  v476[394] = &unk_1EDC62BC8;
  v476[395] = &unk_1EDC62BC8;
  v476[396] = &unk_1EDC62BC8;
  v475[397] = @"GizmoApplicationAccessibilityEnabled";
  v475[398] = @"GizmoAutoSpeakComplicationsPreference";
  v475[403] = @"AXSUltronRunningStatus";
  v476[403] = &unk_1EDC62BE0;
  v475[404] = @"AXSUltronEnabled";
  v476[404] = &unk_1EDC62BE0;
  v475[405] = @"AXSEnabledSoundDetectionState";
  v476[405] = &unk_1EDC62BE0;
  v475[406] = @"AXSEnabledSoundDetectionTypes";
  v476[406] = &unk_1EDC62BE0;
  v475[407] = @"AXSSoundDetectionSnoozeDictionary";
  v476[407] = &unk_1EDC62BE0;
  v475[408] = @"AXSSoundDetectionSupportedTypes";
  v476[408] = &unk_1EDC62BE0;
  v475[409] = @"AXSSoundDetectionMedinaSupportForced";
  v476[409] = &unk_1EDC62BE0;
  v475[418] = kAXSCustomPronunciationSubstitutionsPreference;
  v476[428] = &unk_1EDC62BF8;
  v476[429] = &unk_1EDC62BF8;
  v476[430] = &unk_1EDC62BF8;
  v476[431] = &unk_1EDC62BF8;
  v476[432] = &unk_1EDC62BF8;
  v476[433] = &unk_1EDC62BF8;
  v476[434] = &unk_1EDC62BF8;
  v476[435] = &unk_1EDC62BF8;
  v476[436] = &unk_1EDC62BF8;
  v476[437] = &unk_1EDC62BF8;
  v476[438] = &unk_1EDC62BF8;
  v476[439] = &unk_1EDC62BF8;
  v476[440] = &unk_1EDC62BF8;
  v476[444] = &unk_1EDC62C10;
  v476[445] = &unk_1EDC62C10;
  v476[446] = &unk_1EDC62C10;
  v476[447] = &unk_1EDC62C10;
  v476[448] = &unk_1EDC62C10;
  v475[467] = @"voiceOverBSIUsageCount";
  v475[468] = @"brokenHomeButtonCount";
  v475[469] = @"guidedAccessUsageCount";
  v475[470] = @"magnifierUsageCount";
  v475[471] = @"guidedAccessTimeLimitsUsageCount";
  v475[472] = @"assistiveTouchUsageCount";
  v475[473] = @"tapticTimeUsageCount";
  v475[474] = @"characterVoicesUsageCount";
  v475[475] = @"hearingAidControlPanelCount";
  v475[476] = @"hearingAidHandOffCount";
  v475[477] = @"switchControlPlatformSwitchedCount";
  v475[478] = @"lastAssistiveTouchTimeResetCount";
  v475[479] = @"lastPlatformSwitchTimeResetCount";
  v475[480] = @"lastMagnifierResetCount";
  v475[481] = @"lastHearingAidHandoffTimeResetCount";
  v475[482] = @"lastHearingAidControlPanelTimeResetCount";
  v475[483] = @"lastTapticTimeResetCount";
  v475[484] = @"lastBrailleScreenInputTimeResetCount";
  v475[485] = @"lastGuidedAccessTimeLimitResetCount";
  v475[486] = @"lastGuidedAccessTimeResetCount";
  v475[487] = @"lastCharacterVoiceTimeResetCount";
  v475[488] = @"AXSLastSmartInvertColorsEnablement";
  v475[380] = @"AXSVoiceOverLiveRegionAppStatus";
  v476[467] = &unk_1EDC62B38;
  v476[468] = &unk_1EDC62B38;
  v476[469] = &unk_1EDC62B38;
  v476[470] = &unk_1EDC62B38;
  v476[471] = &unk_1EDC62B38;
  v476[472] = &unk_1EDC62B38;
  v476[473] = &unk_1EDC62B38;
  v476[474] = &unk_1EDC62B38;
  v476[475] = &unk_1EDC62B38;
  v476[476] = &unk_1EDC62B38;
  v476[477] = &unk_1EDC62B38;
  v476[478] = &unk_1EDC62B38;
  v476[479] = &unk_1EDC62B38;
  v476[480] = &unk_1EDC62B38;
  v476[481] = &unk_1EDC62B38;
  v476[482] = &unk_1EDC62B38;
  v476[483] = &unk_1EDC62B38;
  v476[484] = &unk_1EDC62B38;
  v476[485] = &unk_1EDC62B38;
  v476[486] = &unk_1EDC62B38;
  v476[487] = &unk_1EDC62B38;
  v476[488] = &unk_1EDC62B38;
  v476[489] = &unk_1EDC62B38;
  v475[492] = @"AssistiveTouchScannerPrefersCompactForLanguagePreference";
  v475[493] = @"AssistiveTouchScannerAlternativeVoiceForLanguagePreference";
  v475[494] = @"AXSAssistiveTouchDefaultDialectPreference";
  v475[495] = @"QuickSpeakPrefersCompactForLanguage";
  v475[496] = @"QuickSpeakAlternativeVoiceForLanguage";
  v475[378] = @"AXSVoiceOverNavigationStyle";
  v476[418] = &unk_1EDC62B80;
  v476[495] = &unk_1EDC62B80;
  v476[496] = &unk_1EDC62B80;
  v475[376] = @"kAXSVoiceOverInlineTextCompletionInsertionFeedbackPreference";
  v476[376] = &unk_1EDC62AF0;
  v476[372] = &unk_1EDC62AF0;
  v475[374] = @"VoiceOverTapticChimesSoundType";
  v476[374] = &unk_1EDC62AF0;
  v475[375] = @"kAXSVoiceOverInlineTextCompletionAppearanceFeedbackPreference";
  v475[373] = @"VoiceOverTapticChimesFrequencyEncoding";
  v476[373] = &unk_1EDC62AF0;
  v476[369] = &unk_1EDC62AF0;
  v475[371] = @"VoiceOverTapticChimesEnabled";
  v476[371] = &unk_1EDC62AF0;
  v475[372] = @"VoiceOverTapticChimesAvailability";
  v475[370] = @"VoiceOverTapticTimeSpeed";
  v476[370] = &unk_1EDC62AF0;
  v476[366] = &unk_1EDC62AF0;
  v475[368] = @"VoiceOverTapticTimeMode";
  v476[368] = &unk_1EDC62AF0;
  v475[369] = @"VoiceOverTapticTimeEncoding";
  v475[367] = @"TapToSpeakTimeAvailability";
  v476[367] = &unk_1EDC62AF0;
  v475[341] = @"VoiceOverBrailleDisplayAlertDuration";
  v476[362] = &unk_1EDC62B98;
  v476[365] = &unk_1EDC62AF0;
  v475[366] = @"TapToSpeakTimeEnabled";
  v475[364] = @"AXSVoiceOverSelectedActivityPreference";
  v475[365] = @"VoiceOverNavigationDirectionMode";
  v475[363] = @"AXSEnabledLiveRecognitionModes";
  v476[363] = &unk_1EDC62B98;
  v476[359] = &unk_1EDC62B98;
  v475[361] = @"AXSLiveRecognitionActive";
  v476[361] = &unk_1EDC62AF0;
  v475[362] = @"AXSLiveRecognitionOverlayOpen";
  v475[360] = @"VoiceOverDetectionModeItems";
  v476[360] = &unk_1EDC62B98;
  v476[356] = &unk_1EDC62B98;
  v475[358] = @"VoiceOverShouldDisallowUSBRestrictedMode";
  v476[358] = &unk_1EDC62B98;
  v475[359] = @"VoiceOverUserDidReadUSBRestrictedModeAlert";
  v475[357] = @"AXSVoiceOverTouchBraillePreferredTableIdentifiers";
  v476[357] = &unk_1EDC62B98;
  v476[353] = &unk_1EDC62B98;
  v475[355] = @"AXSVoiceOverTouchUpdateBrailleWithoutConnectedDisplay";
  v476[355] = &unk_1EDC62B98;
  v475[356] = @"AXSSVoiceOverShouldFocusEverywhere";
  v475[354] = @"VoiceOverSoundsAndHaptics";
  v476[354] = &unk_1EDC62B98;
  v476[350] = &unk_1EDC62B98;
  v475[352] = @"AXSVoiceOverNumberFeedback";
  v476[352] = &unk_1EDC62B98;
  v475[353] = @"AXSVoiceOverAutomaticButtonLabelsPreference";
  v475[351] = @"AXSVoiceOverSpeakDiscoveredTextFeedbackPreference";
  v476[351] = &unk_1EDC62B98;
  v476[347] = &unk_1EDC62B98;
  v475[349] = @"AXSVoiceOverTouchBrailleShowGeneralStatus";
  v476[349] = &unk_1EDC62B98;
  v475[350] = @"AXSVoiceOverShouldSpeakDiscoveredTextPreference";
  v475[348] = @"AXSVoiceOverTouchBrailleShowTextStyleStatus";
  v476[348] = &unk_1EDC62B98;
  v476[344] = &unk_1EDC62B98;
  v475[346] = @"AXSVoiceOverTouchShouldReverseDots";
  v476[346] = &unk_1EDC62B98;
  v475[347] = @"AXSVoiceOverTouchBrailleGestureControl";
  v475[345] = @"AXSVoiceOverKeyboardModifierChoicePreference";
  v476[345] = &unk_1EDC62B98;
  v476[341] = &unk_1EDC62B98;
  v475[343] = @"AXSVoiceOverBrailleAlertShowUntilDismissed";
  v476[343] = &unk_1EDC62B98;
  v475[344] = @"VoiceOverBrailleKeyDebounceTimeout";
  v475[342] = @"AXSVoiceOverBrailleAlertsEnabled";
  v476[342] = &unk_1EDC62B98;
  v476[304] = &unk_1EDC62B98;
  v475[309] = @"VoiceOverQuickNavAnnouncementFeedback";
  v476[339] = &unk_1EDC62B98;
  v476[340] = &unk_1EDC62B98;
  v476[336] = &unk_1EDC62B98;
  v475[338] = @"AXSVoiceOverLockScreenNotificationOutput";
  v476[338] = &unk_1EDC62B98;
  v475[339] = @"VoiceOverBrailleDisplays";
  v475[337] = @"AXSVoiceOverBannerNotificationOutput";
  v476[337] = &unk_1EDC62B98;
  v476[333] = &unk_1EDC62B98;
  v475[335] = @"kAXSVoiceOverBrailleFormatting";
  v476[335] = &unk_1EDC62B98;
  v475[336] = @"AXSVoiceOverRingerSwitchForNotificationsEnabled";
  v475[334] = @"VoiceOverBrailleAutoAdvanceDuration";
  v476[334] = &unk_1EDC62B98;
  v476[330] = &unk_1EDC62B98;
  v475[332] = @"VoiceOverBrailleWordWrapEnabled";
  v476[332] = &unk_1EDC62B98;
  v475[333] = @"VoiceOverBrailleDisplayDisconnectOnSleepPreference";
  v475[331] = @"VoiceOverBrailleGesturesDidPlayCalibrationHint";
  v476[331] = &unk_1EDC62B98;
  v476[327] = &unk_1EDC62B98;
  v475[329] = @"VoiceOverBrailleGesturesLockedOrientation";
  v476[329] = &unk_1EDC62B98;
  v475[330] = @"VoiceOverBrailleGesturesLockedTypingMode";
  v475[328] = @"VoiceOverBrailleGesturesShouldUseLockedConfiguration";
  v476[328] = &unk_1EDC62B98;
  v476[324] = &unk_1EDC62B98;
  v475[326] = @"AXSVoiceOverTouchBrailleDisplaySyncInputOutputTables";
  v476[326] = &unk_1EDC62B98;
  v475[327] = @"VoiceOverCaptionPanelEnabled";
  v475[325] = @"VoiceOverIgnoreTrackpad";
  v476[325] = &unk_1EDC62B98;
  v476[321] = &unk_1EDC62B98;
  v475[323] = @"VoiceOverTouchAudioDuckingEnabled";
  v476[323] = &unk_1EDC62B98;
  v475[324] = @"VoiceOverAudioFollowsHDMIAudio";
  v475[322] = @"AXSVoiceOverPunctuationGroupPreference";
  v476[322] = &unk_1EDC62B98;
  v476[318] = &unk_1EDC62B98;
  v475[320] = @"VoiceOverDiscoveredSensitiveContentFeedback";
  v476[320] = &unk_1EDC62B98;
  v475[321] = @"AXSVoiceOverPunctuationLevelPreference";
  v475[319] = @"AXSVoiceOverMoreContentOutputFeedbackPreference";
  v476[319] = &unk_1EDC62B98;
  v476[315] = &unk_1EDC62B98;
  v475[317] = @"AXSVoiceOverFirstInListOnlyActionsFeedback";
  v476[317] = &unk_1EDC62B98;
  v475[318] = @"AXSVoiceOverContainerOutputFeedbackPreference";
  v475[316] = @"AXSVoiceOverActionsFeedbackPreference";
  v476[316] = &unk_1EDC62B98;
  v476[312] = &unk_1EDC62B98;
  v475[314] = @"AXSVoiceOverDeletionFeedbackPreference";
  v476[314] = &unk_1EDC62B98;
  v475[315] = @"AXSVoiceOverLinkFeedbackPreference";
  v475[313] = @"AXSVoiceOverRotorSummaryFeedbackPreference";
  v476[313] = &unk_1EDC62B98;
  v476[309] = &unk_1EDC62B98;
  v475[311] = @"AXSVoiceOverSpeakTableHeadersPreference";
  v476[311] = &unk_1EDC62B98;
  v475[312] = @"AXSVoiceOverCapitalLetterFeedbackPreference";
  v475[310] = @"AXSVoiceOverSpeakTableColumnRowInformationPreference";
  v476[310] = &unk_1EDC62B98;
  v475[305] = @"QuickSettings";
  v476[305] = &unk_1EDC62B98;
  v476[307] = &unk_1EDC62B98;
  v476[308] = &unk_1EDC62B98;
  v475[306] = @"VoiceOverCustomCammndProfile";
  v476[306] = &unk_1EDC62B98;
  v475[307] = @"VoiceOverOutputToHearingAid";
  v476[380] = &unk_1EDC62B98;
  v476[381] = &unk_1EDC62B98;
  v476[382] = &unk_1EDC62B98;
  v476[383] = &unk_1EDC62B98;
  v476[384] = &unk_1EDC62B98;
  v476[387] = &unk_1EDC62B98;
  v476[388] = &unk_1EDC62B98;
  v476[497] = &unk_1EDC62B98;
  v476[498] = &unk_1EDC62B98;
  v476[499] = &unk_1EDC62B98;
  v475[302] = @"VoiceOverTouchTVPrefersFollowFocusNavigationStyle";
  v475[504] = @"AXSSoundActionsOverrideEnable";
  v475[301] = @"VoiceOverTouchTVInteractionMode";
  v475[299] = @"VoiceOverSpeakNonfocusableElementsAfterDelay";
  v475[300] = @"VoiceOverSilenceAnnouncements";
  v475[298] = @"VoiceOverShowGrade2AutoTranslate";
  v476[12] = &unk_1EDC62B08;
  v476[13] = &unk_1EDC62B08;
  v475[296] = @"VOActivationWorkaround";
  v475[297] = @"VoiceOverShowSWKeyboardWithBraille";
  v476[14] = &unk_1EDC62B08;
  v476[15] = &unk_1EDC62B08;
  v476[16] = &unk_1EDC62B08;
  v476[17] = &unk_1EDC62B08;
  v475[295] = @"VoiceOverLanguageSpeakingRate";
  v475[293] = @"voiceOverAlwaysUseNemethCodeForMathEnabled";
  v475[294] = @"com.apple.voiceovertouch.default.dialect";
  v476[18] = &unk_1EDC62B08;
  v476[19] = &unk_1EDC62B08;
  v476[291] = &unk_1EDC62AF0;
  v475[292] = @"voiceOverBrailleTableIdentifier";
  v475[290] = @"AXSVoiceOverRotorUpdatesWithElementPreference";
  v475[291] = @"VoiceOverSpeakActionConfirmationPreference";
  v475[289] = @"VoiceOverEditAppsActionEnabledPreference";
  v476[20] = &unk_1EDC62B08;
  v476[21] = &unk_1EDC62B08;
  v475[287] = @"SpeakNotificationInLockScreen";
  v475[288] = @"VoiceOverTouchRotorItemsPreference";
  v476[22] = &unk_1EDC62B08;
  v476[23] = &unk_1EDC62B08;
  v476[24] = &unk_1EDC62B08;
  v476[25] = &unk_1EDC62B08;
  v475[286] = @"SpeakingRateInRotorEnabled";
  v475[284] = @"VoiceOverVerbosityEmojiSuffixEnabledPreference";
  v475[285] = @"VoiceOverVerbosityEmojiFeedbackPreference";
  v475[283] = @"VoiceOverHapticIntensity";
  v476[26] = &unk_1EDC62B08;
  v476[27] = &unk_1EDC62B08;
  v475[281] = @"VoiceOverSoundVolume";
  v475[282] = @"VoiceOverAdjustSoundVolumeIndependently";
  v476[28] = &unk_1EDC62B08;
  v476[29] = &unk_1EDC62B08;
  v475[280] = @"AXSVoiceOverTurnOnBluetoothEnabled";
  v476[277] = &unk_1EDC62AF0;
  v475[278] = @"VoiceOverUseSoundEffects";
  v475[279] = @"VoiceOverHapticsEnabled";
  v476[30] = &unk_1EDC62B08;
  v476[31] = &unk_1EDC62B08;
  v476[32] = &unk_1EDC62B08;
  v476[33] = &unk_1EDC62B08;
  v475[276] = @"VoiceOverTouchHintsEnabled";
  v475[275] = @"VoiceOverTouchTypingBrailleGesturesFeedback";
  v476[34] = &unk_1EDC62B08;
  v476[35] = &unk_1EDC62B08;
  v475[273] = @"VoiceOverTouchTypingHardwareFeedback";
  v475[274] = @"VoiceOverTouchTypingFeedback";
  v476[36] = &unk_1EDC62B08;
  v476[37] = &unk_1EDC62B08;
  v476[40] = &unk_1EDC62B08;
  v476[41] = &unk_1EDC62B08;
  v475[272] = @"VoiceOverTouchPhoneticsEnabledPreference";
  v475[270] = @"VoiceOverTouchHelpModePreference";
  v475[271] = @"NavigateImagesPreference";
  v476[268] = &unk_1EDC62AF0;
  v475[269] = @"AXSVoiceOverSpeaksOverTelephoneCalls";
  v476[266] = &unk_1EDC62AF0;
  v475[267] = @"VoiceOverHandwritingWasNativeAutocorrectEnabled";
  v476[267] = &unk_1EDC62AF0;
  v476[42] = &unk_1EDC62B08;
  v476[43] = &unk_1EDC62B08;
  v475[265] = @"AXSTeachableMomentsNotificationSeen";
  v476[265] = &unk_1EDC62AF0;
  v475[266] = @"AXSTeachableMomentsDelayBeforeSending";
  v475[264] = @"SpokenContentShouldUseLanguageDetection";
  v476[44] = &unk_1EDC62B08;
  v476[45] = &unk_1EDC62B08;
  v475[263] = @"SpokenContentDefaultFallbackLanguage";
  v475[260] = @"QuickSpeakNubbitNormalizedPosition";
  v475[261] = @"QuickSpeakSentenceHighlight";
  v475[262] = @"SiriAutoUpdateListInitializedPreference";
  v476[46] = &unk_1EDC62B08;
  v476[47] = &unk_1EDC62B08;
  v475[258] = @"VisionEngineCaptureDiagnosticsToDisk";
  v476[258] = &unk_1EDC62AF0;
  v476[48] = &unk_1EDC62B08;
  v476[49] = &unk_1EDC62B08;
  v476[256] = &unk_1EDC62AF0;
  v475[257] = @"UserDidSelectVoiceForLanguage";
  v476[257] = &unk_1EDC62AF0;
  v476[50] = &unk_1EDC62B08;
  v476[51] = &unk_1EDC62B08;
  v475[255] = @"SpeechVoiceIdentifierForLanguage";
  v476[255] = &unk_1EDC62AF0;
  v475[252] = @"AXSQuickSpeakSentenceHighlightColorPreference";
  v475[254] = @"QuickSpeakVolume";
  v475[253] = @"QuickSpeakUnderlineSentence";
  v476[52] = &unk_1EDC62B08;
  v476[53] = &unk_1EDC62B08;
  v475[250] = @"QuickSpeakHighlightChoice";
  v475[251] = @"AXSQuickSpeakWordHighlightColorPreference";
  v476[54] = &unk_1EDC62B08;
  v476[55] = &unk_1EDC62B08;
  v476[56] = &unk_1EDC62B08;
  v476[57] = &unk_1EDC62B08;
  v475[249] = @"SpeechControllerDoubleTapAction";
  v475[225] = @"InternalLoggingColorThemePreference";
  v475[248] = @"SpeechControllerLongPressAction";
  v475[245] = @"AXSAudioHardwareChannelLayoutsPreference";
  v475[247] = @"SpeechControllerIdleOpacity";
  v476[245] = &unk_1EDC62AF0;
  v475[246] = @"ShowSpeechController";
  v475[242] = @"AXSInternalGuidedAccessDisallowDirectInactiveToActiveTransition";
  v476[243] = &unk_1EDC62AF0;
  v475[244] = @"AXSInternalGuidedAccessEnableExperimentalUI";
  v476[244] = &unk_1EDC62AF0;
  v476[242] = &unk_1EDC62AF0;
  v475[243] = @"AXSInternalGuidedAccessOverrideTimeRestrictionDuration";
  v475[239] = @"WordFeedbackEnabled";
  v476[240] = &unk_1EDC62AF0;
  v475[241] = @"InternalEnableHearingAidReporter";
  v476[241] = &unk_1EDC62AF0;
  v476[239] = &unk_1EDC62AF0;
  v475[240] = @"InternalSkipHearingAidMFiAuth";
  v475[236] = @"PhoneticFeedbackEnabled";
  v476[237] = &unk_1EDC62AF0;
  v475[238] = @"QuickTypeWordFeedback";
  v476[238] = &unk_1EDC62AF0;
  v476[236] = &unk_1EDC62AF0;
  v475[237] = @"CharacterFeedbackDelayPreference";
  v475[233] = @"SpeakCorrectionsEnabled";
  v476[234] = &unk_1EDC62AF0;
  v475[235] = @"LetterFeedbackEnabled";
  v476[235] = &unk_1EDC62AF0;
  v476[233] = &unk_1EDC62AF0;
  v475[234] = @"AXSTripleClickUserOrderedPreference";
  v475[230] = @"LogAXNotificationPosting";
  v476[231] = &unk_1EDC62AF0;
  v475[232] = @"shouldPerformValidationsAtRuntime";
  v476[232] = &unk_1EDC62AF0;
  v476[230] = &unk_1EDC62AF0;
  v475[231] = @"UseNewAXBundleLoader";
  v475[228] = @"IgnoreAXAsserts";
  v476[228] = &unk_1EDC62AF0;
  v475[229] = @"IgnoreAXServerEntitlements";
  v476[229] = &unk_1EDC62AF0;
  v476[225] = &unk_1EDC62AF0;
  v476[226] = &unk_1EDC62AF0;
  v475[227] = @"IncludeBacktraceInLogs";
  v476[227] = &unk_1EDC62AF0;
  v475[226] = @"ValidateSecondPartyApps";
  v476[58] = &unk_1EDC62B08;
  v476[59] = &unk_1EDC62B08;
  v475[222] = @"GAXGlobalProfileLastActivationDate";
  v475[224] = @"kAXSupportsAdvancedDisplayFiltersPreference";
  v476[224] = &unk_1EDC62AF0;
  v475[223] = @"GAXGlobalProfileLastPasscodeSetDate";
  v476[60] = &unk_1EDC62B08;
  v476[61] = &unk_1EDC62B08;
  v475[220] = @"GAXGlobalProfileECID";
  v475[221] = @"GAXGlobalProfileProductBuildVersion";
  v476[62] = &unk_1EDC62B08;
  v476[63] = &unk_1EDC62B08;
  v476[64] = &unk_1EDC62B08;
  v476[65] = &unk_1EDC62B08;
  v475[219] = @"GAXGlobalProfileSystemDidRestartDueToLowBattery";
  v475[217] = @"AXGAXInternalSettingIsActiveAppSelfLocked";
  v475[218] = @"GAXInternalSettingTimeRestrictionHasExpired";
  v476[66] = &unk_1EDC62B08;
  v476[67] = &unk_1EDC62B08;
  v476[68] = &unk_1EDC62B08;
  v475[216] = @"GAXGlobalProfileActiveAppID";
  v475[214] = @"GAXGlobalProfileUserConfiguredAppIds";
  v475[215] = @"GAXGlobalProfileActiveAppOrientation";
  v476[69] = &unk_1EDC62B08;
  v476[70] = &unk_1EDC62B08;
  v476[71] = &unk_1EDC62B08;
  v475[213] = @"GAXGlobalProfileSavedAXTripleClickOptions";
  v475[211] = @"GAXInternalSettingUserGlobalProfile";
  v475[212] = @"GAXGlobalProfileSavedAXFeatures";
  v476[72] = &unk_1EDC62B08;
  v476[73] = &unk_1EDC62B08;
  v476[74] = &unk_1EDC62B08;
  v475[210] = @"GAXInternalSettingUserAppProfile";
  v475[208] = @"GuidedAccessAutoLockTimeInSeconds";
  v475[209] = @"GuidedAccessUserPrefersMirroringForExternalDisplays";
  v476[75] = &unk_1EDC62B08;
  v476[76] = &unk_1EDC62B08;
  v476[77] = &unk_1EDC62B08;
  v475[207] = @"kAXSGuidedAccessOverrideIdleTimePreference";
  v475[205] = @"GuidedAccessToneIdentifierForTimeRestrictionEvent";
  v475[206] = @"GuidedAccessSpeakForTimeRestrictionEvent";
  v476[78] = &unk_1EDC62B08;
  v476[79] = &unk_1EDC62B08;
  v476[80] = &unk_1EDC62B08;
  v475[204] = @"GuidedAccessAllowsUnlockWithTouchID";
  v475[202] = @"GuidedAccessUsageCount";
  v475[203] = @"kAXSGuidedAccessAXFeaturesEnabled";
  v476[81] = &unk_1EDC62B08;
  v476[82] = &unk_1EDC62B08;
  v476[83] = &unk_1EDC62B08;
  v475[201] = @"ZoomShowZoomWhileMirroringPreference";
  v475[199] = @"kAXZoomTrackpadGestureEnabledPreference";
  v475[200] = @"ZoomAutopannerShouldPanWithAccelerationPreference";
  v476[84] = &unk_1EDC62B08;
  v476[85] = &unk_1EDC62B08;
  v476[86] = &unk_1EDC62B08;
  v475[198] = @"ZoomScrollWheelKeyboardShortcutEnabledPreference";
  v475[196] = @"ZoomSwitchZoomModeKeyboardShortcutEnabledPreference";
  v475[197] = @"ZoomTempToggleZoomKeyboardShortcutEnabledPreference";
  v476[87] = &unk_1EDC62B08;
  v476[88] = &unk_1EDC62B08;
  v476[89] = &unk_1EDC62B08;
  v475[195] = @"ZoomResizeZoomWindowKeyboardShortcutEnabledPreference";
  v475[193] = @"ZoomToggleZoomKeyboardShortcutEnabledPreference";
  v475[194] = @"ZoomPanZoomKeyboardShortcutEnabledPreference";
  v476[90] = &unk_1EDC62B08;
  v476[91] = &unk_1EDC62B08;
  v476[92] = &unk_1EDC62B08;
  v475[192] = @"ZoomAdjustZoomLevelKeyboardShortcutEnabledPreference";
  v475[190] = @"ZoomPeekZoomEverEnabled";
  v475[191] = @"ZoomShouldUseKeyboardShortcutsPreference";
  v476[93] = &unk_1EDC62B08;
  v476[94] = &unk_1EDC62B08;
  v476[95] = &unk_1EDC62B08;
  v475[189] = @"ZoomPeekZoomEnabled";
  v475[187] = @"ZoomInStandby";
  v475[188] = @"ZoomShowedBanner";
  v476[96] = &unk_1EDC62B08;
  v476[97] = &unk_1EDC62B08;
  v476[98] = &unk_1EDC62B08;
  v475[186] = @"ZoomDebugShowExternalFocusRectPreference";
  v475[184] = @"ZoomShouldAllowFullscreenAutopanning";
  v475[185] = @"ZoomDebugDisableZoomLensScaleTransform";
  v476[99] = &unk_1EDC62B08;
  v476[100] = &unk_1EDC62B08;
  v476[101] = &unk_1EDC62B08;
  v475[183] = @"ZoomAudioDestination";
  v475[181] = @"ZoomIdleSlugOpacity";
  v475[182] = @"ZoomControllerColorPreference";
  v476[102] = &unk_1EDC62B08;
  v476[103] = &unk_1EDC62B08;
  v476[104] = &unk_1EDC62B08;
  v475[180] = @"ZoomPreferredDockPositions";
  v475[178] = @"ZoomPreferredMaximumZoomScale";
  v475[179] = @"ZoomPreferredLensModes";
  v476[105] = &unk_1EDC62B08;
  v476[106] = &unk_1EDC62B08;
  v476[107] = &unk_1EDC62B08;
  v475[177] = @"ZoomPreferredLensMode";
  v475[175] = @"ZoomSlugTapAndSlideToAdjustZoomLevel";
  v475[176] = @"ZoomPreferredDockPosition";
  v476[108] = &unk_1EDC62B08;
  v476[109] = &unk_1EDC62B08;
  v476[110] = &unk_1EDC62B08;
  v475[174] = @"ZoomSlugTripleTapAction";
  v475[172] = @"ZoomSlugSingleTapAction";
  v475[173] = @"ZoomSlugDoubleTapAction";
  v476[111] = &unk_1EDC62B08;
  v476[112] = &unk_1EDC62B08;
  v476[113] = &unk_1EDC62B08;
  v475[171] = @"ZoomAlwaysUseWindowZoomForTyping";
  v475[169] = @"ZoomShouldFollowFocus";
  v475[170] = @"ZoomShouldShowSlug";
  v476[114] = &unk_1EDC62B08;
  v476[115] = &unk_1EDC62B08;
  v476[116] = &unk_1EDC62B08;
  v475[168] = @"ZoomCurrentLensMode";
  v476[117] = &unk_1EDC62B08;
  v475[167] = @"ZoomCurrentLensEffect";
  v475[160] = @"HoverTextTypingShowedBanner";
  v475[166] = @"ZoomSlugPosition";
  v475[162] = @"ZoomWindowFrame";
  v475[165] = @"ZoomPanOffset";
  v475[163] = @"DockSize";
  v475[164] = @"ZoomScale";
  v476[160] = &unk_1EDC62AF0;
  v475[161] = @"ZoomPreferencesWereInitialized";
  v476[462] = &unk_1EDC62B08;
  v476[492] = &unk_1EDC62B08;
  v476[493] = &unk_1EDC62B08;
  v476[494] = &unk_1EDC62B08;
  v476[38] = &unk_1EDC62B08;
  v476[158] = &unk_1EDC62AF0;
  v475[159] = @"HoverTextShowedBanner";
  v476[159] = &unk_1EDC62AF0;
  v476[39] = &unk_1EDC62AF0;
  v475[158] = @"HoverTextScrollingSpeed";
  v475[156] = @"AXSHapticMusicUsagePerDay";
  v475[157] = @"AXSHapticMusicUsageStartDate";
  v475[153] = @"AXSHapticMusicTrackAvailable";
  v476[154] = &unk_1EDC62AF0;
  v475[155] = @"AXSHapticMusicAlgorithmSelection";
  v476[155] = &unk_1EDC62AF0;
  v476[153] = &unk_1EDC62AF0;
  v475[154] = @"AXSHapticMusicToggledInPreferences";
  v475[94] = @"AssistiveTouchMotionTrackerYNormalizationOffsetPreference";
  v476[151] = &unk_1EDC62AF0;
  v475[152] = @"AXSHapticMusicActive";
  v476[152] = &unk_1EDC62AF0;
  v476[150] = &unk_1EDC62AF0;
  v475[151] = @"AXSHapticMusicEnhancedVocals";
  v475[95] = @"AXSAssistiveTouchMotionTrackerShouldOffsetBufferPointsPreference";
  v475[150] = @"AXSHapticMusicEnhancedPercussion";
  v475[96] = @"AXSAssistiveTouchBubbleModeEnabled";
  v475[149] = @"SCCameraPointPickerDwellMovementToleranceRadiusPreference";
  v475[97] = @"AXSAssistiveTouchEyeTrackingAutoHideEnabled";
  v475[148] = @"SCCameraPointPickerDwellActivationTimeoutPreference";
  v475[98] = @"AXSAssistiveTouchEyeTrackingAutoHideTimeout";
  v475[147] = @"SCCameraPointPickerMode";
  v475[99] = @"AXSAssistiveTouchEyeTrackingAutoHideOpacity";
  v475[146] = @"SCCameraPointPickerMovementToleranceInJoystickMode";
  v475[100] = @"AXSAssistiveTouchMouseClickSounds";
  v475[145] = @"SCCameraPointPickerSensitivity";
  v475[101] = @"AssistiveTouchHeadMovementSensitivityPreference";
  v475[144] = @"SCUseCameraForPointPicker";
  v475[102] = @"AXSAssistiveTouchSwitchUsageConfirmedPreference";
  v475[143] = @"SCDebugLoggingEnabled";
  v475[103] = @"AssistiveTouchAutoAddedTCItem";
  v475[142] = @"SCUserDidReadUSBRestrictedModeAlert";
  v475[104] = @"AXSAssistiveTouchMainScreenCustomizationPreference";
  v475[141] = @"SCShouldDisallowUSBRestrictedMode";
  v475[105] = @"AXSAssistiveTouchOrbPreference";
  v475[140] = @"SCSwitchControlPointPickerSelectionStyle";
  v475[106] = @"AXSAssistiveTouchSingleTapAction";
  v475[107] = @"AXSAssistiveTouchDoubleTapAction";
  v475[108] = @"AXSAssistiveTouchLongPressAction";
  v475[138] = @"SCIgnoreInvalidSwitchConfiguration";
  v475[109] = @"AXSAssistiveTouchLongPressActionDuration";
  v475[137] = @"SCRestartScanningAtCurrentKey";
  v475[110] = @"AXSAssistiveTouchDoubleTapActionTimeout";
  v475[136] = @"SCScanAfterTapLocation";
  v475[111] = @"AXSAssistiveTouchMouseCustomizedClickActionsPreference";
  v475[135] = @"SCIsEnabledAsReceiver";
  v475[112] = @"AXSAssistiveTouchEyeTrackerCustomizedSettingsPreference";
  v475[134] = @"SCShouldAlwaysActivateKeyboardKeys";
  v475[113] = @"AssistiveTouchCameraSwitchPreviewEnabledPreference";
  v475[133] = @"SCTapBehaviorPreference";
  v475[114] = @"AssistiveTouchInternalOnlyHiddenNubbitModeEnabledPreference";
  v475[132] = @"SCDwellTime";
  v475[115] = @"AssistiveTouchInternalOnlyPearlTrackingEnabledPreference";
  v475[131] = @"SCFirstLaunchScanningMode";
  v475[116] = @"AXSAssistiveTouchIdleOpacityPreference";
  v475[130] = @"SCScanningStyle";
  v475[117] = @"AXSAssitiveTouchGameControllerPreference";
  v475[129] = @"SCMediaControlsMenuItems";
  v475[118] = @"SCRecipes";
  v475[128] = @"SCSettingsMenuItems";
  v475[119] = @"SCLaunchRecipeUUID";
  v475[127] = @"SCDeviceMenuItems";
  v475[120] = @"SCTopLevelMenuItems";
  v475[126] = @"SCGesturesMenuItems";
  v475[122] = @"SCDeviceTopLevelMenuItems";
  v475[125] = @"SCShouldUseShortFirstPage";
  v475[123] = @"SCSettingsTopLevelMenuItems";
  v475[124] = @"SCMediaControlsTopLevelMenuItems";
  v475[121] = @"SCGesturesTopLevelMenuItems";
  v476[385] = &unk_1EDC62AF0;
  v476[386] = &unk_1EDC62AF0;
  v476[391] = &unk_1EDC62AF0;
  v476[392] = &unk_1EDC62AF0;
  v476[397] = &unk_1EDC62AF0;
  v476[398] = &unk_1EDC62AF0;
  v476[399] = &unk_1EDC62AF0;
  v476[400] = &unk_1EDC62AF0;
  v476[401] = &unk_1EDC62AF0;
  v476[402] = &unk_1EDC62AF0;
  v476[410] = &unk_1EDC62AF0;
  v476[411] = &unk_1EDC62AF0;
  v476[412] = &unk_1EDC62AF0;
  v476[413] = &unk_1EDC62AF0;
  v476[414] = &unk_1EDC62AF0;
  v476[415] = &unk_1EDC62AF0;
  v476[416] = &unk_1EDC62AF0;
  v476[417] = &unk_1EDC62AF0;
  v476[419] = &unk_1EDC62AF0;
  v476[420] = &unk_1EDC62AF0;
  v476[421] = &unk_1EDC62AF0;
  v476[422] = &unk_1EDC62AF0;
  v476[423] = &unk_1EDC62AF0;
  v476[424] = &unk_1EDC62AF0;
  v476[425] = &unk_1EDC62AF0;
  v476[426] = &unk_1EDC62AF0;
  v476[427] = &unk_1EDC62AF0;
  v476[441] = &unk_1EDC62AF0;
  v476[442] = &unk_1EDC62AF0;
  v476[443] = &unk_1EDC62AF0;
  v476[449] = &unk_1EDC62AF0;
  v476[450] = &unk_1EDC62AF0;
  v476[451] = &unk_1EDC62AF0;
  v476[452] = &unk_1EDC62AF0;
  v476[453] = &unk_1EDC62AF0;
  v476[454] = &unk_1EDC62AF0;
  v476[455] = &unk_1EDC62AF0;
  v476[456] = &unk_1EDC62AF0;
  v476[457] = &unk_1EDC62AF0;
  v476[458] = &unk_1EDC62AF0;
  v476[459] = &unk_1EDC62AF0;
  v476[460] = &unk_1EDC62AF0;
  v476[461] = &unk_1EDC62AF0;
  v476[463] = &unk_1EDC62AF0;
  v476[464] = &unk_1EDC62AF0;
  v476[465] = &unk_1EDC62AF0;
  v476[466] = &unk_1EDC62AF0;
  v476[490] = &unk_1EDC62AF0;
  v476[491] = &unk_1EDC62AF0;
  v476[500] = &unk_1EDC62AF0;
  v476[501] = &unk_1EDC62AF0;
  v476[502] = &unk_1EDC62AF0;
  v476[503] = &unk_1EDC62AF0;
  v476[504] = &unk_1EDC62AF0;
  v476[505] = &unk_1EDC62AF0;
  v476[506] = &unk_1EDC62AF0;
  v476[507] = &unk_1EDC62AF0;
  v476[508] = &unk_1EDC62AF0;
  v475[93] = @"AssistiveTouchMotionTrackerXNormalizationOffsetPreference";
  v475[38] = @"AssistiveTouchScannerSoundEnabled";
  v475[54] = @"AssistiveTouchActionRepeatEnabledPreference";
  v475[13] = @"AssistiveTouchVirtualTrackpadFullScreenToggle";
  v475[92] = @"AssistiveTouchMotionTrackerYNormalizationOrderPreference";
  v475[90] = @"AssistiveTouchMotionTrackerSmoothingMaxDeltaPreference";
  v475[91] = @"AssistiveTouchMotionTrackerXNormalizationOrderPreference";
  v475[89] = @"AssistiveTouchMotionTrackerSmoothingBufferSizePreference";
  v475[14] = @"AssistiveTouchVirtualTrackpadSpeed";
  v475[15] = @"AssistiveTouchVirtualTrackpadScrollSpeed";
  v475[16] = @"AssistiveTouchVirtualTrackpadHoldDuration";
  v475[17] = @"AssistiveTouchVirtualTrackpadFadeDelay";
  v475[88] = @"AssistiveTouchForceEyeTrackerExperiencePreference";
  v475[86] = @"AssistiveTouchMouseZoomPanningStylePreference";
  v475[87] = @"AssistiveTouchMotionTrackerConfigurablePreference";
  v475[85] = @"AssistiveTouchMouseDwellControlShowPromptPreference";
  v475[18] = @"AssistiveTouchVirtualTrackpadBorderColor";
  v475[19] = @"AssistiveTouchVirtualTrackpadInnerColor";
  v475[20] = @"AssistiveTouchVirtualTrackpadBorderOpacity";
  v475[21] = @"AssistiveTouchVirtualTrackpadInnerOpacity";
  v475[22] = @"AssistiveTouchVirtualTrackpadBorderWidth";
  v475[23] = @"AssistiveTouchSpeed";
  v475[83] = @"kAXSAssistiveTouchMouseDwellControlCornerCustomizationPreference";
  v475[81] = @"AssistiveTouchMouseDwellControlActivationTimeoutPreference";
  v475[82] = @"AssistiveTouchMouseDwellControlMovementToleranceRadiusPreference";
  v475[80] = @"AssistiveTouchMouseDwellControlAutorevertActionPreference";
  v475[24] = @"AssistiveTouchCustomGestures";
  v475[25] = @"AssistiveTouchRecentGestures";
  v475[26] = @"AssistiveTouchSavedGestures";
  v475[27] = @"AssistiveTouchScanningModePreference";
  v475[79] = @"AssistiveTouchMouseDwellControlAutorevertEnabledPreference";
  v475[77] = @"AssistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur";
  v475[78] = @"AssistiveTouchMouseOnDeviceEyeTrackingCalibrationStrategyPreference";
  v475[76] = @"AssistiveTouchOnDeviceEyeTrackingShouldUseMotionFilte";
  v475[28] = @"AssistiveTouchPreferredPointPickerPreference";
  v475[29] = @"AssistiveTouchAutoScanningEnabled";
  v475[30] = @"AssistiveTouchScanShouldGroupElements";
  v475[31] = @"AssistiveTouchScanShouldUseCompactMenu";
  v475[75] = @"AssistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages";
  v475[73] = @"AXSAssistiveTouchEnabledByOnDeviceEyeTracking";
  v475[74] = @"AssistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints";
  v475[72] = @"AXSAssistiveTouchOnDeviceEyeTrackingAutoHideOpacity";
  v475[32] = @"AssistiveTouchScannerMenuLabelsEnabled";
  v475[33] = @"AssistiveTouchStepInterval";
  v475[34] = @"AssistiveTouchScanCyclesPreference";
  v475[35] = @"AssistiveTouchScannerSelectTimeout";
  v475[71] = @"AXSAssistiveTouchOnDeviceEyeTrackingAutoHideTimeout";
  v475[37] = @"AssistiveTouchScannerScanTimeout";
  v475[70] = @"AXSAssistiveTouchOnDeviceEyeTrackingAutoHideEnabled";
  v475[69] = @"AssistiveTouchOnDeviceEyeTrackingSmoothingBufferSizePreference";
  v475[40] = @"AssistiveTouchSwitchesPreference";
  v475[41] = @"AssistiveTouchCameraPointPickerSwitchesPreference";
  v475[68] = @"AssistiveTouchForceOnDeviceEyeTrackingExperiencePreference";
  v475[67] = @"AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentPointToGazePointMapPreference";
  v475[42] = @"AssistiveTouchCursorHighVisibilityPreference";
  v475[43] = @"AssistiveTouchInputCoalescingDurationPreference";
  v475[66] = @"AssistiveTouchMouseOnDeviceEyeTrackingCalibratedValuesPreference";
  v475[65] = @"AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentCompletedPreference";
  v475[44] = @"AssistiveTouchInputCoalescingEnabledPreference";
  v475[45] = @"AssistiveTouchInputHoldDurationPreference";
  v475[64] = @"AssistiveTouchMouseOnDeviceEyeTrackingOnboardingCompletedPreference";
  v475[62] = @"AssistiveTouchMouseDwellControlEnabledPreference";
  v475[63] = @"AssistiveTouchMouseOnDeviceEyeTrackingEnabledPreference";
  v475[46] = @"AssistiveTouchLongPressDurationPreference";
  v475[47] = @"AssistiveTouchInputHoldEnabledPreference";
  v475[60] = @"AssistiveTouchMousePointerTimeoutEnabledPreference";
  v475[61] = @"AssistiveTouchMousePointerTimeoutPreference";
  v475[48] = @"AssistiveTouchLongPressDurationEnabledPreference";
  v475[49] = @"AssistiveTouchLongPressPauseScanningEnabledPreference";
  v475[58] = @"AssistiveTouchMousePointerColorPreference";
  v475[59] = @"AssistiveTouchMousePointerSizeMultiplierPreference";
  v475[50] = @"AssistiveTouchDelayAfterInputPreference";
  v475[51] = @"AssistiveTouchDelayAfterInputEnabledPreference";
  v475[56] = @"AssistiveTouchScannerScanTimeoutEnabled";
  v475[57] = @"AssistiveTouchCursorColorPreference";
  v475[52] = @"AssistiveTouchAxisSweepSpeed";
  v475[53] = @"AssistiveTouchActionRepeatIntervalPreference";
  v475[381] = @"AXSVoiceOverDirectTouchEnabledApps";
  v475[382] = @"AXSSceneDescriptions";
  v475[383] = @"AXSVoiceOverSoundCurtain";
  v475[384] = @"AXSVoiceOverFlashlightNotificationsEnabled";
  v475[385] = @"VoiceOverWatchHandGestures";
  v475[386] = @"VoiceOverWatchHandGesturesActionCustomizations";
  v475[387] = @"VoiceOverTouchMediaDuckingVolume";
  v475[388] = @"VoiceOverTouchMediaDuckingMode";
  v475[389] = @"ZoomWatchHandGestures";
  v475[390] = @"ZoomWatchHandGesturesActionCustomizations";
  v475[391] = @"TapticTimeInternalFlashScreenEnabled";
  v475[392] = @"AXSIgnoreTrackpad";
  v475[393] = @"HearingAidControlAvailableOnLockScreen";
  v475[394] = @"HearingAidStreamToLeft";
  v475[395] = @"HearingAidStreamToRight";
  v475[396] = @"HearingAidEarIndependencePreference";
  v475[399] = @"VoiceOverSpeakSecondsEncoding";
  v475[400] = @"LeftRightBalanceEnabled";
  v475[401] = @"LeftRightBalanceValue";
  v475[402] = @"RemoteHandGestureCustomizedActions";
  v475[410] = @"AXSAlexLocalAssetURL";
  v475[411] = @"LEDFlashOnRingerSwitchSilent";
  v475[412] = @"LEDFlashWhileUnlocked";
  v475[413] = @"LimitDisplayRefreshRate";
  v475[414] = @"LocCaptionShowFilePath";
  v475[415] = @"LocCaptionShowUSString";
  v475[416] = @"LocCaptionShowLocalizedString";
  v475[417] = @"AXSSecurePayAssertionActive";
  v475[419] = @"TTYMedicalPreamble";
  v475[420] = @"SpeakMedicalPreamble";
  v475[421] = @"SOSMedicalPreamble";
  v475[422] = @"VoiceOverPronunciationCloudKitSyncingEnabled";
  v475[423] = @"AutomaticAccessibilityEnabled";
  v475[424] = @"AutomaticAccessibilityIgnoreAppAccessibilityPreferred";
  v475[425] = @"AutomaticAccessibilityVisualizationsEnabled";
  v475[426] = @"AutomaticAccessibilityModes";
  v475[427] = @"AXSDidResetD22Preferences";
  v475[428] = @"TouchAccommodationsEnabledPreference";
  v475[429] = @"TouchAccommodationsUsageConfirmedPreference";
  v475[430] = @"AXSTouchAccommodationsTripleClickConfirmedPreference";
  v475[431] = @"TouchAccommodationsHoldDurationEnabledPreference";
  v475[432] = @"TouchAccommodationsHoldDurationPreference";
  v475[433] = @"TouchAccommodationsAllowsSwipeGesturesToBypassPreference";
  v475[434] = @"TouchAccommodationsHoldDurationAllowsSwipeGesturesToBypassPreference";
  v475[435] = @"TouchAccommodationsHoldDurationSwipeGestureSensitivityPreference";
  v475[436] = @"TouchAccommodationsHoldDurationSwipeGestureMinimumDistancePreference";
  v475[437] = @"TouchAccommodationsIgnoreRepeatEnabledPreference";
  v475[438] = @"TouchAccommodationsIgnoreRepeatDurationPreference";
  v475[439] = @"TouchAccommodationsTapActivationMethodPreference";
  v475[440] = @"TouchAccommodationsTapActivationTimeOutPreference";
  v475[441] = @"StickyKeysEnabled";
  v475[442] = @"StickyKeysShiftToggleEnabled";
  v475[443] = @"StickyKeysBeepEnabled";
  v475[444] = @"CommandMapData";
  v475[445] = @"FocusRingTimeout";
  v475[446] = @"FocusRingTimeoutEnabled";
  v475[447] = @"ShouldShowTextEditingModeInstructions";
  v475[448] = @"FullKeyboardAccessShouldShowDebugKeyCommandsViewPreference";
  v475[449] = @"FullKeyboardAccessLargeFocusRingEnabled";
  v475[450] = @"FullKeyboardAccessFocusRingHighContrastEnabled";
  v475[451] = @"FullKeyboardAccessFocusRingColor";
  v475[452] = @"AXSAppValidatingTestingPreference";
  v475[453] = @"IsAXValidationRunnerCollectingValidations";
  v475[454] = @"AXSClassicInvertColorsPreference";
  v475[455] = @"VoiceOverSleepOnWristDownPreference";
  v475[456] = @"AssistiveTouchSleepOnWristDownPreference";
  v475[457] = @"AXSBackTapDoubleTapAction";
  v475[458] = @"AXSBackTapTripleTapAction";
  v475[459] = @"AXSBackTapFalsePositiveAlertsEnabled";
  v475[460] = @"AXSBackTapRNNModelEnabled";
  v475[461] = @"AXSBackTapUsageCount";
  v475[462] = @"AXSAssistiveTouchActionBySoundActionsPreference";
  v475[463] = @"HoverTextActivationLock";
  v475[464] = @"HoverTextActivatorKey";
  v475[465] = @"AXSliveSpeechMaxRecentsCountPreference";
  v475[466] = @"AutomationTrueTouch";
  v475[489] = @"AXSDidTriggerSOSToday";
  v475[490] = @"CallAudioRoutingAutoAnswerPreference";
  v475[491] = @"CallAudioRoutingAutoAnswerEnabledPreference";
  v475[497] = @"VoiceOverTouchPitchCompactVoice";
  v475[498] = @"AXSVoiceOverAlternativeVoicesPreference";
  v475[499] = @"AXSVoiceOverCompactVoicePreference";
  v475[500] = @"AXSPerAppSettingsCustomizedAppIDs";
  v475[501] = @"AXSPerAppSettingsStats";
  v475[502] = @"AXSAudiogramIngestionLastModelAccess";
  v475[503] = @"AXSSoundActionsLastModelAccess";
  v475[505] = @"AXSoundDetectionLastModelAccess";
  v475[506] = @"CameraButtonSensitivity";
  v475[507] = @"StartupSoundEnabled";
  v475[508] = @"AdaptiveVoiceShortcuts";
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v476 forKeys:v475 count:509];
  id v3 = (void *)PreferenceKeyToDomainMap;
  PreferenceKeyToDomainMap = v2;

  v472 = NSStringFromSelector(sel_automationTrueTouch);
  v473[0] = v472;
  v474[0] = @"AutomationTrueTouch";
  v471 = NSStringFromSelector(sel_laserZoomPanningStyle);
  v473[1] = v471;
  v474[1] = @"LaserZoomPanningStyle";
  v470 = NSStringFromSelector(sel_assistiveTouchAlwaysShowMenuEnabled);
  v473[2] = v470;
  v474[2] = @"AssistiveTouchAlwaysShowMenu";
  v469 = NSStringFromSelector(sel_assistiveTouchOpenMenuSwaggleEnabled);
  v473[3] = v469;
  v474[3] = @"AssistiveTouchOpenMenuSwaggle";
  v468 = NSStringFromSelector(sel_assistiveTouchMouseBehavesLikeFinger);
  v473[4] = v468;
  v474[4] = @"AssistiveTouchMouseBehavesLikeFinger";
  v467 = NSStringFromSelector(sel_assistiveTouchMouseKeysEnabled);
  v473[5] = v467;
  v474[5] = @"AssistiveTouchMouseKeys";
  v466 = NSStringFromSelector(sel_assistiveTouchMouseKeysOptionToggleEnabled);
  v473[6] = v466;
  v474[6] = @"AssistiveTouchMouseKeysOptionToggle";
  v465 = NSStringFromSelector(sel_assistiveTouchMouseKeysUseMainKeyboardKeys);
  v473[7] = v465;
  v474[7] = @"AssistiveTouchMouseKeysUseMainKeyboardKeys";
  v464 = NSStringFromSelector(sel_assistiveTouchMouseKeysDelay);
  v473[8] = v464;
  v474[8] = @"AssistiveTouchMouseKeysDelay";
  v463 = NSStringFromSelector(sel_assistiveTouchMouseAlwaysShowSoftwareKeyboardEnabled);
  v473[9] = v463;
  v474[9] = @"AssistiveTouchMouseAlwaysShowSoftwareKeyboard";
  v462 = NSStringFromSelector(sel_assistiveTouchMouseAllowAppleBluetoothDevicesPairing);
  v473[10] = v462;
  v474[10] = @"AssistiveTouchMouseAllowAppleBluetoothDevicesPairing";
  v461 = NSStringFromSelector(sel_assistiveTouchMouseKeysMaxSpeed);
  v473[11] = v461;
  v474[11] = @"AssistiveTouchMouseKeysMaxSpeed";
  v460 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadEnabled);
  v473[12] = v460;
  v474[12] = @"AssistiveTouchVirtualTrackpadEnabled";
  v459 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadSpeed);
  v473[13] = v459;
  v474[13] = @"AssistiveTouchVirtualTrackpadSpeed";
  v458 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadScrollToggleEnabled);
  v473[14] = v458;
  v474[14] = @"AssistiveTouchVirtualTrackpadScrollToggle";
  v457 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadFullScreenToggleEnabled);
  v473[15] = v457;
  v474[15] = @"AssistiveTouchVirtualTrackpadFullScreenToggle";
  v456 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadScrollSpeed);
  v473[16] = v456;
  v474[16] = @"AssistiveTouchVirtualTrackpadScrollSpeed";
  v455 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadHoldDuration);
  v473[17] = v455;
  v474[17] = @"AssistiveTouchVirtualTrackpadHoldDuration";
  v454 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadFadeDelay);
  v473[18] = v454;
  v474[18] = @"AssistiveTouchVirtualTrackpadFadeDelay";
  v453 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadBorderColor);
  v473[19] = v453;
  v474[19] = @"AssistiveTouchVirtualTrackpadBorderColor";
  v452 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadInnerColor);
  v473[20] = v452;
  v474[20] = @"AssistiveTouchVirtualTrackpadInnerColor";
  v451 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadBorderOpacity);
  v473[21] = v451;
  v474[21] = @"AssistiveTouchVirtualTrackpadBorderOpacity";
  v450 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadInnerOpacity);
  v473[22] = v450;
  v474[22] = @"AssistiveTouchVirtualTrackpadInnerOpacity";
  v449 = NSStringFromSelector(sel_assistiveTouchVirtualTrackpadBorderWidth);
  v473[23] = v449;
  v474[23] = @"AssistiveTouchVirtualTrackpadBorderWidth";
  v448 = NSStringFromSelector(sel_assistiveTouchSpeed);
  v473[24] = v448;
  v474[24] = @"AssistiveTouchSpeed";
  v447 = NSStringFromSelector(sel_assistiveTouchCustomGestures);
  v473[25] = v447;
  v474[25] = @"AssistiveTouchCustomGestures";
  v446 = NSStringFromSelector(sel_assistiveTouchRecentGestures);
  v473[26] = v446;
  v474[26] = @"AssistiveTouchRecentGestures";
  v445 = NSStringFromSelector(sel_assistiveTouchSavedGestures);
  v473[27] = v445;
  v474[27] = @"AssistiveTouchSavedGestures";
  v444 = NSStringFromSelector(sel_assistiveTouchScanningMode);
  v473[28] = v444;
  v474[28] = @"AssistiveTouchScanningModePreference";
  v443 = NSStringFromSelector(sel_assistiveTouchPreferredPointPicker);
  v473[29] = v443;
  v474[29] = @"AssistiveTouchPreferredPointPickerPreference";
  v442 = NSStringFromSelector(sel_assistiveTouchAutoScanningEnabled);
  v473[30] = v442;
  v474[30] = @"AssistiveTouchAutoScanningEnabled";
  v441 = NSStringFromSelector(sel_assistiveTouchGroupElementsEnabled);
  v473[31] = v441;
  v474[31] = @"AssistiveTouchScanShouldGroupElements";
  v440 = NSStringFromSelector(sel_assistiveTouchScannerCompactMenuEnabled);
  v473[32] = v440;
  v474[32] = @"AssistiveTouchScanShouldUseCompactMenu";
  v439 = NSStringFromSelector(sel_assistiveTouchScannerMenuLabelsEnabled);
  v473[33] = v439;
  v474[33] = @"AssistiveTouchScannerMenuLabelsEnabled";
  v438 = NSStringFromSelector(sel_assistiveTouchStepInterval);
  v473[34] = v438;
  v474[34] = @"AssistiveTouchStepInterval";
  v437 = NSStringFromSelector(sel_assistiveTouchScanCycles);
  v473[35] = v437;
  v474[35] = @"AssistiveTouchScanCyclesPreference";
  v436 = NSStringFromSelector(sel_assistiveTouchScanTimeout);
  v473[36] = v436;
  v474[36] = @"AssistiveTouchScannerScanTimeout";
  v435 = NSStringFromSelector(sel_assistiveTouchScannerSoundEnabled);
  v473[37] = v435;
  v474[37] = @"AssistiveTouchScannerSoundEnabled";
  v434 = NSStringFromSelector(sel_assistiveTouchScannerSpeechRate);
  v473[38] = v434;
  v474[38] = kAXSAssistiveTouchScannerSpeechRatePreference;
  v433 = NSStringFromSelector(sel_assistiveTouchSwitches);
  v473[39] = v433;
  v474[39] = @"AssistiveTouchSwitchesPreference";
  v432 = NSStringFromSelector(sel_ignoreTrackpad);
  v473[40] = v432;
  v474[40] = @"AXSIgnoreTrackpad";
  v431 = NSStringFromSelector(sel_assistiveTouchCameraPointPickerSwitches);
  v473[41] = v431;
  v474[41] = @"AssistiveTouchCameraPointPickerSwitchesPreference";
  v430 = NSStringFromSelector(sel_teachableMomentsNotificationsSeen);
  v473[42] = v430;
  v474[42] = @"AXSTeachableMomentsNotificationSeen";
  v429 = NSStringFromSelector(sel_teachableMomentsDelayBeforeSending);
  v473[43] = v429;
  v474[43] = @"AXSTeachableMomentsDelayBeforeSending";
  v428 = NSStringFromSelector(sel_assistiveTouchScannerCursorHighVisibilityEnabled);
  v473[44] = v428;
  v474[44] = @"AssistiveTouchCursorHighVisibilityPreference";
  v427 = NSStringFromSelector(sel_assistiveTouchInputCoalescingDuration);
  v473[45] = v427;
  v474[45] = @"AssistiveTouchInputCoalescingDurationPreference";
  v426 = NSStringFromSelector(sel_assistiveTouchInputCoalescingEnabled);
  v473[46] = v426;
  v474[46] = @"AssistiveTouchInputCoalescingEnabledPreference";
  v425 = NSStringFromSelector(sel_assistiveTouchInputHoldDuration);
  v473[47] = v425;
  v474[47] = @"AssistiveTouchInputHoldDurationPreference";
  v424 = NSStringFromSelector(sel_assistiveTouchLongPressDuration);
  v473[48] = v424;
  v474[48] = @"AssistiveTouchLongPressDurationPreference";
  v423 = NSStringFromSelector(sel_assistiveTouchInputHoldEnabled);
  v473[49] = v423;
  v474[49] = @"AssistiveTouchInputHoldEnabledPreference";
  v422 = NSStringFromSelector(sel_assistiveTouchLongPressEnabled);
  v473[50] = v422;
  v474[50] = @"AssistiveTouchLongPressDurationEnabledPreference";
  v421 = NSStringFromSelector(sel_assistiveTouchLongPressPauseScanningEnabled);
  v473[51] = v421;
  v474[51] = @"AssistiveTouchLongPressPauseScanningEnabledPreference";
  v420 = NSStringFromSelector(sel_assistiveTouchDelayAfterInput);
  v473[52] = v420;
  v474[52] = @"AssistiveTouchDelayAfterInputPreference";
  v419 = NSStringFromSelector(sel_assistiveTouchDelayAfterInputEnabled);
  v473[53] = v419;
  v474[53] = @"AssistiveTouchDelayAfterInputEnabledPreference";
  v418 = NSStringFromSelector(sel_assistiveTouchAxisSweepSpeed);
  v473[54] = v418;
  v474[54] = @"AssistiveTouchAxisSweepSpeed";
  v417 = NSStringFromSelector(sel_assistiveTouchActionRepeatInterval);
  v473[55] = v417;
  v474[55] = @"AssistiveTouchActionRepeatIntervalPreference";
  v416 = NSStringFromSelector(sel_assistiveTouchActionRepeatEnabled);
  v473[56] = v416;
  v474[56] = @"AssistiveTouchActionRepeatEnabledPreference";
  v415 = NSStringFromSelector(sel_assistiveTouchScanTimeoutEnabled);
  v473[57] = v415;
  v474[57] = @"AssistiveTouchScannerScanTimeoutEnabled";
  v414 = NSStringFromSelector(sel_assistiveTouchCursorColor);
  v473[58] = v414;
  v474[58] = @"AssistiveTouchCursorColorPreference";
  v413 = NSStringFromSelector(sel_assistiveTouchMousePointerColor);
  v473[59] = v413;
  v474[59] = @"AssistiveTouchMousePointerColorPreference";
  v412 = NSStringFromSelector(sel_assistiveTouchMousePointerSizeMultiplier);
  v473[60] = v412;
  v474[60] = @"AssistiveTouchMousePointerSizeMultiplierPreference";
  v411 = NSStringFromSelector(sel_assistiveTouchMousePointerTimeoutEnabled);
  v473[61] = v411;
  v474[61] = @"AssistiveTouchMousePointerTimeoutEnabledPreference";
  v410 = NSStringFromSelector(sel_assistiveTouchMousePointerTimeout);
  v473[62] = v410;
  v474[62] = @"AssistiveTouchMousePointerTimeoutPreference";
  v409 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlEnabled);
  v473[63] = v409;
  v474[63] = @"AssistiveTouchMouseDwellControlEnabledPreference";
  v408 = NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingEnabled);
  v473[64] = v408;
  v474[64] = @"AssistiveTouchMouseOnDeviceEyeTrackingEnabledPreference";
  v407 = NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingOnBoardingCompleted);
  v473[65] = v407;
  v474[65] = @"AssistiveTouchMouseOnDeviceEyeTrackingOnboardingCompletedPreference";
  v406 = NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingEnrollmentCompleted);
  v473[66] = v406;
  v474[66] = @"AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentCompletedPreference";
  v405 = NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingCalibratedValues);
  v473[67] = v405;
  v474[67] = @"AssistiveTouchMouseOnDeviceEyeTrackingCalibratedValuesPreference";
  v404 = NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingEnrollmentPointToGazePointMap);
  v473[68] = v404;
  v474[68] = @"AssistiveTouchMouseOnDeviceEyeTrackingEnrollmentPointToGazePointMapPreference";
  v403 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingConfigurable);
  v473[69] = v403;
  v474[69] = @"AssistiveTouchForceOnDeviceEyeTrackingExperiencePreference";
  v402 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingSmoothingBufferSize);
  v473[70] = v402;
  v474[70] = @"AssistiveTouchOnDeviceEyeTrackingSmoothingBufferSizePreference";
  v401 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingAutoHideEnabled);
  v473[71] = v401;
  v474[71] = @"AXSAssistiveTouchOnDeviceEyeTrackingAutoHideEnabled";
  v400 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingAutoHideTimeout);
  v473[72] = v400;
  v474[72] = @"AXSAssistiveTouchOnDeviceEyeTrackingAutoHideTimeout";
  v399 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingAutoHideOpacity);
  v473[73] = v399;
  v474[73] = @"AXSAssistiveTouchOnDeviceEyeTrackingAutoHideOpacity";
  v398 = NSStringFromSelector(sel_assistiveTouchEnabledByOnDeviceEyeTracking);
  v473[74] = v398;
  v474[74] = @"AXSAssistiveTouchEnabledByOnDeviceEyeTracking";
  v397 = NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints);
  v473[75] = v397;
  v474[75] = @"AssistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints";
  v396 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages);
  v473[76] = v396;
  v474[76] = @"AssistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages";
  v395 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingShouldUseMotionFilter);
  v473[77] = v395;
  v474[77] = @"AssistiveTouchOnDeviceEyeTrackingShouldUseMotionFilte";
  v394 = NSStringFromSelector(sel_assistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur);
  v473[78] = v394;
  v474[78] = @"AssistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur";
  v393 = NSStringFromSelector(sel_assistiveTouchMouseOnDeviceEyeTrackingCalibrationStrategy);
  v473[79] = v393;
  v474[79] = @"AssistiveTouchMouseOnDeviceEyeTrackingCalibrationStrategyPreference";
  v392 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlAutorevertEnabled);
  v473[80] = v392;
  v474[80] = @"AssistiveTouchMouseDwellControlAutorevertEnabledPreference";
  v391 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlAutorevertAction);
  v473[81] = v391;
  v474[81] = @"AssistiveTouchMouseDwellControlAutorevertActionPreference";
  v390 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlActivationTimeout);
  v473[82] = v390;
  v474[82] = @"AssistiveTouchMouseDwellControlActivationTimeoutPreference";
  v389 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlMovementToleranceRadius);
  v473[83] = v389;
  v474[83] = @"AssistiveTouchMouseDwellControlMovementToleranceRadiusPreference";
  v388 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlCornerCustomization);
  v473[84] = v388;
  v474[84] = @"kAXSAssistiveTouchMouseDwellControlCornerCustomizationPreference";
  v387 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlMutatedMenu);
  v473[85] = v387;
  v474[85] = @"AssistiveTouchMouseDwellControlShowPromptPreference";
  v386 = NSStringFromSelector(sel_assistiveTouchMouseDwellControlShowPrompt);
  v473[86] = v386;
  v474[86] = @"AssistiveTouchMouseDwellControlShowPromptPreference";
  v385 = NSStringFromSelector(sel_assistiveTouchMouseZoomPanningStyle);
  v473[87] = v385;
  v474[87] = @"AssistiveTouchMouseZoomPanningStylePreference";
  v384 = NSStringFromSelector(sel_assistiveTouchMotionTrackerConfigurable);
  v473[88] = v384;
  v474[88] = @"AssistiveTouchMotionTrackerConfigurablePreference";
  v383 = NSStringFromSelector(sel_assistiveTouchForceEyeTrackerExperience);
  v473[89] = v383;
  v474[89] = @"AssistiveTouchForceEyeTrackerExperiencePreference";
  v382 = NSStringFromSelector(sel_assistiveTouchMotionTrackerSmoothingBufferSize);
  v473[90] = v382;
  v474[90] = @"AssistiveTouchMotionTrackerSmoothingBufferSizePreference";
  v381 = NSStringFromSelector(sel_assistiveTouchMotionTrackerSmoothingMaxDelta);
  v473[91] = v381;
  v474[91] = @"AssistiveTouchMotionTrackerSmoothingMaxDeltaPreference";
  v380 = NSStringFromSelector(sel_assistiveTouchMotionTrackerXNormalizationOrder);
  v473[92] = v380;
  v474[92] = @"AssistiveTouchMotionTrackerXNormalizationOrderPreference";
  v379 = NSStringFromSelector(sel_assistiveTouchMotionTrackerYNormalizationOrder);
  v473[93] = v379;
  v474[93] = @"AssistiveTouchMotionTrackerYNormalizationOrderPreference";
  v378 = NSStringFromSelector(sel_assistiveTouchMotionTrackerXNormalizationOffset);
  v473[94] = v378;
  v474[94] = @"AssistiveTouchMotionTrackerXNormalizationOffsetPreference";
  v377 = NSStringFromSelector(sel_assistiveTouchMotionTrackerYNormalizationOffset);
  v473[95] = v377;
  v474[95] = @"AssistiveTouchMotionTrackerYNormalizationOffsetPreference";
  v376 = NSStringFromSelector(sel_assistiveTouchMotionTrackerShouldOffsetBufferPoints);
  v473[96] = v376;
  v474[96] = @"AXSAssistiveTouchMotionTrackerShouldOffsetBufferPointsPreference";
  v375 = NSStringFromSelector(sel_assistiveTouchBubbleModeEnabled);
  v473[97] = v375;
  v474[97] = @"AXSAssistiveTouchBubbleModeEnabled";
  v374 = NSStringFromSelector(sel_assistiveTouchEyeTrackingAutoHideEnabled);
  v473[98] = v374;
  v474[98] = @"AXSAssistiveTouchEyeTrackingAutoHideEnabled";
  v373 = NSStringFromSelector(sel_assistiveTouchEyeTrackingAutoHideTimeout);
  v473[99] = v373;
  v474[99] = @"AXSAssistiveTouchEyeTrackingAutoHideTimeout";
  v372 = NSStringFromSelector(sel_assistiveTouchEyeTrackingAutoHideOpacity);
  v473[100] = v372;
  v474[100] = @"AXSAssistiveTouchEyeTrackingAutoHideOpacity";
  v371 = NSStringFromSelector(sel_assistiveTouchMouseClickSoundsEnabled);
  v473[101] = v371;
  v474[101] = @"AXSAssistiveTouchMouseClickSounds";
  v370 = NSStringFromSelector(sel_assistiveTouchHeadMovementSensitivity);
  v473[102] = v370;
  v474[102] = @"AssistiveTouchHeadMovementSensitivityPreference";
  v369 = NSStringFromSelector(sel_assistiveTouchSwitchUsageConfirmed);
  v473[103] = v369;
  v474[103] = @"AXSAssistiveTouchSwitchUsageConfirmedPreference";
  v368 = NSStringFromSelector(sel_assistiveTouchCameraSwitchPreviewEnabled);
  v473[104] = v368;
  v474[104] = @"AssistiveTouchCameraSwitchPreviewEnabledPreference";
  v367 = NSStringFromSelector(sel_assistiveTouchInternalOnlyHiddenNubbitModeEnabled);
  v473[105] = v367;
  v474[105] = @"AssistiveTouchInternalOnlyHiddenNubbitModeEnabledPreference";
  v366 = NSStringFromSelector(sel_assistiveTouchInternalOnlyPearlTrackingEnabled);
  v473[106] = v366;
  v474[106] = @"AssistiveTouchInternalOnlyPearlTrackingEnabledPreference";
  v365 = NSStringFromSelector(sel_assistiveTouchScannerAddedTripleClickAutomatically);
  v473[107] = v365;
  v474[107] = @"AssistiveTouchAutoAddedTCItem";
  v364 = NSStringFromSelector(sel_assistiveTouchMainScreenCustomization);
  v473[108] = v364;
  v474[108] = @"AXSAssistiveTouchMainScreenCustomizationPreference";
  v363 = NSStringFromSelector(sel_assistiveTouchOrbAction);
  v473[109] = v363;
  v474[109] = @"AXSAssistiveTouchOrbPreference";
  v362 = NSStringFromSelector(sel_assistiveTouchSingleTapAction);
  v473[110] = v362;
  v474[110] = @"AXSAssistiveTouchSingleTapAction";
  v361 = NSStringFromSelector(sel_assistiveTouchDoubleTapAction);
  v473[111] = v361;
  v474[111] = @"AXSAssistiveTouchDoubleTapAction";
  v360 = NSStringFromSelector(sel_assistiveTouchLongPressAction);
  v473[112] = v360;
  v474[112] = @"AXSAssistiveTouchLongPressAction";
  v359 = NSStringFromSelector(sel_assistiveTouchLongPressActionDuration);
  v473[113] = v359;
  v474[113] = @"AXSAssistiveTouchLongPressActionDuration";
  v358 = NSStringFromSelector(sel_assistiveTouchDoubleTapActionTimeout);
  v473[114] = v358;
  v474[114] = @"AXSAssistiveTouchDoubleTapActionTimeout";
  v357 = NSStringFromSelector(sel_assistiveTouchMouseCustomizedClickActions);
  v473[115] = v357;
  v474[115] = @"AXSAssistiveTouchMouseCustomizedClickActionsPreference";
  v356 = NSStringFromSelector(sel_assistiveTouchEyeTrackerCustomizedSettings);
  v473[116] = v356;
  v474[116] = @"AXSAssistiveTouchEyeTrackerCustomizedSettingsPreference";
  v355 = NSStringFromSelector(sel_assistiveTouchIdleOpacity);
  v473[117] = v355;
  v474[117] = @"AXSAssistiveTouchIdleOpacityPreference";
  v354 = NSStringFromSelector(sel_assistiveTouchGameControllerEnabled);
  v473[118] = v354;
  v474[118] = @"AXSAssitiveTouchGameControllerPreference";
  v353 = NSStringFromSelector(sel_switchControlRecipes);
  v473[119] = v353;
  v474[119] = @"SCRecipes";
  v352 = NSStringFromSelector(sel_switchControlLaunchRecipeUUID);
  v473[120] = v352;
  v474[120] = @"SCLaunchRecipeUUID";
  v351 = NSStringFromSelector(sel_switchControlTopLevelMenuItems);
  v473[121] = v351;
  v474[121] = @"SCTopLevelMenuItems";
  v350 = NSStringFromSelector(sel_switchControlGesturesTopLevelMenuItems);
  v473[122] = v350;
  v474[122] = @"SCGesturesTopLevelMenuItems";
  v349 = NSStringFromSelector(sel_switchControlDeviceTopLevelMenuItems);
  v473[123] = v349;
  v474[123] = @"SCDeviceTopLevelMenuItems";
  v348 = NSStringFromSelector(sel_switchControlSettingsTopLevelMenuItems);
  v473[124] = v348;
  v474[124] = @"SCSettingsTopLevelMenuItems";
  v347 = NSStringFromSelector(sel_switchControlMediaControlsTopLevelMenuItems);
  v473[125] = v347;
  v474[125] = @"SCMediaControlsTopLevelMenuItems";
  v346 = NSStringFromSelector(sel_switchControlShouldUseShortFirstPage);
  v473[126] = v346;
  v474[126] = @"SCShouldUseShortFirstPage";
  v345 = NSStringFromSelector(sel_switchControlGesturesMenuItems);
  v473[127] = v345;
  v474[127] = @"SCGesturesMenuItems";
  v344 = NSStringFromSelector(sel_switchControlDeviceMenuItems);
  v473[128] = v344;
  v474[128] = @"SCDeviceMenuItems";
  v343 = NSStringFromSelector(sel_switchControlSettingsMenuItems);
  v473[129] = v343;
  v474[129] = @"SCSettingsMenuItems";
  v342 = NSStringFromSelector(sel_switchControlMediaControlsMenuItems);
  v473[130] = v342;
  v474[130] = @"SCMediaControlsMenuItems";
  v341 = NSStringFromSelector(sel_switchControlScanningStyle);
  v473[131] = v341;
  v474[131] = @"SCScanningStyle";
  v340 = NSStringFromSelector(sel_switchControlFirstLaunchScanningMode);
  v473[132] = v340;
  v474[132] = @"SCFirstLaunchScanningMode";
  v339 = NSStringFromSelector(sel_switchControlDwellTime);
  v473[133] = v339;
  v474[133] = @"SCDwellTime";
  v338 = NSStringFromSelector(sel_switchControlTapBehavior);
  v473[134] = v338;
  v474[134] = @"SCTapBehaviorPreference";
  v337 = NSStringFromSelector(sel_switchControlAutoTapTimeout);
  v473[135] = v337;
  v474[135] = @"AssistiveTouchScannerSelectTimeout";
  v336 = NSStringFromSelector(sel_switchControlShouldAlwaysActivateKeyboardKeys);
  v473[136] = v336;
  v474[136] = @"SCShouldAlwaysActivateKeyboardKeys";
  v335 = NSStringFromSelector(sel_switchControlIsEnabledAsReceiver);
  v473[137] = v335;
  v474[137] = @"SCIsEnabledAsReceiver";
  v334 = NSStringFromSelector(sel_switchControlScanAfterTapLocation);
  v473[138] = v334;
  v474[138] = @"SCScanAfterTapLocation";
  v333 = NSStringFromSelector(sel_switchControlRestartScanningAtCurrentKey);
  v473[139] = v333;
  v474[139] = @"SCRestartScanningAtCurrentKey";
  v332 = NSStringFromSelector(sel_switchControlIgnoreInvalidSwitchConfiguration);
  v473[140] = v332;
  v474[140] = @"SCIgnoreInvalidSwitchConfiguration";
  v331 = NSStringFromSelector(sel_switchControlPointPickerSelectionStyle);
  v473[141] = v331;
  v474[141] = @"SCSwitchControlPointPickerSelectionStyle";
  v330 = NSStringFromSelector(sel_switchControlShouldDisallowUSBRestrictedMode);
  v473[142] = v330;
  v474[142] = @"SCShouldDisallowUSBRestrictedMode";
  v329 = NSStringFromSelector(sel_switchControlUserDidReadUSBRestrictedModeAlert);
  v473[143] = v329;
  v474[143] = @"SCUserDidReadUSBRestrictedModeAlert";
  v328 = NSStringFromSelector(sel_securePayAssertionActive);
  v473[144] = v328;
  v474[144] = @"AXSSecurePayAssertionActive";
  v327 = NSStringFromSelector(sel_switchControlDebugLoggingEnabled);
  v473[145] = v327;
  v474[145] = @"SCDebugLoggingEnabled";
  v326 = NSStringFromSelector(sel_switchControlUseCameraForPointMode);
  v473[146] = v326;
  v474[146] = @"SCUseCameraForPointPicker";
  v325 = NSStringFromSelector(sel_switchControlCameraPointPickerSensitivity);
  v473[147] = v325;
  v474[147] = @"SCCameraPointPickerSensitivity";
  v324 = NSStringFromSelector(sel_switchControlCameraPointPickerMovementToleranceInJoystickMode);
  v473[148] = v324;
  v474[148] = @"SCCameraPointPickerMovementToleranceInJoystickMode";
  v323 = NSStringFromSelector(sel_switchControlCameraPointPickerMode);
  v473[149] = v323;
  v474[149] = @"SCCameraPointPickerMode";
  v322 = NSStringFromSelector(sel_switchControlCameraPointPickerDwellActivationTimeout);
  v473[150] = v322;
  v474[150] = @"SCCameraPointPickerDwellActivationTimeoutPreference";
  v321 = NSStringFromSelector(sel_switchControlCameraPointPickerDwellMovementToleranceRadius);
  v473[151] = v321;
  v474[151] = @"SCCameraPointPickerDwellMovementToleranceRadiusPreference";
  v320 = NSStringFromSelector(sel_hapticMusicActive);
  v473[152] = v320;
  v474[152] = @"AXSHapticMusicActive";
  v319 = NSStringFromSelector(sel_hapticMusicTrackAvailable);
  v473[153] = v319;
  v474[153] = @"AXSHapticMusicTrackAvailable";
  v318 = NSStringFromSelector(sel_hapticMusicToggledInPreferences);
  v473[154] = v318;
  v474[154] = @"AXSHapticMusicToggledInPreferences";
  v317 = NSStringFromSelector(sel_hapticMusicEnhancedVocals);
  v473[155] = v317;
  v474[155] = @"AXSHapticMusicEnhancedVocals";
  v316 = NSStringFromSelector(sel_hapticMusicEnhancedPercussion);
  v473[156] = v316;
  v474[156] = @"AXSHapticMusicEnhancedPercussion";
  v315 = NSStringFromSelector(sel_hapticMusicAlgorithmSelection);
  v473[157] = v315;
  v474[157] = @"AXSHapticMusicAlgorithmSelection";
  v314 = NSStringFromSelector(sel_hapticMusicUsagePerDay);
  v473[158] = v314;
  v474[158] = @"AXSHapticMusicUsagePerDay";
  v313 = NSStringFromSelector(sel_hapticMusicUsageStartDate);
  v473[159] = v313;
  v474[159] = @"AXSHapticMusicUsageStartDate";
  v312 = NSStringFromSelector(sel_hoverTextScrollingSpeed);
  v473[160] = v312;
  v474[160] = @"HoverTextScrollingSpeed";
  v311 = NSStringFromSelector(sel_hoverTextShowedBanner);
  v473[161] = v311;
  v474[161] = @"HoverTextShowedBanner";
  v310 = NSStringFromSelector(sel_hoverTextTypingShowedBanner);
  v473[162] = v310;
  v474[162] = @"HoverTextTypingShowedBanner";
  v309 = NSStringFromSelector(sel_supportsAdvancedDisplayFilters);
  v473[163] = v309;
  v474[163] = @"kAXSupportsAdvancedDisplayFiltersPreference";
  v308 = NSStringFromSelector(sel_zoomPreferencesWereInitialized);
  v473[164] = v308;
  v474[164] = @"ZoomPreferencesWereInitialized";
  v307 = NSStringFromSelector(sel_zoomWindowFrame);
  v473[165] = v307;
  v474[165] = @"ZoomWindowFrame";
  v306 = NSStringFromSelector(sel_dockSize);
  v473[166] = v306;
  v474[166] = @"DockSize";
  v305 = NSStringFromSelector(sel_zoomScale);
  v473[167] = v305;
  v474[167] = @"ZoomScale";
  v304 = NSStringFromSelector(sel_zoomPanOffset);
  v473[168] = v304;
  v474[168] = @"ZoomPanOffset";
  v303 = NSStringFromSelector(sel_zoomSlugNormalizedPosition);
  v473[169] = v303;
  v474[169] = @"ZoomSlugPosition";
  v302 = NSStringFromSelector(sel_zoomCurrentLensEffect);
  v473[170] = v302;
  v474[170] = @"ZoomCurrentLensEffect";
  v301 = NSStringFromSelector(sel_zoomCurrentLensMode);
  v473[171] = v301;
  v474[171] = @"ZoomCurrentLensMode";
  v300 = NSStringFromSelector(sel_zoomPeekZoomEnabled);
  v473[172] = v300;
  v474[172] = @"ZoomPeekZoomEnabled";
  v299 = NSStringFromSelector(sel_zoomPeekZoomEverEnabled);
  v473[173] = v299;
  v474[173] = @"ZoomPeekZoomEverEnabled";
  v298 = NSStringFromSelector(sel_zoomShouldFollowFocus);
  v473[174] = v298;
  v474[174] = @"ZoomShouldFollowFocus";
  v297 = NSStringFromSelector(sel_zoomShouldShowSlug);
  v473[175] = v297;
  v474[175] = @"ZoomShouldShowSlug";
  v296 = NSStringFromSelector(sel_zoomSlugSingleTapAction);
  v473[176] = v296;
  v474[176] = @"ZoomSlugSingleTapAction";
  v295 = NSStringFromSelector(sel_zoomSlugDoubleTapAction);
  v473[177] = v295;
  v474[177] = @"ZoomSlugDoubleTapAction";
  v294 = NSStringFromSelector(sel_zoomSlugTripleTapAction);
  v473[178] = v294;
  v474[178] = @"ZoomSlugTripleTapAction";
  v293 = NSStringFromSelector(sel_zoomSlugTapAndSlideToAdjustZoomLevelEnabled);
  v473[179] = v293;
  v474[179] = @"ZoomSlugTapAndSlideToAdjustZoomLevel";
  v292 = NSStringFromSelector(sel_zoomAlwaysUseWindowedZoomForTyping);
  v473[180] = v292;
  v474[180] = @"ZoomAlwaysUseWindowZoomForTyping";
  v291 = NSStringFromSelector(sel_zoomPreferredCurrentLensMode);
  v473[181] = v291;
  v474[181] = @"ZoomPreferredLensMode";
  v290 = NSStringFromSelector(sel_zoomPreferredCurrentDockPosition);
  v473[182] = v290;
  v474[182] = @"ZoomPreferredDockPosition";
  v289 = NSStringFromSelector(sel_zoomPreferredMaximumZoomScale);
  v473[183] = v289;
  v474[183] = @"ZoomPreferredMaximumZoomScale";
  v288 = NSStringFromSelector(sel_zoomPreferredLensModes);
  v473[184] = v288;
  v474[184] = @"ZoomPreferredLensModes";
  v287 = NSStringFromSelector(sel_zoomPreferredDockPositions);
  v473[185] = v287;
  v474[185] = @"ZoomPreferredDockPositions";
  v286 = NSStringFromSelector(sel_zoomIdleSlugOpacity);
  v473[186] = v286;
  v474[186] = @"ZoomIdleSlugOpacity";
  v285 = NSStringFromSelector(sel_zoomControllerColor);
  v473[187] = v285;
  v474[187] = @"ZoomControllerColorPreference";
  v284 = NSStringFromSelector(sel_zoomPreferredAudioDestination);
  v473[188] = v284;
  v474[188] = @"ZoomAudioDestination";
  v283 = NSStringFromSelector(sel_zoomShouldAllowFullscreenAutopanning);
  v473[189] = v283;
  v474[189] = @"ZoomShouldAllowFullscreenAutopanning";
  v282 = NSStringFromSelector(sel_zoomInStandby);
  v473[190] = v282;
  v474[190] = @"ZoomInStandby";
  v281 = NSStringFromSelector(sel_zoomShowedBanner);
  v473[191] = v281;
  v474[191] = @"ZoomShowedBanner";
  v280 = NSStringFromSelector(sel_zoomKeyboardShortcutsEnabled);
  v473[192] = v280;
  v474[192] = @"ZoomShouldUseKeyboardShortcutsPreference";
  v279 = NSStringFromSelector(sel_zoomAdjustZoomLevelKbShortcutEnabled);
  v473[193] = v279;
  v474[193] = @"ZoomAdjustZoomLevelKeyboardShortcutEnabledPreference";
  v278 = NSStringFromSelector(sel_zoomToggleZoomKbShortcutEnabled);
  v473[194] = v278;
  v474[194] = @"ZoomToggleZoomKeyboardShortcutEnabledPreference";
  v277 = NSStringFromSelector(sel_zoomPanZoomKbShortcutEnabled);
  v473[195] = v277;
  v474[195] = @"ZoomPanZoomKeyboardShortcutEnabledPreference";
  v276 = NSStringFromSelector(sel_zoomResizeZoomWindowKbShortcutEnabled);
  v473[196] = v276;
  v474[196] = @"ZoomResizeZoomWindowKeyboardShortcutEnabledPreference";
  v275 = NSStringFromSelector(sel_zoomSwitchZoomModeKbShortcutEnabled);
  v473[197] = v275;
  v474[197] = @"ZoomSwitchZoomModeKeyboardShortcutEnabledPreference";
  v274 = NSStringFromSelector(sel_zoomTempToggleZoomKbShortcutEnabled);
  v473[198] = v274;
  v474[198] = @"ZoomTempToggleZoomKeyboardShortcutEnabledPreference";
  v273 = NSStringFromSelector(sel_zoomScrollWheelKbShortcutEnabled);
  v473[199] = v273;
  v474[199] = @"ZoomScrollWheelKeyboardShortcutEnabledPreference";
  v272 = NSStringFromSelector(sel_zoomTrackpadGestureEnabled);
  v473[200] = v272;
  v474[200] = @"kAXZoomTrackpadGestureEnabledPreference";
  v271 = NSStringFromSelector(sel_zoomAutopannerShouldPanWithAcceleration);
  v473[201] = v271;
  v474[201] = @"ZoomAutopannerShouldPanWithAccelerationPreference";
  v270 = NSStringFromSelector(sel_zoomDebugDisableZoomLensScaleTransform);
  v473[202] = v270;
  v474[202] = @"ZoomDebugDisableZoomLensScaleTransform";
  v269 = NSStringFromSelector(sel_zoomDebugShowExternalFocusRect);
  v473[203] = v269;
  v474[203] = @"ZoomDebugShowExternalFocusRectPreference";
  v268 = NSStringFromSelector(sel_zoomShowWhileMirroring);
  v473[204] = v268;
  v474[204] = @"ZoomShowZoomWhileMirroringPreference";
  v267 = NSStringFromSelector(sel_guidedAccessUsageCount);
  v473[205] = v267;
  v474[205] = @"GuidedAccessUsageCount";
  v266 = NSStringFromSelector(sel_guidedAccessAXFeaturesEnabled);
  v473[206] = v266;
  v474[206] = @"kAXSGuidedAccessAXFeaturesEnabled";
  v265 = NSStringFromSelector(sel_guidedAccessAllowsUnlockWithTouchID);
  v473[207] = v265;
  v474[207] = @"GuidedAccessAllowsUnlockWithTouchID";
  v264 = NSStringFromSelector(sel_guidedAccessToneIdentifierForTimeRestrictionEvents);
  v473[208] = v264;
  v474[208] = @"GuidedAccessToneIdentifierForTimeRestrictionEvent";
  v263 = NSStringFromSelector(sel_guidedAccessShouldSpeakForTimeRestrictionEvents);
  v473[209] = v263;
  v474[209] = @"GuidedAccessSpeakForTimeRestrictionEvent";
  v262 = NSStringFromSelector(sel_guidedAccessOverrideIdleTime);
  v473[210] = v262;
  v474[210] = @"kAXSGuidedAccessOverrideIdleTimePreference";
  v261 = NSStringFromSelector(sel_guidedAccessAutoLockTimeInSeconds);
  v473[211] = v261;
  v474[211] = @"GuidedAccessAutoLockTimeInSeconds";
  v260 = NSStringFromSelector(sel_guidedAccessUserPrefersMirroringForExternalDisplays);
  v473[212] = v260;
  v474[212] = @"GuidedAccessUserPrefersMirroringForExternalDisplays";
  v259 = NSStringFromSelector(sel_gaxInternalSettingsUserAppProfile);
  v473[213] = v259;
  v474[213] = @"GAXInternalSettingUserAppProfile";
  v258 = NSStringFromSelector(sel_gaxInternalSettingsUserGlobalProfile);
  v473[214] = v258;
  v474[214] = @"GAXInternalSettingUserGlobalProfile";
  v257 = NSStringFromSelector(sel_gaxInternalSettingsSavedAccessibilityFeatures);
  v473[215] = v257;
  v474[215] = @"GAXGlobalProfileSavedAXFeatures";
  v256 = NSStringFromSelector(sel_gaxInternalSettingsSavedAccessibilityTripleClickOptions);
  v473[216] = v256;
  v474[216] = @"GAXGlobalProfileSavedAXTripleClickOptions";
  v255 = NSStringFromSelector(sel_gaxInternalSettingsUserConfiguredAppIDs);
  v473[217] = v255;
  v474[217] = @"GAXGlobalProfileUserConfiguredAppIds";
  v254 = NSStringFromSelector(sel_gaxInternalSettingsActiveAppOrientation);
  v473[218] = v254;
  v474[218] = @"GAXGlobalProfileActiveAppOrientation";
  v253 = NSStringFromSelector(sel_gaxInternalSettingsActiveAppID);
  v473[219] = v253;
  v474[219] = @"GAXGlobalProfileActiveAppID";
  v252 = NSStringFromSelector(sel_gaxInternalSettingsIsActiveAppSelfLocked);
  v473[220] = v252;
  v474[220] = @"AXGAXInternalSettingIsActiveAppSelfLocked";
  v251 = NSStringFromSelector(sel_gaxInternalSettingsTimeRestrictionHasExpired);
  v473[221] = v251;
  v474[221] = @"GAXInternalSettingTimeRestrictionHasExpired";
  v250 = NSStringFromSelector(sel_gaxInternalSettingsSystemDidRestartDueToLowBattery);
  v473[222] = v250;
  v474[222] = @"GAXGlobalProfileSystemDidRestartDueToLowBattery";
  v249 = NSStringFromSelector(sel_gaxInternalSettingsECID);
  v473[223] = v249;
  v474[223] = @"GAXGlobalProfileECID";
  v248 = NSStringFromSelector(sel_gaxInternalSettingsProductBuildVersion);
  v473[224] = v248;
  v474[224] = @"GAXGlobalProfileProductBuildVersion";
  v247 = NSStringFromSelector(sel_gaxInternalSettingsLastActivationDate);
  v473[225] = v247;
  v474[225] = @"GAXGlobalProfileLastActivationDate";
  v246 = NSStringFromSelector(sel_gaxInternalSettingsLastPasscodeSetDate);
  v473[226] = v246;
  v474[226] = @"GAXGlobalProfileLastPasscodeSetDate";
  v245 = NSStringFromSelector(sel_internalLoggingColorTheme);
  v473[227] = v245;
  v474[227] = @"InternalLoggingColorThemePreference";
  v244 = NSStringFromSelector(sel_validateSecondPartyApps);
  v473[228] = v244;
  v474[228] = @"ValidateSecondPartyApps";
  v243 = NSStringFromSelector(sel_includeBacktraceInLogs);
  v473[229] = v243;
  v474[229] = @"IncludeBacktraceInLogs";
  v242 = NSStringFromSelector(sel_ignoreAXAsserts);
  v473[230] = v242;
  v474[230] = @"IgnoreAXAsserts";
  v241 = NSStringFromSelector(sel_ignoreAXServerEntitlements);
  v473[231] = v241;
  v474[231] = @"IgnoreAXServerEntitlements";
  v240 = NSStringFromSelector(sel_logAXNotificationPosting);
  v473[232] = v240;
  v474[232] = @"LogAXNotificationPosting";
  v239 = NSStringFromSelector(sel_useNewAXBundleLoader);
  v473[233] = v239;
  v474[233] = @"UseNewAXBundleLoader";
  v238 = NSStringFromSelector(sel_shouldPerformValidationsAtRuntime);
  v473[234] = v238;
  v474[234] = @"shouldPerformValidationsAtRuntime";
  v237 = NSStringFromSelector(sel_skipHearingAidMFiAuth);
  v473[235] = v237;
  v474[235] = @"InternalSkipHearingAidMFiAuth";
  v236 = NSStringFromSelector(sel_enableHearingAidReporter);
  v473[236] = v236;
  v474[236] = @"InternalEnableHearingAidReporter";
  v235 = NSStringFromSelector(sel_guidedAccessDisallowDirectInactiveToActiveTransition);
  v473[237] = v235;
  v474[237] = @"AXSInternalGuidedAccessDisallowDirectInactiveToActiveTransition";
  v234 = NSStringFromSelector(sel_guidedAccessOverrideTimeRestrictionDuration);
  v473[238] = v234;
  v474[238] = @"AXSInternalGuidedAccessOverrideTimeRestrictionDuration";
  v233 = NSStringFromSelector(sel_guidedAccessEnableExperimentalUI);
  v473[239] = v233;
  v474[239] = @"AXSInternalGuidedAccessEnableExperimentalUI";
  v232 = NSStringFromSelector(sel_speakCorrectionsEnabled);
  v473[240] = v232;
  v474[240] = @"SpeakCorrectionsEnabled";
  v231 = NSStringFromSelector(sel_tripleClickOrderedOptions);
  v473[241] = v231;
  v474[241] = @"AXSTripleClickUserOrderedPreference";
  v230 = NSStringFromSelector(sel__audioHardwareChannelLayout);
  v473[242] = v230;
  v474[242] = @"AXSAudioHardwareChannelLayoutsPreference";
  v229 = NSStringFromSelector(sel_showSpeechController);
  v473[243] = v229;
  v474[243] = @"ShowSpeechController";
  v228 = NSStringFromSelector(sel_speechControllerIdleOpacity);
  v473[244] = v228;
  v474[244] = @"SpeechControllerIdleOpacity";
  v227 = NSStringFromSelector(sel_speechControllerLongPressAction);
  v473[245] = v227;
  v474[245] = @"SpeechControllerLongPressAction";
  v226 = NSStringFromSelector(sel_speechControllerDoubleTapAction);
  v473[246] = v226;
  v474[246] = @"SpeechControllerDoubleTapAction";
  v225 = NSStringFromSelector(sel_quickSpeakHighlightOption);
  v473[247] = v225;
  v474[247] = @"QuickSpeakHighlightChoice";
  v224 = NSStringFromSelector(sel_quickSpeakWordHighlightColor);
  v473[248] = v224;
  v474[248] = @"AXSQuickSpeakWordHighlightColorPreference";
  v223 = NSStringFromSelector(sel_quickSpeakSentenceHighlightColor);
  v473[249] = v223;
  v474[249] = @"AXSQuickSpeakSentenceHighlightColorPreference";
  v222 = NSStringFromSelector(sel_quickSpeakUnderlineSentence);
  v473[250] = v222;
  v474[250] = @"QuickSpeakUnderlineSentence";
  v221 = NSStringFromSelector(sel_quickSpeakVolume);
  v473[251] = v221;
  v474[251] = @"QuickSpeakVolume";
  v220 = NSStringFromSelector(sel_quickSpeakSentenceHighlightOption);
  v473[252] = v220;
  v474[252] = @"QuickSpeakSentenceHighlight";
  v219 = NSStringFromSelector(sel_speechVoiceIdentifierForLanguage);
  v473[253] = v219;
  v474[253] = @"SpeechVoiceIdentifierForLanguage";
  v218 = NSStringFromSelector(sel_userDidSelectVoiceForLanguage);
  v473[254] = v218;
  v474[254] = @"UserDidSelectVoiceForLanguage";
  v217 = NSStringFromSelector(sel_quickSpeakNubbitNormalizedPosition);
  v473[255] = v217;
  v474[255] = @"QuickSpeakNubbitNormalizedPosition";
  v216 = NSStringFromSelector(sel_siriAutoUpdateListInitialized);
  v473[256] = v216;
  v474[256] = @"SiriAutoUpdateListInitializedPreference";
  v215 = NSStringFromSelector(sel_letterFeedbackEnabled);
  v473[257] = v215;
  v474[257] = @"LetterFeedbackEnabled";
  v214 = NSStringFromSelector(sel_phoneticFeedbackEnabled);
  v473[258] = v214;
  v474[258] = @"PhoneticFeedbackEnabled";
  v213 = NSStringFromSelector(sel_quickTypeWordFeedbackEnabled);
  v473[259] = v213;
  v474[259] = @"QuickTypeWordFeedback";
  v212 = NSStringFromSelector(sel_wordFeedbackEnabled);
  v473[260] = v212;
  v474[260] = @"WordFeedbackEnabled";
  v211 = NSStringFromSelector(sel_characterFeedbackDelayDuration);
  v473[261] = v211;
  v474[261] = @"CharacterFeedbackDelayPreference";
  v210 = NSStringFromSelector(sel_spokenContentDefaultFallbackLanguage);
  v473[262] = v210;
  v474[262] = @"SpokenContentDefaultFallbackLanguage";
  v209 = NSStringFromSelector(sel_spokenContentShouldUseLanguageDetection);
  v473[263] = v209;
  v474[263] = @"SpokenContentShouldUseLanguageDetection";
  v208 = NSStringFromSelector(sel_voiceOverHelpMode);
  v473[264] = v208;
  v474[264] = @"VoiceOverTouchHelpModePreference";
  v207 = NSStringFromSelector(sel_voiceOverNavigateImagesOption);
  v473[265] = v207;
  v474[265] = @"NavigateImagesPreference";
  v206 = NSStringFromSelector(sel_voiceOverPhoneticsFeedback);
  v473[266] = v206;
  v474[266] = @"VoiceOverTouchPhoneticsEnabledPreference";
  v205 = NSStringFromSelector(sel_voiceOverHardwareTypingFeedback);
  v473[267] = v205;
  v474[267] = @"VoiceOverTouchTypingHardwareFeedback";
  v204 = NSStringFromSelector(sel_voiceOverSoftwareTypingFeedback);
  v473[268] = v204;
  v474[268] = @"VoiceOverTouchTypingFeedback";
  v203 = NSStringFromSelector(sel_voiceOverBrailleGesturesTypingFeedback);
  v473[269] = v203;
  v474[269] = @"VoiceOverTouchTypingBrailleGesturesFeedback";
  v202 = NSStringFromSelector(sel_voiceOverCompactVoiceEnabled);
  v473[270] = v202;
  v474[270] = @"VoiceOverTouchPitchCompactVoice";
  v201 = NSStringFromSelector(sel_voiceOverHintsEnabled);
  v473[271] = v201;
  v474[271] = @"VoiceOverTouchHintsEnabled";
  v200 = NSStringFromSelector(sel_voiceOverPitch);
  v473[272] = v200;
  v474[272] = kAXSVoiceOverPitchPreference;
  v199 = NSStringFromSelector(sel_voiceOverSoundEffectsEnabled);
  v473[273] = v199;
  v474[273] = @"VoiceOverUseSoundEffects";
  v198 = NSStringFromSelector(sel_voiceOverHapticsEnabled);
  v473[274] = v198;
  v474[274] = @"VoiceOverHapticsEnabled";
  v197 = NSStringFromSelector(sel_voiceOverAlwaysTurnOnBluetooth);
  v473[275] = v197;
  v474[275] = @"AXSVoiceOverTurnOnBluetoothEnabled";
  v196 = NSStringFromSelector(sel_voiceOverSoundVolume);
  v473[276] = v196;
  v474[276] = @"VoiceOverSoundVolume";
  v195 = NSStringFromSelector(sel_voiceOverAdjustSoundVolumeIndependently);
  v473[277] = v195;
  v474[277] = @"VoiceOverAdjustSoundVolumeIndependently";
  v194 = NSStringFromSelector(sel_voiceOverHapticIntensity);
  v473[278] = v194;
  v474[278] = @"VoiceOverHapticIntensity";
  v193 = NSStringFromSelector(sel_voiceOverVerbosityEmojiSuffixEnabled);
  v473[279] = v193;
  v474[279] = @"VoiceOverVerbosityEmojiSuffixEnabledPreference";
  v192 = NSStringFromSelector(sel_voiceOverVerbosityEmojiFeedback);
  v473[280] = v192;
  v474[280] = @"VoiceOverVerbosityEmojiFeedbackPreference";
  v191 = NSStringFromSelector(sel_voiceOverSpeakingRateInRotorEnabled);
  v473[281] = v191;
  v474[281] = @"SpeakingRateInRotorEnabled";
  v190 = NSStringFromSelector(sel_voiceOverSpeakNotificationsEnabled);
  v473[282] = v190;
  v474[282] = @"SpeakNotificationInLockScreen";
  v189 = NSStringFromSelector(sel_voiceOverRotorItems);
  v473[283] = v189;
  v474[283] = @"VoiceOverTouchRotorItemsPreference";
  v188 = NSStringFromSelector(sel_voiceOverEditAppsActionEnabled);
  v473[284] = v188;
  v474[284] = @"VoiceOverEditAppsActionEnabledPreference";
  v187 = NSStringFromSelector(sel_voiceOverRotorUpdatesWithElement);
  v473[285] = v187;
  v474[285] = @"AXSVoiceOverRotorUpdatesWithElementPreference";
  v186 = NSStringFromSelector(sel_voiceOverSpeakActionConfirmation);
  v473[286] = v186;
  v474[286] = @"VoiceOverSpeakActionConfirmationPreference";
  v185 = NSStringFromSelector(sel_voiceOverQuickNavAnnouncementFeedback);
  v473[287] = v185;
  v474[287] = @"VoiceOverQuickNavAnnouncementFeedback";
  v184 = NSStringFromSelector(sel_voiceOverBrailleTableIdentifier);
  v473[288] = v184;
  v474[288] = @"voiceOverBrailleTableIdentifier";
  v183 = NSStringFromSelector(sel_voiceOverAlwaysUseNemethCodeForMathEnabled);
  v473[289] = v183;
  v474[289] = @"voiceOverAlwaysUseNemethCodeForMathEnabled";
  v182 = NSStringFromSelector(sel_voiceOverDefaultDialect);
  v473[290] = v182;
  v474[290] = @"com.apple.voiceovertouch.default.dialect";
  v181 = NSStringFromSelector(sel_voiceOverHandwritingWasNativeAutocorrectEnabled);
  v473[291] = v181;
  v474[291] = @"VoiceOverHandwritingWasNativeAutocorrectEnabled";
  v180 = NSStringFromSelector(sel_voiceOverSpeakingRateForLanguage_);
  v473[292] = v180;
  v474[292] = @"VoiceOverLanguageSpeakingRate";
  v179 = NSStringFromSelector(sel_voiceOverSpeakingRate);
  v473[293] = v179;
  v474[293] = *MEMORY[0x1E4FB93A0];
  v178 = NSStringFromSelector(sel_voiceOverActivationWorkaround);
  v473[294] = v178;
  v474[294] = @"VOActivationWorkaround";
  v177 = NSStringFromSelector(sel_voiceOverShowSoftwareKeyboardWithBraille);
  v473[295] = v177;
  v474[295] = @"VoiceOverShowSWKeyboardWithBraille";
  v176 = NSStringFromSelector(sel_voiceOverBrailleGradeTwoAutoTranslateEnabled);
  v473[296] = v176;
  v474[296] = @"VoiceOverShowGrade2AutoTranslate";
  v175 = NSStringFromSelector(sel_voiceOverSilenceAnnouncements);
  v473[297] = v175;
  v474[297] = @"VoiceOverSilenceAnnouncements";
  v174 = NSStringFromSelector(sel_voiceOverPreferredTVInteractionMode);
  v473[298] = v174;
  v474[298] = @"VoiceOverTouchTVInteractionMode";
  v173 = NSStringFromSelector(sel_voiceOverPrefersFollowFocusNavigationStyle);
  v473[299] = v173;
  v474[299] = @"VoiceOverTouchTVPrefersFollowFocusNavigationStyle";
  v172 = NSStringFromSelector(sel_voiceOverDescribedMedia);
  v473[300] = v172;
  v474[300] = @"VoiceOverTouchDescribedMedia";
  v171 = NSStringFromSelector(sel_voiceOverQuickSettings);
  v473[301] = v171;
  v474[301] = @"QuickSettings";
  v170 = NSStringFromSelector(sel_voiceOverCustomCommandProfile);
  v473[302] = v170;
  v474[302] = @"VoiceOverCustomCammndProfile";
  v169 = NSStringFromSelector(sel_voiceOverSpeakNonfocusableElementsAfterDelay);
  v473[303] = v169;
  v474[303] = @"VoiceOverSpeakNonfocusableElementsAfterDelay";
  v168 = NSStringFromSelector(sel_voiceOverExploreFocusAffectsNativeFocus);
  v473[304] = v168;
  v474[304] = @"VoiceOverExploreFocusAffectsNativeFocus";
  v167 = NSStringFromSelector(sel_voiceOverShouldOutputToHearingAid);
  v473[305] = v167;
  v474[305] = @"VoiceOverOutputToHearingAid";
  v166 = NSStringFromSelector(sel_customPronunciationSubstitutions);
  v473[306] = v166;
  v474[306] = kAXSCustomPronunciationSubstitutionsPreference;
  v165 = NSStringFromSelector(sel_voiceOverAlternativeVoiceIdentifier_);
  v473[307] = v165;
  v474[307] = @"AXSVoiceOverAlternativeVoicesPreference";
  v164 = NSStringFromSelector(sel_voiceOverPrefersCompact_);
  v473[308] = v164;
  v474[308] = @"AXSVoiceOverCompactVoicePreference";
  v163 = NSStringFromSelector(sel_voiceOverAudioDuckingEnabled);
  v473[309] = v163;
  v474[309] = @"VoiceOverTouchAudioDuckingEnabled";
  v162 = NSStringFromSelector(sel_voiceOverAudioFollowsHDMIAudio);
  v473[310] = v162;
  v474[310] = @"VoiceOverAudioFollowsHDMIAudio";
  v161 = NSStringFromSelector(sel_voiceOverIgnoreTrackpad);
  v473[311] = v161;
  v474[311] = @"VoiceOverIgnoreTrackpad";
  v160 = NSStringFromSelector(sel_voiceOverTouchBrailleDisplaySyncInputOutputTables);
  v473[312] = v160;
  v474[312] = @"AXSVoiceOverTouchBrailleDisplaySyncInputOutputTables";
  v159 = NSStringFromSelector(sel_voiceOverBrailleWordWrapEnabled);
  v473[313] = v159;
  v474[313] = @"VoiceOverBrailleWordWrapEnabled";
  v158 = NSStringFromSelector(sel_voiceOverBrailleDisconnectOnSleep);
  v473[314] = v158;
  v474[314] = @"VoiceOverBrailleDisplayDisconnectOnSleepPreference";
  v157 = NSStringFromSelector(sel_voiceOverBrailleAutoAdvanceDuration);
  v473[315] = v157;
  v474[315] = @"VoiceOverBrailleAutoAdvanceDuration";
  v156 = NSStringFromSelector(sel_voiceOverBrailleFormattingEnabled);
  v473[316] = v156;
  v474[316] = @"kAXSVoiceOverBrailleFormatting";
  v155 = NSStringFromSelector(sel_voiceOverUseRingerSwitchToControlNotificationOutput);
  v473[317] = v155;
  v474[317] = @"AXSVoiceOverRingerSwitchForNotificationsEnabled";
  v154 = NSStringFromSelector(sel_voiceOverBannerNotificationOutput);
  v473[318] = v154;
  v474[318] = @"AXSVoiceOverBannerNotificationOutput";
  v153 = NSStringFromSelector(sel_voiceOverLockedScreenNotificationOutput);
  v473[319] = v153;
  v474[319] = @"AXSVoiceOverLockScreenNotificationOutput";
  v152 = NSStringFromSelector(sel_voiceOverBrailleDisplays);
  v473[320] = v152;
  v474[320] = @"VoiceOverBrailleDisplays";
  v151 = NSStringFromSelector(sel_enableVoiceOverCaptions);
  v473[321] = v151;
  v474[321] = @"VoiceOverCaptionPanelEnabled";
  v150 = NSStringFromSelector(sel_syncPronunciationsWithCloudKit);
  v473[322] = v150;
  v474[322] = @"VoiceOverPronunciationCloudKitSyncingEnabled";
  v149 = NSStringFromSelector(sel_shouldCaptureVisionEngineDiagnosticsToDisk);
  v473[323] = v149;
  v474[323] = @"VisionEngineCaptureDiagnosticsToDisk";
  v148 = NSStringFromSelector(sel_voiceOverDelayUntilSpeakUnderTouch);
  v473[324] = v148;
  v474[324] = kAXSVoiceOverDelayUntilSpeakUnderTouch;
  v147 = NSStringFromSelector(sel_automaticAccessibilityEnabled);
  v473[325] = v147;
  v474[325] = @"AutomaticAccessibilityEnabled";
  v146 = NSStringFromSelector(sel_automaticAccessibilityIgnoreAppAccessibilityPreferred);
  v473[326] = v146;
  v474[326] = @"AutomaticAccessibilityIgnoreAppAccessibilityPreferred";
  v145 = NSStringFromSelector(sel_automaticAccessibilityVisualizationsEnabled);
  v473[327] = v145;
  v474[327] = @"AutomaticAccessibilityVisualizationsEnabled";
  v144 = NSStringFromSelector(sel_automaticAccessibilityModes);
  v473[328] = v144;
  v474[328] = @"AutomaticAccessibilityModes";
  v143 = NSStringFromSelector(sel_voiceOverSpeaksOverTelephoneCalls);
  v473[329] = v143;
  v474[329] = @"AXSVoiceOverSpeaksOverTelephoneCalls";
  v142 = NSStringFromSelector(sel_voiceOverFlashlightNotificationsEnabled);
  v473[330] = v142;
  v474[330] = @"AXSVoiceOverFlashlightNotificationsEnabled";
  v141 = NSStringFromSelector(sel_didTriggerSOSToday);
  v473[331] = v141;
  v474[331] = @"AXSDidTriggerSOSToday";
  v140 = NSStringFromSelector(sel_voiceOverSpeakTableColumnRowInformation);
  v473[332] = v140;
  v474[332] = @"AXSVoiceOverSpeakTableColumnRowInformationPreference";
  v139 = NSStringFromSelector(sel_voiceOverSpeakTableHeaders);
  v473[333] = v139;
  v474[333] = @"AXSVoiceOverSpeakTableHeadersPreference";
  v138 = NSStringFromSelector(sel_voiceOverTouchBrailleGesturesShouldUseLockedConfiguration);
  v473[334] = v138;
  v474[334] = @"VoiceOverBrailleGesturesShouldUseLockedConfiguration";
  v137 = NSStringFromSelector(sel_voiceOverTouchBrailleGesturesLockedOrientation);
  v473[335] = v137;
  v474[335] = @"VoiceOverBrailleGesturesLockedOrientation";
  v136 = NSStringFromSelector(sel_voiceOverTouchBrailleGesturesLockedTypingMode);
  v473[336] = v136;
  v474[336] = @"VoiceOverBrailleGesturesLockedTypingMode";
  v135 = NSStringFromSelector(sel_voiceOverTouchBrailleGesturesDidPlayCalibrationHint);
  v473[337] = v135;
  v474[337] = @"VoiceOverBrailleGesturesDidPlayCalibrationHint";
  v134 = NSStringFromSelector(sel_voiceOverDoubleTapInterval);
  v473[338] = v134;
  v474[338] = kAXSVoiceOverDoubleTapInterval;
  v133 = NSStringFromSelector(sel_voiceOverBrailleAlertDisplayDuration);
  v473[339] = v133;
  v474[339] = @"VoiceOverBrailleDisplayAlertDuration";
  v132 = NSStringFromSelector(sel_voiceOverBrailleAlertsEnabled);
  v473[340] = v132;
  v474[340] = @"AXSVoiceOverBrailleAlertsEnabled";
  v131 = NSStringFromSelector(sel_voiceOverBrailleAlertShowUntilDismissed);
  v473[341] = v131;
  v474[341] = @"AXSVoiceOverBrailleAlertShowUntilDismissed";
  v130 = NSStringFromSelector(sel_voiceOverBrailleKeyDebounceTimeout);
  v473[342] = v130;
  v474[342] = @"VoiceOverBrailleKeyDebounceTimeout";
  v129 = NSStringFromSelector(sel_voiceOverNavigationDirectionMode);
  v473[343] = v129;
  v474[343] = @"VoiceOverNavigationDirectionMode";
  v128 = NSStringFromSelector(sel_voiceOverKeyboardModifierChoice);
  v473[344] = v128;
  v474[344] = @"AXSVoiceOverKeyboardModifierChoicePreference";
  v127 = NSStringFromSelector(sel_voiceOverTouchBrailleShouldReverseDots);
  v473[345] = v127;
  v474[345] = @"AXSVoiceOverTouchShouldReverseDots";
  v126 = NSStringFromSelector(sel_voiceOverTouchBrailleGestureControl);
  v473[346] = v126;
  v474[346] = @"AXSVoiceOverTouchBrailleGestureControl";
  v125 = NSStringFromSelector(sel_voiceOverTouchBrailleShowTextStyleStatus);
  v473[347] = v125;
  v474[347] = @"AXSVoiceOverTouchBrailleShowTextStyleStatus";
  v124 = NSStringFromSelector(sel_voiceOverTouchBrailleShowGeneralStatus);
  v473[348] = v124;
  v474[348] = @"AXSVoiceOverTouchBrailleShowGeneralStatus";
  v123 = NSStringFromSelector(sel_voiceOverTouchUpdateBrailleWithoutConnectedDisplay);
  v473[349] = v123;
  v474[349] = @"AXSVoiceOverTouchUpdateBrailleWithoutConnectedDisplay";
  v122 = NSStringFromSelector(sel_voiceOverTouchPreferredBrailleTableIdentifiers);
  v473[350] = v122;
  v474[350] = @"AXSVoiceOverTouchBraillePreferredTableIdentifiers";
  v121 = NSStringFromSelector(sel_voiceOverShouldFocusEverywhere);
  v473[351] = v121;
  v474[351] = @"AXSSVoiceOverShouldFocusEverywhere";
  v120 = NSStringFromSelector(sel_voiceOverShouldSpeakDiscoveredText);
  v473[352] = v120;
  v474[352] = @"AXSVoiceOverShouldSpeakDiscoveredTextPreference";
  v119 = NSStringFromSelector(sel_voiceOverNeuralElementFeedback);
  v473[353] = v119;
  v474[353] = @"AXSVoiceOverSpeakDiscoveredTextFeedbackPreference";
  v118 = NSStringFromSelector(sel_voiceOverNumberFeedback);
  v473[354] = v118;
  v474[354] = @"AXSVoiceOverNumberFeedback";
  v117 = NSStringFromSelector(sel_voiceOverAutomaticButtonLabels);
  v473[355] = v117;
  v474[355] = @"AXSVoiceOverAutomaticButtonLabelsPreference";
  v116 = NSStringFromSelector(sel_voiceOverSoundAndHapticPreferences);
  v473[356] = v116;
  v474[356] = @"VoiceOverSoundsAndHaptics";
  v115 = NSStringFromSelector(sel_tapToSpeakTimeEnabled);
  v473[357] = v115;
  v474[357] = @"TapToSpeakTimeEnabled";
  v114 = NSStringFromSelector(sel_tapToSpeakTimeAvailability);
  v473[358] = v114;
  v474[358] = @"TapToSpeakTimeAvailability";
  v113 = NSStringFromSelector(sel_voiceOverTapticTimeMode);
  v473[359] = v113;
  v474[359] = @"VoiceOverTapticTimeMode";
  v112 = NSStringFromSelector(sel_voiceOverTapticTimeEncoding);
  v473[360] = v112;
  v474[360] = @"VoiceOverTapticTimeEncoding";
  v111 = NSStringFromSelector(sel_voiceOverTapticTimeSpeed);
  v473[361] = v111;
  v474[361] = @"VoiceOverTapticTimeSpeed";
  v110 = NSStringFromSelector(sel_tapticTimeInternalFlashScreenEnabled);
  v473[362] = v110;
  v474[362] = @"TapticTimeInternalFlashScreenEnabled";
  v109 = NSStringFromSelector(sel_voiceOverTapticChimesEnabled);
  v473[363] = v109;
  v474[363] = @"VoiceOverTapticChimesEnabled";
  v108 = NSStringFromSelector(sel_voiceOverTapticChimesAvailability);
  v473[364] = v108;
  v474[364] = @"VoiceOverTapticChimesAvailability";
  v107 = NSStringFromSelector(sel_voiceOverTapticChimesFrequencyEncoding);
  v473[365] = v107;
  v474[365] = @"VoiceOverTapticChimesFrequencyEncoding";
  v106 = NSStringFromSelector(sel_voiceOverTapticChimesSoundType);
  v473[366] = v106;
  v474[366] = @"VoiceOverTapticChimesSoundType";
  v105 = NSStringFromSelector(sel_voiceOverSpeakSecondsEncoding);
  v473[367] = v105;
  v474[367] = @"VoiceOverSpeakSecondsEncoding";
  v104 = NSStringFromSelector(sel_voiceOverCapitalLetterFeedback);
  v473[368] = v104;
  v474[368] = @"AXSVoiceOverCapitalLetterFeedbackPreference";
  v103 = NSStringFromSelector(sel_voiceOverDeletionFeedback);
  v473[369] = v103;
  v474[369] = @"AXSVoiceOverDeletionFeedbackPreference";
  uint64_t v102 = NSStringFromSelector(sel_voiceOverPunctuationLevel);
  v473[370] = v102;
  v474[370] = @"AXSVoiceOverPunctuationLevelPreference";
  v101 = NSStringFromSelector(sel_voiceOverPunctuationGroup);
  v473[371] = v101;
  v474[371] = @"AXSVoiceOverPunctuationGroupPreference";
  v100 = NSStringFromSelector(sel_voiceOverLinkFeedback);
  v473[372] = v100;
  v474[372] = @"AXSVoiceOverLinkFeedbackPreference";
  v99 = NSStringFromSelector(sel_voiceOverInlineTextCompletionAppearanceFeedback);
  v473[373] = v99;
  v474[373] = @"kAXSVoiceOverInlineTextCompletionAppearanceFeedbackPreference";
  v98 = NSStringFromSelector(sel_voiceOverInlineTextCompletionInsertionFeedback);
  v473[374] = v98;
  v474[374] = @"kAXSVoiceOverInlineTextCompletionInsertionFeedbackPreference";
  v97 = NSStringFromSelector(sel_voiceOverActionsFeedback);
  v473[375] = v97;
  v474[375] = @"AXSVoiceOverActionsFeedbackPreference";
  v96 = NSStringFromSelector(sel_voiceOverActionFeedbackFirstInListOnly);
  v473[376] = v96;
  v474[376] = @"AXSVoiceOverFirstInListOnlyActionsFeedback";
  v95 = NSStringFromSelector(sel_voiceOverContainerOutputFeedback);
  v473[377] = v95;
  v474[377] = @"AXSVoiceOverContainerOutputFeedbackPreference";
  v94 = NSStringFromSelector(sel_voiceOverMoreContentOutputFeedback);
  v473[378] = v94;
  v474[378] = @"AXSVoiceOverMoreContentOutputFeedbackPreference";
  long long v93 = NSStringFromSelector(sel_voiceOverRotorSummaryFeedback);
  v473[379] = v93;
  v474[379] = @"AXSVoiceOverRotorSummaryFeedbackPreference";
  long long v92 = NSStringFromSelector(sel_voiceOverDiscoveredSensitiveContentFeedback);
  v473[380] = v92;
  v474[380] = @"VoiceOverDiscoveredSensitiveContentFeedback";
  long long v91 = NSStringFromSelector(sel_voiceOverShouldDisallowUSBRestrictedMode);
  v473[381] = v91;
  v474[381] = @"VoiceOverShouldDisallowUSBRestrictedMode";
  long long v90 = NSStringFromSelector(sel_voiceOverUserDidReadUSBRestrictedModeAlert);
  v473[382] = v90;
  v474[382] = @"VoiceOverUserDidReadUSBRestrictedModeAlert";
  long long v89 = NSStringFromSelector(sel_voiceOverSelectedActivity);
  v473[383] = v89;
  v474[383] = @"AXSVoiceOverSelectedActivityPreference";
  long long v88 = NSStringFromSelector(sel_voiceOverDetectionModeItems);
  v473[384] = v88;
  v474[384] = @"VoiceOverDetectionModeItems";
  long long v87 = NSStringFromSelector(sel_liveRecognitionActive);
  v473[385] = v87;
  v474[385] = @"AXSLiveRecognitionActive";
  long long v86 = NSStringFromSelector(sel_liveRecognitionOverlayOpen);
  v473[386] = v86;
  v474[386] = @"AXSLiveRecognitionOverlayOpen";
  long long v85 = NSStringFromSelector(sel_enabledLiveRecognitionModes);
  v473[387] = v85;
  v474[387] = @"AXSEnabledLiveRecognitionModes";
  long long v84 = NSStringFromSelector(sel_imageCaptionGenderStrategy);
  v473[388] = v84;
  v474[388] = @"AXSImageCaptionGenderStrategy";
  long long v83 = NSStringFromSelector(sel_liveRegionStatusForWebOrApp);
  v473[389] = v83;
  v474[389] = @"AXSVoiceOverLiveRegionAppStatus";
  long long v82 = NSStringFromSelector(sel_imageCaptioningDisabledApps);
  v473[390] = v82;
  v474[390] = @"AXSImageCaptioningDisabledApps";
  long long v81 = NSStringFromSelector(sel_voiceOverDirectTouchEnabledApps);
  v473[391] = v81;
  v474[391] = @"AXSVoiceOverDirectTouchEnabledApps";
  long long v80 = NSStringFromSelector(sel_voiceOverSceneDescriptionsEnabled);
  v473[392] = v80;
  v474[392] = @"AXSSceneDescriptions";
  long long v79 = NSStringFromSelector(sel_voiceOverSoundCurtain);
  v473[393] = v79;
  v474[393] = @"AXSVoiceOverSoundCurtain";
  long long v78 = NSStringFromSelector(sel_voiceOverNavigationStyle);
  v473[394] = v78;
  v474[394] = @"AXSVoiceOverNavigationStyle";
  long long v77 = NSStringFromSelector(sel_voiceOverHandGesturesEnabled);
  v473[395] = v77;
  v474[395] = @"VoiceOverWatchHandGestures";
  long long v76 = NSStringFromSelector(sel_voiceOverHandGesturesActionCustomizations);
  v473[396] = v76;
  v474[396] = @"VoiceOverWatchHandGesturesActionCustomizations";
  long long v75 = NSStringFromSelector(sel_voiceOverMediaDuckingAmount);
  v473[397] = v75;
  v474[397] = @"VoiceOverTouchMediaDuckingVolume";
  long long v74 = NSStringFromSelector(sel_voiceOverMediaDuckingMode);
  v473[398] = v74;
  v474[398] = @"VoiceOverTouchMediaDuckingMode";
  long long v73 = NSStringFromSelector(sel_remoteHandGestureCustomizedActions);
  v473[399] = v73;
  v474[399] = @"RemoteHandGestureCustomizedActions";
  long long v72 = NSStringFromSelector(sel_zoomHandGesturesEnabled);
  v473[400] = v72;
  v474[400] = @"ZoomWatchHandGestures";
  long long v71 = NSStringFromSelector(sel_zoomHandGesturesActionCustomizations);
  v473[401] = v71;
  v474[401] = @"ZoomWatchHandGesturesActionCustomizations";
  long long v70 = NSStringFromSelector(sel_allowHearingAidControlOnLockScreen);
  v473[402] = v70;
  v474[402] = @"HearingAidControlAvailableOnLockScreen";
  long long v69 = NSStringFromSelector(sel_shouldStreamToLeftAid);
  v473[403] = v69;
  v474[403] = @"HearingAidStreamToLeft";
  long long v68 = NSStringFromSelector(sel_shouldStreamToRightAid);
  v473[404] = v68;
  v474[404] = @"HearingAidStreamToRight";
  long long v67 = NSStringFromSelector(sel_independentHearingAidSettings);
  v473[405] = v67;
  v474[405] = @"HearingAidEarIndependencePreference";
  long long v66 = NSStringFromSelector(sel_shouldFlashForAlertInSilentMode);
  v473[406] = v66;
  v474[406] = @"LEDFlashOnRingerSwitchSilent";
  long long v65 = NSStringFromSelector(sel_shouldFlashWhileUnlocked);
  v473[407] = v65;
  v474[407] = @"LEDFlashWhileUnlocked";
  long long v64 = NSStringFromSelector(sel_shouldSpeakMedicalPreamble);
  v473[408] = v64;
  v474[408] = @"SpeakMedicalPreamble";
  long long v63 = NSStringFromSelector(sel_shouldTTYMedicalPreamble);
  v473[409] = v63;
  v474[409] = @"TTYMedicalPreamble";
  long long v62 = NSStringFromSelector(sel_medicalPreamble);
  v473[410] = v62;
  v474[410] = @"SOSMedicalPreamble";
  v61 = NSStringFromSelector(sel_shouldLimitDisplayRefreshRate);
  v473[411] = v61;
  v474[411] = @"LimitDisplayRefreshRate";
  v60 = NSStringFromSelector(sel_didResetD22Preferences);
  v473[412] = v60;
  v474[412] = @"AXSDidResetD22Preferences";
  v59 = NSStringFromSelector(sel_leftRightBalanceValue);
  v473[413] = v59;
  v474[413] = @"LeftRightBalanceValue";
  v58 = NSStringFromSelector(sel_leftRightBalanceEnabled);
  v473[414] = v58;
  v474[414] = @"LeftRightBalanceEnabled";
  v57 = NSStringFromSelector(sel_localizationQACaptionShowFilePath);
  v473[415] = v57;
  v474[415] = @"LocCaptionShowFilePath";
  v56 = NSStringFromSelector(sel_localizationQACaptionShowUSString);
  v473[416] = v56;
  v474[416] = @"LocCaptionShowUSString";
  v55 = NSStringFromSelector(sel_localizationQACaptionShowLocalizedString);
  v473[417] = v55;
  v474[417] = @"LocCaptionShowLocalizedString";
  uint64_t v54 = NSStringFromSelector(sel_alexLocalAssetURL);
  v473[418] = v54;
  v474[418] = @"AXSAlexLocalAssetURL";
  uint64_t v53 = NSStringFromSelector(sel_touchAccommodationsEnabled);
  v473[419] = v53;
  v474[419] = @"TouchAccommodationsEnabledPreference";
  uint64_t v52 = NSStringFromSelector(sel_touchAccommodationsUsageConfirmed);
  v473[420] = v52;
  v474[420] = @"TouchAccommodationsUsageConfirmedPreference";
  id v51 = NSStringFromSelector(sel_touchAccommodationsTripleClickConfirmed);
  v473[421] = v51;
  v474[421] = @"AXSTouchAccommodationsTripleClickConfirmedPreference";
  int64x2_t v50 = NSStringFromSelector(sel_touchAccommodationsHoldDurationEnabled);
  v473[422] = v50;
  v474[422] = @"TouchAccommodationsHoldDurationEnabledPreference";
  v49 = NSStringFromSelector(sel_touchAccommodationsHoldDuration);
  v473[423] = v49;
  v474[423] = @"TouchAccommodationsHoldDurationPreference";
  uint64_t v48 = NSStringFromSelector(sel_touchAccommodationsAllowsSwipeGesturesToBypass);
  v473[424] = v48;
  v474[424] = @"TouchAccommodationsAllowsSwipeGesturesToBypassPreference";
  uint64_t v47 = NSStringFromSelector(sel_touchAccommodationsHoldDurationAllowsSwipeGesturesToBypass);
  v473[425] = v47;
  v474[425] = @"TouchAccommodationsHoldDurationAllowsSwipeGesturesToBypassPreference";
  uint64_t v46 = NSStringFromSelector(sel_touchAccommodationsHoldDurationSwipeGestureSensitivity);
  v473[426] = v46;
  v474[426] = @"TouchAccommodationsHoldDurationSwipeGestureSensitivityPreference";
  id v45 = NSStringFromSelector(sel_touchAccommodationsSwipeGestureMinimumDistance);
  v473[427] = v45;
  v474[427] = @"TouchAccommodationsHoldDurationSwipeGestureMinimumDistancePreference";
  int v44 = NSStringFromSelector(sel_touchAccommodationsIgnoreRepeatEnabled);
  v473[428] = v44;
  v474[428] = @"TouchAccommodationsIgnoreRepeatEnabledPreference";
  __int16 v43 = NSStringFromSelector(sel_touchAccommodationsIgnoreRepeatDuration);
  v473[429] = v43;
  v474[429] = @"TouchAccommodationsIgnoreRepeatDurationPreference";
  int v42 = NSStringFromSelector(sel_touchAccommodationsTapActivationMethod);
  v473[430] = v42;
  v474[430] = @"TouchAccommodationsTapActivationMethodPreference";
  uint64_t v41 = NSStringFromSelector(sel_touchAccommodationsTapActivationTimeout);
  v473[431] = v41;
  v474[431] = @"TouchAccommodationsTapActivationTimeOutPreference";
  uint64_t v40 = NSStringFromSelector(sel_stickyKeysEnabled);
  v473[432] = v40;
  v474[432] = @"StickyKeysEnabled";
  uint64_t v39 = NSStringFromSelector(sel_stickyKeysShiftToggleEnabled);
  v473[433] = v39;
  v474[433] = @"StickyKeysShiftToggleEnabled";
  uint64_t v38 = NSStringFromSelector(sel_stickyKeysBeepEnabled);
  v473[434] = v38;
  v474[434] = @"StickyKeysBeepEnabled";
  id v37 = NSStringFromSelector(sel_fullKeyboardAccessCommandMapData);
  v473[435] = v37;
  v474[435] = @"CommandMapData";
  uint64_t v36 = NSStringFromSelector(sel_fullKeyboardAccessFocusRingTimeout);
  v473[436] = v36;
  v474[436] = @"FocusRingTimeout";
  id v35 = NSStringFromSelector(sel_fullKeyboardAccessFocusRingTimeoutEnabled);
  v473[437] = v35;
  v474[437] = @"FocusRingTimeoutEnabled";
  uint64_t v34 = NSStringFromSelector(sel_fullKeyboardAccessLargeFocusRingEnabled);
  v473[438] = v34;
  v474[438] = @"FullKeyboardAccessLargeFocusRingEnabled";
  uint64_t v33 = NSStringFromSelector(sel_fullKeyboardAccessFocusRingHighContrastEnabled);
  v473[439] = v33;
  v474[439] = @"FullKeyboardAccessFocusRingHighContrastEnabled";
  CGPoint v32 = NSStringFromSelector(sel_fullKeyboardAccessFocusRingColor);
  v473[440] = v32;
  v474[440] = @"FullKeyboardAccessFocusRingColor";
  uint64_t v31 = NSStringFromSelector(sel_fullKeyboardAccessShouldShowTextEditingModeInstructions);
  v473[441] = v31;
  v474[441] = @"ShouldShowTextEditingModeInstructions";
  uint64_t v30 = NSStringFromSelector(sel_fullKeyboardAccessShouldShowDebugKeyCommandsView);
  v473[442] = v30;
  v474[442] = @"FullKeyboardAccessShouldShowDebugKeyCommandsViewPreference";
  __int16 v29 = NSStringFromSelector(sel_appValidationTestingMode);
  v473[443] = v29;
  v474[443] = @"AXSAppValidatingTestingPreference";
  CGFloat v28 = NSStringFromSelector(sel_isAXValidationRunnerCollectingValidations);
  v473[444] = v28;
  v474[444] = @"IsAXValidationRunnerCollectingValidations";
  __int16 v27 = NSStringFromSelector(sel_callAudioRoutingAutoAnswerDelay);
  v473[445] = v27;
  v474[445] = @"CallAudioRoutingAutoAnswerPreference";
  CGFloat v26 = NSStringFromSelector(sel_callAudioRoutingAutoAnswerEnabled);
  v473[446] = v26;
  v474[446] = @"CallAudioRoutingAutoAnswerEnabledPreference";
  uint64_t v25 = NSStringFromSelector(sel_voiceOverSleepOnWristDownPreference);
  v473[447] = v25;
  v474[447] = @"VoiceOverSleepOnWristDownPreference";
  long long v24 = NSStringFromSelector(sel_assistiveTouchSleepOnWristDownPreference);
  v473[448] = v24;
  v474[448] = @"AssistiveTouchSleepOnWristDownPreference";
  uint64_t v23 = NSStringFromSelector(sel_classicInvertColors);
  v473[449] = v23;
  v474[449] = @"AXSClassicInvertColorsPreference";
  unint64_t v22 = NSStringFromSelector(sel_backTapDoubleTapAction);
  v473[450] = v22;
  v474[450] = @"AXSBackTapDoubleTapAction";
  CGFloat v21 = NSStringFromSelector(sel_backTapTripleTapAction);
  v473[451] = v21;
  v474[451] = @"AXSBackTapTripleTapAction";
  double v20 = NSStringFromSelector(sel_backTapFalsePositiveAlertsEnabled);
  v473[452] = v20;
  v474[452] = @"AXSBackTapFalsePositiveAlertsEnabled";
  CGFloat v19 = NSStringFromSelector(sel_backTapRNNModelEnabled);
  v473[453] = v19;
  v474[453] = @"AXSBackTapRNNModelEnabled";
  uint64_t v18 = NSStringFromSelector(sel_backTapUsageCount);
  v473[454] = v18;
  v474[454] = @"AXSBackTapUsageCount";
  long long v17 = NSStringFromSelector(sel_assistiveTouchActionsBySoundAction);
  v473[455] = v17;
  v474[455] = @"AXSAssistiveTouchActionBySoundActionsPreference";
  long long v16 = NSStringFromSelector(sel_hoverTextActivationLockEnabled);
  v473[456] = v16;
  v474[456] = @"HoverTextActivationLock";
  id v4 = NSStringFromSelector(sel_hoverTextPreferredActivatorKey);
  v473[457] = v4;
  v474[457] = @"HoverTextActivatorKey";
  uint64_t v5 = NSStringFromSelector(sel_liveSpeechMaxRecentsCount);
  v473[458] = v5;
  v474[458] = @"AXSliveSpeechMaxRecentsCountPreference";
  unint64_t v6 = NSStringFromSelector(sel_perAppSettingsCustomizedAppIDs);
  v473[459] = v6;
  v474[459] = @"AXSPerAppSettingsCustomizedAppIDs";
  uint64_t v7 = NSStringFromSelector(sel_perAppSettingsStats);
  v473[460] = v7;
  v474[460] = @"AXSPerAppSettingsStats";
  uint64_t v8 = NSStringFromSelector(sel_audiogramIngestionLastModelAccess);
  v473[461] = v8;
  v474[461] = @"AXSAudiogramIngestionLastModelAccess";
  uint64_t v9 = NSStringFromSelector(sel_soundActionsLastModelAccess);
  v473[462] = v9;
  v474[462] = @"AXSSoundActionsLastModelAccess";
  int v10 = NSStringFromSelector(sel_soundDetectionLastModelAccess);
  v473[463] = v10;
  v474[463] = @"AXSoundDetectionLastModelAccess";
  BOOL v11 = NSStringFromSelector(sel_cameraButtonSensitivity);
  v473[464] = v11;
  v474[464] = @"CameraButtonSensitivity";
  uint64_t v12 = NSStringFromSelector(sel_startupSoundEnabled);
  v473[465] = v12;
  v474[465] = @"StartupSoundEnabled";
  long long v13 = NSStringFromSelector(sel_isAdaptiveVoiceShortcutsEnabled);
  v473[466] = v13;
  v474[466] = @"AdaptiveVoiceShortcuts";
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v474 forKeys:v473 count:467];
  long long v15 = (void *)SelectorToPreferenceKeyMap;
  SelectorToPreferenceKeyMap = v14;
}

uint64_t _accessibilitySupportSettingDidChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (_accessibilitySupportSettingDidChange_onceToken != -1) {
    dispatch_once(&_accessibilitySupportSettingDidChange_onceToken, &__block_literal_global_4636);
  }
  [(id)_accessibilitySupportSettingDidChange_Timer cancel];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___accessibilitySupportSettingDidChange_block_invoke_2;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  void v5[4] = a3;
  return [(id)_accessibilitySupportSettingDidChange_Timer afterDelay:v5 processBlock:0.1];
}

void sub_18D389B40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t AXSettingsReturnIntegerValue(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[AXSettings sharedInstance];
  uint64_t v5 = [v4 integerValueForPreferenceKey:v3 defaultValue:a2];

  return v5;
}

uint64_t AXSettingsReturnBoolValue(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[AXSettings sharedInstance];
  uint64_t v5 = [v4 BOOLValueForPreferenceKey:v3 defaultValue:a2];

  return v5;
}

double AXSettingsReturnDoubleValue(void *a1, double a2)
{
  id v3 = a1;
  id v4 = +[AXSettings sharedInstance];
  [v4 doubleValueForPreferenceKey:v3 defaultValue:a2];
  double v6 = v5;

  return v6;
}

id AXSettingsReturnObjectValueWithClass(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = a1;
  uint64_t v7 = +[AXSettings sharedInstance];
  uint64_t v8 = [v7 objectValueForPreferenceKey:v6 ofClass:a3 defaultValue:v5];

  return v8;
}

void sub_18D38DDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D392900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D392A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D394828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void sub_18D394EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D39553C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18D397824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D397F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D3994E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_18D39AE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D39B0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D39E348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D39E668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D39F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D39F92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double assistiveTouchXYScannerSpeedForNormalizedUserPreference(uint64_t a1)
{
  return *MEMORY[0x1E4F483D8] + (double)(a1 - 1) * *MEMORY[0x1E4F483C8];
}

uint64_t assistiveTouchXYScannerNormalizedUserPreferenceForSpeed(double a1)
{
  return (uint64_t)((a1 - *MEMORY[0x1E4F483D8]) / *MEMORY[0x1E4F483C8]) + 1;
}

double switchControlNormalizedHeadTrackingSensitivityForUserPreference(uint64_t a1)
{
  return ((double)a1 - (double)(unint64_t)*MEMORY[0x1E4F487D0])
       / (double)(unint64_t)(*MEMORY[0x1E4F487C8] - *MEMORY[0x1E4F487D0]);
}

unint64_t switchControlUserPreferenceForNormalizedHeadTrackingSensitivity(double a1)
{
  return llround((double)(unint64_t)*MEMORY[0x1E4F487D0]+ a1 * (double)(unint64_t)(*MEMORY[0x1E4F487C8] - *MEMORY[0x1E4F487D0]));
}

double switchControlNormalizedHeadTrackingMovementToleranceInJoystickModeForUserPreference(uint64_t a1)
{
  return ((double)a1 - (double)(unint64_t)*MEMORY[0x1E4F487C0])
       / (double)(unint64_t)(*MEMORY[0x1E4F487B8] - *MEMORY[0x1E4F487C0]);
}

unint64_t switchControlUserPreferenceForNormalizedHeadTrackingMovementToleranceInJoystickMode(double a1)
{
  return llround((double)(unint64_t)*MEMORY[0x1E4F487C0]+ a1 * (double)(unint64_t)(*MEMORY[0x1E4F487B8] - *MEMORY[0x1E4F487C0]));
}

double assistiveTouchNormalizedMotionTrackerSmoothingBufferSizeForUserPreference(unint64_t a1)
{
  return ((double)a1 - (double)(unint64_t)*MEMORY[0x1E4F48450])
       / (double)(unint64_t)(*MEMORY[0x1E4F48448] - *MEMORY[0x1E4F48450]);
}

unint64_t assistiveTouchUserPreferenceForNormalizedMotionTrackerSmoothingBufferSize(double a1)
{
  return llround((double)(unint64_t)*MEMORY[0x1E4F48450]+ a1 * (double)(unint64_t)(*MEMORY[0x1E4F48448] - *MEMORY[0x1E4F48450]));
}

void sub_18D3A2430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AXShouldAskBeforeDisablingTransportMethods()
{
  if (_AXSAssistiveTouchScannerEnabled()) {
    return 1;
  }
  if (!_AXSVoiceOverTouchEnabled()) {
    return 0;
  }
  uint64_t v1 = +[AXSettings sharedInstance];
  uint64_t v2 = [v1 voiceOverBrailleDisplays];
  BOOL v0 = [v2 count] != 0;

  return v0;
}

BOOL AXShouldHideVoiceOverRotorItemFromSettings(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 objectForKey:@"RotorItem"];
  int v3 = [v2 isEqualToString:*MEMORY[0x1E4F486F0]];

  if (v3 && !AXIsAnyPreferredLanguageRTL()
    || ([v1 objectForKey:@"RotorItem"],
        id v4 = objc_claimAutoreleasedReturnValue(),
        char v5 = [v4 isEqualToString:*MEMORY[0x1E4F486C8]],
        v4,
        (v5 & 1) != 0))
  {
    BOOL v6 = 1;
  }
  else
  {
    uint64_t v7 = [v1 objectForKeyedSubscript:@"RotorItem"];
    if ([v7 isEqualToString:*MEMORY[0x1E4F48668]])
    {
    }
    else
    {
      uint64_t v8 = [v1 objectForKeyedSubscript:@"RotorItem"];
      int v9 = [v8 isEqualToString:*MEMORY[0x1E4F48660]];

      if (!v9)
      {
        BOOL v6 = 0;
        goto LABEL_10;
      }
    }
    int v10 = (void *)_AXSVoiceOverTouchCopyBrailleLanguageRotorItems();
    BOOL v6 = [v10 count] == 0;
  }
LABEL_10:

  return v6;
}

id AXSystemActionIconTypes()
{
  objc_msgSend(MEMORY[0x1E4F1CA80], "setWithObjects:", @"__NONE__", @"AXAssistiveTouchIconTypeTripleClick", @"AXAssistiveTouchIconTypeMultitasking", @"AXAssistiveTouchIconTypeControlCenter", @"AXAssistiveTouchIconTypeHome", @"AXAssistiveTouchIconTypeLockScreen", @"AXAssistiveTouchIconTypeMute", @"AXAssistiveTouchIconTypeNotificationCenter", @"AXAssistiveTouchIconTypeReachability", @"AXAssistiveTouchIconTypeScreenshot", @"AXAssistiveTouchIconTypeShake", @"AXAssistiveTouchIconTypeSiri", @"AXAssistiveTouchIconTypeSpotlight", @"AXAssistiveTouchIconTypeCommandAndControl", @"AXAssistiveTouchIconTypeVolumeUp", @"AXAssistiveTouchIconTypeVolumeDown", @"AXAssistiveTouchIconTypeScrollUp",
    @"AXAssistiveTouchIconTypeScrollDown",
    @"AXAssistiveTouchIconTypeAssistiveTouch",
    @"AXAssistiveTouchIconTypeClassicInvert",
    @"AXAssistiveTouchIconTypeColorFilters",
    @"AXAssistiveTouchIconTypeMagnifier",
    @"AXAssistiveTouchIconTypeVoiceOver",
    @"AXAssistiveTouchIconTypeSmartInvert",
    @"AXAssistiveTouchIconTypeZoom",
    @"AXAssistiveTouchIconTypeZoomController",
    @"AXAssistiveTouchIconTypeSpeakScreen",
    @"AXAssistiveTouchIconTypeOrientation",
    @"AXAssistiveTouchIconTypeCamera",
    @"AXAssistiveTouchIconTypeTorch",
    @"AXAssistiveTouchIconTypeBackgroundSounds",
    @"AXAssistiveTouchIconTypeDetectionMode",
    @"AXAssistiveTouchIconTypeFrontFacingCamera",
    0,
    @"AXAssistiveTouchIconTypeControlCenter",
    @"AXAssistiveTouchIconTypeMultitasking",
    @"AXAssistiveTouchIconTypeTripleClick",
  BOOL v0 = MEMORY[0x1E4F1CA80]);
  if (AXRuntimeCheck_SupportsNearbyDeviceControl()) {
    [v0 addObject:@"AXAssistiveTouchIconTypeNearbyDeviceControl"];
  }
  if (AXDeviceSupportsWatchRemoteScreen()) {
    [v0 addObject:@"AXAssistiveTouchIconTypeWatchRemoteScreen"];
  }
  if (AXHasCapability(@"LiveTranscription")) {
    [v0 addObject:@"AXAssistiveTouchIconTypeLiveCaptions"];
  }
  [v0 addObject:@"AXAssistiveTouchIconTypeLiveSpeech"];
  if (AXDeviceHasStaccato())
  {
    [v0 addObject:@"AXAssistiveTouchIconTypeActionButton"];
    [v0 removeObject:@"AXAssistiveTouchIconTypeMute"];
  }
  if (AXDeviceSupportsPhotosensitiveMitigation()) {
    [v0 addObject:@"AXAssistiveTouchIconTypeDimFlashingLights"];
  }
  if (AXDeviceSupportsMotionCues()) {
    [v0 addObject:@"AXAssistiveTouchIconTypeMotionCues"];
  }
  if (AXDeviceSupportsHapticMusic()) {
    [v0 addObject:@"AXAssistiveTouchIconTypeHapticMusic"];
  }
  if (AXDeviceSupportsHoverTextTyping()) {
    [v0 addObject:@"AXAssistiveTouchIconTypeHoverTextTyping"];
  }
  if (AXHasCapability(@"AXClarityUI")) {
    [v0 addObject:@"AXAssistiveTouchIconTypeAssistiveAccess"];
  }
  if (AXHasCapability(@"AXVirtualTrackpad")) {
    [v0 addObject:@"AXAssistiveTouchIconTypeTrackpad"];
  }
  if (AXDeviceSupportsCameraButton())
  {
    [v0 addObject:@"AXAssistiveTouchIconTypeCameraButton"];
    [v0 addObject:@"AXAssistiveTouchIconTypeCameraButtonLightPress"];
    [v0 addObject:@"AXAssistiveTouchIconTypeCameraButtonDoubleLightPress"];
  }
  if (AXDeviceSupportsCameraButton() && AXDeviceHasGreyMatterEnabled()) {
    [v0 addObject:@"AXAssistiveTouchIconTypeVisualIntelligence"];
  }

  return v0;
}

uint64_t ___accessibilitySupportSettingDidChange_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F48318]);
  uint64_t v1 = [v0 initWithTargetSerialQueue:MEMORY[0x1E4F14428]];
  uint64_t v2 = _accessibilitySupportSettingDidChange_Timer;
  _accessibilitySupportSettingDidChange_Timer = v1;

  return MEMORY[0x1F41817F8](v1, v2);
}

void ___accessibilitySupportSettingDidChange_block_invoke_2(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:*MEMORY[0x1E4FB91D8]]
    && !_AXSInvertColorsEnabled())
  {
    id v1 = +[AXSettings sharedInstance];
    [v1 postNotificationForPreferenceKey:@"AXSClassicInvertColorsPreference"];
  }
}

Class __getTLToneManagerClass_block_invoke(uint64_t a1)
{
  ToneLibraryLibrary();
  Class result = objc_getClass("TLToneManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getTLToneManagerClass_block_invoke_cold_1();
  }
  getTLToneManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ToneLibraryLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!ToneLibraryLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    void v2[3] = __ToneLibraryLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E55884D0;
    uint64_t v4 = 0;
    ToneLibraryLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = ToneLibraryLibraryCore_frameworkLibrary;
  if (!ToneLibraryLibraryCore_frameworkLibrary) {
    ToneLibraryLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __ToneLibraryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ToneLibraryLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getTLToneIdentifierNoneSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)ToneLibraryLibrary();
  uint64_t result = dlsym(v2, "TLToneIdentifierNone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getTLToneIdentifierNoneSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkSCROBrailleDisplayDriverIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)ScreenReaderOutputLibrary();
  uint64_t result = dlsym(v2, "kSCROBrailleDisplayDriverIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkSCROBrailleDisplayDriverIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ScreenReaderOutputLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!ScreenReaderOutputLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    void v2[3] = __ScreenReaderOutputLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E55884E8;
    uint64_t v4 = 0;
    ScreenReaderOutputLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = ScreenReaderOutputLibraryCore_frameworkLibrary;
  if (!ScreenReaderOutputLibraryCore_frameworkLibrary) {
    ScreenReaderOutputLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __ScreenReaderOutputLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ScreenReaderOutputLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getkSCROBrailleDisplayMainSizeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)ScreenReaderOutputLibrary();
  uint64_t result = dlsym(v2, "kSCROBrailleDisplayMainSize");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkSCROBrailleDisplayMainSizeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t VoiceOverServicesLibraryCore()
{
  if (!VoiceOverServicesLibraryCore_frameworkLibrary) {
    VoiceOverServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  return VoiceOverServicesLibraryCore_frameworkLibrary;
}

uint64_t __VoiceOverServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VoiceOverServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getVOSVoiceOverGreyCommandInfoClass_block_invoke(uint64_t a1)
{
  long long v3 = 0;
  if (!VoiceOverServicesLibraryCore()) {
    __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_1(&v3);
  }
  Class result = objc_getClass("VOSVoiceOverGreyCommandInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_2();
  }
  getVOSVoiceOverGreyCommandInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t operator||()
{
  if (!operator||) {
    operator|| = _sl_dlopen();
  }
  return operator||;
}

uint64_t __ZoomServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  operator|| = result;
  return result;
}

Class __getZoomServicesGreyCommandInfoClass_block_invoke(uint64_t a1)
{
  long long v3 = 0;
  if (!operator||()) {
    __getZoomServicesGreyCommandInfoClass_block_invoke_cold_1(&v3);
  }
  Class result = objc_getClass("ZoomServicesGreyCommandInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getZoomServicesGreyCommandInfoClass_block_invoke_cold_2();
  }
  getZoomServicesGreyCommandInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBSIsReachabilityEnabledSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SpringBoardServicesLibrary();
  Class result = dlsym(v2, "SBSIsReachabilityEnabled");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSIsReachabilityEnabledSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t SpringBoardServicesLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    void v2[3] = __SpringBoardServicesLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5588530;
    uint64_t v4 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = SpringBoardServicesLibraryCore_frameworkLibrary;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary) {
    SpringBoardServicesLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getSBSSetReachabilityEnabledSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SpringBoardServicesLibrary();
  uint64_t result = dlsym(v2, "SBSSetReachabilityEnabled");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSSetReachabilityEnabledSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id AXLocalizedStringForHandGestureEventUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 1:
      int v10 = @"HAND_GESTURE_CLENCH";
      goto LABEL_7;
    case 2:
      int v10 = @"HAND_GESTURE_DOUBLE_CLENCH";
LABEL_7:
      BOOL v11 = AXParameterizedLocalizedString(1, v10, a3, a4, a5, a6, a7, a8, v8);
      goto LABEL_11;
    case 3:
      long long v13 = @"HAND_GESTURE_TAP";
      goto LABEL_10;
    case 4:
      long long v13 = @"HAND_GESTURE_DOUBLE_TAP";
LABEL_10:
      BOOL v11 = AXWatchControlEltonLocalizedStringForKey(v13);
LABEL_11:
      break;
    default:
      BOOL v11 = 0;
      break;
  }
  return v11;
}

double AXTapticTimeIntervalForTapType(unint64_t a1, float a2)
{
  double v2 = 0.0;
  if (a1 <= 6) {
    double v2 = dbl_18D4308E8[a1];
  }
  return v2 / a2;
}

uint64_t AXGetComponentsInOldSiriVoiceIdentifier()
{
  return MEMORY[0x1F4163FC8]();
}

uint64_t AXGetComponentsInSiriVoiceIdentifier()
{
  return TTSGetComponentsInNamedSiriVoiceIdentifier();
}

uint64_t _AXFeatureSupportsNonSightedUsage()
{
  if (_AXSVoiceOverTouchEnabled()) {
    return 1;
  }
  uint64_t result = _AXSAssistiveTouchScannerEnabled();
  if (result)
  {
    id v1 = +[AXSettings sharedInstance];
    uint64_t v2 = [v1 assistiveTouchScannerSpeechEnabled];

    return v2;
  }
  return result;
}

void sub_18D3A90E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id AXPerformPrivilegedAttributedStringTransformation(void *a1, uint64_t a2)
{
  id v3 = a1;
  if ([v3 isAXAttributedString])
  {
    uint64_t v4 = applyTransform(v3, a2);
  }
  else
  {
    uint64_t v4 = [v3 copy];
  }
  uint64_t v5 = (void *)v4;

  return v5;
}

id applyTransform(void *a1, uint64_t a2)
{
  v65[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  unint64_t v5 = a2 - 1;
  if (v5 >= 7)
  {

LABEL_6:
    uint64_t v9 = [v4 copy];
LABEL_7:
    id v10 = (id)v9;
    goto LABEL_8;
  }
  BOOL v6 = (void *)qword_1E55886E8[v5];
  uint64_t v7 = [v3 coalescedAttributes];
  uint64_t v8 = [v7 allKeys];
  LOBYTE(v6) = [v8 containsObject:*v6];

  if ((v6 & 1) == 0) {
    goto LABEL_6;
  }
  switch(v5)
  {
    case 0uLL:
      uint64_t v9 = performXPCTransformWithBlock(v4, (void *)*MEMORY[0x1E4F48AB8], &__block_literal_global_38, @"kbd");
      goto LABEL_7;
    case 1uLL:
      uint64_t v23 = v4;
      long long v24 = (void *)[objc_alloc(MEMORY[0x1E4F488F0]) initWithString:&stru_1EDC3DEF8];
      uint64_t v53 = MEMORY[0x1E4F143A8];
      uint64_t v54 = 3221225472;
      uint64_t v55 = (uint64_t)__performShareSheetLabelTransform_block_invoke_66;
      v56 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5588658;
      v57 = v23;
      id v59 = &__block_literal_global_59;
      id v25 = v24;
      id v58 = v25;
      CGFloat v26 = v23;
      [v26 enumerateAttributesUsingBlock:&v53];
      id v27 = v58;
      id v10 = v25;

      break;
    case 2uLL:
      uint64_t v12 = v4;
      uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F488F0]) initWithString:&stru_1EDC3DEF8];
      uint64_t v53 = MEMORY[0x1E4F143A8];
      uint64_t v54 = 3221225472;
      uint64_t v55 = (uint64_t)__performShareSheetValueTransform_block_invoke_3;
      v56 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5588658;
      v57 = v12;
      id v59 = &__block_literal_global_86;
      id v14 = v13;
      id v58 = v14;
      uint64_t v15 = v12;
      [v15 enumerateAttributesUsingBlock:&v53];
      id v16 = v58;
      id v10 = v14;

      break;
    case 3uLL:
      id v17 = v4;
      if (performTelephonyCarrierStringTransform_onceToken != -1) {
        dispatch_once(&performTelephonyCarrierStringTransform_onceToken, &__block_literal_global_88);
      }
      uint64_t v18 = (void *)[objc_alloc(NSClassFromString(&cfstr_Coretelephonyc.isa)) initWithQueue:performTelephonyCarrierStringTransform_TelephonyQueue];
      if (!v18)
      {
        CGFloat v19 = AXLogAppAccessibility();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
          applyTransform_cold_3(v19);
        }
      }
      id v64 = 0;
      double v20 = [v18 getSubscriptionInfoWithError:&v64];
      id v21 = v64;
      uint64_t v53 = 0;
      uint64_t v54 = (uint64_t)&v53;
      uint64_t v55 = 0x3032000000;
      v56 = __Block_byref_object_copy__13;
      v57 = __Block_byref_object_dispose__13;
      id v58 = 0;
      if (v21)
      {
        unint64_t v22 = AXLogAppAccessibility();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          applyTransform_cold_2((uint64_t)v21, v22);
        }
      }
      else
      {
        __int16 v43 = [v20 subscriptions];
        int v44 = [v43 firstObject];
        id v45 = [v44 context];
        id v63 = 0;
        uint64_t v46 = [v18 getLocalizedOperatorName:v45 error:&v63];
        unint64_t v22 = v63;
        uint64_t v47 = [v46 copy];
        uint64_t v48 = *(void **)(v54 + 40);
        *(void *)(v54 + 40) = v47;

        if (v22)
        {
          v49 = AXLogAppAccessibility();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
            applyTransform_cold_1((uint64_t)v22, v49);
          }
        }
      }

      int64x2_t v50 = (void *)[v17 copy];
      if (!*(void *)(v54 + 40)) {
        *(void *)(v54 + 40) = &stru_1EDC3DEF8;
      }
      v60[0] = MEMORY[0x1E4F143A8];
      v60[1] = 3221225472;
      v60[2] = __performTelephonyCarrierStringTransform_block_invoke_97;
      v60[3] = &unk_1E55886B0;
      id v10 = v50;
      id v61 = v10;
      long long v62 = &v53;
      [v17 enumerateAttributesUsingBlock:v60];
      v65[0] = *MEMORY[0x1E4F48B28];
      id v51 = [MEMORY[0x1E4F1C978] arrayWithObjects:v65 count:1];
      [v10 removeAttributes:v51];

      _Block_object_dispose(&v53, 8);
      break;
    case 4uLL:
      uint64_t v9 = performXPCTransformWithBlock(v4, (void *)*MEMORY[0x1E4F48AF0], &__block_literal_global_99, @"sociallayerd");
      goto LABEL_7;
    case 5uLL:
      id v28 = v4;
      id v10 = (id)[objc_alloc(MEMORY[0x1E4F488F0]) initWithString:&stru_1EDC3DEF8];
      LOBYTE(v53) = 0;
      objc_opt_class();
      __int16 v29 = [v28 attributeValueForKey:*MEMORY[0x1E4F48938]];
      uint64_t v30 = __UIAccessibilityCastAsClass();

      uint64_t v31 = [v30 longValue];
      LOBYTE(v53) = 0;
      objc_opt_class();
      CGPoint v32 = [v28 attributeValueForKey:*MEMORY[0x1E4F48940]];
      uint64_t v33 = __UIAccessibilityCastAsClass();

      uint64_t v34 = [v33 unsignedLongLongValue];
      id v35 = 0;
      char v36 = 1;
      id v37 = 0;
      if (!v31 || !v34) {
        goto LABEL_39;
      }
      id v35 = (const void *)MEMORY[0x192F9EC90](v31, v34, 9999);
      if (v35)
      {
        uint64_t v38 = [MEMORY[0x1E4F488F8] elementWithAXUIElement:v35];
        uint64_t v39 = [v38 visibleElements];
        id v37 = [v39 firstObject];

        if (v37)
        {
          uint64_t v40 = [v37 label];
          BOOL v41 = v40 == 0;

          if (!v41)
          {
            int v42 = [v37 label];
            [v10 appendString:v42];

            goto LABEL_40;
          }
        }
        char v36 = 0;
      }
      else
      {
        id v37 = 0;
      }
LABEL_39:
      uint64_t v52 = [v28 string];
      [v10 appendString:v52];

      if (v36) {
        goto LABEL_41;
      }
LABEL_40:
      CFRelease(v35);
LABEL_41:

      break;
    case 6uLL:
      uint64_t v9 = performXPCTransformWithBlock(v4, (void *)*MEMORY[0x1E4F48990], &__block_literal_global_122, @"sociallayerd");
      goto LABEL_7;
    default:
      goto LABEL_6;
  }
LABEL_8:

  return v10;
}

void sub_18D3A9A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXPerformPrivilegedAttributedStringTransformations(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 isAXAttributedString])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        uint64_t v9 = 0;
        id v10 = v3;
        do
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          applyTransform(v10, objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v9), "unsignedIntegerValue", (void)v13));
          id v3 = (id)objc_claimAutoreleasedReturnValue();

          ++v9;
          id v10 = v3;
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }
  }
  id v11 = v3;

  return v11;
}

uint64_t AXGuidedAccessGetAvailability()
{
  uint64_t v0 = +[AXBackBoardServer server];
  uint64_t v1 = [v0 guidedAccessAvailability];

  return v1;
}

void __performProactiveSuggestionTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 unsignedLongValue];
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FAE240];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __performProactiveSuggestionTransform_block_invoke_2;
    v7[3] = &unk_1E55885E0;
    id v8 = v4;
    [v6 requestLabelForProactiveCandidateWithSlotID:v5 completionHandler:v7];
  }
  else
  {
    (*((void (**)(id, void))v4 + 2))(v4, 0);
  }
}

uint64_t __performProactiveSuggestionTransform_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id performXPCTransformWithBlock(void *a1, void *a2, void *a3, void *a4)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = a3;
  id v10 = a4;
  id v11 = (void *)[v7 copy];
  uint64_t v12 = [v7 attributeValueForKey:v8];
  if (v12)
  {
    uint64_t v31 = 0;
    CGPoint v32 = &v31;
    uint64_t v33 = 0x3032000000;
    uint64_t v34 = __Block_byref_object_copy__13;
    id v35 = __Block_byref_object_dispose__13;
    id v36 = 0;
    long long v13 = dispatch_group_create();
    dispatch_group_enter(v13);
    dispatch_group_enter(v13);
    long long v14 = dispatch_get_global_queue(-32768, 0);
    dispatch_group_notify(v13, v14, &__block_literal_global_52_0);

    dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = __performXPCTransformWithBlock_block_invoke_2;
    v27[3] = &unk_1E5588608;
    uint64_t v30 = &v31;
    long long v16 = v15;
    id v28 = v16;
    id v17 = v13;
    __int16 v29 = v17;
    v9[2](v9, v12, v27);
    dispatch_time_t v18 = dispatch_time(0, 1000000000);
    if (dispatch_semaphore_wait(v16, v18))
    {
      _AXLogWithFacility();
    }
    else
    {
      if ([(id)v32[5] length])
      {
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        v23[2] = __performXPCTransformWithBlock_block_invoke_3;
        v23[3] = &unk_1E5588630;
        id v24 = v8;
        id v25 = v11;
        CGFloat v26 = &v31;
        [v25 enumerateAttributesUsingBlock:v23];
      }
      v37[0] = v8;
      CGFloat v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:1];
      [v11 removeAttributes:v19];
    }
    dispatch_group_leave(v17);
    double v20 = v29;
    id v21 = v11;

    _Block_object_dispose(&v31, 8);
  }

  return v11;
}

void sub_18D3AA024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __performXPCTransformWithBlock_block_invoke_2(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __performXPCTransformWithBlock_block_invoke_3(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [a2 allKeys];
  int v8 = [v7 containsObject:a1[4]];

  if (v8)
  {
    uint64_t v9 = (void *)a1[5];
    uint64_t v10 = *(void *)(*(void *)(a1[6] + 8) + 40);
    objc_msgSend(v9, "replaceCharactersInRange:withString:", a3, a4, v10);
  }
}

void __performShareSheetLabelTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [a2 unsignedLongValue];
  uint64_t v6 = AXLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [NSNumber numberWithUnsignedInt:v5];
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v7;
    _os_log_impl(&dword_18D308000, v6, OS_LOG_TYPE_DEFAULT, "Transforming slot id: %@", buf, 0xCu);
  }
  if (v5)
  {
    id SFAccessibilityClientClass = getSFAccessibilityClientClass();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __performShareSheetLabelTransform_block_invoke_61;
    v9[3] = &unk_1E55885E0;
    id v10 = v4;
    [SFAccessibilityClientClass requestLabelForActivityWithSlotID:v5 completionHandler:v9];
  }
  else
  {
    (*((void (**)(id, void))v4 + 2))(v4, 0);
  }
}

id getSFAccessibilityClientClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getSFAccessibilityClientClass_softClass;
  uint64_t v7 = getSFAccessibilityClientClass_softClass;
  if (!getSFAccessibilityClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSFAccessibilityClientClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getSFAccessibilityClientClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D3AA394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __performShareSheetLabelTransform_block_invoke_61(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = _AXApplicationNameLabelForBundleIdentifier(v3);
  uint64_t v5 = AXLogCommon();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl(&dword_18D308000, v5, OS_LOG_TYPE_DEFAULT, "Share sheet transform: %@/%@", (uint8_t *)&v7, 0x16u);
  }

  if (v4) {
    id v6 = v4;
  }
  else {
    id v6 = v3;
  }
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v6);
}

id _AXApplicationNameLabelForBundleIdentifier(void *a1)
{
  id v1 = a1;
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = (void (*)(id))getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr;
  __int16 v9 = getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr;
  if (!getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke;
    v5[3] = &unk_1E5585E30;
    void v5[4] = &v6;
    __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke((uint64_t)v5);
    uint64_t v2 = (void (*)(id))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2) {
    _AXApplicationNameLabelForBundleIdentifier_cold_1();
  }
  id v3 = v2(v1);

  return v3;
}

void sub_18D3AA580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __performShareSheetLabelTransform_block_invoke_66(id *a1)
{
  objc_msgSend(a1[4], "substringWithRange:");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = performXPCTransformWithBlock(v3, (void *)*MEMORY[0x1E4F48AE0], a1[6], @"sharingd");
  [a1[5] appendAXAttributedString:v2];
}

Class __getSFAccessibilityClientClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SharingLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __SharingLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5588678;
    uint64_t v5 = 0;
    SharingLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!SharingLibraryCore_frameworkLibrary) {
    __getSFAccessibilityClientClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SFAccessibilityClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSFAccessibilityClientClass_block_invoke_cold_2();
  }
  getSFAccessibilityClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SharingLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SharingLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!AXFrontBoardUtilsLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __AXFrontBoardUtilsLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5588690;
    uint64_t v6 = 0;
    AXFrontBoardUtilsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v2 = (void *)AXFrontBoardUtilsLibraryCore_frameworkLibrary;
  if (!AXFrontBoardUtilsLibraryCore_frameworkLibrary) {
    __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke_cold_1(v4);
  }
  if (v4[0]) {
    free(v4[0]);
  }
  uint64_t result = dlsym(v2, "AXApplicationNameLabelForBundleIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXApplicationNameLabelForBundleIdentifierSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

uint64_t __AXFrontBoardUtilsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AXFrontBoardUtilsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __performShareSheetValueTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 unsignedLongValue];
  if (v5)
  {
    id SFAccessibilityClientClass = getSFAccessibilityClientClass();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __performShareSheetValueTransform_block_invoke_2;
    v7[3] = &unk_1E55885E0;
    id v8 = v4;
    [SFAccessibilityClientClass requestLabelForActivityWithSlotID:v5 completionHandler:v7];
  }
  else
  {
    (*((void (**)(id, void))v4 + 2))(v4, 0);
  }
}

void __performShareSheetValueTransform_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AXApplicationNameLabelForBundleIdentifier(v3);
  id v5 = (id)v4;
  if (!v4) {
    uint64_t v4 = (uint64_t)v3;
  }
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v4);
}

void __performShareSheetValueTransform_block_invoke_3(id *a1)
{
  objc_msgSend(a1[4], "substringWithRange:");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = performXPCTransformWithBlock(v3, (void *)*MEMORY[0x1E4F48AE8], a1[6], @"sharingd");
  [a1[5] appendAXAttributedString:v2];
}

void __performTelephonyCarrierStringTransform_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("ax-telephony-retrieval", 0);
  id v1 = (void *)performTelephonyCarrierStringTransform_TelephonyQueue;
  performTelephonyCarrierStringTransform_TelephonyQueue = (uint64_t)v0;

  id v2 = [MEMORY[0x1E4F28B50] bundleWithPath:@"/System/Library/Frameworks/CoreTelephony.framework"];
  if (([v2 isLoaded] & 1) == 0) {
    [v2 load];
  }
}

void __performTelephonyCarrierStringTransform_block_invoke_97(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [a2 allKeys];
  int v8 = [v7 containsObject:*MEMORY[0x1E4F48B28]];

  if (v8)
  {
    __int16 v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    objc_msgSend(v9, "replaceCharactersInRange:withString:", a3, a4, v10);
  }
}

void __performSocialAttributionStringTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (audit_stringAXFrontBoardUtils_block_invoke_onceToken != -1) {
    dispatch_once(&audit_stringAXFrontBoardUtils_block_invoke_onceToken, &__block_literal_global_101);
  }
  uint64_t v6 = [(id)audit_stringAXFrontBoardUtils_block_invoke_proxy remoteService];
  if ([v6 conformsToProtocol:&unk_1EDC90B60])
  {
    id v7 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = __performSocialAttributionStringTransform_block_invoke_3;
      v12[3] = &unk_1E55885E0;
      id v13 = v5;
      [v7 accessibilityLabelForAttributionIdentifiers:v4 reply:v12];
      int v8 = v13;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || ![v4 length])
      {
        (*((void (**)(id, void))v5 + 2))(v5, 0);
        goto LABEL_14;
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __performSocialAttributionStringTransform_block_invoke_4;
      v10[3] = &unk_1E55885E0;
      id v11 = v5;
      [v7 accessibilityLabelForAttributionIdentifier:v4 reply:v10];
      int v8 = v11;
    }

LABEL_14:
    goto LABEL_15;
  }
  __int16 v9 = AXLogAppAccessibility();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    __performSocialAttributionStringTransform_block_invoke_cold_1(v9);
  }

  (*((void (**)(id, void))v5 + 2))(v5, 0);
LABEL_15:
}

uint64_t __performSocialAttributionStringTransform_block_invoke_2()
{
  dispatch_queue_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.Accessibility.SLDPillService", v0);
  id v2 = (void *)audit_stringAXFrontBoardUtils_block_invoke_sldServiceProxyQueue;
  audit_stringAXFrontBoardUtils_block_invoke_sldServiceProxyQueue = (uint64_t)v1;

  id SLDServiceProxyClass = getSLDServiceProxyClass();
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x2050000000;
  id v4 = (void *)getSLDPillServiceClass_softClass;
  uint64_t v16 = getSLDPillServiceClass_softClass;
  if (!getSLDPillServiceClass_softClass)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    _OWORD v12[2] = __getSLDPillServiceClass_block_invoke;
    v12[3] = &unk_1E5585E30;
    void v12[4] = &v13;
    __getSLDPillServiceClass_block_invoke((uint64_t)v12);
    id v4 = (void *)v14[3];
  }
  id v5 = v4;
  _Block_object_dispose(&v13, 8);
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = audit_stringAXFrontBoardUtils_block_invoke_sldServiceProxyQueue;
  int v8 = objc_alloc_init(AXSLDServiceProxyDelegateObject);
  uint64_t v9 = [SLDServiceProxyClass proxyForServiceClass:v6 targetSerialQueue:v7 delegate:v8];
  uint64_t v10 = (void *)audit_stringAXFrontBoardUtils_block_invoke_proxy;
  audit_stringAXFrontBoardUtils_block_invoke_proxCGFloat y = v9;

  return [(id)audit_stringAXFrontBoardUtils_block_invoke_proxy connect];
}

void sub_18D3AAF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSLDServiceProxyClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)getSLDServiceProxyClass_softClass;
  uint64_t v7 = getSLDServiceProxyClass_softClass;
  if (!getSLDServiceProxyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSLDServiceProxyClass_block_invoke;
    v3[3] = &unk_1E5585E30;
    v3[4] = &v4;
    __getSLDServiceProxyClass_block_invoke((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18D3AB06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __performSocialAttributionStringTransform_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __performSocialAttributionStringTransform_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class __getSLDServiceProxyClass_block_invoke(uint64_t a1)
{
  SocialLayerLibrary();
  Class result = objc_getClass("SLDServiceProxy");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSLDServiceProxyClass_block_invoke_cold_1();
  }
  getSLDServiceProxyClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void SocialLayerLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!SocialLayerLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __SocialLayerLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55886D0;
    uint64_t v2 = 0;
    SocialLayerLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!SocialLayerLibraryCore_frameworkLibrary) {
    SocialLayerLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __SocialLayerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SocialLayerLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getSLDPillServiceClass_block_invoke(uint64_t a1)
{
  SocialLayerLibrary();
  Class result = objc_getClass("SLDPillService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSLDPillServiceClass_block_invoke_cold_1();
  }
  getSLDPillServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __performCollaborationAttributionStringTransform_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (audit_stringSocialLayer_block_invoke_2_onceToken != -1) {
    dispatch_once(&audit_stringSocialLayer_block_invoke_2_onceToken, &__block_literal_global_124);
  }
  uint64_t v6 = [(id)audit_stringSocialLayer_block_invoke_2_proxy remoteService];
  if ([v6 conformsToProtocol:&unk_1EDC90BC0])
  {
    id v7 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __performCollaborationAttributionStringTransform_block_invoke_3;
      v9[3] = &unk_1E55885E0;
      id v10 = v5;
      [v7 accessibilityLabelForAttributionIdentifiers:v4 reply:v9];
    }
    else
    {
      (*((void (**)(id, void))v5 + 2))(v5, 0);
    }
  }
  else
  {
    int v8 = AXLogAppAccessibility();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      __performSocialAttributionStringTransform_block_invoke_cold_1(v8);
    }

    (*((void (**)(id, void))v5 + 2))(v5, 0);
  }
}

uint64_t __performCollaborationAttributionStringTransform_block_invoke_2()
{
  dispatch_queue_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.Accessibility.SLDCollaborationAttributionViewService", v0);
  uint64_t v2 = (void *)audit_stringSocialLayer_block_invoke_2_sldServiceProxyQueue;
  audit_stringSocialLayer_block_invoke_2_sldServiceProxyQueue = (uint64_t)v1;

  id SLDServiceProxyClass = getSLDServiceProxyClass();
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x2050000000;
  id v4 = (void *)getSLDCollaborationAttributionViewServiceClass_softClass;
  uint64_t v16 = getSLDCollaborationAttributionViewServiceClass_softClass;
  if (!getSLDCollaborationAttributionViewServiceClass_softClass)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    _OWORD v12[2] = __getSLDCollaborationAttributionViewServiceClass_block_invoke;
    v12[3] = &unk_1E5585E30;
    void v12[4] = &v13;
    __getSLDCollaborationAttributionViewServiceClass_block_invoke((uint64_t)v12);
    id v4 = (void *)v14[3];
  }
  id v5 = v4;
  _Block_object_dispose(&v13, 8);
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = audit_stringSocialLayer_block_invoke_2_sldServiceProxyQueue;
  int v8 = objc_alloc_init(AXSLDServiceProxyDelegateObject);
  uint64_t v9 = [SLDServiceProxyClass proxyForServiceClass:v6 targetSerialQueue:v7 delegate:v8];
  id v10 = (void *)audit_stringSocialLayer_block_invoke_2_proxy;
  audit_stringSocialLayer_block_invoke_2_proxCGFloat y = v9;

  return [(id)audit_stringSocialLayer_block_invoke_2_proxy connect];
}

void sub_18D3AB58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __performCollaborationAttributionStringTransform_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class __getSLDCollaborationAttributionViewServiceClass_block_invoke(uint64_t a1)
{
  SocialLayerLibrary();
  Class result = objc_getClass("SLDCollaborationAttributionViewService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSLDCollaborationAttributionViewServiceClass_block_invoke_cold_1();
  }
  getSLDCollaborationAttributionViewServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18D3AC010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id AXSwitchRecipeMappingSwitchUUIDs(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x1E4F1CA80];
  uint64_t v3 = [v1 mappings];
  id v4 = objc_msgSend(v2, "setWithCapacity:", objc_msgSend(v3, "count"));

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = objc_msgSend(v1, "mappings", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v11 = [v10 switchUUID];

        if (v11)
        {
          uint64_t v12 = [v10 switchUUID];
          [v4 addObject:v12];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }

  return v4;
}

id AXSwitchRecipeMappingNameForAction(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"Exit"])
  {
    uint64_t v2 = @"EXIT_RECIPE";
LABEL_15:
    uint64_t v3 = AXLocalizedString(v2);
    goto LABEL_16;
  }
  if ([v1 isEqualToString:@"Select"])
  {
    uint64_t v2 = @"SELECT_ITEM_AUTOSCANNING";
    goto LABEL_15;
  }
  if ([v1 isEqualToString:@"Gesture"])
  {
    uint64_t v2 = @"CUSTOM_GESTURE";
    goto LABEL_15;
  }
  if ([v1 isEqualToString:@"CenterTap"])
  {
    uint64_t v2 = @"CENTER_TAP";
    goto LABEL_15;
  }
  if ([v1 isEqualToString:@"RightToLeftSwipe"])
  {
    uint64_t v2 = @"RIGHT_TO_LEFT_SWIPE";
    goto LABEL_15;
  }
  if ([v1 isEqualToString:@"LeftToRightSwipe"])
  {
    uint64_t v2 = @"LEFT_TO_RIGHT_SWIPE";
    goto LABEL_15;
  }
  if ([v1 isEqualToString:@"HoldAtPoint"])
  {
    uint64_t v2 = @"HOLD_POINT";
    goto LABEL_15;
  }
  uint64_t v3 = 0;
LABEL_16:

  return v3;
}

uint64_t AXSwitchRecipeMappingActionAllowsLongPress(void *a1)
{
  return [a1 isEqualToString:@"HoldAtPoint"] ^ 1;
}

void sub_18D3B0730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D3B1764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_18D3B1AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void _AXSSetTestBuddyData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = a1;
  id v7 = a2;
  if (_AXSInUnitTestMode()) {
    +[AXBuddyDataPackage setTestData:v8 forModel:v7 hasHomeButton:a3 largeTextUsesExtendedRange:a4];
  }
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void SCATRemoveSwitchFromSettings(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v4 = +[AXSettings sharedInstance];
    uint64_t v2 = [v4 assistiveTouchSwitches];
    uint64_t v3 = (void *)[v2 mutableCopy];
    [v3 removeObject:v1];

    [v4 setAssistiveTouchSwitches:v3];
  }
}

void SCATAddOrUpdateSwitchToSettings(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = +[AXSettings sharedInstance];
    uint64_t v3 = [v2 assistiveTouchSwitches];
    id v4 = (void *)[v3 mutableCopy];

    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    id v7 = v5;
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)v13;
LABEL_4:
      uint64_t v10 = 0;
      while (1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v12 + 1) + 8 * v10);
        if (objc_msgSend(v1, "isEqual:", v11, (void)v12)) {
          break;
        }
        if (v8 == ++v10)
        {
          uint64_t v8 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
          if (v8) {
            goto LABEL_4;
          }
          id v7 = v5;
          goto LABEL_13;
        }
      }
      id v7 = v11;

      if (!v7) {
        goto LABEL_14;
      }
      [v5 removeObject:v7];
    }
LABEL_13:

LABEL_14:
    objc_msgSend(v5, "addObject:", v1, (void)v12);
    [v2 setAssistiveTouchSwitches:v5];
  }
}

void SCATAddOrUpdateCameraSwitchToSettings(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = +[AXSettings sharedInstance];
    uint64_t v3 = [v2 assistiveTouchCameraPointPickerSwitches];
    id v4 = (void *)[v3 mutableCopy];

    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    id v7 = v5;
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)v13;
LABEL_4:
      uint64_t v10 = 0;
      while (1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v12 + 1) + 8 * v10);
        if (objc_msgSend(v1, "isEqual:", v11, (void)v12)) {
          break;
        }
        if (v8 == ++v10)
        {
          uint64_t v8 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
          if (v8) {
            goto LABEL_4;
          }
          id v7 = v5;
          goto LABEL_13;
        }
      }
      id v7 = v11;

      if (!v7) {
        goto LABEL_14;
      }
      [v5 removeObject:v7];
    }
LABEL_13:

LABEL_14:
    objc_msgSend(v5, "addObject:", v1, (void)v12);
    [v2 setAssistiveTouchCameraPointPickerSwitches:v5];
  }
}

uint64_t SCATSwitchExistsWithName(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[AXSettings sharedInstance];
  uint64_t v3 = [v2 assistiveTouchSwitches];
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __SCATSwitchExistsWithName_block_invoke;
  v7[3] = &unk_1E55888A0;
  id v4 = v1;
  id v8 = v4;
  uint64_t v9 = &v10;
  [v3 enumerateObjectsUsingBlock:v7];
  uint64_t v5 = *((unsigned __int8 *)v11 + 24);

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_18D3B7010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __SCATSwitchExistsWithName_block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v5 = [a2 name];
  int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

id SCATNextAvailableSwitchName()
{
  dispatch_queue_t v0 = AXFormatInteger();
  id v7 = AXParameterizedLocalizedString(2, @"SWITCH_NAME_PREFIX", v1, v2, v3, v4, v5, v6, (uint64_t)v0);

  if (SCATSwitchExistsWithName(v7))
  {
    uint64_t v8 = 2;
    do
    {
      uint64_t v9 = AXFormatInteger();
      long long v16 = AXParameterizedLocalizedString(2, @"SWITCH_NAME_PREFIX", v10, v11, v12, v13, v14, v15, (uint64_t)v9);

      ++v8;
      id v7 = v16;
    }
    while ((SCATSwitchExistsWithName(v16) & 1) != 0);
  }
  else
  {
    long long v16 = v7;
  }

  return v16;
}

__CFString *SCATActionDescription(uint64_t a1)
{
  if (a1 <= 199)
  {
    uint64_t v2 = a1 - 100;
    Class result = @"activate";
    switch(v2)
    {
      case 0:
        return result;
      case 1:
        Class result = @"menu";
        break;
      case 2:
        Class result = @"run";
        break;
      case 3:
        Class result = @"select";
        break;
      case 4:
        Class result = @"step next";
        break;
      case 5:
        Class result = @"step previous";
        break;
      case 6:
        Class result = @"stop";
        break;
      case 7:
        Class result = @"voice shortcuts";
        break;
      case 8:
        Class result = @"apple watch remote screen";
        break;
      case 9:
        Class result = @"select and resume autoscanning";
        break;
      default:
LABEL_39:
        Class result = @"unknown";
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 200:
        Class result = @"app switcher";
        break;
      case 201:
        Class result = @"home";
        break;
      case 202:
        Class result = @"notifications";
        break;
      case 203:
        Class result = @"siri";
        break;
      case 204:
        Class result = @"volume down";
        break;
      case 205:
        Class result = @"volume up";
        break;
      case 206:
        Class result = @"3d touch";
        break;
      case 207:
        Class result = @"toggle dictation";
        break;
      case 208:
        Class result = @"accessibility shortcut";
        break;
      case 209:
        Class result = @"control center";
        break;
      case 210:
        Class result = @"escape";
        break;
      case 211:
        Class result = @"camera button";
        break;
      case 212:
        Class result = @"camera button light press";
        break;
      case 213:
        Class result = @"camera button double light press";
        break;
      case 214:
        Class result = @"visual intelligence";
        break;
      default:
        switch(a1)
        {
          case 300:
            Class result = @"ATV Select";
            break;
          case 301:
            Class result = @"ATV Menu";
            break;
          case 302:
            Class result = @"ATV Home";
            break;
          case 303:
            Class result = @"ATV Play/Pause";
            break;
          case 304:
            Class result = @"ATV Up";
            break;
          case 305:
            Class result = @"ATV Down";
            break;
          case 306:
            Class result = @"ATV Left";
            break;
          case 307:
            Class result = @"ATV Right";
            break;
          default:
            if (a1 != 400) {
              goto LABEL_39;
            }
            Class result = @"Active Hold and Drag";
            break;
        }
        break;
    }
  }
  return result;
}

BOOL SCATSwitchConfigurationRendersDeviceUnusable(char a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  uint64_t v3 = [v2 assistiveTouchSwitches];
  uint64_t v17 = 0;
  dispatch_time_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __SCATSwitchConfigurationRendersDeviceUnusable_block_invoke;
  void v8[3] = &unk_1E5588958;
  void v8[4] = &v9;
  v8[5] = &v13;
  v8[6] = &v17;
  [v3 enumerateObjectsUsingBlock:v8];
  if (a1) {
    goto LABEL_2;
  }
  uint64_t v5 = [v2 switchControlScanningStyle];
  if (v5)
  {
    if (v5 == 1)
    {
      if (!*((unsigned char *)v18 + 24)) {
        goto LABEL_2;
      }
    }
    else if (v5 != 2)
    {
      goto LABEL_2;
    }
    uint64_t v6 = v14;
  }
  else
  {
    uint64_t v6 = v18;
  }
  if (*((unsigned char *)v6 + 24))
  {
    BOOL v4 = 0;
    goto LABEL_12;
  }
LABEL_2:
  BOOL v4 = *((unsigned char *)v10 + 24) != 0;
LABEL_12:
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);

  return v4;
}

void sub_18D3B7588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void __SCATSwitchConfigurationRendersDeviceUnusable_block_invoke(void *a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 source];
  int v4 = [v3 isEqual:@"SwitchSourceScreen"];

  if (v4) {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  if ([v5 action] == 104 || objc_msgSend(v5, "action") == 105) {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  }
  if ([v5 action] == 103 || objc_msgSend(v5, "action") == 109) {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
}

void *SCATScannerSwitchActions()
{
  return &unk_1EDC632B8;
}

id SCATSystemSwitchActions()
{
  dispatch_queue_t v0 = [MEMORY[0x1E4F1CA48] arrayWithArray:&unk_1EDC632D0];
  [v0 addObject:&unk_1EDC62E68];
  [v0 addObject:&unk_1EDC62E80];
  [v0 addObject:&unk_1EDC62E98];
  [v0 addObject:&unk_1EDC62EB0];
  [v0 addObject:&unk_1EDC62EC8];
  uint64_t v1 = [MEMORY[0x1E4F79EF0] sharedInstance];
  uint64_t v2 = [v1 getActivePairedDevice];

  if (v2) {
    [v0 addObject:&unk_1EDC62EE0];
  }
  [v0 addObject:&unk_1EDC62EF8];
  [v0 addObject:&unk_1EDC62F10];
  if (MGGetBoolAnswer()) {
    [v0 addObject:&unk_1EDC62F28];
  }
  if (AXForceTouchAvailableAndEnabled()) {
    [v0 addObject:&unk_1EDC62F40];
  }
  [v0 addObject:&unk_1EDC62F58];
  [v0 addObject:&unk_1EDC62F70];
  if (AXDeviceSupportsCameraButton())
  {
    [v0 addObject:&unk_1EDC62F88];
    [v0 addObject:&unk_1EDC62FA0];
    [v0 addObject:&unk_1EDC62FB8];
  }
  if (AXDeviceSupportsCameraButton() && AXDeviceHasGreyMatterEnabled()) {
    [v0 addObject:&unk_1EDC62FD0];
  }

  return v0;
}

void *SCATATVRemoteSwitchActions()
{
  return &unk_1EDC632E8;
}

void *SCATHeadTrackingSwitchActions()
{
  return &unk_1EDC63300;
}

id SCATLocStringForAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 200:
      uint64_t v8 = @"SWITCH_ACTION_APP_SWITCHER_LABEL";
      goto LABEL_29;
    case 201:
      uint64_t v8 = @"SWITCH_ACTION_HOME_LABEL";
      goto LABEL_29;
    case 202:
      uint64_t v8 = @"SWITCH_ACTION_NOTIFICATION_CENTER_LABEL";
      goto LABEL_29;
    case 203:
      uint64_t v8 = @"SWITCH_ACTION_SIRI_LABEL";
      goto LABEL_29;
    case 204:
      uint64_t v8 = @"SWITCH_ACTION_VOLUME_DOWN_LABEL";
      goto LABEL_29;
    case 205:
      uint64_t v8 = @"SWITCH_ACTION_VOLUME_UP_LABEL";
      goto LABEL_29;
    case 206:
      uint64_t v8 = @"CUSTOMIZE_MENU_ForceTouch";
      goto LABEL_29;
    case 207:
      uint64_t v8 = @"SWITCH_ACTION_DICTATE_LABEL";
      goto LABEL_29;
    case 208:
      uint64_t v8 = @"SWITCH_ACTION_TRIPLE_CLICK";
      goto LABEL_29;
    case 209:
      uint64_t v8 = @"SWITCH_ACTION_CONTROL_CENTER_LABEL";
      goto LABEL_29;
    case 210:
      uint64_t v8 = @"SWITCH_ACTION_ESCAPE_LABEL";
      goto LABEL_29;
    case 211:
      uint64_t v8 = @"SWITCH_ACTION_CAMERA_BUTTON";
      goto LABEL_29;
    case 212:
      uint64_t v8 = @"SWITCH_ACTION_CAMERA_BUTTON_LIGHT_PRESS";
      goto LABEL_29;
    case 213:
      uint64_t v8 = @"SWITCH_ACTION_CAMERA_BUTTON_DOUBLE_LIGHT_PRESS";
      goto LABEL_29;
    case 214:
      uint64_t v8 = @"SWITCH_ACTION_VISUAL_INTELLIGENCE";
LABEL_29:
      uint64_t v9 = AXParameterizedLocalizedString(2, v8, a3, a4, a5, a6, a7, a8, v11);
      break;
    default:
      switch(a1)
      {
        case 'd':
          uint64_t v8 = @"SWITCH_ACTION_ACTIVATE_LABEL";
          goto LABEL_29;
        case 'e':
          uint64_t v8 = @"SWITCH_ACTION_MENU_LABEL";
          goto LABEL_29;
        case 'f':
          uint64_t v8 = @"SWITCH_ACTION_RUN_LABEL";
          goto LABEL_29;
        case 'g':
        case 'm':
          uint64_t v8 = @"SWITCH_ACTION_SELECT_LABEL";
          goto LABEL_29;
        case 'h':
          uint64_t v8 = @"SWITCH_ACTION_STEP_NEXT_LABEL";
          goto LABEL_29;
        case 'i':
          uint64_t v8 = @"SWITCH_ACTION_STEP_PREVIOUS_LABEL";
          goto LABEL_29;
        case 'j':
          uint64_t v8 = @"SWITCH_ACTION_STOP_LABEL";
          goto LABEL_29;
        case 'k':
          uint64_t v8 = @"SWITCH_ACTION_VOICE_SHORTCUTS_MENU_LABEL";
          goto LABEL_29;
        case 'l':
          uint64_t v8 = @"SWITCH_ACTION_APPLE_WATCH_REMOTE_SCREEN_MENU_LABEL";
          goto LABEL_29;
        default:
          if (a1 == 400)
          {
            uint64_t v8 = @"SWITCH_ACTION_ACTIVE_HOLD_AND_DRAG_LABEL";
            goto LABEL_29;
          }
          _AXLogWithFacility();
          uint64_t v9 = 0;
          break;
      }
      break;
  }

  return v9;
}

id SCATSwitchesWithSource(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[AXSettings sharedInstance];
  uint64_t v3 = [v2 assistiveTouchSwitches];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __SCATSwitchesWithSource_block_invoke;
  v7[3] = &unk_1E5588980;
  id v8 = v1;
  id v4 = v1;
  id v5 = [v3 objectsPassingTest:v7];

  return v5;
}

uint64_t __SCATSwitchesWithSource_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 source];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

id SCATSwitchesWithType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[AXSettings sharedInstance];
  uint64_t v3 = [v2 assistiveTouchSwitches];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __SCATSwitchesWithType_block_invoke;
  v7[3] = &unk_1E5588980;
  id v8 = v1;
  id v4 = v1;
  id v5 = [v3 objectsPassingTest:v7];

  return v5;
}

uint64_t __SCATSwitchesWithType_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 type];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

BOOL SCATIsMFIButtonDownValue(__IOHIDValue *a1)
{
  Element = IOHIDValueGetElement(a1);
  return IOHIDElementGetUsagePage(Element) == 9 && IOHIDValueGetIntegerValue(a1) > 0;
}

BOOL SCATIsKeyboardKeyEvent()
{
  return IOHIDEventGetType() == 3 && IOHIDEventGetIntegerValue() == 7;
}

uint64_t SCATIsATVRemoteButtonSwitchCandidateEvent()
{
  uint64_t result = SCATIsATVRemoteButtonEvent();
  if (result)
  {
    uint64_t IntegerValue = IOHIDEventGetIntegerValue();
    return IntegerValue == 4 || (unint64_t)(IntegerValue - 233) < 2 || IntegerValue == 205 || IntegerValue == 96;
  }
  return result;
}

uint64_t SCATIsATVRemoteButtonEvent()
{
  if (IOHIDEventGetType() != 3) {
    goto LABEL_6;
  }
  if (IOHIDEventGetIntegerValue() != 12)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      char v2 = IOHIDEventGetIntegerValue() == 134;
      return v2 & 1;
    }
LABEL_6:
    char v2 = 0;
    return v2 & 1;
  }
  unint64_t IntegerValue = IOHIDEventGetIntegerValue();
  int64x2_t v1 = vdupq_n_s64(IntegerValue);
  char v2 = vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18D4309E0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18D4309F0)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18D430A00), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18D430A10))))) | vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18D430A20), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_18D430A30)))) | (IntegerValue == 67 || (IntegerValue & 0xFFFFFFFFFFFFFFFELL) == 68 || IntegerValue - 233 < 2);
  return v2 & 1;
}

void *SCATATVRemoteDeviceMatchingDictionary()
{
  return &unk_1EDC63510;
}

BOOL SCATIsGamepadKeyEvent()
{
  return (IOHIDEventGetType() & 0xFFFFFFDF) == 3;
}

void sub_18D3B8238(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_18D3B9B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void sub_18D3BA824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVCVoiceShortcutClientClass_block_invoke(uint64_t a1)
{
  VoiceShortcutClientLibrary();
  Class result = objc_getClass("VCVoiceShortcutClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getVCVoiceShortcutClientClass_block_invoke_cold_1();
  }
  getVCVoiceShortcutClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void VoiceShortcutClientLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!VoiceShortcutClientLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __VoiceShortcutClientLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E5588A60;
    uint64_t v2 = 0;
    VoiceShortcutClientLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!VoiceShortcutClientLibraryCore_frameworkLibrary) {
    VoiceShortcutClientLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __VoiceShortcutClientLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VoiceShortcutClientLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getWFAccessibilityWorkflowRunnerClientClass_block_invoke(uint64_t a1)
{
  VoiceShortcutClientLibrary();
  Class result = objc_getClass("WFAccessibilityWorkflowRunnerClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getWFAccessibilityWorkflowRunnerClientClass_block_invoke_cold_1();
  }
  getWFAccessibilityWorkflowRunnerClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _AXMIDIHandleErrorOSStatus(int a1, uint64_t a2, void *a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v5 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v6 = *MEMORY[0x1E4F28760];
    id v7 = a3;
    id v8 = [v5 errorWithDomain:v6 code:a1 userInfo:0];
    uint64_t v9 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v10 = AXMIDIErrorDomain;
    uint64_t v11 = *MEMORY[0x1E4F28568];
    uint64_t v16 = *MEMORY[0x1E4F28A50];
    char v12 = (void *)[[NSString alloc] initWithFormat:@"%@", v7, v16, v11, v8];

    v17[1] = v12;
    uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:&v16 count:2];
    uint64_t v14 = [v9 errorWithDomain:v10 code:a2 userInfo:v13];

    AXMIDILogError(v14);
  }
  return a1 != 0;
}

void AXMIDILogError(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 code];
  if ((unint64_t)(v2 - 1) > 6) {
    uint64_t v3 = @"Unknown";
  }
  else {
    uint64_t v3 = off_1E5588A78[v2 - 1];
  }
  id v4 = objc_alloc(MEMORY[0x1E4F28E78]);
  id v5 = [v1 userInfo];
  uint64_t v6 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F28568]];
  id v7 = (void *)[v4 initWithFormat:@"AX MIDI Error: %@ - %@", v3, v6];

  id v8 = [v1 userInfo];

  uint64_t v9 = [v8 objectForKeyedSubscript:*MEMORY[0x1E4F28A50]];

  if (v9)
  {
    [v7 appendFormat:@" [Underlying Error: %@]", v9];
    unint64_t v10 = [v9 code] + 10844;
    if (v10 <= 0xE) {
      [v7 appendString:off_1E5588AB0[v10]];
    }
  }
  uint64_t v11 = AXLogMIDI();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    AXMIDILogError_cold_1((uint64_t)v7, v11);
  }
}

BOOL _AXMIDIHandlePropertyLookupError(int a1, void *a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1 != -10835 && a1)
  {
    id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:a1 userInfo:0];
    id v5 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v6 = AXMIDIErrorDomain;
    uint64_t v7 = *MEMORY[0x1E4F28568];
    uint64_t v12 = *MEMORY[0x1E4F28A50];
    id v8 = (void *)[[NSString alloc] initWithFormat:@"Error fetching MIDI property '%@'", v3, v12, v7, v4];
    v13[1] = v8;
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:2];
    unint64_t v10 = [v5 errorWithDomain:v6 code:5 userInfo:v9];

    AXMIDILogError(v10);
  }

  return a1 != 0;
}

__CFString *_AXMIDIStringProperty(MIDIObjectRef a1, const __CFString *a2, void *a3)
{
  CFStringRef str = 0;
  id v5 = a3;
  StringPropertCGFloat y = MIDIObjectGetStringProperty(a1, a2, &str);
  LODWORD(a2) = _AXMIDIHandlePropertyLookupError(StringProperty, v5);

  uint64_t v7 = (__CFString *)str;
  if (a2) {
    uint64_t v7 = 0;
  }
  id v8 = v7;

  return v8;
}

id _AXMIDIIntegerProperty(MIDIObjectRef a1, const __CFString *a2, void *a3)
{
  SInt32 outValue = 0;
  id v5 = a3;
  IntegerPropertCGFloat y = MIDIObjectGetIntegerProperty(a1, a2, &outValue);
  LOBYTE(a2) = _AXMIDIHandlePropertyLookupError(IntegerProperty, v5);

  if (a2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = [NSNumber numberWithInt:outValue];
  }

  return v7;
}

id _AXMIDIBooleanProperty(MIDIObjectRef a1, const __CFString *a2, void *a3)
{
  SInt32 outValue = 0;
  id v5 = a3;
  IntegerPropertCGFloat y = MIDIObjectGetIntegerProperty(a1, a2, &outValue);
  LOBYTE(a2) = _AXMIDIHandlePropertyLookupError(IntegerProperty, v5);

  if (a2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = [NSNumber numberWithInt:outValue];
  }

  return v7;
}

id AXMIDIEntityForEndpoint(MIDIEndpointRef a1)
{
  outEntitCGFloat y = 0;
  EntitCGFloat y = MIDIEndpointGetEntity(a1, &outEntity);
  uint64_t v2 = [NSString stringWithFormat:@"Unable to find entity for endpoint"];
  LOBYTE(Entity) = _AXMIDIHandleErrorOSStatus(Entity, 5, v2);

  if (Entity)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = [NSNumber numberWithUnsignedInt:outEntity];
  }

  return v3;
}

id AXMIDIDeviceForEntity(MIDIEntityRef a1)
{
  outOSStatus Device = 0;
  OSStatus Device = MIDIEntityGetDevice(a1, &outDevice);
  uint64_t v2 = [NSString stringWithFormat:@"Unable to find device for entity"];
  LOBYTE(Device) = _AXMIDIHandleErrorOSStatus(Device, 5, v2);

  if (Device)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = [NSNumber numberWithUnsignedInt:outDevice];
  }

  return v3;
}

id AXMIDIDeviceForEndpoint(MIDIEndpointRef a1)
{
  outEntitCGFloat y = 0;
  EntitCGFloat y = MIDIEndpointGetEntity(a1, &outEntity);
  uint64_t v2 = [NSString stringWithFormat:@"Unable to find entity for endpoint"];
  LOBYTE(Entity) = _AXMIDIHandleErrorOSStatus(Entity, 5, v2);

  if ((Entity & 1) != 0
    || (outOSStatus Device = 0,
        OSStatus Device = MIDIEntityGetDevice(outEntity, &outDevice),
        [NSString stringWithFormat:@"Unable to find device for entity"],
        id v4 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(Device) = _AXMIDIHandleErrorOSStatus(Device, 5, v4),
        v4,
        (Device & 1) != 0))
  {
    id v5 = 0;
  }
  else
  {
    id v5 = [NSNumber numberWithUnsignedInt:outDevice];
  }

  return v5;
}

uint64_t _AXIPCSendData(int a1, int a2, mach_msg_timeout_t a3, uint64_t a4, int a5, void *a6, _DWORD *a7)
{
  memset(&msg[4], 0, 32);
  *(_DWORD *)&msg[24] = 2;
  *(_DWORD *)&msg[28] = a2;
  int v17 = 1245184;
  uint64_t v18 = a4;
  int v19 = 16777472;
  int v20 = a5;
  uint64_t v21 = *MEMORY[0x1E4F14068];
  int v22 = a5;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(void *)&msg[16] = 0xD5AD200000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v12 = mach_msg((mach_msg_header_t *)msg, 275, 0x44u, 0x40u, reply_port, a3, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!v12)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v13 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 875318)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            uint64_t v13 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8]) {
                uint64_t v13 = 4294966996;
              }
              else {
                uint64_t v13 = *(unsigned int *)&msg[32];
              }
            }
          }
          else
          {
            uint64_t v13 = 4294966996;
          }
          goto LABEL_28;
        }
        uint64_t v13 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 56 && !*(_DWORD *)&msg[8] && HIBYTE(v17) == 1)
        {
          int v14 = v18;
          if (v18 == v20)
          {
            uint64_t v13 = 0;
            *a6 = *(void *)&msg[28];
            *a7 = v14;
            return v13;
          }
        }
      }
      else
      {
        uint64_t v13 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v13;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  if ((v13 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    goto LABEL_28;
  }
  return v13;
}

uint64_t _AXIPCSimpleSendDataWithFencePort(mach_port_name_t a1, int a2, int a3, mach_msg_timeout_t timeout, uint64_t a5, int a6)
{
  uint64_t v11 = 0;
  long long v13 = 0u;
  *(_OWORD *)name = 0u;
  int v12 = a2;
  DWORD1(v13) = 1245184;
  DWORD2(v13) = a3;
  int v14 = 1245184;
  uint64_t v15 = a5;
  int v16 = 16777472;
  int v17 = a6;
  uint64_t v18 = *MEMORY[0x1E4F14068];
  int v19 = a6;
  int v9 = -2147483629;
  name[1] = a1;
  uint64_t v11 = 0x3000D5AD4;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)&v9, 17, 0x50u, 0, 0, timeout, 0);
  if ((v7 - 268435459) <= 1)
  {
    if ((v9 & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], name[2]);
    }
    mach_msg_destroy((mach_msg_header_t *)&v9);
  }
  return v7;
}

uint64_t _AXIPCSendDataWithAsyncReply(mach_port_name_t a1, int a2, int a3, mach_msg_timeout_t timeout, uint64_t a5, int a6)
{
  uint64_t v11 = 0;
  long long v13 = 0u;
  *(_OWORD *)name = 0u;
  int v12 = a2;
  DWORD1(v13) = 1245184;
  DWORD2(v13) = a3;
  int v14 = 1376256;
  uint64_t v15 = a5;
  int v16 = 16777472;
  int v17 = a6;
  uint64_t v18 = *MEMORY[0x1E4F14068];
  int v19 = a6;
  int v9 = -2147483629;
  name[1] = a1;
  uint64_t v11 = 0x3000D5AD5;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)&v9, 17, 0x50u, 0, 0, timeout, 0);
  if ((v7 - 268435459) <= 1)
  {
    if ((v9 & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], name[2]);
    }
    mach_msg_destroy((mach_msg_header_t *)&v9);
  }
  return v7;
}

uint64_t (*_AXIPCServer_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 875222) >= 0xFFFFFFFC) {
    return __AXXIPC_AXIPCServer_subsystem[5 * (v1 - 875218) + 5];
  }
  else {
    return 0;
  }
}

void _XSendData(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 2 || *(_DWORD *)(a1 + 4) != 68)
  {
    int v5 = -304;
    goto LABEL_12;
  }
  if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112
    || *(unsigned char *)(a1 + 51) != 1
    || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a1 + 64))
  {
    int v5 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a1 + 68) || (unsigned int v4 = *(_DWORD *)(a1 + 72), v4 <= 7) || v4 - 8 <= 0x1F)
  {
    int v5 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v5;
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) = 0;
  uint64_t v6 = a2 + 52;
  *(_DWORD *)(a2 + 36) = 16777472;
  uint64_t v7 = a2 + 28;
  int v9 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v10 = *(unsigned int *)(a1 + 28);
  uint64_t v11 = *(void *)(a1 + 40);
  unsigned int v12 = *(_DWORD *)(a1 + 52);
  uint64_t v13 = *(void *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 104);
  v16[0] = *(_OWORD *)(a1 + 88);
  v16[1] = v14;
  int v15 = __AXXIPCSendData(v8, v9, v10, v11, v12, v7, v6, v13, v16);
  mig_deallocate(*(void *)(a1 + 40), *(unsigned int *)(a1 + 52));
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (!v15)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
    *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return;
  }
  *(_DWORD *)(a2 + 32) = v15;
LABEL_13:
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XSimpleSendDataWithFencePort(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 3 && *(_DWORD *)(a1 + 4) == 80)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(unsigned __int16 *)(a1 + 50) << 16 == 1114112
      && *(unsigned char *)(a1 + 63) == 1
      && (unsigned int v4 = *(_DWORD *)(a1 + 64), v4 == *(_DWORD *)(a1 + 76)))
    {
      if (!*(_DWORD *)(a1 + 80))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 84);
        if (v5 > 7 && v5 - 8 > 0x1F)
        {
          uint64_t v7 = *(unsigned int *)(a1 + 12);
          uint64_t v8 = *(unsigned int *)(a1 + 28);
          mach_port_name_t v9 = *(_DWORD *)(a1 + 40);
          uint64_t v10 = *(void *)(a1 + 52);
          uint64_t v11 = *(void *)(a1 + 92);
          long long v12 = *(_OWORD *)(a1 + 116);
          v13[0] = *(_OWORD *)(a1 + 100);
          v13[1] = v12;
          *(_DWORD *)(a2 + 32) = __AXXIPCSimpleSendDataWithFencePort(v7, v8, v9, v10, v4, v11, v13);
          mig_deallocate(*(void *)(a1 + 52), *(unsigned int *)(a1 + 64));
          *(void *)(a1 + 52) = 0;
          *(_DWORD *)(a1 + 64) = 0;
          return;
        }
      }
      int v6 = -309;
    }
    else
    {
      int v6 = -300;
    }
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XSendDataWithAsyncReply(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 3 && *(_DWORD *)(a1 + 4) == 80)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(unsigned __int16 *)(a1 + 50) << 16 == 1179648
      && *(unsigned char *)(a1 + 63) == 1
      && (unsigned int v4 = *(_DWORD *)(a1 + 64), v4 == *(_DWORD *)(a1 + 76)))
    {
      if (!*(_DWORD *)(a1 + 80))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 84);
        if (v5 > 7 && v5 - 8 > 0x1F)
        {
          uint64_t v7 = *(unsigned int *)(a1 + 12);
          uint64_t v8 = *(unsigned int *)(a1 + 28);
          int v9 = *(_DWORD *)(a1 + 40);
          uint64_t v10 = *(void *)(a1 + 52);
          uint64_t v11 = *(void *)(a1 + 92);
          long long v12 = *(_OWORD *)(a1 + 116);
          v13[0] = *(_OWORD *)(a1 + 100);
          v13[1] = v12;
          *(_DWORD *)(a2 + 32) = __AXXIPCSendDataWithAsyncReply(v7, v8, v9, v10, v4, v11, v13);
          mig_deallocate(*(void *)(a1 + 52), *(unsigned int *)(a1 + 64));
          *(void *)(a1 + 52) = 0;
          *(_DWORD *)(a1 + 64) = 0;
          return;
        }
      }
      int v6 = -309;
    }
    else
    {
      int v6 = -300;
    }
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

uint64_t _AXIPCServer_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x240], 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = a1[5];
  if ((v4 - 875222) >= 0xFFFFFFFC
    && (unsigned int v5 = (void (*)(void))__AXXIPC_AXIPCServer_subsystem[5 * (v4 - 875218) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t _AXIPCAsyncSendDataReply(unsigned int a1, int a2, uint64_t a3, int a4)
{
  int v10 = 0;
  long long v9 = 0u;
  memset(&msg[4], 0, 32);
  if (a2)
  {
    *(_DWORD *)&msg[32] = a2;
    *(void *)&msg[24] = *MEMORY[0x1E4F14068];
    int v5 = 18;
  }
  else
  {
    *(_DWORD *)&msg[24] = 1;
    *(void *)&msg[28] = a3;
    LODWORD(v9) = 16777472;
    DWORD1(v9) = a4;
    *((void *)&v9 + 1) = *MEMORY[0x1E4F14068];
    int v10 = a4;
    int v5 = -2147483630;
  }
  *(_DWORD *)msg = v5;
  *(void *)&msg[8] = a1;
  *(_DWORD *)&msg[16] = 0;
  *(_DWORD *)&msg[20] = 875318;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  if (a2) {
    mach_msg_size_t v6 = 36;
  }
  else {
    mach_msg_size_t v6 = 56;
  }
  return mach_msg((mach_msg_header_t *)msg, 1, v6, 0, 0, 0, 0);
}

uint64_t _AXIPCReplyToAsyncRequest(int a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  int v6 = 16777472;
  int v7 = a3;
  uint64_t v8 = *MEMORY[0x1E4F14068];
  int v9 = a3;
  *(void *)msg = 2147483666;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_18D430A70;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  return mach_msg((mach_msg_header_t *)msg, 1, 0x38u, 0, 0, 0, 0);
}

void (*_AXIPCAsyncRequestReply_server_routine(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == 2015010900) {
    return _XReplyToAsyncRequest;
  }
  else {
    return 0;
  }
}

void _XReplyToAsyncRequest(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 56)
  {
    if (*(unsigned char *)(a1 + 39) == 1)
    {
      unsigned int v3 = *(_DWORD *)(a1 + 40);
      if (v3 == *(_DWORD *)(a1 + 52))
      {
        *(_DWORD *)(a2 + 32) = __AXXIPCReplyToAsyncRequest(*(unsigned int *)(a1 + 12), *(void *)(a1 + 28), v3);
        mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
        *(void *)(a1 + 2_Block_object_dispose(&STACK[0x240], 8) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
    }
    int v4 = -300;
  }
  else
  {
    int v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

uint64_t _AXIPCAsyncRequestReply_server(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = *(_DWORD *)a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = *(_DWORD *)(a1 + 20) + 100;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x240], 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (*(_DWORD *)(a1 + 20) != 2015010900)
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    *(_DWORD *)(a2 + 32) = -303;
    return result;
  }
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 56)
  {
    int v7 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return 1;
  }
  if (*(unsigned char *)(a1 + 39) != 1 || (unsigned int v5 = *(_DWORD *)(a1 + 40), v5 != *(_DWORD *)(a1 + 52)))
  {
    int v7 = -300;
    goto LABEL_10;
  }
  *(_DWORD *)(a2 + 32) = __AXXIPCReplyToAsyncRequest(*(unsigned int *)(a1 + 12), *(void *)(a1 + 28), v5);
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 2_Block_object_dispose(&STACK[0x240], 8) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return 1;
}

uint64_t AXPreferences.Magnifier.enabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__enabled);
}

void sub_18D3BC758(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3BC764(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void AXPreferences.Magnifier.enabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.Magnifier.enabled.modify(void *a1))()
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  int v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__enabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.Magnifier.$enabled.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__enabled);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.Magnifier.shouldAdjustFiltersForAmbientLight.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight);
}

void sub_18D3BC840(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3BC84C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void AXPreferences.Magnifier.shouldAdjustFiltersForAmbientLight.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.Magnifier.shouldAdjustFiltersForAmbientLight.modify(void *a1))()
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  int v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.Magnifier.$shouldAdjustFiltersForAmbientLight.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.Magnifier.shouldUseVideoStabilization.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldUseVideoStabilization);
}

void sub_18D3BC924(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3BC930(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void AXPreferences.Magnifier.shouldUseVideoStabilization.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.Magnifier.shouldUseVideoStabilization.modify(void *a1))()
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  int v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldUseVideoStabilization);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.Magnifier.$shouldUseVideoStabilization.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldUseVideoStabilization));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

double AXPreferences.Magnifier.liveZoomLevel.getter()
{
  return sub_18D3BCDB8(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__liveZoomLevel);
}

double sub_18D3BCA08@<D0>(void *a1@<X0>, double *a2@<X8>)
{
  return sub_18D3BCE08(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__liveZoomLevel, a2);
}

void sub_18D3BCA14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void AXPreferences.Magnifier.liveZoomLevel.setter()
{
}

uint64_t (*AXPreferences.Magnifier.liveZoomLevel.modify(void *a1))()
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  int v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__liveZoomLevel);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.Magnifier.$liveZoomLevel.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__liveZoomLevel);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.Magnifier.filterSetIdentifier.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__filterSetIdentifier));
  sub_18D40A718();

  return v3;
}

void sub_18D3BCB28(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__filterSetIdentifier));
  sub_18D40A718();

  *a2 = v4;
}

void sub_18D3BCB7C(uint64_t a1, void *a2)
{
  id v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__filterSetIdentifier));
  sub_18D40A728();
}

void AXPreferences.Magnifier.filterSetIdentifier.setter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__filterSetIdentifier));
  sub_18D40A728();
}

uint64_t (*AXPreferences.Magnifier.filterSetIdentifier.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__filterSetIdentifier);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.Magnifier.$filterSetIdentifier.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__filterSetIdentifier));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

double AXPreferences.Magnifier.contrast.getter()
{
  return sub_18D3BCDB8(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__contrast);
}

double sub_18D3BCCD4@<D0>(void *a1@<X0>, double *a2@<X8>)
{
  return sub_18D3BCE08(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__contrast, a2);
}

void sub_18D3BCCE0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void AXPreferences.Magnifier.contrast.setter()
{
}

uint64_t (*AXPreferences.Magnifier.contrast.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__contrast);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.Magnifier.$contrast.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__contrast);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

double AXPreferences.Magnifier.brightness.getter()
{
  return sub_18D3BCDB8(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__brightness);
}

double sub_18D3BCDB8(void *a1)
{
  id v2 = *(id *)(v1 + *a1);
  sub_18D40A718();

  return v4;
}

double sub_18D3BCDFC@<D0>(void *a1@<X0>, double *a2@<X8>)
{
  return sub_18D3BCE08(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__brightness, a2);
}

double sub_18D3BCE08@<D0>(void *a1@<X0>, void *a2@<X3>, double *a3@<X8>)
{
  id v4 = *(id *)(*a1 + *a2);
  sub_18D40A718();

  double result = v6;
  *a3 = v6;
  return result;
}

void sub_18D3BCE58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3BCE64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v5 = *(id *)(*a2 + *a5);
  sub_18D40A728();
}

void AXPreferences.Magnifier.brightness.setter()
{
}

void sub_18D3BCEBC(void *a1)
{
  id v2 = *(id *)(v1 + *a1);
  sub_18D40A728();
}

uint64_t (*AXPreferences.Magnifier.brightness.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  id v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__brightness);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.Magnifier.$brightness.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__brightness);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.Magnifier.didLaunchFromStaccato.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__didLaunchFromStaccato);
}

uint64_t sub_18D3BCFC0(void *a1)
{
  id v2 = *(id *)(v1 + *a1);
  sub_18D40A718();

  return v4;
}

void sub_18D3BD004(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3BD010(void *a1@<X0>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  id v4 = *(id *)(*a1 + *a2);
  sub_18D40A718();

  *a3 = v5;
}

void sub_18D3BD060(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3BD06C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v5 = *(id *)(*a2 + *a5);
  sub_18D40A728();
}

void AXPreferences.Magnifier.didLaunchFromStaccato.setter(uint64_t a1)
{
}

void sub_18D3BD0C4(uint64_t a1, void *a2)
{
  id v3 = *(id *)(v2 + *a2);
  sub_18D40A728();
}

uint64_t (*AXPreferences.Magnifier.didLaunchFromStaccato.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  id v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__didLaunchFromStaccato);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

void sub_18D3BD17C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t AXPreferences.Magnifier.$didLaunchFromStaccato.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__didLaunchFromStaccato));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

id AXPreferences.Magnifier.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id AXPreferences.Magnifier.init()()
{
  id v1 = v0;
  Objectint Type = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v3 - 8, v4);
  double v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__enabled;
  uint64_t v8 = sub_18D40A6A8();
  int v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v6, 1, 1, v8);
  int v10 = v1;
  *(void *)&v1[v7] = sub_18D3BD724(1, 0x64656C62616E65, 0xE700000000000000, 0, 0, 11, (uint64_t)v6);
  uint64_t v11 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldAdjustFiltersForAmbientLight;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v11] = sub_18D3BD724(0, 0xD000000000000022, 0x800000018D42DA90, 0, 0, 11, (uint64_t)v6);
  uint64_t v12 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__shouldUseVideoStabilization;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v12] = sub_18D3BD724(0, 0xD00000000000001BLL, 0x800000018D42DAC0, 0, 0, 11, (uint64_t)v6);
  uint64_t v13 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__liveZoomLevel;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v13] = sub_18D3BDB40(2.0, 0x6D6F6F5A6576696CLL, 0xED00006C6576654CLL, 0, 0, 11, (uint64_t)v6);
  uint64_t v14 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__filterSetIdentifier;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v14] = sub_18D3BDF58(0, 0xD000000000000013, 0x800000018D42DAE0, 0, 0, 11, (uint64_t)v6);
  uint64_t v15 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__contrast;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v15] = sub_18D3BDB40(1.0, 0x74736172746E6F63, 0xE800000000000000, 0, 0, 11, (uint64_t)v6);
  uint64_t v16 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__brightness;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v16] = sub_18D3BDB40(0.0, 0x656E746867697262, 0xEA00000000007373, 0, 0, 11, (uint64_t)v6);
  uint64_t v17 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9Magnifier__didLaunchFromStaccato;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v17] = sub_18D3BD724(0, 0xD000000000000015, 0x800000018D42DB00, 0, 0, 11, (uint64_t)v6);

  v19.receiver = v10;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

id AXPreferences.Magnifier.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18D3BD724(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v28[1] = a4;
  uint64_t v29 = a5;
  int v31 = a1;
  uint64_t v32 = sub_18D40A698();
  MEMORY[0x1F4188790](v32, v9);
  uint64_t v30 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_18D40A6A8();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  int v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v21);
  uint64_t v23 = (void *)((char *)v28 - v22);
  sub_18D3BEB54(a7, (uint64_t)v14);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  if (v24 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v16 + 32))(v23, v14, v15);
    if (v29) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v35 = 0x656966696E67614DLL;
    unint64_t v36 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v35 = 0x656966696E67616DLL;
  unint64_t v36 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v25 = v36;
  *uint64_t v23 = v35;
  v23[1] = v25;
  v23[2] = 0;
  v23[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v23, *MEMORY[0x1E4F47EE8], v15);
  sub_18D3BEBBC((uint64_t)v14);
  if (!v29) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20F0);
  char v39 = v31 & 1;
  (*(void (**)(char *, void *, uint64_t))(v16 + 16))(v20, v23, v15);
  uint64_t v35 = MEMORY[0x1E4FBC860];
  sub_18D3BEA74(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  uint64_t v37 = sub_18D40A558();
  uint64_t v38 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v35);
  sub_18D40A548();
  uint64_t v26 = sub_18D40A6E8();
  sub_18D3BEBBC(v34);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v23, v15);
  return v26;
}

uint64_t sub_18D3BDB40(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v32 = sub_18D40A698();
  MEMORY[0x1F4188790](v32, v10);
  int v31 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_18D40A6A8();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v22);
  int v24 = (uint64_t *)((char *)&v29 - v23);
  sub_18D3BEB54(a7, (uint64_t)v15);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  if (v25 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v17 + 32))(v24, v15, v16);
    if (v30) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v35 = 0x656966696E67614DLL;
    unint64_t v36 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v35 = 0x656966696E67616DLL;
  unint64_t v36 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v26 = v36;
  void *v24 = v35;
  v24[1] = v26;
  void v24[2] = 0;
  v24[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v24, *MEMORY[0x1E4F47EE8], v16);
  sub_18D3BEBBC((uint64_t)v15);
  if (!v30) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20E8);
  double v39 = a1;
  (*(void (**)(char *, void *, uint64_t))(v17 + 16))(v21, v24, v16);
  uint64_t v35 = MEMORY[0x1E4FBC860];
  sub_18D3BEA74(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  uint64_t v37 = sub_18D40A558();
  uint64_t v38 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v35);
  sub_18D40A548();
  uint64_t v27 = sub_18D40A6E8();
  sub_18D3BEBBC(v34);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v24, v16);
  return v27;
}

uint64_t sub_18D3BDF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v28[1] = a4;
  uint64_t v29 = a5;
  uint64_t v31 = a1;
  uint64_t v32 = sub_18D40A698();
  MEMORY[0x1F4188790](v32, v9);
  uint64_t v30 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_18D40A6A8();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v21);
  uint64_t v23 = (void *)((char *)v28 - v22);
  sub_18D3BEB54(a7, (uint64_t)v14);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  if (v24 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v16 + 32))(v23, v14, v15);
    if (v29) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v35 = 0x656966696E67614DLL;
    unint64_t v36 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v35 = 0x656966696E67616DLL;
  unint64_t v36 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v25 = v36;
  *uint64_t v23 = v35;
  v23[1] = v25;
  v23[2] = 0;
  v23[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v23, *MEMORY[0x1E4F47EE8], v15);
  sub_18D3BEBBC((uint64_t)v14);
  if (!v29) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20C8);
  uint64_t v39 = v31;
  (*(void (**)(char *, void *, uint64_t))(v16 + 16))(v20, v23, v15);
  uint64_t v35 = MEMORY[0x1E4FBC860];
  sub_18D3BEA74(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  uint64_t v37 = sub_18D40A558();
  uint64_t v38 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v35);
  sub_18D40A548();
  uint64_t v26 = sub_18D40A6E8();
  sub_18D3BEBBC(v34);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v23, v15);
  return v26;
}

uint64_t sub_18D3BE370(uint64_t a1, uint64_t a2)
{
  return sub_18D3BEA74(&qword_1E91B20A0, a2, (void (*)(uint64_t))type metadata accessor for AXPreferences.Magnifier);
}

uint64_t type metadata accessor for AXPreferences.Magnifier()
{
  return self;
}

uint64_t sub_18D3BE3DC()
{
  return sub_18D40A8C8();
}

uint64_t sub_18D3BE470()
{
  return sub_18D40A898();
}

void type metadata accessor for AXSVoiceOverBrailleGesturesSoundOption(uint64_t a1)
{
}

void type metadata accessor for AXMagnifierFilterSetIdentifier(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for AXSVoiceOverBrailleMode(uint64_t a1)
{
}

void type metadata accessor for AXSVoiceOverKeyboardModifierChoice(uint64_t a1)
{
}

void type metadata accessor for AXSVoiceOverNavigationStyle(uint64_t a1)
{
}

void type metadata accessor for AXSVoiceOverTouchTypingMode(uint64_t a1)
{
}

void type metadata accessor for AXSVoiceOverNumberFeedback(uint64_t a1)
{
}

void type metadata accessor for AXSVoiceOverFeedbackOption(uint64_t a1)
{
}

void type metadata accessor for AXSSVoiceOverTextualContext(uint64_t a1)
{
}

void sub_18D3BE5BC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_18D3BE604()
{
  sub_18D40A7F8();
  uint64_t v0 = sub_18D40A7C8();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_18D3BE640(uint64_t a1, id *a2)
{
  uint64_t result = sub_18D40A7D8();
  *a2 = 0;
  return result;
}

uint64_t sub_18D3BE6B8(uint64_t a1, id *a2)
{
  char v3 = sub_18D40A7E8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_18D3BE738@<X0>(uint64_t *a1@<X8>)
{
  sub_18D40A7F8();
  uint64_t v2 = sub_18D40A7C8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_18D3BE77C()
{
  return sub_18D40AD18();
}

uint64_t sub_18D3BE7C4()
{
  return sub_18D40ACE8();
}

uint64_t sub_18D3BE7F0()
{
  return sub_18D40AD18();
}

BOOL sub_18D3BE834(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_18D3BE848@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_18D40A7C8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_18D3BE890@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18D40A7F8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18D3BE8BC()
{
  uint64_t v0 = sub_18D40A7F8();
  uint64_t v2 = v1;
  if (v0 == sub_18D40A7F8() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_18D40ACA8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void *sub_18D3BE948@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x240], 8) = 0;
  return result;
}

void sub_18D3BE958(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_18D3BE964(uint64_t a1)
{
  uint64_t v2 = sub_18D3BEA74(&qword_1EB34DC90, 255, type metadata accessor for AXSSVoiceOverTextualContext);
  uint64_t v3 = sub_18D3BEA74(&qword_1E91B20B8, 255, type metadata accessor for AXSSVoiceOverTextualContext);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_18D3BEA28()
{
  return sub_18D3BEA74(&qword_1E91B1480, 255, type metadata accessor for AXSSVoiceOverTextualContext);
}

uint64_t sub_18D3BEA74(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D3BEABC()
{
  return sub_18D3BEA74(&qword_1E91B20A8, 255, type metadata accessor for AXSSVoiceOverTextualContext);
}

uint64_t sub_18D3BEB08()
{
  return sub_18D3BEA74(&qword_1E91B20B0, 255, type metadata accessor for AXSVoiceOverBrailleMode);
}

uint64_t sub_18D3BEB54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3BEBBC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_18D3BEC1C()
{
  unint64_t result = qword_1E91B20E0;
  if (!qword_1E91B20E0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E91B20D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B20E0);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_18D3BED30(uint64_t a1)
{
  uint64_t v2 = sub_18D40A4B8();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v37 - v9;
  v37[1] = a1;
  sub_18D40A4C8();
  sub_18D40A488();
  sub_18D3C4058(&qword_1E91B2240, 255, MEMORY[0x1E4FAF248]);
  char v11 = sub_18D40AAC8();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v7, v2);
  v12(v10, v2);
  sub_18D40A4C8();
  sub_18D40A488();
  LODWORD(a1) = sub_18D40AAC8() & 1;
  v12(v7, v2);
  uint64_t v13 = ((uint64_t (*)(char *, uint64_t))v12)(v10, v2);
  if ((v11 & 1) == a1)
  {
    if (v11)
    {
      if (qword_1E91B2050 != -1) {
        uint64_t v13 = swift_once();
      }
      uint64_t v17 = qword_1E91B5930;
      MEMORY[0x1F4188790](v13, v14);
      v37[-2] = sub_18D3C40A0;
      v37[-1] = v17;
      uint64_t v19 = v18 + 4;
      swift_retain();
      os_unfair_lock_lock(v19);
      sub_18D3C40BC(&v38);
      os_unfair_lock_unlock(v19);
      uint64_t v20 = v38;
      swift_release();
      if (v20)
      {
        id v21 = objc_msgSend(v20, sel_name);
        if (!v21)
        {

          return 0;
        }

        uint64_t result = (uint64_t)objc_msgSend(v20, sel_name);
        if (!result)
        {
          __break(1u);
          return result;
        }
        uint64_t v22 = (void *)result;
        sub_18D40A7F8();

        uint64_t v23 = sub_18D40A808();
        uint64_t v25 = v24;
        swift_bridgeObjectRelease();
        sub_18D40A458();
        uint64_t v26 = sub_18D40A808();
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        sub_18D40A458();
        uint64_t v29 = sub_18D40A808();
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        if (v26 != v29 || v28 != v31)
        {
          char v32 = sub_18D40ACA8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v32)
          {

            swift_bridgeObjectRelease();
            return 0;
          }
          sub_18D40A458();
          uint64_t v33 = sub_18D40A808();
          uint64_t v35 = v34;
          swift_bridgeObjectRelease();
          if (v33 == v23 && v35 == v25)
          {
            swift_bridgeObjectRelease_n();

            return -1;
          }
          char v36 = sub_18D40ACA8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          BOOL v15 = (v36 & 1) == 0;
          goto LABEL_3;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
    }
    return 0;
  }
  BOOL v15 = (v11 & 1) == 0;
LABEL_3:
  if (v15) {
    return 1;
  }
  else {
    return -1;
  }
}

uint64_t AXPreferences.SpokenContentSettings.resolver.getter()
{
  return swift_retain();
}

uint64_t sub_18D3BF188(uint64_t a1)
{
  uint64_t v2 = sub_18D40A698();
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v4 = sub_18D40A6A8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18D40AA68();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4F47EE0], v4);
  v13[0] = MEMORY[0x1E4FBC860];
  sub_18D3C4058(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  void v13[3] = sub_18D40A558();
  v13[4] = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(v13);
  sub_18D40A538();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2218);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18D4310F0;
  *(void *)(v9 + 32) = sub_18D40A368();
  uint64_t v12 = a1;
  id v10 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2220));
  return sub_18D40A6F8();
}

uint64_t sub_18D3BF418@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18D3C308C();
  *a1 = result;
  return result;
}

uint64_t AXPreferences.SpokenContentSettings.voiceSelectionsByLanguage.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
}

void AXPreferences.SpokenContentSettings.voiceSelectionsByLanguage.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.SpokenContentSettings.voiceSelectionsByLanguage.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

unint64_t sub_18D3BF4CC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2230);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2238);
  uint64_t v7 = sub_18D40ABC8();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  id v10 = &v6[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_18D3C3FF4(v13, (uint64_t)v6, &qword_1E91B2230);
    unint64_t result = sub_18D3F0A5C((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = sub_18D40A2C8();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    uint64_t v20 = v8[7];
    uint64_t v21 = sub_18D40A678();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v17, v10, v21);
    uint64_t v22 = v8[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18D3BF700(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC58);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2210);
  uint64_t v7 = sub_18D40ABC8();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v26 = &v6[*(int *)(v2 + 48)];
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v12 = *(void *)(v3 + 72);
  v24[1] = a1;
  uint64_t v25 = v12;
  swift_retain();
  while (1)
  {
    sub_18D3C3FF4(v11, (uint64_t)v6, &qword_1EB34DC58);
    unint64_t result = sub_18D3F0A5C((uint64_t)v6);
    if (v14) {
      break;
    }
    unint64_t v15 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = v8[6];
    uint64_t v17 = sub_18D40A2C8();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v18 + 32);
    unint64_t v20 = *(void *)(v18 + 72) * v15;
    v19(v16 + v20, v6, v17);
    unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v19)(v8[7] + v20, v26, v17);
    uint64_t v21 = v8[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v8[2] = v23;
    v11 += v25;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18D3BF918(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B21F8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (void *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2200);
  uint64_t v7 = sub_18D40ABC8();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = (char *)v6 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_18D3C3FF4(v13, (uint64_t)v6, &qword_1E91B21F8);
    uint64_t v15 = *v6;
    uint64_t v16 = v6[1];
    unint64_t result = sub_18D3F0C10(*v6, v16);
    if (v18) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *unint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = sub_18D40A678();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19, v10, v22);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18D3BFB18(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B21E8);
  uint64_t v2 = sub_18D40ABC8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_18D3C3FF4(v6, (uint64_t)&v15, &qword_1E91B21F0);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_18D3F0C10(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_18D3C3024((uint64_t)&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18D3BFC5C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B21D8);
  uint64_t v2 = (void *)sub_18D40ABC8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_18D3C3FF4(v4, (uint64_t)&v16, &qword_1E91B21E0);
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    unint64_t result = sub_18D3F0C10(v16, v17);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    uint64_t v10 = v2[7] + 40 * result;
    long long v11 = v18;
    long long v12 = v19;
    *(void *)(v10 + 32) = v20;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18D3BFDA8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B21D0);
  uint64_t v2 = (void *)sub_18D40ABC8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_18D3F0C10(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t AXPreferences.SpokenContentSettings.$voiceSelectionsByLanguage.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3BFF04(uint64_t a1)
{
  uint64_t v2 = sub_18D40A698();
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v4 = sub_18D40A6A8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  char v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18D40AA68();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4F47EE0], v4);
  v12[0] = MEMORY[0x1E4FBC860];
  sub_18D3C4058(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  v12[3] = sub_18D40A558();
  void v12[4] = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(v12);
  sub_18D40A538();
  uint64_t v11 = a1;
  id v9 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2208));
  return sub_18D40A6F8();
}

uint64_t AXPreferences.SpokenContentSettings.macroLanguageDisambiguations.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations);
}

uint64_t sub_18D3C0144(void *a1)
{
  id v2 = *(id *)(v1 + *a1);
  sub_18D40A718();

  return v4;
}

void sub_18D3C0188(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  id v4 = *(id *)(*a1 + *a2);
  sub_18D40A718();

  *a3 = v5;
}

void sub_18D3C01D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void **)(*a2 + *a5);
  swift_bridgeObjectRetain();
  id v6 = v5;
  sub_18D40A728();
}

void AXPreferences.SpokenContentSettings.macroLanguageDisambiguations.setter(uint64_t a1)
{
}

void sub_18D3C0234(uint64_t a1, void *a2)
{
  id v3 = *(id *)(v2 + *a2);
  sub_18D40A728();
}

uint64_t (*AXPreferences.SpokenContentSettings.macroLanguageDisambiguations.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  id v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.SpokenContentSettings.$macroLanguageDisambiguations.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.SpokenContentSettings.speechVoiceIdentifier(forLanguage:exists:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  void v4[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v4[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3C03C4, 0, 0);
}

uint64_t sub_18D3C03C4()
{
  uint64_t v1 = v0[6];
  id v2 = objc_retain(*(id *)(v1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage));
  uint64_t v3 = (void *)sub_18D40A738();

  sub_18D40A6D8();
  uint64_t v4 = v0[2];
  v0[8] = v4;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings_resolver);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_18D3C04C0;
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[3];
  return Dictionary<>.voiceSelection(forLanguage:withResolver:exists:)(v7, v10, v8, v5, v9, v4);
}

uint64_t sub_18D3C04C0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18D3C05D8, 0, 0);
}

uint64_t sub_18D3C05D8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = sub_18D40A678();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_18D3C3EE8(v1, &qword_1E91B2118);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = sub_18D40A658();
    uint64_t v5 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v7(v4, v5);
}

uint64_t sub_18D3C0888(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18D40A7F8();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  void v4[4] = v9;
  a4;
  uint64_t v10 = (void *)swift_task_alloc();
  void v4[5] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_18D3C097C;
  return AXPreferences.SpokenContentSettings.speechVoiceIdentifier(forLanguage:exists:)(a1, v9, a2);
}

uint64_t sub_18D3C097C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 16);
  uint64_t v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v7 = (void *)sub_18D40A7C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (***)(void, void))(v4 + 24);
  ((void (**)(void, void *))v8)[2](v8, v7);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t AXPreferences.SpokenContentSettings.voiceSelection(forLanguage:)(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v3[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3C0B9C, 0, 0);
}

uint64_t sub_18D3C0B9C()
{
  uint64_t v1 = v0[6];
  id v2 = objc_retain(*(id *)(v1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage));
  sub_18D40A718();

  uint64_t v3 = v0[2];
  v0[8] = v3;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings_resolver);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[9] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_18D3C0C8C;
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];
  return Dictionary<>.voiceSelection(forLanguage:withResolver:exists:)(v6, v7, v8, v4, 0, v3);
}

uint64_t sub_18D3C0C8C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18D3C0DA4, 0, 0);
}

uint64_t sub_18D3C0DA4()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = sub_18D40A678();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_18D3C3EE8(v1, &qword_1E91B2118);
    uint64_t v3 = 0;
  }
  else
  {
    sub_18D40AA38();
    swift_dynamicCast();
    uint64_t v3 = v0[3];
  }
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

uint64_t sub_18D3C1018(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18D40A7F8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v3[4] = v7;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_18D3C10FC;
  return AXPreferences.SpokenContentSettings.voiceSelection(forLanguage:)(a1, v7);
}

uint64_t sub_18D3C10FC(void *a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 24);
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t AXPreferences.SpokenContentSettings.set(forLanguage:voiceSelection:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  void v4[6] = a1;
  v4[7] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3C130C, 0, 0);
}

uint64_t sub_18D3C130C()
{
  if (v0[8])
  {
    uint64_t v1 = v0[10];
    uint64_t v2 = sub_18D40A678();
    uint64_t v3 = *(void *)(v2 - 8);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v4(v1, 1, 1, v2);
    sub_18D3C4058(&qword_1E91B2130, 255, MEMORY[0x1E4F47EA0]);
    sub_18D40ABF8();
    int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
    uint64_t v6 = v0[11];
    if (v5 == 1)
    {
      uint64_t v7 = v0[11];
      uint64_t v8 = 1;
    }
    else
    {
      (*(void (**)(void, void, uint64_t))(v3 + 32))(v0[11], v0[10], v2);
      uint64_t v7 = v6;
      uint64_t v8 = 0;
    }
    v4(v7, v8, 1, v2);
  }
  else
  {
    uint64_t v9 = v0[11];
    uint64_t v10 = sub_18D40A678();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  uint64_t v11 = v0[9];
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings_resolver);
  uint64_t v13 = *(void **)(v11
                 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
  v0[12] = v13;
  id v14 = v13;
  v0[13] = sub_18D40A708();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[14] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_18D3C157C;
  uint64_t v16 = v0[11];
  uint64_t v17 = v0[6];
  uint64_t v18 = v0[7];
  return Dictionary<>.set(voiceSelection:forLanguage:withResolver:)(v16, v17, v18, v12);
}

uint64_t sub_18D3C157C()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v2 = *(void (**)(uint64_t, void))(*v0 + 104);
  uint64_t v3 = *(void **)(*v0 + 96);
  uint64_t v4 = *(void *)(*v0 + 88);
  uint64_t v7 = *v0;
  swift_task_dealloc();
  sub_18D3C3EE8(v4, &qword_1E91B2118);
  v2(v1, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  int v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_18D3C1890(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a2;
  v4[3] = a4;
  void v4[4] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18D40A7F8();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  void v4[5] = v9;
  id v10 = a2;
  a4;
  uint64_t v11 = (void *)swift_task_alloc();
  void v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_18D3C1988;
  return AXPreferences.SpokenContentSettings.set(forLanguage:voiceSelection:)(a1, v9, (uint64_t)a2);
}

uint64_t sub_18D3C1988()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 32);
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v3 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t AXPreferences.SpokenContentSettings.set(voiceId:forLanguage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  void v5[6] = a1;
  return MEMORY[0x1F4188298](sub_18D3C1B24, 0, 0);
}

uint64_t sub_18D3C1B24()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings_resolver);
  uint64_t v3 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
  v0[11] = v3;
  id v4 = v3;
  v0[12] = sub_18D40A708();
  int v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  *int v5 = v0;
  v5[1] = sub_18D3C1C04;
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v9, v8, v6, v7, v2);
}

uint64_t sub_18D3C1C04()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v2 = *(void (**)(uint64_t, void))(*v0 + 96);
  uint64_t v3 = *(void **)(*v0 + 88);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  v2(v1, 0);

  id v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_18D3C1EC8(uint64_t a1, int a2, void *aBlock, void *a4)
{
  void v4[6] = a4;
  v4[7] = _Block_copy(aBlock);
  if (a1)
  {
    uint64_t v7 = sub_18D40A7F8();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  v4[8] = v7;
  v4[9] = v8;
  v4[10] = sub_18D40A7F8();
  v4[11] = v9;
  id v10 = a4;
  return MEMORY[0x1F4188298](sub_18D3C1F7C, 0, 0);
}

uint64_t sub_18D3C1F7C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings_resolver);
  uint64_t v3 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
  v0[12] = v3;
  id v4 = v3;
  v0[13] = sub_18D40A708();
  int v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *int v5 = v0;
  v5[1] = sub_18D3C205C;
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v9, v8, v6, v7, v2);
}

uint64_t sub_18D3C205C()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v2 = *(void (**)(uint64_t, void))(*v0 + 104);
  uint64_t v3 = *(void **)(*v0 + 96);
  id v4 = *(void (***)(void))(*v0 + 56);
  int v5 = *(void **)(*v0 + 48);
  uint64_t v8 = *v0;
  swift_task_dealloc();
  v2(v1, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4[2](v4);
  _Block_release(v4);
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

id AXPreferences.SpokenContentSettings.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id AXPreferences.SpokenContentSettings.init()()
{
  Objectint Type = (objc_class *)swift_getObjectType();
  uint64_t v0 = sub_18D40A4B8();
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v47 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_18D40A3C8();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x1F4188790](v3, v4);
  int v42 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v46 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings_resolver;
  uint64_t v45 = sub_18D40A3E8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1550);
  uint64_t v6 = sub_18D40A388();
  uint64_t v36 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  uint64_t v40 = v10;
  *(_OWORD *)(v10 + 16) = xmmword_18D431100;
  unint64_t v11 = v10 + v9;
  uint64_t v12 = *MEMORY[0x1E4FAF230];
  uint64_t v13 = sub_18D40A408();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v38 = *(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 104);
  uint64_t v39 = v14 + 104;
  v38(v11, v12, v13);
  unsigned int v37 = *MEMORY[0x1E4FAF240];
  uint64_t v15 = v37;
  uint64_t v16 = sub_18D40A418();
  uint64_t v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104);
  v17(v11, v15, v16);
  uint64_t v18 = *MEMORY[0x1E4FAF1B0];
  long long v19 = *(void (**)(void))(v7 + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v19)(v11, v18, v6);
  v38(v11 + v8, *MEMORY[0x1E4FAF238], v13);
  v17(v11 + v8, v37, v16);
  uint64_t v20 = v36;
  ((void (*)(unint64_t, uint64_t, uint64_t))v19)(v11 + v8, v18, v36);
  uint64_t v21 = (uint64_t (**)(uint64_t))(v11 + 2 * v8);
  *uint64_t v21 = sub_18D3BED30;
  v21[1] = 0;
  v19();
  uint64_t v22 = v41;
  uint64_t v23 = v41;
  sub_18D40A468();
  uint64_t v24 = *MEMORY[0x1E4FAF1B8];
  ((void (*)(unint64_t, uint64_t, uint64_t))v19)(v11 + 3 * v8, v24, v20);
  sub_18D40A478();
  ((void (*)(unint64_t, uint64_t, uint64_t))v19)(v11 + 4 * v8, v24, v20);
  ((void (*)(unint64_t, void, uint64_t))v19)(v11 + 5 * v8, *MEMORY[0x1E4FAF1C8], v20);
  ((void (*)(unint64_t, void, uint64_t))v19)(v11 + 6 * v8, *MEMORY[0x1E4FAF1A8], v20);
  uint64_t v26 = v42;
  uint64_t v25 = v43;
  *int v42 = v40;
  (*(void (**)(uint64_t *, void, uint64_t))(v25 + 104))(v26, *MEMORY[0x1E4FAF1E0], v44);
  uint64_t v27 = sub_18D40A508();
  uint64_t v28 = sub_18D40A4F8();
  uint64_t v51 = v27;
  uint64_t v52 = MEMORY[0x1E4FAF258];
  uint64_t v50 = v28;
  sub_18D40A4A8();
  *(void *)&v22[v46] = sub_18D40A398();
  uint64_t v29 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage;
  uint64_t v30 = MEMORY[0x1E4FBC860];
  unint64_t v31 = sub_18D3BF4CC(MEMORY[0x1E4FBC860]);
  *(void *)&v23[v29] = sub_18D3BF188(v31);
  uint64_t v32 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__macroLanguageDisambiguations;
  unint64_t v33 = sub_18D3BF700(v30);
  *(void *)&v23[v32] = sub_18D3BFF04(v33);

  v49.receiver = v23;
  v49.super_class = ObjectType;
  return objc_msgSendSuper2(&v49, sel_init);
}

id AXPreferences.SpokenContentSettings.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18D3C2754(uint64_t a1, uint64_t a2)
{
  return sub_18D3C4058(&qword_1E91B2140, a2, (void (*)(uint64_t))type metadata accessor for AXPreferences.SpokenContentSettings);
}

uint64_t type metadata accessor for AXPreferences.SpokenContentSettings()
{
  return self;
}

void sub_18D3C27C0(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3C27E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3C2800(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3C2820(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_18D3C28A0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_18D3C40D8;
  uint64_t v7 = (uint64_t (*)(uint64_t, int, void *, void *))((char *)&dword_1E91B2150 + dword_1E91B2150);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_18D3C2964()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1E91B28D0 + dword_1E91B28D0);
  return v6(v2, v3, v4);
}

uint64_t sub_18D3C2A28(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_18D3C40D8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1E91B28D8 + dword_1E91B28D8);
  return v8(a1, v4, v5, v6);
}

uint64_t objectdestroyTm()
{
  _Block_release(*(const void **)(v0 + 32));

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18D3C2B48()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_18D3C40D8;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, void *, void *))((char *)&dword_1E91B2170 + dword_1E91B2170);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_18D3C2C10(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_18D3C2CDC;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1E91B28D8 + dword_1E91B28D8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_18D3C2CDC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_18D3C2DD0()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18D3C2E18()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1E91B2190 + dword_1E91B2190);
  return v6(v2, v3, v4);
}

uint64_t sub_18D3C2ED4()
{
  _Block_release(*(const void **)(v0 + 32));

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18D3C2F1C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_18D3C40D8;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_1E91B21B0 + dword_1E91B21B0);
  return v7(v2, v3, v5, v4);
}

uint64_t objectdestroy_10Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18D3C3024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3C308C()
{
  uint64_t v125 = sub_18D40A678();
  uint64_t v116 = *(void *)(v125 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v125, v0);
  v124 = (char *)v106 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1, v3);
  v114 = (char *)v106 - v4;
  uint64_t v118 = sub_18D40A2C8();
  uint64_t v107 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118, v5);
  uint64_t v126 = (uint64_t)v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_18D40A698();
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v9 = sub_18D40A6A8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = MEMORY[0x1E4FBC868];
  id v115 = self;
  id v14 = objc_msgSend(v115, sel_sharedInstance);
  id v15 = objc_msgSend(v14, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v15) {
    goto LABEL_82;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1518);
  uint64_t v16 = sub_18D40A778();

  uint64_t v113 = *MEMORY[0x1E4F481E0];
  uint64_t v17 = sub_18D40A7F8();
  if (!*(void *)(v16 + 16) || (unint64_t v19 = sub_18D3F0C10(v17, v18), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_82;
  }
  uint64_t v21 = *(void *)(*(void *)(v16 + 56) + 8 * v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4F47EE0], v9);
  v133[0] = MEMORY[0x1E4FBC860];
  sub_18D3C4058(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  v133[3] = sub_18D40A558();
  v133[4] = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(v133);
  sub_18D40A548();
  LODWORD(v131) = 1056964608;
  id v22 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2228));
  uint64_t v23 = (void *)sub_18D40A6F8();
  sub_18D40A748();

  int64_t v24 = 0;
  uint64_t v111 = LODWORD(v133[0]);
  uint64_t v25 = *(void *)(v21 + 64);
  uint64_t v108 = v21 + 64;
  uint64_t v112 = v21;
  uint64_t v26 = 1 << *(unsigned char *)(v21 + 32);
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  else {
    uint64_t v27 = -1;
  }
  unint64_t v28 = v27 & v25;
  int64_t v109 = (unint64_t)(v26 + 63) >> 6;
  v106[5] = *MEMORY[0x1E4FAF2D0];
  v117 = (void (**)(char *, char *, uint64_t))(v116 + 32);
  v106[3] = v107 + 16;
  v106[2] = v116 + 40;
  v110 = (void (**)(uint64_t, uint64_t))(v107 + 8);
  v106[4] = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    if (v28)
    {
      uint64_t v119 = (v28 - 1) & v28;
      int64_t v120 = v24;
      unint64_t v29 = __clz(__rbit64(v28)) | (v24 << 6);
    }
    else
    {
      int64_t v30 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        goto LABEL_92;
      }
      if (v30 >= v109) {
        goto LABEL_81;
      }
      unint64_t v31 = *(void *)(v108 + 8 * v30);
      int64_t v32 = v24 + 1;
      if (!v31)
      {
        int64_t v32 = v24 + 2;
        if (v24 + 2 >= v109) {
          goto LABEL_81;
        }
        unint64_t v31 = *(void *)(v108 + 8 * v32);
        if (!v31)
        {
          int64_t v32 = v24 + 3;
          if (v24 + 3 >= v109) {
            goto LABEL_81;
          }
          unint64_t v31 = *(void *)(v108 + 8 * v32);
          if (!v31)
          {
            uint64_t v33 = v24 + 4;
            if (v24 + 4 >= v109) {
              goto LABEL_81;
            }
            unint64_t v31 = *(void *)(v108 + 8 * v33);
            if (!v31)
            {
              while (1)
              {
                int64_t v32 = v33 + 1;
                if (__OFADD__(v33, 1)) {
                  goto LABEL_93;
                }
                if (v32 >= v109) {
                  break;
                }
                unint64_t v31 = *(void *)(v108 + 8 * v32);
                ++v33;
                if (v31) {
                  goto LABEL_25;
                }
              }
LABEL_81:
              swift_release();
LABEL_82:
              os_log_type_t v96 = sub_18D40AA28();
              v97 = (id)AXTTSLogCommon();
              if (!v97) {
                goto LABEL_94;
              }
              v98 = v97;
              os_log_type_t v99 = v96;
              if (os_log_type_enabled(v97, v96))
              {
                v100 = (uint8_t *)swift_slowAlloc();
                uint64_t v101 = swift_slowAlloc();
                v133[0] = v101;
                *(_DWORD *)v100 = 136315138;
                swift_beginAccess();
                sub_18D3C4058(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
                swift_bridgeObjectRetain();
                uint64_t v102 = sub_18D40A788();
                unint64_t v104 = v103;
                swift_bridgeObjectRelease();
                uint64_t v129 = sub_18D3F632C(v102, v104, v133);
                sub_18D40AA88();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_18D308000, v98, v99, "Migrating general selections to %s", v100, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x192F9F8A0](v101, -1, -1);
                MEMORY[0x192F9F8A0](v100, -1, -1);
              }

              swift_beginAccess();
              return v134;
            }
            int64_t v32 = v24 + 4;
          }
        }
      }
LABEL_25:
      uint64_t v119 = (v31 - 1) & v31;
      int64_t v120 = v32;
      unint64_t v29 = __clz(__rbit64(v31)) + (v32 << 6);
    }
    uint64_t v34 = 16 * v29;
    uint64_t v35 = *(void *)(v112 + 56);
    uint64_t v36 = (uint64_t *)(*(void *)(v112 + 48) + v34);
    uint64_t v37 = v36[1];
    uint64_t v121 = *v36;
    uint64_t v38 = (uint64_t *)(v35 + v34);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v122 = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v41 = objc_msgSend(v115, sel_sharedInstance);
    uint64_t v123 = v39;
    int v42 = (void *)sub_18D40A7C8();
    id v43 = objc_msgSend(v41, sel_customSettingsForVoice_sourceKey_, v42, v113);

    if (v43) {
      break;
    }
    long long v131 = 0u;
    long long v132 = 0u;
LABEL_67:
    sub_18D3C3EE8((uint64_t)&v131, &qword_1EB34DC30);
LABEL_68:
    uint64_t v80 = v126;
    sub_18D40A2D8();
    LOBYTE(v133[0]) = 1;
    long long v81 = v114;
    sub_18D40A648();
    long long v82 = *v117;
    (*v117)(v124, v81, v125);
    uint64_t v83 = v134;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v133[0] = v83;
    uint64_t v134 = 0x8000000000000000;
    unint64_t v86 = sub_18D3F0A5C(v80);
    uint64_t v87 = *(void *)(v83 + 16);
    BOOL v88 = (v85 & 1) == 0;
    uint64_t v89 = v87 + v88;
    if (__OFADD__(v87, v88)) {
      goto LABEL_89;
    }
    char v90 = v85;
    if (*(void *)(v83 + 24) >= v89)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        long long v93 = (void *)v133[0];
        if (v85) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_18D3F7BC4();
        long long v93 = (void *)v133[0];
        if (v90) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      sub_18D3F6984(v89, isUniquelyReferenced_nonNull_native);
      unint64_t v91 = sub_18D3F0A5C(v126);
      if ((v90 & 1) != (v92 & 1)) {
        goto LABEL_96;
      }
      unint64_t v86 = v91;
      long long v93 = (void *)v133[0];
      if (v90)
      {
LABEL_8:
        (*(void (**)(unint64_t, char *, uint64_t))(v116 + 40))(v93[7] + *(void *)(v116 + 72) * v86, v124, v125);
        goto LABEL_9;
      }
    }
    v93[(v86 >> 6) + 8] |= 1 << v86;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v107 + 16))(v93[6] + *(void *)(v107 + 72) * v86, v126, v118);
    v82((char *)(v93[7] + *(void *)(v116 + 72) * v86), v124, v125);
    uint64_t v94 = v93[2];
    BOOL v78 = __OFADD__(v94, 1);
    uint64_t v95 = v94 + 1;
    if (v78) {
      goto LABEL_91;
    }
    v93[2] = v95;
LABEL_9:
    uint64_t v134 = v133[0];
    swift_bridgeObjectRelease();
    (*v110)(v126, v118);
    int64_t v24 = v120;
    unint64_t v28 = v119;
  }
  uint64_t v44 = sub_18D40A778();

  uint64_t v129 = sub_18D40A7F8();
  uint64_t v130 = v45;
  sub_18D40AB28();
  if (*(void *)(v44 + 16) && (unint64_t v46 = sub_18D3F0C88((uint64_t)v133), (v47 & 1) != 0))
  {
    sub_18D3C3F98(*(void *)(v44 + 56) + 32 * v46, (uint64_t)&v131);
  }
  else
  {
    long long v131 = 0u;
    long long v132 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_18D3C3F44((uint64_t)v133);
  if (!*((void *)&v132 + 1)) {
    goto LABEL_67;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2920);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_68;
  }
  v106[1] = v40;
  int64_t v48 = 0;
  uint64_t v49 = v133[0];
  uint64_t v50 = *(void *)(v133[0] + 64);
  uint64_t v127 = v133[0] + 64;
  uint64_t v51 = 1 << *(unsigned char *)(v133[0] + 32);
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  else {
    uint64_t v52 = -1;
  }
  unint64_t v53 = v52 & v50;
  int64_t v128 = (unint64_t)(v51 + 63) >> 6;
  uint64_t v54 = (void *)MEMORY[0x1E4FBC868];
  while (2)
  {
    if (v53)
    {
      unint64_t v55 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      unint64_t v56 = v55 | (v48 << 6);
    }
    else
    {
      int64_t v57 = v48 + 1;
      if (__OFADD__(v48, 1)) {
        goto LABEL_88;
      }
      if (v57 >= v128)
      {
LABEL_77:
        swift_release();
        goto LABEL_68;
      }
      unint64_t v58 = *(void *)(v127 + 8 * v57);
      ++v48;
      if (!v58)
      {
        int64_t v48 = v57 + 1;
        if (v57 + 1 >= v128) {
          goto LABEL_77;
        }
        unint64_t v58 = *(void *)(v127 + 8 * v48);
        if (!v58)
        {
          int64_t v48 = v57 + 2;
          if (v57 + 2 >= v128) {
            goto LABEL_77;
          }
          unint64_t v58 = *(void *)(v127 + 8 * v48);
          if (!v58)
          {
            int64_t v59 = v57 + 3;
            if (v59 >= v128) {
              goto LABEL_77;
            }
            unint64_t v58 = *(void *)(v127 + 8 * v59);
            if (!v58)
            {
              while (1)
              {
                int64_t v48 = v59 + 1;
                if (__OFADD__(v59, 1)) {
                  goto LABEL_90;
                }
                if (v48 >= v128) {
                  goto LABEL_77;
                }
                unint64_t v58 = *(void *)(v127 + 8 * v48);
                ++v59;
                if (v58) {
                  goto LABEL_54;
                }
              }
            }
            int64_t v48 = v59;
          }
        }
      }
LABEL_54:
      unint64_t v53 = (v58 - 1) & v58;
      unint64_t v56 = __clz(__rbit64(v58)) + (v48 << 6);
    }
    v60 = (uint64_t *)(*(void *)(v49 + 48) + 16 * v56);
    uint64_t v62 = *v60;
    uint64_t v61 = v60[1];
    id v63 = *(void **)(*(void *)(v49 + 56) + 8 * v56);
    swift_bridgeObjectRetain();
    id v64 = v63;
    objc_msgSend(v64, sel_floatValue);
    int v66 = v65;
    char v67 = swift_isUniquelyReferenced_nonNull_native();
    v133[0] = (uint64_t)v54;
    unint64_t v69 = sub_18D3F0C10(v62, v61);
    uint64_t v70 = v54[2];
    BOOL v71 = (v68 & 1) == 0;
    uint64_t v72 = v70 + v71;
    if (!__OFADD__(v70, v71))
    {
      char v73 = v68;
      if (v54[3] >= v72)
      {
        if (v67)
        {
          uint64_t v54 = (void *)v133[0];
          if ((v68 & 1) == 0) {
            goto LABEL_62;
          }
        }
        else
        {
          sub_18D3F7F6C();
          uint64_t v54 = (void *)v133[0];
          if ((v73 & 1) == 0) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        sub_18D3F6E84(v72, v67);
        unint64_t v74 = sub_18D3F0C10(v62, v61);
        if ((v73 & 1) != (v75 & 1)) {
          goto LABEL_95;
        }
        unint64_t v69 = v74;
        uint64_t v54 = (void *)v133[0];
        if ((v73 & 1) == 0)
        {
LABEL_62:
          v54[(v69 >> 6) + 8] |= 1 << v69;
          long long v76 = (uint64_t *)(v54[6] + 16 * v69);
          *long long v76 = v62;
          v76[1] = v61;
          *(_DWORD *)(v54[7] + 4 * v69) = v66;
          uint64_t v77 = v54[2];
          BOOL v78 = __OFADD__(v77, 1);
          uint64_t v79 = v77 + 1;
          if (v78) {
            goto LABEL_87;
          }
          v54[2] = v79;
          swift_bridgeObjectRetain();
          goto LABEL_38;
        }
      }
      *(_DWORD *)(v54[7] + 4 * v69) = v66;
LABEL_38:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  sub_18D40ACC8();
  __break(1u);
LABEL_96:
  uint64_t result = sub_18D40ACC8();
  __break(1u);
  return result;
}

uint64_t sub_18D3C3EE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_18D3C3F44(uint64_t a1)
{
  return a1;
}

uint64_t sub_18D3C3F98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_18D3C3FF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_18D3C4058(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_18D3C40A0@<X0>(void *a1@<X8>)
{
  return sub_18D3FFA04(v1, a1);
}

void *sub_18D3C40BC@<X0>(void *a1@<X8>)
{
  return sub_18D404324(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t AXPreferences.VoiceOver.resolver.getter()
{
  return swift_retain();
}

uint64_t sub_18D3C40EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18D3D88F4();
  *a1 = result;
  return result;
}

uint64_t sub_18D3C4114(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v43 = a8;
  uint64_t v48 = a4;
  int v39 = a1;
  uint64_t v45 = a6;
  uint64_t v46 = a9;
  uint64_t v47 = sub_18D40A698();
  uint64_t v40 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47, v13);
  id v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v16 - 8, v17);
  unint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_18D40A6A8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  id v41 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v27 = (uint64_t *)((char *)&v38 - v26);
  uint64_t v42 = a7;
  uint64_t v29 = v28;
  sub_18D3C3FF4(a7, (uint64_t)v19, &qword_1E91B2098);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v29);
  uint64_t v49 = v29;
  uint64_t v44 = v15;
  uint64_t v38 = a2;
  if (v30 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v21 + 32))(v27, v19, v29);
    char v32 = v39;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v50 = 0x65764F6563696F56;
    unint64_t v51 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v48 = v50;
    goto LABEL_6;
  }
  uint64_t v50 = 0x65764F6563696F76;
  unint64_t v51 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v31 = v51;
  void *v27 = v50;
  v27[1] = v31;
  v27[2] = 0;
  v27[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v27, *MEMORY[0x1E4F47EE8], v49);
  sub_18D3C3EE8((uint64_t)v19, &qword_1E91B2098);
  char v32 = v39;
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20F0);
  char v54 = v32 & 1;
  uint64_t v33 = v49;
  (*(void (**)(char *, void *, uint64_t))(v21 + 16))(v41, v27, v49);
  uint64_t v34 = v40;
  uint64_t v35 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v44, a10, v47);
  uint64_t v52 = sub_18D40A558();
  uint64_t v53 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v50);
  sub_18D40A548();
  uint64_t v36 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a10, v35);
  sub_18D3C3EE8(v42, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v21 + 8))(v27, v33);
  return v36;
}

uint64_t sub_18D3C4554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v43 = a8;
  uint64_t v48 = a4;
  uint64_t v39 = a1;
  uint64_t v45 = a6;
  uint64_t v46 = a9;
  uint64_t v47 = sub_18D40A698();
  uint64_t v40 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47, v13);
  id v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v16 - 8, v17);
  unint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_18D40A6A8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  id v41 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v27 = (uint64_t *)((char *)&v38 - v26);
  uint64_t v42 = a7;
  uint64_t v29 = v28;
  sub_18D3C3FF4(a7, (uint64_t)v19, &qword_1E91B2098);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v29);
  uint64_t v49 = v29;
  uint64_t v44 = v15;
  uint64_t v38 = a2;
  if (v30 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v21 + 32))(v27, v19, v29);
    uint64_t v32 = v39;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v50 = 0x65764F6563696F56;
    unint64_t v51 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v48 = v50;
    goto LABEL_6;
  }
  uint64_t v50 = 0x65764F6563696F76;
  unint64_t v51 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v31 = v51;
  void *v27 = v50;
  v27[1] = v31;
  v27[2] = 0;
  v27[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v27, *MEMORY[0x1E4F47EE8], v49);
  sub_18D3C3EE8((uint64_t)v19, &qword_1E91B2098);
  uint64_t v32 = v39;
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2588);
  uint64_t v54 = v32;
  uint64_t v33 = v49;
  (*(void (**)(char *, void *, uint64_t))(v21 + 16))(v41, v27, v49);
  uint64_t v34 = v40;
  uint64_t v35 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v44, a10, v47);
  uint64_t v52 = sub_18D40A558();
  uint64_t v53 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v50);
  sub_18D40A548();
  uint64_t v36 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a10, v35);
  sub_18D3C3EE8(v42, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v21 + 8))(v27, v33);
  return v36;
}

uint64_t sub_18D3C4990(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v43 = a9;
  uint64_t v44 = a8;
  uint64_t v41 = a6;
  uint64_t v39 = a5;
  uint64_t v47 = a4;
  uint64_t v45 = a10;
  uint64_t v42 = sub_18D40A698();
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42, v13);
  id v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v16 - 8, v17);
  unint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_18D40A6A8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v26);
  uint64_t v28 = (uint64_t *)((char *)&v38 - v27);
  uint64_t v46 = a7;
  sub_18D3C3FF4(a7, (uint64_t)v19, &qword_1E91B2098);
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  uint64_t v38 = a1;
  if (v29 != 1)
  {
    uint64_t v31 = v20;
    (*(void (**)(void *, char *, uint64_t))(v21 + 32))(v28, v19, v20);
    if (v39) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v48 = 0x65764F6563696F56;
    unint64_t v49 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v47 = v48;
    goto LABEL_6;
  }
  uint64_t v48 = 0x65764F6563696F76;
  unint64_t v49 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v30 = v49;
  void *v28 = v48;
  v28[1] = v30;
  void v28[2] = 0;
  v28[3] = 0;
  uint64_t v31 = v20;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v28, *MEMORY[0x1E4F47EE8], v20);
  sub_18D3C3EE8((uint64_t)v19, &qword_1E91B2098);
  if (!v39) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20E8);
  double v52 = a2;
  uint64_t v32 = v31;
  (*(void (**)(char *, void *, uint64_t))(v21 + 16))(v25, v28, v31);
  uint64_t v33 = v40;
  uint64_t v34 = v45;
  uint64_t v35 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v15, v45, v42);
  uint64_t v50 = sub_18D40A558();
  uint64_t v51 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v48);
  sub_18D40A548();
  uint64_t v36 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
  sub_18D3C3EE8(v46, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v21 + 8))(v28, v32);
  return v36;
}

uint64_t sub_18D3C4DC8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v43 = a8;
  uint64_t v48 = a4;
  int v39 = a1;
  uint64_t v45 = a6;
  uint64_t v46 = a9;
  uint64_t v47 = sub_18D40A698();
  uint64_t v40 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47, v13);
  id v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v16 - 8, v17);
  unint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_18D40A6A8();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v41 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23, v25);
  uint64_t v27 = (uint64_t *)((char *)&v38 - v26);
  uint64_t v42 = a7;
  uint64_t v29 = v28;
  sub_18D3C3FF4(a7, (uint64_t)v19, &qword_1E91B2098);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v29);
  uint64_t v49 = v29;
  uint64_t v44 = v15;
  uint64_t v38 = a2;
  if (v30 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v21 + 32))(v27, v19, v29);
    char v32 = v39;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v50 = 0x65764F6563696F56;
    unint64_t v51 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v48 = v50;
    goto LABEL_6;
  }
  uint64_t v50 = 0x65764F6563696F76;
  unint64_t v51 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v31 = v51;
  void *v27 = v50;
  v27[1] = v31;
  v27[2] = 0;
  v27[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v27, *MEMORY[0x1E4F47EE8], v49);
  sub_18D3C3EE8((uint64_t)v19, &qword_1E91B2098);
  char v32 = v39;
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2578);
  char v54 = v32;
  uint64_t v33 = v49;
  (*(void (**)(char *, void *, uint64_t))(v21 + 16))(v41, v27, v49);
  uint64_t v34 = v40;
  uint64_t v35 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v44, a10, v47);
  uint64_t v52 = sub_18D40A558();
  uint64_t v53 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v50);
  sub_18D40A548();
  uint64_t v36 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a10, v35);
  sub_18D3C3EE8(v42, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v21 + 8))(v27, v33);
  return v36;
}

uint64_t sub_18D3C5204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v45 = a8;
  v39[1] = a4;
  uint64_t v40 = a1;
  uint64_t v43 = a11;
  uint64_t v47 = a6;
  uint64_t v48 = a9;
  uint64_t v49 = sub_18D40A698();
  uint64_t v41 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49, v14);
  uint64_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v20 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_18D40A6A8();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  uint64_t v42 = (char *)v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24, v26);
  uint64_t v28 = (void *)((char *)v39 - v27);
  uint64_t v44 = a7;
  uint64_t v30 = v29;
  sub_18D3C3FF4(a7, (uint64_t)v20, &qword_1E91B2098);
  int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v30);
  uint64_t v50 = v30;
  uint64_t v46 = v16;
  v39[0] = a2;
  if (v31 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v22 + 32))(v28, v20, v30);
    uint64_t v33 = v40;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v51 = 0x65764F6563696F56;
    unint64_t v52 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v51 = 0x65764F6563696F76;
  unint64_t v52 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v32 = v52;
  void *v28 = v51;
  v28[1] = v32;
  void v28[2] = 0;
  v28[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v28, *MEMORY[0x1E4F47EE8], v50);
  sub_18D3C3EE8((uint64_t)v20, &qword_1E91B2098);
  uint64_t v33 = v40;
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v43 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(v43);
  uint64_t v55 = v33;
  uint64_t v34 = v50;
  (*(void (**)(char *, void *, uint64_t))(v22 + 16))(v42, v28, v50);
  uint64_t v35 = v41;
  uint64_t v36 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v46, a10, v49);
  uint64_t v53 = sub_18D40A558();
  uint64_t v54 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v51);
  sub_18D40A548();
  uint64_t v37 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(a10, v36);
  sub_18D3C3EE8(v44, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v22 + 8))(v28, v34);
  return v37;
}

uint64_t sub_18D3C5644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v52 = a8;
  uint64_t v54 = a4;
  uint64_t v50 = a10;
  uint64_t v48 = a6;
  uint64_t v49 = a9;
  uint64_t v51 = sub_18D40A698();
  uint64_t v46 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51, v13);
  uint64_t v45 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v43 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_18D40A6A8();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  uint64_t v44 = (char *)&v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v27);
  uint64_t v29 = (unint64_t *)((char *)&v41 - v28);
  uint64_t v47 = a7;
  uint64_t v30 = a7;
  uint64_t v32 = v31;
  sub_18D3C3FF4(v30, (uint64_t)v21, &qword_1E91B2098);
  int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v32);
  uint64_t v53 = a1;
  if (v33 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v23 + 32))(v29, v21, v32);
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v55 = 0x65764F6563696F56;
    unint64_t v56 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v54 = v55;
    unint64_t v41 = v56;
    goto LABEL_6;
  }
  uint64_t v55 = 0x65764F6563696F76;
  unint64_t v56 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v34 = v56;
  *uint64_t v29 = v55;
  v29[1] = v34;
  v29[2] = 0;
  v29[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v23 + 104))(v29, *MEMORY[0x1E4F47EE8], v32);
  sub_18D3C3EE8((uint64_t)v21, &qword_1E91B2098);
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  unint64_t v41 = a5;
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2568);
  uint64_t v35 = v53;
  sub_18D3C3FF4(v53, v43, (uint64_t *)&unk_1EB34DCD0);
  (*(void (**)(char *, void *, uint64_t))(v23 + 16))(v44, v29, v32);
  uint64_t v42 = v32;
  uint64_t v36 = v46;
  uint64_t v38 = v50;
  uint64_t v37 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v50, v51);
  uint64_t v57 = sub_18D40A558();
  uint64_t v58 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v55);
  sub_18D40A548();
  uint64_t v39 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  sub_18D3C3EE8(v47, &qword_1E91B2098);
  sub_18D3C3EE8(v35, (uint64_t *)&unk_1EB34DCD0);
  (*(void (**)(void *, uint64_t))(v23 + 8))(v29, v42);
  return v39;
}

uint64_t AXPreferences.VoiceOver.defaultVoiceSelectionsByLanguage.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
}

void AXPreferences.VoiceOver.defaultVoiceSelectionsByLanguage.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.defaultVoiceSelectionsByLanguage.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$defaultVoiceSelectionsByLanguage.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C5BC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18D3DB6F0();
  *a1 = result;
  return result;
}

uint64_t AXPreferences.VoiceOver.voiceRotors.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
}

void AXPreferences.VoiceOver.voiceRotors.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.voiceRotors.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$voiceRotors.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter()
{
  return sub_18D3C8990(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__currentRotorVoiceIdentifier);
}

void AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*AXPreferences.VoiceOver.currentRotorVoiceIdentifier.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__currentRotorVoiceIdentifier);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$currentRotorVoiceIdentifier.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__currentRotorVoiceIdentifier));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.largeCursorEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__largeCursorEnabled);
}

void AXPreferences.VoiceOver.largeCursorEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.largeCursorEnabled.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__largeCursorEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$largeCursorEnabled.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__largeCursorEnabled);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.contentDescriptionLevel.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18D40A718();

  return v3;
}

void sub_18D3C5E9C(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18D40A718();

  *a2 = v4;
}

void sub_18D3C5EF0(uint64_t a1, void *a2)
{
  id v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18D40A728();
}

void AXPreferences.VoiceOver.contentDescriptionLevel.setter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__contentDescriptionLevel));
  sub_18D40A728();
}

uint64_t (*AXPreferences.VoiceOver.contentDescriptionLevel.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__contentDescriptionLevel);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$contentDescriptionLevel.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__contentDescriptionLevel));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.useDigitalCrownNavigation.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useDigitalCrownNavigation);
}

void AXPreferences.VoiceOver.useDigitalCrownNavigation.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.useDigitalCrownNavigation.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useDigitalCrownNavigation);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$useDigitalCrownNavigation.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useDigitalCrownNavigation));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.imageCaptionsEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__imageCaptionsEnabled);
}

void AXPreferences.VoiceOver.imageCaptionsEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.imageCaptionsEnabled.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__imageCaptionsEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$imageCaptionsEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__imageCaptionsEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.useTVToggleStyleNavigation.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useTVToggleStyleNavigation);
}

void AXPreferences.VoiceOver.useTVToggleStyleNavigation.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.useTVToggleStyleNavigation.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useTVToggleStyleNavigation);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$useTVToggleStyleNavigation.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useTVToggleStyleNavigation));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

double AXPreferences.VoiceOver.continuousPathKeyboardStartTimeout.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18D40A718();

  return v3;
}

double sub_18D3C62E8@<D0>(void *a1@<X0>, double *a2@<X8>)
{
  id v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18D40A718();

  double result = v5;
  *a2 = v5;
  return result;
}

void sub_18D3C633C(uint64_t a1, void *a2)
{
  id v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18D40A728();
}

void AXPreferences.VoiceOver.continuousPathKeyboardStartTimeout.setter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  sub_18D40A728();
}

uint64_t (*AXPreferences.VoiceOver.continuousPathKeyboardStartTimeout.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$continuousPathKeyboardStartTimeout.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.hearingAidRoutingEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__hearingAidRoutingEnabled);
}

void AXPreferences.VoiceOver.hearingAidRoutingEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.hearingAidRoutingEnabled.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__hearingAidRoutingEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$hearingAidRoutingEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__hearingAidRoutingEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.braillePanningAutoTurnsReadingContent.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent);
}

void AXPreferences.VoiceOver.braillePanningAutoTurnsReadingContent.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.braillePanningAutoTurnsReadingContent.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$braillePanningAutoTurnsReadingContent.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleDisplayOutputMode.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputMode);
}

void AXPreferences.VoiceOver.brailleDisplayOutputMode.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleDisplayOutputMode.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputMode);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleDisplayOutputMode.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputMode));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleDisplayInputMode.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputMode);
}

void AXPreferences.VoiceOver.brailleDisplayInputMode.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleDisplayInputMode.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputMode);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleDisplayInputMode.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputMode));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C67B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_18D40A698();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v20 = (char *)&v26 - v19;
  uint64_t v29 = MEMORY[0x1E4FBC860];
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  *uint64_t v11 = a2;
  v11[1] = a3;
  v11[2] = 0;
  void v11[3] = 0;
  uint64_t v21 = *MEMORY[0x1E4F47EE8];
  uint64_t v22 = sub_18D40A6A8();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v23 + 104))(v11, v21, v22);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v11, 0, 1, v22);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v20, v12);
  uint64_t v24 = sub_18D3C5204(a1, 0, 0xE000000000000000, v27, v28, 2, (uint64_t)v11, 0, 0, (uint64_t)v17, &qword_1E91B2580);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
  return v24;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesInputMode.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputMode);
}

void AXPreferences.VoiceOver.brailleGesturesInputMode.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesInputMode.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputMode);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesInputMode.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputMode));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C6B34(int a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v2 - 8, v3);
  id v5 = (void *)((char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_18D40A698();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)v20 - v13;
  v20[1] = MEMORY[0x1E4FBC860];
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  *id v5 = 0xD000000000000031;
  v5[1] = 0x800000018D42EDD0;
  v5[2] = 0;
  v5[3] = 0;
  uint64_t v15 = *MEMORY[0x1E4F47EE8];
  uint64_t v16 = sub_18D40A6A8();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v17 + 104))(v5, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v5, 0, 1, v16);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  uint64_t v18 = sub_18D3C4DC8(a1, 0, 0xE000000000000000, 0xD000000000000034, 0x800000018D42ED90, 2, (uint64_t)v5, 0, 0, (uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  return v18;
}

uint64_t AXPreferences.VoiceOver.brailleDisplaySyncInputOutputTables.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18D40A718();

  return v3;
}

void sub_18D3C6E38(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18D40A718();

  *a2 = v4;
}

void sub_18D3C6E8C(uint64_t a1, void *a2)
{
  id v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18D40A728();
}

void AXPreferences.VoiceOver.brailleDisplaySyncInputOutputTables.setter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  sub_18D40A728();
}

uint64_t (*AXPreferences.VoiceOver.brailleDisplaySyncInputOutputTables.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  char v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleDisplaySyncInputOutputTables.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleDisplayInputTableIdentifier.getter()
{
  return sub_18D3C8990(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier);
}

void AXPreferences.VoiceOver.brailleDisplayInputTableIdentifier.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleDisplayInputTableIdentifier.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  char v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleDisplayInputTableIdentifier.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleDisplayOutputTableIdentifier.getter()
{
  return sub_18D3C8990(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier);
}

void AXPreferences.VoiceOver.brailleDisplayOutputTableIdentifier.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleDisplayOutputTableIdentifier.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  char v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleDisplayOutputTableIdentifier.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesInputTableIdentifier.getter()
{
  return sub_18D3C8990(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier);
}

void AXPreferences.VoiceOver.brailleGesturesInputTableIdentifier.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesInputTableIdentifier.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  char v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesInputTableIdentifier.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C723C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_18D40A698();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v20 = (char *)&v26 - v19;
  uint64_t v29 = MEMORY[0x1E4FBC860];
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  *uint64_t v11 = a2;
  v11[1] = a3;
  v11[2] = 0;
  void v11[3] = 0;
  uint64_t v21 = *MEMORY[0x1E4F47EE8];
  uint64_t v22 = sub_18D40A6A8();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v23 + 104))(v11, v21, v22);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v11, 0, 1, v22);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v20, v12);
  uint64_t v24 = sub_18D3C4114(a1, 0, 0xE000000000000000, v27, v28, 2, (uint64_t)v11, 0, 0, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
  return v24;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesActivationGestureEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled);
}

void AXPreferences.VoiceOver.brailleGesturesActivationGestureEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesActivationGestureEnabled.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  char v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesActivationGestureEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C75A8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v2 - 8, v3);
  id v5 = (void *)((char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_18D40A698();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)v20 - v13;
  v20[1] = MEMORY[0x1E4FBC860];
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  *id v5 = 0xD000000000000028;
  v5[1] = 0x800000018D42ECE0;
  v5[2] = 0;
  v5[3] = 0;
  uint64_t v15 = *MEMORY[0x1E4F47EE8];
  uint64_t v16 = sub_18D40A6A8();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v17 + 104))(v5, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v5, 0, 1, v16);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  uint64_t v18 = sub_18D3C5204(a1, 0, 0xE000000000000000, 0xD00000000000002BLL, 0x800000018D42ECB0, 2, (uint64_t)v5, 0, 0, (uint64_t)v11, &qword_1E91B2570);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  return v18;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesSoundOption.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesSoundOption);
}

void sub_18D3C7880(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v5 = *(id *)(*a2 + *a5);
  sub_18D40A728();
}

void AXPreferences.VoiceOver.brailleGesturesSoundOption.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesSoundOption.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesSoundOption);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesSoundOption.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesSoundOption));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesUsesHapticFeedback.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback);
}

void AXPreferences.VoiceOver.brailleGesturesUsesHapticFeedback.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesUsesHapticFeedback.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesUsesHapticFeedback.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesUsesTypingSoundFeedback.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback);
}

void AXPreferences.VoiceOver.brailleGesturesUsesTypingSoundFeedback.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesUsesTypingSoundFeedback.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesUsesTypingSoundFeedback.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesDisplayEnteredText.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText);
}

void AXPreferences.VoiceOver.brailleGesturesDisplayEnteredText.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesDisplayEnteredText.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesDisplayEnteredText.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.brailleGesturesAutoActivateOnTextFields.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields);
}

void AXPreferences.VoiceOver.brailleGesturesAutoActivateOnTextFields.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.brailleGesturesAutoActivateOnTextFields.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$brailleGesturesAutoActivateOnTextFields.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.perkinsKeyboardInputEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsKeyboardInputEnabled);
}

void AXPreferences.VoiceOver.perkinsKeyboardInputEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.perkinsKeyboardInputEnabled.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsKeyboardInputEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$perkinsKeyboardInputEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsKeyboardInputEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.perkinsChordKeyboardInputEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsChordKeyboardInputEnabled);
}

void AXPreferences.VoiceOver.perkinsChordKeyboardInputEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.perkinsChordKeyboardInputEnabled.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsChordKeyboardInputEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$perkinsChordKeyboardInputEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsChordKeyboardInputEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C7E54(uint64_t a1)
{
  uint64_t v2 = sub_18D40A698();
  MEMORY[0x1F4188790](v2, v3);
  id v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18D3C3FF4(a1, (uint64_t)v13, (uint64_t *)&unk_1EB34DCD0);
  uint64_t v14 = sub_18D40A6A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  v17[1] = MEMORY[0x1E4FBC860];
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  uint64_t v15 = sub_18D3C5644((uint64_t)v13, 0xD000000000000017, 0x800000018D42E9A0, 0xD00000000000002DLL, 0x800000018D42E9C0, 2, (uint64_t)v9, 0, 0, (uint64_t)v5);
  sub_18D3C3EE8(a1, (uint64_t *)&unk_1EB34DCD0);
  return v15;
}

void AXPreferences.VoiceOver.defaultPunctuationGroup.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultPunctuationGroup));
  sub_18D40A718();
}

void sub_18D3C80FC(void *a1)
{
  id v1 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultPunctuationGroup));
  sub_18D40A718();
}

uint64_t sub_18D3C815C(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  uint64_t v6 = MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v15 - v10;
  sub_18D3C3FF4(a1, (uint64_t)&v15 - v10, (uint64_t *)&unk_1EB34DCD0);
  uint64_t v12 = *(void **)(*a2 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultPunctuationGroup);
  sub_18D3C3FF4((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_1EB34DCD0);
  id v13 = v12;
  sub_18D40A728();

  return sub_18D3C3EE8((uint64_t)v11, (uint64_t *)&unk_1EB34DCD0);
}

uint64_t AXPreferences.VoiceOver.defaultPunctuationGroup.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultPunctuationGroup);
  sub_18D3C3FF4(a1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1EB34DCD0);
  id v7 = v6;
  sub_18D40A728();

  return sub_18D3C3EE8(a1, (uint64_t *)&unk_1EB34DCD0);
}

uint64_t (*AXPreferences.VoiceOver.defaultPunctuationGroup.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultPunctuationGroup);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$defaultPunctuationGroup.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultPunctuationGroup));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.activities.getter()
{
  return sub_18D3C0144(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__activities);
}

void AXPreferences.VoiceOver.activities.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.activities.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__activities);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$activities.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__activities);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.selectedActivityId.getter()
{
  return sub_18D3C8990(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedActivityId);
}

void AXPreferences.VoiceOver.selectedActivityId.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*AXPreferences.VoiceOver.selectedActivityId.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedActivityId);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$selectedActivityId.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedActivityId);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C8550(int a1)
{
  uint64_t v2 = sub_18D40A698();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  id v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v22 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  uint64_t v13 = MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v18 = (char *)v22 - v17;
  uint64_t v19 = sub_18D40A6A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v22[1] = MEMORY[0x1E4FBC860];
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  sub_18D3C3FF4((uint64_t)v18, (uint64_t)v15, &qword_1E91B2098);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
  uint64_t v20 = sub_18D3C4114(a1, 0xD000000000000018, 0x800000018D42E980, 0, 0, 2, (uint64_t)v15, 0, 0, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  sub_18D3C3EE8((uint64_t)v18, &qword_1E91B2098);
  return v20;
}

uint64_t AXPreferences.VoiceOver.languageDetectionEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__languageDetectionEnabled);
}

void AXPreferences.VoiceOver.languageDetectionEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.languageDetectionEnabled.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__languageDetectionEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$languageDetectionEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__languageDetectionEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.pitchChangeEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__pitchChangeEnabled);
}

void AXPreferences.VoiceOver.pitchChangeEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.pitchChangeEnabled.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__pitchChangeEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$pitchChangeEnabled.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__pitchChangeEnabled);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.selectedLanguage.getter()
{
  return sub_18D3C8990(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedLanguage);
}

uint64_t sub_18D3C8990(void *a1)
{
  id v2 = *(id *)(v1 + *a1);
  sub_18D40A718();

  return v4;
}

double sub_18D3C89D4@<D0>(void *a1@<X0>, void *a2@<X3>, _OWORD *a3@<X8>)
{
  id v4 = *(id *)(*a1 + *a2);
  sub_18D40A718();

  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_18D3C8A24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v5 = *(void **)(*a2 + *a5);
  swift_bridgeObjectRetain();
  id v6 = v5;
  sub_18D40A728();
}

void AXPreferences.VoiceOver.selectedLanguage.setter(uint64_t a1, uint64_t a2)
{
}

void sub_18D3C8A80(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(id *)(v3 + *a3);
  sub_18D40A728();
}

uint64_t (*AXPreferences.VoiceOver.selectedLanguage.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  id v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedLanguage);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$selectedLanguage.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedLanguage);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3C8B78(int a1)
{
  uint64_t v2 = sub_18D40A698();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  id v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v23 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  uint64_t v13 = MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v18 = (char *)v23 - v17;
  uint64_t v19 = sub_18D40A6A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2550);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18D4310F0;
  sub_18D40A688();
  v23[1] = v20;
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  sub_18D3C3FF4((uint64_t)v18, (uint64_t)v15, &qword_1E91B2098);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
  uint64_t v21 = sub_18D3C4114(a1, 0x4570556B61657073, 0xEE0064656C62616ELL, 0, 0, 2, (uint64_t)v15, 0, 0, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  sub_18D3C3EE8((uint64_t)v18, &qword_1E91B2098);
  return v21;
}

uint64_t AXPreferences.VoiceOver.speakUpEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__speakUpEnabled);
}

void AXPreferences.VoiceOver.speakUpEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.VoiceOver.speakUpEnabled.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__speakUpEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.VoiceOver.$speakUpEnabled.getter()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__speakUpEnabled);
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.VoiceOver.currentVoiceRotor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = *(id *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
  uint64_t v10 = (void *)sub_18D40A738();

  sub_18D40A6D8();
  uint64_t v11 = v21;
  id v12 = objc_retain(*(id *)(v2
                          + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__currentRotorVoiceIdentifier));
  uint64_t v13 = (void *)sub_18D40A738();

  sub_18D40A6D8();
  uint64_t v14 = v22;
  if (v22)
  {
    uint64_t v15 = *(void *)(v11 + 16);
    if (v15)
    {
      uint64_t v16 = v21;
      uint64_t v17 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v18 = *(void *)(v5 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_18D3C9168(v17, (uint64_t)v8);
        BOOL v19 = *v8 == v16 && v14 == v8[1];
        if (v19 || (sub_18D40ACA8() & 1) != 0) {
          break;
        }
        sub_18D3CD488((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
        v17 += v18;
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      sub_18D3C91CC((uint64_t)v8, a1);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
    }
    else
    {
LABEL_11:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
  }
}

uint64_t sub_18D3C9168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3C91CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AXPreferences.VoiceOver.systemDefaultVoiceSelection()(uint64_t a1)
{
  void v2[3] = a1;
  v2[4] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  void v2[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3C92F4, 0, 0);
}

uint64_t sub_18D3C92F4()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  id v3 = objc_retain(*(id *)(v2
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  uint64_t v4 = (void *)sub_18D40A738();

  sub_18D40A6D8();
  uint64_t v5 = v0[2];
  v0[7] = v5;
  uint64_t v6 = sub_18D40A2C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_18D3C9434;
  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];
  return Dictionary<>.selection(forLanguage:withResolver:exists:)(v9, v10, v7, 0, v5);
}

uint64_t sub_18D3C9434()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_18D3C3EE8(v1, &qword_1E91B1538);
  return MEMORY[0x1F4188298](sub_18D3C9570, 0, 0);
}

uint64_t sub_18D3C9570()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = sub_18D40A678();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[3], v1, v2);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  return result;
}

uint64_t AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  v4[12] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2368);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2370);
  v4[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  uint64_t v5 = sub_18D40A338();
  v4[25] = v5;
  v4[26] = *(void *)(v5 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  uint64_t v6 = sub_18D40A2C8();
  v4[32] = v6;
  v4[33] = *(void *)(v6 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1540);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  uint64_t v7 = sub_18D40A4E8();
  v4[39] = v7;
  v4[40] = *(void *)(v7 - 8);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  v4[44] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  v4[45] = v8;
  v4[46] = *(void *)(v8 - 8);
  v4[47] = swift_task_alloc();
  void v4[48] = swift_task_alloc();
  uint64_t v9 = sub_18D40A678();
  v4[49] = v9;
  v4[50] = *(void *)(v9 - 8);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  uint64_t v10 = sub_18D40A358();
  v4[54] = v10;
  v4[55] = *(void *)(v10 - 8);
  v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  v4[58] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3C9B60, 0, 0);
}

uint64_t sub_18D3C9B60()
{
  *(void *)(v0 + 472) = *(void *)(*(void *)(v0 + 88)
                                    + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver);
  sub_18D40A3E8();
  sub_18D3DC2EC(&qword_1E91B2380, 255, MEMORY[0x1E4FAF200]);
  uint64_t v2 = sub_18D40A8F8();
  return MEMORY[0x1F4188298](sub_18D3C9C2C, v2, v1);
}

uint64_t sub_18D3C9C2C()
{
  sub_18D40A3A8();
  return MEMORY[0x1F4188298](sub_18D3C9C98, 0, 0);
}

uint64_t sub_18D3C9C98()
{
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  sub_18D40A378();
  sub_18D40A2E8();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[60] = v1;
  void *v1 = v0;
  v1[1] = sub_18D3C9D8C;
  uint64_t v2 = v0[53];
  return AXPreferences.VoiceOver.systemDefaultVoiceSelection()(v2);
}

uint64_t sub_18D3C9D8C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3C9E88, 0, 0);
}

uint64_t sub_18D3C9E88()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 352);
  AXPreferences.VoiceOver.currentVoiceRotor.getter(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18D3C3EE8(*(void *)(v0 + 352), &qword_1E91B2378);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 360);
    sub_18D3C91CC(*(void *)(v0 + 352), *(void *)(v0 + 384));
    *(_DWORD *)(v0 + 600) = *(_DWORD *)(v4 + 20);
    uint64_t v5 = sub_18D40A658();
    *(void *)(v0 + 48_Block_object_dispose(&STACK[0x240], 8) = v6;
    if (v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1E8] + MEMORY[0x1E4FAF1E8]);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 496) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_18D3CA458;
      uint64_t v10 = *(void *)(v0 + 304);
      return v32(v10, v7, v8);
    }
    sub_18D3CD488(*(void *)(v0 + 384), (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
  }
  uint64_t v12 = *(void *)(v0 + 120);
  sub_18D3C3FF4(*(void *)(v0 + 80), v12, &qword_1E91B2370);
  uint64_t v13 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v18 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 128);
  if (v14 == 1)
  {
    sub_18D3C3EE8(*(void *)(v0 + 120), &qword_1E91B2370);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, 1, 1, v15);
LABEL_11:
    sub_18D3C3EE8(*(void *)(v0 + 128), &qword_1E91B2118);
    int v33 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    BOOL v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v19;
    *BOOL v19 = v0;
    v19[1] = sub_18D3CACE8;
    uint64_t v20 = *(void *)(v0 + 456);
    return v33(v20);
  }
  sub_18D3C3FF4(v18 + *(int *)(v13 + 72), *(void *)(v0 + 128), &qword_1E91B2118);
  sub_18D3CD488(v18, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.Activity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) == 1) {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v22 = *(void *)(v0 + 432);
  uint64_t v23 = *(void *)(v0 + 440);
  uint64_t v24 = *(void *)(v0 + 416);
  uint64_t v25 = *(void *)(v0 + 424);
  uint64_t v26 = *(void *)(v0 + 392);
  uint64_t v27 = *(void *)(v0 + 400);
  uint64_t v28 = *(void *)(v0 + 136);
  uint64_t v29 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t, void, uint64_t))(v27 + 32))(v24, *(void *)(v0 + 128), v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v28, v25, v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
  VoiceSelection.fallingBack(to:)(v28, v29);
  sub_18D3C3EE8(v28, &qword_1E91B2118);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v30(v24, v26);
  v30(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_18D3CA458()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18D3CA570, 0, 0);
}

uint64_t sub_18D3CA570()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18D3CD488(v0[48], (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    uint64_t v4 = &qword_1E91B1540;
LABEL_5:
    sub_18D3C3EE8(v3, v4);
    goto LABEL_6;
  }
  uint64_t v5 = v0[33];
  uint64_t v53 = v0[32];
  uint64_t v6 = v0[31];
  uint64_t v8 = v0[25];
  uint64_t v7 = v0[26];
  uint64_t v9 = v0[24];
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[43], v3, v1);
  sub_18D40A348();
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v53);
  uint64_t v3 = v0[24];
  if (v10 == 1)
  {
    uint64_t v11 = v0[48];
    (*(void (**)(void, void))(v0[40] + 8))(v0[43], v0[39]);
    sub_18D3CD488(v11, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    uint64_t v4 = &qword_1E91B1538;
    goto LABEL_5;
  }
  uint64_t v22 = v0[35];
  (*(void (**)(uint64_t, void, void))(v0[33] + 32))(v22, v0[24], v0[32]);
  uint64_t v23 = sub_18D3CC484();
  LOBYTE(v22) = sub_18D3CCB14(v22, v23);
  swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t v24 = v0[55];
    uint64_t v52 = v0[54];
    uint64_t v55 = v0[58];
    uint64_t v25 = v0[49];
    uint64_t v26 = v0[50];
    uint64_t v27 = v0[48];
    uint64_t v50 = v0[43];
    uint64_t v51 = v0[53];
    uint64_t v28 = v0[40];
    uint64_t v48 = v0[35];
    uint64_t v49 = v0[39];
    uint64_t v29 = v0[33];
    uint64_t v47 = v0[32];
    uint64_t v30 = v0[17];
    uint64_t v31 = v0[8];
    (*(void (**)(uint64_t))(v26 + 16))(v30);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v30, 0, 1, v25);
    VoiceSelection.fallingBack(to:)(v30, v31);
    sub_18D3C3EE8(v30, &qword_1E91B2118);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v48, v47);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v50, v49);
    sub_18D3CD488(v27, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v51, v25);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v55, v52);
    goto LABEL_15;
  }
  uint64_t v43 = v0[48];
  uint64_t v44 = v0[43];
  uint64_t v45 = v0[39];
  uint64_t v46 = v0[40];
  (*(void (**)(void, void))(v0[33] + 8))(v0[35], v0[32]);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
  sub_18D3CD488(v43, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
LABEL_6:
  uint64_t v12 = v0[15];
  sub_18D3C3FF4(v0[10], v12, &qword_1E91B2370);
  uint64_t v13 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  uint64_t v15 = v0[49];
  uint64_t v16 = v0[50];
  uint64_t v18 = v0[15];
  uint64_t v17 = v0[16];
  if (v14 == 1)
  {
    sub_18D3C3EE8(v0[15], &qword_1E91B2370);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, 1, 1, v15);
LABEL_9:
    sub_18D3C3EE8(v0[16], &qword_1E91B2118);
    uint64_t v54 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    BOOL v19 = (void *)swift_task_alloc();
    v0[63] = v19;
    *BOOL v19 = v0;
    v19[1] = sub_18D3CACE8;
    uint64_t v20 = v0[57];
    return v54(v20);
  }
  sub_18D3C3FF4(v18 + *(int *)(v13 + 72), v0[16], &qword_1E91B2118);
  sub_18D3CD488(v18, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.Activity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) == 1) {
    goto LABEL_9;
  }
  uint64_t v32 = v0[58];
  uint64_t v33 = v0[54];
  uint64_t v34 = v0[55];
  uint64_t v35 = v0[52];
  uint64_t v36 = v0[53];
  uint64_t v37 = v0[49];
  uint64_t v38 = v0[50];
  uint64_t v39 = v0[17];
  uint64_t v40 = v0[8];
  (*(void (**)(uint64_t, void, uint64_t))(v38 + 32))(v35, v0[16], v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v36, v37);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
  VoiceSelection.fallingBack(to:)(v39, v40);
  sub_18D3C3EE8(v39, &qword_1E91B2118);
  unint64_t v41 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v41(v35, v37);
  v41(v36, v37);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = (uint64_t (*)(void))v0[1];
  return v42();
}

uint64_t sub_18D3CACE8()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3CADE4, 0, 0);
}

uint64_t sub_18D3CADE4()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v47 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v48 = *(void *)(v0 + 96);
  uint64_t v49 = *(void *)(v0 + 256);
  sub_18D40A348();
  sub_18D40A328();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v0 + 512) = v8;
  *(void *)(v0 + 520) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v2, v5);
  sub_18D40A348();
  sub_18D40A328();
  v8(v3, v5);
  uint64_t v9 = v7 + *(int *)(v48 + 48);
  sub_18D3C3FF4(v6, v7, &qword_1E91B1538);
  sub_18D3C3FF4(v47, v9, &qword_1E91B1538);
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(void *)(v0 + 52_Block_object_dispose(&STACK[0x240], 8) = v10;
  *(void *)(v0 + 536) = (v1 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v11 = v10(v7, 1, v49);
  uint64_t v12 = *(void *)(v0 + 256);
  if (v11 == 1)
  {
    uint64_t v13 = *(void *)(v0 + 184);
    sub_18D3C3EE8(*(void *)(v0 + 176), &qword_1E91B1538);
    sub_18D3C3EE8(v13, &qword_1E91B1538);
    if (v10(v9, 1, v12) == 1)
    {
      sub_18D3C3EE8(*(void *)(v0 + 112), &qword_1E91B1538);
LABEL_15:
      uint64_t v39 = *(void *)(v0 + 464);
      uint64_t v40 = *(void *)(v0 + 432);
      unint64_t v41 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 440) + 8);
      v41(*(void *)(v0 + 456), v40);
      v41(v39, v40);
      (*(void (**)(void, void, void))(*(void *)(v0 + 400) + 32))(*(void *)(v0 + 64), *(void *)(v0 + 424), *(void *)(v0 + 392));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
      return v42();
    }
    goto LABEL_6;
  }
  sub_18D3C3FF4(*(void *)(v0 + 112), *(void *)(v0 + 168), &qword_1E91B1538);
  if (v10(v9, 1, v12) == 1)
  {
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 264);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    sub_18D3C3EE8(*(void *)(v0 + 176), &qword_1E91B1538);
    sub_18D3C3EE8(v16, &qword_1E91B1538);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
LABEL_6:
    sub_18D3C3EE8(*(void *)(v0 + 112), &qword_1E91B2368);
    goto LABEL_7;
  }
  uint64_t v31 = *(void *)(v0 + 264);
  uint64_t v30 = *(void *)(v0 + 272);
  uint64_t v32 = *(void *)(v0 + 256);
  uint64_t v34 = *(void *)(v0 + 176);
  uint64_t v33 = *(void *)(v0 + 184);
  uint64_t v35 = *(void *)(v0 + 168);
  uint64_t v36 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30, v9, v32);
  sub_18D3DC2EC(&qword_1E91B1530, 255, MEMORY[0x1E4F279D8]);
  char v37 = sub_18D40A7B8();
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v38(v30, v32);
  sub_18D3C3EE8(v34, &qword_1E91B1538);
  sub_18D3C3EE8(v33, &qword_1E91B1538);
  v38(v35, v32);
  sub_18D3C3EE8(v36, &qword_1E91B1538);
  if (v37) {
    goto LABEL_15;
  }
LABEL_7:
  id v18 = objc_retain(*(id *)(*(void *)(v0 + 88)
                          + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors));
  sub_18D40A718();

  uint64_t v19 = *(void *)(v0 + 56);
  *(void *)(v0 + 544) = v19;
  uint64_t v20 = *(void *)(v19 + 16);
  *(void *)(v0 + 552) = v20;
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(v0 + 368);
    *(_DWORD *)(v0 + 604) = *(_DWORD *)(v22 + 80);
    *(void *)(v0 + 560) = *(void *)(v22 + 72);
    while (1)
    {
      *(void *)(v0 + 56_Block_object_dispose(&STACK[0x240], 8) = v21;
      uint64_t v23 = *(void *)(v0 + 360);
      sub_18D3C9168(*(void *)(v0 + 544)+ ((*(unsigned __int8 *)(v0 + 604) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 604))+ *(void *)(v0 + 560) * v21, *(void *)(v0 + 376));
      *(_DWORD *)(v0 + 60_Block_object_dispose(&STACK[0x240], 8) = *(_DWORD *)(v23 + 20);
      uint64_t v24 = sub_18D40A658();
      *(void *)(v0 + 576) = v25;
      if (v25) {
        break;
      }
      sub_18D3CD488(*(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
      uint64_t v21 = *(void *)(v0 + 568) + 1;
      if (v21 == *(void *)(v0 + 552)) {
        goto LABEL_11;
      }
    }
    uint64_t v43 = v24;
    uint64_t v44 = v25;
    uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1E8] + MEMORY[0x1E4FAF1E8]);
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 584) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_18D3CB514;
    uint64_t v46 = *(void *)(v0 + 296);
    return v51(v46, v43, v44);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_18D3CBEC8;
    uint64_t v27 = *(void *)(v0 + 464);
    uint64_t v28 = *(void *)(v0 + 288);
    return v50(v28, v27);
  }
}

uint64_t sub_18D3CB514()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18D3CB62C, 0, 0);
}

uint64_t sub_18D3CB62C()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) != 1)
  {
    v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v5 = *(void *)(v0 + 440);
    uint64_t v4 = *(void *)(v0 + 448);
    uint64_t v52 = *(void *)(v0 + 432);
    uint64_t v58 = *(void *)(v0 + 256);
    uint64_t v6 = *(void *)(v0 + 216);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v51 = *(void *)(v0 + 160);
    uint64_t v53 = *(void *)(v0 + 200);
    uint64_t v54 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v56 = *(void *)(v0 + 96);
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v0 + 336), v3, v2);
    sub_18D40A438();
    sub_18D40A348();
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v50(v4, v52);
    sub_18D40A328();
    v55(v7, v53);
    sub_18D40A348();
    sub_18D40A328();
    v55(v6, v53);
    uint64_t v9 = v8 + *(int *)(v56 + 48);
    sub_18D3C3FF4(v51, v8, &qword_1E91B1538);
    sub_18D3C3FF4(v54, v9, &qword_1E91B1538);
    int v10 = v60(v8, 1, v58);
    int v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
    uint64_t v12 = *(void *)(v0 + 256);
    if (v10 == 1)
    {
      uint64_t v13 = *(void *)(v0 + 160);
      sub_18D3C3EE8(*(void *)(v0 + 152), &qword_1E91B1538);
      sub_18D3C3EE8(v13, &qword_1E91B1538);
      if (v11(v9, 1, v12) == 1)
      {
        sub_18D3C3EE8(*(void *)(v0 + 104), &qword_1E91B1538);
LABEL_10:
        uint64_t v61 = *(void *)(v0 + 456);
        uint64_t v62 = *(void *)(v0 + 464);
        uint64_t v28 = *(void *)(v0 + 424);
        uint64_t v27 = *(void *)(v0 + 432);
        uint64_t v29 = *(void *)(v0 + 392);
        uint64_t v30 = *(void *)(v0 + 400);
        uint64_t v31 = *(void *)(v0 + 376);
        uint64_t v32 = *(void *)(v0 + 320);
        uint64_t v57 = *(void *)(v0 + 312);
        uint64_t v59 = *(void *)(v0 + 336);
        uint64_t v33 = *(void *)(v0 + 136);
        uint64_t v34 = *(void *)(v0 + 64);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v33, v28, v29);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v29);
        VoiceSelection.fallingBack(to:)(v33, v34);
        sub_18D3C3EE8(v33, &qword_1E91B2118);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v59, v57);
        sub_18D3CD488(v31, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
        v50(v61, v27);
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
        v50(v62, v27);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
        return v35();
      }
    }
    else
    {
      sub_18D3C3FF4(*(void *)(v0 + 104), *(void *)(v0 + 144), &qword_1E91B1538);
      if (v11(v9, 1, v12) != 1)
      {
        uint64_t v19 = *(void *)(v0 + 264);
        uint64_t v18 = *(void *)(v0 + 272);
        uint64_t v20 = *(void *)(v0 + 256);
        uint64_t v22 = *(void *)(v0 + 152);
        uint64_t v21 = *(void *)(v0 + 160);
        uint64_t v23 = *(void *)(v0 + 144);
        uint64_t v24 = *(void *)(v0 + 104);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v18, v9, v20);
        sub_18D3DC2EC(&qword_1E91B1530, 255, MEMORY[0x1E4F279D8]);
        char v25 = sub_18D40A7B8();
        uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v26(v18, v20);
        sub_18D3C3EE8(v22, &qword_1E91B1538);
        sub_18D3C3EE8(v21, &qword_1E91B1538);
        v26(v23, v20);
        sub_18D3C3EE8(v24, &qword_1E91B1538);
        if (v25) {
          goto LABEL_10;
        }
LABEL_13:
        uint64_t v37 = *(void *)(v0 + 376);
        (*(void (**)(void, void))(*(void *)(v0 + 320) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 312));
        uint64_t v38 = v37;
        goto LABEL_16;
      }
      uint64_t v14 = *(void *)(v0 + 256);
      uint64_t v15 = *(void *)(v0 + 264);
      uint64_t v16 = *(void *)(v0 + 160);
      uint64_t v17 = *(void *)(v0 + 144);
      sub_18D3C3EE8(*(void *)(v0 + 152), &qword_1E91B1538);
      sub_18D3C3EE8(v16, &qword_1E91B1538);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
    }
    sub_18D3C3EE8(*(void *)(v0 + 104), &qword_1E91B2368);
    goto LABEL_13;
  }
  sub_18D3CD488(*(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
  sub_18D3C3EE8(v3, &qword_1E91B1540);
  while (1)
  {
    uint64_t v42 = *(void *)(v0 + 568) + 1;
    if (v42 == *(void *)(v0 + 552))
    {
      swift_bridgeObjectRelease();
      id v63 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
      uint64_t v43 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v43;
      *uint64_t v43 = v0;
      v43[1] = sub_18D3CBEC8;
      uint64_t v44 = *(void *)(v0 + 464);
      uint64_t v45 = *(void *)(v0 + 288);
      return v63(v45, v44);
    }
    *(void *)(v0 + 56_Block_object_dispose(&STACK[0x240], 8) = v42;
    uint64_t v39 = *(void *)(v0 + 360);
    sub_18D3C9168(*(void *)(v0 + 544)+ ((*(unsigned __int8 *)(v0 + 604) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 604))+ *(void *)(v0 + 560) * v42, *(void *)(v0 + 376));
    *(_DWORD *)(v0 + 60_Block_object_dispose(&STACK[0x240], 8) = *(_DWORD *)(v39 + 20);
    uint64_t v40 = sub_18D40A658();
    *(void *)(v0 + 576) = v41;
    if (v41) {
      break;
    }
    uint64_t v38 = *(void *)(v0 + 376);
LABEL_16:
    sub_18D3CD488(v38, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
  }
  uint64_t v46 = v40;
  uint64_t v47 = v41;
  id v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1E8] + MEMORY[0x1E4FAF1E8]);
  uint64_t v48 = (void *)swift_task_alloc();
  *(void *)(v0 + 584) = v48;
  *uint64_t v48 = v0;
  v48[1] = sub_18D3CB514;
  uint64_t v49 = *(void *)(v0 + 296);
  return v64(v49, v46, v47);
}

uint64_t sub_18D3CBEC8()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3CBFC4, 0, 0);
}

uint64_t sub_18D3CBFC4()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[36];
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v5 = v0[58];
  uint64_t v7 = v0[54];
  uint64_t v6 = v0[55];
  if (v4 == 1)
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v8(v0[57], v0[54]);
    v8(v5, v7);
    sub_18D3C3EE8(v3, &qword_1E91B1540);
    (*(void (**)(void, void, void))(v0[50] + 32))(v0[8], v0[53], v0[49]);
  }
  else
  {
    uint64_t v22 = v0[53];
    uint64_t v9 = v0[50];
    uint64_t v16 = v0[51];
    uint64_t v10 = v0[49];
    uint64_t v20 = v0[57];
    uint64_t v21 = v0[58];
    uint64_t v11 = v0[17];
    uint64_t v18 = v0[8];
    uint64_t v17 = v0[54];
    uint64_t v19 = v0[41];
    (*(void (**)(void))(v2 + 32))();
    sub_18D40A428();
    sub_18D40A648();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v22, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
    VoiceSelection.fallingBack(to:)(v11, v18);
    sub_18D3C3EE8(v11, &qword_1E91B2118);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v12(v16, v10);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v19, v1);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v13(v20, v17);
    v12(v22, v10);
    v13(v21, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_18D3CC484()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  MEMORY[0x1F4188790](v0 - 8, v1);
  char v67 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_18D40A338();
  uint64_t v3 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66, v4);
  uint64_t v65 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_18D40A2C8();
  uint64_t v6 = *(void *)(v71 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v71, v7);
  uint64_t v57 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v56 = (uint64_t)&v51 - v12;
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v55 = (char *)&v51 - v14;
  uint64_t v15 = sub_18D40A358();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v72 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  MEMORY[0x1F4188790](v19 - 8, v20);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_18D40A4D8();
  uint64_t v24 = *(void *)(v23 + 56);
  uint64_t v58 = v23 + 56;
  uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  int64_t v59 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v68 = v16 + 48;
  uint64_t v69 = v16 + 16;
  uint64_t v62 = (void (**)(char *, uint64_t))(v3 + 8);
  id v63 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v61 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v52 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v29 = v15;
  v60 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v70 = v23;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  uint64_t v32 = MEMORY[0x1E4FBC870];
  id v64 = v22;
  uint64_t v51 = v16;
  while (1)
  {
    if (v27)
    {
      unint64_t v33 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v34 = v33 | (v31 << 6);
      goto LABEL_26;
    }
    int64_t v35 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v35 >= v59) {
      goto LABEL_29;
    }
    unint64_t v36 = *(void *)(v58 + 8 * v35);
    ++v31;
    if (!v36)
    {
      int64_t v31 = v35 + 1;
      if (v35 + 1 >= v59) {
        goto LABEL_29;
      }
      unint64_t v36 = *(void *)(v58 + 8 * v31);
      if (!v36)
      {
        int64_t v31 = v35 + 2;
        if (v35 + 2 >= v59) {
          goto LABEL_29;
        }
        unint64_t v36 = *(void *)(v58 + 8 * v31);
        if (!v36)
        {
          int64_t v31 = v35 + 3;
          if (v35 + 3 >= v59) {
            goto LABEL_29;
          }
          unint64_t v36 = *(void *)(v58 + 8 * v31);
          if (!v36)
          {
            int64_t v31 = v35 + 4;
            if (v35 + 4 >= v59) {
              goto LABEL_29;
            }
            unint64_t v36 = *(void *)(v58 + 8 * v31);
            if (!v36) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v27 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v31 << 6);
LABEL_26:
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v22, *(void *)(v70 + 48) + *(void *)(v16 + 72) * v34, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v29);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v22, 1, v29) == 1) {
      goto LABEL_30;
    }
    (*v63)(v72, v22, v29);
    uint64_t v38 = v65;
    sub_18D40A348();
    uint64_t v39 = (uint64_t)v67;
    sub_18D40A328();
    uint64_t v40 = v71;
    (*v62)(v38, v66);
    if ((*v61)(v39, 1, v40) == 1)
    {
      sub_18D3C3EE8(v39, &qword_1E91B1538);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v41 = v55;
      uint64_t v42 = v39;
      uint64_t v43 = v28;
      uint64_t v44 = v29;
      uint64_t v45 = v71;
      (*v54)(v55, v42, v71);
      uint64_t v73 = v32;
      uint64_t v46 = v57;
      (*v53)(v57, v41, v45);
      swift_bridgeObjectRetain();
      uint64_t v47 = v56;
      sub_18D3D63A0(v56, v46);
      uint64_t v48 = *v52;
      (*v52)(v47, v45);
      uint64_t v49 = v41;
      uint64_t v16 = v51;
      uint64_t v50 = v45;
      uint64_t v29 = v44;
      uint64_t v28 = v43;
      v48((uint64_t)v49, v50);
      uint64_t v32 = v73;
    }
    (*v60)(v72, v29);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = v64;
  }
  int64_t v37 = v35 + 5;
  if (v37 >= v59)
  {
LABEL_29:
    (*v28)(v22, 1, 1, v29);
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    return v32;
  }
  unint64_t v36 = *(void *)(v58 + 8 * v37);
  if (v36)
  {
    int64_t v31 = v37;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v31 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v31 >= v59) {
      goto LABEL_29;
    }
    unint64_t v36 = *(void *)(v58 + 8 * v31);
    ++v37;
    if (v36) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_18D3CCB14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_18D40A2C8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_18D3DC2EC(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]),
        uint64_t v8 = sub_18D40A798(),
        uint64_t v9 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v10 = v8 & ~v9,
        uint64_t v11 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    uint64_t v18 = ~v9;
    uint64_t v19 = a2;
    uint64_t v12 = v4 + 16;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v14 = *(void *)(v12 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      v13(v7, *(void *)(v19 + 48) + v14 * v10, v3);
      sub_18D3DC2EC(&qword_1E91B1530, 255, MEMORY[0x1E4F279D8]);
      char v16 = sub_18D40A7B8();
      (*v15)(v7, v3);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v18;
    }
    while (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t VoiceSelection.fallingBack(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  uint64_t v7 = MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v65 = (uint64_t)&v64 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v64 = (uint64_t)&v64 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13, v15);
  uint64_t v70 = (char *)&v64 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v68 = (uint64_t)&v64 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v69 = (char *)&v64 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  uint64_t v67 = (uint64_t)&v64 - v26;
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  uint64_t v30 = (char *)&v64 - v29;
  uint64_t v32 = MEMORY[0x1F4188790](v28, v31);
  unint64_t v34 = (char *)&v64 - v33;
  MEMORY[0x1F4188790](v32, v35);
  int64_t v37 = (char *)&v64 - v36;
  uint64_t v38 = sub_18D40A678();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  uint64_t v71 = a2;
  v40(a2, v2, v38);
  uint64_t v41 = sub_18D40A5E8();
  uint64_t v42 = a1;
  sub_18D3C3FF4(a1, (uint64_t)v37, &qword_1E91B2118);
  if ((v41 & 0x100000000) != 0)
  {
    sub_18D3C3FF4((uint64_t)v37, (uint64_t)v34, &qword_1E91B2118);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v34, 1, v38) == 1)
    {
      uint64_t v43 = v39;
      uint64_t v44 = v38;
      sub_18D3C3EE8((uint64_t)v37, &qword_1E91B2118);
      sub_18D3C3EE8((uint64_t)v34, &qword_1E91B2118);
      LOBYTE(v45) = 1;
    }
    else
    {
      unint64_t v45 = ((unint64_t)sub_18D40A5E8() >> 32) & 1;
      sub_18D3C3EE8((uint64_t)v37, &qword_1E91B2118);
      uint64_t v43 = v39;
      uint64_t v46 = *(void (**)(char *, uint64_t))(v39 + 8);
      uint64_t v44 = v38;
      v46(v34, v38);
    }
  }
  else
  {
    uint64_t v43 = v39;
    uint64_t v44 = v38;
    sub_18D3C3EE8((uint64_t)v37, &qword_1E91B2118);
    LOBYTE(v45) = 0;
  }
  char v74 = v45;
  sub_18D40A5F8();
  uint64_t v47 = sub_18D40A608();
  sub_18D3C3FF4(v42, (uint64_t)v30, &qword_1E91B2118);
  if ((v47 & 0x100000000) != 0)
  {
    uint64_t v50 = v67;
    sub_18D3C3FF4((uint64_t)v30, v67, &qword_1E91B2118);
    uint64_t v49 = v43;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v50, 1, v44) == 1)
    {
      sub_18D3C3EE8((uint64_t)v30, &qword_1E91B2118);
      sub_18D3C3EE8(v50, &qword_1E91B2118);
      LOBYTE(v4_Block_object_dispose(&STACK[0x240], 8) = 1;
    }
    else
    {
      unint64_t v48 = ((unint64_t)sub_18D40A608() >> 32) & 1;
      sub_18D3C3EE8((uint64_t)v30, &qword_1E91B2118);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v50, v44);
    }
  }
  else
  {
    sub_18D3C3EE8((uint64_t)v30, &qword_1E91B2118);
    LOBYTE(v4_Block_object_dispose(&STACK[0x240], 8) = 0;
    uint64_t v49 = v43;
  }
  uint64_t v52 = (uint64_t)v69;
  uint64_t v51 = (uint64_t)v70;
  char v73 = v48;
  sub_18D40A618();
  uint64_t v53 = sub_18D40A5C8();
  sub_18D3C3FF4(v42, v52, &qword_1E91B2118);
  if ((v53 & 0x100000000) != 0)
  {
    uint64_t v55 = v68;
    sub_18D3C3FF4(v52, v68, &qword_1E91B2118);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v55, 1, v44) == 1)
    {
      sub_18D3C3EE8(v52, &qword_1E91B2118);
      sub_18D3C3EE8(v55, &qword_1E91B2118);
      LOBYTE(v54) = 1;
    }
    else
    {
      unint64_t v54 = ((unint64_t)sub_18D40A5C8() >> 32) & 1;
      sub_18D3C3EE8(v52, &qword_1E91B2118);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v55, v44);
    }
  }
  else
  {
    sub_18D3C3EE8(v52, &qword_1E91B2118);
    LOBYTE(v54) = 0;
  }
  char v72 = v54;
  sub_18D40A5D8();
  uint64_t v56 = sub_18D40A628();
  sub_18D3C3FF4(v42, v51, &qword_1E91B2118);
  if (v56)
  {
    sub_18D3C3EE8(v51, &qword_1E91B2118);
  }
  else
  {
    uint64_t v57 = v64;
    sub_18D3C3FF4(v51, v64, &qword_1E91B2118);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v57, 1, v44) == 1)
    {
      sub_18D3C3EE8(v51, &qword_1E91B2118);
      sub_18D3C3EE8(v57, &qword_1E91B2118);
    }
    else
    {
      sub_18D40A628();
      sub_18D3C3EE8(v51, &qword_1E91B2118);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v57, v44);
    }
  }
  sub_18D40A638();
  sub_18D40A658();
  uint64_t v59 = v58;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v59)
  {
    uint64_t v61 = v65;
    sub_18D3C3FF4(v42, v65, &qword_1E91B2118);
    uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    if (v62(v61, 1, v44) == 1)
    {
      sub_18D3C3EE8(v61, &qword_1E91B2118);
    }
    else
    {
      sub_18D40A658();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v61, v44);
    }
    uint64_t v63 = (uint64_t)v66;
    sub_18D40A668();
    sub_18D3C3FF4(v42, v63, &qword_1E91B2118);
    if (v62(v63, 1, v44) == 1)
    {
      sub_18D3C3EE8(v63, &qword_1E91B2118);
    }
    else
    {
      sub_18D40A598();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v63, v44);
    }
    return sub_18D40A5A8();
  }
  return result;
}

uint64_t sub_18D3CD488(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t AXPreferences.VoiceOver.defaultVoiceSelectionStream.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2388);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2390);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v11 = objc_retain(*(id *)(v0
                          + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  uint64_t v12 = (void *)sub_18D40A738();

  sub_18D40A758();
  sub_18D40A3E8();
  uint64_t v15 = sub_18D40A3D8();
  uint64_t v16 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2398);
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E4FBD028], v1);
  sub_18D40A9B8();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t AXPreferences.VoiceOver.speechVoiceIdentifier(forLanguage:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v3[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3CD788, 0, 0);
}

uint64_t sub_18D3CD788()
{
  uint64_t v1 = v0[5];
  id v2 = objc_retain(*(id *)(v1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  uint64_t v3 = (void *)sub_18D40A738();

  sub_18D40A6D8();
  uint64_t v4 = v0[2];
  v0[7] = v4;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_18D3CD884;
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  return Dictionary<>.voiceSelection(forLanguage:withResolver:exists:)(v7, v8, v9, v5, 0, v4);
}

uint64_t sub_18D3CD884()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18D3CD99C, 0, 0);
}

uint64_t sub_18D3CD99C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = sub_18D40A678();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_18D3C3EE8(v1, &qword_1E91B2118);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = sub_18D40A658();
    uint64_t v5 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v7(v4, v5);
}

uint64_t sub_18D3CDC48(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18D40A7F8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v3[4] = v7;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_18D3C097C;
  return AXPreferences.VoiceOver.speechVoiceIdentifier(forLanguage:)(a1, v7);
}

uint64_t AXPreferences.VoiceOver.set(voiceId:forLanguage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  void v5[6] = a1;
  return MEMORY[0x1F4188298](sub_18D3CDD54, 0, 0);
}

uint64_t sub_18D3CDD54()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver);
  uint64_t v3 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
  v0[11] = v3;
  id v4 = v3;
  v0[12] = sub_18D40A708();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_18D3C1C04;
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v9, v8, v6, v7, v2);
}

uint64_t sub_18D3CDFB8(uint64_t a1, int a2, void *aBlock, void *a4)
{
  void v4[6] = a4;
  v4[7] = _Block_copy(aBlock);
  if (a1)
  {
    uint64_t v7 = sub_18D40A7F8();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  v4[8] = v7;
  v4[9] = v8;
  v4[10] = sub_18D40A7F8();
  v4[11] = v9;
  id v10 = a4;
  return MEMORY[0x1F4188298](sub_18D3CE06C, 0, 0);
}

uint64_t sub_18D3CE06C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver);
  uint64_t v3 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
  v0[12] = v3;
  id v4 = v3;
  v0[13] = sub_18D40A708();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_18D3C205C;
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  return Dictionary<>.set(voiceId:forLanguage:withResolver:)(v9, v8, v6, v7, v2);
}

Swift::Void __swiftcall AXPreferences.VoiceOver.set(voiceId:forLanguage:rate:volume:pitch:)(Swift::String_optional voiceId, Swift::String forLanguage, Swift::Float rate, Swift::Float volume, Swift::Float pitch)
{
  object = voiceId.value._object;
  uint64_t countAndFlagsBits = voiceId.value._countAndFlagsBits;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  uint64_t v12 = MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v12, v15);
  uint64_t v18 = (char *)v58 - v17;
  uint64_t v20 = MEMORY[0x1F4188790](v16, v19);
  uint64_t v22 = (char *)v58 - v21;
  MEMORY[0x1F4188790](v20, v23);
  uint64_t v25 = (char *)v58 - v24;
  uint64_t v26 = sub_18D40A2C8();
  uint64_t v62 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v26, v27);
  uint64_t v63 = (char *)v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v30);
  uint64_t v32 = (char *)v58 - v31;
  swift_bridgeObjectRetain();
  sub_18D40A2D8();
  if (!object) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  if (sub_18D40A838() < 1)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v43 = v62;
    uint64_t v44 = (uint64_t)v63;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v63, v32, v26);
    uint64_t v45 = sub_18D40A678();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v14, 1, 1, v45);
    id v46 = objc_retain(*(id *)(v64
                            + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
    uint64_t v47 = (void (*)(void *, void))sub_18D40A708();
    sub_18D3ED7D8((uint64_t)v14, v44);
    v47(v65, 0);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v26);
    return;
  }
  uint64_t v59 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
  id v33 = objc_retain(*(id *)(v64
                          + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage));
  sub_18D40A718();

  uint64_t v34 = v65[0];
  uint64_t v35 = *(void *)(v65[0] + 16);
  v60 = v14;
  uint64_t v61 = v26;
  v58[1] = countAndFlagsBits;
  if (v35 && (unint64_t v36 = sub_18D3F0A5C((uint64_t)v32), (v37 & 1) != 0))
  {
    unint64_t v38 = v36;
    v58[0] = *(void *)(v34 + 56);
    uint64_t v39 = sub_18D40A678();
    uint64_t v40 = *(void *)(v39 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v25, v58[0] + *(void *)(v40 + 72) * v38, v39);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v25, 0, 1, v39);
  }
  else
  {
    uint64_t v39 = sub_18D40A678();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v25, 1, 1, v39);
  }
  swift_bridgeObjectRelease();
  sub_18D3C3FF4((uint64_t)v25, (uint64_t)v18, &qword_1E91B2118);
  sub_18D40A678();
  uint64_t v41 = *(void *)(v39 - 8);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (v42(v18, 1, v39) == 1)
  {
    swift_bridgeObjectRetain();
    LOBYTE(v65[0]) = 1;
    sub_18D40A648();
    sub_18D3C3EE8((uint64_t)v18, &qword_1E91B2118);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v22, v18, v39);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v22, 0, 1, v39);
  sub_18D3D609C((uint64_t)v22, (uint64_t)v25);
  unint64_t v48 = v42;
  unsigned int v49 = v42(v25, 1, v39);
  uint64_t v50 = v61;
  if (v49) {
    swift_bridgeObjectRelease();
  }
  else {
    sub_18D40A668();
  }
  uint64_t v51 = v59;
  uint64_t v52 = v62;
  if (volume > 0.0 && !v48(v25, 1, v39))
  {
    LOBYTE(v65[0]) = 0;
    sub_18D40A618();
  }
  if (rate > 0.0 && !v48(v25, 1, v39))
  {
    LOBYTE(v65[0]) = 0;
    sub_18D40A5D8();
  }
  if (pitch > 0.0 && !v48(v25, 1, v39))
  {
    LOBYTE(v65[0]) = 0;
    sub_18D40A5F8();
  }
  uint64_t v53 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v63, v32, v50);
  uint64_t v54 = v50;
  uint64_t v55 = (uint64_t)v60;
  sub_18D3C3FF4((uint64_t)v25, (uint64_t)v60, &qword_1E91B2118);
  id v56 = *(id *)(v64 + v51);
  uint64_t v57 = (void (*)(void *, void))sub_18D40A708();
  sub_18D3ED7D8(v55, v53);
  v57(v65, 0);

  (*(void (**)(char *, uint64_t))(v52 + 8))(v32, v54);
  sub_18D3C3EE8((uint64_t)v25, &qword_1E91B2118);
}

uint64_t AXPreferences.VoiceOver.effectiveSpeakingVolume()()
{
  *(void *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v1 + 24) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3CE988, 0, 0);
}

uint64_t sub_18D3CE988()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3DC394;
  uint64_t v2 = *(void *)(v0 + 24);
  return AXPreferences.VoiceOver.effectiveSpeakingVolume(currentRotor:)(v2);
}

uint64_t AXPreferences.VoiceOver.effectiveSpeakingVolume(currentRotor:)(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = sub_18D40A678();
  v2[4] = v3;
  void v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  v2[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3CEB24, 0, 0);
}

uint64_t sub_18D3CEB24()
{
  uint64_t v1 = v0[8];
  sub_18D3C3FF4(v0[2], v1, &qword_1E91B2378);
  uint64_t v2 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = v0[8];
  if (v3 == 1)
  {
    sub_18D3C3EE8(v0[8], &qword_1E91B2378);
LABEL_7:
    uint64_t v12 = (void *)swift_task_alloc();
    v0[9] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_18D3CED10;
    uint64_t v13 = v0[6];
    return AXPreferences.VoiceOver.systemDefaultVoiceSelection()(v13);
  }
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4 + *(int *)(v2 + 20), v6);
  sub_18D3CD488(v4, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
  uint64_t v8 = sub_18D40A608();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  if ((v8 & 0x100000000) != 0) {
    goto LABEL_7;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(__n128))v0[1];
  v10.n128_u32[0] = v8;
  return v9(v10);
}

uint64_t sub_18D3CED10()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3CEE0C, 0, 0);
}

uint64_t sub_18D3CEE0C()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = sub_18D40A608();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 0x100000000) != 0) {
    float v5 = 0.8;
  }
  else {
    float v5 = *(float *)&v4;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(__n128))v0[1];
  v7.n128_f32[0] = v5;
  return v6(v7);
}

uint64_t sub_18D3CF03C(const void *a1, void *a2)
{
  v2[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  void v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  id v5 = a2;
  return MEMORY[0x1F4188298](sub_18D3CF0EC, 0, 0);
}

uint64_t sub_18D3CF0EC()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3DC398;
  uint64_t v2 = *(void *)(v0 + 24);
  return AXPreferences.VoiceOver.effectiveSpeakingVolume(currentRotor:)(v2);
}

uint64_t sub_18D3CF304(void *a1, const void *a2, void *a3)
{
  v3[2] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  uint64_t v7 = swift_task_alloc();
  v3[3] = v7;
  v3[4] = _Block_copy(a2);
  if (a1)
  {
    id v8 = a1;
    id v9 = a3;
    static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)(a1, v7);

    uint64_t v10 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
    id v12 = a3;
  }
  uint64_t v13 = (void *)swift_task_alloc();
  void v3[5] = v13;
  *uint64_t v13 = v3;
  v13[1] = sub_18D3DC39C;
  return AXPreferences.VoiceOver.effectiveSpeakingVolume(currentRotor:)(v7);
}

uint64_t AXPreferences.VoiceOver.setEffectiveSpeakingVolume(_:)(float a1)
{
  *(void *)(v2 + 16) = v1;
  *(float *)(v2 + 40) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v2 + 24) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3CF52C, 0, 0);
}

uint64_t sub_18D3CF52C()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3DC390;
  uint64_t v2 = *(void *)(v0 + 24);
  float v3 = *(float *)(v0 + 40);
  return AXPreferences.VoiceOver.setEffectiveSpeakingVolume(currentRotor:value:)(v2, v3);
}

uint64_t AXPreferences.VoiceOver.setEffectiveSpeakingVolume(currentRotor:value:)(uint64_t a1, float a2)
{
  *(float *)(v3 + 296) = a2;
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 8_Block_object_dispose(&STACK[0x240], 8) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  *(void *)(v3 + 112) = swift_task_alloc();
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v4 = sub_18D40A338();
  *(void *)(v3 + 12_Block_object_dispose(&STACK[0x240], 8) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  uint64_t v5 = sub_18D40A2C8();
  *(void *)(v3 + 152) = v5;
  *(void *)(v3 + 160) = *(void *)(v5 - 8);
  *(void *)(v3 + 16_Block_object_dispose(&STACK[0x240], 8) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  uint64_t v6 = sub_18D40A358();
  *(void *)(v3 + 184) = v6;
  *(void *)(v3 + 192) = *(void *)(v6 - 8);
  *(void *)(v3 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v3 + 20_Block_object_dispose(&STACK[0x240], 8) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  *(void *)(v3 + 216) = v7;
  *(void *)(v3 + 224) = *(void *)(v7 - 8);
  *(void *)(v3 + 232) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3CF864, 0, 0);
}

uint64_t sub_18D3CF864()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  sub_18D3C3FF4(*(void *)(v0 + 80), v3, &qword_1E91B2378);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 88);
    sub_18D3C3EE8(*(void *)(v0 + 208), &qword_1E91B2378);
    *(void *)(v0 + 240) = *(void *)(v4
                                      + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver);
    uint64_t v19 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 24_Block_object_dispose(&STACK[0x240], 8) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_18D3CFB18;
    uint64_t v6 = *(void *)(v0 + 200);
    return v19(v6);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 88);
    int v10 = *(_DWORD *)(v0 + 296);
    sub_18D3C91CC(*(void *)(v0 + 208), v8);
    uint64_t v11 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors;
    id v12 = *(id *)(v9 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
    sub_18D40A718();

    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v14 = swift_task_alloc();
    *(void *)(v14 + 16) = v8;
    *(_DWORD *)(v14 + 24) = v10;
    uint64_t v15 = sub_18D3D04C0((void (*)(uint64_t))sub_18D3D6104, v14, v13);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v16 = *(void **)(v9 + v11);
    *(void *)(v0 + 72) = v15;
    id v17 = v16;
    sub_18D40A728();

    sub_18D3CD488(v8, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_18D3CFB18()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3CFC14, 0, 0);
}

uint64_t sub_18D3CFC14()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  sub_18D40A348();
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1);
  uint64_t v8 = v0[15];
  if (v7 == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    sub_18D3C3EE8(v8, &qword_1E91B1538);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[20];
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[11];
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 32))(v11, v0[15], v12);
    uint64_t v16 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
    v0[32] = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
    id v17 = *(id *)(v15 + v16);
    sub_18D40A718();

    uint64_t v18 = v0[6];
    v0[33] = v18;
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v0[34] = v19;
    v0[35] = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v19(v14, v11, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v14, 0, 1, v12);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[36] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_18D3CFEB4;
    uint64_t v21 = v0[30];
    uint64_t v22 = v0[13];
    uint64_t v23 = v0[14];
    return Dictionary<>.selection(forLanguage:withResolver:exists:)(v22, v23, v21, 0, v18);
  }
}

uint64_t sub_18D3CFEB4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_18D3C3EE8(v1, &qword_1E91B1538);
  return MEMORY[0x1F4188298](sub_18D3CFFF0, 0, 0);
}

uint64_t sub_18D3CFFF0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = sub_18D40A678();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2))
  {
    sub_18D40A618();
    uint64_t v1 = *(void *)(v0 + 104);
  }
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  uint64_t v14 = v1;
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t))(v0 + 272))(v6);
  sub_18D3C3FF4(v1, v9, &qword_1E91B2118);
  id v10 = *(id *)(v8 + v3);
  uint64_t v11 = (void (*)(uint64_t, void))sub_18D40A708();
  sub_18D3ED7D8(v9, v6);
  v11(v0 + 16, 0);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v17, v16);
  sub_18D3C3EE8(v14, &qword_1E91B2118);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_18D3D036C(const void *a1, void *a2, float a3)
{
  *(void *)(v3 + 16) = a2;
  *(float *)(v3 + 4_Block_object_dispose(&STACK[0x240], 8) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v3 + 24) = swift_task_alloc();
  *(void *)(v3 + 32) = _Block_copy(a1);
  id v6 = a2;
  return MEMORY[0x1F4188298](sub_18D3D0420, 0, 0);
}

uint64_t sub_18D3D0420()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3DC388;
  uint64_t v2 = *(void *)(v0 + 24);
  float v3 = *(float *)(v0 + 48);
  return AXPreferences.VoiceOver.setEffectiveSpeakingVolume(currentRotor:value:)(v2, v3);
}

uint64_t sub_18D3D04C0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v6 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8, v8);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    sub_18D3FCA98(0, v11, 0);
    uint64_t v12 = v22;
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = a3 + v19;
    uint64_t v14 = *(void *)(v7 + 72);
    while (1)
    {
      v20(v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v22 = v12;
      unint64_t v16 = *(void *)(v12 + 16);
      unint64_t v15 = *(void *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_18D3FCA98(v15 > 1, v16 + 1, 1);
        uint64_t v12 = v22;
      }
      *(void *)(v12 + 16) = v16 + 1;
      sub_18D3C91CC((uint64_t)v10, v12 + v19 + v16 * v14);
      v13 += v14;
      if (!--v11) {
        return v12;
      }
    }
    swift_release();
  }
  return v12;
}

uint64_t sub_18D3D07E0(void *a1, const void *a2, void *a3, float a4)
{
  v4[2] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  uint64_t v9 = swift_task_alloc();
  v4[3] = v9;
  void v4[4] = _Block_copy(a2);
  if (a1)
  {
    id v10 = a1;
    id v11 = a3;
    static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)(a1, v9);

    uint64_t v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
    id v14 = a3;
  }
  unint64_t v15 = (void *)swift_task_alloc();
  void v4[5] = v15;
  *unint64_t v15 = v4;
  v15[1] = sub_18D3DC38C;
  return AXPreferences.VoiceOver.setEffectiveSpeakingVolume(currentRotor:value:)(v9, a4);
}

uint64_t AXPreferences.VoiceOver.effectiveSpeakingRate()()
{
  *(void *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v1 + 24) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3D0A14, 0, 0);
}

uint64_t sub_18D3D0A14()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3D0AB0;
  uint64_t v2 = *(void *)(v0 + 24);
  return AXPreferences.VoiceOver.effectiveSpeakingRate(currentRotor:)(v2);
}

uint64_t sub_18D3D0AB0(float a1)
{
  uint64_t v3 = *(void *)(*v1 + 24);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  sub_18D3C3EE8(v3, &qword_1E91B2378);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(__n128))(v7 + 8);
  v5.n128_f32[0] = a1;
  return v4(v5);
}

uint64_t AXPreferences.VoiceOver.effectiveSpeakingRate(currentRotor:)(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = sub_18D40A678();
  v2[4] = v3;
  void v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  v2[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3D0CD8, 0, 0);
}

uint64_t sub_18D3D0CD8()
{
  uint64_t v1 = v0[8];
  sub_18D3C3FF4(v0[2], v1, &qword_1E91B2378);
  uint64_t v2 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = v0[8];
  if (v3 == 1)
  {
    sub_18D3C3EE8(v0[8], &qword_1E91B2378);
LABEL_7:
    uint64_t v12 = (void *)swift_task_alloc();
    v0[9] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_18D3D0EC4;
    uint64_t v13 = v0[6];
    return AXPreferences.VoiceOver.systemDefaultVoiceSelection()(v13);
  }
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4 + *(int *)(v2 + 20), v6);
  sub_18D3CD488(v4, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
  uint64_t v8 = sub_18D40A5C8();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  if ((v8 & 0x100000000) != 0) {
    goto LABEL_7;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(__n128))v0[1];
  v10.n128_u32[0] = v8;
  return v9(v10);
}

uint64_t sub_18D3D0EC4()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3D0FC0, 0, 0);
}

uint64_t sub_18D3D0FC0()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = sub_18D40A5C8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 0x100000000) != 0) {
    float v5 = 0.5;
  }
  else {
    float v5 = *(float *)&v4;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(__n128))v0[1];
  v7.n128_f32[0] = v5;
  return v6(v7);
}

uint64_t sub_18D3D11E8(const void *a1, void *a2)
{
  v2[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  void v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  id v5 = a2;
  return MEMORY[0x1F4188298](sub_18D3D1298, 0, 0);
}

uint64_t sub_18D3D1298()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3D1334;
  uint64_t v2 = *(void *)(v0 + 24);
  return AXPreferences.VoiceOver.effectiveSpeakingRate(currentRotor:)(v2);
}

uint64_t sub_18D3D1334(float a1)
{
  uint64_t v3 = *(void (***)(void, float))(*v1 + 32);
  uint64_t v4 = *(void *)(*v1 + 24);
  id v5 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();
  sub_18D3C3EE8(v4, &qword_1E91B2378);

  v3[2](v3, a1);
  _Block_release(v3);
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

uint64_t sub_18D3D1624(void *a1, const void *a2, void *a3)
{
  v3[2] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  uint64_t v7 = swift_task_alloc();
  v3[3] = v7;
  v3[4] = _Block_copy(a2);
  if (a1)
  {
    id v8 = a1;
    id v9 = a3;
    static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)(a1, v7);

    uint64_t v10 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
    id v12 = a3;
  }
  uint64_t v13 = (void *)swift_task_alloc();
  void v3[5] = v13;
  *uint64_t v13 = v3;
  v13[1] = sub_18D3D17B4;
  return AXPreferences.VoiceOver.effectiveSpeakingRate(currentRotor:)(v7);
}

uint64_t sub_18D3D17B4(float a1)
{
  uint64_t v3 = *(void (***)(void, float))(*v1 + 32);
  uint64_t v4 = *(void *)(*v1 + 24);
  id v5 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  sub_18D3C3EE8(v4, &qword_1E91B2378);
  v3[2](v3, a1);
  _Block_release(v3);
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

uint64_t AXPreferences.VoiceOver.setEffectiveSpeakingRate(_:)(float a1)
{
  *(void *)(v2 + 16) = v1;
  *(float *)(v2 + 40) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v2 + 24) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3D19C0, 0, 0);
}

uint64_t sub_18D3D19C0()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3D1A60;
  uint64_t v2 = *(void *)(v0 + 24);
  float v3 = *(float *)(v0 + 40);
  return AXPreferences.VoiceOver.setEffectiveSpeakingRate(currentRotor:value:)(v2, v3);
}

uint64_t sub_18D3D1A60()
{
  uint64_t v1 = *(void *)(*v0 + 24);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_18D3C3EE8(v1, &qword_1E91B2378);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t AXPreferences.VoiceOver.setEffectiveSpeakingRate(currentRotor:value:)(uint64_t a1, float a2)
{
  *(float *)(v3 + 296) = a2;
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 8_Block_object_dispose(&STACK[0x240], 8) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  *(void *)(v3 + 112) = swift_task_alloc();
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v4 = sub_18D40A338();
  *(void *)(v3 + 12_Block_object_dispose(&STACK[0x240], 8) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  uint64_t v5 = sub_18D40A2C8();
  *(void *)(v3 + 152) = v5;
  *(void *)(v3 + 160) = *(void *)(v5 - 8);
  *(void *)(v3 + 16_Block_object_dispose(&STACK[0x240], 8) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  uint64_t v6 = sub_18D40A358();
  *(void *)(v3 + 184) = v6;
  *(void *)(v3 + 192) = *(void *)(v6 - 8);
  *(void *)(v3 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v3 + 20_Block_object_dispose(&STACK[0x240], 8) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  *(void *)(v3 + 216) = v7;
  *(void *)(v3 + 224) = *(void *)(v7 - 8);
  *(void *)(v3 + 232) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3D1E18, 0, 0);
}

uint64_t sub_18D3D1E18()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  sub_18D3C3FF4(*(void *)(v0 + 80), v3, &qword_1E91B2378);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 88);
    sub_18D3C3EE8(*(void *)(v0 + 208), &qword_1E91B2378);
    *(void *)(v0 + 240) = *(void *)(v4
                                      + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver);
    unint64_t v19 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 24_Block_object_dispose(&STACK[0x240], 8) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_18D3D20CC;
    uint64_t v6 = *(void *)(v0 + 200);
    return v19(v6);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 88);
    int v10 = *(_DWORD *)(v0 + 296);
    sub_18D3C91CC(*(void *)(v0 + 208), v8);
    uint64_t v11 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors;
    id v12 = *(id *)(v9 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
    sub_18D40A718();

    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v14 = swift_task_alloc();
    *(void *)(v14 + 16) = v8;
    *(_DWORD *)(v14 + 24) = v10;
    uint64_t v15 = sub_18D3D04C0((void (*)(uint64_t))sub_18D3D613C, v14, v13);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    unint64_t v16 = *(void **)(v9 + v11);
    *(void *)(v0 + 72) = v15;
    id v17 = v16;
    sub_18D40A728();

    sub_18D3CD488(v8, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_18D3D20CC()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3D21C8, 0, 0);
}

uint64_t sub_18D3D21C8()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  sub_18D40A348();
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1);
  uint64_t v8 = v0[15];
  if (v7 == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    sub_18D3C3EE8(v8, &qword_1E91B1538);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[20];
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[11];
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 32))(v11, v0[15], v12);
    uint64_t v16 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
    v0[32] = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
    id v17 = *(id *)(v15 + v16);
    sub_18D40A718();

    uint64_t v18 = v0[6];
    v0[33] = v18;
    unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v0[34] = v19;
    v0[35] = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v19(v14, v11, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v14, 0, 1, v12);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[36] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_18D3D2468;
    uint64_t v21 = v0[30];
    uint64_t v22 = v0[13];
    uint64_t v23 = v0[14];
    return Dictionary<>.selection(forLanguage:withResolver:exists:)(v22, v23, v21, 0, v18);
  }
}

uint64_t sub_18D3D2468()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_18D3C3EE8(v1, &qword_1E91B1538);
  return MEMORY[0x1F4188298](sub_18D3D25A4, 0, 0);
}

uint64_t sub_18D3D25A4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = sub_18D40A678();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2))
  {
    sub_18D40A5D8();
    uint64_t v1 = *(void *)(v0 + 104);
  }
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  uint64_t v14 = v1;
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t))(v0 + 272))(v6);
  sub_18D3C3FF4(v1, v9, &qword_1E91B2118);
  id v10 = *(id *)(v8 + v3);
  uint64_t v11 = (void (*)(uint64_t, void))sub_18D40A708();
  sub_18D3ED7D8(v9, v6);
  v11(v0 + 16, 0);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v17, v16);
  sub_18D3C3EE8(v14, &qword_1E91B2118);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_18D3D2920(const void *a1, void *a2, float a3)
{
  *(void *)(v3 + 16) = a2;
  *(float *)(v3 + 4_Block_object_dispose(&STACK[0x240], 8) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  *(void *)(v3 + 24) = swift_task_alloc();
  *(void *)(v3 + 32) = _Block_copy(a1);
  id v6 = a2;
  return MEMORY[0x1F4188298](sub_18D3D29D4, 0, 0);
}

uint64_t sub_18D3D29D4()
{
  AXPreferences.VoiceOver.currentVoiceRotor.getter(*(void *)(v0 + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  void *v1 = v0;
  v1[1] = sub_18D3D2A74;
  uint64_t v2 = *(void *)(v0 + 24);
  float v3 = *(float *)(v0 + 48);
  return AXPreferences.VoiceOver.setEffectiveSpeakingRate(currentRotor:value:)(v2, v3);
}

uint64_t sub_18D3D2A74()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 32);
  uint64_t v2 = *(void *)(*v0 + 24);
  float v3 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  sub_18D3C3EE8(v2, &qword_1E91B2378);

  v1[2](v1);
  _Block_release(v1);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_18D3D2BE0@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>, unsigned int a5@<S0>)
{
  BOOL v9 = *a1 == *a2 && a1[1] == a2[1];
  if (!v9 && (sub_18D40ACA8() & 1) == 0) {
    return sub_18D3C9168((uint64_t)a1, a4);
  }
  sub_18D3C9168((uint64_t)a1, a4);
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  return a3(a5);
}

uint64_t sub_18D3D2E1C(void *a1, const void *a2, void *a3, float a4)
{
  v4[2] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  uint64_t v9 = swift_task_alloc();
  v4[3] = v9;
  void v4[4] = _Block_copy(a2);
  if (a1)
  {
    id v10 = a1;
    id v11 = a3;
    static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)(a1, v9);

    uint64_t v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
    id v14 = a3;
  }
  uint64_t v15 = (void *)swift_task_alloc();
  void v4[5] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_18D3D2FBC;
  return AXPreferences.VoiceOver.setEffectiveSpeakingRate(currentRotor:value:)(v9, a4);
}

uint64_t sub_18D3D2FBC()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 32);
  uint64_t v2 = *(void *)(*v0 + 24);
  float v3 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();

  sub_18D3C3EE8(v2, &qword_1E91B2378);
  v1[2](v1);
  _Block_release(v1);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

id AXPreferences.VoiceOver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void AXPreferences.VoiceOver.init()()
{
  id v1 = v0;
  Objectint Type = (objc_class *)swift_getObjectType();
  uint64_t v223 = sub_18D40A288();
  uint64_t v219 = *(void *)(v223 - 8);
  MEMORY[0x1F4188790](v223, v2);
  v216 = (char *)&v211 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  MEMORY[0x1F4188790](v4 - 8, v5);
  v215 = (char *)&v211 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  MEMORY[0x1F4188790](v7 - 8, v8);
  v220 = (char *)&v211 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v237 = sub_18D40A358();
  *(void *)&long long v243 = *(void *)(v237 - 8);
  MEMORY[0x1F4188790](v237, v10);
  uint64_t v236 = (uint64_t)&v211 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  uint64_t v14 = MEMORY[0x1F4188790](v12 - 8, v13);
  v221 = (char *)&v211 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  v222 = (char *)&v211 - v18;
  MEMORY[0x1F4188790](v17, v19);
  v227 = (char *)&v211 - v20;
  uint64_t v254 = sub_18D40A698();
  uint64_t v247 = *(void *)(v254 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v254, v21);
  v244 = (char *)&v211 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v24);
  v245 = (char *)&v211 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  uint64_t v28 = MEMORY[0x1F4188790](v26 - 8, v27);
  uint64_t v233 = (uint64_t)&v211 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v30);
  uint64_t v32 = (char *)&v211 - v31;
  uint64_t v33 = sub_18D40A4B8();
  MEMORY[0x1F4188790](v33 - 8, v34);
  v253 = (char *)&v211 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_18D40A3C8();
  uint64_t v248 = *(void *)(v36 - 8);
  uint64_t v249 = v36;
  MEMORY[0x1F4188790](v36, v37);
  uint64_t v39 = (uint64_t *)((char *)&v211 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v252 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver_resolver;
  v250 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18D40A3E8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1550);
  uint64_t v40 = sub_18D40A388();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(void *)(v41 + 72);
  unint64_t v43 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_18D431190;
  id v251 = v1;
  sub_18D40A468();
  uint64_t v45 = *MEMORY[0x1E4FAF1B8];
  id v46 = *(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 104);
  v46(v44 + v43, v45, v40);
  sub_18D40A478();
  v46(v44 + v43 + v42, v45, v40);
  v46(v44 + v43 + 2 * v42, *MEMORY[0x1E4FAF1C8], v40);
  v46(v44 + v43 + 3 * v42, *MEMORY[0x1E4FAF1A8], v40);
  *uint64_t v39 = v44;
  (*(void (**)(uint64_t *, void, uint64_t))(v248 + 104))(v39, *MEMORY[0x1E4FAF1E0], v249);
  uint64_t v47 = sub_18D40A508();
  uint64_t v48 = sub_18D40A4F8();
  uint64_t v257 = v47;
  uint64_t v258 = MEMORY[0x1E4FAF258];
  uint64_t v256 = v48;
  sub_18D40A4A8();
  *(void *)(v246 + v252) = sub_18D40A398();
  v253 = (char *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage;
  uint64_t v49 = MEMORY[0x1E4FBC860];
  unint64_t v50 = sub_18D3BF4CC(MEMORY[0x1E4FBC860]);
  uint64_t v51 = sub_18D40A6A8();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v54 = v52 + 56;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v53(v32, 1, 1, v51);
  uint64_t v55 = v53;
  uint64_t v56 = (uint64_t)v245;
  sub_18D40A688();
  uint64_t v57 = sub_18D3D96A8(v50, 0xD000000000000016, 0x800000018D42DE20, 0, 0, 6, (uint64_t)v32, (uint64_t)sub_18D3C40EC, 0, v56, &qword_1E91B2220);
  swift_bridgeObjectRelease();
  uint64_t v58 = (char *)v251;
  *(void *)&v253[(void)v251] = v57;
  uint64_t v59 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors;
  v55(v32, 1, 1, v51);
  sub_18D40A688();
  *(void *)&v58[v59] = sub_18D3D96A8(v49, 0x746F526563696F76, 0xEB0000000073726FLL, 0, 0, 6, (uint64_t)v32, (uint64_t)sub_18D3C5BC8, 0, v56, &qword_1E91B25A0);
  uint64_t v241 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver___oldDomainRotors;
  v60 = *(void (**)(void *))(v52 + 104);
  unsigned int v214 = *MEMORY[0x1E4F47EE0];
  uint64_t v242 = v52 + 104;
  v238 = v60;
  v60(v32);
  uint64_t v61 = v55;
  v250 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55;
  v55(v32, 0, 1, v51);
  uint64_t v256 = v49;
  uint64_t v62 = sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  unint64_t v64 = sub_18D3BEC1C();
  v253 = (char *)v63;
  unint64_t v246 = v64;
  uint64_t v252 = v62;
  sub_18D40AAD8();
  uint64_t v65 = sub_18D3D9AF4(0, 0x746F526563696F76, 0xEB0000000073726FLL, 0, 0, 2, (uint64_t)v32, 0, 0, v56);
  *(void *)&v58[v241] = v65;
  v235 = (void *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__currentRotorVoiceIdentifier;
  uint64_t v66 = (uint64_t)v32;
  v61(v32, 1, 1, v51);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  uint64_t v67 = v254;
  sub_18D40AAD8();
  uint64_t v68 = v233;
  sub_18D3C3FF4(v66, v233, &qword_1E91B2098);
  uint64_t v69 = v247;
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
  uint64_t v71 = (uint64_t)v244;
  uint64_t v241 = v247 + 16;
  v240 = v70;
  v70(v244, (char *)v56, v67);
  uint64_t v72 = sub_18D3D9F3C(0, 0, 0xD00000000000001BLL, 0x800000018D42DE40, 0, 0, 2, v68, 0, 0, v71);
  char v73 = *(void (**)(char *, uint64_t))(v69 + 8);
  uint64_t v247 = v69 + 8;
  v239 = v73;
  v73((char *)v56, v67);
  sub_18D3C3EE8(v66, &qword_1E91B2098);
  id v74 = v251;
  *(void *)((char *)v235 + (void)v251) = v72;
  v235 = (void *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__largeCursorEnabled;
  uint64_t v75 = v51;
  uint64_t v248 = v54;
  uint64_t v249 = v51;
  uint64_t v76 = v51;
  uint64_t v77 = v250;
  v250(v66, 1, 1, v76);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  sub_18D40AAD8();
  uint64_t v213 = 0xD000000000000012;
  uint64_t v78 = sub_18D3C4114(0, 0xD000000000000012, 0x800000018D42DE60, 0xD000000000000026, 0x800000018D42DE80, 2, v66, 0, 0, v56);
  *(void *)((char *)v235 + (void)v74) = v78;
  v235 = (void *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__contentDescriptionLevel;
  v77(v66, 1, 1, v75);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  sub_18D40AAD8();
  unint64_t v218 = 0xD000000000000017;
  uint64_t v212 = 0xD000000000000023;
  uint64_t v79 = sub_18D3C4554(1, 0xD000000000000017, 0x800000018D42DEB0, 0xD000000000000023, 0x800000018D42DED0, 2, v66, 0, 0, v56);
  id v80 = v251;
  *(void *)((char *)v235 + (void)v251) = v79;
  v235 = (void *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useDigitalCrownNavigation;
  uint64_t v81 = sub_18D40A7F8();
  v234 = v82;
  uint64_t v83 = v249;
  v77(v66, 1, 1, v249);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  sub_18D40AAD8();
  uint64_t v84 = sub_18D3C4114(0, 0xD000000000000019, 0x800000018D42DF00, v81, (uint64_t)v234, 2, v66, 0, 0, v56);
  *(void *)((char *)v235 + (void)v80) = v84;
  v234 = (char *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__imageCaptionsEnabled;
  v77(v66, 1, 1, v83);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  sub_18D40AAD8();
  v235 = (void *)0xD000000000000022;
  uint64_t v85 = sub_18D3C4114(0, 0xD000000000000014, 0x800000018D42DF20, 0xD000000000000022, 0x800000018D42DF40, 2, v66, 0, 0, v56);
  id v86 = v251;
  *(void *)&v234[(void)v251] = v85;
  v234 = (char *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__useTVToggleStyleNavigation;
  uint64_t v87 = v249;
  BOOL v88 = v250;
  v250(v66, 1, 1, v249);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  sub_18D40AAD8();
  uint64_t v89 = sub_18D3C4114(1, 0xD00000000000001ALL, 0x800000018D42DF70, 0xD000000000000026, 0x800000018D42DF90, 2, v66, 0, 0, v56);
  *(void *)&v234[(void)v86] = v89;
  v234 = (char *)OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__continuousPathKeyboardStartTimeout;
  double v90 = *MEMORY[0x1E4F485B8];
  uint64_t v91 = sub_18D40A7F8();
  uint64_t v93 = v92;
  v88(v66, 1, 1, v87);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  uint64_t v94 = (uint64_t)v253;
  sub_18D40AAD8();
  uint64_t v95 = v91;
  os_log_type_t v96 = (void *)v66;
  uint64_t v97 = sub_18D3C4990((uint64_t)v235, v90, 0x800000018D42DFC0, v95, v93, 2, v66, 0, 0, v56);
  v98 = (char *)v251;
  *(void *)&v234[(void)v251] = v97;
  uint64_t v99 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__hearingAidRoutingEnabled;
  v250(v66, 1, 1, v249);
  uint64_t v256 = MEMORY[0x1E4FBC860];
  sub_18D40AAD8();
  *(void *)&v98[v99] = sub_18D3C4114(1, 0xD000000000000018, 0x800000018D42DFF0, 0xD000000000000021, 0x800000018D42E010, 2, v66, 0, 0, v56);
  uint64_t v100 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__braillePanningAutoTurnsReadingContent;
  *(void *)&v98[v100] = sub_18D3C723C(1, 0xD000000000000033, 0x800000018D42EF70, 0xD000000000000036, 0x800000018D42EF30);
  uint64_t v101 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputMode;
  *(void *)&v98[v101] = sub_18D3C67B8(1, 0xD000000000000026, 0x800000018D42EF00, 0xD000000000000029, 0x800000018D42EED0);
  uint64_t v102 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputMode;
  *(void *)&v98[v102] = sub_18D3C67B8(1, 0xD000000000000025, 0x800000018D42EEA0, 0xD000000000000028, 0x800000018D42EE70);
  uint64_t v103 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputMode;
  *(void *)&v98[v103] = sub_18D3C67B8(1, 0xD000000000000026, 0x800000018D42EE40, 0xD000000000000029, 0x800000018D42EE10);
  uint64_t v104 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplaySyncInputOutputTables;
  *(void *)&v98[v104] = sub_18D3C6B34(0);
  v234 = (char *)self;
  id v105 = objc_msgSend(v234, sel_sharedInstance);
  if (!v105)
  {
    __break(1u);
    goto LABEL_22;
  }
  v106 = v105;
  id v107 = objc_msgSend(v105, sel_userLocale);

  if (!v107)
  {
LABEL_22:
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v243 + 56))(v227, 1, 1, v237);
    goto LABEL_23;
  }
  uint64_t v108 = v236;
  sub_18D40A318();

  int64_t v109 = (void *)v243;
  v110 = *(void (**)(uint64_t, uint64_t, unint64_t))(v243 + 32);
  uint64_t v94 = (uint64_t)v227;
  uint64_t v111 = v108;
  uint64_t v112 = v237;
  uint64_t v230 = v243 + 32;
  v229 = v110;
  v110((uint64_t)v227, v111, v237);
  uint64_t v113 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v109[7];
  v232 = v109 + 7;
  v231 = v113;
  v113(v94, 0, 1, v112);
  v228 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v109[6];
  if (v228(v94, 1, v112) == 1)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v114 = (char *)self;
  id v115 = (void *)sub_18D40A308();
  uint64_t v116 = (void (*)(uint64_t, uint64_t))v109[1];
  *(void *)&long long v243 = v109 + 1;
  v226 = v116;
  v116(v94, v112);
  v227 = v114;
  id v117 = objc_msgSend(v114, sel_defaultTableForLocale_, v115);

  if (v117)
  {
    id v118 = objc_msgSend(v117, sel_identifier);

    uint64_t v94 = sub_18D40A7F8();
    id v117 = v119;
  }
  else
  {
    uint64_t v94 = 0;
  }
  uint64_t v120 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier;
  uint64_t v256 = MEMORY[0x1E4FBC860];
  uint64_t v121 = v245;
  uint64_t v122 = v254;
  sub_18D40AAD8();
  void *v96 = 0xD000000000000030;
  v96[1] = 0x800000018D42E080;
  v96[2] = 0;
  v225 = v96 + 2;
  v96[3] = 0;
  unsigned int v224 = *MEMORY[0x1E4F47EE8];
  uint64_t v123 = v249;
  v238(v96);
  v250((uint64_t)v96, 0, 1, v123);
  v235 = v96;
  v124 = v244;
  v240(v244, v121, v122);
  swift_bridgeObjectRetain();
  uint64_t v210 = (uint64_t)v124;
  os_log_type_t v96 = v235;
  uint64_t v125 = sub_18D3D9F3C(v94, (uint64_t)v117, 0, 0xE000000000000000, 0xD000000000000033, 0x800000018D42E040, 2, (uint64_t)v235, 0, 0, v210);
  swift_bridgeObjectRelease();
  v239(v121, v122);
  swift_bridgeObjectRelease();
  uint64_t v126 = (char *)v251;
  *(void *)((char *)v251 + v120) = v125;
  id v127 = objc_msgSend(v234, sel_sharedInstance);
  if (!v127) {
    goto LABEL_24;
  }
  int64_t v128 = v127;
  id v129 = objc_msgSend(v127, sel_userLocale);

  uint64_t v94 = (uint64_t)v222;
  if (!v129)
  {
LABEL_25:
    v231(v94, 1, 1, v237);
    goto LABEL_26;
  }
  uint64_t v130 = v236;
  sub_18D40A318();

  uint64_t v131 = v130;
  uint64_t v132 = v237;
  v229(v94, v131, v237);
  v231(v94, 0, 1, v132);
  unsigned int v133 = v228(v94, 1, v132);
  uint64_t v134 = MEMORY[0x1E4FBC860];
  if (v133 == 1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v135 = (void *)sub_18D40A308();
  v226(v94, v132);
  id v136 = objc_msgSend(v227, sel_defaultTableForLocale_, v135);

  if (v136)
  {
    id v137 = objc_msgSend(v136, sel_identifier);

    uint64_t v138 = sub_18D40A7F8();
    id v136 = v139;
  }
  else
  {
    uint64_t v138 = 0;
  }
  uint64_t v140 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier;
  uint64_t v256 = v134;
  v141 = v245;
  uint64_t v142 = v254;
  sub_18D40AAD8();
  void *v96 = 0xD000000000000031;
  v96[1] = 0x800000018D42E100;
  v143 = v225;
  void *v225 = 0;
  v143[1] = 0;
  uint64_t v144 = v249;
  ((void (*)(void *, void, uint64_t))v238)(v96, v224, v249);
  v250((uint64_t)v96, 0, 1, v144);
  os_log_type_t v96 = v244;
  v240(v244, v141, v142);
  swift_bridgeObjectRetain();
  uint64_t v145 = sub_18D3D9F3C(v138, (uint64_t)v136, 0, 0xE000000000000000, 0xD000000000000034, 0x800000018D42E0C0, 2, (uint64_t)v235, 0, 0, (uint64_t)v96);
  swift_bridgeObjectRelease();
  v239(v141, v142);
  swift_bridgeObjectRelease();
  *(void *)&v126[v140] = v145;
  id v146 = objc_msgSend(v234, sel_sharedInstance);
  if (!v146) {
    goto LABEL_27;
  }
  v147 = v146;
  id v148 = objc_msgSend(v146, sel_userLocale);

  os_log_type_t v96 = v221;
  if (!v148)
  {
LABEL_28:
    v231((uint64_t)v96, 1, 1, v237);
    goto LABEL_29;
  }
  uint64_t v149 = v236;
  sub_18D40A318();

  uint64_t v150 = v149;
  uint64_t v151 = v237;
  v229((uint64_t)v96, v150, v237);
  v231((uint64_t)v96, 0, 1, v151);
  unsigned int v152 = v228((uint64_t)v96, 1, v151);
  uint64_t v153 = MEMORY[0x1E4FBC860];
  if (v152 == 1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v154 = (void *)sub_18D40A308();
  v226((uint64_t)v96, v151);
  id v155 = objc_msgSend(v227, sel_defaultTableForLocale_, v154);

  uint64_t v156 = (uint64_t)v244;
  if (v155)
  {
    id v157 = objc_msgSend(v155, sel_identifier);

    uint64_t v158 = sub_18D40A7F8();
    uint64_t v160 = v159;
  }
  else
  {
    uint64_t v158 = 0;
    uint64_t v160 = 0;
  }
  uint64_t v161 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier;
  uint64_t v256 = v153;
  v162 = v245;
  uint64_t v163 = v254;
  sub_18D40AAD8();
  v164 = v235;
  void *v235 = 0xD000000000000031;
  v164[1] = 0x800000018D42E180;
  v165 = v225;
  void *v225 = 0;
  v165[1] = 0;
  uint64_t v166 = v249;
  ((void (*)(void *, void, uint64_t))v238)(v164, v224, v249);
  v250((uint64_t)v164, 0, 1, v166);
  v240((char *)v156, v162, v163);
  swift_bridgeObjectRetain();
  uint64_t v167 = sub_18D3D9F3C(v158, v160, 0, 0xE000000000000000, 0xD000000000000034, 0x800000018D42E140, 2, (uint64_t)v164, 0, 0, v156);
  swift_bridgeObjectRelease();
  v239(v162, v163);
  swift_bridgeObjectRelease();
  v168 = (char *)v251;
  *(void *)((char *)v251 + v161) = v167;
  uint64_t v169 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesActivationGestureEnabled;
  *(void *)&v168[v169] = sub_18D3C723C(0, 0xD000000000000035, 0x800000018D42ED50, 0xD000000000000038, 0x800000018D42ED10);
  uint64_t v170 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesSoundOption;
  *(void *)&v168[v170] = sub_18D3C75A8(2);
  uint64_t v171 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesHapticFeedback;
  *(void *)&v168[v171] = sub_18D3C723C(1, 0xD00000000000002FLL, 0x800000018D42EC80, 0xD000000000000032, 0x800000018D42EC40);
  uint64_t v172 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesUsesTypingSoundFeedback;
  *(void *)&v168[v172] = sub_18D3C723C(1, 0xD000000000000034, 0x800000018D42EC00, 0xD000000000000037, 0x800000018D42EBC0);
  uint64_t v173 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesDisplayEnteredText;
  *(void *)&v168[v173] = sub_18D3C723C(0, 0xD000000000000030, 0x800000018D42EB80, 0xD000000000000033, 0x800000018D42EB40);
  uint64_t v174 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesAutoActivateOnTextFields;
  *(void *)&v168[v174] = sub_18D3C723C(0, 0xD000000000000035, 0x800000018D42EB00, 0xD000000000000038, 0x800000018D42EAC0);
  uint64_t v175 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsKeyboardInputEnabled;
  *(void *)&v168[v175] = sub_18D3C723C(0, 0xD000000000000029, 0x800000018D42EA90, 0xD00000000000002CLL, 0x800000018D42EA60);
  uint64_t v176 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__perkinsChordKeyboardInputEnabled;
  *(void *)&v168[v176] = sub_18D3C723C(0, 0xD00000000000002ELL, 0x800000018D42EA30, 0xD000000000000031, 0x800000018D42E9F0);
  uint64_t v177 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultPunctuationGroup;
  v178 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v219 + 56);
  uint64_t v179 = (uint64_t)v220;
  v178(v220, 1, 1, v223);
  *(void *)&v168[v177] = sub_18D3C7E54(v179);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B23F8);
  uint64_t v180 = *(void *)(type metadata accessor for AXPreferences.VoiceOver.Activity() - 8);
  unint64_t v181 = (*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
  uint64_t v182 = swift_allocObject();
  long long v243 = xmmword_18D4310F0;
  *(_OWORD *)(v182 + 16) = xmmword_18D4310F0;
  v183 = (void *)sub_18D40A7C8();
  id v184 = AXLocalizedString(v183);

  if (v184)
  {
    unint64_t v237 = v182 + v181;
    uint64_t v236 = sub_18D40A7F8();
    uint64_t v186 = v185;

    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DCB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v243;
    v188 = (void *)*MEMORY[0x1E4F48FF0];
    *(void *)(inited + 32) = *MEMORY[0x1E4F48FF0];
    id v189 = v188;
    uint64_t v190 = sub_18D3D8834(inited);
    swift_setDeallocating();
    type metadata accessor for AXSSVoiceOverTextualContext(0);
    swift_arrayDestroy();
    sub_18D3DA388();
    objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_initialize);
    sub_18D40A268();
    v178((char *)v179, 0, 1, v223);
    uint64_t v191 = sub_18D40A678();
    uint64_t v192 = (uint64_t)v215;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v191 - 8) + 56))(v215, 1, 1, v191);
    uint64_t v193 = (uint64_t)v216;
    sub_18D40A278();
    sub_18D3E0938(v193, v236, v186, v190, 0, v179, 2, 2, v237, 2, 2, 2, 0, 1, 0, 1, 0, 1, 0,
      1,
      v192,
      2,
      2,
      2,
      0,
      1,
      2,
      2,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      2,
      2);
    *(void *)&long long v243 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__activities;
    uint64_t v194 = v249;
    v250((uint64_t)v164, 1, 1, v249);
    uint64_t v256 = MEMORY[0x1E4FBC860];
    uint64_t v195 = (uint64_t)v245;
    uint64_t v196 = v254;
    sub_18D40AAD8();
    uint64_t v197 = sub_18D3D96A8(v182, 0x6974697669746361, 0xEA00000000007365, 0xD000000000000020, 0x800000018D42E1E0, 13, (uint64_t)v164, 0, 0, v195, &qword_1E91B2558);
    swift_bridgeObjectRelease();
    v198 = (char *)v251;
    *(void *)((char *)v251 + v243) = v197;
    uint64_t v199 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedActivityId;
    ((void (*)(void *, void, uint64_t))v238)(v164, v214, v194);
    v200 = v250;
    v250((uint64_t)v164, 0, 1, v194);
    uint64_t v256 = MEMORY[0x1E4FBC860];
    sub_18D40AAD8();
    uint64_t v201 = v213;
    *(void *)&v198[v199] = sub_18D3D9F3C(0, 0, v213, 0x800000018D42E210, 0xD000000000000026, 0x800000018D42E230, 13, (uint64_t)v164, 0, 0, v195);
    uint64_t v202 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__languageDetectionEnabled;
    *(void *)&v198[v202] = sub_18D3C8550(1);
    uint64_t v203 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__pitchChangeEnabled;
    v200((uint64_t)v164, 1, 1, v194);
    v204 = v200;
    sub_18D40A688();
    *(void *)&v198[v203] = sub_18D3C4114(1, v201, 0x800000018D42E260, v212, 0x800000018D42E280, 2, (uint64_t)v164, 0, 0, v195);
    uint64_t v205 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedLanguage;
    v204((uint64_t)v164, 1, 1, v194);
    uint64_t v256 = MEMORY[0x1E4FBC860];
    sub_18D40AAD8();
    uint64_t v206 = v233;
    sub_18D3C3FF4((uint64_t)v164, v233, &qword_1E91B2098);
    uint64_t v207 = (uint64_t)v244;
    v240(v244, (char *)v195, v196);
    uint64_t v208 = sub_18D3D9F3C(0, 0, 0xD000000000000010, 0x800000018D42E2B0, 0, 0, 2, v206, 0, 0, v207);
    v239((char *)v195, v196);
    sub_18D3C3EE8((uint64_t)v164, &qword_1E91B2098);
    *(void *)&v198[v205] = v208;
    uint64_t v209 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__speakUpEnabled;
    *(void *)&v198[v209] = sub_18D3C8B78(0);

    v255.receiver = v198;
    v255.super_class = ObjectType;
    objc_msgSendSuper2(&v255, sel_init);
    return;
  }
LABEL_30:
  __break(1u);
}

id AXPreferences.VoiceOver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18D3D577C(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  sub_18D3FCA78(0, v2, 0);
  uint64_t v3 = v10;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_18D3C3F98(i, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25A8);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18D3FCA78(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v10;
      }
      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_18D3FCA78(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v10;
      }
      *(void *)(v3 + 16) = v6 + 1;
      *(void *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

Swift::Void __swiftcall enableVoicesRotor()()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_sharedInstance);
  id v2 = objc_msgSend(v1, sel_voiceOverRotorItems);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2400);
  uint64_t v3 = (void *)sub_18D40A8E8();

  uint64_t v4 = v3[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  id v19 = v0;
  unint64_t v5 = 0;
  uint64_t v6 = -32;
  while (1)
  {
    sub_18D40AB28();
    if (v5 >= v3[2])
    {
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v7 = v3[v5 + 4];
    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_18D3F0C88((uint64_t)v20);
      if (v9)
      {
        sub_18D3C3F98(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v21);
      }
      else
      {
        long long v21 = 0u;
        long long v22 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
    }
    sub_18D3C3F44((uint64_t)v20);
    if (!*((void *)&v22 + 1))
    {
      sub_18D3C3EE8((uint64_t)&v21, &qword_1EB34DC30);
LABEL_4:
      sub_18D40A7F8();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_4;
    }
    if (sub_18D40A7F8() == 0x657449726F746F52 && v10 == 0xE90000000000006DLL) {
      break;
    }
    char v12 = sub_18D40ACA8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12)
    {
      uint64_t v13 = &v3[v6 / 0xFFFFFFFFFFFFFFF8];
      goto LABEL_25;
    }
LABEL_5:
    ++v5;
    v6 -= 8;
    if (v4 == v5) {
      goto LABEL_37;
    }
  }
  uint64_t v13 = &v3[v6 / 0xFFFFFFFFFFFFFFF8];
  swift_bridgeObjectRelease_n();
LABEL_25:
  sub_18D40AB28();
  if (v5 < v3[2])
  {
    uint64_t v14 = *v13;
    if (*(void *)(v14 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v15 = sub_18D3F0C88((uint64_t)v20);
      if (v16)
      {
        sub_18D3C3F98(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v21);
      }
      else
      {
        long long v21 = 0u;
        long long v22 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
    }
    sub_18D3C3F44((uint64_t)v20);
    if (*((void *)&v22 + 1)) {
      swift_dynamicCast();
    }
    else {
      sub_18D3C3EE8((uint64_t)&v21, &qword_1EB34DC30);
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_39:
  __break(1u);
  if (v5 >= sub_18D3D8820(v3)[2])
  {
    __break(1u);
  }
  else
  {
    sub_18D3EDA04((uint64_t)&v21, (uint64_t)v20);
    id v17 = objc_msgSend(v19, sel_sharedInstance);
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)sub_18D40A8D8();
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setVoiceOverRotorItems_, v18);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18D3D5D1C(uint64_t a1)
{
  return sub_18D3EF930(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *sub_18D3D5D24(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2548);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_18D3DB5E4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_18D3D5E34(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B2A70);
  uint64_t v10 = *(void *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_18D40AB88();
    __break(1u);
    return result;
  }
  _OWORD v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_18D3DB48C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_18D3D609C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3D6104@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_18D3D2BE0(a1, *(void **)(v2 + 16), MEMORY[0x1E4F47E98], a2, *(_DWORD *)(v2 + 24));
}

uint64_t sub_18D3D613C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_18D3D2BE0(a1, *(void **)(v2 + 16), MEMORY[0x1E4F47E80], a2, *(_DWORD *)(v2 + 24));
}

uint64_t sub_18D3D6174(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  sub_18D40A7F8();
  sub_18D40ACD8();
  swift_bridgeObjectRetain();
  sub_18D40A828();
  uint64_t v7 = sub_18D40AD18();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    void *v3 = 0x8000000000000000;
    id v24 = a2;
    sub_18D3D7264((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    void *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  uint64_t v10 = sub_18D40A7F8();
  uint64_t v12 = v11;
  if (v10 == sub_18D40A7F8() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = sub_18D40ACA8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = sub_18D40A7F8();
        uint64_t v19 = v18;
        if (v17 == sub_18D40A7F8() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = sub_18D40ACA8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_18D3D63A0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_18D40A2C8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_18D3DC2EC(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = sub_18D40A798();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    char v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      long long v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_18D3DC2EC(&qword_1E91B1530, 255, MEMORY[0x1E4F279D8]);
      char v22 = sub_18D40A7B8();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      char v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_18D3D7494((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_18D3D66CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_18D40ACD8();
  swift_bridgeObjectRetain();
  sub_18D40A828();
  uint64_t v8 = sub_18D40AD18();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_18D40ACA8() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_18D40ACA8() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_18D3D773C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_18D3D687C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2560);
  uint64_t v3 = sub_18D40AB48();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    id v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      sub_18D40A7F8();
      sub_18D40ACD8();
      sub_18D40A828();
      uint64_t v18 = sub_18D40AD18();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_18D3D6B90()
{
  uint64_t v1 = v0;
  uint64_t v43 = sub_18D40A2C8();
  uint64_t v2 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25B0);
  uint64_t v6 = sub_18D40AB48();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v39 = (void *)(v5 + 56);
    uint64_t v40 = v2;
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v37 = v0;
    int64_t v38 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v38) {
          goto LABEL_33;
        }
        unint64_t v21 = v39[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v38) {
            goto LABEL_33;
          }
          unint64_t v21 = v39[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v38) {
              goto LABEL_33;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v38)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v37;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v39[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v38) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v39[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      id v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      sub_18D3DC2EC(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
      uint64_t result = sub_18D40A798();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

uint64_t sub_18D3D6F84()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2540);
  uint64_t v3 = sub_18D40AB48();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_18D40ACD8();
      sub_18D40A828();
      uint64_t result = sub_18D40AD18();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_18D3D7264(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_18D3D687C();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_18D3D78D8();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_18D3D7EDC();
  }
  uint64_t v9 = *v3;
  sub_18D40A7F8();
  sub_18D40ACD8();
  sub_18D40A828();
  uint64_t v10 = sub_18D40AD18();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = sub_18D40A7F8();
  uint64_t v14 = v13;
  if (v12 == sub_18D40A7F8() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = sub_18D40ACA8();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = sub_18D40A7F8();
      uint64_t v21 = v20;
      if (v19 == sub_18D40A7F8() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = sub_18D40ACA8();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for AXSSVoiceOverTextualContext(0);
  uint64_t result = sub_18D40ACB8();
  __break(1u);
  return result;
}

uint64_t sub_18D3D7494(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = sub_18D40A2C8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_18D3D6B90();
  }
  else
  {
    if (v12 > v11)
    {
      sub_18D3D7A84();
      goto LABEL_12;
    }
    sub_18D3D81BC();
  }
  uint64_t v13 = *v3;
  sub_18D3DC2EC(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
  uint64_t v14 = sub_18D40A798();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_18D3DC2EC(&qword_1E91B1530, 255, MEMORY[0x1E4F279D8]);
      char v22 = sub_18D40A7B8();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_18D40ACB8();
  __break(1u);
  return result;
}

uint64_t sub_18D3D773C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_18D3D6F84();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_18D3D7D28();
      goto LABEL_22;
    }
    sub_18D3D8570();
  }
  uint64_t v11 = *v4;
  sub_18D40ACD8();
  sub_18D40A828();
  uint64_t result = sub_18D40AD18();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_18D40ACA8(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_18D40ACB8();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_18D40ACA8();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

id sub_18D3D78D8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2560);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18D40AB38();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_18D3D7A84()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_18D40A2C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25B0);
  uint64_t v7 = *v0;
  uint64_t v8 = sub_18D40AB38();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    id result = (void *)swift_release();
LABEL_27:
    uint64_t *v1 = v9;
    return result;
  }
  BOOL v23 = v1;
  id result = (void *)(v8 + 56);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 56), 8 * v11);
  }
  uint64_t v24 = v7 + 56;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v20 = *(void *)(v24 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v9 + 48) + v18, v6, v2);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_25:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_27;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_18D3D7D28()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2540);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18D40AB38();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    int64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_18D3D7EDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2560);
  uint64_t v3 = sub_18D40AB48();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    sub_18D40A7F8();
    sub_18D40ACD8();
    id v18 = v17;
    sub_18D40A828();
    uint64_t v19 = sub_18D40AD18();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18D3D81BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_18D40A2C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25B0);
  uint64_t v8 = sub_18D40AB48();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_18D3DC2EC(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
    uint64_t result = sub_18D40A798();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18D3D8570()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2540);
  uint64_t v3 = sub_18D40AB48();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_18D40ACD8();
    swift_bridgeObjectRetain();
    sub_18D40A828();
    uint64_t result = sub_18D40AD18();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *sub_18D3D8820(void *a1)
{
  return sub_18D3D5D24(0, a1[2], 0, a1);
}

uint64_t sub_18D3D8834(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for AXSSVoiceOverTextualContext(0);
  sub_18D3DC2EC(&qword_1EB34DC90, 255, type metadata accessor for AXSSVoiceOverTextualContext);
  uint64_t result = sub_18D40AA18();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_18D3D6174(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_18D3D88F4()
{
  uint64_t v113 = sub_18D40A678();
  uint64_t v0 = *(void *)(v113 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v113, v1);
  v110 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2, v4);
  int64_t v109 = (char *)&v100 - v5;
  uint64_t v112 = sub_18D40A2C8();
  uint64_t v6 = *(void *)(v112 - 8);
  MEMORY[0x1F4188790](v112, v7);
  uint64_t v108 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_18D40A698();
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v11 = sub_18D40A6A8();
  MEMORY[0x1F4188790](v11, v12);
  (*(void (**)(char *, void))(v14 + 104))((char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F47EE0]);
  id v129 = (void *)MEMORY[0x1E4FBC860];
  sub_18D3DC2EC(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  uint64_t v131 = sub_18D40A558();
  uint64_t v132 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v129);
  sub_18D40A548();
  LODWORD(v126) = 1056964608;
  id v15 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2228));
  int64_t v16 = (void *)sub_18D40A6F8();
  sub_18D40A748();

  uint64_t v107 = v129;
  uint64_t v128 = MEMORY[0x1E4FBC868];
  id v111 = self;
  id v17 = objc_msgSend(v111, sel_sharedInstance);
  id v18 = objc_msgSend(v17, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v18) {
    goto LABEL_75;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1518);
  uint64_t v19 = sub_18D40A778();

  uint64_t v106 = *MEMORY[0x1E4F481F8];
  uint64_t v20 = sub_18D40A7F8();
  if (*(void *)(v19 + 16))
  {
    unint64_t v22 = sub_18D3F0C10(v20, v21);
    if (v23)
    {
      uint64_t v24 = *(void *)(*(void *)(v19 + 56) + 8 * v22);
      swift_bridgeObjectRetain();
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v26 = objc_msgSend(v111, sel_sharedInstance);
      objc_msgSend(v26, sel_voiceOverPitch);
      double v28 = v27;

      int64_t v29 = 0;
      uint64_t v31 = *(void *)(v25 + 64);
      uint64_t v115 = v25 + 64;
      uint64_t v32 = 1 << *(unsigned char *)(v25 + 32);
      if (v32 < 64) {
        uint64_t v33 = ~(-1 << v32);
      }
      else {
        uint64_t v33 = -1;
      }
      unint64_t v34 = v33 & v31;
      int64_t v116 = (unint64_t)(v32 + 63) >> 6;
      uint64_t v101 = *MEMORY[0x1E4FAF2D0];
      *(float *)&unsigned int v30 = v28;
      uint64_t v104 = v30;
      uint64_t v103 = (void (**)(char *, char *, uint64_t))(v0 + 32);
      uint64_t v102 = (void (**)(uint64_t, uint64_t))(v6 + 8);
      uint64_t v100 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v105 = v25;
      if ((v33 & v31) != 0) {
        goto LABEL_10;
      }
LABEL_11:
      int64_t v37 = v29 + 1;
      if (__OFADD__(v29, 1)) {
        goto LABEL_82;
      }
      if (v37 < v116)
      {
        unint64_t v38 = *(void *)(v115 + 8 * v37);
        ++v29;
        if (v38) {
          goto LABEL_24;
        }
        int64_t v29 = v37 + 1;
        if (v37 + 1 < v116)
        {
          unint64_t v38 = *(void *)(v115 + 8 * v29);
          if (v38) {
            goto LABEL_24;
          }
          int64_t v29 = v37 + 2;
          if (v37 + 2 < v116)
          {
            unint64_t v38 = *(void *)(v115 + 8 * v29);
            if (!v38)
            {
              int64_t v39 = v37 + 3;
              if (v39 < v116)
              {
                unint64_t v38 = *(void *)(v115 + 8 * v39);
                if (v38)
                {
                  int64_t v29 = v39;
                  goto LABEL_24;
                }
                while (1)
                {
                  int64_t v29 = v39 + 1;
                  if (__OFADD__(v39, 1)) {
                    goto LABEL_84;
                  }
                  if (v29 >= v116) {
                    break;
                  }
                  unint64_t v38 = *(void *)(v115 + 8 * v29);
                  ++v39;
                  if (v38) {
                    goto LABEL_24;
                  }
                }
              }
              goto LABEL_74;
            }
LABEL_24:
            unint64_t v34 = (v38 - 1) & v38;
            for (unint64_t i = __clz(__rbit64(v38)) + (v29 << 6); ; unint64_t i = v35 | (v29 << 6))
            {
              uint64_t v40 = 16 * i;
              int64_t v41 = (uint64_t *)(*(void *)(v25 + 48) + v40);
              uint64_t v42 = *v41;
              uint64_t v43 = v41[1];
              uint64_t v44 = (uint64_t *)(*(void *)(v25 + 56) + v40);
              uint64_t v45 = v44[1];
              uint64_t v122 = *v44;
              id v129 = (void *)v42;
              uint64_t v130 = v43;
              *(void *)&long long v126 = 45;
              *((void *)&v126 + 1) = 0xE100000000000000;
              sub_18D3DC334();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((sub_18D40AAA8() & 1) != 0
                || (uint64_t v120 = v45,
                    uint64_t v117 = v42,
                    id v129 = (void *)v42,
                    uint64_t v130 = v43,
                    *(void *)&long long v126 = 95,
                    *((void *)&v126 + 1) = 0xE100000000000000,
                    (sub_18D40AAA8() & 1) != 0))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (!v34) {
                  goto LABEL_11;
                }
                goto LABEL_10;
              }
              uint64_t v114 = v43;
              id v46 = objc_msgSend(v111, sel_sharedInstance, v100, v101);
              uint64_t v47 = (void *)sub_18D40A7C8();
              id v48 = objc_msgSend(v46, sel_customSettingsForVoice_sourceKey_, v47, v106);

              if (v48)
              {
                uint64_t v49 = sub_18D40A778();

                uint64_t v124 = sub_18D40A7F8();
                uint64_t v125 = v50;
                sub_18D40AB28();
                if (*(void *)(v49 + 16) && (unint64_t v51 = sub_18D3F0C88((uint64_t)&v129), (v52 & 1) != 0))
                {
                  sub_18D3C3F98(*(void *)(v49 + 56) + 32 * v51, (uint64_t)&v126);
                }
                else
                {
                  long long v126 = 0u;
                  long long v127 = 0u;
                }
                swift_bridgeObjectRelease();
                sub_18D3C3F44((uint64_t)&v129);
                if (*((void *)&v127 + 1))
                {
                  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2920);
                  if (swift_dynamicCast())
                  {
                    unint64_t v118 = v34;
                    int64_t v119 = v29;
                    int64_t v53 = 0;
                    uint64_t v54 = (uint64_t)v129;
                    uint64_t v55 = v129[8];
                    uint64_t v121 = v129 + 8;
                    uint64_t v56 = 1 << *((unsigned char *)v129 + 32);
                    if (v56 < 64) {
                      uint64_t v57 = ~(-1 << v56);
                    }
                    else {
                      uint64_t v57 = -1;
                    }
                    unint64_t v58 = v57 & v55;
                    int64_t v123 = (unint64_t)(v56 + 63) >> 6;
                    uint64_t v59 = (void *)MEMORY[0x1E4FBC868];
                    while (2)
                    {
                      if (v58)
                      {
                        unint64_t v60 = __clz(__rbit64(v58));
                        v58 &= v58 - 1;
                        unint64_t v61 = v60 | (v53 << 6);
                      }
                      else
                      {
                        int64_t v62 = v53 + 1;
                        if (__OFADD__(v53, 1)) {
                          goto LABEL_81;
                        }
                        if (v62 >= v123)
                        {
                          swift_release();
                          unint64_t v34 = v118;
                          int64_t v29 = v119;
                          goto LABEL_69;
                        }
                        unint64_t v63 = v121[v62];
                        ++v53;
                        unint64_t v34 = v118;
                        int64_t v29 = v119;
                        if (!v63)
                        {
                          int64_t v53 = v62 + 1;
                          if (v62 + 1 >= v123) {
                            goto LABEL_72;
                          }
                          unint64_t v63 = v121[v53];
                          if (!v63)
                          {
                            int64_t v53 = v62 + 2;
                            if (v62 + 2 >= v123) {
                              goto LABEL_72;
                            }
                            unint64_t v63 = v121[v53];
                            if (!v63)
                            {
                              int64_t v64 = v62 + 3;
                              if (v64 >= v123)
                              {
LABEL_72:
                                swift_release();
                                goto LABEL_69;
                              }
                              unint64_t v63 = v121[v64];
                              if (!v63)
                              {
                                while (1)
                                {
                                  int64_t v53 = v64 + 1;
                                  if (__OFADD__(v64, 1)) {
                                    goto LABEL_83;
                                  }
                                  if (v53 >= v123) {
                                    goto LABEL_72;
                                  }
                                  unint64_t v63 = v121[v53];
                                  ++v64;
                                  if (v63) {
                                    goto LABEL_55;
                                  }
                                }
                              }
                              int64_t v53 = v64;
                            }
                          }
                        }
LABEL_55:
                        unint64_t v58 = (v63 - 1) & v63;
                        unint64_t v61 = __clz(__rbit64(v63)) + (v53 << 6);
                      }
                      uint64_t v65 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v61);
                      uint64_t v67 = *v65;
                      uint64_t v66 = v65[1];
                      uint64_t v68 = *(void **)(*(void *)(v54 + 56) + 8 * v61);
                      swift_bridgeObjectRetain();
                      id v69 = v68;
                      objc_msgSend(v69, sel_floatValue);
                      int v71 = v70;
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      id v129 = v59;
                      unint64_t v74 = sub_18D3F0C10(v67, v66);
                      uint64_t v75 = v59[2];
                      BOOL v76 = (v73 & 1) == 0;
                      uint64_t v77 = v75 + v76;
                      if (__OFADD__(v75, v76))
                      {
                        __break(1u);
LABEL_80:
                        __break(1u);
LABEL_81:
                        __break(1u);
LABEL_82:
                        __break(1u);
LABEL_83:
                        __break(1u);
LABEL_84:
                        __break(1u);
LABEL_85:
                        __break(1u);
LABEL_86:
                        uint64_t result = sub_18D40ACC8();
                        __break(1u);
                        return result;
                      }
                      char v78 = v73;
                      if (v59[3] >= v77)
                      {
                        if (isUniquelyReferenced_nonNull_native)
                        {
                          uint64_t v59 = v129;
                          if ((v73 & 1) == 0) {
                            goto LABEL_63;
                          }
                        }
                        else
                        {
                          sub_18D3F7F6C();
                          uint64_t v59 = v129;
                          if ((v78 & 1) == 0) {
                            goto LABEL_63;
                          }
                        }
                      }
                      else
                      {
                        sub_18D3F6E84(v77, isUniquelyReferenced_nonNull_native);
                        unint64_t v79 = sub_18D3F0C10(v67, v66);
                        if ((v78 & 1) != (v80 & 1)) {
                          goto LABEL_86;
                        }
                        unint64_t v74 = v79;
                        uint64_t v59 = v129;
                        if ((v78 & 1) == 0)
                        {
LABEL_63:
                          v59[(v74 >> 6) + 8] |= 1 << v74;
                          uint64_t v81 = (uint64_t *)(v59[6] + 16 * v74);
                          *uint64_t v81 = v67;
                          v81[1] = v66;
                          *(_DWORD *)(v59[7] + 4 * v74) = v71;
                          uint64_t v82 = v59[2];
                          BOOL v83 = __OFADD__(v82, 1);
                          uint64_t v84 = v82 + 1;
                          if (v83) {
                            goto LABEL_80;
                          }
                          v59[2] = v84;
                          swift_bridgeObjectRetain();
                          goto LABEL_39;
                        }
                      }
                      *(_DWORD *)(v59[7] + 4 * v74) = v71;
LABEL_39:

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      continue;
                    }
                  }
                  goto LABEL_69;
                }
              }
              else
              {
                long long v126 = 0u;
                long long v127 = 0u;
              }
              sub_18D3C3EE8((uint64_t)&v126, &qword_1EB34DC30);
LABEL_69:
              uint64_t v85 = (uint64_t)v108;
              sub_18D40A2D8();
              LOBYTE(v129) = 1;
              id v86 = v109;
              sub_18D40A648();
              uint64_t v87 = (uint64_t)v110;
              (*v103)(v110, v86, v113);
              uint64_t v88 = v128;
              char v89 = swift_isUniquelyReferenced_nonNull_native();
              id v129 = (void *)v88;
              sub_18D3E60E8(v87, v85, v89);
              uint64_t v128 = (uint64_t)v129;
              swift_bridgeObjectRelease();
              (*v102)(v85, v112);
              uint64_t v25 = v105;
              if (!v34) {
                goto LABEL_11;
              }
LABEL_10:
              unint64_t v35 = __clz(__rbit64(v34));
              v34 &= v34 - 1;
            }
          }
        }
      }
LABEL_74:
      swift_release();
      goto LABEL_75;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_75:
  os_log_type_t v90 = sub_18D40AA28();
  uint64_t v91 = (id)AXTTSLogCommon();
  if (!v91) {
    goto LABEL_85;
  }
  uint64_t v92 = v91;
  os_log_type_t v93 = v90;
  if (os_log_type_enabled(v91, v90))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    id v129 = (void *)v95;
    *(_DWORD *)uint64_t v94 = 136315138;
    swift_beginAccess();
    sub_18D3DC2EC(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
    swift_bridgeObjectRetain();
    uint64_t v96 = sub_18D40A788();
    unint64_t v98 = v97;
    swift_bridgeObjectRelease();
    uint64_t v124 = sub_18D3F632C(v96, v98, (uint64_t *)&v129);
    sub_18D40AA88();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18D308000, v92, v93, "Migrating general selections to %s", v94, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x192F9F8A0](v95, -1, -1);
    MEMORY[0x192F9F8A0](v94, -1, -1);
  }

  swift_beginAccess();
  return v128;
}

uint64_t sub_18D3D96A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v44 = a8;
  uint64_t v40 = a1;
  uint64_t v41 = a6;
  unint64_t v46 = a5;
  v34[2] = a4;
  uint64_t v36 = a11;
  uint64_t v42 = a9;
  uint64_t v43 = sub_18D40A698();
  uint64_t v38 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43, v13);
  int64_t v39 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v15 - 8, v16);
  id v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_18D40A6A8();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v24 = (char *)v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v25);
  double v27 = (void *)((char *)v34 - v26);
  uint64_t v45 = a7;
  sub_18D3C3FF4(a7, (uint64_t)v18, &qword_1E91B2098);
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  int64_t v37 = v24;
  v34[1] = a2;
  if (v28 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v27, v18, v19);
    if (v46) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v47 = 0x65764F6563696F56;
    unint64_t v48 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    unint64_t v46 = v48;
    goto LABEL_6;
  }
  uint64_t v47 = 0x65764F6563696F76;
  unint64_t v48 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v29 = v48;
  void *v27 = v47;
  v27[1] = v29;
  void v27[2] = 0;
  v27[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v27, *MEMORY[0x1E4F47EE8], v19);
  sub_18D3C3EE8((uint64_t)v18, &qword_1E91B2098);
  if (!v46) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v35 = v19;
  uint64_t v36 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(v36);
  uint64_t v51 = v40;
  (*(void (**)(char *, void *, uint64_t))(v20 + 16))(v37, v27, v19);
  uint64_t v30 = v38;
  uint64_t v31 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, a10, v43);
  uint64_t v49 = sub_18D40A558();
  uint64_t v50 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v47);
  swift_bridgeObjectRetain();
  sub_18D40A548();
  uint64_t v32 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a10, v31);
  sub_18D3C3EE8(v45, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v27, v35);
  return v32;
}

uint64_t sub_18D3D9AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v44 = a8;
  uint64_t v40 = a1;
  uint64_t v41 = a6;
  unint64_t v46 = a5;
  uint64_t v35 = a3;
  uint64_t v42 = a9;
  uint64_t v43 = sub_18D40A698();
  uint64_t v38 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43, v13);
  int64_t v39 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v15 - 8, v16);
  id v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_18D40A6A8();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v25);
  double v27 = (uint64_t *)((char *)&v34 - v26);
  uint64_t v45 = a7;
  sub_18D3C3FF4(a7, (uint64_t)v18, &qword_1E91B2098);
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  int64_t v37 = v24;
  uint64_t v34 = a2;
  if (v28 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v27, v18, v19);
    if (v46) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v47 = 0x65764F6563696F56;
    unint64_t v48 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v35 = v47;
    unint64_t v46 = v48;
    goto LABEL_6;
  }
  uint64_t v47 = 0x65764F6563696F76;
  unint64_t v48 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v29 = v48;
  void *v27 = v47;
  v27[1] = v29;
  void v27[2] = 0;
  v27[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v27, *MEMORY[0x1E4F47EE8], v19);
  sub_18D3C3EE8((uint64_t)v18, &qword_1E91B2098);
  if (!v46) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  uint64_t v35 = a4;
LABEL_6:
  uint64_t v36 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2598);
  uint64_t v51 = v40;
  (*(void (**)(char *, void *, uint64_t))(v20 + 16))(v37, v27, v19);
  uint64_t v30 = v38;
  uint64_t v31 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, a10, v43);
  uint64_t v49 = sub_18D40A558();
  uint64_t v50 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v47);
  swift_bridgeObjectRetain();
  sub_18D40A548();
  uint64_t v32 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a10, v31);
  sub_18D3C3EE8(v45, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v27, v36);
  return v32;
}

uint64_t sub_18D3D9F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v42 = a2;
  uint64_t v43 = a7;
  unint64_t v48 = a6;
  uint64_t v36 = a4;
  uint64_t v44 = a9;
  uint64_t v45 = a10;
  uint64_t v46 = sub_18D40A698();
  uint64_t v40 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46, v15);
  uint64_t v41 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_18D40A6A8();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  uint64_t v38 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24, v26);
  int v28 = (uint64_t *)((char *)&v35 - v27);
  uint64_t v47 = a8;
  sub_18D3C3FF4(a8, (uint64_t)v20, &qword_1E91B2098);
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  uint64_t v39 = a1;
  uint64_t v35 = a3;
  if (v29 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v22 + 32))(v28, v20, v21);
    if (v48) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v49 = 0x65764F6563696F56;
    unint64_t v50 = 0xE900000000000072;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v36 = v49;
    unint64_t v48 = v50;
    goto LABEL_6;
  }
  uint64_t v49 = 0x65764F6563696F76;
  unint64_t v50 = 0xE900000000000072;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v30 = v50;
  void *v28 = v49;
  v28[1] = v30;
  void v28[2] = 0;
  v28[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v28, *MEMORY[0x1E4F47EE8], v21);
  sub_18D3C3EE8((uint64_t)v20, &qword_1E91B2098);
  if (!v48) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  uint64_t v36 = a5;
LABEL_6:
  uint64_t v37 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2590);
  uint64_t v53 = v39;
  uint64_t v54 = v42;
  (*(void (**)(char *, void *, uint64_t))(v22 + 16))(v38, v28, v21);
  uint64_t v31 = v40;
  uint64_t v32 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v41, a11, v46);
  uint64_t v51 = sub_18D40A558();
  uint64_t v52 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v49);
  swift_bridgeObjectRetain();
  sub_18D40A548();
  uint64_t v33 = sub_18D40A6E8();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a11, v32);
  sub_18D3C3EE8(v47, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v22 + 8))(v28, v37);
  return v33;
}

unint64_t sub_18D3DA388()
{
  unint64_t result = qword_1EB34DCC0;
  if (!qword_1EB34DCC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB34DCC0);
  }
  return result;
}

uint64_t sub_18D3DA3C8(uint64_t a1, uint64_t a2)
{
  return sub_18D3DC2EC(&qword_1E91B2408, a2, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver);
}

uint64_t type metadata accessor for AXPreferences.VoiceOver()
{
  return self;
}

void sub_18D3DA434(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3DA454(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA474(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3DA494(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

double sub_18D3DA4B4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18D3C89D4(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__currentRotorVoiceIdentifier, a2);
}

void sub_18D3DA4D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA4F4(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA514(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA53C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA55C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA57C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA59C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA5BC(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA5DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA604(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA624(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA644(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA664(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA684(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3DA6A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA6C4(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3DA6E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA704(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3DA724(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

double sub_18D3DA74C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18D3C89D4(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayInputTableIdentifier, a2);
}

void sub_18D3DA76C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

double sub_18D3DA78C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18D3C89D4(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleDisplayOutputTableIdentifier, a2);
}

void sub_18D3DA7AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

double sub_18D3DA7CC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18D3C89D4(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__brailleGesturesInputTableIdentifier, a2);
}

void sub_18D3DA7EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA80C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA82C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA84C(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3DA86C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA88C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA8AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA8CC(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA8EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA90C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA92C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA94C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA96C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA98C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA9AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DA9CC(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DA9EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DAA14(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_18D3DAA34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

double sub_18D3DAA54@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18D3C89D4(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedActivityId, a2);
}

void sub_18D3DAA74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DAA94(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DAAB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DAAD4(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DAAF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

double sub_18D3DAB14@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_18D3C89D4(a1, &OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__selectedLanguage, a2);
}

void sub_18D3DAB34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3DAB54(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3DAB74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_18D3DAB98()
{
  uint64_t v2 = *(void **)(v0 + 16);
  float v3 = *(float *)(v0 + 24);
  uint64_t v5 = *(const void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_18D3C40D8;
  uint64_t v7 = (uint64_t (*)(void *, const void *, void *, float))((char *)&dword_1E91B2410 + dword_1E91B2410);
  return v7(v2, v5, v4, v3);
}

uint64_t sub_18D3DAC68()
{
  float v2 = *(float *)(v0 + 16);
  float v3 = *(const void **)(v0 + 24);
  uint64_t v4 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(const void *, void *, float))((char *)&dword_1E91B2420 + dword_1E91B2420);
  return v6(v3, v4, v2);
}

uint64_t sub_18D3DAD28()
{
  float v2 = (void *)v0[2];
  float v3 = (const void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(void *, const void *, void *))((char *)&dword_1E91B2440 + dword_1E91B2440);
  return v6(v2, v3, v4);
}

uint64_t sub_18D3DADE8()
{
  float v2 = *(const void **)(v0 + 16);
  float v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_18D3C40D8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1E91B2460 + dword_1E91B2460);
  return v5(v2, v3);
}

uint64_t objectdestroyTm_0()
{
  _Block_release(*(const void **)(v0 + 32));

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18D3DAEE8()
{
  float v2 = *(void **)(v0 + 16);
  float v3 = *(float *)(v0 + 24);
  uint64_t v5 = *(const void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_18D3C40D8;
  uint64_t v7 = (uint64_t (*)(void *, const void *, void *, float))((char *)&dword_1E91B2480 + dword_1E91B2480);
  return v7(v2, v5, v4, v3);
}

uint64_t objectdestroy_117Tm()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18D3DAFF8()
{
  float v2 = *(float *)(v0 + 16);
  float v3 = *(const void **)(v0 + 24);
  uint64_t v4 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(const void *, void *, float))((char *)&dword_1E91B24A0 + dword_1E91B24A0);
  return v6(v3, v4, v2);
}

uint64_t sub_18D3DB0B8()
{
  float v2 = (void *)v0[2];
  float v3 = (const void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(void *, const void *, void *))((char *)&dword_1E91B24C0 + dword_1E91B24C0);
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_147Tm()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18D3DB1B8()
{
  float v2 = *(const void **)(v0 + 16);
  float v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_18D3C40D8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1E91B24E0 + dword_1E91B24E0);
  return v5(v2, v3);
}

uint64_t sub_18D3DB26C()
{
  _Block_release(*(const void **)(v0 + 32));

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18D3DB2BC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_18D3C40D8;
  uint64_t v7 = (uint64_t (*)(uint64_t, int, void *, void *))((char *)&dword_1E91B2500 + dword_1E91B2500);
  return v7(v2, v3, v5, v4);
}

uint64_t objectdestroy_132Tm()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18D3DB3D0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1E91B2520 + dword_1E91B2520);
  return v6(v2, v3, v4);
}

uint64_t sub_18D3DB48C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_18D40ABD8();
  __break(1u);
  return result;
}

uint64_t sub_18D3DB5E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2400);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_18D40ABD8();
  __break(1u);
  return result;
}

uint64_t sub_18D3DB6F0()
{
  uint64_t v0 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v0, v2);
  unint64_t v5 = &v81[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = &v81[-v7];
  if (qword_1E91B2048 != -1) {
    goto LABEL_77;
  }
LABEL_2:
  swift_beginAccess();
  uint64_t v9 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_voiceover);
  swift_beginAccess();
  uint64_t v10 = *(void **)((char *)*v9 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver___oldDomainRotors);
  id v11 = *v9;
  id v12 = v10;
  sub_18D40A718();

  uint64_t result = v103;
  if ((void)v103) {
    return result;
  }
  id v14 = self;
  unint64_t v15 = (unint64_t)&selRef_setPayload_;
  id v16 = objc_msgSend(v14, sel_sharedInstance);
  id v17 = objc_msgSend(v16, sel_voiceOverLanguageRotorItems);

  if (!v17) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v18 = MEMORY[0x1E4FBC840];
  uint64_t v19 = sub_18D40A8E8();

  uint64_t v20 = sub_18D3D577C(v19);
  swift_bridgeObjectRelease();
  if (!v20) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v96 = *(void *)(v20 + 16);
  if (!v96)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v21 = 0;
  uint64_t v98 = v20 + 32;
  unint64_t v94 = MEMORY[0x1E4FBC860];
  uint64_t v90 = *MEMORY[0x1E4F481F8];
  uint64_t v86 = *MEMORY[0x1E4FAF2D0];
  uint64_t v85 = v18 + 8;
  uint64_t v22 = v96;
  while (1)
  {
    if (v21 >= *(void *)(v20 + 16))
    {
      __break(1u);
LABEL_77:
      swift_once();
      goto LABEL_2;
    }
    uint64_t v23 = *(void *)(v98 + 8 * v21);
    if (*(void *)(v23 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_18D3F0C10(0x64656C62616E45, 0xE700000000000000);
      if ((v25 & 1) == 0
        || (sub_18D3DC290(*(void *)(v23 + 56) + 40 * v24, (uint64_t)&v103), (swift_dynamicCast() & 1) == 0)
        || (v101 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      if (*(void *)(v23 + 16) && (unint64_t v26 = sub_18D3F0C10(0x657449726F746F52, 0xE90000000000006DLL), (v27 & 1) != 0))
      {
        sub_18D3DC290(*(void *)(v23 + 56) + 40 * v26, (uint64_t)&v103);
      }
      else
      {
        uint64_t v105 = 0;
        long long v103 = 0u;
        long long v104 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v104 + 1))
      {
        sub_18D3C3EE8((uint64_t)&v103, &qword_1E91B1520);
        goto LABEL_8;
      }
      if (swift_dynamicCast()) {
        break;
      }
    }
LABEL_8:
    if (++v21 == v22)
    {
      swift_bridgeObjectRelease();
      return v94;
    }
  }
  uint64_t v88 = v1;
  uint64_t v89 = v20;
  long long v28 = v101;
  id v29 = [v14 (SEL)(v15 + 2597)];
  unint64_t v30 = (void *)sub_18D40A7C8();
  id v31 = objc_msgSend(v29, sel_speechVoiceIdentifierForLanguageWithoutFallback_sourceKey_, v30, v90);

  if (!v31)
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = v96;
    uint64_t v1 = v88;
    unint64_t v15 = 0x1F62CD000;
LABEL_70:
    enableVoicesRotor()();
    uint64_t v20 = v89;
    goto LABEL_8;
  }
  uint64_t v32 = sub_18D40A7F8();
  id v87 = v14;
  id v34 = objc_msgSend(v14, sel_sharedInstance, v33, v32);
  long long v91 = v28;
  uint64_t v35 = (void *)sub_18D40A7C8();
  objc_msgSend(v34, sel_voiceOverSpeakingRateForLanguage_, v35);

  id v36 = objc_msgSend(v87, (SEL)&selRef_switchOriginalAction + 5);
  id v37 = objc_msgSend(v36, sel_customSettingsForVoice_sourceKey_, v31, v90);

  uint64_t v84 = v0;
  BOOL v83 = v5;
  uint64_t v82 = v8;
  if (!v37)
  {
    long long v101 = 0u;
    long long v102 = 0u;
    uint64_t v22 = v96;
LABEL_64:
    sub_18D3C3EE8((uint64_t)&v101, &qword_1EB34DC30);
    goto LABEL_65;
  }
  uint64_t v38 = sub_18D40A778();

  uint64_t v99 = sub_18D40A7F8();
  uint64_t v100 = v39;
  sub_18D40AB28();
  if (*(void *)(v38 + 16) && (unint64_t v40 = sub_18D3F0C88((uint64_t)&v103), (v41 & 1) != 0))
  {
    sub_18D3C3F98(*(void *)(v38 + 56) + 32 * v40, (uint64_t)&v101);
  }
  else
  {
    long long v101 = 0u;
    long long v102 = 0u;
  }
  uint64_t v22 = v96;
  swift_bridgeObjectRelease();
  sub_18D3C3F44((uint64_t)&v103);
  if (!*((void *)&v102 + 1)) {
    goto LABEL_64;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2920);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_65:
    *(void *)&long long v103 = 0;
    *((void *)&v103 + 1) = 0xE000000000000000;
    sub_18D40AB58();
    swift_bridgeObjectRelease();
    *(void *)&long long v103 = 0x6574617267696D5FLL;
    *((void *)&v103 + 1) = 0xEF5F676E616C5F64;
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v75 = *((void *)&v103 + 1);
    uint64_t v74 = v103;
    uint64_t v0 = v84;
    unint64_t v5 = v83;
    LOBYTE(v103) = 1;
    sub_18D40A648();
    BOOL v76 = (void *)((char *)v5 + *(int *)(v0 + 24));
    *unint64_t v5 = v74;
    v5[1] = v75;
    *BOOL v76 = 0;
    v76[1] = 0;
    uint64_t v8 = v82;
    sub_18D3C9168((uint64_t)v5, (uint64_t)v82);
    unint64_t v77 = v94;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v77 = sub_18D3D5E34(0, *(void *)(v77 + 16) + 1, 1, v77);
    }
    uint64_t v1 = v88;
    id v14 = v87;
    unint64_t v15 = 0x1F62CD000uLL;
    unint64_t v94 = v77;
    unint64_t v79 = *(void *)(v77 + 16);
    unint64_t v78 = *(void *)(v77 + 24);
    if (v79 >= v78 >> 1) {
      unint64_t v94 = sub_18D3D5E34(v78 > 1, v79 + 1, 1, v94);
    }
    unint64_t v80 = v94;
    *(void *)(v94 + 16) = v79 + 1;
    sub_18D3C91CC((uint64_t)v8, v80+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v79);
    sub_18D3CD488((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
    goto LABEL_70;
  }
  int64_t v42 = 0;
  uint64_t v43 = *(void *)(v103 + 64);
  uint64_t v92 = v103 + 64;
  uint64_t v95 = v103;
  uint64_t v44 = 1 << *(unsigned char *)(v103 + 32);
  if (v44 < 64) {
    uint64_t v45 = ~(-1 << v44);
  }
  else {
    uint64_t v45 = -1;
  }
  unint64_t v46 = v45 & v43;
  int64_t v93 = (unint64_t)(v44 + 63) >> 6;
  uint64_t v47 = (void *)MEMORY[0x1E4FBC868];
  while (2)
  {
    if (v46)
    {
      unint64_t v48 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      int64_t v97 = v42;
      unint64_t v49 = v48 | (v42 << 6);
    }
    else
    {
      int64_t v50 = v42 + 1;
      if (__OFADD__(v42, 1)) {
        goto LABEL_80;
      }
      if (v50 >= v93)
      {
LABEL_71:
        swift_release();
        goto LABEL_65;
      }
      unint64_t v51 = *(void *)(v92 + 8 * v50);
      int64_t v52 = v42 + 1;
      if (!v51)
      {
        int64_t v52 = v42 + 2;
        if (v42 + 2 >= v93) {
          goto LABEL_71;
        }
        unint64_t v51 = *(void *)(v92 + 8 * v52);
        if (!v51)
        {
          int64_t v52 = v42 + 3;
          if (v42 + 3 >= v93) {
            goto LABEL_71;
          }
          unint64_t v51 = *(void *)(v92 + 8 * v52);
          if (!v51)
          {
            uint64_t v53 = v42 + 4;
            if (v42 + 4 >= v93) {
              goto LABEL_71;
            }
            unint64_t v51 = *(void *)(v92 + 8 * v53);
            if (!v51)
            {
              while (1)
              {
                int64_t v52 = v53 + 1;
                if (__OFADD__(v53, 1)) {
                  goto LABEL_81;
                }
                if (v52 >= v93) {
                  goto LABEL_71;
                }
                unint64_t v51 = *(void *)(v92 + 8 * v52);
                ++v53;
                if (v51) {
                  goto LABEL_51;
                }
              }
            }
            int64_t v52 = v42 + 4;
          }
        }
      }
LABEL_51:
      unint64_t v46 = (v51 - 1) & v51;
      int64_t v97 = v52;
      unint64_t v49 = __clz(__rbit64(v51)) + (v52 << 6);
    }
    uint64_t v54 = (uint64_t *)(*(void *)(v95 + 48) + 16 * v49);
    uint64_t v55 = *v54;
    uint64_t v56 = v54[1];
    uint64_t v57 = *(void **)(*(void *)(v95 + 56) + 8 * v49);
    swift_bridgeObjectRetain();
    id v58 = v57;
    objc_msgSend(v58, sel_floatValue);
    int v60 = v59;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v103 = v47;
    unint64_t v63 = sub_18D3F0C10(v55, v56);
    uint64_t v64 = v47[2];
    BOOL v65 = (v62 & 1) == 0;
    uint64_t v66 = v64 + v65;
    if (!__OFADD__(v64, v65))
    {
      char v67 = v62;
      if (v47[3] >= v66)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v47 = (void *)v103;
          if ((v62 & 1) == 0) {
            goto LABEL_59;
          }
        }
        else
        {
          sub_18D3F7F6C();
          uint64_t v47 = (void *)v103;
          if ((v67 & 1) == 0) {
            goto LABEL_59;
          }
        }
      }
      else
      {
        sub_18D3F6E84(v66, isUniquelyReferenced_nonNull_native);
        unint64_t v68 = sub_18D3F0C10(v55, v56);
        if ((v67 & 1) != (v69 & 1)) {
          goto LABEL_82;
        }
        unint64_t v63 = v68;
        uint64_t v47 = (void *)v103;
        if ((v67 & 1) == 0)
        {
LABEL_59:
          v47[(v63 >> 6) + 8] |= 1 << v63;
          int v70 = (uint64_t *)(v47[6] + 16 * v63);
          *int v70 = v55;
          v70[1] = v56;
          *(_DWORD *)(v47[7] + 4 * v63) = v60;
          uint64_t v71 = v47[2];
          BOOL v72 = __OFADD__(v71, 1);
          uint64_t v73 = v71 + 1;
          if (v72) {
            goto LABEL_79;
          }
          v47[2] = v73;
          swift_bridgeObjectRetain();
          goto LABEL_35;
        }
      }
      *(_DWORD *)(v47[7] + 4 * v63) = v60;
LABEL_35:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = v96;
      int64_t v42 = v97;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  uint64_t result = sub_18D40ACC8();
  __break(1u);
  return result;
}

uint64_t sub_18D3DC1F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_18D40AA18();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_18D3D66CC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_18D3DC290(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_18D3DC2EC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18D3DC334()
{
  unint64_t result = qword_1EB34DC28;
  if (!qword_1EB34DC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB34DC28);
  }
  return result;
}

uint64_t sub_18D3DC3A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18D3DFDBC();
  *a1 = result;
  return result;
}

uint64_t AXPreferences.LiveSpeech.keyboardVoiceSelections.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  sub_18D40A718();

  return v3;
}

void sub_18D3DC410(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  sub_18D40A718();

  *a2 = v4;
}

void sub_18D3DC464(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*a2 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections);
  swift_bridgeObjectRetain();
  id v3 = v2;
  sub_18D40A728();
}

void AXPreferences.LiveSpeech.keyboardVoiceSelections.setter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  sub_18D40A728();
}

uint64_t (*AXPreferences.LiveSpeech.keyboardVoiceSelections.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.LiveSpeech.$keyboardVoiceSelections.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.LiveSpeech.speechVoiceIdentifier(forKeyboard:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25C8);
  void v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25D0);
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v3[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3DC70C, 0, 0);
}

uint64_t sub_18D3DC70C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[2];
  id v3 = objc_retain(*(id *)(v0[4]
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections));
  uint64_t v4 = (void *)sub_18D40A738();

  sub_18D40A758();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  v0[12] = sub_18D40A678();
  swift_bridgeObjectRetain();
  sub_18D40A968();
  swift_release();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[13] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_18D3DC86C;
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[5];
  return MEMORY[0x1F4105DF0](v7, v8);
}

uint64_t sub_18D3DC86C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 72);
  uint64_t v3 = *(void *)(*(void *)v0 + 64);
  uint64_t v4 = *(void *)(*(void *)v0 + 56);
  uint64_t v5 = *(void *)(*(void *)v0 + 48);
  uint64_t v6 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x1F4188298](sub_18D3DCA20, 0, 0);
}

uint64_t sub_18D3DCA20()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_18D3C3EE8(v1, &qword_1E91B2118);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = sub_18D40A658();
    uint64_t v5 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v7(v4, v5);
}

uint64_t AsyncStream<A>.selection(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25C8);
  void v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3DCC20, 0, 0);
}

uint64_t sub_18D3DCC20()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25D0);
  sub_18D40A678();
  sub_18D40A968();
  swift_release();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_18D3DCD48;
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[2];
  return MEMORY[0x1F4105DF0](v6, v5);
}

uint64_t sub_18D3DCD48()
{
  uint64_t v1 = *(void *)(*v0 + 64);
  uint64_t v2 = *(void *)(*v0 + 56);
  uint64_t v3 = *(void *)(*v0 + 48);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_18D3DD01C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = sub_18D40A7F8();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_18D3DD0F0;
  return AXPreferences.LiveSpeech.speechVoiceIdentifier(forKeyboard:)(v5, v7);
}

uint64_t sub_18D3DD0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 16);
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (a2)
  {
    uint64_t v7 = (void *)sub_18D40A7C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (***)(void, void))(v4 + 24);
  ((void (**)(void, void *))v8)[2](v8, v7);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

float AXPreferences.LiveSpeech.visionOSLiveSpeechLaunchDistance.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18D40A718();

  return v3;
}

float sub_18D3DD2C0@<S0>(void *a1@<X0>, float *a2@<X8>)
{
  id v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18D40A718();

  float result = v5;
  *a2 = v5;
  return result;
}

void sub_18D3DD314(uint64_t a1, void *a2)
{
  id v2 = objc_retain(*(id *)(*a2
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18D40A728();
}

void AXPreferences.LiveSpeech.visionOSLiveSpeechLaunchDistance.setter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  sub_18D40A728();
}

uint64_t (*AXPreferences.LiveSpeech.visionOSLiveSpeechLaunchDistance.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.LiveSpeech.$visionOSLiveSpeechLaunchDistance.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3DD460()
{
  uint64_t v1 = sub_18D40A4B8();
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_18D40A3C8();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)(v0
                 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech____lazy_storage___resolver))
  {
    uint64_t v11 = *(void *)(v0
                    + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech____lazy_storage___resolver);
  }
  else
  {
    uint64_t v30 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech____lazy_storage___resolver;
    uint64_t v27 = v7;
    uint64_t v25 = v8;
    uint64_t v29 = sub_18D40A3E8();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1550);
    uint64_t v12 = sub_18D40A388();
    uint64_t v13 = *(void *)(v12 - 8);
    unint64_t v26 = v4;
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 + 72);
    uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v28 = v0;
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_18D431220;
    sub_18D40A498();
    uint64_t v19 = *MEMORY[0x1E4FAF1B8];
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104);
    v20(v18 + v17, v19, v12);
    sub_18D40A488();
    v20(v18 + v17 + v15, v19, v12);
    sub_18D40A468();
    v20(v18 + v17 + 2 * v15, v19, v12);
    sub_18D40A478();
    v20(v18 + v17 + 3 * v15, v19, v12);
    v20(v18 + v17 + 4 * v15, *MEMORY[0x1E4FAF1C8], v12);
    v20(v18 + v17 + 5 * v15, *MEMORY[0x1E4FAF1A8], v12);
    *uint64_t v10 = v18;
    (*(void (**)(uint64_t *, void, uint64_t))(v25 + 104))(v10, *MEMORY[0x1E4FAF1E0], v27);
    uint64_t v21 = sub_18D40A508();
    uint64_t v22 = sub_18D40A4F8();
    uint64_t v32 = v21;
    uint64_t v33 = MEMORY[0x1E4FAF258];
    uint64_t v31 = v22;
    sub_18D40A4A8();
    uint64_t v11 = sub_18D40A398();
    *(void *)(v28 + v30) = v11;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v11;
}

uint64_t AXPreferences.LiveSpeech.systemDefaultVoice()(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = sub_18D40A358();
  v2[4] = v3;
  void v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  v2[7] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1540);
  v2[8] = swift_task_alloc();
  void v2[9] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[10] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_18D3DD8FC;
  return AXPreferences.LiveSpeech.systemSpokenLocale()(v4);
}

uint64_t sub_18D3DD8FC()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3DD9F8, 0, 0);
}

uint64_t sub_18D3DD9F8()
{
  v0[11] = sub_18D3DD460();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  void *v1 = v0;
  v1[1] = sub_18D3DDAB4;
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  return v5(v2, v3);
}

uint64_t sub_18D3DDAB4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 56);
  uint64_t v3 = *(void *)(*v0 + 40);
  uint64_t v4 = *(void *)(*v0 + 32);
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 104) = v5;
  *(void *)(v1 + 112) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  return MEMORY[0x1F4188298](sub_18D3DDC3C, 0, 0);
}

uint64_t sub_18D3DDC3C()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = sub_18D40A4E8();
  v0[15] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  v0[16] = v3;
  uint64_t v6 = v3 + 48;
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[17] = v5;
  v0[18] = v6 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v5(v1, 1, v2) == 1)
  {
    sub_18D3C3EE8(v1, &qword_1E91B1540);
    sub_18D40A298();
    v0[19] = sub_18D3DD460();
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[20] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_18D3DDE3C;
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[6];
    return v12(v8, v9);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v4 + 32))(v0[2], v1, v2);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_18D3DDE3C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 104);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  uint64_t v3 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  v1(v2, v3);
  return MEMORY[0x1F4188298](sub_18D3DDFC0, 0, 0);
}

uint64_t sub_18D3DDFC0()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 136))(v2, 1, v1);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 128) + 32))(*(void *)(v0 + 16), v2, v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  return result;
}

uint64_t AXPreferences.LiveSpeech.systemDefaultVoice(for:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](sub_18D3DE0BC, 0, 0);
}

uint64_t sub_18D3DE0BC()
{
  v0[5] = sub_18D3DD460();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  void *v1 = v0;
  v1[1] = sub_18D3DE174;
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  return v5(v2, v3);
}

uint64_t sub_18D3DE174()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t AXPreferences.LiveSpeech.systemSpokenLocale()(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = sub_18D40A358();
  v2[4] = v3;
  void v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1400);
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  void v2[9] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1408);
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3DE454, 0, 0);
}

uint64_t sub_18D3DE454()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  sub_18D3DD460();
  sub_18D40A3B8();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_18D3E08EC(&qword_1E91B1410, &qword_1E91B1408);
  sub_18D40A9D8();
  uint64_t v5 = sub_18D3E08EC(&qword_1E91B13F8, &qword_1E91B1400);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_18D3DE5B4;
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[7];
  return MEMORY[0x1F4187C78](v7, v8, v5);
}

uint64_t sub_18D3DE5B4()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[9];
    uint64_t v4 = v2[7];
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2[8] + 8);
    return v5(v3, v4);
  }
  else
  {
    return MEMORY[0x1F4188298](sub_18D3DE6E8, 0, 0);
  }
}

uint64_t sub_18D3DE6E8()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v4(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v6 = v0[8];
    uint64_t v17 = v0[9];
    uint64_t v18 = v0[15];
    uint64_t v8 = v0[6];
    uint64_t v7 = v0[7];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v9(v8, v1, v2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v7);
    v9(v18, v8, v2);
    uint64_t v5 = 0;
  }
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[13];
  uint64_t v12 = v0[10];
  uint64_t v13 = v0[11];
  uint64_t v14 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[5] + 56))(v10, v5, 1, v14);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v4)(v10, 1, v14);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 32))(v0[2], v0[15], v0[4]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  return result;
}

uint64_t AXPreferences.LiveSpeech.installedSpeechLocales.getter()
{
  return sub_18D3DE904(MEMORY[0x1E4FAF1F8]);
}

uint64_t AXPreferences.LiveSpeech.systemSpokenLocaleStream.getter()
{
  return sub_18D3DE904(MEMORY[0x1E4FAF1D0]);
}

uint64_t sub_18D3DE904(void (*a1)(void))
{
  sub_18D3DD460();
  a1();

  return swift_release();
}

id AXPreferences.LiveSpeech.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id AXPreferences.LiveSpeech.init()()
{
  id v1 = v0;
  Objectint Type = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__keyboardVoiceSelections;
  uint64_t v8 = v0;
  unint64_t v9 = sub_18D3BF918(MEMORY[0x1E4FBC860]);
  uint64_t v10 = sub_18D40A6A8();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v6, 1, 1, v10);
  uint64_t v12 = sub_18D3E02CC(v9, 0xD000000000000017, 0x800000018D42F030, 0, 0, 6, (uint64_t)v6, (uint64_t)sub_18D3DC3A0, 0);
  swift_bridgeObjectRelease();
  *(void *)&v1[v7] = v12;
  uint64_t v13 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech__visionOSLiveSpeechLaunchDistance;
  v11(v6, 1, 1, v10);
  *(void *)&v8[v13] = sub_18D3DF968(0x446C616974617073, 0.8, 0xEF65636E61747369, 0, 0, 6, (uint64_t)v6, 0, 0);
  *(void *)&v8[OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences10LiveSpeech____lazy_storage___resolver] = 0;

  v15.receiver = v8;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, sel_init);
}

id AXPreferences.LiveSpeech.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t AsyncStream<A>.voiceSelectionStream(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25D0);
  sub_18D40A678();
  sub_18D40A968();

  return swift_release();
}

uint64_t sub_18D3DECE4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[11] = a1;
  uint64_t v6 = sub_18D40A358();
  v4[14] = v6;
  v4[15] = *(void *)(v6 - 8);
  v4[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1540);
  v4[17] = swift_task_alloc();
  uint64_t v7 = sub_18D40A4E8();
  v4[18] = v7;
  v4[19] = *(void *)(v7 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v4[22] = swift_task_alloc();
  uint64_t v8 = sub_18D40A678();
  v4[23] = v8;
  v4[24] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = *a2;
  v4[25] = v9;
  v4[26] = v10;
  return MEMORY[0x1F4188298](sub_18D3DEED8, 0, 0);
}

uint64_t sub_18D3DEED8()
{
  if (!*(void *)(v0[26] + 16))
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[24] + 56);
    v8(v0[22], 1, 1, v0[23]);
LABEL_7:
    v0[27] = v8;
    sub_18D3C3EE8(v0[22], &qword_1E91B2118);
    if (qword_1E91B2048 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v12 = (void **)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_liveSpeech);
    swift_beginAccess();
    uint64_t v13 = *v12;
    v0[28] = *v12;
    swift_bridgeObjectRetain();
    id v14 = v13;
    sub_18D40A2F8();
    v0[29] = sub_18D3DD460();
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
    objc_super v15 = (void *)swift_task_alloc();
    v0[30] = v15;
    *objc_super v15 = v0;
    v15[1] = sub_18D3DF228;
    uint64_t v17 = v0[16];
    uint64_t v16 = v0[17];
    return v24(v16, v17);
  }
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  swift_bridgeObjectRetain();
  unint64_t v3 = sub_18D3F0C10(v2, v1);
  if (v4)
  {
    uint64_t v5 = v0[23];
    uint64_t v6 = v0[24];
    uint64_t v7 = v0[22];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v7, *(void *)(v0[26] + 56) + *(void *)(v6 + 72) * v3, v5);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v8(v7, 0, 1, v5);
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[24] + 56);
    v8(v0[22], 1, 1, v0[23]);
  }
  uint64_t v9 = v0[23];
  uint64_t v10 = v0[24];
  uint64_t v11 = v0[22];
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1) {
    goto LABEL_7;
  }
  uint64_t v19 = v0[25];
  uint64_t v20 = v0[23];
  uint64_t v21 = v0[11];
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[24] + 32);
  v22(v19, v0[22], v20);
  v22(v21, v19, v20);
  v8(v21, 0, 1, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_18D3DF228()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 224);
  uint64_t v2 = *(void *)(*(void *)v0 + 128);
  uint64_t v3 = *(void *)(*(void *)v0 + 120);
  uint64_t v4 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return MEMORY[0x1F4188298](sub_18D3DF3BC, 0, 0);
}

uint64_t sub_18D3DF3BC()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18D3C3EE8(v3, &qword_1E91B1540);
    uint64_t v4 = (void **)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_liveSpeech);
    swift_beginAccess();
    uint64_t v5 = *v4;
    v0[31] = *v4;
    v5;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[32] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_18D3DF61C;
    uint64_t v7 = v0[20];
    return AXPreferences.LiveSpeech.systemDefaultVoice()(v7);
  }
  else
  {
    uint64_t v9 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[27];
    uint64_t v10 = v0[23];
    uint64_t v11 = v0[21];
    uint64_t v12 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v11, v3, v1);
    sub_18D40A428();
    sub_18D40A648();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v1);
    v9(v12, 0, 1, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_18D3DF61C()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 248);
  swift_task_dealloc();

  return MEMORY[0x1F4188298](sub_18D3DF730, 0, 0);
}

uint64_t sub_18D3DF730()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[27];
  uint64_t v2 = v0[23];
  uint64_t v4 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[11];
  sub_18D40A428();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_18D40A648();
  v1(v6, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_18D3DF87C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18D3DF8B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_18D3C40D8;
  return sub_18D3DECE4(a1, a2, v7, v6);
}

uint64_t sub_18D3DF968(uint64_t a1, float a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v35 = a6;
  uint64_t v36 = a8;
  unint64_t v39 = a5;
  uint64_t v33 = sub_18D40A698();
  MEMORY[0x1F4188790](v33, v13);
  id v34 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_18D40A6A8();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v32 = (char *)v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v24);
  unint64_t v26 = (void *)((char *)v31 - v25);
  sub_18D3BEB54(a7, (uint64_t)v18);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  uint64_t v37 = a9;
  uint64_t v38 = a7;
  v31[1] = a1;
  if (v27 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v26, v18, v19);
    if (v39) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v40 = 0x656570536576694CLL;
    unint64_t v41 = 0xEA00000000006863;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    unint64_t v39 = v41;
    goto LABEL_6;
  }
  uint64_t v40 = 0x656570536576696CLL;
  unint64_t v41 = 0xEA00000000006863;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v28 = v41;
  *unint64_t v26 = v40;
  v26[1] = v28;
  void v26[2] = 0;
  v26[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v26, *MEMORY[0x1E4F47EE8], v19);
  sub_18D3C3EE8((uint64_t)v18, &qword_1E91B2098);
  if (!v39) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2228);
  float v44 = a2;
  (*(void (**)(char *, void *, uint64_t))(v20 + 16))(v32, v26, v19);
  uint64_t v40 = MEMORY[0x1E4FBC860];
  sub_18D3E08A4(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3E08EC((unint64_t *)&qword_1E91B20E0, &qword_1E91B20D8);
  sub_18D40AAD8();
  uint64_t v42 = sub_18D40A558();
  uint64_t v43 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v40);
  sub_18D40A548();
  uint64_t v29 = sub_18D40A6E8();
  sub_18D3C3EE8(v38, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v26, v19);
  return v29;
}

uint64_t sub_18D3DFDBC()
{
  uint64_t v0 = sub_18D40A678();
  uint64_t v53 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0, v1);
  uint64_t v56 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2, v4);
  int64_t v52 = (char *)&v48 - v5;
  id v6 = objc_msgSend(self, sel_sharedInstance);
  id v7 = objc_msgSend(v6, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v7) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1518);
  uint64_t v8 = sub_18D40A778();

  uint64_t v9 = sub_18D40A7F8();
  if (!*(void *)(v8 + 16) || (unint64_t v11 = sub_18D3F0C10(v9, v10), (v12 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v13 = *(void *)(*(void *)(v8 + 56) + 8 * v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(v13 + 64);
  uint64_t v49 = v13 + 64;
  uint64_t v51 = v13;
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v50 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v54 = (void (**)(char *, char *, uint64_t))(v53 + 32);
  uint64_t v48 = v53 + 40;
  uint64_t v19 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      int64_t v55 = v14;
      unint64_t v21 = v20 | (v14 << 6);
    }
    else
    {
      int64_t v22 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_42;
      }
      if (v22 >= v50)
      {
LABEL_39:
        swift_release();
        return (uint64_t)v19;
      }
      unint64_t v23 = *(void *)(v49 + 8 * v22);
      int64_t v24 = v14 + 1;
      if (!v23)
      {
        int64_t v24 = v14 + 2;
        if (v14 + 2 >= v50) {
          goto LABEL_39;
        }
        unint64_t v23 = *(void *)(v49 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v14 + 3;
          if (v14 + 3 >= v50) {
            goto LABEL_39;
          }
          unint64_t v23 = *(void *)(v49 + 8 * v24);
          if (!v23)
          {
            uint64_t v25 = v14 + 4;
            if (v14 + 4 >= v50) {
              goto LABEL_39;
            }
            unint64_t v23 = *(void *)(v49 + 8 * v25);
            if (!v23)
            {
              while (1)
              {
                int64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_43;
                }
                if (v24 >= v50) {
                  goto LABEL_39;
                }
                unint64_t v23 = *(void *)(v49 + 8 * v24);
                ++v25;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            int64_t v24 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v18 = (v23 - 1) & v23;
      int64_t v55 = v24;
      unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    unint64_t v26 = (uint64_t *)(*(void *)(v51 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v60 = 1;
    char v59 = 1;
    char v58 = 1;
    uint64_t v29 = v52;
    sub_18D40A648();
    uint64_t v30 = *v54;
    uint64_t v31 = v29;
    uint64_t v32 = v0;
    (*v54)(v56, v31, v0);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v57 = v19;
    unint64_t v35 = sub_18D3F0C10(v28, v27);
    uint64_t v36 = v19[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v19[3] >= v38)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v42 = v57;
        if (v34) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_18D3F8304();
        uint64_t v42 = v57;
        if (v39) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_18D3F74A4(v38, isUniquelyReferenced_nonNull_native);
      unint64_t v40 = sub_18D3F0C10(v28, v27);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_44;
      }
      unint64_t v35 = v40;
      uint64_t v42 = v57;
      if (v39)
      {
LABEL_7:
        uint64_t v0 = v32;
        (*(void (**)(unint64_t, char *, uint64_t))(v53 + 40))(v42[7] + *(void *)(v53 + 72) * v35, v56, v32);
        goto LABEL_8;
      }
    }
    v42[(v35 >> 6) + 8] |= 1 << v35;
    uint64_t v43 = (uint64_t *)(v42[6] + 16 * v35);
    *uint64_t v43 = v28;
    v43[1] = v27;
    uint64_t v0 = v32;
    v30((char *)(v42[7] + *(void *)(v53 + 72) * v35), v56, v32);
    uint64_t v44 = v42[2];
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_41;
    }
    v42[2] = v46;
    swift_bridgeObjectRetain();
LABEL_8:
    uint64_t v19 = v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v14 = v55;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = sub_18D40ACC8();
  __break(1u);
  return result;
}

uint64_t sub_18D3E02CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = a4;
  uint64_t v33 = a1;
  uint64_t v36 = a6;
  uint64_t v37 = a9;
  uint64_t v34 = sub_18D40A698();
  MEMORY[0x1F4188790](v34, v12);
  unint64_t v35 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_18D40A6A8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  uint64_t v32 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v23);
  uint64_t v25 = (uint64_t *)((char *)&v30 - v24);
  sub_18D3BEB54(a7, (uint64_t)v17);
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  uint64_t v38 = a8;
  uint64_t v39 = a7;
  if (v26 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v19 + 32))(v25, v17, v18);
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v40 = 0x656570536576694CLL;
    unint64_t v41 = 0xEA00000000006863;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    unint64_t v31 = v41;
    goto LABEL_6;
  }
  uint64_t v40 = 0x656570536576696CLL;
  unint64_t v41 = 0xEA00000000006863;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  unint64_t v27 = v41;
  void *v25 = v40;
  v25[1] = v27;
  void v25[2] = 0;
  v25[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v25, *MEMORY[0x1E4F47EE8], v18);
  sub_18D3C3EE8((uint64_t)v17, &qword_1E91B2098);
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  unint64_t v31 = a5;
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2640);
  uint64_t v44 = v33;
  (*(void (**)(char *, void *, uint64_t))(v19 + 16))(v32, v25, v18);
  uint64_t v40 = MEMORY[0x1E4FBC860];
  sub_18D3E08A4(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3E08EC((unint64_t *)&qword_1E91B20E0, &qword_1E91B20D8);
  sub_18D40AAD8();
  uint64_t v42 = sub_18D40A558();
  uint64_t v43 = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(&v40);
  sub_18D40A548();
  uint64_t v28 = sub_18D40A6E8();
  sub_18D3C3EE8(v39, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v25, v18);
  return v28;
}

uint64_t sub_18D3E0724(uint64_t a1, uint64_t a2)
{
  return sub_18D3E08A4(&qword_1E91B2628, a2, (void (*)(uint64_t))type metadata accessor for AXPreferences.LiveSpeech);
}

uint64_t type metadata accessor for AXPreferences.LiveSpeech()
{
  return self;
}

uint64_t sub_18D3E07A0()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18D3E07E8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  id v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1E91B2630 + dword_1E91B2630);
  return v6(v2, v3, v4);
}

uint64_t sub_18D3E08A4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D3E08EC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D3E0938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,char a23,char a24,uint64_t a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,char a39,char a40)
{
  uint64_t v44 = sub_18D40A288();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 32))(a9, a1, v44);
  BOOL v45 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v46 = (void *)(a9 + v45[5]);
  *uint64_t v46 = a2;
  v46[1] = a3;
  *(void *)(a9 + v45[6]) = a4;
  *(void *)(a9 + v45[7]) = a5;
  sub_18D3EA9E4(a6, a9 + v45[8], (uint64_t *)&unk_1EB34DCD0);
  *(unsigned char *)(a9 + v45[9]) = a7;
  *(unsigned char *)(a9 + v45[10]) = a8;
  *(unsigned char *)(a9 + v45[11]) = a10;
  *(unsigned char *)(a9 + v45[12]) = a11;
  *(unsigned char *)(a9 + v45[13]) = a12;
  uint64_t v47 = a9 + v45[14];
  *(void *)uint64_t v47 = a13;
  *(unsigned char *)(v47 + _Block_object_dispose(&STACK[0x240], 8) = a14 & 1;
  uint64_t v48 = a9 + v45[15];
  *(void *)uint64_t v48 = a15;
  *(unsigned char *)(v48 + _Block_object_dispose(&STACK[0x240], 8) = a16 & 1;
  uint64_t v49 = a9 + v45[16];
  *(void *)uint64_t v49 = a17;
  *(unsigned char *)(v49 + _Block_object_dispose(&STACK[0x240], 8) = a18 & 1;
  uint64_t v50 = a9 + v45[17];
  *(void *)uint64_t v50 = a19;
  *(unsigned char *)(v50 + _Block_object_dispose(&STACK[0x240], 8) = a20 & 1;
  uint64_t result = sub_18D3EA9E4(a21, a9 + v45[18], &qword_1E91B2118);
  *(unsigned char *)(a9 + v45[19]) = a22;
  *(unsigned char *)(a9 + v45[20]) = a23;
  *(unsigned char *)(a9 + v45[21]) = a24;
  uint64_t v52 = a9 + v45[22];
  *(void *)uint64_t v52 = a25;
  *(unsigned char *)(v52 + _Block_object_dispose(&STACK[0x240], 8) = a26 & 1;
  *(unsigned char *)(a9 + v45[23]) = a27;
  *(unsigned char *)(a9 + v45[24]) = a28;
  uint64_t v53 = (void *)(a9 + v45[25]);
  *uint64_t v53 = a29;
  v53[1] = a30;
  uint64_t v54 = (void *)(a9 + v45[26]);
  *uint64_t v54 = a31;
  v54[1] = a32;
  uint64_t v55 = a9 + v45[27];
  *(void *)uint64_t v55 = a33;
  *(unsigned char *)(v55 + _Block_object_dispose(&STACK[0x240], 8) = a34 & 1;
  uint64_t v56 = a9 + v45[28];
  *(void *)uint64_t v56 = a35;
  *(unsigned char *)(v56 + _Block_object_dispose(&STACK[0x240], 8) = a36 & 1;
  uint64_t v57 = a9 + v45[29];
  *(void *)uint64_t v57 = a37;
  *(unsigned char *)(v57 + _Block_object_dispose(&STACK[0x240], 8) = a38 & 1;
  *(unsigned char *)(a9 + v45[30]) = a39;
  *(unsigned char *)(a9 + v45[31]) = a40;
  return result;
}

uint64_t AXPreferences.VoiceOver.Activity.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_18D40A288();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AXPreferences.VoiceOver.Activity.id.setter(uint64_t a1)
{
  uint64_t v3 = sub_18D40A288();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*AXPreferences.VoiceOver.Activity.id.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.name.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.Activity()
{
  uint64_t result = qword_1E91B26D8;
  if (!qword_1E91B26D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AXPreferences.VoiceOver.Activity.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.name.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.textualContexts.getter()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();

  return swift_bridgeObjectRetain();
}

uint64_t AXPreferences.VoiceOver.Activity.textualContexts.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.textualContexts.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.appIdentifiers.getter()
{
  type metadata accessor for AXPreferences.VoiceOver.Activity();

  return swift_bridgeObjectRetain();
}

uint64_t AXPreferences.VoiceOver.Activity.appIdentifiers.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.appIdentifiers.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.punctuationGroup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18D3C3FF4(v1 + *(int *)(v3 + 32), a1, (uint64_t *)&unk_1EB34DCD0);
}

uint64_t AXPreferences.VoiceOver.Activity.punctuationGroup.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18D3E1760(a1, v1 + *(int *)(v3 + 32), (uint64_t *)&unk_1EB34DCD0);
}

uint64_t (*AXPreferences.VoiceOver.Activity.punctuationGroup.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.tableHeaders.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 36));
}

uint64_t AXPreferences.VoiceOver.Activity.tableHeaders.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.tableHeaders.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.tableRowAndColumn.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 40));
}

uint64_t AXPreferences.VoiceOver.Activity.tableRowAndColumn.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.tableRowAndColumn.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.speakEmojis.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 44));
}

uint64_t AXPreferences.VoiceOver.Activity.speakEmojis.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.speakEmojis.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.imageDescriptions.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 48));
}

uint64_t AXPreferences.VoiceOver.Activity.imageDescriptions.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.imageDescriptions.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.hints.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 52));
}

uint64_t AXPreferences.VoiceOver.Activity.hints.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.hints.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.containerFeedback.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 56));
}

uint64_t AXPreferences.VoiceOver.Activity.containerFeedback.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 56);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.containerFeedback.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.numberFeedback.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 60));
}

uint64_t AXPreferences.VoiceOver.Activity.numberFeedback.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 60);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.numberFeedback.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.typingStyle.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 64));
}

uint64_t AXPreferences.VoiceOver.Activity.typingStyle.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 64);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.typingStyle.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.navigationStyle.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 68));
}

uint64_t AXPreferences.VoiceOver.Activity.navigationStyle.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 68);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.navigationStyle.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.voiceSelection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18D3C3FF4(v1 + *(int *)(v3 + 72), a1, &qword_1E91B2118);
}

uint64_t AXPreferences.VoiceOver.Activity.voiceSelection.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  return sub_18D3E1760(a1, v1 + *(int *)(v3 + 72), &qword_1E91B2118);
}

uint64_t sub_18D3E1760(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*AXPreferences.VoiceOver.Activity.voiceSelection.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.voiceIdentifier.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  sub_18D3C3FF4(v0 + *(int *)(v5 + 72), (uint64_t)v4, &qword_1E91B2118);
  uint64_t v6 = sub_18D40A678();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
  {
    sub_18D3C3EE8((uint64_t)v4, &qword_1E91B2118);
    return 0;
  }
  else
  {
    uint64_t v8 = sub_18D40A658();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  return v8;
}

unint64_t AXPreferences.VoiceOver.Activity.speechRate.getter()
{
  return sub_18D3E1980(MEMORY[0x1E4F47E78]);
}

unint64_t AXPreferences.VoiceOver.Activity.volume.getter()
{
  return sub_18D3E1980(MEMORY[0x1E4F47E90]);
}

unint64_t sub_18D3E1980(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  sub_18D3C3FF4(v1 + *(int *)(v7 + 72), (uint64_t)v6, &qword_1E91B2118);
  uint64_t v8 = sub_18D40A678();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    sub_18D3C3EE8((uint64_t)v6, &qword_1E91B2118);
    uint64_t v10 = 0;
    LOBYTE(v11) = 1;
  }
  else
  {
    unint64_t v12 = a1();
    unsigned int v13 = v12;
    uint64_t v11 = HIDWORD(v12) & 1;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    uint64_t v10 = v13;
  }
  return v10 | ((unint64_t)v11 << 32);
}

uint64_t AXPreferences.VoiceOver.Activity.speechMuted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 76));
}

uint64_t AXPreferences.VoiceOver.Activity.speechMuted.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.speechMuted.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.soundMuted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 80));
}

uint64_t AXPreferences.VoiceOver.Activity.soundMuted.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.soundMuted.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.audioDucking.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 84));
}

uint64_t AXPreferences.VoiceOver.Activity.audioDucking.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.audioDucking.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.modifierKeys.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 88));
}

uint64_t AXPreferences.VoiceOver.Activity.modifierKeys.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 88);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.modifierKeys.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellGeneral.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 92));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellGeneral.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 92)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleStatusCellGeneral.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellText.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 96));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleStatusCellText.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleStatusCellText.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleTable.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 100));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleTable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 100));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleTable.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInputTable.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 104));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInputTable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 104));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleInputTable.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleOutput.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 108));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleOutput.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 108);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleOutput.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInput.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 112));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleInput.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 112);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleInput.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAutoAdvanceDuration.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 116));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAutoAdvanceDuration.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = v2 + *(int *)(result + 116);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x240], 8) = a2 & 1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleAutoAdvanceDuration.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAlerts.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 120));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleAlerts.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 120)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleAlerts.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.Activity.brailleFormatting.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.Activity() + 124));
}

uint64_t AXPreferences.VoiceOver.Activity.brailleFormatting.setter(char a1)
{
  uint64_t result = type metadata accessor for AXPreferences.VoiceOver.Activity();
  *(unsigned char *)(v1 + *(int *)(result + 124)) = a1;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.Activity.brailleFormatting.modify())()
{
  return nullsub_1;
}

uint64_t static AXPreferences.VoiceOver.Activity.typeKey.getter()
{
  swift_beginAccess();
  uint64_t v0 = qword_1E91B2648;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static AXPreferences.VoiceOver.Activity.typeKey.setter(uint64_t a1, char *a2)
{
  qword_1E91B2648 = a1;
  off_1E91B2650 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.Activity.typeKey.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_18D3E24B4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B14D8);
  sub_18D40A528();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18D4310F0;
  uint64_t result = sub_18D40A518();
  qword_1E91B2658 = v0;
  return result;
}

uint64_t sub_18D3E2580(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2748);
  uint64_t inited = swift_initStackObject();
  uint64_t v3 = inited;
  *(_OWORD *)(inited + 16) = xmmword_18D4312B0;
  *(void *)(inited + 32) = 0x64496563696F76;
  *(void *)(inited + 40) = 0xE700000000000000;
  uint64_t v4 = inited + 48;
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_18D3F0C10(0x6564496563696F76, 0xEF7265696669746ELL);
    if (v6)
    {
      sub_18D3DC290(*(void *)(a1 + 56) + 40 * v5, v4);
    }
    else
    {
      *(void *)(v4 + 32) = 0;
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }
  }
  else
  {
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    swift_bridgeObjectRetain();
  }
  *(void *)(v3 + 8_Block_object_dispose(&STACK[0x240], 8) = 1702125938;
  *(void *)(v3 + 96) = 0xE400000000000000;
  if (*(void *)(a1 + 16) && (unint64_t v7 = sub_18D3F0C10(0x6152686365657073, 0xEA00000000006574), (v8 & 1) != 0))
  {
    sub_18D3DC290(*(void *)(a1 + 56) + 40 * v7, v3 + 104);
  }
  else
  {
    *(void *)(v3 + 136) = 0;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
  }
  *(void *)(v3 + 144) = 0x656D756C6F76;
  *(void *)(v3 + 152) = 0xE600000000000000;
  if (*(void *)(a1 + 16) && (unint64_t v9 = sub_18D3F0C10(0x656D756C6F76, 0xE600000000000000), (v10 & 1) != 0))
  {
    sub_18D3DC290(*(void *)(a1 + 56) + 40 * v9, v3 + 160);
  }
  else
  {
    *(void *)(v3 + 192) = 0;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
  }
  sub_18D3BFB18(v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2750);
  sub_18D3EA878();
  sub_18D40AB28();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = a1;
  sub_18D3E6438((uint64_t)&v14, 0x6C65536563696F76, 0xEE006E6F69746365, isUniquelyReferenced_nonNull_native);
  uint64_t v12 = v15;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static AXPreferences.VoiceOver.Activity.migrations.getter()
{
  if (qword_1E91B2038 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AXPreferences.VoiceOver.Activity.migrations.setter(uint64_t a1)
{
  if (qword_1E91B2038 != -1) {
    swift_once();
  }
  swift_beginAccess();
  qword_1E91B2658 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.Activity.migrations.modify())()
{
  if (qword_1E91B2038 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t AXPreferences.VoiceOver.Activity.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_18D40A678();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  MEMORY[0x1F4188790](v4, v5);
  unint64_t v27 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v28 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_18D40A288();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18D3EA830(&qword_1E91B14E8, MEMORY[0x1E4F27990]);
  sub_18D40A7A8();
  uint64_t v19 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  swift_bridgeObjectRetain();
  sub_18D40A828();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v1 + v19[6]);
  sub_18D40ACF8();
  if (v20)
  {
    swift_bridgeObjectRetain();
    sub_18D3E68D0(a1, v20);
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = *(void *)(v1 + v19[7]);
  sub_18D40ACF8();
  if (v21)
  {
    swift_bridgeObjectRetain();
    sub_18D3E6738(a1, v21);
    swift_bridgeObjectRelease();
  }
  sub_18D3C3FF4(v1 + v19[8], (uint64_t)v18, (uint64_t *)&unk_1EB34DCD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, v10) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v18, v10);
    sub_18D40ACF8();
    sub_18D40A7A8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  uint64_t v22 = v29;
  if (*(unsigned char *)(v1 + v19[9]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v1 + v19[10]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v1 + v19[11]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v1 + v19[12]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v1 + v19[13]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v1 + v19[14] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40ACE8();
  }
  if (*(unsigned char *)(v1 + v19[15] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40ACE8();
  }
  if (*(unsigned char *)(v1 + v19[16] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40ACE8();
  }
  if (*(unsigned char *)(v1 + v19[17] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40ACE8();
  }
  uint64_t v23 = v30;
  uint64_t v24 = v28;
  sub_18D3C3FF4(v2 + v19[18], v28, &qword_1E91B2118);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v23) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    uint64_t v25 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v27, v24, v23);
    sub_18D40ACF8();
    sub_18D3EA830(&qword_1E91B2660, MEMORY[0x1E4F47EA0]);
    sub_18D40A7A8();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v23);
  }
  if (*(unsigned char *)(v2 + v19[19]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v2 + v19[20]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v2 + v19[21]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v2 + v19[22] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40ACE8();
  }
  if (*(unsigned char *)(v2 + v19[23]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v2 + v19[24]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(void *)(v2 + v19[25] + 8))
  {
    sub_18D40ACF8();
    swift_bridgeObjectRetain();
    sub_18D40A828();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18D40ACF8();
  }
  if (*(void *)(v2 + v19[26] + 8))
  {
    sub_18D40ACF8();
    swift_bridgeObjectRetain();
    sub_18D40A828();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18D40ACF8();
  }
  if (*(unsigned char *)(v2 + v19[27] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40ACE8();
  }
  if (*(unsigned char *)(v2 + v19[28] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40ACE8();
  }
  if (*(unsigned char *)(v2 + v19[29] + 8) == 1)
  {
    sub_18D40ACF8();
  }
  else
  {
    sub_18D40ACF8();
    sub_18D40AD08();
  }
  if (*(unsigned char *)(v2 + v19[30]) != 2) {
    sub_18D40ACF8();
  }
  sub_18D40ACF8();
  if (*(unsigned char *)(v2 + v19[31]) != 2) {
    sub_18D40ACF8();
  }
  return sub_18D40ACF8();
}

unint64_t sub_18D3E3298(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701667182;
      break;
    case 2:
      unint64_t result = 0x436C617574786574;
      break;
    case 3:
      unint64_t result = 0x746E656449707061;
      break;
    case 4:
      return result;
    case 5:
      unint64_t result = 0x616548656C626174;
      break;
    case 6:
    case 8:
    case 10:
    case 22:
    case 27:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0x6F6D456B61657073;
      break;
    case 9:
      unint64_t result = 0x73746E6968;
      break;
    case 11:
      unint64_t result = 0x65467265626D756ELL;
      break;
    case 12:
      unint64_t result = 0x7453676E69707974;
      break;
    case 13:
      unint64_t result = 0x697461676976616ELL;
      break;
    case 14:
      unint64_t result = 0x6C65536563696F76;
      break;
    case 15:
      unint64_t result = 0x754D686365657073;
      break;
    case 16:
      unint64_t result = 0x74754D646E756F73;
      break;
    case 17:
      unint64_t result = 0x6375446F69647561;
      break;
    case 18:
      unint64_t result = 0x7265696669646F6DLL;
      break;
    case 19:
      unint64_t result = 0xD000000000000018;
      break;
    case 20:
      unint64_t result = 0xD000000000000015;
      break;
    case 21:
      unint64_t result = 0x54656C6C69617262;
      break;
    case 23:
      unint64_t result = 0x4F656C6C69617262;
      break;
    case 24:
      unint64_t result = 0x49656C6C69617262;
      break;
    case 25:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 26:
      unint64_t result = 0x41656C6C69617262;
      break;
    default:
      unint64_t result = 25705;
      break;
  }
  return result;
}

BOOL sub_18D3E3618(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_18D3E362C()
{
  return sub_18D40AD18();
}

uint64_t sub_18D3E3674()
{
  return sub_18D40ACE8();
}

uint64_t sub_18D3E36A0()
{
  return sub_18D40AD18();
}

unint64_t sub_18D3E36E4()
{
  return sub_18D3E3298(*v0);
}

uint64_t sub_18D3E36EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18D3E9D18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18D3E3714()
{
  return 0;
}

void sub_18D3E3720(unsigned char *a1@<X8>)
{
  *a1 = 28;
}

uint64_t sub_18D3E372C(uint64_t a1)
{
  unint64_t v2 = sub_18D3E78A4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18D3E3768(uint64_t a1)
{
  unint64_t v2 = sub_18D3E78A4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AXPreferences.VoiceOver.Activity.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2668);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18D3E78A4();
  sub_18D40AD38();
  LOBYTE(v32) = 0;
  sub_18D40A288();
  sub_18D3EA830(&qword_1EB34DC40, MEMORY[0x1E4F27990]);
  sub_18D40AC98();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    LOBYTE(v32) = 1;
    sub_18D40AC88();
    uint64_t v32 = *(void *)(v3 + *(int *)(v10 + 24));
    char v34 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1430);
    sub_18D3E794C(&qword_1E91B1438, &qword_1E91B1478);
    sub_18D40AC78();
    uint64_t v11 = *(void *)(v3 + *(int *)(v10 + 28));
    unint64_t v31 = (int *)v10;
    uint64_t v32 = v11;
    char v34 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1418);
    sub_18D3EA918(&qword_1E91B1420, &qword_1E91B1418);
    sub_18D40AC78();
    uint64_t v12 = v31;
    LOBYTE(v32) = 4;
    sub_18D40AC78();
    LOBYTE(v32) = 5;
    sub_18D40AC68();
    LOBYTE(v32) = 6;
    sub_18D40AC68();
    LOBYTE(v32) = 7;
    sub_18D40AC68();
    LOBYTE(v32) = 8;
    sub_18D40AC68();
    LOBYTE(v32) = 9;
    sub_18D40AC68();
    uint64_t v13 = (uint64_t *)(v3 + v12[14]);
    uint64_t v14 = *v13;
    LOBYTE(v13) = *((unsigned char *)v13 + 8);
    uint64_t v32 = v14;
    char v33 = (char)v13;
    char v34 = 10;
    type metadata accessor for AXSVoiceOverFeedbackOption(0);
    sub_18D3EA830(&qword_1E91B1448, type metadata accessor for AXSVoiceOverFeedbackOption);
    sub_18D40AC78();
    uint64_t v15 = (uint64_t *)(v3 + v31[15]);
    uint64_t v16 = *v15;
    LOBYTE(v15) = *((unsigned char *)v15 + 8);
    uint64_t v32 = v16;
    char v33 = (char)v15;
    char v34 = 11;
    type metadata accessor for AXSVoiceOverNumberFeedback(0);
    sub_18D3EA830(&qword_1E91B1460, type metadata accessor for AXSVoiceOverNumberFeedback);
    sub_18D40AC78();
    uint64_t v17 = (uint64_t *)(v3 + v31[16]);
    uint64_t v18 = *v17;
    LOBYTE(v17) = *((unsigned char *)v17 + 8);
    uint64_t v32 = v18;
    char v33 = (char)v17;
    char v34 = 12;
    type metadata accessor for AXSVoiceOverTouchTypingMode(0);
    sub_18D3EA830(&qword_1E91B14A8, type metadata accessor for AXSVoiceOverTouchTypingMode);
    sub_18D40AC78();
    uint64_t v19 = (uint64_t *)(v3 + v31[17]);
    uint64_t v20 = *v19;
    LOBYTE(v19) = *((unsigned char *)v19 + 8);
    uint64_t v32 = v20;
    char v33 = (char)v19;
    char v34 = 13;
    type metadata accessor for AXSVoiceOverNavigationStyle(0);
    sub_18D3EA830(&qword_1E91B1490, type metadata accessor for AXSVoiceOverNavigationStyle);
    sub_18D40AC78();
    LOBYTE(v32) = 14;
    sub_18D40A678();
    sub_18D3EA830(&qword_1E91B2678, MEMORY[0x1E4F47EA0]);
    sub_18D40AC78();
    LOBYTE(v32) = 15;
    sub_18D40AC68();
    LOBYTE(v32) = 16;
    sub_18D40AC68();
    LOBYTE(v32) = 17;
    sub_18D40AC68();
    uint64_t v21 = (uint64_t *)(v3 + v31[22]);
    uint64_t v22 = *v21;
    LOBYTE(v21) = *((unsigned char *)v21 + 8);
    uint64_t v32 = v22;
    char v33 = (char)v21;
    char v34 = 18;
    type metadata accessor for AXSVoiceOverKeyboardModifierChoice(0);
    sub_18D3EA830(&qword_1E91B14C0, type metadata accessor for AXSVoiceOverKeyboardModifierChoice);
    sub_18D40AC78();
    LOBYTE(v32) = 19;
    sub_18D40AC68();
    LOBYTE(v32) = 20;
    sub_18D40AC68();
    LOBYTE(v32) = 21;
    sub_18D40AC58();
    LOBYTE(v32) = 22;
    sub_18D40AC58();
    uint64_t v23 = (uint64_t *)(v3 + v31[27]);
    uint64_t v24 = *v23;
    LOBYTE(v23) = *((unsigned char *)v23 + 8);
    uint64_t v32 = v24;
    char v33 = (char)v23;
    char v34 = 23;
    type metadata accessor for AXSVoiceOverBrailleMode(0);
    sub_18D3EA830(&qword_1E91B2680, type metadata accessor for AXSVoiceOverBrailleMode);
    sub_18D40AC78();
    uint64_t v25 = (uint64_t *)(v3 + v31[28]);
    uint64_t v26 = *v25;
    LOBYTE(v25) = *((unsigned char *)v25 + 8);
    uint64_t v32 = v26;
    char v33 = (char)v25;
    char v34 = 24;
    sub_18D40AC78();
    unint64_t v27 = (uint64_t *)(v3 + v31[29]);
    uint64_t v28 = *v27;
    LOBYTE(v27) = *((unsigned char *)v27 + 8);
    uint64_t v32 = v28;
    char v33 = (char)v27;
    char v34 = 25;
    sub_18D3E78F8();
    sub_18D40AC78();
    LOBYTE(v32) = 26;
    sub_18D40AC68();
    LOBYTE(v32) = 27;
    sub_18D40AC68();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t AXPreferences.VoiceOver.Activity.hashValue.getter()
{
  sub_18D40ACD8();
  AXPreferences.VoiceOver.Activity.hash(into:)((uint64_t)v1);
  return sub_18D40AD18();
}

uint64_t AXPreferences.VoiceOver.Activity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v114 = a1;
  uint64_t v86 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v89 = (uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v98 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_18D40A288();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v99 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2688);
  uint64_t v100 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102, v12);
  uint64_t v113 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18D40A278();
  uint64_t v112 = v14[6];
  *(void *)&v17[v112] = 0;
  uint64_t v108 = v14[7];
  *(void *)&v17[v108] = 0;
  int64_t v109 = &v17[v14[8]];
  uint64_t v110 = v9;
  uint64_t v18 = *(void (**)(void))(v9 + 56);
  uint64_t v104 = v8;
  v18();
  uint64_t v97 = v14[9];
  v17[v97] = 2;
  uint64_t v96 = v14[10];
  v17[v96] = 2;
  uint64_t v95 = v14[11];
  v17[v95] = 2;
  uint64_t v94 = v14[12];
  v17[v94] = 2;
  uint64_t v93 = v14[13];
  v17[v93] = 2;
  uint64_t v19 = &v17[v14[14]];
  *(void *)uint64_t v19 = 0;
  uint64_t v92 = v19;
  v19[8] = 1;
  uint64_t v20 = &v17[v14[15]];
  *(void *)uint64_t v20 = 0;
  long long v91 = v20;
  v20[8] = 1;
  uint64_t v21 = &v17[v14[16]];
  *(void *)uint64_t v21 = 0;
  uint64_t v90 = v21;
  v21[8] = 1;
  uint64_t v22 = &v17[v14[17]];
  *(void *)uint64_t v22 = 0;
  id v87 = v22;
  v22[8] = 1;
  uint64_t v23 = (uint64_t)&v17[v14[18]];
  uint64_t v24 = sub_18D40A678();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  uint64_t v107 = v23;
  uint64_t v88 = v24;
  v25(v23, 1, 1);
  uint64_t v80 = v14[19];
  v17[v80] = 2;
  uint64_t v81 = v14[20];
  v17[v81] = 2;
  uint64_t v82 = v14[21];
  v17[v82] = 2;
  uint64_t v26 = &v17[v14[22]];
  *(void *)uint64_t v26 = 0;
  BOOL v83 = v26;
  v26[8] = 1;
  uint64_t v84 = v14[23];
  v17[v84] = 2;
  uint64_t v85 = v14[24];
  v17[v85] = 2;
  unint64_t v27 = &v17[v14[25]];
  *(void *)unint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v106 = v27;
  uint64_t v28 = &v17[v14[26]];
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = 0;
  uint64_t v105 = v28;
  uint64_t v29 = &v17[v14[27]];
  *(void *)uint64_t v29 = 0;
  v29[8] = 1;
  uint64_t v30 = &v17[v14[28]];
  *(void *)uint64_t v30 = 0;
  v30[8] = 1;
  unint64_t v31 = &v17[v14[29]];
  *(void *)unint64_t v31 = 0;
  v31[8] = 1;
  uint64_t v32 = v14[30];
  v17[v32] = 2;
  long long v101 = v14;
  uint64_t v33 = v14[31];
  id v111 = v17;
  v17[v33] = 2;
  __swift_project_boxed_opaque_existential_1(v114, v114[3]);
  sub_18D3E78A4();
  uint64_t v34 = v103;
  sub_18D40AD28();
  if (v34)
  {
    uint64_t v35 = v104;
    uint64_t v38 = (uint64_t)v109;
    uint64_t v39 = v110;
    uint64_t v40 = v111;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18D3C3EE8(v38, (uint64_t *)&unk_1EB34DCD0);
    sub_18D3C3EE8(v107, &qword_1E91B2118);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v76 = v29;
    unint64_t v77 = v30;
    unint64_t v78 = v31;
    uint64_t v79 = v32;
    uint64_t v103 = v33;
    LOBYTE(v115) = 0;
    sub_18D3EA830(&qword_1EB34DC48, MEMORY[0x1E4F27990]);
    uint64_t v36 = v99;
    uint64_t v37 = v104;
    sub_18D40AC48();
    uint64_t v42 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 40))(v111, v36, v37);
    LOBYTE(v115) = 1;
    uint64_t v43 = sub_18D40AC38();
    uint64_t v44 = v108;
    BOOL v45 = (uint64_t *)&v42[v101[5]];
    *BOOL v45 = v43;
    v45[1] = v46;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1430);
    char v117 = 2;
    sub_18D3E794C(&qword_1E91B1440, &qword_1E91B1488);
    sub_18D40AC28();
    uint64_t v47 = v115;
    uint64_t v48 = v112;
    swift_bridgeObjectRelease();
    *(void *)&v42[v48] = v47;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1418);
    char v117 = 3;
    sub_18D3EA918(&qword_1E91B1428, &qword_1E91B1418);
    sub_18D40AC28();
    uint64_t v49 = v115;
    swift_bridgeObjectRelease();
    *(void *)&v42[v44] = v49;
    LOBYTE(v115) = 4;
    uint64_t v50 = (uint64_t)v98;
    sub_18D40AC28();
    sub_18D3E1760(v50, (uint64_t)v109, (uint64_t *)&unk_1EB34DCD0);
    LOBYTE(v115) = 5;
    v42[v97] = sub_18D40AC18();
    LOBYTE(v115) = 6;
    v42[v96] = sub_18D40AC18();
    LOBYTE(v115) = 7;
    v42[v95] = sub_18D40AC18();
    LOBYTE(v115) = 8;
    v42[v94] = sub_18D40AC18();
    LOBYTE(v115) = 9;
    v111[v93] = sub_18D40AC18();
    type metadata accessor for AXSVoiceOverFeedbackOption(0);
    char v117 = 10;
    sub_18D3EA830(&qword_1E91B1450, type metadata accessor for AXSVoiceOverFeedbackOption);
    sub_18D40AC28();
    char v51 = v116;
    uint64_t v52 = v92;
    *(void *)uint64_t v92 = v115;
    v52[8] = v51;
    type metadata accessor for AXSVoiceOverNumberFeedback(0);
    char v117 = 11;
    sub_18D3EA830(&qword_1E91B1468, type metadata accessor for AXSVoiceOverNumberFeedback);
    sub_18D40AC28();
    char v53 = v116;
    uint64_t v54 = v91;
    *(void *)long long v91 = v115;
    v54[8] = v53;
    type metadata accessor for AXSVoiceOverTouchTypingMode(0);
    char v117 = 12;
    sub_18D3EA830(&qword_1E91B14B0, type metadata accessor for AXSVoiceOverTouchTypingMode);
    sub_18D40AC28();
    char v55 = v116;
    uint64_t v56 = v90;
    *(void *)uint64_t v90 = v115;
    v56[8] = v55;
    type metadata accessor for AXSVoiceOverNavigationStyle(0);
    char v117 = 13;
    sub_18D3EA830(&qword_1E91B1498, type metadata accessor for AXSVoiceOverNavigationStyle);
    sub_18D40AC28();
    char v57 = v116;
    char v58 = v87;
    *(void *)id v87 = v115;
    v58[8] = v57;
    LOBYTE(v115) = 14;
    sub_18D3EA830(&qword_1E91B2690, MEMORY[0x1E4F47EA0]);
    sub_18D40AC28();
    sub_18D3E1760(v89, v107, &qword_1E91B2118);
    LOBYTE(v115) = 15;
    v111[v80] = sub_18D40AC18();
    LOBYTE(v115) = 16;
    v111[v81] = sub_18D40AC18();
    LOBYTE(v115) = 17;
    v111[v82] = sub_18D40AC18();
    type metadata accessor for AXSVoiceOverKeyboardModifierChoice(0);
    char v117 = 18;
    sub_18D3EA830(&qword_1E91B14C8, type metadata accessor for AXSVoiceOverKeyboardModifierChoice);
    sub_18D40AC28();
    char v59 = v116;
    char v60 = v83;
    *(void *)BOOL v83 = v115;
    v60[8] = v59;
    LOBYTE(v115) = 19;
    v111[v84] = sub_18D40AC18();
    LOBYTE(v115) = 20;
    v111[v85] = sub_18D40AC18();
    LOBYTE(v115) = 21;
    uint64_t v61 = sub_18D40AC08();
    uint64_t v63 = v62;
    uint64_t v64 = (uint64_t *)v106;
    swift_bridgeObjectRelease();
    *uint64_t v64 = v61;
    v64[1] = v63;
    LOBYTE(v115) = 22;
    uint64_t v65 = sub_18D40AC08();
    uint64_t v67 = v66;
    unint64_t v68 = (uint64_t *)v105;
    swift_bridgeObjectRelease();
    *unint64_t v68 = v65;
    v68[1] = v67;
    type metadata accessor for AXSVoiceOverBrailleMode(0);
    char v117 = 23;
    sub_18D3EA830(&qword_1E91B1500, type metadata accessor for AXSVoiceOverBrailleMode);
    sub_18D40AC28();
    char v69 = v116;
    int v70 = v76;
    *(void *)BOOL v76 = v115;
    v70[8] = v69;
    char v117 = 24;
    sub_18D40AC28();
    char v71 = v116;
    BOOL v72 = v77;
    *(void *)unint64_t v77 = v115;
    v72[8] = v71;
    char v117 = 25;
    sub_18D3E79E0();
    sub_18D40AC28();
    char v73 = v116;
    uint64_t v74 = v78;
    *(void *)unint64_t v78 = v115;
    v74[8] = v73;
    LOBYTE(v115) = 26;
    v111[v79] = sub_18D40AC18();
    LOBYTE(v115) = 27;
    LOBYTE(v65) = sub_18D40AC18();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v113, v102);
    uint64_t v75 = (uint64_t)v111;
    v111[v103] = v65;
    sub_18D3E7A34(v75, v86);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    return sub_18D3E7A98(v75);
  }
}

uint64_t sub_18D3E51F8()
{
  swift_beginAccess();
  uint64_t v0 = qword_1E91B2648;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_18D3E524C()
{
  if (qword_1E91B2038 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18D3E52C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_18D40A288();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_18D3E532C()
{
  sub_18D40ACD8();
  AXPreferences.VoiceOver.Activity.hash(into:)((uint64_t)v1);
  return sub_18D40AD18();
}

uint64_t sub_18D3E5370()
{
  sub_18D40ACD8();
  AXPreferences.VoiceOver.Activity.hash(into:)((uint64_t)v1);
  return sub_18D40AD18();
}

uint64_t sub_18D3E53AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AXPreferences.VoiceOver.Activity.init(from:)(a1, a2);
}

uint64_t sub_18D3E53C4(void *a1)
{
  return AXPreferences.VoiceOver.Activity.encode(to:)(a1);
}

uint64_t sub_18D3E53E0()
{
  return sub_18D40A8A8();
}

uint64_t sub_18D3E5470()
{
  return sub_18D40A878();
}

uint64_t sub_18D3E54F0()
{
  sub_18D40A7F8();
  uint64_t v0 = sub_18D40A868();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_18D3E552C()
{
  sub_18D40A7F8();
  sub_18D40A828();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18D3E5580()
{
  sub_18D40A7F8();
  sub_18D40ACD8();
  sub_18D40A828();
  uint64_t v0 = sub_18D40AD18();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_18D3E55F4()
{
  return sub_18D40A8B8();
}

uint64_t sub_18D3E5684()
{
  return sub_18D40A888();
}

uint64_t sub_18D3E570C()
{
  return sub_18D40A8B8();
}

uint64_t sub_18D3E579C()
{
  return sub_18D40A888();
}

uint64_t sub_18D3E581C()
{
  return sub_18D40A8B8();
}

uint64_t sub_18D3E58AC()
{
  return sub_18D40A888();
}

uint64_t sub_18D3E592C()
{
  return sub_18D40A8B8();
}

uint64_t sub_18D3E59BC()
{
  return sub_18D40A888();
}

uint64_t sub_18D3E5A3C()
{
  return sub_18D40A8B8();
}

uint64_t sub_18D3E5ACC()
{
  return sub_18D40A888();
}

uint64_t sub_18D3E5B4C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v32 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v33 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v35 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v34 = v3;
      unint64_t v8 = v7 | (v3 << 6);
      goto LABEL_25;
    }
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v9 >= v33) {
      return 1;
    }
    unint64_t v10 = *(void *)(v32 + 8 * v9);
    int64_t v11 = v3 + 1;
    if (!v10)
    {
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v33) {
        return 1;
      }
      unint64_t v10 = *(void *)(v32 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v3 + 3;
        if (v3 + 3 >= v33) {
          return 1;
        }
        unint64_t v10 = *(void *)(v32 + 8 * v11);
        if (!v10) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v6 = (v10 - 1) & v10;
    int64_t v34 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_25:
    uint64_t v13 = result;
    uint64_t v14 = *(void **)(*(void *)(result + 48) + 8 * v8);
    sub_18D40A7F8();
    sub_18D40ACD8();
    id v15 = v14;
    sub_18D40A828();
    uint64_t v16 = sub_18D40AD18();
    swift_bridgeObjectRelease();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = v16 & ~v17;
    if (((*(void *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v19 = sub_18D40A7F8();
    uint64_t v21 = v20;
    if (v19 == sub_18D40A7F8() && v21 == v22)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v24 = sub_18D40ACA8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        uint64_t v25 = ~v17;
        while (1)
        {
          unint64_t v18 = (v18 + 1) & v25;
          if (((*(void *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
            break;
          }
          uint64_t v26 = sub_18D40A7F8();
          uint64_t v28 = v27;
          if (v26 == sub_18D40A7F8() && v28 == v29) {
            goto LABEL_7;
          }
          char v31 = sub_18D40ACA8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v31) {
            goto LABEL_8;
          }
        }
LABEL_40:

        return 0;
      }
    }
LABEL_8:

    uint64_t result = v13;
    int64_t v3 = v34;
  }
  uint64_t v12 = v3 + 4;
  if (v3 + 4 >= v33) {
    return 1;
  }
  unint64_t v10 = *(void *)(v32 + 8 * v12);
  if (v10)
  {
    int64_t v11 = v3 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v33) {
      return 1;
    }
    unint64_t v10 = *(void *)(v32 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_24;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_18D3E5E60(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    uint64_t v14 = result;
    id v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_18D40ACD8();
    swift_bridgeObjectRetain();
    sub_18D40A828();
    uint64_t v18 = sub_18D40AD18();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_18D40ACA8() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_18D40ACA8() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 4;
  if (v3 + 4 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_18D3E60E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_18D40A2C8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  int64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_18D3F0A5C(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 < v18 || (a3 & 1) == 0)
  {
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      sub_18D3F7BC4();
      goto LABEL_7;
    }
    sub_18D3F6984(v18, a3 & 1);
    unint64_t v29 = sub_18D3F0A5C(a2);
    if ((v19 & 1) == (v30 & 1))
    {
      unint64_t v15 = v29;
      uint64_t v21 = *v4;
      if (v19) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return sub_18D3E65C8(v15, (uint64_t)v12, a1, v21);
    }
LABEL_15:
    uint64_t result = sub_18D40ACC8();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v21 = *v4;
  if ((v19 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v22 = v21[7];
  uint64_t v23 = sub_18D40A678();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  uint64_t v26 = v23;
  uint64_t v27 = v22 + *(void *)(v24 + 72) * v15;

  return v25(v27, a1, v26);
}

_OWORD *sub_18D3E62EC(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_18D3F0C88(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_18D3F811C();
      goto LABEL_7;
    }
    sub_18D3F718C(v13, a3 & 1);
    unint64_t v19 = sub_18D3F0C88(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_18D3DC290(a2, (uint64_t)v21);
      return sub_18D3E66BC(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_18D40ACC8();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);

  return sub_18D3EA9D4(a1, v17);
}

uint64_t sub_18D3E6438(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_18D3F0C10(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_18D3F85C8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 40 * v12;
      return sub_18D3EA978(a1, v19);
    }
    goto LABEL_13;
  }
  sub_18D3F788C(v15, a4 & 1);
  unint64_t v21 = sub_18D3F0C10(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = sub_18D40ACC8();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  uint64_t v24 = v18[7] + 40 * v12;
  long long v25 = *(_OWORD *)a1;
  long long v26 = *(_OWORD *)(a1 + 16);
  *(void *)(v24 + 32) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v24 = v25;
  *(_OWORD *)(v24 + 16) = v26;
  uint64_t v27 = v18[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_18D3E65C8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_18D40A2C8();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_18D40A678();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

_OWORD *sub_18D3E66BC(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_18D3EA9D4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_18D3E6738(uint64_t a1, uint64_t a2)
{
  sub_18D40AD18();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1)) {
      goto LABEL_19;
    }
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_18D40ACE8();
    }
    uint64_t v13 = *(void *)(v3 + 8 * v10);
    if (!v13) {
      break;
    }
LABEL_16:
    uint64_t v6 = (v13 - 1) & v13;
LABEL_5:
    sub_18D40ACD8();
    swift_bridgeObjectRetain();
    sub_18D40A828();
    uint64_t v11 = sub_18D40AD18();
    uint64_t result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  int64_t v14 = v10 + 1;
  if (v10 + 1 >= v7) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_17;
    }
    uint64_t v13 = *(void *)(v3 + 8 * v10);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_18D3E68D0(uint64_t a1, uint64_t a2)
{
  sub_18D40AD18();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1)) {
      goto LABEL_19;
    }
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_18D40ACE8();
    }
    unint64_t v17 = *(void *)(v3 + 8 * v10);
    if (!v17) {
      break;
    }
LABEL_16:
    unint64_t v6 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = *(void **)(*(void *)(a2 + 48) + 8 * v12);
    sub_18D40A7F8();
    sub_18D40ACD8();
    id v14 = v13;
    sub_18D40A828();
    uint64_t v15 = sub_18D40AD18();

    uint64_t result = swift_bridgeObjectRelease();
    v9 ^= v15;
  }
  int64_t v18 = v10 + 1;
  if (v10 + 1 >= v7) {
    goto LABEL_17;
  }
  unint64_t v17 = *(void *)(v3 + 8 * v18);
  if (v17)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_17;
    }
    unint64_t v17 = *(void *)(v3 + 8 * v10);
    ++v18;
    if (v17) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t _sSo13AXPreferencesC22AccessibilityUtilitiesE9VoiceOverC8ActivityV2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18D40A678();
  uint64_t v210 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v207 = (char *)&v203 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2730);
  MEMORY[0x1F4188790](v208, v7);
  uint64_t v213 = (uint64_t)&v203 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  uint64_t v11 = MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v209 = (uint64_t)&v203 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v211 = (uint64_t)&v203 - v15;
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v212 = (uint64_t)&v203 - v17;
  uint64_t v18 = sub_18D40A288();
  uint64_t v214 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v19);
  unint64_t v21 = (char *)&v203 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2738);
  MEMORY[0x1F4188790](v22, v23);
  long long v25 = (char *)&v203 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  uint64_t v28 = MEMORY[0x1F4188790](v26 - 8, v27);
  char v30 = (char *)&v203 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v28, v31);
  int64_t v34 = (char *)&v203 - v33;
  MEMORY[0x1F4188790](v32, v35);
  uint64_t v37 = (char *)&v203 - v36;
  if ((sub_18D40A258() & 1) == 0) {
    return 0;
  }
  uint64_t v203 = v4;
  uint64_t v38 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v39 = *(int *)(v38 + 20);
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = *(void *)(a1 + v39 + 8);
  uint64_t v42 = (void *)(a2 + v39);
  if (v40 != *v42 || v41 != v42[1])
  {
    char v43 = sub_18D40ACA8();
    uint64_t result = 0;
    if ((v43 & 1) == 0) {
      return result;
    }
  }
  v204 = (int *)v38;
  uint64_t v205 = a1;
  uint64_t v45 = *(int *)(v38 + 24);
  uint64_t v46 = *(void *)(a1 + v45);
  uint64_t v47 = *(void *)(a2 + v45);
  uint64_t v206 = a2;
  if (v46)
  {
    if (!v47) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v48 = swift_bridgeObjectRetain();
    char v49 = sub_18D3E5B4C(v48, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0) {
      return 0;
    }
  }
  else if (v47)
  {
    return 0;
  }
  uint64_t v50 = v204[7];
  uint64_t v51 = *(void *)(v206 + v50);
  if (*(void *)(v205 + v50))
  {
    if (!v51) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v52 = swift_bridgeObjectRetain();
    char v53 = sub_18D3E5E60(v52, v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v53 & 1) == 0) {
      return 0;
    }
  }
  else if (v51)
  {
    return 0;
  }
  uint64_t v54 = v204;
  sub_18D3C3FF4(v205 + v204[8], (uint64_t)v37, (uint64_t *)&unk_1EB34DCD0);
  sub_18D3C3FF4(v206 + v54[8], (uint64_t)v34, (uint64_t *)&unk_1EB34DCD0);
  uint64_t v55 = (uint64_t)&v25[*(int *)(v22 + 48)];
  sub_18D3C3FF4((uint64_t)v37, (uint64_t)v25, (uint64_t *)&unk_1EB34DCD0);
  sub_18D3C3FF4((uint64_t)v34, v55, (uint64_t *)&unk_1EB34DCD0);
  uint64_t v56 = v214;
  char v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
  if (v57((uint64_t)v25, 1, v18) == 1)
  {
    sub_18D3C3EE8((uint64_t)v34, (uint64_t *)&unk_1EB34DCD0);
    sub_18D3C3EE8((uint64_t)v37, (uint64_t *)&unk_1EB34DCD0);
    if (v57(v55, 1, v18) == 1)
    {
      sub_18D3C3EE8((uint64_t)v25, (uint64_t *)&unk_1EB34DCD0);
      goto LABEL_25;
    }
LABEL_20:
    char v58 = &qword_1E91B2738;
    uint64_t v59 = (uint64_t)v25;
LABEL_21:
    sub_18D3C3EE8(v59, v58);
    return 0;
  }
  sub_18D3C3FF4((uint64_t)v25, (uint64_t)v30, (uint64_t *)&unk_1EB34DCD0);
  if (v57(v55, 1, v18) == 1)
  {
    sub_18D3C3EE8((uint64_t)v34, (uint64_t *)&unk_1EB34DCD0);
    sub_18D3C3EE8((uint64_t)v37, (uint64_t *)&unk_1EB34DCD0);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v30, v18);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v21, v55, v18);
  sub_18D3EA830(&qword_1E91B14F0, MEMORY[0x1E4F27990]);
  char v60 = sub_18D40A7B8();
  uint64_t v61 = *(void (**)(char *, uint64_t))(v56 + 8);
  v61(v21, v18);
  sub_18D3C3EE8((uint64_t)v34, (uint64_t *)&unk_1EB34DCD0);
  sub_18D3C3EE8((uint64_t)v37, (uint64_t *)&unk_1EB34DCD0);
  v61(v30, v18);
  sub_18D3C3EE8((uint64_t)v25, (uint64_t *)&unk_1EB34DCD0);
  if ((v60 & 1) == 0) {
    return 0;
  }
LABEL_25:
  uint64_t v62 = v204[9];
  int v63 = *(unsigned __int8 *)(v205 + v62);
  int v64 = *(unsigned __int8 *)(v206 + v62);
  if (v63 == 2)
  {
    if (v64 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v65 = (v63 & 1) == 0;
    if (v64 == 2 || ((v65 ^ v64) & 1) == 0) {
      return result;
    }
  }
  uint64_t v66 = v204[10];
  int v67 = *(unsigned __int8 *)(v205 + v66);
  int v68 = *(unsigned __int8 *)(v206 + v66);
  if (v67 == 2)
  {
    if (v68 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v69 = (v67 & 1) == 0;
    if (v68 == 2 || ((v69 ^ v68) & 1) == 0) {
      return result;
    }
  }
  uint64_t v70 = v204[11];
  int v71 = *(unsigned __int8 *)(v205 + v70);
  int v72 = *(unsigned __int8 *)(v206 + v70);
  if (v71 == 2)
  {
    if (v72 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v73 = (v71 & 1) == 0;
    if (v72 == 2 || ((v73 ^ v72) & 1) == 0) {
      return result;
    }
  }
  uint64_t v74 = v204[12];
  int v75 = *(unsigned __int8 *)(v205 + v74);
  int v76 = *(unsigned __int8 *)(v206 + v74);
  if (v75 == 2)
  {
    if (v76 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v77 = (v75 & 1) == 0;
    if (v76 == 2 || ((v77 ^ v76) & 1) == 0) {
      return result;
    }
  }
  uint64_t v78 = v204[13];
  int v79 = *(unsigned __int8 *)(v205 + v78);
  int v80 = *(unsigned __int8 *)(v206 + v78);
  if (v79 == 2)
  {
    if (v80 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v81 = (v79 & 1) == 0;
    if (v80 == 2 || ((v81 ^ v80) & 1) == 0) {
      return result;
    }
  }
  uint64_t v82 = v204[14];
  BOOL v83 = (void *)(v205 + v82);
  char v84 = *(unsigned char *)(v205 + v82 + 8);
  uint64_t v85 = (void *)(v206 + v82);
  int v86 = *(unsigned __int8 *)(v206 + v82 + 8);
  if (v84)
  {
    if (!v86) {
      return 0;
    }
  }
  else
  {
    if (*v83 != *v85) {
      LOBYTE(v86) = 1;
    }
    if (v86) {
      return 0;
    }
  }
  uint64_t v87 = v204[15];
  uint64_t v88 = (void *)(v205 + v87);
  char v89 = *(unsigned char *)(v205 + v87 + 8);
  uint64_t v90 = (void *)(v206 + v87);
  int v91 = *(unsigned __int8 *)(v206 + v87 + 8);
  if (v89)
  {
    if (!v91) {
      return 0;
    }
  }
  else
  {
    if (*v88 != *v90) {
      LOBYTE(v91) = 1;
    }
    if (v91) {
      return 0;
    }
  }
  uint64_t v92 = v204[16];
  uint64_t v93 = (void *)(v205 + v92);
  char v94 = *(unsigned char *)(v205 + v92 + 8);
  uint64_t v95 = (void *)(v206 + v92);
  int v96 = *(unsigned __int8 *)(v206 + v92 + 8);
  if (v94)
  {
    if (!v96) {
      return 0;
    }
  }
  else
  {
    if (*v93 != *v95) {
      LOBYTE(v96) = 1;
    }
    if (v96) {
      return 0;
    }
  }
  uint64_t v97 = v204[17];
  uint64_t v98 = (void *)(v205 + v97);
  char v99 = *(unsigned char *)(v205 + v97 + 8);
  uint64_t v100 = (void *)(v206 + v97);
  int v101 = *(unsigned __int8 *)(v206 + v97 + 8);
  if (v99)
  {
    if (!v101) {
      return 0;
    }
  }
  else
  {
    if (*v98 != *v100) {
      LOBYTE(v101) = 1;
    }
    if (v101) {
      return 0;
    }
  }
  uint64_t v102 = v204;
  uint64_t v103 = v212;
  sub_18D3C3FF4(v205 + v204[18], v212, &qword_1E91B2118);
  uint64_t v104 = v211;
  sub_18D3C3FF4(v206 + v102[18], v211, &qword_1E91B2118);
  uint64_t v105 = v213;
  uint64_t v106 = v213 + *(int *)(v208 + 48);
  sub_18D3C3FF4(v103, v213, &qword_1E91B2118);
  sub_18D3C3FF4(v104, v106, &qword_1E91B2118);
  uint64_t v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
  if (v107(v105, 1, v203) == 1)
  {
    sub_18D3C3EE8(v211, &qword_1E91B2118);
    sub_18D3C3EE8(v212, &qword_1E91B2118);
    if (v107(v106, 1, v203) == 1)
    {
      sub_18D3C3EE8(v213, &qword_1E91B2118);
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  sub_18D3C3FF4(v213, v209, &qword_1E91B2118);
  if (v107(v106, 1, v203) == 1)
  {
    sub_18D3C3EE8(v211, &qword_1E91B2118);
    sub_18D3C3EE8(v212, &qword_1E91B2118);
    (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v209, v203);
LABEL_79:
    char v58 = &qword_1E91B2730;
    uint64_t v59 = v213;
    goto LABEL_21;
  }
  uint64_t v108 = v210;
  int64_t v109 = v207;
  uint64_t v110 = v203;
  (*(void (**)(char *, uint64_t, uint64_t))(v210 + 32))(v207, v106, v203);
  sub_18D3EA830(&qword_1E91B2740, MEMORY[0x1E4F47EA0]);
  uint64_t v111 = v209;
  char v112 = sub_18D40A7B8();
  uint64_t v113 = *(void (**)(char *, uint64_t))(v108 + 8);
  v113(v109, v110);
  sub_18D3C3EE8(v211, &qword_1E91B2118);
  sub_18D3C3EE8(v212, &qword_1E91B2118);
  v113((char *)v111, v110);
  sub_18D3C3EE8(v213, &qword_1E91B2118);
  if ((v112 & 1) == 0) {
    return 0;
  }
LABEL_81:
  uint64_t v114 = v204[19];
  int v115 = *(unsigned __int8 *)(v205 + v114);
  int v116 = *(unsigned __int8 *)(v206 + v114);
  if (v115 == 2)
  {
    uint64_t v117 = v205;
    uint64_t v118 = v206;
    int64_t v119 = v204;
    if (v116 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v120 = (v115 & 1) == 0;
    if (v116 == 2) {
      return result;
    }
    char v121 = v120 ^ v116;
    uint64_t v117 = v205;
    uint64_t v118 = v206;
    int64_t v119 = v204;
    if ((v121 & 1) == 0) {
      return result;
    }
  }
  uint64_t v122 = v119[20];
  int v123 = *(unsigned __int8 *)(v117 + v122);
  int v124 = *(unsigned __int8 *)(v118 + v122);
  if (v123 == 2)
  {
    uint64_t v125 = v205;
    uint64_t v126 = v206;
    long long v127 = v204;
    if (v124 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v128 = (v123 & 1) == 0;
    if (v124 == 2) {
      return result;
    }
    char v129 = v128 ^ v124;
    uint64_t v125 = v205;
    uint64_t v126 = v206;
    long long v127 = v204;
    if ((v129 & 1) == 0) {
      return result;
    }
  }
  uint64_t v130 = v127[21];
  int v131 = *(unsigned __int8 *)(v125 + v130);
  int v132 = *(unsigned __int8 *)(v126 + v130);
  if (v131 == 2)
  {
    uint64_t v133 = v205;
    uint64_t v134 = v206;
    v135 = v204;
    if (v132 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v136 = (v131 & 1) == 0;
    if (v132 == 2) {
      return result;
    }
    char v137 = v136 ^ v132;
    uint64_t v133 = v205;
    uint64_t v134 = v206;
    v135 = v204;
    if ((v137 & 1) == 0) {
      return result;
    }
  }
  uint64_t v138 = v135[22];
  uint64_t v139 = v133 + v138;
  uint64_t v140 = v134 + v138;
  char v141 = *(unsigned char *)(v140 + 8);
  if (*(unsigned char *)(v139 + 8))
  {
    if (!*(unsigned char *)(v140 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)v139 != *(void *)v140) {
      char v141 = 1;
    }
    if (v141) {
      return 0;
    }
  }
  uint64_t v142 = v204[23];
  int v143 = *(unsigned __int8 *)(v205 + v142);
  int v144 = *(unsigned __int8 *)(v206 + v142);
  if (v143 == 2)
  {
    uint64_t v145 = v205;
    uint64_t v146 = v206;
    v147 = v204;
    if (v144 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v148 = (v143 & 1) == 0;
    if (v144 == 2) {
      return result;
    }
    char v149 = v148 ^ v144;
    uint64_t v145 = v205;
    uint64_t v146 = v206;
    v147 = v204;
    if ((v149 & 1) == 0) {
      return result;
    }
  }
  uint64_t v150 = v147[24];
  int v151 = *(unsigned __int8 *)(v145 + v150);
  int v152 = *(unsigned __int8 *)(v146 + v150);
  if (v151 == 2)
  {
    uint64_t v154 = v205;
    uint64_t v153 = v206;
    id v155 = v204;
    if (v152 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v156 = (v151 & 1) == 0;
    if (v152 == 2) {
      return result;
    }
    char v157 = v156 ^ v152;
    uint64_t v154 = v205;
    uint64_t v153 = v206;
    id v155 = v204;
    if ((v157 & 1) == 0) {
      return result;
    }
  }
  uint64_t v158 = v155[25];
  uint64_t v159 = (void *)(v154 + v158);
  uint64_t v160 = *(void *)(v154 + v158 + 8);
  uint64_t v161 = (void *)(v153 + v158);
  uint64_t v162 = v161[1];
  if (v160)
  {
    if (!v162) {
      return 0;
    }
    uint64_t v164 = v205;
    uint64_t v163 = v206;
    v165 = v204;
    if (*v159 != *v161 || v160 != v162)
    {
      char v166 = sub_18D40ACA8();
      uint64_t result = 0;
      if ((v166 & 1) == 0) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v164 = v205;
    uint64_t v163 = v206;
    v165 = v204;
    if (v162) {
      return 0;
    }
  }
  uint64_t v167 = v165[26];
  v168 = (void *)(v164 + v167);
  uint64_t v169 = *(void *)(v164 + v167 + 8);
  uint64_t v170 = (void *)(v163 + v167);
  uint64_t v171 = v170[1];
  if (v169)
  {
    if (!v171) {
      return 0;
    }
    uint64_t v173 = v205;
    uint64_t v172 = v206;
    uint64_t v174 = v204;
    if (*v168 != *v170 || v169 != v171)
    {
      char v175 = sub_18D40ACA8();
      uint64_t result = 0;
      if ((v175 & 1) == 0) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v173 = v205;
    uint64_t v172 = v206;
    uint64_t v174 = v204;
    if (v171) {
      return 0;
    }
  }
  uint64_t v176 = v174[27];
  uint64_t v177 = (void *)(v173 + v176);
  char v178 = *(unsigned char *)(v173 + v176 + 8);
  uint64_t v179 = (void *)(v172 + v176);
  int v180 = *(unsigned __int8 *)(v172 + v176 + 8);
  if (v178)
  {
    if (!v180) {
      return 0;
    }
  }
  else
  {
    if (*v177 != *v179) {
      LOBYTE(v180) = 1;
    }
    if (v180) {
      return 0;
    }
  }
  uint64_t v181 = v204[28];
  uint64_t v182 = (void *)(v205 + v181);
  char v183 = *(unsigned char *)(v205 + v181 + 8);
  id v184 = (void *)(v206 + v181);
  int v185 = *(unsigned __int8 *)(v206 + v181 + 8);
  if (v183)
  {
    if (!v185) {
      return 0;
    }
  }
  else
  {
    if (*v182 != *v184) {
      LOBYTE(v185) = 1;
    }
    if (v185) {
      return 0;
    }
  }
  uint64_t v186 = v204[29];
  v187 = (double *)(v205 + v186);
  char v188 = *(unsigned char *)(v205 + v186 + 8);
  id v189 = (double *)(v206 + v186);
  int v190 = *(unsigned __int8 *)(v206 + v186 + 8);
  if (v188)
  {
    if (!v190) {
      return 0;
    }
  }
  else
  {
    if (*v187 != *v189) {
      LOBYTE(v190) = 1;
    }
    if (v190) {
      return 0;
    }
  }
  uint64_t v191 = v204[30];
  int v192 = *(unsigned __int8 *)(v205 + v191);
  int v193 = *(unsigned __int8 *)(v206 + v191);
  if (v192 == 2)
  {
    uint64_t v194 = v205;
    uint64_t v195 = v206;
    uint64_t v196 = v204;
    if (v193 != 2) {
      return 0;
    }
    goto LABEL_149;
  }
  uint64_t result = 0;
  BOOL v197 = (v192 & 1) == 0;
  if (v193 != 2)
  {
    char v198 = v197 ^ v193;
    uint64_t v194 = v205;
    uint64_t v195 = v206;
    uint64_t v196 = v204;
    if (v198)
    {
LABEL_149:
      uint64_t v199 = v196[31];
      int v200 = *(unsigned __int8 *)(v194 + v199);
      int v201 = *(unsigned __int8 *)(v195 + v199);
      if (v200 == 2)
      {
        if (v201 == 2) {
          return 1;
        }
      }
      else
      {
        BOOL v202 = (v200 & 1) == 0;
        if (v201 != 2 && ((v202 ^ v201) & 1) != 0) {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_18D3E78A4()
{
  unint64_t result = qword_1E91B2670;
  if (!qword_1E91B2670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2670);
  }
  return result;
}

unint64_t sub_18D3E78F8()
{
  unint64_t result = qword_1EB34DC68;
  if (!qword_1EB34DC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB34DC68);
  }
  return result;
}

uint64_t sub_18D3E794C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E91B1430);
    sub_18D3EA830(a2, type metadata accessor for AXSSVoiceOverTextualContext);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18D3E79E0()
{
  unint64_t result = qword_1EB34DC38;
  if (!qword_1EB34DC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB34DC38);
  }
  return result;
}

uint64_t sub_18D3E7A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3E7A98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18D3E7AF4()
{
  return sub_18D3EA830(&qword_1E91B2698, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18D3E7B3C()
{
  return sub_18D3EA830(&qword_1E91B26A0, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18D3E7B84()
{
  return sub_18D3EA830(&qword_1E91B14E8, MEMORY[0x1E4F27990]);
}

uint64_t sub_18D3E7BCC()
{
  return sub_18D3EA830(&qword_1E91B26A8, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18D3E7C14()
{
  return sub_18D3EA830(&qword_1EB34DC98, type metadata accessor for AXSSVoiceOverTextualContext);
}

uint64_t sub_18D3E7C5C()
{
  return sub_18D3EA830(&qword_1E91B26B0, type metadata accessor for AXSVoiceOverFeedbackOption);
}

uint64_t sub_18D3E7CA4()
{
  return sub_18D3EA830(&qword_1E91B26B8, type metadata accessor for AXSVoiceOverNumberFeedback);
}

uint64_t sub_18D3E7CEC()
{
  return sub_18D3EA830(&qword_1E91B26C0, type metadata accessor for AXSVoiceOverTouchTypingMode);
}

uint64_t sub_18D3E7D34()
{
  return sub_18D3EA830(&qword_1E91B26C8, type metadata accessor for AXSVoiceOverNavigationStyle);
}

uint64_t sub_18D3E7D7C()
{
  return sub_18D3EA830(&qword_1E91B26D0, type metadata accessor for AXSVoiceOverKeyboardModifierChoice);
}

char *_s8ActivityVwCP(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_18D40A288();
    uint64_t v8 = *(void *)(v7 - 8);
    int v63 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v63(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    *(void *)&a1[v10] = *(void *)&a2[v10];
    uint64_t v14 = a3[8];
    *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
    __dst = &a1[v14];
    uint64_t v15 = &a2[v14];
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v15, 1, v7))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
      memcpy(__dst, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v63(__dst, v15, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
    }
    uint64_t v19 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    a1[v19] = a2[v19];
    uint64_t v20 = a3[12];
    a1[a3[11]] = a2[a3[11]];
    a1[v20] = a2[v20];
    uint64_t v21 = a3[14];
    a1[a3[13]] = a2[a3[13]];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = a3[15];
    uint64_t v25 = a3[16];
    uint64_t v26 = &a1[v24];
    uint64_t v27 = &a2[v24];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = &a1[v25];
    uint64_t v29 = &a2[v25];
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    uint64_t v30 = a3[17];
    uint64_t v31 = a3[18];
    uint64_t v32 = &a1[v30];
    uint64_t v33 = &a2[v30];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    int64_t v34 = &a1[v31];
    uint64_t v35 = &a2[v31];
    uint64_t v36 = sub_18D40A678();
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    uint64_t v39 = a3[20];
    a1[a3[19]] = a2[a3[19]];
    a1[v39] = a2[v39];
    uint64_t v40 = a3[22];
    a1[a3[21]] = a2[a3[21]];
    uint64_t v41 = &a1[v40];
    uint64_t v42 = &a2[v40];
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    uint64_t v43 = a3[24];
    a1[a3[23]] = a2[a3[23]];
    a1[v43] = a2[v43];
    uint64_t v44 = a3[25];
    uint64_t v45 = a3[26];
    uint64_t v46 = &a1[v44];
    uint64_t v47 = &a2[v44];
    uint64_t v48 = *((void *)v47 + 1);
    *(void *)uint64_t v46 = *(void *)v47;
    *((void *)v46 + 1) = v48;
    char v49 = &a1[v45];
    uint64_t v50 = &a2[v45];
    uint64_t v51 = *((void *)v50 + 1);
    *(void *)char v49 = *(void *)v50;
    *((void *)v49 + 1) = v51;
    uint64_t v52 = a3[27];
    uint64_t v53 = a3[28];
    uint64_t v54 = &a1[v52];
    uint64_t v55 = &a2[v52];
    *(void *)uint64_t v54 = *(void *)v55;
    v54[8] = v55[8];
    uint64_t v56 = &a1[v53];
    char v57 = &a2[v53];
    *(void *)uint64_t v56 = *(void *)v57;
    v56[8] = v57[8];
    uint64_t v58 = a3[29];
    uint64_t v59 = a3[30];
    char v60 = &a1[v58];
    uint64_t v61 = &a2[v58];
    *(void *)char v60 = *(void *)v61;
    v60[8] = v61[8];
    a1[v59] = a2[v59];
    a1[a3[31]] = a2[a3[31]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s8ActivityVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18D40A288();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 72);
  uint64_t v9 = sub_18D40A678();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *_s8ActivityVwcp(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_18D40A288();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v61 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v61(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  __dst = &a1[v13];
  uint64_t v14 = &a2[v13];
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v14, 1, v6))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
    memcpy(__dst, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v61(__dst, v14, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(__dst, 0, 1, v6);
  }
  uint64_t v17 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v18] = a2[v18];
  uint64_t v19 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[15];
  uint64_t v23 = a3[16];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = &a1[v23];
  uint64_t v27 = &a2[v23];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v28 = a3[17];
  uint64_t v29 = a3[18];
  uint64_t v30 = &a1[v28];
  uint64_t v31 = &a2[v28];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = &a1[v29];
  uint64_t v33 = &a2[v29];
  uint64_t v34 = sub_18D40A678();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v37] = a2[v37];
  uint64_t v38 = a3[22];
  a1[a3[21]] = a2[a3[21]];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v40[8];
  uint64_t v41 = a3[24];
  a1[a3[23]] = a2[a3[23]];
  a1[v41] = a2[v41];
  uint64_t v42 = a3[25];
  uint64_t v43 = a3[26];
  uint64_t v44 = &a1[v42];
  uint64_t v45 = &a2[v42];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = &a1[v43];
  uint64_t v48 = &a2[v43];
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = v49;
  uint64_t v50 = a3[27];
  uint64_t v51 = a3[28];
  uint64_t v52 = &a1[v50];
  uint64_t v53 = &a2[v50];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v53[8];
  uint64_t v54 = &a1[v51];
  uint64_t v55 = &a2[v51];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v55[8];
  uint64_t v56 = a3[29];
  uint64_t v57 = a3[30];
  uint64_t v58 = &a1[v56];
  uint64_t v59 = &a2[v56];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  a1[v57] = a2[v57];
  a1[a3[31]] = a2[a3[31]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s8ActivityVwca(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18D40A288();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v66(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v15 = v14(a1 + v11, 1, v6);
  int v16 = v14((uint64_t)v13, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v12, v13, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v12, v6);
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v66((uint64_t)v12, (uint64_t)v13, v6);
LABEL_7:
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v18 = a3[14];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  *(unsigned char *)(v19 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v20 + 8);
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[15];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[16];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v29 = *v28;
  *(unsigned char *)(v27 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v28 + 8);
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = a3[17];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  *(unsigned char *)(v31 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v32 + 8);
  *(void *)uint64_t v31 = v33;
  uint64_t v34 = a3[18];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = sub_18D40A678();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 24))(v35, v36, v37);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v38 + 16))(v35, v36, v37);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_13:
  *(unsigned char *)(a1 + a3[19]) = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + a3[20]) = *(unsigned char *)(a2 + a3[20]);
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  uint64_t v43 = a3[22];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v46 = *v45;
  *(unsigned char *)(v44 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v45 + 8);
  *(void *)uint64_t v44 = v46;
  *(unsigned char *)(a1 + a3[23]) = *(unsigned char *)(a2 + a3[23]);
  *(unsigned char *)(a1 + a3[24]) = *(unsigned char *)(a2 + a3[24]);
  uint64_t v47 = a3[25];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[26];
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (void *)(a2 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[27];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = (uint64_t *)(a2 + v53);
  uint64_t v56 = *v55;
  *(unsigned char *)(v54 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v55 + 8);
  *(void *)uint64_t v54 = v56;
  uint64_t v57 = a3[28];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v60 = *v59;
  *(unsigned char *)(v58 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v59 + 8);
  *(void *)uint64_t v58 = v60;
  uint64_t v61 = a3[29];
  uint64_t v62 = a1 + v61;
  int v63 = (uint64_t *)(a2 + v61);
  uint64_t v64 = *v63;
  *(unsigned char *)(v62 + _Block_object_dispose(&STACK[0x240], 8) = *((unsigned char *)v63 + 8);
  *(void *)uint64_t v62 = v64;
  *(unsigned char *)(a1 + a3[30]) = *(unsigned char *)(a2 + a3[30]);
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  return a1;
}

char *_s8ActivityVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_18D40A288();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v10 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v10], 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v14] = a2[v14];
  uint64_t v15 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v15] = a2[v15];
  uint64_t v16 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[15];
  uint64_t v20 = a3[16];
  uint64_t v21 = &a1[v19];
  uint64_t v22 = &a2[v19];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = &a1[v20];
  uint64_t v24 = &a2[v20];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = a3[17];
  uint64_t v26 = a3[18];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = &a1[v26];
  uint64_t v30 = &a2[v26];
  uint64_t v31 = sub_18D40A678();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v34 = a3[20];
  a1[a3[19]] = a2[a3[19]];
  a1[v34] = a2[v34];
  uint64_t v35 = a3[22];
  a1[a3[21]] = a2[a3[21]];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  uint64_t v38 = a3[24];
  a1[a3[23]] = a2[a3[23]];
  a1[v38] = a2[v38];
  uint64_t v39 = a3[26];
  *(_OWORD *)&a1[a3[25]] = *(_OWORD *)&a2[a3[25]];
  *(_OWORD *)&a1[v39] = *(_OWORD *)&a2[v39];
  uint64_t v40 = a3[27];
  uint64_t v41 = a3[28];
  uint64_t v42 = &a1[v40];
  uint64_t v43 = &a2[v40];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = &a1[v41];
  uint64_t v45 = &a2[v41];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
  uint64_t v46 = a3[29];
  uint64_t v47 = a3[30];
  uint64_t v48 = &a1[v46];
  uint64_t v49 = &a2[v46];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  a1[v47] = a2[v47];
  a1[a3[31]] = a2[a3[31]];
  return a1;
}

uint64_t _s8ActivityVwta(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18D40A288();
  uint64_t v7 = *(void *)(v6 - 8);
  BOOL v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v69(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v17 = v16(a1 + v13, 1, v6);
  int v18 = v16((uint64_t)v15, 1, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v14, v15, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v14, v6);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v69((uint64_t)v14, (uint64_t)v15, v6);
LABEL_7:
  uint64_t v20 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  uint64_t v21 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v22 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v24 + 8);
  uint64_t v25 = a3[15];
  uint64_t v26 = a3[16];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a1 + v26;
  uint64_t v30 = a2 + v26;
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v30 + 8);
  uint64_t v31 = a3[17];
  uint64_t v32 = a3[18];
  uint64_t v33 = a1 + v31;
  uint64_t v34 = a2 + v31;
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v34 + 8);
  uint64_t v35 = (void *)(a1 + v32);
  uint64_t v36 = (void *)(a2 + v32);
  uint64_t v37 = sub_18D40A678();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 40))(v35, v36, v37);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_13:
  uint64_t v43 = a3[20];
  *(unsigned char *)(a1 + a3[19]) = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v43) = *(unsigned char *)(a2 + v43);
  uint64_t v44 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  *(void *)uint64_t v45 = *(void *)v46;
  *(unsigned char *)(v45 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v46 + 8);
  uint64_t v47 = a3[24];
  *(unsigned char *)(a1 + a3[23]) = *(unsigned char *)(a2 + a3[23]);
  *(unsigned char *)(a1 + v47) = *(unsigned char *)(a2 + v47);
  uint64_t v48 = a3[25];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  void *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[26];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (uint64_t *)(a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *uint64_t v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[27];
  uint64_t v59 = a3[28];
  uint64_t v60 = a1 + v58;
  uint64_t v61 = a2 + v58;
  *(void *)uint64_t v60 = *(void *)v61;
  *(unsigned char *)(v60 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v61 + 8);
  uint64_t v62 = a1 + v59;
  uint64_t v63 = a2 + v59;
  *(void *)uint64_t v62 = *(void *)v63;
  *(unsigned char *)(v62 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v63 + 8);
  uint64_t v64 = a3[29];
  uint64_t v65 = a3[30];
  uint64_t v66 = a1 + v64;
  uint64_t v67 = a2 + v64;
  *(void *)uint64_t v66 = *(void *)v67;
  *(unsigned char *)(v66 + _Block_object_dispose(&STACK[0x240], 8) = *(unsigned char *)(v67 + 8);
  *(unsigned char *)(a1 + v65) = *(unsigned char *)(a2 + v65);
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  return a1;
}

uint64_t _s8ActivityVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18D3E9544);
}

uint64_t sub_18D3E9544(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18D40A288();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[8];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[18];
    return v16(v18, a2, v17);
  }
}

uint64_t _s8ActivityVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18D3E96E4);
}

uint64_t sub_18D3E96E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_18D40A288();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5] + _Block_object_dispose(&STACK[0x240], 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[8];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[18];

  return v16(v18, a2, a2, v17);
}

void sub_18D3E9870()
{
  sub_18D40A288();
  if (v0 <= 0x3F)
  {
    sub_18D3E9A08(319, &qword_1EB34DC50, MEMORY[0x1E4F27990]);
    if (v1 <= 0x3F)
    {
      sub_18D3E9A08(319, &qword_1E91B26E8, MEMORY[0x1E4F47EA0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_18D3E9A08(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_18D40AA78();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s8ActivityV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE5) {
    goto LABEL_17;
  }
  if (a2 + 27 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 27) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 27;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1C;
  int v8 = v6 - 28;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s8ActivityV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 27 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 27) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE4)
  {
    unsigned int v6 = ((a2 - 229) >> 8) + 1;
    *uint64_t result = a2 + 27;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18D3E9BC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 27;
        break;
    }
  }
  return result;
}

uint64_t sub_18D3E9BF0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_18D3E9BF8(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *_s8ActivityV10CodingKeysOMa()
{
  return &_s8ActivityV10CodingKeysON;
}

unint64_t sub_18D3E9C14()
{
  unint64_t result = qword_1E91B26F0;
  if (!qword_1E91B26F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B26F0);
  }
  return result;
}

unint64_t sub_18D3E9C6C()
{
  unint64_t result = qword_1E91B26F8;
  if (!qword_1E91B26F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B26F8);
  }
  return result;
}

unint64_t sub_18D3E9CC4()
{
  unint64_t result = qword_1E91B2700;
  if (!qword_1E91B2700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2700);
  }
  return result;
}

uint64_t sub_18D3E9D18(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x436C617574786574 && a2 == 0xEF73747865746E6FLL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E656449707061 && a2 == 0xEE00737265696669 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000018D42F120 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x616548656C626174 && a2 == 0xEC00000073726564 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018D42F140 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F6D456B61657073 && a2 == 0xEB0000000073696ALL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018D42F160 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x73746E6968 && a2 == 0xE500000000000000 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018D42F180 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65467265626D756ELL && a2 == 0xEE006B6361626465 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7453676E69707974 && a2 == 0xEB00000000656C79 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x697461676976616ELL && a2 == 0xEF656C7974536E6FLL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6C65536563696F76 && a2 == 0xEE006E6F69746365 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x754D686365657073 && a2 == 0xEB00000000646574 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x74754D646E756F73 && a2 == 0xEA00000000006465 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6375446F69647561 && a2 == 0xEC000000676E696BLL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x7265696669646F6DLL && a2 == 0xEC0000007379654BLL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000018D42F1A0 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000018D42F1C0 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x54656C6C69617262 && a2 == 0xEC000000656C6261 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018D42F1E0 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x4F656C6C69617262 && a2 == 0xED00007475707475 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x49656C6C69617262 && a2 == 0xEC0000007475706ELL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000018D42F200 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x41656C6C69617262 && a2 == 0xED0000737472656CLL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018D42F220)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else
  {
    char v6 = sub_18D40ACA8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 27;
    }
    else {
      return 28;
    }
  }
}

uint64_t sub_18D3EA830(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18D3EA878()
{
  unint64_t result = qword_1E91B2758;
  if (!qword_1E91B2758)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E91B2750);
    sub_18D3EA918(&qword_1E91B2760, &qword_1E91B1520);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2758);
  }
  return result;
}

uint64_t sub_18D3EA918(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D3EA978(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_18D3EA9D4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_18D3EA9E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  uint64_t v6 = MEMORY[0x1F4188790](v4 - 8, v5);
  int v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  unint64_t v11 = (char *)&v16 - v10;
  if (a1)
  {
    uint64_t v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    id v14 = a1;
    if (_sSo13AXPreferencesC22AccessibilityUtilitiesE9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(v14, (uint64_t)v11))
    {
      sub_18D3EC1A0((uint64_t)v11, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
      {
        sub_18D3EC208((uint64_t)v11);

        return sub_18D3C91CC((uint64_t)v8, a2);
      }
      sub_18D3EC208((uint64_t)v8);
    }
  }
  uint64_t result = sub_18D40AB98();
  __break(1u);
  return result;
}

uint64_t AXVoiceOverVoiceRotorItem.identifier.getter()
{
  unint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_identifier);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AXVoiceOverVoiceRotorItem.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_identifier);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t AXVoiceOverVoiceRotorItem.userDefinedName.getter()
{
  unint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_userDefinedName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AXVoiceOverVoiceRotorItem.userDefinedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_userDefinedName);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

void sub_18D3EAF9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_userDefinedName);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_18D40A7F8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_18D3EB004(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    uint64_t v3 = sub_18D40A7C8();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setUserDefinedName_);
}

uint64_t AXVoiceOverVoiceRotorItem.voiceId.getter()
{
  id v1 = objc_msgSend(v0, sel_selection);
  id v2 = objc_msgSend(v1, sel_voiceId);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = sub_18D40A7F8();

  return v3;
}

void AXVoiceOverVoiceRotorItem.voiceId.setter()
{
  id v1 = objc_msgSend(v0, sel_selection);
  id v2 = (id)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setVoiceId_, v2);
}

void sub_18D3EB2F0(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  uint64_t v5 = sub_18D40A7F8();
  uint64_t v7 = v6;

  *a3 = v5;
  a3[1] = v7;
}

id AXVoiceOverVoiceRotorItem.selection.getter()
{
  id v1 = (void **)(v0 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_selection);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

void AXVoiceOverVoiceRotorItem.selection.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___AXVoiceOverVoiceRotorItem_selection);
  swift_beginAccess();
  id v4 = *v3;
  void *v3 = a1;
}

id AXVoiceOverVoiceRotorItem.init(identifier:selection:userDefinedName:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  if (a5)
  {
    int v8 = (void *)sub_18D40A7C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    int v8 = 0;
  }
  id v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithIdentifier_selection_userDefinedName_, v7, a3, v8);

  return v9;
}

{
  char *v5;
  char *v9;
  char *v10;
  id v11;
  id v12;
  objc_super v14;

  id v9 = &v5[OBJC_IVAR___AXVoiceOverVoiceRotorItem_userDefinedName];
  *(void *)id v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = &v5[OBJC_IVAR___AXVoiceOverVoiceRotorItem_identifier];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  *(void *)&v5[OBJC_IVAR___AXVoiceOverVoiceRotorItem_selection] = a3;
  swift_beginAccess();
  *(void *)id v9 = a4;
  *((void *)v9 + 1) = a5;
  unint64_t v11 = a3;
  swift_bridgeObjectRelease();
  v14.receiver = v5;
  v14.super_class = (Class)AXVoiceOverVoiceRotorItem;
  uint64_t v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

void __swiftcall AXVoiceOverVoiceRotorItem.init()(AXVoiceOverVoiceRotorItem *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_init);
}

void AXVoiceOverVoiceRotorItem.init()()
{
}

void __swiftcall AXPreferences.VoiceOver.VoiceRotorItem._bridgeToObjectiveC()(AXVoiceOverVoiceRotorItem *__return_ptr retstr)
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_18D40A658();
  uint64_t v6 = v5;
  id v7 = 0;
  if ((sub_18D40A5C8() & 0x100000000) == 0)
  {
    uint64_t v8 = sub_18D40A5C8();
    if ((v8 & 0x100000000) != 0)
    {
      __break(1u);
      goto LABEL_22;
    }
    int v9 = v8;
    id v10 = objc_allocWithZone(NSNumber);
    LODWORD(v11) = v9;
    id v7 = objc_msgSend(v10, sel_initWithFloat_, v11);
  }
  if ((sub_18D40A5E8() & 0x100000000) == 0)
  {
    uint64_t v12 = sub_18D40A5E8();
    if ((v12 & 0x100000000) == 0)
    {
      int v13 = v12;
      id v14 = objc_allocWithZone(NSNumber);
      LODWORD(v15) = v13;
      id v16 = objc_msgSend(v14, sel_initWithFloat_, v15);
      goto LABEL_8;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v16 = 0;
LABEL_8:
  uint64_t v30 = v3;
  if ((sub_18D40A608() & 0x100000000) == 0)
  {
    uint64_t v17 = sub_18D40A608();
    if ((v17 & 0x100000000) == 0)
    {
      int v18 = v17;
      id v19 = objc_allocWithZone(NSNumber);
      LODWORD(v20) = v18;
      id v21 = objc_msgSend(v19, sel_initWithFloat_, v20);
      goto LABEL_12;
    }
LABEL_23:
    __break(1u);
    return;
  }
  id v21 = 0;
LABEL_12:
  uint64_t v22 = v4;
  if (!sub_18D40A598())
  {
    uint64_t v23 = 0;
    if (sub_18D40A628()) {
      goto LABEL_14;
    }
LABEL_16:
    uint64_t v24 = 0;
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1548);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2920);
  swift_dynamicCast();
  uint64_t v23 = v31;
  if (!sub_18D40A628()) {
    goto LABEL_16;
  }
LABEL_14:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2780);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B2910);
  swift_dynamicCast();
  uint64_t v24 = v31;
LABEL_17:
  id v25 = objc_allocWithZone(MEMORY[0x1E4F48308]);
  id v26 = sub_18D3EBB8C(v22, v6, v7, v16, v21, v23, v24);
  uint64_t v27 = *(void *)(v2 + *(int *)(v30 + 24) + 8);
  swift_bridgeObjectRetain();
  uint64_t v28 = (void *)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  if (v27)
  {
    uint64_t v29 = (void *)sub_18D40A7C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = 0;
  }
  objc_msgSend(objc_allocWithZone((Class)AXVoiceOverVoiceRotorItem), sel_initWithIdentifier_selection_userDefinedName_, v28, v26, v29);
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = _sSo13AXPreferencesC22AccessibilityUtilitiesE9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_18D40AB98();
    __break(1u);
  }
  return result;
}

uint64_t sub_18D3EBB14(void *a1, uint64_t a2)
{
  uint64_t result = _sSo13AXPreferencesC22AccessibilityUtilitiesE9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_18D40AB98();
    __break(1u);
  }
  return result;
}

id sub_18D3EBB8C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (a2)
  {
    id v14 = (void *)sub_18D40A7C8();
    swift_bridgeObjectRelease();
    if (a6) {
      goto LABEL_3;
    }
LABEL_6:
    double v15 = 0;
    if (a7) {
      goto LABEL_4;
    }
LABEL_7:
    id v16 = 0;
    goto LABEL_8;
  }
  id v14 = 0;
  if (!a6) {
    goto LABEL_6;
  }
LABEL_3:
  sub_18D3EC3C0(0, &qword_1EB34DCB0);
  double v15 = (void *)sub_18D40A768();
  swift_bridgeObjectRelease();
  if (!a7) {
    goto LABEL_7;
  }
LABEL_4:
  sub_18D40AA48();
  id v16 = (void *)sub_18D40A8D8();
  swift_bridgeObjectRelease();
LABEL_8:
  id v17 = objc_msgSend(v8, sel_initWithVoiceId_rate_pitch_volume_voiceSettings_effects_, v14, a3, a4, a5, v15, v16);

  return v17;
}

uint64_t _sSo13AXPreferencesC22AccessibilityUtilitiesE9VoiceOverC0D9RotorItemV34_conditionallyBridgeFromObjectiveC_6resultSbSo07AXVoiceedfG0C_AGSgztFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_18D40A678();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x1F4188790](v4, v5);
  id v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  MEMORY[0x1F4188790](v8 - 8, v9);
  double v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a2;
  sub_18D3EC208(a2);
  id v12 = objc_msgSend(a1, sel_identifier);
  uint64_t v13 = sub_18D40A7F8();
  uint64_t v48 = v14;
  uint64_t v49 = v13;

  id v15 = objc_msgSend(a1, sel_selection);
  id v16 = objc_msgSend(v15, sel_voiceId);

  uint64_t v50 = v7;
  if (v16)
  {
    uint64_t v17 = sub_18D40A7F8();
    uint64_t v46 = v18;
    uint64_t v47 = v17;
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
  }
  id v19 = objc_msgSend(a1, sel_selection);
  id v20 = objc_msgSend(v19, sel_rate);

  if (v20)
  {
    objc_msgSend(v20, sel_floatValue);
    unsigned int v22 = v21;

    uint64_t v45 = v22;
  }
  else
  {
    uint64_t v45 = 0;
  }
  id v23 = objc_msgSend(a1, sel_selection);
  id v24 = objc_msgSend(v23, sel_pitch);

  if (v24)
  {
    objc_msgSend(v24, sel_floatValue);
  }
  id v25 = objc_msgSend(a1, sel_selection);
  id v26 = objc_msgSend(v25, sel_volume);

  if (v26)
  {
    objc_msgSend(v26, sel_floatValue);
  }
  id v27 = objc_msgSend(a1, sel_selection);
  id v28 = objc_msgSend(v27, sel_effects);

  if (v28)
  {
    sub_18D40AA48();
    uint64_t v29 = sub_18D40A8E8();

    uint64_t v54 = v29;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B2910);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2780);
    swift_dynamicCast();
  }
  id v30 = objc_msgSend(a1, sel_selection);
  id v31 = objc_msgSend(v30, sel_voiceSettings);

  if (v31)
  {
    sub_18D3EC3C0(0, &qword_1EB34DCB0);
    uint64_t v32 = sub_18D40A778();

    sub_18D3F9CE8(v32);
    swift_bridgeObjectRelease();
  }
  LOBYTE(v54) = v26 == 0;
  uint64_t v33 = v50;
  sub_18D40A648();
  id v34 = objc_msgSend(a1, sel_userDefinedName);
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = sub_18D40A7F8();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  uint64_t v39 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t v40 = *(int *)(v39 + 20);
  int v41 = (uint64_t *)&v11[*(int *)(v39 + 24)];
  uint64_t v42 = v48;
  *(void *)double v11 = v49;
  *((void *)v11 + 1) = v42;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v11[v40], v33, v52);
  *int v41 = v36;
  v41[1] = v38;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v11, 0, 1, v39);
  sub_18D3EC3FC((uint64_t)v11, v53);
  return 1;
}

uint64_t sub_18D3EC1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3EC208(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *keypath_get_selector_identifier()
{
  return sel_identifier;
}

void sub_18D3EC274(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_18D3EC294(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_userDefinedName()
{
  return sel_userDefinedName;
}

char *keypath_get_selector_voiceId()
{
  return sel_voiceId;
}

void sub_18D3EC2C0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_18D3EC2E0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void keypath_setTm(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  id v7 = (id)sub_18D40A7C8();
  objc_msgSend(v6, *a5, v7);
}

char *keypath_get_selector_selection()
{
  return sel_selection;
}

id sub_18D3EC35C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_selection);
  *a2 = result;
  return result;
}

id sub_18D3EC398(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSelection_, *a1);
}

uint64_t type metadata accessor for AXVoiceOverVoiceRotorItem(uint64_t a1)
{
  return sub_18D3EC3C0(a1, &qword_1E91B2788);
}

uint64_t sub_18D3EC3C0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_18D3EC3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Dictionary<>.voiceSelection(forLanguage:withResolver:exists:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[6] = a5;
  v6[7] = a6;
  void v6[4] = a3;
  void v6[5] = a4;
  _DWORD v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = sub_18D40A338();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = sub_18D40A358();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v6[14] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3EC5B8, 0, 0);
}

uint64_t sub_18D3EC5B8()
{
  uint64_t v1 = v0[14];
  if (v0[4])
  {
    uint64_t v3 = v0[12];
    uint64_t v2 = v0[13];
    uint64_t v5 = v0[10];
    uint64_t v4 = v0[11];
    uint64_t v6 = v0[8];
    uint64_t v7 = v0[9];
    swift_bridgeObjectRetain();
    sub_18D40A2F8();
    sub_18D40A348();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    sub_18D40A328();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    uint64_t v8 = sub_18D40A2C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_18D3EC738;
  uint64_t v10 = v0[14];
  uint64_t v11 = v0[6];
  uint64_t v12 = v0[7];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[2];
  return Dictionary<>.selection(forLanguage:withResolver:exists:)(v14, v10, v13, v11, v12);
}

uint64_t sub_18D3EC738()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3EC834, 0, 0);
}

uint64_t sub_18D3EC834()
{
  sub_18D3C3EE8(*(void *)(v0 + 112), &qword_1E91B1538);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Dictionary<>.set(voiceSelection:forLanguage:withResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  void v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v5[7] = swift_task_alloc();
  uint64_t v6 = sub_18D40A2C8();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  uint64_t v7 = sub_18D40A338();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v8 = sub_18D40A358();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3ECAC4, 0, 0);
}

uint64_t sub_18D3ECAC4()
{
  if (v0[4])
  {
    uint64_t v2 = v0 + 19;
    uint64_t v1 = v0[19];
    uint64_t v3 = v0[8];
    uint64_t v4 = v0[9];
    swift_bridgeObjectRetain();
    sub_18D40A2D8();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[8];
    uint64_t v7 = v0[9];
    sub_18D3C3FF4(v0[19], v5, &qword_1E91B1538);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_18D3C3EE8(*v2, &qword_1E91B1538);
      uint64_t v2 = v0 + 18;
    }
    else
    {
      uint64_t v12 = v0[10];
      uint64_t v11 = v0[11];
      uint64_t v13 = v0[8];
      uint64_t v14 = v0[9];
      uint64_t v15 = v0[7];
      uint64_t v16 = v0[2];
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 32))(v11, v0[18], v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
      sub_18D3C3FF4(v16, v15, &qword_1E91B2118);
      sub_18D3ED7D8(v15, v12);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
    }
    sub_18D3C3EE8(*v2, &qword_1E91B1538);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  else
  {
    uint64_t v18 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[20] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_18D3ECD5C;
    uint64_t v9 = v0[17];
    return v18(v9);
  }
}

uint64_t sub_18D3ECD5C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3ECE58, 0, 0);
}

uint64_t sub_18D3ECE58()
{
  uint64_t v1 = v0 + 19;
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[13];
  sub_18D40A348();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  uint64_t v8 = v0[18];
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[9];
  sub_18D3C3FF4(v0[19], v8, &qword_1E91B1538);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_18D3C3EE8(*v1, &qword_1E91B1538);
    uint64_t v1 = v0 + 18;
  }
  else
  {
    uint64_t v12 = v0[10];
    uint64_t v11 = v0[11];
    uint64_t v13 = v0[8];
    uint64_t v14 = v0[9];
    uint64_t v15 = v0[7];
    uint64_t v16 = v0[2];
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 32))(v11, v0[18], v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
    sub_18D3C3FF4(v16, v15, &qword_1E91B2118);
    sub_18D3ED7D8(v15, v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
  }
  sub_18D3C3EE8(*v1, &qword_1E91B1538);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t Dictionary<>.set(voiceId:forLanguage:withResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[6] = a5;
  v6[7] = v5;
  void v6[4] = a3;
  void v6[5] = a4;
  _DWORD v6[2] = a1;
  v6[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v6[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  uint64_t v7 = sub_18D40A2C8();
  v6[13] = v7;
  v6[14] = *(void *)(v7 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3ED1C0, 0, 0);
}

uint64_t sub_18D3ED1C0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_18D40A2D8();
  if (v1)
  {
    swift_bridgeObjectRetain();
    if (sub_18D40A838() >= 1)
    {
      uint64_t v2 = *(void *)(v0 + 128);
      uint64_t v3 = *(void *)(v0 + 104);
      uint64_t v4 = *(void *)(v0 + 112);
      uint64_t v5 = *(void *)(v0 + 64);
      uint64_t v6 = **(void **)(v0 + 56);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      *(void *)(v0 + 136) = v7;
      *(void *)(v0 + 144) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v7(v5, v2, v3);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_18D3ED42C;
      uint64_t v9 = *(void *)(v0 + 96);
      uint64_t v10 = *(void *)(v0 + 64);
      uint64_t v11 = *(void *)(v0 + 48);
      return Dictionary<>.selection(forLanguage:withResolver:exists:)(v9, v10, v11, 0, v6);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v16 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v13, v15);
  uint64_t v18 = sub_18D40A678();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  sub_18D3ED7D8(v17, v14);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_18D3ED42C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  sub_18D3C3EE8(v1, &qword_1E91B1538);
  return MEMORY[0x1F4188298](sub_18D3ED54C, 0, 0);
}

uint64_t sub_18D3ED54C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  sub_18D3C3FF4(*(void *)(v0 + 96), v1, &qword_1E91B2118);
  uint64_t v2 = sub_18D40A678();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  int v5 = v4(v1, 1, v2);
  uint64_t v6 = *(void *)(v0 + 80);
  if (v5 == 1)
  {
    swift_bridgeObjectRetain();
    sub_18D40A648();
    sub_18D3C3EE8(v6, &qword_1E91B2118);
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(v3 + 32))(*(void *)(v0 + 88), *(void *)(v0 + 80), v2);
  }
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  sub_18D3D609C(v8, v7);
  if (v4(v7, 1, v2)) {
    swift_bridgeObjectRelease();
  }
  else {
    sub_18D40A668();
  }
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136))(v10, v9, v11);
  sub_18D3C3FF4(v13, v14, &qword_1E91B2118);
  sub_18D3ED7D8(v14, v10);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
  sub_18D3C3EE8(v13, &qword_1E91B2118);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_18D3ED7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_18D40A678();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10) == 1)
  {
    sub_18D3C3EE8(a1, &qword_1E91B2118);
    sub_18D3F0CCC(a2, (uint64_t)v9);
    uint64_t v15 = sub_18D40A2C8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
    return sub_18D3C3EE8((uint64_t)v9, &qword_1E91B2118);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_18D3E60E8((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_18D40A2C8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  }
}

uint64_t sub_18D3EDA04(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_18D3EA9D4((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_18D3E62EC(v7, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v6;
    swift_bridgeObjectRelease();
    return sub_18D3C3F44(a2);
  }
  else
  {
    sub_18D3C3EE8(a1, &qword_1EB34DC30);
    sub_18D3F0E9C(a2, v7);
    sub_18D3C3F44(a2);
    return sub_18D3C3EE8((uint64_t)v7, &qword_1EB34DC30);
  }
}

uint64_t Dictionary<>.selection(forLanguage:withResolver:exists:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = sub_18D40A4B8();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1540);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  uint64_t v7 = sub_18D40A4E8();
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v8 = sub_18D40A678();
  v5[22] = v8;
  v5[23] = *(void *)(v8 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  uint64_t v9 = sub_18D40A338();
  v5[26] = v9;
  v5[27] = *(void *)(v9 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  uint64_t v10 = sub_18D40A358();
  v5[30] = v10;
  v5[31] = *(void *)(v10 - 8);
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  uint64_t v11 = sub_18D40A2C8();
  v5[39] = v11;
  v5[40] = *(void *)(v11 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3EDE74, 0, 0);
}

uint64_t sub_18D3EDE74()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  sub_18D3C3FF4(v0[8], v3, &qword_1E91B1538);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[45] = (uint64_t)v4;
  v0[46] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v1) == 1)
  {
    sub_18D3C3EE8(v0[38], &qword_1E91B1538);
    uint64_t v15 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    int v5 = (void *)swift_task_alloc();
    v0[56] = (uint64_t)v5;
    *int v5 = v0;
    v5[1] = sub_18D3EED84;
    uint64_t v6 = v0[32];
    return v15(v6);
  }
  else
  {
    uint64_t v8 = v0[44];
    uint64_t v9 = v0[39];
    uint64_t v10 = v0[40];
    uint64_t v11 = v0[38];
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    v0[47] = (uint64_t)v12;
    v0[48] = (v10 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v12(v8, v11, v9);
    sub_18D40A3E8();
    sub_18D3F1D5C(&qword_1E91B2380, MEMORY[0x1E4FAF200]);
    uint64_t v14 = sub_18D40A8F8();
    return MEMORY[0x1F4188298](sub_18D3EE040, v14, v13);
  }
}

uint64_t sub_18D3EE040()
{
  sub_18D40A3A8();
  return MEMORY[0x1F4188298](sub_18D3EE0AC, 0, 0);
}

uint64_t sub_18D3EE0AC()
{
  uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[45];
  uint64_t v36 = v0[42];
  uint64_t v1 = v0[40];
  uint64_t v34 = v0[44];
  uint64_t v35 = v0[39];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  uint64_t v31 = v0[30];
  uint64_t v32 = v0[37];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[27];
  uint64_t v33 = v0[26];
  sub_18D40A2B8();
  sub_18D40A2F8();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  sub_18D40A378();
  sub_18D40A2E8();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[49] = v6;
  v0[50] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v31);
  sub_18D40A348();
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v36, v34, v35);
  int v7 = v37(v32, 1, v35);
  uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))v0[47];
  uint64_t v9 = v0[43];
  if (v7 == 1)
  {
    uint64_t v10 = v0[37];
    v8(v0[43], v0[42], v0[39]);
    sub_18D3C3EE8(v10, &qword_1E91B1538);
  }
  else
  {
    uint64_t v11 = v0[39];
    uint64_t v12 = v0[37];
    (*(void (**)(void, uint64_t))(v0[40] + 8))(v0[42], v11);
    v8(v9, v12, v11);
  }
  if (*(void *)(v0[11] + 16))
  {
    unint64_t v13 = sub_18D3F0A5C(v0[43]);
    if (v14)
    {
      uint64_t v15 = v0[24];
      uint64_t v16 = v0[25];
      uint64_t v17 = v0[22];
      uint64_t v18 = v0[23];
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16))(v15, *(void *)(v0[11] + 56) + *(void *)(v18 + 72) * v13, v17);
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
      v0[51] = v19;
      v0[52] = (v18 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v19(v16, v15, v17);
      uint64_t v20 = sub_18D40A658();
      v0[53] = v21;
      if (v21)
      {
        uint64_t v22 = v20;
        uint64_t v23 = v21;
        id v24 = (unsigned char *)v0[10];
        if (v24) {
          unsigned char *v24 = 1;
        }
        uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1E8] + MEMORY[0x1E4FAF1E8]);
        id v25 = (void *)swift_task_alloc();
        v0[54] = v25;
        void *v25 = v0;
        v25[1] = sub_18D3EE43C;
        uint64_t v26 = v0[17];
        return v38(v26, v22, v23);
      }
      (*(void (**)(void, void))(v0[23] + 8))(v0[25], v0[22]);
    }
  }
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
  id v28 = (void *)swift_task_alloc();
  v0[55] = v28;
  void *v28 = v0;
  v28[1] = sub_18D3EE954;
  uint64_t v29 = v0[34];
  uint64_t v30 = v0[16];
  return v39(v30, v29);
}

uint64_t sub_18D3EE43C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18D3EE554, 0, 0);
}

uint64_t sub_18D3EE554()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[25], v0[22]);
    sub_18D3C3EE8(v3, &qword_1E91B1540);
LABEL_8:
    id v27 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1F0] + MEMORY[0x1E4FAF1F0]);
    uint64_t v21 = (void *)swift_task_alloc();
    v0[55] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_18D3EE954;
    uint64_t v22 = v0[34];
    uint64_t v23 = v0[16];
    return v27(v23, v22);
  }
  uint64_t v4 = v0[21];
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v3, v1);
  sub_18D40A4C8();
  sub_18D40A4A8();
  sub_18D3F1D5C(&qword_1E91B2240, MEMORY[0x1E4FAF248]);
  char v9 = sub_18D40AAC8();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v6, v7);
  v10(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  if ((v9 & 1) == 0)
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[25], v0[22]);
    goto LABEL_8;
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v25 = v0[44];
  uint64_t v26 = (void (*)(uint64_t, uint64_t, uint64_t))v0[51];
  uint64_t v12 = v0[39];
  uint64_t v13 = v0[34];
  uint64_t v14 = v0[30];
  uint64_t v24 = v0[25];
  uint64_t v16 = v0[22];
  uint64_t v15 = v0[23];
  uint64_t v17 = v0[7];
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0[40] + 8);
  v18(v0[43], v12);
  v11(v13, v14);
  v18(v25, v12);
  v26(v17, v24, v16);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_18D3EE954()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3EEA50, 0, 0);
}

uint64_t sub_18D3EEA50()
{
  uint64_t v22 = (uint64_t)(v0 + 2);
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v18 = v0[34];
  uint64_t v7 = v0[30];
  uint64_t v8 = v0[23];
  uint64_t v20 = v0[44];
  uint64_t v21 = v0[22];
  if (v4 == 1)
  {
    uint64_t v9 = v0[7];
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v10(v0[43], v6);
    v19(v18, v7);
    v10(v20, v6);
    sub_18D3C3EE8(v3, &qword_1E91B1540);
    __swift_destroy_boxed_opaque_existential_1(v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, 1, 1, v21);
  }
  else
  {
    uint64_t v11 = v0[20];
    uint64_t v16 = v0[43];
    uint64_t v17 = v0[30];
    uint64_t v12 = v0[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v11, v3, v1);
    sub_18D40A428();
    sub_18D40A648();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v1);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v13(v16, v6);
    v19(v18, v17);
    v13(v20, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v21);
    __swift_destroy_boxed_opaque_existential_1(v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_18D3EED84()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3EEE80, 0, 0);
}

uint64_t sub_18D3EEE80()
{
  uint64_t v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[45];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[36];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[26];
  sub_18D40A348();
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v1(v3, 1, v2) == 1)
  {
    sub_18D3C3EE8(v0[36], &qword_1E91B1538);
    sub_18D40AB58();
    swift_bridgeObjectRelease();
    sub_18D40A2A8();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    return sub_18D40AB98();
  }
  else
  {
    uint64_t v9 = v0[40];
    uint64_t v8 = v0[41];
    uint64_t v10 = v0[39];
    uint64_t v11 = v0[35];
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 32))(v8, v0[36], v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v8, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[57] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_18D3EF0C4;
    uint64_t v13 = v0[35];
    uint64_t v14 = v0[11];
    uint64_t v15 = v0[9];
    uint64_t v16 = v0[7];
    return Dictionary<>.selection(forLanguage:withResolver:exists:)(v16, v13, v15, 0, v14);
  }
}

uint64_t sub_18D3EF0C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 280);
  swift_task_dealloc();
  sub_18D3C3EE8(v1, &qword_1E91B1538);
  return MEMORY[0x1F4188298](sub_18D3EF1E4, 0, 0);
}

uint64_t sub_18D3EF1E4()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  (*(void (**)(void, void))(v0[40] + 8))(v0[41], v0[39]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AsyncStream<A>.defaultVoiceSelectionStream(withResolver:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2388);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2398);
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4FBD028], v3);
  return sub_18D40A9B8();
}

uint64_t AsyncStream<A>.voiceSelectionStream(for:withResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18D40A2C8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)(v9 + ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2390);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  sub_18D40A988();
  return swift_release();
}

uint64_t sub_18D3EF634(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  void v4[4] = a4;
  v4[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *a2;
  void v4[5] = v6;
  void v4[6] = v7;
  return MEMORY[0x1F4188298](sub_18D3EF6D4, 0, 0);
}

uint64_t sub_18D3EF6D4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  uint64_t v3 = sub_18D40A2C8();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_18D3EF810;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[2];
  return Dictionary<>.selection(forLanguage:withResolver:exists:)(v9, v6, v8, 0, v7);
}

uint64_t sub_18D3EF810()
{
  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_18D3C3EE8(v1, &qword_1E91B1538);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_18D3EF930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  v23[1] = a1;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27C0);
  uint64_t v5 = *(void *)(v24 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v24, v7);
  v23[0] = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2390);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v12 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2148);
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18D40A918();
  uint64_t v17 = sub_18D40A938();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
  uint64_t v18 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v24);
  unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v20 = (v10 + *(unsigned __int8 *)(v5 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = 0;
  *((void *)v21 + 3) = 0;
  *((void *)v21 + 4) = v25;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v21[v19], v12, v8);
  (*(void (**)(char *, void, uint64_t))(v5 + 32))(&v21[v20], v23[0], v18);
  swift_retain();
  sub_18D3F08D4((uint64_t)v16, (uint64_t)&unk_1E91B27D0, (uint64_t)v21);
  return sub_18D40A948();
}

uint64_t sub_18D3EFC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  void v6[4] = a6;
  _DWORD v6[2] = a4;
  void v6[5] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2398);
  void v6[6] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27E0);
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27E8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27F0);
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v9 = sub_18D40A2C8();
  v6[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[15] = v10;
  v6[16] = *(void *)(v10 + 64);
  v6[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v6[18] = swift_task_alloc();
  uint64_t v11 = sub_18D40A338();
  v6[19] = v11;
  v6[20] = *(void *)(v11 - 8);
  v6[21] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27F8);
  v6[22] = v12;
  v6[23] = *(void *)(v12 - 8);
  v6[24] = swift_task_alloc();
  uint64_t v13 = sub_18D40A358();
  v6[25] = v13;
  v6[26] = *(void *)(v13 - 8);
  v6[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  v6[28] = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1408);
  v6[29] = v14;
  v6[30] = *(void *)(v14 - 8);
  v6[31] = swift_task_alloc();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1400);
  v6[32] = v15;
  v6[33] = *(void *)(v15 - 8);
  v6[34] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3F0044, 0, 0);
}

uint64_t sub_18D3F0044()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  sub_18D40A3B8();
  sub_18D40A998();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[35] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_18D3F013C;
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[28];
  return MEMORY[0x1F4187D58](v6, 0, 0, v5);
}

uint64_t sub_18D3F013C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3F0238, 0, 0);
}

uint64_t sub_18D3F0238()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[26];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[33] + 8))(v0[34], v0[32]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v7 = v0[20];
    uint64_t v6 = v0[21];
    uint64_t v9 = v0[18];
    uint64_t v8 = v0[19];
    uint64_t v10 = v0[15];
    uint64_t v25 = v0[14];
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[27], v1, v2);
    sub_18D40A348();
    sub_18D40A328();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v25);
    if (v11 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v16 = v0[17];
      uint64_t v15 = v0[18];
      uint64_t v17 = v0[15];
      uint64_t v18 = v0[16];
      uint64_t v19 = v0[14];
      uint64_t v20 = v0[2];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v19);
      unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      unint64_t v22 = (v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v23 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v23 + v21, v16, v19);
      *(void *)(v23 + v22) = v20;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2390);
      v0[36] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
      sub_18D40A988();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v19);
      sub_18D40A998();
      uint64_t v24 = (void *)swift_task_alloc();
      v0[37] = v24;
      void *v24 = v0;
      v24[1] = sub_18D3F05B0;
      uint64_t v11 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    return MEMORY[0x1F4187D58](v11, v12, v13, v14);
  }
}

uint64_t sub_18D3F05B0()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18D3F06AC, 0, 0);
}

uint64_t sub_18D3F06AC()
{
  uint64_t v1 = v0[10];
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0[36] - 8) + 48))(v1, 1);
  uint64_t v4 = v0[26];
  uint64_t v3 = v0[27];
  uint64_t v5 = v0[25];
  if (v2 == 1)
  {
    uint64_t v6 = v0[23];
    uint64_t v7 = v0[24];
    uint64_t v8 = v0[22];
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[35] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_18D3F013C;
    uint64_t v10 = v0[32];
    uint64_t v11 = v0[28];
  }
  else
  {
    uint64_t v13 = v0[8];
    uint64_t v12 = v0[9];
    uint64_t v17 = v0[7];
    uint64_t v14 = v0[6] + *(int *)(v0[5] + 48);
    (*(void (**)(void, uint64_t, uint64_t))(v4 + 16))(v0[6], v3, v5);
    sub_18D3F1CF4(v1, v14);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27C0);
    sub_18D40A958();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v17);
    uint64_t v15 = (void *)swift_task_alloc();
    v0[37] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_18D3F05B0;
    uint64_t v11 = v0[10];
    uint64_t v10 = v0[11];
  }
  return MEMORY[0x1F4187D58](v11, 0, 0, v10);
}

uint64_t sub_18D3F08D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_18D40A938();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_18D40A928();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_18D3C3EE8(a1, &qword_1E91B2148);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_18D40A8F8();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

unint64_t sub_18D3F0A5C(uint64_t a1)
{
  sub_18D40A2C8();
  sub_18D3F1D5C(&qword_1E91B1528, MEMORY[0x1E4F279D8]);
  uint64_t v2 = sub_18D40A798();

  return sub_18D3F14AC(a1, v2);
}

uint64_t sub_18D3F0AF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(void *)(sub_18D40A2C8() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v2 + v7;
  uint64_t v9 = *(void *)(v2 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_18D3C40D8;
  return sub_18D3EF634(a1, a2, v8, v9);
}

unint64_t sub_18D3F0C10(uint64_t a1, uint64_t a2)
{
  sub_18D40ACD8();
  sub_18D40A828();
  uint64_t v4 = sub_18D40AD18();

  return sub_18D3F166C(a1, a2, v4);
}

unint64_t sub_18D3F0C88(uint64_t a1)
{
  uint64_t v2 = sub_18D40AB08();

  return sub_18D3F1750(a1, v2);
}

uint64_t sub_18D3F0CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_18D3F0A5C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_18D3F7BC4();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_18D40A2C8();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_18D40A678();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_18D3F0F98(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_18D40A678();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double sub_18D3F0E9C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_18D3F0C88(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_18D3F811C();
      uint64_t v9 = v11;
    }
    sub_18D3C3F44(*(void *)(v9 + 48) + 40 * v6);
    sub_18D3EA9D4((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_18D3F12E0(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_18D3F0F98(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18D40A2C8();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = sub_18D40AAE8();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v40 = (result + 1) & v13;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v14 = v5 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v41 = v14;
      uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      uint64_t v39 = v15;
      uint64_t v37 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v12;
        v39(v9, *(void *)(a2 + 48) + v16 * v12, v4);
        sub_18D3F1D5C(&qword_1E91B1528, MEMORY[0x1E4F279D8]);
        uint64_t v20 = sub_18D40A798();
        unint64_t result = (*v38)(v9, v4);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v40)
        {
          if (v21 >= v40 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(sub_18D40A678() - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t result = v24 + v25 * a1;
            int64_t v27 = v25 * v12;
            unint64_t v28 = v24 + v25 * v12 + v25;
            BOOL v29 = v26 < v27 || result >= v28;
            uint64_t v10 = v17;
            if (v29)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
              uint64_t v13 = v37;
            }
            else
            {
              a1 = v12;
              uint64_t v13 = v37;
              if (v26 != v27)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v40 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  uint64_t *v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_18D3F12E0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_18D40AAE8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_18D3DC290(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        uint64_t v10 = sub_18D40AB08();
        unint64_t result = sub_18D3C3F44((uint64_t)v28);
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_18D3F14AC(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = sub_18D40A2C8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    unint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      sub_18D3F1D5C(&qword_1E91B1530, MEMORY[0x1E4F279D8]);
      char v16 = sub_18D40A7B8();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_18D3F166C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_18D40ACA8() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_18D40ACA8() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_18D3F1750(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_18D3DC290(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x192F9C390](v9, a1);
      sub_18D3C3F44((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_18D3F1818()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2390);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27C0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x1F4186498](v0, v10, v11);
}

uint64_t sub_18D3F1980(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2390) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27C0) - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_18D3C2CDC;
  return sub_18D3EFC1C(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_18D3F1AE8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B27D8);
  uint64_t v2 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v3 = MEMORY[0x1E4FBC0F0];

  return MEMORY[0x1F4187D98](v0, v2, v1, v3);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = sub_18D40A2C8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t sub_18D3F1BDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(void *)(sub_18D40A2C8() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v2 + v7;
  uint64_t v9 = *(void *)(v2 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_18D3C2CDC;
  return sub_18D3EF634(a1, a2, v8, v9);
}

uint64_t sub_18D3F1CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3F1D5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.voiceId.getter()
{
  return sub_18D40A658();
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem()
{
  uint64_t result = qword_1E91B2850;
  if (!qword_1E91B2850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.init(id:selection:userDefinedName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t v13 = (void *)((char *)a6 + *(int *)(v12 + 24));
  *a6 = a1;
  a6[1] = a2;
  uint64_t v14 = (char *)a6 + *(int *)(v12 + 20);
  uint64_t v15 = sub_18D40A678();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a3, v15);
  *uint64_t v13 = a4;
  v13[1] = a5;
  return result;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.id.modify())()
{
  return nullsub_1;
}

uint64_t sub_18D3F1F50()
{
  return sub_18D40A668();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.voiceId.setter()
{
  return sub_18D40A668();
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.voiceId.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 20);
  *(void *)a1 = sub_18D40A658();
  *(void *)(a1 + _Block_object_dispose(&STACK[0x240], 8) = v3;
  return sub_18D3F2044;
}

uint64_t sub_18D3F2044(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_18D40A668();
  }
  swift_bridgeObjectRetain();
  sub_18D40A668();

  return swift_bridgeObjectRelease();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.selection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 20);
  uint64_t v4 = sub_18D40A678();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.selection.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 20);
  uint64_t v4 = sub_18D40A678();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.selection.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.userDefinedName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.userDefinedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AXPreferences.VoiceOver.VoiceRotorItem.userDefinedName.modify())()
{
  return nullsub_1;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.init(id:voiceId:speechRate:speechPitch:voiceSettings:userDefinedName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X7>, void *a4@<X8>, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t result = sub_18D40A648();
  uint64_t v10 = (void *)((char *)a4 + *(int *)(v8 + 24));
  *a4 = a1;
  a4[1] = a2;
  *uint64_t v10 = a3;
  v10[1] = a5;
  return result;
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.typeKey.getter()
{
  swift_beginAccess();
  uint64_t v0 = qword_1E91B2808;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.typeKey.setter(uint64_t a1, char *a2)
{
  qword_1E91B2808 = a1;
  off_1E91B2810 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.VoiceRotorItem.typeKey.modify())()
{
  return j_j__swift_endAccess;
}

void sub_18D3F24A0()
{
  qword_1E91B2818 = MEMORY[0x1E4FBC860];
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.migrations.getter()
{
  if (qword_1E91B2040 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AXPreferences.VoiceOver.VoiceRotorItem.migrations.setter(uint64_t a1)
{
  if (qword_1E91B2040 != -1) {
    swift_once();
  }
  swift_beginAccess();
  qword_1E91B2818 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AXPreferences.VoiceOver.VoiceRotorItem.migrations.modify())()
{
  if (qword_1E91B2040 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_18D40A828();
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  sub_18D40A678();
  sub_18D3F34B4(&qword_1E91B2660, MEMORY[0x1E4F47EA0]);
  sub_18D40A7A8();
  if (!*(void *)(v0 + *(int *)(v1 + 24) + 8)) {
    return sub_18D40ACF8();
  }
  sub_18D40ACF8();
  swift_bridgeObjectRetain();
  sub_18D40A828();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18D3F2764(char a1)
{
  return qword_18D431D08[a1];
}

uint64_t sub_18D3F2784()
{
  return sub_18D3F2764(*v0);
}

uint64_t sub_18D3F278C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18D3F3E78(a1, a2);
  *a3 = result;
  return result;
}

void sub_18D3F27B4(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_18D3F27C0(uint64_t a1)
{
  unint64_t v2 = sub_18D3F3320();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18D3F27FC(uint64_t a1)
{
  unint64_t v2 = sub_18D3F3320();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2820);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  unint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18D3F3320();
  sub_18D40AD38();
  v9[15] = 0;
  sub_18D40AC88();
  if (!v1)
  {
    type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    v9[14] = 1;
    sub_18D40A678();
    sub_18D3F34B4(&qword_1E91B2678, MEMORY[0x1E4F47EA0]);
    sub_18D40AC98();
    v9[13] = 2;
    sub_18D40AC58();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.hashValue.getter()
{
  sub_18D40ACD8();
  swift_bridgeObjectRetain();
  sub_18D40A828();
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  sub_18D40A678();
  sub_18D3F34B4(&qword_1E91B2660, MEMORY[0x1E4F47EA0]);
  sub_18D40A7A8();
  if (*(void *)(v0 + *(int *)(v1 + 24) + 8))
  {
    sub_18D40ACF8();
    swift_bridgeObjectRetain();
    sub_18D40A828();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18D40ACF8();
  }
  return sub_18D40AD18();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v4 = sub_18D40A678();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  uint64_t v36 = v5;
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2830);
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37, v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t v14 = MEMORY[0x1F4188790](v12, v13);
  char v16 = (uint64_t *)((char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = (char *)v16 + *(int *)(v14 + 24);
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  uint64_t v38 = v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18D3F3320();
  sub_18D40AD28();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = (uint64_t)a1;
    uint64_t v31 = v12;
    uint64_t v32 = v16;
    uint64_t v19 = v34;
    uint64_t v20 = v35;
    uint64_t v21 = v36;
    char v41 = 0;
    uint64_t v22 = sub_18D40AC38();
    uint64_t v23 = v32;
    uint64_t *v32 = v22;
    v23[1] = v24;
    char v40 = 1;
    sub_18D3F34B4(&qword_1E91B2690, MEMORY[0x1E4F47EA0]);
    sub_18D40AC48();
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))((uint64_t)v32 + *(int *)(v31 + 20), v8, v20);
    char v39 = 2;
    uint64_t v25 = sub_18D40AC08();
    uint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v37);
    unint64_t v28 = (uint64_t *)v38;
    swift_bridgeObjectRelease();
    uint64_t *v28 = v25;
    v28[1] = v27;
    BOOL v29 = v32;
    sub_18D3C9168((uint64_t)v32, v33);
    __swift_destroy_boxed_opaque_existential_1(v18);
    return sub_18D3F3374((uint64_t)v29);
  }
}

uint64_t sub_18D3F2F14()
{
  swift_beginAccess();
  uint64_t v0 = qword_1E91B2808;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_18D3F2F68()
{
  if (qword_1E91B2040 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_18D3F2FE0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18D3F2FF0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_18D40A828();
  swift_bridgeObjectRelease();
  sub_18D40A678();
  sub_18D3F34B4(&qword_1E91B2660, MEMORY[0x1E4F47EA0]);
  sub_18D40A7A8();
  if (!*(void *)(v2 + *(int *)(a2 + 24) + 8)) {
    return sub_18D40ACF8();
  }
  sub_18D40ACF8();
  swift_bridgeObjectRetain();
  sub_18D40A828();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18D3F3114(uint64_t a1, uint64_t a2)
{
  sub_18D40ACD8();
  swift_bridgeObjectRetain();
  sub_18D40A828();
  swift_bridgeObjectRelease();
  sub_18D40A678();
  sub_18D3F34B4(&qword_1E91B2660, MEMORY[0x1E4F47EA0]);
  sub_18D40A7A8();
  if (*(void *)(v2 + *(int *)(a2 + 24) + 8))
  {
    sub_18D40ACF8();
    swift_bridgeObjectRetain();
    sub_18D40A828();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18D40ACF8();
  }
  return sub_18D40AD18();
}

uint64_t sub_18D3F3228@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AXPreferences.VoiceOver.VoiceRotorItem.init(from:)(a1, a2);
}

uint64_t sub_18D3F3240(void *a1)
{
  return AXPreferences.VoiceOver.VoiceRotorItem.encode(to:)(a1);
}

uint64_t _sSo13AXPreferencesC22AccessibilityUtilitiesE9VoiceOverC0D9RotorItemV2eeoiySbAG_AGtFZ_0(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_18D40ACA8(), result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
    if (MEMORY[0x192F9BE30]((char *)a1 + *(int *)(v7 + 20), (char *)a2 + *(int *)(v7 + 20)))
    {
      uint64_t v8 = *(int *)(v7 + 24);
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = *(void *)((char *)a1 + v8 + 8);
      uint64_t v11 = (void *)((char *)a2 + v8);
      uint64_t v12 = v11[1];
      if (v10)
      {
        if (v12)
        {
          BOOL v13 = *v9 == *v11 && v10 == v12;
          if (v13 || (sub_18D40ACA8() & 1) != 0) {
            return 1;
          }
        }
      }
      else if (!v12)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_18D3F3320()
{
  unint64_t result = qword_1E91B2828;
  if (!qword_1E91B2828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2828);
  }
  return result;
}

uint64_t sub_18D3F3374(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18D3F33D0()
{
  return sub_18D3F34B4(&qword_1E91B2838, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
}

uint64_t sub_18D3F3418()
{
  return sub_18D3F34B4(&qword_1E91B2840, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
}

uint64_t sub_18D3F3460()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t sub_18D3F346C()
{
  return sub_18D3F34B4(&qword_1E91B2848, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem);
}

uint64_t sub_18D3F34B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D3F34FC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t result = sub_18D40A658();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t *_s14VoiceRotorItemVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_18D40A678();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t _s14VoiceRotorItemVwxx(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_18D40A678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *_s14VoiceRotorItemVwcp(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_18D40A678();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

void *_s14VoiceRotorItemVwca(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18D40A678();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s14VoiceRotorItemVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18D40A678();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *_s14VoiceRotorItemVwta(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_18D40A678();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14VoiceRotorItemVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18D3F39D0);
}

uint64_t sub_18D3F39D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_18D40A678();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t _s14VoiceRotorItemVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18D3F3A94);
}

uint64_t sub_18D3F3A94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x240], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_18D40A678();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_18D3F3B3C()
{
  uint64_t result = sub_18D40A678();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s14VoiceRotorItemV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14VoiceRotorItemV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18D3F3D38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14VoiceRotorItemV10CodingKeysOMa()
{
  return &_s14VoiceRotorItemV10CodingKeysON;
}

unint64_t sub_18D3F3D74()
{
  unint64_t result = qword_1E91B2860;
  if (!qword_1E91B2860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2860);
  }
  return result;
}

unint64_t sub_18D3F3DCC()
{
  unint64_t result = qword_1E91B2868;
  if (!qword_1E91B2868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2868);
  }
  return result;
}

unint64_t sub_18D3F3E24()
{
  unint64_t result = qword_1E91B2870;
  if (!qword_1E91B2870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2870);
  }
  return result;
}

uint64_t sub_18D3F3E78(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F697463656C6573 && a2 == 0xE90000000000006ELL || (sub_18D40ACA8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6966654472657375 && a2 == 0xEF656D614E64656ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_18D40ACA8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

id sub_18D3F4008()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NPSObjc();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for NPSObjc()
{
  return self;
}

double sub_18D3F4060@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v5 = sub_18D40A578();
  uint64_t v6 = v4;
  if ((v5 != 0xD000000000000013 || v4 != 0x800000018D42F470)
    && (sub_18D40ACA8() & 1) == 0
    && (v5 != 0xD00000000000002BLL || v6 != 0x800000018D42F490)
    && (sub_18D40ACA8() & 1) == 0
    && (v5 != 0xD000000000000015 || v6 != 0x800000018D42F4C0)
    && (sub_18D40ACA8() & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
  id v7 = objc_allocWithZone((Class)AXNPSWrapper);
  int v8 = (void *)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_initWithDomain_, v8);

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_18D40A568();
  uint64_t v10 = (void *)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v9, sel_objectForKey_, v10);

  if (v11)
  {
    sub_18D40AAB8();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC30);
  uint64_t v14 = swift_allocObject();
  sub_18D3F4810((uint64_t)v13, v14 + 16);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_18D3F42DC()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

uint64_t type metadata accessor for NPSettingsStore()
{
  return self;
}

double sub_18D3F4310@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_18D3F4060(a1, a2);
}

void sub_18D3F432C(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v5 = sub_18D40A578();
  uint64_t v6 = v4;
  if ((v5 != 0xD000000000000013 || v4 != 0x800000018D42F470)
    && (sub_18D40ACA8() & 1) == 0
    && (v5 != 0xD00000000000002BLL || v6 != 0x800000018D42F490)
    && (sub_18D40ACA8() & 1) == 0
    && (v5 != 0xD000000000000015 || v6 != 0x800000018D42F4C0)
    && (sub_18D40ACA8() & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
  id v7 = objc_allocWithZone((Class)AXNPSWrapper);
  int v8 = (void *)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_initWithDomain_, v8);

  sub_18D3F4768(a1, (uint64_t)v20);
  if (v21)
  {
    uint64_t v10 = sub_18D40AAF8();
    sub_18D3C3F44((uint64_t)v20);
  }
  else
  {
    uint64_t v10 = 0;
  }
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_18D40A568();
  id v11 = (void *)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setObject_forKey_, v10, v11);
  swift_unknownObjectRelease();

  uint64_t v13 = sub_18D40A578();
  uint64_t v14 = v12;
  if ((v13 != 0xD000000000000013 || v12 != 0x800000018D42F470)
    && (sub_18D40ACA8() & 1) == 0
    && (v13 != 0xD00000000000002BLL || v14 != 0x800000018D42F490)
    && (sub_18D40ACA8() & 1) == 0
    && (v13 != 0xD000000000000015 || v14 != 0x800000018D42F4C0)
    && (sub_18D40ACA8() & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = self;
  uint64_t v16 = (void *)sub_18D40A7C8();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B14E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18D4310F0;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  *(void *)(inited + 32) = sub_18D40A568();
  *(void *)(inited + 40) = v18;
  sub_18D3DC1F4(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v19 = (void *)sub_18D40A9F8();
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_synchronizeNanoDomain_keys_, v16, v19);
}

uint64_t sub_18D3F4768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3F47D0()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18D3F4810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AXPreferences.AssistiveTouch.useNinePointCalibration.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__useNinePointCalibration);
}

void AXPreferences.AssistiveTouch.useNinePointCalibration.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.AssistiveTouch.useNinePointCalibration.modify(void *a1))()
{
  BOOL v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__useNinePointCalibration);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.AssistiveTouch.$useNinePointCalibration.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__useNinePointCalibration));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t sub_18D3F4944@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18D3F87C0();
  *a1 = result;
  return result;
}

uint64_t AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  sub_18D40A718();

  return v3;
}

void sub_18D3F49B4(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = objc_retain(*(id *)(*a1
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  sub_18D40A718();

  *a2 = v4;
}

void sub_18D3F4A08(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*a2
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
  swift_bridgeObjectRetain();
  id v3 = v2;
  sub_18D40A728();
}

void AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.setter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  sub_18D40A728();
}

uint64_t (*AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.AssistiveTouch.$defaultVoiceSelectionsByLanguage.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.AssistiveTouch.scannerSpeechEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
}

void AXPreferences.AssistiveTouch.scannerSpeechEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.AssistiveTouch.scannerSpeechEnabled.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.AssistiveTouch.$scannerSpeechEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.AssistiveTouch.scannerSpeechShouldSpeakTraits.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits);
}

void AXPreferences.AssistiveTouch.scannerSpeechShouldSpeakTraits.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.AssistiveTouch.scannerSpeechShouldSpeakTraits.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.AssistiveTouch.$scannerSpeechShouldSpeakTraits.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.AssistiveTouch.scannerSpeechIsInterruptedByScanning.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning);
}

void AXPreferences.AssistiveTouch.scannerSpeechIsInterruptedByScanning.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.AssistiveTouch.scannerSpeechIsInterruptedByScanning.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.AssistiveTouch.$scannerSpeechIsInterruptedByScanning.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.AssistiveTouch.eyeTrackingUseZoomForKeyboardKeys.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys);
}

void AXPreferences.AssistiveTouch.eyeTrackingUseZoomForKeyboardKeys.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.AssistiveTouch.eyeTrackingUseZoomForKeyboardKeys.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.AssistiveTouch.$eyeTrackingUseZoomForKeyboardKeys.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.AssistiveTouch.switchControlPointPickerModeEnabled.getter()
{
  return sub_18D3BCFC0(&OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__switchControlPointPickerModeEnabled);
}

void AXPreferences.AssistiveTouch.switchControlPointPickerModeEnabled.setter(uint64_t a1)
{
}

uint64_t (*AXPreferences.AssistiveTouch.switchControlPointPickerModeEnabled.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__switchControlPointPickerModeEnabled);
  v3[4] = v4;
  id v5 = v4;
  void v3[5] = sub_18D40A708();
  return sub_18D3BC7F0;
}

uint64_t AXPreferences.AssistiveTouch.$switchControlPointPickerModeEnabled.getter()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__switchControlPointPickerModeEnabled));
  uint64_t v2 = sub_18D40A738();

  return v2;
}

uint64_t AXPreferences.AssistiveTouch.speechVoiceIdentifier(forLanguage:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  v3[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3F4FEC, 0, 0);
}

uint64_t sub_18D3F4FEC()
{
  id v1 = objc_retain(*(id *)(v0[5]
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage));
  uint64_t v2 = (void *)sub_18D40A738();

  sub_18D40A6D8();
  uint64_t v3 = v0[2];
  v0[7] = v3;
  sub_18D40A3E8();
  uint64_t v4 = sub_18D40A3D8();
  v0[8] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[9] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_18D3F50F4;
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[3];
  uint64_t v8 = v0[4];
  return Dictionary<>.voiceSelection(forLanguage:withResolver:exists:)(v6, v7, v8, v4, 0, v3);
}

uint64_t sub_18D3F50F4()
{
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18D3CD99C, 0, 0);
}

uint64_t sub_18D3F53A4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = sub_18D40A7F8();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v3[4] = v7;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_18D3C097C;
  return AXPreferences.AssistiveTouch.speechVoiceIdentifier(forLanguage:)(a1, v7);
}

id AXPreferences.AssistiveTouch.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id AXPreferences.AssistiveTouch.init()()
{
  id v1 = v0;
  Objectint Type = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__useNinePointCalibration;
  uint64_t v8 = sub_18D40A6A8();
  id v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v6, 1, 1, v8);
  uint64_t v10 = v1;
  *(void *)&v1[v7] = sub_18D3F59A4(1, 0xD000000000000017, 0x800000018D42F500, 0, 0, 4, (uint64_t)v6, 0, 0);
  uint64_t v11 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage;
  unint64_t v12 = sub_18D3BF4CC(MEMORY[0x1E4FBC860]);
  v9(v6, 1, 1, v8);
  uint64_t v13 = sub_18D3F944C(v12, 0xD000000000000016, 0x800000018D42DE20, 0, 0, 6, (uint64_t)v6, (uint64_t)sub_18D3F4944, 0);
  swift_bridgeObjectRelease();
  *(void *)&v10[v11] = v13;
  uint64_t v14 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechEnabled;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v14] = sub_18D3F59A4(0, 0xD000000000000014, 0x800000018D42F520, 0, 0, 1, (uint64_t)v6, 0, 0);
  uint64_t v15 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechShouldSpeakTraits;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v15] = sub_18D3F59A4(1, 0xD00000000000001ELL, 0x800000018D42F540, 0xD00000000000002FLL, 0x800000018D42F560, 4, (uint64_t)v6, 0, 0);
  uint64_t v16 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechIsInterruptedByScanning;
  uint64_t v17 = sub_18D40A7F8();
  uint64_t v19 = v18;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v16] = sub_18D3F59A4(1, 0xD000000000000024, 0x800000018D42F590, v17, v19, 4, (uint64_t)v6, 0, 0);
  uint64_t v20 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__eyeTrackingUseZoomForKeyboardKeys;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v20] = sub_18D3F59A4(1, 0xD000000000000021, 0x800000018D42F5C0, 0xD00000000000002FLL, 0x800000018D42F5F0, 4, (uint64_t)v6, 0, 0);
  uint64_t v21 = OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__switchControlPointPickerModeEnabled;
  v9(v6, 1, 1, v8);
  *(void *)&v10[v21] = sub_18D3F59A4(1, 0xD00000000000001DLL, 0x800000018D42F620, 0, 0, 4, (uint64_t)v6, 0, 0);

  v23.receiver = v10;
  v23.super_class = ObjectType;
  return objc_msgSendSuper2(&v23, sel_init);
}

id AXPreferences.AssistiveTouch.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18D3F59A4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a5;
  int v32 = a1;
  uint64_t v36 = a6;
  uint64_t v37 = a9;
  uint64_t v34 = sub_18D40A698();
  MEMORY[0x1F4188790](v34, v11);
  uint64_t v35 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_18D40A6A8();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v33 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v22);
  uint64_t v24 = (uint64_t *)((char *)&v30 - v23);
  sub_18D3BEB54(a7, (uint64_t)v16);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  uint64_t v38 = a8;
  uint64_t v39 = a7;
  if (v25 == 1)
  {
    v40[0] = 0;
    v40[1] = 0xE000000000000000;
    sub_18D40AB58();
    swift_bridgeObjectRelease();
    strcpy((char *)v40, "assistiveTouch");
    HIBYTE(v40[1]) = -18;
    sub_18D40A818();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    uint64_t v26 = v40[1];
    void *v24 = v40[0];
    v24[1] = v26;
    void v24[2] = 0;
    v24[3] = 0;
    (*(void (**)(void *, void, uint64_t))(v18 + 104))(v24, *MEMORY[0x1E4F47EE8], v17);
    sub_18D3C3EE8((uint64_t)v16, &qword_1E91B2098);
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v18 + 32))(v24, v16, v17);
  }
  char v27 = v32;
  if (!v31)
  {
    v40[0] = 0;
    v40[1] = 0xE000000000000000;
    sub_18D40AB58();
    swift_bridgeObjectRelease();
    strcpy((char *)v40, "AssistiveTouch");
    HIBYTE(v40[1]) = -18;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20F0);
  char v41 = v27 & 1;
  (*(void (**)(char *, void *, uint64_t))(v18 + 16))(v33, v24, v17);
  v40[0] = MEMORY[0x1E4FBC860];
  sub_18D3F9CA0(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  v40[3] = sub_18D40A558();
  v40[4] = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(v40);
  sub_18D40A548();
  uint64_t v28 = sub_18D40A6E8();
  sub_18D3C3EE8(v39, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v24, v17);
  return v28;
}

uint64_t sub_18D3F5E14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_18D3C40D8;
  return v6();
}

uint64_t sub_18D3F5EE0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_18D3C40D8;
  return v7();
}

uint64_t sub_18D3F5FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18D40A938();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_18D40A928();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_18D3C3EE8(a1, &qword_1E91B2148);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_18D40A8F8();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_18D3F6158(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_18D3F6234;
  return v6(a1);
}

uint64_t sub_18D3F6234()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_18D3F632C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_18D3F6400(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    Objectint Type = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_18D3C3F98((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    Objectint Type = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_18D3C3F98((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_18D3F6400(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_18D40AA98();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_18D3F65BC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_18D40AB78();
  if (!v8)
  {
    sub_18D40AB88();
    __break(1u);
LABEL_17:
    uint64_t result = sub_18D40ABD8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_18D3F65BC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_18D3F6654(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_18D3F6834(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_18D3F6834(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_18D3F6654(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_18D3F67CC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_18D40AB68();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_18D40AB88();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_18D40A858();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_18D40ABD8();
    __break(1u);
LABEL_14:
    uint64_t result = sub_18D40AB88();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_18D3F67CC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B28F0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_18D3F6834(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B28F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_18D40ABD8();
  __break(1u);
  return result;
}

uint64_t sub_18D3F6984(uint64_t a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v55 = sub_18D40A678();
  uint64_t v5 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55, v6);
  uint64_t v54 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_18D40A2C8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2238);
  int v52 = a2;
  uint64_t v14 = sub_18D40ABB8();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v46 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v47 = v5 + 16;
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  uint64_t v50 = v5;
  uint64_t v51 = v9;
  uint64_t v20 = (void (**)(char *, unint64_t, uint64_t))(v9 + 32);
  uint64_t v53 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v21 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45) {
      break;
    }
    uint64_t v28 = v46;
    unint64_t v29 = v46[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v29 = v46[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v44;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v45) {
              goto LABEL_34;
            }
            unint64_t v29 = v46[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    uint64_t v31 = *(void *)(v51 + 72);
    unint64_t v32 = *(void *)(v13 + 48) + v31 * v26;
    if (v52)
    {
      (*v20)(v12, v32, v8);
      uint64_t v33 = *(void *)(v13 + 56);
      uint64_t v34 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 32))(v54, v33 + v34 * v26, v55);
    }
    else
    {
      (*v48)(v12, v32, v8);
      uint64_t v35 = *(void *)(v13 + 56);
      uint64_t v34 = *(void *)(v50 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v54, v35 + v34 * v26, v55);
    }
    sub_18D3F9CA0(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
    uint64_t result = sub_18D40A798();
    uint64_t v36 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v21 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*v20)((char *)(*(void *)(v15 + 48) + v31 * v24), (unint64_t)v12, v8);
    uint64_t result = (*v53)(*(void *)(v15 + 56) + v34 * v24, v54, v55);
    ++*(void *)(v15 + 16);
  }
  swift_release();
  unint64_t v3 = v44;
  uint64_t v28 = v46;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v13 + 32);
  if (v43 >= 64) {
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v28 = -1 << v43;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v15;
  return result;
}

uint64_t sub_18D3F6E84(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B29B0);
  char v37 = a2;
  uint64_t v6 = sub_18D40ABB8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    int64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_18D40ACD8();
    sub_18D40A828();
    uint64_t result = sub_18D40AD18();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v1_Block_object_dispose(&STACK[0x240], 8) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_18D3F718C(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B28F8);
  uint64_t v6 = sub_18D40ABB8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_18D3EA9D4((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_18D3DC290(v25, (uint64_t)&v38);
      sub_18D3C3F98(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = sub_18D40AB08();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_18D3EA9D4(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_18D3F74A4(uint64_t a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v50 = sub_18D40A678();
  uint64_t v5 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50, v6);
  uint64_t v49 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2200);
  int v48 = a2;
  uint64_t v9 = sub_18D40ABB8();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v45 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v47 = v5;
  unint64_t v15 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v44) {
      break;
    }
    int64_t v24 = v45;
    unint64_t v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v25 = v45[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v43;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v44) {
              goto LABEL_34;
            }
            unint64_t v25 = v45[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v8 + 56);
    uint64_t v28 = v8;
    unint64_t v29 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v22);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = *(void *)(v47 + 72);
    uint64_t v33 = v27 + v32 * v22;
    if (v48)
    {
      (*v15)(v49, v33, v50);
    }
    else
    {
      (*v46)(v49, v33, v50);
      swift_bridgeObjectRetain();
    }
    sub_18D40ACD8();
    sub_18D40A828();
    uint64_t result = sub_18D40AD18();
    uint64_t v34 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v19 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = (void *)(*(void *)(v10 + 48) + 16 * v19);
    *unint64_t v20 = v30;
    v20[1] = v31;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v10 + 56) + v32 * v19, v49, v50);
    ++*(void *)(v10 + 16);
    uint64_t v8 = v28;
  }
  swift_release();
  unint64_t v3 = v43;
  int64_t v24 = v45;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v8 + 32);
  if (v41 >= 64) {
    bzero(v24, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v41;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

uint64_t sub_18D3F788C(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B21D8);
  char v42 = a2;
  uint64_t v6 = sub_18D40ABB8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v41 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v40) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v41 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    unint64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v5 + 56) + 40 * v20;
    if (v42)
    {
      long long v29 = *(_OWORD *)v28;
      long long v30 = *(_OWORD *)(v28 + 16);
      uint64_t v45 = *(void *)(v28 + 32);
      long long v43 = v29;
      long long v44 = v30;
    }
    else
    {
      sub_18D3DC290(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    sub_18D40ACD8();
    sub_18D40A828();
    uint64_t result = sub_18D40AD18();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v27;
    v15[1] = v26;
    uint64_t v16 = *(void *)(v7 + 56) + 40 * v14;
    long long v17 = v43;
    long long v18 = v44;
    *(void *)(v16 + 32) = v45;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v39;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void *sub_18D3F7BC4()
{
  uint64_t v44 = sub_18D40A678();
  uint64_t v47 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44, v1);
  long long v43 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_18D40A2C8();
  uint64_t v46 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42, v3);
  uint64_t v41 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2238);
  char v34 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_18D40ABA8();
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v48 = v6;
  if (!v7)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v33 = v48;
    unint64_t v32 = v34;
LABEL_25:
    uint64_t *v32 = v33;
    return result;
  }
  uint64_t v8 = v6;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v48;
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  uint64_t v45 = v5;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v35 = v5 + 64;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v15 = v47;
  uint64_t v16 = v46;
  uint64_t v39 = v47 + 16;
  uint64_t v40 = v46 + 16;
  uint64_t v37 = v47 + 32;
  uint64_t v38 = v46 + 32;
  long long v17 = v41;
  uint64_t v18 = v42;
  uint64_t v19 = v44;
  uint64_t v20 = v48;
  while (1)
  {
    if (v14)
    {
      unint64_t v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v49 = v11;
      unint64_t v22 = v21 | (v11 << 6);
      uint64_t v23 = v45;
      goto LABEL_9;
    }
    int64_t v28 = v11 + 1;
    uint64_t v23 = v45;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    int64_t v30 = v11 + 1;
    if (!v29)
    {
      int64_t v30 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v29 - 1) & v29;
    int64_t v49 = v30;
    unint64_t v22 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_9:
    unint64_t v24 = *(void *)(v16 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v17, *(void *)(v23 + 48) + v24, v18);
    unint64_t v25 = *(void *)(v15 + 72) * v22;
    unint64_t v26 = *(void *)(v23 + 56) + v25;
    uint64_t v27 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v43, v26, v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v20 + 48) + v24, v17, v18);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(void *)(v20 + 56) + v25, v27, v19);
    int64_t v11 = v49;
  }
  int64_t v31 = v28 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v32 = v34;
    uint64_t v33 = v48;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_18D3F7F6C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B29B0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18D40ABA8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 4 * v15;
    int v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_18D3F811C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B28F8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18D40ABA8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_18D3DC290(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_18D3C3F98(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_18D3EA9D4(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_18D3F8304()
{
  uint64_t v36 = sub_18D40A678();
  uint64_t v1 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36, v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2200);
  int64_t v31 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_18D40ABA8();
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v37 = v6;
  if (!v7)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v29 = v37;
    int64_t v28 = v31;
LABEL_25:
    uint64_t *v28 = v29;
    return result;
  }
  uint64_t v8 = v6;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v37;
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v32 = v5 + 64;
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v34 = v1 + 32;
  uint64_t v35 = v1 + 16;
  uint64_t v15 = v36;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v33) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      int64_t v11 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_23;
      }
      unint64_t v26 = *(void *)(v32 + 8 * v11);
      if (!v26) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v26 - 1) & v26;
    unint64_t v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 16 * v17;
    long long v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    unint64_t v22 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v4, *(void *)(v5 + 56) + v22, v15);
    uint64_t v23 = v37;
    int64_t v24 = (void *)(*(void *)(v37 + 48) + v18);
    void *v24 = v20;
    v24[1] = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v23 + 56) + v22, v4, v15);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    int64_t v28 = v31;
    uint64_t v29 = v37;
    goto LABEL_25;
  }
  unint64_t v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    int64_t v11 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v11);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_18D3F85C8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B21D8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18D40ABA8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v28 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_18D3DC290(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    uint64_t v22 = *(void *)(v4 + 56) + v20;
    uint64_t v23 = v30;
    long long v24 = v29[1];
    *(_OWORD *)uint64_t v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(void *)(v22 + 32) = v23;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_18D3F87C0()
{
  uint64_t v126 = sub_18D40A678();
  uint64_t v115 = *(void *)(v126 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v126, v0);
  uint64_t v125 = (char *)&v103 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v114 = (char *)&v103 - v4;
  uint64_t v118 = sub_18D40A2C8();
  uint64_t v107 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118, v5);
  uint64_t v127 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = MEMORY[0x1E4FBC868];
  id v116 = self;
  id v7 = objc_msgSend(v116, sel_sharedInstance);
  id v8 = objc_msgSend(v7, sel_selectedSpeechVoiceIdentifiersWithLanguageSource);

  if (!v8) {
    goto LABEL_82;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1518);
  uint64_t v9 = sub_18D40A778();

  uint64_t v10 = sub_18D40A7F8();
  if (!*(void *)(v9 + 16) || (unint64_t v12 = sub_18D3F0C10(v10, v11), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_82;
  }
  uint64_t v14 = *(void *)(*(void *)(v9 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v116, sel_sharedInstance);
  objc_msgSend(v15, sel_assistiveTouchScannerSpeechRate);
  double v17 = v16;

  int64_t v18 = 0;
  uint64_t v20 = *(void *)(v14 + 64);
  uint64_t v108 = v14 + 64;
  uint64_t v113 = v14;
  uint64_t v21 = 1 << *(unsigned char *)(v14 + 32);
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & v20;
  int64_t v109 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v112 = *MEMORY[0x1E4F481E0];
  uint64_t v106 = *MEMORY[0x1E4FAF2D0];
  *(float *)&unsigned int v19 = v17;
  uint64_t v111 = v19;
  uint64_t v117 = (void (**)(char *, char *, uint64_t))(v115 + 32);
  uint64_t v104 = v107 + 16;
  uint64_t v103 = v115 + 40;
  uint64_t v110 = (void (**)(uint64_t, uint64_t))(v107 + 8);
  uint64_t v105 = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    if (v23)
    {
      unint64_t v24 = __clz(__rbit64(v23));
      uint64_t v25 = (v23 - 1) & v23;
      int64_t v120 = v18;
      unint64_t v26 = v24 | (v18 << 6);
    }
    else
    {
      int64_t v27 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_92;
      }
      if (v27 >= v109) {
        goto LABEL_81;
      }
      unint64_t v28 = *(void *)(v108 + 8 * v27);
      int64_t v29 = v18 + 1;
      if (!v28)
      {
        int64_t v29 = v18 + 2;
        if (v18 + 2 >= v109) {
          goto LABEL_81;
        }
        unint64_t v28 = *(void *)(v108 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v18 + 3;
          if (v18 + 3 >= v109) {
            goto LABEL_81;
          }
          unint64_t v28 = *(void *)(v108 + 8 * v29);
          if (!v28)
          {
            uint64_t v30 = v18 + 4;
            if (v18 + 4 >= v109) {
              goto LABEL_81;
            }
            unint64_t v28 = *(void *)(v108 + 8 * v30);
            if (!v28)
            {
              while (1)
              {
                int64_t v29 = v30 + 1;
                if (__OFADD__(v30, 1)) {
                  goto LABEL_93;
                }
                if (v29 >= v109) {
                  break;
                }
                unint64_t v28 = *(void *)(v108 + 8 * v29);
                ++v30;
                if (v28) {
                  goto LABEL_25;
                }
              }
LABEL_81:
              swift_release();
LABEL_82:
              os_log_type_t v93 = sub_18D40AA28();
              char v94 = (id)AXTTSLogCommon();
              if (!v94) {
                goto LABEL_94;
              }
              uint64_t v95 = v94;
              os_log_type_t v96 = v93;
              if (os_log_type_enabled(v94, v93))
              {
                uint64_t v97 = (uint8_t *)swift_slowAlloc();
                uint64_t v98 = swift_slowAlloc();
                v132[0] = v98;
                *(_DWORD *)uint64_t v97 = 136315138;
                swift_beginAccess();
                sub_18D3F9CA0(&qword_1E91B1528, 255, MEMORY[0x1E4F279D8]);
                swift_bridgeObjectRetain();
                uint64_t v99 = sub_18D40A788();
                unint64_t v101 = v100;
                swift_bridgeObjectRelease();
                uint64_t v130 = sub_18D3F632C(v99, v101, v132);
                sub_18D40AA88();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_18D308000, v95, v96, "Migrating general selections to %s", v97, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x192F9F8A0](v98, -1, -1);
                MEMORY[0x192F9F8A0](v97, -1, -1);
              }

              swift_beginAccess();
              return v135;
            }
            int64_t v29 = v18 + 4;
          }
        }
      }
LABEL_25:
      uint64_t v25 = (v28 - 1) & v28;
      int64_t v120 = v29;
      unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    }
    uint64_t v31 = 16 * v26;
    uint64_t v32 = *(void *)(v113 + 56);
    int64_t v33 = (uint64_t *)(*(void *)(v113 + 48) + v31);
    uint64_t v34 = v33[1];
    uint64_t v121 = *v33;
    uint64_t v35 = (uint64_t *)(v32 + v31);
    uint64_t v37 = *v35;
    uint64_t v36 = v35[1];
    uint64_t v122 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v38 = objc_msgSend(v116, sel_sharedInstance, v103, v104, v105, v106);
    uint64_t v123 = v37;
    uint64_t v124 = v36;
    uint64_t v39 = (void *)sub_18D40A7C8();
    id v40 = objc_msgSend(v38, sel_customSettingsForVoice_sourceKey_, v39, v112);

    unint64_t v119 = v25;
    if (v40) {
      break;
    }
    long long v133 = 0u;
    long long v134 = 0u;
LABEL_67:
    sub_18D3C3EE8((uint64_t)&v133, &qword_1EB34DC30);
LABEL_68:
    uint64_t v77 = v127;
    sub_18D40A2D8();
    LOBYTE(v132[0]) = 1;
    uint64_t v78 = v114;
    sub_18D40A648();
    int v79 = *v117;
    (*v117)(v125, v78, v126);
    uint64_t v80 = v135;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v132[0] = v80;
    uint64_t v135 = 0x8000000000000000;
    unint64_t v83 = sub_18D3F0A5C(v77);
    uint64_t v84 = *(void *)(v80 + 16);
    BOOL v85 = (v82 & 1) == 0;
    uint64_t v86 = v84 + v85;
    if (__OFADD__(v84, v85)) {
      goto LABEL_89;
    }
    char v87 = v82;
    if (*(void *)(v80 + 24) >= v86)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v90 = (void *)v132[0];
        if (v82) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_18D3F7BC4();
        uint64_t v90 = (void *)v132[0];
        if (v87) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      sub_18D3F6984(v86, isUniquelyReferenced_nonNull_native);
      unint64_t v88 = sub_18D3F0A5C(v127);
      if ((v87 & 1) != (v89 & 1)) {
        goto LABEL_96;
      }
      unint64_t v83 = v88;
      uint64_t v90 = (void *)v132[0];
      if (v87)
      {
LABEL_8:
        (*(void (**)(unint64_t, char *, uint64_t))(v115 + 40))(v90[7] + *(void *)(v115 + 72) * v83, v125, v126);
        goto LABEL_9;
      }
    }
    v90[(v83 >> 6) + 8] |= 1 << v83;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v107 + 16))(v90[6] + *(void *)(v107 + 72) * v83, v127, v118);
    v79((char *)(v90[7] + *(void *)(v115 + 72) * v83), v125, v126);
    uint64_t v91 = v90[2];
    BOOL v75 = __OFADD__(v91, 1);
    uint64_t v92 = v91 + 1;
    if (v75) {
      goto LABEL_91;
    }
    v90[2] = v92;
LABEL_9:
    uint64_t v135 = v132[0];
    swift_bridgeObjectRelease();
    (*v110)(v127, v118);
    int64_t v18 = v120;
    unint64_t v23 = v119;
  }
  uint64_t v41 = sub_18D40A778();

  uint64_t v130 = sub_18D40A7F8();
  uint64_t v131 = v42;
  sub_18D40AB28();
  if (*(void *)(v41 + 16) && (unint64_t v43 = sub_18D3F0C88((uint64_t)v132), (v44 & 1) != 0))
  {
    sub_18D3C3F98(*(void *)(v41 + 56) + 32 * v43, (uint64_t)&v133);
  }
  else
  {
    long long v133 = 0u;
    long long v134 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_18D3C3F44((uint64_t)v132);
  if (!*((void *)&v134 + 1)) {
    goto LABEL_67;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2920);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_68;
  }
  int64_t v45 = 0;
  uint64_t v46 = v132[0];
  uint64_t v47 = *(void *)(v132[0] + 64);
  uint64_t v128 = v132[0] + 64;
  uint64_t v48 = 1 << *(unsigned char *)(v132[0] + 32);
  if (v48 < 64) {
    uint64_t v49 = ~(-1 << v48);
  }
  else {
    uint64_t v49 = -1;
  }
  unint64_t v50 = v49 & v47;
  int64_t v129 = (unint64_t)(v48 + 63) >> 6;
  uint64_t v51 = (void *)MEMORY[0x1E4FBC868];
  while (2)
  {
    if (v50)
    {
      unint64_t v52 = __clz(__rbit64(v50));
      v50 &= v50 - 1;
      unint64_t v53 = v52 | (v45 << 6);
    }
    else
    {
      int64_t v54 = v45 + 1;
      if (__OFADD__(v45, 1)) {
        goto LABEL_88;
      }
      if (v54 >= v129)
      {
LABEL_77:
        swift_release();
        goto LABEL_68;
      }
      unint64_t v55 = *(void *)(v128 + 8 * v54);
      ++v45;
      if (!v55)
      {
        int64_t v45 = v54 + 1;
        if (v54 + 1 >= v129) {
          goto LABEL_77;
        }
        unint64_t v55 = *(void *)(v128 + 8 * v45);
        if (!v55)
        {
          int64_t v45 = v54 + 2;
          if (v54 + 2 >= v129) {
            goto LABEL_77;
          }
          unint64_t v55 = *(void *)(v128 + 8 * v45);
          if (!v55)
          {
            int64_t v56 = v54 + 3;
            if (v56 >= v129) {
              goto LABEL_77;
            }
            unint64_t v55 = *(void *)(v128 + 8 * v56);
            if (!v55)
            {
              while (1)
              {
                int64_t v45 = v56 + 1;
                if (__OFADD__(v56, 1)) {
                  goto LABEL_90;
                }
                if (v45 >= v129) {
                  goto LABEL_77;
                }
                unint64_t v55 = *(void *)(v128 + 8 * v45);
                ++v56;
                if (v55) {
                  goto LABEL_54;
                }
              }
            }
            int64_t v45 = v56;
          }
        }
      }
LABEL_54:
      unint64_t v50 = (v55 - 1) & v55;
      unint64_t v53 = __clz(__rbit64(v55)) + (v45 << 6);
    }
    uint64_t v57 = (uint64_t *)(*(void *)(v46 + 48) + 16 * v53);
    uint64_t v59 = *v57;
    uint64_t v58 = v57[1];
    uint64_t v60 = *(void **)(*(void *)(v46 + 56) + 8 * v53);
    swift_bridgeObjectRetain();
    id v61 = v60;
    objc_msgSend(v61, sel_floatValue);
    int v63 = v62;
    char v64 = swift_isUniquelyReferenced_nonNull_native();
    v132[0] = (uint64_t)v51;
    unint64_t v66 = sub_18D3F0C10(v59, v58);
    uint64_t v67 = v51[2];
    BOOL v68 = (v65 & 1) == 0;
    uint64_t v69 = v67 + v68;
    if (!__OFADD__(v67, v68))
    {
      char v70 = v65;
      if (v51[3] >= v69)
      {
        if (v64)
        {
          uint64_t v51 = (void *)v132[0];
          if ((v65 & 1) == 0) {
            goto LABEL_62;
          }
        }
        else
        {
          sub_18D3F7F6C();
          uint64_t v51 = (void *)v132[0];
          if ((v70 & 1) == 0) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        sub_18D3F6E84(v69, v64);
        unint64_t v71 = sub_18D3F0C10(v59, v58);
        if ((v70 & 1) != (v72 & 1)) {
          goto LABEL_95;
        }
        unint64_t v66 = v71;
        uint64_t v51 = (void *)v132[0];
        if ((v70 & 1) == 0)
        {
LABEL_62:
          v51[(v66 >> 6) + 8] |= 1 << v66;
          BOOL v73 = (uint64_t *)(v51[6] + 16 * v66);
          *BOOL v73 = v59;
          v73[1] = v58;
          *(_DWORD *)(v51[7] + 4 * v66) = v63;
          uint64_t v74 = v51[2];
          BOOL v75 = __OFADD__(v74, 1);
          uint64_t v76 = v74 + 1;
          if (v75) {
            goto LABEL_87;
          }
          v51[2] = v76;
          swift_bridgeObjectRetain();
          goto LABEL_38;
        }
      }
      *(_DWORD *)(v51[7] + 4 * v66) = v63;
LABEL_38:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  sub_18D40ACC8();
  __break(1u);
LABEL_96:
  uint64_t result = sub_18D40ACC8();
  __break(1u);
  return result;
}

uint64_t sub_18D3F944C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a4;
  uint64_t v35 = a6;
  uint64_t v36 = a9;
  uint64_t v33 = sub_18D40A698();
  MEMORY[0x1F4188790](v33, v13);
  uint64_t v34 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2098);
  MEMORY[0x1F4188790](v15 - 8, v16);
  int64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_18D40A6A8();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v32 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v24);
  unint64_t v26 = (uint64_t *)((char *)&v31 - v25);
  sub_18D3BEB54(a7, (uint64_t)v18);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  uint64_t v37 = a8;
  uint64_t v38 = a7;
  if (v27 != 1)
  {
    (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v26, v18, v19);
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    v39[0] = 0;
    v39[1] = 0xE000000000000000;
    sub_18D40AB58();
    swift_bridgeObjectRelease();
    strcpy((char *)v39, "AssistiveTouch");
    HIBYTE(v39[1]) = -18;
    sub_18D40A818();
    swift_bridgeObjectRelease();
    sub_18D40A848();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v39[0] = 0;
  v39[1] = 0xE000000000000000;
  sub_18D40AB58();
  swift_bridgeObjectRelease();
  strcpy((char *)v39, "assistiveTouch");
  HIBYTE(v39[1]) = -18;
  sub_18D40A818();
  sub_18D40A848();
  swift_bridgeObjectRelease();
  uint64_t v28 = v39[1];
  *unint64_t v26 = v39[0];
  v26[1] = v28;
  void v26[2] = 0;
  v26[3] = 0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v26, *MEMORY[0x1E4F47EE8], v19);
  sub_18D3C3EE8((uint64_t)v18, &qword_1E91B2098);
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2220);
  v39[5] = a1;
  (*(void (**)(char *, void *, uint64_t))(v20 + 16))(v32, v26, v19);
  v39[0] = MEMORY[0x1E4FBC860];
  sub_18D3F9CA0(&qword_1E91B20D0, 255, MEMORY[0x1E4F47ED0]);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B20D8);
  sub_18D3BEC1C();
  sub_18D40AAD8();
  v39[3] = sub_18D40A558();
  v39[4] = MEMORY[0x1E4F47E70];
  __swift_allocate_boxed_opaque_existential_1(v39);
  sub_18D40A548();
  uint64_t v29 = sub_18D40A6E8();
  sub_18D3C3EE8(v38, &qword_1E91B2098);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v26, v19);
  return v29;
}

uint64_t sub_18D3F98B8(uint64_t a1, uint64_t a2)
{
  return sub_18D3F9CA0(&qword_1E91B28B8, a2, (void (*)(uint64_t))type metadata accessor for AXPreferences.AssistiveTouch);
}

uint64_t type metadata accessor for AXPreferences.AssistiveTouch()
{
  return self;
}

void sub_18D3F9924(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3F9944(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3F996C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3F998C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3F99AC(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3F99CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3F99EC(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3F9A0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3F9A2C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3F9A4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_18D3F9A6C(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_18D3F9A8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_18D3F9AAC()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18D3F9AF4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_18D3C40D8;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1E91B28C0 + dword_1E91B28C0);
  return v6(v2, v3, v4);
}

uint64_t sub_18D3F9BB0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18D3F9BE8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_18D3C2CDC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1E91B28E0 + dword_1E91B28E0);
  return v6(a1, v4);
}

uint64_t sub_18D3F9CA0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D3F9CE8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B29B0);
    uint64_t v2 = sub_18D40ABC8();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v13 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
LABEL_23:
    uint64_t v11 = *(void **)(*(void *)(a1 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    id v12 = v11;
    MEMORY[0x192F9C260]();

    swift_bridgeObjectRelease();
    sub_18D3FE6E8();
    swift_release();
    return 0;
  }
  if (v13 <= 1) {
    goto LABEL_24;
  }
  unint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = 1;
  if (v8)
  {
LABEL_22:
    unint64_t v7 = __clz(__rbit64(v8)) + (v9 << 6);
    goto LABEL_23;
  }
  uint64_t v9 = 2;
  if (v13 <= 2)
  {
LABEL_24:
    sub_18D3FE6E8();
    return v2;
  }
  unint64_t v8 = *(void *)(a1 + 80);
  if (v8) {
    goto LABEL_22;
  }
  uint64_t v9 = 3;
  if (v13 <= 3) {
    goto LABEL_24;
  }
  unint64_t v8 = *(void *)(a1 + 88);
  if (v8) {
    goto LABEL_22;
  }
  uint64_t v9 = 4;
  if (v13 <= 4) {
    goto LABEL_24;
  }
  unint64_t v8 = *(void *)(a1 + 96);
  if (v8) {
    goto LABEL_22;
  }
  uint64_t v10 = 5;
  if (v13 <= 5) {
    goto LABEL_24;
  }
  unint64_t v8 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v9 = 5;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v9 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v8 = *(void *)(a1 + 64 + 8 * v9);
    ++v10;
    if (v8) {
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

unint64_t static AXPreferences.VoiceOver.Activity.ArchiveHelper.classNameForArchive.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_18D3F9FFC(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue);
  swift_beginAccess();
  void *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18D3FA068()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18D3FA0B4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_18D3FA108())()
{
  return j__swift_endAccess;
}

uint64_t static AXPreferences.VoiceOver.Activity.ArchiveHelper.supportsSecureCoding.getter()
{
  return 1;
}

void sub_18D3FA174()
{
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_18D3FD31C();

  return v4;
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.init(coder:)(void *a1)
{
  id v2 = sub_18D3FD31C();

  return v2;
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void AXPreferences.VoiceOver.Activity.ArchiveHelper.init()()
{
}

id AXPreferences.VoiceOver.Activity.ArchiveHelper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_18D3FA3AC()
{
  return 0xD000000000000013;
}

uint64_t sub_18D3FA3C8()
{
  return sub_18D40A6C8();
}

void __swiftcall AXPreferences.VoiceOver.Activity._bridgeToObjectiveC()(AXVoiceOverActivity *__return_ptr retstr)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_18D40A678();
  uint64_t v157 = *(void *)(v3 - 8);
  uint64_t v158 = v3;
  MEMORY[0x1F4188790](v3, v4);
  id v155 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  uint64_t v8 = MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v154 = (uint64_t)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  int64_t v13 = (char *)&v147 - v12;
  uint64_t v15 = MEMORY[0x1F4188790](v11, v14);
  uint64_t v17 = (char *)&v147 - v16;
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  uint64_t v151 = (uint64_t)&v147 - v20;
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v150 = (uint64_t)&v147 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  MEMORY[0x1F4188790](v23 - 8, v24);
  unint64_t v26 = (char *)&v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = objc_msgSend(objc_allocWithZone((Class)AXVoiceOverActivity), sel_init);
  uint64_t v28 = (int *)type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v29 = *(void *)(v2 + v28[7]);
  int v152 = v17;
  uint64_t v153 = v13;
  if (v29) {
    uint64_t v30 = (void *)sub_18D40A9F8();
  }
  else {
    uint64_t v30 = 0;
  }
  objc_msgSend(v27, sel_setAppIdentifiers_, v30);

  uint64_t v31 = (void *)sub_18D40A248();
  objc_msgSend(v27, sel_setUuid_, v31);

  uint64_t v32 = (void *)sub_18D40A7C8();
  objc_msgSend(v27, sel_setName_, v32);

  uint64_t v33 = *(void *)(v2 + v28[6]);
  id v159 = v27;
  BOOL v156 = v28;
  if (v33)
  {
    uint64_t v149 = v2;
    int64_t v34 = *(void *)(v33 + 16);
    uint64_t v35 = MEMORY[0x1E4FBC860];
    if (v34)
    {
      uint64_t v147 = v29;
      BOOL v148 = v26;
      uint64_t v162 = MEMORY[0x1E4FBC860];
      sub_18D3FCAB8(0, v34, 0);
      uint64_t v35 = v162;
      int64_t v36 = sub_18D3FD198(v33);
      int v38 = v37;
      char v40 = v39 & 1;
      uint64_t v160 = v33 + 56;
      while ((v36 & 0x8000000000000000) == 0 && v36 < 1 << *(unsigned char *)(v33 + 32))
      {
        if (((*(void *)(v160 + (((unint64_t)v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
          goto LABEL_104;
        }
        if (*(_DWORD *)(v33 + 36) != v38) {
          goto LABEL_105;
        }
        uint64_t v41 = sub_18D40A7F8();
        uint64_t v43 = v42;
        uint64_t v162 = v35;
        unint64_t v45 = *(void *)(v35 + 16);
        unint64_t v44 = *(void *)(v35 + 24);
        if (v45 >= v44 >> 1)
        {
          sub_18D3FCAB8(v44 > 1, v45 + 1, 1);
          uint64_t v35 = v162;
        }
        *(void *)(v35 + 16) = v45 + 1;
        uint64_t v46 = v35 + 16 * v45;
        *(void *)(v46 + 32) = v41;
        *(void *)(v46 + 40) = v43;
        int64_t v47 = sub_18D3FD238(v36, v38, v40 & 1, v33);
        int64_t v36 = v47;
        int v38 = v48;
        char v40 = v49 & 1;
        if (!--v34)
        {
          sub_18D3FE3DC(v47, v48, v49 & 1);
          uint64_t v28 = v156;
          uint64_t v29 = v147;
          unint64_t v26 = v148;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
LABEL_15:
    sub_18D3DC1F4(v35);
    swift_bridgeObjectRelease();
    unint64_t v50 = (void *)sub_18D40A9F8();
    swift_bridgeObjectRelease();
    id v27 = v159;
    objc_msgSend(v159, sel_setTextualContexts_, v50);

    uint64_t v2 = v149;
  }
  if (v29) {
    uint64_t v51 = (void *)sub_18D40A9F8();
  }
  else {
    uint64_t v51 = 0;
  }
  uint64_t v53 = v157;
  uint64_t v52 = v158;
  objc_msgSend(v27, sel_setAppIdentifiers_, v51);

  sub_18D3C3FF4(v2 + v28[8], (uint64_t)v26, (uint64_t *)&unk_1EB34DCD0);
  uint64_t v54 = sub_18D40A288();
  uint64_t v55 = *(void *)(v54 - 8);
  int64_t v56 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v26, 1, v54) != 1)
  {
    int64_t v56 = (void *)sub_18D40A248();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v26, v54);
  }
  objc_msgSend(v27, sel_setPunctuationGroup_, v56);

  int v57 = *(unsigned __int8 *)(v2 + v28[9]);
  if (v57 != 2)
  {
    id v58 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v57 & 1);
    objc_msgSend(v27, sel_setTableHeaders_, v58);
  }
  int v59 = *(unsigned __int8 *)(v2 + v28[10]);
  if (v59 != 2)
  {
    id v60 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v59 & 1);
    objc_msgSend(v27, sel_setTableRowAndColumn_, v60);
  }
  int v61 = *(unsigned __int8 *)(v2 + v28[11]);
  if (v61 != 2)
  {
    id v62 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v61 & 1);
    objc_msgSend(v27, sel_setSpeakEmojis_, v62);
  }
  int v63 = *(unsigned __int8 *)(v2 + v28[12]);
  if (v63 != 2)
  {
    id v64 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v63 & 1);
    objc_msgSend(v27, sel_setImageDescriptions_, v64);
  }
  int v65 = *(unsigned __int8 *)(v2 + v28[13]);
  if (v65 != 2)
  {
    id v66 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v65 & 1);
    objc_msgSend(v27, sel_setHints_, v66);
  }
  uint64_t v67 = v2 + v28[14];
  if ((*(unsigned char *)(v67 + 8) & 1) == 0)
  {
    id v68 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)v67);
    objc_msgSend(v27, sel_setContainerFeedback_, v68);
  }
  uint64_t v69 = v2 + v28[15];
  if ((*(unsigned char *)(v69 + 8) & 1) == 0)
  {
    id v70 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)v69);
    objc_msgSend(v27, sel_setNumberFeedback_, v70);
  }
  uint64_t v71 = v2 + v28[16];
  if ((*(unsigned char *)(v71 + 8) & 1) == 0)
  {
    id v72 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)v71);
    objc_msgSend(v27, sel_setTypingStyle_, v72);
  }
  uint64_t v73 = v2 + v28[17];
  if ((*(unsigned char *)(v73 + 8) & 1) == 0)
  {
    id v74 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)v73);
    objc_msgSend(v27, sel_setNavigationStyle_, v74);
  }
  uint64_t v75 = v2 + v28[18];
  uint64_t v76 = v150;
  sub_18D3C3FF4(v75, v150, &qword_1E91B2118);
  uint64_t v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v77(v76, 1, v52) == 1)
  {
    sub_18D3C3EE8(v76, &qword_1E91B2118);
    uint64_t v78 = 0;
  }
  else
  {
    sub_18D40A658();
    uint64_t v80 = v79;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v76, v52);
    if (v80)
    {
      uint64_t v78 = (void *)sub_18D40A7C8();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v78 = 0;
    }
    id v27 = v159;
  }
  objc_msgSend(v27, sel_setVoiceIdentifier_, v78);

  uint64_t v81 = v151;
  sub_18D3C3FF4(v75, v151, &qword_1E91B2118);
  if (v77(v81, 1, v52) == 1)
  {
    sub_18D3C3EE8(v81, &qword_1E91B2118);
    uint64_t v82 = (uint64_t)v152;
  }
  else
  {
    uint64_t v83 = v81;
    uint64_t v84 = sub_18D40A5C8();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v83, v52);
    uint64_t v82 = (uint64_t)v152;
    if ((v84 & 0x100000000) == 0)
    {
      id v85 = objc_allocWithZone(NSNumber);
      LODWORD(v86) = v84;
      id v87 = objc_msgSend(v85, sel_initWithFloat_, v86);
      objc_msgSend(v27, sel_setSpeechRate_, v87);
    }
  }
  sub_18D3C3FF4(v75, v82, &qword_1E91B2118);
  if (v77(v82, 1, v52) == 1)
  {
    sub_18D3C3EE8(v82, &qword_1E91B2118);
    uint64_t v88 = (uint64_t)v153;
  }
  else
  {
    uint64_t v89 = sub_18D40A5C8();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v82, v52);
    uint64_t v88 = (uint64_t)v153;
    if ((v89 & 0x100000000) == 0)
    {
      id v90 = objc_allocWithZone(NSNumber);
      LODWORD(v91) = v89;
      id v92 = objc_msgSend(v90, sel_initWithFloat_, v91);
      objc_msgSend(v27, sel_setSpeechRate_, v92);
    }
  }
  sub_18D3C3FF4(v75, v88, &qword_1E91B2118);
  if (v77(v88, 1, v52) == 1)
  {
    sub_18D3C3EE8(v88, &qword_1E91B2118);
  }
  else
  {
    uint64_t v93 = sub_18D40A608();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v88, v52);
    if ((v93 & 0x100000000) == 0)
    {
      id v94 = objc_allocWithZone(NSNumber);
      LODWORD(v95) = v93;
      id v96 = objc_msgSend(v94, sel_initWithFloat_, v95);
      objc_msgSend(v27, sel_setVolume_, v96);
    }
  }
  uint64_t v97 = v154;
  sub_18D3C3FF4(v75, v154, &qword_1E91B2118);
  if (v77(v97, 1, v52) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v155, v97, v52);
    uint64_t v98 = sub_18D40A658();
    uint64_t v100 = v99;
    if ((sub_18D40A5C8() & 0x100000000) != 0)
    {
      id v105 = 0;
      if ((sub_18D40A5E8() & 0x100000000) != 0) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v101 = sub_18D40A5C8();
      if ((v101 & 0x100000000) != 0)
      {
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      int v102 = v101;
      id v103 = objc_allocWithZone(NSNumber);
      LODWORD(v104) = v102;
      id v105 = objc_msgSend(v103, sel_initWithFloat_, v104);
      if ((sub_18D40A5E8() & 0x100000000) != 0)
      {
LABEL_62:
        id v106 = 0;
        if ((sub_18D40A608() & 0x100000000) == 0) {
          goto LABEL_63;
        }
        goto LABEL_70;
      }
    }
    uint64_t v116 = sub_18D40A5E8();
    if ((v116 & 0x100000000) != 0)
    {
LABEL_108:
      __break(1u);
      return;
    }
    int v117 = v116;
    id v118 = objc_allocWithZone(NSNumber);
    LODWORD(v119) = v117;
    id v106 = objc_msgSend(v118, sel_initWithFloat_, v119);
    if ((sub_18D40A608() & 0x100000000) == 0)
    {
LABEL_63:
      uint64_t v107 = sub_18D40A608();
      if ((v107 & 0x100000000) != 0)
      {
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
      int v108 = v107;
      id v109 = objc_allocWithZone(NSNumber);
      LODWORD(v110) = v108;
      id v111 = objc_msgSend(v109, sel_initWithFloat_, v110);
      uint64_t v112 = sub_18D40A598();
      if (!v112)
      {
LABEL_65:
        uint64_t v113 = 0;
        uint64_t v114 = sub_18D40A628();
        if (!v114)
        {
LABEL_66:
          uint64_t v115 = 0;
LABEL_73:
          id v120 = objc_allocWithZone(MEMORY[0x1E4F48308]);
          id v121 = sub_18D3EBB8C(v98, v100, v105, v106, v111, v113, v115);
          id v27 = v159;
          objc_msgSend(v159, sel_setVoiceSelection_, v121);

          (*(void (**)(char *, uint64_t))(v157 + 8))(v155, v158);
          goto LABEL_74;
        }
LABEL_72:
        uint64_t v162 = v114;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2780);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B2910);
        swift_dynamicCast();
        uint64_t v115 = v161;
        goto LABEL_73;
      }
LABEL_71:
      uint64_t v162 = v112;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1548);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2920);
      swift_dynamicCast();
      uint64_t v113 = v161;
      uint64_t v114 = sub_18D40A628();
      if (!v114) {
        goto LABEL_66;
      }
      goto LABEL_72;
    }
LABEL_70:
    id v111 = 0;
    uint64_t v112 = sub_18D40A598();
    if (!v112) {
      goto LABEL_65;
    }
    goto LABEL_71;
  }
  sub_18D3C3EE8(v97, &qword_1E91B2118);
LABEL_74:
  uint64_t v122 = v156;
  int v123 = *(unsigned __int8 *)(v2 + v156[19]);
  if (v123 != 2)
  {
    id v124 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v123 & 1);
    objc_msgSend(v27, sel_setSpeechMuted_, v124);
  }
  int v125 = *(unsigned __int8 *)(v2 + v122[20]);
  if (v125 != 2)
  {
    id v126 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v125 & 1);
    objc_msgSend(v27, sel_setSoundMuted_, v126);
  }
  int v127 = *(unsigned __int8 *)(v2 + v122[21]);
  if (v127 != 2)
  {
    id v128 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v127 & 1);
    objc_msgSend(v27, sel_setAudioDucking_, v128);
  }
  uint64_t v129 = v2 + v122[22];
  if ((*(unsigned char *)(v129 + 8) & 1) == 0)
  {
    id v130 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)v129);
    objc_msgSend(v27, sel_setModifierKeys_, v130);
  }
  int v131 = *(unsigned __int8 *)(v2 + v122[23]);
  if (v131 != 2)
  {
    id v132 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v131 & 1);
    objc_msgSend(v27, sel_setBrailleStatusCellGeneral_, v132);
  }
  int v133 = *(unsigned __int8 *)(v2 + v122[24]);
  if (v133 != 2)
  {
    id v134 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v133 & 1);
    objc_msgSend(v27, sel_setBrailleStatusCellText_, v134);
  }
  if (*(void *)(v2 + v122[25] + 8)) {
    uint64_t v135 = (void *)sub_18D40A7C8();
  }
  else {
    uint64_t v135 = 0;
  }
  objc_msgSend(v27, sel_setBrailleTable_, v135);

  if (*(void *)(v2 + v122[26] + 8)) {
    BOOL v136 = (void *)sub_18D40A7C8();
  }
  else {
    BOOL v136 = 0;
  }
  objc_msgSend(v27, sel_setBrailleInputTable_, v136);

  uint64_t v137 = v2 + v122[27];
  if ((*(unsigned char *)(v137 + 8) & 1) == 0)
  {
    id v138 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)v137);
    objc_msgSend(v27, sel_setBrailleOutput_, v138);
  }
  uint64_t v139 = v2 + v122[28];
  if ((*(unsigned char *)(v139 + 8) & 1) == 0)
  {
    id v140 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)v139);
    objc_msgSend(v27, sel_setBrailleInput_, v140);
  }
  uint64_t v141 = v2 + v122[29];
  if ((*(unsigned char *)(v141 + 8) & 1) == 0)
  {
    id v142 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, *(double *)v141);
    objc_msgSend(v27, sel_setBrailleAutoAdvanceDuration_, v142);
  }
  int v143 = *(unsigned __int8 *)(v2 + v122[30]);
  if (v143 != 2)
  {
    id v144 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v143 & 1);
    objc_msgSend(v27, sel_setBrailleAlerts_, v144);
  }
  int v145 = *(unsigned __int8 *)(v2 + v122[31]);
  if (v145 != 2)
  {
    id v146 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v145 & 1);
    objc_msgSend(v27, sel_setBrailleFormatting_, v146);
  }
}

uint64_t static AXPreferences.VoiceOver.Activity._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_18D40AB98();
    __break(1u);
  }
  return result;
}

uint64_t static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v203 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2118);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = &v167[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2370);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = &v167[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DCD0);
  uint64_t v13 = MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v15 = &v167[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v18 = &v167[-v17];
  uint64_t v19 = sub_18D40A288();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v24 = &v167[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = MEMORY[0x1F4188790](v22, v25);
  uint64_t v28 = &v167[-v27];
  MEMORY[0x1F4188790](v26, v29);
  v204 = &v167[-v30];
  id v205 = a1;
  id v31 = objc_msgSend(a1, sel_uuid);
  if (!v31)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
    goto LABEL_16;
  }
  uint64_t v32 = v31;
  sub_18D40A268();

  uint64_t v33 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32);
  v33(v18, v28, v19);
  int v201 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v201(v18, 0, 1, v19);
  uint64_t v202 = v20;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
LABEL_16:
    sub_18D3C3EE8((uint64_t)v18, (uint64_t *)&unk_1EB34DCD0);
    return 0;
  }
  uint64_t v198 = v20 + 56;
  int64_t v34 = v204;
  v33(v204, v18, v19);
  id v35 = v205;
  uint64_t v36 = (uint64_t)objc_msgSend(v205, sel_name);
  if (!v36)
  {
    (*(void (**)(unsigned char *, uint64_t))(v202 + 8))(v34, v19);
    return v36;
  }
  uint64_t v200 = v19;
  uint64_t v37 = sub_18D40A7F8();
  uint64_t v193 = v38;
  uint64_t v194 = v37;

  id v39 = objc_msgSend(v35, sel_textualContexts);
  uint64_t v199 = v6;
  uint64_t v195 = v10;
  uint64_t v196 = v24;
  BOOL v197 = v15;
  if (v39)
  {
    char v40 = v39;
    uint64_t v41 = sub_18D40AA08();

    int64_t v42 = *(void *)(v41 + 16);
    if (v42)
    {
      uint64_t v206 = MEMORY[0x1E4FBC860];
      sub_18D3FCA58(0, v42, 0);
      uint64_t v43 = v206;
      int64_t v44 = sub_18D3FD198(v41);
      int v46 = v45;
      char v48 = v47 & 1;
      while ((v44 & 0x8000000000000000) == 0 && v44 < 1 << *(unsigned char *)(v41 + 32))
      {
        if (((*(void *)(v41 + 56 + (((unint64_t)v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
          goto LABEL_123;
        }
        if (*(_DWORD *)(v41 + 36) != v46) {
          goto LABEL_124;
        }
        swift_bridgeObjectRetain();
        uint64_t v49 = sub_18D40A7C8();
        swift_bridgeObjectRelease();
        uint64_t v206 = v43;
        unint64_t v51 = *(void *)(v43 + 16);
        unint64_t v50 = *(void *)(v43 + 24);
        if (v51 >= v50 >> 1)
        {
          sub_18D3FCA58(v50 > 1, v51 + 1, 1);
          uint64_t v43 = v206;
        }
        *(void *)(v43 + 16) = v51 + 1;
        *(void *)(v43 + 8 * v51 + 32) = v49;
        int64_t v52 = sub_18D3FD238(v44, v46, v48 & 1, v41);
        int64_t v44 = v52;
        int v46 = v53;
        char v48 = v54 & 1;
        if (!--v42)
        {
          sub_18D3FE3DC(v52, v53, v54 & 1);
          swift_bridgeObjectRelease();
          uint64_t v57 = (uint64_t)v196;
          uint64_t v56 = (uint64_t)v197;
          int64_t v34 = v204;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    swift_bridgeObjectRelease();
    uint64_t v43 = MEMORY[0x1E4FBC860];
    uint64_t v57 = (uint64_t)v24;
    uint64_t v56 = (uint64_t)v15;
LABEL_20:
    uint64_t v192 = sub_18D3D8834(v43);
    swift_bridgeObjectRelease();
    uint64_t v55 = v202;
  }
  else
  {
    uint64_t v192 = 0;
    uint64_t v55 = v202;
    uint64_t v57 = (uint64_t)v24;
    uint64_t v56 = (uint64_t)v15;
  }
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v55 + 16))(v57, v34, v200);
  id v58 = v205;
  id v59 = objc_msgSend(v205, sel_appIdentifiers);
  if (v59)
  {
    id v60 = v59;
    uint64_t v61 = sub_18D40AA08();
  }
  else
  {
    uint64_t v61 = 0;
  }
  id v62 = objc_msgSend(v58, sel_punctuationGroup);
  if (v62)
  {
    int v63 = v62;
    sub_18D40A268();

    uint64_t v64 = 0;
  }
  else
  {
    uint64_t v64 = 1;
  }
  v201((unsigned char *)v56, v64, 1, v200);
  id v65 = objc_msgSend(v58, sel_tableHeaders);
  if (v65)
  {
    id v66 = v65;
    unsigned int v67 = objc_msgSend(v65, sel_BOOLValue);
  }
  else
  {
    unsigned int v67 = 2;
  }
  id v68 = objc_msgSend(v58, sel_tableRowAndColumn);
  if (v68)
  {
    uint64_t v69 = v68;
    unsigned int v70 = objc_msgSend(v68, sel_BOOLValue);
  }
  else
  {
    unsigned int v70 = 2;
  }
  id v71 = objc_msgSend(v58, sel_speakEmojis);
  if (v71)
  {
    id v72 = v71;
    LODWORD(v201) = objc_msgSend(v71, sel_BOOLValue);
  }
  else
  {
    LODWORD(v201) = 2;
  }
  id v73 = objc_msgSend(v58, sel_imageDescriptions);
  if (v73)
  {
    id v74 = v73;
    LODWORD(v19_Block_object_dispose(&STACK[0x240], 8) = objc_msgSend(v73, sel_BOOLValue);
  }
  else
  {
    LODWORD(v19_Block_object_dispose(&STACK[0x240], 8) = 2;
  }
  id v75 = objc_msgSend(v58, sel_hints);
  if (v75)
  {
    uint64_t v76 = v75;
    unsigned int v191 = objc_msgSend(v75, sel_BOOLValue);
  }
  else
  {
    unsigned int v191 = 2;
  }
  id v77 = objc_msgSend(v58, sel_containerFeedback);

  id v190 = v77;
  if (v77)
  {
    id v78 = objc_msgSend(v58, sel_containerFeedback);
    if (!v78)
    {
LABEL_125:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_126;
    }
    uint64_t v79 = v78;
    id v188 = objc_msgSend(v78, sel_integerValue);
  }
  else
  {
    id v188 = 0;
  }
  id v80 = objc_msgSend(v58, sel_numberFeedback);

  id v187 = v80;
  if (v80)
  {
    id v81 = objc_msgSend(v58, sel_numberFeedback);
    if (!v81)
    {
LABEL_126:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_127;
    }
    uint64_t v82 = v81;
    uint64_t v83 = v61;
    id v80 = objc_msgSend(v81, sel_integerValue);
  }
  else
  {
    uint64_t v83 = v61;
  }
  uint64_t v84 = (uint64_t)objc_msgSend(v58, sel_typingStyle);

  uint64_t v186 = v84;
  if (v84)
  {
    id v85 = objc_msgSend(v58, sel_typingStyle);
    if (!v85)
    {
LABEL_127:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_128;
    }
    double v86 = v85;
    signed int v87 = objc_msgSend(v85, sel_intValue);

    uint64_t v84 = v87;
    id v58 = v205;
  }
  id v88 = objc_msgSend(v58, sel_navigationStyle);

  id v184 = v88;
  unsigned int v185 = v67;
  if (v88)
  {
    id v89 = objc_msgSend(v58, sel_navigationStyle);
    if (!v89)
    {
LABEL_128:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_129;
    }
    id v90 = v89;
    id v179 = objc_msgSend(v89, sel_integerValue);
  }
  else
  {
    id v179 = 0;
  }
  id v91 = objc_msgSend(v58, sel_voiceSelection);
  id v92 = v91;
  if (v91 && (id v93 = objc_msgSend(v91, sel_voiceId), v92, v93))
  {
    sub_18D40A7F8();
    uint64_t v189 = v94;
  }
  else
  {
    uint64_t v189 = 0;
  }
  uint64_t v180 = v84;
  uint64_t v181 = (uint64_t)v80;
  uint64_t v183 = v83;
  id v95 = objc_msgSend(v58, sel_voiceSelection);
  unsigned int v182 = v70;
  if (v95)
  {
    id v96 = v95;
    id v97 = objc_msgSend(v95, sel_rate);

    if (v97)
    {
      objc_msgSend(v97, sel_floatValue);
    }
  }
  id v98 = objc_msgSend(v58, sel_voiceSelection);
  if (v98)
  {
    uint64_t v99 = v98;
    id v100 = objc_msgSend(v98, sel_pitch);

    if (v100)
    {
      objc_msgSend(v100, sel_floatValue);
    }
  }
  id v101 = objc_msgSend(v58, sel_voiceSelection);
  if (v101
    && (int v102 = v101, v103 = objc_msgSend(v101, sel_volume), v102, v103))
  {
    objc_msgSend(v103, sel_floatValue);

    char v104 = 0;
  }
  else
  {
    char v104 = 1;
  }
  id v105 = objc_msgSend(v205, sel_voiceSelection);
  if (v105)
  {
    id v106 = v105;
    id v107 = objc_msgSend(v105, sel_effects);

    if (v107)
    {
      sub_18D40AA48();
      uint64_t v108 = sub_18D40A8E8();

      uint64_t v206 = v108;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B2910);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2780);
      swift_dynamicCast();
    }
  }
  id v109 = objc_msgSend(v205, sel_voiceSelection);
  if (v109)
  {
    double v110 = v109;
    id v111 = objc_msgSend(v109, sel_voiceSettings);

    if (v111)
    {
      sub_18D3EC3C0(0, &qword_1EB34DCB0);
      uint64_t v112 = sub_18D40A778();

      sub_18D3F9CE8(v112);
      swift_bridgeObjectRelease();
    }
  }
  LOBYTE(v206) = v104;
  uint64_t v113 = (uint64_t)v199;
  sub_18D40A648();
  uint64_t v114 = sub_18D40A678();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56))(v113, 0, 1, v114);
  id v115 = v205;
  id v116 = objc_msgSend(v205, sel_speechMuted);
  if (v116)
  {
    int v117 = v116;
    unsigned __int8 v118 = objc_msgSend(v116, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v118 = 2;
  }
  id v119 = objc_msgSend(v115, sel_soundMuted);
  uint64_t v120 = v203;
  if (v119)
  {
    id v121 = v119;
    unsigned int v122 = objc_msgSend(v119, sel_BOOLValue);
  }
  else
  {
    unsigned int v122 = 2;
  }
  id v123 = objc_msgSend(v115, sel_audioDucking);
  if (v123)
  {
    id v124 = v123;
    unsigned int v125 = objc_msgSend(v123, sel_BOOLValue);
  }
  else
  {
    unsigned int v125 = 2;
  }
  id v126 = objc_msgSend(v115, sel_modifierKeys);

  if (v126)
  {
    id v127 = objc_msgSend(v115, sel_modifierKeys);
    if (!v127)
    {
LABEL_129:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_130;
    }
    id v128 = v127;
    id v178 = objc_msgSend(v127, sel_integerValue);
  }
  else
  {
    id v178 = 0;
  }
  id v129 = objc_msgSend(v115, sel_brailleStatusCellGeneral);
  if (v129)
  {
    id v130 = v129;
    unsigned int v177 = objc_msgSend(v129, sel_BOOLValue);
  }
  else
  {
    unsigned int v177 = 2;
  }
  id v131 = objc_msgSend(v115, sel_brailleStatusCellText);
  if (v131)
  {
    id v132 = v131;
    unsigned int v176 = objc_msgSend(v131, sel_BOOLValue);
  }
  else
  {
    unsigned int v176 = 2;
  }
  id v133 = objc_msgSend(v115, sel_brailleTable);
  if (v133)
  {
    id v134 = v133;
    uint64_t v175 = sub_18D40A7F8();
    uint64_t v174 = v135;
  }
  else
  {
    uint64_t v175 = 0;
    uint64_t v174 = 0;
  }
  id v136 = objc_msgSend(v115, sel_brailleInputTable);
  if (v136)
  {
    uint64_t v137 = v136;
    uint64_t v173 = sub_18D40A7F8();
    uint64_t v172 = v138;
  }
  else
  {
    uint64_t v173 = 0;
    uint64_t v172 = 0;
  }
  id v139 = v205;
  id v140 = objc_msgSend(v205, sel_brailleOutput);

  LODWORD(v189) = v125;
  if (v140)
  {
    id v141 = objc_msgSend(v139, sel_brailleOutput);
    if (!v141)
    {
LABEL_130:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_131;
    }
    id v142 = v141;
    int v143 = v139;
    id v171 = objc_msgSend(v141, sel_integerValue);
  }
  else
  {
    id v171 = 0;
    int v143 = v139;
  }
  id v144 = objc_msgSend(v143, sel_brailleInput);

  if (v144)
  {
    id v145 = objc_msgSend(v143, sel_brailleInput);
    if (!v145)
    {
LABEL_131:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_132;
    }
    id v146 = v145;
    id v205 = objc_msgSend(v145, sel_integerValue);
  }
  else
  {
    id v205 = 0;
  }
  id v147 = objc_msgSend(v143, sel_brailleAutoAdvanceDuration);

  unsigned int v170 = v122;
  if (!v147)
  {
    sub_18D3C3EE8(v120, &qword_1E91B2370);
    uint64_t v169 = 0;
    goto LABEL_114;
  }
  id v148 = objc_msgSend(v143, sel_brailleAutoAdvanceDuration);
  if (v148)
  {
    uint64_t v149 = v148;
    sub_18D3C3EE8(v120, &qword_1E91B2370);
    objc_msgSend(v149, sel_doubleValue);
    uint64_t v151 = v150;

    uint64_t v169 = v151;
LABEL_114:
    id v152 = objc_msgSend(v143, sel_brailleAlerts);
    if (v152)
    {
      uint64_t v153 = v152;
      unsigned int v168 = objc_msgSend(v152, sel_BOOLValue);
    }
    else
    {
      unsigned int v168 = 2;
    }
    id v154 = objc_msgSend(v143, sel_brailleFormatting);
    if (v154)
    {
      id v155 = v154;
      char v156 = v118;
      char v157 = objc_msgSend(v154, sel_BOOLValue);
    }
    else
    {
      char v156 = v118;
      char v157 = 2;
    }
    char v158 = v126 == 0;
    char v159 = v184 == 0;
    BOOL v160 = v186 == 0;
    char v161 = v187 == 0;
    char v162 = v190 == 0;
    (*(void (**)(unsigned char *, uint64_t))(v202 + 8))(v204, v200);
    char v166 = v160;
    uint64_t v163 = (uint64_t)v195;
    sub_18D3E0938((uint64_t)v196, v194, v193, v192, v183, (uint64_t)v197, v185, v182, (uint64_t)v195, (char)v201, v198, v191, (uint64_t)v188, v162, v181, v161, v180, v166, (uint64_t)v179,
      v159,
      (uint64_t)v199,
      v156,
      v170,
      v189,
      (uint64_t)v178,
      v158,
      v177,
      v176,
      v175,
      v174,
      v173,
      v172,
      (uint64_t)v171,
      v140 == 0,
      (uint64_t)v205,
      v144 == 0,
      v169,
      v147 == 0,
      v168,
      v157);
    uint64_t v164 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    uint64_t v36 = 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v163, 0, 1, v164);
    sub_18D3FE3E8(v163, v203);
    return v36;
  }
LABEL_132:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t static AXPreferences.VoiceOver.Activity._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2370);
  uint64_t v6 = MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v16 - v10;
  if (a1)
  {
    uint64_t v12 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    id v14 = a1;
    if (static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(v14, (uint64_t)v11))
    {
      sub_18D3C3FF4((uint64_t)v11, (uint64_t)v8, &qword_1E91B2370);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
      {
        sub_18D3C3EE8((uint64_t)v11, &qword_1E91B2370);

        return sub_18D3FE450((uint64_t)v8, a2);
      }
      sub_18D3C3EE8((uint64_t)v8, &qword_1E91B2370);
    }
  }
  uint64_t result = sub_18D40AB98();
  __break(1u);
  return result;
}

uint64_t sub_18D3FC9E0(void *a1, uint64_t a2)
{
  uint64_t result = static AXPreferences.VoiceOver.Activity._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_18D40AB98();
    __break(1u);
  }
  return result;
}

uint64_t sub_18D3FCA58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_18D3FCAD8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_18D3FCA78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_18D3FCC60(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_18D3FCA98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_18D3FCDEC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_18D3FCAB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_18D3FD02C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_18D3FCAD8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DCB8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for AXSSVoiceOverTextualContext(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_18D40ABD8();
  __break(1u);
  return result;
}

uint64_t sub_18D3FCC60(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B2A60);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B25A8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_18D40ABD8();
  __break(1u);
  return result;
}

uint64_t sub_18D3FCDEC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E91B2A70);
  uint64_t v10 = *(void *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  _OWORD v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_18D40ABD8();
  __break(1u);
  return result;
}

uint64_t sub_18D3FD02C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B14E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_18D40ABD8();
  __break(1u);
  return result;
}

uint64_t sub_18D3FD198(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_18D3FD238(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

id sub_18D3FD31C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B29C0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_18D431E20;
  *(void *)(v1 + 32) = 25705;
  *(void *)(v1 + 40) = 0xE200000000000000;
  sub_18D3EC3C0(0, &qword_1E91B29C8);
  uint64_t v83 = v0;
  *(void *)&long long v85 = sub_18D40AA58();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B29D0);
  sub_18D3FE6F0();
  sub_18D40AB28();
  *(void *)(v1 + 8_Block_object_dispose(&STACK[0x240], 8) = 1701667182;
  *(void *)(v1 + 96) = 0xE400000000000000;
  sub_18D3EC3C0(0, (unint64_t *)&unk_1E91B29E8);
  uint64_t v2 = sub_18D40AA58();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    sub_18D40A7E8();

    long long v4 = 0uLL;
  }
  else
  {
    *((void *)&v4 + 1) = 0;
  }
  *((void *)&v85 + 1) = *((void *)&v4 + 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB34DC70);
  sub_18D3FE858(&qword_1E91B29F8, (uint64_t *)&unk_1EB34DC70);
  sub_18D40AB28();
  *(void *)(v1 + 144) = 0x436C617574786574;
  *(void *)(v1 + 152) = 0xEF73747865746E6FLL;
  sub_18D3EC3C0(0, &qword_1E91B2A00);
  sub_18D40AA58();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2A08);
  sub_18D3FE7CC();
  sub_18D40AB28();
  strcpy((char *)(v1 + 200), "appIdentifiers");
  *(unsigned char *)(v1 + 215) = -18;
  sub_18D40AA58();
  sub_18D40AB28();
  *(void *)(v1 + 256) = 0xD000000000000010;
  *(void *)(v1 + 264) = 0x800000018D42F120;
  *(void *)&long long v85 = sub_18D40AA58();
  sub_18D40AB28();
  strcpy((char *)(v1 + 312), "tableHeaders");
  *(unsigned char *)(v1 + 325) = 0;
  *(_WORD *)(v1 + 326) = -5120;
  sub_18D3EC3C0(0, &qword_1EB34DCB0);
  unint64_t v5 = (void *)sub_18D40AA58();
  if (v5)
  {
    uint64_t v6 = v5;
    unsigned __int8 v7 = objc_msgSend(v5, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v7 = 2;
  }
  LOBYTE(v85) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC80);
  sub_18D3FE858(&qword_1E91B2A28, &qword_1EB34DC80);
  sub_18D40AB28();
  *(void *)(v1 + 36_Block_object_dispose(&STACK[0x240], 8) = 0xD000000000000011;
  *(void *)(v1 + 376) = 0x800000018D42F140;
  unint64_t v8 = (void *)sub_18D40AA58();
  if (v8)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = objc_msgSend(v8, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v10 = 2;
  }
  LOBYTE(v85) = v10;
  sub_18D40AB28();
  *(void *)(v1 + 424) = 0x6F6D456B61657073;
  *(void *)(v1 + 432) = 0xEB0000000073696ALL;
  unint64_t v11 = (void *)sub_18D40AA58();
  if (v11)
  {
    uint64_t v12 = v11;
    unsigned __int8 v13 = objc_msgSend(v11, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v13 = 2;
  }
  LOBYTE(v85) = v13;
  sub_18D40AB28();
  *(void *)(v1 + 480) = 0xD000000000000011;
  *(void *)(v1 + 48_Block_object_dispose(&STACK[0x240], 8) = 0x800000018D42F160;
  size_t v14 = (void *)sub_18D40AA58();
  if (v14)
  {
    uint64_t v15 = v14;
    unsigned __int8 v16 = objc_msgSend(v14, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v16 = 2;
  }
  LOBYTE(v85) = v16;
  sub_18D40AB28();
  *(void *)(v1 + 536) = 0x73746E6968;
  *(void *)(v1 + 544) = 0xE500000000000000;
  unint64_t v17 = (void *)sub_18D40AA58();
  if (v17)
  {
    uint64_t v18 = v17;
    unsigned __int8 v19 = objc_msgSend(v17, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v19 = 2;
  }
  LOBYTE(v85) = v19;
  sub_18D40AB28();
  *(void *)(v1 + 592) = 0xD000000000000011;
  *(void *)(v1 + 600) = 0x800000018D42F180;
  uint64_t v20 = (void *)sub_18D40AA58();
  uint64_t v21 = v20;
  if (v20)
  {
    id v22 = objc_msgSend(v20, sel_integerValue);
  }
  else
  {
    id v22 = 0;
  }
  *(void *)&long long v85 = v22;
  BYTE8(v85) = v21 == 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2A30);
  sub_18D3FE858(&qword_1E91B2A38, &qword_1E91B2A30);
  sub_18D40AB28();
  strcpy((char *)(v1 + 648), "numberFeedback");
  *(unsigned char *)(v1 + 663) = -18;
  uint64_t v23 = (void *)sub_18D40AA58();
  uint64_t v24 = v23;
  if (v23)
  {
    id v25 = objc_msgSend(v23, sel_integerValue);
  }
  else
  {
    id v25 = 0;
  }
  *(void *)&long long v85 = v25;
  BYTE8(v85) = v24 == 0;
  sub_18D40AB28();
  *(void *)(v1 + 704) = 0x7453676E69707974;
  *(void *)(v1 + 712) = 0xEB00000000656C79;
  uint64_t v26 = (void *)sub_18D40AA58();
  uint64_t v27 = v26;
  if (v26)
  {
    id v28 = objc_msgSend(v26, sel_integerValue);
  }
  else
  {
    id v28 = 0;
  }
  *(void *)&long long v85 = v28;
  BYTE8(v85) = v27 == 0;
  sub_18D40AB28();
  *(void *)(v1 + 760) = 0x697461676976616ELL;
  *(void *)(v1 + 76_Block_object_dispose(&STACK[0x240], 8) = 0xEF656C7974536E6FLL;
  uint64_t v29 = (void *)sub_18D40AA58();
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = objc_msgSend(v29, sel_integerValue);
  }
  else
  {
    id v31 = 0;
  }
  *(void *)&long long v85 = v31;
  BYTE8(v85) = v30 == 0;
  sub_18D40AB28();
  *(void *)(v1 + 816) = 0x6564496563696F76;
  *(void *)(v1 + 824) = 0xEF7265696669746ELL;
  uint64_t v32 = sub_18D40AA58();
  if (v32)
  {
    uint64_t v33 = (void *)v32;
    sub_18D40A7E8();
  }
  long long v85 = 0uLL;
  sub_18D40AB28();
  *(void *)(v1 + 872) = 0x6152686365657073;
  *(void *)(v1 + 880) = 0xEA00000000006574;
  int64_t v34 = (void *)sub_18D40AA58();
  id v35 = v34;
  int v36 = 0;
  int v37 = 0;
  if (v34)
  {
    objc_msgSend(v34, sel_floatValue);
    int v37 = v38;
  }
  LODWORD(v85) = v37;
  BYTE4(v85) = v35 == 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2A40);
  sub_18D3FE858(&qword_1E91B2A48, &qword_1E91B2A40);
  sub_18D40AB28();
  *(void *)(v1 + 92_Block_object_dispose(&STACK[0x240], 8) = 0x656D756C6F76;
  *(void *)(v1 + 936) = 0xE600000000000000;
  id v39 = (void *)sub_18D40AA58();
  char v40 = v39;
  if (v39)
  {
    objc_msgSend(v39, sel_floatValue);
    int v36 = v41;
  }
  LODWORD(v85) = v36;
  BYTE4(v85) = v40 == 0;
  sub_18D40AB28();
  *(void *)(v1 + 984) = 0x754D686365657073;
  *(void *)(v1 + 992) = 0xEB00000000646574;
  int64_t v42 = (void *)sub_18D40AA58();
  if (v42)
  {
    uint64_t v43 = v42;
    unsigned __int8 v44 = objc_msgSend(v42, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v44 = 2;
  }
  LOBYTE(v85) = v44;
  sub_18D40AB28();
  *(void *)(v1 + 1040) = 0x74754D646E756F73;
  *(void *)(v1 + 104_Block_object_dispose(&STACK[0x240], 8) = 0xEA00000000006465;
  int v45 = (void *)sub_18D40AA58();
  if (v45)
  {
    int v46 = v45;
    unsigned __int8 v47 = objc_msgSend(v45, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v47 = 2;
  }
  LOBYTE(v85) = v47;
  sub_18D40AB28();
  strcpy((char *)(v1 + 1096), "audioDucking");
  *(unsigned char *)(v1 + 1109) = 0;
  *(_WORD *)(v1 + 1110) = -5120;
  char v48 = (void *)sub_18D40AA58();
  if (v48)
  {
    uint64_t v49 = v48;
    unsigned __int8 v50 = objc_msgSend(v48, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v50 = 2;
  }
  LOBYTE(v85) = v50;
  sub_18D40AB28();
  strcpy((char *)(v1 + 1152), "modifierKeys");
  *(unsigned char *)(v1 + 1165) = 0;
  *(_WORD *)(v1 + 1166) = -5120;
  unint64_t v51 = (void *)sub_18D40AA58();
  int64_t v52 = v51;
  if (v51)
  {
    id v53 = objc_msgSend(v51, (SEL)&selRef_locus);
  }
  else
  {
    id v53 = 0;
  }
  *(void *)&long long v85 = v53;
  BYTE8(v85) = v52 == 0;
  sub_18D40AB28();
  *(void *)(v1 + 120_Block_object_dispose(&STACK[0x240], 8) = 0xD000000000000018;
  *(void *)(v1 + 1216) = 0x800000018D42F1A0;
  char v54 = (void *)sub_18D40AA58();
  if (v54)
  {
    uint64_t v55 = v54;
    unsigned __int8 v56 = objc_msgSend(v54, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v56 = 2;
  }
  LOBYTE(v85) = v56;
  sub_18D40AB28();
  *(void *)(v1 + 1264) = 0xD000000000000015;
  *(void *)(v1 + 1272) = 0x800000018D42F1C0;
  uint64_t v57 = (void *)sub_18D40AA58();
  if (v57)
  {
    id v58 = v57;
    unsigned __int8 v59 = objc_msgSend(v57, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v59 = 2;
  }
  LOBYTE(v85) = v59;
  sub_18D40AB28();
  strcpy((char *)(v1 + 1320), "brailleTable");
  *(unsigned char *)(v1 + 1333) = 0;
  *(_WORD *)(v1 + 1334) = -5120;
  uint64_t v60 = sub_18D40AA58();
  long long v61 = 0uLL;
  if (v60)
  {
    id v62 = (void *)v60;
    sub_18D40A7E8();

    long long v61 = 0uLL;
  }
  long long v85 = v61;
  sub_18D40AB28();
  *(void *)(v1 + 1376) = 0xD000000000000011;
  *(void *)(v1 + 1384) = 0x800000018D42F1E0;
  uint64_t v63 = sub_18D40AA58();
  long long v64 = 0uLL;
  if (v63)
  {
    id v65 = (void *)v63;
    sub_18D40A7E8();

    long long v64 = 0uLL;
  }
  long long v85 = v64;
  sub_18D40AB28();
  strcpy((char *)(v1 + 1432), "brailleOutput");
  *(_WORD *)(v1 + 1446) = -4864;
  id v66 = (void *)sub_18D40AA58();
  unsigned int v67 = v66;
  if (v66)
  {
    id v68 = objc_msgSend(v66, (SEL)&selRef_locus);
  }
  else
  {
    id v68 = 0;
  }
  *(void *)&long long v85 = v68;
  BYTE8(v85) = v67 == 0;
  sub_18D40AB28();
  strcpy((char *)(v1 + 1488), "brailleInput");
  *(unsigned char *)(v1 + 1501) = 0;
  *(_WORD *)(v1 + 1502) = -5120;
  uint64_t v69 = (void *)sub_18D40AA58();
  unsigned int v70 = v69;
  if (v69)
  {
    id v71 = objc_msgSend(v69, (SEL)&selRef_locus);
  }
  else
  {
    id v71 = 0;
  }
  *(void *)&long long v85 = v71;
  BYTE8(v85) = v70 == 0;
  sub_18D40AB28();
  *(void *)(v1 + 1544) = 0xD00000000000001ALL;
  *(void *)(v1 + 1552) = 0x800000018D42F200;
  id v72 = (void *)sub_18D40AA58();
  id v73 = v72;
  if (v72)
  {
    objc_msgSend(v72, sel_doubleValue);
    uint64_t v75 = v74;
  }
  else
  {
    uint64_t v75 = 0;
  }
  *(void *)&long long v85 = v75;
  BYTE8(v85) = v73 == 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2A50);
  sub_18D3FE858(&qword_1E91B2A58, &qword_1E91B2A50);
  sub_18D40AB28();
  strcpy((char *)(v1 + 1600), "brailleAlerts");
  *(_WORD *)(v1 + 1614) = -4864;
  uint64_t v76 = (void *)sub_18D40AA58();
  if (v76)
  {
    id v77 = v76;
    unsigned __int8 v78 = objc_msgSend(v76, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v78 = 2;
  }
  LOBYTE(v85) = v78;
  sub_18D40AB28();
  *(void *)(v1 + 1656) = 0xD000000000000011;
  *(void *)(v1 + 1664) = 0x800000018D42F220;
  uint64_t v79 = (void *)sub_18D40AA58();
  if (v79)
  {
    id v80 = v79;
    unsigned __int8 v81 = objc_msgSend(v79, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v81 = 2;
  }
  LOBYTE(v85) = v81;
  sub_18D40AB28();
  *(void *)&v83[OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue] = sub_18D3BFC5C(v1);

  v84.receiver = v83;
  v84.super_class = (Class)type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper();
  return objc_msgSendSuper2(&v84, sel_init);
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper()
{
  return self;
}

uint64_t sub_18D3FE3DC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18D3FE3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3FE450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18D3FE4B4()
{
  return sub_18D3FE548(&qword_1E91B2928, 255, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity);
}

uint64_t sub_18D3FE500(uint64_t a1, uint64_t a2)
{
  return sub_18D3FE548((unint64_t *)&unk_1E91B2930, a2, (void (*)(uint64_t))type metadata accessor for AXPreferences.VoiceOver.Activity.ArchiveHelper);
}

uint64_t sub_18D3FE548(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D3FE590@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR___VOActivityKeyedArchiveHelper_hashableValue);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for AXPreferences.VoiceOver.Activity.ArchiveHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AXPreferences.VoiceOver.Activity.ArchiveHelper);
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.hashableValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.hashableValue.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.hashableValue.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AXPreferences.VoiceOver.Activity.ArchiveHelper.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_18D3FE6E8()
{
  return swift_release();
}

unint64_t sub_18D3FE6F0()
{
  unint64_t result = qword_1E91B29D8;
  if (!qword_1E91B29D8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E91B29D0);
    sub_18D3FE77C(&qword_1E91B29E0, &qword_1E91B29C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B29D8);
  }
  return result;
}

uint64_t sub_18D3FE77C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18D3EC3C0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18D3FE7CC()
{
  unint64_t result = qword_1E91B2A10;
  if (!qword_1E91B2A10)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E91B2A08);
    sub_18D3FE77C((unint64_t *)&unk_1E91B2A18, &qword_1E91B2A00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2A10);
  }
  return result;
}

uint64_t sub_18D3FE858(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void __swiftcall AXPreferences.init()(AXPreferences *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_init);
}

id AXPreferences.init()()
{
  uint64_t v1 = OBJC_IVAR___AXPreferences_voiceover;
  id v2 = objc_allocWithZone((Class)type metadata accessor for AXPreferences.VoiceOver());
  uint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  uint64_t v4 = OBJC_IVAR___AXPreferences_magnifier;
  *(void *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.Magnifier()), sel_init);
  uint64_t v5 = OBJC_IVAR___AXPreferences_spokenContent;
  *(void *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.SpokenContentSettings()), sel_init);
  uint64_t v6 = OBJC_IVAR___AXPreferences_assistiveTouch;
  *(void *)&v3[v6] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.AssistiveTouch()), sel_init);
  uint64_t v7 = OBJC_IVAR___AXPreferences_liveSpeech;
  *(void *)&v3[v7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AXPreferences.LiveSpeech()), sel_init);

  v9.receiver = v3;
  v9.super_class = (Class)AXPreferences;
  return objc_msgSendSuper2(&v9, sel_init);
}

id sub_18D3FEA1C()
{
  id result = objc_msgSend(objc_allocWithZone((Class)AXPreferences), sel_init);
  qword_1E91B2AE0 = (uint64_t)result;
  return result;
}

void static AXPreferences.shared.setter(uint64_t a1)
{
  if (qword_1E91B2048 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v2 = (void *)qword_1E91B2AE0;
  qword_1E91B2AE0 = a1;
}

uint64_t (*static AXPreferences.shared.modify())()
{
  if (qword_1E91B2048 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id AXPreferences.voiceover.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___AXPreferences_voiceover);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

void AXPreferences.voiceover.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___AXPreferences_voiceover);
  swift_beginAccess();
  uint64_t v4 = *v3;
  char *v3 = a1;
}

uint64_t (*AXPreferences.voiceover.modify())()
{
  return j_j__swift_endAccess;
}

id AXPreferences.magnifier.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___AXPreferences_magnifier);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

void AXPreferences.magnifier.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___AXPreferences_magnifier);
  swift_beginAccess();
  uint64_t v4 = *v3;
  char *v3 = a1;
}

uint64_t (*AXPreferences.magnifier.modify())()
{
  return j_j__swift_endAccess;
}

id AXPreferences.spokenContent.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___AXPreferences_spokenContent);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

void AXPreferences.spokenContent.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___AXPreferences_spokenContent);
  swift_beginAccess();
  uint64_t v4 = *v3;
  char *v3 = a1;
}

uint64_t (*AXPreferences.spokenContent.modify())()
{
  return j_j__swift_endAccess;
}

id AXPreferences.assistiveTouch.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___AXPreferences_assistiveTouch);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

void AXPreferences.assistiveTouch.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___AXPreferences_assistiveTouch);
  swift_beginAccess();
  uint64_t v4 = *v3;
  char *v3 = a1;
}

uint64_t (*AXPreferences.assistiveTouch.modify())()
{
  return j_j__swift_endAccess;
}

id AXPreferences.liveSpeech.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___AXPreferences_liveSpeech);
  swift_beginAccess();
  id v2 = *v1;

  return v2;
}

void AXPreferences.liveSpeech.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___AXPreferences_liveSpeech);
  swift_beginAccess();
  uint64_t v4 = *v3;
  char *v3 = a1;
}

uint64_t (*AXPreferences.liveSpeech.modify())()
{
  return j__swift_endAccess;
}

uint64_t static AXPreferences.bridgeSettings()()
{
  uint64_t v0 = type metadata accessor for NPSettingsStore();
  uint64_t v1 = swift_allocObject();
  v5[3] = v0;
  void v5[4] = sub_18D3FF590();
  v5[0] = v1;
  swift_retain();
  uint64_t v2 = sub_18D40A6B8();
  type metadata accessor for AXPreferences(v2);
  sub_18D40A588();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  swift_release();
  return v4;
}

unint64_t sub_18D3FF590()
{
  unint64_t result = qword_1E91B2B10;
  if (!qword_1E91B2B10)
  {
    type metadata accessor for NPSettingsStore();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2B10);
  }
  return result;
}

uint64_t static AXPreferences.make(alternateStore:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, v2);

  return sub_18D3FF7F0((uint64_t)v4, v1, v2, v3);
}

uint64_t type metadata accessor for AXPreferences(uint64_t a1)
{
  return sub_18D3EC3C0(a1, &qword_1E91B2B28);
}

id _sSo13AXPreferencesC22AccessibilityUtilitiesE6sharedABvgZ_0()
{
  if (qword_1E91B2048 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = (void *)qword_1E91B2AE0;

  return v0;
}

uint64_t static AXSettings.make(alternateStore:)()
{
  uint64_t v0 = sub_18D40A6B8();
  type metadata accessor for AXPreferences(v0);
  sub_18D40A588();
  swift_release();
  return v2;
}

id sub_18D3FF7B4@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)AXPreferences), sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_18D3FF7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[3] = a3;
  void v10[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  uint64_t v7 = sub_18D40A6B8();
  type metadata accessor for AXPreferences(v7);
  sub_18D40A588();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v9;
}

unint64_t sub_18D3FF8A8()
{
  unint64_t result = qword_1E91B2B18;
  if (!qword_1E91B2B18)
  {
    sub_18D3EC3C0(255, &qword_1E91B2B20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2B18);
  }
  return result;
}

uint64_t sub_18D3FF914()
{
  type metadata accessor for SpokenContentSelectionProvider();
  uint64_t v0 = swift_allocObject();
  uint64_t result = SpokenContentSelectionProvider.init()();
  qword_1E91B5930 = v0;
  return result;
}

uint64_t SpokenContentSelectionProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SpokenContentSelectionProvider.init()();
  return v0;
}

uint64_t sub_18D3FF988()
{
  return 1;
}

uint64_t SpokenContentSelectionProvider.lock.getter()
{
  return swift_retain();
}

uint64_t sub_18D3FF998()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_18D404368(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

id sub_18D3FFA04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 24) == 1)
  {
    uint64_t v4 = (void *)(a1 + 32);
  }
  else
  {
    id v5 = objc_msgSend(self, sel_sharedPreferences);
    id v6 = objc_msgSend(v5, sel_outputVoice);

    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)(a1 + 32);
    *uint64_t v4 = v6;

    *((unsigned char *)v4 - _Block_object_dispose(&STACK[0x240], 8) = 1;
  }
  unint64_t v8 = (void *)*v4;
  id result = v8;
  *a2 = v8;
  return result;
}

uint64_t SpokenContentSelectionProvider.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1510);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  *(unsigned char *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  id v2 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_siriVoiceChanged, *MEMORY[0x1E4F4E320], 0);

  return v0;
}

uint64_t SpokenContentSelectionProvider.deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  swift_release();
  return v0;
}

uint64_t SpokenContentSelectionProvider.__deallocating_deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  swift_release();

  return MEMORY[0x1F4186488](v0, 40, 7);
}

void sub_18D3FFC34()
{
  id v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_18D4043C8();
  os_unfair_lock_unlock(v1);
}

void sub_18D3FFC98(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_sharedPreferences);
  id v3 = objc_msgSend(v2, sel_outputVoice);

  uint64_t v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v3;
}

uint64_t sub_18D3FFD88(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  uint8_t v2[16] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v2[17] = swift_task_alloc();
  uint64_t v3 = sub_18D40A338();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = sub_18D40A2C8();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  v2[24] = swift_task_alloc();
  uint64_t v5 = sub_18D40A358();
  v2[25] = v5;
  v2[26] = *(void *)(v5 - 8);
  v2[27] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D3FFF60, 0, 0);
}

uint64_t sub_18D3FFF60()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[24];
  sub_18D3C3FF4(v0[16], v3, &qword_1EB34DC60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18D3C3EE8(v0[24], &qword_1EB34DC60);
    if (qword_1E91B2048 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v4 = (void *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_spokenContent);
    swift_beginAccess();
    v0[28] = *(void *)(*v4
                       + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings_resolver);
    int v38 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[29] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_18D40047C;
    uint64_t v6 = v0[27];
    return v38(v6);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[26] + 32))(v0[27], v0[24], v0[25]);
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[22];
    uint64_t v11 = v0[19];
    uint64_t v10 = v0[20];
    uint64_t v13 = v0[17];
    uint64_t v12 = v0[18];
    sub_18D40A348();
    sub_18D40A328();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8) == 1)
    {
      uint64_t v14 = v0[17];
      uint64_t v15 = v0[15];
      (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
      sub_18D3C3EE8(v14, &qword_1E91B1538);
      uint64_t v16 = sub_18D40A678();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    }
    else
    {
      unint64_t v17 = v0 + 14;
      (*(void (**)(void, void, void))(v0[22] + 32))(v0[23], v0[17], v0[21]);
      if (qword_1E91B2048 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v18 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_spokenContent);
      swift_beginAccess();
      unsigned __int8 v19 = *(void **)((char *)*v18
                     + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
      id v20 = *v18;
      id v21 = v19;
      sub_18D40A718();

      uint64_t v22 = *v17;
      if (*(void *)(*v17 + 16) && (unint64_t v23 = sub_18D3F0A5C(v0[23]), (v24 & 1) != 0))
      {
        unint64_t v25 = v23;
        uint64_t v26 = v0[15];
        uint64_t v27 = *(void *)(v22 + 56);
        uint64_t v28 = sub_18D40A678();
        uint64_t v29 = *(void *)(v28 - 8);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 16))(v26, v27 + *(void *)(v29 + 72) * v25, v28);
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v28 = sub_18D40A678();
        uint64_t v29 = *(void *)(v28 - 8);
        uint64_t v30 = 1;
      }
      uint64_t v32 = v0[26];
      uint64_t v31 = v0[27];
      uint64_t v33 = v0[25];
      uint64_t v35 = v0[22];
      uint64_t v34 = v0[23];
      uint64_t v36 = v0[21];
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v29 + 56))(v0[15], v30, 1, v28);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
}

uint64_t sub_18D40047C()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](sub_18D400594, 0, 0);
}

uint64_t sub_18D400594()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v5 = v0[18];
  sub_18D40A348();
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    uint64_t v7 = v0[17];
    uint64_t v8 = v0[15];
    (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
    sub_18D3C3EE8(v7, &qword_1E91B1538);
    uint64_t v9 = sub_18D40A678();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  }
  else
  {
    uint64_t v10 = v0 + 14;
    (*(void (**)(void, void, void))(v0[22] + 32))(v0[23], v0[17], v0[21]);
    if (qword_1E91B2048 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v11 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_spokenContent);
    swift_beginAccess();
    uint64_t v12 = *(void **)((char *)*v11
                   + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences21SpokenContentSettings__voiceSelectionsByLanguage);
    id v13 = *v11;
    id v14 = v12;
    sub_18D40A718();

    uint64_t v15 = *v10;
    if (*(void *)(*v10 + 16) && (unint64_t v16 = sub_18D3F0A5C(v0[23]), (v17 & 1) != 0))
    {
      unint64_t v18 = v16;
      uint64_t v19 = v0[15];
      uint64_t v20 = *(void *)(v15 + 56);
      uint64_t v21 = sub_18D40A678();
      uint64_t v22 = *(void *)(v21 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16))(v19, v20 + *(void *)(v22 + 72) * v18, v21);
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v21 = sub_18D40A678();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = 1;
    }
    uint64_t v25 = v0[26];
    uint64_t v24 = v0[27];
    uint64_t v26 = v0[25];
    uint64_t v28 = v0[22];
    uint64_t v27 = v0[23];
    uint64_t v29 = v0[21];
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v22 + 56))(v0[15], v23, 1, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_18D40091C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_18D3C40D8;
  return sub_18D3FFD88(a1, a2);
}

BOOL AssistiveTouchSelectionProvider.enabled.getter()
{
  if (*v0 != 1) {
    return 1;
  }
  if (qword_1E91B2048 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_assistiveTouch);
  swift_beginAccess();
  uint64_t v2 = *(void **)((char *)*v1
                + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__scannerSpeechEnabled);
  id v3 = *v1;
  id v4 = v2;
  sub_18D40A718();

  return v6 == 1 && _AXSAssistiveTouchScannerEnabled() != 0;
}

uint64_t AssistiveTouchSelectionProvider.selection(forLocale:)(uint64_t a1, uint64_t a2)
{
  void v2[9] = a1;
  v2[10] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v2[11] = swift_task_alloc();
  uint64_t v3 = sub_18D40A338();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = sub_18D40A2C8();
  v2[15] = v4;
  uint8_t v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  v2[18] = swift_task_alloc();
  uint64_t v5 = sub_18D40A358();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D400C90, 0, 0);
}

uint64_t sub_18D400C90()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  sub_18D3C3FF4(v0[10], v3, &qword_1EB34DC60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18D3C3EE8(v0[18], &qword_1EB34DC60);
    sub_18D40A3E8();
    v0[22] = sub_18D40A3D8();
    int v37 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[23] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_18D401128;
    uint64_t v5 = v0[21];
    return v37(v5);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[20] + 32))(v0[21], v0[18], v0[19]);
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[16];
    uint64_t v10 = v0[13];
    uint64_t v9 = v0[14];
    uint64_t v12 = v0[11];
    uint64_t v11 = v0[12];
    sub_18D40A348();
    sub_18D40A328();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7) == 1)
    {
      uint64_t v13 = v0[11];
      uint64_t v14 = v0[9];
      (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
      sub_18D3C3EE8(v13, &qword_1E91B1538);
      uint64_t v15 = sub_18D40A678();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    }
    else
    {
      unint64_t v16 = v0 + 8;
      (*(void (**)(void, void, void))(v0[16] + 32))(v0[17], v0[11], v0[15]);
      if (qword_1E91B2048 != -1) {
        swift_once();
      }
      swift_beginAccess();
      char v17 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_assistiveTouch);
      swift_beginAccess();
      unint64_t v18 = *(void **)((char *)*v17
                     + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
      id v19 = *v17;
      id v20 = v18;
      sub_18D40A718();

      uint64_t v21 = *v16;
      if (*(void *)(*v16 + 16) && (unint64_t v22 = sub_18D3F0A5C(v0[17]), (v23 & 1) != 0))
      {
        unint64_t v24 = v22;
        uint64_t v25 = v0[9];
        uint64_t v26 = *(void *)(v21 + 56);
        uint64_t v27 = sub_18D40A678();
        uint64_t v28 = *(void *)(v27 - 8);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16))(v25, v26 + *(void *)(v28 + 72) * v24, v27);
        uint64_t v29 = 0;
      }
      else
      {
        uint64_t v27 = sub_18D40A678();
        uint64_t v28 = *(void *)(v27 - 8);
        uint64_t v29 = 1;
      }
      uint64_t v31 = v0[20];
      uint64_t v30 = v0[21];
      uint64_t v32 = v0[19];
      uint64_t v34 = v0[16];
      uint64_t v33 = v0[17];
      uint64_t v35 = v0[15];
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v28 + 56))(v0[9], v29, 1, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
}

uint64_t sub_18D401128()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](sub_18D401240, 0, 0);
}

uint64_t sub_18D401240()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  sub_18D40A348();
  sub_18D40A328();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[9];
    (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
    sub_18D3C3EE8(v7, &qword_1E91B1538);
    uint64_t v9 = sub_18D40A678();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  }
  else
  {
    uint64_t v10 = v0 + 8;
    (*(void (**)(void, void, void))(v0[16] + 32))(v0[17], v0[11], v0[15]);
    if (qword_1E91B2048 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v11 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_assistiveTouch);
    swift_beginAccess();
    uint64_t v12 = *(void **)((char *)*v11
                   + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences14AssistiveTouch__defaultVoiceSelectionsByLanguage);
    id v13 = *v11;
    id v14 = v12;
    sub_18D40A718();

    uint64_t v15 = *v10;
    if (*(void *)(*v10 + 16) && (unint64_t v16 = sub_18D3F0A5C(v0[17]), (v17 & 1) != 0))
    {
      unint64_t v18 = v16;
      uint64_t v19 = v0[9];
      uint64_t v20 = *(void *)(v15 + 56);
      uint64_t v21 = sub_18D40A678();
      uint64_t v22 = *(void *)(v21 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16))(v19, v20 + *(void *)(v22 + 72) * v18, v21);
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v21 = sub_18D40A678();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = 1;
    }
    uint64_t v25 = v0[20];
    uint64_t v24 = v0[21];
    uint64_t v26 = v0[19];
    uint64_t v28 = v0[16];
    uint64_t v27 = v0[17];
    uint64_t v29 = v0[15];
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v22 + 56))(v0[9], v23, 1, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_18D4015CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_18D3C40D8;
  return AssistiveTouchSelectionProvider.selection(forLocale:)(a1, a2);
}

AccessibilityUtilities::VoiceOverSelectionProvider __swiftcall VoiceOverSelectionProvider.init(onlyEnabled:)(AccessibilityUtilities::VoiceOverSelectionProvider onlyEnabled)
{
  v1->onlyEnabled = onlyEnabled.onlyEnabled;
  return onlyEnabled;
}

uint64_t VoiceOverSelectionProvider.selection(forLocale:)(uint64_t a1, uint64_t a2)
{
  v2[18] = a1;
  v2[19] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v3 = sub_18D40A338();
  v2[22] = v3;
  v2[23] = *(void *)(v3 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v4 = sub_18D40A2C8();
  v2[25] = v4;
  v2[26] = *(void *)(v4 - 8);
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1540);
  v2[28] = swift_task_alloc();
  uint64_t v5 = sub_18D40A4E8();
  v2[29] = v5;
  v2[30] = *(void *)(v5 - 8);
  v2[31] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  void v2[32] = v6;
  v2[33] = *(void *)(v6 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  v2[36] = swift_task_alloc();
  uint64_t v7 = sub_18D40A358();
  v2[37] = v7;
  v2[38] = *(void *)(v7 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18D401988, 0, 0);
}

uint64_t sub_18D401988()
{
  v0[44] = sub_18D40A3E8();
  v0[45] = sub_18D40A3D8();
  uint64_t v4 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[46] = v1;
  void *v1 = v0;
  v1[1] = sub_18D401A4C;
  uint64_t v2 = v0[42];
  return v4(v2);
}

uint64_t sub_18D401A4C()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](sub_18D401B64, 0, 0);
}

uint64_t sub_18D401B64()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  sub_18D3C3FF4(*(void *)(v0 + 152), v3, &qword_1EB34DC60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18D3C3EE8(*(void *)(v0 + 288), &qword_1EB34DC60);
    *(void *)(v0 + 376) = sub_18D40A3D8();
    unsigned int v67 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FAF1D8] + MEMORY[0x1E4FAF1D8]);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_18D4022E8;
    uint64_t v5 = *(void *)(v0 + 320);
    return v67(v5);
  }
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v9 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 304);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 32))(v8, *(void *)(v0 + 288), v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v7, v8, v9);
  uint64_t v11 = sub_18D40A2A8();
  uint64_t v13 = v12;
  if (v11 == sub_18D40A2A8() && v13 == v14) {
    char v15 = 1;
  }
  else {
    char v15 = sub_18D40ACA8();
  }
  uint64_t v16 = *(void *)(v0 + 328);
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 304);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  *(unsigned char *)(v0 + 48_Block_object_dispose(&STACK[0x240], 8) = v15 & 1;
  if (qword_1E91B2048 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v19 = (void **)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_voiceover);
  swift_beginAccess();
  uint64_t v20 = *v19;
  uint64_t v21 = *(void **)((char *)*v19 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
  id v22 = v20;
  id v23 = v21;
  sub_18D40A718();

  uint64_t v24 = *(void *)(v0 + 136);
  *(void *)(v0 + 392) = v24;
  uint64_t v25 = *(void *)(v24 + 16);
  *(void *)(v0 + 400) = v25;
  if (!v25)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void *)(v0 + 200);
    uint64_t v32 = *(void *)(v0 + 208);
    uint64_t v34 = *(void *)(v0 + 184);
    uint64_t v33 = *(void *)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 168);
    uint64_t v35 = *(void *)(v0 + 176);
    sub_18D40A348();
    sub_18D40A328();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v36, 1, v31) == 1)
    {
      uint64_t v37 = *(void *)(v0 + 344);
      uint64_t v38 = *(void *)(v0 + 296);
      uint64_t v39 = *(void *)(v0 + 168);
      char v40 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 304) + 8);
      v40(*(void *)(v0 + 336), v38);
      v40(v37, v38);
      sub_18D3C3EE8(v39, &qword_1E91B1538);
    }
    else
    {
      int v41 = *(unsigned __int8 *)(v0 + 488);
      (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 32))(*(void *)(v0 + 216), *(void *)(v0 + 168), *(void *)(v0 + 200));
      uint64_t v43 = *(void *)(v0 + 208);
      uint64_t v42 = *(void *)(v0 + 216);
      uint64_t v44 = *(void *)(v0 + 200);
      if (v41 == 1)
      {
        uint64_t v45 = *(void *)(v0 + 160);
        int v46 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_voiceover);
        swift_beginAccess();
        unsigned __int8 v47 = *(void **)((char *)*v46
                       + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
        id v48 = *v46;
        id v49 = v47;
        sub_18D40A718();

        uint64_t v50 = *(void *)(v0 + 128);
        *(void *)(v0 + 456) = v50;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v45, v42, v44);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v45, 0, 1, v44);
        uint64_t v51 = sub_18D40A3D8();
        *(void *)(v0 + 464) = v51;
        int64_t v52 = (void *)swift_task_alloc();
        *(void *)(v0 + 472) = v52;
        *int64_t v52 = v0;
        v52[1] = sub_18D403508;
        uint64_t v53 = *(void *)(v0 + 160);
        uint64_t v54 = *(void *)(v0 + 144);
        return Dictionary<>.selection(forLanguage:withResolver:exists:)(v54, v53, v51, 0, v50);
      }
      uint64_t v60 = *(void *)(v0 + 336);
      uint64_t v59 = *(void *)(v0 + 344);
      uint64_t v61 = *(void *)(v0 + 296);
      uint64_t v62 = *(void *)(v0 + 304);
      (*(void (**)(void, void))(v43 + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v63(v60, v61);
      v63(v59, v61);
    }
    uint64_t v64 = *(void *)(v0 + 144);
    uint64_t v65 = sub_18D40A678();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 1, 1, v65);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v66 = *(uint64_t (**)(void))(v0 + 8);
    return v66();
  }
  uint64_t v26 = 0;
  uint64_t v27 = *(void *)(v0 + 264);
  *(_DWORD *)(v0 + 480) = *(_DWORD *)(v27 + 80);
  *(void *)(v0 + 40_Block_object_dispose(&STACK[0x240], 8) = *(void *)(v27 + 72);
  while (1)
  {
    *(void *)(v0 + 416) = 0;
    *(void *)(v0 + 424) = v26;
    uint64_t v28 = *(void *)(v0 + 256);
    sub_18D3C9168(*(void *)(v0 + 392)+ ((*(unsigned __int8 *)(v0 + 480) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 480))+ *(void *)(v0 + 408) * v26, *(void *)(v0 + 280));
    *(_DWORD *)(v0 + 484) = *(_DWORD *)(v28 + 20);
    uint64_t v29 = sub_18D40A658();
    *(void *)(v0 + 432) = v30;
    if (v30) {
      break;
    }
    sub_18D3F3374(*(void *)(v0 + 280));
    uint64_t v26 = *(void *)(v0 + 424) + 1;
    if (v26 == *(void *)(v0 + 400)) {
      goto LABEL_15;
    }
  }
  uint64_t v55 = v29;
  uint64_t v56 = v30;
  *(void *)(v0 + 440) = sub_18D40A3D8();
  id v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1E8] + MEMORY[0x1E4FAF1E8]);
  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 44_Block_object_dispose(&STACK[0x240], 8) = v57;
  void *v57 = v0;
  v57[1] = sub_18D4029EC;
  uint64_t v58 = *(void *)(v0 + 224);
  return v68(v58, v55, v56);
}

uint64_t sub_18D4022E8()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](sub_18D402400, 0, 0);
}

uint64_t sub_18D402400()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 304) + 32))(*(void *)(v0 + 344), *(void *)(v0 + 320), *(void *)(v0 + 296));
  *(unsigned char *)(v0 + 48_Block_object_dispose(&STACK[0x240], 8) = 1;
  if (qword_1E91B2048 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = (void **)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_voiceover);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)((char *)*v1 + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__voiceRotors);
  id v4 = v2;
  id v5 = v3;
  sub_18D40A718();

  uint64_t v6 = *(void *)(v0 + 136);
  *(void *)(v0 + 392) = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  *(void *)(v0 + 400) = v7;
  if (!v7)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 176);
    sub_18D40A348();
    sub_18D40A328();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      uint64_t v19 = *(void *)(v0 + 344);
      uint64_t v20 = *(void *)(v0 + 296);
      uint64_t v21 = *(void *)(v0 + 168);
      id v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 304) + 8);
      v22(*(void *)(v0 + 336), v20);
      v22(v19, v20);
      sub_18D3C3EE8(v21, &qword_1E91B1538);
    }
    else
    {
      int v23 = *(unsigned __int8 *)(v0 + 488);
      (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 32))(*(void *)(v0 + 216), *(void *)(v0 + 168), *(void *)(v0 + 200));
      uint64_t v25 = *(void *)(v0 + 208);
      uint64_t v24 = *(void *)(v0 + 216);
      uint64_t v26 = *(void *)(v0 + 200);
      if (v23 == 1)
      {
        uint64_t v27 = *(void *)(v0 + 160);
        uint64_t v28 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_voiceover);
        swift_beginAccess();
        uint64_t v29 = *(void **)((char *)*v28
                       + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
        id v30 = *v28;
        id v31 = v29;
        sub_18D40A718();

        uint64_t v32 = *(void *)(v0 + 128);
        *(void *)(v0 + 456) = v32;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v27, v24, v26);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v26);
        uint64_t v33 = sub_18D40A3D8();
        *(void *)(v0 + 464) = v33;
        uint64_t v34 = (void *)swift_task_alloc();
        *(void *)(v0 + 472) = v34;
        *uint64_t v34 = v0;
        v34[1] = sub_18D403508;
        uint64_t v35 = *(void *)(v0 + 160);
        uint64_t v36 = *(void *)(v0 + 144);
        return Dictionary<>.selection(forLanguage:withResolver:exists:)(v36, v35, v33, 0, v32);
      }
      uint64_t v43 = *(void *)(v0 + 336);
      uint64_t v42 = *(void *)(v0 + 344);
      uint64_t v44 = *(void *)(v0 + 296);
      uint64_t v45 = *(void *)(v0 + 304);
      (*(void (**)(void, void))(v25 + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
      int v46 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v46(v43, v44);
      v46(v42, v44);
    }
    uint64_t v47 = *(void *)(v0 + 144);
    uint64_t v48 = sub_18D40A678();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v49 = *(uint64_t (**)(void))(v0 + 8);
    return v49();
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(v0 + 264);
  *(_DWORD *)(v0 + 480) = *(_DWORD *)(v9 + 80);
  *(void *)(v0 + 40_Block_object_dispose(&STACK[0x240], 8) = *(void *)(v9 + 72);
  while (1)
  {
    *(void *)(v0 + 416) = 0;
    *(void *)(v0 + 424) = v8;
    uint64_t v10 = *(void *)(v0 + 256);
    sub_18D3C9168(*(void *)(v0 + 392)+ ((*(unsigned __int8 *)(v0 + 480) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 480))+ *(void *)(v0 + 408) * v8, *(void *)(v0 + 280));
    *(_DWORD *)(v0 + 484) = *(_DWORD *)(v10 + 20);
    uint64_t v11 = sub_18D40A658();
    *(void *)(v0 + 432) = v12;
    if (v12) {
      break;
    }
    sub_18D3F3374(*(void *)(v0 + 280));
    uint64_t v8 = *(void *)(v0 + 424) + 1;
    if (v8 == *(void *)(v0 + 400)) {
      goto LABEL_7;
    }
  }
  uint64_t v38 = v11;
  uint64_t v39 = v12;
  *(void *)(v0 + 440) = sub_18D40A3D8();
  uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1E8] + MEMORY[0x1E4FAF1E8]);
  char v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 44_Block_object_dispose(&STACK[0x240], 8) = v40;
  *char v40 = v0;
  v40[1] = sub_18D4029EC;
  uint64_t v41 = *(void *)(v0 + 224);
  return v50(v41, v38, v39);
}

uint64_t sub_18D4029EC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4188298](sub_18D402B20, 0, 0);
}

uint64_t sub_18D402B20()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_18D3F3374(*(void *)(v0 + 280));
    sub_18D3C3EE8(v3, &qword_1E91B1540);
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 296);
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 248), v3, v1);
  sub_18D40A438();
  uint64_t v7 = sub_18D40A2A8();
  uint64_t v9 = v8;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v4, v6);
  uint64_t v11 = sub_18D40A2A8();
  uint64_t v14 = *(void *)(v0 + 272);
  uint64_t v13 = *(void *)(v0 + 280);
  if (v7 == v11 && v9 == v12)
  {
    swift_bridgeObjectRelease_n();
    sub_18D3C9168(v13, v14);
  }
  else
  {
    char v15 = sub_18D40ACA8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18D3C9168(v13, v14);
    if ((v15 & 1) == 0)
    {
      sub_18D3F3374(*(void *)(v0 + 272));
      goto LABEL_14;
    }
  }
  uint64_t v16 = *(uint64_t **)(v0 + 272);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = (void **)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_voiceover);
  swift_beginAccess();
  uint64_t v20 = (char *)*v19;
  uint64_t v21 = *(void **)&v20[OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__currentRotorVoiceIdentifier];
  swift_bridgeObjectRetain();
  id v22 = v20;
  id v23 = v21;
  sub_18D40A718();

  uint64_t v24 = *(void *)(v0 + 120);
  if (v24)
  {
    uint64_t v25 = *(void *)(v0 + 272);
    if (v18 == *(void *)(v0 + 112) && v24 == v17)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_18D3F3374(v25);
      swift_bridgeObjectRelease_n();
LABEL_14:
      uint64_t v27 = *(void *)(v0 + 416);
      uint64_t v28 = *(void *)(v0 + 344);
      uint64_t v29 = sub_18D40A448();
      uint64_t v30 = swift_task_alloc();
      *(void *)(v30 + 16) = v28;
      LOBYTE(v2_Block_object_dispose(&STACK[0x240], 8) = sub_18D403868((uint64_t (*)(char *))sub_18D4043F0, v30, v29);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      if (v28)
      {
        uint64_t v32 = *(void *)(v0 + 336);
        uint64_t v31 = *(void *)(v0 + 344);
        uint64_t v33 = *(void *)(v0 + 296);
        uint64_t v34 = *(void *)(v0 + 280);
        uint64_t v35 = *(void *)(v0 + 144);
        uint64_t v36 = v34 + *(int *)(v0 + 484);
        (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
        swift_bridgeObjectRelease();
        v10(v32, v33);
        v10(v31, v33);
        uint64_t v37 = sub_18D40A678();
        uint64_t v38 = *(void *)(v37 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v35, v36, v37);
        sub_18D3F3374(v34);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      else
      {
        if (*(unsigned char *)(v0 + 488))
        {
          (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
          goto LABEL_24;
        }
        uint64_t v40 = *(void *)(v0 + 344);
        uint64_t v42 = *(void *)(v0 + 240);
        uint64_t v41 = *(void *)(v0 + 248);
        uint64_t v43 = *(void *)(v0 + 232);
        uint64_t v44 = sub_18D40A448();
        uint64_t v45 = swift_task_alloc();
        *(void *)(v45 + 16) = v40;
        LOBYTE(v40) = sub_18D403868((uint64_t (*)(char *))sub_18D404410, v45, v44);
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
        if ((v40 & 1) == 0) {
          goto LABEL_24;
        }
        uint64_t v46 = *(int *)(v0 + 484);
        uint64_t v47 = *(void *)(v0 + 336);
        uint64_t v48 = *(void *)(v0 + 344);
        uint64_t v49 = *(void *)(v0 + 296);
        uint64_t v50 = *(void *)(v0 + 280);
        uint64_t v51 = *(void *)(v0 + 144);
        swift_bridgeObjectRelease();
        v10(v47, v49);
        v10(v48, v49);
        uint64_t v52 = sub_18D40A678();
        uint64_t v53 = *(void *)(v52 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v50 + v46, v52);
        sub_18D3F3374(v50);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v51, 0, 1, v52);
      }
LABEL_37:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v94 = *(uint64_t (**)(void))(v0 + 8);
      return v94();
    }
    char v26 = sub_18D40ACA8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_18D3F3374(v25);
    swift_bridgeObjectRelease_n();
    if (v26) {
      goto LABEL_14;
    }
  }
  else
  {
    sub_18D3F3374(*(void *)(v0 + 272));
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = *(void *)(v0 + 280);
  (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
  sub_18D3F3374(v39);
LABEL_17:
  uint64_t v27 = *(void *)(v0 + 416);
  while (1)
  {
    uint64_t v57 = *(void *)(v0 + 424) + 1;
    if (v57 == *(void *)(v0 + 400))
    {
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void *)(v0 + 200);
      uint64_t v59 = *(void *)(v0 + 208);
      uint64_t v61 = *(void *)(v0 + 184);
      uint64_t v60 = *(void *)(v0 + 192);
      uint64_t v63 = *(void *)(v0 + 168);
      uint64_t v62 = *(void *)(v0 + 176);
      sub_18D40A348();
      sub_18D40A328();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v63, 1, v58) == 1)
      {
        uint64_t v64 = *(void *)(v0 + 344);
        uint64_t v65 = *(void *)(v0 + 296);
        uint64_t v66 = *(void *)(v0 + 168);
        unsigned int v67 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 304) + 8);
        v67(*(void *)(v0 + 336), v65);
        v67(v64, v65);
        sub_18D3C3EE8(v66, &qword_1E91B1538);
      }
      else
      {
        int v68 = *(unsigned __int8 *)(v0 + 488);
        (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 32))(*(void *)(v0 + 216), *(void *)(v0 + 168), *(void *)(v0 + 200));
        if (v68 == 1)
        {
          uint64_t v70 = *(void *)(v0 + 208);
          uint64_t v69 = *(void *)(v0 + 216);
          uint64_t v71 = *(void *)(v0 + 200);
          uint64_t v72 = *(void *)(v0 + 160);
          id v73 = (id *)(qword_1E91B2AE0 + OBJC_IVAR___AXPreferences_voiceover);
          swift_beginAccess();
          uint64_t v74 = *(void **)((char *)*v73
                         + OBJC_IVAR____TtCE22AccessibilityUtilitiesCSo13AXPreferences9VoiceOver__defaultVoiceSelectionsByLanguage);
          id v75 = *v73;
          id v76 = v74;
          sub_18D40A718();

          uint64_t v77 = *(void *)(v0 + 128);
          *(void *)(v0 + 456) = v77;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v72, v69, v71);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v72, 0, 1, v71);
          uint64_t v78 = sub_18D40A3D8();
          *(void *)(v0 + 464) = v78;
          uint64_t v79 = (void *)swift_task_alloc();
          *(void *)(v0 + 472) = v79;
          *uint64_t v79 = v0;
          v79[1] = sub_18D403508;
          uint64_t v80 = *(void *)(v0 + 160);
          uint64_t v81 = *(void *)(v0 + 144);
          return Dictionary<>.selection(forLanguage:withResolver:exists:)(v81, v80, v78, 0, v77);
        }
        uint64_t v87 = *(void *)(v0 + 336);
        uint64_t v88 = *(void *)(v0 + 344);
        uint64_t v89 = *(void *)(v0 + 296);
        uint64_t v90 = *(void *)(v0 + 304);
        (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
        id v91 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
        v91(v87, v89);
        v91(v88, v89);
      }
      uint64_t v92 = *(void *)(v0 + 144);
      uint64_t v93 = sub_18D40A678();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v92, 1, 1, v93);
      goto LABEL_37;
    }
    *(void *)(v0 + 416) = v27;
    *(void *)(v0 + 424) = v57;
    uint64_t v54 = *(void *)(v0 + 256);
    sub_18D3C9168(*(void *)(v0 + 392)+ ((*(unsigned __int8 *)(v0 + 480) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 480))+ *(void *)(v0 + 408) * v57, *(void *)(v0 + 280));
    *(_DWORD *)(v0 + 484) = *(_DWORD *)(v54 + 20);
    uint64_t v55 = sub_18D40A658();
    *(void *)(v0 + 432) = v56;
    if (v56) {
      break;
    }
LABEL_24:
    sub_18D3F3374(*(void *)(v0 + 280));
  }
  uint64_t v83 = v55;
  uint64_t v84 = v56;
  *(void *)(v0 + 440) = sub_18D40A3D8();
  id v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FAF1E8] + MEMORY[0x1E4FAF1E8]);
  long long v85 = (void *)swift_task_alloc();
  *(void *)(v0 + 44_Block_object_dispose(&STACK[0x240], 8) = v85;
  *long long v85 = v0;
  v85[1] = sub_18D4029EC;
  uint64_t v86 = *(void *)(v0 + 224);
  return v95(v86, v83, v84);
}

uint64_t sub_18D403508()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  sub_18D3C3EE8(v1, &qword_1E91B1538);
  return MEMORY[0x1F4188298](sub_18D403668, 0, 0);
}

uint64_t sub_18D403668()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[38];
  (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v1, v3);
  v5(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_18D4037C8()
{
  uint64_t v0 = sub_18D40A2A8();
  uint64_t v2 = v1;
  if (v0 == sub_18D40A2A8() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_18D40ACA8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_18D403868(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a1;
  uint64_t v5 = sub_18D40A358();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB34DC60);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a3 + 56);
  uint64_t v28 = a3 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v34 = v6 + 16;
  uint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v33 = v6 + 48;
  uint64_t v31 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v36 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (v17)
  {
    unint64_t v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v21 = v20 | (v19 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v13, *(void *)(v36 + 48) + *(void *)(v6 + 72) * v21, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5) == 1) {
      goto LABEL_29;
    }
    (*v31)(v9, v13, v5);
    char v25 = v32(v9);
    if (v3)
    {
      (*v30)(v9, v5);
      swift_release();
      return v27 & 1;
    }
    char v26 = v25;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v30)(v9, v5);
    if (v26)
    {
      swift_release();
      char v27 = 1;
      return v27 & 1;
    }
  }
  if (__OFADD__(v19++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v19 >= v29) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v28 + 8 * v19);
  if (v23)
  {
LABEL_18:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_19;
  }
  int64_t v24 = v19 + 1;
  if (v19 + 1 >= v29) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v28 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v19 + 2;
  if (v19 + 2 >= v29) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v28 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v19 + 3;
  if (v19 + 3 >= v29) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v28 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v19 + 4;
  if (v19 + 4 >= v29)
  {
LABEL_28:
    (*v35)(v13, 1, 1, v5);
LABEL_29:
    swift_release();
    char v27 = 0;
    return v27 & 1;
  }
  unint64_t v23 = *(void *)(v28 + 8 * v24);
  if (v23)
  {
LABEL_17:
    int64_t v19 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v29) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v28 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_18D403C24(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v50 = sub_18D40A2C8();
  uint64_t v48 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50, v2);
  uint64_t v45 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2368);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v47 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B1538);
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v46 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v15 = (char *)&v45 - v14;
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = sub_18D40A338();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  int64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v25);
  char v27 = (char *)&v45 - v26;
  sub_18D40A348();
  sub_18D40A328();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v27, v19);
  sub_18D40A348();
  sub_18D40A328();
  int64_t v29 = v24;
  uint64_t v31 = (uint64_t)v47;
  uint64_t v30 = v48;
  v28(v29, v19);
  uint64_t v32 = (uint64_t)v18;
  uint64_t v33 = (uint64_t)v15;
  uint64_t v34 = v50;
  uint64_t v35 = v31 + *(int *)(v5 + 56);
  sub_18D3C3FF4(v32, v31, &qword_1E91B1538);
  sub_18D3C3FF4((uint64_t)v15, v35, &qword_1E91B1538);
  uint64_t v36 = v30;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v37(v31, 1, v34) == 1)
  {
    sub_18D3C3EE8(v33, &qword_1E91B1538);
    sub_18D3C3EE8(v32, &qword_1E91B1538);
    int v38 = v37(v35, 1, v34);
    if (v38 == 1) {
      uint64_t v39 = &qword_1E91B1538;
    }
    else {
      uint64_t v39 = &qword_1E91B2368;
    }
    if (v38 == 1) {
      char v40 = -1;
    }
    else {
      char v40 = 0;
    }
  }
  else
  {
    uint64_t v41 = v46;
    sub_18D3C3FF4(v31, v46, &qword_1E91B1538);
    if (v37(v35, 1, v34) == 1)
    {
      sub_18D3C3EE8(v33, &qword_1E91B1538);
      sub_18D3C3EE8(v32, &qword_1E91B1538);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v41, v34);
      char v40 = 0;
      uint64_t v39 = &qword_1E91B2368;
    }
    else
    {
      uint64_t v42 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v45, v35, v34);
      sub_18D404860(&qword_1E91B1530, 255, MEMORY[0x1E4F279D8]);
      char v40 = sub_18D40A7B8();
      uint64_t v49 = v32;
      uint64_t v43 = *(void (**)(char *, uint64_t))(v36 + 8);
      v43(v42, v34);
      uint64_t v39 = &qword_1E91B1538;
      sub_18D3C3EE8(v33, &qword_1E91B1538);
      sub_18D3C3EE8(v49, &qword_1E91B1538);
      v43((char *)v41, v34);
    }
  }
  sub_18D3C3EE8(v31, v39);
  return v40 & 1;
}

BOOL VoiceOverSelectionProvider.enabled.getter()
{
  return *v0 != 1 || _AXSVoiceOverTouchEnabled() != 0;
}

BOOL sub_18D404100()
{
  return *v0 != 1 || _AXSVoiceOverTouchEnabled() != 0;
}

uint64_t sub_18D404138(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_18D3C2CDC;
  return VoiceOverSelectionProvider.selection(forLocale:)(a1, a2);
}

Swift::Void __swiftcall CoreSynthesizer.setupAccessibilitySettingAwareness()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2B48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18D4310F0;
  strcpy((char *)(inited + 32), "accessibility");
  *(_WORD *)(inited + 46) = -4864;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E91B2B50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_18D4312B0;
  *(void *)(v1 + 56) = &type metadata for VoiceOverSelectionProvider;
  *(void *)(v1 + 64) = sub_18D404430();
  *(unsigned char *)(v1 + 32) = 1;
  *(void *)(v1 + 96) = &type metadata for AssistiveTouchSelectionProvider;
  *(void *)(v1 + 104) = sub_18D404484();
  *(unsigned char *)(v1 + 72) = 1;
  uint64_t v2 = type metadata accessor for SpokenContentSelectionProvider();
  uint64_t v3 = swift_allocObject();
  SpokenContentSelectionProvider.init()();
  *(void *)(v1 + 136) = v2;
  *(void *)(v1 + 144) = sub_18D404860(qword_1E91B2B68, v4, (void (*)(uint64_t))type metadata accessor for SpokenContentSelectionProvider);
  *(void *)(v1 + 112) = v3;
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x240], 8) = v1;
  sub_18D3BFDA8(inited);
  sub_18D40A3F8();
}

void *sub_18D404324@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

void *sub_18D404368@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void sub_18D4043AC()
{
  sub_18D3FFC98(v0);
}

uint64_t sub_18D4043C8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_18D4043F0()
{
  return sub_18D4037C8() & 1;
}

uint64_t sub_18D404410(uint64_t a1)
{
  return sub_18D403C24(a1, *(void *)(v1 + 16)) & 1;
}

unint64_t sub_18D404430()
{
  unint64_t result = qword_1E91B2B58;
  if (!qword_1E91B2B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2B58);
  }
  return result;
}

unint64_t sub_18D404484()
{
  unint64_t result = qword_1E91B2B60;
  if (!qword_1E91B2B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91B2B60);
  }
  return result;
}

uint64_t type metadata accessor for SpokenContentSelectionProvider()
{
  return self;
}

uint64_t method lookup function for SpokenContentSelectionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SpokenContentSelectionProvider);
}

uint64_t dispatch thunk of SpokenContentSelectionProvider.enabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SpokenContentSelectionProvider.selectedSiriVoice.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SpokenContentSelectionProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of SpokenContentSelectionProvider.siriVoiceChanged()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SpokenContentSelectionProvider.selection(forLocale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 184) + **(int **)(*(void *)v2 + 184));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_18D3C40D8;
  return v8(a1, a2);
}

ValueMetadata *type metadata accessor for AssistiveTouchSelectionProvider()
{
  return &type metadata for AssistiveTouchSelectionProvider;
}

uint64_t _s22AccessibilityUtilities31AssistiveTouchSelectionProviderVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s22AccessibilityUtilities31AssistiveTouchSelectionProviderVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18D404828);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VoiceOverSelectionProvider()
{
  return &type metadata for VoiceOverSelectionProvider;
}

uint64_t sub_18D404860(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18D4048A8()
{
  return sub_18D4043C8();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void __getVTPreferencesClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *VoiceTriggerLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXUtilitiesCommon.m", 14, @"%s", *a1);

  __break(1u);
}

void __getVTPreferencesClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getVTPreferencesClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXUtilitiesCommon.m", 15, @"Unable to find class %s", "VTPreferences");

  __break(1u);
}

void soft_AXUIAssistiveTouchStringForName_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *soft_AXUIAssistiveTouchStringForName(NSString *__strong, BOOL)");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 40, @"%s", dlerror());

  __break(1u);
}

void soft_paCurrentRouteSupportsTransparencyAccommodations_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"BOOL soft_paCurrentRouteSupportsTransparencyAccommodations(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 86, @"%s", dlerror());

  __break(1u);
}

void soft_paBluetoothDeviceSupportsSSL_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"BOOL soft_paBluetoothDeviceSupportsSSL(BluetoothDevice *__strong)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 87, @"%s", dlerror());

  __break(1u);
}

void AccessibilityUIUtilitiesLibrary_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *AccessibilityUIUtilitiesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXTripleClickHelpers.m", 39, @"%s", *a1);

  __break(1u);
}

void __getHUComfortSoundsSettingsClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *HearingUtilitiesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXTripleClickHelpers.m", 34, @"%s", *a1);

  __break(1u);
}

void __getHUComfortSoundsSettingsClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getHUComfortSoundsSettingsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 35, @"Unable to find class %s", "HUComfortSoundsSettings");

  __break(1u);
}

void PersonalAudioLibrary_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *PersonalAudioLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXTripleClickHelpers.m", 83, @"%s", *a1);

  __break(1u);
}

void __getPASettingsClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getPASettingsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 84, @"Unable to find class %s", "PASettings");

  __break(1u);
}

void __getWatchControlSettingsClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *WatchControlSettingsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXTripleClickHelpers.m", 52, @"%s", *a1);

  __break(1u);
}

void __getWatchControlSettingsClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getWatchControlSettingsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 53, @"Unable to find class %s", "WatchControlSettings");

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *AccessibilityUILibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXTripleClickHelpers.m", 58, @"%s", *a1);

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getAXUIClientClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 59, @"Unable to find class %s", "AXUIClient");

  __break(1u);
}

void __getAXPISystemActionHelperClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *AccessibilityPhysicalInteractionLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXTripleClickHelpers.m", 44, @"%s", *a1);

  __break(1u);
}

void __getAXPISystemActionHelperClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getAXPISystemActionHelperClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 45, @"Unable to find class %s", "AXPISystemActionHelper");

  __break(1u);
}

void __getSpeakThisServicesClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *SpeakThisServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXTripleClickHelpers.m", 69, @"%s", *a1);

  __break(1u);
}

void __getSpeakThisServicesClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSpeakThisServicesClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXTripleClickHelpers.m", 70, @"Unable to find class %s", "SpeakThisServices");

  __break(1u);
}

void __getAVCCaptionsClientClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *AVConferenceLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXCapabilityManager.m", 38, @"%s", *a1);

  __break(1u);
}

void __getAVCCaptionsClientClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getAVCCaptionsClientClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXCapabilityManager.m", 39, @"Unable to find class %s", "AVCCaptionsClient");

  __break(1u);
}

void __getUITextInputModeClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXCapabilityManager.m", 25, @"%s", *a1);

  __break(1u);
}

void __getUITextInputModeClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getUITextInputModeClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXCapabilityManager.m", 26, @"Unable to find class %s", "UITextInputMode");

  __break(1u);
}

void __getRTTTelephonyUtilitiesClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *RTTUtilitiesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXCapabilityManager.m", 21, @"%s", *a1);

  __break(1u);
}

void __getRTTTelephonyUtilitiesClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getRTTTelephonyUtilitiesClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXCapabilityManager.m", 22, @"Unable to find class %s", "RTTTelephonyUtilities");

  __break(1u);
}

void __getCSPreferencesClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *CoreSpeechLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXCapabilityManager.m", 31, @"%s", *a1);

  __break(1u);
}

void __getCSPreferencesClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getCSPreferencesClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXCapabilityManager.m", 32, @"Unable to find class %s", "CSPreferences");

  __break(1u);
}

void __getUIWindowClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXIPCServer.m", 46, @"%s", *a1);

  __break(1u);
}

void __getUIWindowClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getUIWindowClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXIPCServer.m", 47, @"Unable to find class %s", "UIWindow");

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_1_0(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *AccessibilityUILibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXBannerServices.m", 15, @"%s", *a1);

  __break(1u);
}

void __getAXUIClientClass_block_invoke_cold_2_0()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getAXUIClientClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXBannerServices.m", 16, @"Unable to find class %s", "AXUIClient");

  __break(1u);
}

void AXDeviceSizeMM_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_4(&dword_18D308000, v0, v1, "Unexpected display values returned from MG. Falling back to legacy calculations", v2, v3, v4, v5, v6);
}

void AXDeviceRegisterForDisplayUpdates_cold_1()
{
  OUTLINED_FUNCTION_1();
  _os_log_fault_impl(&dword_18D308000, v0, OS_LOG_TYPE_FAULT, "'displayObserver' must conform to FBSDisplayObserving", v1, 2u);
}

void AXDeviceSupportsWatchRemoteScreen_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"BOOL soft_AXWatchRemoteScreenIsTwiceFeatureOn(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXDevice.m", 88, @"%s", dlerror());

  __break(1u);
}

void AXDeviceSupportsWatchRemoteScreen_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"BOOL soft_AXWatchRemoteScreenIsPairedGizmoSupported(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXDevice.m", 89, @"%s", dlerror());

  __break(1u);
}

void AXDeviceHasJindo_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"BOOL soft_SBUIIsSystemApertureEnabled(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXDevice.m", 73, @"%s", dlerror());

  __break(1u);
}

void AXDeviceSetKShotPreboardEnabled_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_4(&dword_18D308000, v0, v1, "Sound Detection KShot Preboard Enrollment is not possible on this device!", v2, v3, v4, v5, v6);
}

void AXDeviceSetAssistantWhileFaceDownEnabled_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_4(&dword_18D308000, v0, v1, "Always Listen for Siri Preboard Enrollment is not possible on this device!", v2, v3, v4, v5, v6);
}

void __getPKPassLibraryClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *PassKitCoreLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXDevice.m", 50, @"%s", *a1);

  __break(1u);
}

void __getPKPassLibraryClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getPKPassLibraryClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXDevice.m", 51, @"Unable to find class %s", "PKPassLibrary");

  __break(1u);
}

void __getSOSManagerClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SOSLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXDevice.m", 80, @"%s", *a1);

  __break(1u);
}

void __getSOSManagerClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSOSManagerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXDevice.m", 81, @"Unable to find class %s", "SOSManager");

  __break(1u);
}

void __AXFallbackDeviceSizeMM_block_invoke_2_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_4(&dword_18D308000, v0, v1, "AXDeviceSizeMM() screen class is invalid", v2, v3, v4, v5, v6);
}

void __AXFallbackDeviceSizeMM_block_invoke_276_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_4(&dword_18D308000, v0, v1, "AXDeviceSizeMM() result is invalid", v2, v3, v4, v5, v6);
}

void __getAXMDisplayManagerClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *AXMediaUtilitiesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXDevice.m", 604, @"%s", *a1);

  __break(1u);
}

void __getAXMDisplayManagerClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getAXMDisplayManagerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXDevice.m", 605, @"Unable to find class %s", "AXMDisplayManager");

  __break(1u);
}

void AXWatchRemoteScreenServicesLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *AXWatchRemoteScreenServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXDevice.m", 87, @"%s", *a1);

  __break(1u);
}

void __getSBUIIsSystemApertureEnabledSymbolLoc_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardUIServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXDevice.m", 72, @"%s", *a1);

  __break(1u);
}

void __getGMAvailabilityWrapperClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *GenerativeModelsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXDevice.m", 57, @"%s", *a1);

  __break(1u);
}

void __getGMAvailabilityWrapperClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getGMAvailabilityWrapperClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXDevice.m", 58, @"Unable to find class %s", "GMAvailabilityWrapper");

  __break(1u);
}

void __getSCRCPunctuationVerbosenessClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *ScreenReaderCoreLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXLocalization.m", 23, @"%s", *a1);

  __break(1u);
}

void __getSCRCPunctuationVerbosenessClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSCRCPunctuationVerbosenessClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXLocalization.m", 24, @"Unable to find class %s", "SCRCPunctuationVerboseness");

  __break(1u);
}

void __getUIKeyboardInputModeControllerClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXEventKeyInfoRepresentation.m", 18, @"%s", *a1);

  __break(1u);
}

void __getUIKeyboardInputModeControllerClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getUIKeyboardInputModeControllerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXEventKeyInfoRepresentation.m", 19, @"Unable to find class %s", "UIKeyboardInputModeController");

  __break(1u);
}

void __getTLToneManagerClass_block_invoke_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getTLToneManagerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXSettings.m", 66, @"Unable to find class %s", "TLToneManager");

  __break(1u);
}

void ToneLibraryLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *ToneLibraryLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXSettings.m", 64, @"%s", *a1);

  __break(1u);
}

void ScreenReaderOutputLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *ScreenReaderOutputLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXSettings.m", 52, @"%s", *a1);

  __break(1u);
}

void __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *VoiceOverServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXSettings.m", 73, @"%s", *a1);

  __break(1u);
}

void __getVOSVoiceOverGreyCommandInfoClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getVOSVoiceOverGreyCommandInfoClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXSettings.m", 74, @"Unable to find class %s", "VOSVoiceOverGreyCommandInfo");

  __break(1u);
}

void __getZoomServicesGreyCommandInfoClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *ZoomServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXSettings.m", 77, @"%s", *a1);

  __break(1u);
}

void __getZoomServicesGreyCommandInfoClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getZoomServicesGreyCommandInfoClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXSettings.m", 78, @"Unable to find class %s", "ZoomServicesGreyCommandInfo");

  __break(1u);
}

void SpringBoardServicesLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXSettings.m", 81, @"%s", *a1);

  __break(1u);
}

void applyTransform_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_18D308000, a2, OS_LOG_TYPE_ERROR, "Error while retrieving localized operator name: %@", (uint8_t *)&v2, 0xCu);
}

void applyTransform_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_18D308000, a2, OS_LOG_TYPE_ERROR, "could not retrieve telephony info: %@", (uint8_t *)&v2, 0xCu);
}

void applyTransform_cold_3(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_18D308000, log, OS_LOG_TYPE_FAULT, "No telephony client!", v1, 2u);
}

void _AXApplicationNameLabelForBundleIdentifier_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *_AXApplicationNameLabelForBundleIdentifier(NSString *__strong)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AccessibilitySPI.m", 50, @"%s", dlerror());

  __break(1u);
}

void __getSFAccessibilityClientClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SharingLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AccessibilitySPI.m", 52, @"%s", *a1);

  __break(1u);
}

void __getSFAccessibilityClientClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSFAccessibilityClientClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AccessibilitySPI.m", 53, @"Unable to find class %s", "SFAccessibilityClient");

  __break(1u);
}

void __getAXApplicationNameLabelForBundleIdentifierSymbolLoc_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *AXFrontBoardUtilsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AccessibilitySPI.m", 49, @"%s", *a1);

  __break(1u);
}

void __performSocialAttributionStringTransform_block_invoke_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_18D308000, log, OS_LOG_TYPE_ERROR, "could not retrieve social layer proxy", v1, 2u);
}

void __getSLDServiceProxyClass_block_invoke_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSLDServiceProxyClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AccessibilitySPI.m", 64, @"Unable to find class %s", "SLDServiceProxy");

  __break(1u);
}

void SocialLayerLibrary_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SocialLayerLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AccessibilitySPI.m", 59, @"%s", *a1);

  __break(1u);
}

void __getSLDPillServiceClass_block_invoke_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSLDPillServiceClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AccessibilitySPI.m", 60, @"Unable to find class %s", "SLDPillService");

  __break(1u);
}

void __getSLDCollaborationAttributionViewServiceClass_block_invoke_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSLDCollaborationAttributionViewServiceClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AccessibilitySPI.m", 62, @"Unable to find class %s", "SLDCollaborationAttributionViewService");

  __break(1u);
}

void __getVCVoiceShortcutClientClass_block_invoke_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getVCVoiceShortcutClientClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXSiriShortcutsManager.m", 27, @"Unable to find class %s", "VCVoiceShortcutClient");

  __break(1u);
}

void VoiceShortcutClientLibrary_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *VoiceShortcutClientLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AXSiriShortcutsManager.m", 26, @"%s", *a1);

  __break(1u);
}

void __getWFAccessibilityWorkflowRunnerClientClass_block_invoke_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getWFAccessibilityWorkflowRunnerClientClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"AXSiriShortcutsManager.m", 28, @"Unable to find class %s", "WFAccessibilityWorkflowRunnerClient");

  __break(1u);
}

void AXMIDILogError_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_18D308000, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v2, 0xCu);
}

uint64_t sub_18D40A248()
{
  return MEMORY[0x1F40E53C8]();
}

uint64_t sub_18D40A258()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t sub_18D40A268()
{
  return MEMORY[0x1F40E53F8]();
}

uint64_t sub_18D40A278()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_18D40A288()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_18D40A298()
{
  return MEMORY[0x1F40E5500]();
}

uint64_t sub_18D40A2A8()
{
  return MEMORY[0x1F40E5510]();
}

uint64_t sub_18D40A2B8()
{
  return MEMORY[0x1F40E5540]();
}

uint64_t sub_18D40A2C8()
{
  return MEMORY[0x1F40E5578]();
}

uint64_t sub_18D40A2D8()
{
  return MEMORY[0x1F40E5590]();
}

uint64_t sub_18D40A2E8()
{
  return MEMORY[0x1F4163E58]();
}

uint64_t sub_18D40A2F8()
{
  return MEMORY[0x1F4105C68]();
}

uint64_t sub_18D40A308()
{
  return MEMORY[0x1F40E5648]();
}

uint64_t sub_18D40A318()
{
  return MEMORY[0x1F40E5698]();
}

uint64_t sub_18D40A328()
{
  return MEMORY[0x1F40E57F8]();
}

uint64_t sub_18D40A338()
{
  return MEMORY[0x1F40E5840]();
}

uint64_t sub_18D40A348()
{
  return MEMORY[0x1F40E5868]();
}

uint64_t sub_18D40A358()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_18D40A368()
{
  return MEMORY[0x1F4187470]();
}

uint64_t sub_18D40A378()
{
  return MEMORY[0x1F4163E60]();
}

uint64_t sub_18D40A388()
{
  return MEMORY[0x1F4163E98]();
}

uint64_t sub_18D40A398()
{
  return MEMORY[0x1F4163EA0]();
}

uint64_t sub_18D40A3A8()
{
  return MEMORY[0x1F4163EA8]();
}

uint64_t sub_18D40A3B8()
{
  return MEMORY[0x1F4163EB0]();
}

uint64_t sub_18D40A3C8()
{
  return MEMORY[0x1F4163EB8]();
}

uint64_t sub_18D40A3D8()
{
  return MEMORY[0x1F4163EC0]();
}

uint64_t sub_18D40A3E8()
{
  return MEMORY[0x1F4163EC8]();
}

uint64_t sub_18D40A3F8()
{
  return MEMORY[0x1F4163ED8]();
}

uint64_t sub_18D40A408()
{
  return MEMORY[0x1F4163EE0]();
}

uint64_t sub_18D40A418()
{
  return MEMORY[0x1F4163EE8]();
}

uint64_t sub_18D40A428()
{
  return MEMORY[0x1F4163EF0]();
}

uint64_t sub_18D40A438()
{
  return MEMORY[0x1F4163EF8]();
}

uint64_t sub_18D40A448()
{
  return MEMORY[0x1F4163F00]();
}

uint64_t sub_18D40A458()
{
  return MEMORY[0x1F4163F08]();
}

uint64_t sub_18D40A468()
{
  return MEMORY[0x1F4163F10]();
}

uint64_t sub_18D40A478()
{
  return MEMORY[0x1F4163F18]();
}

uint64_t sub_18D40A488()
{
  return MEMORY[0x1F4163F20]();
}

uint64_t sub_18D40A498()
{
  return MEMORY[0x1F4163F28]();
}

uint64_t sub_18D40A4A8()
{
  return MEMORY[0x1F4163F30]();
}

uint64_t sub_18D40A4B8()
{
  return MEMORY[0x1F4163F38]();
}

uint64_t sub_18D40A4C8()
{
  return MEMORY[0x1F4163F40]();
}

uint64_t sub_18D40A4D8()
{
  return MEMORY[0x1F4163F48]();
}

uint64_t sub_18D40A4E8()
{
  return MEMORY[0x1F4163F50]();
}

uint64_t sub_18D40A4F8()
{
  return MEMORY[0x1F4163F70]();
}

uint64_t sub_18D40A508()
{
  return MEMORY[0x1F4163F78]();
}

uint64_t sub_18D40A518()
{
  return MEMORY[0x1F4105C70]();
}

uint64_t sub_18D40A528()
{
  return MEMORY[0x1F4105C78]();
}

uint64_t sub_18D40A538()
{
  return MEMORY[0x1F4105C80]();
}

uint64_t sub_18D40A548()
{
  return MEMORY[0x1F4105C88]();
}

uint64_t sub_18D40A558()
{
  return MEMORY[0x1F4105C90]();
}

uint64_t sub_18D40A568()
{
  return MEMORY[0x1F4105CB0]();
}

uint64_t sub_18D40A578()
{
  return MEMORY[0x1F4105CB8]();
}

uint64_t sub_18D40A588()
{
  return MEMORY[0x1F4105CC0]();
}

uint64_t sub_18D40A598()
{
  return MEMORY[0x1F4105CC8]();
}

uint64_t sub_18D40A5A8()
{
  return MEMORY[0x1F4105CD0]();
}

uint64_t sub_18D40A5B8()
{
  return MEMORY[0x1F4105CD8]();
}

uint64_t sub_18D40A5C8()
{
  return MEMORY[0x1F4105CE0]();
}

uint64_t sub_18D40A5D8()
{
  return MEMORY[0x1F4105CE8]();
}

uint64_t sub_18D40A5E8()
{
  return MEMORY[0x1F4105CF0]();
}

uint64_t sub_18D40A5F8()
{
  return MEMORY[0x1F4105CF8]();
}

uint64_t sub_18D40A608()
{
  return MEMORY[0x1F4105D00]();
}

uint64_t sub_18D40A618()
{
  return MEMORY[0x1F4105D08]();
}

uint64_t sub_18D40A628()
{
  return MEMORY[0x1F4105D10]();
}

uint64_t sub_18D40A638()
{
  return MEMORY[0x1F4105D18]();
}

uint64_t sub_18D40A648()
{
  return MEMORY[0x1F4105D20]();
}

uint64_t sub_18D40A658()
{
  return MEMORY[0x1F4105D28]();
}

uint64_t sub_18D40A668()
{
  return MEMORY[0x1F4105D30]();
}

uint64_t sub_18D40A678()
{
  return MEMORY[0x1F4105D38]();
}

uint64_t sub_18D40A688()
{
  return MEMORY[0x1F4105D40]();
}

uint64_t sub_18D40A698()
{
  return MEMORY[0x1F4105D48]();
}

uint64_t sub_18D40A6A8()
{
  return MEMORY[0x1F4105D50]();
}

uint64_t sub_18D40A6B8()
{
  return MEMORY[0x1F4105D58]();
}

uint64_t sub_18D40A6C8()
{
  return MEMORY[0x1F4105D60]();
}

uint64_t sub_18D40A6D8()
{
  return MEMORY[0x1F4105D90]();
}

uint64_t sub_18D40A6E8()
{
  return MEMORY[0x1F4105D98]();
}

uint64_t sub_18D40A6F8()
{
  return MEMORY[0x1F4105DA0]();
}

uint64_t sub_18D40A708()
{
  return MEMORY[0x1F4105DA8]();
}

uint64_t sub_18D40A718()
{
  return MEMORY[0x1F4105DB0]();
}

uint64_t sub_18D40A728()
{
  return MEMORY[0x1F4105DB8]();
}

uint64_t sub_18D40A738()
{
  return MEMORY[0x1F4105DC0]();
}

uint64_t sub_18D40A748()
{
  return MEMORY[0x1F4105DC8]();
}

uint64_t sub_18D40A758()
{
  return MEMORY[0x1F4105DD0]();
}

uint64_t sub_18D40A768()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_18D40A778()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_18D40A788()
{
  return MEMORY[0x1F4183318]();
}

uint64_t sub_18D40A798()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_18D40A7A8()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_18D40A7B8()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_18D40A7C8()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_18D40A7D8()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_18D40A7E8()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_18D40A7F8()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_18D40A808()
{
  return MEMORY[0x1F4183898]();
}

uint64_t sub_18D40A818()
{
  return MEMORY[0x1F4105DE0]();
}

uint64_t sub_18D40A828()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_18D40A838()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_18D40A848()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_18D40A858()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_18D40A868()
{
  return MEMORY[0x1F4183B40]();
}

uint64_t sub_18D40A878()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t sub_18D40A888()
{
  return MEMORY[0x1F4183D98]();
}

uint64_t sub_18D40A898()
{
  return MEMORY[0x1F4183DA0]();
}

uint64_t sub_18D40A8A8()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t sub_18D40A8B8()
{
  return MEMORY[0x1F4183E10]();
}

uint64_t sub_18D40A8C8()
{
  return MEMORY[0x1F4183E18]();
}

uint64_t sub_18D40A8D8()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_18D40A8E8()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_18D40A8F8()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_18D40A918()
{
  return MEMORY[0x1F4187CE0]();
}

uint64_t sub_18D40A928()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_18D40A938()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_18D40A948()
{
  return MEMORY[0x1F4187D18]();
}

uint64_t sub_18D40A958()
{
  return MEMORY[0x1F4187D38]();
}

uint64_t sub_18D40A968()
{
  return MEMORY[0x1F4105DE8]();
}

uint64_t sub_18D40A988()
{
  return MEMORY[0x1F4105DF8]();
}

uint64_t sub_18D40A998()
{
  return MEMORY[0x1F4187D50]();
}

uint64_t sub_18D40A9B8()
{
  return MEMORY[0x1F4187D78]();
}

uint64_t sub_18D40A9D8()
{
  return MEMORY[0x1F4187E68]();
}

uint64_t sub_18D40A9E8()
{
  return MEMORY[0x1F40E6410]();
}

uint64_t sub_18D40A9F8()
{
  return MEMORY[0x1F40E6430]();
}

uint64_t sub_18D40AA08()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t sub_18D40AA18()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_18D40AA28()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_18D40AA38()
{
  return MEMORY[0x1F4105E00]();
}

uint64_t sub_18D40AA48()
{
  return MEMORY[0x1F4105E08]();
}

uint64_t sub_18D40AA58()
{
  return MEMORY[0x1F40E6858]();
}

uint64_t sub_18D40AA68()
{
  return MEMORY[0x1F4105E10]();
}

uint64_t sub_18D40AA78()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_18D40AA88()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_18D40AA98()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_18D40AAA8()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t sub_18D40AAB8()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_18D40AAC8()
{
  return MEMORY[0x1F4184A78]();
}

uint64_t sub_18D40AAD8()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_18D40AAE8()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_18D40AAF8()
{
  return MEMORY[0x1F40E6DB8]();
}

uint64_t sub_18D40AB08()
{
  return MEMORY[0x1F4184C18]();
}

uint64_t sub_18D40AB18()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t sub_18D40AB28()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t sub_18D40AB38()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_18D40AB48()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_18D40AB58()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_18D40AB68()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_18D40AB78()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_18D40AB88()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_18D40AB98()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_18D40ABA8()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_18D40ABB8()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_18D40ABC8()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_18D40ABD8()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_18D40ABF8()
{
  return MEMORY[0x1F41854A0]();
}

uint64_t sub_18D40AC08()
{
  return MEMORY[0x1F41854F8]();
}

uint64_t sub_18D40AC18()
{
  return MEMORY[0x1F4185500]();
}

uint64_t sub_18D40AC28()
{
  return MEMORY[0x1F4185528]();
}

uint64_t sub_18D40AC38()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_18D40AC48()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_18D40AC58()
{
  return MEMORY[0x1F4185628]();
}

uint64_t sub_18D40AC68()
{
  return MEMORY[0x1F4185630]();
}

uint64_t sub_18D40AC78()
{
  return MEMORY[0x1F4185658]();
}

uint64_t sub_18D40AC88()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_18D40AC98()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_18D40ACA8()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_18D40ACB8()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_18D40ACC8()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_18D40ACD8()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_18D40ACE8()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_18D40ACF8()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_18D40AD08()
{
  return MEMORY[0x1F4185EE8]();
}

uint64_t sub_18D40AD18()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_18D40AD28()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_18D40AD38()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t ASTLogCommon()
{
  return MEMORY[0x1F4105E18]();
}

uint64_t ASTLogMouse()
{
  return MEMORY[0x1F4105E20]();
}

uint64_t AXAccessibilityBundlesDirectory()
{
  return MEMORY[0x1F4105E28]();
}

uint64_t AXCLanguageCanonicalFormToGeneralLanguage()
{
  return MEMORY[0x1F4105E40]();
}

uint64_t AXCLanguageCanonicalFormToGeneralLanguageUsingFallback()
{
  return MEMORY[0x1F4105E48]();
}

uint64_t AXCLanguageConvertToCanonicalForm()
{
  return MEMORY[0x1F4105E50]();
}

uint64_t AXCPCopySharedResourcesPreferencesDomainForDomain()
{
  return MEMORY[0x1F41787C0]();
}

uint64_t AXCRemapLanguageCodeToFallbackIfNeccessary()
{
  return MEMORY[0x1F4105E58]();
}

uint64_t AXCatchUserDefaultsInconsistencies()
{
  return MEMORY[0x1F41787D8]();
}

uint64_t AXColorizeFormatLog()
{
  return MEMORY[0x1F4105E90]();
}

uint64_t AXDeviceHasStaccato()
{
  return MEMORY[0x1F4105EA0]();
}

uint64_t AXDeviceIsAudioAccessory()
{
  return MEMORY[0x1F4105EA8]();
}

uint64_t AXDeviceIsD22()
{
  return MEMORY[0x1F4105EB0]();
}

uint64_t AXDeviceIsD32()
{
  return MEMORY[0x1F4105EB8]();
}

uint64_t AXDeviceIsD33()
{
  return MEMORY[0x1F4105EC0]();
}

uint64_t AXDeviceIsD42()
{
  return MEMORY[0x1F4105EC8]();
}

uint64_t AXDeviceIsD43()
{
  return MEMORY[0x1F4105ED0]();
}

uint64_t AXDeviceIsPad()
{
  return MEMORY[0x1F4105EE0]();
}

uint64_t AXDeviceIsPhone()
{
  return MEMORY[0x1F4105EE8]();
}

uint64_t AXDeviceIsPod()
{
  return MEMORY[0x1F4105EF0]();
}

uint64_t AXDeviceIsRealityDevice()
{
  return MEMORY[0x1F4105EF8]();
}

uint64_t AXDeviceIsWatch()
{
  return MEMORY[0x1F4105F08]();
}

uint64_t AXDeviceSupportsHapticMusic()
{
  return MEMORY[0x1F4105F18]();
}

uint64_t AXDeviceSupportsOnDeviceEyeTracking()
{
  return MEMORY[0x1F4105F28]();
}

uint64_t AXDeviceSupportsVoiceBankingSpeech()
{
  return MEMORY[0x1F4105F30]();
}

uint64_t AXDoesRequestingClientDeserveAutomation()
{
  return MEMORY[0x1F4106440]();
}

uint64_t AXFormatFloat()
{
  return MEMORY[0x1F4105F40]();
}

uint64_t AXFormatFloatWithPercentage()
{
  return MEMORY[0x1F4105F48]();
}

uint64_t AXFormatInteger()
{
  return MEMORY[0x1F4105F50]();
}

uint64_t AXInstalledAppIDs()
{
  return MEMORY[0x1F4105F70]();
}

uint64_t AXIsAnyPreferredLanguageRTL()
{
  return MEMORY[0x1F4105F80]();
}

uint64_t AXIsBuddyCompleted()
{
  return MEMORY[0x1F4105F88]();
}

uint64_t AXIsInternalInstall()
{
  return MEMORY[0x1F4105F90]();
}

uint64_t AXLocalizationForLocale()
{
  return MEMORY[0x1F41787E8]();
}

uint64_t AXLogAirPodSettings()
{
  return MEMORY[0x1F4105F98]();
}

uint64_t AXLogAppAccessibility()
{
  return MEMORY[0x1F4105FA0]();
}

uint64_t AXLogAssertions()
{
  return MEMORY[0x1F4105FA8]();
}

uint64_t AXLogBackboardServer()
{
  return MEMORY[0x1F4105FC0]();
}

uint64_t AXLogBluetooth()
{
  return MEMORY[0x1F4105FC8]();
}

uint64_t AXLogBrailleHW()
{
  return MEMORY[0x1F4105FD0]();
}

uint64_t AXLogCommon()
{
  return MEMORY[0x1F4105FE0]();
}

uint64_t AXLogDisplay()
{
  return MEMORY[0x1F4105FE8]();
}

uint64_t AXLogEventTap()
{
  return MEMORY[0x1F4106000]();
}

uint64_t AXLogHapticMusic()
{
  return MEMORY[0x1F4106010]();
}

uint64_t AXLogIPC()
{
  return MEMORY[0x1F4106020]();
}

uint64_t AXLogMIDI()
{
  return MEMORY[0x1F4106030]();
}

uint64_t AXLogMotionCues()
{
  return MEMORY[0x1F4106038]();
}

uint64_t AXLogOrator()
{
  return MEMORY[0x1F4106048]();
}

uint64_t AXLogSettings()
{
  return MEMORY[0x1F4106068]();
}

uint64_t AXLogSiriShortcuts()
{
  return MEMORY[0x1F4106070]();
}

uint64_t AXLogSpeechAssetDownload()
{
  return MEMORY[0x1F4106090]();
}

uint64_t AXLogSpokenContentTextProcessing()
{
  return MEMORY[0x1F41060A0]();
}

uint64_t AXLogSpringboardServer()
{
  return MEMORY[0x1F41060A8]();
}

uint64_t AXLogSystemApp()
{
  return MEMORY[0x1F41060B0]();
}

uint64_t AXLogTapticTime()
{
  return MEMORY[0x1F41060B8]();
}

uint64_t AXLogTwiceRemoteScreen()
{
  return MEMORY[0x1F41060C0]();
}

uint64_t AXLoggerForFacility()
{
  return MEMORY[0x1F41060E8]();
}

uint64_t AXNSLocalizedStringForLocale()
{
  return MEMORY[0x1F41787F8]();
}

uint64_t AXOSLogLevelFromAXLogLevel()
{
  return MEMORY[0x1F4106188]();
}

uint64_t AXPerformBlockAsynchronouslyOnMainThread()
{
  return MEMORY[0x1F4106190]();
}

uint64_t AXPerformBlockOnMainThread()
{
  return MEMORY[0x1F4106198]();
}

uint64_t AXPerformBlockOnMainThreadAfterDelay()
{
  return MEMORY[0x1F41061A0]();
}

uint64_t AXPerformBlockSynchronouslyOnMainThread()
{
  return MEMORY[0x1F41061A8]();
}

uint64_t AXProcessIsAXUIServer()
{
  return MEMORY[0x1F41061C8]();
}

uint64_t AXProcessIsBackboard()
{
  return MEMORY[0x1F41061E0]();
}

uint64_t AXProcessIsPreferences()
{
  return MEMORY[0x1F4106210]();
}

uint64_t AXProcessIsSpringBoard()
{
  return MEMORY[0x1F4106220]();
}

uint64_t AXRuntimeCheck_HasANE()
{
  return MEMORY[0x1F4106240]();
}

uint64_t AXRuntimeCheck_SupportsNearbyDeviceControl()
{
  return MEMORY[0x1F4106280]();
}

uint64_t AXSAccessibilityUtilitiesPath()
{
  return MEMORY[0x1F4178808]();
}

uint64_t AXSafeClassFromString()
{
  return MEMORY[0x1F41062B8]();
}

uint64_t AXSafeEqual()
{
  return MEMORY[0x1F41062C0]();
}

uint64_t AXSetThreadPriority()
{
  return MEMORY[0x1F41062C8]();
}

uint64_t AXTTSLogCommon()
{
  return MEMORY[0x1F41062E0]();
}

uint64_t AXVoiceServicesTTSResourcesDirectory()
{
  return MEMORY[0x1F4106308]();
}

uint64_t AX_PERFORM_WITH_LOCK()
{
  return MEMORY[0x1F4106310]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1F41138A0]();
}

uint64_t AudioServicesCreateSystemSoundIDWithOptions()
{
  return MEMORY[0x1F40D4E18]();
}

OSStatus AudioServicesDisposeSystemSoundID(SystemSoundID inSystemSoundID)
{
  return MEMORY[0x1F40D4E28](*(void *)&inSystemSoundID);
}

uint64_t AudioServicesPlaySystemSoundWithVibration()
{
  return MEMORY[0x1F40D4E50]();
}

uint64_t BKSHIDEventGetBaseAttributes()
{
  return MEMORY[0x1F410BE80]();
}

uint64_t BKSHIDEventGetDigitizerAttributes()
{
  return MEMORY[0x1F410BE90]();
}

uint64_t BKSHIDEventSetSimpleInfo()
{
  return MEMORY[0x1F410BF18]();
}

uint64_t BKSHIDServicesGetHardwareKeyboardLanguage()
{
  return MEMORY[0x1F410BF88]();
}

uint64_t BTAccessoryManagerAddCallbacks()
{
  return MEMORY[0x1F412F5C8]();
}

uint64_t BTAccessoryManagerGetControlCommand()
{
  return MEMORY[0x1F412F608]();
}

uint64_t BTAccessoryManagerGetDefault()
{
  return MEMORY[0x1F412F610]();
}

uint64_t BTAccessoryManagerSendControlCommand()
{
  return MEMORY[0x1F412F668]();
}

uint64_t BTDeviceAddressFromString()
{
  return MEMORY[0x1F412F678]();
}

uint64_t BTDeviceConnectServices()
{
  return MEMORY[0x1F412F698]();
}

uint64_t BTDeviceDisconnect()
{
  return MEMORY[0x1F412F6A0]();
}

uint64_t BTDeviceFromAddress()
{
  return MEMORY[0x1F412F6A8]();
}

uint64_t BTDeviceGetAddressString()
{
  return MEMORY[0x1F412F6D0]();
}

uint64_t BTDeviceGetAuthorizedServices()
{
  return MEMORY[0x1F412F6D8]();
}

uint64_t BTDeviceGetConnectedServices()
{
  return MEMORY[0x1F412F6E0]();
}

uint64_t BTDeviceGetDefaultName()
{
  return MEMORY[0x1F412F6E8]();
}

uint64_t BTDeviceGetDeviceClass()
{
  return MEMORY[0x1F412F6F0]();
}

uint64_t BTDeviceGetDeviceId()
{
  return MEMORY[0x1F412F6F8]();
}

uint64_t BTDeviceGetDeviceType()
{
  return MEMORY[0x1F412F700]();
}

uint64_t BTDeviceGetName()
{
  return MEMORY[0x1F412F708]();
}

uint64_t BTDeviceGetPairingStatus()
{
  return MEMORY[0x1F412F710]();
}

uint64_t BTDeviceGetSupportedServices()
{
  return MEMORY[0x1F412F718]();
}

uint64_t BTDiscoveryAgentCreate()
{
  return MEMORY[0x1F412F740]();
}

uint64_t BTDiscoveryAgentDestroy()
{
  return MEMORY[0x1F412F748]();
}

uint64_t BTDiscoveryAgentGetDevices()
{
  return MEMORY[0x1F412F750]();
}

uint64_t BTDiscoveryAgentStartScan()
{
  return MEMORY[0x1F412F758]();
}

uint64_t BTDiscoveryAgentStopScan()
{
  return MEMORY[0x1F412F760]();
}

uint64_t BTLocalDeviceAddCallbacks()
{
  return MEMORY[0x1F412F770]();
}

uint64_t BTLocalDeviceGetConnectable()
{
  return MEMORY[0x1F412F778]();
}

uint64_t BTLocalDeviceGetConnectedDevices()
{
  return MEMORY[0x1F412F780]();
}

uint64_t BTLocalDeviceGetConnectingDevices()
{
  return MEMORY[0x1F412F790]();
}

uint64_t BTLocalDeviceGetConnectionStatus()
{
  return MEMORY[0x1F412F798]();
}

uint64_t BTLocalDeviceGetDefault()
{
  return MEMORY[0x1F412F7A8]();
}

uint64_t BTLocalDeviceGetDiscoverable()
{
  return MEMORY[0x1F412F7B0]();
}

uint64_t BTLocalDeviceGetModulePower()
{
  return MEMORY[0x1F412F7B8]();
}

uint64_t BTLocalDeviceGetPairedDevices()
{
  return MEMORY[0x1F412F7C0]();
}

uint64_t BTLocalDeviceGetScanning()
{
  return MEMORY[0x1F412F7C8]();
}

uint64_t BTLocalDeviceRemoveCallbacks()
{
  return MEMORY[0x1F412F808]();
}

uint64_t BTLocalDeviceSetConnectable()
{
  return MEMORY[0x1F412F810]();
}

uint64_t BTLocalDeviceSetDiscoverable()
{
  return MEMORY[0x1F412F818]();
}

uint64_t BTLocalDeviceSetModulePower()
{
  return MEMORY[0x1F412F820]();
}

uint64_t BTLocalDeviceSupportsService()
{
  return MEMORY[0x1F412F828]();
}

uint64_t BTPairingAgentAcceptSSP()
{
  return MEMORY[0x1F412F830]();
}

uint64_t BTPairingAgentCancelPairing()
{
  return MEMORY[0x1F412F838]();
}

uint64_t BTPairingAgentCreate()
{
  return MEMORY[0x1F412F840]();
}

uint64_t BTPairingAgentDeletePairedDevice()
{
  return MEMORY[0x1F412F848]();
}

uint64_t BTPairingAgentDestroy()
{
  return MEMORY[0x1F412F850]();
}

uint64_t BTPairingAgentSetPincode()
{
  return MEMORY[0x1F412F858]();
}

uint64_t BTPairingAgentStart()
{
  return MEMORY[0x1F412F860]();
}

uint64_t BTPairingAgentStop()
{
  return MEMORY[0x1F412F868]();
}

uint64_t BTServiceAddCallbacks()
{
  return MEMORY[0x1F412F870]();
}

uint64_t BTServiceRemoveCallbacks()
{
  return MEMORY[0x1F412F888]();
}

uint64_t BTSessionAttachWithQueue()
{
  return MEMORY[0x1F412F898]();
}

uint64_t BTSessionDetachWithQueue()
{
  return MEMORY[0x1F412F8A0]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithBlock()
{
  return MEMORY[0x1F4113C70]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1F40D74B8]();
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7738](alloc, theString);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7C38]();
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C68](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return MEMORY[0x1F40D7C78](port);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout)
{
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1F40D7EB8](applicationID, userName, hostName);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7EC0](keysToFetch, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

uint64_t CFRunLoopRunSpecific()
{
  return MEMORY[0x1F40D8138]();
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8140](allocator, order, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  MEMORY[0x1F40D8548](str);
  return result;
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.CFIndex location = v1;
  return result;
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1F40DB008](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x1F40DB0D0](path);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1F40DB120](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x1F40DB300]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

uint64_t CLFLogCommon()
{
  return MEMORY[0x1F4106318]();
}

uint64_t FKALogCommon()
{
  return MEMORY[0x1F4106320]();
}

uint64_t GAXLogBlockedTouches()
{
  return MEMORY[0x1F4106328]();
}

uint64_t GAXLogCommon()
{
  return MEMORY[0x1F4106330]();
}

uint64_t GAXLogTimeRestrictions()
{
  return MEMORY[0x1F4106338]();
}

uint64_t GSEventGetHardwareKeyboardType()
{
  return MEMORY[0x1F411C8B8]();
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return MEMORY[0x1F411C8F8]();
}

uint64_t GSKeyboardCreate()
{
  return MEMORY[0x1F411C968]();
}

uint64_t GSKeyboardGetHWKeyboardType()
{
  return MEMORY[0x1F411C970]();
}

uint64_t GSKeyboardGetKeyCodeForChar()
{
  return MEMORY[0x1F411C978]();
}

uint64_t GSKeyboardGetLiveModifierState()
{
  return MEMORY[0x1F411C990]();
}

uint64_t GSKeyboardRelease()
{
  return MEMORY[0x1F411C9C0]();
}

uint64_t GSKeyboardTranslateKeyExtended()
{
  return MEMORY[0x1F411C9C8]();
}

uint64_t GSMainScreenPixelSize()
{
  return MEMORY[0x1F411C9F0]();
}

uint64_t GSMainScreenScaleFactor()
{
  return MEMORY[0x1F411CA00]();
}

uint64_t HTLogCommon()
{
  return MEMORY[0x1F4106340]();
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E8798](device, *(void *)&options);
}

Boolean IOHIDDeviceConformsTo(IOHIDDeviceRef device, uint32_t usagePage, uint32_t usage)
{
  return MEMORY[0x1F40E87A0](device, *(void *)&usagePage, *(void *)&usage);
}

CFTypeRef IOHIDDeviceGetProperty(IOHIDDeviceRef device, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40E87B8](device, key);
}

CFTypeID IOHIDDeviceGetTypeID(void)
{
  return MEMORY[0x1F40E87E0]();
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E87E8](device, *(void *)&options);
}

void IOHIDDeviceRegisterInputValueCallback(IOHIDDeviceRef device, IOHIDValueCallback callback, void *context)
{
}

void IOHIDDeviceUnscheduleFromRunLoop(IOHIDDeviceRef device, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

uint32_t IOHIDElementGetUsage(IOHIDElementRef element)
{
  return MEMORY[0x1F40E88C8](element);
}

uint32_t IOHIDElementGetUsagePage(IOHIDElementRef element)
{
  return MEMORY[0x1F40E88D0](element);
}

uint64_t IOHIDEventAppendEvent()
{
  return MEMORY[0x1F40E88D8]();
}

uint64_t IOHIDEventCreateAccelerometerEventWithType()
{
  return MEMORY[0x1F40E88F0]();
}

uint64_t IOHIDEventCreateDigitizerEvent()
{
  return MEMORY[0x1F40E8910]();
}

uint64_t IOHIDEventCreateDigitizerFingerEventWithQuality()
{
  return MEMORY[0x1F40E8920]();
}

uint64_t IOHIDEventCreateDigitizerStylusEventWithPolarOrientation()
{
  return MEMORY[0x1F40E8928]();
}

uint64_t IOHIDEventCreateForceStageEvent()
{
  return MEMORY[0x1F40E8930]();
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return MEMORY[0x1F40E8948]();
}

uint64_t IOHIDEventCreateMouseEvent()
{
  return MEMORY[0x1F40E8950]();
}

uint64_t IOHIDEventCreateTouchSensitiveButtonEvent()
{
  return MEMORY[0x1F40E8980]();
}

uint64_t IOHIDEventCreateVendorDefinedEvent()
{
  return MEMORY[0x1F40E89A0]();
}

uint64_t IOHIDEventGetAttributeDataLength()
{
  return MEMORY[0x1F40E89B8]();
}

uint64_t IOHIDEventGetAttributeDataPtr()
{
  return MEMORY[0x1F40E89C0]();
}

uint64_t IOHIDEventGetChildren()
{
  return MEMORY[0x1F40E89C8]();
}

uint64_t IOHIDEventGetDataValue()
{
  return MEMORY[0x1F40E89D0]();
}

uint64_t IOHIDEventGetEventFlags()
{
  return MEMORY[0x1F40E89E8]();
}

uint64_t IOHIDEventGetFloatMultiple()
{
  return MEMORY[0x1F40E89F0]();
}

uint64_t IOHIDEventGetFloatValue()
{
  return MEMORY[0x1F40E89F8]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1F40E8A00]();
}

uint64_t IOHIDEventGetPhase()
{
  return MEMORY[0x1F40E8A18]();
}

uint64_t IOHIDEventGetSenderID()
{
  return MEMORY[0x1F40E8A20]();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return MEMORY[0x1F40E8A28]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1F40E8A38]();
}

uint64_t IOHIDEventSetAttributeData()
{
  return MEMORY[0x1F40E8A60]();
}

uint64_t IOHIDEventSetEventFlags()
{
  return MEMORY[0x1F40E8A70]();
}

uint64_t IOHIDEventSetFloatValue()
{
  return MEMORY[0x1F40E8A78]();
}

uint64_t IOHIDEventSetIntegerValue()
{
  return MEMORY[0x1F40E8A80]();
}

uint64_t IOHIDEventSetPhase()
{
  return MEMORY[0x1F40E8A88]();
}

uint64_t IOHIDEventSetSenderID()
{
  return MEMORY[0x1F40E8A90]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1F40E8AB8](client);
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x1F40E8AC0]();
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1F40E8AC8]();
}

uint64_t IOHIDEventSystemClientDispatchEvent()
{
  return MEMORY[0x1F40E8AD0]();
}

uint64_t IOHIDEventSystemClientRegisterDeviceMatchingBlock()
{
  return MEMORY[0x1F40E8AD8]();
}

uint64_t IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority()
{
  return MEMORY[0x1F40E8B00]();
}

uint64_t IOHIDEventSystemClientScheduleWithRunLoop()
{
  return MEMORY[0x1F40E8B20]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1F40E8B38]();
}

uint64_t IOHIDEventSystemClientSetMatchingMultiple()
{
  return MEMORY[0x1F40E8B40]();
}

uint64_t IOHIDEventSystemClientUnregisterEventFilterCallback()
{
  return MEMORY[0x1F40E8B70]();
}

uint64_t IOHIDEventSystemClientUnscheduleWithRunLoop()
{
  return MEMORY[0x1F40E8B90]();
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C50](manager, *(void *)&options);
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return (CFSetRef)MEMORY[0x1F40E8C58](manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1F40E8C68](allocator, *(void *)&options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C80](manager, *(void *)&options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerScheduleWithRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
}

void IOHIDManagerSetDeviceMatchingMultiple(IOHIDManagerRef manager, CFArrayRef multiple)
{
}

void IOHIDManagerUnscheduleFromRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

CFTypeRef IOHIDServiceClientCopyProperty(IOHIDServiceClientRef service, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40E8D20](service, key);
}

CFTypeRef IOHIDServiceClientGetRegistryID(IOHIDServiceClientRef service)
{
  return (CFTypeRef)MEMORY[0x1F40E8D40](service);
}

IOHIDElementRef IOHIDValueGetElement(IOHIDValueRef value)
{
  return (IOHIDElementRef)MEMORY[0x1F40E8E90](value);
}

CFIndex IOHIDValueGetIntegerValue(IOHIDValueRef value)
{
  return MEMORY[0x1F40E8E98](value);
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1F40E8F88](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA8](*(void *)&AssertionID);
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1F412A148]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1F412A158]();
}

uint64_t LMLanguageModelCreateStringForTokenID()
{
  return MEMORY[0x1F412A170]();
}

uint64_t LMLanguageModelEnumerateCompletionsForPrefixWithBlock()
{
  return MEMORY[0x1F412A180]();
}

uint64_t LMLanguageModelEnumeratePredictionsWithBlock()
{
  return MEMORY[0x1F412A188]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1F412A1A0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1F412A1E0]();
}

uint64_t MADisplayFilterPrefGetCategoryEnabled()
{
  return MEMORY[0x1F40ED008]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1F417CE18]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x1F417CE30]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1F417CE48]();
}

OSStatus MIDIClientCreateWithBlock(CFStringRef name, MIDIClientRef *outClient, MIDINotifyBlock notifyBlock)
{
  return MEMORY[0x1F40DB5C8](name, outClient, notifyBlock);
}

OSStatus MIDIClientDispose(MIDIClientRef client)
{
  return MEMORY[0x1F40DB5D0](*(void *)&client);
}

MIDIEntityRef MIDIDeviceGetEntity(MIDIDeviceRef device, ItemCount entityIndex0)
{
  return MEMORY[0x1F40DB5D8](*(void *)&device, entityIndex0);
}

ItemCount MIDIDeviceGetNumberOfEntities(MIDIDeviceRef device)
{
  return MEMORY[0x1F40DB5E0](*(void *)&device);
}

OSStatus MIDIEndpointGetEntity(MIDIEndpointRef inEndpoint, MIDIEntityRef *outEntity)
{
  return MEMORY[0x1F40DB5E8](*(void *)&inEndpoint, outEntity);
}

MIDIEndpointRef MIDIEntityGetDestination(MIDIEntityRef entity, ItemCount destIndex0)
{
  return MEMORY[0x1F40DB5F0](*(void *)&entity, destIndex0);
}

OSStatus MIDIEntityGetDevice(MIDIEntityRef inEntity, MIDIDeviceRef *outDevice)
{
  return MEMORY[0x1F40DB5F8](*(void *)&inEntity, outDevice);
}

ItemCount MIDIEntityGetNumberOfDestinations(MIDIEntityRef entity)
{
  return MEMORY[0x1F40DB600](*(void *)&entity);
}

ItemCount MIDIEntityGetNumberOfSources(MIDIEntityRef entity)
{
  return MEMORY[0x1F40DB608](*(void *)&entity);
}

MIDIEndpointRef MIDIEntityGetSource(MIDIEntityRef entity, ItemCount sourceIndex0)
{
  return MEMORY[0x1F40DB610](*(void *)&entity, sourceIndex0);
}

MIDIDeviceRef MIDIGetDevice(ItemCount deviceIndex0)
{
  return MEMORY[0x1F40DB628](deviceIndex0);
}

ItemCount MIDIGetNumberOfDevices(void)
{
  return MEMORY[0x1F40DB630]();
}

OSStatus MIDIInputPortCreateWithBlock(MIDIClientRef client, CFStringRef portName, MIDIPortRef *outPort, MIDIReadBlock readBlock)
{
  return MEMORY[0x1F40DB638](*(void *)&client, portName, outPort, readBlock);
}

OSStatus MIDIObjectGetIntegerProperty(MIDIObjectRef obj, CFStringRef propertyID, SInt32 *outValue)
{
  return MEMORY[0x1F40DB640](*(void *)&obj, propertyID, outValue);
}

OSStatus MIDIObjectGetStringProperty(MIDIObjectRef obj, CFStringRef propertyID, CFStringRef *str)
{
  return MEMORY[0x1F40DB648](*(void *)&obj, propertyID, str);
}

OSStatus MIDIPortConnectSource(MIDIPortRef port, MIDIEndpointRef source, void *connRefCon)
{
  return MEMORY[0x1F40DB668](*(void *)&port, *(void *)&source, connRefCon);
}

OSStatus MIDIPortDisconnectSource(MIDIPortRef port, MIDIEndpointRef source)
{
  return MEMORY[0x1F40DB670](*(void *)&port, *(void *)&source);
}

uint64_t MKBDeviceFormattedForContentProtection()
{
  return MEMORY[0x1F412F930]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1F412F980]();
}

uint64_t MSHCreateMIGServerSource()
{
  return MEMORY[0x1F41064A0]();
}

uint64_t MSHGetMachPortFromSource()
{
  return MEMORY[0x1F41064A8]();
}

uint64_t MSHMIGSourceSetSendOnceCallback()
{
  return MEMORY[0x1F41064B0]();
}

uint64_t NLLanguageIdentifierConsumeString()
{
  return MEMORY[0x1F4113F58]();
}

uint64_t NLLanguageIdentifierCreate()
{
  return MEMORY[0x1F4113F60]();
}

uint64_t NLLanguageIdentifierGetTopHypotheses()
{
  return MEMORY[0x1F4113F68]();
}

uint64_t NLLanguageIdentifierRelease()
{
  return MEMORY[0x1F4113F80]();
}

uint64_t NLLanguageIdentifierSetLanguageHints()
{
  return MEMORY[0x1F4113FA0]();
}

uint64_t NLTaggerCopyTagForCurrentToken()
{
  return MEMORY[0x1F4114100]();
}

uint64_t NLTaggerCreate()
{
  return MEMORY[0x1F4114108]();
}

uint64_t NLTaggerEnumerateTokens()
{
  return MEMORY[0x1F4114110]();
}

uint64_t NLTaggerSetString()
{
  return MEMORY[0x1F4114130]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.CFIndex location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

NSString *NSOpenStepRootDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E71C0]();
}

NSPoint NSPointFromString(NSString *aString)
{
  MEMORY[0x1F40E71D0](aString);
  result.CGFloat y = v2;
  result.CGFloat x = v1;
  return result;
}

NSRect NSRectFromString(NSString *aString)
{
  MEMORY[0x1F40E7220](aString);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1F40E7228]();
}

uint64_t NSStringFromBOOL()
{
  return MEMORY[0x1F40E7278]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return (NSString *)MEMORY[0x1F40E7290]((__n128)aPoint, *(__n128 *)&aPoint.y);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return (NSString *)MEMORY[0x1F40E72A8]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

uint64_t SWCHLogHW()
{
  return MEMORY[0x1F4106348]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DD8](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1F40F6DE8](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1F40F6E20](query, attributesToUpdate);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint64_t TTSGetComponentsInNamedSiriVoiceIdentifier()
{
  return MEMORY[0x1F4163FB8]();
}

uint64_t TTSGetComponentsInNashvilleVoiceIdentifier()
{
  return MEMORY[0x1F4163FC0]();
}

uint64_t TTSSpeechLanguageCanonicalFormToGeneralLanguage()
{
  return MEMORY[0x1F4163FD8]();
}

uint64_t VOTBundle()
{
  return MEMORY[0x1F4163FE8]();
}

uint64_t VOTLogCommon()
{
  return MEMORY[0x1F4106350]();
}

uint64_t _AXAssert()
{
  return MEMORY[0x1F4106368]();
}

uint64_t _AXDarkenSystemColorsApp()
{
  return MEMORY[0x1F4178818]();
}

uint64_t _AXDarkenSystemColorsGlobal()
{
  return MEMORY[0x1F4178820]();
}

uint64_t _AXLogWithFacility()
{
  return MEMORY[0x1F4106378]();
}

uint64_t _AXSAXInspectorEnabled()
{
  return MEMORY[0x1F4178828]();
}

uint64_t _AXSAccessibilityEnabled()
{
  return MEMORY[0x1F4178840]();
}

uint64_t _AXSAccessibilityGetBooleaniTunesPreference()
{
  return MEMORY[0x1F4178848]();
}

uint64_t _AXSAccessibilitySetiTunesPreference()
{
  return MEMORY[0x1F4178868]();
}

uint64_t _AXSAirPodsDefaultToneVolume()
{
  return MEMORY[0x1F4178870]();
}

uint64_t _AXSAirPodsHoldDuration()
{
  return MEMORY[0x1F4178878]();
}

uint64_t _AXSAirPodsNoiseCancellationWithOneUnit()
{
  return MEMORY[0x1F4178880]();
}

uint64_t _AXSAirPodsTapSpeed()
{
  return MEMORY[0x1F4178888]();
}

uint64_t _AXSAirPodsToneVolume()
{
  return MEMORY[0x1F4178890]();
}

uint64_t _AXSAirPodsVolumeSwipeDuration()
{
  return MEMORY[0x1F4178898]();
}

uint64_t _AXSAirPodsVolumeSwipeEnabled()
{
  return MEMORY[0x1F41788A0]();
}

uint64_t _AXSAppleTVRemoteClickpadTapsForDirectionalNavigationEnabled()
{
  return MEMORY[0x1F41788C0]();
}

uint64_t _AXSAppleTVScaledUIEnabled()
{
  return MEMORY[0x1F41788C8]();
}

uint64_t _AXSApplicationAccessibilityEnabled()
{
  return MEMORY[0x1F41788D0]();
}

uint64_t _AXSApplicationAccessibilitySetEnabled()
{
  return MEMORY[0x1F41788D8]();
}

uint64_t _AXSAssistiveTouchEnabled()
{
  return MEMORY[0x1F41788E8]();
}

uint64_t _AXSAssistiveTouchExtendedKeyboardPredictionsEnabled()
{
  return MEMORY[0x1F41788F0]();
}

uint64_t _AXSAssistiveTouchHardwareEnabled()
{
  return MEMORY[0x1F4178900]();
}

uint64_t _AXSAssistiveTouchScannerEnabled()
{
  return MEMORY[0x1F4178908]();
}

uint64_t _AXSAssistiveTouchScannerSetEnabled()
{
  return MEMORY[0x1F4178918]();
}

uint64_t _AXSAssistiveTouchSetEnabled()
{
  return MEMORY[0x1F4178920]();
}

uint64_t _AXSAssistiveTouchUIEnabled()
{
  return MEMORY[0x1F4178938]();
}

uint64_t _AXSAutomationEnabled()
{
  return MEMORY[0x1F4178968]();
}

uint64_t _AXSAutomationFauxCollectionViewCellsEnabled()
{
  return MEMORY[0x1F4178970]();
}

uint64_t _AXSAutomationFauxTableViewCellsEnabled()
{
  return MEMORY[0x1F4178978]();
}

uint64_t _AXSAutomationHitpointWarpingEnabled()
{
  return MEMORY[0x1F4178980]();
}

uint64_t _AXSAutomationLocalizedStringLookupInfoEnabled()
{
  return MEMORY[0x1F4178988]();
}

uint64_t _AXSBackTapEnabled()
{
  return MEMORY[0x1F41789B8]();
}

uint64_t _AXSButtonShapesEnabled()
{
  return MEMORY[0x1F41789C8]();
}

uint64_t _AXSButtonShapesEnabledApp()
{
  return MEMORY[0x1F41789D0]();
}

uint64_t _AXSCanDisableApplicationAccessibility()
{
  return MEMORY[0x1F41789D8]();
}

uint64_t _AXSClarityUIEnabled()
{
  return MEMORY[0x1F41789F0]();
}

uint64_t _AXSClassicInvertColorsEnabled()
{
  return MEMORY[0x1F4178A00]();
}

uint64_t _AXSClassicInvertColorsSetEnabled()
{
  return MEMORY[0x1F4178A08]();
}

uint64_t _AXSCommandAndControlEnabled()
{
  return MEMORY[0x1F4178A18]();
}

uint64_t _AXSCommandAndControlSetEnabled()
{
  return MEMORY[0x1F4178A20]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryName()
{
  return MEMORY[0x1F4178A28]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryNameApp()
{
  return MEMORY[0x1F4178A30]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryNameGlobal()
{
  return MEMORY[0x1F4178A38]();
}

uint64_t _AXSCurrentProcessIsWebContent()
{
  return MEMORY[0x1F4178A48]();
}

uint64_t _AXSDifferentiateWithoutColorEnabledApp()
{
  return MEMORY[0x1F4178A58]();
}

uint64_t _AXSDisplayFilterColorSetEnabled()
{
  return MEMORY[0x1F4178A60]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabledApp()
{
  return MEMORY[0x1F4178A78]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabledGlobal()
{
  return MEMORY[0x1F4178A80]();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1F4178A88]();
}

uint64_t _AXSEnhanceTextLegibilityEnabledApp()
{
  return MEMORY[0x1F4178A98]();
}

uint64_t _AXSEnhanceTextTrackingEnabled()
{
  return MEMORY[0x1F4178AA0]();
}

uint64_t _AXSForceTouchEnabled()
{
  return MEMORY[0x1F4178AC0]();
}

uint64_t _AXSForceTouchSensitivity()
{
  return MEMORY[0x1F4178AC8]();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return MEMORY[0x1F4178AD8]();
}

uint64_t _AXSFullKeyboardAccessSetEnabled()
{
  return MEMORY[0x1F4178AE8]();
}

uint64_t _AXSGrayscaleEnabled()
{
  return MEMORY[0x1F4178B00]();
}

uint64_t _AXSGrayscaleSetEnabled()
{
  return MEMORY[0x1F4178B08]();
}

uint64_t _AXSGuidedAccessEnabled()
{
  return MEMORY[0x1F4178B10]();
}

uint64_t _AXSHapticMusicEnabled()
{
  return MEMORY[0x1F4178B40]();
}

uint64_t _AXSHeadsetCaseTonesEnabled()
{
  return MEMORY[0x1F4178B48]();
}

uint64_t _AXSHighContrastFocusIndicatorsEnabled()
{
  return MEMORY[0x1F4178B58]();
}

uint64_t _AXSHomeButtonAssistant()
{
  return MEMORY[0x1F4178B60]();
}

uint64_t _AXSHoverTextBackgroundOpacity()
{
  return MEMORY[0x1F4178B80]();
}

uint64_t _AXSHoverTextCopyBackgroundColorData()
{
  return MEMORY[0x1F4178B88]();
}

uint64_t _AXSHoverTextCopyBorderColorData()
{
  return MEMORY[0x1F4178B90]();
}

uint64_t _AXSHoverTextCopyContentSize()
{
  return MEMORY[0x1F4178B98]();
}

uint64_t _AXSHoverTextCopyFontName()
{
  return MEMORY[0x1F4178BA0]();
}

uint64_t _AXSHoverTextCopyInsertionPointColorData()
{
  return MEMORY[0x1F4178BA8]();
}

uint64_t _AXSHoverTextCopyTextColorData()
{
  return MEMORY[0x1F4178BB0]();
}

uint64_t _AXSHoverTextEnabled()
{
  return MEMORY[0x1F4178BC0]();
}

uint64_t _AXSHoverTextFontSize()
{
  return MEMORY[0x1F4178BC8]();
}

uint64_t _AXSHoverTextSetContentSize()
{
  return MEMORY[0x1F4178BE8]();
}

uint64_t _AXSHoverTextTypingCopyAutocorrectedTextColorData()
{
  return MEMORY[0x1F4178C20]();
}

uint64_t _AXSHoverTextTypingCopyBackgroundColorData()
{
  return MEMORY[0x1F4178C28]();
}

uint64_t _AXSHoverTextTypingCopyBorderColorData()
{
  return MEMORY[0x1F4178C30]();
}

uint64_t _AXSHoverTextTypingCopyFontName()
{
  return MEMORY[0x1F4178C38]();
}

uint64_t _AXSHoverTextTypingCopyInsertionPointColorData()
{
  return MEMORY[0x1F4178C40]();
}

uint64_t _AXSHoverTextTypingCopyMisspelledTextColorData()
{
  return MEMORY[0x1F4178C48]();
}

uint64_t _AXSHoverTextTypingCopyTextColorData()
{
  return MEMORY[0x1F4178C50]();
}

uint64_t _AXSHoverTextTypingCopyTextStyle()
{
  return MEMORY[0x1F4178C58]();
}

uint64_t _AXSHoverTextTypingDisplayMode()
{
  return MEMORY[0x1F4178C60]();
}

uint64_t _AXSHoverTextTypingEnabled()
{
  return MEMORY[0x1F4178C68]();
}

uint64_t _AXSInUnitTestMode()
{
  return MEMORY[0x1F4178CC0]();
}

uint64_t _AXSIncreaseBrightnessFloorEnabled()
{
  return MEMORY[0x1F4178CD0]();
}

uint64_t _AXSIncreaseButtonLegibility()
{
  return MEMORY[0x1F4178CD8]();
}

uint64_t _AXSIncreaseButtonLegibilityApp()
{
  return MEMORY[0x1F4178CE0]();
}

uint64_t _AXSInvertColorsEnabled()
{
  return MEMORY[0x1F4178CF0]();
}

uint64_t _AXSInvertColorsEnabledApp()
{
  return MEMORY[0x1F4178CF8]();
}

uint64_t _AXSInvertColorsEnabledGlobalCached()
{
  return MEMORY[0x1F4178D00]();
}

uint64_t _AXSInvertColorsSetEnabled()
{
  return MEMORY[0x1F4178D08]();
}

uint64_t _AXSIsNonUIBuild()
{
  return MEMORY[0x1F4178D18]();
}

uint64_t _AXSKeyRepeatEnabled()
{
  return MEMORY[0x1F4178D28]();
}

uint64_t _AXSLargeTextUsesExtendedRange()
{
  return MEMORY[0x1F4178D38]();
}

uint64_t _AXSLeftRightAudioBalance()
{
  return MEMORY[0x1F4178D40]();
}

uint64_t _AXSLetterFeedbackEnabled()
{
  return MEMORY[0x1F4178D48]();
}

uint64_t _AXSLiveSpeechEnabled()
{
  return MEMORY[0x1F4178D50]();
}

uint64_t _AXSLiveSpeechSetEnabled()
{
  return MEMORY[0x1F4178D58]();
}

uint64_t _AXSLiveTranscriptionEnabled()
{
  return MEMORY[0x1F4178D60]();
}

uint64_t _AXSLocalizationCaptionMode()
{
  return MEMORY[0x1F4178D70]();
}

uint64_t _AXSMonoAudioEnabled()
{
  return MEMORY[0x1F4178D90]();
}

uint64_t _AXSMossdeepEnabled()
{
  return MEMORY[0x1F4178DA8]();
}

uint64_t _AXSMotionCuesActive()
{
  return MEMORY[0x1F4178DB0]();
}

uint64_t _AXSOnDeviceEyeTrackingEnabled()
{
  return MEMORY[0x1F4178DC0]();
}

uint64_t _AXSPhoneticFeedbackEnabled()
{
  return MEMORY[0x1F4178DD8]();
}

uint64_t _AXSPhotosensitiveMitigationEnabled()
{
  return MEMORY[0x1F4178DE0]();
}

uint64_t _AXSPhotosensitiveMitigationSetEnabled()
{
  return MEMORY[0x1F4178DE8]();
}

uint64_t _AXSQuickSpeakCopyPreferredLocalesForLanguages()
{
  return MEMORY[0x1F4178E28]();
}

uint64_t _AXSQuickSpeakEnabled()
{
  return MEMORY[0x1F4178E30]();
}

uint64_t _AXSQuickSpeakHighlightTextEnabled()
{
  return MEMORY[0x1F4178E38]();
}

uint64_t _AXSQuickTypePredictionFeedbackEnabled()
{
  return MEMORY[0x1F4178E40]();
}

uint64_t _AXSReduceMotionAutoplayVideoPreviewsEnabled()
{
  return MEMORY[0x1F4178E58]();
}

uint64_t _AXSReduceMotionEnabledApp()
{
  return MEMORY[0x1F4178E68]();
}

uint64_t _AXSReduceMotionEnabledGlobal()
{
  return MEMORY[0x1F4178E70]();
}

uint64_t _AXSReduceMotionReduceSlideTransitionsEnabledApp()
{
  return MEMORY[0x1F4178E80]();
}

uint64_t _AXSReduceWhitePointEnabled()
{
  return MEMORY[0x1F4178E88]();
}

uint64_t _AXSScreenFilterSetShowInitialAlert()
{
  return MEMORY[0x1F4178EA0]();
}

uint64_t _AXSSetAirPodsDefaultToneVolume()
{
  return MEMORY[0x1F4178EB0]();
}

uint64_t _AXSSetAirPodsHoldDuration()
{
  return MEMORY[0x1F4178EB8]();
}

uint64_t _AXSSetAirPodsNoiseCancellationWithOneUnit()
{
  return MEMORY[0x1F4178EC0]();
}

uint64_t _AXSSetAirPodsTapSpeed()
{
  return MEMORY[0x1F4178EC8]();
}

uint64_t _AXSSetAirPodsToneVolume()
{
  return MEMORY[0x1F4178ED0]();
}

uint64_t _AXSSetAirPodsVolumeSwipeDuration()
{
  return MEMORY[0x1F4178ED8]();
}

uint64_t _AXSSetAirPodsVolumeSwipeEnabled()
{
  return MEMORY[0x1F4178EE0]();
}

uint64_t _AXSSetDarkenSystemColors()
{
  return MEMORY[0x1F4178F18]();
}

uint64_t _AXSSetHapticMusicEnabled()
{
  return MEMORY[0x1F4178F50]();
}

uint64_t _AXSSetHeadsetCaseTonesEnabled()
{
  return MEMORY[0x1F4178F58]();
}

uint64_t _AXSSetLargeTextUsesExtendedRange()
{
  return MEMORY[0x1F4178F78]();
}

uint64_t _AXSSetMotionCuesModeAndShowBanner()
{
  return MEMORY[0x1F4178F98]();
}

uint64_t _AXSSetPreferredContentSizeCategoryName()
{
  return MEMORY[0x1F4178FA8]();
}

uint64_t _AXSSetSpeakThisEnabled()
{
  return MEMORY[0x1F4178FE8]();
}

uint64_t _AXSSiriSemanticContextEnabled()
{
  return MEMORY[0x1F4179028]();
}

uint64_t _AXSSpeakThisEnabled()
{
  return MEMORY[0x1F4179048]();
}

uint64_t _AXSSwitchControlExtendedKeyboardPredictionsEnabled()
{
  return MEMORY[0x1F4179068]();
}

uint64_t _AXSTripleClickAddOption()
{
  return MEMORY[0x1F4179078]();
}

uint64_t _AXSTripleClickCopyOptions()
{
  return MEMORY[0x1F4179080]();
}

uint64_t _AXSTripleClickRemoveOption()
{
  return MEMORY[0x1F4179090]();
}

uint64_t _AXSTwiceRemoteScreenEnabled()
{
  return MEMORY[0x1F4179098]();
}

uint64_t _AXSTwiceRemoteScreenPlatform()
{
  return MEMORY[0x1F41790A0]();
}

uint64_t _AXSTwiceRemoteScreenSetPlatform()
{
  return MEMORY[0x1F41790B0]();
}

uint64_t _AXSVoiceOverTouchBrailleEightDotMode()
{
  return MEMORY[0x1F41790D8]();
}

uint64_t _AXSVoiceOverTouchBrailleMasterStatusCellIndex()
{
  return MEMORY[0x1F41790E0]();
}

uint64_t _AXSVoiceOverTouchBrailleVirtualStatusAlignment()
{
  return MEMORY[0x1F41790E8]();
}

uint64_t _AXSVoiceOverTouchCopyBrailleBluetoothDisplay()
{
  return MEMORY[0x1F41790F0]();
}

uint64_t _AXSVoiceOverTouchCopyBrailleLanguageRotorItems()
{
  return MEMORY[0x1F41790F8]();
}

uint64_t _AXSVoiceOverTouchCopyBrailleTableIdentifier()
{
  return MEMORY[0x1F4179100]();
}

uint64_t _AXSVoiceOverTouchCopyLanguageRotorItems()
{
  return MEMORY[0x1F4179108]();
}

uint64_t _AXSVoiceOverTouchCopyTactileGraphicsDisplay()
{
  return MEMORY[0x1F4179110]();
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return MEMORY[0x1F4179120]();
}

uint64_t _AXSVoiceOverTouchEnabledThroughAccessory()
{
  return MEMORY[0x1F4179128]();
}

uint64_t _AXSVoiceOverTouchLanguageRotorItemsExist()
{
  return MEMORY[0x1F4179130]();
}

uint64_t _AXSVoiceOverTouchScreenCurtainEnabled()
{
  return MEMORY[0x1F4179140]();
}

uint64_t _AXSVoiceOverTouchSetBrailleVirtualStatusAlignment()
{
  return MEMORY[0x1F4179178]();
}

uint64_t _AXSVoiceOverTouchSetEnabled()
{
  return MEMORY[0x1F4179180]();
}

uint64_t _AXSVoiceOverTouchSetUsageConfirmed()
{
  return MEMORY[0x1F41791C0]();
}

uint64_t _AXSVoiceOverTouchUIEnabled()
{
  return MEMORY[0x1F41791E0]();
}

uint64_t _AXSVoiceOverTouchUsageConfirmed()
{
  return MEMORY[0x1F41791E8]();
}

uint64_t _AXSWatchControlEnabled()
{
  return MEMORY[0x1F4179200]();
}

uint64_t _AXSWordFeedbackEnabled()
{
  return MEMORY[0x1F4179208]();
}

uint64_t _AXSZoomTouchEnabled()
{
  return MEMORY[0x1F4179210]();
}

uint64_t _AXSZoomTouchSetEnabled()
{
  return MEMORY[0x1F4179220]();
}

uint64_t _AXSZoomTouchSmoothScalingDisabled()
{
  return MEMORY[0x1F4179240]();
}

uint64_t _AXSZoomTouchToggledByPreferenceSwitch()
{
  return MEMORY[0x1F4179248]();
}

uint64_t _AXSZoomTouchToggledByVoiceOver()
{
  return MEMORY[0x1F4179250]();
}

uint64_t _AXStringForArgs()
{
  return MEMORY[0x1F4106380]();
}

uint64_t _AXUIElementCreateAppElementWithPid()
{
  return MEMORY[0x1F4106508]();
}

uint64_t _AXUIElementCreateWithPIDAndID()
{
  return MEMORY[0x1F4106518]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return MEMORY[0x1F40D8BB0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __AXStringForVariables()
{
  return MEMORY[0x1F4106558]();
}

uint64_t __UIAccessibilityCastAsClass()
{
  return MEMORY[0x1F4106388]();
}

uint64_t __UIAccessibilitySafeClass()
{
  return MEMORY[0x1F41063C8]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void abort(void)
{
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA538](*(void *)&bp, service_name, sp);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA548](*(void *)&bp, service_name, sp);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1F40CA550]();
}

uint64_t bootstrap_register2()
{
  return MEMORY[0x1F40CA560]();
}

const char *__cdecl bootstrap_strerror(kern_return_t r)
{
  return (const char *)MEMORY[0x1F40CA568](*(void *)&r);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBA58]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1F40CCA30](*(void *)&task, *(void *)&name, *(void *)&flavor, port_info, *(void *)&port_infoCnt);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1F40CCD70]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD8B8](*(void *)&pid, buffer, *(void *)&buffersize);
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1F4181B10](p);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

int32_t u_charName(UChar32 code, UCharNameChoice nameChoice, char *buffer, int32_t bufferLength, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F710](*(void *)&code, *(void *)&nameChoice, buffer, *(void *)&bufferLength, pErrorCode);
}

uint64_t uldn_close()
{
  return MEMORY[0x1F4180088]();
}

uint64_t uldn_keyValueDisplayName()
{
  return MEMORY[0x1F4180090]();
}

uint64_t uldn_openForContext()
{
  return MEMORY[0x1F41800B0]();
}

uint64_t ulistfmt_close()
{
  return MEMORY[0x1F41800C8]();
}

uint64_t ulistfmt_format()
{
  return MEMORY[0x1F41800D8]();
}

uint64_t ulistfmt_open()
{
  return MEMORY[0x1F41800E8]();
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1F40CE758](msg);
}