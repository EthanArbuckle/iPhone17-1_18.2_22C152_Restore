void sub_22B1D318C()
{
  _OWORD *v0;
  uint64_t vars8;

  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E84E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E84E8))
  {
    v0 = operator new(0x70uLL);
    qword_2683E84D8 = (uint64_t)(v0 + 7);
    unk_2683E84E0 = v0 + 7;
    v0[4] = xmmword_26488D340;
    v0[5] = *(_OWORD *)&off_26488D350;
    v0[6] = xmmword_26488D360;
    *v0 = xmmword_26488D300;
    v0[1] = *(_OWORD *)&off_26488D310;
    v0[2] = xmmword_26488D320;
    v0[3] = *(_OWORD *)&off_26488D330;
    qword_2683E84D0 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_22B1D3240, &qword_2683E84D0, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E84E8);
  }
}

uint64_t sub_22B1D3240(uint64_t a1)
{
  v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_22B1D3274()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E8508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E8508))
  {
    qword_2683E8500 = 0;
    qword_2683E84F8 = 0;
    qword_2683E84F0 = (uint64_t)&qword_2683E84F8;
    __cxa_atexit((void (*)(void *))sub_22B1D32FC, &qword_2683E84F0, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E8508);
  }
}

uint64_t sub_22B1D32FC(uint64_t a1)
{
  return a1;
}

void sub_22B1D3328(void *a1)
{
  if (a1)
  {
    sub_22B1D3328(*a1);
    sub_22B1D3328(a1[1]);
    sub_22B1D337C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_22B1D337C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_22B1D33D4()
{
  unint64_t v0 = 0x2683E8000uLL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E8518, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_2683E8518);
    unint64_t v0 = 0x2683E8000;
    if (v2)
    {
      qword_2683E8510 = (uint64_t)os_log_create("com.apple.agx", "AGCEnv");
      __cxa_guard_release(&qword_2683E8518);
      unint64_t v0 = 0x2683E8000;
    }
  }
  return *(void *)(v0 + 1296);
}

BOOL sub_22B1D3444(uint64_t a1, const void *a2, size_t a3)
{
  v3 = *(const void **)(a1 + 1744);
  if (!v3) {
    return 1;
  }
  size_t v6 = strlen(*(const char **)(a1 + 1744));
  if (a3 < v6) {
    return 0;
  }
  return !v6 || memcmp(a2, v3, v6) == 0;
}

uint64_t sub_22B1D34B4()
{
  return 0;
}

uint64_t sub_22B1D34BC()
{
  return 0;
}

uint64_t sub_22B1D34C4()
{
  return 1;
}

uint64_t sub_22B1D34CC()
{
  return 1;
}

uint64_t sub_22B1D34D4()
{
  return 0;
}

void sub_22B1D34DC()
{
}

uint64_t *sub_22B1D3634(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v44 = *(_OWORD *)a2;
  uint64_t v45 = *(void *)(a2 + 16);
  if (v45) {
    llvm::MetadataTracking::track();
  }
  int v46 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v44);
  if (v45) {
    llvm::MetadataTracking::untrack();
  }
  if ((*(unsigned char *)(a4 + 1) & 0xF) != 0)
  {
    long long v41 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v42, (llvm::IRBuilderBase *)(a1 + 8));
    int v43 = *(_DWORD *)(a1 + 104);
    a3 = (uint64_t *)sub_22B1DF0F4(a1, (uint64_t)&v41, a3, a5, 0);
    if (v42) {
      llvm::MetadataTracking::untrack();
    }
    long long v38 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v39, (llvm::IRBuilderBase *)(a1 + 8));
    int v10 = *(_DWORD *)(a1 + 104);
    int v40 = v10;
    long long v50 = v38;
    uint64_t v51 = v39;
    if (v39)
    {
      llvm::MetadataTracking::track();
      int v10 = v40;
    }
    int v52 = v10;
    sub_22B1D3BF4(a1, &v50);
    if (v51) {
      llvm::MetadataTracking::untrack();
    }
    if ((*(unsigned char *)(a4 + 1) & 1) != 0 && (*a3 == *(void *)(a1 + 272) || *a3 == *(void *)(a1 + 264)))
    {
      v11 = (llvm::Constant *)sub_22B2423A4(a1, (uint64_t)a3, 3, 1);
      LOWORD(v48) = 257;
      uint64_t v12 = llvm::ConstantInt::get();
      v13 = (uint64_t *)sub_22B242524(a1 + 8, (uint64_t)a3, v12, (uint64_t)v47);
      uint64_t v61 = 0;
      v62 = &v61;
      uint64_t v63 = 0x2000000000;
      uint64_t v64 = *(void *)(a1 + 160);
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 0x40000000;
      v47[2] = sub_22B1DF40C;
      v47[3] = &unk_26488D398;
      v48 = &v61;
      uint64_t v49 = a1;
      uint64_t v14 = sub_22B242FF0(a1, v11, (uint64_t)v47);
      uint64_t v15 = sub_22B241FF8((void *)a1, v14, *v13);
      a3 = (uint64_t *)sub_22B243454(a1, v15, (uint64_t)v13);
      _Block_object_dispose(&v61, 8);
    }
    if (v39) {
      llvm::MetadataTracking::untrack();
    }
    long long v35 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v36, (llvm::IRBuilderBase *)(a1 + 8));
    int v16 = *(_DWORD *)(a1 + 104);
    int v37 = v16;
    long long v50 = v35;
    uint64_t v51 = v36;
    if (v36)
    {
      llvm::MetadataTracking::track();
      int v16 = v37;
    }
    int v52 = v16;
    sub_22B1D3BF4(a1, &v50);
    if (v51) {
      llvm::MetadataTracking::untrack();
    }
    unsigned int v17 = (*(_DWORD *)a4 >> 9) & 7;
    if (v17)
    {
      uint64_t v18 = *a3;
      uint64_t v19 = sub_22B2423A4(a1, (uint64_t)a3, 3, 1);
      uint64_t v20 = llvm::ConstantFP::get();
      uint64_t v21 = sub_22B243454(a1, v19, v20);
      if (v17 <= 4)
      {
        uint64_t v22 = v21;
        uint64_t v61 = llvm::ConstantFP::get();
        v62 = (uint64_t *)llvm::ConstantFP::get();
        uint64_t v63 = llvm::ConstantFP::get();
        uint64_t v64 = llvm::ConstantFP::get();
        uint64_t v57 = llvm::ConstantFP::get();
        uint64_t v58 = llvm::ConstantFP::get();
        uint64_t v59 = llvm::ConstantFP::get();
        uint64_t v60 = llvm::ConstantFP::get();
        uint64_t v53 = llvm::ConstantFP::get();
        uint64_t v54 = llvm::ConstantFP::get();
        uint64_t v55 = llvm::ConstantFP::get();
        uint64_t v56 = llvm::ConstantFP::get();
        v23 = (uint64_t *)llvm::ConstantVector::get();
        v24 = (uint64_t *)llvm::ConstantVector::get();
        v25 = (uint64_t *)llvm::ConstantVector::get();
        if (v18 == *(void *)(a1 + 272))
        {
          v23 = (uint64_t *)sub_22B241B38(a1, v23, 0);
          v24 = (uint64_t *)sub_22B241B38(a1, v24, 0);
          v25 = (uint64_t *)sub_22B241B38(a1, v25, 0);
        }
        uint64_t v26 = sub_22B243188(a1, (uint64_t)v23, v22);
        uint64_t v27 = sub_22B243188(a1, (uint64_t)v24, v22);
        uint64_t v28 = sub_22B243188(a1, (uint64_t)v25, v22);
        LOWORD(v48) = 257;
        uint64_t v29 = llvm::ConstantInt::get();
        uint64_t v30 = sub_22B2427EC(a1 + 8, (uint64_t)a3, v26, v29, (uint64_t)v47);
        LOWORD(v48) = 257;
        uint64_t v31 = llvm::ConstantInt::get();
        uint64_t v32 = sub_22B2427EC(a1 + 8, v30, v27, v31, (uint64_t)v47);
        LOWORD(v48) = 257;
        uint64_t v33 = llvm::ConstantInt::get();
        a3 = (uint64_t *)sub_22B2427EC(a1 + 8, v32, v28, v33, (uint64_t)v47);
      }
    }
    if (v36) {
      llvm::MetadataTracking::untrack();
    }
  }
  return a3;
}

uint64_t sub_22B1D3BF4(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  if (v6) {
    llvm::MetadataTracking::track();
  }
  int v7 = *((_DWORD *)a2 + 6);
  uint64_t result = sub_22B1D3C74((uint64_t)&v5, a1 + 8);
  if (v6) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t sub_22B1D3C74(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    sub_22B1D3CF8((char **)a2, *(char **)a1, *(char **)(a1 + 8));
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v4;
  if (v4)
  {
    llvm::MetadataTracking::track();
    uint64_t v4 = v6;
  }
  uint64_t result = (uint64_t)sub_22B1D3D70((char **)a2, v4);
  if (v6) {
    uint64_t result = llvm::MetadataTracking::untrack();
  }
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 24);
  return result;
}

char **sub_22B1D3CF8(char **result, char *a2, char *a3)
{
  result[6] = a2;
  result[7] = a3;
  if (a2 + 40 != a3)
  {
    v3 = result;
    uint64_t v4 = a3 - 24;
    if (!a3) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *((void *)v4 + 6);
    uint64_t v6 = v5;
    if (v5)
    {
      llvm::MetadataTracking::track();
      uint64_t v5 = v6;
    }
    uint64_t result = sub_22B1D3D70(v3, v5);
    if (v6) {
      return (char **)llvm::MetadataTracking::untrack();
    }
  }
  return result;
}

char **sub_22B1D3D70(char **result, uint64_t a2)
{
  int v2 = *result;
  uint64_t v3 = *((unsigned int *)result + 2);
  uint64_t v4 = &(*result)[16 * v3];
  if (a2)
  {
    if (v3)
    {
      uint64_t v5 = 16 * v3;
      uint64_t v6 = *result;
      while (*(_DWORD *)v6)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5) {
          goto LABEL_6;
        }
      }
      *((void *)v6 + 1) = a2;
    }
    else
    {
LABEL_6:
      if (v3 >= *((_DWORD *)result + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)uint64_t v4 = 0;
      *(void *)&v2[16 * v3 + 8] = a2;
      *((_DWORD *)result + 2) = v3 + 1;
    }
  }
  else
  {
    if (v3)
    {
      uint64_t v7 = 16 * v3;
      v8 = *result;
      while (*(_DWORD *)v8)
      {
        v8 += 16;
        v7 -= 16;
        if (!v7)
        {
          v8 = v4;
          goto LABEL_21;
        }
      }
    }
    else
    {
      v8 = *result;
    }
    if (v8 != v4)
    {
      for (i = v8 + 16; i != v4; i += 16)
      {
        if (*(_DWORD *)i)
        {
          *(_DWORD *)v8 = *(_DWORD *)i;
          *((void *)v8 + 1) = *((void *)i + 1);
          v8 += 16;
        }
      }
    }
LABEL_21:
    *((_DWORD *)result + 2) = (unint64_t)(v8 - v2) >> 4;
  }
  return result;
}

uint64_t sub_22B1D3E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_22B1D3E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)(a1 + 1448)) {
    strlen(*(const char **)(a1 + 1448));
  }
  v15[0] = v16;
  v15[1] = (void *)0x100000000;
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v7 = v6;
  if (v15[0] != v16) {
    free(v15[0]);
  }
  __int16 v17 = 257;
  v8 = (uint64_t *)(a1 + 8);
  v9 = (llvm::Type ***)sub_22B1D4034((uint64_t)v8, **(void **)(*(void *)v7 + 16), v7, 0, 0, (uint64_t)v15);
  __int16 v17 = 257;
  uint64_t v10 = sub_22B1D4240(v8, **(llvm::Type ***)(*(void *)a3 + 16), a3, 0, (uint64_t)v15);
  __int16 v17 = 257;
  return sub_22B1D4340(v8, 32, v9, v10, (uint64_t)v15);
}

llvm::Value *sub_22B1D4034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  int v10 = 0;
  if (v9)
  {
    uint64_t v11 = 48 * v9;
    long long v12 = (void *)(v8 + 32);
    do
    {
      v10 += (*v12 - *(v12 - 1)) >> 3;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  uint64_t v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50);
  if (v9)
  {
    int v14 = 0;
    uint64_t v15 = 48 * v9;
    int v16 = (void *)(v8 + 32);
    do
    {
      v14 += (*v16 - *(v16 - 1)) >> 3;
      v16 += 6;
      v15 -= 48;
    }
    while (v15);
    uint64_t v17 = 48 * v9;
    uint64_t v18 = (void *)(v8 + 32);
    do
    {
      LODWORD(v15) = v15 + ((*v18 - *(v18 - 1)) >> 3);
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  llvm::Instruction::Instruction();
  *((void *)v13 + 8) = 0;
  llvm::CallInst::init();
  if (*(unsigned char *)(a1 + 100))
  {
    llvm::Value::getContext(v13);
    *((void *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (sub_22B1D44A8((uint64_t)v13)) {
    sub_22B1D4554(a1, (uint64_t)v13);
  }
  (*(void (**)(void, llvm::Value *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v13, a6, *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v19 = *(unsigned int *)(a1 + 8);
  if (v19)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = v20 + 16 * v19;
    do
    {
      llvm::Instruction::setMetadata();
      v20 += 16;
    }
    while (v20 != v21);
  }
  return v13;
}

uint64_t sub_22B1D4240(uint64_t *a1, llvm::Type *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, a2);
  }
  uint64_t v10 = llvm::User::operator new((llvm::User *)0x40);
  llvm::LoadInst::LoadInst();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
  uint64_t v11 = *((unsigned int *)a1 + 2);
  if (v11)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = v12 + 16 * v11;
    do
    {
      llvm::Instruction::setMetadata();
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v10;
}

uint64_t sub_22B1D4340(uint64_t *a1, uint64_t a2, llvm::Type ***a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1[9] + 40))(a1[9]);
  if (!v8)
  {
    uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
    uint64_t v9 = *a3;
    int v10 = (*a3)[1] & 0xFE;
    llvm::Type::getInt1Ty(**a3, v11);
    if (v9) {
      BOOL v12 = v10 == 18;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12) {
      llvm::VectorType::get();
    }
    llvm::CmpInst::CmpInst();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v8, a5, a1[6], a1[7]);
    uint64_t v13 = *((unsigned int *)a1 + 2);
    if (v13)
    {
      uint64_t v14 = *a1;
      uint64_t v15 = v14 + 16 * v13;
      do
      {
        llvm::Instruction::setMetadata();
        v14 += 16;
      }
      while (v14 != v15);
    }
  }
  return v8;
}

BOOL sub_22B1D44A8(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (unsigned int v2 = v1 - 28, v1 < 0x1C))
  {
    uint64_t v3 = 0;
    if (!a1 || v1 != 5) {
      return v3;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39) {
    return 0;
  }
  if (((1 << v2) & 0x40000001255000) != 0) {
    return 1;
  }
  if (((1 << v2) & 0x380000000000000) == 0) {
    return 0;
  }
  do
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(unsigned __int8 *)(*(void *)a1 + 8);
    a1 = *(void *)a1 + 24;
    if (v4) {
      BOOL v6 = v5 == 17;
    }
    else {
      BOOL v6 = 0;
    }
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
  }
  return v5 < 7;
}

uint64_t sub_22B1D4554(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 88)) {
    llvm::Instruction::setMetadata();
  }
  llvm::Instruction::setFastMathFlags();
  return a2;
}

void sub_22B1D459C(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t sub_22B1D45B0()
{
  return 0;
}

uint64_t sub_22B1D45B8()
{
  return 0;
}

uint64_t sub_22B1D45C0(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *a2;
  *a2 = result + 1;
  return result;
}

uint64_t sub_22B1D45D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v213 = *MEMORY[0x263EF8340];
  long long v197 = *(_OWORD *)a2;
  uint64_t v198 = *(void *)(a2 + 16);
  if (v198) {
    llvm::MetadataTracking::track();
  }
  int v199 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v197);
  if (v198) {
    llvm::MetadataTracking::untrack();
  }
  int v6 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 - 4) >= 2)
  {
    if (v6 == 1)
    {
      int v12 = *(_DWORD *)(a3 + 192);
      unsigned int v13 = v12 & 0xFFFFFFFE;
      BOOL v14 = (v12 & 0xFFFFFFFE) == 2;
    }
    else
    {
      BOOL v14 = 0;
      int v12 = *(_DWORD *)(a3 + 192);
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    int v15 = *(unsigned __int8 *)(a1 + 1976);
    if (*(unsigned char *)(a1 + 1976)) {
      char v16 = v14;
    }
    else {
      char v16 = 1;
    }
    v207 = v209;
    uint64_t v208 = 0x1000000000;
    int v17 = *(_DWORD *)(a3 + 4);
    BOOL v19 = v6 == 1 && v13 == 2;
    if (v15 && !v19)
    {
      uint64_t v20 = **(void **)(a3 + 120);
      if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12) {
        int v21 = *(unsigned __int8 *)(**(void **)(v20 + 16) + 8);
      }
      else {
        int v21 = *(_DWORD *)(v20 + 8);
      }
      memset(&v204, 0, sizeof(v204));
      if (v6 == 1)
      {
        if (v12 == 3)
        {
          v210.__r_.__value_.__r.__words[0] = *(void *)(a1 + 296);
          v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
          v210.__r_.__value_.__r.__words[2] = v210.__r_.__value_.__r.__words[0];
          std::string::size_type v211 = v210.__r_.__value_.__r.__words[0];
          uint64_t v61 = llvm::StructType::get();
          BOOL v62 = v17 == 2;
          uint64_t v81 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
          uint64_t v64 = (void *)(v81 + 1800);
          uint64_t v65 = (void *)(v81 + 1848);
LABEL_92:
          if (!v62) {
            uint64_t v65 = v64;
          }
          MEMORY[0x230F433D0](&v204, *v65);
          v66 = (uint64_t *)(a1 + 184);
          sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 184));
          if (v61)
          {
LABEL_97:
            uint64_t v82 = llvm::PointerType::get();
            sub_22B1D6788((uint64_t)&v207, v82);
            uint64_t v83 = llvm::PointerType::get();
            sub_22B1D6788((uint64_t)&v207, v83);
            if (v61) {
              goto LABEL_166;
            }
            uint64_t v84 = *(void *)(a3 + 136);
            uint64_t v85 = *(void *)(a3 + 184);
            uint64_t v86 = *(void *)(a3 + 200);
            uint64_t v87 = llvm::PointerType::get();
            sub_22B1D6788((uint64_t)&v207, v87);
            switch(v17)
            {
              case 0:
                std::string::append(&v204, ".1d");
                uint64_t v88 = 160;
                if (v21 == 13) {
                  uint64_t v88 = 192;
                }
                sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + v88));
                if (v84)
                {
                  std::string::append(&v204, ".array");
                  sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 200));
                }
                if (v21 == 13) {
                  goto LABEL_135;
                }
                break;
              case 1:
                std::string::append(&v204, ".2d");
                uint64_t v89 = 216;
                if (v21 == 13) {
                  uint64_t v89 = 240;
                }
                sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + v89));
                if (v84)
                {
                  std::string::append(&v204, ".array");
                  sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 200));
                }
                else if (v86)
                {
                  std::string::append(&v204, ".msaa");
                }
                if (v21 != 13) {
                  goto LABEL_136;
                }
LABEL_135:
                std::string::append(&v204, ".i");
                break;
              case 2:
                std::string::append(&v204, ".cube");
                sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 272));
LABEL_136:
                if (v85)
                {
                  std::string::append(&v204, ".shadow");
                  uint64_t v92 = *(void *)(a1 + 160);
                  goto LABEL_138;
                }
                break;
              case 3:
                if (v21 == 13) {
                  v90 = ".3d.i";
                }
                else {
                  v90 = ".3d";
                }
                if (v21 == 13) {
                  uint64_t v91 = 296;
                }
                else {
                  uint64_t v91 = 272;
                }
                std::string::append(&v204, v90);
                uint64_t v92 = *(void *)(a1 + v91);
LABEL_138:
                sub_22B1D6788((uint64_t)&v207, v92);
                break;
              default:
                break;
            }
            switch(*(_DWORD *)(a3 + 144))
            {
              case 0:
                uint64_t v96 = *(void *)(a1 + 160);
                goto LABEL_150;
              case 1:
                uint64_t v97 = 160;
                if (v21 == 13) {
                  uint64_t v97 = 192;
                }
                sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + v97));
                std::string::append(&v204, ".lod");
                break;
              case 2:
                std::string::append(&v204, ".grad");
                uint64_t v98 = *(unsigned int *)(a3 + 4);
                if (v98 <= 3)
                {
                  unsigned int v99 = dword_22B26F9F0[v98];
                  do
                  {
                    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 216));
                    --v99;
                  }
                  while (v99);
                }
                break;
              case 3:
                if (*(void *)(a3 + 200))
                {
                  uint64_t v96 = *(void *)(a1 + 184);
LABEL_150:
                  sub_22B1D6788((uint64_t)&v207, v96);
                }
                break;
              default:
                break;
            }
            if (*(void *)(a3 + 128))
            {
              sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 184));
              std::string::append(&v204, ".offset");
            }
            if (v6 == 3)
            {
              sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 272));
              std::string::append(&v204, ".4xf");
            }
            else
            {
              uint64_t v100 = 272;
              if (*(_DWORD *)(a3 + 8) == 1)
              {
                uint64_t v100 = 264;
                v101 = ".4xh";
              }
              else
              {
                v101 = ".4xf";
              }
              std::string::size_type v102 = *(void *)(a1 + v100);
              std::string::append(&v204, v101);
              std::string::size_type v103 = *(void *)(a1 + 176);
              v210.__r_.__value_.__r.__words[0] = v102;
              v210.__r_.__value_.__l.__size_ = v103;
              llvm::StructType::get();
              sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 152));
            }
            if (v84) {
              std::string::append(&v204, ".i64");
            }
            int v104 = *(_DWORD *)(a3 + 144);
            v105 = ".f32";
            if (v104)
            {
              if (v104 != 1) {
                goto LABEL_166;
              }
              if (v21 == 13) {
                v105 = ".i32";
              }
            }
            std::string::append(&v204, v105);
LABEL_166:
            llvm::FunctionType::get();
            if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
            {
              v106 = (std::string *)v204.__r_.__value_.__r.__words[0];
              if (!v204.__r_.__value_.__r.__words[0])
              {
LABEL_170:
                llvm::Module::getOrInsertFunction();
                uint64_t v196 = v107;
                if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v204.__r_.__value_.__l.__data_);
                }
                goto LABEL_172;
              }
            }
            else
            {
              v106 = &v204;
            }
            strlen((const char *)v106);
            goto LABEL_170;
          }
          goto LABEL_95;
        }
        if (v12 == 2)
        {
          v210.__r_.__value_.__r.__words[0] = *(void *)(a1 + 296);
          v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
          uint64_t v61 = llvm::StructType::get();
          BOOL v62 = v17 == 2;
          uint64_t v63 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
          uint64_t v64 = (void *)(v63 + 1784);
          uint64_t v65 = (void *)(v63 + 1832);
          goto LABEL_92;
        }
      }
      else if (v6 == 3)
      {
        MEMORY[0x230F433D0](&v204, *(void *)(a1 + 1744));
LABEL_96:
        uint64_t v61 = 0;
        goto LABEL_97;
      }
      MEMORY[0x230F433D0](&v204, *(void *)(a1 + 1728));
      v66 = (uint64_t *)(a1 + 184);
      sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 184));
LABEL_95:
      sub_22B1D6788((uint64_t)&v207, *v66);
      goto LABEL_96;
    }
    uint64_t v22 = llvm::PointerType::get();
    sub_22B1D6788((uint64_t)&v207, v22);
    uint64_t v23 = llvm::PointerType::get();
    sub_22B1D6788((uint64_t)&v207, v23);
    uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 336), (llvm::LLVMContext *)2);
    sub_22B1D6788((uint64_t)&v207, Int8PtrTy);
    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 168));
    if ((v17 - 2) < 2)
    {
      v25 = (uint64_t *)(a1 + 272);
    }
    else if (v17 == 1)
    {
      v25 = (uint64_t *)(a1 + 216);
    }
    else
    {
      if (v17)
      {
        uint64_t v67 = 0;
        goto LABEL_70;
      }
      v25 = (uint64_t *)(a1 + 160);
    }
    uint64_t v67 = *v25;
LABEL_70:
    sub_22B1D6788((uint64_t)&v207, v67);
    if (*(_DWORD *)(a3 + 144) == 2)
    {
      uint64_t v68 = *(unsigned int *)(a3 + 4);
      if (v68 > 3) {
        unsigned int v69 = 0;
      }
      else {
        unsigned int v69 = dword_22B26F9F0[v68];
      }
      uint64_t v70 = v69;
      uint64_t v71 = *(void *)(a1 + 216);
      int v72 = v208;
      if (v208 + (unint64_t)v69 > HIDWORD(v208)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v69)
      {
        v73 = (char *)v207 + 8 * v208;
        uint64_t v74 = v70;
        do
        {
          *v73++ = v71;
          --v74;
        }
        while (v74);
      }
      LODWORD(v208) = v72 + v70;
    }
    else
    {
      sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 168));
      sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 160));
    }
    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 168));
    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 168));
    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 168));
    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 192));
    switch(*(_DWORD *)a3)
    {
      case 0:
      case 2:
        switch(v17)
        {
          case 0:
            v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1752);
            goto LABEL_128;
          case 1:
            v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1768);
            goto LABEL_128;
          case 2:
            v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1816);
            goto LABEL_128;
          case 3:
            v75 = (const char **)(a1 + 8 * (*(_DWORD *)(a3 + 144) == 2) + 1864);
            goto LABEL_128;
          default:
            goto LABEL_88;
        }
      case 1:
        int v76 = *(_DWORD *)(a3 + 192);
        switch(v76)
        {
          case 3:
            v210.__r_.__value_.__r.__words[0] = *(void *)(a1 + 296);
            v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
            v210.__r_.__value_.__r.__words[2] = v210.__r_.__value_.__r.__words[0];
            std::string::size_type v211 = v210.__r_.__value_.__r.__words[0];
            llvm::StructType::get();
            BOOL v77 = v17 == 2;
            uint64_t v93 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
            v79 = (const char **)(v93 + 1800);
            v75 = (const char **)(v93 + 1848);
            break;
          case 2:
            v210.__r_.__value_.__r.__words[0] = *(void *)(a1 + 296);
            v210.__r_.__value_.__l.__size_ = v210.__r_.__value_.__r.__words[0];
            llvm::StructType::get();
            BOOL v77 = v17 == 2;
            uint64_t v94 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
            v79 = (const char **)(v94 + 1784);
            v75 = (const char **)(v94 + 1832);
            break;
          case 1:
            BOOL v77 = v17 == 2;
            uint64_t v78 = a1 + 8 * (*(_DWORD *)(a3 + 144) == 2);
            v79 = (const char **)(v78 + 1768);
            v75 = (const char **)(v78 + 1816);
            break;
          default:
LABEL_88:
            v80 = 0;
            goto LABEL_129;
        }
        if (!v77) {
          v75 = v79;
        }
LABEL_128:
        v80 = *v75;
LABEL_129:
        llvm::FunctionType::get();
        if (v80) {
          strlen(v80);
        }
        llvm::Module::getOrInsertFunction();
        uint64_t v196 = v95;
        break;
      case 3:
        sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 272));
        switch(v17)
        {
          case 0:
            v75 = (const char **)(a1 + 1880);
            goto LABEL_128;
          case 1:
            v75 = (const char **)(a1 + 1888);
            goto LABEL_128;
          case 2:
            v75 = (const char **)(a1 + 1896);
            goto LABEL_128;
          case 3:
            v75 = (const char **)(a1 + 1904);
            goto LABEL_128;
          default:
            goto LABEL_88;
        }
      default:
        goto LABEL_88;
    }
LABEL_172:
    if (v207 != v209) {
      free(v207);
    }
    if (v16)
    {
      v207 = v209;
      uint64_t v208 = 0x1000000000;
      v108 = *(uint64_t **)(a3 + 120);
      if ((*(_DWORD *)(*v108 + 8) & 0xFE) == 0x12) {
        int v109 = *(unsigned __int8 *)(**(void **)(*v108 + 16) + 8);
      }
      else {
        int v109 = *(_DWORD *)(*v108 + 8);
      }
      uint64_t v111 = *(void *)(a3 + 136);
      int v112 = *(_DWORD *)(a3 + 4);
      if (*(_DWORD *)a3 == 3) {
        v113 = (uint64_t *)(a3 + 40);
      }
      else {
        v113 = (uint64_t *)(a3 + 32);
      }
      sub_22B1D6788((uint64_t)&v207, *v113);
      sub_22B1D6788((uint64_t)&v207, *(void *)(a3 + 72));
      if (v111)
      {
        uint64_t v114 = sub_22B1D67E8((void *)a1, a3);
      }
      else
      {
        v154 = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 336), (llvm::LLVMContext *)2);
        uint64_t v114 = llvm::ConstantPointerNull::get(v154, v155);
      }
      sub_22B1D6788((uint64_t)&v207, v114);
      uint64_t v156 = llvm::ConstantInt::get();
      sub_22B1D6788((uint64_t)&v207, v156);
      if (*(void *)(a3 + 128) && v109 == 13 && *(unsigned char *)(a1 + 1633)) {
        uint64_t v157 = 0;
      }
      else {
        uint64_t v157 = sub_22B241B38(a1, v108, 1);
      }
      sub_22B1D6788((uint64_t)&v207, v157);
      int v158 = *(_DWORD *)(a3 + 144);
      if (v158 == 3)
      {
        uint64_t v172 = llvm::ConstantInt::get();
        sub_22B1D6788((uint64_t)&v207, v172);
        uint64_t v173 = llvm::ConstantFP::get();
      }
      else
      {
        if (v158 == 2)
        {
          uint64_t v159 = *(unsigned int *)(a3 + 4);
          if (v159 <= 3)
          {
            uint64_t v160 = 0;
            uint64_t v161 = dword_22B26F9F0[v159];
            do
            {
              *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
              v204.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
              v204.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
              uint64_t v162 = llvm::ConstantVector::get();
              uint64_t v163 = *(void *)(a3 + 160);
              uint64_t v164 = *(void *)(a3 + 168);
              __int16 v212 = 257;
              uint64_t v165 = sub_22B1D69A8(a1 + 8, v163, v164, v162, (uint64_t)&v210);
              sub_22B1D6788((uint64_t)&v207, v165);
              ++v160;
            }
            while (v161 != v160);
          }
LABEL_256:
          uint64_t v176 = llvm::ConstantInt::get();
          sub_22B1D6788((uint64_t)&v207, v176);
          uint64_t v177 = llvm::ConstantInt::get();
          sub_22B1D6788((uint64_t)&v207, v177);
          uint64_t v178 = llvm::ConstantInt::get();
          sub_22B1D6788((uint64_t)&v207, v178);
          uint64_t v179 = *(void *)(a3 + 128);
          if (v179)
          {
            if (v109 != 13 || !*(unsigned char *)(a1 + 1633))
            {
              uint64_t v182 = sub_22B1D6B24(a1, a3);
              goto LABEL_266;
            }
            if ((v112 & 0xFFFFFFFE) == 2) {
              uint64_t v179 = sub_22B242678(a1, *(void *)(a3 + 128), 4);
            }
            __int16 v212 = 257;
            v180 = (uint64_t *)sub_22B1D6A70(a1 + 8, (uint64_t)v108, v179, (uint64_t)&v210);
            uint64_t v181 = sub_22B241B38(a1, v180, 1);
            *((void *)v207 + 4) = v181;
          }
          else
          {
            v183 = *(uint64_t **)(a3 + 200);
            if (v183)
            {
              uint64_t v184 = sub_22B241CD8((void *)a1, v183, *v183, 0, 0);
              __int16 v212 = 257;
              uint64_t v185 = llvm::ConstantInt::get();
              uint64_t v182 = sub_22B1D6C68(a1 + 8, v184, v185, (uint64_t)&v210);
              goto LABEL_266;
            }
          }
          uint64_t v182 = llvm::ConstantInt::get();
LABEL_266:
          sub_22B1D6788((uint64_t)&v207, v182);
          if (*(_DWORD *)a3 == 3)
          {
            uint64_t v186 = sub_22B1D6138(a1, a3);
            sub_22B1D6788((uint64_t)&v207, v186);
          }
          __int16 v212 = 257;
          uint64_t v51 = (uint64_t)sub_22B1D4034(a1 + 8, *(void *)(v196 + 24), v196, (uint64_t)v207, v208, (uint64_t)&v210);
          if (*(_DWORD *)a3 != 3 && *(unsigned char *)(a3 + 17)) {
            uint64_t v51 = (**(uint64_t (***)(uint64_t, uint64_t, void))a1)(a1, v51, *(unsigned int *)(a3 + 8));
          }
          if (*(unsigned char *)(a3 + 16) && (*(_DWORD *)(*(void *)v51 + 8) & 0xFE) == 0x12)
          {
            __int16 v212 = 257;
            uint64_t v187 = llvm::ConstantInt::get();
            uint64_t v51 = sub_22B242524(a1 + 8, v51, v187, (uint64_t)&v210);
          }
          if (*(unsigned char *)(a3 + 19))
          {
            std::string::size_type v188 = *(void *)(a1 + 176);
            v210.__r_.__value_.__r.__words[0] = *(void *)v51;
            v210.__r_.__value_.__l.__size_ = v188;
            llvm::StructType::get();
            uint64_t v189 = llvm::UndefValue::get();
            LODWORD(v204.__r_.__value_.__l.__data_) = 0;
            __int16 v212 = 257;
            uint64_t v190 = sub_22B1D6D44(a1 + 8, v189, v51, (uint64_t)&v204, 1, (uint64_t)&v210);
            uint64_t v191 = llvm::ConstantInt::get();
            LODWORD(v204.__r_.__value_.__l.__data_) = 1;
            __int16 v212 = 257;
            uint64_t v51 = sub_22B1D6D44(a1 + 8, v190, v191, (uint64_t)&v204, 1, (uint64_t)&v210);
          }
          uint64_t v59 = v207;
          if (v207 != v209) {
            goto LABEL_57;
          }
          return v51;
        }
        if (*(_DWORD *)(a3 + 4) == 1 && v111 && *(_DWORD *)a3 == 1) {
          uint64_t v174 = llvm::ConstantFP::get();
        }
        else {
          uint64_t v174 = sub_22B241B38(a1, *(uint64_t **)(a3 + 152), 1);
        }
        uint64_t v173 = v174;
        uint64_t v175 = llvm::ConstantInt::get();
        sub_22B1D6788((uint64_t)&v207, v175);
      }
      sub_22B1D6788((uint64_t)&v207, v173);
      goto LABEL_256;
    }
    if (*(_DWORD *)a3 == 3) {
      uint64_t v110 = sub_22B1D6138(a1, a3);
    }
    else {
      uint64_t v110 = 0;
    }
    v115 = *(uint64_t **)(a3 + 120);
    uint64_t v195 = v110;
    if ((*(_DWORD *)(*v115 + 8) & 0xFE) == 0x12) {
      int v116 = *(unsigned __int8 *)(**(void **)(*v115 + 16) + 8);
    }
    else {
      int v116 = *(_DWORD *)(*v115 + 8);
    }
    uint64_t v194 = *(void *)(a3 + 136);
    uint64_t v117 = *(void *)(a3 + 184);
    v207 = v209;
    uint64_t v208 = 0x1000000000;
    uint64_t v119 = *(void *)(a3 + 160);
    uint64_t v118 = *(void *)(a3 + 168);
    int v120 = *(_DWORD *)a3;
    int v121 = *(_DWORD *)(a3 + 4);
    if (*(_DWORD *)a3 != 3)
    {
      uint64_t v122 = llvm::ConstantInt::get();
      sub_22B1D6788((uint64_t)&v207, v122);
      uint64_t v123 = llvm::ConstantInt::get();
      sub_22B1D6788((uint64_t)&v207, v123);
    }
    uint64_t v124 = llvm::PointerType::get();
    v125 = (uint64_t *)(a3 + 40);
    if (v120 != 3) {
      v125 = (uint64_t *)(a3 + 32);
    }
    uint64_t v126 = *v125;
    __int16 v212 = 257;
    uint64_t v127 = sub_22B1D7384(a1 + 8, 49, v126, v124, (uint64_t)&v210);
    sub_22B1D6788((uint64_t)&v207, v127);
    uint64_t v128 = *(void *)(a3 + 72);
    __int16 v212 = 257;
    uint64_t v129 = sub_22B1D7384(a1 + 8, 49, v128, v124, (uint64_t)&v210);
    sub_22B1D6788((uint64_t)&v207, v129);
    uint64_t v130 = llvm::ConstantInt::get();
    uint64_t v131 = llvm::PointerType::get();
    __int16 v212 = 257;
    uint64_t v132 = sub_22B1D7384(a1 + 8, 48, v130, v131, (uint64_t)&v210);
    sub_22B1D6788((uint64_t)&v207, v132);
    if (v121 == 2) {
      v115 = (uint64_t *)sub_22B242678(a1, (uint64_t)v115, 4);
    }
    int v133 = v116;
    if (v116 == 13)
    {
      uint64_t v134 = *v115;
      if ((*(_DWORD *)(*v115 + 8) & 0xFE) == 0x12) {
        uint64_t v134 = **(void **)(v134 + 16);
      }
      v115 = (uint64_t *)sub_22B241CD8((void *)a1, v115, v134, 0, 0);
      uint64_t v135 = *(void *)(a3 + 128);
      if (v135 && *(unsigned char *)(a1 + 1633))
      {
        if ((*(_DWORD *)(a3 + 4) & 0xFFFFFFFE) == 2) {
          uint64_t v135 = sub_22B242678(a1, *(void *)(a3 + 128), 4);
        }
        __int16 v212 = 257;
        v115 = (uint64_t *)sub_22B1D6A70(a1 + 8, (uint64_t)v115, v135, (uint64_t)&v210);
      }
    }
    sub_22B1D6788((uint64_t)&v207, (uint64_t)v115);
    if (v194)
    {
      uint64_t v136 = sub_22B1D67E8((void *)a1, a3);
      uint64_t v137 = *(void *)(a1 + 200);
      __int16 v212 = 257;
      uint64_t v138 = sub_22B1D7384(a1 + 8, 47, v136, v137, (uint64_t)&v210);
      sub_22B1D6788((uint64_t)&v207, v138);
    }
    if (v117) {
      sub_22B1D6788((uint64_t)&v207, *(void *)(a3 + 184));
    }
    uint64_t v139 = *(void *)(a3 + 200);
    if (v139)
    {
      uint64_t v140 = *(void *)(a1 + 184);
      __int16 v212 = 257;
      uint64_t v141 = sub_22B1D7384(a1 + 8, 38, v139, v140, (uint64_t)&v210);
    }
    else
    {
      int v166 = *(_DWORD *)(a3 + 144);
      if (v166)
      {
        if (v166 != 1)
        {
          if (v166 == 2)
          {
            uint64_t v167 = *(unsigned int *)(a3 + 4);
            if (v167 <= 3)
            {
              uint64_t v168 = 0;
              uint64_t v169 = dword_22B26F9F0[v167];
              do
              {
                *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
                v204.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                v204.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
                uint64_t v170 = llvm::ConstantVector::get();
                __int16 v212 = 257;
                uint64_t v171 = sub_22B1D69A8(a1 + 8, v119, v118, v170, (uint64_t)&v210);
                sub_22B1D6788((uint64_t)&v207, v171);
                ++v168;
              }
              while (v169 != v168);
            }
          }
LABEL_210:
          if (*(void *)(a3 + 128))
          {
            if (v133 == 13 && *(unsigned char *)(a1 + 1633))
            {
              uint64_t v142 = llvm::ConstantInt::get();
            }
            else
            {
              uint64_t v143 = sub_22B1D6B24(a1, a3);
              uint64_t v144 = *(void *)(a1 + 184);
              __int16 v212 = 257;
              uint64_t v142 = sub_22B1D7384(a1 + 8, 38, v143, v144, (uint64_t)&v210);
            }
            sub_22B1D6788((uint64_t)&v207, v142);
          }
          uint64_t v145 = v195;
          if (*(_DWORD *)a3 != 3) {
            uint64_t v145 = llvm::ConstantFP::get();
          }
          sub_22B1D6788((uint64_t)&v207, v145);
          __int16 v212 = 257;
          uint64_t v51 = (uint64_t)sub_22B1D4034(a1 + 8, *(void *)(v196 + 24), v196, (uint64_t)v207, v208, (uint64_t)&v210);
          if (*(_DWORD *)a3 != 3)
          {
            LODWORD(v204.__r_.__value_.__l.__data_) = 0;
            __int16 v212 = 257;
            uint64_t v146 = sub_22B1D7940(a1 + 8, v51, (uint64_t)&v204, 1, (uint64_t)&v210);
            if (*(unsigned char *)(a3 + 17)) {
              uint64_t v146 = (**(uint64_t (***)(uint64_t, uint64_t, void))a1)(a1, v146, *(unsigned int *)(a3 + 8));
            }
            if (*(unsigned char *)(a3 + 16) && (*(_DWORD *)(*(void *)v146 + 8) & 0xFE) == 0x12)
            {
              __int16 v212 = 257;
              uint64_t v147 = llvm::ConstantInt::get();
              uint64_t v146 = sub_22B242524(a1 + 8, v146, v147, (uint64_t)&v210);
            }
            if (*(unsigned char *)(a3 + 19))
            {
              std::string::size_type v148 = *(void *)(a1 + 176);
              v210.__r_.__value_.__r.__words[0] = *(void *)v146;
              v210.__r_.__value_.__l.__size_ = v148;
              llvm::StructType::get();
              uint64_t v149 = llvm::UndefValue::get();
              LODWORD(v204.__r_.__value_.__l.__data_) = 0;
              __int16 v212 = 257;
              uint64_t v150 = sub_22B1D6D44(a1 + 8, v149, v146, (uint64_t)&v204, 1, (uint64_t)&v210);
              int v203 = 1;
              __int16 v212 = 257;
              uint64_t v151 = sub_22B1D7940(a1 + 8, v51, (uint64_t)&v203, 1, (uint64_t)&v210);
              uint64_t v152 = *(void *)(a1 + 176);
              __int16 v206 = 257;
              uint64_t v153 = sub_22B1D7384(a1 + 8, 38, v151, v152, (uint64_t)&v204);
              int v202 = 1;
              __int16 v201 = 257;
              uint64_t v51 = sub_22B1D6D44(a1 + 8, v150, v153, (uint64_t)&v202, 1, (uint64_t)v200);
            }
            else
            {
              uint64_t v51 = v146;
            }
          }
          uint64_t v59 = v207;
          if (v207 != v209) {
            goto LABEL_57;
          }
          return v51;
        }
        uint64_t v192 = *(void *)(a3 + 152);
        if (v116 == 13)
        {
          uint64_t v193 = *(void *)(a1 + 192);
          if (*(unsigned char *)(*(void *)v192 + 8) == 13)
          {
            __int16 v212 = 257;
            uint64_t v141 = sub_22B1D77F0(a1 + 8, v192, v193, 0, (uint64_t)&v210);
          }
          else
          {
            __int16 v212 = 257;
            uint64_t v141 = sub_22B1D78D4(a1 + 8, v192, v193, (uint64_t)&v210);
          }
          goto LABEL_209;
        }
      }
      else
      {
        uint64_t v192 = *(void *)(a3 + 152);
      }
      uint64_t v141 = sub_22B241FF8((void *)a1, v192, *(void *)(a1 + 160));
    }
LABEL_209:
    sub_22B1D6788((uint64_t)&v207, v141);
    goto LABEL_210;
  }
  sub_22B1D7BF0(&v210, *(char **)(a1 + 1736));
  v207 = v209;
  uint64_t v208 = 0x800000000;
  sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 184));
  sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 184));
  uint64_t v7 = llvm::PointerType::get();
  sub_22B1D6788((uint64_t)&v207, v7);
  uint64_t v8 = llvm::PointerType::get();
  sub_22B1D6788((uint64_t)&v207, v8);
  uint64_t v9 = llvm::PointerType::get();
  sub_22B1D6788((uint64_t)&v207, v9);
  int v10 = *(_DWORD *)(a3 + 4);
  if (v10 == 2)
  {
    std::string::append(&v210, ".cube");
    uint64_t v11 = (uint64_t *)(a1 + 272);
  }
  else
  {
    if (v10 != 1) {
      goto LABEL_31;
    }
    std::string::append(&v210, ".2d");
    uint64_t v11 = (uint64_t *)(a1 + 216);
  }
  sub_22B1D6788((uint64_t)&v207, *v11);
LABEL_31:
  if (*(void *)(a3 + 136))
  {
    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 200));
    std::string::append(&v210, ".array");
  }
  std::string::append(&v210, ".gather");
  if (*(void *)(a3 + 128))
  {
    sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 184));
    std::string::append(&v210, ".offset");
  }
  sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 184));
  sub_22B1D6788((uint64_t)&v207, *(void *)(a1 + 152));
  std::string::append(&v210, ".4xf");
  if (*(void *)(a3 + 136)) {
    std::string::append(&v210, ".i64");
  }
  std::string::size_type v26 = *(void *)(a1 + 176);
  v204.__r_.__value_.__r.__words[0] = *(void *)(a1 + 272);
  v204.__r_.__value_.__l.__size_ = v26;
  llvm::StructType::get();
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v28 = v27;
  if (v207 != v209) {
    free(v207);
  }
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v210.__r_.__value_.__l.__data_);
  }
  v207 = v209;
  uint64_t v208 = 0x800000000;
  uint64_t v29 = llvm::ConstantInt::get();
  sub_22B1D6788((uint64_t)&v207, v29);
  uint64_t v30 = llvm::ConstantInt::get();
  sub_22B1D6788((uint64_t)&v207, v30);
  uint64_t v31 = llvm::PointerType::get();
  uint64_t v32 = *(void *)(a3 + 32);
  __int16 v212 = 257;
  uint64_t v33 = sub_22B1D7384(a1 + 8, 49, v32, v31, (uint64_t)&v210);
  sub_22B1D6788((uint64_t)&v207, v33);
  uint64_t v34 = *(void *)(a3 + 72);
  __int16 v212 = 257;
  uint64_t v35 = sub_22B1D7384(a1 + 8, 49, v34, v31, (uint64_t)&v210);
  sub_22B1D6788((uint64_t)&v207, v35);
  uint64_t v36 = llvm::ConstantInt::get();
  uint64_t v37 = llvm::PointerType::get();
  __int16 v212 = 257;
  uint64_t v38 = sub_22B1D7384(a1 + 8, 48, v36, v37, (uint64_t)&v210);
  sub_22B1D6788((uint64_t)&v207, v38);
  int v39 = *(_DWORD *)(a3 + 4);
  if (v39 == 2)
  {
    uint64_t v41 = sub_22B241B38(a1, *(uint64_t **)(a3 + 120), 1);
    uint64_t v40 = sub_22B242678(a1, v41, 4);
  }
  else
  {
    if (v39 != 1) {
      goto LABEL_46;
    }
    uint64_t v40 = sub_22B241B38(a1, *(uint64_t **)(a3 + 120), 1);
  }
  sub_22B1D6788((uint64_t)&v207, v40);
LABEL_46:
  if (*(void *)(a3 + 136))
  {
    uint64_t v42 = sub_22B1D67E8((void *)a1, a3);
    uint64_t v43 = *(void *)(a1 + 200);
    __int16 v212 = 257;
    uint64_t v44 = sub_22B1D7384(a1 + 8, 47, v42, v43, (uint64_t)&v210);
    sub_22B1D6788((uint64_t)&v207, v44);
  }
  if (*(void *)(a3 + 128))
  {
    uint64_t v45 = sub_22B1D6B24(a1, a3);
    uint64_t v46 = *(void *)(a1 + 184);
    __int16 v212 = 257;
    uint64_t v47 = sub_22B1D7384(a1 + 8, 38, v45, v46, (uint64_t)&v210);
    sub_22B1D6788((uint64_t)&v207, v47);
  }
  uint64_t v48 = llvm::ConstantInt::get();
  sub_22B1D6788((uint64_t)&v207, v48);
  uint64_t v49 = llvm::ConstantFP::get();
  sub_22B1D6788((uint64_t)&v207, v49);
  __int16 v212 = 257;
  long long v50 = sub_22B1D4034(a1 + 8, *(void *)(v28 + 24), v28, (uint64_t)v207, v208, (uint64_t)&v210);
  LODWORD(v204.__r_.__value_.__l.__data_) = 0;
  __int16 v212 = 257;
  uint64_t v51 = sub_22B1D7940(a1 + 8, (uint64_t)v50, (uint64_t)&v204, 1, (uint64_t)&v210);
  if (*(unsigned char *)(a3 + 225))
  {
    v204.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
    v204.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
    v204.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
    uint64_t v205 = llvm::ConstantInt::get();
    uint64_t v52 = llvm::ConstantVector::get();
    __int16 v212 = 257;
    uint64_t v51 = sub_22B1D69A8(a1 + 8, v51, v51, v52, (uint64_t)&v210);
  }
  if (*(unsigned char *)(a3 + 17)) {
    uint64_t v51 = (**(uint64_t (***)(uint64_t, uint64_t, void))a1)(a1, v51, *(unsigned int *)(a3 + 8));
  }
  if (*(unsigned char *)(a3 + 19))
  {
    std::string::size_type v53 = *(void *)(a1 + 176);
    v210.__r_.__value_.__r.__words[0] = *(void *)v51;
    v210.__r_.__value_.__l.__size_ = v53;
    llvm::StructType::get();
    uint64_t v54 = llvm::UndefValue::get();
    LODWORD(v204.__r_.__value_.__l.__data_) = 0;
    __int16 v212 = 257;
    uint64_t v55 = sub_22B1D6D44(a1 + 8, v54, v51, (uint64_t)&v204, 1, (uint64_t)&v210);
    int v203 = 1;
    __int16 v212 = 257;
    uint64_t v56 = sub_22B1D7940(a1 + 8, (uint64_t)v50, (uint64_t)&v203, 1, (uint64_t)&v210);
    uint64_t v57 = *(void *)(a1 + 176);
    __int16 v206 = 257;
    uint64_t v58 = sub_22B1D7384(a1 + 8, 38, v56, v57, (uint64_t)&v204);
    int v202 = 1;
    __int16 v201 = 257;
    uint64_t v51 = sub_22B1D6D44(a1 + 8, v55, v58, (uint64_t)&v202, 1, (uint64_t)v200);
  }
  uint64_t v59 = v207;
  if (v207 != v209) {
LABEL_57:
  }
    free(v59);
  return v51;
}

uint64_t sub_22B1D6138(uint64_t a1, uint64_t a2)
{
  v62[3] = *MEMORY[0x263EF8340];
  v61[0] = v62;
  v61[1] = (void *)0x300000000;
  uint64_t v4 = *(void *)(a2 + 64);
  __int16 v60 = 257;
  unsigned int v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = sub_22B1D4240((uint64_t *)(a1 + 8), **(llvm::Type ***)(*(void *)v4 + 16), v4, 0, (uint64_t)&v57);
  sub_22B1D6788((uint64_t)v61, *(void *)(a1 + 160));
  uint64_t v7 = *(void *)(a1 + 184);
  __int16 v60 = 257;
  uint64_t v8 = sub_22B1D7384((uint64_t)v5, 38, v6, v7, (uint64_t)&v57);
  sub_22B1D6788((uint64_t)v61, *(void *)(a1 + 184));
  uint64_t v9 = *(const char **)(a1 + 1144);
  llvm::FunctionType::get();
  if (v9) {
    strlen(v9);
  }
  llvm::Module::getOrInsertFunction();
  uint64_t v11 = v10;
  uint64_t v12 = sub_22B241B38(a1, *(uint64_t **)(a2 + 208), (*(_DWORD *)(a2 + 8) - 3) < 2);
  BOOL v14 = (*(_DWORD *)(a1 + 1696) & 0xFFFFFFFE) == 2 && *(_DWORD *)(a2 + 8) < 2u;
  uint64_t v48 = v12;
  uint64_t v47 = a2;
  if (v14)
  {
    __int16 v60 = 257;
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t v16 = sub_22B1D7B18((uint64_t)v5, v6, v15, (uint64_t)&v57);
    uint64_t v17 = llvm::ConstantInt::get();
    __int16 v56 = 257;
    uint64_t v18 = sub_22B1D6F68((uint64_t)v5, v16, v17, (uint64_t)v55);
    uint64_t v19 = llvm::ConstantInt::get();
    __int16 v54 = 257;
    uint64_t v20 = (llvm::Type ***)v18;
    uint64_t v21 = v48;
    sub_22B1D4340(v5, 33, v20, v19, (uint64_t)v53);
  }
  else
  {
    uint64_t v21 = v12;
  }
  uint64_t v22 = llvm::UndefValue::get();
  uint64_t v23 = 0;
  char v49 = !v14;
  do
  {
    uint64_t v57 = v59;
    uint64_t v58 = 0x300000000;
    __int16 v56 = 257;
    uint64_t v24 = llvm::ConstantInt::get();
    uint64_t Select = sub_22B242524((uint64_t)v5, v21, v24, (uint64_t)v55);
    char v26 = v49;
    if (v23 == 3) {
      char v26 = 1;
    }
    if ((v26 & 1) == 0)
    {
      long long v50 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v51, (llvm::IRBuilderBase *)v5);
      int v52 = *(_DWORD *)(a1 + 104);
      (*(void (**)(uint64_t, long long *, uint64_t, void, void))(*(void *)a1 + 136))(a1, &v50, Select, 0, *(void *)(a1 + 160));
      if (v51) {
        llvm::MetadataTracking::untrack();
      }
      __int16 v56 = 257;
      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
      uint64_t v21 = v48;
    }
    sub_22B1D6788((uint64_t)&v57, Select);
    sub_22B1D6788((uint64_t)&v57, v8);
    __int16 v56 = 257;
    uint64_t v27 = sub_22B1D4034((uint64_t)v5, *(void *)(v11 + 24), v11, (uint64_t)v57, v58, (uint64_t)v55);
    uint64_t v28 = *(void *)(a1 + 160);
    __int16 v56 = 257;
    uint64_t v29 = sub_22B1D7384((uint64_t)v5, 49, (uint64_t)v27, v28, (uint64_t)v55);
    __int16 v56 = 257;
    uint64_t v30 = llvm::ConstantInt::get();
    uint64_t v22 = sub_22B2427EC((uint64_t)v5, v22, v29, v30, (uint64_t)v55);
    if (v57 != v59) {
      free(v57);
    }
    ++v23;
  }
  while (v23 != 4);
  uint64_t v31 = **(void **)(v47 + 208);
  if ((*(_DWORD *)(v31 + 8) & 0xFE) == 0x12) {
    uint64_t v31 = **(void **)(v31 + 16);
  }
  if (v31 == *(void *)(a1 + 160) || v31 == *(void *)(a1 + 192))
  {
    __int16 v60 = 257;
    uint64_t v32 = llvm::ConstantInt::get();
    uint64_t v33 = sub_22B1D7B18((uint64_t)v5, v6, v32, (uint64_t)&v57);
    uint64_t v34 = llvm::ConstantInt::get();
    __int16 v56 = 257;
    uint64_t v35 = (llvm::Type ***)sub_22B1D6F68((uint64_t)v5, v33, v34, (uint64_t)v55);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v54 = 257;
    sub_22B1D4340(v5, 33, v35, v36, (uint64_t)v53);
    uint64_t v37 = *(void *)(v47 + 208);
    uint64_t v38 = *(void *)(a1 + 272);
    __int16 v60 = 257;
    sub_22B1D7384((uint64_t)v5, 49, v37, v38, (uint64_t)&v57);
    __int16 v56 = 257;
    uint64_t v22 = llvm::IRBuilderBase::CreateSelect();
  }
  __int16 v60 = 257;
  uint64_t v39 = llvm::ConstantInt::get();
  uint64_t v40 = sub_22B1D7B18((uint64_t)v5, v6, v39, (uint64_t)&v57);
  uint64_t v41 = llvm::ConstantInt::get();
  __int16 v56 = 257;
  uint64_t v42 = (llvm::Type ***)sub_22B1D6F68((uint64_t)v5, v40, v41, (uint64_t)v55);
  uint64_t v43 = llvm::ConstantInt::get();
  __int16 v54 = 257;
  sub_22B1D4340(v5, 33, v42, v43, (uint64_t)v53);
  v55[0] = llvm::ConstantInt::get();
  v55[1] = llvm::ConstantInt::get();
  v55[2] = llvm::ConstantInt::get();
  v55[3] = llvm::ConstantInt::get();
  uint64_t v44 = llvm::ConstantVector::get();
  __int16 v60 = 257;
  sub_22B1D69A8((uint64_t)v5, v22, v22, v44, (uint64_t)&v57);
  __int16 v60 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateSelect();
  if (v61[0] != v62) {
    free(v61[0]);
  }
  return v45;
}

uint64_t sub_22B1D6788(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_22B1D67E8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_22B1D7234((uint64_t)a1, *(llvm::LLVMContext **)(a2 + 56));
  unsigned int v5 = sub_22B1D7234((uint64_t)a1, *(llvm::LLVMContext **)(a2 + 56));
  uint64_t v6 = sub_22B1D7234((uint64_t)a1, *(llvm::LLVMContext **)(a2 + 56));
  uint64_t v7 = (llvm::Type ***)sub_22B241CD8(a1, *(uint64_t **)(a2 + 136), **(void **)(a2 + 136), 0, 0);
  __int16 v23 = 257;
  uint64_t v8 = sub_22B1D4240(a1 + 1, **(llvm::Type ***)(*(void *)v6 + 16), (uint64_t)v6, 0, (uint64_t)v22);
  __int16 v23 = 257;
  sub_22B1D4340(a1 + 1, 37, v7, v8, (uint64_t)v22);
  __int16 v23 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v23 = 257;
  uint64_t v10 = sub_22B1D4240(a1 + 1, **(llvm::Type ***)(*(void *)v5 + 16), (uint64_t)v5, 0, (uint64_t)v22);
  uint64_t v11 = a1[25];
  __int16 v23 = 257;
  uint64_t v12 = sub_22B1D7384((uint64_t)(a1 + 1), 39, v10, v11, (uint64_t)v22);
  uint64_t v13 = a1[25];
  __int16 v21 = 257;
  uint64_t v14 = sub_22B1D7384((uint64_t)(a1 + 1), 39, Select, v13, (uint64_t)v20);
  __int16 v19 = 257;
  uint64_t v15 = (uint64_t *)sub_22B1D7468((uint64_t)(a1 + 1), v12, v14, (uint64_t)v18);
  __int16 v23 = 257;
  uint64_t v16 = (uint64_t *)sub_22B1D4240(a1 + 1, **(llvm::Type ***)(*(void *)v4 + 16), (uint64_t)v4, 0, (uint64_t)v22);
  __int16 v23 = 257;
  return sub_22B1D7544((uint64_t)a1, v16, v15, (uint64_t)v22);
}

uint64_t sub_22B1D69A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[8] = *MEMORY[0x263EF8340];
  llvm::ShuffleVectorInst::getShuffleMask();
  return sub_22B1D70C0(a1, a2, a3, (uint64_t)v10, 0, a5);
}

uint64_t sub_22B1D6A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_22B1D6B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantInt::get();
  uint64_t v5 = *(unsigned int *)(a2 + 4);
  if (v5 <= 3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = dword_22B26F9F0[v5];
    do
    {
      uint64_t v8 = *(void *)(a2 + 128);
      __int16 v17 = 257;
      uint64_t v9 = llvm::ConstantInt::get();
      uint64_t v10 = sub_22B242524(a1 + 8, v8, v9, (uint64_t)v16);
      __int16 v17 = 257;
      uint64_t v11 = llvm::ConstantInt::get();
      uint64_t v12 = sub_22B1D6C68(a1 + 8, v10, v11, (uint64_t)v16);
      __int16 v17 = 257;
      uint64_t v13 = llvm::ConstantInt::get();
      uint64_t v14 = sub_22B1D6F68(a1 + 8, v12, v13, (uint64_t)v16);
      __int16 v17 = 257;
      uint64_t v4 = sub_22B1D7014(a1 + 8, v4, v14, (uint64_t)v16);
      ++v6;
    }
    while (v7 != v6);
  }
  return v4;
}

uint64_t sub_22B1D6C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 152))(*(void *)(a1 + 72));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      sub_22B1D6EE0((uint64_t *)a1, v6, a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_22B1D6D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 352))(*(void *)(a1 + 72), a2, a3, a4, a5);
    if (v8) {
      BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      sub_22B1D6EE0((uint64_t *)a1, v8, a6);
    }
  }
  else
  {
    uint64_t v8 = llvm::User::operator new((llvm::User *)0x60);
    uint64_t v10 = llvm::Instruction::Instruction();
    *(void *)(v10 + 64) = v10 + 80;
    *(void *)(v10 + 72) = 0x400000000;
    llvm::InsertValueInst::init();
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8, a6, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = v12 + 16 * v11;
      do
      {
        llvm::Instruction::setMetadata();
        v12 += 16;
      }
      while (v12 != v13);
    }
  }
  return v8;
}

uint64_t sub_22B1D6EE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t sub_22B1D6F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_22B1D7014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_22B1D70C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 336))(*(void *)(a1 + 72), a2, a3, a4, a5);
    if (v12) {
      BOOL v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13) {
      sub_22B1D6EE0((uint64_t *)a1, v12, a6);
    }
  }
  else
  {
    uint64_t v12 = llvm::User::operator new((llvm::User *)0x68);
    __int16 v19 = 257;
    MEMORY[0x230F427B0](v12, a2, a3, a4, a5, v18, 0);
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v12, a6, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      uint64_t v15 = *(void *)a1;
      uint64_t v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v12;
}

llvm::GetElementPtrInst *sub_22B1D7234(uint64_t a1, llvm::LLVMContext *a2)
{
  v12[2] = *(uint64_t **)MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v4 = **(void **)(v4 + 16);
  }
  uint64_t v5 = **(void **)(v4 + 16);
  __int16 v10 = 257;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 72), a2);
  v12[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 72), v6);
  v12[1] = (uint64_t *)llvm::ConstantInt::get();
  uint64_t v7 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(void, uint64_t, llvm::LLVMContext *, uint64_t **, uint64_t, uint64_t))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), v5, a2, v12, 2, 1);
  if (!v7)
  {
    __int16 v11 = 257;
    uint64_t v7 = (llvm::GetElementPtrInst *)sub_22B1D7668(v5, (uint64_t *)a2, v12, 2);
    llvm::GetElementPtrInst::setIsInBounds(v7);
    sub_22B1D6EE0((uint64_t *)(a1 + 8), (uint64_t)v7, (uint64_t)v9);
  }
  return v7;
}

uint64_t sub_22B1D7384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3;
  if (*(void *)a3 != a4)
  {
    if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
    {
      uint64_t v5 = llvm::CastInst::Create();
      sub_22B1D6EE0((uint64_t *)a1, v5, a5);
    }
    else
    {
      uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), a2, a3, a4);
      if (v5) {
        BOOL v8 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        sub_22B1D6EE0((uint64_t *)a1, v5, a5);
      }
    }
  }
  return v5;
}

uint64_t sub_22B1D7468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 88))(*(void *)(a1 + 72));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      sub_22B1D6EE0((uint64_t *)a1, v6, a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_22B1D7544(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v4 = **(void **)(v4 + 16);
  }
  return sub_22B1D757C(a1 + 8, **(void **)(v4 + 16), a2, a3, a4);
}

uint64_t sub_22B1D757C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  __int16 v11 = a4;
  uint64_t v12 = a4;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t **, uint64_t, void))(**(void **)(a1 + 72) + 48))(*(void *)(a1 + 72), a2, a3, &v12, 1, 0);
  if (!v9)
  {
    __int16 v13 = 257;
    uint64_t v9 = sub_22B1D7668(a2, a3, &v11, 1);
    sub_22B1D6EE0((uint64_t *)a1, v9, a5);
  }
  return v9;
}

uint64_t sub_22B1D7668(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x50);
  uint64_t v9 = *a2;
  unsigned int v10 = *(_DWORD *)(*a2 + 8);
  if ((v10 & 0xFE) == 0x12)
  {
    uint64_t v9 = **(void **)(v9 + 16);
    unsigned int v10 = *(_DWORD *)(v9 + 8);
  }
  __int16 v11 = (llvm::LLVMContext *)(v10 >> 8);
  llvm::GetElementPtrInst::getIndexedType();
  if (*(void *)(v9 + 24)) {
    llvm::PointerType::get();
  }
  else {
    llvm::PointerType::get(*(llvm::PointerType **)v9, v11);
  }
  if (*a2 && (*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
  {
LABEL_16:
    llvm::VectorType::get();
    goto LABEL_17;
  }
  if (a4)
  {
    uint64_t v12 = 8 * a4;
    __int16 v13 = a3;
    do
    {
      uint64_t v14 = **v13;
      if (v14 && (*(_DWORD *)(v14 + 8) & 0xFE) == 18) {
        goto LABEL_16;
      }
      ++v13;
      v12 -= 8;
    }
    while (v12);
  }
LABEL_17:
  llvm::Instruction::Instruction();
  *(void *)(v8 + 64) = a1;
  *(void *)(v8 + 72) = llvm::GetElementPtrInst::getIndexedType();
  llvm::GetElementPtrInst::init();
  return v8;
}

uint64_t sub_22B1D77F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t IntegerCast = a2;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
    {
      uint64_t IntegerCast = llvm::CastInst::CreateIntegerCast();
      sub_22B1D6EE0((uint64_t *)a1, IntegerCast, a5);
    }
    else
    {
      uint64_t IntegerCast = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 248))(*(void *)(a1 + 72), a2);
      if (IntegerCast) {
        BOOL v8 = *(unsigned __int8 *)(IntegerCast + 16) >= 0x1Cu;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        sub_22B1D6EE0((uint64_t *)a1, IntegerCast, a5);
      }
    }
  }
  return IntegerCast;
}

uint64_t sub_22B1D78D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return sub_22B1D7384(a1, 41, a2, a3, a4);
}

uint64_t sub_22B1D7940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 344))(*(void *)(a1 + 72), a2, a3, a4);
    if (v8) {
      BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      sub_22B1D6EE0((uint64_t *)a1, v8, a5);
    }
  }
  else
  {
    uint64_t v8 = llvm::User::operator new((llvm::User *)0x60);
    llvm::ExtractValueInst::getIndexedType();
    llvm::Instruction::Instruction();
    if (*(void *)(v8 - 32))
    {
      **(void **)(v8 - 16) = *(void *)(v8 - 24);
      uint64_t v10 = *(void *)(v8 - 24);
      if (v10) {
        *(void *)(v10 + 16) = *(void *)(v8 - 16);
      }
    }
    *(void *)(v8 - 32) = a2;
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v12 = (void *)(a2 + 8);
    uint64_t v11 = v13;
    *(void *)(v8 - 24) = v13;
    if (v13) {
      *(void *)(v11 + 16) = v8 - 24;
    }
    *(void *)(v8 - 16) = v12;
    *uint64_t v12 = v8 - 32;
    *(void *)(v8 + 64) = v8 + 80;
    *(void *)(v8 + 72) = 0x400000000;
    llvm::ExtractValueInst::init();
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      uint64_t v15 = *(void *)a1;
      uint64_t v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v8;
}

uint64_t sub_22B1D7B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 160))(*(void *)(a1 + 72));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      sub_22B1D6EE0((uint64_t *)a1, v6, a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

void *sub_22B1D7BF0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_22B1D7CA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v30 = *(_OWORD *)a2;
  uint64_t v31 = *(void *)(a2 + 16);
  if (v31) {
    llvm::MetadataTracking::track();
  }
  int v32 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v30);
  if (v31) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v11 = *(void *)(a1 + 160);
  if (a3 != 1) {
    uint64_t v11 = llvm::FixedVectorType::get();
  }
  uint64_t v12 = llvm::PointerType::get();
  uint64_t v13 = a1 + 8 * (a3 - 1);
  if (a6)
  {
    uint64_t v14 = *(void *)(v13 + 1944);
    if (v14) {
      size_t v15 = strlen(*(const char **)(v13 + 1944));
    }
    else {
      size_t v15 = 0;
    }
    uint64_t v18 = sub_22B1D7EC8(a1, v14, v15, v11, *(void *)(a1 + 192), v12, v12);
    uint64_t v33 = llvm::ConstantInt::get();
    uint64_t v34 = a5;
    uint64_t v35 = a6;
    uint64_t v19 = a1 + 8;
    __int16 v29 = 257;
    uint64_t v20 = *(void *)(v18 + 24);
    uint64_t v21 = v18;
    uint64_t v22 = 3;
  }
  else
  {
    uint64_t v16 = *(void *)(v13 + 1912);
    if (v16) {
      size_t v17 = strlen(*(const char **)(v13 + 1912));
    }
    else {
      size_t v17 = 0;
    }
    uint64_t v23 = sub_22B1D7FA8(a1, v16, v17, v11, *(void *)(a1 + 192), v12);
    uint64_t v33 = llvm::ConstantInt::get();
    uint64_t v34 = a5;
    uint64_t v19 = a1 + 8;
    __int16 v29 = 257;
    uint64_t v20 = *(void *)(v23 + 24);
    uint64_t v21 = v23;
    uint64_t v22 = 2;
  }
  uint64_t v24 = sub_22B1D4034(v19, v20, v21, (uint64_t)&v33, v22, (uint64_t)v28);
  v25.i32[0] = a3;
  uint8x8_t v26 = (uint8x8_t)vcnt_s8(v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.i32[0] != 1) {
    return sub_22B2423A4(a1, (uint64_t)v24, a3, 1);
  }
  return (uint64_t)v24;
}

uint64_t sub_22B1D7EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v12[3] = *MEMORY[0x263EF8340];
  __src[0] = a5;
  __src[1] = a6;
  __src[2] = a7;
  v11[0] = v12;
  v11[1] = (void *)0x300000000;
  sub_22B1D8088((unsigned int *)v11, __src, v11);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v8 = v7;
  if (v11[0] != v12) {
    free(v11[0]);
  }
  return v8;
}

uint64_t sub_22B1D7FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  __src[0] = a5;
  __src[1] = a6;
  v10[0] = v11;
  v10[1] = (void *)0x200000000;
  sub_22B1D8088((unsigned int *)v10, __src, v10);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v7 = v6;
  if (v10[0] != v11) {
    free(v10[0]);
  }
  return v7;
}

unsigned int *sub_22B1D8088(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 3) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)result + 8 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

uint64_t sub_22B1D8120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void sub_22B1D8130(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_22B1D813C()
{
  return 0;
}

uint64_t sub_22B1D8144()
{
  return 0;
}

void sub_22B1D814C()
{
}

uint64_t sub_22B1D8208()
{
  return 1;
}

unint64_t sub_22B1D8210(llvm::DataLayout *a1, llvm::Type *a2)
{
  unint64_t v4 = (sub_22B1D8270(a1, (uint64_t)a2) + 7) >> 3;
  unint64_t ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(a1, a2);
  return (ABITypeAlignment + v4 - 1) / ABITypeAlignment * ABITypeAlignment;
}

unint64_t sub_22B1D8270(llvm::DataLayout *a1, uint64_t a2)
{
  unint64_t result = 16;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 2u:
      return 32;
    case 3u:
    case 0xAu:
      return 64;
    case 4u:
      return 80;
    case 5u:
    case 6u:
      return 128;
    case 7u:
    case 9u:
    case 0xCu:
    case 0xEu:
    case 0x14u:
      __break(1u);
      JUMPOUT(0x22B1D83F4);
    case 8u:
      uint64_t v6 = a1;
      goto LABEL_9;
    case 0xBu:
      return 0x2000;
    case 0xDu:
      return (unint64_t)*(unsigned int *)(a2 + 8) >> 8;
    case 0xFu:
      uint64_t v6 = a1;
LABEL_9:
      unint64_t result = *(unsigned int *)(llvm::DataLayout::getPointerAlignElem(v6) + 4);
      break;
    case 0x10u:
      unint64_t result = 8 * *(void *)llvm::DataLayout::getStructLayout();
      break;
    case 0x11u:
      uint64_t v7 = *(void *)(a2 + 32);
      unint64_t result = 8 * v7 * sub_22B1D8210(a1, *(void *)(a2 + 24));
      break;
    case 0x12u:
    case 0x13u:
      uint64_t v4 = *(unsigned int *)(a2 + 32);
      unint64_t result = sub_22B1D8270(a1, *(void *)(a2 + 24)) * v4;
      break;
    case 0x15u:
      uint64_t v5 = MEMORY[0x230F43060](a2);
      unint64_t result = sub_22B1D8270(a1, v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22B1D844C()
{
  return 46;
}

uint64_t sub_22B1D8454()
{
  return 45;
}

uint64_t sub_22B1D845C()
{
  return 44;
}

uint64_t sub_22B1D8464()
{
  return 43;
}

uint64_t sub_22B1D846C()
{
  return 42;
}

uint64_t sub_22B1D8474()
{
  return 41;
}

uint64_t sub_22B1D847C()
{
  return 40;
}

uint64_t sub_22B1D8484()
{
  return 39;
}

uint64_t sub_22B1D848C()
{
  return 38;
}

uint64_t sub_22B1D8494()
{
  return 37;
}

uint64_t sub_22B1D849C()
{
  return 36;
}

uint64_t sub_22B1D84A4()
{
  return 35;
}

uint64_t sub_22B1D84AC()
{
  return 34;
}

uint64_t sub_22B1D84B4()
{
  return 33;
}

uint64_t sub_22B1D84BC()
{
  return 32;
}

uint64_t sub_22B1D84C4()
{
  return 31;
}

uint64_t sub_22B1D84CC()
{
  return 47;
}

uint64_t sub_22B1D84D4()
{
  return 31;
}

uint64_t sub_22B1D84DC()
{
  return 31;
}

uint64_t sub_22B1D84E4()
{
  return 48;
}

uint64_t sub_22B1D84EC()
{
  return 47;
}

uint64_t sub_22B1D84F4()
{
  return 46;
}

uint64_t sub_22B1D84FC()
{
  return 45;
}

uint64_t sub_22B1D8504()
{
  return 44;
}

uint64_t sub_22B1D850C()
{
  return 43;
}

uint64_t sub_22B1D8514()
{
  return 42;
}

uint64_t sub_22B1D851C()
{
  return 41;
}

uint64_t sub_22B1D8524()
{
  return 40;
}

uint64_t sub_22B1D852C()
{
  return 39;
}

uint64_t sub_22B1D8534()
{
  return 37;
}

uint64_t sub_22B1D853C()
{
  return 36;
}

uint64_t sub_22B1D8544()
{
  return 35;
}

uint64_t sub_22B1D854C()
{
  return 38;
}

uint64_t sub_22B1D8554()
{
  return 37;
}

uint64_t sub_22B1D855C()
{
  return 36;
}

uint64_t sub_22B1D8564()
{
  return 35;
}

uint64_t sub_22B1D856C()
{
  return 34;
}

uint64_t sub_22B1D8574()
{
  return 33;
}

uint64_t sub_22B1D857C()
{
  return 32;
}

uint64_t sub_22B1D8584()
{
  return 31;
}

uint64_t sub_22B1D858C()
{
  return 49;
}

uint64_t sub_22B1D8594()
{
  return 31;
}

uint64_t sub_22B1D859C()
{
  return 31;
}

void sub_22B1D85A4()
{
}

uint64_t *sub_22B1D85BC(uint64_t a1, llvm::StringMapImpl *a2)
{
  uint64_t v4 = *sub_22B1FDD6C(a2, "acos", 4uLL);
  *(void *)(v4 + 8) = sub_22B1FF2D0;
  *(void *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 24) = 3;
  *(_WORD *)(v4 + 28) = 257;
  uint64_t v5 = *sub_22B1FDD6C(a2, "asin", 4uLL);
  *(void *)(v5 + 8) = sub_22B1FF2AC;
  *(void *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = 3;
  *(_WORD *)(v5 + 28) = 257;
  uint64_t v6 = *sub_22B1FDD6C(a2, "atan", 4uLL);
  *(void *)(v6 + 8) = sub_22B1FF288;
  *(void *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 24) = 3;
  *(_WORD *)(v6 + 28) = 257;
  uint64_t v7 = *sub_22B1FDD6C(a2, "atan2", 5uLL);
  *(void *)(v7 + 8) = sub_22B1F92EC;
  *(void *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 24) = 5;
  *(_WORD *)(v7 + 28) = 257;
  uint64_t v8 = *sub_22B1FDD6C(a2, "acosh", 5uLL);
  *(void *)(v8 + 8) = sub_22B1F9B20;
  *(void *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 3;
  *(_WORD *)(v8 + 28) = 257;
  uint64_t v9 = *sub_22B1FDD6C(a2, "asinh", 5uLL);
  *(void *)(v9 + 8) = sub_22B1F9C9C;
  *(void *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 3;
  *(_WORD *)(v9 + 28) = 257;
  uint64_t v10 = *sub_22B1FDD6C(a2, "atanh", 5uLL);
  *(void *)(v10 + 8) = sub_22B1F9D4C;
  *(void *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = 3;
  *(_WORD *)(v10 + 28) = 257;
  uint64_t v11 = *sub_22B1FDD6C(a2, "pow", 3uLL);
  *(void *)(v11 + 8) = sub_22B1FF264;
  *(void *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 24) = 5;
  *(_WORD *)(v11 + 28) = 257;
  uint64_t v12 = *sub_22B1FDD6C(a2, "powr", 4uLL);
  *(void *)(v12 + 8) = sub_22B1F8158;
  *(void *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = 5;
  *(_WORD *)(v12 + 28) = 257;
  uint64_t v13 = *sub_22B1FDD6C(a2, "cosh", 4uLL);
  *(void *)(v13 + 8) = sub_22B1F9E20;
  *(void *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 24) = 3;
  *(_WORD *)(v13 + 28) = 257;
  uint64_t v14 = *sub_22B1FDD6C(a2, "sinh", 4uLL);
  *(void *)(v14 + 8) = sub_22B1FA7AC;
  *(void *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + 24) = 3;
  *(_WORD *)(v14 + 28) = 257;
  uint64_t v15 = *sub_22B1FDD6C(a2, "tanh", 4uLL);
  *(void *)(v15 + 8) = sub_22B1FA858;
  *(void *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 3;
  *(_WORD *)(v15 + 28) = 257;
  uint64_t v16 = *sub_22B1FDD6C(a2, "exp10", 5uLL);
  *(void *)(v16 + 8) = sub_22B1FA36C;
  *(void *)(v16 + 16) = 0;
  *(_DWORD *)(v16 + 24) = 3;
  *(_WORD *)(v16 + 28) = 257;
  uint64_t v17 = *sub_22B1FDD6C(a2, "log10", 5uLL);
  *(void *)(v17 + 8) = sub_22B1FA49C;
  *(void *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 24) = 3;
  *(_WORD *)(v17 + 28) = 257;
  char v18 = *(unsigned char *)(a1 + 40);
  uint64_t v19 = *sub_22B1FDD6C(a2, "cos", 3uLL);
  *(void *)(v19 + 8) = sub_22B1FF25C;
  *(void *)(v19 + 16) = 0;
  *(_DWORD *)(v19 + 24) = 3;
  *(unsigned char *)(v19 + 28) = v18;
  *(unsigned char *)(v19 + 29) = 1;
  char v20 = *(unsigned char *)(a1 + 40);
  uint64_t v21 = *sub_22B1FDD6C(a2, "sin", 3uLL);
  *(void *)(v21 + 8) = sub_22B1FF254;
  *(void *)(v21 + 16) = 0;
  *(_DWORD *)(v21 + 24) = 3;
  *(unsigned char *)(v21 + 28) = v20;
  *(unsigned char *)(v21 + 29) = 1;
  char v22 = *(unsigned char *)(a1 + 40);
  uint64_t v23 = *sub_22B1FDD6C(a2, "tan", 3uLL);
  *(void *)(v23 + 8) = sub_22B1F9860;
  *(void *)(v23 + 16) = 0;
  *(_DWORD *)(v23 + 24) = 3;
  *(unsigned char *)(v23 + 28) = v22;
  *(unsigned char *)(v23 + 29) = 1;
  char v24 = *(unsigned char *)(a1 + 40);
  uint64_t v25 = *sub_22B1FDD6C(a2, "sincos", 6uLL);
  *(void *)(v25 + 8) = sub_22B1F98D0;
  *(void *)(v25 + 16) = 0;
  *(_DWORD *)(v25 + 24) = 5;
  *(unsigned char *)(v25 + 28) = v24;
  *(unsigned char *)(v25 + 29) = 0;
  uint64_t v26 = *sub_22B1FDD6C(a2, "rint", 4uLL);
  *(void *)(v26 + 8) = sub_22B1FF230;
  *(void *)(v26 + 16) = 0;
  *(_DWORD *)(v26 + 24) = 3;
  *(_WORD *)(v26 + 28) = 257;
  uint64_t v27 = *sub_22B1FDD6C(a2, "round", 5uLL);
  *(void *)(v27 + 8) = sub_22B1FA5DC;
  *(void *)(v27 + 16) = 0;
  *(_DWORD *)(v27 + 24) = 3;
  *(_WORD *)(v27 + 28) = 257;
  uint64_t v28 = *sub_22B1FDD6C(a2, "fmod", 4uLL);
  *(void *)(v28 + 8) = sub_22B1F9F98;
  *(void *)(v28 + 16) = 0;
  *(_DWORD *)(v28 + 24) = 5;
  *(_WORD *)(v28 + 28) = 1;
  uint64_t v29 = *sub_22B1FDD6C(a2, "mod", 3uLL);
  *(void *)(v29 + 8) = sub_22B1FA0C4;
  *(void *)(v29 + 16) = 0;
  *(_DWORD *)(v29 + 24) = 5;
  *(_WORD *)(v29 + 28) = 1;
  uint64_t v30 = *sub_22B1FDD6C(a2, "ceil", 4uLL);
  *(void *)(v30 + 8) = sub_22B1FF20C;
  *(void *)(v30 + 16) = 0;
  *(_DWORD *)(v30 + 24) = 3;
  *(_WORD *)(v30 + 28) = 256;
  uint64_t v31 = *sub_22B1FDD6C(a2, "exp", 3uLL);
  *(void *)(v31 + 8) = sub_22B1F9ECC;
  *(void *)(v31 + 16) = 0;
  *(_DWORD *)(v31 + 24) = 3;
  *(_WORD *)(v31 + 28) = 1;
  uint64_t v32 = *sub_22B1FDD6C(a2, "exp2", 4uLL);
  *(void *)(v32 + 8) = sub_22B1FA3D0;
  *(void *)(v32 + 16) = 0;
  *(_DWORD *)(v32 + 24) = 3;
  *(_WORD *)(v32 + 28) = 0;
  uint64_t v33 = *sub_22B1FDD6C(a2, "fabs", 4uLL);
  *(void *)(v33 + 8) = sub_22B1F7D34;
  *(void *)(v33 + 16) = 0;
  *(_DWORD *)(v33 + 24) = 3;
  *(_WORD *)(v33 + 28) = 0;
  uint64_t v34 = *sub_22B1FDD6C(a2, "floor", 5uLL);
  *(void *)(v34 + 8) = sub_22B1F835C;
  *(void *)(v34 + 16) = 0;
  *(_DWORD *)(v34 + 24) = 3;
  *(_WORD *)(v34 + 28) = 0;
  uint64_t v35 = *sub_22B1FDD6C(a2, "fma", 3uLL);
  *(void *)(v35 + 8) = sub_22B1F9044;
  *(void *)(v35 + 16) = 0;
  *(_DWORD *)(v35 + 24) = 6;
  *(_WORD *)(v35 + 28) = 0;
  uint64_t v36 = *sub_22B1FDD6C(a2, "fmax", 4uLL);
  *(void *)(v36 + 8) = sub_22B1FD5F0;
  *(void *)(v36 + 16) = 0;
  *(_DWORD *)(v36 + 24) = 5;
  *(_WORD *)(v36 + 28) = 256;
  uint64_t v37 = *sub_22B1FDD6C(a2, "fmin", 4uLL);
  *(void *)(v37 + 8) = sub_22B1FD514;
  *(void *)(v37 + 16) = 0;
  *(_DWORD *)(v37 + 24) = 5;
  *(_WORD *)(v37 + 28) = 256;
  uint64_t v38 = *sub_22B1FDD6C(a2, "fract", 5uLL);
  *(void *)(v38 + 8) = sub_22B1FA158;
  *(void *)(v38 + 16) = 0;
  *(_DWORD *)(v38 + 24) = 3;
  *(_WORD *)(v38 + 28) = 0;
  uint64_t v39 = *sub_22B1FDD6C(a2, "ldexp", 5uLL);
  *(void *)(v39 + 8) = sub_22B1FF204;
  *(void *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = 7;
  *(_WORD *)(v39 + 28) = 256;
  uint64_t v40 = *sub_22B1FDD6C(a2, "log", 3uLL);
  *(void *)(v40 + 8) = sub_22B1F9BD0;
  *(void *)(v40 + 16) = 0;
  *(_DWORD *)(v40 + 24) = 3;
  *(_WORD *)(v40 + 28) = 1;
  uint64_t v41 = *sub_22B1FDD6C(a2, "log2", 4uLL);
  *(void *)(v41 + 8) = sub_22B1FA510;
  *(void *)(v41 + 16) = 0;
  *(_DWORD *)(v41 + 24) = 3;
  *(_WORD *)(v41 + 28) = 0;
  uint64_t v42 = *sub_22B1FDD6C(a2, "mad", 3uLL);
  *(void *)(v42 + 8) = sub_22B1FA30C;
  *(void *)(v42 + 16) = 0;
  *(_DWORD *)(v42 + 24) = 6;
  *(_WORD *)(v42 + 28) = 0;
  uint64_t v43 = *sub_22B1FDD6C(a2, "rsqrt", 5uLL);
  *(void *)(v43 + 8) = sub_22B1F9220;
  *(void *)(v43 + 16) = 0;
  *(_DWORD *)(v43 + 24) = 3;
  *(_WORD *)(v43 + 28) = 256;
  uint64_t v44 = *sub_22B1FDD6C(a2, "sqrt", 4uLL);
  *(void *)(v44 + 8) = sub_22B1F8540;
  *(void *)(v44 + 16) = 0;
  *(_DWORD *)(v44 + 24) = 3;
  *(_WORD *)(v44 + 28) = 0;
  uint64_t v45 = *sub_22B1FDD6C(a2, "trunc", 5uLL);
  *(void *)(v45 + 8) = sub_22B1FF1E0;
  *(void *)(v45 + 16) = 0;
  *(_DWORD *)(v45 + 24) = 3;
  *(_WORD *)(v45 + 28) = 256;
  uint64_t v46 = *sub_22B1FDD6C(a2, "fast_acos", 9uLL);
  *(void *)(v46 + 8) = sub_22B1FF2D0;
  *(void *)(v46 + 16) = 0;
  *(_DWORD *)(v46 + 24) = 3;
  *(_WORD *)(v46 + 28) = 257;
  uint64_t v47 = *sub_22B1FDD6C(a2, "fast_asin", 9uLL);
  *(void *)(v47 + 8) = sub_22B1FF2AC;
  *(void *)(v47 + 16) = 0;
  *(_DWORD *)(v47 + 24) = 3;
  *(_WORD *)(v47 + 28) = 257;
  uint64_t v48 = *sub_22B1FDD6C(a2, "fast_atan", 9uLL);
  *(void *)(v48 + 8) = sub_22B1FF288;
  *(void *)(v48 + 16) = 0;
  *(_DWORD *)(v48 + 24) = 3;
  *(_WORD *)(v48 + 28) = 257;
  uint64_t v49 = *sub_22B1FDD6C(a2, "fast_atan2", 0xAuLL);
  *(void *)(v49 + 8) = sub_22B1F92EC;
  *(void *)(v49 + 16) = 0;
  *(_DWORD *)(v49 + 24) = 5;
  *(_WORD *)(v49 + 28) = 257;
  uint64_t v50 = *sub_22B1FDD6C(a2, "fast_exp10", 0xAuLL);
  *(void *)(v50 + 8) = sub_22B1FA36C;
  *(void *)(v50 + 16) = 0;
  *(_DWORD *)(v50 + 24) = 3;
  *(_WORD *)(v50 + 28) = 0;
  uint64_t v51 = *sub_22B1FDD6C(a2, "fast_log10", 0xAuLL);
  *(void *)(v51 + 8) = sub_22B1FA49C;
  *(void *)(v51 + 16) = 0;
  *(_DWORD *)(v51 + 24) = 3;
  *(_WORD *)(v51 + 28) = 1;
  uint64_t v52 = *sub_22B1FDD6C(a2, "fast_acosh", 0xAuLL);
  *(void *)(v52 + 8) = sub_22B1F9B20;
  *(void *)(v52 + 16) = 0;
  *(_DWORD *)(v52 + 24) = 3;
  *(_WORD *)(v52 + 28) = 257;
  uint64_t v53 = *sub_22B1FDD6C(a2, "fast_asinh", 0xAuLL);
  *(void *)(v53 + 8) = sub_22B1F9C9C;
  *(void *)(v53 + 16) = 0;
  *(_DWORD *)(v53 + 24) = 3;
  *(_WORD *)(v53 + 28) = 257;
  uint64_t v54 = *sub_22B1FDD6C(a2, "fast_atanh", 0xAuLL);
  *(void *)(v54 + 8) = sub_22B1F9D4C;
  *(void *)(v54 + 16) = 0;
  *(_DWORD *)(v54 + 24) = 3;
  *(_WORD *)(v54 + 28) = 257;
  uint64_t v55 = *sub_22B1FDD6C(a2, "fast_pow", 8uLL);
  *(void *)(v55 + 8) = sub_22B1FF264;
  *(void *)(v55 + 16) = 0;
  *(_DWORD *)(v55 + 24) = 5;
  *(_WORD *)(v55 + 28) = 257;
  uint64_t v56 = *sub_22B1FDD6C(a2, "fast_powr", 9uLL);
  *(void *)(v56 + 8) = sub_22B1F8158;
  *(void *)(v56 + 16) = 0;
  *(_DWORD *)(v56 + 24) = 5;
  *(_WORD *)(v56 + 28) = 257;
  uint64_t v57 = *sub_22B1FDD6C(a2, "fast_cosh", 9uLL);
  *(void *)(v57 + 8) = sub_22B1F9E20;
  *(void *)(v57 + 16) = 0;
  *(_DWORD *)(v57 + 24) = 3;
  *(unsigned char *)(v57 + 28) = 1;
  *(unsigned char *)(v57 + 29) = 1;
  uint64_t v58 = *sub_22B1FDD6C(a2, "fast_sinh", 9uLL);
  *(void *)(v58 + 8) = sub_22B1FA7AC;
  *(void *)(v58 + 16) = 0;
  *(_DWORD *)(v58 + 24) = 3;
  *(unsigned char *)(v58 + 28) = 1;
  *(unsigned char *)(v58 + 29) = 1;
  uint64_t v59 = *sub_22B1FDD6C(a2, "fast_tanh", 9uLL);
  *(void *)(v59 + 8) = sub_22B1FA858;
  *(void *)(v59 + 16) = 0;
  *(_DWORD *)(v59 + 24) = 3;
  *(unsigned char *)(v59 + 28) = 1;
  *(unsigned char *)(v59 + 29) = 1;
  char v60 = *(unsigned char *)(a1 + 40);
  uint64_t v61 = *sub_22B1FDD6C(a2, "fast_cos", 8uLL);
  *(void *)(v61 + 8) = sub_22B1FF25C;
  *(void *)(v61 + 16) = 0;
  *(_DWORD *)(v61 + 24) = 3;
  *(unsigned char *)(v61 + 28) = v60;
  *(unsigned char *)(v61 + 29) = 1;
  char v62 = *(unsigned char *)(a1 + 40);
  uint64_t v63 = *sub_22B1FDD6C(a2, "fast_sin", 8uLL);
  *(void *)(v63 + 8) = sub_22B1FF254;
  *(void *)(v63 + 16) = 0;
  *(_DWORD *)(v63 + 24) = 3;
  *(unsigned char *)(v63 + 28) = v62;
  *(unsigned char *)(v63 + 29) = 1;
  uint64_t v64 = *sub_22B1FDD6C(a2, "fast_tan", 8uLL);
  *(void *)(v64 + 8) = sub_22B1F9860;
  *(void *)(v64 + 16) = 0;
  *(_DWORD *)(v64 + 24) = 3;
  *(unsigned char *)(v64 + 28) = 1;
  *(unsigned char *)(v64 + 29) = 1;
  char v65 = *(unsigned char *)(a1 + 40);
  uint64_t v66 = *sub_22B1FDD6C(a2, "fast_sincos", 0xBuLL);
  *(void *)(v66 + 8) = sub_22B1F98D0;
  *(void *)(v66 + 16) = 0;
  *(_DWORD *)(v66 + 24) = 5;
  *(unsigned char *)(v66 + 28) = v65;
  *(unsigned char *)(v66 + 29) = 0;
  uint64_t v67 = *sub_22B1FDD6C(a2, "fast_round", 0xAuLL);
  *(void *)(v67 + 8) = sub_22B1FA5DC;
  *(void *)(v67 + 16) = 0;
  *(_DWORD *)(v67 + 24) = 3;
  *(unsigned char *)(v67 + 28) = 1;
  *(unsigned char *)(v67 + 29) = 1;
  uint64_t v68 = *sub_22B1FDD6C(a2, "fast_fmod", 9uLL);
  *(void *)(v68 + 8) = sub_22B1F9F98;
  *(void *)(v68 + 16) = 0;
  *(_DWORD *)(v68 + 24) = 5;
  *(_WORD *)(v68 + 28) = 1;
  uint64_t v69 = *sub_22B1FDD6C(a2, "fast_mod", 8uLL);
  *(void *)(v69 + 8) = sub_22B1FA0C4;
  *(void *)(v69 + 16) = 0;
  *(_DWORD *)(v69 + 24) = 5;
  *(_WORD *)(v69 + 28) = 1;
  uint64_t v70 = *sub_22B1FDD6C(a2, "fast_exp", 8uLL);
  *(void *)(v70 + 8) = sub_22B1F9ECC;
  *(void *)(v70 + 16) = 0;
  *(_DWORD *)(v70 + 24) = 3;
  *(_WORD *)(v70 + 28) = 0;
  uint64_t v71 = *sub_22B1FDD6C(a2, "fast_exp2", 9uLL);
  *(void *)(v71 + 8) = sub_22B1FA3D0;
  *(void *)(v71 + 16) = 0;
  *(_DWORD *)(v71 + 24) = 3;
  *(_WORD *)(v71 + 28) = 0;
  uint64_t v72 = *sub_22B1FDD6C(a2, "fast_ldexp", 0xAuLL);
  *(void *)(v72 + 8) = sub_22B1FF204;
  *(void *)(v72 + 16) = 0;
  *(_DWORD *)(v72 + 24) = 7;
  *(unsigned char *)(v72 + 28) = 0;
  *(unsigned char *)(v72 + 29) = 1;
  uint64_t v73 = *sub_22B1FDD6C(a2, "fast_log", 8uLL);
  *(void *)(v73 + 8) = sub_22B1F9BD0;
  *(void *)(v73 + 16) = 0;
  *(_DWORD *)(v73 + 24) = 3;
  *(_WORD *)(v73 + 28) = 0;
  uint64_t v74 = *sub_22B1FDD6C(a2, "fast_log2", 9uLL);
  *(void *)(v74 + 8) = sub_22B1FA510;
  *(void *)(v74 + 16) = 0;
  *(_DWORD *)(v74 + 24) = 3;
  *(_WORD *)(v74 + 28) = 0;
  uint64_t v75 = *sub_22B1FDD6C(a2, "fast_rsqrt", 0xAuLL);
  *(void *)(v75 + 8) = sub_22B1F9220;
  *(void *)(v75 + 16) = 0;
  *(_DWORD *)(v75 + 24) = 3;
  *(unsigned char *)(v75 + 28) = 0;
  *(unsigned char *)(v75 + 29) = 1;
  uint64_t v76 = *sub_22B1FDD6C(a2, "fast_sqrt", 9uLL);
  *(void *)(v76 + 8) = sub_22B1F8540;
  *(void *)(v76 + 16) = 0;
  *(_DWORD *)(v76 + 24) = 3;
  *(_WORD *)(v76 + 28) = 0;
  uint64_t v77 = *sub_22B1FDD6C(a2, "fast_ceil", 9uLL);
  *(void *)(v77 + 8) = sub_22B1FF20C;
  *(void *)(v77 + 16) = 0;
  *(_DWORD *)(v77 + 24) = 3;
  *(unsigned char *)(v77 + 28) = 0;
  *(unsigned char *)(v77 + 29) = 1;
  uint64_t v78 = *sub_22B1FDD6C(a2, "fast_fabs", 9uLL);
  *(void *)(v78 + 8) = sub_22B1F7D34;
  *(void *)(v78 + 16) = 0;
  *(_DWORD *)(v78 + 24) = 3;
  *(_WORD *)(v78 + 28) = 0;
  uint64_t v79 = *sub_22B1FDD6C(a2, "fast_floor", 0xAuLL);
  *(void *)(v79 + 8) = sub_22B1F835C;
  *(void *)(v79 + 16) = 0;
  *(_DWORD *)(v79 + 24) = 3;
  *(_WORD *)(v79 + 28) = 0;
  uint64_t v80 = *sub_22B1FDD6C(a2, "fast_fract", 0xAuLL);
  *(void *)(v80 + 8) = sub_22B1FA158;
  *(void *)(v80 + 16) = 0;
  *(_DWORD *)(v80 + 24) = 3;
  *(_WORD *)(v80 + 28) = 0;
  uint64_t v81 = *sub_22B1FDD6C(a2, "fast_rint", 9uLL);
  *(void *)(v81 + 8) = sub_22B1FF230;
  *(void *)(v81 + 16) = 0;
  *(_DWORD *)(v81 + 24) = 3;
  *(unsigned char *)(v81 + 28) = 1;
  *(unsigned char *)(v81 + 29) = 1;
  uint64_t v82 = *sub_22B1FDD6C(a2, "fast_trunc", 0xAuLL);
  *(void *)(v82 + 8) = sub_22B1FF1E0;
  *(void *)(v82 + 16) = 0;
  *(_DWORD *)(v82 + 24) = 3;
  *(unsigned char *)(v82 + 28) = 0;
  *(unsigned char *)(v82 + 29) = 1;
  uint64_t v83 = *sub_22B1FDD6C(a2, "fast_fmax", 9uLL);
  *(void *)(v83 + 8) = sub_22B1F9754;
  *(void *)(v83 + 16) = 0;
  *(_DWORD *)(v83 + 24) = 5;
  *(unsigned char *)(v83 + 28) = 0;
  *(unsigned char *)(v83 + 29) = 1;
  uint64_t v84 = *sub_22B1FDD6C(a2, "fast_fmin", 9uLL);
  *(void *)(v84 + 8) = sub_22B1F9648;
  *(void *)(v84 + 16) = 0;
  *(_DWORD *)(v84 + 24) = 5;
  *(unsigned char *)(v84 + 28) = 0;
  *(unsigned char *)(v84 + 29) = 1;
  uint64_t v85 = *sub_22B1FDD6C(a2, "gamma_expand", 0xCuLL);
  *(void *)(v85 + 8) = sub_22B1FF1D8;
  *(void *)(v85 + 16) = 0;
  *(_DWORD *)(v85 + 24) = 3;
  *(_WORD *)(v85 + 28) = 0;
  uint64_t v86 = *sub_22B1FDD6C(a2, "gamma_compress", 0xEuLL);
  *(void *)(v86 + 8) = sub_22B1FF1D0;
  *(void *)(v86 + 16) = 0;
  *(_DWORD *)(v86 + 24) = 3;
  *(_WORD *)(v86 + 28) = 0;
  uint64_t v87 = *sub_22B1FDD6C(a2, "gamma_expand_xr", 0xFuLL);
  *(void *)(v87 + 8) = sub_22B1FF1C8;
  *(void *)(v87 + 16) = 0;
  *(_DWORD *)(v87 + 24) = 3;
  *(_WORD *)(v87 + 28) = 0;
  uint64_t v88 = *sub_22B1FDD6C(a2, "gamma_compress_xr", 0x11uLL);
  *(void *)(v88 + 8) = sub_22B1FF1C0;
  *(void *)(v88 + 16) = 0;
  *(_DWORD *)(v88 + 24) = 3;
  *(_WORD *)(v88 + 28) = 0;
  uint64_t v89 = *sub_22B1FDD6C(a2, "convert", 7uLL);
  *(void *)(v89 + 8) = sub_22B1FA934;
  *(void *)(v89 + 16) = 0;
  *(_DWORD *)(v89 + 24) = 7;
  *(unsigned char *)(v89 + 28) = 0;
  *(unsigned char *)(v89 + 29) = 1;
  uint64_t v90 = *sub_22B1FDD6C(a2, "pack", 4uLL);
  *(void *)(v90 + 8) = sub_22B1FB258;
  *(void *)(v90 + 16) = 0;
  *(_DWORD *)(v90 + 24) = 7;
  *(_WORD *)(v90 + 28) = 0;
  uint64_t v91 = *sub_22B1FDD6C(a2, "unpack", 6uLL);
  *(void *)(v91 + 8) = sub_22B1FBDC4;
  *(void *)(v91 + 16) = 0;
  *(_DWORD *)(v91 + 24) = 7;
  *(_WORD *)(v91 + 28) = 0;
  uint64_t v92 = *sub_22B1FDD6C(a2, "abs", 3uLL);
  *(void *)(v92 + 8) = sub_22B1FEFCC;
  *(void *)(v92 + 16) = 0;
  *(_DWORD *)(v92 + 24) = 7;
  *(unsigned char *)(v92 + 28) = 0;
  *(unsigned char *)(v92 + 29) = 1;
  uint64_t v93 = *sub_22B1FDD6C(a2, "abs_diff", 8uLL);
  *(void *)(v93 + 8) = sub_22B1FEEF8;
  *(void *)(v93 + 16) = 0;
  *(_DWORD *)(v93 + 24) = 7;
  *(unsigned char *)(v93 + 28) = 0;
  *(unsigned char *)(v93 + 29) = 1;
  uint64_t v94 = *sub_22B1FDD6C(a2, "add_sat", 7uLL);
  *(void *)(v94 + 8) = sub_22B1FEC14;
  *(void *)(v94 + 16) = 0;
  *(_DWORD *)(v94 + 24) = 7;
  *(unsigned char *)(v94 + 28) = 0;
  *(unsigned char *)(v94 + 29) = 1;
  uint64_t v95 = *sub_22B1FDD6C(a2, "sub_sat", 7uLL);
  *(void *)(v95 + 8) = sub_22B1FE8D4;
  *(void *)(v95 + 16) = 0;
  *(_DWORD *)(v95 + 24) = 7;
  *(unsigned char *)(v95 + 28) = 0;
  *(unsigned char *)(v95 + 29) = 1;
  uint64_t v96 = *sub_22B1FDD6C(a2, "hadd", 4uLL);
  *(void *)(v96 + 8) = sub_22B1FF204;
  *(void *)(v96 + 16) = 0;
  *(_DWORD *)(v96 + 24) = 7;
  *(unsigned char *)(v96 + 28) = 0;
  *(unsigned char *)(v96 + 29) = 1;
  uint64_t v97 = *sub_22B1FDD6C(a2, "rhadd", 5uLL);
  *(void *)(v97 + 8) = sub_22B1FF204;
  *(void *)(v97 + 16) = 0;
  *(_DWORD *)(v97 + 24) = 7;
  *(unsigned char *)(v97 + 28) = 0;
  *(unsigned char *)(v97 + 29) = 1;
  uint64_t v98 = *sub_22B1FDD6C(a2, "clamp", 5uLL);
  *(void *)(v98 + 8) = sub_22B1FC330;
  *(void *)(v98 + 16) = 0;
  *(_DWORD *)(v98 + 24) = 7;
  *(unsigned char *)(v98 + 28) = 0;
  *(unsigned char *)(v98 + 29) = 1;
  uint64_t v99 = *sub_22B1FDD6C(a2, "clz", 3uLL);
  *(void *)(v99 + 8) = sub_22B1FF204;
  *(void *)(v99 + 16) = 0;
  *(_DWORD *)(v99 + 24) = 7;
  *(unsigned char *)(v99 + 28) = 0;
  *(unsigned char *)(v99 + 29) = 1;
  uint64_t v100 = *sub_22B1FDD6C(a2, "ctz", 3uLL);
  *(void *)(v100 + 8) = sub_22B1FF204;
  *(void *)(v100 + 16) = 0;
  *(_DWORD *)(v100 + 24) = 7;
  *(unsigned char *)(v100 + 28) = 0;
  *(unsigned char *)(v100 + 29) = 1;
  uint64_t v101 = *sub_22B1FDD6C(a2, "mad_hi", 6uLL);
  *(void *)(v101 + 8) = sub_22B1FF204;
  *(void *)(v101 + 16) = 0;
  *(_DWORD *)(v101 + 24) = 7;
  *(unsigned char *)(v101 + 28) = 0;
  *(unsigned char *)(v101 + 29) = 1;
  uint64_t v102 = *sub_22B1FDD6C(a2, "mad_sat", 7uLL);
  *(void *)(v102 + 8) = sub_22B1FE540;
  *(void *)(v102 + 16) = 0;
  *(_DWORD *)(v102 + 24) = 7;
  *(unsigned char *)(v102 + 28) = 0;
  *(unsigned char *)(v102 + 29) = 1;
  uint64_t v103 = *sub_22B1FDD6C(a2, "max", 3uLL);
  *(void *)(v103 + 8) = sub_22B1FE520;
  *(void *)(v103 + 16) = 0;
  *(_DWORD *)(v103 + 24) = 7;
  *(unsigned char *)(v103 + 28) = 0;
  *(unsigned char *)(v103 + 29) = 1;
  uint64_t v104 = *sub_22B1FDD6C(a2, "min", 3uLL);
  *(void *)(v104 + 8) = sub_22B1FE500;
  *(void *)(v104 + 16) = 0;
  *(_DWORD *)(v104 + 24) = 7;
  *(unsigned char *)(v104 + 28) = 0;
  *(unsigned char *)(v104 + 29) = 1;
  uint64_t v105 = *sub_22B1FDD6C(a2, "mul_hi", 6uLL);
  *(void *)(v105 + 8) = sub_22B1FF204;
  *(void *)(v105 + 16) = 0;
  *(_DWORD *)(v105 + 24) = 7;
  *(unsigned char *)(v105 + 28) = 0;
  *(unsigned char *)(v105 + 29) = 1;
  uint64_t v106 = *sub_22B1FDD6C(a2, "rotate", 6uLL);
  *(void *)(v106 + 8) = sub_22B1FF204;
  *(void *)(v106 + 16) = 0;
  *(_DWORD *)(v106 + 24) = 7;
  *(unsigned char *)(v106 + 28) = 0;
  *(unsigned char *)(v106 + 29) = 1;
  uint64_t v107 = *sub_22B1FDD6C(a2, "popcount", 8uLL);
  *(void *)(v107 + 8) = sub_22B1FC4A0;
  *(void *)(v107 + 16) = 0;
  *(_DWORD *)(v107 + 24) = 3;
  *(unsigned char *)(v107 + 28) = 0;
  *(unsigned char *)(v107 + 29) = 1;
  uint64_t v108 = *sub_22B1FDD6C(a2, "extract_bits", 0xCuLL);
  *(void *)(v108 + 8) = sub_22B1FC624;
  *(void *)(v108 + 16) = 0;
  *(_DWORD *)(v108 + 24) = 7;
  *(unsigned char *)(v108 + 28) = 0;
  *(unsigned char *)(v108 + 29) = 1;
  uint64_t v109 = *sub_22B1FDD6C(a2, "insert_bits", 0xBuLL);
  *(void *)(v109 + 8) = sub_22B1FC83C;
  *(void *)(v109 + 16) = 0;
  *(_DWORD *)(v109 + 24) = 7;
  *(unsigned char *)(v109 + 28) = 0;
  *(unsigned char *)(v109 + 29) = 1;
  uint64_t v110 = *sub_22B1FDD6C(a2, "reverse_bits", 0xCuLL);
  *(void *)(v110 + 8) = sub_22B1FCAAC;
  *(void *)(v110 + 16) = 0;
  *(_DWORD *)(v110 + 24) = 3;
  *(unsigned char *)(v110 + 28) = 0;
  *(unsigned char *)(v110 + 29) = 1;
  uint64_t v111 = *sub_22B1FDD6C(a2, "any", 3uLL);
  *(void *)(v111 + 8) = sub_22B1FE4F8;
  *(void *)(v111 + 16) = 0;
  *(_DWORD *)(v111 + 24) = 3;
  *(_WORD *)(v111 + 28) = 0;
  uint64_t v112 = *sub_22B1FDD6C(a2, "all", 3uLL);
  *(void *)(v112 + 8) = sub_22B1FE4F0;
  *(void *)(v112 + 16) = 0;
  *(_DWORD *)(v112 + 24) = 3;
  *(_WORD *)(v112 + 28) = 0;
  uint64_t v113 = *sub_22B1FDD6C(a2, "any_msb", 7uLL);
  *(void *)(v113 + 8) = sub_22B1FF204;
  *(void *)(v113 + 16) = 0;
  *(_DWORD *)(v113 + 24) = 7;
  *(unsigned char *)(v113 + 28) = 0;
  *(unsigned char *)(v113 + 29) = 1;
  uint64_t v114 = *sub_22B1FDD6C(a2, "all_msb", 7uLL);
  *(void *)(v114 + 8) = sub_22B1FF204;
  *(void *)(v114 + 16) = 0;
  *(_DWORD *)(v114 + 24) = 7;
  *(unsigned char *)(v114 + 28) = 0;
  *(unsigned char *)(v114 + 29) = 1;
  uint64_t v115 = *sub_22B1FDD6C(a2, "saturate", 8uLL);
  *(void *)(v115 + 8) = sub_22B1FE424;
  *(void *)(v115 + 16) = 0;
  *(_DWORD *)(v115 + 24) = 3;
  *(unsigned char *)(v115 + 28) = 0;
  *(unsigned char *)(v115 + 29) = 1;
  uint64_t v116 = *sub_22B1FDD6C(a2, "mix", 3uLL);
  *(void *)(v116 + 8) = sub_22B1FCDC0;
  *(void *)(v116 + 16) = 0;
  *(_DWORD *)(v116 + 24) = 6;
  *(_WORD *)(v116 + 28) = 0;
  uint64_t v117 = *sub_22B1FDD6C(a2, "sign", 4uLL);
  *(void *)(v117 + 8) = sub_22B1FCCC0;
  *(void *)(v117 + 16) = 0;
  *(_DWORD *)(v117 + 24) = 3;
  *(unsigned char *)(v117 + 28) = 0;
  *(unsigned char *)(v117 + 29) = 1;
  uint64_t v118 = *sub_22B1FDD6C(a2, "dot", 3uLL);
  *(void *)(v118 + 8) = sub_22B1FCE7C;
  *(void *)(v118 + 16) = 0;
  *(_DWORD *)(v118 + 24) = 5;
  *(_WORD *)(v118 + 28) = 0;
  uint64_t v119 = *sub_22B1FDD6C(a2, "fast_clamp", 0xAuLL);
  *(void *)(v119 + 8) = sub_22B1FE364;
  *(void *)(v119 + 16) = 0;
  *(_DWORD *)(v119 + 24) = 6;
  *(unsigned char *)(v119 + 28) = 0;
  *(unsigned char *)(v119 + 29) = 1;
  uint64_t v120 = *sub_22B1FDD6C(a2, "fast_saturate", 0xDuLL);
  *(void *)(v120 + 8) = sub_22B1FE2BC;
  *(void *)(v120 + 16) = 0;
  *(_DWORD *)(v120 + 24) = 3;
  *(unsigned char *)(v120 + 28) = 0;
  *(unsigned char *)(v120 + 29) = 1;
  char v121 = *(unsigned char *)(a1 + 41);
  uint64_t v122 = *sub_22B1FDD6C(a2, "dfdx", 4uLL);
  *(void *)(v122 + 8) = sub_22B1FCEDC;
  *(void *)(v122 + 16) = 0;
  *(_DWORD *)(v122 + 24) = 3;
  *(unsigned char *)(v122 + 28) = v121;
  *(unsigned char *)(v122 + 29) = 1;
  char v123 = *(unsigned char *)(a1 + 41);
  uint64_t v124 = *sub_22B1FDD6C(a2, "dfdy", 4uLL);
  *(void *)(v124 + 8) = sub_22B1FCFC8;
  *(void *)(v124 + 16) = 0;
  *(_DWORD *)(v124 + 24) = 3;
  *(unsigned char *)(v124 + 28) = v123;
  *(unsigned char *)(v124 + 29) = 1;
  char v125 = *(unsigned char *)(a1 + 41);
  uint64_t v126 = *sub_22B1FDD6C(a2, "fwidth", 6uLL);
  *(void *)(v126 + 8) = sub_22B1FD0C8;
  *(void *)(v126 + 16) = 0;
  *(_DWORD *)(v126 + 24) = 3;
  *(unsigned char *)(v126 + 28) = v125;
  *(unsigned char *)(v126 + 29) = 1;
  uint64_t v127 = *sub_22B1FDD6C(a2, "atomic", 6uLL);
  *(void *)(v127 + 8) = sub_22B1FE298;
  *(void *)(v127 + 16) = 0;
  *(_DWORD *)(v127 + 24) = 7;
  *(_WORD *)(v127 + 28) = 0;
  uint64_t v128 = *sub_22B1FDD6C(a2, "assert", 6uLL);
  *(void *)(v128 + 8) = sub_22B1FDA80;
  *(void *)(v128 + 16) = 0;
  *(_DWORD *)(v128 + 24) = 1;
  *(_WORD *)(v128 + 28) = 0;
  uint64_t v129 = *sub_22B1FDD6C(a2, "get_simd_width", 0xEuLL);
  *(void *)(v129 + 8) = sub_22B1FDA88;
  *(void *)(v129 + 16) = 0;
  *(_DWORD *)(v129 + 24) = 7;
  *(_WORD *)(v129 + 28) = 0;
  uint64_t v130 = *sub_22B1FDD6C(a2, "get_thread_execution_width", 0x1AuLL);
  *(void *)(v130 + 8) = sub_22B1FDAEC;
  *(void *)(v130 + 16) = 0;
  *(_DWORD *)(v130 + 24) = 7;
  *(_WORD *)(v130 + 28) = 0;
  uint64_t v131 = *sub_22B1FDD6C(a2, "simdgroup", 9uLL);
  *(void *)(v131 + 8) = sub_22B1FE26C;
  *(void *)(v131 + 16) = 0;
  *(_DWORD *)(v131 + 24) = 7;
  *(_WORD *)(v131 + 28) = 0;
  uint64_t v132 = *sub_22B1FDD6C(a2, "is_uniform", 0xAuLL);
  *(void *)(v132 + 8) = sub_22B1FDB50;
  *(void *)(v132 + 16) = 0;
  *(_DWORD *)(v132 + 24) = 9;
  *(_WORD *)(v132 + 28) = 0;
  uint64_t v133 = *sub_22B1FDD6C(a2, "mul24", 5uLL);
  *(void *)(v133 + 8) = sub_22B1FE234;
  *(void *)(v133 + 16) = 0;
  *(_DWORD *)(v133 + 24) = 7;
  *(unsigned char *)(v133 + 28) = 0;
  *(unsigned char *)(v133 + 29) = 1;
  uint64_t v134 = *sub_22B1FDD6C(a2, "mad24", 5uLL);
  *(void *)(v134 + 8) = sub_22B1FE1CC;
  *(void *)(v134 + 16) = 0;
  *(_DWORD *)(v134 + 24) = 7;
  *(unsigned char *)(v134 + 28) = 0;
  *(unsigned char *)(v134 + 29) = 1;
  uint64_t v135 = *sub_22B1FDD6C(a2, "min3", 4uLL);
  *(void *)(v135 + 8) = sub_22B1FE15C;
  *(void *)(v135 + 16) = 0;
  *(_DWORD *)(v135 + 24) = 7;
  *(unsigned char *)(v135 + 28) = 0;
  *(unsigned char *)(v135 + 29) = 1;
  uint64_t v136 = *sub_22B1FDD6C(a2, "fmin3", 5uLL);
  *(void *)(v136 + 8) = sub_22B1FE110;
  *(void *)(v136 + 16) = 0;
  *(_DWORD *)(v136 + 24) = 7;
  *(unsigned char *)(v136 + 28) = 0;
  *(unsigned char *)(v136 + 29) = 1;
  uint64_t v137 = *sub_22B1FDD6C(a2, "fast_fmin3", 0xAuLL);
  *(void *)(v137 + 8) = sub_22B1FE0C4;
  *(void *)(v137 + 16) = 0;
  *(_DWORD *)(v137 + 24) = 7;
  *(unsigned char *)(v137 + 28) = 0;
  *(unsigned char *)(v137 + 29) = 1;
  uint64_t v138 = *sub_22B1FDD6C(a2, "max3", 4uLL);
  *(void *)(v138 + 8) = sub_22B1FE054;
  *(void *)(v138 + 16) = 0;
  *(_DWORD *)(v138 + 24) = 7;
  *(unsigned char *)(v138 + 28) = 0;
  *(unsigned char *)(v138 + 29) = 1;
  uint64_t v139 = *sub_22B1FDD6C(a2, "fmax3", 5uLL);
  *(void *)(v139 + 8) = sub_22B1FE008;
  *(void *)(v139 + 16) = 0;
  *(_DWORD *)(v139 + 24) = 7;
  *(unsigned char *)(v139 + 28) = 0;
  *(unsigned char *)(v139 + 29) = 1;
  uint64_t v140 = *sub_22B1FDD6C(a2, "fast_fmax3", 0xAuLL);
  *(void *)(v140 + 8) = sub_22B1FDFBC;
  *(void *)(v140 + 16) = 0;
  *(_DWORD *)(v140 + 24) = 7;
  *(unsigned char *)(v140 + 28) = 0;
  *(unsigned char *)(v140 + 29) = 1;
  uint64_t v141 = *sub_22B1FDD6C(a2, "median3", 7uLL);
  *(void *)(v141 + 8) = sub_22B1FDE64;
  *(void *)(v141 + 16) = 0;
  *(_DWORD *)(v141 + 24) = 7;
  *(unsigned char *)(v141 + 28) = 0;
  *(unsigned char *)(v141 + 29) = 1;
  uint64_t v142 = *sub_22B1FDD6C(a2, "fmedian3", 8uLL);
  *(void *)(v142 + 8) = sub_22B1FD2E8;
  *(void *)(v142 + 16) = 0;
  *(_DWORD *)(v142 + 24) = 7;
  *(unsigned char *)(v142 + 28) = 0;
  *(unsigned char *)(v142 + 29) = 1;
  uint64_t v143 = *sub_22B1FDD6C(a2, "fast_fmedian3", 0xDuLL);
  *(void *)(v143 + 8) = sub_22B1FD6CC;
  *(void *)(v143 + 16) = 0;
  *(_DWORD *)(v143 + 24) = 7;
  *(unsigned char *)(v143 + 28) = 0;
  *(unsigned char *)(v143 + 29) = 1;
  uint64_t v144 = *sub_22B1FDD6C(a2, "projective_coordinates", 0x16uLL);
  *(void *)(v144 + 8) = sub_22B1FD7C4;
  *(void *)(v144 + 16) = 0;
  *(_DWORD *)(v144 + 24) = 3;
  *(_WORD *)(v144 + 28) = 0;
  uint64_t v145 = *sub_22B1FDD6C(a2, "get_unique_identifier_compute_pipeline_state", 0x2CuLL);
  *(void *)(v145 + 8) = sub_22B1FDD2C;
  *(void *)(v145 + 16) = 0;
  *(_DWORD *)(v145 + 24) = 3;
  *(unsigned char *)(v145 + 28) = 0;
  *(unsigned char *)(v145 + 29) = 1;
  uint64_t v146 = *sub_22B1FDD6C(a2, "get_unique_identifier_render_pipeline_state", 0x2BuLL);
  *(void *)(v146 + 8) = sub_22B1FDD2C;
  *(void *)(v146 + 16) = 0;
  *(_DWORD *)(v146 + 24) = 3;
  *(unsigned char *)(v146 + 28) = 0;
  *(unsigned char *)(v146 + 29) = 1;
  uint64_t v147 = *sub_22B1FDD6C(a2, "get_unique_identifier_indirect_command_buffer", 0x2DuLL);
  *(void *)(v147 + 8) = sub_22B1FDD2C;
  *(void *)(v147 + 16) = 0;
  *(_DWORD *)(v147 + 24) = 3;
  *(unsigned char *)(v147 + 28) = 0;
  *(unsigned char *)(v147 + 29) = 1;
  unint64_t result = sub_22B1FDD6C(a2, "get_threads_per_simdgroup", 0x19uLL);
  uint64_t v149 = *result;
  *(void *)(v149 + 8) = sub_22B1FDAEC;
  *(void *)(v149 + 16) = 0;
  *(_DWORD *)(v149 + 24) = 7;
  *(_WORD *)(v149 + 28) = 0;
  return result;
}

void sub_22B1DA100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22B1D7BF0(__p, (char *)&unk_22B27C63D);
  sub_22B1EB8B0(a3, __p);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9120, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2683E9120))
    {
      qword_2683E9110 = 0;
      *(void *)algn_2683E9118 = 0;
      __cxa_guard_release(&qword_2683E9120);
    }
  }
  operator new();
}

void sub_22B1DA228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22B1D7BF0(__p, (char *)&unk_22B27C63D);
  sub_22B1EB8B0(a3, __p);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9108, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2683E9108))
    {
      qword_2683E90F8 = 0;
      unk_2683E9100 = 0;
      __cxa_guard_release(&qword_2683E9108);
    }
  }
  operator new();
}

void sub_22B1DA350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22B1D7BF0(__p, "pds_patchup_compute");
  sub_22B1EB8B0(a3, (const UInt8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E90F0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2683E90F0))
    {
      qword_2683E90E0 = 0;
      *(void *)algn_2683E90E8 = 0;
      __cxa_guard_release(&qword_2683E90F0);
    }
  }
  operator new();
}

void sub_22B1DA50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22B1D7BF0(__p, "gpu_gather_compute");
  sub_22B1EB8B0(a3, (const UInt8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E90D8, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2683E90D8))
    {
      qword_2683E90C8 = 0;
      unk_2683E90D0 = 0;
      __cxa_guard_release(&qword_2683E90D8);
    }
  }
  operator new();
}

void sub_22B1DA6C8()
{
}

void sub_22B1DA820()
{
}

uint64_t sub_22B1DA9C0()
{
  return 0;
}

void sub_22B1DA9C8()
{
}

uint64_t sub_22B1DAA48()
{
  return 0;
}

uint64_t sub_22B1DAA50()
{
  return 0;
}

uint64_t sub_22B1DAA58()
{
  return 0;
}

uint64_t sub_22B1DAA60()
{
  return 0;
}

uint64_t sub_22B1DAA68(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (unsigned __int8 *)&unk_22B26FA6F + 9 * a2;
  uint64_t v12 = *v11;
  llvm::FixedVectorType::get();
  uint64_t v13 = llvm::UndefValue::get();
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(*a1 + 568))(a1, a4, v11[i + 5], v11[i + 1], a5, a6);
      uint64_t v16 = sub_22B241FF8(a1, v15, a3);
      uint64_t v17 = v11;
      uint64_t v18 = a3;
      uint64_t v19 = a4;
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      uint64_t v22 = v16;
      __int16 v27 = 257;
      uint64_t v23 = llvm::ConstantInt::get();
      uint64_t v24 = v22;
      a6 = v21;
      a5 = v20;
      a4 = v19;
      a3 = v18;
      uint64_t v11 = v17;
      uint64_t v13 = sub_22B2427EC((uint64_t)(a1 + 1), v13, v24, v23, (uint64_t)v26);
    }
  }
  return v13;
}

uint64_t sub_22B1DABC4(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = llvm::ConstantInt::get();
  uint64_t v12 = (char *)&unk_22B26FA6F + 9 * a2;
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = 0;
    do
    {
      __int16 v21 = 257;
      uint64_t v15 = llvm::ConstantInt::get();
      uint64_t v16 = sub_22B242524((uint64_t)(a1 + 1), a4, v15, (uint64_t)v20);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(*a1 + 576))(a1, v16, v12[v14 + 1], v12[v14 + 5], a5, a6);
      __int16 v21 = 257;
      uint64_t v11 = sub_22B1D7014((uint64_t)(a1 + 1), v11, v17, (uint64_t)v20);
      ++v14;
    }
    while (v13 != v14);
  }
  return sub_22B241FF8(a1, v11, a3);
}

uint64_t sub_22B1DAD10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 608))(a1, 5, a1[24], a2, a3, a4);
}

uint64_t sub_22B1DAD50(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 3) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = 5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 616))(a1, v5, a3, a2);
}

uint64_t sub_22B1DAD90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantInt::get();
  uint64_t v5 = 0;
  for (uint64_t i = 0; i != 4; ++i)
  {
    __int16 v17 = 257;
    uint64_t v7 = llvm::ConstantInt::get();
    uint64_t v8 = (llvm::Type ***)sub_22B242524(a1 + 8, a2, v7, (uint64_t)v16);
    if (i == 3) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 10;
    }
    uint64_t v10 = sub_22B243324(a1, v8, v9, 0);
    uint64_t v11 = *(void *)(a1 + 192);
    __int16 v17 = 257;
    uint64_t v12 = sub_22B1D77F0(a1 + 8, v10, v11, 0, (uint64_t)v16);
    __int16 v17 = 257;
    uint64_t v13 = llvm::ConstantInt::get();
    uint64_t v14 = sub_22B1D6C68(a1 + 8, v12, v13, (uint64_t)v16);
    __int16 v17 = 257;
    uint64_t result = sub_22B1D7014(a1 + 8, v4, v14, (uint64_t)v16);
    uint64_t v4 = result;
    v5 += 10;
  }
  return result;
}

uint64_t sub_22B1DAEC0(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v10 = sub_22B241B38(a1, a2, 1);
  uint64_t v11 = a1 + 8;
  long long v25 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(a1 + 8));
  int v27 = *(_DWORD *)(a1 + 104);
  uint64_t v12 = llvm::ConstantFP::get();
  uint64_t v13 = llvm::ConstantFP::get();
  uint64_t v14 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 72))(a1, &v25, v10, v12, v13, 0);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v15 = llvm::ConstantFP::get();
  __int16 v24 = 257;
  uint64_t v28 = sub_22B1DB138(a1 + 8, v14, v15, (uint64_t)v23);
  uint64_t v16 = *(void *)(a1 + 1160);
  if (v16) {
    size_t v17 = strlen(*(const char **)(a1 + 1160));
  }
  else {
    size_t v17 = 0;
  }
  uint64_t v18 = sub_22B1DB218(a1, v16, v17, *(void *)(a1 + 192), *(void *)(a1 + 160));
  __int16 v24 = 257;
  uint64_t v19 = (uint64_t)sub_22B1D4034(a1 + 8, **(void **)(*(void *)v18 + 16), v18, (uint64_t)&v28, 1, (uint64_t)v23);
  if ((a4 + a3) <= 0x1F && a6)
  {
    __int16 v24 = 257;
    uint64_t v20 = llvm::ConstantInt::get();
    uint64_t v19 = sub_22B1D6F68(v11, v19, v20, (uint64_t)v23);
  }
  __int16 v24 = 257;
  uint64_t v21 = llvm::ConstantInt::get();
  return sub_22B1D6C68(v11, v19, v21, (uint64_t)v23);
}

uint64_t sub_22B1DB138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = sub_22B1DB2F4(a1, 18, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    sub_22B1D4554(a1, v7);
    sub_22B1D6EE0((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_22B1DB218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t __src = a5;
  v9[0] = v10;
  v9[1] = (void *)0x100000000;
  sub_22B1D8088((unsigned int *)v9, &__src, v9);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v6 = v5;
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return v6;
}

uint64_t sub_22B1DB2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    a3 = 0;
  }
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u) {
    a4 = 0;
  }
  if (a3) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72));
    if (v5) {
      BOOL v9 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      sub_22B1D6EE0((uint64_t *)a1, v5, a5);
    }
  }
  return v5;
}

uint64_t sub_22B1DB398(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = (uint64_t *)(a1 + 8);
  __int16 v34 = 257;
  uint64_t v13 = llvm::ConstantInt::get();
  uint64_t v14 = sub_22B1D7B18((uint64_t)v12, a2, v13, (uint64_t)v33);
  uint64_t v15 = *(void *)(a1 + 184);
  __int16 v34 = 257;
  uint64_t v16 = sub_22B1D77F0((uint64_t)v12, v14, v15, 0, (uint64_t)v33);
  if (a6)
  {
    __int16 v34 = 257;
    uint64_t v17 = llvm::ConstantInt::get();
    uint64_t v18 = sub_22B1D6C68((uint64_t)v12, v16, v17, (uint64_t)v33);
    v32[16] = 257;
    uint64_t v19 = llvm::ConstantInt::get();
    if (*(unsigned __int8 *)(v18 + 16) > 0x14u
      || (v19 ? (BOOL v20 = *(unsigned __int8 *)(v19 + 16) > 0x14u) : (BOOL v20 = 1), v20))
    {
      __int16 v34 = 257;
      uint64_t v21 = (llvm::Type ***)llvm::BinaryOperator::Create();
      sub_22B1D6EE0(v12, (uint64_t)v21, (uint64_t)v32);
    }
    else
    {
      uint64_t v30 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 80) + 168))(*(void *)(a1 + 80), v18, v19, 0);
      uint64_t v21 = (llvm::Type ***)v30;
      if (v30) {
        BOOL v31 = *(unsigned __int8 *)(v30 + 16) >= 0x1Cu;
      }
      else {
        BOOL v31 = 0;
      }
      if (v31) {
        sub_22B1D6EE0(v12, v30, (uint64_t)v32);
      }
    }
    if (a5)
    {
      uint64_t v22 = (llvm::Type ***)llvm::ConstantInt::get();
      uint64_t v21 = (llvm::Type ***)sub_22B243278(a1, v21, v22, 38);
    }
    uint64_t v23 = *(void *)(a1 + 160);
    __int16 v34 = 257;
    uint64_t v24 = sub_22B1DB63C((uint64_t)v12, (uint64_t)v21, v23, (uint64_t)v33);
  }
  else
  {
    if ((a4 + a3) <= 0x1F)
    {
      __int16 v34 = 257;
      uint64_t v25 = llvm::ConstantInt::get();
      uint64_t v16 = sub_22B1D6F68((uint64_t)v12, v16, v25, (uint64_t)v33);
    }
    uint64_t v26 = *(void *)(a1 + 160);
    __int16 v34 = 257;
    uint64_t v24 = sub_22B1DB6A8((uint64_t)v12, v16, v26, (uint64_t)v33);
  }
  uint64_t v27 = v24;
  if (a5)
  {
    uint64_t v28 = llvm::ConstantFP::get();
    __int16 v34 = 257;
    return sub_22B1DB138((uint64_t)v12, v27, v28, (uint64_t)v33);
  }
  return v27;
}

uint64_t sub_22B1DB63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return sub_22B1D7384(a1, 44, a2, a3, a4);
}

uint64_t sub_22B1DB6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return sub_22B1D7384(a1, 43, a2, a3, a4);
}

llvm::Value *sub_22B1DB714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12
    && (uint64_t v6 = *(unsigned int *)(*(void *)a2 + 32), v6 != 1))
  {
    llvm::FixedVectorType::get();
    uint64_t v7 = llvm::UndefValue::get();
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        __int16 v15 = 257;
        uint64_t v10 = llvm::ConstantInt::get();
        uint64_t v11 = sub_22B242524(a1 + 8, a2, v10, (uint64_t)v14);
        uint64_t v16 = sub_22B242678(a1, v11, 2);
        uint64_t v17 = 0;
        uint64_t v17 = llvm::ConstantInt::get();
        __int16 v15 = 257;
        uint64_t v12 = sub_22B1D4034(a1 + 8, *(void *)(a3 + 24), a3, (uint64_t)&v16, 2, (uint64_t)v14);
        __int16 v15 = 257;
        uint64_t v13 = llvm::ConstantInt::get();
        uint64_t v7 = sub_22B2427EC(a1 + 8, v7, (uint64_t)v12, v13, (uint64_t)v14);
      }
    }
  }
  else
  {
    uint64_t v16 = sub_22B242678(a1, a2, 2);
    uint64_t v17 = llvm::ConstantInt::get();
    __int16 v15 = 257;
    return sub_22B1D4034(a1 + 8, *(void *)(a3 + 24), a3, (uint64_t)&v16, 2, (uint64_t)v14);
  }
  return (llvm::Value *)v7;
}

llvm::Value *sub_22B1DB8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12)
  {
    uint64_t v6 = sub_22B242678(a1, a2, 4);
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)a2 + 32);
  uint64_t v6 = sub_22B242678(a1, a2, 4);
  if (v5 == 1)
  {
LABEL_8:
    uint64_t v14 = v6;
    uint64_t v15 = llvm::ConstantInt::get();
    __int16 v13 = 257;
    return sub_22B1D4034(a1 + 8, *(void *)(a3 + 24), a3, (uint64_t)&v14, 2, (uint64_t)v12);
  }
  llvm::FixedVectorType::get();
  uint64_t v7 = llvm::UndefValue::get();
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = v6;
      uint64_t v15 = 0;
      uint64_t v15 = llvm::ConstantInt::get();
      __int16 v13 = 257;
      BOOL v9 = sub_22B1D4034(a1 + 8, *(void *)(a3 + 24), a3, (uint64_t)&v14, 2, (uint64_t)v12);
      __int16 v13 = 257;
      uint64_t v10 = llvm::ConstantInt::get();
      uint64_t v7 = sub_22B2427EC(a1 + 8, v7, (uint64_t)v9, v10, (uint64_t)v12);
    }
  }
  return (llvm::Value *)v7;
}

uint64_t sub_22B1DBA78()
{
  return 0;
}

void sub_22B1DBA80(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  unsigned int v12 = a5 + a2;
  unsigned int v13 = a6 + a3;
  unsigned int v14 = a7 + a4;
  sub_22B1D7BF0(&v65, (char *)&unk_22B27C63D);
  unsigned int v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 792) + 24))(*(void *)(a1 + 792), a8);
  unsigned int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 792) + 16))(*(void *)(a1 + 792));
  unsigned int v17 = v16;
  if (v12 <= v15)
  {
    if (v14 <= 0x10 && v13 <= v16)
    {
      char v31 = 0;
      goto LABEL_80;
    }
  }
  else
  {
    std::to_string(&v59, v12);
    uint64_t v18 = std::string::insert(&v59, 0, " buffers (");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    BOOL v20 = std::string::append(&v60, "/");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unsigned int v22 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 792) + 24))(*(void *)(a1 + 792), a8);
    std::to_string(&__p, v22);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v25 = std::string::append(&v61, (const std::string::value_type *)p_p, size);
    std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    uint64_t v27 = std::string::append(&v62, ")");
    std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
    long long v63 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    uint64_t v64 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0) {
      uint64_t v29 = (const std::string::value_type *)&v63;
    }
    else {
      uint64_t v29 = (const std::string::value_type *)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v30 = HIBYTE(v64);
    }
    else {
      std::string::size_type v30 = *((void *)&v63 + 1);
    }
    std::string::append(&v65, v29, v30);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  if (v13 > v17)
  {
    std::to_string(&v59, v13);
    uint64_t v32 = std::string::insert(&v59, 0, " textures (");
    std::string::size_type v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    __int16 v34 = std::string::append(&v60, "/");
    std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    unsigned int v36 = (*(uint64_t (**)(void))(**(void **)(a1 + 792) + 16))(*(void *)(a1 + 792));
    std::to_string(&__p, v36);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &__p;
    }
    else {
      uint64_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v39 = std::string::append(&v61, (const std::string::value_type *)v37, v38);
    std::string::size_type v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    uint64_t v41 = std::string::append(&v62, ")");
    std::string::size_type v42 = v41->__r_.__value_.__r.__words[2];
    long long v63 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    uint64_t v64 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0) {
      uint64_t v43 = (const std::string::value_type *)&v63;
    }
    else {
      uint64_t v43 = (const std::string::value_type *)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v44 = HIBYTE(v64);
    }
    else {
      std::string::size_type v44 = *((void *)&v63 + 1);
    }
    std::string::append(&v65, v43, v44);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  if (v14 >= 0x11)
  {
    std::to_string(&v59, v14);
    uint64_t v45 = std::string::insert(&v59, 0, " samplers (");
    std::string::size_type v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v60, "/");
    std::string::size_type v48 = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v49 = &__p;
    }
    else {
      uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v51 = std::string::append(&v61, (const std::string::value_type *)v49, v50);
    std::string::size_type v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    uint64_t v53 = std::string::append(&v62, ")");
    std::string::size_type v54 = v53->__r_.__value_.__r.__words[2];
    long long v63 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    uint64_t v64 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0) {
      uint64_t v55 = (const std::string::value_type *)&v63;
    }
    else {
      uint64_t v55 = (const std::string::value_type *)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v56 = HIBYTE(v64);
    }
    else {
      std::string::size_type v56 = *((void *)&v63 + 1);
    }
    std::string::append(&v65, v55, v56);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  char v31 = 1;
LABEL_80:
  *a9 = v31;
  uint64_t v57 = (std::string *)(a9 + 8);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_22B1DC004(v57, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *uint64_t v57 = v65;
  }
}

void *sub_22B1DC004(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_22B1DC0A0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a3 > 1) {
    return a2;
  }
  else {
    return 0;
  }
}

llvm::Value *sub_22B1DC0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = llvm::IntegerType::get();
  uint64_t v7 = *(void *)(a1 + 1376);
  if (v7) {
    size_t v8 = strlen(*(const char **)(a1 + 1376));
  }
  else {
    size_t v8 = 0;
  }
  uint64_t v9 = a1 + 8;
  uint64_t v10 = sub_22B1DB218(a1, v7, v8, *(void *)(a1 + 144), v6);
  __int16 v13 = 257;
  uint64_t v17 = sub_22B1D77F0(v9, a3, v6, 1, (uint64_t)v12);
  __int16 v13 = 257;
  return sub_22B1D4034(v9, *(void *)(v10 + 24), v10, (uint64_t)&v17, 1, (uint64_t)v12);
}

llvm::Value *sub_22B1DC1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a3;
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v5 = *(void *)(a1 + 1368);
  if (v5) {
    size_t v6 = strlen(*(const char **)(a1 + 1368));
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v7 = sub_22B1DB218(a1, v5, v6, *(void *)(a1 + 144), *(void *)(a1 + 160));
  __int16 v10 = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v7 + 24), v7, (uint64_t)&v14, 1, (uint64_t)v9);
}

uint64_t sub_22B1DC29C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4((uint64_t)a1, &v32);
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a4 + 1))
  {
    uint64_t v8 = sub_22B2423A4((uint64_t)a1, a3, 3, 1);
    uint64_t v9 = llvm::UndefValue::get();
    uint64_t v10 = *(unsigned int *)(*(void *)v8 + 32);
    if (v10)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        __int16 v31 = 257;
        uint64_t v12 = llvm::ConstantInt::get();
        uint64_t v13 = sub_22B242524((uint64_t)(a1 + 1), v8, v12, (uint64_t)v30);
        long long v27 = *(_OWORD *)(a1 + 7);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v28, (llvm::IRBuilderBase *)(a1 + 1));
        int v29 = *((_DWORD *)a1 + 26);
        uint64_t v14 = a1[23];
        __int16 v31 = 257;
        uint64_t v15 = sub_22B1D7384((uint64_t)(a1 + 1), 39, v13, v14, (uint64_t)v30);
        uint64_t v16 = (*(uint64_t (**)(void *, long long *, uint64_t, void, void))(*a1 + 144))(a1, &v27, v15, 0, a1[19]);
        if (v28) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v31 = 257;
        uint64_t v17 = llvm::ConstantInt::get();
        uint64_t v9 = sub_22B2427EC((uint64_t)(a1 + 1), v9, v16, v17, (uint64_t)v30);
      }
    }
    long long v24 = *(_OWORD *)(a1 + 7);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v25, (llvm::IRBuilderBase *)(a1 + 1));
    int v26 = *((_DWORD *)a1 + 26);
    __int16 v31 = 257;
    uint64_t v18 = llvm::ConstantInt::get();
    uint64_t v19 = sub_22B242524((uint64_t)(a1 + 1), a3, v18, (uint64_t)v30);
    uint64_t v20 = (*(uint64_t (**)(void *, long long *, uint64_t, uint64_t, void, uint64_t))(*a1 + 88))(a1, &v24, v19, 8, 0, 32);
    if (v25) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v21 = a1[19];
    __int16 v31 = 257;
    uint64_t v22 = sub_22B1DC548((uint64_t)(a1 + 1), v20, v21, (uint64_t)v30);
    return sub_22B243454((uint64_t)a1, v9, v22);
  }
  return a3;
}

uint64_t sub_22B1DC548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return sub_22B1D7384(a1, 45, a2, a3, a4);
}

uint64_t sub_22B1DC5B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int8x16_t v6 = (int8x16_t)vdupq_n_s64(a3);
  do
  {
    if (((1 << v3) & *(_DWORD *)(a2 + 32)) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + v4);
      unsigned int v8 = ((v7 >> 15) * *(_DWORD *)(a1 + 828)) >> 1;
      switch(v7 & 0x1F)
      {
        case 2u:
        case 3u:
        case 4u:
        case 5u:
          if ((a3 & (1 << v8)) != 0) {
            int v13 = 3;
          }
          else {
            int v13 = 0;
          }
          uint64_t v14 = 2 << v8;
          int v15 = v13 | 0xC;
          goto LABEL_16;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
          uint32x4_t v9 = vshlq_u32((uint32x4_t)xmmword_22B26F850, (uint32x4_t)vdupq_n_s32(v8));
          v10.i64[0] = v9.i32[2];
          v10.i64[1] = v9.i32[3];
          int8x16_t v11 = v10;
          v10.i64[0] = v9.i32[0];
          v10.i64[1] = v9.i32[1];
          int8x16_t v12 = vbicq_s8((int8x16_t)xmmword_22B26F850, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v10)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v11))));
          goto LABEL_10;
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0x12u:
          uint32x4_t v16 = (uint32x4_t)vdupq_n_s32(v8);
          uint32x4_t v17 = vshlq_u32((uint32x4_t)xmmword_22B26F850, v16);
          v18.i64[0] = v17.i32[2];
          v18.i64[1] = v17.i32[3];
          int8x16_t v19 = v18;
          v18.i64[0] = v17.i32[0];
          v18.i64[1] = v17.i32[1];
          int8x16_t v20 = vbicq_s8((int8x16_t)xmmword_22B26F860, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v19))));
          uint32x4_t v21 = vshlq_u32((uint32x4_t)xmmword_22B26F870, v16);
          v18.i64[0] = v21.i32[2];
          v18.i64[1] = v21.i32[3];
          int8x16_t v22 = v18;
          v18.i64[0] = v21.i32[0];
          v18.i64[1] = v21.i32[1];
          int8x16_t v12 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_22B26F880, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v22)))), v20);
LABEL_10:
          int8x8_t v23 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
          int v13 = v23.i32[0] | v23.i32[1];
          break;
        case 0x13u:
          if ((a3 & (1 << v8)) != 0) {
            int v13 = 3;
          }
          else {
            int v13 = 0;
          }
          uint64_t v14 = 2 << v8;
          int v15 = v13 | 0xE;
LABEL_16:
          if ((a3 & v14) != 0) {
            int v13 = v15;
          }
          break;
        default:
          int v13 = 0;
          break;
      }
      v5 |= ((-1 << (v7 >> 5)) & ((int)((v13 & ~(-1 << (v7 >> 5))) >> ((v7 >> 5) - 1) << 31) >> 31) & 0xF | v13 & ~(-1 << (v7 >> 5))) << v4;
    }
    v4 += 4;
    ++v3;
  }
  while (v4 != 32);
  return v5;
}

uint64_t *sub_22B1DC7B8@<X0>(uint64_t *result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a4 + 52) = 0;
  *(unsigned char *)(a4 + 56) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 31) = 0;
  switch(a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 19:
      uint64_t v4 = result + 35;
      goto LABEL_6;
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t v4 = result + 36;
      goto LABEL_6;
    case 10:
    case 11:
    case 12:
      uint64_t v4 = result + 37;
      goto LABEL_6;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      uint64_t v4 = result + 33;
LABEL_6:
      uint64_t v5 = *v4;
      *(void *)a4 = v5;
      if (a2 <= 9)
      {
        if ((a2 - 2) < 2)
        {
          *(void *)(a4 + 8) = result[33];
          uint64_t v5 = result[35];
          goto LABEL_18;
        }
        if ((a2 - 6) < 2)
        {
          *(void *)(a4 + 8) = result[34];
          uint64_t v5 = result[36];
          goto LABEL_18;
        }
LABEL_17:
        *(void *)(a4 + 8) = v5;
LABEL_18:
        *(void *)(a4 + 16) = v5;
        switch(a2)
        {
          case 2:
          case 6:
          case 14:
            *(_WORD *)(a4 + 33) = 257;
            *(_OWORD *)(a4 + 36) = xmmword_22B26F890;
            goto LABEL_21;
          case 3:
          case 7:
          case 10:
          case 15:
            goto LABEL_19;
          case 4:
          case 8:
          case 11:
            *(unsigned char *)(a4 + 34) = 1;
            break;
          case 13:
          case 18:
            *(unsigned char *)(a4 + 33) = 1;
            goto LABEL_22;
          case 16:
            *(_WORD *)(a4 + 33) = 257;
            float v8 = 1.251;
            if (a3) {
              float v8 = 1.6689;
            }
            float v9 = -0.75294;
            if (a3) {
              float v9 = -0.5271;
            }
            *(float *)(a4 + 36) = v9;
            *(_DWORD *)(a4 + 40) = 0;
            *(float *)(a4 + 44) = v8;
            *(_DWORD *)(a4 + 48) = 1065353216;
            *(unsigned char *)(a4 + 52) = 1;
            goto LABEL_23;
          default:
            return result;
        }
        return result;
      }
      if (a2 != 10)
      {
        if (a2 == 19)
        {
          uint64_t v6 = result[36];
          *(void *)(a4 + 8) = v6;
          *(void *)(a4 + 16) = v6;
          *(void *)(a4 + 24) = 0x200000001;
          return result;
        }
        goto LABEL_17;
      }
      uint64_t v7 = result[37];
      *(void *)(a4 + 8) = result[34];
      *(void *)(a4 + 16) = v7;
LABEL_19:
      *(unsigned char *)(a4 + 33) = 1;
      *(_OWORD *)(a4 + 36) = xmmword_22B26F8A0;
LABEL_21:
      *(unsigned char *)(a4 + 52) = 1;
LABEL_22:
      if ((a2 - 14) <= 2) {
LABEL_23:
      }
        *(unsigned char *)(a4 + 32) = 1;
      return result;
    case 18:
      uint64_t v5 = result[34];
      *(void *)a4 = v5;
      goto LABEL_17;
    default:
      uint64_t v5 = 0;
      goto LABEL_17;
  }
}

uint64_t sub_22B1DCA1C(uint64_t a1, uint64_t a2)
{
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)(a1 + 1448)) {
    strlen(*(const char **)(a1 + 1448));
  }
  uint64_t v4 = sub_22B1DCB28();
  __int16 v9 = 257;
  uint64_t v5 = (llvm::Type ***)sub_22B1D4034(a1 + 8, **(void **)(*(void *)v4 + 16), v4, 0, 0, (uint64_t)v8);
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v9 = 257;
  return sub_22B1D4340((uint64_t *)(a1 + 8), 32, v5, v6, (uint64_t)v8);
}

uint64_t sub_22B1DCB28()
{
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  return v0;
}

uint64_t sub_22B1DCBAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = *(void *)(a1 + 176);
  v15[0] = *a3;
  v15[1] = v6;
  llvm::StructType::get();
  uint64_t v7 = llvm::UndefValue::get();
  int v11 = 0;
  __int16 v16 = 257;
  uint64_t v8 = sub_22B1D6D44(a1 + 8, v7, (uint64_t)a3, (uint64_t)&v11, 1, (uint64_t)v15);
  uint64_t v9 = llvm::ConstantInt::get();
  int v11 = 1;
  __int16 v16 = 257;
  return sub_22B1D6D44(a1 + 8, v8, v9, (uint64_t)&v11, 1, (uint64_t)v15);
}

uint64_t sub_22B1DCCF0(uint64_t a1, long long *a2, int a3, uint64_t a4, unsigned int *a5, llvm::Type *this)
{
  v22[0] = llvm::Type::getPrimitiveSizeInBits(this);
  v22[1] = v10;
  int v11 = llvm::TypeSize::operator unsigned long long();
  unsigned int v12 = *a5;
  int v13 = *a5 >> 5;
  switch(*a5 & 0x1F)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      v13 *= 2;
      break;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0x12u:
      v13 *= 4;
      break;
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
      int v13 = 4;
      break;
    default:
      int v13 = 0;
      break;
  }
  if (v11 == 32)
  {
    long long v27 = *a2;
    uint64_t v28 = *((void *)a2 + 2);
    if (v28)
    {
      llvm::MetadataTracking::track();
      unsigned int v12 = *a5;
    }
    int v29 = *((_DWORD *)a2 + 6);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 216))(a1, &v27, (v12 >> 15), a4);
    if (v28) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    llvm::FixedVectorType::get();
    uint64_t v14 = llvm::UndefValue::get();
    if (v13)
    {
      uint64_t v15 = 0;
      unsigned int v16 = (v13 + 3) >> 2;
      if (v16 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v16;
      }
      do
      {
        long long v24 = *a2;
        uint64_t v25 = *((void *)a2 + 2);
        if (v25) {
          llvm::MetadataTracking::track();
        }
        int v26 = *((_DWORD *)a2 + 6);
        uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 216))(a1, &v24, v15 + (*a5 >> 15), a4);
        if (v25) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v23 = 257;
        uint64_t v19 = llvm::ConstantInt::get();
        uint64_t v14 = sub_22B2427EC(a1 + 8, v14, v18, v19, (uint64_t)v22);
        ++v15;
      }
      while (v17 != v15);
    }
  }
  __int16 v23 = 257;
  return sub_22B1D7384(a1 + 8, 49, v14, (uint64_t)this, (uint64_t)v22);
}

uint64_t sub_22B1DCFA0(void *a1, long long *a2, int a3, uint64_t a4, unsigned int *a5, llvm::Type *this, uint64_t a7)
{
  v30[0] = llvm::Type::getPrimitiveSizeInBits(this);
  v30[1] = v12;
  int v13 = llvm::TypeSize::operator unsigned long long();
  unsigned int v14 = *a5;
  int v15 = *a5 >> 5;
  switch(*a5 & 0x1F)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      v15 *= 2;
      break;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0x12u:
      v15 *= 4;
      break;
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
      int v15 = 4;
      break;
    default:
      int v15 = 0;
      break;
  }
  if (v13 == 32)
  {
    long long v32 = *a2;
    uint64_t v33 = *((void *)a2 + 2);
    if (v33)
    {
      llvm::MetadataTracking::track();
      unsigned int v14 = *a5;
    }
    int v34 = *((_DWORD *)a2 + 6);
    uint64_t v16 = (v14 >> 15);
    uint64_t v17 = a1[24];
    __int16 v31 = 257;
    uint64_t v18 = sub_22B1D7384((uint64_t)(a1 + 1), 49, a7, v17, (uint64_t)v30);
    uint64_t result = (*(uint64_t (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(*a1 + 208))(a1, &v32, v16, v18, a4);
    if (v33) {
      return llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v20 = llvm::FixedVectorType::get();
    __int16 v31 = 257;
    uint64_t result = sub_22B1D7384((uint64_t)(a1 + 1), 49, a7, v20, (uint64_t)v30);
    if (v15)
    {
      uint64_t v21 = result;
      uint64_t v22 = 0;
      unsigned int v23 = (v15 + 3) >> 2;
      if (v23 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v23;
      }
      do
      {
        __int16 v31 = 257;
        uint64_t v25 = llvm::ConstantInt::get();
        uint64_t v26 = sub_22B242524((uint64_t)(a1 + 1), v21, v25, (uint64_t)v30);
        long long v27 = *a2;
        uint64_t v28 = *((void *)a2 + 2);
        if (v28) {
          llvm::MetadataTracking::track();
        }
        int v29 = *((_DWORD *)a2 + 6);
        uint64_t result = (*(uint64_t (**)(void *, long long *, void, uint64_t, uint64_t))(*a1 + 208))(a1, &v27, v22 + (*a5 >> 15), v26, a4);
        if (v28) {
          uint64_t result = llvm::MetadataTracking::untrack();
        }
        ++v22;
      }
      while (v24 != v22);
    }
  }
  return result;
}

uint64_t sub_22B1DD26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v18);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = llvm::ConstantFP::get();
  __int16 v17 = 257;
  uint64_t v7 = sub_22B1DB138(a1 + 8, a3, v6, (uint64_t)v16);
  uint64_t v8 = llvm::ConstantFP::get();
  __int16 v15 = 257;
  uint64_t v9 = sub_22B1DD390(a1 + 8, v7, v8, (uint64_t)v14);
  uint64_t v10 = *(void *)(a1 + 288);
  __int16 v17 = 257;
  uint64_t v11 = sub_22B1D78D4(a1 + 8, v9, v10, (uint64_t)v16);
  uint64_t v12 = llvm::ConstantInt::get();
  __int16 v15 = 257;
  return sub_22B1D6C68(a1 + 8, v11, v12, (uint64_t)v14);
}

uint64_t sub_22B1DD390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = sub_22B1DB2F4(a1, 14, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    sub_22B1D4554(a1, v7);
    sub_22B1D6EE0((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_22B1DD470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v26 = *(_OWORD *)a2;
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v26);
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v30 = 257;
  uint64_t v7 = sub_22B1D7B18(a1 + 8, a3, v6, (uint64_t)v29);
  uint64_t v8 = *(void *)(a1 + 264);
  __int16 v30 = 257;
  uint64_t v9 = sub_22B1DB6A8(a1 + 8, v7, v8, (uint64_t)v29);
  uint64_t v10 = llvm::ConstantFP::get();
  __int16 v25 = 257;
  uint64_t v11 = sub_22B1DD690(a1 + 8, v9, v10, (uint64_t)v24);
  uint64_t v12 = llvm::ConstantFP::get();
  __int16 v30 = 257;
  uint64_t v13 = sub_22B1DB138(a1 + 8, v11, v12, (uint64_t)v29);
  long long v21 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(a1 + 8));
  int v23 = *(_DWORD *)(a1 + 104);
  __int16 v30 = 257;
  uint64_t v14 = llvm::ConstantInt::get();
  uint64_t v15 = sub_22B242524(a1 + 8, v13, v14, (uint64_t)v29);
  uint64_t v16 = llvm::ConstantFP::get();
  uint64_t v17 = llvm::ConstantFP::get();
  uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 72))(a1, &v21, v15, v16, v17, 0);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v30 = 257;
  uint64_t v19 = llvm::ConstantInt::get();
  return sub_22B2427EC(a1 + 8, v13, v18, v19, (uint64_t)v29);
}

uint64_t sub_22B1DD690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = sub_22B1DB2F4(a1, 16, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    sub_22B1D4554(a1, v7);
    sub_22B1D6EE0((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_22B1DD770(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v19 = *(_OWORD *)a2;
  uint64_t v20 = *(void *)(a2 + 16);
  if (v20) {
    llvm::MetadataTracking::track();
  }
  int v21 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4((uint64_t)a1, &v19);
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 616))(a1, a3, a4, a5, a6, a7);
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 592))(a1, a5, a4, 3, a6, a7);
      break;
    case 5:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 592))(a1, a5, a4, 4, a6, a7);
      break;
    case 6:
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 592))(a1, a5, a1[19], 4, a6, a7);
      uint64_t v16 = a1[36];
      __int16 v18 = 257;
      uint64_t result = sub_22B1D78D4((uint64_t)(a1 + 1), v15, v16, (uint64_t)v17);
      break;
    case 7:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 624))(a1, a5, a4);
      break;
    case 8:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 640))(a1, a5, a4);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_22B1DDA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t result = 0;
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 608))(a1, a3, a4, a5, a6, a7);
      break;
    case 5:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 600))(a1, a5, a6, a7);
      break;
    case 6:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 584))(a1, a5);
      break;
    case 7:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 632))(a1, a5);
      break;
    case 8:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 648))(a1, a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22B1DDC2C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  long long v26 = *(_OWORD *)a2;
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4((uint64_t)a1, &v26);
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  if (a4 == 16)
  {
    uint64_t v15 = 149;
    if (a5) {
      uint64_t v15 = 147;
    }
    uint64_t v16 = a1[v15];
    if (v16) {
      size_t v17 = strlen((const char *)a1[v15]);
    }
    else {
      size_t v17 = 0;
    }
    uint64_t v21 = sub_22B1D7FA8((uint64_t)a1, v16, v17, a1[20], a1[29], a1[24]);
    uint64_t v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 560))(a1, a3, v21);
  }
  else
  {
    if (a4 != 8) {
      return 0;
    }
    uint64_t v12 = 150;
    if (a5) {
      uint64_t v12 = 148;
    }
    uint64_t v13 = a1[v12];
    if (v13) {
      size_t v14 = strlen((const char *)a1[v12]);
    }
    else {
      size_t v14 = 0;
    }
    uint64_t v19 = sub_22B1D7FA8((uint64_t)a1, v13, v14, a1[20], a1[35], a1[24]);
    uint64_t v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 552))(a1, a3, v19);
  }
  uint64_t v18 = v20;
  if (a6 != 32)
  {
    uint64_t v22 = a1[19];
    __int16 v25 = 257;
    return sub_22B1DC548((uint64_t)(a1 + 1), v20, v22, (uint64_t)v24);
  }
  return v18;
}

uint64_t sub_22B1DDE24(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5, char a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 0x40000000;
  uint64_t v19 = sub_22B1DE040;
  uint64_t v20 = &unk_26488D370;
  uint64_t v21 = a1;
  char v22 = a6;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) != 0x12) {
    return sub_22B1DE040((uint64_t)v18, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  }
  uint64_t v12 = llvm::UndefValue::get();
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  sub_22B24295C(a1, a3, (llvm::Constant **)v30);
  sub_22B24295C(a1, a4, (llvm::Constant **)v29);
  sub_22B24295C(a1, a5, (llvm::Constant **)v28);
  uint64_t v13 = *(unsigned int *)(*(void *)a3 + 32);
  if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      uint64_t v15 = v19((uint64_t)v18, *((void *)v30 + i), *((void *)v29 + i), *((void *)v28 + i));
      __int16 v27 = 257;
      uint64_t v16 = llvm::ConstantInt::get();
      uint64_t v12 = sub_22B2427EC(a1 + 8, v12, v15, v16, (uint64_t)v26);
    }
  }
  return v12;
}

uint64_t sub_22B1DE040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a4 + 16) == 17) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!a3 || *(unsigned char *)(a3 + 16) != 17) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v11 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v10 ? *(void *)(a3 + 40) : a3 + 24;
  if ((*(unsigned char *)(v11 + 28) & 7) != 3 || v9 == 0) {
    goto LABEL_16;
  }
  char v28 = 0;
  uint64_t v13 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v29, 1.0);
  uint64_t v14 = llvm::APFloatBase::IEEEdouble(v13);
  MEMORY[0x230F42CB0](v30, v29, v14);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v29);
  llvm::APFloat::convert();
  int isExactlyValue = llvm::ConstantFP::isExactlyValue();
  sub_22B1DE2C0((llvm::detail::IEEEFloat *)v30);
  if (isExactlyValue)
  {
    long long v25 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(v8 + 8));
    int v27 = *(_DWORD *)(v8 + 104);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v8 + 40))(v8, &v25, a2, *(unsigned __int8 *)(a1 + 40));
    if (v26) {
LABEL_19:
    }
      llvm::MetadataTracking::untrack();
  }
  else
  {
LABEL_16:
    long long v22 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (llvm::IRBuilderBase *)(v8 + 8));
    int v24 = *(_DWORD *)(v8 + 104);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v8 + 56))(v8, &v22, a2, a3, *(unsigned __int8 *)(a1 + 40));
    if (v23) {
      llvm::MetadataTracking::untrack();
    }
    long long v19 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v20, (llvm::IRBuilderBase *)(v8 + 8));
    int v21 = *(_DWORD *)(v8 + 104);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v8 + 48))(v8, &v19, v17, a4, *(unsigned __int8 *)(a1 + 40));
    if (v20) {
      goto LABEL_19;
    }
  }
  return v16;
}

llvm::detail::IEEEFloat *sub_22B1DE2C0(llvm::detail::IEEEFloat *a1)
{
  uint64_t v2 = *(void *)a1;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v2)
  {
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = 0;
    if (v3)
    {
      uint64_t v4 = v3 - 16;
      uint64_t v5 = *(void *)(v3 - 8);
      if (v5)
      {
        uint64_t v6 = v3 - 24;
        uint64_t v7 = 32 * v5;
        do
        {
          sub_22B1DE2C0(v6 + v7);
          v7 -= 32;
        }
        while (v7);
      }
      MEMORY[0x230F435E0](v4, 0x1072C801E5F02E8);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(a1);
  }
  return a1;
}

uint64_t sub_22B1DE350(uint64_t a1, long long *a2, llvm::Constant *a3, llvm::Constant *a4, int a5)
{
  if (a5)
  {
    long long v18 = *a2;
    uint64_t v19 = *((void *)a2 + 2);
    if (v19) {
      llvm::MetadataTracking::track();
    }
    int v20 = *((_DWORD *)a2 + 6);
    uint64_t v9 = sub_22B1DE4B0(a1, (uint64_t)&v18, a3, a4);
    if (v19) {
      llvm::MetadataTracking::untrack();
    }
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    if (v16) {
      llvm::MetadataTracking::track();
    }
    int v17 = *((_DWORD *)a2 + 6);
    a4 = (llvm::Constant *)sub_22B1DE4B0(a1, (uint64_t)&v15, a4, a3);
    if (v16) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)a3;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *((_DWORD *)a2 + 6);
  uint64_t v10 = sub_22B1DE71C(a1, (uint64_t)&v12, v9, a4);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t sub_22B1DE4B0(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Constant *a4)
{
  v28[5] = *(llvm::Constant **)MEMORY[0x263EF8340];
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v21);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  sub_22B1D7BF0(&v20, *(char **)(a1 + 1704));
  uint64_t v8 = *(void *)a3;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = **(void **)(v8 + 16);
  }
  if (v8 == *(void *)(a1 + 152)) {
    uint64_t v9 = ".f16";
  }
  else {
    uint64_t v9 = ".f32";
  }
  std::string::append(&v20, v9);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v20;
  }
  else {
    uint64_t v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = sub_22B1D7FA8(a1, (uint64_t)v10, size, v8, v8, v8);
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
  {
    uint64_t v13 = llvm::UndefValue::get();
    memset(v28, 0, 32);
    memset(v27, 0, sizeof(v27));
    sub_22B24295C(a1, a3, v28);
    sub_22B24295C(a1, a4, (llvm::Constant **)v27);
    uint64_t v14 = *(unsigned int *)(*(void *)a3 + 32);
    if (v14)
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        uint64_t v16 = *((void *)v27 + i);
        v26[0] = v28[i];
        v26[1] = v16;
        __int16 v25 = 257;
        int v17 = sub_22B1D4034(a1 + 8, *(void *)(v12 + 24), v12, (uint64_t)v26, 2, (uint64_t)v24);
        __int16 v25 = 257;
        uint64_t v18 = llvm::ConstantInt::get();
        uint64_t v13 = sub_22B2427EC(a1 + 8, v13, (uint64_t)v17, v18, (uint64_t)v24);
      }
    }
  }
  else
  {
    v28[0] = a3;
    v28[1] = a4;
    __int16 v25 = 257;
    uint64_t v13 = (uint64_t)sub_22B1D4034(a1 + 8, *(void *)(v12 + 24), v12, (uint64_t)v28, 2, (uint64_t)v24);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return v13;
}

uint64_t sub_22B1DE71C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)a3 != *a4) {
    sub_22B242CE8(a1, *(_DWORD *)(*(void *)a3 + 32), (uint64_t)a4);
  }
  llvm::IRBuilderBase::CreateFCmpHelper();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B1DE820(uint64_t a1, long long *a2, llvm::Constant *a3, llvm::Constant *a4, int a5)
{
  if (a5)
  {
    long long v18 = *a2;
    uint64_t v19 = *((void *)a2 + 2);
    if (v19) {
      llvm::MetadataTracking::track();
    }
    int v20 = *((_DWORD *)a2 + 6);
    uint64_t v9 = sub_22B1DE4B0(a1, (uint64_t)&v18, a3, a4);
    if (v19) {
      llvm::MetadataTracking::untrack();
    }
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    if (v16) {
      llvm::MetadataTracking::track();
    }
    int v17 = *((_DWORD *)a2 + 6);
    a4 = (llvm::Constant *)sub_22B1DE4B0(a1, (uint64_t)&v15, a4, a3);
    if (v16) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)a3;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *((_DWORD *)a2 + 6);
  uint64_t v10 = sub_22B1DE71C(a1, (uint64_t)&v12, v9, a4);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t sub_22B1DE980(uint64_t a1, uint64_t a2, llvm::Constant *a3, char a4)
{
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1174405120;
  void v10[2] = sub_22B1DEAB0;
  v10[3] = &unk_26DE70DE0;
  v10[4] = a1;
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  char v14 = a4;
  uint64_t v8 = sub_22B242FF0(a1, a3, (uint64_t)v10);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

llvm::Value *sub_22B1DEAB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a1 + 64);
  if (*(unsigned char *)(a1 + 72) && !*(unsigned char *)(v4 + 1712)) {
    uint64_t v5 = (char **)(v4 + 1104);
  }
  else {
    uint64_t v5 = (char **)(v4 + 1096);
  }
  uint64_t v6 = sub_22B1DEBB8(v4, (uint64_t)&v8, a2, *v5);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1DEB60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t result = a1 + 56;
  if (v2) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t sub_22B1DEB70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v4;
  uint64_t result = a1 + 56;
  if (v4) {
    uint64_t result = llvm::MetadataTracking::track();
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

llvm::Value *sub_22B1DEBB8(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  __int16 v30 = a3;
  long long v27 = *(_OWORD *)a2;
  uint64_t v28 = *(void *)(a2 + 16);
  if (v28) {
    llvm::MetadataTracking::track();
  }
  int v29 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v27);
  if (v28) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *a3;
  sub_22B1D7BF0(&v26, a4);
  std::string::append(&v26, ".");
  int v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v25, *(_DWORD *)(v8 + 32));
    int v10 = std::string::insert(&v25, 0, "v");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    uint64_t v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (v23 >= 0) {
      std::string::size_type v13 = HIBYTE(v23);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v26, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    int v9 = *(_DWORD *)(v8 + 8);
  }
  int v14 = v9 & 0xFE;
  uint64_t v15 = v8;
  if (v14 == 18) {
    uint64_t v15 = **(void **)(v8 + 16);
  }
  if (v15 == *(void *)(a1 + 152)) {
    uint64_t v16 = "f16";
  }
  else {
    uint64_t v16 = "f32";
  }
  std::string::append(&v26, v16);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = &v26;
  }
  else {
    int v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = sub_22B1DB218(a1, (uint64_t)v17, size, v8, v8);
  __int16 v24 = 257;
  int v20 = sub_22B1D4034(a1 + 8, *(void *)(v19 + 24), v19, (uint64_t)&v30, 1, (uint64_t)__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v20;
}

uint64_t sub_22B1DEDA8(uint64_t a1)
{
  *(void *)a1 = &unk_26DE70D40;
  *(void *)(a1 + 16) = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  if (qword_2683E8520 != -1) {
    dispatch_once(&qword_2683E8520, &unk_26DE70DC0);
  }
  *(_DWORD *)(a1 + 44) = 60;
  return a1;
}

uint64_t *sub_22B1DEE30(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 12))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 8);
      if (v3)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 8 * v3;
        do
        {
          uint64_t v6 = *(llvm **)(*(void *)v2 + v4);
          if (v6 != (llvm *)-8 && v6 != 0) {
            llvm::deallocate_buffer(v6, (void *)(*(void *)v6 + 33));
          }
          v4 += 8;
        }
        while (v5 != v4);
      }
    }
    free(*(void **)v2);
    JUMPOUT(0x230F43600);
  }
  return result;
}

void *sub_22B1DEEE4(char *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  sub_22B1D3274();
  sub_22B1D7BF0(__p, a1);
  uint64_t v2 = qword_2683E84F8;
  if (!qword_2683E84F8) {
    goto LABEL_8;
  }
  uint64_t v3 = &qword_2683E84F8;
  do
  {
    BOOL v4 = sub_22B1DF088((void *)(v2 + 32), __p);
    uint64_t v5 = (uint64_t *)(v2 + 8);
    if (!v4)
    {
      uint64_t v5 = (uint64_t *)v2;
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v5;
  }
  while (*v5);
  if (v3 == &qword_2683E84F8 || sub_22B1DF088(__p, v3 + 4)) {
LABEL_8:
  }
    uint64_t v3 = &qword_2683E84F8;
  if (SHIBYTE(v14) < 0) {
    operator delete(*(void **)__p);
  }
  if (v3 == &qword_2683E84F8) {
    return 0;
  }
  uint64_t v6 = v3 + 7;
  if (*((char *)v3 + 79) < 0) {
    uint64_t v6 = (void *)*v6;
  }
  uint64_t v7 = sub_22B1D33D4();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v3 + 55) < 0) {
      uint64_t v8 = v3[5];
    }
    else {
      uint64_t v8 = *((unsigned __int8 *)v3 + 55);
    }
    if (*((char *)v3 + 79) < 0) {
      uint64_t v10 = v3[8];
    }
    else {
      uint64_t v10 = *((unsigned __int8 *)v3 + 79);
    }
    *(_DWORD *)std::string __p = 136316162;
    *(void *)&__p[4] = "static const char *AGCEnv::getValue(const char *)";
    __int16 v12 = 2080;
    std::string::size_type v13 = a1;
    __int16 v14 = 2048;
    uint64_t v15 = v8;
    __int16 v16 = 2080;
    int v17 = v6;
    __int16 v18 = 2048;
    uint64_t v19 = v10;
    _os_log_debug_impl(&dword_22B1D2000, v7, OS_LOG_TYPE_DEBUG, "%s: %s[%lu] = %s[%lu]\n", __p, 0x34u);
  }
  return v6;
}

BOOL sub_22B1DF088(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

uint64_t sub_22B1DF0F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  long long v31 = *(_OWORD *)a2;
  uint64_t v32 = *(void *)(a2 + 16);
  if (v32) {
    llvm::MetadataTracking::track();
  }
  int v33 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v31);
  if (v32) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a4 + 16) && (*a3 == *(void *)(a1 + 272) || *a3 == *(void *)(a1 + 264)))
  {
    if (*(float *)a4 == *(float *)(a4 + 4) && *(float *)(a4 + 8) == *(float *)(a4 + 12))
    {
      uint64_t v10 = llvm::ConstantFP::get();
      uint64_t v11 = llvm::ConstantFP::get();
      long long v28 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v29, (llvm::IRBuilderBase *)(a1 + 8));
      int v30 = *(_DWORD *)(a1 + 104);
      a3 = (void *)(*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, &v28, a3, v10, v11, a5);
      if (v29) {
        llvm::MetadataTracking::untrack();
      }
    }
    else
    {
      uint64_t v12 = sub_22B2423A4(a1, (uint64_t)a3, 3, 1);
      __int16 v35 = 257;
      uint64_t v13 = llvm::ConstantInt::get();
      uint64_t v14 = sub_22B242524(a1 + 8, (uint64_t)a3, v13, (uint64_t)v34);
      uint64_t v15 = llvm::ConstantFP::get();
      uint64_t v16 = llvm::ConstantFP::get();
      uint64_t v17 = llvm::ConstantFP::get();
      uint64_t v18 = llvm::ConstantFP::get();
      long long v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(a1 + 8));
      int v27 = *(_DWORD *)(a1 + 104);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, &v25, v12, v15, v16, a5);
      if (v26) {
        llvm::MetadataTracking::untrack();
      }
      long long v22 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (llvm::IRBuilderBase *)(a1 + 8));
      int v24 = *(_DWORD *)(a1 + 104);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, &v22, v14, v17, v18, a5);
      if (v23) {
        llvm::MetadataTracking::untrack();
      }
      return sub_22B243454(a1, v19, v20);
    }
  }
  return (uint64_t)a3;
}

uint64_t sub_22B1DF40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  long long v7 = *(_OWORD *)(v4 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (llvm::IRBuilderBase *)(v4 + 8));
  int v9 = *(_DWORD *)(v4 + 104);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void))(*(void *)v4 + 136))(v4, &v7, a2, 0, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

int32x2_t *sub_22B1DF4C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v58[32] = *MEMORY[0x263EF8340];
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v12 = v9 % v10;
      }
    }
    else
    {
      unint64_t v12 = v9 & (v10 - 1);
    }
    uint64_t v13 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2) {
            return (int32x2_t *)(i + 3);
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  int v50 = 3;
  uint64_t v51 = 0;
  uint64_t v52 = 1;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  int v55 = 1;
  std::string::size_type v56 = v58;
  uint64_t v57 = 0x800000000;
  if (v10)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v17 = *(void ***)(*(void *)(a1 + 48) + 8 * v3);
    if (v17)
    {
      uint64_t v18 = (int32x2_t *)*v17;
      if (*v17)
      {
        do
        {
          unint64_t v19 = (unint64_t)v18[1];
          if (v19 == v9)
          {
            if (*(void *)&v18[2] == a2) {
              goto LABEL_90;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v10) {
                v19 %= v10;
              }
            }
            else
            {
              v19 &= v10 - 1;
            }
            if (v19 != v3) {
              break;
            }
          }
          uint64_t v18 = (int32x2_t *)*v18;
        }
        while (v18);
      }
    }
  }
  uint64_t v20 = (int32x2_t *)(a1 + 64);
  uint64_t v18 = (int32x2_t *)operator new(0x68uLL);
  *uint64_t v18 = 0;
  v18[1] = (int32x2_t)v9;
  void v18[2] = (int32x2_t)a2;
  v18[3].i32[0] = 2;
  v18[4] = (int32x2_t)&v18[6];
  v18[5] = (int32x2_t)0x400000000;
  v18[10] = 0;
  v18[11] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
  float v22 = *(float *)(a1 + 80);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = *(void *)(a1 + 56);
    }
    if (*(void *)&prime > v10) {
      goto LABEL_46;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v10 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(void *)&prime >> 61) {
            sub_22B1E33E4();
          }
          int v27 = operator new(8 * *(void *)&prime);
          long long v28 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(void *)(*(void *)(a1 + 48) + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          int v30 = (void *)*v20;
          if (*v20)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 48) + 8 * v31) = v20;
            unsigned int v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  uint64_t v38 = *(void *)(a1 + 48);
                  if (!*(void *)(v38 + 8 * v37))
                  {
                    *(void *)(v38 + 8 * v37) = v30;
                    goto LABEL_71;
                  }
                  *int v30 = *v36;
                  *unsigned int v36 = **(void **)(*(void *)(a1 + 48) + 8 * v37);
                  **(void **)(*(void *)(a1 + 48) + 8 * v37) = v36;
                  unsigned int v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_71:
                int v30 = v36;
                unsigned int v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_75;
        }
        std::string::size_type v46 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        if (v46) {
          operator delete(v46);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 56) = 0;
      }
    }
LABEL_75:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v39 = *(void *)(a1 + 48);
  std::string::size_type v40 = *(int32x2_t ***)(v39 + 8 * v3);
  if (v40)
  {
    *uint64_t v18 = (int32x2_t)*v40;
  }
  else
  {
    *uint64_t v18 = *v20;
    *uint64_t v20 = (int32x2_t)v18;
    *(void *)(v39 + 8 * v3) = v20;
    if (!*(void *)v18) {
      goto LABEL_89;
    }
    unint64_t v41 = *(void *)(*(void *)v18 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v41 >= v10) {
        v41 %= v10;
      }
    }
    else
    {
      v41 &= v10 - 1;
    }
    std::string::size_type v40 = (int32x2_t **)(*(void *)(a1 + 48) + 8 * v41);
  }
  *std::string::size_type v40 = v18;
LABEL_89:
  ++*(void *)(a1 + 72);
LABEL_90:
  uint64_t v45 = v18 + 3;
  sub_22B1E092C((uint64_t)&v53, (uint64_t)&v50, 0);
  sub_22B1E0A18((uint64_t)v47, a1, a2, a3, 0, (uint64_t)&v18[3], (int32x2_t *)&v53);
  sub_22B1E1E44((uint64_t)&v53);
  __int32 v42 = v53;
  v18[10].i32[0] = HIDWORD(v52);
  v18[10].i32[1] = v42;
  v18[11] = vrev64_s32(*(int32x2_t *)((char *)&v53 + 4));
  v18[12] = (int32x2_t)a3;
  if (v49 < 0) {
    operator delete(__p);
  }
  if (v56 != v58) {
    free(v56);
  }
  uint64_t v43 = v51;
  uint64_t v51 = 0;
  if (v43) {
    MEMORY[0x230F43600](v43, 0x1000C4052888210);
  }
  return v45;
}

void sub_22B1DFAA8(char *a1, char *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = a2 - 40;
    do
    {
      uint64_t v4 = (char *)*((void *)v3 - 2);
      if (v3 != v4) {
        free(v4);
      }
      uint64_t v5 = (char *)*((void *)v3 - 8);
      if (v3 - 48 != v5) {
        free(v5);
      }
      size_t v6 = v3 - 64;
      v3 -= 104;
    }
    while (v6 != a1);
  }
}

uint64_t sub_22B1DFB0C(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v10 = v5 + 104 * v4;
    if (v5 > (unint64_t)a2 || v10 <= (unint64_t)a2) {
      sub_22B1E0818();
    }
    sub_22B1E0818();
  }
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unint64_t v7 = (void *)(v5 + 104 * v6);
  *unint64_t v7 = v7 + 2;
  v7[1] = 0x400000000;
  if (a2[2]) {
    sub_22B1E070C((uint64_t)v7, (uint64_t)a2);
  }
  unint64_t v8 = v5 + 104 * v6;
  *(void *)(v8 + 48) = v8 + 64;
  uint64_t result = v8 + 48;
  *(void *)(result + 8) = 0x400000000;
  if (a2[14]) {
    uint64_t result = sub_22B1E070C(result, (uint64_t)(a2 + 12));
  }
  *(_DWORD *)(v5 + 104 * v6 + 96) = a2[24];
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22B1DFC00(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  sub_22B1E04FC(a1);
  sub_22B1E0428(a1 + 1000, *(_DWORD *)(*(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 96));
  sub_22B1E0488(a1);
  float v22 = v24;
  uint64_t v23 = 0x400000000;
  if (*(_DWORD *)(a1 + 64))
  {
    sub_22B1E0358((uint64_t)&v22, a1 + 56);
    unint64_t v25 = &v27;
    uint64_t v26 = (void *)0x400000000;
    uint64_t v29 = v31;
    uint64_t v30 = 0x400000000;
    if (v23) {
      sub_22B1E0358((uint64_t)&v29, (uint64_t)&v22);
    }
  }
  else
  {
    unint64_t v25 = &v27;
    uint64_t v26 = (void *)0x400000000;
    uint64_t v29 = v31;
    uint64_t v30 = 0x400000000;
  }
  LODWORD(v32) = 0;
  sub_22B1DFB0C(a1 + 152, &v25);
  if (v29 != v31) {
    free(v29);
  }
  if (v25 != &v27) {
    free(v25);
  }
  if (v22 != v24) {
    free(v22);
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v4 = *(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160);
  *(_DWORD *)(v4 - 8) = *(_DWORD *)(v4 - 96);
  sub_22B1D6788(v4 - 104, 0);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = *(uint64_t **)(a2 + 8);
    uint64_t v8 = 8 * v5;
    do
    {
      if (*v7) {
        v6 |= sub_22B1DFF84(a1, *v7);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  LODWORD(v25) = 7;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  uint8x8_t v32 = v34;
  uint64_t v33 = 0x800000000;
  uint64_t v35 = v37;
  uint64_t v36 = 0x400000000;
  v37[4] = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  if (v6)
  {
    sub_22B1E02FC(a1);
    uint64_t v39 = *(void *)(a1 + 24);
    sub_22B1E00BC(a1, (uint64_t)&v25);
  }
  sub_22B1E04FC(a1);
  unint64_t v9 = (void *)(a1 + 56);
  sub_22B1E0358(a1 + 56, *(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 56);
  unint64_t v10 = (llvm::ArrayType *)llvm::StructType::get();
  uint64_t v11 = *(unsigned int *)(a1 + 64);
  if (v11)
  {
    uint64_t v12 = *v9 + 8 * v11;
    do
    {
      uint64_t v13 = *(void *)(v12 - 8);
      v12 -= 8;
      unint64_t v10 = (llvm::ArrayType *)llvm::ArrayType::get(v10, (llvm::Type *)*(unsigned int *)(v13 + 16));
    }
    while (v12 != *v9);
    int v14 = *(_DWORD *)(a1 + 64);
    if (v14)
    {
      int v15 = *(_DWORD *)(a1 + 1056) - v14;
      int v16 = *(_DWORD *)(a1 + 1008) - v14;
      *(_DWORD *)(a1 + 1056) = v15;
      *(_DWORD *)(a1 + 1008) = v16;
    }
  }
  --*(_DWORD *)(a1 + 1008);
  unsigned int v17 = *(_DWORD *)(a1 + 160) - 1;
  *(_DWORD *)(a1 + 160) = v17;
  uint64_t v18 = *(void *)(a1 + 152) + 104 * v17;
  unint64_t v19 = *(void **)(v18 + 48);
  if (v19 != (void *)(v18 + 64)) {
    free(v19);
  }
  if (*(void *)v18 != v18 + 16) {
    free(*(void **)v18);
  }
  sub_22B1D6788(*(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 104, (uint64_t)v10);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v20 = *(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160);
  *(_DWORD *)(v20 - 8) = *(_DWORD *)(v20 - 96);
  sub_22B1D6788(v20 - 104, 0);
  if (v35 != v37) {
    free(v35);
  }
  if (v32 != v34) {
    free(v32);
  }
  if (v26 != v28) {
    free(v26);
  }
  return v6 & 1;
}

uint64_t sub_22B1DFF84(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    unsigned int v3 = *(_DWORD *)a2;
    if (*(_DWORD *)a2) {
      break;
    }
    a2 = *(void *)(a2 + 8);
  }
  if (v3 <= 2)
  {
    return sub_22B1DFC00();
  }
  else
  {
    switch(v3)
    {
      case 3u:
        unsigned int v4 = *(_DWORD *)(a1 + 64);
        if (v4 >= *(_DWORD *)(a1 + 68)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 56) + 8 * v4) = a2;
        ++*(_DWORD *)(a1 + 64);
        uint64_t result = sub_22B1DFF84(a1, *(void *)(a2 + 8));
        --*(_DWORD *)(a1 + 64);
        return result;
      case 4u:
        int v6 = (_DWORD *)(a1 + 48);
        goto LABEL_13;
      case 5u:
        int v6 = (_DWORD *)(a1 + 40);
        goto LABEL_13;
      case 6u:
        int v6 = (_DWORD *)(a1 + 44);
LABEL_13:
        sub_22B1E01D0(a1, a2, v6);
        return 1;
      case 7u:
        sub_22B1E00BC(a1, a2);
        goto LABEL_15;
      default:
LABEL_15:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_22B1E00BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1000;
  sub_22B1E0428(a1 + 1000, *(_DWORD *)(*(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 96));
  sub_22B1E0428(v4, *(_DWORD *)(a1 + 112));
  sub_22B1E0488(a1);
  sub_22B1E0358(a2 + 176, a1 + 1048);
  uint64_t v5 = *(unsigned int *)(a1 + 1008);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 1000);
    uint64_t v7 = 4 * v5;
    do
    {
      v6 += 4;
      uint64_t v8 = llvm::ConstantInt::get();
      sub_22B1D6788(a2 + 96, v8);
      v7 -= 4;
    }
    while (v7);
  }
  unint64_t v9 = *(llvm::ArrayType **)(a2 + 240);
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 56) + 8 * v10;
    do
    {
      uint64_t v12 = *(void *)(v11 - 8);
      v11 -= 8;
      unint64_t v9 = (llvm::ArrayType *)llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(v12 + 16));
    }
    while (v11 != *(void *)(a1 + 56));
  }
  uint64_t result = sub_22B1D6788(a1 + 104, (uint64_t)v9);
  int v14 = *(_DWORD *)(a1 + 64);
  int v15 = *(_DWORD *)(a1 + 1008);
  if (v14)
  {
    v15 -= v14;
    *(_DWORD *)(a1 + 1056) -= v14;
  }
  *(_DWORD *)(a1 + 1008) = v15 - 2;
  return result;
}

uint64_t sub_22B1E01D0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_22B1E02FC(a1);
  *(_DWORD *)(a2 + 92) = *a3;
  sub_22B1E0358(a2 + 176, a1 + 1048);
  uint64_t v6 = *(unsigned int *)(a1 + 1008);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 1000);
    uint64_t v8 = 4 * v6;
    do
    {
      v7 += 4;
      uint64_t v9 = llvm::ConstantInt::get();
      sub_22B1D6788(a2 + 96, v9);
      v8 -= 4;
    }
    while (v8);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  if (v10)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 56);
    uint64_t v12 = 8 * v10;
    int v13 = 1;
    do
    {
      uint64_t v14 = *v11++;
      v13 *= *(_DWORD *)(v14 + 16);
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    int v13 = 1;
  }
  uint64_t v15 = a2 + 96;
  uint64_t v16 = llvm::ConstantInt::get();
  sub_22B1D6788(v15, v16);
  uint64_t v17 = llvm::ConstantInt::get();
  sub_22B1D6788(v15, v17);
  uint64_t v18 = llvm::ConstantInt::get();
  uint64_t result = sub_22B1D6788(v15, v18);
  *a3 += v13;
  return result;
}

uint64_t sub_22B1E02FC(uint64_t result)
{
  if (*(_DWORD *)(result + 112))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 152) + 104 * *(unsigned int *)(result + 160) - 104;
    uint64_t v3 = llvm::StructType::get();
    uint64_t result = sub_22B1D6788(v2, v3);
    *(_DWORD *)(v1 + 112) = 0;
  }
  return result;
}

uint64_t sub_22B1E0358(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_22B1E0428(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_22B1E0488(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 64);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(uint64_t **)(result + 56);
    uint64_t v4 = result + 1048;
    uint64_t v5 = result + 1000;
    uint64_t v6 = 8 * v1;
    do
    {
      uint64_t v7 = *v3++;
      sub_22B1D6788(v4, *(unsigned int *)(v7 + 24) | ((unint64_t)*(unsigned int *)(v2 + 1008) << 32));
      uint64_t result = sub_22B1E0428(v5, 0);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22B1E04FC(uint64_t a1)
{
  uint64_t v2 = *(llvm::ArrayType **)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 52);
  int v4 = *(unsigned __int8 *)(a1 + 53);
  uint64_t v5 = (llvm::ArrayType *)llvm::ArrayType::get(v2, (llvm::Type *)*(unsigned int *)(*(void *)(a1 + 8) + 1608));
  uint64_t v6 = (llvm::ArrayType *)llvm::ArrayType::get(v5, (llvm::Type *)*(unsigned int *)(a1 + 40));
  uint64_t v7 = (llvm::ArrayType *)llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 32), (llvm::Type *)*(unsigned int *)(*(void *)(a1 + 8) + 1612));
  uint64_t v8 = (llvm::ArrayType *)llvm::ArrayType::get(v7, (llvm::Type *)*(unsigned int *)(a1 + 44));
  uint64_t v9 = (llvm::ArrayType *)llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 24), (llvm::Type *)*(unsigned int *)(*(void *)(a1 + 8) + 1680));
  uint64_t v10 = *(llvm::ArrayType **)(a1 + 32);
  llvm::ArrayType::get(v10, 0);
  uint64_t v11 = (llvm::Type *)*(unsigned int *)(a1 + 48);
  if (v11) {
    llvm::ArrayType::get(v2, v11);
  }
  if (*(_DWORD *)(a1 + 40))
  {
    if (v3) {
      uint64_t v12 = 2;
    }
    else {
      uint64_t v12 = 1;
    }
    llvm::ArrayType::get(v6, (llvm::Type *)v12);
  }
  if (*(_DWORD *)(a1 + 44))
  {
    if (v4) {
      uint64_t v13 = 2;
    }
    else {
      uint64_t v13 = 1;
    }
    llvm::ArrayType::get(v8, (llvm::Type *)v13);
  }
  uint64_t v14 = (llvm::Type *)*(unsigned int *)(a1 + 40);
  if (v14)
  {
    llvm::ArrayType::get(v9, v14);
    uint64_t v15 = (llvm::Type *)*(unsigned int *)(a1 + 40);
    if (v15) {
      llvm::ArrayType::get(v10, v15);
    }
  }
  uint64_t v16 = (llvm::Type *)*(unsigned int *)(a1 + 44);
  if (v16) {
    llvm::ArrayType::get(v10, v16);
  }
  if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 40))
  {
    uint64_t v17 = *(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 104;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 152) + 104 * *(unsigned int *)(a1 + 160) - 104;
    if (!*(_DWORD *)(a1 + 44))
    {
      uint64_t v18 = llvm::StructType::get();
      goto LABEL_22;
    }
  }
  uint64_t v18 = llvm::StructType::get();
LABEL_22:
  *(void *)(*(void *)v17 + 8 * *(unsigned int *)(v17 + 96)) = v18;
  return sub_22B1E02FC(a1);
}

uint64_t sub_22B1E070C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    int v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v7)
      {
        if (v7) {
          memmove(*(void **)a1, v4, 8 * v7);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v7)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          memmove(*(void **)a1, v4, 8 * v8);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v7;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        int v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_22B1E0818()
{
}

__n128 sub_22B1E092C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 32;
  unint64_t v5 = v6;
  int v7 = *(_DWORD *)(v4 - 16);
  *(void *)uint64_t v14 = a2;
  v14[8] = a3;
  *(void *)&v14[12] = 0;
  *(_DWORD *)&v14[20] = 0;
  *(_DWORD *)&v14[24] = v7;
  uint64_t v8 = *(unsigned int *)(v4 + 8);
  if (v8 >= *(_DWORD *)(v4 + 12))
  {
    BOOL v13 = v5 + 32 * v8 > (unint64_t)v14;
    if (v5 > (unint64_t)v14 || !v13) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v9 = (_OWORD *)(v5 + 32 * *(unsigned int *)(a1 + 40));
  __n128 result = *(__n128 *)v14;
  long long v11 = *(_OWORD *)&v14[16];
  *uint64_t v9 = *(_OWORD *)v14;
  v9[1] = v11;
  ++*(_DWORD *)(a1 + 40);
  LODWORD(v9) = *(_DWORD *)(a1 + 24) * *(_DWORD *)(a2 + 16);
  int v12 = *(_DWORD *)(a1 + 20) + a3;
  *(_DWORD *)(a1 + 20) = v12 + 1;
  *(_DWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a2 + 24) = v12;
  return result;
}

void sub_22B1E0A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int32x2_t *a7)
{
  v121[2] = *MEMORY[0x263EF8340];
  *(_WORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v109 = (std::string *)(a1 + 8);
  std::string::push_back((std::string *)(a1 + 8), 123);
  uint64_t v13 = *(unsigned int *)(a4 + 12);
  uint64_t v119 = v121;
  uint64_t v120 = 0x400000000;
  if (v13 >= 5)
  {
    LODWORD(v120) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v13)
  {
    uint64_t v14 = v121;
    uint64_t v15 = v13;
    do
    {
      *v14++ = 0;
      --v15;
    }
    while (v15);
  }
  LODWORD(v120) = v13;
  uint64_t v16 = *(void *)&a7[4] + 32 * a7[5].u32[0];
  if (!*(unsigned char *)(v16 - 16))
  {
    *(unsigned char *)(v16 - 16) = 1;
    *(_DWORD *)(v16 - 20) = a5;
  }
  a7[2] = vadd_s32(a7[2], (int32x2_t)0x100000001);
  uint64_t v105 = (void *)(a6 + 8);
  uint64_t v106 = a2;
  uint64_t v17 = *(unsigned int *)(a6 + 16);
  if (v17 != v13)
  {
    if (v17 <= v13)
    {
      if (*(_DWORD *)(a6 + 20) < v13)
      {
        __dst[0] = 0;
        llvm::SmallVectorBase<unsigned int>::mallocForGrow();
      }
      if (v17 != v13) {
        bzero((void *)(*v105 + 8 * v17), 8 * v13 - 8 * v17);
      }
    }
    else
    {
      uint64_t v18 = 8 * v13 - 8 * v17;
      unint64_t v19 = (uint64_t *)(*v105 + 8 * v17 - 8);
      do
      {
        uint64_t v20 = *v19;
        *unint64_t v19 = 0;
        if (v20) {
          MEMORY[0x230F43600](v20, 0x1000C4052888210);
        }
        --v19;
        v18 += 8;
      }
      while (v18);
    }
    *(_DWORD *)(a6 + 16) = v13;
    a2 = v106;
  }
  if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 8), v12);
      __dst[0] = (void *)llvm::ConstantInt::get();
      __dst[1] = (void *)llvm::ConstantInt::get();
      v119[i] = llvm::DataLayout::getIndexedOffsetInType();
    }
  }
  float v22 = (char *)a1;
  unsigned int v110 = *(_DWORD *)(a3 + 8);
  if (v110)
  {
    unsigned int v23 = 0;
    uint64_t v103 = a4;
    do
    {
      uint64_t v117 = 0;
      int v115 = -1;
      int v116 = 0;
      if (sub_22B1E1ED0(*(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v23), "air.struct_type_info"))
      {
        unint64_t v24 = *(unsigned char **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v23 + 1));
        if (v24 && ((*v24 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v24)) == 0) {
          unint64_t v24 = 0;
        }
        if (v24) {
          BOOL v25 = *(unsigned char *)a1 == 0;
        }
        else {
          BOOL v25 = 1;
        }
        char v26 = !v25;
        *(unsigned char *)a1 = v26;
        v23 += 2;
      }
      LODWORD(__dst[0]) = v23;
      char v27 = sub_22B2437A8(0, a3, (unsigned int *)__dst, (_DWORD *)&v117 + 1);
      if (*(unsigned char *)a1) {
        char v28 = v27;
      }
      else {
        char v28 = 0;
      }
      *(unsigned char *)a1 = v28;
      LODWORD(__dst[0]) = v23 + 1;
      char v29 = sub_22B2437A8(0, a3, (unsigned int *)__dst, &v117);
      if (*(unsigned char *)a1) {
        char v30 = v29;
      }
      else {
        char v30 = 0;
      }
      *(unsigned char *)a1 = v30;
      unsigned int v31 = v23 + 3;
      LODWORD(__dst[0]) = v23 + 2;
      char v32 = sub_22B2437A8(0, a3, (unsigned int *)__dst, &v116);
      if (*(unsigned char *)a1) {
        char v33 = v32;
      }
      else {
        char v33 = 0;
      }
      uint64_t v34 = a3 - 8 * *(unsigned int *)(a3 + 8);
      uint64_t v35 = *(unsigned char **)(v34 + 8 * v31);
      if (v35)
      {
        if (*v35) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = *(llvm::MDString **)(v34 + 8 * v31);
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      if (!v36) {
        char v33 = 0;
      }
      unint64_t v37 = *(llvm::MDString **)(v34 + 8 * (v23 + 4));
      if (v37)
      {
        if (*(unsigned char *)v37) {
          int v38 = 0;
        }
        else {
          int v38 = v37;
        }
      }
      else
      {
        int v38 = 0;
      }
      if (!v38) {
        char v33 = 0;
      }
      *(unsigned char *)a1 = v33;
      llvm::MDString::getString(v36);
      llvm::MDString::getString(v38);
      unint64_t v39 = v120;
      if (v120)
      {
        uint64_t v40 = v119;
        do
        {
          unint64_t v41 = v39 >> 1;
          __int32 v42 = (unsigned int *)&v40[4 * (v39 >> 1)];
          unsigned int v44 = *v42;
          uint64_t v43 = v42 + 1;
          v39 += ~(v39 >> 1);
          if (v44 < HIDWORD(v117)) {
            uint64_t v40 = v43;
          }
          else {
            unint64_t v39 = v41;
          }
        }
        while (v39);
      }
      else
      {
        uint64_t v40 = v119;
      }
      uint64_t v45 = *(void *)(*(void *)(a4 + 16) + 8 * ((unint64_t)(v40 - (unsigned char *)v119) >> 2));
      if (*(unsigned char *)(v45 + 8) == 17) {
        operator new();
      }
      uint64_t v104 = (unsigned int *)(v45 + 8);
      v23 += 5;
      while (v23 < v110)
      {
        std::string::size_type v46 = *(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v23);
        if (sub_22B1E1ED0(v46, "air.render_target")) {
          goto LABEL_199;
        }
        if (!sub_22B1E1ED0(v46, "air.indirect_argument")) {
          break;
        }
        LODWORD(__dst[0]) = v23 + 1;
        if (sub_22B2437A8(0, a3, (unsigned int *)__dst, &v115))
        {
          v115 += a5;
          operator new();
        }
        uint64_t v47 = *(unsigned __int8 **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v23 + 1));
        if (v47)
        {
          unint64_t v48 = *v47;
          if (v48 <= 0x22 && ((0x7FFFFFFF0uLL >> v48) & 1) != 0)
          {
            uint64_t String = llvm::MDString::getString(*(llvm::MDString **)&v47[-8 * *((unsigned int *)v47 + 2) + 8]);
            *(_DWORD *)__c = 0;
            __int16 v113 = 0;
            switch(v51)
            {
              case 10:
                if (*(void *)String != 0x666675622E726961 || *(_WORD *)(String + 8) != 29285) {
                  break;
                }
                goto LABEL_119;
              case 11:
                if (*(void *)String == 0x747865742E726961 && *(void *)(String + 3) == 0x657275747865742ELL)
                {
                  LOBYTE(__dst[0]) = 0;
                  BYTE4(v112) = 0;
                  BOOL v91 = sub_22B243AD8((uint64_t)v47, &v115, __c, __dst, (unsigned char *)&v112 + 4, (BOOL *)&v113 + 1, &v113);
                  if (*(unsigned char *)a1) {
                    BOOL v92 = v91;
                  }
                  else {
                    BOOL v92 = 0;
                  }
                  *(unsigned char *)a1 = v92;
                  v115 += a5;
                  if (HIBYTE(v113)) {
                    sub_22B1E2DC4();
                  }
                  operator new();
                }
                if (*(void *)String == 0x706D61732E726961 && *(void *)(String + 3) == 0x72656C706D61732ELL)
                {
                  char v55 = sub_22B243944((uint64_t)v47, &v115, __c, (BOOL *)&v113 + 1);
                  if (*(unsigned char *)a1) {
                    char v56 = v55;
                  }
                  else {
                    char v56 = 0;
                  }
                  *(unsigned char *)a1 = v56;
                  v115 += a5;
                  if (HIBYTE(v113)) {
                    sub_22B1E2DC4();
                  }
                  operator new();
                }
                break;
              case 18:
                if (*(void *)String != 0x6D6D6F632E726961
                  || *(void *)(String + 8) != 0x666675625F646E61
                  || *(_WORD *)(String + 16) != 29285)
                {
                  break;
                }
                goto LABEL_172;
              case 19:
                if (*(void *)String != 0x69646E692E726961
                  || *(void *)(String + 8) != 0x6675625F74636572
                  || *(void *)(String + 11) != 0x7265666675625F74)
                {
                  break;
                }
LABEL_119:
                unsigned int v61 = *v104;
                if (*v104 == 16)
                {
                  LODWORD(__dst[0]) = 2;
                  sub_22B243890((uint64_t)v47, __dst, &v115, __c);
                  int v62 = LODWORD(__dst[0])++;
                  if (sub_22B1E1ED0(*(llvm::MDString **)&v47[8 * LODWORD(__dst[0]) + -8 * *((unsigned int *)v47 + 2)], "air.arg_type_name"))
                  {
                    LODWORD(__dst[0]) = v62 + 2;
                    uint64_t v63 = llvm::MDString::getString(*(llvm::MDString **)&v47[8 * (v62 + 2)
                                                                           + -8 * *((unsigned int *)v47 + 2)]);
                    BOOL v65 = v64 >= 5 && *(_DWORD *)v63 == 1634890337 && *(unsigned char *)(v63 + 4) == 121;
                    HIBYTE(v113) = v65;
                  }
                  v115 += a5;
                  sub_22B1E2DC4();
                }
                uint64_t v112 = 0;
                __dst[0] = 0;
                char v111 = 0;
                if ((v61 & 0xFE) == 0x12) {
                  unsigned int v61 = *(_DWORD *)(**(void **)(v45 + 16) + 8);
                }
                BOOL v93 = sub_22B243DB4((uint64_t)v47, v61 >> 8, &v115, __c, (unsigned int *)&v112 + 1, &v112, (uint64_t *)__dst, &v113, &v111);
                if (*(unsigned char *)a1) {
                  BOOL v94 = v93;
                }
                else {
                  BOOL v94 = 0;
                }
                *(unsigned char *)a1 = v94;
                v115 += a5;
                operator new();
              case 21:
                if (*(void *)String == 0x69646E692E726961
                  && *(void *)(String + 8) == 0x6E6F635F74636572
                  && *(void *)(String + 13) == 0x746E6174736E6F63)
                {
                  BOOL v68 = sub_22B1E1ED0(*(llvm::MDString **)&v47[-8 * *((unsigned int *)v47 + 2) + 8], "air.indirect_constant");
                  if (v68)
                  {
                    BOOL v101 = v68;
                    unsigned int v69 = *((_DWORD *)v47 + 2);
                    LODWORD(__dst[0]) = 2;
                    if (v69 >= 3)
                    {
                      do
                      {
                        char v70 = sub_22B243890((uint64_t)v47, __dst, &v115, __c);
                        unsigned int v71 = __dst[0];
                        if ((v70 & 1) == 0) {
                          unsigned int v71 = ++LODWORD(__dst[0]);
                        }
                      }
                      while (v71 < v69);
                    }
                    LOBYTE(v68) = v101;
                  }
                  if (*(unsigned char *)a1) {
                    BOOL v72 = v68;
                  }
                  else {
                    BOOL v72 = 0;
                  }
                  *(unsigned char *)a1 = v72;
                  v115 += a5;
                  operator new();
                }
                break;
              case 25:
                int v73 = *(unsigned __int8 *)(String + 24);
                BOOL v75 = *(void *)String == 0x646E65722E726961
                   && *(void *)(String + 8) == 0x6C657069705F7265
                   && *(void *)(String + 16) == 0x746174735F656E69;
                int v76 = 101;
                goto LABEL_155;
              case 26:
                int v73 = *(unsigned __int16 *)(String + 24);
                BOOL v75 = *(void *)String == 0x706D6F632E726961
                   && *(void *)(String + 8) == 0x657069705F657475
                   && *(void *)(String + 16) == 0x6174735F656E696CLL;
                int v76 = 25972;
LABEL_155:
                if (!v75 || v73 != v76) {
                  break;
                }
                goto LABEL_172;
              case 27:
                if (*(void *)String != 0x69646E692E726961
                  || *(void *)(String + 8) != 0x6D6F635F74636572
                  || *(void *)(String + 16) != 0x6675625F646E616DLL
                  || *(void *)(String + 19) != 0x7265666675625F64)
                {
                  break;
                }
LABEL_172:
                if (sub_22B1E1ED0(*(llvm::MDString **)&v47[-8 * *((unsigned int *)v47 + 2) + 8], "air.indirect_command_buffer")|| sub_22B1E1ED0(*(llvm::MDString **)&v47[-8 * *((unsigned int *)v47 + 2) + 8], "air.command_buffer")|| sub_22B1E1ED0(*(llvm::MDString **)&v47[-8 * *((unsigned int *)v47 + 2) + 8], "air.compute_pipeline_state")|| sub_22B1E1ED0(*(llvm::MDString **)&v47[-8 * *((unsigned int *)v47 + 2) + 8], "air.render_pipeline_state"))
                {
                  BOOL v102 = 0;
                  HIBYTE(v113) = 0;
                  *(_DWORD *)__c = 1;
                  unsigned int v82 = *((_DWORD *)v47 + 2);
                  LODWORD(__dst[0]) = 2;
                  if (v82 >= 3)
                  {
                    BOOL v102 = 0;
                    do
                    {
                      char v83 = sub_22B243890((uint64_t)v47, __dst, &v115, __c);
                      unsigned int v84 = __dst[0];
                      if ((v83 & 1) == 0)
                      {
                        unsigned int v85 = LODWORD(__dst[0]) + 1;
                        if (sub_22B1E1ED0(*(llvm::MDString **)&v47[8 * LODWORD(__dst[0]) + -8 * *((unsigned int *)v47 + 2)], "air.arg_type_name"))
                        {
                          uint64_t v86 = llvm::MDString::getString(*(llvm::MDString **)&v47[8 * v85
                                                                                 + -8 * *((unsigned int *)v47 + 2)]);
                          if (v87 >= 5)
                          {
                            BOOL v89 = *(_DWORD *)v86 == 1634890337 && *(unsigned char *)(v86 + 4) == 121;
                            BOOL v102 = v89;
                          }
                          else
                          {
                            BOOL v102 = 0;
                          }
                          unsigned int v85 = v84 + 2;
                        }
                        unsigned int v84 = v85 + 1;
                        LODWORD(__dst[0]) = v85 + 1;
                      }
                    }
                    while (v84 < v82);
                    HIBYTE(v113) = v102;
                    float v22 = (char *)a1;
                  }
                  char v90 = 1;
                }
                else
                {
                  BOOL v102 = 0;
                  char v90 = 0;
                }
                if (!*v22) {
                  char v90 = 0;
                }
                *float v22 = v90;
                v115 += a5;
                if (v102) {
                  sub_22B1E2DC4();
                }
                operator new();
              default:
                break;
            }
LABEL_199:
            v23 += 2;
          }
        }
      }
      a4 = v103;
    }
    while (v23 < v110);
  }
  std::string::push_back(v109, 125);
  if (*(unsigned char *)(a1 + 1))
  {
    uint64_t v96 = *(unsigned __int8 *)(a1 + 31);
    if ((v96 & 0x80u) == 0) {
      uint64_t v97 = v109;
    }
    else {
      uint64_t v97 = *(std::string **)(a1 + 8);
    }
    if ((v96 & 0x80u) != 0) {
      uint64_t v96 = *(void *)(a1 + 16);
    }
    if (v96)
    {
      unsigned __int16 v98 = -1;
      do
      {
        int v99 = v97->__r_.__value_.__s.__data_[0];
        uint64_t v97 = (std::string *)((char *)v97 + 1);
        unsigned __int16 v98 = word_22B26FC30[v99 ^ ((unsigned __int16)(v98 & 0xFF00) >> 8)] ^ (v98 << 8);
        --v96;
      }
      while (v96);
      int v100 = v98 | 0x7FE00000;
    }
    else
    {
      int v100 = 2145452031;
    }
    *(_DWORD *)a2 = v100;
  }
  a7[2] = vadd_s32(a7[2], (int32x2_t)-1);
  if (v119 != (_DWORD *)v121) {
    free(v119);
  }
}

uint64_t sub_22B1E1E44(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = v1 + 32 * v2;
  uint64_t v4 = *(void *)(v3 - 32);
  int v5 = *(unsigned __int8 *)(v3 - 24);
  uint64_t v6 = *(void *)(v3 - 20);
  int v7 = *(_DWORD *)(v3 - 12);
  unsigned int v8 = *(_DWORD *)(v4 + 16);
  *(_DWORD *)(result + 24) /= v8;
  int v9 = v7 - v6 + 1;
  *(_DWORD *)(v4 + 20) = v9;
  uint64_t v10 = (v2 - 1);
  *(_DWORD *)(result + 40) = v10;
  if (v10)
  {
    uint64_t v11 = v1 + 32 * v10;
    if (!*(unsigned char *)(v11 - 16))
    {
      *(void *)(v11 - 20) = v6;
      unsigned int v8 = *(_DWORD *)(v4 + 16);
      int v9 = *(_DWORD *)(v4 + 20);
    }
    unsigned int v12 = v6 + v9 * v8 - 1;
    if (*(_DWORD *)(v11 - 12) > v12) {
      unsigned int v12 = *(_DWORD *)(v11 - 12);
    }
    *(_DWORD *)(v11 - 12) = v12;
  }
  if (v5) {
    int v13 = -2;
  }
  else {
    int v13 = -1;
  }
  *(_DWORD *)(result + 20) += v13;
  return result;
}

BOOL sub_22B1E1ED0(llvm::MDString *a1, const char *a2)
{
  if (*(unsigned char *)a1) {
    return 0;
  }
  uint64_t String = llvm::MDString::getString(a1);
  uint64_t v6 = v5;
  if (a2)
  {
    int v7 = (const void *)String;
    size_t v8 = strlen(a2);
    if (v6 != v8) {
      return 0;
    }
    if (!v8) {
      return 1;
    }
    return memcmp(v7, a2, v8) == 0;
  }
  else
  {
    return v5 == 0;
  }
}

uint64_t sub_22B1E1F54(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 40);
  if (v3 == 1)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    uint64_t v16 = *(void *)(result + 32) + 32 * v3;
    unsigned int v4 = *(_DWORD *)(a2 + 16);
    unsigned int v17 = 1;
    uint64_t v18 = v16;
    do
    {
      uint64_t v20 = *(void *)(v18 - 32);
      v18 -= 32;
      uint64_t v19 = v20;
      if (v4 >= *(_DWORD *)(a2 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      float v21 = (void *)(*(void *)(a2 + 8) + 16 * v4);
      *float v21 = v19;
      v21[1] = v17;
      unsigned int v4 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 16) = v4;
      v17 *= *(_DWORD *)(*(void *)(v16 - 32) + 16);
      uint64_t v16 = v18;
    }
    while (v18 != *(void *)(result + 32) + 32);
  }
  unint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (_OWORD *)(v5 + 16 * v4 - 16);
  if (v4) {
    BOOL v7 = (unint64_t)v6 > v5;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    unint64_t v8 = v5 + 16;
    do
    {
      long long v9 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(v8 - 16) = *v6;
      *v6-- = v9;
      BOOL v10 = v8 >= (unint64_t)v6;
      v8 += 16;
    }
    while (!v10);
  }
  uint64_t v11 = *(void *)(result + 32);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned int *)(result + 40);
  uint64_t v14 = v11 + 32 * v13;
  if (v13 == 1)
  {
    uint64_t v15 = v12;
  }
  else
  {
    uint64_t v22 = 32 * v13 - 32;
    uint64_t v15 = v12;
    while (*(_DWORD *)(v15 + 24) != *(_DWORD *)(result + 16))
    {
      v15 += 32;
      v22 -= 32;
      if (!v22)
      {
        uint64_t v15 = v14;
        break;
      }
    }
  }
  *(_DWORD *)(a2 + 88) = (unint64_t)(v15 - v12) >> 5;
  unsigned int v23 = *(_DWORD *)(a2 + 224);
  if (!*(unsigned char *)(v14 - 16))
  {
    *(unsigned char *)(v14 - 16) = 1;
    *(_DWORD *)(v14 - 20) = v23;
  }
  if (*(_DWORD *)(v14 - 12) > v23) {
    unsigned int v23 = *(_DWORD *)(v14 - 12);
  }
  *(_DWORD *)(v14 - 12) = v23;
  *(_DWORD *)(a2 + 228) = *a3;
  int v24 = *(_DWORD *)(result + 24);
  *(_DWORD *)(a2 + 232) = v24;
  *a3 += v24;
  return result;
}

void *sub_22B1E2118(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void sub_22B1E21C0()
{
  uint64_t v182 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_2683E8540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_2683E8540))
  {
    sub_22B1D7BF0(v2, "float");
    int v3 = 3;
    sub_22B1D7BF0(v4, "float2");
    int v5 = 4;
    sub_22B1D7BF0(v6, "float3");
    int v7 = 5;
    sub_22B1D7BF0(v8, "float4");
    int v9 = 6;
    sub_22B1D7BF0(v10, "packed_float");
    int v11 = 3;
    sub_22B1D7BF0(v12, "packed_float2");
    int v13 = 4;
    sub_22B1D7BF0(v14, "packed_float3");
    int v15 = 5;
    sub_22B1D7BF0(v16, "packed_float4");
    int v17 = 6;
    sub_22B1D7BF0(v18, "half");
    int v19 = 16;
    sub_22B1D7BF0(v20, "half2");
    int v21 = 17;
    sub_22B1D7BF0(v22, "half3");
    int v23 = 18;
    sub_22B1D7BF0(v24, "half4");
    int v25 = 19;
    sub_22B1D7BF0(v26, "packed_half");
    int v27 = 16;
    sub_22B1D7BF0(v28, "packed_half2");
    int v29 = 17;
    sub_22B1D7BF0(v30, "packed_half3");
    int v31 = 18;
    sub_22B1D7BF0(v32, "packed_half4");
    int v33 = 19;
    sub_22B1D7BF0(v34, "int");
    int v35 = 29;
    sub_22B1D7BF0(v36, "int2");
    int v37 = 30;
    sub_22B1D7BF0(v38, "int3");
    int v39 = 31;
    sub_22B1D7BF0(v40, "int4");
    int v41 = 32;
    sub_22B1D7BF0(v42, "packed_int");
    int v43 = 29;
    sub_22B1D7BF0(v44, "packed_int2");
    int v45 = 30;
    sub_22B1D7BF0(v46, "packed_int3");
    int v47 = 31;
    sub_22B1D7BF0(v48, "packed_int4");
    int v49 = 32;
    sub_22B1D7BF0(v50, "uint");
    int v51 = 33;
    sub_22B1D7BF0(v52, "uint2");
    int v53 = 34;
    sub_22B1D7BF0(v54, "uint3");
    int v55 = 35;
    sub_22B1D7BF0(v56, "uint4");
    int v57 = 36;
    sub_22B1D7BF0(v58, "packed_uint");
    int v59 = 33;
    sub_22B1D7BF0(v60, "packed_uint2");
    int v61 = 34;
    sub_22B1D7BF0(v62, "packed_uint3");
    int v63 = 35;
    sub_22B1D7BF0(v64, "packed_uint4");
    int v65 = 36;
    sub_22B1D7BF0(v66, "short");
    int v67 = 37;
    sub_22B1D7BF0(v68, "short2");
    int v69 = 38;
    sub_22B1D7BF0(v70, "short3");
    int v71 = 39;
    sub_22B1D7BF0(v72, "short4");
    int v73 = 40;
    sub_22B1D7BF0(v74, "packed_short");
    int v75 = 37;
    sub_22B1D7BF0(v76, "packed_short2");
    int v77 = 38;
    sub_22B1D7BF0(v78, "packed_short3");
    int v79 = 39;
    sub_22B1D7BF0(v80, "packed_short4");
    int v81 = 40;
    sub_22B1D7BF0(v82, "ushort");
    int v83 = 41;
    sub_22B1D7BF0(v84, "ushort2");
    int v85 = 42;
    sub_22B1D7BF0(v86, "ushort3");
    int v87 = 43;
    sub_22B1D7BF0(v88, "ushort4");
    int v89 = 44;
    sub_22B1D7BF0(v90, "packed_ushort");
    int v91 = 41;
    sub_22B1D7BF0(v92, "packed_ushort2");
    int v93 = 42;
    sub_22B1D7BF0(v94, "packed_ushort3");
    int v95 = 43;
    sub_22B1D7BF0(v96, "packed_ushort4");
    int v97 = 44;
    sub_22B1D7BF0(v98, "char");
    int v99 = 45;
    sub_22B1D7BF0(v100, "char2");
    int v101 = 46;
    sub_22B1D7BF0(v102, "char3");
    int v103 = 47;
    sub_22B1D7BF0(v104, "char4");
    int v105 = 48;
    sub_22B1D7BF0(v106, "packed_char");
    int v107 = 45;
    sub_22B1D7BF0(v108, "packed_char2");
    int v109 = 46;
    sub_22B1D7BF0(v110, "packed_char3");
    int v111 = 47;
    sub_22B1D7BF0(v112, "packed_char4");
    int v113 = 48;
    sub_22B1D7BF0(v114, "uchar");
    int v115 = 49;
    sub_22B1D7BF0(v116, "uchar2");
    int v117 = 50;
    sub_22B1D7BF0(v118, "uchar3");
    int v119 = 51;
    sub_22B1D7BF0(v120, "uchar4");
    int v121 = 52;
    sub_22B1D7BF0(v122, "packed_uchar");
    int v123 = 49;
    sub_22B1D7BF0(v124, "packed_uchar2");
    int v125 = 50;
    sub_22B1D7BF0(v126, "packed_uchar3");
    int v127 = 51;
    sub_22B1D7BF0(v128, "packed_uchar4");
    int v129 = 52;
    sub_22B1D7BF0(v130, "BOOL");
    int v131 = 53;
    sub_22B1D7BF0(v132, "BOOL2");
    int v133 = 54;
    sub_22B1D7BF0(v134, "BOOL3");
    int v135 = 55;
    sub_22B1D7BF0(v136, "BOOL4");
    int v137 = 56;
    sub_22B1D7BF0(v138, "packed_BOOL");
    int v139 = 53;
    sub_22B1D7BF0(v140, "packed_BOOL2");
    int v141 = 54;
    sub_22B1D7BF0(v142, "packed_BOOL3");
    int v143 = 55;
    sub_22B1D7BF0(v144, "packedBOOL");
    int v145 = 56;
    sub_22B1D7BF0(v146, "float2x2");
    int v147 = 7;
    sub_22B1D7BF0(v148, "float2x3");
    int v149 = 8;
    sub_22B1D7BF0(v150, "float2x4");
    int v151 = 9;
    sub_22B1D7BF0(v152, "float3x2");
    int v153 = 10;
    sub_22B1D7BF0(v154, "float3x3");
    int v155 = 11;
    sub_22B1D7BF0(v156, "float3x4");
    int v157 = 12;
    sub_22B1D7BF0(v158, "float4x2");
    int v159 = 13;
    sub_22B1D7BF0(v160, "float4x3");
    int v161 = 14;
    sub_22B1D7BF0(v162, "float4x4");
    int v163 = 15;
    sub_22B1D7BF0(v164, "half2x2");
    int v165 = 20;
    sub_22B1D7BF0(v166, "half2x3");
    int v167 = 21;
    sub_22B1D7BF0(v168, "half2x4");
    int v169 = 22;
    sub_22B1D7BF0(v170, "half3x2");
    int v171 = 23;
    sub_22B1D7BF0(v172, "half3x3");
    int v173 = 24;
    sub_22B1D7BF0(v174, "half3x4");
    int v175 = 25;
    sub_22B1D7BF0(v176, "half4x2");
    int v177 = 26;
    sub_22B1D7BF0(v178, "half4x3");
    int v179 = 27;
    sub_22B1D7BF0(v180, "half4x4");
    uint64_t v0 = 0;
    int v181 = 28;
    qword_2683E8538 = 0;
    qword_2683E8530 = 0;
    unk_2683E8528 = &qword_2683E8530;
    do
    {
      sub_22B1E2EB8((uint64_t)&unk_2683E8528, &qword_2683E8530, &v2[v0], (uint64_t)&v2[v0]);
      v0 += 4;
    }
    while (v0 != 360);
    uint64_t v1 = 360;
    do
    {
      if (*((char *)&v2[v1 - 1] - 1) < 0) {
        operator delete((void *)v2[v1 - 4]);
      }
      v1 -= 4;
    }
    while (v1 * 8);
    __cxa_atexit((void (*)(void *))sub_22B1E30B4, &unk_2683E8528, &dword_22B1D2000);
    __cxa_guard_release((__guard *)&unk_2683E8540);
  }
}

void *sub_22B1E2AB8(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_22B1DF088(v3 + 4, a2);
    int v7 = v3 + 1;
    if (!v6)
    {
      int v7 = v3;
      int v5 = v3;
    }
    int v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_22B1DF088(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

void sub_22B1E2B34()
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E8560, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E8560))
  {
    sub_22B1D7BF0(v2, "r8unorm");
    int v3 = 62;
    sub_22B1D7BF0(v4, "r8snorm");
    int v5 = 63;
    sub_22B1D7BF0(v6, "r16unorm");
    int v7 = 64;
    sub_22B1D7BF0(v8, "r16snorm");
    int v9 = 65;
    sub_22B1D7BF0(v10, "rg8unorm");
    int v11 = 66;
    sub_22B1D7BF0(v12, "rg8snorm");
    int v13 = 67;
    sub_22B1D7BF0(v14, "rg16unorm");
    int v15 = 68;
    sub_22B1D7BF0(v16, "rg16snorm");
    int v17 = 69;
    sub_22B1D7BF0(v18, "rgba8unorm");
    int v19 = 70;
    sub_22B1D7BF0(v20, "srgba8unorm");
    int v21 = 71;
    sub_22B1D7BF0(v22, "rgba8snorm");
    int v23 = 72;
    sub_22B1D7BF0(v24, "rgba16unorm");
    int v25 = 73;
    sub_22B1D7BF0(v26, "rgba16snorm");
    int v27 = 74;
    sub_22B1D7BF0(v28, "rgb10a2");
    int v29 = 75;
    sub_22B1D7BF0(v30, "rg11b10f");
    int v31 = 76;
    sub_22B1D7BF0(v32, "rgb9e5");
    uint64_t v0 = 0;
    int v33 = 77;
    qword_2683E8558 = 0;
    qword_2683E8550 = 0;
    qword_2683E8548 = (uint64_t)&qword_2683E8550;
    do
    {
      sub_22B1E2EB8((uint64_t)&qword_2683E8548, &qword_2683E8550, &v2[v0], (uint64_t)&v2[v0]);
      v0 += 4;
    }
    while (v0 != 64);
    uint64_t v1 = 64;
    do
    {
      if (*((char *)&v2[v1 - 1] - 1) < 0) {
        operator delete((void *)v2[v1 - 4]);
      }
      v1 -= 4;
    }
    while (v1 * 8);
    __cxa_atexit((void (*)(void *))sub_22B1E30B4, &qword_2683E8548, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E8560);
  }
}

void sub_22B1E2DC4()
{
}

uint64_t sub_22B1E2EB8(uint64_t result, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = result;
  size_t v8 = (void *)(result + 8);
  if ((void *)(result + 8) != a2)
  {
    __n128 result = sub_22B1DF088(a3, a2 + 4);
    if (!result)
    {
      __n128 result = sub_22B1DF088(a2 + 4, a3);
      if (!result)
      {
        uint64_t v22 = a2;
        int v23 = a2;
        uint64_t v14 = &v22;
        if (a2) {
          return result;
        }
        goto LABEL_31;
      }
      uint64_t v12 = a2[1];
      if (v12)
      {
        int v13 = (void *)a2[1];
        do
        {
          uint64_t v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        int v17 = a2;
        do
        {
          uint64_t v14 = (void *)v17[2];
          BOOL v16 = *v14 == (void)v17;
          int v17 = v14;
        }
        while (!v16);
      }
      if (v14 == v8 || (__n128 result = sub_22B1DF088(a3, v14 + 4), result))
      {
        if (v12)
        {
          int v23 = v14;
        }
        else
        {
          int v23 = a2;
          uint64_t v14 = a2 + 1;
        }
LABEL_30:
        if (*v14) {
          return result;
        }
        goto LABEL_31;
      }
LABEL_29:
      __n128 result = (uint64_t)sub_22B1E32D4(v7, &v23, a3);
      uint64_t v14 = (void *)result;
      goto LABEL_30;
    }
  }
  uint64_t v9 = *a2;
  if (*(void **)v7 != a2)
  {
    if (v9)
    {
      BOOL v10 = (void *)*a2;
      do
      {
        int v11 = v10;
        BOOL v10 = (void *)v10[1];
      }
      while (v10);
    }
    else
    {
      int v15 = a2;
      do
      {
        int v11 = (void *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        int v15 = v11;
      }
      while (v16);
    }
    __n128 result = sub_22B1DF088(v11 + 4, a3);
    if (result) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
  int v11 = a2;
LABEL_17:
  if (v9)
  {
    int v23 = v11;
    uint64_t v14 = v11 + 1;
    goto LABEL_30;
  }
  int v23 = a2;
  uint64_t v14 = a2;
LABEL_31:
  uint64_t v18 = (char *)operator new(0x40uLL);
  int v19 = v18 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_22B1DC004(v19, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)int v19 = *(_OWORD *)a4;
    *((void *)v18 + 6) = *(void *)(a4 + 16);
  }
  *((_DWORD *)v18 + 14) = *(_DWORD *)(a4 + 24);
  uint64_t v20 = v23;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v20;
  *uint64_t v14 = v18;
  uint64_t v21 = **(void **)v7;
  if (v21)
  {
    *(void *)uint64_t v7 = v21;
    uint64_t v18 = (char *)*v14;
  }
  __n128 result = (uint64_t)sub_22B1E313C(*(uint64_t **)(v7 + 8), (uint64_t *)v18);
  ++*(void *)(v7 + 16);
  return result;
}

uint64_t sub_22B1E30B4(uint64_t a1)
{
  return a1;
}

void sub_22B1E30E0(char *a1)
{
  if (a1)
  {
    sub_22B1E30E0(*(void *)a1);
    sub_22B1E30E0(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t *sub_22B1E313C(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      unsigned int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            BOOL v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *int v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *sub_22B1E32D4(uint64_t a1, void *a2, void *a3)
{
  int v5 = (void *)(a1 + 8);
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        int v8 = v4 + 4;
        if (!sub_22B1DF088(a3, v4 + 4)) {
          break;
        }
        unsigned int v4 = (void *)*v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_22B1DF088(v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      unsigned int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

char **sub_22B1E3368(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    int v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        MEMORY[0x230F43600](v6, 0x1000C4052888210);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_22B1E33E4()
{
}

int *sub_22B1E33F4(int *a1, unint64_t a2, unint64_t *a3, char *a4)
{
  *a4 = 1;
  unint64_t v6 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64;
  if (v6 < a2)
  {
    char v9 = 1;
    while (1)
    {
      uint64_t v10 = *(void *)v6;
      if (*(void *)v6 && *(unsigned char *)(*(void *)v6 + 16) == 16)
      {
        uint64_t v13 = (llvm::APInt *)(v10 + 24);
        unsigned int v14 = *(_DWORD *)(v10 + 32);
        BOOL v15 = v14 > 0x40 ? llvm::APInt::countLeadingZerosSlowCase(v13) == v14 : *(void *)v13 == 0;
        BOOL v12 = v15;
      }
      else
      {
        BOOL v12 = 0;
      }
      char v9 = v9 && v12;
      *a4 = v9;
      int v16 = *a1;
      if ((*a1 - 3) >= 0xFFFFFFFE) {
        break;
      }
      if (!v16 || v16 == 3)
      {
        int v17 = (int **)(a1 + 2);
LABEL_24:
        a1 = *v17;
        goto LABEL_25;
      }
      if ((v16 - 5) >= 2) {
        goto LABEL_28;
      }
LABEL_25:
      v6 += 32;
      if (v6 >= a2) {
        goto LABEL_28;
      }
    }
    uint64_t v18 = (unsigned int *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u) {
      uint64_t v18 = *(unsigned int **)v18;
    }
    int v17 = (int **)(*((void *)a1 + 1) + 8 * *v18);
    goto LABEL_24;
  }
LABEL_28:
  *a3 = v6;
  return a1;
}

_DWORD *sub_22B1E3518(_DWORD *a1, llvm::Constant *this)
{
  uint64_t AggregateElement = llvm::Constant::getAggregateElement(this);
  uint64_t v5 = llvm::Constant::getAggregateElement(this);
  unint64_t v6 = (void *)(AggregateElement + 24);
  if (*(_DWORD *)(AggregateElement + 32) >= 0x41u) {
    unint64_t v6 = (void *)*v6;
  }
  *a1 = *v6;
  uint64_t v7 = (void *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u) {
    uint64_t v7 = (void *)*v7;
  }
  a1[1] = *v7;
  return a1;
}

uint64_t sub_22B1E359C(uint64_t a1, llvm::Type **a2)
{
  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(a2[8], v3);
  llvm::ConstantInt::get();
  return llvm::ConstantVector::get();
}

uint64_t sub_22B1E3640(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  uint64_t v7 = llvm::ConstantInt::get();
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = v9 + 16 * v8;
    do
    {
      uint64_t v11 = *(llvm::Type ***)(a3
                            + 32
                            - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                            + 32 * *(unsigned int *)(*(void *)v9 + 24));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      __int16 v19 = 257;
      uint64_t v13 = sub_22B1E375C((uint64_t)a2, v11, Int32Ty, (uint64_t)v18);
      llvm::Type::getInt32Ty(a2[8], v14);
      uint64_t v15 = llvm::ConstantInt::get();
      __int16 v19 = 257;
      uint64_t v16 = sub_22B1D7468((uint64_t)a2, v15, v13, (uint64_t)v18);
      __int16 v19 = 257;
      uint64_t v7 = sub_22B1D6A70((uint64_t)a2, v7, v16, (uint64_t)v18);
      v9 += 16;
    }
    while (v9 != v10);
  }
  return v7;
}

uint64_t sub_22B1E375C(uint64_t a1, llvm::Type **a2, llvm::Type *a3, uint64_t a4)
{
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  unsigned int v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9) {
      return (uint64_t)a2;
    }
    uint64_t v10 = 38;
  }
  else
  {
    uint64_t v10 = 39;
  }
  return sub_22B1D7384(a1, v10, (uint64_t)a2, (uint64_t)a3, a4);
}

unint64_t sub_22B1E37FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v4 = v2 + 32;
  uint64_t v3 = v5;
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5) {
    BOOL v7 = v6 == 16;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_8;
  }
  unsigned int v9 = (llvm::APInt *)(v3 + 24);
  unsigned int v10 = *(_DWORD *)(v3 + 32);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v9) != v10) {
      goto LABEL_8;
    }
  }
  else if (*(void *)v9)
  {
LABEL_8:
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    return v12 | v11;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 16);
  if (v13)
  {
    LODWORD(v11) = 0;
    int v14 = 0;
    uint64_t v15 = 16 * v13;
    uint64_t v16 = (_DWORD *)(*(void *)(a1 + 8) + 8);
    do
    {
      uint64_t v17 = *((void *)v16 - 1);
      uint64_t v18 = *(void *)(v4 + 32 * *(unsigned int *)(v17 + 24));
      if (v18) {
        BOOL v19 = *(unsigned char *)(v18 + 16) == 16;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        uint64_t v20 = (void *)(v18 + 24);
        if (*(_DWORD *)(v18 + 32) >= 0x41u) {
          uint64_t v20 = (void *)*v20;
        }
        LODWORD(v11) = v11 + *v16 * *(_DWORD *)v20;
      }
      else
      {
        v14 += (*(_DWORD *)(v17 + 16) - 1) * *v16;
      }
      v16 += 4;
      v15 -= 16;
    }
    while (v15);
  }
  else
  {
    int v14 = 0;
    LODWORD(v11) = 0;
  }
  unint64_t v12 = v11 & 0xFFFFFF00 | ((unint64_t)(v11 + v14) << 32);
  uint64_t v11 = v11;
  return v12 | v11;
}

uint64_t sub_22B1E391C(uint64_t a1, llvm::Type **a2, void *a3)
{
  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  uint64_t v7 = llvm::ConstantInt::get();
  uint64_t v8 = *(int *)(a1 + 88);
  if (v8 != *(_DWORD *)(a1 + 16))
  {
    uint64_t v9 = *(void *)(a1 + 8) + 16 * v8;
    do
    {
      unsigned int v10 = *(llvm::Type ***)(*a3 + 8 * *(unsigned int *)(*(void *)v9 + 24));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      __int16 v18 = 257;
      uint64_t v12 = sub_22B1E375C((uint64_t)a2, v10, Int32Ty, (uint64_t)v17);
      llvm::Type::getInt32Ty(a2[8], v13);
      uint64_t v14 = llvm::ConstantInt::get();
      __int16 v18 = 257;
      uint64_t v15 = sub_22B1D7468((uint64_t)a2, v12, v14, (uint64_t)v17);
      __int16 v18 = 257;
      uint64_t v7 = sub_22B1D6A70((uint64_t)a2, v7, v15, (uint64_t)v17);
      v9 += 16;
    }
    while (v9 != *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16));
  }
  return v7;
}

uint64_t sub_22B1E3A38(void *a1, uint64_t a2, llvm::Type **a3, void *a4)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    sub_22B1E0358((uint64_t)a1, a2 + 96);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 184);
  if (v8)
  {
    uint64_t v9 = *(unsigned int **)(a2 + 176);
    unsigned int v10 = &v9[2 * v8];
    do
    {
      uint64_t v11 = *v9;
      uint64_t v12 = v9[1];
      v9 += 2;
      *(void *)(*a1 + 8 * v12) = *(void *)(*a4 + 8 * v11);
    }
    while (v9 != v10);
  }
  uint64_t result = sub_22B1E391C(a2, a3, a4);
  *(void *)(*a1 + 8 * *((unsigned int *)a1 + 2) - 8) = result;
  return result;
}

uint64_t sub_22B1E3AE0(void *a1, uint64_t a2, llvm::Type *this)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, (llvm::LLVMContext *)a2);
  uint64_t v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*(unsigned int *)(a2 + 1612));
  sub_22B1D6788((uint64_t)a1, v7);
  if (*(unsigned char *)(a2 + 1646))
  {
    uint64_t v9 = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, v8);
    uint64_t v10 = llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(a2 + 1612));
    sub_22B1D6788((uint64_t)a1, v10);
  }
  uint64_t v11 = llvm::Type::getInt64Ty(this, v8);
  return sub_22B1D6788((uint64_t)a1, v11);
}

uint64_t sub_22B1E3B84(void *a1, uint64_t a2, llvm::Type *this)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, (llvm::LLVMContext *)a2);
  uint64_t v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*(unsigned int *)(a2 + 1608));
  sub_22B1D6788((uint64_t)a1, v7);
  if (*(unsigned char *)(a2 + 1645))
  {
    uint64_t v9 = (llvm::ArrayType *)llvm::Type::getInt64Ty(this, v8);
    uint64_t v10 = llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(a2 + 1608));
    sub_22B1D6788((uint64_t)a1, v10);
  }
  Int32Ty = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, v8);
  uint64_t v12 = llvm::ArrayType::get(Int32Ty, (llvm::Type *)*(unsigned int *)(a2 + 1680));
  sub_22B1D6788((uint64_t)a1, v12);
  uint64_t v14 = llvm::Type::getInt64Ty(this, v13);
  return sub_22B1D6788((uint64_t)a1, v14);
}

void *sub_22B1E3C44(void *result, uint64_t a2, void *a3)
{
  *uint64_t result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    uint64_t result = (void *)sub_22B1E0358((uint64_t)result, a2 + 96);
  }
  uint64_t v5 = *(unsigned int *)(a2 + 184);
  if (v5)
  {
    int v6 = *(unsigned int **)(a2 + 176);
    uint64_t v7 = &v6[2 * v5];
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v6[1];
      v6 += 2;
      *(void *)(*result + 8 * v9) = *(void *)(*a3 + 8 * v8);
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t GLCompilerCreate(void *__src, size_t __len, uint64_t a3)
{
  uint64_t v4 = sub_22B1E2118(&__dst, __src, __len);
  uint64_t v5 = sub_22B1E3D2C((uint64_t)v4, a3, 0);
  if (v8 < 0) {
    operator delete(__dst);
  }
  return v5;
}

uint64_t sub_22B1E3D2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v365[20] = *MEMORY[0x263EF8340];
  if (LLVMAGXRuntimeMajorVersion() == 1)
  {
    if (!MGGetBoolAnswer()) {
      goto LABEL_70;
    }
    uint64_t v5 = sub_22B1D33D4();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v364[0].st_dev = 136315138;
      *(void *)&v364[0].st_mode = "load";
      _os_log_debug_impl(&dword_22B1D2000, v5, OS_LOG_TYPE_DEBUG, "%s(){\n", (uint8_t *)v364, 0xCu);
    }
    sub_22B1D7BF0(&__p, "/System/Library/PrivateFrameworks/AGXCompilerCore-S2A8.framework/EnvVars.txt");
    uint64_t v6 = MEMORY[0x263F8C308] + 24;
    uint64_t v7 = MEMORY[0x263F8C308] + 64;
    v365[0] = MEMORY[0x263F8C308] + 64;
    uint64_t v8 = *(void *)(MEMORY[0x263F8C2A8] + 16);
    *(void *)&v364[0].st_dev = *(void *)(MEMORY[0x263F8C2A8] + 8);
    *(void *)((char *)&v364[0].st_dev + *(void *)(*(void *)&v364[0].st_dev - 24)) = v8;
    v364[0].__darwin_ino64_t st_ino = 0;
    uint64_t v9 = (std::ios_base *)((char *)v364 + *(void *)(*(void *)&v364[0].st_dev - 24));
    std::ios_base::init(v9, &v364[0].st_uid);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    *(void *)&v364[0].st_dev = v6;
    v365[0] = v7;
    MEMORY[0x230F43450](&v364[0].st_uid);
    if (!std::filebuf::open()) {
      std::ios_base::clear((std::ios_base *)((char *)v364 + *(void *)(*(void *)&v364[0].st_dev - 24)), *(_DWORD *)((char *)&v364[0].st_atimespec.tv_sec + *(void *)(*(void *)&v364[0].st_dev - 24)) | 4);
    }
    int v10 = *(_DWORD *)((unsigned char *)&v364[0].st_atimespec.tv_sec + *(void *)(*(void *)&v364[0].st_dev - 24)) & 5;
    uint64_t v11 = sub_22B1D33D4();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      uint64_t v13 = (void *)MEMORY[0x263F8C2A8];
      if (v12)
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_debug_impl(&dword_22B1D2000, v11, OS_LOG_TYPE_DEBUG, "}\n", (uint8_t *)&buf, 2u);
      }
      goto LABEL_68;
    }
    if (v12)
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_debug_impl(&dword_22B1D2000, v11, OS_LOG_TYPE_DEBUG, "Reading environment variables from '%s'", (uint8_t *)&buf, 0xCu);
    }
    sub_22B1D318C();
    sub_22B1D3274();
    uint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
    memset(&__str, 0, sizeof(__str));
LABEL_13:
    std::ios_base::getloc((const std::ios_base *)((char *)v364 + *(void *)(*(void *)&v364[0].st_dev - 24)));
    uint64_t v15 = std::locale::use_facet((const std::locale *)&buf, v14);
    unsigned __int8 v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale((std::locale *)&buf);
    MEMORY[0x230F43470](&buf, v364, 1);
    if (!buf.__r_.__value_.__s.__data_[0]) {
      goto LABEL_30;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      *__str.__r_.__value_.__l.__data_ = 0;
      __str.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
    }
    uint64_t v17 = 0;
    while (1)
    {
      __int16 v18 = *(void **)((char *)&v364[0].st_atimespec.tv_nsec + *(void *)(*(void *)&v364[0].st_dev - 24));
      BOOL v19 = (unsigned char *)v18[3];
      if (v19 == (unsigned char *)v18[4])
      {
        LODWORD(v18) = (*(uint64_t (**)(void *))(*v18 + 80))(v18);
        if (v18 == -1)
        {
          if (v17) {
            int v20 = 2;
          }
          else {
            int v20 = 6;
          }
LABEL_29:
          std::ios_base::clear((std::ios_base *)((char *)v364 + *(void *)(*(void *)&v364[0].st_dev - 24)), *(_DWORD *)((char *)&v364[0].st_atimespec.tv_sec + *(void *)(*(void *)&v364[0].st_dev - 24)) | v20);
LABEL_30:
          if ((*((unsigned char *)&v364[0].st_atimespec.tv_sec + *(void *)(*(void *)&v364[0].st_dev - 24)) & 5) == 0)
          {
            std::string::size_type v21 = std::string::find(&__str, 61, 0);
            if (v21 == -1)
            {
              int v29 = sub_22B1D33D4();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_debug_impl(&dword_22B1D2000, v29, OS_LOG_TYPE_DEBUG, "Skipped line with no '=' character in EnvVars.txt", (uint8_t *)&buf, 2u);
              }
            }
            else
            {
              std::string::size_type v22 = v21;
              std::string::basic_string(&v357, &__str, 0, v21, (std::allocator<char> *)&buf);
              std::string::basic_string(&v356, &__str, v22 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&buf);
              sub_22B1E7138(&v357);
              sub_22B1E7138(&v356);
              std::string::size_type size = HIBYTE(v357.__r_.__value_.__r.__words[2]);
              if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v357.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                uint64_t v24 = qword_2683E84D0;
                uint64_t v25 = qword_2683E84D8 - qword_2683E84D0;
                if (qword_2683E84D8 == qword_2683E84D0)
                {
                  char v28 = (const char **)qword_2683E84D0;
                }
                else
                {
                  if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    char v26 = &v357;
                  }
                  else {
                    char v26 = (std::string *)v357.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v27 = 8 * (v25 >> 3);
                  char v28 = (const char **)qword_2683E84D0;
                  while (strcmp(*v28, (const char *)v26))
                  {
                    ++v28;
                    v27 -= 8;
                    if (!v27) {
                      goto LABEL_55;
                    }
                  }
                }
                if (v28 == (const char **)(v24 + (v25 & 0xFFFFFFFFFFFFFFF8)))
                {
LABEL_55:
                  int v41 = sub_22B1D33D4();
                  BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG);
                  uint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
                  if (v42)
                  {
                    int v43 = &v357;
                    if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      int v43 = (std::string *)v357.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
                    int v31 = v41;
                    char v32 = "Read unknown variable from EnvVars.txt: %s";
                    uint32_t v33 = 12;
                    goto LABEL_63;
                  }
                }
                else
                {
                  uint64_t v34 = sub_22B1E7020(&v357, (uint64_t)&v357);
                  std::string::operator=((std::string *)(v34 + 7), &v356);
                  int v35 = sub_22B1D33D4();
                  BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG);
                  uint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
                  if (v36)
                  {
                    std::string::size_type v37 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
                    int v38 = &v357;
                    if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    {
                      std::string::size_type v37 = v357.__r_.__value_.__l.__size_;
                      int v38 = (std::string *)v357.__r_.__value_.__r.__words[0];
                    }
                    std::string::size_type v39 = HIBYTE(v356.__r_.__value_.__r.__words[2]);
                    uint64_t v40 = &v356;
                    if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    {
                      std::string::size_type v39 = v356.__r_.__value_.__l.__size_;
                      uint64_t v40 = (std::string *)v356.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
                    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
                    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v37;
                    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                    v361 = v40;
                    __int16 v362 = 2048;
                    std::string::size_type v363 = v39;
                    int v31 = v35;
                    char v32 = "%s[%lu] = %s[%lu]\n";
                    uint32_t v33 = 42;
LABEL_63:
                    _os_log_debug_impl(&dword_22B1D2000, v31, OS_LOG_TYPE_DEBUG, v32, (uint8_t *)&buf, v33);
                  }
                }
              }
              else
              {
                char v30 = sub_22B1D33D4();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                  int v31 = v30;
                  char v32 = "Skipped line with empty variable name in EnvVars.txt";
                  uint32_t v33 = 2;
                  goto LABEL_63;
                }
              }
              if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v356.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v357.__r_.__value_.__l.__data_);
              }
            }
            goto LABEL_13;
          }
          unsigned int v44 = sub_22B1D33D4();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_debug_impl(&dword_22B1D2000, v44, OS_LOG_TYPE_DEBUG, "}\n", (uint8_t *)&buf, 2u);
          }
          uint64_t v13 = (void *)MEMORY[0x263F8C2A8];
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
LABEL_68:
          *(void *)&v364[0].st_dev = *v13;
          *(void *)((char *)&v364[0].st_dev + *(void *)(*(void *)&v364[0].st_dev - 24)) = v13[3];
          MEMORY[0x230F43460](&v364[0].st_uid);
          std::istream::~istream();
          MEMORY[0x230F43590](v365);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_70:
          uint64_t v45 = *(unsigned __int8 *)(a1 + 23);
          if ((v45 & 0x80u) != 0) {
            uint64_t v45 = *(void *)(a1 + 8);
          }
          if (v45 && MGGetBoolAnswer())
          {
            uint64_t v46 = *(unsigned __int8 *)(a1 + 23);
            if ((v46 & 0x80u) != 0) {
              uint64_t v46 = *(void *)(a1 + 8);
            }
            if (v46)
            {
              sub_22B1D3274();
              int v47 = sub_22B1D33D4();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
              {
                v364[0].st_dev = 136315138;
                *(void *)&v364[0].st_mode = "deserialize";
                _os_log_debug_impl(&dword_22B1D2000, v47, OS_LOG_TYPE_DEBUG, "%s(){\n", (uint8_t *)v364, 0xCu);
              }
              std::string::size_type v48 = 0;
              do
              {
                std::string::size_type v49 = *(unsigned __int8 *)(a1 + 23);
                if ((v49 & 0x80u) != 0) {
                  std::string::size_type v49 = *(void *)(a1 + 8);
                }
                if (v48 >= v49) {
                  break;
                }
                std::string::size_type v50 = std::string::find((const std::string *)a1, 10, v48);
                if (v50 == -1) {
                  break;
                }
                std::string::size_type v51 = v50;
                std::string::basic_string(&buf, (const std::string *)a1, v48, v50 - v48, (std::allocator<char> *)v364);
                std::string::size_type v48 = v51 + 1;
                std::string::size_type v52 = std::string::find((const std::string *)a1, 10, v51 + 1);
                std::string::size_type v53 = v52;
                if (v52 != -1)
                {
                  std::string::basic_string(&__p, (const std::string *)a1, v48, v52 - v48, (std::allocator<char> *)v364);
                  uint64_t v54 = sub_22B1E7020(&buf, (uint64_t)&buf);
                  std::string::operator=((std::string *)(v54 + 7), &__p);
                  int v55 = sub_22B1D33D4();
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                  {
                    std::string::size_type v56 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      p_std::string buf = &buf;
                    }
                    else {
                      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                    }
                    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v56 = buf.__r_.__value_.__l.__size_;
                    }
                    std::string::size_type v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int v59 = &__p;
                    }
                    else {
                      int v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v58 = __p.__r_.__value_.__l.__size_;
                    }
                    v364[0].st_dev = 136315906;
                    *(void *)&v364[0].st_mode = p_buf;
                    WORD2(v364[0].st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&v364[0].st_ino + 6) = v56;
                    HIWORD(v364[0].st_gid) = 2080;
                    *(void *)&v364[0].st_rdev = v59;
                    LOWORD(v364[0].st_atimespec.tv_sec) = 2048;
                    *(__darwin_time_t *)((char *)&v364[0].st_atimespec.tv_sec + 2) = v58;
                    _os_log_debug_impl(&dword_22B1D2000, v55, OS_LOG_TYPE_DEBUG, "\t%s[%lu] = %s[%lu]\n", (uint8_t *)v364, 0x2Au);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  std::string::size_type v48 = v53 + 1;
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
              }
              while (v53 != -1);
              std::string v60 = sub_22B1D33D4();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(v364[0].st_dev) = 0;
                _os_log_debug_impl(&dword_22B1D2000, v60, OS_LOG_TYPE_DEBUG, "}\n", (uint8_t *)v364, 2u);
              }
            }
          }
          if (MGGetBoolAnswer()) {
            sub_22B1DEEE4("USE_MONOLITHIC_COMPILER");
          }
          qword_2683E92E8 = 0;
          uint64_t v61 = MGGetBoolAnswer();
          if (v61)
          {
            uint64_t v61 = (uint64_t)sub_22B1DEEE4("AGC_ENABLE_STATUS_FILE");
            if (v61)
            {
              if (*(unsigned char *)v61 != 48)
              {
                uint64_t v61 = atoi((const char *)v61);
                if (v61)
                {
                  sub_22B1E6EF8();
                  if (byte_2683E8587 < 0)
                  {
                    *(unsigned char *)qword_2683E8570 = 0;
                    qword_2683E8578 = 0;
                  }
                  else
                  {
                    LOBYTE(qword_2683E8570) = 0;
                    byte_2683E8587 = 0;
                  }
                  if (!MGGetBoolAnswer()
                    || (BOOL v68 = (const char *)sub_22B1DEEE4("AGC_ENABLE_STATUS_FILE_STDERR")) == 0
                    || *v68 == 48
                    || !atoi(v68))
                  {
                    memset(v364, 0, 24);
                    int v69 = (const std::string::value_type *)sub_22B1DEEE4("AGC_STATUS_LOG_DIRECTORY");
                    if (v69 && (char v70 = v69, (v71 = (const char *)sub_22B1DEEE4("USE_MONOLITHIC_COMPILER")) != 0))
                    {
                      BOOL v72 = "/private/var/mobile/Library/Logs/";
                      if (*v71 != 48 && atoi(v71)) {
                        BOOL v72 = v70;
                      }
                    }
                    else
                    {
                      BOOL v72 = "/private/var/mobile/Library/Logs/";
                    }
                    std::string::append((std::string *)v364, v72);
                    __darwin_ino64_t st_gid_high = HIBYTE(v364[0].st_gid);
                    if ((v364[0].st_gid & 0x80000000) == 0) {
                      uint64_t v74 = v364;
                    }
                    else {
                      uint64_t v74 = *(stat **)&v364[0].st_dev;
                    }
                    if ((v364[0].st_gid & 0x80000000) != 0) {
                      __darwin_ino64_t st_gid_high = v364[0].st_ino;
                    }
                    if (*((unsigned char *)v74 + st_gid_high - 1) != 47) {
                      std::string::push_back((std::string *)v364, 47);
                    }
                    if (a3 >= 2) {
                      int v75 = "Metal";
                    }
                    else {
                      int v75 = "OpenGL";
                    }
                    std::string::append((std::string *)v364, v75);
                    if ((v364[0].st_gid & 0x80000000) == 0) {
                      int v76 = (const std::string::value_type *)v364;
                    }
                    else {
                      int v76 = *(const std::string::value_type **)&v364[0].st_dev;
                    }
                    if ((v364[0].st_gid & 0x80000000) == 0) {
                      __darwin_ino64_t st_ino = HIBYTE(v364[0].st_gid);
                    }
                    else {
                      __darwin_ino64_t st_ino = v364[0].st_ino;
                    }
                    std::string::append((std::string *)&qword_2683E8570, v76, st_ino);
                    if (SHIBYTE(v364[0].st_gid) < 0) {
                      operator delete(*(void **)&v364[0].st_dev);
                    }
                    if (byte_2683E8587 >= 0) {
                      uint64_t v78 = (const char *)&qword_2683E8570;
                    }
                    else {
                      uint64_t v78 = (const char *)qword_2683E8570;
                    }
                    if (stat(v78, v364))
                    {
                      if (byte_2683E8587 >= 0) {
                        int v79 = (const char *)&qword_2683E8570;
                      }
                      else {
                        int v79 = (const char *)qword_2683E8570;
                      }
                      int v80 = mkdir(v79, 0x1FFu);
                      if (byte_2683E8587 >= 0) {
                        int v81 = (const char *)&qword_2683E8570;
                      }
                      else {
                        int v81 = (const char *)qword_2683E8570;
                      }
                      if (v80)
                      {
                        __error();
                        syslog(3, "Failed to create: %s, with error code %d");
                      }
                      else if (chown(v81, 0x1F5u, 0xFFFFFFFF))
                      {
                        __error();
                        syslog(3, "Failed to modify: %s, with error code %d");
                      }
                    }
                    std::string::append((std::string *)&qword_2683E8570, "/");
                    if (!MGGetBoolAnswer()
                      || (unsigned int v82 = (const std::string::value_type *)sub_22B1DEEE4("AGC_CLIENT_PROCESS_NAME")) == 0)
                    {
                      if (a3 >= 2) {
                        unsigned int v82 = "agc_mtl_status";
                      }
                      else {
                        unsigned int v82 = "agc_gl_status";
                      }
                    }
                    std::string::append((std::string *)&qword_2683E8570, v82);
                    if (!MGGetBoolAnswer()
                      || (int v83 = (const char *)sub_22B1DEEE4("AGC_STATUS_FILE_NO_PID")) == 0
                      || *v83 == 48
                      || !atoi(v83))
                    {
                      pid_t v84 = getpid();
                      std::to_string(&__p, v84);
                      int v85 = std::string::insert(&__p, 0, "_");
                      std::string::size_type v86 = v85->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                      buf.__r_.__value_.__r.__words[2] = v86;
                      v85->__r_.__value_.__l.__size_ = 0;
                      v85->__r_.__value_.__r.__words[2] = 0;
                      v85->__r_.__value_.__r.__words[0] = 0;
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        int v87 = &buf;
                      }
                      else {
                        int v87 = (std::string *)buf.__r_.__value_.__r.__words[0];
                      }
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v88 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v88 = buf.__r_.__value_.__l.__size_;
                      }
                      std::string::append((std::string *)&qword_2683E8570, (const std::string::value_type *)v87, v88);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(buf.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    LODWORD(v89) = MGGetBoolAnswer();
                    if (v89)
                    {
                      int v89 = (const char *)sub_22B1DEEE4("AGC_STATUS_FILE_MAX_SIZE_IN_BYTES");
                      if (v89)
                      {
                        if (*v89 == 48) {
                          LODWORD(v89) = 0;
                        }
                        else {
                          LODWORD(v89) = atoi(v89);
                        }
                      }
                    }
                    dword_2683E92F0 = (int)v89;
                    if (byte_2683E8587 >= 0) {
                      char v90 = (const char *)&qword_2683E8570;
                    }
                    else {
                      char v90 = (const char *)qword_2683E8570;
                    }
                    stat(v90, v364);
                    operator new();
                  }
                  qword_2683E92E8 = MEMORY[0x263F8C0F8];
                  uint64_t v61 = std::ostream::flush();
                }
              }
            }
          }
          sub_22B1E69D0(v61, "Running LLVM version %d.", v62, v63, v64, v65, v66, v67, 23);
          sub_22B1D7BF0(&__p, "Active environment variable values:\n");
          uint64_t v91 = MGGetBoolAnswer();
          if (v91)
          {
            sub_22B1D318C();
            uint64_t v98 = qword_2683E84D0;
            if (qword_2683E84D8 != qword_2683E84D0)
            {
              unint64_t v99 = 0;
              unsigned int v100 = 1;
              do
              {
                int v101 = *(char **)(v98 + 8 * v99);
                uint64_t v91 = (uint64_t)sub_22B1DEEE4(v101);
                if (v91)
                {
                  BOOL v102 = (const std::string::value_type *)v91;
                  std::string::append(&__p, v101);
                  std::string::append(&__p, "=");
                  std::string::append(&__p, v102);
                  uint64_t v91 = (uint64_t)std::string::append(&__p, "\n");
                }
                unint64_t v99 = v100;
                uint64_t v98 = qword_2683E84D0;
                ++v100;
              }
              while (v99 < (qword_2683E84D8 - qword_2683E84D0) >> 3);
            }
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v103 = &__p;
          }
          else {
            int v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          sub_22B1E69D0(v91, (const char *)v103, v92, v93, v94, v95, v96, v97, v292);
          sub_22B214B84();
          *(_DWORD *)(*sub_22B214C08("half", 4uLL) + 8) = 1;
          *(_DWORD *)(*sub_22B214C08("float", 5uLL) + 8) = 0;
          *(_DWORD *)(*sub_22B214C08("i16", 3uLL) + 8) = 4;
          *(_DWORD *)(*sub_22B214C08("i32", 3uLL) + 8) = 3;
          sub_22B1F5524();
          *(_DWORD *)(*sub_22B1F562C("air.perspective", 0xFuLL) + 8) = 0;
          *(_DWORD *)(*sub_22B1F562C("air.flat", 8uLL) + 8) = 1;
          *(_DWORD *)(*sub_22B1F562C("air.no_perspective", 0x12uLL) + 8) = 2;
          sub_22B1F55A8();
          *(_DWORD *)(*sub_22B1F5734("air.center", 0xAuLL) + 8) = 0;
          *(_DWORD *)(*sub_22B1F5734("air.centroid", 0xCuLL) + 8) = 2;
          *(_DWORD *)(*sub_22B1F5734("air.sample", 0xAuLL) + 8) = 1;
          sub_22B1F5178();
          if (dword_2683E9254)
          {
LABEL_399:
            sub_22B23B76C();
            if (!dword_2683E9224)
            {
              uint64_t v259 = *sub_22B23BF34("air.vertex_id", 0xDuLL);
              *(void *)(v259 + 8) = "air.get_vertex_id";
              *(void *)(v259 + 16) = 17;
              *(unsigned char *)(v259 + 24) = 1;
              uint64_t v260 = *sub_22B23BF34("air.instance_id", 0xFuLL);
              *(void *)(v260 + 8) = "air.get_instance_id";
              *(void *)(v260 + 16) = 19;
              *(unsigned char *)(v260 + 24) = 1;
              uint64_t v261 = *sub_22B23BF34("air.base_vertex", 0xFuLL);
              *(void *)(v261 + 8) = "air.get_base_vertex";
              *(void *)(v261 + 16) = 19;
              *(unsigned char *)(v261 + 24) = 1;
              uint64_t v262 = *sub_22B23BF34("air.base_instance", 0x11uLL);
              *(void *)(v262 + 8) = "air.get_base_instance";
              *(void *)(v262 + 16) = 21;
              *(unsigned char *)(v262 + 24) = 1;
              uint64_t v263 = *sub_22B23BF34("air.thread_position_in_grid", 0x1BuLL);
              *(void *)(v263 + 8) = "air.get_global_id";
              *(void *)(v263 + 16) = 17;
              *(unsigned char *)(v263 + 24) = 0;
              uint64_t v264 = *sub_22B23BF34("air.thread_position_in_threadgroup", 0x22uLL);
              *(void *)(v264 + 8) = "air.get_local_id";
              *(void *)(v264 + 16) = 16;
              *(unsigned char *)(v264 + 24) = 0;
              uint64_t v265 = *sub_22B23BF34("air.thread_index_in_threadgroup", 0x1FuLL);
              *(void *)(v265 + 8) = "air.get_local_linear_id";
              *(void *)(v265 + 16) = 23;
              *(unsigned char *)(v265 + 24) = 1;
              uint64_t v266 = *sub_22B23BF34("air.threadgroup_position_in_grid", 0x20uLL);
              *(void *)(v266 + 8) = "air.get_group_id";
              *(void *)(v266 + 16) = 16;
              *(unsigned char *)(v266 + 24) = 0;
              uint64_t v267 = *sub_22B23BF34("air.threads_per_grid", 0x14uLL);
              *(void *)(v267 + 8) = "air.get_global_size";
              *(void *)(v267 + 16) = 19;
              *(unsigned char *)(v267 + 24) = 0;
              uint64_t v268 = *sub_22B23BF34("air.threads_per_threadgroup", 0x1BuLL);
              *(void *)(v268 + 8) = "air.get_local_size";
              *(void *)(v268 + 16) = 18;
              *(unsigned char *)(v268 + 24) = 0;
              uint64_t v269 = *sub_22B23BF34("air.threadgroups_per_grid", 0x19uLL);
              *(void *)(v269 + 8) = "air.get_num_groups";
              *(void *)(v269 + 16) = 18;
              *(unsigned char *)(v269 + 24) = 0;
              uint64_t v270 = *sub_22B23BF34("air.thread_execution_width", 0x1AuLL);
              *(void *)(v270 + 8) = "air.get_thread_execution_width";
              *(void *)(v270 + 16) = 30;
              *(unsigned char *)(v270 + 24) = 1;
              uint64_t v271 = *sub_22B23BF34("air.dispatch_threads_per_threadgroup", 0x24uLL);
              *(void *)(v271 + 8) = "air.get_dispatch_local_size";
              *(void *)(v271 + 16) = 27;
              *(unsigned char *)(v271 + 24) = 0;
              uint64_t v272 = *sub_22B23BF34("air.thread_index_in_quadgroup", 0x1DuLL);
              *(void *)(v272 + 8) = "air.get_quad_element";
              *(void *)(v272 + 16) = 20;
              *(unsigned char *)(v272 + 24) = 1;
              uint64_t v273 = *sub_22B23BF34("air.quadgroup_index_in_threadgroup", 0x22uLL);
              *(void *)(v273 + 8) = "air.get_quad_group";
              *(void *)(v273 + 16) = 18;
              *(unsigned char *)(v273 + 24) = 1;
              uint64_t v274 = *sub_22B23BF34("air.quadgroups_per_threadgroup", 0x1EuLL);
              *(void *)(v274 + 8) = "air.get_quadgroups_per_threadgroup";
              *(void *)(v274 + 16) = 34;
              *(unsigned char *)(v274 + 24) = 1;
              uint64_t v275 = *sub_22B23BF34("air.dispatch_quadgroups_per_threadgroup", 0x27uLL);
              *(void *)(v275 + 8) = "air.get_dispatch_quadgroups_per_threadgroup";
              *(void *)(v275 + 16) = 43;
              *(unsigned char *)(v275 + 24) = 1;
              uint64_t v276 = *sub_22B23BF34("air.threads_per_simdgroup", 0x19uLL);
              *(void *)(v276 + 8) = "air.get_threads_per_simdgroup";
              *(void *)(v276 + 16) = 29;
              *(unsigned char *)(v276 + 24) = 1;
              uint64_t v277 = *sub_22B23BF34("air.thread_index_in_simdgroup", 0x1DuLL);
              *(void *)(v277 + 8) = "air.get_thread_index_in_simdgroup";
              *(void *)(v277 + 16) = 33;
              *(unsigned char *)(v277 + 24) = 1;
              uint64_t v278 = *sub_22B23BF34("air.simdgroup_index_in_threadgroup", 0x22uLL);
              *(void *)(v278 + 8) = "air.get_simdgroup_index_in_threadgroup";
              *(void *)(v278 + 16) = 38;
              *(unsigned char *)(v278 + 24) = 1;
              uint64_t v279 = *sub_22B23BF34("air.simdgroups_per_threadgroup", 0x1EuLL);
              *(void *)(v279 + 8) = "air.get_simdgroups_per_threadgroup";
              *(void *)(v279 + 16) = 34;
              *(unsigned char *)(v279 + 24) = 1;
              v258 = (llvm::PassRegistry *)sub_22B23BF34("air.dispatch_simdgroups_per_threadgroup", 0x27uLL);
              uint64_t v280 = *(void *)v258;
              *(void *)(v280 + 8) = "air.get_dispatch_simdgroups_per_threadgroup";
              *(void *)(v280 + 16) = 43;
              *(unsigned char *)(v280 + 24) = 1;
            }
            PassRegistry = (llvm *)llvm::PassRegistry::getPassRegistry(v258);
            llvm::initializeCore(PassRegistry, v282);
            llvm::initializeScalarOpts(PassRegistry, v283);
            llvm::initializeVectorization(PassRegistry, v284);
            llvm::initializeIPO(PassRegistry, v285);
            llvm::initializeAnalysis(PassRegistry, v286);
            llvm::initializeTransformUtils(PassRegistry, v287);
            llvm::initializeInstCombine(PassRegistry, v288);
            llvm::initializeTarget(PassRegistry, v289);
            operator new();
          }
          uint64_t v104 = 0;
          *(void *)&v364[0].st_dev = &v364[0].st_rdev;
          *(_OWORD *)&v364[0].__darwin_ino64_t st_ino = xmmword_22B26F8B0;
          do
          {
            uint64_t v299 = 0;
            v333 = &(&off_26488DD78)[2 * v104];
            uint64_t v297 = v104 & 0x7FFFFFFE;
            BOOL v105 = v297 == 2;
            uint64_t v293 = v104;
            unint64_t v106 = 0x28AAAuLL >> v104;
            unint64_t v107 = (0x28AAAuLL >> v104) & 1;
            int v108 = v105 | (0x28AAAuLL >> v104) & 1;
            if (v107) {
              char v109 = 3;
            }
            else {
              char v109 = 2;
            }
            char v325 = v109;
            if (v106) {
              char v110 = 3;
            }
            else {
              char v110 = 2;
            }
            unint64_t v298 = v107;
            char v323 = 2 * v107;
            char v295 = v110 + 1;
            BOOL v296 = v105;
            char v294 = v110 + 2;
            __s = "1d";
            int v328 = v108;
            do
            {
              if (!v298 || v299 != 4)
              {
                uint64_t v111 = 0;
                unint64_t v112 = v299 - 5;
                char v113 = v294;
                char v114 = v295;
                if ((0xB5uLL >> v299))
                {
                  char v113 = v295;
                  char v114 = 0;
                }
                char v338 = v114;
                char v115 = v113 + v296;
                if (v297 != 2) {
                  char v113 = 0;
                }
                char v336 = v113;
                BOOL v116 = v112 >= 3;
                if (v112 >= 3) {
                  char v117 = v115 + 3;
                }
                else {
                  char v117 = 0;
                }
                char v314 = v117;
                if (v116) {
                  char v118 = v115 + 5;
                }
                else {
                  char v118 = v115 + 3;
                }
                char v312 = v118;
                if (v116) {
                  char v119 = v115;
                }
                else {
                  char v119 = 0;
                }
                char v317 = v115 + 2;
                if (v116) {
                  char v120 = v115 + 2;
                }
                else {
                  char v120 = v115;
                }
                char v307 = v120 + 2;
                char v309 = v120;
                char v311 = v119;
                char v320 = v115;
                char v303 = v115 + 1;
                char v305 = v120 + 3;
                v351 = (char *)&unk_22B27C63D;
                do
                {
                  unint64_t v121 = 0;
                  uint64_t v301 = v111;
                  v347 = &off_26488DFD0 + 2 * v111 + 1;
                  uint64_t v122 = &off_26488DF30;
                  do
                  {
                    if (!v108 || v121 <= 1)
                    {
                      int v123 = *v333;
                      if (*v333)
                      {
                        size_t v124 = strlen(*v333);
                        v364[0].__darwin_ino64_t st_ino = 0;
                        sub_22B1EC888(v364, v123, &v123[v124]);
                      }
                      else
                      {
                        v364[0].__darwin_ino64_t st_ino = 0;
                      }
                      size_t v125 = strlen(__s);
                      sub_22B1EC888(v364, __s, &__s[v125]);
                      size_t v126 = strlen(v351);
                      sub_22B1EC888(v364, v351, &v351[v126]);
                      if (v108) {
                        int v127 = (const char **)v122;
                      }
                      else {
                        int v127 = (const char **)(v122 - 1);
                      }
                      uint64_t v128 = (char *)*v127;
                      if (*v127)
                      {
                        size_t v129 = strlen(*v127);
                        sub_22B1EC888(v364, v128, &v128[v129]);
                      }
                      else if (*(void *)&v364[0].st_uid < v364[0].st_ino)
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod();
                      }
                      if (*v347)
                      {
                        char v130 = 0;
                        if (*v347 == 1)
                        {
                          char v131 = v317;
                          char v132 = v312;
                          char v133 = v314;
                          char v134 = v320;
                        }
                        else
                        {
                          char v133 = 0;
                          char v134 = 0;
                          char v131 = v320;
                          char v132 = v303;
                        }
                      }
                      else
                      {
                        char v134 = 0;
                        char v131 = v307;
                        char v130 = v309;
                        char v133 = v311;
                        char v132 = v305;
                      }
                      int v135 = *((_DWORD *)v333 + 2);
                      int v136 = (int)(&off_26488DEA8)[2 * v299 + 1];
                      int v137 = *((_DWORD *)v122 + 2);
                      uint64_t v138 = *sub_22B23BC54(*(const void **)&v364[0].st_dev, v364[0].st_ino);
                      *(_DWORD *)(v138 + 8) = v135;
                      *(_DWORD *)(v138 + 12) = v136;
                      *(_DWORD *)(v138 + 16) = 0;
                      *(_DWORD *)(v138 + 20) = v137;
                      *(_DWORD *)(v138 + 24) = 0;
                      int v108 = v328;
                      *(unsigned char *)(v138 + 28) = v328;
                      *(unsigned char *)(v138 + 29) = v132;
                      *(_WORD *)(v138 + 30) = 256;
                      *(unsigned char *)(v138 + 32) = 0;
                      *(unsigned char *)(v138 + 33) = v323;
                      *(unsigned char *)(v138 + 34) = v325;
                      *(unsigned char *)(v138 + 35) = v133;
                      *(unsigned char *)(v138 + 36) = v130;
                      *(unsigned char *)(v138 + 37) = v134;
                      *(unsigned char *)(v138 + 38) = 0;
                      *(unsigned char *)(v138 + 39) = v338;
                      *(unsigned char *)(v138 + 40) = v336;
                      *(_DWORD *)(v138 + 41) = 0;
                      *(unsigned char *)(v138 + 45) = v131;
                      *(_WORD *)(v138 + 46) = 0;
                    }
                    ++v121;
                    v122 += 3;
                  }
                  while (v121 != 6);
                  v351 = (char *)*(&off_26488DFD0 + 2 * v301 + 2);
                  uint64_t v111 = 1;
                }
                while (v301 != 1);
              }
              __s = (&off_26488DEA8)[2 * ++v299];
            }
            while (v299 != 7);
            uint64_t v104 = v293 + 1;
          }
          while (v293 != 3);
LABEL_246:
          uint64_t v306 = 0;
          unint64_t v139 = (0x28AAAuLL >> v104) & 1;
          if (v139) {
            char v140 = 2;
          }
          else {
            char v140 = 1;
          }
          char v326 = v140;
          if ((0x28AAAuLL >> v104)) {
            char v141 = 2;
          }
          else {
            char v141 = 1;
          }
          char v304 = v141 + 1;
          char v302 = v141 + 2;
          v329 = &(&off_26488DD78)[2 * v104];
          uint64_t v300 = v104;
          unint64_t v308 = (0x20C0uLL >> v104) & 1;
          uint64_t v142 = "1d";
          while (v139 && v306 == 4)
          {
LABEL_298:
            uint64_t v142 = (&off_26488DEA8)[2 * ++v306];
            if (v306 == 7)
            {
              uint64_t v104 = v300 + 1;
              if (v300 != 7) {
                goto LABEL_246;
              }
              do
              {
                uint64_t v175 = 0;
                v341 = &(&off_26488DD78)[2 * v104];
                uint64_t v176 = v104 & 0x7FFFFFFE;
                BOOL v330 = v176 == 10;
                uint64_t v316 = v104;
                unint64_t v177 = 0x57555uLL >> v104;
                unint64_t v178 = v177 & 1;
                if (v177) {
                  char v179 = 2;
                }
                else {
                  char v179 = 3;
                }
                char v337 = v179;
                int v180 = v177 & 1;
                if (v180) {
                  char v181 = 2;
                }
                else {
                  char v181 = 3;
                }
                unint64_t v327 = v178;
                char v335 = (2 * v178) ^ 2;
                char v324 = v181 + 1;
                char v322 = v181 + 2;
                char v319 = v180 & (v176 != 10);
                uint64_t v182 = "1d";
                do
                {
                  uint64_t v332 = v175;
                  unint64_t v183 = v175 - 5;
                  if ((v175 & 0xFFFFFFFE) == 2 || v183 <= 2)
                  {
                    unint64_t v184 = 0;
                    v353 = &(&off_26488DEA8)[2 * v175 + 1];
                    char v185 = v324;
                    char v186 = v322;
                    if ((0xB5uLL >> v175))
                    {
                      char v186 = v324;
                      char v185 = 0;
                    }
                    char v349 = v185;
                    char v187 = v186 + v330;
                    BOOL v188 = v183 >= 3;
                    if (v183 >= 3) {
                      char v189 = v186 + v330 + 2;
                    }
                    else {
                      char v189 = v186 + v330;
                    }
                    if (!v188) {
                      char v187 = 0;
                    }
                    char __sb = v187;
                    if (v176 == 10) {
                      char v190 = v186;
                    }
                    else {
                      char v190 = 0;
                    }
                    if (v176 == 10) {
                      char v191 = 0;
                    }
                    else {
                      char v191 = v189;
                    }
                    char v192 = v189 + v319;
                    if (v327) {
                      char v193 = v191;
                    }
                    else {
                      char v193 = 0;
                    }
                    uint64_t v194 = &off_26488DF30;
                    do
                    {
                      if (v176 != 10 || v184 <= 1)
                      {
                        uint64_t v195 = *v341;
                        if (*v341)
                        {
                          size_t v196 = strlen(*v341);
                          v364[0].__darwin_ino64_t st_ino = 0;
                          sub_22B1EC888(v364, v195, &v195[v196]);
                        }
                        else
                        {
                          v364[0].__darwin_ino64_t st_ino = 0;
                        }
                        size_t v197 = strlen(v182);
                        sub_22B1EC888(v364, v182, &v182[v197]);
                        if (v176 == 10) {
                          uint64_t v198 = (const char **)v194;
                        }
                        else {
                          uint64_t v198 = (const char **)(v194 - 1);
                        }
                        int v199 = (char *)*v198;
                        if (*v198)
                        {
                          size_t v200 = strlen(*v198);
                          sub_22B1EC888(v364, v199, &v199[v200]);
                          __darwin_ino64_t v201 = v364[0].st_ino;
                        }
                        else
                        {
                          __darwin_ino64_t v201 = v364[0].st_ino;
                          if (*(void *)&v364[0].st_uid < v364[0].st_ino) {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod();
                          }
                        }
                        int v202 = *((_DWORD *)v341 + 2);
                        int v203 = *(_DWORD *)v353;
                        int v204 = *((_DWORD *)v194 + 2);
                        uint64_t v205 = *sub_22B23BC54(*(const void **)&v364[0].st_dev, v201);
                        *(_DWORD *)(v205 + 8) = v202;
                        *(_DWORD *)(v205 + 12) = v203;
                        *(_DWORD *)(v205 + 16) = 0;
                        *(_DWORD *)(v205 + 20) = v204;
                        *(unsigned char *)(v205 + 28) = 0;
                        *(_DWORD *)(v205 + 24) = 0;
                        *(unsigned char *)(v205 + 29) = v192;
                        *(_WORD *)(v205 + 30) = 256;
                        *(unsigned char *)(v205 + 32) = 0;
                        *(unsigned char *)(v205 + 33) = v335;
                        *(unsigned char *)(v205 + 34) = v337;
                        *(unsigned char *)(v205 + 35) = __sb;
                        *(unsigned char *)(v205 + 38) = 0;
                        *(_WORD *)(v205 + 36) = 0;
                        *(unsigned char *)(v205 + 39) = v349;
                        *(unsigned char *)(v205 + 40) = v190;
                        *(unsigned char *)(v205 + 43) = 0;
                        *(_WORD *)(v205 + 41) = 0;
                        *(unsigned char *)(v205 + 44) = v193;
                        *(unsigned char *)(v205 + 47) = 0;
                        *(_WORD *)(v205 + 45) = 0;
                      }
                      ++v184;
                      v194 += 3;
                    }
                    while (v184 != 6);
                  }
                  uint64_t v175 = v332 + 1;
                  uint64_t v182 = (&off_26488DEA8)[2 * v332 + 2];
                }
                while (v332 != 6);
                uint64_t v104 = v316 + 1;
              }
              while (v316 != 11);
              char v206 = 0;
              do
              {
                uint64_t v207 = 0;
                uint64_t v208 = &(&off_26488DD78)[2 * v104];
                v209 = *v208;
                v354 = (int *)(v208 + 1);
                char v342 = v206;
                unint64_t v210 = (0x20C0uLL >> v104) & 1;
                if (v210) {
                  char v211 = 3;
                }
                else {
                  char v211 = 2;
                }
                char v350 = v211;
                char v212 = 2 * v210;
                uint64_t v213 = ".v4f32";
                do
                {
                  uint64_t v214 = 0;
                  uint64_t __sc = v207;
                  v215 = &off_26488DF28[3 * v207 + 2];
                  int v216 = 1;
                  do
                  {
                    if (v209)
                    {
                      size_t v217 = strlen(v209);
                      v364[0].__darwin_ino64_t st_ino = 0;
                      sub_22B1EC888(v364, v209, &v209[v217]);
                    }
                    else
                    {
                      v364[0].__darwin_ino64_t st_ino = 0;
                    }
                    size_t v218 = strlen(*((const char **)&unk_26488E000 + 2 * v214 + 1));
                    sub_22B1EC888(v364, *((unsigned char **)&unk_26488E000 + 2 * v214 + 1), (unsigned char *)(*((void *)&unk_26488E000 + 2 * v214 + 1) + v218));
                    size_t v219 = strlen(v213);
                    sub_22B1EC888(v364, v213, &v213[v219]);
                    int v220 = *v354;
                    int v221 = *(_DWORD *)v215;
                    uint64_t v222 = *sub_22B23BC54(*(const void **)&v364[0].st_dev, v364[0].st_ino);
                    *(_DWORD *)(v222 + 8) = v220;
                    *(_DWORD *)(v222 + 12) = 1;
                    *(_DWORD *)(v222 + 16) = v216;
                    *(_DWORD *)(v222 + 20) = v221;
                    *(unsigned char *)(v222 + 28) = 0;
                    *(_DWORD *)(v222 + 24) = 0;
                    *(unsigned char *)(v222 + 29) = v350;
                    *(_DWORD *)(v222 + 30) = 0;
                    *(unsigned char *)(v222 + 34) = 1;
                    *(_DWORD *)(v222 + 38) = 0;
                    *(_DWORD *)(v222 + 35) = 0;
                    *(unsigned char *)(v222 + 42) = v212;
                    *(_DWORD *)(v222 + 43) = 0;
                    uint64_t v223 = v214 + 1;
                    uint64_t v224 = 16 * (v214 + 1);
                    uint64_t v214 = 1;
                    *(unsigned char *)(v222 + 47) = 1;
                    int v216 = *(_DWORD *)((char *)&unk_26488E000 + v224);
                  }
                  while (v223 != 2);
                  uint64_t v207 = __sc + 1;
                  uint64_t v213 = off_26488DF28[3 * __sc + 3];
                }
                while (__sc != 5);
                char v206 = 1;
                uint64_t v104 = 13;
              }
              while ((v342 & 1) == 0);
              sub_22B2259A8();
              uint64_t v225 = 0;
LABEL_355:
              uint64_t v226 = 0;
              v227 = &(&off_26488E030)[2 * v225];
              int v228 = *((_DWORD *)v227 + 2);
              v229 = "1d";
              while (1)
              {
                if (v225 != 4 || v226 == 4)
                {
                  unint64_t v230 = (0xB5uLL >> v226) & 1;
                  if ((v225 - 5) > 1 || !v230) {
                    break;
                  }
                }
LABEL_377:
                ++v226;
                v229 = (&off_26488DEA8)[2 * v226];
                if (v226 == 7)
                {
                  if (++v225 == 11)
                  {
                    v364[0].__darwin_ino64_t st_ino = 0;
                    sub_22B1EC888(v364, "air.get_width_texture_buffer_1d", "");
                    uint64_t v242 = *sub_22B23BD58(*(const void **)&v364[0].st_dev, v364[0].st_ino);
                    *(_DWORD *)(v242 + 12) = 0;
                    *(unsigned char *)(v242 + 16) = 1;
                    sub_22B225A2C();
                    uint64_t v243 = 0;
                    v244 = "1d";
                    do
                    {
                      if ((0xB5uLL >> v243)) {
                        v245 = "2d_ms";
                      }
                      else {
                        v245 = "2d_ms_array";
                      }
                      uint64_t v246 = 5;
                      if (((0xB5uLL >> v243) & 1) == 0) {
                        uint64_t v246 = 11;
                      }
                      v247 = &v245[v246];
                      char v248 = 1;
                      do
                      {
                        v364[0].__darwin_ino64_t st_ino = 0;
                        sub_22B1EC888(v364, "air.fence_texture_", "");
                        if (v248)
                        {
                          v249 = (char *)&v244[strlen(v244)];
                          v250 = (char *)v244;
                        }
                        else
                        {
                          v250 = (char *)v245;
                          v249 = (char *)v247;
                        }
                        sub_22B1EC888(v364, v250, v249);
                        sub_22B23BE5C((llvm::StringMapImpl *)&qword_2683E9178, *(const void **)&v364[0].st_dev, v364[0].st_ino);
                        char v251 = ((v243 & 0xFFFFFFFE) == 2) & v248;
                        char v248 = 0;
                      }
                      while ((v251 & 1) != 0);
                      ++v243;
                      v244 = (&off_26488DEA8)[2 * v243];
                    }
                    while (v243 != 7);
                    v364[0].__darwin_ino64_t st_ino = 0;
                    sub_22B1EC888(v364, "air.fence_texture_", "");
                    sub_22B1EC888(v364, "buffer_1d", "");
                    sub_22B23BE5C((llvm::StringMapImpl *)&qword_2683E9178, *(const void **)&v364[0].st_dev, v364[0].st_ino);
                    sub_22B225AB0();
                    for (uint64_t i = 0; i != 16; ++i)
                    {
                      v364[0].__darwin_ino64_t st_ino = 0;
                      sub_22B1EC888(v364, "air.is_null_", "");
                      size_t v253 = strlen(off_26488E0E0[i]);
                      sub_22B1EC888(v364, off_26488E0E0[i], &off_26488E0E0[i][v253]);
                      sub_22B23BE5C((llvm::StringMapImpl *)&qword_2683E91A0, *(const void **)&v364[0].st_dev, v364[0].st_ino);
                    }
                    sub_22B22D740();
                    for (uint64_t j = 0; j != 16; ++j)
                    {
                      v364[0].__darwin_ino64_t st_ino = 0;
                      sub_22B1EC888(v364, "air.get_null_", "");
                      size_t v255 = strlen(off_26488E0E0[j]);
                      sub_22B1EC888(v364, off_26488E0E0[j], &off_26488E0E0[j][v255]);
                      sub_22B23BE5C((llvm::StringMapImpl *)&qword_2683E91C8, *(const void **)&v364[0].st_dev, v364[0].st_ino);
                    }
                    sub_22B225B34();
                    for (uint64_t k = 0; k != 16; ++k)
                    {
                      v364[0].__darwin_ino64_t st_ino = 0;
                      sub_22B1EC888(v364, "air.get_unique_identifier_", "");
                      size_t v257 = strlen(off_26488E0E0[k]);
                      sub_22B1EC888(v364, off_26488E0E0[k], &off_26488E0E0[k][v257]);
                      sub_22B23BE5C((llvm::StringMapImpl *)&qword_2683E91F0, *(const void **)&v364[0].st_dev, v364[0].st_ino);
                    }
                    v364[0].__darwin_ino64_t st_ino = 0;
                    sub_22B1EC888(v364, "air.get_unique_identifier_", "");
                    sub_22B1EC888(v364, "sampler", "");
                    sub_22B23BE5C((llvm::StringMapImpl *)&qword_2683E91F0, *(const void **)&v364[0].st_dev, v364[0].st_ino);
                    if (*(stat **)&v364[0].st_dev != (stat *)&v364[0].st_rdev) {
                      free(*(void **)&v364[0].st_dev);
                    }
                    goto LABEL_399;
                  }
                  goto LABEL_355;
                }
              }
              BOOL v231 = v230 == 0;
              if (v230) {
                v232 = "2d_ms";
              }
              else {
                v232 = "2d_ms_array";
              }
              uint64_t v233 = 5;
              if (v231) {
                uint64_t v233 = 11;
              }
              v355 = &v232[v233];
              char v234 = 1;
              while (2)
              {
                if (v234) {
                  int v235 = -11;
                }
                else {
                  int v235 = -9;
                }
                if ((v235 + v225) <= 0xFFFFFFFD)
                {
                  v236 = *v227;
                  if (*v227)
                  {
                    size_t v237 = strlen(*v227);
                    v364[0].__darwin_ino64_t st_ino = 0;
                    sub_22B1EC888(v364, v236, &v236[v237]);
                    if (v234) {
                      goto LABEL_372;
                    }
LABEL_374:
                    v239 = (char *)v232;
                    v238 = (char *)v355;
                  }
                  else
                  {
                    v364[0].__darwin_ino64_t st_ino = 0;
                    if ((v234 & 1) == 0) {
                      goto LABEL_374;
                    }
LABEL_372:
                    v238 = (char *)&v229[strlen(v229)];
                    v239 = (char *)v229;
                  }
                  sub_22B1EC888(v364, v239, v238);
                  uint64_t v240 = *sub_22B23BD58(*(const void **)&v364[0].st_dev, v364[0].st_ino);
                  *(_DWORD *)(v240 + 12) = v228;
                  *(unsigned char *)(v240 + 16) = 0;
                }
                char v241 = ((v226 & 0xFFFFFFFE) == 2) & v234;
                char v234 = 0;
                if ((v241 & 1) == 0) {
                  goto LABEL_377;
                }
                continue;
              }
            }
          }
          char v143 = 0;
          char v144 = v304;
          char v145 = v302;
          if ((unint64_t)(v306 - 5) >= 3)
          {
            char v145 = v304;
            char v144 = 0;
          }
          char v334 = v144;
          if ((0xB5uLL >> v306)) {
            uint64_t v146 = "2d_ms";
          }
          else {
            uint64_t v146 = "2d_ms_array";
          }
          uint64_t v147 = 5;
          if (((0xB5uLL >> v306) & 1) == 0) {
            uint64_t v147 = 11;
          }
          v318 = &v146[v147];
          v321 = v146;
          if ((0xB5uLL >> v306)) {
            char v148 = v145;
          }
          else {
            char v148 = v145 + 1;
          }
          char v310 = v148;
          if ((0xB5uLL >> v306)) {
            char v149 = 0;
          }
          else {
            char v149 = v145;
          }
          char v331 = v149;
          char v150 = 1;
          while (2)
          {
            char v313 = v150;
            unint64_t v151 = 0;
            char v152 = v310;
            char v153 = v310 + (v143 & 1);
            if ((v143 & 1) == 0) {
              char v152 = 0;
            }
            char v348 = v152;
            char v154 = v153 + v308;
            if (v143) {
              char v155 = 0;
            }
            else {
              char v155 = v153 + v308;
            }
            char __sa = v155;
            if (!v308) {
              char v153 = 0;
            }
            char v340 = v153;
            char v339 = v154 + ((v143 & 1) == 0);
            uint64_t v156 = off_26488DF28;
            char v352 = v143;
LABEL_277:
            uint64_t v157 = 0;
            int v158 = &off_26488DF28[3 * v151];
            if (v139) {
              int v159 = (const char **)(v158 + 1);
            }
            else {
              int v159 = (const char **)v156;
            }
            unint64_t v315 = v151;
            BOOL v160 = v151 > 1 && v139 != 0;
            int v161 = (int *)(v158 + 2);
            int v162 = 1;
LABEL_284:
            if (!v160)
            {
              int v163 = *v329;
              if (*v329)
              {
                size_t v164 = strlen(*v329);
                v364[0].__darwin_ino64_t st_ino = 0;
                sub_22B1EC888(v364, v163, &v163[v164]);
                if (v143) {
                  goto LABEL_287;
                }
LABEL_289:
                int v166 = (char *)&v142[strlen(v142)];
                int v165 = (char *)v142;
              }
              else
              {
                v364[0].__darwin_ino64_t st_ino = 0;
                if ((v143 & 1) == 0) {
                  goto LABEL_289;
                }
LABEL_287:
                int v166 = (char *)v318;
                int v165 = (char *)v321;
              }
              sub_22B1EC888(v364, v165, v166);
              size_t v167 = strlen(*((const char **)&unk_26488E000 + 2 * v157 + 1));
              sub_22B1EC888(v364, *((unsigned char **)&unk_26488E000 + 2 * v157 + 1), (unsigned char *)(*((void *)&unk_26488E000 + 2 * v157 + 1) + v167));
              if (*v159)
              {
                size_t v168 = strlen(*v159);
                sub_22B1EC888(v364, *v159, &(*v159)[v168]);
                __darwin_ino64_t v169 = v364[0].st_ino;
              }
              else
              {
                __darwin_ino64_t v169 = v364[0].st_ino;
                if (*(void *)&v364[0].st_uid < v364[0].st_ino) {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                }
              }
              int v170 = *((_DWORD *)v329 + 2);
              int v171 = (int)(&off_26488DEA8)[2 * v306 + 1];
              int v172 = *v161;
              uint64_t v173 = *sub_22B23BC54(*(const void **)&v364[0].st_dev, v169);
              *(_DWORD *)(v173 + 8) = v170;
              *(_DWORD *)(v173 + 12) = v171;
              *(_DWORD *)(v173 + 16) = v162;
              *(_DWORD *)(v173 + 20) = v172;
              *(_DWORD *)(v173 + 24) = 0;
              *(unsigned char *)(v173 + 28) = v139;
              *(unsigned char *)(v173 + 29) = v339;
              *(unsigned char *)(v173 + 30) = 0;
              *(_WORD *)(v173 + 31) = 0;
              *(unsigned char *)(v173 + 33) = v139;
              *(unsigned char *)(v173 + 34) = v326;
              *(unsigned char *)(v173 + 37) = 0;
              *(_WORD *)(v173 + 35) = 0;
              *(unsigned char *)(v173 + 38) = __sa;
              *(unsigned char *)(v173 + 39) = v331;
              *(unsigned char *)(v173 + 40) = 0;
              *(unsigned char *)(v173 + 41) = v348;
              *(unsigned char *)(v173 + 42) = v340;
              *(unsigned char *)(v173 + 43) = v334;
              *(_DWORD *)(v173 + 44) = 0;
              char v143 = v352;
            }
            uint64_t v174 = v157 + 1;
            int v162 = *((_DWORD *)&unk_26488E000 + 4 * v157 + 4);
            uint64_t v157 = 1;
            if (v174 == 2)
            {
              unint64_t v151 = v315 + 1;
              uint64_t v156 = &off_26488DF28[3 * v315 + 3];
              if (v315 == 5)
              {
                char v143 = 1;
                char v150 = 0;
                if ((((v306 & 0xFFFFFFFE) == 2) & v313) == 0) {
                  goto LABEL_298;
                }
                continue;
              }
              goto LABEL_277;
            }
            goto LABEL_284;
          }
        }
      }
      else
      {
        void v18[3] = v19 + 1;
        LOBYTE(v18) = *v19;
      }
      if (v16 == v18)
      {
        int v20 = 0;
        goto LABEL_29;
      }
      ++v17;
      std::string::push_back(&__str, (std::string::value_type)v18);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7)
      {
        int v20 = 4;
        goto LABEL_29;
      }
    }
  }
  return 0;
}

void sub_22B1E69D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (qword_2683E92E8)
  {
    if (dword_2683E92F0)
    {
      uint64_t v10 = qword_2683E92E8 + *(void *)(*(void *)qword_2683E92E8 - 24);
      if ((*(unsigned char *)(v10 + 32) & 5) == 0)
      {
        (*(void (**)(std::locale *__return_ptr))(**(void **)(v10 + 40) + 32))(&v16);
        if (v17 >= dword_2683E92F0)
        {
          sub_22B1E6CB0((void *)qword_2683E92E8, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          uint64_t v11 = qword_2683E92E8;
          if (!qword_2683E92E8 || qword_2683E92E8 == MEMORY[0x263F8C0F8]) {
            goto LABEL_11;
          }
          (*(void (**)(uint64_t))(*(void *)qword_2683E92E8 + 8))(qword_2683E92E8);
          qword_2683E92E8 = 0;
          sub_22B1E6EF8();
          if (byte_2683E8587 < 0)
          {
            *(unsigned char *)qword_2683E8570 = 0;
            qword_2683E8578 = 0;
          }
          else
          {
            LOBYTE(qword_2683E8570) = 0;
            byte_2683E8587 = 0;
          }
        }
      }
    }
    uint64_t v11 = qword_2683E92E8;
LABEL_11:
    if (v11)
    {
      __s = 0;
      vasprintf(&__s, a2, &a9);
      BOOL v12 = (void *)qword_2683E92E8;
      size_t v13 = strlen(__s);
      sub_22B1E6CB0((void *)qword_2683E92E8, (uint64_t)__s, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      uint64_t v14 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::flush();
      free(__s);
    }
  }
}

void sub_22B1E6C08(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_22B1E6CB0(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x230F434B0](v19, a1);
  if (v19[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    uint64_t v8 = a2 + a3;
    if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20) {
      uint64_t v9 = a2 + a3;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *((_DWORD *)v6 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v11 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v10;
      if (!v7)
      {
LABEL_24:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
        goto LABEL_25;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    uint64_t v12 = *((void *)v6 + 3);
    BOOL v13 = v12 <= a3;
    int64_t v14 = v12 - a3;
    if (v13) {
      int64_t v15 = 0;
    }
    else {
      int64_t v15 = v14;
    }
    if (v9 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
    {
      goto LABEL_24;
    }
    if (v15 >= 1)
    {
      sub_22B1E6F78(&__b, v15, (char)v10);
      std::locale v16 = v21 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v17 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v16, v15);
      if (v21 < 0) {
        operator delete(__b.__locale_);
      }
      if (v17 != v15) {
        goto LABEL_24;
      }
    }
    if (v8 - v9 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
    {
      goto LABEL_24;
    }
    *((void *)v6 + 3) = 0;
  }
LABEL_25:
  MEMORY[0x230F434C0](v19);
  return a1;
}

void sub_22B1E6EF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E8588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E8588))
  {
    qword_2683E8570 = 0;
    qword_2683E8578 = 0;
    unk_2683E8580 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_2683E8570, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E8588);
  }
}

void *sub_22B1E6F78(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *std::locale __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t *sub_22B1E7020(void *a1, uint64_t a2)
{
  uint64_t v3 = qword_2683E84F8;
  if (qword_2683E84F8)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t *)v3;
        uint64_t v6 = (void *)(v3 + 32);
        if (!sub_22B1DF088(a1, (void *)(v3 + 32))) {
          break;
        }
        uint64_t v3 = *v5;
        size_t v7 = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      if (!sub_22B1DF088(v6, a1)) {
        return v5;
      }
      size_t v7 = v5 + 1;
      uint64_t v3 = v5[1];
      if (!v3) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v5 = &qword_2683E84F8;
    size_t v7 = &qword_2683E84F8;
LABEL_9:
    size_t v8 = operator new(0x50uLL);
    uint64_t v9 = v8 + 4;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_22B1DC004(v9, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      v8[6] = *(void *)(a2 + 16);
    }
    v8[7] = 0;
    v8[8] = 0;
    v8[9] = 0;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = v5;
    *size_t v7 = (uint64_t)v8;
    int v10 = v8;
    if (*(void *)qword_2683E84F0)
    {
      qword_2683E84F0 = *(void *)qword_2683E84F0;
      int v10 = (uint64_t *)*v7;
    }
    sub_22B1E313C((uint64_t *)qword_2683E84F8, v10);
    ++qword_2683E8500;
  }
  return v8;
}

std::string *sub_22B1E7138(std::string *this)
{
  int v2 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v3 = this->__r_.__value_.__r.__words[0];
  if (v2 >= 0) {
    uint64_t v4 = this;
  }
  else {
    uint64_t v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v2 >= 0) {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  uint64_t v6 = MEMORY[0x263EF8318];
  if (size)
  {
    size_t v7 = (std::string *)((char *)v4 + size);
    do
    {
      unsigned int v8 = v4->__r_.__value_.__s.__data_[0];
      if ((v8 & 0x80000000) != 0)
      {
        if (!__maskrune(v8, 0x4000uLL)) {
          goto LABEL_15;
        }
      }
      else if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000) == 0)
      {
        goto LABEL_15;
      }
      uint64_t v4 = (std::string *)((char *)v4 + 1);
      --size;
    }
    while (size);
    uint64_t v4 = v7;
LABEL_15:
    LOBYTE(v2) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    std::string::size_type v3 = this->__r_.__value_.__r.__words[0];
  }
  if ((v2 & 0x80u) == 0) {
    uint64_t v9 = this;
  }
  else {
    uint64_t v9 = (std::string *)v3;
  }
  std::string::erase(this, 0, (char *)v4 - (char *)v9);
  uint64_t v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  uint64_t v12 = (char *)this + v10;
  if (v11 >= 0) {
    std::string::size_type v13 = (std::string::size_type)v12;
  }
  else {
    std::string::size_type v13 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  }
  if (v11 >= 0) {
    int64_t v14 = this;
  }
  else {
    int64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  while ((std::string *)v13 != v14)
  {
    unsigned int v16 = *(char *)--v13;
    unsigned int v15 = v16;
    if ((v16 & 0x80000000) != 0)
    {
      if (!__maskrune(v15, 0x4000uLL))
      {
LABEL_30:
        int64_t v14 = (std::string *)(v13 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x4000) == 0)
    {
      goto LABEL_30;
    }
  }
  uint64_t v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v18 = (char)v17;
  BOOL v19 = (char *)this + v17;
  if (v18 >= 0)
  {
    int v20 = this;
  }
  else
  {
    BOOL v19 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    int v20 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  return std::string::erase(this, (char *)v14 - (char *)v20, v19 - (char *)v14);
}

void MTLCompilerDelete_0(uint64_t a1)
{
  uint64_t v2 = qword_2683E8568;
  if (qword_2683E8568)
  {
    (*(void (**)(void))(qword_2683E8568 + 8))();
    dlclose(*(void **)v2);
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)uint64_t v2 = 0;
    MEMORY[0x230F43600](v2, 0x80C40D6874129);
  }
  qword_2683E8568 = 0;
  if (qword_2683E92E8) {
    BOOL v3 = qword_2683E92E8 == MEMORY[0x263F8C0F8];
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
LABEL_9:
    if (a1) {
      goto LABEL_10;
    }
    return;
  }
  (*(void (**)(void))(*(void *)qword_2683E92E8 + 8))();
  qword_2683E92E8 = 0;
  sub_22B1E6EF8();
  if ((byte_2683E8587 & 0x80000000) == 0)
  {
    LOBYTE(qword_2683E8570) = 0;
    byte_2683E8587 = 0;
    goto LABEL_9;
  }
  *(unsigned char *)qword_2683E8570 = 0;
  qword_2683E8578 = 0;
  if (a1)
  {
LABEL_10:
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4)
    {
      for (uint64_t i = 304; i != 328; i += 8)
      {
        uint64_t v6 = *(void *)(v4 + i);
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        *(void *)(v4 + i) = 0;
      }
      uint64_t v7 = *(void *)(v4 + 328);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      *(void *)(v4 + 328) = 0;
      uint64_t v8 = *(void *)(v4 + 336);
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      *(void *)(v4 + 336) = 0;
      uint64_t v9 = *(void *)(v4 + 344);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      *(void *)(v4 + 344) = 0;
      uint64_t v10 = *(void *)(v4 + 408);
      if (v10) {
        MEMORY[0x230F435E0](v10, 0x1000C8052888210);
      }
      if (*(char *)(v4 + 407) < 0) {
        operator delete(*(void **)(v4 + 384));
      }
      if (*(char *)(v4 + 383) < 0) {
        operator delete(*(void **)(v4 + 360));
      }
      if (*(char *)(v4 + 303) < 0) {
        operator delete(*(void **)(v4 + 280));
      }
      int v11 = *(void **)(v4 + 128);
      if (v11 != (void *)(v4 + 152)) {
        free(v11);
      }
      if (*(unsigned char *)(v4 + 120))
      {
        MEMORY[0x230F42A00](v4 + 104);
        *(unsigned char *)(v4 + 120) = 0;
      }
      if (*(unsigned char *)(v4 + 96))
      {
        MEMORY[0x230F42A00](v4 + 80);
        *(unsigned char *)(v4 + 96) = 0;
      }
      if (*(unsigned char *)(v4 + 72))
      {
        MEMORY[0x230F42A00](v4 + 56);
        *(unsigned char *)(v4 + 72) = 0;
      }
      llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)(v4 + 48));
      if (*(char *)(v4 + 31) < 0) {
        operator delete(*(void **)(v4 + 8));
      }
      MEMORY[0x230F43600](v4, 0x10F2C40B38FBF86);
    }
    JUMPOUT(0x230F43600);
  }
}

uint64_t GLCompilerBuildRequest(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v9 = 0;
  return sub_22B1E7574(a1, a2, a4, a5, 0, &v9, a7, a8, 2u);
}

uint64_t sub_22B1E7574(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4, llvm::Module *a5, _DWORD *a6, void *a7, void *a8, unsigned int a9)
{
  uint64_t v10 = a5;
  int v11 = 0;
  uint64_t v12 = 0;
  std::string::size_type v13 = 0;
  int64_t v14 = 0;
  int v15 = 0;
  int v16 = 0;
  uint64_t v212 = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  do
  {
    int v18 = (_DWORD *)((char *)a2 + (((unint64_t)*v17 >> 6) & 0x3FFFFFC));
    int v19 = *v17;
    switch(*v17)
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        *a6 = v19;
        ++v16;
        int v15 = 2;
        break;
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
        *a6 = v19;
        ++v16;
        int v15 = 1;
        break;
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x3Bu:
        int64_t v14 = (std::locale::__imp *)(v17 + 1);
        goto LABEL_6;
      case 0x2Eu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x3Au:
      case 0x44u:
        goto LABEL_6;
      case 0x38u:
        uint64_t v12 = v17 + 1;
        goto LABEL_6;
      case 0x39u:
        int v11 = v17 + 1;
        goto LABEL_6;
      case 0x3Du:
        std::string::size_type v13 = v17 + 1;
LABEL_6:
        ++v16;
        break;
      default:
        break;
    }
    uint64_t v17 = v18;
  }
  while (v19 != 68);
  char v179 = v14;
  uint64_t v174 = (uint64_t)v12;
  uint64_t v175 = (uint64_t)v11;
  char v20 = 0;
  if ((v16 - 2) >= 8) {
    int v21 = 0;
  }
  else {
    int v21 = v15;
  }
  if (a5) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = v21 == 1;
  }
  int v23 = !v22;
  uint64_t v24 = a1[8];
  if (!v22) {
    char v20 = (***(uint64_t (****)(void))(v24 + 32))(*(void *)(v24 + 32));
  }
  *(unsigned char *)(v24 + 353) = v20;
  if (!os_variant_has_internal_diagnostics())
  {
    xpc_object_t v29 = 0;
    goto LABEL_34;
  }
  llvm::EnableStatistics((llvm *)1);
  uint64_t v25 = (llvm *)xpc_dictionary_create(0, 0, 0);
  llvm::ResetStatistics(v25);
  if (v23) {
    uint64_t v26 = 3;
  }
  else {
    uint64_t v26 = 1;
  }
  xpc_dictionary_set_uint64(v25, "instruction_selector", v26);
  xpc_dictionary_set_uint64(v25, "api", a9);
  unsigned int v27 = *a6 - 1;
  if (v27 < 6)
  {
    uint64_t v28 = qword_22B26FE30[v27];
LABEL_32:
    xpc_dictionary_set_uint64(v25, "shader_kind", v28);
    goto LABEL_33;
  }
  if (v21 == 1)
  {
    uint64_t v28 = 1;
    goto LABEL_32;
  }
LABEL_33:
  analytics_send_event();
  xpc_object_t v29 = xpc_copy(v25);
  xpc_release(v25);
  llvm::enableTimePasses(v30);
LABEL_34:
  llvm::NamedRegionTimer::NamedRegionTimer();
  unsigned int v31 = v21 - 1;
  if (v31 > 1)
  {
    uint64_t v32 = 0;
  }
  else
  {
    MEMORY[0x230F42280](v189);
    if (!v10)
    {
      if (a4)
      {
        if (!qword_2683E8568) {
          operator new();
        }
        uint64_t v10 = (llvm::Module *)(*(uint64_t (**)(char *, uint64_t))(qword_2683E8568 + 16))(v189, a3);
      }
      else
      {
        uint64_t v10 = 0;
      }
    }
    xpc_object_t v173 = v29;
    uint64_t v33 = a1[8];
    if (!*(void *)(v33 + 328)) {
      sub_22B1EA888();
    }
    uint64_t v32 = 0;
    switch(*a6)
    {
      case 1:
        operator new();
      case 2:
        v205[0].__locale_ = v179;
        v205[1].__locale_ = 0;
        v206[0] = v179;
        operator new();
      case 3:
        std::string::size_type v37 = (void *)sub_22B25DA2C(v33, v10, (uint64_t)v179, v174, v175);
        if (!v37) {
          goto LABEL_277;
        }
        BOOL v42 = (_DWORD *)((char *)v37 + *(void *)(*v37 - 24));
        goto LABEL_85;
      case 4:
        v205[0].__locale_ = v179;
        v205[1].__locale_ = v179;
        v206[0] = 0;
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, llvm::Module *))(**(void **)(v33 + 32) + 64))(*(void *)(v33 + 32), v33, v10);
        goto LABEL_84;
      case 5:
        *(void *)std::string __p = v179;
        *(void *)&__p[8] = v179;
        *(void *)&__p[16] = 0;
        v205[0].__locale_ = (std::locale::__imp *)"air.kernel";
        LOWORD(v207) = 259;
        uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v10, (const llvm::Twine *)v205);
        uint64_t v40 = *(uint64_t **)(v33 + 32);
        uint64_t v41 = *v40;
        if (NamedMetadata) {
          uint64_t v38 = (*(uint64_t (**)(uint64_t *, uint64_t, llvm::Module *))(v41 + 56))(v40, v33, v10);
        }
        else {
          uint64_t v38 = (*(uint64_t (**)(uint64_t *, uint64_t, llvm::Module *))(v41 + 64))(v40, v33, v10);
        }
        goto LABEL_84;
      case 6:
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, llvm::Module *, std::locale::__imp *))(**(void **)(v33 + 32)
                                                                                               + 48))(*(void *)(v33 + 32), v33, v10, v179);
        goto LABEL_84;
      case 7:
        operator new();
      case 8:
        operator new();
      case 9:
        operator new();
      case 0xA:
        operator new();
      case 0xB:
        operator new();
      case 0xE:
        operator new();
      case 0xF:
        sub_22B260AD8(v33, (uint64_t)v189);
      case 0x10:
        sub_22B260C1C(v33, (uint64_t)v189);
      case 0x11:
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(v33 + 32) + 104))(*(void *)(v33 + 32), v33, v189);
        goto LABEL_84;
      case 0x12:
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(v33 + 32) + 96))(*(void *)(v33 + 32), v33, v189);
        goto LABEL_84;
      case 0x13:
        operator new();
      case 0x14:
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(v33 + 32) + 40))(*(void *)(v33 + 32), v33, v189);
        goto LABEL_84;
      case 0x15:
      case 0x16:
        uint64_t v34 = *(void *)(v33 + 32);
        int v35 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v34 + 32);
        uint64_t v36 = a1[8];
        goto LABEL_71;
      case 0x17:
        uint64_t v34 = *(void *)(v33 + 32);
        int v35 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v34 + 32);
        uint64_t v36 = a1[8];
        goto LABEL_71;
      case 0x18:
        uint64_t v34 = *(void *)(v33 + 32);
        int v35 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v34 + 32);
        uint64_t v36 = a1[8];
LABEL_71:
        uint64_t v38 = v35(v34, v36, v189);
        goto LABEL_84;
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
        sub_22B2451A8();
      case 0x1D:
      case 0x1E:
      case 0x1F:
        operator new();
      case 0x21:
        sub_22B25F318(v33, (uint64_t)v189, v13);
      case 0x22:
        sub_22B2600E0(v33, (uint64_t)v189, v13);
      case 0x23:
        sub_22B260614(v33, (uint64_t)v189);
      case 0x24:
        sub_22B25F934(v33, (uint64_t)v189, v13);
      case 0x25:
        sub_22B2609EC(v33, (uint64_t)v189);
      case 0x26:
        sub_22B260890(v33, (uint64_t)v189);
      case 0x27:
        operator new();
      case 0x3F:
        sub_22B260D60(v33, (uint64_t)v189);
      case 0x40:
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(v33 + 32) + 80))(*(void *)(v33 + 32), v33, v189);
        goto LABEL_84;
      case 0x41:
        sub_22B260E94(v33, (uint64_t)v189);
      case 0x42:
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(v33 + 32) + 88))(*(void *)(v33 + 32), v33, v189);
LABEL_84:
        BOOL v42 = (_DWORD *)v38;
        if (v38)
        {
LABEL_85:
          uint64_t v43 = (*(uint64_t (**)(_DWORD *))(*(void *)v42 + 40))(v42);
          uint64_t v32 = v43;
          if (v43)
          {
            unsigned int v184 = v43;
            a1[7] = *((void *)v42 + 49);
            unsigned int v44 = (char *)*((void *)v42 + 46);
            uint64_t v45 = (unsigned char *)*((void *)v42 + 47);
            *((unsigned char *)v42 + 870) = 1;
            sub_22B1ED19C((uint64_t)(v42 + 200), v45 - v44, 4uLL);
            sub_22B1ED19C((uint64_t)(v42 + 200), v45 - v44, 4uLL);
            uint64_t v46 = v45 - v44;
            if (v45 == v44) {
              int v47 = (char *)&unk_22B26FE60;
            }
            else {
              int v47 = v44;
            }
            if (v45 != v44)
            {
              uint64_t v48 = v46 >> 2;
              std::string::size_type v49 = v47 - 4;
              do
              {
                uint64_t v50 = v48 - 1;
                int v51 = *(_DWORD *)&v49[4 * v48];
                sub_22B1ECFA8((uint64_t)(v42 + 200), 4uLL);
                sub_22B1ED138((uint64_t)(v42 + 200), v42[208] - v42[212] + v42[210] - v51 + 4);
                uint64_t v48 = v50;
              }
              while (v50);
            }
            *((unsigned char *)v42 + 870) = 0;
            int v52 = sub_22B1ED138((uint64_t)(v42 + 200), (unint64_t)v46 >> 2);
            LODWORD(v205[0].__locale_) = 0;
            int v53 = (*(uint64_t (**)(void, void, void))(**((void **)v42 + 43) + 360))(*((void *)v42 + 43), *((void *)v42 + 58), v42[128]);
            *((unsigned char *)v42 + 870) = 1;
            int v54 = v42[208] - v42[212] + v42[210];
            sub_22B1ED0D4((uint64_t *)v42 + 100, 4, v53);
            sub_22B1ED0D4((uint64_t *)v42 + 100, 6, (int)v205[0].__locale_);
            int v55 = sub_22B1ECAA8((uint64_t)(v42 + 200), v54);
            *((unsigned char *)v42 + 870) = 1;
            int v56 = v42[208] - v42[212] + v42[210];
            if (v52)
            {
              sub_22B1ECFA8((uint64_t)(v42 + 200), 4uLL);
              sub_22B1ED0D4((uint64_t *)v42 + 100, 8, v42[208] - v42[212] + v42[210] - v52 + 4);
            }
            if (v55)
            {
              sub_22B1ECFA8((uint64_t)(v42 + 200), 4uLL);
              sub_22B1ED0D4((uint64_t *)v42 + 100, 6, v42[208] - v42[212] + v42[210] - v55 + 4);
            }
            sub_22B1ECA00((uint64_t *)v42 + 100, 4, *((void *)v42 + 45));
            int v57 = sub_22B1ECAA8((uint64_t)(v42 + 200), v56);
            sub_22B1EE128((uint64_t)(v42 + 200), v57);
            long long v203 = 0u;
            long long v204 = 0u;
            long long v201 = 0u;
            long long v202 = 0u;
            long long v199 = 0u;
            long long v200 = 0u;
            uint64_t v58 = *((void *)v42 + 64);
            uint64_t v59 = *((void *)v42 + 59);
            *(void *)std::string __p = *((void *)v42 + 58);
            *(void *)&__p[8] = v58;
            uint64_t v60 = *((void *)v42 + 65);
            *(void *)&__p[16] = v59;
            uint64_t v196 = v60;
            uint64_t v61 = *((void *)v42 + 66);
            uint64_t v197 = *((void *)v42 + 60);
            uint64_t v198 = v61;
            uint64_t v62 = *((void *)v42 + 68);
            uint64_t v63 = *((void *)v42 + 63);
            *(void *)&long long v203 = *((void *)v42 + 62);
            *((void *)&v203 + 1) = v62;
            uint64_t v64 = *((void *)v42 + 69);
            *(void *)&long long v202 = v63;
            *((void *)&v202 + 1) = v64;
            uint64_t v65 = *((void *)v42 + 94);
            *((void *)&v200 + 1) = (v42[184] - v65 + v42[186]);
            if (DWORD2(v200)) {
              *(void *)&long long v200 = v65;
            }
            uint64_t v66 = *((void *)v42 + 118);
            *((void *)&v201 + 1) = (v42[232] - v66 + v42[234]);
            if (DWORD2(v201)) {
              *(void *)&long long v201 = v66;
            }
            uint64_t v67 = *((void *)v42 + 106);
            *((void *)&v199 + 1) = (v42[208] - v67 + v42[210]);
            if (DWORD2(v199)) {
              *(void *)&long long v199 = v67;
            }
            uint64_t v68 = *((void *)v42 + 50);
            if (*(char *)(v68 + 303) < 0)
            {
              sub_22B1DC004(__dst, *(void **)(v68 + 280), *(void *)(v68 + 288));
            }
            else
            {
              uint64_t v69 = v68 + 280;
              *(_OWORD *)__dst = *(_OWORD *)v69;
              uint64_t v194 = *(void *)(v69 + 16);
            }
            int v71 = (void *)HIBYTE(v194);
            BOOL v72 = __dst;
            if (v194 < 0)
            {
              BOOL v72 = (void **)__dst[0];
              int v71 = __dst[1];
            }
            *(void *)&long long v204 = v72;
            *((void *)&v204 + 1) = v71;
            int v73 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v42 + 24))(v42);
            if (sub_22B1EC788(v73))
            {
              if (MGGetBoolAnswer())
              {
                uint64_t v74 = (const char *)sub_22B1DEEE4("AGC_DUMP_FAKE_MACHO");
                if (v74)
                {
                  if (*v74 != 48 && atoi(v74))
                  {
                    int v75 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v42 + 24))(v42);
                    uint64_t v76 = snprintf(__str, 0x80uLL, "Fake-MachO for %s shader %u", v75, v42[174]);
                    sub_22B1E69D0(v76, "------ Start %s -------\n", v77, v78, v79, v80, v81, v82, (char)__str);
                    char v90 = (void *)qword_2683E92E8;
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E86A0, memory_order_acquire) & 1) == 0)
                    {
                      uint64_t v83 = __cxa_guard_acquire(&qword_2683E86A0);
                      if (v83)
                      {
                        sub_22B1D7BF0(qword_2683E85C8, "binary");
                        sub_22B1D7BF0(&qword_2683E85C8[3], "backend_metadata");
                        sub_22B1D7BF0(&qword_2683E85C8[6], "target_backend_metadata");
                        sub_22B1D7BF0(&qword_2683E85C8[9], "statistics_metadata");
                        sub_22B1D7BF0(&qword_2683E85C8[12], "translator_metadata");
                        sub_22B1D7BF0(&qword_2683E85C8[15], "target_translator_metadata");
                        sub_22B1D7BF0(&qword_2683E85C8[18], "backend_telemetry_data");
                        sub_22B1D7BF0(&qword_2683E85C8[21], "backend_counter_data");
                        sub_22B1D7BF0(&qword_2683E85C8[24], "remarks");
                        __cxa_atexit((void (*)(void *))sub_22B1EE198, qword_2683E85C8, &dword_22B1D2000);
                        __cxa_guard_release(&qword_2683E86A0);
                      }
                    }
                    uint64_t v91 = 0;
                    uint64_t v92 = v90 + 1;
                    uint64_t v176 = *(void **)(MEMORY[0x263F8C2B8] + 72);
                    unint64_t v177 = *(std::locale::__imp **)(MEMORY[0x263F8C2B8] + 64);
                    unint64_t v178 = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
                    unsigned int v172 = v31;
                    int v180 = v90 + 1;
                    uint64_t v182 = v90;
                    do
                    {
                      uint64_t v93 = *(void *)&__p[16 * v91 + 8];
                      if (v93)
                      {
                        uint64_t v94 = sub_22B1E6CB0(v90, (uint64_t)".segment ", 9);
                        uint64_t v95 = (char *)&qword_2683E85C8[3 * v91];
                        int v96 = v95[23];
                        if (v96 >= 0) {
                          uint64_t v97 = (char *)&qword_2683E85C8[3 * v91];
                        }
                        else {
                          uint64_t v97 = *(char **)v95;
                        }
                        if (v96 >= 0) {
                          uint64_t v98 = v95[23];
                        }
                        else {
                          uint64_t v98 = *((void *)v95 + 1);
                        }
                        unint64_t v99 = sub_22B1E6CB0(v94, (uint64_t)v97, v98);
                        sub_22B1E6CB0(v99, (uint64_t)", size ", 7);
                        *(_DWORD *)((char *)v92 + *(void *)(*v90 - 24)) = *(_DWORD *)((unsigned char *)v92
                                                                                        + *(void *)(*v90 - 24)) & 0xFFFFFFB5 | 2;
                        unsigned int v100 = (void *)std::ostream::operator<<();
                        std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(*v100 - 24)));
                        int v101 = std::locale::use_facet(v205, MEMORY[0x263F8C108]);
                        ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
                        std::locale::~locale(v205);
                        std::ostream::put();
                        std::ostream::flush();
                        *(void *)&long long v191 = v90;
                        uint64_t v83 = sub_22B1EA970((char **)&v191);
                        if (v83)
                        {
                          sub_22B1ED4EC((uint64_t)v205);
                          BOOL v102 = (uint64_t *)v191;
                          sub_22B1E6CB0((void *)v191, (uint64_t)"{", 1);
                          std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
                          int v103 = std::locale::use_facet(v192, MEMORY[0x263F8C108]);
                          ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
                          std::locale::~locale(v192);
                          std::ostream::put();
                          std::ostream::flush();
                          for (uint64_t i = 0; i != v93; ++i)
                          {
                            if ((i & 0x1F) == 0) {
                              sub_22B1E6CB0(v102, (uint64_t)"\t", 1);
                            }
                            sub_22B1E6CB0(v102, (uint64_t)&unk_22B27C63D, 0);
                            uint64_t v105 = *v102;
                            uint64_t v106 = *v102;
                            *(uint64_t *)((char *)v102 + *(void *)(*v102 - 24) + 24) = 2;
                            unint64_t v107 = (const std::ios_base *)((char *)v102 + *(void *)(v106 - 24));
                            if (v107[1].__fmtflags_ == -1)
                            {
                              std::ios_base::getloc(v107);
                              int v108 = std::locale::use_facet(v192, MEMORY[0x263F8C108]);
                              ((void (*)(const std::locale::facet *, uint64_t))v108->__vftable[2].~facet_0)(v108, 32);
                              std::locale::~locale(v192);
                              uint64_t v105 = *v102;
                            }
                            v107[1].__fmtflags_ = 48;
                            *(_DWORD *)((char *)v102 + *(void *)(v105 - 24) + 8) = *(_DWORD *)((unsigned char *)v102
                                                                                               + *(void *)(v105 - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
                            char v109 = (void *)std::ostream::operator<<();
                            sub_22B1E6CB0(v109, (uint64_t)" ", 1);
                            if ((i & 0x1F) == 0x1F)
                            {
                              std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
                              char v110 = std::locale::use_facet(v192, MEMORY[0x263F8C108]);
                              ((void (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10);
                              std::locale::~locale(v192);
                              std::ostream::put();
                              std::ostream::flush();
                            }
                          }
                          std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
                          uint64_t v111 = (std::locale::id *)MEMORY[0x263F8C108];
                          unint64_t v112 = std::locale::use_facet(v192, MEMORY[0x263F8C108]);
                          ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
                          std::locale::~locale(v192);
                          std::ostream::put();
                          std::ostream::flush();
                          sub_22B1E6CB0(v102, (uint64_t)"}", 1);
                          std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
                          char v113 = std::locale::use_facet(v192, v111);
                          ((void (*)(const std::locale::facet *, uint64_t))v113->__vftable[2].~facet_0)(v113, 10);
                          std::locale::~locale(v192);
                          std::ostream::put();
                          std::ostream::flush();
                          std::ostream::flush();
                          v205[0].__locale_ = v178;
                          *(std::locale::__imp **)((char *)&v205[0].__locale_ + *((void *)v178 - 3)) = v177;
                          v206[0] = v176;
                          v206[1] = (void *)(MEMORY[0x263F8C318] + 16);
                          if (SHIBYTE(v209) < 0) {
                            operator delete(v208);
                          }
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          uint64_t v83 = MEMORY[0x230F43590](&v210);
                          uint64_t v92 = v180;
                          char v90 = v182;
                        }
                        unsigned int v31 = v172;
                      }
                      ++v91;
                    }
                    while (v91 != 9);
                    sub_22B1E69D0(v83, "------ End %s -------\n", v84, v85, v86, v87, v88, v89, (char)__str);
                  }
                }
              }
            }
            size_t v114 = 40;
            for (uint64_t j = 8; j != 152; j += 16)
              v114 += (*(void *)&__p[j] + 7) & 0xFFFFFFFFFFFFFFF8;
            a1[1] = v114;
            BOOL v116 = malloc_type_calloc(1uLL, v114, 0x24EDDCFEuLL);
            uint64_t v117 = 0;
            *a1 = v116;
            char v118 = (char *)(v116 + 10);
            do
            {
              size_t v119 = *(void *)&__p[v117 + 8];
              *BOOL v116 = v119;
              if (v119) {
                memcpy(v118, *(const void **)&__p[v117], v119);
              }
              v118 += (v119 + 7) & 0xFFFFFFFFFFFFFFF8;
              v117 += 16;
              ++v116;
            }
            while (v117 != 144);
            if (SHIBYTE(v194) < 0) {
              operator delete(__dst[0]);
            }
            uint64_t v32 = v184;
            goto LABEL_151;
          }
          char v70 = (const char *)(v42 + 102);
          if (*((char *)v42 + 431) < 0)
          {
            if (!*((void *)v42 + 52))
            {
LABEL_151:
              (*(void (**)(_DWORD *))(*(void *)v42 + 16))(v42);
              goto LABEL_152;
            }
            char v70 = *(const char **)v70;
          }
          else if (!*((unsigned char *)v42 + 431))
          {
            goto LABEL_151;
          }
          a1[2] = strdup(v70);
          goto LABEL_151;
        }
LABEL_277:
        uint64_t v32 = 0;
LABEL_152:
        llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v189);
        xpc_object_t v29 = v173;
        break;
      default:
        goto LABEL_152;
    }
  }
  if (v190) {
    llvm::Timer::stopTimer(v190);
  }
  if (v31 > 1) {
    return 0;
  }
  has_internal_diagnostics = (llvm *)os_variant_has_internal_diagnostics();
  if (has_internal_diagnostics)
  {
    unsigned int v185 = v32;
    llvm::GetStatistics((uint64_t *)v205, has_internal_diagnostics);
    locale = v205[0].__locale_;
    uint64_t v122 = v205[1].__locale_;
    while (locale != v122)
    {
      if (!*(void *)locale) {
        goto LABEL_183;
      }
      sub_22B1E2118(__p, *(void **)locale, *((void *)locale + 1));
      if ((__p[23] & 0x80000000) != 0)
      {
        if (*(void *)&__p[8] == 19)
        {
          BOOL v127 = **(void **)__p != 0x49747361466D754ELL
              || *(void *)(*(void *)__p + 8) != 0x756C6961466C6573
              || *(void *)(*(void *)__p + 11) != 0x736572756C696146;
          operator delete(*(void **)__p);
          if (!v127) {
LABEL_181:
          }
            xpc_dictionary_set_uint64(v29, "stat_numfastiselfailures", *((unsigned int *)locale + 4));
        }
        else
        {
          operator delete(*(void **)__p);
        }
      }
      else if (__p[23] == 19)
      {
        BOOL v123 = *(void *)__p == 0x49747361466D754ELL && *(void *)&__p[8] == 0x756C6961466C6573;
        if (v123 && *(void *)&__p[11] == 0x736572756C696146) {
          goto LABEL_181;
        }
      }
LABEL_183:
      if (!*(void *)locale) {
        goto LABEL_208;
      }
      sub_22B1E2118(__p, *(void **)locale, *((void *)locale + 1));
      if ((__p[23] & 0x80000000) != 0)
      {
        if (*(void *)&__p[8] == 18)
        {
          BOOL v132 = **(void **)__p != 0x49747361466D754ELL
              || *(void *)(*(void *)__p + 8) != 0x65636375536C6573
              || *(_WORD *)(*(void *)__p + 16) != 29555;
          operator delete(*(void **)__p);
          if (!v132) {
LABEL_206:
          }
            xpc_dictionary_set_uint64(v29, "stat_numfastiselsuccesses", *((unsigned int *)locale + 4));
        }
        else
        {
          operator delete(*(void **)__p);
        }
      }
      else if (__p[23] == 18)
      {
        BOOL v128 = *(void *)__p == 0x49747361466D754ELL && *(void *)&__p[8] == 0x65636375536C6573;
        if (v128 && *(unsigned __int16 *)&__p[16] == 29555) {
          goto LABEL_206;
        }
      }
LABEL_208:
      if (*(void *)locale)
      {
        sub_22B1E2118(__p, *(void **)locale, *((void *)locale + 1));
        if ((__p[23] & 0x80000000) != 0)
        {
          if (*(void *)&__p[8] != 17)
          {
            operator delete(*(void **)__p);
            goto LABEL_233;
          }
          BOOL v137 = **(void **)__p != 0x74636E75466D754ELL
              || *(void *)(*(void *)__p + 8) != 0x65736552736E6F69
              || *(unsigned char *)(*(void *)__p + 16) != 116;
          operator delete(*(void **)__p);
          if (v137) {
            goto LABEL_233;
          }
        }
        else
        {
          if (__p[23] != 17) {
            goto LABEL_233;
          }
          BOOL v133 = *(void *)__p == 0x74636E75466D754ELL && *(void *)&__p[8] == 0x65736552736E6F69;
          if (!v133 || __p[16] != 116) {
            goto LABEL_233;
          }
        }
        xpc_dictionary_set_uint64(v29, "stat_numfunctionsreset", *((unsigned int *)locale + 4));
      }
LABEL_233:
      locale = (std::locale::__imp *)((char *)locale + 24);
    }
    uint64_t NamedTimer = llvm::getNamedTimer();
    if (NamedTimer)
    {
      unint64_t v139 = (llvm::Timer *)NamedTimer;
      xpc_dictionary_set_uint64(v29, "time_total", ((*(double *)(NamedTimer + 8) + *(double *)(NamedTimer + 16)) * 1000000.0));
      llvm::Timer::clear(v139);
    }
    uint64_t v140 = llvm::getNamedTimer();
    if (v140)
    {
      char v141 = (llvm::Timer *)v140;
      xpc_dictionary_set_uint64(v29, "time_dagsel_dagcombining1", ((*(double *)(v140 + 8) + *(double *)(v140 + 16)) * 1000000.0));
      llvm::Timer::clear(v141);
    }
    uint64_t v142 = llvm::getNamedTimer();
    if (v142)
    {
      char v143 = (llvm::Timer *)v142;
      xpc_dictionary_set_uint64(v29, "time_dagisel_typelegalization", ((*(double *)(v142 + 8) + *(double *)(v142 + 16)) * 1000000.0));
      llvm::Timer::clear(v143);
    }
    uint64_t v144 = llvm::getNamedTimer();
    if (v144)
    {
      char v145 = (llvm::Timer *)v144;
      xpc_dictionary_set_uint64(v29, "time_dagisel_dagcombiningafterlegalizetypes", ((*(double *)(v144 + 8) + *(double *)(v144 + 16)) * 1000000.0));
      llvm::Timer::clear(v145);
    }
    uint64_t v146 = llvm::getNamedTimer();
    if (v146)
    {
      uint64_t v147 = (llvm::Timer *)v146;
      xpc_dictionary_set_uint64(v29, "time_dagisel_vectorlegalization", ((*(double *)(v146 + 8) + *(double *)(v146 + 16)) * 1000000.0));
      llvm::Timer::clear(v147);
    }
    uint64_t v148 = llvm::getNamedTimer();
    if (v148)
    {
      char v149 = (llvm::Timer *)v148;
      xpc_dictionary_set_uint64(v29, "time_dagisel_typelegalization2", ((*(double *)(v148 + 8) + *(double *)(v148 + 16)) * 1000000.0));
      llvm::Timer::clear(v149);
    }
    uint64_t v150 = llvm::getNamedTimer();
    if (v150)
    {
      unint64_t v151 = (llvm::Timer *)v150;
      xpc_dictionary_set_uint64(v29, "time_dagisel_dagcombiningafterlegalizevectors", ((*(double *)(v150 + 8) + *(double *)(v150 + 16)) * 1000000.0));
      llvm::Timer::clear(v151);
    }
    uint64_t v152 = llvm::getNamedTimer();
    if (v152)
    {
      char v153 = (llvm::Timer *)v152;
      xpc_dictionary_set_uint64(v29, "time_dagisel_legalization", ((*(double *)(v152 + 8) + *(double *)(v152 + 16)) * 1000000.0));
      llvm::Timer::clear(v153);
    }
    uint64_t v154 = llvm::getNamedTimer();
    if (v154)
    {
      char v155 = (llvm::Timer *)v154;
      xpc_dictionary_set_uint64(v29, "time_dagisel_dagcombining2", ((*(double *)(v154 + 8) + *(double *)(v154 + 16)) * 1000000.0));
      llvm::Timer::clear(v155);
    }
    uint64_t v156 = llvm::getNamedTimer();
    if (v156)
    {
      uint64_t v157 = (llvm::Timer *)v156;
      xpc_dictionary_set_uint64(v29, "time_dagisel_instructionselection", ((*(double *)(v156 + 8) + *(double *)(v156 + 16)) * 1000000.0));
      llvm::Timer::clear(v157);
    }
    uint64_t v158 = llvm::getNamedTimer();
    if (v158)
    {
      int v159 = (llvm::Timer *)v158;
      xpc_dictionary_set_uint64(v29, "time_dagisel_instructionscheduling", ((*(double *)(v158 + 8) + *(double *)(v158 + 16)) * 1000000.0));
      llvm::Timer::clear(v159);
    }
    uint64_t v160 = llvm::getNamedTimer();
    if (v160)
    {
      int v161 = (llvm::Timer *)v160;
      xpc_dictionary_set_uint64(v29, "time_dagisel_instructioncreation", ((*(double *)(v160 + 8) + *(double *)(v160 + 16)) * 1000000.0));
      llvm::Timer::clear(v161);
    }
    if (xpc_dictionary_get_uint64(v29, "instruction_selector") == 2)
    {
      uint64_t v162 = llvm::getNamedTimer();
      if (v162)
      {
        int v163 = (llvm::Timer *)v162;
        xpc_dictionary_set_uint64(v29, "time_gisel_irtranslator", ((*(double *)(v162 + 8) + *(double *)(v162 + 16)) * 1000000.0));
        llvm::Timer::clear(v163);
      }
      uint64_t v164 = llvm::getNamedTimer();
      if (v164)
      {
        int v165 = (llvm::Timer *)v164;
        xpc_dictionary_set_uint64(v29, "time_gisel_legalizer", ((*(double *)(v164 + 8) + *(double *)(v164 + 16)) * 1000000.0));
        llvm::Timer::clear(v165);
      }
      uint64_t v166 = llvm::getNamedTimer();
      if (v166)
      {
        size_t v167 = (llvm::Timer *)v166;
        xpc_dictionary_set_uint64(v29, "time_gisel_regbankallocator", ((*(double *)(v166 + 8) + *(double *)(v166 + 16)) * 1000000.0));
        llvm::Timer::clear(v167);
      }
      uint64_t v168 = llvm::getNamedTimer();
      if (v168)
      {
        __darwin_ino64_t v169 = (llvm::Timer *)v168;
        xpc_dictionary_set_uint64(v29, "time_gisel_instructionselector", ((*(double *)(v168 + 8) + *(double *)(v168 + 16)) * 1000000.0));
        llvm::Timer::clear(v169);
      }
    }
    int v170 = (void *)MEMORY[0x230F43970](v29);
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v170;
      _os_log_impl(&dword_22B1D2000, MEMORY[0x263EF8438], OS_LOG_TYPE_INFO, "Compilation stats+times: %s\n", __p, 0xCu);
    }
    free(v170);
    analytics_send_event();
    if (v205[0].__locale_)
    {
      v205[1] = v205[0];
      operator delete(v205[0].__locale_);
    }
    uint64_t v32 = v185;
  }
  if (v29) {
    xpc_release(v29);
  }
  *a7 = *a1;
  *a8 = a1[1];
  return v32;
}

uint64_t GLCompilerLogBuildRequest(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5, int a6, uint64_t a7)
{
  int v11 = a6;
  uint64_t result = sub_22B2122F0(a2, a3, a7, (uint64_t)"state", &v11);
  if (result) {
    return sub_22B2122F0(a4, a5, a7, (uint64_t)"bitcode", 0);
  }
  return result;
}

void GLCompilerReleaseReply(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t MTLCompilerCreate(unsigned int *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  size_t v5 = a1[1];
  size_t v6 = a1[2];
  uint64_t v7 = a1 + 3;
  sub_22B1E2118(&__dst, a1 + 3, v5);
  sub_22B1E2118(&__p, (char *)v7 + v5, v6);
  unint64_t v8 = (v5 + v6 + 12);
  memset(&v11, 0, sizeof(v11));
  if (a2 > v8) {
    std::string::append(&v11, (const std::string::value_type *)a1 + v8, a2 - v8);
  }
  uint64_t v9 = sub_22B1E3D2C((uint64_t)&v11, v4, 2u);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(__dst);
  }
  return v9;
}

uint64_t MTLCompilerBuildRequestWithOptions(void *a1, _DWORD *a2, uint64_t a3, char a4, llvm::Module *a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11, char **a12)
{
  *a9 = 0;
  *a11 = 0;
  uint64_t v18 = mach_absolute_time();
  int v34 = 0;
  int v19 = sub_22B1E7574(a1, a2, 0, 0, a5, &v34, a6, a7, 1u);
  int v26 = v19;
  if ((a4 & 2) != 0)
  {
    *a11 = 32;
    uint64_t v28 = mach_absolute_time();
    unint64_t v29 = sub_22B21618C(v28 - v18);
    unint64_t v30 = v29 - a1[7];
    a1[5] = v29;
    a1[6] = v30;
    *a10 = a1 + 4;
    if (v26) {
      goto LABEL_3;
    }
  }
  else if (v19)
  {
LABEL_3:
    uint64_t result = 0;
    *a12 = 0;
    return result;
  }
  uint64_t v33 = (char *)a1[2];
  uint64_t v32 = (char **)(a1 + 2);
  unsigned int v31 = v33;
  if (!v33) {
    unsigned int v31 = sub_22B1EA204(v32, v34);
  }
  *a12 = v31;
  sub_22B1E69D0((uint64_t)v31, "** Compilation failed with error: %s **", v20, v21, v22, v23, v24, v25, (char)v31);
  return 1;
}

char *sub_22B1EA204(char **a1, int a2)
{
  sub_22B1D7BF0(&v7, "Internal error during ");
  if ((a2 - 3) <= 3) {
    std::string::append(&v7, off_26488D3D8[a2 - 3]);
  }
  std::string::append(&v7, "function compilation");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v5 = (void *)v7.__r_.__value_.__r.__words[0];
    uint64_t v4 = strdup(v7.__r_.__value_.__l.__data_);
    *a1 = v4;
    operator delete(v5);
  }
  else
  {
    uint64_t v4 = strdup((const char *)&v7);
    *a1 = v4;
  }
  return v4;
}

uint64_t MTLCompilerBuildRequestWithSerializedBitcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, char **a13)
{
  *a11 = 0;
  *a9 = 0;
  *a7 = 0;
  *a12 = 0;
  *a10 = 0;
  *a8 = 0;
  *a13 = sub_22B1EA204(&v14, 0);
  return 1;
}

uint64_t MTLCompilerBuildRequest(void *a1, _DWORD *a2, uint64_t a3, llvm::Module *a4, void *a5, void *a6, char **a7)
{
  int v19 = 0;
  if (sub_22B1E7574(a1, a2, 0, 0, a4, &v19, a5, a6, 1u))
  {
    uint64_t result = 0;
    *a7 = 0;
  }
  else
  {
    uint64_t v18 = (char *)a1[2];
    uint64_t v17 = (char **)(a1 + 2);
    int v16 = v18;
    if (!v18) {
      int v16 = sub_22B1EA204(v17, v19);
    }
    *a7 = v16;
    sub_22B1E69D0((uint64_t)v16, "** Compilation failed with error: %s **", v9, v10, v11, v12, v13, v14, (char)v16);
    return 1;
  }
  return result;
}

void MTLCompilerReleaseReply(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t AIRNTInit()
{
  return 0;
}

uint64_t AIRNTInitCompilationContext()
{
  return 0;
}

uint64_t AIRNTEmitPipelineImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15)
{
  if (a15) {
    *a15 = strdup("[AGX] Plugin interface not implemented: AIRNTEmitPipelineImage");
  }
  return 0;
}

uint64_t sub_22B1EA428(void *a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1[43] + 840);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  if (result)
  {
    *a2 = result;
    return result != *(_DWORD *)(a1[43] + 840);
  }
  return result;
}

uint64_t sub_22B1EA494()
{
  return 0;
}

uint64_t sub_22B1EA4A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 576);
}

uint64_t sub_22B1EA4B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

BOOL sub_22B1EA534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_22B1EA970((char **)&qword_2683E92E8)) {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a3);
  BOOL result = sub_22B1EA970((char **)&qword_2683E92E8);
  if (result) {
    operator new();
  }
  return result;
}

void sub_22B1EA888()
{
}

BOOL sub_22B1EA970(char **a1)
{
  v5[17] = *MEMORY[0x263EF8340];
  if (*a1)
  {
    if (dword_2683E92F0)
    {
      uint64_t v2 = &(*a1)[*(void *)(*(void *)*a1 - 24)];
      if ((v2[32] & 5) == 0)
      {
        (*(void (**)(void *__return_ptr))(**((void **)v2 + 5) + 32))(v5);
        if (v5[16] >= (uint64_t)dword_2683E92F0)
        {
          sub_22B1E6CB0(*a1, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          BOOL v3 = *a1;
          if (*a1)
          {
            if (v3 != (char *)MEMORY[0x263F8C0F8])
            {
              (*(void (**)(char *))(*(void *)v3 + 8))(v3);
              *a1 = 0;
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E85C0, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_2683E85C0))
              {
                qword_2683E85A8 = 0;
                qword_2683E85B0 = 0;
                unk_2683E85B8 = 0;
                __cxa_atexit(MEMORY[0x263F8C0B8], &qword_2683E85A8, &dword_22B1D2000);
                __cxa_guard_release(&qword_2683E85C0);
              }
              if (byte_2683E85BF < 0)
              {
                *(unsigned char *)qword_2683E85A8 = 0;
                qword_2683E85B0 = 0;
              }
              else
              {
                LOBYTE(qword_2683E85A8) = 0;
                byte_2683E85BF = 0;
              }
            }
          }
        }
      }
    }
  }
  return *a1 != 0;
}

uint64_t sub_22B1EAB38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    int v1 = 4;
  }
  else {
    int v1 = 8;
  }
  if ((**(_DWORD **)(a1 + 56) & v1) != 0)
  {
    v30[0] = 0;
    v30[1] = 0;
    uint64_t v31 = 0;
    int v22 = 0;
    char v26 = 0;
    uint64_t v27 = 0;
    int v28 = 1;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = MEMORY[0x263F8BBF0] + 16;
    unint64_t v29 = v30;
    sub_22B1EAD44((llvm::raw_ostream *)&v21);
    if (llvm::verifyModule())
    {
      BOOL v3 = (FILE *)*MEMORY[0x263EF8348];
      if (*(unsigned char *)(a1 + 48)) {
        uint64_t v4 = "before";
      }
      else {
        uint64_t v4 = "after";
      }
      uint64_t v5 = *(void **)(a1 + 32);
      if (v5)
      {
        sub_22B1E2118(&__p, v5, *(void *)(a1 + 40));
        if (v20 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
      }
      else
      {
        std::string __p = 0;
        uint64_t v19 = 0;
        p_p = (const char *)&__p;
        uint64_t v20 = 0;
      }
      std::string v7 = (const char *)v29;
      if (*((char *)v29 + 23) < 0) {
        std::string v7 = (const char *)*v29;
      }
      uint64_t v8 = fprintf(v3, "AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", "agc_llvm_object.cpp", 235, "runOnModule", v4, p_p, v7);
      if (SHIBYTE(v20) < 0) {
        operator delete(__p);
      }
      if (*(unsigned char *)(a1 + 48)) {
        char v15 = "before";
      }
      else {
        char v15 = "after";
      }
      int v16 = *(void **)(a1 + 32);
      if (v16)
      {
        uint64_t v8 = (uint64_t)sub_22B1E2118(&__p, v16, *(void *)(a1 + 40));
      }
      else
      {
        std::string __p = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
      sub_22B1E69D0(v8, "Module verification failed %s pass '%s' : %s", v9, v10, v11, v12, v13, v14, (char)v15);
      if (SHIBYTE(v20) < 0) {
        operator delete(__p);
      }
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[0]);
    }
  }
  return 0;
}

uint64_t sub_22B1EAD44(llvm::raw_ostream *this)
{
  if (*((void *)this + 4) != *((void *)this + 2)) {
    llvm::raw_ostream::flush_nonempty(this);
  }
  return MEMORY[0x270F93438](this, 0, 0, 0);
}

void sub_22B1EAD9C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_22B1EADA8()
{
  return 0;
}

uint64_t sub_22B1EADB0()
{
  return 0;
}

const char *sub_22B1EADB8()
{
  return "verify module";
}

void sub_22B1EADC8()
{
  MEMORY[0x230F420C0]();
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B1EAE04(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    int v1 = 1;
  }
  else {
    int v1 = 2;
  }
  if ((**(_DWORD **)(a1 + 56) & v1) != 0)
  {
    memset(&__str, 0, sizeof(__str));
    int v55 = 0;
    char v59 = 0;
    uint64_t v60 = 0;
    int v61 = 1;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v56 = 0;
    uint64_t v54 = MEMORY[0x263F8BBF0] + 16;
    p_str = &__str;
    sub_22B1EAD44((llvm::raw_ostream *)&v54);
    llvm::Module::print();
    if (v58 != v56) {
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v54);
    }
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = (std::string *)(v3 + 8);
    uint64_t v5 = *(unsigned __int8 *)(v3 + 31);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
    }
    else {
      uint64_t v6 = *(void *)(v3 + 16);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (v6 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &__str;
      }
      else {
        uint64_t v8 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v5 & 0x80) != 0)
      {
        BOOL v14 = memcmp(v4->__r_.__value_.__l.__data_, v8, *(void *)(v3 + 16)) != 0;
      }
      else if (*(unsigned char *)(v3 + 31))
      {
        uint64_t v9 = v5 - 1;
        uint64_t v10 = (unsigned __int8 *)(v3 + 8);
        do
        {
          int v12 = *v10++;
          int v11 = v12;
          int v13 = v8->__r_.__value_.__s.__data_[0];
          uint64_t v8 = (std::string *)((char *)v8 + 1);
          BOOL v14 = v11 != v13;
        }
        while (v11 == v13 && v9-- != 0);
      }
      else
      {
        BOOL v14 = 0;
      }
    }
    else
    {
      BOOL v14 = 1;
    }
    std::string::operator=(v4, &__str);
    memset(&v53, 0, sizeof(v53));
    MEMORY[0x230F433D0](&v53, "------ ");
    if (*(unsigned char *)(a1 + 48)) {
      int v16 = "Before ";
    }
    else {
      int v16 = "After ";
    }
    std::string::append(&v53, v16);
    std::string::append(&v53, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
    if (v14)
    {
      uint64_t v17 = std::string::append(&v53, " ------");
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v53;
      }
      else {
        LOBYTE(v24) = v53.__r_.__value_.__s.__data_[0];
      }
      sub_22B1E69D0((uint64_t)v17, "%s", v18, v19, v20, v21, v22, v23, (char)v24);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &__str;
      }
      else {
        LOBYTE(v32) = __str.__r_.__value_.__s.__data_[0];
      }
      sub_22B1E69D0(v25, "%s", v26, v27, v28, v29, v30, v31, (char)v32);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v53.__r_.__value_.__l.__size_;
      }
      int v34 = sub_22B1E6F78(__p, v33, 45);
      if (v52 >= 0) {
        uint64_t v41 = __p;
      }
      else {
        LOBYTE(v41) = __p[0];
      }
      sub_22B1E69D0((uint64_t)v34, "%s", v35, v36, v37, v38, v39, v40, (char)v41);
      if (v52 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::append(&v53, " (No change)");
      BOOL v42 = std::string::append(&v53, " ------");
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = &v53;
      }
      else {
        LOBYTE(v49) = v53.__r_.__value_.__s.__data_[0];
      }
      sub_22B1E69D0((uint64_t)v42, "%s", v43, v44, v45, v46, v47, v48, (char)v49);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v54);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void sub_22B1EB0E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

const char *sub_22B1EB0EC()
{
  return "print module";
}

void sub_22B1EB0FC()
{
  MEMORY[0x230F420C0]();
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B1EB138(uint64_t result)
{
  if (!*(void *)(result + 336)) {
    sub_22B1EA888();
  }
  return result;
}

uint64_t sub_22B1EB1B0(uint64_t result)
{
  if (!*(void *)(result + 344)) {
    sub_22B1EA888();
  }
  return result;
}

uint64_t sub_22B1EB228(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (a3 == 2)
    {
      if (*(char *)(a1 + 383) >= 0) {
        size_t v14 = *(unsigned __int8 *)(a1 + 383);
      }
      else {
        size_t v14 = *(void *)(a1 + 368);
      }
      sub_22B1EA4B0((uint64_t)__p, v14 + 15);
      if (v18 >= 0) {
        char v15 = __p;
      }
      else {
        char v15 = (void **)__p[0];
      }
      if (v14)
      {
        if (*(char *)(a1 + 383) >= 0) {
          int v16 = (const void *)(a1 + 360);
        }
        else {
          int v16 = *(const void **)(a1 + 360);
        }
        memmove(v15, v16, v14);
      }
      strcpy((char *)v15 + v14, "/ei_rt.metallib");
      if (v18 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
    }
    else
    {
      if (a3 != 1) {
        return v3;
      }
      uint64_t v6 = *(const void **)(*(void *)(a1 + 32) + 32);
      if (*(char *)(a1 + 383) >= 0) {
        size_t v7 = *(unsigned __int8 *)(a1 + 383);
      }
      else {
        size_t v7 = *(void *)(a1 + 368);
      }
      size_t v8 = strlen(*(const char **)(*(void *)(a1 + 32) + 32));
      uint64_t v9 = __p;
      sub_22B1EA4B0((uint64_t)__p, v7 + v8);
      if (v18 < 0) {
        uint64_t v9 = (void **)__p[0];
      }
      if (v7)
      {
        if (*(char *)(a1 + 383) >= 0) {
          uint64_t v10 = (const void *)(a1 + 360);
        }
        else {
          uint64_t v10 = *(const void **)(a1 + 360);
        }
        memmove(v9, v10, v7);
      }
      if (v8) {
        memmove((char *)v9 + v7, v6, v8);
      }
      *((unsigned char *)v9 + v7 + v8) = 0;
      if (v18 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
    }
    uint64_t v3 = sub_22B1EB3FC((uint64_t)v11, a2);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    return v3;
  }
  int v12 = (void *)(a1 + 384);
  if (*(char *)(a1 + 407) < 0) {
    int v12 = (void *)*v12;
  }
  return sub_22B1EB3FC((uint64_t)v12, a2);
}

uint64_t sub_22B1EB3FC(uint64_t a1, uint64_t a2)
{
  CompilerHelper = (uint64_t (***)(void, uint64_t))createCompilerHelper();
  uint64_t v5 = (**CompilerHelper)(CompilerHelper, a1);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a2);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  deleteCompilerHelper();
  return v7;
}

uint64_t sub_22B1EB4C8(uint64_t a1, uint64_t a2, int a3, llvm::Function *a4)
{
  v32[4] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 1;
  }
  uint64_t v8 = a2 + 24;
  for (uint64_t i = *(void *)(a2 + 32); i != v8; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v10 = (llvm::GlobalValue *)(i - 56);
    }
    else {
      uint64_t v10 = 0;
    }
    if (llvm::GlobalValue::isDeclaration(v10))
    {
      if ((*((unsigned char *)v10 + 34) & 0x80) != 0) {
        sub_22B1EB864((uint64_t)v10, 3);
      }
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 400) + 32);
  int v12 = *(void **)(v11 + 8);
  if (v12) {
    size_t v13 = strlen(*(const char **)(v11 + 8));
  }
  else {
    size_t v13 = 0;
  }
  sub_22B1EB77C(a2, v12, v13);
  uint64_t v15 = *(void *)(*(void *)(a1 + 400) + 32);
  if (*(void *)(v15 + 16)) {
    strlen(*(const char **)(v15 + 16));
  }
  llvm::Module::setDataLayout();
  uint64_t v31 = a2;
  void v32[3] = 0;
  int v16 = llvm::Linker::linkModules();
  sub_22B1EB7E0(v32);
  uint64_t v17 = MEMORY[0x230F42C50](v31);
  MEMORY[0x230F43600](v17, 0x10B2C407FF26C1CLL);
  if ((v16 & 1) == 0)
  {
    uint64_t v18 = *(void *)(a1 + 320);
    uint64_t v19 = v18 + 24;
    uint64_t v20 = *(void *)(v18 + 32);
    if (a3)
    {
      if (v20 != v18 + 24)
      {
        do
        {
          uint64_t v21 = (llvm::Function *)(v20 - 56);
          BOOL v22 = v20 == 0;
          uint64_t v20 = *(void *)(v20 + 8);
          if (v22) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v21;
          }
          if (v23 != a4 && !*((void *)v23 + 1)) {
            llvm::Function::eraseFromParent(v23);
          }
        }
        while (v20 != v19);
      }
    }
    else
    {
      unsigned int v24 = 1;
      if (v20 != v18 + 24)
      {
        do
        {
          uint64_t v25 = v20 - 56;
          BOOL v22 = v20 == 0;
          uint64_t v20 = *(void *)(v20 + 8);
          if (v22) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = v25;
          }
          if ((llvm::Function *)v26 != a4)
          {
            if (*(void *)(v26 + 8))
            {
              if ((*(unsigned char *)(v26 + 33) & 0x20) == 0
                && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v26) & 1) == 0)
              {
                *(_DWORD *)(v26 + 32) = *(_DWORD *)(v26 + 32) & 0xFFFFBFC0 | 0x4007;
                llvm::Function::addFnAttr();
                ++v24;
              }
            }
            else
            {
              llvm::Function::eraseFromParent((llvm::Function *)v26);
            }
          }
        }
        while (v20 != v19);
        uint64_t v18 = *(void *)(a1 + 320);
      }
      uint64_t v27 = v18 + 8;
      uint64_t v28 = *(void *)(v18 + 16);
      if (v28 != v18 + 8)
      {
        do
        {
          uint64_t v29 = v28 - 56;
          BOOL v22 = v28 == 0;
          uint64_t v28 = *(void *)(v28 + 8);
          if (v22) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v29;
          }
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v30) & 1) == 0)
          {
            if (*(void *)(v30 + 8)) {
              *(_DWORD *)(v30 + 32) = *(_DWORD *)(v30 + 32) & 0xFFFFBFC0 | 0x4007;
            }
            else {
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v30);
            }
          }
        }
        while (v28 != v27);
      }
      if (v24 > 1) {
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)(a1 + 400) + 320), *(llvm::Module **)(a1 + 320));
      }
    }
  }
  return v16 ^ 1u;
}

double sub_22B1EB77C(uint64_t a1, void *a2, size_t a3)
{
  if (a2)
  {
    sub_22B1E2118(&__dst, a2, a3);
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v7 = 0;
  }
  uint64_t v4 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)uint64_t v4 = __dst;
  *(void *)(a1 + 232) = v7;
  return result;
}

void *sub_22B1EB7E0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_22B1EB864(uint64_t result, char a2)
{
  int v2 = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = v2 & 0xFFFFFFF0 | a2 & 0xF;
  if ((v2 & 0x30) != 0)
  {
    uint64_t v3 = result;
    double result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0) {
      *(_DWORD *)(v3 + 32) |= 0x4000u;
    }
  }
  return result;
}

uint64_t sub_22B1EB8B0(uint64_t a1, const UInt8 *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  CFIndex v2 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v3 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v3 = v2;
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, a2, v3, 0x8000100u, 1u);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.AGXCompilerCore-S2A8");
  CFURLRef v6 = CFBundleCopyResourceURL(BundleWithIdentifier, v4, @"ds", 0);
  CFStringRef v7 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
  CFStringGetCString(v7, buffer, 1024, 0x600u);
  CFRelease(v4);
  CFRelease(v6);
  CFRelease(v7);
  uint64_t v8 = MEMORY[0x263F8C308] + 24;
  uint64_t v9 = MEMORY[0x263F8C308] + 64;
  v53[0] = MEMORY[0x263F8C308] + 64;
  uint64_t v10 = (void *)MEMORY[0x263F8C2A8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  v51[0] = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *(void *)((char *)v51 + *(void *)(v51[0] - 24)) = v11;
  v51[1] = 0;
  int v12 = (std::ios_base *)((char *)v51 + *(void *)(v51[0] - 24));
  std::ios_base::init(v12, v52);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v51[0] = v8;
  v53[0] = v9;
  MEMORY[0x230F43450](v52);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v51 + *(void *)(v51[0] - 24)), *(_DWORD *)&v52[*(void *)(v51[0] - 24) + 16] | 4);
  }
  size_t v13 = (char *)v51 + *(void *)(v51[0] - 24);
  if ((v13[32] & 5) != 0)
  {
    size_t v14 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v15 = sub_22B1E6CB0(MEMORY[0x263F8C0F8], (uint64_t)"readBitcode", 11);
    sub_22B1E6CB0(v15, (uint64_t)"(): unable to open file: ", 25);
    size_t v16 = strlen(buffer);
    sub_22B1E6CB0(v14, (uint64_t)buffer, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    uint64_t v17 = std::locale::use_facet(v40, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(v40);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v18 = 0;
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    BOOL v22 = (void *)*((void *)v13 + 5);
    while (v22)
    {
      uint64_t v23 = (char *)v22[3];
      unsigned int v24 = (char *)v22[4];
      if (v23 == v24)
      {
        if ((*(unsigned int (**)(void *))(*v22 + 72))(v22) == -1) {
          break;
        }
        uint64_t v23 = (char *)v22[3];
        unsigned int v24 = (char *)v22[4];
      }
      if (v23 == v24) {
        char v25 = (*(uint64_t (**)(void *))(*v22 + 72))(v22);
      }
      else {
        char v25 = *v23;
      }
      if (v20 >= v21)
      {
        uint64_t v27 = &v20[-v19];
        uint64_t v28 = (uint64_t)&v20[-v19 + 1];
        if (v28 < 0) {
          abort();
        }
        if (2 * (uint64_t)&v21[-v19] > (unint64_t)v28) {
          uint64_t v28 = 2 * (void)&v21[-v19];
        }
        if ((unint64_t)&v21[-v19] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v29 = v28;
        }
        if (v29) {
          uint64_t v30 = (char *)operator new(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v31 = &v27[(void)v30];
        uint64_t v32 = &v27[(void)v30];
        *uint64_t v32 = v25;
        uint64_t v26 = v32 + 1;
        if (v20 != (char *)v19)
        {
          std::string::size_type v33 = &v20[~v19];
          do
          {
            char v34 = *--v20;
            (v33--)[(void)v30] = v34;
          }
          while (v20 != (char *)v19);
          uint64_t v31 = v30;
        }
        uint64_t v21 = &v30[v29];
        if (v19) {
          operator delete((void *)v19);
        }
        unint64_t v19 = (unint64_t)v31;
      }
      else
      {
        *uint64_t v20 = v25;
        uint64_t v26 = v20 + 1;
      }
      uint64_t v35 = v22[3];
      if (v35 == v22[4]) {
        (*(void (**)(void *))(*v22 + 80))(v22);
      }
      else {
        void v22[3] = v35 + 1;
      }
      uint64_t v20 = v26;
    }
    *(_DWORD *)unint64_t v19 = 186106078;
    *(_DWORD *)(v19 + 20) = -557825214;
    int v43 = 0;
    *(_OWORD *)uint64_t v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)&v40[0].__locale_ = 0u;
    *(_OWORD *)uint64_t v44 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v48 = 0;
    v49[0] = (char *)&v50;
    v49[1] = (char *)0x400000000;
    strlen(buffer);
    uint64_t v36 = (llvm *)llvm::parseIR();
    uint64_t v18 = v39;
    if (!v39)
    {
      uint64_t v37 = (llvm::raw_ostream *)llvm::errs(v36);
      llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v40, "readBitcode", v37);
    }
    sub_22B1EBF58(v49);
    uint64_t v10 = (void *)MEMORY[0x263F8C2A8];
    if ((void)v47)
    {
      *((void *)&v47 + 1) = v47;
      operator delete((void *)v47);
    }
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v44[0]);
    }
    if (SBYTE7(v42) < 0) {
      operator delete(v41[0]);
    }
    operator delete((void *)v19);
  }
  v51[0] = *v10;
  *(void *)((char *)v51 + *(void *)(v51[0] - 24)) = v10[3];
  MEMORY[0x230F43460](v52);
  std::istream::~istream();
  MEMORY[0x230F43590](v53);
  return v18;
}

char **sub_22B1EBF58(char **a1)
{
  CFIndex v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0) {
        operator delete(*(void **)&v2[v4 - 24]);
      }
      v4 -= 40;
    }
    while (v4);
    CFIndex v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_22B1EBFCC(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_22B1EBFD8(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)(*(uint64_t (**)(std::string *))(a2->__r_.__value_.__r.__words[0] + 24))(a2);
  sub_22B1D7BF0(&__p, v8);
  llvm::AGX::CompileRequest::CompileRequest();
  if (v26 < 0) {
    operator delete(__p);
  }
  (*(void (**)(std::string *, char *))(a2->__r_.__value_.__r.__words[0] + 56))(a2, v27);
  if (sub_22B1EA970((char **)&qword_2683E92E8))
  {
    uint64_t v9 = (const char *)(*(uint64_t (**)(std::string *))(a2->__r_.__value_.__r.__words[0] + 24))(a2);
    if (sub_22B1EC788(v9)) {
      llvm::AGX::CompileRequest::setLoggingStream();
    }
  }
  switch(a5)
  {
    case 1:
      uint64_t v10 = a1 + 80;
      uint64_t v11 = a1;
      uint64_t v12 = a1 + 80;
      uint64_t v13 = 1;
LABEL_12:
      uint64_t v14 = 1;
      goto LABEL_13;
    case 2:
      uint64_t v10 = a1 + 104;
      uint64_t v11 = a1;
      uint64_t v12 = a1 + 104;
      uint64_t v13 = 2;
      goto LABEL_12;
    case 3:
      uint64_t v10 = a1 + 56;
      uint64_t v11 = a1;
      uint64_t v12 = a1 + 56;
      uint64_t v13 = 3;
      uint64_t v14 = 0;
LABEL_13:
      sub_22B1ED24C(v11, v12, v13, v14, a2 + 17);
      goto LABEL_15;
  }
  uint64_t v10 = a1 + 104;
LABEL_15:
  if (*(unsigned char *)(v10 + 16))
  {
    int v17 = 0;
    char v21 = 0;
    uint64_t v22 = 0;
    int v23 = 1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = MEMORY[0x263F8BBF0] + 16;
    uint64_t v24 = a1 + 280;
    sub_22B1EAD44((llvm::raw_ostream *)&v16);
    operator new();
  }
  llvm::AGX::CompileRequest::~CompileRequest((llvm::AGX::CompileRequest *)v27);
  return 0;
}

uint64_t sub_22B1EC788(const char *a1)
{
  uint64_t result = sub_22B1EA970((char **)&qword_2683E92E8);
  if (result)
  {
    if (!strcmp(a1, "compute")
      || !strcmp(a1, "vertex")
      || !strcmp(a1, "Vertex")
      || !strcmp(a1, "fragment")
      || !strcmp(a1, "compute-program")
      || !strcmp(a1, "tile")
      || !strcmp(a1, "post-tessellation-vertex-sw")
      || !strcmp(a1, "post-tessellation-vertex-hw"))
    {
      return 1;
    }
    else
    {
      uint64_t result = MGGetBoolAnswer();
      if (result)
      {
        return (uint64_t)sub_22B1ED79C();
      }
    }
  }
  return result;
}

void *sub_22B1EC888(void *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[1];
  if (result[2] < (unint64_t)(v5 + a3 - __src)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (__src != a3)
  {
    uint64_t result = memcpy((void *)(*result + v5), __src, v4);
    uint64_t v5 = v3[1];
  }
  v3[1] = v5 + v4;
  return result;
}

uint64_t sub_22B1EC908(uint64_t a1, void *a2, size_t a3)
{
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t *sub_22B1EC980(uint64_t *result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    sub_22B1ECFA8((uint64_t)result, 4uLL);
    int v6 = *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10) - a3 + 4;
    return sub_22B1ED0D4(v5, a2, v6);
  }
  return result;
}

uint64_t *sub_22B1ECA00(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (a3 || *((unsigned char *)result + 80))
  {
    sub_22B1ECFA8((uint64_t)result, 8uLL);
    uint64_t v6 = v5[6];
    if ((unint64_t)(v6 - v5[7]) <= 7)
    {
      sub_22B1ECC88(v5, 8uLL);
      uint64_t v6 = v5[6];
    }
    *(void *)(v6 - 8) = a3;
    uint64_t v7 = v6 - 8;
    v5[6] = v7;
    unsigned int v8 = *((_DWORD *)v5 + 8) - v7 + *((_DWORD *)v5 + 10);
    return sub_22B1ED050(v5, a2, v8);
  }
  return result;
}

uint64_t sub_22B1ECAA8(uint64_t a1, __int16 a2)
{
  sub_22B1ECFA8(a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  if ((unint64_t)(v4 - v5) <= 3)
  {
    sub_22B1ECC88((uint64_t *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
  }
  *(_DWORD *)(v4 - 4) = 0;
  uint64_t v6 = v4 - 4;
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a1 + 32) - v6 + *(void *)(a1 + 40);
  if ((unsigned __int16)(*(_WORD *)(a1 + 68) + 2) <= 4u) {
    unint64_t v8 = 4;
  }
  else {
    unint64_t v8 = (unsigned __int16)(*(_WORD *)(a1 + 68) + 2);
  }
  *(_WORD *)(a1 + 68) = v8;
  if (v6 - v5 < v8)
  {
    sub_22B1ECC88((uint64_t *)a1, v8);
    uint64_t v6 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v6 - v8;
  bzero((void *)(v6 - v8), v8);
  unsigned __int16 v9 = v7 - a2;
  uint64_t v11 = *(unsigned __int16 **)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  v11[1] = v9;
  unsigned __int16 *v11 = *(_WORD *)(a1 + 68);
  uint64_t v12 = *(unsigned int *)(a1 + 64);
  uint64_t v13 = (char *)(v10 - 8 * v12);
  if (v12)
  {
    uint64_t v14 = (_WORD *)(v10 - 8 * v12);
    do
    {
      *(unsigned __int16 *)((char *)v11 + (unsigned __int16)v14[2]) = v7 - *v14;
      v14 += 4;
    }
    while ((unint64_t)v14 < v10);
  }
  *(void *)(a1 + 56) = v13;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  LODWORD(v17) = v16 - v11 + v15;
  if (*(unsigned char *)(a1 + 81) && v15 < (unint64_t)v13)
  {
    size_t v18 = *v11;
    uint64_t v19 = v15 + v16;
    uint64_t v20 = *(unsigned int **)(a1 + 40);
    while (1)
    {
      uint64_t v17 = *v20;
      if (v18 == *(unsigned __int16 *)(v19 - v17) && !memcmp((const void *)(v19 - v17), v11, v18)) {
        break;
      }
      if (++v20 >= (unsigned int *)v13)
      {
        LODWORD(v17) = v16 - v11 + v15;
        goto LABEL_19;
      }
    }
    uint64_t v11 = (unsigned __int16 *)((char *)v11 + (v16 - v11 + v15 - v7));
    *(void *)(a1 + 48) = v11;
  }
LABEL_19:
  if (v17 == v16 + v15 - v11)
  {
    if ((unint64_t)((char *)v11 - v13) <= 3)
    {
      sub_22B1ECC88((uint64_t *)a1, 4uLL);
      uint64_t v13 = *(char **)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 32);
      unint64_t v15 = *(void *)(a1 + 40);
    }
    *(_DWORD *)uint64_t v13 = v17;
    *(void *)(a1 + 56) = v13 + 4;
  }
  *(_DWORD *)(v15 + v16 - v7) = v17 - v7;
  *(unsigned char *)(a1 + 70) = 0;
  return v7;
}

uint64_t sub_22B1ECC88(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = v3 - a1[6] + v4;
  uint64_t v6 = a1[7] - v4;
  if (v3) {
    unint64_t v7 = v3 >> 1;
  }
  else {
    unint64_t v7 = a1[2];
  }
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  uint64_t v8 = (a1[3] + v3 + v7 - 1) & -a1[3];
  a1[4] = v8;
  uint64_t v9 = *a1;
  if (v4)
  {
    if (!v9)
    {
      uint64_t v12 = &unk_26DE86F08;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void))(*(void *)v9 + 32))(v9, v4, v3, v8, v5, v6);
  }
  else
  {
    if (!v9)
    {
      uint64_t v12 = &unk_26DE86F08;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  }
  uint64_t v11 = result + a1[4] - v5;
  a1[5] = result;
  a1[6] = v11;
  a1[7] = result + v6;
  return result;
}

char *sub_22B1ECE84(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6)
{
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 24))(a1, a2, a3);
  return v12;
}

void sub_22B1ECF58(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x230F435E0);
  }
}

void sub_22B1ECF78()
{
}

void sub_22B1ECF90()
{
}

uint64_t *sub_22B1ECFA8(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) < a2) {
    *(void *)(a1 + 72) = a2;
  }
  return sub_22B1ECFDC((uint64_t *)a1, (a2 - 1) & -(uint64_t)(*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40)));
}

uint64_t *sub_22B1ECFDC(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[6];
  if (v4 - result[7] >= a2)
  {
    result[6] = v4 - a2;
    if (!a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)sub_22B1ECC88(result, a2);
    v3[6] -= a2;
  }
  uint64_t v5 = 0;
  do
    *(unsigned char *)(v3[6] + v5++) = 0;
  while (a2 != v5);
  return result;
}

uint64_t *sub_22B1ED050(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = (unint64_t *)result[7];
  if ((unint64_t)(result[6] - (void)v6) <= 7)
  {
    uint64_t result = (uint64_t *)sub_22B1ECC88(result, 8uLL);
    uint64_t v6 = (unint64_t *)v5[7];
  }
  *uint64_t v6 = a3 | (unint64_t)(a2 << 32);
  v5[7] += 8;
  ++*((_DWORD *)v5 + 16);
  unsigned int v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2) {
    LOWORD(v7) = a2;
  }
  *((_WORD *)v5 + 34) = v7;
  return result;
}

uint64_t *sub_22B1ED0D4(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  if (a3 || *((unsigned char *)result + 80))
  {
    unsigned int v5 = sub_22B1ED138((uint64_t)result, a3);
    return sub_22B1ED050(v4, a2, v5);
  }
  return result;
}

uint64_t sub_22B1ED138(uint64_t a1, int a2)
{
  sub_22B1ECFA8(a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    sub_22B1ECC88((uint64_t *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = a2;
  uint64_t v5 = v4 - 4;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t *sub_22B1ED19C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 72) < a3) {
    *(void *)(a1 + 72) = a3;
  }
  return sub_22B1ECFDC((uint64_t *)a1, (a3 - 1) & (-a2 - (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40))));
}

uint64_t *sub_22B1ED1D4(uint64_t *result, void *__src, size_t __n)
{
  if (__n)
  {
    uint64_t v5 = result;
    uint64_t v6 = result[6];
    if (v6 - result[7] < __n)
    {
      sub_22B1ECC88(result, __n);
      uint64_t v6 = v5[6];
    }
    v5[6] = v6 - __n;
    return (uint64_t *)memcpy((void *)(v6 - __n), __src, __n);
  }
  return result;
}

uint64_t sub_22B1ED24C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, std::string *a5)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    unsigned int v7 = (llvm::AGX::AGXCompiler *)(result + 48);
    llvm::AGX::AGXCompiler::createCompilePlan();
    char v22 = 1;
    if (llvm::AGX::AGXCompilePlan::isValid((llvm::AGX::AGXCompilePlan *)v23))
    {
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      if (*(unsigned char *)(a2 + 16))
      {
        MEMORY[0x230F42A00](a2);
        *(unsigned char *)(a2 + 16) = 0;
      }
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      *(unsigned char *)(a2 + 16) = 1;
      MEMORY[0x230F42A00](v16);
    }
    else
    {
      llvm::AGX::AGXCompiler::getLastDiagnostics(&v20, v7);
      sub_22B1ED4EC((uint64_t)v16);
      sub_22B1E6CB0(v17, (uint64_t)"Create Plan failed:\n", 20);
      uint64_t v8 = v20;
      uint64_t v9 = v21;
      while (v8 != v9)
      {
        v8 += 8;
        unint64_t v10 = (void *)llvm::AGX::operator<<();
        sub_22B1E6CB0(v10, (uint64_t)"\n", 1);
      }
      std::stringbuf::str();
      if ((v15 & 0x80u) == 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        std::string::size_type v12 = v15;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)__p[1];
      }
      std::string::append(a5, (const std::string::value_type *)v11, v12);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      v16[0] = *(void ***)MEMORY[0x263F8C2B8];
      uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void ***)((char *)v16 + (unint64_t)*(v16[0] - 3)) = *(void ***)(MEMORY[0x263F8C2B8] + 64);
      v17[0] = v13;
      v17[1] = MEMORY[0x263F8C318] + 16;
      if (v18 < 0) {
        operator delete((void *)v17[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x230F43590](&v19);
      v16[0] = (void **)&v20;
      sub_22B1E6C08(v16);
    }
    return MEMORY[0x230F42A00](v23);
  }
  return result;
}

uint64_t sub_22B1ED4EC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 24;
  uint64_t v3 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v6 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v8;
  *(void *)(a1 + *(void *)(v8 - 24)) = v7;
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 24));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v10 = v6[5];
  uint64_t v11 = v6[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v4 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v6[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v6[6];
  *(void *)a1 = v2;
  *(void *)(a1 + 128) = v3;
  *(void *)(a1 + 16) = v5;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

const char *sub_22B1ED79C()
{
  uint64_t result = (const char *)sub_22B1DEEE4("AGC_STATUS_LOG_DRIVER_SHADERS");
  if (result)
  {
    if (*result == 48) {
      return 0;
    }
    else {
      return (const char *)(atoi(result) != 0);
    }
  }
  return result;
}

uint64_t sub_22B1ED7E0(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, llvm::Type *))(**(void **)(a2 + 32) + 8))(*(void *)(a2 + 32), a3);
  sub_22B241938(a1, a3);
  *(void *)(a1 + 344) = v6;
  *(void *)a1 = &unk_26DE70E20;
  *(void *)(a1 + 352) = mach_absolute_time();
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a2;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(unsigned char *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = llvm::IntegerType::get();
  *(void *)(a1 + 592) = a1 + 608;
  *(void *)(a1 + 600) = 0x800000000;
  *(void *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 712) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 720) = xmmword_22B26F8D0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 776) = 1;
  *(_WORD *)(a1 + 784) = 256;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 816) = xmmword_22B26F8D0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 1;
  *(_WORD *)(a1 + 880) = 256;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0;
  *(unsigned char *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 912) = xmmword_22B26F8D0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 968) = 1;
  *(_WORD *)(a1 + 976) = 256;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 328) = a1 + 592;
  return a1;
}

uint64_t sub_22B1ED95C(uint64_t a1)
{
  *(void *)a1 = &unk_26DE70E20;
  uint64_t v2 = *(void *)(a1 + 400);
  *(void *)(v2 + 136) = 0;
  if (*(char *)(v2 + 303) < 0)
  {
    **(unsigned char **)(v2 + 280) = 0;
    *(void *)(v2 + 288) = 0;
  }
  else
  {
    *(unsigned char *)(v2 + 280) = 0;
    *(unsigned char *)(v2 + 303) = 0;
  }
  MEMORY[0x230F433D0](v2 + 8, &unk_22B27C63D);
  uint64_t v3 = *(void *)(a1 + 344);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  if (*(void *)(a1 + 320))
  {
    uint64_t v4 = MEMORY[0x230F42C50]();
    MEMORY[0x230F43600](v4, 0x10B2C407FF26C1CLL);
  }
  sub_22B1EDAB0((void *)(a1 + 896));
  sub_22B1EDAB0((void *)(a1 + 800));
  sub_22B1EDAB0((void *)(a1 + 704));
  if (*(char *)(a1 + 695) < 0) {
    operator delete(*(void **)(a1 + 672));
  }
  uint64_t v5 = *(void **)(a1 + 592);
  if (v5 != (void *)(a1 + 608)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 432);
  if (v6)
  {
    *(void *)(a1 + 440) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  uint64_t v7 = *(void **)(a1 + 368);
  if (v7)
  {
    *(void *)(a1 + 376) = v7;
    operator delete(v7);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 128));
  uint64_t v8 = *(void **)(a1 + 8);
  if (v8 != (void *)(a1 + 24)) {
    free(v8);
  }
  return a1;
}

void *sub_22B1EDAB0(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    sub_22B1EDBB8(*(void **)(v2 + 8));
    MEMORY[0x230F43600](v2, 0x1060C40C2B13FB5);
  }
  uint64_t v3 = a1[5];
  if (v3)
  {
    if (*a1) {
      (*(void (**)(void))(*(void *)*a1 + 24))(*a1);
    }
    else {
      MEMORY[0x230F435E0](v3, 0x1000C8077774924);
    }
  }
  a1[5] = 0;
  if (*((unsigned char *)a1 + 8) && *a1) {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  *a1 = 0;
  *((unsigned char *)a1 + 8) = 0;
  return a1;
}

void sub_22B1EDBB8(void *a1)
{
  if (a1)
  {
    sub_22B1EDBB8(*a1);
    sub_22B1EDBB8(a1[1]);
    operator delete(a1);
  }
}

BOOL sub_22B1EDC04(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v4 = *a2;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    size_t v29 = a2 + 1;
    uint64_t v9 = *(void *)(a1 + 432);
    uint64_t v10 = *(void *)(a1 + 440);
    do
    {
      if (v10 == v9)
      {
        uint64_t v10 = v9;
      }
      else
      {
        uint64_t v11 = 0;
        unsigned int v12 = 0;
        do
        {
          uint64_t v13 = (int *)((char *)&v29[v8] + v29[v8]);
          uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
            uint64_t v16 = (char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15);
          }
          else {
            uint64_t v16 = 0;
          }
          sub_22B1D7BF0(&v30, v16 + 4);
          if (!std::string::compare(&v30, *(const std::string::value_type **)(*(void *)(a1 + 432) + 16 * v11)))
          {
            uint64_t v17 = (_DWORD *)(*(void *)(a1 + 432) + 16 * v11 + 8);
            if ((unint64_t)v6 >= v7)
            {
              uint64_t v18 = (v6 - v5) >> 2;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62) {
                abort();
              }
              if ((uint64_t)(v7 - (void)v5) >> 1 > v19) {
                unint64_t v19 = (uint64_t)(v7 - (void)v5) >> 1;
              }
              if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v19;
              }
              if (v20) {
                unint64_t v20 = (unint64_t)sub_22B1EDE8C(v20);
              }
              else {
                uint64_t v21 = 0;
              }
              char v22 = (char *)(v20 + 4 * v18);
              *(_DWORD *)char v22 = *v17;
              int v23 = v22 + 4;
              while (v6 != v5)
              {
                int v24 = *((_DWORD *)v6 - 1);
                v6 -= 4;
                *((_DWORD *)v22 - 1) = v24;
                v22 -= 4;
              }
              unint64_t v7 = v20 + 4 * v21;
              if (v5) {
                operator delete(v5);
              }
              uint64_t v5 = v22;
              uint64_t v6 = v23;
            }
            else
            {
              *(_DWORD *)uint64_t v6 = *v17;
              v6 += 4;
            }
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          uint64_t v9 = *(void *)(a1 + 432);
          uint64_t v10 = *(void *)(a1 + 440);
          uint64_t v11 = ++v12;
        }
        while (v12 < (unint64_t)((v10 - v9) >> 4));
        unint64_t v4 = *a2;
      }
      ++v8;
    }
    while (v8 < v4);
  }
  if (v6 == v5) {
    char v25 = (char *)&unk_2683E9370;
  }
  else {
    char v25 = v5;
  }
  *a3 = sub_22B1EDE08(a1 + 704, v25, (v6 - v5) >> 2);
  if (v5) {
    operator delete(v5);
  }
  return v6 != v5;
}

uint64_t sub_22B1EDE08(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = a3;
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v6 = 4 * a3;
  sub_22B1ED19C(a1, 4 * a3, 4uLL);
  sub_22B1ED19C(a1, v6, 4uLL);
  sub_22B1ED1D4((uint64_t *)a1, a2, v6);
  *(unsigned char *)(a1 + 70) = 0;
  return sub_22B1ED138(a1, v3);
}

void *sub_22B1EDE8C(unint64_t a1)
{
  if (a1 >> 62) {
    sub_22B1E33E4();
  }
  return operator new(4 * a1);
}

uint64_t *sub_22B1EDEC4(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 704);
  int v3 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  size_t v4 = strlen(v3);
  int v5 = sub_22B1EC908((uint64_t)v2, v3, v4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
    int v6 = sub_22B1EE0A8((uint64_t)v2, *(void **)(*(void *)(a1 + 400) + 128), *(void *)(*(void *)(a1 + 400) + 136));
  }
  else {
    int v6 = 0;
  }
  int v16 = 0;
  unint64_t v7 = *(int **)(a1 + 560);
  if (v7)
  {
    unint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 >= 5u && (uint64_t v9 = v8[2]) != 0) {
      uint64_t v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 0x39u && (uint64_t v12 = v11[28]) != 0) {
      uint64_t v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = sub_22B1EDC04(a1, v13, &v16);
  }
  else
  {
    BOOL v14 = 0;
  }
  *(unsigned char *)(a1 + 774) = 1;
  sub_22B1EC980(v2, 8, v5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
    sub_22B1EC980(v2, 4, v6);
  }
  if (v14) {
    sub_22B1EC980(v2, 14, v16);
  }
  sub_22B1ED0D4(v2, 16, *(_DWORD *)(a1 + 456));
  return v2;
}

uint64_t sub_22B1EE0A8(uint64_t a1, void *a2, size_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  sub_22B1ED19C(a1, a3, 4uLL);
  sub_22B1ED19C(a1, a3, 1uLL);
  sub_22B1ED1D4((uint64_t *)a1, a2, a3);
  *(unsigned char *)(a1 + 70) = 0;
  return sub_22B1ED138(a1, a3);
}

uint64_t sub_22B1EE128(uint64_t a1, int a2)
{
  *(void *)(a1 + 56) = *(void *)(a1 + 40);
  sub_22B1ED19C(a1, 4, *(void *)(a1 + 72));
  sub_22B1ECFA8(a1, 4uLL);
  uint64_t result = sub_22B1ED138(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - a2 + 4);
  *(unsigned char *)(a1 + 71) = 1;
  return result;
}

uint64_t sub_22B1EE198(uint64_t a1)
{
  for (uint64_t i = 0; i != -216; i -= 24)
  {
    if (*(char *)(a1 + i + 215) < 0) {
      operator delete(*(void **)(a1 + i + 192));
    }
  }
  return a1;
}

BOOL sub_22B1EE1E0(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == -17958193)
  {
    int v3 = a2;
    int v45 = a2[4];
    if (v45)
    {
      int v5 = 0;
      unsigned __int8 v48 = 0;
      uint64_t v41 = (char *)a2 + 1;
      int v6 = a2 + 8;
      do
      {
        if (*v6 == 2)
        {
          int v13 = v6[3];
          if (v13)
          {
            int v14 = 0;
            long long v47 = &v41[v6[4]];
            uint64_t v15 = (unsigned int *)((char *)v3 + v6[2]);
            uint64_t v44 = v6;
            int v42 = v5;
            int v43 = v6[3];
            do
            {
              if ((~*((unsigned __int8 *)v15 + 4) & 0xE) == 0 && *((unsigned __int8 *)v15 + 5) == v48)
              {
                uint64_t v16 = *((void *)v15 + 1);
                uint64_t v17 = &v47[*v15];
                unint64_t v19 = *(char **)(a1 + 440);
                unint64_t v18 = *(void *)(a1 + 448);
                if ((unint64_t)v19 >= v18)
                {
                  char v22 = *(char **)(a1 + 432);
                  uint64_t v23 = (v19 - v22) >> 4;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 60) {
                    abort();
                  }
                  uint64_t v25 = v18 - (void)v22;
                  if (v25 >> 3 > v24) {
                    unint64_t v24 = v25 >> 3;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26)
                  {
                    if (v26 >> 60) {
                      sub_22B1E33E4();
                    }
                    uint64_t v27 = *((void *)v15 + 1);
                    uint64_t v28 = (char *)operator new(16 * v26);
                    LODWORD(v16) = v27;
                  }
                  else
                  {
                    uint64_t v28 = 0;
                  }
                  size_t v29 = &v28[16 * v23];
                  *(void *)size_t v29 = v17;
                  *((_DWORD *)v29 + 2) = v16;
                  std::string v30 = v29;
                  if (v19 != v22)
                  {
                    do
                    {
                      *((_OWORD *)v30 - 1) = *((_OWORD *)v19 - 1);
                      v30 -= 16;
                      v19 -= 16;
                    }
                    while (v19 != v22);
                    unint64_t v19 = *(char **)(a1 + 432);
                  }
                  int v5 = v42;
                  int v13 = v43;
                  int v20 = v16;
                  uint64_t v21 = v29 + 16;
                  *(void *)(a1 + 432) = v30;
                  *(void *)(a1 + 440) = v29 + 16;
                  *(void *)(a1 + 448) = &v28[16 * v26];
                  if (v19) {
                    operator delete(v19);
                  }
                  int v6 = v44;
                }
                else
                {
                  *(void *)unint64_t v19 = v17;
                  int v20 = v16;
                  *((_DWORD *)v19 + 2) = v16;
                  uint64_t v21 = v19 + 16;
                }
                *(void *)(a1 + 440) = v21;
                std::string::size_type v49 = v17;
                size_t v50 = strlen(v17);
                if (v50 == 8 && *(void *)v17 == 0x6E69616D2E636761) {
                  *(_DWORD *)(a1 + 456) = v20;
                }
                uint64_t v31 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
                if (sub_22B1EC788(v31))
                {
                  if (llvm::StringRef::find() == -1)
                  {
                    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                    if (v32 <= 3) {
                      sub_22B1E69D0(v32, "Non-Inlined function %s", v33, v34, v35, v36, v37, v38, (char)v17);
                    }
                  }
                }
                int v3 = a2;
              }
              v15 += 4;
              ++v14;
            }
            while (v14 != v13);
          }
        }
        else if (*v6 == 25)
        {
          unsigned int v7 = v6[16];
          if (v7)
          {
            unsigned int v8 = 0;
            uint64_t v9 = v6 + 18;
            unsigned int v10 = 1;
            while (1)
            {
              if (!strncmp((const char *)v9 + 16, "__TEXT", 0x10uLL))
              {
                *(void *)(a1 + 464) = (char *)v3 + v9[12];
                *(void *)(a1 + 512) = *((void *)v9 + 5);
                ++v8;
                unsigned __int8 v48 = v10;
              }
              else
              {
                if (!strncmp((const char *)v9 + 16, "__GPU_METADATA", 0x10uLL))
                {
                  uint64_t v11 = (unsigned int *)((char *)v3 + v9[12]);
                  *(void *)(a1 + 472) = v11;
                  *(void *)(a1 + 520) = *((void *)v9 + 5);
                  *(void *)(a1 + 560) = (char *)v11 + *v11;
                }
                else if (!strncmp((const char *)v9 + 16, "__GPU_METADATA_2", 0x10uLL))
                {
                  *(void *)(a1 + 480) = (char *)v3 + v9[12];
                  *(void *)(a1 + 528) = *((void *)v9 + 5);
                }
                else if (!strncmp((const char *)v9 + 16, "__GPU_VIDMALIST", 0x10uLL))
                {
                  uint64_t v12 = (unsigned int *)((char *)v3 + v9[12]);
                  *(void *)(a1 + 488) = v12;
                  *(void *)(a1 + 536) = *((void *)v9 + 5);
                  *(void *)(a1 + 568) = (char *)v12 + *v12;
                }
                else
                {
                  if (strncmp((const char *)v9 + 16, "__GPU_STATS", 0x10uLL)) {
                    goto LABEL_22;
                  }
                  if (!strncmp((const char *)v9, "__counters", 0x10uLL))
                  {
                    *(void *)(a1 + 496) = (char *)v3 + v9[12];
                    *(void *)(a1 + 544) = *((void *)v9 + 5);
                    ++v8;
                  }
                  if (strncmp((const char *)v9, "__telemetry", 0x10uLL)) {
                    goto LABEL_22;
                  }
                  *(void *)(a1 + 504) = (char *)v3 + v9[12];
                  *(void *)(a1 + 552) = *((void *)v9 + 5);
                }
                ++v8;
              }
LABEL_22:
              if (v10 < v7)
              {
                v9 += 20;
                ++v10;
                if (v8 < 6) {
                  continue;
                }
              }
              break;
            }
          }
        }
        int v6 = (_DWORD *)((char *)v6 + v6[1]);
        ++v5;
      }
      while (v5 != v45);
    }
    uint64_t v39 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (sub_22B1EC788(v39)) {
      (*(void (**)(void, void, void, uint64_t))(**(void **)(a1 + 344) + 352))(*(void *)(a1 + 344), *(void *)(a1 + 464), *(void *)(a1 + 512), a1);
    }
    LODWORD(v49) = 0;
    (*(void (**)(uint64_t, const char **))(*(void *)a1 + 88))(a1, &v49);
    int v2 = -17958193;
  }
  return v2 == -17958193;
}

void sub_22B1EE6FC(uint64_t a1, const char *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  size_t v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (sub_22B1EC788(v4))
  {
    int v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    snprintf(__str, 0x80uLL, "%s shader %u (%s)", v5, *(_DWORD *)(a1 + 696), a2);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v56 = 0;
    int v47 = 0;
    char v51 = 0;
    uint64_t v52 = 0;
    int v53 = 1;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = 0;
    uint64_t v46 = MEMORY[0x263F8BBF0] + 16;
    uint64_t v54 = __p;
    sub_22B1EAD44((llvm::raw_ostream *)&v46);
    uint64_t v6 = llvm::Module::print();
    uint64_t v13 = *(void *)(a1 + 320);
    uint64_t v14 = v13 + 24;
    uint64_t v15 = *(void *)(v13 + 32);
    if (v15 == v14)
    {
      char v16 = 0;
    }
    else
    {
      char v16 = 0;
      do
      {
        if (v15) {
          uint64_t v17 = v15 - 56;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = v17 + 72;
        for (uint64_t i = *(void *)(v17 + 80); i != v18; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            uint64_t v20 = i - 24;
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = v20 + 40;
          uint64_t v22 = *(void *)(v20 + 48);
          if (v22 == v21)
          {
            char v23 = 0;
          }
          else
          {
            char v23 = 0;
            do
            {
              ++v23;
              uint64_t v22 = *(void *)(v22 + 8);
            }
            while (v22 != v21);
          }
          v16 += v23;
        }
        uint64_t v15 = *(void *)(v15 + 8);
      }
      while (v15 != v14);
    }
    sub_22B1E69D0(v6, "------ Start LLVM IR %s -------\n", v7, v8, v9, v10, v11, v12, (char)__str);
    if (v56 >= 0) {
      uint64_t v31 = __p;
    }
    else {
      LOBYTE(v31) = __p[0];
    }
    sub_22B1E69D0(v24, "%s\n", v25, v26, v27, v28, v29, v30, (char)v31);
    sub_22B1E69D0(v32, "; %u instructions", v33, v34, v35, v36, v37, v38, v16);
    sub_22B1E69D0(v39, "------ End LLVM IR %s -------\n", v40, v41, v42, v43, v44, v45, (char)__str);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v46);
    if (SHIBYTE(v56) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_22B1EE934(uint64_t a1, uint64_t a2)
{
  v15[8] = *MEMORY[0x263EF8340];
  if ((*(_WORD *)(a2 + 18) & 0x3FF0) == 0x6A0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    uint64_t v13 = v15;
    uint64_t v14 = 0x800000000;
    uint64_t v3 = llvm::ValueAsMetadata::get();
    sub_22B1D6788((uint64_t)&v13, v3);
    size_t v4 = *(uint64_t **)(a1 + 592);
    uint64_t v5 = *(unsigned int *)(a1 + 600);
    int v6 = v14;
    if (v5 + (unint64_t)v14 > HIDWORD(v14)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v5)
    {
      uint64_t v7 = (char *)v13 + 8 * v14;
      uint64_t v8 = 8 * v5;
      do
      {
        uint64_t v9 = *v4++;
        *v7++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    LODWORD(v14) = v6 + v5;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    if (v13 != v15) {
      free(v13);
    }
  }
  else
  {
    llvm::Module::getOrInsertNamedMetadata();
    uint64_t v10 = *(unsigned int *)(a1 + 600);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 592);
      uint64_t v12 = 8 * v10;
      do
      {
        v11 += 8;
        llvm::NamedMDNode::addOperand();
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t sub_22B1EEAB0(uint64_t a1, llvm::Type **a2, llvm::Type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (llvm::Type ***)a2;
  uint64_t v9 = *a2;
  if (*a2 == a3) {
    return (uint64_t)v8;
  }
  if (a5)
  {
    if (v9 == *(llvm::Type **)(a1 + 280) || v9 == *(llvm::Type **)(a1 + 288))
    {
      uint64_t v13 = llvm::UndefValue::get();
      uint64_t v15 = 0;
      if (v9 == *(llvm::Type **)(a1 + 280)) {
        uint64_t v16 = 8;
      }
      else {
        uint64_t v16 = 16;
      }
      do
      {
        uint64_t v17 = *(void *)(a1 + 344);
        long long v44 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v45, (llvm::IRBuilderBase *)(a1 + 8));
        int v46 = *(_DWORD *)(a1 + 104);
        __int16 v43 = 257;
        uint64_t v18 = llvm::ConstantInt::get();
        uint64_t v19 = sub_22B242524(a1 + 8, (uint64_t)v8, v18, (uint64_t)v42);
        uint64_t v20 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 88))(v17, &v44, v19, v16, a4, 32);
        if (v45) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v43 = 257;
        uint64_t v21 = llvm::ConstantInt::get();
        uint64_t v13 = sub_22B2427EC(a1 + 8, v13, v20, v21, (uint64_t)v42);
        ++v15;
      }
      while (v15 != 4);
    }
    else if (v9 == *(llvm::Type **)(a1 + 264))
    {
      uint64_t v28 = *(void *)(a1 + 272);
      __int16 v43 = 257;
      uint64_t v13 = sub_22B1EEEB4(a1 + 8, (uint64_t)a2, v28, (uint64_t)v42);
    }
    else
    {
      uint64_t v13 = (uint64_t)a2;
    }
    if (*(llvm::Type **)(a1 + 280) == a3)
    {
      uint64_t v29 = 8;
    }
    else
    {
      if (*(llvm::Type **)(a1 + 288) != a3)
      {
        if (*(llvm::Type **)(a1 + 264) != a3) {
          return v13;
        }
        __int16 v43 = 257;
        return sub_22B1DC548(a1 + 8, v13, (uint64_t)a3, (uint64_t)v42);
      }
      uint64_t v29 = 16;
    }
    uint64_t v8 = (llvm::Type ***)llvm::UndefValue::get();
    for (uint64_t i = 0; i != 4; ++i)
    {
      uint64_t v31 = *(void *)(a1 + 344);
      long long v39 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v40, (llvm::IRBuilderBase *)(a1 + 8));
      int v41 = *(_DWORD *)(a1 + 104);
      __int16 v43 = 257;
      uint64_t v32 = llvm::ConstantInt::get();
      uint64_t v33 = sub_22B242524(a1 + 8, v13, v32, (uint64_t)v42);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v31 + 80))(v31, &v39, v33, v29, a4, 1);
      if (v40) {
        llvm::MetadataTracking::untrack();
      }
      __int16 v43 = 257;
      uint64_t v35 = llvm::ConstantInt::get();
      uint64_t v8 = (llvm::Type ***)sub_22B2427EC(a1 + 8, (uint64_t)v8, v34, v35, (uint64_t)v42);
    }
    return (uint64_t)v8;
  }
  if ((*((_DWORD *)v9 + 2) & 0xFE) == 0x12) {
    int v14 = *(unsigned __int8 *)(**((void **)v9 + 2) + 8);
  }
  else {
    int v14 = *((_DWORD *)v9 + 2);
  }
  if (v14 == 13)
  {
    unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
    uint64_t v23 = llvm::Type::getScalarSizeInBits(a3);
    if (ScalarSizeInBits <= v23)
    {
      uint64_t v25 = a1 + 8;
      __int16 v43 = 257;
      if (a4) {
        uint64_t v26 = 40;
      }
      else {
        uint64_t v26 = 39;
      }
      uint64_t v24 = (uint64_t)v8;
    }
    else
    {
      uint64_t v24 = sub_22B243324(a1, v8, v23, a4);
      uint64_t v25 = a1 + 8;
      __int16 v43 = 257;
      uint64_t v26 = 38;
    }
    return sub_22B1D7384(v25, v26, v24, (uint64_t)a3, (uint64_t)v42);
  }
  sub_22B1E69D0(a1, "Warning (Undefined behavior): integer drawbuffer format, but shader is writing floating point", (uint64_t)a3, a4, a5, a6, a7, a8, v37);
  return llvm::UndefValue::get();
}

uint64_t sub_22B1EEEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return sub_22B1D7384(a1, 46, a2, a3, a4);
}

uint64_t sub_22B1EEF20(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2;
  if (a4 == 2)
  {
    uint64_t v12 = *(void *)(a1 + 192);
    __int16 v23 = 257;
    uint64_t v13 = sub_22B1D7384(a1 + 8, 49, a2, v12, (uint64_t)v22);
    uint64_t v14 = *(void *)(a1 + 344);
    long long v16 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (llvm::IRBuilderBase *)(a1 + 8));
    int v18 = *(_DWORD *)(a1 + 104);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void, void))(*(void *)v14
                                                                                                  + 104))(v14, &v16, 6, *(void *)(a1 + 184), v13, 0, 0);
    if (v17) {
      llvm::MetadataTracking::untrack();
    }
  }
  else if (a4 == 1)
  {
    uint64_t v7 = a1 + 8;
    uint64_t v8 = *(void *)(a1 + 288);
    __int16 v23 = 257;
    uint64_t v9 = sub_22B1D7384(a1 + 8, 38, a2, v8, (uint64_t)v22);
    uint64_t v10 = *(void *)(a1 + 344);
    long long v19 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v20, (llvm::IRBuilderBase *)(a1 + 8));
    int v21 = *(_DWORD *)(a1 + 104);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void, void))(*(void *)v10 + 96))(v10, &v19, 6, *(void *)(a1 + 184), v9, 0, 0);
    if (v20) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v23 = 257;
    return sub_22B1D7384(v7, 49, v11, a3, (uint64_t)v22);
  }
  return v4;
}

uint64_t sub_22B1EF0E8()
{
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22B1EF1A8(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v2 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 88))(a1, &v2);
  if (result)
  {
    llvm::Module::getOrInsertNamedMetadata();
    uint64_t v3 = llvm::MDString::get();
    llvm::ConstantInt::get();
    uint64_t v4 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    return llvm::NamedMDNode::addOperand();
  }
  return result;
}

uint64_t sub_22B1EF298(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 70) = 1;
  int v4 = *(_DWORD *)(a2 + 32);
  int v5 = *(_DWORD *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 40);
  unint64_t v7 = *(void *)a1 & 7;
  if (v7 >= 5) {
    char v8 = 4;
  }
  else {
    char v8 = 0x503020004uLL >> (8 * v7);
  }
  sub_22B1EF4B8((uint64_t *)a2, 4, v8 & 7);
  unint64_t v9 = (*(void *)a1 >> 3) & 7;
  if (v9 >= 5) {
    char v10 = 4;
  }
  else {
    char v10 = 0x503020004uLL >> (8 * v9);
  }
  sub_22B1EF4B8((uint64_t *)a2, 6, v10 & 7);
  unint64_t v11 = (*(void *)a1 >> 6) & 7;
  if (v11 >= 5) {
    char v12 = 4;
  }
  else {
    char v12 = 0x503020004uLL >> (8 * v11);
  }
  sub_22B1EF4B8((uint64_t *)a2, 8, v12 & 7);
  uint64_t v13 = (*(void *)a1 >> 9) & 3;
  if (v13 == 2) {
    int v14 = 2;
  }
  else {
    int v14 = v13 == 1;
  }
  sub_22B1EF4B8((uint64_t *)a2, 10, v14);
  uint64_t v15 = (*(void *)a1 >> 11) & 3;
  if (v15 == 2) {
    int v16 = 2;
  }
  else {
    int v16 = v15 == 1;
  }
  sub_22B1EF4B8((uint64_t *)a2, 12, v16);
  uint64_t v17 = (*(void *)a1 >> 13) & 3;
  if (v17 == 2) {
    int v18 = 2;
  }
  else {
    int v18 = v17 == 1;
  }
  sub_22B1EF4B8((uint64_t *)a2, 14, v18);
  unint64_t v19 = ((*(void *)a1 >> 16) & 0xFLL) - 1;
  if (v19 >= 8) {
    char v20 = 0;
  }
  else {
    char v20 = 0x108070605040302uLL >> (8 * v19);
  }
  __int16 v21 = v4 - v5 + v6;
  sub_22B1EF4B8((uint64_t *)a2, 18, v20 & 0xF);
  _H0 = *(_WORD *)(a1 + 3);
  __asm { FCVT            S0, H0 }
  sub_22B1EF51C((uint64_t *)a2, 22, _S0);
  _H0 = *(_WORD *)(a1 + 5);
  __asm { FCVT            S0, H0 }
  sub_22B1EF51C((uint64_t *)a2, 24, _S0);
  uint64_t v30 = *(unsigned char *)(a1 + 7) & 3;
  if (v30 == 2) {
    int v31 = 2;
  }
  else {
    int v31 = v30 == 1;
  }
  sub_22B1EF4B8((uint64_t *)a2, 26, v31);
  sub_22B1EF4B8((uint64_t *)a2, 16, (*(void *)a1 & 0x8000) == 0);
  sub_22B1EF4B8((uint64_t *)a2, 20, ((*(_DWORD *)a1 >> 20) & 0xF) + 1);
  return sub_22B1ECAA8(a2, v21);
}

uint64_t *sub_22B1EF4B8(uint64_t *result, uint64_t a2, int a3)
{
  int v4 = result;
  if (a3 || *((unsigned char *)result + 80))
  {
    unsigned int v5 = sub_22B1EF5C8((uint64_t)result, a3);
    return sub_22B1ED050(v4, a2, v5);
  }
  return result;
}

uint64_t *sub_22B1EF51C(uint64_t *result, uint64_t a2, float a3)
{
  unsigned int v5 = result;
  if (a3 != 0.0 || *((unsigned char *)result + 80))
  {
    sub_22B1ECFA8((uint64_t)result, 4uLL);
    uint64_t v6 = v5[6];
    if ((unint64_t)(v6 - v5[7]) <= 3)
    {
      sub_22B1ECC88(v5, 4uLL);
      uint64_t v6 = v5[6];
    }
    *(float *)(v6 - 4) = a3;
    uint64_t v7 = v6 - 4;
    v5[6] = v7;
    unsigned int v8 = *((_DWORD *)v5 + 8) - v7 + *((_DWORD *)v5 + 10);
    return sub_22B1ED050(v5, a2, v8);
  }
  return result;
}

uint64_t sub_22B1EF5C8(uint64_t a1, char a2)
{
  sub_22B1ECFA8(a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 == *(void *)(a1 + 56))
  {
    sub_22B1ECC88((uint64_t *)a1, 1uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 1;
  *(unsigned char *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

void sub_22B1EF630(void *a1)
{
  *a1 = &unk_26DE70D40;
  sub_22B1DEE30(a1 + 6, 0);
  JUMPOUT(0x230F43600);
}

void *sub_22B1EF698(void *a1)
{
  *a1 = &unk_26DE70D40;
  sub_22B1DEE30(a1 + 6, 0);
  return a1;
}

void sub_22B1EF6E0()
{
}

uint64_t sub_22B1F0064(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

void sub_22B1F0070(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  v48[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)a4 + 24))(a4);
  uint64_t v8 = snprintf(__str, 0x80uLL, "%s shader %u (driver disassembler)", v7, a4[174]);
  sub_22B1E69D0(v8, "------ Start USC %s -------\n", v9, v10, v11, v12, v13, v14, (char)__str);
  memset(&__p, 0, sizeof(__p));
  if (a3 >= 2)
  {
    uint64_t v22 = 0;
    unsigned int v23 = 0;
    unsigned int v24 = 1;
    int v25 = 1;
    do
    {
      if (v25)
      {
        sub_22B1D7BF0(&v43, "\t[Inst ");
        std::to_string(&v46, v23);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v26 = &v46;
        }
        else {
          uint64_t v26 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v46.__r_.__value_.__l.__size_;
        }
        uint64_t v28 = std::string::append(&v43, (const std::string::value_type *)v26, size);
        std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_22B1D7BF0(v41, ", offset ");
        if ((v42 & 0x80u) == 0) {
          uint64_t v30 = v41;
        }
        else {
          uint64_t v30 = (void **)v41[0];
        }
        if ((v42 & 0x80u) == 0) {
          std::string::size_type v31 = v42;
        }
        else {
          std::string::size_type v31 = (std::string::size_type)v41[1];
        }
        uint64_t v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
        std::string::size_type v33 = v32->__r_.__value_.__r.__words[0];
        v48[0] = v32->__r_.__value_.__l.__size_;
        *(void *)((char *)v48 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
        char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = v33;
        __p.__r_.__value_.__l.__size_ = v48[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v48 + 7);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v34;
        if ((char)v42 < 0) {
          operator delete(v41[0]);
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        sprintf((char *)&v46, " 0x%04x", v24 - 1);
        sub_22B1D7BF0(&v43, "]");
        uint64_t v35 = std::string::insert(&v43, 0, (const std::string::value_type *)&v46);
        std::string::size_type v36 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v37 = &v47;
        }
        else {
          char v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v38 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v38 = v47.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v37, v38);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        ++v23;
      }
      sprintf((char *)&v47, " 0x%04x", *(unsigned __int16 *)(a2 + 2 * v22));
      uint64_t v15 = std::string::append(&__p, (const std::string::value_type *)&v47);
      if ((*(_WORD *)(a2 + 2 * v22) & 0x100) != 0)
      {
        int v25 = 0;
      }
      else
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
        }
        sub_22B1E69D0((uint64_t)v15, "%s", v16, v17, v18, v19, v20, v21, (char)p_p);
        uint64_t v15 = (std::string *)MEMORY[0x230F433D0](&__p, &unk_22B27C63D);
        int v25 = 1;
      }
      uint64_t v22 = v24;
    }
    while (a3 >> 1 > v24++);
  }
  sub_22B1E69D0((uint64_t)v15, "\n------- End USC %s --------\n", v16, v17, v18, v19, v20, v21, (char)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

BOOL sub_22B1F03C0(uint64_t a1, int a2, int a3)
{
  return ((a3 + a2) & 0x3FFFFC00) == 0;
}

uint64_t sub_22B1F03D0(uint64_t result)
{
  if (*(unsigned char *)(result + 2064))
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    return llvm::Function::addFnAttr();
  }
  return result;
}

uint64_t sub_22B1F04DC()
{
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t sub_22B1F0568()
{
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t sub_22B1F05D4(uint64_t a1, uint64_t a2)
{
  v13[2] = *MEMORY[0x263EF8340];
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v4 = *(void *)(a1 + 1568);
  if (v4) {
    size_t v5 = strlen(*(const char **)(a1 + 1568));
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = sub_22B1D7FA8(a1, v4, v5, *(void *)(a1 + 144), *(void *)(a1 + 184), *(void *)(a1 + 184));
  v13[0] = llvm::ConstantInt::get();
  v13[1] = llvm::ConstantInt::get();
  __int16 v9 = 257;
  sub_22B1D4034(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)v13, 2, (uint64_t)v8);
  return 0;
}

llvm::Value *sub_22B1F0720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[2] = *MEMORY[0x263EF8340];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  llvm::FixedVectorType::get();
  uint64_t v6 = *(void *)(a1 + 1720);
  if (v6) {
    size_t v7 = strlen(*(const char **)(a1 + 1720));
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v9 = llvm::PointerType::get();
  uint64_t v10 = sub_22B1D7FA8(a1, v6, v7, v8, v9, *(void *)(a1 + 192));
  v17[0] = a3;
  v17[1] = llvm::ConstantInt::get();
  __int16 v13 = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *sub_22B1F087C(uint64_t a1, uint64_t a2)
{
  v13[2] = *MEMORY[0x263EF8340];
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v4 = *(void *)(a1 + 1392);
  if (v4) {
    size_t v5 = strlen(*(const char **)(a1 + 1392));
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = sub_22B1D7FA8(a1, v4, v5, *(void *)(a1 + 192), *(void *)(a1 + 184), *(void *)(a1 + 184));
  v13[0] = llvm::ConstantInt::get();
  v13[1] = llvm::ConstantInt::get();
  __int16 v9 = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)v13, 2, (uint64_t)v8);
}

llvm::Value *sub_22B1F09B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v16[3] = *MEMORY[0x263EF8340];
  long long v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14) {
    llvm::MetadataTracking::track();
  }
  int v15 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v13);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = *(void *)(a1 + 1408);
  if (v7) {
    size_t v8 = strlen(*(const char **)(a1 + 1408));
  }
  else {
    size_t v8 = 0;
  }
  uint64_t v9 = sub_22B1D7EC8(a1, v7, v8, *(void *)(a1 + 144), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 184));
  v16[0] = llvm::ConstantInt::get();
  v16[1] = a4;
  v16[2] = llvm::ConstantInt::get();
  __int16 v12 = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v9 + 24), v9, (uint64_t)v16, 3, (uint64_t)v11);
}

llvm::Value *sub_22B1F0AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v9 = *(void *)(a1 + 1200);
  if (v9) {
    size_t v10 = strlen(*(const char **)(a1 + 1200));
  }
  else {
    size_t v10 = 0;
  }
  uint64_t v11 = sub_22B1D7FA8(a1, v9, v10, *(void *)(a1 + 160), *(void *)(a1 + 280), *(void *)(a1 + 192));
  uint64_t v12 = llvm::UndefValue::get();
  uint64_t v13 = *(void *)(a1 + 176);
  __int16 v24 = 257;
  uint64_t v14 = sub_22B1D77F0(a1 + 8, a3, v13, 0, (uint64_t)v23);
  __int16 v29 = 257;
  uint64_t v15 = llvm::ConstantInt::get();
  v28[0] = sub_22B2427EC(a1 + 8, v12, v14, v15, (uint64_t)v28);
  v28[1] = llvm::ConstantInt::get();
  __int16 v24 = 257;
  int v16 = sub_22B1D4034(a1 + 8, *(void *)(v11 + 24), v11, (uint64_t)v28, 2, (uint64_t)v23);
  uint64_t v22 = sub_22B241FF8((void *)a1, (uint64_t)v16, a5);
  uint64_t v17 = 2048;
  if (*(void *)(a1 + 160) == a5) {
    uint64_t v17 = 2040;
  }
  uint64_t v18 = *(void *)(a1 + v17);
  if (v18) {
    size_t v19 = strlen(*(const char **)(a1 + v17));
  }
  else {
    size_t v19 = 0;
  }
  uint64_t v20 = sub_22B1DB218(a1, v18, v19, a5, a5);
  __int16 v24 = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v20 + 24), v20, (uint64_t)&v22, 1, (uint64_t)v23);
}

uint64_t sub_22B1F0D08(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _OWORD v29[2] = *MEMORY[0x263EF8340];
  uint64_t v28 = a3;
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v9 = *a3;
  uint64_t v10 = 2032;
  if (v9 == *(void *)(a1 + 160)) {
    uint64_t v10 = 2024;
  }
  uint64_t v11 = *(void *)(a1 + v10);
  if (v11) {
    size_t v12 = strlen(*(const char **)(a1 + v10));
  }
  else {
    size_t v12 = 0;
  }
  uint64_t v13 = sub_22B1DB218(a1, v11, v12, v9, v9);
  __int16 v24 = 257;
  uint64_t v14 = (uint64_t *)sub_22B1D4034(a1 + 8, *(void *)(v13 + 24), v13, (uint64_t)&v28, 1, (uint64_t)v23);
  if (*(unsigned __int8 *)(a5 + 8) >= 7u)
  {
    uint64_t v16 = *(void *)(a1 + 2016);
    if (v16) {
      size_t v17 = strlen(*(const char **)(a1 + 2016));
    }
    else {
      size_t v17 = 0;
    }
    uint64_t v18 = sub_22B1D7FA8(a1, v16, v17, *(void *)(a1 + 184), *(void *)(a1 + 160), *(void *)(a1 + 184));
    v29[0] = sub_22B241B38(a1, v14, 1);
    v29[1] = llvm::ConstantInt::get();
    __int16 v24 = 257;
    size_t v19 = sub_22B1D4034(a1 + 8, *(void *)(v18 + 24), v18, (uint64_t)v29, 2, (uint64_t)v23);
    uint64_t v20 = *(void *)(a1 + 176);
    v22[16] = 257;
    uint64_t v21 = sub_22B1D77F0(a1 + 8, (uint64_t)v19, v20, 0, (uint64_t)v22);
    __int16 v24 = 257;
    return sub_22B1D77F0(a1 + 8, v21, a5, 0, (uint64_t)v23);
  }
  else if (*(void *)(a1 + 160) == a5)
  {
    __int16 v24 = 257;
    return sub_22B1EEEB4(a1 + 8, (uint64_t)v14, a5, (uint64_t)v23);
  }
  else
  {
    __int16 v24 = 257;
    return sub_22B1DC548(a1 + 8, (uint64_t)v14, a5, (uint64_t)v23);
  }
}

uint64_t sub_22B1F0F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v18[2] = *MEMORY[0x263EF8340];
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = *(void *)(a1 + 2016);
  if (v6) {
    size_t v7 = strlen(*(const char **)(a1 + 2016));
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = sub_22B1D7FA8(a1, v6, v7, *(void *)(a1 + 184), *(void *)(a1 + 160), *(void *)(a1 + 184));
  v18[0] = a3;
  v18[1] = llvm::ConstantInt::get();
  __int16 v14 = 257;
  uint64_t v9 = sub_22B1D4034(a1 + 8, *(void *)(v8 + 24), v8, (uint64_t)v18, 2, (uint64_t)v13);
  uint64_t v10 = *(void *)(a1 + 152);
  __int16 v14 = 257;
  uint64_t v11 = (uint64_t *)sub_22B1D7384(a1 + 8, 49, (uint64_t)v9, v10, (uint64_t)v13);
  return sub_22B241B38(a1, v11, 1);
}

uint64_t sub_22B1F10A4(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  long long v38 = *(_OWORD *)a2;
  uint64_t v39 = *(void *)(a2 + 16);
  if (v39) {
    llvm::MetadataTracking::track();
  }
  int v40 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v38);
  if (v39) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = sub_22B241B38(a1, a3, 1);
  uint64_t v41 = v10;
  if (a4 == 16)
  {
    BOOL v11 = a5 == 0;
    uint64_t v12 = 2008;
    uint64_t v13 = 2000;
  }
  else
  {
    if (a4 != 8)
    {
      long long v15 = 0;
      goto LABEL_14;
    }
    BOOL v11 = a5 == 0;
    uint64_t v12 = 1992;
    uint64_t v13 = 1984;
  }
  if (!v11) {
    uint64_t v12 = v13;
  }
  __int16 v14 = (const char **)(a1 + v12);
  long long v15 = *v14;
  if (*v14)
  {
    size_t v16 = strlen(*v14);
    goto LABEL_15;
  }
LABEL_14:
  size_t v16 = 0;
LABEL_15:
  uint64_t v17 = sub_22B1DB218(a1, (uint64_t)v15, v16, *(void *)(a1 + 184), *(void *)(a1 + 160));
  uint64_t v18 = v17;
  uint64_t v19 = 184;
  if (a4 == 8) {
    uint64_t v19 = 176;
  }
  uint64_t v20 = *(void *)(a1 + v19);
  if ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) == 0x12
    && (uint64_t v21 = *(unsigned int *)(*(void *)v10 + 32), v21 != 1))
  {
    llvm::FixedVectorType::get();
    uint64_t v27 = llvm::UndefValue::get();
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        __int16 v37 = 257;
        uint64_t v29 = llvm::ConstantInt::get();
        uint64_t v33 = sub_22B242524(a1 + 8, v10, v29, (uint64_t)v36);
        __int16 v35 = 257;
        uint64_t v30 = sub_22B1D4034(a1 + 8, *(void *)(v18 + 24), v18, (uint64_t)&v33, 1, (uint64_t)v34);
        __int16 v37 = 257;
        uint64_t v31 = llvm::ConstantInt::get();
        uint64_t v27 = sub_22B2427EC(a1 + 8, v27, (uint64_t)v30, v31, (uint64_t)v36);
      }
    }
    uint64_t v26 = llvm::FixedVectorType::get();
    __int16 v37 = 257;
    __int16 v24 = v36;
    uint64_t v25 = a1 + 8;
    unsigned int v23 = (llvm::Value *)v27;
  }
  else
  {
    uint64_t v22 = a1 + 8;
    __int16 v37 = 257;
    unsigned int v23 = sub_22B1D4034(v22, *(void *)(v17 + 24), v17, (uint64_t)&v41, 1, (uint64_t)v36);
    __int16 v35 = 257;
    __int16 v24 = v34;
    uint64_t v25 = v22;
    uint64_t v26 = v20;
  }
  return sub_22B1D77F0(v25, (uint64_t)v23, v26, 0, (uint64_t)v24);
}

llvm::Value *sub_22B1F1320(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  v22[2] = *MEMORY[0x263EF8340];
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v18);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v21 = sub_22B241B38(a1, a3, 1);
  if (a4 > 1)
  {
    uint64_t v9 = *(void *)(a1 + 1992);
    if (v9) {
      size_t v10 = strlen(*(const char **)(a1 + 1992));
    }
    else {
      size_t v10 = 0;
    }
    uint64_t v11 = sub_22B1DB218(a1, v9, v10, *(void *)(a1 + 184), *(void *)(a1 + 160));
    __int16 v17 = 257;
    uint64_t v12 = sub_22B1D4034(a1 + 8, *(void *)(v11 + 24), v11, (uint64_t)&v21, 1, (uint64_t)v16);
    uint64_t v13 = *(void *)(a1 + 2056);
    if (v13) {
      size_t v14 = strlen(*(const char **)(a1 + 2056));
    }
    else {
      size_t v14 = 0;
    }
    uint64_t v15 = sub_22B1D7FA8(a1, v13, v14, *(void *)(a1 + 192), *(void *)(a1 + 184), *(void *)(a1 + 184));
    v22[0] = llvm::ConstantInt::get();
    v22[1] = v12;
    __int16 v17 = 257;
    return sub_22B1D4034(a1 + 8, *(void *)(v15 + 24), v15, (uint64_t)v22, 2, (uint64_t)v16);
  }
  else
  {
    llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    __int16 v17 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

llvm::Value *sub_22B1F154C(uint64_t a1, uint64_t a2)
{
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  sub_22B1D3BF4(a1, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantInt::get();
  llvm::ConstantInt::get();
  __int16 v10 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  uint64_t v4 = *(void *)(a1 + 1376);
  if (v4) {
    size_t v5 = strlen(*(const char **)(a1 + 1376));
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = sub_22B1DB218(a1, v4, v5, *(void *)(a1 + 144), *(void *)(a1 + 184));
  __int16 v10 = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)&Select, 1, (uint64_t)v9);
}

void sub_22B1F16D0(void *a1)
{
  sub_22B1F1708(a1);
  JUMPOUT(0x230F43600);
}

void *sub_22B1F1708(void *a1)
{
  *a1 = &unk_26DE71300;
  uint64_t v2 = a1[99];
  a1[99] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x230F420B0](a1 + 44);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 17));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 16));
  uint64_t v3 = (void *)a1[1];
  if (v3 != a1 + 3) {
    free(v3);
  }
  return a1;
}

uint64_t sub_22B1F17A8(void *a1)
{
  return sub_22B1F17C4((uint64_t)a1 + *(void *)(*a1 - 96));
}

uint64_t sub_22B1F17C4(uint64_t a1)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  if (!sub_22B1EE1E0(a1 + *(void *)(*(void *)a1 - 24), *(int **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 128)))return 0; {
  int v2 = sub_22B240748(a1);
  }
  int v3 = sub_22B24E75C(a1);
  uint64_t v4 = *(int **)(a1 + *(void *)(*(void *)a1 - 24) + 560);
  size_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  unsigned int v6 = *v5;
  if (v6 >= 9)
  {
    if (v5[4]) {
      size_t v7 = (unsigned int *)((char *)v4 + v5[4] + *(unsigned int *)((char *)v4 + v5[4]));
    }
    else {
      size_t v7 = 0;
    }
LABEL_9:
    uint64_t v9 = (int *)v5[2];
    if (v5[2]) {
      uint64_t v9 = (int *)((char *)v9 + (void)v4 + *(unsigned int *)((char *)v9 + (void)v4));
    }
    goto LABEL_11;
  }
  size_t v7 = 0;
  uint64_t v9 = 0;
  if (v6 >= 5) {
    goto LABEL_9;
  }
LABEL_11:
  __int16 v10 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v11 = *v10;
  int v144 = v2;
  int v145 = v3;
  if (v11 < 0x25) {
    goto LABEL_21;
  }
  if (v10[18] && *((unsigned char *)v9 + v10[18])) {
    goto LABEL_17;
  }
  if (v11 < 0x27)
  {
LABEL_21:
    BOOL v12 = 0;
    goto LABEL_22;
  }
  if (!v10[19] || !*((unsigned char *)v9 + v10[19]))
  {
    if (v11 >= 0x29)
    {
      uint64_t v13 = v10[20];
      if (v13)
      {
        BOOL v12 = *((unsigned __int8 *)v9 + v13) != 0;
        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
LABEL_17:
  BOOL v12 = 1;
LABEL_22:
  int v143 = v12;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 368))(a1, v7);
  uint64_t v14 = *(unsigned int *)(a1 + 3880);
  if (v14)
  {
    uint64_t v15 = (char *)sub_22B1EDE8C(*(unsigned int *)(a1 + 3880));
    memset(v15, 255, 4 * v14);
    size_t v16 = &v15[4 * v14];
  }
  else
  {
    uint64_t v15 = 0;
    size_t v16 = 0;
  }
  uint64_t v17 = (int)*v7;
  uint64_t v18 = *(unsigned __int16 *)((char *)v7 - v17 + 8);
  if (*(_WORD *)((char *)v7 - v17 + 8))
  {
    uint64_t v19 = *(unsigned int *)((char *)v7 + v18);
    int v20 = (char *)v7 + v18 + v19;
  }
  else
  {
    uint64_t v18 = 0;
    int v20 = 0;
    uint64_t v19 = *v7;
  }
  uint64_t v21 = *(unsigned int *)((char *)v7 + v18 + v19);
  if (v21)
  {
    uint64_t v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 4 * v21;
    while (1)
    {
      uint64_t v26 = *(unsigned int *)&v20[v22 + 4];
      uint64_t v27 = &v20[v22 + v26];
      uint64_t v28 = *((int *)v27 + 1);
      uint64_t v29 = v26 - v28;
      uint64_t v30 = &v20[v22 + v26 - v28];
      unsigned int v31 = *((unsigned __int16 *)v30 + 2);
      if (v31 < 5)
      {
        uint64_t v36 = v24;
      }
      else
      {
        uint64_t v32 = -v28;
        uint64_t v33 = *((unsigned __int16 *)v30 + 4);
        if (!v33
          || v20[v22 + 4 + v26 + v33] != 1
          || (v31 < 7 || (uint64_t v34 = *(unsigned __int16 *)&v20[v22 + 10 + v29]) == 0
            ? (uint64_t v35 = 0)
            : (uint64_t v35 = *(unsigned int *)&v20[v22 + 4 + v26 + v34]),
              *(_DWORD *)&v15[4 * v35] != -1))
        {
          uint64_t v36 = v24;
LABEL_40:
          uint64_t v37 = v32 + v22;
          if (*(_WORD *)&v20[v26 + 8 + v37] && v20[v22 + 4 + v26 + *(unsigned __int16 *)&v20[v26 + 8 + v37]] == 5) {
            v23 += 2;
          }
          goto LABEL_43;
        }
        uint64_t v36 = (v24 + 1);
        *(_DWORD *)&v15[4 * v35] = v24;
        uint64_t v38 = *((int *)v27 + 1);
        if (*(unsigned __int16 *)&v20[v22 + 4 + v26 - v38] >= 5u)
        {
          uint64_t v32 = -v38;
          goto LABEL_40;
        }
      }
LABEL_43:
      v22 += 4;
      uint64_t v24 = v36;
      if (v25 == v22) {
        goto LABEL_48;
      }
    }
  }
  int v23 = 0;
LABEL_48:
  uint64_t v39 = *(void *)a1;
  char v40 = *(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1686);
  int v161 = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  uint64_t v164 = (char *)v166;
  uint64_t v165 = 0x800000000;
  v166[64] = 0x1FFFFFFFFLL;
  char v167 = v40;
  int v169 = 0;
  memset(v168, 0, 74);
  char v170 = 1;
  if ((*(unsigned char *)(*(void *)(a1 + 3816) + 60) & 4) != 0) {
    v168[73] = 1;
  }
  int v141 = v23;
  unint64_t v41 = *(unsigned int *)(a1 + 3880);
  if (v41)
  {
    uint64_t v42 = 0;
    for (unint64_t i = 0; i < v41; ++i)
    {
      unint64_t v44 = *(void *)(a1 + 3872) + v42;
      int v45 = *(_DWORD *)&v15[4 * *(unsigned int *)(v44 + 16)];
      if (v45 != -1)
      {
        *(_DWORD *)(v44 + 16) = v45;
        sub_22B268620((uint64_t)&v161, v44);
        unint64_t v41 = *(unsigned int *)(a1 + 3880);
      }
      v42 += 64;
    }
    uint64_t v39 = *(void *)a1;
  }
  sub_22B268AB4((uint64_t)&v161, *(void *)(a1 + *(void *)(v39 - 24) + 344));
  uint64_t v46 = *(void *)a1;
  sub_22B268D90(&v161, *(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1634), 0);
  sub_22B268E24((uint64_t)&v161, a1 + *(void *)(v46 - 24) + 704);
  uint64_t v47 = *(void *)a1;
  uint64_t v48 = *(void *)(*(void *)a1 - 24);
  uint64_t v146 = v15;
  int v142 = v165;
  if (v165)
  {
    unint64_t v139 = v16;
    sub_22B269010((unint64_t)v164, (unint64_t)&v164[64 * (unint64_t)v165], 126 - 2 * __clz(v165), 1);
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    long long v148 = xmmword_22B26F8D0;
    long long v149 = 0u;
    long long v150 = 0u;
    uint64_t v151 = 0;
    uint64_t v152 = 1;
    __int16 v153 = 256;
    uint64_t v154 = 0;
    if (v165)
    {
      uint64_t v137 = v48;
      unint64_t v49 = 0;
      uint64_t v50 = 0;
      char v51 = 0;
      uint64_t v52 = 0;
      do
      {
        int v53 = &v164[64 * v49];
        uint64_t v56 = (char *)*((void *)v53 + 3);
        uint64_t v54 = v53 + 24;
        uint64_t v55 = v56;
        int v57 = v54[23];
        if (v57 >= 0) {
          uint64_t v58 = v54;
        }
        else {
          uint64_t v58 = v55;
        }
        if (v57 >= 0) {
          size_t v59 = v54[23];
        }
        else {
          size_t v59 = *((void *)v54 + 1);
        }
        int v60 = sub_22B1EC908((uint64_t)__p, v58, v59);
        int v61 = v60;
        if (v51 >= v52)
        {
          uint64_t v62 = (v51 - v50) >> 2;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 62) {
LABEL_179:
          }
            abort();
          if ((v52 - v50) >> 1 > v63) {
            unint64_t v63 = (v52 - v50) >> 1;
          }
          if ((unint64_t)(v52 - v50) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v63;
          }
          if (v64)
          {
            if (v64 >> 62) {
              sub_22B1E33E4();
            }
            uint64_t v65 = (char *)operator new(4 * v64);
          }
          else
          {
            uint64_t v65 = 0;
          }
          uint64_t v66 = &v65[4 * v62];
          *(_DWORD *)uint64_t v66 = v61;
          uint64_t v67 = v66 + 4;
          while (v51 != v50)
          {
            int v68 = *((_DWORD *)v51 - 1);
            v51 -= 4;
            *((_DWORD *)v66 - 1) = v68;
            v66 -= 4;
          }
          uint64_t v52 = &v65[4 * v64];
          if (v50) {
            operator delete(v50);
          }
          uint64_t v50 = v66;
          char v51 = v67;
        }
        else
        {
          *(_DWORD *)char v51 = v60;
          v51 += 4;
        }
        ++v49;
      }
      while (v49 < v165);
      if (v165)
      {
        BYTE6(v151) = 1;
        sub_22B1ED19C((uint64_t)__p, v51 - v50, 4uLL);
        sub_22B1ED19C((uint64_t)__p, v51 - v50, 4uLL);
        uint64_t v69 = v51 - v50;
        if (v51 == v50) {
          char v70 = (char *)&unk_22B272212;
        }
        else {
          char v70 = v50;
        }
        if (v51 != v50)
        {
          uint64_t v71 = v69 >> 2;
          BOOL v72 = v70 - 4;
          do
          {
            uint64_t v73 = v71 - 1;
            int v74 = *(_DWORD *)&v72[4 * v71];
            sub_22B1ECFA8((uint64_t)__p, 4uLL);
            sub_22B1ED138((uint64_t)__p, v149 - v150 + DWORD2(v149) - v74 + 4);
            uint64_t v71 = v73;
          }
          while (v73);
        }
        BYTE6(v151) = 0;
        int v75 = sub_22B1ED138((uint64_t)__p, (unint64_t)v69 >> 2);
        BYTE6(v151) = 1;
        __int16 v76 = v149 - v150 + WORD4(v149);
        if (v75)
        {
          int v77 = v75;
          sub_22B1ECFA8((uint64_t)__p, 4uLL);
          sub_22B1ED0D4((uint64_t *)__p, 4, v149 - v150 + DWORD2(v149) - v77 + 4);
        }
        int v78 = sub_22B1ECAA8((uint64_t)__p, v76);
        sub_22B1EE128((uint64_t)__p, v78);
      }
      uint64_t v48 = v137;
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v81 = a1 + v48 + 704;
    int v82 = sub_22B1EE0A8(v81, (void *)v150, (v149 - v150 + DWORD2(v149)));
    if (v50) {
      operator delete(v50);
    }
    sub_22B1EDAB0(__p);
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    long long v148 = xmmword_22B26F8D0;
    long long v149 = 0u;
    long long v150 = 0u;
    uint64_t v151 = 0;
    uint64_t v152 = 1;
    __int16 v153 = 256;
    uint64_t v154 = 0;
    if (v165)
    {
      uint64_t v138 = v81;
      int v140 = v82;
      unint64_t v83 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      unint64_t v86 = 0;
      do
      {
        unsigned int v87 = v164[64 * v83 + 8] | (unsigned __int16)(*(_DWORD *)&v164[64 * v83 + 12] << 8) | (*(_DWORD *)&v164[64 * v83 + 4] << 16) & 0x80FFFFFF | ((*(_DWORD *)&v164[64 * v83] & 0x7F) << 24);
        if ((unint64_t)v85 >= v86)
        {
          uint64_t v88 = v85 - v84;
          unint64_t v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 62) {
            goto LABEL_179;
          }
          if ((uint64_t)(v86 - (void)v84) >> 1 > v89) {
            unint64_t v89 = (uint64_t)(v86 - (void)v84) >> 1;
          }
          if (v86 - (unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v90 = v89;
          }
          if (v90) {
            unint64_t v90 = (unint64_t)sub_22B1EDE8C(v90);
          }
          else {
            uint64_t v91 = 0;
          }
          uint64_t v92 = (unsigned int *)(v90 + 4 * v88);
          *uint64_t v92 = v87;
          uint64_t v93 = v92 + 1;
          while (v85 != v84)
          {
            unsigned int v94 = *--v85;
            *--uint64_t v92 = v94;
          }
          unint64_t v86 = v90 + 4 * v91;
          if (v84) {
            operator delete(v84);
          }
          uint64_t v84 = v92;
          uint64_t v85 = v93;
        }
        else
        {
          *v85++ = v87;
        }
        ++v83;
      }
      while (v83 < v165);
      if (v165)
      {
        if (v85 == v84) {
          uint64_t v95 = (unsigned int *)&unk_2683E9370;
        }
        else {
          uint64_t v95 = v84;
        }
        int v96 = sub_22B1EDE08((uint64_t)__p, v95, v85 - v84);
        BYTE6(v151) = 1;
        __int16 v97 = v149 - v150 + WORD4(v149);
        sub_22B1EC980((uint64_t *)__p, 4, v96);
        int v98 = sub_22B1ECAA8((uint64_t)__p, v97);
        sub_22B1EE128((uint64_t)__p, v98);
        int v100 = DWORD2(v149);
        unint64_t v99 = (void *)v150;
        int v101 = v149;
      }
      else
      {
        int v100 = 0;
        int v101 = 0;
        unint64_t v99 = 0;
      }
      int v82 = v140;
      uint64_t v81 = v138;
    }
    else
    {
      uint64_t v84 = 0;
      int v100 = 0;
      int v101 = 0;
      unint64_t v99 = 0;
    }
    int v102 = sub_22B1EE0A8(v81, v99, (v101 - v99 + v100));
    uint64_t v15 = v146;
    size_t v16 = v139;
    if (v84) {
      operator delete(v84);
    }
    sub_22B1EDAB0(__p);
    uint64_t v47 = *(void *)a1;
    int v79 = v82;
    int v80 = v102;
  }
  else
  {
    int v79 = 0;
    int v80 = 0;
  }
  if (v16 == v15) {
    int v103 = &unk_2683E9370;
  }
  else {
    int v103 = v15;
  }
  int v104 = sub_22B1EDE08(a1 + *(void *)(v47 - 24) + 704, v103, (v16 - v15) >> 2);
  if (v162 == v161) {
    uint64_t v105 = &unk_2683E92F4;
  }
  else {
    uint64_t v105 = v161;
  }
  int v106 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v105, (v162 - (unsigned char *)v161) >> 2);
  uint64_t v107 = a1 + *(void *)(*(void *)a1 - 24);
  int v108 = (uint64_t *)(v107 + 704);
  *(unsigned char *)(v107 + 774) = 1;
  int v109 = *(_DWORD *)(v107 + 736) - *(_DWORD *)(v107 + 752) + *(_DWORD *)(v107 + 744);
  if (v142)
  {
    sub_22B1EC980(v108, 4, v79);
    sub_22B1EC980(v108, 6, v80);
    sub_22B1EF4B8(v108, 22, *(unsigned __int8 *)(a1 + 37));
  }
  sub_22B1EC980(v108, 8, v104);
  sub_22B1EC980(v108, 10, v106);
  sub_22B1EF4B8(v108, 12, v168[72]);
  sub_22B1EF4B8(v108, 14, *(unsigned __int8 *)(a1 + 3853));
  sub_22B1EF4B8(v108, 16, *(unsigned __int8 *)(a1 + 3852));
  if (*(unsigned char *)(a1 + 2384)) {
    int v110 = v143;
  }
  else {
    int v110 = 0;
  }
  sub_22B1EF4B8(v108, 20, v110);
  sub_22B1EF4B8(v108, 18, v143);
  int v111 = sub_22B1ECAA8((uint64_t)v108, v109);
  uint64_t v112 = a1 + *(void *)(*(void *)a1 - 24);
  *(unsigned char *)(v112 + 774) = 1;
  int v113 = *(_DWORD *)(v112 + 736) - *(_DWORD *)(v112 + 752) + *(_DWORD *)(v112 + 744);
  sub_22B1F26A0((uint64_t *)(v112 + 704), v144);
  sub_22B1F2710((uint64_t *)(v112 + 704), v145);
  if (v111)
  {
    sub_22B1ECFA8(v112 + 704, 4uLL);
    sub_22B1ED0D4((uint64_t *)(v112 + 704), 14, *(_DWORD *)(v112 + 736) - *(_DWORD *)(v112 + 752) + *(_DWORD *)(v112 + 744) - v111 + 4);
  }
  uint64_t v114 = a1 + *(void *)(*(void *)a1 - 24) + 704;
  int v115 = sub_22B1ECAA8(v112 + 704, v113);
  sub_22B1EE128(v114, v115);
  BOOL v116 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
  uint64_t v117 = (unsigned int *)(v116[23].__r_.__value_.__l.__size_
                        + *(unsigned __int16 *)(v116[23].__r_.__value_.__l.__size_
                                              - *(int *)v116[23].__r_.__value_.__l.__size_
                                              + 4));
  char v118 = (unsigned int *)((char *)v117
                        + *v117
                        + *(unsigned __int16 *)((char *)v117 + *v117 - *(unsigned int *)((char *)v117 + *v117) + 8));
  if (*(unsigned int *)((char *)v118 + *v118) > 0x20)
  {
    uint64_t v8 = 0;
    char v120 = v146;
  }
  else
  {
    unsigned int v119 = *(_DWORD *)(*(void *)(v116[16].__r_.__value_.__r.__words[2] + 32) + 44);
    char v120 = v146;
    if (v169 + v141 <= v119)
    {
      uint64_t v8 = 1;
    }
    else
    {
      unint64_t v121 = v116 + 17;
      std::to_string(&v156, v169 + v141);
      uint64_t v122 = std::string::insert(&v156, 0, "Number of varying components(");
      std::string::size_type v123 = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      size_t v124 = std::string::append(&v157, ") ");
      std::string::size_type v125 = v124->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__r.__words[2] = v125;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      size_t v126 = std::string::append(&v158, "exceeds the limit (");
      std::string::size_type v127 = v126->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v159.__r_.__value_.__l.__data_ = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      v159.__r_.__value_.__r.__words[2] = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v155, v119);
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v128 = &v155;
      }
      else {
        BOOL v128 = (std::string *)v155.__r_.__value_.__r.__words[0];
      }
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v155.__r_.__value_.__l.__size_;
      }
      char v130 = std::string::append(&v159, (const std::string::value_type *)v128, size);
      std::string::size_type v131 = v130->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v160.__r_.__value_.__l.__data_ = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
      v160.__r_.__value_.__r.__words[2] = v131;
      v130->__r_.__value_.__l.__size_ = 0;
      v130->__r_.__value_.__r.__words[2] = 0;
      v130->__r_.__value_.__r.__words[0] = 0;
      BOOL v132 = std::string::append(&v160, ")");
      std::string::size_type v133 = v132->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      *(void *)&long long v148 = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v148) & 0x80u) == 0) {
        char v134 = __p;
      }
      else {
        char v134 = (void **)__p[0];
      }
      if ((SBYTE7(v148) & 0x80u) == 0) {
        std::string::size_type v135 = BYTE7(v148);
      }
      else {
        std::string::size_type v135 = (std::string::size_type)__p[1];
      }
      std::string::append(v121, (const std::string::value_type *)v134, v135);
      if (SBYTE7(v148) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v155.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v156.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = 0;
    }
  }
  __p[0] = v168;
  sub_22B1F2780((void ***)__p);
  sub_22B1F280C(&v164);
  if (v161)
  {
    uint64_t v162 = v161;
    operator delete(v161);
  }
  if (v120) {
    operator delete(v120);
  }
  return v8;
}

uint64_t sub_22B1F25D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v6 = 4 * a3;
  sub_22B1ED19C(a1, 4 * a3, 4uLL);
  sub_22B1ED19C(a1, v6, 4uLL);
  if (a3)
  {
    uint64_t v7 = a2 - 4;
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = v8 - 1;
      int v10 = *(_DWORD *)(v7 + 4 * v8);
      sub_22B1ECFA8(a1, 4uLL);
      sub_22B1ED138(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  *(unsigned char *)(a1 + 70) = 0;
  return sub_22B1ED138(a1, a3);
}

uint64_t *sub_22B1F26A0(uint64_t *result, int a2)
{
  if (a2)
  {
    int v3 = result;
    sub_22B1ECFA8((uint64_t)result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return sub_22B1ED0D4(v3, 4, v4);
  }
  return result;
}

uint64_t *sub_22B1F2710(uint64_t *result, int a2)
{
  if (a2)
  {
    int v3 = result;
    sub_22B1ECFA8((uint64_t)result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return sub_22B1ED0D4(v3, 8, v4);
  }
  return result;
}

void sub_22B1F2780(void ***a1)
{
  int v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_22B1F280C(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    do
    {
      if (v2[v4 - 17] < 0) {
        operator delete(*(void **)&v2[v4 - 40]);
      }
      v4 -= 64;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_22B1F287C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_22B1F2898(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int **)(a1 + 3816);
  sub_22B1D7BF0(v40, "AGCFragmentContextStateAGP");
  sub_22B1D7BF0(&v44, "AGCFragmentContextState");
  sub_22B1D7BF0(&v43, "fragmentState");
  sub_22B1D7BF0(&v86, "AGCFragmentState");
  sub_22B1D7BF0(&v65, "GL and Metal state:");
  sub_22B1D7BF0(v63, "alphaToCoverage");
  sub_22B1F37D0(&v66, (const void **)v63, *v4 & 1);
  sub_22B1D7BF0(v61, "alphaToOne");
  sub_22B1F37D0(&v67, (const void **)v61, (*v4 >> 1) & 1);
  sub_22B1D7BF0(v59, "sampleCoverage");
  sub_22B1F37D0(&v68, (const void **)v59, (*v4 >> 2) & 1);
  sub_22B1D7BF0(&v69, "GL specific state:");
  sub_22B1D7BF0(v57, "depthStencilWriteDisabled");
  sub_22B1F37D0(&v70, (const void **)v57, (*v4 >> 4) & 1);
  sub_22B1D7BF0(v55, "logicOp");
  sub_22B1F37D0(&v71, (const void **)v55, (*v4 >> 5) & 1);
  sub_22B1D7BF0(v53, "logicOpState");
  sub_22B1F3828(&v72, (const void **)v53, off_26488D3F8[((unint64_t)*v4 >> 6) & 0x1F]);
  sub_22B1D7BF0(&v52, "alphaTest");
  sub_22B1F37D0(&v73, (const void **)&v52.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  sub_22B1D7BF0(v50, "alphaTestFunc");
  sub_22B1F3828(&v74, (const void **)v50, off_26488D480[(unsigned __int16)*v4 >> 12]);
  sub_22B1D7BF0(&v49, "smoothPoints");
  sub_22B1F37D0(&v75, (const void **)&v49.__r_.__value_.__l.__data_, HIWORD(*v4) & 1);
  sub_22B1D7BF0(&v48, "pointSpriteEnabled");
  sub_22B1F37D0(&v76, (const void **)&v48.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  sub_22B1D7BF0(&v47, "outputPointSize");
  sub_22B1F37D0(&v77, (const void **)&v47.__r_.__value_.__l.__data_, (*v4 >> 18) & 1);
  sub_22B1D7BF0(&v46, "shaderDebugEnable");
  sub_22B1F37D0(&v78, (const void **)&v46.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  sub_22B1D7BF0(&__p, "unused");
  sub_22B1F37D0(&v79, (const void **)&__p.__r_.__value_.__l.__data_, *v4 >> 20);
  sub_22B1F3880(&v42, (uint64_t)&v86, (uint64_t)&v65, 15);
  uint64_t v5 = 45;
  do
  {
    if (v65.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0) {
      operator delete(v63[v5]);
    }
    v5 -= 3;
  }
  while (v5 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  sub_22B1F3B10(&v86, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)&v42);
  sub_22B1D7BF0(v53, "colorMaskState");
  sub_22B1D7BF0(v63, "AGCColorMaskState");
  sub_22B1D7BF0(v61, "redEnableBits");
  sub_22B1F3BF8(&v65, (const void **)v61);
  sub_22B1D7BF0(v59, "greenEnableBits");
  sub_22B1F3BF8(&v66, (const void **)v59);
  sub_22B1D7BF0(v57, "blueEnableBits");
  sub_22B1F3BF8(&v67, (const void **)v57);
  sub_22B1D7BF0(v55, "alphaEnableBits");
  sub_22B1F3BF8(&v68, (const void **)v55);
  sub_22B1F3880(&v52, (uint64_t)v63, (uint64_t)&v65, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v68.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v68.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  sub_22B1F3B10(&v87, (const void **)v53, (uint64_t)&v52);
  sub_22B1F3880(&v65, (uint64_t)&v44, (uint64_t)&v86, 2);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v87.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v86 + j * 8 + 24));
    }
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  sub_22B1D7BF0(&v86, "mutableBuffers");
  sub_22B1F3BF8(&v66, (const void **)&v86.__r_.__value_.__l.__data_);
  sub_22B1D7BF0(v63, "genCompilerStatistics");
  sub_22B1F37D0(&v67, (const void **)v63, v4[15] & 1);
  sub_22B1D7BF0(v61, "genTelemetryStatistics");
  sub_22B1F37D0(&v68, (const void **)v61, (v4[15] >> 1) & 1);
  sub_22B1D7BF0(v59, "fragmentOnly");
  sub_22B1F37D0(&v69, (const void **)v59, (v4[15] >> 2) & 1);
  sub_22B1D7BF0(v57, "openglMode");
  sub_22B1F37D0(&v70, (const void **)v57, (v4[15] >> 3) & 1);
  sub_22B1D7BF0(v55, "customBorderColor");
  sub_22B1F37D0(&v71, (const void **)v55, (v4[15] >> 4) & 1);
  sub_22B1D7BF0(v53, "disableTextureRWBoundsCheck");
  sub_22B1F37D0(&v72, (const void **)v53, (v4[15] >> 5) & 1);
  sub_22B1D7BF0(&v52, "debugInstrumentationEnabled");
  sub_22B1F37D0(&v73, (const void **)&v52.__r_.__value_.__l.__data_, (v4[15] >> 6) & 1);
  sub_22B1D7BF0(v50, "unused");
  sub_22B1F37D0(&v74, (const void **)v50, v4[15] >> 7);
  sub_22B1F3DC8(&v49, v4 + 6);
  uint64_t v8 = std::string::insert(&v49, 0, "blendState[0]: ");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3DC8(&v48, v4 + 7);
  int v10 = std::string::insert(&v48, 0, "blendState[1]: ");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3DC8(&v47, v4 + 8);
  BOOL v12 = std::string::insert(&v47, 0, "blendState[2]: ");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3DC8(&v46, v4 + 9);
  uint64_t v14 = std::string::insert(&v46, 0, "blendState[3]: ");
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3DC8(&__p, v4 + 10);
  size_t v16 = std::string::insert(&__p, 0, "blendState[4]: ");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3DC8(&v44, v4 + 11);
  uint64_t v18 = std::string::insert(&v44, 0, "blendState[5]: ");
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
  long long v80 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v81 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3DC8(&v43, v4 + 12);
  int v20 = std::string::insert(&v43, 0, "blendState[6]: ");
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
  long long v82 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v83 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3DC8(&v42, v4 + 13);
  uint64_t v22 = std::string::insert(&v42, 0, "blendState[7]: ");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
  long long v84 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v85 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3880(&v29, (uint64_t)v40, (uint64_t)&v65, 18);
  uint64_t v24 = 54;
  do
  {
    if (v65.__r_.__value_.__s.__data_[v24 * 8 - 1] < 0) {
      operator delete(v63[v24]);
    }
    v24 -= 3;
  }
  while (v24 * 8);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  uint64_t v25 = *(void *)(a1 + 2960);
  sub_22B1D7BF0(v63, "AGCDrawBufferState");
  sub_22B1D7BF0(v61, "enabledBits");
  sub_22B1F3BF8(&v86, (const void **)v61);
  sub_22B1D7BF0(v59, "sampleCount");
  sub_22B1F37D0(&v87, (const void **)v59, (*(_DWORD *)(v25 + 32) >> 8) & 0xF);
  sub_22B1D7BF0(v57, "colorSampleCount");
  sub_22B1F37D0(&v88, (const void **)v57, (unsigned __int16)*(_DWORD *)(v25 + 32) >> 12);
  sub_22B1D7BF0(v55, "outputPartitionSize");
  sub_22B1F37D0(&v89, (const void **)v55, *(unsigned __int8 *)(v25 + 34));
  sub_22B1D7BF0(v53, "LIBSpilling");
  sub_22B1F37D0(&v90, (const void **)v53, HIBYTE(*(_DWORD *)(v25 + 32)) & 1);
  sub_22B1D7BF0(&v52, "unused");
  sub_22B1F37D0(&v91, (const void **)&v52.__r_.__value_.__l.__data_, *(_DWORD *)(v25 + 32) >> 25);
  sub_22B1D7BF0(v50, "encoded : ");
  sub_22B1D7BF0(&v49, "encoded[0]");
  sub_22B1F404C(&v48, (_DWORD *)v25);
  sub_22B1F3B10(&v65, (const void **)&v49.__r_.__value_.__l.__data_, (uint64_t)&v48);
  sub_22B1D7BF0(&v47, "encoded[1]");
  sub_22B1F404C(&v46, (_DWORD *)(v25 + 4));
  sub_22B1F3B10(&v66, (const void **)&v47.__r_.__value_.__l.__data_, (uint64_t)&v46);
  sub_22B1D7BF0(&__p, "encoded[2]");
  sub_22B1F404C(&v44, (_DWORD *)(v25 + 8));
  sub_22B1F3B10(&v67, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v44);
  sub_22B1D7BF0(&v43, "encoded[3]");
  sub_22B1F404C(&v42, (_DWORD *)(v25 + 12));
  sub_22B1F3B10(&v68, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)&v42);
  sub_22B1D7BF0(v40, "encoded[4]");
  sub_22B1F404C(&v39, (_DWORD *)(v25 + 16));
  sub_22B1F3B10(&v69, (const void **)v40, (uint64_t)&v39);
  sub_22B1D7BF0(v37, "encoded[5]");
  sub_22B1F404C(&v36, (_DWORD *)(v25 + 20));
  sub_22B1F3B10(&v70, (const void **)v37, (uint64_t)&v36);
  sub_22B1D7BF0(v34, "encoded[6]");
  sub_22B1F404C(&v33, (_DWORD *)(v25 + 24));
  sub_22B1F3B10(&v71, (const void **)v34, (uint64_t)&v33);
  sub_22B1D7BF0(v31, "encoded[7]");
  sub_22B1F404C(&v30, (_DWORD *)(v25 + 28));
  sub_22B1F3B10(&v72, (const void **)v31, (uint64_t)&v30);
  sub_22B1F3880(&v92, (uint64_t)v50, (uint64_t)&v65, 8);
  sub_22B1F3880(&v28, (uint64_t)v63, (uint64_t)&v86, 7);
  for (uint64_t k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v92.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v92.__r_.__value_.__l.__data_ + k * 8));
    }
  }
  for (uint64_t m = 0; m != -24; m -= 3)
  {
    if (SHIBYTE(v72.__r_.__value_.__r.__words[m + 2]) < 0) {
      operator delete(*(void **)((char *)&v72.__r_.__value_.__l.__data_ + m * 8));
    }
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  sub_22B1F42B8(a2, (const void **)&v29.__r_.__value_.__l.__data_, (const void **)&v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_22B1F37D0(std::string *a1, const void **a2, unsigned int __val)
{
  std::to_string(&v5, __val);
  sub_22B1F3B10(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_22B1F3828(std::string *a1, const void **a2, char *__s)
{
  sub_22B1D7BF0(__p, __s);
  sub_22B1F3B10(a1, a2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22B1F3880(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_22B1DC004(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v27 = *(void *)(a2 + 16);
  }
  sub_22B1F4374((void **)&v28.__r_.__value_.__l.__data_, (std::string::value_type *)__dst, 0);
  sub_22B1D7BF0(v21, "{");
  sub_22B1F4374(&__p, (std::string::value_type *)v21, 0);
  if ((v25 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v8 = v25;
  }
  else {
    std::string::size_type v8 = v24;
  }
  std::string::size_type v9 = std::string::append(&v28, p_p, v8);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__dst[0]);
    if (!a4) {
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (a4)
  {
LABEL_20:
    for (uint64_t i = 24 * a4; i; i -= 24)
    {
      if (*(char *)(a3 + 23) < 0) {
        sub_22B1DC004(&v28, *(void **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v28 = *(std::string *)a3;
      }
      int v12 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        sub_22B1DC004(&v20, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string v20 = v28;
      }
      sub_22B1F4374(&__p, (std::string::value_type *)&v20, 1);
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v13 = (const std::string::value_type *)&__p;
      }
      else {
        std::string::size_type v13 = (const std::string::value_type *)__p;
      }
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v14 = v25;
      }
      else {
        std::string::size_type v14 = v24;
      }
      std::string::append(&v29, v13, v14);
      if ((char)v25 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if (v12 < 0) {
LABEL_40:
        }
          operator delete(v28.__r_.__value_.__l.__data_);
      }
      else if (v12 < 0)
      {
        goto LABEL_40;
      }
      a3 += 24;
    }
  }
LABEL_41:
  sub_22B1D7BF0(v18, "}");
  sub_22B1F4374((void **)&v28.__r_.__value_.__l.__data_, (std::string::value_type *)v18, 0);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = &v29;
  }
  else {
    std::string::size_type v15 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = std::string::insert(&v28, 0, (const std::string::value_type *)v15, size);
  *a1 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_22B1F3B10(std::string *a1, const void **a2, uint64_t a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t v7 = &v13;
  sub_22B1EA4B0((uint64_t)&v13, v6 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v8 = a2;
    }
    else {
      std::string::size_type v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_DWORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 2112032;
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = (const std::string::value_type *)a3;
  }
  else {
    std::string::size_type v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  int v12 = std::string::append(&v13, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_22B1F3BF8(std::string *a1, const void **a2)
{
  sub_22B1ED4EC((uint64_t)v8);
  sub_22B1E6CB0(v9, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) = *(_DWORD *)((unsigned char *)&v9[1] + *(void *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_22B1F3B10(a1, a2, (uint64_t)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  v8[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v9[0] = v4;
  v9[1] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230F43590](&v11);
}

void sub_22B1F3DC8(std::string *a1, unsigned int *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v20, "AGCBlendState");
  sub_22B1D7BF0(v18, "enabled");
  if (*a2) {
    uint64_t v4 = "yes";
  }
  else {
    uint64_t v4 = "no";
  }
  sub_22B1F3828(&v22, (const void **)v18, v4);
  sub_22B1D7BF0(v16, "src");
  sub_22B1F3828(&v23, (const void **)v16, off_26488D4C8[((unint64_t)*a2 >> 1) & 0x1F]);
  sub_22B1D7BF0(v14, "dst");
  sub_22B1F3828(&v24, (const void **)v14, off_26488D4C8[((unint64_t)*a2 >> 6) & 0x1F]);
  sub_22B1D7BF0(v12, "srcA");
  sub_22B1F3828(&v25, (const void **)v12, off_26488D4C8[(unsigned __int16)*a2 >> 11]);
  sub_22B1D7BF0(v10, "dstA");
  sub_22B1F3828(&v26, (const void **)v10, off_26488D4C8[*((_WORD *)a2 + 1) & 0x1F]);
  sub_22B1D7BF0(v8, "equation");
  sub_22B1F3828(&v27, (const void **)v8, off_26488D568[((unint64_t)*a2 >> 21) & 7]);
  sub_22B1D7BF0(__p, "equationA");
  sub_22B1F3828(&v28, (const void **)__p, off_26488D568[*((unsigned char *)a2 + 3) & 7]);
  sub_22B1F3880(a1, (uint64_t)v20, (uint64_t)&v22, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v28.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v28.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
}

void sub_22B1F404C(std::string *a1, _DWORD *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v19, "AGCDrawBuffer");
  sub_22B1D7BF0(v17, "pbeSourceFormat");
  sub_22B1F3828(&v21, (const void **)v17, off_26488D5A0[*a2 & 0x1F]);
  sub_22B1D7BF0(v15, "numWrittenComponents");
  sub_22B1F37D0(&v22, (const void **)v15, *a2 >> 5);
  sub_22B1D7BF0(v13, "gammaCorrection");
  sub_22B1F37D0(&v23, (const void **)v13, (*a2 >> 8) & 1);
  sub_22B1D7BF0(v11, "colorSpaceConversion");
  sub_22B1F3828(&v24, (const void **)v11, off_26488D658[((unint64_t)*a2 >> 9) & 7]);
  sub_22B1D7BF0(v9, "preEmitSwizzle");
  sub_22B1F3828(&v25, (const void **)v9, off_26488D680[((unint64_t)*a2 >> 12) & 7]);
  sub_22B1D7BF0(v7, "outputPartitionOffset");
  sub_22B1F37D0(&v26, (const void **)v7, (*a2 >> 15));
  sub_22B1D7BF0(__p, "unused");
  sub_22B1F37D0(&v27, (const void **)__p, *a2 >> 23);
  sub_22B1F3880(a1, (uint64_t)v19, (uint64_t)&v21, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

uint64_t sub_22B1F42B8(uint64_t a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = sub_22B1EA4B0(a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    char v8 = (char *)result;
  }
  else {
    char v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v9 = a2;
    }
    else {
      char v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  char v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      char v11 = a3;
    }
    else {
      char v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void sub_22B1F4374(void **a1, std::string::value_type *a2, int a3)
{
  sub_22B1D7BF0(&v14, (char *)&unk_22B27C63D);
  if (a3) {
    std::string::append(&v14, "  ");
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    sub_22B1DC004(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v14;
  }
  if (a2[23] < 0)
  {
    char v7 = a2;
    a2 = *(std::string::value_type **)a2;
    uint64_t v6 = *((void *)v7 + 1);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = a2[23];
    if (!a2[23]) {
      goto LABEL_19;
    }
  }
  do
  {
    int v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v9 = &v14;
      }
      else {
        char v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  sub_22B1EA4B0((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_22B1F44E0()
{
  return 1;
}

const char *sub_22B1F44E8()
{
  return "fragment";
}

void sub_22B1F44F4(void *a1)
{
  int v1 = (char *)a1 + *(void *)(*a1 - 32);
  *(void *)int v1 = &unk_26DE715A8;
  *((void *)v1 + 551) = &unk_26DE717D0;
  *((void *)v1 + 304) = &unk_26DE71758;
  sub_22B1F280C((char **)v1 + 484);
  sub_22B1F45CC((uint64_t *)v1, (uint64_t *)off_26DE71838);
  sub_22B1ED95C((uint64_t)(v1 + 4408));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B1F45CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[7];
  a1[304] = a2[8];
  uint64_t v5 = a1[475];
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 473));
  }
  uint64_t v7 = a1[472];
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 470));
  }
  uint64_t v8 = a1[469];
  if (v8 != -8192 && v8 != -4096 && v8) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 467));
  }
  uint64_t v9 = a1[466];
  if (v9 != -8192 && v9 != -4096 && v9) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 464));
  }
  uint64_t v10 = a1[463];
  if (v10 != -8192 && v10 != -4096 && v10) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 461));
  }
  uint64_t v11 = a1[460];
  if (v11 != -8192 && v11 != -4096 && v11) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 458));
  }
  uint64_t v12 = a1[456];
  if (v12 != -8192 && v12 != -4096 && v12) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 454));
  }
  uint64_t v13 = a1[453];
  if (v13 != -8192 && v13 != -4096 && v13) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 451));
  }
  uint64_t v14 = a1[450];
  if (v14 != -8192 && v14 != -4096 && v14) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 448));
  }
  uint64_t v15 = a1[447];
  if (v15 != -8192 && v15 != -4096 && v15) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 445));
  }
  uint64_t v16 = a1[444];
  if (v16 != -8192 && v16 != -4096 && v16) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 442));
  }
  for (uint64_t i = 0; i != -32; i -= 4)
  {
    uint64_t v18 = a1[i + 440];
    if (v18 != -8192 && v18 != -4096 && v18 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[i + 438]);
    }
  }
  for (uint64_t j = 0; j != -32; j -= 4)
  {
    uint64_t v21 = a1[j + 408];
    if (v21 != -8192 && v21 != -4096 && v21 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[j + 406]);
    }
  }
  return sub_22B23C03C((uint64_t)a1, a2 + 2);
}

uint64_t sub_22B1F48AC()
{
  return 1;
}

uint64_t sub_22B1F48B4()
{
  return 1;
}

const char *sub_22B1F48BC()
{
  return "fragment";
}

uint64_t sub_22B1F48C8()
{
  return 0;
}

uint64_t sub_22B1F48D0(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 3816) + 60) >> 4) & 1;
}

uint64_t sub_22B1F48E0()
{
  return 0;
}

uint64_t sub_22B1F48E8()
{
  return 0;
}

uint64_t sub_22B1F48F0()
{
  return 0;
}

uint64_t sub_22B1F48F8()
{
  return 1;
}

uint64_t sub_22B1F4904(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22B1F490C(void *a1)
{
  return *(unsigned int *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 808);
}

uint64_t sub_22B1F4930()
{
  return 1;
}

uint64_t sub_22B1F4938()
{
  return 1;
}

uint64_t sub_22B1F4940()
{
  return 1;
}

uint64_t sub_22B1F4948(uint64_t a1, uint64_t *a2)
{
  return sub_22B24E8E0(a1, a2, 1);
}

uint64_t sub_22B1F4950(uint64_t a1, uint64_t *a2)
{
  return sub_22B24E8E0(a1, a2, 0);
}

uint64_t sub_22B1F4978()
{
  return 0;
}

uint64_t sub_22B1F4980()
{
  return 0;
}

uint64_t sub_22B1F498C()
{
  return 1;
}

uint64_t sub_22B1F4994()
{
  return 0;
}

uint64_t sub_22B1F499C()
{
  return 0;
}

uint64_t sub_22B1F49AC(void *a1)
{
  int v1 = (char *)a1 + *(void *)(*a1 - 32);
  *(void *)int v1 = &unk_26DE715A8;
  *((void *)v1 + 551) = &unk_26DE717D0;
  *((void *)v1 + 304) = &unk_26DE71758;
  sub_22B1F280C((char **)v1 + 484);
  sub_22B1F45CC((uint64_t *)v1, (uint64_t *)off_26DE71838);
  return sub_22B1ED95C((uint64_t)(v1 + 4408));
}

void sub_22B1F4A6C(uint64_t a1)
{
  int v1 = (uint64_t *)(a1 - 2432);
  *(void *)(a1 - 2432) = &unk_26DE715A8;
  uint64_t v2 = a1 + 1976;
  *(void *)(a1 + 1976) = &unk_26DE717D0;
  *(void *)a1 = &unk_26DE71758;
  sub_22B1F280C((char **)(a1 + 1440));
  sub_22B1F45CC(v1, (uint64_t *)off_26DE71838);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B1F4B28(uint64_t a1)
{
  int v1 = (uint64_t *)(a1 - 2432);
  *(void *)(a1 - 2432) = &unk_26DE715A8;
  uint64_t v2 = a1 + 1976;
  *(void *)(a1 + 1976) = &unk_26DE717D0;
  *(void *)a1 = &unk_26DE71758;
  sub_22B1F280C((char **)(a1 + 1440));
  sub_22B1F45CC(v1, (uint64_t *)off_26DE71838);
  return sub_22B1ED95C(v2);
}

uint64_t sub_22B1F4BCC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22B1F4BD4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22B1F4BE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == v2 + 24)
  {
    char v6 = 0;
    LOBYTE(v7) = 0;
    LOBYTE(v8) = 0;
    goto LABEL_68;
  }
  char v5 = 0;
  char v6 = 0;
  int v7 = 0;
  int v8 = 0;
  do
  {
    uint64_t v9 = v4 - 56;
    if (!v4) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 + 72;
    for (uint64_t i = *(void *)(v9 + 80); i != v10; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v12 = i - 24;
      if (!i) {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)(v12 + 48);
      if (v13 != v12 + 40)
      {
LABEL_61:
        while (i != v10)
        {
          uint64_t v14 = v13 - 24;
          if (!v13) {
            uint64_t v14 = 0;
          }
          int v15 = *(unsigned __int8 *)(v14 + 16);
          if (v13 && v15 == 61)
          {
            uint64_t v16 = **(void **)(v14 - 32);
            unsigned int v17 = *(_DWORD *)(v16 + 8);
            if ((v17 & 0xFE) == 0x12) {
              unsigned int v17 = *(_DWORD *)(**(void **)(v16 + 16) + 8);
            }
            unsigned int v18 = v17 >> 8;
            if (v18 == 1)
            {
              char v5 = 1;
            }
            else if (v18 == 3)
            {
              char v6 = 1;
            }
          }
          else
          {
            if (v15 == 84) {
              uint64_t v19 = v14;
            }
            else {
              uint64_t v19 = 0;
            }
            if (v13)
            {
              if (v15 == 84)
              {
                uint64_t v20 = *(void *)(v19 - 32);
                if (v20)
                {
                  if (!*(unsigned char *)(v20 + 16) && *(void *)(v20 + 24) == *(void *)(v19 + 72))
                  {
                    int v48 = v7;
                    int v49 = v8;
                    uint64_t Name = llvm::Value::getName((llvm::Value *)v20);
                    unint64_t v51 = v21;
                    uint64_t v22 = sub_22B1F50A8((llvm::CallBase *)v19);
                    uint64_t v23 = v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF);
                    BOOL v24 = ((v22 - v23) & 0x1FFFFFFFE0) != 0 && *(unsigned __int8 *)(**(void **)v23 + 8) == 15;
                    if (v51 >= 0xA
                      && (*(void *)Name == 0x6D6F74612E726961
                        ? (BOOL v27 = *(unsigned __int16 *)(Name + 8) == 25449)
                        : (BOOL v27 = 0),
                          v27 && (llvm::StringRef::find() == -1 ? (BOOL v28 = v24) : (BOOL v28 = 0), v28)))
                    {
                      uint64_t v29 = **(void **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
                      unsigned int v30 = *(_DWORD *)(v29 + 8);
                      int v8 = v49;
                      if ((v30 & 0xFE) == 0x12) {
                        unsigned int v30 = *(_DWORD *)(**(void **)(v29 + 16) + 8);
                      }
                      unsigned int v31 = v30 >> 8;
                      if (v31 == 1)
                      {
                        int v8 = 1;
                        char v5 = 1;
                      }
                      else if (v31 == 3)
                      {
                        int v8 = 1;
                        char v6 = 1;
                      }
                    }
                    else
                    {
                      int v8 = v49;
                    }
                    sub_22B1F5178();
                    int Key = llvm::StringMapImpl::FindKey();
                    if (Key == -1)
                    {
                      int v7 = v48;
                    }
                    else
                    {
                      int v7 = v48;
                      if (Key != (unint64_t)dword_2683E9250) {
                        int v7 = (*(_DWORD *)(*(void *)(qword_2683E9248 + 8 * Key) + 8) == 3) | v48;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v13 = *(void *)(v13 + 8);
          uint64_t v25 = i - 24;
          if (!i) {
            uint64_t v25 = 0;
          }
          if (v13 == v25 + 40)
          {
            while (1)
            {
              uint64_t i = *(void *)(i + 8);
              if (i == v10) {
                goto LABEL_62;
              }
              uint64_t v26 = i - 24;
              if (!i) {
                uint64_t v26 = 0;
              }
              uint64_t v13 = *(void *)(v26 + 48);
              if (v13 != v26 + 40) {
                goto LABEL_61;
              }
            }
          }
        }
        break;
      }
    }
LABEL_62:
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4 != v3);
  if ((v5 & 1) == 0)
  {
LABEL_68:
    if ((v6 & 1) == 0 && (v7 & 1) == 0) {
      goto LABEL_89;
    }
    goto LABEL_70;
  }
  std::string v33 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
  if (!*(unsigned char *)(v33[14].__r_.__value_.__l.__size_ + 1664) && !*(unsigned char *)(a1 + 37))
  {
    uint64_t v34 = v33 + 17;
    char v35 = "buffer writes not supported in fragment shaders";
LABEL_96:
    std::string::append(v34, v35);
    return 0;
  }
LABEL_70:
  if (v6)
  {
    std::string v36 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
    if (!*(unsigned char *)(v36[14].__r_.__value_.__l.__size_ + 1666))
    {
      uint64_t v34 = v36 + 17;
      char v35 = "threadgroup memory not supported in fragment shaders";
      goto LABEL_96;
    }
  }
  if (v7)
  {
    uint64_t v37 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
    if (!*(unsigned char *)(v37[14].__r_.__value_.__l.__size_ + 1665))
    {
      uint64_t v34 = v37 + 17;
      char v35 = "Texture writes not supported in fragment shaders";
      goto LABEL_96;
    }
  }
  if ((v8 & 1) != 0 && *(int *)(a1 + 2952) <= 0) {
    *(_DWORD *)(a1 + 2952) = 1;
  }
  *(_DWORD *)(a1 + 4400) = 2;
  uint64_t Operand = llvm::NamedMDNode::getOperand(*(llvm::NamedMDNode **)(a1 + 48));
  uint64_t v39 = *(unsigned int *)(Operand + 8);
  if (Operand - 8 * v39 + 24 != Operand)
  {
    uint64_t v40 = Operand;
    uint64_t v41 = 24 - 8 * v39;
    while (1)
    {
      std::string v42 = *(llvm::MDString **)(v40 + v41);
      if (!*(unsigned char *)v42)
      {
        uint64_t String = llvm::MDString::getString(v42);
        if (v44 == 20)
        {
          BOOL v45 = *(void *)String == 0x72665F796C726165 && *(void *)(String + 8) == 0x745F746E656D6761;
          if (v45 && *(_DWORD *)(String + 16) == 1937011557) {
            break;
          }
        }
      }
      v41 += 8;
      if (!v41) {
        goto LABEL_89;
      }
    }
    *(_DWORD *)(a1 + 4400) = 1;
  }
LABEL_89:
  if (*(_DWORD *)(a1 + 4400) == 2)
  {
    if (!*(unsigned char *)(a1 + 3843))
    {
      *(unsigned char *)(a1 + 3843) = 1;
      *(_DWORD *)(a1 + 3848) = 1;
    }
    *(_DWORD *)(a1 + 3844) = 0;
  }
  return 1;
}

uint64_t sub_22B1F50A8(llvm::CallBase *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 84)
  {
    uint64_t NumSubclassExtraOperandsDynamic = 0;
  }
  else if (v2 == 39)
  {
    uint64_t NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic(this);
  }
  else
  {
    uint64_t NumSubclassExtraOperandsDynamic = 2;
  }
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
  {
    uint64_t Descriptor = 0;
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t Descriptor = llvm::User::getDescriptor(this);
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0) {
    goto LABEL_9;
  }
  uint64_t v11 = llvm::User::getDescriptor(this);
  uint64_t v5 = v11 + v12;
LABEL_10:
  if (((v5 - Descriptor) & 0xFFFFFFFF0) != 0)
  {
    int v6 = *(_DWORD *)(llvm::User::getDescriptor(this) + 8);
    uint64_t v7 = llvm::User::getDescriptor(this);
    uint64_t v9 = (*(_DWORD *)(v7 + v8 - 4) - v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  return (uint64_t)this + -32 * v9 + -32 * NumSubclassExtraOperandsDynamic - 32;
}

void sub_22B1F5178()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9268))
  {
    qword_2683E9248 = 0;
    *(void *)&dword_2683E9250 = 0;
    qword_2683E9258 = 0x3000000000;
    __cxa_atexit((void (*)(void *))sub_22B1F51FC, &qword_2683E9248, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9268);
  }
}

uint64_t sub_22B1F51FC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 49));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B1F5278@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v12 = 0;
  int v13 = 0;
  sub_22B1F5324(a2, a3, &v13, &v12, &v11);
  int v7 = sub_22B241C1C((uint64_t)a1 + *(void *)(*a1 - 24), a2, &v14);
  int v8 = v13;
  *(_DWORD *)(a4 + 8) = v12;
  *(_DWORD *)(a4 + 12) = v7;
  *(_DWORD *)a4 = 2;
  *(_DWORD *)(a4 + 4) = v8;
  BOOL v9 = v8 != 0;
  *(_DWORD *)(a4 + 16) = v9;
  uint64_t result = sub_22B247CEC(a1, 8, v9, (llvm::Type *)2);
  *(void *)(a4 + 24) = result;
  return result;
}

uint64_t sub_22B1F5324(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t *a5)
{
  sub_22B1F5524();
  sub_22B1F55A8();
  uint64_t result = llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16));
  *a5 = result;
  a5[1] = v11;
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
    unsigned int v12 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 8);
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 8);
  }
  int v13 = v12 > 6;
  if (v12 <= 6) {
    int v14 = 0;
  }
  else {
    int v14 = 3;
  }
  *a4 = v14;
  *a3 = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 8);
  if (v15 < 4) {
    goto LABEL_38;
  }
  int v16 = 2;
  for (unsigned int i = 3; i < v15; ++i)
  {
    uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * v15 + 8 * i));
    size_t v20 = v19;
    int Key = llvm::StringMapImpl::FindKey();
    if (Key != -1 && Key != (unint64_t)dword_2683E9328)
    {
      uint64_t result = (uint64_t)sub_22B1F562C(String, v20);
      *a3 = *(_DWORD *)(*(void *)result + 8);
      goto LABEL_36;
    }
    uint64_t result = llvm::StringMapImpl::FindKey();
    if (result != -1 && (int)result != (unint64_t)dword_2683E9350)
    {
      uint64_t result = (uint64_t)sub_22B1F5734(String, v20);
      *a4 = *(_DWORD *)(*(void *)result + 8);
      goto LABEL_36;
    }
    if (v20 == 12)
    {
      if (*String == 0x5F6772612E726961 && *((_DWORD *)String + 2) == 1701667182) {
LABEL_35:
      }
        unsigned int i = v16 + 2;
    }
    else if (v20 == 17)
    {
      BOOL v24 = *String == 0x5F6772612E726961 && String[1] == 0x6D616E5F65707974;
      if (v24 && *((unsigned char *)String + 16) == 101) {
        goto LABEL_35;
      }
    }
LABEL_36:
    int v16 = i;
    unsigned int v15 = *(_DWORD *)(a2 + 8);
  }
  int v13 = *a3;
LABEL_38:
  if (v13 == 1 && *a4 != 3) {
    *a4 = 3;
  }
  return result;
}

void sub_22B1F5524()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9340))
  {
    qword_2683E9320 = 0;
    *(void *)&dword_2683E9328 = 0;
    qword_2683E9330 = 0x1000000000;
    __cxa_atexit((void (*)(void *))sub_22B1F58B8, &qword_2683E9320, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9340);
  }
}

void sub_22B1F55A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9368))
  {
    qword_2683E9348 = 0;
    *(void *)&dword_2683E9350 = 0;
    qword_2683E9358 = 0x1000000000;
    __cxa_atexit((void (*)(void *))sub_22B1F583C, &qword_2683E9348, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9368);
  }
}

uint64_t *sub_22B1F562C(const void *a1, size_t a2)
{
  unsigned int i = (uint64_t *)(qword_2683E9320 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E9330) = qword_2683E9330 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 17, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  uint64_t *i = v9;
  ++dword_2683E932C;
  for (unsigned int i = (uint64_t *)(qword_2683E9320
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E9320));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_22B1F5734(const void *a1, size_t a2)
{
  unsigned int i = (uint64_t *)(qword_2683E9348 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E9358) = qword_2683E9358 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 17, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  uint64_t *i = v9;
  ++dword_2683E9354;
  for (unsigned int i = (uint64_t *)(qword_2683E9348
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E9348));
        !*i || *i == -8;
  return i;
}

uint64_t sub_22B1F583C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B1F58B8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B1F5934@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = sub_22B241C1C((uint64_t)a1 + *(void *)(*a1 - 24), a2, &v7);
  *(void *)a3 = 0x100000001;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 16) = 0;
  uint64_t result = sub_22B247CEC(a1, 7, 0, (llvm::Type *)1);
  *(void *)(a3 + 24) = result;
  return result;
}

void sub_22B1F59AC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, size_t a4@<X4>, uint64_t a5@<X8>)
{
  int v9 = sub_22B241C1C(a1 + *(void *)(*(void *)a1 - 24), a2, v14);
  int v10 = *(_DWORD *)(a1 + 3880);
  v14[0] = 1;
  v14[1] = v9;
  uint64_t v15 = 0x300000001;
  int v16 = v10;
  uint64_t v19 = 0;
  BOOL v20 = v9 == 1;
  char v21 = 0;
  if (v9 == 1) {
    int v11 = 5;
  }
  else {
    int v11 = 2;
  }
  int v22 = v11;
  if (a3)
  {
    sub_22B1E2118(&__dst, a3, a4);
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v13 = 0;
  }
  long long __p = __dst;
  uint64_t v18 = v13;
  sub_22B1F5AE0(a1 + 3872, (unint64_t)v14);
  *(void *)a5 = 0x100000001;
  *(_DWORD *)(a5 + 8) = 3;
  *(_DWORD *)(a5 + 12) = v9;
  *(_DWORD *)(a5 + 16) = v10;
  *(void *)(a5 + 24) = sub_22B247CEC((void *)a1, 1, v10, (llvm::Type *)1);
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
}

__n128 sub_22B1F5AE0(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_22B1F5B70(a1, a2);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  uint64_t v6 = *(void *)a1 + (v5 << 6);
  long long v7 = *(_OWORD *)v3;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v6 = v7;
  uint64_t v8 = (unsigned char *)(v6 + 24);
  if (*(char *)(v3 + 47) < 0)
  {
    sub_22B1DC004(v8, *(void **)(v3 + 24), *(void *)(v3 + 32));
  }
  else
  {
    long long v9 = *(_OWORD *)(v3 + 24);
    *(void *)(v6 + 40) = *(void *)(v3 + 40);
    *(_OWORD *)uint64_t v8 = v9;
  }
  __n128 result = *(__n128 *)(v3 + 48);
  *(__n128 *)(v4 + (v5 << 6) + 48) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_22B1F5B70(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + (v2 << 6);
    if (*(void *)a1 > a2 || v4 <= a2) {
      sub_22B1F5BD8();
    }
    sub_22B1F5BD8();
  }
  return a2;
}

void sub_22B1F5BD8()
{
}

void sub_22B1F5CC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = 0;
  uint64_t __src = 0;
  size_t __len = 0;
  sub_22B1F5324(a2, a3, (int *)&v27 + 1, (int *)&v27, (uint64_t *)&__src);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = *(unsigned int *)(a2 + 32);
  }
  else {
    uint64_t v7 = 1;
  }
  int v8 = sub_22B241C1C(a1 + *(void *)(*(void *)a1 - 24), a2, v18);
  int v9 = v8;
  int v10 = *(_DWORD *)(a1 + 3880);
  int v12 = v27;
  int v11 = HIDWORD(v27);
  v18[0] = v7;
  v18[1] = v8;
  void v18[2] = HIDWORD(v27);
  void v18[3] = v27;
  v18[4] = v10;
  uint64_t v21 = 0;
  BOOL v22 = v8 == 1;
  char v23 = 0;
  if (HIDWORD(v27) == 2)
  {
    BOOL v14 = v8 == 1;
    int v13 = 3;
    int v15 = 6;
    goto LABEL_12;
  }
  if (HIDWORD(v27) == 1)
  {
    BOOL v14 = v8 == 1;
    int v13 = 2;
    int v15 = 5;
LABEL_12:
    if (v14) {
      int v13 = v15;
    }
    goto LABEL_14;
  }
  if (HIDWORD(v27)) {
    goto LABEL_15;
  }
  if (v8 == 1) {
    int v13 = 4;
  }
  else {
    int v13 = 1;
  }
LABEL_14:
  int v24 = v13;
LABEL_15:
  if (__src)
  {
    sub_22B1E2118(&v16, __src, __len);
  }
  else
  {
    long long v16 = 0uLL;
    uint64_t v17 = 0;
  }
  long long __p = v16;
  uint64_t v20 = v17;
  sub_22B1F5AE0(a1 + 3872, (unint64_t)v18);
  *(_DWORD *)a4 = v7;
  *(_DWORD *)(a4 + 4) = v11;
  *(_DWORD *)(a4 + 8) = v12;
  *(_DWORD *)(a4 + 12) = v9;
  *(_DWORD *)(a4 + 16) = v10;
  *(void *)(a4 + 24) = sub_22B247CEC((void *)a1, 1, v10, (llvm::Type *)v7);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
}

BOOL sub_22B1F5E64(uint64_t a1)
{
  return *(_DWORD *)(a1 + 3864) != 0;
}

uint64_t sub_22B1F5E74(uint64_t a1, char a2)
{
  return 16 * ((*(_DWORD *)(a1 + 3864) >> a2) & 1u);
}

uint64_t sub_22B1F5E84()
{
  return 1;
}

uint64_t sub_22B1F5E8C(void *a1)
{
  return 1;
}

uint64_t sub_22B1F5EAC(uint64_t a1)
{
  sub_22B24CD18(a1);
  if (*(_DWORD *)(a1 + 4400) == 1)
  {
    uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
    unint64_t v3 = *(unsigned char **)(v2 + 344);
    if (!v3[1667])
    {
      long long v6 = *(_OWORD *)(v2 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v7, (llvm::IRBuilderBase *)(v2 + 8));
      int v8 = *(_DWORD *)(v2 + 104);
      uint64_t v4 = llvm::ConstantInt::get();
      (*(void (**)(unsigned char *, long long *, uint64_t))(*(void *)v3 + 424))(v3, &v6, v4);
      if (v7) {
        llvm::MetadataTracking::untrack();
      }
    }
    *(unsigned char *)(a1 + 3532) = 1;
  }
  return 1;
}

void sub_22B1F5FBC(uint64_t a1)
{
  *(void *)a1 = &unk_26DE715A8;
  uint64_t v2 = a1 + 4408;
  *(void *)(a1 + 4408) = &unk_26DE717D0;
  *(void *)(a1 + 2432) = &unk_26DE71758;
  sub_22B1F280C((char **)(a1 + 3872));
  sub_22B1F45CC((uint64_t *)a1, (uint64_t *)off_26DE71838);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B1F6080(uint64_t a1)
{
  *(void *)a1 = &unk_26DE715A8;
  uint64_t v2 = a1 + 4408;
  *(void *)(a1 + 4408) = &unk_26DE717D0;
  *(void *)(a1 + 2432) = &unk_26DE71758;
  sub_22B1F280C((char **)(a1 + 3872));
  sub_22B1F45CC((uint64_t *)a1, (uint64_t *)off_26DE71838);
  sub_22B1ED95C(v2);
  return a1;
}

uint64_t sub_22B1F6144()
{
  return 0;
}

uint64_t sub_22B1F614C()
{
  return 0;
}

uint64_t sub_22B1F6154()
{
  return 0;
}

uint64_t sub_22B1F615C()
{
  return 0;
}

uint64_t sub_22B1F6164()
{
  return 0;
}

uint64_t sub_22B1F616C()
{
  return 0;
}

uint64_t sub_22B1F6174()
{
  return 0;
}

uint64_t sub_22B1F617C()
{
  return 0;
}

llvm::Value *sub_22B1F6184(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 344);
  if (*(void *)(v2 + 888)) {
    strlen(*(const char **)(v2 + 888));
  }
  uint64_t v3 = sub_22B1DCB28();
  __int16 v6 = 257;
  return sub_22B1D4034(a1 + 8, **(void **)(*(void *)v3 + 16), v3, 0, 0, (uint64_t)v5);
}

uint64_t sub_22B1F6208()
{
  return 0;
}

uint64_t sub_22B1F6230()
{
  return 0;
}

uint64_t sub_22B1F6238()
{
  return 0;
}

uint64_t sub_22B1F6240()
{
  return 0;
}

uint64_t sub_22B1F6248()
{
  return 0;
}

uint64_t sub_22B1F6250()
{
  return 0;
}

uint64_t sub_22B1F6258()
{
  return 0;
}

uint64_t sub_22B1F6260()
{
  return 0;
}

uint64_t sub_22B1F6268()
{
  return 0;
}

uint64_t sub_22B1F6270()
{
  return 0;
}

uint64_t sub_22B1F6278()
{
  return 0;
}

uint64_t sub_22B1F6280()
{
  return 0;
}

uint64_t sub_22B1F6288()
{
  return 0;
}

uint64_t sub_22B1F6290()
{
  return 0;
}

uint64_t sub_22B1F6298()
{
  return 0;
}

uint64_t sub_22B1F62A0()
{
  return 0;
}

uint64_t sub_22B1F62A8()
{
  return 0;
}

uint64_t sub_22B1F62B0()
{
  return 0;
}

uint64_t sub_22B1F62B8()
{
  return 0;
}

uint64_t sub_22B1F62C0()
{
  return 0;
}

uint64_t sub_22B1F62C8()
{
  return 0;
}

uint64_t sub_22B1F62D0()
{
  return 0;
}

uint64_t sub_22B1F62D8()
{
  return 0;
}

uint64_t sub_22B1F62E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)*a2;
  int v5 = *(_DWORD *)(v4 + 8);
  int v6 = v5 & 0xFE;
  if (*(unsigned char *)(*(void *)(a1 + 344) + 1649)) {
    goto LABEL_6;
  }
  int v7 = *(_DWORD *)(v4 + 8);
  if (v6 == 18) {
    int v7 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
  }
  if ((v7 & 0xFFFFFF00) != 0x100)
  {
LABEL_6:
    if (v6 == 18) {
      int v5 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
    }
    unsigned int v8 = v5 & 0xFFFFFF00;
    uint64_t v9 = *(void *)(a1 + 704);
    if (v8 == 256)
    {
      if (v9) {
        *(unsigned char *)(v9 + 9) = 1;
      }
    }
    else if (v9)
    {
      *(unsigned char *)(v9 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 720) = 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E87E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E87E8))
  {
    qword_2683E87C8 = 0;
    *(void *)&dword_2683E87D0 = 0;
    qword_2683E87D8 = 0x1000000000;
    __cxa_atexit((void (*)(void *))sub_22B1F7388, &qword_2683E87C8, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E87E8);
  }
  uint64_t v115 = a1;
  int v10 = dword_2683E87D4;
  if (!dword_2683E87D4)
  {
    uint64_t v11 = 0;
    memset(&v134, 0, sizeof(v134));
    int v12 = ".s";
    int v13 = ".u";
    uint64_t v117 = *(void *)".xchg.i32";
    qmemcpy(v116, ".load.i3.store.i.cmpxchg.weak.i3", sizeof(v116));
    BOOL v14 = ".i32";
    do
    {
      LODWORD(v118) = v10;
      sub_22B1D7BF0(&__str, off_26488D810[v11]);
      uint64_t v15 = 0;
      do
      {
        uint64_t v119 = v15;
        long long v16 = (const std::string::value_type **)&(&off_26488D7A0)[2 * v15];
        char v17 = 1;
        do
        {
          std::string::operator=(&v134, &__str);
          std::string::append(&v134, *v16);
          int v18 = v17 & 1;
          if (v17) {
            uint64_t v19 = v13;
          }
          else {
            uint64_t v19 = v12;
          }
          if (v17) {
            uint64_t v20 = (int *)v16 + 3;
          }
          else {
            uint64_t v20 = (int *)(v16 + 1);
          }
          std::string::append(&v134, v19);
          std::string::append(&v134, v14);
          uint64_t v21 = v14;
          BOOL v22 = v13;
          char v23 = v12;
          int v24 = *v20;
          if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v25 = &v134;
          }
          else {
            uint64_t v25 = (std::string *)v134.__r_.__value_.__r.__words[0];
          }
          if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v134.__r_.__value_.__l.__size_;
          }
          char v17 = 0;
          uint64_t v27 = *sub_22B1F7284(v25, size);
          *(_DWORD *)(v27 + 8) = 0;
          *(_DWORD *)(v27 + 12) = v24;
          int v12 = v23;
          int v13 = v22;
          BOOL v14 = v21;
        }
        while (v18);
        uint64_t v15 = v119 + 1;
      }
      while (v119 != 6);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
      }
      sub_22B1EA4B0((uint64_t)&v132, v28 + 9);
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v132;
      }
      else {
        uint64_t v29 = (std::string *)v132.__r_.__value_.__r.__words[0];
      }
      if (v28)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v29, p_str, v28);
      }
      unsigned int v31 = (char *)v29 + v28;
      *(void *)unsigned int v31 = v117;
      *((_WORD *)v31 + 4) = 50;
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      std::string v134 = v132;
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v32 = &v134;
      }
      else {
        char v32 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v134.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1F7284(v32, v33) + 8) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = __str.__r_.__value_.__l.__size_;
      }
      sub_22B1EA4B0((uint64_t)&v132, v34 + 17);
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v35 = &v132;
      }
      else {
        char v35 = (std::string *)v132.__r_.__value_.__r.__words[0];
      }
      if (v34)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v36 = &__str;
        }
        else {
          std::string v36 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v35, v36, v34);
      }
      uint64_t v37 = (char *)v35 + v34;
      *(_OWORD *)uint64_t v37 = v116[1];
      *((_WORD *)v37 + 8) = 50;
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      std::string v134 = v132;
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v38 = &v134;
      }
      else {
        char v38 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v39 = v134.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1F7284(v38, v39) + 8) = 0xD00000001;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = __str.__r_.__value_.__l.__size_;
      }
      sub_22B1EA4B0((uint64_t)&v132, v40 + 10);
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v41 = &v132;
      }
      else {
        uint64_t v41 = (std::string *)v132.__r_.__value_.__r.__words[0];
      }
      if (v40)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v42 = &__str;
        }
        else {
          std::string v42 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v41, v42, v40);
      }
      *(std::string::size_type *)((char *)v41->__r_.__value_.__r.__words + v40) = *((void *)&v116[0] + 1);
      strcpy(&v41->__r_.__value_.__s.__data_[v40 + 8], "32");
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      std::string v134 = v132;
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v43 = &v134;
      }
      else {
        std::string v43 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v44 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v44 = v134.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1F7284(v43, v44) + 8) = 0xD00000003;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = __str.__r_.__value_.__l.__size_;
      }
      sub_22B1EA4B0((uint64_t)&v132, v45 + 9);
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v46 = &v132;
      }
      else {
        std::string v46 = (std::string *)v132.__r_.__value_.__r.__words[0];
      }
      if (v45)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v47 = &__str;
        }
        else {
          std::string v47 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v46, v47, v45);
      }
      int v48 = (char *)v46 + v45;
      *(void *)int v48 = *(void *)&v116[0];
      *((_WORD *)v48 + 4) = 50;
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      std::string v134 = v132;
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v49 = &v134;
      }
      else {
        int v49 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v50 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v50 = v134.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1F7284(v49, v50) + 8) = 0xD00000002;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      int v10 = 1;
      uint64_t v11 = 1;
      BOOL v14 = v21;
    }
    while ((v118 & 1) == 0);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v134.__r_.__value_.__l.__data_);
    }
  }
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v52 = Key;
  if (Key == -1) {
    uint64_t v52 = dword_2683E87D0;
  }
  uint64_t v53 = *(void *)(qword_2683E87C8 + 8 * v52);
  switch(*(_DWORD *)(v53 + 8))
  {
    case 0:
      char v54 = (void *)*a2;
      uint64_t v55 = a2[3];
      int v113 = a2;
      char v56 = (uint64_t *)a2[1];
      uint64_t v57 = *(void *)(v115 + 344);
      long long v129 = *(_OWORD *)(v115 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v130, (llvm::IRBuilderBase *)(v115 + 8));
      int v131 = *(_DWORD *)(v115 + 104);
      uint64_t v58 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t))(*(void *)v57 + 64))(v57, &v129, v54, v55);
      if (v130) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v59 = sub_22B1F6FF0((uint64_t *)(v115 + 8), *(unsigned int *)(v53 + 12), v58, v56);
      uint64_t v60 = v59;
      uint64_t v61 = v113[4];
      goto LABEL_150;
    case 1:
      unint64_t v63 = (void *)*a2;
      uint64_t v62 = a2[1];
      __int16 v135 = 257;
      char v64 = (llvm::IRBuilderBase *)(v115 + 8);
      uint64_t v119 = v62;
      uint64_t v118 = sub_22B1D4240((uint64_t *)(v115 + 8), **(llvm::Type ***)(*(void *)v62 + 16), v62, 0, (uint64_t)&v134);
      uint64_t v65 = a2[3];
      std::string v66 = (void *)(v65 + 24);
      if (*(_DWORD *)(v65 + 32) >= 0x41u) {
        std::string v66 = (void *)*v66;
      }
      int v67 = *(_DWORD *)v66;
      if ((v67 - 2) >= 4) {
        int v68 = 2;
      }
      else {
        int v68 = v67 + 2;
      }
      LODWORD(v117) = v68;
      std::string v69 = (uint64_t *)a2[2];
      uint64_t v70 = a2[5];
      uint64_t v114 = a2;
      uint64_t v71 = *(void *)(v115 + 344);
      long long v126 = *(_OWORD *)(v115 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v127, v64);
      int v128 = *(_DWORD *)(v115 + 104);
      (*(void (**)(uint64_t, long long *, void *, uint64_t))(*(void *)v71 + 64))(v71, &v126, v63, v70);
      if (v127) {
        llvm::MetadataTracking::untrack();
      }
      Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(v115 + 56));
      DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
      v134.__r_.__value_.__r.__words[0] = (sub_22B1D8270(DataLayout, *v69) + 7) >> 3;
      v134.__r_.__value_.__l.__size_ = v74 == 1;
      llvm::TypeSize::operator unsigned long long();
      uint64_t v75 = llvm::User::operator new((llvm::User *)0x40);
      llvm::AtomicCmpXchgInst::AtomicCmpXchgInst();
      __int16 v135 = 257;
      (*(void (**)(void, uint64_t, std::string *, void, void))(**(void **)(v115 + 88) + 16))(*(void *)(v115 + 88), v75, &v134, *(void *)(v115 + 56), *(void *)(v115 + 64));
      uint64_t v76 = *(unsigned int *)(v115 + 16);
      if (v76)
      {
        uint64_t v77 = *(void *)(v115 + 8);
        uint64_t v78 = v77 + 16 * v76;
        do
        {
          llvm::Instruction::setMetadata();
          v77 += 16;
        }
        while (v77 != v78);
      }
      uint64_t v79 = v114[6];
      if (v79 && *(unsigned char *)(v79 + 16) == 16)
      {
        long long v80 = (llvm::APInt *)(v79 + 24);
        unsigned int v81 = *(_DWORD *)(v79 + 32);
        if (v81 > 0x40) {
          BOOL v82 = llvm::APInt::countLeadingZerosSlowCase(v80) == v81;
        }
        else {
          BOOL v82 = *(void *)v80 == 0;
        }
        __int16 v109 = v82;
        *(_WORD *)(v75 + 18) = *(_WORD *)(v75 + 18) & 0xFFFE | v109 ^ 1;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      __int16 v135 = 257;
      uint64_t v60 = sub_22B1D7940((uint64_t)v64, v75, (uint64_t)&__str, 1, (uint64_t)&v134);
      sub_22B1F718C((uint64_t *)v64, (llvm::Type **)v60, v119, 0);
      return v60;
    case 2:
      uint64_t v83 = a2[2];
      long long v84 = (void *)*a2;
      std::string::size_type v85 = a2;
      uint64_t v86 = *(void *)*a2;
      int v87 = *(_DWORD *)(v86 + 8);
      if ((v87 & 0xFE) == 0x12) {
        int v87 = *(_DWORD *)(**(void **)(v86 + 16) + 8);
      }
      if ((v87 & 0xFFFFFF00) == 0x300)
      {
        __int16 v135 = 257;
        uint64_t v60 = sub_22B1D4240((uint64_t *)(v115 + 8), **(llvm::Type ***)(v86 + 16), (uint64_t)v84, 0, (uint64_t)&v134);
        uint64_t v88 = v85[3];
        if (v88 && *(unsigned char *)(v88 + 16) == 16)
        {
          std::string v89 = (llvm::APInt *)(v88 + 24);
          unsigned int v90 = *(_DWORD *)(v88 + 32);
          if (v90 > 0x40) {
            BOOL v91 = llvm::APInt::countLeadingZerosSlowCase(v89) == v90;
          }
          else {
            BOOL v91 = *(void *)v89 == 0;
          }
          __int16 v111 = v91;
          *(_WORD *)(v60 + 18) = *(_WORD *)(v60 + 18) & 0xFFFE | v111 ^ 1;
        }
      }
      else
      {
        uint64_t v103 = *(void *)(v115 + 344);
        long long v123 = *(_OWORD *)(v115 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v124, (llvm::IRBuilderBase *)(v115 + 8));
        int v125 = *(_DWORD *)(v115 + 104);
        uint64_t v104 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t))(*(void *)v103 + 64))(v103, &v123, v84, v83);
        if (v124) {
          llvm::MetadataTracking::untrack();
        }
        uint64_t v105 = (uint64_t *)llvm::ConstantInt::get();
        uint64_t v59 = sub_22B1F6FF0((uint64_t *)(v115 + 8), 1, v104, v105);
        uint64_t v60 = v59;
        uint64_t v61 = v85[3];
LABEL_150:
        sub_22B1F711C(v59, v61);
      }
      return v60;
    case 3:
      std::string v92 = (void *)*a2;
      uint64_t v93 = a2[3];
      unsigned int v94 = a2;
      uint64_t v95 = (uint64_t *)a2[1];
      int v96 = *(_DWORD *)(*(void *)*a2 + 8);
      if ((v96 & 0xFE) == 0x12) {
        int v96 = *(_DWORD *)(**(void **)(*v92 + 16) + 8);
      }
      if ((v96 & 0xFFFFFF00) != 0x300)
      {
        uint64_t v106 = *(void *)(v115 + 344);
        long long v120 = *(_OWORD *)(v115 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v121, (llvm::IRBuilderBase *)(v115 + 8));
        int v122 = *(_DWORD *)(v115 + 104);
        uint64_t v107 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t))(*(void *)v106 + 64))(v106, &v120, v92, v93);
        if (v121) {
          llvm::MetadataTracking::untrack();
        }
        uint64_t v108 = sub_22B1F6FF0((uint64_t *)(v115 + 8), 0, v107, v95);
        sub_22B1F711C(v108, v94[4]);
        return 0;
      }
      uint64_t v97 = sub_22B1F718C((uint64_t *)(v115 + 8), (llvm::Type **)a2[1], *a2, 0);
      uint64_t v98 = a2[4];
      if (!v98 || *(unsigned char *)(v98 + 16) != 16) {
        return 0;
      }
      uint64_t v99 = v97;
      int v100 = (llvm::APInt *)(v98 + 24);
      unsigned int v101 = *(_DWORD *)(v98 + 32);
      if (v101 > 0x40) {
        BOOL v102 = llvm::APInt::countLeadingZerosSlowCase(v100) == v101;
      }
      else {
        BOOL v102 = *(void *)v100 == 0;
      }
      __int16 v112 = v102;
      uint64_t v60 = 0;
      *(_WORD *)(v99 + 18) = *(_WORD *)(v99 + 18) & 0xFFFE | v112 ^ 1;
      return v60;
    default:
      return 0;
  }
}

uint64_t sub_22B1F6FF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  v14[0] = (sub_22B1D8270(DataLayout, *a4) + 7) >> 3;
  v14[1] = v8 == 1;
  llvm::TypeSize::operator unsigned long long();
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x40);
  llvm::AtomicRMWInst::AtomicRMWInst();
  __int16 v15 = 257;
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v9, v14, a1[6], a1[7]);
  uint64_t v10 = *((unsigned int *)a1 + 2);
  if (v10)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = v11 + 16 * v10;
    do
    {
      llvm::Instruction::setMetadata();
      v11 += 16;
    }
    while (v11 != v12);
  }
  return v9;
}

uint64_t sub_22B1F711C(uint64_t a1, uint64_t a2)
{
  if (a2 && *(unsigned char *)(a2 + 16) == 16)
  {
    uint64_t v3 = (llvm::APInt *)(a2 + 24);
    unsigned int v4 = *(_DWORD *)(a2 + 32);
    if (v4 > 0x40) {
      BOOL v5 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
    }
    else {
      BOOL v5 = *(void *)v3 == 0;
    }
    __int16 v6 = v5;
    *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFFE | v6 ^ 1;
  }
  return a1;
}

uint64_t sub_22B1F718C(uint64_t *a1, llvm::Type **a2, uint64_t a3, __int16 a4)
{
  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, *a2);
  }
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
  llvm::StoreInst::StoreInst();
  __int16 v14 = 257;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v8, v13, a1[6], a1[7]);
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

uint64_t *sub_22B1F7284(const void *a1, size_t a2)
{
  unsigned int i = (uint64_t *)(qword_2683E87C8 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E87D8) = qword_2683E87D8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 17, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  v9[1] = 0;
  uint64_t *i = (uint64_t)v9;
  ++dword_2683E87D4;
  for (unsigned int i = (uint64_t *)(qword_2683E87C8
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E87C8));
        !*i || *i == -8;
  return i;
}

uint64_t sub_22B1F7388(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B1F7404(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 > 4)
  {
    unsigned int v10 = bswap32(*(_DWORD *)(a3 + a4 - 5));
    if (v10 == 1983145521)
    {
      int v11 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
    }
    else if (v10 < 0x76346631)
    {
      int v11 = -1;
    }
    else
    {
      int v11 = 1;
    }
    uint64_t v5 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 280);
    __int16 v38 = 257;
    uint64_t v13 = sub_22B1D7384(a1 + 8, 49, a2, v12, (uint64_t)v37);
    BOOL v14 = v11 == 0;
    uint64_t v7 = v13;
    int v8 = v14;
    if (v14) {
      uint64_t v9 = 16;
    }
    else {
      uint64_t v9 = 32;
    }
  }
  else
  {
    uint64_t v5 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 280);
    __int16 v38 = 257;
    uint64_t v7 = sub_22B1D7384(a1 + 8, 49, a2, v6, (uint64_t)v37);
    int v8 = 0;
    uint64_t v9 = 32;
  }
  uint64_t v15 = llvm::UndefValue::get();
  uint64_t v16 = *(void *)(a1 + 344);
  long long v34 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v35, v5);
  int v36 = *(_DWORD *)(a1 + 104);
  __int16 v38 = 257;
  uint64_t v17 = llvm::ConstantInt::get();
  uint64_t v18 = v7;
  uint64_t v19 = sub_22B242524(a1 + 8, v7, v17, (uint64_t)v37);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v16 + 88))(v16, &v34, v19, 8, 0, v9);
  if (v35) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v38 = 257;
  uint64_t v21 = llvm::ConstantInt::get();
  uint64_t v22 = sub_22B2427EC(a1 + 8, v15, v20, v21, (uint64_t)v37);
  uint64_t v23 = 0;
  if (v8) {
    uint64_t v24 = 152;
  }
  else {
    uint64_t v24 = 160;
  }
  do
  {
    __int16 v38 = 257;
    uint64_t v25 = llvm::ConstantInt::get();
    uint64_t v26 = sub_22B242524(a1 + 8, v18, v25, (uint64_t)v37);
    uint64_t v27 = *(void *)(a1 + 344);
    long long v31 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v32, v5);
    int v33 = *(_DWORD *)(a1 + 104);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void))(*(void *)v27 + 144))(v27, &v31, v26, 0, *(void *)(a1 + v24));
    if (v32) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v38 = 257;
    uint64_t v29 = llvm::ConstantInt::get();
    uint64_t result = sub_22B2427EC(a1 + 8, v22, v28, v29, (uint64_t)v37);
    uint64_t v22 = result;
    ++v23;
  }
  while (v23 != 3);
  return result;
}

uint64_t sub_22B1F76E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::UndefValue::get();
  __int16 v26 = 257;
  uint64_t v5 = llvm::ConstantInt::get();
  uint64_t v6 = sub_22B242524(a1 + 8, a2, v5, (uint64_t)v25);
  uint64_t v7 = *(void *)(a1 + 344);
  long long v22 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (llvm::IRBuilderBase *)(a1 + 8));
  int v24 = *(_DWORD *)(a1 + 104);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v7 + 80))(v7, &v22, v6, 8, 0, 1);
  __int16 v26 = 257;
  uint64_t v9 = llvm::ConstantInt::get();
  uint64_t v10 = sub_22B2427EC(a1 + 8, v4, v8, v9, (uint64_t)v25);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    __int16 v26 = 257;
    uint64_t v12 = llvm::ConstantInt::get();
    uint64_t v13 = sub_22B242524(a1 + 8, a2, v12, (uint64_t)v25);
    uint64_t v14 = *(void *)(a1 + 344);
    long long v19 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v20, (llvm::IRBuilderBase *)(a1 + 8));
    int v21 = *(_DWORD *)(a1 + 104);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void))(*(void *)v14 + 136))(v14, &v19, v13, 0, *(void *)(a1 + 176));
    if (v20) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v26 = 257;
    uint64_t v16 = llvm::ConstantInt::get();
    uint64_t v10 = sub_22B2427EC(a1 + 8, v10, v15, v16, (uint64_t)v25);
  }
  uint64_t v17 = *(void *)(a1 + 192);
  __int16 v26 = 257;
  return sub_22B1D7384(a1 + 8, 49, v10, v17, (uint64_t)v25);
}

uint64_t sub_22B1F791C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v5 = a3[1];
  if (v5 == 16)
  {
    uint64_t v10 = *(void *)(a1 + 232);
    __int16 v21 = 257;
    uint64_t v11 = sub_22B1D7384(a1 + 8, 49, a2, v10, (uint64_t)v20);
    uint64_t v12 = *(void *)(a1 + 344);
    long long v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(a1 + 8));
    int v16 = *(_DWORD *)(a1 + 104);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v12 + 88))(v12, &v14, v11, 16, a3[3], 32);
    if (!v15) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v5 != 8) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 280);
  __int16 v21 = 257;
  uint64_t v7 = sub_22B1D7384(a1 + 8, 49, a2, v6, (uint64_t)v20);
  uint64_t v8 = *(void *)(a1 + 344);
  long long v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(a1 + 8));
  int v19 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 88))(v8, &v17, v7, 8, a3[3], 32);
  if (v18) {
LABEL_6:
  }
    llvm::MetadataTracking::untrack();
LABEL_7:
  if (*a3 == 16) {
    return sub_22B241FF8((void *)a1, v9, *(void *)(a1 + 152));
  }
  return v9;
}

uint64_t sub_22B1F7AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 1);
  if (v6 == 16)
  {
    uint64_t v9 = *(void *)(a1 + 344);
    long long v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(a1 + 8));
    int v16 = *(_DWORD *)(a1 + 104);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v9 + 80))(v9, &v14, a2, 16, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v15)
    {
LABEL_7:
      uint64_t v10 = *(void *)(a1 + 192);
      __int16 v13 = 257;
      return sub_22B1D7384(a1 + 8, 49, v8, v10, (uint64_t)v12);
    }
LABEL_6:
    llvm::MetadataTracking::untrack();
    goto LABEL_7;
  }
  if (v6 == 8)
  {
    uint64_t v7 = *(void *)(a1 + 344);
    long long v17 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(a1 + 8));
    int v19 = *(_DWORD *)(a1 + 104);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v7 + 80))(v7, &v17, a2, 8, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v18) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_22B1F7C38(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  llvm::ConstantFP::get();
  sub_22B1F7D34(a1, a2);
  __int16 v10 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  uint64_t v5 = *(void *)(a1 + 192);
  __int16 v10 = 257;
  uint64_t v6 = sub_22B1F7E00(a1 + 8, (uint64_t)a2, v5, (uint64_t)v9);
  v8[16] = 257;
  sub_22B1DB63C(a1 + 8, v6, v4, (uint64_t)v8);
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_22B1F7D34(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.fabs");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1F7E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return sub_22B1D7384(a1, 42, a2, a3, a4);
}

uint64_t sub_22B1F7E6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v15 = a2;
  uint64_t v4 = a1[43];
  uint64_t v5 = *(void *)(v4 + 1160);
  if (v5) {
    size_t v6 = strlen(*(const char **)(v4 + 1160));
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v7 = sub_22B1DB218((uint64_t)a1, v5, v6, a1[24], a1[20]);
  sub_22B1F7D34((uint64_t)a1, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v14 = 257;
  long long v8 = sub_22B1D4034((uint64_t)(a1 + 1), **(void **)(*(void *)v7 + 16), v7, (uint64_t)&v15, 1, (uint64_t)v13);
  uint64_t v9 = a1[20];
  __int16 v12 = 257;
  sub_22B1DB63C((uint64_t)(a1 + 1), (uint64_t)v8, v9, (uint64_t)v11);
  __int16 v14 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B1F7F94(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  size_t v6 = (uint64_t *)(a1 + 8);
  sub_22B1F7D34(a1, a3);
  llvm::ConstantFP::get();
  __int16 v22 = 257;
  uint64_t FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
  uint64_t v8 = *(void *)(a1 + 192);
  __int16 v22 = 257;
  uint64_t v9 = sub_22B1F7E00((uint64_t)v6, (uint64_t)a3, v8, (uint64_t)v21);
  uint64_t v10 = llvm::ConstantInt::get();
  __int16 v22 = 257;
  long long v11 = (llvm::Type ***)sub_22B1D6F68((uint64_t)v6, v9, v10, (uint64_t)v21);
  uint64_t v12 = llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t v13 = sub_22B1D4340(v6, 32, v11, v12, (uint64_t)&v19);
  __int16 v22 = 257;
  uint64_t v14 = sub_22B1D6F68((uint64_t)v6, v13, FCmpHelper, (uint64_t)v21);
  llvm::ConstantFP::get();
  __int16 v22 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v22 = 257;
  sub_22B1D6F68((uint64_t)v6, v15, v14, (uint64_t)v21);
  int v16 = (uint64_t *)sub_22B1F7D34(a1, a2);
  long long v17 = sub_22B1F8158(a1, v16, (uint64_t)a3);
  __int16 v22 = 257;
  sub_22B1F8230((uint64_t)v6, (uint64_t)v17, (uint64_t)v21);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_22B1F8158(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v11[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  if (*a2 == *(void *)(a1 + 152))
  {
    uint64_t v8 = "llvm.agx.powr.f16";
LABEL_6:
    uint64_t v7 = sub_22B1D7FA8(a1, (uint64_t)v8, 17, v6, v6, v6);
    goto LABEL_7;
  }
  if (v6 == *(void *)(a1 + 160))
  {
    uint64_t v8 = "llvm.agx.powr.f32";
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_7:
  v11[0] = a2;
  v11[1] = a3;
  v10[16] = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v7 + 24), v7, (uint64_t)v11, 2, (uint64_t)v10);
}

uint64_t sub_22B1F8230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    uint64_t v5 = llvm::UnaryOperator::Create();
    sub_22B1D4554(a1, v5);
LABEL_9:
    sub_22B1D6EE0((uint64_t *)a1, v5, a3);
    return v5;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 200))(*(void *)(a1 + 72));
  if (v5) {
    BOOL v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    goto LABEL_9;
  }
  return v5;
}

uint64_t sub_22B1F82F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  __int16 v8 = 257;
  uint64_t v4 = (uint64_t *)sub_22B1F8230(a1 + 8, a2, (uint64_t)v7);
  uint64_t v5 = sub_22B1F835C(a1, v4);
  __int16 v8 = 257;
  return sub_22B1F8230(v3, (uint64_t)v5, (uint64_t)v7);
}

llvm::Value *sub_22B1F835C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  BOOL v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.floor");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1F8428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  uint64_t v5 = llvm::ConstantFP::get();
  __int16 v16 = 257;
  uint64_t v6 = sub_22B1DB138(a1 + 8, a2, a2, (uint64_t)v15);
  __int16 v14 = 257;
  uint64_t v7 = (uint64_t *)sub_22B1DD690(a1 + 8, v4, v6, (uint64_t)v13);
  long long v8 = sub_22B1F8540(a1, v7);
  __int16 v16 = 257;
  uint64_t v9 = sub_22B1DD390(a1 + 8, v4, (uint64_t)v8, (uint64_t)v15);
  __int16 v16 = 257;
  uint64_t v10 = sub_22B1F860C(a1 + 8, a2, v9, (uint64_t)v15);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v10);
  __int16 v14 = 257;
  return sub_22B1DB138(a1 + 8, v5, v11, (uint64_t)v13);
}

llvm::Value *sub_22B1F8540(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.sqrt");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1F860C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = sub_22B1DB2F4(a1, 21, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    sub_22B1D4554(a1, v7);
    sub_22B1D6EE0((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t sub_22B1F86EC(uint64_t a1, uint64_t a2)
{
  llvm::ConstantFP::get();
  uint64_t v4 = llvm::ConstantFP::get();
  uint64_t v5 = llvm::ConstantFP::get();
  __int16 v18 = 257;
  uint64_t v6 = sub_22B1DB138(a1 + 8, a2, a2, (uint64_t)v17);
  __int16 v16 = 257;
  uint64_t v7 = (uint64_t *)sub_22B1DD690(a1 + 8, v4, v6, (uint64_t)v15);
  long long v8 = sub_22B1F8540(a1, v7);
  __int16 v18 = 257;
  uint64_t v9 = sub_22B1DD390(a1 + 8, v4, a2, (uint64_t)v17);
  __int16 v18 = 257;
  uint64_t v10 = sub_22B1F860C(a1 + 8, v4, (uint64_t)v8, (uint64_t)v17);
  __int16 v18 = 257;
  sub_22B1DB138(a1 + 8, v10, v9, (uint64_t)v17);
  __int16 v18 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v18 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v18 = 257;
  uint64_t v12 = sub_22B1F860C(a1 + 8, v4, Select, (uint64_t)v17);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v12);
  __int16 v16 = 257;
  return sub_22B1DB138(a1 + 8, v5, v13, (uint64_t)v15);
}

void sub_22B1F889C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v6 = 1120;
  if (*a2 == *(void *)(a1 + 160)) {
    uint64_t v6 = 1112;
  }
  uint64_t v5 = *(void *)(a1 + 344);
  uint64_t v7 = *(void *)(v5 + v6);
  if (v7) {
    size_t v8 = strlen(*(const char **)(v5 + v6));
  }
  else {
    size_t v8 = 0;
  }
  sub_22B1DB218(a1, v7, v8, v4, v4);
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  sub_22B1F7D34(a1, a2);
  llvm::BasicBlock::splitBasicBlock();
  operator new();
}

uint64_t sub_22B1F8C98(uint64_t *a1)
{
  uint64_t v2 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  __int16 v5 = 257;
  return sub_22B1D6EE0(a1, v2, (uint64_t)v4);
}

uint64_t sub_22B1F8D00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x230F42070](v8, a3, a4, a2, 0);
  __int16 v11 = 257;
  return sub_22B1D6EE0(a1, v8, (uint64_t)v10);
}

llvm::User *sub_22B1F8D80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (llvm::User *)llvm::User::operator new((llvm::User *)0x40);
  *(_DWORD *)(llvm::Instruction::Instruction() + 60) = a3;
  llvm::Value::setName();
  llvm::User::allocHungoffUses(v7);
  if (sub_22B1D44A8((uint64_t)v7)) {
    sub_22B1D4554(a1, (uint64_t)v7);
  }
  (*(void (**)(void, llvm::User *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v7, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v8)
  {
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = v9 + 16 * v8;
    do
    {
      llvm::Instruction::setMetadata();
      v9 += 16;
    }
    while (v9 != v10);
  }
  return v7;
}

_DWORD *sub_22B1F8E8C(_DWORD *this, uint64_t a2, uint64_t a3)
{
  __int16 v5 = this;
  int v6 = this[5];
  if ((v6 & 0x7FFFFFF) == this[15])
  {
    this = (_DWORD *)llvm::PHINode::growOperands((llvm::PHINode *)this);
    int v6 = v5[5];
  }
  uint64_t v7 = (v6 + 1) & 0x7FFFFFF;
  v5[5] = v6 & 0xF8000000 | (v6 + 1) & 0x7FFFFFF;
  uint64_t v8 = (v7 - 1);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v9 = (_DWORD *)*((void *)v5 - 1);
  }
  else {
    uint64_t v9 = &v5[-8 * v7];
  }
  uint64_t v10 = &v9[8 * v8];
  if (*(void *)v10)
  {
    **((void **)v10 + 2) = *((void *)v10 + 1);
    uint64_t v11 = *((void *)v10 + 1);
    if (v11) {
      *(void *)(v11 + 16) = *((void *)v10 + 2);
    }
  }
  *(void *)uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v13 = (void *)(a2 + 8);
    uint64_t v12 = v14;
    uint64_t v15 = &v9[8 * v8];
    *((void *)v15 + 1) = v14;
    if (v14) {
      *(void *)(v12 + 16) = v15 + 2;
    }
    *((void *)v15 + 2) = v13;
    void *v13 = v10;
  }
  int v16 = v5[5];
  uint64_t v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x40000000) != 0) {
    __int16 v18 = (_DWORD *)*((void *)v5 - 1);
  }
  else {
    __int16 v18 = &v5[-8 * v17];
  }
  *(void *)&v18[8 * v5[15] + 2 * (v17 - 1)] = a3;
  return this;
}

void sub_22B1F8F80(void *a1)
{
  sub_22B1F8FB8(a1);
  JUMPOUT(0x230F43600);
}

void *sub_22B1F8FB8(void *a1)
{
  *a1 = &unk_26DE72050;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 61));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 60));
  uint64_t v2 = (void *)a1[45];
  if (v2 != a1 + 47) {
    free(v2);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 17));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 16));
  uint64_t v3 = (void *)a1[1];
  if (v3 != a1 + 3) {
    free(v3);
  }
  return a1;
}

llvm::Instruction *sub_22B1F9044(uint64_t a1, uint64_t *a2, std::string::size_type a3, std::string::size_type a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  sub_22B1D7BF0(&v25, "llvm.fma.");
  int v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v26, *(_DWORD *)(v8 + 32));
    uint64_t v10 = std::string::insert(&v26, 0, "v");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    uint64_t v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (v23 >= 0) {
      std::string::size_type v13 = HIBYTE(v23);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v25, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    int v9 = *(_DWORD *)(v8 + 8);
  }
  int v14 = v9 & 0xFE;
  uint64_t v15 = v8;
  if (v14 == 18) {
    uint64_t v15 = **(void **)(v8 + 16);
  }
  if (v15 == *(void *)(a1 + 160)) {
    int v16 = "f32";
  }
  else {
    int v16 = "f16";
  }
  std::string::append(&v25, v16);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v25;
  }
  else {
    uint64_t v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = sub_22B1D7EC8(a1, (uint64_t)v17, size, v8, v8, v8, v8);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v26.__r_.__value_.__l.__size_ = a3;
  v26.__r_.__value_.__r.__words[2] = a4;
  __int16 v24 = 257;
  __int16 v20 = sub_22B1D4034(a1 + 8, *(void *)(v19 + 24), v19, (uint64_t)&v26, 3, (uint64_t)__p);
  llvm::Instruction::setHasAllowReassoc(v20);
  llvm::Instruction::setHasApproxFunc(v20);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v20;
}

llvm::Value *sub_22B1F9220(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  int v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.rsqrt");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1F92EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  uint64_t v6 = a1 + 8;
  __int16 v12 = 257;
  uint64_t v7 = sub_22B1F860C(a1 + 8, a2, a3, (uint64_t)v11);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v7);
  __int16 v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v12 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v12 = 257;
  sub_22B1DD390(v6, v8, Select, (uint64_t)v11);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_22B1F9464(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = llvm::ConstantFP::get();
  __int16 v26 = 257;
  uint64_t v8 = (uint64_t *)sub_22B1DB138(a1 + 8, (uint64_t)a2, v7, (uint64_t)v25);
  if (a3)
  {
    uint64_t v9 = llvm::ConstantFP::get();
    __int16 v26 = 257;
    uint64_t v8 = (uint64_t *)sub_22B1DD390(a1 + 8, (uint64_t)v8, v9, (uint64_t)v25);
  }
  int v10 = sub_22B1F835C(a1, v8);
  __int16 v26 = 257;
  uint64_t v11 = sub_22B1DD690(a1 + 8, (uint64_t)v8, (uint64_t)v10, (uint64_t)v25);
  uint64_t v12 = llvm::ConstantFP::get();
  uint64_t v13 = llvm::ConstantFP::get();
  __int16 v26 = 257;
  uint64_t v14 = sub_22B1DB138(a1 + 8, v11, v12, (uint64_t)v25);
  uint64_t v15 = *(void *)(a1 + 344);
  if (!*(unsigned char *)(v15 + 1650))
  {
    __int16 v26 = 257;
    uint64_t v16 = sub_22B1DD690(a1 + 8, v13, v14, (uint64_t)v25);
    uint64_t v17 = sub_22B1F9648(a1, v14, v16);
    __int16 v26 = 257;
    uint64_t v18 = sub_22B1DD690(a1 + 8, v14, v12, (uint64_t)v25);
    uint64_t v14 = sub_22B1F9754(a1, v17, v18);
    uint64_t v15 = *(void *)(a1 + 344);
  }
  uint64_t v24 = v14;
  uint64_t v19 = 1128;
  if (v6 == *(void *)(a1 + 152)) {
    uint64_t v19 = 1136;
  }
  uint64_t v20 = *(void *)(v15 + v19);
  if (v20) {
    size_t v21 = strlen(*(const char **)(v15 + v19));
  }
  else {
    size_t v21 = 0;
  }
  uint64_t v22 = sub_22B1DB218(a1, v20, v21, v6, v6);
  __int16 v26 = 257;
  return sub_22B1D4034(a1 + 8, *(void *)(v22 + 24), v22, (uint64_t)&v24, 1, (uint64_t)v25);
}

uint64_t sub_22B1F9648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v6 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v6 = *(_DWORD *)(*(void *)a2 + 8);
  }
  BOOL v8 = (*(_DWORD *)(*(void *)(**(void **)(a1 + 704) - 24) + *(void *)(a1 + 704) + 104) & 2) == 0 && v6 == 2;
  uint64_t v9 = *(void *)(a1 + 344);
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v14 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, BOOL))(*(void *)v9 + 48))(v9, &v12, a2, a3, v8);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t sub_22B1F9754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v6 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v6 = *(_DWORD *)(*(void *)a2 + 8);
  }
  BOOL v8 = (*(_DWORD *)(*(void *)(**(void **)(a1 + 704) - 24) + *(void *)(a1 + 704) + 104) & 2) == 0 && v6 == 2;
  uint64_t v9 = *(void *)(a1 + 344);
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v14 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, BOOL))(*(void *)v9 + 56))(v9, &v12, a2, a3, v8);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t sub_22B1F9860(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 8;
  int v5 = sub_22B1F9464(a1, a2, 0);
  int v6 = sub_22B1F9464(a1, a2, 1);
  __int16 v9 = 257;
  return sub_22B1F860C(v4, (uint64_t)v5, (uint64_t)v6, (uint64_t)v8);
}

llvm::Value *sub_22B1F98D0(void *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = (unsigned int *)*a2;
  int v6 = **(llvm::Type ***)(*(void *)a3 + 16);
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12 && (uint64_t v7 = v5[8], v7 != 1))
  {
    uint64_t v11 = llvm::UndefValue::get();
    long long v12 = (llvm::Type **)llvm::UndefValue::get();
    if (v7)
    {
      uint64_t v22 = v6;
      for (uint64_t i = 0; i != v7; ++i)
      {
        __int16 v25 = 257;
        uint64_t v14 = llvm::ConstantInt::get();
        uint64_t v15 = (uint64_t *)sub_22B242524((uint64_t)(a1 + 1), (uint64_t)a2, v14, (uint64_t)v24);
        uint64_t v16 = (uint64_t)sub_22B1F9464((uint64_t)a1, v15, 1);
        unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v5);
        if (ScalarSizeInBits > llvm::Type::getScalarSizeInBits(v22)) {
          uint64_t v16 = sub_22B241FF8(a1, v16, (uint64_t)v22);
        }
        __int16 v25 = 257;
        uint64_t v18 = llvm::ConstantInt::get();
        long long v12 = (llvm::Type **)sub_22B2427EC((uint64_t)(a1 + 1), (uint64_t)v12, v16, v18, (uint64_t)v24);
        uint64_t v19 = sub_22B1F9464((uint64_t)a1, v15, 0);
        __int16 v25 = 257;
        uint64_t v20 = llvm::ConstantInt::get();
        uint64_t v11 = sub_22B2427EC((uint64_t)(a1 + 1), v11, (uint64_t)v19, v20, (uint64_t)v24);
      }
    }
    sub_22B1F718C(a1 + 1, v12, a3, 0);
    return (llvm::Value *)v11;
  }
  else
  {
    BOOL v8 = (llvm::Type **)sub_22B1F9464((uint64_t)a1, a2, 1);
    unsigned int v9 = llvm::Type::getScalarSizeInBits((llvm::Type *)v5);
    if (v9 > llvm::Type::getScalarSizeInBits(v6)) {
      BOOL v8 = (llvm::Type **)sub_22B241FF8(a1, (uint64_t)v8, (uint64_t)v6);
    }
    sub_22B1F718C(a1 + 1, v8, a3, 0);
    return sub_22B1F9464((uint64_t)a1, a2, 0);
  }
}

llvm::Value *sub_22B1F9B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v5 = sub_22B1DB138(a1 + 8, a2, a2, (uint64_t)v12);
  uint64_t v6 = llvm::ConstantFP::get();
  v11[16] = 257;
  uint64_t v7 = (uint64_t *)sub_22B1DD690(v4, v5, v6, (uint64_t)v11);
  BOOL v8 = sub_22B1F8540(a1, v7);
  __int16 v13 = 257;
  unsigned int v9 = (uint64_t *)sub_22B1DD390(v4, a2, (uint64_t)v8, (uint64_t)v12);
  return sub_22B1F9BD0(a1, v9);
}

llvm::Value *sub_22B1F9BD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.log");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

llvm::Value *sub_22B1F9C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v5 = sub_22B1DB138(a1 + 8, a2, a2, (uint64_t)v12);
  uint64_t v6 = llvm::ConstantFP::get();
  v11[16] = 257;
  uint64_t v7 = (uint64_t *)sub_22B1DD390(v4, v5, v6, (uint64_t)v11);
  long long v8 = sub_22B1F8540(a1, v7);
  __int16 v13 = 257;
  uint64_t v9 = (uint64_t *)sub_22B1DD390(v4, a2, (uint64_t)v8, (uint64_t)v12);
  return sub_22B1F9BD0(a1, v9);
}

uint64_t sub_22B1F9D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v12 = 257;
  uint64_t v5 = sub_22B1DD390(a1 + 8, v4, a2, (uint64_t)v11);
  __int16 v12 = 257;
  uint64_t v6 = sub_22B1DD690(a1 + 8, v4, a2, (uint64_t)v11);
  __int16 v12 = 257;
  uint64_t v7 = (uint64_t *)sub_22B1F860C(a1 + 8, v5, v6, (uint64_t)v11);
  long long v8 = sub_22B1F9BD0(a1, v7);
  uint64_t v9 = llvm::ConstantFP::get();
  __int16 v12 = 257;
  return sub_22B1DB138(a1 + 8, (uint64_t)v8, v9, (uint64_t)v11);
}

uint64_t sub_22B1F9E20(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_22B1F9ECC(a1, a2);
  __int16 v12 = 257;
  uint64_t v5 = (uint64_t *)sub_22B1F8230(a1 + 8, (uint64_t)a2, (uint64_t)v11);
  uint64_t v6 = sub_22B1F9ECC(a1, v5);
  __int16 v12 = 257;
  uint64_t v7 = sub_22B1DD390(a1 + 8, (uint64_t)v4, (uint64_t)v6, (uint64_t)v11);
  uint64_t v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return sub_22B1DB138(a1 + 8, v7, v8, (uint64_t)v10);
}

llvm::Value *sub_22B1F9ECC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.exp");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1F9F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (llvm::IRBuilderBase *)(a1 + 8);
  __int16 v18 = 257;
  uint64_t v7 = (uint64_t *)sub_22B1F860C(a1 + 8, a2, a3, (uint64_t)v17);
  uint64_t v8 = *(void *)(a1 + 344);
  long long v19 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v20, v6);
  int v9 = *(_DWORD *)(a1 + 104);
  int v21 = v9;
  long long v13 = v19;
  uint64_t v14 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track();
    int v9 = v21;
  }
  int v15 = v9;
  int v10 = sub_22B1DEBB8(v8, (uint64_t)&v13, v7, "llvm.trunc");
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v18 = 257;
  uint64_t v11 = sub_22B1DB138((uint64_t)v6, (uint64_t)v10, a3, (uint64_t)v17);
  __int16 v16 = 257;
  return sub_22B1DD690((uint64_t)v6, a2, v11, (uint64_t)&v13);
}

uint64_t sub_22B1FA0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v7 = (uint64_t *)sub_22B1F860C(a1 + 8, a2, a3, (uint64_t)v12);
  uint64_t v8 = sub_22B1F835C(a1, v7);
  __int16 v13 = 257;
  uint64_t v9 = sub_22B1DB138(v6, (uint64_t)v8, a3, (uint64_t)v12);
  v11[16] = 257;
  return sub_22B1DD690(v6, a2, v9, (uint64_t)v11);
}

uint64_t sub_22B1FA158(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 8;
  int v5 = sub_22B1F835C(a1, a2);
  __int16 v15 = 257;
  uint64_t v6 = sub_22B1DD690(v4, (uint64_t)a2, (uint64_t)v5, (uint64_t)v14);
  uint64_t v7 = *a2;
  int v8 = *(_DWORD *)(*a2 + 8);
  int v9 = v8;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**(void **)(v7 + 16) + 8);
  }
  if (v9 == 2 && (*(unsigned char *)(*(void *)(**(void **)(a1 + 704) - 24) + *(void *)(a1 + 704) + 104) & 4) == 0)
  {
    if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
      int v8 = *(unsigned __int8 *)(**(void **)(v7 + 16) + 8);
    }
    if (v8 == 2)
    {
      uint64_t v10 = llvm::ConstantInt::get();
      uint64_t v11 = *(void *)(a1 + 160);
    }
    else
    {
      uint64_t v10 = llvm::ConstantInt::get();
      uint64_t v11 = *(void *)(a1 + 152);
    }
    __int16 v15 = 257;
    uint64_t v12 = sub_22B1D7384(v4, 49, v10, v11, (uint64_t)v14);
    if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12) {
      sub_22B242CE8(a1, *(_DWORD *)(v7 + 32), v12);
    }
    sub_22B1F7D34(a1, a2);
    __int16 v15 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantFP::get();
    __int16 v15 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v6;
}

uint64_t sub_22B1FA30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 8;
  __int16 v9 = 257;
  uint64_t v6 = sub_22B1DB138(a1 + 8, a2, a3, (uint64_t)v8);
  __int16 v9 = 257;
  return sub_22B1DD390(v5, v6, a4, (uint64_t)v8);
}

llvm::Value *sub_22B1FA36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v8 = 257;
  uint64_t v5 = (uint64_t *)sub_22B1DB138(a1 + 8, a2, v4, (uint64_t)v7);
  return sub_22B1FA3D0(a1, v5);
}

llvm::Value *sub_22B1FA3D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.exp2");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1FA49C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  int v5 = sub_22B1FA510(a1, a2);
  __int16 v8 = 257;
  return sub_22B1DB138(a1 + 8, (uint64_t)v5, v4, (uint64_t)v7);
}

llvm::Value *sub_22B1FA510(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 104);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = sub_22B1DEBB8(v4, (uint64_t)&v11, a2, "llvm.log2");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1FA5DC(uint64_t a1, uint64_t *a2)
{
  sub_22B1F7D34(a1, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateSelect();
  __int16 v11 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v13 = 257;
  uint64_t v5 = sub_22B1DD390(a1 + 8, (uint64_t)a2, Select, (uint64_t)v12);
  uint64_t v6 = *(void *)(a1 + 192);
  __int16 v13 = 257;
  uint64_t v7 = sub_22B1F7E00(a1 + 8, v5, v6, (uint64_t)v12);
  uint64_t v8 = *(void *)(a1 + 160);
  __int16 v11 = 257;
  sub_22B1DB63C(a1 + 8, v7, v8, (uint64_t)&v10);
  llvm::ConstantFP::get();
  __int16 v13 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B1FA7AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_22B1F9ECC(a1, a2);
  __int16 v12 = 257;
  uint64_t v5 = (uint64_t *)sub_22B1F8230(a1 + 8, (uint64_t)a2, (uint64_t)v11);
  uint64_t v6 = sub_22B1F9ECC(a1, v5);
  __int16 v12 = 257;
  uint64_t v7 = sub_22B1DD690(a1 + 8, (uint64_t)v4, (uint64_t)v6, (uint64_t)v11);
  uint64_t v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return sub_22B1DB138(a1 + 8, v7, v8, (uint64_t)v10);
}

uint64_t sub_22B1FA858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v5 = llvm::ConstantFP::get();
  __int16 v14 = 257;
  uint64_t v6 = (uint64_t *)sub_22B1DB138(v4, a2, v5, (uint64_t)v13);
  uint64_t v7 = sub_22B1F9ECC(a1, v6);
  uint64_t v8 = llvm::ConstantFP::get();
  __int16 v14 = 257;
  uint64_t v9 = sub_22B1DD690(v4, (uint64_t)v7, v8, (uint64_t)v13);
  uint64_t v10 = llvm::ConstantFP::get();
  __int16 v14 = 257;
  uint64_t v11 = sub_22B1DD390(v4, (uint64_t)v7, v10, (uint64_t)v13);
  __int16 v14 = 257;
  return sub_22B1F860C(v4, v9, v11, (uint64_t)v13);
}

uint64_t sub_22B1FA934(uint64_t *a1, llvm::Type ***a2)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v4 = &qword_2683E8778;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E8798, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E8798))
  {
    qword_2683E8778 = 0;
    *(void *)&dword_2683E8780 = 0;
    qword_2683E8788 = 0x1800000000;
    __cxa_atexit((void (*)(void *))sub_22B1FB1DC, &qword_2683E8778, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E8798);
  }
  if (!dword_2683E8784)
  {
    std::string v66 = a2;
    int v67 = a1;
    uint64_t v73 = 0;
    int v87 = &v89;
    long long v88 = xmmword_22B26F8B0;
    while (1)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        long long v80 = off_26488D6D0[v5];
        __s = v80 + 2;
        uint64_t v68 = v5;
        char v74 = byte_22B26FE93[v5];
        int v75 = *v80;
        do
        {
          uint64_t v7 = off_26488D6D0[v6];
          if (*v80 == 102)
          {
            int v72 = 1;
          }
          else
          {
            int v72 = 2;
            if (*v7 != 102)
            {
              char v71 = 0;
              uint64_t v8 = 1;
              goto LABEL_11;
            }
          }
          char v71 = 1;
          uint64_t v8 = 4;
LABEL_11:
          uint64_t v69 = v6;
          uint64_t v70 = v8;
          uint64_t v9 = 0;
          char v78 = byte_22B26FE93[v6];
          uint64_t v77 = v7 + 2;
          uint64_t v79 = off_26488D6D0[v6];
          do
          {
            char v10 = 0;
            uint64_t v11 = 0;
            int v12 = v72;
            if ((v71 & (v9 == 0)) == 0) {
              int v12 = v9;
            }
            int v81 = v12;
            char v13 = 1;
            do
            {
              __int16 v82 = *v7;
              __int16 v83 = *v80;
              *(void *)&long long v88 = 0;
              sub_22B1FB17C(&v87, *v80);
              sub_22B1FB17C(&v87, v80[1]);
              __int16 v14 = (char *)*(&off_26488D6B0 + v73);
              size_t v15 = strlen(v14);
              sub_22B1EC888(&v87, v14, &v14[v15]);
              size_t v16 = strlen(__s);
              sub_22B1EC888(&v87, __s, &__s[v16]);
              sub_22B1EC888(&v87, ".", "");
              sub_22B1FB17C(&v87, *v7);
              sub_22B1FB17C(&v87, v7[1]);
              size_t v17 = strlen(v14);
              sub_22B1EC888(&v87, v14, &v14[v17]);
              size_t v18 = strlen(v77);
              sub_22B1EC888(&v87, v77, &v77[v18]);
              uint64_t v19 = v9;
              size_t v20 = strlen((const char *)*(&off_26488D728 + v9));
              sub_22B1EC888(&v87, *(&off_26488D728 + v9), (unsigned char *)*(&off_26488D728 + v9) + v20);
              size_t v21 = strlen((const char *)*(&off_26488D758 + v11));
              sub_22B1EC888(&v87, *(&off_26488D758 + v11), (unsigned char *)*(&off_26488D758 + v11) + v21);
              uint64_t v22 = v87;
              size_t v23 = v88;
              unsigned int v24 = llvm::StringMapImpl::LookupBucketFor();
              uint64_t v26 = *v4;
              uint64_t v27 = v24;
              uint64_t v28 = *(void *)(*v4 + 8 * v24);
              if (v28 == -8)
              {
                LODWORD(qword_2683E8788) = qword_2683E8788 - 1;
              }
              else if (v28)
              {
                uint64_t v7 = v79;
                uint64_t v9 = v19;
                goto LABEL_28;
              }
              uint64_t v29 = v4;
              uint64_t v30 = MEMORY[0x230F426A0](v23 + 25, 8);
              long long v31 = (void *)v30;
              uint64_t v32 = v30 + 24;
              if (v23) {
                memcpy((void *)(v30 + 24), v22, v23);
              }
              *(unsigned char *)(v32 + v23) = 0;
              v31[1] = 0;
              v31[2] = 0;
              *long long v31 = v23;
              *(void *)(v26 + 8 * v27) = v31;
              uint64_t v4 = v29;
              ++*((_DWORD *)v29 + 3);
              int v33 = (uint64_t *)(*v29 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v29));
              uint64_t v7 = v79;
              uint64_t v9 = v19;
              while (1)
              {
                uint64_t v28 = *v33;
                if (*v33 && v28 != -8) {
                  break;
                }
                ++v33;
              }
LABEL_28:
              v25.i16[0] = v82;
              v25.i16[1] = v83;
              *(int8x8_t *)v25.i8 = vand_s8((int8x8_t)vceq_s16((int16x4_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 0), (int16x4_t)0x73007300660066), (int8x8_t)0x1000100010001);
              *(_DWORD *)(v28 + 8) = vmovn_s16(v25).u32[0];
              *(unsigned char *)(v28 + 12) = v78;
              *(unsigned char *)(v28 + 13) = v74;
              *(_DWORD *)(v28 + 16) = v81;
              *(unsigned char *)(v28 + 20) = v10;
              char v35 = v13 & (v75 != 102);
              char v10 = 1;
              uint64_t v11 = 1;
              char v13 = 0;
            }
            while ((v35 & 1) != 0);
            ++v9;
          }
          while (v9 != v70);
          uint64_t v6 = v69 + 1;
        }
        while (v69 != 10);
        uint64_t v5 = v68 + 1;
      }
      while (v68 != 10);
      if (++v73 == 4)
      {
        if (v87 != &v89) {
          free(v87);
        }
        a2 = v66;
        a1 = v67;
        break;
      }
    }
  }
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v37 = Key;
  if (Key == -1) {
    uint64_t v37 = *((unsigned int *)v4 + 2);
  }
  uint64_t v38 = *(void *)(*v4 + 8 * v37);
  std::string::size_type v39 = *a2;
  if (*(unsigned char *)(v38 + 9))
  {
    unsigned int v40 = *(unsigned __int8 *)(v38 + 13);
    if (*(unsigned char *)(v38 + 8))
    {
      if (v40 >= *(unsigned __int8 *)(v38 + 12))
      {
        uint64_t v51 = a1[20];
        __int16 v90 = 257;
        return sub_22B1EEEB4((uint64_t)(a1 + 1), (uint64_t)v39, v51, (uint64_t)&v87);
      }
      int v41 = *(_DWORD *)(v38 + 16);
      if (v41 == 1 || v41 == 2)
      {
        uint64_t v42 = a1[19];
        __int16 v90 = 257;
        return sub_22B1DC548((uint64_t)(a1 + 1), (uint64_t)v39, v42, (uint64_t)&v87);
      }
      return 0;
    }
    uint64_t v48 = 20;
    if (v40 == 16) {
      uint64_t v48 = 19;
    }
    if (*(_DWORD *)(v38 + 16) == 1)
    {
      uint64_t v49 = a1[v48];
      uint64_t v50 = (uint64_t)(a1 + 1);
      if (*(unsigned char *)(v38 + 10))
      {
        __int16 v90 = 257;
        return sub_22B1DB63C(v50, (uint64_t)v39, v49, (uint64_t)&v87);
      }
      else
      {
        __int16 v85 = 257;
        return sub_22B1DB6A8(v50, (uint64_t)v39, v49, (uint64_t)v84);
      }
    }
    return 0;
  }
  if (!*(unsigned char *)(v38 + 8))
  {
    uint64_t v52 = 0;
    unsigned int v53 = *(unsigned __int8 *)(v38 + 13);
    if (v53 <= 0xF)
    {
      if (v53 == 1)
      {
        char v64 = (llvm::Type ***)sub_22B242DC8((uint64_t)a1, *a2, *(unsigned __int8 *)(v38 + 10));
        uint64_t v65 = llvm::ConstantInt::get();
        __int16 v90 = 257;
        return sub_22B1D4340(a1 + 1, 33, v64, v65, (uint64_t)&v87);
      }
      if (v53 != 8) {
        goto LABEL_85;
      }
      char v54 = a1 + 22;
    }
    else
    {
      switch(v53)
      {
        case 0x10u:
          char v54 = a1 + 23;
          break;
        case 0x20u:
          char v54 = a1 + 24;
          break;
        case 0x40u:
          char v54 = a1 + 25;
          break;
        default:
LABEL_85:
          if (v53 >= *(unsigned __int8 *)(v38 + 12))
          {
            uint64_t v62 = (uint64_t)(a1 + 1);
            if (*(unsigned char *)(v38 + 10))
            {
              __int16 v90 = 257;
              uint64_t v63 = 40;
            }
            else
            {
              __int16 v90 = 257;
              uint64_t v63 = 39;
            }
          }
          else
          {
            uint64_t v62 = (uint64_t)(a1 + 1);
            __int16 v90 = 257;
            uint64_t v63 = 38;
          }
          return sub_22B1D7384(v62, v63, (uint64_t)v39, v52, (uint64_t)&v87);
      }
    }
    uint64_t v52 = *v54;
    goto LABEL_85;
  }
  uint64_t v44 = sub_22B241B38((uint64_t)a1, (uint64_t *)*a2, 1);
  uint64_t v45 = 0;
  uint64_t v86 = v44;
  unsigned int v46 = *(unsigned __int8 *)(v38 + 13);
  if (v46 > 0xF)
  {
    switch(v46)
    {
      case 0x10u:
        std::string v47 = a1 + 23;
        break;
      case 0x20u:
        std::string v47 = a1 + 24;
        break;
      case 0x40u:
        std::string v47 = a1 + 25;
        break;
      default:
        goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v46 == 1)
  {
    llvm::ConstantFP::get();
    __int16 v90 = 257;
    return llvm::IRBuilderBase::CreateFCmpHelper();
  }
  if (v46 == 8)
  {
    std::string v47 = a1 + 22;
LABEL_70:
    uint64_t v45 = *v47;
  }
LABEL_71:
  int v55 = *(_DWORD *)(v38 + 16);
  if (v55 == 2)
  {
    uint64_t v59 = (uint64_t)(a1 + 1);
    if (*(unsigned char *)(v38 + 11))
    {
      __int16 v90 = 257;
      return sub_22B1F7E00(v59, v44, v45, (uint64_t)&v87);
    }
    else
    {
      __int16 v90 = 257;
      return sub_22B1D78D4(v59, v44, v45, (uint64_t)&v87);
    }
  }
  else
  {
    if (v55 != 1) {
      return 0;
    }
    uint64_t v56 = a1[43];
    uint64_t v57 = *(void *)(v56 + 1160);
    if (v57) {
      size_t v58 = strlen(*(const char **)(v56 + 1160));
    }
    else {
      size_t v58 = 0;
    }
    uint64_t v60 = sub_22B1DB218((uint64_t)a1, v57, v58, a1[24], a1[20]);
    __int16 v90 = 257;
    uint64_t v61 = sub_22B1D4034((uint64_t)(a1 + 1), *(void *)(v60 + 24), v60, (uint64_t)&v86, 1, (uint64_t)&v87);
    __int16 v85 = 257;
    return sub_22B1D77F0((uint64_t)(a1 + 1), (uint64_t)v61, v45, 0, (uint64_t)v84);
  }
}

void *sub_22B1FB17C(void *result, char a2)
{
  uint64_t v2 = result[1];
  if ((unint64_t)(v2 + 1) > result[2]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*result + v2) = a2;
  ++result[1];
  return result;
}

uint64_t sub_22B1FB1DC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B1FB258(uint64_t a1, uint64_t *a2)
{
  sub_22B1FB640();
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v5 = qword_2683E87A0;
  if (Key == -1) {
    uint64_t v6 = dword_2683E87A8;
  }
  else {
    uint64_t v6 = Key;
  }
  uint64_t v7 = *(void *)(qword_2683E87A0 + 8 * v6);
  switch(*(_DWORD *)(v7 + 8))
  {
    case 0:
      uint64_t v8 = (void *)*a2;
      uint64_t v9 = *(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 80);
      return v9(a1, v8, v7 + 12);
    case 1:
      uint64_t v11 = *(void *)*a2;
      if (*(_DWORD *)(v11 + 32) == 3)
      {
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
          uint64_t v11 = **(void **)(v11 + 16);
        }
        uint64_t v12 = sub_22B242678(a1, *a2, 4);
        *a2 = v12;
        uint64_t NullValue = llvm::Constant::getNullValue((llvm::Constant *)v11, v13);
        __int16 v36 = 257;
        uint64_t v15 = llvm::ConstantInt::get();
        *a2 = sub_22B2427EC(a1 + 8, v12, NullValue, v15, (uint64_t)v35);
      }
      uint64_t v16 = *(void *)(a1 + 344);
      long long v32 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v33, (llvm::IRBuilderBase *)(a1 + 8));
      int v34 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v16 + 96))(v16, &v32, 5, *(void *)(a1 + 192), *a2, 1, *(unsigned __int8 *)(*(void *)(v5 + 8 * v6) + 12));
      if (v33) {
        goto LABEL_19;
      }
      return v17;
    case 2:
      uint64_t v18 = *(void *)(a1 + 344);
      long long v29 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v30, (llvm::IRBuilderBase *)(a1 + 8));
      int v31 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, void, void, uint64_t, uint64_t, void))(*(void *)v18 + 96))(v18, &v29, 0, *(void *)(a1 + 184), *a2, 1, 0);
      if (!v30) {
        return v17;
      }
      goto LABEL_19;
    case 3:
      uint64_t v19 = *(void *)(a1 + 344);
      long long v26 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v27, (llvm::IRBuilderBase *)(a1 + 8));
      int v28 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v19 + 96))(v19, &v26, 7, *(void *)(a1 + 184), *a2, 1, 0);
      if (!v27) {
        return v17;
      }
      goto LABEL_19;
    case 4:
      uint64_t v20 = *(void *)(a1 + 344);
      long long v23 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v24, (llvm::IRBuilderBase *)(a1 + 8));
      int v25 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v20 + 96))(v20, &v23, 8, *(void *)(a1 + 184), *a2, 1, 0);
      if (v24) {
LABEL_19:
      }
        llvm::MetadataTracking::untrack();
      return v17;
    case 5:
      uint64_t v21 = *a2;
      uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 96);
      return v22(a1, v21);
    default:
      return 0;
  }
}

void sub_22B1FB640()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E87C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E87C0))
  {
    qword_2683E87A0 = 0;
    *(void *)&dword_2683E87A8 = 0;
    qword_2683E87B0 = 0x1000000000;
    __cxa_atexit((void (*)(void *))sub_22B1FBD48, &qword_2683E87A0, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E87C0);
  }
  char v0 = dword_2683E87AC;
  if (!dword_2683E87AC)
  {
    uint64_t v1 = 0;
    do
    {
      char v2 = 0;
      uint64_t v3 = 0;
      char v61 = v0;
      uint64_t v4 = off_26488D768[v1];
      do
      {
        uint64_t v5 = 0;
        char v63 = v2;
        uint64_t v6 = off_26488D778[v3];
        do
        {
          unsigned __int8 v7 = atoi(v4);
          unsigned __int8 v8 = atoi(v6);
          uint64_t v9 = off_26488D788[v5];
          unsigned __int8 v10 = atoi(v9);
          sub_22B1D7BF0(&v69, ".");
          if ((v10 & 0xFE) != 0)
          {
            std::string::append(&v69, "v");
            std::string::append(&v69, v9);
          }
          std::string::append(&v69, "f");
          std::string::append(&v69, v4);
          sub_22B1D7BF0(&v68, v9);
          std::string::append(&v68, "x");
          std::string::append(&v68, v6);
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v11 = &v69;
          }
          else {
            uint64_t v11 = (std::string *)v69.__r_.__value_.__r.__words[0];
          }
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v69.__r_.__value_.__l.__size_;
          }
          std::string::append(&v68, (const std::string::value_type *)v11, size);
          std::operator+<char>();
          if ((v67 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if ((v67 & 0x80u) == 0) {
            size_t v14 = v67;
          }
          else {
            size_t v14 = v66;
          }
          unint64_t v15 = ((unint64_t)v7 << 32) | ((unint64_t)v8 << 40) | ((unint64_t)v10 << 48);
          *(void *)(*sub_22B1FBC40(p_p, v14) + 8) = v15 | 0x100000000000000;
          if ((char)v67 < 0) {
            operator delete(__p);
          }
          std::operator+<char>();
          if ((v67 & 0x80u) == 0) {
            uint64_t v16 = &__p;
          }
          else {
            uint64_t v16 = __p;
          }
          if ((v67 & 0x80u) == 0) {
            size_t v17 = v67;
          }
          else {
            size_t v17 = v66;
          }
          *(void *)(*sub_22B1FBC40(v16, v17) + 8) = v15;
          if ((char)v67 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v68.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
          ++v5;
        }
        while (v5 != 3);
        char v2 = 1;
        uint64_t v3 = 1;
      }
      while ((v63 & 1) == 0);
      char v0 = 1;
      uint64_t v1 = 1;
    }
    while ((v61 & 1) == 0);
    char v18 = 0;
    uint64_t v19 = 0;
    uint64_t v62 = 0x10000000001;
    do
    {
      char v60 = v18;
      char v20 = 1;
      do
      {
        char v64 = v20;
        BOOL v21 = (v20 & 1) == 0;
        if (v20) {
          uint64_t v22 = ".rgb10.v3f";
        }
        else {
          uint64_t v22 = ".rgb10a2.v4f";
        }
        uint64_t v23 = 0x1000000000000;
        if (!v21) {
          uint64_t v23 = 0;
        }
        uint64_t v24 = v62 | v23;
        char v25 = 1;
        do
        {
          char v26 = v25;
          if (v25) {
            uint64_t v27 = "unorm";
          }
          else {
            uint64_t v27 = "snorm";
          }
          if (v25) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = 0x100000000;
          }
          uint64_t v29 = v24 | v28;
          char v30 = 1;
          do
          {
            char v31 = v30;
            sub_22B1D7BF0(&v69, v27);
            std::string::append(&v69, v22);
            std::string::append(&v69, off_26488D768[v19]);
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v32 = &v69;
            }
            else {
              long long v32 = (std::string *)v69.__r_.__value_.__r.__words[0];
            }
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v33 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v33 = v69.__r_.__value_.__l.__size_;
            }
            *(void *)(*sub_22B1FBC40(v32, v33) + 8) = v29;
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v69.__r_.__value_.__l.__data_);
            }
            char v30 = 0;
          }
          while ((v31 & 1) != 0);
          char v25 = 0;
        }
        while ((v26 & 1) != 0);
        char v20 = 0;
      }
      while ((v64 & 1) != 0);
      uint64_t v62 = 1;
      char v18 = 1;
      uint64_t v19 = 1;
    }
    while ((v60 & 1) == 0);
    uint64_t v34 = 0;
    char v35 = 1;
    do
    {
      char v36 = v35;
      sub_22B1D7BF0(&v69, "unorm.rgb565.v3f");
      std::string::append(&v69, off_26488D768[v34]);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v69;
      }
      else {
        uint64_t v37 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v69.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1FBC40(v37, v38) + 8) = 2;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      char v35 = 0;
      uint64_t v34 = 1;
    }
    while ((v36 & 1) != 0);
    uint64_t v39 = 0;
    char v40 = 1;
    do
    {
      char v41 = v40;
      sub_22B1D7BF0(&v68, "unorm4x8.srgb.v4f");
      uint64_t v42 = std::string::append(&v68, off_26488D768[v39]);
      std::string::size_type v43 = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v69;
      }
      else {
        uint64_t v44 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = v69.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1FBC40(v44, v45) + 8) = 5;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      char v40 = 0;
      uint64_t v39 = 1;
    }
    while ((v41 & 1) != 0);
    uint64_t v46 = 0;
    char v47 = 1;
    do
    {
      char v48 = v47;
      sub_22B1D7BF0(&v68, "unorm.rg11b10f.v3f");
      uint64_t v49 = std::string::append(&v68, off_26488D768[v46]);
      std::string::size_type v50 = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v51 = &v69;
      }
      else {
        uint64_t v51 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v52 = v69.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1FBC40(v51, v52) + 8) = 3;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      char v47 = 0;
      uint64_t v46 = 1;
    }
    while ((v48 & 1) != 0);
    uint64_t v53 = 0;
    char v54 = 1;
    do
    {
      char v55 = v54;
      sub_22B1D7BF0(&v68, "unorm.rgb9e5.v3f");
      uint64_t v56 = std::string::append(&v68, off_26488D768[v53]);
      std::string::size_type v57 = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v58 = &v69;
      }
      else {
        size_t v58 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = v69.__r_.__value_.__l.__size_;
      }
      *(void *)(*sub_22B1FBC40(v58, v59) + 8) = 4;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      char v54 = 0;
      uint64_t v53 = 1;
    }
    while ((v55 & 1) != 0);
  }
}

uint64_t *sub_22B1FBC40(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(qword_2683E87A0 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E87B0) = qword_2683E87B0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 17, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  uint64_t *i = v9;
  ++dword_2683E87AC;
  for (uint64_t i = (uint64_t *)(qword_2683E87A0
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E87A0));
        !*i || *i == -8;
  return i;
}

uint64_t sub_22B1FBD48(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B1FBDC4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  sub_22B1FB640();
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v9 = qword_2683E87A0;
  if (Key == -1) {
    uint64_t v10 = dword_2683E87A8;
  }
  else {
    uint64_t v10 = Key;
  }
  uint64_t v11 = *(void *)(qword_2683E87A0 + 8 * v10);
  switch(*(_DWORD *)(v11 + 8))
  {
    case 0:
      uint64_t v12 = *a2;
      char v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88);
      return v13(a1, v12, v11 + 12);
    case 1:
      if (*(unsigned char *)(v11 + 14)) {
        uint64_t v19 = 5;
      }
      else {
        uint64_t v19 = 4;
      }
      BOOL v20 = *(unsigned char *)(v11 + 13) == 0;
      uint64_t v21 = 152;
      if (v20) {
        uint64_t v21 = 160;
      }
      uint64_t v22 = *(void *)(a1 + v21);
      uint64_t v23 = *(void *)(a1 + 344);
      long long v47 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v48, (llvm::IRBuilderBase *)(a1 + 8));
      int v49 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v23 + 104))(v23, &v47, v19, v22, *a2, 1, *(unsigned __int8 *)(*(void *)(v9 + 8 * v10) + 12));
      if (v48) {
        goto LABEL_54;
      }
      return v18;
    case 2:
      if (a4 > 2)
      {
        unsigned int v26 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v26 == 26161)
        {
          int v27 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v26 < 0x6631)
        {
          int v27 = -1;
        }
        else
        {
          int v27 = 1;
        }
        if (v27) {
          unint64_t v15 = (uint64_t *)(a1 + 160);
        }
        else {
          unint64_t v15 = (uint64_t *)(a1 + 152);
        }
      }
      else
      {
        unint64_t v15 = (uint64_t *)(a1 + 160);
      }
      uint64_t v32 = *v15;
      uint64_t v33 = *(void *)(a1 + 344);
      long long v44 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v45, (llvm::IRBuilderBase *)(a1 + 8));
      int v46 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t, void, uint64_t, void))(*(void *)v33 + 104))(v33, &v44, 0, v32, *a2, 1, 0);
      if (!v45) {
        return v18;
      }
      goto LABEL_54;
    case 3:
      if (a4 > 2)
      {
        unsigned int v28 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v28 == 26161)
        {
          int v29 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v28 < 0x6631)
        {
          int v29 = -1;
        }
        else
        {
          int v29 = 1;
        }
        if (v29) {
          uint64_t v16 = (uint64_t *)(a1 + 160);
        }
        else {
          uint64_t v16 = (uint64_t *)(a1 + 152);
        }
      }
      else
      {
        uint64_t v16 = (uint64_t *)(a1 + 160);
      }
      uint64_t v34 = *v16;
      uint64_t v35 = *(void *)(a1 + 344);
      long long v41 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v42, (llvm::IRBuilderBase *)(a1 + 8));
      int v43 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v35 + 104))(v35, &v41, 7, v34, *a2, 1, 0);
      if (!v42) {
        return v18;
      }
      goto LABEL_54;
    case 4:
      if (a4 > 2)
      {
        unsigned int v30 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v30 == 26161)
        {
          int v31 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v30 < 0x6631)
        {
          int v31 = -1;
        }
        else
        {
          int v31 = 1;
        }
        if (v31) {
          size_t v17 = (uint64_t *)(a1 + 160);
        }
        else {
          size_t v17 = (uint64_t *)(a1 + 152);
        }
      }
      else
      {
        size_t v17 = (uint64_t *)(a1 + 160);
      }
      uint64_t v36 = *v17;
      uint64_t v37 = *(void *)(a1 + 344);
      long long v38 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v39, (llvm::IRBuilderBase *)(a1 + 8));
      int v40 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v37 + 104))(v37, &v38, 8, v36, *a2, 1, 0);
      if (v39) {
LABEL_54:
      }
        llvm::MetadataTracking::untrack();
      return v18;
    case 5:
      uint64_t v24 = *a2;
      char v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)a1 + 104);
      return v25(a1, v24, a3, a4);
    default:
      return 0;
  }
}

uint64_t sub_22B1FC254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 72))(*(void *)(a1 + 72));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      sub_22B1D6EE0((uint64_t *)a1, v6, a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

uint64_t sub_22B1FC330(uint64_t a1, llvm::Type ****a2, unsigned __int8 *a3)
{
  int v4 = *a3;
  if (v4 == 117)
  {
    uint64_t v10 = a2[2];
    uint64_t v6 = (llvm::Type ***)sub_22B243278(a1, *a2, a2[1], 34);
    uint64_t v7 = a1;
    uint64_t v8 = v10;
    uint64_t v9 = 36;
    goto LABEL_5;
  }
  if (v4 == 115)
  {
    uint64_t v5 = a2[2];
    uint64_t v6 = (llvm::Type ***)sub_22B243278(a1, *a2, a2[1], 38);
    uint64_t v7 = a1;
    uint64_t v8 = v5;
    uint64_t v9 = 40;
LABEL_5:
    return sub_22B243278(v7, v6, v8, v9);
  }
  uint64_t v12 = *a2;
  char v13 = a2[1];
  size_t v14 = a2[2];
  uint64_t v15 = *(void *)(a1 + 344);
  long long v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (llvm::IRBuilderBase *)(a1 + 8));
  int v20 = *(_DWORD *)(a1 + 104);
  uint64_t v16 = *v12;
  if (((*v12)[1] & 0xFE) == 0x12) {
    uint64_t v16 = *(llvm::Type ***)v16[2];
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type ***, llvm::Type ***, llvm::Type ***, BOOL))(*(void *)v15 + 72))(v15, &v18, v12, v13, v14, v16 == *(llvm::Type ***)(a1 + 160));
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  return v17;
}

uint64_t sub_22B1FC4A0(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a1[23];
  BOOL v6 = *a2 == a1[22] || v4 == v5;
  uint64_t v7 = *a2;
  if (v6)
  {
    if (*(unsigned char *)(*(void *)(a1[43] + 784) + 42)) {
      uint64_t v7 = a1[24];
    }
    else {
      uint64_t v7 = a1[23];
    }
  }
  if (v7 == v5) {
    uint64_t v8 = "llvm.ctpop.i16";
  }
  else {
    uint64_t v8 = "llvm.ctpop.i32";
  }
  uint64_t v9 = sub_22B1DB218((uint64_t)a1, (uint64_t)v8, 14, v4, v4);
  uint64_t v10 = (uint64_t)(a1 + 1);
  __int16 v16 = 257;
  uint64_t v17 = sub_22B1D7384(v10, 39, (uint64_t)a2, v7, (uint64_t)v15);
  __int16 v14 = 257;
  uint64_t v11 = sub_22B1D4034(v10, *(void *)(v9 + 24), v9, (uint64_t)&v17, 1, (uint64_t)v13);
  __int16 v16 = 257;
  return sub_22B1D7384(v10, 38, (uint64_t)v11, v4, (uint64_t)v15);
}

uint64_t sub_22B1FC5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantInt::get();
  a1 += 8;
  __int16 v9 = 257;
  uint64_t v5 = sub_22B1D6C68(a1, v4, a2, (uint64_t)v8);
  v7[16] = 257;
  return sub_22B1FC254(a1, v5, v4, (uint64_t)v7);
}

uint64_t sub_22B1FC624(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *(uint64_t **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = **(void **)a2;
  uint64_t v8 = *(llvm::Type ****)(a2 + 16);
  __int16 v9 = (uint64_t *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 192);
  __int16 v29 = 257;
  uint64_t v11 = sub_22B1D7384(a1 + 8, 39, (uint64_t)v5, v10, (uint64_t)v28);
  __int16 v29 = 257;
  uint64_t v12 = sub_22B1D7B18((uint64_t)v9, v11, v6, (uint64_t)v28);
  uint64_t v13 = sub_22B1FC5A4(a1, (uint64_t)v8);
  __int16 v27 = 257;
  uint64_t v14 = sub_22B1D6F68((uint64_t)v9, v12, v13, (uint64_t)v26);
  if (*a3 == 115)
  {
    uint64_t v15 = llvm::ConstantInt::get();
    __int16 v29 = 257;
    uint64_t v16 = sub_22B1FC254((uint64_t)v9, (uint64_t)v8, v15, (uint64_t)v28);
    __int16 v27 = 257;
    uint64_t v17 = sub_22B1D6C68((uint64_t)v9, v15, v16, (uint64_t)v26);
    __int16 v29 = 257;
    long long v18 = (llvm::Type ***)sub_22B1D6F68((uint64_t)v9, v14, v17, (uint64_t)v28);
    uint64_t v19 = llvm::ConstantInt::get();
    __int16 v27 = 257;
    sub_22B1D4340(v9, 33, v18, v19, (uint64_t)v26);
    uint64_t AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + 192), v20);
    __int16 v29 = 257;
    uint64_t v22 = sub_22B1D6C68((uint64_t)v9, AllOnesValue, (uint64_t)v8, (uint64_t)v28);
    __int16 v27 = 257;
    sub_22B1D7014((uint64_t)v9, v14, v22, (uint64_t)v26);
    __int16 v29 = 257;
    llvm::IRBuilderBase::CreateSelect();
  }
  uint64_t v23 = llvm::ConstantInt::get();
  __int16 v29 = 257;
  sub_22B1D4340(v9, 32, v8, v23, (uint64_t)v28);
  __int16 v27 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v29 = 257;
  return sub_22B1D7384((uint64_t)v9, 38, Select, v7, (uint64_t)v28);
}

uint64_t sub_22B1FC83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = **(void **)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(llvm::Type ****)(a2 + 24);
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v9 = sub_22B1FC5A4(a1, (uint64_t)v6);
  __int16 v25 = 257;
  uint64_t v10 = sub_22B1D6C68((uint64_t)v8, v9, v7, (uint64_t)v24);
  uint64_t v11 = *(void *)(a1 + 192);
  __int16 v25 = 257;
  uint64_t v12 = sub_22B1D7384((uint64_t)v8, 39, (uint64_t)v3, v11, (uint64_t)v24);
  uint64_t v13 = *(void *)(a1 + 192);
  __int16 v25 = 257;
  uint64_t v14 = sub_22B1D7384((uint64_t)v8, 39, v4, v13, (uint64_t)v24);
  __int16 v25 = 257;
  uint64_t v15 = sub_22B1FC9E0((uint64_t)v8, v10, (uint64_t)v24);
  __int16 v23 = 257;
  uint64_t v16 = sub_22B1D6F68((uint64_t)v8, v12, v15, (uint64_t)v22);
  __int16 v25 = 257;
  uint64_t v17 = sub_22B1D6C68((uint64_t)v8, v14, v7, (uint64_t)v24);
  __int16 v23 = 257;
  uint64_t v18 = sub_22B1D6F68((uint64_t)v8, v17, v10, (uint64_t)v22);
  __int16 v25 = 257;
  sub_22B1D7014((uint64_t)v8, v16, v18, (uint64_t)v24);
  uint64_t v19 = llvm::ConstantInt::get();
  __int16 v25 = 257;
  sub_22B1D4340(v8, 32, v6, v19, (uint64_t)v24);
  __int16 v23 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v25 = 257;
  return sub_22B1D7384((uint64_t)v8, 38, Select, v5, (uint64_t)v24);
}

uint64_t sub_22B1FC9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    uint64_t Not = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 208))(*(void *)(a1 + 72), a2);
    if (Not) {
      BOOL v6 = *(unsigned __int8 *)(Not + 16) >= 0x1Cu;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      sub_22B1D6EE0((uint64_t *)a1, Not, a3);
    }
  }
  else
  {
    uint64_t Not = llvm::BinaryOperator::CreateNot();
    sub_22B1D6EE0((uint64_t *)a1, Not, a3);
  }
  return Not;
}

uint64_t sub_22B1FCAAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  sub_22B1D7BF0(__p, *(char **)(*(void *)(a1 + 344) + 1088));
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v6 = v16;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = sub_22B1DB218(a1, (uint64_t)v5, v6, *(void *)(a1 + 192), *(void *)(a1 + 192));
  uint64_t v8 = *(void *)(a1 + 192);
  __int16 v14 = 257;
  uint64_t v17 = sub_22B1D7384(a1 + 8, 39, (uint64_t)a2, v8, (uint64_t)v13);
  __int16 v14 = 257;
  uint64_t v9 = sub_22B1D4034(a1 + 8, *(void *)(v7 + 24), v7, (uint64_t)&v17, 1, (uint64_t)v13);
  uint64_t v17 = (uint64_t)v9;
  uint64_t v10 = llvm::ConstantInt::get();
  __int16 v14 = 257;
  uint64_t v17 = sub_22B1D7B18(a1 + 8, (uint64_t)v9, v10, (uint64_t)v13);
  __int16 v14 = 257;
  uint64_t v11 = sub_22B1D7384(a1 + 8, 38, v17, v4, (uint64_t)v13);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

uint64_t sub_22B1FCBE4(uint64_t a1, llvm::Constant *a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  memset(v15, 0, sizeof(v15));
  unsigned int v5 = sub_22B24295C(a1, a2, (llvm::Constant **)v15);
  uint64_t v6 = *(void *)&v15[0];
  if (v5 >= 2)
  {
    uint64_t v7 = a1 + 8;
    uint64_t v8 = v5 - 1;
    uint64_t v9 = (uint64_t *)v15 + 1;
    do
    {
      uint64_t v10 = *v9;
      __int16 v14 = 257;
      if (a3) {
        uint64_t v11 = sub_22B1D7014(v7, v6, v10, (uint64_t)v13);
      }
      else {
        uint64_t v11 = sub_22B1D6F68(v7, v6, v10, (uint64_t)v13);
      }
      uint64_t v6 = v11;
      ++v9;
      --v8;
    }
    while (v8);
  }
  return v6;
}

uint64_t sub_22B1FCCC0()
{
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B1FCDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = llvm::ConstantFP::get();
  a1 += 8;
  __int16 v15 = 257;
  uint64_t v9 = sub_22B1DD690(a1, v8, a4, (uint64_t)v14);
  v13[16] = 257;
  uint64_t v10 = sub_22B1DB138(a1, a2, v9, (uint64_t)v13);
  __int16 v15 = 257;
  uint64_t v11 = sub_22B1DB138(a1, a3, a4, (uint64_t)v14);
  __int16 v15 = 257;
  return sub_22B1DD390(a1, v10, v11, (uint64_t)v14);
}

uint64_t sub_22B1FCE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    return sub_22B243188(a1, a2, a3);
  }
  else
  {
    __int16 v5 = 257;
    return sub_22B1DB138(a1 + 8, a2, a3, (uint64_t)v4);
  }
}

uint64_t sub_22B1FCEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(**(void **)(a1 + 704) - 24) + *(void *)(a1 + 704);
  uint64_t v5 = v4 + 8;
  int v6 = *(_DWORD *)(v4 + 104);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v10 = *(_DWORD *)(a1 + 104);
  sub_22B1D3C74((uint64_t)&v8, v5);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 704) + 24))(*(void *)(a1 + 704), a2);
  *(_DWORD *)(*(void *)(a1 + 704) + *(void *)(**(void **)(a1 + 704) - 24) + 104) = v6;
  return result;
}

uint64_t sub_22B1FCFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(**(void **)(a1 + 704) - 24) + *(void *)(a1 + 704);
  uint64_t v5 = v4 + 8;
  int v6 = *(_DWORD *)(v4 + 104);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  sub_22B1D3C74((uint64_t)&v10, v5);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = *(uint64_t **)(a1 + 704);
  uint64_t v8 = *v7;
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 104) = v6;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 32))(v7, a2);
}

uint64_t sub_22B1FD0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (uint64_t *)sub_22B1FCEDC(a1, a2);
  int v6 = sub_22B1F7D34(a1, v5);
  uint64_t v7 = (uint64_t *)sub_22B1FCFC8(a1, a2);
  uint64_t v8 = sub_22B1F7D34(a1, v7);
  __int16 v11 = 257;
  return sub_22B1DD390(v4, (uint64_t)v6, (uint64_t)v8, (uint64_t)v10);
}

uint64_t sub_22B1FD148(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 344);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = 184;
  if (*a2 == *(void *)(a1 + 160)) {
    uint64_t v7 = 192;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, void))(*(void *)v6 + 136))(v6, &v10, a2, a3, *(void *)(a1 + v7));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t sub_22B1FD218(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 344);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = 152;
  if (*a2 == *(void *)(a1 + 192)) {
    uint64_t v7 = 160;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, void))(*(void *)v6 + 144))(v6, &v10, a2, a3, *(void *)(a1 + v7));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t sub_22B1FD2E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  sub_22B1FD514((uint64_t)a1, *(uint64_t **)a2, v5);
  sub_22B1FD5F0((uint64_t)a1, v4, v5);
  __int16 v15 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  uint64_t Select = (void *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v7 = (uint64_t *)sub_22B1FD514((uint64_t)a1, *(uint64_t **)a2, *(void *)(a2 + 8));
  sub_22B1FD514((uint64_t)a1, v7, *(void *)(a2 + 16));
  if (*Select == a1[20]) {
    uint64_t v8 = a1[24];
  }
  else {
    uint64_t v8 = a1[23];
  }
  __int16 v15 = 257;
  uint64_t v9 = sub_22B1D7384((uint64_t)(a1 + 1), 49, (uint64_t)Select, v8, (uint64_t)v14);
  uint64_t v10 = llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t v11 = (llvm::Type ***)sub_22B1D6F68((uint64_t)(a1 + 1), v9, v10, (uint64_t)v14);
  uint64_t v12 = llvm::ConstantInt::get();
  __int16 v15 = 257;
  sub_22B1D4340(a1 + 1, 34, v11, v12, (uint64_t)v14);
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B1FD514(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 344);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = **(void **)(v7 + 16);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, uint64_t, BOOL))(*(void *)v6 + 48))(v6, &v10, a2, a3, v7 == *(void *)(a1 + 160));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t sub_22B1FD5F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 344);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = **(void **)(v7 + 16);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, uint64_t, BOOL))(*(void *)v6 + 56))(v6, &v10, a2, a3, v7 == *(void *)(a1 + 160));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t sub_22B1FD6CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_22B1F9648(a1, *a2, v4);
  sub_22B1F9754(a1, v3, v4);
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B1FD7C4(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(*(void *)a2 + 32);
  if (a2[16] == 74)
  {
    uint64_t v5 = *((void *)a2 - 4);
    int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5 && v6 == 91)
    {
      int v7 = *(unsigned __int8 *)(*(void *)(v5 - 64) + 16);
      if (v7 == 73) {
        uint64_t v8 = *(void *)(v5 - 64);
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(unsigned __int8 *)(*(void *)(v5 - 32) + 16);
      if (v9 == 73) {
        uint64_t v10 = *(void *)(v5 - 32);
      }
      else {
        uint64_t v10 = 0;
      }
      if (v8 | v10
        && ((v7 - 11) < 2 || *(void *)(**(void **)(v8 - 32) + 24) == *(void *)(a1 + 160))
        && ((v9 - 11) <= 1 || *(void *)(**(void **)(v10 - 32) + 24) == *(void *)(a1 + 160)))
      {
        llvm::FixedVectorType::get();
        if (v8)
        {
          uint64_t v11 = *(void *)(v8 - 32);
          if (v10)
          {
LABEL_23:
            uint64_t v12 = *(void *)(v10 - 32);
LABEL_26:
            uint64_t v13 = *(void *)(v5 + 64);
            uint64_t v14 = *(unsigned int *)(v5 + 72);
            __int16 v22 = 257;
            uint64_t v2 = sub_22B1D70C0(a1 + 8, v11, v12, v13, v14, (uint64_t)v21);
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v11 = llvm::UndefValue::get();
          if (v10) {
            goto LABEL_23;
          }
        }
        uint64_t v12 = llvm::UndefValue::get();
        goto LABEL_26;
      }
    }
    else if (v5 && v6 == 73 && *(void *)(**(void **)(v5 - 32) + 24) == *(void *)(a1 + 160))
    {
      uint64_t v2 = *(void *)(v5 - 32);
    }
  }
LABEL_27:
  uint64_t v27 = llvm::ConstantInt::get();
  uint64_t v28 = llvm::ConstantInt::get();
  uint64_t v29 = llvm::ConstantInt::get();
  uint64_t v15 = sub_22B2423A4(a1, v2, v4 - 1, 1);
  uint64_t v16 = llvm::ConstantVector::get();
  __int16 v22 = 257;
  uint64_t v17 = sub_22B1D69A8(a1 + 8, v2, v2, v16, (uint64_t)v21);
  __int16 v22 = 257;
  uint64_t v18 = sub_22B1F860C(a1 + 8, v15, v17, (uint64_t)v21);
  uint64_t v23 = llvm::ConstantInt::get();
  uint64_t v24 = llvm::ConstantInt::get();
  uint64_t v25 = llvm::ConstantInt::get();
  uint64_t v26 = llvm::ConstantInt::get();
  uint64_t v19 = llvm::ConstantVector::get();
  __int16 v22 = 257;
  return sub_22B1D69A8(a1 + 8, v18, v17, v19, (uint64_t)v21);
}

uint64_t sub_22B1FDA80()
{
  return 0;
}

uint64_t sub_22B1FDA88()
{
  return llvm::ConstantInt::get();
}

uint64_t sub_22B1FDAEC()
{
  return llvm::ConstantInt::get();
}

void sub_22B1FDB50(uint64_t a1, llvm::Instruction *a2)
{
  if (MGGetBoolAnswer()
    && (uint64_t v3 = (const char *)sub_22B1DEEE4("AGC_ENABLE_IS_UNIFORM_STRIPPING")) != 0
    && *v3 != 48
    && atoi(v3))
  {
    Function = (llvm::Function *)llvm::Module::getFunction();
    uint64_t v5 = *((void *)a2 + 1);
    if (v5)
    {
      do
      {
        uint64_t v6 = *(void *)(v5 + 8);
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v5 + 24));
        uint64_t v5 = v6;
      }
      while (v6);
    }
    llvm::Instruction::eraseFromParent(a2);
    if (!*((void *)Function + 1))
    {
      llvm::Function::eraseFromParent(Function);
    }
  }
  else
  {
    int v7 = (llvm::Value *)*((void *)a2 - 4);
    uint64_t v8 = *((void *)v7 + 3);
    uint64_t Name = llvm::Value::getName(v7);
    if (Name)
    {
      if (v10 >= 0xE) {
        uint64_t v11 = 14;
      }
      else {
        uint64_t v11 = v10;
      }
      sub_22B1E2118(&__dst, (void *)(Name + v11), v10 - v11);
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    uint64_t v12 = std::string::insert(&__dst, 0, "llvm.agx.is.uniform");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    llvm::Module::getOrInsertFunction();
    *((void *)a2 + 9) = v8;
    sub_22B1FDCE0((uint64_t)a2, v14);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_22B1FDCE0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v3 = *(void *)(result - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 16);
    }
  }
  void *v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    int v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 24) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 24;
    }
    *(void *)(result - 16) = v4;
    *int v4 = v2;
  }
  return result;
}

uint64_t sub_22B1FDD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  __int16 v5 = 257;
  return sub_22B1D7384(a1 + 8, 47, a2, v2, (uint64_t)v4);
}

uint64_t *sub_22B1FDD6C(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x230F426A0](a3 + 33, 8);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 32;
  if (a3) {
    memcpy((void *)(v10 + 32), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)uint64_t v11 = a3;
  *(_DWORD *)(v11 + 24) = 0;
  *(_WORD *)(v11 + 28) = 0;
  uint64_t *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22B1FDE64(uint64_t a1, llvm::Type ****a2, unsigned char *a3)
{
  int v4 = *a2;
  __int16 v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = *a2;
  if (*a3 == 115)
  {
    uint64_t v9 = sub_22B243278(a1, v8, v5, 40);
    uint64_t v10 = sub_22B243278(a1, v4, v5, 38);
    __int16 v18 = 257;
    sub_22B1D4340(v7, 41, v6, v9, (uint64_t)v17);
    __int16 v16 = 257;
    uint64_t v11 = v7;
    uint64_t v12 = 39;
  }
  else
  {
    uint64_t v13 = sub_22B243278(a1, v8, v5, 36);
    uint64_t v10 = sub_22B243278(a1, v4, v5, 34);
    __int16 v18 = 257;
    sub_22B1D4340(v7, 37, v6, v13, (uint64_t)v17);
    __int16 v16 = 257;
    uint64_t v11 = v7;
    uint64_t v12 = 35;
  }
  sub_22B1D4340(v11, v12, v6, v10, (uint64_t)v15);
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B1FDFBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_22B1F9754(a1, *a2, a2[1]);
  uint64_t v5 = a2[2];
  return sub_22B1F9754(a1, v4, v5);
}

uint64_t sub_22B1FE008(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)sub_22B1FD5F0(a1, *(uint64_t **)a2, *(void *)(a2 + 8));
  uint64_t v5 = *(void *)(a2 + 16);
  return sub_22B1FD5F0(a1, v4, v5);
}

uint64_t sub_22B1FE054(uint64_t a1, llvm::Type ****a2, unsigned char *a3)
{
  uint64_t v4 = a2[2];
  if (*a3 == 115) {
    uint64_t v5 = 38;
  }
  else {
    uint64_t v5 = 34;
  }
  uint64_t v6 = (llvm::Type ***)sub_22B243278(a1, *a2, a2[1], v5);
  return sub_22B243278(a1, v6, v4, v5);
}

uint64_t sub_22B1FE0C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_22B1F9648(a1, *a2, a2[1]);
  uint64_t v5 = a2[2];
  return sub_22B1F9648(a1, v4, v5);
}

uint64_t sub_22B1FE110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)sub_22B1FD514(a1, *(uint64_t **)a2, *(void *)(a2 + 8));
  uint64_t v5 = *(void *)(a2 + 16);
  return sub_22B1FD514(a1, v4, v5);
}

uint64_t sub_22B1FE15C(uint64_t a1, llvm::Type ****a2, unsigned char *a3)
{
  uint64_t v4 = a2[2];
  if (*a3 == 115) {
    uint64_t v5 = 40;
  }
  else {
    uint64_t v5 = 36;
  }
  uint64_t v6 = (llvm::Type ***)sub_22B243278(a1, *a2, a2[1], v5);
  return sub_22B243278(a1, v6, v4, v5);
}

uint64_t sub_22B1FE1CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  __int16 v11 = 257;
  uint64_t v6 = sub_22B1D7468(a1 + 8, v4, v5, (uint64_t)v10);
  uint64_t v7 = a2[2];
  v9[16] = 257;
  return sub_22B1D6A70(v3, v6, v7, (uint64_t)v9);
}

uint64_t sub_22B1FE234(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  __int16 v6 = 257;
  return sub_22B1D7468(a1 + 8, v3, v2, (uint64_t)v5);
}

uint64_t sub_22B1FE26C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 368))();
}

uint64_t sub_22B1FE298(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t sub_22B1FE2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v7 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (llvm::IRBuilderBase *)(a1 + 8));
  int v9 = *(_DWORD *)(a1 + 104);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v4 + 40))(v4, &v7, a2, 0);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

uint64_t sub_22B1FE364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 344);
  long long v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(a1 + 8));
  int v13 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 72))(v8, &v11, a2, a3, a4, 0);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t sub_22B1FE424(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v10 = *(_DWORD *)(a1 + 104);
  uint64_t v5 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v5 = **(void **)(v5 + 16);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, BOOL))(*(void *)v4 + 40))(v4, &v8, a2, v5 == *(void *)(a1 + 160));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t sub_22B1FE4F0(uint64_t a1, llvm::Constant *a2)
{
  return sub_22B1FCBE4(a1, a2, 0);
}

uint64_t sub_22B1FE4F8(uint64_t a1, llvm::Constant *a2)
{
  return sub_22B1FCBE4(a1, a2, 1);
}

uint64_t sub_22B1FE500(uint64_t a1, llvm::Type ****a2, unsigned char *a3)
{
  if (*a3 == 115) {
    uint64_t v3 = 40;
  }
  else {
    uint64_t v3 = 36;
  }
  return sub_22B243278(a1, *a2, a2[1], v3);
}

uint64_t sub_22B1FE520(uint64_t a1, llvm::Type ****a2, unsigned char *a3)
{
  if (*a3 == 115) {
    uint64_t v3 = 38;
  }
  else {
    uint64_t v3 = 34;
  }
  return sub_22B243278(a1, *a2, a2[1], v3);
}

llvm::Value *sub_22B1FE540(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = a2[2];
  int v7 = *a3;
  long long v8 = **a2;
  uint64_t v9 = *(const char ***)(a1 + 344);
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v8);
  if (v7 == 115)
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        long long v11 = v9 + 130;
        break;
      case 32:
        long long v11 = v9 + 132;
        break;
      case 16:
        long long v11 = v9 + 131;
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        long long v11 = v9 + 133;
        break;
      case 32:
        long long v11 = v9 + 135;
        break;
      case 16:
        long long v11 = v9 + 134;
        break;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = *v11;
  if (*v11)
  {
    size_t v13 = strlen(*v11);
    uint64_t v14 = sub_22B1D7EC8(a1, (uint64_t)v12, v13, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8);
    v36[0] = v5;
    v36[1] = v4;
    v36[2] = v6;
    __int16 v35 = 257;
    return sub_22B1D4034(a1 + 8, *(void *)(v14 + 24), v14, (uint64_t)v36, 3, (uint64_t)v34);
  }
LABEL_16:
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v31 = 0;
  sub_22B212078(*(void *)(a1 + 72), v8, v7 == 115, &v33, &v32, (uint64_t *)&v31);
  __int16 v16 = (uint64_t *)(a1 + 8);
  std::string::size_type v17 = v31;
  __int16 v35 = 257;
  if (v7 == 115)
  {
    uint64_t v18 = sub_22B2121B8((uint64_t)v16, v5, v31, (uint64_t)v34);
    __int16 v35 = 257;
    uint64_t v19 = sub_22B2121B8((uint64_t)v16, v4, v17, (uint64_t)v34);
    __int16 v35 = 257;
    uint64_t v20 = sub_22B2121B8((uint64_t)v16, v6, v17, (uint64_t)v34);
    __int16 v35 = 257;
    uint64_t v21 = sub_22B1D7468((uint64_t)v16, v18, v19, (uint64_t)v34);
    __int16 v35 = 257;
    __int16 v22 = (llvm::Type ***)sub_22B1D6A70((uint64_t)v16, v21, v20, (uint64_t)v34);
    __int16 v35 = 257;
    sub_22B1D4340(v16, 40, v22, v33, (uint64_t)v34);
    __int16 v37 = 257;
    uint64_t Select = (llvm::Type ***)llvm::IRBuilderBase::CreateSelect();
    __int16 v35 = 257;
    sub_22B1D4340(v16, 38, Select, v32, (uint64_t)v34);
    __int16 v37 = 257;
    uint64_t v24 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    __int16 v35 = 257;
    return (llvm::Value *)sub_22B2121B8((uint64_t)v16, v24, v8, (uint64_t)v34);
  }
  else
  {
    uint64_t v25 = sub_22B1E375C((uint64_t)v16, v5, v31, (uint64_t)v34);
    __int16 v35 = 257;
    uint64_t v26 = sub_22B1E375C((uint64_t)v16, v4, v17, (uint64_t)v34);
    __int16 v35 = 257;
    uint64_t v27 = sub_22B1E375C((uint64_t)v16, v6, v17, (uint64_t)v34);
    __int16 v35 = 257;
    uint64_t v28 = sub_22B1D7468((uint64_t)v16, v25, v26, (uint64_t)v34);
    __int16 v35 = 257;
    uint64_t v29 = (llvm::Type ***)sub_22B1D6A70((uint64_t)v16, v28, v27, (uint64_t)v34);
    __int16 v35 = 257;
    sub_22B1D4340(v16, 34, v29, v32, (uint64_t)v34);
    __int16 v37 = 257;
    uint64_t v30 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    __int16 v35 = 257;
    return (llvm::Value *)sub_22B1E375C((uint64_t)v16, v30, v8, (uint64_t)v34);
  }
}

llvm::Value *sub_22B1FE8D4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(llvm::Type ***)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *a3;
  int v7 = **(llvm::Type ***)a2;
  long long v8 = *(const char ***)(a1 + 344);
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v7);
  if (v6 == 115)
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        int v10 = v8 + 124;
        break;
      case 32:
        int v10 = v8 + 126;
        break;
      case 16:
        int v10 = v8 + 125;
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        int v10 = v8 + 127;
        break;
      case 32:
        int v10 = v8 + 129;
        break;
      case 16:
        int v10 = v8 + 128;
        break;
      default:
        goto LABEL_16;
    }
  }
  long long v11 = *v10;
  if (*v10)
  {
    size_t v12 = strlen(*v10);
    uint64_t v13 = sub_22B1D7FA8(a1, (uint64_t)v11, v12, (uint64_t)v7, (uint64_t)v7, (uint64_t)v7);
    v37[0] = v4;
    v37[1] = v5;
    __int16 v36 = 257;
    return sub_22B1D4034(a1 + 8, *(void *)(v13 + 24), v13, (uint64_t)v37, 2, (uint64_t)v35);
  }
LABEL_16:
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  sub_22B212078(*(void *)(a1 + 72), v7, v6 == 115, &v34, &v33, &v32);
  uint64_t v15 = (uint64_t *)(a1 + 8);
  __int16 v36 = 257;
  if (v6 == 115)
  {
    uint64_t v16 = sub_22B1FC254((uint64_t)v15, (uint64_t)v4, v5, (uint64_t)v35);
    __int16 v36 = 257;
    uint64_t v17 = sub_22B212258(v15, (uint64_t)v4, v5, (uint64_t)v35);
    __int16 v38 = 257;
    uint64_t v18 = sub_22B212258(v15, v5, v16, (uint64_t)v37);
    __int16 v31 = 257;
    uint64_t v19 = sub_22B1FC9E0((uint64_t)v15, v18, (uint64_t)v30);
    __int16 v29 = 257;
    uint64_t v20 = (llvm::Type ***)sub_22B1D6F68((uint64_t)v15, v17, v19, (uint64_t)v28);
    uint64_t v21 = llvm::ConstantInt::get();
    __int16 v27 = 257;
    sub_22B1D4340(v15, 40, v20, v21, (uint64_t)v26);
    uint64_t v22 = llvm::ConstantInt::get();
    __int16 v36 = 257;
    sub_22B1D4340(v15, 39, (llvm::Type ***)v4, v22, (uint64_t)v35);
    uint64_t v23 = (llvm::Type **)*v4;
    __int16 v36 = 257;
    sub_22B1D7384((uint64_t)v15, 38, v33, (uint64_t)v23, (uint64_t)v35);
    uint64_t v24 = (llvm::Type **)*v4;
    __int16 v38 = 257;
    sub_22B1D7384((uint64_t)v15, 38, v34, (uint64_t)v24, (uint64_t)v37);
    __int16 v31 = 257;
    llvm::IRBuilderBase::CreateSelect();
    __int16 v36 = 257;
  }
  else
  {
    uint64_t v25 = (llvm::Type ***)sub_22B1FC254((uint64_t)v15, (uint64_t)v4, v5, (uint64_t)v35);
    __int16 v36 = 257;
    sub_22B1D4340(v15, 34, v25, (uint64_t)v4, (uint64_t)v35);
    llvm::ConstantInt::get();
    __int16 v38 = 257;
  }
  return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_22B1FEC14(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int v6 = *a3;
  int v7 = **a2;
  long long v8 = *(const char ***)(a1 + 344);
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v7);
  if (v6 == 115)
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        int v10 = v8 + 118;
        break;
      case 32:
        int v10 = v8 + 120;
        break;
      case 16:
        int v10 = v8 + 119;
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    switch(ScalarSizeInBits)
    {
      case 8:
        int v10 = v8 + 121;
        break;
      case 32:
        int v10 = v8 + 123;
        break;
      case 16:
        int v10 = v8 + 122;
        break;
      default:
        goto LABEL_16;
    }
  }
  long long v11 = *v10;
  if (*v10)
  {
    size_t v12 = strlen(*v10);
    uint64_t v13 = sub_22B1D7FA8(a1, (uint64_t)v11, v12, (uint64_t)v7, (uint64_t)v7, (uint64_t)v7);
    v29[0] = v4;
    v29[1] = v5;
    __int16 v28 = 257;
    return sub_22B1D4034(a1 + 8, *(void *)(v13 + 24), v13, (uint64_t)v29, 2, (uint64_t)v27);
  }
LABEL_16:
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  sub_22B212078(*(void *)(a1 + 72), v7, v6 == 115, &v26, &v25, (uint64_t *)&v24);
  uint64_t v15 = (uint64_t *)(a1 + 8);
  if (v6 == 115)
  {
    uint64_t v16 = v24;
    __int16 v28 = 257;
    uint64_t v17 = sub_22B2121B8((uint64_t)v15, v4, v24, (uint64_t)v27);
    __int16 v28 = 257;
    uint64_t v18 = sub_22B2121B8((uint64_t)v15, v5, v16, (uint64_t)v27);
    __int16 v28 = 257;
    uint64_t v19 = (llvm::Type ***)sub_22B1D6A70((uint64_t)v15, v17, v18, (uint64_t)v27);
    __int16 v28 = 257;
    sub_22B1D4340(v15, 38, v19, (uint64_t)v25, (uint64_t)v27);
    __int16 v30 = 257;
    sub_22B1D4340(v15, 40, v19, v26, (uint64_t)v29);
    llvm::IRBuilderBase::CreateSelect();
    uint64_t Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    uint64_t v21 = *v4;
    __int16 v28 = 257;
    return (llvm::Value *)sub_22B2121B8((uint64_t)v15, Select, v21, (uint64_t)v27);
  }
  else
  {
    __int16 v28 = 257;
    uint64_t v22 = (llvm::Type ***)sub_22B1D6A70((uint64_t)v15, (uint64_t)v4, (uint64_t)v5, (uint64_t)v27);
    __int16 v28 = 257;
    sub_22B1D4340(v15, 36, v22, (uint64_t)v4, (uint64_t)v27);
    uint64_t v23 = *v4;
    __int16 v30 = 257;
    sub_22B1E375C((uint64_t)v15, v25, v23, (uint64_t)v29);
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t sub_22B1FEEF8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(llvm::Type ****)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1 + 8;
  if (*a3 == 117)
  {
    __int16 v12 = 257;
    int v6 = (uint64_t *)(a1 + 8);
    uint64_t v7 = 36;
  }
  else
  {
    __int16 v12 = 257;
    int v6 = (uint64_t *)(a1 + 8);
    uint64_t v7 = 40;
  }
  sub_22B1D4340(v6, v7, v3, v4, (uint64_t)v11);
  __int16 v12 = 257;
  sub_22B1FC254(v5, v4, (uint64_t)v3, (uint64_t)v11);
  __int16 v10 = 257;
  sub_22B1FC254(v5, (uint64_t)v3, v4, (uint64_t)v9);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *sub_22B1FEFCC(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v3 = *a2;
  if (*a3 == 117) {
    return (llvm::Value *)v3;
  }
  uint64_t v5 = *(llvm::Type **)v3;
  if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
    uint64_t v5 = **(llvm::Type ***)(*(void *)v3 + 16);
  }
  int v6 = *(const char ***)(a1 + 344);
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v5);
  switch(ScalarSizeInBits)
  {
    case 8:
      long long v8 = v6 + 114;
      break;
    case 32:
      long long v8 = v6 + 116;
      break;
    case 16:
      long long v8 = v6 + 115;
      break;
    default:
LABEL_14:
      uint64_t v13 = llvm::ConstantInt::get();
      uint64_t v14 = (uint64_t *)(a1 + 8);
      __int16 v20 = 257;
      sub_22B1D4340((uint64_t *)(a1 + 8), 40, (llvm::Type ***)v3, v13, (uint64_t)v19);
      v18[16] = 257;
      if (*(unsigned __int8 *)(v3 + 16) <= 0x14u)
      {
        uint64_t v16 = (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 80) + 192))(*(void *)(a1 + 80), v3, 0, 0);
        if (v16) {
          BOOL v17 = *(unsigned __int8 *)(v16 + 16) >= 0x1Cu;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17) {
          sub_22B1D6EE0(v14, v16, (uint64_t)v18);
        }
      }
      else
      {
        __int16 v20 = 257;
        uint64_t Neg = llvm::BinaryOperator::CreateNeg();
        sub_22B1D6EE0(v14, Neg, (uint64_t)v18);
      }
      __int16 v20 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
  uint64_t v9 = *v8;
  if (!*v8) {
    goto LABEL_14;
  }
  size_t v10 = strlen(*v8);
  uint64_t v11 = sub_22B1DB218(a1, (uint64_t)v9, v10, (uint64_t)v5, (uint64_t)v5);
  return sub_22B242E70(a1, v11, (llvm::Constant *)v3);
}

uint64_t sub_22B1FF1C0(uint64_t a1, void *a2)
{
  return sub_22B1FD148(a1, a2, 1);
}

uint64_t sub_22B1FF1C8(uint64_t a1, void *a2)
{
  return sub_22B1FD218(a1, a2, 1);
}

uint64_t sub_22B1FF1D0(uint64_t a1, void *a2)
{
  return sub_22B1FD148(a1, a2, 0);
}

uint64_t sub_22B1FF1D8(uint64_t a1, void *a2)
{
  return sub_22B1FD218(a1, a2, 0);
}

uint64_t sub_22B1FF1E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t sub_22B1FF204()
{
  return 0;
}

uint64_t sub_22B1FF20C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t sub_22B1FF230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

llvm::Value *sub_22B1FF254(uint64_t a1, uint64_t *a2)
{
  return sub_22B1F9464(a1, a2, 0);
}

llvm::Value *sub_22B1FF25C(uint64_t a1, uint64_t *a2)
{
  return sub_22B1F9464(a1, a2, 1);
}

uint64_t sub_22B1FF264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t sub_22B1FF288(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_22B1FF2AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t sub_22B1FF2D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t sub_22B1FF2F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 320);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4) {
        uint64_t v5 = (llvm::Value *)(v4 - 56);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t Name = (_DWORD *)llvm::Value::getName(v5);
      v15[0] = 0;
      v15[1] = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      if (sub_22B1FF3E8(Name, v7, v15, &v13) && llvm::GlobalValue::isDeclaration(v5))
      {
        uint64_t v8 = *(void *)(a1 + 712);
        int Key = llvm::StringMapImpl::FindKey();
        if (Key == -1) {
          uint64_t v10 = *(unsigned int *)(v8 + 8);
        }
        else {
          uint64_t v10 = Key;
        }
        uint64_t v11 = (void *)(*(void *)v8 + 8 * v10);
        if (v11 != (void *)(**(void **)(a1 + 712) + 8 * *(unsigned int *)(*(void *)(a1 + 712) + 8))) {
          sub_22B1FF4A0(a1 + 352, v5, *v11 + 8, v13, v14);
        }
      }
    }
    while (v4 != v3);
  }
  return *(unsigned __int8 *)(a1 + 720);
}

uint64_t sub_22B1FF3E8(_DWORD *a1, unint64_t a2, char **a3, char **a4)
{
  size_t v4 = a2 - 4;
  if (a2 < 4 || *a1 != 779250017) {
    return 0;
  }
  uint64_t v8 = (char *)(a1 + 1);
  if (a2 < 5 || (v9 = (char *)memchr(a1 + 1, 46, v4)) == 0 || (uint64_t v10 = (char *)(v9 - v8), v9 - v8 == -1))
  {
    size_t v14 = 0;
    *a3 = v8;
    a3[1] = (char *)v4;
    uint64_t v13 = (char *)&unk_22B27C63D;
  }
  else
  {
    if (v4 >= (unint64_t)v10) {
      uint64_t v11 = (char *)(v9 - v8);
    }
    else {
      uint64_t v11 = (char *)v4;
    }
    *a3 = v8;
    a3[1] = v11;
    if (v4 >= (unint64_t)(v10 + 1)) {
      size_t v12 = (size_t)(v10 + 1);
    }
    else {
      size_t v12 = v4;
    }
    uint64_t v13 = &v8[v12];
    size_t v14 = v4 - v12;
  }
  *a4 = v13;
  a4[1] = (char *)v14;
  return 1;
}

uint64_t sub_22B1FF4A0(uint64_t a1, llvm::Function *this, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  int v6 = this;
  uint64_t v86 = *MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)(a3 + 16);
  if (v8 == 9)
  {
    uint64_t v11 = *((void *)this + 1);
    while (v11)
    {
      uint64_t v12 = *(void *)(v11 + 24);
      uint64_t v11 = *(void *)(v11 + 8);
      uint64_t v13 = *(const char **)a3;
      uint64_t v14 = *(void *)(a3 + 8);
      uint64_t v15 = (void *)(*(void *)(a1 + 344) + (v14 >> 1));
      if (v14) {
        uint64_t v13 = *(const char **)(*v15 + v13);
      }
      ((void (*)(void *, uint64_t))v13)(v15, v12);
    }
  }
  else if (v8 == 8)
  {
    uint64_t v9 = *(char **)a3;
    if (*(void *)a3)
    {
      size_t v10 = strlen(*(const char **)a3);
      *(void *)&v84[0] = (char *)&v84[1] + 8;
      *(_OWORD *)((char *)v84 + 8) = xmmword_22B26F8B0;
      sub_22B1EC888(v84, v9, &v9[v10]);
    }
    else
    {
      *(void *)&v84[1] = 64;
      *(void *)&v84[0] = (char *)&v84[1] + 8;
      *((void *)&v84[0] + 1) = 0;
    }
    sub_22B1EC888(v84, ".", "");
    sub_22B1EC888(v84, a4, &a4[a5]);
    llvm::Module::getOrInsertFunction();
    llvm::Value::replaceAllUsesWith();
    if (*(_OWORD **)&v84[0] != (_OWORD *)((char *)&v84[1] + 8)) {
      free(*(void **)&v84[0]);
    }
  }
  else
  {
    uint64_t v16 = **(void **)(*((void *)this + 3) + 16);
    BOOL v17 = (*(_DWORD *)(v16 + 8) & 0xFE) != 0x12 || *(unsigned char *)(a3 + 21) == 0;
    int v18 = !v17;
    if (v17) {
      int v19 = 1;
    }
    else {
      int v19 = *(_DWORD *)(v16 + 32);
    }
    int v70 = v19;
    int v68 = *(_DWORD *)(a1 + 104);
    uint64_t v20 = *((void *)this + 1);
    if (v20)
    {
      do
      {
        uint64_t v21 = *(llvm::Instruction **)(v20 + 24);
        uint64_t v71 = *(void *)(v20 + 8);
        int FastMathFlags = sub_22B1D44A8((uint64_t)v21);
        if (FastMathFlags) {
          int FastMathFlags = llvm::Instruction::getFastMathFlags(v21);
        }
        *(_DWORD *)(a1 + 104) = FastMathFlags;
        sub_22B1FFC54(a1 + 8, (uint64_t)v21);
        uint64_t v23 = llvm::UndefValue::get();
        if (v70)
        {
          for (uint64_t i = 0; i != v70; ++i)
          {
            uint64_t v75 = v23;
            uint64_t v85 = 0;
            memset(v84, 0, sizeof(v84));
            unint64_t v25 = sub_22B1F50A8(v21) - (void)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
            if ((v25 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v26 = (v25 >> 5);
              __int16 v27 = (uint64_t *)v84;
              __int16 v28 = v21;
              do
              {
                __int16 v29 = (uint64_t *)((char *)v28 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
                uint64_t v30 = *v29;
                *__int16 v27 = *v29;
                if (v18 && (*(_DWORD *)(*(void *)v30 + 8) & 0xFE) == 0x12)
                {
                  __int16 v83 = 257;
                  uint64_t v31 = llvm::ConstantInt::get();
                  *__int16 v27 = sub_22B242524(a1 + 8, v30, v31, (uint64_t)v82);
                }
                ++v27;
                __int16 v28 = (llvm::Instruction *)((char *)v28 + 32);
                --v26;
              }
              while (v26);
            }
            if (*(unsigned char *)(a3 + 20))
            {
              uint64_t v32 = **(llvm::Type ***)&v84[0];
              if ((*(_DWORD *)(**(void **)&v84[0] + 8) & 0xFE) == 0x12) {
                uint64_t v32 = (llvm::Type *)**((void **)v32 + 2);
              }
              v82[0] = llvm::Type::getPrimitiveSizeInBits(v32);
              v82[1] = v33;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                int v34 = 0;
              }
              else
              {
                uint64_t v35 = *(void *)(a1 + 160);
                if ((*(_DWORD *)(**(void **)&v84[0] + 8) & 0xFE) == 0x12) {
                  uint64_t v35 = llvm::FixedVectorType::get();
                }
                if ((v25 & 0x1FFFFFFFE0) != 0)
                {
                  uint64_t v36 = (v25 >> 5);
                  __int16 v37 = v84;
                  do
                  {
                    uint64_t v38 = *(void *)v37;
                    if (*(unsigned char *)(**(void **)v37 + 8) != 15)
                    {
                      __int16 v83 = 257;
                      *(void *)__int16 v37 = sub_22B1EEEB4(a1 + 8, v38, v35, (uint64_t)v82);
                    }
                    __int16 v37 = (_OWORD *)((char *)v37 + 8);
                    --v36;
                  }
                  while (v36);
                }
                int v34 = 1;
              }
            }
            else
            {
              int v34 = 0;
            }
            uint64_t v39 = *(void *)(a1 + 344);
            long long v79 = *(_OWORD *)(a1 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v80, (llvm::IRBuilderBase *)(a1 + 8));
            int v81 = *(_DWORD *)(a1 + 104);
            sub_22B1D3C74((uint64_t)&v79, v39 + 8);
            if (v80) {
              llvm::MetadataTracking::untrack();
            }
            switch(*(_DWORD *)(a3 + 16))
            {
              case 1:
                int v40 = *(const char **)a3;
                uint64_t v41 = *(void *)(a3 + 8);
                uint64_t v42 = (void *)(*(void *)(a1 + 344) + (v41 >> 1));
                if (v41) {
                  int v40 = *(const char **)(*v42 + v40);
                }
                uint64_t v63 = ((uint64_t (*)(void *))v40)(v42);
                goto LABEL_75;
              case 2:
                long long v44 = *(const char **)a3;
                uint64_t v45 = *(void *)(a3 + 8);
                uint64_t v46 = *(void *)v21;
                long long v47 = (void *)(*(void *)(a1 + 344) + (v45 >> 1));
                if ((v45 & 1) == 0) {
                  goto LABEL_65;
                }
                goto LABEL_64;
              case 3:
                long long v44 = *(const char **)a3;
                uint64_t v48 = *(void *)(a3 + 8);
                uint64_t v46 = *(void *)&v84[0];
                long long v47 = (void *)(*(void *)(a1 + 344) + (v48 >> 1));
                if ((v48 & 1) == 0) {
                  goto LABEL_65;
                }
LABEL_64:
                long long v44 = *(const char **)(*v47 + v44);
LABEL_65:
                uint64_t v63 = ((uint64_t (*)(void *, uint64_t))v44)(v47, v46);
                goto LABEL_75;
              case 4:
                int v49 = (unsigned int *)(*(void *)&v84[0] + 24);
                if (*(_DWORD *)(*(void *)&v84[0] + 32) >= 0x41u) {
                  int v49 = *(unsigned int **)v49;
                }
                uint64_t v50 = *v49;
                uint64_t v51 = *(const char **)a3;
                uint64_t v52 = *(void *)(a3 + 8);
                uint64_t v53 = *(void *)v21;
                char v54 = (void *)(*(void *)(a1 + 344) + (v52 >> 1));
                if (v52) {
                  uint64_t v51 = *(const char **)(*v54 + v51);
                }
                goto LABEL_69;
              case 5:
                uint64_t v51 = *(const char **)a3;
                uint64_t v55 = *(void *)(a3 + 8);
                uint64_t v50 = *((void *)&v84[0] + 1);
                uint64_t v53 = *(void *)&v84[0];
                char v54 = (void *)(*(void *)(a1 + 344) + (v55 >> 1));
                if (v55) {
                  uint64_t v51 = *(const char **)(*v54 + v51);
                }
LABEL_69:
                uint64_t v63 = ((uint64_t (*)(void *, uint64_t, uint64_t))v51)(v54, v53, v50);
                goto LABEL_75;
              case 6:
                uint64_t v56 = *(const char **)a3;
                uint64_t v57 = *(void *)(a3 + 8);
                std::string::size_type v59 = (unsigned char *)*((void *)&v84[0] + 1);
                size_t v58 = *(_OWORD **)&v84[0];
                uint64_t v60 = *(void *)&v84[1];
                char v61 = (void *)(*(void *)(a1 + 344) + (v57 >> 1));
                if ((v57 & 1) == 0) {
                  goto LABEL_74;
                }
                uint64_t v63 = (*(uint64_t (**)(void *, void, void, void))(*v61 + v56))(v61, *(void *)&v84[0], *((void *)&v84[0] + 1), *(void *)&v84[1]);
                goto LABEL_75;
              case 7:
                uint64_t v56 = *(const char **)a3;
                uint64_t v62 = *(void *)(a3 + 8);
                char v61 = (void *)(*(void *)(a1 + 344) + (v62 >> 1));
                if (v62) {
                  uint64_t v56 = *(const char **)(*v61 + v56);
                }
                size_t v58 = v84;
                uint64_t v60 = a5;
                std::string::size_type v59 = a4;
LABEL_74:
                uint64_t v63 = ((uint64_t (*)(void *, _OWORD *, unsigned char *, uint64_t))v56)(v61, v58, v59, v60);
LABEL_75:
                uint64_t v43 = v63;
                break;
              default:
                uint64_t v43 = 0;
                break;
            }
            uint64_t v64 = *(void *)(a1 + 344);
            long long v76 = *(_OWORD *)(v64 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v77, (llvm::IRBuilderBase *)(v64 + 8));
            int v78 = *(_DWORD *)(v64 + 104);
            sub_22B1D3C74((uint64_t)&v76, a1 + 8);
            if (v77) {
              llvm::MetadataTracking::untrack();
            }
            if (v34)
            {
              uint64_t v65 = *(void *)v21;
              if (v18 && (*(_DWORD *)(v65 + 8) & 0xFE) == 0x12) {
                uint64_t v65 = **(void **)(v65 + 16);
              }
              __int16 v83 = 257;
              uint64_t v43 = sub_22B1DC548(a1 + 8, v43, v65, (uint64_t)v82);
            }
            if (v18)
            {
              __int16 v83 = 257;
              uint64_t v66 = llvm::ConstantInt::get();
              uint64_t v43 = sub_22B2427EC(a1 + 8, v75, v43, v66, (uint64_t)v82);
            }
            uint64_t v23 = v43;
          }
        }
        if (*(void *)v21 != *(void *)(a1 + 144)) {
          llvm::Value::replaceAllUsesWith();
        }
        llvm::Instruction::eraseFromParent(v21);
        uint64_t v20 = v71;
      }
      while (v71);
    }
    *(_DWORD *)(a1 + 104) = v68;
    int v6 = this;
  }
  return llvm::Function::eraseFromParent(v6);
}

char **sub_22B1FFC54(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(void *)(a2 + 40);
  *(void *)(a1 + 56) = a2 + 24;
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v5 = v3;
  if (v3)
  {
    llvm::MetadataTracking::track();
    uint64_t v3 = v5;
  }
  uint64_t result = sub_22B1D3D70((char **)a1, v3);
  if (v5) {
    return (char **)llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t *sub_22B1FFCBC(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(qword_2683E87F0 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E8800) = qword_2683E8800 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 41, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 40;
  if (a2) {
    memcpy((void *)(v8 + 40), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0x1800000000;
  uint64_t *i = (uint64_t)v9;
  ++dword_2683E87FC;
  for (uint64_t i = (uint64_t *)(qword_2683E87F0
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E87F0));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_22B1FFDC8(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x230F426A0](a3 + 25, 8);
  uint64_t v11 = (void *)v10;
  uint64_t v12 = v10 + 24;
  if (a3) {
    memcpy((void *)(v10 + 24), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  void *v11 = a3;
  uint64_t *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22B1FFEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  size_t v4 = sub_22B1FFF08(a1, a2);
  __int16 v7 = 257;
  return sub_22B1F860C(v3, (uint64_t)v4, a2, (uint64_t)v6);
}

llvm::Value *sub_22B1FFF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v10 = 257;
  uint64_t v5 = sub_22B1DB138(a1 + 8, a2, a2, (uint64_t)v9);
  v8[16] = 257;
  uint64_t v6 = (uint64_t *)sub_22B1DD690(a1 + 8, v4, v5, (uint64_t)v8);
  return sub_22B1F8540(a1, v6);
}

uint64_t sub_22B1FFF98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_22B1FFF08(a1, a2);
  __int16 v7 = 257;
  return sub_22B1F860C(v3, a2, (uint64_t)v4, (uint64_t)v6);
}

uint64_t sub_22B1FFFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v11 = 257;
  uint64_t v5 = sub_22B1DB138(a1 + 8, a2, a2, (uint64_t)v10);
  v9[16] = 257;
  uint64_t v6 = (uint64_t *)sub_22B1DD390(a1 + 8, v4, v5, (uint64_t)v9);
  __int16 v7 = sub_22B1F8540(a1, v6);
  __int16 v11 = 257;
  return sub_22B1F860C(a1 + 8, v4, (uint64_t)v7, (uint64_t)v10);
}

uint64_t sub_22B20008C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v11 = 257;
  uint64_t v5 = sub_22B1DB138(a1 + 8, a2, a2, (uint64_t)v10);
  v9[16] = 257;
  uint64_t v6 = (uint64_t *)sub_22B1DD390(a1 + 8, v4, v5, (uint64_t)v9);
  __int16 v7 = sub_22B1F8540(a1, v6);
  __int16 v11 = 257;
  return sub_22B1F860C(a1 + 8, a2, (uint64_t)v7, (uint64_t)v10);
}

uint64_t sub_22B200134(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22B20013C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v4 = *(uint64_t **)(*(void *)a1 + 8 * i);
        if (v4 != (uint64_t *)-8 && v4 != 0)
        {
          uint64_t v6 = *v4;
          if (*((_DWORD *)v4 + 5))
          {
            uint64_t v7 = *((unsigned int *)v4 + 4);
            if (v7)
            {
              uint64_t v8 = 0;
              uint64_t v9 = 8 * v7;
              do
              {
                __int16 v10 = *(llvm **)(v4[1] + v8);
                if (v10 != (llvm *)-8 && v10 != 0) {
                  llvm::deallocate_buffer(v10, (void *)(*(void *)v10 + 25));
                }
                v8 += 8;
              }
              while (v9 != v8);
            }
          }
          free((void *)v4[1]);
          llvm::deallocate_buffer((llvm *)v4, (void *)(v6 + 41));
        }
      }
    }
  }
  free(*(void **)a1);
  return a1;
}

BOOL sub_22B20021C(void *a1)
{
  return sub_22B200238((uint64_t)a1 + *(void *)(*a1 - 96));
}

BOOL sub_22B200238(uint64_t a1)
{
  BOOL v2 = sub_22B1EE1E0(a1 + *(void *)(*(void *)a1 - 24), *(int **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 128));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v49 = v2;
    uint64_t v4 = sub_22B1EDEC4(a1 + *(void *)(*(void *)a1 - 24));
    int v48 = sub_22B1ECAA8((uint64_t)v4, v5);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    for (int i = 0; i != 22; ++i)
    {
      uint64_t v10 = a1 + *(void *)(*(void *)a1 - 24);
      __int16 v11 = (uint64_t *)(v10 + 704);
      *(unsigned char *)(v10 + 774) = 1;
      int v12 = *(_DWORD *)(v10 + 736);
      int v13 = *(_DWORD *)(v10 + 752);
      int v14 = *(_DWORD *)(v10 + 744);
      sub_22B1EF4B8((uint64_t *)(v10 + 704), 4, 0);
      if (i == 6)
      {
        unsigned int v15 = sub_22B1ED138((uint64_t)v11, 2);
        sub_22B1ED050(v11, 6, v15);
        unsigned int v16 = sub_22B1ED138((uint64_t)v11, 2);
        sub_22B1ED050(v11, 8, v16);
        unsigned int v17 = sub_22B1EF5C8((uint64_t)v11, 2);
        sub_22B1ED050(v11, 10, v17);
      }
      else
      {
        sub_22B1ED0D4(v11, 6, 0);
        sub_22B1ED0D4(v11, 8, 0);
        sub_22B1EF4B8(v11, 10, 0);
      }
      int v18 = sub_22B1ECAA8((uint64_t)v11, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
      int v19 = v18;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v20 = (v7 - v6) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v21) {
          unint64_t v21 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          unint64_t v22 = (unint64_t)sub_22B1EDE8C(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = (char *)(v22 + 4 * v20);
        *(_DWORD *)uint64_t v24 = v19;
        unint64_t v25 = v24 + 4;
        while (v7 != v6)
        {
          int v26 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        unint64_t v8 = v22 + 4 * v23;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v24;
        uint64_t v7 = v25;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v18;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      __int16 v27 = (char *)&unk_2683E92F4;
    }
    else {
      __int16 v27 = v6;
    }
    int v28 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v27, (v7 - v6) >> 2);
    uint64_t v29 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v30 = (uint64_t *)(v29 + 704);
    *(unsigned char *)(v29 + 774) = 1;
    int v31 = *(_DWORD *)(v29 + 736) - *(_DWORD *)(v29 + 752) + *(_DWORD *)(v29 + 744);
    sub_22B1ED0D4((uint64_t *)(v29 + 704), 4, 0);
    sub_22B1ED0D4(v30, 6, 0);
    sub_22B1ED0D4(v30, 8, 0);
    sub_22B1ED0D4(v30, 10, 0);
    sub_22B1ED0D4(v30, 12, 0);
    unsigned int v32 = *(_DWORD *)(a1 + 12);
    if (v32 <= 4) {
      unsigned int v32 = 4;
    }
    sub_22B1ED0D4(v30, 14, v32 - 4);
    int v33 = sub_22B1ECAA8((uint64_t)v30, v31);
    uint64_t v34 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v35 = (uint64_t *)(v34 + 704);
    *(unsigned char *)(v34 + 774) = 1;
    int v36 = *(_DWORD *)(v34 + 736) - *(_DWORD *)(v34 + 752) + *(_DWORD *)(v34 + 744);
    sub_22B1ED0D4((uint64_t *)(v34 + 704), 14, 0);
    sub_22B1ED0D4(v35, 12, 0);
    sub_22B1ED0D4(v35, 10, 0);
    sub_22B1ED0D4(v35, 8, 0);
    sub_22B1ED0D4(v35, 6, 0);
    sub_22B1ED0D4(v35, 4, 0);
    int v37 = sub_22B1ECAA8((uint64_t)v35, v36);
    uint64_t v38 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v39 = (uint64_t *)(v38 + 704);
    *(unsigned char *)(v38 + 774) = 1;
    int v40 = *(_DWORD *)(v38 + 736) - *(_DWORD *)(v38 + 752) + *(_DWORD *)(v38 + 744);
    unsigned int v41 = sub_22B1EF5C8(v38 + 704, 1);
    sub_22B1ED050(v39, 6, v41);
    sub_22B1EF4B8(v39, 8, 0);
    sub_22B1ED0D4(v39, 10, *(_DWORD *)(a1 + 12));
    sub_22B1ED0D4(v39, 12, 0);
    sub_22B1ED0D4(v39, 14, 0);
    sub_22B1EC980(v39, 16, v33);
    sub_22B1EC980(v39, 18, v37);
    sub_22B1EF4B8(v39, 20, 0);
    sub_22B1EC980(v39, 22, v28);
    sub_22B1ED0D4(v39, 26, 0);
    int v42 = sub_22B1ECAA8((uint64_t)v39, v40);
    uint64_t v43 = a1 + *(void *)(*(void *)a1 - 24);
    long long v44 = (uint64_t *)(v43 + 704);
    *(unsigned char *)(v43 + 774) = 1;
    LODWORD(v39) = *(_DWORD *)(v43 + 736) - *(_DWORD *)(v43 + 752) + *(_DWORD *)(v43 + 744);
    sub_22B1F26A0((uint64_t *)(v43 + 704), v48);
    sub_22B20077C(v44, v42);
    uint64_t v45 = a1 + *(void *)(*(void *)a1 - 24) + 704;
    int v46 = sub_22B1ECAA8((uint64_t)v44, (__int16)v39);
    sub_22B1EE128(v45, v46);
    BOOL v3 = v49;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

uint64_t *sub_22B20077C(uint64_t *result, int a2)
{
  if (a2)
  {
    BOOL v3 = result;
    sub_22B1ECFA8((uint64_t)result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return sub_22B1ED0D4(v3, 6, v4);
  }
  return result;
}

void sub_22B2007EC(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B200808(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v9, (char *)&unk_22B27C63D);
  sub_22B1D7BF0(v7, "passthrough_size");
  sub_22B1F37D0(&v11, (const void **)v7, *(_DWORD *)(a1 + 16));
  sub_22B1D7BF0(__p, "pad_size");
  sub_22B1F37D0(&v12, (const void **)__p, *(_DWORD *)(a1 + 20));
  sub_22B1F3880(a2, (uint64_t)v9, (uint64_t)&v11, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v11 + i * 8 + 24));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

uint64_t sub_22B200928()
{
  return 0;
}

uint64_t sub_22B200930(void *a1)
{
  return sub_22B20094C((uint64_t)a1 + *(void *)(*a1 - 56));
}

uint64_t sub_22B20094C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320);
  uint64_t v3 = v2 + 24;
  for (uint64_t i = *(void *)(v2 + 32); i != v3; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      __int16 v5 = (llvm::GlobalValue *)(i - 56);
    }
    else {
      __int16 v5 = 0;
    }
    if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0)
    {
      sub_22B1EE934(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)v5);
      break;
    }
  }
  sub_22B1EF1A8(a1 + *(void *)(*(void *)a1 - 24));
  char v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 24))(a1 + *(void *)(*(void *)a1 - 24));
  if (sub_22B1EC788(v6))
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 24))(a1 + *(void *)(*(void *)a1 - 24));
    sub_22B1E69D0(v7, "------ Start compilation key description for %s shader %u  ------", v8, v9, v10, v11, v12, v13, v7);
    int v14 = (*(void *(**)(void **__return_ptr))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 72))(__p);
    if (v37 >= 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (void **)__p[0];
    }
    sub_22B1E69D0((uint64_t)v14, (const char *)v21, v15, v16, v17, v18, v19, v20, v35);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 24))(a1 + *(void *)(*(void *)a1 - 24));
    sub_22B1E69D0(v22, "------ End compilation key description for %s shader %u  ------", v23, v24, v25, v26, v27, v28, v22);
  }
  uint64_t v29 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
  uint64_t v30 = v29[16].__r_.__value_.__r.__words[2];
  uint64_t size = v29[13].__r_.__value_.__l.__size_;
  if (*(unsigned char *)(a1 + 8))
  {
    char v32 = sub_22B1EBFD8(v30, v29, size, 16843009, 2);
    uint64_t result = 0;
    if ((v32 & 1) == 0) {
      return result;
    }
  }
  else
  {
    int v34 = sub_22B1EBFD8(v30, v29, size, 16843009, 3);
    uint64_t result = 0;
    if (!v34) {
      return result;
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 80))(a1 + *(void *)(*(void *)a1 - 24));
  if (result)
  {
    sub_22B200C40(a1 + *(void *)(*(void *)a1 - 24));
    return 1;
  }
  return result;
}

void sub_22B200C40(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (sub_22B1EC788(v2))
  {
    if (*(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744)) {
      operator new();
    }
    if (*(_DWORD *)(a1 + 928) - *(_DWORD *)(a1 + 944) + *(_DWORD *)(a1 + 936))
    {
      uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 344) + 496))(*(void *)(a1 + 344));
      uint64_t v4 = *(void *)(a1 + 944);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v28 = 0;
      sub_22B26D4C8(v3, v4, (uint64_t)__p);
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      sub_22B1E69D0(v5, "------ Start Target Translator Metadata %s shader %d ------\n", v6, v7, v8, v9, v10, v11, v5);
      if (v28 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        LOBYTE(v19) = __p[0];
      }
      sub_22B1E69D0(v12, "%s", v13, v14, v15, v16, v17, v18, (char)v19);
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      sub_22B1E69D0(v20, "------ End Target Translator Metadata %s shader %d ------\n", v21, v22, v23, v24, v25, v26, v20);
      sub_22B26D560(v3);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t sub_22B201ADC()
{
  return 6;
}

const char *sub_22B201AE4()
{
  return "passthrough";
}

void sub_22B201AF0(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 24);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B201B50(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 24);
}

uint64_t sub_22B201B70()
{
  return 6;
}

const char *sub_22B201B78()
{
  return "passthrough";
}

void sub_22B201B84(uint64_t a1)
{
  sub_22B1ED95C(a1 + 24);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B201BD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_22B201BFC()
{
  return 0;
}

BOOL sub_22B201C14(void *a1)
{
  return sub_22B201C30((uint64_t)a1 + *(void *)(*a1 - 96));
}

BOOL sub_22B201C30(uint64_t a1)
{
  BOOL v2 = sub_22B1EE1E0(a1 + *(void *)(*(void *)a1 - 24), *(int **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 128));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v55 = v2;
    uint64_t v4 = sub_22B1EDEC4(a1 + *(void *)(*(void *)a1 - 24));
    int v54 = sub_22B1ECAA8((uint64_t)v4, v5);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    for (int i = 0; i != 22; ++i)
    {
      uint64_t v10 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v11 = (uint64_t *)(v10 + 704);
      *(unsigned char *)(v10 + 774) = 1;
      int v12 = *(_DWORD *)(v10 + 736) - *(_DWORD *)(v10 + 752) + *(_DWORD *)(v10 + 744);
      sub_22B1EF4B8((uint64_t *)(v10 + 704), 4, 0);
      sub_22B1ED0D4(v11, 6, 0);
      sub_22B1ED0D4(v11, 8, 0);
      sub_22B1EF4B8(v11, 10, 0);
      int v13 = sub_22B1ECAA8((uint64_t)v11, v12);
      int v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v15 = (v7 - v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v16) {
          unint64_t v16 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_22B1EDE8C(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)uint64_t v19 = v14;
        uint64_t v20 = v19 + 4;
        while (v7 != v6)
        {
          int v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        unint64_t v8 = v17 + 4 * v18;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v19;
        uint64_t v7 = v20;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      uint64_t v22 = (char *)&unk_2683E92F4;
    }
    else {
      uint64_t v22 = v6;
    }
    int v23 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v22, (v7 - v6) >> 2);
    uint64_t v24 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v25 = (uint64_t *)(v24 + 704);
    *(unsigned char *)(v24 + 774) = 1;
    int v26 = *(_DWORD *)(v24 + 736) - *(_DWORD *)(v24 + 752) + *(_DWORD *)(v24 + 744);
    sub_22B1ED0D4((uint64_t *)(v24 + 704), 4, 0);
    sub_22B1ED0D4(v25, 6, 0);
    unsigned int v27 = sub_22B1ED138((uint64_t)v25, 3);
    sub_22B1ED050(v25, 8, v27);
    sub_22B1ED0D4(v25, 12, *(_DWORD *)(a1 + 16));
    unsigned int v28 = sub_22B1EF5C8((uint64_t)v25, 3);
    sub_22B1ED050(v25, 10, v28);
    int v29 = sub_22B1ECAA8((uint64_t)v25, v26);
    uint64_t v30 = operator new(4uLL);
    *uint64_t v30 = v29;
    int v31 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v30, 1);
    uint64_t v32 = a1 + *(void *)(*(void *)a1 - 24);
    int v33 = (uint64_t *)(v32 + 704);
    *(unsigned char *)(v32 + 774) = 1;
    int v34 = *(_DWORD *)(v32 + 736) - *(_DWORD *)(v32 + 752) + *(_DWORD *)(v32 + 744);
    sub_22B1ED0D4((uint64_t *)(v32 + 704), 4, 0);
    sub_22B1ED0D4(v33, 6, 0);
    sub_22B1ED0D4(v33, 8, 0);
    sub_22B1ED0D4(v33, 10, 0);
    sub_22B1ED0D4(v33, 12, 0);
    unsigned int v35 = *(_DWORD *)(a1 + 12);
    if (v35 <= 4) {
      unsigned int v35 = 4;
    }
    sub_22B1ED0D4(v33, 14, v35 - 4);
    int v36 = sub_22B1ECAA8((uint64_t)v33, v34);
    uint64_t v37 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v38 = (uint64_t *)(v37 + 704);
    *(unsigned char *)(v37 + 774) = 1;
    int v39 = *(_DWORD *)(v37 + 736) - *(_DWORD *)(v37 + 752) + *(_DWORD *)(v37 + 744);
    sub_22B1ED0D4((uint64_t *)(v37 + 704), 14, 0);
    sub_22B1ED0D4(v38, 12, 0);
    sub_22B1ED0D4(v38, 10, 0);
    sub_22B1ED0D4(v38, 8, 0);
    sub_22B1ED0D4(v38, 6, 0);
    sub_22B1ED0D4(v38, 4, 0);
    LODWORD(v38) = sub_22B1ECAA8((uint64_t)v38, v39);
    uint64_t v40 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v41 = v40 + 704;
    *(unsigned char *)(v40 + 774) = 1;
    int v42 = *(_DWORD *)(v40 + 736) - *(_DWORD *)(v40 + 752) + *(_DWORD *)(v40 + 744);
    sub_22B20077C((uint64_t *)(v40 + 704), v31);
    int v43 = sub_22B1ECAA8(v41, v42);
    uint64_t v44 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v45 = (uint64_t *)(v44 + 704);
    *(unsigned char *)(v44 + 774) = 1;
    LODWORD(v41) = *(_DWORD *)(v44 + 736) - *(_DWORD *)(v44 + 752) + *(_DWORD *)(v44 + 744);
    sub_22B1F26A0((uint64_t *)(v44 + 704), v43);
    unsigned int v46 = sub_22B1EF5C8((uint64_t)v45, 1);
    sub_22B1ED050(v45, 6, v46);
    sub_22B1EF4B8(v45, 8, 0);
    sub_22B1ED0D4(v45, 10, *(_DWORD *)(a1 + 12));
    sub_22B1ED0D4(v45, 12, 0);
    sub_22B1ED0D4(v45, 14, 0);
    sub_22B1EC980(v45, 16, v36);
    sub_22B1EC980(v45, 18, (int)v38);
    sub_22B1EF4B8(v45, 20, 0);
    sub_22B1EC980(v45, 22, v23);
    sub_22B1ED0D4(v45, 26, 0);
    int v47 = sub_22B1ECAA8((uint64_t)v45, v41);
    uint64_t v48 = a1 + *(void *)(*(void *)a1 - 24);
    BOOL v49 = (uint64_t *)(v48 + 704);
    *(unsigned char *)(v48 + 774) = 1;
    int v50 = *(_DWORD *)(v48 + 736) - *(_DWORD *)(v48 + 752) + *(_DWORD *)(v48 + 744);
    sub_22B1F26A0((uint64_t *)(v48 + 704), v54);
    sub_22B20077C(v49, v47);
    uint64_t v51 = a1 + *(void *)(*(void *)a1 - 24) + 704;
    int v52 = sub_22B1ECAA8((uint64_t)v49, v50);
    sub_22B1EE128(v51, v52);
    operator delete(v30);
    BOOL v3 = v55;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

void sub_22B202264(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B202280(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v6, (char *)&unk_22B27C63D);
  sub_22B1D7BF0(v4, "vertex_stride");
  sub_22B1F37D0(&__p, (const void **)v4, *(_DWORD *)(a1 + 12));
  sub_22B1F3880(a2, (uint64_t)v6, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

uint64_t sub_22B20234C()
{
  return 9;
}

const char *sub_22B202354()
{
  return "clearvertex";
}

void sub_22B202360(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 24);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B2023C0(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 24);
}

uint64_t sub_22B2023E0()
{
  return 9;
}

const char *sub_22B2023E8()
{
  return "clearvertex";
}

void sub_22B2023F4(uint64_t a1)
{
  sub_22B1ED95C(a1 + 24);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B202440(uint64_t a1)
{
  return a1;
}

BOOL sub_22B20246C(void *a1)
{
  return sub_22B202488((void *)((char *)a1 + *(void *)(*a1 - 96)));
}

BOOL sub_22B202488(uint64_t *a1)
{
  BOOL v2 = sub_22B1EE1E0((uint64_t)a1 + *(void *)(*a1 - 24), *(int **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 128));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v71 = v2;
    uint64_t v4 = sub_22B1EDEC4((uint64_t)a1 + *(void *)(*a1 - 24));
    int v70 = sub_22B1ECAA8((uint64_t)v4, v5);
    uint64_t v6 = 0;
    char v7 = 0;
    unint64_t v8 = 0;
    for (int i = 0; i != 22; ++i)
    {
      uint64_t v10 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v11 = (uint64_t *)(v10 + 704);
      *(unsigned char *)(v10 + 774) = 1;
      int v12 = *(_DWORD *)(v10 + 736) - *(_DWORD *)(v10 + 752) + *(_DWORD *)(v10 + 744);
      sub_22B1EF4B8((uint64_t *)(v10 + 704), 4, 0);
      sub_22B1ED0D4(v11, 6, 0);
      sub_22B1ED0D4(v11, 8, 0);
      sub_22B1EF4B8(v11, 10, 0);
      int v13 = sub_22B1ECAA8((uint64_t)v11, v12);
      int v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v15 = (v7 - v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          goto LABEL_53;
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v16) {
          unint64_t v16 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_22B1EDE8C(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)uint64_t v19 = v14;
        uint64_t v20 = v19 + 4;
        while (v7 != v6)
        {
          int v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        unint64_t v8 = v17 + 4 * v18;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v19;
        char v7 = v20;
      }
      else
      {
        *(_DWORD *)char v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      uint64_t v22 = (char *)&unk_2683E92F4;
    }
    else {
      uint64_t v22 = v6;
    }
    int v23 = sub_22B1F25D8((uint64_t)a1 + *(void *)(*a1 - 24) + 704, (uint64_t)v22, (v7 - v6) >> 2);
    uint64_t v24 = *a1;
    if (*((_DWORD *)a1 + 8) == -1)
    {
      int v31 = 0;
      int v34 = 0;
      int v33 = 0;
    }
    else
    {
      uint64_t v25 = (uint64_t)a1 + *(void *)(v24 - 24);
      int v26 = (uint64_t *)(v25 + 704);
      *(unsigned char *)(v25 + 774) = 1;
      int v27 = *(_DWORD *)(v25 + 736) - *(_DWORD *)(v25 + 752) + *(_DWORD *)(v25 + 744);
      sub_22B1ED0D4((uint64_t *)(v25 + 704), 4, 0);
      sub_22B1ED0D4(v26, 6, 0);
      unsigned int v28 = sub_22B1ED138((uint64_t)v26, 3);
      sub_22B1ED050(v26, 8, v28);
      sub_22B1ED0D4(v26, 12, *((_DWORD *)a1 + 8));
      unsigned int v29 = sub_22B1EF5C8((uint64_t)v26, 4);
      sub_22B1ED050(v26, 10, v29);
      int v30 = sub_22B1ECAA8((uint64_t)v26, v27);
      int v31 = (char *)sub_22B1EDE8C(1uLL);
      int v33 = &v31[4 * v32];
      *(_DWORD *)int v31 = v30;
      int v34 = v31 + 4;
      uint64_t v24 = *a1;
    }
    int v69 = v23;
    if (*((_DWORD *)a1 + 9) != -1)
    {
      uint64_t v35 = (uint64_t)a1 + *(void *)(v24 - 24);
      int v36 = (uint64_t *)(v35 + 704);
      *(unsigned char *)(v35 + 774) = 1;
      int v37 = *(_DWORD *)(v35 + 736) - *(_DWORD *)(v35 + 752) + *(_DWORD *)(v35 + 744);
      sub_22B1ED0D4((uint64_t *)(v35 + 704), 4, 0);
      sub_22B1ED0D4(v36, 6, 0);
      unsigned int v38 = sub_22B1ED138((uint64_t)v36, 3);
      sub_22B1ED050(v36, 8, v38);
      sub_22B1ED0D4(v36, 12, *((_DWORD *)a1 + 9));
      unsigned int v39 = sub_22B1EF5C8((uint64_t)v36, 2);
      sub_22B1ED050(v36, 10, v39);
      int v40 = sub_22B1ECAA8((uint64_t)v36, v37);
      int v41 = v40;
      if (v34 >= v33)
      {
        uint64_t v43 = (v34 - v31) >> 2;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62) {
LABEL_53:
        }
          abort();
        if ((v33 - v31) >> 1 > v44) {
          unint64_t v44 = (v33 - v31) >> 1;
        }
        if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          unint64_t v45 = (unint64_t)sub_22B1EDE8C(v45);
        }
        unsigned int v46 = (char *)(v45 + 4 * v43);
        *(_DWORD *)unsigned int v46 = v41;
        int v42 = v46 + 4;
        while (v34 != v31)
        {
          int v47 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v46 - 1) = v47;
          v46 -= 4;
        }
        if (v31) {
          operator delete(v31);
        }
        int v31 = v46;
      }
      else
      {
        *(_DWORD *)int v34 = v40;
        int v42 = v34 + 4;
      }
      uint64_t v24 = *a1;
      int v34 = v42;
    }
    int v48 = sub_22B1F25D8((uint64_t)a1 + *(void *)(v24 - 24) + 704, (uint64_t)&unk_2683E9243, 0);
    if (v34 == v31) {
      BOOL v49 = (char *)&unk_2683E9244;
    }
    else {
      BOOL v49 = v31;
    }
    int v50 = sub_22B1F25D8((uint64_t)a1 + *(void *)(*a1 - 24) + 704, (uint64_t)v49, (v34 - v31) >> 2);
    uint64_t v51 = (uint64_t)a1 + *(void *)(*a1 - 24);
    int v52 = (uint64_t *)(v51 + 704);
    *(unsigned char *)(v51 + 774) = 1;
    int v53 = *(_DWORD *)(v51 + 736) - *(_DWORD *)(v51 + 752) + *(_DWORD *)(v51 + 744);
    sub_22B1ED0D4((uint64_t *)(v51 + 704), 4, 0);
    sub_22B1ED0D4(v52, 6, 0);
    sub_22B1ED0D4(v52, 8, 0);
    sub_22B1ED0D4(v52, 10, 0);
    sub_22B1ED0D4(v52, 12, 0);
    sub_22B1ED0D4(v52, 14, 0);
    LODWORD(v52) = sub_22B1ECAA8((uint64_t)v52, v53);
    uint64_t v54 = (uint64_t)a1 + *(void *)(*a1 - 24);
    BOOL v55 = (uint64_t *)(v54 + 704);
    *(unsigned char *)(v54 + 774) = 1;
    int v56 = *(_DWORD *)(v54 + 736) - *(_DWORD *)(v54 + 752) + *(_DWORD *)(v54 + 744);
    sub_22B1ED0D4((uint64_t *)(v54 + 704), 14, 0);
    sub_22B1ED0D4(v55, 12, 0);
    sub_22B1ED0D4(v55, 10, 0);
    sub_22B1ED0D4(v55, 8, 0);
    sub_22B1ED0D4(v55, 6, 0);
    sub_22B1ED0D4(v55, 4, 0);
    LODWORD(v55) = sub_22B1ECAA8((uint64_t)v55, v56);
    uint64_t v57 = (uint64_t)a1 + *(void *)(*a1 - 24);
    size_t v58 = (uint64_t *)(v57 + 704);
    *(unsigned char *)(v57 + 774) = 1;
    int v59 = *(_DWORD *)(v57 + 736) - *(_DWORD *)(v57 + 752) + *(_DWORD *)(v57 + 744);
    sub_22B1F26A0((uint64_t *)(v57 + 704), v48);
    sub_22B20077C(v58, v50);
    int v60 = sub_22B1ECAA8((uint64_t)v58, v59);
    uint64_t v61 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v62 = (uint64_t *)(v61 + 704);
    *(unsigned char *)(v61 + 774) = 1;
    int v63 = *(_DWORD *)(v61 + 736) - *(_DWORD *)(v61 + 752) + *(_DWORD *)(v61 + 744);
    sub_22B1F26A0((uint64_t *)(v61 + 704), v60);
    sub_22B1EF4B8(v62, 6, 0);
    sub_22B1EF4B8(v62, 8, *((unsigned char *)a1 + 44) != 0);
    sub_22B1ED0D4(v62, 10, *((_DWORD *)a1 + 10));
    sub_22B1ED0D4(v62, 12, 0);
    sub_22B1ED0D4(v62, 14, 0);
    sub_22B1EC980(v62, 16, (int)v52);
    sub_22B1EC980(v62, 18, (int)v55);
    sub_22B1EF4B8(v62, 20, 0);
    sub_22B1EC980(v62, 22, v69);
    sub_22B1ED0D4(v62, 26, 0);
    LODWORD(v58) = sub_22B1ECAA8((uint64_t)v62, v63);
    uint64_t v64 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v65 = (uint64_t *)(v64 + 704);
    *(unsigned char *)(v64 + 774) = 1;
    LODWORD(v62) = *(_DWORD *)(v64 + 736) - *(_DWORD *)(v64 + 752) + *(_DWORD *)(v64 + 744);
    sub_22B1F26A0((uint64_t *)(v64 + 704), v70);
    sub_22B20077C(v65, (int)v58);
    uint64_t v66 = (uint64_t)a1 + *(void *)(*a1 - 24) + 704;
    int v67 = sub_22B1ECAA8((uint64_t)v65, (__int16)v62);
    sub_22B1EE128(v66, v67);
    if (v31) {
      operator delete(v31);
    }
    BOOL v3 = v71;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

void sub_22B202C64(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B202C80(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v3 = *(_DWORD **)(a1 + 24);
  sub_22B1D7BF0(v21, "AGCTABlitState");
  sub_22B1D7BF0(v19, "blitType");
  sub_22B1F3828(&v23, (const void **)v19, off_26488D890[*v3 & 7]);
  sub_22B1D7BF0(v17, "primitiveSizePOT");
  sub_22B1F37D0(&v24, (const void **)v17, (*v3 >> 8) & 7);
  sub_22B1D7BF0(v15, "primitiveCount");
  sub_22B1F37D0(&v25, (const void **)v15, (*v3 >> 11));
  sub_22B1D7BF0(v13, "loopCount");
  sub_22B1F37D0(&v26, (const void **)v13, (*v3 >> 19) & 0xF);
  sub_22B1D7BF0(v11, "sampleCountPOT");
  sub_22B1F37D0(&v27, (const void **)v11, (*v3 >> 23) & 3);
  sub_22B1D7BF0(v9, "regionOffset");
  sub_22B1F37D0(&v28, (const void **)v9, (*v3 >> 25) & 1);
  sub_22B1D7BF0(v7, "blitTextureFormat");
  sub_22B1F37D0(&v29, (const void **)v7, *v3 >> 3);
  sub_22B1D7BF0(__p, "unused");
  sub_22B1F37D0(&v30, (const void **)__p, (*v3 >> 27) & 0xF);
  sub_22B1F3880(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

uint64_t sub_22B202F0C()
{
  return 10;
}

const char *sub_22B202F14()
{
  return "blitTA";
}

void sub_22B202F20(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 48);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B202F80(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 48);
}

uint64_t sub_22B202FA0()
{
  return 10;
}

const char *sub_22B202FA8()
{
  return "blitTA";
}

void sub_22B202FB4(uint64_t a1)
{
  sub_22B1ED95C(a1 + 48);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B203000(uint64_t a1)
{
  return a1;
}

BOOL sub_22B20302C(void *a1)
{
  return sub_22B203048((void *)((char *)a1 + *(void *)(*a1 - 96)));
}

BOOL sub_22B203048(uint64_t *a1)
{
  BOOL v2 = sub_22B1EE1E0((uint64_t)a1 + *(void *)(*a1 - 24), *(int **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = (char *)a1 + *(void *)(*a1 - 24);
    if (*(unsigned char *)(*((void *)v4 + 43) + 1672))
    {
      unint64_t v22 = 0x8000000000008000;
      int v5 = sub_22B1EF298((uint64_t)&v22, (uint64_t)(v4 + 704));
      char v6 = operator new(4uLL);
      *char v6 = v5;
      int v7 = sub_22B1F25D8((uint64_t)a1 + *(void *)(*a1 - 24) + 704, (uint64_t)v6, 1);
      operator delete(v6);
      uint64_t v3 = *a1;
    }
    else
    {
      int v7 = 0;
    }
    char v8 = sub_22B1EDEC4((uint64_t)a1 + *(void *)(v3 - 24));
    uint64_t v9 = (uint64_t)v8;
    __int16 v11 = v10;
    if (*(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1672)) {
      sub_22B203240(v8, v7);
    }
    int v12 = sub_22B1ECAA8(v9, v11);
    int v13 = sub_22B24DC4C(a1 + 2);
    int v15 = sub_22B1ECAA8((uint64_t)v13, v14);
    char v16 = (char *)a1 + *(void *)(*a1 - 24);
    unint64_t v17 = (uint64_t *)(v16 + 704);
    v16[774] = 1;
    int v18 = *((_DWORD *)v16 + 184) - *((_DWORD *)v16 + 188) + *((_DWORD *)v16 + 186);
    sub_22B1F26A0((uint64_t *)v16 + 88, v12);
    sub_22B1F2710(v17, v15);
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 - 24) + 704;
    int v20 = sub_22B1ECAA8((uint64_t)v17, v18);
    sub_22B1EE128(v19, v20);
  }
  return v2;
}

uint64_t *sub_22B203240(uint64_t *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    sub_22B1ECFA8((uint64_t)result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return sub_22B1ED0D4(v3, 10, v4);
  }
  return result;
}

void sub_22B2032B0(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_22B2032CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  sub_22B20349C(&v5, *(void *)(a1 + 544));
  sub_22B1D7BF0(v14, "AGCColorMaskState");
  sub_22B1D7BF0(v12, "redEnableBits");
  sub_22B1F3BF8(&v16, (const void **)v12);
  sub_22B1D7BF0(v10, "greenEnableBits");
  sub_22B1F3BF8(&v17, (const void **)v10);
  sub_22B1D7BF0(v8, "blueEnableBits");
  sub_22B1F3BF8(&v18, (const void **)v8);
  sub_22B1D7BF0(__p, "alphaEnableBits");
  sub_22B1F3BF8(&v19, (const void **)__p);
  sub_22B1F3880(&v4, (uint64_t)v14, (uint64_t)&v16, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v19.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v19.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  sub_22B1F42B8(a2, (const void **)&v5.__r_.__value_.__l.__data_, (const void **)&v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_22B20349C(std::string *a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v44, "AGCDrawBufferState");
  sub_22B1D7BF0(v42, "enabledBits");
  sub_22B1F3BF8(&v54, (const void **)v42);
  sub_22B1D7BF0(v40, "sampleCount");
  sub_22B1F37D0(&v55, (const void **)v40, (*(_DWORD *)(a2 + 32) >> 8) & 0xF);
  sub_22B1D7BF0(v38, "colorSampleCount");
  sub_22B1F37D0(&v56, (const void **)v38, (unsigned __int16)*(_DWORD *)(a2 + 32) >> 12);
  sub_22B1D7BF0(v36, "outputPartitionSize");
  sub_22B1F37D0(&v57, (const void **)v36, *(unsigned __int8 *)(a2 + 34));
  sub_22B1D7BF0(v34, "LIBSpilling");
  sub_22B1F37D0(&v58, (const void **)v34, HIBYTE(*(_DWORD *)(a2 + 32)) & 1);
  sub_22B1D7BF0(v32, "unused");
  sub_22B1F37D0(&v59, (const void **)v32, *(_DWORD *)(a2 + 32) >> 25);
  sub_22B1D7BF0(v30, "encoded : ");
  sub_22B1D7BF0(v28, "encoded[0]");
  sub_22B20398C(&v27, (_DWORD *)a2);
  sub_22B1F3B10(&v46, (const void **)v28, (uint64_t)&v27);
  sub_22B1D7BF0(v25, "encoded[1]");
  sub_22B20398C(&v24, (_DWORD *)(a2 + 4));
  sub_22B1F3B10(&v47, (const void **)v25, (uint64_t)&v24);
  sub_22B1D7BF0(v22, "encoded[2]");
  sub_22B20398C(&v21, (_DWORD *)(a2 + 8));
  sub_22B1F3B10(&v48, (const void **)v22, (uint64_t)&v21);
  sub_22B1D7BF0(v19, "encoded[3]");
  sub_22B20398C(&v18, (_DWORD *)(a2 + 12));
  sub_22B1F3B10(&v49, (const void **)v19, (uint64_t)&v18);
  sub_22B1D7BF0(v16, "encoded[4]");
  sub_22B20398C(&v15, (_DWORD *)(a2 + 16));
  sub_22B1F3B10(&v50, (const void **)v16, (uint64_t)&v15);
  sub_22B1D7BF0(v13, "encoded[5]");
  sub_22B20398C(&v12, (_DWORD *)(a2 + 20));
  sub_22B1F3B10(&v51, (const void **)v13, (uint64_t)&v12);
  sub_22B1D7BF0(v10, "encoded[6]");
  sub_22B20398C(&v9, (_DWORD *)(a2 + 24));
  sub_22B1F3B10(&v52, (const void **)v10, (uint64_t)&v9);
  sub_22B1D7BF0(v7, "encoded[7]");
  sub_22B20398C(&__p, (_DWORD *)(a2 + 28));
  sub_22B1F3B10(&v53, (const void **)v7, (uint64_t)&__p);
  sub_22B1F3880(&v60, (uint64_t)v30, (uint64_t)&v46, 8);
  sub_22B1F3880(a1, (uint64_t)v44, (uint64_t)&v54, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v60.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v60.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  for (uint64_t j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + j * 8));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
}

void sub_22B20398C(std::string *a1, _DWORD *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v19, "AGCDrawBuffer");
  sub_22B1D7BF0(v17, "pbeSourceFormat");
  sub_22B1F3828(&v21, (const void **)v17, off_26488D8C8[*a2 & 0x1F]);
  sub_22B1D7BF0(v15, "numWrittenComponents");
  sub_22B1F37D0(&v22, (const void **)v15, *a2 >> 5);
  sub_22B1D7BF0(v13, "gammaCorrection");
  sub_22B1F37D0(&v23, (const void **)v13, (*a2 >> 8) & 1);
  sub_22B1D7BF0(v11, "colorSpaceConversion");
  sub_22B1F3828(&v24, (const void **)v11, off_26488D980[((unint64_t)*a2 >> 9) & 7]);
  sub_22B1D7BF0(v9, "preEmitSwizzle");
  sub_22B1F3828(&v25, (const void **)v9, off_26488D9A8[((unint64_t)*a2 >> 12) & 7]);
  sub_22B1D7BF0(v7, "outputPartitionOffset");
  sub_22B1F37D0(&v26, (const void **)v7, (*a2 >> 15));
  sub_22B1D7BF0(__p, "unused");
  sub_22B1F37D0(&v27, (const void **)__p, *a2 >> 23);
  sub_22B1F3880(a1, (uint64_t)v19, (uint64_t)&v21, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

uint64_t sub_22B203BF8()
{
  return 11;
}

const char *sub_22B203C00()
{
  return "clear";
}

void sub_22B203C0C(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 592);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B203C6C(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 592);
}

void sub_22B203C8C(uint64_t a1)
{
  sub_22B1ED95C(a1 + 576);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B203CD8(uint64_t a1)
{
  return sub_22B1ED95C(a1 + 576);
}

uint64_t sub_22B203CE0()
{
  return 11;
}

const char *sub_22B203CE8()
{
  return "clear";
}

void sub_22B203CF4(uint64_t a1)
{
  sub_22B1ED95C(a1 + 592);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B203D40(uint64_t a1)
{
  return a1;
}

void sub_22B203D84(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_22B203DA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  sub_22B20349C(&v7, *(void *)(a1 + 544));
  std::string v4 = *(unsigned __int16 **)(a1 + 584);
  sub_22B1D7BF0(v12, "AGCBackgroundObjectState");
  sub_22B1D7BF0(v10, "dimensionBits");
  std::to_string(&v14, *v4);
  sub_22B1F3B10(&v15, (const void **)v10, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  sub_22B1D7BF0(&v14, "arrayBits");
  sub_22B203F58(&v16, (const void **)&v14.__r_.__value_.__l.__data_, *((unsigned char *)v4 + 2));
  sub_22B1D7BF0(__p, "clearedBits");
  sub_22B203F58(&v17, (const void **)__p, *((unsigned char *)v4 + 3));
  sub_22B1F3880(&v6, (uint64_t)v12, (uint64_t)&v15, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v17.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  sub_22B1F42B8(a2, (const void **)&v7.__r_.__value_.__l.__data_, (const void **)&v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_22B203F58(std::string *a1, const void **a2, unsigned __int8 a3)
{
  std::to_string(&v5, a3);
  sub_22B1F3B10(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_22B203FB0()
{
  return 12;
}

const char *sub_22B203FB8()
{
  return "bgo";
}

void sub_22B203FC4(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 592);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B204024(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 592);
}

void sub_22B204044(uint64_t a1)
{
  sub_22B1ED95C(a1 + 576);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B204090(uint64_t a1)
{
  return sub_22B1ED95C(a1 + 576);
}

uint64_t sub_22B204098()
{
  return 12;
}

const char *sub_22B2040A0()
{
  return "bgo";
}

void sub_22B2040AC(uint64_t a1)
{
  sub_22B1ED95C(a1 + 592);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B2040F8(uint64_t a1)
{
  return a1;
}

BOOL sub_22B204124(void *a1)
{
  return sub_22B204140((void *)((char *)a1 + *(void *)(*a1 - 96)));
}

BOOL sub_22B204140(uint64_t *a1)
{
  BOOL v2 = sub_22B1EE1E0((uint64_t)a1 + *(void *)(*a1 - 24), *(int **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    uint64_t v3 = sub_22B1EDEC4((uint64_t)a1 + *(void *)(*a1 - 24));
    int v5 = sub_22B1ECAA8((uint64_t)v3, v4);
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = v6 + 704;
    *(unsigned char *)(v6 + 774) = 1;
    int v8 = *(_DWORD *)(v6 + 736) - *(_DWORD *)(v6 + 752) + *(_DWORD *)(v6 + 744);
    sub_22B1F26A0((uint64_t *)(v6 + 704), v5);
    uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24) + 704;
    int v10 = sub_22B1ECAA8(v7, v8);
    sub_22B1EE128(v9, v10);
    if (*((unsigned char *)a1 + 25))
    {
      uint64_t v11 = (uint64_t)a1 + *(void *)(*a1 - 24);
      char v12 = (uint64_t *)(v11 + 896);
      *(unsigned char *)(v11 + 966) = 1;
      int v13 = *(_DWORD *)(v11 + 928) - *(_DWORD *)(v11 + 944) + *(_DWORD *)(v11 + 936);
      unsigned int v14 = sub_22B1EF5C8(v11 + 896, 1);
      sub_22B1ED050(v12, 4, v14);
      sub_22B1EF4B8(v12, 6, 0);
      sub_22B1ED0D4(v12, 8, 0);
      sub_22B1ED0D4(v12, 10, 0);
      int v15 = sub_22B1ECAA8((uint64_t)v12, v13);
      uint64_t v16 = *a1;
      uint64_t v17 = (uint64_t)a1 + *(void *)(*a1 - 24);
      *(unsigned char *)(v17 + 966) = 1;
      int v18 = *(_DWORD *)(v17 + 928) - *(_DWORD *)(v17 + 944) + *(_DWORD *)(v17 + 936);
      if (v15)
      {
        int v19 = v15;
        sub_22B1ECFA8(v17 + 896, 4uLL);
        sub_22B1ED0D4((uint64_t *)(v17 + 896), 8, *(_DWORD *)(v17 + 928) - *(_DWORD *)(v17 + 944) + *(_DWORD *)(v17 + 936) - v19 + 4);
        uint64_t v16 = *a1;
      }
      uint64_t v20 = (uint64_t)a1 + *(void *)(v16 - 24) + 896;
      int v21 = sub_22B1ECAA8(v17 + 896, v18);
      sub_22B1EE128(v20, v21);
    }
  }
  return v2;
}

void sub_22B204380(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B20439C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  sub_22B1D7BF0(v73, "AGCEndOfTileState");
  sub_22B1D7BF0(v71, "emitMask");
  sub_22B1F3BF8(&v92, (const void **)v71);
  sub_22B1D7BF0(v69, "conditionalMask");
  sub_22B1F3BF8(&v93, (const void **)v69);
  sub_22B1D7BF0(v67, "sampleCount");
  sub_22B204B90(&v94, (const void **)v67, *(_DWORD *)(v3 + 76) & 0xFLL);
  sub_22B1D7BF0(v65, "outputPartitionSize");
  sub_22B204B90(&v95, (const void **)v65, (*(void *)(v3 + 72) >> 36) & 0x7FLL);
  sub_22B1D7BF0(v63, "numEmits");
  sub_22B204B90(&v96, (const void **)v63, (*(void *)(v3 + 72) >> 43) & 0x1FLL);
  sub_22B1D7BF0(v61, "dummyEmitIndex");
  sub_22B204B90(&v97, (const void **)v61, *(_WORD *)(v3 + 78) & 0x1FLL);
  sub_22B1D7BF0(v59, "unused");
  sub_22B204B90(&v98, (const void **)v59, *(void *)(v3 + 72) >> 54);
  sub_22B1D7BF0(v57, "encoded : ");
  sub_22B1D7BF0(v55, "encoded[0]");
  sub_22B204BE8(&v54, (unsigned __int8 *)v3);
  sub_22B1F3B10(&v75, (const void **)v55, (uint64_t)&v54);
  sub_22B1D7BF0(v52, "encoded[1]");
  sub_22B204BE8(&v51, (unsigned __int8 *)(v3 + 4));
  sub_22B1F3B10(&v76, (const void **)v52, (uint64_t)&v51);
  sub_22B1D7BF0(v49, "encoded[2]");
  sub_22B204BE8(&v48, (unsigned __int8 *)(v3 + 8));
  sub_22B1F3B10(&v77, (const void **)v49, (uint64_t)&v48);
  sub_22B1D7BF0(v46, "encoded[3]");
  sub_22B204BE8(&v45, (unsigned __int8 *)(v3 + 12));
  sub_22B1F3B10(&v78, (const void **)v46, (uint64_t)&v45);
  sub_22B1D7BF0(v43, "encoded[4]");
  sub_22B204BE8(&v42, (unsigned __int8 *)(v3 + 16));
  sub_22B1F3B10(&v79, (const void **)v43, (uint64_t)&v42);
  sub_22B1D7BF0(v40, "encoded[5]");
  sub_22B204BE8(&v39, (unsigned __int8 *)(v3 + 20));
  sub_22B1F3B10(&v80, (const void **)v40, (uint64_t)&v39);
  sub_22B1D7BF0(v37, "encoded[6]");
  sub_22B204BE8(&v36, (unsigned __int8 *)(v3 + 24));
  sub_22B1F3B10(&v81, (const void **)v37, (uint64_t)&v36);
  sub_22B1D7BF0(v34, "encoded[7]");
  sub_22B204BE8(&v33, (unsigned __int8 *)(v3 + 28));
  sub_22B1F3B10(&v82, (const void **)v34, (uint64_t)&v33);
  sub_22B1D7BF0(v31, "encoded[8]");
  sub_22B204BE8(&v30, (unsigned __int8 *)(v3 + 32));
  sub_22B1F3B10(&v83, (const void **)v31, (uint64_t)&v30);
  sub_22B1D7BF0(v28, "encoded[9]");
  sub_22B204BE8(&v27, (unsigned __int8 *)(v3 + 36));
  sub_22B1F3B10(&v84, (const void **)v28, (uint64_t)&v27);
  sub_22B1D7BF0(v25, "encoded[10]");
  sub_22B204BE8(&v24, (unsigned __int8 *)(v3 + 40));
  sub_22B1F3B10(&v85, (const void **)v25, (uint64_t)&v24);
  sub_22B1D7BF0(v22, "encoded[11]");
  sub_22B204BE8(&v21, (unsigned __int8 *)(v3 + 44));
  sub_22B1F3B10(&v86, (const void **)v22, (uint64_t)&v21);
  sub_22B1D7BF0(v19, "encoded[12]");
  sub_22B204BE8(&v18, (unsigned __int8 *)(v3 + 48));
  sub_22B1F3B10(&v87, (const void **)v19, (uint64_t)&v18);
  sub_22B1D7BF0(v16, "encoded[13]");
  sub_22B204BE8(&v15, (unsigned __int8 *)(v3 + 52));
  sub_22B1F3B10(&v88, (const void **)v16, (uint64_t)&v15);
  sub_22B1D7BF0(v13, "encoded[14]");
  sub_22B204BE8(&v12, (unsigned __int8 *)(v3 + 56));
  sub_22B1F3B10(&v89, (const void **)v13, (uint64_t)&v12);
  sub_22B1D7BF0(v10, "encoded[15]");
  sub_22B204BE8(&v9, (unsigned __int8 *)(v3 + 60));
  sub_22B1F3B10(&v90, (const void **)v10, (uint64_t)&v9);
  sub_22B1D7BF0(v7, "encoded[16]");
  sub_22B204BE8(&__p, (unsigned __int8 *)(v3 + 64));
  sub_22B1F3B10(&v91, (const void **)v7, (uint64_t)&__p);
  sub_22B1F3880(&v99, (uint64_t)v57, (uint64_t)&v75, 17);
  sub_22B1F3880(a2, (uint64_t)v73, (uint64_t)&v92, 8);
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v99.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v99.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  uint64_t v5 = 51;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0) {
      operator delete(v73[v5]);
    }
    v5 -= 3;
  }
  while (v5 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
}

void sub_22B204B90(std::string *a1, const void **a2, unint64_t __val)
{
  std::to_string(&v5, __val);
  sub_22B1F3B10(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_22B204BE8(std::string *a1, unsigned __int8 *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v15, "AGCEmitState");
  sub_22B1D7BF0(v13, "slotIndex");
  sub_22B1F37D0(&v17, (const void **)v13, *a2);
  sub_22B1D7BF0(v11, "channelFormat");
  sub_22B1F37D0(&v18, (const void **)v11, a2[1]);
  sub_22B1D7BF0(v9, "dimension");
  sub_22B1F37D0(&v19, (const void **)v9, a2[2]);
  sub_22B1D7BF0(v7, "gammaCorrection");
  sub_22B1F37D0(&v20, (const void **)v7, HIBYTE(*(_DWORD *)a2) & 1);
  sub_22B1D7BF0(__p, "sparse");
  sub_22B1F37D0(&v21, (const void **)__p, (*(_DWORD *)a2 >> 25) & 1);
  sub_22B1F3880(a1, (uint64_t)v15, (uint64_t)&v17, 5);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v21.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v21.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
}

uint64_t sub_22B204DB4()
{
  return 15;
}

const char *sub_22B204DBC(void *a1)
{
  if ((*(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 40) + 16) + 78) & 0x20) != 0) {
    return "sw_eot";
  }
  else {
    return "eot";
  }
}

void sub_22B204DF8(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 32);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B204E58(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 32);
}

uint64_t sub_22B204E78()
{
  return 15;
}

const char *sub_22B204E80(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 16) + 78) & 0x20) != 0) {
    return "sw_eot";
  }
  else {
    return "eot";
  }
}

void sub_22B204EA4(uint64_t a1)
{
  sub_22B1ED95C(a1 + 32);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B204EF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_22B204F1C(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
  return 0;
}

BOOL sub_22B204F2C(void *a1)
{
  return sub_22B204F48((void *)((char *)a1 + *(void *)(*a1 - 96)));
}

BOOL sub_22B204F48(void *a1)
{
  BOOL v2 = sub_22B1EE1E0((uint64_t)a1 + *(void *)(*a1 - 24), *(int **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    uint64_t v3 = sub_22B1EDEC4((uint64_t)a1 + *(void *)(*a1 - 24));
    int v5 = sub_22B1ECAA8((uint64_t)v3, v4);
    char v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = (uint64_t)(v6 + 704);
    v6[774] = 1;
    int v8 = *((_DWORD *)v6 + 184) - *((_DWORD *)v6 + 188) + *((_DWORD *)v6 + 186);
    sub_22B1F26A0((uint64_t *)v6 + 88, v5);
    uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24) + 704;
    int v10 = sub_22B1ECAA8(v7, v8);
    sub_22B1EE128(v9, v10);
  }
  return v2;
}

void *sub_22B205038@<X0>(void *a1@<X8>)
{
  return sub_22B1D7BF0(a1, "{ /* No compilation key */ }");
}

uint64_t sub_22B205048(void *a1)
{
  return sub_22B205064((uint64_t)a1 + *(void *)(*a1 - 56));
}

uint64_t sub_22B205064(uint64_t a1)
{
  BOOL v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (sub_22B1EC788(v2))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    sub_22B1E69D0(v3, "------ Start compilation key description for %s shader %u  ------", v4, v5, v6, v7, v8, v9, v3);
    int v10 = (*(void *(**)(void **__return_ptr, uint64_t))(*(void *)a1 + 40))(__p, a1);
    if (v29 >= 0) {
      std::string v17 = __p;
    }
    else {
      std::string v17 = (void **)__p[0];
    }
    sub_22B1E69D0((uint64_t)v10, (const char *)v17, v11, v12, v13, v14, v15, v16, v27);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    sub_22B1E69D0(v18, "------ End compilation key description for %s shader %u  ------", v19, v20, v21, v22, v23, v24, v18);
  }
  int v25 = sub_22B1EBFD8(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400), (std::string *)(a1 + *(void *)(*(void *)a1 - 24)), *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320), 16843009, 2);
  uint64_t result = 0;
  if (v25)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    if (result)
    {
      sub_22B200C40(a1 + *(void *)(*(void *)a1 - 24));
      return 1;
    }
  }
  return result;
}

uint64_t sub_22B20523C()
{
  return 14;
}

const char *sub_22B205244()
{
  return "utility";
}

void sub_22B205250(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 8);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B2052B0(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 8);
}

void sub_22B2052D0(uint64_t a1)
{
  sub_22B1ED95C(a1 + 8);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B20531C(uint64_t a1)
{
  return a1;
}

void *sub_22B205348@<X0>(void *a1@<X8>)
{
  return sub_22B1D7BF0(a1, "{ /* No compilation key */ }");
}

uint64_t sub_22B205358(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
  return 0;
}

uint64_t sub_22B205368()
{
  return 14;
}

const char *sub_22B205370()
{
  return "utility";
}

void sub_22B20537C(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B205398(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  sub_22B20349C(&v12, *(void *)(a1 + 544));
  uint64_t v4 = *(_DWORD **)(a1 + 584);
  if (v4)
  {
    sub_22B1D7BF0(&v29, "AGC3DBlitState");
    sub_22B1D7BF0(v27, "blitType");
    sub_22B1F3828(&v30, (const void **)v27, off_26488D9D8[*v4 & 7]);
    sub_22B1D7BF0(v25, "readBufferSampleCount");
    sub_22B1F37D0(&v31, (const void **)v25, (*v4 >> 3) & 0xF);
    sub_22B1D7BF0(v23, "sample3D");
    sub_22B1F37D0(&v32, (const void **)v23, (*v4 >> 7) & 1);
    sub_22B1D7BF0(v21, "regionOffset");
    sub_22B1F37D0(&v33, (const void **)v21, (*v4 >> 8) & 1);
    sub_22B1D7BF0(v19, "remapAddress");
    sub_22B1F37D0(&v34, (const void **)v19, (*v4 >> 9) & 1);
    sub_22B1D7BF0(v17, "remapAddressPOT");
    sub_22B1F37D0(&v35, (const void **)v17, (*v4 >> 10) & 1);
    sub_22B1D7BF0(v15, "strideDiscard");
    sub_22B1F37D0(&v36, (const void **)v15, (*v4 >> 11) & 1);
    sub_22B1D7BF0(__p, "blitTextureFormat");
    sub_22B1F37D0(&v37, (const void **)__p, (*v4 >> 12) & 0x1F);
    sub_22B1F3880(&v11, (uint64_t)&v29, (uint64_t)&v30, 8);
    for (uint64_t i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v37.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v37.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_22B1D7BF0(&v11, (char *)&unk_22B27C63D);
  }
  sub_22B1F42B8((uint64_t)&v29, (const void **)&v12.__r_.__value_.__l.__data_, (const void **)&v11.__r_.__value_.__l.__data_);
  uint64_t v6 = std::string::append(&v29, "\ntoken type : ");
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  unsigned int v8 = *(_DWORD *)(a1 + 592);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E8E90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E8E90))
  {
    sub_22B1D7BF0(qword_2683E8818, "AGCStreamTokenUnknownShader");
    sub_22B1D7BF0(&qword_2683E8818[3], "AGCStreamTokenGLSLVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[6], "AGCStreamTokenGLSLFragmentShader");
    sub_22B1D7BF0(&qword_2683E8818[9], "AGCStreamTokenMetalVertexProgram");
    sub_22B1D7BF0(&qword_2683E8818[12], "AGCStreamTokenMetalFragmentProgram");
    sub_22B1D7BF0(&qword_2683E8818[15], "AGCStreamTokenMetalTileProgram");
    sub_22B1D7BF0(&qword_2683E8818[18], "AGCStreamTokenMetalComputeProgram");
    sub_22B1D7BF0(&qword_2683E8818[21], "AGCStreamTokenClearFragmentShader");
    sub_22B1D7BF0(&qword_2683E8818[24], "AGCStreamTokenResolveFragmentShaderGL");
    sub_22B1D7BF0(&qword_2683E8818[27], "AGCStreamTokenBackgroundObjectFragmentShader");
    sub_22B1D7BF0(&qword_2683E8818[30], "AGCStreamToken3DBlitFragmentShader");
    sub_22B1D7BF0(&qword_2683E8818[33], "AGCStreamTokenTABlitVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[36], "AGCStreamTokenBlitComputeShader");
    sub_22B1D7BF0(&qword_2683E8818[39], "AGCStreamTokenBlitSparseShader");
    sub_22B1D7BF0(&qword_2683E8818[42], "AGCStreamTokenEndOfTileProgram");
    sub_22B1D7BF0(&qword_2683E8818[45], "AGCStreamTokenExecuteIndirectESLGenerationVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[48], "AGCStreamTokenExecuteIndirectRangeExecutionVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[51], "AGCStreamTokenExecuteIndirectRangeExecutionComputeShader");
    sub_22B1D7BF0(&qword_2683E8818[54], "AGCStreamTokenExecuteIndirectCDMPatchUpShader");
    sub_22B1D7BF0(&qword_2683E8818[57], "AGCStreamTokenVisibilityVertexClearShader");
    sub_22B1D7BF0(&qword_2683E8818[60], "AGCStreamTokenTileDispatchVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[63], "AGCStreamTokenClearVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[66], "AGCStreamTokenResolveVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[69], "AGCStreamTokenBlitVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[72], "AGCStreamTokenVDMStateSyncProgram");
    sub_22B1D7BF0(&qword_2683E8818[75], "AGCStreamTokenContextSaveProgram");
    sub_22B1D7BF0(&qword_2683E8818[78], "AGCStreamTokenContextRestoreProgram");
    sub_22B1D7BF0(&qword_2683E8818[81], "AGCStreamTokenToggledContextSaveProgram");
    sub_22B1D7BF0(&qword_2683E8818[84], "AGCStreamTokenToggledContextRestoreProgram");
    sub_22B1D7BF0(&qword_2683E8818[87], "AGCStreamTokenComputeFlushProgram");
    sub_22B1D7BF0(&qword_2683E8818[90], "AGCStreamTokenComputeFlushProgramWithFWInterrupt");
    sub_22B1D7BF0(&qword_2683E8818[93], "AGCStreamTokenComputeFenceProgram");
    sub_22B1D7BF0(&qword_2683E8818[96], "AGCStreamTokenComputeTGSizeOptimizationProgram");
    sub_22B1D7BF0(&qword_2683E8818[99], "AGCStreamTokenSwTessellationNonBucketedEmitDrawCommandsVSProgram");
    sub_22B1D7BF0(&qword_2683E8818[102], "AGCStreamTokenSwTessellationBucketedComputeInstanceCountsVSProgram");
    sub_22B1D7BF0(&qword_2683E8818[105], "AGCStreamTokenSwTessellationBucketedSumInstanceCountsVSProgram");
    sub_22B1D7BF0(&qword_2683E8818[108], "AGCStreamTokenSwTessellationBucketedEmitDrawCommandsVSProgram");
    sub_22B1D7BF0(&qword_2683E8818[111], "AGCStreamTokenVDMNOPDBGProgram");
    sub_22B1D7BF0(&qword_2683E8818[114], "AGCStreamTokenSwTessellationBucketedClearInstanceCountsProgram");
    sub_22B1D7BF0(&qword_2683E8818[117], "AGCStreamTokenUtilityProgram");
    sub_22B1D7BF0(&qword_2683E8818[120], "AGCStreamTokenNumGfxShaders");
    sub_22B1D7BF0(&qword_2683E8818[123], "AGCStreamTokenBitCodeGLIR");
    sub_22B1D7BF0(&qword_2683E8818[126], "AGCStreamTokenVertexContextStateGL");
    sub_22B1D7BF0(&qword_2683E8818[129], "AGCStreamTokenFragmentContextStateGL");
    sub_22B1D7BF0(&qword_2683E8818[132], "AGCStreamTokenVertexContextStateAGP");
    sub_22B1D7BF0(&qword_2683E8818[135], "AGCStreamTokenFragmentContextStateAGP");
    sub_22B1D7BF0(&qword_2683E8818[138], "AGCStreamTokenSamplerRemapState");
    sub_22B1D7BF0(&qword_2683E8818[141], "AGCStreamTokenSamplerPCFState");
    sub_22B1D7BF0(&qword_2683E8818[144], "AGCStreamTokenDrawBufferState");
    sub_22B1D7BF0(&qword_2683E8818[147], "AGCStreamTokenTileState");
    sub_22B1D7BF0(&qword_2683E8818[150], "AGCStreamTokenBackgroundObjectState");
    sub_22B1D7BF0(&qword_2683E8818[153], "AGCStreamTokenEndOfTileState");
    sub_22B1D7BF0(&qword_2683E8818[156], "AGCStreamToken3DBlitState");
    sub_22B1D7BF0(&qword_2683E8818[159], "AGCStreamTokenTABlitState");
    sub_22B1D7BF0(&qword_2683E8818[162], "AGCStreamTokenCDMBlitState");
    sub_22B1D7BF0(&qword_2683E8818[165], "AGCStreamTokenBlitSparseState");
    sub_22B1D7BF0(&qword_2683E8818[168], "AGCStreamTokenVaryingSemantics");
    sub_22B1D7BF0(&qword_2683E8818[171], "AGCStreamTokenVaryingTypes");
    sub_22B1D7BF0(&qword_2683E8818[174], "AGCStreamTokenClearFragmentColorMaskState");
    sub_22B1D7BF0(&qword_2683E8818[177], "AGCStreamTokenComputeContextStateAGP");
    sub_22B1D7BF0(&qword_2683E8818[180], "AGCStreamTokenTexUnitBiasState");
    sub_22B1D7BF0(&qword_2683E8818[183], "AGCStreamTokenTessellationDriverState");
    sub_22B1D7BF0(&qword_2683E8818[186], "AGCStreamTokenExecuteIndirectDriverState");
    sub_22B1D7BF0(&qword_2683E8818[189], "AGCStreamTokenGPUGatherVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[192], "AGCStreamTokenGPUGatherComputeShader");
    sub_22B1D7BF0(&qword_2683E8818[195], "AGCStreamTokenPDSPatchUpVertexShader");
    sub_22B1D7BF0(&qword_2683E8818[198], "AGCStreamTokenPDSPatchUpComputeShader");
    sub_22B1D7BF0(&qword_2683E8818[201], "ACGStreamTokenArch");
    sub_22B1D7BF0(&qword_2683E8818[204], "AGCStreamTokenEnd");
    __cxa_atexit((void (*)(void *))sub_22B205DDC, qword_2683E8818, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E8E90);
  }
  uint64_t v9 = (const std::string::value_type *)&qword_2683E8818[3 * v8];
  if (v9[23] < 0) {
    uint64_t v9 = *(const std::string::value_type **)v9;
  }
  int v10 = std::string::append(&v30, v9);
  *a2 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_22B205DDC(uint64_t a1)
{
  uint64_t v2 = 1656;
  do
  {
    if (*(char *)(a1 + v2 - 1) < 0) {
      operator delete(*(void **)(a1 + v2 - 24));
    }
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t sub_22B205E20()
{
  return 13;
}

const char *sub_22B205E28(void *a1)
{
  int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 40) + 592);
  uint64_t v2 = "texture fetch";
  if (v1 == 10) {
    uint64_t v2 = "blit3D";
  }
  if (v1 == 8) {
    return "resolve_gl";
  }
  else {
    return v2;
  }
}

void sub_22B205E70(void *a1)
{
  sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 600);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B205ED0(void *a1)
{
  return sub_22B1ED95C((uint64_t)a1 + *(void *)(*a1 - 32) + 600);
}

void sub_22B205EF0(uint64_t a1)
{
  sub_22B1ED95C(a1 + 584);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B205F3C(uint64_t a1)
{
  return sub_22B1ED95C(a1 + 584);
}

uint64_t sub_22B205F44()
{
  return 13;
}

const char *sub_22B205F4C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 592);
  uint64_t v2 = "texture fetch";
  if (v1 == 10) {
    uint64_t v2 = "blit3D";
  }
  if (v1 == 8) {
    return "resolve_gl";
  }
  else {
    return v2;
  }
}

void sub_22B205F7C(uint64_t a1)
{
  sub_22B1ED95C(a1 + 600);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B205FC8(uint64_t a1)
{
  return a1;
}

void sub_22B205FF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v2 - 24)) = a2[1];
  *(unsigned char *)(a1 + 8) = 0;
  operator new();
}

uint64_t sub_22B206288(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = llvm::User::operator new((llvm::User *)0x58);
  v15[0] = "agc.region_offsets";
  __int16 v16 = 259;
  uint64_t v7 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v7 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  unsigned int v8 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v16 = 257;
  uint64_t v9 = sub_22B1D4240(v8 + 1, **(llvm::Type ***)(*(void *)v6 + 16), v6, 0, (uint64_t)v15);
  uint64_t v10 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v11 = llvm::ConstantInt::get();
  __int16 v16 = 257;
  *a2 = sub_22B1D6F68(v10, v9, v11, (uint64_t)v15);
  uint64_t v12 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v16 = 257;
  uint64_t v13 = llvm::ConstantInt::get();
  uint64_t result = sub_22B1D7B18(v12, v9, v13, (uint64_t)v15);
  *a3 = result;
  return result;
}

uint64_t sub_22B206454(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v98 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(a4 + 32);
  }
  else {
    unsigned int v7 = 1;
  }
  switch(a2)
  {
    case 11:
      unsigned int v8 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v9 = *((void *)v8 + 43);
      long long v76 = *(_OWORD *)(v8 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v77, (llvm::IRBuilderBase *)(v8 + 8));
      int v78 = *((_DWORD *)v8 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v9 + 96))(v9, &v76, 6, v4, a3, 0, 0);
      if (v77) {
        goto LABEL_26;
      }
      return v10;
    case 12:
      uint64_t v93 = llvm::ConstantInt::get();
      uint64_t v94 = llvm::ConstantInt::get();
      uint64_t v95 = llvm::ConstantInt::get();
      uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v17 = llvm::ConstantVector::get();
      __int16 v92 = 257;
      uint64_t v18 = sub_22B1D69A8(v16, a3, a3, v17, (uint64_t)v91);
      uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v20 = *((void *)v19 + 43);
      long long v88 = *(_OWORD *)(v19 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v89, (llvm::IRBuilderBase *)(v19 + 8));
      int v90 = *((_DWORD *)v19 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t, uint64_t, uint64_t, void))(*(void *)v20 + 96))(v20, &v88, 0, v4, v18, 1, 0);
      if (v89) {
        goto LABEL_26;
      }
      return v10;
    case 13:
      uint64_t v93 = llvm::ConstantInt::get();
      uint64_t v94 = llvm::ConstantInt::get();
      uint64_t v95 = llvm::ConstantInt::get();
      uint64_t v96 = llvm::ConstantInt::get();
      uint64_t v21 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v22 = llvm::ConstantVector::get();
      __int16 v92 = 257;
      uint64_t v23 = sub_22B1D69A8(v21, a3, a3, v22, (uint64_t)v91);
      char v24 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v25 = *((void *)v24 + 43);
      long long v85 = *(_OWORD *)(v24 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v86, (llvm::IRBuilderBase *)(v24 + 8));
      int v87 = *((_DWORD *)v24 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v25 + 96))(v25, &v85, 1, v4, v23, 1, 0);
      if (v86) {
        goto LABEL_26;
      }
      return v10;
    case 14:
      uint64_t v93 = llvm::ConstantInt::get();
      uint64_t v94 = llvm::ConstantInt::get();
      uint64_t v95 = llvm::ConstantInt::get();
      uint64_t v96 = llvm::ConstantInt::get();
      uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v27 = llvm::ConstantVector::get();
      __int16 v92 = 257;
      uint64_t v28 = sub_22B1D69A8(v26, a3, a3, v27, (uint64_t)v91);
      std::string v29 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v30 = *((void *)v29 + 43);
      long long v82 = *(_OWORD *)(v29 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v83, (llvm::IRBuilderBase *)(v29 + 8));
      int v84 = *((_DWORD *)v29 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v30 + 96))(v30, &v82, 2, v4, v28, 1, 0);
      if (v83) {
        goto LABEL_26;
      }
      return v10;
    case 15:
      uint64_t v93 = llvm::ConstantInt::get();
      uint64_t v94 = llvm::ConstantInt::get();
      uint64_t v95 = llvm::ConstantInt::get();
      uint64_t v96 = llvm::ConstantInt::get();
      uint64_t v31 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v32 = llvm::ConstantVector::get();
      __int16 v92 = 257;
      uint64_t v33 = sub_22B1D69A8(v31, a3, a3, v32, (uint64_t)v91);
      std::string v34 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v35 = *((void *)v34 + 43);
      long long v79 = *(_OWORD *)(v34 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v80, (llvm::IRBuilderBase *)(v34 + 8));
      int v81 = *((_DWORD *)v34 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v35 + 96))(v35, &v79, 3, v4, v33, 1, 0);
      if (v80) {
        goto LABEL_26;
      }
      return v10;
    case 16:
      std::string v36 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v37 = *((void *)v36 + 43);
      long long v73 = *(_OWORD *)(v36 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v74, (llvm::IRBuilderBase *)(v36 + 8));
      int v75 = *((_DWORD *)v36 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v37 + 96))(v37, &v73, 7, v4, a3, 0, 0);
      if (v74) {
        goto LABEL_26;
      }
      return v10;
    case 17:
      uint64_t v38 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v39 = *((void *)v38 + 43);
      long long v70 = *(_OWORD *)(v38 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v71, (llvm::IRBuilderBase *)(v38 + 8));
      int v72 = *((_DWORD *)v38 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v39 + 96))(v39, &v70, 8, v4, a3, 0, 0);
      if (v71) {
        goto LABEL_26;
      }
      return v10;
    case 18:
      uint64_t v40 = llvm::ConstantFP::get();
      uint64_t v41 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v92 = 257;
      uint64_t v42 = llvm::ConstantInt::get();
      uint64_t v43 = sub_22B242524(v41, a3, v42, (uint64_t)v91);
      char v44 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v45 = (uint64_t)(v44 + 8);
      uint64_t v46 = *((void *)v44 + 20);
      __int16 v92 = 257;
      uint64_t v47 = sub_22B1D7384((uint64_t)(v44 + 8), 49, v43, v46, (uint64_t)v91);
      __int16 v97 = 257;
      uint64_t v48 = sub_22B1DB138(v45, v47, v40, (uint64_t)&v93);
      uint64_t v49 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 192);
      __int16 v69 = 257;
      return sub_22B1D78D4(v45, v48, v49, (uint64_t)v68);
    case 19:
      uint64_t v93 = llvm::ConstantInt::get();
      uint64_t v94 = llvm::ConstantInt::get();
      uint64_t v95 = llvm::ConstantInt::get();
      uint64_t v96 = llvm::ConstantInt::get();
      uint64_t v51 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v52 = llvm::ConstantVector::get();
      __int16 v92 = 257;
      uint64_t v53 = sub_22B1D69A8(v51, a3, a3, v52, (uint64_t)v91);
      std::string v54 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v55 = *((void *)v54 + 43);
      long long v65 = *(_OWORD *)(v54 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v66, (llvm::IRBuilderBase *)(v54 + 8));
      int v67 = *((_DWORD *)v54 + 26);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v55 + 120))(v55, &v65, v53);
      if (v66) {
LABEL_26:
      }
        llvm::MetadataTracking::untrack();
      return v10;
    default:
      if (v7 == 4)
      {
        uint64_t v15 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        __int16 v92 = 257;
        char v14 = (uint64_t *)v91;
        uint64_t v13 = a3;
      }
      else
      {
        if (v7 != 1)
        {
          uint64_t v10 = llvm::UndefValue::get();
          if (v7)
          {
            uint64_t v57 = 0;
            uint64_t v58 = v7;
            do
            {
              uint64_t v59 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
              __int16 v92 = 257;
              uint64_t v60 = llvm::ConstantInt::get();
              uint64_t v61 = sub_22B242524(v59, a3, v60, (uint64_t)v91);
              uint64_t v62 = v4;
              if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
                uint64_t v62 = **(void **)(v4 + 16);
              }
              __int16 v97 = 257;
              uint64_t v63 = sub_22B1D77F0(v59, v61, v62, 0, (uint64_t)&v93);
              __int16 v69 = 257;
              uint64_t v64 = llvm::ConstantInt::get();
              uint64_t v10 = sub_22B2427EC(v59, v10, v63, v64, (uint64_t)v68);
              ++v57;
            }
            while (v58 != v57);
          }
          return v10;
        }
        uint64_t v11 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        __int16 v92 = 257;
        uint64_t v12 = llvm::ConstantInt::get();
        uint64_t v13 = sub_22B242524(v11, a3, v12, (uint64_t)v91);
        if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
          uint64_t v4 = **(void **)(v4 + 16);
        }
        __int16 v97 = 257;
        char v14 = &v93;
        uint64_t v15 = v11;
      }
      return sub_22B1D77F0(v15, v13, v4, 0, (uint64_t)v14);
  }
}

uint64_t sub_22B207110(uint64_t result, void *a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 176);
      goto LABEL_14;
    case 2:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 184);
      goto LABEL_14;
    case 3:
    case 18:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 192);
      goto LABEL_16;
    case 4:
      int v7 = 0;
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 160);
      goto LABEL_17;
    case 5:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 224);
      goto LABEL_14;
    case 6:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 232);
      goto LABEL_14;
    case 7:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 240);
      goto LABEL_16;
    case 8:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 280);
      goto LABEL_14;
    case 9:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 288);
LABEL_14:
      int v7 = 7;
      goto LABEL_17;
    case 10:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 296);
LABEL_16:
      int v7 = 6;
LABEL_17:
      uint64_t v6 = v4;
      break;
    case 11:
      unsigned int v8 = (char *)a2 + *(void *)(*a2 - 24);
      uint64_t v4 = *((void *)v8 + 24);
      uint64_t v6 = *((void *)v8 + 36);
      int v7 = 7;
      break;
    case 12:
      uint64_t v5 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v5[23];
      goto LABEL_20;
    case 13:
    case 14:
    case 15:
      uint64_t v3 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v3[23];
      goto LABEL_22;
    case 16:
    case 17:
      uint64_t v5 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v5[24];
LABEL_20:
      uint64_t v6 = v5[31];
      goto LABEL_23;
    case 19:
      uint64_t v3 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v3[36];
LABEL_22:
      uint64_t v6 = v3[33];
LABEL_23:
      int v7 = 1;
      break;
    default:
      uint64_t v4 = 0;
      uint64_t v6 = 0;
      int v7 = 9;
      break;
  }
  *(void *)uint64_t result = v6;
  *(void *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = v7;
  return result;
}

uint64_t sub_22B2073A4(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 11:
      int v7 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v8 = *((void *)v7 + 43);
      long long v54 = *(_OWORD *)(v7 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v55, (llvm::IRBuilderBase *)(v7 + 8));
      int v56 = *((_DWORD *)v7 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      a3 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 104))(v8, &v54, 6, a4, a3, 0, 0);
      if (v55) {
        goto LABEL_31;
      }
      return a3;
    case 12:
      uint64_t v9 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v10 = *((void *)v9 + 43);
      long long v68 = *(_OWORD *)(v9 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v69, (llvm::IRBuilderBase *)(v9 + 8));
      int v70 = *((_DWORD *)v9 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t, uint64_t, uint64_t, void))(*(void *)v10 + 104))(v10, &v68, 0, a4, a3, 1, 0);
      if (v69) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v71 = llvm::ConstantInt::get();
      uint64_t v72 = llvm::ConstantInt::get();
      uint64_t v73 = llvm::ConstantInt::get();
      uint64_t v12 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      goto LABEL_37;
    case 13:
      uint64_t v13 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v14 = *((void *)v13 + 43);
      long long v63 = *(_OWORD *)(v13 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v64, (llvm::IRBuilderBase *)(v13 + 8));
      int v65 = *((_DWORD *)v13 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 104))(v14, &v63, 1, a4, a3, 1, 0);
      if (v64) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 14:
      uint64_t v15 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v16 = *((void *)v15 + 43);
      long long v60 = *(_OWORD *)(v15 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v61, (llvm::IRBuilderBase *)(v15 + 8));
      int v62 = *((_DWORD *)v15 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 104))(v16, &v60, 2, a4, a3, 1, 0);
      if (!v61) {
        goto LABEL_15;
      }
LABEL_14:
      llvm::MetadataTracking::untrack();
LABEL_15:
      uint64_t v71 = llvm::ConstantInt::get();
      uint64_t v72 = llvm::ConstantInt::get();
      uint64_t v73 = llvm::ConstantInt::get();
      goto LABEL_36;
    case 15:
      uint64_t v17 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v18 = *((void *)v17 + 43);
      long long v57 = *(_OWORD *)(v17 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v58, (llvm::IRBuilderBase *)(v17 + 8));
      int v59 = *((_DWORD *)v17 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v18 + 104))(v18, &v57, 3, a4, a3, 1, 0);
      if (v58) {
        goto LABEL_34;
      }
      goto LABEL_35;
    case 16:
      uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v20 = *((void *)v19 + 43);
      long long v51 = *(_OWORD *)(v19 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v52, (llvm::IRBuilderBase *)(v19 + 8));
      int v53 = *((_DWORD *)v19 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      a3 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v20 + 104))(v20, &v51, 7, a4, a3, 0, 0);
      if (!v52) {
        return a3;
      }
      goto LABEL_31;
    case 17:
      uint64_t v21 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v22 = *((void *)v21 + 43);
      long long v48 = *(_OWORD *)(v21 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v49, (llvm::IRBuilderBase *)(v21 + 8));
      int v50 = *((_DWORD *)v21 + 26);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      a3 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v22 + 104))(v22, &v48, 8, a4, a3, 0, 0);
      if (v49) {
LABEL_31:
      }
        llvm::MetadataTracking::untrack();
      return a3;
    case 18:
      uint64_t v23 = llvm::ConstantFP::get();
      uint64_t v24 = llvm::ConstantInt::get();
      uint64_t v25 = llvm::ConstantInt::get();
      uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v27 = llvm::ConstantInt::get();
      __int16 v67 = 257;
      uint64_t v28 = (llvm::Type ***)sub_22B1D6F68(v26, a3, v27, (uint64_t)v66);
      uint64_t v29 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v67 = 257;
      uint64_t v30 = sub_22B1D6A70(v29, (uint64_t)v28, v24, (uint64_t)v66);
      uint64_t v31 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160);
      __int16 v75 = 257;
      sub_22B1D7384(v29, 49, v30, v31, (uint64_t)&v71);
      uint64_t v32 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v33 = (uint64_t)(v32 + 8);
      uint64_t v34 = *((void *)v32 + 20);
      __int16 v67 = 257;
      uint64_t v35 = sub_22B1DB6A8((uint64_t)(v32 + 8), (uint64_t)v28, v34, (uint64_t)v66);
      __int16 v75 = 257;
      sub_22B1F860C(v33, v35, v23, (uint64_t)&v71);
      std::string v36 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 8);
      __int16 v67 = 257;
      sub_22B1D4340(v36, 34, v28, v25, (uint64_t)v66);
      __int16 v67 = 257;
      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
      uint64_t v38 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v39 = *((void *)v38 + 24);
      __int16 v67 = 257;
      uint64_t v40 = sub_22B1D7384((uint64_t)(v38 + 8), 49, Select, v39, (uint64_t)v66);
      goto LABEL_38;
    case 19:
      uint64_t v41 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v42 = *((void *)v41 + 43);
      long long v45 = *(_OWORD *)(v41 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v46, (llvm::IRBuilderBase *)(v41 + 8));
      int v47 = *((_DWORD *)v41 + 26);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v42 + 112))(v42, &v45, a3);
      if (v46) {
LABEL_34:
      }
        llvm::MetadataTracking::untrack();
LABEL_35:
      uint64_t v71 = llvm::ConstantInt::get();
      uint64_t v72 = llvm::ConstantInt::get();
      uint64_t v73 = llvm::ConstantInt::get();
LABEL_36:
      uint64_t v74 = llvm::ConstantInt::get();
      uint64_t v12 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
LABEL_37:
      uint64_t v43 = llvm::ConstantVector::get();
      __int16 v67 = 257;
      uint64_t v40 = sub_22B1D69A8(v12, v11, v11, v43, (uint64_t)v66);
LABEL_38:
      a3 = v40;
      break;
    default:
      return a3;
  }
  return a3;
}

uint64_t sub_22B207E20(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x230F420D0](v3, v2, 0, 0);
  __int16 v9 = 257;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v3, v8, a1[6], a1[7]);
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      uint64_t result = llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_22B207EDC(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_22B1ED7E0(a1 + 24, a2, a3);
  sub_22B205FF4(a1, (uint64_t *)off_26DE723A0);
}

uint64_t sub_22B208338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 104))(*(void *)(a1 + 72));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      sub_22B1D6EE0((uint64_t *)a1, v6, a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0((uint64_t *)a1, v6, a4);
  }
  return v6;
}

void sub_22B208410(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_22B1ED7E0(a1 + 24, a2, a3);
  sub_22B205FF4(a1, (uint64_t *)off_26DE724E0);
}

void sub_22B208C34(uint64_t a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v11 = 0;
  uint64_t v4 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
  *(_DWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v4 + 312))(v4, &v11, 4);
  uint64_t v5 = a1 + *(void *)(*(void *)a1 - 24);
  if (v11)
  {
    size_t v6 = 8 * v11;
    BOOL v7 = (char *)operator new(v6);
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(v5 + 192);
    do
    {
      *(void *)&v7[v8] = v9;
      v8 += 8;
    }
    while (v6 != v8);
  }
  strlen(off_26488D820[*a2 & 7]);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  *(void *)(a1 + 16) = v10;
  *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x660;
  operator new();
}

void sub_22B2095A8(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_22B1ED7E0(a1 + 48, a2, a3);
  sub_22B205FF4(a1, (uint64_t *)off_26DE72620);
}

void sub_22B20B97C(uint64_t a1, uint64_t a2)
{
}

void sub_22B20BAF8(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
}

void sub_22B20BE68(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_22B1ED7E0(a1 + 592, a2, a3);
  sub_22B20B97C(a1, (uint64_t)off_26DE72920);
}

llvm::Value *sub_22B20D1E8(uint64_t *a1, unsigned int a2, _DWORD *a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  llvm::FixedVectorType::get();
  uint64_t v10 = llvm::User::operator new((llvm::User *)0x58);
  uint64_t v11 = a2;
  uint64_t v74 = "agc.pbe_words";
  v76[0] = a2;
  LOWORD(v77) = 2051;
  llvm::GlobalVariable::GlobalVariable();
  uint64_t v12 = *(const char **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1616);
  uint64_t v61 = a6;
  if (v12) {
    strlen(v12);
  }
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  uint64_t v13 = llvm::User::operator new((llvm::User *)0x58);
  llvm::FixedVectorType::get();
  uint64_t v74 = "agc.emit_info";
  v76[0] = a2;
  LOWORD(v77) = 2051;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v63 = v13;
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  uint64_t v14 = *(unsigned __int8 *)(a1[2] + 4 * a2);
  if (*a3 != v14)
  {
    uint64_t v15 = *a1;
    int v59 = a3;
    if (*(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1480))
    {
      uint64_t v16 = llvm::User::operator new((llvm::User *)0x58);
      llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 336), (llvm::LLVMContext *)1);
      uint64_t v74 = "agc.framebuffer_slot";
      v76[0] = v14;
      LOWORD(v77) = 2051;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v17 = (uint64_t)a1 + *(void *)(*a1 - 24);
      LOWORD(v77) = 257;
      uint64_t v18 = sub_22B1D4240((uint64_t *)(v17 + 8), **(llvm::Type ***)(*(void *)v16 + 16), v16, 0, (uint64_t)&v74);
      uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v20 = *(void *)(v19 + 344);
      uint64_t v21 = *(void *)(v20 + 1480);
      if (v21) {
        size_t v22 = strlen(*(const char **)(v20 + 1480));
      }
      else {
        size_t v22 = 0;
      }
      uint64_t v24 = sub_22B1DB218(v19, v21, v22, *(void *)(v19 + 192), *(void *)(v19 + 192));
      uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24);
      __src[0] = llvm::ConstantInt::get();
      LOWORD(v77) = 257;
      uint64_t v23 = sub_22B1D4034(v25 + 8, *(void *)(v24 + 24), v24, (uint64_t)__src, 1, (uint64_t)&v74);
      uint64_t v15 = *a1;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v26 = (uint64_t)a1 + *(void *)(v15 - 24);
    uint64_t v27 = *(void *)(v26 + 344);
    long long v69 = *(_OWORD *)(v26 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v70, (llvm::IRBuilderBase *)(v26 + 8));
    int v71 = *(_DWORD *)(v26 + 104);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t, uint64_t, llvm::Value *, void))(*(void *)v27 + 232))(v27, &v69, a2 & 7, a1[2], v18, v23, *((unsigned __int8 *)a1 + 25));
    if (v70) {
      llvm::MetadataTracking::untrack();
    }
    if (v28)
    {
      uint64_t v29 = (uint64_t)a1 + *(void *)(*a1 - 24);
      *(void *)(v29 + 56) = v28;
      *(void *)(v29 + 64) = v28 + 40;
    }
    *int v59 = v14;
  }
  if (v61)
  {
    uint64_t v74 = "cond_emit";
    LOWORD(v77) = 259;
    operator new();
  }
  if ((*(_DWORD *)(a1[2] + 4 * a2) & 0x2000000) != 0)
  {
    *((unsigned char *)a1 + 24) = 1;
    uint64_t v30 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    if (*(void *)(v30 + 1456)) {
      strlen(*(const char **)(v30 + 1456));
    }
    uint64_t v31 = sub_22B1DCB28();
    uint64_t v32 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    if (*(void *)(v32 + 1464)) {
      strlen(*(const char **)(v32 + 1464));
    }
    uint64_t v33 = sub_22B1DCB28();
    uint64_t v34 = (uint64_t)a1 + *(void *)(*a1 - 24);
    LOWORD(v77) = 257;
    int v62 = sub_22B1D4034(v34 + 8, **(void **)(*(void *)v31 + 16), v31, 0, 0, (uint64_t)&v74);
    uint64_t v35 = (uint64_t)a1 + *(void *)(*a1 - 24);
    LOWORD(v77) = 257;
    long long v60 = sub_22B1D4034(v35 + 8, **(void **)(*(void *)v33 + 16), v33, 0, 0, (uint64_t)&v74);
    std::string v36 = (unsigned char *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    uint64_t v74 = "agc.sstt_address";
    v76[0] = a2;
    LOWORD(v77) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    v36[80] |= 1u;
    llvm::GlobalObject::setSection();
    sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    uint64_t v37 = (uint64_t)a1 + *(void *)(*a1 - 24);
    LOWORD(v77) = 257;
    uint64_t v58 = sub_22B1D4240((uint64_t *)(v37 + 8), **(llvm::Type ***)(*(void *)v36 + 16), (uint64_t)v36, 0, (uint64_t)&v74);
    uint64_t v38 = (unsigned char *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    uint64_t v74 = "agc.queue_address";
    v76[0] = a2;
    LOWORD(v77) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    v38[80] |= 1u;
    llvm::GlobalObject::setSection();
    sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    uint64_t v39 = (uint64_t)a1 + *(void *)(*a1 - 24);
    LOWORD(v77) = 257;
    uint64_t v40 = (char *)sub_22B1D4240((uint64_t *)(v39 + 8), **(llvm::Type ***)(*(void *)v38 + 16), (uint64_t)v38, 0, (uint64_t)&v74);
    uint64_t v41 = llvm::User::operator new((llvm::User *)0x58);
    uint64_t v74 = "agc.slice_level";
    v76[0] = a2;
    LOWORD(v77) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    uint64_t v42 = (uint64_t)a1 + *(void *)(*a1 - 24);
    LOWORD(v77) = 257;
    uint64_t v43 = sub_22B1D4240((uint64_t *)(v42 + 8), **(llvm::Type ***)(*(void *)v41 + 16), v41, 0, (uint64_t)&v74);
    uint64_t v44 = llvm::PointerType::get();
    uint64_t v45 = llvm::PointerType::get();
    uint64_t v46 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v47 = *(void *)(v46 + 160);
    uint64_t v48 = *(void *)(v46 + 192);
    __src[0] = v44;
    __src[1] = v45;
    void __src[2] = v47;
    void __src[3] = v47;
    uint64_t v73 = v48;
    uint64_t v74 = (char *)v76;
    uint64_t v75 = 0x500000000;
    sub_22B1D8088((unsigned int *)&v74, __src, &v74);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v50 = v49;
    if (v74 != (char *)v76) {
      free(v74);
    }
    uint64_t v74 = v40;
    uint64_t v75 = v58;
    v76[0] = v62;
    v76[1] = v60;
    uint64_t v77 = v43;
    uint64_t v51 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    LOWORD(v73) = 257;
    sub_22B1D4034(v51, *(void *)(v50 + 24), v50, (uint64_t)&v74, 5, (uint64_t)__src);
  }
  uint64_t v52 = (uint64_t)a1 + *(void *)(*a1 - 24);
  uint64_t v53 = *(void *)(v52 + 344);
  long long v66 = *(_OWORD *)(v52 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v67, (llvm::IRBuilderBase *)(v52 + 8));
  int v68 = *(_DWORD *)(v52 + 104);
  uint64_t result = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v53 + 224))(v53, &v66, v10, a4, a1[2] + 4 * v11, v63, 0);
  if (v67) {
    uint64_t result = (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  if (a5)
  {
    uint64_t v55 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v56 = *(void *)(v55 + 344);
    if (*(void *)(v56 + 1544)) {
      strlen(*(const char **)(v56 + 1544));
    }
    uint64_t v57 = sub_22B1DCB28();
    LOWORD(v77) = 257;
    return sub_22B1D4034(v55 + 8, **(void **)(*(void *)v57 + 16), v57, 0, 0, (uint64_t)&v74);
  }
  return result;
}

void sub_22B20E034(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
}

uint64_t *sub_22B20E5E4(uint64_t *a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_22B1ED7E0((uint64_t)(a1 + 1), a2, a3);
  *a1 = (uint64_t)&unk_26DE72AC0;
  a1[1] = (uint64_t)&unk_26DE72B68;
  sub_22B1D7BF0(__p, "utility_program");
  uint64_t v5 = sub_22B1EB8B0((uint64_t)a3, (const UInt8 *)__p);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 320) = v5;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    uint64_t v6 = *a1;
  }
  *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v6 - 24) + 344) + 320) = *(uint64_t *)((char *)a1
                                                                                        + *(void *)(v6 - 24)
                                                                                        + 320);
  uint64_t Function = llvm::Module::getFunction();
  __p[0] = *(void **)(Function + 112);
  llvm::AttributeList::getFnAttrs((llvm::AttributeList *)__p);
  uint64_t v10 = (void *)llvm::AttributeSet::addAttribute();
  LODWORD(__p[0]) = -1;
  __p[1] = v10;
  *(void *)(Function + 112) = llvm::AttributeList::get();
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  __p[0] = "agc.main";
  __int16 v13 = 259;
  llvm::Value::setName();
  sub_22B1EF0E8();
  uint64_t v8 = *a1;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 104) = -1;
  *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v8 - 24) + 344) + 104) = -1;
  return a1;
}

void sub_22B20E87C()
{
  uint64_t v0 = sub_22B1DCB28();
  *(_WORD *)(v0 + 18) = *(_WORD *)(v0 + 18) & 0xC00F | 0x650;
  operator new();
}

uint64_t sub_22B20F6A4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v15 = 257;
  *a4 = sub_22B208338(v9, a2, a3, (uint64_t)v14);
  uint64_t v10 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  v13[16] = 257;
  uint64_t result = sub_22B1DB2F4((uint64_t)v10, 22, a2, a3, (uint64_t)v13);
  uint64_t v12 = result;
  if (!result)
  {
    __int16 v15 = 257;
    uint64_t v12 = llvm::BinaryOperator::Create();
    uint64_t result = sub_22B1D6EE0(v10, v12, (uint64_t)v13);
  }
  *a5 = v12;
  return result;
}

void sub_22B20F790(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_22B1ED7E0(a1 + 600, a2, a3);
  sub_22B20B97C(a1, (uint64_t)off_26DE72D18);
}

uint64_t sub_22B212008(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(this);
    }
    *((void *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList(this);
    }
  }
  return a2;
}

uint64_t sub_22B212078(int a1, llvm::Type *this, int a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  llvm::Type::getScalarSizeInBits(this);
  *a6 = llvm::IntegerType::get();
  uint64_t result = llvm::Type::getScalarSizeInBits(this);
  switch(result)
  {
    case 0x20:
      if (!a3) {
        goto LABEL_10;
      }
      break;
    case 0x10:
      if (!a3) {
        goto LABEL_10;
      }
      break;
    case 8:
      if (a3) {
        break;
      }
LABEL_10:
      *a4 = llvm::ConstantInt::get();
      uint64_t result = llvm::ConstantInt::get();
      goto LABEL_11;
    default:
      return result;
  }
  *a4 = llvm::ConstantInt::getSigned();
  uint64_t result = llvm::ConstantInt::getSigned();
LABEL_11:
  *a5 = result;
  return result;
}

uint64_t sub_22B2121B8(uint64_t a1, llvm::Type **a2, llvm::Type *a3, uint64_t a4)
{
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  unsigned int v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9) {
      return (uint64_t)a2;
    }
    uint64_t v10 = 38;
  }
  else
  {
    uint64_t v10 = 40;
  }
  return sub_22B1D7384(a1, v10, (uint64_t)a2, (uint64_t)a3, a4);
}

uint64_t sub_22B212258(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_22B1DB2F4((uint64_t)a1, 30, a2, a3, a4);
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    sub_22B1D6EE0(a1, v6, a4);
  }
  return v6;
}

uint64_t sub_22B2122F0(const void *a1, size_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (!a2) {
    return 1;
  }
  uint64_t v17 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x263F08850], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", @"/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX", 1, 0, &v17) & 1) == 0)
  {
    syslog(3, "Unable to create log directory");
    return 0;
  }
  uint64_t v10 = NSString;
  if (qword_2683E8EA0 != -1) {
    dispatch_once(&qword_2683E8EA0, &unk_26DE73AC0);
  }
  uint64_t v11 = (void *)[v10 stringWithFormat:@"%@/%s_%@_%s.log", @"/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX", a3, objc_msgSend((id)qword_2683E8E98, "stringFromDate:", objc_msgSend(MEMORY[0x263EFF910], "date")), a4];
  uint64_t v12 = fopen((const char *)[v11 UTF8String], "wb");
  if (!v12)
  {
    [v11 UTF8String];
    syslog(3, "Failure to create log file: %s");
    return 0;
  }
  __int16 v13 = v12;
  if (a5 && fwrite(a5, 1uLL, 4uLL, v12) != 4 || (uint64_t v14 = 1, v15 = fwrite(a1, 1uLL, a2, v13), fclose(v13), v15 != a2))
  {
    [v11 UTF8String];
    syslog(3, "Failed to write log file (wrote %zu bytes, expected %zu bytes): %s");
    return 0;
  }
  return v14;
}

uint64_t sub_22B2124B0()
{
  qword_2683E8E98 = (uint64_t)objc_alloc_init(MEMORY[0x263F08790]);
  [(id)qword_2683E8E98 setDateStyle:1];
  uint64_t v0 = qword_2683E8E98;
  return MEMORY[0x270F9A6D0](v0, sel_setDateFormat_);
}

BOOL sub_22B212504(void *a1)
{
  return sub_22B212520((void *)((char *)a1 + *(void *)(*a1 - 96)));
}

BOOL sub_22B212520(void *a1)
{
  BOOL v2 = sub_22B1EE1E0((uint64_t)a1 + *(void *)(*a1 - 24), *(int **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    int v3 = sub_22B240748((uint64_t)a1);
    int v4 = sub_22B24E75C((uint64_t)a1);
    uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v6 = (uint64_t *)(v5 + 704);
    v5[774] = 1;
    int v7 = *((_DWORD *)v5 + 184) - *((_DWORD *)v5 + 188) + *((_DWORD *)v5 + 186);
    sub_22B1F26A0((uint64_t *)v5 + 88, v3);
    sub_22B1F2710(v6, v4);
    uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 704;
    int v9 = sub_22B1ECAA8((uint64_t)v6, v7);
    sub_22B1EE128(v8, v9);
  }
  return v2;
}

void sub_22B21261C(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B212638(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  int v4 = (unsigned int *)a1[478];
  sub_22B1D7BF0(v49, "AGCFragmentContextStateGL");
  sub_22B1D7BF0(&v54, "AGCFragmentContextState");
  sub_22B1D7BF0(v52, "fragmentState");
  sub_22B1D7BF0(&v90, "AGCFragmentState");
  sub_22B1D7BF0(&v75, "GL and Metal state:");
  sub_22B1D7BF0(&v73, "alphaToCoverage");
  sub_22B1F37D0(&v76, (const void **)&v73.__r_.__value_.__l.__data_, *v4 & 1);
  sub_22B1D7BF0(v71, "alphaToOne");
  sub_22B1F37D0(&v77, (const void **)v71, (*v4 >> 1) & 1);
  sub_22B1D7BF0(v69, "sampleCoverage");
  sub_22B1F37D0(&v78, (const void **)v69, (*v4 >> 2) & 1);
  sub_22B1D7BF0(&v79, "GL specific state:");
  sub_22B1D7BF0(v67, "depthStencilWriteDisabled");
  sub_22B1F37D0(&v80, (const void **)v67, (*v4 >> 4) & 1);
  sub_22B1D7BF0(&v66, "logicOp");
  sub_22B1F37D0(&v81, (const void **)&v66.__r_.__value_.__l.__data_, (*v4 >> 5) & 1);
  sub_22B1D7BF0(v64, "logicOpState");
  sub_22B1F3828(&v82, (const void **)v64, off_26488DA30[((unint64_t)*v4 >> 6) & 0x1F]);
  sub_22B1D7BF0(&v63, "alphaTest");
  sub_22B1F37D0(&v83, (const void **)&v63.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  sub_22B1D7BF0(&v62, "alphaTestFunc");
  sub_22B1F3828(&v84, (const void **)&v62.__r_.__value_.__l.__data_, off_26488DAB8[(unsigned __int16)*v4 >> 12]);
  sub_22B1D7BF0(&v61, "smoothPoints");
  sub_22B1F37D0(&v85, (const void **)&v61.__r_.__value_.__l.__data_, HIWORD(*v4) & 1);
  sub_22B1D7BF0(&v60, "pointSpriteEnabled");
  sub_22B1F37D0(&v86, (const void **)&v60.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  sub_22B1D7BF0(v58, "outputPointSize");
  sub_22B1F37D0(&v87, (const void **)v58, (*v4 >> 18) & 1);
  sub_22B1D7BF0(&v57, "shaderDebugEnable");
  sub_22B1F37D0(&v88, (const void **)&v57.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  sub_22B1D7BF0(__p, "unused");
  sub_22B1F37D0(&v89, (const void **)__p, *v4 >> 20);
  sub_22B21395C(&v51, (uint64_t)&v90, 0, (uint64_t)&v75, 15);
  uint64_t v5 = 360;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 - 1] < 0) {
      operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + v5));
    }
    v5 -= 24;
  }
  while (v5);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  sub_22B1F3B10(&v90, (const void **)v52, (uint64_t)&v51);
  sub_22B1D7BF0(v64, "colorMaskState");
  sub_22B1D7BF0(&v73, "AGCColorMaskState");
  sub_22B1D7BF0(v71, "redEnableBits");
  sub_22B213BFC(&v75, (const void **)v71);
  sub_22B1D7BF0(v69, "greenEnableBits");
  sub_22B213BFC(&v76, (const void **)v69);
  sub_22B1D7BF0(v67, "blueEnableBits");
  sub_22B213BFC(&v77, (const void **)v67);
  sub_22B1D7BF0(&v66, "alphaEnableBits");
  sub_22B213BFC(&v78, (const void **)&v66.__r_.__value_.__l.__data_);
  sub_22B21395C(&v63, (uint64_t)&v73, 0, (uint64_t)&v75, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v78.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v78.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  sub_22B1F3B10(&v91, (const void **)v64, (uint64_t)&v63);
  sub_22B21395C(&v73, (uint64_t)&v54, 0, (uint64_t)&v90, 2);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v91.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v90 + j * 8 + 24));
    }
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  sub_22B1D7BF0(&v61, "blendState");
  sub_22B1D7BF0(&v90, "AGCBlendState");
  sub_22B1D7BF0(v71, "enabled");
  if (v4[4]) {
    uint64_t v8 = "yes";
  }
  else {
    uint64_t v8 = "no";
  }
  sub_22B1F3828(&v75, (const void **)v71, v8);
  sub_22B1D7BF0(v69, "src");
  sub_22B1F3828(&v76, (const void **)v69, off_26488DB00[((unint64_t)v4[4] >> 1) & 0x1F]);
  sub_22B1D7BF0(v67, "dst");
  sub_22B1F3828(&v77, (const void **)v67, off_26488DB00[((unint64_t)v4[4] >> 6) & 0x1F]);
  sub_22B1D7BF0(&v66, "srcA");
  sub_22B1F3828(&v78, (const void **)&v66.__r_.__value_.__l.__data_, off_26488DB00[(unsigned __int16)v4[4] >> 11]);
  sub_22B1D7BF0(v64, "dstA");
  sub_22B1F3828(&v79, (const void **)v64, off_26488DB00[*((_WORD *)v4 + 9) & 0x1F]);
  sub_22B1D7BF0(&v63, "equation");
  sub_22B1F3828(&v80, (const void **)&v63.__r_.__value_.__l.__data_, off_26488DBA0[((unint64_t)v4[4] >> 21) & 7]);
  sub_22B1D7BF0(&v62, "equationA");
  sub_22B1F3828(&v81, (const void **)&v62.__r_.__value_.__l.__data_, off_26488DBA0[*((unsigned char *)v4 + 19) & 7]);
  sub_22B21395C(&v60, (uint64_t)&v90, 0, (uint64_t)&v75, 7);
  for (uint64_t k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v81.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + k * 8));
    }
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  sub_22B1F3B10(&v74, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  sub_22B21395C(&v38, (uint64_t)v49, 0, (uint64_t)&v73, 2);
  for (uint64_t m = 0; m != -6; m -= 3)
  {
    if (SHIBYTE(v74.__r_.__value_.__r.__words[m + 2]) < 0) {
      operator delete(*(void **)((char *)&v73 + m * 8 + 24));
    }
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  uint64_t v11 = a1[370];
  sub_22B1D7BF0(&v73, "AGCDrawBufferState");
  sub_22B1D7BF0(v71, "enabledBits");
  sub_22B213BFC(&v90, (const void **)v71);
  sub_22B1D7BF0(v69, "sampleCount");
  sub_22B1F37D0(&v91, (const void **)v69, (*(_DWORD *)(v11 + 32) >> 8) & 0xF);
  sub_22B1D7BF0(v67, "colorSampleCount");
  sub_22B1F37D0(&v92, (const void **)v67, (unsigned __int16)*(_DWORD *)(v11 + 32) >> 12);
  sub_22B1D7BF0(&v66, "outputPartitionSize");
  sub_22B1F37D0(&v93, (const void **)&v66.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v11 + 34));
  sub_22B1D7BF0(v64, "LIBSpilling");
  sub_22B1F37D0(&v94, (const void **)v64, HIBYTE(*(_DWORD *)(v11 + 32)) & 1);
  sub_22B1D7BF0(&v63, "unused");
  sub_22B1F37D0(&v95, (const void **)&v63.__r_.__value_.__l.__data_, *(_DWORD *)(v11 + 32) >> 25);
  sub_22B1D7BF0(&v62, "encoded : ");
  sub_22B1D7BF0(&v61, "encoded[0]");
  sub_22B213DCC(&v60, (_DWORD *)v11);
  sub_22B1F3B10(&v75, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  sub_22B1D7BF0(v58, "encoded[1]");
  sub_22B213DCC(&v57, (_DWORD *)(v11 + 4));
  sub_22B1F3B10(&v76, (const void **)v58, (uint64_t)&v57);
  sub_22B1D7BF0(__p, "encoded[2]");
  sub_22B213DCC(&v54, (_DWORD *)(v11 + 8));
  sub_22B1F3B10(&v77, (const void **)__p, (uint64_t)&v54);
  sub_22B1D7BF0(v52, "encoded[3]");
  sub_22B213DCC(&v51, (_DWORD *)(v11 + 12));
  sub_22B1F3B10(&v78, (const void **)v52, (uint64_t)&v51);
  sub_22B1D7BF0(v49, "encoded[4]");
  sub_22B213DCC(&v48, (_DWORD *)(v11 + 16));
  sub_22B1F3B10(&v79, (const void **)v49, (uint64_t)&v48);
  sub_22B1D7BF0(v46, "encoded[5]");
  sub_22B213DCC(&v45, (_DWORD *)(v11 + 20));
  sub_22B1F3B10(&v80, (const void **)v46, (uint64_t)&v45);
  sub_22B1D7BF0(v43, "encoded[6]");
  sub_22B213DCC(&v42, (_DWORD *)(v11 + 24));
  sub_22B1F3B10(&v81, (const void **)v43, (uint64_t)&v42);
  sub_22B1D7BF0(v40, "encoded[7]");
  sub_22B213DCC(&v39, (_DWORD *)(v11 + 28));
  sub_22B1F3B10(&v82, (const void **)v40, (uint64_t)&v39);
  sub_22B21395C(&v96, (uint64_t)&v62, 0, (uint64_t)&v75, 8);
  sub_22B21395C(&v37, (uint64_t)&v73, 0, (uint64_t)&v90, 7);
  for (uint64_t n = 0; n != -21; n -= 3)
  {
    if (SHIBYTE(v96.__r_.__value_.__r.__words[n + 2]) < 0) {
      operator delete(*(void **)((char *)&v96.__r_.__value_.__l.__data_ + n * 8));
    }
  }
  for (iuint64_t i = 0; ii != -24; ii -= 3)
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[ii + 2]) < 0) {
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + ii * 8));
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = (unsigned int *)a1[485];
  sub_22B1D7BF0(&v90, (char *)&unk_22B27C63D);
  for (juint64_t j = 1; jj != 33; ++jj)
  {
    std::to_string(&v73, v14[jj]);
    uint64_t v16 = std::string::append(&v73, " ");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v75;
    }
    else {
      uint64_t v18 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    std::string::append(&v90, (const std::string::value_type *)v18, size);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
  }
  sub_22B1D7BF0(&v73, "AGCSamplerRemapStateGL");
  sub_22B1D7BF0(v71, "samplerCount");
  sub_22B1F37D0(&v75, (const void **)v71, *v14);
  sub_22B1D7BF0(v69, "samplerToTexUnitMap");
  std::operator+<char>();
  uint64_t v20 = std::string::append(&v66, "]");
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v67 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v68 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3B10(&v76, (const void **)v69, (uint64_t)v67);
  sub_22B21395C(&v60, (uint64_t)&v73, 0, (uint64_t)&v75, 2);
  for (kuint64_t k = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v76.__r_.__value_.__r.__words[kk + 2]) < 0) {
      operator delete(*(void **)((char *)&v75 + kk * 8 + 24));
    }
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = a1[483];
  if (v23)
  {
    std::string v36 = a2;
    sub_22B1D7BF0(&v62, (char *)&unk_22B27C63D);
    for (muint64_t m = 0; mm != 32; ++mm)
    {
      sub_22B1D7BF0(&v90, "AGCSamplerPCFState");
      sub_22B1D7BF0(&v73, "compareFunc");
      sub_22B1F3828(&v75, (const void **)&v73.__r_.__value_.__l.__data_, off_26488DAB8[*(_WORD *)(v23 + 2 * mm) & 0xF]);
      sub_22B1D7BF0(v71, "clampPCFEnabled");
      sub_22B21403C(&v76, (const void **)v71, (*(_WORD *)(v23 + 2 * mm) >> 4) & 1);
      sub_22B1D7BF0(v69, "mipmapMinFilterEnabled");
      sub_22B21403C(&v77, (const void **)v69, (*(_WORD *)(v23 + 2 * mm) >> 5) & 1);
      sub_22B1D7BF0(v67, "trilinearMinFilterEnabled");
      sub_22B21403C(&v78, (const void **)v67, (*(_WORD *)(v23 + 2 * mm) >> 6) & 1);
      sub_22B1D7BF0(&v66, "linearMinFilterEnabled");
      sub_22B21403C(&v79, (const void **)&v66.__r_.__value_.__l.__data_, (*(_WORD *)(v23 + 2 * mm) >> 7) & 1);
      sub_22B1D7BF0(v64, "linearMagFilterEnabled");
      sub_22B21403C(&v80, (const void **)v64, HIBYTE(*(_WORD *)(v23 + 2 * mm)) & 1);
      sub_22B1D7BF0(&v63, "unused");
      sub_22B21403C(&v81, (const void **)&v63.__r_.__value_.__l.__data_, *(_WORD *)(v23 + 2 * mm) >> 9);
      sub_22B21395C(&v61, (uint64_t)&v90, 1, (uint64_t)&v75, 7);
      for (nuint64_t n = 0; nn != -21; nn -= 3)
      {
        if (SHIBYTE(v81.__r_.__value_.__r.__words[nn + 2]) < 0) {
          operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + nn * 8));
        }
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68) < 0) {
        operator delete(v67[0]);
      }
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      if (v72 < 0) {
        operator delete(v71[0]);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v61;
      }
      else {
        uint64_t v26 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = v61.__r_.__value_.__l.__size_;
      }
      std::string::append(&v62, (const std::string::value_type *)v26, v27);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
    }
    sub_22B1D7BF0(&v90, "AGCSamplerPCFStates");
    sub_22B1D7BF0(&v75, "pcf : ");
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      sub_22B1DC004(&v76, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    }
    else {
      std::string v76 = v62;
    }
    a2 = v36;
    sub_22B21395C(&v73, (uint64_t)&v90, 0, (uint64_t)&v75, 2);
    for (uint64_t i1 = 0; i1 != -6; i1 -= 3)
    {
      if (SHIBYTE(v76.__r_.__value_.__r.__words[i1 + 2]) < 0) {
        operator delete(*(void **)((char *)&v75 + i1 * 8 + 24));
      }
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_22B1D7BF0(&v73, (char *)&unk_22B27C63D);
  }
  sub_22B1F42B8((uint64_t)&v90, (const void **)&v38.__r_.__value_.__l.__data_, (const void **)&v37.__r_.__value_.__l.__data_);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &v60;
  }
  else {
    uint64_t v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v60.__r_.__value_.__l.__size_;
  }
  uint64_t v31 = std::string::append(&v90, (const std::string::value_type *)v29, v30);
  std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v33 = &v73;
  }
  else {
    uint64_t v33 = (std::string *)v73.__r_.__value_.__r.__words[0];
  }
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v73.__r_.__value_.__l.__size_;
  }
  uint64_t v35 = std::string::append(&v75, (const std::string::value_type *)v33, v34);
  *a2 = *v35;
  v35->__r_.__value_.__r.__words[0] = 0;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_22B21395C(std::string *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_22B1DC004(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v29 = *(void *)(a2 + 16);
  }
  sub_22B214094((void **)&v30.__r_.__value_.__l.__data_, (std::string::value_type *)__dst, a3);
  sub_22B1D7BF0(v23, "{");
  sub_22B214094(&__p, (std::string::value_type *)v23, a3);
  if ((v27 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v10 = v27;
  }
  else {
    std::string::size_type v10 = v26;
  }
  uint64_t v11 = std::string::append(&v30, p_p, v10);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst[0]);
    if (!a5) {
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (a5)
  {
LABEL_20:
    for (uint64_t i = 24 * a5; i; i -= 24)
    {
      if (*(char *)(a4 + 23) < 0) {
        sub_22B1DC004(&v30, *(void **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string v30 = *(std::string *)a4;
      }
      int v14 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        sub_22B1DC004(&v22, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      }
      else {
        std::string v22 = v30;
      }
      sub_22B214094(&__p, (std::string::value_type *)&v22, a3 + 1);
      if ((v27 & 0x80u) == 0) {
        size_t v15 = (const std::string::value_type *)&__p;
      }
      else {
        size_t v15 = (const std::string::value_type *)__p;
      }
      if ((v27 & 0x80u) == 0) {
        std::string::size_type v16 = v27;
      }
      else {
        std::string::size_type v16 = v26;
      }
      std::string::append(&v31, v15, v16);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        if (v14 < 0) {
LABEL_40:
        }
          operator delete(v30.__r_.__value_.__l.__data_);
      }
      else if (v14 < 0)
      {
        goto LABEL_40;
      }
      a4 += 24;
    }
  }
LABEL_41:
  sub_22B1D7BF0(v20, "}");
  sub_22B214094((void **)&v30.__r_.__value_.__l.__data_, (std::string::value_type *)v20, a3);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = &v31;
  }
  else {
    std::string::size_type v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = std::string::insert(&v30, 0, (const std::string::value_type *)v17, size);
  *a1 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_22B213BFC(std::string *a1, const void **a2)
{
  sub_22B1ED4EC((uint64_t)v8);
  sub_22B1E6CB0(v9, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) = *(_DWORD *)((unsigned char *)&v9[1] + *(void *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_22B1F3B10(a1, a2, (uint64_t)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  v8[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v9[0] = v4;
  v9[1] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230F43590](&v11);
}

void sub_22B213DCC(std::string *a1, _DWORD *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v19, "AGCDrawBuffer");
  sub_22B1D7BF0(v17, "pbeSourceFormat");
  sub_22B1F3828(&v21, (const void **)v17, off_26488DBD8[*a2 & 0x1F]);
  sub_22B1D7BF0(v15, "numWrittenComponents");
  sub_22B1F37D0(&v22, (const void **)v15, *a2 >> 5);
  sub_22B1D7BF0(v13, "gammaCorrection");
  sub_22B1F37D0(&v23, (const void **)v13, (*a2 >> 8) & 1);
  sub_22B1D7BF0(v11, "colorSpaceConversion");
  sub_22B1F3828(&v24, (const void **)v11, off_26488DC90[((unint64_t)*a2 >> 9) & 7]);
  sub_22B1D7BF0(v9, "preEmitSwizzle");
  sub_22B1F3828(&v25, (const void **)v9, off_26488DCB8[((unint64_t)*a2 >> 12) & 7]);
  sub_22B1D7BF0(v7, "outputPartitionOffset");
  sub_22B1F37D0(&v26, (const void **)v7, (*a2 >> 15));
  sub_22B1D7BF0(__p, "unused");
  sub_22B1F37D0(&v27, (const void **)__p, *a2 >> 23);
  sub_22B21395C(a1, (uint64_t)v19, 0, (uint64_t)&v21, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_22B21403C(std::string *a1, const void **a2, unsigned __int16 a3)
{
  std::to_string(&v5, a3);
  sub_22B1F3B10(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_22B214094(void **a1, std::string::value_type *a2, int a3)
{
  sub_22B1D7BF0(&v14, (char *)&unk_22B27C63D);
  for (; a3; --a3)
    std::string::append(&v14, "  ");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    sub_22B1DC004(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v14;
  }
  if (a2[23] < 0)
  {
    char v7 = a2;
    a2 = *(std::string::value_type **)a2;
    uint64_t v6 = *((void *)v7 + 1);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = a2[23];
    if (!a2[23]) {
      goto LABEL_19;
    }
  }
  do
  {
    int v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v9 = &v14;
      }
      else {
        int v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  sub_22B1EA4B0((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_22B21420C(void *a1)
{
  return (*(unsigned __int8 *)(*(void *)((char *)a1 + *(void *)(*a1 - 64) + 3824) + 2) >> 3) & 1;
}

void sub_22B214234(void *a1)
{
  int v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *int v1 = (uint64_t)&unk_26DE73AF8;
  v1[490] = (uint64_t)&unk_26DE73D28;
  v1[304] = (uint64_t)&unk_26DE73CB0;
  uint64_t v2 = v1[488];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 486));
  }
  sub_22B1F45CC(v1, (uint64_t *)off_26DE73D90);
  sub_22B1ED95C((uint64_t)(v1 + 490));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B214320(void *a1)
{
  int v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *int v1 = (uint64_t)&unk_26DE73AF8;
  v1[490] = (uint64_t)&unk_26DE73D28;
  v1[304] = (uint64_t)&unk_26DE73CB0;
  uint64_t v2 = v1[488];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 486));
  }
  sub_22B1F45CC(v1, (uint64_t *)off_26DE73D90);
  return sub_22B1ED95C((uint64_t)(v1 + 490));
}

void sub_22B2143F4(void *a1)
{
  int v1 = a1 - 304;
  *(a1 - 304) = &unk_26DE73AF8;
  uint64_t v2 = (uint64_t)(a1 + 186);
  a1[186] = &unk_26DE73D28;
  *a1 = &unk_26DE73CB0;
  uint64_t v3 = a1[184];
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 182));
  }
  sub_22B1F45CC(v1, (uint64_t *)off_26DE73D90);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B2144C8(void *a1)
{
  int v1 = a1 - 304;
  *(a1 - 304) = &unk_26DE73AF8;
  uint64_t v2 = (uint64_t)(a1 + 186);
  a1[186] = &unk_26DE73D28;
  *a1 = &unk_26DE73CB0;
  uint64_t v3 = a1[184];
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 182));
  }
  sub_22B1F45CC(v1, (uint64_t *)off_26DE73D90);
  return sub_22B1ED95C(v2);
}

uint64_t sub_22B214584(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 3824) + 2) >> 3) & 1;
}

uint64_t sub_22B214594(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::string v5 = (llvm::LLVMContext *)sub_22B214694(a1);
  uint64_t v6 = sub_22B1D7234(v4, v5);
  char v7 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v15 = 257;
  uint64_t v8 = sub_22B1D4240(v7 + 1, **(llvm::Type ***)(*(void *)v6 + 16), (uint64_t)v6, 0, (uint64_t)v14);
  uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v10 = *a2;
  __int16 v15 = 257;
  uint64_t v11 = sub_22B1DC548(v9, v8, v10, (uint64_t)v14);
  uint64_t v12 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v15 = 257;
  return sub_22B1DB138(v12, (uint64_t)a2, v11, (uint64_t)v14);
}

uint64_t sub_22B214694(void *a1)
{
  uint64_t result = a1[488];
  if (!result)
  {
    llvm::StructType::get();
    uint64_t v3 = llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 486), v3);
    return a1[488];
  }
  return result;
}

uint64_t sub_22B2147F0(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::string v5 = (llvm::LLVMContext *)sub_22B214694(a1);
  uint64_t v6 = sub_22B1D7234(v4, v5);
  uint64_t v7 = (uint64_t)a1 + *(void *)(*a1 - 24);
  uint64_t v8 = (llvm::LLVMContext *)sub_22B214694(a1);
  uint64_t v9 = sub_22B1D7234(v7, v8);
  uint64_t v10 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v19 = 257;
  uint64_t v11 = sub_22B1D4240(v10 + 1, **(llvm::Type ***)(*(void *)v6 + 16), (uint64_t)v6, 0, (uint64_t)v18);
  uint64_t v12 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v19 = 257;
  uint64_t v13 = sub_22B1D4240(v12 + 1, **(llvm::Type ***)(*(void *)v9 + 16), (uint64_t)v9, 0, (uint64_t)v18);
  uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v19 = 257;
  uint64_t v15 = sub_22B1DB138(v14, a2, v11, (uint64_t)v18);
  v17[16] = 257;
  return sub_22B1DD390(v14, v15, v13, (uint64_t)v17);
}

void sub_22B21496C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_22B214B84();
  sub_22B1F5524();
  sub_22B1F55A8();
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = *(unsigned int *)(a2 + 32);
  }
  else {
    uint64_t v8 = 1;
  }
  int v39 = 0;
  LODWORD(v28) = 3;
  sub_22B2437A8(0, a3, (unsigned int *)&v28, &v39);
  uint64_t v9 = a3 - 8 * *(unsigned int *)(a3 + 8);
  uint64_t v10 = *(unsigned char **)(v9 + 32);
  if (v10)
  {
    if (*v10) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(llvm::MDString **)(v9 + 32);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(llvm::MDString **)(v9 + 40);
  if (v12)
  {
    if (*(unsigned char *)v12) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v12;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t String = (const void *)llvm::MDString::getString(v11);
  size_t v16 = v15;
  std::string::size_type v17 = (const void *)llvm::MDString::getString(v13);
  size_t v19 = v18;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v38 = 0;
  int v29 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  int v35 = 1;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = MEMORY[0x263F8BBF0] + 16;
  std::string v36 = __p;
  sub_22B1EAD44((llvm::raw_ostream *)&v28);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    a2 = **(void **)(a2 + 16);
  }
  llvm::Type::print((llvm::Type *)a2, (llvm::raw_ostream *)&v28);
  int v20 = *((char *)v36 + 23);
  if (v20 >= 0) {
    std::string v21 = v36;
  }
  else {
    std::string v21 = *v36;
  }
  if (v20 >= 0) {
    size_t v22 = *((unsigned __int8 *)v36 + 23);
  }
  else {
    size_t v22 = (size_t)v36[1];
  }
  int v23 = *(_DWORD *)(*sub_22B1F5734(v17, v19) + 8);
  int v24 = *(_DWORD *)(*sub_22B1F562C(String, v16) + 8);
  if (v24 == 1) {
    int v25 = 3;
  }
  else {
    int v25 = v23;
  }
  *(_DWORD *)a4 = v8;
  *(_DWORD *)(a4 + 4) = v24;
  *(_DWORD *)(a4 + 8) = v25;
  std::string v26 = sub_22B214C08(v21, v22);
  int v27 = v39;
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(*v26 + 8);
  *(_DWORD *)(a4 + 16) = v27;
  *(void *)(a4 + 24) = sub_22B247CEC(a1, 1, v27, (llvm::Type *)v8);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v28);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
}

void sub_22B214B84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9318, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9318))
  {
    qword_2683E92F8 = 0;
    unk_2683E9300 = 0;
    qword_2683E9308 = 0x1000000000;
    __cxa_atexit((void (*)(void *))sub_22B214D10, &qword_2683E92F8, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9318);
  }
}

uint64_t *sub_22B214C08(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(qword_2683E92F8 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E9308) = qword_2683E9308 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 17, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  uint64_t *i = v9;
  ++dword_2683E9304;
  for (uint64_t i = (uint64_t *)(qword_2683E92F8
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E92F8));
        !*i || *i == -8;
  return i;
}

uint64_t sub_22B214D10(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B214D8C()
{
  return 0;
}

uint64_t sub_22B214D94()
{
  return 0;
}

uint64_t sub_22B214D9C()
{
  return 0;
}

uint64_t sub_22B214DA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3912);
}

uint64_t sub_22B214DAC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 3872);
  if (v2) {
    return *(unsigned __int8 *)(v2 + a2);
  }
  else {
    return 0;
  }
}

BOOL sub_22B214DC4(uint64_t a1)
{
  return *(void *)(a1 + 3864) != 0;
}

uint64_t sub_22B214DD4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 3864);
  if (v2) {
    return *(unsigned __int16 *)(v2 + 2 * a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_22B214DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 3880);
  if (*v2 > a2) {
    return v2[a2 + 1];
  }
  return a2;
}

uint64_t sub_22B214E10(void *a1)
{
  uint64_t v2 = sub_22B24D20C((uint64_t)a1);
  uint64_t v3 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 160))(v3, a1[370]);
  return v2;
}

void sub_22B214E80(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26DE73AF8;
  uint64_t v2 = (uint64_t)(a1 + 490);
  a1[490] = (uint64_t)&unk_26DE73D28;
  a1[304] = (uint64_t)&unk_26DE73CB0;
  uint64_t v3 = a1[488];
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 486));
  }
  sub_22B1F45CC(a1, (uint64_t *)off_26DE73D90);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B214F58(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26DE73AF8;
  uint64_t v2 = (uint64_t)(a1 + 490);
  a1[490] = (uint64_t)&unk_26DE73D28;
  a1[304] = (uint64_t)&unk_26DE73CB0;
  uint64_t v3 = a1[488];
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 486));
  }
  sub_22B1F45CC(a1, (uint64_t *)off_26DE73D90);
  sub_22B1ED95C(v2);
  return a1;
}

uint64_t sub_22B215010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_22B1ED7E0(a1 + 3920, a2, *(llvm::Type **)a3);
  uint64_t v15 = sub_22B24DEB8(a1, (uint64_t *)off_26DE73D90, (llvm::Module *)a3, a4, a7, 1);
  *(void *)a1 = &unk_26DE73AF8;
  *(void *)(a1 + 3920) = &unk_26DE73D28;
  *(void *)(a1 + 2432) = &unk_26DE73CB0;
  *(void *)(a1 + 3864) = a6;
  *(void *)(a1 + 3872) = a8;
  *(void *)(a1 + 3880) = a5;
  *(void *)(a1 + 3888) = 4;
  *(void *)(a1 + 3904) = 0;
  *(void *)(a1 + 3896) = 0;
  sub_22B26C814(v15);
  size_t v16 = (void *)(a3 + 168);
  int v17 = *(char *)(a3 + 191);
  if (v17 < 0)
  {
    if (*(void *)(a3 + 176) != 22)
    {
LABEL_15:
      BOOL v23 = 0;
      goto LABEL_16;
    }
    size_t v16 = (void *)*v16;
  }
  else if (v17 != 22)
  {
    goto LABEL_15;
  }
  size_t v18 = (void *)*v16;
  uint64_t v19 = v16[1];
  uint64_t v20 = *(void *)((char *)v16 + 14);
  BOOL v23 = v18 == (void *)0x746E656D67617246 && v19 == 0x505F65746174535FLL && v20 == 0x6D6172676F72505FLL;
LABEL_16:
  *(unsigned char *)(a1 + 3912) = v23;
  return a1;
}

void sub_22B215188(uint64_t isDeclaration, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v90[16] = *MEMORY[0x263EF8340];
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  int v81 = 0;
  uint64_t v8 = isDeclaration + 24;
  uint64_t v9 = *(void *)(isDeclaration + 32);
  if (v9 != isDeclaration + 24)
  {
    uint64_t v75 = isDeclaration + 24;
    while (1)
    {
      uint64_t v10 = v9 ? v9 - 56 : 0;
      isDeclaratiouint64_t n = llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v10);
      if ((isDeclaration & 1) == 0) {
        break;
      }
LABEL_125:
      uint64_t v9 = *(void *)(v9 + 8);
      if (v9 == v8)
      {
        int v72 = v80;
        int v73 = HIDWORD(v80);
        int v74 = v81;
        goto LABEL_128;
      }
    }
    std::string v84 = 0;
    uint64_t v85 = 0;
    unsigned int v86 = 0;
    v83[0] = 0;
    v83[1] = 0;
    std::string v82 = (uint64_t *)v83;
    if (*(unsigned char *)(v10 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v10);
      uint64_t v11 = *(llvm::Argument **)(v10 + 88);
      if (*(_WORD *)(v10 + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v10);
        uint64_t v12 = *(llvm::Argument **)(v10 + 88);
LABEL_12:
        uint64_t v13 = (llvm::Argument *)((char *)v12 + 40 * *(void *)(v10 + 96));
        while (v11 != v13)
        {
          unsigned int v14 = *(_DWORD *)(*(void *)v11 + 8);
          if (v14 == 15)
          {
            if ((v14 & 0xFE) == 0x12) {
              unsigned int v14 = *(_DWORD *)(**(void **)(*(void *)v11 + 16) + 8);
            }
            if (v14 <= 0xFF)
            {
              if (llvm::Argument::hasNoAliasAttr(v11)) {
                sub_22B2157C4((uint64_t)v11, (uint64_t)&v84, &v82, (uint64_t)&v79);
              }
            }
          }
          uint64_t v11 = (llvm::Argument *)((char *)v11 + 40);
        }
        std::string v88 = v90;
        uint64_t v89 = 0x1000000000;
        uint64_t v15 = *(void *)(v10 + 80);
        if (v15) {
          uint64_t v16 = v15 - 24;
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = v16 + 40;
        uint64_t v18 = *(void *)(v16 + 48);
        if (v18 != v17)
        {
          do
          {
            uint64_t v19 = *(void *)(v18 + 8);
            uint64_t v20 = v18 - 24;
            if (v18) {
              uint64_t v21 = v18 - 24;
            }
            else {
              uint64_t v21 = 0;
            }
            if (*(unsigned char *)(v21 + 16) == 59) {
              sub_22B1D6788((uint64_t)&v88, v20);
            }
            uint64_t v18 = v19;
          }
          while (v19 != v17);
          if (v89)
          {
            size_t v22 = (llvm::Instruction **)v88;
            uint64_t v23 = 8 * v89;
            do
            {
              int v24 = *v22;
              if (*((void *)*v22 + 1))
              {
                ++HIDWORD(v79);
                sub_22B2157C4((uint64_t)v24, (uint64_t)&v84, &v82, (uint64_t)&v79);
              }
              else
              {
                llvm::Instruction::eraseFromParent(v24);
                ++v81;
              }
              ++v22;
              v23 -= 8;
            }
            while (v23);
          }
        }
        LODWORD(v89) = 0;
        if (v85)
        {
          uint64_t v25 = *(void *)(v10 + 80);
          uint64_t v77 = v10 + 72;
          if (v25 != v10 + 72)
          {
            uint64_t v76 = v9;
            int v26 = 0;
            char v78 = 0;
            while (1)
            {
              if (v25) {
                uint64_t v27 = v25 - 24;
              }
              else {
                uint64_t v27 = 0;
              }
              uint64_t v28 = *(void *)(v27 + 48);
              if (v28 != v27 + 40)
              {
                do
                {
                  if (v28) {
                    int v29 = (unsigned __int8 *)(v28 - 24);
                  }
                  else {
                    int v29 = 0;
                  }
                  uint64_t v30 = *(void *)(v28 + 8);
                  LODWORD(v79) = v79 + 1;
                  int v31 = v29[16];
                  if (v28 && v31 == 61)
                  {
                    uint64_t v32 = *((void *)v29 - 4);
                    uint64_t v87 = 0;
                    char v33 = v84;
                    uint64_t v34 = v86;
                    int v35 = sub_22B215C70((uint64_t)v84, v86, v32, &v87);
                    uint64_t v36 = v87;
                    if (v35) {
                      BOOL v37 = v87 == (void)v33 + 32 * v34;
                    }
                    else {
                      BOOL v37 = 1;
                    }
                    if (!v37)
                    {
                      *(void *)(v87 + 8) = *((void *)v29 - 8);
                      *(_DWORD *)(v36 + 16) = v26;
                    }
                    goto LABEL_94;
                  }
                  if (v31 == 60) {
                    uint64_t v38 = (llvm::Instruction *)v29;
                  }
                  else {
                    uint64_t v38 = 0;
                  }
                  if (!v28 || v31 != 60)
                  {
                    if (v31 == 84) {
                      std::string v45 = (llvm::CallBase *)v29;
                    }
                    else {
                      std::string v45 = 0;
                    }
                    if (v28)
                    {
                      uint64_t v46 = v83[0];
                      if (v31 == 84 && v83[0] != 0)
                      {
                        std::string v48 = v83;
                        do
                        {
                          uint64_t v49 = v46;
                          char v50 = v48;
                          unint64_t v51 = v46[4];
                          uint64_t v52 = v46 + 1;
                          if (v51 >= (unint64_t)v45)
                          {
                            uint64_t v52 = v49;
                            std::string v48 = (void **)v49;
                          }
                          uint64_t v46 = (void *)*v52;
                        }
                        while (v46);
                        if (v48 != v83)
                        {
                          if (v51 < (unint64_t)v45) {
                            uint64_t v49 = v50;
                          }
                          if ((unint64_t)v45 >= v49[4])
                          {
                            unint64_t v53 = 0;
                            for (uint64_t i = v45; ; uint64_t i = (llvm::CallBase *)((char *)i + 32))
                            {
                              uint64_t v55 = sub_22B1F50A8(v45);
                              uint64_t v56 = *((_DWORD *)v45 + 5) & 0x7FFFFFF;
                              if (v53 >= ((unint64_t)(v55
                                                                          - ((void)v45
                                                                           + 32 * -(int)v56)) >> 5))
                                break;
                              uint64_t v57 = *((void *)i - 4 * v56);
                              uint64_t v87 = 0;
                              uint64_t v58 = v84;
                              uint64_t v59 = v86;
                              int v60 = sub_22B215C70((uint64_t)v84, v86, v57, &v87);
                              uint64_t v61 = v87;
                              if (v60) {
                                BOOL v62 = v87 == (void)v58 + 32 * v59;
                              }
                              else {
                                BOOL v62 = 1;
                              }
                              if (!v62)
                              {
                                *(void *)(v87 + 8) = 0;
                                *(_DWORD *)(v61 + 16) = v26;
                              }
                              ++v53;
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_94;
                  }
                  uint64_t v39 = *((void *)v38 - 4);
                  uint64_t v87 = 0;
                  uint64_t v40 = v84;
                  uint64_t v41 = v86;
                  int v42 = sub_22B215C70((uint64_t)v84, v86, v39, &v87);
                  uint64_t v43 = v87;
                  if (v42) {
                    BOOL v44 = v87 == (void)v40 + 32 * v41;
                  }
                  else {
                    BOOL v44 = 1;
                  }
                  if (!v44)
                  {
                    if (*(_DWORD *)(v87 + 16) == v26)
                    {
                      if (!*(void *)(v87 + 8)) {
                        goto LABEL_93;
                      }
                    }
                    else
                    {
                      if (!*(unsigned char *)(v87 + 21))
                      {
LABEL_93:
                        *(void *)(v87 + 8) = v38;
                        *(_DWORD *)(v43 + 16) = v26;
                        *(unsigned char *)(v43 + 20) = 0;
                        goto LABEL_94;
                      }
                      llvm::UndefValue::get();
                    }
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent(v38);
                    --*(_DWORD *)(v43 + 24);
                    LODWORD(v80) = v80 + 1;
                    char v78 = 1;
                  }
LABEL_94:
                  uint64_t v28 = v30;
                }
                while (v30 != v27 + 40);
              }
              uint64_t v25 = *(void *)(v25 + 8);
              if (v25 == v77) {
                break;
              }
              if (v25) {
                std::string v63 = (llvm::BasicBlock *)(v25 - 24);
              }
              else {
                std::string v63 = 0;
              }
              if (llvm::BasicBlock::getSinglePredecessor(v63) != v27) {
                ++v26;
              }
            }
            uint64_t v8 = v75;
            uint64_t v9 = v76;
            if ((v78 & 1) != 0 && v85)
            {
              if (v86)
              {
                uint64_t v64 = 32 * v86;
                char v65 = v84;
                while ((*(void *)v65 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  char v65 = (llvm *)((char *)v65 + 32);
                  v64 -= 32;
                  if (!v64) {
                    goto LABEL_122;
                  }
                }
              }
              else
              {
                char v65 = v84;
              }
              std::string v66 = (llvm *)((char *)v84 + 32 * v86);
              if (v65 != v66)
              {
                int v67 = HIDWORD(v80);
                int v68 = v81;
LABEL_112:
                if (*((unsigned char *)v65 + 20) && !*((_DWORD *)v65 + 6))
                {
                  uint64_t v69 = *(void *)v65;
                  uint64_t v70 = *(void *)(*(void *)v65 + 8);
                  if (v70)
                  {
                    do
                    {
                      int v71 = *(llvm::Instruction **)(v70 + 24);
                      uint64_t v70 = *(void *)(v70 + 8);
                      llvm::Instruction::eraseFromParent(v71);
                      ++v67;
                    }
                    while (v70);
                    uint64_t v69 = *(void *)v65;
                  }
                  v68 += sub_22B215D04(v69);
                }
                while (1)
                {
                  char v65 = (llvm *)((char *)v65 + 32);
                  if (v65 == v66) {
                    break;
                  }
                  if ((*(void *)v65 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    if (v65 != v66) {
                      goto LABEL_112;
                    }
                    break;
                  }
                }
                HIDWORD(v80) = v67;
                int v81 = v68;
              }
            }
          }
        }
LABEL_122:
        if (v88 != v90) {
          free(v88);
        }
        sub_22B1EDBB8(v83[0]);
        isDeclaratiouint64_t n = llvm::deallocate_buffer(v84, (void *)(32 * v86));
        goto LABEL_125;
      }
    }
    else
    {
      uint64_t v11 = *(llvm::Argument **)(v10 + 88);
    }
    uint64_t v12 = v11;
    goto LABEL_12;
  }
  int v74 = 0;
  int v73 = 0;
  int v72 = 0;
LABEL_128:
  if (v73 + v72 + v74) {
    sub_22B1E69D0(isDeclaration, "SimplifyGenericIR: %u alloca's, Removed %u loads, %u stores, %u other out of %u insts, total %4.2f %c insts\n", a3, a4, a5, a6, a7, a8, SBYTE4(v79));
  }
  else {
    sub_22B1E69D0(isDeclaration, "SimplifyGenericIR: %u alloca's, unable to simplify the IR\n", a3, a4, a5, a6, a7, a8, SBYTE4(v79));
  }
}

uint64_t sub_22B2157C4(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(result + 8);
  if (!v4) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v45 = **(void **)(*(void *)result + 16);
  if ((*(_DWORD *)(v45 + 8) & 0xFE) != 0x10)
  {
    char v17 = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    uint64_t v20 = a3 + 1;
    char v21 = 1;
    do
    {
      unint64_t v22 = *(void *)(v4 + 24);
      unsigned int v23 = *(unsigned __int8 *)(v22 + 16);
      if (v22) {
        BOOL v24 = v23 >= 0x1C;
      }
      else {
        BOOL v24 = 0;
      }
      if (!v24) {
        return result;
      }
      if (v23 == 84)
      {
        uint64_t v25 = *v20;
        int v26 = a3 + 1;
        uint64_t v27 = a3 + 1;
        if (*v20)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v27 = (uint64_t **)v25;
              unint64_t v28 = v25[4];
              if (v22 >= v28) {
                break;
              }
              uint64_t v25 = *v27;
              int v26 = v27;
              if (!*v27) {
                goto LABEL_47;
              }
            }
            if (v28 >= v22) {
              break;
            }
            uint64_t v25 = v27[1];
            if (!v25)
            {
              int v26 = v27 + 1;
              goto LABEL_47;
            }
          }
        }
        else
        {
LABEL_47:
          int v29 = (uint64_t *)operator new(0x28uLL);
          void v29[4] = v22;
          *int v29 = 0;
          v29[1] = 0;
          _OWORD v29[2] = (uint64_t)v27;
          *int v26 = v29;
          uint64_t v30 = (uint64_t *)**a3;
          if (v30)
          {
            *a3 = v30;
            int v31 = *v26;
          }
          else
          {
            int v31 = v29;
          }
          uint64_t result = (uint64_t)sub_22B1E313C(a3[1], v31);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
        }
        char v17 = 1;
      }
      else if (v23 == 61)
      {
        if (*(void *)(v22 - 32) != v6 || (*(_WORD *)(v22 + 18) & 1) != 0) {
          return result;
        }
      }
      else
      {
        if (v23 != 60 || *(void *)(v22 - 32) != v6 || (*(_WORD *)(v22 + 18) & 1) != 0) {
          return result;
        }
        ++v19;
      }
      BOOL v32 = v18 == 0;
      if (v18) {
        uint64_t v33 = v18;
      }
      else {
        uint64_t v33 = *(void *)(v22 + 40);
      }
      if (v18 == *(void *)(v22 + 40)) {
        BOOL v32 = 1;
      }
      v21 &= v32;
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v18 = v33;
    }
    while (v4);
    int v34 = *(unsigned __int8 *)(v6 + 16);
    if (v34 == 62) {
      int v34 = *(unsigned __int8 *)(*(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 16);
    }
    if (v34 == 59)
    {
      uint64_t v35 = llvm::UndefValue::get();
      BOOL v36 = (v17 & 1) == 0;
    }
    else
    {
      uint64_t v35 = 0;
      BOOL v36 = 0;
      char v21 = 0;
    }
    *(void *)&v46[0] = 0;
    uint64_t result = sub_22B215C70(*(void *)a2, *(_DWORD *)(a2 + 16), v6, v46);
    uint64_t v37 = *(void *)&v46[0];
    if (result)
    {
LABEL_72:
      *(void *)(v37 + 8) = v35;
      *(_DWORD *)(v37 + 16) = 0;
      *(unsigned char *)(v37 + 20) = v36;
      *(unsigned char *)(v37 + 21) = v21;
      *(_DWORD *)(v37 + 24) = v19;
      return result;
    }
    int v38 = *(_DWORD *)(a2 + 8);
    unsigned int v39 = *(_DWORD *)(a2 + 16);
    if (4 * v38 + 4 >= 3 * v39)
    {
      v39 *= 2;
    }
    else if (v39 + ~v38 - *(_DWORD *)(a2 + 12) > v39 >> 3)
    {
LABEL_69:
      ++*(_DWORD *)(a2 + 8);
      if (*(void *)v37 != -4096) {
        --*(_DWORD *)(a2 + 12);
      }
      *(_DWORD *)(v37 + 24) = 0;
      *(void *)uint64_t v37 = v6;
      *(void *)(v37 + 8) = 0;
      *(void *)(v37 + 14) = 0;
      goto LABEL_72;
    }
    sub_22B215D98(a2, v39);
    *(void *)&v46[0] = 0;
    uint64_t result = sub_22B215C70(*(void *)a2, *(_DWORD *)(a2 + 16), v6, v46);
    uint64_t v37 = *(void *)&v46[0];
    goto LABEL_69;
  }
  if (*(_DWORD *)(v45 + 8) == 17
    && (*(_DWORD *)(**(void **)(v45 + 16) + 8) & 0xFE) != 0x10
    && *(void *)(v45 + 32) <= 4uLL)
  {
    memset(v46, 0, sizeof(v46));
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 24);
      if (!v8) {
        break;
      }
      if (*(unsigned char *)(v8 + 16) != 62) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t result = llvm::GetElementPtrInst::hasAllConstantIndices((llvm::GetElementPtrInst *)v8);
      if (!result || (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3) {
        break;
      }
      uint64_t v9 = *(void *)(v8 - 64);
      uint64_t result = v9 + 24;
      unsigned int v10 = *(_DWORD *)(v9 + 32);
      if (v10 > 0x40)
      {
        uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
        if (result != v10) {
          return result;
        }
      }
      else if (*(void *)result)
      {
        return result;
      }
      uint64_t v11 = *(void *)(v8 - 32);
      uint64_t v12 = (void *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v13 = (void *)*v12;
      if (v13 >= *(_DWORD *)(v45 + 32)) {
        break;
      }
      if (!*((void *)v46 + v13))
      {
        *((void *)v46 + v13) = llvm::Instruction::clone((llvm::Instruction *)v8);
        --*(_DWORD *)(a4 + 16);
        int v14 = *(unsigned __int8 *)(v6 + 16);
        if (v14 == 21)
        {
          uint64_t v15 = *(void *)(*(void *)(v6 + 24) + 80);
          if (v15) {
            uint64_t v16 = (llvm::BasicBlock *)(v15 - 24);
          }
          else {
            uint64_t v16 = 0;
          }
          llvm::BasicBlock::getFirstInsertionPt(v16);
          llvm::Instruction::insertBefore();
        }
        else if (v14 == 59)
        {
          llvm::Instruction::insertAfter();
        }
      }
      ++*(_DWORD *)(a4 + 16);
      llvm::Value::replaceAllUsesWith();
      uint64_t result = llvm::Instruction::eraseFromParent((llvm::Instruction *)v8);
      if (!v4)
      {
        unint64_t v40 = *(void *)(v45 + 32);
        if (v40)
        {
          uint64_t v41 = 0;
          unsigned int v42 = 1;
          do
          {
            uint64_t result = *((void *)v46 + v41);
            if (result)
            {
              uint64_t result = sub_22B2157C4(result, a2, a3, a4);
              unint64_t v40 = *(void *)(v45 + 32);
            }
            uint64_t v41 = v42;
          }
          while (v40 > v42++);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_22B215C70(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_22B215D04(uint64_t a1)
{
  uint64_t v1 = 0;
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    if (*(void *)(a1 + 8))
    {
      return 0;
    }
    else
    {
      LODWORD(v1) = 0;
      while (1)
      {
        int v2 = *(_DWORD *)(a1 + 20);
        if ((v2 & 0x7FFFFFF) == 0) {
          break;
        }
        uint64_t v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v2 & 0x7FFFFFF));
        uint64_t v4 = *v3;
        if (*(unsigned __int8 *)(*v3 + 16) <= 0x1Bu) {
          break;
        }
        llvm::Instruction::eraseFromParent((llvm::Instruction *)a1);
        uint64_t v1 = (v1 + 1);
        a1 = v4;
        if (*(void *)(v4 + 8)) {
          return v1;
        }
      }
      llvm::Instruction::eraseFromParent((llvm::Instruction *)a1);
      return (v1 + 1);
    }
  }
  return v1;
}

void *sub_22B215D98(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (void *)MEMORY[0x230F426A0](32 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    int v12 = (void *)(32 * v3);
    if (v3)
    {
      uint64_t v13 = 32 * v3;
      int v14 = v4;
      do
      {
        uint64_t v15 = *(void *)v14;
        if ((*(void *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v20 = 0;
          sub_22B215C70(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v20);
          uint64_t v16 = v20;
          *uint64_t v20 = *(void *)v14;
          long long v17 = *(_OWORD *)((char *)v14 + 8);
          void v16[3] = *((void *)v14 + 3);
          *(_OWORD *)(v16 + 1) = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        int v14 = (llvm *)((char *)v14 + 32);
        v13 -= 32;
      }
      while (v13);
    }
    return (void *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v18 = *(unsigned int *)(a1 + 16);
    if (v18)
    {
      uint64_t v19 = 32 * v18;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v19 -= 32;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t *sub_22B215EF8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  unint64_t v6 = (uint64_t **)(result + 1);
  unint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return sub_22B215FA4(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *sub_22B215FA4(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_22B1E313C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_22B215FFC(uint64_t *result, unint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu && a2 != 0)
  {
    uint64_t v4 = result;
    unint64_t v6 = result + 4;
    unint64_t v5 = (void *)result[4];
    if (!v5) {
      goto LABEL_18;
    }
    int v7 = result + 4;
    do
    {
      unint64_t v8 = v5[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = v5;
      }
      else {
        uint64_t v10 = v5 + 1;
      }
      if (v9) {
        int v7 = v5;
      }
      unint64_t v5 = (void *)*v10;
    }
    while (*v10);
    if (v7 == v6 || v7[4] > a2)
    {
LABEL_18:
      int v12 = (unint64_t *)result[1];
      unint64_t v11 = result[2];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((uint64_t)v12 - *result) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          abort();
        }
        uint64_t v15 = v11 - *result;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_22B216148(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (unint64_t *)(v17 + 8 * v14);
        unint64_t v20 = v17 + 8 * v18;
        *uint64_t v19 = a2;
        uint64_t v13 = v19 + 1;
        unint64_t v22 = (char *)*v4;
        char v21 = (char *)v4[1];
        if (v21 != (char *)*v4)
        {
          do
          {
            unint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *--uint64_t v19 = v23;
          }
          while (v21 != v22);
          char v21 = (char *)*v4;
        }
        *uint64_t v4 = (uint64_t)v19;
        v4[1] = (uint64_t)v13;
        v4[2] = v20;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *int v12 = a2;
        uint64_t v13 = v12 + 1;
      }
      v4[1] = (uint64_t)v13;
      return sub_22B215EF8(v6 - 1, a2, a2);
    }
  }
  return result;
}

void *sub_22B216148(unint64_t a1)
{
  if (a1 >> 61) {
    sub_22B1E33E4();
  }
  return operator new(8 * a1);
}

uint64_t sub_22B216180()
{
  return mach_timebase_info((mach_timebase_info_t)&dword_2683E8EA8);
}

unint64_t sub_22B21618C(uint64_t a1)
{
  if (qword_2683E8EB0 != -1) {
    dispatch_once(&qword_2683E8EB0, &unk_26DE74598);
  }
  return (*(unsigned int *)algn_2683E8EAC + (unint64_t)dword_2683E8EA8 * a1 - 1)
       / *(unsigned int *)algn_2683E8EAC;
}

uint64_t sub_22B2161EC(void *a1, unsigned int *a2)
{
  return sub_22B216208((uint64_t)a1 + *(void *)(*a1 - 104), a2);
}

uint64_t sub_22B216208(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = (void *)(a1 + *(void *)(*(void *)a1 - 24));
  *a2 = *(_DWORD *)(v4[43] + 840);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 64))(v4);
  if (result)
  {
    *a2 = result;
    uint64_t result = result != *(_DWORD *)(v4[43] + 840);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 2732);
  if (v6)
  {
    unsigned int v7 = 0;
    uint64_t v8 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v9 = *(void *)(v8 + 400);
    unsigned int v10 = *(_DWORD *)(*(void *)(v8 + 344) + 840);
    unsigned int v11 = *(_DWORD *)(v9 + 416);
    unsigned int v12 = v11 - 1;
    uint64_t v13 = *(void *)(v9 + 408);
    do
    {
      unsigned int v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6) {
        unsigned int v12 = v14 - 1;
      }
      else {
        unsigned int v7 = v14 + 1;
      }
    }
    while (v7 <= v12);
    unsigned int v15 = v10 / v11 * v12;
    if (v15 >= *a2) {
      unsigned int v15 = *a2;
    }
    *a2 = v15;
    return 1;
  }
  return result;
}

uint64_t sub_22B216314(void *a1)
{
  return sub_22B216330((uint64_t)a1 + *(void *)(*a1 - 96));
}

uint64_t sub_22B216330(uint64_t a1)
{
  if (!sub_22B1EE1E0(a1 + *(void *)(*(void *)a1 - 24), *(int **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 128)))return 0; {
  int v52 = sub_22B240748(a1);
  }
  if (*(_DWORD *)(a1 + 2792))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = a1 + *(void *)(*(void *)a1 - 24);
      unsigned int v7 = (uint64_t *)(v6 + 704);
      *(unsigned char *)(v6 + 774) = 1;
      int v8 = *(_DWORD *)(v6 + 736) - *(_DWORD *)(v6 + 752) + *(_DWORD *)(v6 + 744);
      sub_22B1ED0D4((uint64_t *)(v6 + 704), 4, v2);
      sub_22B1EF4B8(v7, 6, *(char *)(*(void *)(a1 + 2784) + 4 * v2));
      int v9 = sub_22B1ECAA8((uint64_t)v7, v8);
      int v10 = v9;
      if ((unint64_t)v4 >= v5)
      {
        uint64_t v12 = (v4 - v3) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v5 - (void)v3) >> 1 > v13) {
          unint64_t v13 = (uint64_t)(v5 - (void)v3) >> 1;
        }
        if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)sub_22B1EDE8C(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)uint64_t v16 = v10;
        unsigned int v11 = v16 + 4;
        while (v4 != v3)
        {
          int v17 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        unint64_t v5 = v14 + 4 * v15;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = v16;
      }
      else
      {
        *(_DWORD *)uint64_t v4 = v9;
        unsigned int v11 = v4 + 4;
      }
      ++v2;
      uint64_t v4 = v11;
    }
    while (v2 < *(unsigned int *)(a1 + 2792));
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v11 = 0;
  }
  if (v11 == v3) {
    uint64_t v19 = (char *)&unk_2683E9242;
  }
  else {
    uint64_t v19 = v3;
  }
  int v20 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v19, (v11 - v3) >> 2);
  uint64_t v21 = a1 + *(void *)(*(void *)a1 - 24);
  unint64_t v22 = (uint64_t *)(v21 + 704);
  *(unsigned char *)(v21 + 774) = 1;
  int v23 = *(_DWORD *)(v21 + 736) - *(_DWORD *)(v21 + 752) + *(_DWORD *)(v21 + 744);
  sub_22B1F26A0((uint64_t *)(v21 + 704), v20);
  sub_22B1EF4B8(v22, 6, *(unsigned __int8 *)(a1 + 8));
  sub_22B1EF4B8(v22, 8, *(unsigned __int8 *)(a1 + 9));
  sub_22B1EF4B8(v22, 10, *(unsigned __int8 *)(a1 + 2728));
  sub_22B1ED0D4(v22, 12, *(_DWORD *)(a1 + 2732));
  LODWORD(v22) = sub_22B1ECAA8((uint64_t)v22, v23);
  uint64_t v24 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v25 = (uint64_t *)(v24 + 704);
  *(unsigned char *)(v24 + 774) = 1;
  int v26 = *(_DWORD *)(v24 + 736) - *(_DWORD *)(v24 + 752) + *(_DWORD *)(v24 + 744);
  sub_22B1F26A0((uint64_t *)(v24 + 704), v52);
  sub_22B203240(v25, (int)v22);
  uint64_t v27 = a1 + *(void *)(*(void *)a1 - 24) + 704;
  int v28 = sub_22B1ECAA8((uint64_t)v25, v26);
  sub_22B1EE128(v27, v28);
  int v29 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
  uint64_t v30 = (unsigned int *)(v29[23].__r_.__value_.__l.__size_
                       + *(unsigned __int16 *)(v29[23].__r_.__value_.__l.__size_
                                             - *(int *)v29[23].__r_.__value_.__l.__size_
                                             + 4));
  int v31 = (int *)((char *)v30 + *v30);
  BOOL v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*(unsigned int *)((char *)v31 + v32[4] + *(unsigned int *)((char *)v31 + v32[4])) <= 0x20)
  {
    if (*v32 < 0x3Du
      || (uint64_t v33 = v32[30]) == 0
      || (v34 = *(int *)((char *)v31 + v33), unsigned int v35 = *(_DWORD *)(v29[14].__r_.__value_.__l.__size_ + 820), v34 <= v35))
    {
      uint64_t v18 = 1;
      if (!v3) {
        return v18;
      }
      goto LABEL_59;
    }
    BOOL v36 = v29 + 17;
    std::to_string(&v54, v34);
    uint64_t v37 = std::string::insert(&v54, 0, "Threadgroup memory size (");
    std::string::size_type v38 = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    unsigned int v39 = std::string::append(&v55, ") ");
    std::string::size_type v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    uint64_t v41 = std::string::append(&v56, "exceeds the maximum threadgroup memory allowed (");
    std::string::size_type v42 = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v35);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v43 = &v53;
    }
    else {
      uint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v53.__r_.__value_.__l.__size_;
    }
    uint64_t v45 = std::string::append(&v57, (const std::string::value_type *)v43, size);
    std::string::size_type v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v58, ")");
    std::string::size_type v48 = v47->__r_.__value_.__r.__words[2];
    long long v59 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    uint64_t v60 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (v60 >= 0) {
      uint64_t v49 = (const std::string::value_type *)&v59;
    }
    else {
      uint64_t v49 = (const std::string::value_type *)v59;
    }
    if (v60 >= 0) {
      std::string::size_type v50 = HIBYTE(v60);
    }
    else {
      std::string::size_type v50 = *((void *)&v59 + 1);
    }
    std::string::append(v36, v49, v50);
    if (SHIBYTE(v60) < 0) {
      operator delete((void *)v59);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v18 = 0;
  if (v3) {
LABEL_59:
  }
    operator delete(v3);
  return v18;
}

void sub_22B216860(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B21687C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 2720);
  sub_22B1D7BF0(v34, "AGCComputeStateAGP");
  sub_22B1D7BF0(v32, "mutableBuffers");
  sub_22B1ED4EC((uint64_t)&v36);
  sub_22B1E6CB0(&v36.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v36.__r_.__value_.__r + *(void *)(v36.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v36.__r_.__value_.__r + *(void *)(v36.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_22B1F3B10(&v50, (const void **)v32, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v36.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
  std::string::size_type v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + *(void *)(v36.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v36.__r_.__value_.__r.__words[2] = v4;
  uint64_t v37 = MEMORY[0x263F8C318] + 16;
  if (v39 < 0) {
    operator delete(v38);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x230F43590](&v40);
  sub_22B1D7BF0(v30, "maxTotalThreadsPerThreadgroup");
  sub_22B1F37D0(&v51, (const void **)v30, *(_DWORD *)(v3 + 8));
  sub_22B1D7BF0(v28, "wgSizeMultipleOfSIMDWidth");
  sub_22B1F37D0(&v52, (const void **)v28, *(_DWORD *)(v3 + 12) & 1);
  sub_22B1D7BF0(v26, "genCompilerStatistics");
  sub_22B1F37D0(&v53, (const void **)v26, (*(_DWORD *)(v3 + 12) >> 1) & 1);
  sub_22B1D7BF0(v24, "genTelemetryStatistics");
  sub_22B1F37D0(&v54, (const void **)v24, (*(_DWORD *)(v3 + 12) >> 2) & 1);
  sub_22B1D7BF0(v22, "disableTextureRWBoundsCheck");
  sub_22B1F37D0(&v55, (const void **)v22, (*(_DWORD *)(v3 + 12) >> 4) & 1);
  sub_22B1D7BF0(v20, "debugInstrumentationEnabled");
  sub_22B1F37D0(&v56, (const void **)v20, (*(_DWORD *)(v3 + 12) >> 5) & 1);
  sub_22B1D7BF0(v18, "unused");
  sub_22B1F37D0(&v57, (const void **)v18, *(_DWORD *)(v3 + 12) >> 6);
  if (SHIBYTE(v35) < 0)
  {
    sub_22B1DC004(&__dst, v34[0], (unint64_t)v34[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v34;
    uint64_t v48 = v35;
  }
  sub_22B1F4374((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&__dst, 0);
  sub_22B1D7BF0(v42, "{");
  sub_22B1F4374(&v44, (std::string::value_type *)v42, 0);
  if ((v46 & 0x80u) == 0) {
    unint64_t v5 = (const std::string::value_type *)&v44;
  }
  else {
    unint64_t v5 = (const std::string::value_type *)v44;
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v6 = v46;
  }
  else {
    std::string::size_type v6 = v45;
  }
  unsigned int v7 = std::string::append(&__p, v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0) {
    operator delete(v44);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)__dst);
  }
  for (uint64_t i = 0; i != 24; i += 3)
  {
    int v10 = (char *)&v50 + i * 8;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[i + 2]) < 0) {
      sub_22B1DC004(&__p, *(void **)v10, *((void *)v10 + 1));
    }
    else {
      std::string __p = *(std::string *)v10;
    }
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_22B1DC004(&v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v41 = __p;
    }
    sub_22B1F4374(&v44, (std::string::value_type *)&v41, 1);
    if ((v46 & 0x80u) == 0) {
      uint64_t v12 = (const std::string::value_type *)&v44;
    }
    else {
      uint64_t v12 = (const std::string::value_type *)v44;
    }
    if ((v46 & 0x80u) == 0) {
      std::string::size_type v13 = v46;
    }
    else {
      std::string::size_type v13 = v45;
    }
    std::string::append(&v36, v12, v13);
    if ((char)v46 < 0) {
      operator delete(v44);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if ((v11 & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_22B1D7BF0(&v44, "}");
  sub_22B1F4374((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v44, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &v36;
  }
  else {
    unint64_t v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::insert(&__p, 0, (const std::string::value_type *)v14, size);
  *a2 = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v46 < 0) {
    operator delete(v44);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  for (uint64_t j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v57.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v57.__r_.__value_.__l.__data_ + j * 8));
    }
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[0]);
  }
}

uint64_t sub_22B216EB4()
{
  return 2;
}

const char *sub_22B216EBC()
{
  return "compute";
}

void sub_22B216EC8(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  sub_22B216F38(v1, (uint64_t *)&off_26DE74800);
  sub_22B1ED95C((uint64_t)(v1 + 396));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B216F38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[7];
  uint64_t v5 = a1[394];
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 392));
  }
  uint64_t v7 = a1[391];
  if (v7 != -8192 && v7 != -4096 && v7 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 389));
  }
  uint64_t v9 = a1[388];
  if (v9 != -8192 && v9 != -4096 && v9) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 386));
  }
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    uint64_t v11 = a1[i + 385];
    if (v11 != -8192 && v11 != -4096 && v11 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[i + 383]);
    }
  }
  uint64_t v13 = a1[376];
  if (v13 != -8192 && v13 != -4096 && v13 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 374));
  }
  uint64_t v15 = a1[373];
  if (v15 != -8192 && v15 != -4096 && v15) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 371));
  }
  uint64_t v16 = a1[370];
  if (v16 != -8192 && v16 != -4096 && v16) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 368));
  }
  uint64_t v17 = a1[367];
  if (v17 != -8192 && v17 != -4096 && v17) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 365));
  }
  uint64_t v18 = a1[364];
  if (v18 != -8192 && v18 != -4096 && v18) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 362));
  }
  for (uint64_t j = 0; j != -9; j -= 3)
  {
    uint64_t v20 = a1[j + 361];
    if (v20 != -8192 && v20 != -4096 && v20 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[j + 359]);
    }
  }
  unint64_t v22 = (uint64_t *)a1[348];
  if (v22 != a1 + 350) {
    free(v22);
  }
  uint64_t v23 = a1[347];
  if (v23 != -8192 && v23 != -4096 && v23) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 345));
  }
  uint64_t v24 = a2[1];
  *a1 = v24;
  *(uint64_t *)((char *)a1 + *(void *)(v24 - 24)) = a2[6];
  uint64_t v25 = a1[344];
  if (v25 != -8192 && v25 != -4096 && v25) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 342));
  }
  for (uint64_t k = 0; k != -36; k -= 3)
  {
    uint64_t v27 = a1[k + 339];
    if (v27 != -8192 && v27 != -4096 && v27 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&a1[k + 337]);
    }
  }
  return sub_22B23C03C((uint64_t)a1, a2 + 3);
}

uint64_t sub_22B217274(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!a1[344])
  {
    uint64_t v8 = llvm::PointerType::get();
    unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 792) + 288))();
    v50[0] = "agc.stagein_buffer_pointer.";
    v50[2] = v9;
    __int16 v51 = 2051;
    unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 792) + 288))();
    uint64_t v11 = sub_22B22A000(a1, v8, (uint64_t)v50, v10, 24);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 342), v11);
  }
  llvm::FixedVectorType::get();
  uint64_t v12 = llvm::UndefValue::get();
  uint64_t v13 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v14 = a1[344];
  __int16 v51 = 257;
  uint64_t v15 = (uint64_t *)sub_22B1D4240(v13 + 1, **(llvm::Type ***)(*(void *)v14 + 16), v14, 0, (uint64_t)v50);
  if (a3 == 22)
  {
    if (*a2 != 0x676174732E726961
      || a2[1] != 0x6972675F6E695F65
      || *(void *)((char *)a2 + 14) != 0x657A69735F646972)
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (a3 != 24) {
      return result;
    }
    if (*a2 != 0x676174732E726961 || a2[1] != 0x6972675F6E695F65 || a2[2] != 0x6E696769726F5F64) {
      return 0;
    }
  }
  uint64_t v21 = (uint64_t)a1 + *(void *)(*a1 - 24);
  unint64_t v22 = (uint64_t *)llvm::ConstantInt::get();
  __int16 v51 = 257;
  uint64_t v23 = sub_22B1D7544(v21, v15, v22, (uint64_t)v50);
  uint64_t v24 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v51 = 257;
  uint64_t v25 = sub_22B1D4240(v24 + 1, **(llvm::Type ***)(*(void *)v23 + 16), v23, 0, (uint64_t)v50);
  int v26 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v51 = 257;
  uint64_t v27 = (uint64_t)(v26 + 8);
  uint64_t v28 = llvm::ConstantInt::get();
  uint64_t v29 = sub_22B2427EC(v27, v12, v25, v28, (uint64_t)v50);
  uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24);
  char v31 = (uint64_t *)llvm::ConstantInt::get();
  __int16 v51 = 257;
  uint64_t v32 = sub_22B1D7544(v30, v15, v31, (uint64_t)v50);
  char v33 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v51 = 257;
  uint64_t v34 = sub_22B1D4240(v33 + 1, **(llvm::Type ***)(*(void *)v32 + 16), v32, 0, (uint64_t)v50);
  uint64_t v35 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v51 = 257;
  uint64_t v36 = (uint64_t)(v35 + 8);
  uint64_t v37 = llvm::ConstantInt::get();
  uint64_t v38 = sub_22B2427EC(v36, v29, v34, v37, (uint64_t)v50);
  uint64_t v39 = (uint64_t)a1 + *(void *)(*a1 - 24);
  uint64_t v40 = (uint64_t *)llvm::ConstantInt::get();
  __int16 v51 = 257;
  uint64_t v41 = sub_22B1D7544(v39, v15, v40, (uint64_t)v50);
  std::string::size_type v42 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v51 = 257;
  uint64_t v43 = sub_22B1D4240(v42 + 1, **(llvm::Type ***)(*(void *)v41 + 16), v41, 0, (uint64_t)v50);
  BOOL v44 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v51 = 257;
  uint64_t v45 = (uint64_t)(v44 + 8);
  uint64_t v46 = llvm::ConstantInt::get();
  uint64_t v47 = sub_22B2427EC(v45, v38, v43, v46, (uint64_t)v50);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    int v48 = *(_DWORD *)(a4 + 32);
  }
  else {
    int v48 = 1;
  }
  uint64_t v49 = sub_22B2423A4((uint64_t)a1 + *(void *)(*a1 - 24), v47, v48, 1);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    a4 = **(void **)(a4 + 16);
  }
  return sub_22B241FF8((uint64_t *)((char *)a1 + *(void *)(*a1 - 24)), v49, a4);
}

uint64_t sub_22B217918()
{
  return 2;
}

const char *sub_22B217920()
{
  return "compute";
}

uint64_t sub_22B21792C(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 2720) + 12) >> 3) & 1;
}

uint64_t sub_22B21793C()
{
  return 0;
}

uint64_t sub_22B217944()
{
  return 0;
}

uint64_t sub_22B21794C()
{
  return 1;
}

uint64_t sub_22B217954(void *a1)
{
  return *(unsigned int *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 812);
}

uint64_t sub_22B217978(void *a1)
{
  return 1;
}

uint64_t sub_22B217998()
{
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((void *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t sub_22B2179FC(void *a1)
{
  uint64_t v2 = a1[20];
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a1[20]);
    uint64_t v6 = a1[20];
    uint64_t v5 = *(unint64_t **)(v2 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)a1[20]);
    }
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v5 = *(unint64_t **)(v2 + 88);
  }
  uint64_t v7 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  while (v5 != (unint64_t *)v7)
  {
    if (v5[1])
    {
      uint64_t v8 = *(void *)(v4 + 40);
      uint64_t v9 = v8 ? v8 - 24 : 0;
      sub_22B217B5C((uint64_t)a1 + *(void *)(*a1 - 24), v9, a1[5]);
      uint64_t v10 = *((unsigned int *)v5 + 8);
      uint64_t v11 = *(void *)(a1[9] + 8 * v10);
      if ((sub_22B26C064(a1, v5, v10, v11) & 1) == 0)
      {
        uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8));
        uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, unint64_t))(*a1 + 344))(a1, String, v13, *v5);
        if (!result) {
          return result;
        }
        llvm::Value::replaceAllUsesWith();
      }
    }
    v5 += 5;
  }
  return 1;
}

char **sub_22B217B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    llvm::DebugLoc::DebugLoc();
    uint64_t v5 = (void *)(a2 + 48);
    if (&v8 == (uint64_t *)(a2 + 48))
    {
      if (v8) {
        llvm::MetadataTracking::untrack();
      }
    }
    else
    {
      if (*v5) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v6 = v8;
      *uint64_t v5 = v8;
      if (v6)
      {
        llvm::MetadataTracking::retrack();
        uint64_t v8 = 0;
      }
    }
  }
  return sub_22B1FFC54(a1 + 8, a2);
}

uint64_t sub_22B217BFC()
{
  return 106;
}

uint64_t sub_22B217C04(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unsigned int v2 = *(_DWORD *)(a1 + 2732);
  unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 2720) + 8);
  uint64_t v4 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
  uint64_t v5 = v4 + 17;
  if (v3) {
    BOOL v6 = v2 == v3;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v2 != 0)
  {
    std::to_string(&v38, v2);
    uint64_t v15 = std::string::insert(&v38, 0, ": Kernel specified max total threads per threadgroup (");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    uint64_t v17 = std::string::append(&v39, ") ");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v19 = std::string::append(&v40, "must match compute pipeline specified max total threads per threadgroup (");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = v3;
LABEL_13:
    std::to_string(&__p, v21);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v41, (const std::string::value_type *)p_p, size);
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = std::string::append(&v42, ")");
    std::string::size_type v27 = v26->__r_.__value_.__r.__words[2];
    long long v43 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    uint64_t v44 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (v44 >= 0) {
      uint64_t v28 = (const std::string::value_type *)&v43;
    }
    else {
      uint64_t v28 = (const std::string::value_type *)v43;
    }
    if (v44 >= 0) {
      std::string::size_type v29 = HIBYTE(v44);
    }
    else {
      std::string::size_type v29 = *((void *)&v43 + 1);
    }
    std::string::append(v5, v28, v29);
    if (SHIBYTE(v44) < 0) {
      operator delete((void *)v43);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  unsigned int v8 = *(_DWORD *)(v4[14].__r_.__value_.__l.__size_ + 824);
  if (!v2) {
    unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 2720) + 8);
  }
  if (v2 > v8)
  {
    std::to_string(&v38, v2);
    uint64_t v9 = std::string::insert(&v38, 0, ": Specified total max threads per threadgroup (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v39, ") ");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = std::string::append(&v40, "exceeds the maximum total threads per threadgroup supported (");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = v8;
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 2732) = v2;
  sub_22B23B86C(a1);
  llvm::Module::getOrInsertNamedMetadata();
  *(void *)&long long v43 = llvm::MDString::get();
  llvm::ConstantInt::get();
  *((void *)&v43 + 1) = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (*(_DWORD *)(a1 + 32) >= 2u) {
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 312), *(llvm::Module **)(a1 + *(void *)(*(void *)a1 - 24) + 320));
  }
  uint64_t v31 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320);
  uint64_t v32 = v31 + 8;
  uint64_t v33 = *(void *)(v31 + 16);
  if (v33 != v31 + 8)
  {
    do
    {
      if (v33) {
        uint64_t v34 = (uint64_t *)(v33 - 56);
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t v35 = *v34;
      if (*v34)
      {
        int v36 = *(_DWORD *)(v35 + 8);
        if ((v36 & 0xFE) == 0x12) {
          int v36 = *(_DWORD *)(**(void **)(v35 + 16) + 8);
        }
        if ((v36 & 0xFFFFFF00) == 0x300) {
          llvm::GlobalObject::setSection();
        }
      }
      uint64_t v33 = *(void *)(v33 + 8);
    }
    while (v33 != v32);
  }
  return 1;
}

uint64_t sub_22B218080(void *a1)
{
  uint64_t v1 = sub_22B216F38((void *)((char *)a1 + *(void *)(*a1 - 32)), (uint64_t *)&off_26DE74800) + 3168;
  return sub_22B1ED95C(v1);
}

uint64_t sub_22B2180CC(uint64_t a1)
{
  uint64_t v161 = *MEMORY[0x263EF8340];
  unsigned int v126 = sub_22B23AAFC((void *)a1);
  if (v126)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 152) + 80);
    if (v2) {
      unsigned int v3 = (llvm::BasicBlock *)(v2 - 24);
    }
    else {
      unsigned int v3 = 0;
    }
    uint64_t v130 = (void *)a1;
    if (*(unsigned char *)(a1 + 2728))
    {
      *(void *)&long long v143 = llvm::BasicBlock::getFirstInsertionPt(v3);
      sub_22B23B300((uint64_t)v3, (uint64_t)&v143);
      long long v148 = "kernel_entry";
      __int16 v152 = 259;
      llvm::BasicBlock::splitBasicBlock();
      long long v148 = "early_out_block";
      __int16 v152 = 259;
      operator new();
    }
    uint64_t v4 = a1 + 192;
    uint64_t v5 = (char **)(a1 + *(void *)(*(void *)a1 - 24) + 8);
    FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v3);
    sub_22B1D3CF8(v5, (char *)v3, FirstInsertionPt);
    uint64_t v7 = 0;
    unsigned int v8 = (llvm::ValueHandleBase *)(a1 + 2824);
    uint64_t v9 = (void *)a1;
    char v10 = 1;
    do
    {
      uint64_t v11 = sub_22B21A2BC((uint64_t)v9, *(void *)(v4 + *(void *)(*v9 - 24)), v7);
      sub_22B212008(v8, v11);
      v10 &= *((void *)v8 + 2) != 0;
      ++v7;
      unsigned int v8 = (llvm::ValueHandleBase *)((char *)v8 + 24);
    }
    while (v7 != 3);
    if (v10)
    {
      std::string::size_type v12 = (char *)v130 + *(void *)(*v130 - 24);
      uint64_t v13 = (uint64_t)(v12 + 8);
      uint64_t v14 = v130[361];
      uint64_t v15 = sub_22B21A0A0(v130, *((void *)v12 + 24), 1u);
      __int16 v152 = 257;
      uint64_t v16 = sub_22B1D7468(v13, v14, v15, (uint64_t)&v148);
      sub_22B212008((llvm::ValueHandleBase *)(v130 + 362), v16);
      uint64_t v17 = (uint64_t)v130 + *(void *)(*v130 - 24) + 8;
      uint64_t v18 = v130[364];
      uint64_t v19 = v130[358];
      __int16 v152 = 257;
      uint64_t v20 = sub_22B1D6A70(v17, v18, v19, (uint64_t)&v148);
      sub_22B212008((llvm::ValueHandleBase *)(v130 + 362), v20);
      unsigned int v21 = (char *)v130 + *(void *)(*v130 - 24);
      uint64_t v22 = (uint64_t)(v21 + 8);
      uint64_t v23 = v130[364];
      uint64_t v24 = sub_22B21A0A0(v130, *((void *)v21 + 24), 0);
      __int16 v152 = 257;
      uint64_t v25 = sub_22B1D7468(v22, v23, v24, (uint64_t)&v148);
      sub_22B212008((llvm::ValueHandleBase *)(v130 + 362), v25);
      uint64_t v26 = (uint64_t)v130 + *(void *)(*v130 - 24) + 8;
      uint64_t v27 = v130[364];
      uint64_t v28 = v130[355];
      __int16 v152 = 257;
      uint64_t v29 = sub_22B1D6A70(v26, v27, v28, (uint64_t)&v148);
      sub_22B212008((llvm::ValueHandleBase *)(v130 + 362), v29);
    }
    uint64_t v30 = *(llvm::Type ***)((char *)v130 + *(void *)(*v130 - 24) + 320);
    sub_22B241938((uint64_t)&v148, *v30);
    std::string v157 = v130;
    long long v148 = &unk_26DE79C00;
    v156[23] = v30;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E90C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_2683E90C0))
    {
      qword_2683E8EC0[0] = (uint64_t)"air.get_global_size.i32";
      *(void *)algn_2683E8EC8 = sub_22B21A010;
      qword_2683E8ED0 = 0;
      dword_2683E8ED8 = 4;
      word_2683E8EDC = 0;
      qword_2683E8EE0 = (uint64_t)"air.get_global_size.i16";
      unk_2683E8EE8 = sub_22B21A010;
      qword_2683E8EF0 = 0;
      dword_2683E8EF8 = 4;
      word_2683E8EFC = 0;
      qword_2683E8F00 = (uint64_t)"air.get_global_id.i32";
      unk_2683E8F08 = sub_22B219F24;
      qword_2683E8F10 = 0;
      dword_2683E8F18 = 4;
      word_2683E8F1C = 0;
      qword_2683E8F20 = (uint64_t)"air.get_global_id.i16";
      unk_2683E8F28 = sub_22B219F24;
      qword_2683E8F30 = 0;
      dword_2683E8F38 = 4;
      word_2683E8F3C = 0;
      qword_2683E8F40 = (uint64_t)"air.get_local_size.i32";
      unk_2683E8F48 = sub_22B21A2B8;
      qword_2683E8F50 = 0;
      dword_2683E8F58 = 4;
      word_2683E8F5C = 0;
      qword_2683E8F60 = (uint64_t)"air.get_local_size.i16";
      unk_2683E8F68 = sub_22B21A2B8;
      qword_2683E8F70 = 0;
      dword_2683E8F78 = 4;
      word_2683E8F7C = 0;
      qword_2683E8F80 = (uint64_t)"air.get_local_id.i32";
      unk_2683E8F88 = sub_22B21A258;
      qword_2683E8F90 = 0;
      dword_2683E8F98 = 4;
      word_2683E8F9C = 0;
      qword_2683E8FA0 = (uint64_t)"air.get_local_id.i16";
      unk_2683E8FA8 = sub_22B21A258;
      qword_2683E8FB0 = 0;
      dword_2683E8FB8 = 4;
      word_2683E8FBC = 0;
      qword_2683E8FC0 = (uint64_t)"air.get_local_linear_id.i32";
      unk_2683E8FC8 = sub_22B21A200;
      qword_2683E8FD0 = 0;
      dword_2683E8FD8 = 2;
      word_2683E8FDC = 0;
      qword_2683E8FE0 = (uint64_t)"air.get_local_linear_id.i16";
      unk_2683E8FE8 = sub_22B21A200;
      qword_2683E8FF0 = 0;
      dword_2683E8FF8 = 2;
      word_2683E8FFC = 0;
      qword_2683E9000 = (uint64_t)"air.get_global_linear_id.i32";
      unk_2683E9008 = sub_22B219DBC;
      qword_2683E9010 = 0;
      dword_2683E9018 = 2;
      word_2683E901C = 0;
      qword_2683E9020 = (uint64_t)"air.get_global_linear_id.i16";
      unk_2683E9028 = sub_22B219DBC;
      qword_2683E9030 = 0;
      dword_2683E9038 = 2;
      word_2683E903C = 0;
      qword_2683E9040 = (uint64_t)"air.get_num_groups.i32";
      unk_2683E9048 = sub_22B219B98;
      qword_2683E9050 = 0;
      dword_2683E9058 = 4;
      word_2683E905C = 0;
      qword_2683E9060 = (uint64_t)"air.get_num_groups.i16";
      unk_2683E9068 = sub_22B219B98;
      qword_2683E9070 = 0;
      dword_2683E9078 = 4;
      word_2683E907C = 0;
      qword_2683E9080 = (uint64_t)"air.get_group_id.i32";
      unk_2683E9088 = sub_22B219998;
      qword_2683E9090 = 0;
      dword_2683E9098 = 4;
      word_2683E909C = 0;
      qword_2683E90A0 = (uint64_t)"air.get_group_id.i16";
      unk_2683E90A8 = sub_22B219998;
      qword_2683E90B0 = 0;
      dword_2683E90B8 = 4;
      word_2683E90BC = 0;
      __cxa_guard_release(&qword_2683E90C0);
    }
    uint64_t v31 = 0;
    uint64_t v32 = &v141;
    do
    {
      if (qword_2683E8EC0[4 * v31]) {
        strlen((const char *)qword_2683E8EC0[4 * v31]);
      }
      uint64_t Function = llvm::Module::getFunction();
      if (Function)
      {
        uint64_t v34 = (llvm::Function *)Function;
        uint64_t v35 = &qword_2683E8EC0[4 * v31];
        std::string v132 = v35 + 1;
        __int16 v135 = v35 + 3;
        if (*((_DWORD *)v35 + 6) == 9)
        {
          uint64_t v38 = *(void *)(Function + 8);
          while (v38)
          {
            uint64_t v39 = *(void *)(v38 + 24);
            uint64_t v38 = *(void *)(v38 + 8);
            std::string v40 = (const char *)*v132;
            uint64_t v41 = v132[1];
            std::string v42 = (void *)((char *)v157 + (v41 >> 1));
            if (v41) {
              std::string v40 = *(const char **)(*v42 + v40);
            }
            ((void (*)(void *, uint64_t))v40)(v42, v39);
          }
        }
        else if (*((_DWORD *)v35 + 6) == 8)
        {
          int v36 = (char *)*v132;
          if (*v132)
          {
            size_t v37 = strlen((const char *)*v132);
            *(void *)&v158[0] = (char *)&v158[1] + 8;
            *(_OWORD *)((char *)v158 + 8) = xmmword_22B26F8B0;
            sub_22B1EC888(v158, v36, &v36[v37]);
          }
          else
          {
            *(void *)&v158[1] = 64;
            v158[0] = (unint64_t)&v158[1] + 8;
          }
          sub_22B1EC888(v158, ".", "");
          if (*(void *)&v158[1] < *((void *)&v158[0] + 1)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          llvm::Module::getOrInsertFunction();
          llvm::Value::replaceAllUsesWith();
          if (*(_OWORD **)&v158[0] != (_OWORD *)((char *)&v158[1] + 8)) {
            free(*(void **)&v158[0]);
          }
        }
        else
        {
          uint64_t v43 = **(void **)(*(void *)(Function + 24) + 16);
          BOOL v44 = (*(_DWORD *)(v43 + 8) & 0xFE) != 0x12 || BYTE5(qword_2683E8EC0[4 * v31 + 3]) == 0;
          int v45 = !v44;
          uint64_t v129 = v31;
          if (v44) {
            uint64_t v46 = 1;
          }
          else {
            uint64_t v46 = *(unsigned int *)(v43 + 32);
          }
          uint64_t v136 = v46;
          int v127 = v154;
          int v128 = (llvm::Function *)Function;
          uint64_t v47 = *(void *)(Function + 8);
          if (v47)
          {
            std::string v134 = (char *)&qword_2683E8EC0[4 * v31 + 3] + 4;
            do
            {
              int v48 = *(llvm::Instruction **)(v47 + 24);
              uint64_t v131 = *(void *)(v47 + 8);
              int FastMathFlags = sub_22B1D44A8((uint64_t)v48);
              if (FastMathFlags) {
                int FastMathFlags = llvm::Instruction::getFastMathFlags(v48);
              }
              int v154 = FastMathFlags;
              sub_22B1FFC54((uint64_t)&v149, (uint64_t)v48);
              uint64_t v50 = llvm::UndefValue::get();
              if (v136)
              {
                for (uint64_t i = 0; i != v136; ++i)
                {
                  uint64_t v138 = v50;
                  std::string v52 = v32;
                  uint64_t v160 = 0;
                  long long v159 = 0u;
                  memset(v158, 0, sizeof(v158));
                  unint64_t v53 = sub_22B1F50A8(v48) - (void)v48 + 32 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF);
                  if ((v53 & 0x1FFFFFFFE0) != 0)
                  {
                    uint64_t v54 = (v53 >> 5);
                    std::string v55 = (uint64_t *)v158;
                    std::string v56 = v48;
                    do
                    {
                      std::string v57 = (uint64_t *)((char *)v56 - 32 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF));
                      uint64_t v58 = *v57;
                      *std::string v55 = *v57;
                      if (v45 && (*(_DWORD *)(*(void *)v58 + 8) & 0xFE) == 0x12)
                      {
                        __int16 v147 = 257;
                        uint64_t v59 = llvm::ConstantInt::get();
                        *std::string v55 = sub_22B242524((uint64_t)&v149, v58, v59, (uint64_t)v146);
                      }
                      ++v55;
                      std::string v56 = (llvm::Instruction *)((char *)v56 + 32);
                      --v54;
                    }
                    while (v54);
                  }
                  if (*v134)
                  {
                    uint64_t v60 = **(llvm::Type ***)&v158[0];
                    uint64_t v32 = v52;
                    if ((*(_DWORD *)(**(void **)&v158[0] + 8) & 0xFE) == 0x12) {
                      uint64_t v60 = (llvm::Type *)**((void **)v60 + 2);
                    }
                    v146[0] = llvm::Type::getPrimitiveSizeInBits(v60);
                    v146[1] = v61;
                    if (llvm::TypeSize::operator unsigned long long() == 32)
                    {
                      int v62 = 0;
                    }
                    else
                    {
                      uint64_t v63 = v156[3];
                      if ((*(_DWORD *)(**(void **)&v158[0] + 8) & 0xFE) == 0x12) {
                        uint64_t v63 = llvm::FixedVectorType::get();
                      }
                      if ((v53 & 0x1FFFFFFFE0) != 0)
                      {
                        uint64_t v64 = (v53 >> 5);
                        char v65 = v158;
                        do
                        {
                          uint64_t v66 = *(void *)v65;
                          if (*(unsigned char *)(**(void **)v65 + 8) != 15)
                          {
                            __int16 v147 = 257;
                            *(void *)char v65 = sub_22B1EEEB4((uint64_t)&v149, v66, v63, (uint64_t)v146);
                          }
                          char v65 = (_OWORD *)((char *)v65 + 8);
                          --v64;
                        }
                        while (v64);
                        int v62 = 1;
                      }
                      else
                      {
                        int v62 = 1;
                      }
                    }
                  }
                  else
                  {
                    int v62 = 0;
                    uint64_t v32 = v52;
                  }
                  int v67 = (char *)v157 + *(void *)(*v157 - 24);
                  long long v143 = v153;
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v144, (llvm::IRBuilderBase *)&v149);
                  int v145 = v154;
                  sub_22B1D3C74((uint64_t)&v143, (uint64_t)(v67 + 8));
                  if (v144) {
                    llvm::MetadataTracking::untrack();
                  }
                  switch(*v135)
                  {
                    case 1:
                      int v68 = (const char *)*v132;
                      uint64_t v69 = v132[1];
                      uint64_t v70 = (void *)((char *)v157 + (v69 >> 1));
                      if (v69) {
                        int v68 = *(const char **)(*v70 + v68);
                      }
                      uint64_t v84 = ((uint64_t (*)(void *))v68)(v70);
                      goto LABEL_91;
                    case 2:
                      uint64_t v76 = (const char *)*v132;
                      uint64_t v83 = v132[1];
                      uint64_t v78 = *(void *)v48;
                      uint64_t v79 = (void *)((char *)v157 + (v83 >> 1));
                      if (v83) {
                        goto LABEL_76;
                      }
                      goto LABEL_77;
                    case 3:
                      uint64_t v76 = (const char *)*v132;
                      uint64_t v77 = v132[1];
                      uint64_t v78 = *(void *)&v158[0];
                      uint64_t v79 = (void *)((char *)v157 + (v77 >> 1));
                      if ((v77 & 1) == 0) {
                        goto LABEL_77;
                      }
LABEL_76:
                      uint64_t v76 = *(const char **)(*v79 + v76);
LABEL_77:
                      uint64_t v84 = ((uint64_t (*)(void *, uint64_t))v76)(v79, v78);
                      goto LABEL_91;
                    case 4:
                      int v81 = (unsigned int *)(*(void *)&v158[0] + 24);
                      if (*(_DWORD *)(*(void *)&v158[0] + 32) >= 0x41u) {
                        int v81 = *(unsigned int **)v81;
                      }
                      uint64_t v74 = *v81;
                      int v71 = (const char *)*v132;
                      uint64_t v82 = v132[1];
                      uint64_t v73 = *(void *)v48;
                      uint64_t v75 = (void *)((char *)v157 + (v82 >> 1));
                      if (v82) {
                        int v71 = *(const char **)(*v75 + v71);
                      }
                      goto LABEL_83;
                    case 5:
                      int v71 = (const char *)*v132;
                      uint64_t v72 = v132[1];
                      uint64_t v74 = *((void *)&v158[0] + 1);
                      uint64_t v73 = *(void *)&v158[0];
                      uint64_t v75 = (void *)((char *)v157 + (v72 >> 1));
                      if (v72) {
                        int v71 = *(const char **)(*v75 + v71);
                      }
LABEL_83:
                      uint64_t v84 = ((uint64_t (*)(void *, uint64_t, uint64_t))v71)(v75, v73, v74);
                      goto LABEL_91;
                    case 6:
                      uint64_t v85 = (const char *)*v132;
                      uint64_t v86 = v132[1];
                      std::string v88 = (void *)*((void *)&v158[0] + 1);
                      uint64_t v87 = *(_OWORD **)&v158[0];
                      uint64_t v89 = *(void *)&v158[1];
                      std::string v90 = (void *)((char *)v157 + (v86 >> 1));
                      if ((v86 & 1) == 0) {
                        goto LABEL_90;
                      }
                      uint64_t v84 = (*(uint64_t (**)(void *, void, void, void))(*v90 + v85))(v90, *(void *)&v158[0], *((void *)&v158[0] + 1), *(void *)&v158[1]);
                      goto LABEL_91;
                    case 7:
                      uint64_t v85 = (const char *)*v132;
                      uint64_t v91 = v132[1];
                      std::string v90 = (void *)((char *)v157 + (v91 >> 1));
                      if (v91) {
                        uint64_t v85 = *(const char **)(*v90 + v85);
                      }
                      uint64_t v87 = v158;
                      std::string v88 = &unk_22B27C63D;
                      uint64_t v89 = 0;
LABEL_90:
                      uint64_t v84 = ((uint64_t (*)(void *, _OWORD *, void *, uint64_t))v85)(v90, v87, v88, v89);
LABEL_91:
                      uint64_t v80 = v84;
                      break;
                    default:
                      uint64_t v80 = 0;
                      break;
                  }
                  std::string v92 = (char *)v157 + *(void *)(*v157 - 24);
                  long long v140 = *(_OWORD *)(v92 + 56);
                  llvm::IRBuilderBase::getCurrentDebugLocation(v32, (llvm::IRBuilderBase *)(v92 + 8));
                  int v142 = *((_DWORD *)v92 + 26);
                  sub_22B1D3C74((uint64_t)&v140, (uint64_t)&v149);
                  if (v141) {
                    llvm::MetadataTracking::untrack();
                  }
                  if (v62)
                  {
                    uint64_t v93 = *(void *)v48;
                    if (v45 && (*(_DWORD *)(v93 + 8) & 0xFE) == 0x12) {
                      uint64_t v93 = **(void **)(v93 + 16);
                    }
                    __int16 v147 = 257;
                    uint64_t v80 = sub_22B1DC548((uint64_t)&v149, v80, v93, (uint64_t)v146);
                  }
                  if (v45)
                  {
                    __int16 v147 = 257;
                    uint64_t v94 = llvm::ConstantInt::get();
                    uint64_t v80 = sub_22B2427EC((uint64_t)&v149, v138, v80, v94, (uint64_t)v146);
                  }
                  uint64_t v50 = v80;
                }
              }
              if (*(void *)v48 != v156[1]) {
                llvm::Value::replaceAllUsesWith();
              }
              llvm::Instruction::eraseFromParent(v48);
              uint64_t v47 = v131;
            }
            while (v131);
          }
          int v154 = v127;
          uint64_t v34 = v128;
          uint64_t v31 = v129;
        }
        llvm::Function::eraseFromParent(v34);
      }
      ++v31;
    }
    while (v31 != 16);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v156);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v155);
    if (v149 != &v151) {
      free(v149);
    }
    std::string v95 = v130;
    uint64_t v96 = llvm::Module::getFunction();
    if (v96)
    {
      uint64_t v97 = v96;
      if (!v130[370])
      {
        long long v148 = "agc.barrier_target_count";
        __int16 v152 = 259;
        uint64_t v98 = sub_22B219890(v130);
        sub_22B212008((llvm::ValueHandleBase *)(v130 + 368), v98);
      }
      if (!v130[373])
      {
        uint64_t v99 = llvm::User::operator new((llvm::User *)0x58);
        long long v148 = "agc.barrier_counter";
        __int16 v152 = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        uint64_t v100 = v99;
        std::string v95 = v130;
        sub_22B212008((llvm::ValueHandleBase *)(v130 + 371), v100);
      }
      uint64_t v101 = *(void *)(v97 + 8);
      if (v101)
      {
        int v102 = 0;
        uint64_t v103 = v95 + 24;
        uint64_t v137 = v95 + 1;
        unint64_t v139 = v95 + 43;
        std::string::size_type v133 = (llvm::ValueHandleBase *)(v95 + 374);
        do
        {
          uint64_t v104 = *(llvm::Instruction **)(v101 + 24);
          uint64_t v105 = *((void *)v104 - 4 * (*((_DWORD *)v104 + 5) & 0x7FFFFFF));
          uint64_t v106 = (void *)(v105 + 24);
          if (*(_DWORD *)(v105 + 32) >= 0x41u) {
            uint64_t v106 = (void *)*v106;
          }
          uint64_t v101 = *(void *)(v101 + 8);
          uint64_t v107 = (void *)*v106;
          long long v148 = &v150;
          long long v149 = (void *)0x400000000;
          uint64_t v108 = llvm::PointerType::get();
          sub_22B1D6788((uint64_t)&v148, v108);
          uint64_t v109 = llvm::PointerType::get();
          sub_22B1D6788((uint64_t)&v148, v109);
          sub_22B1D6788((uint64_t)&v148, *(void *)((char *)v103 + *(void *)(*v95 - 24)));
          uint64_t v110 = *(void *)((char *)v95 + *(void *)(*v95 - 24) + 344);
          if (*(void *)(v110 + 880)) {
            BOOL v111 = (v107 & 1) == 0;
          }
          else {
            BOOL v111 = 1;
          }
          if (v111)
          {
            int v113 = (const char **)(v110 + 872);
          }
          else
          {
            uint64_t v112 = llvm::PointerType::get();
            sub_22B1D6788((uint64_t)&v148, v112);
            int v113 = (const char **)(*(void *)((char *)v139 + *(void *)(*v95 - 24)) + 880);
          }
          uint64_t v114 = *v113;
          llvm::FunctionType::get();
          if (v114) {
            strlen(v114);
          }
          llvm::Module::getOrInsertFunction();
          uint64_t v116 = v115;
          if (v148 != &v150) {
            free(v148);
          }
          sub_22B1FFC54((uint64_t)v130 + *(void *)(*v130 - 24) + 8, (uint64_t)v104);
          long long v148 = &v150;
          long long v149 = (void *)0x400000000;
          sub_22B1D6788((uint64_t)&v148, v130[373]);
          sub_22B1D6788((uint64_t)&v148, v130[370]);
          uint64_t v117 = llvm::ConstantInt::get();
          sub_22B1D6788((uint64_t)&v148, v117);
          uint64_t v118 = *v130;
          uint64_t v119 = *(void *)((char *)v139 + *(void *)(*v130 - 24));
          if (!*(unsigned char *)(v119 + 1636)) {
            ++v102;
          }
          if (*(void *)(v119 + 880) && (v107 & 1) != 0)
          {
            if (!v130[376])
            {
              *(void *)&v158[0] = "agc.mem_fence_addr";
              LOWORD(v159) = 259;
              llvm::PointerType::get();
              uint64_t v120 = sub_22B219890(v130);
              sub_22B212008(v133, v120);
              uint64_t v118 = *v130;
            }
            uint64_t v121 = *(void *)(v118 - 24);
            uint64_t v122 = v130[376];
            LOWORD(v159) = 257;
            uint64_t v123 = sub_22B1D4240((void *)((char *)v137 + v121), **(llvm::Type ***)(*(void *)v122 + 16), v122, 0, (uint64_t)v158);
            sub_22B1D6788((uint64_t)&v148, v123);
            uint64_t v118 = *v130;
          }
          uint64_t v124 = (uint64_t)v137 + *(void *)(v118 - 24);
          LOWORD(v159) = 257;
          sub_22B1D4034(v124, *(void *)(v116 + 24), v116, (uint64_t)v148, v149, (uint64_t)v158);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v104);
          if (v148 != &v150) {
            free(v148);
          }
          std::string v95 = v130;
        }
        while (v101);
      }
    }
  }
  return v126;
}

uint64_t sub_22B219890(void *a1)
{
  uint64_t v2 = llvm::User::operator new((llvm::User *)0x58);
  uint64_t v3 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v3 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  return v2;
}

uint64_t sub_22B219998(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = &a1[3 * a3];
  BOOL v6 = (llvm::ValueHandleBase *)(v5 + 377);
  if (!v5[379])
  {
    uint64_t v7 = a3;
    uint64_t v8 = llvm::User::operator new((llvm::User *)0x58);
    uint64_t v9 = off_26488DD60[v7];
    if (*v9)
    {
      v19[0] = "agx.group_id_";
      uint64_t v20 = v9;
      __int16 v10 = 771;
    }
    else
    {
      v19[0] = "agx.group_id_";
      __int16 v10 = 259;
    }
    __int16 v21 = v10;
    llvm::GlobalVariable::GlobalVariable();
    if (*v9)
    {
      v19[0] = "cl_group_id_";
      uint64_t v20 = v9;
      __int16 v11 = 771;
    }
    else
    {
      v19[0] = "cl_group_id_";
      __int16 v11 = 259;
    }
    __int16 v21 = v11;
    llvm::Twine::str((uint64_t *)&__p, (llvm::Twine *)v19);
    llvm::GlobalObject::setSection();
    if (v17 < 0) {
      operator delete(__p);
    }
    llvm::GlobalObject::setAlignment();
    sub_22B212008(v6, v8);
  }
  std::string::size_type v12 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  uint64_t v13 = *((void *)v6 + 2);
  __int16 v21 = 257;
  uint64_t v14 = sub_22B1D4240(v12, **(llvm::Type ***)(*(void *)v13 + 16), v13, 0, (uint64_t)v19);
  __int16 v18 = 257;
  return sub_22B1D7384((uint64_t)v12, 38, v14, a2, (uint64_t)&__p);
}

uint64_t sub_22B219B98(uint64_t *a1, uint64_t a2)
{
  if (!a1[347])
  {
    uint64_t v4 = llvm::PointerType::get();
    uint64_t v5 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 792);
    unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 232))(v5);
    v20[0] = "agc.indirect_wg_count_buffer_pointer.";
    v20[2] = v6;
    __int16 v21 = 2051;
    uint64_t v7 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 792);
    unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 232))(v7);
    uint64_t v9 = sub_22B22A000(a1, v4, (uint64_t)v20, v8, 12);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 345), v9);
  }
  __int16 v10 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v11 = a1[347];
  __int16 v21 = 257;
  std::string::size_type v12 = (uint64_t *)sub_22B1D4240(v10 + 1, **(llvm::Type ***)(*(void *)v11 + 16), v11, 0, (uint64_t)v20);
  uint64_t v13 = (uint64_t)a1 + *(void *)(*a1 - 24);
  uint64_t v14 = (uint64_t *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t v15 = sub_22B1D7544(v13, v12, v14, (uint64_t)v20);
  uint64_t v16 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  __int16 v21 = 257;
  uint64_t v17 = sub_22B1D4240(v16, **(llvm::Type ***)(*(void *)v15 + 16), v15, 0, (uint64_t)v20);
  unsigned char v19[16] = 257;
  return sub_22B1D7384((uint64_t)v16, 38, v17, a2, (uint64_t)v19);
}

uint64_t sub_22B219DBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v5 = sub_22B219F24(a1, a2, 2u);
  uint64_t v6 = sub_22B21A010(a1, a2, 1u);
  __int16 v18 = 257;
  uint64_t v7 = sub_22B1D7468(v4, v5, v6, (uint64_t)v17);
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v9 = sub_22B219F24(a1, a2, 1u);
  __int16 v18 = 257;
  uint64_t v10 = sub_22B1D6A70(v8, v7, v9, (uint64_t)v17);
  uint64_t v11 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v12 = sub_22B21A010(a1, a2, 0);
  __int16 v18 = 257;
  uint64_t v13 = sub_22B1D7468(v11, v10, v12, (uint64_t)v17);
  uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v15 = sub_22B219F24(a1, a2, 0);
  __int16 v18 = 257;
  return sub_22B1D6A70(v14, v13, v15, (uint64_t)v17);
}

uint64_t sub_22B219F24(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v7 = sub_22B21A0A0(a1, a2, a3);
  uint64_t v8 = sub_22B219998(a1, a2, a3);
  __int16 v15 = 257;
  uint64_t v9 = sub_22B1D7468(v6, v7, v8, (uint64_t)v14);
  uint64_t v10 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v11 = a1[3 * a3 + 355];
  __int16 v15 = 257;
  uint64_t v12 = sub_22B1D7384(v10, 38, v11, a2, (uint64_t)v14);
  __int16 v15 = 257;
  return sub_22B1D6A70(v10, v9, v12, (uint64_t)v14);
}

uint64_t sub_22B21A010(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v6 = sub_22B21A0A0(a1, a2, a3);
  uint64_t v7 = sub_22B219B98(a1, a2);
  __int16 v10 = 257;
  return sub_22B1D7468(v5, v6, v7, (uint64_t)v9);
}

uint64_t sub_22B21A0A0(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = &a1[3 * a3];
  uint64_t v6 = (llvm::ValueHandleBase *)(v5 + 322);
  if (!v5[324])
  {
    *(void *)&long long v13 = "agc.";
    *(void *)&long long v14 = "local_size";
    LOWORD(v15) = 771;
    uint64_t v7 = off_26488DD08[a3];
    if (*v7)
    {
      *(void *)&long long v16 = &v13;
      *(void *)&long long v17 = v7;
      LOWORD(v18) = 770;
    }
    else
    {
      long long v16 = v13;
      long long v17 = v14;
      uint64_t v18 = v15;
    }
    uint64_t v8 = sub_22B219890(a1);
    sub_22B212008(v6, v8);
  }
  uint64_t v9 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  uint64_t v10 = *((void *)v6 + 2);
  LOWORD(v18) = 257;
  uint64_t v11 = sub_22B1D4240(v9, **(llvm::Type ***)(*(void *)v10 + 16), v10, 0, (uint64_t)&v16);
  LOWORD(v15) = 257;
  return sub_22B1D7384((uint64_t)v9, 38, v11, a2, (uint64_t)&v13);
}

uint64_t sub_22B21A200(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v3 = a1[364];
  __int16 v6 = 257;
  return sub_22B1D7384(v2, 38, v3, a2, (uint64_t)v5);
}

uint64_t sub_22B21A258(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v4 = a1[3 * a3 + 355];
  __int16 v7 = 257;
  return sub_22B1D7384(v3, 38, v4, a2, (uint64_t)v6);
}

uint64_t sub_22B21A2BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a1 + 4 * a3 + 2808);
  if (v3 == -1) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 152);
  if (*(_WORD *)(v7 + 18)) {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 152));
  }
  uint64_t v8 = 40 * (v3 - 1) + 40;
  if (!v3) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v7 + 88) + v8;
  if (a3)
  {
    uint64_t v10 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v11 = *(void *)(v10 + 232);
    __int16 v21 = 257;
    uint64_t v12 = sub_22B1D7384(v10 + 8, 49, v9, v11, (uint64_t)v20);
    uint64_t v13 = a1 + *(void *)(*(void *)a1 - 24);
    __int16 v21 = 257;
    uint64_t v14 = v13 + 8;
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t v16 = sub_22B242524(v14, v12, v15, (uint64_t)v20);
    uint64_t v17 = *(void *)(*(void *)a1 - 24) + a1 + 8;
    __int16 v21 = 257;
    uint64_t v9 = sub_22B1D7384(v17, 39, v16, a2, (uint64_t)v20);
  }
  uint64_t v19 = *(void *)(*(void *)a1 - 24) + a1 + 8;
  __int16 v21 = 257;
  return sub_22B1D7384(v19, 38, v9, a2, (uint64_t)v20);
}

uint64_t sub_22B21A440(uint64_t *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v3 = a1[394];
    if (!v3)
    {
      uint64_t v4 = a1 + 394;
      uint64_t v5 = (llvm::ValueHandleBase *)(a1 + 392);
      uint64_t v9 = "agc.local_xdim_mul_and_shift";
      __int16 v10 = 259;
      goto LABEL_10;
    }
  }
  else if (a2 == 1)
  {
    uint64_t v3 = a1[391];
    if (!v3)
    {
      uint64_t v4 = a1 + 391;
      uint64_t v5 = (llvm::ValueHandleBase *)(a1 + 389);
      uint64_t v9 = "agc.local_slice_mul_and_shift";
      __int16 v10 = 259;
      goto LABEL_10;
    }
  }
  else
  {
    if (a2)
    {
      uint64_t v3 = 0;
      goto LABEL_12;
    }
    uint64_t v3 = a1[388];
    if (!v3)
    {
      uint64_t v4 = a1 + 388;
      uint64_t v5 = (llvm::ValueHandleBase *)(a1 + 386);
      uint64_t v9 = "agc.local_slice_and_linear_size";
      __int16 v10 = 259;
LABEL_10:
      uint64_t v6 = sub_22B219890(a1);
      sub_22B212008(v5, v6);
      uint64_t v3 = *v4;
    }
  }
LABEL_12:
  uint64_t v7 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v10 = 257;
  return sub_22B1D4240(v7 + 1, **(llvm::Type ***)(*(void *)v3 + 16), v3, 0, (uint64_t)&v9);
}

uint64_t sub_22B21A5CC(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  __int16 v10 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v48 = 257;
  uint64_t v11 = (uint64_t)(v10 + 8);
  uint64_t v12 = llvm::ConstantInt::get();
  uint64_t v13 = sub_22B242524(v11, a4, v12, (uint64_t)v47);
  uint64_t v14 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v48 = 257;
  uint64_t v15 = (uint64_t)(v14 + 8);
  uint64_t v16 = llvm::ConstantInt::get();
  uint64_t v17 = sub_22B242524(v15, a4, v16, (uint64_t)v47);
  uint64_t v18 = *(void *)(*a1 - 24);
  uint64_t v19 = (uint64_t)a1 + v18;
  uint64_t v20 = *(void *)((char *)a1 + v18 + 344);
  uint64_t v21 = *(void *)(v20 + 936);
  if (v21)
  {
    size_t v22 = strlen(*(const char **)(v20 + 936));
    uint64_t v23 = sub_22B1D7EC8(v19, v21, v22, *(void *)(v19 + 184), *(void *)(v19 + 184), *(void *)(v19 + 184), *(void *)(v19 + 184));
    v49[0] = a2;
    v49[1] = v13;
    v49[2] = a2;
    uint64_t v24 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    __int16 v48 = 257;
    uint64_t v25 = (uint64_t)sub_22B1D4034(v24, *(void *)(v23 + 24), v23, (uint64_t)v49, 3, (uint64_t)v47);
  }
  else
  {
    uint64_t v26 = (uint64_t)a1 + v18 + 8;
    uint64_t v27 = *(void *)(v19 + 192);
    __int16 v48 = 257;
    uint64_t v28 = sub_22B1D7384(v26, 39, v13, v27, (uint64_t)v47);
    __int16 v50 = 257;
    uint64_t v29 = sub_22B1D7468(v26, (uint64_t)a2, v28, (uint64_t)v49);
    uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    __int16 v48 = 257;
    uint64_t v31 = sub_22B1D6A70(v30, v29, (uint64_t)a2, (uint64_t)v47);
    uint64_t v32 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v33 = *((void *)v32 + 29);
    __int16 v48 = 257;
    uint64_t v34 = sub_22B1D7384((uint64_t)(v32 + 8), 49, v31, v33, (uint64_t)v47);
    uint64_t v35 = (char *)a1 + *(void *)(*a1 - 24);
    __int16 v48 = 257;
    uint64_t v36 = (uint64_t)(v35 + 8);
    uint64_t v37 = llvm::ConstantInt::get();
    uint64_t v25 = sub_22B242524(v36, v34, v37, (uint64_t)v47);
  }
  uint64_t v38 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v48 = 257;
  uint64_t v39 = sub_22B1D7B18(v38, v25, v17, (uint64_t)v47);
  uint64_t v40 = *a2;
  __int16 v50 = 257;
  uint64_t v41 = sub_22B1D7384(v38, 39, v39, v40, (uint64_t)v49);
  uint64_t v42 = v41;
  if (a5) {
    *a5 = v41;
  }
  uint64_t v43 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v48 = 257;
  uint64_t v44 = sub_22B1D7468(v43, v42, a3, (uint64_t)v47);
  uint64_t v45 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v48 = 257;
  return sub_22B1FC254(v45, (uint64_t)a2, v44, (uint64_t)v47);
}

llvm::ValueHandleBase *sub_22B21A918(llvm::ValueHandleBase *this, void *a2)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = a2[2];
  if (v2 != v3)
  {
    uint64_t v5 = this;
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
    {
      this = (llvm::ValueHandleBase *)llvm::ValueHandleBase::RemoveFromUseList(this);
      uint64_t v3 = a2[2];
    }
    *((void *)v5 + 2) = v3;
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
    {
      uint64_t v8 = (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8);
      return (llvm::ValueHandleBase *)llvm::ValueHandleBase::AddToExistingUseList(v5, v8);
    }
  }
  return this;
}

uint64_t sub_22B21A9AC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 2792);
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  if (v1)
  {
    uint64_t v3 = (char *)operator new(8 * v1);
    uint64_t v4 = v3;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v2 + 192);
    do
    {
      *(void *)&v3[v5] = v6;
      v5 += 8;
    }
    while (8 * v1 != v5);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v7 = llvm::FunctionType::get();
  if (v4) {
    operator delete(v4);
  }
  return v7;
}

uint64_t sub_22B21AA58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    uint64_t v4 = *(void *)(a1 + 160);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  uint64_t v5 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v3 != v5)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned int *)(v3 + 32));
      if (!v6 || !*(void *)(v3 + 8)) {
        goto LABEL_37;
      }
      uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
      if (v8 == 34) {
        break;
      }
      if (v8 != 31)
      {
        if (v8 != 27) {
          goto LABEL_37;
        }
        BOOL v9 = *String == 0x657268742E726961 && String[1] == 0x7469736F705F6461;
        BOOL v10 = v9 && String[2] == 0x675F6E695F6E6F69;
        if (!v10 || *(void *)((char *)String + 19) != 0x646972675F6E695FLL) {
          goto LABEL_37;
        }
LABEL_25:
        if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
          goto LABEL_70;
        }
        goto LABEL_37;
      }
      if (*String == 0x657268742E726961
        && String[1] == 0x7865646E695F6461
        && String[2] == 0x657268745F6E695FLL
        && *(void *)((char *)String + 23) == 0x70756F7267646165)
      {
LABEL_70:
        *(unsigned char *)(a1 + 3160) = 1;
        goto LABEL_38;
      }
LABEL_37:
      v3 += 40;
      if (v3 == v5) {
        goto LABEL_38;
      }
    }
    if (memcmp(String, "air.thread_position_in_threadgroup", 0x22uLL)) {
      goto LABEL_37;
    }
    goto LABEL_25;
  }
LABEL_38:
  uint64_t v15 = sub_22B217C04(a1);
  if (v15)
  {
    LOBYTE(v16) = 1;
    if (*(unsigned char *)(a1 + 2728))
    {
LABEL_57:
      *(void *)(a1 + 2808) = -1;
      *(_DWORD *)(a1 + 2816) = -1;
LABEL_58:
      sub_22B1E0428(a1 + 2784, 0);
      *(_DWORD *)(a1 + 2808) = 0;
    }
    else
    {
      unint64_t v17 = 0;
      int v16 = 0;
      do
      {
        strlen(off_26488DD20[v17]);
        uint64_t Function = llvm::Module::getFunction();
        if (Function)
        {
          if (!*(void *)(Function + 96)) {
            goto LABEL_56;
          }
          uint64_t v19 = *(void *)(Function + 8);
          if (v19)
          {
            while (1)
            {
              uint64_t v20 = *(void *)(*(void *)(v19 + 24) - 32 * (*(_DWORD *)(*(void *)(v19 + 24) + 20) & 0x7FFFFFF));
              if (!v20 || *(unsigned char *)(v20 + 16) != 16) {
                break;
              }
              size_t v22 = (void *)(v20 + 24);
              if (*(_DWORD *)(v20 + 32) >= 0x41u) {
                size_t v22 = (void *)*v22;
              }
              v16 |= 1 << *(_DWORD *)v22;
              uint64_t v19 = *(void *)(v19 + 8);
              if (!v19) {
                goto LABEL_52;
              }
            }
LABEL_56:
            LOBYTE(v16) = 7;
            goto LABEL_57;
          }
        }
LABEL_52:
        if (v17 > 6) {
          break;
        }
        ++v17;
      }
      while (v16 != 7);
      *(void *)(a1 + 2808) = -1;
      *(_DWORD *)(a1 + 2816) = -1;
      if (v16) {
        goto LABEL_58;
      }
    }
    if ((v16 & 6) != 0)
    {
      sub_22B1E0428(a1 + 2784, 3);
      if ((v16 & 2) != 0) {
        *(_DWORD *)(a1 + 2812) = *(_DWORD *)(a1 + 2792) - 1;
      }
      if ((v16 & 4) != 0) {
        *(_DWORD *)(a1 + 2816) = *(_DWORD *)(a1 + 2792) - 1;
      }
    }
    llvm::Module::getOrInsertNamedMetadata();
    if (MGGetBoolAnswer())
    {
      uint64_t v23 = (const char *)sub_22B1DEEE4("AGC_DISABLE_ATOMIC_OPTIMIZATIONS");
      if (v23)
      {
        if (*v23 != 48) {
          atoi(v23);
        }
      }
    }
    llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  return v15;
}

void sub_22B21AE90(uint64_t *a1)
{
  uint64_t v1 = sub_22B216F38(a1, (uint64_t *)&off_26DE74800);
  sub_22B1ED95C(v1 + 3168);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B21AEE8(uint64_t *a1)
{
  uint64_t v2 = sub_22B216F38(a1, (uint64_t *)&off_26DE74800);
  sub_22B1ED95C(v2 + 3168);
  return a1;
}

void sub_22B21AF20(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  sub_22B216F38(v1, (uint64_t *)&off_26DE74A90);
  sub_22B1ED95C((uint64_t)(v1 + 396));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B21AF90(void *a1)
{
  uint64_t v1 = sub_22B216F38((void *)((char *)a1 + *(void *)(*a1 - 32)), (uint64_t *)&off_26DE74A90) + 3168;
  return sub_22B1ED95C(v1);
}

uint64_t sub_22B21AFDC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 == 22)
  {
    if (*a2 != 0x676174732E726961
      || a2[1] != 0x6972675F6E695F65
      || *(void *)((char *)a2 + 14) != 0x657A69735F646972)
    {
      return 0;
    }
    uint64_t v8 = "agc.stage_in_grid_size";
  }
  else
  {
    if (a3 != 24) {
      return 0;
    }
    BOOL v6 = *a2 == 0x676174732E726961 && a2[1] == 0x6972675F6E695F65;
    if (!v6 || a2[2] != 0x6E696769726F5F64) {
      return 0;
    }
    uint64_t v8 = "agc.stage_in_grid_origin";
  }
  int v12 = *(_DWORD *)(a4 + 8) & 0xFE;
  __int16 v19 = 261;
  v18[0] = v8;
  v18[1] = a3;
  llvm::FixedVectorType::get();
  uint64_t v13 = sub_22B219890(a1);
  uint64_t v14 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v19 = 257;
  uint64_t v15 = sub_22B1D4240(v14 + 1, **(llvm::Type ***)(*(void *)v13 + 16), v13, 0, (uint64_t)v18);
  if (v12 == 18) {
    int v16 = *(_DWORD *)(v4 + 32);
  }
  else {
    int v16 = 1;
  }
  uint64_t v17 = sub_22B2423A4((uint64_t)a1 + *(void *)(*a1 - 24), v15, v16, 1);
  if (v12 == 18) {
    uint64_t v4 = **(void **)(v4 + 16);
  }
  return sub_22B241FF8((void *)((char *)a1 + *(void *)(*a1 - 24)), v17, v4);
}

void sub_22B21B1D0(uint64_t *a1)
{
  uint64_t v1 = sub_22B216F38(a1, (uint64_t *)&off_26DE74A90);
  sub_22B1ED95C(v1 + 3168);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B21B228(uint64_t *a1)
{
  uint64_t v2 = sub_22B216F38(a1, (uint64_t *)&off_26DE74A90);
  sub_22B1ED95C(v2 + 3168);
  return a1;
}

uint64_t sub_22B21B260()
{
  return 16;
}

const char *sub_22B21B268()
{
  return "gpu-gather-compute-driver-legacy";
}

void sub_22B21B274(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = (uint64_t)&unk_26DE74D88;
  v1[400] = (uint64_t)&unk_26DE74F58;
  sub_22B21B328((uint64_t)(v1 + 396));
  sub_22B216F38(v1, (uint64_t *)&off_26DE74FC8);
  sub_22B1ED95C((uint64_t)(v1 + 400));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B21B328(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 33));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_22B21B3A4(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  sub_22B216F38(v1, (uint64_t *)&off_26DE74D28);
  sub_22B1ED95C((uint64_t)(v1 + 396));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B21B414(void *a1)
{
  uint64_t v1 = sub_22B216F38((void *)((char *)a1 + *(void *)(*a1 - 32)), (uint64_t *)&off_26DE74D28) + 3168;
  return sub_22B1ED95C(v1);
}

uint64_t sub_22B21B460()
{
  return 16;
}

void sub_22B21B468(uint64_t *a1)
{
  uint64_t v1 = sub_22B216F38(a1, (uint64_t *)&off_26DE74D28);
  sub_22B1ED95C(v1 + 3168);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B21B4C0(uint64_t *a1)
{
  uint64_t v2 = sub_22B216F38(a1, (uint64_t *)&off_26DE74D28);
  sub_22B1ED95C(v2 + 3168);
  return a1;
}

uint64_t sub_22B21B4F8(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = (uint64_t)&unk_26DE74D88;
  v1[400] = (uint64_t)&unk_26DE74F58;
  sub_22B21B328((uint64_t)(v1 + 396));
  sub_22B216F38(v1, (uint64_t *)&off_26DE74FC8);
  return sub_22B1ED95C((uint64_t)(v1 + 400));
}

const char *sub_22B21B594()
{
  return "gpu-gather-compute-driver-legacy";
}

uint64_t sub_22B21B5A0(void *a1)
{
  sub_22B240A88((uint64_t)a1, (uint64_t)(a1 + 396));
  return sub_22B2179FC(a1);
}

void sub_22B21B5DC(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26DE74D88;
  uint64_t v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_26DE74F58;
  sub_22B21B328((uint64_t)(a1 + 396));
  sub_22B216F38(a1, (uint64_t *)&off_26DE74FC8);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B21B67C(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26DE74D88;
  uint64_t v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_26DE74F58;
  sub_22B21B328((uint64_t)(a1 + 396));
  sub_22B216F38(a1, (uint64_t *)&off_26DE74FC8);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B21B6FC()
{
  return "pds-patchup-compute-driver-legacy";
}

void sub_22B21B708(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = (uint64_t)&unk_26DE75030;
  v1[400] = (uint64_t)&unk_26DE75200;
  sub_22B21B328((uint64_t)(v1 + 396));
  sub_22B216F38(v1, (uint64_t *)&off_26DE75270);
  sub_22B1ED95C((uint64_t)(v1 + 400));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B21B7BC(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = (uint64_t)&unk_26DE75030;
  v1[400] = (uint64_t)&unk_26DE75200;
  sub_22B21B328((uint64_t)(v1 + 396));
  sub_22B216F38(v1, (uint64_t *)&off_26DE75270);
  return sub_22B1ED95C((uint64_t)(v1 + 400));
}

const char *sub_22B21B858()
{
  return "pds-patchup-compute-driver-legacy";
}

uint64_t sub_22B21B864(void *a1)
{
  sub_22B240A88((uint64_t)a1, (uint64_t)(a1 + 396));
  return sub_22B2179FC(a1);
}

void sub_22B21B8A0(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26DE75030;
  uint64_t v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_26DE75200;
  sub_22B21B328((uint64_t)(a1 + 396));
  sub_22B216F38(a1, (uint64_t *)&off_26DE75270);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B21B940(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26DE75030;
  uint64_t v2 = (uint64_t)(a1 + 400);
  a1[400] = (uint64_t)&unk_26DE75200;
  sub_22B21B328((uint64_t)(a1 + 396));
  sub_22B216F38(a1, (uint64_t *)&off_26DE75270);
  sub_22B1ED95C(v2);
  return a1;
}

uint64_t sub_22B21B9C0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_22B26AFAC((uint64_t *)a1, a2 + 1, a3, "air.kernel", (uint64_t)&unk_2683E8EB8, 0);
  uint64_t v8 = *a2;
  *uint64_t v7 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[5];
  uint64_t v9 = 2432;
  do
  {
    BOOL v10 = (void *)(a1 + v9);
    v10[1] = 0;
    void v10[2] = 0;
    *BOOL v10 = 4;
    uint64_t v11 = a1 + v9 + 24;
    v9 += 24;
  }
  while (v11 != a1 + 2720);
  *(void *)(a1 + 2720) = a4;
  *(unsigned char *)(a1 + 2728) = (*(_DWORD *)(a4 + 12) & 1) == 0;
  *(void *)(a1 + 2736) = 4;
  *(void *)(a1 + 2752) = 0;
  *(void *)(a1 + 2744) = 0;
  sub_22B26D160(a1, (*(_DWORD *)(a4 + 12) >> 1) & 1, (*(_DWORD *)(a4 + 12) >> 2) & 1);
  *(unsigned char *)(a1 + 14) = (*(unsigned char *)(a4 + 12) & 0x20) != 0;
  *(void *)(a1 + 2272) = *(void *)a4;
  int v12 = *(llvm::Module **)(a1 + *(void *)(*(void *)a1 - 24) + 320);
  *(void *)uint64_t v24 = "air.kernel";
  __int16 v25 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v12, (const llvm::Twine *)v24);
  if (NamedMetadata)
  {
    uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    int v15 = 0;
    unint64_t v16 = *(unsigned int *)(Operand + 8);
    if (v16 >= 4)
    {
      uint64_t v17 = Operand;
      uint64_t v18 = 3;
      while (1)
      {
        __int16 v19 = *(unsigned __int8 **)(v17 - 8 * v16 + 8 * v18);
        unint64_t v20 = *v19;
        if (v20 <= 0x22 && ((0x7FFFFFFF0uLL >> v20) & 1) != 0)
        {
          v24[0] = 0;
          if (*((_DWORD *)v19 + 2)) {
            break;
          }
        }
LABEL_14:
        if (++v18 >= v16) {
          goto LABEL_15;
        }
      }
      while (1)
      {
        int v23 = 0;
        if (sub_22B2437A8("air.max_work_group_size", (uint64_t)v19, v24, &v23)) {
          break;
        }
        if (++v24[0] >= *((_DWORD *)v19 + 2))
        {
          unint64_t v16 = *(unsigned int *)(v17 + 8);
          goto LABEL_14;
        }
      }
      int v15 = v23;
    }
  }
  else
  {
LABEL_15:
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 2732) = v15;
  *(unsigned char *)(a1 + 15) = (*(unsigned char *)(a4 + 12) & 0x10) != 0;
  return a1;
}

uint64_t sub_22B21BC0C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_22B21B9C0(a1, a2 + 1, a3, a4);
  uint64_t v6 = *a2;
  *(void *)uint64_t result = *a2;
  *(void *)(result + *(void *)(v6 - 24)) = a2[7];
  *(void *)(result + 2760) = 4;
  *(void *)(result + 2776) = 0;
  *(void *)(result + 2768) = 0;
  *(void *)(result + 2784) = result + 2800;
  *(void *)(result + 2792) = 0x200000000;
  uint64_t v7 = 2824;
  do
  {
    uint64_t v8 = (void *)(result + v7);
    v8[1] = 0;
    void v8[2] = 0;
    void *v8 = 4;
    uint64_t v9 = result + v7 + 24;
    v7 += 24;
  }
  while (v9 != result + 2896);
  *(void *)(result + 2896) = 4;
  *(void *)(result + 2912) = 0;
  *(void *)(result + 2904) = 0;
  *(void *)(result + 2920) = 4;
  *(void *)(result + 2936) = 0;
  *(void *)(result + 2928) = 0;
  *(void *)(result + 2944) = 4;
  *(void *)(result + 2960) = 0;
  *(void *)(result + 2952) = 0;
  *(void *)(result + 2968) = 4;
  *(void *)(result + 2984) = 0;
  *(void *)(result + 2976) = 0;
  *(void *)(result + 2992) = 4;
  *(void *)(result + 3008) = 0;
  uint64_t v10 = 3016;
  *(void *)(result + 3000) = 0;
  do
  {
    uint64_t v11 = (void *)(result + v10);
    v11[1] = 0;
    v11[2] = 0;
    void *v11 = 4;
    uint64_t v12 = result + v10 + 24;
    v10 += 24;
  }
  while (v12 != result + 3088);
  *(void *)(result + 3088) = 4;
  *(void *)(result + 3104) = 0;
  *(void *)(result + 3096) = 0;
  *(void *)(result + 3112) = 4;
  *(void *)(result + 3128) = 0;
  *(void *)(result + 3120) = 0;
  *(void *)(result + 3136) = 4;
  *(void *)(result + 3152) = 0;
  *(void *)(result + 3144) = 0;
  *(unsigned char *)(result + 3160) = 0;
  return result;
}

uint64_t *sub_22B21BD88(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x230F426A0](a3 + 33, 8);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 32;
  if (a3) {
    memcpy((void *)(v10 + 32), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = a3;
  *(_DWORD *)(v11 + 24) = 0;
  uint64_t *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

const char *sub_22B21BE80()
{
  return "execute-indirect-compute-driver-legacy";
}

void sub_22B21BE8C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  sub_22B216F38(v1, (uint64_t *)&off_26DE75518);
  sub_22B1ED95C((uint64_t)(v1 + 396));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B21BEFC(void *a1)
{
  uint64_t v1 = sub_22B216F38((void *)((char *)a1 + *(void *)(*a1 - 32)), (uint64_t *)&off_26DE75518) + 3168;
  return sub_22B1ED95C(v1);
}

const char *sub_22B21BF48()
{
  return "execute-indirect-compute-driver-legacy";
}

void sub_22B21BF54(uint64_t *a1)
{
  uint64_t v1 = sub_22B216F38(a1, (uint64_t *)&off_26DE75518);
  sub_22B1ED95C(v1 + 3168);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B21BFAC(uint64_t *a1)
{
  uint64_t v2 = sub_22B216F38(a1, (uint64_t *)&off_26DE75518);
  sub_22B1ED95C(v2 + 3168);
  return a1;
}

const char *sub_22B21BFE4()
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

void sub_22B21BFF0(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  sub_22B216F38(v1, (uint64_t *)&off_26DE757C0);
  sub_22B1ED95C((uint64_t)(v1 + 396));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B21C060(void *a1)
{
  uint64_t v1 = sub_22B216F38((void *)((char *)a1 + *(void *)(*a1 - 32)), (uint64_t *)&off_26DE757C0) + 3168;
  return sub_22B1ED95C(v1);
}

const char *sub_22B21C0AC()
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

void sub_22B21C0B8(uint64_t *a1)
{
  uint64_t v1 = sub_22B216F38(a1, (uint64_t *)&off_26DE757C0);
  sub_22B1ED95C(v1 + 3168);
  JUMPOUT(0x230F43600);
}

uint64_t *sub_22B21C110(uint64_t *a1)
{
  uint64_t v2 = sub_22B216F38(a1, (uint64_t *)&off_26DE757C0);
  sub_22B1ED95C(v2 + 3168);
  return a1;
}

uint64_t sub_22B21C148(void *a1)
{
  return sub_22B21C164((uint64_t)a1 + *(void *)(*a1 - 56));
}

uint64_t sub_22B21C164(uint64_t a1)
{
  uint64_t v477 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 29)) {
    return 0;
  }
  uint64_t v1 = a1;
  BOOL v440 = MGGetBoolAnswer()
      && (uint64_t v2 = (const char *)sub_22B1DEEE4("AGC_DEBUG_LLVM_IR")) != 0
      && *v2 != 48
      && atoi(v2) != 0;
  uint64_t v3 = *(llvm::Module **)(v1 + *(void *)(*(void *)v1 - 24) + 320);
  *(void *)&long long __str = "air.shaderSource";
  LOWORD(v469) = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)&__str);
  if (NamedMetadata)
  {
    uint64_t v5 = NamedMetadata;
    uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
    uint64_t v8 = *(void *)(*(void *)v1 - 24);
    if (String)
    {
      char v9 = String;
      uint64_t v10 = (_DWORD *)(v1 + v8);
      uint64_t v11 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)(v1 + v8) + 24))(v1 + v8);
      if (sub_22B1EC788(v11))
      {
        uint64_t v12 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v10 + 24))(v10);
        snprintf((char *)&__str, 0x80uLL, "%s shader %u (shader source)", v12, v10[174]);
        uint64_t v13 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v10 + 24))(v10);
        uint64_t v14 = strcmp(v13, "compute");
        if (v14 && (uint64_t v14 = strcmp(v13, "compute-program"), v14)) {
          uint64_t v21 = "Graphics";
        }
        else {
          uint64_t v21 = "Compute";
        }
        sub_22B1E69D0(v14, "------ Start %s %s -------\n", v15, v16, v17, v18, v19, v20, (char)v21);
        sub_22B1E69D0(v23, "%s\n", v24, v25, v26, v27, v28, v29, v9);
        sub_22B1E69D0(v30, "------ End %s %s -------\n", v31, v32, v33, v34, v35, v36, (char)v21);
      }
    }
    llvm::NamedMDNode::eraseFromParent(v5);
  }
  sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "generic");
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 24))(v1 + *(void *)(*(void *)v1 - 24));
  sub_22B1E69D0(v37, "------ Compilation flags for %s shader %u ------", v38, v39, v40, v41, v42, v43, v37);
  sub_22B1E69D0(v44, "Object fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v45, v46, v47, v48, v49, v50, (*(_DWORD *)(*(void *)(*(void *)v1 - 24) + v1 + 104) & 2) != 0);
  sub_22B1E69D0(v51, "Target fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v52, v53, v54, v55, v56, v57, (*(_DWORD *)(*(void *)(v1 + *(void *)(*(void *)v1 - 24) + 344) + 104) & 2) != 0);
  sub_22B1E69D0(v58, "Codegen fast-math options: { finite-math=%d, unsafe-fp-math=%d, less_pecise_fmad=%d}", v59, v60, v61, v62, v63, v64, *(unsigned char *)(v1 + 26));
  uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 24))(v1 + *(void *)(*(void *)v1 - 24));
  sub_22B1E69D0(v65, "------ End compilation flags for %s shader %u ------", v66, v67, v68, v69, v70, v71, v65);
  uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 24))(v1 + *(void *)(*(void *)v1 - 24));
  sub_22B1E69D0(v72, "------ Start compilation key description for %s shader %u  ------", v73, v74, v75, v76, v77, v78, v72);
  uint64_t v79 = (*(void *(**)(long long *__return_ptr))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 72))(&__str);
  if (SHIBYTE(v467) >= 0) {
    p_str = (const char *)&__str;
  }
  else {
    p_str = (const char *)__str;
  }
  sub_22B1E69D0((uint64_t)v79, p_str, v80, v81, v82, v83, v84, v85, v434);
  if (SHIBYTE(v467) < 0) {
    operator delete((void *)__str);
  }
  uint64_t v87 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 24))(v1 + *(void *)(*(void *)v1 - 24));
  sub_22B1E69D0(v87, "------ End compilation key description for %s shader %u  ------", v88, v89, v90, v91, v92, v93, v87);
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable) {
    uint64_t GlobalVariable = llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)GlobalVariable);
  }
  v450 = (void *)v1;
  if (!*(unsigned char *)(v1 + 37)) {
    goto LABEL_155;
  }
  uint64_t v102 = *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 320);
  uint64_t v103 = *(void *)(v102 + 32);
  uint64_t v439 = v102 + 24;
  if (v103 == v102 + 24)
  {
    LOBYTE(v104) = 0;
    goto LABEL_153;
  }
  int v104 = 0;
  do
  {
    uint64_t v441 = v103;
    if (v103) {
      uint64_t v105 = (llvm::GlobalValue *)(v103 - 56);
    }
    else {
      uint64_t v105 = 0;
    }
    uint64_t GlobalVariable = llvm::GlobalValue::isDeclaration(v105);
    if (GlobalVariable)
    {
      uint64_t v106 = v441;
      goto LABEL_150;
    }
    int v438 = v104;
    *(void *)&long long __str = &v467;
    *((void *)&__str + 1) = 0x1000000000;
    uint64_t v107 = *((void *)v105 + 10);
    if (v107) {
      uint64_t v108 = v107 - 24;
    }
    else {
      uint64_t v108 = 0;
    }
    uint64_t v109 = v108 + 40;
    uint64_t v110 = *(void *)(v108 + 48);
    if (v110 == v108 + 40)
    {
      int v113 = 0;
      int v152 = v438;
      uint64_t v106 = v441;
    }
    else
    {
      do
      {
        if (v110) {
          uint64_t v111 = v110 - 24;
        }
        else {
          uint64_t v111 = 0;
        }
        if (v110 && *(unsigned char *)(v111 + 16) == 59) {
          uint64_t GlobalVariable = sub_22B1D6788((uint64_t)&__str, v111);
        }
        uint64_t v110 = *(void *)(v110 + 8);
      }
      while (v110 != v109);
      uint64_t v112 = (const char **)__str;
      if (DWORD2(__str))
      {
        int v113 = 0;
        uint64_t v445 = __str + 8 * DWORD2(__str);
        do
        {
          uint64_t v114 = *v112;
          v463 = v465;
          v465[0] = v114;
          uint64_t v464 = 0x400000001;
          v462[0] = 0;
          v460 = &v461;
          uint64_t v115 = operator new(0x28uLL);
          v115[4] = v114;
          void *v115 = 0;
          v115[1] = 0;
          v115[2] = &v461;
          v460 = v115;
          v461 = (llvm::Type *)v115;
          sub_22B1E313C(v115, v115);
          ++v462[0];
          unsigned int v116 = v464;
          if (v464)
          {
            v446 = v112;
            int v447 = v113;
            uint64_t v117 = 0;
            uint64_t v118 = 0;
            uint64_t v119 = 0;
            uint64_t v120 = 0;
            v453 = 0;
            uint64_t v121 = 0;
            char v444 = 0;
            do
            {
              uint64_t v122 = *((void *)v463 + --v116);
              LODWORD(v464) = v116;
              uint64_t v123 = *(llvm::Use **)(v122 + 8);
              if (v123)
              {
                while (1)
                {
                  uint64_t v124 = (unsigned __int8 *)*((void *)v123 + 3);
                  unsigned int v125 = v124[16];
                  BOOL v126 = v125 < 0x1C || v124 == 0;
                  if (v126)
                  {
LABEL_128:
                    LODWORD(v146) = 0;
                    uint64_t v1 = (uint64_t)v450;
                    goto LABEL_129;
                  }
                  if (v124[16] <= 0x3Du)
                  {
                    if (v125 == 60)
                    {
                      if (*((void *)v124 - 4) != v122 || (*((_WORD *)v124 + 9) & 1) != 0) {
                        goto LABEL_128;
                      }
                      if (v120 >= v453)
                      {
                        uint64_t v451 = v122;
                        uint64_t v134 = v120 - v119;
                        unint64_t v135 = v134 + 1;
                        if ((unint64_t)(v134 + 1) >> 61) {
LABEL_669:
                        }
                          abort();
                        uint64_t v136 = v118;
                        if (((char *)v453 - (char *)v119) >> 2 > v135) {
                          unint64_t v135 = ((char *)v453 - (char *)v119) >> 2;
                        }
                        if ((unint64_t)((char *)v453 - (char *)v119) >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v137 = v135;
                        }
                        if (v137)
                        {
                          if (v137 >> 61) {
LABEL_670:
                          }
                            sub_22B1E33E4();
                          uint64_t v138 = (char *)operator new(8 * v137);
                        }
                        else
                        {
                          uint64_t v138 = 0;
                        }
                        int v142 = (unsigned __int8 **)&v138[8 * v134];
                        *int v142 = v124;
                        long long v143 = v142 + 1;
                        while (v120 != v119)
                        {
                          uint64_t v144 = *--v120;
                          *--int v142 = v144;
                        }
                        v453 = (unsigned __int8 **)&v138[8 * v137];
                        if (v119) {
                          operator delete(v119);
                        }
                        uint64_t v119 = v142;
                        uint64_t v120 = v143;
                        uint64_t v118 = v136;
                        uint64_t v122 = v451;
                      }
                      else
                      {
                        *v120++ = v124;
                      }
                    }
                    else
                    {
                      if (v125 != 61 || *((void *)v124 - 4) != v122 || (*((_WORD *)v124 + 9) & 1) != 0) {
                        goto LABEL_128;
                      }
                      if (v117 >= v118)
                      {
                        uint64_t v130 = v117 - v121;
                        unint64_t v131 = v130 + 1;
                        if ((unint64_t)(v130 + 1) >> 61) {
                          goto LABEL_669;
                        }
                        if (((char *)v118 - (char *)v121) >> 2 > v131) {
                          unint64_t v131 = ((char *)v118 - (char *)v121) >> 2;
                        }
                        if ((unint64_t)((char *)v118 - (char *)v121) >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v132 = v131;
                        }
                        if (v132)
                        {
                          if (v132 >> 61) {
                            goto LABEL_670;
                          }
                          std::string::size_type v133 = (char *)operator new(8 * v132);
                        }
                        else
                        {
                          std::string::size_type v133 = 0;
                        }
                        unint64_t v139 = (unsigned __int8 **)&v133[8 * v130];
                        *unint64_t v139 = v124;
                        long long v140 = v139 + 1;
                        if (v117 != v121)
                        {
                          do
                          {
                            uint64_t v141 = *--v117;
                            *--unint64_t v139 = v141;
                          }
                          while (v117 != v121);
                          uint64_t v117 = v121;
                        }
                        uint64_t v121 = v139;
                        uint64_t v118 = (unsigned __int8 **)&v133[8 * v132];
                        if (v117) {
                          operator delete(v117);
                        }
                        uint64_t v117 = v140;
                      }
                      else
                      {
                        *v117++ = v124;
                      }
                    }
                  }
                  else
                  {
                    if (v125 == 62) {
                      goto LABEL_56;
                    }
                    if (v125 != 84)
                    {
                      if (v125 != 77) {
                        goto LABEL_128;
                      }
LABEL_56:
                      for (uint64_t i = v461; i; uint64_t i = *(llvm::Type **)i)
                      {
                        unint64_t v128 = *((void *)i + 4);
                        if ((unint64_t)v124 >= v128)
                        {
                          if (v128 >= (unint64_t)v124) {
                            goto LABEL_117;
                          }
                          uint64_t i = (llvm::Type *)((char *)i + 8);
                        }
                      }
                      sub_22B1D6788((uint64_t)&v463, *((void *)v123 + 3));
                      sub_22B215EF8((uint64_t *)&v460, (unint64_t)v124, (uint64_t)v124);
                      goto LABEL_117;
                    }
                    if ((llvm::AttributeList::hasFnAttr() & 1) == 0
                      && ((llvm::CallBase::hasReadingOperandBundles((llvm::CallBase *)v124) & 1) != 0
                       || (llvm::CallBase::hasFnAttrOnCalledFunction() & 1) == 0))
                    {
                      if (*(unsigned char *)(*(void *)v124 + 8) != 7) {
                        goto LABEL_128;
                      }
                      uint64_t v129 = *((void *)v124 - 4);
                      if (!v129
                        || *(unsigned char *)(v129 + 16)
                        || *(void *)(v129 + 24) != *((void *)v124 + 9)
                        || (*(unsigned char *)(v129 + 33) & 0x20) == 0
                        || (*(_DWORD *)(v129 + 36) - 167) >= 2)
                      {
                        llvm::Use::getOperandNo(v123);
                        if (!llvm::CallBase::paramHasAttr()) {
                          goto LABEL_128;
                        }
                        if (llvm::CallBase::paramHasAttr())
                        {
                          char v444 = 1;
                        }
                        else if ((llvm::CallBase::paramHasAttr() & 1) == 0)
                        {
                          goto LABEL_128;
                        }
                      }
                    }
                  }
LABEL_117:
                  uint64_t v123 = (llvm::Use *)*((void *)v123 + 1);
                  if (!v123)
                  {
                    unsigned int v116 = v464;
                    break;
                  }
                }
              }
            }
            while (v116);
            unint64_t v145 = (char *)v117 - (char *)v121;
            if ((v119 != v120) | v444 & 1)
            {
              uint64_t v1 = (uint64_t)v450;
              if (v145 != 8 || v119 == v120)
              {
                LODWORD(v146) = 0;
              }
              else
              {
                LODWORD(v146) = 0;
                uint64_t v147 = *((void *)*v121 - 4);
                long long v148 = (llvm::Instruction **)v119;
                do
                {
                  long long v149 = *v148;
                  if (*((void *)*v148 - 4) == v147)
                  {
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent(v149);
                    LODWORD(v146) = v146 + 1;
                  }
                  ++v148;
                }
                while (v148 != (llvm::Instruction **)v120);
              }
            }
            else
            {
              unint64_t v146 = v145 >> 3;
              uint64_t v1 = (uint64_t)v450;
              if (v121 == v117)
              {
                uint64_t v121 = v117;
              }
              else
              {
                uint64_t v150 = (llvm::Instruction **)v121;
                do
                {
                  uint64_t v151 = *v150++;
                  llvm::Instruction::eraseFromParent(v151);
                }
                while (v150 != (llvm::Instruction **)v117);
              }
            }
LABEL_129:
            uint64_t v112 = v446;
            if (v119) {
              operator delete(v119);
            }
            if (v121) {
              operator delete(v121);
            }
            int v113 = v447;
          }
          else
          {
            LODWORD(v146) = 0;
          }
          sub_22B1EDBB8(v461);
          uint64_t GlobalVariable = (uint64_t)v463;
          if (v463 != v465) {
            free(v463);
          }
          v113 += v146;
          ++v112;
        }
        while (v112 != (const char **)v445);
        uint64_t v112 = (const char **)__str;
      }
      else
      {
        int v113 = 0;
      }
      int v152 = v438;
      uint64_t v106 = v441;
      if (v112 != &v467) {
        free(v112);
      }
    }
    int v104 = v113 + v152;
LABEL_150:
    uint64_t v103 = *(void *)(v106 + 8);
  }
  while (v103 != v439);
LABEL_153:
  sub_22B1E69D0(GlobalVariable, "RemoveAndForwardAllocaStores: removed %u instructions", v96, v97, v98, v99, v100, v101, v104);
  if (v440)
  {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after RemoveAndForwardAllocaStores");
LABEL_155:
    sub_22B21FC3C((void *)v1, v95, v96, v97, v98, v99, v100, v101);
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
    if (v440) {
      sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after simplifyGenericIR");
    }
    goto LABEL_158;
  }
  sub_22B21FC3C((void *)v1, v153, v154, v155, v156, v157, v158, v159);
  (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
LABEL_158:
  int v160 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after initCompile");
  }
  if (v160) {
    int v160 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 104))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after setupShaderInputs");
  }
  if (v160) {
    int v160 = sub_22B220658(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after setupArgumentBuffers");
  }
  if (v160) {
    int v160 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after setupShaderWrapper");
  }
  if (v160) {
    int v160 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 112))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after setupShaderOutputs");
  }
  if (v160)
  {
    uint64_t v161 = *(void **)(*(void *)(v1 + 152) + 72);
    uint64_t v162 = *(void **)(*(void *)(v1 + 152) + 80);
    if (v161 != v162)
    {
      do
      {
        uint64_t v163 = (void *)*v161;
        llvm::MergeBlockIntoPredecessor();
        uint64_t v161 = v163;
      }
      while (v163 != v162);
    }
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)(v1 + *(void *)(*(void *)v1 - 24) + 400) + 328), *(llvm::Module **)(v1 + *(void *)(*(void *)v1 - 24) + 320));
    llvm::NamedMDNode::eraseFromParent(*(llvm::NamedMDNode **)(v1 + 48));
    if ((*(unsigned int (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 48))(v1 + *(void *)(*(void *)v1 - 24)))
    {
      llvm::Function::getSubprogram(*(llvm::Function **)(v1 + 160));
      llvm::Function::setSubprogram();
    }
    llvm::Function::eraseFromParent(*(llvm::Function **)(v1 + 160));
    *(void *)(v1 + 160) = 0;
    *(void *)(v1 + 48) = 0;
    *(void *)(v1 + 56) = 0;
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after cleanupShaderIR");
  }
  if (v160) {
    int v160 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after setupImageBlocks");
  }
  if (v160) {
    (*(void (**)(uint64_t))(*(void *)v1 + 128))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "After setupIndirectSamplers");
  }
  if (v160) {
    int v160 = sub_22B222E84(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "After allocateTexturesAndSamplers");
  }
  if (!v160)
  {
    int v208 = 0;
    goto LABEL_563;
  }
  sub_22B1F5178();
  sub_22B2259A8();
  sub_22B225A2C();
  sub_22B225AB0();
  sub_22B225B34();
  v463 = v465;
  uint64_t v464 = 0x800000000;
  sub_22B225BB8((void *)v1, (uint64_t)&v463);
  v460 = v462;
  v461 = (llvm::Type *)0x800000000;
  v457 = v459;
  uint64_t v458 = 0x800000000;
  if (!v464) {
    goto LABEL_283;
  }
  uint64_t v164 = (uint64_t **)v463;
  uint64_t v165 = (uint64_t **)((char *)v463 + 8 * v464);
  do
  {
    uint64_t v166 = *v164;
    v474.__r_.__value_.__r.__words[0] = 0;
    sub_22B225C90((uint64_t)v166, (unint64_t *)&v474);
    char v167 = (char *)v450[102];
    unint64_t v168 = v450[103];
    if ((unint64_t)v167 >= v168)
    {
      char v170 = (char *)v450[101];
      uint64_t v171 = (v167 - v170) >> 3;
      unint64_t v172 = v171 + 1;
      if ((unint64_t)(v171 + 1) >> 61) {
        goto LABEL_669;
      }
      uint64_t v173 = v168 - (void)v170;
      if (v173 >> 2 > v172) {
        unint64_t v172 = v173 >> 2;
      }
      if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v174 = v172;
      }
      if (v174)
      {
        if (v174 >> 61) {
          goto LABEL_670;
        }
        uint64_t v175 = (char *)operator new(8 * v174);
      }
      else
      {
        uint64_t v175 = 0;
      }
      uint64_t v176 = &v175[8 * v171];
      *(void *)uint64_t v176 = v474.__r_.__value_.__r.__words[0];
      int v169 = v176 + 8;
      while (v167 != v170)
      {
        uint64_t v177 = *((void *)v167 - 1);
        v167 -= 8;
        *((void *)v176 - 1) = v177;
        v176 -= 8;
      }
      v450[101] = v176;
      v450[102] = v169;
      v450[103] = &v175[8 * v174];
      if (v170) {
        operator delete(v170);
      }
    }
    else
    {
      *(void *)char v167 = v474.__r_.__value_.__r.__words[0];
      int v169 = v167 + 8;
    }
    v450[102] = v169;
    sub_22B1F5178();
    sub_22B225B34();
    *(void *)&long long __str = &v467;
    *((void *)&__str + 1) = 0x2000000000;
    sub_22B1D6788((uint64_t)&__str, (uint64_t)v166);
    unsigned int v178 = DWORD2(__str);
    if (!DWORD2(__str))
    {
LABEL_239:
      int v187 = 0;
      goto LABEL_241;
    }
    while (1)
    {
      uint64_t v179 = *(void *)(__str + 8 * v178-- - 8);
      DWORD2(__str) = v178;
      uint64_t v180 = *(void *)(v179 + 8);
      if (v180) {
        break;
      }
LABEL_238:
      if (!v178) {
        goto LABEL_239;
      }
    }
    while (1)
    {
      uint64_t v181 = *(void *)(v180 + 24);
      unsigned int v182 = *(unsigned __int8 *)(v181 + 16);
      if (v182 <= 0x1B)
      {
        if (v182 != 5 || *(_WORD *)(v181 + 18) != 49) {
          goto LABEL_240;
        }
        goto LABEL_224;
      }
      if (v182 == 84) {
        break;
      }
      if (v182 != 77) {
        goto LABEL_240;
      }
LABEL_224:
      sub_22B1D6788((uint64_t)&__str, v181);
LABEL_225:
      uint64_t v180 = *(void *)(v180 + 8);
      if (!v180)
      {
        unsigned int v178 = DWORD2(__str);
        goto LABEL_238;
      }
    }
    uint64_t v183 = *(void *)(v181 - 32);
    if (v183 && !*(unsigned char *)(v183 + 16) && *(void *)(v183 + 24) == *(void *)(v181 + 72))
    {
      llvm::Value::getName((llvm::Value *)v183);
      int Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_2683E9250) {
        goto LABEL_225;
      }
      int v185 = llvm::StringMapImpl::FindKey();
      if (v185 != (unint64_t)dword_2683E91F8 && v185 != -1) {
        goto LABEL_225;
      }
    }
LABEL_240:
    int v187 = 1;
LABEL_241:
    if ((const char **)__str != &v467) {
      free((void *)__str);
    }
    if (!v187) {
      goto LABEL_265;
    }
    if (!(*(unsigned int (**)(void *))(*v450 + 288))(v450))
    {
      std::string::append((std::string *)((char *)v450 + *(void *)(*v450 - 24) + 408), "Indirect samplers are not supported");
      int v208 = 0;
      uint64_t v1 = (uint64_t)v450;
      goto LABEL_557;
    }
    std::string::size_type v188 = v474.__r_.__value_.__r.__words[0];
    char v189 = (void *)v450[99];
    uint64_t v190 = v450[98];
    uint64_t v191 = (uint64_t)v189 - v190;
    unint64_t v192 = v450[100];
    if ((unint64_t)v189 < v192)
    {
      *char v189 = v474.__r_.__value_.__r.__words[0];
      char v193 = v189 + 1;
      goto LABEL_262;
    }
    unint64_t v194 = (v191 >> 3) + 1;
    if (v194 >> 61) {
      goto LABEL_669;
    }
    uint64_t v195 = v192 - v190;
    uint64_t v196 = v195 >> 2;
    if (v195 >> 2 <= v194) {
      uint64_t v196 = (v191 >> 3) + 1;
    }
    if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v197 = v196;
    }
    if (v197) {
      unint64_t v197 = (unint64_t)sub_22B216148(v197);
    }
    else {
      uint64_t v198 = 0;
    }
    long long v199 = (std::string::size_type *)(v197 + 8 * (v191 >> 3));
    *long long v199 = v188;
    char v193 = v199 + 1;
    long long v200 = (char *)v450[99];
    long long v201 = (char *)v450[98];
    if (v200 == v201)
    {
      long long v203 = v450;
    }
    else
    {
      do
      {
        std::string::size_type v202 = *((void *)v200 - 1);
        v200 -= 8;
        *--long long v199 = v202;
      }
      while (v200 != v201);
      long long v203 = v450;
      long long v200 = (char *)v450[98];
    }
    v203[98] = v199;
    v203[99] = v193;
    v203[100] = v197 + 8 * v198;
    if (v200) {
      operator delete(v200);
    }
LABEL_262:
    v450[99] = v193;
    if (v461 >= HIDWORD(v461)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v460 + v461) = ((unint64_t)v191 >> 3) | 0x100000000;
    LODWORD(v461) = v461 + 1;
    uint64_t v204 = llvm::ConstantInt::get();
    if (v458 >= (unint64_t)HIDWORD(v458)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v457 + v458) = v204;
    LODWORD(v458) = v458 + 1;
    uint64_t v205 = (uint64_t)v450 + *(void *)(*v450 - 24) + 8;
    uint64_t v206 = llvm::ConstantInt::get();
    uint64_t v207 = *v166;
    LOWORD(v469) = 257;
    sub_22B1D7384(v205, 48, v206, v207, (uint64_t)&__str);
    llvm::Value::replaceAllUsesWith();
LABEL_265:
    ++v164;
  }
  while (v164 != v165);
  uint64_t v1 = (uint64_t)v450;
  if (v461)
  {
    uint64_t v209 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ArrayType::get((llvm::ArrayType *)v450[218], (llvm::Type *)v461);
    if (*(unsigned char *)v450[217])
    {
      *(void *)&long long __str = v450[217];
      v467 = "_indirect";
      __int16 v210 = 771;
    }
    else
    {
      *(void *)&long long __str = "_indirect";
      __int16 v210 = 259;
    }
    LOWORD(v469) = v210;
    llvm::GlobalVariable::GlobalVariable();
    if (v450[219]) {
      strlen((const char *)v450[219]);
    }
    llvm::GlobalObject::setSection();
    *(void *)&long long __str = &v467;
    *((void *)&__str + 1) = 0x2000000000;
    uint64_t v211 = llvm::ValueAsMetadata::get();
    sub_22B1D6788((uint64_t)&__str, v211);
    llvm::ConstantInt::get();
    uint64_t v212 = llvm::ValueAsMetadata::get();
    if (v461)
    {
      uint64_t v213 = v212;
      uint64_t v214 = (char *)v460;
      uint64_t v215 = 8 * v461;
      do
      {
        *(_OWORD *)&v474.__r_.__value_.__l.__data_ = (unint64_t)v213;
        v214 += 8;
        llvm::ConstantInt::get();
        v474.__r_.__value_.__l.__size_ = llvm::ValueAsMetadata::get();
        uint64_t Impl = llvm::MDTuple::getImpl();
        sub_22B1D6788((uint64_t)&__str, Impl);
        v215 -= 8;
      }
      while (v215);
    }
    uint64_t v217 = *(void *)((char *)v450 + *(void *)(*v450 - 24) + 328);
    uint64_t v218 = llvm::MDTuple::getImpl();
    sub_22B1D6788(v217, v218);
    sub_22B212008((llvm::ValueHandleBase *)(v450 + 214), v209);
    if ((const char **)__str != &v467) {
      free((void *)__str);
    }
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v450 + *(void *)(*v450 - 24) + 200), (llvm::Type *)v461);
    uint64_t v219 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v450 + *(void *)(*v450 - 24) + 200), (llvm::Type *)v461);
    *(void *)&long long __str = "agc.constant_sampler_unique_id";
    LOWORD(v469) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v219 + 80) |= 1u;
    llvm::ConstantArray::get();
    llvm::GlobalVariable::setInitializer();
    sub_22B212008((llvm::ValueHandleBase *)(v450 + 228), v219);
  }
LABEL_283:
  sub_22B22D740();
  uint64_t v220 = *(void *)v1;
  uint64_t v221 = *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 320);
  uint64_t v222 = v221 + 24;
  uint64_t v223 = *(void *)(v221 + 32);
  if (v223 == v221 + 24) {
    goto LABEL_327;
  }
  uint64_t v224 = &qword_2683E9000;
  uint64_t v448 = v221 + 24;
  while (2)
  {
    uint64_t v225 = (llvm::Value *)(v223 - 56);
    BOOL v126 = v223 == 0;
    uint64_t v223 = *(void *)(v223 + 8);
    if (v126) {
      uint64_t v226 = 0;
    }
    else {
      uint64_t v226 = v225;
    }
    llvm::Value::getName(v226);
    int v227 = llvm::StringMapImpl::FindKey();
    if (v227 != -1 && v227 != (unint64_t)*((unsigned int *)v224 + 116))
    {
      sub_22B1F5178();
      sub_22B2259A8();
      sub_22B225AB0();
      sub_22B225B34();
      uint64_t v454 = v223;
      if (*(unsigned char *)(*(void *)((char *)v450 + *(void *)(*v450 - 24) + 344) + 1678))
      {
        llvm::ConstantInt::get();
        llvm::ConstantExpr::getIntToPtr();
      }
      else
      {
        llvm::Constant::getNullValue(**(llvm::Constant ***)(*((void *)v226 + 3) + 16), v228);
      }
      uint64_t v229 = *((void *)v226 + 1);
      if (!v229) {
        goto LABEL_324;
      }
      while (1)
      {
        unint64_t v230 = *(llvm::Instruction **)(v229 + 24);
        uint64_t v229 = *(void *)(v229 + 8);
        uint64_t v231 = *((void *)v230 + 1);
        if (!v231) {
          goto LABEL_323;
        }
        do
        {
          uint64_t v232 = *(void *)(v231 + 24);
          uint64_t v231 = *(void *)(v231 + 8);
          if (v232)
          {
            if (*(unsigned char *)(v232 + 16) == 84)
            {
              uint64_t v233 = *(void *)(v232 - 32);
              if (v233)
              {
                if (!*(unsigned char *)(v233 + 16) && *(void *)(v233 + 24) == *(void *)(v232 + 72))
                {
                  llvm::Value::getName(*(llvm::Value **)(v232 - 32));
                  int v234 = llvm::StringMapImpl::FindKey();
                  uint64_t v235 = v234;
                  if (v234 == -1) {
                    uint64_t v235 = dword_2683E9250;
                  }
                  uint64_t v236 = qword_2683E9248 + 8 * v235;
                  llvm::Value::getName((llvm::Value *)v233);
                  int v237 = llvm::StringMapImpl::FindKey();
                  BOOL v239 = v237 != -1 && v237 != (unint64_t)dword_2683E9158;
                  if (v236 != qword_2683E9248 + 8 * dword_2683E9250 || v239)
                  {
                    llvm::UndefValue::get();
LABEL_319:
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent((llvm::Instruction *)v232);
                    continue;
                  }
                  llvm::Value::getName((llvm::Value *)v233);
                  int v241 = llvm::StringMapImpl::FindKey();
                  if (v241 != -1 && v241 != (unint64_t)dword_2683E91F8)
                  {
                    llvm::Constant::getNullValue(*(llvm::Constant **)v232, v242);
                    goto LABEL_319;
                  }
                  llvm::Value::getName((llvm::Value *)v233);
                  int v243 = llvm::StringMapImpl::FindKey();
                  if (v243 != -1 && v243 != (unint64_t)dword_2683E91A8)
                  {
                    llvm::ConstantInt::get();
                    goto LABEL_319;
                  }
                }
              }
            }
          }
        }
        while (v231);
        if (*((void *)v230 + 1)) {
          llvm::Value::replaceAllUsesWith();
        }
LABEL_323:
        llvm::Instruction::eraseFromParent(v230);
        if (!v229)
        {
LABEL_324:
          llvm::Function::eraseFromParent(v226);
          uint64_t v222 = v448;
          uint64_t v223 = v454;
          uint64_t v224 = &qword_2683E9000;
          break;
        }
      }
    }
    if (v223 != v222) {
      continue;
    }
    break;
  }
  uint64_t v1 = (uint64_t)v450;
  uint64_t v220 = *v450;
LABEL_327:
  uint64_t v244 = *(void *)(v1 + *(void *)(v220 - 24) + 320);
  uint64_t v245 = *(void *)(v244 + 32);
  uint64_t v452 = v244 + 24;
  if (v245 == v244 + 24) {
    goto LABEL_403;
  }
  char v449 = 0;
  uint64_t v455 = v1 + 8;
  do
  {
    uint64_t v246 = (llvm::Value *)(v245 - 56);
    BOOL v126 = v245 == 0;
    uint64_t v245 = *(void *)(v245 + 8);
    if (v126) {
      v247 = 0;
    }
    else {
      v247 = v246;
    }
    llvm::Value::getName(v247);
    int v248 = llvm::StringMapImpl::FindKey();
    if (v248 != -1 && v248 != (unint64_t)dword_2683E9250)
    {
      if (!sub_22B225D5C((uint64_t *)v1, (uint64_t)v247, (int *)(*(void *)(qword_2683E9248 + 8 * v248) + 8)))goto LABEL_556; {
LABEL_360:
      }
      if (*((void *)v247 + 1))
      {
        char v449 = 1;
        continue;
      }
      goto LABEL_396;
    }
    llvm::Value::getName(v247);
    int v250 = llvm::StringMapImpl::FindKey();
    if (v250 != -1 && v250 != (unint64_t)dword_2683E9158)
    {
      uint64_t v251 = *((void *)v247 + 1);
      if (!v251) {
        goto LABEL_396;
      }
      uint64_t v252 = *(void *)(qword_2683E9150 + 8 * v250);
      while (1)
      {
        size_t v253 = *(llvm::CallBase **)(v251 + 24);
        uint64_t v251 = *(void *)(v251 + 8);
        v254 = (unsigned __int8 *)*((void *)v253 - 4 * (*((_DWORD *)v253 + 5) & 0x7FFFFFF));
        if (v254[16] - 11 > 1)
        {
          if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 272))(v1) & 1) == 0
            && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v254) + 16) > 0x14u)
          {
            goto LABEL_344;
          }
          sub_22B1FFC54(*(void *)(*(void *)v1 - 24) + v1 + 8, (uint64_t)v253);
          int v255 = *(_DWORD *)(v252 + 12);
          switch(v255)
          {
            case 0:
            case 1:
            case 2:
              if (v255 || !*(unsigned char *)(v252 + 16))
              {
                uint64_t v257 = *(void *)(*(void *)v1 - 24);
                uint64_t v258 = sub_22B228FA8(v1, (llvm::GlobalValue *)v254, 2u);
                LOWORD(v469) = 257;
                uint64_t v259 = sub_22B1D4240((uint64_t *)(v455 + v257), **(llvm::Type ***)(*(void *)v258 + 16), v258, 0, (uint64_t)&__str);
                uint64_t v260 = v1 + *(void *)(*(void *)v1 - 24);
                LOWORD(v469) = 257;
                uint64_t v261 = v260 + 8;
                uint64_t v262 = llvm::ConstantInt::get();
                uint64_t v256 = sub_22B242524(v261, v259, v262, (uint64_t)&__str);
              }
              else
              {
                uint64_t v256 = sub_22B22BACC((uint64_t *)v1, (llvm::GlobalValue *)v254);
              }
              uint64_t v263 = v256;
              uint64_t v264 = sub_22B1F50A8(v253);
              uint64_t v265 = (llvm::Type ***)((char *)v253 - 32 * (*((_DWORD *)v253 + 5) & 0x7FFFFFF));
              if (((v264 - (void)v265) & 0x1FFFFFFFE0) == 0x40)
              {
                uint64_t v266 = sub_22B242DC8(v1 + *(void *)(*(void *)v1 - 24), v265[4], 0);
                uint64_t v267 = *(void *)(*(void *)v1 - 24) + v1 + 8;
                LOWORD(v469) = 257;
                uint64_t v268 = (llvm::Type ***)sub_22B1D7B18(v267, v263, v266, (uint64_t)&__str);
                uint64_t v269 = llvm::ConstantInt::get();
                llvm::ConstantInt::get();
                uint64_t v270 = (void *)((char *)v450 + *(void *)(*v450 - 24) + 8);
                LOWORD(v469) = 257;
                sub_22B1D4340(v270, 32, v268, v269, (uint64_t)&__str);
                LOWORD(v469) = 257;
                uint64_t v1 = (uint64_t)v450;
                llvm::IRBuilderBase::CreateSelect();
              }
              break;
            case 3:
              uint64_t v271 = *(void *)(*(void *)v1 - 24);
              uint64_t v272 = sub_22B228FA8(v1, (llvm::GlobalValue *)v254, 2u);
              LOWORD(v469) = 257;
              uint64_t v273 = sub_22B1D4240((uint64_t *)(v455 + v271), **(llvm::Type ***)(*(void *)v272 + 16), v272, 0, (uint64_t)&__str);
              uint64_t v274 = v1 + *(void *)(*(void *)v1 - 24);
              LOWORD(v469) = 257;
              uint64_t v275 = v274 + 8;
              uint64_t v276 = llvm::ConstantInt::get();
              sub_22B242524(v275, v273, v276, (uint64_t)&__str);
              break;
            case 4:
              uint64_t v277 = *(void *)(*(void *)v1 - 24);
              uint64_t v278 = v1;
              uint64_t v279 = (llvm::GlobalValue *)v254;
              unsigned int v280 = 5;
              goto LABEL_358;
            case 5:
              uint64_t v277 = *(void *)(*(void *)v1 - 24);
              uint64_t v278 = v1;
              uint64_t v279 = (llvm::GlobalValue *)v254;
              unsigned int v280 = 6;
LABEL_358:
              uint64_t v281 = sub_22B228FA8(v278, v279, v280);
              LOWORD(v469) = 257;
              sub_22B1D4240((uint64_t *)(v455 + v277), **(llvm::Type ***)(*(void *)v281 + 16), v281, 0, (uint64_t)&__str);
              break;
            default:
              break;
          }
        }
        else
        {
          llvm::UndefValue::get();
        }
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v253);
LABEL_344:
        if (!v251) {
          goto LABEL_360;
        }
      }
    }
    llvm::Value::getName(v247);
    int v283 = llvm::StringMapImpl::FindKey();
    if (v283 != -1 && v283 != (unint64_t)dword_2683E91F8)
    {
      *(void *)&long long __str = llvm::Value::getName(v247);
      *((void *)&__str + 1) = v284;
      uint64_t v285 = llvm::StringRef::find();
      uint64_t v286 = *((void *)v247 + 1);
      if (v286)
      {
        uint64_t v287 = v285;
        do
        {
          v288 = *(llvm::Instruction **)(v286 + 24);
          uint64_t v286 = *(void *)(v286 + 8);
          v289 = (unsigned __int8 *)*((void *)v288 - 4 * (*((_DWORD *)v288 + 5) & 0x7FFFFFF));
          if (v289[16] - 11 > 1)
          {
            sub_22B1FFC54(*(void *)(*(void *)v1 - 24) + v1 + 8, (uint64_t)v288);
            if (v287 == -1)
            {
              uint64_t v290 = *(void *)(*(void *)v1 - 24);
              uint64_t v291 = sub_22B228FA8(v1, (llvm::GlobalValue *)v289, 9u);
              LOWORD(v469) = 257;
              sub_22B1D4240((uint64_t *)(v455 + v290), **(llvm::Type ***)(*(void *)v291 + 16), v291, 0, (uint64_t)&__str);
            }
            else
            {
              *(void *)&long long __str = 0;
              if (sub_22B225C90((uint64_t)v289, (unint64_t *)&__str)) {
                llvm::ConstantInt::get();
              }
              else {
                sub_22B22AEA4((void *)v1, (llvm::GlobalValue *)v289, 2u);
              }
            }
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v288);
        }
        while (v286);
        goto LABEL_360;
      }
      goto LABEL_396;
    }
    llvm::Value::getName(v247);
    int v292 = llvm::StringMapImpl::FindKey();
    if (v292 != -1 && v292 != (unint64_t)dword_2683E9180)
    {
      uint64_t v293 = *((void *)v247 + 1);
      if (!v293) {
        goto LABEL_396;
      }
      while (2)
      {
        char v294 = *(llvm::Instruction **)(v293 + 24);
        uint64_t v293 = *(void *)(v293 + 8);
        char v295 = (unsigned __int8 *)*((void *)v294 - 4 * (*((_DWORD *)v294 + 5) & 0x7FFFFFF));
        if (v295[16] - 11 <= 1)
        {
          llvm::UndefValue::get();
          goto LABEL_385;
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 272))(v1) & 1) != 0
          || *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v295) + 16) <= 0x14u)
        {
          sub_22B1FFC54(*(void *)(*(void *)v1 - 24) + v1 + 8, (uint64_t)v294);
          uint64_t v296 = *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 344);
          if (*(void *)(v296 + 904)) {
            strlen(*(const char **)(v296 + 904));
          }
          uint64_t v297 = sub_22B1DCB28();
          uint64_t v298 = *(void *)(*(void *)v1 - 24);
          LOWORD(v469) = 257;
          sub_22B1D4034(v455 + v298, **(void **)(*(void *)v297 + 16), v297, 0, 0, (uint64_t)&__str);
LABEL_385:
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v294);
        }
        if (!v293) {
          goto LABEL_360;
        }
        continue;
      }
    }
    llvm::Value::getName(v247);
    int v299 = llvm::StringMapImpl::FindKey();
    if (v299 != -1 && v299 != (unint64_t)dword_2683E91A8)
    {
      uint64_t v300 = *((void *)v247 + 1);
      if (v300)
      {
        do
        {
          uint64_t v301 = *(llvm::Instruction **)(v300 + 24);
          uint64_t v300 = *(void *)(v300 + 8);
          char v302 = (unsigned __int8 *)*((void *)v301 - 4 * (*((_DWORD *)v301 + 5) & 0x7FFFFFF));
          if (v302[16] - 11 > 1)
          {
            sub_22B1FFC54(*(void *)(*(void *)v1 - 24) + v1 + 8, (uint64_t)v301);
            char v303 = (llvm::Constant **)sub_22B229E6C(v1, (llvm::GlobalValue *)v302);
            char v304 = (uint64_t *)(*(void *)(*(void *)v1 - 24) + v1 + 8);
            LOWORD(v469) = 257;
            uint64_t NullValue = llvm::Constant::getNullValue(*v303, v305);
            sub_22B1D4340(v304, 32, (llvm::Type ***)v303, NullValue, (uint64_t)&__str);
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v301);
        }
        while (v300);
        goto LABEL_360;
      }
LABEL_396:
      llvm::Function::eraseFromParent(v247);
    }
  }
  while (v245 != v452);
  uint64_t v220 = *(void *)v1;
  if (v449)
  {
    if ((*(unsigned int (**)(uint64_t))(v220 + 272))(v1)) {
      char v307 = "Could not statically determine the target of a texture write";
    }
    else {
      char v307 = "Could not resolve texture/sampler references";
    }
    std::string::append((std::string *)(v1 + *(void *)(*(void *)v1 - 24) + 408), v307);
    goto LABEL_556;
  }
LABEL_403:
  uint64_t v308 = v1 + *(void *)(v220 - 24);
  uint64_t v309 = *(void *)(v308 + 400);
  char v310 = *(llvm::Module **)(v308 + 320);
  sub_22B1EB1B0(v309);
  llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v309 + 344), v310);
  char v311 = *(void **)(v1 + 760);
  char v312 = (void *)(v1 + 768);
  if (v311 != (void *)(v1 + 768))
  {
    do
    {
      uint64_t v313 = v311[6];
      if (v313)
      {
        if (*(void *)(v313 + 8))
        {
          uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v311[6]);
          if (Name)
          {
            uint64_t Name = sub_22B1E2118(&__str, Name, v315);
          }
          else
          {
            long long __str = 0uLL;
            v467 = 0;
          }
          sub_22B1E69D0((uint64_t)Name, "%s: image or sample GV %s still has references: \n", v316, v317, v318, v319, v320, v321, (char)"void AGCLLVMUserObject::cleanupSamplerGlobalVariables()");
          if (SHIBYTE(v467) < 0) {
            operator delete((void *)__str);
          }
          uint64_t v322 = *(void *)(v313 + 8);
          if (v322)
          {
            uint64_t v323 = MEMORY[0x263F8BBF0] + 16;
            do
            {
              memset(&v474, 0, sizeof(v474));
              DWORD2(__str) = 0;
              char v470 = 0;
              uint64_t v471 = 0;
              int v472 = 1;
              uint64_t v468 = 0;
              uint64_t v469 = 0;
              v467 = 0;
              *(void *)&long long __str = v323;
              v473 = &v474;
              sub_22B1EAD44((llvm::raw_ostream *)&__str);
              uint64_t v324 = llvm::Value::print(*(llvm::Value **)(v322 + 24), (llvm::raw_ostream *)&__str);
              LOBYTE(v331) = (_BYTE)v473;
              if (SHIBYTE(v473->__r_.__value_.__r.__words[2]) < 0) {
                std::string::size_type v331 = v473->__r_.__value_.__r.__words[0];
              }
              sub_22B1E69D0(v324, "\t%s\n", v325, v326, v327, v328, v329, v330, v331);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__str);
              if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v474.__r_.__value_.__l.__data_);
              }
              uint64_t v322 = *(void *)(v322 + 8);
            }
            while (v322);
          }
        }
        else
        {
          llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v311[6]);
        }
      }
      uint64_t v332 = (void *)v311[1];
      if (v332)
      {
        do
        {
          v333 = v332;
          uint64_t v332 = (void *)*v332;
        }
        while (v332);
      }
      else
      {
        do
        {
          v333 = (void *)v311[2];
          BOOL v126 = *v333 == (void)v311;
          char v311 = v333;
        }
        while (!v126);
      }
      char v311 = v333;
    }
    while (v333 != v312);
  }
  uint64_t v1 = (uint64_t)v450;
  sub_22B22A3F0((void *)v450[96]);
  v450[95] = v312;
  *((_OWORD *)v450 + 48) = 0u;
  int v334 = *((_DWORD *)v450 + 176);
  if (!v334 && !*((_DWORD *)v450 + 177)) {
    goto LABEL_453;
  }
  char v335 = (llvm **)(v450 + 87);
  uint64_t v336 = *((unsigned int *)v450 + 178);
  if (v336 <= 4 * v334 || v336 < 0x41)
  {
    *((void *)&__str + 1) = 2;
    v467 = 0;
    uint64_t v468 = -4096;
    uint64_t v469 = 0;
    *(void *)&long long __str = &unk_26DE79C40;
    *(_OWORD *)&v474.__r_.__value_.__r.__words[1] = 2uLL;
    uint64_t v475 = -8192;
    uint64_t v476 = 0;
    v474.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26DE79C40;
    if (v336)
    {
      uint64_t v341 = 48 * v336;
      char v342 = (void *)((char *)*v335 + 32);
      do
      {
        sub_22B21A918((llvm::ValueHandleBase *)(v342 - 3), (void *)&__str + 1);
        *char v342 = v469;
        v342 += 6;
        v341 -= 48;
      }
      while (v341);
      uint64_t v343 = v475;
      v450[88] = 0;
      if (v343 != -8192 && v343 != -4096 && v343 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v474.__r_.__value_.__r.__words[1]);
      }
    }
    else
    {
      v450[88] = 0;
    }
    if (v468 != -8192 && v468 != -4096 && v468) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)&__str + 8));
    }
    goto LABEL_453;
  }
  sub_22B22AD90((uint64_t)(v450 + 87));
  int v337 = 1 << (33 - __clz(v334 - 1));
  if (v337 <= 64) {
    int v337 = 64;
  }
  if (v334) {
    int v338 = v337;
  }
  else {
    int v338 = 0;
  }
  if (v338 == *((_DWORD *)v450 + 178)) {
    goto LABEL_437;
  }
  llvm::deallocate_buffer(*v335, (void *)(48 * v336));
  if (v338)
  {
    unint64_t v339 = (4 * v338 / 3u + 1) | ((unint64_t)(4 * v338 / 3u + 1) >> 1);
    unint64_t v340 = v339 | (v339 >> 2) | ((v339 | (v339 >> 2)) >> 4);
    LODWORD(v340) = (((v340 | (v340 >> 8)) >> 16) | v340 | (v340 >> 8)) + 1;
    *((_DWORD *)v450 + 178) = v340;
    v450[87] = MEMORY[0x230F426A0](48 * v340, 8);
LABEL_437:
    sub_22B22AB80((uint64_t)(v450 + 87));
    goto LABEL_453;
  }
  *char v335 = 0;
  v450[88] = 0;
  *((_DWORD *)v450 + 178) = 0;
LABEL_453:
  sub_22B22A45C((uint64_t)(v450 + 90));
  if (v450[98] == v450[99]) {
    goto LABEL_673;
  }
  uint64_t v345 = *v450;
  uint64_t v346 = *(void *)((char *)v450 + *(void *)(*v450 - 24) + 320);
  uint64_t v347 = v346 + 8;
  uint64_t v348 = *(void *)(v346 + 16);
  if (v348 == v346 + 8)
  {
    int v351 = 0;
    int v350 = 0;
    uint64_t v349 = 0;
  }
  else
  {
    uint64_t v349 = 0;
    int v350 = 0;
    int v351 = 0;
    do
    {
      if (v348) {
        uint64_t v352 = v348 - 56;
      }
      else {
        uint64_t v352 = 0;
      }
      if (*(void *)(v352 + 8))
      {
        if ((*(unsigned char *)(v352 + 34) & 0x40) != 0
          && (v353 = (void *)llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)v352), v354 == 11)
          && (*v353 == 0x74735F6567616D69
            ? (BOOL v355 = *(void *)((char *)v353 + 3) == 0x65746174735F6567)
            : (BOOL v355 = 0),
              v355))
        {
          if (*(unsigned char *)(*(void *)v352 + 8) == 17) {
            uint64_t v349 = (v349 + *(_DWORD *)(*(void *)v352 + 32));
          }
          else {
            uint64_t v349 = (v349 + 1);
          }
        }
        else if ((*(unsigned char *)(v352 + 34) & 0x40) != 0 {
               && (std::string v356 = (void *)llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)v352), v357 == 13)
        }
               && (*v356 == 0x5F72656C706D6173
                 ? (BOOL v358 = *(void *)((char *)v356 + 5) == 0x65746174735F7265)
                 : (BOOL v358 = 0),
                   v358))
        {
          ++v350;
        }
        else if ((*(unsigned char *)(v352 + 34) & 0x40) != 0)
        {
          Sectionuint64_t Impl = (unint64_t *)llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)v352);
          if (v360 == 15)
          {
            unint64_t v361 = bswap64(*SectionImpl);
            unint64_t v362 = 0x636F6E7374616E74;
            if (v361 == 0x636F6E7374616E74
              && (unint64_t v361 = bswap64(*(unint64_t *)((char *)SectionImpl + 7)),
                  unint64_t v362 = 0x745F647269766572,
                  v361 == 0x745F647269766572))
            {
              int v363 = 0;
            }
            else
            {
              int v363 = v361 < v362 ? -1 : 1;
            }
            if (!v363) {
              ++v351;
            }
          }
        }
      }
      uint64_t v348 = *(void *)(v348 + 8);
    }
    while (v348 != v347);
    uint64_t v1 = (uint64_t)v450;
    uint64_t v345 = *v450;
  }
  uint64_t v364 = *(void *)(v1 + *(void *)(v345 - 24) + 344);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v364 + 344))(v364, v349, (v350 + v351)))
  {
LABEL_673:
    if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 280))(v1) & 1) == 0)
    {
      uint64_t v365 = *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 320);
      uint64_t v366 = *(void *)(v365 + 32);
      uint64_t v436 = v365 + 24;
      if (v366 != v365 + 24)
      {
        uint64_t v435 = v1 + 344;
        uint64_t v442 = v1 + 184;
        do
        {
          uint64_t v437 = *(void *)(v366 + 8);
          if (v366) {
            v367 = (llvm::Value *)(v366 - 56);
          }
          else {
            v367 = 0;
          }
          uint64_t v368 = *(void *)(v435 + *(void *)(*(void *)v1 - 24));
          uint64_t v369 = llvm::Value::getName(v367);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v368 + 544))(v368, v369, v370))
          {
            uint64_t v371 = *((void *)v367 + 1);
            if (v371)
            {
              do
              {
                unint64_t v372 = 0;
                uint64_t v373 = *(void *)(v371 + 24);
                uint64_t v443 = *(void *)(v371 + 8);
                *(void *)&long long __str = &v467;
                *((void *)&__str + 1) = 0x1000000000;
                while (1)
                {
                  uint64_t v374 = sub_22B1F50A8((llvm::CallBase *)v373);
                  uint64_t v375 = v373 - 32 * (*(_DWORD *)(v373 + 20) & 0x7FFFFFF);
                  if (v372 >= ((unint64_t)(v374 - v375) >> 5))
                  {
                    uint64_t v383 = 0;
                    LODWORD(v372) = 0;
                    goto LABEL_518;
                  }
                  uint64_t v376 = *(void *)(v375 + 32 * v372);
                  sub_22B1D6788((uint64_t)&__str, v376);
                  int v377 = *(unsigned __int8 *)(v376 + 16);
                  do
                  {
                    if (v377 != 77) {
                      break;
                    }
                    uint64_t v376 = *(void *)(v376 - 32);
                    int v377 = *(unsigned __int8 *)(v376 + 16);
                  }
                  while (v376);
                  if (v377 == 84)
                  {
                    uint64_t v378 = *(void *)(v376 - 32);
                    if (v378)
                    {
                      if (!*(unsigned char *)(v378 + 16) && *(void *)(v378 + 24) == *(void *)(v376 + 72))
                      {
                        v379 = (void *)llvm::Value::getName((llvm::Value *)v378);
                        if (v380 == 21)
                        {
                          BOOL v381 = *v379 == 0x7867612E6D766C6CLL && v379[1] == 0x657275747865742ELL;
                          if (v381 && *(void *)((char *)v379 + 13) == 0x6574617453657275) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  ++v372;
                }
                uint64_t v383 = *(void *)(v376 - 32 * (*(_DWORD *)(v376 + 20) & 0x7FFFFFF) + 32);
LABEL_518:
                uint64_t v384 = (v372 + 1);
                for (uint64_t j = v373 + 32 * v384; ; j += 32)
                {
                  uint64_t v386 = sub_22B1F50A8((llvm::CallBase *)v373);
                  uint64_t v387 = *(_DWORD *)(v373 + 20) & 0x7FFFFFF;
                  if (v384 >= ((v386
                                                           - (v373
                                                            + 32 * (unint64_t)-(int)v387)) >> 5))
                    break;
                  sub_22B1D6788((uint64_t)&__str, *(void *)(j - 32 * v387));
                  LODWORD(v384) = v384 + 1;
                }
                if (v383 && *(unsigned __int8 *)(v383 + 16) >= 0x15u)
                {
                  uint64_t v388 = *(void *)(v373 + 40);
                  v474.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.switch.end";
                  LOWORD(v476) = 259;
                  uint64_t v389 = llvm::BasicBlock::splitBasicBlock();
                  uint64_t v390 = *(void *)(v388 + 40);
                  if (v390 == v388 + 40)
                  {
                    v393 = 0;
                  }
                  else
                  {
                    v391 = (llvm::Instruction *)(v390 - 24);
                    if (v390) {
                      uint64_t v392 = v390 - 24;
                    }
                    else {
                      uint64_t v392 = 0;
                    }
                    if (*(unsigned __int8 *)(v392 + 16) - 29 >= 0xB) {
                      v393 = 0;
                    }
                    else {
                      v393 = v391;
                    }
                  }
                  llvm::Instruction::eraseFromParent(v393);
                  uint64_t v394 = *(void *)(*(void *)v1 - 24) + v1;
                  *(void *)(v394 + 56) = v388;
                  *(void *)(v394 + 64) = v388 + 40;
                  uint64_t v395 = *(void *)(*(void *)v1 - 24);
                  uint64_t v396 = *(void *)(v442 + v395);
                  LOWORD(v476) = 257;
                  uint64_t v397 = sub_22B1D7384(v395 + v1 + 8, 38, v383, v396, (uint64_t)&v474);
                  uint64_t v398 = *(unsigned int *)(v1 + 2284);
                  uint64_t v399 = *(void *)(*(void *)v1 - 24) + v1;
                  uint64_t v400 = llvm::User::operator new((llvm::User *)0x40);
                  MEMORY[0x230F42130](v400, v397, v389, v398, 0);
                  LOWORD(v476) = 257;
                  (*(void (**)(void, uint64_t, std::string *, void, void))(**(void **)(v399 + 88)
                                                                                         + 16))(*(void *)(v399 + 88), v400, &v474, *(void *)(v399 + 56), *(void *)(v399 + 64));
                  uint64_t v401 = *(unsigned int *)(v399 + 16);
                  if (v401)
                  {
                    uint64_t v402 = *(void *)(v399 + 8);
                    uint64_t v403 = v402 + 16 * v401;
                    do
                    {
                      llvm::Instruction::setMetadata();
                      v402 += 16;
                    }
                    while (v402 != v403);
                  }
                  uint64_t v1 = (uint64_t)v450;
                  if (v398)
                  {
                    llvm::ConstantInt::get();
                    v474.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.switch.case";
                    LOWORD(v476) = 259;
                    operator new();
                  }
                  llvm::Value::replaceAllUsesWith();
                  llvm::Instruction::eraseFromParent((llvm::Instruction *)v373);
                }
                if ((const char **)__str != &v467) {
                  free((void *)__str);
                }
                uint64_t v371 = v443;
              }
              while (v443);
            }
          }
          uint64_t v366 = v437;
        }
        while (v437 != v436);
      }
    }
    int v208 = 1;
    goto LABEL_557;
  }
  std::to_string(&v456, v350 + v351 + v349);
  v404 = std::string::insert(&v456, 0, "Total number of textures and samplers (");
  std::string::size_type v405 = v404->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v474.__r_.__value_.__l.__data_ = *(_OWORD *)&v404->__r_.__value_.__l.__data_;
  v474.__r_.__value_.__r.__words[2] = v405;
  v404->__r_.__value_.__l.__size_ = 0;
  v404->__r_.__value_.__r.__words[2] = 0;
  v404->__r_.__value_.__r.__words[0] = 0;
  v406 = std::string::append(&v474, ") exceeds GPU allowance.");
  v407 = (const char *)v406->__r_.__value_.__r.__words[2];
  long long __str = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
  v467 = v407;
  v406->__r_.__value_.__l.__size_ = 0;
  v406->__r_.__value_.__r.__words[2] = 0;
  v406->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) >= 0) {
    v408 = (const std::string::value_type *)&__str;
  }
  else {
    v408 = (const std::string::value_type *)__str;
  }
  if (SHIBYTE(v467) >= 0) {
    std::string::size_type v409 = HIBYTE(v467);
  }
  else {
    std::string::size_type v409 = *((void *)&__str + 1);
  }
  std::string::append((std::string *)(v1 + *(void *)(*(void *)v1 - 24) + 408), v408, v409);
  if (SHIBYTE(v467) < 0) {
    operator delete((void *)__str);
  }
  if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v474.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v456.__r_.__value_.__l.__data_);
  }
LABEL_556:
  int v208 = 0;
LABEL_557:
  if (v457 != v459) {
    free(v457);
  }
  if (v460 != v462) {
    free(v460);
  }
  if (v463 != v465) {
    free(v463);
  }
LABEL_563:
  if (v440)
  {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after replaceTexturesAndSamplers");
    sub_22B2252F4((void *)v1);
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after simplifyTrigIdentities");
  }
  else
  {
    sub_22B2252F4((void *)v1);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v1 + *(void *)(*(void *)v1 - 24) + 344) + 784) + 43)) {
    int v410 = 0;
  }
  else {
    int v410 = v208;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v1 + *(void *)(*(void *)v1 - 24) + 344) + 784) + 43)
    && ((v208 ^ 1) & 1) == 0)
  {
    int v410 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 184))(v1);
  }
  if (*(unsigned char *)(v1 + 10) || !MGGetBoolAnswer()) {
    goto LABEL_583;
  }
  v411 = (const char *)sub_22B1DEEE4("AGC_ENABLE_F16_FASTMATH_BUILTINS");
  if (v411 && *v411 != 48)
  {
    if (atoi(v411))
    {
      if (v410) {
        int v410 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 144))(v1);
      }
      if (v440)
      {
        sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after replace f16 builtins");
        goto LABEL_581;
      }
    }
LABEL_583:
    if (!v410) {
      goto LABEL_585;
    }
    goto LABEL_584;
  }
LABEL_581:
  if ((v410 & 1) == 0)
  {
    int v410 = 0;
    goto LABEL_585;
  }
LABEL_584:
  int v410 = (*(uint64_t (**)(uint64_t, void))(*(void *)v1 + 176))(v1, 0);
LABEL_585:
  if (MGGetBoolAnswer()
    && (v412 = (const char *)sub_22B1DEEE4("AGC_ENABLE_PRECISE_MATH")) != 0
    && *v412 != 48
    && atoi(v412))
  {
    uint64_t v413 = *(void *)(*(void *)(*(void *)(v1 + *(void *)(*(void *)v1 - 24) + 344) + 784) + 32);
    if (v413) {
      int v414 = 0;
    }
    else {
      int v414 = v410;
    }
    if (v413 && ((v410 ^ 1) & 1) == 0) {
      int v414 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 176))(v1, 1);
    }
  }
  else
  {
    int v414 = v410;
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after linking runtime");
  }
  if (v414) {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 136))(v1);
  }
  else {
    uint64_t v22 = 0;
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after replaceBuiltins");
  }
  if (v22) {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 192))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after promoteGlobalConstants");
  }
  if (v22) {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after improveDMAPromotionOpportunity");
  }
  if (v22)
  {
    uint64_t v415 = *(void *)(v1 + 152);
    *(_WORD *)(v415 + 18) = *(_WORD *)(v415 + 18) & 0xC00F | (16
                                                            * (*(uint64_t (**)(uint64_t))(*(void *)v1 + 88))(v1));
    inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
    if (inserted)
    {
      v417 = inserted;
      int NumOperands = llvm::NamedMDNode::getNumOperands(inserted);
      int v419 = NumOperands;
      *(void *)&long long __str = &v467;
      *((void *)&__str + 1) = 0x400000000;
      if (NumOperands) {
        unint64_t v420 = (NumOperands - 1) + 1;
      }
      else {
        unint64_t v420 = 0;
      }
      if (v420 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v421 = 0;
      if (NumOperands)
      {
        int v422 = 0;
        v423 = (uint64_t *)__str;
        do
        {
          *v423++ = llvm::NamedMDNode::getOperand(v417);
          ++v422;
        }
        while (v419 != v422);
        int v421 = DWORD2(__str);
      }
      DWORD2(__str) = v421 + v420;
      llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v1 + *(void *)(*(void *)v1 - 24) + 320), v417);
      llvm::Module::getOrInsertNamedMetadata();
      v424 = (const char **)__str;
      if (DWORD2(__str))
      {
        uint64_t v425 = 8 * DWORD2(__str);
        do
        {
          if (*(void *)&(*v424)[-8 * *((unsigned int *)*v424 + 2)]) {
            llvm::NamedMDNode::addOperand();
          }
          ++v424;
          v425 -= 8;
        }
        while (v425);
        v424 = (const char **)__str;
      }
      if (v424 != &v467) {
        free(v424);
      }
    }
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after prunePRIDsOfDeletedGlobals");
  }
  if (v22) {
    sub_22B1EE934(v1 + *(void *)(*(void *)v1 - 24), *(void *)(v1 + 152));
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after finalizeDriverBindings");
  }
  if (v22) {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 160))(v1);
  }
  if (v440) {
    sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after markInvariantOutputs");
  }
  if (MGGetBoolAnswer())
  {
    v426 = (const char *)sub_22B1DEEE4("AGX_FORCE_LATE_INLINING");
    if (v426)
    {
      if (*v426 != 48 && atoi(v426))
      {
        if (v22)
        {
          *(_DWORD *)(v1 + 32) = 0;
          uint64_t v427 = *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 320);
          uint64_t v428 = v427 + 24;
          uint64_t v429 = *(void *)(v427 + 32);
          if (v429 != v427 + 24)
          {
            do
            {
              v430 = (llvm::GlobalValue *)(v429 - 56);
              BOOL v126 = v429 == 0;
              uint64_t v429 = *(void *)(v429 + 8);
              if (v126) {
                v431 = 0;
              }
              else {
                v431 = v430;
              }
              if ((llvm::GlobalValue::isDeclaration(v431) & 1) == 0)
              {
                ++*(_DWORD *)(v1 + 32);
                if (v431 != *(llvm::GlobalValue **)(v1 + 152))
                {
                  llvm::Function::addFnAttr();
                  *((_DWORD *)v431 + 8) = *((_DWORD *)v431 + 8) & 0xFFFFBFC0 | 0x4007;
                }
              }
            }
            while (v429 != v428);
            if (*(_DWORD *)(v1 + 32) > 1u) {
              llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)(v1 + *(void *)(*(void *)v1 - 24) + 400) + 304), *(llvm::Module **)(v1 + *(void *)(*(void *)v1 - 24) + 320));
            }
          }
        }
        if (v440) {
          sub_22B1EE6FC(v1 + *(void *)(*(void *)v1 - 24), "after inlineFunctionsLate");
        }
      }
    }
  }
  if (v22)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 168))(v1)) {
      goto LABEL_666;
    }
    int v432 = 1;
    if ((*(unsigned int (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 32))(v1 + *(void *)(*(void *)v1 - 24)) != 2)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 32))(v1 + *(void *)(*(void *)v1 - 24)) == 16) {
        int v432 = 1;
      }
      else {
        int v432 = 2;
      }
    }
    if (sub_22B1EBFD8(*(void *)(v1 + *(void *)(*(void *)v1 - 24) + 400), (std::string *)(v1 + *(void *)(*(void *)v1 - 24)), *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 320), *(unsigned int *)(v1 + 25), v432)&& (*(unsigned int (**)(uint64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 80))(v1 + *(void *)(*(void *)v1 - 24)))
    {
      sub_22B200C40(v1 + *(void *)(*(void *)v1 - 24));
      uint64_t v22 = 1;
    }
    else
    {
LABEL_666:
      uint64_t v22 = 0;
    }
  }
  *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 360) = mach_absolute_time()
                                                            - *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 352);
  return v22;
}

void sub_22B21FC3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v121[8] = *MEMORY[0x263EF8340];
  char v9 = (char *)a1 + *(void *)(*a1 - 24);
  if (!*(unsigned char *)(*((void *)v9 + 43) + 1674) || *((unsigned char *)a1 + 37)) {
    goto LABEL_3;
  }
  uint64_t v23 = *((void *)v9 + 40);
  uint64_t v24 = (uint64_t *)(v23 + 168);
  int v25 = *(char *)(v23 + 191);
  if (v25 < 0)
  {
    if (*(void *)(v23 + 176) != 20) {
      goto LABEL_177;
    }
    uint64_t v24 = (uint64_t *)*v24;
  }
  else if (v25 != 20)
  {
    goto LABEL_177;
  }
  uint64_t v76 = (uint64_t *)*v24;
  uint64_t v77 = v24[1];
  int v78 = *((_DWORD *)v24 + 4);
  if (v76 == (uint64_t *)0x535F786574726556 && v77 == 0x6F72505F65746174 && v78 == 1835102823)
  {
    sub_22B1E69D0((uint64_t)a1, "Disabling non-inlined functions for ES1 vertex shader", a3, a4, a5, a6, a7, a8, v103);
LABEL_3:
    int v10 = 0;
    char v11 = 0;
    goto LABEL_4;
  }
LABEL_177:
  uint64_t v81 = a1[20];
  if (*(_WORD *)(v81 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a1[20]);
    uint64_t v82 = *(void *)(v81 + 88);
    if (*(_WORD *)(v81 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v81);
      uint64_t v83 = *(void *)(v81 + 88);
      goto LABEL_182;
    }
  }
  else
  {
    uint64_t v82 = *(void *)(v81 + 88);
  }
  uint64_t v83 = v82;
LABEL_182:
  uint64_t v84 = v83 + 40 * *(void *)(v81 + 96);
  if (v82 != v84)
  {
    char v85 = 0;
    while (1)
    {
      if (*(void *)(v82 + 8))
      {
        uint64_t v86 = *(void *)(a1[9] + 8 * *(unsigned int *)(v82 + 32));
        BOOL v87 = sub_22B1E1ED0(*(llvm::MDString **)(v86 - 8 * *(unsigned int *)(v86 + 8) + 8), "air.indirect_buffer");
        if (v87)
        {
          sub_22B1E69D0(v87, "Disabling non-inlined functions due to use of indirect argument buffer", v88, v89, v90, v91, v92, v93, v103);
          char v11 = 0;
          goto LABEL_200;
        }
        if (sub_22B1E1ED0(*(llvm::MDString **)(v86 - 8 * *(unsigned int *)(v86 + 8) + 8), "air.texture"))
        {
          LOBYTE(v119) = 0;
          LOBYTE(v116) = 0;
          BOOL v94 = sub_22B243AD8(v86, &v109, &v104, &v119, &v116, v114, v114);
          BOOL v101 = !v94 || v119 == 0;
          if (!v101 && v116 != 0)
          {
            sub_22B1E69D0(v94, "Inlining all texture functions due to the use of a RW texture", v95, v96, v97, v98, v99, v100, v103);
            char v85 = 1;
          }
        }
      }
      v82 += 40;
      if (v82 == v84) {
        goto LABEL_198;
      }
    }
  }
  char v85 = 0;
LABEL_198:
  char v11 = 1;
LABEL_200:
  int v10 = v85 & 1;
LABEL_4:
  *((_DWORD *)a1 + 8) = 0;
  uint64_t v12 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 320);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(void *)(v12 + 32);
  if (v14 != v12 + 24)
  {
    while (1)
    {
      uint64_t v15 = v14 - 56;
      BOOL v22 = v14 == 0;
      uint64_t v14 = *(void *)(v14 + 8);
      uint64_t v16 = v22 ? 0 : v15;
      llvm::Function::removeFnAttr();
      if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v16)) {
        break;
      }
      if (!*(void *)(v16 + 8)) {
        goto LABEL_15;
      }
LABEL_22:
      if (v14 == v13) {
        goto LABEL_23;
      }
    }
    if (v16 == a1[20])
    {
      int v17 = *(_DWORD *)(v16 + 32);
      *(_DWORD *)(v16 + 32) = v17 & 0xFFFFFFF0;
      if ((v17 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v16) & 1) == 0) {
        *(_DWORD *)(v16 + 32) |= 0x4000u;
      }
      if ((v11 & 1) == 0) {
        *(void *)(a1[20] + 112) = 0;
      }
      ++*((_DWORD *)a1 + 8);
      goto LABEL_22;
    }
    if (*(void *)(v16 + 8))
    {
      ++*((_DWORD *)a1 + 8);
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(v16 + 32) & 0xFFFFBFC0 | 0x4007;
      if ((v11 & 1) == 0) {
        llvm::Function::addFnAttr();
      }
      goto LABEL_22;
    }
LABEL_15:
    llvm::Function::eraseFromParent((llvm::Function *)v16);
    goto LABEL_22;
  }
LABEL_23:
  if ((v11 & 1) == 0) {
    return;
  }
  uint64_t v18 = 0;
  uint64_t v119 = v121;
  uint64_t v120 = 0x800000000;
  uint64_t v109 = v113;
  uint64_t v110 = v113;
  uint64_t v111 = 16;
  int v112 = 0;
  do
  {
    if (off_26488E160[v18]) {
      strlen(off_26488E160[v18]);
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v20 = (const void *)Function;
      if (*(void *)(Function + 8))
      {
        sub_22B1D6788((uint64_t)&v119, Function);
        sub_22B22D8BC((uint64_t)&v104, &v109, v20);
      }
    }
    ++v18;
  }
  while (v18 != 2);
  sub_22B1F5178();
  if (dword_2683E9250)
  {
    for (uint64_t i = (uint64_t *)qword_2683E9248; ; ++i)
    {
      BOOL v22 = !*i || *i == -8;
      if (!v22) {
        break;
      }
    }
  }
  else
  {
    uint64_t i = (uint64_t *)qword_2683E9248;
  }
  uint64_t v26 = qword_2683E9248 + 8 * dword_2683E9250;
  if (i != (uint64_t *)v26)
  {
    char v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = *i;
    do
    {
      uint64_t v30 = llvm::Module::getFunction();
      if (v30)
      {
        uint64_t v31 = (const void *)v30;
        if (*(void *)(v30 + 8))
        {
          if (*(unsigned char *)(v29 + 31)) {
            uint64_t v28 = *(void *)(*(void *)(*(void *)(v30 + 24) + 16) + 8 * *(unsigned __int8 *)(v29 + 31) + 8);
          }
          int v32 = *(_DWORD *)(v29 + 8);
          if (v32 == 3 || v32 == 8 || v10)
          {
            sub_22B1D6788((uint64_t)&v119, v30);
            sub_22B22D8BC((uint64_t)&v104, &v109, v31);
            int v32 = *(_DWORD *)(v29 + 8);
          }
          if ((v32 | 4) == 5 && (*(unsigned int (**)(void *))(*a1 + 248))(a1))
          {
            sub_22B1D6788((uint64_t)&v119, (uint64_t)v31);
            sub_22B22D8BC((uint64_t)&v104, &v109, v31);
            char v27 = 1;
          }
        }
      }
      do
      {
        uint64_t v33 = i[1];
        ++i;
        uint64_t v29 = v33;
        if (v33) {
          BOOL v34 = v29 == -8;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (v34);
    }
    while (i != (uint64_t *)v26);
    if ((v10 & 1) == 0) {
      goto LABEL_82;
    }
    goto LABEL_64;
  }
  uint64_t v28 = 0;
  char v27 = 0;
  if (v10)
  {
LABEL_64:
    sub_22B2259A8();
    if (dword_2683E9158)
    {
      for (uint64_t j = (void *)qword_2683E9150; !*j || *j == -8; ++j)
        ;
    }
    else
    {
      uint64_t j = (void *)qword_2683E9150;
    }
    uint64_t v37 = qword_2683E9150 + 8 * dword_2683E9158;
    while (j != (void *)v37)
    {
      uint64_t v38 = llvm::Module::getFunction();
      if (v38)
      {
        uint64_t v39 = (const void *)v38;
        if (*(void *)(v38 + 8))
        {
          sub_22B1D6788((uint64_t)&v119, v38);
          sub_22B22D8BC((uint64_t)&v104, &v109, v39);
        }
      }
      do
      {
        uint64_t v41 = j[1];
        ++j;
        uint64_t v40 = v41;
        if (v41) {
          BOOL v42 = v40 == -8;
        }
        else {
          BOOL v42 = 1;
        }
      }
      while (v42);
    }
  }
LABEL_82:
  if (((v28 != 0) & v27) == 1)
  {
    uint64_t v43 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 320);
    uint64_t v44 = v43 + 24;
    uint64_t v45 = *(void *)(v43 + 32);
    if (v45 != v43 + 24)
    {
      while (1)
      {
        uint64_t v46 = v45 - 56;
        BOOL v22 = v45 == 0;
        uint64_t v45 = *(void *)(v45 + 8);
        uint64_t v47 = v22 ? 0 : v46;
        if (v47 != a1[20]) {
          break;
        }
LABEL_99:
        if (v45 == v44) {
          goto LABEL_100;
        }
      }
      if (*(_WORD *)(v47 + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v47);
        uint64_t v48 = *(void **)(v47 + 88);
        if (*(_WORD *)(v47 + 18))
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v47);
          uint64_t v49 = *(void **)(v47 + 88);
LABEL_93:
          uint64_t v50 = &v49[5 * *(void *)(v47 + 96)];
          while (v48 != v50)
          {
            if (*v48 == v28 && v48[1])
            {
              sub_22B1D6788((uint64_t)&v119, v47);
              llvm::Function::addFnAttr();
              goto LABEL_99;
            }
            v48 += 5;
          }
          goto LABEL_99;
        }
      }
      else
      {
        uint64_t v48 = *(void **)(v47 + 88);
      }
      uint64_t v49 = v48;
      goto LABEL_93;
    }
  }
LABEL_100:
  unsigned int v51 = v120;
  while (v51)
  {
    uint64_t v52 = v119[--v51];
    LODWORD(v120) = v51;
    uint64_t v53 = *(void *)(v52 + 8);
    if (v53)
    {
      do
      {
        uint64_t v54 = *(void *)(*(void *)(*(void *)(v53 + 24) + 40) + 56);
        if (v54 != a1[20])
        {
          sub_22B22D8BC((uint64_t)&v104, &v109, *(const void **)(*(void *)(*(void *)(v53 + 24) + 40) + 56));
          if ((_BYTE)v106)
          {
            llvm::Function::addFnAttr();
            sub_22B1D6788((uint64_t)&v119, v54);
          }
        }
        uint64_t v53 = *(void *)(v53 + 8);
      }
      while (v53);
      unsigned int v51 = v120;
    }
  }
  unsigned int v116 = v118;
  uint64_t v117 = 0x800000000;
  sub_22B225BB8(a1, (uint64_t)&v116);
  uint64_t v55 = (const void **)v116;
  int v104 = v108;
  uint64_t v105 = v108;
  uint64_t v106 = 16;
  int v107 = 0;
  if (!v117) {
    goto LABEL_147;
  }
  uint64_t v56 = 8 * v117;
  do
  {
    uint64_t v57 = *v55++;
    sub_22B22D8BC((uint64_t)v114, &v104, v57);
    v56 -= 8;
  }
  while (v56);
  unsigned int v58 = v117;
  if (!v117) {
    goto LABEL_147;
  }
  do
  {
    uint64_t v59 = *((void *)v116 + --v58);
    LODWORD(v117) = v58;
    uint64_t v60 = *(void *)(v59 + 8);
    if (!v60) {
      continue;
    }
    do
    {
      uint64_t v61 = *(void *)(v60 + 24);
      unsigned int v62 = *(unsigned __int8 *)(v61 + 16);
      if (v61) {
        BOOL v63 = v62 >= 0x1C;
      }
      else {
        BOOL v63 = 0;
      }
      if (v63)
      {
        unsigned int v65 = v62 - 28;
      }
      else
      {
        if (v61) {
          BOOL v64 = v62 == 5;
        }
        else {
          BOOL v64 = 0;
        }
        if (!v64)
        {
LABEL_127:
          if (!v61 || v62 != 84) {
            goto LABEL_144;
          }
          uint64_t v66 = *(void *)(v61 - 32);
          if (!v66 || *(unsigned char *)(v66 + 16) || *(void *)(v66 + 24) != *(void *)(v61 + 72)) {
            uint64_t v66 = 0;
          }
          llvm::Function::addFnAttr();
          if (*(_WORD *)(v66 + 18))
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v66);
            uint64_t v67 = *(unsigned int **)(v66 + 88);
            if (*(_WORD *)(v66 + 18))
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v66);
              uint64_t v68 = *(unsigned int **)(v66 + 88);
LABEL_138:
              uint64_t v69 = &v68[10 * *(void *)(v66 + 96)];
              while (v67 != v69)
              {
                if (*(void *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32 * v67[8]) == v59)
                {
                  sub_22B22D8BC((uint64_t)v114, &v104, v67);
                  if (v115) {
                    sub_22B1D6788((uint64_t)&v116, (uint64_t)v67);
                  }
                }
                v67 += 10;
              }
              goto LABEL_144;
            }
          }
          else
          {
            uint64_t v67 = *(unsigned int **)(v66 + 88);
          }
          uint64_t v68 = v67;
          goto LABEL_138;
        }
        unsigned int v65 = *(unsigned __int16 *)(v61 + 18);
      }
      if (v65 != 49) {
        goto LABEL_127;
      }
      sub_22B22D8BC((uint64_t)v114, &v104, *(const void **)(v60 + 24));
      if (v115) {
        sub_22B1D6788((uint64_t)&v116, v61);
      }
LABEL_144:
      uint64_t v60 = *(void *)(v60 + 8);
    }
    while (v60);
    unsigned int v58 = v117;
  }
  while (v58);
LABEL_147:
  if (MGGetBoolAnswer())
  {
    uint64_t v70 = (const char *)sub_22B1DEEE4("AGX_STRESS_NO_INLINING");
    if (v70)
    {
      if (*v70 != 48 && atoi(v70))
      {
        uint64_t v71 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 320);
        uint64_t v72 = v71 + 24;
        uint64_t v73 = *(void *)(v71 + 32);
        while (v73 != v72)
        {
          uint64_t v74 = (llvm::GlobalValue *)(v73 - 56);
          BOOL v22 = v73 == 0;
          uint64_t v73 = *(void *)(v73 + 8);
          if (v22) {
            uint64_t v75 = 0;
          }
          else {
            uint64_t v75 = v74;
          }
          if ((llvm::GlobalValue::isDeclaration(v75) & 1) == 0 && (llvm::Function::hasFnAttribute() & 1) == 0) {
            llvm::Function::addFnAttr();
          }
        }
      }
    }
  }
  if (v105 != v104) {
    free(v105);
  }
  if (v116 != v118) {
    free(v116);
  }
  if (v110 != v109) {
    free(v110);
  }
  if (v119 != v121) {
    free(v119);
  }
}

uint64_t sub_22B220658(uint64_t a1)
{
  uint64_t v333 = *MEMORY[0x263EF8340];
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 504))(v327);
  *(_OWORD *)std::string __p = *(_OWORD *)&v327[8];
  int64_t v310 = v328;
  uint64_t v2 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
  if (v327[0])
  {
    std::string::append(v2 + 17, "Total number of indirect argument buffer resources exceeded for");
    if (v310 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if (v310 >= 0) {
      std::string::size_type v4 = HIBYTE(v310);
    }
    else {
      std::string::size_type v4 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + *(void *)(*(void *)a1 - 24) + 408), (const std::string::value_type *)v3, v4);
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  if (*(unsigned char *)(v2[14].__r_.__value_.__l.__size_ + 1678))
  {
    uint64_t v7 = *(unsigned int *)(a1 + 2160);
    if (v7)
    {
      uint64_t v8 = *(uint64_t **)(a1 + 2152);
      uint64_t v9 = 8 * v7;
      while (1)
      {
        uint64_t v10 = *v8;
        if (*(unsigned char *)(*v8 + 1))
        {
          if (*(unsigned char *)(v10 + 2)) {
            break;
          }
        }
        ++v8;
        v9 -= 8;
        if (!v9) {
          goto LABEL_19;
        }
      }
      std::to_string((std::string *)v319, *(_DWORD *)(v10 + 40));
      uint64_t v284 = std::string::insert((std::string *)v319, 0, "buffer(");
      std::string::size_type v285 = v284->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v324.__r_.__value_.__l.__data_ = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
      v324.__r_.__value_.__r.__words[2] = v285;
      v284->__r_.__value_.__l.__size_ = 0;
      v284->__r_.__value_.__r.__words[2] = 0;
      v284->__r_.__value_.__r.__words[0] = 0;
      uint64_t v286 = std::string::append(&v324, "): Argument buffer participates in modification as well as resource use");
      std::string::size_type v287 = v286->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v327 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
      *(void *)&v327[16] = v287;
      v286->__r_.__value_.__l.__size_ = 0;
      v286->__r_.__value_.__r.__words[2] = 0;
      v286->__r_.__value_.__r.__words[0] = 0;
      if (v327[23] >= 0) {
        v288 = v327;
      }
      else {
        v288 = *(const std::string::value_type **)v327;
      }
      if (v327[23] >= 0) {
        std::string::size_type v289 = v327[23];
      }
      else {
        std::string::size_type v289 = *(void *)&v327[8];
      }
      std::string::append((std::string *)(a1 + *(void *)(*(void *)a1 - 24) + 408), v288, v289);
      if ((v327[23] & 0x80000000) != 0) {
        operator delete(*(void **)v327);
      }
      if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v324.__r_.__value_.__l.__data_);
      }
      if ((v319[23] & 0x80000000) != 0) {
        operator delete(*(void **)v319);
      }
      goto LABEL_9;
    }
  }
LABEL_19:
  if (*(_DWORD *)(a1 + 2216))
  {
    char v11 = (int32x2_t *)(a1 + 2208);
    uint64_t v296 = a1 + 344;
    uint64_t v295 = a1 + 8;
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 2208);
      uint64_t v13 = *(unsigned int *)(a1 + 2224);
      uint64_t v14 = v12 + 48 * v13;
      if (v13)
      {
        uint64_t v15 = 48 * v13;
        while ((*(void *)(v12 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v12 += 48;
          v15 -= 48;
          if (!v15)
          {
            uint64_t v12 = v14;
            break;
          }
        }
      }
      unint64_t v16 = *(void *)(v12 + 24);
      uint64_t v17 = *(void *)(v12 + 40);
      sub_22B2376D0(v11, v12);
      if ((*(_DWORD *)v17 & 0xFFFFFFFC) != 4) {
        goto LABEL_9;
      }
      int v18 = *(unsigned __int8 *)(v16 + 16);
      if (v18 == 62 && v16 != 0)
      {
        BOOL v22 = *(uint64_t **)(a1 + 2192);
        if (!v22) {
LABEL_452:
        }
          abort();
        unsigned int v23 = *(_DWORD *)(*(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 32);
        while (1)
        {
          while (1)
          {
            unsigned int v24 = *((_DWORD *)v22 + 8);
            if (v23 >= v24) {
              break;
            }
            BOOL v22 = (uint64_t *)*v22;
            if (!v22) {
              goto LABEL_452;
            }
          }
          if (v24 >= v23) {
            break;
          }
          BOOL v22 = (uint64_t *)v22[1];
          if (!v22) {
            goto LABEL_452;
          }
        }
        uint64_t v25 = v22[5];
        sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v16);
        if (*(_DWORD *)v17 == 7)
        {
          *(void *)&long long v330 = 0;
          sub_22B1E33F4(*(int **)(v25 + 48), v16, (unint64_t *)&v330, v327);
          uint64_t v26 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
          char v27 = (char *)v16;
          uint64_t v28 = (char *)v330;
          *(void *)uint64_t v327 = &v327[16];
          *(void *)&v327[8] = 0x800000000;
          sub_22B236C80((uint64_t)v327, &v27[-32 * v26 + 32], (char *)v330);
          sub_22B1E3C44(&v324, v17, v327);
          uint64_t v29 = v28;
          uint64_t v30 = (llvm::Instruction *)v27;
          sub_22B236C80((uint64_t)&v324, v29, v27);
          uint64_t v31 = a1 + *(void *)(*(void *)a1 - 24);
          int v32 = *(uint64_t **)(v25 + 104);
          LOWORD(v320) = 257;
          sub_22B229F08(v31, v32, (uint64_t **)v324.__r_.__value_.__l.__data_, LODWORD(v324.__r_.__value_.__r.__words[1]), (uint64_t)v319);
          if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
            free(v324.__r_.__value_.__l.__data_);
          }
          if (*(unsigned char **)v327 != &v327[16]) {
            free(*(void **)v327);
          }
          uint64_t v33 = "constant_gep";
        }
        else
        {
          *(void *)uint64_t v319 = &v319[16];
          *(void *)&v319[8] = 0x400000000;
          uint64_t v36 = (char *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
          *(void *)uint64_t v327 = &v327[16];
          *(void *)&v327[8] = 0x800000000;
          sub_22B236C80((uint64_t)v327, v36, (char *)v16);
          int v37 = *(_DWORD *)v17;
          uint64_t v306 = v25;
          char v302 = (uint64_t *)v16;
          if (*(_DWORD *)v17 == 6)
          {
            uint64_t v69 = *(void *)(v296 + *(void *)(*(void *)a1 - 24));
            v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321.__r_.__value_.__r.__words[2];
            v321.__r_.__value_.__l.__size_ = 0x300000000;
            sub_22B1E0428((uint64_t)&v321, 0);
            if (*(unsigned char *)(v69 + 1646)) {
              sub_22B1E0428((uint64_t)&v321, 1);
            }
            sub_22B1E0428((uint64_t)&v321, 2);
            uint64_t v71 = (std::string *)v321.__r_.__value_.__r.__words[0];
            if (LODWORD(v321.__r_.__value_.__r.__words[1]))
            {
              std::string::size_type v72 = v321.__r_.__value_.__r.__words[0] + 4 * LODWORD(v321.__r_.__value_.__r.__words[1]);
              do
              {
                uint64_t v73 = *(void *)(*(void *)a1 - 24);
                uint64_t v74 = *(uint64_t **)(v25 + 104);
                BOOL v75 = LODWORD(v71->__r_.__value_.__l.__data_) != 1;
                if (LODWORD(v71->__r_.__value_.__l.__data_) == 2) {
                  BOOL v75 = 1;
                }
                if (LODWORD(v71->__r_.__value_.__l.__data_)) {
                  BOOL v76 = v75;
                }
                else {
                  BOOL v76 = 0;
                }
                v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324.__r_.__value_.__r.__words[2];
                v324.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v17 + 104)) {
                  sub_22B1E0358((uint64_t)&v324, v17 + 96);
                }
                uint64_t v77 = *(unsigned int *)(v17 + 184);
                if (v77)
                {
                  int v78 = *(unsigned int **)(v17 + 176);
                  uint64_t v79 = &v78[2 * v77];
                  do
                  {
                    uint64_t v80 = *v78;
                    uint64_t v81 = v78[1];
                    v78 += 2;
                    *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * v81) = *(void *)(*(void *)v327 + 8 * v80);
                  }
                  while (v78 != v79);
                }
                uint64_t v82 = a1 + v73;
                uint64_t v83 = (llvm::Type **)(a1 + v73 + 8);
                llvm::Type::getInt32Ty(v83[8], v70);
                *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * LODWORD(v324.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if (v76)
                {
                  uint64_t v85 = sub_22B1E391C(v17, v83, v327);
                  uint64_t v86 = LODWORD(v324.__r_.__value_.__r.__words[1]);
                  *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * LODWORD(v324.__r_.__value_.__r.__words[1]) - 8) = v85;
                }
                else
                {
                  llvm::Type::getInt32Ty(v83[8], v84);
                  *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * LODWORD(v324.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  uint64_t v87 = sub_22B1E391C(v17, v83, v327);
                  sub_22B1D6788((uint64_t)&v324, v87);
                  uint64_t v86 = LODWORD(v324.__r_.__value_.__r.__words[1]);
                }
                LOWORD(v332) = 257;
                uint64_t v88 = sub_22B229F08(v82, v74, (uint64_t **)v324.__r_.__value_.__l.__data_, v86, (uint64_t)&v330);
                sub_22B1D6788((uint64_t)v319, v88);
                if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
                  free(v324.__r_.__value_.__l.__data_);
                }
                uint64_t v71 = (std::string *)((char *)v71 + 4);
                uint64_t v25 = v306;
              }
              while (v71 != (std::string *)v72);
              uint64_t v71 = (std::string *)v321.__r_.__value_.__r.__words[0];
            }
            if (v71 != (std::string *)&v321.__r_.__value_.__r.__words[2]) {
              free(v71);
            }
            uint64_t v33 = "sampler_gep";
          }
          else if (v37 == 5)
          {
            uint64_t v38 = *(void *)(v296 + *(void *)(*(void *)a1 - 24));
            v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321.__r_.__value_.__r.__words[2];
            v321.__r_.__value_.__l.__size_ = 0x400000000;
            sub_22B1E0428((uint64_t)&v321, 0);
            if (*(unsigned char *)(v38 + 1645)) {
              sub_22B1E0428((uint64_t)&v321, 1);
            }
            sub_22B1E0428((uint64_t)&v321, 2);
            sub_22B1E0428((uint64_t)&v321, 3);
            uint64_t v40 = (std::string *)v321.__r_.__value_.__r.__words[0];
            if (LODWORD(v321.__r_.__value_.__r.__words[1]))
            {
              std::string::size_type v304 = v321.__r_.__value_.__r.__words[0] + 4 * LODWORD(v321.__r_.__value_.__r.__words[1]);
              do
              {
                uint64_t v41 = *(void *)(*(void *)a1 - 24);
                BOOL v42 = *(uint64_t **)(v25 + 104);
                switch(LODWORD(v40->__r_.__value_.__l.__data_))
                {
                  case 0:
                    char v43 = 0;
                    break;
                  case 1:
                    char v43 = 0;
                    break;
                  case 2:
                    char v43 = 1;
                    break;
                  case 3:
                    char v43 = 1;
                    break;
                  default:
                    char v43 = 1;
                    break;
                }
                v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324.__r_.__value_.__r.__words[2];
                v324.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v17 + 104)) {
                  sub_22B1E0358((uint64_t)&v324, v17 + 96);
                }
                uint64_t v44 = *(unsigned int *)(v17 + 184);
                if (v44)
                {
                  uint64_t v45 = *(unsigned int **)(v17 + 176);
                  uint64_t v46 = &v45[2 * v44];
                  do
                  {
                    uint64_t v47 = *v45;
                    uint64_t v48 = v45[1];
                    v45 += 2;
                    *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * v48) = *(void *)(*(void *)v327 + 8 * v47);
                  }
                  while (v45 != v46);
                }
                uint64_t v49 = a1 + v41;
                uint64_t v50 = (llvm::Type **)(a1 + v41 + 8);
                llvm::Type::getInt32Ty(v50[8], v39);
                *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * LODWORD(v324.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if (v43)
                {
                  uint64_t v52 = sub_22B1E391C(v17, v50, v327);
                  uint64_t v53 = LODWORD(v324.__r_.__value_.__r.__words[1]);
                  *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * LODWORD(v324.__r_.__value_.__r.__words[1]) - 8) = v52;
                }
                else
                {
                  llvm::Type::getInt32Ty(v50[8], v51);
                  *(void *)(v324.__r_.__value_.__r.__words[0] + 8 * LODWORD(v324.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  uint64_t v54 = sub_22B1E391C(v17, v50, v327);
                  sub_22B1D6788((uint64_t)&v324, v54);
                  uint64_t v53 = LODWORD(v324.__r_.__value_.__r.__words[1]);
                }
                uint64_t v25 = v306;
                LOWORD(v332) = 257;
                uint64_t v55 = sub_22B229F08(v49, v42, (uint64_t **)v324.__r_.__value_.__l.__data_, v53, (uint64_t)&v330);
                sub_22B1D6788((uint64_t)v319, v55);
                if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
                  free(v324.__r_.__value_.__l.__data_);
                }
                uint64_t v40 = (std::string *)((char *)v40 + 4);
              }
              while (v40 != (std::string *)v304);
              uint64_t v40 = (std::string *)v321.__r_.__value_.__r.__words[0];
            }
            if (v40 != (std::string *)&v321.__r_.__value_.__r.__words[2]) {
              free(v40);
            }
            uint64_t v33 = "texture_gep";
          }
          else
          {
            if (v37 == 4) {
              uint64_t v89 = v17;
            }
            else {
              uint64_t v89 = 0;
            }
            uint64_t v90 = a1 + *(void *)(*(void *)a1 - 24);
            uint64_t v91 = *(uint64_t **)(v25 + 104);
            sub_22B1E3A38(&v324, v89, (llvm::Type **)(v90 + 8), v327);
            LOWORD(v332) = 257;
            uint64_t v92 = sub_22B229F08(v90, v91, (uint64_t **)v324.__r_.__value_.__l.__data_, LODWORD(v324.__r_.__value_.__r.__words[1]), (uint64_t)&v330);
            sub_22B1D6788((uint64_t)v319, v92);
            if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
              free(v324.__r_.__value_.__l.__data_);
            }
            uint64_t v33 = "buffer_gep";
          }
          uint64_t v93 = a1 + *(void *)(*(void *)a1 - 24);
          BOOL v94 = *(uint64_t **)(v25 + 104);
          *(void *)&long long v330 = *(void *)(**(void **)v319
                                       - 32 * (*(_DWORD *)(**(void **)v319 + 20) & 0x7FFFFFF)
                                       + 32);
          *((void *)&v330 + 1) = llvm::ConstantInt::get();
          *(void *)&long long v331 = llvm::ConstantInt::get();
          __int16 v326 = 257;
          uint64_t v95 = sub_22B229F08(v93, v94, (uint64_t **)&v330, 3, (uint64_t)&v324);
          uint64_t v96 = llvm::ConstantInt::get();
          sub_22B1D6788((uint64_t)v319, v95);
          sub_22B1D6788((uint64_t)v319, v96);
          v324.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324.__r_.__value_.__r.__words[2];
          v324.__r_.__value_.__l.__size_ = 0x400000000;
          if (*(_DWORD *)&v319[8])
          {
            uint64_t v97 = *(uint64_t ***)v319;
            uint64_t v98 = 8 * *(unsigned int *)&v319[8];
            do
            {
              uint64_t v99 = *v97++;
              sub_22B1D6788((uint64_t)&v324, *v99);
              v98 -= 8;
            }
            while (v98);
          }
          uint64_t v100 = (llvm::Type *)llvm::StructType::get();
          BOOL v101 = (llvm::Type **)llvm::UndefValue::get();
          LODWORD(v321.__r_.__value_.__l.__data_) = 0;
          if (*(_DWORD *)&v319[8])
          {
            unsigned int v102 = 0;
            do
            {
              uint64_t v103 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              uint64_t v104 = *(void *)(*(void *)v319 + 8 * v102);
              LOWORD(v332) = 257;
              BOOL v101 = (llvm::Type **)sub_22B1D6D44(v103, (uint64_t)v101, v104, (uint64_t)&v321, 1, (uint64_t)&v330);
              unsigned int v102 = LODWORD(v321.__r_.__value_.__l.__data_) + 1;
              LODWORD(v321.__r_.__value_.__l.__data_) = v102;
            }
            while (*(_DWORD *)&v319[8] > v102);
          }
          uint64_t v105 = sub_22B2434C8(a1 + *(void *)(*(void *)a1 - 24), v100);
          sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v101, v105, 0);
          sub_22B237B00((void *)a1, v105, *v302);
          if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
            free(v324.__r_.__value_.__l.__data_);
          }
          char v11 = (int32x2_t *)(a1 + 2208);
          if (*(unsigned char **)v327 != &v327[16]) {
            free(*(void **)v327);
          }
          uint64_t v30 = (llvm::Instruction *)v302;
          if (*(unsigned char **)v319 != &v319[16]) {
            free(*(void **)v319);
          }
        }
        char v106 = 1;
        BYTE1(v329) = 1;
        if (*v33)
        {
          *(void *)uint64_t v327 = v33;
          char v106 = 3;
        }
        LOBYTE(v329) = v106;
        llvm::Value::setName();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v30);
        goto LABEL_151;
      }
      if (v18 == 60 && v16 != 0)
      {
        sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v16);
        *(void *)uint64_t v327 = &v327[16];
        *(void *)&v327[8] = 0x400000000;
        if (*(_DWORD *)v17 == 6)
        {
          sub_22B1E3AE0(&v324, *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 336));
          sub_22B1E070C((uint64_t)v327, (uint64_t)&v324);
          if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
            free(v324.__r_.__value_.__l.__data_);
          }
          BOOL v34 = (uint64_t *)v16;
          sub_22B237BA0((void *)a1, (uint64_t *)v16, (uint64_t)v327);
          uint64_t v35 = "sampler_load";
        }
        else if (*(_DWORD *)v17 == 5)
        {
          sub_22B1E3B84(&v324, *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 336));
          sub_22B1E070C((uint64_t)v327, (uint64_t)&v324);
          if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
            free(v324.__r_.__value_.__l.__data_);
          }
          BOOL v34 = (uint64_t *)v16;
          sub_22B237BA0((void *)a1, (uint64_t *)v16, (uint64_t)v327);
          uint64_t v35 = "texture_load";
        }
        else
        {
          BOOL v34 = (uint64_t *)v16;
          uint64_t v56 = *(void *)(v16 - 32);
          v324.__r_.__value_.__r.__words[0] = llvm::PointerType::get();
          llvm::StructType::get();
          uint64_t v57 = llvm::PointerType::get();
          unsigned int v58 = (uint64_t *)sub_22B237B00((void *)a1, v56, v57);
          uint64_t v59 = a1 + *(void *)(*(void *)a1 - 24);
          *(void *)uint64_t v319 = llvm::ConstantInt::get();
          *(void *)&v319[8] = llvm::ConstantInt::get();
          __int16 v326 = 257;
          uint64_t v60 = sub_22B229F08(v59, v58, (uint64_t **)v319, 2, (uint64_t)&v324);
          uint64_t v61 = *(void *)(*(void *)a1 - 24);
          __int16 v326 = 257;
          uint64_t v62 = sub_22B1D4240((uint64_t *)(v295 + v61), **(llvm::Type ***)(*(void *)v60 + 16), v60, 0, (uint64_t)&v324);
          uint64_t v63 = *(void *)(*(void *)a1 - 24);
          __int16 v326 = 257;
          uint64_t v64 = sub_22B1D4240((uint64_t *)(v295 + v63), **(llvm::Type ***)(*(void *)v62 + 16), v62, 0, (uint64_t)&v324);
          uint64_t v65 = *(void *)(*(void *)a1 - 24) + a1 + 8;
          uint64_t v66 = *v34;
          __int16 v326 = 257;
          sub_22B1D7384(v65, 48, v64, v66, (uint64_t)&v324);
          uint64_t v35 = "buffer_load";
        }
        char v67 = 1;
        HIBYTE(v326) = 1;
        if (*v35)
        {
          v324.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
          char v67 = 3;
        }
        LOBYTE(v326) = v67;
        llvm::Value::setName();
        llvm::Value::replaceAllUsesWith();
        uint64_t v68 = (llvm::Instruction *)v34;
        goto LABEL_149;
      }
      if (v18 != 61 || v16 == 0) {
        goto LABEL_9;
      }
      sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v16);
      *(void *)uint64_t v327 = &v327[16];
      *(void *)&v327[8] = 0x400000000;
      if (*(_DWORD *)v17 == 6) {
        break;
      }
      if (*(_DWORD *)v17 == 5)
      {
        sub_22B1E3B84(&v324, *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 336));
LABEL_144:
        sub_22B1E070C((uint64_t)v327, (uint64_t)&v324);
        if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
          free(v324.__r_.__value_.__l.__data_);
        }
        sub_22B23777C((void *)a1, v16, (uint64_t)v327);
        goto LABEL_148;
      }
      uint64_t v107 = *(void *)(*(void *)a1 - 24);
      uint64_t v108 = *(void *)(v16 - 64);
      uint64_t v109 = *(void *)(a1 + 200 + v107);
      __int16 v326 = 257;
      uint64_t v110 = (llvm::Type **)sub_22B1D7384(v107 + a1 + 8, 47, v108, v109, (uint64_t)&v324);
      v324.__r_.__value_.__r.__words[0] = llvm::PointerType::get();
      v324.__r_.__value_.__l.__size_ = llvm::PointerType::get();
      v324.__r_.__value_.__r.__words[2] = *(void *)(a1 + 192 + *(void *)(*(void *)a1 - 24));
      llvm::StructType::get();
      unint64_t v111 = v16;
      uint64_t v112 = *(void *)(v16 - 32);
      uint64_t v113 = llvm::PointerType::get();
      uint64_t v114 = sub_22B237B00((void *)a1, v112, v113);
      uint64_t v115 = *(void *)(*(void *)a1 - 24);
      __int16 v326 = 257;
      uint64_t v116 = sub_22B1D4240((uint64_t *)(v295 + v115), **(llvm::Type ***)(*(void *)v114 + 16), v114, 0, (uint64_t)&v324);
      uint64_t v117 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      *(_DWORD *)uint64_t v319 = 0;
      __int16 v326 = 257;
      uint64_t v118 = sub_22B1D7940(v117, v116, (uint64_t)v319, 1, (uint64_t)&v324);
      uint64_t v119 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      *(_DWORD *)uint64_t v319 = 1;
      __int16 v326 = 257;
      uint64_t v120 = sub_22B1D7940(v119, v116, (uint64_t)v319, 1, (uint64_t)&v324);
      uint64_t v121 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      *(_DWORD *)uint64_t v319 = 2;
      __int16 v326 = 257;
      uint64_t v122 = sub_22B1D7940(v121, v116, (uint64_t)v319, 1, (uint64_t)&v324);
      sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v110, v118, 0);
      uint64_t v123 = (llvm::Type **)v122;
      unint64_t v16 = v111;
      sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v123, v120, 0);
      char v11 = (int32x2_t *)(a1 + 2208);
LABEL_148:
      uint64_t v68 = (llvm::Instruction *)v16;
LABEL_149:
      llvm::Instruction::eraseFromParent(v68);
      if (*(unsigned char **)v327 != &v327[16]) {
        free(*(void **)v327);
      }
LABEL_151:
      if (!*(_DWORD *)(a1 + 2216)) {
        goto LABEL_152;
      }
    }
    sub_22B1E3AE0(&v324, *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344), *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 336));
    goto LABEL_144;
  }
LABEL_152:
  uint64_t v124 = *(unsigned int *)(a1 + 2160);
  if (v124)
  {
    unint64_t v125 = *(void *)(a1 + 2152);
    BOOL v126 = (void *)(v125 + 8 * v124);
    uint64_t v127 = a1 + 408;
    uint64_t v298 = a1 + 8;
    LOBYTE(v5) = 1;
    char v294 = v126;
    while (1)
    {
      if (v5)
      {
        uint64_t v128 = *(void *)v125;
        memset(v319, 0, sizeof(v319));
        int v320 = 1065353216;
        long long v330 = 0u;
        long long v331 = 0u;
        float v332 = 1.0;
        unsigned int __val = *(_DWORD *)(v128 + 40);
        int v307 = *(unsigned __int8 *)(*(void *)(a1 + 344 + *(void *)(*(void *)a1 - 24)) + 1678);
        v317[0] = a1;
        v317[1] = v319;
        v317[2] = &__val;
        uint64_t v129 = *(uint64_t **)(v128 + 8);
        uint64_t v130 = v129[1];
        if (v130)
        {
          uint64_t v301 = v128;
          char v305 = *(uint64_t **)(v128 + 8);
          while (1)
          {
            unint64_t v131 = *(llvm::Instruction **)(v130 + 24);
            uint64_t v132 = *(void *)(v130 + 8);
            v315[0] = 4;
            v315[1] = 0;
            uint64_t v316 = v131;
            if (v131 != (llvm::Instruction *)-8192 && v131 != (llvm::Instruction *)-4096 && v131 != 0) {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v315);
            }
            uint64_t v308 = v132;
            if (sub_22B2365A8(*(unsigned char *)(a1 + 37), (uint64_t)v131, (uint64_t)v129))
            {
              sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, (uint64_t)v131);
              uint64_t v134 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              uint64_t v135 = *(void *)(v128 + 104);
              uint64_t v136 = *v129;
              LOWORD(v329) = 257;
              uint64_t v137 = sub_22B1D7384(v134, 49, v135, v136, (uint64_t)v327);
              uint64_t v138 = (uint64_t *)((char *)v131 - 64);
              if (*((void *)v131 - 8))
              {
                **((void **)v131 - 6) = *((void *)v131 - 7);
                uint64_t v139 = *((void *)v131 - 7);
                if (v139) {
                  *(void *)(v139 + 16) = *((void *)v131 - 6);
                }
              }
              *uint64_t v138 = v137;
              if (v137)
              {
                uint64_t v142 = *(void *)(v137 + 8);
                long long v140 = (uint64_t **)(v137 + 8);
                uint64_t v141 = v142;
                *((void *)v131 - 7) = v142;
                if (v142) {
                  *(void *)(v141 + 16) = (char *)v131 - 56;
                }
                *((void *)v131 - 6) = v140;
                *long long v140 = v138;
              }
              int v143 = 3;
              goto LABEL_389;
            }
            uint64_t v144 = (uint64_t)v316;
            if (!v316 || *((unsigned char *)v316 + 16) != 62) {
              break;
            }
            char v314 = 0;
            char v313 = 0;
            unint64_t v145 = sub_22B1E33F4(*(int **)(v128 + 48), (unint64_t)v316, (unint64_t *)&v314, &v313);
            int v146 = *v145;
            if ((*v145 & 0xFFFFFFFC) != 4)
            {
              if (!v307) {
                goto LABEL_386;
              }
              std::to_string(&v321, __val);
              uint64_t v165 = std::string::insert(&v321, 0, "buffer(");
              std::string::size_type v166 = v165->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v324.__r_.__value_.__l.__data_ = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
              v324.__r_.__value_.__r.__words[2] = v166;
              v165->__r_.__value_.__l.__size_ = 0;
              v165->__r_.__value_.__r.__words[2] = 0;
              v165->__r_.__value_.__r.__words[0] = 0;
              char v167 = std::string::append(&v324, "): Unable to map argument buffer access to resource");
              std::string::size_type v168 = v167->__r_.__value_.__r.__words[2];
              *(_OWORD *)uint64_t v327 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
              *(void *)&v327[16] = v168;
              v167->__r_.__value_.__l.__size_ = 0;
              v167->__r_.__value_.__r.__words[2] = 0;
              v167->__r_.__value_.__r.__words[0] = 0;
              if (v327[23] >= 0) {
                int v169 = v327;
              }
              else {
                int v169 = *(const std::string::value_type **)v327;
              }
              if (v327[23] >= 0) {
                std::string::size_type v170 = v327[23];
              }
              else {
                std::string::size_type v170 = *(void *)&v327[8];
              }
              std::string::append((std::string *)(v127 + *(void *)(*(void *)a1 - 24)), v169, v170);
              int v164 = v327[23];
              uint64_t v128 = v301;
LABEL_199:
              uint64_t v129 = v305;
              if (v164 < 0) {
                goto LABEL_200;
              }
              goto LABEL_201;
            }
            unint64_t v147 = (unint64_t)v145;
            BOOL v148 = v307 != 0;
            if (!v313) {
              BOOL v148 = 0;
            }
            long long v149 = v314;
            if (v148 && v314 == (char *)v144 && sub_22B236608((void *)a1, (void *)v144))
            {
              sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v144);
              uint64_t v128 = v301;
              uint64_t v150 = *(uint64_t **)(v301 + 104);
              uint64_t v151 = *v150;
              if ((*(_DWORD *)(*v150 + 8) & 0xFE) == 0x12) {
                uint64_t v151 = **(void **)(v151 + 16);
              }
              uint64_t v152 = **(void **)(v151 + 16);
              uint64_t v153 = *(uint64_t **)(v144 - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF) + 32);
              uint64_t v154 = v298 + *(void *)(*(void *)a1 - 24);
              LOWORD(v329) = 257;
              uint64_t v155 = sub_22B1D757C(v154, v152, v150, v153, (uint64_t)v327);
              uint64_t v156 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              uint64_t v157 = *(void *)v144;
              LOWORD(v329) = 257;
              sub_22B1D7384(v156, 49, v155, v157, (uint64_t)v327);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v144);
LABEL_206:
              int v143 = 3;
LABEL_388:
              uint64_t v129 = v305;
              goto LABEL_389;
            }
            sub_22B1E37FC(v147, v144);
            uint64_t v300 = v171;
            if (!v171)
            {
              if (v146 != 4)
              {
                if (v146 != 7)
                {
                  uint64_t v129 = v305;
                  if (!v307)
                  {
                    int v143 = 3;
                    goto LABEL_422;
                  }
                  std::to_string(&v321, __val);
                  uint64_t v262 = std::string::insert(&v321, 0, "buffer(");
                  std::string::size_type v263 = v262->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v324.__r_.__value_.__l.__data_ = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
                  v324.__r_.__value_.__r.__words[2] = v263;
                  v262->__r_.__value_.__l.__size_ = 0;
                  v262->__r_.__value_.__r.__words[2] = 0;
                  v262->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v264 = std::string::append(&v324, "): Argument buffer accessed with non-zero array index");
                  std::string::size_type v265 = v264->__r_.__value_.__r.__words[2];
                  *(_OWORD *)uint64_t v327 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
                  *(void *)&v327[16] = v265;
                  v264->__r_.__value_.__l.__size_ = 0;
                  v264->__r_.__value_.__r.__words[2] = 0;
                  v264->__r_.__value_.__r.__words[0] = 0;
                  if (v327[23] >= 0) {
                    uint64_t v266 = v327;
                  }
                  else {
                    uint64_t v266 = *(const std::string::value_type **)v327;
                  }
                  if (v327[23] >= 0) {
                    std::string::size_type v267 = v327[23];
                  }
                  else {
                    std::string::size_type v267 = *(void *)&v327[8];
                  }
                  std::string::append((std::string *)(v127 + *(void *)(*(void *)a1 - 24)), v266, v267);
                  uint64_t v128 = v301;
                  if ((v327[23] & 0x80000000) != 0) {
LABEL_200:
                  }
                    operator delete(*(void **)v327);
LABEL_201:
                  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v324.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v321.__r_.__value_.__l.__data_);
                  }
                  int v143 = 1;
                  goto LABEL_389;
                }
LABEL_224:
                if (!v307) {
                  goto LABEL_386;
                }
                uint64_t v179 = (char *)(v144 - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF) + 32);
                *(void *)uint64_t v327 = &v327[16];
                *(void *)&v327[8] = 0x800000000;
                sub_22B236C80((uint64_t)v327, v179, v149);
                sub_22B1E3C44(&v324, v147, v327);
                sub_22B236C80((uint64_t)&v324, v149, (char *)v144);
                sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v144);
                uint64_t v180 = a1 + *(void *)(*(void *)a1 - 24);
                uint64_t v181 = *(uint64_t **)(v301 + 104);
                __int16 v323 = 257;
                sub_22B229F08(v180, v181, (uint64_t **)v324.__r_.__value_.__l.__data_, LODWORD(v324.__r_.__value_.__r.__words[1]), (uint64_t)&v321);
                llvm::Value::replaceAllUsesWith();
                llvm::Value::takeName();
                if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
                  free(v324.__r_.__value_.__l.__data_);
                }
                if (*(unsigned char **)v327 != &v327[16]) {
                  free(*(void **)v327);
                }
                goto LABEL_417;
              }
LABEL_229:
              if (!v307)
              {
LABEL_386:
                int v143 = 3;
LABEL_387:
                uint64_t v128 = v301;
                goto LABEL_388;
              }
              uint64_t v182 = *(void *)(v144 + 8);
              if (!v182) {
                goto LABEL_417;
              }
              uint64_t v297 = v144 + 32;
              unint64_t v183 = 0x9DDFEA08EB382D69 * (((8 * v147) + 8) ^ HIDWORD(v147));
              unint64_t v184 = 0x9DDFEA08EB382D69 * (HIDWORD(v147) ^ (v183 >> 47) ^ v183);
              unint64_t v299 = 0x9DDFEA08EB382D69 * (v184 ^ (v184 >> 47));
              uint64_t v293 = (void *)v125;
              while (2)
              {
                int v185 = *(llvm::Instruction **)(v182 + 24);
                uint64_t v182 = *(void *)(v182 + 8);
                v311[0] = 4;
                v311[1] = 0;
                char v312 = v185;
                char v186 = v185;
                if (v185 != (llvm::Instruction *)-8192)
                {
                  BOOL v187 = v185 == (llvm::Instruction *)-4096 || v185 == 0;
                  char v186 = v185;
                  if (!v187)
                  {
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v311);
                    char v186 = v312;
                  }
                }
                int v188 = *((unsigned __int8 *)v186 + 16);
                if (v188 == 61) {
                  goto LABEL_369;
                }
                if (v188 == 60)
                {
                  if (!v300) {
                    goto LABEL_263;
                  }
                  if (llvm::GetElementPtrInst::hasAllConstantIndices((llvm::GetElementPtrInst *)v144))
                  {
                    uint64_t v189 = v182;
                    uint64_t v190 = *(unsigned int *)(v147 + 224);
                    uint64_t v191 = *(unsigned int *)(v147 + 16);
                    if (v191)
                    {
                      uint64_t v192 = *(void *)(v147 + 8);
                      uint64_t v193 = 16 * v191;
                      do
                      {
                        uint64_t v194 = *(void *)(v297
                                         - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF)
                                         + 32 * *(unsigned int *)(*(void *)v192 + 24));
                        uint64_t v195 = (void *)(v194 + 24);
                        if (*(_DWORD *)(v194 + 32) >= 0x41u) {
                          uint64_t v195 = (void *)*v195;
                        }
                        uint64_t v190 = (v190 + *(_DWORD *)(*(void *)v192 + 20) * *(_DWORD *)v195);
                        v192 += 16;
                        v193 -= 16;
                      }
                      while (v193);
                    }
                    if (*(unsigned char *)v301) {
                      (*(void (**)(uint64_t, llvm::Instruction *, uint64_t, void))(*(void *)a1 + 216))(a1, v312, v190, __val);
                    }
                    uint64_t v196 = *(void *)(*(void *)(a1 + 160) + 80);
                    if (v196) {
                      uint64_t v197 = v196 - 24;
                    }
                    else {
                      uint64_t v197 = 0;
                    }
                    uint64_t v198 = *(void *)(v197 + 40);
                    if (v198) {
                      uint64_t v199 = v198 - 24;
                    }
                    else {
                      uint64_t v199 = 0;
                    }
                    sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v199);
                    if (v312)
                    {
                      sub_22B2366B0((uint64_t)v317, v190, v147);
                      llvm::Value::replaceAllUsesWith();
                      uint64_t v182 = v189;
                      break;
                    }
                    char v186 = 0;
                    uint64_t v182 = v189;
LABEL_369:
                    if (v186 != (llvm::Instruction *)-8192 && v186 != (llvm::Instruction *)-4096 && v186 != 0) {
                      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v311);
                    }
                    if (!v182) {
                      goto LABEL_417;
                    }
                    continue;
                  }
                  long long v200 = &unk_22B270008;
                  if (*(unsigned char *)(v147 + 268)) {
                    long long v200 = (_DWORD *)(v147 + 264);
                  }
                  if (*v200 == -1)
                  {
LABEL_263:
                    uint64_t v203 = v182;
                    sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, (uint64_t)v185);
                    uint64_t v204 = v314;
                    uint64_t v205 = (char *)(v297 - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF));
                    *(void *)uint64_t v327 = &v327[16];
                    *(void *)&v327[8] = 0x800000000;
                    sub_22B236C80((uint64_t)v327, v205, v314);
                    sub_22B1E3A38(&v324, v147, (llvm::Type **)(*(void *)(*(void *)a1 - 24) + a1 + 8), v327);
                    sub_22B236C80((uint64_t)&v324, v204, (char *)v144);
                    uint64_t v206 = a1 + *(void *)(*(void *)a1 - 24);
                    uint64_t v207 = *(uint64_t **)(v301 + 104);
                    __int16 v323 = 257;
                    uint64_t v208 = sub_22B229F08(v206, v207, (uint64_t **)v324.__r_.__value_.__l.__data_, LODWORD(v324.__r_.__value_.__r.__words[1]), (uint64_t)&v321);
                    uint64_t v209 = *(void *)(*(void *)a1 - 24);
                    __int16 v323 = 257;
                    uint64_t v210 = sub_22B1D4240((uint64_t *)(v298 + v209), **(llvm::Type ***)(*(void *)v208 + 16), v208, 0, (uint64_t)&v321);
                    uint64_t v211 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                    uint64_t v212 = *(void *)v185;
                    __int16 v323 = 257;
                    sub_22B1D7384(v211, 48, v210, v212, (uint64_t)&v321);
                    llvm::Value::replaceAllUsesWith();
                    if ((std::string::size_type *)v324.__r_.__value_.__l.__data_ != &v324.__r_.__value_.__r.__words[2]) {
                      free(v324.__r_.__value_.__l.__data_);
                    }
                    uint64_t v182 = v203;
                    if (*(unsigned char **)v327 != &v327[16]) {
                      free(*(void **)v327);
                    }
                  }
                  else
                  {
                    uint64_t v291 = v182;
                    if (*((void *)&v330 + 1))
                    {
                      uint8x8_t v201 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v330 + 8));
                      v201.i16[0] = vaddlv_u8(v201);
                      if (v201.u32[0] > 1uLL)
                      {
                        unint64_t v202 = v299;
                        if (v299 >= *((void *)&v330 + 1)) {
                          unint64_t v202 = v299 % *((void *)&v330 + 1);
                        }
                      }
                      else
                      {
                        unint64_t v202 = v299 & (*((void *)&v330 + 1) - 1);
                      }
                      uint64_t v213 = *(void ***)(v330 + 8 * v202);
                      if (v213)
                      {
                        for (uint64_t i = *v213; i; uint64_t i = (void *)*i)
                        {
                          unint64_t v215 = i[1];
                          if (v215 == v299)
                          {
                            if (i[2] == v147) {
                              goto LABEL_366;
                            }
                          }
                          else
                          {
                            if (v201.u32[0] > 1uLL)
                            {
                              if (v215 >= *((void *)&v330 + 1)) {
                                v215 %= *((void *)&v330 + 1);
                              }
                            }
                            else
                            {
                              v215 &= *((void *)&v330 + 1) - 1;
                            }
                            if (v215 != v202) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    uint64_t v216 = *(void *)(*(void *)(a1 + 160) + 80);
                    if (v216) {
                      uint64_t v217 = v216 - 24;
                    }
                    else {
                      uint64_t v217 = 0;
                    }
                    uint64_t v218 = *(void *)(v217 + 40);
                    if (v218) {
                      uint64_t v219 = v218 - 24;
                    }
                    else {
                      uint64_t v219 = 0;
                    }
                    sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v219);
                    uint64_t v220 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)(v147 + 256), (llvm::Type *)*(unsigned int *)(v147 + 232));
                    char v303 = (uint64_t *)sub_22B2434C8(a1 + *(void *)(*(void *)a1 - 24), v220);
                    unint64_t v221 = *((void *)&v330 + 1);
                    if (*((void *)&v330 + 1))
                    {
                      uint8x8_t v222 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v330 + 8));
                      v222.i16[0] = vaddlv_u8(v222);
                      if (v222.u32[0] > 1uLL)
                      {
                        unint64_t v125 = v299;
                        if (v299 >= *((void *)&v330 + 1)) {
                          unint64_t v125 = v299 % *((void *)&v330 + 1);
                        }
                      }
                      else
                      {
                        unint64_t v125 = v299 & (*((void *)&v330 + 1) - 1);
                      }
                      uint64_t v223 = *(void ***)(v330 + 8 * v125);
                      if (v223)
                      {
                        for (uint64_t i = *v223; i; uint64_t i = (void *)*i)
                        {
                          unint64_t v224 = i[1];
                          if (v224 == v299)
                          {
                            if (i[2] == v147) {
                              goto LABEL_359;
                            }
                          }
                          else
                          {
                            if (v222.u32[0] > 1uLL)
                            {
                              if (v224 >= *((void *)&v330 + 1)) {
                                v224 %= *((void *)&v330 + 1);
                              }
                            }
                            else
                            {
                              v224 &= *((void *)&v330 + 1) - 1;
                            }
                            if (v224 != v125) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    *(void *)&long long v225 = v147;
                    *((void *)&v225 + 1) = v303;
                    long long v290 = v225;
                    uint64_t i = operator new(0x20uLL);
                    void *i = 0;
                    i[1] = v299;
                    *((_OWORD *)i + 1) = v290;
                    float v226 = (float)(unint64_t)(*((void *)&v331 + 1) + 1);
                    if (!v221 || (float)(v332 * (float)v221) < v226)
                    {
                      BOOL v227 = (v221 & (v221 - 1)) != 0;
                      if (v221 < 3) {
                        BOOL v227 = 1;
                      }
                      unint64_t v228 = v227 | (2 * v221);
                      unint64_t v229 = vcvtps_u32_f32(v226 / v332);
                      if (v228 <= v229) {
                        int8x8_t prime = (int8x8_t)v229;
                      }
                      else {
                        int8x8_t prime = (int8x8_t)v228;
                      }
                      if (*(void *)&prime == 1)
                      {
                        int8x8_t prime = (int8x8_t)2;
                      }
                      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                      {
                        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                        unint64_t v221 = *((void *)&v330 + 1);
                      }
                      if (*(void *)&prime <= v221)
                      {
                        if (*(void *)&prime < v221)
                        {
                          unint64_t v237 = vcvtps_u32_f32((float)*((unint64_t *)&v331 + 1) / v332);
                          if (v221 < 3
                            || (uint8x8_t v238 = (uint8x8_t)vcnt_s8((int8x8_t)v221),
                                v238.i16[0] = vaddlv_u8(v238),
                                v238.u32[0] > 1uLL))
                          {
                            unint64_t v237 = std::__next_prime(v237);
                          }
                          else
                          {
                            uint64_t v239 = 1 << -(char)__clz(v237 - 1);
                            if (v237 >= 2) {
                              unint64_t v237 = v239;
                            }
                          }
                          if (*(void *)&prime <= v237) {
                            int8x8_t prime = (int8x8_t)v237;
                          }
                          if (*(void *)&prime >= v221)
                          {
                            unint64_t v221 = *((void *)&v330 + 1);
                          }
                          else
                          {
                            if (prime) {
                              goto LABEL_315;
                            }
                            uint64_t v261 = (void *)v330;
                            *(void *)&long long v330 = 0;
                            if (v261) {
                              operator delete(v261);
                            }
                            unint64_t v221 = 0;
                            *((void *)&v330 + 1) = 0;
                          }
                        }
                      }
                      else
                      {
LABEL_315:
                        if (*(void *)&prime >> 61) {
                          sub_22B1E33E4();
                        }
                        uint64_t v231 = operator new(8 * *(void *)&prime);
                        uint64_t v232 = (void *)v330;
                        *(void *)&long long v330 = v231;
                        if (v232) {
                          operator delete(v232);
                        }
                        uint64_t v233 = 0;
                        *((int8x8_t *)&v330 + 1) = prime;
                        do
                          *(void *)(v330 + 8 * v233++) = 0;
                        while (*(void *)&prime != v233);
                        int v234 = (void **)v331;
                        if ((void)v331)
                        {
                          unint64_t v235 = *(void *)(v331 + 8);
                          uint8x8_t v236 = (uint8x8_t)vcnt_s8(prime);
                          v236.i16[0] = vaddlv_u8(v236);
                          if (v236.u32[0] > 1uLL)
                          {
                            if (v235 >= *(void *)&prime) {
                              v235 %= *(void *)&prime;
                            }
                          }
                          else
                          {
                            v235 &= *(void *)&prime - 1;
                          }
                          *(void *)(v330 + 8 * v235) = &v331;
                          for (j = *v234; j; unint64_t v235 = v241)
                          {
                            unint64_t v241 = j[1];
                            if (v236.u32[0] > 1uLL)
                            {
                              if (v241 >= *(void *)&prime) {
                                v241 %= *(void *)&prime;
                              }
                            }
                            else
                            {
                              v241 &= *(void *)&prime - 1;
                            }
                            if (v241 != v235)
                            {
                              if (!*(void *)(v330 + 8 * v241))
                              {
                                *(void *)(v330 + 8 * v241) = v234;
                                goto LABEL_340;
                              }
                              *int v234 = (void *)*j;
                              *uint64_t j = **(void **)(v330 + 8 * v241);
                              **(void **)(v330 + 8 * v241) = j;
                              uint64_t j = v234;
                            }
                            unint64_t v241 = v235;
LABEL_340:
                            int v234 = (void **)j;
                            uint64_t j = (void *)*j;
                          }
                        }
                        unint64_t v221 = (unint64_t)prime;
                      }
                      if ((v221 & (v221 - 1)) != 0)
                      {
                        if (v299 >= v221) {
                          unint64_t v125 = v299 % v221;
                        }
                        else {
                          unint64_t v125 = v299;
                        }
                      }
                      else
                      {
                        unint64_t v125 = (v221 - 1) & v299;
                      }
                    }
                    uint64_t v242 = v330;
                    int v243 = *(void **)(v330 + 8 * v125);
                    if (v243)
                    {
                      void *i = *v243;
                      goto LABEL_357;
                    }
                    void *i = v331;
                    *(void *)&long long v331 = i;
                    *(void *)(v242 + 8 * v125) = &v331;
                    if (*i)
                    {
                      unint64_t v244 = *(void *)(*i + 8);
                      if ((v221 & (v221 - 1)) != 0)
                      {
                        if (v244 >= v221) {
                          v244 %= v221;
                        }
                      }
                      else
                      {
                        v244 &= v221 - 1;
                      }
                      int v243 = (void *)(v330 + 8 * v244);
LABEL_357:
                      *int v243 = i;
                    }
                    ++*((void *)&v331 + 1);
LABEL_359:
                    if (*(_DWORD *)(v147 + 232))
                    {
                      unint64_t v245 = 0;
                      do
                      {
                        unsigned int v246 = *(_DWORD *)(v147 + 224);
                        uint64_t v247 = *(unsigned int *)(v147 + 16);
                        if (v247)
                        {
                          int v248 = *(_DWORD **)(v147 + 8);
                          v249 = &v248[4 * v247];
                          unsigned int v250 = v245;
                          do
                          {
                            unsigned int v251 = v248[2];
                            int v252 = v250 / v251;
                            v250 %= v251;
                            v246 += *(_DWORD *)(*(void *)v248 + 20) * v252;
                            v248 += 4;
                          }
                          while (v248 != v249);
                        }
                        uint64_t v253 = a1 + *(void *)(*(void *)a1 - 24);
                        v324.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                        v324.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
                        LOWORD(v329) = 257;
                        uint64_t v254 = sub_22B229F08(v253, v303, (uint64_t **)&v324, 2, (uint64_t)v327);
                        int v255 = (llvm::Type **)sub_22B2366B0((uint64_t)v317, v246, v147);
                        sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v255, v254, 0);
                        ++v245;
                      }
                      while (v245 < *(unsigned int *)(v147 + 232));
                    }
                    unint64_t v125 = (unint64_t)v293;
LABEL_366:
                    sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, (uint64_t)v185);
                    uint64_t v256 = (uint64_t *)i[3];
                    uint64_t v257 = a1 + *(void *)(*(void *)a1 - 24);
                    v324.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                    v324.__r_.__value_.__l.__size_ = sub_22B1E3640(v147, (llvm::Type **)(*(void *)(*(void *)a1 - 24) + a1 + 8), v144);
                    LOWORD(v329) = 257;
                    uint64_t v258 = sub_22B229F08(v257, v256, (uint64_t **)&v324, 2, (uint64_t)v327);
                    uint64_t v259 = *(void *)(*(void *)a1 - 24);
                    LOWORD(v329) = 257;
                    sub_22B1D4240((uint64_t *)(v298 + v259), **(llvm::Type ***)(*(void *)v258 + 16), v258, 0, (uint64_t)v327);
                    llvm::Value::replaceAllUsesWith();
                    uint64_t v182 = v291;
                  }
                }
                break;
              }
              char v186 = v312;
              if (v312)
              {
                llvm::Instruction::eraseFromParent(v185);
                char v186 = v312;
              }
              goto LABEL_369;
            }
            if (v146 == 7) {
              goto LABEL_224;
            }
            if (v146 == 4) {
              goto LABEL_229;
            }
            if (v146 == 5) {
              unint64_t v172 = v147;
            }
            else {
              unint64_t v172 = 0;
            }
            if (v146 == 6) {
              unint64_t v173 = v147;
            }
            else {
              unint64_t v173 = 0;
            }
            unint64_t v174 = **(void **)(*(void *)v144 + 16);
            uint64_t v175 = **(void **)(v174 + 16);
            if (!v307 && !*(unsigned char *)v301)
            {
              int v143 = 3;
              goto LABEL_387;
            }
            int v292 = (void *)v125;
            if (v172)
            {
              v327[9] = *(unsigned char *)(v172 + 236);
              v327[8] = *(unsigned char *)(v172 + 237);
              uint64_t v176 = (unsigned int *)(v172 + 240);
              if (!*(unsigned char *)(v172 + 244)) {
                uint64_t v176 = (unsigned int *)&unk_22B270008;
              }
              *(void *)&v327[12] = *v176;
              unint64_t v328 = v172;
              uint64_t v329 = v175;
              sub_22B236D04((unsigned int *)&v324, *(_DWORD *)(v172 + 228), __val);
              unsigned int data = v324.__r_.__value_.__l.__data_;
              int v178 = *(_DWORD *)(v172 + 232);
              *(_DWORD *)uint64_t v327 = v324.__r_.__value_.__l.__data_;
              *(_DWORD *)&v327[4] = v178;
              sub_22B22D934((uint64_t *)(a1 + 840), v324.__r_.__value_.__l.__data_, (uint64_t)v327);
            }
            else
            {
              *(void *)&v327[8] = v173;
              *(void *)&v327[16] = v175;
              sub_22B236D04((unsigned int *)&v324, *(_DWORD *)(v173 + 228), __val);
              unsigned int data = v324.__r_.__value_.__l.__data_;
              int v268 = *(_DWORD *)(v173 + 232);
              *(_DWORD *)uint64_t v327 = v324.__r_.__value_.__l.__data_;
              *(_DWORD *)&v327[4] = v268;
              sub_22B236DA4((uint64_t *)(a1 + 864), v324.__r_.__value_.__l.__data_, (uint64_t)v327);
            }
            sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v144);
            uint64_t v269 = sub_22B1E3640(v147, (llvm::Type **)(*(void *)(*(void *)a1 - 24) + a1 + 8), v144);
            uint64_t v270 = (void *)v144;
            if (v307) {
              uint64_t v270 = (void *)llvm::UndefValue::get();
            }
            v311[0] = vadd_s32(vdup_n_s32(data), (int32x2_t)sub_22B1E37FC(v147, v144));
            if (v172) {
              uint64_t v271 = (unsigned __int8 **)(a1 + 2056);
            }
            else {
              uint64_t v271 = (unsigned __int8 **)(a1 + 2104);
            }
            uint64_t v272 = (void *)(a1 + *(void *)(*(void *)a1 - 24));
            std::string::size_type v273 = v272[30];
            v324.__r_.__value_.__r.__words[0] = v272[24];
            v324.__r_.__value_.__l.__size_ = v273;
            v324.__r_.__value_.__r.__words[2] = v324.__r_.__value_.__r.__words[0];
            uint64_t v325 = *v270;
            uint64_t v274 = sub_22B236E5C(v271, v272[40], v174);
            uint64_t v275 = *(void *)(*(void *)a1 - 24);
            v321.__r_.__value_.__r.__words[0] = v269;
            v321.__r_.__value_.__l.__size_ = sub_22B1E359C((uint64_t)v311, (llvm::Type **)(v275 + a1 + 8));
            v321.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
            uint64_t v322 = v270;
            LOWORD(v329) = 257;
            sub_22B1D4034(v298 + v275, *(void *)(v274 + 24), v274, (uint64_t)&v321, 4, (uint64_t)v327);
            llvm::Value::takeName();
            uint64_t v276 = *(void *)(v144 + 8);
            unint64_t v125 = (unint64_t)v292;
            while (v276)
            {
              uint64_t v277 = *(llvm::Instruction **)(v276 + 24);
              uint64_t v276 = *(void *)(v276 + 8);
              if (v277 && *((unsigned char *)v277 + 16) == 60)
              {
                llvm::Value::replaceAllUsesWith();
                llvm::Instruction::eraseFromParent(v277);
              }
            }
LABEL_417:
            int v143 = 0;
            uint64_t v129 = v305;
            if (!v307)
            {
              uint64_t v127 = a1 + 408;
LABEL_422:
              uint64_t v128 = v301;
              goto LABEL_389;
            }
            uint64_t v127 = a1 + 408;
            uint64_t v128 = v301;
            if (v316)
            {
              llvm::Instruction::eraseFromParent(v131);
              int v143 = 0;
            }
LABEL_389:
            if (v316 != (llvm::Instruction *)-8192 && v316 != (llvm::Instruction *)-4096 && v316) {
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v315);
            }
            if (v143 != 3 && v143)
            {
              uint64_t v5 = 0;
              goto LABEL_429;
            }
            uint64_t v130 = v308;
            if (!v308) {
              goto LABEL_425;
            }
          }
          if (!v307) {
            goto LABEL_206;
          }
          std::to_string(&v321, __val);
          uint64_t v158 = std::string::insert(&v321, 0, "buffer(");
          std::string::size_type v159 = v158->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v324.__r_.__value_.__l.__data_ = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
          v324.__r_.__value_.__r.__words[2] = v159;
          v158->__r_.__value_.__l.__size_ = 0;
          v158->__r_.__value_.__r.__words[2] = 0;
          v158->__r_.__value_.__r.__words[0] = 0;
          int v160 = std::string::append(&v324, "): Unable to map argument buffer access to resource");
          std::string::size_type v161 = v160->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v327 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
          *(void *)&v327[16] = v161;
          v160->__r_.__value_.__l.__size_ = 0;
          v160->__r_.__value_.__r.__words[2] = 0;
          v160->__r_.__value_.__r.__words[0] = 0;
          if (v327[23] >= 0) {
            uint64_t v162 = v327;
          }
          else {
            uint64_t v162 = *(const std::string::value_type **)v327;
          }
          if (v327[23] >= 0) {
            std::string::size_type v163 = v327[23];
          }
          else {
            std::string::size_type v163 = *(void *)&v327[8];
          }
          std::string::append((std::string *)(v127 + *(void *)(*(void *)a1 - 24)), v162, v163);
          int v164 = v327[23];
          goto LABEL_199;
        }
LABEL_425:
        if (!v307) {
          llvm::Value::replaceAllUsesWith();
        }
        uint64_t v5 = 1;
LABEL_429:
        uint64_t v278 = (void *)v331;
        if ((void)v331)
        {
          do
          {
            uint64_t v279 = (void *)*v278;
            operator delete(v278);
            uint64_t v278 = v279;
          }
          while (v279);
        }
        unsigned int v280 = (void *)v330;
        *(void *)&long long v330 = 0;
        BOOL v126 = v294;
        if (v280) {
          operator delete(v280);
        }
        uint64_t v281 = *(void **)&v319[16];
        if (*(void *)&v319[16])
        {
          do
          {
            v282 = (void *)*v281;
            operator delete(v281);
            uint64_t v281 = v282;
          }
          while (v282);
        }
        int v283 = *(void **)v319;
        *(void *)uint64_t v319 = 0;
        if (v283) {
          operator delete(v283);
        }
      }
      else
      {
        uint64_t v5 = 0;
      }
      v125 += 8;
      if ((void *)v125 == v126) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v5 = 1;
LABEL_10:
  if (SHIBYTE(v310) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

BOOL sub_22B222E84(uint64_t a1)
{
  uint64_t v296 = *MEMORY[0x263EF8340];
  sub_22B1F5178();
  sub_22B2259A8();
  sub_22B225AB0();
  sub_22B22D740();
  sub_22B225B34();
  unsigned int v246 = v250;
  uint64_t v247 = v250;
  uint64_t v248 = 8;
  int v249 = 0;
  BOOL v2 = 0;
  if (MGGetBoolAnswer())
  {
    uint64_t v3 = (const char *)sub_22B1DEEE4("AGX_FORCE_CS_SAMPLERS");
    BOOL v2 = v3 && *v3 != 48 && atoi(v3) != 0;
  }
  BOOL v5 = MGGetBoolAnswer()
    && (std::string::size_type v4 = (const char *)sub_22B1DEEE4("AGC_FORCE_BINDLESS")) != 0
    && *v4 != 48
    && atoi(v4) != 0;
  BOOL v7 = MGGetBoolAnswer()
    && (uint64_t v6 = (const char *)sub_22B1DEEE4("AGC_FORCE_BINDLESS_HEAP")) != 0
    && *v6 != 48
    && atoi(v6) != 0;
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)a1;
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1678))
  {
    char v10 = 0;
  }
  else
  {
    int v11 = *(_DWORD *)(a1 + 2160);
    if (v11) {
      char v10 = 1;
    }
    else {
      char v10 = v2;
    }
    BOOL v12 = (*(_DWORD *)(a1 + 2296) + *(_DWORD *)(a1 + 2284)) > 0x30 || v11 != 0;
    if (v12 || v5 || v7)
    {
      BOOL v13 = !v7;
      if (v11) {
        BOOL v13 = 0;
      }
      char v228 = 1;
      goto LABEL_27;
    }
  }
  char v228 = 0;
  BOOL v13 = 0;
LABEL_27:
  *(unsigned char *)(a1 + 2385) = v13;
  uint64_t v14 = *(void *)(a1 + *(void *)(v9 - 24) + 320);
  uint64_t v15 = *(void **)(v14 + 32);
  std::string __p = (void *)(v14 + 24);
  if (v15 == (void *)(v14 + 24)) {
    goto LABEL_81;
  }
  char v225 = v10;
  BOOL v226 = v2;
  unint64_t v16 = (void *)(a1 + 840);
  uint64_t v17 = (uint64_t **)(a1 + 848);
  do
  {
    int v18 = (llvm::Value *)(v15 - 7);
    BOOL v21 = v15 == 0;
    uint64_t v15 = (void *)v15[1];
    if (v21) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
    llvm::Value::getName(v19);
    int Key = llvm::StringMapImpl::FindKey();
    BOOL v21 = Key == -1 || Key == (unint64_t)dword_2683E9250;
    if (v21)
    {
      llvm::Value::getName(v19);
      int v22 = llvm::StringMapImpl::FindKey();
      if (v22 == -1 || v22 == (unint64_t)dword_2683E9158)
      {
        llvm::Value::getName(v19);
        int v23 = llvm::StringMapImpl::FindKey();
        if (v23 == -1 || v23 == (unint64_t)dword_2683E91A8)
        {
          llvm::Value::getName(v19);
          int v24 = llvm::StringMapImpl::FindKey();
          if (v24 == -1) {
            continue;
          }
          if (v24 == (unint64_t)dword_2683E91F8) {
            continue;
          }
          *(void *)uint64_t v277 = llvm::Value::getName(v19);
          *(void *)&v277[8] = v25;
          if (llvm::StringRef::find() != -1) {
            continue;
          }
        }
      }
      BOOL v28 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v26 = *(void *)(qword_2683E9248 + 8 * Key);
      uint64_t v27 = *(unsigned __int8 *)(v26 + 30);
      BOOL v28 = *(_DWORD *)(v26 + 20) < 3;
    }
    for (uint64_t i = *((void *)v19 + 1); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v30 = *(void **)(*(void *)(i + 24) - 32 * (*(_DWORD *)(*(void *)(i + 24) + 20) & 0x7FFFFFF) + 32 * v27);
      sub_22B22D8BC((uint64_t)v277, &v246, v30);
      if (v28 && *(unsigned char *)(*(void *)(a1 + 344 + *(void *)(*(void *)a1 - 24)) + 1647))
      {
        uint64_t v31 = llvm::Value::stripPointerCasts((llvm::Value *)v30);
        if (!v31 || (uint64_t v32 = v31, *(unsigned char *)(v31 + 16) != 84))
        {
          std::string::append((std::string *)(a1 + *(void *)(*(void *)a1 - 24) + 408), "Could not statically determine the target of a texture");
          BOOL v51 = 0;
          goto LABEL_217;
        }
        uint64_t v33 = *(void *)(v31 - 32);
        if (!v33
          || *(unsigned char *)(v33 + 16)
          || *(void *)(v33 + 24) != *(void *)(v32 + 72)
          || (llvm::Value::getName((llvm::Value *)v33), int v47 = llvm::StringMapImpl::FindKey(), v47 == -1)
          || v47 == (unint64_t)dword_2683E91D0)
        {
          uint64_t v34 = *(void *)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF) + 64);
          uint64_t v35 = (void *)(v34 + 24);
          if (*(_DWORD *)(v34 + 32) >= 0x41u) {
            uint64_t v35 = (void *)*v35;
          }
          uint64_t v36 = *v17;
          if (!*v17) {
            goto LABEL_65;
          }
          unsigned int v37 = *(_DWORD *)v35;
          uint64_t v38 = a1 + 848;
          uint64_t v39 = *v17;
          do
          {
            unsigned int v40 = *((_DWORD *)v39 + 9) + *((_DWORD *)v39 + 8);
            BOOL v41 = v40 > v37;
            if (v40 <= v37) {
              BOOL v42 = (uint64_t **)(v39 + 1);
            }
            else {
              BOOL v42 = (uint64_t **)v39;
            }
            if (v41) {
              uint64_t v38 = (uint64_t)v39;
            }
            uint64_t v39 = *v42;
          }
          while (*v42);
          if ((uint64_t **)v38 == v17 || *(_DWORD *)(v38 + 32) > v37) {
LABEL_65:
          }
            uint64_t v38 = a1 + 848;
          long long v43 = *(_OWORD *)(v38 + 48);
          *(_OWORD *)uint64_t v277 = *(_OWORD *)(v38 + 32);
          *(_OWORD *)&v277[16] = v43;
          *(void *)&v277[32] = *(void *)(v38 + 64);
          uint64_t v44 = *(void **)(v38 + 8);
          uint64_t v45 = (void *)v38;
          if (v44)
          {
            do
            {
              uint64_t v46 = v44;
              uint64_t v44 = (void *)*v44;
            }
            while (v44);
          }
          else
          {
            do
            {
              uint64_t v46 = (void *)v45[2];
              BOOL v21 = *v46 == (void)v45;
              uint64_t v45 = v46;
            }
            while (!v21);
          }
          if (*v16 == v38) {
            *unint64_t v16 = v46;
          }
          --*(void *)(a1 + 856);
          sub_22B2317CC(v36, (uint64_t *)v38);
          operator delete((void *)v38);
          *(_DWORD *)&v277[16] = 1;
          sub_22B22D934((uint64_t *)(a1 + 840), *(unsigned int *)v277, (uint64_t)v277);
        }
      }
    }
  }
  while (v15 != __p);
  uint64_t v8 = *(void *)a1;
  BOOL v2 = v226;
  char v10 = v225;
LABEL_81:
  BOOL v245 = 1;
  if (((*(uint64_t (**)(uint64_t))(v8 + 288))(a1) & 1) == 0)
  {
    v244[0] = 0;
    v244[1] = 0;
    int v243 = v244;
    sub_22B22D9EC((uint64_t *)&v243, *(void **)(a1 + 864), (void *)(a1 + 872));
    *(void *)uint64_t v277 = &v277[16];
    *(void *)&v277[8] = 0x400000000;
    v282 = 0;
    uint64_t v281 = 0;
    unsigned int v280 = &v281;
    uint64_t v279 = &unk_26DE79CE8;
    uint64_t v274 = &unk_26DE7A138;
    uint64_t v275 = &v279;
    uint64_t v276 = &v274;
    for (uint64_t j = *(void **)(a1 + 2032); j; uint64_t j = (void *)*j)
      sub_22B22DDE4((uint64_t)v276, j[5]);
    sub_22B22DE34(&v274);
    uint64_t v270 = &unk_26DE7A1C8;
    uint64_t v271 = &v279;
    std::string::size_type v273 = &v270;
    for (uint64_t k = *(void **)(a1 + 2128); k; uint64_t k = (void *)*k)
      sub_22B22DDE4((uint64_t)v273, k[5]);
    sub_22B22DE34(&v270);
    long long v262 = 0u;
    long long v263 = 0u;
    int v264 = 1065353216;
    uint64_t v54 = v280;
    if (v280 == &v281)
    {
LABEL_147:
      unint64_t __src = (unint64_t)&v262;
      LOBYTE(v251) = 1;
      uint64_t v289 = (uint64_t)&unk_26DE7A258;
      uint64_t p_p_src = (uint64_t)&v251;
      p_src = &__src;
      int v292 = (char **)&v289;
      for (uint64_t m = *(void **)(a1 + 2032); m; uint64_t m = (void *)*m)
        sub_22B22DDE4((uint64_t)v292, m[5]);
      sub_22B22DE34(&v289);
      int v283 = &unk_26DE7A2E8;
      uint64_t v284 = &v251;
      unint64_t v285 = (unint64_t)&__src;
      uint64_t v286 = &v283;
      for (uint64_t n = *(void **)(a1 + 2128); n; uint64_t n = (void *)*n)
        sub_22B22DDE4((uint64_t)v286, n[5]);
      sub_22B22DE34(&v283);
      BOOL v94 = (_BYTE)v251 != 0;
    }
    else
    {
      uint64_t v55 = (void *)(a1 + 632);
      while (1)
      {
        uint64_t v56 = v244[0];
        if (!v244[0]) {
          break;
        }
        unsigned int v57 = *((_DWORD *)v54 + 9);
        unsigned int v58 = v244;
        do
        {
          uint64_t v59 = (uint64_t *)v56;
          uint64_t v60 = v58;
          unsigned int v61 = *(_DWORD *)(v56 + 36) + *(_DWORD *)(v56 + 32);
          uint64_t v62 = (uint64_t *)(v56 + 8);
          if (v61 > v57)
          {
            uint64_t v62 = v59;
            unsigned int v58 = v59;
          }
          uint64_t v56 = *v62;
        }
        while (v56);
        if (v58 == v244) {
          break;
        }
        if (v61 > v57)
        {
          uint64_t v63 = (uint64_t)(v59 + 4);
        }
        else
        {
          uint64_t v59 = v60;
          uint64_t v63 = (uint64_t)(v60 + 4);
        }
        if (v57 < *((_DWORD *)v59 + 8)) {
          break;
        }
        unsigned int v64 = *((_DWORD *)v54 + 7);
        if (*((_DWORD *)v54 + 8) != v64) {
          break;
        }
        unsigned int v65 = sub_22B234B4C(v63, v64);
        uint64_t v67 = v66;
        uint64_t v68 = (char *)llvm::User::operator new((llvm::User *)0x58);
        if ((v65 & 0x80000000) != 0)
        {
          unint64_t __src = HIWORD(v65) & 0x7FFF;
          std::string::size_type v267 = (void **)".";
          __int16 v269 = 776;
          char v69 = 2;
          char v70 = 8;
          uint64_t v71 = (unint64_t *)&v283;
          int v283 = &__src;
          unint64_t v285 = (unsigned __int16)v65;
        }
        else
        {
          LODWORD(v283) = (unsigned __int16)v65;
          char v69 = 8;
          char v70 = 1;
          uint64_t v71 = (unint64_t *)v283;
        }
        std::string::size_type v72 = v55;
        char v287 = v69;
        char v288 = v70;
        uint64_t v289 = (uint64_t)"agc.sampler_words";
        p_src = v71;
        LOBYTE(v293[0]) = 3;
        BYTE1(v293[0]) = v69;
        llvm::GlobalVariable::GlobalVariable();
        v68[80] |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        sub_22B2436D4(a1 + *(void *)(*(void *)a1 - 24));
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)
          && *(unsigned char *)(*(void *)(a1 + 344 + *(void *)(*(void *)a1 - 24)) + 1651))
        {
          uint64_t NullValue = llvm::User::operator new((llvm::User *)0x58);
          if ((v65 & 0x80000000) != 0)
          {
            unint64_t __src = HIWORD(v65) & 0x7FFF;
            std::string::size_type v267 = (void **)".";
            __int16 v269 = 776;
            char v74 = 2;
            char v75 = 8;
            BOOL v76 = (unint64_t *)&v283;
            int v283 = &__src;
            unint64_t v285 = (unsigned __int16)v65;
          }
          else
          {
            LODWORD(v283) = (unsigned __int16)v65;
            char v74 = 8;
            char v75 = 1;
            BOOL v76 = (unint64_t *)v283;
          }
          char v287 = v74;
          char v288 = v75;
          uint64_t v289 = (uint64_t)"agc.es1_sampler_lod_bias";
          p_src = v76;
          LOBYTE(v293[0]) = 3;
          BYTE1(v293[0]) = v74;
          llvm::GlobalVariable::GlobalVariable();
          *(unsigned char *)(NullValue + 80) |= 1u;
          llvm::GlobalObject::setSection();
          sub_22B2436D4(a1 + *(void *)(*(void *)a1 - 24));
        }
        else
        {
          uint64_t v77 = (llvm::Constant *)llvm::PointerType::get();
          uint64_t NullValue = llvm::Constant::getNullValue(v77, v78);
        }
        uint64_t v79 = llvm::User::operator new((llvm::User *)0x58);
        if ((v65 & 0x80000000) != 0)
        {
          unint64_t __src = HIWORD(v65) & 0x7FFF;
          std::string::size_type v267 = (void **)".";
          __int16 v269 = 776;
          char v80 = 2;
          char v81 = 8;
          uint64_t v82 = (unint64_t *)&v283;
          int v283 = &__src;
          unint64_t v285 = (unsigned __int16)v65;
        }
        else
        {
          LODWORD(v283) = (unsigned __int16)v65;
          char v80 = 8;
          char v81 = 1;
          uint64_t v82 = (unint64_t *)v283;
        }
        char v287 = v80;
        char v288 = v81;
        uint64_t v289 = (uint64_t)"agc.sampler_unique_id";
        p_src = v82;
        LOBYTE(v293[0]) = 3;
        BYTE1(v293[0]) = v80;
        llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v79 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        sub_22B2436D4(a1 + *(void *)(*(void *)a1 - 24));
        if ((*(unsigned char *)(v67 + 9) & 1) == 0)
        {
          uint64_t v289 = llvm::PointerType::get();
          uint64_t p_p_src = llvm::PointerType::get();
          p_src = (unint64_t *)llvm::PointerType::get();
          llvm::StructType::setBody();
        }
        uint64_t v289 = (uint64_t)v68;
        uint64_t p_p_src = NullValue;
        p_src = (unint64_t *)v79;
        llvm::ConstantStruct::get();
        uint64_t v83 = llvm::User::operator new((llvm::User *)0x58);
        if ((v65 & 0x80000000) != 0)
        {
          unint64_t __src = HIWORD(v65) & 0x7FFF;
          std::string::size_type v267 = (void **)".";
          __int16 v269 = 776;
          char v84 = 2;
          char v85 = 8;
          uint64_t v86 = (unint64_t *)&v283;
          int v283 = &__src;
          unint64_t v285 = (unsigned __int16)v65;
        }
        else
        {
          LODWORD(v283) = (unsigned __int16)v65;
          char v84 = 8;
          char v85 = 1;
          uint64_t v86 = (unint64_t *)v283;
        }
        uint64_t v55 = v72;
        char v287 = v84;
        char v288 = v85;
        uint64_t v289 = (uint64_t)"agc.sampler_state_struct_ptr";
        p_src = v86;
        LOBYTE(v293[0]) = 3;
        BYTE1(v293[0]) = v84;
        char v221 = 0;
        llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v83 + 80) |= 1u;
        llvm::GlobalVariable::setInitializer();
        sub_22B22A84C(&v289, v83);
        uint64_t v289 = (uint64_t)&unk_26DE79C68;
        v293[0] = v72;
        int v283 = 0;
        char v87 = sub_22B22A7B4(*(void *)(a1 + 632), *(_DWORD *)(a1 + 648), (uint64_t)v292, &v283);
        uint64_t v88 = (uint64_t)v283;
        if ((v87 & 1) == 0)
        {
          uint64_t v88 = sub_22B235A1C((uint64_t)v72, (uint64_t)&v289, (uint64_t)v283);
          sub_22B21A918((llvm::ValueHandleBase *)(v88 + 8), &p_p_src);
          *(void **)(v88 + 32) = v293[0];
          *(_DWORD *)(v88 + 40) = 0;
        }
        if (v292 != (char **)-8192 && v292 != (char **)-4096 && v292) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&p_p_src);
        }
        *(_DWORD *)(v88 + 40) = (unsigned __int16)v65;
        uint64_t v289 = 4;
        uint64_t p_p_src = 0;
        uint64_t v89 = (void *)v83;
        p_src = (unint64_t *)v83;
        if (v83 != -8192)
        {
          uint64_t v89 = (void *)v83;
          if (v83 != -4096)
          {
            uint64_t v89 = (void *)v83;
            if (v83)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v289);
              uint64_t v89 = p_src;
            }
          }
        }
        sub_22B22C248((uint64_t *)(a1 + 760), (unint64_t)v89, &v289);
        if (p_src != (unint64_t *)-8192 && p_src != (unint64_t *)-4096 && p_src) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v289);
        }
        sub_22B233468((float *)&v262, *((_DWORD *)v54 + 7), (_DWORD *)v54 + 7)[3] = v83;
        uint64_t v90 = v54[1];
        if (v90)
        {
          do
          {
            uint64_t v91 = (void **)v90;
            uint64_t v90 = (void *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            uint64_t v91 = (void **)v54[2];
            BOOL v21 = *v91 == v54;
            uint64_t v54 = v91;
          }
          while (!v21);
        }
        uint64_t v54 = v91;
        if (v91 == &v281) {
          goto LABEL_147;
        }
      }
      BOOL v94 = 0;
    }
    sub_22B233844((uint64_t)&v262);
    sub_22B1EDBB8(v281);
    if (*(unsigned char **)v277 != &v277[16]) {
      free(*(void **)v277);
    }
    BOOL v245 = v94;
    uint64_t v95 = (void *)v244[0];
    goto LABEL_159;
  }
  if ((v10 & 1) == 0)
  {
    v242[0] = 0;
    v242[1] = 0;
    unint64_t v241 = v242;
    sub_22B22D9EC((uint64_t *)&v241, *(void **)(a1 + 864), (void *)(a1 + 872));
    BOOL v245 = sub_22B22DB58(a1, a1 + 2008, a1 + 2104, (uint64_t)&v241);
    uint64_t v95 = (void *)v242[0];
LABEL_159:
    sub_22B1EDBB8(v95);
    goto LABEL_164;
  }
  if (v2)
  {
    p_src = 0;
    int v292 = 0;
    uint64_t v289 = (uint64_t)&unk_26DE79CE8;
    uint64_t p_p_src = (uint64_t)&p_src;
    *(void *)uint64_t v277 = &v277[16];
    *(void *)&v277[8] = 0x400000000;
    v260[0] = &unk_26DE7A528;
    v260[1] = &v289;
    uint64_t v261 = v260;
    for (iuint64_t i = *(void **)(a1 + 2032); ii; iuint64_t i = (void *)*ii)
      sub_22B22DDE4((uint64_t)v261, ii[5]);
    sub_22B22DE34(v260);
    sub_22B22DEB8((uint64_t)&v289, (uint64_t)v277, a1 + 864);
    sub_22B22E018(a1, (uint64_t)v277);
    int v283 = (void *)a1;
    uint64_t v49 = operator new(0x20uLL);
    *uint64_t v49 = &unk_26DE7A5B8;
    v49[1] = &v245;
    v49[2] = &v289;
    v49[3] = &v283;
    uint64_t v259 = v49;
    for (juint64_t j = *(void **)(a1 + 2032); jj; juint64_t j = (void *)*jj)
      sub_22B22DDE4((uint64_t)v259, jj[5]);
    sub_22B22DE34(v258);
    if (*(unsigned char **)v277 != &v277[16]) {
      free(*(void **)v277);
    }
    sub_22B1EDBB8(p_src);
  }
  else
  {
    *(void *)uint64_t v277 = &unk_22B27C63D;
    memset(&v277[8], 0, 32);
    int v278 = 1065353216;
    v240[0] = 0;
    v240[1] = 0;
    uint64_t v239 = v240;
    sub_22B22D9EC((uint64_t *)&v239, *(void **)(a1 + 864), (void *)(a1 + 872));
    BOOL v245 = sub_22B22DB58(a1, a1 + 2008, (uint64_t)v277, (uint64_t)&v239);
    sub_22B1EDBB8(v240[0]);
    sub_22B22FD90(0);
  }
  *(void *)uint64_t v277 = a1;
  v256[0] = &unk_26DE7A648;
  v256[1] = &v245;
  v256[2] = v277;
  uint64_t v257 = v256;
  for (kuint64_t k = *(void **)(a1 + 2128); kk; kuint64_t k = (void *)*kk)
    sub_22B22DDE4((uint64_t)v257, kk[5]);
  sub_22B22DE34(v256);
LABEL_164:
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) & 1) == 0)
  {
    if (v245)
    {
      v238[0] = 0;
      v238[1] = 0;
      unint64_t v237 = v238;
      sub_22B22E1FC((uint64_t *)&v237, *(void **)(a1 + 840), (void *)(a1 + 848));
      BOOL v245 = sub_22B22E368((void *)a1, a1 + 1960, a1 + 2056, (uint64_t)&v237);
      uint64_t v110 = (void *)v238[0];
LABEL_207:
      sub_22B1EDBB8(v110);
      goto LABEL_216;
    }
LABEL_208:
    BOOL v245 = 0;
    goto LABEL_216;
  }
  if ((v228 & 1) == 0)
  {
    if (sub_22B22F980(a1, *(void **)(a1 + 1984))
      && sub_22B22F980(a1, *(void **)(a1 + 2080)))
    {
      if (v245)
      {
        v236[0] = 0;
        v236[1] = 0;
        unint64_t v235 = v236;
        sub_22B22E1FC((uint64_t *)&v235, *(void **)(a1 + 840), (void *)(a1 + 848));
        BOOL v245 = sub_22B22E368((void *)a1, a1 + 1960, a1 + 2056, (uint64_t)&v235);
        uint64_t v110 = (void *)v236[0];
        goto LABEL_207;
      }
    }
    else if (v245)
    {
      v234[0] = 0;
      v234[1] = 0;
      uint64_t v233 = v234;
      sub_22B22E1FC((uint64_t *)&v233, *(void **)(a1 + 840), (void *)(a1 + 848));
      p_src = 0;
      int v292 = 0;
      uint64_t v289 = (uint64_t)&unk_26DE79CE8;
      uint64_t p_p_src = (uint64_t)&p_src;
      *(void *)uint64_t v277 = &v277[16];
      *(void *)&v277[8] = 0x400000000;
      int v283 = &unk_26DE7A8D0;
      uint64_t v284 = &v289;
      uint64_t v286 = &v283;
      for (muint64_t m = *(void **)(a1 + 1984); mm; muint64_t m = (void *)*mm)
        sub_22B22DDE4((uint64_t)v286, mm[5]);
      sub_22B22DE34(&v283);
      unint64_t __src = (unint64_t)&unk_26DE7A960;
      uint64_t v266 = (void **)&v289;
      int v268 = &__src;
      for (nuint64_t n = *(void **)(a1 + 2080); nn; nuint64_t n = (void *)*nn)
        sub_22B22DDE4((uint64_t)v268, nn[5]);
      sub_22B22DE34(&__src);
      sub_22B22FA28((unint64_t)&v289, (uint64_t)v277, (uint64_t)&v233);
      sub_22B2300A0((void *)a1, (uint64_t *)v277);
      sub_22B22FB6C(a1, (uint64_t)v277);
      uint64_t v274 = (void *)a1;
      LOBYTE(v270) = 1;
      uint64_t v113 = operator new(0x20uLL);
      void *v113 = &unk_26DE7A9F0;
      v113[1] = &v270;
      v113[2] = &v289;
      v113[3] = &v274;
      *((void *)&v263 + 1) = v113;
      uint64_t v114 = *(void **)(a1 + 1984);
      if (v114)
      {
        uint64_t v115 = (uint64_t)v113;
        do
        {
          sub_22B22DDE4(v115, v114[5]);
          uint64_t v114 = (void *)*v114;
        }
        while (v114);
      }
      sub_22B22DE34(&v262);
      uint64_t v116 = (void **)operator new(0x20uLL);
      *uint64_t v116 = &unk_26DE7AA80;
      v116[1] = &v270;
      _OWORD v116[2] = &v289;
      void v116[3] = &v274;
      v282 = v116;
      uint64_t v117 = *(void **)(a1 + 2080);
      if (v117)
      {
        uint64_t v118 = (uint64_t)v116;
        do
        {
          sub_22B22DDE4(v118, v117[5]);
          uint64_t v117 = (void *)*v117;
        }
        while (v117);
      }
      sub_22B22DE34(&v279);
      char v119 = (char)v270;
      if (*(unsigned char **)v277 != &v277[16]) {
        free(*(void **)v277);
      }
      sub_22B1EDBB8(p_src);
      BOOL v245 = v119;
      uint64_t v110 = (void *)v234[0];
      goto LABEL_207;
    }
    goto LABEL_208;
  }
  if (!*(unsigned char *)(a1 + 2385))
  {
    if (!v245) {
      goto LABEL_216;
    }
    if (v247 == v246) {
      uint64_t v122 = (uint64_t *)((char *)&v248 + 4);
    }
    else {
      uint64_t v122 = &v248;
    }
    uint64_t v123 = *(unsigned int *)v122;
    if (v123)
    {
      uint64_t v124 = 8 * v123;
      unint64_t v125 = v247;
      while (*(void *)v125 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v125 += 8;
        v124 -= 8;
        if (!v124) {
          goto LABEL_243;
        }
      }
    }
    else
    {
      unint64_t v125 = v247;
    }
    BOOL v126 = &v247[8 * v123];
    if (v125 == v126)
    {
LABEL_243:
      uint64_t v130 = 0;
      uint64_t v132 = 0;
    }
    else
    {
      unint64_t v127 = 0;
      uint64_t v128 = v125;
LABEL_232:
      unint64_t v129 = v127++;
      while (1)
      {
        v128 += 8;
        if (v128 == v126) {
          break;
        }
        if (*(void *)v128 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v128 != v126) {
            goto LABEL_232;
          }
          break;
        }
      }
      if (v129 >= 0x1FFFFFFFFFFFFFFFLL) {
        goto LABEL_406;
      }
      uint64_t v130 = (char *)sub_22B216148(v127);
      uint64_t v131 = *(void *)v125;
      uint64_t v132 = v130;
      while (2)
      {
        *(void *)uint64_t v132 = v131;
        do
        {
          v125 += 8;
          if (v125 == v126)
          {
            v132 += 8;
            goto LABEL_245;
          }
          uint64_t v131 = *(void *)v125;
        }
        while (*(void *)v125 >= 0xFFFFFFFFFFFFFFFELL);
        v132 += 8;
        if (v125 != v126) {
          continue;
        }
        break;
      }
    }
LABEL_245:
    unsigned int v252 = (unint64_t)(v132 - v130) >> 3;
    p_src = 0;
    int v292 = 0;
    uint64_t v289 = (uint64_t)&unk_26DE79CD0;
    uint64_t p_p_src = (uint64_t)&p_src;
    v293[0] = v294;
    v293[1] = (void *)0x800000000;
    unsigned int v295 = 0;
    llvm::IntEqClasses::grow((llvm::IntEqClasses *)v293);
    unint64_t v133 = v132 - v130;
    unint64_t v134 = (v132 - v130) >> 3;
    unint64_t v223 = (unint64_t)(v132 - v130) >> 3;
    unint64_t v224 = (llvm::ValueHandleBase *)v132;
    if (v132 == v130)
    {
      uint8x8_t v222 = 0;
      uint64_t v136 = 0;
      goto LABEL_295;
    }
    if (v133 < 0x1FFFFFFFFFFFFFF9)
    {
      uint64_t v135 = (char *)operator new(8 * v133);
      uint64_t v136 = v135;
      uint8x8_t v222 = &v135[64 * v134];
      unint64_t v137 = v134 << 6;
      uint64_t v138 = v135 + 32;
      do
      {
        *((void *)v138 - 4) = v138;
        *((void *)v138 - 3) = v138;
        *((void *)v138 - 2) = 4;
        *((_DWORD *)v138 - 2) = 0;
        v138 += 64;
        v137 -= 64;
      }
      while (v137);
      if (v132 != v130)
      {
        __pa = v135;
        unint64_t v139 = 0;
        uint64_t v140 = 0;
        while (1)
        {
          *(void *)uint64_t v277 = &v277[32];
          *(void *)&v277[8] = &v277[32];
          *(void *)&v277[16] = 8;
          *(_DWORD *)&v277[24] = 0;
          unint64_t __src = *(void *)&v130[8 * v139];
          int v283 = &v285;
          uint64_t v284 = (void *)0x800000000;
          sub_22B1D8088((unsigned int *)&v283, &__src, &v266);
          unsigned int v141 = v284;
          if (!v284) {
            goto LABEL_288;
          }
          unint64_t v142 = v134;
          int v143 = v130;
          int v144 = 0;
          BOOL v227 = &__pa[64 * v139];
          do
          {
            uint64_t v145 = *((void *)v283 + v141 - 1);
            LODWORD(v284) = v141 - 1;
            sub_22B22D8BC((uint64_t)&__src, v277, (const void *)v145);
            if (!(_BYTE)v267) {
              goto LABEL_281;
            }
            int v146 = *(unsigned __int8 *)(v145 + 16);
            if (v145 && v146 == 84)
            {
              uint64_t v147 = *(void *)(v145 - 32);
              if (v147)
              {
                if (!*(unsigned char *)(v147 + 16) && *(void *)(v147 + 24) == *(void *)(v145 + 72))
                {
                  BOOL v148 = (llvm::Value *)llvm::Value::stripPointerCasts((llvm::Value *)v147);
                  if (!*((unsigned char *)v148 + 16))
                  {
                    uint64_t v157 = v148;
                    if (sub_22B22FDEC((const char **)(a1 + 2056), v148)
                      || sub_22B22FDEC((const char **)(a1 + 1960), v157))
                    {
                      sub_22B1E3518(&v262, *(llvm::Constant **)(v145 - 32 * (*(_DWORD *)(v145 + 20) & 0x7FFFFFF) + 32));
                      sub_22B22FE68((uint64_t)&v289, v262, v140);
                      sub_22B22D8BC((uint64_t)&__src, v227, (const void *)v145);
                      goto LABEL_281;
                    }
                  }
                }
              }
              int v146 = *(unsigned __int8 *)(v145 + 16);
            }
            if (v145 && v146 == 85)
            {
              sub_22B1D6788((uint64_t)&v283, *(void *)(v145 - 64));
              sub_22B1D6788((uint64_t)&v283, *(void *)(v145 - 32));
            }
            else
            {
              if (v145) {
                BOOL v149 = (v146 - 21) >= 7;
              }
              else {
                BOOL v149 = 0;
              }
              if (v149)
              {
                BOOL v151 = v146 == 60 || v146 == 84;
                int v152 = *(_DWORD *)(v145 + 20);
                if ((v152 & 0x40000000) != 0)
                {
                  uint64_t v154 = *(uint64_t **)(v145 - 8);
                  uint64_t v153 = v152 & 0x7FFFFFF;
                }
                else
                {
                  uint64_t v153 = v152 & 0x7FFFFFF;
                  uint64_t v154 = (uint64_t *)(v145 - 32 * v153);
                }
                v144 |= v151;
                if (v153)
                {
                  uint64_t v155 = 32 * v153;
                  do
                  {
                    uint64_t v156 = *v154;
                    v154 += 4;
                    sub_22B1D6788((uint64_t)&v283, v156);
                    v155 -= 32;
                  }
                  while (v155);
                }
              }
              else
              {
                v144 |= v146 == 21;
              }
            }
LABEL_281:
            unsigned int v141 = v284;
          }
          while (v284);
          uint64_t v130 = v143;
          unint64_t v134 = v142;
          if (v144) {
            llvm::IntEqClasses::join((llvm::IntEqClasses *)v293);
          }
LABEL_288:
          if (v283 != &v285) {
            free(v283);
          }
          if (*(void *)&v277[8] != *(void *)v277) {
            free(*(void **)&v277[8]);
          }
          unint64_t v139 = (v140 + 1);
          uint64_t v140 = v139;
          if (v134 <= v139)
          {
            uint64_t v136 = __pa;
            break;
          }
        }
      }
LABEL_295:
      *(void *)uint64_t v277 = &v289;
      *(void *)&v277[8] = &v252;
      *(void *)&long long v262 = &unk_26DE79D48;
      *((void *)&v262 + 1) = v277;
      *((void *)&v263 + 1) = &v262;
      for (uint64_t i1 = *(void **)(a1 + 2080); i1; uint64_t i1 = (void *)*i1)
        sub_22B22DDE4(*((uint64_t *)&v263 + 1), i1[5]);
      sub_22B22DE34(&v262);
      uint64_t v279 = &unk_26DE79DD8;
      unsigned int v280 = (void **)v277;
      v282 = &v279;
      for (i2 = *(void **)(a1 + 1984); i2; i2 = (void *)*i2)
        sub_22B22DDE4((uint64_t)v282, i2[5]);
      sub_22B22DE34(&v279);
      llvm::IntEqClasses::compress((llvm::IntEqClasses *)v293);
      __pb = v136;
      if ((MGGetBoolAnswer() & 1) == 0
        || (int v160 = (const char *)sub_22B1DEEE4("AGC_FORCE_BINDLESS")) == 0
        || *v160 == 48
        || !atoi(v160))
      {
        if (!sub_22B1DEEE4("AGC_MAX_TEXTURE_REGISTERS"))
        {
          unsigned int v162 = 48;
          goto LABEL_309;
        }
        std::string::size_type v161 = (const char *)sub_22B1DEEE4("AGC_MAX_TEXTURE_REGISTERS");
        if (v161 && *v161 != 48)
        {
          unsigned int v162 = atoi(v161);
          goto LABEL_309;
        }
      }
      unsigned int v162 = 0;
LABEL_309:
      std::string::size_type v163 = v293[0];
      int v164 = *((_DWORD *)v293[0] + v252);
      if (v295)
      {
        size_t v165 = 12 * v295;
        std::string::size_type v166 = (char *)operator new(v165);
        size_t v167 = 12 * ((v165 - 12) / 0xC) + 12;
        bzero(v166, v167);
        std::string::size_type v168 = &v166[v167];
      }
      else
      {
        std::string::size_type v168 = 0;
        std::string::size_type v166 = 0;
      }
      int v169 = (unint64_t **)p_p_src;
      if ((unint64_t **)p_p_src != &p_src)
      {
        do
        {
          int v170 = *((_DWORD *)v169 + 7);
          int v171 = *((_DWORD *)v169 + 8);
          uint64_t v172 = *((unsigned int *)v169 + 9);
          int v173 = v163[v172];
          unint64_t v174 = &v166[12 * v173];
          if (!v174[4]) {
            v174[4] = 1;
          }
          *(_DWORD *)unint64_t v174 = v172;
          *(_DWORD *)&v166[12 * v173 + 8] += v171 - v170 + 1;
          uint64_t v175 = v169[1];
          if (v175)
          {
            do
            {
              uint64_t v176 = (unint64_t **)v175;
              uint64_t v175 = (unint64_t *)*v175;
            }
            while (v175);
          }
          else
          {
            do
            {
              uint64_t v176 = (unint64_t **)v169[2];
              BOOL v21 = *v176 == (unint64_t *)v169;
              int v169 = v176;
            }
            while (!v21);
          }
          int v169 = v176;
        }
        while (v176 != &p_src);
      }
      unint64_t v229 = (const void **)v130;
      llvm::IntEqClasses::uncompress((llvm::IntEqClasses *)v293);
      uint64_t v177 = v168 - v166;
      if (v168 != v166)
      {
        uint64_t v178 = 0;
        unsigned int v179 = 0;
        unsigned int v180 = 0;
        unint64_t v181 = 0xAAAAAAAAAAAAAAABLL * (v177 >> 2);
        do
        {
          if (v166[12 * v178 + 4]) {
            BOOL v182 = v164 == v180;
          }
          else {
            BOOL v182 = 1;
          }
          if (!v182)
          {
            unsigned int v183 = *(_DWORD *)&v166[12 * v178 + 8] + v179;
            if (v183 <= v162) {
              unsigned int v179 = v183;
            }
            llvm::IntEqClasses::join((llvm::IntEqClasses *)v293);
          }
          uint64_t v178 = ++v180;
        }
        while (v181 > v180);
      }
      llvm::IntEqClasses::compress((llvm::IntEqClasses *)v293);
      uint64_t v184 = MGGetBoolAnswer();
      if (v184)
      {
        uint64_t v184 = (uint64_t)sub_22B1DEEE4("AGC_DEBUG_LLVM_IR");
        if (v184 && *(unsigned char *)v184 != 48 && (uint64_t v184 = atoi((const char *)v184), v184))
        {
          sub_22B1E69D0(v184, "----- Texture allocations ------\n", v185, v186, v187, v188, v189, v190, v221);
          int v191 = 1;
        }
        else
        {
          int v191 = 0;
        }
      }
      else
      {
        int v191 = 0;
      }
      *(void *)uint64_t v277 = &v277[16];
      *(void *)&v277[8] = 0x800000000;
      uint64_t v192 = (unint64_t **)p_p_src;
      if ((unint64_t **)p_p_src != &p_src)
      {
        uint64_t v193 = (uint64_t *)(a1 + 848);
        do
        {
          if (*((_DWORD *)v293[0] + *((unsigned int *)v192 + 9)) == *((_DWORD *)v293[0] + (v223 + 1)))
          {
            uint64_t v194 = *v193;
            unsigned int v195 = *((_DWORD *)v192 + 7);
            if (!*v193) {
              goto LABEL_351;
            }
            uint64_t v196 = a1 + 848;
            do
            {
              unsigned int v197 = *(_DWORD *)(v194 + 36) + *(_DWORD *)(v194 + 32);
              BOOL v198 = v197 > v195;
              if (v197 <= v195) {
                uint64_t v199 = (uint64_t *)(v194 + 8);
              }
              else {
                uint64_t v199 = (uint64_t *)v194;
              }
              if (v198) {
                uint64_t v196 = v194;
              }
              uint64_t v194 = *v199;
            }
            while (*v199);
            if ((uint64_t *)v196 == v193 || v195 < *(_DWORD *)(v196 + 32)) {
LABEL_351:
            }
              uint64_t v196 = a1 + 848;
            *((_DWORD *)v192 + 9) = *(_DWORD *)&v277[8];
            if (v195 <= *((_DWORD *)v192 + 8))
            {
              uint64_t v200 = v196 + 32;
              do
              {
                sub_22B2301A8((uint64_t)&v283, v200, v195);
                uint64_t v184 = sub_22B230228((uint64_t)v277, (unint64_t)&v283);
                uint64_t v201 = *(void *)v277 + 24 * *(unsigned int *)&v277[8];
                long long v202 = *(_OWORD *)v184;
                *(void *)(v201 + 16) = *(void *)(v184 + 16);
                *(_OWORD *)uint64_t v201 = v202;
                ++*(_DWORD *)&v277[8];
                ++v195;
              }
              while (v195 <= *((_DWORD *)v192 + 8));
            }
            if (v191) {
              sub_22B1E69D0(v184, "[%08x - %08x] TS%d - TS%d", v185, v186, v187, v188, v189, v190, *((_DWORD *)v192 + 7));
            }
          }
          else if (v191)
          {
            sub_22B1E69D0(v184, "[%08x - %08x] bindless", v185, v186, v187, v188, v189, v190, *((_DWORD *)v192 + 7));
          }
          uint64_t v203 = v192[1];
          if (v203)
          {
            do
            {
              uint64_t v204 = (unint64_t **)v203;
              uint64_t v203 = (unint64_t *)*v203;
            }
            while (v203);
          }
          else
          {
            do
            {
              uint64_t v204 = (unint64_t **)v192[2];
              BOOL v21 = *v204 == (unint64_t *)v192;
              uint64_t v192 = v204;
            }
            while (!v21);
          }
          uint64_t v192 = v204;
        }
        while (v204 != &p_src);
      }
      sub_22B2300A0((void *)a1, (uint64_t *)v277);
      int v283 = &v287;
      uint64_t v284 = &v287;
      unint64_t v285 = 4;
      LODWORD(v286) = 0;
      if (v224 != (llvm::ValueHandleBase *)v229)
      {
        uint64_t v205 = 0;
        unsigned int v206 = 0;
        do
        {
          if (*((_DWORD *)v293[0] + v205) == *((_DWORD *)v293[0] + v252))
          {
            sub_22B22D8BC((uint64_t)&__src, (void *)(a1 + 888), v229[v205]);
          }
          else
          {
            uint64_t v207 = &__pb[64 * v205];
            uint64_t v208 = (const void **)*((void *)v207 + 1);
            if (v208 == *(const void ***)v207) {
              uint64_t v209 = 20;
            }
            else {
              uint64_t v209 = 16;
            }
            uint64_t v210 = *(unsigned int *)&v207[v209];
            if (v210)
            {
              uint64_t v211 = 8 * v210;
              uint64_t v212 = v208;
              while ((unint64_t)*v212 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v212;
                v211 -= 8;
                if (!v211) {
                  goto LABEL_384;
                }
              }
            }
            else
            {
              uint64_t v212 = v208;
            }
            uint64_t v213 = &v208[v210];
            if (v212 != v213)
            {
              uint64_t v214 = *v212;
LABEL_380:
              sub_22B22D8BC((uint64_t)&__src, &v283, v214);
              while (++v212 != v213)
              {
                uint64_t v214 = *v212;
                if ((unint64_t)*v212 < 0xFFFFFFFFFFFFFFFELL)
                {
                  if (v212 != v213) {
                    goto LABEL_380;
                  }
                  break;
                }
              }
            }
          }
LABEL_384:
          uint64_t v205 = ++v206;
        }
        while (v134 > v206);
      }
      uint64_t v274 = &unk_26DE79E68;
      uint64_t v275 = (void **)a1;
      uint64_t v276 = &v274;
      unint64_t __src = (unint64_t)&unk_26DE79E20;
      uint64_t v266 = (void **)&v289;
      std::string::size_type v267 = &v274;
      int v268 = &__src;
      sub_22B2302A4(&v283, (uint64_t)&__src);
      sub_22B23039C(&__src);
      sub_22B230420(&v274);
      if (v284 != v283) {
        free(v284);
      }
      uint64_t v286 = 0;
      unint64_t v285 = 0;
      uint64_t v284 = &v285;
      int v283 = &unk_26DE79CE8;
      unint64_t __src = (unint64_t)&unk_26DE79EB0;
      uint64_t v266 = &v283;
      int v268 = &__src;
      unint64_t v215 = *(void **)(a1 + 1984);
      for (i3 = v222; v215; unint64_t v215 = (void *)*v215)
        sub_22B22DDE4((uint64_t)v268, v215[5]);
      sub_22B22DE34(&__src);
      sub_22B22FA28((unint64_t)&v283, (uint64_t)v277, a1 + 840);
      sub_22B22FB6C(a1, (uint64_t)v277);
      uint64_t v251 = a1;
      uint64_t v270 = &unk_26DE79F40;
      uint64_t v271 = &v283;
      uint64_t v272 = &v251;
      std::string::size_type v273 = &v270;
      for (i4 = *(void **)(a1 + 1984); i4; i4 = (void *)*i4)
        sub_22B22DDE4((uint64_t)v273, i4[5]);
      sub_22B22DE34(&v270);
      sub_22B1EDBB8((void *)v285);
      uint64_t v251 = a1;
      int v283 = &unk_26DE7A018;
      uint64_t v284 = &v251;
      uint64_t v286 = &v283;
      for (i5 = *(void **)(a1 + 2080); i5; i5 = (void *)*i5)
        sub_22B22DDE4((uint64_t)v286, i5[5]);
      sub_22B22DE34(&v283);
      if (*(unsigned char **)v277 != &v277[16]) {
        free(*(void **)v277);
      }
      if (v166) {
        operator delete(v166);
      }
      if (__pb)
      {
        while (i3 != __pb)
        {
          uint64_t v220 = (void *)*((void *)i3 - 8);
          uint64_t v219 = (void *)*((void *)i3 - 7);
          i3 -= 64;
          if (v219 != v220) {
            free(v219);
          }
        }
        operator delete(__pb);
      }
      uint64_t v289 = (uint64_t)&unk_26DE79CD0;
      if (v293[0] != v294) {
        free(v293[0]);
      }
      sub_22B1EDBB8(p_src);
      BOOL v245 = 1;
      if (v229) {
        operator delete(v229);
      }
      goto LABEL_216;
    }
LABEL_406:
    abort();
  }
  if (&v246 != (char **)(a1 + 888)) {
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(a1 + 888), (const llvm::SmallPtrSetImplBase *)&v246);
  }
  uint64_t v286 = 0;
  unint64_t v285 = 0;
  uint64_t v284 = &v285;
  int v283 = &unk_26DE79CE8;
  *(void *)uint64_t v277 = &v277[16];
  *(void *)&v277[8] = 0x400000000;
  uint64_t v289 = (uint64_t)&p_src;
  uint64_t p_p_src = 0x400000000;
  unint64_t __src = sub_22B1D8210((llvm::DataLayout *)(a1 + 168), *(llvm::Type **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1576));
  uint64_t v266 = v97;
  LODWORD(v262) = llvm::TypeSize::operator unsigned long long();
  v254[0] = &unk_26DE7AAC8;
  v254[1] = &v283;
  int v255 = v254;
  for (i6 = *(void **)(a1 + 1984); i6; i6 = (void *)*i6)
    sub_22B22DDE4((uint64_t)v255, i6[5]);
  sub_22B22DE34(v254);
  sub_22B22FA28((unint64_t)&v283, (uint64_t)v277, a1 + 840);
  unint64_t __src = a1;
  uint64_t v266 = (void **)&v262;
  uint64_t v99 = operator new(0x20uLL);
  *uint64_t v99 = &unk_26DE7AB58;
  v99[1] = &v245;
  v99[2] = &v283;
  v99[3] = &__src;
  v253[3] = v99;
  uint64_t v100 = *(void **)(a1 + 1984);
  if (v100)
  {
    uint64_t v101 = (uint64_t)v99;
    do
    {
      sub_22B22DDE4(v101, v100[5]);
      uint64_t v100 = (void *)*v100;
    }
    while (v100);
  }
  sub_22B22DE34(v253);
  unint64_t v102 = *(unsigned int *)&v277[8];
  if (*(_DWORD *)&v277[8])
  {
    uint64_t v103 = 0;
    unint64_t v104 = 0;
    while (1)
    {
      uint64_t v105 = *(void *)v277;
      unsigned int v106 = *(unsigned __int16 *)(*(void *)v277 + v103);
      if (v106 <= 0x3F) {
        break;
      }
      uint64_t v107 = 1 << v106;
      *(void *)(a1 + 2400) |= v107;
      uint64_t v108 = (void *)(a1 + 2416);
      if (*(unsigned char *)(v105 + v103 + 9)) {
        goto LABEL_180;
      }
LABEL_181:
      uint64_t v109 = *(unsigned int *)(v105 + v103 + 4);
      if (v109 != -1)
      {
        if (p_p_src >= (unint64_t)HIDWORD(p_p_src)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v289 + 8 * p_p_src) = (v262 * v104) | (unint64_t)(v109 << 32);
        LODWORD(p_p_src) = p_p_src + 1;
        unint64_t v102 = *(unsigned int *)&v277[8];
      }
      ++v104;
      v103 += 24;
      if (v104 >= v102) {
        goto LABEL_209;
      }
    }
    uint64_t v107 = 1 << v106;
    *(void *)(a1 + 2392) |= v107;
    uint64_t v108 = (void *)(a1 + 2408);
    if (!*(unsigned char *)(v105 + v103 + 9)) {
      goto LABEL_181;
    }
LABEL_180:
    *v108 |= v107;
    goto LABEL_181;
  }
LABEL_209:
  if (p_p_src)
  {
    uint64_t v120 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v120 + 184))(v120, &v289);
  }
  sub_22B22FB6C(a1, (uint64_t)v277);
  if ((unint64_t **)v289 != &p_src) {
    free((void *)v289);
  }
  if (*(unsigned char **)v277 != &v277[16]) {
    free(*(void **)v277);
  }
  sub_22B1EDBB8((void *)v285);
LABEL_216:
  sub_22B22FD20((void *)(a1 + 1960));
  sub_22B22FD20((void *)(a1 + 2008));
  sub_22B22FD20((void *)(a1 + 2056));
  sub_22B22FD20((void *)(a1 + 2104));
  BOOL v51 = v245;
LABEL_217:
  if (v247 != v246) {
    free(v247);
  }
  return v51;
}

void sub_22B2252F4(void *a1)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  BOOL v2 = (llvm::Type **)*((void *)v1 + 40);
  uint64_t v3 = *((void *)v1 + 43);
  sub_22B241938((uint64_t)&v66, *v2);
  uint64_t v72 = v3;
  uint64_t v66 = &unk_26DE79C90;
  sub_22B241938((uint64_t)&v73, *v2);
  int v78 = &v66;
  v77[23] = v2;
  uint64_t v73 = &unk_26DE72270;
  uint64_t v71 = v2;
  v68[20] = *(_DWORD *)(v3 + 104);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E8810, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E8810))
  {
    qword_2683E87F0 = 0;
    *(void *)&dword_2683E87F8 = 0;
    qword_2683E8800 = 0x2800000000;
    __cxa_atexit((void (*)(void *))sub_22B20013C, &qword_2683E87F0, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E8810);
  }
  if (!dword_2683E87FC)
  {
    std::string::size_type v4 = sub_22B1FFCBC("fast_sin", 8uLL);
    uint64_t v5 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v4 + 8), "fast_asin", 9uLL);
    *(void *)(v5 + 8) = sub_22B200134;
    *(void *)(v5 + 16) = 0;
    uint64_t v6 = sub_22B1FFCBC("fast_sin", 8uLL);
    uint64_t v7 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v6 + 8), "fast_acos", 9uLL);
    *(void *)(v7 + 8) = sub_22B1FFF08;
    *(void *)(v7 + 16) = 0;
    uint64_t v8 = sub_22B1FFCBC("fast_sin", 8uLL);
    uint64_t v9 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v8 + 8), "fast_atan", 9uLL);
    *(void *)(v9 + 8) = sub_22B20008C;
    *(void *)(v9 + 16) = 0;
    char v10 = sub_22B1FFCBC("fast_cos", 8uLL);
    uint64_t v11 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v10 + 8), "fast_asin", 9uLL);
    *(void *)(v11 + 8) = sub_22B1FFF08;
    *(void *)(v11 + 16) = 0;
    BOOL v12 = sub_22B1FFCBC("fast_cos", 8uLL);
    uint64_t v13 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v12 + 8), "fast_acos", 9uLL);
    *(void *)(v13 + 8) = sub_22B200134;
    *(void *)(v13 + 16) = 0;
    uint64_t v14 = sub_22B1FFCBC("fast_cos", 8uLL);
    uint64_t v15 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v14 + 8), "fast_atan", 9uLL);
    *(void *)(v15 + 8) = sub_22B1FFFE4;
    *(void *)(v15 + 16) = 0;
    unint64_t v16 = sub_22B1FFCBC("fast_tan", 8uLL);
    uint64_t v17 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v16 + 8), "fast_asin", 9uLL);
    *(void *)(v17 + 8) = sub_22B1FFF98;
    *(void *)(v17 + 16) = 0;
    int v18 = sub_22B1FFCBC("fast_tan", 8uLL);
    uint64_t v19 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v18 + 8), "fast_acos", 9uLL);
    *(void *)(v19 + 8) = sub_22B1FFEBC;
    *(void *)(v19 + 16) = 0;
    uint64_t v20 = sub_22B1FFCBC("fast_tan", 8uLL);
    uint64_t v21 = *sub_22B1FFDC8((llvm::StringMapImpl *)(*v20 + 8), "fast_atan", 9uLL);
    *(void *)(v21 + 8) = sub_22B200134;
    *(void *)(v21 + 16) = 0;
  }
  int v22 = v71 + 3;
  int v23 = v71[4];
  if (v23 != (llvm::Type *)(v71 + 3))
  {
    do
    {
      if (v23) {
        int v24 = (llvm::Type *)((char *)v23 - 56);
      }
      else {
        int v24 = 0;
      }
      int v23 = (llvm::Type *)*((void *)v23 + 1);
      uint64_t Name = (_DWORD *)llvm::Value::getName(v24);
      unsigned int v64 = 0;
      size_t v65 = 0;
      v63[0] = 0;
      v63[1] = 0;
      if (sub_22B1FF3E8(Name, v26, &v64, v63))
      {
        uint64_t v27 = v64;
        size_t v28 = v65;
        int Key = llvm::StringMapImpl::FindKey();
        uint64_t v30 = Key == -1 ? dword_2683E87F8 : Key;
        if (v30 != dword_2683E87F8)
        {
          uint64_t v31 = *((void *)v24 + 1);
          if (v31)
          {
            uint64_t v55 = qword_2683E87F0;
            do
            {
              while (1)
              {
                uint64_t v32 = *(llvm::Instruction **)(v31 + 24);
                uint64_t v31 = *(void *)(v31 + 8);
                if (((sub_22B1F50A8(v32) - ((void)v32 - 32 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                {
                  sub_22B1FFC54((uint64_t)&v67, (uint64_t)v32);
                  uint64_t v33 = *((void *)v32 - 4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF));
                  if (v33)
                  {
                    if (*(unsigned char *)(v33 + 16) == 84
                      && ((sub_22B1F50A8((llvm::CallBase *)v33) - (v33 + 32 * -(*(_DWORD *)(v33 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                    {
                      uint64_t v34 = *(void *)(v33 - 32);
                      if (v34)
                      {
                        if (!*(unsigned char *)(v34 + 16) && *(void *)(v34 + 24) == *(void *)(v33 + 72))
                        {
                          uint64_t v35 = (_DWORD *)llvm::Value::getName((llvm::Value *)v34);
                          unsigned int v61 = 0;
                          size_t v62 = 0;
                          if (sub_22B1FF3E8(v35, v36, &v61, &v60))
                          {
                            uint64_t v37 = *(void *)(v55 + 8 * v30);
                            size_t __len = v62;
                            unint64_t __src = v61;
                            uint64_t v38 = llvm::StringMapImpl::FindKey();
                            uint64_t v45 = v38 == -1 ? *(unsigned int *)(v37 + 16) : (int)v38;
                            if (*(void *)(v37 + 8) + 8 * v45 != *(void *)(*(void *)(v55 + 8 * v30) + 8)
                                                                 + 8
                                                                 * *(unsigned int *)(*(void *)(v55 + 8 * v30) + 16))
                            {
                              uint64_t v51 = *(void *)(v37 + 8) + 8 * v45;
                              if (v27)
                              {
                                uint64_t v38 = (uint64_t)sub_22B1E2118(__dst, v27, v28);
                                LOBYTE(v46) = __dst[0];
                                if (v59 >= 0) {
                                  uint64_t v46 = __dst;
                                }
                              }
                              else
                              {
                                __dst[0] = 0;
                                __dst[1] = 0;
                                uint64_t v46 = __dst;
                                uint64_t v59 = 0;
                              }
                              int v47 = __src;
                              if (__src)
                              {
                                char __srca = (char)v46;
                                uint64_t v38 = (uint64_t)sub_22B1E2118(__p, v47, __len);
                                LOBYTE(v46) = __srca;
                              }
                              else
                              {
                                __p[0] = 0;
                                __p[1] = 0;
                                uint64_t v57 = 0;
                              }
                              sub_22B1E69D0(v38, "Simplify Identity: %s(%s)", v39, v40, v41, v42, v43, v44, (char)v46);
                              if (SHIBYTE(v57) < 0) {
                                operator delete(__p[0]);
                              }
                              if (SHIBYTE(v59) < 0) {
                                operator delete(__dst[0]);
                              }
                              uint64_t v48 = *(void (**)(void *, void))(*(void *)v51 + 8);
                              uint64_t v49 = *(void *)(*(void *)v51 + 16);
                              uint64_t v50 = (void **)((char *)v78 + (v49 >> 1));
                              if (v49) {
                                uint64_t v48 = *(void (**)(void *, void))(*v50 + v48);
                              }
                              v48(v50, *(void *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF)));
                              llvm::Value::replaceAllUsesWith();
                              llvm::Instruction::eraseFromParent(v32);
                              if (!llvm::Value::getNumUses((llvm::Value *)v33)) {
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (!v31) {
                  goto LABEL_45;
                }
              }
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v33);
            }
            while (v31);
          }
        }
      }
LABEL_45:
      ;
    }
    while (v23 != (llvm::Type *)v22);
  }
  uint64_t v66 = &unk_26DE79C90;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v77);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v76);
  if (v74 != &v75) {
    free(v74);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v70);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v69);
  if (v67 != v68) {
    free(v67);
  }
}

void sub_22B2259A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9170))
  {
    qword_2683E9150 = 0;
    *(void *)&dword_2683E9158 = 0;
    qword_2683E9160 = 0x1800000000;
    __cxa_atexit((void (*)(void *))sub_22B22D840, &qword_2683E9150, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9170);
  }
}

void sub_22B225A2C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9198, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9198))
  {
    qword_2683E9178 = 0;
    *(void *)&dword_2683E9180 = 0;
    qword_2683E9188 = 0x800000000;
    __cxa_atexit((void (*)(void *))sub_22B22D7C4, &qword_2683E9178, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9198);
  }
}

void sub_22B225AB0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E91C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E91C0))
  {
    qword_2683E91A0 = 0;
    *(void *)&dword_2683E91A8 = 0;
    qword_2683E91B0 = 0x800000000;
    __cxa_atexit((void (*)(void *))sub_22B22D7C4, &qword_2683E91A0, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E91C0);
  }
}

void sub_22B225B34()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9210))
  {
    qword_2683E91F0 = 0;
    *(void *)&dword_2683E91F8 = 0;
    qword_2683E9200 = 0x800000000;
    __cxa_atexit((void (*)(void *))sub_22B22D7C4, &qword_2683E91F0, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9210);
  }
}

uint64_t sub_22B225BB8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 320);
  uint64_t v11 = "air.sampler_states";
  __int16 v12 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)&v11);
  if (result)
  {
    uint64_t v5 = (llvm::NamedMDNode *)result;
    for (unsigned int i = 0; ; ++i)
    {
      uint64_t result = llvm::NamedMDNode::getNumOperands(v5);
      if (i >= result) {
        break;
      }
      uint64_t Operand = llvm::NamedMDNode::getOperand(v5);
      uint64_t v8 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      if (v8)
      {
        if (*v8 - 1 > 1)
        {
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v9 = *((void *)v8 + 16);
          if (*(unsigned char *)(v9 + 16) == 3) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
        }
        sub_22B1D6788(a2, v10);
      }
    }
  }
  return result;
}

uint64_t sub_22B225C90(uint64_t result, unint64_t *a2)
{
  if (!result) {
    return result;
  }
  unsigned int v2 = *(unsigned __int8 *)(result + 16);
  unsigned int v3 = v2 - 28;
  if (v2 >= 0x1C) {
    goto LABEL_8;
  }
  if (v2 == 5)
  {
LABEL_6:
    unsigned int v3 = *(unsigned __int16 *)(result + 18);
LABEL_8:
    while ((v3 & 0xFFFFFFFE) == 0x30)
    {
      int v6 = *(_DWORD *)(result + 20);
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(uint64_t **)(result - 8);
      }
      else {
        uint64_t v7 = (uint64_t *)(result - 32 * (v6 & 0x7FFFFFF));
      }
      uint64_t result = *v7;
      unsigned int v2 = *(unsigned __int8 *)(*v7 + 16);
      if (result) {
        BOOL v8 = v2 >= 0x1C;
      }
      else {
        BOOL v8 = 0;
      }
      if (!v8)
      {
        if (result) {
          BOOL v9 = v2 == 5;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9) {
          goto LABEL_6;
        }
        goto LABEL_4;
      }
      unsigned int v3 = v2 - 28;
    }
    goto LABEL_21;
  }
LABEL_4:
  if (v2 != 16)
  {
LABEL_21:
    if (v2 != 3) {
      return 0;
    }
    uint64_t v10 = *(void *)(result - 32);
    if (!v10 || *(unsigned char *)(v10 + 16) != 16) {
      return 0;
    }
    std::string::size_type v4 = (unint64_t *)(v10 + 24);
    unsigned int v5 = *(_DWORD *)(v10 + 32);
    goto LABEL_25;
  }
  std::string::size_type v4 = (unint64_t *)(result + 24);
  unsigned int v5 = *(_DWORD *)(result + 32);
LABEL_25:
  if (v5 >= 0x41) {
    std::string::size_type v4 = (unint64_t *)*v4;
  }
  unint64_t v11 = *v4;
  if ((v11 & 0x8000000000000000) == 0) {
    return 0;
  }
  *a2 = v11;
  return 1;
}

uint64_t sub_22B225D5C(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v380 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v7 = (std::string *)((char *)a1 + *(void *)(*a1 - 24));
  std::string::size_type size = (unsigned char *)v7[14].__r_.__value_.__l.__size_;
  int v9 = *a3;
  if (size[1673]) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = a3[1] == 2;
  }
  if (v10)
  {
    if ((v9 & 0xFFFFFFFE) == 2)
    {
      unint64_t v11 = v7 + 17;
      __int16 v12 = "Read or write to cube texture not supported";
LABEL_17:
      std::string::append(v11, v12);
      return 0;
    }
  }
  else if (v9 == 3)
  {
    (*(void (**)(unsigned char *, uint64_t))(*(void *)size + 288))(size, a1[19]);
    uint64_t v6 = *a1;
    int v9 = *a3;
  }
  if (*(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v6 - 24) + 344) + 1663)) {
    BOOL v13 = v9 == 8;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t *))(v6 + 304))(a1);
    if (v14)
    {
      if (*(unsigned char *)(v14 + 35))
      {
        unint64_t v11 = (std::string *)((char *)a1 + *(void *)(*a1 - 24) + 408);
        __int16 v12 = "Large MRT not supported with image block write";
        goto LABEL_17;
      }
    }
  }
  uint64_t v354 = llvm::PointerType::get();
  llvm::StructType::get();
  uint64_t v16 = *a1;
  int v325 = *((unsigned __int8 *)a3 + 32);
  if (*((unsigned char *)a3 + 32)) {
    BOOL v17 = *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v16 - 24) + 344) + 1644) != 0;
  }
  else {
    BOOL v17 = 0;
  }
  uint64_t v18 = *(void *)(v16 - 24);
  uint64_t v19 = *(void *)(a2 + 8);
  uint64_t v15 = 1;
  if (!v19) {
    return v15;
  }
  std::string v321 = a1 + 43;
  uint64_t v319 = a1 + 1;
  int v316 = *(unsigned __int8 *)(*(uint64_t *)((char *)a1 + v18 + 344) + 1661);
  int v329 = *(unsigned __int8 *)(**(void **)(*(void *)(a2 + 24) + 16) + 8);
  int v333 = !v17;
  unsigned int v320 = *a3 & 0xFFFFFFFE;
  uint64_t v317 = a1 + 95;
  BOOL v324 = v17;
  while (1)
  {
    while (1)
    {
      uint64_t v20 = *(llvm::Instruction **)(v19 + 24);
      uint64_t v19 = *(void *)(v19 + 8);
      sub_22B1FFC54((uint64_t)a1 + *(void *)(*a1 - 24) + 8, (uint64_t)v20);
      uint64_t v354 = *(void *)a3;
      BOOL v358 = 0;
      long long v359 = 0u;
      long long v360 = 0u;
      memset(v361, 0, 26);
      uint64_t v365 = 0;
      long long v363 = 0u;
      long long v364 = 0u;
      long long v362 = 0u;
      long long v367 = 0u;
      memset(v368, 0, 28);
      uint64_t v369 = 0;
      uint64_t v370 = 0;
      char v372 = 0;
      uint64_t v371 = 0;
      char v373 = 1;
      uint64_t v374 = 0;
      int v21 = a3[3];
      int v366 = 4;
      uint64_t v22 = *((_DWORD *)v20 + 5) & 0x7FFFFFF;
      int v357 = 0;
      int v355 = v21;
      int v23 = (_DWORD *)((char *)v20 - 32 * v22);
      if (*((unsigned char *)a3 + 23)) {
        int v24 = *(unsigned __int8 **)&v23[8 * *((unsigned __int8 *)a3 + 23)];
      }
      else {
        int v24 = 0;
      }
      uint64_t v25 = *(unsigned __int8 **)&v23[8 * *((unsigned __int8 *)a3 + 22)];
      if (v25 && v25[16] - 11 < 2) {
        goto LABEL_31;
      }
      if (!v24) {
        break;
      }
      if (v24[16] - 11 >= 2)
      {
        unint64_t v353 = 0;
        int v26 = sub_22B225C90((uint64_t)v24, &v353);
        if (!v25) {
          goto LABEL_38;
        }
        goto LABEL_36;
      }
LABEL_31:
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v20);
      if (!v19) {
        return 1;
      }
    }
    int v26 = 0;
    unint64_t v353 = 0;
    if (!v25) {
      goto LABEL_38;
    }
LABEL_36:
    if (*(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v25) + 16) >= 0x15u
      && !(*(unsigned int (**)(uint64_t *))(*a1 + 272))(a1))
    {
      goto LABEL_325;
    }
LABEL_38:
    if ((v26 & 1) == 0)
    {
      char v31 = (*(uint64_t (**)(uint64_t *))(*a1 + 288))(a1);
      if (v24)
      {
        if ((v31 & 1) == 0 && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v24) + 16) > 0x14u) {
          goto LABEL_325;
        }
      }
    }
    if (((v333 | v26 | (*(unsigned int (**)(uint64_t *))(*a1 + 232))(a1) ^ 1) & 1) == 0) {
      break;
    }
    __int16 v352 = 0;
    if (v26)
    {
      unint64_t v28 = v353;
      if (v17)
      {
        unint64_t v29 = ((v353 >> 16) & 0xF) - 1;
        if (v29 > 7) {
          LOBYTE(v30) = 0;
        }
        else {
          int v30 = dword_22B26FE64[v29];
        }
        __int16 v352 = (32 * ((v353 & 0x6000) != 0)) | (((v353 & 0x6000) == 0x4000) << 6) | (((v353 & 0x1800) == 2048) << 7) | (((v353 & 0x600) == 512) << 8) | v30 & 0xF;
        unint64_t v28 = v353 & 0xFFFFFFFFFFF0FFFFLL;
      }
      if (v320 == 4 && *(unsigned char *)(*(void *)((char *)v321 + *(void *)(*a1 - 24)) + 1646)) {
        unint64_t v28 = v28 & 0xFFFFFFFFFFFF81FFLL | 0xA00;
      }
      int v24 = (unsigned __int8 *)sub_22B22BE28(a1, v28);
    }
    int v337 = (llvm::GlobalValue *)v25;
    uint64_t v32 = v19;
    int v33 = v26;
    BOOL v358 = (*a3 - 9) < 2;
    uint64_t v34 = *((unsigned __int8 *)a3 + 27);
    int v334 = v24;
    uint64_t v332 = v32;
    int v330 = v26;
    if (*((unsigned char *)a3 + 27))
    {
      uint64_t v35 = (_DWORD *)((char *)v20 - 32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      uint64_t v36 = *(void *)&v35[8 * v34];
      uint64_t v37 = (void *)(v36 + 24);
      if (*(_DWORD *)(v36 + 32) >= 0x41u) {
        uint64_t v37 = (void *)*v37;
      }
      if (*v37)
      {
        uint64_t v38 = *(unsigned __int8 **)&v35[8 * v34 + 8];
        if (!v38 || v38[16] > 0x14u)
        {
          uint64_t Splat = *(void *)&v35[8 * v34 + 8];
LABEL_72:
          *((void *)&v364 + 1) = Splat;
          BOOL v17 = v324;
          uint64_t v32 = v332;
          int v33 = v330;
          goto LABEL_73;
        }
        if ((llvm::Constant::isZeroValue((llvm::Constant *)v38) & 1) == 0)
        {
          if ((*(_DWORD *)(*(void *)v38 + 8) & 0xFE) == 0x12)
          {
            uint64_t v39 = *(unsigned int *)(*(void *)v38 + 32);
            llvm::ConstantInt::get();
            uint64_t Splat = llvm::ConstantDataVector::getSplat();
            if (v39)
            {
              for (uint64_t i = 0; i != v39; ++i)
              {
                uint64_t AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v38);
                uint64_t v43 = AggregateElement;
                unsigned int v44 = *(_DWORD *)(AggregateElement + 32);
                if (v44 > 0x40) {
                  uint64_t v45 = **(void **)(AggregateElement + 24);
                }
                else {
                  uint64_t v45 = (uint64_t)(*(void *)(AggregateElement + 24) << -(char)v44) >> -(char)v44;
                }
                if ((unint64_t)(v45 - 8) <= 0xFFFFFFFFFFFFFFEFLL) {
                  uint64_t v43 = llvm::ConstantInt::get();
                }
                uint64_t v46 = (char *)a1 + *(void *)(*a1 - 24);
                LOWORD(v379) = 257;
                uint64_t v47 = (uint64_t)(v46 + 8);
                uint64_t v48 = llvm::ConstantInt::get();
                uint64_t Splat = sub_22B2427EC(v47, Splat, v43, v48, (uint64_t)&v375);
                int v24 = v334;
              }
            }
          }
          else
          {
            unsigned int v99 = *((_DWORD *)v38 + 8);
            if (v99 > 0x40) {
              uint64_t v100 = **((void **)v38 + 3);
            }
            else {
              uint64_t v100 = (uint64_t)(*((void *)v38 + 3) << -(char)v99) >> -(char)v99;
            }
            uint64_t Splat = (uint64_t)v38;
            if ((unint64_t)(v100 - 8) <= 0xFFFFFFFFFFFFFFEFLL) {
              uint64_t Splat = llvm::ConstantInt::get();
            }
          }
          goto LABEL_72;
        }
      }
    }
LABEL_73:
    if (*((unsigned char *)a3 + 31) && v358)
    {
      uint64_t v49 = llvm::ConstantInt::get();
      LODWORD(Select) = v33;
    }
    else
    {
      LODWORD(Select) = v33;
      if (!*((unsigned char *)a3 + 31)) {
        goto LABEL_79;
      }
      uint64_t v49 = *((void *)v20 + 4 * *((unsigned __int8 *)a3 + 31) + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
    }
    uint64_t v365 = (llvm::Type **)v49;
LABEL_79:
    if (v329 == 16)
    {
      if (!v17) {
        HIBYTE(v357) = 1;
      }
      if (*((unsigned char *)a3 + 37)) {
        v368[1] = *((void *)v20 + 4 * *((unsigned __int8 *)a3 + 37) + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      }
    }
    uint64_t v51 = *((unsigned __int8 *)a3 + 29);
    if (*((unsigned char *)a3 + 29))
    {
      *((void *)&v367 + 1) = *((void *)v20 + 4 * v51 + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      v368[0] = *((void *)v20 + 4 * v51 + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF) + 4);
      int v366 = 2;
      goto LABEL_86;
    }
    if (*((unsigned char *)a3 + 28))
    {
      uint64_t v55 = (uint64_t *)((char *)v20 + 32 * *((unsigned __int8 *)a3 + 28) + -32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      uint64_t v56 = *v55;
      *(void *)&long long v367 = v55[4];
      uint64_t v57 = (void *)(v56 + 24);
      if (*(_DWORD *)(v56 + 32) >= 0x41u) {
        uint64_t v57 = (void *)*v57;
      }
      unsigned int v58 = (void *)*v57;
      int v366 = v58 != 0;
      if (!HIDWORD(v354))
      {
LABEL_312:
        int v366 = 3;
        *(void *)&long long v367 = 0;
        goto LABEL_86;
      }
      if (!v58 && ((*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1) & 1) == 0)
      {
        int v366 = 1;
        uint64_t NullValue = llvm::ConstantFP::get();
        goto LABEL_318;
      }
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
      {
        uint64_t v59 = *a1;
        if (*(unsigned char *)(*(void *)((char *)v321 + *(void *)(*a1 - 24)) + 1651))
        {
          int v366 = 0;
          uint64_t Select = *(void *)(v59 - 24);
          uint64_t v60 = sub_22B22AEA4(a1, (llvm::GlobalValue *)v24, 1u);
          LOWORD(v379) = 257;
          unsigned int v61 = (void *)((char *)v319 + Select);
          LODWORD(Select) = v33;
          uint64_t NullValue = sub_22B1D4240(v61, **(llvm::Type ***)(*(void *)v60 + 16), v60, 0, (uint64_t)&v375);
LABEL_318:
          *(void *)&long long v367 = NullValue;
        }
      }
    }
    else
    {
      uint64_t v70 = *((unsigned __int8 *)a3 + 30);
      if (!*((unsigned char *)a3 + 30))
      {
        if (*((unsigned char *)a3 + 39))
        {
          int v366 = 1;
          uint64_t NullValue = llvm::ConstantInt::get();
        }
        else
        {
          if (!v358) {
            goto LABEL_312;
          }
          int v366 = 0;
          uint64_t NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)((char *)a1 + *(void *)(*a1 - 24) + 152), v27);
        }
        goto LABEL_318;
      }
      if (HIDWORD(v354))
      {
        int v366 = 1;
        uint64_t v71 = *((void *)v20 + 4 * v70 + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      }
      else if (v354 == 3)
      {
        int v366 = 1;
        uint64_t v71 = llvm::ConstantInt::get();
      }
      else
      {
        uint64_t v71 = 0;
        int v366 = 3;
      }
      *(void *)&long long v367 = v71;
      if (v316 && (*a3 == 8 || *a3 == 3))
      {
        uint64_t v279 = *(void *)(*a1 - 24);
        uint64_t v280 = sub_22B228FA8((uint64_t)a1, v337, 7u);
        LOWORD(v379) = 257;
        uint64_t v281 = sub_22B1D4240((void *)((char *)v319 + v279), **(llvm::Type ***)(*(void *)v280 + 16), v280, 0, (uint64_t)&v375);
        v282 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
        uint64_t Select = (uint64_t)(v282 + 1);
        uint64_t v283 = v367;
        uint64_t v284 = sub_22B241FF8(v282, v281, *(void *)v367);
        LOWORD(v379) = 257;
        int v24 = v334;
        uint64_t v285 = Select;
        LODWORD(Select) = v33;
        uint64_t NullValue = sub_22B1D6A70(v285, v283, v284, (uint64_t)&v375);
        goto LABEL_318;
      }
    }
LABEL_86:
    if (v325) {
      v368[2] = sub_22B241B38((uint64_t)a1 + *(void *)(*a1 - 24), *((uint64_t **)v20 + 4 * *((unsigned __int8 *)a3 + 32) + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF)), 1);
    }
    uint64_t v19 = v32;
    if (*((unsigned char *)a3 + 33)) {
      uint64_t v369 = (llvm::Type **)*((void *)v20 + 4 * *((unsigned __int8 *)a3 + 33)
    }
                                            + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
    if (*((unsigned char *)a3 + 34)) {
      uint64_t v370 = *((void *)v20 + 4 * *((unsigned __int8 *)a3 + 34) + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
    }
    if (*((unsigned char *)a3 + 35)) {
      uint64_t v371 = (llvm::Type ***)*((void *)v20
    }
                             + 4 * *((unsigned __int8 *)a3 + 35)
                             + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
    if (*((unsigned char *)a3 + 36))
    {
      uint64_t v52 = *((void *)v20 + 4 * *((unsigned __int8 *)a3 + 36) + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      uint64_t v53 = (void *)(v52 + 24);
      if (*(_DWORD *)(v52 + 32) >= 0x41u) {
        uint64_t v53 = (void *)*v53;
      }
      char v54 = *(unsigned char *)v53;
      goto LABEL_109;
    }
    if (v320 == 4)
    {
      char v54 = 0;
LABEL_109:
      char v372 = v54;
    }
    int v63 = *a3;
    uint64_t v64 = *a1;
    if (v24 || v63 == 8)
    {
      uint64_t v322 = 0;
      goto LABEL_141;
    }
    __p[0] = (void *)4;
    __p[1] = 0;
    int v350 = 0;
    if (!(*(unsigned int (**)(uint64_t *))(v64 + 232))(a1))
    {
      if (HIDWORD(v354)) {
        uint64_t v67 = "agc.nnorm_sampler_wrapper_non_1d";
      }
      else {
        uint64_t v67 = "agc.nnorm_sampler_wrapper_1d";
      }
      uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
      if (GlobalVariable)
      {
        uint64_t v69 = GlobalVariable;
      }
      else
      {
        if (HIDWORD(v354)) {
          uint64_t v72 = "agc.nnorm_sampler_non_1d";
        }
        else {
          uint64_t v72 = "agc.nnorm_sampler_1d";
        }
        char v73 = 1;
        char v74 = (char *)llvm::User::operator new((llvm::User *)0x58);
        BYTE1(v379) = 1;
        if (*v72)
        {
          uint64_t v375 = (char *)v72;
          char v75 = 3;
        }
        else
        {
          char v75 = 1;
        }
        LOBYTE(v379) = v75;
        llvm::GlobalVariable::GlobalVariable();
        v74[80] |= 1u;
        unint64_t v101 = *(unsigned int *)(*(void *)((char *)v321 + *(void *)(*a1 - 24)) + 1604);
        unint64_t v102 = __clz(v101) ^ 0x13F;
        if (v101) {
          unint64_t v103 = v102;
        }
        else {
          unint64_t v103 = 0;
        }
        unint64_t v315 = v103 | v315 & 0xFFFFFFFFFFFF0000;
        llvm::GlobalObject::setAlignment();
        llvm::GlobalObject::setSection();
        sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
        uint64_t v375 = v74;
        llvm::ConstantStruct::get();
        uint64_t v69 = llvm::User::operator new((llvm::User *)0x58);
        BYTE1(v379) = 1;
        if (*v67)
        {
          uint64_t v375 = (char *)v67;
          char v73 = 3;
        }
        LOBYTE(v379) = v73;
        llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v69 + 80) |= 1u;
        llvm::GlobalVariable::setInitializer();
        uint64_t v375 = (char *)4;
        uint64_t v376 = 0;
        unint64_t v104 = v69;
        unint64_t v377 = v69;
        if (v69 != -8192)
        {
          unint64_t v104 = v69;
          if (v69 != -4096)
          {
            unint64_t v104 = v69;
            if (v69)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v375);
              unint64_t v104 = v377;
            }
          }
        }
        sub_22B22C248(v317, v104, &v375);
        int v24 = v334;
        if (v377 != -8192 && v377 != -4096 && v377) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v375);
        }
      }
      sub_22B212008((llvm::ValueHandleBase *)__p, v69);
      LODWORD(Select) = v330;
      goto LABEL_136;
    }
    if (*a3 == 3)
    {
      unint64_t v66 = 0x807BFF0000002049;
      if (a3[1]) {
        goto LABEL_134;
      }
LABEL_117:
      unint64_t v65 = v66 & 0xFFFFFFFFFFFF9FFFLL;
      goto LABEL_135;
    }
    unint64_t v65 = 0x807BFF0000002049;
    if (*a3 == 2)
    {
      unint64_t v66 = 0x807BFF0000002000;
      if (*((unsigned char *)a3 + 39)
        || (unint64_t v66 = ((unint64_t)*((unsigned __int8 *)a1 + 10) << 6) | (8 * *((unsigned __int8 *)a1 + 10)) | *((unsigned __int8 *)a1 + 10) | 0x807BFF0000002000,
            a3[1]))
      {
LABEL_134:
        unint64_t v65 = v66 & 0xFFFFFFFFFFFF9FFFLL | 0x2000;
        goto LABEL_135;
      }
      goto LABEL_117;
    }
LABEL_135:
    uint64_t v76 = sub_22B22BE28(a1, v65);
    sub_22B212008((llvm::ValueHandleBase *)__p, v76);
LABEL_136:
    uint64_t v322 = sub_22B243400(v350);
    if (v350 != (llvm::GlobalValue *)-8192 && v350 != (llvm::GlobalValue *)-4096 && v350) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)__p);
    }
    uint64_t v64 = *a1;
LABEL_141:
    sub_22B1FFC54((uint64_t)a1 + *(void *)(v64 - 24) + 8, (uint64_t)v20);
    uint64_t v77 = (llvm::Type ***)*((void *)v20 + 4 * *((unsigned __int8 *)a3 + 26) + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
    *(void *)&long long v364 = v77;
    if ((a3[1] & 0xFFFFFFFE) == 2)
    {
      uint64_t v77 = (llvm::Type ***)sub_22B242678((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)v77, 4);
      uint64_t v327 = 0;
LABEL_193:
      *(void *)&long long v364 = v77;
      goto LABEL_194;
    }
    if (*((unsigned char *)a3 + 39))
    {
      int v78 = a3[2];
      uint64_t v79 = a1 + 29;
      if (v78 == 1) {
        uint64_t v79 = a1 + 30;
      }
      uint64_t v80 = *(void *)((char *)v79 + *(void *)(*a1 - 24));
      uint64_t v81 = sub_22B22BACC(a1, v337);
      uint64_t v318 = llvm::ConstantInt::get();
      uint64_t v82 = llvm::ConstantInt::get();
      uint64_t v83 = *(void *)(*a1 - 24);
      char v84 = (llvm::Type ***)v364;
      if (v78 != 1)
      {
        char v85 = (char *)a1 + v83;
        uint64_t v86 = *(uint64_t *)((char *)a1 + v83 + 192);
        if ((*(_DWORD *)(*(void *)v364 + 8) & 0xFE) == 0x12) {
          uint64_t v86 = llvm::FixedVectorType::get();
        }
        if ((*(_DWORD *)(v86 + 8) & 0xFE) == 0x12) {
          unsigned int v87 = *(unsigned __int8 *)(**(void **)(v86 + 16) + 8);
        }
        else {
          unsigned int v87 = *(_DWORD *)(v86 + 8);
        }
        uint64_t v88 = (uint64_t)(v85 + 8);
        LOWORD(v379) = 257;
        if (v87 > 6) {
          uint64_t v89 = sub_22B1D7384(v88, 39, (uint64_t)v84, v86, (uint64_t)&v375);
        }
        else {
          uint64_t v89 = sub_22B1EEEB4(v88, (uint64_t)v84, v86, (uint64_t)&v375);
        }
        char v84 = (llvm::Type ***)v89;
      }
      *(void *)&long long v364 = v84;
      uint64_t v90 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
      LOWORD(v379) = 257;
      uint64_t v327 = sub_22B1D4340(v90, 36, v84, v81, (uint64_t)&v375);
      int v91 = *a3;
      if (*a3 == 3)
      {
        uint64_t v92 = *(void *)((char *)v321 + *(void *)(*a1 - 24));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v92 + 520))(v92))
        {
          uint64_t v93 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 56);
          uint64_t v375 = "skip_texture_buffer_write";
          LOWORD(v379) = 259;
          llvm::BasicBlock::splitBasicBlock();
          uint64_t v94 = *(void *)(v93 + 40);
          if (v94 == v93 + 40)
          {
            uint64_t v97 = 0;
          }
          else
          {
            uint64_t v95 = (llvm::Instruction *)(v94 - 24);
            if (v94) {
              uint64_t v96 = v94 - 24;
            }
            else {
              uint64_t v96 = 0;
            }
            if (*(unsigned __int8 *)(v96 + 16) - 29 >= 0xB) {
              uint64_t v97 = 0;
            }
            else {
              uint64_t v97 = v95;
            }
          }
          llvm::Instruction::eraseFromParent(v97);
          uint64_t v375 = "texture_buffer_write";
          LOWORD(v379) = 259;
          operator new();
        }
        int v91 = *a3;
      }
      if (v91 == 2)
      {
        uint64_t v98 = *(void *)((char *)v321 + *(void *)(*a1 - 24));
        (*(uint64_t (**)(uint64_t))(*(void *)v98 + 520))(v98);
      }
      llvm::ConstantInt::get();
      LOWORD(v379) = 257;
      *(void *)&long long v364 = llvm::IRBuilderBase::CreateSelect();
      uint64_t v105 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      LOWORD(v379) = 257;
      uint64_t v106 = sub_22B1D6F68(v105, v364, v318, (uint64_t)&v375);
      uint64_t v107 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      LOWORD(v379) = 257;
      uint64_t v108 = sub_22B1D7B18(v107, v364, v82, (uint64_t)&v375);
      uint64_t v109 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v110 = **(void **)(v80 + 16);
      LOWORD(v379) = 257;
      uint64_t v111 = sub_22B22C314(v109, v106, v110, (uint64_t)&v375);
      uint64_t v112 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v113 = **(void **)(v80 + 16);
      LOWORD(v379) = 257;
      uint64_t v114 = sub_22B22C314(v112, v108, v113, (uint64_t)&v375);
      uint64_t v115 = llvm::UndefValue::get();
      uint64_t v116 = (char *)a1 + *(void *)(*a1 - 24);
      LOWORD(v379) = 257;
      uint64_t v117 = (uint64_t)(v116 + 8);
      uint64_t v118 = llvm::ConstantInt::get();
      uint64_t Select = sub_22B2427EC(v117, v115, v111, v118, (uint64_t)&v375);
      char v119 = (char *)a1 + *(void *)(*a1 - 24);
      LOWORD(v379) = 257;
      uint64_t v120 = (uint64_t)(v119 + 8);
      uint64_t v121 = llvm::ConstantInt::get();
      uint64_t v77 = (llvm::Type ***)sub_22B2427EC(v120, Select, v114, v121, (uint64_t)&v375);
      BOOL v17 = v324;
      LODWORD(Select) = v330;
      int v24 = v334;
      goto LABEL_193;
    }
    uint64_t v327 = 0;
LABEL_194:
    uint64_t v122 = (uint64_t)a1 + *(void *)(*a1 - 24);
    if (*(unsigned char *)(*(void *)(v122 + 344) + 1689) && !*((unsigned char *)a1 + 15))
    {
      int v123 = *a3;
      int v323 = v63;
      if (*a3 == 3)
      {
        uint64_t v124 = v19;
        int v125 = Select;
        if (a3[2] == 1) {
          *(void *)&long long v364 = sub_22B243324(v122, v77, 16, 0);
        }
        uint64_t v126 = llvm::ConstantInt::get();
        if (*((unsigned char *)a3 + 31))
        {
          uint64_t v127 = *(void *)(*a1 - 24);
          uint64_t v128 = sub_22B228FA8((uint64_t)a1, *((llvm::GlobalValue **)v20 - 4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF)), 2u);
          LOWORD(v379) = 257;
          uint64_t v129 = sub_22B1D4240((void *)((char *)v319 + v127), **(llvm::Type ***)(*(void *)v128 + 16), v128, 0, (uint64_t)&v375);
          uint64_t v130 = (char *)a1 + *(void *)(*a1 - 24);
          LOWORD(v379) = 257;
          uint64_t v131 = (uint64_t)(v130 + 8);
          uint64_t v132 = llvm::ConstantInt::get();
          unint64_t v133 = (llvm::Type **)sub_22B242524(v131, v129, v132, (uint64_t)&v375);
          unint64_t v134 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
          uint64_t v135 = (llvm::Type ***)v365;
          uint64_t v136 = *v365;
          LOWORD(v379) = 257;
          uint64_t v137 = sub_22B1E375C((uint64_t)v134, v133, v136, (uint64_t)&v375);
          __int16 v351 = 257;
          uint64_t v138 = sub_22B1D4340(v134, 34, v135, v137, (uint64_t)__p);
          __int16 v348 = 257;
          uint64_t v126 = sub_22B1D7014((uint64_t)v134, v126, v138, (uint64_t)&v347);
        }
        if (*((unsigned char *)a3 + 35))
        {
          unint64_t v139 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
          uint64_t v140 = v371;
          uint64_t v141 = llvm::ConstantInt::get();
          LOWORD(v379) = 257;
          uint64_t v142 = sub_22B1D4340(v139, 34, v140, v141, (uint64_t)&v375);
          __int16 v351 = 257;
          sub_22B1D7014((uint64_t)v139, v126, v142, (uint64_t)__p);
        }
        int v24 = v334;
        uint64_t v143 = v364;
        int v144 = (char *)a1 + *(void *)(*a1 - 24);
        if ((*(_DWORD *)(*(void *)v364 + 8) & 0xFE) == 0x12)
        {
          LOWORD(v379) = 257;
          uint64_t v145 = (uint64_t)(v144 + 8);
          uint64_t v146 = llvm::ConstantInt::get();
          sub_22B242524(v145, v143, v146, (uint64_t)&v375);
          uint64_t v147 = v364;
          BOOL v148 = (char *)a1 + *(void *)(*a1 - 24);
          llvm::ConstantInt::get();
          LOWORD(v379) = 257;
          uint64_t Select = llvm::IRBuilderBase::CreateSelect();
          __int16 v351 = 257;
          uint64_t v149 = llvm::ConstantInt::get();
          *(void *)&long long v364 = sub_22B2427EC((uint64_t)(v148 + 8), v147, Select, v149, (uint64_t)__p);
          uint64_t v19 = v332;
          LODWORD(Select) = v330;
          int v24 = v334;
        }
        else
        {
          llvm::ConstantInt::get();
          LOWORD(v379) = 257;
          *(void *)&long long v364 = llvm::IRBuilderBase::CreateSelect();
          LODWORD(Select) = v125;
          uint64_t v19 = v124;
        }
        int v123 = *a3;
        int v63 = v323;
        BOOL v17 = v324;
      }
      if (v123 == 2)
      {
        int v150 = Select;
        uint64_t v151 = llvm::ConstantInt::get();
        if ((void)v367)
        {
          uint64_t v152 = *(void *)(*a1 - 24);
          uint64_t v153 = sub_22B228FA8((uint64_t)a1, v337, 5u);
          LOWORD(v379) = 257;
          uint64_t v154 = (llvm::Type **)sub_22B1D4240((void *)((char *)v319 + v152), **(llvm::Type ***)(*(void *)v153 + 16), v153, 0, (uint64_t)&v375);
          uint64_t v155 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
          uint64_t v156 = (llvm::Type ***)v367;
          uint64_t v157 = *(llvm::Type **)v367;
          LOWORD(v379) = 257;
          uint64_t v158 = sub_22B1E375C((uint64_t)v155, v154, v157, (uint64_t)&v375);
          __int16 v351 = 257;
          uint64_t v159 = sub_22B1D4340(v155, 34, v156, v158, (uint64_t)__p);
          __int16 v348 = 257;
          uint64_t v151 = sub_22B1D7014((uint64_t)v155, v151, v159, (uint64_t)&v347);
        }
        if (*((unsigned char *)a3 + 31))
        {
          uint64_t v160 = *(void *)(*a1 - 24);
          uint64_t v161 = sub_22B228FA8((uint64_t)a1, *((llvm::GlobalValue **)v20 - 4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF)), 2u);
          LOWORD(v379) = 257;
          uint64_t v162 = sub_22B1D4240((void *)((char *)v319 + v160), **(llvm::Type ***)(*(void *)v161 + 16), v161, 0, (uint64_t)&v375);
          std::string::size_type v163 = (char *)a1 + *(void *)(*a1 - 24);
          LOWORD(v379) = 257;
          uint64_t v164 = (uint64_t)(v163 + 8);
          uint64_t v165 = llvm::ConstantInt::get();
          std::string::size_type v166 = (llvm::Type **)sub_22B242524(v164, v162, v165, (uint64_t)&v375);
          size_t v167 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
          std::string::size_type v168 = (llvm::Type ***)v365;
          int v169 = *v365;
          LOWORD(v379) = 257;
          uint64_t v170 = sub_22B1E375C((uint64_t)v167, v166, v169, (uint64_t)&v375);
          __int16 v351 = 257;
          uint64_t v171 = sub_22B1D4340(v167, 34, v168, v170, (uint64_t)__p);
          __int16 v348 = 257;
          uint64_t v151 = sub_22B1D7014((uint64_t)v167, v151, v171, (uint64_t)&v347);
        }
        if (*((unsigned char *)a3 + 35))
        {
          uint64_t v172 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
          int v173 = v371;
          uint64_t v174 = llvm::ConstantInt::get();
          LOWORD(v379) = 257;
          uint64_t v175 = sub_22B1D4340(v172, 34, v173, v174, (uint64_t)&v375);
          __int16 v351 = 257;
          uint64_t v151 = sub_22B1D7014((uint64_t)v172, v151, v175, (uint64_t)__p);
        }
        if (*((unsigned char *)a3 + 33))
        {
          uint64_t v176 = *(void *)(*a1 - 24);
          uint64_t v177 = sub_22B228FA8((uint64_t)a1, v337, 6u);
          LOWORD(v379) = 257;
          uint64_t v178 = (llvm::Type **)sub_22B1D4240((void *)((char *)v319 + v176), **(llvm::Type ***)(*(void *)v177 + 16), v177, 0, (uint64_t)&v375);
          unsigned int v179 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
          unsigned int v180 = (llvm::Type ***)v369;
          unint64_t v181 = *v369;
          LOWORD(v379) = 257;
          uint64_t v182 = sub_22B1E375C((uint64_t)v179, v178, v181, (uint64_t)&v375);
          __int16 v351 = 257;
          uint64_t v183 = sub_22B1D4340(v179, 34, v180, v182, (uint64_t)__p);
          __int16 v348 = 257;
          sub_22B1D7014((uint64_t)v179, v151, v183, (uint64_t)&v347);
        }
        int v24 = v334;
        uint64_t v184 = v364;
        uint64_t v185 = (char *)a1 + *(void *)(*a1 - 24);
        if ((*(_DWORD *)(*(void *)v364 + 8) & 0xFE) == 0x12)
        {
          LOWORD(v379) = 257;
          uint64_t v186 = (uint64_t)(v185 + 8);
          uint64_t v187 = llvm::ConstantInt::get();
          sub_22B242524(v186, v184, v187, (uint64_t)&v375);
          uint64_t v188 = v364;
          uint64_t v189 = (char *)a1 + *(void *)(*a1 - 24);
          llvm::ConstantInt::get();
          LOWORD(v379) = 257;
          uint64_t Select = llvm::IRBuilderBase::CreateSelect();
          __int16 v351 = 257;
          uint64_t v190 = llvm::ConstantInt::get();
          *(void *)&long long v364 = sub_22B2427EC((uint64_t)(v189 + 8), v188, Select, v190, (uint64_t)__p);
          uint64_t v19 = v332;
          BOOL v17 = v324;
          LODWORD(Select) = v330;
          int v24 = v334;
        }
        else
        {
          llvm::ConstantInt::get();
          LOWORD(v379) = 257;
          *(void *)&long long v364 = llvm::IRBuilderBase::CreateSelect();
          BOOL v17 = v324;
          LODWORD(Select) = v150;
        }
        int v63 = v323;
      }
    }
    BYTE1(v357) = v333;
    if (*((unsigned char *)a3 + 20)) {
      char v191 = v333;
    }
    else {
      char v191 = 0;
    }
    LOBYTE(v357) = v191;
    *((void *)&v360 + 1) = sub_22B228FA8((uint64_t)a1, v337, 2u);
    v361[0] = sub_22B228FA8((uint64_t)a1, v337, 3u);
    int v192 = Select;
    if (*a3 == 8 || *a3 == 3)
    {
      *(void *)&long long v359 = sub_22B22C3FC(a1, v337);
      *(void *)&long long v360 = sub_22B228FA8((uint64_t)a1, v337, 1u);
      if ((*(uint64_t (**)(uint64_t *))(*a1 + 280))(a1)) {
        goto LABEL_229;
      }
      unsigned int v193 = 4;
      uint64_t Select = (uint64_t)&v361[1];
      uint64_t v194 = v337;
    }
    else
    {
      uint64_t v194 = v337;
      uint64_t v195 = sub_22B22C3FC(a1, v337);
      unsigned int v193 = 0;
      *(void *)&long long v359 = v195;
      uint64_t Select = (uint64_t)&v359 + 8;
    }
    *(void *)uint64_t Select = sub_22B228FA8((uint64_t)a1, v194, v193);
    LOBYTE(Select) = v192;
LABEL_229:
    if (v63 == 8)
    {
      uint64_t v196 = 32 * *((unsigned __int8 *)a3 + 24);
      *(void *)&long long v362 = *(void *)((char *)v20 + v196 + -32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      *((void *)&v362 + 1) = *(void *)((char *)v20 + v196 + -32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF) + 32);
      *(void *)&long long v363 = *(void *)((char *)v20 + v196 + -32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF) + 64);
      *((void *)&v363 + 1) = *(void *)((char *)v20 + v196 + -32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF) + 96);
      int v356 = a3[4];
      uint64_t v197 = *((void *)v20 + 4 * *((unsigned __int8 *)a3 + 38) + -4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      BOOL v198 = (void *)(v197 + 24);
      if (*(_DWORD *)(v197 + 32) >= 0x41u) {
        BOOL v198 = (void *)*v198;
      }
      if (*v198) {
        uint64_t v374 = (*(uint64_t (**)(uint64_t *))(*a1 + 304))(a1);
      }
      goto LABEL_236;
    }
    if (!v322)
    {
      if (v320 != 4
        || ((uint64_t v207 = *(void *)(*a1 - 24), !*(unsigned char *)(*(void *)((char *)v321 + v207) + 1646))
          ? (char v208 = 1)
          : (char v208 = Select),
            (v208 & 1) != 0))
      {
        v361[2] = sub_22B22AEA4(a1, (llvm::GlobalValue *)v24, 0);
        if (Select)
        {
          if (v17) {
            goto LABEL_239;
          }
          goto LABEL_256;
        }
        unsigned int v222 = v24[16];
        if (v222 == 3)
        {
          unint64_t v223 = (unsigned int *)(sub_22B22C4B0(a1[79], *((_DWORD *)a1 + 162), (uint64_t)v24) + 40);
LABEL_301:
          uint64_t v200 = *v223;
          if (v200 != -1) {
            BYTE2(v357) = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 256))(a1, v200) & 1;
          }
          goto LABEL_237;
        }
        if (v222 <= 0x14)
        {
          uint64_t PtrToInt = llvm::ConstantExpr::getPtrToInt();
          std::string::size_type v267 = (unsigned int *)(PtrToInt + 24);
          if (*(_DWORD *)(PtrToInt + 32) >= 0x41u) {
            std::string::size_type v267 = *(unsigned int **)v267;
          }
          unint64_t v223 = (unsigned int *)(a1[75] + 4 * *v267);
          goto LABEL_301;
        }
        goto LABEL_236;
      }
      unsigned int v258 = *((_DWORD *)a1 + 178);
      if (v258)
      {
        uint64_t v259 = a1[87];
        unsigned int v260 = ((v24 >> 4) ^ (v24 >> 9)) & (v258 - 1);
        uint64_t v261 = v259 + 48 * v260;
        long long v262 = *(unsigned __int8 **)(v261 + 24);
        if (v24 == v262)
        {
LABEL_293:
          if (v261 != v259 + 48 * v258)
          {
            long long v263 = *(llvm::GlobalValue **)(v261 + 40);
LABEL_346:
            uint64_t v306 = (uint64_t)a1 + v207 + 8;
            uint64_t v307 = sub_22B243400(v263);
            LODWORD(__p[0]) = 0;
            LOWORD(v379) = 257;
            v361[2] = sub_22B1D7940(v306, v307, (uint64_t)__p, 1, (uint64_t)&v375);
            uint64_t v200 = 0xFFFFFFFFLL;
            BOOL v17 = v324;
            goto LABEL_237;
          }
        }
        else
        {
          int v291 = 1;
          while (v262 != (unsigned __int8 *)-4096)
          {
            unsigned int v292 = v260 + v291++;
            unsigned int v260 = v292 & (v258 - 1);
            uint64_t v261 = v259 + 48 * v260;
            long long v262 = *(unsigned __int8 **)(v261 + 24);
            if (v24 == v262) {
              goto LABEL_293;
            }
          }
        }
      }
      uint64_t v336 = *(void *)(*a1 - 24);
      unint64_t v293 = *(unsigned int *)(sub_22B22C4B0(a1[79], *((_DWORD *)a1 + 162), (uint64_t)v24) + 40);
      char v294 = (char *)llvm::User::operator new((llvm::User *)0x58);
      uint64_t v375 = "agc.gather_sampler_words";
      unint64_t v377 = v293;
      LOWORD(v379) = 2051;
      uint64_t v295 = llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v295 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v297 = (uint64_t)v24;
      uint64_t v298 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(**(void **)(*(void *)v24 + 16) + 16) + 8), v296);
      unint64_t v299 = (llvm::Constant *)llvm::PointerType::get();
      uint64_t v301 = llvm::Constant::getNullValue(v299, v300);
      uint64_t v375 = v294;
      uint64_t v376 = v298;
      unint64_t v377 = v301;
      llvm::ConstantStruct::get();
      long long v263 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
      uint64_t v375 = "agc.gather_sampler_state_struct_ptr";
      unint64_t v377 = v293;
      LOWORD(v379) = 2051;
      uint64_t v302 = llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v302 + 80) |= 1u;
      llvm::GlobalVariable::setInitializer();
      sub_22B22A84C(&v375, v297);
      uint64_t v375 = (char *)&unk_26DE79C40;
      v379 = a1 + 87;
      __p[0] = 0;
      char v303 = sub_22B22A7B4(a1[87], *((_DWORD *)a1 + 178), v378, __p);
      std::string::size_type v304 = __p[0];
      if ((v303 & 1) == 0)
      {
        std::string::size_type v304 = (void *)sub_22B22A8B0((uint64_t)(a1 + 87), (uint64_t)&v375, (uint64_t)__p[0]);
        sub_22B21A918((llvm::ValueHandleBase *)(v304 + 1), &v376);
        v304[4] = v379;
        v304[5] = 0;
      }
      int v192 = v330;
      if (v378 != -8192 && v378 != -4096 && v378) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v376);
      }
      v304[5] = v263;
      uint64_t v375 = (char *)4;
      uint64_t v376 = 0;
      unint64_t v305 = (unint64_t)v263;
      unint64_t v377 = (unint64_t)v263;
      if (v263 != (llvm::GlobalValue *)-8192)
      {
        unint64_t v305 = (unint64_t)v263;
        if (v263 != (llvm::GlobalValue *)-4096)
        {
          unint64_t v305 = (unint64_t)v263;
          if (v263)
          {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v375);
            unint64_t v305 = v377;
          }
        }
      }
      sub_22B22C248(v317, v305, &v375);
      if (v377 != -8192 && v377 != -4096 && v377) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v375);
      }
      uint64_t v207 = v336;
      goto LABEL_346;
    }
    uint64_t v199 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    LODWORD(__p[0]) = 0;
    LOWORD(v379) = 257;
    v361[2] = sub_22B1D7940(v199, v322, (uint64_t)__p, 1, (uint64_t)&v375);
LABEL_236:
    uint64_t v200 = 0xFFFFFFFFLL;
LABEL_237:
    if (v17)
    {
      if (v192)
      {
LABEL_239:
        uint64_t v201 = &v352;
      }
      else
      {
        LOWORD(v375) = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 240))(a1, v200);
        uint64_t v201 = (__int16 *)&v375;
      }
      uint64_t v206 = sub_22B22C514(a1, (uint64_t)&v354, v201);
      goto LABEL_258;
    }
    if (v325) {
      char v202 = v192;
    }
    else {
      char v202 = 1;
    }
    if ((v202 & 1) == 0 && ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 240))(a1, v200) & 0x10) != 0)
    {
      uint64_t v203 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v204 = *((void *)v203 + 43);
      long long v344 = *(_OWORD *)(v203 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v345, (llvm::IRBuilderBase *)(v203 + 8));
      int v346 = *((_DWORD *)v203 + 26);
      v368[2] = (*(uint64_t (**)(uint64_t, long long *, void, void))(*(void *)v204 + 40))(v204, &v344, v368[2], 0);
      if (v345) {
        llvm::MetadataTracking::untrack();
      }
    }
LABEL_256:
    uint64_t v209 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v210 = *((void *)v209 + 43);
    long long v341 = *(_OWORD *)(v209 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v342, (llvm::IRBuilderBase *)(v209 + 8));
    int v343 = *((_DWORD *)v209 + 26);
    uint64_t v206 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *))(*(void *)v210 + 248))(v210, &v341, &v354);
    uint64_t v205 = v342;
    if (v342) {
      llvm::MetadataTracking::untrack();
    }
LABEL_258:
    if (v206)
    {
      uint64_t v211 = v206;
      if (v329 == 16)
      {
        uint64_t v211 = v206;
        if (!HIBYTE(v357))
        {
          uint64_t v212 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v213 = *((void *)v212 + 43);
          long long v338 = *(_OWORD *)(v212 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v339, (llvm::IRBuilderBase *)(v212 + 8));
          int v340 = *((_DWORD *)v212 + 26);
          uint64_t v211 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v213 + 264))(v213, &v338, v206);
          uint64_t v205 = v339;
          if (v339) {
            llvm::MetadataTracking::untrack();
          }
        }
      }
      if (v327)
      {
        uint64_t v214 = *(void *)((char *)v321 + *(void *)(*a1 - 24));
        int v215 = (*(uint64_t (**)(uint64_t))(*(void *)v214 + 520))(v214);
      }
      else
      {
        int v215 = 0;
      }
      BOOL v216 = a3[1] == 2 && *((unsigned char *)a1 + 15) == 0;
      int v217 = *a3;
      if (*a3 == 2 && v215 | v216)
      {
        uint64_t v218 = (llvm::Constant **)v206;
        if (v329 == 16)
        {
          uint64_t v219 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          LODWORD(__p[0]) = 0;
          LOWORD(v379) = 257;
          uint64_t v218 = (llvm::Constant **)sub_22B1D7940(v219, v206, (uint64_t)__p, 1, (uint64_t)&v375);
        }
        uint64_t v326 = llvm::Constant::getNullValue(*v218, v205);
        if ((*((_DWORD *)*v218 + 2) & 0xFE) == 0x12) {
          char v335 = (llvm::Constant *)**((void **)*v218 + 2);
        }
        else {
          char v335 = *v218;
        }
        uint64_t v224 = *(void *)(*a1 - 24);
        uint64_t v225 = sub_22B228FA8((uint64_t)a1, v337, 2u);
        LOWORD(v379) = 257;
        uint64_t v226 = sub_22B1D4240((void *)((char *)v319 + v224), **(llvm::Type ***)(*(void *)v225 + 16), v225, 0, (uint64_t)&v375);
        BOOL v227 = (char *)a1 + *(void *)(*a1 - 24);
        LOWORD(v379) = 257;
        uint64_t v228 = (uint64_t)(v227 + 8);
        uint64_t v229 = llvm::ConstantInt::get();
        uint64_t v230 = sub_22B242524(v228, v226, v229, (uint64_t)&v375);
        uint64_t v231 = (uint64_t *)v230;
        if (v216)
        {
          long long v331 = v218;
          uint64_t v232 = (uint64_t *)v230;
          if ((void)v367)
          {
            uint64_t v233 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
            uint64_t v234 = *v231;
            LOWORD(v379) = 257;
            uint64_t v235 = sub_22B1D7384(v233, 39, v367, v234, (uint64_t)&v375);
            uint64_t v236 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
            LOWORD(v379) = 257;
            uint64_t v232 = (uint64_t *)sub_22B1D7B18(v236, (uint64_t)v231, v235, (uint64_t)&v375);
          }
          unint64_t v237 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v238 = v364;
          LOWORD(v379) = 257;
          uint64_t v239 = (uint64_t)(v237 + 8);
          uint64_t v240 = llvm::ConstantInt::get();
          uint64_t v241 = sub_22B242524(v239, v238, v240, (uint64_t)&v375);
          uint64_t v328 = (uint64_t)v232;
          uint64_t v242 = *v232;
          __int16 v351 = 257;
          int v243 = (llvm::Type ***)sub_22B1D7384(v239, 39, v241, v242, (uint64_t)__p);
          uint64_t v244 = *(void *)(*a1 - 24);
          uint64_t v245 = sub_22B228FA8((uint64_t)a1, v337, 4u);
          unsigned int v246 = **(llvm::Type ***)(*(void *)v245 + 16);
          uint64_t v375 = "packedFormatAndAlpha";
          LOWORD(v379) = 259;
          uint64_t v247 = sub_22B1D4240((void *)((char *)v319 + v244), v246, v245, 0, (uint64_t)&v375);
          uint64_t v248 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          uint64_t v249 = llvm::ConstantInt::get();
          uint64_t v375 = "alpha";
          LOWORD(v379) = 259;
          uint64_t v250 = sub_22B1D7B18(v248, v247, v249, (uint64_t)&v375);
          if (*((unsigned __int8 *)v335 + 8) <= 6u)
          {
            uint64_t v251 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
            LOWORD(v379) = 257;
            uint64_t v250 = sub_22B1DB6A8(v251, v250, (uint64_t)v335, (uint64_t)&v375);
          }
          uint64_t v252 = sub_22B241FF8((uint64_t *)((char *)a1 + *(void *)(*a1 - 24)), v250, (uint64_t)v335);
          if ((*((_DWORD *)*v331 + 2) & 0xFE) == 0x12)
          {
            uint64_t v253 = (char *)a1 + *(void *)(*a1 - 24);
            LOWORD(v379) = 257;
            uint64_t v254 = (uint64_t)(v253 + 8);
            uint64_t v255 = llvm::ConstantInt::get();
            sub_22B2427EC(v254, v326, v252, v255, (uint64_t)&v375);
          }
          int v268 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
          LOWORD(v379) = 257;
          uint64_t v269 = sub_22B1D4340(v268, 35, v243, v328, (uint64_t)&v375);
          uint64_t v270 = v364;
          if ((*(_DWORD *)(*(void *)v364 + 8) & 0xFE) == 0x12)
          {
            uint64_t v271 = (char *)a1 + *(void *)(*a1 - 24);
            LOWORD(v379) = 257;
            uint64_t v272 = (uint64_t)(v271 + 8);
            uint64_t v273 = llvm::ConstantInt::get();
            uint64_t v274 = sub_22B242524(v272, v270, v273, (uint64_t)&v375);
            uint64_t v275 = *v231;
            __int16 v351 = 257;
            uint64_t v276 = (llvm::Type ***)sub_22B1D7384(v272, 39, v274, v275, (uint64_t)__p);
            uint64_t v277 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 8);
            LOWORD(v379) = 257;
            uint64_t v278 = sub_22B1D4340(v277, 35, v276, v328, (uint64_t)&v375);
            __int16 v351 = 257;
            sub_22B1D7014((uint64_t)v277, v269, v278, (uint64_t)__p);
          }
          uint64_t v19 = v332;
          LOWORD(v379) = 257;
        }
        else
        {
          uint64_t v19 = v332;
          if (!v215) {
            goto LABEL_321;
          }
          if (*((unsigned __int8 *)v335 + 8) <= 6u)
          {
            uint64_t v256 = *(void *)(*a1 - 24);
            uint64_t v257 = *(uint64_t *)((char *)a1 + v256 + 160);
            LOWORD(v379) = 257;
            uint64_t v231 = (uint64_t *)sub_22B1D7384((uint64_t)a1 + v256 + 8, 49, v230, v257, (uint64_t)&v375);
          }
          uint64_t v286 = sub_22B241FF8((uint64_t *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t)v231, (uint64_t)v335);
          char v287 = (char *)a1 + *(void *)(*a1 - 24);
          LOWORD(v379) = 257;
          uint64_t v288 = (uint64_t)(v287 + 8);
          uint64_t v289 = llvm::ConstantInt::get();
          sub_22B2427EC(v288, v326, v286, v289, (uint64_t)&v375);
          LOWORD(v379) = 257;
        }
        uint64_t v211 = llvm::IRBuilderBase::CreateSelect();
LABEL_321:
        if (v329 == 16)
        {
          uint64_t v290 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          LODWORD(__p[0]) = 0;
          LOWORD(v379) = 257;
          sub_22B1D6D44(v290, v206, v211, (uint64_t)__p, 1, (uint64_t)&v375);
        }
        goto LABEL_323;
      }
      uint64_t v19 = v332;
      if (v217 == 10)
      {
        int v264 = (char *)a1 + *(void *)(*a1 - 24);
        LOWORD(v379) = 257;
        uint64_t v221 = (uint64_t)(v264 + 8);
      }
      else
      {
        if (v217 != 9)
        {
LABEL_323:
          llvm::Value::replaceAllUsesWith();
          BOOL v17 = v324;
          goto LABEL_324;
        }
        uint64_t v220 = (char *)a1 + *(void *)(*a1 - 24);
        LOWORD(v379) = 257;
        uint64_t v221 = (uint64_t)(v220 + 8);
      }
      uint64_t v265 = llvm::ConstantInt::get();
      sub_22B242524(v221, v206, v265, (uint64_t)&v375);
      goto LABEL_323;
    }
LABEL_324:
    llvm::Instruction::eraseFromParent(v20);
LABEL_325:
    if (!v19) {
      return 1;
    }
  }
  uint64_t v309 = sub_22B1D7BF0(&v375, "sample");
  if (*a3 == 1)
  {
    int64_t v310 = "sample_compare";
LABEL_353:
    MEMORY[0x230F433D0](v309, v310);
  }
  else if (*a3 == 5)
  {
    int64_t v310 = "gather_compare";
    goto LABEL_353;
  }
  std::operator+<char>();
  char v311 = std::string::append(&v347, " must be known at compile time");
  char v312 = (llvm::GlobalValue *)v311->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v311->__r_.__value_.__l.__data_;
  int v350 = v312;
  v311->__r_.__value_.__l.__size_ = 0;
  v311->__r_.__value_.__r.__words[2] = 0;
  v311->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v350) >= 0) {
    char v313 = __p;
  }
  else {
    char v313 = (void **)__p[0];
  }
  if (SHIBYTE(v350) >= 0) {
    std::string::size_type v314 = HIBYTE(v350);
  }
  else {
    std::string::size_type v314 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)((char *)a1 + *(void *)(*a1 - 24) + 408), (const std::string::value_type *)v313, v314);
  if (SHIBYTE(v350) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v347.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v377) < 0) {
    operator delete(v375);
  }
  return 0;
}

uint64_t sub_22B228FA8(uint64_t a1, llvm::GlobalValue *this, unsigned int a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_22B229390(this);
  if (v6) {
    return *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * a3);
  }
  if (a3 != 8)
  {
    uint64_t v8 = sub_22B229420((void *)a1, this);
    if (v8) {
      goto LABEL_6;
    }
  }
  uint64_t v9 = *(void *)(*(void *)a1 - 24);
  if (!*(unsigned char *)(*(void *)(a1 + v9 + 344) + 1678) && (a3 > 8 || ((1 << a3) & 0x103) == 0))
  {
    uint64_t v8 = sub_22B229E6C(a1, this);
LABEL_6:
    return sub_22B2294BC(a1, v8, a3);
  }
  BOOL v10 = *(uint64_t **)(a1 + 984 + 56 * a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + v9 + 184);
    __int16 v27 = 257;
    uint64_t v12 = sub_22B1D7384(v9 + a1 + 8, 47, (uint64_t)this, v11, (uint64_t)v26);
    if (*(unsigned char *)(a1 + 2385))
    {
      uint64_t v13 = a1 + *(void *)(*(void *)a1 - 24);
      unint64_t v28 = (uint64_t *)sub_22B1D8210((llvm::DataLayout *)(a1 + 168), *(llvm::Type **)(*(void *)(v13 + 344) + 1576));
      uint64_t v29 = v14;
      llvm::TypeSize::operator unsigned long long();
      uint64_t v15 = llvm::ConstantInt::get();
      __int16 v27 = 257;
      uint64_t v12 = sub_22B208338(v13 + 8, v12, v15, (uint64_t)v26);
    }
    uint64_t v16 = a1 + *(void *)(*(void *)a1 - 24);
    if (a3 > 1 || *(unsigned __int8 *)(v12 + 16) < 0x15u)
    {
      unint64_t v28 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v29 = v12;
      __int16 v27 = 257;
      return sub_22B229F08(v16, v10, &v28, 2, (uint64_t)v26);
    }
    else
    {
      uint64_t v17 = llvm::PointerType::get();
      uint64_t v18 = sub_22B1D7FA8(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)"llvm.agx.textureState", 21, v17, v17, *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 200));
      uint64_t v19 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      __int16 v27 = 257;
      v31[0] = sub_22B1D7384(v19, 49, (uint64_t)v10, v17, (uint64_t)v26);
      uint64_t v20 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v21 = *(void *)(v20 + 200);
      __int16 v30 = 257;
      v31[1] = sub_22B1D7384(v20 + 8, 39, v12, v21, (uint64_t)&v28);
      v25[16] = 257;
      uint64_t v22 = sub_22B1D4034(v19, *(void *)(v18 + 24), v18, (uint64_t)v31, 2, (uint64_t)v25);
      uint64_t v23 = a1 + *(void *)(*(void *)a1 - 24) + 8;
      uint64_t v24 = llvm::PointerType::get();
      __int16 v27 = 257;
      return sub_22B1D7384(v23, 49, (uint64_t)v22, v24, (uint64_t)v26);
    }
  }
  else
  {
    llvm::PointerType::get();
    return llvm::UndefValue::get();
  }
}

uint64_t sub_22B229390(llvm::GlobalValue *this)
{
  while (1)
  {
    unsigned int v2 = *((unsigned __int8 *)this + 16);
    if (v2 > 0x1B)
    {
      if (v2 != 77) {
        return 0;
      }
      goto LABEL_6;
    }
    if (v2 != 5) {
      break;
    }
    if (*((_WORD *)this + 9) != 49) {
      return 0;
    }
LABEL_6:
    int v3 = *((_DWORD *)this + 5);
    if ((v3 & 0x40000000) != 0) {
      std::string::size_type v4 = (llvm::GlobalValue **)*((void *)this - 1);
    }
    else {
      std::string::size_type v4 = (llvm::GlobalValue **)((char *)this - 32 * (v3 & 0x7FFFFFF));
    }
    this = *v4;
  }
  if (v2 != 3 || (llvm::GlobalValue::isDeclaration(this) & 1) != 0) {
    return 0;
  }
  return *((void *)this - 4);
}

uint64_t sub_22B229420(void *a1, void *a2)
{
  std::string::size_type v4 = sub_22B22A358((llvm::SmallPtrSetImplBase *)(a1 + 111), a2);
  uint64_t v5 = a1[112];
  uint64_t v6 = 904;
  if (v5 == a1[111]) {
    uint64_t v6 = 908;
  }
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)((char *)a1 + v6))) {
    return 0;
  }
  uint64_t v7 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v8 = *((void *)v7 + 24);
  __int16 v11 = 257;
  return sub_22B1D7384((uint64_t)(v7 + 8), 47, (uint64_t)a2, v8, (uint64_t)v10);
}

uint64_t sub_22B2294BC(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = a3 == 1;
  uint64_t v7 = a1 + 24 * v6;
  uint64_t v8 = *(void *)(v7 + 1904);
  if (!v8)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9148, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_2683E9148))
    {
      uint64_t v41 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
      dword_2683E9128[0] = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 304))(v41);
      uint64_t v42 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
      dword_2683E912C = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 160))(v42);
      dword_2683E9130 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344)
                                                           + 792)
                                             + 312))();
      uint64_t v43 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
      dword_2683E9134 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 168))(v43);
      dword_2683E9138 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344)
                                                           + 792)
                                             + 320))();
      uint64_t v44 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
      dword_2683E913C = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 176))(v44);
      dword_2683E9140 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344)
                                                           + 792)
                                             + 328))();
      uint64_t v45 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
      dword_2683E9144 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 184))(v45);
      __cxa_guard_release(&qword_2683E9148);
    }
    uint64_t v9 = (llvm::ValueHandleBase *)(v7 + 1888);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 2385);
    BOOL v11 = (*(unsigned int (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 32))(a1 + *(void *)(*(void *)a1 - 24)) != 2
       && (*(unsigned int (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 32))(a1 + *(void *)(*(void *)a1 - 24)) != 16;
    uint64_t v12 = dword_2683E9128[4 * v10 + 2 * v6 + v11];
    uint64_t v13 = llvm::PointerType::get();
    v68[0] = "agc.texture_heap.";
    v68[2] = v12;
    __int16 v69 = 2051;
    uint64_t v14 = sub_22B22A000((uint64_t *)a1, v13, (uint64_t)v68, v12, 0);
    sub_22B212008(v9, v14);
    uint64_t v8 = *((void *)v9 + 2);
  }
  uint64_t v15 = 0;
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v16 = a1 + *(void *)(*(void *)a1 - 24) + 8;
      uint64_t v17 = llvm::PointerType::get();
      __int16 v69 = 257;
      uint64_t v15 = sub_22B1D7384(v16, 49, v8, v17, (uint64_t)v68);
      break;
    case 2:
      uint64_t v46 = (uint64_t *)a2;
      uint64_t v18 = (llvm::Type *)llvm::FixedVectorType::get();
      goto LABEL_11;
    case 3:
      return v15;
    case 9:
      uint64_t v15 = sub_22B2434C8(a1 + *(void *)(*(void *)a1 - 24), *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 200));
      uint64_t v28 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v29 = (uint64_t *)(v28 + 8);
      uint64_t v30 = *(void *)(v28 + 200);
      __int16 v69 = 257;
      char v31 = (llvm::Type **)sub_22B1D7384(v28 + 8, 39, a2, v30, (uint64_t)v68);
      sub_22B1F718C(v29, v31, v15, 0);
      break;
    default:
      uint64_t v46 = (uint64_t *)a2;
      uint64_t v18 = *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 192);
LABEL_11:
      uint64_t v19 = llvm::PointerType::get();
      uint64_t v20 = llvm::PointerType::get();
      uint64_t v15 = sub_22B2434C8(a1 + *(void *)(*(void *)a1 - 24), v18);
      uint64_t v21 = a1 + *(void *)(*(void *)a1 - 24);
      __int16 v69 = 257;
      uint64_t v22 = sub_22B1D4240((uint64_t *)(v21 + 8), **(llvm::Type ***)(*(void *)v8 + 16), v8, 0, (uint64_t)v68);
      __int16 v67 = 257;
      uint64_t v23 = (uint64_t *)sub_22B1D7384(v21 + 8, 49, v22, v19, (uint64_t)v66);
      __int16 v65 = 257;
      uint64_t v24 = sub_22B1D7544(v21, v23, v46, (uint64_t)v64);
      __int16 v63 = 257;
      uint64_t v25 = sub_22B1D7384(v21 + 8, 49, v24, v20, (uint64_t)v62);
      switch(a3)
      {
        case 2:
          uint64_t v26 = a1 + *(void *)(*(void *)a1 - 24);
          uint64_t v27 = *(void *)(v26 + 344);
          long long v59 = *(_OWORD *)(v26 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v60, (llvm::IRBuilderBase *)(v26 + 8));
          int v61 = *(_DWORD *)(v26 + 104);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v27 + 448))(v27, &v59, v25, v15);
          if (v60) {
            goto LABEL_16;
          }
          break;
        case 4:
          uint64_t v32 = a1 + *(void *)(*(void *)a1 - 24);
          uint64_t v33 = *(void *)(v32 + 344);
          long long v47 = *(_OWORD *)(v32 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v48, (llvm::IRBuilderBase *)(v32 + 8));
          int v49 = *(_DWORD *)(v32 + 104);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v33 + 480))(v33, &v47, v25, v15);
          if (v48) {
            goto LABEL_16;
          }
          break;
        case 5:
          uint64_t v35 = a1 + *(void *)(*(void *)a1 - 24);
          uint64_t v36 = *(void *)(v35 + 344);
          long long v56 = *(_OWORD *)(v35 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v57, (llvm::IRBuilderBase *)(v35 + 8));
          int v58 = *(_DWORD *)(v35 + 104);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v36 + 456))(v36, &v56, v25, v15);
          if (v57) {
            goto LABEL_16;
          }
          break;
        case 6:
          uint64_t v37 = a1 + *(void *)(*(void *)a1 - 24);
          uint64_t v38 = *(void *)(v37 + 344);
          long long v53 = *(_OWORD *)(v37 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v54, (llvm::IRBuilderBase *)(v37 + 8));
          int v55 = *(_DWORD *)(v37 + 104);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v38 + 464))(v38, &v53, v25, v15);
          if (v54) {
            goto LABEL_16;
          }
          break;
        case 7:
          uint64_t v39 = a1 + *(void *)(*(void *)a1 - 24);
          uint64_t v40 = *(void *)(v39 + 344);
          long long v50 = *(_OWORD *)(v39 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v51, (llvm::IRBuilderBase *)(v39 + 8));
          int v52 = *(_DWORD *)(v39 + 104);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v40 + 472))(v40, &v50, v25, v15);
          if (v51) {
LABEL_16:
          }
            llvm::MetadataTracking::untrack();
          break;
        default:
          return v15;
      }
      break;
  }
  return v15;
}

uint64_t sub_22B229E6C(uint64_t a1, llvm::GlobalValue *this)
{
  if (*(unsigned char *)(a1 + 2385) || (uint64_t result = sub_22B229420((void *)a1, this)) == 0)
  {
    uint64_t v5 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v6 = sub_22B228FA8(a1, this);
    __int16 v8 = 257;
    return sub_22B1D4240((uint64_t *)(v5 + 8), **(llvm::Type ***)(*(void *)v6 + 16), v6, 0, (uint64_t)v7);
  }
  return result;
}

uint64_t sub_22B229F08(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v10 = **(void **)(v10 + 16);
  }
  uint64_t v11 = **(void **)(v10 + 16);
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t **, uint64_t, void))(**(void **)(a1 + 80)
                                                                                           + 48))(*(void *)(a1 + 80), v11, a2, a3, a4, 0);
  if (!v12)
  {
    uint64_t v12 = sub_22B1D7668(v11, a2, a3, a4);
    sub_22B1D6EE0((uint64_t *)(a1 + 8), v12, a5);
  }
  return v12;
}

uint64_t sub_22B22A000(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  v33[4] = *MEMORY[0x263EF8340];
  __int16 v8 = (_DWORD *)a1[288];
  unint64_t v9 = *((unsigned int *)a1 + 578);
  uint64_t v10 = &v8[4 * v9];
  if (v9)
  {
    do
    {
      unint64_t v11 = v9 >> 1;
      uint64_t v12 = &v8[4 * (v9 >> 1)];
      unsigned int v14 = *v12;
      uint64_t v13 = v12 + 4;
      v9 += ~(v9 >> 1);
      if (v14 < a4) {
        __int16 v8 = v13;
      }
      else {
        unint64_t v9 = v11;
      }
    }
    while (v9);
    if (v8 != v10) {
      uint64_t v10 = v8;
    }
  }
  uint64_t v15 = llvm::User::operator new((llvm::User *)0x58);
  uint64_t v16 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v16 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  uint64_t v17 = a1[288];
  uint64_t v18 = *((unsigned int *)a1 + 578);
  if ((_DWORD *)(v17 + 16 * v18) == v10)
  {
    if (v18 >= *((_DWORD *)a1 + 579)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v22 = (void *)(v17 + 16 * v18);
    *uint64_t v22 = a4;
    v22[1] = v15;
    ++*((_DWORD *)a1 + 578);
  }
  else
  {
    if (v18 >= *((_DWORD *)a1 + 579)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v19 = (void *)(v17 + 16 * (((uint64_t)v10 - v17) >> 4));
    *(_OWORD *)(v17 + 16 * v18) = *(_OWORD *)(v17 + 16 * v18 - 16);
    uint64_t v20 = *((unsigned int *)a1 + 578);
    uint64_t v21 = a1[288] + 16 * v20 - 16;
    if ((void *)v21 != v19)
    {
      memmove(v19 + 2, v19, v21 - (void)v19);
      LODWORD(v20) = *((_DWORD *)a1 + 578);
    }
    *((_DWORD *)a1 + 578) = v20 + 1;
    *uint64_t v19 = a4;
    v19[1] = v15;
  }
  uint64_t v23 = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  uint64_t v24 = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  uint64_t v25 = llvm::ValueAsMetadata::get();
  char v31 = v33;
  uint64_t v32 = 0x400000000;
  uint64_t v26 = *a1;
  v33[0] = v23;
  v33[1] = v24;
  v33[2] = v25;
  LODWORD(v32) = 3;
  if (a5)
  {
    llvm::ConstantInt::get();
    uint64_t v27 = llvm::ValueAsMetadata::get();
    sub_22B1D6788((uint64_t)&v31, v27);
    uint64_t v26 = *a1;
  }
  uint64_t v28 = *(uint64_t *)((char *)a1 + *(void *)(v26 - 24) + 328);
  uint64_t Impl = llvm::MDTuple::getImpl();
  sub_22B1D6788(v28, Impl);
  if (v31 != v33) {
    free(v31);
  }
  return v15;
}

void **sub_22B22A358(llvm::SmallPtrSetImplBase *this, void *a2)
{
  std::string::size_type v4 = (void **)*((void *)this + 1);
  if (v4 == *(void ***)this)
  {
    uint64_t v8 = *((unsigned int *)this + 5);
    uint64_t result = &v4[v8];
    if (v8)
    {
      uint64_t v9 = 8 * v8;
      while (*v4 != a2)
      {
        ++v4;
        v9 -= 8;
        if (!v9) {
          return result;
        }
      }
      return v4;
    }
  }
  else
  {
    uint64_t result = (void **)llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
    if (*result != a2)
    {
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = 16;
      if (v6 == *(void *)this) {
        uint64_t v7 = 20;
      }
      return (void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  return result;
}

void sub_22B22A3F0(void *a1)
{
  if (a1)
  {
    sub_22B22A3F0(*a1);
    sub_22B22A3F0(a1[1]);
    uint64_t v2 = a1[6];
    if (v2 != -8192 && v2 != -4096 && v2 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t sub_22B22A45C(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 16);
    int v3 = *(llvm **)result;
    if (v2)
    {
      std::string::size_type v4 = (void *)((char *)v3 + 8);
      uint64_t v5 = 16 * v2;
      do
      {
        if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (*v4) {
            llvm::MetadataTracking::untrack();
          }
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      int v3 = *(llvm **)v1;
      uint64_t v6 = (void *)(16 * *(unsigned int *)(v1 + 16));
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t result = llvm::deallocate_buffer(v3, v6);
    *(unsigned char *)(v1 + 24) = 0;
  }
  return result;
}

uint64_t sub_22B22A4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  std::string::size_type v4 = *(int32x2_t **)(v3 + 24);
  unsigned int v14 = v4;
  uint64_t v19 = 0;
  uint64_t result = sub_22B22A7B4((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if (result) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (void *)(*(void *)v4 + 48 * v4[2].u32[0]);
  }
  uint64_t v7 = v14;
  if ((void *)(*(void *)v14 + 48 * v14[2].u32[0]) != v6)
  {
    uint64_t v8 = v6[5];
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v22 = 0;
    uint64_t v19 = &unk_26DE79C40;
    sub_22B21A918((llvm::ValueHandleBase *)(v6 + 1), v20);
    uint64_t v9 = v21;
    v6[4] = v22;
    if (v9 != -8192 && v9 != -4096 && v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v10 = (uint64_t)v14;
    sub_22B22A84C(&v15, a2);
    uint64_t v15 = &unk_26DE79C40;
    uint64_t v18 = v10;
    sub_22B22A75C((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    uint64_t v19 = &unk_26DE79C40;
    uint64_t v22 = v18;
    uint64_t v23 = v8;
    uint64_t v24 = 0;
    uint64_t result = sub_22B22A7B4(*(void *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      unint64_t v11 = (void *)sub_22B22A8B0(v10, (uint64_t)&v19, v24);
      uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v11 + 1), v20);
      v11[4] = v22;
      v11[5] = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    if (v17 != -8192 && v17 != -4096 && v17) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
  }
  return result;
}

llvm::ValueHandleBase *sub_22B22A75C(llvm::ValueHandleBase *this, unsigned int a2, void *a3)
{
  *(void *)this = 2 * a2;
  *((void *)this + 1) = 0;
  uint64_t v4 = a3[2];
  *((void *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a3 & 0xFFFFFFFFFFFFFFF8));
  }
  return this;
}

uint64_t sub_22B22A7B4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 48 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 48 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_22B22A84C(void *a1, uint64_t a2)
{
  a1[1] = 2;
  a1[2] = 0;
  uint64_t v3 = (llvm::ValueHandleBase *)(a1 + 1);
  *((void *)v3 + 2) = a2;
  if (a2 != -8192 && a2 != -4096 && a2) {
    llvm::ValueHandleBase::AddToUseList(v3);
  }
  *a1 = MEMORY[0x263F8BBC8] + 16;
  return a1;
}

uint64_t sub_22B22A8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22B22A964(a1, v6);
  uint64_t v8 = 0;
  sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_22B22A964(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x230F426A0]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    sub_22B22AB80(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_26DE79C40;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          sub_22B21A918((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 40) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return sub_22B22AB80(a1);
  }
}

uint64_t sub_22B22AB80(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    uint64_t result = *(void *)result + 8;
    do
    {
      int v4 = sub_22B22A75C((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_26DE79C40;
      *((void *)v4 + 3) = v9;
      unint64_t v5 = (char *)v4 + 40;
      uint64_t result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t sub_22B22AC64(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = sub_22B22A7B4(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    int v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_26DE79C40;
    uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

uint64_t sub_22B22AD90(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v11 = 2;
    uint64_t v12 = 0;
    uint64_t v13 = -4096;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_26DE79C40;
    uint64_t v6 = 2;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (uint64_t *)(*(void *)result + 24);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0) {
        uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      }
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_22B22AEA4(void *a1, llvm::GlobalValue *this, unsigned int a3)
{
  uint64_t v6 = sub_22B229390(this);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * a3);
    if (a3 == 2)
    {
      uint64_t v8 = (void *)((char *)a1 + *(void *)(*a1 - 24));
      __int16 v14 = 257;
      return sub_22B1D4240(v8 + 1, **(llvm::Type ***)(*(void *)v7 + 16), v7, 0, (uint64_t)&v13);
    }
    return v7;
  }
  uint64_t v9 = &a1[7 * a3];
  uint64_t v10 = v9[195];
  uint64_t v11 = v9[216];
  if (v10)
  {
    if (v11)
    {
      llvm::BasicBlock::splitBasicBlock();
      uint64_t v13 = "non_constant_sampler";
      __int16 v14 = 259;
      operator new();
    }
    goto LABEL_11;
  }
  if (!v11)
  {
LABEL_11:
    return sub_22B22B634((uint64_t)a1, (uint64_t)this, a3);
  }
  return sub_22B22B37C(a1, (uint64_t)this, a3);
}

uint64_t sub_22B22B37C(void *a1, uint64_t a2, unsigned int a3)
{
  _OWORD v28[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)a1[7 * a3 + 216];
  if (v5)
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 23);
    __int16 v25 = 257;
    uint64_t v8 = sub_22B1D7384((uint64_t)(v6 + 8), 47, a2, v7, (uint64_t)v24);
    uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24);
    if (!a3 && *(unsigned __int8 *)(v8 + 16) >= 0x15u)
    {
      uint64_t v10 = llvm::PointerType::get();
      uint64_t v11 = sub_22B1D7FA8((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)"llvm.agx.samplerState", 21, v10, v10, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 200));
      uint64_t v12 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v25 = 257;
      v28[0] = sub_22B1D7384(v12, 49, (uint64_t)v5, v10, (uint64_t)v24);
      uint64_t v13 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v14 = *((void *)v13 + 25);
      __int16 v27 = 257;
      v28[1] = sub_22B1D7384((uint64_t)(v13 + 8), 39, v8, v14, (uint64_t)v26);
      unsigned char v23[16] = 257;
      uint64_t v15 = sub_22B1D4034(v12, *(void *)(v11 + 24), v11, (uint64_t)v28, 2, (uint64_t)v23);
      uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v17 = llvm::PointerType::get();
      __int16 v25 = 257;
      return sub_22B1D7384(v16, 49, (uint64_t)v15, v17, (uint64_t)v24);
    }
    v26[0] = (uint64_t *)llvm::ConstantInt::get();
    v26[1] = (uint64_t *)v8;
    __int16 v25 = 257;
    uint64_t v19 = sub_22B229F08(v9, v5, v26, 2, (uint64_t)v24);
  }
  else
  {
    llvm::PointerType::get();
    uint64_t v19 = llvm::UndefValue::get();
  }
  uint64_t v20 = v19;
  if (a3 == 2)
  {
    uint64_t v21 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    __int16 v25 = 257;
    return sub_22B1D4240(v21 + 1, **(llvm::Type ***)(*(void *)v19 + 16), v19, 0, (uint64_t)v24);
  }
  return v20;
}

uint64_t sub_22B22B634(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v39[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t **)(a1 + 1544 + 56 * a3 + 16);
  if (v5)
  {
    uint64_t v7 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v8 = *(void *)(v7 + 184);
    __int16 v34 = 257;
    uint64_t v9 = sub_22B1D7384(v7 + 8, 47, a2, v8, (uint64_t)v33);
    uint64_t v10 = a1 + *(void *)(*(void *)a1 - 24);
    if (!a3 && *(unsigned __int8 *)(v9 + 16) >= 0x15u)
    {
      uint64_t v11 = llvm::PointerType::get();
      uint64_t v12 = sub_22B1D7FA8(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)"llvm.agx.samplerState", 21, v11, v11, *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 200));
      uint64_t v13 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      __int16 v34 = 257;
      v39[0] = sub_22B1D7384(v13, 49, (uint64_t)v5, v11, (uint64_t)v33);
      uint64_t v14 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v15 = *(void *)(v14 + 200);
      __int16 v38 = 257;
      v39[1] = sub_22B1D7384(v14 + 8, 39, v9, v15, (uint64_t)v37);
      __int16 v36 = 257;
      uint64_t v16 = sub_22B1D4034(v13, *(void *)(v12 + 24), v12, (uint64_t)v39, 2, (uint64_t)v35);
      uint64_t v17 = a1 + *(void *)(*(void *)a1 - 24) + 8;
      uint64_t v18 = llvm::PointerType::get();
      __int16 v34 = 257;
      return sub_22B1D7384(v17, 49, (uint64_t)v16, v18, (uint64_t)v33);
    }
    if (a3 == 2 && !*(unsigned char *)(*(void *)(v10 + 344) + 1678) && *(_DWORD *)(a1 + 2160))
    {
      uint64_t v21 = (llvm::Type ***)llvm::ConstantInt::get();
      uint64_t v22 = (uint64_t *)sub_22B243278(v10, (llvm::Type ***)v9, v21, 36);
      uint64_t v23 = a1 + *(void *)(*(void *)a1 - 24);
      v35[0] = (uint64_t *)llvm::ConstantInt::get();
      v35[1] = v22;
      __int16 v34 = 257;
      uint64_t v24 = sub_22B229F08(v23, v5, v35, 2, (uint64_t)v33);
      __int16 v38 = 257;
      sub_22B1D4240((uint64_t *)(v23 + 8), **(llvm::Type ***)(*(void *)v24 + 16), v24, 0, (uint64_t)v37);
      uint64_t v25 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v26 = *(void *)(v25 + 200);
      __int16 v34 = 257;
      sub_22B1D7384(v25 + 8, 47, a2, v26, (uint64_t)v33);
      __int16 v27 = (uint64_t *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
      uint64_t v28 = llvm::ConstantInt::get();
      __int16 v34 = 257;
      sub_22B1D4340(v27, 36, (llvm::Type ***)v9, v28, (uint64_t)v33);
      __int16 v38 = 257;
      uint64_t Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      uint64_t v30 = sub_22B2434C8(a1 + *(void *)(*(void *)a1 - 24), *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 200));
      sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), Select, v30, 0);
LABEL_12:
      uint64_t v31 = a1 + *(void *)(*(void *)a1 - 24);
      __int16 v34 = 257;
      return sub_22B1D4240((uint64_t *)(v31 + 8), **(llvm::Type ***)(*(void *)v30 + 16), v30, 0, (uint64_t)v33);
    }
    v37[0] = (uint64_t *)llvm::ConstantInt::get();
    v37[1] = (uint64_t *)v9;
    __int16 v34 = 257;
    uint64_t v20 = sub_22B229F08(v10, v5, v37, 2, (uint64_t)v33);
  }
  else
  {
    llvm::PointerType::get();
    uint64_t v20 = llvm::UndefValue::get();
  }
  uint64_t v30 = v20;
  if (a3 == 2) {
    goto LABEL_12;
  }
  return v30;
}

uint64_t sub_22B22BACC(uint64_t *a1, llvm::GlobalValue *this)
{
  uint64_t v4 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
  if (*(unsigned char *)(v4[43] + 1678))
  {
    uint64_t v5 = sub_22B228FA8((uint64_t)a1, this, 2u);
    __int16 v28 = 257;
    uint64_t v6 = sub_22B1D4240(v4 + 1, **(llvm::Type ***)(*(void *)v5 + 16), v5, 0, (uint64_t)v27);
    uint64_t v7 = (char *)a1 + *(void *)(*a1 - 24);
    __int16 v28 = 257;
    uint64_t v8 = (uint64_t)(v7 + 8);
    uint64_t v9 = llvm::ConstantInt::get();
    return sub_22B242524(v8, v6, v9, (uint64_t)v27);
  }
  else
  {
    uint64_t v11 = a1[244];
    if (!v11)
    {
      if ((*(unsigned int (**)(char *))(*v4 + 32))((char *)a1 + *(void *)(*a1 - 24)) == 2
        || (*(unsigned int (**)(char *))(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24)) + 32))((char *)a1 + *(void *)(*a1 - 24)) == 16)
      {
        uint64_t v12 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 792);
        unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 336))(v12);
      }
      else
      {
        uint64_t v14 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 792);
        unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 192))(v14);
      }
      unsigned int v15 = v13;
      uint64_t v16 = llvm::PointerType::get();
      v27[0] = "agc.texture_heap.";
      _OWORD v27[2] = v15;
      __int16 v28 = 2051;
      uint64_t v17 = sub_22B22A000(a1, v16, (uint64_t)v27, v15, 0);
      sub_22B212008((llvm::ValueHandleBase *)(a1 + 242), v17);
      uint64_t v11 = a1[244];
    }
    uint64_t v18 = sub_22B229E6C((uint64_t)a1, this);
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v20 = llvm::ConstantInt::get();
    __int16 v28 = 257;
    uint64_t v21 = (uint64_t *)sub_22B208338(v19, v18, v20, (uint64_t)v27);
    uint64_t v22 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v28 = 257;
    uint64_t v23 = (uint64_t *)sub_22B1D4240((uint64_t *)(v22 + 8), **(llvm::Type ***)(*(void *)v11 + 16), v11, 0, (uint64_t)v27);
    v26[16] = 257;
    uint64_t v24 = sub_22B1D7544(v22, v23, v21, (uint64_t)v26);
    uint64_t v25 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24));
    __int16 v28 = 257;
    return sub_22B1D4240(v25 + 1, **(llvm::Type ***)(*(void *)v24 + 16), v24, 0, (uint64_t)v27);
  }
}

uint64_t sub_22B22BE28(uint64_t *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  v27[0] = "agc.const_sampler_state_struct_ptr_";
  __int16 v28 = &v26;
  __int16 v29 = 3587;
  llvm::Twine::str((uint64_t *)&__p, (llvm::Twine *)v27);
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    uint64_t v5 = (void *)a1[99];
    uint64_t v6 = a1[98];
    uint64_t v7 = ((uint64_t)v5 - v6) >> 3;
    unint64_t v8 = a1[100];
    if ((unint64_t)v5 >= v8)
    {
      if ((unint64_t)(v7 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v8 - v6;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v7 + 1)) {
        uint64_t v11 = v7 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        unint64_t v12 = (unint64_t)sub_22B216148(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (void *)(v12 + 8 * v7);
      unint64_t v15 = v12 + 8 * v13;
      *uint64_t v14 = v26;
      uint64_t v9 = v14 + 1;
      uint64_t v16 = (char *)a1[99];
      uint64_t v17 = (char *)a1[98];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *--uint64_t v14 = v18;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)a1[98];
      }
      a1[98] = (uint64_t)v14;
      a1[99] = (uint64_t)v9;
      a1[100] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *uint64_t v5 = v26;
      uint64_t v9 = v5 + 1;
    }
    a1[99] = (uint64_t)v9;
    (*(uint64_t (**)(uint64_t *))(*a1 + 296))(a1);
    uint64_t v19 = llvm::User::operator new((llvm::User *)0x58);
    v27[0] = "agc.const_sampler_state_words_";
    __int16 v28 = &v26;
    __int16 v29 = 3587;
    uint64_t v20 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v20 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    v27[0] = llvm::PointerType::get();
    llvm::StructType::get();
    v27[0] = v19;
    llvm::ConstantStruct::get();
    uint64_t GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    __int16 v29 = 260;
    v27[0] = &__p;
    uint64_t v21 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v21 + 80) |= 1u;
    llvm::GlobalVariable::setInitializer();
    uint64_t v22 = a1 + 95;
    v27[0] = 4;
    v27[1] = 0;
    __int16 v28 = (uint64_t *)GlobalVariable;
    unint64_t v23 = GlobalVariable;
    if (GlobalVariable != -8192)
    {
      unint64_t v23 = GlobalVariable;
      if (GlobalVariable != -4096)
      {
        unint64_t v23 = GlobalVariable;
        if (GlobalVariable)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v27);
          unint64_t v23 = (unint64_t)v28;
        }
      }
    }
    sub_22B22C248(v22, v23, v27);
    if (v28 != (uint64_t *)-8192 && v28 != (uint64_t *)-4096 && v28) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v27);
    }
  }
  if (v25 < 0) {
    operator delete(__p);
  }
  return GlobalVariable;
}

uint64_t *sub_22B22C248(uint64_t *result, unint64_t a2, void *a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[6];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x38uLL);
    sub_22B22A75C((llvm::ValueHandleBase *)(v9 + 4), 2u, a3);
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *uint64_t v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      uint64_t v9 = *v6;
    }
    uint64_t result = sub_22B1E313C((uint64_t *)v4[1], v9);
    ++v4[2];
  }
  return result;
}

uint64_t sub_22B22C314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TruncOrBitCast = a2;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
    {
      uint64_t TruncOrBitCast = llvm::CastInst::CreateTruncOrBitCast();
      sub_22B1D6EE0((uint64_t *)a1, TruncOrBitCast, a4);
    }
    else
    {
      uint64_t TruncOrBitCast = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 304))(*(void *)(a1 + 72), a2, a3);
      if (TruncOrBitCast) {
        BOOL v7 = *(unsigned __int8 *)(TruncOrBitCast + 16) >= 0x1Cu;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7) {
        sub_22B1D6EE0((uint64_t *)a1, TruncOrBitCast, a4);
      }
    }
  }
  return TruncOrBitCast;
}

uint64_t sub_22B22C3FC(void *a1, void *a2)
{
  uint64_t v3 = sub_22B229420(a1, a2);
  uint64_t v4 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = llvm::ConstantInt::get();
  }
  uint64_t v6 = llvm::PointerType::get();
  __int16 v9 = 257;
  return sub_22B1D7384(v4, 48, v5, v6, (uint64_t)v8);
}

uint64_t sub_22B22C4B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return a1 + 48 * a2;
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  uint64_t v5 = a1 + 48 * v4;
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      uint64_t v5 = a1 + 48 * (v8 & v3);
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6 == a3) {
        return v5;
      }
    }
    return a1 + 48 * a2;
  }
  return v5;
}

uint64_t sub_22B22C514(void *a1, uint64_t a2, __int16 *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a2;
  uint64_t v144 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a2 == 5)
  {
    int v6 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    int v7 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v8 = *((void *)v7 + 43);
    long long v129 = *(_OWORD *)(v7 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v130, (llvm::IRBuilderBase *)(v7 + 8));
    int v131 = *((_DWORD *)v7 + 26);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v8 + 248))(v8, &v129, v4);
    if (v130) {
      llvm::MetadataTracking::untrack();
    }
    if ((*v3 & 0xF) != 0)
    {
      uint64_t v9 = *(void *)(v4 + 184);
      if ((*v3 & 0x10) != 0)
      {
        uint64_t v10 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v11 = *((void *)v10 + 43);
        long long v133 = *(_OWORD *)(v10 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v134, (llvm::IRBuilderBase *)(v10 + 8));
        int v135 = *((_DWORD *)v10 + 26);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v11 + 40))(v11, &v133, v9, 0);
        if (v134) {
          llvm::MetadataTracking::untrack();
        }
      }
      sub_22B242CE8((uint64_t)a1 + *(void *)(*a1 - 24), 4, v9);
      uint64_t v12 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v13 = llvm::ConstantFP::get();
      sub_22B242CE8(v12, 4, v13);
      uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v15 = llvm::ConstantFP::get();
      sub_22B242CE8(v14, 4, v15);
      __int16 v143 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      __int16 v143 = 257;
      llvm::IRBuilderBase::CreateSelect();
    }
    *(_DWORD *)(v4 + 8) = v6;
    uint64_t v19 = **(uint64_t (***)(void))((char *)a1 + *(void *)(*a1 - 24));
  }
  else
  {
    uint64_t v16 = *(void *)(a2 + 184);
    int v120 = *(_DWORD *)(a2 + 8);
    __int16 v17 = *a3;
    BOOL v18 = (*a3 & 0xF) == 0 || (*a3 & 0x1C0) == 0;
    if (v18 || sub_22B22D65C(a1, *(_DWORD *)(a2 + 4), *a3))
    {
      *(_DWORD *)(v4 + 192) = 1;
      if ((*v3 & 0xF) != 0) {
        *(_DWORD *)(v4 + 8) = 0;
      }
    }
    else
    {
      if ((v17 & 0x40) != 0) {
        int v20 = 3;
      }
      else {
        int v20 = 2;
      }
      *(_DWORD *)(v4 + 192) = v20;
    }
    uint64_t v121 = v4;
    if (sub_22B22D65C(a1, *(_DWORD *)(v4 + 4), *v3))
    {
      uint64_t v119 = v16;
      uint64_t v21 = sub_22B1DB218((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)"llvm.floor.f32", 14, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160), *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160));
      llvm::Function::addFnAttr();
      uint64_t v22 = *(void *)(v4 + 120);
      uint64_t v116 = *(void *)(v4 + 152);
      int v115 = *(_DWORD *)(v4 + 144);
      *(_DWORD *)uint64_t v4 = 4;
      *(void *)(v4 + 152) = 0;
      *(_DWORD *)(v4 + 144) = 3;
      *(_WORD *)(v4 + 224) = 0;
      unint64_t v23 = (void *)((char *)a1 + *(void *)(*a1 - 24));
      uint64_t v24 = *(void *)(v4 + 48);
      __int16 v143 = 257;
      uint64_t v25 = sub_22B1D4240(v23 + 1, **(llvm::Type ***)(*(void *)v24 + 16), v24, 0, (uint64_t)v142);
      uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v27 = v26 + 8;
      uint64_t v28 = sub_22B2423A4(v26, v25, 2, 1);
      uint64_t v29 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 216);
      __int16 v143 = 257;
      uint64_t v30 = sub_22B1DB63C(v27, v28, v29, (uint64_t)v142);
      uint64_t v31 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v143 = 257;
      uint64_t v117 = v22;
      uint64_t v32 = sub_22B1DB138(v31, v22, v30, (uint64_t)v142);
      uint64_t v33 = llvm::ConstantFP::get();
      __int16 v132 = 257;
      __int16 v34 = (llvm::Constant *)sub_22B1DD390(v31, v32, v33, (uint64_t)&v129);
      uint64_t v35 = sub_22B242E70((uint64_t)a1 + *(void *)(*a1 - 24), v21, v34);
      uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v143 = 257;
      uint64_t v37 = sub_22B1DD690(v36, (uint64_t)v34, (uint64_t)v35, (uint64_t)v142);
      uint64_t v38 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 208);
      __int16 v132 = 257;
      uint64_t v39 = sub_22B1DC548(v36, v37, v38, (uint64_t)&v129);
      uint64_t v40 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v41 = llvm::ConstantFP::get();
      __int16 v143 = 257;
      uint64_t v122 = sub_22B1DD690(v40, v41, v39, (uint64_t)v142);
      uint64_t v42 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v143 = 257;
      *(void *)(v4 + 120) = sub_22B1F860C(v42, (uint64_t)v35, v30, (uint64_t)v142);
      uint64_t v43 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v44 = *((void *)v43 + 43);
      long long v139 = *(_OWORD *)(v43 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v140, (llvm::IRBuilderBase *)(v43 + 8));
      int v141 = *((_DWORD *)v43 + 26);
      uint64_t v114 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v44 + 248))(v44, &v139, v4);
      if (v140) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v118 = v3;
      uint64_t v45 = llvm::UndefValue::get();
      uint64_t v46 = 0;
      for (uint64_t i = 0; i != 4; ++i)
      {
        uint64_t v137 = 0;
        uint64_t v138 = 0;
        uint64_t v137 = llvm::ConstantInt::get();
        uint64_t v138 = llvm::ConstantInt::get();
        uint64_t v48 = llvm::ConstantVector::get();
        uint64_t v49 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        __int16 v143 = 257;
        uint64_t v50 = v39;
        uint64_t v51 = sub_22B1D69A8(v49, v39, v122, v48, (uint64_t)v142);
        int v52 = (char *)a1 + *(void *)(*a1 - 24);
        __int16 v143 = 257;
        uint64_t v53 = (uint64_t)(v52 + 8);
        uint64_t v54 = llvm::ConstantInt::get();
        uint64_t v55 = sub_22B242524(v53, v51, v54, (uint64_t)v142);
        long long v56 = (char *)a1 + *(void *)(*a1 - 24);
        __int16 v132 = 257;
        uint64_t v57 = (uint64_t)(v56 + 8);
        uint64_t v58 = llvm::ConstantInt::get();
        uint64_t v59 = v51;
        uint64_t v39 = v50;
        uint64_t v60 = sub_22B242524(v57, v59, v58, (uint64_t)&v129);
        __int16 v136 = 257;
        uint64_t v61 = sub_22B1DB138(v53, v55, v60, (uint64_t)&v133);
        size_t v62 = (char *)a1 + *(void *)(*a1 - 24);
        __int16 v143 = 257;
        uint64_t v63 = (uint64_t)(v62 + 8);
        uint64_t v64 = llvm::ConstantInt::get();
        uint64_t v45 = sub_22B2427EC(v63, v45, v61, v64, (uint64_t)v142);
        v46 += 2;
      }
      __int16 v65 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v66 = *((void *)v65 + 34);
      __int16 v143 = 257;
      uint64_t v67 = sub_22B1EEEB4((uint64_t)(v65 + 8), v45, v66, (uint64_t)v142);
      v142[0] = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 296);
      v142[1] = v142[0];
      llvm::StructType::get();
      uint64_t v68 = llvm::UndefValue::get();
      __int16 v69 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v70 = (uint64_t)(v69 + 8);
      uint64_t v71 = *((void *)v69 + 37);
      __int16 v143 = 257;
      uint64_t v72 = sub_22B1D7384((uint64_t)(v69 + 8), 49, v114, v71, (uint64_t)v142);
      LODWORD(v133) = 0;
      __int16 v132 = 257;
      uint64_t v73 = sub_22B1D6D44(v70, v68, v72, (uint64_t)&v133, 1, (uint64_t)&v129);
      char v74 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v75 = (uint64_t)(v74 + 8);
      uint64_t v76 = *((void *)v74 + 37);
      __int16 v143 = 257;
      uint64_t v77 = sub_22B1D7384((uint64_t)(v74 + 8), 49, v67, v76, (uint64_t)v142);
      LODWORD(v133) = 1;
      __int16 v132 = 257;
      uint64_t v78 = sub_22B1D6D44(v75, v73, v77, (uint64_t)&v133, 1, (uint64_t)&v129);
      uint64_t v4 = v121;
      unsigned int v3 = v118;
      *(void *)(v121 + 120) = v117;
      *(void *)(v121 + 152) = v116;
      *(_DWORD *)(v121 + 144) = v115;
      *(_DWORD *)uint64_t v121 = 1;
      uint64_t v16 = v119;
    }
    else
    {
      uint64_t v79 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v80 = *((void *)v79 + 43);
      long long v126 = *(_OWORD *)(v79 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v127, (llvm::IRBuilderBase *)(v79 + 8));
      int v128 = *((_DWORD *)v79 + 26);
      uint64_t v78 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v80 + 248))(v80, &v126, v4);
      if (v127) {
        llvm::MetadataTracking::untrack();
      }
    }
    __int16 v81 = *v3;
    switch(*v3 & 0xF)
    {
      case 0:
        uint64_t v82 = (uint64_t (***)(void, uint64_t, void))((char *)a1 + *(void *)(*a1 - 24));
        uint64_t v83 = sub_22B22D6B4(a1, v78);
        return (**v82)(v82, v83, *(unsigned int *)(v4 + 8));
      case 2:
        if ((v81 & 0x10) != 0) {
          goto LABEL_42;
        }
        goto LABEL_44;
      case 3:
        if ((v81 & 0x10) == 0) {
          goto LABEL_44;
        }
        goto LABEL_42;
      case 4:
        if ((v81 & 0x10) == 0) {
          goto LABEL_44;
        }
        goto LABEL_42;
      case 5:
        if ((v81 & 0x10) == 0) {
          goto LABEL_44;
        }
        goto LABEL_42;
      case 6:
        if ((v81 & 0x10) == 0) {
          goto LABEL_44;
        }
        goto LABEL_42;
      case 8:
        if ((v81 & 0x10) == 0) {
          goto LABEL_44;
        }
        goto LABEL_42;
      default:
        if ((v81 & 0x10) != 0)
        {
LABEL_42:
          char v85 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v86 = *((void *)v85 + 43);
          long long v123 = *(_OWORD *)(v85 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v124, (llvm::IRBuilderBase *)(v85 + 8));
          int v125 = *((_DWORD *)v85 + 26);
          (*(void (**)(uint64_t, long long *, uint64_t, void))(*(void *)v86 + 40))(v86, &v123, v16, 0);
          if (v124) {
            llvm::MetadataTracking::untrack();
          }
        }
LABEL_44:
        if ((*v3 & 0x1C0) != 0)
        {
          *((void *)&v133 + 1) = 0;
          *((void *)&v139 + 1) = 0;
          uint64_t Select = llvm::ConstantFP::get();
          uint64_t v88 = (uint64_t)a1 + *(void *)(*a1 - 24);
          LODWORD(v129) = 0;
          __int16 v143 = 257;
          uint64_t v89 = sub_22B1D7940(v88 + 8, v78, (uint64_t)&v129, 1, (uint64_t)v142);
          *(void *)&long long v133 = sub_22B242334(v88, v89, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160));
          uint64_t v90 = (uint64_t)a1 + *(void *)(*a1 - 24);
          LODWORD(v137) = 1;
          __int16 v143 = 257;
          uint64_t v91 = sub_22B1D7940(v90 + 8, v78, (uint64_t)&v137, 1, (uint64_t)v142);
          uint64_t v92 = sub_22B242334(v90, v91, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160));
          uint64_t v93 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 264);
          __int16 v132 = 257;
          *(void *)&long long v139 = sub_22B1DC548(v90 + 8, v92, v93, (uint64_t)&v129);
          if ((*v3 & 0x40) != 0)
          {
            uint64_t v95 = (uint64_t)a1 + *(void *)(*a1 - 24);
            LODWORD(v129) = 2;
            __int16 v143 = 257;
            uint64_t v96 = sub_22B1D7940(v95 + 8, v78, (uint64_t)&v129, 1, (uint64_t)v142);
            *((void *)&v133 + 1) = sub_22B242334(v95, v96, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160));
            uint64_t v97 = (uint64_t)a1 + *(void *)(*a1 - 24);
            LODWORD(v137) = 3;
            __int16 v143 = 257;
            uint64_t v98 = sub_22B1D7940(v97 + 8, v78, (uint64_t)&v137, 1, (uint64_t)v142);
            uint64_t v99 = sub_22B242334(v97, v98, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160));
            uint64_t v100 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 264);
            __int16 v132 = 257;
            *((void *)&v139 + 1) = sub_22B1DC548(v97 + 8, v99, v100, (uint64_t)&v129);
            int v94 = 8;
          }
          else
          {
            int v94 = 4;
          }
          for (unsigned int j = 0; j != v94; ++j)
          {
            unint64_t v102 = (char *)a1 + *(void *)(*a1 - 24);
            uint64_t v103 = *((void *)&v133 + (j >> 2));
            __int16 v143 = 257;
            uint64_t v104 = (uint64_t)(v102 + 8);
            uint64_t v105 = llvm::ConstantInt::get();
            sub_22B242524(v104, v103, v105, (uint64_t)v142);
            uint64_t v106 = (char *)a1 + *(void *)(*a1 - 24);
            uint64_t v107 = *((void *)&v139 + (j >> 2));
            __int16 v143 = 257;
            uint64_t v108 = (uint64_t)(v106 + 8);
            uint64_t v109 = llvm::ConstantInt::get();
            uint64_t v110 = sub_22B242524(v108, v107, v109, (uint64_t)v142);
            __int16 v143 = 257;
            llvm::IRBuilderBase::CreateFCmpHelper();
            uint64_t v111 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
            __int16 v143 = 257;
            sub_22B1DD390(v111, Select, v110, (uint64_t)v142);
            __int16 v143 = 257;
            uint64_t Select = llvm::IRBuilderBase::CreateSelect();
          }
          uint64_t v112 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v113 = *((void *)v112 + 20);
          __int16 v143 = 257;
          sub_22B1EEEB4((uint64_t)(v112 + 8), Select, v113, (uint64_t)v142);
          uint64_t v4 = v121;
        }
        else
        {
          sub_22B22D6B4(a1, v78);
          __int16 v143 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          llvm::ConstantFP::get();
          llvm::ConstantFP::get();
          __int16 v143 = 257;
          llvm::IRBuilderBase::CreateSelect();
        }
        *(_DWORD *)(v4 + 8) = v120;
        uint64_t v19 = **(uint64_t (***)(void))((char *)a1 + *(void *)(*a1 - 24));
        break;
    }
  }
  return v19();
}

BOOL sub_22B22D65C(void *a1, int a2, __int16 a3)
{
  BOOL result = 0;
  if ((a3 & 0xF) != 0 && (a3 & 0x1C0) != 0)
  {
    BOOL result = 0;
    if ((a3 & 0x20) == 0 && a2 != 2) {
      return *(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1643) != 0;
    }
  }
  return result;
}

uint64_t sub_22B22D6B4(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    unsigned int v3 = (char *)a1 + *(void *)(*a1 - 24);
    __int16 v8 = 257;
    uint64_t v4 = (uint64_t)(v3 + 8);
    uint64_t v5 = llvm::ConstantInt::get();
    return sub_22B242524(v4, v2, v5, (uint64_t)v7);
  }
  return v2;
}

void sub_22B22D740()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E91E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E91E8))
  {
    qword_2683E91C8 = 0;
    *(void *)&dword_2683E91D0 = 0;
    qword_2683E91D8 = 0x800000000;
    __cxa_atexit((void (*)(void *))sub_22B22D7C4, &qword_2683E91C8, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E91E8);
  }
}

uint64_t sub_22B22D7C4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 9));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B22D840(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void *sub_22B22D8BC(uint64_t a1, void *a2, const void *a3)
{
  BOOL result = (void *)sub_22B231704((uint64_t)a2, a3);
  uint64_t v7 = a2[1];
  uint64_t v8 = 16;
  if (v7 == *a2) {
    uint64_t v8 = 20;
  }
  uint64_t v9 = (void *)(v7 + 8 * *(unsigned int *)((char *)a2 + v8));
  if (v9 != result)
  {
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        BOOL result = v9;
        break;
      }
    }
  }
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v6;
  return result;
}

uint64_t *sub_22B22D934(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  char v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        char v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        char v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = operator new(0x48uLL);
    long long v10 = *(_OWORD *)(a3 + 16);
    v9[2] = *(_OWORD *)a3;
    v9[3] = v10;
    *((void *)v9 + 8) = *(void *)(a3 + 32);
    return sub_22B215FA4(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t *sub_22B22D9EC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    char v6 = result + 1;
    do
    {
      uint64_t v7 = (unsigned int *)(v4 + 4);
      unsigned int v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v10 = v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8) {
          uint64_t v14 = (uint64_t **)v9;
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v15 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v15 = (uint64_t **)v6;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        uint64_t v15 = (uint64_t **)v6;
        if (v8)
        {
          uint64_t v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v8;
              unsigned int v20 = *((_DWORD *)v8 + 8);
              if (v13 >= v20) {
                break;
              }
              unsigned int v8 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v20 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            unsigned int v8 = v14[1];
            if (!v8) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = operator new(0x38uLL);
        uint64_t v17 = v4[6];
        void v16[2] = *(_OWORD *)v7;
        *((void *)v16 + 6) = v17;
        BOOL result = sub_22B215FA4((uint64_t **)v5, (uint64_t)v14, v15, (uint64_t *)v16);
      }
      BOOL v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          BOOL v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v4[2];
          BOOL v12 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v12);
      }
      uint64_t v4 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

BOOL sub_22B22DB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v29[8] = *MEMORY[0x263EF8340];
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = &unk_26DE79CE8;
  v20[1] = v21;
  v28[1] = (void *)0x400000000;
  v26[0] = &unk_26DE7A330;
  v26[1] = v20;
  uint64_t v27 = v26;
  v28[0] = v29;
  for (uint64_t i = *(void **)(a2 + 24); i; uint64_t i = (void *)*i)
    sub_22B22DDE4((uint64_t)v27, i[5]);
  sub_22B22DE34(v26);
  v24[0] = &unk_26DE7A3C0;
  v24[1] = v20;
  uint64_t v25 = v24;
  for (unsigned int j = *(void **)(a3 + 24); j; unsigned int j = (void *)*j)
    sub_22B22DDE4((uint64_t)v25, j[5]);
  sub_22B22DE34(v24);
  sub_22B22DEB8((uint64_t)v20, (uint64_t)v28, a4);
  sub_22B22E018(a1, (uint64_t)v28);
  uint64_t v19 = a1;
  unsigned __int8 v18 = 1;
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = &unk_26DE7A450;
  v10[1] = &v18;
  void v10[2] = v20;
  void v10[3] = &v19;
  v23[3] = v10;
  uint64_t v11 = *(void **)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v10;
    do
    {
      sub_22B22DDE4(v12, v11[5]);
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  sub_22B22DE34(v23);
  unsigned int v13 = operator new(0x20uLL);
  void *v13 = &unk_26DE7A4E0;
  v13[1] = &v18;
  v13[2] = v20;
  void v13[3] = &v19;
  void v22[3] = v13;
  uint64_t v14 = *(void **)(a3 + 24);
  if (v14)
  {
    uint64_t v15 = (uint64_t)v13;
    do
    {
      sub_22B22DDE4(v15, v14[5]);
      uint64_t v14 = (void *)*v14;
    }
    while (v14);
  }
  sub_22B22DE34(v22);
  int v16 = v18;
  if (v28[0] != v29) {
    free(v28[0]);
  }
  sub_22B1EDBB8(v21[0]);
  return v16 != 0;
}

uint64_t sub_22B22DDA8(uint64_t a1)
{
  sub_22B22FD90(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *sub_22B22DDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  sub_22B230B5C();
  return sub_22B22DE34(v3);
}

void *sub_22B22DE34(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_22B22DEB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 8);
  uint64_t v4 = (void *)(result + 16);
  if (v3 != (void *)(result + 16))
  {
    char v6 = (void *)(a3 + 8);
    do
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_13;
      }
      unsigned int v8 = *((_DWORD *)v3 + 9);
      uint64_t v9 = v6;
      do
      {
        unsigned int v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 > v8;
        if (v10 <= v8) {
          uint64_t v12 = (uint64_t *)(v7 + 8);
        }
        else {
          uint64_t v12 = (uint64_t *)v7;
        }
        if (v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8)) {
LABEL_13:
      }
        uint64_t v9 = v6;
      unsigned int v13 = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v3 + 9) = v13;
      unsigned int v14 = *((_DWORD *)v3 + 7);
      if (v14 <= *((_DWORD *)v3 + 8))
      {
        uint64_t v18 = (uint64_t)(v9 + 4);
        do
        {
          BOOL result = sub_22B234B4C(v18, v14);
          if (v13 >= *(_DWORD *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v20 = (uint64_t *)(*(void *)a2 + 16 * v13);
          *unsigned int v20 = result;
          v20[1] = v19;
          unsigned int v13 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v13;
          ++v14;
        }
        while (v14 <= *((_DWORD *)v3 + 8));
      }
      uint64_t v15 = (void *)v3[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (void *)v3[2];
          BOOL v17 = *v16 == (void)v3;
          uint64_t v3 = v16;
        }
        while (!v17);
      }
      uint64_t v3 = v16;
    }
    while (v16 != v4);
  }
  return result;
}

void sub_22B22E018(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
  {
    if (MGGetBoolAnswer()
      && (uint64_t v4 = (const char *)sub_22B1DEEE4("AGX_FORCE_CS_SAMPLERS")) != 0
      && *v4 != 48
      && atoi(v4)
      && !*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1678))
    {
      uint64_t v15 = (llvm::Constant *)llvm::PointerType::get();
      uint64_t NullValue = llvm::Constant::getNullValue(v15, v16);
      sub_22B212008((llvm::ValueHandleBase *)(a1 + 1544), NullValue);
    }
    else
    {
      sub_22B2348C4((void *)a1, (uint64_t *)a2, a1 + 1544);
    }
    sub_22B2348C4((void *)a1, (uint64_t *)a2, a1 + 1600);
    sub_22B2348C4((void *)a1, (uint64_t *)a2, a1 + 1656);
    uint64_t v5 = (uint64_t *)(a1 + 600);
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 608);
    if (v7 != v6)
    {
      if (v7 <= v6)
      {
        if (*(_DWORD *)(a1 + 612) < v6) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7 != v6) {
          bzero((void *)(*v5 + 4 * v7), 4 * v6 - 4 * v7);
        }
      }
      *(_DWORD *)(a1 + 608) = v6;
      LODWORD(v6) = *(_DWORD *)(a2 + 8);
    }
    if (v6)
    {
      unint64_t v8 = 0;
      uint64_t v9 = *(int **)a2;
      uint64_t v10 = *v5;
      do
      {
        int v11 = *v9;
        v9 += 4;
        *(_DWORD *)(v10 + 4 * v8++) = v11;
      }
      while (v8 < *(unsigned int *)(a2 + 8));
    }
  }
  else if (!*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1678) && *(_DWORD *)(a1 + 2160))
  {
    uint64_t v12 = (llvm::Constant *)llvm::PointerType::get();
    uint64_t v14 = llvm::Constant::getNullValue(v12, v13);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 1544), v14);
    sub_22B2348C4((void *)a1, (uint64_t *)a2, a1 + 1656);
  }
}

uint64_t *sub_22B22E1FC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = result + 1;
    do
    {
      unsigned int v7 = (unsigned int *)(v4 + 4);
      unint64_t v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v10 = v5[1];
      int v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          int v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8) {
          uint64_t v14 = (uint64_t **)v9;
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v15 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v15 = (uint64_t **)v6;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        uint64_t v15 = (uint64_t **)v6;
        if (v8)
        {
          uint64_t v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v8;
              unsigned int v21 = *((_DWORD *)v8 + 8);
              if (v13 >= v21) {
                break;
              }
              unint64_t v8 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v21 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            unint64_t v8 = v14[1];
            if (!v8) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        int v16 = operator new(0x48uLL);
        uint64_t v17 = v4[8];
        long long v18 = *((_OWORD *)v4 + 3);
        void v16[2] = *(_OWORD *)v7;
        void v16[3] = v18;
        *((void *)v16 + 8) = v17;
        BOOL result = sub_22B215FA4((uint64_t **)v5, (uint64_t)v14, v15, (uint64_t *)v16);
      }
      uint64_t v19 = (void *)v4[1];
      if (v19)
      {
        do
        {
          unsigned int v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unsigned int v20 = (void *)v4[2];
          BOOL v12 = *v20 == (void)v4;
          uint64_t v4 = v20;
        }
        while (!v12);
      }
      uint64_t v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

BOOL sub_22B22E368(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v125 = 0x400000000;
  v107[0] = 0;
  v107[1] = 0;
  uint64_t v105 = &unk_26DE79CE8;
  uint64_t v106 = v107;
  v122[0] = &unk_26DE7A6D8;
  v122[1] = &v105;
  long long v123 = v122;
  uint64_t v124 = v126;
  for (uint64_t i = *(void **)(a2 + 24); i; uint64_t i = (void *)*i)
    sub_22B22DDE4((uint64_t)v123, i[5]);
  sub_22B22DE34(v122);
  v120[0] = &unk_26DE7A768;
  v120[1] = &v105;
  uint64_t v121 = v120;
  uint64_t v90 = a3;
  for (unsigned int j = *(void **)(a3 + 24); j; unsigned int j = (void *)*j)
    sub_22B22DDE4((uint64_t)v121, j[5]);
  sub_22B22DE34(v120);
  memset(v103, 0, sizeof(v103));
  int v104 = 1065353216;
  uint64_t v9 = v106;
  if (v106 == v107)
  {
LABEL_85:
    *(void *)&long long v127 = v103;
    LOBYTE(v111) = 1;
    v118[0] = &unk_26DE7A7F8;
    v118[1] = &v111;
    v118[2] = &v127;
    uint64_t v119 = v118;
    for (uint64_t k = *(void **)(a2 + 24); k; uint64_t k = (void *)*k)
      sub_22B22DDE4((uint64_t)v119, k[5]);
    sub_22B22DE34(v118);
    v116[0] = &unk_26DE7A888;
    v116[1] = &v111;
    _OWORD v116[2] = &v127;
    uint64_t v117 = v116;
    for (uint64_t m = *(void **)(v90 + 24); m; uint64_t m = (void *)*m)
      sub_22B22DDE4((uint64_t)v117, m[5]);
    sub_22B22DE34(v116);
    BOOL v87 = (_BYTE)v111 != 0;
  }
  else
  {
    uint64_t v10 = (void *)(a4 + 8);
    int v11 = a1 + 43;
    BOOL v12 = "driver_parameters";
    uint64_t v91 = v10;
    while (1)
    {
      uint64_t v13 = *v10;
      if (!*v10) {
        break;
      }
      unsigned int v14 = *((_DWORD *)v9 + 9);
      uint64_t v15 = v10;
      do
      {
        unsigned int v16 = *(_DWORD *)(v13 + 36) + *(_DWORD *)(v13 + 32);
        BOOL v17 = v16 > v14;
        if (v16 <= v14) {
          long long v18 = (uint64_t *)(v13 + 8);
        }
        else {
          long long v18 = (uint64_t *)v13;
        }
        if (v17) {
          uint64_t v15 = (void *)v13;
        }
        uint64_t v13 = *v18;
      }
      while (*v18);
      if (v15 == v10) {
        break;
      }
      unsigned int v20 = *((_DWORD *)v15 + 8);
      uint64_t v19 = (uint64_t)(v15 + 4);
      if (v14 < v20) {
        break;
      }
      unsigned int v21 = *((_DWORD *)v9 + 7);
      if (*((_DWORD *)v9 + 8) != v21) {
        break;
      }
      sub_22B2301A8((uint64_t)&v98, v19, v21);
      uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 336), (llvm::LLVMContext *)2);
      uint64_t v23 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 192);
      *(void *)&long long v127 = Int8PtrTy;
      *((void *)&v127 + 1) = v23;
      *(void *)&long long v128 = v23;
      llvm::StructType::get();
      if ((*(unsigned char *)(v102 + 9) & 1) == 0)
      {
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v127 = 0u;
        *(void *)&long long v127 = llvm::PointerType::get();
        *((void *)&v127 + 1) = llvm::PointerType::get();
        llvm::FixedVectorType::get();
        *(void *)&long long v128 = llvm::PointerType::get();
        *((void *)&v128 + 1) = llvm::PointerType::get();
        *(void *)&long long v129 = llvm::PointerType::get();
        *((void *)&v129 + 1) = llvm::PointerType::get();
        *(void *)&long long v130 = llvm::PointerType::get();
        *((void *)&v130 + 1) = llvm::PointerType::get();
        *(void *)&long long v131 = llvm::PointerType::get();
        *((void *)&v131 + 1) = llvm::PointerType::get();
        llvm::StructType::setBody();
      }
      unsigned int v24 = v98;
      unint64_t v96 = ((unint64_t)v98 >> 16) & 0x7FFF;
      uint64_t v97 = (unsigned __int16)v98;
      if (v100)
      {
        uint64_t v25 = llvm::User::operator new((llvm::User *)0x58);
        if ((v24 & 0x80000000) != 0)
        {
          v108[0] = v96;
          uint64_t v109 = ".";
          __int16 v110 = 776;
          char v26 = 2;
          char v27 = 8;
          uint64_t v28 = &v111;
          uint64_t v111 = v108;
          uint64_t v113 = v97;
        }
        else
        {
          LODWORD(v111) = v97;
          char v26 = 8;
          char v27 = 1;
          uint64_t v28 = (void **)v111;
        }
        char v114 = v26;
        char v115 = v27;
        *(void *)&long long v127 = "agc.read_image_words";
        *(void *)&long long v128 = v28;
        *((void *)&v128 + 1) = v112;
        LOBYTE(v129) = 3;
        BYTE1(v129) = v26;
        llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v25 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        uint64_t v29 = (uint64_t)a1 + *(void *)(*a1 - 24);
        if (*(unsigned char *)(*(void *)(v29 + 344) + 1647)) {
          sub_22B233CD8(a1);
        }
        else {
          sub_22B2436D4(v29);
        }
        if (v99 != -1)
        {
          uint64_t v30 = *(void *)((char *)v11 + *(void *)(*a1 - 24));
          (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 168))(v30, v25);
        }
      }
      else
      {
        uint64_t v25 = 0;
      }
      if (v101)
      {
        uint64_t v31 = llvm::User::operator new((llvm::User *)0x58);
        if ((v24 & 0x80000000) != 0)
        {
          v108[0] = v96;
          uint64_t v109 = ".";
          __int16 v110 = 776;
          uint64_t v111 = v108;
          uint64_t v113 = v97;
          char v32 = 2;
          char v33 = 8;
          __int16 v34 = &v111;
        }
        else
        {
          LODWORD(v111) = v97;
          char v32 = 8;
          char v33 = 1;
          __int16 v34 = (void **)v111;
        }
        char v114 = v32;
        char v115 = v33;
        *(void *)&long long v127 = "agc.write_image_words";
        *(void *)&long long v128 = v34;
        *((void *)&v128 + 1) = v112;
        LOBYTE(v129) = 3;
        BYTE1(v129) = v32;
        uint64_t v35 = v31;
        uint64_t v36 = llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v36 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        uint64_t v37 = (uint64_t)a1 + *(void *)(*a1 - 24);
        uint64_t v94 = v35;
        if (*(unsigned char *)(*(void *)(v37 + 344) + 1647)) {
          sub_22B233CD8(a1);
        }
        else {
          sub_22B2436D4(v37);
        }
        if (v99 != -1)
        {
          uint64_t v38 = *(void *)((char *)v11 + *(void *)(*a1 - 24));
          (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 168))(v38, v35);
        }
      }
      else
      {
        uint64_t v94 = 0;
      }
      uint64_t v39 = llvm::User::operator new((llvm::User *)0x58);
      llvm::FixedVectorType::get();
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v40 = 2;
        char v41 = 8;
        uint64_t v42 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v40 = 8;
        char v41 = 1;
        uint64_t v42 = (void **)v111;
      }
      char v114 = v40;
      char v115 = v41;
      *(void *)&long long v127 = "agc.image_dim";
      *(void *)&long long v128 = v42;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v40;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v39 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v95 = llvm::User::operator new((llvm::User *)0x58);
      uint64_t v93 = v25;
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v43 = 2;
        char v44 = 8;
        uint64_t v45 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v43 = 8;
        char v44 = 1;
        uint64_t v45 = (void **)v111;
      }
      char v114 = v43;
      char v115 = v44;
      *(void *)&long long v127 = "agc.image_array_info";
      *(void *)&long long v128 = v45;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v43;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v95 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v46 = llvm::User::operator new((llvm::User *)0x58);
      uint64_t v92 = v39;
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v47 = 2;
        char v48 = 8;
        uint64_t v49 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v47 = 8;
        char v48 = 1;
        uint64_t v49 = (void **)v111;
      }
      char v114 = v47;
      char v115 = v48;
      *(void *)&long long v127 = "agc.image_pack_format";
      *(void *)&long long v128 = v49;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v47;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v46 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v50 = llvm::User::operator new((llvm::User *)0x58);
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v51 = 2;
        char v52 = 8;
        uint64_t v53 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v51 = 8;
        char v52 = 1;
        uint64_t v53 = (void **)v111;
      }
      char v114 = v51;
      char v115 = v52;
      *(void *)&long long v127 = "agc.image_mipmap_count";
      *(void *)&long long v128 = v53;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v51;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v50 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v54 = llvm::User::operator new((llvm::User *)0x58);
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v55 = 2;
        char v56 = 8;
        uint64_t v57 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v55 = 8;
        char v56 = 1;
        uint64_t v57 = (void **)v111;
      }
      char v114 = v55;
      char v115 = v56;
      *(void *)&long long v127 = "agc.image_sample_count";
      *(void *)&long long v128 = v57;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v55;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v54 + 80) |= 1u;
      uint64_t v58 = v12;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v59 = llvm::User::operator new((llvm::User *)0x58);
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v60 = 2;
        char v61 = 8;
        size_t v62 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v60 = 8;
        char v61 = 1;
        size_t v62 = (void **)v111;
      }
      char v114 = v60;
      char v115 = v61;
      *(void *)&long long v127 = "agc.image_base_level";
      *(void *)&long long v128 = v62;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v60;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v59 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v63 = llvm::User::operator new((llvm::User *)0x58);
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v64 = 2;
        char v65 = 8;
        uint64_t v66 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v64 = 8;
        char v65 = 1;
        uint64_t v66 = (void **)v111;
      }
      char v114 = v64;
      char v115 = v65;
      *(void *)&long long v127 = "agc.image_heap_index";
      *(void *)&long long v128 = v66;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v64;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v63 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t v67 = llvm::User::operator new((llvm::User *)0x58);
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v68 = 2;
        char v69 = 8;
        uint64_t v70 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v68 = 8;
        char v69 = 1;
        uint64_t v70 = (void **)v111;
      }
      char v114 = v68;
      char v115 = v69;
      *(void *)&long long v127 = "agc.image_unique_id";
      *(void *)&long long v128 = v70;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v68;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v67 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
      uint64_t NullValue = v93;
      if (!v93)
      {
        uint64_t v72 = (llvm::Constant *)llvm::PointerType::get();
        uint64_t NullValue = llvm::Constant::getNullValue(v72, v73);
      }
      *(void *)&long long v127 = NullValue;
      uint64_t v74 = v94;
      if (!v94)
      {
        uint64_t v75 = (llvm::Constant *)llvm::PointerType::get();
        uint64_t v74 = llvm::Constant::getNullValue(v75, v76);
      }
      *((void *)&v127 + 1) = v74;
      *(void *)&long long v128 = v92;
      *((void *)&v128 + 1) = v95;
      *(void *)&long long v129 = v46;
      *((void *)&v129 + 1) = v50;
      *(void *)&long long v130 = v54;
      *((void *)&v130 + 1) = v59;
      *(void *)&long long v131 = v63;
      *((void *)&v131 + 1) = v67;
      llvm::ConstantStruct::get();
      uint64_t v77 = llvm::User::operator new((llvm::User *)0x58);
      if ((v24 & 0x80000000) != 0)
      {
        v108[0] = v96;
        uint64_t v109 = ".";
        __int16 v110 = 776;
        uint64_t v111 = v108;
        uint64_t v113 = v97;
        char v78 = 2;
        char v79 = 8;
        uint64_t v80 = &v111;
      }
      else
      {
        LODWORD(v111) = v97;
        char v78 = 8;
        char v79 = 1;
        uint64_t v80 = (void **)v111;
      }
      BOOL v12 = v58;
      char v114 = v78;
      char v115 = v79;
      *(void *)&long long v127 = "agc.image_state_struct_ptr";
      *(void *)&long long v128 = v80;
      *((void *)&v128 + 1) = v112;
      LOBYTE(v129) = 3;
      BYTE1(v129) = v78;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v77 + 80) |= 1u;
      llvm::GlobalVariable::setInitializer();
      long long v127 = 4uLL;
      unint64_t v81 = v77;
      *(void *)&long long v128 = v77;
      if (v77 != -8192)
      {
        unint64_t v81 = v77;
        if (v77 != -4096)
        {
          unint64_t v81 = v77;
          if (v77)
          {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v127);
            unint64_t v81 = v128;
          }
        }
      }
      sub_22B22C248(a1 + 95, v81, &v127);
      if ((void)v128 != -8192 && (void)v128 != -4096 && (void)v128) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v127);
      }
      sub_22B233468((float *)v103, *((_DWORD *)v9 + 7), (_DWORD *)v9 + 7)[3] = v77;
      uint64_t v82 = v9[1];
      if (v82)
      {
        do
        {
          uint64_t v83 = (void **)v82;
          uint64_t v82 = (void *)*v82;
        }
        while (v82);
      }
      else
      {
        do
        {
          uint64_t v83 = (void **)v9[2];
          BOOL v84 = *v83 == v9;
          uint64_t v9 = v83;
        }
        while (!v84);
      }
      uint64_t v9 = v83;
      uint64_t v10 = v91;
      int v11 = a1 + 43;
      if (v83 == v107) {
        goto LABEL_85;
      }
    }
    BOOL v87 = 0;
  }
  sub_22B233844((uint64_t)v103);
  sub_22B1EDBB8(v107[0]);
  if (v124 != v126) {
    free(v124);
  }
  return v87;
}

uint64_t sub_22B22F980(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned __int8 v4 = 1;
  v5[0] = &unk_26DE7A0A8;
  v5[1] = &v4;
  v5[2] = a1;
  uint64_t v6 = v5;
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      sub_22B22DDE4((uint64_t)v6, v2[5]);
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  sub_22B22DE34(v5);
  return v4;
}

unint64_t sub_22B22FA28(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 8);
  unsigned __int8 v4 = (void *)(result + 16);
  if (v3 != (void *)(result + 16))
  {
    uint64_t v6 = (void *)(a3 + 8);
    do
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_13;
      }
      unsigned int v8 = *((_DWORD *)v3 + 9);
      uint64_t v9 = v6;
      do
      {
        unsigned int v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 > v8;
        if (v10 <= v8) {
          BOOL v12 = (uint64_t *)(v7 + 8);
        }
        else {
          BOOL v12 = (uint64_t *)v7;
        }
        if (v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8)) {
LABEL_13:
      }
        uint64_t v9 = v6;
      *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 8);
      unsigned int v13 = *((_DWORD *)v3 + 7);
      if (v13 <= *((_DWORD *)v3 + 8))
      {
        uint64_t v14 = (uint64_t)(v9 + 4);
        do
        {
          sub_22B2301A8((uint64_t)v20, v14, v13);
          BOOL result = sub_22B230228(a2, (unint64_t)v20);
          uint64_t v15 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 8);
          long long v16 = *(_OWORD *)result;
          *(void *)(v15 + 16) = *(void *)(result + 16);
          *(_OWORD *)uint64_t v15 = v16;
          ++*(_DWORD *)(a2 + 8);
          ++v13;
        }
        while (v13 <= *((_DWORD *)v3 + 8));
      }
      BOOL v17 = (void *)v3[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          BOOL v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v3[2];
          BOOL v19 = *v18 == (void)v3;
          uint64_t v3 = v18;
        }
        while (!v19);
      }
      uint64_t v3 = v18;
    }
    while (v18 != v4);
  }
  return result;
}

void sub_22B22FB6C(uint64_t a1, uint64_t a2)
{
  v18[16] = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 1880) = *(_DWORD *)(a2 + 8);
  v18[0] = 0;
  LOWORD(v17) = 0;
  BYTE2(v17) = 0;
  long long v16 = (void *)0xFFFFFFFF00040000;
  uint64_t v4 = (uint64_t)&v16;
  unint64_t v5 = sub_22B230228(a2, (unint64_t)&v16);
  uint64_t v6 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 8);
  long long v7 = *(_OWORD *)v5;
  *(void *)(v6 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)uint64_t v6 = v7;
  ++*(_DWORD *)(a2 + 8);
  uint64_t v8 = sub_22B2313B8((void *)a1, (uint64_t *)a2, a1 + 1432);
  long long v16 = v18;
  uint64_t v17 = 0x800000000;
  unint64_t v9 = *(unsigned int *)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 4;
    do
    {
      uint64_t v14 = *(unsigned int *)(*(void *)a2 + v13);
      if (v14 != -1)
      {
        uint64_t v4 = v4 & 0xFFFFFF0000000000 | 4;
        sub_22B232128((uint64_t)&v16, v11 + v14, v4);
        unint64_t v9 = *(unsigned int *)(a2 + 8);
      }
      ++v12;
      v11 += 0x400000000;
      v13 += 24;
    }
    while (v12 < v9);
    if (v17)
    {
      uint64_t v15 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v15 + 176))(v15, v10, &v16);
    }
  }
  if (v16 != v18) {
    free(v16);
  }
}

void sub_22B22FD20(void *a1)
{
  for (uint64_t i = (uint64_t **)a1[3]; i; uint64_t i = (uint64_t **)*i)
    llvm::Function::eraseFromParent((llvm::Function *)i[5]);
  if (a1[4])
  {
    sub_22B22FD90((void *)a1[3]);
    a1[3] = 0;
    uint64_t v3 = a1[2];
    if (v3)
    {
      for (uint64_t j = 0; j != v3; ++j)
        *(void *)(a1[1] + 8 * j) = 0;
    }
    a1[4] = 0;
  }
}

void sub_22B22FD90(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = v1;
      uint64_t v1 = (void *)*v1;
      uint64_t v3 = v2[5];
      if (v3 != -8192 && v3 != -4096 && v3 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v2 + 3));
      }
      operator delete(v2);
    }
    while (v1);
  }
}

BOOL sub_22B22FDEC(const char **a1, llvm::Value *this)
{
  uint64_t Name = llvm::Value::getName(this);
  unint64_t v5 = *a1;
  if (!v5) {
    return 1;
  }
  uint64_t v6 = (const void *)Name;
  size_t v7 = v4;
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  return !v8 || memcmp(v6, v5, v8) == 0;
}

void sub_22B22FE68(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  size_t v8 = (uint64_t **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 16);
    do
    {
      unsigned int v11 = *(_DWORD *)(v10 + 32);
      BOOL v12 = v11 >= a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)(v10 + 8);
      }
      if (v12) {
        unint64_t v9 = (uint64_t *)v10;
      }
      uint64_t v10 = *v13;
    }
    while (*v13);
    uint64_t v14 = (uint64_t *)(a1 + 16);
    do
    {
      unsigned int v15 = *(_DWORD *)(v7 + 28);
      BOOL v16 = v15 > HIDWORD(a2);
      if (v15 <= HIDWORD(a2)) {
        uint64_t v17 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v17 = (uint64_t *)v7;
      }
      if (v16) {
        uint64_t v14 = (uint64_t *)v7;
      }
      uint64_t v7 = *v17;
    }
    while (*v17);
    if (v9 == v14)
    {
      uint64_t v14 = v9;
    }
    else
    {
      long long v18 = v9;
      do
      {
        unsigned int v19 = *((_DWORD *)v18 + 8);
        if (*((_DWORD *)v18 + 7) < v4) {
          unsigned int v4 = *((_DWORD *)v18 + 7);
        }
        if (v6 <= v19) {
          unint64_t v6 = v19;
        }
        else {
          unint64_t v6 = v6;
        }
        (**(void (***)(uint64_t, uint64_t, void))a1)(a1, a3, *((unsigned int *)v18 + 9));
        unsigned int v20 = (uint64_t *)v18[1];
        if (v20)
        {
          do
          {
            unsigned int v21 = v20;
            unsigned int v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            unsigned int v21 = (uint64_t *)v18[2];
            BOOL v22 = *v21 == (void)v18;
            long long v18 = v21;
          }
          while (!v22);
        }
        long long v18 = v21;
      }
      while (v21 != v14);
    }
    uint64_t v23 = (uint64_t **)(a1 + 8);
    if (v9 != v14)
    {
      do
      {
        unsigned int v24 = (uint64_t *)v9[1];
        uint64_t v25 = v9;
        if (v24)
        {
          do
          {
            char v26 = v24;
            unsigned int v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            char v26 = (uint64_t *)v25[2];
            BOOL v22 = *v26 == (void)v25;
            uint64_t v25 = v26;
          }
          while (!v22);
        }
        if (*v23 == v9) {
          uint64_t *v23 = v26;
        }
        char v27 = *(uint64_t **)(a1 + 16);
        --*(void *)(a1 + 24);
        sub_22B2317CC(v27, v9);
        operator delete(v9);
        unint64_t v9 = v26;
      }
      while (v26 != v14);
    }
    while (1)
    {
      uint64_t v28 = *v8;
      if (!*v8) {
        break;
      }
      while (1)
      {
        size_t v8 = (uint64_t **)v28;
        if (v6 < *((_DWORD *)v28 + 7)) {
          break;
        }
        if (*((_DWORD *)v28 + 8) >= v4) {
          return;
        }
        uint64_t v29 = (uint64_t **)(v28 + 1);
        uint64_t v28 = (uint64_t *)v28[1];
        if (!v28) {
          goto LABEL_49;
        }
      }
    }
  }
  else
  {
    uint64_t v23 = (uint64_t **)(a1 + 8);
  }
  uint64_t v29 = v8;
LABEL_49:
  uint64_t v30 = (char *)operator new(0x28uLL);
  *(void *)(v30 + 28) = v4 | (v6 << 32);
  *((_DWORD *)v30 + 9) = a3;
  *(void *)uint64_t v30 = 0;
  *((void *)v30 + 1) = 0;
  *((void *)v30 + 2) = v8;
  *uint64_t v29 = (uint64_t *)v30;
  uint64_t v31 = (uint64_t *)**v23;
  if (v31)
  {
    uint64_t *v23 = v31;
    char v32 = *v29;
  }
  else
  {
    char v32 = (uint64_t *)v30;
  }
  sub_22B1E313C(*(uint64_t **)(a1 + 16), v32);
  ++*(void *)(a1 + 24);
}

uint64_t sub_22B2300A0(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_22B2313B8(a1, a2, (uint64_t)(a1 + 123));
  sub_22B231648((uint64_t)a1, (uint64_t)a2, v4);
  uint64_t v5 = sub_22B2313B8(a1, a2, (uint64_t)(a1 + 130));
  uint64_t result = sub_22B231648((uint64_t)a1, (uint64_t)a2, v5);
  if (*(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1678))
  {
    sub_22B2313B8(a1, a2, (uint64_t)(a1 + 137));
    sub_22B2313B8(a1, a2, (uint64_t)(a1 + 144));
    sub_22B2313B8(a1, a2, (uint64_t)(a1 + 158));
    sub_22B2313B8(a1, a2, (uint64_t)(a1 + 165));
    sub_22B2313B8(a1, a2, (uint64_t)(a1 + 151));
    sub_22B2313B8(a1, a2, (uint64_t)(a1 + 172));
    return sub_22B2313B8(a1, a2, (uint64_t)(a1 + 186));
  }
  return result;
}

uint64_t sub_22B2301A8(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 224);
    uint64_t v5 = *(unsigned int *)(v3 + 16);
    if (v5)
    {
      unint64_t v6 = *(_DWORD **)(v3 + 8);
      uint64_t v7 = &v6[4 * v5];
      unsigned int v8 = (unsigned __int16)a3 - *(_DWORD *)(v3 + 228);
      do
      {
        unsigned int v9 = v6[2];
        int v10 = v8 / v9;
        v8 %= v9;
        v4 += *(_DWORD *)(*(void *)v6 + 20) * v10;
        v6 += 4;
      }
      while (v6 != v7);
    }
    a3 = a3 & 0xFFFF0000 | (unsigned __int16)v4;
  }
  *(void *)(result + 16) = *(void *)(a2 + 32);
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 8);
  int v11 = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(result + 10) = *(_DWORD *)(a2 + 16) == 1;
  *(_DWORD *)uint64_t result = a3;
  *(_DWORD *)(result + 4) = v11;
  return result;
}

unint64_t sub_22B230228(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 24 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

uint64_t sub_22B2302A4(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  if (v3 == *a1) {
    unint64_t v4 = (unsigned int *)a1 + 5;
  }
  else {
    unint64_t v4 = (unsigned int *)(a1 + 2);
  }
  uint64_t v5 = *v4;
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    for (uint64_t i = (uint64_t *)a1[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6) {
        return 1;
      }
    }
  }
  else
  {
    uint64_t i = (uint64_t *)a1[1];
  }
  unsigned int v8 = (uint64_t *)(v3 + 8 * v5);
  if (i == v8) {
    return 1;
  }
  uint64_t v9 = *i;
  while (1)
  {
    uint64_t v14 = v9;
    uint64_t v10 = *(void *)(a2 + 24);
    if (!v10) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v10 + 48))(v10, &v14);
    ++i;
    if (result) {
      BOOL v12 = i == v8;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      while (1)
      {
        uint64_t v9 = *i;
        if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL) {
          break;
        }
        if (++i == v8) {
          return 1;
        }
      }
      if (i != v8) {
        continue;
      }
    }
    return result;
  }
  sub_22B230B5C();
  return (uint64_t)sub_22B23039C(v13);
}

void *sub_22B23039C(void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_22B230420(void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_22B2304A4(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  unsigned int v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  v5[0] = &unk_26DE7A060;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B230530(llvm::Constant *this, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (this)
  {
    uint64_t v4 = *((void *)this + 1);
    while (v4)
    {
      uint64_t v13 = v17;
      uint64_t v14 = v17;
      uint64_t v15 = 4;
      int v16 = 0;
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v4 + 24);
      if (v6) {
        BOOL v7 = *(unsigned char *)(v6 + 16) == 5;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7)
      {
        for (uint64_t i = *(void *)(v6 + 8); i; uint64_t i = *(void *)(i + 8))
          sub_22B22D8BC((uint64_t)v12, &v13, *(const void **)(i + 24));
      }
      else
      {
        sub_22B22D8BC((uint64_t)v12, &v13, (const void *)v6);
      }
      uint64_t v9 = (void *)a2[3];
      if (v9)
      {
        if (v9 == a2)
        {
          unsigned int v19 = v18;
          (*(void (**)(void *, void *))(*a2 + 24))(a2, v18);
        }
        else
        {
          unsigned int v19 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
        }
      }
      else
      {
        unsigned int v19 = 0;
      }
      char v10 = sub_22B2302A4(&v13, (uint64_t)v18);
      sub_22B23039C(v18);
      if (v14 != v13) {
        free(v14);
      }
      uint64_t v4 = v5;
      if ((v10 & 1) == 0) {
        return 0;
      }
    }
    llvm::Constant::removeDeadConstantUsers(this);
  }
  return 1;
}

uint64_t sub_22B2306CC(uint64_t a1, llvm::Instruction **a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = v4[4];
  if (v5) {
    BOOL v6 = v5 == v4[5] + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5 - 24;
  }
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, v7);
  unsigned int v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v13 = 257;
  uint64_t v9 = (const void *)sub_22B1D4240(v8 + 1, **(llvm::Type ***)(*v4 + 16), (uint64_t)v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  char v10 = v3 + 111;
  if (sub_22B2307C8((uint64_t)v10, v2)) {
    sub_22B22D8BC((uint64_t)v12, v10, v9);
  }
  return 1;
}

BOOL sub_22B2307C8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_22B22A358((llvm::SmallPtrSetImplBase *)a1, a2);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = 16;
  if (v4 == *(void *)a1) {
    uint64_t v5 = 20;
  }
  BOOL v6 = (void **)(v4 + 8 * *(unsigned int *)(a1 + v5));
  if (v3 != v6)
  {
    void *v3 = (void *)-2;
    ++*(_DWORD *)(a1 + 24);
  }
  return v3 != v6;
}

uint64_t sub_22B230834(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A060;
  a2[1] = v2;
  return result;
}

void *sub_22B230858(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DE7A060;
  result[1] = v3;
  return result;
}

void sub_22B2308A0()
{
}

uint64_t sub_22B2308C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A018;
  a2[1] = v2;
  return result;
}

void *sub_22B2308E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DE7A018;
  result[1] = v3;
  return result;
}

void sub_22B23092C()
{
}

void *sub_22B230944(uint64_t a1, llvm::Constant **a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **(void **)(a1 + 16);
  v6[0] = &unk_26DE79FD0;
  v6[1] = v4;
  void v6[3] = v6;
  v7[0] = &unk_26DE79F88;
  v7[1] = v3;
  void v7[2] = v6;
  v7[3] = v7;
  sub_22B230530(v2, v7);
  sub_22B23039C(v7);
  return sub_22B230420(v6);
}

BOOL sub_22B2309FC(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  sub_22B1E3518(&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v6 = v4 + 16;
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  do
  {
    unsigned int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 >= v16;
    if (v9 >= v16) {
      int v11 = (uint64_t *)v5;
    }
    else {
      int v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16) {
LABEL_12:
  }
    uint64_t v8 = v6;
  uint64_t v12 = *(void *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    uint64_t v13 = ((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    uint64_t v14 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v14 = (void *)*v14;
    }
    sub_22B230B04(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v3, *(_DWORD *)(v8 + 36) - *(_DWORD *)(v8 + 28) + *(_DWORD *)v14);
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

void sub_22B230B04(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  int v3 = a3;
  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t *, int *))(*(void *)a1 + 48))(a1, &v4, &v3);
  }
  else
  {
    sub_22B230B5C();
    sub_22B230B5C();
  }
}

void sub_22B230B5C()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  operator delete(v0);
}

__n128 sub_22B230B7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE79F88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B230BA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE79F88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B230BF0()
{
}

const void *sub_22B230C08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)*a2;
  int v3 = *(void **)(a1 + 8);
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, *a2);
  uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v5 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v18 = 257;
  uint64_t v7 = sub_22B1D6A70(v4, v5, v6, (uint64_t)v17);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v9 = *v2;
  __int16 v18 = 257;
  BOOL v10 = (llvm::GlobalValue *)sub_22B1D7384(v8, 48, v7, v9, (uint64_t)v17);
  uint64_t v11 = sub_22B229E6C((uint64_t)v3, v10);
  uint64_t v12 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v13 = *v2;
  __int16 v18 = 257;
  uint64_t v14 = (const void *)sub_22B1D7384(v12, 48, v11, v13, (uint64_t)v17);
  uint64_t v15 = v3 + 111;
  if (sub_22B2307C8((uint64_t)v15, v2)) {
    sub_22B22D8BC((uint64_t)v17, v15, v14);
  }
  return v14;
}

uint64_t sub_22B230D6C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE79FD0;
  a2[1] = v2;
  return result;
}

void *sub_22B230D90(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE79FD0;
  result[1] = v3;
  return result;
}

void sub_22B230DD8()
{
}

__n128 sub_22B230DF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE79F40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B230E20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE79F40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B230E6C()
{
}

void *sub_22B230E84(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE79EF8;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B230F0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B230F90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE79EF8;
  a2[1] = v2;
  return result;
}

void *sub_22B230FB4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE79EF8;
  result[1] = v3;
  return result;
}

void sub_22B230FFC()
{
}

uint64_t sub_22B23101C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE79EB0;
  a2[1] = v2;
  return result;
}

void *sub_22B231040(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE79EB0;
  result[1] = v3;
  return result;
}

void sub_22B231088()
{
}

BOOL sub_22B2310A0(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  sub_22B1E3518(&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v6 = v4 + 16;
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  do
  {
    unsigned int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 >= v16;
    if (v9 >= v16) {
      uint64_t v11 = (uint64_t *)v5;
    }
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16) {
LABEL_12:
  }
    uint64_t v8 = v6;
  uint64_t v12 = *(void *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    uint64_t v13 = ((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    uint64_t v14 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v14 = (void *)*v14;
    }
    sub_22B230B04(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v3, *(_DWORD *)(v8 + 36) - *(_DWORD *)(v8 + 28) + *(_DWORD *)v14);
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

__n128 sub_22B2311B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE79E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B2311D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE79E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B231224()
{
}

uint64_t sub_22B23123C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, *a2);
  uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v5 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v12 = 257;
  uint64_t v7 = sub_22B1D6A70(v4, v5, v6, (uint64_t)v11);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v9 = *(void *)v2;
  __int16 v12 = 257;
  return sub_22B1D7384(v8, 48, v7, v9, (uint64_t)v11);
}

uint64_t sub_22B231334(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE79E68;
  a2[1] = v2;
  return result;
}

void *sub_22B231358(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE79E68;
  result[1] = v3;
  return result;
}

void sub_22B2313A0()
{
}

uint64_t sub_22B2313B8(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  if (**(unsigned char **)(a3 + 24))
  {
    v16[0] = *(void **)(a3 + 24);
    v17[0] = "_indirect";
    __int16 v7 = 771;
  }
  else
  {
    v16[0] = "_indirect";
    __int16 v7 = 259;
  }
  __int16 v18 = v7;
  llvm::GlobalVariable::GlobalVariable();
  if (*(void *)(a3 + 40)) {
    strlen(*(const char **)(a3 + 40));
  }
  llvm::GlobalObject::setSection();
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  uint64_t v8 = llvm::ValueAsMetadata::get();
  sub_22B1D6788((uint64_t)v16, v8);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  uint64_t v9 = *((unsigned int *)a2 + 2);
  if (v9)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = 24 * v9;
    do
    {
      v10 += 24;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      sub_22B1D6788((uint64_t)v16, Impl);
      v11 -= 24;
    }
    while (v11);
  }
  uint64_t v13 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 328);
  uint64_t v14 = llvm::MDTuple::getImpl();
  sub_22B1D6788(v13, v14);
  sub_22B212008((llvm::ValueHandleBase *)a3, v6);
  if (v16[0] != v17) {
    free(v16[0]);
  }
  return v6;
}

uint64_t sub_22B231648(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    uint64_t v6 = (void *)result;
    uint64_t v7 = 0;
    uint64_t v8 = result + 344;
    uint64_t v9 = 4;
    do
    {
      uint64_t v10 = *(unsigned int *)(*(void *)a2 + v9);
      if (v10 != -1)
      {
        uint64_t v11 = *(void *)(v8 + *(void *)(*v6 - 24));
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 168))(v11, a3, v10, 1, v7);
      }
      ++v7;
      v9 += 24;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t sub_22B231704(uint64_t a1, const void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)a1) {
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, a2);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (!v5)
  {
LABEL_12:
    if (v5 < *(_DWORD *)(a1 + 16))
    {
      *(_DWORD *)(a1 + 20) = v5 + 1;
      *(void *)(v2 + 8 * v5) = a2;
      return *(void *)a1 + 8 * v5;
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, a2);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v3 = *(void **)(a1 + 8);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2) {
      uint64_t v6 = v3;
    }
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_12;
      }
      *uint64_t v6 = a2;
      --*(_DWORD *)(a1 + 24);
      return (uint64_t)v6;
    }
  }
  return (uint64_t)v3;
}

uint64_t *sub_22B2317CC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      void v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        __n128 result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        void v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *uint64_t v20 = (uint64_t)v7;
        void v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      unsigned int v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      __n128 result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    unsigned int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  unsigned int v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    _OWORD v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    void v7[2] = (uint64_t)v15;
    unsigned int v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  unsigned int v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void *sub_22B231B50(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(long long **)(a1 + 8);
  int v5 = &unk_26DE79D90;
  long long v6 = *v3;
  uint64_t v7 = &v5;
  sub_22B230530(v2, &v5);
  return sub_22B23039C(&v5);
}

uint64_t sub_22B231BE0(uint64_t a1, uint64_t *a2)
{
  v23[8] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  unsigned int v16 = v20;
  uint64_t v17 = v20;
  uint64_t v18 = 8;
  int v19 = 0;
  uint64_t v4 = *(void *)(v3 + 8);
  BOOL v21 = v23;
  uint64_t v22 = 0x800000000;
  sub_22B231E58((uint64_t)&v21, v4);
  sub_22B1F5178();
  sub_22B2259A8();
  sub_22B225A2C();
  sub_22B225AB0();
  for (unsigned int i = v22; v22; unsigned int i = v22)
  {
    uint64_t v6 = *((void *)v21 + i - 1);
    LODWORD(v22) = i - 1;
    sub_22B22D8BC((uint64_t)v14, &v16, (const void *)v6);
    if (v15)
    {
      sub_22B231E58((uint64_t)&v21, *(void *)(v6 + 8));
      if (v6)
      {
        if (*(unsigned char *)(v6 + 16) == 84)
        {
          uint64_t v7 = *(void *)(v6 - 32);
          if (v7)
          {
            if (!*(unsigned char *)(v7 + 16) && *(void *)(v7 + 24) == *(void *)(v6 + 72))
            {
              llvm::Value::getName((llvm::Value *)v7);
              int Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)dword_2683E9250)
              {
                int v9 = llvm::StringMapImpl::FindKey();
                if (v9 == -1 || v9 == (unint64_t)dword_2683E9158)
                {
                  int v10 = llvm::StringMapImpl::FindKey();
                  if (v10 == -1 || v10 == (unint64_t)dword_2683E9180)
                  {
                    int v11 = llvm::StringMapImpl::FindKey();
                    if (v11 == -1 || v11 == (unint64_t)dword_2683E91A8)
                    {
                      uint64_t v12 = *(void *)(a1 + 8);
                      sub_22B1E3518(v14, *(llvm::Constant **)(v3 + 32 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF)));
                      sub_22B22FE68(v12, v14[0], **(unsigned int **)(a1 + 16));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v21 != v23) {
    free(v21);
  }
  if (v17 != v16) {
    free(v17);
  }
  return 1;
}

uint64_t sub_22B231E58(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0;
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      ++v3;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  uint64_t v5 = *(unsigned int *)(result + 8);
  if (v3 + v5 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    uint64_t v6 = (void *)(*(void *)result + 8 * v5);
    do
    {
      *v6++ = *(void *)(v2 + 24);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  *(_DWORD *)(result + 8) = v5 + v3;
  return result;
}

__n128 sub_22B231EEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE79D90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B231F14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE79D90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B231F60()
{
}

uint64_t sub_22B231F80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE79DD8;
  a2[1] = v2;
  return result;
}

void *sub_22B231FA4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE79DD8;
  result[1] = v3;
  return result;
}

void sub_22B231FEC()
{
}

void *sub_22B232004(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_26DE79D90;
  long long v6 = *v3;
  uint64_t v7 = &v5;
  sub_22B230530(v2, &v5);
  return sub_22B23039C(&v5);
}

uint64_t sub_22B23209C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE79D48;
  a2[1] = v2;
  return result;
}

void *sub_22B2320C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE79D48;
  result[1] = v3;
  return result;
}

void sub_22B232108()
{
}

uint64_t sub_22B232120(uint64_t a1)
{
  return llvm::IntEqClasses::join((llvm::IntEqClasses *)(a1 + 32));
}

uint64_t sub_22B232128(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (void *)(*(void *)result + 16 * v3);
  *uint64_t v4 = a2;
  v4[1] = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

void *sub_22B232198(void *result, llvm::Constant **a2)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    unsigned int v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    long long v6 = (long long *)v3[3];
    uint64_t v8 = &unk_26DE7ABA0;
    long long v9 = *v6;
    int v10 = &v8;
    v11[0] = &unk_26DE79F88;
    v11[1] = v5;
    void v11[2] = &v8;
    void v11[3] = v11;
    char v7 = sub_22B230530(v4, v11);
    sub_22B23039C(v11);
    *(unsigned char *)v3[1] = v7;
    return sub_22B230420(&v8);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

const void *sub_22B23227C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)*a2;
  unsigned int v3 = *(void **)(a1 + 8);
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, *a2);
  uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v5 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v16 = 257;
  uint64_t v7 = sub_22B1D6A70(v4, v5, v6, (uint64_t)v15);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v9 = llvm::ConstantInt::get();
  __int16 v16 = 257;
  uint64_t v10 = sub_22B1D7468(v8, v7, v9, (uint64_t)v15);
  uint64_t v11 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v12 = *v2;
  __int16 v16 = 257;
  uint64_t v13 = (const void *)sub_22B1D7384(v11, 48, v10, v12, (uint64_t)v15);
  if (sub_22B2307C8((uint64_t)(v3 + 111), v2)) {
    sub_22B22D8BC((uint64_t)v15, v3 + 111, v13);
  }
  return v13;
}

__n128 sub_22B2323F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7ABA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B232420(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE7ABA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B23246C()
{
}

__n128 sub_22B23248C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7AB58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B2324BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26DE7AB58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_22B232510()
{
}

void *sub_22B232528(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7AB10;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B2325B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B232634(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7AB10;
  a2[1] = v2;
  return result;
}

void *sub_22B232658(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7AB10;
  result[1] = v3;
  return result;
}

void sub_22B2326A0()
{
}

uint64_t sub_22B2326C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7AAC8;
  a2[1] = v2;
  return result;
}

void *sub_22B2326E4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7AAC8;
  result[1] = v3;
  return result;
}

void sub_22B23272C()
{
}

void *sub_22B232744(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_26DE7AA38;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_26DE79F88;
    v9[1] = v5;
    v9[2] = v8;
    v9[3] = v9;
    char v7 = sub_22B230530(v4, v9);
    sub_22B23039C(v9);
    *(unsigned char *)v3[1] = v7;
    return sub_22B230420(v8);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

uint64_t sub_22B232824(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, *a2);
  uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v5 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v12 = 257;
  uint64_t v7 = sub_22B1D6A70(v4, v5, v6, (uint64_t)v11);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v9 = *(void *)v2;
  __int16 v12 = 257;
  return sub_22B1D7384(v8, 48, v7, v9, (uint64_t)v11);
}

uint64_t sub_22B23291C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7AA38;
  a2[1] = v2;
  return result;
}

void *sub_22B232940(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7AA38;
  result[1] = v3;
  return result;
}

void sub_22B232988()
{
}

__n128 sub_22B2329A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7AA80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B2329D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26DE7AA80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_22B232A2C()
{
}

void *sub_22B232A44(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_26DE7AA38;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_26DE79F88;
    v9[1] = v5;
    v9[2] = v8;
    v9[3] = v9;
    char v7 = sub_22B230530(v4, v9);
    sub_22B23039C(v9);
    *(unsigned char *)v3[1] = v7;
    return sub_22B230420(v8);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

__n128 sub_22B232B2C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A9F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B232B5C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26DE7A9F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_22B232BB0()
{
}

void *sub_22B232BC8(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A9A8;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B232C50(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B232CD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A9A8;
  a2[1] = v2;
  return result;
}

void *sub_22B232CF8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A9A8;
  result[1] = v3;
  return result;
}

void sub_22B232D40()
{
}

uint64_t sub_22B232D60(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A960;
  a2[1] = v2;
  return result;
}

void *sub_22B232D84(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A960;
  result[1] = v3;
  return result;
}

void sub_22B232DCC()
{
}

void *sub_22B232DE4(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A918;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B232E6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B232EF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A918;
  a2[1] = v2;
  return result;
}

void *sub_22B232F14(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A918;
  result[1] = v3;
  return result;
}

void sub_22B232F5C()
{
}

uint64_t sub_22B232F7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A8D0;
  a2[1] = v2;
  return result;
}

void *sub_22B232FA0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A8D0;
  result[1] = v3;
  return result;
}

void sub_22B232FE8()
{
}

void *sub_22B233000(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    v6[0] = &unk_26DE7A0F0;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = sub_22B230530(v4, v6);
    return sub_22B23039C(v6);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

uint64_t sub_22B2330AC(uint64_t a1, uint64_t *a2)
{
  unsigned char v20[32] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  sub_22B1E3518(v17, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  if (v17[1] != v17[0]) {
    return 0;
  }
  sub_22B1F5178();
  sub_22B225B34();
  sub_22B225A2C();
  sub_22B225AB0();
  sub_22B2259A8();
  uint64_t v18 = v20;
  uint64_t v19 = 0x2000000000;
  sub_22B1D6788((uint64_t)&v18, v2);
  unsigned int v3 = v19;
  if (v19)
  {
    while (1)
    {
      uint64_t v4 = *((void *)v18 + --v3);
      LODWORD(v19) = v3;
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        break;
      }
LABEL_30:
      if (!v3) {
        goto LABEL_31;
      }
    }
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
      if (v7 <= 0x1B) {
        break;
      }
      if (v7 != 84)
      {
        if (v7 != 77) {
          goto LABEL_33;
        }
LABEL_10:
        sub_22B1D6788((uint64_t)&v18, v6);
        goto LABEL_11;
      }
      uint64_t v8 = *(void *)(v6 - 32);
      if (!v8
        || *(unsigned char *)(v8 + 16)
        || *(void *)(v8 + 24) != *(void *)(v6 + 72)
        || ((llvm::Value::getName((llvm::Value *)v8), int Key = llvm::StringMapImpl::FindKey(), Key == -1)
         || Key == (unint64_t)dword_2683E9250)
        && ((int v10 = llvm::StringMapImpl::FindKey(), v10 == -1) || v10 == (unint64_t)dword_2683E91F8)
        && ((int v11 = llvm::StringMapImpl::FindKey(), v11 == -1) || v11 == (unint64_t)dword_2683E9180)
        && ((int v12 = llvm::StringMapImpl::FindKey(), v12 == -1) || v12 == (unint64_t)dword_2683E91A8)
        && ((int v13 = llvm::StringMapImpl::FindKey(), v13 != (unint64_t)dword_2683E9158)
          ? (BOOL v14 = v13 == -1)
          : (BOOL v14 = 1),
            v14))
      {
LABEL_33:
        uint64_t v15 = 0;
        goto LABEL_34;
      }
LABEL_11:
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5)
      {
        unsigned int v3 = v19;
        goto LABEL_30;
      }
    }
    if (v7 != 5 || *(_WORD *)(v6 + 18) != 49) {
      goto LABEL_33;
    }
    goto LABEL_10;
  }
LABEL_31:
  uint64_t v15 = 1;
LABEL_34:
  if (v18 != v20) {
    free(v18);
  }
  return v15;
}

uint64_t sub_22B233350(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A0F0;
  a2[1] = v2;
  return result;
}

void *sub_22B233374(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A0F0;
  result[1] = v3;
  return result;
}

void sub_22B2333BC()
{
}

__n128 sub_22B2333DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A0A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B233404(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE7A0A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B233450()
{
}

void *sub_22B233468(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x20uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_22B1E33E4();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          BOOL v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            uint64_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *BOOL v21 = *v27;
                  *uint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  uint64_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                BOOL v21 = v27;
                uint64_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        char v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *int v10 = *v30;
LABEL_72:
    *uint64_t v30 = v10;
    goto LABEL_73;
  }
  *int v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

uint64_t sub_22B233844(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_22B233890(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    unint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_26DE7A840;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = sub_22B230530(v4, v6);
    return sub_22B23039C(v6);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

BOOL sub_22B233940(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = *(void **)(a1 + 8);
  sub_22B1E3518(&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v4 = sub_22B2339C0(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

uint64_t *sub_22B2339C0(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22B233A7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A840;
  a2[1] = v2;
  return result;
}

void *sub_22B233AA0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A840;
  result[1] = v3;
  return result;
}

void sub_22B233AE8()
{
}

__n128 sub_22B233B08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B233B30(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE7A888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B233B7C()
{
}

void *sub_22B233B94(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_26DE7A840;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = sub_22B230530(v4, v6);
    return sub_22B23039C(v6);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

__n128 sub_22B233C4C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A7F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B233C74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE7A7F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B233CC0()
{
}

uint64_t sub_22B233CD8(void *a1)
{
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  uint64_t v2 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 328);
  uint64_t Impl = llvm::MDTuple::getImpl();
  return sub_22B1D6788(v2, Impl);
}

void *sub_22B233E48(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A7B0;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B233ED0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B233F54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A7B0;
  a2[1] = v2;
  return result;
}

void *sub_22B233F78(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A7B0;
  result[1] = v3;
  return result;
}

void sub_22B233FC0()
{
}

uint64_t sub_22B233FE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A768;
  a2[1] = v2;
  return result;
}

void *sub_22B234004(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A768;
  result[1] = v3;
  return result;
}

void sub_22B23404C()
{
}

void *sub_22B234064(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A720;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B2340EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B234170(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A720;
  a2[1] = v2;
  return result;
}

void *sub_22B234194(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A720;
  result[1] = v3;
  return result;
}

void sub_22B2341DC()
{
}

uint64_t sub_22B2341FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A6D8;
  a2[1] = v2;
  return result;
}

void *sub_22B234220(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A6D8;
  result[1] = v3;
  return result;
}

void sub_22B234268()
{
}

void *sub_22B234280(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_26DE7A690;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = sub_22B230530(v4, v6);
    return sub_22B23039C(v6);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

uint64_t sub_22B234330(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = v4[4];
  if (v5) {
    BOOL v6 = v5 == v4[5] + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5 - 24;
  }
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, v7);
  uint8x8_t v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v11 = 257;
  sub_22B1D4240(v8 + 1, **(llvm::Type ***)(*v4 + 16), (uint64_t)v4, 0, (uint64_t)v10);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

uint64_t sub_22B23440C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A690;
  a2[1] = v2;
  return result;
}

void *sub_22B234430(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A690;
  result[1] = v3;
  return result;
}

void sub_22B234478()
{
}

__n128 sub_22B234498(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B2344C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE7A648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B23450C()
{
}

void *sub_22B234524(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_26DE7A600;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_26DE79F88;
    v9[1] = v5;
    v9[2] = v8;
    v9[3] = v9;
    char v7 = sub_22B230530(v4, v9);
    sub_22B23039C(v9);
    *(unsigned char *)v3[1] = v7;
    return sub_22B230420(v8);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

uint64_t sub_22B234604(uint64_t a1, uint64_t *a2)
{
  void v19[2] = *(uint64_t **)MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, *a2);
  uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v5 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v18 = 257;
  char v7 = (uint64_t *)sub_22B1D6A70(v4, v5, v6, (uint64_t)v17);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24);
  uint64_t v9 = (uint64_t *)v3[209];
  v19[0] = (uint64_t *)llvm::ConstantInt::get();
  v19[1] = v7;
  __int16 v18 = 257;
  uint64_t v10 = sub_22B229F08(v8, v9, v19, 2, (uint64_t)v17);
  __int16 v16 = 257;
  uint64_t v11 = sub_22B1D4240((uint64_t *)(v8 + 8), **(llvm::Type ***)(*(void *)v10 + 16), v10, 0, (uint64_t)v15);
  uint64_t v12 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v13 = *(void *)v2;
  __int16 v18 = 257;
  return sub_22B1D7384(v12, 48, v11, v13, (uint64_t)v17);
}

uint64_t sub_22B23479C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A600;
  a2[1] = v2;
  return result;
}

void *sub_22B2347C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A600;
  result[1] = v3;
  return result;
}

void sub_22B234808()
{
}

__n128 sub_22B234828(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A5B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B234858(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26DE7A5B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_22B2348AC()
{
}

void sub_22B2348C4(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  if (**(unsigned char **)(a3 + 24))
  {
    v15[0] = *(void **)(a3 + 24);
    v16[0] = "_indirect";
    __int16 v7 = 771;
  }
  else
  {
    v15[0] = "_indirect";
    __int16 v7 = 259;
  }
  __int16 v17 = v7;
  llvm::GlobalVariable::GlobalVariable();
  if (*(void *)(a3 + 40)) {
    strlen(*(const char **)(a3 + 40));
  }
  llvm::GlobalObject::setSection();
  v15[0] = v16;
  v15[1] = (void *)0x2000000000;
  uint64_t v8 = llvm::ValueAsMetadata::get();
  sub_22B1D6788((uint64_t)v15, v8);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  uint64_t v9 = *((unsigned int *)a2 + 2);
  if (v9)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = 16 * v9;
    do
    {
      v10 += 16;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      sub_22B1D6788((uint64_t)v15, Impl);
      v11 -= 16;
    }
    while (v11);
  }
  uint64_t v13 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 328);
  uint64_t v14 = llvm::MDTuple::getImpl();
  sub_22B1D6788(v13, v14);
  sub_22B212008((llvm::ValueHandleBase *)a3, v6);
  if (v15[0] != v16) {
    free(v15[0]);
  }
}

uint64_t sub_22B234B4C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 224);
    uint64_t v4 = *(unsigned int *)(v2 + 16);
    if (v4)
    {
      uint64_t v5 = *(_DWORD **)(v2 + 8);
      uint64_t v6 = &v5[4 * v4];
      unsigned int v7 = (unsigned __int16)a2 - *(_DWORD *)(v2 + 228);
      do
      {
        unsigned int v8 = v5[2];
        int v9 = v7 / v8;
        v7 %= v8;
        v3 += *(_DWORD *)(*(void *)v5 + 20) * v9;
        v5 += 4;
      }
      while (v5 != v6);
    }
    return a2 & 0xFFFF0000 | (unsigned __int16)v3;
  }
  return a2;
}

void *sub_22B234BAC(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A570;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B234C34(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B234CB8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A570;
  a2[1] = v2;
  return result;
}

void *sub_22B234CDC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A570;
  result[1] = v3;
  return result;
}

void sub_22B234D24()
{
}

uint64_t sub_22B234D44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A528;
  a2[1] = v2;
  return result;
}

void *sub_22B234D68(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A528;
  result[1] = v3;
  return result;
}

void sub_22B234DB0()
{
}

void *sub_22B234DCC(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_26DE7A498;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_26DE79F88;
    v9[1] = v5;
    v9[2] = v8;
    v9[3] = v9;
    char v7 = sub_22B230530(v4, v9);
    sub_22B23039C(v9);
    *(unsigned char *)v3[1] = v7;
    return sub_22B230420(v8);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

uint64_t sub_22B234EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  sub_22B1FFC54((uint64_t)v3 + *(void *)(*v3 - 24) + 8, *a2);
  uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v5 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v12 = 257;
  uint64_t v7 = sub_22B1D6A70(v4, v5, v6, (uint64_t)v11);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
  uint64_t v9 = *(void *)v2;
  __int16 v12 = 257;
  return sub_22B1D7384(v8, 48, v7, v9, (uint64_t)v11);
}

uint64_t sub_22B234FA4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A498;
  a2[1] = v2;
  return result;
}

void *sub_22B234FC8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A498;
  result[1] = v3;
  return result;
}

void sub_22B235010()
{
}

__n128 sub_22B235030(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A4E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B235060(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26DE7A4E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_22B2350B4()
{
}

void *sub_22B2350CC(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_26DE7A498;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_26DE79F88;
    v9[1] = v5;
    v9[2] = v8;
    v9[3] = v9;
    char v7 = sub_22B230530(v4, v9);
    sub_22B23039C(v9);
    *(unsigned char *)v3[1] = v7;
    return sub_22B230420(v8);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

__n128 sub_22B2351B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B2351E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26DE7A450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_22B235238()
{
}

void *sub_22B235250(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A408;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B2352D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B23535C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A408;
  a2[1] = v2;
  return result;
}

void *sub_22B235380(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A408;
  result[1] = v3;
  return result;
}

void sub_22B2353C8()
{
}

uint64_t sub_22B2353E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A3C0;
  a2[1] = v2;
  return result;
}

void *sub_22B23540C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A3C0;
  result[1] = v3;
  return result;
}

void sub_22B235454()
{
}

void *sub_22B23546C(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A378;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B2354F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B235578(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A378;
  a2[1] = v2;
  return result;
}

void *sub_22B23559C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A378;
  result[1] = v3;
  return result;
}

void sub_22B2355E4()
{
}

uint64_t sub_22B235604(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A330;
  a2[1] = v2;
  return result;
}

void *sub_22B235628(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A330;
  result[1] = v3;
  return result;
}

void sub_22B235670()
{
}

void *sub_22B235688(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_26DE7A2A0;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = sub_22B230530(v4, v6);
    return sub_22B23039C(v6);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

BOOL sub_22B235738(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  sub_22B1E3518(&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v4 = sub_22B2339C0(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

uint64_t sub_22B2357C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A2A0;
  a2[1] = v2;
  return result;
}

void *sub_22B2357E4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26DE7A2A0;
  result[1] = v3;
  return result;
}

void sub_22B23582C()
{
}

__n128 sub_22B23584C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A2E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B235874(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE7A2E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B2358C0()
{
}

void *sub_22B2358D8(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_26DE7A2A0;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = sub_22B230530(v4, v6);
    return sub_22B23039C(v6);
  }
  else
  {
    unsigned char *v2 = 0;
  }
  return result;
}

__n128 sub_22B235990(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE7A258;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B2359B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26DE7A258;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_22B235A04()
{
}

uint64_t sub_22B235A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22B235AD0(a1, v6);
  uint64_t v8 = 0;
  sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_22B235AD0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x230F426A0]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    sub_22B235CEC(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_26DE79C68;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (char *)v4 + 24;
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *(void *)v9;
        if (*(void *)v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          sub_22B21A918((llvm::ValueHandleBase *)(v23 + 8), (void *)v9 - 2);
          *(void *)(v13 + 32) = *((void *)v9 + 1);
          *(_DWORD *)(v13 + 40) = *((_DWORD *)v9 + 4);
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *(void *)v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 16));
        }
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return sub_22B235CEC(a1);
  }
}

uint64_t sub_22B235CEC(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    __n128 result = *(void *)result + 8;
    do
    {
      uint64_t v4 = sub_22B22A75C((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_26DE79C68;
      *((void *)v4 + 3) = v9;
      unint64_t v5 = (char *)v4 + 40;
      __n128 result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t sub_22B235DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v14 = v4;
  uint64_t v19 = 0;
  uint64_t result = sub_22B22A7B4((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if (result) {
    uint64_t v6 = (uint64_t)v19;
  }
  else {
    uint64_t v6 = *(void *)v4 + 48 * v4[2].u32[0];
  }
  int v7 = v14;
  if (*(void *)v14 + 48 * v14[2].u32[0] != v6)
  {
    int v8 = *(_DWORD *)(v6 + 40);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v22 = 0;
    uint64_t v19 = &unk_26DE79C68;
    sub_22B21A918((llvm::ValueHandleBase *)(v6 + 8), v20);
    uint64_t v9 = v21;
    *(void *)(v6 + 32) = v22;
    if (v9 != -8192 && v9 != -4096 && v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v10 = (uint64_t)v14;
    sub_22B22A84C(&v15, a2);
    unint64_t v15 = &unk_26DE79C68;
    uint64_t v18 = v10;
    sub_22B22A75C((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    uint64_t v19 = &unk_26DE79C68;
    uint64_t v22 = v18;
    int v23 = v8;
    uint64_t v24 = 0;
    uint64_t result = sub_22B22A7B4(*(void *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      uint64_t v11 = sub_22B235A1C(v10, (uint64_t)&v19, v24);
      uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v11 + 8), v20);
      *(void *)(v11 + 32) = v22;
      *(_DWORD *)(v11 + 40) = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    if (v17 != -8192 && v17 != -4096 && v17) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
  }
  return result;
}

uint64_t sub_22B236044(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = sub_22B22A7B4(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_26DE79C68;
    uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

void *sub_22B236170(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A210;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B2361F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B23627C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A210;
  a2[1] = v2;
  return result;
}

void *sub_22B2362A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DE7A210;
  result[1] = v3;
  return result;
}

void sub_22B2362E8()
{
}

uint64_t sub_22B236308(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A1C8;
  a2[1] = v2;
  return result;
}

void *sub_22B23632C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DE7A1C8;
  result[1] = v3;
  return result;
}

void sub_22B236374()
{
}

void *sub_22B23638C(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_26DE7A180;
  v5[1] = v3;
  void v5[3] = v5;
  sub_22B230530(v2, v5);
  return sub_22B23039C(v5);
}

uint64_t sub_22B236414(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_22B1E3518(&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  sub_22B22FE68(v3, v7, *v5);
  return 1;
}

uint64_t sub_22B236498(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A180;
  a2[1] = v2;
  return result;
}

void *sub_22B2364BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DE7A180;
  result[1] = v3;
  return result;
}

void sub_22B236504()
{
}

uint64_t sub_22B236524(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DE7A138;
  a2[1] = v2;
  return result;
}

void *sub_22B236548(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DE7A138;
  result[1] = v3;
  return result;
}

void sub_22B236590()
{
}

BOOL sub_22B2365A8(char a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  BOOL result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 61)
  {
    uint64_t v4 = **(void **)(a2 - 32);
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    if ((v5 & 0xFE) == 0x12) {
      unsigned int v5 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
    }
    if (v5 <= 0xFF) {
      return *(void *)(a2 - 64) == a3;
    }
    return 0;
  }
  return result;
}

BOOL sub_22B236608(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (**(void **)(*a2 + 16) != *(void *)((char *)a1 + *(void *)(*a1 - 24) + 176))
  {
    if (v2)
    {
      while (*(unsigned char *)(*(void *)(v2 + 24) + 16) == 77 && (sub_22B236608(a1) & 1) != 0)
      {
        uint64_t v2 = *(void *)(v2 + 8);
        if (!v2) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  if (!v2) {
    return 1;
  }
  while (1)
  {
    int v4 = *(unsigned __int8 *)(*(void *)(v2 + 24) + 16);
    BOOL result = v4 == 84;
    if (v4 != 84) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22B2366B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v7 = *(void **)(a1 + 8);
  unint64_t v8 = a2;
  unint64_t v9 = v7[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = a2;
      if (v9 <= a2) {
        unint64_t v11 = a2 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & a2;
    }
    uint64_t v12 = *(void **)(*v7 + 8 * v11);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == a2)
          {
            if (*((_DWORD *)v13 + 4) == a2) {
              return v13[3];
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v11) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v15 = *(void **)a1;
  uint64_t v16 = *(void *)a1 + *(void *)(**(void **)a1 - 24);
  long long v55 = *(_OWORD *)(v16 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v56, (llvm::IRBuilderBase *)(v16 + 8));
  int v57 = *(_DWORD *)(v16 + 104);
  uint64_t v17 = *(void *)(v15[20] + 80);
  if (v17) {
    uint64_t v18 = v17 - 24;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(v18 + 40);
  if (v19) {
    uint64_t v20 = v19 - 24;
  }
  else {
    uint64_t v20 = 0;
  }
  sub_22B1FFC54((uint64_t)v15 + *(void *)(*v15 - 24) + 8, v20);
  uint64_t v21 = (unsigned int *)(a3 + 264);
  if (!*(unsigned char *)(a3 + 268)) {
    uint64_t v21 = (unsigned int *)&unk_22B270008;
  }
  uint64_t v22 = sub_22B2373C8((uint64_t)v15, *(void *)(a3 + 256), a2, **(_DWORD **)(a1 + 16), *(_DWORD *)(a3 + 248), *v21);
  int v23 = *(float **)(a1 + 8);
  unint64_t v24 = *((void *)v23 + 1);
  if (v24)
  {
    uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v24 <= v8) {
        unint64_t v3 = v8 % v24;
      }
    }
    else
    {
      unint64_t v3 = (v24 - 1) & v8;
    }
    uint64_t v26 = *(void **)(*(void *)v23 + 8 * v3);
    if (v26)
    {
      uint64_t v13 = (void *)*v26;
      if (*v26)
      {
        do
        {
          unint64_t v27 = v13[1];
          if (v27 == v8)
          {
            if (*((_DWORD *)v13 + 4) == a2) {
              goto LABEL_98;
            }
          }
          else
          {
            if (v25.u32[0] > 1uLL)
            {
              if (v27 >= v24) {
                v27 %= v24;
              }
            }
            else
            {
              v27 &= v24 - 1;
            }
            if (v27 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v8;
  *((_DWORD *)v13 + 4) = a2;
  void v13[3] = v22;
  float v28 = (float)(unint64_t)(*((void *)v23 + 3) + 1);
  float v29 = v23[8];
  if (!v24 || (float)(v29 * (float)v24) < v28)
  {
    BOOL v30 = 1;
    if (v24 >= 3) {
      BOOL v30 = (v24 & (v24 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v24);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    else {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v24 = *((void *)v23 + 1);
    }
    if (*(void *)&prime > v24) {
      goto LABEL_54;
    }
    if (*(void *)&prime < v24)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 3) / v23[8]);
      if (v24 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v24)
      {
        unint64_t v24 = *((void *)v23 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_54:
          if (*(void *)&prime >> 61) {
            sub_22B1E33E4();
          }
          __int16 v34 = operator new(8 * *(void *)&prime);
          uint64_t v35 = *(void **)v23;
          *(void *)int v23 = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *((int8x8_t *)v23 + 1) = prime;
          do
            *(void *)(*(void *)v23 + 8 * v36++) = 0;
          while (*(void *)&prime != v36);
          uint64_t v37 = (void *)*((void *)v23 + 2);
          if (v37)
          {
            unint64_t v38 = v37[1];
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v23 + 8 * v38) = v23 + 4;
            char v43 = (void *)*v37;
            if (*v37)
            {
              do
              {
                unint64_t v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(void *)&prime) {
                    v44 %= *(void *)&prime;
                  }
                }
                else
                {
                  v44 &= *(void *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(void *)(*(void *)v23 + 8 * v44))
                  {
                    *(void *)(*(void *)v23 + 8 * v44) = v37;
                    goto LABEL_79;
                  }
                  *uint64_t v37 = *v43;
                  *char v43 = **(void **)(*(void *)v23 + 8 * v44);
                  **(void **)(*(void *)v23 + 8 * v44) = v43;
                  char v43 = v37;
                }
                unint64_t v44 = v38;
LABEL_79:
                uint64_t v37 = v43;
                char v43 = (void *)*v43;
                unint64_t v38 = v44;
              }
              while (v43);
            }
          }
          unint64_t v24 = (unint64_t)prime;
          goto LABEL_83;
        }
        char v51 = *(void **)v23;
        *(void *)int v23 = 0;
        if (v51) {
          operator delete(v51);
        }
        unint64_t v24 = 0;
        *((void *)v23 + 1) = 0;
      }
    }
LABEL_83:
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v24 <= v8) {
        unint64_t v3 = v8 % v24;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v24 - 1) & v8;
    }
  }
  uint64_t v45 = *(void **)v23;
  uint64_t v46 = *(void **)(*(void *)v23 + 8 * v3);
  if (v46)
  {
    void *v13 = *v46;
  }
  else
  {
    uint64_t v47 = *((void *)v23 + 2);
    void *v13 = v47;
    *((void *)v23 + 2) = v13;
    v45[v3] = v23 + 4;
    if (!v47) {
      goto LABEL_97;
    }
    unint64_t v48 = *(void *)(v47 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v48 >= v24) {
        v48 %= v24;
      }
    }
    else
    {
      v48 &= v24 - 1;
    }
    uint64_t v46 = (void *)(*(void *)v23 + 8 * v48);
  }
  *uint64_t v46 = v13;
LABEL_97:
  ++*((void *)v23 + 3);
LABEL_98:
  uint64_t v49 = (char *)v15 + *(void *)(*v15 - 24);
  long long v52 = v55;
  uint64_t v53 = v56;
  if (v56) {
    llvm::MetadataTracking::track();
  }
  int v54 = v57;
  sub_22B1D3C74((uint64_t)&v52, (uint64_t)(v49 + 8));
  if (v53) {
    llvm::MetadataTracking::untrack();
  }
  if (v56) {
    llvm::MetadataTracking::untrack();
  }
  return v13[3];
}

uint64_t sub_22B236C80(uint64_t result, char *a2, char *a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    unsigned int v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 32;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 5);
  return result;
}

unsigned int *sub_22B236D04(unsigned int *result, unsigned __int16 a2, int a3)
{
  *BOOL result = a2;
  switch(a3)
  {
    case -9:
      unsigned int v3 = a2 | 0x80000;
      goto LABEL_10;
    case -8:
      unsigned int v3 = a2 | 0x70000;
      goto LABEL_10;
    case -7:
      unsigned int v3 = a2 | 0x60000;
      goto LABEL_10;
    case -5:
      unsigned int v3 = a2 | 0x40000;
      goto LABEL_10;
    case -4:
      unsigned int v3 = a2 | 0x30000;
      goto LABEL_10;
    case -3:
      unsigned int v3 = a2 | 0x20000;
      goto LABEL_10;
    case -2:
      unsigned int v3 = a2 | 0x10000;
      goto LABEL_10;
    case -1:
      return result;
    default:
      unsigned int v3 = a2 | (a3 << 16) | 0x80000000;
LABEL_10:
      *BOOL result = v3;
      return result;
  }
}

uint64_t *sub_22B236DA4(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  unsigned int v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v9 = operator new(0x38uLL);
    v9[2] = *(_OWORD *)a3;
    *((void *)v9 + 6) = *(void *)(a3 + 16);
    return sub_22B215FA4(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t sub_22B236E5C(unsigned __int8 **a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int8x8_t v9 = (int8x8_t)a1[2];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = v8;
      if (v8 >= *(void *)&v9) {
        unint64_t v11 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v11 = v8 & (*(void *)&v9 - 1);
    }
    uint64_t v12 = *(void **)&a1[1][8 * v11];
    if (v12)
    {
      for (unsigned int i = (void *)*v12; i; unsigned int i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == a3) {
            return i[5];
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(void *)&v9) {
              v14 %= *(void *)&v9;
            }
          }
          else
          {
            v14 &= *(void *)&v9 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  llvm::FunctionType::get();
  uint64_t v15 = (uint64_t)*a1;
  int v16 = **a1;
  uint64_t v49 = a1[4];
  if (v16)
  {
    v50[0] = v15;
    v50[2] = &v49;
    __int16 v17 = 2563;
  }
  else
  {
    v50[0] = &v49;
    __int16 v17 = 266;
  }
  __int16 v51 = v17;
  llvm::Twine::str((uint64_t *)&__p, (llvm::Twine *)v50);
  llvm::Module::getOrInsertFunction();
  uint64_t v47 = v18;
  if (v53 < 0) {
    operator delete(__p);
  }
  unint64_t v19 = (unint64_t)a1[2];
  if (v19)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v19) {
        unint64_t v3 = v8 % v19;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v19 - 1);
    }
    uint64_t v21 = *(void ***)&a1[1][8 * v3];
    if (v21)
    {
      for (uint64_t j = *v21; j; uint64_t j = (void *)*j)
      {
        unint64_t v23 = j[1];
        if (v23 == v8)
        {
          if (j[2] == a3) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v20.u32[0] > 1uLL)
          {
            if (v23 >= v19) {
              v23 %= v19;
            }
          }
          else
          {
            v23 &= v19 - 1;
          }
          if (v23 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v24 = a1 + 3;
  uint64_t j = operator new(0x30uLL);
  *uint64_t j = 0;
  j[1] = v8;
  j[2] = a3;
  j[3] = 4;
  j[4] = 0;
  j[5] = 0;
  float v25 = (float)(unint64_t)(a1[4] + 1);
  float v26 = *((float *)a1 + 10);
  if (!v19 || (float)(v26 * (float)v19) < v25)
  {
    BOOL v27 = 1;
    if (v19 >= 3) {
      BOOL v27 = (v19 & (v19 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v19);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      int8x8_t prime = (int8x8_t)v29;
    }
    else {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v19 = (unint64_t)a1[2];
    }
    if (*(void *)&prime > v19) {
      goto LABEL_51;
    }
    if (*(void *)&prime < v19)
    {
      unint64_t v37 = vcvtps_u32_f32((float)(unint64_t)a1[4] / *((float *)a1 + 10));
      if (v19 < 3 || (uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (*(void *)&prime <= v37) {
        int8x8_t prime = (int8x8_t)v37;
      }
      if (*(void *)&prime >= v19)
      {
        unint64_t v19 = (unint64_t)a1[2];
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(void *)&prime >> 61) {
            sub_22B1E33E4();
          }
          unint64_t v31 = (unsigned __int8 *)operator new(8 * *(void *)&prime);
          unint64_t v32 = a1[1];
          a1[1] = v31;
          if (v32) {
            operator delete(v32);
          }
          uint64_t v33 = 0;
          a1[2] = (unsigned __int8 *)prime;
          do
            *(void *)&a1[1][8 * v33++] = 0;
          while (*(void *)&prime != v33);
          __int16 v34 = (void *)*v24;
          if (*v24)
          {
            unint64_t v35 = v34[1];
            uint8x8_t v36 = (uint8x8_t)vcnt_s8(prime);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(void *)&prime) {
                v35 %= *(void *)&prime;
              }
            }
            else
            {
              v35 &= *(void *)&prime - 1;
            }
            *(void *)&a1[1][8 * v35] = v24;
            unint64_t v40 = (void *)*v34;
            if (*v34)
            {
              do
              {
                unint64_t v41 = v40[1];
                if (v36.u32[0] > 1uLL)
                {
                  if (v41 >= *(void *)&prime) {
                    v41 %= *(void *)&prime;
                  }
                }
                else
                {
                  v41 &= *(void *)&prime - 1;
                }
                if (v41 != v35)
                {
                  uint64_t v42 = a1[1];
                  if (!*(void *)&v42[8 * v41])
                  {
                    *(void *)&v42[8 * v41] = v34;
                    goto LABEL_76;
                  }
                  *__int16 v34 = *v40;
                  *unint64_t v40 = **(void **)&a1[1][8 * v41];
                  **(void **)&a1[1][8 * v41] = v40;
                  unint64_t v40 = v34;
                }
                unint64_t v41 = v35;
LABEL_76:
                __int16 v34 = v40;
                unint64_t v40 = (void *)*v40;
                unint64_t v35 = v41;
              }
              while (v40);
            }
          }
          unint64_t v19 = (unint64_t)prime;
          goto LABEL_80;
        }
        unint64_t v48 = a1[1];
        a1[1] = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v19 = 0;
        a1[2] = 0;
      }
    }
LABEL_80:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v8 >= v19) {
        unint64_t v3 = v8 % v19;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v19 - 1) & v8;
    }
  }
  char v43 = a1[1];
  unint64_t v44 = *(unsigned __int8 **)&v43[8 * v3];
  if (v44)
  {
    *uint64_t j = *(void *)v44;
  }
  else
  {
    *uint64_t j = *v24;
    void *v24 = j;
    *(void *)&v43[8 * v3] = v24;
    if (!*j) {
      goto LABEL_94;
    }
    unint64_t v45 = *(void *)(*j + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v45 >= v19) {
        v45 %= v19;
      }
    }
    else
    {
      v45 &= v19 - 1;
    }
    unint64_t v44 = &a1[1][8 * v45];
  }
  *(void *)unint64_t v44 = j;
LABEL_94:
  ++a1[4];
LABEL_95:
  sub_22B212008((llvm::ValueHandleBase *)(j + 3), v47);
  return v47;
}

uint64_t sub_22B2373C8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  int v12 = *(_DWORD *)(a2 + 8);
  if ((v12 & 0xFE) == 0x12) {
    int v12 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
  }
  if ((v12 & 0xFFFFFF00) == 0x300)
  {
    uint64_t v13 = llvm::User::operator new((llvm::User *)0x58);
    v29[0] = "agc.local_buffer_pointers.";
    unint64_t v30 = a3;
    __int16 v31 = 2051;
    uint64_t v14 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v14 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    sub_22B2436D4(a1 + *(void *)(*(void *)a1 - 24));
    uint64_t v15 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
    __int16 v31 = 257;
    uint64_t v16 = sub_22B1D4240(v15, **(llvm::Type ***)(*(void *)v13 + 16), v13, 0, (uint64_t)v29);
    __int16 v28 = 257;
    uint64_t v17 = sub_22B1D7384((uint64_t)v15, 48, v16, a2, (uint64_t)v27);
  }
  else
  {
    if (a4 == -1)
    {
      LODWORD(v27[0]) = a3;
      char v18 = 8;
      char v19 = 1;
      uint8x8_t v20 = (void *)v27[0];
    }
    else
    {
      v25[0] = a4;
      v25[2] = ".";
      __int16 v26 = 776;
      v27[0] = v25;
      void v27[2] = a3;
      char v18 = 2;
      char v19 = 8;
      uint8x8_t v20 = v27;
    }
    LOBYTE(v28) = v18;
    HIBYTE(v28) = v19;
    v29[0] = "agc.buffer_pointers.";
    unint64_t v30 = (unint64_t)v20;
    LOBYTE(v31) = 3;
    HIBYTE(v31) = v18;
    sub_22B236D04(&v24, a3, a4);
    uint64_t v13 = sub_22B22A000((uint64_t *)a1, a2, (uint64_t)v29, v24, a5);
    uint64_t v21 = a1 + *(void *)(*(void *)a1 - 24);
    __int16 v31 = 257;
    uint64_t v17 = sub_22B1D4240((uint64_t *)(v21 + 8), **(llvm::Type ***)(*(void *)v13 + 16), v13, 0, (uint64_t)v29);
    if (a4 == -1) {
      ++*(_DWORD *)(a1 + 2280);
    }
  }
  if (a6 != -1)
  {
    uint64_t v22 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v22 + 168))(v22, v13, a6, 0, 0);
  }
  return v17;
}

int32x2_t sub_22B2376D0(int32x2_t *a1, uint64_t a2)
{
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -8192;
  uint64_t v9 = 0;
  sub_22B21A918((llvm::ValueHandleBase *)(a2 + 8), v7);
  uint64_t v4 = v8;
  *(void *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_22B23777C(void *a1, uint64_t a2, uint64_t a3)
{
  llvm::StructType::get();
  uint64_t v6 = *(void *)(a2 - 64);
  uint64_t v7 = llvm::PointerType::get();
  uint64_t v8 = sub_22B237B00(a1, v6, v7);
  uint64_t v9 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v33 = 257;
  uint64_t v10 = sub_22B1D4240(v9 + 1, **(llvm::Type ***)(*(void *)v8 + 16), v8, 0, (uint64_t)v32);
  uint64_t v11 = *(unsigned int *)(a3 + 8);
  if (v11)
  {
    int v12 = *(uint64_t **)a3;
    uint64_t v13 = 8 * v11;
    do
    {
      *v12++ = llvm::PointerType::get();
      v13 -= 8;
    }
    while (v13);
  }
  uint64_t v14 = llvm::PointerType::get();
  sub_22B1D6788(a3, v14);
  sub_22B1D6788(a3, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 192));
  llvm::StructType::get();
  uint64_t v15 = *(void *)(a2 - 32);
  uint64_t v16 = llvm::PointerType::get();
  uint64_t v17 = sub_22B237B00(a1, v15, v16);
  char v18 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v33 = 257;
  uint64_t v19 = sub_22B1D4240(v18 + 1, **(llvm::Type ***)(*(void *)v17 + 16), v17, 0, (uint64_t)v32);
  unsigned int v31 = 0;
  if (*(_DWORD *)(a3 + 8) == 2)
  {
    int v20 = 0;
  }
  else
  {
    do
    {
      uint64_t v21 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v33 = 257;
      uint64_t v22 = (llvm::Type **)sub_22B1D7940(v21, v10, (uint64_t)&v31, 1, (uint64_t)v32);
      uint64_t v23 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v33 = 257;
      uint64_t v24 = sub_22B1D7940(v23, v19, (uint64_t)&v31, 1, (uint64_t)v32);
      sub_22B1F718C((void *)((char *)a1 + *(void *)(*a1 - 24) + 8), v22, v24, 0);
      int v20 = ++v31;
    }
    while ((unint64_t)*(unsigned int *)(a3 + 8) - 2 > v31);
  }
  uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  int v30 = v20;
  unsigned int v31 = v20 + 1;
  __int16 v33 = 257;
  uint64_t v26 = sub_22B1D7940(v25, v19, (uint64_t)&v30, 1, (uint64_t)v32);
  uint64_t v27 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v33 = 257;
  __int16 v28 = (llvm::Type **)sub_22B1D7940(v27, v19, (uint64_t)&v31, 1, (uint64_t)v32);
  return sub_22B1F718C((void *)((char *)a1 + *(void *)(*a1 - 24) + 8), v28, v26, 0);
}

uint64_t sub_22B237B00(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 25);
  __int16 v11 = 257;
  uint64_t v7 = sub_22B1D7384((uint64_t)(v5 + 8), 47, a2, v6, (uint64_t)v10);
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v11 = 257;
  return sub_22B1D7384(v8, 48, v7, a3, (uint64_t)v10);
}

uint64_t sub_22B237BA0(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (llvm::Type *)llvm::StructType::get();
  uint64_t v7 = (llvm::Type **)llvm::UndefValue::get();
  uint64_t v8 = sub_22B2434C8((uint64_t)a1 + *(void *)(*a1 - 24), v6);
  uint64_t v9 = *(uint64_t **)a3;
  uint64_t v10 = *(unsigned int *)(a3 + 8);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *v9++ = llvm::PointerType::get();
      v11 -= 8;
    }
    while (v11);
  }
  llvm::StructType::get();
  uint64_t v12 = *(a2 - 4);
  uint64_t v13 = llvm::PointerType::get();
  uint64_t v14 = sub_22B237B00(a1, v12, v13);
  uint64_t v15 = *(void *)(*a1 - 24);
  __int16 v28 = 257;
  uint64_t v16 = sub_22B1D4240((void *)((char *)a1 + v15 + 8), **(llvm::Type ***)(*(void *)v14 + 16), v14, 0, (uint64_t)v27);
  unsigned int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v17 = v16;
    do
    {
      uint64_t v18 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v28 = 257;
      uint64_t v19 = sub_22B1D7940(v18, v17, (uint64_t)&v26, 1, (uint64_t)v27);
      uint64_t v20 = *(void *)(*a1 - 24);
      uint64_t v21 = (uint64_t)a1 + v20 + 8;
      __int16 v28 = 257;
      uint64_t v22 = sub_22B1D4240((void *)((char *)a1 + v20 + 8), **(llvm::Type ***)(*(void *)v19 + 16), v19, 0, (uint64_t)v27);
      __int16 v25 = 257;
      uint64_t v7 = (llvm::Type **)sub_22B1D6D44(v21, (uint64_t)v7, v22, (uint64_t)&v26, 1, (uint64_t)v24);
      ++v26;
    }
    while (*(_DWORD *)(a3 + 8) > v26);
  }
  sub_22B1F718C((void *)((char *)a1 + *(void *)(*a1 - 24) + 8), v7, v8, 0);
  return sub_22B237B00(a1, v8, *a2);
}

uint64_t sub_22B237E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v12 = v4;
  uint64_t v17 = 0;
  if (sub_22B22A7B4((uint64_t)*v4, v4[2].i32[0], v11, &v17)) {
    uint64_t v5 = (uint64_t)v17;
  }
  else {
    uint64_t v5 = *(void *)v4 + 48 * v4[2].u32[0];
  }
  uint64_t result = (uint64_t)v12;
  if (*(void *)v12 + 48 * v12[2].u32[0] != v5)
  {
    uint64_t v7 = *(void *)(v5 + 40);
    sub_22B2376D0(v12, v5);
    uint64_t v8 = v12;
    sub_22B22A84C(&v13, a2);
    uint64_t v13 = &unk_26DE79C18;
    uint64_t v16 = v8;
    sub_22B22A75C((llvm::ValueHandleBase *)v18, (LODWORD(v14[0]) >> 1) & 3, v14);
    uint64_t v17 = &unk_26DE79C18;
    uint64_t v20 = v16;
    uint64_t v21 = v7;
    uint64_t v22 = 0;
    uint64_t result = sub_22B22A7B4((uint64_t)*v8, v8[2].i32[0], v19, &v22);
    if ((result & 1) == 0)
    {
      uint64_t v9 = (void *)sub_22B238028((uint64_t)v8, (uint64_t)&v17, v22);
      uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v9 + 1), v18);
      v9[4] = v20;
      void v9[5] = v21;
    }
    if (v19 != -8192 && v19 != -4096 && v19) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    }
    if (v15 != -8192 && v15 != -4096 && v15) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
    }
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v10);
    }
  }
  return result;
}

uint64_t sub_22B238028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22B2380DC(a1, v6);
  uint64_t v8 = 0;
  sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_22B2380DC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x230F426A0]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    sub_22B2382F8(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_26DE79C18;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          sub_22B21A918((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 40) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return sub_22B2382F8(a1);
  }
}

uint64_t sub_22B2382F8(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    uint64_t result = *(void *)result + 8;
    do
    {
      uint64_t v4 = sub_22B22A75C((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_26DE79C18;
      *((void *)v4 + 3) = v9;
      unint64_t v5 = (char *)v4 + 40;
      uint64_t result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t sub_22B2383DC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = sub_22B22A7B4(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_26DE79C18;
    uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

BOOL sub_22B238510(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (!*((unsigned char *)a1 + 10) || *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v1 - 24) + 344) + 1674))
      && *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v1 - 24) + 344) + 1660) != 0;
}

BOOL sub_22B238574(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (!*((unsigned char *)a1 + 10) || *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v1 - 24) + 344) + 1674))
      && *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v1 - 24) + 344) + 1659) != 0;
}

BOOL sub_22B2385D8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (!*((unsigned char *)a1 + 10) || *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v1 - 24) + 344) + 1674))
      && *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v1 - 24) + 344) + 1658) != 0;
}

uint64_t sub_22B23863C(void *a1)
{
  uint64_t v172 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (*(unsigned char *)(*((void *)v1 + 43) + 1662))
  {
    uint64_t v2 = *((void *)v1 + 40);
    uint64_t v3 = v2 + 8;
    uint64_t v4 = *(void *)(v2 + 16);
    if (v4 != v2 + 8)
    {
      while (1)
      {
        unint64_t v6 = v4 ? (llvm::GlobalValue *)(v4 - 56) : 0;
        uint64_t v7 = *(void *)v6;
        if (*(void *)v6)
        {
          if ((llvm::GlobalValue::isDeclaration(v6) & 1) == 0)
          {
            int v8 = *(_DWORD *)(v7 + 8);
            if ((v8 & 0xFE) == 0x12) {
              int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
            }
            if ((v8 & 0xFFFFFF00) == 0x200 && *((void *)v6 + 1)) {
              break;
            }
          }
        }
        uint64_t v4 = *(void *)(v4 + 8);
        if (v4 == v3) {
          return 1;
        }
      }
      uint64_t v10 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v11 = *((void *)v10 + 50);
      uint64_t v12 = (llvm::Module *)*((void *)v10 + 40);
      sub_22B1EB138(v11);
      llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v11 + 336), v12);
      uint64_t v13 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v14 = *((void *)v13 + 50);
      uint64_t v15 = (llvm::Module *)*((void *)v13 + 40);
      sub_22B1EB1B0(v14);
      llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v14 + 344), v15);
      unsigned int v160 = 128;
      v159[0] = (llvm *)MEMORY[0x230F426A0](0x2000, 8);
      sub_22B2395F8((uint64_t)v159);
      v161[0] = 0;
      v161[24] = 0;
      size_t v167 = &v169;
      uint64_t v168 = 0x2000000000;
      uint64_t v16 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 320);
      uint64_t v17 = v16 + 8;
      uint64_t v18 = *(void *)(v16 + 16);
      if (v18 != v16 + 8)
      {
        do
        {
          if (v18) {
            uint64_t v19 = (llvm::Value *)(v18 - 56);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = *(void *)v19;
          if (*(void *)v19 && (llvm::GlobalValue::isDeclaration(v19) & 1) == 0)
          {
            int v21 = *(_DWORD *)(v20 + 8);
            if ((v21 & 0xFE) == 0x12) {
              int v21 = *(_DWORD *)(**(void **)(v20 + 16) + 8);
            }
            if ((v21 & 0xFFFFFF00) == 0x200)
            {
              uint64_t v22 = llvm::User::operator new((llvm::User *)0x58);
              uint64_t Name = (void *)llvm::Value::getName(v19);
              LOWORD(v166) = 261;
              uint64_t v162 = Name;
              uint64_t v163 = v24;
              __int16 v25 = (llvm::GlobalVariable *)llvm::GlobalVariable::GlobalVariable();
              llvm::GlobalVariable::copyAttributesFrom(v25, v19);
              llvm::GlobalObject::setSection();
              if ((llvm::GlobalValue::isDeclaration(v19) & 1) == 0)
              {
                llvm::ValueMapper::ValueMapper();
                llvm::ValueMapper::mapConstant();
                MEMORY[0x230F42310](&v162);
                llvm::GlobalVariable::setInitializer();
              }
              unsigned int v26 = (llvm::ValueHandleBase *)sub_22B2396D8((uint64_t)v159, (uint64_t)v19);
              sub_22B212008(v26, v22);
              if (v168 >= (unint64_t)HIDWORD(v168)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v167 + v168) = v19;
              LODWORD(v168) = v168 + 1;
            }
          }
          uint64_t v18 = *(void *)(v18 + 8);
        }
        while (v18 != v17);
        uint64_t v27 = (char *)v167;
        if (v168)
        {
          __int16 v28 = 0;
          unint64_t v29 = 0;
          unint64_t v30 = 0;
          unsigned int v31 = 0;
          uint64_t v157 = (char *)v167 + 8 * v168;
          do
          {
            uint64_t v32 = *(void *)(*(void *)v27 + 8);
            if (v32)
            {
              while (1)
              {
                uint64_t v33 = *(void *)(v32 + 24);
                unsigned int v34 = *(unsigned __int8 *)(v33 + 16);
                if (v33 && v34 >= 0x1C) {
                  break;
                }
                if (v33) {
                  BOOL v36 = v34 == 5;
                }
                else {
                  BOOL v36 = 0;
                }
                if (v36)
                {
                  if ((unint64_t)v31 >= v30)
                  {
                    uint64_t v42 = (v31 - v28) >> 3;
                    unint64_t v43 = v42 + 1;
                    if ((unint64_t)(v42 + 1) >> 61) {
LABEL_297:
                    }
                      abort();
                    if ((uint64_t)(v30 - (void)v28) >> 2 > v43) {
                      unint64_t v43 = (uint64_t)(v30 - (void)v28) >> 2;
                    }
                    if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v40 = v43;
                    }
                    if (v40) {
                      unint64_t v40 = (unint64_t)sub_22B216148(v40);
                    }
                    else {
                      uint64_t v41 = 0;
                    }
                    unint64_t v44 = (char *)(v40 + 8 * v42);
                    *(void *)unint64_t v44 = v33;
                    unint64_t v37 = v44 + 8;
                    while (v29 != v28)
                    {
                      uint64_t v46 = *((void *)v29 - 1);
                      v29 -= 8;
                      *((void *)v44 - 1) = v46;
                      v44 -= 8;
                    }
                    goto LABEL_69;
                  }
LABEL_52:
                  *(void *)unsigned int v31 = v33;
                  v31 += 8;
                  unint64_t v37 = v31;
                  goto LABEL_72;
                }
                unint64_t v37 = v29;
LABEL_72:
                uint64_t v32 = *(void *)(v32 + 8);
                unint64_t v29 = v37;
                if (!v32) {
                  goto LABEL_73;
                }
              }
              if ((unint64_t)v31 >= v30)
              {
                uint64_t v38 = (v31 - v28) >> 3;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61) {
                  goto LABEL_297;
                }
                if ((uint64_t)(v30 - (void)v28) >> 2 > v39) {
                  unint64_t v39 = (uint64_t)(v30 - (void)v28) >> 2;
                }
                if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v39;
                }
                if (v40) {
                  unint64_t v40 = (unint64_t)sub_22B216148(v40);
                }
                else {
                  uint64_t v41 = 0;
                }
                unint64_t v44 = (char *)(v40 + 8 * v38);
                *(void *)unint64_t v44 = v33;
                unint64_t v37 = v44 + 8;
                while (v29 != v28)
                {
                  uint64_t v45 = *((void *)v29 - 1);
                  v29 -= 8;
                  *((void *)v44 - 1) = v45;
                  v44 -= 8;
                }
LABEL_69:
                unint64_t v30 = v40 + 8 * v41;
                if (v28) {
                  operator delete(v28);
                }
                __int16 v28 = v44;
                unsigned int v31 = v37;
                goto LABEL_72;
              }
              goto LABEL_52;
            }
LABEL_73:
            v27 += 8;
          }
          while (v27 != v157);
          if (v28 == v31)
          {
            uint64_t v47 = 0;
          }
          else
          {
            uint64_t v47 = 0;
            unint64_t v48 = 0;
            unint64_t v156 = 0;
            do
            {
              uint64_t v50 = *((void *)v31 - 1);
              v31 -= 8;
              uint64_t v49 = v50;
              int v51 = *(unsigned __int8 *)(v50 + 16);
              if (v50 && v51 == 60 || v49 && v51 == 84)
              {
                llvm::Instruction::clone((llvm::Instruction *)v49);
                llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList();
              }
              uint64_t v158 = v49;
              if (v49 && v51 == 77)
              {
                long long v52 = v48;
                if (*(void *)(*(void *)v49 + 24)) {
                  llvm::PointerType::get();
                }
                else {
                  llvm::PointerType::get(**(llvm::PointerType ***)v49, (llvm::LLVMContext *)0x40);
                }
                uint64_t v71 = llvm::User::operator new((llvm::User *)0x40);
                sub_22B2396D8((uint64_t)v159, *(void *)(v49 - 32));
                uint64_t v72 = (void *)llvm::Value::getName((llvm::Value *)v49);
                LOWORD(v166) = 261;
                uint64_t v162 = v72;
                uint64_t v163 = v73;
                llvm::BitCastInst::BitCastInst();
                uint64_t v74 = (llvm::ValueHandleBase *)sub_22B2396D8((uint64_t)v159, v49);
                sub_22B212008(v74, v71);
                for (i = *(void *)(v49 + 8); i; unsigned int v31 = v77)
                {
                  uint64_t v76 = *(void *)(i + 24);
                  if ((unint64_t)v31 >= v30)
                  {
                    uint64_t v78 = (v31 - v28) >> 3;
                    unint64_t v79 = v78 + 1;
                    if ((unint64_t)(v78 + 1) >> 61) {
                      goto LABEL_297;
                    }
                    if ((uint64_t)(v30 - (void)v28) >> 2 > v79) {
                      unint64_t v79 = (uint64_t)(v30 - (void)v28) >> 2;
                    }
                    if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v80 = v79;
                    }
                    if (v80) {
                      unint64_t v80 = (unint64_t)sub_22B216148(v80);
                    }
                    else {
                      uint64_t v81 = 0;
                    }
                    uint64_t v82 = (char *)(v80 + 8 * v78);
                    *(void *)uint64_t v82 = v76;
                    uint64_t v77 = v82 + 8;
                    while (v31 != v28)
                    {
                      uint64_t v83 = *((void *)v31 - 1);
                      v31 -= 8;
                      *((void *)v82 - 1) = v83;
                      v82 -= 8;
                    }
                    unint64_t v30 = v80 + 8 * v81;
                    if (v28) {
                      operator delete(v28);
                    }
                    __int16 v28 = v82;
                  }
                  else
                  {
                    *(void *)unsigned int v31 = v76;
                    uint64_t v77 = v31 + 8;
                  }
                  uint64_t i = *(void *)(i + 8);
                }
                BOOL v84 = v52;
                if ((unint64_t)v52 >= v156)
                {
                  uint64_t v85 = (v52 - (char *)v47) >> 3;
                  unint64_t v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 61) {
                    goto LABEL_297;
                  }
                  if ((uint64_t)(v156 - (void)v47) >> 2 > v86) {
                    unint64_t v86 = (uint64_t)(v156 - (void)v47) >> 2;
                  }
                  if (v156 - (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v87 = v86;
                  }
                  if (v87) {
                    unint64_t v87 = (unint64_t)sub_22B216148(v87);
                  }
                  else {
                    uint64_t v88 = 0;
                  }
                  uint64_t v112 = (uint64_t *)(v87 + 8 * v85);
                  *uint64_t v112 = v158;
                  uint64_t v113 = (char *)(v112 + 1);
                  while (v84 != (char *)v47)
                  {
                    uint64_t v114 = *((void *)v84 - 1);
                    v84 -= 8;
                    *--uint64_t v112 = v114;
                  }
                  unint64_t v156 = v87 + 8 * v88;
                  if (v47) {
                    operator delete(v47);
                  }
                  uint64_t v47 = v112;
                  unint64_t v48 = v113;
                }
                else
                {
                  *(void *)long long v52 = v158;
                  unint64_t v48 = v52 + 8;
                }
              }
              else if (v49 && v51 == 62)
              {
                uint64_t v155 = (uint64_t *)v48;
                uint64_t v53 = *(_DWORD *)(v49 + 20) & 0x7FFFFFF;
                int v54 = (uint64_t *)(v49 - 32 * v53 + 32);
                if (v54 == (uint64_t *)v49)
                {
                  long long v55 = 0;
                  uint64_t v56 = 0;
                  uint64_t v66 = -v53;
                }
                else
                {
                  uint64_t v154 = v47;
                  long long v55 = 0;
                  uint64_t v56 = 0;
                  unint64_t v57 = 0;
                  do
                  {
                    uint64_t v58 = *v54;
                    if ((unint64_t)v56 >= v57)
                    {
                      uint64_t v59 = (v56 - v55) >> 3;
                      unint64_t v60 = v59 + 1;
                      if ((unint64_t)(v59 + 1) >> 61) {
                        goto LABEL_297;
                      }
                      if ((uint64_t)(v57 - (void)v55) >> 2 > v60) {
                        unint64_t v60 = (uint64_t)(v57 - (void)v55) >> 2;
                      }
                      if (v57 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v61 = v60;
                      }
                      if (v61) {
                        unint64_t v61 = (unint64_t)sub_22B216148(v61);
                      }
                      else {
                        uint64_t v62 = 0;
                      }
                      uint64_t v63 = (char *)(v61 + 8 * v59);
                      *(void *)uint64_t v63 = v58;
                      char v64 = v63 + 8;
                      while (v56 != v55)
                      {
                        uint64_t v65 = *((void *)v56 - 1);
                        v56 -= 8;
                        *((void *)v63 - 1) = v65;
                        v63 -= 8;
                      }
                      unint64_t v57 = v61 + 8 * v62;
                      if (v55) {
                        operator delete(v55);
                      }
                      long long v55 = v63;
                      uint64_t v56 = v64;
                      uint64_t v49 = v158;
                    }
                    else
                    {
                      *(void *)uint64_t v56 = v58;
                      v56 += 8;
                    }
                    v54 += 4;
                  }
                  while (v54 != (uint64_t *)v49);
                  uint64_t v66 = -(uint64_t)(*(_DWORD *)(v49 + 20) & 0x7FFFFFF);
                  uint64_t v47 = v154;
                }
                uint64_t v92 = (uint64_t *)sub_22B2396D8((uint64_t)v159, *(void *)(v49 + 32 * v66))[2];
                uint64_t v93 = (void *)llvm::Value::getName((llvm::Value *)v49);
                LOWORD(v166) = 261;
                uint64_t v162 = v93;
                uint64_t v163 = v94;
                uint64_t v95 = (llvm::GetElementPtrInst *)sub_22B2397A8(v92, (uint64_t **)v55, (v56 - v55) >> 3);
                llvm::GetElementPtrInst::isInBounds((llvm::GetElementPtrInst *)v49);
                llvm::GetElementPtrInst::setIsInBounds(v95);
                unint64_t v96 = (llvm::ValueHandleBase *)sub_22B2396D8((uint64_t)v159, v49);
                sub_22B212008(v96, (uint64_t)v95);
                for (j = *(void *)(v49 + 8); j; unsigned int v31 = v99)
                {
                  uint64_t v98 = *(void *)(j + 24);
                  if ((unint64_t)v31 >= v30)
                  {
                    uint64_t v100 = (v31 - v28) >> 3;
                    unint64_t v101 = v100 + 1;
                    if ((unint64_t)(v100 + 1) >> 61) {
                      goto LABEL_297;
                    }
                    if ((uint64_t)(v30 - (void)v28) >> 2 > v101) {
                      unint64_t v101 = (uint64_t)(v30 - (void)v28) >> 2;
                    }
                    if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v102 = v101;
                    }
                    if (v102) {
                      unint64_t v102 = (unint64_t)sub_22B216148(v102);
                    }
                    else {
                      uint64_t v103 = 0;
                    }
                    int v104 = (char *)(v102 + 8 * v100);
                    *(void *)int v104 = v98;
                    int v99 = v104 + 8;
                    while (v31 != v28)
                    {
                      uint64_t v105 = *((void *)v31 - 1);
                      v31 -= 8;
                      *((void *)v104 - 1) = v105;
                      v104 -= 8;
                    }
                    unint64_t v30 = v102 + 8 * v103;
                    if (v28) {
                      operator delete(v28);
                    }
                    __int16 v28 = v104;
                  }
                  else
                  {
                    *(void *)unsigned int v31 = v98;
                    int v99 = v31 + 8;
                  }
                  uint64_t j = *(void *)(j + 8);
                }
                uint64_t v106 = v155;
                if ((unint64_t)v155 >= v156)
                {
                  uint64_t v108 = v155 - v47;
                  unint64_t v109 = v108 + 1;
                  if ((unint64_t)(v108 + 1) >> 61) {
                    goto LABEL_297;
                  }
                  if ((uint64_t)(v156 - (void)v47) >> 2 > v109) {
                    unint64_t v109 = (uint64_t)(v156 - (void)v47) >> 2;
                  }
                  if (v156 - (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v110 = v109;
                  }
                  if (v110) {
                    unint64_t v110 = (unint64_t)sub_22B216148(v110);
                  }
                  else {
                    uint64_t v111 = 0;
                  }
                  uint64_t v138 = (uint64_t *)(v110 + 8 * v108);
                  *uint64_t v138 = v49;
                  uint64_t v107 = (char *)(v138 + 1);
                  while (v106 != v47)
                  {
                    uint64_t v139 = *--v106;
                    *--uint64_t v138 = v139;
                  }
                  unint64_t v156 = v110 + 8 * v111;
                  if (v47) {
                    operator delete(v47);
                  }
                  uint64_t v47 = v138;
                }
                else
                {
                  uint64_t *v155 = v49;
                  uint64_t v107 = (char *)(v155 + 1);
                }
                if (v55) {
                  operator delete(v55);
                }
                unint64_t v48 = v107;
              }
              else
              {
                if (v51 == 5) {
                  uint64_t v67 = v49;
                }
                else {
                  uint64_t v67 = 0;
                }
                if (*(_WORD *)(v67 + 18) == 34)
                {
                  uint64_t v162 = &v164;
                  uint64_t v163 = 0x2000000000;
                  int v68 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
                  int v69 = v68 - 1;
                  if (v68 == 1)
                  {
                    uint64_t v70 = 1;
                  }
                  else
                  {
                    uint64_t v115 = v67 + 32;
                    do
                    {
                      sub_22B1D6788((uint64_t)&v162, *(void *)(v115 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF)));
                      v115 += 32;
                      --v69;
                    }
                    while (v69);
                    uint64_t v70 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
                  }
                  uint64_t v116 = sub_22B2396D8((uint64_t)v159, *(void *)(v67 - 32 * v70))[2];
                  if (v116) {
                    BOOL v117 = *(unsigned __int8 *)(v116 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v117 = 0;
                  }
                  if (v117)
                  {
                    uint64_t ElementPtr = sub_22B2397A8((uint64_t *)v116, (uint64_t **)v162, v163);
                    llvm::Instruction::insertAfter();
                  }
                  else
                  {
                    uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr();
                  }
                  long long v128 = (llvm::ValueHandleBase *)sub_22B2396D8((uint64_t)v159, v67);
                  sub_22B212008(v128, ElementPtr);
                  for (k = *(void *)(v67 + 8); k; unsigned int v31 = v131)
                  {
                    uint64_t v130 = *(void *)(k + 24);
                    if ((unint64_t)v31 >= v30)
                    {
                      uint64_t v132 = (v31 - v28) >> 3;
                      unint64_t v133 = v132 + 1;
                      if ((unint64_t)(v132 + 1) >> 61) {
                        goto LABEL_297;
                      }
                      if ((uint64_t)(v30 - (void)v28) >> 2 > v133) {
                        unint64_t v133 = (uint64_t)(v30 - (void)v28) >> 2;
                      }
                      if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v134 = v133;
                      }
                      if (v134) {
                        unint64_t v134 = (unint64_t)sub_22B216148(v134);
                      }
                      else {
                        uint64_t v135 = 0;
                      }
                      __int16 v136 = (char *)(v134 + 8 * v132);
                      *(void *)__int16 v136 = v130;
                      long long v131 = v136 + 8;
                      while (v31 != v28)
                      {
                        uint64_t v137 = *((void *)v31 - 1);
                        v31 -= 8;
                        *((void *)v136 - 1) = v137;
                        v136 -= 8;
                      }
                      unint64_t v30 = v134 + 8 * v135;
                      if (v28) {
                        operator delete(v28);
                      }
                      __int16 v28 = v136;
                    }
                    else
                    {
                      *(void *)unsigned int v31 = v130;
                      long long v131 = v31 + 8;
                    }
                    uint64_t k = *(void *)(k + 8);
                  }
                  if (v162 != &v164) {
                    free(v162);
                  }
                }
                else
                {
                  uint64_t v89 = sub_22B2396D8((uint64_t)v159, *(void *)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF)))[2];
                  if (v89) {
                    BOOL v90 = *(unsigned __int8 *)(v89 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v90 = 0;
                  }
                  if (v90)
                  {
                    uint64_t BitCast = llvm::User::operator new((llvm::User *)0x40);
                    llvm::PointerType::get();
                    LOWORD(v166) = 257;
                    llvm::BitCastInst::BitCastInst();
                    llvm::Instruction::insertAfter();
                  }
                  else
                  {
                    llvm::PointerType::get();
                    uint64_t BitCast = llvm::ConstantExpr::getBitCast();
                  }
                  uint64_t v119 = (llvm::ValueHandleBase *)sub_22B2396D8((uint64_t)v159, v67);
                  sub_22B212008(v119, BitCast);
                  while (1)
                  {
                    uint64_t v67 = *(void *)(v67 + 8);
                    if (!v67) {
                      break;
                    }
                    uint64_t v120 = *(void *)(v67 + 24);
                    if ((unint64_t)v31 >= v30)
                    {
                      uint64_t v121 = (v31 - v28) >> 3;
                      unint64_t v122 = v121 + 1;
                      if ((unint64_t)(v121 + 1) >> 61) {
                        goto LABEL_297;
                      }
                      if ((uint64_t)(v30 - (void)v28) >> 2 > v122) {
                        unint64_t v122 = (uint64_t)(v30 - (void)v28) >> 2;
                      }
                      if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v123 = v122;
                      }
                      if (v123) {
                        unint64_t v123 = (unint64_t)sub_22B216148(v123);
                      }
                      else {
                        uint64_t v124 = 0;
                      }
                      uint64_t v125 = (char *)(v123 + 8 * v121);
                      *(void *)uint64_t v125 = v120;
                      long long v126 = v125 + 8;
                      while (v31 != v28)
                      {
                        uint64_t v127 = *((void *)v31 - 1);
                        v31 -= 8;
                        *((void *)v125 - 1) = v127;
                        v125 -= 8;
                      }
                      unint64_t v30 = v123 + 8 * v124;
                      if (v28) {
                        operator delete(v28);
                      }
                      __int16 v28 = v125;
                      unsigned int v31 = v126;
                    }
                    else
                    {
                      *(void *)unsigned int v31 = v120;
                      v31 += 8;
                    }
                  }
                }
              }
            }
            while (v28 != v31);
            while (v48 != (char *)v47)
            {
              uint64_t v140 = (llvm::Instruction *)*((void *)v48 - 1);
              v48 -= 8;
              llvm::Instruction::eraseFromParent(v140);
            }
          }
          if (v168)
          {
            int v141 = (llvm::GlobalValue **)v167;
            uint64_t v142 = 8 * v168;
            do
            {
              __int16 v143 = *v141;
              if ((llvm::GlobalValue::isDeclaration(*v141) & 1) == 0)
              {
                if (*((void *)v143 + 1))
                {
                  llvm::Constant::getNullValue(*(llvm::Constant **)v143, v144);
                  llvm::Value::replaceAllUsesWith();
                }
                llvm::GlobalVariable::eraseFromParent(v143);
              }
              ++v141;
              v142 -= 8;
            }
            while (v142);
          }
          if (v47) {
            operator delete(v47);
          }
          if (v28) {
            operator delete(v28);
          }
          uint64_t v27 = (char *)v167;
        }
        if (v27 != (char *)&v169) {
          free(v27);
        }
      }
      sub_22B22A45C((uint64_t)v161);
      uint64_t v145 = v159[0];
      if (v160)
      {
        uint64_t v168 = 2;
        uint64_t v169 = 0;
        uint64_t v170 = -4096;
        uint64_t v171 = 0;
        size_t v167 = &unk_26DE79CA8;
        uint64_t v163 = 2;
        uint64_t v164 = 0;
        uint64_t v165 = -8192;
        uint64_t v166 = 0;
        uint64_t v162 = &unk_26DE79CA8;
        uint64_t v146 = (llvm *)((char *)v159[0] + 40);
        unint64_t v147 = (unint64_t)v160 << 6;
        do
        {
          uint64_t v148 = *((void *)v146 - 2);
          if (v148 != v170 && v148 != v165)
          {
            uint64_t v150 = *((void *)v146 + 2);
            if (v150 != -8192 && v150 != -4096 && v150 != 0)
            {
              llvm::ValueHandleBase::RemoveFromUseList(v146);
              uint64_t v148 = *((void *)v146 - 2);
            }
          }
          if (v148 != -8192 && v148 != -4096 && v148 != 0) {
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)v146 - 32));
          }
          uint64_t v146 = (llvm::ValueHandleBase *)((char *)v146 + 64);
          v147 -= 64;
        }
        while (v147);
        if (v165 != -8192 && v165 != -4096 && v165) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v163);
        }
        if (v170 != -8192 && v170 != -4096 && v170) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v168);
        }
        uint64_t v145 = v159[0];
        uint64_t v153 = (void *)((unint64_t)v160 << 6);
      }
      else
      {
        uint64_t v153 = 0;
      }
      llvm::deallocate_buffer(v145, v153);
    }
  }
  return 1;
}

uint64_t sub_22B2395F8(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = (char *)(*(void *)result + (v1 << 6));
    uint64_t result = *(void *)result + 8;
    do
    {
      uint64_t v4 = sub_22B22A75C((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_26DE79CA8;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 56;
      uint64_t result = (uint64_t)v4 + 64;
      v2 += 64;
    }
    while (v5 != v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

void *sub_22B2396D8(uint64_t a1, uint64_t a2)
{
  sub_22B22A84C(&v7, a2);
  uint64_t v7 = &unk_26DE79CA8;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = sub_22B239B14(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)sub_22B239BA8(a1, (uint64_t)&v7, (uint64_t)v11);
    sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 6;
    v4[6] = 0;
    v4[7] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

uint64_t sub_22B2397A8(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12) {
    uint64_t v3 = **(void **)(v3 + 16);
  }
  return sub_22B1D7668(**(void **)(v3 + 16), a1, a2, a3);
}

uint64_t sub_22B2397E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v18, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v17 = &unk_26DE79CA8;
  uint64_t v20 = v4;
  __int16 v25 = 0;
  uint64_t result = sub_22B239B14((uint64_t)*v4, v4[2].i32[0], v19, &v25);
  if (result) {
    unint64_t v6 = v25;
  }
  else {
    unint64_t v6 = (void *)(*(void *)v4 + ((unint64_t)v4[2].u32[0] << 6));
  }
  if ((void *)(*(void *)v20 + ((unint64_t)v20[2].u32[0] << 6)) != v6)
  {
    sub_22B22A75C((llvm::ValueHandleBase *)v15, 3u, v6 + 5);
    uint64_t v7 = v20;
    uint64_t v8 = v6[7];
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v6 + 5));
    }
    v26[0] = 2;
    v26[1] = 0;
    uint64_t v27 = -8192;
    uint64_t v28 = 0;
    __int16 v25 = &unk_26DE79CA8;
    sub_22B21A918((llvm::ValueHandleBase *)(v6 + 1), v26);
    uint64_t v10 = v27;
    void v6[4] = v28;
    if (v10 != -8192 && v10 != -4096 && v10) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    }
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v11 = (uint64_t)v20;
    sub_22B22A75C((llvm::ValueHandleBase *)v13, 3u, v15);
    sub_22B22A84C(&v21, a2);
    int v21 = &unk_26DE79CA8;
    uint64_t v24 = v11;
    sub_22B22A75C((llvm::ValueHandleBase *)v26, (LODWORD(v22[0]) >> 1) & 3, v22);
    __int16 v25 = &unk_26DE79CA8;
    uint64_t v28 = v24;
    sub_22B22A75C((llvm::ValueHandleBase *)v29, 3u, v13);
    uint64_t v31 = 0;
    uint64_t result = sub_22B239B14(*(void *)v11, *(_DWORD *)(v11 + 16), v27, &v31);
    if ((result & 1) == 0)
    {
      uint64_t v12 = (void *)sub_22B239BA8(v11, (uint64_t)&v25, v31);
      sub_22B21A918((llvm::ValueHandleBase *)(v12 + 1), v26);
      void v12[4] = v28;
      uint64_t result = (uint64_t)sub_22B22A75C((llvm::ValueHandleBase *)(v12 + 5), 3u, v29);
    }
    if (v30 != -8192 && v30 != -4096 && v30) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    }
    if (v27 != -8192 && v27 != -4096 && v27) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    }
    if (v23 != -8192 && v23 != -4096 && v23) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
    }
    if (v14 != -8192 && v14 != -4096 && v14) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
    }
    if (v16 != -8192 && v16 != -4096 && v16) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    }
  }
  if (v19 != -8192 && v19 != -4096)
  {
    if (v19) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    }
  }
  return result;
}

uint64_t sub_22B239B14(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + (v4 << 6);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = a1 + (v4 << 6);
        uint64_t v6 = *(void *)(v5 + 24);
        uint64_t v7 = 1;
        if (v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_22B239BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22B239C5C(a1, v6);
  uint64_t v8 = 0;
  sub_22B239B14(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_22B239C5C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x230F426A0]((unint64_t)v8 << 6, 8);
  if (v4)
  {
    sub_22B2395F8(a1);
    v22[0] = 2;
    v22[1] = 0;
    uint64_t v23 = -4096;
    uint64_t v24 = 0;
    uint64_t v20 = 0;
    int v21 = &unk_26DE79CA8;
    v18[0] = 2;
    v18[1] = 0;
    uint64_t v19 = -8192;
    if (v3)
    {
      uint64_t v9 = (void *)((char *)v4 + 32);
      uint64_t v10 = v3 << 6;
      do
      {
        uint64_t v11 = *(v9 - 1);
        if (v11 != v23 && v11 != v19)
        {
          uint64_t v25 = 0;
          sub_22B239B14(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v25);
          uint64_t v13 = v25;
          sub_22B21A918((llvm::ValueHandleBase *)(v25 + 8), v9 - 3);
          *(void *)(v13 + 32) = *v9;
          sub_22B22A75C((llvm::ValueHandleBase *)(v13 + 40), 3u, v9 + 1);
          ++*(_DWORD *)(a1 + 8);
          uint64_t v14 = v9[3];
          if (v14 != -8192 && v14 != -4096 && v14) {
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 + 1));
          }
        }
        uint64_t v15 = *(v9 - 1);
        if (v15 != -8192 && v15 != -4096 && v15 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 3));
        }
        v9 += 8;
        v10 -= 64;
      }
      while (v10);
      if (v19 != -8192 && v19 != -4096 && v19) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
      }
    }
    if (v23 != -8192 && v23 != -4096 && v23) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
    }
    return llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    return sub_22B2395F8(a1);
  }
}

uint64_t sub_22B239E9C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v9, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v11 = v2;
  int v12 = 0;
  uint64_t result = sub_22B239B14(*(void *)v2, *(_DWORD *)(v2 + 16), v10, &v12);
  if (result)
  {
    uint64_t v4 = v12;
    uint64_t v5 = v12[7];
    if (v5 != -8192 && v5 != -4096 && v5 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v12 + 5));
    }
    v13[0] = 2;
    v13[1] = 0;
    uint64_t v14 = -8192;
    uint64_t v15 = 0;
    int v12 = &unk_26DE79CA8;
    uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v13);
    uint64_t v7 = v14;
    v4[4] = v15;
    if (v7 != -8192 && v7 != -4096 && v7) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v10 != -8192 && v10 != -4096 && v10 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v9);
  }
  return result;
}

uint64_t sub_22B239FE0(uint64_t *a1)
{
  v34[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_22B1EB228(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400), *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 320), 2);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = v2;
  uint64_t v4 = v2 + 24;
  for (uint64_t i = *(void *)(v2 + 32); i != v4; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      unint64_t v6 = (llvm::GlobalValue *)(i - 56);
    }
    else {
      unint64_t v6 = 0;
    }
    if (llvm::GlobalValue::isDeclaration(v6))
    {
      if ((*((unsigned char *)v6 + 34) & 0x80) != 0) {
        sub_22B1EB864((uint64_t)v6, 3);
      }
    }
  }
  uint64_t v7 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 32);
  unsigned int v8 = *(void **)(v7 + 8);
  if (v8) {
    size_t v9 = strlen(*(const char **)(v7 + 8));
  }
  else {
    size_t v9 = 0;
  }
  sub_22B1EB77C(v3, v8, v9);
  uint64_t v11 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 32);
  if (*(void *)(v11 + 16)) {
    strlen(*(const char **)(v11 + 16));
  }
  llvm::Module::setDataLayout();
  uint64_t v33 = v3;
  void v34[3] = 0;
  int v12 = llvm::Linker::linkModules();
  sub_22B1EB7E0(v34);
  uint64_t v13 = MEMORY[0x230F42C50](v33);
  MEMORY[0x230F43600](v13, 0x10B2C407FF26C1CLL);
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = *a1;
    uint64_t v15 = *a1;
    uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 24);
    if (*(unsigned char *)(*(void *)(v16 + 344) + 1674))
    {
      uint64_t v17 = *(void *)(v16 + 320);
      uint64_t v18 = v17 + 24;
      uint64_t v19 = *(void *)(v17 + 32);
      while (v19 != v18)
      {
        uint64_t v20 = (llvm::Function *)(v19 - 56);
        BOOL v21 = v19 == 0;
        uint64_t v19 = *(void *)(v19 + 8);
        if (v21) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = v20;
        }
        if (v22 != (llvm::Function *)a1[19] && !*((void *)v22 + 1)) {
          llvm::Function::eraseFromParent(v22);
        }
      }
    }
    else
    {
      *((_DWORD *)a1 + 8) = 1;
      uint64_t v23 = *(uint64_t *)((char *)a1 + *(void *)(v15 - 24) + 320);
      uint64_t v24 = v23 + 24;
      uint64_t v25 = *(void *)(v23 + 32);
      if (v25 != v23 + 24)
      {
        do
        {
          uint64_t v26 = v25 - 56;
          BOOL v21 = v25 == 0;
          uint64_t v25 = *(void *)(v25 + 8);
          if (v21) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = v26;
          }
          if (v27 != a1[19])
          {
            if (*(void *)(v27 + 8))
            {
              if ((*(unsigned char *)(v27 + 33) & 0x20) == 0
                && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v27) & 1) == 0)
              {
                *(_DWORD *)(v27 + 32) = *(_DWORD *)(v27 + 32) & 0xFFFFBFC0 | 0x4007;
                llvm::Function::addFnAttr();
                ++*((_DWORD *)a1 + 8);
              }
            }
            else
            {
              llvm::Function::eraseFromParent((llvm::Function *)v27);
            }
          }
        }
        while (v25 != v24);
        uint64_t v14 = *a1;
      }
      uint64_t v28 = *(uint64_t *)((char *)a1 + *(void *)(v14 - 24) + 320);
      uint64_t v29 = v28 + 8;
      uint64_t v30 = *(void *)(v28 + 16);
      if (v30 != v28 + 8)
      {
        do
        {
          uint64_t v31 = v30 - 56;
          BOOL v21 = v30 == 0;
          uint64_t v30 = *(void *)(v30 + 8);
          if (v21) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = v31;
          }
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v32) & 1) == 0)
          {
            if (*(void *)(v32 + 8)) {
              *(_DWORD *)(v32 + 32) = *(_DWORD *)(v32 + 32) & 0xFFFFBFC0 | 0x4007;
            }
            else {
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v32);
            }
          }
        }
        while (v30 != v29);
      }
      if (*((_DWORD *)a1 + 8) > 1u)
      {
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 320), *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 320));
        *((_DWORD *)a1 + 8) = 1;
      }
    }
  }
  return v12 ^ 1u;
}

uint64_t sub_22B23A3A4(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 10)) {
    return 1;
  }
  (*(void (**)(char ***__return_ptr))(**(void **)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 336))(&v26);
  uint64_t v4 = v26;
  if (v26 != v27)
  {
    do
    {
      uint64_t Function = llvm::Module::getFunction();
      if (Function)
      {
        uint64_t v6 = Function;
        if (*((char *)v4 + 55) < 0) {
          sub_22B1DC004(&__dst, v4[4], (unint64_t)v4[5]);
        }
        else {
          std::string __dst = *(std::string *)(v4 + 4);
        }
        std::string::insert(&__dst, 0, "agx.");
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        sub_22B1EA4B0((uint64_t)v23, size + 5);
        if (v24 >= 0) {
          unsigned int v8 = v23;
        }
        else {
          unsigned int v8 = (void **)v23[0];
        }
        if (size)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          memmove(v8, p_dst, size);
        }
        strcpy((char *)v8 + size, ".fast");
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v10 = __dst.__r_.__value_.__l.__size_;
        }
        sub_22B1EA4B0((uint64_t)__p, v10 + 8);
        if (v22 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        if (v10)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v12 = &__dst;
          }
          else {
            int v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, ".nonfast");
        uint64_t v13 = *(void *)(v6 + 8);
        while (v13)
        {
          uint64_t v14 = *(llvm::Instruction **)(v13 + 24);
          uint64_t v13 = *(void *)(v13 + 8);
          llvm::Instruction::getFastMathFlags(v14);
          llvm::Module::getOrInsertFunction();
          *((void *)v14 + 9) = *(void *)(v15 + 24);
          sub_22B1FDCE0((uint64_t)v14, v15);
        }
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v16 = v4[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = (char **)v16;
          uint64_t v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (char **)v4[2];
          BOOL v18 = *v17 == (char *)v4;
          uint64_t v4 = v17;
        }
        while (!v18);
      }
      uint64_t v4 = v17;
    }
    while (v17 != v27);
  }
  sub_22B1E30E0(v27[0]);
  uint64_t v19 = sub_22B1EB228(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400), *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320), a2);
  if (!v19) {
    return 1;
  }
  else {
    return sub_22B1EB4C8(a1 + *(void *)(*(void *)a1 - 24), v19, *(unsigned __int8 *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1674), *(llvm::Function **)(a1 + 152));
  }
}

uint64_t sub_22B23A738(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 320);
  uint64_t v4 = v3 + 24;
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    do
    {
      if (v5) {
        uint64_t v6 = v5 - 56;
      }
      else {
        uint64_t v6 = 0;
      }
      if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6)
        && *(void *)(v6 + 8)
        && (*(unsigned char *)(v6 + 33) & 0x20) == 0)
      {
        int v12 = (FILE *)*MEMORY[0x263EF8348];
        uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v6);
        sub_22B23A94C(&v19, Name, v14);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v15 = &v19;
        }
        else {
          uint64_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
        }
        fprintf(v12, "AGC: %s:%d:%s: !!! Encountered unlowered function call to %s\n", "agc_llvm_air_user_object.cpp", 8296, "virtual BOOL AGCLLVMUserObject::verifyLoweredIR()", (const char *)v15);
        std::string::~string(&v19);
        uint64_t v16 = (void *)llvm::Value::getName((llvm::Value *)v6);
        sub_22B23A94C(&v19, v16, v17);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v18 = &v19;
        }
        else {
          BOOL v18 = (std::string *)v19.__r_.__value_.__r.__words[0];
        }
        syslog(3, "AGC: %s:%d:%s: !!! Encountered unlowered function call to %s\n", "agc_llvm_air_user_object.cpp", 8296, "virtual BOOL AGCLLVMUserObject::verifyLoweredIR()", (const char *)v18);
        std::string::~string(&v19);
        abort();
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
    uint64_t v2 = *a1;
  }
  uint64_t v7 = *(uint64_t *)((char *)a1 + *(void *)(v2 - 24) + 320);
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8 != v7 + 24)
  {
    uint64_t v9 = *(void *)(v7 + 32);
    do
    {
      if (v9 != v8)
      {
        if (v9) {
          uint64_t v10 = v9 - 56;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10 == a1[19]) {
          llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList();
        }
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != v7 + 24);
  }
  return 1;
}

void *sub_22B23A94C(void *__dst, void *__src, size_t __len)
{
  if (__src) {
    return sub_22B1E2118(__dst, __src, __len);
  }
  void *__dst = 0;
  __dst[1] = 0;
  __dst[2] = 0;
  return __dst;
}

uint64_t sub_22B23A960(void *a1)
{
  uint64_t v1 = (*(uint64_t (**)(void, void *, void))(**(void **)((char *)a1 + *(void *)(*a1 - 24) + 344)
                                                           + 488))(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344), a1, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 320));
  uint64_t v2 = *(void *)(v1 + 320);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4) {
        uint64_t v5 = (llvm::Value *)(v4 - 56);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t Name = (_DWORD *)llvm::Value::getName(v5);
      v16[0] = 0;
      v16[1] = 0;
      size_t v14 = 0;
      uint64_t v15 = 0;
      if (sub_22B1FF3E8(Name, v7, v16, &v14) && llvm::GlobalValue::isDeclaration(v5))
      {
        uint64_t v8 = *(void *)(v1 + 712);
        int Key = llvm::StringMapImpl::FindKey();
        if (Key == -1) {
          uint64_t v10 = *(unsigned int *)(v8 + 8);
        }
        else {
          uint64_t v10 = Key;
        }
        uint64_t v11 = (void *)(*(void *)v8 + 8 * v10);
        if (v11 != (void *)(**(void **)(v1 + 712) + 8 * *(unsigned int *)(*(void *)(v1 + 712) + 8))
          && llvm::StringRef::find() != -1)
        {
          sub_22B1FF4A0(v1 + 352, v5, *v11 + 8, v14, v15);
        }
      }
    }
    while (v4 != v3);
  }
  uint64_t v12 = *(unsigned __int8 *)(v1 + 720);
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  return v12;
}

uint64_t sub_22B23AAFC(void *a1)
{
  uint64_t v1 = (*(uint64_t (**)(void, void *, void))(**(void **)((char *)a1 + *(void *)(*a1 - 24) + 344)
                                                           + 488))(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344), a1, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 320));
  uint64_t v2 = sub_22B1FF2F4(v1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
  return v2;
}

uint64_t sub_22B23ABA4(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  (*(void (**)(void))(*a1 + 80))();
  llvm::Module::getOrInsertFunction();
  a1[19] = v2;
  uint64_t v3 = a1[20];
  if (*(void *)(v3 + 72) != v3 + 72)
  {
    sub_22B23B288(v2 + 72, v2 + 72, v3 + 72, *(void *)(v3 + 80), v3 + 72);
    uint64_t v3 = a1[20];
  }
  v17[0] = *(void **)(v3 + 112);
  llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v17);
  uint64_t v4 = (void *)llvm::AttributeSet::removeAttribute();
  v16[1] = v4;
  if (v4)
  {
    uint64_t v5 = a1[19];
    LODWORD(v17[0]) = -1;
    v17[1] = v4;
    *(void *)(v5 + 112) = llvm::AttributeList::get();
  }
  uint64_t v6 = *(void *)(a1[19] + 80);
  if (v6) {
    unint64_t v7 = (llvm::BasicBlock *)(v6 - 24);
  }
  else {
    unint64_t v7 = 0;
  }
  v16[0] = llvm::BasicBlock::getFirstInsertionPt(v7);
  sub_22B23B300((uint64_t)v7, (uint64_t)v16);
  __int16 v18 = 257;
  llvm::BasicBlock::splitBasicBlock();
  uint64_t v8 = (void *)*((void *)v7 + 5);
  if (v8 == (void *)((char *)v7 + 40))
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v9 = (llvm::Instruction *)(v8 - 3);
    if (v8) {
      uint64_t v10 = v8 - 3;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*((unsigned __int8 *)v10 + 16) - 29 >= 0xB) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v9;
    }
  }
  llvm::Instruction::eraseFromParent(v11);
  uint64_t v12 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v12 + 7) = v7;
  *((void *)v12 + 8) = (char *)v7 + 40;
  uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  if (v13)
  {
    uint64_t v14 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, void))(*(void *)v14 + 296))(v14, a1[19]);
    sub_22B1F8C98((void *)((char *)a1 + *(void *)(*a1 - 24) + 8));
    v17[0] = "wrapper_exit";
    __int16 v18 = 259;
    operator new();
  }
  return v13;
}

void sub_22B23B288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a5) {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList();
  }
}

uint64_t sub_22B23B300(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 40;
  uint64_t v3 = *(void *)(result + 48);
  if (v3 != result + 40)
  {
    do
    {
      uint64_t result = v3 - 24;
      BOOL v5 = v3 == 0;
      uint64_t v3 = *(void *)(v3 + 8);
      if (v5) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = result;
      }
      if (*(unsigned char *)(v6 + 16) == 59)
      {
        if (*(void *)a2) {
          uint64_t v7 = *(void *)a2 - 24;
        }
        else {
          uint64_t v7 = 0;
        }
        if (result == v7) {
          *(void *)a2 = *(void *)(*(void *)a2 + 8);
        }
        else {
          uint64_t result = llvm::Instruction::moveBefore();
        }
      }
    }
    while (v3 != v2);
  }
  return result;
}

void sub_22B23B384(uint64_t a1)
{
  sub_22B23B76C();
  uint64_t v2 = *(void *)(a1 + 160);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    uint64_t v4 = *(void *)(a1 + 160);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  uint64_t v5 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v3 != v5)
  {
    uint64_t v6 = a1 + 8;
    uint64_t v7 = a1 + 192;
    uint64_t v44 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned int *)(v3 + 32));
      if (!v8 || !*(void *)(v3 + 8)) {
        goto LABEL_45;
      }
      llvm::MDString::getString(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8));
      int Key = llvm::StringMapImpl::FindKey();
      uint64_t v10 = Key;
      if (Key == -1 || Key == (unint64_t)dword_2683E9220) {
        goto LABEL_45;
      }
      uint64_t v12 = qword_2683E9218;
      uint64_t v13 = *(void *)(*(void *)(a1 + 160) + 80);
      if (v13) {
        uint64_t v14 = (llvm::BasicBlock *)(v13 - 24);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (char **)(v6 + *(void *)(*(void *)a1 - 24));
      FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v14);
      sub_22B1D3CF8(v15, (char *)v14, FirstInsertionPt);
      uint64_t v17 = *(void *)v3;
      if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
        uint64_t v17 = **(void **)(v17 + 16);
      }
      uint64_t v18 = *(void *)(v12 + 8 * v10);
      uint64_t v19 = *(void **)(v18 + 8);
      if (v19) {
        sub_22B1E2118(&__dst, v19, *(void *)(v18 + 16));
      }
      else {
        memset(&__dst, 0, sizeof(__dst));
      }
      if (v17 == *(void *)(v7 + *(void *)(*(void *)a1 - 24))) {
        uint64_t v20 = ".i32";
      }
      else {
        uint64_t v20 = ".i16";
      }
      BOOL v21 = std::string::append(&__dst, v20);
      std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      uint64_t v49 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v49 >= 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if (v49 >= 0) {
        uint64_t v24 = HIBYTE(v49);
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      if (*(unsigned char *)(v18 + 24))
      {
        uint64_t v25 = sub_22B1DCB28();
        uint64_t v26 = *(void *)(*(void *)a1 - 24);
        __int16 v47 = 257;
        uint64_t v27 = **(void **)(*(void *)v25 + 16);
        uint64_t v28 = v6 + v26;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v31 = sub_22B1DB218(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)v23, v24, v17, *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 192));
        if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12)
        {
          uint64_t v32 = *(unsigned int *)(*(void *)v3 + 32);
          uint64_t v33 = llvm::UndefValue::get();
          if (v32)
          {
            for (uint64_t i = 0; i != v32; ++i)
            {
              uint64_t v35 = *(void *)(*(void *)a1 - 24);
              uint64_t v45 = llvm::ConstantInt::get();
              __int16 v47 = 257;
              BOOL v36 = sub_22B1D4034(v6 + v35, *(void *)(v31 + 24), v31, (uint64_t)&v45, 1, (uint64_t)&__dst);
              uint64_t v37 = a1 + *(void *)(*(void *)a1 - 24);
              __int16 v47 = 257;
              uint64_t v38 = v6;
              uint64_t v39 = v7;
              uint64_t v40 = v37 + 8;
              uint64_t v41 = llvm::ConstantInt::get();
              uint64_t v42 = v40;
              uint64_t v7 = v39;
              uint64_t v6 = v38;
              uint64_t v33 = sub_22B2427EC(v42, v33, (uint64_t)v36, v41, (uint64_t)&__dst);
            }
          }
          goto LABEL_42;
        }
        uint64_t v43 = a1 + *(void *)(*(void *)a1 - 24);
        uint64_t v45 = llvm::ConstantInt::get();
        uint64_t v28 = v43 + 8;
        __int16 v47 = 257;
        uint64_t v27 = *(void *)(v31 + 24);
        uint64_t v29 = &v45;
        uint64_t v25 = v31;
        uint64_t v30 = 1;
      }
      sub_22B1D4034(v28, v27, v25, (uint64_t)v29, v30, (uint64_t)&__dst);
LABEL_42:
      llvm::Value::replaceAllUsesWith();
      if (SHIBYTE(v49) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v5 = v44;
LABEL_45:
      v3 += 40;
    }
    while (v3 != v5);
  }
}

void sub_22B23B76C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2683E9238))
  {
    qword_2683E9218 = 0;
    *(void *)&dword_2683E9220 = 0;
    qword_2683E9228 = 0x2000000000;
    __cxa_atexit((void (*)(void *))sub_22B23B7F0, &qword_2683E9218, &dword_22B1D2000);
    __cxa_guard_release(&qword_2683E9238);
  }
}

uint64_t sub_22B23B7F0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 33));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B23B86C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v3 = *(void *)(v2 + 320);
  uint64_t v4 = *(void *)(*(void *)(v2 + 400) + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  if (v5) {
    size_t v6 = strlen(*(const char **)(v4 + 8));
  }
  else {
    size_t v6 = 0;
  }
  sub_22B1EB77C(v3, v5, v6);
  uint64_t v7 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 32);
  if (*(void *)(v7 + 16)) {
    strlen(*(const char **)(v7 + 16));
  }
  llvm::Module::setDataLayout();
  sub_22B1EF0E8();
  sub_22B1EF1A8(a1 + *(void *)(*(void *)a1 - 24));
  llvm::Module::getOrInsertNamedMetadata();
  uint64_t v14 = llvm::MDString::get();
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  llvm::ConstantInt::get();
  uint64_t v15 = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (*(_DWORD *)(a1 + 32) >= 2u) {
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 304), *(llvm::Module **)(a1 + *(void *)(*(void *)a1 - 24) + 320));
  }
  uint64_t v8 = (void *)(a1 + *(void *)(*(void *)a1 - 24));
  if (*(unsigned char *)(v8[43] + 1690) && (*(unsigned int (**)(void *))(*v8 + 32))(v8) <= 3)
  {
    llvm::Module::getOrInsertNamedMetadata();
    v12[1] = llvm::MDString::get();
    llvm::ConstantInt::get();
    v12[2] = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 160) + 80);
  if (v9) {
    uint64_t v10 = (llvm::BasicBlock *)(v9 - 24);
  }
  else {
    uint64_t v10 = 0;
  }
  v12[0] = llvm::BasicBlock::getFirstInsertionPt(v10);
  sub_22B23B300((uint64_t)v10, (uint64_t)v12);
  __int16 v13 = 257;
  llvm::BasicBlock::splitBasicBlock();
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  return 1;
}

void sub_22B23BC2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t *sub_22B23BC54(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(qword_2683E9248 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E9258) = qword_2683E9258 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 49, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 48;
  if (a2) {
    memcpy((void *)(v8 + 48), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  uint64_t *i = (uint64_t)v9;
  ++dword_2683E9254;
  for (uint64_t i = (uint64_t *)(qword_2683E9248
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E9248));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_22B23BD58(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(qword_2683E9150 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E9160) = qword_2683E9160 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 25, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 24;
  if (a2) {
    memcpy((void *)(v8 + 24), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  uint64_t *i = (uint64_t)v9;
  ++dword_2683E915C;
  for (uint64_t i = (uint64_t *)(qword_2683E9150
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E9150));
        !*i || *i == -8;
  return i;
}

uint64_t sub_22B23BE5C(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t result = llvm::StringMapImpl::LookupBucketFor();
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 8 * result);
  if (v8)
  {
    if (v8 != -8) {
      return result;
    }
    --*((_DWORD *)a1 + 4);
  }
  uint64_t v9 = result;
  uint64_t v10 = MEMORY[0x230F426A0](a3 + 9, 8);
  uint64_t v11 = (void *)v10;
  uint64_t v12 = v10 + 8;
  if (a3) {
    memcpy((void *)(v10 + 8), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)(v7 + 8 * v9) = v11;
  void *v11 = a3;
  ++*((_DWORD *)a1 + 3);
  return llvm::StringMapImpl::RehashTable(a1);
}

uint64_t *sub_22B23BF34(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(qword_2683E9218 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_2683E9228) = qword_2683E9228 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x230F426A0](a2 + 33, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 32;
  if (a2) {
    memcpy((void *)(v8 + 32), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  v9[1] = 0;
  v9[2] = 0;
  *uint64_t v9 = a2;
  uint64_t *i = (uint64_t)v9;
  ++dword_2683E9224;
  for (uint64_t i = (uint64_t *)(qword_2683E9218
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_2683E9218));
        !*i || *i == -8;
  return i;
}

uint64_t sub_22B23C03C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[1];
  uint64_t v4 = *(void *)(a1 + 832);
  if (v4)
  {
    sub_22B1EDBB8(*(void **)(v4 + 8));
    MEMORY[0x230F43600](v4, 0x1020C4062D53EE8);
  }
  uint64_t v5 = *(void **)(a1 + 2304);
  if (v5 != (void *)(a1 + 2320)) {
    free(v5);
  }
  sub_22B22A45C(a1 + 2232);
  uint64_t v6 = *(unsigned int *)(a1 + 2224);
  uint64_t v7 = *(llvm **)(a1 + 2208);
  if (v6)
  {
    uint64_t v47 = 2;
    uint64_t v48 = 0;
    uint64_t v49 = -4096;
    uint64_t v50 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = &unk_26DE79C18;
    uint64_t v42 = 2;
    uint64_t v43 = 0;
    uint64_t v44 = -8192;
    uint64_t v8 = (uint64_t *)((char *)v7 + 24);
    uint64_t v9 = 48 * v6;
    do
    {
      uint64_t v10 = *v8;
      if (*v8 != -8192 && v10 != -4096 && v10 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v8 - 2));
      }
      v8 += 6;
      v9 -= 48;
    }
    while (v9);
    uint64_t v7 = *(llvm **)(a1 + 2208);
    LODWORD(v6) = *(_DWORD *)(a1 + 2224);
  }
  llvm::deallocate_buffer(v7, (void *)(48 * v6));
  sub_22B1EDBB8(*(void **)(a1 + 2192));
  uint64_t v12 = *(char **)(a1 + 2152);
  uint64_t v13 = *(unsigned int *)(a1 + 2160);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    uint64_t v15 = v12 - 8;
    do
    {
      sub_22B23C528((uint64_t *)&v15[v14]);
      v14 -= 8;
    }
    while (v14);
    uint64_t v12 = *(char **)(a1 + 2152);
  }
  if (v12 != (char *)(a1 + 2168)) {
    free(v12);
  }
  sub_22B22DDA8(a1 + 2112);
  sub_22B22DDA8(a1 + 2064);
  sub_22B22DDA8(a1 + 2016);
  sub_22B22DDA8(a1 + 1968);
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    uint64_t v17 = *(void *)(a1 + i + 1952);
    if (v17 != -8192 && v17 != -4096 && v17 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + i + 1936));
    }
  }
  for (uint64_t j = 0; j != -168; j -= 56)
  {
    uint64_t v20 = *(void *)(a1 + j + 1840);
    if (v20 != -8192 && v20 != -4096 && v20 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + j + 1824));
    }
  }
  for (uint64_t k = 0; k != -168; k -= 56)
  {
    uint64_t v23 = *(void *)(a1 + k + 1672);
    if (v23 != -8192 && v23 != -4096 && v23 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + k + 1656));
    }
  }
  for (uint64_t m = 0; m != -560; m -= 56)
  {
    uint64_t v26 = *(void *)(a1 + m + 1504);
    if (v26 != -8192 && v26 != -4096 && v26 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + m + 1488));
    }
  }
  uint64_t v28 = *(void **)(a1 + 896);
  if (v28 != *(void **)(a1 + 888)) {
    free(v28);
  }
  sub_22B1EDBB8(*(void **)(a1 + 872));
  sub_22B1EDBB8(*(void **)(a1 + 848));
  uint64_t v29 = *(void **)(a1 + 808);
  if (v29)
  {
    *(void *)(a1 + 816) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(a1 + 784);
  if (v30)
  {
    *(void *)(a1 + 792) = v30;
    operator delete(v30);
  }
  sub_22B22A3F0(*(void **)(a1 + 768));
  sub_22B22A45C(a1 + 720);
  sub_22B22AD90(a1 + 696);
  llvm::deallocate_buffer(*(llvm **)(a1 + 696), (void *)(48 * *(unsigned int *)(a1 + 712)));
  sub_22B22A45C(a1 + 656);
  uint64_t v31 = *(unsigned int *)(a1 + 648);
  uint64_t v32 = *(llvm **)(a1 + 632);
  if (v31)
  {
    uint64_t v47 = 2;
    uint64_t v48 = 0;
    uint64_t v49 = -4096;
    uint64_t v50 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = &unk_26DE79C68;
    uint64_t v42 = 2;
    uint64_t v43 = 0;
    uint64_t v44 = -8192;
    uint64_t v33 = (uint64_t *)((char *)v32 + 24);
    uint64_t v34 = 48 * v31;
    do
    {
      uint64_t v35 = *v33;
      if (*v33 != -8192 && v35 != -4096 && v35 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v33 - 2));
      }
      v33 += 6;
      v34 -= 48;
    }
    while (v34);
    if (v44 != -8192 && v44 != -4096 && v44 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v42);
    }
    if (v49 != -8192 && v49 != -4096 && v49) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v47);
    }
    uint64_t v32 = *(llvm **)(a1 + 632);
    uint64_t v38 = 48 * *(unsigned int *)(a1 + 648);
  }
  else
  {
    uint64_t v38 = 0;
  }
  llvm::deallocate_buffer(v32, (void *)v38);
  uint64_t v39 = *(void **)(a1 + 600);
  if (v39 != (void *)(a1 + 616)) {
    free(v39);
  }
  MEMORY[0x230F420B0](a1 + 168);
  uint64_t v40 = *(void **)(a1 + 72);
  if (v40 != (void *)(a1 + 88)) {
    free(v40);
  }
  return a1;
}

uint64_t *sub_22B23C528(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_22B23C588(v1 + 64);
    JUMPOUT(0x230F43600);
  }
  return result;
}

uint64_t sub_22B23C588(uint64_t a1)
{
  uint64_t v2 = *(char ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *v2;
      sub_22B1E3368(v2 + 4);
      operator delete(v2);
      uint64_t v2 = (char **)v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22B23C5E8(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  v56[5] = *(uint64_t **)MEMORY[0x263EF8340];
  unsigned int v48 = 1;
  unsigned int v49 = a3;
  uint64_t v47 = 0;
  char v46 = 0;
  uint64_t v45 = 0;
  char v44 = 0;
  unsigned int v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(*a2 + 16) + 8);
  }
  sub_22B243DB4(a4, v8 >> 8, &v49, &v48, (unsigned int *)&v47 + 1, &v47, &v45, &v46, &v44);
  int v9 = v46;
  *(unsigned char *)(a1 + 2384) |= v46;
  if (a5 != -1) {
    unsigned int v49 = a5;
  }
  uint64_t v43 = a2;
  if (v44) {
    operator new();
  }
  uint64_t v10 = **(llvm::ArrayType ***)(*a2 + 16);
  if (*((unsigned char *)v10 + 8) == 15)
  {
    unsigned int v11 = v48;
    uint64_t v12 = llvm::ArrayType::get(v10, (llvm::Type *)v48);
    unsigned int v13 = v49;
    __p[0] = "agc.buffer_pointers_array.";
    *(void *)&long long v51 = v49;
    LOWORD(v52) = 2051;
    uint64_t result = sub_22B22A000((uint64_t *)a1, v12, (uint64_t)__p, (unsigned __int16)v49, 0);
    uint64_t v15 = (uint64_t *)result;
    uint64_t v16 = *(uint64_t ***)(a1 + 832);
    if (!v16) {
      operator new();
    }
    uint64_t v17 = v16[1];
    if (v17)
    {
      do
      {
        while (1)
        {
          uint64_t v18 = (uint64_t **)v17;
          unsigned int v19 = *((_DWORD *)v17 + 7);
          if (v13 >= v19) {
            break;
          }
          uint64_t v17 = *v18;
          if (!*v18)
          {
            uint64_t v42 = v18;
            goto LABEL_28;
          }
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v17 = v18[1];
      }
      while (v17);
      uint64_t v42 = v18 + 1;
    }
    else
    {
      uint64_t v42 = v16 + 1;
      uint64_t v18 = v16 + 1;
    }
LABEL_28:
    uint64_t v25 = (uint64_t *)v18;
    uint64_t v18 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v18 + 7) = v13;
    *((_DWORD *)v18 + 8) = 0;
    *uint64_t v18 = 0;
    v18[1] = 0;
    void v18[2] = v25;
    *uint64_t v42 = (uint64_t *)v18;
    uint64_t v26 = (uint64_t *)**v16;
    uint64_t v27 = (uint64_t *)v18;
    if (v26)
    {
      *uint64_t v16 = v26;
      uint64_t v27 = *v42;
    }
    uint64_t result = (uint64_t)sub_22B1E313C(v16[1], v27);
    void v16[2] = (uint64_t *)((char *)v16[2] + 1);
LABEL_31:
    *((_DWORD *)v18 + 8) = v11;
    uint64_t v28 = v43[1];
    if (v28)
    {
      uint64_t v29 = a1 + 8;
      do
      {
        uint64_t v30 = *(void *)(v28 + 24);
        uint64_t v28 = *(void *)(v28 + 8);
        sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v30);
        if (*(unsigned char *)(v30 + 16) == 60)
        {
          uint64_t v32 = *(void *)(*(void *)a1 - 24) + a1;
          __int16 v55 = 257;
          llvm::Type::getInt32Ty(*(llvm::Type **)(v32 + 72), v31);
          v56[0] = (uint64_t *)llvm::ConstantInt::get();
          llvm::Type::getInt32Ty(*(llvm::Type **)(v32 + 72), v33);
          v56[1] = (uint64_t *)llvm::ConstantInt::get();
          uint64_t v34 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t **, uint64_t, void))(**(void **)(v32 + 80)
                                                                                                  + 48))(*(void *)(v32 + 80), 0, v15, v56, 2, 0);
          if (!v34)
          {
            LOWORD(v52) = 257;
            uint64_t v34 = sub_22B1D7668(0, v15, v56, 2);
            sub_22B1D6EE0((uint64_t *)(v32 + 8), v34, (uint64_t)&v53);
          }
          uint64_t v35 = *(void *)(*(void *)a1 - 24);
          LOWORD(v52) = 257;
          sub_22B1D4240((uint64_t *)(v29 + v35), **(llvm::Type ***)(*(void *)v34 + 16), v34, 0, (uint64_t)__p);
          llvm::Value::replaceAllUsesWith();
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v53 = 0;
          uint64_t v53 = (uint64_t *)llvm::ConstantInt::get();
          uint64_t v54 = *(void *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) + 32);
          uint64_t v36 = a1 + *(void *)(*(void *)a1 - 24);
          LOWORD(v52) = 257;
          uint64_t v37 = sub_22B229F08(v36, v15, &v53, 2, (uint64_t)__p);
          uint64_t v38 = *(void *)(*(void *)a1 - 24);
          LOWORD(v52) = 257;
          sub_22B1D4240((uint64_t *)(v29 + v38), **(llvm::Type ***)(*(void *)v37 + 16), v37, 0, (uint64_t)__p);
          uint64_t v39 = *(void *)(v30 + 8);
          if (v39)
          {
            do
            {
              uint64_t v40 = *(void *)(v39 + 8);
              uint64_t v41 = *(llvm::Instruction **)(v39 + 24);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent(v41);
              uint64_t v39 = v40;
            }
            while (v40);
          }
        }
        uint64_t result = llvm::Instruction::eraseFromParent((llvm::Instruction *)v30);
      }
      while (v28);
    }
  }
  else
  {
    unsigned int v20 = v49;
    (*(void (**)(uint64_t, uint64_t *, void, uint64_t))(*(void *)a1 + 216))(a1, a2, v49, 0xFFFFFFFFLL);
    uint64_t v21 = *(void *)(*(void *)(a1 + 160) + 80);
    if (v21) {
      uint64_t v22 = v21 - 24;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(void *)(v22 + 40);
    if (v23) {
      uint64_t v24 = v23 - 24;
    }
    else {
      uint64_t v24 = 0;
    }
    sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v24);
    sub_22B2373C8(a1, *a2, v20, 0xFFFFFFFF, SHIDWORD(v47), (v9 - 1));
    return llvm::Value::replaceAllUsesWith();
  }
  return result;
}

uint64_t sub_22B23DBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v12 = *(void **)a4;
  uint64_t v13 = *(unsigned int *)(a4 + 8);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    uint64_t v15 = *(void **)a4;
    while (*v15 != a3)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
      {
        uint64_t v15 = &v12[v13];
        break;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void **)a4;
  }
  if (v13 != v15 - v12) {
    return 0;
  }
  sub_22B1D6788(a4, a3);
  uint64_t v16 = *(void *)(a3 + 8);
  if (!v16)
  {
LABEL_41:
    uint64_t result = 0;
    goto LABEL_42;
  }
  char v17 = 0;
  uint64_t v27 = a1 + 2208;
  do
  {
    uint64_t v18 = *(unsigned __int8 **)(v16 + 24);
    int v19 = v18[16];
    if (v18 && v19 == 61)
    {
      unsigned int v20 = (unsigned char *)*((void *)v18 - 8);
      if (*(unsigned char *)(*(void *)v20 + 8) != 15 && (a5 & 1) == 0 && v20[16] != 75)
      {
        LOBYTE(v19) = 61;
LABEL_28:
        unsigned int v22 = (((v19 - 75) >> 1) | (((_BYTE)v19 - 75) << 7));
        BOOL v23 = v22 > 5;
        int v24 = (1 << v22) & 0x33;
        if (v23 || v24 == 0) {
          *a6 |= a5 ^ 1;
        }
        else {
          char v17 = sub_22B23DBF4(a1, a2, v18, a4, a5, a6);
        }
        goto LABEL_33;
      }
    }
    else
    {
      if (!v18 || v19 != 60) {
        goto LABEL_28;
      }
      if (*(unsigned char *)(*(void *)v18 + 8) != 15 && a5 == 0)
      {
        LOBYTE(v19) = 60;
        goto LABEL_28;
      }
      if ((sub_22B23DBF4(a1, a2, *(void *)(v16 + 24), a4, a5, a6) & 1) == 0)
      {
        LOBYTE(v19) = v18[16];
        goto LABEL_28;
      }
    }
    if ((a5 & 1) == 0) {
      *sub_22B23DE14(v27, (uint64_t)v18) = a2;
    }
    char v17 = 1;
LABEL_33:
    uint64_t v16 = *(void *)(v16 + 8);
  }
  while (v16);
  if ((v17 & 1) == 0) {
    goto LABEL_41;
  }
  if (*(unsigned char *)(a3 + 16) == 62) {
    *sub_22B23DE14(v27, a3) = a2;
  }
  uint64_t result = 1;
LABEL_42:
  --*(_DWORD *)(a4 + 8);
  return result;
}

void *sub_22B23DE14(uint64_t a1, uint64_t a2)
{
  sub_22B22A84C(&v7, a2);
  uint64_t v7 = &unk_26DE79C18;
  uint64_t v10 = a1;
  unsigned int v11 = 0;
  char v3 = sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)sub_22B238028(a1, (uint64_t)&v7, (uint64_t)v11);
    sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

uint64_t sub_22B23DEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
  }
  sub_22B230B5C();
  return sub_22B23DF2C();
}

void sub_22B23DF2C(uint64_t *a1, int **a2)
{
  v35[8] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  int v4 = **a2;
  if ((v4 - 3) < 0xFFFFFFFE)
  {
    switch(v4)
    {
      case 0:
        uint64_t v5 = a1[1];
        uint64_t v6 = llvm::ConstantInt::get();
        sub_22B1D6788(v5, v6);
        sub_22B23DEDC(*(void *)(a1[3] + 24), *((void *)v3 + 1));
        goto LABEL_9;
      case 3:
        sub_22B1D6788(a1[1], 0);
        if (v3[4])
        {
          unint64_t v9 = 0;
          do
          {
            *(void *)(*(void *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
            sub_22B23DEDC(*(void *)(a1[3] + 24), *((void *)v3 + 1));
            ++v9;
          }
          while (v9 < v3[4]);
        }
        goto LABEL_9;
      case 4:
        unint64_t v10 = llvm::DataLayout::getIndexedOffsetInType() << 32;
        if (*((unsigned char *)v3 + 268))
        {
          v10 |= v3[66];
          sub_22B232128(a1[5], v10, 8);
        }
        uint64_t v11 = *((void *)v3 + 30);
        if (!v11)
        {
          int v24 = 0;
          long long v25 = 0u;
          *(_OWORD *)std::string __p = 0u;
          int v27 = 1065353216;
          goto LABEL_53;
        }
        uint64_t v33 = v35;
        uint64_t v34 = 0x800000000;
        uint64_t v28 = v32;
        uint64_t v29 = v32;
        uint64_t v30 = 8;
        int v31 = 0;
        long long v25 = 0u;
        *(_OWORD *)std::string __p = 0u;
        int v27 = 1065353216;
LABEL_19:
        sub_22B1D6788((uint64_t)&v33, v11);
        break;
      case 5:
        if (*((unsigned char *)v3 + 244))
        {
          uint64_t v18 = v3[60];
          uint64_t IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType();
          uint64_t v20 = a1[5];
          sub_22B232128(v20, v18 | (IndexedOffsetInType << 32), 8);
        }
        return;
      default:
        return;
    }
    while (1)
    {
      while (1)
      {
        if (!v34)
        {
          if (v29 != v28) {
            free(v29);
          }
          if (v33 != v35) {
            free(v33);
          }
          uint64_t v21 = (void **)__p[0];
          if (__p[0])
          {
            do
            {
              unint64_t v10 = v10 & 0xFFFFFFFF00000000 | *((unsigned int *)v21 + 4);
              sub_22B232128(a1[5], v10, 0x100000008);
              uint64_t v21 = (void **)*v21;
            }
            while (v21);
            unsigned int v22 = __p[0];
            if (__p[0])
            {
              do
              {
                BOOL v23 = (void *)*v22;
                operator delete(v22);
                unsigned int v22 = v23;
              }
              while (v23);
            }
          }
          int v24 = (void *)v25;
LABEL_53:
          *(void *)&long long v25 = 0;
          if (v24) {
            operator delete(v24);
          }
          return;
        }
        uint64_t v12 = (unsigned int *)*((void *)v33 + v34 - 1);
        LODWORD(v34) = v34 - 1;
        int v13 = *v12;
        if (*v12 == 2) {
          break;
        }
LABEL_24:
        if ((v13 - 3) >= 0xFFFFFFFE)
        {
          uint64_t v15 = v12[4];
          if (v15)
          {
            uint64_t v16 = (uint64_t *)*((void *)v12 + 1);
            uint64_t v17 = 8 * v15;
            do
            {
              if (*v16) {
                sub_22B1D6788((uint64_t)&v33, *v16);
              }
              ++v16;
              v17 -= 8;
            }
            while (v17);
          }
        }
        else
        {
          switch(v13)
          {
            case 0:
            case 3:
              uint64_t v11 = *((void *)v12 + 1);
              goto LABEL_19;
            case 4:
              if (*((unsigned char *)v12 + 268)) {
                sub_22B23E3F0((float *)&v25, v12[66], v12[66]);
              }
              uint64_t v11 = *((void *)v12 + 30);
              if (v11) {
                goto LABEL_19;
              }
              break;
            case 5:
              if (*((unsigned char *)v12 + 244)) {
                sub_22B23E3F0((float *)&v25, v12[60], v12[60]);
              }
              break;
            default:
              continue;
          }
        }
      }
      sub_22B231704((uint64_t)&v28, v12);
      if (v14)
      {
        int v13 = *v12;
        goto LABEL_24;
      }
    }
  }
  sub_22B1D6788(a1[1], 0);
  unint64_t v7 = v3[4];
  if (v7)
  {
    for (unint64_t i = 0; i < v7; ++i)
    {
      if (*(void *)(*((void *)v3 + 1) + 8 * i))
      {
        *(void *)(*(void *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
        sub_22B23DEDC(*(void *)(a1[3] + 24), *(void *)(*((void *)v3 + 1) + 8 * i));
        unint64_t v7 = v3[4];
      }
    }
  }
LABEL_9:
  --*(_DWORD *)(a1[1] + 8);
}

void sub_22B23E3F0(float *a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_22B1E33E4();
          }
          int v19 = operator new(8 * *(void *)&prime);
          uint64_t v20 = *(void **)a1;
          *(void *)a1 = v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          unsigned int v22 = (void *)*((void *)a1 + 2);
          if (v22)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
            uint64_t v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v29))
                  {
                    *(void *)(*(void *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *unsigned int v22 = *v28;
                  *uint64_t v28 = **(void **)(*(void *)a1 + 8 * v29);
                  **(void **)(*(void *)a1 + 8 * v29) = v28;
                  uint64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                unsigned int v22 = v28;
                uint64_t v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v34 = *(void **)a1;
        *(void *)a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *(void **)a1;
  int v31 = *(void **)(*(void *)a1 + 8 * v3);
  if (v31)
  {
    *uint64_t v12 = *v31;
LABEL_72:
    *int v31 = v12;
    goto LABEL_73;
  }
  uint64_t v32 = *((void *)a1 + 2);
  *uint64_t v12 = v32;
  *((void *)a1 + 2) = v12;
  v30[v3] = a1 + 4;
  if (v32)
  {
    unint64_t v33 = *(void *)(v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    int v31 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

__n128 sub_22B23E7C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26DE79D00;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_22B23E7FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26DE79D00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void sub_22B23E858()
{
}

uint64_t sub_22B23E870(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    uint64_t v5 = *(void **)result;
    do
    {
      *v5++ = a3;
      --v4;
    }
    while (v4);
  }
  unint64_t v6 = v3 - a2;
  if (v3 < a2)
  {
    unint64_t v7 = (void *)(*(void *)result + 8 * v3);
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void *sub_22B23E924(void *result, llvm::Instruction *this)
{
  unint64_t v3 = result;
  uint64_t v4 = **(void **)(*(void *)this + 16);
  if (*(unsigned char *)(v4 + 8) == 15
    || (__n128 result = (void *)llvm::Type::isIntegerTy(**(llvm::Type ***)(*(void *)this + 16)), result))
  {
    uint64_t v5 = *((void *)this + 1);
    if (!v5) {
      return (void *)llvm::Instruction::eraseFromParent(this);
    }
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this - 4);
    do
    {
      uint8x8_t v8 = *(llvm::Instruction **)(v5 + 24);
      uint64_t v5 = *(void *)(v5 + 8);
      if (v8 && *((unsigned char *)v8 + 16) == 60)
      {
        if (!v6)
        {
          uint64_t v9 = *(void *)(*v3 - 24);
          __int16 v14 = 257;
          uint64_t v10 = sub_22B1D4240((void *)((char *)v3 + v9 + 8), **(llvm::Type ***)(*(void *)v7 + 16), v7, 0, (uint64_t)v13);
          uint64_t v11 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
          if (*(unsigned char *)(v4 + 8) == 15)
          {
            __int16 v14 = 257;
            uint64_t v12 = 49;
          }
          else
          {
            __int16 v14 = 257;
            uint64_t v12 = 47;
          }
          uint64_t v6 = sub_22B1D7384(v11, v12, v10, v4, (uint64_t)v13);
        }
        llvm::Value::replaceAllUsesWith();
        __n128 result = (void *)llvm::Instruction::eraseFromParent(v8);
      }
    }
    while (v5);
    if (!*((void *)this + 1)) {
      return (void *)llvm::Instruction::eraseFromParent(this);
    }
  }
  return result;
}

void sub_22B23EA80(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v5;
      uint64_t v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v43 = (char *)sub_22B216148(v42);
          uint64_t v45 = &v43[8 * (v42 >> 2)];
          char v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            unsigned int v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)unsigned int v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          long long v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            unint64_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            unint64_t v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    unint64_t v25 = (char *)a1[3];
    uint8x8_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      unint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          uint64_t v54 = (char *)sub_22B216148(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v56 = (uint64_t *)a1[1];
          unint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            unint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            unint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)unint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          uint64_t v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        uint64_t v63 = (char *)a1[1];
        char v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v64[-*a1] >> 2;
            }
            int v99 = (char *)sub_22B216148(v98);
            unint64_t v101 = &v99[8 * (v98 >> 2)];
            unint64_t v102 = (uint64_t *)a1[1];
            char v64 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              char v64 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              uint64_t v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)uint64_t v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            uint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v64;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              char v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            uint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            char v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)char v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    int v31 = (char *)sub_22B216148(v30);
    uint64_t v33 = v32;
    uint64_t v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v111 = v35;
    *(void *)&long long v35 = v34;
    *((void *)&v35 + 1) = &v31[8 * v32];
    long long v108 = v35;
    uint64_t v36 = operator new(0x1000uLL);
    if (v24 == v33)
    {
      uint64_t v37 = 8 * v24;
      if (v6 >= 1)
      {
        uint64_t v38 = v37 >> 3;
        if (v38 >= -1) {
          unint64_t v39 = v38 + 1;
        }
        else {
          unint64_t v39 = v38 + 2;
        }
        v34 -= 8 * (v39 >> 1);
        *((void *)&v40 + 1) = *((void *)&v108 + 1);
        *(void *)&long long v41 = v111;
        *(void *)&long long v40 = v34;
        *((void *)&v41 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      uint64_t v76 = (char *)sub_22B216148(v75);
      uint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v41 = v76;
      *((void *)&v41 + 1) = v34;
      *(void *)&long long v40 = v34;
      *((void *)&v40 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v108 = v40;
      long long v111 = v41;
      operator delete(v31);
    }
    long long v40 = v108;
    long long v41 = v111;
LABEL_56:
    *(void *)uint64_t v34 = v36;
    *(void *)&long long v40 = v40 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      unint64_t v79 = (void *)*((void *)&v41 + 1);
      if (*((void *)&v41 + 1) == (void)v41)
      {
        uint64_t v81 = (unsigned char *)v40;
        if ((unint64_t)v40 >= *((void *)&v40 + 1))
        {
          if (*((void *)&v40 + 1) == *((void *)&v41 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v40 + 1) - *((void *)&v41 + 1)) >> 2;
          }
          uint64_t v87 = 2 * v86;
          uint64_t v88 = (char *)sub_22B216148(v86);
          unint64_t v80 = &v88[(v87 + 6) & 0xFFFFFFFFFFFFFFF8];
          BOOL v90 = v80;
          uint64_t v91 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            BOOL v90 = &v80[v91 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v92 = 8 * (v91 >> 3);
            uint64_t v93 = v80;
            uint64_t v94 = v79;
            do
            {
              uint64_t v95 = *v94++;
              *(void *)uint64_t v93 = v95;
              v93 += 8;
              v92 -= 8;
            }
            while (v92);
          }
          *(void *)&long long v41 = v88;
          *((void *)&v41 + 1) = v80;
          *(void *)&long long v40 = v90;
          *((void *)&v40 + 1) = &v88[8 * v89];
          if (v79)
          {
            long long v109 = v40;
            long long v113 = v41;
            operator delete(v79);
            long long v40 = v109;
            long long v41 = v113;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v40 + 1) - v40) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v40 + 8 * (v83 >> 1);
          unint64_t v80 = (char *)(v85 - (v40 - *((void *)&v41 + 1)));
          if ((void)v40 == *((void *)&v41 + 1))
          {
            uint64_t v81 = (unsigned char *)*((void *)&v41 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v40 + 1);
            uint64_t v112 = v41;
            memmove((void *)(v85 - (v40 - *((void *)&v41 + 1))), *((const void **)&v41 + 1), v40 - *((void *)&v41 + 1));
            *((void *)&v40 + 1) = v110;
            *(void *)&long long v41 = v112;
          }
          *((void *)&v41 + 1) = v80;
          *(void *)&long long v40 = &v81[8 * v84];
        }
      }
      else
      {
        unint64_t v80 = (char *)*((void *)&v41 + 1);
      }
      uint64_t v96 = *(void *)(i - 8);
      *((void *)v80 - 1) = v96;
      *((void *)&v41 + 1) -= 8;
    }
    uint64_t v97 = (char *)*a1;
    *(_OWORD *)a1 = v41;
    *((_OWORD *)a1 + 1) = v40;
    if (v97) {
      operator delete(v97);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void *sub_22B23EFCC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_22B23F050(uint64_t result, char *a2, char *a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 8;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 3);
  return result;
}

void sub_22B23F0D4()
{
}

uint64_t sub_22B23F17C(void *a1, unint64_t *a2, unsigned int a3, unsigned int a4, char a5, unsigned __int8 **a6)
{
  uint64_t v8 = a2;
  v100[32] = *MEMORY[0x263EF8340];
  unint64_t v10 = *a2;
  if (a5)
  {
    if (*(unsigned char *)(v10 + 8) != 15) {
      return 0;
    }
    uint64_t v77 = **(llvm::Type ***)(v10 + 16);
    unint64_t v11 = **((void **)v77 + 2);
    unint64_t v89 = v11;
    if (*(unsigned char *)(v11 + 8) == 16) {
      unint64_t v89 = **(void **)(v11 + 16);
    }
    unint64_t __src = a2;
    unint64_t v98 = v100;
    uint64_t v99 = 0x2000000000;
    sub_22B1D8088((unsigned int *)&v98, &__src, &v96);
    unint64_t v79 = (llvm::Value *)v8;
    while (1)
    {
      uint64_t v8 = (unint64_t *)v8[1];
      if (!v8) {
        break;
      }
      uint64_t v12 = v8[3];
      if (*(unsigned char *)(v12 + 16) == 77) {
        sub_22B1D6788((uint64_t)&v98, v12);
      }
    }
    unsigned int v20 = a3;
    unint64_t __src = v97;
    uint64_t v96 = 0x2000000000;
    if (v99)
    {
      uint64_t v21 = (uint64_t *)v98;
      int64_t v22 = (uint64_t *)((char *)v98 + 8 * v99);
      unint64_t v23 = a4;
      unint64_t v85 = v11;
      unint64_t v86 = a6;
      unint64_t v80 = v22;
      while (1)
      {
        uint64_t v24 = *(uint64_t **)(*(void *)*v21 + 16);
        uint64_t v25 = *v24;
        int v26 = *(unsigned __int8 *)(*v24 + 8);
        if (*v24) {
          BOOL v27 = v26 == 16;
        }
        else {
          BOOL v27 = 0;
        }
        if (v27)
        {
          if (*(_DWORD *)(v25 + 12) != 1) {
            goto LABEL_87;
          }
          int v29 = *(unsigned __int8 *)(**(void **)(v25 + 16) + 8);
          BOOL v27 = v29 == 15;
          unsigned int v28 = v29 != 15;
          if (!v27) {
            uint64_t v25 = **(void **)(v25 + 16);
          }
          int v26 = *(unsigned __int8 *)(v25 + 8);
        }
        else
        {
          unsigned int v28 = 0;
        }
        if (v26 == 17) {
          uint64_t v30 = v25;
        }
        else {
          uint64_t v30 = 0;
        }
        if (v30)
        {
          if (*(void *)(v30 + 32) > v23) {
            goto LABEL_87;
          }
          uint64_t v25 = **(void **)(v30 + 16);
          ++v28;
          int v26 = *(unsigned __int8 *)(v25 + 8);
        }
        if (v26 == 16) {
          uint64_t v31 = v25;
        }
        else {
          uint64_t v31 = 0;
        }
        if (!v31)
        {
          unsigned int v32 = v28 + 1;
LABEL_41:
          if (v30 | v31) {
            BOOL v33 = v25 == v89;
          }
          else {
            BOOL v33 = 0;
          }
          if (v33)
          {
            uint64_t v87 = v31;
            uint64_t v84 = v28 + 1;
            uint64_t v81 = *v21;
            uint64_t v34 = *(void *)(*v21 + 8);
            if (v34)
            {
              uint64_t v83 = v28;
              unsigned int v88 = v32;
              do
              {
                uint64_t v35 = *(void *)(v34 + 24);
                if (v35 && *(unsigned char *)(v35 + 16) == 62)
                {
                  uint64_t v36 = *(_DWORD *)(v35 + 20) & 0x7FFFFFF;
                  uint64_t v37 = (v36 - 1);
                  uint64_t v38 = **(void **)(*(void *)v35 + 16);
                  if ((v38 != v89 || v37 == v32) && (v38 != v87 || v36 == v32))
                  {
                    if (v36 == 1)
                    {
LABEL_69:
                      sub_22B1FFC54((uint64_t)a1 + *(void *)(*a1 - 24) + 8, v35);
                      uint64_t v47 = *(void *)(v35 - 32 * (*(_DWORD *)(v35 + 20) & 0x7FFFFFF) + 32 * v84);
                      uint64_t v48 = *(void *)(*a1 - 24);
                      uint64_t v49 = *(void *)((char *)a1 + v48 + 192);
                      __int16 v93 = 257;
                      uint64_t v50 = sub_22B1D77F0((uint64_t)a1 + v48 + 8, v47, v49, 0, (uint64_t)__p);
                      if (v50) {
                        BOOL v51 = *(unsigned char *)(v50 + 16) == 16;
                      }
                      else {
                        BOOL v51 = 0;
                      }
                      unint64_t v52 = (uint64_t *)(a3 | ((unint64_t)(a3 + a4 - 1) << 32));
                      if (v51)
                      {
                        uint64_t v53 = (void *)(v50 + 24);
                        if (*(_DWORD *)(v50 + 32) >= 0x41u) {
                          uint64_t v53 = (void *)*v53;
                        }
                        unint64_t v52 = (uint64_t *)((*(_DWORD *)v53 + a3) | ((unint64_t)(*(_DWORD *)v53 + a3) << 32));
                      }
                      v94[0] = v52;
                      uint64_t v54 = sub_22B23F90C(a1, v86, v85, v50, (uint64_t)v94);
                      if (v38 == v87)
                      {
                        uint64_t v55 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
                        uint64_t v56 = llvm::UndefValue::get();
                        v90[0] = 0;
                        __int16 v93 = 257;
                        sub_22B1D6D44(v55, v56, (uint64_t)v54, (uint64_t)v90, 1, (uint64_t)__p);
                      }
                      for (uint64_t i = *(void *)(v35 + 8); i; uint64_t i = *(void *)(i + 8))
                      {
                        uint64_t v58 = *(void *)(i + 24);
                        if (*(unsigned char *)(v58 + 16) == 60)
                        {
                          llvm::Value::replaceAllUsesWith();
                          sub_22B1D6788((uint64_t)&__src, v58);
                        }
                      }
                      sub_22B1D6788((uint64_t)&__src, v35);
                      unsigned int v32 = v88;
                    }
                    else
                    {
                      uint64_t v41 = v35 - 32 * v36 + 32;
                      uint64_t v42 = v83;
                      while (1)
                      {
                        if (v42)
                        {
                          uint64_t v43 = *(void *)v41;
                          if (*(unsigned char *)(*(void *)v41 + 16) != 16) {
                            break;
                          }
                          uint64_t v44 = (void *)(v43 + 24);
                          unsigned int v45 = *(_DWORD *)(v43 + 32);
                          if (v45 >= 0x41)
                          {
                            int v46 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v43 + 24));
                            unsigned int v32 = v88;
                            if (v45 - v46 > 0x40) {
                              break;
                            }
                            uint64_t v44 = (void *)*v44;
                          }
                          if (*v44) {
                            break;
                          }
                        }
                        v41 += 32;
                        --v42;
                        if (!--v37) {
                          goto LABEL_69;
                        }
                      }
                    }
                  }
                }
                uint64_t v34 = *(void *)(v34 + 8);
              }
              while (v34);
            }
            unint64_t v11 = v85;
            a6 = v86;
            int64_t v22 = v80;
            unsigned int v20 = a3;
            unint64_t v23 = a4;
            if (*(unsigned __int8 *)(v81 + 16) > 0x1Bu) {
              sub_22B1D6788((uint64_t)&__src, v81);
            }
          }
          goto LABEL_87;
        }
        if (*(_DWORD *)(v31 + 12) == 1)
        {
          uint64_t v25 = **(void **)(v31 + 16);
          unsigned int v32 = v28 + 2;
          goto LABEL_41;
        }
LABEL_87:
        if (++v21 == v22)
        {
          if (v96)
          {
            uint64_t v59 = (llvm::Instruction **)__src;
            uint64_t v60 = 8 * v96;
            do
            {
              if (!*((void *)*v59 + 1)) {
                llvm::Instruction::eraseFromParent(*v59);
              }
              ++v59;
              v60 -= 8;
            }
            while (v60);
          }
          break;
        }
      }
    }
    if (*((void *)v79 + 1))
    {
      uint64_t Name = (void *)llvm::Value::getName(v79);
      if (Name)
      {
        uint64_t Name = sub_22B1E2118(__p, Name, v62);
        if (v92 >= 0) {
          uint64_t v69 = __p;
        }
        else {
          LOBYTE(v69) = __p[0];
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v69 = __p;
        uint64_t v92 = 0;
      }
      sub_22B1E69D0((uint64_t)Name, "!!!! Perf: Argument %s: failed to patten match the array of texture/sampler, spilling!!", v63, v64, v65, v66, v67, v68, (char)v69);
      if (SHIBYTE(v92) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v70 = sub_22B2434C8((uint64_t)a1 + *(void *)(*a1 - 24), v77);
      uint64_t v71 = v70 + 24;
      if (!v70) {
        uint64_t v71 = 0;
      }
      sub_22B1D3CF8((char **)((char *)a1 + *(void *)(*a1 - 24) + 8), *(char **)(v70 + 40), *(char **)(v71 + 8));
      if (a4)
      {
        uint64_t v72 = 0;
        do
        {
          v90[0] = v20 + v72;
          v90[1] = v20 + v72;
          uint64_t v73 = (uint64_t)a1 + *(void *)(*a1 - 24);
          v94[0] = (uint64_t *)llvm::ConstantInt::get();
          v94[1] = (uint64_t *)llvm::ConstantInt::get();
          __int16 v93 = 257;
          uint64_t v74 = sub_22B229F08(v73, (uint64_t *)v70, v94, 2, (uint64_t)__p);
          uint64_t v75 = llvm::ConstantInt::get();
          uint64_t v76 = (llvm::Type **)sub_22B23F90C(a1, a6, v11, v75, (uint64_t)v90);
          sub_22B1F718C((void *)((char *)a1 + *(void *)(*a1 - 24) + 8), v76, v74, 0);
          ++v72;
        }
        while (a4 != v72);
      }
      llvm::Value::replaceAllUsesWith();
    }
    if (__src != v97) {
      free(__src);
    }
    if (v98 != v100) {
      free(v98);
    }
  }
  else
  {
    uint64_t v13 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v14 = *(void *)(a1[20] + 80);
    if (v14) {
      uint64_t v15 = v14 - 24;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void *)(v15 + 40);
    if (v16) {
      uint64_t v17 = v16 - 24;
    }
    else {
      uint64_t v17 = 0;
    }
    sub_22B1FFC54(v13, v17);
    LODWORD(v98) = a3;
    HIDWORD(v98) = a3;
    uint64_t v18 = llvm::ConstantInt::get();
    sub_22B23F90C(a1, a6, v10, v18, (uint64_t)&v98);
    llvm::Value::replaceAllUsesWith();
  }
  return 1;
}

llvm::Value *sub_22B23F90C(void *a1, unsigned __int8 **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v8 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v9 = v8[30];
  uint64_t v16 = v8[24];
  uint64_t v17 = v9;
  uint64_t v18 = v16;
  uint64_t v10 = sub_22B236E5C(a2, v8[40], a3);
  uint64_t v11 = *(void *)(*a1 - 24);
  v15[0] = a4;
  uint64_t v12 = (llvm::Type **)((char *)a1 + v11 + 8);
  v15[1] = sub_22B1E359C(a5, v12);
  void v15[2] = llvm::ConstantInt::get();
  v14[16] = 257;
  return sub_22B1D4034((uint64_t)v12, *(void *)(v10 + 24), v10, (uint64_t)v15, 3, (uint64_t)v14);
}

void sub_22B23FA40(void *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  v148[16] = *MEMORY[0x263EF8340];
  uint64_t v146 = (char *)v148;
  uint64_t v147 = 0x1000000000;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    unsigned int v6 = 0;
    do
    {
      if (v6 >= HIDWORD(v147)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)&v146[8 * v6] = *(void *)(v4 + 24);
      unsigned int v6 = v147 + 1;
      LODWORD(v147) = v147 + 1;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
    uint64_t v7 = v146;
    if (v6)
    {
      long long v129 = a1 + 1;
      uint64_t v130 = &v146[8 * v6];
      uint64_t v128 = a3;
      uint64_t v8 = 32 * a3;
      unsigned int v9 = a4;
      uint64_t v127 = v8;
      while (1)
      {
        uint64_t v10 = *(void *)v7;
        uint64_t v11 = *(void *)v7 - 32 * (*(_DWORD *)(*(void *)v7 + 20) & 0x7FFFFFF);
        if (v9) {
          uint64_t v12 = *(llvm::Instruction **)(v11 + 32 * a4);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(void *)(v11 + v8);
        if (*(unsigned char *)(v13 + 16) != 83) {
          goto LABEL_67;
        }
        uint64_t v14 = *(llvm::BasicBlock **)(v10 + 40);
        uint64_t v15 = *((void *)v14 + 1);
        if (v15) {
          break;
        }
LABEL_65:
        llvm::UndefValue::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
LABEL_66:
        uint64_t v8 = v127;
LABEL_67:
        v7 += 8;
        if (v7 == v130)
        {
          uint64_t v7 = v146;
          goto LABEL_241;
        }
      }
      uint64_t v16 = *((void *)v14 + 1);
      while (1)
      {
        uint64_t v17 = *(void *)(v16 + 24);
        unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
        BOOL v19 = v17 && v18 >= 0x1C;
        if (v19 && v18 - 29 <= 0xA) {
          break;
        }
        uint64_t v16 = *(void *)(v16 + 8);
        if (!v16)
        {
LABEL_56:
          while (1)
          {
            uint64_t v36 = *(void *)(v15 + 24);
            unsigned int v37 = *(unsigned __int8 *)(v36 + 16);
            BOOL v38 = v36 && v37 >= 0x1C;
            if (v38 && v37 - 29 < 0xB) {
              break;
            }
            uint64_t v15 = *(void *)(v15 + 8);
            if (!v15) {
              goto LABEL_65;
            }
          }
          if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) != 1)
          {
            if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl(&dword_22B1D2000, MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT, "All predecessors of the indirect sampler call have an unconditional branch, may need more code changes to handle this", buf, 2u);
            }
            abort();
          }
          uint64_t v8 = v127;
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v13);
          if (v12)
          {
            if (*((unsigned char *)v12 + 16) == 83) {
              long long v40 = v12;
            }
            else {
              long long v40 = 0;
            }
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v40);
          }
          goto LABEL_67;
        }
      }
      uint64_t v21 = 0;
LABEL_25:
      uint64_t v22 = *(void *)(v17 + 40);
      uint64_t v23 = *(void *)(v22 + 40);
      if (v23 == v22 + 40
        || ((uint64_t v24 = v23 - 24, v23) ? (v25 = v23 - 24) : (v25 = 0),
            (unsigned int v26 = *(unsigned __int8 *)(v25 + 16) - 40, v27 = __CFADD__(v26, 11), v26 >= 0xFFFFFFF5)
          ? (uint64_t v28 = v24)
          : (uint64_t v28 = 0),
            v27 ? (BOOL v29 = *(unsigned char *)(v28 + 16) == 30) : (BOOL v29 = 0),
            !v29 || (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) != 1))
      {
        uint64_t v21 = v22;
      }
      while (1)
      {
        uint64_t v16 = *(void *)(v16 + 8);
        if (!v16) {
          break;
        }
        uint64_t v17 = *(void *)(v16 + 24);
        unsigned int v30 = *(unsigned __int8 *)(v17 + 16);
        if (v17) {
          BOOL v31 = v30 >= 0x1C;
        }
        else {
          BOOL v31 = 0;
        }
        if (v31 && v30 - 29 < 0xB) {
          goto LABEL_25;
        }
      }
      if (!v21) {
        goto LABEL_56;
      }
      BOOL v33 = *(void **)(v21 + 40);
      if (v33 == (void *)(v21 + 40))
      {
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v34 = v33 - 3;
        if (v33) {
          uint64_t v35 = v33 - 3;
        }
        else {
          uint64_t v35 = 0;
        }
        if (*((unsigned __int8 *)v35 + 16) - 29 >= 0xB) {
          uint64_t v34 = 0;
        }
      }
      int v41 = *((_DWORD *)v34 + 5);
      if ((v41 & 0x7FFFFFF) != 0)
      {
        uint64_t v42 = (v41 & 0x40000000) != 0
            ? (llvm::Instruction **)*(v34 - 1)
            : (llvm::Instruction **)&v34[-4 * (v41 & 0x7FFFFFF)];
        uint64_t v43 = *v42;
        if (*((unsigned char *)*v42 + 16) == 60)
        {
          uint64_t v44 = (unsigned char *)*((void *)v43 - 4);
          unsigned int v45 = *(_DWORD *)(*(void *)v44 + 8);
          if ((v45 & 0xFE) == 0x12) {
            unsigned int v45 = *(_DWORD *)(**(void **)(*(void *)v44 + 16) + 8);
          }
          if (v45 <= 0xFF && v44[16] == 59)
          {
            while (1)
            {
              int v46 = (llvm::Instruction *)(v33 - 3);
              if (!v33) {
                int v46 = 0;
              }
              if (v46 == v43) {
                break;
              }
              BOOL v33 = (void *)*v33;
            }
            while (v33 != (void *)(v21 + 40))
            {
              if (v33) {
                uint64_t v47 = v33 - 3;
              }
              else {
                uint64_t v47 = 0;
              }
              if (v33 && *((unsigned char *)v47 + 16) == 61)
              {
                uint64_t v48 = (unsigned char *)*(v47 - 4);
                if (v48 == v44)
                {
                  llvm::Value::replaceAllUsesWith();
                  llvm::Instruction::eraseFromParent(v43);
                  llvm::ConstantFoldTerminator();
                  uint64_t v15 = *((void *)v14 + 1);
                  break;
                }
                unsigned int v49 = *(_DWORD *)(*(void *)v48 + 8);
                if ((v49 & 0xFE) == 0x12) {
                  unsigned int v49 = *(_DWORD *)(**(void **)(*(void *)v48 + 16) + 8);
                }
                if (v49 <= 0xFF && v48[16] != 59) {
                  break;
                }
              }
              BOOL v33 = (void *)*v33;
            }
          }
        }
      }
      if (v15)
      {
        while (1)
        {
          uint64_t v50 = *(void *)(v15 + 24);
          unsigned int v51 = *(unsigned __int8 *)(v50 + 16);
          BOOL v52 = v50 && v51 >= 0x1C;
          if (v52 && v51 - 29 <= 0xA) {
            break;
          }
          uint64_t v15 = *(void *)(v15 + 8);
          if (!v15) {
            goto LABEL_140;
          }
        }
        do
        {
          uint64_t v54 = v15;
          do
          {
            uint64_t v15 = *(void *)(v15 + 8);
            if (!v15) {
              break;
            }
            uint64_t v55 = *(void *)(v15 + 24);
            unsigned int v56 = *(unsigned __int8 *)(v55 + 16);
            BOOL v57 = v55 && v56 >= 0x1C;
          }
          while (!v57 || v56 - 29 >= 0xB);
          uint64_t v59 = *(llvm::BasicBlock **)(*(void *)(v54 + 24) + 40);
          uint64_t v60 = *((void *)v59 + 1);
          if (v60)
          {
            while (1)
            {
              uint64_t v61 = *(void *)(v60 + 24);
              unsigned int v62 = *(unsigned __int8 *)(v61 + 16);
              BOOL v63 = v61 && v62 >= 0x1C;
              if (v63 && v62 - 29 < 0xB) {
                break;
              }
              uint64_t v60 = *(void *)(v60 + 8);
              if (!v60) {
                goto LABEL_133;
              }
            }
          }
          else
          {
LABEL_133:
            uint64_t v65 = *(void *)(*((void *)v59 + 7) + 80);
            if (v65) {
              uint64_t v66 = (llvm::BasicBlock *)(v65 - 24);
            }
            else {
              uint64_t v66 = 0;
            }
            if (v59 != v66)
            {
              llvm::BasicBlock::removePredecessor(v14, v59);
              if (!*((void *)v59 + 1)) {
                llvm::BasicBlock::eraseFromParent(v59);
              }
            }
          }
        }
        while (v15);
      }
LABEL_140:
      uint64_t v67 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
      uint64_t v8 = v127;
      uint64_t v68 = *(void *)(v67 + v127);
      if (v9)
      {
        if (*(unsigned char *)(v68 + 16) != 83 || v68 == 0) {
          goto LABEL_67;
        }
        uint64_t v70 = *(void *)(v67 + 32 * a4);
        if (v70)
        {
          if (*(unsigned char *)(v70 + 16) == 83) {
            uint64_t v71 = *(llvm::Instruction **)(v67 + 32 * a4);
          }
          else {
            uint64_t v71 = 0;
          }
          goto LABEL_155;
        }
      }
      else
      {
        if (*(unsigned char *)(v68 + 16) != 83 || v68 == 0) {
          goto LABEL_67;
        }
        uint64_t v70 = 0;
      }
      uint64_t v71 = 0;
LABEL_155:
      unint64_t v73 = 0;
      long long v140 = 0u;
      long long v141 = 0u;
      *(_OWORD *)std::string __p = 0u;
      unint64_t v134 = v138;
      uint64_t v135 = v138;
      uint64_t v136 = 4;
      uint64_t v74 = v10;
      int v137 = 0;
      while (1)
      {
        uint64_t v75 = sub_22B1F50A8((llvm::CallBase *)v10);
        uint64_t v76 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
        if (v73 >= ((v75 - (v10 + 32 * (unint64_t)-(int)v76)) >> 5)) {
          break;
        }
        uint64_t v77 = *(void *)(v74 - 32 * v76);
        if (*(unsigned __int8 *)(v77 + 16) <= 0x1Bu) {
          uint64_t v78 = 0;
        }
        else {
          uint64_t v78 = (void *)v77;
        }
        v132[0] = v78;
        if (v78) {
          BOOL v79 = v78 == (void *)v68;
        }
        else {
          BOOL v79 = 1;
        }
        if (!v79 && v78 != (void *)v70 && (llvm::BasicBlock *)v78[5] == v14)
        {
          sub_22B22D8BC((uint64_t)buf, &v134, v78);
          if (v144[0]) {
            sub_22B23EA80(__p, v132);
          }
        }
        ++v73;
        v74 += 32;
      }
      uint64_t v81 = *((void *)&v141 + 1);
      if (*((void *)&v141 + 1))
      {
        unint64_t v82 = v141;
        do
        {
          uint64_t v83 = *(void *)(*(void *)((char *)__p[1] + ((v82 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v82 & 0x1FF));
          uint64_t v84 = *(_DWORD *)(v83 + 20) & 0x7FFFFFF;
          if (v84)
          {
            uint64_t v85 = 0;
            uint64_t v86 = 32 * v84;
            do
            {
              int v87 = *(_DWORD *)(v83 + 20);
              if ((v87 & 0x40000000) != 0) {
                uint64_t v88 = *(void *)(v83 - 8);
              }
              else {
                uint64_t v88 = v83 - 32 * (v87 & 0x7FFFFFF);
              }
              uint64_t v89 = *(void *)(v88 + v85);
              if (*(unsigned __int8 *)(v89 + 16) <= 0x1Bu) {
                BOOL v90 = 0;
              }
              else {
                BOOL v90 = (void *)v89;
              }
              v132[0] = v90;
              if (v90)
              {
                if ((llvm::BasicBlock *)v90[5] == v14)
                {
                  sub_22B22D8BC((uint64_t)buf, &v134, v90);
                  if (v144[0]) {
                    sub_22B23EA80(__p, v132);
                  }
                }
              }
              v85 += 32;
            }
            while (v86 != v85);
            uint64_t v81 = *((void *)&v141 + 1);
            unint64_t v82 = v141;
          }
          --v81;
          *(void *)&long long v141 = ++v82;
          *((void *)&v141 + 1) = v81;
          if (v82 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            unint64_t v82 = v141 - 512;
            __p[1] = (char *)__p[1] + 8;
            *(void *)&long long v141 = v141 - 512;
            uint64_t v81 = *((void *)&v141 + 1);
          }
        }
        while (v81);
      }
      uint64_t v91 = (void *)*((void *)v14 + 6);
      if (v91 != (void *)((char *)v14 + 40))
      {
        do
        {
          if (HIDWORD(v136) == v137) {
            break;
          }
          uint64_t v92 = (void *)v91[1];
          if (v91) {
            __int16 v93 = v91 - 3;
          }
          else {
            __int16 v93 = 0;
          }
          if (sub_22B2307C8((uint64_t)&v134, v93)) {
            llvm::Instruction::moveBefore();
          }
          uint64_t v91 = v92;
        }
        while (v92 != (void *)((char *)v14 + 40));
      }
      uint64_t v94 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v10 + 40));
      sub_22B1FFC54(v94, FirstNonPHI);
      uint64_t v96 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v97 = *(void *)v10;
      int v98 = *(_DWORD *)(v68 + 20) & 0x7FFFFFF;
      __int16 v145 = 257;
      uint64_t v99 = sub_22B1F8D80(v96, v97, v98, (uint64_t)buf);
      unint64_t v100 = 0;
      *(void *)std::string buf = v144;
      uint64_t v143 = 0x1000000000;
      for (uint64_t i = v10; ; i += 32)
      {
        uint64_t v102 = sub_22B1F50A8((llvm::CallBase *)v10);
        uint64_t v103 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
        if (v100 >= ((v102 - (v10 + 32 * (unint64_t)-(int)v103)) >> 5)) {
          break;
        }
        sub_22B1D6788((uint64_t)buf, *(void *)(i - 32 * v103));
        ++v100;
      }
      int v104 = *(_DWORD *)(v68 + 20);
      if ((v104 & 0x40000000) != 0)
      {
        uint64_t v106 = *(void *)(v68 - 8);
        uint64_t v107 = *(unsigned int *)(v68 + 60);
        long long v108 = (uint64_t *)(v106 + 32 * v107);
        uint64_t v105 = v104 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v105 = v104 & 0x7FFFFFF;
        uint64_t v106 = v68 - 32 * v105;
        uint64_t v107 = *(unsigned int *)(v68 + 60);
        long long v108 = (uint64_t *)(v106 + 32 * v107);
      }
      uint64_t v109 = v106 + 32 * v107 + 8 * v105;
      while (v108 != (uint64_t *)v109)
      {
        uint64_t v110 = *v108;
        uint64_t v111 = *(void *)(*v108 + 40);
        if (v111 == *v108 + 40)
        {
          uint64_t v114 = 0;
        }
        else
        {
          uint64_t v112 = v111 - 24;
          if (v111) {
            uint64_t v113 = v111 - 24;
          }
          else {
            uint64_t v113 = 0;
          }
          if (*(unsigned __int8 *)(v113 + 16) - 29 >= 0xB) {
            uint64_t v114 = 0;
          }
          else {
            uint64_t v114 = v112;
          }
        }
        sub_22B1FFC54((uint64_t)a1 + *(void *)(*a1 - 24) + 8, v114);
        uint64_t v115 = sub_22B240528(v68, v110);
        uint64_t v116 = v115;
        if (v71)
        {
          uint64_t v117 = sub_22B240528((uint64_t)v71, v110);
          *(void *)(*(void *)buf + 8 * v128) = v116;
          if (v117) {
            *(void *)(*(void *)buf + 8 * a4) = v117;
          }
        }
        else
        {
          *(void *)(*(void *)buf + 8 * v128) = v115;
        }
        uint64_t v118 = (uint64_t)v129 + *(void *)(*a1 - 24);
        __int16 v133 = 257;
        uint64_t v119 = sub_22B1D4034(v118, *(void *)(a2 + 24), a2, *(uint64_t *)buf, v143, (uint64_t)v132);
        sub_22B1F8E8C(v99, (uint64_t)v119, v110);
        ++v108;
      }
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
      if (!*(void *)(v68 + 8)) {
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v68);
      }
      unsigned int v9 = a4;
      if (v71 && !*((void *)v71 + 1)) {
        llvm::Instruction::eraseFromParent(v71);
      }
      if (*(unsigned char **)buf != v144) {
        free(*(void **)buf);
      }
      if (v135 != v134) {
        free(v135);
      }
      uint64_t v120 = (void **)__p[1];
      uint64_t v121 = (void **)v140;
      *((void *)&v141 + 1) = 0;
      unint64_t v122 = v140 - (unint64_t)__p[1];
      if ((unint64_t)v140 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          operator delete(*v120);
          uint64_t v121 = (void **)v140;
          uint64_t v120 = (void **)((char *)__p[1] + 8);
          __p[1] = v120;
          unint64_t v122 = v140 - (void)v120;
        }
        while ((void)v140 - (void)v120 > 0x10uLL);
      }
      unint64_t v123 = v122 >> 3;
      if (v123 == 1)
      {
        uint64_t v124 = 256;
      }
      else
      {
        if (v123 != 2) {
          goto LABEL_235;
        }
        uint64_t v124 = 512;
      }
      *(void *)&long long v141 = v124;
LABEL_235:
      if (v120 != v121)
      {
        do
        {
          uint64_t v125 = *v120++;
          operator delete(v125);
        }
        while (v120 != v121);
        if ((void *)v140 != __p[1]) {
          *(void *)&long long v140 = v140 + (((unint64_t)__p[1] - v140 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
      goto LABEL_66;
    }
LABEL_241:
    if (v7 != (char *)v148) {
      free(v7);
    }
  }
}

uint64_t sub_22B240528(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = a1 - 32 * v3;
      if ((v2 & 0x40000000) != 0) {
        uint64_t v5 = *(void *)(a1 - 8);
      }
      if (*(void *)(v5 + 32 * *(unsigned int *)(a1 + 60) + 8 * v4) == a2) {
        break;
      }
      if (v3 == ++v4) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LODWORD(v4) = -1;
  }
  if ((v2 & 0x40000000) != 0) {
    uint64_t v6 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v6 = a1 - 32 * v3;
  }
  return *(void *)(v6 + 32 * v4);
}

void sub_22B240594(void *a1)
{
  sub_22B1F5178();
  sub_22B2259A8();
  uint64_t v2 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 320);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      uint64_t v5 = (llvm::Value *)(v4 - 56);
      BOOL v8 = v4 == 0;
      uint64_t v4 = *(void *)(v4 + 8);
      if (v8) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v5;
      }
      llvm::Value::getName(v6);
      int Key = llvm::StringMapImpl::FindKey();
      BOOL v8 = Key == -1 || Key == (unint64_t)dword_2683E9250;
      if (v8)
      {
        llvm::Value::getName(v6);
        int v9 = llvm::StringMapImpl::FindKey();
        if (v9 == -1 || v9 == (unint64_t)dword_2683E9158) {
          continue;
        }
        uint64_t v13 = a1;
        uint64_t v14 = (uint64_t)v6;
        unsigned int v11 = 0;
        unsigned int v12 = 0;
      }
      else
      {
        uint64_t v10 = *(void *)(qword_2683E9248 + 8 * Key);
        unsigned int v11 = *(unsigned __int8 *)(v10 + 30);
        unsigned int v12 = *(unsigned __int8 *)(v10 + 31);
        uint64_t v13 = a1;
        uint64_t v14 = (uint64_t)v6;
      }
      sub_22B23FA40(v13, v14, v11, v12);
    }
    while (v4 != v3);
  }
}

void sub_22B2406C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 10))
  {
    sub_22B240594((void *)a1);
  }
  else
  {
    uint64_t v1 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v2 = *(void *)(v1 + 400);
    uint64_t v3 = *(llvm::Module **)(v1 + 320);
    sub_22B1EB138(v2);
    uint64_t v4 = *(llvm::legacy::PassManager **)(v2 + 336);
    llvm::legacy::PassManager::run(v4, v3);
  }
}

uint64_t sub_22B240748(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 792);
  uint64_t v3 = *(void *)(a1 + 808);
  uint64_t v4 = *(void *)(a1 + 816);
  unsigned int v37 = *(uint64_t **)(a1 + 784);
  if (v37 == v2)
  {
    int v20 = 0;
  }
  else
  {
    uint64_t v34 = *(void *)(a1 + 816);
    uint64_t v35 = *(void *)(a1 + 808);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    BOOL v8 = *(uint64_t **)(a1 + 784);
    do
    {
      uint64_t v38 = *v8;
      int v9 = sub_22B1EF298((uint64_t)&v38, a1 + 704 + *(void *)(*(void *)a1 - 24));
      int v10 = v9;
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v11 = (v6 - v5) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v7 - (void)v5) >> 1 > v12) {
          unint64_t v12 = (uint64_t)(v7 - (void)v5) >> 1;
        }
        if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_22B1EDE8C(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (char *)(v13 + 4 * v11);
        *(_DWORD *)uint64_t v15 = v10;
        uint64_t v16 = v15 + 4;
        while (v6 != v5)
        {
          int v17 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v17;
          v15 -= 4;
        }
        unint64_t v7 = v13 + 4 * v14;
        if (v5) {
          operator delete(v5);
        }
        uint64_t v5 = v15;
        uint64_t v6 = v16;
      }
      else
      {
        *(_DWORD *)uint64_t v6 = v9;
        v6 += 4;
      }
      ++v8;
    }
    while (v8 != v2);
    if (v6 == v5) {
      unsigned int v18 = (char *)&unk_2683E9240;
    }
    else {
      unsigned int v18 = v5;
    }
    int v19 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v18, (v6 - v5) >> 2);
    if (v5) {
      operator delete(v5);
    }
    int v20 = v19;
    uint64_t v4 = v34;
    uint64_t v3 = v35;
  }
  if (v3 == v4)
  {
    int v28 = 0;
  }
  else
  {
    int v36 = v20;
    uint64_t v21 = v4;
    uint64_t v22 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v23 = (uint64_t *)(v22 + 704);
    uint64_t v24 = *(void *)(a1 + 808);
    uint64_t v25 = *(void *)(a1 + 816);
    size_t v26 = v25 - v24;
    if (v25 == v24) {
      BOOL v27 = &unk_2683E9241;
    }
    else {
      BOOL v27 = *(void **)(a1 + 808);
    }
    *(unsigned char *)(v22 + 774) = 1;
    sub_22B1ED19C((uint64_t)v23, v26, 4uLL);
    sub_22B1ED19C((uint64_t)v23, v26, 8uLL);
    sub_22B1ED1D4(v23, v27, v26);
    *(unsigned char *)(v22 + 774) = 0;
    uint64_t v4 = v21;
    int v20 = v36;
    int v28 = sub_22B1ED138((uint64_t)v23, v26 >> 3);
  }
  BOOL v29 = sub_22B1EDEC4(a1 + *(void *)(*(void *)a1 - 24));
  uint64_t v30 = (uint64_t)v29;
  __int16 v32 = v31;
  if (v37 != v2) {
    sub_22B203240(v29, v20);
  }
  if (v3 != v4 && v28)
  {
    sub_22B1ECFA8(v30, 4uLL);
    sub_22B1ED0D4((uint64_t *)v30, 12, *(_DWORD *)(v30 + 32) - *(_DWORD *)(v30 + 48) + *(_DWORD *)(v30 + 40) - v28 + 4);
  }
  sub_22B1EF4B8((uint64_t *)v30, 20, *(unsigned __int8 *)(a1 + 37));
  if (*(unsigned char *)(a1 + 2385))
  {
    sub_22B1ECA00((uint64_t *)v30, 22, *(void *)(a1 + 2392));
    sub_22B1ECA00((uint64_t *)v30, 24, *(void *)(a1 + 2400));
    sub_22B1ECA00((uint64_t *)v30, 26, *(void *)(a1 + 2408));
    sub_22B1ECA00((uint64_t *)v30, 28, *(void *)(a1 + 2416));
  }
  sub_22B1ED0D4((uint64_t *)v30, 30, *(_DWORD *)(a1 + 2424));
  return sub_22B1ECAA8(v30, v32);
}

void sub_22B240A88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(a1 + 160);
  if (*(_WORD *)(v4 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    uint64_t v6 = v3[20];
    uint64_t v5 = *(void *)(v4 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v3[20]);
    }
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 88);
  }
  uint64_t v75 = *(void *)(v4 + 88) + 40 * *(void *)(v4 + 96);
  if (v5 == v75) {
    return;
  }
  unint64_t v73 = v3 + 1;
  uint64_t v74 = a2;
  uint64_t v76 = v3;
  do
  {
    uint64_t v7 = *(void *)(v3[9] + 8 * *(unsigned int *)(v5 + 32));
    uint64_t v77 = v5;
    if (*(void *)(v5 + 8)) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_116;
    }
    uint64_t v9 = *(void *)(v76[20] + 80);
    uint64_t v10 = v9 ? v9 - 24 : 0;
    uint64_t v11 = *(void *)(v10 + 40);
    uint64_t v12 = v11 ? v11 - 24 : 0;
    sub_22B1FFC54((uint64_t)v76 + *(void *)(*v76 - 24) + 8, v12);
    if (!sub_22B1E1ED0(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.buffer")
      && !sub_22B1E1ED0(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.indirect_buffer"))
    {
      goto LABEL_116;
    }
    LODWORD(v13) = *(_DWORD *)(v7 + 8);
    if (v13 >= 3)
    {
      for (unsigned int i = 2; i < v13; ++i)
      {
        BOOL v15 = sub_22B1E1ED0(*(llvm::MDString **)(v7 - 8 * v13 + 8 * i), "air.arg_name");
        uint64_t v13 = *(unsigned int *)(v7 + 8);
        if (v15)
        {
          uint64_t v16 = *(llvm::MDString **)(v7 - 8 * v13 + 8 * (i + 1));
          if (v16 && !*(unsigned char *)v16)
          {
            uint64_t String = (void *)llvm::MDString::getString(v16);
            size_t v17 = v61;
            goto LABEL_28;
          }
          i += 2;
        }
      }
    }
    size_t v17 = 0;
    uint64_t String = 0;
LABEL_28:
    int Key = llvm::StringMapImpl::FindKey();
    if (Key == -1) {
      uint64_t v20 = *(unsigned int *)(a2 + 8);
    }
    else {
      uint64_t v20 = Key;
    }
    uint64_t v21 = *(void *)(*(void *)a2 + 8 * v20);
    switch(*(_DWORD *)(v21 + 12))
    {
      case 0:
        sub_22B23C5E8((uint64_t)v76, (uint64_t *)v77, *(_DWORD *)(v77 + 32), v7, *(_DWORD *)(v21 + 16));
        goto LABEL_116;
      case 1:
        sub_22B1D7BF0(&v78, "agc.");
        if (String)
        {
          sub_22B1E2118(&__p, String, v17);
          std::string::size_type v22 = HIBYTE(v82);
          uint64_t v23 = (void **)__p;
          std::string::size_type v24 = v81;
        }
        else
        {
          std::string::size_type v24 = 0;
          uint64_t v23 = 0;
          std::string::size_type v22 = 0;
          std::string __p = 0;
          std::string::size_type v81 = 0;
          uint64_t v82 = 0;
        }
        if ((v22 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = v23;
        }
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v63 = v22;
        }
        else {
          std::string::size_type v63 = v24;
        }
        uint64_t v64 = std::string::append(&v78, (const std::string::value_type *)p_p, v63);
        std::string::size_type v65 = v64->__r_.__value_.__r.__words[2];
        long long v83 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        uint64_t v84 = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        char v66 = 1;
        uint64_t v67 = (unsigned char *)llvm::User::operator new((llvm::User *)0x58);
        uint64_t v68 = &v83;
        if (v84 < 0) {
          uint64_t v68 = (long long *)v83;
        }
        __int16 v79 = 257;
        if (*(unsigned char *)v68)
        {
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
          char v66 = 3;
        }
        LOBYTE(v79) = v66;
        llvm::GlobalVariable::GlobalVariable();
        v67[80] |= 1u;
        llvm::GlobalObject::setSection();
        sub_22B2436D4((uint64_t)v76 + *(void *)(*v76 - 24));
        uint64_t v69 = *(void *)(*v76 - 24);
        __int16 v79 = 257;
        sub_22B1D4240((void *)((char *)v73 + v69), **(llvm::Type ***)(*(void *)v67 + 16), (uint64_t)v67, 0, (uint64_t)&v78);
        uint64_t v70 = *(void *)(v77 + 8);
        if (v70)
        {
          do
          {
            uint64_t v71 = *(void *)(v70 + 8);
            uint64_t v72 = *(llvm::Instruction **)(v70 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v72);
            uint64_t v70 = v71;
          }
          while (v71);
        }
        a2 = v74;
        if (SHIBYTE(v84) < 0) {
          operator delete((void *)v83);
        }
        goto LABEL_116;
      case 2:
        llvm::ConstantInt::get();
        uint64_t v25 = *(void *)(v77 + 8);
        if (v25)
        {
          do
          {
            uint64_t v26 = *(void *)(v25 + 8);
            BOOL v27 = *(llvm::Instruction **)(v25 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v27);
            uint64_t v25 = v26;
          }
          while (v26);
        }
        goto LABEL_116;
      case 3:
        *(_OWORD *)&v78.__r_.__value_.__r.__words[1] = 0uLL;
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78.__r_.__value_.__l.__size_;
        int v28 = (char *)operator new(8uLL);
        *(void *)int v28 = v77;
        BOOL v29 = v28 + 8;
        uint64_t v30 = v28 + 8;
        break;
      default:
        goto LABEL_116;
    }
    do
    {
      uint64_t v31 = *((void *)v30 - 1);
      v30 -= 8;
      for (uint64_t j = *(void *)(v31 + 8); j; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v33 = *(void *)(j + 24);
        if (v30 >= v29)
        {
          uint64_t v34 = (v30 - v28) >> 3;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61) {
            abort();
          }
          if ((v29 - v28) >> 2 > v35) {
            unint64_t v35 = (v29 - v28) >> 2;
          }
          if ((unint64_t)(v29 - v28) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36) {
            unint64_t v36 = (unint64_t)sub_22B216148(v36);
          }
          else {
            uint64_t v37 = 0;
          }
          uint64_t v38 = (char *)(v36 + 8 * v34);
          *(void *)uint64_t v38 = v33;
          unint64_t v39 = v38 + 8;
          while (v30 != v28)
          {
            uint64_t v40 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38 - 1) = v40;
            v38 -= 8;
          }
          BOOL v29 = (char *)(v36 + 8 * v37);
          if (v28) {
            operator delete(v28);
          }
          int v28 = v38;
          uint64_t v30 = v39;
        }
        else
        {
          *(void *)uint64_t v30 = v33;
          v30 += 8;
        }
        unint64_t v41 = *(void *)(j + 24);
        std::string::size_type size = v78.__r_.__value_.__l.__size_;
        p_std::string::size_type size = &v78.__r_.__value_.__l.__size_;
        uint64_t v44 = &v78.__r_.__value_.__l.__size_;
        if (v78.__r_.__value_.__l.__size_)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v44 = (std::string::size_type *)size;
              unint64_t v45 = *(void *)(size + 32);
              if (v41 >= v45) {
                break;
              }
              std::string::size_type size = *v44;
              p_std::string::size_type size = v44;
              if (!*v44) {
                goto LABEL_64;
              }
            }
            if (v45 >= v41) {
              break;
            }
            std::string::size_type size = v44[1];
            if (!size)
            {
              p_std::string::size_type size = v44 + 1;
              goto LABEL_64;
            }
          }
        }
        else
        {
LABEL_64:
          int v46 = (uint64_t *)operator new(0x28uLL);
          v46[4] = v41;
          *int v46 = 0;
          v46[1] = 0;
          _OWORD v46[2] = (uint64_t)v44;
          *p_std::string::size_type size = (std::string::size_type)v46;
          if (*(void *)v78.__r_.__value_.__l.__data_)
          {
            v78.__r_.__value_.__r.__words[0] = *(void *)v78.__r_.__value_.__l.__data_;
            uint64_t v47 = (uint64_t *)*p_size;
          }
          else
          {
            uint64_t v47 = v46;
          }
          sub_22B1E313C((uint64_t *)v78.__r_.__value_.__l.__size_, v47);
          ++v78.__r_.__value_.__r.__words[2];
        }
      }
    }
    while (v28 != v30);
    uint64_t v48 = (std::string::__raw *)v78.__r_.__value_.__r.__words[0];
    a2 = v74;
    if ((std::string::size_type *)v78.__r_.__value_.__l.__data_ == &v78.__r_.__value_.__r.__words[1]) {
      goto LABEL_93;
    }
    do
    {
      std::string::size_type v49 = v48[1].__words[1];
      int v50 = *(_DWORD *)(v49 + 20);
      if ((v50 & 0x40000000) != 0)
      {
        std::string::size_type v52 = *(void *)(v49 - 8);
        uint64_t v51 = v50 & 0x7FFFFFF;
        if (!v51) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v51 = v50 & 0x7FFFFFF;
        std::string::size_type v52 = v49 - 32 * v51;
        if (!v51) {
          goto LABEL_80;
        }
      }
      uint64_t v53 = 32 * v51;
      uint64_t v54 = (void **)(v52 + 16);
      do
      {
        if (*(v54 - 2))
        {
          **uint64_t v54 = *(v54 - 1);
          uint64_t v55 = (uint64_t)*(v54 - 1);
          if (v55) {
            *(void *)(v55 + 16) = *v54;
          }
        }
        *(v54 - 2) = 0;
        v54 += 4;
        v53 -= 32;
      }
      while (v53);
LABEL_80:
      unsigned int v56 = (std::string *)v48->__words[1];
      if (v56)
      {
        do
        {
          BOOL v57 = v56;
          unsigned int v56 = (std::string *)v56->__r_.__value_.__r.__words[0];
        }
        while (v56);
      }
      else
      {
        do
        {
          BOOL v57 = (std::string *)v48->__words[2];
          BOOL v8 = v57->__r_.__value_.__r.__words[0] == (void)v48;
          uint64_t v48 = (std::string::__raw *)v57;
        }
        while (!v8);
      }
      uint64_t v48 = (std::string::__raw *)v57;
    }
    while (v57 != (std::string *)&v78.__r_.__value_.__r.__words[1]);
    std::string::size_type v58 = v78.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v78.__r_.__value_.__l.__data_ != &v78.__r_.__value_.__r.__words[1])
    {
      do
      {
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v58 + 32));
        uint64_t v59 = *(std::string **)(v58 + 8);
        if (v59)
        {
          do
          {
            uint64_t v60 = v59;
            uint64_t v59 = (std::string *)v59->__r_.__value_.__r.__words[0];
          }
          while (v59);
        }
        else
        {
          do
          {
            uint64_t v60 = *(std::string **)(v58 + 16);
            BOOL v8 = v60->__r_.__value_.__r.__words[0] == v58;
            std::string::size_type v58 = (std::string::size_type)v60;
          }
          while (!v8);
        }
        std::string::size_type v58 = (std::string::size_type)v60;
      }
      while (v60 != (std::string *)&v78.__r_.__value_.__r.__words[1]);
    }
LABEL_93:
    if (v28) {
      operator delete(v28);
    }
    sub_22B1EDBB8((void *)v78.__r_.__value_.__l.__size_);
LABEL_116:
    uint64_t v3 = v76;
    uint64_t v5 = v77 + 40;
  }
  while (v77 + 40 != v75);
}

BOOL sub_22B2411F4(uint64_t a1)
{
  BOOL v2 = sub_22B1EE1E0(a1, *(int **)(*(void *)(a1 + 400) + 128));
  if (v2)
  {
    uint64_t v3 = sub_22B1EDEC4(a1);
    int v5 = sub_22B1ECAA8((uint64_t)v3, v4);
    uint64_t v6 = (uint64_t *)(a1 + 704);
    *(unsigned char *)(a1 + 774) = 1;
    int v7 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
    sub_22B1F26A0(v6, v5);
    int v8 = sub_22B1ECAA8((uint64_t)v6, v7);
    sub_22B1EE128((uint64_t)v6, v8);
  }
  return v2;
}

void sub_22B241284(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_22B1D7BF0(v26, (char *)&unk_22B27C63D);
  sub_22B1D7BF0(v23, "token");
  std::to_string(&v36, *(_DWORD *)(a1 + 992));
  if ((v24 & 0x80u) == 0) {
    size_t v4 = v24;
  }
  else {
    size_t v4 = (size_t)v23[1];
  }
  int v5 = &v37;
  sub_22B1EA4B0((uint64_t)&v37, v4 + 3);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v5 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if ((v24 & 0x80u) == 0) {
      uint64_t v6 = v23;
    }
    else {
      uint64_t v6 = (void **)v23[0];
    }
    memmove(v5, v6, v4);
  }
  *(_DWORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 2112032;
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v36;
  }
  else {
    int v7 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::string::append(&v37, (const std::string::value_type *)v7, size);
  uint64_t v10 = (void *)v9->__r_.__value_.__r.__words[0];
  std::string::size_type v11 = v9->__r_.__value_.__l.__size_;
  v25[0] = v9->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v25 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
  int v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_22B1DC004(&__dst, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v26;
    uint64_t v35 = v27;
  }
  sub_22B1F4374((void **)&v36.__r_.__value_.__l.__data_, (std::string::value_type *)&__dst, 0);
  sub_22B1D7BF0(v29, "{");
  sub_22B1F4374(&__p, (std::string::value_type *)v29, 0);
  if ((v33 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v14 = v33;
  }
  else {
    std::string::size_type v14 = v32;
  }
  BOOL v15 = std::string::append(&v36, p_p, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)__dst);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
LABEL_38:
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v36.__r_.__value_.__l.__size_ = v11;
    LODWORD(v36.__r_.__value_.__r.__words[2]) = v25[0];
    *(_DWORD *)((char *)&v36.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v25 + 3);
    *((unsigned char *)&v36.__r_.__value_.__s + 23) = v12;
    int v17 = v12;
LABEL_41:
    std::string v28 = v36;
    goto LABEL_42;
  }
  sub_22B1DC004(&v36, v10, v11);
  int v17 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_41;
  }
  sub_22B1DC004(&v28, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
LABEL_42:
  sub_22B1F4374(&__p, (std::string::value_type *)&v28, 1);
  if ((v33 & 0x80u) == 0) {
    unsigned int v18 = (const std::string::value_type *)&__p;
  }
  else {
    unsigned int v18 = (const std::string::value_type *)__p;
  }
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v19 = v33;
  }
  else {
    std::string::size_type v19 = v32;
  }
  std::string::append(&v37, v18, v19);
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (v17 < 0) {
LABEL_52:
  }
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_53:
  sub_22B1D7BF0(&__p, "}");
  sub_22B1F4374((void **)&v36.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v37;
  }
  else {
    uint64_t v20 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v37.__r_.__value_.__l.__size_;
  }
  std::string::size_type v22 = std::string::insert(&v36, 0, (const std::string::value_type *)v20, v21);
  *a2 = *v22;
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v12 < 0) {
LABEL_65:
  }
    operator delete(v10);
LABEL_66:
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
}

uint64_t sub_22B241620(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 992) == 31)
  {
    if (llvm::Module::getGlobalVariable())
    {
      llvm::GlobalObject::setSection();
      sub_22B2436D4(a1);
    }
    if (llvm::Module::getGlobalVariable()) {
      sub_22B2436D4(a1);
    }
    if (llvm::Module::getGlobalVariable()) {
      sub_22B2436D4(a1);
    }
  }
  BOOL v2 = *(llvm::Module **)(a1 + 320);
  uint64_t v9 = "agx.compute_driver_bindings";
  __int16 v10 = 259;
  if (!llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v9))
  {
    uint64_t v5 = *(void *)(a1 + 320);
    uint64_t v6 = v5 + 24;
    for (uint64_t i = *(void *)(v5 + 32); i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        int v8 = (llvm::GlobalValue *)(i - 56);
      }
      else {
        int v8 = 0;
      }
      if ((llvm::GlobalValue::isDeclaration(v8) & 1) == 0)
      {
        sub_22B1EE934(a1, (uint64_t)v8);
        break;
      }
    }
  }
  int v3 = sub_22B1EBFD8(*(void *)(a1 + 400), (std::string *)a1, *(void *)(a1 + 320), 16843009, 3);
  uint64_t result = 0;
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
    if (result)
    {
      sub_22B200C40(a1);
      return 1;
    }
  }
  return result;
}

uint64_t sub_22B2417C8()
{
  return 16;
}

const char *sub_22B2417D0()
{
  return "compute_program";
}

void sub_22B2417DC(uint64_t a1)
{
  sub_22B1ED95C(a1);
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B241818(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  switch(a3)
  {
    case 1:
      uint64_t v11 = a1 + 8;
      uint64_t v12 = 152;
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        uint64_t v12 = 264;
      }
      uint64_t v13 = *(void *)(a1 + v12);
      __int16 v16 = 257;
      uint64_t v10 = sub_22B1DC548(v11, a2, v13, (uint64_t)v15);
      goto LABEL_8;
    case 3:
    case 6:
      uint64_t v5 = a1 + 8;
      uint64_t v6 = *(void *)(a1 + 296);
      __int16 v16 = 257;
      uint64_t v7 = 49;
      uint64_t v8 = v3;
      goto LABEL_4;
    case 4:
    case 7:
      uint64_t v9 = *(void *)(a1 + 296);
      __int16 v16 = 257;
      uint64_t v8 = sub_22B1D7384(a1 + 8, 49, a2, v9, (uint64_t)v15);
      uint64_t v6 = *(void *)(a1 + 288);
      __int16 v16 = 257;
      uint64_t v5 = a1 + 8;
      uint64_t v7 = 38;
LABEL_4:
      uint64_t v10 = sub_22B1D7384(v5, v7, v8, v6, (uint64_t)v15);
LABEL_8:
      uint64_t v3 = v10;
      break;
    default:
      return v3;
  }
  return v3;
}

uint64_t sub_22B241938(uint64_t a1, llvm::Type *this)
{
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x200000000;
  *(void *)(a1 + 72) = this;
  *(void *)(a1 + 80) = a1 + 128;
  *(void *)(a1 + 88) = a1 + 136;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 512;
  *(unsigned char *)(a1 + 110) = 7;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = MEMORY[0x263F8BBD0] + 16;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 136) = MEMORY[0x263F8BC08] + 16;
  *(void *)a1 = &unk_26DE7AC58;
  *(void *)(a1 + 144) = llvm::Type::getVoidTy(this, this);
  *(void *)(a1 + 152) = llvm::Type::getHalfTy(*(llvm::Type **)(a1 + 72), v5);
  *(void *)(a1 + 160) = llvm::Type::getFloatTy(*(llvm::Type **)(a1 + 72), v6);
  *(void *)(a1 + 168) = llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 72), v7);
  *(void *)(a1 + 176) = llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 72), v8);
  *(void *)(a1 + 184) = llvm::Type::getInt16Ty(*(llvm::Type **)(a1 + 72), v9);
  *(void *)(a1 + 192) = llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 72), v10);
  *(void *)(a1 + 200) = llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 72), v11);
  *(void *)(a1 + 208) = llvm::FixedVectorType::get();
  *(void *)(a1 + 216) = llvm::FixedVectorType::get();
  *(void *)(a1 + 224) = llvm::FixedVectorType::get();
  *(void *)(a1 + 232) = llvm::FixedVectorType::get();
  *(void *)(a1 + 240) = llvm::FixedVectorType::get();
  *(void *)(a1 + 248) = llvm::FixedVectorType::get();
  *(void *)(a1 + 256) = llvm::FixedVectorType::get();
  *(void *)(a1 + 264) = llvm::FixedVectorType::get();
  *(void *)(a1 + 272) = llvm::FixedVectorType::get();
  *(void *)(a1 + 280) = llvm::FixedVectorType::get();
  *(void *)(a1 + 288) = llvm::FixedVectorType::get();
  *(void *)(a1 + 296) = llvm::FixedVectorType::get();
  *(void *)(a1 + 304) = llvm::FixedVectorType::get();
  *(void *)(a1 + 312) = llvm::IntegerType::get();
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = this;
  return a1;
}

uint64_t sub_22B241B38(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 160);
  if (*a2 != v6)
  {
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    {
      uint64_t v6 = llvm::FixedVectorType::get();
      unsigned int v8 = *(unsigned __int8 *)(v5 + 8);
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(v5 + 8);
    }
    if ((v8 & 0xFE) == 0x12) {
      unsigned int v8 = *(unsigned __int8 *)(**(void **)(v5 + 16) + 8);
    }
    uint64_t v9 = a1 + 8;
    if (v8 > 6)
    {
      __int16 v13 = 257;
      if (a3) {
        return sub_22B1DB63C(v9, v4, v6, (uint64_t)v12);
      }
      else {
        return sub_22B1DB6A8(v9, v4, v6, (uint64_t)v12);
      }
    }
    else
    {
      __int16 v13 = 257;
      return sub_22B1EEEB4(v9, v4, v6, (uint64_t)v12);
    }
  }
  return v4;
}

uint64_t sub_22B241C1C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *a3 = 1;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    *a3 = *(_DWORD *)(a2 + 32);
    a2 = **(void **)(a2 + 16);
  }
  uint64_t result = 0;
  int8x16_t v6 = vextq_s8(*(int8x16_t *)(a1 + 152), *(int8x16_t *)(a1 + 152), 8uLL);
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(a1 + 168);
  int8x16_t v8 = vextq_s8(*(int8x16_t *)(a1 + 184), *(int8x16_t *)(a1 + 184), 8uLL);
  uint64_t v9 = v5;
  while (a2 != v6.i64[result])
  {
    if (++result == 6) {
      return 9;
    }
  }
  return result;
}

uint64_t sub_22B241CD8(void *a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7 = (llvm::Value *)a2;
  uint64_t v27 = *MEMORY[0x263EF8340];
  std::string::size_type v22 = a2;
  uint64_t v9 = *a2;
  if (a1[19] == a3)
  {
    uint64_t v10 = a1 + 20;
  }
  else
  {
    if (a1[23] != a3 && a1[22] != a3 && a1[21] != a3) {
      return (uint64_t)v7;
    }
    uint64_t v10 = a1 + 24;
  }
  uint64_t v11 = *v10;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    uint64_t v11 = llvm::FixedVectorType::get();
  }
  int v12 = *(_DWORD *)(v11 + 8) & 0xFE;
  if (v12 == 18) {
    unsigned int v13 = *(unsigned __int8 *)(**(void **)(v11 + 16) + 8);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 8);
  }
  if (v13 > 6)
  {
    __int16 v26 = 257;
    if (a4) {
      uint64_t v15 = 40;
    }
    else {
      uint64_t v15 = 39;
    }
    return sub_22B1D7384((uint64_t)(a1 + 1), v15, (uint64_t)v7, v11, (uint64_t)&v23);
  }
  if (!a5)
  {
    __int16 v26 = 257;
    return sub_22B1EEEB4((uint64_t)(a1 + 1), (uint64_t)v7, v11, (uint64_t)&v23);
  }
  if (v12 == 18) {
    uint64_t v14 = (*(_DWORD *)(v11 + 32) - 1);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v23 = &v25;
  long long v24 = xmmword_22B26F8F0;
  sub_22B1EC888(&v23, "llvm.agx2.unopt.convert", "");
  size_t v18 = strlen(off_26488E190[v14]);
  sub_22B1EC888(&v23, off_26488E190[v14], &off_26488E190[v14][v18]);
  size_t v19 = strlen(off_26488E170[v14]);
  sub_22B1EC888(&v23, off_26488E170[v14], &off_26488E170[v14][v19]);
  uint64_t v20 = sub_22B241F18((uint64_t)a1, (uint64_t)v23, v24, v11, v9);
  v21[16] = 257;
  uint64_t v7 = sub_22B1D4034((uint64_t)(a1 + 1), *(void *)(v20 + 24), v20, (uint64_t)&v22, 1, (uint64_t)v21);
  if (v23 != &v25) {
    free(v23);
  }
  return (uint64_t)v7;
}

uint64_t sub_22B241F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v10[2] = *MEMORY[0x263EF8340];
  __src[0] = a5;
  __src[1] = 0;
  v9[0] = v10;
  v9[1] = (void *)0x200000000;
  sub_22B1D8088((unsigned int *)v9, __src, v9);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v6 = v5;
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return v6;
}

uint64_t sub_22B241FF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (a1[19] == a3 || a1[23] == a3 || a1[22] == a3)
  {
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
      uint64_t v3 = llvm::FixedVectorType::get();
    }
    if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12) {
      unsigned int v6 = *(unsigned __int8 *)(**(void **)(v3 + 16) + 8);
    }
    else {
      unsigned int v6 = *(_DWORD *)(v3 + 8);
    }
    uint64_t v7 = (uint64_t)(a1 + 1);
    __int16 v11 = 257;
    if (v6 > 6) {
      return sub_22B1D7384(v7, 38, v4, v3, (uint64_t)v10);
    }
    else {
      return sub_22B1DC548(v7, v4, v3, (uint64_t)v10);
    }
  }
  return v4;
}

uint64_t sub_22B2420E0(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v4 = (llvm::Value *)a2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  size_t v19 = a2;
  uint64_t v7 = *a2;
  switch(a3)
  {
    case 1:
      int8x16_t v8 = (uint64_t *)(a1 + 152);
      goto LABEL_6;
    case 2:
      int8x16_t v8 = (uint64_t *)(a1 + 168);
      goto LABEL_6;
    case 4:
    case 7:
      int8x16_t v8 = (uint64_t *)(a1 + 184);
      goto LABEL_6;
    case 5:
    case 8:
      int8x16_t v8 = (uint64_t *)(a1 + 176);
LABEL_6:
      uint64_t v9 = *v8;
      if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12) {
        uint64_t v9 = llvm::FixedVectorType::get();
      }
      int v10 = *(_DWORD *)(v9 + 8) & 0xFE;
      if (v10 == 18) {
        unsigned int v11 = *(unsigned __int8 *)(**(void **)(v9 + 16) + 8);
      }
      else {
        unsigned int v11 = *(_DWORD *)(v9 + 8);
      }
      if (v11 > 6)
      {
        __int16 v23 = 257;
        return sub_22B1D7384(a1 + 8, 38, (uint64_t)v4, v9, (uint64_t)&v20);
      }
      if (!a4)
      {
        __int16 v23 = 257;
        return sub_22B1DC548(a1 + 8, (uint64_t)v4, v9, (uint64_t)&v20);
      }
      if (v10 == 18) {
        uint64_t v12 = (*(_DWORD *)(v9 + 32) - 1);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v20 = &v22;
      long long v21 = xmmword_22B26F8F0;
      sub_22B1EC888(&v20, "llvm.agx2.unopt.convert", "");
      size_t v15 = strlen(off_26488E170[v12]);
      sub_22B1EC888(&v20, off_26488E170[v12], &off_26488E170[v12][v15]);
      size_t v16 = strlen(off_26488E190[v12]);
      sub_22B1EC888(&v20, off_26488E190[v12], &off_26488E190[v12][v16]);
      uint64_t v17 = sub_22B241F18(a1, (uint64_t)v20, v21, v9, v7);
      unsigned char v18[16] = 257;
      uint64_t v4 = sub_22B1D4034(a1 + 8, *(void *)(v17 + 24), v17, (uint64_t)&v19, 1, (uint64_t)v18);
      if (v20 != &v22) {
        free(v20);
      }
      return (uint64_t)v4;
    default:
      return (uint64_t)v4;
  }
}

uint64_t sub_22B242334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    a3 = llvm::FixedVectorType::get();
  }
  __int16 v8 = 257;
  return sub_22B1D7384(a1 + 8, 49, a2, a3, (uint64_t)v7);
}

uint64_t sub_22B2423A4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a3 == 1 && a4)
  {
    LOWORD(v12) = 257;
    uint64_t v6 = llvm::ConstantInt::get();
    return sub_22B242524(a1 + 8, a2, v6, (uint64_t)v11);
  }
  else
  {
    v11[0] = llvm::ConstantInt::get();
    v11[1] = llvm::ConstantInt::get();
    void v11[2] = llvm::ConstantInt::get();
    void v11[3] = llvm::ConstantInt::get();
    uint64_t v12 = llvm::ConstantInt::get();
    uint64_t v13 = llvm::ConstantInt::get();
    uint64_t v14 = llvm::ConstantInt::get();
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t v8 = llvm::ConstantVector::get();
    uint64_t v9 = llvm::UndefValue::get();
    unsigned char v10[16] = 257;
    return sub_22B1D69A8(a1 + 8, a2, v9, v8, (uint64_t)v10);
  }
}

uint64_t sub_22B242524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 320))(*(void *)(a1 + 72), a2, a3);
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      sub_22B1D6EE0((uint64_t *)a1, v6, a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::User::operator new((llvm::User *)0x40);
    llvm::ExtractElementInst::ExtractElementInst();
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = v9 + 16 * v8;
      do
      {
        llvm::Instruction::setMetadata();
        v9 += 16;
      }
      while (v9 != v10);
    }
  }
  return v6;
}

uint64_t sub_22B242678(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12)
  {
    llvm::FixedVectorType::get();
    uint64_t v8 = llvm::UndefValue::get();
    __int16 v12 = 257;
    uint64_t v9 = llvm::ConstantInt::get();
    return sub_22B2427EC(a1 + 8, v8, v3, v9, (uint64_t)v11);
  }
  if (*(_DWORD *)(*(void *)a2 + 32) != a3)
  {
    uint64_t v13 = llvm::ConstantInt::get();
    uint64_t v14 = llvm::ConstantInt::get();
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t v16 = llvm::ConstantInt::get();
    uint64_t v5 = llvm::ConstantVector::get();
    uint64_t v6 = llvm::UndefValue::get();
    __int16 v12 = 257;
    return sub_22B1D69A8(a1 + 8, v3, v6, v5, (uint64_t)v11);
  }
  return v3;
}

uint64_t sub_22B2427EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2
    && *(unsigned __int8 *)(a2 + 16) <= 0x14u
    && a3
    && *(unsigned __int8 *)(a3 + 16) <= 0x14u
    && a4
    && *(unsigned __int8 *)(a4 + 16) <= 0x14u)
  {
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 328))(*(void *)(a1 + 72), a2, a3, a4);
    if (v10) {
      BOOL v11 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11) {
      sub_22B1D6EE0((uint64_t *)a1, v10, a5);
    }
  }
  else
  {
    __int16 v17 = 257;
    uint64_t v10 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x230F42790](v10, a2, a3, a4, v16, 0);
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v10, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = v13 + 16 * v12;
      do
      {
        llvm::Instruction::setMetadata();
        v13 += 16;
      }
      while (v13 != v14);
    }
  }
  return v10;
}

uint64_t sub_22B24295C(uint64_t a1, llvm::Constant *a2, llvm::Constant **a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    sub_22B242A30(a2, a3, 0);
    uint64_t v6 = *(unsigned int *)(*(void *)a2 + 32);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (!a3[i])
        {
          __int16 v11 = 257;
          uint64_t v8 = llvm::ConstantInt::get();
          a3[i] = (llvm::Constant *)sub_22B242524(a1 + 8, (uint64_t)a2, v8, (uint64_t)v10);
        }
      }
    }
  }
  else
  {
    *a3 = a2;
    return 1;
  }
  return v6;
}

void sub_22B242A30(llvm::Constant *a1, void *a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  bzero(a2, 0x20uLL);
  if (a1 && a3 <= 5)
  {
    while (1)
    {
      unsigned int v6 = *((unsigned __int8 *)a1 + 16);
      if (v6 != 90) {
        break;
      }
      uint64_t v7 = *((void *)a1 - 4);
      if (v7) {
        BOOL v8 = *(unsigned char *)(v7 + 16) == 16;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        uint64_t v9 = (unsigned int *)(v7 + 24);
        if (*(_DWORD *)(v7 + 32) >= 0x41u) {
          uint64_t v9 = *(unsigned int **)v9;
        }
        uint64_t v10 = *v9;
        if (!*((void *)a2 + v10)) {
          *((void *)a2 + v10) = *((void *)a1 - 8);
        }
        a1 = (llvm::Constant *)*((void *)a1 - 12);
        if (a1) {
          continue;
        }
      }
      return;
    }
    if (v6 == 91)
    {
      memset(v20, 0, sizeof(v20));
      memset(v19, 0, sizeof(v19));
      uint64_t v11 = a3 + 1;
      sub_22B242A30(*((void *)a1 - 8), v20, v11);
      sub_22B242A30(*((void *)a1 - 4), v19, v11);
      uint64_t v12 = *(unsigned int *)(*(void *)a1 + 32);
      if (v12)
      {
        uint64_t v13 = 0;
        unsigned int v14 = *(_DWORD *)(**((void **)a1 - 8) + 32);
        do
        {
          if (!*((void *)a2 + v13))
          {
            uint64_t v15 = *(int *)(*((void *)a1 + 8) + 4 * v13);
            if (v15 == -1)
            {
              uint64_t v16 = llvm::UndefValue::get();
            }
            else if (v15 >= v14)
            {
              uint64_t v16 = *((void *)v19 + v15 - v14);
            }
            else
            {
              uint64_t v16 = *((void *)v20 + v15);
            }
            *((void *)a2 + v13) = v16;
          }
          ++v13;
        }
        while (v12 != v13);
      }
    }
    else if (v6 <= 0x14)
    {
      uint64_t v17 = *(unsigned int *)(*(void *)a1 + 32);
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (!*((void *)a2 + i)) {
            *((void *)a2 + i) = llvm::Constant::getAggregateElement(a1);
          }
        }
      }
    }
  }
}

void sub_22B242BFC(uint64_t a1, unsigned char *a2, void *a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)a2 + 12);
  bzero(a3, 8 * v6);
  if (a2[16] == 93)
  {
    uint64_t v7 = a2;
    do
    {
      if (*((_DWORD *)v7 + 18) != 1) {
        break;
      }
      uint64_t v8 = **((unsigned int **)v7 + 8);
      if (!*((void *)a3 + v8)) {
        *((void *)a3 + v8) = *((void *)v7 - 4);
      }
      uint64_t v7 = (unsigned char *)*((void *)v7 - 8);
    }
    while (v7[16] == 93 && v7 != 0);
  }
  unsigned int v14 = 0;
  if (v6)
  {
    unsigned int v10 = 0;
    uint64_t v11 = a1 + 8;
    do
    {
      if (!*((void *)a3 + v10))
      {
        v13[16] = 257;
        uint64_t v12 = sub_22B1D7940(v11, (uint64_t)a2, (uint64_t)&v14, 1, (uint64_t)v13);
        unsigned int v10 = v14;
        *((void *)a3 + v14) = v12;
      }
      unsigned int v14 = ++v10;
    }
    while (v10 < v6);
  }
}

uint64_t sub_22B242CE8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 != 1)
  {
    llvm::ConstantInt::get();
    uint64_t Splat = llvm::ConstantDataVector::getSplat();
    llvm::FixedVectorType::get();
    uint64_t v6 = llvm::UndefValue::get();
    __int16 v12 = 257;
    uint64_t v7 = llvm::ConstantInt::get();
    uint64_t v8 = sub_22B2427EC(a1 + 8, v6, a3, v7, (uint64_t)v11);
    uint64_t v9 = llvm::UndefValue::get();
    __int16 v12 = 257;
    return sub_22B1D69A8(a1 + 8, v8, v9, Splat, (uint64_t)v11);
  }
  return a3;
}

uint64_t sub_22B242DC8(uint64_t a1, llvm::Type **a2, int a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = *a2;
  if (llvm::Type::getScalarSizeInBits(*a2) != 32)
  {
    uint64_t v7 = *(void *)(a1 + 192);
    if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12) {
      uint64_t v7 = llvm::FixedVectorType::get();
    }
    __int16 v11 = 257;
    if (a3) {
      uint64_t v8 = 40;
    }
    else {
      uint64_t v8 = 39;
    }
    return sub_22B1D7384(a1 + 8, v8, v4, v7, (uint64_t)v10);
  }
  return v4;
}

llvm::Value *sub_22B242E70(uint64_t a1, uint64_t a2, llvm::Constant *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = a3;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
  {
    llvm::FixedVectorType::get();
    uint64_t v6 = llvm::UndefValue::get();
    memset(v16, 0, sizeof(v16));
    sub_22B24295C(a1, a3, (llvm::Constant **)v16);
    uint64_t v7 = *(unsigned int *)(*(void *)a3 + 32);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        __int16 v12 = (llvm::Value *)*((void *)v16 + i);
        __int16 v14 = 257;
        uint64_t v9 = sub_22B1D4034(a1 + 8, *(void *)(a2 + 24), a2, (uint64_t)&v12, 1, (uint64_t)v13);
        __int16 v12 = v9;
        __int16 v14 = 257;
        uint64_t v10 = llvm::ConstantInt::get();
        uint64_t v6 = sub_22B2427EC(a1 + 8, v6, (uint64_t)v9, v10, (uint64_t)v13);
      }
    }
  }
  else
  {
    __int16 v14 = 257;
    return sub_22B1D4034(a1 + 8, *(void *)(a2 + 24), a2, (uint64_t)&v15, 1, (uint64_t)v13);
  }
  return (llvm::Value *)v6;
}

uint64_t sub_22B242FF0(uint64_t a1, llvm::Constant *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    memset(v15, 0, sizeof(v15));
    sub_22B24295C(a1, a2, (llvm::Constant **)v15);
    uint64_t v6 = *(unsigned int *)(*(void *)a2 + 32);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *((void *)v15 + v7));
      if (!v8)
      {
        llvm::FixedVectorType::get();
        uint64_t v8 = llvm::UndefValue::get();
      }
      __int16 v14 = 257;
      uint64_t v10 = llvm::ConstantInt::get();
      uint64_t v8 = sub_22B2427EC(a1 + 8, v8, v9, v10, (uint64_t)v13);
      ++v7;
    }
    while (v6 != v7);
    return v8;
  }
  else
  {
    __int16 v11 = *(uint64_t (**)(uint64_t))(a3 + 16);
    return v11(a3);
  }
}

uint64_t sub_22B243188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v4 = sub_22B1DB138(a1 + 8, a2, a3, (uint64_t)v12);
  __int16 v13 = 257;
  uint64_t v5 = llvm::ConstantInt::get();
  uint64_t v6 = sub_22B242524(v3, v4, v5, (uint64_t)v12);
  uint64_t v7 = *(unsigned int *)(*(void *)v4 + 32);
  if (v7 >= 2)
  {
    for (uint64_t i = 1; i != v7; ++i)
    {
      __int16 v13 = 257;
      uint64_t v9 = llvm::ConstantInt::get();
      uint64_t v10 = sub_22B242524(v3, v4, v9, (uint64_t)v12);
      __int16 v13 = 257;
      uint64_t v6 = sub_22B1DD390(v3, v6, v10, (uint64_t)v12);
    }
  }
  return v6;
}

uint64_t sub_22B243278(uint64_t a1, llvm::Type ***a2, llvm::Type ***a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t)a3;
  if (*a2 != *a3) {
    uint64_t v5 = sub_22B242CE8(a1, *((_DWORD *)*a2 + 8), (uint64_t)a3);
  }
  __int16 v10 = 257;
  sub_22B1D4340((uint64_t *)(a1 + 8), a4, a2, v5, (uint64_t)v9);
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t sub_22B243324(uint64_t a1, llvm::Type ***a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v6 = (llvm::Type ***)llvm::ConstantInt::get();
    uint64_t v7 = sub_22B243278(a1, a2, v6, 40);
    uint64_t v8 = (llvm::Type ***)llvm::ConstantInt::get();
    uint64_t v9 = a1;
    __int16 v10 = (llvm::Type ***)v7;
    uint64_t v11 = 38;
  }
  else
  {
    uint64_t v8 = (llvm::Type ***)llvm::ConstantInt::get();
    uint64_t v9 = a1;
    __int16 v10 = a2;
    uint64_t v11 = 36;
  }
  return sub_22B243278(v9, v10, v8, v11);
}

uint64_t sub_22B243400(llvm::GlobalValue *this)
{
  uint64_t result = 0;
  if (this && *((unsigned char *)this + 16) == 3)
  {
    if ((*((unsigned char *)this + 80) & 1) != 0 && (llvm::GlobalValue::isDeclaration(this) & 1) == 0) {
      return *((void *)this - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22B243454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_22B242678(a1, a2, 4);
  __int16 v9 = 257;
  uint64_t v6 = llvm::ConstantInt::get();
  return sub_22B2427EC(a1 + 8, v5, a3, v6, (uint64_t)v8);
}

uint64_t sub_22B2434C8(uint64_t a1, llvm::Type *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  long long v16 = *(_OWORD *)(a1 + 56);
  uint64_t v5 = *(void *)(*(void *)(v16 + 56) + 80);
  if (v5) {
    uint64_t v6 = (llvm::BasicBlock *)(v5 - 24);
  }
  else {
    uint64_t v6 = 0;
  }
  llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (llvm::IRBuilderBase *)(a1 + 8));
  int v18 = *(_DWORD *)(a1 + 104);
  uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v6);
  if (FirstInsertionPt) {
    uint64_t v8 = FirstInsertionPt - 24;
  }
  else {
    uint64_t v8 = 0;
  }
  sub_22B1FFC54((uint64_t)v4, v8);
  __int16 v15 = 257;
  uint64_t v9 = sub_22B2435DC(v4, a2, (uint64_t)v14);
  long long v11 = v16;
  uint64_t v12 = v17;
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v13 = v18;
  sub_22B1D3C74((uint64_t)&v11, (uint64_t)v4);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t sub_22B2435DC(uint64_t *a1, llvm::Type *a2, uint64_t a3)
{
  Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x48);
  llvm::AllocaInst::AllocaInst();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v8, a3, a1[6], a1[7]);
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

uint64_t sub_22B2436D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 328);
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  uint64_t Impl = llvm::MDTuple::getImpl();
  return sub_22B1D6788(v1, Impl);
}

uint64_t sub_22B2437A8(const char *a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
  if (a1)
  {
    uint64_t result = sub_22B1E1ED0((llvm::MDString *)result, a1);
    if (!result) {
      return result;
    }
    unsigned int v9 = *a3;
    unsigned int v10 = *a3 + 1;
    *a3 = v10;
    uint64_t result = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v10);
    if (!result || *(unsigned __int8 *)result - 1 >= 2)
    {
      uint64_t result = 0;
      *a3 = v9 + 2;
      return result;
    }
    *a3 = v9 + 2;
  }
  else
  {
    if (!result) {
      return result;
    }
    if (*(unsigned __int8 *)result - 1 >= 2) {
      return 0;
    }
  }
  uint64_t v11 = *(void *)(result + 128);
  if (v11) {
    BOOL v12 = *(unsigned char *)(v11 + 16) == 16;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    return 0;
  }
  int v13 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    int v13 = (void *)*v13;
  }
  *a4 = *v13;
  return 1;
}

uint64_t sub_22B243890(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = sub_22B1E1ED0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.location_index");
  if (result)
  {
    int v9 = *a2 + 1;
    uint64_t result = sub_22B2437A8(0, a1, (unsigned int *)&v9, a3);
    if (result)
    {
      int v10 = *a2 + 2;
      uint64_t result = sub_22B2437A8(0, a1, (unsigned int *)&v10, a4);
      if (result)
      {
        *a2 += 3;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22B243944(uint64_t a1, _DWORD *a2, _DWORD *a3, BOOL *a4)
{
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8));
  if (v9 != 11) {
    return 0;
  }
  if (*String != 0x706D61732E726961 || *(void *)((char *)String + 3) != 0x72656C706D61732ELL) {
    return 0;
  }
  *a4 = 0;
  *a3 = 1;
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  unsigned int v21 = 2;
  if (v12 >= 3)
  {
    do
    {
      if (sub_22B243890(a1, &v21, a2, a3))
      {
        unsigned int v13 = v21;
      }
      else
      {
        char v14 = sub_22B2437A8("air.binding", a1, &v21, a2);
        uint64_t v15 = v21;
        unsigned int v13 = v21;
        if ((v14 & 1) == 0)
        {
          unsigned int v13 = ++v21;
          if (sub_22B1E1ED0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v15), "air.arg_type_name"))
          {
            unsigned int v16 = v15 + 2;
            unsigned int v21 = v16;
            uint64_t v17 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v13));
            BOOL v19 = v18 >= 5 && *(_DWORD *)v17 == 1634890337 && *(unsigned char *)(v17 + 4) == 121;
            *a4 = v19;
            unsigned int v13 = v16;
          }
        }
      }
    }
    while (v13 < v12);
  }
  return 1;
}

BOOL sub_22B243AD8(uint64_t a1, _DWORD *a2, _DWORD *a3, unsigned char *a4, unsigned char *a5, BOOL *a6, unsigned char *a7)
{
  BOOL v14 = sub_22B1E1ED0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.texture");
  if (v14)
  {
    *a4 = 1;
    char v30 = a6;
    uint64_t v31 = a5;
    *a5 = 0;
    *a6 = 0;
    *a7 = 0;
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    unsigned int v32 = 2;
    if (v15 >= 3)
    {
      do
      {
        if ((sub_22B243890(a1, &v32, a2, a3) & 1) == 0)
        {
          if (sub_22B2437A8("air.binding", a1, &v32, a2))
          {
            *a3 = 1;
          }
          else
          {
            uint64_t v16 = v32;
            unsigned int v17 = ++v32;
            unint64_t v18 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v16);
            if (!*(unsigned char *)v18)
            {
              uint64_t String = llvm::MDString::getString(v18);
              if (v20 == 9)
              {
                if (*(void *)String != 0x746972772E726961 || *(unsigned char *)(String + 8) != 101) {
                  continue;
                }
                *a4 = 0;
                goto LABEL_24;
              }
              if (v20 == 17)
              {
                if (*(void *)String == 0x5F6772612E726961
                  && *(void *)(String + 8) == 0x6D616E5F65707974
                  && *(unsigned char *)(String + 16) == 101)
                {
                  unsigned int v32 = v16 + 2;
                  uint64_t v25 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v17));
                  BOOL v27 = v26 >= 5 && *(_DWORD *)v25 == 1634890337 && *(unsigned char *)(v25 + 4) == 121;
                  *char v30 = v27;
                }
                continue;
              }
              if (v20 == 14
                && *(void *)String == 0x646165722E726961
                && *(void *)(String + 6) == 0x65746972775F6461)
              {
                *a4 = 1;
LABEL_24:
                *uint64_t v31 = 1;
              }
            }
          }
        }
      }
      while (v32 < v15);
    }
  }
  return v14;
}

BOOL sub_22B243D18(uint64_t a1, _DWORD *a2, void *a3)
{
  BOOL result = sub_22B1E1ED0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.struct_type_info");
  if (result)
  {
    int v7 = (*a2)++;
    uint64_t v8 = *(unsigned char **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v7 + 1));
    if (v8)
    {
      if (((*v8 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v8)) == 0) {
        uint64_t v8 = 0;
      }
    }
    *a3 = v8;
    *a2 = v7 + 2;
    return v8 != 0;
  }
  return result;
}

BOOL sub_22B243DB4(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, unsigned int *a5, _DWORD *a6, uint64_t *a7, unsigned char *a8, char *a9)
{
  if (!sub_22B1E1ED0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.buffer"))
  {
    BOOL result = sub_22B1E1ED0(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.indirect_buffer");
    if (!result) {
      return result;
    }
  }
  *a8 = 0;
  unsigned int v18 = *(_DWORD *)(a1 + 8);
  LODWORD(v47) = 2;
  if (v18 >= 3)
  {
    do
    {
      if ((sub_22B243890(a1, &v47, a3, a4) & 1) == 0
        && (sub_22B2437A8("air.buffer_size", a1, (unsigned int *)&v47, a5) & 1) == 0
        && (sub_22B2437A8("air.arg_type_size", a1, (unsigned int *)&v47, a6) & 1) == 0
        && !sub_22B243D18(a1, &v47, a7))
      {
        LODWORD(v47) = v47 + 1;
      }
    }
    while (v47 < v18);
  }
  unsigned int v19 = *a5;
  if (*a5)
  {
    if (v19 <= 0xFFFFFFFC && a2 == 2) {
      unsigned int v19 = (v19 + 3) & 0xFFFFFFFC;
    }
    *a5 = v19;
  }
  if (!*a7)
  {
    char v34 = 0;
    goto LABEL_65;
  }
  uint64_t v52 = *a7;
  uint64_t v47 = v51;
  uint64_t v48 = v51;
  uint64_t v49 = 4;
  int v50 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_22B23EA80(__p, &v52);
  uint64_t v21 = *((void *)&v46 + 1);
  if (!*((void *)&v46 + 1))
  {
LABEL_47:
    char v34 = 0;
    goto LABEL_50;
  }
  while (1)
  {
    uint64_t v22 = *(_DWORD **)(*(void *)((char *)__p[1] + (((unint64_t)v46 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v46 & 0x1FF));
    *(void *)&long long v46 = v46 + 1;
    *((void *)&v46 + 1) = v21 - 1;
    if ((unint64_t)v46 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(void *)&long long v46 = v46 - 512;
    }
    sub_22B231704((uint64_t)&v47, v22);
    if (v23)
    {
      int v43 = 0;
      unsigned int v24 = v22[2];
      if (v24) {
        break;
      }
    }
LABEL_46:
    uint64_t v21 = *((void *)&v46 + 1);
    if (!*((void *)&v46 + 1)) {
      goto LABEL_47;
    }
  }
  while (1)
  {
    uint64_t v42 = 0;
    if (!sub_22B243D18((uint64_t)v22, &v43, &v42)) {
      break;
    }
    sub_22B23EA80(__p, &v42);
    unsigned int v25 = v43;
LABEL_45:
    if (v25 >= v24) {
      goto LABEL_46;
    }
  }
  int v26 = v43;
  if (!sub_22B1E1ED0(*(llvm::MDString **)&v22[2 * v43 + -2 * v22[2]], "air.indirect_argument"))
  {
    unsigned int v25 = v26 + 1;
    goto LABEL_44;
  }
  unsigned int v25 = v26 + 1;
  v53[0] = v26 + 1;
  if (sub_22B2437A8(0, (uint64_t)v22, v53, &v41)) {
    goto LABEL_42;
  }
  BOOL v27 = *(unsigned __int8 **)&v22[2 * v25 + -2 * v22[2]];
  if (!v27) {
    goto LABEL_44;
  }
  unint64_t v28 = *v27;
  if (v28 > 0x22 || ((0x7FFFFFFF0uLL >> v28) & 1) == 0) {
    goto LABEL_44;
  }
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)&v27[-8 * *((unsigned int *)v27 + 2) + 8]);
  if (v31 == 21)
  {
    BOOL v32 = *String == 0x69646E692E726961 && String[1] == 0x6E6F635F74636572;
    if (v32 && *(void *)((char *)String + 13) == 0x746E6174736E6F63)
    {
LABEL_42:
      unsigned int v25 = v26 + 2;
LABEL_44:
      int v43 = v25;
      goto LABEL_45;
    }
  }
  char v34 = 1;
LABEL_50:
  uint64_t v35 = (void **)__p[1];
  std::string v36 = (void **)v45;
  *((void *)&v46 + 1) = 0;
  unint64_t v37 = v45 - (unint64_t)__p[1];
  if ((unint64_t)v45 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v35);
      std::string v36 = (void **)v45;
      uint64_t v35 = (void **)((char *)__p[1] + 8);
      __p[1] = v35;
      unint64_t v37 = v45 - (void)v35;
    }
    while ((void)v45 - (void)v35 > 0x10uLL);
  }
  unint64_t v38 = v37 >> 3;
  if (v38 == 1)
  {
    uint64_t v39 = 256;
LABEL_56:
    *(void *)&long long v46 = v39;
  }
  else if (v38 == 2)
  {
    uint64_t v39 = 512;
    goto LABEL_56;
  }
  if (v35 != v36)
  {
    do
    {
      uint64_t v40 = *v35++;
      operator delete(v40);
    }
    while (v35 != v36);
    if ((void *)v45 != __p[1]) {
      *(void *)&long long v45 = v45 + (((unint64_t)__p[1] - v45 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v48 != v47) {
    free(v48);
  }
LABEL_65:
  *a9 = v34;
  return 1;
}

BOOL sub_22B2441AC(uint64_t a1)
{
  BOOL v2 = sub_22B1EE1E0(a1, *(int **)(*(void *)(a1 + 400) + 128));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v29 = v2;
    uint64_t v4 = sub_22B1EDEC4(a1);
    int v28 = sub_22B1ECAA8((uint64_t)v4, v5);
    uint64_t v6 = 0;
    int v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    int v10 = (uint64_t *)(a1 + 704);
    do
    {
      *(unsigned char *)(a1 + 774) = 1;
      int v11 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
      sub_22B1ED0D4((uint64_t *)(a1 + 704), 4, v9);
      sub_22B1EF4B8((uint64_t *)(a1 + 704), 6, byte_22B2700BC[4 * v9]);
      int v12 = sub_22B1ECAA8(a1 + 704, v11);
      int v13 = v12;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v14 = (v7 - v6) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v15) {
          unint64_t v15 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)sub_22B1EDE8C(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unsigned int v18 = (char *)(v16 + 4 * v14);
        *(_DWORD *)unsigned int v18 = v13;
        unsigned int v19 = v18 + 4;
        while (v7 != v6)
        {
          int v20 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        unint64_t v8 = v16 + 4 * v17;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v18;
        int v7 = v19;
      }
      else
      {
        *(_DWORD *)int v7 = v12;
        v7 += 4;
      }
      ++v9;
    }
    while (v9 != 4);
    if (v7 == v6) {
      uint64_t v21 = (char *)&unk_2683E9242;
    }
    else {
      uint64_t v21 = v6;
    }
    int v22 = sub_22B1F25D8(a1 + 704, (uint64_t)v21, (v7 - v6) >> 2);
    *(unsigned char *)(a1 + 774) = 1;
    int v23 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
    sub_22B1F26A0((uint64_t *)(a1 + 704), v22);
    int v24 = sub_22B1ECAA8(a1 + 704, v23);
    *(unsigned char *)(a1 + 774) = 1;
    int v25 = *(_DWORD *)(a1 + 736) - *(_DWORD *)(a1 + 752) + *(_DWORD *)(a1 + 744);
    sub_22B1F26A0(v10, v28);
    sub_22B203240(v10, v24);
    int v26 = sub_22B1ECAA8((uint64_t)v10, v25);
    sub_22B1EE128((uint64_t)v10, v26);
    BOOL v3 = v29;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

void sub_22B2443DC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  sub_22B1D7BF0(v25, (char *)&unk_22B27C63D);
  sub_22B1D7BF0(v23, "save");
  if (*(unsigned char *)(a1 + 992)) {
    uint64_t v4 = "true";
  }
  else {
    uint64_t v4 = "false";
  }
  sub_22B244764(&v37, (const void **)v23, v4);
  sub_22B1D7BF0(v21, "toggle");
  if (*(unsigned char *)(a1 + 993)) {
    __int16 v5 = "true";
  }
  else {
    __int16 v5 = "false";
  }
  sub_22B244764(&v38, (const void **)v21, v5);
  if (SHIBYTE(v26) < 0)
  {
    sub_22B1DC004(&__dst, v25[0], (unint64_t)v25[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v25;
    uint64_t v34 = v26;
  }
  sub_22B1F4374((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&__dst, 0);
  sub_22B1D7BF0(v28, "{");
  sub_22B1F4374(&__p, (std::string::value_type *)v28, 0);
  if ((v32 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v7 = v32;
  }
  else {
    std::string::size_type v7 = v31;
  }
  unint64_t v8 = std::string::append(&v35, p_p, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__dst);
  }
  char v10 = 0;
  uint64_t v11 = 0;
  do
  {
    char v12 = v10;
    int v13 = &v37 + v11;
    if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0) {
      sub_22B1DC004(&v35, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
    }
    else {
      std::string v35 = *v13;
    }
    int v14 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      sub_22B1DC004(&v27, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    }
    else {
      std::string v27 = v35;
    }
    sub_22B1F4374(&__p, (std::string::value_type *)&v27, 1);
    if ((v32 & 0x80u) == 0) {
      unint64_t v15 = (const std::string::value_type *)&__p;
    }
    else {
      unint64_t v15 = (const std::string::value_type *)__p;
    }
    if ((v32 & 0x80u) == 0) {
      std::string::size_type v16 = v32;
    }
    else {
      std::string::size_type v16 = v31;
    }
    std::string::append(&v36, v15, v16);
    if ((char)v32 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v27.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_41;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_41:
    char v10 = 1;
    uint64_t v11 = 1;
  }
  while ((v12 & 1) == 0);
  sub_22B1D7BF0(&__p, "}");
  sub_22B1F4374((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v36;
  }
  else {
    uint64_t v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  unsigned int v19 = std::string::insert(&v35, 0, (const std::string::value_type *)v17, size);
  *a2 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v37 + i * 8 + 24));
    }
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
}

void sub_22B244764(std::string *a1, const void **a2, char *__s)
{
  sub_22B1D7BF0(__p, __s);
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = &v13;
  sub_22B1EA4B0((uint64_t)&v13, v5 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v7 = a2;
    }
    else {
      std::string::size_type v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((v12 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  char v10 = std::string::append(&v13, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_22B244868(std::string *a1)
{
  uint64_t Function = llvm::Module::getFunction();
  *(void *)(Function + 112) = 0;
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  if (a1[41].__r_.__value_.__s.__data_[8])
  {
    BOOL v3 = (llvm::Function *)llvm::Module::getFunction();
    std::string::size_type size = a1[14].__r_.__value_.__l.__size_;
    if (*(void *)(size + 1552)) {
      strlen(*(const char **)(size + 1552));
    }
    sub_22B1DCB28();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v3);
    (*(void (**)(void))(*(void *)a1[14].__r_.__value_.__l.__size_ + 272))();
  }
  uint64_t v5 = llvm::Module::getFunction();
  if (v5)
  {
    uint64_t v6 = (llvm::Function *)v5;
    std::string::size_type v7 = a1[14].__r_.__value_.__l.__size_;
    if (*(void *)(v7 + 1560)) {
      strlen(*(const char **)(v7 + 1560));
    }
    llvm::Module::getOrInsertFunction();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v6);
  }
  llvm::Module::getOrInsertNamedMetadata();
  if (a1[41].__r_.__value_.__s.__data_[9])
  {
    unint64_t v8 = operator new(0x20uLL);
    std::string::pointer data = a1[8].__r_.__value_.__l.__data_;
    void *v8 = data;
    v8[1] = data;
    void v8[2] = data;
    void v8[3] = data;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x6A0;
    operator new();
  }
  llvm::Value::setName();
  if (llvm::Module::getGlobalVariable())
  {
    llvm::GlobalObject::setSection();
    sub_22B2436D4((uint64_t)a1);
  }
  uint64_t v11 = llvm::Module::getFunction();
  sub_22B1EE934((uint64_t)a1, v11);
  int v12 = sub_22B1EBFD8(a1[16].__r_.__value_.__r.__words[2], a1, a1[13].__r_.__value_.__l.__size_, 16843009, 3);
  uint64_t result = 0;
  if (v12)
  {
    uint64_t result = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 80))(a1);
    if (result)
    {
      sub_22B200C40((uint64_t)a1);
      return 1;
    }
  }
  return result;
}

uint64_t sub_22B24510C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 992)) {
    return 4;
  }
  else {
    return 5;
  }
}

const char *sub_22B245120(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 993)) {
    uint64_t v1 = "context_save_toggle";
  }
  else {
    uint64_t v1 = "context_save";
  }
  BOOL v2 = "context_restore_toggle";
  if (!*(unsigned char *)(a1 + 993)) {
    BOOL v2 = "context_restore";
  }
  if (*(unsigned char *)(a1 + 992)) {
    return v1;
  }
  else {
    return v2;
  }
}

void sub_22B245160(uint64_t a1)
{
  sub_22B1ED95C(a1);
  JUMPOUT(0x230F43600);
}

void sub_22B24519C(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void sub_22B2451A8()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

BOOL sub_22B24541C(uint64_t a1)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  BOOL v2 = *(llvm::CallBase **)(*((void *)Function + 1) + 24);
  uint64_t v3 = sub_22B1F50A8(v2);
  uint64_t v4 = (unsigned char **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (void)v4) & 0x1FFFFFFFE0) != 0)
  {
    __int16 v93 = *v4;
    uint64_t v5 = *(void *)v93;
    unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 56) + 8);
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v5 = 0;
    __int16 v93 = 0;
  }
  std::string::size_type v7 = sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, (uint64_t)v2);
  MEMORY[0x270FA5388](v7);
  if (v8 >= 0x200) {
    size_t v10 = 512;
  }
  else {
    size_t v10 = v8;
  }
  uint64_t v94 = (uint64_t *)((char *)&v88 - v9);
  bzero((char *)&v88 - v9, v10);
  if (v6)
  {
    if (*(unsigned char *)(v5 + 8) == 16) {
      sub_22B242BFC(a1 + *(void *)(*(void *)a1 - 24), v93, v94);
    }
    else {
      *uint64_t v94 = v93;
    }
    uint64_t v11 = 0;
    BOOL v12 = 0;
    uint64_t v90 = a1 + 184;
    uint64_t v89 = a1 + 2440;
    uint64_t v91 = a1 + 192;
    do
    {
      std::string v13 = *(unsigned __int8 **)(*(void *)(a1 + 56) - 8 * *(unsigned int *)(*(void *)(a1 + 56) + 8) + 8 * v11);
      if (v13)
      {
        unint64_t v14 = *v13;
        if (v14 <= 0x22 && ((0x7FFFFFFF0uLL >> v14) & 1) != 0)
        {
          std::string::size_type v16 = *(llvm::MDString **)&v13[-8 * *((unsigned int *)v13 + 2)];
          if (v16)
          {
            if (!*(unsigned char *)v16)
            {
              uint64_t String = llvm::MDString::getString(v16);
              uint64_t v19 = String;
              uint64_t v20 = v18;
              uint64_t v21 = (llvm::Type **)v94[v11];
              switch(v18)
              {
                case 9:
                  if (*(void *)String != 0x747065642E726961 || *(unsigned char *)(String + 8) != 104) {
                    goto LABEL_46;
                  }
                  int v23 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
                  uint64_t v24 = *(void *)(a1 + 3552);
                  goto LABEL_53;
                case 11:
                  if (*(void *)String != 0x6E6574732E726961 || *(void *)(String + 3) != 0x6C69636E6574732ELL) {
                    goto LABEL_46;
                  }
                  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*v21);
                  uint64_t v27 = *(void *)(*(void *)a1 - 24);
                  uint64_t v28 = *(void *)(v90 + v27);
                  __int16 v101 = 257;
                  if (ScalarSizeInBits > 0x10) {
                    uint64_t v29 = 38;
                  }
                  else {
                    uint64_t v29 = 39;
                  }
                  long long v46 = (llvm::Type **)sub_22B1D7384(v27 + a1 + 8, v29, (uint64_t)v21, v28, (uint64_t)&v98);
                  int v23 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
                  uint64_t v24 = *(void *)(a1 + 3576);
                  goto LABEL_54;
                case 12:
                  if (*(void *)String == 0x65766F632E726961 && *(_DWORD *)(String + 8) == 1701273970) {
                    break;
                  }
                  goto LABEL_46;
                case 17:
                  if (*(void *)String != 0x646E65722E726961
                    || *(void *)(String + 8) != 0x65677261745F7265
                    || *(unsigned char *)(String + 16) != 116)
                  {
                    goto LABEL_46;
                  }
                  *(void *)uint64_t v95 = 0;
                  LODWORD(v98) = 1;
                  if (!sub_22B2437A8(0, (uint64_t)v13, (unsigned int *)&v98, &v95[4])) {
                    return v12;
                  }
                  LODWORD(v98) = 2;
                  if (!sub_22B2437A8(0, (uint64_t)v13, (unsigned int *)&v98, v95)) {
                    return v12;
                  }
                  uint64_t v47 = (llvm::Type **)sub_22B242678(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)v21, 4);
                  uint64_t v51 = a1 + 32 * *(unsigned int *)&v95[4];
                  uint64_t v52 = v51 + 3016;
                  uint64_t v53 = v51 + 3272;
                  if (*(_DWORD *)v95) {
                    uint64_t v54 = v53;
                  }
                  else {
                    uint64_t v54 = v52;
                  }
                  if (!*(void *)(v54 + 24)) {
                    break;
                  }
                  long long v46 = (llvm::Type **)sub_22B1EEAB0(a1 + *(void *)(*(void *)a1 - 24), v47, *(llvm::Type **)v54, *(unsigned __int8 *)(v89+ ((unint64_t)*(unsigned int *)&v95[4] << 6)+ 34), *(unsigned __int8 *)(v89+ ((unint64_t)*(unsigned int *)&v95[4] << 6)+ 33), v48, v49, v50);
                  int v23 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
                  uint64_t v24 = *(void *)(v54 + 24);
LABEL_54:
                  sub_22B1F718C(v23, v46, v24, 0);
                  break;
                default:
LABEL_46:
                  if (!sub_22B245E28((uint64_t *)String, v18)) {
                    break;
                  }
                  if (sub_22B245F54(*(_DWORD *)(a1 + 3860), v19, v20))
                  {
                    if ((unsigned __int16)*(_DWORD *)(*(void *)(a1 + 2960) + 32) >> 12 == 1)
                    {
                      uint64_t v33 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                      uint64_t v34 = llvm::ConstantInt::get();
                      __int16 v101 = 257;
                      std::string v35 = (llvm::Type ***)sub_22B1D6F68(v33, (uint64_t)v21, v34, (uint64_t)&v98);
                      std::string v36 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
                      uint64_t v37 = llvm::ConstantInt::get();
                      __int16 v101 = 257;
                      sub_22B1D4340(v36, 32, v35, v37, (uint64_t)&v98);
                      llvm::ConstantInt::get();
                      llvm::ConstantInt::get();
                      __int16 v101 = 257;
                      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
                    }
                    else
                    {
                      uint64_t v39 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                      uint64_t v40 = llvm::ConstantInt::get();
                      __int16 v101 = 257;
                      uint64_t v41 = sub_22B1D6F68(v39, (uint64_t)v21, v40, (uint64_t)&v98);
                      uint64_t v42 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                      uint64_t v43 = llvm::ConstantInt::get();
                      __int16 v101 = 257;
                      uint64_t v44 = sub_22B1D6C68(v42, v41, v43, (uint64_t)&v98);
                      uint64_t v45 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                      __int16 v101 = 257;
                      uint64_t Select = sub_22B1D7014(v45, v44, v41, (uint64_t)&v98);
                    }
                    uint64_t v21 = (llvm::Type **)Select;
                  }
                  int v23 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
                  uint64_t v24 = *(void *)(a1 + 3600);
LABEL_53:
                  long long v46 = v21;
                  goto LABEL_54;
              }
            }
          }
        }
      }
      BOOL v12 = ++v11 >= (unint64_t)v6;
    }
    while (v6 != v11);
  }
  if (v93) {
    sub_22B215D04((uint64_t)v93);
  }
  llvm::Instruction::eraseFromParent(v2);
  llvm::Function::eraseFromParent(Function);
  uint64_t v55 = llvm::Module::getFunction();
  if (v55)
  {
    unsigned int v56 = (llvm::Function *)v55;
    int v98 = v100;
    uint64_t v99 = 0x400000000;
    uint64_t v57 = *(void *)(v55 + 8);
    while (v57)
    {
      std::string::size_type v58 = *(llvm::Instruction **)(v57 + 24);
      uint64_t v57 = *(void *)(v57 + 8);
      sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, (uint64_t)v58);
      uint64_t v59 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 56);
      v97[8] = 257;
      uint64_t v60 = llvm::BasicBlock::splitBasicBlock();
      sub_22B1D6788((uint64_t)&v98, v60);
      uint64_t v61 = *(void *)(v59 + 40);
      if (v61 == v59 + 40)
      {
        uint64_t v64 = 0;
      }
      else
      {
        uint64_t v62 = v61 - 24;
        if (v61) {
          uint64_t v63 = v61 - 24;
        }
        else {
          uint64_t v63 = 0;
        }
        if (*(unsigned __int8 *)(v63 + 16) - 29 >= 0xB) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = v62;
        }
      }
      uint64_t v65 = *(void *)(a1 + 3680);
      char v66 = (void *)(v64 - 32);
      if (*(void *)(v64 - 32))
      {
        **(void **)(v64 - 16) = *(void *)(v64 - 24);
        uint64_t v67 = *(void *)(v64 - 24);
        if (v67) {
          *(void *)(v67 + 16) = *(void *)(v64 - 16);
        }
      }
      void *v66 = v65;
      if (v65)
      {
        uint64_t v70 = *(void *)(v65 + 8);
        uint64_t v68 = (void *)(v65 + 8);
        uint64_t v69 = v70;
        *(void *)(v64 - 24) = v70;
        if (v70) {
          *(void *)(v69 + 16) = v64 - 24;
        }
        *(void *)(v64 - 16) = v68;
        *uint64_t v68 = v66;
      }
      llvm::Instruction::eraseFromParent(v58);
    }
    llvm::Function::eraseFromParent(v56);
    *(void *)&v95[4] = v97;
    uint64_t v96 = 0x400000000;
    unsigned int v71 = v99;
    if (v99)
    {
      do
      {
        uint64_t v72 = (void *)v98[v71 - 1];
        LODWORD(v99) = v71 - 1;
        sub_22B1D6788((uint64_t)&v95[4], (uint64_t)v72);
        unint64_t v73 = v72 + 5;
        for (uint64_t i = (void *)v72[6]; i != v73; uint64_t i = (void *)i[1])
        {
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
        }
        uint64_t v75 = (void *)*v73;
        if ((void *)*v73 != v73)
        {
          uint64_t v76 = (llvm::Instruction *)(v75 - 3);
          uint64_t v77 = v75 ? (uint64_t)(v75 - 3) : 0;
          unsigned int v78 = *(unsigned __int8 *)(v77 + 16) - 29;
          __int16 v79 = v78 >= 0xB ? 0 : v76;
          if (v78 <= 0xA)
          {
            int NumSuccessors = llvm::Instruction::getNumSuccessors(v76);
            if (NumSuccessors)
            {
              int v81 = NumSuccessors;
              for (int j = 0; j != v81; ++j)
              {
                Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v79);
                if (llvm::BasicBlock::getSinglePredecessor(Successor))
                {
                  uint64_t v84 = llvm::Instruction::getSuccessor(v79);
                  sub_22B1D6788((uint64_t)&v98, v84);
                }
                uint64_t v85 = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v79);
                llvm::BasicBlock::removePredecessor(v85, (llvm::BasicBlock *)v72);
              }
            }
          }
        }
        llvm::BasicBlock::dropAllReferences((llvm::BasicBlock *)v72);
        unsigned int v71 = v99;
      }
      while (v99);
      while (v96)
      {
        uint64_t v86 = *(llvm::BasicBlock **)(*(void *)&v95[4] + 8 * v96 - 8);
        LODWORD(v96) = v96 - 1;
        llvm::BasicBlock::eraseFromParent(v86);
      }
    }
    if (*(_WORD **)&v95[4] != v97) {
      free(*(void **)&v95[4]);
    }
    if (v98 != (void *)v100) {
      free(v98);
    }
  }
  return 1;
}

uint64_t sub_22B245E28(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 15:
      uint64_t v4 = *a1;
      uint64_t v5 = *(uint64_t *)((char *)a1 + 7);
      BOOL v6 = v4 == 0x706D61732E726961;
      goto LABEL_14;
    case 18:
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
      int v9 = *((unsigned __int16 *)a1 + 8);
      BOOL v11 = v7 == 0x706D61732E726961 && v8 == 0x5F6B73616D5F656CLL && v9 == 28265;
      goto LABEL_17;
    case 21:
      uint64_t v12 = *a1;
      uint64_t v13 = a1[1];
      uint64_t v5 = *(uint64_t *)((char *)a1 + 13);
      BOOL v14 = v12 == 0x6F6C6F632E726961;
      uint64_t v15 = 0x656C706D61735F72;
      goto LABEL_11;
    case 22:
      uint64_t v16 = *a1;
      uint64_t v13 = a1[1];
      uint64_t v5 = *(uint64_t *)((char *)a1 + 14);
      BOOL v14 = v16 == 0x747361722E726961;
      uint64_t v15 = 0x6C706D61735F7265;
LABEL_11:
      BOOL v6 = v14 && v13 == v15;
LABEL_14:
      BOOL v11 = v6 && v5 == 0x6B73616D5F656C70;
LABEL_17:
      uint64_t result = v11;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_22B245F54(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 1 && a3 == 18)
  {
    return *(void *)a2 == 0x706D61732E726961
        && *(void *)(a2 + 8) == 0x5F6B73616D5F656CLL
        && *(_WORD *)(a2 + 16) == 28265;
  }
  else
  {
    if (a3 != 21) {
      return 0;
    }
    unint64_t v5 = 0x6169722E636F6C6FLL;
    unint64_t v6 = bswap64(*(void *)a2);
    if (v6 == 0x6169722E636F6C6FLL
      && (v5 = 0x725F73616D706C65, unint64_t v6 = bswap64(*(void *)(a2 + 8)), v6 == 0x725F73616D706C65)
      && (v5 = 0x706C655F6D61736BLL, unint64_t v6 = bswap64(*(void *)(a2 + 13)), v6 == 0x706C655F6D61736BLL))
    {
      int v7 = 0;
    }
    else if (v5 < v6)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = 1;
    }
    return v7 == 0;
  }
}

uint64_t sub_22B246030(uint64_t *a1)
{
  uint64_t v233 = *MEMORY[0x263EF8340];
  BOOL v2 = (llvm::Function **)(a1 + 20);
  uint64_t v3 = *(void *)(a1[20] + 80);
  uint64_t v4 = v3 - 24;
  if (!v3) {
    uint64_t v4 = 0;
  }
  uint64_t v208 = v4;
  uint64_t v5 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v6 = *(void *)(v4 + 40);
  if (v6) {
    uint64_t v7 = v6 - 24;
  }
  else {
    uint64_t v7 = 0;
  }
  sub_22B1FFC54(v5, v7);
  if (*((unsigned char *)a1 + 3839) || (a1[441] & 4) != 0)
  {
    uint64_t v8 = sub_22B247CEC(a1, 6, 0, (llvm::Type *)1);
    if (*((unsigned char *)a1 + 3839))
    {
      uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v10 = *(void *)(v9 + 344);
      long long v229 = *(_OWORD *)(v9 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v230, (llvm::IRBuilderBase *)(v9 + 8));
      int v231 = *(_DWORD *)(v9 + 104);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void))(*(void *)v10 + 240))(v10, &v229, 1, 0, v8, 0);
      sub_22B212008((llvm::ValueHandleBase *)(a1 + 461), v11);
      if (v230) {
        llvm::MetadataTracking::untrack();
      }
    }
    if ((a1[441] & 4) != 0)
    {
      uint64_t v12 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v13 = *(void *)(v12 + 344);
      long long v226 = *(_OWORD *)(v12 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v227, (llvm::IRBuilderBase *)(v12 + 8));
      int v228 = *(_DWORD *)(v12 + 104);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void))(*(void *)v13 + 240))(v13, &v226, 1, *((unsigned int *)a1 + 962), v8, 0);
      sub_22B212008((llvm::ValueHandleBase *)(a1 + 464), v14);
      if (v227) {
        llvm::MetadataTracking::untrack();
      }
      if (*((_DWORD *)a1 + 962) == 1 && *((int *)a1 + 738) <= 1) {
        *((_DWORD *)a1 + 738) = 2;
      }
    }
  }
  if (*((unsigned char *)a1 + 3839))
  {
    uint64_t v15 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    if (*(void *)(v15 + 1456)) {
      strlen(*(const char **)(v15 + 1456));
    }
    uint64_t v16 = sub_22B1DCB28();
    uint64_t v17 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    if (*(void *)(v17 + 1464)) {
      strlen(*(const char **)(v17 + 1464));
    }
    uint64_t v18 = sub_22B1DCB28();
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v20 = llvm::UndefValue::get();
    uint64_t v21 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v225 = 257;
    char v22 = sub_22B1D4034(v21 + 8, **(void **)(*(void *)v16 + 16), v16, 0, 0, (uint64_t)&v223);
    __int16 v222 = 257;
    uint64_t v23 = llvm::ConstantInt::get();
    uint64_t v24 = sub_22B2427EC(v19 + 8, v20, (uint64_t)v22, v23, (uint64_t)v221);
    uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v225 = 257;
    uint64_t v26 = sub_22B1D4034(v25 + 8, **(void **)(*(void *)v18 + 16), v18, 0, 0, (uint64_t)&v223);
    uint64_t v27 = (*(uint64_t (**)(uint64_t *, llvm::Value *))(*a1 + 376))(a1, v26);
    uint64_t v28 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v225 = 257;
    uint64_t v29 = v28 + 8;
    uint64_t v30 = llvm::ConstantInt::get();
    uint64_t v31 = sub_22B2427EC(v29, v24, v27, v30, (uint64_t)&v223);
    uint64_t v32 = sub_22B247CEC(a1, 0, 0, (llvm::Type *)1);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 467), v32);
    uint64_t v33 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v34 = *(void *)(v33 + 344);
    long long v218 = *(_OWORD *)(v33 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v219, (llvm::IRBuilderBase *)(v33 + 8));
    int v220 = *(_DWORD *)(v33 + 104);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void))(*(void *)v34 + 240))(v34, &v218, 1, 0, a1[469], 0);
    if (v219) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v37 = a1[463];
    __int16 v225 = 257;
    uint64_t v38 = v36 + 8;
    uint64_t v39 = llvm::ConstantInt::get();
    uint64_t v40 = sub_22B2427EC(v38, v31, v37, v39, (uint64_t)&v223);
    uint64_t v41 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v225 = 257;
    uint64_t v42 = v41 + 8;
    uint64_t v43 = llvm::ConstantInt::get();
    uint64_t v207 = sub_22B2427EC(v42, v40, v35, v43, (uint64_t)&v223);
  }
  else
  {
    uint64_t v207 = 0;
  }
  if (*((unsigned char *)a1 + 3840))
  {
    uint64_t v44 = llvm::User::operator new((llvm::User *)0x58);
    *(void *)&long long v223 = "agc.front_direction";
    __int16 v225 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    uint64_t v45 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v46 = *(void *)(v45 + 344);
    long long v215 = *(_OWORD *)(v45 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v216, (llvm::IRBuilderBase *)(v45 + 8));
    int v217 = *(_DWORD *)(v45 + 104);
    uint64_t v206 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v46 + 368))(v46, &v215, v44);
    if (v216) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v206 = 0;
  }
  uint64_t v47 = llvm::PointerType::get();
  if (*((unsigned char *)a1 + 3841) || *((unsigned char *)a1 + 3842) && (*(unsigned char *)(a1[370] + 33) & 0xE) == 0)
  {
    uint64_t v48 = sub_22B247CEC(a1, 5, 0, (llvm::Type *)2);
    uint64_t v49 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v50 = *(void *)(v49 + 344);
    long long v212 = *(_OWORD *)(v49 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v213, (llvm::IRBuilderBase *)(v49 + 8));
    int v214 = *(_DWORD *)(v49 + 104);
    uint64_t v51 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    __int16 v225 = 257;
    uint64_t v52 = sub_22B1D7384(v51, 49, v48, v47, (uint64_t)&v223);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void))(*(void *)v50 + 240))(v50, &v212, 2, 0, v52, 0);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 470), v53);
    if (v213) {
      llvm::MetadataTracking::untrack();
    }
  }
  if (*((unsigned char *)a1 + 3842) && (*(unsigned char *)(a1[370] + 33) & 0xE) != 0)
  {
    uint64_t v54 = sub_22B247CEC(a1, 5, 0, (llvm::Type *)2);
    uint64_t v55 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v56 = *(void *)(v55 + 344);
    long long v209 = *(_OWORD *)(v55 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v210, (llvm::IRBuilderBase *)(v55 + 8));
    int v211 = *(_DWORD *)(v55 + 104);
    uint64_t v57 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    __int16 v225 = 257;
    uint64_t v58 = sub_22B1D7384(v57, 49, v54, v47, (uint64_t)&v223);
    uint64_t v59 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)v56 + 240))(v56, &v209, 2, 1, v58, 0);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 473), v59);
    if (v210) {
      llvm::MetadataTracking::untrack();
    }
    if (*((int *)a1 + 738) <= 1) {
      *((_DWORD *)a1 + 738) = 2;
    }
  }
  uint64_t v60 = *v2;
  if (*((_WORD *)*v2 + 9))
  {
    llvm::Function::BuildLazyArguments(v60);
    uint64_t v62 = *v2;
    uint64_t v61 = (void *)*((void *)v60 + 11);
    if (*((_WORD *)*v2 + 9)) {
      llvm::Function::BuildLazyArguments(*v2);
    }
    uint64_t v60 = v62;
  }
  else
  {
    uint64_t v61 = (void *)*((void *)v60 + 11);
  }
  uint64_t v63 = *((void *)v60 + 11) + 40 * *((void *)v60 + 12);
  uint64_t v64 = v208;
  if (v61 == (void *)v63)
  {
LABEL_179:
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v170 = Function;
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      uint64_t v171 = *(void *)(v170 + 8);
      while (v171)
      {
        uint64_t v172 = *(llvm::CallBase **)(v171 + 24);
        uint64_t v171 = *(void *)(v171 + 8);
        sub_22B1F50A8(v172);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v172);
      }
    }
    uint64_t v173 = llvm::Module::getFunction();
    if (!v173) {
      return 1;
    }
    uint64_t v174 = v173;
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(void *)(*a1 - 24) + 160), (llvm::Type *)(((unint64_t)*(unsigned int *)(a1[370] + 32) >> 7) & 0x1E));
    uint64_t v175 = 1;
    uint64_t v176 = (uint64_t *)llvm::User::operator new((llvm::User *)0x58);
    *(void *)&long long v223 = "agc.sample_positions";
    __int16 v225 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    uint64_t v177 = *(void *)(v174 + 8);
    if (v177)
    {
      do
      {
        uint64_t v178 = *(void *)(v177 + 8);
        unsigned int v179 = *(llvm::Instruction **)(v177 + 24);
        sub_22B1FFC54((uint64_t)a1 + *(void *)(*a1 - 24) + 8, (uint64_t)v179);
        uint64_t v180 = llvm::UndefValue::get();
        uint64_t v181 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        uint64_t v182 = *((void *)v179 - 4 * (*((_DWORD *)v179 + 5) & 0x7FFFFFF));
        uint64_t v183 = llvm::ConstantInt::get();
        __int16 v225 = 257;
        uint64_t v184 = sub_22B1D7468(v181, v182, v183, (uint64_t)&v223);
        uint64_t v185 = (uint64_t)a1 + *(void *)(*a1 - 24);
        *(void *)&v232[0] = llvm::ConstantInt::get();
        *((void *)&v232[0] + 1) = v184;
        __int16 v225 = 257;
        uint64_t v186 = sub_22B229F08(v185, v176, (uint64_t **)v232, 2, (uint64_t)&v223);
        __int16 v222 = 257;
        uint64_t v187 = sub_22B1D4240((uint64_t *)(v185 + 8), **(llvm::Type ***)(*(void *)v186 + 16), v186, 0, (uint64_t)v221);
        uint64_t v188 = (uint64_t)a1 + *(void *)(*a1 - 24);
        __int16 v225 = 257;
        uint64_t v189 = v188 + 8;
        uint64_t v190 = llvm::ConstantInt::get();
        uint64_t v191 = sub_22B2427EC(v189, v180, v187, v190, (uint64_t)&v223);
        uint64_t v192 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        uint64_t v175 = 1;
        uint64_t v193 = llvm::ConstantInt::get();
        __int16 v225 = 257;
        uint64_t v194 = sub_22B1D6A70(v192, v184, v193, (uint64_t)&v223);
        uint64_t v195 = (uint64_t)a1 + *(void *)(*a1 - 24);
        *(void *)&v232[0] = llvm::ConstantInt::get();
        *((void *)&v232[0] + 1) = v194;
        __int16 v225 = 257;
        uint64_t v196 = sub_22B229F08(v195, v176, (uint64_t **)v232, 2, (uint64_t)&v223);
        __int16 v222 = 257;
        uint64_t v197 = sub_22B1D4240((uint64_t *)(v195 + 8), **(llvm::Type ***)(*(void *)v196 + 16), v196, 0, (uint64_t)v221);
        uint64_t v198 = (uint64_t)a1 + *(void *)(*a1 - 24);
        __int16 v225 = 257;
        uint64_t v199 = v198 + 8;
        uint64_t v200 = llvm::ConstantInt::get();
        sub_22B2427EC(v199, v191, v197, v200, (uint64_t)&v223);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v179);
        uint64_t v177 = v178;
      }
      while (v178);
    }
    return v175;
  }
  uint64_t v65 = a1 + 1;
  uint64_t v205 = a1 + 43;
  while (1)
  {
    if (v61[1])
    {
      uint64_t v66 = *(void *)(a1[9] + 8 * *((unsigned int *)v61 + 8));
      uint64_t v67 = *(void *)(v64 + 40);
      uint64_t v68 = v67 ? v67 - 24 : 0;
      sub_22B217B5C((uint64_t)a1 + *(void *)(*a1 - 24), v68, a1[5]);
      if ((sub_22B26C064(a1, v61, *((_DWORD *)v61 + 8), v66) & 1) == 0) {
        break;
      }
    }
LABEL_176:
    v61 += 5;
    if (v61 == (void *)v63) {
      goto LABEL_179;
    }
  }
  uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v66 - 8 * *(unsigned int *)(v66 + 8) + 8));
  unsigned int v71 = (void *)String;
  uint64_t v72 = v70;
  switch(v70)
  {
    case 12:
      BOOL v73 = *(void *)String == 0x69736F702E726961 && *(_DWORD *)(String + 8) == 1852795252;
      if (!v73) {
        goto LABEL_123;
      }
      if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12) {
        int v74 = *(unsigned __int8 *)(**(void **)(*v61 + 16) + 8);
      }
      else {
        int v74 = *(_DWORD *)(*v61 + 8);
      }
      uint64_t v125 = *(void *)(*a1 - 24);
      BOOL v73 = v74 == 0;
      long long v126 = a1 + 34;
      if (v73) {
        long long v126 = a1 + 33;
      }
      uint64_t v127 = *(uint64_t *)((char *)v126 + v125);
      uint64_t v128 = (uint64_t)a1 + v125 + 8;
      __int16 v225 = 257;
      uint64_t v129 = v207;
      goto LABEL_163;
    case 13:
      if (*(void *)String != 0x706D61732E726961 || *(void *)(String + 5) != 0x64695F656C706D61) {
        goto LABEL_123;
      }
      uint64_t v76 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344);
      if (*(void *)(v76 + 1472)) {
        strlen(*(const char **)(v76 + 1472));
      }
      uint64_t v135 = sub_22B1DCB28();
      uint64_t v136 = *(void *)(*a1 - 24);
      uint64_t v137 = (uint64_t)a1 + v136 + 8;
      __int16 v225 = 257;
      uint64_t v138 = sub_22B1D4034((uint64_t)v65 + v136, **(void **)(*(void *)v135 + 16), v135, 0, 0, (uint64_t)&v223);
      uint64_t v139 = *v61;
      __int16 v222 = 257;
      uint64_t v94 = sub_22B1D7384(v137, 38, (uint64_t)v138, v139, (uint64_t)v221);
      if (*((int *)a1 + 738) <= 1) {
        *((_DWORD *)a1 + 738) = 2;
      }
      goto LABEL_172;
    case 15:
      if (*(void *)String != 0x6E696F702E726961 || *(void *)(String + 7) != 0x64726F6F635F746ELL) {
        goto LABEL_123;
      }
      if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12) {
        int v78 = *(unsigned __int8 *)(**(void **)(*v61 + 16) + 8);
      }
      else {
        int v78 = *(_DWORD *)(*v61 + 8);
      }
      uint64_t v130 = *(void *)(*a1 - 24);
      BOOL v73 = v78 == 0;
      long long v131 = a1 + 26;
      if (!v73) {
        long long v131 = a1 + 27;
      }
      uint64_t v127 = *(uint64_t *)((char *)v131 + v130);
      uint64_t v128 = (uint64_t)a1 + v130 + 8;
      uint64_t v129 = a1[472];
      __int16 v225 = 257;
LABEL_163:
      uint64_t v119 = sub_22B1DC548(v128, v129, v127, (uint64_t)&v223);
      goto LABEL_171;
    case 16:
      if (*(void *)String != 0x6E6F72662E726961 || *(void *)(String + 8) != 0x676E696361665F74) {
        goto LABEL_123;
      }
      uint64_t v80 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v81 = *v61;
      __int16 v225 = 257;
      uint64_t v82 = 39;
      uint64_t v83 = v206;
      goto LABEL_170;
    case 17:
      if (*(void *)String != 0x646E65722E726961
        || *(void *)(String + 8) != 0x65677261745F7265
        || *(unsigned char *)(String + 16) != 116)
      {
        goto LABEL_123;
      }
      v221[0] = 0;
      LODWORD(v223) = 2;
      if (!sub_22B2437A8(0, v66, (unsigned int *)&v223, v221)) {
        return 0;
      }
      uint64_t v86 = v221[0];
      int v87 = (llvm::Type **)sub_22B247F60((uint64_t)(a1 + 304), v221[0], 0, 0);
      unint64_t v88 = *v61;
      uint64_t v89 = (llvm::Type *)llvm::FixedVectorType::get();
      uint64_t v93 = sub_22B1EEAB0((uint64_t)a1 + *(void *)(*a1 - 24), v87, v89, BYTE2(a1[8 * v86 + 309]), BYTE1(a1[8 * v86 + 309]), v90, v91, v92);
      uint64_t v94 = v93;
      if ((*(_DWORD *)(v88 + 8) & 0xFE) == 0x12)
      {
        int v95 = *(_DWORD *)(v88 + 32);
        if (v95 == *(_DWORD *)(*(void *)v93 + 32)) {
          goto LABEL_166;
        }
        uint64_t v96 = sub_22B2423A4((uint64_t)a1 + *(void *)(*a1 - 24), v93, v95, 1);
      }
      else
      {
        uint64_t v132 = (uint64_t)a1 + *(void *)(*a1 - 24);
        __int16 v225 = 257;
        uint64_t v133 = v132 + 8;
        uint64_t v134 = llvm::ConstantInt::get();
        uint64_t v96 = sub_22B242524(v133, v94, v134, (uint64_t)&v223);
      }
      uint64_t v94 = v96;
LABEL_166:
      uint64_t v64 = v208;
      goto LABEL_172;
    case 18:
      if (*(void *)String != 0x676172662E726961
        || *(void *)(String + 8) != 0x706E695F746E656DLL
        || *(_WORD *)(String + 16) != 29813)
      {
        goto LABEL_123;
      }
      *((unsigned char *)a1 + 3836) = 1;
      long long v223 = 0u;
      long long v224 = 0u;
      (*(void (**)(long long *__return_ptr, uint64_t *, void, uint64_t))(*a1 + 328))(&v223, a1, *v61, v66);
      if (!DWORD1(v223) && !a1[469])
      {
        uint64_t v99 = sub_22B247CEC(a1, 0, 0, (llvm::Type *)1);
        sub_22B212008((llvm::ValueHandleBase *)(a1 + 467), v99);
      }
      goto LABEL_148;
    case 24:
      if (*(void *)String != 0x776569762E726961
        || *(void *)(String + 8) != 0x7272615F74726F70
        || *(void *)(String + 16) != 0x7865646E695F7961)
      {
        goto LABEL_123;
      }
      *((unsigned char *)a1 + 3856) = 1;
      long long v223 = 0u;
      long long v224 = 0u;
      (*(void (**)(long long *__return_ptr, uint64_t *, void, uint64_t, const char *, uint64_t))(*a1 + 336))(&v223, a1, *v61, v66, "air.viewport_array_index", 24);
      goto LABEL_148;
    case 29:
      if (*(void *)String != 0x646E65722E726961
        || *(void *)(String + 8) != 0x65677261745F7265
        || *(void *)(String + 16) != 0x5F79617272615F74
        || *(void *)(String + 21) != 0x7865646E695F7961)
      {
        goto LABEL_123;
      }
      *((unsigned char *)a1 + 3857) = 1;
      uint64_t v117 = *a1;
      uint64_t v118 = *(void *)(*a1 - 24);
      if (*(unsigned char *)(*(uint64_t *)((char *)a1 + v118 + 344) + 1670))
      {
        long long v223 = 0u;
        long long v224 = 0u;
        (*(void (**)(long long *__return_ptr, uint64_t *, void, uint64_t, const char *, uint64_t))(v117 + 336))(&v223, a1, *v61, v66, "air.render_target_array_index", 29);
        goto LABEL_148;
      }
      uint64_t v140 = (uint64_t)a1 + v118 + 8;
      uint64_t v83 = llvm::ConstantInt::get();
      uint64_t v81 = *v61;
      __int16 v225 = 257;
      uint64_t v80 = v140;
      uint64_t v82 = 38;
LABEL_170:
      uint64_t v119 = sub_22B1D7384(v80, v82, v83, v81, (uint64_t)&v223);
      goto LABEL_171;
    default:
LABEL_123:
      if (sub_22B245E28((uint64_t *)String, v70))
      {
        uint64_t v105 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344);
        if (*(void *)(v105 + 1504)) {
          strlen(*(const char **)(v105 + 1504));
        }
        uint64_t v108 = sub_22B1DCB28();
        uint64_t v109 = *(void *)(*a1 - 24);
        uint64_t v110 = (uint64_t)a1 + v109 + 8;
        __int16 v225 = 257;
        uint64_t v111 = sub_22B1D4034((uint64_t)v65 + v109, **(void **)(*(void *)v108 + 16), v108, 0, 0, (uint64_t)&v223);
        uint64_t v112 = *v61;
        __int16 v222 = 257;
        uint64_t v94 = sub_22B1D7384(v110, 38, (uint64_t)v111, v112, (uint64_t)v221);
        if (sub_22B245F54(*((_DWORD *)a1 + 965), (uint64_t)v71, v72))
        {
          uint64_t v113 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          uint64_t v114 = llvm::ConstantInt::get();
          __int16 v225 = 257;
          uint64_t v94 = sub_22B1D6F68(v113, v94, v114, (uint64_t)&v223);
        }
        *((unsigned char *)a1 + 3838) = 1;
        goto LABEL_172;
      }
      if (v72 == 21)
      {
        if (*v71 != 0x797261622E726961
          || v71[1] != 0x5F636972746E6563
          || *(void *)((char *)v71 + 13) != 0x64726F6F635F6369)
        {
          goto LABEL_145;
        }
        uint64_t v120 = *(uint64_t *)((char *)v205 + *(void *)(*a1 - 24));
        if (((*(uint64_t (**)(uint64_t))(*(void *)v120 + 536))(v120) & 1) == 0)
        {
          char v202 = (std::string *)((char *)a1 + *(void *)(*a1 - 24) + 408);
          uint64_t v203 = "barycentric_coords not supported for this device";
          goto LABEL_190;
        }
        memset(v232, 0, sizeof(v232));
        (*(void (**)(_OWORD *__return_ptr, uint64_t *, void, uint64_t))(*a1 + 352))(v232, a1, *v61, v66);
        uint64_t v94 = sub_22B248200(a1, (unsigned int *)v232);
        if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12)
        {
          int v121 = *(_DWORD *)(*v61 + 32);
          if (v121 == 3)
          {
            uint64_t v145 = (uint64_t)a1 + *(void *)(*a1 - 24);
            __int16 v225 = 257;
            uint64_t v146 = v145 + 8;
            uint64_t v147 = llvm::ConstantInt::get();
            uint64_t v148 = sub_22B242524(v146, v94, v147, (uint64_t)&v223);
            uint64_t v149 = (uint64_t)a1 + *(void *)(*a1 - 24);
            __int16 v225 = 257;
            uint64_t v150 = v149 + 8;
            uint64_t v151 = llvm::ConstantInt::get();
            uint64_t v152 = sub_22B242524(v150, v94, v151, (uint64_t)&v223);
            uint64_t v153 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
            uint64_t v154 = llvm::ConstantFP::get();
            uint64_t v155 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
            __int16 v225 = 257;
            uint64_t v156 = sub_22B1DD390(v155, v148, v152, (uint64_t)&v223);
            __int16 v222 = 257;
            uint64_t v204 = sub_22B1DD690(v153, v154, v156, (uint64_t)v221);
            uint64_t v157 = (uint64_t)a1 + *(void *)(*a1 - 24);
            uint64_t v158 = llvm::UndefValue::get();
            __int16 v225 = 257;
            uint64_t v159 = llvm::ConstantInt::get();
            uint64_t v160 = sub_22B2427EC(v157 + 8, v158, v148, v159, (uint64_t)&v223);
            uint64_t v161 = (uint64_t)a1 + *(void *)(*a1 - 24);
            __int16 v225 = 257;
            uint64_t v162 = v161 + 8;
            uint64_t v163 = llvm::ConstantInt::get();
            uint64_t v164 = sub_22B2427EC(v162, v160, v152, v163, (uint64_t)&v223);
            uint64_t v165 = (uint64_t)a1 + *(void *)(*a1 - 24);
            __int16 v225 = 257;
            uint64_t v166 = v165 + 8;
            uint64_t v167 = llvm::ConstantInt::get();
            uint64_t v168 = v164;
            uint64_t v64 = v208;
            uint64_t v119 = sub_22B2427EC(v166, v168, v204, v167, (uint64_t)&v223);
            goto LABEL_171;
          }
          if (v121 == 2) {
            goto LABEL_172;
          }
          if (v121 != 1)
          {
LABEL_145:
            uint64_t v94 = 0;
            goto LABEL_172;
          }
        }
        uint64_t v122 = (uint64_t)a1 + *(void *)(*a1 - 24);
        __int16 v225 = 257;
        uint64_t v123 = v122 + 8;
        uint64_t v124 = llvm::ConstantInt::get();
        uint64_t v119 = sub_22B242524(v123, v94, v124, (uint64_t)&v223);
LABEL_171:
        uint64_t v94 = v119;
LABEL_172:
        if ((*(_DWORD *)(*v61 + 8) & 0xFE) == 0x12 && *(_DWORD *)(*v61 + 32) == 1)
        {
          uint64_t v141 = (uint64_t)a1 + *(void *)(*a1 - 24);
          uint64_t v142 = llvm::UndefValue::get();
          __int16 v225 = 257;
          uint64_t v143 = llvm::ConstantInt::get();
          uint64_t v144 = v142;
          uint64_t v64 = v208;
          sub_22B2427EC(v141 + 8, v144, v94, v143, (uint64_t)&v223);
        }
        llvm::Value::replaceAllUsesWith();
        goto LABEL_176;
      }
      if (v72 != 16) {
        goto LABEL_145;
      }
      if (*v71 != 0x6D6972702E726961 || v71[1] != 0x64695F6576697469) {
        goto LABEL_145;
      }
      uint64_t v107 = *(uint64_t *)((char *)v205 + *(void *)(*a1 - 24));
      if ((*(uint64_t (**)(uint64_t))(*(void *)v107 + 528))(v107))
      {
        long long v223 = 0u;
        long long v224 = 0u;
        (*(void (**)(long long *__return_ptr, uint64_t *, void))(*a1 + 344))(&v223, a1, *v61);
LABEL_148:
        uint64_t v119 = sub_22B248200(a1, (unsigned int *)&v223);
        goto LABEL_171;
      }
      char v202 = (std::string *)((char *)a1 + *(void *)(*a1 - 24) + 408);
      uint64_t v203 = "primitive_id not supported for this device";
LABEL_190:
      std::string::append(v202, v203);
      return 0;
  }
}

uint64_t sub_22B247CEC(void *a1, int a2, int a3, llvm::Type *a4)
{
  if (a4 >= 2) {
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(void *)(*a1 - 24) + 272), (llvm::Type *)a4);
  }
  uint64_t v4 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v4 + 80) |= 1u;
  llvm::GlobalObject::setAlignment();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  return v4;
}

llvm::Type *sub_22B247F60(uint64_t a1, unsigned int a2, char a3, char a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = *(void *)(a1 + 528) + 4 * a2;
  if ((a4 & 1) == 0) {
    *(void *)(a1 + 544) |= 15 << (4 * a2);
  }
  if (*(int *)(a1 + 520) <= 0) {
    *(_DWORD *)(a1 + 520) = 1;
  }
  uint64_t v9 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v10 = *(void *)(v9 + 344);
  long long v27 = *(_OWORD *)(v9 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v28, (llvm::IRBuilderBase *)(v9 + 8));
  int v29 = *(_DWORD *)(v9 + 104);
  uint64_t v11 = a1 + (v7 << 6);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, void, void, uint64_t, void))(*(void *)v10 + 200))(v10, &v27, (unsigned __int16)*(_DWORD *)(*(void *)(a1 + 528) + 32) >> 12, BYTE2(*(_DWORD *)(*(void *)(a1 + 528) + 32)), v8, *(void *)(v11 + 8));
  if (v28) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v13 = sub_22B1EEF20(a1 + *(void *)(*(void *)a1 - 24), v12, *(void *)(v11 + 24), *(_DWORD *)(v11 + 36));
  uint64_t v14 = (llvm::Type *)sub_22B248714((void *)a1, v13, 0, a2);
  if ((a3 & 1) == 0)
  {
    if (sub_22B2489F0((void *)a1, a2, 2))
    {
      uint64_t v15 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v16 = *(void *)(v15 + 344);
      long long v24 = *(_OWORD *)(v15 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v25, (llvm::IRBuilderBase *)(v15 + 8));
      int v26 = *(_DWORD *)(v15 + 104);
      uint64_t v14 = (llvm::Type *)sub_22B1DF0F4(v16, (uint64_t)&v24, v14, a1 + (v7 << 6) + 44, 1);
      if (v25) {
        llvm::MetadataTracking::untrack();
      }
    }
    uint64_t v17 = sub_22B248AA8((void *)a1, v14, a2);
    uint64_t v18 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v19 = *(void *)(v18 + 344);
    long long v21 = *(_OWORD *)(v18 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(v18 + 8));
    int v23 = *(_DWORD *)(v18 + 104);
    uint64_t v14 = (llvm::Type *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v19 + 400))(v19, &v21, v17, v8);
    if (v22) {
      llvm::MetadataTracking::untrack();
    }
  }
  return v14;
}

uint64_t sub_22B248200(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4 = a2[3];
  uint64_t v5 = *a2;
  if (a2[1] == 1)
  {
    *((unsigned char *)a1 + 3837) = 1;
    uint64_t v6 = 3;
  }
  else
  {
    uint64_t v6 = a2[2];
    if (v6 == 1)
    {
      if (*((int *)a1 + 738) <= 1) {
        *((_DWORD *)a1 + 738) = 2;
      }
      uint64_t v6 = 1;
    }
  }
  uint64_t v7 = llvm::PointerType::get();
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v9 = *((void *)a2 + 3);
  __int16 v47 = 257;
  uint64_t v10 = (uint64_t *)sub_22B1D7384(v8, 49, v9, v7, (uint64_t)v46);
  if (v6 != 3)
  {
    unsigned int v29 = a2[1];
    uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v31 = *(void *)(v30 + 344);
    uint64_t v32 = (llvm::IRBuilderBase *)(v30 + 8);
    if (v29)
    {
      long long v38 = *(_OWORD *)(v30 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v39, v32);
      int v40 = *(_DWORD *)(v30 + 104);
      uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t *, void))(*(void *)v31 + 240))(v31, &v38, v5, v6, v10, 0);
      if (!v39) {
        goto LABEL_26;
      }
    }
    else
    {
      long long v41 = *(_OWORD *)(v30 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v42, v32);
      int v43 = *(_DWORD *)(v30 + 104);
      uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v31 + 240))(v31, &v41, v5, v6, v10, a1[469]);
      if (!v42) {
        goto LABEL_26;
      }
    }
    llvm::MetadataTracking::untrack();
    goto LABEL_26;
  }
  llvm::FixedVectorType::get();
  uint64_t v12 = (uint64_t *)llvm::UndefValue::get();
  if (!v5)
  {
    if (v4 < 2) {
      return sub_22B2420E0((uint64_t)a1 + *(void *)(*a1 - 24), v12, v4, *(unsigned __int8 *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1640));
    }
    goto LABEL_29;
  }
  unsigned int v37 = v4;
  for (uint64_t i = 0; i != v5; ++i)
  {
    uint64_t v14 = *v10;
    if ((*(_DWORD *)(*v10 + 8) & 0xFE) == 0x12) {
      uint64_t v14 = **(void **)(v14 + 16);
    }
    uint64_t v15 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v16 = **(void **)(v14 + 16);
    __int16 v45 = 257;
    llvm::Type::getInt32Ty(*(llvm::Type **)(v15 + 72), v11);
    v48[0] = (uint64_t *)llvm::ConstantInt::get();
    uint64_t v17 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(void **)(v15 + 80) + 48))(*(void *)(v15 + 80), v16, v10, v48, 1, 1);
    if (!v17)
    {
      __int16 v47 = 257;
      uint64_t v17 = (llvm::GetElementPtrInst *)sub_22B1D7668(v16, v10, v48, 1);
      llvm::GetElementPtrInst::setIsInBounds(v17);
      sub_22B1D6EE0((uint64_t *)(v15 + 8), (uint64_t)v17, (uint64_t)v44);
    }
    __int16 v47 = 257;
    uint64_t v18 = sub_22B1D4240((uint64_t *)(v15 + 8), **(llvm::Type ***)(*(void *)v17 + 16), (uint64_t)v17, 0, (uint64_t)v46);
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v47 = 257;
    uint64_t v20 = v19 + 8;
    uint64_t v21 = llvm::ConstantInt::get();
    uint64_t v22 = sub_22B242524(v20, v18, v21, (uint64_t)v46);
    uint64_t v23 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v47 = 257;
    uint64_t v24 = v23 + 8;
    uint64_t v25 = llvm::ConstantInt::get();
    uint64_t v12 = (uint64_t *)sub_22B2427EC(v24, (uint64_t)v12, v22, v25, (uint64_t)v46);
  }
  if (v5 == 1)
  {
    uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v47 = 257;
    uint64_t v27 = v26 + 8;
    uint64_t v28 = llvm::ConstantInt::get();
    uint64_t v12 = (uint64_t *)sub_22B242524(v27, (uint64_t)v12, v28, (uint64_t)v46);
    unsigned int v4 = v37;
    if (v37 < 2) {
      return sub_22B2420E0((uint64_t)a1 + *(void *)(*a1 - 24), v12, v4, *(unsigned __int8 *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1640));
    }
    goto LABEL_28;
  }
  unsigned int v4 = v37;
LABEL_26:
  if (v4 >= 2)
  {
    if (v5 == 1)
    {
LABEL_28:
      uint64_t v33 = *a1;
      uint64_t v34 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 192);
LABEL_30:
      uint64_t v35 = (uint64_t)a1 + *(void *)(v33 - 24) + 8;
      __int16 v47 = 257;
      uint64_t v12 = (uint64_t *)sub_22B1D7384(v35, 49, (uint64_t)v12, v34, (uint64_t)v46);
      return sub_22B2420E0((uint64_t)a1 + *(void *)(*a1 - 24), v12, v4, *(unsigned __int8 *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1640));
    }
LABEL_29:
    uint64_t v34 = llvm::FixedVectorType::get();
    uint64_t v33 = *a1;
    goto LABEL_30;
  }
  return sub_22B2420E0((uint64_t)a1 + *(void *)(*a1 - 24), v12, v4, *(unsigned __int8 *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1640));
}

uint64_t sub_22B248714(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (((*(_DWORD *)(a1[66] + 4 * a4) >> 12) & 7) != 0)
  {
    uint64_t v10 = llvm::ConstantInt::get();
    uint64_t v11 = llvm::ConstantInt::get();
    uint64_t v12 = llvm::ConstantInt::get();
    uint64_t v13 = llvm::ConstantInt::get();
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v7 = llvm::ConstantVector::get();
    unsigned char v9[16] = 257;
    return sub_22B1D69A8(v6, a2, a2, v7, (uint64_t)v9);
  }
  return a2;
}

BOOL sub_22B2489F0(void *a1, unsigned int a2, int a3)
{
  if (!BYTE4(a1[8 * (unint64_t)a2 + 7])) {
    return 0;
  }
  if (a3 == 2)
  {
    if (LOBYTE(a1[8 * (unint64_t)a2 + 5])
      && *(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1642))
    {
      return LOBYTE(a1[8 * (unint64_t)a2 + 8]) == 0;
    }
    return 0;
  }
  if (a3 != 1 || !LOBYTE(a1[8 * (unint64_t)a2 + 5])) {
    return 0;
  }
  return !*(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1642)
      || LOBYTE(a1[8 * (unint64_t)a2 + 8]) != 0;
}

uint64_t sub_22B248AA8(void *a1, llvm::Type *a2, unsigned int a3)
{
  uint64_t v3 = (uint64_t)a2;
  uint64_t v5 = *(void *)(*a1 - 24);
  uint64_t v6 = *(_DWORD *)(a1[66] + 4 * a3) >> 5;
  uint64_t v7 = *(llvm::Constant **)a2;
  uint64_t v8 = *(llvm::Constant **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = (llvm::Constant *)**((void **)v7 + 2);
  }
  uint64_t NullValue = llvm::Constant::getNullValue(v8, a2);
  if (*((_DWORD *)v8 + 2) > 6u) {
    uint64_t v10 = llvm::ConstantInt::get();
  }
  else {
    uint64_t v10 = llvm::ConstantFP::get();
  }
  uint64_t v11 = v10;
  unsigned int v12 = *((_DWORD *)v7 + 8);
  if (v12 > v6)
  {
    uint64_t v13 = (uint64_t)a1 + v5 + 8;
    do
    {
      if (v6 == 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = NullValue;
      }
      __int16 v18 = 257;
      uint64_t v15 = llvm::ConstantInt::get();
      uint64_t v3 = sub_22B2427EC(v13, v3, v14, v15, (uint64_t)v17);
      ++v6;
    }
    while (v12 != v6);
  }
  return v3;
}

uint64_t sub_22B248C04(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 2960) + 33) & 0xE) != 0 && *(int *)(a1 + 2952) > 0) {
    return 103;
  }
  else {
    return 101;
  }
}

uint64_t sub_22B248C30()
{
  return llvm::FunctionType::get();
}

uint64_t sub_22B248C54(uint64_t a1)
{
  uint64_t v216 = *MEMORY[0x263EF8340];
  uint64_t Function = llvm::Module::getFunction();
  if (Function && *(void *)(Function + 8))
  {
    *(void *)&v211[0] = "feedback_output";
    LOWORD(v212) = 259;
    operator new();
  }
  uint64_t v3 = 0;
  int v4 = **(_DWORD **)(a1 + 3808);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 3016);
    uint64_t v6 = a1 + *(void *)(*(void *)a1 - 24);
    if (v5 == *(void *)(v6 + 272) || v5 == *(void *)(v6 + 264))
    {
      uint64_t v7 = *(void *)(v6 + 344);
      long long v206 = *(_OWORD *)(v6 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v207, (llvm::IRBuilderBase *)(v6 + 8));
      int v208 = *(_DWORD *)(v6 + 104);
      uint64_t v8 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v9 = *(void *)(a1 + 3040);
      __int16 v215 = 257;
      uint64_t v10 = sub_22B1D4240((uint64_t *)(v8 + 8), **(llvm::Type ***)(*(void *)v9 + 16), v9, 0, (uint64_t)v214);
      LOWORD(v212) = 257;
      uint64_t v11 = llvm::ConstantInt::get();
      uint64_t v12 = sub_22B242524(v8 + 8, v10, v11, (uint64_t)v211);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v7 + 32))(v7, &v206, v12, (*(_DWORD *)(*(void *)(a1 + 2960) + 32) >> 8) & 0xF);
      if (v207) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v14 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v15 = *(void *)(a1 + 3600);
      LOWORD(v212) = 257;
      uint64_t v16 = sub_22B1D4240((uint64_t *)(v14 + 8), **(llvm::Type ***)(*(void *)v15 + 16), v15, 0, (uint64_t)v211);
      uint64_t v17 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      LOWORD(v212) = 257;
      __int16 v18 = (llvm::Type **)sub_22B1D6F68(v17, v16, v13, (uint64_t)v211);
      sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v18, *(void *)(a1 + 3600), 0);
      int v4 = **(_DWORD **)(a1 + 3808);
    }
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v19 = *(void *)(a1 + 3016);
    uint64_t v20 = (uint64_t *)(a1 + *(void *)(*(void *)a1 - 24));
    if (v19 == v20[34] || v19 == v20[33])
    {
      uint64_t v21 = *(void *)(a1 + 3040);
      LOWORD(v212) = 257;
      uint64_t v22 = sub_22B1D4240(v20 + 1, **(llvm::Type ***)(*(void *)v21 + 16), v21, 0, (uint64_t)v211);
      uint64_t v23 = llvm::ConstantFP::get();
      uint64_t v24 = a1 + *(void *)(*(void *)a1 - 24);
      LOWORD(v212) = 257;
      uint64_t v25 = v24 + 8;
      uint64_t v26 = llvm::ConstantInt::get();
      uint64_t v27 = (llvm::Type **)sub_22B2427EC(v25, v22, v23, v26, (uint64_t)v211);
      sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v27, *(void *)(a1 + 3040), 0);
      int v4 = **(_DWORD **)(a1 + 3808);
    }
  }
  if ((v4 & 4) != 0)
  {
    uint64_t v28 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v29 = *(void *)(v28 + 160);
    uint64_t v30 = *(void *)(v28 + 192);
    *(void *)&v211[0] = v29;
    *((void *)&v211[0] + 1) = v30;
    llvm::StructType::get();
    uint64_t v31 = (llvm::LLVMContext *)llvm::User::operator new((llvm::User *)0x58);
    *(void *)&v211[0] = "agc.coverage";
    LOWORD(v212) = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_22B2436D4(a1 + *(void *)(*(void *)a1 - 24));
    uint64_t v32 = sub_22B1D7234(a1 + *(void *)(*(void *)a1 - 24), v31);
    uint64_t v33 = sub_22B1D7234(a1 + *(void *)(*(void *)a1 - 24), v31);
    uint64_t v34 = a1 + *(void *)(*(void *)a1 - 24);
    LOWORD(v212) = 257;
    uint64_t v35 = sub_22B1D4240((uint64_t *)(v34 + 8), **(llvm::Type ***)(*(void *)v32 + 16), (uint64_t)v32, 0, (uint64_t)v211);
    uint64_t v36 = a1 + *(void *)(*(void *)a1 - 24);
    LOWORD(v212) = 257;
    uint64_t v37 = sub_22B1D4240((uint64_t *)(v36 + 8), **(llvm::Type ***)(*(void *)v33 + 16), (uint64_t)v33, 0, (uint64_t)v211);
    uint64_t v38 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v39 = *(void *)(v38 + 344);
    long long v203 = *(_OWORD *)(v38 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v204, (llvm::IRBuilderBase *)(v38 + 8));
    int v205 = *(_DWORD *)(v38 + 104);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v39 + 32))(v39, &v203, v35, (*(_DWORD *)(*(void *)(a1 + 2960) + 32) >> 8) & 0xF);
    if (v204) {
      llvm::MetadataTracking::untrack();
    }
    if (*(unsigned char *)(a1 + 10) && (**(unsigned char **)(a1 + 3808) & 8) != 0)
    {
      uint64_t v41 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      LOWORD(v212) = 257;
      uint64_t v40 = sub_22B1FC9E0(v41, v40, (uint64_t)v211);
    }
    uint64_t v42 = *(void *)(*(void *)a1 - 24) + a1 + 8;
    LOWORD(v212) = 257;
    uint64_t v43 = sub_22B1D6F68(v42, v40, v37, (uint64_t)v211);
    uint64_t v44 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v45 = *(void *)(a1 + 3600);
    LOWORD(v212) = 257;
    uint64_t v46 = sub_22B1D4240((uint64_t *)(v44 + 8), **(llvm::Type ***)(*(void *)v45 + 16), v45, 0, (uint64_t)v211);
    uint64_t v47 = *(void *)(*(void *)a1 - 24) + a1 + 8;
    LOWORD(v212) = 257;
    uint64_t v48 = (llvm::Type **)sub_22B1D6F68(v47, v46, v43, (uint64_t)v211);
    sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v48, *(void *)(a1 + 3600), 0);
  }
  if (*(unsigned char *)(a1 + 3842))
  {
    if ((*(_DWORD *)(*(void *)(a1 + 2960) + 32) & 0xE00) != 0) {
      uint64_t v49 = a1 + 3784;
    }
    else {
      uint64_t v49 = a1 + 3760;
    }
    uint64_t v50 = *(void *)(v49 + 16);
    uint64_t v51 = a1 + *(void *)(*(void *)a1 - 24) + 8;
    llvm::ConstantFP::get();
    uint64_t Splat = llvm::ConstantDataVector::getSplat();
    LOWORD(v212) = 257;
    uint64_t v53 = sub_22B1DD690(v51, v50, Splat, (uint64_t)v211);
    uint64_t v54 = sub_22B243188(a1 + *(void *)(*(void *)a1 - 24), v53, v53);
    uint64_t v55 = llvm::ConstantFP::get();
    uint64_t v56 = *(void *)(*(void *)a1 - 24) + a1 + 8;
    LOWORD(v212) = 257;
    uint64_t v57 = sub_22B1DD690(v56, v55, v54, (uint64_t)v211);
    if (*(unsigned char *)(a1 + 3528))
    {
      if (*(unsigned char *)(a1 + 3528))
      {
        llvm::ConstantFP::get();
        LOWORD(v212) = 257;
        uint64_t FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
      }
      else
      {
        if ((*(unsigned char *)(a1 + 3528) & 2) != 0)
        {
          uint64_t v58 = a1 + *(void *)(*(void *)a1 - 24);
          uint64_t v59 = *(void *)(a1 + 3600);
          LOWORD(v212) = 257;
          uint64_t v60 = sub_22B1D4240((uint64_t *)(v58 + 8), **(llvm::Type ***)(*(void *)v59 + 16), v59, 0, (uint64_t)v211);
          llvm::ConstantFP::get();
          LOWORD(v212) = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          llvm::ConstantInt::get();
          llvm::ConstantInt::get();
          LOWORD(v212) = 257;
          uint64_t Select = llvm::IRBuilderBase::CreateSelect();
          uint64_t v62 = *(void *)(*(void *)a1 - 24) + a1 + 8;
          LOWORD(v212) = 257;
          uint64_t v63 = (llvm::Type **)sub_22B1D6F68(v62, v60, Select, (uint64_t)v211);
          sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v63, *(void *)(a1 + 3600), 0);
        }
        uint64_t FCmpHelper = 0;
      }
    }
    else
    {
      uint64_t v65 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v66 = *(void *)(v65 + 344);
      long long v200 = *(_OWORD *)(v65 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v201, (llvm::IRBuilderBase *)(v65 + 8));
      int v202 = *(_DWORD *)(v65 + 104);
      uint64_t v67 = llvm::ConstantFP::get();
      (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)v66 + 24))(v66, &v200, v67, v57, 2, *(unsigned int *)(a1 + 3832));
      if (v201) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t FCmpHelper = 0;
      *(unsigned char *)(a1 + 3532) = 1;
    }
    if ((*(unsigned char *)(*(void *)(a1 + 2960) + 33) & 0xE) == 0)
    {
      uint64_t v68 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v69 = *(void *)(v68 + 344);
      uint64_t v70 = *(void *)(v69 + 1416);
      if (v70) {
        size_t v71 = strlen(*(const char **)(v69 + 1416));
      }
      else {
        size_t v71 = 0;
      }
      uint64_t v72 = sub_22B1DB218(v68, v70, v71, *(void *)(v68 + 160), *(void *)(v68 + 160));
      uint64_t v73 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v74 = *(void *)(a1 + 3776);
      LOWORD(v212) = 257;
      uint64_t v75 = v73 + 8;
      uint64_t v76 = llvm::ConstantInt::get();
      v209[0] = sub_22B242524(v75, v74, v76, (uint64_t)v211);
      __int16 v215 = 257;
      uint64_t v77 = sub_22B1D4034(v75, *(void *)(v72 + 24), v72, (uint64_t)v209, 1, (uint64_t)v214);
      uint64_t v78 = a1 + *(void *)(*(void *)a1 - 24) + 8;
      uint64_t v79 = llvm::ConstantFP::get();
      LOWORD(v212) = 257;
      uint64_t v80 = sub_22B1DD690(v78, v79, (uint64_t)v77, (uint64_t)v211);
      uint64_t v81 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      LOWORD(v212) = 257;
      uint64_t v82 = sub_22B1DB138(v81, (uint64_t)v77, v80, (uint64_t)v211);
      __int16 v215 = 257;
      uint64_t v83 = sub_22B1F860C(v81, v57, v82, (uint64_t)v214);
      uint64_t v84 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v85 = *(void *)(v84 + 344);
      long long v197 = *(_OWORD *)(v84 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v198, (llvm::IRBuilderBase *)(v84 + 8));
      int v199 = *(_DWORD *)(v84 + 104);
      uint64_t FPCast = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v85 + 40))(v85, &v197, v83, 0);
      if (v198) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v87 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v88 = *(void *)(a1 + 3040);
      LOWORD(v212) = 257;
      uint64_t v89 = (uint64_t *)sub_22B1D4240((uint64_t *)(v87 + 8), **(llvm::Type ***)(*(void *)v88 + 16), v88, 0, (uint64_t)v211);
      uint64_t v90 = *v89;
      uint64_t v91 = a1 + *(void *)(*(void *)a1 - 24) + 8;
      __int16 v215 = 257;
      uint64_t v92 = llvm::ConstantInt::get();
      uint64_t v93 = sub_22B242524(v91, (uint64_t)v89, v92, (uint64_t)v214);
      uint64_t v94 = *(void *)(*(void *)a1 - 24);
      uint64_t v95 = **(void **)(v90 + 16);
      __int16 v210 = 257;
      if (*(void *)FPCast != v95)
      {
        uint64_t v96 = (uint64_t *)(v94 + a1 + 8);
        if (*(unsigned __int8 *)(FPCast + 16) > 0x14u)
        {
          LOWORD(v212) = 257;
          uint64_t FPCast = llvm::CastInst::CreateFPCast();
          sub_22B1D6EE0(v96, FPCast, (uint64_t)v209);
        }
        else
        {
          uint64_t v97 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v94 + a1 + 80) + 256))(*(void *)(v94 + a1 + 80), FPCast, v95);
          uint64_t FPCast = v97;
          if (v97 && *(unsigned __int8 *)(v97 + 16) >= 0x1Cu) {
            sub_22B1D6EE0(v96, v97, (uint64_t)v209);
          }
        }
      }
      LOWORD(v212) = 257;
      uint64_t v98 = sub_22B1DB138(v91, v93, FPCast, (uint64_t)v211);
      uint64_t v99 = a1 + *(void *)(*(void *)a1 - 24);
      LOWORD(v212) = 257;
      uint64_t v100 = v99 + 8;
      uint64_t v101 = llvm::ConstantInt::get();
      uint64_t v102 = (llvm::Type **)sub_22B2427EC(v100, (uint64_t)v89, v98, v101, (uint64_t)v211);
      sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), v102, *(void *)(a1 + 3040), 0);
    }
  }
  else
  {
    uint64_t FCmpHelper = 0;
  }
  char v103 = *(unsigned char *)(a1 + 3528);
  if (v103)
  {
    uint64_t v108 = *(void *)(*(void *)a1 - 24);
    uint64_t v109 = a1 + v108;
    uint64_t v110 = a1 + v108 + 8;
    if ((*(unsigned char *)(*(void *)(a1 + 3808) + 1) & 8) != 0)
    {
      uint64_t v113 = *(void *)(a1 + 3040);
      __int16 v215 = 257;
      uint64_t v114 = sub_22B1D4240((uint64_t *)(a1 + v108 + 8), **(llvm::Type ***)(*(void *)v113 + 16), v113, 0, (uint64_t)v214);
      LOWORD(v212) = 257;
      uint64_t v115 = llvm::ConstantInt::get();
      uint64_t v116 = (uint64_t *)sub_22B242524(v110, v114, v115, (uint64_t)v211);
      uint64_t v117 = sub_22B241B38(v109, v116, 1);
      uint64_t v112 = sub_22B24A91C((void *)a1, v117);
    }
    else
    {
      uint64_t v111 = *(void *)(a1 + 3624);
      LOWORD(v212) = 257;
      uint64_t v112 = sub_22B1D4240((uint64_t *)(a1 + v108 + 8), **(llvm::Type ***)(*(void *)v111 + 16), v111, 0, (uint64_t)v211);
    }
    uint64_t v118 = v112;
    uint64_t v119 = *(void *)(*(void *)a1 - 24);
    if (*(unsigned char *)(a1 + 3842))
    {
      LOWORD(v212) = 257;
      uint64_t v132 = llvm::IRBuilderBase::CreateFCmpHelper();
      uint64_t v133 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      LOWORD(v212) = 257;
      sub_22B1D6F68(v133, v132, FCmpHelper, (uint64_t)v211);
      llvm::ConstantFP::get();
      llvm::ConstantFP::get();
      LOWORD(v212) = 257;
      uint64_t v134 = llvm::IRBuilderBase::CreateSelect();
      uint64_t v135 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v136 = *(void *)(v135 + 344);
      long long v194 = *(_OWORD *)(v135 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v195, (llvm::IRBuilderBase *)(v135 + 8));
      int v196 = *(_DWORD *)(v135 + 104);
      uint64_t v137 = llvm::ConstantFP::get();
      (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)v136 + 24))(v136, &v194, v134, v137, 4, *(unsigned int *)(a1 + 3832));
      if (!v195) {
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v124 = a1 + v119;
      uint64_t v125 = *(void *)(a1 + v119 + 344);
      long long v191 = *(_OWORD *)(a1 + v119 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v192, (llvm::IRBuilderBase *)(a1 + v119 + 8));
      int v193 = *(_DWORD *)(v124 + 104);
      (*(void (**)(uint64_t, long long *, uint64_t, void, void, void))(*(void *)v125 + 24))(v125, &v191, v118, *(void *)(a1 + 3648), *(unsigned int *)(a1 + 3656), *(unsigned int *)(a1 + 3832));
      if (!v192) {
        goto LABEL_79;
      }
    }
    goto LABEL_78;
  }
  if ((*(unsigned char *)(a1 + 3528) & 0xC) != 0)
  {
    if ((*(unsigned char *)(a1 + 3528) & 4) != 0)
    {
      uint64_t v126 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v127 = *(void *)(a1 + 3552);
      LOWORD(v212) = 257;
      uint64_t v104 = sub_22B1D4240((uint64_t *)(v126 + 8), **(llvm::Type ***)(*(void *)v127 + 16), v127, 0, (uint64_t)v211);
      char v103 = *(unsigned char *)(a1 + 3528);
      if ((v103 & 8) != 0)
      {
LABEL_52:
        uint64_t v105 = a1 + *(void *)(*(void *)a1 - 24);
        uint64_t v106 = *(void *)(a1 + 3576);
        LOWORD(v212) = 257;
        uint64_t v107 = sub_22B1D4240((uint64_t *)(v105 + 8), **(llvm::Type ***)(*(void *)v106 + 16), v106, 0, (uint64_t)v211);
        if ((*(unsigned char *)(a1 + 3528) & 2) == 0) {
          goto LABEL_77;
        }
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v104 = 0;
      if ((*(unsigned char *)(a1 + 3528) & 8) != 0) {
        goto LABEL_52;
      }
    }
    uint64_t v107 = 0;
    if ((v103 & 2) == 0) {
      goto LABEL_77;
    }
LABEL_69:
    uint64_t v128 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v129 = *(void *)(a1 + 3600);
    LOWORD(v212) = 257;
    uint64_t v130 = (llvm::Type ***)sub_22B1D4240((uint64_t *)(v128 + 8), **(llvm::Type ***)(*(void *)v129 + 16), v129, 0, (uint64_t)v211);
    if (*(unsigned char *)(a1 + 3852))
    {
      uint64_t v131 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
      if (*(void *)(v131 + 1472)) {
        strlen(*(const char **)(v131 + 1472));
      }
      uint64_t v138 = sub_22B1DCB28();
      uint64_t v139 = a1 + *(void *)(*(void *)a1 - 24);
      LOWORD(v212) = 257;
      uint64_t v140 = sub_22B1D4034(v139 + 8, **(void **)(*(void *)v138 + 16), v138, 0, 0, (uint64_t)v211);
      uint64_t v141 = a1 + *(void *)(*(void *)a1 - 24) + 8;
      uint64_t v142 = llvm::ConstantInt::get();
      LOWORD(v212) = 257;
      uint64_t v143 = sub_22B1D6C68(v141, v142, (uint64_t)v140, (uint64_t)v211);
      uint64_t v144 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      LOWORD(v212) = 257;
      uint64_t v130 = (llvm::Type ***)sub_22B1D6F68(v144, (uint64_t)v130, v143, (uint64_t)v211);
    }
    uint64_t v145 = (uint64_t *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
    uint64_t v146 = llvm::ConstantInt::get();
    LOWORD(v212) = 257;
    sub_22B1D4340(v145, 33, v130, v146, (uint64_t)v211);
    llvm::ConstantFP::get();
    LOWORD(v212) = 257;
    uint64_t v104 = llvm::IRBuilderBase::CreateSelect();
    if (*(int *)(a1 + 2952) <= 1) {
      *(_DWORD *)(a1 + 2952) = 2;
    }
LABEL_77:
    uint64_t v147 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v148 = *(void *)(v147 + 344);
    long long v188 = *(_OWORD *)(v147 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v189, (llvm::IRBuilderBase *)(v147 + 8));
    int v190 = *(_DWORD *)(v147 + 104);
    (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v148 + 416))(v148, &v188, v104, v107);
    if (!v189)
    {
LABEL_79:
      *(unsigned char *)(a1 + 3532) = 1;
      goto LABEL_80;
    }
LABEL_78:
    llvm::MetadataTracking::untrack();
    goto LABEL_79;
  }
  if ((*(unsigned char *)(a1 + 3528) & 2) == 0) {
    goto LABEL_80;
  }
  uint64_t v120 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v121 = *(void *)(a1 + 3600);
  LOWORD(v212) = 257;
  uint64_t v122 = (llvm::Type ***)sub_22B1D4240((uint64_t *)(v120 + 8), **(llvm::Type ***)(*(void *)v121 + 16), v121, 0, (uint64_t)v211);
  if (!*(unsigned char *)(a1 + 3532))
  {
    uint64_t v172 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v173 = *(void *)(v172 + 344);
    long long v185 = *(_OWORD *)(v172 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v186, (llvm::IRBuilderBase *)(v172 + 8));
    int v187 = *(_DWORD *)(v172 + 104);
    (*(void (**)(uint64_t, long long *, llvm::Type ***))(*(void *)v173 + 424))(v173, &v185, v122);
    if (!v186) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (*(unsigned char *)(a1 + 3852) && (*(unsigned char *)(*(void *)(a1 + 2960) + 33) & 0xE) != 0)
  {
    uint64_t v123 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
    if (*(void *)(v123 + 1472)) {
      strlen(*(const char **)(v123 + 1472));
    }
    uint64_t v174 = sub_22B1DCB28();
    uint64_t v175 = a1 + *(void *)(*(void *)a1 - 24);
    LOWORD(v212) = 257;
    uint64_t v176 = sub_22B1D4034(v175 + 8, **(void **)(*(void *)v174 + 16), v174, 0, 0, (uint64_t)v211);
    uint64_t v177 = a1 + *(void *)(*(void *)a1 - 24) + 8;
    uint64_t v178 = llvm::ConstantInt::get();
    LOWORD(v212) = 257;
    uint64_t v179 = sub_22B1D6C68(v177, v178, (uint64_t)v176, (uint64_t)v211);
    uint64_t v180 = *(void *)(*(void *)a1 - 24) + a1 + 8;
    LOWORD(v212) = 257;
    uint64_t v122 = (llvm::Type ***)sub_22B1D6F68(v180, (uint64_t)v122, v179, (uint64_t)v211);
  }
  uint64_t v181 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v182 = llvm::ConstantInt::get();
  LOWORD(v212) = 257;
  uint64_t v183 = sub_22B1D4340((uint64_t *)(v181 + 8), 32, v122, v182, (uint64_t)v211);
  uint64_t v3 = sub_22B242CE8(v181, 4, v183);
LABEL_80:
  uint64_t v184 = v3;
  uint64_t v149 = (uint64_t *)(a1 + 2432);
  unsigned int v150 = *(unsigned __int8 *)(*(void *)(a1 + 2960) + 32);
  uint64_t result = sub_22B24AA7C((void *)a1);
  int v152 = result;
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1632))
  {
    long long v212 = 0u;
    long long v213 = 0u;
    memset(v211, 0, sizeof(v211));
    memset(v214, 0, sizeof(v214));
    for (; v150; v150 ^= v155)
    {
      unsigned int v153 = __clz(v150);
      uint64_t v154 = v153 ^ 0x1F;
      unsigned int v155 = 0x80000000 >> v153;
      int v156 = *(unsigned __int8 *)(a1 + 3008);
      unsigned int v157 = *(_DWORD *)(*(void *)(a1 + 3808) + 8);
      if (((0x80000000 >> v153) & v152) != 0) {
        int v158 = sub_22B24ACF0(a1, v154);
      }
      else {
        int v158 = 15;
      }
      if ((v155 & v156) != 0) {
        int v159 = 15;
      }
      else {
        int v159 = 0;
      }
      *((_DWORD *)v214 + v154) = v159 & v158 & ((v157 >> v154) & 1 | (8 * ((HIBYTE(v157) >> v154) & 1)) | (2 * ((BYTE1(v157) >> v154) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(v157) >> v154) & 1)));
      if ((v155 & v156) != 0) {
        uint64_t result = (uint64_t)sub_22B24ADA8(a1, v154);
      }
      else {
        uint64_t result = llvm::UndefValue::get();
      }
      *((void *)v211 + v154) = result;
    }
    uint64_t v160 = *(void *)(a1 + 2960);
    for (unsigned int i = *(unsigned __int8 *)(v160 + 32);
          i;
          uint64_t result = sub_22B24B6F4(v149, *((void *)v211 + (v162 ^ 0x1F)), v162 ^ 0x1F, *((_DWORD *)v214 + (v162 ^ 0x1F)), v184))
    {
      unsigned int v162 = __clz(i);
      i ^= 0x80000000 >> v162;
    }
  }
  else
  {
    for (;
          v150;
          uint64_t result = sub_22B24B6F4((uint64_t *)(a1 + 2432), v171, v164, v170 & v168 & ((v167 >> v164) & 1 | (8 * ((HIBYTE(v167) >> v164) & 1)) | (2 * ((BYTE1(v167) >> v164) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(v167) >> v164) & 1))), v184))
    {
      unsigned int v163 = __clz(v150);
      unsigned int v164 = v163 ^ 0x1F;
      unsigned int v165 = 0x80000000 >> v163;
      int v166 = *(unsigned __int8 *)(a1 + 3008);
      unsigned int v167 = *(_DWORD *)(*(void *)(a1 + 3808) + 8);
      if (((0x80000000 >> v163) & v152) != 0) {
        int v168 = sub_22B24ACF0(a1, v164);
      }
      else {
        int v168 = 15;
      }
      int v169 = v165 & v166;
      if ((v165 & v166) != 0) {
        int v170 = 15;
      }
      else {
        int v170 = 0;
      }
      if (v169) {
        uint64_t v171 = (uint64_t)sub_22B24ADA8(a1, v164);
      }
      else {
        uint64_t v171 = llvm::UndefValue::get();
      }
      v150 ^= v165;
    }
  }
  return result;
}

uint64_t sub_22B24A91C(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v5 = *((void *)v4 + 43);
  long long v14 = *(_OWORD *)(v4 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(v4 + 8));
  int v16 = *((_DWORD *)v4 + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v5 + 80))(v5, &v14, a2, 8, 0, 1);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v8 = *((void *)v7 + 43);
  long long v11 = *(_OWORD *)(v7 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v7 + 8));
  int v13 = *((_DWORD *)v7 + 26);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 88))(v8, &v11, v6, 8, 0, 32);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t sub_22B24AA7C(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = **(void **)(*(void *)(a1[20] + 24) + 16);
  if (v1 == *(void *)((char *)a1 + *(void *)(*a1 - 24) + 144)) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a1[7] + 8);
  int v4 = *(llvm::CallBase **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
  uint64_t v5 = sub_22B1F50A8(v4);
  if (((v5 - ((void)v4 - 32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0)
  {
    return 0;
  }
  else
  {
    MEMORY[0x270FA5388](v5);
    uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFF0)];
    if (v6 >= 0x200) {
      size_t v8 = 512;
    }
    else {
      size_t v8 = v6;
    }
    bzero(&v16[-((v6 + 15) & 0xFFFFFFFF0)], v8);
    if (v3)
    {
      if (*(unsigned char *)(v1 + 8) == 16) {
        sub_22B242BFC((uint64_t)a1 + *(void *)(*a1 - 24), *((unsigned char **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)), v7);
      }
      else {
        *uint64_t v7 = *((void *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      }
      uint64_t v10 = 0;
      unsigned __int8 v9 = 0;
      do
      {
        uint64_t v11 = *(void *)(a1[7] - 8 * *(unsigned int *)(a1[7] + 8) + 8 * v10);
        if (sub_22B1E1ED0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8)), "air.render_target"))
        {
          uint64_t v12 = v7[v10];
          if (v12)
          {
            if (*(unsigned char *)(v12 + 16) == 21)
            {
              uint64_t v13 = *(void *)(a1[9] + 8 * *(unsigned int *)(v12 + 32));
              if (v13)
              {
                if (sub_22B1E1ED0(*(llvm::MDString **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8), "air.render_target"))
                {
                  uint64_t v17 = 0;
                  unsigned int v18 = 2;
                  sub_22B2437A8(0, v13, &v18, (_DWORD *)&v17 + 1);
                  unsigned int v18 = 1;
                  sub_22B2437A8(0, v11, &v18, &v17);
                  if (HIDWORD(v17) == v17) {
                    int v14 = 1 << SBYTE4(v17);
                  }
                  else {
                    LOBYTE(v14) = 0;
                  }
                  v9 |= v14;
                }
              }
            }
          }
        }
        ++v10;
      }
      while (v3 != v10);
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t sub_22B24ACF0(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = **(_DWORD **)(a1 + 3808);
  if ((v2 & 0x20) != 0)
  {
    unsigned int v5 = (v2 >> 6) & 0x1F;
    BOOL v6 = v5 > 0x10;
    int v7 = (1 << v5) & 0x10014;
    if (v6 || v7 == 0) {
      return 15;
    }
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 3824);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(v3 + 16);
    if (v4) {
      goto LABEL_13;
    }
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(*(void *)(a1 + 3816) + 4 * a2 + 24);
  if ((v4 & 1) == 0) {
    return 0;
  }
LABEL_13:
  if (sub_22B24CBB0((v4 >> 21) & 7, (v4 >> 1) & 0x1F, (v4 >> 6) & 0x1F)) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = 7;
  }
  if (sub_22B24CBB0(HIBYTE(v4) & 7, (unsigned __int16)v4 >> 11, HIWORD(v4) & 0x1F)) {
    return v10;
  }
  else {
    return v10 | 8;
  }
}

llvm::Type **sub_22B24ADA8(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v5 = a2;
  uint64_t v6 = a1 + 32 * a2;
  uint64_t v7 = *(void *)(v6 + 3040);
  __int16 v107 = 257;
  uint64_t v11 = (llvm::Type **)sub_22B1D4240((uint64_t *)(v4 + 8), **(llvm::Type ***)(*(void *)v7 + 16), v7, 0, (uint64_t)v106);
  uint64_t v12 = *(void *)(v6 + 3296);
  if (v12)
  {
    uint64_t v13 = a1 + *(void *)(*(void *)a1 - 24);
    __int16 v107 = 257;
    int v14 = (llvm::Type **)sub_22B1D4240((uint64_t *)(v13 + 8), **(llvm::Type ***)(*(void *)v12 + 16), v12, 0, (uint64_t)v106);
  }
  else
  {
    int v14 = 0;
  }
  int v15 = **(_DWORD **)(a1 + 3808);
  uint64_t v16 = *(void *)(a1 + 3824);
  if (v16) {
    uint64_t v17 = (int *)(v16 + 16);
  }
  else {
    uint64_t v17 = (int *)(*(void *)(a1 + 3816) + 4 * v5 + 24);
  }
  int v18 = *v17;
  if (!(**(_DWORD **)(a1 + 3808) & 0x20 | *v17 & 1)) {
    goto LABEL_31;
  }
  uint64_t v19 = a1 + 2432;
  if (*(unsigned char *)(a1 + 2432 + (v5 << 6) + 60))
  {
    unsigned int v93 = v2;
    uint64_t v20 = v11;
    uint64_t v21 = v5;
    if (*(unsigned char *)(a1 + 10)) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = *(unsigned char *)(a1 + 24) == 0;
    }
    uint64_t v23 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v24 = *(void *)(v23 + 344);
    long long v101 = *(_OWORD *)(v23 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v102, (llvm::IRBuilderBase *)(v23 + 8));
    int v103 = *(_DWORD *)(v23 + 104);
    uint64_t v11 = (llvm::Type **)sub_22B1DF0F4(v24, (uint64_t)&v101, v20, a1 + (v21 << 6) + 2476, v22);
    if (v102) {
      llvm::MetadataTracking::untrack();
    }
    if (v14)
    {
      uint64_t v91 = v11;
      uint64_t v25 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v26 = *(void *)(v25 + 344);
      long long v98 = *(_OWORD *)(v25 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v99, (llvm::IRBuilderBase *)(v25 + 8));
      int v100 = *(_DWORD *)(v25 + 104);
      int v14 = (llvm::Type **)sub_22B1DF0F4(v26, (uint64_t)&v98, v14, a1 + (v21 << 6) + 2476, v22);
      if (v99) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v5 = v21;
      unsigned int v2 = v93;
      uint64_t v11 = v91;
    }
    else
    {
      uint64_t v5 = v21;
      unsigned int v2 = v93;
    }
    uint64_t v19 = a1 + 2432;
  }
  if ((v15 & 0x20) != 0)
  {
    uint64_t v27 = (llvm::Type **)sub_22B247F60(v19, v2, 0, 0);
    BOOL v28 = 1;
    uint64_t v11 = (llvm::Type **)sub_22B1EEAB0(a1 + *(void *)(*(void *)a1 - 24), v11, *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 280), 0, 1, v29, v30, v31);
    uint64_t v35 = sub_22B1EEAB0(a1 + *(void *)(*(void *)a1 - 24), v27, *(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 280), 0, 1, v32, v33, v34);
    uint64_t v37 = v35;
    switch((**(_DWORD **)(a1 + 3808) >> 6) & 0x1F)
    {
      case 1:
        uint64_t AllOnesValue = llvm::ConstantInt::get();
        goto LABEL_51;
      case 2:
        uint64_t v46 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v47 = v106;
        uint64_t v48 = (uint64_t)v11;
        goto LABEL_36;
      case 3:
        uint64_t v49 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v50 = sub_22B1FC9E0(v49, v35, (uint64_t)v106);
        __int16 v105 = 257;
        uint64_t v47 = v104;
        uint64_t v46 = v49;
        uint64_t v48 = (uint64_t)v11;
        goto LABEL_37;
      case 4:
        goto LABEL_52;
      case 5:
        uint64_t v51 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v48 = sub_22B1FC9E0(v51, (uint64_t)v11, (uint64_t)v106);
        __int16 v105 = 257;
        uint64_t v47 = v104;
        uint64_t v46 = v51;
LABEL_36:
        uint64_t v50 = v37;
LABEL_37:
        uint64_t AllOnesValue = sub_22B1D6F68(v46, v48, v50, (uint64_t)v47);
        goto LABEL_51;
      case 6:
        uint64_t v52 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
        __int16 v107 = 257;
        uint64_t AllOnesValue = sub_22B212258(v52, (uint64_t)v11, v37, (uint64_t)v106);
        goto LABEL_51;
      case 7:
        uint64_t v53 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v54 = v106;
        uint64_t v55 = (uint64_t)v11;
        goto LABEL_46;
      case 8:
        uint64_t v56 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
        __int16 v107 = 257;
        uint64_t v57 = sub_22B1D7014((uint64_t)v56, (uint64_t)v11, v35, (uint64_t)v106);
        goto LABEL_49;
      case 9:
        uint64_t v56 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
        __int16 v107 = 257;
        uint64_t v57 = sub_22B212258(v56, (uint64_t)v11, v35, (uint64_t)v106);
        goto LABEL_49;
      case 0xA:
        uint64_t v58 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v59 = v106;
        uint64_t v60 = v37;
        goto LABEL_50;
      case 0xB:
        uint64_t v61 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v62 = sub_22B1FC9E0(v61, v35, (uint64_t)v106);
        __int16 v105 = 257;
        uint64_t v54 = v104;
        uint64_t v53 = v61;
        uint64_t v55 = (uint64_t)v11;
        goto LABEL_47;
      case 0xC:
        uint64_t v58 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v59 = v106;
        uint64_t v60 = (uint64_t)v11;
        goto LABEL_50;
      case 0xD:
        uint64_t v63 = *(void *)(*(void *)a1 - 24) + a1 + 8;
        __int16 v107 = 257;
        uint64_t v55 = sub_22B1FC9E0(v63, (uint64_t)v11, (uint64_t)v106);
        __int16 v105 = 257;
        uint64_t v54 = v104;
        uint64_t v53 = v63;
LABEL_46:
        uint64_t v62 = v37;
LABEL_47:
        uint64_t AllOnesValue = sub_22B1D7014(v53, v55, v62, (uint64_t)v54);
        goto LABEL_51;
      case 0xE:
        uint64_t v56 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
        __int16 v107 = 257;
        uint64_t v57 = sub_22B1D6F68((uint64_t)v56, (uint64_t)v11, v35, (uint64_t)v106);
LABEL_49:
        uint64_t v60 = v57;
        __int16 v105 = 257;
        uint64_t v59 = v104;
        uint64_t v58 = (uint64_t)v56;
LABEL_50:
        uint64_t AllOnesValue = sub_22B1FC9E0(v58, v60, (uint64_t)v59);
        goto LABEL_51;
      case 0xF:
        uint64_t AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + *(void *)(*(void *)a1 - 24) + 280), v36);
LABEL_51:
        uint64_t v11 = (llvm::Type **)AllOnesValue;
        break;
      case 0x10:
        uint64_t v11 = (llvm::Type **)v35;
        break;
      default:
        uint64_t v11 = 0;
        break;
    }
    goto LABEL_52;
  }
  if ((v18 & 1) == 0)
  {
LABEL_31:
    BOOL v28 = 1;
    goto LABEL_52;
  }
  unsigned int v39 = *(_DWORD *)(*(void *)(a1 + 2960) + 4 * v5) & 0x1F;
  BOOL v28 = 1;
  BOOL v40 = v39 > 0x13;
  int v41 = (1 << v39) & 0x81B30;
  if (v40 || v41 == 0)
  {
    uint64_t v43 = *(void *)(a1 + 3824);
    unsigned int v94 = v2;
    uint64_t v44 = v11;
    if (v43) {
      uint64_t v45 = (_DWORD *)(v43 + 16);
    }
    else {
      uint64_t v45 = (_DWORD *)(*(void *)(a1 + 3816) + 4 * v5 + 24);
    }
    int v67 = (*v45 >> 21) & 7;
    int v68 = (*v45 >> 1) & 0x1F;
    int v69 = (*v45 >> 6) & 0x1F;
    int v89 = (unsigned __int16)*v45 >> 11;
    int v90 = HIBYTE(*v45) & 7;
    int v88 = HIWORD(*v45) & 0x1F;
    uint64_t v92 = v5;
    uint64_t v70 = a1 + 2440 + (v5 << 6);
    size_t v71 = (llvm::Type **)(v70 + 8);
    uint64_t v75 = sub_22B1EEAB0(a1 + *(void *)(*(void *)a1 - 24), v44, *(llvm::Type **)(v70 + 8), 0, 1, v8, v9, v10);
    if (v14) {
      int v14 = (llvm::Type **)sub_22B1EEAB0(a1 + *(void *)(*(void *)a1 - 24), v14, *v71, 0, 1, v72, v73, v74);
    }
    uint64_t v76 = (llvm::Type **)sub_22B247F60(v19, v94, 0, 0);
    unsigned int v78 = *(unsigned __int8 *)(v70 + 34);
    uint64_t v77 = (unsigned __int8 *)(v70 + 34);
    uint64_t v82 = sub_22B1EEAB0(a1 + *(void *)(*(void *)a1 - 24), v76, *v71, v78, *(v77 - 1), v79, v80, v81);
    if (v77[18])
    {
      int v83 = v68;
      int v84 = v69;
      int v85 = v67;
      BOOL v28 = ((*v45 >> 21) & 7u) - 1 > 1 || (HIBYTE(*v45) & 7u) - 3 < 0xFFFFFFFE;
    }
    else
    {
      BOOL v28 = 1;
      int v83 = v68;
      int v84 = v69;
      int v85 = v67;
    }
    uint64_t v86 = sub_22B24BDE4((void *)a1, v75, v14, v82, v85, v83, v84, (uint64_t)(v77 + 2), *v77, 1u);
    uint64_t v87 = sub_22B24BDE4((void *)a1, v75, v14, v82, v90, v89, v88, (uint64_t)(v77 + 2), *v77, 0);
    uint64_t v11 = (llvm::Type **)sub_22B243454(a1 + *(void *)(*(void *)a1 - 24), v86, v87);
    uint64_t v5 = v92;
    unsigned int v2 = v94;
  }
LABEL_52:
  if (sub_22B2489F0((void *)(a1 + 2432), v2, 1) && v28)
  {
    uint64_t v64 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v65 = *(void *)(v64 + 344);
    long long v95 = *(_OWORD *)(v64 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v96, (llvm::IRBuilderBase *)(v64 + 8));
    int v97 = *(_DWORD *)(v64 + 104);
    uint64_t v11 = (llvm::Type **)sub_22B1DF0F4(v65, (uint64_t)&v95, v11, a1 + (v5 << 6) + 2476, 0);
    if (v96) {
      llvm::MetadataTracking::untrack();
    }
  }
  return v11;
}

uint64_t sub_22B24B6F4(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v50 = a3;
  uint64_t v8 = (_DWORD *)(a1[66] + 4 * a3);
  uint64_t v9 = *v8 >> 5;
  uint64_t v10 = *a1;
  uint64_t v11 = *(unsigned int *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 828);
  LOBYTE(v12) = 4;
  switch(*v8 & 0x1F)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      LODWORD(v12) = (v11 + v9 - 1) & -(int)v11;
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
      unint64_t v12 = ((v11 + 2 * v9 - 1) & (unint64_t)-v11) >> 1;
      break;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x12:
      unint64_t v12 = (((4 * v9) + v11 - 1) & (unint64_t)-v11) >> 2;
      break;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      break;
    default:
      LOBYTE(v12) = 0;
      break;
  }
  int v13 = ~(-1 << v12);
  int v14 = (-1 << v9) & 0xF;
  if (((1 << (v9 - 1)) & a4) == 0) {
    int v14 = 0;
  }
  uint64_t v15 = (v14 | a4) & ~(-1 << v12);
  a1[69] |= (v15 << (4 * a3));
  int v16 = (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(v10 - 24) + 344) + 384))();
  uint64_t v17 = (char *)a1 + *(void *)(*a1 - 24);
  int v18 = (void *)*((void *)v17 + 43);
  long long v56 = *(_OWORD *)(v17 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v57, (llvm::IRBuilderBase *)(v17 + 8));
  int v58 = *((_DWORD *)v17 + 26);
  uint64_t v19 = &a1[8 * v50];
  uint64_t v20 = *v18;
  uint64_t v21 = v18;
  BOOL v22 = v8;
  uint64_t v26 = (llvm::Type **)(*(uint64_t (**)(void *, long long *, uint64_t, _DWORD *, uint64_t))(v20 + 408))(v21, &v56, a2, v8, (uint64_t)v19 + 44);
  if (v57) {
    llvm::MetadataTracking::untrack();
  }
  unsigned int v28 = *((unsigned __int8 *)v19 + 41);
  uint64_t v27 = (unsigned __int8 *)v19 + 41;
  uint64_t v29 = (llvm::Type *)sub_22B1EEAB0((uint64_t)a1 + *(void *)(*a1 - 24), v26, *(llvm::Type **)(v27 - 17), v27[1], v28, v23, v24, v25);
  uint64_t Select = (llvm::Type **)sub_22B248AA8(a1, v29, a3);
  if ((v13 & ~v16) != 0)
  {
    *(void *)&long long v59 = llvm::ConstantInt::get();
    *((void *)&v59 + 1) = llvm::ConstantInt::get();
    *(void *)&long long v60 = llvm::ConstantInt::get();
    *((void *)&v60 + 1) = llvm::ConstantInt::get();
    llvm::ConstantVector::get();
    sub_22B247F60((uint64_t)a1, a3, 1, 1);
    __int16 v55 = 257;
    uint64_t Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    uint64_t v15 = 15;
  }
  if (a5)
  {
    if (v9 <= 3)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      uint64_t v31 = v9;
      if (v9)
      {
        uint64_t v32 = 0;
        do
          *((void *)&v59 + v32++) = llvm::ConstantInt::get();
        while (v9 != v32);
      }
      do
        *((void *)&v59 + v31++) = llvm::ConstantInt::get();
      while (v31 != 4);
      uint64_t v33 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v34 = v33 + 8;
      uint64_t v35 = llvm::ConstantInt::get();
      uint64_t v36 = sub_22B242CE8(v33, 4, v35);
      uint64_t v37 = llvm::ConstantVector::get();
      __int16 v55 = 257;
      sub_22B1D69A8(v34, a5, v36, v37, (uint64_t)v54);
      BOOL v22 = v8;
    }
    sub_22B247F60((uint64_t)a1, a3, 1, 0);
    sub_22B1EEAB0((uint64_t)a1 + *(void *)(*a1 - 24), Select, *(llvm::Type **)(v27 - 17), v27[1], *v27, v38, v39, v40);
    __int16 v55 = 257;
    uint64_t Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  }
  int v41 = &a1[8 * v50];
  uint64_t v42 = sub_22B248714(a1, (uint64_t)Select, v15, a3);
  uint64_t v44 = v43;
  uint64_t v45 = sub_22B1EEF20((uint64_t)a1 + *(void *)(*a1 - 24), v42, v41[1], *((_DWORD *)v41 + 8));
  uint64_t v46 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v47 = *((void *)v46 + 43);
  long long v51 = *(_OWORD *)(v46 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v52, (llvm::IRBuilderBase *)(v46 + 8));
  int v53 = *((_DWORD *)v46 + 26);
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, void, void, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v47 + 192))(v47, &v51, (unsigned __int16)*(_DWORD *)(a1[66] + 32) >> 12, BYTE2(*(_DWORD *)(a1[66] + 32)), v22, v41[1], v45, v44);
  if (v52) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t sub_22B24BDE4(void *a1, uint64_t a2, llvm::Type **a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 24);
  if (a10)
  {
    uint64_t v17 = (llvm::Type **)a2;
    uint64_t v18 = sub_22B2423A4(v16, a2, 3, 1);
    uint64_t v19 = sub_22B2423A4((uint64_t)a1 + *(void *)(*a1 - 24), a4, 3, 1);
  }
  else
  {
    uint64_t v20 = v16 + 8;
    __int16 v51 = 257;
    uint64_t v21 = llvm::ConstantInt::get();
    uint64_t v17 = (llvm::Type **)a2;
    uint64_t v18 = sub_22B242524(v20, a2, v21, (uint64_t)v50);
    uint64_t v22 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    __int16 v51 = 257;
    uint64_t v23 = llvm::ConstantInt::get();
    uint64_t v19 = sub_22B242524(v22, a4, v23, (uint64_t)v50);
  }
  uint64_t v24 = v19;
  if (a5 == 6)
  {
    uint64_t v25 = llvm::ConstantFP::get();
    if (a10) {
      uint64_t v43 = sub_22B242CE8((uint64_t)a1 + *(void *)(*a1 - 24), 3, v25);
    }
    else {
      uint64_t v43 = v25;
    }
    goto LABEL_10;
  }
  uint64_t v43 = v18;
  if ((a5 - 1) >= 2)
  {
LABEL_10:
    uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v27 = sub_22B24C26C(a1, v17, a3, a4, a6, a8, a9, a10);
    __int16 v51 = 257;
    uint64_t v43 = sub_22B1DB138(v26, v43, v27, (uint64_t)v50);
    uint64_t v28 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v29 = sub_22B24C26C(a1, v17, a3, a4, a7, a8, a9, a10);
    __int16 v51 = 257;
    uint64_t v24 = sub_22B1DB138(v28, v24, v29, (uint64_t)v50);
  }
  switch(a5)
  {
    case 1:
      uint64_t v33 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v34 = *((void *)v33 + 43);
      long long v47 = *(_OWORD *)(v33 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v48, (llvm::IRBuilderBase *)(v33 + 8));
      int v49 = *((_DWORD *)v33 + 26);
      uint64_t v32 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v34 + 48))(v34, &v47, v43, v24, 0);
      if (v48) {
        goto LABEL_17;
      }
      return v32;
    case 2:
      uint64_t v35 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v36 = *((void *)v35 + 43);
      long long v44 = *(_OWORD *)(v35 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v45, (llvm::IRBuilderBase *)(v35 + 8));
      int v46 = *((_DWORD *)v35 + 26);
      uint64_t v32 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v36 + 56))(v36, &v44, v43, v24, 0);
      if (v45) {
LABEL_17:
      }
        llvm::MetadataTracking::untrack();
      return v32;
    case 3:
    case 6:
      uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v51 = 257;
      uint64_t v31 = sub_22B1DD390(v30, v43, v24, (uint64_t)v50);
      goto LABEL_21;
    case 4:
      uint64_t v37 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v51 = 257;
      uint64_t v38 = v43;
      uint64_t v39 = v24;
      goto LABEL_20;
    case 5:
      uint64_t v37 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v51 = 257;
      uint64_t v38 = v24;
      uint64_t v39 = v43;
LABEL_20:
      uint64_t v31 = sub_22B1DD690(v37, v38, v39, (uint64_t)v50);
LABEL_21:
      uint64_t v32 = v31;
      break;
    default:
      uint64_t v32 = 0;
      break;
  }
  return v32;
}

uint64_t sub_22B24C26C(void *a1, llvm::Type **a2, llvm::Type **a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8 = a8;
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  if ((a5 & 0xFFFFFFFC) == 0xC)
  {
    uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      uint64_t GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
      v78[0] = "agc.blend_color";
      __int16 v79 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
    }
    uint64_t v18 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    __int16 v79 = 257;
    uint64_t v19 = (void *)sub_22B1D4240(v18 + 1, **(llvm::Type ***)(*(void *)GlobalVariable + 16), GlobalVariable, 0, (uint64_t)v78);
    uint64_t v20 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v21 = *((void *)v20 + 43);
    long long v75 = *(_OWORD *)(v20 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v76, (llvm::IRBuilderBase *)(v20 + 8));
    int v77 = *((_DWORD *)v20 + 26);
    uint64_t v25 = (llvm::Type **)sub_22B1DF0F4(v21, (uint64_t)&v75, v19, a6, 0);
    if (v76) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v26 = sub_22B1EEAB0((uint64_t)a1 + *(void *)(*a1 - 24), v25, *a2, a7, 1, v22, v23, v24);
    int v8 = a8;
    uint64_t v11 = a3;
    uint64_t v10 = a4;
  }
  else
  {
    uint64_t v26 = 0;
  }
  switch(a5)
  {
    case 1:
    case 2:
      uint64_t v27 = llvm::ConstantFP::get();
      goto LABEL_39;
    case 3:
      goto LABEL_32;
    case 4:
      uint64_t v28 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v29 = llvm::ConstantFP::get();
      uint64_t v30 = (uint64_t)(v28 + 8);
      __int16 v79 = 257;
      uint64_t v31 = (uint64_t)a2;
      goto LABEL_30;
    case 5:
      uint64_t v32 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v33 = llvm::ConstantInt::get();
      uint64_t v34 = v32;
      uint64_t v35 = (uint64_t)a2;
      goto LABEL_36;
    case 6:
      uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v37 = llvm::ConstantInt::get();
      uint64_t v38 = v36;
      uint64_t v39 = (uint64_t)a2;
      goto LABEL_38;
    case 7:
      int v40 = 1;
      a2 = (llvm::Type **)v10;
      if (v8) {
        goto LABEL_41;
      }
      goto LABEL_33;
    case 8:
      int v41 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v29 = llvm::ConstantFP::get();
      uint64_t v30 = (uint64_t)(v41 + 8);
      __int16 v79 = 257;
      uint64_t v31 = v10;
      goto LABEL_30;
    case 9:
      uint64_t v42 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v33 = llvm::ConstantInt::get();
      uint64_t v34 = v42;
      uint64_t v35 = v10;
      goto LABEL_36;
    case 10:
      uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v37 = llvm::ConstantInt::get();
      uint64_t v38 = v36;
      uint64_t v39 = v10;
      goto LABEL_38;
    case 11:
      uint64_t v43 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v44 = llvm::ConstantInt::get();
      uint64_t v45 = sub_22B242524(v43, (uint64_t)a2, v44, (uint64_t)v78);
      uint64_t v46 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v47 = llvm::ConstantInt::get();
      uint64_t v48 = sub_22B242524(v46, v10, v47, (uint64_t)v78);
      uint64_t v49 = llvm::ConstantFP::get();
      __int16 v79 = 257;
      uint64_t v50 = sub_22B1DD690(v46, v49, v48, (uint64_t)v78);
      __int16 v51 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v52 = *((void *)v51 + 43);
      long long v72 = *(_OWORD *)(v51 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v73, (llvm::IRBuilderBase *)(v51 + 8));
      int v74 = *((_DWORD *)v51 + 26);
      uint64_t v53 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v52 + 48))(v52, &v72, v45, v50, 0);
      if (v73) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v54 = sub_22B242CE8((uint64_t)a1 + *(void *)(*a1 - 24), 4, v53);
      __int16 v55 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v56 = llvm::ConstantFP::get();
      __int16 v79 = 257;
      uint64_t v57 = llvm::ConstantInt::get();
      uint64_t v58 = sub_22B2427EC((uint64_t)(v55 + 8), v54, v56, v57, (uint64_t)v78);
      goto LABEL_31;
    case 12:
      int v40 = 1;
      a2 = (llvm::Type **)v26;
      if (v8) {
        goto LABEL_41;
      }
      goto LABEL_33;
    case 13:
      long long v59 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v29 = llvm::ConstantFP::get();
      uint64_t v30 = (uint64_t)(v59 + 8);
      __int16 v79 = 257;
      uint64_t v31 = v26;
      goto LABEL_30;
    case 14:
      uint64_t v60 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v33 = llvm::ConstantInt::get();
      uint64_t v34 = v60;
      uint64_t v35 = v26;
      goto LABEL_36;
    case 15:
      uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v37 = llvm::ConstantInt::get();
      uint64_t v38 = v36;
      uint64_t v39 = v26;
      goto LABEL_38;
    case 16:
      int v40 = 1;
      a2 = v11;
      if (v8) {
        goto LABEL_41;
      }
      goto LABEL_33;
    case 17:
      uint64_t v61 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v29 = llvm::ConstantFP::get();
      uint64_t v30 = (uint64_t)(v61 + 8);
      __int16 v79 = 257;
      uint64_t v31 = (uint64_t)v11;
LABEL_30:
      uint64_t v58 = sub_22B1DD690(v30, v29, v31, (uint64_t)v78);
LABEL_31:
      a2 = (llvm::Type **)v58;
LABEL_32:
      int v40 = 1;
      if (!v8) {
        goto LABEL_33;
      }
      goto LABEL_41;
    case 18:
      uint64_t v65 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v33 = llvm::ConstantInt::get();
      uint64_t v34 = v65;
      uint64_t v35 = (uint64_t)v11;
LABEL_36:
      uint64_t v27 = sub_22B242524(v34, v35, v33, (uint64_t)v78);
      goto LABEL_39;
    case 19:
      uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v79 = 257;
      uint64_t v37 = llvm::ConstantInt::get();
      uint64_t v38 = v36;
      uint64_t v39 = (uint64_t)v11;
LABEL_38:
      uint64_t v66 = sub_22B242524(v38, v39, v37, (uint64_t)v78);
      uint64_t v67 = llvm::ConstantFP::get();
      __int16 v79 = 257;
      uint64_t v27 = sub_22B1DD690(v36, v67, v66, (uint64_t)v78);
LABEL_39:
      a2 = (llvm::Type **)v27;
      break;
    default:
      a2 = 0;
      break;
  }
  int v40 = 0;
  if (v8)
  {
LABEL_41:
    uint64_t v68 = (uint64_t)a1 + *(void *)(*a1 - 24);
    if (v40) {
      return sub_22B2423A4(v68, (uint64_t)a2, 3, 1);
    }
    else {
      return sub_22B242CE8(v68, 3, (uint64_t)a2);
    }
  }
LABEL_33:
  if (v40)
  {
    uint64_t v62 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    __int16 v79 = 257;
    uint64_t v63 = llvm::ConstantInt::get();
    return sub_22B242524(v62, (uint64_t)a2, v63, (uint64_t)v78);
  }
  return (uint64_t)a2;
}

uint64_t sub_22B24CBB0(int a1, int a2, int a3)
{
  int v3 = a1 - 1;
  uint64_t result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((a2 != 2 || a3 != 1) && (a2 != 4 || a3 != 3) && (a2 != 4 || a3 != 7))
      {
        BOOL v6 = a3 == 3 || a3 == 7;
        BOOL v7 = v6;
        if ((a2 != 8 || !v7) && (a2 != 6 || a3 != 5) && (a2 != 6 || a3 != 9))
        {
          BOOL v8 = a3 == 5 || a3 == 9;
          BOOL v9 = v8;
          if ((a2 != 10 || !v9) && (a2 != 1 || a3 != 2) && (a2 != 3 || a3 != 4) && (a2 != 7 || a3 != 4))
          {
            BOOL v10 = a2 == 3 || a2 == 7;
            BOOL v11 = v10;
            if ((a3 != 8 || !v11) && (a2 != 5 || a3 != 6) && (a2 != 9 || a3 != 6))
            {
              BOOL v5 = (a2 == 5 || a2 == 9) && a3 == 10;
              goto LABEL_60;
            }
          }
        }
      }
      break;
    case 3:
      BOOL v5 = a2 == 2 && a3 == 1;
      goto LABEL_60;
    case 4:
    case 5:
      BOOL v5 = a2 == 1 && a3 == 2;
LABEL_60:
      uint64_t result = v5;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_22B24CD18(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 32)
  {
    uint64_t v3 = a1 + i;
    uint64_t v4 = *(llvm::Type **)(a1 + i + 3016);
    if (v4)
    {
      BOOL v5 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
      __int16 v44 = 257;
      uint64_t v6 = sub_22B2435DC(v5, v4, (uint64_t)v43);
      sub_22B212008((llvm::ValueHandleBase *)(v3 + 3024), v6);
    }
    BOOL v7 = *(llvm::Type **)(v3 + 3272);
    if (v7)
    {
      BOOL v8 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
      __int16 v44 = 257;
      uint64_t v9 = sub_22B2435DC(v8, v7, (uint64_t)v43);
      sub_22B212008((llvm::ValueHandleBase *)(a1 + i + 3280), v9);
    }
  }
  char v10 = *(unsigned char *)(a1 + 3528);
  if ((v10 & 4) != 0)
  {
    uint64_t v11 = a1 + *(void *)(*(void *)a1 - 24);
    long long v40 = *(_OWORD *)(v11 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v41, (llvm::IRBuilderBase *)(v11 + 8));
    int v42 = *(_DWORD *)(v11 + 104);
    sub_22B1D3CF8((char **)(*(void *)(*(void *)a1 - 24) + a1 + 8), *(char **)(*(void *)(a1 + 3728) + 40), *(char **)(*(void *)(a1 + 3728) + 32));
    uint64_t v12 = a1 + *(void *)(*(void *)a1 - 24);
    int v13 = *(llvm::Type **)(v12 + 160);
    __int16 v44 = 257;
    uint64_t v14 = sub_22B2435DC((uint64_t *)(v12 + 8), v13, (uint64_t)v43);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 3536), v14);
    sub_22B1F718C((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8), *(llvm::Type ***)(a1 + 3728), *(void *)(a1 + 3552), 0);
    uint64_t v15 = a1 + *(void *)(*(void *)a1 - 24);
    long long v37 = v40;
    uint64_t v38 = v41;
    if (v41) {
      llvm::MetadataTracking::track();
    }
    int v39 = v42;
    sub_22B1D3C74((uint64_t)&v37, v15 + 8);
    if (v38) {
      llvm::MetadataTracking::untrack();
    }
    if (v41) {
      llvm::MetadataTracking::untrack();
    }
    char v10 = *(unsigned char *)(a1 + 3528);
    if ((v10 & 8) == 0)
    {
LABEL_9:
      if ((v10 & 2) == 0) {
        goto LABEL_10;
      }
LABEL_20:
      uint64_t v21 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v22 = *(llvm::Type **)(v21 + 192);
      __int16 v44 = 257;
      uint64_t v23 = sub_22B2435DC((uint64_t *)(v21 + 8), v22, (uint64_t)v43);
      sub_22B212008((llvm::ValueHandleBase *)(a1 + 3584), v23);
      uint64_t v24 = (uint64_t *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
      uint64_t v25 = (llvm::Type **)llvm::ConstantInt::get();
      sub_22B1F718C(v24, v25, *(void *)(a1 + 3600), 0);
      if ((*(unsigned char *)(a1 + 3528) & 1) == 0) {
        return 1;
      }
      goto LABEL_21;
    }
  }
  else if ((*(unsigned char *)(a1 + 3528) & 8) == 0)
  {
    goto LABEL_9;
  }
  uint64_t v16 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v17 = *(llvm::Type **)(v16 + 184);
  __int16 v44 = 257;
  uint64_t v18 = sub_22B2435DC((uint64_t *)(v16 + 8), v17, (uint64_t)v43);
  sub_22B212008((llvm::ValueHandleBase *)(a1 + 3560), v18);
  uint64_t v19 = (uint64_t *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
  uint64_t v20 = (llvm::Type **)llvm::ConstantInt::get();
  sub_22B1F718C(v19, v20, *(void *)(a1 + 3576), 0);
  char v10 = *(unsigned char *)(a1 + 3528);
  if ((v10 & 2) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v10 & 1) == 0) {
    return 1;
  }
LABEL_21:
  if ((*(unsigned char *)(*(void *)(a1 + 3808) + 1) & 8) != 0)
  {
    uint64_t v32 = llvm::User::operator new((llvm::User *)0x58);
    v43[0] = "agc.alpha_test_ref";
    __int16 v44 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    sub_22B2436D4(a1 + *(void *)(*(void *)a1 - 24));
    uint64_t v33 = a1 + *(void *)(*(void *)a1 - 24);
    __int16 v44 = 257;
    uint64_t v34 = sub_22B1D4240((uint64_t *)(v33 + 8), **(llvm::Type ***)(*(void *)v32 + 16), v32, 0, (uint64_t)v43);
    uint64_t v35 = sub_22B24A91C((void *)a1, v34);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 3632), v35);
  }
  else
  {
    uint64_t v26 = llvm::ConstantFP::get();
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 3632), v26);
    *(_DWORD *)(a1 + 3656) = 6;
    uint64_t v27 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v28 = *(llvm::Type **)(v27 + 160);
    __int16 v44 = 257;
    uint64_t v29 = sub_22B2435DC((uint64_t *)(v27 + 8), v28, (uint64_t)v43);
    sub_22B212008((llvm::ValueHandleBase *)(a1 + 3608), v29);
    uint64_t v30 = (uint64_t *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
    uint64_t v31 = (llvm::Type **)llvm::ConstantFP::get();
    sub_22B1F718C(v30, v31, *(void *)(a1 + 3624), 0);
  }
  return 1;
}

uint64_t sub_22B24D20C(uint64_t a1)
{
  sub_22B23B86C(a1);
  __n128 v2 = sub_22B24D9E4((uint64_t *)(a1 + 2432));
  uint64_t v3 = **(void **)(*(void *)(*(void *)(a1 + 160) + 24) + 16);
  uint64_t v4 = *(void *)a1;
  if (v3 == *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 144)) {
    goto LABEL_39;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 56) + 8);
  if (!v5) {
    goto LABEL_39;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * v5;
  do
  {
    int v8 = *(unsigned __int8 *)(v3 + 8);
    uint64_t v9 = v3;
    if (v8 == 16)
    {
      uint64_t v9 = *(void *)(*(void *)(v3 + 16) + v6);
      int v8 = *(_DWORD *)(v9 + 8);
    }
    if ((v8 & 0xFE) == 0x12) {
      uint64_t v9 = **(void **)(v9 + 16);
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) - 8 * *(unsigned int *)(*(void *)(a1 + 56) + 8) + v6);
    if (sub_22B1E1ED0(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8)), "air.render_target"))
    {
      uint64_t v44 = 0;
      LODWORD(v43) = 1;
      if (!sub_22B2437A8(0, v10, (unsigned int *)&v43, (_DWORD *)&v44 + 1)) {
        return 0;
      }
      LODWORD(v43) = 2;
      if (!sub_22B2437A8(0, v10, (unsigned int *)&v43, &v44)) {
        return 0;
      }
      int v12 = v44;
      char v11 = BYTE4(v44);
      if (v44 != 1
        || ((uint64_t v13 = *(void *)(a1 + 3824)) == 0
          ? (uint64_t v14 = (unsigned int *)(*(void *)(a1 + 3816) + 4 * HIDWORD(v44) + 24))
          : (uint64_t v14 = (unsigned int *)(v13 + 16)),
            (unsigned int v15 = *v14, (v15 & 1) != 0)
         && (__n128 v2 = (__n128)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v15), (int8x16_t)xmmword_22B26F900), (int32x4_t)xmmword_22B26F910), v2.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v2), v2.n128_u16[0] = vmaxv_u16((uint16x4_t)v2.n128_u64[0]), (v2.n128_u8[0] & 1) != 0)))
      {
        uint64_t v16 = a1 + 32 * HIDWORD(v44);
        uint64_t v17 = (void *)(v16 + 3016);
        uint64_t v18 = (void *)(v16 + 3272);
        if (v44) {
          uint64_t v17 = v18;
        }
        uint64_t v19 = *(void *)a1;
        if (*(unsigned char *)(a1 + 2440 + ((unint64_t)HIDWORD(v44) << 6) + 33))
        {
          uint64_t v20 = a1 + *(void *)(v19 - 24);
          if (v9 != *(void *)(v20 + 160) && v9 != *(void *)(v20 + 152)) {
            uint64_t v9 = *(void *)(v20 + 160);
          }
        }
        uint64_t v21 = (void *)(a1 + *(void *)(v19 - 24));
        if (v9 != v21[20])
        {
          if (v9 == v21[19])
          {
            if (*v17 != v21[34])
            {
              uint64_t v22 = v21 + 33;
              goto LABEL_33;
            }
          }
          else
          {
            if (v9 == v21[24])
            {
              uint64_t v22 = v21 + 37;
              goto LABEL_33;
            }
            if (v9 == v21[23] && *v17 != v21[37])
            {
              uint64_t v22 = v21 + 36;
LABEL_33:
              *uint64_t v17 = *v22;
            }
          }
          if (!v12 && ((1 << v11) & *(_DWORD *)(*(void *)(a1 + 2960) + 32)) != 0) {
            *(unsigned char *)(a1 + 3008) |= 1 << v11;
          }
          goto LABEL_37;
        }
        uint64_t v22 = v21 + 34;
        goto LABEL_33;
      }
    }
LABEL_37:
    v6 += 8;
  }
  while (v7 != v6);
  uint64_t v4 = *(void *)a1;
LABEL_39:
  uint64_t v23 = v4;
  uint64_t v24 = *(void *)(*(void *)(a1 + *(void *)(v4 - 24) + 344) + 1360);
  int v25 = **(_DWORD **)(a1 + 3808);
  if ((v25 & 4) != 0) {
    char v26 = 1;
  }
  else {
    char v26 = v25 & 1;
  }
  if (*(unsigned char *)(a1 + 3852)) {
    char v27 = 1;
  }
  else {
    char v27 = v26;
  }
  *(unsigned char *)(a1 + 3852) = v27;
  uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(v23 + 360))(a1, v2);
  if (!result) {
    return result;
  }
  if ((v25 & 0x800) != 0)
  {
    char v32 = *(unsigned char *)(a1 + 3528);
    goto LABEL_57;
  }
  int v29 = *(unsigned __int8 *)(a1 + 3843);
  if (!*(unsigned char *)(a1 + 3843) && !*(unsigned char *)(a1 + 3855))
  {
    if (*(unsigned char *)(a1 + 3852))
    {
      char v32 = *(unsigned char *)(a1 + 3528);
LABEL_69:
      char v33 = v32 | 2;
      goto LABEL_58;
    }
    if (!*(unsigned char *)(a1 + 3853) || (**(unsigned char **)(a1 + 3808) & 0x10) != 0) {
      goto LABEL_59;
    }
    char v32 = *(unsigned char *)(a1 + 3528);
    if (!v24) {
      goto LABEL_69;
    }
LABEL_57:
    char v33 = v32 | 1;
LABEL_58:
    *(unsigned char *)(a1 + 3528) = v33;
    goto LABEL_59;
  }
  if (*(unsigned char *)(a1 + 3853) || *(unsigned char *)(a1 + 3852)) {
    char v30 = *(unsigned char *)(a1 + 3528) | 2;
  }
  else {
    char v30 = *(unsigned char *)(a1 + 3528);
  }
  int v31 = *(unsigned __int8 *)(a1 + 3855);
  *(unsigned char *)(a1 + 3528) = v30 & 0xF3 | (4 * v29) | (8 * v31);
  if (!v29 && v31 && (v30 & 2) != 0)
  {
    *(unsigned char *)(a1 + 3528) = v30 & 0xF3 | (4 * v29) | (8 * v31) | 4;
    *(unsigned char *)(a1 + 3843) = 1;
    *(void *)(a1 + 3844) = 0x100000000;
  }
LABEL_59:
  if ((*(unsigned char *)(*(void *)(a1 + 2960) + 33) & 0xEE) != 0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    llvm::ConstantInt::get();
    uint64_t v43 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    uint64_t v34 = *(void *)(a1 + 2960);
    *(_DWORD *)(a1 + 3832) = ~(-1 << (BYTE1(*(_DWORD *)(v34 + 32)) & 0xF));
    if ((((*(_DWORD *)(v34 + 32) >> 8) ^ (*(_DWORD *)(v34 + 32) >> 12)) & 0xF) != 0)
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      uint64_t v43 = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      llvm::Module::getOrInsertNamedMetadata();
      uint64_t v35 = *(_DWORD *)(a1 + 3860) > 1u ? 0 : llvm::MDString::get();
      uint64_t v43 = v35;
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (*(_DWORD *)(a1 + 3860) == 1)
      {
        llvm::Module::getOrInsertNamedMetadata();
        llvm::ConstantInt::get();
        uint64_t v43 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 3832) = 1;
  }
  *(void *)(a1 + 3000) = llvm::Module::getOrInsertNamedMetadata();
  uint64_t v36 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24));
  std::string::size_type size = v36[13].__r_.__value_.__l.__size_;
  std::string::size_type v38 = size + 8;
  for (uint64_t i = *(void *)(size + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v38) {
      return 1;
    }
    long long v40 = (uint64_t *)(i - 56);
    if (!i) {
      long long v40 = 0;
    }
    uint64_t v41 = *v40;
    if (*v40)
    {
      int v42 = *(_DWORD *)(v41 + 8);
      if ((v42 & 0xFE) == 0x12) {
        int v42 = *(_DWORD *)(**(void **)(v41 + 16) + 8);
      }
      if ((v42 & 0xFFFFFF00) == 0x300 && v40[1]) {
        break;
      }
    }
  }
  std::string::append(v36 + 17, "Fragment shaders do not support shader declared threadgroup variables");
  return 0;
}

__n128 sub_22B24D9E4(uint64_t *a1)
{
  uint64_t v1 = a1[66];
  unsigned int v2 = *(unsigned __int8 *)(v1 + 32);
  if (*(unsigned char *)(v1 + 32))
  {
    uint64_t v4 = a1 + 43;
    do
    {
      unsigned int v5 = __clz(v2);
      uint64_t v6 = v5 ^ 0x1F;
      uint64_t v7 = *a1;
      int v8 = *(unsigned char **)((char *)v4 + *(void *)(*a1 - 24));
      if (v8[1638])
      {
        if (*(unsigned __int8 *)(a1[66] + 34) <= (*(_DWORD *)(a1[66] + 4 * v6) >> 15))
        {
          *((_DWORD *)a1 + 134) = 1;
          int v8 = *(unsigned char **)((char *)v4 + *(void *)(v7 - 24));
        }
      }
      v2 ^= 0x80000000 >> v5;
      (*(void (**)(_OWORD *__return_ptr))(*(void *)v8 + 376))(v12);
      uint64_t v9 = &a1[8 * v6];
      long long v10 = v12[1];
      *(_OWORD *)(v9 + 1) = v12[0];
      *(_OWORD *)(v9 + 3) = v10;
      *(_OWORD *)(v9 + 5) = v13[0];
      __n128 result = *(__n128 *)((char *)v13 + 9);
      *(_OWORD *)((char *)v9 + 49) = *(_OWORD *)((char *)v13 + 9);
    }
    while (v2);
  }
  return result;
}

uint64_t sub_22B24DB14(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5 = 0;
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v6 - 24)) = a2[1];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  do
  {
    uint64_t v7 = a1 + v5;
    *(unsigned char *)(v7 + 60) = 0;
    *(unsigned char *)(v7 + 64) = 0;
    v5 += 64;
  }
  while (v5 != 512);
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = a3;
  *(_DWORD *)(a1 + 536) = *(unsigned __int8 *)(a3 + 34);
  *(_OWORD *)(a1 + 544) = 0u;
  *(unsigned char *)(a1 + 560) = 0;
  if (a4) {
    sub_22B24D9E4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_22B24DC4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)a1 + *(void *)(*a1 - 24);
  uint64_t v4 = *(int **)(v3 + 560);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 9u && (uint64_t v6 = v5[4]) != 0) {
    uint64_t v7 = (int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = (uint64_t *)(v3 + 704);
  *(unsigned char *)(v3 + 774) = 1;
  uint64_t v9 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v10 = *v9;
  if (v10 < 0x15)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (v10 < 0x11) {
      goto LABEL_14;
    }
  }
  else if (v9[10])
  {
    uint64_t v11 = *(void *)((char *)v7 + v9[10]);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v13 = v9[8];
  if (v13) {
    uint64_t v12 = *(void *)((char *)v7 + v13);
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_14:
  uint64_t v14 = *(uint64_t *)((char *)a1 + *(void *)(v2 - 24) + 344);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 392))(v14, a1[66], v12, v11);
  sub_22B1ECA00(v8, 8, a1[69] & v15);
  if (!*((unsigned char *)a1 + 560))
  {
    uint64_t v19 = (unsigned __int16 *)((char *)v7 - *v7);
    unsigned int v20 = *v19;
    if (v20 < 0x13)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      if (v20 < 0xF)
      {
LABEL_29:
        uint64_t v24 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344);
        uint64_t v17 = a1[68] & (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v24 + 392))(v24, a1[66], v22, v21);
        goto LABEL_30;
      }
    }
    else if (v19[9])
    {
      uint64_t v21 = *(void *)((char *)v7 + v19[9]);
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v23 = v19[7];
    if (v23) {
      uint64_t v22 = *(void *)((char *)v7 + v23);
    }
    else {
      uint64_t v22 = 0;
    }
    goto LABEL_29;
  }
  unsigned int v16 = *(unsigned __int8 *)(a1[66] + 32);
  if (*(unsigned char *)(a1[66] + 32))
  {
    uint64_t v17 = 0;
    do
    {
      char v18 = __clz(v16);
      v17 |= 15 << (124 - 4 * v18);
      v16 ^= 0x80000000 >> v18;
    }
    while (v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_30:
  sub_22B1ECA00(v8, 6, v17);
  return v8;
}

uint64_t sub_22B24DEB8(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v11 = sub_22B26AFAC((uint64_t *)a1, a2 + 1, (uint64_t)a3, "air.fragment", *a4, a6);
  sub_22B24DB14((uint64_t)(v11 + 304), a2 + 5, a5, 0);
  uint64_t v12 = 0;
  uint64_t v13 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v13 - 24)) = a2[7];
  *(void *)(a1 + 2432) = a2[8];
  *(unsigned char *)(a1 + 3008) = 0;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3256) = 0u;
  do
  {
    *(void *)(a1 + v12 + 3024) = 4;
    *(_OWORD *)(a1 + v12 + 3032) = 0uLL;
    v12 += 32;
  }
  while (v12 != 256);
  uint64_t v14 = 0;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3416) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3272) = 0u;
  *(_OWORD *)(a1 + 3288) = 0u;
  do
  {
    *(void *)(a1 + v14 + 3280) = 4;
    *(_OWORD *)(a1 + v14 + 3288) = 0uLL;
    v14 += 32;
  }
  while (v14 != 256);
  *(unsigned char *)(a1 + 3528) = 0;
  *(unsigned char *)(a1 + 3532) = 0;
  *(void *)(a1 + 3536) = 4;
  *(void *)(a1 + 3552) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3560) = 4;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3568) = 0;
  *(void *)(a1 + 3584) = 4;
  *(void *)(a1 + 3600) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3608) = 4;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3616) = 0;
  *(void *)(a1 + 3632) = 4;
  *(void *)(a1 + 3648) = 0;
  *(void *)(a1 + 3640) = 0;
  *(_DWORD *)(a1 + 3656) = (unsigned __int16)*(_DWORD *)*a4 >> 12;
  *(void *)(a1 + 3664) = 4;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3688) = 4;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3696) = 0;
  *(void *)(a1 + 3712) = 4;
  *(void *)(a1 + 3728) = 0;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3736) = 4;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3744) = 0;
  *(void *)(a1 + 3760) = 4;
  *(void *)(a1 + 3776) = 0;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3784) = 4;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3792) = 0;
  long long v15 = *(_OWORD *)a4;
  *(void *)(a1 + 3824) = a4[2];
  *(_OWORD *)(a1 + 3808) = v15;
  *(unsigned char *)(a1 + 3843) = 0;
  *(void *)(a1 + 3832) = 0;
  *(_WORD *)(a1 + 3840) = 0;
  uint64_t v76 = "air.fragment";
  *(void *)(a1 + 3844) = 0x400000000;
  *(void *)(a1 + 3852) = 0;
  *(_DWORD *)(a1 + 3860) = 0;
  __int16 v77 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a3, (const llvm::Twine *)&v76);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  unint64_t v18 = *(unsigned int *)(Operand + 8);
  if (v18 >= 4)
  {
    uint64_t v19 = Operand;
    for (unint64_t i = 3; i < v18; ++i)
    {
      uint64_t v21 = *(unsigned __int8 **)(v19 - 8 * v18 + 8 * i);
      unint64_t v22 = *v21;
      BOOL v23 = v22 > 0x22 || ((0x7FFFFFFF0uLL >> v22) & 1) == 0;
      if (!v23)
      {
        unint64_t v24 = *((unsigned int *)v21 + 2);
        if (v24)
        {
          for (unint64_t j = 0; j < v24; ++j)
          {
            if (sub_22B1E1ED0(*(llvm::MDString **)&v21[8 * j + -8 * v24], "air.fragment_rate"))
            {
              uint64_t String = llvm::MDString::getString(*(llvm::MDString **)&v21[8 * j + 8 + -8 * *((unsigned int *)v21 + 2)]);
              if (v27 == 5)
              {
                BOOL v28 = *(_DWORD *)String == 1869377379 && *(unsigned char *)(String + 4) == 114;
                BOOL v29 = v28;
              }
              else
              {
                BOOL v29 = 0;
              }
              *(_DWORD *)(a1 + 3860) = v29;
              if ((((*(_DWORD *)(*(void *)(a1 + 2960) + 32) >> 12) ^ (*(_DWORD *)(*(void *)(a1 + 2960) + 32) >> 8)) & 0xF) == 0) {
                *(_DWORD *)(a1 + 3860) = 0;
              }
            }
            unint64_t v24 = *((unsigned int *)v21 + 2);
          }
          unint64_t v18 = *(unsigned int *)(v19 + 8);
        }
      }
    }
  }
  uint64_t v30 = *(unsigned int *)(a1 + 80);
  if (v30)
  {
    for (uint64_t k = 0; k != v30; ++k)
    {
      uint64_t v32 = *(void *)(*(void *)(a1 + 72) + 8 * k);
      if (v32)
      {
        uint64_t v33 = llvm::MDString::getString(*(llvm::MDString **)(v32 - 8 * *(unsigned int *)(v32 + 8) + 8));
        switch(v34)
        {
          case 12:
            if (*(void *)v33 == 0x69736F702E726961 && *(_DWORD *)(v33 + 8) == 1852795252) {
              *(unsigned char *)(a1 + 3839) = 1;
            }
            break;
          case 15:
            if (*(void *)v33 == 0x6E696F702E726961 && *(void *)(v33 + 7) == 0x64726F6F635F746ELL) {
              *(unsigned char *)(a1 + 3841) = 1;
            }
            break;
          case 16:
            if (*(void *)v33 == 0x6E6F72662E726961 && *(void *)(v33 + 8) == 0x676E696361665F74) {
              *(unsigned char *)(a1 + 3840) = 1;
            }
            break;
          case 18:
            if (*(void *)v33 == 0x706D61732E726961
              && *(void *)(v33 + 8) == 0x5F6B73616D5F656CLL
              && *(_WORD *)(v33 + 16) == 28265)
            {
              uint64_t v40 = *(unsigned int *)(v32 + 8);
              if (v32 - 8 * v40 + 16 == v32)
              {
                BOOL v43 = 0;
              }
              else
              {
                uint64_t v41 = -8 * v40;
                uint64_t v42 = v32 + 16;
                do
                {
                  BOOL v43 = sub_22B1E1ED0(*(llvm::MDString **)(v42 + v41), "air.post_depth_coverage");
                  if (v43) {
                    break;
                  }
                  BOOL v23 = v41 == -24;
                  v41 += 8;
                }
                while (!v23);
              }
              *(unsigned char *)(a1 + 3854) = v43;
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  int v44 = **(_DWORD **)(a1 + 3808);
  BOOL v45 = (v44 & 0x60000) == 0x40000 && ((v44 & 0x10000) != 0 || (*(unsigned char *)(*(void *)(a1 + 2960) + 33) & 0xE) != 0);
  *(unsigned char *)(a1 + 3842) = v45;
  uint64_t v46 = *(void *)(a1 + 56);
  if (v46)
  {
    uint64_t v47 = *(unsigned int *)(v46 + 8);
    if (v47)
    {
      uint64_t v48 = 0;
      while (1)
      {
        uint64_t v49 = *(void *)(*(void *)(a1 + 56) - 8 * *(unsigned int *)(*(void *)(a1 + 56) + 8) + 8 * v48);
        uint64_t v50 = llvm::MDString::getString(*(llvm::MDString **)(v49 - 8 * *(unsigned int *)(v49 + 8)));
        uint64_t v52 = (void *)v50;
        uint64_t v53 = v51;
        if (v51 == 12) {
          break;
        }
        if (v51 != 9) {
          goto LABEL_90;
        }
        if (*(void *)v50 != 0x747065642E726961 || *(unsigned char *)(v50 + 8) != 104) {
          goto LABEL_90;
        }
        *(unsigned char *)(a1 + 3843) = 1;
        *(_DWORD *)(a1 + 3848) = 0;
        uint64_t v55 = *(unsigned int *)(v49 + 8);
        if (v55 >= 2)
        {
          uint64_t v57 = 1;
          while (1)
          {
            uint64_t v56 = v49 - 8 * v55;
            uint64_t v58 = *(llvm::MDString **)(v56 + 8 * v57);
            if (!*(unsigned char *)v58) {
              break;
            }
            if (v55 == ++v57) {
              goto LABEL_127;
            }
          }
          uint64_t v61 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v56 + 8 * v57));
          if (v62 == 19)
          {
            BOOL v63 = *v61 == 0x747065642E726961 && v61[1] == 0x66696C6175715F68;
            if (v63 && *(void *)((char *)v61 + 11) == 0x72656966696C6175) {
              uint64_t v58 = *(llvm::MDString **)(v49 - 8 * *(unsigned int *)(v49 + 8) + 8 * (v57 + 1));
            }
          }
          uint64_t v65 = (void *)llvm::MDString::getString(v58);
          switch(v66)
          {
            case 11:
              if (*v65 == 0x616572672E726961 && *(void *)((char *)v65 + 3) == 0x726574616572672ELL)
              {
                int v67 = 1;
                goto LABEL_125;
              }
              break;
            case 8:
              int v68 = 2 * (*v65 == 0x7373656C2E726961);
              goto LABEL_126;
            case 7:
              int v67 = 0;
              int v68 = 0;
              if (*(_DWORD *)v65 != 779250017 || *(_DWORD *)((char *)v65 + 3) != 2037276974) {
                goto LABEL_126;
              }
LABEL_125:
              int v68 = v67;
LABEL_126:
              *(_DWORD *)(a1 + 3844) = v68;
              goto LABEL_127;
          }
          int v68 = 0;
          goto LABEL_126;
        }
LABEL_127:
        if (++v48 == v47) {
          goto LABEL_128;
        }
      }
      if (*(void *)v50 != 0x65766F632E726961 || *(_DWORD *)(v50 + 8) != 1701273970)
      {
LABEL_90:
        if (!sub_22B245E28((uint64_t *)v50, v51))
        {
          if (v53 == 11 && *v52 == 0x6E6574732E726961 && *(void *)((char *)v52 + 3) == 0x6C69636E6574732ELL) {
            *(unsigned char *)(a1 + 3855) = 1;
          }
          goto LABEL_127;
        }
      }
      *(unsigned char *)(a1 + 3852) = 1;
      goto LABEL_127;
    }
  }
LABEL_128:
  uint64_t Function = llvm::Module::getFunction();
  if (Function) {
    BOOL v72 = *(void *)(Function + 8) != 0;
  }
  else {
    BOOL v72 = 0;
  }
  *(unsigned char *)(a1 + 3853) = v72;
  uint64_t v73 = llvm::Module::getFunction();
  if (v73) {
    BOOL v74 = *(void *)(v73 + 8) != 0;
  }
  else {
    BOOL v74 = 0;
  }
  *(unsigned char *)(a1 + 11) = v74;
  return a1;
}

uint64_t sub_22B24E75C(uint64_t a1)
{
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v3 = *(int **)(v2 + 560);
  uint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 >= 9u && (uint64_t v5 = v4[4]) != 0) {
    uint64_t v6 = (int *)((char *)v3 + v5 + *(unsigned int *)((char *)v3 + v5));
  }
  else {
    uint64_t v6 = 0;
  }
  int v16 = 0;
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0xDu && (uint64_t v8 = v7[6]) != 0) {
    uint64_t v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    uint64_t v9 = 0;
  }
  BOOL v10 = sub_22B1EDC04(v2, v9, &v16);
  uint64_t v11 = sub_22B24DC4C((uint64_t *)(a1 + 2432));
  __int16 v13 = v12;
  int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 432))();
  sub_22B1EF4B8(v11, 4, v14);
  if (v10) {
    sub_22B1EC980(v11, 10, v16);
  }
  sub_22B1EF4B8(v11, 12, *(char *)(a1 + 3844));
  return sub_22B1ECAA8((uint64_t)v11, v13);
}

uint64_t sub_22B24E8E0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v17 = a2;
  uint64_t v5 = *a2;
  uint64_t v6 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v7 = *(const char ***)(v6 + 344);
  uint64_t v8 = v7 + 178;
  if (*(void *)(v6 + 152) == *a2) {
    uint64_t v8 = v7 + 180;
  }
  uint64_t v9 = v7 + 177;
  BOOL v10 = v7 + 179;
  if (*(void *)(v6 + 152) != *a2) {
    BOOL v10 = v9;
  }
  if (!a3) {
    uint64_t v8 = v10;
  }
  uint64_t v11 = *v8;
  if (*v8) {
    size_t v12 = strlen(*v8);
  }
  else {
    size_t v12 = 0;
  }
  uint64_t v13 = sub_22B1DB218(v6, (uint64_t)v11, v12, v5, v5);
  unsigned char v16[16] = 257;
  int v14 = sub_22B1D4034(v6 + 8, *(void *)(v13 + 24), v13, (uint64_t)&v17, 1, (uint64_t)v16);
  if (a3 == 1) {
    return (*(uint64_t (**)(uint64_t, llvm::Value *))(*(void *)a1 + 384))(a1, v14);
  }
  return (uint64_t)v14;
}

BOOL sub_22B24EA00(void *a1)
{
  return sub_22B24EA1C((void *)((char *)a1 + *(void *)(*a1 - 96)));
}

BOOL sub_22B24EA1C(void *a1)
{
  BOOL v2 = sub_22B1EE1E0((uint64_t)a1 + *(void *)(*a1 - 24), *(int **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 128));
  if (v2)
  {
    int v3 = sub_22B240748((uint64_t)a1);
    int v4 = sub_22B267838((uint64_t)a1);
    uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v6 = (uint64_t *)(v5 + 704);
    v5[774] = 1;
    int v7 = *((_DWORD *)v5 + 184) - *((_DWORD *)v5 + 188) + *((_DWORD *)v5 + 186);
    sub_22B1F26A0((uint64_t *)v5 + 88, v3);
    sub_22B20077C(v6, v4);
    uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 704;
    int v9 = sub_22B1ECAA8((uint64_t)v6, v7);
    sub_22B1EE128(v8, v9);
  }
  return v2;
}

void sub_22B24EB18(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B24EB34(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[514];
  sub_22B1D7BF0(v34, "AGCVertexContextStateGL");
  sub_22B1D7BF0(v32, "vertexUnpackState");
  sub_22B1D7BF0(&v37, (char *)&unk_22B27C63D);
  if (*(_DWORD *)(v2 + 80))
  {
    unint64_t v3 = 0;
    do
    {
      int v4 = (unsigned __int8 *)(v2 + 4 * v3);
      sub_22B1D7BF0(&v47, "AGCVertexElement");
      sub_22B1D7BF0(&v46, "code");
      sub_22B1F37D0(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *v4);
      sub_22B1D7BF0(v44, "components");
      sub_22B1F37D0(&v50, (const void **)v44, v4[1]);
      sub_22B1D7BF0(v42, "type");
      sub_22B1F3828(&v51, (const void **)v42, off_26488E1F8[v4[2]]);
      sub_22B1D7BF0(v40, "normalized");
      sub_22B1F37D0(&v52, (const void **)v40, HIBYTE(*(_DWORD *)v4) & 1);
      sub_22B1D7BF0(&v39, "bgraSwizzle");
      sub_22B1F37D0(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_DWORD *)v4 >> 25) & 1);
      sub_22B1D7BF0(&__p, "unused");
      sub_22B1F37D0(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(_DWORD *)v4 >> 26);
      sub_22B21395C(&v36, (uint64_t)&v47, 0, (uint64_t)&v49, 6);
      for (unint64_t i = 0; i != 0x1FFFFFFFFFFFFFEELL; i -= 3)
      {
        if (SHIBYTE(v54[0].__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(v54[i / 3].__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v36;
      }
      else {
        uint64_t v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v36.__r_.__value_.__l.__size_;
      }
      std::string::append(&v37, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      ++v3;
    }
    while (v3 < *(unsigned int *)(v2 + 80));
  }
  sub_22B1D7BF0(&v47, "AGCVertexUnpackState");
  sub_22B1D7BF0(&v46, "currentAttribs");
  sub_22B204B90(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *(void *)(v2 + 64));
  sub_22B1D7BF0(v44, "instancedAttribs");
  sub_22B204B90(&v50, (const void **)v44, *(void *)(v2 + 72));
  sub_22B1D7BF0(v42, "elementCount");
  sub_22B204B90(&v51, (const void **)v42, *(unsigned int *)(v2 + 80));
  sub_22B1D7BF0(v40, "vertexIDCode");
  sub_22B204B90(&v52, (const void **)v40, *(unsigned __int8 *)(v2 + 84));
  sub_22B1D7BF0(&v39, "instanceIDCode");
  sub_22B204B90(&v53, (const void **)&v39.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 85));
  sub_22B1D7BF0(&__p, "unused");
  sub_22B204B90(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(unsigned __int16 *)(v2 + 86));
  sub_22B1D7BF0(&v36, "elements : ");
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    sub_22B1DC004(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v37;
  }
  sub_22B21395C(&v55, (uint64_t)&v36, 0, (uint64_t)&__dst, 1);
  sub_22B21395C(&v31, (uint64_t)&v47, 0, (uint64_t)&v49, 7);
  for (uint64_t j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v55.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + j * 8));
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  sub_22B1F3B10(&v49, (const void **)v32, (uint64_t)&v31);
  sub_22B1D7BF0(&v47, "clip_distance_enable_mask");
  sub_22B21403C(&v50, (const void **)&v47.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 88));
  sub_22B1D7BF0(&v46, "outputPointSize");
  sub_22B21403C(&v51, (const void **)&v46.__r_.__value_.__l.__data_, HIBYTE(*(_WORD *)(v2 + 88)) & 1);
  sub_22B1D7BF0(v44, "shaderDebugEnable");
  sub_22B21403C(&v52, (const void **)v44, (*(_WORD *)(v2 + 88) >> 9) & 1);
  sub_22B1D7BF0(v42, "unused");
  sub_22B21403C(&v53, (const void **)v42, *(_WORD *)(v2 + 88) >> 10);
  sub_22B21395C(&v30, (uint64_t)v34, 0, (uint64_t)&v49, 5);
  for (uint64_t k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + k * 8));
    }
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  uint64_t v10 = a1[515];
  if (v10)
  {
    sub_22B1D7BF0(&v36, (char *)&unk_22B27C63D);
    for (uint64_t m = 0; m != 32; ++m)
    {
      sub_22B1D7BF0(&v47, "AGCSamplerPCFState");
      sub_22B1D7BF0(&v46, "compareFunc");
      sub_22B1F3828(&v49, (const void **)&v46.__r_.__value_.__l.__data_, off_26488E258[*(_WORD *)(v10 + 2 * m) & 0xF]);
      sub_22B1D7BF0(v44, "clampPCFEnabled");
      sub_22B21403C(&v50, (const void **)v44, (*(_WORD *)(v10 + 2 * m) >> 4) & 1);
      sub_22B1D7BF0(v42, "mipmapMinFilterEnabled");
      sub_22B21403C(&v51, (const void **)v42, (*(_WORD *)(v10 + 2 * m) >> 5) & 1);
      sub_22B1D7BF0(v40, "trilinearMinFilterEnabled");
      sub_22B21403C(&v52, (const void **)v40, (*(_WORD *)(v10 + 2 * m) >> 6) & 1);
      sub_22B1D7BF0(&v39, "linearMinFilterEnabled");
      sub_22B21403C(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_WORD *)(v10 + 2 * m) >> 7) & 1);
      sub_22B1D7BF0(&__p, "linearMagFilterEnabled");
      sub_22B21403C(v54, (const void **)&__p.__r_.__value_.__l.__data_, HIBYTE(*(_WORD *)(v10 + 2 * m)) & 1);
      sub_22B1D7BF0(&v37, "unused");
      sub_22B21403C(&v55, (const void **)&v37.__r_.__value_.__l.__data_, *(_WORD *)(v10 + 2 * m) >> 9);
      sub_22B21395C(&__dst, (uint64_t)&v47, 1, (uint64_t)&v49, 7);
      for (uint64_t n = 0; n != -21; n -= 3)
      {
        if (SHIBYTE(v55.__r_.__value_.__r.__words[n + 2]) < 0) {
          operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + n * 8));
        }
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = __dst.__r_.__value_.__l.__size_;
      }
      std::string::append(&v36, (const std::string::value_type *)p_dst, v14);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    sub_22B1D7BF0(&v47, "AGCSamplerPCFStates");
    sub_22B1D7BF0(&v49, "pcf : ");
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      sub_22B1DC004(&v50, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string v50 = v36;
    }
    sub_22B21395C(&__p, (uint64_t)&v47, 0, (uint64_t)&v49, 2);
    for (iunint64_t i = 0; ii != -6; ii -= 3)
    {
      if (SHIBYTE(v50.__r_.__value_.__r.__words[ii + 2]) < 0) {
        operator delete(*(void **)((char *)&v49 + ii * 8 + 24));
      }
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_22B1D7BF0(&__p, (char *)&unk_22B27C63D);
  }
  int v16 = (unsigned int *)a1[516];
  sub_22B1D7BF0(&v47, (char *)&unk_22B27C63D);
  for (juint64_t j = 1; jj != 33; ++jj)
  {
    std::to_string(&v46, v16[jj]);
    unint64_t v18 = std::string::append(&v46, " ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v20 = &v49;
    }
    else {
      unsigned int v20 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v49.__r_.__value_.__l.__size_;
    }
    std::string::append(&v47, (const std::string::value_type *)v20, v21);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
  }
  sub_22B1D7BF0(&v46, "AGCSamplerRemapStateGL");
  sub_22B1D7BF0(v44, "samplerCount");
  sub_22B1F37D0(&v49, (const void **)v44, *v16);
  sub_22B1D7BF0(v42, "samplerToTexUnitMap");
  std::operator+<char>();
  unint64_t v22 = std::string::append(&v39, "]");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v40 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v41 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  sub_22B1F3B10(&v50, (const void **)v42, (uint64_t)v40);
  sub_22B21395C(&v37, (uint64_t)&v46, 0, (uint64_t)&v49, 2);
  for (kuint64_t k = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[kk + 2]) < 0) {
      operator delete(*(void **)((char *)&v49 + kk * 8 + 24));
    }
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  sub_22B1F42B8((uint64_t)&v49, (const void **)&v30.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v25 = &v37;
  }
  else {
    int v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = v37.__r_.__value_.__l.__size_;
  }
  uint64_t v27 = std::string::append(&v49, (const std::string::value_type *)v25, v26);
  *a2 = *v27;
  v27->__r_.__value_.__r.__words[0] = 0;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_22B24F6D0(void *a1)
{
  return (*(unsigned __int16 *)(*(void *)((char *)a1 + *(void *)(*a1 - 64) + 4112) + 88) >> 9) & 1;
}

uint64_t sub_22B24F6F8()
{
  return 0;
}

const char *sub_22B24F700()
{
  return "vertex";
}

void sub_22B24F70C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7ACE8;
  v1[520] = &unk_26DE7AEE8;
  uint64_t v2 = (void *)v1[517];
  if (v2)
  {
    v1[518] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)v1[510];
  if (v3)
  {
    v1[511] = v3;
    operator delete(v3);
  }
  int v4 = (void *)v1[487];
  if (v4 != v1 + 489) {
    free(v4);
  }
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7AF50);
  sub_22B1ED95C((uint64_t)(v1 + 520));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B24F7F0()
{
  return 0;
}

uint64_t sub_22B24F7F8()
{
  return 0;
}

uint64_t sub_22B24F800()
{
  return 0;
}

const char *sub_22B24F808()
{
  return "vertex";
}

uint64_t sub_22B24F814(void *a1)
{
  return *(unsigned int *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 804);
}

uint64_t sub_22B24F838(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7ACE8;
  v1[520] = &unk_26DE7AEE8;
  uint64_t v2 = (void *)v1[517];
  if (v2)
  {
    v1[518] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)v1[510];
  if (v3)
  {
    v1[511] = v3;
    operator delete(v3);
  }
  int v4 = (void *)v1[487];
  if (v4 != v1 + 489) {
    free(v4);
  }
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7AF50);
  return sub_22B1ED95C((uint64_t)(v1 + 520));
}

uint64_t sub_22B24F904(uint64_t a1)
{
  return (*(unsigned __int16 *)(*(void *)(a1 + 4112) + 88) >> 9) & 1;
}

uint64_t sub_22B24F914(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1653)) {
    goto LABEL_68;
  }
  uint64_t Function = llvm::Module::getFunction();
  sub_22B2500D4((uint64_t *)&v80, *(unsigned int *)(a1 + 3088));
  if (*(_WORD *)(Function + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    uint64_t v3 = *(void *)(Function + 88);
    if (*(_WORD *)(Function + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      uint64_t v4 = *(void *)(Function + 88);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(Function + 88);
  }
  uint64_t v4 = v3;
LABEL_7:
  uint64_t v5 = v4 + 40 * *(void *)(Function + 96);
  if (v3 != v5)
  {
    unsigned int v6 = 0;
    do
    {
      if (*(void *)(v3 + 8))
      {
        if (v80) {
          unint64_t v80 = v80 & 0xFC00000000000000 | (2
        }
                                            * (((v80 >> 1) & ~(-1 << (v80 >> 58)) | (1 << v6)) & ~(-1 << (v80 >> 58)))) | 1;
        else {
          *(void *)(*(void *)v80 + 8 * (v6 >> 6)) |= 1 << v6;
        }
      }
      v3 += 40;
      ++v6;
    }
    while (v3 != v5);
  }
  uint64_t v7 = *(void *)(a1 + 4080);
  if (*(void *)(a1 + 4088) != v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = v7 + 20 * v8;
      uint64_t v11 = *(unsigned int *)(v10 + 8);
      if (v11 > 0xA) {
        LODWORD(v12) = -1;
      }
      else {
        unint64_t v12 = (qword_22B272180[v11] * (unint64_t)(*(_DWORD *)(v7 + 20 * v8) + 1) + 3) >> 2;
      }
      unint64_t v13 = *(unsigned int *)(v10 + 12);
      sub_22B2500D4((uint64_t *)&v79, *(unsigned int *)(a1 + 3088));
      if (v12)
      {
        unsigned int v14 = v12 + v13;
        if (v79)
        {
          unint64_t v79 = v79 & 0xFC00000000000000 | (2
                                            * (((v79 >> 1) & ~(-1 << (v79 >> 58)) | ((1 << v14) + (-1 << v13))) & ~(-1 << (v79 >> 58)))) | 1;
          goto LABEL_30;
        }
        unint64_t v15 = v13 >> 6;
        if ((v13 >> 6) == v14 >> 6)
        {
          uint64_t v16 = (1 << v14) + (-1 << v13);
          uint64_t v17 = (uint64_t *)(*(void *)v79 + 8 * v15);
LABEL_29:
          *v17 |= v16;
          goto LABEL_30;
        }
        unint64_t v18 = *(uint64_t **)v79;
        *(void *)(*(void *)v79 + 8 * v15) |= -1 << v13;
        unsigned int v19 = (v13 + 63) & 0xFFFFFFC0;
        if (v19 + 64 <= v14)
        {
          do
          {
            v18[v19 >> 6] = -1;
            unsigned int v20 = v19 + 64;
            unsigned int v21 = v19 + 128;
            v19 += 64;
          }
          while (v21 <= v14);
        }
        else
        {
          unsigned int v20 = (v13 + 63) & 0xFFFFFFC0;
        }
        if (v20 < v14)
        {
          uint64_t v16 = ~(-1 << v14);
          uint64_t v17 = &v18[v20 >> 6];
          goto LABEL_29;
        }
      }
LABEL_30:
      if (v79)
      {
        unint64_t v32 = v79 >> 58;
        if ((v80 & 1) == 0)
        {
          unint64_t v33 = *(unsigned int *)(v80 + 64);
          goto LABEL_47;
        }
        if ((((v79 & v80) >> 1) & ~((-1 << v32) | (-1 << (v80 >> 58)))) == 0) {
          goto LABEL_63;
        }
      }
      else
      {
        if (v80)
        {
          unint64_t v32 = *(unsigned int *)(v79 + 64);
          unint64_t v33 = v80 >> 58;
LABEL_47:
          if (v33 < v32) {
            unint64_t v32 = v33;
          }
          if (!v32)
          {
LABEL_63:
            uint64_t v35 = *(void *)(a1 + 4080) + 20 * (int)v9;
            uint64_t v36 = *(void *)(a1 + 4088);
            uint64_t v37 = v36 - (v35 + 20);
            if (v36 != v35 + 20) {
              memmove((void *)(*(void *)(a1 + 4080) + 20 * (int)v9), (const void *)(v35 + 20), v36 - (v35 + 20));
            }
            *(void *)(a1 + 4088) = v35 + v37;
            goto LABEL_66;
          }
          uint64_t v34 = 0;
          while (2)
          {
            if (v79)
            {
              if (((v79 >> 1) & ~(-1 << (v79 >> 58)) & (1 << v34)) == 0) {
                goto LABEL_59;
              }
            }
            else if ((*(void *)(*(void *)v79 + 8 * (v34 >> 6)) & (1 << v34)) == 0)
            {
              goto LABEL_59;
            }
            if (v80)
            {
              if (((v80 >> 1) & ~(-1 << (v80 >> 58)) & (1 << v34)) != 0) {
                goto LABEL_62;
              }
            }
            else if ((*(void *)(*(void *)v80 + 8 * (v34 >> 6)) & (1 << v34)) != 0)
            {
              goto LABEL_62;
            }
LABEL_59:
            if (v32 == ++v34) {
              goto LABEL_63;
            }
            continue;
          }
        }
        LODWORD(v22) = *(_DWORD *)(v79 + 8);
        unsigned int v23 = *(_DWORD *)(v80 + 8);
        if (v23 >= v22) {
          uint64_t v22 = v22;
        }
        else {
          uint64_t v22 = v23;
        }
        if (!v22) {
          goto LABEL_63;
        }
        unint64_t v24 = *(uint64_t **)v79;
        int v25 = *(uint64_t **)v80;
        uint64_t v26 = v22 - 1;
        do
        {
          uint64_t v28 = *v24++;
          uint64_t v27 = v28;
          uint64_t v29 = *v25++;
          uint64_t v30 = v29 & v27;
          if (v30) {
            BOOL v31 = 1;
          }
          else {
            BOOL v31 = v26 == 0;
          }
          --v26;
        }
        while (!v31);
        if (!v30) {
          goto LABEL_63;
        }
      }
LABEL_62:
      ++v9;
LABEL_66:
      sub_22B2501B4((void ***)&v79);
      uint64_t v8 = v9;
      uint64_t v7 = *(void *)(a1 + 4080);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 4088) - v7) >> 2) > v9);
  }
  sub_22B2501B4((void ***)&v80);
LABEL_68:
  uint64_t v38 = *(void *)(a1 + 4080);
  std::string v39 = 0;
  if (-858993459 * ((unint64_t)(*(void *)(a1 + 4088) - v38) >> 2))
  {
    uint64_t v40 = 0;
    __int16 v77 = 0;
    unint64_t v78 = 0;
    std::string::size_type v41 = 0;
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    while (1)
    {
      int v44 = (int *)(v38 + 20 * v43);
      int v45 = v44[4];
      uint64_t v46 = a1 + *(void *)(*(void *)a1 - 24);
      std::string v47 = (uint64_t *)(v46 + 704);
      *(unsigned char *)(v46 + 774) = 1;
      int v48 = *(_DWORD *)(v46 + 736) - *(_DWORD *)(v46 + 752) + *(_DWORD *)(v46 + 744);
      sub_22B1ED0D4((uint64_t *)(v46 + 704), 4, *v44);
      sub_22B1ED0D4(v47, 6, *(_DWORD *)(*(void *)(a1 + 4080) + 20 * v43 + 4));
      sub_22B1ED0D4(v47, 8, *(_DWORD *)(*(void *)(a1 + 4080) + 20 * v43 + 8));
      int v49 = *(_DWORD *)(*(void *)(a1 + 4080) + 20 * v43 + 12);
      if (v45)
      {
        sub_22B1ED0D4(v47, 12, v49);
        sub_22B1EF4B8(v47, 10, *(char *)(*(void *)(a1 + 4080) + 20 * v43 + 16));
        int v50 = sub_22B1ECAA8((uint64_t)v47, v48);
        int v51 = v50;
        if ((unint64_t)v42 >= v78)
        {
          uint64_t v55 = (v42 - v41) >> 2;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62) {
            goto LABEL_121;
          }
          if ((uint64_t)(v78 - (void)v41) >> 1 > v56) {
            unint64_t v56 = (uint64_t)(v78 - (void)v41) >> 1;
          }
          if (v78 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57) {
            unint64_t v57 = (unint64_t)sub_22B1EDE8C(v57);
          }
          else {
            uint64_t v58 = 0;
          }
          BOOL v63 = (char *)(v57 + 4 * v55);
          *(_DWORD *)BOOL v63 = v51;
          uint64_t v64 = v63 + 4;
          while (v42 != v41)
          {
            int v65 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v63 - 1) = v65;
            v63 -= 4;
          }
          unint64_t v78 = v57 + 4 * v58;
          if (v41) {
            operator delete(v41);
          }
          uint64_t v54 = v40;
          std::string::size_type v41 = v63;
          uint64_t v42 = v64;
          goto LABEL_107;
        }
        *(_DWORD *)uint64_t v42 = v50;
        v42 += 4;
      }
      else
      {
        sub_22B1ED0D4(v47, 10, v49);
        int v52 = sub_22B1ECAA8((uint64_t)v47, v48);
        int v53 = v52;
        if (v40 >= v77)
        {
          uint64_t v59 = (v40 - v39) >> 2;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62) {
LABEL_121:
          }
            abort();
          if ((v77 - v39) >> 1 > v60) {
            unint64_t v60 = (v77 - v39) >> 1;
          }
          if ((unint64_t)(v77 - v39) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61)
          {
            if (v61 >> 62) {
              sub_22B1E33E4();
            }
            uint64_t v62 = (char *)operator new(4 * v61);
          }
          else
          {
            uint64_t v62 = 0;
          }
          uint64_t v66 = &v62[4 * v59];
          *(_DWORD *)uint64_t v66 = v53;
          uint64_t v54 = v66 + 4;
          while (v40 != v39)
          {
            int v67 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          __int16 v77 = &v62[4 * v61];
          if (v39) {
            operator delete(v39);
          }
          std::string v39 = v66;
          goto LABEL_107;
        }
        *(_DWORD *)uint64_t v40 = v52;
        v40 += 4;
      }
      uint64_t v54 = v40;
LABEL_107:
      ++v43;
      uint64_t v38 = *(void *)(a1 + 4080);
      uint64_t v40 = v54;
      if (v43 >= -858993459 * ((unint64_t)(*(void *)(a1 + 4088) - v38) >> 2)) {
        goto LABEL_110;
      }
    }
  }
  std::string::size_type v41 = 0;
  uint64_t v42 = 0;
  uint64_t v54 = 0;
LABEL_110:
  if (v54 == v39) {
    int v68 = (char *)&unk_2683E9243;
  }
  else {
    int v68 = v39;
  }
  int v69 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v68, (v54 - v39) >> 2);
  if (v42 == v41) {
    uint64_t v70 = (char *)&unk_2683E9244;
  }
  else {
    uint64_t v70 = v41;
  }
  int v71 = sub_22B1F25D8(a1 + *(void *)(*(void *)a1 - 24) + 704, (uint64_t)v70, (v42 - v41) >> 2);
  uint64_t v72 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v73 = (uint64_t *)(v72 + 704);
  *(unsigned char *)(v72 + 774) = 1;
  int v74 = *(_DWORD *)(v72 + 736) - *(_DWORD *)(v72 + 752) + *(_DWORD *)(v72 + 744);
  sub_22B1F26A0((uint64_t *)(v72 + 704), v69);
  sub_22B20077C(v73, v71);
  uint64_t v75 = sub_22B1ECAA8((uint64_t)v73, v74);
  if (v41) {
    operator delete(v41);
  }
  if (v39) {
    operator delete(v39);
  }
  return v75;
}

uint64_t *sub_22B2500D4(uint64_t *result, uint64_t a2)
{
  *__n128 result = 1;
  if (a2 > 0x39) {
    operator new();
  }
  *__n128 result = (a2 << 58) | 1;
  return result;
}

void ***sub_22B2501B4(void ***a1)
{
  uint64_t v2 = *a1;
  if ((*a1 & 1) == 0 && v2)
  {
    if (*v2 != v2 + 2) {
      free(*v2);
    }
    MEMORY[0x230F43600](v2, 0x1080C40EF38A13ELL);
  }
  return a1;
}

uint64_t sub_22B250210(void *a1, uint64_t *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)llvm::ConstantFP::get();
  }
  uint64_t v4 = llvm::User::operator new((llvm::User *)0x58);
  v14[0] = "agc.vertex_point_size_adjust";
  __int16 v15 = 259;
  uint64_t v5 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v5 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  unsigned int v6 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  __int16 v15 = 257;
  uint64_t v7 = sub_22B1D4240(v6, **(llvm::Type ***)(*(void *)v4 + 16), v4, 0, (uint64_t)v14);
  uint64_t v8 = *v3;
  __int16 v13 = 257;
  uint64_t v9 = sub_22B1DC548((uint64_t)v6, v7, v8, (uint64_t)v12);
  uint64_t v10 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v15 = 257;
  return sub_22B1DD390(v10, (uint64_t)v3, v9, (uint64_t)v14);
}

uint64_t sub_22B2503C0(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(*(void *)(a1 + 4112) + 88)) & 1;
}

uint64_t sub_22B2503D0(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  sub_22B1F5524();
  sub_22B1F55A8();
  uint64_t v10 = *(void *)(*(void *)(a2 + 16) + 8 * a3);
  int v11 = sub_22B241C1C((uint64_t)a1 + *(void *)(*a1 - 24), v10, &v34);
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
    int v12 = *(_DWORD *)(v10 + 32);
  }
  else {
    int v12 = 1;
  }
  int v33 = 0;
  unsigned int v35 = 2;
  char v13 = sub_22B2437A8(0, a4, &v35, &v33);
  uint64_t v14 = a4 - 8 * *(unsigned int *)(a4 + 8);
  __int16 v15 = *(llvm::MDString **)(v14 + 24);
  if (v15 && *(unsigned char *)v15) {
    __int16 v15 = 0;
  }
  uint64_t v16 = *(llvm::MDString **)(v14 + 32);
  if (!v16) {
    return 0;
  }
  uint64_t v17 = 0;
  char v18 = v13 ^ 1;
  if (!v15) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0 && !*(unsigned char *)v16)
  {
    uint64_t String = (const void *)llvm::MDString::getString(v15);
    int v21 = *(_DWORD *)(*sub_22B1F562C(String, v20) + 8);
    uint64_t v22 = (const void *)llvm::MDString::getString(v16);
    int v24 = *(_DWORD *)(*sub_22B1F5734(v22, v23) + 8);
    if (v21 == 1) {
      int v24 = 3;
    }
    int v25 = v33;
    BOOL v26 = v11 == 1;
    if (v11 == 1) {
      int v27 = 6;
    }
    else {
      int v27 = 3;
    }
    if (v11 == 1) {
      int v28 = 5;
    }
    else {
      int v28 = 2;
    }
    if (v11 == 1) {
      int v29 = 4;
    }
    else {
      int v29 = 1;
    }
    if (v21) {
      int v29 = v24;
    }
    if (v21 != 1) {
      int v28 = v29;
    }
    if (v21 == 2) {
      int v30 = v27;
    }
    else {
      int v30 = v28;
    }
    *(_DWORD *)a5 = v12;
    *(_DWORD *)(a5 + 4) = v11;
    *(_DWORD *)(a5 + 8) = v21;
    *(_DWORD *)(a5 + 12) = v24;
    *(_DWORD *)(a5 + 16) = v25;
    BOOL v31 = (void **)(a5 + 24);
    if (*(char *)(a5 + 47) < 0) {
      operator delete(*v31);
    }
    *(_OWORD *)BOOL v31 = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(unsigned char *)(a5 + 56) = v26;
    *(unsigned char *)(a5 + 57) = 0;
    *(_DWORD *)(a5 + 60) = v30;
    return 1;
  }
  return v17;
}

uint64_t sub_22B250588(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v21 = 0;
  v19[0] = 1;
  uint64_t result = sub_22B2437A8(0, a3, v19, &v21);
  uint64_t v10 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v11 = *(unsigned char *)(*(void *)a2 + 8) == 18;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v13 = *(unsigned int *)(v10 + 32);
    if (v13)
    {
      uint64_t v14 = 0;
      int v15 = 4 * v21;
      do
      {
        uint64_t v16 = (char *)a1 + *(void *)(*a1 - 24);
        __int16 v20 = 257;
        uint64_t v17 = (uint64_t)(v16 + 8);
        uint64_t v18 = llvm::ConstantInt::get();
        uint64_t result = sub_22B242524(v17, a2, v18, (uint64_t)v19);
        *a5 |= 1 << (v15 + v14);
        *(void *)(a4 + 8 * (v15 + v14++)) = result;
      }
      while (v13 != v14);
    }
  }
  else if (*(void *)((char *)a1 + *(void *)(*a1 - 24) + 160) == v10)
  {
    unsigned int v12 = 4 * v21;
    *a5 |= 1 << (4 * v21);
    *(void *)(a4 + 8 * v12) = a2;
  }
  return result;
}

uint64_t sub_22B2506E0()
{
  return 0;
}

uint64_t sub_22B2506E8()
{
  return 0;
}

uint64_t sub_22B2506F0()
{
  return 0;
}

BOOL sub_22B2506F8(uint64_t a1)
{
  return *(void *)(a1 + 4120) == 0;
}

uint64_t sub_22B250708(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 4120);
  if (v2) {
    return *(unsigned __int16 *)(v2 + 2 * a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_22B250720(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 4128);
  if (*v2 > a2) {
    return v2[a2 + 1];
  }
  return a2;
}

uint64_t sub_22B250744(uint64_t a1)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  sub_22B266FAC(a1);
  uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + *(void *)(*(void *)a1 - 24) + 336), (llvm::LLVMContext *)2);
  uint64_t v3 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 192);
  v69[0] = Int8PtrTy;
  v69[1] = v3;
  llvm::StructType::get();
  uint64_t v4 = (llvm::Function **)(a1 + 160);
  uint64_t v5 = *(void *)(*(void *)(a1 + 160) + 80);
  if (v5) {
    unsigned int v6 = (llvm::BasicBlock *)(v5 - 24);
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)a1;
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1653))
  {
    uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v6);
    sub_22B23B300((uint64_t)v6, (uint64_t)&FirstInsertionPt);
    sub_22B1D3CF8((char **)(*(void *)(*(void *)a1 - 24) + a1 + 8), (char *)v6, FirstInsertionPt);
    if (*(_DWORD *)(a1 + 4108) != -1)
    {
      uint64_t v8 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      uint64_t v9 = sub_22B26854C((void *)a1);
      uint64_t v10 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 192);
      __int16 v70 = 257;
      uint64_t v11 = sub_22B1D7384(v8, 49, (uint64_t)v9, v10, (uint64_t)v69);
      uint64_t v12 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 200);
      __int16 v68 = 257;
      sub_22B1D7384(v8, 39, v11, v12, (uint64_t)v67);
    }
    if (*(_DWORD *)(a1 + 4104) != -1)
    {
      uint64_t v27 = *(void *)(*(void *)a1 - 24) + a1 + 8;
      int v28 = sub_22B26854C((void *)a1);
      uint64_t v29 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 192);
      __int16 v70 = 257;
      uint64_t v30 = sub_22B1D7384(v27, 49, (uint64_t)v28, v29, (uint64_t)v69);
      uint64_t v31 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 200);
      __int16 v68 = 257;
      sub_22B1D7384(v27, 39, v30, v31, (uint64_t)v67);
    }
    llvm::User::operator new((llvm::User *)0x58);
    v69[0] = "agc.primitive_buffer_path";
    __int16 v70 = 259;
    uint64_t v32 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v32 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    sub_22B2436D4(a1 + *(void *)(*(void *)a1 - 24));
    __int16 v70 = 257;
    *(void *)(a1 + 4072) = llvm::BasicBlock::splitBasicBlock();
    v69[0] = "primbuf_path";
    __int16 v70 = 259;
    operator new();
  }
  *(void *)(a1 + 4072) = v6;
  uint64_t v13 = *(void *)(v7 - 24) + a1 + 8;
  uint64_t v14 = llvm::BasicBlock::getFirstInsertionPt(v6);
  if (v14) {
    uint64_t v15 = v14 - 24;
  }
  else {
    uint64_t v15 = 0;
  }
  sub_22B1FFC54(v13, v15);
  uint64_t v62 = *(unsigned int *)(a1 + 3904);
  if (v62)
  {
    uint64_t v16 = 0;
    int v17 = 0;
    do
    {
      uint64_t v18 = (llvm::Value *)*(unsigned int *)(*(void *)(a1 + 3896) + 4 * v16);
      uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 4136) + 4 * (void)v18);
      uint64_t v20 = *(void *)(a1 + 4112);
      llvm::FixedVectorType::get();
      uint64_t v21 = llvm::UndefValue::get();
      if (v19)
      {
        BOOL v63 = v18;
        for (uint64_t i = 0; i != v19; ++i)
        {
          uint64_t v23 = a1 + *(void *)(*(void *)a1 - 24);
          int v24 = sub_22B26854C((void *)a1);
          __int16 v70 = 257;
          uint64_t v25 = llvm::ConstantInt::get();
          uint64_t v21 = sub_22B2427EC(v23 + 8, v21, (uint64_t)v24, v25, (uint64_t)v69);
        }
        v17 += i;
        uint64_t v18 = v63;
        uint64_t v26 = sub_22B252818((void *)a1, *(_DWORD *)(v20 + 4 * (void)v63), v21);
        uint64_t v4 = (llvm::Function **)(a1 + 160);
      }
      else
      {
        uint64_t v26 = sub_22B252818((void *)a1, *(_DWORD *)(v20 + 4 * (void)v18), v21);
      }
      *(void *)(a1 + 8 * (void)v18 + 3944) = v26;
      ++v16;
    }
    while (v16 != v62);
  }
  uint64_t Function = llvm::Module::getFunction();
  int v34 = (uint64_t *)Function;
  if (Function) {
    uint64_t v64 = *(llvm::Instruction **)(*(void *)(Function + 8) + 24);
  }
  else {
    uint64_t v64 = 0;
  }
  uint64_t v35 = *(void *)(a1 + 4072);
  v67[0] = 0;
  uint64_t v36 = *(llvm::Function **)(a1 + 160);
  if (*((_WORD *)v36 + 9))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    uint64_t v38 = *v4;
    __int16 v39 = *((_WORD *)*v4 + 9);
    uint64_t v37 = *((void *)v36 + 11);
    if (v39) {
      llvm::Function::BuildLazyArguments(v38);
    }
    uint64_t v36 = v38;
  }
  else
  {
    uint64_t v37 = *((void *)v36 + 11);
  }
  for (uint64_t j = *((void *)v36 + 11) + 40 * *((void *)v36 + 12); v37 != j; v37 += 40)
  {
    if (*(void *)(v37 + 8))
    {
      uint64_t v41 = *(void *)(v35 + 40);
      uint64_t v42 = v41 ? v41 - 24 : 0;
      sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v42);
      uint64_t v43 = *(unsigned int *)(v37 + 32);
      uint64_t v44 = *(void *)(*(void *)(a1 + 72) + 8 * v43);
      if ((sub_22B26C064((void *)a1, (unint64_t *)v37, v43, v44) & 1) == 0)
      {
        uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v44 - 8 * *(unsigned int *)(v44 + 8) + 8));
        if (v46 == 16 && *String == 0x747265762E726961 && String[1] == 0x7475706E695F7865)
        {
          int v48 = *(unsigned char **)(v44 - 8 * *(unsigned int *)(v44 + 8) + 16);
          if (v48)
          {
            if (*v48) {
              int v49 = 0;
            }
            else {
              int v49 = *(llvm::MDString **)(v44 - 8 * *(unsigned int *)(v44 + 8) + 16);
            }
          }
          else
          {
            int v49 = 0;
          }
          uint64_t v50 = llvm::MDString::getString(v49);
          if (v51 == 12
            && (*(void *)v50 == 0x61636F6C2E726961 ? (BOOL v52 = *(_DWORD *)(v50 + 8) == 1852795252) : (BOOL v52 = 0), v52))
          {
            uint64_t v58 = *(uint64_t **)(*(void *)(v37 + 8) + 24);
            LODWORD(v69[0]) = 3;
            sub_22B2437A8(0, v44, (unsigned int *)v69, v67);
            sub_22B251BA4(a1, v58[1], v67[0], 0);
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v58);
          }
          else
          {
            v66[0] = 0;
            LODWORD(v69[0]) = 3;
            sub_22B2437A8(0, v44, (unsigned int *)v69, v66);
            uint64_t v53 = v66[0];
            uint64_t v54 = *(void *)(a1 + 4112);
            uint64_t v55 = *(uint64_t **)(a1 + 8 * v66[0] + 3944);
            uint64_t v56 = *(void *)(*(void *)(a1 + 4072) + 40);
            if (v56) {
              uint64_t v57 = v56 - 24;
            }
            else {
              uint64_t v57 = 0;
            }
            sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, v57);
            sub_22B251CC4((void *)a1, (int *)(v54 + 4 * v53), *(void *)v37, v55);
            llvm::Value::replaceAllUsesWith();
          }
        }
      }
    }
  }
  if (v34)
  {
    if (v64)
    {
      if (llvm::Value::getNumUses(v64)) {
        sub_22B251BA4(a1, v34[1], *(unsigned __int8 *)(*(void *)(a1 + 4112) + 84), 3);
      }
      else {
        llvm::Instruction::eraseFromParent(v64);
      }
    }
    llvm::Function::eraseFromParent((llvm::Function *)v34);
  }
  uint64_t v59 = llvm::Module::getFunction();
  if (v59)
  {
    unint64_t v60 = (llvm::Function *)v59;
    sub_22B251BA4(a1, *(void *)(v59 + 8), (unsigned __int16)WORD2(*(void *)(*(void *)(a1 + 4112) + 80)) >> 8, 1);
    llvm::Function::eraseFromParent(v60);
  }
  return 1;
}

uint64_t sub_22B251BA4(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a2)
  {
    uint64_t v5 = a2;
    unsigned int v6 = (uint64_t *)result;
    uint64_t v7 = *(void *)(result + 4112);
    uint64_t v8 = result + 192;
    unsigned int v9 = a4 & 0xFFFFFFFD;
    do
    {
      uint64_t v10 = *(llvm::Instruction **)(v5 + 24);
      uint64_t v5 = *(void *)(v5 + 8);
      uint64_t v11 = *v6;
      uint64_t v12 = (uint64_t *)v10;
      if (v9 == 1) {
        uint64_t v12 = (uint64_t *)(v8 + *(void *)(v11 - 24));
      }
      uint64_t v13 = *v12;
      sub_22B1FFC54((uint64_t)v6 + *(void *)(v11 - 24) + 8, (uint64_t)v10);
      uint64_t v14 = v6[514];
      uint64_t v15 = *(unsigned int *)(v14 + 80);
      if (*(_DWORD *)(v14 + 80))
      {
        uint64_t v16 = 0;
        while (*(unsigned __int8 *)(v7 + 4 * v16) != a3)
        {
          if (v15 == ++v16)
          {
            int v17 = 0;
            LODWORD(v16) = v15;
            goto LABEL_12;
          }
        }
        int v17 = (uint64_t *)v6[v16 + 493];
      }
      else
      {
        LODWORD(v16) = 0;
        int v17 = 0;
      }
LABEL_12:
      sub_22B251CC4(v6, (int *)(v7 + 4 * v16), v13, v17);
      llvm::Value::replaceAllUsesWith();
      uint64_t result = llvm::Instruction::eraseFromParent(v10);
    }
    while (v5);
  }
  return result;
}

uint64_t sub_22B251CC4(void *a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a3;
  unsigned int v6 = a2;
  uint64_t v77 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    unsigned int v8 = *(_DWORD *)(a3 + 32);
    uint64_t v5 = **(void **)(a3 + 16);
  }
  else
  {
    unsigned int v8 = 1;
  }
  unsigned int v9 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  if (v5 == v9[20] || v5 == v9[19])
  {
    if (*((unsigned __int8 *)a2 + 2) - 9 >= 2) {
      llvm::FixedVectorType::get();
    }
    uint64_t v11 = llvm::ConstantFP::get();
    uint64_t v10 = llvm::ConstantFP::get();
    int v13 = *v6;
    if ((*v6 & 0x1000000) == 0)
    {
      if (BYTE2(v13) > 0xAu) {
        goto LABEL_9;
      }
      switch(BYTE2(v13))
      {
        case 1:
          uint64_t v40 = sub_22B241B38((uint64_t)a1 + *(void *)(*a1 - 24), a4, 1);
          goto LABEL_49;
        case 4:
        case 6:
        case 8:
          uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24);
          uint64_t v15 = a4;
          int v16 = 0;
          goto LABEL_27;
        case 9:
        case 0xA:
          int v28 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v29 = *((void *)v28 + 43);
          long long v68 = *(_OWORD *)(v28 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v69, (llvm::IRBuilderBase *)(v28 + 8));
          int v70 = *((_DWORD *)v28 + 26);
          uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t *, void, BOOL))(*(void *)v29 + 104))(v29, &v68, 5, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160), a4, 0, *((unsigned __int8 *)v6 + 2) << 16 == 589824);
          if (v69) {
            goto LABEL_29;
          }
          goto LABEL_51;
        default:
          uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24);
          uint64_t v15 = a4;
          int v16 = 1;
LABEL_27:
          uint64_t v27 = sub_22B241B38(v14, v15, v16);
          break;
      }
      goto LABEL_50;
    }
    uint64_t v17 = 1;
    uint64_t v18 = 16;
    switch(BYTE2(v13))
    {
      case 3:
        uint64_t v58 = v6;
        uint64_t v33 = sub_22B241B38((uint64_t)a1 + *(void *)(*a1 - 24), a4, 1);
        uint64_t v34 = llvm::ConstantFP::get();
        uint64_t v35 = llvm::ConstantFP::get();
        uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        __int16 v72 = 257;
        uint64_t v37 = sub_22B1DB138(v36, v33, v34, (uint64_t)v71);
        uint64_t v38 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v39 = *((void *)v38 + 43);
        long long v65 = *(_OWORD *)(v38 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v66, (llvm::IRBuilderBase *)(v38 + 8));
        int v67 = *((_DWORD *)v38 + 26);
        uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v39 + 56))(v39, &v65, v37, v35, 0);
        if (v66) {
          goto LABEL_46;
        }
        goto LABEL_47;
      case 4:
        uint64_t v40 = sub_22B241B38((uint64_t)a1 + *(void *)(*a1 - 24), a4, 0);
LABEL_49:
        uint64_t v43 = llvm::ConstantFP::get();
        uint64_t v44 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        __int16 v72 = 257;
        uint64_t v27 = sub_22B1DB138(v44, v40, v43, (uint64_t)v71);
        goto LABEL_50;
      case 5:
        goto LABEL_45;
      case 6:
        uint64_t v17 = 0;
        goto LABEL_45;
      case 7:
        goto LABEL_44;
      case 8:
        uint64_t v17 = 0;
LABEL_44:
        uint64_t v18 = 8;
LABEL_45:
        uint64_t v58 = v6;
        uint64_t v57 = a4;
        uint64_t v41 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v42 = *((void *)v41 + 43);
        long long v59 = *(_OWORD *)(v41 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v60, (llvm::IRBuilderBase *)(v41 + 8));
        int v61 = *((_DWORD *)v41 + 26);
        uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v42 + 88))(v42, &v59, v57, v18, v17, 32);
        if (v60) {
LABEL_46:
        }
          llvm::MetadataTracking::untrack();
LABEL_47:
        unsigned int v6 = v58;
        break;
      case 9:
      case 0xA:
        uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v20 = *((void *)v19 + 43);
        long long v62 = *(_OWORD *)(v19 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v63, (llvm::IRBuilderBase *)(v19 + 8));
        int v64 = *((_DWORD *)v19 + 26);
        uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t *, uint64_t, BOOL))(*(void *)v20 + 104))(v20, &v62, 5, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160), a4, 1, *((unsigned __int8 *)v6 + 2) << 16 == 589824);
        if (v63) {
LABEL_29:
        }
          llvm::MetadataTracking::untrack();
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
    if (v5 != v9[24] && v5 != v9[23])
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
LABEL_9:
      uint64_t v12 = 0;
      goto LABEL_51;
    }
    uint64_t v10 = 0;
    unsigned int v21 = *((unsigned __int8 *)a2 + 2);
    if (v21 <= 0xA)
    {
      if (((1 << v21) & 0x2A8) != 0)
      {
        uint64_t v22 = llvm::FixedVectorType::get();
        uint64_t v11 = llvm::ConstantInt::get();
        uint64_t v10 = llvm::ConstantInt::get();
        if (llvm::Type::getScalarSizeInBits((llvm::Type *)*a4) <= 0x1F)
        {
          uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          __int16 v72 = 257;
          uint64_t v26 = 40;
LABEL_35:
          uint64_t v27 = sub_22B1D7384(v25, v26, (uint64_t)a4, v22, (uint64_t)v71);
          goto LABEL_50;
        }
      }
      else
      {
        if (((1 << v21) & 0x550) == 0)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          if (*((unsigned char *)a2 + 2)) {
            goto LABEL_51;
          }
          uint64_t v31 = llvm::FixedVectorType::get();
          uint64_t v11 = llvm::ConstantInt::get();
          uint64_t v10 = llvm::ConstantInt::get();
          uint64_t v32 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          __int16 v72 = 257;
          uint64_t v27 = sub_22B1F7E00(v32, (uint64_t)a4, v31, (uint64_t)v71);
          goto LABEL_50;
        }
        uint64_t v22 = llvm::FixedVectorType::get();
        uint64_t v11 = llvm::ConstantInt::get();
        uint64_t v10 = llvm::ConstantInt::get();
        uint64_t v23 = (llvm::Type *)*a4;
        if ((*(_DWORD *)(*a4 + 8) & 0xFE) == 0x12) {
          unsigned int v24 = *(unsigned __int8 *)(**((void **)v23 + 2) + 8);
        }
        else {
          unsigned int v24 = *(_DWORD *)(*a4 + 8);
        }
        if (v24 <= 6)
        {
          uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          __int16 v72 = 257;
          uint64_t v27 = sub_22B1D78D4(v30, (uint64_t)a4, v22, (uint64_t)v71);
LABEL_50:
          uint64_t v12 = v27;
          goto LABEL_51;
        }
        if (llvm::Type::getScalarSizeInBits(v23) <= 0x1F)
        {
          uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          __int16 v72 = 257;
          uint64_t v26 = 39;
          goto LABEL_35;
        }
      }
      uint64_t v12 = (uint64_t)a4;
      goto LABEL_51;
    }
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
LABEL_51:
  unsigned int v45 = *(_DWORD *)(*(void *)v12 + 32);
  int v46 = *v6;
  if ((*v6 & 0x2000000) != 0)
  {
    uint64_t v73 = llvm::ConstantInt::get();
    uint64_t v74 = llvm::ConstantInt::get();
    uint64_t v75 = llvm::ConstantInt::get();
    uint64_t v76 = llvm::ConstantInt::get();
    uint64_t v47 = llvm::ConstantVector::get();
    uint64_t v48 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v49 = llvm::UndefValue::get();
    __int16 v72 = 257;
    uint64_t v12 = sub_22B1D69A8(v48, v12, v49, v47, (uint64_t)v71);
    int v46 = *v6;
  }
  unsigned int v50 = BYTE1(v46);
  unsigned int v51 = BYTE1(v46) + 1;
  if (v45 > v51) {
    uint64_t v12 = sub_22B2423A4((uint64_t)a1 + *(void *)(*a1 - 24), v12, v51, 0);
  }
  if (v8 == 1 || v8 <= v50)
  {
    uint64_t v12 = sub_22B2423A4((uint64_t)a1 + *(void *)(*a1 - 24), v12, v8, 1);
  }
  else if (v8 > v51)
  {
    uint64_t v12 = sub_22B242678((uint64_t)a1 + *(void *)(*a1 - 24), v12, v8);
    do
    {
      if (v51 == 3) {
        uint64_t v52 = v10;
      }
      else {
        uint64_t v52 = v11;
      }
      uint64_t v53 = (char *)a1 + *(void *)(*a1 - 24);
      __int16 v72 = 257;
      uint64_t v54 = (uint64_t)(v53 + 8);
      uint64_t v55 = llvm::ConstantInt::get();
      uint64_t v12 = sub_22B2427EC(v54, v12, v52, v55, (uint64_t)v71);
      ++v51;
    }
    while (v8 != v51);
  }
  return sub_22B241FF8((void *)((char *)a1 + *(void *)(*a1 - 24)), v12, v5);
}

uint64_t sub_22B252818(void *a1, int a2, uint64_t a3)
{
  if (BYTE2(a2) > 0xAu) {
    return 0;
  }
  switch(BYTE2(a2))
  {
    case 1:
    case 3:
    case 4:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v7 = "as_i32";
      goto LABEL_9;
    case 2:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v7 = "as_half";
      goto LABEL_9;
    case 5:
    case 6:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v7 = "as_i16";
      goto LABEL_9;
    case 7:
    case 8:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v7 = "as_i8";
LABEL_9:
      v14[0] = v7;
      __int16 v15 = 259;
      uint64_t v11 = a3;
      goto LABEL_10;
    case 9:
    case 0xA:
      unsigned int v8 = (char *)a1 + *(void *)(*a1 - 24);
      __int16 v15 = 257;
      uint64_t v9 = (uint64_t)(v8 + 8);
      uint64_t v10 = llvm::ConstantInt::get();
      uint64_t v11 = sub_22B242524(v9, a3, v10, (uint64_t)v14);
      uint64_t v12 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v6 = (uint64_t)(v12 + 8);
      uint64_t v5 = *((void *)v12 + 24);
      v14[0] = "as_packed_i32";
      __int16 v15 = 259;
LABEL_10:
      a3 = sub_22B1D7384(v6, 49, v11, v5, (uint64_t)v14);
      break;
    default:
      return a3;
  }
  return a3;
}

uint64_t sub_22B252A9C(uint64_t a1)
{
  sub_22B23B86C(a1);
  uint64_t v4 = *(void *)(a1 + 4112);
  uint64_t v5 = *(unsigned int *)(v4 + 80);
  if (*(_DWORD *)(v4 + 80))
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(unsigned int **)(a1 + 3896);
      uint64_t v8 = *(unsigned int *)(a1 + 3904);
      uint64_t v9 = v7;
      if (v8)
      {
        uint64_t v10 = 4 * v8;
        uint64_t v9 = *(unsigned int **)(a1 + 3896);
        while (*(unsigned __int8 *)(*(void *)(a1 + 4112) + 4 * v6) >= *(unsigned __int8 *)(*(void *)(a1 + 4112) + 4 * *v9))
        {
          ++v9;
          v10 -= 4;
          if (!v10) {
            goto LABEL_13;
          }
        }
      }
      if (&v7[v8] == v9)
      {
LABEL_13:
        sub_22B1E0428(a1 + 3896, v6);
      }
      else
      {
        if (v8 >= *(_DWORD *)(a1 + 3908)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v11 = *(void *)(a1 + 3896);
        uint64_t v12 = (_DWORD *)(v11 + 4 * (v9 - v7));
        *(_DWORD *)(v11 + 4 * v8) = *(_DWORD *)(v11 + 4 * v8 - 4);
        uint64_t v13 = *(unsigned int *)(a1 + 3904);
        uint64_t v14 = v11 + 4 * v13 - 4;
        if ((_DWORD *)v14 != v12)
        {
          memmove(v12 + 1, v12, v14 - (void)v12);
          LODWORD(v13) = *(_DWORD *)(a1 + 3904);
        }
        *(_DWORD *)(a1 + 3904) = v13 + 1;
        *uint64_t v12 = v6;
      }
      ++v6;
    }
    while (v6 != v5);
  }
  unint64_t v15 = *(unsigned int *)(a1 + 3904);
  uint64_t v16 = *(void *)(a1 + 4144);
  uint64_t v17 = *(void *)(a1 + 4136);
  unint64_t v18 = (v16 - v17) >> 2;
  if (v15 <= v18)
  {
    if (v15 >= v18) {
      goto LABEL_33;
    }
    uint64_t v32 = v17 + 4 * v15;
    goto LABEL_30;
  }
  unint64_t v19 = v15 - v18;
  uint64_t v20 = *(void *)(a1 + 4152);
  size_t v21 = 4 * (v15 - v18);
  if (v15 - v18 <= (v20 - v16) >> 2)
  {
    bzero(*(void **)(a1 + 4144), 4 * (v15 - v18));
    uint64_t v32 = v16 + 4 * v19;
LABEL_30:
    *(void *)(a1 + 4144) = v32;
    goto LABEL_33;
  }
  uint64_t v22 = v20 - v17;
  if (v22 >> 1 > v15) {
    unint64_t v15 = v22 >> 1;
  }
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v23 = v15;
  }
  unsigned int v24 = (char *)sub_22B1EDE8C(v23);
  uint64_t v25 = *(char **)(a1 + 4144);
  uint64_t v26 = *(char **)(a1 + 4136);
  uint64_t v27 = &v24[4 * v18];
  uint64_t v29 = &v24[4 * v28];
  bzero(v27, v21);
  uint64_t v30 = &v27[4 * v19];
  while (v25 != v26)
  {
    int v31 = *((_DWORD *)v25 - 1);
    v25 -= 4;
    *((_DWORD *)v27 - 1) = v31;
    v27 -= 4;
  }
  *(void *)(a1 + 4136) = v27;
  *(void *)(a1 + 4144) = v30;
  *(void *)(a1 + 4152) = v29;
  if (v26) {
    operator delete(v26);
  }
LABEL_33:
  uint64_t v33 = *(unsigned int *)(a1 + 3904);
  if (v33)
  {
    uint64_t v34 = 0;
    int v35 = 0;
    int v135 = 0;
    uint64_t v36 = a1 + 344;
    uint64_t v128 = *(unsigned int *)(a1 + 3904);
    do
    {
      uint64_t v37 = *(unsigned int *)(*(void *)(a1 + 3896) + 4 * v34);
      uint64_t v38 = *(void *)(a1 + 4112);
      int v39 = *(_DWORD *)(v38 + 4 * v37);
      int v40 = v39;
      uint64_t v41 = *(void *)(v38 + 80);
      if (v39 == BYTE4(v41))
      {
        uint64_t v3 = 0;
        uint64_t v2 = 0;
        int v42 = 3;
      }
      else if (v39 == BYTE5(v41))
      {
        uint64_t v3 = 0;
        uint64_t v2 = 1;
        int v42 = 1;
      }
      else
      {
        uint64_t v2 = 0;
        int v42 = 0;
        uint64_t v3 = 1;
      }
      if (BYTE2(v39) > 0xAu) {
        unsigned int v43 = -1;
      }
      else {
        unsigned int v43 = (dword_22B272150[BYTE2(v39)] + dword_22B272150[BYTE2(v39)] * BYTE1(v39) + 3) >> 2;
      }
      *(_DWORD *)(*(void *)(a1 + 4136) + 4 * v37) = v43;
      int v44 = *(_DWORD *)(v38 + 4 * v37);
      int v45 = BYTE1(v44);
      int v46 = v44;
      int v47 = BYTE2(v44);
      int v48 = *(_DWORD *)(a1 + 3088);
      uint64_t v49 = *(char **)(a1 + 4088);
      unint64_t v50 = *(void *)(a1 + 4096);
      if ((unint64_t)v49 >= v50)
      {
        int v134 = v35;
        uint64_t v52 = *(char **)(a1 + 4080);
        unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((v49 - v52) >> 2);
        unint64_t v54 = v53 + 1;
        if (v53 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_153;
        }
        unsigned int v129 = v43;
        unsigned int v130 = v3;
        unsigned int v131 = v2;
        char v132 = BYTE4(v41);
        int v133 = v40;
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - (void)v52) >> 2);
        if (2 * v55 > v54) {
          unint64_t v54 = 2 * v55;
        }
        if (v55 >= 0x666666666666666) {
          unint64_t v56 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          int v57 = v42;
          uint64_t v58 = sub_22B253540(v56);
          int v42 = v57;
          unint64_t v56 = (unint64_t)v58;
          uint64_t v49 = *(char **)(a1 + 4088);
          uint64_t v52 = *(char **)(a1 + 4080);
        }
        else
        {
          uint64_t v59 = 0;
        }
        uint64_t v60 = (_DWORD *)(v56 + 20 * v53);
        *uint64_t v60 = v45;
        v60[1] = v46;
        v60[2] = v47;
        void v60[3] = v48;
        v60[4] = v42;
        int v61 = v60;
        if (v49 != v52)
        {
          do
          {
            long long v62 = *(_OWORD *)(v49 - 20);
            *(v61 - 1) = *((_DWORD *)v49 - 1);
            *(_OWORD *)(v61 - 5) = v62;
            v61 -= 5;
            v49 -= 20;
          }
          while (v49 != v52);
          uint64_t v52 = *(char **)(a1 + 4080);
        }
        *(void *)(a1 + 4080) = v61;
        unsigned int v51 = v60 + 5;
        *(void *)(a1 + 4088) = v60 + 5;
        *(void *)(a1 + 4096) = v56 + 20 * v59;
        if (v52) {
          operator delete(v52);
        }
        int v40 = v133;
        int v35 = v134;
        uint64_t v36 = a1 + 344;
        uint64_t v33 = v128;
        BYTE4(v41) = v132;
        uint64_t v3 = v130;
        uint64_t v2 = v131;
        unsigned int v43 = v129;
      }
      else
      {
        *(_DWORD *)uint64_t v49 = v45;
        *((_DWORD *)v49 + 1) = v46;
        *((_DWORD *)v49 + 2) = v47;
        *((_DWORD *)v49 + 3) = v48;
        unsigned int v51 = v49 + 20;
        *((_DWORD *)v49 + 4) = v42;
      }
      *(void *)(a1 + 4088) = v51;
      uint64_t v63 = *(void *)a1;
      if (*(unsigned char *)(*(void *)(v36 + *(void *)(*(void *)a1 - 24)) + 1653))
      {
        if (v3)
        {
          unsigned int v43 = 0;
          v35 |= *(void *)(*(void *)(a1 + 4112) + 72) >> *(unsigned char *)(v38 + 4 * v37);
          int v135 = 1;
        }
        else
        {
          int v64 = v2 | v135;
          if (v40 == BYTE4(v41)) {
            int v64 = 1;
          }
          int v135 = v64;
          if (v40 != BYTE4(v41)) {
            v35 |= v2;
          }
          unsigned int v43 = 0;
        }
      }
      *(_DWORD *)(a1 + 3088) += v43;
      ++v34;
    }
    while (v34 != v33);
  }
  else
  {
    LOBYTE(v135) = 0;
    LOBYTE(v35) = 0;
    uint64_t v63 = *(void *)a1;
  }
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(v63 - 24) + 344) + 1654))
  {
    char v65 = v35;
    uint64_t v66 = *(void *)(a1 + 160);
    if (*(_WORD *)(v66 + 18))
    {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
      uint64_t v69 = *(void *)(a1 + 160);
      uint64_t v67 = *(void *)(v66 + 88);
      if (*(_WORD *)(v69 + 18)) {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
      }
      uint64_t v66 = v69;
    }
    else
    {
      uint64_t v67 = *(void *)(v66 + 88);
    }
    uint64_t v70 = *(void *)(v66 + 88) + 40 * *(void *)(v66 + 96);
    if (v67 == v70)
    {
LABEL_95:
      int v68 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v71 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned int *)(v67 + 32));
        if (*(void *)(v67 + 8) && v71 != 0)
        {
          uint64_t v73 = *(llvm::MDString **)(v71 - 8 * *(unsigned int *)(v71 + 8) + 8);
          if (!*(unsigned char *)v73)
          {
            uint64_t String = (unint64_t *)llvm::MDString::getString(v73);
            if (v75 == 29)
            {
              unint64_t v76 = bswap64(*String);
              unint64_t v77 = 0x6169722E76657274;
              if (v76 != 0x6169722E76657274) {
                goto LABEL_90;
              }
              unint64_t v76 = bswap64(String[1]);
              unint64_t v77 = 0x65785F7472616E73;
              if (v76 == 0x65785F7472616E73
                && (v77 = 0x666F726D5F666565, unint64_t v76 = bswap64(String[2]), v76 == 0x666F726D5F666565)
                && (unint64_t v77 = 0x666565646261636BLL,
                    unint64_t v76 = bswap64(*(unint64_t *)((char *)String + 21)),
                    v76 == 0x666565646261636BLL))
              {
                int v78 = 0;
              }
              else
              {
LABEL_90:
                int v78 = v76 < v77 ? -1 : 1;
              }
              if (!v78) {
                break;
              }
            }
          }
        }
        v67 += 40;
        if (v67 == v70) {
          goto LABEL_95;
        }
      }
      int v68 = 1;
    }
    LOBYTE(v35) = v65;
  }
  else
  {
    int v68 = 0;
  }
  if (v135)
  {
    char v79 = v35;
    uint64_t v80 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
    int v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v80 + 312))(v80, a1 + 3088, 4, v2, v3);
    int v82 = v81;
    int v83 = *(unsigned __int8 *)(*(void *)(a1 + 4112) + 84);
    int v84 = *(char **)(a1 + 4088);
    unint64_t v85 = *(void *)(a1 + 4096);
    if ((unint64_t)v84 >= v85)
    {
      uint64_t v87 = *(char **)(a1 + 4080);
      unint64_t v88 = 0xCCCCCCCCCCCCCCCDLL * ((v84 - v87) >> 2);
      unint64_t v89 = v88 + 1;
      if (v88 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_153;
      }
      unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v85 - (void)v87) >> 2);
      if (2 * v90 > v89) {
        unint64_t v89 = 2 * v90;
      }
      if (v90 >= 0x666666666666666) {
        unint64_t v91 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v91 = v89;
      }
      if (v91)
      {
        unint64_t v91 = (unint64_t)sub_22B253540(v91);
        int v84 = *(char **)(a1 + 4088);
        uint64_t v87 = *(char **)(a1 + 4080);
      }
      else
      {
        uint64_t v92 = 0;
      }
      unsigned int v93 = (_DWORD *)(v91 + 20 * v88);
      unint64_t v94 = v91 + 20 * v92;
      *unsigned int v93 = 0;
      v93[1] = v83;
      v93[2] = 3;
      v93[3] = v82;
      v93[4] = 4;
      uint64_t v86 = v93 + 5;
      if (v84 != v87)
      {
        do
        {
          long long v95 = *(_OWORD *)(v84 - 20);
          *(v93 - 1) = *((_DWORD *)v84 - 1);
          *(_OWORD *)(v93 - 5) = v95;
          v93 -= 5;
          v84 -= 20;
        }
        while (v84 != v87);
        uint64_t v87 = *(char **)(a1 + 4080);
      }
      *(void *)(a1 + 4080) = v93;
      *(void *)(a1 + 4088) = v86;
      *(void *)(a1 + 4096) = v94;
      if (v87) {
        operator delete(v87);
      }
    }
    else
    {
      *(_DWORD *)int v84 = 0;
      *((_DWORD *)v84 + 1) = v83;
      *((_DWORD *)v84 + 2) = 3;
      *((_DWORD *)v84 + 3) = v81;
      uint64_t v86 = v84 + 20;
      *((_DWORD *)v84 + 4) = 4;
    }
    *(void *)(a1 + 4088) = v86;
    *(_DWORD *)(a1 + 4104) = v82;
    LOBYTE(v35) = v79;
  }
  if (v35)
  {
    uint64_t v96 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
    int v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v96 + 312))(v96, a1 + 3088, 2, v2, v3);
    int v98 = v97;
    int v99 = ((unsigned __int16)WORD2(*(void *)(*(void *)(a1 + 4112) + 80)) >> 8);
    int v100 = *(char **)(a1 + 4088);
    unint64_t v101 = *(void *)(a1 + 4096);
    if ((unint64_t)v100 >= v101)
    {
      int v103 = *(char **)(a1 + 4080);
      unint64_t v104 = 0xCCCCCCCCCCCCCCCDLL * ((v100 - v103) >> 2);
      unint64_t v105 = v104 + 1;
      if (v104 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_153;
      }
      unint64_t v106 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v101 - (void)v103) >> 2);
      if (2 * v106 > v105) {
        unint64_t v105 = 2 * v106;
      }
      if (v106 >= 0x666666666666666) {
        unint64_t v107 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v107 = v105;
      }
      if (v107)
      {
        unint64_t v107 = (unint64_t)sub_22B253540(v107);
        int v100 = *(char **)(a1 + 4088);
        int v103 = *(char **)(a1 + 4080);
      }
      else
      {
        uint64_t v108 = 0;
      }
      uint64_t v109 = (_DWORD *)(v107 + 20 * v104);
      unint64_t v110 = v107 + 20 * v108;
      *uint64_t v109 = 0;
      v109[1] = v99;
      v109[2] = 3;
      v109[3] = v98;
      v109[4] = 2;
      uint64_t v102 = v109 + 5;
      if (v100 != v103)
      {
        do
        {
          long long v111 = *(_OWORD *)(v100 - 20);
          *(v109 - 1) = *((_DWORD *)v100 - 1);
          *(_OWORD *)(v109 - 5) = v111;
          v109 -= 5;
          v100 -= 20;
        }
        while (v100 != v103);
        int v103 = *(char **)(a1 + 4080);
      }
      *(void *)(a1 + 4080) = v109;
      *(void *)(a1 + 4088) = v102;
      *(void *)(a1 + 4096) = v110;
      if (v103) {
        operator delete(v103);
      }
    }
    else
    {
      *(_DWORD *)int v100 = 0;
      *((_DWORD *)v100 + 1) = v99;
      *((_DWORD *)v100 + 2) = 3;
      *((_DWORD *)v100 + 3) = v97;
      uint64_t v102 = v100 + 20;
      *((_DWORD *)v100 + 4) = 2;
    }
    *(void *)(a1 + 4088) = v102;
    *(_DWORD *)(a1 + 4108) = v98;
  }
  if (v68)
  {
    uint64_t v112 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
    int v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v112 + 312))(v112, a1 + 3088, 5, v2, v3);
    int v114 = v113;
    uint64_t v115 = *(char **)(a1 + 4088);
    unint64_t v116 = *(void *)(a1 + 4096);
    if ((unint64_t)v115 < v116)
    {
      *(void *)uint64_t v115 = 0;
      *((_DWORD *)v115 + 2) = 3;
      *((_DWORD *)v115 + 3) = v113;
      uint64_t v117 = v115 + 20;
      *((_DWORD *)v115 + 4) = 5;
LABEL_150:
      *(void *)(a1 + 4088) = v117;
      *(_DWORD *)(a1 + 3260) = v114;
      return 1;
    }
    uint64_t v118 = *(unsigned char **)(a1 + 4080);
    unint64_t v119 = 0xCCCCCCCCCCCCCCCDLL * ((v115 - v118) >> 2);
    unint64_t v120 = v119 + 1;
    if (v119 + 1 <= 0xCCCCCCCCCCCCCCCLL)
    {
      unint64_t v121 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v116 - (void)v118) >> 2);
      if (2 * v121 > v120) {
        unint64_t v120 = 2 * v121;
      }
      if (v121 >= 0x666666666666666) {
        unint64_t v122 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v122 = v120;
      }
      if (v122)
      {
        unint64_t v122 = (unint64_t)sub_22B253540(v122);
        uint64_t v115 = *(char **)(a1 + 4088);
        uint64_t v118 = *(unsigned char **)(a1 + 4080);
      }
      else
      {
        uint64_t v123 = 0;
      }
      unint64_t v124 = v122 + 20 * v119;
      unint64_t v125 = v122 + 20 * v123;
      *(void *)unint64_t v124 = 0;
      *(_DWORD *)(v124 + 8) = 3;
      *(_DWORD *)(v124 + 12) = v114;
      *(_DWORD *)(v124 + 16) = 5;
      uint64_t v117 = (char *)(v124 + 20);
      if (v115 != v118)
      {
        do
        {
          long long v126 = *(_OWORD *)(v115 - 20);
          *(_DWORD *)(v124 - 4) = *((_DWORD *)v115 - 1);
          *(_OWORD *)(v124 - 20) = v126;
          v124 -= 20;
          v115 -= 20;
        }
        while (v115 != v118);
        uint64_t v118 = *(unsigned char **)(a1 + 4080);
      }
      *(void *)(a1 + 4080) = v124;
      *(void *)(a1 + 4088) = v117;
      *(void *)(a1 + 4096) = v125;
      if (v118) {
        operator delete(v118);
      }
      goto LABEL_150;
    }
LABEL_153:
    abort();
  }
  return 1;
}

void *sub_22B253540(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_22B1E33E4();
  }
  return operator new(20 * a1);
}

void sub_22B253588(void *a1)
{
  *a1 = &unk_26DE7ACE8;
  uint64_t v2 = (uint64_t)(a1 + 520);
  a1[520] = &unk_26DE7AEE8;
  uint64_t v3 = (void *)a1[517];
  if (v3)
  {
    a1[518] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[510];
  if (v4)
  {
    a1[511] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[487];
  if (v5 != a1 + 489) {
    free(v5);
  }
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7AF50);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B253658(void *a1)
{
  *a1 = &unk_26DE7ACE8;
  uint64_t v2 = (uint64_t)(a1 + 520);
  a1[520] = &unk_26DE7AEE8;
  uint64_t v3 = (void *)a1[517];
  if (v3)
  {
    a1[518] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[510];
  if (v4)
  {
    a1[511] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[487];
  if (v5 != a1 + 489) {
    free(v5);
  }
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7AF50);
  sub_22B1ED95C(v2);
  return a1;
}

uint64_t sub_22B253708(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_22B1ED7E0(a1 + 4160, a2, *a3);
  uint64_t v11 = sub_22B2680E8(a1, (uint64_t *)off_26DE7AF50, (uint64_t)a3, a4, 1);
  *(void *)a1 = &unk_26DE7ACE8;
  *(void *)(a1 + 4160) = &unk_26DE7AEE8;
  *(void *)(a1 + 3896) = a1 + 3912;
  *(void *)(a1 + 3904) = 0x800000000;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(void *)(a1 + 4080) = 0;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(void *)(a1 + 4104) = -1;
  *(void *)(a1 + 4112) = a4;
  *(void *)(a1 + 4120) = a6;
  *(void *)(a1 + 4128) = a5;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(void *)(a1 + 4152) = 0;
  *(_DWORD *)(a1 + 3116) = *(unsigned __int8 *)(a4 + 88);
  sub_22B26C814(v11);
  return a1;
}

BOOL sub_22B253818(void *a1)
{
  return sub_22B253834((uint64_t)a1 + *(void *)(*a1 - 96));
}

BOOL sub_22B253834(uint64_t a1)
{
  BOOL result = sub_22B1EE1E0(a1 + *(void *)(*(void *)a1 - 24), *(int **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 128));
  if (result)
  {
    int v3 = sub_22B240748(a1);
    int v4 = sub_22B267838(a1);
    uint64_t v5 = *(void *)(*(void *)a1 - 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = *(int **)(a1 + v5 + 568);
    int v93 = v3;
    int v94 = v4;
    if (v7
      && (uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7), *v8 >= 5u)
      && (uint64_t v9 = v8[2]) != 0
      && (uint64_t v10 = *(unsigned int *)((char *)v7 + v9), *(int *)((char *)v7 + v9 + v10)))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      int v99 = 0;
      int v100 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = (uint64_t)&v7[v15] + v9 + v10;
        uint64_t v17 = (int *)(v16 + 4 + *(unsigned int *)(v16 + 4));
        unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
        unsigned int v19 = *v18;
        if (v19 < 0xB)
        {
          LODWORD(v20) = 0;
        }
        else
        {
          uint64_t v20 = v18[5];
          if (v18[5]) {
            LODWORD(v20) = *(int *)((char *)v17 + v20);
          }
        }
        unsigned int v21 = *(_DWORD *)(a1 + 3944);
        uint64_t v22 = v20 - v21;
        if (v20 >= v21)
        {
          *(unsigned char *)(v6 + 774) = 1;
          if (v19 >= 5 && (uint64_t v26 = v18[2]) != 0) {
            int v27 = *(int *)((char *)v17 + v26);
          }
          else {
            int v27 = 0;
          }
          int v35 = (uint64_t *)(v6 + 704);
          int v36 = *(_DWORD *)(v6 + 736) - *(_DWORD *)(v6 + 752) + *(_DWORD *)(v6 + 744);
          uint64_t v37 = *(void *)(a1 + 4464);
          sub_22B1ED0D4((uint64_t *)(v6 + 704), 4, v27);
          sub_22B1EF4B8(v35, 6, *(char *)(v37 + 8 * v22 + 4));
          int v38 = sub_22B1ECAA8((uint64_t)v35, v36);
          int v39 = v38;
          if (v14 >= v99)
          {
            uint64_t v40 = (v14 - v13) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              goto LABEL_93;
            }
            if ((v99 - v13) >> 1 > v41) {
              unint64_t v41 = (v99 - v13) >> 1;
            }
            if ((unint64_t)(v99 - v13) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v41;
            }
            if (v42)
            {
              if (v42 >> 62) {
                goto LABEL_94;
              }
              unsigned int v43 = (char *)operator new(4 * v42);
            }
            else
            {
              unsigned int v43 = 0;
            }
            uint64_t v58 = &v43[4 * v40];
            *(_DWORD *)uint64_t v58 = v39;
            uint64_t v59 = v58 + 4;
            while (v14 != v13)
            {
              int v60 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v58 - 1) = v60;
              v58 -= 4;
            }
            int v99 = &v43[4 * v42];
            if (v13) {
              operator delete(v13);
            }
            uint64_t v13 = v58;
            uint64_t v14 = v59;
          }
          else
          {
            *(_DWORD *)uint64_t v14 = v38;
            v14 += 4;
          }
        }
        else
        {
          *(unsigned char *)(v6 + 774) = 1;
          int v98 = v13;
          if (v19 >= 5 && (uint64_t v23 = v18[2]) != 0)
          {
            unsigned int v24 = v11;
            int v25 = *(int *)((char *)v17 + v23);
          }
          else
          {
            unsigned int v24 = v11;
            int v25 = 0;
          }
          uint64_t v28 = v20;
          uint64_t v29 = (uint64_t *)(v6 + 704);
          int v96 = *(_DWORD *)(v6 + 752);
          int v97 = *(_DWORD *)(v6 + 736);
          int v95 = *(_DWORD *)(v6 + 744);
          uint64_t v30 = *(void *)(a1 + 3936);
          sub_22B1ED0D4((uint64_t *)(v6 + 704), 4, v25);
          uint64_t v31 = v30 + 32 * v28;
          sub_22B1ED0D4(v29, 6, *(_DWORD *)(v31 + 4));
          sub_22B1EF4B8(v29, 8, *(unsigned __int8 *)(v31 + 8));
          uint64_t v32 = (unsigned __int16 *)((char *)v17 - *v17);
          if (*v32 < 7u)
          {
            int v34 = 0;
            uint64_t v11 = v24;
          }
          else
          {
            uint64_t v33 = v32[3];
            uint64_t v11 = v24;
            if (v33) {
              int v34 = *(int *)((char *)v17 + v33);
            }
            else {
              int v34 = 0;
            }
          }
          uint64_t v13 = v98;
          sub_22B1ED0D4(v29, 10, v34);
          int v44 = (unsigned __int16 *)((char *)v17 - *v17);
          if (*v44 < 9u)
          {
            int v49 = 0;
            __int16 v47 = v96;
            __int16 v46 = v97;
            __int16 v48 = v95;
          }
          else
          {
            uint64_t v45 = v44[4];
            __int16 v47 = v96;
            __int16 v46 = v97;
            __int16 v48 = v95;
            if (v45) {
              int v49 = *(int *)((char *)v17 + v45);
            }
            else {
              int v49 = 0;
            }
          }
          __int16 v50 = v46 - v47 + v48;
          sub_22B1ED0D4(v29, 12, v49);
          uint64_t v51 = v30 + 32 * v28;
          sub_22B1ED0D4(v29, 14, *(_DWORD *)(v51 + 20));
          sub_22B1ED0D4(v29, 16, *(_DWORD *)(v51 + 24));
          sub_22B1EF4B8(v29, 18, *(unsigned __int8 *)(v51 + 28));
          int v52 = sub_22B1ECAA8((uint64_t)v29, v50);
          int v53 = v52;
          if (v12 >= v100)
          {
            uint64_t v54 = (v12 - v11) >> 2;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62) {
LABEL_93:
            }
              abort();
            if ((v100 - v11) >> 1 > v55) {
              unint64_t v55 = (v100 - v11) >> 1;
            }
            if ((unint64_t)(v100 - v11) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56)
            {
              if (v56 >> 62) {
LABEL_94:
              }
                sub_22B1E33E4();
              int v57 = (char *)operator new(4 * v56);
            }
            else
            {
              int v57 = 0;
            }
            int v61 = &v57[4 * v54];
            *(_DWORD *)int v61 = v53;
            long long v62 = v61 + 4;
            while (v12 != v11)
            {
              int v63 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *((_DWORD *)v61 - 1) = v63;
              v61 -= 4;
            }
            int v100 = &v57[4 * v56];
            if (v11) {
              operator delete(v11);
            }
            uint64_t v11 = v61;
            uint64_t v12 = v62;
          }
          else
          {
            *(_DWORD *)uint64_t v12 = v52;
            v12 += 4;
          }
        }
        ++v15;
        uint64_t v5 = *(void *)(*(void *)a1 - 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = *(int **)(a1 + v5 + 568);
        uint64_t v9 = *(unsigned __int16 *)((char *)v7 - *v7 + 4);
        uint64_t v10 = *(unsigned int *)((char *)v7 + v9);
      }
      while (v15 < *(unsigned int *)((char *)v7 + v9 + v10));
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v64 = a1 + v5;
    uint64_t v65 = a1 + v5 + 704;
    *(unsigned char *)(a1 + v5 + 774) = 1;
    sub_22B1ED19C(v65, v12 - v11, 4uLL);
    sub_22B1ED19C(v65, v12 - v11, 4uLL);
    uint64_t v66 = v12 - v11;
    unint64_t v101 = v11;
    if (v12 == v11) {
      uint64_t v67 = (char *)&unk_22B2721D8;
    }
    else {
      uint64_t v67 = v11;
    }
    if (v12 != v11)
    {
      uint64_t v68 = v66 >> 2;
      uint64_t v69 = v67 - 4;
      do
      {
        uint64_t v70 = v68 - 1;
        int v71 = *(_DWORD *)&v69[4 * v68];
        sub_22B1ECFA8(v65, 4uLL);
        sub_22B1ED138(v65, *(_DWORD *)(v64 + 736) - *(_DWORD *)(v64 + 752) + *(_DWORD *)(v64 + 744) - v71 + 4);
        uint64_t v68 = v70;
      }
      while (v70);
    }
    *(unsigned char *)(v64 + 774) = 0;
    int v72 = sub_22B1ED138(v65, (unint64_t)v66 >> 2);
    uint64_t v73 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v74 = v73 + 704;
    *(unsigned char *)(v73 + 774) = 1;
    sub_22B1ED19C(v73 + 704, v14 - v13, 4uLL);
    sub_22B1ED19C(v73 + 704, v14 - v13, 4uLL);
    uint64_t v75 = v14 - v13;
    if (v14 == v13) {
      unint64_t v76 = (char *)&unk_22B2721D9;
    }
    else {
      unint64_t v76 = v13;
    }
    if (v14 != v13)
    {
      uint64_t v77 = v75 >> 2;
      int v78 = v76 - 4;
      do
      {
        uint64_t v79 = v77 - 1;
        int v80 = *(_DWORD *)&v78[4 * v77];
        sub_22B1ECFA8(v74, 4uLL);
        sub_22B1ED138(v74, *(_DWORD *)(v73 + 736) - *(_DWORD *)(v73 + 752) + *(_DWORD *)(v73 + 744) - v80 + 4);
        uint64_t v77 = v79;
      }
      while (v79);
    }
    *(unsigned char *)(v73 + 774) = 0;
    int v81 = sub_22B1ED138(v74, (unint64_t)v75 >> 2);
    uint64_t v82 = a1 + *(void *)(*(void *)a1 - 24);
    *(unsigned char *)(v82 + 774) = 1;
    int v83 = *(_DWORD *)(v82 + 736) - *(_DWORD *)(v82 + 752) + *(_DWORD *)(v82 + 744);
    sub_22B1ED0D4((uint64_t *)(v82 + 704), 4, *(_DWORD *)(a1 + 3088));
    if (v72)
    {
      sub_22B1ECFA8(v82 + 704, 4uLL);
      sub_22B1ED0D4((uint64_t *)(v82 + 704), 6, *(_DWORD *)(v82 + 736) - *(_DWORD *)(v82 + 752) + *(_DWORD *)(v82 + 744) - v72 + 4);
    }
    if (v81)
    {
      sub_22B1ECFA8(v82 + 704, 4uLL);
      sub_22B1ED0D4((uint64_t *)(v82 + 704), 8, *(_DWORD *)(v82 + 736) - *(_DWORD *)(v82 + 752) + *(_DWORD *)(v82 + 744) - v81 + 4);
    }
    int v84 = sub_22B1ECAA8(v82 + 704, v83);
    if (v13) {
      operator delete(v13);
    }
    if (v101) {
      operator delete(v101);
    }
    uint64_t v85 = a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v86 = v85 + 704;
    *(unsigned char *)(v85 + 774) = 1;
    int v87 = *(_DWORD *)(v85 + 736) - *(_DWORD *)(v85 + 752) + *(_DWORD *)(v85 + 744);
    sub_22B1F26A0((uint64_t *)(v85 + 704), v93);
    sub_22B20077C((uint64_t *)(v85 + 704), v94);
    if (v84)
    {
      sub_22B1ECFA8(v85 + 704, 4uLL);
      sub_22B1ED0D4((uint64_t *)(v85 + 704), 12, *(_DWORD *)(v85 + 736) - *(_DWORD *)(v85 + 752) + *(_DWORD *)(v85 + 744) - v84 + 4);
    }
    uint64_t v88 = a1 + *(void *)(*(void *)a1 - 24) + 704;
    int v89 = sub_22B1ECAA8(v86, v87);
    sub_22B1EE128(v88, v89);
    (*(void (**)(void))(**(void **)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 440))();
    unint64_t v90 = *(int **)(a1 + *(void *)(*(void *)a1 - 24) + 560);
    unint64_t v91 = (unsigned int *)((char *)v90 + *(unsigned __int16 *)((char *)v90 - *v90 + 4));
    uint64_t v92 = (unsigned int *)((char *)v91
                         + *v91
                         + *(unsigned __int16 *)((char *)v91 + *v91 - *(unsigned int *)((char *)v91 + *v91) + 8));
    return *(unsigned int *)((char *)v92 + *v92) < 0x21;
  }
  return result;
}

void sub_22B2540A8(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B2540C4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  sub_22B1D7BF0(v24, "AGCVertexContextStateAGP");
  sub_22B1D7BF0(v22, "mutableBuffers");
  sub_22B1ED4EC((uint64_t)v28);
  sub_22B1E6CB0(v29, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v29[1] + *(void *)(v29[0] - 24)) = *(_DWORD *)((unsigned char *)&v29[1] + *(void *)(v29[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_22B1F3B10(&v32, (const void **)v22, (uint64_t)__p);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  v28[0] = *(void **)MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void **)((char *)v28 + *((void *)v28[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
  v29[0] = v4;
  v29[1] = MEMORY[0x263F8C318] + 16;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x230F43590](v31);
  sub_22B1D7BF0(v28, "genCompilerStatistics");
  sub_22B1F37D0(&v33, (const void **)v28, *(_DWORD *)(v3 + 12) & 1);
  sub_22B1D7BF0(__p, "genTelemetryStatistics");
  sub_22B1F37D0(&v34, (const void **)__p, (*(_DWORD *)(v3 + 12) >> 1) & 1);
  sub_22B1D7BF0(v20, "partition_mode");
  sub_22B1F3828(&v35, (const void **)v20, off_26488E2E0[((unint64_t)*(unsigned int *)(v3 + 12) >> 10) & 3]);
  sub_22B1D7BF0(v18, "step_function");
  sub_22B1F3828(&v36, (const void **)v18, off_26488E300[((unint64_t)*(unsigned int *)(v3 + 12) >> 12) & 3]);
  sub_22B1D7BF0(v16, "vertex_amplification_mode");
  sub_22B1F3828(&v37, (const void **)v16, off_26488E320[(unsigned __int16)*(_DWORD *)(v3 + 12) >> 14]);
  sub_22B1D7BF0(v14, "manufactureUnlinkedVaryings");
  sub_22B1F37D0(&v38, (const void **)v14, (*(_DWORD *)(v3 + 12) >> 20) & 1);
  sub_22B1D7BF0(v12, "customBorderColor");
  sub_22B1F37D0(&v39, (const void **)v12, (*(_DWORD *)(v3 + 12) >> 21) & 1);
  sub_22B1D7BF0(v10, "disableTextureRWBoundsCheck");
  sub_22B1F37D0(&v40, (const void **)v10, (*(_DWORD *)(v3 + 12) >> 22) & 1);
  sub_22B1D7BF0(v8, "debugInstrumentationEnabled");
  sub_22B1F37D0(&v41, (const void **)v8, (*(_DWORD *)(v3 + 12) >> 23) & 1);
  sub_22B1D7BF0(v6, "unused");
  sub_22B1F37D0(&v42, (const void **)v6, *(unsigned __int8 *)(v3 + 15));
  sub_22B1F3880(a2, (uint64_t)v24, (uint64_t)&v32, 11);
  uint64_t v5 = 264;
  do
  {
    if (v32.__r_.__value_.__s.__data_[v5 - 1] < 0) {
      operator delete(*(void **)&v31[v5 + 128]);
    }
    v5 -= 24;
  }
  while (v5);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(v28[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

uint64_t sub_22B254590(void *a1, llvm::AGX::CompileRequest *a2)
{
  return sub_22B2545AC((uint64_t)a1 + *(void *)(*a1 - 72), a2);
}

uint64_t sub_22B2545AC(uint64_t a1, llvm::AGX::CompileRequest *this)
{
  if (*(_DWORD *)(a1 + 3944))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      llvm::AGX::CompileRequest::addDMAListEntry(this);
      ++v5;
      v4 += 32;
    }
    while (v5 < *(unsigned int *)(a1 + 3944));
  }
  uint64_t v6 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 320))(v6);
  if ((result & 1) == 0 && *(_DWORD *)(a1 + 4472))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = llvm::AGX::CompileRequest::addDMAListEntry(this);
      ++v9;
      v8 += 8;
    }
    while (v9 < *(unsigned int *)(a1 + 4472));
  }
  return result;
}

void sub_22B2546B0(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE7D8A0;
  v1[568] = &off_26DE7DA98;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7B8A0);
  sub_22B1ED95C((uint64_t)(v1 + 568));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B254794(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        unint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22B254818()
{
  return 0;
}

uint64_t sub_22B254820(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_22B254828(uint64_t a1, uint64_t a2)
{
  return a2 != 0;
}

uint64_t sub_22B254834(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 3928) || !*(_DWORD *)(a1 + 3908)) {
    return 0;
  }
  uint64_t v3 = *(size_t ***)(a1 + 3896);
  if (*(_DWORD *)(a1 + 3904))
  {
    while (1)
    {
      uint64_t v4 = *v3;
      if (*v3 && v4 + 1 != 0) {
        break;
      }
      ++v3;
    }
  }
  else
  {
    uint64_t v4 = *v3;
  }
  unsigned int v7 = *((_DWORD *)v4 + 2);
  int v8 = BYTE2(v7);
  int v9 = HIBYTE(v7) & 0x7F;
  int v10 = v7;
  int v11 = BYTE1(v7);
  int v12 = *(_DWORD *)(a1 + 3932) + 1;
  *(_DWORD *)(a1 + 3932) = v12;
  BOOL v13 = v8 == 1;
  if (v8 == 1) {
    int v14 = 6;
  }
  else {
    int v14 = 3;
  }
  if (v8 == 1) {
    int v15 = 5;
  }
  else {
    int v15 = 2;
  }
  if (v8 == 1) {
    int v16 = 4;
  }
  else {
    int v16 = 1;
  }
  if (v10) {
    int v16 = v11;
  }
  if (v10 != 1) {
    int v15 = v16;
  }
  if (v10 == 2) {
    int v17 = v14;
  }
  else {
    int v17 = v15;
  }
  *(_DWORD *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v8;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  unint64_t v18 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = v13;
  *(unsigned char *)(a2 + 57) = 0;
  *(_DWORD *)(a2 + 60) = v17;
  sub_22B1E2118(&__dst, *v3 + 2, **v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a2 + 40) = v21;
  char v19 = *v3;
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer((llvm *)v19, (void *)(*v19 + 17));
  return 1;
}

uint64_t sub_22B2549A0(uint64_t a1, void *a2, size_t a3, uint64_t a4, int a5)
{
  int Key = llvm::StringMapImpl::FindKey();
  if (Key == -1) {
    return 0;
  }
  uint64_t v11 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 3904)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 3896);
  int v13 = *(unsigned __int8 *)(*(void *)(v12 + 8 * Key) + 10);
  if ((v13 - 3) > 2) {
    return 0;
  }
  int v14 = *(_DWORD *)(a1 + 3932) + 1;
  *(_DWORD *)(a1 + 3932) = v14;
  if (a5) {
    int v15 = 10;
  }
  else {
    int v15 = 2;
  }
  *(_DWORD *)a4 = 1;
  *(_DWORD *)(a4 + 4) = v13;
  *(void *)(a4 + 8) = 0x300000001;
  *(_DWORD *)(a4 + 16) = v14;
  int v16 = (void **)(a4 + 24);
  if (*(char *)(a4 + 47) < 0) {
    operator delete(*v16);
  }
  *(unsigned char *)(a4 + 56) = 0;
  *(_OWORD *)int v16 = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(unsigned char *)(a4 + 57) = a5;
  *(_DWORD *)(a4 + 60) = v15;
  if (a2)
  {
    sub_22B1E2118(&__dst, a2, a3);
    if (*(char *)(a4 + 47) < 0) {
      operator delete(*v16);
    }
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v20 = 0;
  }
  *(_OWORD *)int v16 = __dst;
  *(void *)(a4 + 40) = v20;
  unint64_t v18 = *(llvm **)(v12 + 8 * v11);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v18, (void *)(*(void *)v18 + 17));
  return 1;
}

uint64_t sub_22B254B00(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  size_t v13 = v12;
  int Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 3904)) {
    return 0;
  }
  int v40 = a6;
  uint64_t v38 = *(void *)(a1 + 3896);
  uint64_t v39 = Key;
  unsigned int v15 = *(_DWORD *)(*(void *)(v38 + 8 * Key) + 8);
  int v16 = BYTE2(v15);
  int v17 = HIBYTE(v15) & 0x7F;
  uint64_t v18 = *(void *)(*(void *)(a2 + 16) + 8 * a3);
  int v19 = sub_22B241C1C(a1 + *(void *)(*(void *)a1 - 24), v18, &__dst);
  int v20 = (*(_DWORD *)(v18 + 8) & 0xFE) == 0x12 ? *(_DWORD *)(v18 + 32) : 1;
  if (BYTE2(v15) != v19 || v17 != v20) {
    return 0;
  }
  int v23 = v15;
  int v24 = BYTE1(v15);
  int v25 = *(_DWORD *)(a1 + 3932) + 1;
  *(_DWORD *)(a1 + 3932) = v25;
  BOOL v26 = BYTE2(v15) == 1;
  if (BYTE2(v15) == 1) {
    int v27 = 6;
  }
  else {
    int v27 = 3;
  }
  if (BYTE2(v15) == 1) {
    int v28 = 14;
  }
  else {
    int v28 = 11;
  }
  if (v40) {
    int v27 = v28;
  }
  if (BYTE2(v15) == 1) {
    int v29 = 5;
  }
  else {
    int v29 = 2;
  }
  if (BYTE2(v15) == 1) {
    int v30 = 13;
  }
  else {
    int v30 = 10;
  }
  if (v40) {
    int v29 = v30;
  }
  if (BYTE2(v15) == 1) {
    int v31 = 4;
  }
  else {
    int v31 = 1;
  }
  if (BYTE2(v15) == 1) {
    int v32 = 12;
  }
  else {
    int v32 = 9;
  }
  if (v40) {
    int v31 = v32;
  }
  if ((_BYTE)v15) {
    int v31 = v15;
  }
  if (v15 != 1) {
    int v29 = v31;
  }
  if (v15 == 2) {
    int v33 = v27;
  }
  else {
    int v33 = v29;
  }
  *(_DWORD *)a5 = v17;
  *(_DWORD *)(a5 + 4) = v16;
  *(_DWORD *)(a5 + 8) = v23;
  *(_DWORD *)(a5 + 12) = v24;
  *(_DWORD *)(a5 + 16) = v25;
  uint64_t v34 = a5 + 24;
  if (*(char *)(a5 + 47) < 0) {
    operator delete(*(void **)v34);
  }
  *(_OWORD *)uint64_t v34 = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(unsigned char *)(a5 + 56) = v26;
  *(unsigned char *)(a5 + 57) = v40;
  *(_DWORD *)(a5 + 60) = v33;
  if (String)
  {
    sub_22B1E2118(&__dst, String, v13);
    int v35 = *(char *)(a5 + 47);
    uint64_t v36 = v38;
    if (v35 < 0) {
      operator delete(*(void **)v34);
    }
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v42 = 0;
    uint64_t v36 = v38;
  }
  *(_OWORD *)uint64_t v34 = __dst;
  *(void *)(v34 + 16) = v42;
  std::string v37 = *(llvm **)(v36 + 8 * v39);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v37, (void *)(*(void *)v37 + 17));
  return 1;
}

void *sub_22B254D5C(void *result, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  int v8 = result;
  uint64_t v9 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v10 = *(unsigned char *)(*(void *)a2 + 8) == 18;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    int v22 = 0;
    v20[0] = 1;
    uint64_t result = (void *)sub_22B2437A8(0, a3, v20, &v22);
    uint64_t v14 = *(unsigned int *)(v9 + 32);
    if (v14)
    {
      uint64_t v15 = 0;
      int v16 = 4 * v22;
      do
      {
        int v17 = (char *)v8 + *(void *)(*v8 - 24);
        __int16 v21 = 257;
        uint64_t v18 = (uint64_t)(v17 + 8);
        uint64_t v19 = llvm::ConstantInt::get();
        uint64_t result = (void *)sub_22B242524(v18, a2, v19, (uint64_t)v20);
        *a5 |= 1 << (v16 + v15);
        a4[(v16 + v15++)] = (uint64_t)result;
      }
      while (v14 != v15);
    }
  }
  else if (v9 == *(void *)((char *)result + *(void *)(*result - 24) + 160))
  {
    *a5 |= 1u;
    *a4 = a2;
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v9 + 32);
    *a5 |= ~(-1 << v11);
    int v22 = 0;
    if (v11)
    {
      do
      {
        uint64_t v12 = (uint64_t)v8 + *(void *)(*v8 - 24) + 8;
        __int16 v21 = 257;
        uint64_t result = (void *)sub_22B1D7940(v12, a2, (uint64_t)&v22, 1, (uint64_t)v20);
        int v13 = v22;
        a4[v22] = (uint64_t)result;
        int v22 = v13 + 1;
      }
      while (v13 + 1 < v11);
    }
  }
  return result;
}

uint64_t sub_22B254F14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3929);
}

BOOL sub_22B254F1C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 3120) != 0;
}

uint64_t sub_22B254F2C(uint64_t a1, char a2)
{
  return 16 * ((*(_DWORD *)(a1 + 3120) >> a2) & 1u);
}

uint64_t sub_22B254F3C()
{
  return 1;
}

uint64_t sub_22B254F44(void *a1)
{
  return 1;
}

uint64_t sub_22B254F64(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_22B2612F4((void *)a1);
  unsigned int v9 = v2;
  uint64_t v10 = a1 + *(void *)(*(void *)a1 - 24);
  if (**(void **)(*(void *)(*(void *)(a1 + 160) + 24) + 16) == *(void *)(v10 + 144)
    && *(unsigned char *)(*(void *)(v10 + 344) + 1639))
  {
    v54.__r_.__value_.__r.__words[0] = llvm::ConstantFP::get();
    v54.__r_.__value_.__l.__size_ = v54.__r_.__value_.__r.__words[0];
    v54.__r_.__value_.__r.__words[2] = v54.__r_.__value_.__r.__words[0];
    uint64_t v55 = llvm::ConstantFP::get();
    unsigned int v11 = (unsigned __int8 *)llvm::ConstantVector::get();
    uint64_t v12 = *(void *)(*(void *)a1 - 24) + a1 + 8;
    uint64_t v13 = *(void *)(a1 + 3288);
    uint64_t v14 = *(void *)(a1 + 3304);
    uint64_t v15 = *(void *)(a1 + 3296);
    __int16 v56 = 257;
    uint64_t v16 = sub_22B1D7468(v12, v14, v15, (uint64_t)&v54);
    __int16 v51 = 257;
    uint64_t v17 = sub_22B1D6A70(v12, v13, v16, (uint64_t)&__dst);
    uint64_t v2 = (uint64_t)sub_22B2659D8((void *)a1, v11, v17, 0, 0, *(unsigned __int8 *)(a1 + 3156));
  }
  int v18 = *(_DWORD *)(a1 + 3908);
  if (v18)
  {
    sub_22B1E69D0(v2, "Following fragment input(s) mismatching vertex shader output type(s) or not written by vertex shader: ", v3, v4, v5, v6, v7, v8, v48);
    uint64_t v26 = *(unsigned int *)(a1 + 3904);
    if (v26)
    {
      for (uint64_t i = *(uint64_t **)(a1 + 3896); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      uint64_t i = *(uint64_t **)(a1 + 3896);
    }
    uint64_t v29 = *(void *)(a1 + 3896) + 8 * v26;
    if (i != (uint64_t *)v29)
    {
      uint64_t v30 = *i;
      do
      {
        sub_22B1E69D0(v19, "\t%s", v20, v21, v22, v23, v24, v25, v30 + 16);
        do
        {
          uint64_t v31 = i[1];
          ++i;
          uint64_t v30 = v31;
          if (v31) {
            BOOL v32 = v30 == -8;
          }
          else {
            BOOL v32 = 1;
          }
        }
        while (v32);
      }
      while (i != (uint64_t *)v29);
    }
    uint64_t v33 = *(unsigned int *)(a1 + 3904);
    if (v33)
    {
      for (uint64_t j = *(void *)(a1 + 3896); !*(void *)j || *(void *)j == -8; j += 8)
        ;
    }
    else
    {
      uint64_t j = *(void *)(a1 + 3896);
    }
    uint64_t v36 = *(void *)(a1 + 3896) + 8 * v33;
    if (j != v36)
    {
      std::string v37 = (const std::string::value_type *)&unk_22B27C63D;
      uint64_t v38 = a1 + 408;
      do
      {
        std::string::append((std::string *)(v38 + *(void *)(*(void *)a1 - 24)), v37);
        sub_22B1E2118(&__str, (void *)(*(void *)j + 16), **(void **)j);
        size_t __idx = 0;
        std::string::size_type v39 = std::string::find(&__str, "generated(", 0, 0xAuLL);
        if (v39 == -1)
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            sub_22B1DC004(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            std::string __dst = __str;
          }
        }
        else
        {
          std::string::basic_string(&v54, &__str, v39 + 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__dst);
          int v40 = std::stoi(&v54, &__idx, 10);
          std::string::basic_string(&__dst, &v54, __idx, v40, (std::allocator<char> *)&v53);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)(v38 + *(void *)(*(void *)a1 - 24)), (const std::string::value_type *)p_dst, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        do
        {
          uint64_t v44 = *(void *)(j + 8);
          j += 8;
          uint64_t v43 = v44;
          if (v44) {
            BOOL v45 = v43 == -8;
          }
          else {
            BOOL v45 = 1;
          }
        }
        while (v45);
        std::string v37 = ",";
      }
      while (j != v36);
    }
  }
  if (*(unsigned char *)(a1 + 3144))
  {
    llvm::Module::getOrInsertNamedMetadata();
    if (*(_DWORD *)(a1 + 3152) > 1u) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = llvm::MDString::get();
    }
    v54.__r_.__value_.__r.__words[0] = v46;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  if (v18) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t sub_22B255418(uint64_t a1)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  sub_22B266FAC(a1);
  uint64_t v2 = *(void *)(a1 + 160);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    uint64_t v4 = *(void *)(a1 + 160);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  for (uint64_t i = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96); v3 != i; v3 += 40)
  {
    if (*(void *)(v3 + 8))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 160) + 80);
      uint64_t v7 = v6 ? v6 - 24 : 0;
      uint64_t v8 = *(void *)(v7 + 40);
      uint64_t v9 = v8 ? v8 - 24 : 0;
      sub_22B217B5C(a1 + *(void *)(*(void *)a1 - 24), v9, *(void *)(a1 + 40));
      uint64_t v10 = *(unsigned int *)(v3 + 32);
      uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 8 * v10);
      if ((sub_22B26C064((void *)a1, (unint64_t *)v3, v10, v11) & 1) == 0)
      {
        if (sub_22B1E1ED0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_count"))
        {
          uint64_t v12 = (void *)(a1 + *(void *)(*(void *)a1 - 24));
          uint64_t v13 = sub_22B264EB0((void *)a1);
          *(void *)(a1 + 3136) = sub_22B241FF8(v12, v13, *(void *)v3);
          llvm::Value::replaceAllUsesWith();
          *(unsigned char *)(a1 + 3145) = 1;
        }
        else if (sub_22B1E1ED0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_mask"))
        {
          uint64_t v14 = (void *)(a1 + *(void *)(*(void *)a1 - 24));
          uint64_t v15 = sub_22B2668D0((void *)a1);
          *(void *)(a1 + 3136) = sub_22B241FF8(v14, v15, *(void *)v3);
          llvm::Value::replaceAllUsesWith();
        }
        else if (sub_22B1E1ED0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_id"))
        {
          uint64_t v16 = (void *)(a1 + *(void *)(*(void *)a1 - 24));
          uint64_t v17 = sub_22B264DC4((void *)a1, *(_DWORD *)(a1 + 3152));
          *(void *)(a1 + 3128) = sub_22B241FF8(v16, (uint64_t)v17, *(void *)v3);
          llvm::Value::replaceAllUsesWith();
          *(unsigned char *)(a1 + 3144) = 1;
        }
      }
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)(*(void *)(a1 + 160) + 80);
  if (v20) {
    uint64_t v21 = (llvm::BasicBlock *)(v20 - 24);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v73 = a1 + 344;
  uint64_t v74 = v21;
  uint64_t v22 = a1 + 8;
  uint64_t v77 = 0;
  do
  {
    if ((&off_26488E2A0)[2 * v18]) {
      strlen((&off_26488E2A0)[2 * v18]);
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      int v71 = (llvm::Function *)Function;
      uint64_t v72 = v18;
      uint64_t v24 = *(void *)(Function + 8);
      if (v24)
      {
        uint64_t v25 = LODWORD((&off_26488E2A0)[2 * v18 + 1]);
        do
        {
          uint64_t v26 = *(uint64_t **)(v24 + 24);
          uint64_t v24 = *(void *)(v24 + 8);
          if (v26[1])
          {
            if (v25 == 3) {
              int v27 = v77;
            }
            else {
              int v27 = v19;
            }
            if (!v27)
            {
              uint64_t v28 = *(void *)(v73 + *(void *)(*(void *)a1 - 24));
              unsigned int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 312))(v28, a1 + 3088, v25);
              uint64_t v30 = (char **)(v22 + *(void *)(*(void *)a1 - 24));
              uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v74);
              sub_22B1D3CF8(v30, (char *)v74, FirstInsertionPt);
              uint64_t v32 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              unsigned int v75 = v29;
              uint64_t v33 = sub_22B26854C((void *)a1);
              uint64_t v34 = *(void *)(a1 + 192 + *(void *)(*(void *)a1 - 24));
              LOWORD(v86) = 257;
              uint64_t v35 = sub_22B1D7384(v32, 49, (uint64_t)v33, v34, (uint64_t)v82);
              uint64_t v36 = v35;
              uint64_t v37 = (uint64_t)v77;
              if (v25 == 3) {
                uint64_t v38 = (uint64_t)v19;
              }
              else {
                uint64_t v38 = v35;
              }
              if (v25 == 3) {
                uint64_t v39 = v35;
              }
              else {
                uint64_t v39 = (uint64_t)v77;
              }
              if ((*(unsigned int (**)(void))(**(void **)(v73 + *(void *)(*(void *)a1 - 24)) + 328))())
              {
                uint64_t v40 = sub_22B1DCB28();
                uint64_t v41 = *(void *)(*(void *)a1 - 24);
                uint64_t v42 = v41 + a1 + 8;
                LOWORD(v86) = 257;
                uint64_t v43 = sub_22B1D4034(a1 + 8 + v41, **(void **)(*(void *)v40 + 16), v40, 0, 0, (uint64_t)v82);
                __int16 v80 = 257;
                uint64_t v44 = sub_22B1D6A70(v42, v36, (uint64_t)v43, (uint64_t)v79);
                if (v25 == 3) {
                  uint64_t v37 = v44;
                }
                else {
                  uint64_t v19 = (void *)v44;
                }
                uint64_t v77 = (void *)v37;
                uint64_t v22 = a1 + 8;
              }
              else
              {
                uint64_t v19 = (void *)v38;
                uint64_t v77 = (void *)v39;
                uint64_t v22 = a1 + 8;
              }
              unint64_t v45 = *(unsigned int *)(a1 + 4472);
              if (v45 >= *(unsigned int *)(a1 + 4476)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a1 + 4464) + 8 * v45) = (v25 << 32) | v75;
              ++*(_DWORD *)(a1 + 4472);
              if (v25 == 3) {
                int v27 = v77;
              }
              else {
                int v27 = v19;
              }
            }
            uint64_t v46 = *v26;
            if (*v27 != *v26)
            {
              uint64_t v47 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              LOWORD(v86) = 257;
              sub_22B1D7384(v47, 38, (uint64_t)v27, v46, (uint64_t)v82);
            }
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v26);
        }
        while (v24);
      }
      llvm::Function::eraseFromParent(v71);
      uint64_t v18 = v72;
    }
    ++v18;
  }
  while (v18 != 4);
  uint64_t v48 = v22;
  v82[0] = "air.get_base_vertex.i32";
  v82[1] = "base_vertex";
  uint64_t v49 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
  int v83 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 136))(v49);
  int v84 = 0;
  uint64_t v85 = "air.get_base_vertex.i16";
  uint64_t v86 = "base_vertex";
  uint64_t v50 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
  int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 136))(v50);
  int v88 = 0;
  int v89 = "air.get_base_instance.i32";
  unint64_t v90 = "base_instance";
  uint64_t v51 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
  int v91 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 144))(v51);
  int v92 = 1;
  int v93 = "air.get_base_instance.i16";
  int v94 = "base_instance";
  uint64_t v52 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
  uint64_t v53 = 0;
  int v95 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 144))(v52);
  int v96 = 1;
  v81[0] = 0;
  v81[1] = 0;
  do
  {
    if (v82[3 * v53]) {
      strlen((const char *)v82[3 * v53]);
    }
    uint64_t v54 = llvm::Module::getFunction();
    if (v54)
    {
      unint64_t v76 = (llvm::Function *)v54;
      uint64_t v55 = *(void *)(v54 + 8);
      if (v55)
      {
        __int16 v56 = &v82[3 * v53];
        uint64_t v57 = (unsigned int *)v56 + 5;
        int v78 = v56 + 1;
        uint64_t v58 = (unsigned int *)(v56 + 2);
        do
        {
          uint64_t v59 = *(uint64_t **)(v55 + 24);
          uint64_t v55 = *(void *)(v55 + 8);
          if (v59[1])
          {
            uint64_t v60 = *v57;
            uint64_t v61 = v81[v60];
            if (!v61)
            {
              uint64_t v62 = llvm::PointerType::get();
              if (*(unsigned char *)*v78)
              {
                v79[2] = *v78;
                char v63 = 3;
              }
              else
              {
                char v63 = 1;
              }
              v79[0] = "agc.buffer_pointers.";
              LOBYTE(v80) = 3;
              HIBYTE(v80) = v63;
              uint64_t v61 = sub_22B22A000((uint64_t *)a1, v62, (uint64_t)v79, *v58, 4);
              v81[v60] = v61;
            }
            sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, (uint64_t)v59);
            uint64_t v64 = *(void *)(*(void *)a1 - 24);
            __int16 v80 = 257;
            uint64_t v65 = sub_22B1D4240((uint64_t *)(v48 + v64), **(llvm::Type ***)(*(void *)v61 + 16), v61, 0, (uint64_t)v79);
            uint64_t v66 = *(void *)(*(void *)a1 - 24);
            __int16 v80 = 257;
            uint64_t v67 = sub_22B1D4240((uint64_t *)(v48 + v66), **(llvm::Type ***)(*(void *)v65 + 16), v65, 0, (uint64_t)v79);
            uint64_t v68 = *(void *)(*(void *)a1 - 24) + a1 + 8;
            uint64_t v69 = *v59;
            __int16 v80 = 257;
            sub_22B1D7384(v68, 38, v67, v69, (uint64_t)v79);
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v59);
        }
        while (v55);
      }
      llvm::Function::eraseFromParent(v76);
    }
    ++v53;
  }
  while (v53 != 4);
  return 1;
}

uint64_t sub_22B255DF4(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_22B23B86C(a1);
  if (*(unsigned char *)(a1 + 3146))
  {
    uint64_t v14 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 192);
    uint64_t v15 = v14;
    llvm::StructType::get();
    uint64_t v2 = llvm::PointerType::get();
    uint64_t v12 = "agc.view_mappings_pointer_global";
    __int16 v13 = 259;
    uint64_t v3 = *(void *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 792);
    unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
    *(void *)(a1 + 3264) = sub_22B22A000((uint64_t *)a1, v2, (uint64_t)&v12, v4, *(_DWORD *)(a1 + 3148));
  }
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1675)) {
    return 1;
  }
  sub_22B1F5178();
  uint64_t v5 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(void *)(v5 + 32);
  if (v7 == v5 + 24) {
    return 1;
  }
  while (1)
  {
    uint64_t v8 = v7 ? (llvm::Value *)(v7 - 56) : 0;
    uint64_t v7 = *(void *)(v7 + 8);
    llvm::Value::getName(v8);
    int Key = llvm::StringMapImpl::FindKey();
    BOOL v10 = Key == -1 || Key == (unint64_t)dword_2683E9250;
    if (!v10 && *(_DWORD *)(*(void *)(qword_2683E9248 + 8 * Key) + 8) == 3 && *((void *)v8 + 1)) {
      break;
    }
    if (v7 == v6) {
      return 1;
    }
  }
  std::string::append((std::string *)(a1 + *(void *)(*(void *)a1 - 24) + 408), "Texture writes not supported in vertex shaders");
  return 0;
}

uint64_t sub_22B25602C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE7D8A0;
  v1[568] = &off_26DE7DA98;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7B8A0);
  return sub_22B1ED95C((uint64_t)(v1 + 568));
}

void sub_22B2560F8(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v202 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1653)
    || !*(void *)(a1 + 4512) && !*(void *)(a1 + 4520))
  {
    return;
  }
  if (a4 == -1) {
    snprintf(__str, 0x20uLL, "arg%d");
  }
  else {
    snprintf(__str, 0x20uLL, "arg%d.%d");
  }
  uint64_t v8 = **(llvm::Type ***)(*a2 + 16);
  int v190 = v8;
  unsigned int v9 = *((_DWORD *)v8 + 2);
  unsigned int v10 = v9;
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12) {
    unsigned int v10 = *(unsigned __int8 *)(**((void **)v8 + 2) + 8);
  }
  if (v10 == 15) {
    return;
  }
  if (v9 > 0x11) {
    goto LABEL_37;
  }
  if (((1 << v9) & 0xAC7F) == 0)
  {
    if (((1 << v9) & 0x30000) != 0)
    {
LABEL_42:
      if (!llvm::Type::isSizedDerivedType()) {
        return;
      }
      goto LABEL_12;
    }
LABEL_37:
    if ((*((_DWORD *)v8 + 2) & 0xFE) != 0x12 && v9 != 21) {
      return;
    }
    goto LABEL_42;
  }
LABEL_12:
  int v196 = (uint64_t *)sub_22B1D8210((llvm::DataLayout *)(a1 + 168), v8);
  uint64_t v197 = v11;
  uint64_t v12 = llvm::TypeSize::operator unsigned long long();
  unsigned int v19 = v12;
  if ((v12 & 3) != 0)
  {
    sub_22B1E69D0(v12, "Cannot DMA promote %s : type size %u not a multiple of 4", v13, v14, v15, v16, v17, v18, (char)__str);
    return;
  }
  int v189 = 0;
  BOOL v185 = 0;
  uint64_t v184 = 0;
  uint64_t v187 = 0;
  unint64_t v186 = 0;
  char v188 = 0;
  unsigned int v180 = 128;
  uint64_t v178 = MEMORY[0x230F426A0](0x4000, 8);
  sub_22B259AE0((uint64_t)&v178);
  unsigned int v164 = v181;
  v181[0] = 0;
  v181[24] = 0;
  __int16 v182 = 1;
  char v183 = 0;
  if ((sub_22B2571A4(a1, (uint64_t)a2, (uint64_t)__str, &v189, (uint64_t)&v184, (uint64_t)&v178, v20, v21) & 1) != 0
    || sub_22B2582E0(a1, a2, __str, &v190, v22, v23, v24, v25)
    && (uint64_t v8 = v190,
        int v196 = (uint64_t *)sub_22B1D8210((llvm::DataLayout *)(a1 + 168), v190),
        uint64_t v197 = v26,
        unsigned int v19 = llvm::TypeSize::operator unsigned long long(),
        sub_22B2571A4(a1, (uint64_t)a2, (uint64_t)__str, &v189, (uint64_t)&v184, (uint64_t)&v178, v27, v28)))
  {
    unsigned int v162 = (llvm::DataLayout *)(a1 + 168);
    uint64_t v29 = llvm::UndefValue::get();
    unsigned int v163 = &v198;
    int v196 = &v198;
    uint64_t v197 = 0x800000000;
    unint64_t v172 = v19 >> 2;
    sub_22B23E870((uint64_t)&v196, v172, v29);
    unint64_t v30 = sub_22B258C10(a1, (uint64_t)v8, &v178);
    unint64_t v38 = v37 + 3;
    unint64_t v39 = (unint64_t)(v37 + 3) >> 2;
    uint64_t v40 = *(void *)(*(void *)a1 - 24);
    unsigned int v41 = *(_DWORD *)(*(void *)(a1 + v40 + 344) + 844);
    if (v41 >= 0x80) {
      unsigned int v41 = 128;
    }
    if (*(_DWORD *)(a1 + 3088) + v39 - (v30 >> 2) >= v41 - 2)
    {
      sub_22B1E69D0(v30, "Cannot DMA promote %s : ran out of vi's, need %u, already allocated %u, limit %u", v31, v32, v33, v34, v35, v36, (char)__str);
    }
    else
    {
      unint64_t v42 = v30;
      unint64_t v170 = v30 >> 2;
      uint64_t v171 = (uint64_t *)(v39 - (v30 >> 2));
      uint64_t v43 = v40 + a1 + 8;
      uint64_t v44 = *(void *)(*(void *)(a1 + 160) + 80);
      if (v44) {
        uint64_t v45 = v44 - 24;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v46 = *(void *)(v45 + 40);
      if (v46) {
        uint64_t v47 = v46 - 24;
      }
      else {
        uint64_t v47 = 0;
      }
      sub_22B1FFC54(v43, v47);
      uint64_t v169 = *(unsigned int *)(a1 + 3088);
      if (v19 >= 4)
      {
        unint64_t v48 = 0;
        unint64_t v49 = (v38 >> 2);
        unint64_t v50 = (v42 >> 2);
        if (v172 <= 1) {
          uint64_t v51 = 1;
        }
        else {
          uint64_t v51 = v172;
        }
        do
        {
          if (v48 >= v50 && v48 < v49)
          {
            ++*(_DWORD *)(a1 + 3088);
            uint64_t v52 = sub_22B26854C((void *)a1);
            v196[v48] = (uint64_t)v52;
          }
          ++v48;
        }
        while (v51 != v48);
      }
      int v53 = v182;
      v176[0] = (uint64_t)"vertex_input";
      __int16 v177 = 259;
      __int16 v175 = 264;
      LODWORD(v174[0]) = a3;
      sub_22B258EB4((uint64_t)&v191, v176, v174);
      uint64_t v173 = sub_22B258F44((void *)a1, v8, v53, &v196, (uint64_t)&v191);
      sub_22B1E69D0(v173, "DMA promoting %s to VI, attribute std::string::size_type size = %u words, only words [%u .. %u] actually used", v54, v55, v56, v57, v58, v59, (char)__str);
      BOOL v60 = v189 == 2;
      sub_22B1E69D0(v61, "DMA Entry = {reg_offset: %u, size : %u, offset %u, stride; %u, instanced: %s, div: %u, base_after_divisor: %s}",
        v62,
        v63,
        v64,
        v65,
        v66,
        v67,
        v169);
      LODWORD(v184) = v169;
      uint64_t v68 = v173;
      sub_22B236D04((unsigned int *)&v191, a3, a4);
      HIDWORD(v184) = v191;
      unint64_t v186 = __PAIR64__(v170, v171);
      LODWORD(v187) = v172;
      BOOL v185 = v60;
      uint64_t v69 = (_OWORD *)sub_22B2592D0(a1 + 3936, (unint64_t)&v184);
      uint64_t v70 = (_OWORD *)(*(void *)(a1 + 3936) + 32 * *(unsigned int *)(a1 + 3944));
      long long v71 = v69[1];
      *uint64_t v70 = *v69;
      v70[1] = v71;
      ++*(_DWORD *)(a1 + 3944);
      if (*(unsigned char *)(v68 + 16) == 60)
      {
        uint64_t v171 = *(uint64_t **)(v68 - 32);
      }
      else if (v183)
      {
        uint64_t v73 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
        LOWORD(v194) = 257;
        uint64_t v74 = (uint64_t *)sub_22B2435DC(v73, v8, (uint64_t)&v191);
        unsigned int v75 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 8);
        uint64_t v171 = v74;
        sub_22B1F718C(v75, (llvm::Type **)v68, (uint64_t)v74, 0);
      }
      else
      {
        uint64_t v171 = 0;
      }
      if (v179)
      {
        uint64_t v169 = a1 + 192;
        unint64_t v170 = a1 + 8;
        while (1)
        {
          unint64_t v76 = (void *)v178;
          if (v180)
          {
            unint64_t v77 = (unint64_t)v180 << 7;
            int v78 = (uint64_t **)(v178 + 24);
            unint64_t v79 = v77;
            while (1)
            {
              __int16 v80 = *v78;
              if (((unint64_t)*v78 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                break;
              }
              v78 += 16;
              v79 -= 128;
              if (!v79)
              {
                __int16 v80 = *(uint64_t **)(v178 + ((unint64_t)v180 << 7) + 24);
                break;
              }
            }
            unint64_t v81 = (unint64_t)v180 << 7;
            unint64_t v82 = v178;
            do
            {
              if ((*(void *)(v82 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_59;
              }
              v82 += 128;
              v81 -= 128;
            }
            while (v81);
            unint64_t v82 = v178 + ((unint64_t)v180 << 7);
LABEL_59:
            while ((v76[3] | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v76 += 16;
              v77 -= 128;
              if (!v77)
              {
                unint64_t v76 = (void *)(v178 + ((unint64_t)v180 << 7));
                break;
              }
            }
          }
          else
          {
            __int16 v80 = *(uint64_t **)(v178 + 24);
            unint64_t v82 = v178;
          }
          sub_22B259348((int32x2_t *)&v178, v76);
          uint64_t v83 = *(unsigned int *)(v82 + 48);
          int v84 = sub_22B1FFC54(*(void *)(*(void *)a1 - 24) + a1 + 8, (uint64_t)v80);
          if (!v83)
          {
            int v93 = *(_DWORD *)(v82 + 124);
            if (v93 == 3)
            {
              uint64_t v105 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              uint64_t v106 = llvm::PointerType::get();
              LOWORD(v194) = 257;
              uint64_t v107 = sub_22B1D7384(v105, 49, (uint64_t)v171, v106, (uint64_t)&v191);
              uint64_t v108 = *(void *)(*(void *)a1 - 24);
              LOWORD(v194) = 257;
              sub_22B1D4240((uint64_t *)(v170 + v108), **(llvm::Type ***)(*(void *)v107 + 16), v107, 0, (uint64_t)&v191);
            }
            else if (v93 == 1)
            {
              sub_22B242678(a1 + *(void *)(*(void *)a1 - 24), v68, *(_DWORD *)(*v80 + 32));
            }
            goto LABEL_107;
          }
          if (!*(unsigned char *)(v82 + 120))
          {
            MEMORY[0x270FA5388](v84);
            int v96 = (uint64_t **)((char *)&v160 - v95);
            if (v94 >= 0x200) {
              size_t v97 = 512;
            }
            else {
              size_t v97 = v94;
            }
            bzero((char *)&v160 - v95, v97);
            uint64_t v98 = llvm::ConstantInt::get();
            uint64_t v99 = 0;
            *int v96 = (uint64_t *)v98;
            do
            {
              v96[v99 + 1] = *(uint64_t **)(*(void *)(v82 + 40) + v99 * 8);
              ++v99;
            }
            while (v83 != v99);
            uint64_t v100 = a1 + *(void *)(*(void *)a1 - 24);
            LOWORD(v194) = 257;
            uint64_t v101 = sub_22B229F08(v100, v171, v96, (v83 + 1), (uint64_t)&v191);
            if ((*(_DWORD *)(v82 + 124) | 2) == 3)
            {
              uint64_t v102 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              uint64_t v103 = llvm::PointerType::get();
              LOWORD(v194) = 257;
              uint64_t v101 = sub_22B1D7384(v102, 49, v101, v103, (uint64_t)&v191);
            }
            uint64_t v104 = *(void *)(*(void *)a1 - 24);
            LOWORD(v194) = 257;
            sub_22B1D4240((uint64_t *)(v170 + v104), **(llvm::Type ***)(*(void *)v101 + 16), v101, 0, (uint64_t)&v191);
            goto LABEL_107;
          }
          uint64_t v85 = MEMORY[0x270FA5388](v84);
          int v87 = (char *)&v160 - ((v86 + 15) & 0x7FFFFFFF0);
          uint64_t v88 = *(void *)(v82 + 40);
          int v89 = v87;
          uint64_t v90 = v83;
          do
          {
            int v91 = (void *)(*(void *)v88 + 24);
            if (*(_DWORD *)(*(void *)v88 + 32) >= 0x41u) {
              int v91 = (void *)*v91;
            }
            *v89++ = *v91;
            v88 += 8;
            --v90;
          }
          while (v90);
          switch(*(_DWORD *)(v82 + 124))
          {
            case 0:
              uint64_t v92 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              LOWORD(v194) = 257;
              sub_22B1D7940(v92, v68, (uint64_t)v87, v83, (uint64_t)&v191);
              goto LABEL_107;
            case 1:
              uint64_t v109 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              LOWORD(v194) = 257;
              uint64_t v110 = sub_22B1D7940(v109, v68, (uint64_t)v87, v83, (uint64_t)&v191);
              sub_22B242678(a1 + *(void *)(*(void *)a1 - 24), v110, *(_DWORD *)(*v80 + 32));
              goto LABEL_107;
            case 2:
              long long v191 = (void *)((sub_22B1D8270(v162, *v80) + 7) >> 3);
              v192[0] = v111 == 1;
              unsigned int v112 = llvm::TypeSize::operator unsigned long long();
              unsigned int v113 = v112 >> 2;
              uint64_t v114 = *v80;
              if ((*(_DWORD *)(*v80 + 8) & 0xFE) == 0x10)
              {
                uint64_t v161 = &v160;
                uint64_t v115 = *(llvm::ArrayType **)(**(void **)(v114 + 16) + 24);
                llvm::ArrayType::get(v115, (llvm::Type *)v113);
                uint64_t v116 = llvm::UndefValue::get();
                LODWORD(v174[0]) = 0;
                if (v112 >= 4)
                {
                  unint64_t v172 = (unint64_t)v115;
                  do
                  {
                    uint64_t v134 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                    LOWORD(v194) = 257;
                    uint64_t v135 = sub_22B1D7940(v134, v173, (uint64_t)v87, v83, (uint64_t)&v191);
                    uint64_t v136 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                    LOWORD(v194) = 257;
                    uint64_t v137 = sub_22B1D7384(v136, 49, v135, v172, (uint64_t)&v191);
                    __int16 v177 = 257;
                    uint64_t v116 = sub_22B1D6D44(v136, v116, v137, (uint64_t)v174, 1, (uint64_t)v176);
                    ++*(_DWORD *)&v87[4 * (v83 - 1)];
                    ++LODWORD(v174[0]);
                  }
                  while (LODWORD(v174[0]) < v113);
                }
                uint64_t v138 = llvm::UndefValue::get();
                uint64_t v139 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                LODWORD(v176[0]) = 0;
                LOWORD(v194) = 257;
                sub_22B1D6D44(v139, v138, v116, (uint64_t)v176, 1, (uint64_t)&v191);
LABEL_106:
                uint64_t v68 = v173;
                goto LABEL_107;
              }
              uint64_t v129 = *(v80 - 4);
              if (*(unsigned char *)(v129 + 16) != 62)
              {
                uint64_t v161 = &v160;
                uint64_t v140 = **(void **)(**(void **)(v129 - 32) + 16);
                llvm::FixedVectorType::get();
                unint64_t v141 = llvm::UndefValue::get();
                if (v112 >= 4)
                {
                  uint64_t v142 = 0;
                  uint64_t v168 = (v83 - 1);
                  if (v113 <= 1) {
                    uint64_t v143 = 1;
                  }
                  else {
                    uint64_t v143 = v113;
                  }
                  uint64_t v166 = v140;
                  uint64_t v167 = v143;
                  uint64_t v165 = v83;
                  do
                  {
                    unint64_t v172 = v141;
                    uint64_t v144 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                    LOWORD(v194) = 257;
                    uint64_t v145 = sub_22B1D7940(v144, v173, (uint64_t)v87, v165, (uint64_t)&v191);
                    uint64_t v146 = a1 + *(void *)(*(void *)a1 - 24);
                    LOWORD(v194) = 257;
                    uint64_t v147 = sub_22B1D7384(v146 + 8, 49, v145, v166, (uint64_t)&v191);
                    __int16 v177 = 257;
                    uint64_t v148 = llvm::ConstantInt::get();
                    unint64_t v141 = sub_22B2427EC(v146 + 8, v172, v147, v148, (uint64_t)v176);
                    ++*(_DWORD *)&v87[4 * v168];
                    ++v142;
                  }
                  while (v167 != v142);
                }
                uint64_t v149 = *(void *)(*(void *)a1 - 24) + a1 + 8;
                uint64_t v150 = *v80;
                LOWORD(v194) = 257;
                sub_22B1D7384(v149, 49, v141, v150, (uint64_t)&v191);
                goto LABEL_106;
              }
              uint64_t v130 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              LOWORD(v194) = 257;
              uint64_t v131 = sub_22B1D7940(v130, v68, (uint64_t)v87, v83, (uint64_t)&v191);
              uint64_t v132 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              uint64_t v133 = *v80;
              LOWORD(v194) = 257;
              sub_22B1D7384(v132, 49, v131, v133, (uint64_t)&v191);
LABEL_107:
              uint64_t v151 = *(v80 - 4);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v80);
              if (!*(void *)(v151 + 8))
              {
                v195[3] = 0;
                llvm::RecursivelyDeleteTriviallyDeadInstructions();
                sub_22B23EFCC(v195);
              }
              if (!v179) {
                goto LABEL_110;
              }
              break;
            case 3:
              MEMORY[0x270FA5388](v85);
              unint64_t v119 = (uint64_t **)((char *)&v160 - v118);
              if (v117 >= 0x200) {
                size_t v120 = 512;
              }
              else {
                size_t v120 = v117;
              }
              bzero((char *)&v160 - v118, v120);
              uint64_t v121 = llvm::ConstantInt::get();
              uint64_t v122 = 0;
              *unint64_t v119 = (uint64_t *)v121;
              do
              {
                v119[v122 + 1] = *(uint64_t **)(*(void *)(v82 + 40) + v122 * 8);
                ++v122;
              }
              while (v83 != v122);
              uint64_t v123 = a1 + *(void *)(*(void *)a1 - 24);
              LOWORD(v194) = 257;
              uint64_t v124 = sub_22B229F08(v123, v171, v119, (v83 + 1), (uint64_t)&v191);
              uint64_t v125 = *(void *)(*(void *)a1 - 24) + a1 + 8;
              uint64_t v126 = llvm::PointerType::get();
              LOWORD(v194) = 257;
              uint64_t v127 = sub_22B1D7384(v125, 49, v124, v126, (uint64_t)&v191);
              uint64_t v128 = *(void *)(*(void *)a1 - 24);
              LOWORD(v194) = 257;
              sub_22B1D4240((uint64_t *)(v170 + v128), **(llvm::Type ***)(*(void *)v127 + 16), v127, 0, (uint64_t)&v191);
              uint64_t v68 = v173;
              goto LABEL_107;
            default:
              goto LABEL_107;
          }
        }
      }
    }
LABEL_110:
    if (v196 != v163) {
      free(v196);
    }
  }
  sub_22B22A45C((uint64_t)v164);
  int v152 = (llvm *)v178;
  if (v180)
  {
    uint64_t v197 = 2;
    uint64_t v198 = 0;
    uint64_t v199 = -4096;
    uint64_t v200 = 0;
    int v196 = (uint64_t *)&unk_26DE86E90;
    v192[0] = 2;
    v192[1] = 0;
    uint64_t v193 = -8192;
    uint64_t v194 = 0;
    long long v191 = &unk_26DE86E90;
    uint64_t v153 = v178 + 56;
    unint64_t v154 = (unint64_t)v180 << 7;
    do
    {
      uint64_t v155 = *(void *)(v153 - 32);
      if (v155 != v199 && v155 != v193)
      {
        unsigned int v157 = *(void **)(v153 - 16);
        if ((void *)v153 != v157)
        {
          free(v157);
          uint64_t v155 = *(void *)(v153 - 32);
        }
      }
      if (v155 != -8192 && v155 != -4096 && v155 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v153 - 48));
      }
      v153 += 128;
      v154 -= 128;
    }
    while (v154);
    if (v193 != -8192 && v193 != -4096 && v193) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v192);
    }
    if (v199 != -8192 && v199 != -4096)
    {
      if (v199) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v197);
      }
    }
    int v152 = (llvm *)v178;
    int v159 = (void *)((unint64_t)v180 << 7);
  }
  else
  {
    int v159 = 0;
  }
  llvm::deallocate_buffer(v152, v159);
}

uint64_t sub_22B2571A4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v203 = a3;
  uint64_t v239 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = (void *)a1;
  if (!*(void *)(v8 + 8))
  {
    uint64_t v12 = *(void *)(v8 + 24);
    if (*(unsigned char *)(v12 + 16) != 77) {
      uint64_t v12 = a2;
    }
    uint64_t v8 = *(void *)(v12 + 8);
    if (!v8) {
      return 1;
    }
  }
  uint64_t v13 = &v220;
  uint64_t v14 = (llvm::DataLayout *)(a1 + 168);
  char v15 = 1;
  uint64_t v200 = (void *)a1;
  while (1)
  {
    uint64_t v16 = *(void *)(v8 + 24);
    if (!v16 || *(unsigned char *)(v16 + 16) != 62) {
      break;
    }
    uint64_t v17 = *(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
    if (v17 && *(unsigned char *)(v17 + 16) == 67) {
      uint64_t v17 = *(void *)(v17 - 32);
    }
    int v210 = 1;
    uint64_t v209 = 0;
    uint64_t v18 = sub_22B25A400(v17, &v210, &v209);
    uint64_t v25 = 0;
    if (v18)
    {
      if (*(unsigned char *)(v18 + 16) == 84)
      {
        uint64_t v25 = *(void *)(v18 - 32);
        if (!v25 || *(unsigned char *)(v25 + 16) || *(void *)(v25 + 24) != *(void *)(v18 + 72)) {
          uint64_t v25 = 0;
        }
      }
    }
    uint64_t v26 = v11[564];
    if (v25 == v26) {
      uint64_t v27 = 566;
    }
    else {
      uint64_t v27 = 567;
    }
    uint64_t v28 = v209;
    int v29 = v209 != 0;
    if (!v25 || (uint64_t v30 = v11[v27], v25 != v26) && v25 != v11[565])
    {
      uint64_t v194 = "Cannot DMA promote %s : GEP not indexed with instance_id/vertex_id";
      goto LABEL_328;
    }
    if (v209 && v209 != v30)
    {
      uint64_t v194 = "Cannot DMA promote %s: GEP indexed with index type not matching base type";
      goto LABEL_328;
    }
    if (v15)
    {
      BOOL v31 = v25 == v26;
      if (v25 == v26) {
        int v32 = 1;
      }
      else {
        int v32 = 2;
      }
      *a4 = v32;
      *(_DWORD *)(v10 + 24) = v210;
      *(unsigned char *)(v10 + 28) = v29;
      if (v31 && v28)
      {
        uint64_t v194 = "Cannot DMA promote %s: GEP indexed with vertex_id and divisor with bias";
LABEL_328:
        sub_22B1E69D0(v18, v194, v19, v20, v21, v22, v23, v24, v203);
        return 0;
      }
      goto LABEL_41;
    }
    if (*a4 == 2)
    {
      uint64_t v26 = v11[565];
    }
    else if (*a4 != 1)
    {
      goto LABEL_39;
    }
    if (v25 != v26) {
      goto LABEL_325;
    }
LABEL_39:
    if (v210 != *(_DWORD *)(v10 + 24) || *(unsigned __int8 *)(v10 + 28) != v29)
    {
LABEL_325:
      uint64_t v194 = "Cannot DMA promote %s : GEP indexed inconsistently";
      goto LABEL_328;
    }
LABEL_41:
    unsigned int v216 = 128;
    v215[0] = (llvm *)MEMORY[0x230F426A0](0x4000, 8);
    sub_22B25A660((uint64_t)v215);
    v217[0] = 0;
    v217[24] = 0;
    uint64_t v233 = &v235;
    uint64_t v234 = 0x800000000;
    LOBYTE(v238) = 0;
    HIDWORD(v238) = 0;
    sub_22B236C80((uint64_t)&v233, (char *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 64), (char *)v16);
    uint64_t v33 = v234;
    uint64_t v197 = v8;
    char v34 = 1;
    if (v234)
    {
      uint64_t v35 = v233;
      do
      {
        uint64_t v36 = *v35++;
        v34 &= *(unsigned char *)(v36 + 16) == 16;
        --v33;
      }
      while (v33);
    }
    LOBYTE(v238) = v34;
    uint64_t v37 = sub_22B25A740((uint64_t)v215, v16);
    uint64_t v38 = sub_22B1E0358(v37, (uint64_t)&v233);
    *(void *)(v38 + 80) = v238;
    unint64_t v39 = (uint64_t *)operator new(8uLL);
    uint64_t v201 = (llvm::GEPOperator *)v16;
    *unint64_t v39 = v16;
    long long v206 = v39 + 1;
    uint64_t v40 = v39 + 1;
    while (1)
    {
      uint64_t v202 = v39;
      uint64_t v199 = v40;
      if (v39 == v40) {
        break;
      }
      uint64_t v42 = *--v40;
      unsigned int v41 = (llvm::GEPOperator *)v42;
      uint64_t v227 = 0;
      unint64_t SourceElementType = sub_22B259724((uint64_t)v215[0], v216, v42, &v227);
      if (SourceElementType) {
        uint64_t v51 = (char *)v227;
      }
      else {
        uint64_t v51 = (char *)v215[0] + 128 * (unint64_t)v216;
      }
      uint64_t v227 = &v229;
      uint64_t v228 = 0x800000000;
      int v52 = *((_DWORD *)v51 + 12);
      if (v52)
      {
        unint64_t SourceElementType = sub_22B1E0358((uint64_t)&v227, (uint64_t)(v51 + 40));
        int v52 = v228;
      }
      unint64_t v232 = *((void *)v51 + 15);
      if (v41 != v201 || v52)
      {
        unint64_t SourceElementType = llvm::GEPOperator::getSourceElementType(v41);
        int v54 = *((_DWORD *)v41 + 5);
        uint64_t v55 = v54 & 0x7FFFFFF;
        if ((v54 & 0x40000000) != 0) {
          uint64_t v56 = (_DWORD *)*((void *)v41 - 1);
        }
        else {
          uint64_t v56 = (_DWORD *)((char *)v41 - 32 * v55);
        }
        uint64_t v57 = v56 + 8;
        unint64_t v58 = SourceElementType | 4;
        uint64_t v59 = &v56[8 * v55];
        if (v56 + 8 == v59)
        {
          LODWORD(v205) = 0;
        }
        else
        {
          do
          {
            unint64_t v60 = v58;
            unint64_t SourceElementType = v58 & 0xFFFFFFFFFFFFFFF8;
            if ((v58 & 4) == 0 || !SourceElementType) {
              unint64_t SourceElementType = llvm::StructType::getTypeAtIndex();
            }
            int v61 = *(unsigned __int8 *)(SourceElementType + 8);
            if (SourceElementType && v61 == 17 || SourceElementType && (v61 & 0xFE) == 0x12)
            {
              unint64_t v58 = *(void *)(SourceElementType + 24) | 4;
            }
            else if (v61 == 16)
            {
              unint64_t v58 = SourceElementType & 0xFFFFFFFFFFFFFFFBLL;
            }
            else
            {
              unint64_t v58 = 0;
            }
            v57 += 8;
          }
          while (v57 != v59);
          uint64_t v205 = (v60 >> 2) & 1;
        }
        int v53 = v41;
      }
      else
      {
        LODWORD(v205) = 0;
        int v53 = v201;
      }
      uint64_t v62 = *((void *)v53 + 1);
      if (!v62)
      {
        unint64_t v39 = v202;
LABEL_261:
        long long v218 = 0;
        if (sub_22B259724((uint64_t)v215[0], v216, (uint64_t)v41, &v218)) {
          unsigned int v164 = v218;
        }
        else {
          unsigned int v164 = (void *)((char *)v215[0] + 128 * (unint64_t)v216);
        }
        if ((void *)v215[0] + 16 * (unint64_t)v216 != v164) {
          sub_22B25AD6C((int32x2_t *)v215, v164);
        }
        char v165 = 1;
        goto LABEL_274;
      }
      unint64_t v39 = v202;
      while (1)
      {
        if (*(unsigned __int8 *)(*(void *)(v62 + 24) + 16) <= 0x1Bu) {
          uint64_t v63 = 0;
        }
        else {
          uint64_t v63 = *(void *)(v62 + 24);
        }
        int v64 = *(unsigned __int8 *)(v63 + 16);
        if (v64 == 60 && v63 != 0)
        {
          unint64_t SourceElementType = sub_22B25A820(v9, v63, (uint64_t)&v227);
          goto LABEL_258;
        }
        BOOL v66 = v64 != 62 || v63 == 0;
        uint64_t v207 = v62;
        if (!v66)
        {
          uint64_t v134 = *(unsigned __int8 **)(v63 - 32 * (*(_DWORD *)(v63 + 20) & 0x7FFFFFF) + 32);
          if (v134) {
            BOOL v135 = v134[16] > 0x14u;
          }
          else {
            BOOL v135 = 1;
          }
          if (!v135 && llvm::Constant::isNullValue((llvm::Constant *)v134))
          {
            long long v218 = v13;
            uint64_t v219 = 0x800000000;
            if (v228) {
              sub_22B1E0358((uint64_t)&v218, (uint64_t)&v227);
            }
            unint64_t v226 = v232;
            sub_22B236C80((uint64_t)&v218, (char *)(v63 - 32 * (*(_DWORD *)(v63 + 20) & 0x7FFFFFF) + 64), (char *)v63);
            char v136 = v232;
            if ((_BYTE)v232)
            {
              uint64_t v137 = v219;
              if (v219)
              {
                char v136 = 1;
                uint64_t v138 = (uint64_t *)v218;
                do
                {
                  uint64_t v139 = *v138++;
                  v136 &= *(unsigned char *)(v139 + 16) == 16;
                  --v137;
                }
                while (v137);
              }
              else
              {
                char v136 = 1;
              }
            }
            LOBYTE(v226) = v136;
            uint64_t v159 = sub_22B25A740((uint64_t)v215, v63);
            uint64_t v160 = sub_22B1E0358(v159, (uint64_t)&v218);
            *(void *)(v160 + 80) = v226;
            if (v40 < v206) {
              goto LABEL_240;
            }
            uint64_t v161 = v40 - v39;
            unint64_t v162 = v161 + 1;
            if (!((unint64_t)(v161 + 1) >> 61))
            {
              if (((char *)v206 - (char *)v39) >> 2 > v162) {
                unint64_t v162 = ((char *)v206 - (char *)v39) >> 2;
              }
              if ((unint64_t)((char *)v206 - (char *)v39) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v162;
              }
              if (v155) {
                unint64_t v155 = (unint64_t)sub_22B216148(v155);
              }
              else {
                uint64_t v44 = 0;
              }
              int v156 = (uint64_t *)(v155 + 8 * v161);
              *int v156 = v63;
              unsigned int v157 = v156 + 1;
              if (v40 != v39)
              {
                do
                {
                  uint64_t v163 = *--v40;
                  *--int v156 = v163;
                }
                while (v40 != v39);
                goto LABEL_252;
              }
              goto LABEL_253;
            }
LABEL_330:
            abort();
          }
          if (v205)
          {
            uint64_t v140 = (llvm::Constant **)*((void *)v227 + v228 - 1);
            unint64_t v141 = *(llvm::Constant ***)(v63 - 32 * (*(_DWORD *)(v63 + 20) & 0x7FFFFFF) + 32);
            if (v141 == (llvm::Constant **)llvm::Constant::getNullValue(*v141, v44)) {
              goto LABEL_218;
            }
            if (v140 == (llvm::Constant **)llvm::Constant::getNullValue(*v140, v142))
            {
              uint64_t v140 = v141;
LABEL_218:
              long long v218 = v13;
              uint64_t v219 = 0x800000000;
              int v146 = v228;
              if (v228)
              {
                sub_22B1E0358((uint64_t)&v218, (uint64_t)&v227);
                int v146 = v219;
              }
              unint64_t v226 = v232;
              LODWORD(v219) = v146 - 1;
              sub_22B1D6788((uint64_t)&v218, (uint64_t)v140);
              sub_22B236C80((uint64_t)&v218, (char *)(v63 - 32 * (*(_DWORD *)(v63 + 20) & 0x7FFFFFF) + 64), (char *)v63);
              uint64_t v147 = v219;
              if (v219)
              {
                char v148 = 1;
                uint64_t v149 = (uint64_t *)v218;
                uint64_t v62 = v207;
                do
                {
                  uint64_t v150 = *v149++;
                  v148 &= *(unsigned char *)(v150 + 16) == 16;
                  --v147;
                }
                while (v147);
              }
              else
              {
                char v148 = 1;
                uint64_t v62 = v207;
              }
              LOBYTE(v226) = v148;
              uint64_t v151 = sub_22B25A740((uint64_t)v215, v63);
              uint64_t v152 = sub_22B1E0358(v151, (uint64_t)&v218);
              *(void *)(v152 + 80) = v226;
              if (v40 < v206)
              {
LABEL_240:
                *v40++ = v63;
              }
              else
              {
                uint64_t v153 = v40 - v39;
                unint64_t v154 = v153 + 1;
                if ((unint64_t)(v153 + 1) >> 61) {
                  goto LABEL_330;
                }
                if (((char *)v206 - (char *)v39) >> 2 > v154) {
                  unint64_t v154 = ((char *)v206 - (char *)v39) >> 2;
                }
                if ((unint64_t)((char *)v206 - (char *)v39) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v155 = v154;
                }
                if (v155) {
                  unint64_t v155 = (unint64_t)sub_22B216148(v155);
                }
                else {
                  uint64_t v44 = 0;
                }
                int v156 = (uint64_t *)(v155 + 8 * v153);
                *int v156 = v63;
                unsigned int v157 = v156 + 1;
                if (v40 != v39)
                {
                  do
                  {
                    uint64_t v158 = *--v40;
                    *--int v156 = v158;
                  }
                  while (v40 != v39);
LABEL_252:
                  uint64_t v40 = v39;
                }
LABEL_253:
                unint64_t v39 = v156;
                long long v206 = (uint64_t *)(v155 + 8 * (void)v44);
                if (v40) {
                  operator delete(v40);
                }
                uint64_t v40 = v157;
                uint64_t v62 = v207;
              }
              unint64_t SourceElementType = (unint64_t)v218;
              if (v218 != v13) {
                free(v218);
              }
              goto LABEL_258;
            }
            if (*v141 == *v140)
            {
              sub_22B1FFC54((uint64_t)v200 + *(void *)(*v200 - 24) + 8, v63);
              uint64_t v143 = (uint64_t)v200 + *(void *)(*v200 - 24) + 8;
              uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v63);
              __int16 v221 = 773;
              long long v218 = Name;
              uint64_t v219 = v145;
              int v220 = ".sum";
              uint64_t v140 = (llvm::Constant **)sub_22B1D6A70(v143, (uint64_t)v141, (uint64_t)v140, (uint64_t)&v218);
              goto LABEL_218;
            }
          }
          goto LABEL_273;
        }
        if (v64 != 77 || v63 == 0)
        {
          sub_22B1E69D0(SourceElementType, "Cannot DMA promote %s : GEP not used in a load", v45, v46, v47, v48, v49, v50, v203);
          goto LABEL_273;
        }
        uint64_t v68 = *(void *)v63;
        if (*(unsigned char *)(*(void *)v63 + 8) != 15)
        {
          sub_22B1E69D0(SourceElementType, "Cannot DMA promote %s : pointer bitcast to non-pointer type", v45, v46, v47, v48, v49, v50, v203);
          goto LABEL_273;
        }
        uint64_t v69 = (llvm::Value *)v63;
        uint64_t v70 = *(void *)(v63 + 8);
        if (v70) {
          break;
        }
LABEL_258:
        uint64_t v62 = *(void *)(v62 + 8);
        if (!v62) {
          goto LABEL_261;
        }
      }
      uint64_t v198 = v69;
      uint64_t v208 = **(void **)(**((void **)v69 - 4) + 16);
      long long v71 = **(llvm::Type ***)(v68 + 16);
      uint64_t v204 = v71;
      while (1)
      {
        uint64_t v72 = *(void *)(v70 + 24);
        int v73 = *(unsigned __int8 *)(v72 + 16);
        if (!v72 || v73 != 60) {
          break;
        }
        if ((*(_DWORD *)(v208 + 8) & 0xFE) == 0x12
          && (uint64_t v74 = *(void *)v72, (*(_DWORD *)(*(void *)v72 + 8) & 0xFE) == 0x12)
          && **(void **)(v208 + 16) == **(void **)(v74 + 16)
          && (uint64_t v75 = *(unsigned int *)(v74 + 32),
              unint64_t v76 = *(unsigned int *)(v208 + 32),
              v75 > v76))
        {
          uint64_t v77 = *(void *)(v72 + 8);
          if (v77)
          {
            while (1)
            {
              uint64_t v78 = *(void *)(v77 + 24);
              int v79 = *(unsigned __int8 *)(v78 + 16);
              if (v78 && v79 == 91)
              {
                uint64_t v80 = *(unsigned int *)(*(void *)v78 + 32);
                long long v71 = v204;
                unint64_t v81 = 0;
                if (v80)
                {
                  unint64_t v82 = *(unsigned int **)(v78 + 64);
                  unint64_t v83 = -1;
                  while (1)
                  {
                    unsigned int v85 = *v82++;
                    unint64_t v84 = v85;
                    if ((v85 & 0x80000000) == 0 && v84 < v75)
                    {
                      unint64_t SourceElementType = *(void *)(v78 - 64);
                      if (SourceElementType == v72) {
                        goto LABEL_115;
                      }
                    }
                    if (v84 >= v75 && v84 < 2 * (int)v75)
                    {
                      unint64_t SourceElementType = *(void *)(v78 - 32);
                      if (SourceElementType == v72) {
                        break;
                      }
                    }
LABEL_119:
                    if (!--v80) {
                      goto LABEL_130;
                    }
                  }
                  unint64_t v84 = (v84 - v75);
LABEL_115:
                  if (v83 >= v84) {
                    unint64_t v83 = v84;
                  }
                  if (v81 <= v84) {
                    unint64_t v81 = v84;
                  }
                  goto LABEL_119;
                }
                unint64_t v83 = -1;
LABEL_130:
                unint64_t v87 = v81 + 1;
              }
              else
              {
                unint64_t v83 = 0;
                long long v71 = v204;
                if (!v78) {
                  goto LABEL_128;
                }
                unint64_t v87 = v75;
                if (v79 == 89)
                {
                  uint64_t v88 = *(void *)(v78 - 32);
                  if (v88) {
                    BOOL v89 = *(unsigned char *)(v88 + 16) == 16;
                  }
                  else {
                    BOOL v89 = 0;
                  }
                  if (!v89)
                  {
                    unint64_t v83 = 0;
LABEL_128:
                    unint64_t v87 = v75;
                    goto LABEL_134;
                  }
                  uint64_t v90 = (unint64_t *)(v88 + 24);
                  if (*(_DWORD *)(v88 + 32) >= 0x41u) {
                    uint64_t v90 = (unint64_t *)*v90;
                  }
                  unint64_t v83 = *v90;
                  unint64_t v87 = v83 + 1;
                }
              }
LABEL_134:
              if (v83 >= v87 || v87 > v76) {
                goto LABEL_166;
              }
              uint64_t v77 = *(void *)(v77 + 8);
              int v91 = 1;
              uint64_t v92 = "DMA promotion %s : truncated extend bitcast pattern";
              if (!v77) {
                goto LABEL_171;
              }
            }
          }
          int v91 = 1;
          uint64_t v92 = "DMA promotion %s : truncated extend bitcast pattern";
        }
        else
        {
LABEL_166:
          if ((_BYTE)v232
            && (unint64_t SourceElementType = sub_22B25A950((uint64_t)v71, v208, v14, v205), (SourceElementType & 1) != 0))
          {
            int v91 = 2;
            uint64_t v92 = "DMA promotion %s : reinterpreted array bitcast pattern";
          }
          else
          {
            long long v218 = (void *)sub_22B1D8210(v14, v71);
            uint64_t v219 = v116;
            unint64_t v117 = llvm::TypeSize::operator unsigned long long();
            std::string __p = (void *)sub_22B1D8210(v14, (llvm::Type *)v208);
            uint64_t v212 = v118;
            unint64_t SourceElementType = llvm::TypeSize::operator unsigned long long();
            if (v117 > SourceElementType)
            {
              sub_22B1E69D0(SourceElementType, "DMA promotion %s : unrecognized GEP bitcast pattern: ", v45, v46, v47, v48, v49, v50, v203);
              std::string __p = 0;
              uint64_t v212 = 0;
              uint64_t v213 = 0;
              LODWORD(v219) = 0;
              char v222 = 0;
              uint64_t v223 = 0;
              int v224 = 1;
              v13[1] = 0;
              _OWORD v13[2] = 0;
              char *v13 = 0;
              long long v218 = (void *)(MEMORY[0x263F8BBF0] + 16);
              p_p = &__p;
              sub_22B1EAD44((llvm::raw_ostream *)&v218);
              uint64_t v167 = llvm::Value::print(v198, (llvm::raw_ostream *)&v218);
              LOBYTE(v174) = (_BYTE)p_p;
              if (*((char *)p_p + 23) < 0) {
                uint64_t v174 = *p_p;
              }
              sub_22B1E69D0(v167, "bitcast: %s", v168, v169, v170, v171, v172, v173, (char)v174);
              if (SHIBYTE(v213) < 0)
              {
                *(unsigned char *)std::string __p = 0;
                uint64_t v212 = 0;
              }
              else
              {
                LOBYTE(__p) = 0;
                HIBYTE(v213) = 0;
              }
              uint64_t v175 = llvm::Value::print((llvm::Value *)v72, (llvm::raw_ostream *)&v218);
              LOBYTE(v182) = (_BYTE)p_p;
              if (*((char *)p_p + 23) < 0) {
                __int16 v182 = *p_p;
              }
              sub_22B1E69D0(v175, "load:    %s", v176, v177, v178, v179, v180, v181, (char)v182);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v218);
              if (SHIBYTE(v213) < 0) {
                operator delete(__p);
              }
              char v165 = 0;
              goto LABEL_274;
            }
            int v91 = 3;
            uint64_t v92 = "DMA promotion %s : truncate to smaller sized type pattern";
          }
        }
LABEL_171:
        sub_22B1E69D0(SourceElementType, v92, v45, v46, v47, v48, v49, v50, v203);
        if (HIDWORD(v232))
        {
          sub_22B1E69D0(v119, "DMA promotion %s : can't combine bitcast types", v120, v121, v122, v123, v124, v125, v203);
          goto LABEL_273;
        }
        long long v218 = v13;
        uint64_t v219 = 0x800000000;
        if (v228) {
          sub_22B1E0358((uint64_t)&v218, (uint64_t)&v227);
        }
        unint64_t v226 = __PAIR64__(v91, v232);
        sub_22B25A820(v9, v72, (uint64_t)&v218);
        unint64_t SourceElementType = (unint64_t)v218;
        if (v218 != v13) {
          free(v218);
        }
        long long v71 = v204;
LABEL_197:
        uint64_t v70 = *(void *)(v70 + 8);
        if (!v70) {
          goto LABEL_258;
        }
      }
      if (v73 != 62 || v72 == 0)
      {
        uint64_t v166 = "Cannot DMA promote %s : unknown GEP bitcast use";
        goto LABEL_272;
      }
      if (HIDWORD(v232))
      {
        uint64_t v166 = "DMA promotion %s : GEP-of-bitcast can't combine bitcast types";
        goto LABEL_272;
      }
      if (!(_BYTE)v232
        || (unint64_t SourceElementType = sub_22B25A950((uint64_t)v71, v208, v14, v205), !SourceElementType)
        || *((unsigned char *)v71 + 8) != 16)
      {
        uint64_t v166 = "Cannot DMA promote %s : unknown GEP-of-bitcast use";
LABEL_272:
        sub_22B1E69D0(SourceElementType, v166, v45, v46, v47, v48, v49, v50, v203);
        goto LABEL_273;
      }
      if ((*(_DWORD *)(v72 + 20) & 0x7FFFFFF) != 4)
      {
        uint64_t v166 = "Cannot DMA promote %s : GEP-of-bitcast needs to index to a scalar";
        goto LABEL_272;
      }
      if (*(unsigned __int8 *)(*(void *)(v72 - 96) + 16) >= 0x15u) {
        unint64_t v94 = 0;
      }
      else {
        unint64_t v94 = *(llvm::Constant **)(v72 - 96);
      }
      if (*(unsigned __int8 *)(*(void *)(v72 - 64) + 16) >= 0x15u) {
        uint64_t v95 = 0;
      }
      else {
        uint64_t v95 = *(llvm::Constant **)(v72 - 64);
      }
      if (v94) {
        BOOL v96 = v95 == 0;
      }
      else {
        BOOL v96 = 1;
      }
      if (!v96)
      {
        if (llvm::Constant::isNullValue(v94))
        {
          isuint64_t NullValue = llvm::Constant::isNullValue(v95);
          if (isNullValue)
          {
            uint64_t v104 = v41;
            uint64_t v105 = v14;
            uint64_t v106 = v13;
            uint64_t v107 = v9;
            uint64_t v108 = (void *)*((void *)v227 + v228 - 1);
            uint64_t v109 = *(void **)(v72 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF) + 96);
            if (*v109 != *v108)
            {
              char v165 = 0;
              uint64_t v9 = v107;
              uint64_t v13 = v106;
              uint64_t v14 = v105;
              goto LABEL_274;
            }
            sub_22B1E69D0(isNullValue, "DMA promotion %s : reinterpreted array bitcast pattern (through struct-array GEP)", v98, v99, v100, v101, v102, v103, v203);
            long long v218 = v106;
            uint64_t v219 = 0x800000000;
            if (v228) {
              sub_22B1E0358((uint64_t)&v218, (uint64_t)&v227);
            }
            unint64_t v226 = v232;
            uint64_t v110 = (uint64_t)v200 + *(void *)(*v200 - 24) + 8;
            __int16 v214 = 257;
            uint64_t v111 = sub_22B1D6A70(v110, (uint64_t)v108, (uint64_t)v109, (uint64_t)&__p);
            uint64_t v112 = v219;
            *((void *)v218 + v219 - 1) = v111;
            char v113 = 1;
            if (v112)
            {
              uint64_t v114 = (uint64_t *)v218;
              uint64_t v9 = v107;
              do
              {
                uint64_t v115 = *v114++;
                v113 &= *(unsigned char *)(v115 + 16) == 16;
                --v112;
              }
              while (v112);
            }
            else
            {
              uint64_t v9 = v107;
            }
            LOBYTE(v226) = v113;
            HIDWORD(v226) = 2;
            uint64_t v126 = sub_22B25A740((uint64_t)v215, v72);
            uint64_t v127 = sub_22B1E0358(v126, (uint64_t)&v218);
            *(void *)(v127 + 80) = v226;
            uint64_t v13 = v106;
            if (v40 >= v206)
            {
              uint64_t v128 = v40 - v39;
              unint64_t v129 = v128 + 1;
              if ((unint64_t)(v128 + 1) >> 61) {
                goto LABEL_330;
              }
              uint64_t v14 = v105;
              if (((char *)v206 - (char *)v39) >> 2 > v129) {
                unint64_t v129 = ((char *)v206 - (char *)v39) >> 2;
              }
              if ((unint64_t)((char *)v206 - (char *)v39) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              unsigned int v41 = v104;
              if (v130) {
                unint64_t v130 = (unint64_t)sub_22B216148(v130);
              }
              else {
                uint64_t v44 = 0;
              }
              uint64_t v62 = v207;
              uint64_t v131 = (uint64_t *)(v130 + 8 * v128);
              *uint64_t v131 = v72;
              uint64_t v132 = v131 + 1;
              if (v40 != v39)
              {
                do
                {
                  uint64_t v133 = *--v40;
                  *--uint64_t v131 = v133;
                }
                while (v40 != v39);
                uint64_t v40 = v39;
              }
              unint64_t v39 = v131;
              long long v206 = (uint64_t *)(v130 + 8 * (void)v44);
              if (v40) {
                operator delete(v40);
              }
              uint64_t v40 = v132;
            }
            else
            {
              *v40++ = v72;
              uint64_t v14 = v105;
              unsigned int v41 = v104;
              uint64_t v62 = v207;
            }
            long long v71 = v204;
            unint64_t SourceElementType = (unint64_t)v218;
            if (v218 != v13) {
              free(v218);
            }
            goto LABEL_197;
          }
        }
      }
LABEL_273:
      char v165 = 0;
LABEL_274:
      if (v227 != &v229) {
        free(v227);
      }
      if ((v165 & 1) == 0) {
        goto LABEL_292;
      }
    }
    unint64_t v39 = v40;
LABEL_292:
    if (v233 != &v235) {
      free(v233);
    }
    char v183 = v39;
    sub_22B22A45C((uint64_t)v217);
    uint64_t v184 = v215[0];
    if (v216)
    {
      uint64_t v234 = 2;
      uint64_t v235 = 0;
      uint64_t v236 = -4096;
      uint64_t v237 = 0;
      uint64_t v233 = (uint64_t *)&unk_26DE86EB8;
      uint64_t v228 = 2;
      uint64_t v229 = 0;
      uint64_t v230 = -8192;
      uint64_t v231 = 0;
      uint64_t v227 = &unk_26DE86EB8;
      BOOL v185 = (char *)v215[0] + 56;
      unint64_t v186 = (unint64_t)v216 << 7;
      uint64_t v187 = v199;
      do
      {
        uint64_t v188 = *((void *)v185 - 4);
        if (v188 != v236 && v188 != v230)
        {
          int v190 = (char *)*((void *)v185 - 2);
          if (v185 != v190)
          {
            free(v190);
            uint64_t v188 = *((void *)v185 - 4);
          }
        }
        if (v188 != -8192 && v188 != -4096 && v188 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v185 - 48));
        }
        v185 += 128;
        v186 -= 128;
      }
      while (v186);
      if (v230 != -8192 && v230 != -4096 && v230) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v228);
      }
      if (v236 != -8192 && v236 != -4096 && v236) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v234);
      }
      uint64_t v184 = v215[0];
      uint64_t v192 = v216;
    }
    else
    {
      uint64_t v192 = 0;
      uint64_t v187 = v199;
    }
    a1 = llvm::deallocate_buffer(v184, (void *)(v192 << 7));
    if (v183) {
      operator delete(v183);
    }
    if (v202 != v187) {
      return 0;
    }
    char v15 = 0;
    uint64_t v8 = *(void *)(v197 + 8);
    uint64_t v10 = a5;
    uint64_t v11 = v200;
    if (!v8) {
      return 1;
    }
  }
  sub_22B1E69D0(a1, "Cannot DMA promote %s : found a non-GEP use", a3, (uint64_t)a4, a5, a6, a7, a8, v203);
  return 0;
}

uint64_t sub_22B2582E0(uint64_t a1, void *a2, unsigned char *a3, llvm::Type **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (void *)a1;
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v12 = a2[1];
  if (v12)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    char v15 = 1;
    while (1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(v12 + 24);
      if (!v17 || *(unsigned char *)(v17 + 16) != 62) {
        return v16;
      }
      uint64_t v18 = *(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
      if (v18)
      {
        if (*(unsigned char *)(v18 + 16) == 67)
        {
          uint64_t v18 = *(void *)(v18 - 32);
          if (!v18) {
            return 0;
          }
        }
      }
      unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B)
      {
        if (v19 != 5)
        {
          LODWORD(v20) = 0;
LABEL_34:
          if (v19 != 5) {
            return 0;
          }
          int v21 = *(unsigned __int16 *)(v18 + 18);
LABEL_37:
          if (v21 == 17) {
            goto LABEL_41;
          }
          if (v21 != 25) {
            return 0;
          }
          goto LABEL_39;
        }
        int v21 = *(unsigned __int16 *)(v18 + 18);
        if (v21 != 13)
        {
          LODWORD(v20) = 0;
          goto LABEL_37;
        }
      }
      else if (v19 != 41)
      {
        LODWORD(v20) = 0;
        goto LABEL_31;
      }
      int v22 = *(_DWORD *)(v18 + 20);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = *(void *)(v18 - 8);
      }
      else {
        uint64_t v23 = v18 - 32 * (v22 & 0x7FFFFFF);
      }
      uint64_t v24 = *(void *)(v23 + 32);
      if (v24) {
        BOOL v25 = *(unsigned char *)(v24 + 16) == 16;
      }
      else {
        BOOL v25 = 0;
      }
      if (!v25) {
        return 0;
      }
      unsigned int v26 = *(_DWORD *)(v24 + 32);
      if (v26 > 0x40)
      {
        uint64_t v20 = **(void **)(v24 + 24);
        if (v20 < 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v20 = *(void *)(v24 + 24);
        if (v20 << -(char)v26 < 0) {
          return 0;
        }
      }
      uint64_t v27 = (v22 & 0x40000000) != 0 ? *(uint64_t **)(v18 - 8) : (uint64_t *)(v18 - 32 * (v22 & 0x7FFFFFF));
      uint64_t v18 = *v27;
      if (!v18) {
        return 0;
      }
      unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B) {
        goto LABEL_34;
      }
LABEL_31:
      if (v19 != 53)
      {
        if (v19 != 45) {
          return 0;
        }
LABEL_41:
        int v30 = *(_DWORD *)(v18 + 20);
        if ((v30 & 0x40000000) != 0) {
          BOOL v31 = *(uint64_t **)(v18 - 8);
        }
        else {
          BOOL v31 = (uint64_t *)(v18 - 32 * (v30 & 0x7FFFFFF));
        }
        uint64_t v37 = v31[4];
        if (v37) {
          BOOL v38 = *(unsigned char *)(v37 + 16) == 16;
        }
        else {
          BOOL v38 = 0;
        }
        if (!v38) {
          return 0;
        }
        unint64_t v39 = (void *)(v37 + 24);
        if (*(_DWORD *)(v37 + 32) >= 0x41u) {
          unint64_t v39 = (void *)*v39;
        }
        unsigned int v40 = *(_DWORD *)v39;
        if (v20 >= *(_DWORD *)v39) {
          return 0;
        }
        goto LABEL_68;
      }
LABEL_39:
      int v28 = *(_DWORD *)(v18 + 20);
      if ((v28 & 0x40000000) != 0) {
        uint64_t v29 = *(void *)(v18 - 8);
      }
      else {
        uint64_t v29 = v18 - 32 * (v28 & 0x7FFFFFF);
      }
      uint64_t v32 = *(void *)(v29 + 32);
      if (v32) {
        BOOL v33 = *(unsigned char *)(v32 + 16) == 16;
      }
      else {
        BOOL v33 = 0;
      }
      if (!v33) {
        return 0;
      }
      char v34 = (void **)(v32 + 24);
      unsigned int v35 = *(_DWORD *)(v32 + 32);
      uint64_t v36 = v34;
      if (v35 >= 0x41) {
        uint64_t v36 = *v34;
      }
      if (*v36 > 0x1FuLL) {
        return 0;
      }
      if ((v28 & 0x40000000) != 0) {
        BOOL v31 = *(uint64_t **)(v18 - 8);
      }
      else {
        BOOL v31 = (uint64_t *)(v18 - 32 * (v28 & 0x7FFFFFF));
      }
      if (v35 >= 0x41) {
        char v34 = (void **)*v34;
      }
      unsigned int v40 = 1 << *(_DWORD *)v34;
      if (v40 <= v20) {
        return 0;
      }
LABEL_68:
      uint64_t v41 = *v31;
      if (v15)
      {
        a1 = sub_22B25A400(*v31, (int *)v103, v107);
        if (!a1
          || *(unsigned char *)(a1 + 16) != 84
          || (uint64_t v42 = *(void *)(a1 - 32)) == 0
          || *(unsigned char *)(v42 + 16)
          || *(void *)(v42 + 24) != *(void *)(a1 + 72)
          || v42 != v11[564] && v42 != v11[565])
        {
          sub_22B1E69D0(a1, "Will not coerce strided access %s : GEP not indexed with instance_id/vertex_id", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
        uint64_t v13 = v41;
        unsigned int v14 = v40;
      }
      else
      {
        BOOL v43 = v14 == v40 && v13 == v41;
        uint64_t v41 = v13;
        unsigned int v40 = v14;
        if (!v43)
        {
          sub_22B1E69D0(a1, "Will not coerce strided access %s : GEP indexed inconsistently", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
      }
      char v15 = 0;
      uint64_t v12 = *(void *)(v12 + 8);
      if (!v12) {
        goto LABEL_85;
      }
    }
  }
  uint64_t v41 = 0;
  unsigned int v40 = 0;
LABEL_85:
  uint64_t v99 = v41;
  v96[1] = v96;
  uint64_t v44 = **(void **)(*a2 + 16);
  MEMORY[0x270FA5388](a1);
  uint64_t v47 = (char *)v96 - v46;
  if (v45 >= 0x200) {
    size_t v48 = 512;
  }
  else {
    size_t v48 = v45;
  }
  bzero((char *)v96 - v46, v48);
  if (v40)
  {
    uint64_t v49 = v47;
    uint64_t v50 = v40;
    do
    {
      *v49++ = v44;
      --v50;
    }
    while (v50);
  }
  int v51 = *a3;
  int v52 = "agc.struct.coerced_arg";
  if (*a3)
  {
    v101[0] = "agc.struct.coerced_arg";
    v101[2] = a3;
    __int16 v102 = 771;
    char v53 = 2;
  }
  else
  {
    v101[0] = "agc.struct.coerced_arg";
    __int16 v102 = 259;
    char v53 = 3;
  }
  if (v51) {
    int v52 = (const char *)v101;
  }
  v103[0] = v52;
  _OWORD v103[2] = "x";
  LOBYTE(v104) = v53;
  HIBYTE(v104) = 3;
  v107[0] = v103;
  v107[2] = v40;
  __int16 v108 = 2050;
  int v54 = (const char *)v105;
  llvm::Twine::str((uint64_t *)v105, (llvm::Twine *)v107);
  if ((v106 & 0x80000000) == 0 || (int v54 = (const char *)v105[0]) != 0) {
    strlen(v54);
  }
  uint64_t v55 = (llvm::Type *)llvm::StructType::create();
  *a4 = v55;
  if (v106 < 0)
  {
    operator delete(v105[0]);
    uint64_t v55 = *a4;
  }
  v107[0] = sub_22B1D8210((llvm::DataLayout *)(v11 + 21), v55);
  v107[1] = v56;
  uint64_t v57 = llvm::TypeSize::operator unsigned long long();
  uint64_t v16 = (v57 & 3) == 0;
  uint64_t v64 = v99;
  if ((v57 & 3) != 0)
  {
    sub_22B1E69D0(v57, "Will not coerce pointer %s : type size %u not a multiple of 4", v58, v59, v60, v61, v62, v63, (char)a3);
  }
  else
  {
    uint64_t v65 = llvm::PointerType::get();
    uint64_t v66 = *(void *)(v11[20] + 80);
    if (v66) {
      uint64_t v67 = v66 - 24;
    }
    else {
      uint64_t v67 = 0;
    }
    uint64_t v68 = *(void *)(v67 + 40);
    if (v68) {
      uint64_t v69 = v68 - 24;
    }
    else {
      uint64_t v69 = 0;
    }
    sub_22B1FFC54((uint64_t)v11 + *(void *)(*v11 - 24) + 8, v69);
    uint64_t v70 = (uint64_t)v11 + *(void *)(*v11 - 24) + 8;
    __int16 v108 = 257;
    uint64_t v100 = (uint64_t *)sub_22B1D7384(v70, 49, (uint64_t)a2, v65, (uint64_t)v107);
    uint64_t v71 = a2[1];
    if (v71)
    {
      uint64_t v98 = v11 + 24;
      unsigned int v97 = v16;
      do
      {
        uint64_t v72 = *(void *)(v71 + 24);
        uint64_t v71 = *(void *)(v71 + 8);
        if (v72 && *(unsigned char *)(v72 + 16) == 62)
        {
          int v73 = operator new(8uLL);
          void *v73 = v64;
          uint64_t v74 = llvm::ConstantInt::get();
          uint64_t v75 = (char *)sub_22B216148(2uLL);
          uint64_t v77 = v76;
          *((void *)v75 + 1) = v74;
          uint64_t v78 = v75 + 16;
          *(void *)uint64_t v75 = *v73;
          operator delete(v73);
          unint64_t v79 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
          if (v79 < 3)
          {
            unint64_t v83 = v75 + 16;
          }
          else
          {
            uint64_t v80 = &v75[8 * v77];
            for (unint64_t i = 2; i < v79; ++i)
            {
              uint64_t v82 = *(void *)(v72 - 32 * v79 + 32 * i);
              if (v78 >= v80)
              {
                uint64_t v84 = (v78 - v75) >> 3;
                unint64_t v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61) {
                  abort();
                }
                if ((v80 - v75) >> 2 > v85) {
                  unint64_t v85 = (v80 - v75) >> 2;
                }
                if ((unint64_t)(v80 - v75) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v86 = v85;
                }
                if (v86) {
                  unint64_t v86 = (unint64_t)sub_22B216148(v86);
                }
                else {
                  uint64_t v87 = 0;
                }
                uint64_t v88 = (char *)(v86 + 8 * v84);
                *(void *)uint64_t v88 = v82;
                unint64_t v83 = v88 + 8;
                while (v78 != v75)
                {
                  uint64_t v89 = *((void *)v78 - 1);
                  v78 -= 8;
                  *((void *)v88 - 1) = v89;
                  v88 -= 8;
                }
                uint64_t v80 = (char *)(v86 + 8 * v87);
                if (v75) {
                  operator delete(v75);
                }
                uint64_t v75 = v88;
              }
              else
              {
                *(void *)uint64_t v78 = v82;
                unint64_t v83 = v78 + 8;
              }
              unint64_t v79 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
              uint64_t v78 = v83;
            }
          }
          sub_22B1FFC54((uint64_t)v11 + *(void *)(*v11 - 24) + 8, v72);
          char v90 = llvm::GetElementPtrInst::isInBounds((llvm::GetElementPtrInst *)v72);
          uint64_t v91 = (uint64_t)v11 + *(void *)(*v11 - 24);
          if (v90)
          {
            __int16 v104 = 257;
            uint64_t v64 = v99;
            uint64_t v92 = *v100;
            if ((*(_DWORD *)(*v100 + 8) & 0xFE) == 0x12) {
              uint64_t v92 = **(void **)(v92 + 16);
            }
            uint64_t v93 = **(void **)(v92 + 16);
            if (!(*(uint64_t (**)(void, uint64_t, uint64_t *, char *, int64_t, uint64_t))(**(void **)(v91 + 80) + 48))(*(void *)(v91 + 80), v93, v100, v75, (v83 - v75) >> 3, 1))
            {
              __int16 v108 = 257;
              unint64_t v94 = (llvm::GetElementPtrInst *)sub_22B1D7668(v93, v100, (uint64_t **)v75, (v83 - v75) >> 3);
              llvm::GetElementPtrInst::setIsInBounds(v94);
              sub_22B1D6EE0((uint64_t *)(v91 + 8), (uint64_t)v94, (uint64_t)v103);
            }
          }
          else
          {
            __int16 v108 = 257;
            sub_22B229F08(v91, v100, (uint64_t **)v75, (v83 - v75) >> 3, (uint64_t)v107);
            uint64_t v64 = v99;
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v72);
          uint64_t v16 = v97;
          if (v75) {
            operator delete(v75);
          }
        }
      }
      while (v71);
    }
  }
  return v16;
}

uint64_t sub_22B258C10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (llvm::DataLayout *)(a1 + 168);
  sub_22B1D8270((llvm::DataLayout *)(a1 + 168), a2);
  uint64_t v6 = llvm::TypeSize::operator unsigned long long();
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x10) {
    return 0;
  }
  if (!*((_DWORD *)a3 + 2)) {
    return -1;
  }
  uint64_t v7 = *((unsigned int *)a3 + 4);
  if (v7)
  {
    uint64_t v8 = v7 << 7;
    for (uint64_t i = *a3; (*(void *)(i + 24) | 0x1000) == 0xFFFFFFFFFFFFF000; i += 128)
    {
      v8 -= 128;
      if (!v8) {
        return -1;
      }
    }
  }
  else
  {
    uint64_t i = *a3;
  }
  uint64_t v11 = *a3 + (v7 << 7);
  if (v11 == i) {
    return -1;
  }
  unint64_t v12 = 0;
  unint64_t v10 = -1;
LABEL_12:
  uint64_t v13 = *(uint64_t **)(i + 24);
  if (*(_DWORD *)(i + 48))
  {
    uint64_t v14 = **(void **)(i + 40);
    if (v14 && *(unsigned char *)(v14 + 16) == 16)
    {
      unsigned int v26 = *(uint64_t **)(i + 24);
      uint64_t v27 = v6;
      unint64_t v16 = 0;
      unint64_t v18 = 1;
      uint64_t v19 = a2;
      while (1)
      {
        uint64_t v20 = (unsigned int *)(v14 + 24);
        if (*(_DWORD *)(v14 + 32) >= 0x41u) {
          uint64_t v20 = *(unsigned int **)v20;
        }
        unint64_t v21 = *v20;
        int v22 = *(unsigned __int8 *)(v19 + 8);
        if (v19 && v22 == 16)
        {
          if (*(_DWORD *)(v19 + 12) <= v21) {
            return 0;
          }
          uint64_t v23 = *(void *)(llvm::DataLayout::getStructLayout() + 8 * v21 + 16);
          uint64_t v19 = *(void *)(*(void *)(v19 + 16) + 8 * v21);
        }
        else
        {
          if (!v19 || v22 != 17 || *(void *)(v19 + 32) <= v21) {
            return 0;
          }
          uint64_t v19 = *(void *)(v19 + 24);
          sub_22B1D8210(v5, (llvm::Type *)v19);
          uint64_t v23 = llvm::TypeSize::operator unsigned long long() * v21;
        }
        if (!v19) {
          return 0;
        }
        v16 += v23;
        sub_22B1D8270(v5, v19);
        uint64_t v24 = llvm::TypeSize::operator unsigned long long();
        if (v18 < *(unsigned int *)(i + 48))
        {
          uint64_t v14 = *(void *)(*(void *)(i + 40) + 8 * v18);
          if (v14)
          {
            ++v18;
            if (*(unsigned char *)(v14 + 16) == 16) {
              continue;
            }
          }
        }
        unint64_t v17 = v24 + v16;
        uint64_t v13 = v26;
        uint64_t v6 = v27;
        goto LABEL_18;
      }
    }
  }
  unint64_t v16 = 0;
  unint64_t v17 = v6;
LABEL_18:
  if (*(_DWORD *)(i + 124) && *(unsigned char *)(i + 120))
  {
    sub_22B1D8270(v5, *v13);
    unint64_t v17 = llvm::TypeSize::operator unsigned long long() + v16;
  }
  if (v16 < v10) {
    unint64_t v10 = v16;
  }
  if (v12 <= v17) {
    unint64_t v12 = v17;
  }
  while (1)
  {
    i += 128;
    if (i == v11) {
      return v10;
    }
    if ((*(void *)(i + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (i != v11) {
        goto LABEL_12;
      }
      return v10;
    }
  }
}

uint64_t sub_22B258EB4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((unsigned __int8 *)a2 + 32);
  if (!*((unsigned char *)a2 + 32) || (int v4 = *((unsigned __int8 *)a3 + 32), !*((unsigned char *)a3 + 32)))
  {
    *(_WORD *)(result + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    long long v5 = *((_OWORD *)a3 + 1);
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v5;
    uint64_t v6 = a3[4];
LABEL_8:
    *(void *)(result + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v7;
    uint64_t v6 = a2[4];
    goto LABEL_8;
  }
  uint64_t v8 = (uint64_t *)*a2;
  uint64_t v9 = a2[1];
  if (*((unsigned char *)a2 + 33) != 1)
  {
    LOBYTE(v3) = 2;
    uint64_t v8 = a2;
  }
  uint64_t v10 = a3[1];
  if (*((unsigned char *)a3 + 33) == 1)
  {
    uint64_t v11 = (uint64_t *)*a3;
  }
  else
  {
    LOBYTE(v4) = 2;
    uint64_t v11 = a3;
  }
  *(void *)uint64_t result = v8;
  *(void *)(result + 8) = v9;
  *(void *)(result + 16) = v11;
  *(void *)(result + 24) = v10;
  *(unsigned char *)(result + 32) = v3;
  *(unsigned char *)(result + 33) = v4;
  return result;
}

uint64_t sub_22B258F44(void *a1, llvm::Type *this, int a3, void *a4, uint64_t a5)
{
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x10)
  {
    if (a3)
    {
      int v8 = *((_DWORD *)this + 2);
      if (v8 == 17)
      {
        uint64_t result = sub_22B259F38(a1, (uint64_t)this, 0, a4);
        if (result) {
          return result;
        }
      }
      else if (v8 == 16)
      {
        uint64_t result = sub_22B259CF8(a1, (uint64_t)this, 0, a4, a5);
        if (result) {
          return result;
        }
      }
    }
    unint64_t v31 = sub_22B1D8210((llvm::DataLayout *)(a1 + 21), this);
    BOOL v32 = v10;
    unsigned int v11 = llvm::TypeSize::operator unsigned long long();
    unint64_t v12 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(void *)(*a1 - 24) + 192), (llvm::Type *)(v11 >> 2));
    uint64_t v13 = (llvm::Type **)llvm::UndefValue::get();
    unint64_t v31 = (sub_22B1D8270((llvm::DataLayout *)(a1 + 21), (uint64_t)this) + 7) >> 3;
    BOOL v32 = v14 == 1;
    unsigned int v15 = llvm::TypeSize::operator unsigned long long();
    v29[0] = 0;
    if (v15 >= 4)
    {
      unsigned int v16 = 0;
      unsigned int v17 = v15 >> 2;
      do
      {
        uint64_t v18 = *(void *)(*a1 - 24);
        uint64_t v19 = *(void *)(*a4 + 8 * v16);
        uint64_t v20 = *(void *)((char *)a1 + v18 + 192);
        __int16 v33 = 257;
        uint64_t v21 = sub_22B1D7384((uint64_t)a1 + v18 + 8, 49, v19, v20, (uint64_t)&v31);
        uint64_t v22 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
        __int16 v33 = 257;
        uint64_t v13 = (llvm::Type **)sub_22B1D6D44(v22, (uint64_t)v13, v21, (uint64_t)v29, 1, (uint64_t)&v31);
        unsigned int v16 = v29[0] + 1;
        v29[0] = v16;
      }
      while (v16 < v17);
    }
    uint64_t v23 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 8);
    __int16 v33 = 257;
    PointerCast = (unsigned __int8 *)sub_22B2435DC(v23, v12, (uint64_t)&v31);
    sub_22B1F718C((void *)((char *)a1 + *(void *)(*a1 - 24) + 8), v13, (uint64_t)PointerCast, 0);
    uint64_t v25 = *(void *)(*a1 - 24);
    uint64_t v26 = llvm::PointerType::get();
    __int16 v30 = 257;
    if (*(void *)PointerCast != v26)
    {
      if (PointerCast[16] > 0x14u)
      {
        __int16 v33 = 257;
        PointerCast = (unsigned __int8 *)llvm::CastInst::CreatePointerCast();
        sub_22B1D6EE0((void *)((char *)a1 + v25 + 8), (uint64_t)PointerCast, (uint64_t)v29);
      }
      else
      {
        PointerCast = (unsigned __int8 *)(*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**(void **)((char *)a1 + v25 + 80) + 232))(*(void *)((char *)a1 + v25 + 80), PointerCast, v26);
        if (PointerCast) {
          BOOL v27 = PointerCast[16] >= 0x1Cu;
        }
        else {
          BOOL v27 = 0;
        }
        if (v27) {
          sub_22B1D6EE0((void *)((char *)a1 + v25 + 8), (uint64_t)PointerCast, (uint64_t)v29);
        }
      }
    }
    int v28 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    __int16 v33 = 257;
    return sub_22B1D4240(v28 + 1, **(llvm::Type ***)(*(void *)PointerCast + 16), (uint64_t)PointerCast, 0, (uint64_t)&v31);
  }
  else
  {
    return sub_22B25A054(a1, this, 0, a4);
  }
}

unint64_t sub_22B2592D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 32 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

int32x2_t sub_22B259348(int32x2_t *a1, void *a2)
{
  unint64_t v4 = (void *)a2[5];
  if (v4 != a2 + 7) {
    free(v4);
  }
  v8[0] = 2;
  v8[1] = 0;
  uint64_t v9 = -8192;
  uint64_t v10 = 0;
  sub_22B21A918((llvm::ValueHandleBase *)(a2 + 1), v8);
  uint64_t v5 = v9;
  a2[4] = v10;
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void sub_22B259408(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  unint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v13 = v4;
  int v28 = 0;
  int v5 = sub_22B259724((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  unint64_t v6 = *(void *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5) {
    long long v7 = v28;
  }
  else {
    long long v7 = (_DWORD *)v6;
  }
  int v8 = v13;
  if ((_DWORD *)(*(void *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    uint64_t v24 = v26;
    uint64_t v25 = 0x800000000;
    if (v7[12])
    {
      sub_22B1E070C((uint64_t)&v24, (uint64_t)(v7 + 10));
      int v8 = v13;
    }
    uint64_t v27 = *((void *)v7 + 15);
    sub_22B259348(v8, v7);
    uint64_t v9 = (uint64_t)v13;
    uint64_t v19 = a2;
    uint64_t v20 = v22;
    uint64_t v21 = 0x800000000;
    if (v25)
    {
      sub_22B1E070C((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    uint64_t v23 = v27;
    sub_22B22A84C(&v14, a2);
    int v14 = &unk_26DE86E90;
    uint64_t v17 = v9;
    sub_22B22A75C((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    int v28 = &unk_26DE86E90;
    uint64_t v31 = v17;
    BOOL v32 = v34;
    uint64_t v33 = 0x800000000;
    if (v21) {
      sub_22B1E070C((uint64_t)&v32, (uint64_t)&v20);
    }
    uint64_t v35 = v23;
    uint64_t v18 = 0;
    if ((sub_22B259724(*(void *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      uint64_t v10 = (void *)sub_22B2597B8(v9, (uint64_t)&v28, v18);
      sub_22B21A918((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      void v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if (v33) {
        sub_22B1E070C((uint64_t)(v10 + 5), (uint64_t)&v32);
      }
      v10[15] = v35;
    }
    if (v32 != v34) {
      free(v32);
    }
    if (v30 != -8192 && v30 != -4096 && v30) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    }
    if (v16 != -8192 && v16 != -4096 && v16) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    }
    if (v20 != v22) {
      free(v20);
    }
    if (v24 != v26) {
      free(v24);
    }
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
  }
}

uint64_t sub_22B259724(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + (v4 << 7);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = a1 + (v4 << 7);
        uint64_t v6 = *(void *)(v5 + 24);
        uint64_t v7 = 1;
        if (v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_22B2597B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22B25986C(a1, v6);
  uint64_t v8 = 0;
  sub_22B259724(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_22B25986C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x230F426A0]((unint64_t)v8 << 7, 8);
  if (v4)
  {
    sub_22B259AE0(a1);
    v23[0] = 2;
    v23[1] = 0;
    uint64_t v24 = -4096;
    uint64_t v25 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = &unk_26DE86E90;
    v19[0] = 2;
    v19[1] = 0;
    uint64_t v20 = -8192;
    uint64_t v9 = (char *)(v3 << 7);
    if (v3)
    {
      int v10 = 0;
      do
      {
        BOOL v11 = &v10[(void)v4];
        uint64_t v12 = *(void *)&v10[(void)v4 + 24];
        if (v12 != v24 && v12 != v20)
        {
          uint64_t v26 = 0;
          sub_22B259724(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v26);
          int v14 = v26;
          sub_22B21A918((llvm::ValueHandleBase *)(v26 + 1), (void *)v11 + 1);
          void v14[4] = *((void *)v11 + 4);
          v14[5] = v14 + 7;
          unsigned int v15 = (void **)(v11 + 40);
          v14[6] = 0x800000000;
          if (*((_DWORD *)v11 + 12)) {
            sub_22B1E070C((uint64_t)(v14 + 5), (uint64_t)(v11 + 40));
          }
          v14[15] = *(void *)&v10[(void)v4 + 120];
          ++*(_DWORD *)(a1 + 8);
          if (&v10[(void)v4 + 56] != *v15) {
            free(*v15);
          }
        }
        uint64_t v16 = *((void *)v11 + 3);
        if (v16 != -8192 && v16 != -4096 && v16 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(void)v4 + 8]);
        }
        v10 += 128;
      }
      while (v9 != v10);
      if (v20 != -8192 && v20 != -4096 && v20) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
      }
    }
    if (v24 != -8192 && v24 != -4096 && v24) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    return llvm::deallocate_buffer(v4, v9);
  }
  else
  {
    return sub_22B259AE0(a1);
  }
}

uint64_t sub_22B259AE0(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = (char *)(*(void *)result + (v1 << 7));
    int32x2_t result = *(void *)result + 8;
    do
    {
      uint64_t v4 = sub_22B22A75C((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_26DE86E90;
      *((void *)v4 + 3) = v9;
      unint64_t v5 = (char *)v4 + 120;
      int32x2_t result = (uint64_t)v4 + 128;
      v2 += 128;
    }
    while (v5 != v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t sub_22B259BC0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v10 = v2;
  BOOL v11 = 0;
  uint64_t result = sub_22B259724(*(void *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if (result)
  {
    uint64_t v4 = v11;
    unint64_t v5 = (char *)v11[5];
    if (v5 != (char *)(v11 + 7)) {
      free(v5);
    }
    v12[0] = 2;
    v12[1] = 0;
    uint64_t v13 = -8192;
    uint64_t v14 = 0;
    BOOL v11 = &unk_26DE86E90;
    uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v12);
    uint64_t v6 = v13;
    v4[4] = v14;
    if (v6 != -8192 && v6 != -4096 && v6) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return result;
}

uint64_t sub_22B259CF8(void *a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v10 = llvm::UndefValue::get();
  uint64_t StructLayout = llvm::DataLayout::getStructLayout();
  unsigned int v40 = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    unsigned int v12 = 0;
    uint64_t v13 = StructLayout + 16;
    while (1)
    {
      uint64_t v14 = *(llvm::Type **)(*(void *)(a2 + 16) + 8 * v12);
      unsigned int v15 = *(_DWORD *)(v13 + 8 * v12);
      unint64_t v36 = sub_22B1D8210((llvm::DataLayout *)(a1 + 21), v14);
      unint64_t v37 = v16;
      char v17 = llvm::TypeSize::operator unsigned long long();
      if ((v15 & 3) != 0 || (v17 & 3) != 0) {
        return 0;
      }
      uint64_t v19 = a3 + (v15 >> 2);
      if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x10)
      {
        int v20 = *((_DWORD *)v14 + 2);
        if (v20 == 16)
        {
          __int16 v39 = 257;
          uint64_t v21 = sub_22B259CF8(a1, v14, v19, a4, &v36);
        }
        else
        {
          if (v20 != 17) {
            return 0;
          }
          uint64_t v21 = sub_22B259F38(a1, (uint64_t)v14, v19, a4);
        }
      }
      else
      {
        uint64_t v21 = sub_22B25A054(a1, v14, v19, a4);
      }
      if (!v21) {
        return 0;
      }
      uint64_t v22 = *(void *)(*a1 - 24);
      int v23 = *(unsigned __int8 *)(a5 + 32);
      if (v23 == 1) {
        break;
      }
      if (*(unsigned char *)(a5 + 32))
      {
        int v28 = *(const char **)a5;
        unint64_t v29 = *(void *)(a5 + 8);
        char v24 = 2;
        if (*(unsigned char *)(a5 + 33) != 1)
        {
          LOBYTE(v23) = 2;
          int v28 = (const char *)a5;
        }
        BOOL v32 = v28;
        unint64_t v33 = v29;
        char v34 = ".elem";
        LOBYTE(v35) = v23;
        HIBYTE(v35) = 3;
        unint64_t v26 = v5 & 0xFFFFFFFF00000000;
        unint64_t v5 = v5 & 0xFFFFFFFF00000000 | v40;
        uint64_t v27 = &v32;
        goto LABEL_22;
      }
      char v24 = 0;
      __int16 v35 = 256;
      v5 &= 0xFFFFFFFF00000000;
      char v25 = 1;
LABEL_23:
      LOBYTE(v39) = v24;
      HIBYTE(v39) = v25;
      uint64_t v10 = sub_22B1D6D44((uint64_t)a1 + v22 + 8, v10, v21, (uint64_t)&v40, 1, (uint64_t)&v36);
      unsigned int v12 = v40 + 1;
      unsigned int v40 = v12;
      if (v12 >= *(_DWORD *)(a2 + 12)) {
        return v10;
      }
    }
    BOOL v32 = ".elem";
    __int16 v35 = 259;
    unint64_t v5 = v5 & 0xFFFFFFFF00000000 | v40;
    char v24 = 3;
    unint64_t v26 = v33;
    uint64_t v27 = (const char **)".elem";
LABEL_22:
    unint64_t v36 = (unint64_t)v27;
    unint64_t v37 = v26;
    char v25 = 8;
    unint64_t v38 = v5;
    goto LABEL_23;
  }
  return v10;
}

uint64_t sub_22B259F38(void *a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v8 = *(llvm::Type **)(a2 + 24);
  v17[0] = sub_22B1D8210((llvm::DataLayout *)(a1 + 21), v8);
  v17[1] = v9;
  unsigned int v10 = llvm::TypeSize::operator unsigned long long();
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x10 || (v10 & 3) != 0) {
    return 0;
  }
  uint64_t v12 = llvm::UndefValue::get();
  unsigned int v19 = 0;
  if (*(void *)(a2 + 32))
  {
    unsigned int v13 = v10 >> 2;
    do
    {
      uint64_t v14 = sub_22B25A054(a1, v8, a3, a4);
      uint64_t v15 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v18 = 257;
      uint64_t v12 = sub_22B1D6D44(v15, v12, v14, (uint64_t)&v19, 1, (uint64_t)v17);
      a3 += v13;
      ++v19;
    }
    while (*(void *)(a2 + 32) > (unint64_t)v19);
  }
  return v12;
}

uint64_t sub_22B25A054(void *a1, llvm::Type *this, unsigned int a3, void *a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if ((*((_DWORD *)this + 2) & 0xFE) != 0x12)
  {
    uint64_t v20 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v21 = *(void *)(*a4 + 8 * a3);
    __int16 v39 = 257;
    return sub_22B1D7384(v20, 49, v21, (uint64_t)this, (uint64_t)v38);
  }
  uint64_t v8 = **((void **)this + 2);
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  uint64_t v10 = *((unsigned int *)this + 8);
  if (ScalarSizeInBits == 8)
  {
    uint64_t v24 = llvm::FixedVectorType::get();
    uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v26 = *(void *)(*a4 + 8 * a3);
    __int16 v39 = 257;
    uint64_t v11 = sub_22B1D7384(v25, 49, v26, v24, (uint64_t)v38);
    if (v10 == 4) {
      return v11;
    }
    uint64_t v27 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v28 = v11;
    int v29 = v10;
    return sub_22B2423A4(v27, v28, v29, 1);
  }
  if (ScalarSizeInBits == 16)
  {
    uint64_t v30 = llvm::FixedVectorType::get();
    uint64_t v31 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v32 = *(void *)(*a4 + 8 * a3);
    __int16 v39 = 257;
    uint64_t v11 = sub_22B1D7384(v31, 49, v32, v30, (uint64_t)v38);
    if ((v10 - 3) > 1) {
      return v11;
    }
    uint64_t v33 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v34 = *(void *)(*a4 + 8 * (a3 + 1));
    __int16 v39 = 257;
    uint64_t v35 = sub_22B1D7384(v33, 49, v34, v30, (uint64_t)v38);
    unint64_t v36 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v40 = llvm::ConstantInt::get();
    uint64_t v41 = llvm::ConstantInt::get();
    uint64_t v42 = llvm::ConstantInt::get();
    uint64_t v43 = llvm::ConstantInt::get();
    uint64_t v37 = llvm::ConstantVector::get();
    __int16 v39 = 257;
    uint64_t v11 = sub_22B1D69A8((uint64_t)(v36 + 8), v11, v35, v37, (uint64_t)v38);
    if (v10 != 3) {
      return v11;
    }
    uint64_t v27 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v28 = v11;
    int v29 = 3;
    return sub_22B2423A4(v27, v28, v29, 1);
  }
  if (ScalarSizeInBits != 32) {
    return 0;
  }
  uint64_t v11 = llvm::UndefValue::get();
  if (v10)
  {
    uint64_t v12 = 0;
    unsigned int v13 = a3;
    do
    {
      uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      uint64_t v15 = *(void *)(*a4 + 8 * (v13 + v12));
      __int16 v39 = 257;
      uint64_t v16 = sub_22B1D7384(v14, 49, v15, v8, (uint64_t)v38);
      char v17 = (char *)a1 + *(void *)(*a1 - 24);
      __int16 v39 = 257;
      uint64_t v18 = (uint64_t)(v17 + 8);
      uint64_t v19 = llvm::ConstantInt::get();
      uint64_t v11 = sub_22B2427EC(v18, v11, v16, v19, (uint64_t)v38);
      ++v12;
    }
    while (v10 != v12);
  }
  return v11;
}

uint64_t sub_22B25A400(uint64_t result, int *a2, void *a3)
{
  unsigned int v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 0x1B)
  {
    if (v3 != 5 || *(_WORD *)(result + 18) != 13) {
      return result;
    }
  }
  else if (v3 != 41)
  {
    int v4 = *(_DWORD *)(result + 20);
    uint64_t v5 = 0;
    if ((v4 & 0x40000000) != 0) {
      uint64_t v6 = *(uint64_t **)(result - 8);
    }
    else {
      uint64_t v6 = (uint64_t *)(result - 32 * (v4 & 0x7FFFFFF));
    }
    uint64_t v9 = result;
LABEL_20:
    uint64_t v13 = *v6;
    int v14 = *(unsigned __int8 *)(v9 + 16);
    if (v14 == 54)
    {
      int v17 = *(_DWORD *)(v9 + 20);
      if ((v17 & 0x40000000) != 0) {
        uint64_t v18 = *(void *)(v9 - 8);
      }
      else {
        uint64_t v18 = v9 - 32 * (v17 & 0x7FFFFFF);
      }
      uint64_t v25 = *(void *)(v18 + 32);
      if (v25) {
        BOOL v26 = *(unsigned char *)(v25 + 16) == 16;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        if (*(_DWORD *)(v25 + 32) > 0x40u)
        {
          unint64_t v27 = **(void **)(v25 + 24);
          if (v27 > 0x1F) {
            return result;
          }
        }
        else
        {
          unint64_t v27 = *(void *)(v25 + 24);
          if (v27 >= 0x20) {
            return result;
          }
        }
        int v24 = 1 << v27;
LABEL_75:
        *a2 = v24;
        *a3 = v5;
        return v13;
      }
    }
    else if (v14 == 47)
    {
      int v15 = *(_DWORD *)(v9 + 20);
      uint64_t v16 = (v15 & 0x40000000) != 0 ? *(void *)(v9 - 8) : v9 - 32 * (v15 & 0x7FFFFFF);
      uint64_t v22 = *(void *)(v16 + 32);
      if (v22)
      {
        if (*(unsigned char *)(v22 + 16) == 16)
        {
          int v23 = (void *)(v22 + 24);
          if (*(_DWORD *)(v22 + 32) >= 0x41u) {
            int v23 = (void *)*v23;
          }
          int v24 = *(_DWORD *)v23;
          goto LABEL_75;
        }
      }
    }
    return result;
  }
  int v7 = *(_DWORD *)(result + 20);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = *(uint64_t **)(result - 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(result - 32 * (v7 & 0x7FFFFFF));
  }
  uint64_t v9 = *v8;
  if (v9) {
    BOOL v10 = *(unsigned __int8 *)(v9 + 16) >= 0x1Cu;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    int v11 = *(_DWORD *)(v9 + 20);
    if ((v11 & 0x7FFFFFF) != 0)
    {
      uint64_t v12 = (v11 & 0x40000000) != 0 ? *(uint64_t **)(v9 - 8) : (uint64_t *)(v9 - 32 * (v11 & 0x7FFFFFF));
      uint64_t v19 = *v12;
      unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 <= 0x1B)
      {
        if (v20 != 5 || *(_WORD *)(v19 + 18) != 15) {
          return result;
        }
      }
      else if (v20 != 43)
      {
        return result;
      }
      uint64_t v21 = (v7 & 0x40000000) != 0 ? *(void *)(result - 8) : result - 32 * (v7 & 0x7FFFFFF);
      uint64_t v28 = *(void *)(v21 + 32);
      uint64_t v29 = *(unsigned char *)(v28 + 16) == 84 ? v28 : 0;
      int v30 = *(_DWORD *)(v19 + 20);
      uint64_t v31 = (v30 & 0x40000000) != 0 ? *(void *)(v19 - 8) : v19 - 32 * (v30 & 0x7FFFFFF);
      uint64_t v32 = *(void *)(v31 + 32);
      uint64_t v33 = *(unsigned char *)(v32 + 16) == 84 ? v32 : 0;
      if (v29 && v33)
      {
        uint64_t v5 = *(void *)(v29 - 32);
        if (!v5
          || *(unsigned char *)(v5 + 16)
          || (v34 = *(void *)(v29 + 72), uint64_t v35 = *(void *)(v29 - 32), *(void *)(v5 + 24) != v34))
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = *(void *)(v33 - 32);
        if (!v36 || *(unsigned char *)(v36 + 16) || *(void *)(v36 + 24) != *(void *)(v33 + 72)) {
          uint64_t v36 = 0;
        }
        if (v35 == v36 && (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
        {
          if ((v30 & 0x40000000) != 0) {
            uint64_t v6 = *(uint64_t **)(v19 - 8);
          }
          else {
            uint64_t v6 = (uint64_t *)(v19 - 32 * (v30 & 0x7FFFFFF));
          }
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22B25A660(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    unsigned int v3 = (char *)(*(void *)result + (v1 << 7));
    uint64_t result = *(void *)result + 8;
    do
    {
      int v4 = sub_22B22A75C((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_26DE86EB8;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 120;
      uint64_t result = (uint64_t)v4 + 128;
      v2 += 128;
    }
    while (v5 != v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t sub_22B25A740(uint64_t a1, uint64_t a2)
{
  sub_22B22A84C(&v7, a2);
  int v7 = &unk_26DE86EB8;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = sub_22B259724(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = sub_22B25AE2C(a1, (uint64_t)&v7, v11);
    sub_22B21A918((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(void *)(v4 + 32) = v10;
    *(void *)(v4 + 40) = v4 + 56;
    *(void *)(v4 + 48) = 0x800000000;
    *(unsigned char *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 124) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 40;
}

uint64_t sub_22B25A820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22B22A84C(&v10, a2);
  uint64_t v10 = &unk_26DE86E90;
  uint64_t v13 = a1;
  uint64_t v14 = 0;
  char v5 = sub_22B259724(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
  uint64_t v6 = v14;
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = sub_22B2597B8(a1, (uint64_t)&v10, v14);
    sub_22B21A918((llvm::ValueHandleBase *)(v6 + 8), v11);
    *(void *)(v6 + 32) = v13;
    *(void *)(v6 + 40) = v6 + 56;
    *(void *)(v6 + 48) = 0x800000000;
    *(unsigned char *)(v6 + 120) = 0;
    *(_DWORD *)(v6 + 124) = 0;
  }
  if (v12 != -8192 && v12 != -4096 && v12 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  }
  uint64_t result = sub_22B1E0358(v6 + 40, a3);
  *(void *)(v6 + 120) = *(void *)(a3 + 80);
  *(unsigned char *)(a1 + 64) &= *(unsigned char *)(a3 + 80);
  int v9 = *(_DWORD *)(a3 + 84);
  *(unsigned char *)(a1 + 65) |= v9 == 2;
  *(unsigned char *)(a1 + 66) |= v9 == 3;
  return result;
}

BOOL sub_22B25A950(uint64_t a1, uint64_t a2, llvm::DataLayout *a3, int a4)
{
  if (!a4) {
    return 0;
  }
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    return 0;
  }
  sub_22B1D8270(a3, a2);
  if (llvm::TypeSize::operator unsigned long long() != 4) {
    return 0;
  }
  if ((*(_DWORD *)(a1 + 8) & 0xFE) != 0x10) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 8) != 16 || *(_DWORD *)(a1 + 12) != 1) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v7 = **(void **)(a1 + 16);
  if (v7 && *(unsigned char *)(v7 + 8) == 17)
  {
    if (*(void *)(v7 + 32) == 3)
    {
      sub_22B1D8270(a3, **(void **)(v7 + 16));
      return llvm::TypeSize::operator unsigned long long() == 4;
    }
    return 0;
  }
  return result;
}

void sub_22B25AA50(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v13 = v4;
  uint64_t v28 = 0;
  int v5 = sub_22B259724((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  unint64_t v6 = *(void *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5) {
    uint64_t v7 = v28;
  }
  else {
    uint64_t v7 = (_DWORD *)v6;
  }
  uint64_t v8 = v13;
  if ((_DWORD *)(*(void *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    int v24 = v26;
    uint64_t v25 = 0x800000000;
    if (v7[12])
    {
      sub_22B1E070C((uint64_t)&v24, (uint64_t)(v7 + 10));
      uint64_t v8 = v13;
    }
    uint64_t v27 = *((void *)v7 + 15);
    sub_22B25AD6C(v8, v7);
    uint64_t v9 = (uint64_t)v13;
    uint64_t v19 = a2;
    unsigned int v20 = v22;
    uint64_t v21 = 0x800000000;
    if (v25)
    {
      sub_22B1E070C((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    uint64_t v23 = v27;
    sub_22B22A84C(&v14, a2);
    uint64_t v14 = &unk_26DE86EB8;
    uint64_t v17 = v9;
    sub_22B22A75C((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    uint64_t v28 = &unk_26DE86EB8;
    uint64_t v31 = v17;
    uint64_t v32 = v34;
    uint64_t v33 = 0x800000000;
    if (v21) {
      sub_22B1E070C((uint64_t)&v32, (uint64_t)&v20);
    }
    uint64_t v35 = v23;
    uint64_t v18 = 0;
    if ((sub_22B259724(*(void *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      uint64_t v10 = (void *)sub_22B25AE2C(v9, (uint64_t)&v28, v18);
      sub_22B21A918((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      void v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if (v33) {
        sub_22B1E070C((uint64_t)(v10 + 5), (uint64_t)&v32);
      }
      v10[15] = v35;
    }
    if (v32 != v34) {
      free(v32);
    }
    if (v30 != -8192 && v30 != -4096 && v30) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    }
    if (v16 != -8192 && v16 != -4096 && v16) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    }
    if (v20 != v22) {
      free(v20);
    }
    if (v24 != v26) {
      free(v24);
    }
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
  }
}

int32x2_t sub_22B25AD6C(int32x2_t *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  if (v4 != a2 + 7) {
    free(v4);
  }
  v8[0] = 2;
  v8[1] = 0;
  uint64_t v9 = -8192;
  uint64_t v10 = 0;
  sub_22B21A918((llvm::ValueHandleBase *)(a2 + 1), v8);
  uint64_t v5 = v9;
  a2[4] = v10;
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_22B25AE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22B25AEE0(a1, v6);
  uint64_t v8 = 0;
  sub_22B259724(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_22B25AEE0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x230F426A0]((unint64_t)v8 << 7, 8);
  if (v4)
  {
    sub_22B25A660(a1);
    v23[0] = 2;
    v23[1] = 0;
    uint64_t v24 = -4096;
    uint64_t v25 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = &unk_26DE86EB8;
    v19[0] = 2;
    v19[1] = 0;
    uint64_t v20 = -8192;
    uint64_t v9 = (char *)(v3 << 7);
    if (v3)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = &v10[(void)v4];
        uint64_t v12 = *(void *)&v10[(void)v4 + 24];
        if (v12 != v24 && v12 != v20)
        {
          BOOL v26 = 0;
          sub_22B259724(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v26);
          uint64_t v14 = v26;
          sub_22B21A918((llvm::ValueHandleBase *)(v26 + 1), (void *)v11 + 1);
          void v14[4] = *((void *)v11 + 4);
          v14[5] = v14 + 7;
          int v15 = (void **)(v11 + 40);
          v14[6] = 0x800000000;
          if (*((_DWORD *)v11 + 12)) {
            sub_22B1E070C((uint64_t)(v14 + 5), (uint64_t)(v11 + 40));
          }
          v14[15] = *(void *)&v10[(void)v4 + 120];
          ++*(_DWORD *)(a1 + 8);
          if (&v10[(void)v4 + 56] != *v15) {
            free(*v15);
          }
        }
        uint64_t v16 = *((void *)v11 + 3);
        if (v16 != -8192 && v16 != -4096 && v16 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(void)v4 + 8]);
        }
        v10 += 128;
      }
      while (v9 != v10);
      if (v20 != -8192 && v20 != -4096 && v20) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
      }
    }
    if (v24 != -8192 && v24 != -4096 && v24) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    return llvm::deallocate_buffer(v4, v9);
  }
  else
  {
    return sub_22B25A660(a1);
  }
}

uint64_t sub_22B25B154(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v10 = v2;
  uint64_t v11 = 0;
  uint64_t result = sub_22B259724(*(void *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if (result)
  {
    uint64_t v4 = v11;
    unint64_t v5 = (char *)v11[5];
    if (v5 != (char *)(v11 + 7)) {
      free(v5);
    }
    v12[0] = 2;
    v12[1] = 0;
    uint64_t v13 = -8192;
    uint64_t v14 = 0;
    uint64_t v11 = &unk_26DE86EB8;
    uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v12);
    uint64_t v6 = v13;
    v4[4] = v14;
    if (v6 != -8192 && v6 != -4096 && v6) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return result;
}

uint64_t sub_22B25B28C(uint64_t a1)
{
  uint64_t v2 = sub_22B26753C(a1);
  if (*(unsigned char *)(a1 + 10))
  {
    uint64_t v3 = a1 + *(void *)(*(void *)a1 - 24);
    if (**(void **)(*(void *)(*(void *)(a1 + 160) + 24) + 16) == *(void *)(v3 + 144))
    {
      uint64_t v4 = *(unsigned char **)(v3 + 344);
      if (v4[1668]) {
        (*(void (**)(unsigned char *, void))(*(void *)v4 + 272))(v4, *(void *)(a1 + 152));
      }
    }
  }
  if (MGGetBoolAnswer())
  {
    unint64_t v5 = (const char *)sub_22B1DEEE4("AGX_MTL_TESSELLATION_VS_WRITETHROUGH");
    if (v5)
    {
      if (*v5 != 48 && atoi(v5))
      {
        uint64_t v6 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
        (*(void (**)(uint64_t, void))(*(void *)v6 + 304))(v6, *(void *)(a1 + 152));
      }
    }
  }
  return v2;
}

uint64_t sub_22B25B3B0(void *a1)
{
  uint64_t v2 = sub_22B255DF4((uint64_t)a1);
  if (v2 && !*(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1653))
  {
    uint64_t Function = llvm::Module::getFunction();
    a1[564] = Function;
    if (!Function) {
      a1[564] = llvm::Module::getFunction();
    }
    uint64_t v4 = llvm::Module::getFunction();
    a1[565] = v4;
    if (!v4) {
      a1[565] = llvm::Module::getFunction();
    }
    uint64_t v5 = llvm::Module::getFunction();
    a1[566] = v5;
    if (!v5) {
      a1[566] = llvm::Module::getFunction();
    }
    uint64_t v6 = llvm::Module::getFunction();
    a1[567] = v6;
    if (!v6) {
      a1[567] = llvm::Module::getFunction();
    }
  }
  return v2;
}

void sub_22B25B57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 32) > 1u)
  {
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 400) + 312), *(llvm::Module **)(a1 + *(void *)(*(void *)a1 - 24) + 320));
    sub_22B1EE6FC(a1 + *(void *)(*(void *)a1 - 24), "After inliner in AGCLLVMAGPVertexShaderRegular::simplifyGenericIR");
    *(_DWORD *)(a1 + 32) = 1;
  }
  uint64_t v9 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320);
  sub_22B215188(v9, a2, a3, a4, a5, a6, a7, a8);
}

void sub_22B25B634(void *a1)
{
  *a1 = off_26DE7D8A0;
  uint64_t v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_26DE7DA98;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7B8A0);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25B704(void *a1)
{
  *a1 = off_26DE7D8A0;
  uint64_t v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_26DE7DA98;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7B8A0);
  sub_22B1ED95C(v2);
  return a1;
}

void sub_22B25B7B4(void *a1@<X0>, std::string *a2@<X8>)
{
}

void sub_22B25B7D0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(_DWORD **)(a1 + 4544);
  if (v3)
  {
    sub_22B1D7BF0(v13, "AGCTessellationDriverState");
    sub_22B1D7BF0(v11, "patch_type");
    sub_22B1F3828(&v15, (const void **)v11, off_26488E330[*v3 & 3]);
    sub_22B1D7BF0(v9, "partition_mode");
    sub_22B1F3828(&v16, (const void **)v9, off_26488E2E0[((unint64_t)*v3 >> 2) & 7]);
    sub_22B1D7BF0(v7, "step_function");
    sub_22B1F3828(&v17, (const void **)v7, off_26488E300[*v3 >> 5]);
    sub_22B1D7BF0(__p, "unused");
    sub_22B1F37D0(&v18, (const void **)__p, *v3 >> 8);
    sub_22B1F3880(a2, (uint64_t)v13, (uint64_t)&v15, 4);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v18.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v18.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    sub_22B1D7BF0(a2, (char *)&unk_22B27C63D);
  }
}

void sub_22B25B9E4(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7B8F8;
  v1[573] = &unk_26DE7BAF8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = &unk_26DE7E418;
  v1[573] = &off_26DE7E610;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7BB70);
  sub_22B1ED95C((uint64_t)(v1 + 573));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25BB0C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7B8F8;
  v1[573] = &unk_26DE7BAF8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = &unk_26DE7E418;
  v1[573] = &off_26DE7E610;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7BB70);
  return sub_22B1ED95C((uint64_t)(v1 + 573));
}

uint64_t sub_22B25BC1C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3944);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 3936);
    uint64_t v4 = v3 + 32 * v2;
    uint64_t v5 = *(uint64_t **)(a1 + 4552);
    uint64_t v6 = *(unsigned int *)(a1 + 4560);
    int v7 = &v5[v6];
    do
    {
      uint64_t i = v5;
      if (v6)
      {
        for (uint64_t i = v5; !*i || *i == -8; ++i)
          ;
      }
      int v10 = *(_DWORD *)(v3 + 4);
      if (i != v7)
      {
        uint64_t v11 = *i;
        while (*(_DWORD *)(v11 + 8) != v10)
        {
          do
          {
            uint64_t v12 = i[1];
            ++i;
            uint64_t v11 = v12;
            if (v12) {
              BOOL v13 = v11 == -8;
            }
            else {
              BOOL v13 = 1;
            }
          }
          while (v13);
          if (i == v7) {
            goto LABEL_21;
          }
        }
        int v10 = *(_DWORD *)(v11 + 16);
      }
LABEL_21:
      *(_DWORD *)(v3 + 4) = v10;
      v3 += 32;
    }
    while (v3 != v4);
  }
  sub_22B240A88(a1, a1 + 4552);
  sub_22B255418(a1);
  return 1;
}

uint64_t sub_22B25BCE4(void *a1)
{
  uint64_t v2 = sub_22B25B28C((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, void))(*(void *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

void sub_22B25BD60(void *a1)
{
  *a1 = &unk_26DE7B8F8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = &unk_26DE7BAF8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = &unk_26DE7E418;
  a1[573] = &off_26DE7E610;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7BB70);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25BE74(void *a1)
{
  *a1 = &unk_26DE7B8F8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = &unk_26DE7BAF8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = &unk_26DE7E418;
  a1[573] = &off_26DE7E610;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7BB70);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25BF68()
{
  return "vdmnopdbg-driver";
}

void sub_22B25BF74(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE7ED18;
  v1[573] = off_26DE7EF18;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE7F208;
  v1[573] = &off_26DE7F400;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7CCD8);
  sub_22B1ED95C((uint64_t)(v1 + 573));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25C09C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE7ED18;
  v1[573] = off_26DE7EF18;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE7F208;
  v1[573] = &off_26DE7F400;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7CCD8);
  return sub_22B1ED95C((uint64_t)(v1 + 573));
}

const char *sub_22B25C1AC()
{
  return "vdmnopdbg-driver";
}

uint64_t sub_22B25C1B8(void *a1)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t result = sub_22B25BCE4(a1);
  if (result)
  {
    uint64_t result = llvm::Module::getFunction();
    if (result)
    {
      uint64_t v3 = (llvm::Function *)result;
      uint64_t v4 = sub_22B1DB218((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)"llvm.agx1.nop.dbg", 17, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 144), *(void *)((char *)a1 + *(void *)(*a1 - 24) + 184));
      v11[0] = llvm::ConstantInt::get();
      uint64_t v5 = *((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = *(void *)(v5 + 8);
          int v7 = *(llvm::Instruction **)(v5 + 24);
          sub_22B1FFC54((uint64_t)a1 + *(void *)(*a1 - 24) + 8, (uint64_t)v7);
          uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
          __int16 v10 = 257;
          sub_22B1D4034(v8, *(void *)(v4 + 24), v4, (uint64_t)v11, 1, (uint64_t)v9);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v7);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      llvm::Function::eraseFromParent(v3);
      return 1;
    }
  }
  return result;
}

void sub_22B25C358(void *a1)
{
  *a1 = off_26DE7ED18;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE7EF18;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE7F208;
  a1[573] = &off_26DE7F400;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7CCD8);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25C46C(void *a1)
{
  *a1 = off_26DE7ED18;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE7EF18;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE7F208;
  a1[573] = &off_26DE7F400;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7CCD8);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25C560()
{
  return "graphics-execute-indirect-esl-driver";
}

void sub_22B25C56C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7CD40;
  v1[572] = &unk_26DE7CF40;
  sub_22B21B328((uint64_t)(v1 + 568));
  *uint64_t v1 = off_26DE7FD80;
  v1[572] = &off_26DE7FF78;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7CFB8);
  sub_22B1ED95C((uint64_t)(v1 + 572));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25C694(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7CD40;
  v1[572] = &unk_26DE7CF40;
  sub_22B21B328((uint64_t)(v1 + 568));
  *uint64_t v1 = off_26DE7FD80;
  v1[572] = &off_26DE7FF78;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7CFB8);
  return sub_22B1ED95C((uint64_t)(v1 + 572));
}

const char *sub_22B25C7A4()
{
  return "graphics-execute-indirect-esl-driver";
}

uint64_t sub_22B25C7B0(void *a1)
{
  uint64_t v2 = sub_22B25B28C((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, void))(*(void *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

void sub_22B25C82C(void *a1)
{
  *a1 = &unk_26DE7CD40;
  uint64_t v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_26DE7CF40;
  sub_22B21B328((uint64_t)(a1 + 568));
  *a1 = off_26DE7FD80;
  a1[572] = &off_26DE7FF78;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7CFB8);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25C940(void *a1)
{
  *a1 = &unk_26DE7CD40;
  uint64_t v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_26DE7CF40;
  sub_22B21B328((uint64_t)(a1 + 568));
  *a1 = off_26DE7FD80;
  a1[572] = &off_26DE7FF78;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7CFB8);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25CA34()
{
  return "graphics-execute-indirect-range-driver";
}

void sub_22B25CA40(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7D018;
  v1[572] = &unk_26DE7D218;
  sub_22B21B328((uint64_t)(v1 + 568));
  *uint64_t v1 = off_26DE808F8;
  v1[572] = &off_26DE80AF0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7D290);
  sub_22B1ED95C((uint64_t)(v1 + 572));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25CB68(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = &unk_26DE7D018;
  v1[572] = &unk_26DE7D218;
  sub_22B21B328((uint64_t)(v1 + 568));
  *uint64_t v1 = off_26DE808F8;
  v1[572] = &off_26DE80AF0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7D290);
  return sub_22B1ED95C((uint64_t)(v1 + 572));
}

const char *sub_22B25CC78()
{
  return "graphics-execute-indirect-range-driver";
}

uint64_t sub_22B25CC84(void *a1)
{
  uint64_t v2 = sub_22B25B28C((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, void))(*(void *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

void sub_22B25CD00(void *a1)
{
  *a1 = &unk_26DE7D018;
  uint64_t v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_26DE7D218;
  sub_22B21B328((uint64_t)(a1 + 568));
  *a1 = off_26DE808F8;
  a1[572] = &off_26DE80AF0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7D290);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25CE14(void *a1)
{
  *a1 = &unk_26DE7D018;
  uint64_t v2 = (uint64_t)(a1 + 572);
  a1[572] = &unk_26DE7D218;
  sub_22B21B328((uint64_t)(a1 + 568));
  *a1 = off_26DE808F8;
  a1[572] = &off_26DE80AF0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7D290);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25CF08()
{
  return "gpu-gather-vertex-driver";
}

void sub_22B25CF14(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE81470;
  v1[568] = &off_26DE81668;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7D568);
  sub_22B1ED95C((uint64_t)(v1 + 568));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25CFF8(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE81470;
  v1[568] = &off_26DE81668;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7D568);
  return sub_22B1ED95C((uint64_t)(v1 + 568));
}

const char *sub_22B25D0C4()
{
  return "gpu-gather-vertex-driver";
}

uint64_t sub_22B25D0D0(void *a1)
{
  uint64_t v2 = sub_22B25B28C((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, void))(*(void *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

void sub_22B25D14C(void *a1)
{
  *a1 = off_26DE81470;
  uint64_t v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_26DE81668;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7D568);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25D21C(void *a1)
{
  *a1 = off_26DE81470;
  uint64_t v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_26DE81668;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7D568);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25D2CC()
{
  return "pds-patchup-vertex-driver";
}

void sub_22B25D2D8(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE81FE8;
  v1[568] = &off_26DE821E0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7D840);
  sub_22B1ED95C((uint64_t)(v1 + 568));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25D3BC(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE81FE8;
  v1[568] = &off_26DE821E0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7D840);
  return sub_22B1ED95C((uint64_t)(v1 + 568));
}

const char *sub_22B25D488()
{
  return "pds-patchup-vertex-driver";
}

uint64_t sub_22B25D494(void *a1)
{
  uint64_t v2 = sub_22B25B28C((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
    (*(void (**)(uint64_t, void))(*(void *)v3 + 304))(v3, a1[19]);
  }
  return v2;
}

void sub_22B25D510(void *a1)
{
  *a1 = off_26DE81FE8;
  uint64_t v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_26DE821E0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7D840);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25D5E0(void *a1)
{
  *a1 = off_26DE81FE8;
  uint64_t v2 = (uint64_t)(a1 + 568);
  a1[568] = &off_26DE821E0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7D840);
  sub_22B1ED95C(v2);
  return a1;
}

uint64_t sub_22B25D690(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = (void *)sub_22B2680E8(a1, a2 + 1, a3, a4, 0);
  uint64_t v12 = *a2;
  void *v11 = *a2;
  *(void *)(a1 + *(void *)(v12 - 24)) = a2[7];
  BOOL v13 = (uint64_t *)(a1 + 3896);
  *(_DWORD *)(a1 + 3912) = 0;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_DWORD *)(a1 + 3916) = 16;
  *(_WORD *)(a1 + 3928) = 0;
  *(_DWORD *)(a1 + 3932) = 0;
  *(void *)(a1 + 3936) = a1 + 3952;
  *(void *)(a1 + 3944) = 0x1000000000;
  *(void *)(a1 + 4464) = a1 + 4480;
  *(void *)(a1 + 4472) = 0x400000000;
  if (a5 && a6)
  {
    char v14 = (int *)((char *)a5 + *a5);
    std::string v15 = (int *)((char *)a6 + *a6);
    std::string v16 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
      unint64_t v38 = (int *)((char *)v14 + v17 + *(unsigned int *)((char *)v14 + v17));
    }
    else {
      unint64_t v38 = 0;
    }
    std::string v18 = (unsigned __int16 *)((char *)v15 - *v15);
    uint64_t v36 = v8;
    if (*v18 >= 5u && (uint64_t v19 = v18[2]) != 0) {
      uint64_t v20 = (char *)v15 + v19 + *(unsigned int *)((char *)v15 + v19);
    }
    else {
      uint64_t v20 = 0;
    }
    if (*v38)
    {
      uint64_t v21 = 0;
      uint64_t v37 = v20 + 4;
      while (1)
      {
        int v22 = *(_DWORD *)&v37[4 * v21];
        uint64_t v23 = (char *)&v38[v21 + 2] + v38[v21 + 1];
        size_t v24 = strlen(v23);
        unsigned int v25 = llvm::StringMapImpl::LookupBucketFor();
        uint64_t v26 = *v13;
        uint64_t v27 = v25;
        uint64_t v28 = *(void *)(*v13 + 8 * v25);
        if (v28 == -8) {
          break;
        }
        if (!v28) {
          goto LABEL_17;
        }
LABEL_26:
        *(_DWORD *)(v28 + 8) = v22;
        if (++v21 >= (unint64_t)*v38) {
          goto LABEL_27;
        }
      }
      --*(_DWORD *)(a1 + 3912);
LABEL_17:
      uint64_t v29 = MEMORY[0x230F426A0](v24 + 17, 8);
      uint64_t v30 = v29;
      uint64_t v31 = v29 + 16;
      if (v24) {
        memcpy((void *)(v29 + 16), v23, v24);
      }
      *(unsigned char *)(v31 + v24) = 0;
      *(void *)uint64_t v30 = v24;
      *(_DWORD *)(v30 + 8) = 0;
      *(void *)(v26 + 8 * v27) = v30;
      ++*(_DWORD *)(a1 + 3908);
      for (uint64_t i = (uint64_t *)(*(void *)(a1 + 3896)
                          + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 3896))); ; ++i)
      {
        uint64_t v28 = *i;
        if (*i && v28 != -8) {
          break;
        }
      }
      goto LABEL_26;
    }
LABEL_27:
    uint64_t v8 = v36;
    *(unsigned char *)(a1 + 3928) = (*(_DWORD *)(v36 + 12) & 0x100000) != 0;
  }
  *(_DWORD *)(a1 + 3116) = (*(_DWORD *)(v8 + 12) >> 2);
  *(_DWORD *)(a1 + 3120) = *(_DWORD *)(v8 + 8);
  sub_22B26D160(a1, *(_DWORD *)(v8 + 12) & 1, (*(_DWORD *)(v8 + 12) >> 1) & 1);
  *(unsigned char *)(a1 + 14) = (*(_DWORD *)(v8 + 12) & 0x800000) != 0;
  *(void *)(a1 + 2272) = *(void *)v8;
  *(_DWORD *)(a1 + 3152) = (unsigned __int16)*(_DWORD *)(v8 + 12) >> 14;
  unsigned int v34 = *(_WORD *)(v8 + 14) & 0xF;
  *(_DWORD *)(a1 + 3148) = v34;
  if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1676))
  {
    *(unsigned char *)(a1 + 3146) = v34 > 1;
    if (v34 >= 2) {
      *(_DWORD *)(a1 + 3152) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 3146) = 0;
  }
  *(unsigned char *)(a1 + 15) = (*(_DWORD *)(v8 + 12) & 0x400000) != 0;
  *(unsigned char *)(a1 + 3929) = (*(_DWORD *)(v8 + 12) & 0x200000) != 0;
  return a1;
}

uint64_t sub_22B25DA2C(uint64_t a1, llvm::Module *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v13 = "air.vertex";
  __int16 v14 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v13);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (*(_DWORD *)(Operand + 8) != 4
    || !sub_22B1E1ED0(*(llvm::MDString **)(*(void *)(Operand - 8) - 8 * *(unsigned int *)(*(void *)(Operand - 8) + 8)), "air.patch"))
  {
    operator new();
  }
  return (*(uint64_t (**)(void, uint64_t, llvm::Module *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 32)
                                                                                               + 72))(*(void *)(a1 + 32), a1, this, a3, a4, a5);
}

uint64_t sub_22B25DBA4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2683E9280, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = a3;
    int v10 = __cxa_guard_acquire(&qword_2683E9280);
    a3 = v11;
    if (v10)
    {
      qword_2683E9270 = 0;
      *(void *)algn_2683E9278 = 0;
      __cxa_guard_release(&qword_2683E9280);
      a3 = v11;
    }
  }
  sub_22B25D690(a1, a2 + 2, a3, (uint64_t)&qword_2683E9270, 0, 0);
  uint64_t v7 = a2[1];
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = a2[10];
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[11];
  *(void *)(a1 + 4544) = a4;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_DWORD *)(a1 + 4568) = 0;
  *(_DWORD *)(a1 + 4572) = 32;
  return a1;
}

const char *sub_22B25DD60()
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

void sub_22B25DD6C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE828E8;
  v1[573] = off_26DE82AE8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE82DD8;
  v1[573] = &off_26DE82FD0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7BE50);
  sub_22B1ED95C((uint64_t)(v1 + 573));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25DE94(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE828E8;
  v1[573] = off_26DE82AE8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE82DD8;
  v1[573] = &off_26DE82FD0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7BE50);
  return sub_22B1ED95C((uint64_t)(v1 + 573));
}

const char *sub_22B25DFA4()
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

void sub_22B25DFB0(void *a1)
{
  *a1 = off_26DE828E8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE82AE8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE82DD8;
  a1[573] = &off_26DE82FD0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7BE50);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25E0C4(void *a1)
{
  *a1 = off_26DE828E8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE82AE8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE82DD8;
  a1[573] = &off_26DE82FD0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7BE50);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25E1B8()
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

void sub_22B25E1C4(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE836D8;
  v1[573] = off_26DE838D8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE83BC8;
  v1[573] = &off_26DE83DC0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C138);
  sub_22B1ED95C((uint64_t)(v1 + 573));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25E2EC(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE836D8;
  v1[573] = off_26DE838D8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE83BC8;
  v1[573] = &off_26DE83DC0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C138);
  return sub_22B1ED95C((uint64_t)(v1 + 573));
}

const char *sub_22B25E3FC()
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

void sub_22B25E408(void *a1)
{
  *a1 = off_26DE836D8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE838D8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE83BC8;
  a1[573] = &off_26DE83DC0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C138);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25E51C(void *a1)
{
  *a1 = off_26DE836D8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE838D8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE83BC8;
  a1[573] = &off_26DE83DC0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C138);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25E610()
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

void sub_22B25E61C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE844C8;
  v1[573] = off_26DE846C8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE849B8;
  v1[573] = &off_26DE84BB0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C420);
  sub_22B1ED95C((uint64_t)(v1 + 573));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25E744(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE844C8;
  v1[573] = off_26DE846C8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE849B8;
  v1[573] = &off_26DE84BB0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C420);
  return sub_22B1ED95C((uint64_t)(v1 + 573));
}

const char *sub_22B25E854()
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

void sub_22B25E860(void *a1)
{
  *a1 = off_26DE844C8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE846C8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE849B8;
  a1[573] = &off_26DE84BB0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C420);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25E974(void *a1)
{
  *a1 = off_26DE844C8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE846C8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE849B8;
  a1[573] = &off_26DE84BB0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C420);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25EA68()
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

void sub_22B25EA74(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE852B8;
  v1[573] = off_26DE854B8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE857A8;
  v1[573] = &off_26DE859A0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C708);
  sub_22B1ED95C((uint64_t)(v1 + 573));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25EB9C(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE852B8;
  v1[573] = off_26DE854B8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE857A8;
  v1[573] = &off_26DE859A0;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C708);
  return sub_22B1ED95C((uint64_t)(v1 + 573));
}

const char *sub_22B25ECAC()
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

void sub_22B25ECB8(void *a1)
{
  *a1 = off_26DE852B8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE854B8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE857A8;
  a1[573] = &off_26DE859A0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C708);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25EDCC(void *a1)
{
  *a1 = off_26DE852B8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE854B8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE857A8;
  a1[573] = &off_26DE859A0;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C708);
  sub_22B1ED95C(v2);
  return a1;
}

const char *sub_22B25EEC0()
{
  return "bucketed-clear-instance-counts-driver";
}

void sub_22B25EECC(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE860A8;
  v1[573] = off_26DE862A8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE86598;
  v1[573] = &off_26DE86790;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C9F0);
  sub_22B1ED95C((uint64_t)(v1 + 573));
  JUMPOUT(0x230F43600);
}

uint64_t sub_22B25EFF4(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 32));
  *uint64_t v1 = off_26DE860A8;
  v1[573] = off_26DE862A8;
  sub_22B21B328((uint64_t)(v1 + 569));
  *uint64_t v1 = off_26DE86598;
  v1[573] = &off_26DE86790;
  uint64_t v2 = (void *)v1[558];
  if (v2 != v1 + 560) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[492];
  if (v3 != v1 + 494) {
    free(v3);
  }
  sub_22B254794((uint64_t)(v1 + 487));
  sub_22B2683B8((uint64_t)v1, (uint64_t *)off_26DE7C9F0);
  return sub_22B1ED95C((uint64_t)(v1 + 573));
}

const char *sub_22B25F104()
{
  return "bucketed-clear-instance-counts-driver";
}

void sub_22B25F110(void *a1)
{
  *a1 = off_26DE860A8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE862A8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE86598;
  a1[573] = &off_26DE86790;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C9F0);
  sub_22B1ED95C(v2);
  JUMPOUT(0x230F43600);
}

void *sub_22B25F224(void *a1)
{
  *a1 = off_26DE860A8;
  uint64_t v2 = (uint64_t)(a1 + 573);
  a1[573] = off_26DE862A8;
  sub_22B21B328((uint64_t)(a1 + 569));
  *a1 = off_26DE86598;
  a1[573] = &off_26DE86790;
  uint64_t v3 = (void *)a1[558];
  if (v3 != a1 + 560) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[492];
  if (v4 != a1 + 494) {
    free(v4);
  }
  sub_22B254794((uint64_t)(a1 + 487));
  sub_22B2683B8((uint64_t)a1, (uint64_t *)off_26DE7C9F0);
  sub_22B1ED95C(v2);
  return a1;
}

void sub_22B25F318(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_22B1D7BF0(v17, "tess_nb_0_");
  sub_22B1D7BF0(v18, "tess_nb_1_");
  uint64_t v5 = (void **)&v17[3 * (*a3 & 3)];
  if (*((char *)v5 + 23) < 0) {
    sub_22B1DC004(&__dst, *v5, (unint64_t)v5[1]);
  }
  else {
    std::string __dst = *(std::string *)v5;
  }
  uint64_t v6 = 0;
  while (1)
  {
    if (SHIBYTE(v18[v6 + 2]) < 0) {
      operator delete((void *)v17[v6 + 3]);
    }
    v6 -= 3;
    if (v6 == -6)
    {
      sub_22B1D7BF0(v17, "0_");
      sub_22B1D7BF0(v18, "1_");
      sub_22B1D7BF0(v19, "2_");
      sub_22B1D7BF0(v20, "3_");
      uint64_t v7 = (const std::string::value_type **)&v17[3 * ((*a3 >> 2) & 7)];
      int v8 = *((char *)v7 + 23);
      if (v8 >= 0) {
        uint64_t v9 = (const std::string::value_type *)&v17[3 * ((*a3 >> 2) & 7)];
      }
      else {
        uint64_t v9 = *v7;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)v7[1];
      }
      std::string::append(&__dst, v9, v10);
      uint64_t v11 = 0;
      while (1)
      {
        if (SHIBYTE(v20[v11 + 2]) < 0) {
          operator delete((void *)v20[v11]);
        }
        v11 -= 3;
        if (v11 == -12)
        {
          sub_22B1D7BF0(v17, "0");
          sub_22B1D7BF0(v18, "1");
          sub_22B1D7BF0(v19, "2");
          sub_22B1D7BF0(v20, "3");
          uint64_t v12 = (const std::string::value_type **)&v17[3 * (*a3 >> 5)];
          int v13 = *((char *)v12 + 23);
          if (v13 >= 0) {
            __int16 v14 = (const std::string::value_type *)&v17[3 * (*a3 >> 5)];
          }
          else {
            __int16 v14 = *v12;
          }
          if (v13 >= 0) {
            std::string::size_type v15 = *((unsigned __int8 *)v12 + 23);
          }
          else {
            std::string::size_type v15 = (std::string::size_type)v12[1];
          }
          std::string::append(&__dst, v14, v15);
          uint64_t v16 = 0;
          while (1)
          {
            if (SHIBYTE(v20[v16 + 2]) < 0) {
              operator delete((void *)v20[v16]);
            }
            v16 -= 3;
            if (v16 == -12)
            {
              sub_22B1EB8B0(a2, (const UInt8 *)&__dst);
              operator new();
            }
          }
        }
      }
    }
  }
}

void sub_22B25F934(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_22B1D7BF0(v17, "tess_b3_0_");
  sub_22B1D7BF0(v18, "tess_b3_1_");
  uint64_t v5 = (void **)&v17[3 * (*a3 & 3)];
  if (*((char *)v5 + 23) < 0) {
    sub_22B1DC004(&__dst, *v5, (unint64_t)v5[1]);
  }
  else {
    std::string __dst = *(std::string *)v5;
  }
  uint64_t v6 = 0;
  while (1)
  {
    if (SHIBYTE(v18[v6 + 2]) < 0) {
      operator delete((void *)v17[v6 + 3]);
    }
    v6 -= 3;
    if (v6 == -6)
    {
      sub_22B1D7BF0(v17, "0_");
      sub_22B1D7BF0(v18, "1_");
      sub_22B1D7BF0(v19, "2_");
      sub_22B1D7BF0(v20, "3_");
      uint64_t v7 = (const std::string::value_type **)&v17[3 * ((*a3 >> 2) & 7)];
      int v8 = *((char *)v7 + 23);
      if (v8 >= 0) {
        uint64_t v9 = (const std::string::value_type *)&v17[3 * ((*a3 >> 2) & 7)];
      }
      else {
        uint64_t v9 = *v7;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)v7[1];
      }
      std::string::append(&__dst, v9, v10);
      uint64_t v11 = 0;
      while (1)
      {
        if (SHIBYTE(v20[v11 + 2]) < 0) {
          operator delete((void *)v20[v11]);
        }
        v11 -= 3;
        if (v11 == -12)
        {
          sub_22B1D7BF0(v17, "0");
          sub_22B1D7BF0(v18, "1");
          sub_22B1D7BF0(v19, "2");
          sub_22B1D7BF0(v20, "3");
          uint64_t v12 = (const std::string::value_type **)&v17[3 * (*a3 >> 5)];
          int v13 = *((char *)v12 + 23);
          if (v13 >= 0) {
            __int16 v14 = (const std::string::value_type *)&v17[3 * (*a3 >> 5)];
          }
          else {
            __int16 v14 = *v12;
          }
          if (v13 >= 0) {
            std::string::size_type v15 = *((unsigned __int8 *)v12 + 23);
          }
          else {
            std::string::size_type v15 = (std::string::size_type)v12[1];
          }
          std::string::append(&__dst, v14, v15);
          uint64_t v16 = 0;
          while (1)
          {
            if (SHIBYTE(v20[v16 + 2]) < 0) {
              operator delete((void *)v20[v16]);
            }
            v16 -= 3;
            if (v16 == -12)
            {
              sub_22B1EB8B0(a2, (const UInt8 *)&__dst);
              operator new();
            }
          }
        }
      }
    }
  }
}

void sub_22B2600E0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_22B1D7BF0(v17, "tess_b1_0_");
  sub_22B1D7BF0(v18, "tess_b1_1_");
  uint64_t v5 = (void **)&v17[3 * (*a3 & 3)];
  if (*((char *)v5 + 23) < 0) {
    sub_22B1DC004(&__dst, *v5, (unint64_t)v5[1]);
  }
  else {
    std::string __dst = *(std::string *)v5;
  }
  uint64_t v6 = 0;
  while (1)
  {
    if (SHIBYTE(v18[v6 + 2]) < 0) {
      operator delete((void *)v17[v6 + 3]);
    }
    v6 -= 3;
    if (v6 == -6)
    {
      sub_22B1D7BF0(v17, "0_");
      sub_22B1D7BF0(v18, "1_");
      sub_22B1D7BF0(v19, "2_");
      sub_22B1D7BF0(v20, "3_");
      uint64_t v7 = (const std::string::value_type **)&v17[3 * ((*a3 >> 2) & 7)];
      int v8 = *((char *)v7 + 23);
      if (v8 >= 0) {
        uint64_t v9 = (const std::string::value_type *)&v17[3 * ((*a3 >> 2) & 7)];
      }
      else {
        uint64_t v9 = *v7;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)v7[1];
      }
      std::string::append(&__dst, v9, v10);
      uint64_t v11 = 0;
      while (1)
      {
        if (SHIBYTE(v20[v11 + 2]) < 0) {
          operator delete((void *)v20[v11]);
        }
        v11 -= 3;
        if (v11 == -12)
        {
          sub_22B1D7BF0(v17, "0");
          sub_22B1D7BF0(v18, "1");
          sub_22B1D7BF0(v19, "2");
          sub_22B1D7BF0(v20, "3");
          uint64_t v12 = (const std::string::value_type **)&v17[3 * (*a3 >> 5)];
          int v13 = *((char *)v12 + 23);
          if (v13 >= 0) {
            __int16 v14 = (const std::string::value_type *)&v17[3 * (*a3 >> 5)];
          }
          else {
            __int16 v14 = *v12;
          }
          if (v13 >= 0) {
            std::string::size_type v15 = *((unsigned __int8 *)v12 + 23);
          }
          else {
            std::string::size_type v15 = (std::string::size_type)v12[1];
          }
          std::string::append(&__dst, v14, v15);
          uint64_t v16 = 0;
          while (1)
          {
            if (SHIBYTE(v20[v16 + 2]) < 0) {
              operator delete((void *)v20[v16]);
            }
            v16 -= 3;
            if (v16 == -12)
            {
              sub_22B1EB8B0(a2, (const UInt8 *)&__dst);
              operator new();
            }
          }
        }
      }
    }
  }
}

void sub_22B260614(uint64_t a1, uint64_t a2)
{
  sub_22B1D7BF0(__p, "tess_b2");
  sub_22B1EB8B0(a2, (const UInt8 *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_22B260890(uint64_t a1, uint64_t a2)
{
  sub_22B1D7BF0(__p, "tess_b0");
  sub_22B1EB8B0(a2, (const UInt8 *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_22B2609EC(uint64_t a1, uint64_t a2)
{
  sub_22B1D7BF0(__p, "vdm_nopdbg");
  sub_22B1EB8B0(a2, (const UInt8 *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_22B260AD8(uint64_t a1, uint64_t a2)
{
  sub_22B1D7BF0(__p, "gei_esl_gen");
  sub_22B1EB8B0(a2, __p);
  operator new();
}

void sub_22B260C1C(uint64_t a1, uint64_t a2)
{
  sub_22B1D7BF0(__p, "gei_esl_gen");
  sub_22B1EB8B0(a2, __p);
  operator new();
}

void sub_22B260D60(uint64_t a1, uint64_t a2)
{
  sub_22B1D7BF0(__p, (char *)&unk_22B27C63D);
  sub_22B1EB8B0(a2, __p);
  operator new();
}

void sub_22B260E94(uint64_t a1, uint64_t a2)
{
  sub_22B1D7BF0(__p, "pds_patchup_vertex");
  sub_22B1EB8B0(a2, (const UInt8 *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

uint64_t sub_22B260FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 3124))
  {
    sub_22B215188(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320), a2, a3, a4, a5, a6, a7, a8);
    uint64_t v9 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344);
    if (*(void *)(v9 + 1240)) {
      strlen(*(const char **)(v9 + 1240));
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v11 = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 320);
      std::string __p = 0;
      uint64_t v42 = 0;
      v45[0] = 0;
      v45[1] = 0;
      uint64_t v43 = 0;
      uint64_t v44 = v45;
      uint64_t v46 = v11;
      uint64_t v12 = *(void *)(Function + 8);
      if (v12)
      {
        do
        {
          int v13 = (unint64_t *)(*(void *)(v12 + 24)
                                   - 32 * (*(_DWORD *)(*(void *)(v12 + 24) + 20) & 0x7FFFFFF));
          __int16 v14 = (void *)(*v13 + 24);
          if (*(_DWORD *)(*v13 + 32) >= 0x41u) {
            __int16 v14 = (void *)*v14;
          }
          if ((*(_DWORD *)v14 & 0xFFFFFFFC) == 0) {
            sub_22B215FFC((uint64_t *)&__p, v13[4]);
          }
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12);
        std::string::size_type v15 = v42;
        if (__p != v42)
        {
          int v16 = 0;
          do
          {
            uint64_t v17 = *(v15 - 1);
            uint64_t v42 = (char *)(v15 - 1);
            if (sub_22B1D44A8(v17)) {
              llvm::Instruction::setFast((llvm::Instruction *)v17);
            }
            if (v17 && *(unsigned char *)(v17 + 16) == 60)
            {
              uint64_t v18 = **(void **)(v17 - 32);
              unsigned int v19 = *(_DWORD *)(v18 + 8);
              if ((v19 & 0xFE) == 0x12) {
                unsigned int v19 = *(_DWORD *)(**(void **)(v18 + 16) + 8);
              }
              unsigned int v20 = v19 >> 8;
              int v21 = 1 << SBYTE1(v19);
              if (((1 << SBYTE1(v19)) & v16) == 0)
              {
                uint64_t v22 = v46 + 24;
                for (uint64_t i = *(void *)(v46 + 32); i != v22; uint64_t i = *(void *)(i + 8))
                {
                  uint64_t v24 = i - 56;
                  if (!i) {
                    uint64_t v24 = 0;
                  }
                  uint64_t v25 = v24 + 72;
                  for (uint64_t j = *(void *)(v24 + 80); j != v25; uint64_t j = *(void *)(j + 8))
                  {
                    uint64_t v27 = j - 24;
                    if (!j) {
                      uint64_t v27 = 0;
                    }
                    uint64_t v28 = *(void *)(v27 + 48);
                    if (v28 != v27 + 40)
                    {
LABEL_47:
                      while (j != v25)
                      {
                        uint64_t v29 = v28 - 24;
                        if (!v28) {
                          uint64_t v29 = 0;
                        }
                        int v30 = *(unsigned __int8 *)(v29 + 16);
                        if (v30 != 61) {
                          uint64_t v29 = 0;
                        }
                        if (v28 && v30 == 61)
                        {
                          uint64_t v31 = **(void **)(v29 - 32);
                          unsigned int v32 = *(_DWORD *)(v31 + 8);
                          if ((v32 & 0xFE) == 0x12) {
                            unsigned int v32 = *(_DWORD *)(**(void **)(v31 + 16) + 8);
                          }
                          if (v20 == v32 >> 8) {
                            sub_22B215FFC((uint64_t *)&__p, *(void *)(v29 - 64));
                          }
                        }
                        uint64_t v28 = *(void *)(v28 + 8);
                        uint64_t v33 = j - 24;
                        if (!j) {
                          uint64_t v33 = 0;
                        }
                        if (v28 == v33 + 40)
                        {
                          while (1)
                          {
                            uint64_t j = *(void *)(j + 8);
                            if (j == v25) {
                              goto LABEL_48;
                            }
                            uint64_t v34 = j - 24;
                            if (!j) {
                              uint64_t v34 = 0;
                            }
                            uint64_t v28 = *(void *)(v34 + 48);
                            if (v28 != v34 + 40) {
                              goto LABEL_47;
                            }
                          }
                        }
                      }
                      break;
                    }
                  }
LABEL_48:
                  ;
                }
                v16 |= v21;
              }
              goto LABEL_57;
            }
            int v35 = *(_DWORD *)(v17 + 20);
            if ((v35 & 0x40000000) != 0)
            {
              uint64_t v37 = *(unint64_t **)(v17 - 8);
              uint64_t v36 = v35 & 0x7FFFFFF;
              if (v36)
              {
LABEL_53:
                uint64_t v38 = 32 * v36;
                do
                {
                  unint64_t v39 = *v37;
                  v37 += 4;
                  sub_22B215FFC((uint64_t *)&__p, v39);
                  v38 -= 32;
                }
                while (v38);
              }
            }
            else
            {
              uint64_t v36 = v35 & 0x7FFFFFF;
              uint64_t v37 = (unint64_t *)(v17 - 32 * v36);
              if (v36) {
                goto LABEL_53;
              }
            }
LABEL_57:
            std::string::size_type v15 = v42;
          }
          while (__p != v42);
        }
      }
      sub_22B1EDBB8(v45[0]);
      if (__p)
      {
        uint64_t v42 = (char *)__p;
        operator delete(__p);
      }
    }
  }
  return 1;
}

uint64_t sub_22B2612F4(void *a1)
{
  uint64_t v575 = *MEMORY[0x263EF8340];
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  uint64_t v2 = *(llvm::CallBase **)(*((void *)Function + 1) + 24);
  uint64_t v3 = sub_22B1F50A8(v2);
  uint64_t v4 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
  v498 = (llvm::BasicBlock **)v2;
  uint64_t v5 = (unsigned char **)((char *)v2 - 32 * v4);
  if (((v3 - (void)v5) & 0x1FFFFFFFE0) != 0)
  {
    v496 = *v5;
    uint64_t v6 = *(void *)v496;
    if (*(unsigned char *)(*(void *)v496 + 8) != 16)
    {
      v559 = v561;
      uint64_t v560 = 0x1000000000;
      v556 = v558;
      uint64_t v557 = 0x1000000000;
      unint64_t v7 = 1;
LABEL_9:
      for (uint64_t i = 0; i != v7; ++i)
        v558[i] = -1;
      char v8 = 0;
      LODWORD(v557) = v557 + v7;
      goto LABEL_12;
    }
    unint64_t v7 = *(unsigned int *)(v6 + 12);
    v559 = v561;
    uint64_t v560 = 0x1000000000;
    v556 = v558;
    uint64_t v557 = 0x1000000000;
    if (v7)
    {
      if (v7 >= 0x11) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v7 = 0;
    v496 = 0;
    uint64_t v6 = 0;
    v559 = v561;
    uint64_t v560 = 0x1000000000;
    v556 = v558;
    uint64_t v557 = 0x1000000000;
  }
  char v8 = 1;
LABEL_12:
  memset(v555, 0, sizeof(v555));
  int v515 = 0;
  uint64_t v10 = llvm::ConstantInt::get();
  uint64_t v11 = llvm::ConstantInt::get();
  uint64_t v12 = sub_22B1FFC54((uint64_t)a1 + *(void *)(*a1 - 24) + 8, (uint64_t)v498);
  p_uint64_t Function = &Function;
  MEMORY[0x270FA5388](v12);
  if (v13 >= 0x200) {
    size_t v14 = 512;
  }
  else {
    size_t v14 = v13;
  }
  uint64_t j = (llvm::Function **)((char *)&Function - ((v13 + 15) & 0xFFFFFFFF0));
  bzero(j, v14);
  v511 = a1;
  v493 = v558;
  v494 = v561;
  v499 = (uint64_t *)v10;
  v500 = (uint64_t *)v11;
  if (v8)
  {
    uint64_t v497 = 0;
    uint64_t v509 = 0;
  }
  else
  {
    int v16 = *(unsigned __int8 *)(v6 + 8);
    v508 = (uint64_t *)v6;
    if (v16 == 16) {
      sub_22B242BFC((uint64_t)a1 + *(void *)(*a1 - 24), v496, j);
    }
    else {
      *uint64_t j = v496;
    }
    uint64_t v17 = 0;
    uint64_t v509 = 0;
    uint64_t v497 = 0;
    v506 = a1 + 304;
    v507 = &v524;
    do
    {
      uint64_t v18 = a1;
      uint64_t v19 = *(void *)(a1[7] - 8 * *(unsigned int *)(a1[7] + 8) + 8 * v17);
      uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v19 - 8 * *(unsigned int *)(v19 + 8)));
      uint64_t v22 = v21;
      uint64_t v23 = j[v17];
      if (*((unsigned char *)v18 + 3146))
      {
        unint64_t v24 = 1;
        do
        {
          unint64_t v25 = *(unsigned int *)(v19 + 8);
          if (v24 >= v25) {
            break;
          }
          if (sub_22B1E1ED0(*(llvm::MDString **)(v19 - 8 * v25 + 8 * v24), "air.shared")) {
            goto LABEL_27;
          }
          ++v24;
        }
        while (v511[3146]);
        uint64_t v26 = 1;
      }
      else
      {
LABEL_27:
        uint64_t v26 = 0;
      }
      if (v22 <= 16)
      {
        if (v22 == 12)
        {
          BOOL v39 = *(void *)String == 0x69736F702E726961 && *(_DWORD *)(String + 8) == 1852795252;
          a1 = v511;
          if (v39)
          {
            v511[3156] = v26;
            uint64_t v509 = v23;
          }
        }
        else
        {
          a1 = v511;
          if (v22 == 14 && *(void *)String == 0x6E696F702E726961 && *(void *)(String + 6) == 0x657A69735F746E69)
          {
            v511[3157] = v26;
            uint64_t v497 = v23;
          }
        }
      }
      else if (v22 == 17)
      {
        if (*(void *)String == 0x70696C632E726961
          && *(void *)(String + 8) == 0x636E61747369645FLL
          && *(unsigned char *)(String + 16) == 101)
        {
          uint64_t v40 = v19;
          a1 = v511;
          (*(void (**)(unsigned char *, uint64_t, uint64_t, unsigned char *, int *))(*(void *)v511 + 328))(v511, v23, v40, v555, &v515);
          *((unsigned char *)a1 + 3160) = v26;
        }
        else
        {
          if (*(void *)String == 0x747265762E726961
            && *(void *)(String + 8) == 0x757074756F5F7865
            && *(unsigned char *)(String + 16) == 116)
          {
            uint64_t v36 = (uint64_t)v507;
            int v35 = v508;
            *v507 = 0;
            *(void *)(v36 + 8) = 0;
            *(void *)(v36 + 16) = 0;
            if ((*(unsigned int (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)v511 + 336))(v511, v35, v17, v19, v521, v26))
            {
              sub_22B232128((uint64_t)&v559, v523, v23);
              sub_22B268620((uint64_t)v506, (unint64_t)v521);
            }
            if (v526 < 0) {
              operator delete(v524);
            }
          }
          a1 = v511;
        }
      }
      else if (v22 == 24)
      {
        BOOL v38 = *(void *)String == 0x776569762E726961
           && *(void *)(String + 8) == 0x7272615F74726F70
           && *(void *)(String + 16) == 0x7865646E695F7961;
        a1 = v511;
        if (v38)
        {
          v511[3158] = v26;
          *((unsigned char *)a1 + 3101) = 1;
          v499 = (uint64_t *)v23;
        }
      }
      else
      {
        a1 = v511;
        if (v22 == 29)
        {
          BOOL v27 = *(void *)String == 0x646E65722E726961 && *(void *)(String + 8) == 0x65677261745F7265;
          BOOL v28 = v27 && *(void *)(String + 16) == 0x5F79617272615F74;
          if (v28 && *(void *)(String + 21) == 0x7865646E695F7961)
          {
            v511[3159] = v26;
            *((unsigned char *)a1 + 3102) = 1;
            v500 = (uint64_t *)v23;
          }
        }
      }
      ++v17;
    }
    while (v17 != v7);
  }
  int v41 = *((_DWORD *)a1 + 779) & v515;
  *((_DWORD *)a1 + 779) = v41;
  v15.i32[0] = v41;
  uint8x8_t v42 = (uint8x8_t)vcnt_s8(v15);
  v42.i16[0] = vaddlv_u8(v42);
  *((_DWORD *)a1 + 778) = v42.i32[0];
  if (v41 && (*((unsigned char *)a1 + 3160) || *((unsigned char *)a1 + 3156)))
  {
    *((unsigned char *)a1 + 3160) = 1;
    *((unsigned char *)a1 + 3156) = 1;
  }
  *((unsigned char *)a1 + 3100) = (*(uint64_t (**)(void *, uint64_t))(*a1 + 360))(a1, v497);
  uint64_t NullValue = v499;
  uint64_t v43 = v500;
  if (*((unsigned char *)a1 + 3146))
  {
    if (!*((unsigned char *)a1 + 3144))
    {
      a1[391] = sub_22B264DC4(a1, *((_DWORD *)a1 + 788));
      *((unsigned char *)a1 + 3144) = 1;
    }
    if (!*((unsigned char *)a1 + 3145))
    {
      a1[392] = sub_22B264EB0(a1);
      *((unsigned char *)a1 + 3145) = 1;
    }
    unint64_t v45 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    uint64_t v46 = a1[408];
    v525[0] = 257;
    uint64_t v47 = (uint64_t *)sub_22B1D4240(v45 + 1, **(llvm::Type ***)(*(void *)v46 + 16), v46, 0, (uint64_t)v521);
    uint64_t v48 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v49 = (uint64_t *)a1[391];
    v525[0] = 257;
    uint64_t v50 = sub_22B1D7544(v48, v47, v49, (uint64_t)v521);
    int v51 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    v525[0] = 257;
    int v52 = (unsigned char *)sub_22B1D4240(v51 + 1, **(llvm::Type ***)(*(void *)v50 + 16), v50, 0, (uint64_t)v521);
    std::string __dst = 0;
    uint64_t v569 = 0;
    sub_22B242BFC((uint64_t)a1 + *(void *)(*a1 - 24), v52, &__dst);
    if (!*((unsigned char *)a1 + 3101))
    {
      uint64_t NullValue = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)a1[409], v53);
      *((unsigned char *)a1 + 3101) = 1;
    }
    *((unsigned char *)a1 + 3158) = 1;
    int v54 = (uint64_t *)sub_22B241FF8((void *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t)__dst, *NullValue);
    a1[409] = v54;
    uint64_t v55 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v56 = *v54;
    v525[0] = 257;
    uint64_t v57 = sub_22B1D7384(v55, 39, (uint64_t)NullValue, v56, (uint64_t)v521);
    uint64_t v58 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v59 = a1[409];
    v525[0] = 257;
    uint64_t NullValue = (uint64_t *)sub_22B1D6A70(v58, v57, v59, (uint64_t)v521);
    if (!*((unsigned char *)a1 + 3102))
    {
      uint64_t v43 = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)a1[410], v60);
      *((unsigned char *)a1 + 3102) = 1;
    }
    *((unsigned char *)a1 + 3159) = 1;
    uint64_t v61 = (uint64_t *)sub_22B241FF8((void *)((char *)a1 + *(void *)(*a1 - 24)), v569, *v43);
    a1[410] = v61;
    uint64_t v62 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v63 = *v61;
    v525[0] = 257;
    uint64_t v64 = sub_22B1D7384(v62, 39, (uint64_t)v43, v63, (uint64_t)v521);
    uint64_t v65 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    uint64_t v66 = a1[410];
    v525[0] = 257;
    uint64_t v43 = (uint64_t *)sub_22B1D6A70(v65, v64, v66, (uint64_t)v521);
  }
  unint64_t v67 = 0;
  uint64_t v68 = 0;
  v521[0] = 1;
  char v69 = *((unsigned char *)a1 + 3144);
  uint64_t j = a1 + 475;
  v521[1] = v69;
  v522 = "air.amplification_id";
  uint64_t v523 = 20;
  v524 = (void *)a1[391];
  uint64_t v528 = 0;
  uint64_t v529 = 0;
  uint64_t v530 = 0;
  char v531 = 0;
  char v532 = *((unsigned char *)a1 + 3145);
  v533 = "air.amplification_count";
  uint64_t v534 = 23;
  uint64_t v535 = a1[392];
  uint64_t v536 = 0;
  uint64_t v537 = 0;
  uint64_t v538 = 0;
  char v539 = *((unsigned char *)a1 + 3158);
  char v540 = *((unsigned char *)a1 + 3101);
  v541 = "air.viewport_array_index";
  uint64_t v542 = 24;
  v499 = NullValue;
  v500 = v43;
  v543 = NullValue;
  uint64_t v544 = 0;
  uint64_t v545 = 0;
  uint64_t v546 = 0;
  char v547 = *((unsigned char *)a1 + 3159);
  char v548 = *((unsigned char *)a1 + 3102);
  v549 = "air.render_target_array_index";
  uint64_t v550 = 29;
  v551 = v43;
  uint64_t v552 = 0;
  uint64_t v70 = a1 + 304;
  uint64_t v553 = 0;
  uint64_t v554 = 0;
  do
  {
    uint64_t v71 = &v521[v67];
    if ((*(unsigned int (**)(void *, void, void, _WORD *, void))(*a1 + 344))(a1, *(void *)&v521[v67 + 8], *(uint64_t *)((char *)&v523 + v67), &v525[v67 / 2], v521[v67]))
    {
      uint64_t v72 = *a1;
      uint64_t v73 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v74 = (uint64_t *)*((void *)v71 + 3);
      int v75 = sub_22B241C1C(v73, *v74, &__dst);
      if (v71[1])
      {
        int v76 = *(_DWORD *)&v525[v67 / 2 + 2];
        if (v76 >= v75)
        {
          if (v76 > v75)
          {
            uint64_t v88 = (char *)*((void *)v71 + 1);
            if (v88)
            {
              unint64_t v89 = *(&v523 + 12 * v68);
              uint64_t v90 = 4;
              if (v89 < 4) {
                uint64_t v90 = *(&v523 + 12 * v68);
              }
              sub_22B1E2118(&__dst, &v88[v90], v89 - v90);
              unsigned int v91 = HIBYTE(v570);
              uint64_t v88 = __dst;
              uint64_t v92 = v569;
              uint64_t v93 = v511;
              uint64_t v72 = *(void *)v511;
              unint64_t v94 = v494;
            }
            else
            {
              uint64_t v92 = 0;
              unsigned int v91 = 0;
              std::string __dst = 0;
              uint64_t v569 = 0;
              uint64_t v570 = 0;
              unint64_t v94 = v494;
              uint64_t v93 = v511;
            }
            uint64_t v187 = v493;
            if ((v91 & 0x80u) == 0) {
              p_dst = (const std::string::value_type *)&__dst;
            }
            else {
              p_dst = v88;
            }
            if ((v91 & 0x80u) == 0) {
              std::string::size_type v189 = v91;
            }
            else {
              std::string::size_type v189 = v92;
            }
            std::string::append((std::string *)((char *)v93 + *(void *)(v72 - 24) + 408), p_dst, v189);
            if (SHIBYTE(v570) < 0) {
              operator delete(__dst);
            }
            std::string::append((std::string *)((char *)v93 + *(void *)(*v93 - 24) + 408), " type does not match between vertex and fragment function");
            uint64_t v190 = 0;
            goto LABEL_480;
          }
        }
        else
        {
          *((void *)v71 + 3) = sub_22B2420E0(v73, v74, v76, 0);
        }
      }
      sub_22B268620((uint64_t)v70, (unint64_t)&v525[v67 / 2]);
      sub_22B232128((uint64_t)&v559, *(unsigned int *)&v527[v67], *((void *)v71 + 3));
      a1 = v511;
    }
    ++v68;
    v67 += 96;
  }
  while (v68 != 4);
  *((_DWORD *)a1 + 774) = sub_22B268D90(v70, *(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1634), *((_DWORD *)a1 + 773));
  v571 = 0;
  uint64_t v572 = 0;
  uint64_t v573 = 0;
  if ((*(unsigned int (**)(void *, char **))(*a1 + 352))(a1, &__dst))
  {
    do
      sub_22B268620((uint64_t)v70, (unint64_t)&__dst);
    while (((*(uint64_t (**)(void *, char **))(*a1 + 352))(a1, &__dst) & 1) != 0);
  }
  uint64_t v77 = v496;
  if (SHIBYTE(v573) < 0) {
    operator delete(v571);
  }
  unint64_t v78 = 126 - 2 * __clz(v560);
  if (v560) {
    uint64_t v79 = v78;
  }
  else {
    uint64_t v79 = 0;
  }
  sub_22B264FD0((unint64_t)v559, (unint64_t)&v559[16 * v560], v79, 1);
  sub_22B268AB4((uint64_t)v70, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344));
  uint64_t v80 = v498[5];
  uint64_t v81 = llvm::ConstantInt::get();
  uint64_t v82 = llvm::ConstantInt::get();
  a1[388] = 0;
  unint64_t v83 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  if (*(unsigned char *)(v83[43] + 1676) && *((unsigned char *)a1 + 3144))
  {
    uint64_t v84 = sub_22B264EB0(a1);
    uint64_t v82 = sub_22B241FF8(v83, v84, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 584));
    unint64_t v85 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    if (*((_DWORD *)a1 + 788)) {
      unint64_t v86 = (llvm::Constant *)sub_22B2668D0(a1);
    }
    else {
      unint64_t v86 = (llvm::Constant *)sub_22B264EB0(a1);
    }
    v562 = v86;
    uint64_t v95 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v96 = *(void *)(v95 + 344);
    uint64_t v97 = *(void *)(v96 + 1344);
    if (v97) {
      size_t v98 = strlen(*(const char **)(v96 + 1344));
    }
    else {
      size_t v98 = 0;
    }
    uint64_t v99 = sub_22B1DB218(v95, v97, v98, *(void *)(v95 + 192), *(void *)(v95 + 192));
    a1 = v511;
    uint64_t v100 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    LOWORD(v572) = 257;
    uint64_t v101 = sub_22B1D4034(v100, *(void *)(v99 + 24), v99, (uint64_t)&v562, 1, (uint64_t)&__dst);
    uint64_t v87 = sub_22B241FF8(v85, (uint64_t)v101, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 584));
  }
  else
  {
    uint64_t v87 = v81;
  }
  a1[411] = llvm::ConstantInt::get();
  uint64_t v102 = llvm::ConstantInt::get();
  uint64_t v103 = v102;
  a1[412] = v102;
  int v104 = *((unsigned __int8 *)a1 + 3156);
  if (*((unsigned char *)a1 + 3156)) {
    uint64_t v105 = v87;
  }
  else {
    uint64_t v105 = v81;
  }
  a1[413] = v105;
  if (!v104)
  {
    a1[414] = v102;
    goto LABEL_139;
  }
  uint64_t v106 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  LOWORD(v572) = 257;
  uint64_t v103 = sub_22B1D7468(v106, v103, v82, (uint64_t)&__dst);
  int v107 = *((unsigned __int8 *)a1 + 3156);
  a1[414] = v103;
  if (!v107)
  {
LABEL_139:
    *((_DWORD *)a1 + 776) += 4;
    goto LABEL_140;
  }
  *((_DWORD *)a1 + 777) += 4;
LABEL_140:
  uint64_t v108 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v109 = a1[411];
  LOWORD(v572) = 257;
  a1[415] = sub_22B1D6A70(v108, v109, v103, (uint64_t)&__dst);
  uint64_t v110 = llvm::ConstantInt::get();
  a1[416] = v110;
  a1[417] = v81;
  a1[418] = v110;
  uint64_t v111 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v112 = a1[415];
  LOWORD(v572) = 257;
  a1[419] = sub_22B1D6A70(v111, v112, v110, (uint64_t)&__dst);
  uint64_t v113 = llvm::ConstantInt::get();
  a1[420] = v113;
  a1[421] = v81;
  a1[422] = v113;
  uint64_t v114 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v115 = a1[419];
  LOWORD(v572) = 257;
  a1[423] = sub_22B1D6A70(v114, v115, v113, (uint64_t)&__dst);
  uint64_t v116 = llvm::ConstantInt::get();
  a1[424] = v116;
  a1[425] = v81;
  a1[426] = v116;
  uint64_t v117 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v118 = a1[423];
  LOWORD(v572) = 257;
  a1[427] = sub_22B1D6A70(v117, v118, v116, (uint64_t)&__dst);
  uint64_t v119 = llvm::ConstantInt::get();
  a1[428] = v119;
  a1[429] = v81;
  a1[430] = v119;
  uint64_t v120 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v121 = a1[427];
  LOWORD(v572) = 257;
  a1[431] = sub_22B1D6A70(v120, v121, v119, (uint64_t)&__dst);
  uint64_t v122 = llvm::ConstantInt::get();
  a1[432] = v122;
  a1[433] = v81;
  a1[434] = v122;
  uint64_t v123 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v124 = a1[431];
  LOWORD(v572) = 257;
  a1[435] = sub_22B1D6A70(v123, v124, v122, (uint64_t)&__dst);
  uint64_t v125 = llvm::ConstantInt::get();
  a1[436] = v125;
  a1[437] = v81;
  a1[438] = v125;
  uint64_t v126 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v127 = a1[435];
  LOWORD(v572) = 257;
  uint64_t v128 = sub_22B1D6A70(v126, v127, v125, (uint64_t)&__dst);
  a1[439] = v128;
  if (*((_DWORD *)a1 + 814) && !*(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1654))
  {
    v506 = (void *)v87;
    v507 = (void **)v82;
    if (!v77) {
      goto LABEL_252;
    }
    LODWORD(v570) = 128;
    std::string __dst = (char *)MEMORY[0x230F426A0](6144, 8);
    sub_22B2660B8((uint64_t)&__dst);
    LOBYTE(v571) = 0;
    char v574 = 0;
    if (v77[16] == 83)
    {
      int v129 = *((_DWORD *)v77 + 5);
      unint64_t v130 = v129 & 0x7FFFFFF;
      if ((v129 & 0x7FFFFFF) != 0)
      {
        uint64_t v131 = 0;
        unint64_t v132 = 0;
        do
        {
          if ((v129 & 0x40000000) != 0) {
            uint64_t v133 = (unsigned char *)*((void *)v77 - 1);
          }
          else {
            uint64_t v133 = &v77[-32 * v130];
          }
          uint64_t v134 = *(void *)&v133[v131];
          *sub_22B26619C((uint64_t)&__dst, *(void *)&v133[32 * *((unsigned int *)v77 + 15) + 8 * v132++]) = v134;
          int v129 = *((_DWORD *)v77 + 5);
          unint64_t v130 = v129 & 0x7FFFFFF;
          v131 += 32;
        }
        while (v132 < v130);
      }
    }
    else
    {
      uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v80);
      *sub_22B26619C((uint64_t)&__dst, SinglePredecessor) = v77;
    }
    char v136 = (int *)a1[396];
    uint64_t v137 = (int *)a1[397];
    if (v136 != v137)
    {
      v508 = &v565;
      while (1)
      {
        uint64_t v138 = *((void *)v136 + 3);
        if (!v138) {
          goto LABEL_183;
        }
        uint64_t v139 = **(void **)(v138 - 64);
        uint64_t v140 = (*(_DWORD *)(v139 + 8) & 0xFE) == 0x12 ? *(unsigned int *)(v139 + 32) : 1;
        unsigned int v141 = *v136;
        uint64_t v142 = v136[1];
        uint64_t v143 = sub_22B26619C((uint64_t)&__dst, *(void *)(v138 + 40));
        uint64_t v144 = *v143;
        if (*(unsigned __int8 *)(*v143 + 16) - 11 < 2) {
          break;
        }
        while (*(void *)(v144 - 32) != *(void *)(v138 - 64))
        {
          uint64_t v144 = *(void *)(v144 - 64);
          if (*(unsigned __int8 *)(v144 + 16) - 11 <= 1) {
            goto LABEL_174;
          }
        }
        uint64_t v145 = **(unsigned int **)(v144 + 64);
        uint64_t v146 = *(void *)(*((void *)v511 + 7) - 8 * *(unsigned int *)(*((void *)v511 + 7) + 8) + 8 * v145);
        uint64_t v147 = llvm::MDString::getString(*(llvm::MDString **)(v146 - 8 * *(unsigned int *)(v146 + 8)));
        if (v148 == 17)
        {
          if (*(void *)v147 != 0x747265762E726961
            || *(void *)(v147 + 8) != 0x757074756F5F7865
            || *(unsigned char *)(v147 + 16) != 116)
          {
            break;
          }
          unint64_t v155 = v508;
          uint64_t *v508 = 0;
          v155[1] = 0;
          v155[2] = 0;
          int v156 = v511;
          if ((*(unsigned int (**)(unsigned char *, void, uint64_t, uint64_t, llvm::Constant **, void))(*(void *)v511 + 336))(v511, *(void *)v496, v145, v146, &v562, 0))
          {
            uint64_t v157 = *((unsigned int *)v156 + 616);
            if (v157)
            {
              uint64_t v158 = *((void *)v156 + 307);
              uint64_t v159 = v157 << 6;
              while (*(_DWORD *)(v158 + 16) != v564)
              {
                v158 += 64;
                v159 -= 64;
                if (!v159) {
                  goto LABEL_190;
                }
              }
              int v149 = *(_DWORD *)(v158 + 48);
            }
            else
            {
LABEL_190:
              int v149 = 0xFFFF;
            }
          }
          else
          {
            int v149 = -2;
          }
          if (v567 < 0) {
            operator delete((void *)v565);
          }
        }
        else
        {
          if (v148 != 12) {
            break;
          }
          if (*(void *)v147 ^ 0x69736F702E726961 | *(unsigned int *)(v147 + 8) ^ 0x6E6F6974) {
            int v149 = -2;
          }
          else {
            int v149 = 0;
          }
        }
LABEL_175:
        if (v140)
        {
          uint64_t v152 = *(void *)(*(void *)&v511[8 * v142 + 3192] + 8);
          while (1)
          {
            int v153 = *(_DWORD *)(v152 + 4 * v141);
            if (v153 != -2)
            {
              int v154 = v149;
              if (v153 == -1) {
                goto LABEL_181;
              }
              if (v149 != v153) {
                break;
              }
            }
LABEL_182:
            ++v149;
            ++v141;
            if (!--v140) {
              goto LABEL_183;
            }
          }
          int v154 = -2;
LABEL_181:
          *(_DWORD *)(v152 + 4 * v141) = v154;
          goto LABEL_182;
        }
LABEL_183:
        v136 += 8;
        if (v136 == v137) {
          goto LABEL_195;
        }
      }
LABEL_174:
      int v149 = -2;
      goto LABEL_175;
    }
LABEL_195:
    unint64_t v160 = *((unsigned int *)v511 + 814);
    if (v160 >= 2)
    {
      uint64_t v161 = 0;
      while (1)
      {
        unint64_t v162 = *(unsigned int **)&v511[8 * v161 + 3192];
        uint64_t v163 = (_DWORD *)*((void *)v162 + 1);
        unint64_t v164 = *v162;
        if (*v163 >= 0xFFFFFFFE) {
          goto LABEL_204;
        }
        if (v164 >= 2) {
          break;
        }
LABEL_205:
        if (++v161 >= v160) {
          goto LABEL_206;
        }
      }
      int v165 = *v163 + 1;
      if (v163[1] == v165)
      {
        uint64_t v166 = 0;
        while (v164 - 2 != v166)
        {
          uint64_t v167 = v166;
          int v168 = v163[v166++ + 2];
          if (v165 + v166 != v168)
          {
            if (v167 + 2 >= v164) {
              goto LABEL_205;
            }
            goto LABEL_204;
          }
        }
        goto LABEL_205;
      }
LABEL_204:
      memset_pattern4(v163, &unk_22B2721DC, 4 * v164);
      unint64_t v160 = *((unsigned int *)v511 + 814);
      goto LABEL_205;
    }
LABEL_206:
    uint64_t v169 = (unsigned int *)*((void *)v511 + 396);
    uint64_t v170 = (unsigned int *)*((void *)v511 + 397);
    while (v169 != v170)
    {
      uint64_t v171 = (llvm::Instruction *)*((void *)v169 + 3);
      if (!v171) {
        goto LABEL_219;
      }
      uint64_t v172 = *v169;
      uint64_t v173 = **((void **)v171 - 8);
      if ((*(_DWORD *)(v173 + 8) & 0xFE) == 0x12)
      {
        unint64_t v174 = *(unsigned int *)(v173 + 32);
        if (!v174) {
          goto LABEL_218;
        }
      }
      else
      {
        unint64_t v174 = 1;
      }
      uint64_t v175 = *(void *)(*(void *)&v511[8 * v169[1] + 3192] + 8);
      if (*(_DWORD *)(v175 + 4 * v172) > 0xFFFFFFFD) {
        goto LABEL_219;
      }
      unint64_t v176 = 0;
      int v177 = v172 + 1;
      while (v174 - 1 != v176)
      {
        unsigned int v178 = *(_DWORD *)(v175 + 4 * (v177 + v176++));
        if (v178 >= 0xFFFFFFFE)
        {
          if (v176 < v174) {
            goto LABEL_219;
          }
          break;
        }
      }
LABEL_218:
      uint64_t v179 = *((void *)v171 - 4);
      llvm::Instruction::eraseFromParent(v171);
      sub_22B215D04(v179);
LABEL_219:
      v169 += 8;
    }
    sub_22B22A45C((uint64_t)&v571);
    unsigned int v180 = v570;
    uint64_t v181 = (llvm *)__dst;
    if (v570)
    {
      uint64_t v563 = 2;
      uint64_t v564 = 0;
      uint64_t v565 = -4096;
      uint64_t v566 = 0;
      v562 = (llvm::Constant *)&unk_26DE86EE0;
      uint64_t v517 = 2;
      uint64_t v518 = 0;
      uint64_t v519 = -8192;
      uint64_t v520 = 0;
      v516 = &unk_26DE86EE0;
      __int16 v182 = (uint64_t *)(__dst + 24);
      uint64_t v183 = 48 * v570;
      a1 = v511;
      do
      {
        uint64_t v184 = *v182;
        if (*v182 != -8192 && v184 != -4096 && v184 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v182 - 2));
        }
        v182 += 6;
        v183 -= 48;
      }
      while (v183);
      if (v519 != -8192 && v519 != -4096 && v519 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v517);
      }
      if (v565 != -8192 && v565 != -4096 && v565) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v563);
      }
      uint64_t v181 = (llvm *)__dst;
      unsigned int v180 = v570;
    }
    else
    {
      a1 = v511;
    }
    llvm::deallocate_buffer(v181, (void *)(48 * v180));
    uint64_t v128 = a1[439];
LABEL_252:
    if (*(unsigned char *)(v128 + 16) == 16) {
      uint64_t v191 = v128;
    }
    else {
      uint64_t v191 = 0;
    }
    uint64_t v192 = (void *)(v191 + 24);
    if (*(_DWORD *)(v191 + 32) >= 0x41u) {
      uint64_t v192 = (void *)*v192;
    }
    int v193 = *(_DWORD *)v192;
    unint64_t v194 = *((unsigned int *)a1 + 814);
    if (v194 < 2)
    {
      int v196 = 0;
    }
    else
    {
      unint64_t v195 = 0;
      int v196 = 0;
      do
      {
        uint64_t v197 = (unsigned int *)a1[v195 + 399];
        uint64_t v198 = (_DWORD *)*((void *)v197 + 1);
        if (*v198 >= 0xFFFFFFFE)
        {
          uint64_t v199 = *v197;
          if (v199)
          {
            int v200 = v193;
            uint64_t v201 = v199;
            do
            {
              *v198++ = v200++;
              --v201;
            }
            while (v201);
            unint64_t v194 = *((unsigned int *)a1 + 814);
          }
          v193 += v199;
          v196 += v199;
        }
        ++v195;
      }
      while (v195 < v194);
    }
    v508 = (uint64_t *)v81;
    uint64_t v202 = (unsigned int *)a1[396];
    char v203 = (unsigned int *)a1[397];
    if (v202 != v203)
    {
      uint64_t v204 = v511;
      while (1)
      {
        uint64_t v205 = (llvm::Instruction *)*((void *)v202 + 3);
        if (v205) {
          break;
        }
LABEL_280:
        v202 += 8;
        if (v202 == v203) {
          goto LABEL_287;
        }
      }
      uint64_t v206 = *v202;
      uint64_t v207 = v202[1];
      uint64_t v208 = (unsigned __int8 *)*((void *)v205 - 8);
      uint64_t v209 = **(void **)(**((void **)v205 - 4) + 16);
      if ((*(_DWORD *)(v209 + 8) & 0xFE) == 0x12)
      {
        unsigned int v210 = *(_DWORD *)(v209 + 32);
        uint64_t v211 = *(void *)&v511[8 * v207 + 3192];
        if (!v210)
        {
LABEL_279:
          uint64_t v216 = llvm::ConstantInt::get();
          int v217 = v208;
          a1 = v204;
          sub_22B2659D8(v204, v217, v216, 0, 1, 0);
          uint64_t v218 = *((void *)v205 - 4);
          llvm::Instruction::eraseFromParent(v205);
          sub_22B215D04(v218);
          goto LABEL_280;
        }
      }
      else
      {
        uint64_t v211 = *(void *)&v511[8 * v207 + 3192];
        unsigned int v210 = 1;
      }
      uint64_t v212 = *(void *)(v211 + 8);
      if (*(_DWORD *)(v212 + 4 * v206) <= 0xFFFFFFFD)
      {
        unint64_t v219 = 0;
        while (v210 - 1 != v219)
        {
          unsigned int v220 = *(_DWORD *)(v212 + 4 * (v206 + 1 + v219++));
          if (v220 >= 0xFFFFFFFE)
          {
            if (v219 < v210) {
              goto LABEL_276;
            }
            goto LABEL_279;
          }
        }
      }
      else
      {
LABEL_276:
        int v213 = v193;
        unsigned int v214 = *v202;
        uint64_t v215 = v210;
        do
        {
          *(_DWORD *)(v212 + 4 * v214++) = v213++;
          --v215;
        }
        while (v215);
        v193 += v210;
        v196 += v210;
      }
      goto LABEL_279;
    }
LABEL_287:
    *((_DWORD *)a1 + 773) += v196;
    uint64_t v82 = (uint64_t)v507;
    uint64_t v81 = (uint64_t)v508;
    uint64_t v87 = (uint64_t)v506;
  }
  uint64_t v221 = llvm::ConstantInt::get();
  a1[440] = v221;
  a1[441] = v81;
  a1[442] = v221;
  uint64_t v222 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v223 = a1[439];
  LOWORD(v572) = 257;
  a1[443] = sub_22B1D6A70(v222, v223, v221, (uint64_t)&__dst);
  uint64_t v224 = llvm::ConstantInt::get();
  uint64_t v225 = 0;
  int v226 = 0;
  a1[444] = v224;
  a1[445] = v81;
  a1[446] = v224;
  do
  {
    unsigned int v227 = *(_DWORD *)((char *)a1 + v225 + 3036);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v227 = (v227 + 1) >> 1;
    }
    v226 += *(_DWORD *)((char *)a1 + v225 + 3024) + v227;
    v225 += 4;
  }
  while (v225 != 12);
  *((_DWORD *)a1 + 776) += *((_DWORD *)a1 + 773) + *((_DWORD *)a1 + 774) + v226;
  uint64_t v228 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v229 = a1[443];
  LOWORD(v572) = 257;
  uint64_t v230 = sub_22B1D6A70(v228, v229, v224, (uint64_t)&__dst);
  uint64_t v231 = 0;
  int v232 = 0;
  a1[447] = v230;
  do
  {
    unsigned int v233 = *(_DWORD *)((char *)a1 + v231 + 3060);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v233 = (v233 + 1) >> 1;
    }
    v232 += *(_DWORD *)((char *)a1 + v231 + 3048) + v233;
    v231 += 4;
  }
  while (v231 != 12);
  a1[448] = llvm::ConstantInt::get();
  a1[449] = v87;
  uint64_t v234 = llvm::ConstantInt::get();
  a1[450] = v234;
  uint64_t v235 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v236 = a1[447];
  LOWORD(v572) = 257;
  uint64_t v237 = sub_22B1D6A70(v235, v236, v234, (uint64_t)&__dst);
  uint64_t v238 = 0;
  int v239 = 0;
  a1[451] = v237;
  do
  {
    unsigned int v240 = *(_DWORD *)((char *)a1 + v238 + 3060);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v240 = (v240 + 1) >> 1;
    }
    v239 += *(_DWORD *)((char *)a1 + v238 + 3048) + v240;
    v238 += 4;
  }
  while (v238 != 12);
  a1[452] = llvm::ConstantInt::get();
  a1[453] = v87;
  uint64_t v241 = llvm::ConstantInt::get();
  a1[454] = v241;
  uint64_t v242 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v243 = a1[451];
  LOWORD(v572) = 257;
  uint64_t v244 = sub_22B1D6A70(v242, v243, v241, (uint64_t)&__dst);
  uint64_t v245 = 0;
  int v246 = 0;
  a1[455] = v244;
  do
  {
    unsigned int v247 = *(_DWORD *)((char *)a1 + v245 + 3060);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v247 = (v247 + 1) >> 1;
    }
    v246 += *(_DWORD *)((char *)a1 + v245 + 3048) + v247;
    v245 += 4;
  }
  while (v245 != 12);
  a1[456] = llvm::ConstantInt::get();
  a1[457] = v87;
  uint64_t v248 = llvm::ConstantInt::get();
  a1[458] = v248;
  uint64_t v249 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v250 = a1[455];
  LOWORD(v572) = 257;
  uint64_t v251 = sub_22B1D6A70(v249, v250, v248, (uint64_t)&__dst);
  uint64_t v252 = 0;
  int v253 = 0;
  a1[459] = v251;
  do
  {
    unsigned int v254 = *(_DWORD *)((char *)a1 + v252 + 3060);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v254 = (v254 + 1) >> 1;
    }
    v253 += *(_DWORD *)((char *)a1 + v252 + 3048) + v254;
    v252 += 4;
  }
  while (v252 != 12);
  a1[460] = llvm::ConstantInt::get();
  a1[461] = v87;
  uint64_t v255 = llvm::ConstantInt::get();
  a1[462] = v255;
  uint64_t v256 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v257 = a1[459];
  LOWORD(v572) = 257;
  uint64_t v258 = sub_22B1D6A70(v256, v257, v255, (uint64_t)&__dst);
  uint64_t v259 = 0;
  int v260 = 0;
  a1[463] = v258;
  do
  {
    unsigned int v261 = *(_DWORD *)((char *)a1 + v259 + 3060);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v261 = (v261 + 1) >> 1;
    }
    v260 += *(_DWORD *)((char *)a1 + v259 + 3048) + v261;
    v259 += 4;
  }
  while (v259 != 12);
  a1[464] = llvm::ConstantInt::get();
  a1[465] = v87;
  uint64_t v262 = llvm::ConstantInt::get();
  a1[466] = v262;
  uint64_t v263 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v264 = a1[463];
  LOWORD(v572) = 257;
  uint64_t v265 = sub_22B1D6A70(v263, v264, v262, (uint64_t)&__dst);
  uint64_t v266 = 0;
  int v267 = 0;
  a1[467] = v265;
  do
  {
    unsigned int v268 = *(_DWORD *)((char *)a1 + v266 + 3060);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v268 = (v268 + 1) >> 1;
    }
    v267 += *(_DWORD *)((char *)a1 + v266 + 3048) + v268;
    v266 += 4;
  }
  while (v266 != 12);
  a1[468] = llvm::ConstantInt::get();
  a1[469] = v87;
  uint64_t v269 = llvm::ConstantInt::get();
  uint64_t v270 = 0;
  int v271 = 0;
  a1[470] = v269;
  do
  {
    unsigned int v272 = *(_DWORD *)((char *)a1 + v270 + 3060);
    if (*((unsigned char *)a1 + 2992)) {
      unsigned int v272 = (v272 + 1) >> 1;
    }
    v271 += *(_DWORD *)((char *)a1 + v270 + 3048) + v272;
    v270 += 4;
  }
  while (v270 != 12);
  uint64_t v273 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  uint64_t v274 = llvm::ConstantInt::get();
  uint64_t v275 = (uint64_t)&v511[*(void *)(*(void *)v511 - 24) + 8];
  uint64_t v276 = llvm::ConstantInt::get();
  LOWORD(v572) = 257;
  uint64_t v277 = sub_22B1FC254(v275, v82, v276, (uint64_t)&__dst);
  LOWORD(v566) = 257;
  uint64_t v278 = v274;
  uint64_t v279 = v511;
  uint64_t v280 = sub_22B1D7468(v273, v278, v277, (uint64_t)&v562);
  LOWORD(v520) = 257;
  uint64_t v281 = sub_22B1D6A70(v273, v269, v280, (uint64_t)&v516);
  uint64_t v282 = 0;
  int v283 = 0;
  v279[470] = v281;
  do
  {
    unsigned int v284 = *(_DWORD *)((char *)v279 + v282 + 3060);
    if (*((unsigned char *)v279 + 2992)) {
      unsigned int v284 = (v284 + 1) >> 1;
    }
    v283 += *(_DWORD *)((char *)v279 + v282 + 3048) + v284;
    v282 += 4;
  }
  while (v282 != 12);
  *((_DWORD *)v279 + 777) += v283;
  uint64_t v285 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
  uint64_t v286 = llvm::ConstantInt::get();
  LOWORD(v572) = 257;
  uint64_t v287 = sub_22B1D7468(v285, v286, v82, (uint64_t)&__dst);
  uint64_t v288 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
  uint64_t v289 = v279[447];
  LOWORD(v572) = 257;
  v279[471] = sub_22B1D6A70(v288, v289, v287, (uint64_t)&__dst);
  uint64_t v290 = llvm::ConstantInt::get();
  v279[472] = v290;
  int v291 = *((unsigned __int8 *)v279 + 3157);
  if (*((unsigned char *)v279 + 3157)) {
    uint64_t v292 = v87;
  }
  else {
    uint64_t v292 = v81;
  }
  v279[473] = v292;
  unint64_t v293 = (unsigned __int8 *)v509;
  if (v291)
  {
    uint64_t v294 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
    LOWORD(v572) = 257;
    uint64_t v290 = sub_22B1D7468(v294, v290, v82, (uint64_t)&__dst);
  }
  v279[474] = v290;
  if (*((unsigned char *)v279 + 3100))
  {
    if (*((unsigned char *)v279 + 3157)) {
      ++*((_DWORD *)v279 + 777);
    }
    else {
      ++*((_DWORD *)v279 + 776);
    }
  }
  uint64_t v295 = *(void *)(*v279 - 24);
  if (*(unsigned char *)(*(void *)((char *)v279 + v295 + 344) + 1671))
  {
    if (*((unsigned char *)v279 + 3101)) {
      BOOL v296 = 1;
    }
    else {
      BOOL v296 = *((unsigned char *)v279 + 3102) != 0;
    }
    uint64_t v302 = v87;
    if (*((unsigned char *)v279 + 3158)) {
      BOOL v303 = 1;
    }
    else {
      BOOL v303 = *((unsigned char *)v279 + 3159) != 0;
    }
    uint64_t v304 = v279[471];
    LOWORD(v572) = 257;
    v279[475] = sub_22B1D6A70((uint64_t)v279 + v295 + 8, v304, v290, (uint64_t)&__dst);
    uint64_t v305 = llvm::ConstantInt::get();
    uint64_t v306 = v305;
    v279[476] = v305;
    if (v303)
    {
      uint64_t v87 = v302;
      v279[477] = v302;
      uint64_t v307 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
      LOWORD(v572) = 257;
      uint64_t v306 = sub_22B1D7468(v307, v306, v82, (uint64_t)&__dst);
      uint64_t v308 = v279[477];
      v279[478] = v306;
      *((_OWORD *)j + 2) = *(_OWORD *)j;
      v279[481] = v308;
      v279[482] = v306;
      if (!v296) {
        goto LABEL_364;
      }
LABEL_362:
      ++*((_DWORD *)v279 + 777);
      goto LABEL_364;
    }
    v279[477] = v81;
    v279[478] = v305;
    v279[479] = v279[475];
    v279[480] = v305;
    v279[481] = v81;
    v279[482] = v305;
    if (v296) {
      ++*((_DWORD *)v279 + 776);
    }
    uint64_t v87 = v302;
  }
  else
  {
    uint64_t v297 = v279[471];
    LOWORD(v572) = 257;
    v279[475] = sub_22B1D6A70((uint64_t)v279 + v295 + 8, v297, v290, (uint64_t)&__dst);
    uint64_t v298 = llvm::ConstantInt::get();
    v279[476] = v298;
    int v299 = *((unsigned __int8 *)v279 + 3158);
    if (*((unsigned char *)v279 + 3158)) {
      uint64_t v300 = v87;
    }
    else {
      uint64_t v300 = v81;
    }
    v279[477] = v300;
    if (v299)
    {
      uint64_t v301 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
      LOWORD(v572) = 257;
      uint64_t v298 = sub_22B1D7468(v301, v298, v82, (uint64_t)&__dst);
    }
    v279[478] = v298;
    if (*((unsigned char *)v279 + 3101))
    {
      if (*((unsigned char *)v279 + 3158)) {
        ++*((_DWORD *)v279 + 777);
      }
      else {
        ++*((_DWORD *)v279 + 776);
      }
    }
    uint64_t v309 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
    uint64_t v310 = v279[475];
    LOWORD(v572) = 257;
    v279[479] = sub_22B1D6A70(v309, v310, v298, (uint64_t)&__dst);
    uint64_t v306 = llvm::ConstantInt::get();
    v279[480] = v306;
    int v311 = *((unsigned __int8 *)v279 + 3159);
    if (*((unsigned char *)v279 + 3159)) {
      uint64_t v312 = v87;
    }
    else {
      uint64_t v312 = v81;
    }
    v279[481] = v312;
    if (v311)
    {
      uint64_t v313 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
      LOWORD(v572) = 257;
      uint64_t v306 = sub_22B1D7468(v313, v306, v82, (uint64_t)&__dst);
    }
    v279[482] = v306;
    if (*((unsigned char *)v279 + 3102))
    {
      if (!*((unsigned char *)v279 + 3159))
      {
        ++*((_DWORD *)v279 + 776);
        goto LABEL_364;
      }
      goto LABEL_362;
    }
  }
LABEL_364:
  uint64_t v314 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
  uint64_t v315 = v279[479];
  LOWORD(v572) = 257;
  v279[483] = sub_22B1D6A70(v314, v315, v306, (uint64_t)&__dst);
  uint64_t v316 = llvm::ConstantInt::get();
  v279[484] = v316;
  int v317 = *((unsigned __int8 *)v279 + 3156);
  if (*((unsigned char *)v279 + 3156)) {
    uint64_t v318 = v87;
  }
  else {
    uint64_t v318 = v81;
  }
  v279[485] = v318;
  if (v317)
  {
    uint64_t v319 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
    LOWORD(v572) = 257;
    uint64_t v316 = sub_22B1D7468(v319, v316, v82, (uint64_t)&__dst);
  }
  v279[486] = v316;
  int v320 = *((_DWORD *)v279 + 778);
  if (v320)
  {
    if (!*((unsigned char *)v279 + 3156))
    {
      *((_DWORD *)v279 + 776) += v320;
      if (!v293) {
        goto LABEL_374;
      }
      goto LABEL_373;
    }
    *((_DWORD *)v279 + 777) += v320;
  }
  if (v293)
  {
LABEL_373:
    uint64_t v321 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
    uint64_t v322 = v279[411];
    uint64_t v323 = v279[413];
    uint64_t v324 = v279[412];
    LOWORD(v572) = 257;
    uint64_t v325 = sub_22B1D7468(v321, v323, v324, (uint64_t)&__dst);
    LOWORD(v566) = 257;
    uint64_t v326 = sub_22B1D6A70(v321, v322, v325, (uint64_t)&v562);
    sub_22B2659D8(v279, v293, v326, 0, 0, *((unsigned __int8 *)v279 + 3156));
  }
LABEL_374:
  uint64_t v327 = *((unsigned int *)v279 + 616);
  if (!v327) {
    goto LABEL_410;
  }
  int v328 = 0;
  int v505 = 0;
  LODWORD(v506) = 0;
  v507 = 0;
  uint64_t j = 0;
  uint64_t v329 = v279[307];
  uint64_t v330 = v329 + (v327 << 6);
  v501 = v279 + 24;
  v495 = &v563;
  v503 = v279 + 73;
  uint64_t v491 = v330;
  do
  {
    if (*((unsigned char *)v279 + 2992)) {
      BOOL v331 = *(unsigned char *)(v329 + 56) != 0;
    }
    else {
      BOOL v331 = 0;
    }
    unint64_t v332 = v560;
    if (v560)
    {
      unsigned int v333 = *(_DWORD *)(v329 + 16);
      int v334 = v559;
      do
      {
        unint64_t v335 = v332 >> 1;
        uint64_t v336 = &v334[16 * (v332 >> 1)];
        unsigned int v338 = *(_DWORD *)v336;
        int v337 = v336 + 16;
        v332 += ~(v332 >> 1);
        if (v338 < v333) {
          int v334 = v337;
        }
        else {
          unint64_t v332 = v335;
        }
      }
      while (v332);
      if (v334 == &v559[16 * v560] || *(_DWORD *)v334 != v333)
      {
LABEL_406:
        uint64_t v279 = v511;
      }
      else
      {
        unint64_t v339 = v511;
        uint64_t v340 = (uint64_t)v339 + *(void *)(*v339 - 24) + 8;
        uint64_t v509 = *(unsigned int *)(v329 + 60);
        long long v341 = &v511[32 * v509];
        uint64_t v342 = v341[411];
        uint64_t v343 = v341[413];
        uint64_t v344 = v341[412];
        LOWORD(v572) = 257;
        uint64_t v345 = sub_22B1D7468(v340, v343, v344, (uint64_t)&__dst);
        LOWORD(v566) = 257;
        uint64_t v346 = sub_22B1D6A70(v340, v342, v345, (uint64_t)&v562);
        uint64_t v347 = v346;
        __int16 v348 = (llvm::Constant *)*((void *)v334 + 1);
        if (v331)
        {
          uint64_t v349 = v495;
          uint64_t *v495 = 0;
          v349[1] = 0;
          v349[2] = 0;
          v562 = v348;
          if (*(void *)v348) {
            BOOL v350 = *(unsigned char *)(*(void *)v348 + 8) == 18;
          }
          else {
            BOOL v350 = 0;
          }
          if (v350)
          {
            uint64_t v351 = *(unsigned int *)(*(void *)v348 + 32);
            sub_22B24295C((uint64_t)&v511[*(void *)(*(void *)v511 - 24)], v348, &v562);
            if (!v351) {
              goto LABEL_406;
            }
          }
          else
          {
            uint64_t v351 = 1;
          }
          uint64_t v502 = v347;
          uint64_t v504 = v329;
          int v356 = *(_DWORD *)(v329 + 52);
          int v357 = (uint64_t *)&v562;
          while (1)
          {
            BOOL v358 = v511;
            uint64_t v359 = (uint64_t)&v511[*(void *)(*(void *)v511 - 24) + 8];
            uint64_t v360 = llvm::ConstantInt::get();
            LOWORD(v572) = 257;
            v508 = (uint64_t *)sub_22B1D6A70(v359, v502, v360, (uint64_t)&__dst);
            uint64_t v362 = *v357;
            int v363 = *(unsigned __int8 *)(v504 + 57);
            if (j)
            {
              uint64_t v364 = *(void *)(*v358 - 24);
              if (v328 == v509 && v505 == (v356 & 0xFFFFFFFE))
              {
                uint64_t v365 = v511;
                LOWORD(v572) = 257;
                uint64_t v366 = (uint64_t)&v511[v364 + 8];
                uint64_t v367 = (uint64_t)j;
                uint64_t v368 = llvm::ConstantInt::get();
                uint64_t v369 = sub_22B2427EC(v366, v367, v362, v368, (uint64_t)&__dst);
                if (v369)
                {
                  uint64_t v370 = *(void *)(*v365 - 24);
                  uint64_t v371 = *(void *)((char *)v501 + v370);
                  LOWORD(v572) = 257;
                  char v372 = (unsigned __int8 *)sub_22B1D7384((uint64_t)v365 + v370 + 8, 49, v369, v371, (uint64_t)&__dst);
                  sub_22B2659D8(v365, v372, (uint64_t)v507, 1, 1, v506 != 0);
                  uint64_t j = 0;
                  v507 = 0;
                }
                else
                {
                  uint64_t j = 0;
                }
                goto LABEL_403;
              }
              BOOL v358 = v511;
              uint64_t v373 = *(void *)((char *)v501 + v364);
              LOWORD(v572) = 257;
              uint64_t v374 = (unsigned __int8 *)sub_22B1D7384((uint64_t)&v511[v364 + 8], 49, (uint64_t)j, v373, (uint64_t)&__dst);
              sub_22B2659D8(v358, v374, (uint64_t)v507, 1, 1, v506 != 0);
            }
            uint64_t v375 = (llvm::Constant **)((char *)v358 + *(void *)(*v358 - 24));
            uint64_t v376 = llvm::Constant::getNullValue(v375[26], v361);
            LOWORD(v572) = 257;
            uint64_t v377 = llvm::ConstantInt::get();
            uint64_t j = (void *)sub_22B2427EC((uint64_t)(v375 + 1), v376, v362, v377, (uint64_t)&__dst);
            v507 = (void **)v508;
            LODWORD(v506) = v363;
            int v505 = v356;
LABEL_403:
            ++v356;
            ++v357;
            int v328 = v509;
            if (!--v351)
            {
              int v328 = v509;
              uint64_t v329 = v504;
              uint64_t v330 = v491;
              goto LABEL_406;
            }
          }
        }
        uint64_t v352 = v346;
        uint64_t v353 = (uint64_t)v339 + *(void *)(*v339 - 24) + 8;
        uint64_t v354 = llvm::ConstantInt::get();
        LOWORD(v572) = 257;
        uint64_t v355 = sub_22B1D6A70(v353, v352, v354, (uint64_t)&__dst);
        sub_22B2659D8(v339, (unsigned __int8 *)v348, v355, 1, 1, *(unsigned __int8 *)(v329 + 57));
        uint64_t v279 = v339;
      }
    }
    v329 += 64;
  }
  while (v329 != v330);
  if (j)
  {
    uint64_t v378 = (char *)v279 + *(void *)(*v279 - 24);
    uint64_t v379 = *((void *)v378 + 24);
    LOWORD(v572) = 257;
    uint64_t v380 = (unsigned __int8 *)sub_22B1D7384((uint64_t)(v378 + 8), 49, (uint64_t)j, v379, (uint64_t)&__dst);
    sub_22B2659D8(v279, v380, (uint64_t)v507, 1, 1, v506 != 0);
  }
LABEL_410:
  if (*((_DWORD *)v279 + 814))
  {
    uint64_t v381 = *(void *)(*v279 - 24);
    if (*(unsigned char *)(*(void *)((char *)v279 + v381 + 344) + 1654))
    {
      v382 = *(void **)((char *)v279 + v381 + 56);
      std::string __dst = "return_block";
      LOWORD(v572) = 259;
      llvm::BasicBlock::splitBasicBlock();
      std::string __dst = "tf_write_block";
      LOWORD(v572) = 259;
      v503 = v382;
      operator new();
    }
  }
  if (*((_DWORD *)v279 + 774))
  {
    uint64_t v383 = llvm::ConstantFP::get();
    uint64_t v384 = (void *)((char *)v279 + *(void *)(*v279 - 24));
    uint64_t v385 = v384[43];
    uint64_t v386 = *(void *)(v385 + 1232);
    uint64_t v387 = v386 ? strlen(*(const char **)(v385 + 1232)) : 0;
    uint64_t v388 = sub_22B1D7FA8((uint64_t)v384, v386, v387, v384[18], v384[73], v384[20]);
    uint64_t v389 = *(void *)((char *)v279 + *(void *)(*v279 - 24) + 320);
    uint64_t v390 = *(uint64_t **)(v389 + 32);
    v508 = (uint64_t *)(v389 + 24);
    if (v390 != (uint64_t *)(v389 + 24))
    {
      uint64_t v391 = v388;
      uint64_t v392 = v279 + 1;
      do
      {
        v393 = v390 - 7;
        if (!v390) {
          v393 = 0;
        }
        uint64_t v394 = (void *)v393[10];
        uint64_t v509 = (uint64_t)v390;
        for (uint64_t j = v393 + 9; v394 != j; v394 = (void *)v394[1])
        {
          if (v394) {
            uint64_t v395 = (llvm::BasicBlock *)(v394 - 3);
          }
          else {
            uint64_t v395 = 0;
          }
          uint64_t v396 = (void *)*((void *)v395 + 5);
          if (v396 != (void *)((char *)v395 + 40))
          {
            uint64_t v397 = v396 - 3;
            if (v396) {
              uint64_t v398 = v396 - 3;
            }
            else {
              uint64_t v398 = 0;
            }
            unsigned int v399 = *((unsigned __int8 *)v398 + 16) - 29;
            if (v399 >= 0xB) {
              uint64_t v397 = 0;
            }
            int v400 = *((unsigned __int8 *)v397 + 16);
            if (v399 <= 0xA && v400 == 29)
            {
              uint64_t v402 = (char **)((char *)v392 + *(void *)(*v279 - 24));
              uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v395);
              v404 = v402;
              uint64_t v279 = v511;
              sub_22B1D3CF8(v404, (char *)v395, FirstInsertionPt);
              if (*((_DWORD *)v279 + 774))
              {
                unint64_t v405 = 0;
                do
                {
                  v562 = 0;
                  uint64_t v563 = 0;
                  v562 = (llvm::Constant *)llvm::ConstantInt::get();
                  uint64_t v563 = v383;
                  uint64_t v406 = (uint64_t)v392 + *(void *)(*v279 - 24);
                  LOWORD(v572) = 257;
                  sub_22B1D4034(v406, *(void *)(v391 + 24), v391, (uint64_t)&v562, 2, (uint64_t)&__dst);
                  ++v405;
                }
                while (v405 < *((unsigned int *)v279 + 774));
              }
            }
          }
        }
        uint64_t v390 = *(uint64_t **)(v509 + 8);
      }
      while (v390 != v508);
    }
  }
  sub_22B1FFC54((uint64_t)v279 + *(void *)(*v279 - 24) + 8, (uint64_t)v498);
  v408 = (llvm::Type ***)v499;
  v407 = (llvm::Type ***)v500;
  if (*((unsigned char *)v279 + 3100))
  {
    uint64_t v409 = (*(uint64_t (**)(void *, uint64_t))(*v279 + 368))(v279, v497);
    uint64_t v410 = llvm::ConstantFP::get();
    v411 = (char *)v279 + *(void *)(*v279 - 24);
    uint64_t v412 = *((void *)v411 + 43);
    long long v512 = *(_OWORD *)(v411 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v513, (llvm::IRBuilderBase *)(v411 + 8));
    int v514 = *((_DWORD *)v411 + 26);
    uint64_t v413 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v412 + 48))(v412, &v512, v409, v410, 0);
    if (v513) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v279 = v511;
    uint64_t v414 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
    uint64_t v415 = *((void *)v511 + 471);
    uint64_t v416 = *((void *)v511 + 473);
    uint64_t v417 = *((void *)v511 + 472);
    LOWORD(v572) = 257;
    uint64_t v418 = sub_22B1D7468(v414, v416, v417, (uint64_t)&__dst);
    LOWORD(v566) = 257;
    uint64_t v419 = sub_22B1D6A70(v414, v415, v418, (uint64_t)&v562);
    sub_22B2659D8(v279, v413, v419, 0, 2, *((unsigned __int8 *)v279 + 3157));
  }
  uint64_t v420 = *v279;
  uint64_t v421 = *(void *)(*v279 - 24);
  uint64_t v422 = *(void *)((char *)v279 + v421 + 344);
  if (*(unsigned char *)(v422 + 1671))
  {
    if (*((unsigned char *)v279 + 3101) || *((unsigned char *)v279 + 3102))
    {
      uint64_t v423 = llvm::ConstantInt::get();
      if (*((unsigned char *)v279 + 3101))
      {
        uint64_t v424 = *(void *)(*v279 - 24);
        uint64_t v425 = (uint64_t)v279 + v424;
        uint64_t v426 = *(void *)((char *)v279 + v424 + 192);
        if (*v408 == (llvm::Type **)v426)
        {
          uint64_t v445 = (llvm::Type ***)llvm::ConstantInt::get();
          uint64_t v427 = sub_22B243278(v425, v408, v445, 36);
        }
        else
        {
          LOWORD(v572) = 257;
          uint64_t v427 = sub_22B1D7384((uint64_t)v279 + v424 + 8, 39, (uint64_t)v408, v426, (uint64_t)&__dst);
        }
        uint64_t v446 = v427;
        uint64_t v447 = sub_22B265F98(v279);
        uint64_t v448 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
        LOWORD(v572) = 257;
        uint64_t v449 = sub_22B1D6C68(v448, v446, v447, (uint64_t)&__dst);
        uint64_t v450 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
        LOWORD(v572) = 257;
        uint64_t v451 = llvm::ConstantInt::get();
        uint64_t v423 = sub_22B1D6C68(v450, v449, v451, (uint64_t)&__dst);
      }
      uint64_t v452 = v423;
      if (*((unsigned char *)v279 + 3102))
      {
        uint64_t v453 = *(void *)(*v279 - 24);
        uint64_t v454 = (uint64_t)v279 + v453;
        uint64_t v455 = *(void *)((char *)v279 + v453 + 192);
        if (*v407 == (llvm::Type **)v455)
        {
          v457 = (llvm::Type ***)llvm::ConstantInt::get();
          uint64_t v456 = sub_22B243278(v454, v407, v457, 36);
        }
        else
        {
          LOWORD(v572) = 257;
          uint64_t v456 = sub_22B1D7384((uint64_t)v279 + v453 + 8, 39, (uint64_t)v407, v455, (uint64_t)&__dst);
        }
        uint64_t v458 = v456;
        uint64_t v459 = sub_22B265F98(v279);
        uint64_t v460 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
        LOWORD(v572) = 257;
        uint64_t v461 = sub_22B1D6F68(v460, v458, v459, (uint64_t)&__dst);
        uint64_t v462 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
        LOWORD(v572) = 257;
        uint64_t v463 = llvm::ConstantInt::get();
        uint64_t v464 = v462;
        uint64_t v279 = v511;
        uint64_t v465 = sub_22B1D6C68(v464, v461, v463, (uint64_t)&__dst);
        uint64_t v466 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
        LOWORD(v572) = 257;
        uint64_t v467 = sub_22B1D6A70(v466, v452, v465, (uint64_t)&__dst);
        uint64_t v468 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
        LOWORD(v572) = 257;
        uint64_t v452 = sub_22B1D7014(v468, v467, v458, (uint64_t)&__dst);
      }
      uint64_t v469 = (uint64_t)v279 + *(void *)(*v279 - 24) + 8;
      uint64_t v470 = v279[475];
      uint64_t v471 = v279[477];
      uint64_t v472 = v279[476];
      LOWORD(v572) = 257;
      uint64_t v473 = sub_22B1D7468(v469, v471, v472, (uint64_t)&__dst);
      LOWORD(v566) = 257;
      uint64_t v440 = sub_22B1D6A70(v469, v470, v473, (uint64_t)&v562);
      if (*((unsigned char *)v279 + 3158)) {
        int v441 = 1;
      }
      else {
        int v441 = *((unsigned char *)v279 + 3159) != 0;
      }
      uint64_t v442 = v279;
      uint64_t v443 = (unsigned __int8 *)v452;
      int v444 = 4;
LABEL_470:
      sub_22B2659D8(v442, v443, v440, 0, v444, v441);
    }
  }
  else
  {
    if (*(unsigned char *)(v422 + 1669) && *((unsigned char *)v279 + 3101))
    {
      uint64_t v428 = (uint64_t)v279 + v421 + 8;
      uint64_t v429 = v279[475];
      uint64_t v430 = v279[477];
      uint64_t v431 = v279[476];
      LOWORD(v572) = 257;
      uint64_t v432 = sub_22B1D7468(v428, v430, v431, (uint64_t)&__dst);
      LOWORD(v566) = 257;
      uint64_t v433 = sub_22B1D6A70(v428, v429, v432, (uint64_t)&v562);
      sub_22B2659D8(v279, (unsigned __int8 *)v408, v433, 0, 4, *((unsigned __int8 *)v279 + 3158));
      uint64_t v420 = *v279;
    }
    uint64_t v434 = *(void *)(v420 - 24);
    if (*(unsigned char *)(*(void *)((char *)v279 + v434 + 344) + 1670) && *((unsigned char *)v279 + 3102))
    {
      uint64_t v435 = (uint64_t)v279 + v434 + 8;
      uint64_t v436 = v279[479];
      uint64_t v437 = v279[481];
      uint64_t v438 = v279[480];
      LOWORD(v572) = 257;
      uint64_t v439 = sub_22B1D7468(v435, v437, v438, (uint64_t)&__dst);
      LOWORD(v566) = 257;
      uint64_t v440 = sub_22B1D6A70(v435, v436, v439, (uint64_t)&v562);
      int v441 = *((unsigned __int8 *)v279 + 3159);
      uint64_t v442 = v279;
      uint64_t v443 = (unsigned __int8 *)v407;
      int v444 = 5;
      goto LABEL_470;
    }
  }
  uint64_t v474 = 0;
  int v475 = 0;
  int v476 = 1;
  uint64_t v477 = v511;
  do
  {
    if ((*((_DWORD *)v477 + 779) & v476) != 0)
    {
      uint64_t v478 = llvm::ConstantInt::get();
      uint64_t v479 = (uint64_t)&v477[*(void *)(*(void *)v477 - 24) + 8];
      uint64_t v480 = *((void *)v477 + 483);
      uint64_t v481 = *((void *)v477 + 485);
      uint64_t v482 = *((void *)v477 + 484);
      LOWORD(v572) = 257;
      uint64_t v483 = sub_22B1D7468(v479, v481, v482, (uint64_t)&__dst);
      LOWORD(v566) = 257;
      uint64_t v484 = sub_22B1D6A70(v479, v480, v483, (uint64_t)&v562);
      LOWORD(v520) = 257;
      uint64_t v485 = sub_22B1D6A70(v479, v478, v484, (uint64_t)&v516);
      sub_22B2659D8(v477, *(unsigned __int8 **)&v555[v474], v485, 0, 3, v477[3156]);
      ++v475;
    }
    v476 *= 2;
    v474 += 8;
  }
  while (v474 != 64);
  if (v496) {
    sub_22B215D04((uint64_t)v496);
  }
  v486 = (llvm::Instruction *)v498;
  v487 = v498 + 3;
  if (!v498) {
    v487 = 0;
  }
  sub_22B1D3CF8((char **)&v511[*(void *)(*(void *)v511 - 24) + 8], (char *)v498[5], (char *)v487[1]);
  llvm::Instruction::eraseFromParent(v486);
  llvm::Function::eraseFromParent(Function);
  uint64_t v190 = 1;
  uint64_t v187 = v493;
  unint64_t v94 = v494;
LABEL_480:
  uint64_t v488 = 384;
  do
  {
    if (*((char *)&v518 + v488 + 7) < 0) {
      operator delete(*(void **)((char *)&v516 + v488));
    }
    v488 -= 96;
  }
  while (v488);
  if (v556 != v187) {
    free(v556);
  }
  if (v559 != v94) {
    free(v559);
  }
  return v190;
}

llvm::Value *sub_22B264DC4(void *a1, int a2)
{
  uint64_t v3 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 344);
  if (a2)
  {
    uint64_t v4 = *(const char **)(v3 + 1352);
    uint64_t v5 = sub_22B2668D0(a1);
  }
  else
  {
    uint64_t v4 = *(const char **)(v3 + 1344);
    uint64_t v5 = sub_22B264EB0(a1);
  }
  uint64_t v11 = v5;
  if (v4) {
    size_t v6 = strlen(v4);
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v7 = sub_22B1DB218((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)v4, v6, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 192), *(void *)((char *)a1 + *(void *)(*a1 - 24) + 192));
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  unsigned char v10[16] = 257;
  return sub_22B1D4034(v8, *(void *)(v7 + 24), v7, (uint64_t)&v11, 1, (uint64_t)v10);
}

uint64_t sub_22B264EB0(void *a1)
{
  uint64_t v2 = llvm::User::operator new((llvm::User *)0x58);
  size_t v6 = "agc.amp.count";
  __int16 v7 = 259;
  uint64_t v3 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v3 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  uint64_t v4 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v7 = 257;
  return sub_22B1D4240(v4 + 1, **(llvm::Type ***)(*(void *)v2 + 16), v2, 0, (uint64_t)&v6);
}

unint64_t sub_22B264FD0(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (unsigned int *)(a2 - 16);
  unint64_t k = v9;
  while (1)
  {
    unint64_t v9 = k;
    uint64_t v12 = a2 - k;
    unint64_t v13 = (uint64_t)(a2 - k) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v47 = *v10;
          unsigned int v48 = *(_DWORD *)k;
          if (*v10 >= *(_DWORD *)k)
          {
            if (v48 < v47) {
              return result;
            }
            unint64_t v50 = *(void *)(a2 - 8);
            unint64_t v49 = *(void *)(k + 8);
            if (v50 >= v49) {
              return result;
            }
          }
          else
          {
            unint64_t v49 = *(void *)(k + 8);
            unint64_t v50 = *(void *)(a2 - 8);
          }
          *(_DWORD *)unint64_t k = v47;
          *(_DWORD *)(a2 - 16) = v48;
          *(void *)(k + 8) = v50;
          *(void *)(a2 - 8) = v49;
          return result;
        case 3uLL:
          return (unint64_t)sub_22B2669F0((unsigned int *)k, (unsigned int *)(k + 16), (unsigned int *)(a2 - 16));
        case 4uLL:
          return (unint64_t)sub_22B266B38(k, k + 16, k + 32, a2 - 16);
        case 5uLL:
          return (unint64_t)sub_22B266C3C(k, k + 16, k + 32, k + 48, (unsigned int *)(a2 - 16));
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 383)
    {
      unint64_t v51 = k + 16;
      BOOL v53 = k == a2 || v51 == a2;
      if (a4)
      {
        if (v53) {
          return result;
        }
        uint64_t v54 = 0;
        unint64_t v55 = k;
        while (2)
        {
          unint64_t v56 = v55;
          unint64_t v55 = v51;
          unsigned int v57 = *(_DWORD *)(v56 + 16);
          unsigned int v58 = *(_DWORD *)v56;
          if (v57 < *(_DWORD *)v56)
          {
            unint64_t v59 = *(void *)(v56 + 24);
            unint64_t v60 = *(void *)(v56 + 8);
            goto LABEL_114;
          }
          if (v58 >= v57)
          {
            unint64_t v59 = *(void *)(v56 + 24);
            unint64_t v60 = *(void *)(v56 + 8);
            if (v59 < v60)
            {
LABEL_114:
              *(_DWORD *)(v56 + 16) = v58;
              *(void *)(v55 + 8) = v60;
              unint64_t v61 = k;
              if (v56 != k)
              {
                uint64_t v62 = v54;
                do
                {
                  unsigned int v63 = *(_DWORD *)(k + v62 - 16);
                  if (v57 >= v63)
                  {
                    if (v63 < v57)
                    {
                      unint64_t v61 = v56;
                      goto LABEL_123;
                    }
                    unint64_t v61 = k + v62;
                    unint64_t v64 = *(void *)(k + v62 - 8);
                    if (v59 >= v64) {
                      goto LABEL_123;
                    }
                  }
                  else
                  {
                    unint64_t v64 = *(void *)(k + v62 - 8);
                  }
                  v56 -= 16;
                  uint64_t v65 = k + v62;
                  *(_DWORD *)uint64_t v65 = v63;
                  *(void *)(v65 + 8) = v64;
                  v62 -= 16;
                }
                while (v62);
                unint64_t v61 = k;
              }
LABEL_123:
              *(_DWORD *)unint64_t v61 = v57;
              *(void *)(v61 + 8) = v59;
            }
          }
          unint64_t v51 = v55 + 16;
          v54 += 16;
          if (v55 + 16 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v53) {
        return result;
      }
      while (2)
      {
        unint64_t v84 = v9;
        unint64_t v9 = v51;
        unsigned int v85 = *(_DWORD *)(v84 + 16);
        unsigned int v86 = *(_DWORD *)v84;
        if (v85 >= *(_DWORD *)v84)
        {
          if (v86 >= v85)
          {
            unint64_t v87 = *(void *)(v84 + 24);
            if (v87 < *(void *)(v84 + 8)) {
              goto LABEL_164;
            }
          }
        }
        else
        {
          unint64_t v87 = *(void *)(v84 + 24);
          do
          {
            do
            {
LABEL_164:
              unint64_t v88 = v84;
              unsigned int v89 = v86;
              unsigned int v90 = *(_DWORD *)(v84 - 16);
              v84 -= 16;
              unsigned int v86 = v90;
              *(_DWORD *)(v84 + 32) = v89;
              *(void *)(v84 + 40) = *(void *)(v84 + 24);
            }
            while (v85 < v90);
          }
          while (v86 >= v85 && v87 < *(void *)(v88 - 8));
          *(_DWORD *)unint64_t v88 = v85;
          *(void *)(v88 + 8) = v87;
        }
        unint64_t v51 = v9 + 16;
        if (v9 + 16 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = k + 16 * (v13 >> 1);
    if ((unint64_t)v12 >= 0x801)
    {
      sub_22B2669F0((unsigned int *)v9, (unsigned int *)(v9 + 16 * (v13 >> 1)), (unsigned int *)(a2 - 16));
      sub_22B2669F0((unsigned int *)(v9 + 16), (unsigned int *)(v15 - 16), (unsigned int *)(a2 - 32));
      sub_22B2669F0((unsigned int *)(v9 + 32), (unsigned int *)(v9 + 16 + 16 * v14), (unsigned int *)(a2 - 48));
      uint64_t result = (unint64_t)sub_22B2669F0((unsigned int *)(v15 - 16), (unsigned int *)v15, (unsigned int *)(v9 + 16 + 16 * v14));
      unsigned int v16 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(_DWORD *)unint64_t v15 = v16;
      uint64_t v17 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = *(void *)(v15 + 8);
      *(void *)(v15 + 8) = v17;
    }
    else
    {
      uint64_t result = (unint64_t)sub_22B2669F0((unsigned int *)(v9 + 16 * (v13 >> 1)), (unsigned int *)v9, (unsigned int *)(a2 - 16));
    }
    --a3;
    unsigned int v18 = *(_DWORD *)v9;
    if ((a4 & 1) != 0 || (unsigned int v19 = *(_DWORD *)(v9 - 16), v19 < v18))
    {
LABEL_14:
      unint64_t v21 = *(void *)(v9 + 8);
      for (unint64_t i = v9 + 16; ; i += 16)
      {
        unsigned int v23 = *(_DWORD *)i;
        if (*(_DWORD *)i >= v18 && (v18 < v23 || *(void *)(i + 8) >= v21)) {
          break;
        }
      }
      if (i - 16 == v9)
      {
        unint64_t j = a2;
        if (i < a2)
        {
          unsigned int v27 = *v10;
          unint64_t j = a2 - 16;
          if (*v10 >= v18)
          {
            unint64_t j = a2 - 16;
            do
            {
              if (v18 >= v27)
              {
                if (*(void *)(j + 8) < v21 || i >= j) {
                  break;
                }
              }
              else if (i >= j)
              {
                break;
              }
              unsigned int v29 = *(_DWORD *)(j - 16);
              j -= 16;
              unsigned int v27 = v29;
            }
            while (v29 >= v18);
          }
        }
      }
      else
      {
        unsigned int v24 = *v10;
        for (unint64_t j = a2 - 16; v24 >= v18 && (v18 < v24 || *(void *)(j + 8) >= v21); j -= 16)
        {
          unsigned int v26 = *(_DWORD *)(j - 16);
          unsigned int v24 = v26;
        }
      }
      unint64_t k = i;
      if (i < j)
      {
        unsigned int v30 = *(_DWORD *)j;
        unint64_t k = i;
        unint64_t v31 = j;
        do
        {
          *(_DWORD *)unint64_t k = v30;
          *(_DWORD *)unint64_t v31 = v23;
          uint64_t v32 = *(void *)(k + 8);
          *(void *)(k + 8) = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = v32;
          do
          {
            do
            {
              unsigned int v33 = *(_DWORD *)(k + 16);
              k += 16;
              unsigned int v23 = v33;
            }
            while (v33 < v18);
          }
          while (v18 >= v23 && *(void *)(k + 8) < v21);
          do
          {
            unsigned int v34 = *(_DWORD *)(v31 - 16);
            v31 -= 16;
            unsigned int v30 = v34;
          }
          while (v34 >= v18 && (v18 < v30 || *(void *)(v31 + 8) >= v21));
        }
        while (k < v31);
      }
      if (k - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(k - 16);
        *(void *)(v9 + 8) = *(void *)(k - 8);
      }
      *(_DWORD *)(k - 16) = v18;
      *(void *)(k - 8) = v21;
      if (i < j) {
        goto LABEL_51;
      }
      BOOL v35 = sub_22B266D90(v9, k - 16);
      uint64_t result = sub_22B266D90(k, a2);
      if (result)
      {
        a2 = k - 16;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_51:
        uint64_t result = sub_22B264FD0(v9, k - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v18 < v19)
      {
        unint64_t v20 = *(void *)(v9 + 8);
      }
      else
      {
        unint64_t v20 = *(void *)(v9 + 8);
        if (*(void *)(v9 - 8) < v20) {
          goto LABEL_14;
        }
      }
      unsigned int v36 = *v10;
      if (v18 >= *v10 && (v36 < v18 || v20 >= *(void *)(a2 - 8)))
      {
        for (unint64_t k = v9 + 16; k < a2 && v18 >= *(_DWORD *)k && (*(_DWORD *)k < v18 || v20 >= *(void *)(k + 8)); k += 16)
          ;
      }
      else
      {
        unint64_t k = v9;
        do
        {
          unsigned int v38 = *(_DWORD *)(k + 16);
          k += 16;
          unsigned int v37 = v38;
        }
        while (v18 >= v38 && (v37 < v18 || v20 >= *(void *)(k + 8)));
      }
      unint64_t m = a2;
      if (k < a2)
      {
        for (unint64_t m = a2 - 16; v18 < v36 || v36 >= v18 && v20 < *(void *)(m + 8); m -= 16)
        {
          unsigned int v40 = *(_DWORD *)(m - 16);
          unsigned int v36 = v40;
        }
      }
      if (k < m)
      {
        unsigned int v41 = *(_DWORD *)k;
        unsigned int v42 = *(_DWORD *)m;
        do
        {
          *(_DWORD *)unint64_t k = v42;
          *(_DWORD *)unint64_t m = v41;
          unsigned int v43 = *(_DWORD *)(k + 16);
          k += 16;
          unsigned int v41 = v43;
          uint64_t v44 = *(void *)(k - 8);
          *(void *)(k - 8) = *(void *)(m + 8);
          *(void *)(m + 8) = v44;
          while (v18 >= v41 && (v41 < v18 || v20 >= *(void *)(k + 8)))
          {
            unsigned int v45 = *(_DWORD *)(k + 16);
            k += 16;
            unsigned int v41 = v45;
          }
          do
          {
            do
            {
              unsigned int v46 = *(_DWORD *)(m - 16);
              m -= 16;
              unsigned int v42 = v46;
            }
            while (v18 < v46);
          }
          while (v42 >= v18 && v20 < *(void *)(m + 8));
        }
        while (k < m);
      }
      BOOL v4 = k - 16 >= v9;
      BOOL v5 = k - 16 == v9;
      if (k - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(k - 16);
        *(void *)(v9 + 8) = *(void *)(k - 8);
      }
      a4 = 0;
      *(_DWORD *)(k - 16) = v18;
      *(void *)(k - 8) = v20;
    }
  }
  if (k != a2)
  {
    int64_t v66 = (v13 - 2) >> 1;
    int64_t v67 = v66;
    while (2)
    {
      int64_t v68 = v67;
      if (v66 >= v67)
      {
        uint64_t v69 = (2 * v67) | 1;
        unint64_t v70 = k + 16 * v69;
        if (2 * v68 + 2 < (uint64_t)v13)
        {
          unsigned int v71 = *(_DWORD *)(v70 + 16);
          if (*(_DWORD *)v70 < v71 || v71 >= *(_DWORD *)v70 && *(void *)(k + 16 * v69 + 8) < *(void *)(v70 + 24))
          {
            v70 += 16;
            uint64_t v69 = 2 * v68 + 2;
          }
        }
        unint64_t v72 = k + 16 * v68;
        unsigned int v73 = *(_DWORD *)v70;
        unsigned int v74 = *(_DWORD *)v72;
        if (*(_DWORD *)v70 >= *(_DWORD *)v72)
        {
          if (v74 < v73)
          {
            unint64_t v75 = *(void *)(v72 + 8);
            unint64_t v76 = *(void *)(v70 + 8);
            goto LABEL_138;
          }
          unint64_t v76 = *(void *)(v70 + 8);
          unint64_t v75 = *(void *)(k + 16 * v68 + 8);
          if (v76 >= v75)
          {
LABEL_138:
            *(_DWORD *)unint64_t v72 = v73;
            *(void *)(v72 + 8) = v76;
            if (v66 >= v69)
            {
              while (1)
              {
                uint64_t v78 = 2 * v69;
                uint64_t v69 = (2 * v69) | 1;
                unint64_t v77 = k + 16 * v69;
                uint64_t v79 = v78 + 2;
                if (v79 < (uint64_t)v13)
                {
                  unsigned int v80 = *(_DWORD *)(v77 + 16);
                  if (*(_DWORD *)v77 < v80
                    || v80 >= *(_DWORD *)v77 && *(void *)(k + 16 * v69 + 8) < *(void *)(v77 + 24))
                  {
                    v77 += 16;
                    uint64_t v69 = v79;
                  }
                }
                unsigned int v81 = *(_DWORD *)v77;
                if (*(_DWORD *)v77 < v74) {
                  break;
                }
                unint64_t v82 = *(void *)(v77 + 8);
                if (v74 >= v81 && v82 < v75) {
                  break;
                }
                *(_DWORD *)unint64_t v70 = v81;
                *(void *)(v70 + 8) = v82;
                unint64_t v70 = v77;
                if (v66 < v69) {
                  goto LABEL_140;
                }
              }
            }
            unint64_t v77 = v70;
LABEL_140:
            *(_DWORD *)unint64_t v77 = v74;
            *(void *)(v77 + 8) = v75;
          }
        }
      }
      int64_t v67 = v68 - 1;
      if (v68) {
        continue;
      }
      break;
    }
    uint64_t v91 = (unint64_t)v12 >> 4;
    while (2)
    {
      int64_t v92 = 0;
      unsigned int v93 = *(_DWORD *)k;
      uint64_t v94 = *(void *)(k + 8);
      uint64_t v95 = v91 - 2;
      if (v91 < 2) {
        uint64_t v95 = v91 - 1;
      }
      uint64_t v96 = v95 >> 1;
      unint64_t v97 = k;
      do
      {
        unint64_t v98 = v97;
        int64_t v99 = v92 + 1;
        v97 += 16 * (v92 + 1);
        uint64_t v100 = 2 * v92;
        uint64_t result = (2 * v92) | 1;
        int64_t v92 = result;
        uint64_t v101 = v100 + 2;
        if (v101 < v91)
        {
          uint64_t result = v97 + 16;
          unsigned int v102 = *(_DWORD *)(v97 + 16);
          if (*(_DWORD *)v97 < v102
            || v102 >= *(_DWORD *)v97 && *(void *)(v98 + 16 * v99 + 8) < *(void *)(v97 + 24))
          {
            v97 += 16;
            int64_t v92 = v101;
          }
        }
        *(_DWORD *)unint64_t v98 = *(_DWORD *)v97;
        *(void *)(v98 + 8) = *(void *)(v97 + 8);
      }
      while (v92 <= v96);
      if (v97 == a2 - 16)
      {
        *(_DWORD *)unint64_t v97 = v93;
        *(void *)(v97 + 8) = v94;
      }
      else
      {
        *(_DWORD *)unint64_t v97 = *(_DWORD *)(a2 - 16);
        *(void *)(v97 + 8) = *(void *)(a2 - 8);
        *(_DWORD *)(a2 - 16) = v93;
        *(void *)(a2 - 8) = v94;
        uint64_t v103 = v97 - k + 16;
        if (v103 >= 17)
        {
          unint64_t v104 = (v103 >> 4) - 2;
          unint64_t v105 = v104 >> 1;
          unint64_t v106 = k + 16 * (v104 >> 1);
          unsigned int v107 = *(_DWORD *)v106;
          unsigned int v108 = *(_DWORD *)v97;
          if (*(_DWORD *)v106 < *(_DWORD *)v97)
          {
            unint64_t v109 = *(void *)(v97 + 8);
            uint64_t result = *(void *)(v106 + 8);
            goto LABEL_183;
          }
          if (v108 >= v107)
          {
            uint64_t result = *(void *)(k + 16 * v105 + 8);
            unint64_t v109 = *(void *)(v97 + 8);
            if (result < v109)
            {
LABEL_183:
              *(_DWORD *)unint64_t v97 = v107;
              *(void *)(v97 + 8) = result;
              if (v104 >= 2)
              {
                while (1)
                {
                  unint64_t v111 = v105 - 1;
                  unint64_t v105 = (v105 - 1) >> 1;
                  unint64_t v110 = k + 16 * v105;
                  unsigned int v112 = *(_DWORD *)v110;
                  if (*(_DWORD *)v110 >= v108)
                  {
                    if (v108 < v112) {
                      break;
                    }
                    uint64_t result = *(void *)(k + 16 * v105 + 8);
                    if (result >= v109) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t result = *(void *)(v110 + 8);
                  }
                  *(_DWORD *)unint64_t v106 = v112;
                  *(void *)(v106 + 8) = result;
                  unint64_t v106 = k + 16 * v105;
                  if (v111 <= 1) {
                    goto LABEL_190;
                  }
                }
              }
              unint64_t v110 = v106;
LABEL_190:
              *(_DWORD *)unint64_t v110 = v108;
              *(void *)(v110 + 8) = v109;
            }
          }
        }
      }
      a2 -= 16;
      if (v91-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

llvm::Value *sub_22B2659D8(void *a1, unsigned __int8 *a2, uint64_t a3, char a4, int a5, int a6)
{
  __int16 v7 = a2;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  uint64_t v10 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  BOOL v11 = v9 == v10[20] || v9 == v10[19];
  uint64_t v12 = v10[43];
  if (*(unsigned char *)(v12 + 1635)) {
    char v13 = a4;
  }
  else {
    char v13 = 0;
  }
  char v53 = v13;
  switch(a5)
  {
    case 0:
      BOOL v14 = a6 == 0;
      uint64_t v15 = 1240;
      uint64_t v16 = 1304;
      goto LABEL_25;
    case 1:
      uint64_t v21 = 1224;
      if (v11) {
        uint64_t v21 = 1232;
      }
      uint64_t v22 = (const char **)(v12 + v21);
      uint64_t v23 = 1288;
      if (v11) {
        uint64_t v23 = 1296;
      }
      unsigned int v24 = (const char **)(v12 + v23);
      if (!a6) {
        unsigned int v24 = v22;
      }
      goto LABEL_28;
    case 2:
      BOOL v14 = a6 == 0;
      uint64_t v15 = 1248;
      uint64_t v16 = 1312;
      goto LABEL_25;
    case 3:
      BOOL v14 = a6 == 0;
      uint64_t v15 = 1256;
      uint64_t v16 = 1320;
      goto LABEL_25;
    case 4:
      BOOL v14 = a6 == 0;
      uint64_t v15 = 1272;
      uint64_t v16 = 1328;
      goto LABEL_25;
    case 5:
      BOOL v14 = a6 == 0;
      uint64_t v15 = 1280;
      uint64_t v16 = 1336;
LABEL_25:
      if (!v14) {
        uint64_t v15 = v16;
      }
      unsigned int v24 = (const char **)(v12 + v15);
LABEL_28:
      uint64_t v17 = *v24;
      BOOL v14 = !v11;
      uint64_t v25 = 24;
      if (!v14) {
        uint64_t v25 = 20;
      }
      uint64_t v20 = v10[v25];
      if (v17) {
        size_t v18 = strlen(v17);
      }
      else {
        size_t v18 = 0;
      }
      break;
    default:
      uint64_t v17 = 0;
      size_t v18 = 0;
      BOOL v14 = !v11;
      uint64_t v19 = 24;
      if (!v14) {
        uint64_t v19 = 20;
      }
      uint64_t v20 = v10[v19];
      break;
  }
  uint64_t v26 = sub_22B1D7FA8((uint64_t)v10, (uint64_t)v17, v18, v10[18], v10[73], v20);
  uint64_t v27 = *(void *)v7;
  if (*(void *)v7 && *(unsigned char *)(v27 + 8) == 18)
  {
    uint64_t v28 = *(unsigned int *)(v27 + 32);
    memset(v63, 0, sizeof(v63));
    unsigned int v29 = v7[16];
    unsigned int v30 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    uint64_t v31 = v9;
    uint64_t v52 = v28;
    if (v29 < 0x15 || (v29 & 0xFE) == 0x5A)
    {
      sub_22B24295C((uint64_t)v30, (llvm::Constant *)v7, (llvm::Constant **)v63);
      if (!v28) {
        return (llvm::Value *)sub_22B215D04((uint64_t)v7);
      }
      uint64_t v38 = v28;
      BOOL v39 = (uint64_t **)v63;
      do
      {
        *BOOL v39 = (uint64_t *)sub_22B241CD8((void *)((char *)a1 + *(void *)(*a1 - 24)), *v39, v9, 1, *(unsigned __int8 *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1640));
        ++v39;
        --v38;
      }
      while (v38);
      uint64_t v28 = v52;
      if (!v52) {
        return (llvm::Value *)sub_22B215D04((uint64_t)v7);
      }
    }
    else
    {
      __int16 v7 = (unsigned __int8 *)sub_22B241CD8(v30, (uint64_t *)v7, v9, 1, *(unsigned __int8 *)(v30[43] + 1640));
      sub_22B24295C((uint64_t)a1 + *(void *)(*a1 - 24), (llvm::Constant *)v7, (llvm::Constant **)v63);
      if (!v28) {
        return (llvm::Value *)sub_22B215D04((uint64_t)v7);
      }
    }
    unint64_t v51 = v7;
    uint64_t v40 = 0;
    do
    {
      uint64_t v41 = *((void *)v63 + v40);
      unsigned int v42 = (char *)a1 + *(void *)(*a1 - 24);
      char v43 = v53 ^ 1;
      if (v31 != *((void *)v42 + 19)) {
        char v43 = 1;
      }
      if ((v43 & 1) == 0)
      {
        uint64_t v44 = v26;
        uint64_t v45 = v31;
        uint64_t v46 = a3;
        uint64_t v47 = *((void *)v42 + 43);
        long long v59 = *(_OWORD *)(v42 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v60, (llvm::IRBuilderBase *)(v42 + 8));
        int v61 = *((_DWORD *)v42 + 26);
        uint64_t v41 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v47 + 128))(v47, &v59, v41);
        if (v60) {
          llvm::MetadataTracking::untrack();
        }
        a3 = v46;
        uint64_t v31 = v45;
        uint64_t v26 = v44;
        uint64_t v28 = v52;
      }
      uint64_t v48 = llvm::ConstantInt::get();
      uint64_t v49 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v58 = 257;
      v62[0] = sub_22B1D6A70(v49, a3, v48, (uint64_t)v57);
      v62[1] = v41;
      uint64_t v50 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
      __int16 v58 = 257;
      sub_22B1D4034(v50, *(void *)(v26 + 24), v26, (uint64_t)v62, 2, (uint64_t)v57);
      ++v40;
    }
    while (v28 != v40);
    __int16 v7 = v51;
    return (llvm::Value *)sub_22B215D04((uint64_t)v7);
  }
  uint64_t v32 = sub_22B241CD8((void *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)v7, v9, 1, *(unsigned __int8 *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1640));
  unsigned int v33 = (char *)a1 + *(void *)(*a1 - 24);
  char v34 = v53 ^ 1;
  if (v9 != *((void *)v33 + 19)) {
    char v34 = 1;
  }
  if ((v34 & 1) == 0)
  {
    uint64_t v35 = *((void *)v33 + 43);
    long long v54 = *(_OWORD *)(v33 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v55, (llvm::IRBuilderBase *)(v33 + 8));
    int v56 = *((_DWORD *)v33 + 26);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v35 + 128))(v35, &v54, v32);
    if (v55) {
      llvm::MetadataTracking::untrack();
    }
  }
  *(void *)&v63[0] = a3;
  *((void *)&v63[0] + 1) = v32;
  uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
  __int16 v58 = 257;
  return sub_22B1D4034(v36, *(void *)(v26 + 24), v26, (uint64_t)v63, 2, (uint64_t)v57);
}

uint64_t sub_22B265F98(void *a1)
{
  uint64_t v2 = llvm::User::operator new((llvm::User *)0x58);
  size_t v6 = "agc.layered_vrr_enabled";
  __int16 v7 = 259;
  uint64_t v3 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v3 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  BOOL v4 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v7 = 257;
  return sub_22B1D4240(v4 + 1, **(llvm::Type ***)(*(void *)v2 + 16), v2, 0, (uint64_t)&v6);
}

uint64_t sub_22B2660B8(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    uint64_t result = *(void *)result + 8;
    do
    {
      BOOL v4 = sub_22B22A75C((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_26DE86EE0;
      *((void *)v4 + 3) = v9;
      BOOL v5 = (char *)v4 + 40;
      uint64_t result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

void *sub_22B26619C(uint64_t a1, uint64_t a2)
{
  sub_22B22A84C(&v7, a2);
  __int16 v7 = &unk_26DE86EE0;
  uint64_t v10 = a1;
  BOOL v11 = 0;
  char v3 = sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  BOOL v4 = v11;
  if ((v3 & 1) == 0)
  {
    BOOL v4 = (void *)sub_22B2664D4(a1, (uint64_t)&v7, (uint64_t)v11);
    sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

uint64_t sub_22B266264(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  BOOL v4 = *(int32x2_t **)(v3 + 24);
  BOOL v14 = v4;
  uint64_t v19 = 0;
  uint64_t result = sub_22B22A7B4((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if (result) {
    size_t v6 = v19;
  }
  else {
    size_t v6 = (void *)(*(void *)v4 + 48 * v4[2].u32[0]);
  }
  __int16 v7 = v14;
  if ((void *)(*(void *)v14 + 48 * v14[2].u32[0]) != v6)
  {
    uint64_t v8 = v6[5];
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v22 = 0;
    uint64_t v19 = &unk_26DE86EE0;
    sub_22B21A918((llvm::ValueHandleBase *)(v6 + 1), v20);
    uint64_t v9 = v21;
    void v6[4] = v22;
    if (v9 != -8192 && v9 != -4096 && v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v10 = (uint64_t)v14;
    sub_22B22A84C(&v15, a2);
    uint64_t v15 = &unk_26DE86EE0;
    uint64_t v18 = v10;
    sub_22B22A75C((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    uint64_t v19 = &unk_26DE86EE0;
    uint64_t v22 = v18;
    uint64_t v23 = v8;
    uint64_t v24 = 0;
    uint64_t result = sub_22B22A7B4(*(void *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      BOOL v11 = (void *)sub_22B2664D4(v10, (uint64_t)&v19, v24);
      uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v11 + 1), v20);
      void v11[4] = v22;
      void v11[5] = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    if (v17 != -8192 && v17 != -4096 && v17) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
  }
  return result;
}

uint64_t sub_22B2664D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22B266588(a1, v6);
  uint64_t v8 = 0;
  sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_22B266588(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  BOOL v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x230F426A0]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    sub_22B2660B8(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_26DE86EE0;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          sub_22B22A7B4(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          sub_22B21A918((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 40) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return sub_22B2660B8(a1);
  }
}

uint64_t sub_22B2667A4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_22B22A75C((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = sub_22B22A7B4(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    BOOL v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_26DE86EE0;
    uint64_t result = (uint64_t)sub_22B21A918((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

uint64_t sub_22B2668D0(void *a1)
{
  uint64_t v2 = llvm::User::operator new((llvm::User *)0x58);
  unint64_t v6 = "agc.amp.mask";
  __int16 v7 = 259;
  uint64_t v3 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v3 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  sub_22B2436D4((uint64_t)a1 + *(void *)(*a1 - 24));
  BOOL v4 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v7 = 257;
  return sub_22B1D4240(v4 + 1, **(llvm::Type ***)(*(void *)v2 + 16), v2, 0, (uint64_t)&v6);
}

unsigned int *sub_22B2669F0(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  if (*a2 >= *result && (v4 < v3 || *((void *)a2 + 1) >= *((void *)result + 1)))
  {
    unsigned int v8 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v8) {
        return result;
      }
      unint64_t v10 = *((void *)a3 + 1);
      unint64_t v9 = *((void *)a2 + 1);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *((void *)a2 + 1);
      unint64_t v10 = *((void *)a3 + 1);
    }
    *a2 = v8;
    *a3 = v3;
    *((void *)a2 + 1) = v10;
    *((void *)a3 + 1) = v9;
    unsigned int v11 = *a2;
    unsigned int v12 = *result;
    if (*a2 >= *result)
    {
      if (v12 < v11) {
        return result;
      }
      unint64_t v14 = *((void *)a2 + 1);
      unint64_t v13 = *((void *)result + 1);
      if (v14 >= v13) {
        return result;
      }
    }
    else
    {
      unint64_t v13 = *((void *)result + 1);
      unint64_t v14 = *((void *)a2 + 1);
    }
    *uint64_t result = v11;
    *a2 = v12;
    *((void *)result + 1) = v14;
    *((void *)a2 + 1) = v13;
    return result;
  }
  unsigned int v5 = *a3;
  if (*a3 < v3)
  {
    unint64_t v6 = *((void *)a3 + 1);
LABEL_6:
    *uint64_t result = v5;
    *a3 = v4;
    uint64_t v7 = *((void *)result + 1);
    *((void *)result + 1) = v6;
    *((void *)a3 + 1) = v7;
    return result;
  }
  if (v3 >= v5)
  {
    unint64_t v6 = *((void *)a3 + 1);
    unint64_t v15 = *((void *)a2 + 1);
    if (v6 < v15) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v15 = *((void *)a2 + 1);
  }
  *uint64_t result = v3;
  *a2 = v4;
  unint64_t v16 = *((void *)result + 1);
  *((void *)result + 1) = v15;
  *((void *)a2 + 1) = v16;
  unsigned int v17 = *a3;
  if (*a3 < v4)
  {
    unint64_t v18 = *((void *)a3 + 1);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((void *)a2 + 1) = v18;
    *((void *)a3 + 1) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    unint64_t v18 = *((void *)a3 + 1);
    if (v18 < v16) {
      goto LABEL_24;
    }
  }
  return result;
}

unsigned int *sub_22B266B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_22B2669F0((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  unsigned int v9 = *(_DWORD *)a4;
  unsigned int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    unint64_t v12 = *(void *)(a4 + 8);
    unint64_t v11 = *(void *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *(void *)(a3 + 8);
    unint64_t v12 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  *(void *)(a3 + 8) = v12;
  *(void *)(a4 + 8) = v11;
  unsigned int v13 = *(_DWORD *)a3;
  unsigned int v14 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    unint64_t v16 = *(void *)(a3 + 8);
    unint64_t v15 = *(void *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    unint64_t v15 = *(void *)(a2 + 8);
    unint64_t v16 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v13;
  *(_DWORD *)a3 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a3 + 8) = v15;
  unsigned int v17 = *(_DWORD *)a2;
  unsigned int v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v19 = *(void *)(a1 + 8);
    unint64_t v20 = *(void *)(a2 + 8);
LABEL_15:
    *(_DWORD *)a1 = v17;
    *(_DWORD *)a2 = v18;
    *(void *)(a1 + 8) = v20;
    *(void *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unint64_t v20 = *(void *)(a2 + 8);
    unint64_t v19 = *(void *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

unsigned int *sub_22B266C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t result = sub_22B266B38(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    unint64_t v14 = *((void *)a5 + 1);
    unint64_t v13 = *(void *)(a4 + 8);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *((void *)a5 + 1);
  }
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  *(void *)(a4 + 8) = v14;
  *((void *)a5 + 1) = v13;
  unsigned int v15 = *(_DWORD *)a4;
  unsigned int v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v18 = *(void *)(a4 + 8);
    unint64_t v17 = *(void *)(a3 + 8);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = *(void *)(a3 + 8);
    unint64_t v18 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v15;
  *(_DWORD *)a4 = v16;
  *(void *)(a3 + 8) = v18;
  *(void *)(a4 + 8) = v17;
  unsigned int v19 = *(_DWORD *)a3;
  unsigned int v20 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v20 < v19) {
      return result;
    }
    unint64_t v22 = *(void *)(a3 + 8);
    unint64_t v21 = *(void *)(a2 + 8);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v22 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v19;
  *(_DWORD *)a3 = v20;
  *(void *)(a2 + 8) = v22;
  *(void *)(a3 + 8) = v21;
  unsigned int v23 = *(_DWORD *)a2;
  unsigned int v24 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = *(void *)(a2 + 8);
LABEL_9:
    *(_DWORD *)a1 = v23;
    *(_DWORD *)a2 = v24;
    *(void *)(a1 + 8) = v26;
    *(void *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unint64_t v26 = *(void *)(a2 + 8);
    unint64_t v25 = *(void *)(a1 + 8);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

BOOL sub_22B266D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = *(void *)(a2 - 8);
LABEL_30:
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unint64_t v9 = *(void *)(a2 - 8);
        unint64_t v8 = *(void *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      sub_22B2669F0((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      sub_22B266B38(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_22B266C3C(a1, a1 + 16, a1 + 32, a1 + 48, (unsigned int *)(a2 - 16));
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      sub_22B2669F0((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unsigned int v14 = *(_DWORD *)v11;
  unsigned int v15 = *(_DWORD *)v10;
  if (*(_DWORD *)v11 >= *(_DWORD *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
  }
  *(_DWORD *)uint64_t v11 = v15;
  *(void *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    unsigned int v21 = *(_DWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      unint64_t v22 = *(void *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(_DWORD *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v22 = *(void *)(v20 + 24);
    }
    v10 -= 16;
    *(_DWORD *)(v20 + 32) = v21;
    *(void *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t sub_22B266FAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 - 24) + a1 + 8;
  uint64_t v3 = *(void *)(*(void *)(a1 + 160) + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (v5) {
    uint64_t v6 = v5 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  sub_22B1FFC54(v2, v6);
  uint64_t v7 = *(void *)(a1 + 160);
  if (*(_WORD *)(v7 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    uint64_t v9 = *(void *)(a1 + 160);
    uint64_t v8 = *(void *)(v7 + 88);
    if (*(_WORD *)(v9 + 18)) {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 160));
    }
    uint64_t v7 = v9;
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 88);
  }
  for (uint64_t i = *(void *)(v7 + 88) + 40 * *(void *)(v7 + 96); v8 != i; v8 += 40)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned int *)(v8 + 32));
    if (*(void *)(v8 + 8)) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12
      && sub_22B1E1ED0(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.vertex_transform_feedback"))
    {
      uint64_t v16 = 0;
      int v15 = 0;
      LODWORD(v14) = 3;
      sub_22B2437A8(0, v11, (unsigned int *)&v14, (_DWORD *)&v16 + 1);
      LODWORD(v14) = 5;
      sub_22B2437A8(0, v11, (unsigned int *)&v14, &v16);
      LODWORD(v14) = 7;
      sub_22B2437A8(0, v11, (unsigned int *)&v14, &v15);
      operator new();
    }
  }
  return 1;
}

uint64_t sub_22B26753C(uint64_t a1)
{
  v13[16] = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_22B23ABA4((void *)a1);
  if (v2)
  {
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v4 = (llvm::Function *)Function;
      v12[0] = v13;
      v12[1] = (void *)0x1000000000;
      uint64_t v5 = *(llvm::Function **)(a1 + 152);
      if (*((unsigned char *)v5 + 18))
      {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 152));
        uint64_t v7 = *(llvm::Function **)(a1 + 152);
        uint64_t v6 = *((void *)v5 + 11);
        if (*((_WORD *)v7 + 9)) {
          llvm::Function::BuildLazyArguments(v7);
        }
        uint64_t v5 = v7;
      }
      else
      {
        uint64_t v6 = *((void *)v5 + 11);
      }
      uint64_t v8 = *((void *)v5 + 11) + 40 * *((void *)v5 + 12);
      while (v6 != v8)
      {
        sub_22B1D6788((uint64_t)v12, v6);
        v6 += 40;
      }
      uint64_t v9 = *((void *)v4 + 1);
      while (v9)
      {
        uint64_t v10 = *(llvm::Instruction **)(v9 + 24);
        uint64_t v9 = *(void *)(v9 + 8);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v10);
      }
      llvm::Function::eraseFromParent(v4);
      if (v12[0] != v13) {
        free(v12[0]);
      }
    }
  }
  return v2;
}

uint64_t sub_22B2676C8()
{
  return 102;
}

uint64_t sub_22B2676D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 3088);
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  if (v1)
  {
    uint64_t v3 = (char *)operator new(8 * v1);
    uint64_t v4 = v3;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v2 + 160);
    do
    {
      *(void *)&v3[v5] = v6;
      v5 += 8;
    }
    while (8 * v1 != v5);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v7 = llvm::FunctionType::get();
  if (v4) {
    operator delete(v4);
  }
  return v7;
}

llvm::Value *sub_22B26777C(llvm::Value *result)
{
  uint64_t v1 = *(void *)((char *)result + *(void *)(*(void *)result - 24) + 344);
  if (*(void *)(v1 + 1264))
  {
    uint64_t v2 = result;
    strlen(*(const char **)(v1 + 1264));
    uint64_t v3 = sub_22B1DCB28();
    uint64_t v4 = (char *)v2 + *(void *)(*(void *)v2 - 24);
    __int16 v6 = 257;
    return sub_22B1D4034((uint64_t)(v4 + 8), **(void **)(*(void *)v3 + 16), v3, 0, 0, (uint64_t)v5);
  }
  return result;
}

uint64_t sub_22B267838(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v87 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(unsigned int *)(a1 + 3256);
  if (!*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1654))
  {
    if (*(_DWORD *)(a1 + 3256))
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      unint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        uint64_t v20 = v1 + 8 * v19;
        unsigned int v21 = *(unsigned int **)(v20 + 3192);
        unsigned int v22 = *v21;
        if (*v21)
        {
          unsigned int v23 = 0;
          unsigned int v74 = (unsigned int **)(v20 + 3192);
          do
          {
            uint64_t v24 = *((void *)v21 + 1);
            int v25 = *(_DWORD *)(v24 + 4 * v23);
            if (v23 + 1 >= v22)
            {
              int v27 = 1;
            }
            else
            {
              int v26 = v22 - v23;
              int v27 = 1;
              while (v25 + v27 == *(_DWORD *)(v24 + 4 * (v23 + v27)))
              {
                if (v26 == ++v27)
                {
                  int v27 = v26;
                  break;
                }
              }
            }
            uint64_t v28 = v1 + *(void *)(*(void *)v1 - 24);
            unsigned int v29 = (uint64_t *)(v28 + 704);
            *(unsigned char *)(v28 + 774) = 1;
            int v30 = *(_DWORD *)(v28 + 736) - *(_DWORD *)(v28 + 752) + *(_DWORD *)(v28 + 744);
            sub_22B1ED0D4((uint64_t *)(v28 + 704), 4, v27);
            sub_22B1ED0D4(v29, 6, v25);
            sub_22B1ED0D4(v29, 8, v19);
            sub_22B1ED0D4(v29, 10, v23);
            uint64_t v31 = sub_22B1ECAA8((uint64_t)v29, v30);
            int v38 = v31;
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v39 = (v17 - v16) >> 2;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62) {
LABEL_84:
              }
                abort();
              if ((uint64_t)(v18 - (void)v16) >> 1 > v40) {
                unint64_t v40 = (uint64_t)(v18 - (void)v16) >> 1;
              }
              if (v18 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              if (v41)
              {
                if (v41 >> 62) {
                  sub_22B1E33E4();
                }
                uint64_t v31 = (uint64_t)operator new(4 * v41);
              }
              else
              {
                uint64_t v31 = 0;
              }
              unsigned int v42 = (char *)(v31 + 4 * v39);
              *(_DWORD *)unsigned int v42 = v38;
              char v43 = v42 + 4;
              while (v17 != v16)
              {
                int v44 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v42 - 1) = v44;
                v42 -= 4;
              }
              unint64_t v18 = v31 + 4 * v41;
              if (v16) {
                operator delete(v16);
              }
              uint64_t v16 = v42;
              unint64_t v17 = v43;
              uint64_t v1 = a1;
            }
            else
            {
              *(_DWORD *)unint64_t v17 = v31;
              v17 += 4;
            }
            sub_22B1E69D0(v31, "TF entry: (buf %d, slot %d, size %d) =  uvs(%d)", v32, v33, v34, v35, v36, v37, v19);
            v23 += v27;
            unsigned int v21 = *v74;
            unsigned int v22 = **v74;
          }
          while (v22 > v23);
          unint64_t v2 = *(unsigned int *)(v1 + 3256);
        }
        ++v19;
      }
      while (v19 < v2);
      goto LABEL_56;
    }
LABEL_55:
    uint64_t v16 = 0;
    unint64_t v17 = 0;
LABEL_56:
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    goto LABEL_57;
  }
  if (!*(_DWORD *)(a1 + 3256)) {
    goto LABEL_55;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = a1;
  unint64_t v7 = 0;
  do
  {
    int v8 = **(_DWORD **)(v6 + 8 * v7 + 3192);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v9 = (v4 - v3) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        goto LABEL_84;
      }
      if ((uint64_t)(v5 - (void)v3) >> 1 > v10) {
        unint64_t v10 = (uint64_t)(v5 - (void)v3) >> 1;
      }
      if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        unint64_t v11 = (unint64_t)sub_22B1EDE8C(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      int v13 = (char *)(v11 + 4 * v9);
      *(_DWORD *)int v13 = v8;
      uint64_t v14 = v13 + 4;
      while (v4 != v3)
      {
        int v15 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v13 - 1) = v15;
        v13 -= 4;
      }
      unint64_t v5 = v11 + 4 * v12;
      if (v3) {
        operator delete(v3);
      }
      uint64_t v3 = v13;
      uint64_t v4 = v14;
    }
    else
    {
      *(_DWORD *)uint64_t v4 = v8;
      v4 += 4;
    }
    ++v7;
    uint64_t v6 = a1;
  }
  while (v7 < *(unsigned int *)(a1 + 3256));
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  uint64_t v1 = a1;
LABEL_57:
  char v45 = *(unsigned char *)(v1 + 2992);
  std::string __p = 0;
  unint64_t v77 = 0;
  uint64_t v78 = 0;
  v79[0] = (char *)v80;
  v79[1] = (char *)0x800000000;
  v80[64] = 0x1FFFFFFFFLL;
  char v81 = v45;
  v85[7] = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  memset(v85, 0, 26);
  unsigned __int8 v86 = 1;
  if (*(_DWORD *)(v1 + 2464))
  {
    unint64_t v46 = *(void *)(v1 + 2456);
    do
    {
      sub_22B268620((uint64_t)&__p, v46);
      v46 += 64;
    }
    while (v46 < *(void *)(v1 + 2456) + ((unint64_t)*(unsigned int *)(v1 + 2464) << 6));
  }
  sub_22B268AB4((uint64_t)&__p, *(void *)(v1 + *(void *)(*(void *)v1 - 24) + 344));
  sub_22B268E24((uint64_t)&__p, v1 + *(void *)(*(void *)v1 - 24) + 704);
  if (v77 == __p) {
    uint64_t v47 = &unk_2683E92F4;
  }
  else {
    uint64_t v47 = __p;
  }
  int v72 = sub_22B1F25D8(v1 + *(void *)(*(void *)v1 - 24) + 704, (uint64_t)v47, (v77 - (unsigned char *)__p) >> 2);
  uint64_t v48 = v1 + *(void *)(*(void *)v1 - 24);
  uint64_t v49 = v48 + 704;
  *(unsigned char *)(v48 + 774) = 1;
  sub_22B1ED19C(v48 + 704, v17 - v16, 4uLL);
  sub_22B1ED19C(v48 + 704, v17 - v16, 4uLL);
  uint64_t v50 = v17 - v16;
  if (v17 == v16) {
    unint64_t v51 = (char *)&unk_22B2721FD;
  }
  else {
    unint64_t v51 = v16;
  }
  if (v17 != v16)
  {
    uint64_t v52 = v50 >> 2;
    char v53 = v51 - 4;
    do
    {
      uint64_t v54 = v52 - 1;
      int v55 = *(_DWORD *)&v53[4 * v52];
      sub_22B1ECFA8(v49, 4uLL);
      sub_22B1ED138(v49, *(_DWORD *)(v48 + 736) - *(_DWORD *)(v48 + 752) + *(_DWORD *)(v48 + 744) - v55 + 4);
      uint64_t v52 = v54;
    }
    while (v54);
  }
  *(unsigned char *)(v48 + 774) = 0;
  int v56 = sub_22B1ED138(v49, (unint64_t)v50 >> 2);
  if (v4 == v3) {
    unsigned int v57 = (char *)&unk_2683E9370;
  }
  else {
    unsigned int v57 = v3;
  }
  int v71 = sub_22B1EDE08(a1 + *(void *)(*(void *)a1 - 24) + 704, v57, (v4 - v3) >> 2);
  uint64_t v58 = a1 + *(void *)(*(void *)a1 - 24);
  long long v59 = (uint64_t *)(v58 + 704);
  *(unsigned char *)(v58 + 774) = 1;
  int v60 = *(_DWORD *)(v58 + 736) - *(_DWORD *)(v58 + 752) + *(_DWORD *)(v58 + 744);
  sub_22B1ED0D4((uint64_t *)(v58 + 704), 4, SDWORD1(v84));
  sub_22B1ED0D4(v59, 6, SDWORD2(v84));
  sub_22B1ED0D4(v59, 8, *(_DWORD *)(a1 + 3092) + *(_DWORD *)(a1 + 3096) + HIDWORD(v84));
  sub_22B1ED0D4(v59, 10, SDWORD2(v83));
  sub_22B1ED0D4(v59, 12, SHIDWORD(v83));
  sub_22B1ED0D4(v59, 14, v84);
  int v61 = sub_22B1ECAA8((uint64_t)v59, v60);
  uint64_t v62 = a1 + *(void *)(*(void *)a1 - 24);
  unsigned int v63 = (uint64_t *)(v62 + 704);
  *(unsigned char *)(v62 + 774) = 1;
  int v64 = *(_DWORD *)(v62 + 736) - *(_DWORD *)(v62 + 752) + *(_DWORD *)(v62 + 744);
  sub_22B1ED0D4((uint64_t *)(v62 + 704), 4, v85[3]);
  sub_22B1ED0D4(v63, 6, v85[4]);
  sub_22B1ED0D4(v63, 8, v85[5]);
  sub_22B1ED0D4(v63, 10, v85[0]);
  sub_22B1ED0D4(v63, 12, v85[1]);
  sub_22B1ED0D4(v63, 14, v85[2]);
  LODWORD(v63) = sub_22B1ECAA8((uint64_t)v63, v64);
  int v65 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376))(a1);
  uint64_t v66 = a1 + *(void *)(*(void *)a1 - 24);
  *(unsigned char *)(v66 + 774) = 1;
  int v67 = *(_DWORD *)(v66 + 736) - *(_DWORD *)(v66 + 752) + *(_DWORD *)(v66 + 744);
  sub_22B1F26A0((uint64_t *)(v66 + 704), v65);
  sub_22B1EF4B8((uint64_t *)(v66 + 704), 6, v86);
  sub_22B1EF4B8((uint64_t *)(v66 + 704), 8, *(unsigned __int8 *)(a1 + 3100));
  sub_22B1ED0D4((uint64_t *)(v66 + 704), 10, *(_DWORD *)(a1 + 3104));
  sub_22B1ED0D4((uint64_t *)(v66 + 704), 12, *(_DWORD *)(a1 + 3108));
  sub_22B1ED0D4((uint64_t *)(v66 + 704), 14, *(_DWORD *)(a1 + 3112));
  sub_22B1EC980((uint64_t *)(v66 + 704), 16, v61);
  sub_22B1EC980((uint64_t *)(v66 + 704), 18, (int)v63);
  sub_22B1EF4B8((uint64_t *)(v66 + 704), 20, LOBYTE(v85[6]));
  sub_22B1EC980((uint64_t *)(v66 + 704), 22, v72);
  if (v56)
  {
    sub_22B1ECFA8(v66 + 704, 4uLL);
    sub_22B1ED0D4((uint64_t *)(v66 + 704), 24, *(_DWORD *)(v66 + 736) - *(_DWORD *)(v66 + 752) + *(_DWORD *)(v66 + 744) - v56 + 4);
  }
  int v68 = *(_DWORD *)(a1 + 3256);
  if (v68)
  {
    sub_22B1ED0D4((uint64_t *)(v66 + 704), 26, v68);
    if (*(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1654)) {
      sub_22B1EC980((uint64_t *)(v66 + 704), 28, v71);
    }
  }
  uint64_t v69 = sub_22B1ECAA8(v66 + 704, v67);
  unint64_t v75 = (void **)&v82;
  sub_22B1F2780(&v75);
  sub_22B1F280C(v79);
  if (__p)
  {
    unint64_t v77 = __p;
    operator delete(__p);
  }
  if (v3) {
    operator delete(v3);
  }
  if (v16) {
    operator delete(v16);
  }
  return v69;
}

uint64_t sub_22B2680E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v8 = sub_22B26AFAC((uint64_t *)a1, a2 + 1, a3, "air.vertex", a4, a5);
  uint64_t v9 = *a2;
  uint64_t *v8 = *a2;
  *(void *)(a1 + *(void *)(v9 - 24)) = a2[5];
  LOBYTE(v9) = *(unsigned char *)(*(void *)(a1 + *(void *)(*(void *)a1 - 24) + 344) + 1686);
  *(void *)(a1 + 2432) = 0;
  *(void *)(a1 + 2448) = 0;
  *(void *)(a1 + 2440) = 0;
  *(void *)(a1 + 2456) = a1 + 2472;
  *(void *)(a1 + 2464) = 0x800000000;
  *(void *)(a1 + 2984) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 2992) = v9;
  *(_DWORD *)(a1 + 3076) = 0;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3058) = 0u;
  *(unsigned char *)(a1 + 3080) = 1;
  *(void *)(a1 + 3088) = 0;
  *(_DWORD *)(a1 + 3096) = 0;
  *(_WORD *)(a1 + 3101) = 0;
  *(unsigned char *)(a1 + 3124) = 0;
  *(void *)(a1 + 3128) = llvm::ConstantInt::get();
  *(void *)(a1 + 3136) = llvm::ConstantInt::get();
  *(_WORD *)(a1 + 3144) = 0;
  *(unsigned char *)(a1 + 3146) = 0;
  *(_DWORD *)(a1 + 3148) = 1;
  *(_DWORD *)(a1 + 3156) = 0;
  *(unsigned char *)(a1 + 3160) = 0;
  *(_OWORD *)(a1 + 3244) = 0u;
  *(_OWORD *)(a1 + 3232) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_DWORD *)(a1 + 3260) = -1;
  *(void *)(a1 + 3264) = 0;
  *(void *)(a1 + 3272) = llvm::ConstantInt::get();
  *(void *)(a1 + 3280) = llvm::ConstantInt::get();
  uint64_t v10 = a3 + 168;
  int v11 = *(char *)(a3 + 191);
  if (v11 < 0)
  {
    if (*(void *)(a3 + 176) != 20)
    {
LABEL_15:
      BOOL v17 = 0;
      goto LABEL_16;
    }
    uint64_t v10 = *(void *)v10;
  }
  else if (v11 != 20)
  {
    goto LABEL_15;
  }
  uint64_t v12 = *(void *)v10;
  uint64_t v13 = *(void *)(v10 + 8);
  int v14 = *(_DWORD *)(v10 + 16);
  BOOL v17 = v12 == 0x535F786574726556 && v13 == 0x6F72505F65746174 && v14 == 1835102823;
LABEL_16:
  *(unsigned char *)(a1 + 3124) = v17;
  return a1;
}

uint64_t sub_22B2683B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[5];
  for (uint64_t i = 3192; i != 3224; i += 8)
  {
    uint64_t v6 = *(void *)(a1 + i);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        MEMORY[0x230F435E0](v7, 0x1000C8052888210);
      }
      MEMORY[0x230F43600](v6, 0x1010C4082113244);
    }
  }
  uint64_t v8 = *(void *)(a1 + 3168);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 3176);
    uint64_t v10 = *(void **)(a1 + 3168);
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(void *)(v9 - 8);
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 24));
        }
        v9 -= 32;
      }
      while (v9 != v8);
      uint64_t v10 = *(void **)(a1 + 3168);
    }
    *(void *)(a1 + 3176) = v8;
    operator delete(v10);
  }
  int v15 = (void **)(a1 + 3000);
  sub_22B1F2780(&v15);
  sub_22B1F280C((char **)(a1 + 2456));
  uint64_t v13 = *(void **)(a1 + 2432);
  if (v13)
  {
    *(void *)(a1 + 2440) = v13;
    operator delete(v13);
  }
  return sub_22B23C03C(a1, a2 + 2);
}

llvm::Value *sub_22B26854C(void *a1)
{
  uint64_t v2 = sub_22B1DB218((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)"agc.read_vi.f32", 15, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 160), *(void *)((char *)a1 + *(void *)(*a1 - 24) + 192));
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = llvm::ConstantInt::get();
  v5[16] = 257;
  return sub_22B1D4034((uint64_t)(v3 + 8), *(void *)(v2 + 24), v2, (uint64_t)&v6, 1, (uint64_t)v5);
}

uint64_t sub_22B268604(uint64_t a1)
{
  return 1;
}

void sub_22B268620(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = v6;
  unint64_t v7 = *(unsigned int *)(v4 + 8);
  if (v7)
  {
    uint64_t v79 = v4;
    int v8 = *(_DWORD *)(v3 + 556);
    int v9 = *(unsigned __int8 *)(v3 + 641);
    uint64_t v10 = (_OWORD *)(a2 + 24);
    uint64_t v11 = v5;
    while (1)
    {
      unint64_t v12 = v7 >> 1;
      uint64_t v13 = v11 + (v7 >> 1 << 6);
      if (v9)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        uint64_t v83 = 0;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v81 = 0;
      }
      else
      {
        int v14 = (void **)(v13 + 24);
        if (*(char *)(v13 + 47) < 0)
        {
          sub_22B1DC004(__dst, *v14, *(void *)(v11 + (v12 << 6) + 32));
        }
        else
        {
          long long v15 = *(_OWORD *)v14;
          uint64_t v83 = *(void *)(v13 + 40);
          *(_OWORD *)std::string __dst = v15;
        }
        if (*(char *)(a2 + 47) < 0)
        {
          sub_22B1DC004(__p, *(void **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)std::string __p = *v10;
          uint64_t v81 = *(void *)(a2 + 40);
        }
      }
      uint64_t v16 = v11 + (v12 << 6);
      if (!v8) {
        break;
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + 56);
      unsigned int v18 = *(unsigned __int8 *)(a2 + 56);
      if (v17 < v18) {
        goto LABEL_38;
      }
      if (v18 < v17) {
        goto LABEL_40;
      }
      int v19 = *(_DWORD *)(v16 + 8);
      int v20 = *(_DWORD *)(a2 + 8);
      if (v19 < v20) {
        goto LABEL_38;
      }
      if (v20 < v19) {
        goto LABEL_40;
      }
      unsigned int v21 = *(unsigned __int8 *)(v16 + 57);
      unsigned int v22 = *(unsigned __int8 *)(a2 + 57);
      if (v21 < v22) {
        goto LABEL_38;
      }
      if (v22 < v21) {
        goto LABEL_40;
      }
      uint64_t v75 = v3;
      if (v83 >= 0) {
        unsigned int v23 = (void *)HIBYTE(v83);
      }
      else {
        unsigned int v23 = __dst[1];
      }
      if (v83 >= 0) {
        uint64_t v24 = __dst;
      }
      else {
        uint64_t v24 = (void **)__dst[0];
      }
      if (v81 >= 0) {
        int v25 = (void *)HIBYTE(v81);
      }
      else {
        int v25 = __p[1];
      }
      if (v81 >= 0) {
        int v26 = __p;
      }
      else {
        int v26 = (void **)__p[0];
      }
      unint64_t v77 = v23;
      if (v25 >= v23) {
        size_t v27 = (size_t)v23;
      }
      else {
        size_t v27 = (size_t)v25;
      }
      int v71 = v26;
      unsigned int v73 = v24;
      __uint64_t n = v27;
      int v28 = memcmp(v24, v26, v27);
      BOOL v29 = v77 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (!v29)
      {
        int v46 = memcmp(v71, v73, __n);
        BOOL v47 = v25 < v77;
        if (v46) {
          BOOL v47 = v46 < 0;
        }
        uint64_t v3 = v75;
        if (!v47) {
          goto LABEL_81;
        }
LABEL_40:
        BOOL v30 = 0;
        goto LABEL_41;
      }
      BOOL v30 = 1;
      uint64_t v3 = v75;
LABEL_41:
      if (SHIBYTE(v81) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v83) < 0) {
        operator delete(__dst[0]);
      }
      if (v30) {
        v7 += ~v12;
      }
      else {
        v7 >>= 1;
      }
      if (v30) {
        uint64_t v11 = v13 + 64;
      }
      if (!v7)
      {
        uint64_t v5 = *(void *)(v3 + 24);
        uint64_t v48 = *(unsigned int *)(v3 + 32);
        uint64_t v4 = v79;
        goto LABEL_83;
      }
    }
    unsigned int v31 = *(unsigned __int8 *)(v16 + 57);
    unsigned int v32 = *(unsigned __int8 *)(a2 + 57);
    if (v31 >= v32)
    {
      if (v32 < v31) {
        goto LABEL_40;
      }
      unsigned int v33 = *(unsigned __int8 *)(v16 + 56);
      unsigned int v34 = *(unsigned __int8 *)(a2 + 56);
      if (v33 >= v34)
      {
        if (v34 < v33) {
          goto LABEL_40;
        }
        int v35 = *(_DWORD *)(v16 + 8);
        int v36 = *(_DWORD *)(a2 + 8);
        if (v35 >= v36)
        {
          if (v36 < v35) {
            goto LABEL_40;
          }
          if (v83 >= 0) {
            uint64_t v37 = (void *)HIBYTE(v83);
          }
          else {
            uint64_t v37 = __dst[1];
          }
          if (v83 >= 0) {
            int v38 = __dst;
          }
          else {
            int v38 = (void **)__dst[0];
          }
          if (v81 >= 0) {
            uint64_t v39 = (void *)HIBYTE(v81);
          }
          else {
            uint64_t v39 = __p[1];
          }
          if (v81 >= 0) {
            unint64_t v40 = __p;
          }
          else {
            unint64_t v40 = (void **)__p[0];
          }
          unint64_t v76 = v39;
          uint64_t v78 = v37;
          if (v39 >= v37) {
            size_t v41 = (size_t)v37;
          }
          else {
            size_t v41 = (size_t)v39;
          }
          int v72 = v40;
          unsigned int v74 = v38;
          size_t __na = v41;
          int v42 = memcmp(v38, v40, v41);
          BOOL v43 = v78 < v76;
          if (v42) {
            BOOL v43 = v42 < 0;
          }
          if (!v43)
          {
            int v44 = memcmp(v72, v74, __na);
            BOOL v45 = v76 < v78;
            if (v44) {
              BOOL v45 = v44 < 0;
            }
            if (!v45)
            {
LABEL_81:
              BOOL v30 = *(_DWORD *)(v16 + 16) < *(_DWORD *)(a2 + 16);
              goto LABEL_41;
            }
            goto LABEL_40;
          }
        }
      }
    }
LABEL_38:
    BOOL v30 = 1;
    goto LABEL_41;
  }
  uint64_t v48 = 0;
  uint64_t v11 = v5 + (v7 << 6);
LABEL_83:
  if (v5 + (v48 << 6) == v11)
  {
    sub_22B1F5AE0(v4, a2);
  }
  else
  {
    uint64_t v49 = v11 - v5;
    uint64_t v50 = (v11 - v5) >> 6;
    unint64_t v51 = sub_22B1F5B70(v4, a2);
    uint64_t v52 = *(void *)(v3 + 24);
    unint64_t v53 = v52 + v49;
    uint64_t v54 = v52 + ((unint64_t)*(unsigned int *)(v3 + 32) << 6);
    *(_DWORD *)(v54 + 16) = *(_DWORD *)(v54 - 48);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)(v54 - 64);
    *(_OWORD *)(v54 + 24) = *(_OWORD *)(v54 - 40);
    *(void *)(v54 + 40) = *(void *)(v54 - 24);
    *(void *)(v54 - 40) = 0;
    *(void *)(v54 - 32) = 0;
    *(void *)(v54 - 24) = 0;
    *(_OWORD *)(v54 + 48) = *(_OWORD *)(v54 - 16);
    uint64_t v55 = *(void *)(v3 + 24);
    uint64_t v56 = *(unsigned int *)(v3 + 32);
    uint64_t v57 = v55 + (v56 << 6) - 64;
    if (v57 != v53)
    {
      do
      {
        *(_OWORD *)uint64_t v57 = *(_OWORD *)(v57 - 64);
        *(_DWORD *)(v57 + 16) = *(_DWORD *)(v57 - 48);
        uint64_t v58 = (void **)(v57 + 24);
        if (*(char *)(v57 + 47) < 0) {
          operator delete(*v58);
        }
        long long v59 = *(_OWORD *)(v57 - 40);
        uint64_t v60 = *(void *)(v57 - 24);
        *(unsigned char *)(v57 - 17) = 0;
        *(unsigned char *)(v57 - 40) = 0;
        *(_OWORD *)(v57 + 48) = *(_OWORD *)(v57 - 16);
        *(_OWORD *)uint64_t v58 = v59;
        *(void *)(v57 + 40) = v60;
        v57 -= 64;
      }
      while (v57 != v53);
      LODWORD(v56) = *(_DWORD *)(v3 + 32);
      uint64_t v55 = *(void *)(v3 + 24);
    }
    uint64_t v61 = (v56 + 1);
    *(_DWORD *)(v3 + 32) = v61;
    unint64_t v62 = v55 + (v61 << 6);
    uint64_t v64 = v51 >= v53 && v51 < v62;
    unint64_t v65 = v51 + (v64 << 6);
    long long v66 = *(_OWORD *)v65;
    *(_DWORD *)(v53 + 16) = *(_DWORD *)(v65 + 16);
    *(_OWORD *)unint64_t v53 = v66;
    uint64_t v67 = v52 + (v50 << 6);
    std::string::operator=((std::string *)(v67 + 24), (const std::string *)(v65 + 24));
    *(_OWORD *)(v67 + 48) = *(_OWORD *)(v65 + 48);
  }
  int v68 = *(_DWORD *)(v3 + 552);
  if (v68 <= *(_DWORD *)(a2 + 16)) {
    int v68 = *(_DWORD *)(a2 + 16);
  }
  *(_DWORD *)(v3 + 552) = v68;
  *(_DWORD *)(v3 + 644) += *(_DWORD *)a2;
}

void sub_22B268AB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(_DWORD *)(a1 + 552) + 7);
  uint64_t v5 = (int64x2_t *)(a1 + 568);
  unint64_t v6 = *(void *)(a1 + 576);
  uint64_t v7 = *(void *)(a1 + 568);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v7) >> 3);
  unint64_t v9 = v4 - v8;
  if (v4 <= v8)
  {
    if (v4 < v8)
    {
      uint64_t v21 = v7 + 40 * v4;
      while (v6 != v21)
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 40;
      }
      *(void *)(a1 + 576) = v21;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 584);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v6) >> 3) >= v9)
    {
      bzero(*(void **)(a1 + 576), 40 * ((40 * v9 - 40) / 0x28) + 40);
      *(void *)(a1 + 576) = v6 + 40 * ((40 * v9 - 40) / 0x28) + 40;
    }
    else
    {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 3);
      unint64_t v12 = 0x999999999999999ALL * ((v10 - v7) >> 3);
      if (v12 > v4) {
        unint64_t v4 = v12;
      }
      if (v11 >= 0x333333333333333) {
        unint64_t v4 = 0x666666666666666;
      }
      if (v4 > 0x666666666666666) {
        sub_22B1E33E4();
      }
      uint64_t v13 = 5 * v4;
      int v14 = (char *)operator new(40 * v4);
      long long v15 = &v14[8 * ((uint64_t)(v6 - v7) >> 3)];
      uint64_t v16 = &v14[8 * v13];
      size_t v17 = 40 * ((40 * v9 - 40) / 0x28) + 40;
      bzero(v15, v17);
      unsigned int v18 = &v15[v17];
      if (v6 == v7)
      {
        int64x2_t v20 = vdupq_n_s64(v6);
      }
      else
      {
        do
        {
          *(_OWORD *)(v15 - 40) = *(_OWORD *)(v6 - 40);
          long long v19 = *(_OWORD *)(v6 - 24);
          *((void *)v15 - 1) = *(void *)(v6 - 8);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 40;
          *(void *)(v6 - 16) = 0;
          *(void *)(v6 - 8) = 0;
          *(void *)(v6 - 24) = 0;
          v6 -= 40;
        }
        while (v6 != v7);
        int64x2_t v20 = *v5;
      }
      *(void *)(a1 + 568) = v15;
      *(void *)(a1 + 576) = v18;
      *(void *)(a1 + 584) = v16;
      unsigned int v23 = (void **)v20.i64[1];
      unsigned int v22 = (void **)v20.i64[0];
      while (v23 != v22)
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 5;
      }
      if (v22) {
        operator delete(v22);
      }
    }
  }
  uint64_t v24 = *(unsigned int *)(a1 + 32);
  if (v24)
  {
    int v25 = 0;
    int v26 = 0;
    int v27 = *(unsigned __int8 *)(a2 + 1657);
    int v28 = *(const std::string **)(a1 + 24);
    BOOL v29 = (int *)((char *)v28 + 64 * v24);
    int v30 = 4;
    do
    {
      int data = (int)v28->__r_.__value_.__l.__data_;
      unsigned int v32 = LODWORD(v28->__r_.__value_.__r.__words[2]) + 6;
      LODWORD(v28[2].__r_.__value_.__l.__data_) = v30;
      int v33 = v28[2].__r_.__value_.__s.__data_[8];
      uint64_t v34 = v5->i64[0];
      uint64_t v35 = v5->i64[0] + 40 * v32;
      *(unsigned char *)uint64_t v35 = v33;
      *(_DWORD *)(v35 + 4) = v25 + 2 * (v26 + v27);
      *(_DWORD *)(v35 + 8) = 2 * (v26 + v27 + v25);
      v30 += data;
      uint64_t v36 = LODWORD(v28->__r_.__value_.__r.__words[1]);
      uint64_t v37 = (int *)(a1 + 4 * v36);
      int v38 = v37 + 148;
      if (v28[2].__r_.__value_.__s.__data_[9]) {
        int v38 = v37 + 154;
      }
      uint64_t v39 = v37 + 151;
      unint64_t v40 = v37 + 157;
      if (v28[2].__r_.__value_.__s.__data_[9]) {
        size_t v41 = v40;
      }
      else {
        size_t v41 = v39;
      }
      BOOL v42 = v33 == 0;
      if (v33) {
        BOOL v43 = v41;
      }
      else {
        BOOL v43 = v38;
      }
      if (v42) {
        v26 += data;
      }
      else {
        v25 += data;
      }
      HIDWORD(v28[2].__r_.__value_.__r.__words[0]) = *v43;
      *v43 += data;
      uint64_t v44 = v34 + 40 * v32;
      *(_DWORD *)(v44 + 12) = v36;
      std::string::operator=((std::string *)(v44 + 16), v28 + 1);
      int v28 = (const std::string *)((char *)v28 + 64);
    }
    while (v28 != (const std::string *)v29);
  }
}

uint64_t sub_22B268D90(unsigned char *a1, char a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  do
  {
    unsigned int v5 = *(_DWORD *)&a1[v3 + 604];
    if (a1[560]) {
      unsigned int v5 = (v5 + 1) >> 1;
    }
    v4 += *(_DWORD *)&a1[v3 + 592] + v5;
    v3 += 4;
  }
  while (v3 != 12);
  unsigned int v6 = a3 + v4 + a1[648] + 1;
  int v7 = v6 & 3;
  if (v6 < 0x11 || v7 == 0)
  {
    uint64_t v9 = 0;
    BOOL v10 = v6 > 0xF;
  }
  else
  {
    uint64_t v9 = (4 - v7);
    BOOL v10 = 1;
  }
  a1[640] = v10;
  return v9;
}

void sub_22B268E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = -858993459 * ((*(void *)(a1 + 576) - *(void *)(a1 + 568)) >> 3);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v6 = *(void *)(a1 + 568) + 40 * i;
      uint64_t v9 = *(void **)(v6 + 16);
      uint64_t v7 = v6 + 16;
      unint64_t v8 = v9;
      int v10 = *(char *)(v7 + 23);
      if (v10 >= 0) {
        unint64_t v11 = (void *)v7;
      }
      else {
        unint64_t v11 = v8;
      }
      if (v10 >= 0) {
        size_t v12 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        size_t v12 = *(void *)(v7 + 8);
      }
      int v13 = sub_22B1EC908(a2, v11, v12);
      *(unsigned char *)(a2 + 70) = 1;
      int v14 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
      sub_22B1EF4B8((uint64_t *)a2, 4, *(unsigned __int8 *)(*(void *)(a1 + 568) + 40 * i));
      sub_22B1ED0D4((uint64_t *)a2, 6, *(_DWORD *)(*(void *)(a1 + 568) + 40 * i + 4));
      sub_22B1ED0D4((uint64_t *)a2, 8, *(_DWORD *)(*(void *)(a1 + 568) + 40 * i + 8));
      sub_22B1EF4B8((uint64_t *)a2, 10, *(char *)(*(void *)(a1 + 568) + 40 * i + 12));
      sub_22B1EC980((uint64_t *)a2, 12, v13);
      int v15 = sub_22B1ECAA8(a2, v14);
      int v16 = v15;
      unsigned int v18 = *(_DWORD **)(a1 + 8);
      unint64_t v17 = *(void *)(a1 + 16);
      if ((unint64_t)v18 >= v17)
      {
        int64x2_t v20 = *(_DWORD **)a1;
        uint64_t v21 = ((uint64_t)v18 - *(void *)a1) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          abort();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)sub_22B1EDE8C(v24);
          int64x2_t v20 = *(_DWORD **)a1;
          unsigned int v18 = *(_DWORD **)(a1 + 8);
        }
        else
        {
          uint64_t v25 = 0;
        }
        int v26 = (_DWORD *)(v24 + 4 * v21);
        *int v26 = v16;
        long long v19 = v26 + 1;
        while (v18 != v20)
        {
          int v27 = *--v18;
          *--int v26 = v27;
        }
        *(void *)a1 = v26;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v24 + 4 * v25;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unsigned int v18 = v15;
        long long v19 = v18 + 1;
      }
      *(void *)(a1 + 8) = v19;
    }
  }
}

void sub_22B269010(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v332 = *MEMORY[0x263EF8340];
  unint64_t v8 = &v331;
  while (2)
  {
    unint64_t v9 = a2;
    uint64_t v302 = (long long *)(a2 - 64);
    int v10 = (long long *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = v9 - (void)v10;
          uint64_t v12 = (uint64_t)(v9 - (void)v10) >> 6;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                int v135 = *(char *)(a1 + 47);
                int v136 = *(char *)(a2 - 17);
                if (v136 >= 0) {
                  size_t v137 = *(unsigned __int8 *)(a2 - 17);
                }
                else {
                  size_t v137 = *(void *)(a2 - 32);
                }
                if (v136 >= 0) {
                  uint64_t v138 = (const void *)(a2 - 40);
                }
                else {
                  uint64_t v138 = *(const void **)(a2 - 40);
                }
                if (v135 >= 0) {
                  size_t v139 = *(unsigned __int8 *)(a1 + 47);
                }
                else {
                  size_t v139 = *(void *)(a1 + 32);
                }
                if (v135 >= 0) {
                  uint64_t v140 = (const void *)(a1 + 24);
                }
                else {
                  uint64_t v140 = *(const void **)(a1 + 24);
                }
                if (v139 >= v137) {
                  size_t v141 = v137;
                }
                else {
                  size_t v141 = v139;
                }
                int v142 = memcmp(v138, v140, v141);
                BOOL v143 = v137 < v139;
                if (v142) {
                  BOOL v143 = v142 < 0;
                }
                if (v143)
                {
                  sub_22B26A54C((long long *)a1, v302);
                }
                break;
              case 3:
                sub_22B26A650(a1, a1 + 64, (uint64_t)v302);
                break;
              case 4:
                sub_22B26A854(a1, a1 + 64, a1 + 128, (uint64_t)v302);
                break;
              case 5:
                sub_22B26AA0C(a1, a1 + 64, a1 + 128, a1 + 192, (uint64_t)v302);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1535)
          {
            if (a4)
            {
              if (a1 != v9)
              {
                unint64_t v144 = a1 + 64;
                if (a1 + 64 != a2)
                {
                  uint64_t v145 = 0;
                  unint64_t v146 = a1;
                  do
                  {
                    unint64_t v147 = v144;
                    uint64_t v148 = (long long *)(v146 + 88);
                    int v149 = *(char *)(v146 + 47);
                    int v150 = *(char *)(v146 + 111);
                    if (v150 >= 0) {
                      size_t v151 = *(unsigned __int8 *)(v146 + 111);
                    }
                    else {
                      size_t v151 = *(void *)(v146 + 96);
                    }
                    if (v150 >= 0) {
                      uint64_t v152 = (const void *)(v146 + 88);
                    }
                    else {
                      uint64_t v152 = *(const void **)(v146 + 88);
                    }
                    if (v149 >= 0) {
                      size_t v153 = *(unsigned __int8 *)(v146 + 47);
                    }
                    else {
                      size_t v153 = *(void *)(v146 + 32);
                    }
                    if (v149 >= 0) {
                      int v154 = (const void *)(v146 + 24);
                    }
                    else {
                      int v154 = *(const void **)(v146 + 24);
                    }
                    if (v153 >= v151) {
                      size_t v155 = v151;
                    }
                    else {
                      size_t v155 = v153;
                    }
                    int v156 = memcmp(v152, v154, v155);
                    BOOL v157 = v151 < v153;
                    if (v156) {
                      BOOL v157 = v156 < 0;
                    }
                    if (v157)
                    {
                      int v325 = *(_DWORD *)(v147 + 16);
                      long long v318 = *(_OWORD *)v147;
                      uint64_t v330 = *(const void **)(v146 + 104);
                      long long v329 = *v148;
                      *(void *)uint64_t v148 = 0;
                      *(void *)(v146 + 96) = 0;
                      *(void *)(v146 + 104) = 0;
                      long long v331 = *(_OWORD *)(v146 + 112);
                      if (SHIBYTE(v330) >= 0) {
                        size_t v158 = HIBYTE(v330);
                      }
                      else {
                        size_t v158 = *((void *)&v329 + 1);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        uint64_t v159 = &v329;
                      }
                      else {
                        uint64_t v159 = (long long *)v329;
                      }
                      uint64_t v160 = v145;
                      while (1)
                      {
                        uint64_t v161 = a1 + v160;
                        *(_OWORD *)(v161 + 64) = *(_OWORD *)(a1 + v160);
                        *(_DWORD *)(v161 + 80) = *(_DWORD *)(a1 + v160 + 16);
                        unint64_t v162 = (void **)(a1 + v160 + 88);
                        if (*(char *)(a1 + v160 + 111) < 0) {
                          operator delete(*v162);
                        }
                        *(_OWORD *)unint64_t v162 = *(_OWORD *)(v161 + 24);
                        *(void *)(a1 + v160 + 104) = *(void *)(v161 + 40);
                        *(unsigned char *)(v161 + 47) = 0;
                        *(unsigned char *)(v161 + 24) = 0;
                        *(_OWORD *)(v161 + 112) = *(_OWORD *)(v161 + 48);
                        if (!v160) {
                          break;
                        }
                        uint64_t v163 = a1 + v160;
                        int v164 = *(char *)(a1 + v160 - 17);
                        if (v164 >= 0) {
                          size_t v165 = *(unsigned __int8 *)(a1 + v160 - 17);
                        }
                        else {
                          size_t v165 = *(void *)(a1 + v160 - 32);
                        }
                        if (v164 >= 0) {
                          uint64_t v166 = (const void *)(a1 + v160 - 40);
                        }
                        else {
                          uint64_t v166 = *(const void **)(a1 + v160 - 40);
                        }
                        if (v165 >= v158) {
                          size_t v167 = v158;
                        }
                        else {
                          size_t v167 = v165;
                        }
                        int v168 = memcmp(v159, v166, v167);
                        BOOL v169 = v158 < v165;
                        if (v168) {
                          BOOL v169 = v168 < 0;
                        }
                        v160 -= 64;
                        if (!v169)
                        {
                          unint64_t v170 = v163 + 24;
                          uint64_t v171 = (long long *)(v163 + 48);
                          uint64_t v172 = a1 + v160 + 64;
                          goto LABEL_293;
                        }
                      }
                      unint64_t v170 = a1 + 24;
                      uint64_t v171 = (long long *)(a1 + 48);
                      uint64_t v172 = a1;
LABEL_293:
                      *(_DWORD *)(v172 + 16) = v325;
                      *(_OWORD *)uint64_t v172 = v318;
                      if (*(char *)(v172 + 47) < 0) {
                        operator delete(*(void **)v170);
                      }
                      long long v173 = v329;
                      *(void *)(v170 + 16) = v330;
                      *(_OWORD *)unint64_t v170 = v173;
                      *uint64_t v171 = v331;
                    }
                    unint64_t v144 = v147 + 64;
                    v145 += 64;
                    unint64_t v146 = v147;
                  }
                  while (v147 + 64 != a2);
                }
              }
            }
            else if (a1 != v9)
            {
              unint64_t v276 = a1 + 64;
              if (a1 + 64 != a2)
              {
                unint64_t v277 = a1 - 40;
                do
                {
                  unint64_t v278 = v276;
                  uint64_t v279 = (long long *)(a1 + 88);
                  int v280 = *(char *)(a1 + 47);
                  int v281 = *(char *)(a1 + 111);
                  if (v281 >= 0) {
                    size_t v282 = *(unsigned __int8 *)(a1 + 111);
                  }
                  else {
                    size_t v282 = *(void *)(a1 + 96);
                  }
                  if (v281 >= 0) {
                    int v283 = (const void *)(a1 + 88);
                  }
                  else {
                    int v283 = *(const void **)(a1 + 88);
                  }
                  if (v280 >= 0) {
                    size_t v284 = *(unsigned __int8 *)(a1 + 47);
                  }
                  else {
                    size_t v284 = *(void *)(a1 + 32);
                  }
                  if (v280 >= 0) {
                    uint64_t v285 = (const void *)(a1 + 24);
                  }
                  else {
                    uint64_t v285 = *(const void **)(a1 + 24);
                  }
                  if (v284 >= v282) {
                    size_t v286 = v282;
                  }
                  else {
                    size_t v286 = v284;
                  }
                  int v287 = memcmp(v283, v285, v286);
                  BOOL v288 = v282 < v284;
                  if (v287) {
                    BOOL v288 = v287 < 0;
                  }
                  if (v288)
                  {
                    int v328 = *(_DWORD *)(v278 + 16);
                    long long v321 = *(_OWORD *)v278;
                    uint64_t v330 = *(const void **)(a1 + 104);
                    long long v329 = *v279;
                    *(void *)uint64_t v279 = 0;
                    *(void *)(a1 + 96) = 0;
                    *(void *)(a1 + 104) = 0;
                    long long v331 = *(_OWORD *)(a1 + 112);
                    if (SHIBYTE(v330) >= 0) {
                      size_t v289 = HIBYTE(v330);
                    }
                    else {
                      size_t v289 = *((void *)&v329 + 1);
                    }
                    if (SHIBYTE(v330) >= 0) {
                      uint64_t v290 = &v329;
                    }
                    else {
                      uint64_t v290 = (long long *)v329;
                    }
                    int v291 = (const void **)v277;
                    do
                    {
                      uint64_t v292 = v291;
                      *(_OWORD *)(v291 + 13) = *(_OWORD *)(v291 + 5);
                      *((_DWORD *)v291 + 30) = *((_DWORD *)v291 + 14);
                      unint64_t v293 = v291 + 16;
                      if (*((char *)v291 + 151) < 0) {
                        operator delete((void *)*v293);
                      }
                      *(_OWORD *)unint64_t v293 = *((_OWORD *)v292 + 4);
                      v293[2] = v292[10];
                      *((unsigned char *)v292 + 87) = 0;
                      *((unsigned char *)v292 + 64) = 0;
                      *(_OWORD *)(v292 + 19) = *(_OWORD *)(v292 + 11);
                      int v294 = *((char *)v292 + 23);
                      if (v294 >= 0) {
                        size_t v295 = *((unsigned __int8 *)v292 + 23);
                      }
                      else {
                        size_t v295 = (size_t)v292[1];
                      }
                      if (v294 >= 0) {
                        BOOL v296 = v292;
                      }
                      else {
                        BOOL v296 = *v292;
                      }
                      if (v295 >= v289) {
                        size_t v297 = v289;
                      }
                      else {
                        size_t v297 = v295;
                      }
                      int v298 = memcmp(v290, v296, v297);
                      BOOL v299 = v298 < 0;
                      if (!v298) {
                        BOOL v299 = v289 < v295;
                      }
                      int v291 = v292 - 8;
                    }
                    while (v299);
                    uint64_t v300 = (void **)(v292 + 8);
                    *((_DWORD *)v292 + 14) = v328;
                    *(_OWORD *)(v292 + 5) = v321;
                    if (*((char *)v292 + 87) < 0) {
                      operator delete(*v300);
                    }
                    long long v301 = v329;
                    v292[10] = v330;
                    *(_OWORD *)uint64_t v300 = v301;
                    *(_OWORD *)(v292 + 11) = v331;
                  }
                  unint64_t v276 = v278 + 64;
                  v277 += 64;
                  a1 = v278;
                }
                while (v278 + 64 != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v9)
            {
              int64_t v306 = (unint64_t)(v12 - 2) >> 1;
              int64_t v174 = v306;
              do
              {
                int64_t v175 = v174;
                if (v306 >= v174)
                {
                  uint64_t v176 = (2 * v174) | 1;
                  unint64_t v177 = a1 + (v176 << 6);
                  if (2 * v174 + 2 < v12)
                  {
                    int v178 = *(char *)(v177 + 111);
                    int v179 = *(char *)(v177 + 47);
                    unint64_t v180 = v179 >= 0 ? *(unsigned __int8 *)(v177 + 47) : *(void *)(v177 + 32);
                    uint64_t v181 = v179 >= 0 ? (const void *)(v177 + 24) : *(const void **)(v177 + 24);
                    unint64_t v182 = v178 >= 0 ? *(unsigned __int8 *)(v177 + 111) : *(void *)(v177 + 96);
                    uint64_t v183 = v178 >= 0 ? (const void *)(v177 + 88) : *(const void **)(v177 + 88);
                    size_t v184 = v182 >= v180 ? v180 : v182;
                    int v185 = memcmp(v181, v183, v184);
                    uint64_t v186 = v185 ? v185 < 0 : v180 < v182;
                    v177 += v186 << 6;
                    if (v186) {
                      uint64_t v176 = 2 * v175 + 2;
                    }
                  }
                  unint64_t v304 = a1 + (v175 << 6);
                  uint64_t v187 = (long long *)(v304 + 24);
                  unint64_t v188 = v304;
                  int v189 = *(char *)(v304 + 47);
                  int v190 = *(char *)(v177 + 47);
                  if (v190 >= 0) {
                    size_t v191 = *(unsigned __int8 *)(v177 + 47);
                  }
                  else {
                    size_t v191 = *(void *)(v177 + 32);
                  }
                  if (v190 >= 0) {
                    uint64_t v192 = (const void *)(v177 + 24);
                  }
                  else {
                    uint64_t v192 = *(const void **)(v177 + 24);
                  }
                  if (v189 >= 0) {
                    size_t v193 = *(unsigned __int8 *)(v304 + 47);
                  }
                  else {
                    size_t v193 = *(void *)(v304 + 32);
                  }
                  if (v189 >= 0) {
                    unint64_t v194 = (const void *)(v304 + 24);
                  }
                  else {
                    unint64_t v194 = *(const void **)(v304 + 24);
                  }
                  if (v193 >= v191) {
                    size_t v195 = v191;
                  }
                  else {
                    size_t v195 = v193;
                  }
                  int v196 = memcmp(v192, v194, v195);
                  BOOL v197 = v191 < v193;
                  if (v196) {
                    BOOL v197 = v196 < 0;
                  }
                  if (!v197)
                  {
                    int v326 = *(_DWORD *)(v304 + 16);
                    long long v319 = *(_OWORD *)v304;
                    long long v198 = *v187;
                    uint64_t v330 = *(const void **)(v304 + 40);
                    long long v329 = v198;
                    *(void *)(v304 + 32) = 0;
                    *(void *)(v304 + 40) = 0;
                    *(void *)uint64_t v187 = 0;
                    long long v331 = *(_OWORD *)(v304 + 48);
                    do
                    {
                      unint64_t v199 = v177;
                      long long v200 = *(_OWORD *)v177;
                      *(_DWORD *)(v188 + 16) = *(_DWORD *)(v177 + 16);
                      *(_OWORD *)unint64_t v188 = v200;
                      uint64_t v201 = (void **)(v188 + 24);
                      if (*(char *)(v188 + 47) < 0) {
                        operator delete(*v201);
                      }
                      long long v202 = *(_OWORD *)(v177 + 24);
                      *(void *)(v188 + 40) = *(void *)(v177 + 40);
                      *(_OWORD *)uint64_t v201 = v202;
                      *(unsigned char *)(v177 + 47) = 0;
                      *(unsigned char *)(v177 + 24) = 0;
                      *(_OWORD *)(v188 + 48) = *(_OWORD *)(v177 + 48);
                      if (v306 < v176) {
                        break;
                      }
                      uint64_t v203 = (2 * v176) | 1;
                      unint64_t v177 = a1 + (v203 << 6);
                      uint64_t v204 = 2 * v176 + 2;
                      if (v204 < v12)
                      {
                        int v205 = *(char *)(v177 + 111);
                        int v206 = *(char *)(v177 + 47);
                        unint64_t v207 = v206 >= 0 ? *(unsigned __int8 *)(v177 + 47) : *(void *)(v177 + 32);
                        uint64_t v208 = v206 >= 0 ? (const void *)(v177 + 24) : *(const void **)(v177 + 24);
                        unint64_t v209 = v205 >= 0 ? *(unsigned __int8 *)(v177 + 111) : *(void *)(v177 + 96);
                        unsigned int v210 = v205 >= 0 ? (const void *)(v177 + 88) : *(const void **)(v177 + 88);
                        size_t v211 = v209 >= v207 ? v207 : v209;
                        int v212 = memcmp(v208, v210, v211);
                        uint64_t v213 = v212 ? v212 < 0 : v207 < v209;
                        v177 += v213 << 6;
                        if (v213) {
                          uint64_t v203 = v204;
                        }
                      }
                      int v214 = *(char *)(v177 + 47);
                      if (v214 >= 0) {
                        size_t v215 = *(unsigned __int8 *)(v177 + 47);
                      }
                      else {
                        size_t v215 = *(void *)(v177 + 32);
                      }
                      if (v214 >= 0) {
                        uint64_t v216 = (const void *)(v177 + 24);
                      }
                      else {
                        uint64_t v216 = *(const void **)(v177 + 24);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        size_t v217 = HIBYTE(v330);
                      }
                      else {
                        size_t v217 = *((void *)&v329 + 1);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        uint64_t v218 = &v329;
                      }
                      else {
                        uint64_t v218 = (long long *)v329;
                      }
                      if (v217 >= v215) {
                        size_t v219 = v215;
                      }
                      else {
                        size_t v219 = v217;
                      }
                      int v220 = memcmp(v216, v218, v219);
                      BOOL v221 = v215 < v217;
                      if (v220) {
                        BOOL v221 = v220 < 0;
                      }
                      unint64_t v188 = v199;
                      uint64_t v176 = v203;
                    }
                    while (!v221);
                    uint64_t v222 = (void **)(v199 + 24);
                    *(_DWORD *)(v199 + 16) = v326;
                    *(_OWORD *)unint64_t v199 = v319;
                    if (*(char *)(v199 + 47) < 0) {
                      operator delete(*v222);
                    }
                    long long v223 = v329;
                    *(void *)(v199 + 40) = v330;
                    *(_OWORD *)uint64_t v222 = v223;
                    *(_OWORD *)(v199 + 48) = v331;
                  }
                }
                int64_t v174 = v175 - 1;
              }
              while (v175);
              uint64_t v224 = (unint64_t)v11 >> 6;
              do
              {
                uint64_t v225 = 0;
                unint64_t v226 = a2;
                int v314 = *(_DWORD *)(a1 + 16);
                long long v313 = *(_OWORD *)a1;
                uint64_t v305 = *(void *)(a1 + 24);
                *(void *)int v311 = *(void *)(a1 + 32);
                *(void *)&v311[7] = *(void *)(a1 + 39);
                char v307 = *(unsigned char *)(a1 + 47);
                *(void *)(a1 + 32) = 0;
                *(void *)(a1 + 40) = 0;
                *(void *)(a1 + 24) = 0;
                unint64_t v227 = a1;
                long long v310 = *(_OWORD *)(a1 + 48);
                do
                {
                  unint64_t v228 = v227 + ((v225 + 1) << 6);
                  uint64_t v229 = 2 * v225;
                  uint64_t v225 = (2 * v225) | 1;
                  uint64_t v230 = v229 + 2;
                  if (v229 + 2 < v224)
                  {
                    int v231 = *(char *)(v228 + 111);
                    int v232 = *(char *)(v228 + 47);
                    unint64_t v233 = v232 >= 0 ? *(unsigned __int8 *)(v228 + 47) : *(void *)(v228 + 32);
                    uint64_t v234 = v232 >= 0 ? (const void *)(v228 + 24) : *(const void **)(v228 + 24);
                    unint64_t v235 = v231 >= 0 ? *(unsigned __int8 *)(v228 + 111) : *(void *)(v228 + 96);
                    uint64_t v236 = v231 >= 0 ? (const void *)(v228 + 88) : *(const void **)(v228 + 88);
                    size_t v237 = v235 >= v233 ? v233 : v235;
                    int v238 = memcmp(v234, v236, v237);
                    uint64_t v239 = v238 ? v238 < 0 : v233 < v235;
                    v228 += v239 << 6;
                    if (v239) {
                      uint64_t v225 = v230;
                    }
                  }
                  long long v240 = *(_OWORD *)v228;
                  *(_DWORD *)(v227 + 16) = *(_DWORD *)(v228 + 16);
                  *(_OWORD *)unint64_t v227 = v240;
                  uint64_t v241 = (void **)(v227 + 24);
                  if (*(char *)(v227 + 47) < 0) {
                    operator delete(*v241);
                  }
                  long long v242 = *(_OWORD *)(v228 + 24);
                  *(void *)(v227 + 40) = *(void *)(v228 + 40);
                  *(_OWORD *)uint64_t v241 = v242;
                  *(unsigned char *)(v228 + 47) = 0;
                  *(unsigned char *)(v228 + 24) = 0;
                  *(_OWORD *)(v227 + 48) = *(_OWORD *)(v228 + 48);
                  unint64_t v227 = v228;
                }
                while (v225 <= (uint64_t)((unint64_t)(v224 - 2) >> 1));
                uint64_t v243 = (void **)(v228 + 24);
                uint64_t v244 = (long long *)(v228 + 48);
                uint64_t v245 = (long long *)(a2 - 64);
                a2 -= 64;
                if (v228 == v226 - 64)
                {
                  *(_DWORD *)(v228 + 16) = v314;
                  *(_OWORD *)unint64_t v228 = v313;
                  if (*(char *)(v228 + 47) < 0) {
                    operator delete(*v243);
                  }
                  *(void *)(v228 + 24) = v305;
                  *(void *)(v228 + 32) = *(void *)v311;
                  *(void *)(v228 + 39) = *(void *)&v311[7];
                  *(unsigned char *)(v228 + 47) = v307;
                  long long *v244 = v310;
                }
                else
                {
                  long long v246 = *v245;
                  *(_DWORD *)(v228 + 16) = *(_DWORD *)(v226 - 48);
                  *(_OWORD *)unint64_t v228 = v246;
                  if (*(char *)(v228 + 47) < 0) {
                    operator delete(*v243);
                  }
                  long long v247 = *(_OWORD *)(v226 - 40);
                  *(void *)(v228 + 40) = *(void *)(v226 - 24);
                  *(_OWORD *)uint64_t v243 = v247;
                  *(unsigned char *)(v226 - 17) = 0;
                  *(unsigned char *)(v226 - 40) = 0;
                  long long *v244 = *(_OWORD *)(v226 - 16);
                  *(_DWORD *)(v226 - 48) = v314;
                  long long *v245 = v313;
                  if (*(char *)(v226 - 17) < 0) {
                    operator delete(*(void **)(v226 - 40));
                  }
                  *(void *)(v226 - 40) = v305;
                  *(void *)(v226 - 25) = *(void *)&v311[7];
                  *(void *)(v226 - 32) = *(void *)v311;
                  *(unsigned char *)(v226 - 17) = v307;
                  *(_OWORD *)(v226 - 16) = v310;
                  uint64_t v248 = v228 + 64 - a1;
                  if (v248 >= 65)
                  {
                    unint64_t v249 = (((unint64_t)v248 >> 6) - 2) >> 1;
                    unint64_t v250 = a1 + (v249 << 6);
                    int v251 = *(char *)(v228 + 47);
                    int v252 = *(char *)(v250 + 47);
                    if (v252 >= 0) {
                      size_t v253 = *(unsigned __int8 *)(v250 + 47);
                    }
                    else {
                      size_t v253 = *(void *)(v250 + 32);
                    }
                    if (v252 >= 0) {
                      unsigned int v254 = (const void *)(v250 + 24);
                    }
                    else {
                      unsigned int v254 = *(const void **)(v250 + 24);
                    }
                    if (v251 >= 0) {
                      size_t v255 = *(unsigned __int8 *)(v228 + 47);
                    }
                    else {
                      size_t v255 = *(void *)(v228 + 32);
                    }
                    if (v251 >= 0) {
                      uint64_t v256 = (const void *)(v228 + 24);
                    }
                    else {
                      uint64_t v256 = *(const void **)(v228 + 24);
                    }
                    if (v255 >= v253) {
                      size_t v257 = v253;
                    }
                    else {
                      size_t v257 = v255;
                    }
                    int v258 = memcmp(v254, v256, v257);
                    BOOL v259 = v253 < v255;
                    if (v258) {
                      BOOL v259 = v258 < 0;
                    }
                    if (v259)
                    {
                      int v327 = *(_DWORD *)(v228 + 16);
                      long long v320 = *(_OWORD *)v228;
                      long long v260 = *(_OWORD *)v243;
                      uint64_t v330 = *(const void **)(v228 + 40);
                      long long v329 = v260;
                      *(void *)(v228 + 32) = 0;
                      *(void *)(v228 + 40) = 0;
                      *uint64_t v243 = 0;
                      long long v331 = *v244;
                      if (SHIBYTE(v330) >= 0) {
                        size_t v261 = HIBYTE(v330);
                      }
                      else {
                        size_t v261 = *((void *)&v329 + 1);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        uint64_t v262 = &v329;
                      }
                      else {
                        uint64_t v262 = (long long *)v329;
                      }
                      do
                      {
                        unint64_t v263 = v250;
                        long long v264 = *(_OWORD *)v250;
                        *(_DWORD *)(v228 + 16) = *(_DWORD *)(v250 + 16);
                        *(_OWORD *)unint64_t v228 = v264;
                        uint64_t v265 = (void **)(v228 + 24);
                        if (*(char *)(v228 + 47) < 0) {
                          operator delete(*v265);
                        }
                        long long v266 = *(_OWORD *)(v250 + 24);
                        *(void *)(v228 + 40) = *(void *)(v250 + 40);
                        *(_OWORD *)uint64_t v265 = v266;
                        *(unsigned char *)(v250 + 47) = 0;
                        *(unsigned char *)(v250 + 24) = 0;
                        *(_OWORD *)(v228 + 48) = *(_OWORD *)(v250 + 48);
                        if (!v249) {
                          break;
                        }
                        unint64_t v249 = (v249 - 1) >> 1;
                        unint64_t v250 = a1 + (v249 << 6);
                        int v267 = *(char *)(v250 + 47);
                        if (v267 >= 0) {
                          size_t v268 = *(unsigned __int8 *)(v250 + 47);
                        }
                        else {
                          size_t v268 = *(void *)(v250 + 32);
                        }
                        if (v267 >= 0) {
                          uint64_t v269 = (const void *)(v250 + 24);
                        }
                        else {
                          uint64_t v269 = *(const void **)(v250 + 24);
                        }
                        if (v261 >= v268) {
                          size_t v270 = v268;
                        }
                        else {
                          size_t v270 = v261;
                        }
                        int v271 = memcmp(v269, v262, v270);
                        BOOL v272 = v268 < v261;
                        if (v271) {
                          BOOL v272 = v271 < 0;
                        }
                        unint64_t v228 = v263;
                      }
                      while (v272);
                      uint64_t v273 = (void **)(v263 + 24);
                      *(_DWORD *)(v263 + 16) = v327;
                      *(_OWORD *)unint64_t v263 = v320;
                      if (*(char *)(v263 + 47) < 0) {
                        operator delete(*v273);
                      }
                      long long v274 = v329;
                      *(void *)(v263 + 40) = v330;
                      *(_OWORD *)uint64_t v273 = v274;
                      *(_OWORD *)(v263 + 48) = v331;
                    }
                  }
                }
              }
              while (v224-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = a1 + ((unint64_t)v12 >> 1 << 6);
          if ((unint64_t)v11 <= 0x2000)
          {
            sub_22B26A650(v14, a1, (uint64_t)v302);
          }
          else
          {
            sub_22B26A650(a1, v14, (uint64_t)v302);
            sub_22B26A650(a1 + 64, v14 - 64, a2 - 128);
            sub_22B26A650(a1 + 128, a1 + 64 + (v13 << 6), a2 - 192);
            sub_22B26A650(v14 - 64, v14, a1 + 64 + (v13 << 6));
            int v322 = *(_DWORD *)(a1 + 16);
            long long v315 = *(_OWORD *)a1;
            *(void *)((char *)&v309 + 7) = *(void *)(a1 + 39);
            uint64_t v15 = *(void *)(a1 + 24);
            *(void *)&long long v309 = *(void *)(a1 + 32);
            char v16 = *(unsigned char *)(a1 + 47);
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 24) = 0;
            long long v312 = *(_OWORD *)(a1 + 48);
            int v17 = *(_DWORD *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_DWORD *)(a1 + 16) = v17;
            long long v18 = *(_OWORD *)(v14 + 24);
            *(void *)(a1 + 40) = *(void *)(v14 + 40);
            *(_OWORD *)(a1 + 24) = v18;
            *(unsigned char *)(v14 + 47) = 0;
            *(unsigned char *)(v14 + 24) = 0;
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v14 + 48);
            *(_DWORD *)(v14 + 16) = v322;
            *(_OWORD *)uint64_t v14 = v315;
            *(void *)(v14 + 24) = v15;
            *(void *)(v14 + 32) = v309;
            *(void *)(v14 + 39) = *(void *)((char *)&v309 + 7);
            *(unsigned char *)(v14 + 47) = v16;
            *(_OWORD *)(v14 + 48) = v312;
          }
          --a3;
          if (a4) {
            break;
          }
          long long v19 = (void **)(a1 + 24);
          int v20 = *(char *)(a1 + 47);
          int v21 = *(char *)(a1 - 17);
          if (v21 >= 0) {
            size_t v22 = *(unsigned __int8 *)(a1 - 17);
          }
          else {
            size_t v22 = *(void *)(a1 - 32);
          }
          if (v21 >= 0) {
            uint64_t v23 = (const void *)(a1 - 40);
          }
          else {
            uint64_t v23 = *(const void **)(a1 - 40);
          }
          if (v20 >= 0) {
            size_t v24 = *(unsigned __int8 *)(a1 + 47);
          }
          else {
            size_t v24 = *(void *)(a1 + 32);
          }
          if (v20 >= 0) {
            uint64_t v25 = (const void *)(a1 + 24);
          }
          else {
            uint64_t v25 = *(const void **)(a1 + 24);
          }
          if (v24 >= v22) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v23, v25, v26);
          BOOL v28 = v22 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (v28) {
            break;
          }
          int v324 = *(_DWORD *)(a1 + 16);
          long long v317 = *(_OWORD *)a1;
          uint64_t v81 = *(const void **)(a1 + 40);
          long long v329 = *(_OWORD *)v19;
          uint64_t v330 = v81;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          *long long v19 = 0;
          long long v331 = *(_OWORD *)(a1 + 48);
          int v82 = *(char *)(a2 - 17);
          if (SHIBYTE(v330) >= 0) {
            size_t v83 = HIBYTE(v330);
          }
          else {
            size_t v83 = *((void *)&v329 + 1);
          }
          if (SHIBYTE(v330) >= 0) {
            long long v84 = &v329;
          }
          else {
            long long v84 = (long long *)v329;
          }
          if (v82 >= 0) {
            size_t v85 = *(unsigned __int8 *)(a2 - 17);
          }
          else {
            size_t v85 = *(void *)(a2 - 32);
          }
          if (v82 >= 0) {
            unsigned __int8 v86 = (const void *)(a2 - 40);
          }
          else {
            unsigned __int8 v86 = *(const void **)(a2 - 40);
          }
          if (v85 >= v83) {
            size_t v87 = v83;
          }
          else {
            size_t v87 = v85;
          }
          int v88 = memcmp(v84, v86, v87);
          BOOL v89 = v83 < v85;
          if (v88) {
            BOOL v89 = v88 < 0;
          }
          if (v89)
          {
            unsigned int v90 = (const void **)(a1 + 88);
            do
            {
              int v91 = *((char *)v90 + 23);
              if (v91 >= 0) {
                size_t v92 = *((unsigned __int8 *)v90 + 23);
              }
              else {
                size_t v92 = (size_t)v90[1];
              }
              if (v91 >= 0) {
                unsigned int v93 = v90;
              }
              else {
                unsigned int v93 = *v90;
              }
              if (v92 >= v83) {
                size_t v94 = v83;
              }
              else {
                size_t v94 = v92;
              }
              int v95 = memcmp(v84, v93, v94);
              BOOL v96 = v83 < v92;
              if (v95) {
                BOOL v96 = v95 < 0;
              }
              v90 += 8;
            }
            while (!v96);
            int v10 = (long long *)(v90 - 11);
          }
          else
          {
            unint64_t v97 = (long long *)(a1 + 64);
            do
            {
              int v10 = v97;
              if ((unint64_t)v97 >= a2) {
                break;
              }
              int v98 = *((char *)v97 + 47);
              int64_t v99 = v8;
              if (v98 >= 0) {
                size_t v100 = *((unsigned __int8 *)v97 + 47);
              }
              else {
                size_t v100 = *((void *)v97 + 4);
              }
              if (v98 >= 0) {
                uint64_t v101 = (char *)v97 + 24;
              }
              else {
                uint64_t v101 = (const void *)*((void *)v97 + 3);
              }
              if (v100 >= v83) {
                size_t v102 = v83;
              }
              else {
                size_t v102 = v100;
              }
              int v103 = memcmp(v84, v101, v102);
              BOOL v4 = v83 >= v100;
              unint64_t v8 = v99;
              char v104 = !v4;
              BOOL v105 = v103 < 0;
              if (!v103) {
                BOOL v105 = v104;
              }
              unint64_t v97 = v10 + 4;
            }
            while (!v105);
          }
          unint64_t v106 = (long long *)a2;
          if ((unint64_t)v10 < a2)
          {
            unsigned int v107 = (const void **)(a2 - 40);
            do
            {
              int v108 = *((char *)v107 + 23);
              if (v108 >= 0) {
                size_t v109 = *((unsigned __int8 *)v107 + 23);
              }
              else {
                size_t v109 = (size_t)v107[1];
              }
              if (v108 >= 0) {
                unint64_t v110 = v107;
              }
              else {
                unint64_t v110 = *v107;
              }
              if (v109 >= v83) {
                size_t v111 = v83;
              }
              else {
                size_t v111 = v109;
              }
              int v112 = memcmp(v84, v110, v111);
              BOOL v113 = v83 < v109;
              if (v112) {
                BOOL v113 = v112 < 0;
              }
              v107 -= 8;
            }
            while (v113);
            unint64_t v106 = (long long *)(v107 + 5);
          }
          while (v10 < v106)
          {
            sub_22B26A54C(v10, v106);
            uint64_t v114 = (const void **)v10 + 11;
            do
            {
              uint64_t v115 = v114;
              size_t v116 = *((unsigned __int8 *)v114 + 23);
              if ((v116 & 0x80u) == 0) {
                size_t v117 = v116;
              }
              else {
                size_t v117 = (size_t)v115[1];
              }
              if ((v116 & 0x80u) == 0) {
                uint64_t v118 = v115;
              }
              else {
                uint64_t v118 = *v115;
              }
              if (v117 >= v83) {
                size_t v119 = v83;
              }
              else {
                size_t v119 = v117;
              }
              int v120 = memcmp(v84, v118, v119);
              BOOL v121 = v120 < 0;
              if (!v120) {
                BOOL v121 = v83 < v117;
              }
              uint64_t v114 = v115 + 8;
            }
            while (!v121);
            int v10 = (long long *)(v115 - 3);
            uint64_t v122 = (const void **)v106 - 5;
            do
            {
              uint64_t v123 = v122;
              size_t v124 = *((unsigned __int8 *)v122 + 23);
              if ((v124 & 0x80u) == 0) {
                size_t v125 = v124;
              }
              else {
                size_t v125 = (size_t)v123[1];
              }
              if ((v124 & 0x80u) == 0) {
                uint64_t v126 = v123;
              }
              else {
                uint64_t v126 = *v123;
              }
              if (v125 >= v83) {
                size_t v127 = v83;
              }
              else {
                size_t v127 = v125;
              }
              int v128 = memcmp(v84, v126, v127);
              BOOL v129 = v128 < 0;
              if (!v128) {
                BOOL v129 = v83 < v125;
              }
              uint64_t v122 = v123 - 8;
            }
            while (v129);
            unint64_t v106 = (long long *)(v123 - 3);
          }
          unint64_t v130 = v10 - 4;
          BOOL v4 = (unint64_t)(v10 - 4) >= a1;
          BOOL v5 = v10 - 4 == (long long *)a1;
          unint64_t v9 = a2;
          unint64_t v8 = &v331;
          if (v10 - 4 != (long long *)a1)
          {
            long long v131 = *v130;
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v10 - 12);
            *(_OWORD *)a1 = v131;
            if (*(char *)(a1 + 47) < 0) {
              operator delete(*v19);
            }
            long long v132 = *(long long *)((char *)v10 - 40);
            *(void *)(a1 + 40) = *((void *)v10 - 3);
            *(_OWORD *)long long v19 = v132;
            *((unsigned char *)v10 - 17) = 0;
            *((unsigned char *)v10 - 40) = 0;
            *(_OWORD *)(a1 + 48) = *(v10 - 1);
          }
          *((_DWORD *)v10 - 12) = v324;
          *unint64_t v130 = v317;
          uint64_t v133 = (void **)v10 - 5;
          if (*((char *)v10 - 17) < 0) {
            operator delete(*v133);
          }
          a4 = 0;
          long long v134 = v329;
          *((void *)v10 - 3) = v330;
          *(_OWORD *)uint64_t v133 = v134;
          *(v10 - 1) = v331;
        }
        uint64_t v29 = 0;
        int v323 = *(_DWORD *)(a1 + 16);
        long long v316 = *(_OWORD *)a1;
        int v30 = (void **)(a1 + 24);
        unsigned int v31 = *(const void **)(a1 + 40);
        long long v329 = *(_OWORD *)(a1 + 24);
        uint64_t v330 = v31;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        long long v331 = *(_OWORD *)(a1 + 48);
        size_t v32 = SHIBYTE(v330) >= 0 ? HIBYTE(v330) : *((void *)&v329 + 1);
        int v33 = SHIBYTE(v330) >= 0 ? &v329 : (long long *)v329;
        do
        {
          int v34 = *(char *)(a1 + v29 + 111);
          if (v34 >= 0) {
            size_t v35 = *(unsigned __int8 *)(a1 + v29 + 111);
          }
          else {
            size_t v35 = *(void *)(a1 + v29 + 96);
          }
          if (v34 >= 0) {
            uint64_t v36 = (const void *)(a1 + v29 + 88);
          }
          else {
            uint64_t v36 = *(const void **)(a1 + v29 + 88);
          }
          if (v32 >= v35) {
            size_t v37 = v35;
          }
          else {
            size_t v37 = v32;
          }
          int v38 = memcmp(v36, v33, v37);
          BOOL v39 = v35 < v32;
          if (v38) {
            BOOL v39 = v38 < 0;
          }
          v29 += 64;
        }
        while (v39);
        unint64_t v40 = a1 + v29;
        uint64_t v41 = a1 + v29 - 64;
        BOOL v42 = (const void **)(a2 - 40);
        if (v41 == a1)
        {
          uint64_t v50 = (const void **)(a2 - 40);
          while (1)
          {
            uint64_t v49 = (long long *)(v50 + 5);
            if (v40 >= (unint64_t)(v50 + 5)) {
              break;
            }
            int v51 = *((char *)v50 + 23);
            if (v51 >= 0) {
              size_t v52 = *((unsigned __int8 *)v50 + 23);
            }
            else {
              size_t v52 = (size_t)v50[1];
            }
            if (v51 >= 0) {
              unint64_t v53 = v50;
            }
            else {
              unint64_t v53 = *v50;
            }
            if (v32 >= v52) {
              size_t v54 = v52;
            }
            else {
              size_t v54 = v32;
            }
            int v55 = memcmp(v53, v33, v54);
            BOOL v56 = v52 < v32;
            if (v55) {
              BOOL v56 = v55 < 0;
            }
            v50 -= 8;
            if (v56)
            {
              uint64_t v49 = (long long *)(v50 + 5);
              break;
            }
          }
        }
        else
        {
          do
          {
            int v43 = *((char *)v42 + 23);
            if (v43 >= 0) {
              size_t v44 = *((unsigned __int8 *)v42 + 23);
            }
            else {
              size_t v44 = (size_t)v42[1];
            }
            if (v43 >= 0) {
              BOOL v45 = v42;
            }
            else {
              BOOL v45 = *v42;
            }
            if (v32 >= v44) {
              size_t v46 = v44;
            }
            else {
              size_t v46 = v32;
            }
            int v47 = memcmp(v45, v33, v46);
            BOOL v48 = v44 < v32;
            if (v47) {
              BOOL v48 = v47 < 0;
            }
            v42 -= 8;
          }
          while (!v48);
          uint64_t v49 = (long long *)(v42 + 5);
        }
        uint64_t v57 = a3;
        int v10 = (long long *)v40;
        if (v40 < (unint64_t)v49)
        {
          uint64_t v58 = v49;
          do
          {
            sub_22B26A54C(v10, v58);
            long long v59 = (const void **)v10 + 11;
            do
            {
              uint64_t v60 = v59;
              size_t v61 = *((unsigned __int8 *)v59 + 23);
              if ((v61 & 0x80u) == 0) {
                size_t v62 = v61;
              }
              else {
                size_t v62 = (size_t)v60[1];
              }
              if ((v61 & 0x80u) == 0) {
                unsigned int v63 = v60;
              }
              else {
                unsigned int v63 = *v60;
              }
              if (v32 >= v62) {
                size_t v64 = v62;
              }
              else {
                size_t v64 = v32;
              }
              int v65 = memcmp(v63, v33, v64);
              BOOL v66 = v65 < 0;
              if (!v65) {
                BOOL v66 = v62 < v32;
              }
              long long v59 = v60 + 8;
            }
            while (v66);
            int v10 = (long long *)(v60 - 3);
            uint64_t v67 = (const void **)v58 - 5;
            do
            {
              int v68 = v67;
              size_t v69 = *((unsigned __int8 *)v67 + 23);
              if ((v69 & 0x80u) == 0) {
                size_t v70 = v69;
              }
              else {
                size_t v70 = (size_t)v68[1];
              }
              if ((v69 & 0x80u) == 0) {
                int v71 = v68;
              }
              else {
                int v71 = *v68;
              }
              if (v32 >= v70) {
                size_t v72 = v70;
              }
              else {
                size_t v72 = v32;
              }
              int v73 = memcmp(v71, v33, v72);
              BOOL v74 = v73 < 0;
              if (!v73) {
                BOOL v74 = v70 < v32;
              }
              uint64_t v67 = v68 - 8;
            }
            while (!v74);
            uint64_t v58 = (long long *)(v68 - 3);
          }
          while (v10 < v58);
        }
        uint64_t v75 = v10 - 4;
        a3 = v57;
        unint64_t v8 = &v331;
        if (v10 - 4 != (long long *)a1)
        {
          long long v76 = *v75;
          *(_DWORD *)(a1 + 16) = *((_DWORD *)v10 - 12);
          *(_OWORD *)a1 = v76;
          if (*(char *)(a1 + 47) < 0) {
            operator delete(*v30);
          }
          long long v77 = *(long long *)((char *)v10 - 40);
          *(void *)(a1 + 40) = *((void *)v10 - 3);
          *(_OWORD *)int v30 = v77;
          *((unsigned char *)v10 - 17) = 0;
          *((unsigned char *)v10 - 40) = 0;
          *(_OWORD *)(a1 + 48) = *(v10 - 1);
        }
        *((_DWORD *)v10 - 12) = v323;
        *uint64_t v75 = v316;
        uint64_t v78 = (void **)v10 - 5;
        if (*((char *)v10 - 17) < 0) {
          operator delete(*v78);
        }
        long long v79 = v329;
        *((void *)v10 - 3) = v330;
        *(_OWORD *)uint64_t v78 = v79;
        *(v10 - 1) = v331;
        unint64_t v9 = a2;
        if (v40 >= (unint64_t)v49) {
          break;
        }
LABEL_114:
        sub_22B269010(a1, v10 - 4, v57, a4 & 1);
        a4 = 0;
      }
      BOOL v80 = sub_22B26AC34(a1, (uint64_t)(v10 - 4));
      if (sub_22B26AC34((uint64_t)v10, a2)) {
        break;
      }
      if (!v80) {
        goto LABEL_114;
      }
    }
    a2 = (unint64_t)(v10 - 4);
    if (!v80) {
      continue;
    }
    break;
  }
}

__n128 sub_22B26A54C(long long *a1, long long *a2)
{
  long long v11 = *a1;
  int v12 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  *(void *)int v10 = *((void *)a1 + 4);
  *(void *)&v10[7] = *(void *)((char *)a1 + 39);
  char v4 = *((unsigned char *)a1 + 47);
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 3) = 0;
  __n128 v9 = (__n128)a1[3];
  int v5 = *((_DWORD *)a2 + 4);
  *a1 = *a2;
  *((_DWORD *)a1 + 4) = v5;
  uint64_t v6 = *((void *)a2 + 5);
  *(long long *)((char *)a1 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)a1 + 5) = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (__n128 *)(a2 + 3);
  a1[3] = a2[3];
  *a2 = v11;
  *((_DWORD *)a2 + 4) = v12;
  if (*((char *)a2 + 47) < 0) {
    operator delete(*((void **)a2 + 3));
  }
  *((void *)a2 + 3) = v3;
  *((void *)a2 + 4) = *(void *)v10;
  *(void *)((char *)a2 + 39) = *(void *)&v10[7];
  *((unsigned char *)a2 + 47) = v4;
  __n128 result = v9;
  *uint64_t v7 = v9;
  return result;
}

double sub_22B26A650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)(a2 + 24);
  uint64_t v7 = (const void *)(a1 + 24);
  int v8 = *(char *)(a1 + 47);
  int v9 = *(char *)(a2 + 47);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    size_t v10 = *(void *)(a2 + 32);
  }
  if (v9 >= 0) {
    long long v11 = (const void *)(a2 + 24);
  }
  else {
    long long v11 = *(const void **)(a2 + 24);
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v12 = *(void *)(a1 + 32);
  }
  if (v8 >= 0) {
    unint64_t v13 = (const void *)(a1 + 24);
  }
  else {
    unint64_t v13 = *(const void **)(a1 + 24);
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  else {
    BOOL v16 = v10 < v12;
  }
  int v17 = *(char *)(a3 + 47);
  if (v17 >= 0) {
    size_t v18 = *(unsigned __int8 *)(a3 + 47);
  }
  else {
    size_t v18 = *(void *)(a3 + 32);
  }
  if (v17 >= 0) {
    long long v19 = (const void *)(a3 + 24);
  }
  else {
    long long v19 = *(const void **)(a3 + 24);
  }
  if (v10 >= v18) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v10;
  }
  int v21 = memcmp(v19, v11, v20);
  BOOL v23 = v18 < v10;
  if (v21) {
    BOOL v23 = v21 < 0;
  }
  if (v16)
  {
    size_t v24 = (long long *)a1;
    if (v23)
    {
LABEL_51:
      int v34 = (long long *)a3;
LABEL_72:
      *(void *)&double result = sub_22B26A54C(v24, v34).n128_u64[0];
      return result;
    }
    sub_22B26A54C((long long *)a1, (long long *)a2);
    int v25 = *(char *)(a2 + 47);
    int v26 = *(char *)(a3 + 47);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(a3 + 47);
    }
    else {
      size_t v27 = *(void *)(a3 + 32);
    }
    if (v26 >= 0) {
      BOOL v28 = (const void *)(a3 + 24);
    }
    else {
      BOOL v28 = *(const void **)(a3 + 24);
    }
    if (v25 >= 0) {
      size_t v29 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      size_t v29 = *(void *)(a2 + 32);
    }
    if (v25 >= 0) {
      int v30 = v6;
    }
    else {
      int v30 = *(const void **)(a2 + 24);
    }
    if (v29 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v29;
    }
    int v32 = memcmp(v28, v30, v31);
    BOOL v33 = v27 < v29;
    if (v32) {
      BOOL v33 = v32 < 0;
    }
    if (v33)
    {
      size_t v24 = (long long *)a2;
      goto LABEL_51;
    }
  }
  else if (v23)
  {
    sub_22B26A54C((long long *)a2, (long long *)a3);
    int v35 = *(char *)(a1 + 47);
    int v36 = *(char *)(a2 + 47);
    if (v36 >= 0) {
      size_t v37 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      size_t v37 = *(void *)(a2 + 32);
    }
    if (v36 >= 0) {
      int v38 = v6;
    }
    else {
      int v38 = *(const void **)(a2 + 24);
    }
    if (v35 >= 0) {
      size_t v39 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      size_t v39 = *(void *)(a1 + 32);
    }
    if (v35 >= 0) {
      unint64_t v40 = v7;
    }
    else {
      unint64_t v40 = *(const void **)(a1 + 24);
    }
    if (v39 >= v37) {
      size_t v41 = v37;
    }
    else {
      size_t v41 = v39;
    }
    int v42 = memcmp(v38, v40, v41);
    BOOL v43 = v37 < v39;
    if (v42) {
      BOOL v43 = v42 < 0;
    }
    if (v43)
    {
      size_t v24 = (long long *)a1;
      int v34 = (long long *)a2;
      goto LABEL_72;
    }
  }
  return result;
}

double sub_22B26A854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_22B26A650(a1, a2, a3);
  int v8 = *(char *)(a3 + 47);
  int v9 = *(char *)(a4 + 47);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a4 + 47);
  }
  else {
    size_t v10 = *(void *)(a4 + 32);
  }
  if (v9 >= 0) {
    long long v11 = (const void *)(a4 + 24);
  }
  else {
    long long v11 = *(const void **)(a4 + 24);
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a3 + 47);
  }
  else {
    size_t v12 = *(void *)(a3 + 32);
  }
  if (v8 >= 0) {
    unint64_t v13 = (const void *)(a3 + 24);
  }
  else {
    unint64_t v13 = *(const void **)(a3 + 24);
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v17 = v10 < v12;
  if (v15) {
    BOOL v17 = v15 < 0;
  }
  if (v17)
  {
    sub_22B26A54C((long long *)a3, (long long *)a4);
    int v18 = *(char *)(a2 + 47);
    int v19 = *(char *)(a3 + 47);
    if (v19 >= 0) {
      size_t v20 = *(unsigned __int8 *)(a3 + 47);
    }
    else {
      size_t v20 = *(void *)(a3 + 32);
    }
    if (v19 >= 0) {
      int v21 = (const void *)(a3 + 24);
    }
    else {
      int v21 = *(const void **)(a3 + 24);
    }
    if (v18 >= 0) {
      size_t v22 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      size_t v22 = *(void *)(a2 + 32);
    }
    if (v18 >= 0) {
      BOOL v23 = (const void *)(a2 + 24);
    }
    else {
      BOOL v23 = *(const void **)(a2 + 24);
    }
    if (v22 >= v20) {
      size_t v24 = v20;
    }
    else {
      size_t v24 = v22;
    }
    int v25 = memcmp(v21, v23, v24);
    BOOL v26 = v20 < v22;
    if (v25) {
      BOOL v26 = v25 < 0;
    }
    if (v26)
    {
      sub_22B26A54C((long long *)a2, (long long *)a3);
      int v27 = *(char *)(a1 + 47);
      int v28 = *(char *)(a2 + 47);
      if (v28 >= 0) {
        size_t v29 = *(unsigned __int8 *)(a2 + 47);
      }
      else {
        size_t v29 = *(void *)(a2 + 32);
      }
      if (v28 >= 0) {
        int v30 = (const void *)(a2 + 24);
      }
      else {
        int v30 = *(const void **)(a2 + 24);
      }
      if (v27 >= 0) {
        size_t v31 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v31 = *(void *)(a1 + 32);
      }
      if (v27 >= 0) {
        int v32 = (const void *)(a1 + 24);
      }
      else {
        int v32 = *(const void **)(a1 + 24);
      }
      if (v31 >= v29) {
        size_t v33 = v29;
      }
      else {
        size_t v33 = v31;
      }
      int v34 = memcmp(v30, v32, v33);
      BOOL v35 = v29 < v31;
      if (v34) {
        BOOL v35 = v34 < 0;
      }
      if (v35)
      {
        *(void *)&double result = sub_22B26A54C((long long *)a1, (long long *)a2).n128_u64[0];
      }
    }
  }
  return result;
}

double sub_22B26AA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22B26A854(a1, a2, a3, a4);
  int v10 = *(char *)(a4 + 47);
  int v11 = *(char *)(a5 + 47);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a5 + 47);
  }
  else {
    size_t v12 = *(void *)(a5 + 32);
  }
  if (v11 >= 0) {
    unint64_t v13 = (const void *)(a5 + 24);
  }
  else {
    unint64_t v13 = *(const void **)(a5 + 24);
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a4 + 47);
  }
  else {
    size_t v14 = *(void *)(a4 + 32);
  }
  if (v10 >= 0) {
    int v15 = (const void *)(a4 + 24);
  }
  else {
    int v15 = *(const void **)(a4 + 24);
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v19 = v12 < v14;
  if (v17) {
    BOOL v19 = v17 < 0;
  }
  if (v19)
  {
    sub_22B26A54C((long long *)a4, (long long *)a5);
    int v20 = *(char *)(a3 + 47);
    int v21 = *(char *)(a4 + 47);
    if (v21 >= 0) {
      size_t v22 = *(unsigned __int8 *)(a4 + 47);
    }
    else {
      size_t v22 = *(void *)(a4 + 32);
    }
    if (v21 >= 0) {
      BOOL v23 = (const void *)(a4 + 24);
    }
    else {
      BOOL v23 = *(const void **)(a4 + 24);
    }
    if (v20 >= 0) {
      size_t v24 = *(unsigned __int8 *)(a3 + 47);
    }
    else {
      size_t v24 = *(void *)(a3 + 32);
    }
    if (v20 >= 0) {
      int v25 = (const void *)(a3 + 24);
    }
    else {
      int v25 = *(const void **)(a3 + 24);
    }
    if (v24 >= v22) {
      size_t v26 = v22;
    }
    else {
      size_t v26 = v24;
    }
    int v27 = memcmp(v23, v25, v26);
    BOOL v28 = v22 < v24;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28)
    {
      sub_22B26A54C((long long *)a3, (long long *)a4);
      int v29 = *(char *)(a2 + 47);
      int v30 = *(char *)(a3 + 47);
      if (v30 >= 0) {
        size_t v31 = *(unsigned __int8 *)(a3 + 47);
      }
      else {
        size_t v31 = *(void *)(a3 + 32);
      }
      if (v30 >= 0) {
        int v32 = (const void *)(a3 + 24);
      }
      else {
        int v32 = *(const void **)(a3 + 24);
      }
      if (v29 >= 0) {
        size_t v33 = *(unsigned __int8 *)(a2 + 47);
      }
      else {
        size_t v33 = *(void *)(a2 + 32);
      }
      if (v29 >= 0) {
        int v34 = (const void *)(a2 + 24);
      }
      else {
        int v34 = *(const void **)(a2 + 24);
      }
      if (v33 >= v31) {
        size_t v35 = v31;
      }
      else {
        size_t v35 = v33;
      }
      int v36 = memcmp(v32, v34, v35);
      BOOL v37 = v31 < v33;
      if (v36) {
        BOOL v37 = v36 < 0;
      }
      if (v37)
      {
        sub_22B26A54C((long long *)a2, (long long *)a3);
        int v38 = *(char *)(a1 + 47);
        int v39 = *(char *)(a2 + 47);
        if (v39 >= 0) {
          size_t v40 = *(unsigned __int8 *)(a2 + 47);
        }
        else {
          size_t v40 = *(void *)(a2 + 32);
        }
        if (v39 >= 0) {
          size_t v41 = (const void *)(a2 + 24);
        }
        else {
          size_t v41 = *(const void **)(a2 + 24);
        }
        if (v38 >= 0) {
          size_t v42 = *(unsigned __int8 *)(a1 + 47);
        }
        else {
          size_t v42 = *(void *)(a1 + 32);
        }
        if (v38 >= 0) {
          BOOL v43 = (const void *)(a1 + 24);
        }
        else {
          BOOL v43 = *(const void **)(a1 + 24);
        }
        if (v42 >= v40) {
          size_t v44 = v40;
        }
        else {
          size_t v44 = v42;
        }
        int v45 = memcmp(v41, v43, v44);
        BOOL v46 = v40 < v42;
        if (v45) {
          BOOL v46 = v45 < 0;
        }
        if (v46)
        {
          *(void *)&double result = sub_22B26A54C((long long *)a1, (long long *)a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

BOOL sub_22B26AC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(char *)(a1 + 47);
      int v7 = *(char *)(a2 - 17);
      if (v7 >= 0) {
        size_t v8 = *(unsigned __int8 *)(a2 - 17);
      }
      else {
        size_t v8 = *(void *)(a2 - 32);
      }
      if (v7 >= 0) {
        int v9 = (const void *)(a2 - 40);
      }
      else {
        int v9 = *(const void **)(a2 - 40);
      }
      if (v6 >= 0) {
        size_t v10 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v10 = *(void *)(a1 + 32);
      }
      if (v6 >= 0) {
        int v11 = (const void *)(a1 + 24);
      }
      else {
        int v11 = *(const void **)(a1 + 24);
      }
      if (v10 >= v8) {
        size_t v12 = v8;
      }
      else {
        size_t v12 = v10;
      }
      int v13 = memcmp(v9, v11, v12);
      BOOL v14 = v8 < v10;
      if (v13) {
        BOOL v14 = v13 < 0;
      }
      if (v14) {
        sub_22B26A54C((long long *)a1, (long long *)(a2 - 64));
      }
      return 1;
    case 3:
      sub_22B26A650(a1, a1 + 64, a2 - 64);
      return 1;
    case 4:
      sub_22B26A854(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      sub_22B26AA0C(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      uint64_t v15 = a1 + 128;
      sub_22B26A650(a1, a1 + 64, a1 + 128);
      uint64_t v16 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    BOOL v19 = (long long *)(v16 + 24);
    size_t v22 = *(const void **)(v15 + 24);
    uint64_t v21 = v15 + 24;
    int v20 = v22;
    int v23 = *(char *)(v21 + 23);
    int v24 = *(char *)(v16 + 47);
    if (v24 >= 0) {
      size_t v25 = *(unsigned __int8 *)(v16 + 47);
    }
    else {
      size_t v25 = *(void *)(v16 + 32);
    }
    if (v24 >= 0) {
      size_t v26 = (const void *)(v16 + 24);
    }
    else {
      size_t v26 = *(const void **)(v16 + 24);
    }
    if (v23 >= 0) {
      size_t v27 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      size_t v27 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      BOOL v28 = (const void *)v21;
    }
    else {
      BOOL v28 = v20;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (v31)
    {
      long long v47 = *(_OWORD *)v16;
      int v48 = *(_DWORD *)(v16 + 16);
      long long v49 = *v19;
      uint64_t v50 = *(void *)(v16 + 40);
      *(void *)BOOL v19 = 0;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = 0;
      uint64_t v32 = v17;
      long long v51 = *(_OWORD *)(v16 + 48);
      while (1)
      {
        uint64_t v33 = a1 + v32;
        *(_OWORD *)(v33 + 192) = *(_OWORD *)(a1 + v32 + 128);
        *(_DWORD *)(v33 + 208) = *(_DWORD *)(a1 + v32 + 144);
        int v34 = (void **)(a1 + v32 + 216);
        if (*(char *)(a1 + v32 + 239) < 0) {
          operator delete(*v34);
        }
        *(_OWORD *)int v34 = *(_OWORD *)(v33 + 152);
        *(void *)(a1 + v32 + 232) = *(void *)(v33 + 168);
        *(unsigned char *)(v33 + 175) = 0;
        *(unsigned char *)(v33 + 152) = 0;
        *(_OWORD *)(v33 + 240) = *(_OWORD *)(v33 + 176);
        if (v32 == -128) {
          break;
        }
        uint64_t v35 = a1 + v32;
        int v36 = *(char *)(a1 + v32 + 111);
        if (v50 >= 0) {
          size_t v37 = HIBYTE(v50);
        }
        else {
          size_t v37 = *((void *)&v49 + 1);
        }
        if (v50 >= 0) {
          int v38 = &v49;
        }
        else {
          int v38 = (long long *)v49;
        }
        if (v36 >= 0) {
          size_t v39 = *(unsigned __int8 *)(a1 + v32 + 111);
        }
        else {
          size_t v39 = *(void *)(a1 + v32 + 96);
        }
        if (v36 >= 0) {
          size_t v40 = (const void *)(a1 + v32 + 88);
        }
        else {
          size_t v40 = *(const void **)(a1 + v32 + 88);
        }
        if (v39 >= v37) {
          size_t v41 = v37;
        }
        else {
          size_t v41 = v39;
        }
        int v42 = memcmp(v38, v40, v41);
        BOOL v43 = v37 < v39;
        if (v42) {
          BOOL v43 = v42 < 0;
        }
        v32 -= 64;
        if (!v43)
        {
          uint64_t v44 = v35 + 152;
          uint64_t v45 = a1 + v32 + 192;
          BOOL v46 = (_OWORD *)(v35 + 176);
          goto LABEL_65;
        }
      }
      uint64_t v44 = a1 + 24;
      BOOL v46 = (_OWORD *)(a1 + 48);
      uint64_t v45 = a1;
LABEL_65:
      *(_OWORD *)uint64_t v45 = v47;
      *(_DWORD *)(v45 + 16) = v48;
      if (*(char *)(v45 + 47) < 0) {
        operator delete(*(void **)v44);
      }
      *(_OWORD *)uint64_t v44 = v49;
      *(void *)(v44 + 16) = v50;
      *BOOL v46 = v51;
      if (++v18 == 8) {
        return v16 + 64 == a2;
      }
    }
    uint64_t v15 = v16;
    v17 += 64;
    v16 += 64;
    if (v16 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_22B26AFAC(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned char *a4, uint64_t a5, char a6)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  uint64_t v11 = a2[1];
  *a1 = v11;
  *(uint64_t *)((char *)a1 + *(void *)(v11 - 24)) = a2[2];
  *((_WORD *)a1 + 4) = 0;
  *((unsigned char *)a1 + 10) = a6;
  *(_DWORD *)((char *)a1 + 11) = 0;
  a1[2] = a5;
  *((unsigned char *)a1 + 29) = 1;
  *((_DWORD *)a1 + 8) = 0;
  *((_WORD *)a1 + 18) = 1;
  a1[9] = (uint64_t)(a1 + 11);
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  a1[10] = 0x800000000;
  a1[19] = 0;
  a1[20] = 0;
  uint64_t v12 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 32);
  if (*(void *)(v12 + 16)) {
    strlen(*(const char **)(v12 + 16));
  }
  *((_WORD *)a1 + 88) = 0;
  *((_WORD *)a1 + 94) = 0;
  a1[25] = (uint64_t)(a1 + 28);
  *((_OWORD *)a1 + 13) = xmmword_22B26F8E0;
  a1[29] = (uint64_t)(a1 + 31);
  a1[30] = 0x1000000000;
  a1[47] = 0;
  a1[48] = 0;
  a1[49] = 0;
  a1[50] = (uint64_t)(a1 + 52);
  a1[51] = 0x800000000;
  a1[68] = 0;
  a1[69] = (uint64_t)(a1 + 71);
  a1[70] = 0x800000000;
  llvm::DataLayout::reset();
  a1[75] = (uint64_t)(a1 + 77);
  a1[76] = 0x400000000;
  *((_DWORD *)a1 + 162) = 128;
  a1[79] = MEMORY[0x230F426A0](6144, 8);
  sub_22B235CEC((uint64_t)(a1 + 79));
  *((unsigned char *)a1 + 656) = 0;
  *((unsigned char *)a1 + 680) = 0;
  *((_DWORD *)a1 + 178) = 128;
  a1[87] = MEMORY[0x230F426A0](6144, 8);
  sub_22B22AB80((uint64_t)(a1 + 87));
  *((unsigned char *)a1 + 720) = 0;
  *((unsigned char *)a1 + 744) = 0;
  a1[97] = 0;
  a1[96] = 0;
  a1[95] = (uint64_t)(a1 + 96);
  a1[107] = 0;
  a1[106] = 0;
  *((_OWORD *)a1 + 49) = 0u;
  *((_OWORD *)a1 + 50) = 0u;
  *((_OWORD *)a1 + 51) = 0u;
  a1[104] = 0;
  a1[105] = (uint64_t)(a1 + 106);
  a1[110] = 0;
  a1[109] = 0;
  a1[108] = (uint64_t)(a1 + 109);
  a1[111] = (uint64_t)(a1 + 115);
  a1[112] = (uint64_t)(a1 + 115);
  a1[113] = 8;
  *((_DWORD *)a1 + 228) = 0;
  bzero(a1 + 123, 0x230uLL);
  for (uint64_t i = 0; i != 70; i += 7)
  {
    BOOL v14 = &a1[i];
    v14[123] = 4;
    *((_OWORD *)v14 + 62) = 0uLL;
    *((_OWORD *)v14 + 63) = 0uLL;
    v14[128] = 0;
    v14[129] = -1;
  }
  uint64_t v15 = 0;
  *(_OWORD *)(a1 + 209) = 0u;
  *(_OWORD *)(a1 + 211) = 0u;
  *(_OWORD *)(a1 + 205) = 0u;
  *(_OWORD *)(a1 + 207) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 203) = 0u;
  *(_OWORD *)(a1 + 197) = 0u;
  *(_OWORD *)(a1 + 199) = 0u;
  *(_OWORD *)(a1 + 193) = 0u;
  *(_OWORD *)(a1 + 195) = 0u;
  a1[213] = 0;
  do
  {
    uint64_t v16 = &a1[v15];
    v16[193] = 4;
    *((_OWORD *)v16 + 97) = 0uLL;
    *((_OWORD *)v16 + 98) = 0uLL;
    v16[198] = 0;
    v15 += 7;
    v16[199] = -1;
  }
  while (v15 != 21);
  uint64_t v17 = 0;
  a1[234] = 0;
  *((_OWORD *)a1 + 116) = 0u;
  *((_OWORD *)a1 + 115) = 0u;
  *((_OWORD *)a1 + 114) = 0u;
  *((_OWORD *)a1 + 113) = 0u;
  *((_OWORD *)a1 + 112) = 0u;
  *((_OWORD *)a1 + 111) = 0u;
  *((_OWORD *)a1 + 110) = 0u;
  *((_OWORD *)a1 + 109) = 0u;
  *((_OWORD *)a1 + 108) = 0u;
  *((_OWORD *)a1 + 107) = 0u;
  do
  {
    int v18 = &a1[v17];
    v18[214] = 4;
    BOOL v19 = &a1[v17 + 215];
    v18[219] = 0;
    *(_OWORD *)BOOL v19 = 0uLL;
    *((_OWORD *)v19 + 1) = 0uLL;
    v18[220] = -1;
    v17 += 7;
  }
  while (v17 != 21);
  uint64_t v20 = 0;
  *((_DWORD *)a1 + 470) = 0;
  do
  {
    a1[v20 + 236] = 4;
    *(_OWORD *)&a1[v20 + 237] = 0uLL;
    v20 += 3;
  }
  while (v20 != 9);
  a1[245] = (uint64_t)"agc.driver.api_texture.";
  *((_OWORD *)a1 + 123) = 0u;
  *((_OWORD *)a1 + 124) = 0u;
  *((_DWORD *)a1 + 500) = 1065353216;
  a1[251] = (uint64_t)"agc.driver.api_sampler.";
  *((_OWORD *)a1 + 126) = 0u;
  *((_OWORD *)a1 + 127) = 0u;
  *((_DWORD *)a1 + 512) = 1065353216;
  a1[257] = (uint64_t)"agc.driver.ab_texture.";
  *((_OWORD *)a1 + 129) = 0u;
  *((_OWORD *)a1 + 130) = 0u;
  *((_DWORD *)a1 + 524) = 1065353216;
  a1[263] = (uint64_t)"agc.driver.ab_sampler.";
  *((_OWORD *)a1 + 132) = 0u;
  *((_OWORD *)a1 + 133) = 0u;
  *((_DWORD *)a1 + 536) = 1065353216;
  a1[269] = (uint64_t)(a1 + 271);
  a1[270] = 0x200000000;
  a1[275] = 0;
  a1[274] = 0;
  a1[273] = (uint64_t)(a1 + 274);
  *((_DWORD *)a1 + 556) = 128;
  a1[276] = MEMORY[0x230F426A0](6144, 8);
  sub_22B2382F8((uint64_t)(a1 + 276));
  *((unsigned char *)a1 + 2232) = 0;
  *((unsigned char *)a1 + 2256) = 0;
  *((_OWORD *)a1 + 142) = 0u;
  *((_OWORD *)a1 + 143) = 0u;
  a1[288] = (uint64_t)(a1 + 290);
  a1[289] = 0x400000000;
  *((_WORD *)a1 + 1192) = 0;
  *((_DWORD *)a1 + 606) = 0;
  *(_OWORD *)(a1 + 299) = 0u;
  *(_OWORD *)(a1 + 301) = 0u;
  a1[196] = (uint64_t)"agc.sampler_words";
  uint64_t v21 = *a1;
  a1[197] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 1584);
  a1[198] = (uint64_t)"sampler_state";
  a1[199] = 0x100000040;
  a1[203] = (uint64_t)"agc.sampler_es1_lod_bias";
  a1[204] = *(uint64_t *)((char *)a1 + *(void *)(v21 - 24) + 160);
  a1[205] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 412) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v21 - 24) + 344) + 836);
  *((_DWORD *)a1 + 413) = 19;
  a1[210] = (uint64_t)"agc.sampler_unique_id";
  a1[211] = *(uint64_t *)((char *)a1 + *(void *)(v21 - 24) + 200);
  a1[212] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 426) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v21 - 24) + 344) + 836);
  *((_DWORD *)a1 + 427) = 98;
  a1[217] = (uint64_t)"agc.constant_sampler_words";
  a1[218] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v21 - 24) + 344) + 1584);
  a1[219] = (uint64_t)"constant_driver";
  a1[220] = 0x1200000040;
  a1[126] = (uint64_t)"agc.read_image_words";
  a1[127] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v21 - 24) + 344) + 1576);
  a1[128] = (uint64_t)"image_state";
  a1[129] = 64;
  a1[133] = (uint64_t)"agc.write_image_words";
  a1[134] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v21 - 24) + 344) + 1576);
  a1[135] = (uint64_t)"image_state";
  a1[136] = 0x600000040;
  a1[140] = (uint64_t)"agc.image_dim";
  a1[141] = llvm::FixedVectorType::get();
  a1[142] = (uint64_t)"driver_parameters";
  uint64_t v22 = *a1;
  *((_DWORD *)a1 + 286) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 836);
  *((_DWORD *)a1 + 287) = 11;
  a1[147] = (uint64_t)"agc.image_array_info";
  uint64_t Int8PtrTy = (void *)llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(void *)(v22 - 24) + 336), (llvm::LLVMContext *)2);
  uint64_t v24 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 192);
  std::string __p = Int8PtrTy;
  uint64_t v107 = v24;
  uint64_t v108 = v24;
  a1[148] = llvm::StructType::get();
  a1[149] = (uint64_t)"driver_parameters";
  uint64_t v25 = *a1;
  *((_DWORD *)a1 + 300) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 344) + 836);
  *((_DWORD *)a1 + 301) = 12;
  a1[161] = (uint64_t)"agc.image_mipmap_count";
  a1[162] = *(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 192);
  a1[163] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 328) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 344) + 836);
  *((_DWORD *)a1 + 329) = 16;
  a1[168] = (uint64_t)"agc.image_sample_count";
  a1[169] = *(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 192);
  a1[170] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 342) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 344) + 836);
  *((_DWORD *)a1 + 343) = 17;
  a1[154] = (uint64_t)"agc.image_pack_format";
  a1[155] = *(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 192);
  a1[156] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 314) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 344) + 836);
  *((_DWORD *)a1 + 315) = 13;
  a1[175] = (uint64_t)"agc.image_base_level";
  a1[176] = *(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 192);
  a1[177] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 356) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 344) + 836);
  *((_DWORD *)a1 + 357) = 62;
  a1[189] = (uint64_t)"agc.image_unique_id";
  a1[190] = *(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 200);
  a1[191] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 384) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 344) + 836);
  *((_DWORD *)a1 + 385) = 97;
  a1[182] = (uint64_t)"agc.image_heap_index";
  a1[183] = *(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 192);
  a1[184] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 370) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v25 - 24) + 344) + 836);
  *((_DWORD *)a1 + 371) = 93;
  uint64_t v26 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 320) = a3;
  *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v26 - 24) + 344) + 320) = *(uint64_t *)((char *)a1
                                                                                         + *(void *)(v26 - 24)
                                                                                         + 320);
  *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v26 - 24) + 344) + 328) = (char *)a1 + *(void *)(v26 - 24) + 592;
  *((unsigned char *)a1 + 24) = 1;
  size_t v27 = *(llvm::Module **)((char *)a1 + *(void *)(v26 - 24) + 320);
  std::string __p = "air.compile_options";
  __int16 v109 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v27, (const llvm::Twine *)&__p);
  if (NamedMetadata)
  {
    size_t v29 = (llvm::NamedMDNode *)NamedMetadata;
    unsigned int v30 = 0;
    while (v30 < llvm::NamedMDNode::getNumOperands(v29))
    {
      uint64_t Operand = llvm::NamedMDNode::getOperand(v29);
      ++v30;
      if (sub_22B1E1ED0(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)), "air.compile.fast_math_disable"))
      {
        *((unsigned char *)a1 + 24) = 0;
        break;
      }
    }
    llvm::NamedMDNode::eraseFromParent(v29);
  }
  uint64_t v32 = (uint64_t *)(a3 + 168);
  if (*(char *)(a3 + 191) < 0)
  {
    uint64_t v34 = *(void *)(a3 + 176);
    if (v34 != 20)
    {
      if (v34 != 22)
      {
LABEL_31:
        BOOL v40 = 0;
        goto LABEL_43;
      }
      uint64_t v32 = (uint64_t *)*v32;
LABEL_24:
      uint64_t v35 = (uint64_t *)*v32;
      uint64_t v36 = v32[1];
      uint64_t v37 = *(uint64_t *)((char *)v32 + 14);
      if (v35 == (uint64_t *)0x746E656D67617246 && v36 == 0x505F65746174535FLL && v37 == 0x6D6172676F72505FLL)
      {
        BOOL v40 = 1;
        goto LABEL_43;
      }
      goto LABEL_31;
    }
    uint64_t v32 = (uint64_t *)*v32;
  }
  else
  {
    int v33 = *(unsigned __int8 *)(a3 + 191);
    if (v33 != 20)
    {
      if (v33 != 22) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
  }
  size_t v41 = (uint64_t *)*v32;
  uint64_t v42 = v32[1];
  int v43 = *((_DWORD *)v32 + 4);
  BOOL v40 = v41 == (uint64_t *)0x535F786574726556 && v42 == 0x6F72505F65746174 && v43 == 1835102823;
LABEL_43:
  *((unsigned char *)a1 + 10) |= v40;
  BOOL v46 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 320);
  std::string __p = "air.language_version";
  __int16 v109 = 259;
  long long v47 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v46, (const llvm::Twine *)&__p);
  if (v47)
  {
    uint64_t v48 = llvm::NamedMDNode::getOperand(v47);
    if (v48)
    {
      if (sub_22B1E1ED0(*(llvm::MDString **)(v48 - 8 * *(unsigned int *)(v48 + 8)), "OpenGL ES GLSL")) {
        *((unsigned char *)a1 + 10) = 1;
      }
    }
  }
  long long v49 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 320);
  std::string __p = "air.version";
  __int16 v109 = 259;
  uint64_t v50 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v49, (const llvm::Twine *)&__p);
  if (v50) {
    llvm::NamedMDNode::eraseFromParent(v50);
  }
  char v51 = *((unsigned char *)a1 + 24);
  if (v51) {
    char v52 = 1;
  }
  else {
    char v52 = a6;
  }
  *((unsigned char *)a1 + 26) = v52;
  *((unsigned char *)a1 + 28) = v52;
  *((unsigned char *)a1 + 27) = v52;
  *((unsigned char *)a1 + 25) = v51;
  uint64_t v53 = *a1;
  unsigned int v54 = *(_DWORD *)((char *)a1 + 25);
  if (v54) {
    int v55 = -1;
  }
  else {
    int v55 = 16;
  }
  if ((v54 & 0x100) != 0) {
    v55 |= 6u;
  }
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 104) = v55 | (v54 >> 13) & 8;
  unsigned int v56 = *(_DWORD *)((char *)a1 + 25);
  if (v56) {
    int v57 = -1;
  }
  else {
    int v57 = 16;
  }
  if ((v56 & 0x100) != 0) {
    v57 |= 6u;
  }
  *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v53 - 24) + 344) + 104) = v57 | (v56 >> 13) & 8;
  uint64_t v58 = *(llvm::Module **)((char *)a1 + *(void *)(v53 - 24) + 320);
  char v59 = 1;
  HIBYTE(v109) = 1;
  if (*a4)
  {
    std::string __p = a4;
    char v59 = 3;
  }
  LOBYTE(v109) = v59;
  uint64_t v60 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v58, (const llvm::Twine *)&__p);
  a1[6] = (uint64_t)v60;
  uint64_t v61 = llvm::NamedMDNode::getOperand(v60);
  a1[20] = 0;
  size_t v62 = *(unsigned __int8 **)(v61 - 8 * *(unsigned int *)(v61 + 8));
  if (v62 && *v62 - 1 <= 1)
  {
    uint64_t v63 = *((void *)v62 + 16);
    if (*(unsigned char *)(v63 + 16)) {
      uint64_t v63 = 0;
    }
    a1[20] = v63;
  }
  size_t v64 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 320);
  std::string __p = "llvm.dbg.cu";
  __int16 v109 = 259;
  if (llvm::Module::getNamedMetadata(v64, (const llvm::Twine *)&__p))
  {
    *((unsigned char *)a1 + *(void *)(*a1 - 24) + 576) = 1;
    Subprograunint64_t m = (llvm::DILocalScope *)llvm::Function::getSubprogram((llvm::Function *)a1[20]);
    if (Subprogram)
    {
      llvm::DILocalScope::getNonLexicalBlockFileScope(Subprogram);
      a1[5] = llvm::DILocation::getImpl();
    }
  }
  BOOL v66 = (llvm::Value *)a1[20];
  uint64_t Name = (void *)llvm::Value::getName(v66);
  if (v68 == 23)
  {
    BOOL v69 = *Name == 0x747265762E726961 && Name[1] == 0x4668637465467865;
    if (v69 && *(void *)((char *)Name + 15) == 0x6E6F6974636E7546)
    {
      uint64_t v71 = *(void *)(a1[20] + 80);
      uint64_t v72 = v71 - 24;
      if (!v71) {
        uint64_t v72 = 0;
      }
      uint64_t v73 = *(void *)(v72 + 40);
      if (v73 == v72 + 40)
      {
        uint64_t v76 = 0;
      }
      else
      {
        uint64_t v74 = v73 - 24;
        if (v73) {
          uint64_t v75 = v73 - 24;
        }
        else {
          uint64_t v75 = 0;
        }
        if (*(unsigned __int8 *)(v75 + 16) - 29 >= 0xB) {
          uint64_t v76 = 0;
        }
        else {
          uint64_t v76 = v74;
        }
      }
      if (*(unsigned char *)(v76 + 16) == 29) {
        uint64_t v77 = v76;
      }
      else {
        uint64_t v77 = 0;
      }
      uint64_t v78 = *(_DWORD *)(v77 + 20) & 0x7FFFFFF;
      if (v78 && (uint64_t v79 = *(void *)(v77 - 32 * v78)) != 0)
      {
        int v80 = *(unsigned __int8 *)(v79 + 16);
      }
      else
      {
        uint64_t v81 = *(void *)(v77 + 24);
        uint64_t v79 = v81 - 24;
        if (v81) {
          uint64_t v82 = v81 - 24;
        }
        else {
          uint64_t v82 = 0;
        }
        int v80 = *(unsigned __int8 *)(v82 + 16);
      }
      if (v80 == 84)
      {
        uint64_t v83 = *(void *)(v79 - 32);
        if (!v83 || *(unsigned char *)(v83 + 16) || *(void *)(v83 + 24) != *(void *)(v79 + 72)) {
          uint64_t v83 = 0;
        }
        if (v83) {
          BOOL v66 = (llvm::Value *)v83;
        }
      }
    }
  }
  std::string __p = (void *)llvm::Function::getFnAttribute();
  if (llvm::Attribute::isStringAttribute((llvm::Attribute *)&__p))
  {
    ValueAsuint64_t String = llvm::Attribute::getValueAsString((llvm::Attribute *)&__p);
    if (v85 == 10 && *(void *)ValueAsString == 0x696F706563617274 && *(_WORD *)(ValueAsString + 8) == 29806) {
      *((unsigned char *)a1 + 37) = 1;
    }
  }
  size_t v87 = (void *)llvm::Value::getName(v66);
  if (v87)
  {
    size_t v87 = sub_22B1E2118(&__p, v87, v88);
    if (v108 >= 0) {
      p_p = &__p;
    }
    else {
      LOBYTE(p_p) = (_BYTE)__p;
    }
  }
  else
  {
    std::string __p = 0;
    uint64_t v107 = 0;
    p_p = &__p;
    uint64_t v108 = 0;
  }
  sub_22B1E69D0((uint64_t)v87, "------ Compiling function : %s ------", v89, v90, v91, v92, v93, v94, (char)p_p);
  if (SHIBYTE(v108) < 0) {
    operator delete(__p);
  }
  uint64_t v96 = a1[20];
  if (**(void **)(*(void *)(v96 + 24) + 16) != *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 144)) {
    a1[7] = *(void *)(v61 - 8 * *(unsigned int *)(v61 + 8) + 8);
  }
  uint64_t v97 = *(void *)(v96 + 96);
  if (v97)
  {
    uint64_t v98 = *(void *)(v61 - 8 * *(unsigned int *)(v61 + 8) + 16);
    a1[8] = v98;
    unint64_t v99 = *((unsigned int *)a1 + 20);
    if (v97 != v99)
    {
      if (v97 >= v99)
      {
        if (v97 > (unint64_t)*((unsigned int *)a1 + 21)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v99 != v97) {
          bzero((void *)(a1[9] + 8 * v99), 8 * v97 - 8 * v99);
        }
      }
      *((_DWORD *)a1 + 20) = v97;
      uint64_t v98 = a1[8];
    }
    unint64_t v100 = *(unsigned int *)(v98 + 8);
    if (v100)
    {
      for (unint64_t j = 0; j < v100; ++j)
      {
        uint64_t v102 = *(void *)(v98 - 8 * v100 + 8 * j);
        unsigned int v105 = 0;
        LODWORD(__p) = 0;
        sub_22B2437A8(0, v102, (unsigned int *)&__p, &v105);
        *(void *)(a1[9] + 8 * v105) = v102;
        uint64_t v98 = a1[8];
        unint64_t v100 = *(unsigned int *)(v98 + 8);
      }
    }
  }
  uint64_t v103 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v103 - 24)) = a2[3];
  return a1;
}