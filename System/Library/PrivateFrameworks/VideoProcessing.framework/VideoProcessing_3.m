uint64_t sub_1BBAFC88C(int a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, int a5, int *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  int v23;
  signed int v24;
  int v25;
  signed int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v30;
  unsigned char v35[128];
  uint64_t v36;
  uint64_t vars8;

  v36 = *MEMORY[0x1E4F143B8];
  v30 = (unsigned __int8 *)(a2 + 10560);
  v9 = *(void *)(a3 + 128);
  v8 = *(void *)(a3 + 136);
  v10 = *(void *)(a3 + 152);
  v11 = v9 != 0;
  v12 = v8 != 0;
  v13 = v10 != 0;
  if (!*(unsigned char *)(a2 + 12432)) {
    goto LABEL_21;
  }
  if (v9)
  {
    if (*(unsigned char *)(v9 + 224) == 34)
    {
      if (*(unsigned char *)(v9 + 208) == 34) {
        v11 = 0;
      }
      if (!v8)
      {
LABEL_15:
        v12 = 0;
        if (v10) {
          goto LABEL_16;
        }
        goto LABEL_19;
      }
    }
    else
    {
      v11 = 1;
      if (!v8) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    v11 = 0;
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(v8 + 224) == 34)
  {
    if (*(unsigned char *)(v8 + 208) == 34) {
      v12 = 0;
    }
    if (v10) {
      goto LABEL_16;
    }
  }
  else
  {
    v12 = 1;
    if (v10)
    {
LABEL_16:
      v13 = *(unsigned char *)(v10 + 224) != 34 || *(unsigned __int8 *)(v10 + 208) != 34;
      goto LABEL_21;
    }
  }
LABEL_19:
  v13 = 0;
LABEL_21:
  v14 = *(void *)(a3 + 216);
  v15 = *(_DWORD *)(a3 + 4);
  v16 = *(void *)(v14 + 136) + (16 * *(_DWORD *)a3);
  v17 = *(unsigned int *)(v14 + 248);
  v18 = v16 + (8 * v15 * v17);
  if (v13) {
    v19 = 8;
  }
  else {
    v19 = 0;
  }
  v20 = v19 | (2 * v12) | v11;
  off_1E9F83318(v16 + (8 * v15 * v17), v17, v35, v20);
  v21 = off_1E9F831E8(v18, v17, v35, 16) + a5;
  if (v21 >= 0x40000000) {
    v22 = 0x40000000;
  }
  else {
    v22 = v21;
  }
  if (!v11)
  {
    v23 = a5;
    v25 = 0;
    if (!v12) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  off_1E9F83320(v18, v17, v35, v20);
  v23 = a5;
  v24 = 3 * a5 + off_1E9F831E8(v18, v17, v35, 16);
  v25 = v24 < v22;
  if (v24 < v22) {
    v22 = v24;
  }
  if (v12)
  {
LABEL_31:
    off_1E9F83328(v18, v17, v35, v20);
    v26 = 3 * v23 + off_1E9F831E8(v18, v17, v35, 16);
    if (v26 < v22)
    {
      v22 = v26;
      v25 = 2;
    }
  }
LABEL_33:
  if (v12 && v13 && v11)
  {
    off_1E9F83330(v18, v17, v35, v20);
    if ((int)(5 * v23 + off_1E9F831E8(v18, v17, v35, 16)) < v22) {
      v25 = 3;
    }
  }
  v30[18] = v25;
  *v30 = 0;
  *a6 = v25;
  v27 = (unsigned __int8 *)(a2 + 928 * *v30 + 10576);
  *v27 = a4;
  v27[1] = byte_1BBB8A5E8[*(char *)(*(void *)(a3 + 40) + 56) + 12 + (uint64_t)a1];
  v28 = *(unsigned __int8 *)(a3 + 29);

  return sub_1BBB584C4(v27, v28);
}

void sub_1BBAFCBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v805 = *MEMORY[0x1E4F143B8];
  v734 = (unsigned __int8 *)(a3 + 10560);
  v8 = (unsigned char *)(a2 + 14164);
  uint64_t v9 = a1 + 205840;
  v10 = (_DWORD *)(a1 + 57096);
  if (*(unsigned char *)(*(void *)(a1 + 136) + 577) == 1)
  {
    unsigned int v715 = 0;
    int v711 = 0;
    int v11 = 0;
    uint64_t v12 = *(void *)(a4 + 216);
  }
  else
  {
    *(_OWORD *)__b = xmmword_1BBB855F8;
    *(_OWORD *)&__b[12] = *(long long *)((char *)&xmmword_1BBB855F8 + 12);
    uint64_t v12 = *(void *)(a4 + 216);
    int v13 = *(_DWORD *)(v12 + 4800);
    uint64_t v14 = *(void *)(v12 + 4920);
    if ((byte_1E9F82E25 & 1) == 0)
    {
      uint64_t v15 = 0;
      byte_1E9F82E25 = 1;
      int32x4_t v16 = (int32x4_t)xmmword_1BBB6FD00;
      int32x4_t v17 = (int32x4_t)xmmword_1BBB6FD10;
      int32x4_t v18 = (int32x4_t)xmmword_1BBB6FCF0;
      v19.i64[0] = 0x4040404040404040;
      v19.i64[1] = 0x4040404040404040;
      v20.i64[0] = 0x1000000010;
      v20.i64[1] = 0x1000000010;
      int32x4_t v21 = (int32x4_t)xmmword_1BBB6F6C0;
      do
      {
        *(int16x4_t *)v22.i8 = vshl_n_s16(vmovn_s32(v17), 5uLL);
        v22.u64[1] = (unint64_t)vshl_n_s16(vmovn_s32(v16), 5uLL);
        *(int16x4_t *)v23.i8 = vshl_n_s16(vmovn_s32(v21), 5uLL);
        v23.u64[1] = (unint64_t)vshl_n_s16(vmovn_s32(v18), 5uLL);
        *(int8x16_t *)&xmmword_1E9F82C25[v15] = vsubq_s8(v19, vrshrn_high_n_s16(vrshrn_n_s16(v23, 7uLL), v22, 7uLL));
        v15 += 16;
        int32x4_t v21 = vaddq_s32(v21, v20);
        int32x4_t v18 = vaddq_s32(v18, v20);
        int32x4_t v17 = vaddq_s32(v17, v20);
        int32x4_t v16 = vaddq_s32(v16, v20);
      }
      while (v15 != 128);
      uint64_t v24 = 0;
      int32x4_t v25 = (int32x4_t)xmmword_1BBB6FD20;
      int32x4_t v26 = (int32x4_t)xmmword_1BBB6FD30;
      int32x4_t v27 = (int32x4_t)xmmword_1BBB6FD40;
      int32x4_t v28 = (int32x4_t)xmmword_1BBB6FD50;
      v29.i64[0] = 0x2020202020202020;
      v29.i64[1] = 0x2020202020202020;
      v30.i64[0] = 0x1000000010;
      v30.i64[1] = 0x1000000010;
      int16x4_t v31 = vdup_n_s16(0x7840u);
      do
      {
        *(uint16x4_t *)v32.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v28), 4uLL), v31), 7uLL);
        v32.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v27), 4uLL), v31), 7uLL);
        *(uint16x4_t *)v33.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v26), 4uLL), v31), 7uLL);
        v33.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v25), 4uLL), v31), 7uLL);
        *(int8x16_t *)&xmmword_1E9F82C25[v24 + 128] = vsubq_s8(v29, vuzp1q_s8(v32, v33));
        v24 += 16;
        int32x4_t v28 = vaddq_s32(v28, v30);
        int32x4_t v27 = vaddq_s32(v27, v30);
        int32x4_t v26 = vaddq_s32(v26, v30);
        int32x4_t v25 = vaddq_s32(v25, v30);
      }
      while (v24 != 128);
      uint64_t v34 = 0;
      int32x4_t v35 = (int32x4_t)xmmword_1BBB6FD60;
      int32x4_t v36 = (int32x4_t)xmmword_1BBB6FD70;
      int32x4_t v37 = (int32x4_t)xmmword_1BBB6FD80;
      int32x4_t v38 = (int32x4_t)xmmword_1BBB6FD90;
      v39.i64[0] = 0x1010101010101010;
      v39.i64[1] = 0x1010101010101010;
      v40.i64[0] = 0x1000000010;
      v40.i64[1] = 0x1000000010;
      int16x4_t v41 = vdup_n_s16(0xF080u);
      do
      {
        *(uint16x4_t *)v42.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v38), 4uLL), v41), 8uLL);
        v42.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v37), 4uLL), v41), 8uLL);
        *(uint16x4_t *)v43.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v36), 4uLL), v41), 8uLL);
        v43.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v35), 4uLL), v41), 8uLL);
        *(int8x16_t *)&xmmword_1E9F82C25[v34 + 256] = vsubq_s8(v39, vuzp1q_s8(v42, v43));
        v34 += 16;
        int32x4_t v38 = vaddq_s32(v38, v40);
        int32x4_t v37 = vaddq_s32(v37, v40);
        int32x4_t v36 = vaddq_s32(v36, v40);
        int32x4_t v35 = vaddq_s32(v35, v40);
      }
      while (v34 != 256);
    }
    uint64_t v44 = 0;
    int v45 = 0;
    int v46 = 0;
    uint64_t v47 = *(int *)(a4 + 16);
    unsigned int v48 = *(_DWORD *)(a4 + 16);
    int v49 = v47 - 2;
    int v50 = v47 - 1;
    int v51 = v47 - v13;
    unsigned int v52 = v47 / v13;
    if (((int)v47 - 2) / v13 != v47 / v13) {
      int v49 = -1;
    }
    if (v50 / v13 != v52) {
      int v50 = -1;
    }
    *(_DWORD *)__b = v49;
    *(_DWORD *)&__b[4] = v50;
    unsigned int v53 = v52 - 1;
    if (((int)v47 + ~v13) / v13 == v52 - 1) {
      int v54 = v47 + ~v13;
    }
    else {
      int v54 = -1;
    }
    if (v51 / v13 == v53) {
      int v55 = v47 - v13;
    }
    else {
      int v55 = -1;
    }
    *(_DWORD *)&__b[8] = v54;
    *(_DWORD *)&__b[12] = v55;
    if ((v51 + 1) / v13 == v53) {
      int v56 = v51 + 1;
    }
    else {
      int v56 = -1;
    }
    if (((int)v47 - 2 * v13) / v13 == v52 - 2) {
      int v57 = v47 - 2 * v13;
    }
    else {
      int v57 = -1;
    }
    *(_DWORD *)&__b[16] = v56;
    *(_DWORD *)&__b[20] = v57;
    uint64_t v58 = *(void *)(v12 + 1472);
    do
    {
      int v59 = *(_DWORD *)&__b[v44];
      if (v59 <= 0) {
        int v59 = v47;
      }
      v46 += vaddvq_s32(*(int32x4_t *)(v58 + 16 * v59)) / 4;
      v45 += *(unsigned __int16 *)(v14 + 216 * v59 + 56);
      v44 += 4;
    }
    while (v44 != 20);
    int v60 = vaddvq_s32(*(int32x4_t *)(v58 + 16 * v47)) / 4;
    unsigned int v61 = v45 + *(unsigned __int16 *)(v14 + 216 * v48 + 56);
    unsigned int v715 = v61 / 6;
    if (v61 > 0xBFF) {
      int v62 = 0;
    }
    else {
      int v62 = xmmword_1E9F82C25[v61 / 6];
    }
    int v63 = v60 + v46;
    int v64 = (v60 + v46) / 6;
    int v711 = v64;
    if ((v63 - 6) >= 0xD2) {
      int v65 = 0;
    }
    else {
      int v65 = v64;
    }
    int v11 = v62 + v65;
  }
  int v66 = *(unsigned __int8 *)(a2 + 14184);
  if (*(unsigned char *)(a2 + 14184)) {
    BOOL v67 = v66 == 5;
  }
  else {
    BOOL v67 = 1;
  }
  char v68 = v67;
  int v738 = *(unsigned __int8 *)(a2 + 14184);
  BOOL v70 = v66 == 1 || v66 == 6;
  *(void *)(a4 + 72) = *(void *)(*(void *)v9 + 5016);
  *(_DWORD *)(a4 + 84) = v10[1];
  uint64_t v735 = v9;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)(*(void *)v9 + 1288);
  *(void *)(a4 + 96) = a1 + 280;
  *(void *)(a4 + 104) = *(void *)(a1 + 1016);
  uint64_t v725 = a3 + 12640;
  uint64_t v710 = a3 + 12896;
  off_1E9F83248(a3 + 12640, *(void *)(v12 + 128)+ (16 * *(_DWORD *)a4)+ (16 * *(_DWORD *)(a4 + 4) * *(_DWORD *)(v12 + 232)));
  *(void *)(*(void *)(a3 + 13040) + 16) = *(void *)(a2 + 14144);
  *(_DWORD *)(*(void *)(a3 + 13040) + 32) = *(_DWORD *)(a2 + 14160);
  *(unsigned char *)(*(void *)(a3 + 13040) + 36) = *v8;
  if (*(unsigned char *)(a4 + 188))
  {
    *(void *)(a3 + 14064) = *(void *)(a4 + 128);
    *(void *)(a3 + 14072) = *(void *)(a4 + 136);
    *(void *)(a3 + 14080) = *(void *)(a4 + 176);
    if (v734[3557]) {
      memcpy((void *)(a3 + 13088), *(const void **)(a4 + 192), 0x3D0uLL);
    }
    int v72 = *(_DWORD *)(*(void *)(a4 + 192) + 40)
        + *(_DWORD *)(*(void *)(a4 + 192) + 24)
        + 8 * (**(_DWORD **)(a4 + 192) - *(_DWORD *)(*(void *)(a4 + 192) + 8));
    *(_DWORD *)(a3 + 14088) = v72 & ~(v72 >> 31);
  }
  *(float *)&unint64_t v71 = a5 + 0.5;
  *(void *)(a3 + 13032) = a2 + 14128;
  uint64_t v783 = 0;
  uint64_t v782 = 0;
  long long v781 = xmmword_1BBB855E0;
  uint64_t v780 = 0;
  long long v779 = xmmword_1BBB855E0;
  BOOL v73 = 1;
  if (v738 == 2)
  {
    uint64_t v74 = v735;
  }
  else
  {
    uint64_t v74 = v735;
    if (v738 != 7) {
      BOOL v73 = *(unsigned char *)(a3 + 26) != 0;
    }
  }
  int v747 = (int)*(float *)&v71;
  int v75 = *(unsigned __int8 *)(v74 + 1842);
  char v76 = v68 ^ 1;
  if (!*(unsigned char *)(v74 + 1842)) {
    char v76 = 1;
  }
  if ((v76 & 1) == 0 && !*(unsigned char *)(*(void *)(a4 + 216) + 4992))
  {
    if (v75 == 3)
    {
      int v81 = *(_DWORD *)(a4 + 16);
      int v138 = *(_DWORD *)(v74 + 1844);
      if (v81 == v138)
      {
        BOOL v139 = 1;
        goto LABEL_239;
      }
      int v82 = v138 + v10[1] * *v10 / 2;
    }
    else
    {
      if (v75 != 1)
      {
        uint64_t v140 = *(unsigned int *)(v74 + 1872);
        if ((int)v140 < 1)
        {
          BOOL v139 = 0;
        }
        else
        {
          int v141 = *(_DWORD *)(a4 + 16);
          v142 = *(int **)(v74 + 1856);
          uint64_t v143 = v140 - 1;
          do
          {
            int v144 = *v142++;
            BOOL v139 = v141 == v144;
          }
          while (v141 != v144 && v143-- != 0);
        }
LABEL_239:
        int v216 = *(_DWORD *)(v74 + 2168);
        if (v216)
        {
          uint64_t v217 = 0;
          while (!*(_DWORD *)(v74 + 2164)
               || v216 <= (int)v217
               || v216 > 7
               || !*(_DWORD *)(a1 + 4 * (int)v217 + 208028)
               || *(_DWORD *)(a2 + 14176) != *(unsigned __int16 *)(a1 + 208012 + 2 * v217))
          {
            if (v216 == ++v217) {
              goto LABEL_249;
            }
          }
          BOOL v139 = 0;
        }
LABEL_249:
        int v77 = 0;
        if (v73 || v139)
        {
          char v78 = 1;
          int v729 = 0;
          goto LABEL_79;
        }
        goto LABEL_64;
      }
      int v81 = *(_DWORD *)(v74 + 1844);
      int v82 = *(_DWORD *)(a4 + 16);
    }
    BOOL v139 = v81 == v82;
    goto LABEL_239;
  }
  if (v73)
  {
    int v77 = 0;
    int v729 = 0;
    char v78 = 1;
LABEL_79:
    int v731 = 1;
    goto LABEL_80;
  }
  int v77 = *(unsigned __int8 *)(*(void *)(a4 + 216) + 4992);
LABEL_64:
  if (*(unsigned char *)(a3 + 24)) {
    char v79 = v68;
  }
  else {
    char v79 = 0;
  }
  if ((v79 & 1) == 0)
  {
    if (*(unsigned char *)(a3 + 25)) {
      int v80 = v70;
    }
    else {
      int v80 = 0;
    }
    if (v77) {
      int v80 = 1;
    }
    if (v80 != 1)
    {
      char v78 = 0;
      int v729 = 1;
      goto LABEL_79;
    }
  }
  char v78 = 0;
  int v731 = 0;
  int v729 = 1;
LABEL_80:
  v733 = (unsigned char *)(a2 + 47882);
  if (*(_DWORD *)(v74 + 2032) && !*(unsigned char *)(v74 + 2247) && *(_DWORD *)(v74 + 2040) > *(_DWORD *)(v74 + 2028))
  {
    a5 = a5 + a5;
    *(float *)&unint64_t v71 = a5 + 0.5;
    int v83 = (int)(float)(a5 + 0.5);
    if (v83 >= 51) {
      LOBYTE(v83) = 51;
    }
    LOBYTE(v747) = v83;
  }
  uint64_t v736 = a4;
  LOWORD(v71) = *(_WORD *)a3;
  double v84 = (double)v71;
  int v85 = *(unsigned __int16 *)(*(void *)(*(void *)v74 + 4696) + 2 * *(unsigned int *)(a4 + 16));
  int v86 = *(unsigned __int8 *)(*(void *)v74 + 1394);
  double v87 = (double)(int)(float)(a5 + -12.0);
  double v88 = exp2(v87 / 3.0);
  double v89 = sub_1BBB4E9DC(v88);
  double v90 = 1.0;
  if (!v86 && v85)
  {
    double v91 = sub_1BBB4E9DC(v87 / 6.0);
    double v92 = 4.0;
    if (v91 <= 4.0) {
      double v92 = v91;
    }
    if (v91 >= 2.0) {
      double v90 = v92;
    }
    else {
      double v90 = 2.0;
    }
  }
  v721 = (int *)(a2 + 50624);
  double v93 = sub_1BBB4E9DC(v89 * 0.680000007 * v90);
  if (v93 <= v84) {
    double v95 = v93;
  }
  else {
    double v95 = v84;
  }
  char v742 = v747 - *v733;
  uint64_t v96 = v736;
  if (v78)
  {
    uint64_t v97 = a3;
  }
  else
  {
    uint64_t v97 = a3;
    if (v738 != 2 && v738 != 7 && *(unsigned char *)(a3 + 28))
    {
      int v731 = 0;
      int v77 = 1;
      int v729 = 1;
    }
  }
  unsigned int v99 = *(_DWORD *)v736;
  unsigned int v98 = *(_DWORD *)(v736 + 4);
  uint64_t v100 = *(void *)(v736 + 216);
  uint64_t v101 = *(void *)(v100 + 4920);
  int v102 = *(_DWORD *)v736 + *(_DWORD *)(v100 + 4800) * v98;
  *(unsigned char *)(v101 + 216 * v102 + 71) = 100;
  if (!v729)
  {
    uint64_t v111 = 0;
    uint64_t v723 = 0;
    int v112 = 0;
    int v730 = 0;
    unsigned int v709 = 0;
    int v712 = 0;
    BOOL v113 = v77 != 0;
    int v114 = -1;
    char v115 = 1;
    int v116 = v738;
    goto LABEL_391;
  }
  *(void *)(*(void *)(v97 + 14096) + 1844) = *(void *)(v735 + 2252);
  uint64_t v103 = *(void *)(v97 + 120);
  uint64_t v104 = *(void *)(v97 + 128);
  v719 = (void *)(v97 + 128);
  v720 = (void *)(v97 + 120);
  v106 = (unsigned int *)(v97 + 92);
  unsigned int v105 = *(_DWORD *)(v97 + 92);
  unsigned int v107 = *(_DWORD *)(v97 + 96);
  v769 = (unsigned int *)(v97 + 96);
  if (*(unsigned char *)(a2 + 14184) && *(unsigned char *)(a2 + 14184) != 5)
  {
    if (v107)
    {
      uint64_t v117 = 0;
      do
      {
        uint64_t v118 = v104 + v117;
        if (*(unsigned char *)(v104 + v117 + 5) == 2 && *(unsigned char *)(v118 + 6) == 4) {
          *(unsigned char *)(v118 + 6) = 3;
        }
        *(unsigned char *)(v118 + 59) = v747;
        *(unsigned char *)(v118 + 58) = v742;
        *(double *)(v118 + 26544) = v95;
        *(void *)(v118 + 26832) = v104 + 26848 + v117;
        v117 += 30432;
      }
      while (30432 * v107 != v117);
    }
  }
  else if (v105)
  {
    uint64_t v108 = 0;
    uint64_t v109 = 30432 * v105;
    do
    {
      uint64_t v110 = v103 + v108;
      if (*(unsigned char *)(v103 + v108 + 5) == 2 && *(unsigned char *)(v110 + 6) == 4) {
        *(unsigned char *)(v110 + 6) = 3;
      }
      *(unsigned char *)(v110 + 59) = v747;
      *(unsigned char *)(v110 + 58) = v742;
      *(double *)(v110 + 26544) = v95;
      *(void *)(v110 + 26832) = v103 + 26848 + v108;
      v108 += 30432;
    }
    while (v109 != v108);
  }
  *(void *)(v736 + 88) = a2 + 16920;
  int v119 = (char)v747;
  if (*(_WORD *)(v97 + 2) == 1) {
    int v120 = (v11 * (char)v747 + 128) >> 8;
  }
  else {
    int v120 = 0;
  }
  uint64_t v121 = **(void **)(v736 + 224);
  if (*(unsigned char *)(*(void *)v735 + 16)) {
    char v122 = v70;
  }
  else {
    char v122 = 1;
  }
  int v123 = *(unsigned __int8 *)(a1 + 1057);
  int v124 = 1;
  if (v122)
  {
    int v116 = v738;
    if (*(unsigned char *)(a1 + 1057)) {
      goto LABEL_140;
    }
    goto LABEL_153;
  }
  int v116 = v738;
  if (v77)
  {
LABEL_139:
    if (*(unsigned char *)(a1 + 1057)) {
      goto LABEL_140;
    }
LABEL_153:
    BOOL v137 = 0;
    goto LABEL_170;
  }
  int v125 = v102;
  if (*(unsigned char *)(a1 + 1057) && *(unsigned char *)(v101 + 216 * v102 + 70))
  {
    int v77 = 0;
    v120 -= (char)v747 >> 1;
    int v124 = 1;
    goto LABEL_140;
  }
  if (!*(unsigned char *)(v101 + 216 * v102 + 68))
  {
    int v124 = 0;
    int v77 = 0;
    goto LABEL_139;
  }
  int v126 = *(_DWORD *)(v121 + 1276);
  if (v126 == *(_DWORD *)(v101 + 216 * v125 + 48)
    || *(unsigned __int8 *)(v101 + 216 * v125 + 66) >= 2u && v126 == *(_DWORD *)(v101 + 216 * v125 + 52))
  {
    int v77 = 0;
    if (*(unsigned char *)(v101 + 216 * v125 + 69)) {
      v120 -= ((char)v747 + 2) >> 2;
    }
  }
  else
  {
    int v77 = 0;
    v120 += (char)v747 >> 1;
  }
  int v124 = 1;
  if (!*(unsigned char *)(a1 + 1057)) {
    goto LABEL_153;
  }
LABEL_140:
  v127 = (unsigned __int16 *)(v121 + 19112);
  if (v123 == 2)
  {
    v128 = (unsigned __int16 *)(*(void *)v735 + 19124);
    v129 = (unsigned __int16 *)(*(void *)v735 + 19126);
    v130 = (unsigned __int16 *)(v121 + 19126);
    v127 = (unsigned __int16 *)(v121 + 19124);
  }
  else
  {
    v129 = (unsigned __int16 *)(*(void *)v735 + 19114);
    v130 = (unsigned __int16 *)(v121 + 19114);
    v128 = (unsigned __int16 *)(*(void *)v735 + 19112);
  }
  unsigned int v131 = *v129;
  unsigned int v132 = *v128;
  if (v121) {
    int v133 = *v127 * *v130;
  }
  else {
    int v133 = v132 * v131;
  }
  unsigned int v134 = 16 * v99;
  if (16 * v98 < v131 && v134 < v132 || v133 != v132 * v131) {
    goto LABEL_153;
  }
  BOOL v137 = *(unsigned char *)(v735 + 2246) == 1 && (v132 + 32 <= v134 || v131 + 32 <= 16 * v98) && v123 == 1;
  int v124 = 1;
  int v77 = 1;
LABEL_170:
  unsigned int v726 = 99999;
  if (*(unsigned char *)(a1 + 1627)
    && ((int v763 = v120, v99 < *(unsigned __int8 *)(*(void *)v735 + 19136))
     || v99 > *(unsigned __int8 *)(*(void *)v735 + 19137)
     || v98 < *(unsigned __int8 *)(*(void *)v735 + 19138)
     || v98 > *(unsigned __int8 *)(*(void *)v735 + 19139)))
  {
    int v77 = 1;
  }
  else
  {
    if (!v124)
    {
      int v712 = 0;
      unsigned int v709 = 0;
      int v730 = 0;
      BOOL v776 = 0;
      int v722 = 0;
      int v727 = v77;
      goto LABEL_353;
    }
    int v763 = v120;
  }
  uint64_t v786 = 0;
  *(void *)((char *)&v801 + 4) = 0;
  uint64_t v802 = 0;
  LODWORD(v801) = 0;
  int v146 = *(_DWORD *)(a2 + 14184);
  if (v747 >= 0x33u) {
    unsigned int v147 = 51;
  }
  else {
    unsigned int v147 = v747;
  }
  int v148 = *(unsigned __int8 *)(v97 + 9);
  long long v803 = 0u;
  long long v804 = 0u;
  long long v799 = 0u;
  long long v800 = 0u;
  int v785 = 0;
  BOOL v149 = v146 == 6 || v146 == 1;
  if (v146 == 6 || v146 == 1) {
    int v148 = *(unsigned __int8 *)(v97 + 12);
  }
  unsigned int v150 = byte_1BBB8BC9A[v147];
  uint64_t v780 = 0;
  long long v779 = xmmword_1BBB855E0;
  int v784 = 0;
  int v770 = v148;
  if (v148)
  {
    BOOL v151 = 1;
    LODWORD(v786) = 1;
    BOOL v761 = v149;
    if (v77)
    {
      int v722 = 0;
      goto LABEL_190;
    }
    int v722 = 0;
    if (v146 == 1 || v146 == 6)
    {
LABEL_190:
      v152 = v719;
      if (v146 != 1)
      {
        v152 = v719;
        if (v146 != 6) {
          v152 = v720;
        }
      }
      uint64_t v153 = *v152 + 30432 * *(unsigned int *)(v97 + 48);
      *(void *)(v736 + 40) = v153 + 4;
      *(void *)(v736 + 48) = v153 + 64;
      *(void *)(v736 + 176) = v153 + 26560;
      *(void *)(v736 + 56) = v153 + 28432;
      *(void *)(v736 + 312) = *(void *)(v153 + 26544);
      *(void *)(v736 + 2624) = v153 + 27120;
      *(void *)(v736 + 2632) = *(void *)(v153 + 29248);
      *(void *)(v736 + 2560) = *(void *)(v153 + 27104);
      *(void *)(v736 + 2568) = *(void *)(v153 + 27112);
      *(void *)(v736 + 2544) = v153 + 29664;
      *(void *)(v736 + 2552) = v153 + 30176;
      *(void *)(v736 + 2528) = v153 + 29280;
      *(void *)(v736 + 2536) = v153 + 29536;
      int v154 = *(unsigned __int8 *)(v736 + 188);
      *(void *)(v153 + 26808) = 0;
      *(void *)(v153 + 26800) = 0;
      *(void *)(v153 + 26816) = 0;
      *(void *)&long long v155 = 0x2222222222222222;
      *((void *)&v155 + 1) = 0x2222222222222222;
      *(_OWORD *)(v153 + 26768) = v155;
      *(_OWORD *)(v153 + 26784) = v155;
      if (v154)
      {
        *(unsigned char *)(v153 + 26736) = 0;
        *(_DWORD *)(v153 + 26737) = -1;
        *(unsigned char *)(v153 + 26741) = -1;
        *(unsigned char *)(v153 + 26759) = 0;
        *(void *)&long long v156 = 0x2020202020202020;
        *((void *)&v156 + 1) = 0x2020202020202020;
        *(_OWORD *)(v153 + 26688) = v156;
        *(_OWORD *)(v153 + 26704) = v156;
        *(_OWORD *)(v153 + 26560) = 0u;
        *(_OWORD *)(v153 + 26576) = 0u;
        *(_OWORD *)(v153 + 26592) = 0u;
        *(_OWORD *)(v153 + 26608) = 0u;
        *(_OWORD *)(v153 + 26624) = 0u;
        *(_OWORD *)(v153 + 26640) = 0u;
        *(_OWORD *)(v153 + 26656) = 0u;
        *(_OWORD *)(v153 + 26672) = 0u;
        *(void *)(v153 + 26720) = *(void *)(v153 + 26832);
        *(void *)(v153 + 26728) = 0;
      }
      sub_1BBB10A94(v736);
      sub_1BBB52BB8(v736, v157, v158, v159, v160, v161);
      if (v146 == 6 || v146 == 1)
      {
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        uint64_t v164 = *(void *)(v736 + 176);
        uint64_t v165 = *(void *)(v736 + 48) + 31;
        v166 = &v785;
        int v116 = v738;
        do
        {
          uint64_t v167 = *(void *)(v164 + 272) + v163;
          int v168 = *(unsigned __int8 *)(v167 + 8);
          int v169 = *(unsigned __int8 *)(v167 + 9);
          v170 = (_DWORD *)((char *)&v803 + v162);
          _DWORD *v170 = *(_DWORD *)v167;
          v170[1] = *(_DWORD *)(v167 + 4);
          v171 = (_DWORD *)((char *)&v799 + v162);
          LOBYTE(v170) = *(unsigned char *)(v165 + v163);
          _DWORD *v171 = v168;
          v171[1] = v169;
          *(unsigned char *)v166 = (_BYTE)v170;
          v166 = (int *)((char *)v166 + 1);
          v163 += 16;
          v162 += 8;
        }
        while (v163 != 64);
        if (!*(_DWORD *)(a2 + 17760))
        {
          int v172 = *(_DWORD *)(a2 + 14228);
          if (v172 != 32 && (v172 < (int)v799 || v172 < SDWORD2(v799) || v172 < (int)v800 || v172 < SDWORD2(v800)))
          {
            int v774 = (char)v747;
            int v712 = 0;
            unsigned int v709 = 0;
            BOOL v175 = 0;
            int v176 = 0;
            LODWORD(v786) = 0;
LABEL_298:
            BOOL v149 = v761;
            goto LABEL_299;
          }
        }
        BOOL v173 = 0;
        int v174 = 0;
        if (v151)
        {
LABEL_206:
          BOOL v151 = v173;
LABEL_214:
          BOOL v776 = v151;
          unsigned int v190 = *(_DWORD *)(v97 + 48);
          v191 = v719;
          if (v146 != 1)
          {
            v191 = v719;
            if (v146 != 6) {
              v191 = v720;
            }
          }
          uint64_t v192 = *v191;
          uint64_t v96 = v736;
          if (*(_DWORD *)(v736 + 2652))
          {
            int v193 = *(__int16 *)(*(void *)(*(void *)(v736 + 176) + 272) + 2);
            unsigned int v194 = *(_DWORD *)(v736 + 4);
            int v195 = 16 * v194;
            int v196 = 16 * v194 + (v193 >> 2);
            if ((v193 & 3) != 0)
            {
              int v197 = *(_DWORD *)(v736 + 2664);
              int v198 = *(_DWORD *)(v736 + 2668);
            }
            else
            {
              int v197 = *(_DWORD *)(v736 + 2672);
              int v198 = *(_DWORD *)(v736 + 2676);
            }
            BOOL v199 = v196 >= v197 && v196 + 15 <= v198;
            if (!v199)
            {
              int v712 = 0;
              unsigned int v709 = 0;
              int v730 = 0;
              int v727 = 0;
              goto LABEL_353;
            }
          }
          else
          {
            unsigned int v194 = *(_DWORD *)(v736 + 4);
            int v195 = 16 * v194;
          }
          int v766 = v77;
          unsigned int v726 = *(_DWORD *)(v97 + 48);
          unsigned int v200 = *(_DWORD *)v736;
          uint64_t v201 = *(void *)(v736 + 216);
          uint64_t v202 = v192 + 30432 * v190;
          uint64_t v203 = v202 + 29280;
          uint64_t v204 = v202 + 29536;
          uint64_t v205 = *(unsigned int *)(v201 + 232);
          uint64_t v206 = *(void *)(v201 + 128);
          uint64_t v207 = *(void *)(v201 + 136);
          uint64_t v208 = *(unsigned int *)(v201 + 248);
          uint64_t v789 = v203;
          uint64_t v791 = v204;
          int v790 = 16;
          int v792 = 16;
          if (v137) {
            goto LABEL_233;
          }
          uint64_t v752 = *(void *)(v97 + 14096);
          uint64_t v754 = v204;
          uint64_t v756 = v203;
          uint64_t v209 = 16 * v200;
          uint64_t v210 = v207 + v209 + 8 * v194 * v208;
          uint64_t v211 = v206 + v209 + (v205 * v195);
          int v212 = v734[3553] ? 0 : v174;
          unsigned int v746 = v194;
          unsigned int v744 = v200;
          uint64_t v748 = v192;
          unsigned int v750 = v190;
          sub_1BBB54220(v736, &v789, v212);
          int v774 = (char)v747;
          off_1E9F83388(v211, v205, v756, 16, &v793, 16);
          uint64_t v213 = v210;
          uint64_t v97 = a3;
          off_1E9F83388(v213, v208, v754, 16, &v798, 8);
          if (v766)
          {
LABEL_233:
            int v712 = 0;
            unsigned int v709 = 0;
            int v730 = 0;
            DWORD2(v801) = 0;
            uint64_t v780 = v802;
            long long v779 = v801;
            int v727 = 1;
            int v116 = v738;
            int v77 = v766;
            goto LABEL_353;
          }
          uint64_t v219 = *(void *)(v736 + 56) + 32;
          if (*(_WORD *)(a3 + 2) == 1) {
            unsigned int v220 = 26;
          }
          else {
            unsigned int v220 = 51;
          }
          if (v220 >= v747) {
            LOBYTE(v220) = v747;
          }
          int v221 = ((unint64_t)(2863311530 * v763) >> 32) - 2 * v763;
          int v222 = (char)(v220 + (v221 >> 1) + (v221 < 0));
          if (*(unsigned char *)(*(void *)(a1 + 136) + 577) == 1)
          {
            uint64_t v223 = **(void **)(v736 + 224);
            uint64_t v224 = *(_DWORD *)v736 + *(_DWORD *)(v223 + 4800) * *(_DWORD *)(v736 + 4);
            int v225 = *(char *)(*(void *)(v223 + 4920) + 216 * v224 + 71);
            if (v222 >= 40) {
              int v222 = 40;
            }
            int v226 = v222 & ~(v222 >> 31);
            if (v225 != 100)
            {
              int v227 = v225 - v226;
              if (v227 < 0) {
                int v227 = v226 - v225;
              }
              if (v227 < 3) {
                int v226 = *(char *)(*(void *)(v223 + 4920) + 216 * v224 + 71);
              }
            }
            *(unsigned char *)(*(void *)(*(void *)(v736 + 216) + 4920) + 216 * (int)v224 + 71) = v226;
            BOOL v175 = v776;
            if (*(unsigned char *)(*(void *)(a1 + 136) + 577) == 1 && *(unsigned char *)(v735 + 2247))
            {
              if (*(unsigned char *)(a2 + 15044) || *(unsigned char *)(a2 + 15076)) {
                int v228 = *(unsigned __int16 *)(*(void *)(*(void *)v735 + 4696) + 2 * *(unsigned int *)(v736 + 16)) >> 1;
              }
              else {
                LOBYTE(v228) = byte_1BBB85614[*(unsigned __int8 *)(*(void *)(*(void *)v735 + 4656)
              }
                                                                 + *(unsigned int *)(v736 + 16))]
                             + v147;
              unsigned int v229 = 0;
              int v228 = (char)v228;
              if ((char)v228 >= 51) {
                int v228 = 51;
              }
              if (v228 <= 22) {
                int v228 = 22;
              }
              goto LABEL_579;
            }
            int v228 = v226;
          }
          else
          {
            if (v222 >= 51) {
              int v419 = 51;
            }
            else {
              int v419 = v222;
            }
            int v226 = v419 & ~(v419 >> 31);
            int v228 = v226;
            BOOL v175 = v776;
          }
          unsigned int v229 = v763;
LABEL_579:
          sub_1BBB57F9C((uint64_t)&v793, v219, 0, ((char)v228 / 6u) & 0x1F | (32 * ((v228 - 6 * ((char)v228 / 6u)) & 7)), 0);
          if (v229)
          {
            int v784 = 1;
            unsigned int v420 = v229;
          }
          else
          {
            unsigned int v420 = 0;
          }
          sub_1BBB01DAC(v219, &v786, &v784, v420);
          if (!v786 && (!v229 || !v784)) {
            goto LABEL_590;
          }
          int v421 = *(char *)(*(void *)(v736 + 40) + 56) + (char)v226;
          int v422 = v421 >= 51 ? 51 : *(char *)(*(void *)(v736 + 40) + 56) + (char)v226;
          char v423 = byte_1BBB8A5B4[v422 - (v421 & (v421 >> 31))];
          __b[1] = (v423 / 6u) & 0x1F | (32 * (v423 % 6u));
          __b[0] = *(unsigned char *)(v736 + 28);
          sub_1BBB581E8(__b);
          sub_1BBB01EE4((uint64_t)__b, &v786, &v784, v229);
          int v176 = v786;
          if (v786)
          {
            int v712 = 0;
            unsigned int v709 = 0;
            int v424 = 0;
            int v116 = v738;
            int v77 = 0;
          }
          else
          {
LABEL_590:
            int v77 = 0;
            if (v734[3551])
            {
              sub_1BBB02180(v736, a3, *v721 + 1, (int *)&v786 + 1);
              sub_1BBB5B498(HIDWORD(v786), v725, v710, v756, v754, (uint64_t)&__dst, *(double *)(v748 + 30432 * v750 + 26544));
              int v176 = 0;
              unsigned int v709 = v788;
              int v424 = -1;
              int v712 = 1;
            }
            else
            {
              int v712 = 0;
              unsigned int v709 = 0;
              int v176 = 0;
              int v424 = -1;
            }
            int v116 = v738;
          }
          DWORD2(v801) = v424;
          uint64_t v780 = v802;
          long long v779 = v801;
          BOOL v149 = v761;
          if (v146 != 6 && v146 != 1 || !(v176 | v784)) {
            goto LABEL_299;
          }
          uint64_t v435 = *(void *)(v736 + 72);
          uint64_t v436 = *(unsigned int *)(v736 + 16);
          uint64_t v437 = v435 + 32 * v436;
          *(unsigned char *)(v437 + 27) = 1;
          *(_DWORD *)uint64_t v437 = v803;
          int v438 = DWORD1(v803);
          *(_WORD *)(v437 + 24) = 8224;
          *(_DWORD *)(v437 + 4) = v438;
          uint64_t v439 = v785;
          *(unsigned char *)(v437 + 26) = v785;
          if (v439 != 6)
          {
            *(_DWORD *)(v437 + 4 * (v439 - 4) + 8) = off_1E9F831A0(v725, 16, v756, 16);
            BOOL v149 = v761;
            *(unsigned char *)(v437 + v439 - 4 + 24) = 0;
            uint64_t v97 = a3;
            int v116 = v738;
            BOOL v175 = v776;
            goto LABEL_299;
          }
          if (*(unsigned char *)(*(void *)(v736 + 48) + 272) == 4)
          {
            uint64_t v440 = v435 + 32 * v436;
            *(_DWORD *)(v440 + 8) = off_1E9F831A0(v725, 16, v752 + 2416, 16);
            *(_DWORD *)(v440 + 12) = off_1E9F831A0(v725, 16, v752 + 2672, 16);
          }
          else
          {
            off_1E9F82E80(**(void **)(v736 + 224), &v803, v744, v746, v725, &__dst, 0, 0);
            uint64_t v441 = v435 + 32 * v436;
            *(_DWORD *)(v441 + 8) = __dst.u16[1] + __dst.u16[0] + __dst.u16[2] + __dst.u16[3];
            off_1E9F82E80(**(void **)(v736 + 232), (char *)&v803 + 4, v744, v746, v725, &__dst, 0, 0);
            *(_DWORD *)(v441 + 12) = __dst.u16[1] + __dst.u16[0] + __dst.u16[2] + __dst.u16[3];
          }
          *(unsigned char *)(v437 + 24) = 0;
          *(unsigned char *)(v437 + 25) = 0;
          uint64_t v97 = a3;
          int v116 = v738;
          BOOL v175 = v776;
          goto LABEL_298;
        }
LABEL_297:
        int v774 = (char)v747;
        int v712 = 0;
        unsigned int v709 = 0;
        int v176 = 0;
        BOOL v175 = v173;
        goto LABEL_298;
      }
      int v116 = v738;
      if (v77)
      {
        int v174 = 0;
        BOOL v151 = 1;
        goto LABEL_214;
      }
      int v214 = **(_DWORD **)(*(void *)(v736 + 176) + 272);
      uint64_t v215 = *(void *)(v97 + 14096);
      if (*(_DWORD *)(v215 + 560) == v214) {
        int v174 = *(unsigned __int8 *)(v215 + 2936);
      }
      else {
        int v174 = 0;
      }
      int v230 = *(_DWORD *)(v215 + 80);
      int v231 = (__int16)v214 - (__int16)v230;
      if (v231 < 0) {
        int v231 = (__int16)v230 - (__int16)v214;
      }
      int v232 = (v214 >> 16) - (v230 >> 16);
      if (v232 < 0) {
        int v232 = -v232;
      }
      unsigned int v233 = v231 + v232;
      if (v147 >= 0x25 && *(unsigned char *)(v735 + 2247))
      {
        if (v233 < 5) {
          goto LABEL_292;
        }
      }
      else if (v233 < 3)
      {
LABEL_292:
        if (*(unsigned char *)(*(void *)(a1 + 136) + 577) == 1 && v763 <= -3 && v233 <= 0xF)
        {
          LODWORD(v786) = 1;
          goto LABEL_214;
        }
        BOOL v173 = v151;
        if (v151) {
          goto LABEL_206;
        }
        goto LABEL_297;
      }
      BOOL v151 = 0;
      LODWORD(v786) = 0;
      goto LABEL_292;
    }
    int v774 = (char)v747;
    v758 = (unsigned int *)(v97 + 92);
    uint64_t v177 = *(void *)(v97 + 120);
    sub_1BBB4AD34(*(void *)(a3 + 14096), v736, a1, a3, a2, v177 + 30432 * *(unsigned int *)(v97 + 48) + 29280, v150);
    v178 = (void *)(v177 + 30432 * *(unsigned int *)(a3 + 84));
    *(void *)(v736 + 40) = (char *)v178 + 4;
    *(void *)(v736 + 48) = v178 + 8;
    *(void *)(v736 + 176) = v178 + 3320;
    *(void *)(v736 + 56) = v178 + 3554;
    *(void *)(v736 + 312) = v178[3318];
    *(void *)(v736 + 2624) = v178 + 3390;
    *(void *)(v736 + 2632) = v178[3656];
    *(void *)(v736 + 2560) = v178[3388];
    *(void *)(v736 + 2568) = v178[3389];
    *(void *)(v736 + 2544) = v178 + 3708;
    *(void *)(v736 + 2552) = v178 + 3772;
    *(void *)(v736 + 2528) = v178 + 3660;
    *(void *)(v736 + 2536) = v178 + 3692;
    v179 = *(int32x2_t **)(a3 + 14096);
    int32x2_t v180 = v179[232];
    uint64_t v181 = *(void *)(*(void *)&v180 + 72);
    uint64_t v182 = v179[233].u32[0];
    *(unsigned char *)(*(void *)(*(void *)&v180 + 48) + 24) = 0;
    v179[433].i32[0] = 0;
    sub_1BBB4B400(v179, 0);
    uint64_t v183 = v179[433].u32[0];
    v179[446].i32[v183] = 0;
    v179[449].i16[v183 + 2] = 0;
    v179[v183 + 452].i32[0] = 0;
    sub_1BBB4B894((uint64_t)v179, 0, 0, 0);
    v179[412].i32[0] = -1;
    v179[412].i16[2] = -1;
    sub_1BBB4BB30((uint64_t)v179, 0, 0, 0);
    *(_DWORD *)(v181 + 32 * v182 + 20) = v179[409].i32[0];
    sub_1BBB4C220((uint64_t)v179, 0);
    sub_1BBB4C804((uint64_t)v179, 0);
    v179[130].i32[dword_1BBB8D538[v179[433].u32[0]]] = v179[412].i32[0];
    v179[196].i16[dword_1BBB8D538[v179[433].u32[0]]] = v179[412].i16[2];
    v179[10].i32[dword_1BBB8D538[v179[433].u32[0]]] = v179[413].i32[0];
    uint64_t v184 = v179[433].u32[0];
    uint64_t v185 = dword_1BBB8D538[v184];
    v179[446].i32[v184] += v179[130].i32[v185];
    v179[449].i16[v184 + 2] += v179[196].i16[v185];
    uint64_t v97 = a3;
    sub_1BBB4CA04((uint64_t)v179);
    uint64_t v186 = *(void *)(a3 + 14096);
    unsigned int v187 = *(_DWORD *)(v186 + 1040)
         - (*(unsigned __int16 *)(*(void *)(v186 + 1816)
                                + 2 * ((__int16)*(_DWORD *)(v186 + 80) - (__int16)*(_DWORD *)(v186 + 560)))
          + *(unsigned __int16 *)(*(void *)(v186 + 1816)
                                + 2 * ((*(int *)(v186 + 80) >> 16) - (*(int *)(v186 + 560) >> 16))));
    int v188 = *(_DWORD *)(v186 + 1840);
    if (*(unsigned char *)(*(void *)(a1 + 136) + 577) == 1) {
      int v189 = 700;
    }
    else {
      int v189 = 300;
    }
    unsigned int v218 = v188 * v189;
    int v722 = 1;
    BOOL v151 = v187 < v218;
    LODWORD(v786) = v151;
    int v116 = v738;
    v106 = v758;
    BOOL v149 = v761;
    if (v187 < v218)
    {
      int v77 = 0;
      goto LABEL_190;
    }
    int v712 = 0;
    unsigned int v709 = 0;
    BOOL v175 = 0;
    int v176 = 0;
    int v77 = 0;
  }
  else
  {
    int v774 = (char)v747;
    int v712 = 0;
    unsigned int v709 = 0;
    BOOL v175 = 0;
    int v722 = 0;
    int v176 = 0;
  }
LABEL_299:
  char v234 = !v149;
  if (v176) {
    char v234 = 1;
  }
  BOOL v776 = v175;
  if (v234)
  {
    int v727 = v176;
    uint64_t v96 = v736;
    int v119 = v774;
  }
  else
  {
    if (*(unsigned char *)(v97 + 13))
    {
      unsigned int v726 = *(_DWORD *)(v97 + 44);
      uint64_t v764 = *(void *)(v97 + 128);
      uint64_t v235 = v764 + 30432 * v726;
      *(void *)(v736 + 40) = v235 + 4;
      *(void *)(v736 + 48) = v235 + 64;
      *(void *)(v736 + 176) = v235 + 26560;
      *(void *)(v736 + 56) = v235 + 28432;
      *(void *)(v736 + 312) = *(void *)(v235 + 26544);
      *(void *)(v736 + 2624) = v235 + 27120;
      *(void *)(v736 + 2632) = *(void *)(v235 + 29248);
      *(void *)(v736 + 2560) = *(void *)(v235 + 27104);
      *(void *)(v736 + 2568) = *(void *)(v235 + 27112);
      *(void *)(v736 + 2544) = v235 + 29664;
      *(void *)(v736 + 2552) = v235 + 30176;
      uint64_t v236 = v235 + 29280;
      *(void *)(v736 + 2528) = v235 + 29280;
      *(void *)(v736 + 2536) = v235 + 29536;
      int v237 = *(unsigned __int8 *)(v736 + 188);
      *(void *)(v235 + 26808) = 0;
      *(void *)(v235 + 26800) = 0;
      *(void *)(v235 + 26816) = 0;
      *(void *)&long long v238 = 0x2222222222222222;
      *((void *)&v238 + 1) = 0x2222222222222222;
      *(_OWORD *)(v235 + 26768) = v238;
      *(_OWORD *)(v235 + 26784) = v238;
      if (v237)
      {
        *(unsigned char *)(v235 + 26736) = 0;
        *(_DWORD *)(v235 + 26737) = -1;
        *(unsigned char *)(v235 + 26741) = -1;
        *(unsigned char *)(v235 + 26759) = 0;
        *(void *)&long long v239 = 0x2020202020202020;
        *((void *)&v239 + 1) = 0x2020202020202020;
        *(_OWORD *)(v235 + 26688) = v239;
        *(_OWORD *)(v235 + 26704) = v239;
        *(_OWORD *)(v235 + 26560) = 0u;
        *(_OWORD *)(v235 + 26576) = 0u;
        *(_OWORD *)(v235 + 26592) = 0u;
        *(_OWORD *)(v235 + 26608) = 0u;
        *(_OWORD *)(v235 + 26624) = 0u;
        *(_OWORD *)(v235 + 26640) = 0u;
        *(_OWORD *)(v235 + 26656) = 0u;
        *(_OWORD *)(v235 + 26672) = 0u;
        *(void *)(v235 + 26720) = *(void *)(v235 + 26832);
        *(void *)(v235 + 26728) = 0;
      }
      uint64_t v240 = *(void *)(v736 + 48);
      v759 = v106;
      int v767 = v77;
      if (v770)
      {
        int v241 = *(unsigned __int8 *)(v240 + 272);
        sub_1BBB10A94(v736);
        if (v241 == 16)
        {
          v247.n128_f32[0] = sub_1BBB52BB8(v736, v242, v243, v244, v245, v246);
          uint64_t v248 = 0;
          uint64_t v249 = *(void *)(v736 + 176);
          v250 = (_DWORD *)&v799 + 1;
          v251 = (_DWORD *)&v803 + 1;
          do
          {
            uint64_t v252 = *(void *)(v249 + 272) + 16 * dword_1BBB701E0[v248];
            *(v251 - 1) = *(_DWORD *)v252;
            _DWORD *v251 = *(_DWORD *)(v252 + 4);
            v251 += 2;
            int v253 = *(unsigned __int8 *)(v252 + 8);
            LODWORD(v252) = *(unsigned __int8 *)(v252 + 9);
            *(v250 - 1) = v253;
            _DWORD *v250 = v252;
            *((unsigned char *)&v785 + v248++) = *(unsigned char *)(v240 + 31);
            v250 += 2;
          }
          while (v248 != 4);
        }
        else
        {
          uint64_t v266 = 0;
          v267 = (unsigned __int8 *)&v799 + 4;
          v268 = (unsigned char *)(v240 + 31);
          v269 = &v803;
          do
          {
            int v270 = *((unsigned __int8 *)&v785 + v266);
            unsigned char *v268 = v270;
            unsigned int v271 = *(v267 - 4);
            *(v268 - 7) = v271;
            unsigned int v272 = *v267;
            v267 += 8;
            *(v268 - 6) = v272;
            *(void *)(v268 - 15) = 0;
            sub_1BBAF3090(v736, v269, v270, v271, v272, v266++);
            v269 = (long long *)((char *)v269 + 8);
            v268 += 16;
          }
          while (v266 != 4);
        }
      }
      else
      {
        sub_1BBB10A94(v736);
        v247.n128_f32[0] = sub_1BBB52BB8(v736, v254, v255, v256, v257, v258);
        uint64_t v259 = 0;
        uint64_t v260 = *(void *)(v736 + 176);
        v261 = (_DWORD *)&v799 + 1;
        v262 = (_DWORD *)&v803 + 1;
        do
        {
          if (*(unsigned char *)(v240 + 272) == 16) {
            int v263 = dword_1BBB701E0[v259];
          }
          else {
            int v263 = v259;
          }
          uint64_t v264 = *(void *)(v260 + 272) + 16 * v263;
          *(v262 - 1) = *(_DWORD *)v264;
          _DWORD *v262 = *(_DWORD *)(v264 + 4);
          v262 += 2;
          int v265 = *(unsigned __int8 *)(v264 + 8);
          LODWORD(v264) = *(unsigned __int8 *)(v264 + 9);
          *(v261 - 1) = v265;
          _DWORD *v261 = v264;
          *((unsigned char *)&v785 + v259++) = *(unsigned char *)(v240 + 31);
          v261 += 2;
        }
        while (v259 != 4);
      }
      *(unsigned char *)(*(void *)(v736 + 40) + 1) = 3;
      *(unsigned char *)(*(void *)(v736 + 40) + 2) = 0;
      if (v770)
      {
        uint64_t v236 = v764 + 30432 * *(unsigned int *)(a3 + 48) + 29280;
      }
      else
      {
        *(void *)__b = v235 + 29280;
        *(void *)&__b[16] = v235 + 29536;
        *(_DWORD *)&__b[8] = 16;
        *(_DWORD *)&__b[24] = 16;
        sub_1BBB5418C(v736, (uint64_t *)__b);
        sub_1BBB02180(v736, a3, *v721 + 1, (int *)&v786 + 1);
      }
      if (v784)
      {
        DWORD2(v801) = 0;
      }
      else
      {
        DWORD2(v801) = v150;
        if (*(_DWORD *)(a2 + 17760) == 1)
        {
          for (uint64_t i = 0; i != 4; ++i)
          {
            int v274 = off_1E9F831B8(v725 + dword_1BBB701F0[i], 16, v236 + dword_1BBB701F0[i], 16, v247);
            *(_DWORD *)&__b[i * 4] = v274;
            DWORD2(v801) += v274;
          }
        }
        else
        {
          uint64_t v275 = 0;
          int v276 = *(_DWORD *)(a2 + 14228);
          v277 = &v799;
          do
          {
            if (v276 == 32 || v276 >= *(_DWORD *)v277)
            {
              int v278 = off_1E9F831B8(v725 + dword_1BBB701F0[v275], 16, v236 + dword_1BBB701F0[v275], 16, v247);
              *(_DWORD *)&__b[v275 * 4] = v278;
              unsigned int v150 = DWORD2(v801);
            }
            else
            {
              int v278 = 0x10000000;
              *(_DWORD *)&__b[v275 * 4] = 0x10000000;
            }
            v150 += v278;
            DWORD2(v801) = v150;
            ++v275;
            v277 = (long long *)((char *)v277 + 8);
          }
          while (v275 != 4);
        }
      }
      uint64_t v96 = v736;
      if (v734[3557] == 2)
      {
        *(unsigned char *)(v235 + 7) = 0;
        sub_1BBAFA9D0(v235, v736, a2, (uint64_t)&v801);
      }
      long long v779 = v801;
      uint64_t v780 = v802;
      uint64_t v97 = a3;
      int v116 = v738;
      v106 = v759;
      int v119 = v774;
      int v77 = v767;
    }
    else
    {
      int v785 = 0;
      memset_pattern16(__b, &unk_1BBB70200, 0x10uLL);
      int v784 = 0;
      uint64_t v96 = v736;
      int v119 = v774;
    }
    uint64_t v279 = 0;
    uint64_t v280 = *(void *)(v97 + 14096);
    *(unsigned char *)(v280 + 3560) = 0;
    do
    {
      uint64_t v281 = v280 + 8 * v279;
      *(void *)(v281 + 3476) = *((void *)&v803 + v279);
      *(void *)(v281 + 3508) = *((void *)&v799 + v279);
      *(_DWORD *)(v280 + 4 * v279 + 3540) = *(_DWORD *)&__b[4 * v279];
      *(unsigned char *)(v280 + 3556 + v279) = *((unsigned char *)&v785 + v279);
      ++v279;
    }
    while (v279 != 4);
    if (*(unsigned char *)(v280 + 3556) == 6
      && *(unsigned char *)(v280 + 3557) == 6
      && *(unsigned char *)(v280 + 3558) == 6
      && *(unsigned char *)(v280 + 3559) == 6)
    {
      int v282 = *(_DWORD *)(v280 + 3476);
      if (v282 == *(_DWORD *)(v280 + 3484) && v282 == *(_DWORD *)(v280 + 3492) && v282 == *(_DWORD *)(v280 + 3500))
      {
        int v283 = *(_DWORD *)(v280 + 3480);
        if (v283 == *(_DWORD *)(v280 + 3488) && v283 == *(_DWORD *)(v280 + 3496) && v283 == *(_DWORD *)(v280 + 3504)) {
          *(unsigned char *)(v280 + 3560) = 1;
        }
      }
    }
    int v727 = v786;
  }
  int v730 = v784;
LABEL_353:
  if (v726 == *(_DWORD *)(v97 + 48) && v727)
  {
    int v731 = 0;
    switch(v116)
    {
      case 0:
      case 5:
        v284 = *(_DWORD **)(a2 + 47888);
        goto LABEL_358;
      case 1:
      case 6:
        v284 = (_DWORD *)(*(void *)(a2 + 47888) + 4);
LABEL_358:
        int v731 = 0;
        ++*v284;
        break;
      default:
        break;
    }
  }
  if (!v77)
  {
    uint64_t v285 = 22;
    if (!v776) {
      uint64_t v285 = 14;
    }
    ++**(_DWORD **)&v733[v285];
  }
  if (v727)
  {
    int v112 = 0;
    uint64_t v723 = 0;
    goto LABEL_365;
  }
  LODWORD(v723) = 0;
  char v708 = 1;
  if (v731 && *(unsigned char *)(*(void *)(a1 + 136) + 577) == 1)
  {
    if (!*(unsigned char *)(a2 + 10))
    {
LABEL_472:
      uint64_t v723 = 0;
      char v708 = 1;
      goto LABEL_623;
    }
    uint64_t v286 = *(void *)(v96 + 128);
    uint64_t v287 = *(void *)(v96 + 136);
    uint64_t v288 = *(void *)(v96 + 144);
    uint64_t v289 = *(void *)(v96 + 152);
    if (v286)
    {
      if (*(unsigned char *)(v286 + 224) == 34)
      {
        BOOL v290 = *(unsigned __int8 *)(v286 + 208) != 34;
        if (!v287) {
          goto LABEL_376;
        }
LABEL_454:
        if (*(unsigned char *)(v287 + 224) == 34)
        {
          BOOL v291 = *(unsigned __int8 *)(v287 + 208) != 34;
          if (!v288) {
            goto LABEL_456;
          }
        }
        else
        {
          BOOL v291 = 1;
          if (!v288) {
            goto LABEL_456;
          }
        }
LABEL_377:
        if (*(unsigned char *)(v288 + 224) == 34)
        {
          BOOL v292 = *(unsigned __int8 *)(v288 + 208) != 34;
          if (!v289)
          {
LABEL_379:
            BOOL v293 = 0;
            goto LABEL_467;
          }
        }
        else
        {
          BOOL v292 = 1;
          if (!v289) {
            goto LABEL_379;
          }
        }
LABEL_457:
        BOOL v293 = *(unsigned char *)(v289 + 224) != 34 || *(unsigned __int8 *)(v289 + 208) != 34;
LABEL_467:
        if ((v291 + v290 + v292 + v293) >= 2)
        {
          int v343 = v116;
          BOOL v344 = 0;
          if (v343 != 2 && v343 != 7)
          {
            if (*(unsigned char *)(v97 + 4))
            {
              BOOL v344 = 0;
            }
            else
            {
              unint64_t v425 = 0;
              uint64_t v426 = *(unsigned int *)(v96 + 16);
              int v427 = v426 - *(_DWORD *)(a2 + 14176);
              *(void *)__b = *(void *)(v96 + 128);
              *(void *)&__b[8] = v287;
              *(void *)&__b[16] = v288;
              *(void *)&__b[24] = v289;
              BOOL v428 = 1;
              do
              {
                uint64_t v429 = *(void *)&__b[8 * v425];
                if (v429 && *(unsigned char *)(v429 + 208) != 34) {
                  break;
                }
                BOOL v428 = v425++ < 3;
              }
              while (v425 != 4);
              if (v738 != 5 && v738)
              {
                char v434 = 0;
              }
              else
              {
                uint64_t v430 = **(void **)(v96 + 224);
                unint64_t v431 = *(void *)(*(void *)(v430 + 1256) + 8 * v426);
                BOOL v199 = v430 + 1184 > v431;
                unint64_t v432 = v430 + 1216;
                char v434 = !v199 && v431 <= v432;
              }
              BOOL v344 = 0;
              if (v427 >= 5 && !v428 && (v434 & 1) == 0) {
                BOOL v344 = v427 >= 3 * *(_DWORD *)(a2 + 50628);
              }
            }
          }
          if (v119 >= 51) {
            uint64_t v442 = 51;
          }
          else {
            uint64_t v442 = v119;
          }
          uint64_t v443 = byte_1BBB8BC9A[(int)v442];
          LOBYTE(v747) = v442;
          sub_1BBB02278(v442, v742, v97, v96, v95);
          HIDWORD(v723) = v443;
          sub_1BBAFAC4C(a1, a2, v97, v96, (uint64_t)&v783, (uint64_t)&v781, v344, v443, 0x40000000u);
          char v708 = 0;
          LODWORD(v723) = 1;
          int v116 = v738;
          goto LABEL_623;
        }
        goto LABEL_472;
      }
      BOOL v290 = 1;
      if (v287) {
        goto LABEL_454;
      }
    }
    else
    {
      BOOL v290 = 0;
      if (v287) {
        goto LABEL_454;
      }
    }
LABEL_376:
    BOOL v291 = 0;
    if (v288) {
      goto LABEL_377;
    }
LABEL_456:
    BOOL v292 = 0;
    if (!v289) {
      goto LABEL_379;
    }
    goto LABEL_457;
  }
  HIDWORD(v723) = 0;
LABEL_623:
  unsigned int v706 = DWORD2(v781);
  int v444 = *(unsigned __int8 *)(a2 + 14184);
  BOOL v445 = v444 == 1;
  if (v444 == 6) {
    BOOL v445 = 1;
  }
  char v713 = v445;
  int v718 = *(unsigned __int8 *)(a2 + 14184);
  if (v444 == 6 || (v446 = v720, v444 == 1))
  {
    if (v730)
    {
      int v112 = 0;
      goto LABEL_365;
    }
    v446 = v719;
    v106 = v769;
  }
  uint64_t v714 = *v106;
  uint64_t v716 = *v446;
  uint64_t v447 = *(unsigned int *)(v97 + 84);
  long long v799 = v779;
  *(void *)&long long v800 = v780;
  if (v444 == 6 || v444 == 1)
  {
    unsigned int v717 = DWORD2(v799);
    unsigned int v707 = v726;
    uint64_t v448 = v447;
  }
  else
  {
    unsigned int v717 = -1;
    uint64_t v448 = v447;
    unsigned int v707 = v447;
  }
  if (!v722)
  {
    sub_1BBB4AD34(*(void *)(v97 + 14096), v96, a1, v97, a2, 0, byte_1BBB8BC9A[(char)v747]);
    uint64_t v448 = v447;
  }
  if (v448 >= v714)
  {
    __int16 v705 = -1;
    goto LABEL_976;
  }
  if ((char)v747 <= 10) {
    int v449 = 0;
  }
  else {
    int v449 = v747 - 10;
  }
  int v704 = v449;
  DWORD1(v94) = 1072273817;
  __int16 v705 = -1;
  do
  {
    uint64_t v724 = v448;
    uint64_t v450 = v716 + 30432 * v448;
    *(void *)(v96 + 40) = v450 + 4;
    *(void *)(v96 + 48) = v450 + 64;
    *(void *)(v96 + 176) = v450 + 26560;
    *(void *)(v96 + 56) = v450 + 28432;
    *(void *)(v96 + 312) = *(void *)(v450 + 26544);
    *(void *)(v96 + 2624) = v450 + 27120;
    *(void *)(v96 + 2632) = *(void *)(v450 + 29248);
    *(void *)(v96 + 2560) = *(void *)(v450 + 27104);
    *(void *)(v96 + 2568) = *(void *)(v450 + 27112);
    *(void *)(v96 + 2544) = v450 + 29664;
    *(void *)(v96 + 2552) = v450 + 30176;
    *(void *)(v96 + 2528) = v450 + 29280;
    *(void *)(v96 + 2536) = v450 + 29536;
    uint64_t v732 = *(unsigned __int8 *)(v450 + 6);
    int v451 = *(unsigned __int8 *)(v96 + 188);
    *(void *)(v450 + 26808) = 0;
    *(void *)(v450 + 26800) = 0;
    *(void *)(v450 + 26816) = 0;
    *(void *)&long long v452 = 0x2222222222222222;
    *((void *)&v452 + 1) = 0x2222222222222222;
    *(_OWORD *)(v450 + 26768) = v452;
    uint64_t v728 = v450;
    *(_OWORD *)(v450 + 26784) = v452;
    if (v451)
    {
      *(unsigned char *)(v450 + 26736) = 0;
      *(_DWORD *)(v450 + 26737) = -1;
      *(unsigned char *)(v450 + 26741) = -1;
      *(unsigned char *)(v450 + 26759) = 0;
      *(void *)&long long v453 = 0x2020202020202020;
      *((void *)&v453 + 1) = 0x2020202020202020;
      *(_OWORD *)(v450 + 26688) = v453;
      *(_OWORD *)(v450 + 26704) = v453;
      *(_OWORD *)(v450 + 26560) = 0u;
      *(_OWORD *)(v450 + 26576) = 0u;
      *(_OWORD *)(v450 + 26592) = 0u;
      *(_OWORD *)(v450 + 26608) = 0u;
      *(_OWORD *)(v450 + 26624) = 0u;
      *(_OWORD *)(v450 + 26640) = 0u;
      *(_OWORD *)(v450 + 26656) = 0u;
      *(_OWORD *)(v450 + 26672) = 0u;
      *(void *)(v450 + 26720) = *(void *)(v450 + 26832);
      *(void *)(v450 + 26728) = 0;
    }
    uint64_t v454 = *(void *)(a1 + 136);
    if (*(unsigned char *)(v454 + 4849))
    {
      uint64_t v455 = *(void *)(a1 + 5392);
      if (v455)
      {
        if (*(unsigned char *)(v454 + 577) == 1)
        {
          BOOL v456 = byte_1BBB8D49A[v732] != 3 || v718 == 1;
          BOOL v457 = v456 || v718 == 6;
          if (!v457 && *(double *)(v455 + 136) > 5.0)
          {
            if (*(_DWORD *)(v735 + 2260)) {
              int v661 = 80;
            }
            else {
              int v661 = 60;
            }
            if (v717 < v661 * v704) {
              break;
            }
            uint64_t v662 = 0;
            int v663 = 0;
            uint64_t v664 = *(void *)(v96 + 72);
            uint64_t v665 = *(unsigned int *)(v96 + 16);
            int v666 = *(_DWORD *)(v96 + 20);
            v667 = (__int16 *)(v664 + 32 * v665);
            int v668 = *((unsigned __int8 *)v667 + 24);
            int v669 = *v667;
            int v670 = v667[1];
            long long v94 = *(_OWORD *)(v96 + 144);
            *(_OWORD *)__b = *(_OWORD *)(v96 + 128);
            *(_OWORD *)&__b[16] = v94;
            LODWORD(v793) = v665 - 1;
            HIDWORD(v793) = v665 - v666;
            int32x2_t v794 = vadd_s32(vdup_n_s32((int)v665 - v666), (int32x2_t)0xFFFFFFFF00000001);
            do
            {
              uint64_t v671 = *(void *)&__b[8 * v662];
              if (v671 && (*(unsigned char *)(v671 + 176) || *(unsigned char *)(v671 + 177) == 2 && !*(unsigned char *)(v671 + 178)))
              {
                v672 = *(__int16 **)(v671 + 272);
                if (*((unsigned __int8 *)v672 + 8) == v668)
                {
                  int v673 = *v672 - v669;
                  if (v673 < 0) {
                    int v673 = v669 - *v672;
                  }
                  int v674 = v672[1] - v670;
                  if (v674 < 0) {
                    int v674 = -v674;
                  }
                  if ((v674 + v673) > 8 || v717 > *(_DWORD *)(v664 + 32 * *((int *)&v793 + v662) + 8)) {
                    goto LABEL_654;
                  }
                }
                ++v663;
              }
              ++v662;
            }
            while (v662 != 4);
            if (v663 > 2) {
              break;
            }
          }
        }
      }
    }
LABEL_654:
    uint64_t v458 = byte_1BBB8D49A[v732];
    char v459 = v713;
    if (v732) {
      char v459 = 1;
    }
    uint64_t v745 = byte_1BBB8D49A[v732];
    if (v722 && (v459 & 1) == 0)
    {
      if ((v708 & 1) != 0
        || (uint64_t v460 = *(void *)(v97 + 14096), v461 = *(_DWORD *)(v460 + 3568), v706 >= v461)
        && (*(__int16 *)(v460 + 3304) * *(__int16 *)(v460 + 3304)
          + *(__int16 *)(v460 + 3306) * *(__int16 *)(v460 + 3306) > (*(_DWORD *)(v460 + 1844) * *(_DWORD *)(v460 + 1848)) << 6
          ? (BOOL v462 = (double)v706 * 0.8 < (double)v461)
          : (BOOL v462 = 0),
            !v462))
      {
        if (!v730)
        {
          v463 = *(int32x2_t **)(v97 + 14096);
          int32x2_t v464 = v463[232];
          int v465 = *(unsigned __int8 *)(*(void *)(*(void *)&v464 + 40) + 1);
          uint64_t v466 = v463[433].u32[0];
          v467 = (char *)v463 + 4 * v466;
          *((_DWORD *)v467 + 892) = -1;
          v468 = (char *)v463 + 2 * v466;
          *((_WORD *)v468 + 1798) = -1;
          uint64_t v470 = *(void *)&v464 + 216;
          uint64_t v469 = *(void *)(*(void *)&v464 + 216);
          uint64_t v777 = **(void **)(v470 + 8);
          uint64_t v471 = *(void *)(v469 + 4920);
          int v472 = *(_DWORD *)(v469 + 4800);
          if (v463[434].i32[0]
            || !v463[483].i8[6]
            || (v465 != 3 ? (BOOL v473 = v465 == 5) : (BOOL v473 = 1),
                v473
             || (int v676 = *(_DWORD *)(v777 + 1276),
                 unsigned int v677 = v463[236].i32[1] + v463[237].i32[0] * v472,
                 v676 == *(_DWORD *)(v471 + 216 * v677 + 48))
             || *(unsigned __int8 *)(v471 + 216 * v677 + 66) >= 2u && v676 == *(_DWORD *)(v471 + 216 * v677 + 52)))
          {
            *((_DWORD *)v467 + 892) = 0;
            *((_WORD *)v468 + 1798) = 0;
            uint64_t v474 = dword_1BBB8D538[v466];
            v463[412].i32[0] = v463[130].i32[v474];
            v463[412].i16[2] = v463[196].i16[v474];
            v463[413].i32[0] = v463[10].i32[v474];
            sub_1BBB4DC38((uint64_t)v463, 0, 0, 0);
            v463[130].i32[dword_1BBB8D538[v463[433].u32[0]]] = v463[412].i32[0];
            v463[196].i16[dword_1BBB8D538[v463[433].u32[0]]] = v463[412].i16[2];
            v463[10].i32[dword_1BBB8D538[v463[433].u32[0]]] = v463[413].i32[0];
            uint64_t v458 = v745;
            uint64_t v475 = v463[433].u32[0];
            uint64_t v476 = dword_1BBB8D538[v475];
            v477 = (char *)v463 + 4 * v475;
            *((_DWORD *)v477 + 892) += v463[130].i32[v476];
            v463[449].i16[v475 + 2] += v463[196].i16[v476];
            if (v463[483].i8[7])
            {
              int v478 = *(_DWORD *)(v777 + 1276);
              unsigned int v479 = v463[236].i32[1] + v463[237].i32[0] * v472;
              if (v478 == *(_DWORD *)(v471 + 216 * v479 + 48))
              {
                *(_DWORD *)(v471 + 216 * v479 + 204) = *((_DWORD *)v477 + 892);
                int v478 = *(_DWORD *)(v777 + 1276);
                unsigned int v479 = v463[236].i32[1] + v463[237].i32[0] * v472;
              }
              if (v478 == *(_DWORD *)(v471 + 216 * v479 + 52)) {
                *(_DWORD *)(v471 + 216 * v479 + 208) = v463[446].i32[v463[433].u32[0]];
              }
            }
          }
          sub_1BBB4CA04((uint64_t)v463);
          if (v463[484].i32[1] >= 2u)
          {
            int v480 = 24;
            unint64_t v481 = 1;
            do
            {
              int32x2_t v482 = v463[232];
              uint64_t v483 = *(void *)(*(void *)(*(void *)&v482 + 224) + 8 * v481);
              if (v463[434].i32[0]
                || (v463[483].i8[6] ? (BOOL v484 = v465 == 3) : (BOOL v484 = 1),
                    !v484 ? (BOOL v485 = v465 == 5) : (BOOL v485 = 1),
                    v485
                 || (int v497 = *(_DWORD *)(v483 + 1276),
                     unsigned int v498 = v463[236].i32[1] + v463[237].i32[0] * v472,
                     v497 == *(_DWORD *)(v471 + 216 * v498 + 48))
                 || *(unsigned __int8 *)(v471 + 216 * v498 + 66) >= 2u
                 && v497 == *(_DWORD *)(v471 + 216 * v498 + 52)))
              {
                *(unsigned char *)(*(void *)(*(void *)&v482 + 48) + 24) = v481;
                sub_1BBB4B400(v463, v481);
                sub_1BBB4B894((uint64_t)v463, v481, 0, 0);
                v463[412].i32[0] = -1;
                sub_1BBB4BB30((uint64_t)v463, 0, 0, v481);
                sub_1BBB4C220((uint64_t)v463, 0);
                sub_1BBB4C804((uint64_t)v463, 0);
                sub_1BBB4DC38((uint64_t)v463, 0, 0, v481);
                v463[130].i32[v480 + dword_1BBB8D538[v463[433].u32[0]]] = v463[412].i32[0];
                v463[196].i16[v480 + dword_1BBB8D538[v463[433].u32[0]]] = v463[412].i16[2];
                v463[10].i32[v480 + dword_1BBB8D538[v463[433].u32[0]]] = v463[413].i32[0];
                uint64_t v486 = v463[433].u32[0];
                uint64_t v487 = (v480 + dword_1BBB8D538[v486]);
                unsigned __int32 v488 = v463[130].u32[v487];
                unsigned int v489 = v463[484].u32[1];
                if (v489 >= 2)
                {
                  if (v489 == 2)
                  {
                    int v490 = v463[230].i32[0];
                    int v491 = 1;
                  }
                  else
                  {
                    unsigned int v492 = ((v481 + 1) >> 16) - 1;
                    if (v481 <= 0xFFFE) {
                      unsigned int v492 = v481 + 1;
                    }
                    int v493 = 32 * (v481 > 0xFFFE);
                    if (v492 >= 0x100)
                    {
                      unsigned int v492 = (v492 >> 8) - 1;
                      v493 |= 0x10u;
                    }
                    if (v481 <= 0xFE)
                    {
                      unsigned int v492 = v481;
                      int v493 = 0;
                    }
                    int v490 = v493 + byte_1BBB93ED8[v492];
                    int v491 = v463[230].i32[0];
                  }
                  v488 += v490 * v491;
                }
                v494 = (char *)v463 + 4 * v486;
                if (v488 < *((_DWORD *)v494 + 892))
                {
                  v463[v486 + 452].i32[0] = v481;
                  *((_DWORD *)v494 + 892) = v488;
                  v463[449].i16[v486 + 2] = v463[196].i16[v487];
                }
                if (v463[483].i8[7])
                {
                  int v495 = *(_DWORD *)(v483 + 1276);
                  unsigned int v496 = v463[236].i32[1] + v463[237].i32[0] * v472;
                  if (v495 == *(_DWORD *)(v471 + 216 * v496 + 48))
                  {
                    *(_DWORD *)(v471 + 216 * v496 + 204) = v488;
                    int v495 = *(_DWORD *)(v483 + 1276);
                    unsigned int v496 = v463[236].i32[1] + v463[237].i32[0] * v472;
                  }
                  if (v495 == *(_DWORD *)(v471 + 216 * v496 + 52)) {
                    *(_DWORD *)(v471 + 216 * v496 + 208) = v488;
                  }
                }
              }
              ++v481;
              v480 += 24;
            }
            while (v481 < v463[484].u32[1]);
          }
          if (v463[483].i8[7]) {
            sub_1BBB15A6C(v471 + 216 * (v463[236].i32[1] + v463[237].i32[0] * v472));
          }
          *(unsigned char *)(*(void *)(*(void *)&v463[232] + 48) + 24) = v463[v463[433].u32[0] + 452].i32[0];
          uint64_t v97 = a3;
          int v116 = v738;
        }
        goto LABEL_920;
      }
      int v112 = 1;
LABEL_365:
      int v114 = -1;
      if (!v116) {
        goto LABEL_368;
      }
      goto LABEL_366;
    }
    v499 = *(int32x2_t **)(v97 + 14096);
    v500 = (void *)v499[232];
    uint64_t v501 = v500[5];
    int v502 = *(unsigned __int8 *)(v501 + 1);
    uint64_t v503 = *(unsigned __int8 *)(v501 + 2);
    if (v502 == 3 || v502 == 5)
    {
      if ((int)v503 > 4)
      {
        if (v503 == 5)
        {
          unsigned int v505 = 2u;
        }
        else
        {
          if (v503 != 22) {
            goto LABEL_920;
          }
          unsigned int v505 = 3u;
        }
      }
      else if (v503 == 1)
      {
        unsigned int v505 = 0u;
      }
      else
      {
        if (v503 != 4) {
          goto LABEL_920;
        }
        unsigned int v505 = 1u;
      }
    }
    else
    {
      unsigned int v505 = byte_1BBB8D49A[v503];
    }
    v499[433].i32[0] = v505;
    int v506 = *(unsigned __int8 *)(v500[5] + 1);
    v499[446].i32[v505] = 0;
    v499[449].i16[v505 + 2] = 0;
    uint64_t v507 = v500[27];
    uint64_t v768 = *(void *)(v507 + 4920);
    int v755 = *(_DWORD *)(v507 + 4800);
    *(unsigned char *)(v500[6] + 24) = 0;
    *(unsigned char *)(*(void *)(*(void *)&v499[232] + 48) + 25) = 0;
    sub_1BBB4B400(v499, 0);
    uint64_t v508 = 0;
    unsigned int v778 = v505;
    uint64_t v743 = byte_1BBB8D47C[v505];
    int v757 = v506;
    BOOL v509 = v506 == 5 || v506 == 3;
    uint64_t v510 = 1;
    if (v509) {
      uint64_t v510 = 2;
    }
    uint64_t v753 = v510;
    size_t v741 = 4 * v510;
    uint64_t v511 = -1;
    int v751 = 13;
    do
    {
      int v765 = 0;
      uint64_t v512 = 0;
      *(void *)&long long v801 = -1;
      unsigned int v513 = v508 + 1;
      int v514 = v508;
      uint64_t v749 = v511;
      int v771 = v511;
      do
      {
        v515 = (char *)v499 + 4 * v512;
        *(_DWORD *)&v515[8 * v499[433].u32[0] + 3616] = 0;
        if (*((_DWORD *)v515 + 969))
        {
          uint64_t v516 = 0;
          unint64_t v517 = 0;
          v518 = v515 + 3876;
          int v762 = 12 * v512;
          v519 = &v499[8 * (unint64_t)v512];
          v772 = v519 + 384;
          v520 = (unsigned int *)&v499[408] + v512;
          v760 = v519 + 385;
          while (1)
          {
            int32x2_t v521 = v499[232];
            uint64_t v522 = *(void *)(*(void *)(*(void *)&v521 + 8 * v512 + 224) + 8 * v517);
            if (v499[434].i32[0]) {
              break;
            }
            BOOL v523 = !v499[483].i8[6] || v757 == 3;
            if (v523 || v757 == 5) {
              break;
            }
            int v542 = *(_DWORD *)(v522 + 1276);
            unsigned int v543 = v499[236].i32[1] + v499[237].i32[0] * v755;
            if (v542 == *(_DWORD *)(v768 + 216 * v543 + 48)
              || *(unsigned __int8 *)(v768 + 216 * v543 + 66) >= 2u && v542 == *(_DWORD *)(v768 + 216 * v543 + 52))
            {
              break;
            }
LABEL_785:
            ++v517;
            v516 += 24;
            if (v517 >= *v518)
            {
              __int32 v544 = v499[v499[433].u32[0] + 452].i32[v512];
              unsigned int v513 = v508 + 1;
              goto LABEL_792;
            }
          }
          *(unsigned char *)(*(void *)(*(void *)&v521 + 48) + 16 * v508 + v512 + 24) = v517;
          if (!(v512 | v508) && v516) {
            sub_1BBB4B400(v499, v517);
          }
          __int32 v525 = v499[433].i32[0];
          if (v508 && v525 == 3)
          {
            v772->i32[0] = v499[70].i32[(v514 + v516 + 8)];
            unsigned int *v520 = v508 + 1;
            int v526 = v771 + v516 + dword_1BBB8D538[v499[433].u32[0]];
            unsigned int v527 = v508 + 1;
          }
          else
          {
            if (v508 && v525 == 1)
            {
              int v528 = v762 + 24 * v517;
              v772->i32[0] = v499[70].i32[(v514 + v516 + 4)];
              unsigned int *v520 = 2;
              int v529 = v765 + v516 + 10;
            }
            else
            {
              if (!v508 || v525 != 2) {
                goto LABEL_762;
              }
              int v528 = v762 + 24 * v517;
              v772->i32[0] = v499[70].i32[(v514 + v516 + 6)];
              unsigned int *v520 = 2;
              int v529 = v765 + v516 + 9;
            }
            v760->i32[0] = v499[10].i32[v529];
            unsigned int v527 = *v520 + 1;
            unsigned int *v520 = v527;
            int v526 = v528 + 11;
          }
          v499[8 * (unint64_t)v512 + 384].i32[v527] = v499[10].i32[v526];
          ++*v520;
LABEL_762:
          sub_1BBB4B894((uint64_t)v499, v517, v512, v508);
          v499[412].i32[0] = -1;
          sub_1BBB4BB30((uint64_t)v499, v512, v508, v517);
          if (!(v778 | v517 | v512)) {
            *(_DWORD *)(*(void *)(*(void *)&v499[232] + 72) + 32 * v499[233].u32[0] + 20) = v499[409].i32[0];
          }
          sub_1BBB4C220((uint64_t)v499, v512);
          sub_1BBB4C804((uint64_t)v499, v512);
          sub_1BBB4DC38((uint64_t)v499, v512, v508, v517);
          if (*v518 <= 1u)
          {
            __int32 v531 = v499[412].i32[0];
          }
          else
          {
            if (*v518 == 2)
            {
              int v530 = v499[230].i32[0];
            }
            else
            {
              if (v517 <= 0xFE)
              {
                int v537 = 0;
                int v536 = v517;
              }
              else
              {
                unsigned int v532 = ((v517 + 1) >> 16) - 1;
                BOOL v533 = v517 > 0xFFFE;
                if (v517 <= 0xFFFE) {
                  unsigned int v532 = v517 + 1;
                }
                int v534 = 32 * v533;
                int v535 = (32 * v533) | 0x10;
                int v536 = (v532 >> 8) - 1;
                if (v532 >= 0x100)
                {
                  int v537 = v535;
                }
                else
                {
                  int v536 = v532;
                  int v537 = v534;
                }
              }
              int v530 = (v537 + byte_1BBB93ED8[v536]) * v499[230].i32[0];
            }
            __int32 v531 = v499[412].i32[0] + v530;
            v499[412].i32[0] = v531;
          }
          int v538 = v514 + v516;
          v499[130].i32[v538 + dword_1BBB8D538[v499[433].u32[0]]] = v531;
          v499[196].i16[v538 + dword_1BBB8D538[v499[433].u32[0]]] = v499[412].i16[2];
          v499[10].i32[v538 + dword_1BBB8D538[v499[433].u32[0]]] = v499[413].i32[0];
          unsigned __int32 v539 = v499[412].u32[0];
          if (v539 < *((_DWORD *)&v801 + v512))
          {
            v499[v499[433].u32[0] + 452].i32[v512] = v517;
            *((_DWORD *)&v801 + v512) = v539;
          }
          if (v499[483].i8[7] && !(v499[433].i32[0] | v512))
          {
            int v540 = *(_DWORD *)(v522 + 1276);
            unsigned int v541 = v499[236].i32[1] + v499[237].i32[0] * v755;
            if (v540 == *(_DWORD *)(v768 + 216 * v541 + 48))
            {
              *(_DWORD *)(v768 + 216 * v541 + 204) = v539;
              int v540 = *(_DWORD *)(v522 + 1276);
              unsigned int v541 = v499[236].i32[1] + v499[237].i32[0] * v755;
            }
            if (v540 == *(_DWORD *)(v768 + 216 * v541 + 52)) {
              *(_DWORD *)(v768 + 216 * v541 + 208) = v499[412].i32[0];
            }
          }
          goto LABEL_785;
        }
        LOBYTE(v544) = 0;
LABEL_792:
        uint64_t v545 = *(void *)(*(void *)&v499[232] + 48) + 16 * v508 + v512++;
        *(unsigned char *)(v545 + 24) = v544;
        v771 += 12;
        v514 += 12;
        v765 += 12;
      }
      while (v512 != v753);
      if (v757 == 5 || v757 == 3)
      {
        uint64_t v546 = v499[433].u32[0];
        v499[449].i16[v546 + 2] = -1;
        if (v499[415].i32[1]) {
          v499[190].i32[(dword_1BBB8D538[v546] + v508)] = 0x7FFFFFFF;
        }
      }
      uint64_t v547 = v499[433].u32[0];
      if (v499[483].i8[4])
      {
        v499[449].i16[v547 + 2] = -1;
        unsigned int v548 = dword_1BBB8D538[v547] + v508;
        unsigned int v773 = v499[190].u32[v548];
        uint64_t v549 = v801;
        memcpy(&__dst, &v499[v547 + 452], v741);
        uint64_t v550 = 0;
        for (uint64_t j = 0; j != v753; ++j)
        {
          uint64_t v552 = v499[484].u32[j + 1];
          if (v552)
          {
            unsigned int v553 = v548;
            uint64_t v554 = v550;
            do
            {
              v555 = (_DWORD *)v499 + v553;
              uint64_t v556 = 4 * v554;
              *(_DWORD *)&__b[v556] = v555[260];
              *(_DWORD *)((char *)&v793 + v556) = v555[20];
              *(_DWORD *)((char *)&v803 + v556) = v555[140];
              ++v554;
              v553 += 24;
              --v552;
            }
            while (v552);
          }
          v550 += 5;
          v548 += 12;
        }
        uint64_t v557 = 0;
        int v775 = v508;
        uint64_t v558 = 908;
        do
        {
          v559 = (char *)v499 + 4 * v557;
          if (*((_DWORD *)v559 + 969))
          {
            unint64_t v560 = 0;
            v561 = v559 + 3876;
            unsigned int v562 = -1;
            int v563 = v775;
            uint64_t v564 = v558;
            do
            {
              int32x2_t v565 = v499[474];
              if (*(_DWORD *)(*(void *)&v565 + v564 - 768) != 1 << *(_DWORD *)(*(void *)&v565 + 4)
                || *(_DWORD *)(*(void *)&v565 + v564))
              {
                *(unsigned char *)(*(void *)(*(void *)&v499[232] + 48) + 16 * v508 + v557 + 24) = v560;
                if (!(v557 | v508) && v560) {
                  sub_1BBB4B400(v499, v560);
                }
                sub_1BBB4B894((uint64_t)v499, v560, v557, v508);
                v499[412].i32[0] = -1;
                sub_1BBB4BB30((uint64_t)v499, v557, v508, v560);
                sub_1BBB4C220((uint64_t)v499, v557);
                sub_1BBB4C804((uint64_t)v499, v557);
                sub_1BBB4DC38((uint64_t)v499, v557, v508, v560);
                if (*v561 <= 1u)
                {
                  __int32 v567 = v499[412].i32[0];
                }
                else
                {
                  if (*v561 == 2)
                  {
                    int v566 = v499[230].i32[0];
                  }
                  else
                  {
                    unsigned int v568 = ((v560 + 1) >> 16) - 1;
                    if (v560 <= 0xFFFE) {
                      unsigned int v568 = v560 + 1;
                    }
                    int v569 = 32 * (v560 > 0xFFFE);
                    if (v568 >= 0x100)
                    {
                      unsigned int v568 = (v568 >> 8) - 1;
                      v569 |= 0x10u;
                    }
                    if (v560 <= 0xFE)
                    {
                      unsigned int v568 = v560;
                      int v569 = 0;
                    }
                    int v566 = (v569 + byte_1BBB93ED8[v568]) * v499[230].i32[0];
                  }
                  __int32 v567 = v499[412].i32[0] + v566;
                  v499[412].i32[0] = v567;
                }
                v499[130].i32[v563 + dword_1BBB8D538[v499[433].u32[0]]] = v567;
                v499[196].i16[v563 + dword_1BBB8D538[v499[433].u32[0]]] = v499[412].i16[2];
                v499[10].i32[v563 + dword_1BBB8D538[v499[433].u32[0]]] = v499[413].i32[0];
                unsigned __int32 v570 = v499[412].u32[0];
                if (v570 < v562)
                {
                  v499[v499[433].u32[0] + 452].i32[v557] = v560;
                  unsigned int v562 = v570;
                }
              }
              ++v560;
              v564 += 12;
              v563 += 24;
            }
            while (v560 < *v561);
          }
          *(unsigned char *)(*(void *)(*(void *)&v499[232] + 48) + 16 * v508 + v557 + 24) = v499[v499[433].u32[0] + 452].i32[v557];
          ++v557;
          v558 += 384;
          v775 += 12;
        }
        while (v557 != v753);
        unsigned int v571 = v549;
        if (v549 >= HIDWORD(v549)) {
          unsigned int v571 = HIDWORD(v549);
        }
        if (v571 >= v773) {
          unsigned int v572 = v773;
        }
        else {
          unsigned int v572 = v571;
        }
        unsigned int v573 = dword_1BBB8D538[v499[433].u32[0]] + v508;
        v574 = (char *)v499 + 4 * v573;
        if (*((_DWORD *)v574 + 380) + 10 * v499[230].i32[0] >= v572)
        {
          int v578 = 0;
          uint64_t v579 = 0;
          *((_DWORD *)v574 + 380) = v773;
          v499[v499[433].u32[0] + 452] = __dst;
          int v580 = v508;
          uint64_t v458 = v745;
          unsigned int v513 = v508 + 1;
          do
          {
            v581 = (char *)v499 + 4 * v579;
            if (*((_DWORD *)v581 + 969))
            {
              unint64_t v582 = 0;
              v583 = (unsigned int *)(v581 + 3876);
              int v584 = v580;
              do
              {
                v499[130].i32[v584 + dword_1BBB8D538[v499[433].u32[0]]] = *(_DWORD *)&__b[4
                                                                                        * (v578 + v582)];
                v499[10].i32[v584 + dword_1BBB8D538[v499[433].u32[0]]] = *((_DWORD *)&v793 + (v578 + v582));
                v499[70].i32[v584 + dword_1BBB8D538[v499[433].u32[0]]] = *((_DWORD *)&v803
                                                                         + (v578 + v582++));
                v584 += 24;
              }
              while (v582 < *v583);
            }
            *(unsigned char *)(*(void *)(*(void *)&v499[232] + 48) + 16 * v508 + v579 + 24) = v499[v499[433].u32[0] + 452].i32[v579];
            ++v579;
            v578 += 5;
            v580 += 12;
          }
          while (v579 != v753);
          LODWORD(v547) = v499[433].i32[0];
        }
        else
        {
          __int32 v575 = __dst.i32[0];
          v499[12 * __dst.i32[0] + 130].i32[v573] = 0x7FFFFFFF;
          __int32 v576 = __dst.i32[1];
          v499[130].i32[(v508 + 24 * __dst.i32[1] + dword_1BBB8D538[v499[433].u32[0]] + 12)] = 0x7FFFFFFF;
          uint64_t v547 = v499[433].u32[0];
          v577 = &v499[v547];
          v577[452].i32[0] = v575;
          v577[452].i32[1] = v576;
          uint64_t v458 = v745;
          unsigned int v513 = v508 + 1;
        }
      }
      else
      {
        uint64_t v458 = v745;
      }
      int v585 = byte_1BBB8D47C[v547];
      int32x2_t v586 = v499[232];
      int v587 = *(unsigned __int8 *)(*(void *)(*(void *)&v586 + 40) + 1);
      uint64_t v588 = *(void *)(*(void *)&v586 + 48) + 16;
      if (v547 == 3)
      {
        if (v587 == 3 || v587 == 5)
        {
          __int32 v590 = v499[442].i32[v508 + 1];
          __int32 v591 = v499[230].i32[0];
          if (v590 == -1) {
            unsigned int v592 = -1;
          }
          else {
            unsigned int v592 = v591 + v590;
          }
          int v593 = 3 * v591;
          unsigned int v594 = 3 * v591 + v499[130].i32[(v508 + 8)];
          unsigned int v595 = 3 * v591 + v499[130].i32[(v508 + 20)];
          unsigned int v596 = 5 * v591 + v499[190].i32[(v508 + 8)];
          if (v594 <= v595)
          {
            if (v596 >= v594) {
              char v597 = 4;
            }
            else {
              char v597 = 6;
            }
            if (v596 >= v594) {
              char v598 = 1;
            }
            else {
              char v598 = 3;
            }
          }
          else
          {
            if (v596 >= v595) {
              char v597 = 5;
            }
            else {
              char v597 = 6;
            }
            if (v596 >= v595) {
              char v598 = 2;
            }
            else {
              char v598 = 3;
            }
            unsigned int v594 = v593 + v499[130].i32[(v508 + 20)];
          }
          uint64_t v611 = v508;
          if (v596 >= v594) {
            unsigned int v596 = v594;
          }
          if (v592 >= v596)
          {
            unsigned int v592 = v596;
          }
          else
          {
            char v597 = 3;
            char v598 = 0;
          }
          *(unsigned char *)(v588 + 16 * v508 + 15) = v597;
          uint64_t v617 = v499[433].u32[0];
          v499[446].i32[v617] += v592;
          v499[449].i16[v617 + 2] = -1;
          v499[445].i8[v617 + 1] = 22;
          v499[226].i8[v508] = v598;
          uint64_t v547 = v499[433].u32[0];
          if (v508 == 3)
          {
            v499[446].i32[v547] += 9 * v499[230].i32[0];
            uint64_t v611 = 3;
          }
        }
        else
        {
          v499[226].i8[v508] = 0;
          *(unsigned char *)(v588 + 16 * v508 + 15) = 4;
          uint64_t v547 = v499[433].u32[0];
          int v612 = v508 + 8 + 24 * v499[v547 + 452].i32[0];
          __int32 v613 = v499[130].i32[v612];
          int v614 = v499[196].u16[v612];
          if (v613 == -1 || (v615 = (char *)v499 + 4 * v547, int v616 = *((_DWORD *)v615 + 892), v616 == -1)) {
            v499[446].i32[v547] = -1;
          }
          else {
            *((_DWORD *)v615 + 892) = v616 + v613 + v499[230].i32[0];
          }
          uint64_t v611 = v508;
          if (v614 == 0xFFFF
            || (v627 = (char *)v499 + 2 * v547, int v628 = *((unsigned __int16 *)v627 + 1798), v628 == 0xFFFF))
          {
            v499[449].i16[v547 + 2] = -1;
          }
          else
          {
            *((_WORD *)v627 + 1798) = v628 + v614;
          }
        }
        goto LABEL_898;
      }
      uint64_t v599 = v547;
      if (v587 != 5 && v587 != 3)
      {
        int v618 = dword_1BBB8D538[v547] + v508 + 24 * v499[v547 + 452].i32[0];
        v499[446].i32[v547] += v499[130].i32[v618];
        v499[449].i16[v547 + 2] += v499[196].i16[v618];
LABEL_886:
        uint64_t v611 = v508;
        goto LABEL_898;
      }
      int v601 = dword_1BBB8D538[v547] + v508;
      unsigned int v602 = v499[130].u32[v601];
      unsigned __int32 v603 = v499[130].u32[v601 + 12];
      unsigned int v604 = v499[190].u32[v601];
      v499[449].i16[v547 + 2] = -1;
      if (v547)
      {
        v605 = (_DWORD *)&v499[461] + v508;
        _DWORD *v605 = 0;
        uint64_t v606 = v588 + 16 * v508;
        *(unsigned char *)(v606 + 15) = 4;
        v607 = (unsigned char *)(v606 + 15);
        if (v603 < v602)
        {
          _DWORD *v605 = 1;
          unsigned char *v607 = 5;
          unsigned int v602 = v603;
        }
        if (v499[230].i32[0] + v604 < v602)
        {
          _DWORD *v605 = 2;
          unsigned char *v607 = 6;
          unsigned int v602 = v604;
        }
        uint64_t v547 = v499[433].u32[0];
        v608 = (char *)v499 + 4 * v547;
        unsigned int v609 = *((_DWORD *)v608 + 892) + v602;
        *((_DWORD *)v608 + 892) = v609;
        if (v508 == 1)
        {
          uint64_t v610 = dword_1BBB8D4A0[3 * (3 * v547 + v499[461].i32[0] - 3) + v499[461].u32[1]];
          v499[445].i8[v547 + 1] = dword_1BBB8D4A0[3 * (3 * v547 + v499[461].i32[0] - 3)
                                                 + v499[461].u32[1]];
          *((_DWORD *)v608 + 892) = v609 + v499[230].i32[0] * byte_1BBB93ED8[v610];
          uint64_t v611 = 1;
          goto LABEL_898;
        }
        goto LABEL_886;
      }
      __int32 v619 = v499[230].i32[0];
      unsigned __int32 v620 = 5 * v619 + v604;
      int v621 = 3 * v619;
      unsigned int v622 = 3 * v619 + v602;
      v499[445].i8[v599 + 1] = 3;
      uint64_t v623 = v588 + 16 * v508;
      *(unsigned char *)(v623 + 15) = 6;
      v624 = (unsigned char *)(v623 + 15);
      if (v622 < v620)
      {
        v499[445].i8[v499[433].u32[0] + 1] = 1;
        unsigned char *v624 = 4;
        unsigned __int32 v620 = v622;
      }
      unsigned __int32 v625 = v621 + v603;
      if (v625 < v620)
      {
        v499[445].i8[v499[433].u32[0] + 1] = 2;
        unsigned char *v624 = 5;
        unsigned __int32 v620 = v625;
      }
      uint64_t v611 = v508;
      uint64_t v626 = v499[433].u32[0];
      v499[446].i32[v626] += v620;
      LODWORD(v547) = v626;
LABEL_898:
      v629 = (unsigned char *)(v588 + 16 * v611);
      v630 = &v499[v547 + 452];
      if (v629[15] == 6)
      {
        int32x2_t v631 = v499[460];
        int32x2_t *v630 = v631;
        LOBYTE(v630) = v631.i8[0];
      }
      else
      {
        LODWORD(v630) = v630->i32[0];
      }
      v629[8] = (_BYTE)v630;
      __int32 v632 = v499[v499[433].u32[0] + 452].i32[1];
      v629[9] = v632;
      uint64_t v633 = v499[433].u32[0];
      if (v633)
      {
        v634 = &v499[v633];
        int v635 = dword_1BBB8D538[v633] + v508;
        uint64_t v636 = (v635 + 24 * v634[452].i32[0]);
        *(_DWORD *)__b = v499[70].i32[v636];
        uint64_t v637 = (v635 + 24 * v634[452].i32[1] + 12);
        *(_DWORD *)&__b[4] = v499[70].i32[v637];
        int v638 = v629[15];
        if (v638 == 3)
        {
          *(int32x2_t *)__b = *(int32x2_t *)((char *)&v499[v611 + 434] + 4);
          *((_WORD *)v629 + 4) = 0;
          int v638 = v499[444].u8[v611 + 4];
          v629[15] = v638;
          uint64_t v639 = (uint64_t)v499[232];
          v640 = (unint64_t *)__b;
          unsigned int v641 = 0;
          unsigned int v642 = 0;
        }
        else
        {
          v643.i32[0] = v499[10].i32[v636] << 16;
          v643.i32[1] = v499[10].i32[v636];
          v643.i32[2] = v499[10].i32[v637] << 16;
          v643.i32[3] = v499[10].i32[v637];
          v644.i64[0] = 0x700000007;
          v644.i64[1] = 0x700000007;
          unint64_t v793 = (unint64_t)vmovn_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(v643, 0x10uLL), v644), v644));
          uint64_t v639 = (uint64_t)v499[232];
          unsigned int v641 = v630;
          unsigned int v642 = v632;
          v640 = &v793;
        }
        sub_1BBAF3090(v639, v640, v638, v641, v642, v508);
        if (v585 - 1 > v508)
        {
          if (v587 == 3 || v587 == 5)
          {
            if (*(int32x2_t *)((char *)&v499[484] + 4))
            {
              unsigned __int32 v645 = 0;
              v646 = (unsigned char *)(v588 + 16 * v513);
              int v647 = v751;
              do
              {
                v646[8] = v645;
                v646[9] = v645;
                v646[15] = 6;
                sub_1BBB52450(*(void **)&v499[232], v513, __b);
                v499[70].i32[v647 + dword_1BBB8D538[v499[433].u32[0]] - 12] = *(_DWORD *)__b;
                v499[70].i32[v647 + dword_1BBB8D538[v499[433].u32[0]]] = *(_DWORD *)&__b[4];
                ++v645;
                unsigned __int32 v648 = v499[484].u32[1];
                if (v648 <= v499[485].i32[0]) {
                  unsigned __int32 v648 = v499[485].u32[0];
                }
                v647 += 24;
              }
              while (v645 < v648);
            }
          }
          else if (v499[484].i32[1])
          {
            unsigned __int32 v649 = 0;
            uint64_t v650 = v588 + 16 * v513;
            int v651 = v751;
            do
            {
              *(unsigned char *)(v650 + 8) = v649;
              *(unsigned char *)(v650 + 15) = 4;
              sub_1BBB52450(*(void **)&v499[232], v513, __b);
              v499[70].i32[v651 + dword_1BBB8D538[v499[433].u32[0]] - 12] = *(_DWORD *)__b;
              v499[70].i32[v651 + dword_1BBB8D538[v499[433].u32[0]]] = *(_DWORD *)&__b[4];
              ++v649;
              v651 += 24;
            }
            while (v649 < v499[484].i32[1]);
          }
        }
      }
      ++v508;
      uint64_t v511 = v749 + 1;
      ++v751;
    }
    while (v508 != v743);
    uint64_t v97 = a3;
    int v116 = v738;
    if (!v499[433].i32[0])
    {
      sub_1BBB4CA04((uint64_t)v499);
      if (!v499[433].i32[0] && v757 != 3 && v757 != 5 && v499[483].i8[7]) {
        sub_1BBB15A6C(v768 + 216 * (v499[236].i32[1] + v499[237].i32[0] * v755));
      }
    }
LABEL_920:
    v652 = (unsigned char *)(v728 + 7);
    if (v718 == 1 || v718 == 6)
    {
      uint64_t v653 = byte_1BBB8D483[v732];
      uint64_t v654 = *(void *)(v97 + 14096);
      uint64_t v96 = v736;
      if (v732 != *(unsigned __int8 *)(v654 + v653 + 3561))
      {
        uint64_t v658 = v724;
        goto LABEL_935;
      }
      if (v734[3557] == 2)
      {
        *(_DWORD *)(v654 + 3312) = *(unsigned __int8 *)(v735 + 2238);
        sub_1BBB4DEAC(*(void *)(v97 + 14096));
        unsigned char *v652 = 0;
        sub_1BBAFA9D0(v728, v736, a2, (uint64_t)&v789);
        unsigned int v655 = v790;
      }
      else
      {
        unsigned int v655 = *(_DWORD *)(v654 + 4 * v653 + 3568);
      }
      uint64_t v658 = v724;
      if (v655 < v717)
      {
        unsigned int v707 = v724;
LABEL_934:
        unsigned int v717 = v655;
        goto LABEL_935;
      }
      if (v732 != 22 || !v734[3544]) {
        goto LABEL_935;
      }
      break;
    }
    uint64_t v656 = *(void *)(v97 + 14096);
    unsigned int v655 = *(_DWORD *)(v656 + 4 * v458 + 3568);
    uint64_t v96 = v736;
    if (v730)
    {
      __int16 v705 = -1;
      unsigned int v707 = v724;
      unsigned int v717 = *(_DWORD *)(v656 + 4 * v458 + 3568);
      break;
    }
    __int16 v657 = *(_WORD *)(v656 + 2 * v458 + 3596);
    if (v734[3557] == 2)
    {
      *(_DWORD *)(v656 + 3312) = *(unsigned __int8 *)(v735 + 2238);
      sub_1BBB4DEAC(*(void *)(v97 + 14096));
      unsigned char *v652 = 0;
      sub_1BBAFA9D0(v728, v736, a2, (uint64_t)&v789);
      unsigned int v655 = v790;
    }
    uint64_t v658 = v724;
    if (v655 < v717)
    {
      unsigned int v707 = v724;
      __int16 v705 = v657;
      goto LABEL_934;
    }
    if ((v732 - 3) <= 1)
    {
      if (v734[3545])
      {
        uint64_t v659 = *(void *)(v97 + 14096);
        uint64_t v660 = *(void *)(v659 + 1816);
        uint64_t v658 = v724;
        if (v717
           + *(unsigned __int16 *)(v660 + 2 * ((__int16)*(_DWORD *)(v659 + 116) - (__int16)*(_DWORD *)(v659 + 596)))
           + *(unsigned __int16 *)(v660 + 2 * ((*(int *)(v659 + 116) >> 16) - (*(int *)(v659 + 596) >> 16)))
           + *(unsigned __int16 *)(v660 + 2 * ((__int16)*(_DWORD *)(v659 + 120) - (__int16)*(_DWORD *)(v659 + 600)))
           + *(unsigned __int16 *)(v660 + 2 * ((*(int *)(v659 + 120) >> 16) - (*(int *)(v659 + 600) >> 16))) <= v655)
          break;
      }
    }
LABEL_935:
    uint64_t v448 = v658 + 1;
  }
  while (v448 != v714);
LABEL_976:
  if ((v718 == 6 || v718 == 1) && v707 == *(_DWORD *)(v97 + 44))
  {
    unsigned __int16 v678 = v705;
    goto LABEL_1014;
  }
  uint64_t v679 = v716 + 30432 * v707;
  *(void *)(v96 + 40) = v679 + 4;
  *(void *)(v96 + 48) = v679 + 64;
  *(void *)(v96 + 176) = v679 + 26560;
  *(void *)(v96 + 56) = v679 + 28432;
  *(void *)(v96 + 312) = *(void *)(v679 + 26544);
  *(void *)(v96 + 2624) = v679 + 27120;
  *(void *)(v96 + 2632) = *(void *)(v679 + 29248);
  *(void *)(v96 + 2560) = *(void *)(v679 + 27104);
  *(void *)(v96 + 2568) = *(void *)(v679 + 27112);
  *(void *)(v96 + 2544) = v679 + 29664;
  *(void *)(v96 + 2552) = v679 + 30176;
  *(void *)(v96 + 2528) = v679 + 29280;
  *(void *)(v96 + 2536) = v679 + 29536;
  if (v730)
  {
    int v680 = *(_DWORD *)(*(void *)(v97 + 14096) + 560);
    uint64_t v681 = *(void *)(v96 + 48);
    *(_WORD *)(v681 + 24) = 0;
    *(_WORD *)(*(void *)(v96 + 48) + 16) = 0;
    *(_WORD *)(*(void *)(v96 + 48) + 18) = 0;
    *(_WORD *)(*(void *)(v96 + 48) + 20) = 0;
    *(_WORD *)(*(void *)(v96 + 48) + 22) = 0;
    unint64_t v682 = *(unsigned __int8 *)(v681 + 24);
    uint64_t v683 = *(void *)(*(void *)(v96 + 176) + 272);
    *(_DWORD *)uint64_t v683 = v680;
    *(_DWORD *)(v683 + 4) = 0;
    *(unsigned char *)(v683 + 8) = v682;
    *(unsigned char *)(v683 + 9) = 32;
    char v685 = v682 != 32 && *(unsigned char *)(v96 + 31) == 2;
    *(unsigned char *)(v683 + 12) = *(unsigned char *)(*(void *)(v96 + 256) + (v682 >> v685));
    *(unsigned char *)(v683 + 13) = 0;
    if (v734[3557] == 2)
    {
      *(unsigned char *)(v679 + 7) = 0;
      sub_1BBAFA9D0(v679, v96, a2, (uint64_t)&v799);
      unsigned int v717 = DWORD2(v799);
    }
    uint64_t v686 = *(void *)(v97 + 14096);
LABEL_994:
    unsigned __int16 v678 = v705;
  }
  else
  {
    uint64_t v686 = *(void *)(v97 + 14096);
    if (v734[3557] == 2) {
      goto LABEL_994;
    }
    uint64_t v687 = *(unsigned __int8 *)(v679 + 6);
    *(_DWORD *)(v686 + 3312) = *(unsigned __int8 *)(v735 + 2238);
    sub_1BBB4DEAC(*(void *)(v97 + 14096));
    if (v718 == 1 || v718 == 6)
    {
      uint64_t v686 = *(void *)(v97 + 14096);
      unsigned int v717 = *(_DWORD *)(v686 + 4 * byte_1BBB8D483[v687] + 3568);
      goto LABEL_994;
    }
    uint64_t v700 = byte_1BBB8D49A[v687];
    uint64_t v686 = *(void *)(v97 + 14096);
    unsigned int v717 = *(_DWORD *)(v686 + 4 * v700 + 3568);
    unsigned __int16 v678 = *(_WORD *)(v686 + 2 * v700 + 3596);
  }
  v688 = *(void **)(v686 + 1856);
  v689 = (unsigned __int8 *)v688[5];
  v690 = (unsigned __int8 *)v688[6];
  uint64_t v691 = *(void *)(v688[22] + 272);
  int v692 = v689[1];
  switch(v689[1])
  {
    case 2u:
    case 4u:
      int v693 = v689[2];
      if ((v693 - 3) < 2)
      {
        unsigned int v694 = v690[272];
        goto LABEL_1002;
      }
      if (v692 != 3) {
        goto LABEL_1005;
      }
      goto LABEL_1001;
    case 3u:
    case 5u:
      int v693 = v689[2];
LABEL_1001:
      unsigned int v694 = v690[272];
      if (v693 != 22) {
        goto LABEL_1006;
      }
LABEL_1002:
      for (uint64_t k = 0; k != 4; ++k)
        *(_DWORD *)&v689[4 * k + 4] = *(unsigned __int8 *)(v686 + 1808 + k);
      sub_1BBB10820(*v690, v692, (uint64_t)(v689 + 4), (uint64_t)(v689 + 20), (uint64_t)(v689 + 36), (uint64_t)(v690 + 16));
      break;
    default:
LABEL_1005:
      unsigned int v694 = v690[272];
LABEL_1006:
      sub_1BBB10BA8(*v690, v690[1], v689, v690);
      break;
  }
  *(_WORD *)(v691 + 10) = *((_WORD *)v690 + 13);
  if (v694)
  {
    uint64_t v696 = v694;
    v697 = (unsigned char *)(v686 + 3556);
    v698 = v690 + 31;
    int v116 = v738;
    do
    {
      if (*v698 == 3) {
        unsigned char *v698 = *v697;
      }
      ++v697;
      v698 += 16;
      --v696;
    }
    while (v696);
  }
  else
  {
    int v116 = v738;
  }
LABEL_1014:
  DWORD2(v799) = v717;
  int v114 = v678;
  uint64_t v780 = v800;
  long long v779 = v799;
  if (v734[3557] == 1)
  {
    uint64_t v699 = v716 + 30432 * v707;
    *(unsigned char *)(v699 + 7) = 0;
    sub_1BBAFA9D0(v699, v96, a2, (uint64_t)&v779);
  }
  int v112 = 0;
  unsigned int v726 = v707;
  if (v116)
  {
LABEL_366:
    if (v116 != 5) {
      v720 = v719;
    }
  }
LABEL_368:
  uint64_t v111 = *v720 + 30432 * v726;
  if (v727)
  {
    char v115 = 1;
    BOOL v113 = 1;
  }
  else
  {
    char v115 = 0;
    if (v715 > 0x1FF
      || *(unsigned char *)(*(void *)(a1 + 136) + 577) == 1
      || (char v115 = 0, (v711 - 9) > 0xE)
      || xmmword_1E9F82C25[v715] < 9)
    {
      BOOL v113 = 0;
    }
    else if ((*(unsigned char *)(v96 + 28) == 5 || !*(unsigned char *)(v96 + 28)) {
           && ((unint64_t v294 = *(unsigned __int16 *)(*(void *)(a3 + 14096) + 2938), v294 > 0x1FF)
    }
            || xmmword_1E9F82C25[v294] < 0))
    {
      char v115 = 0;
      BOOL v113 = 0;
    }
    else
    {
      int v295 = xmmword_1E9F82C25[v715] + 92;
      char v115 = 0;
      BOOL v113 = 0;
      if (DWORD2(v779) <= 2 * v295)
      {
        int v731 = 0;
        DWORD2(v779) = 0;
      }
      else
      {
        DWORD2(v779) -= v295;
      }
    }
  }
LABEL_391:
  int v296 = *(unsigned __int8 *)(v96 + 28);
  if ((v296 == 6 || v296 == 1) && *(unsigned char *)(v735 + 2233))
  {
    float v297 = (float)(a5 * (float)*(unsigned __int8 *)(v735 + 2233)) * 0.0039062;
    *(float *)&long long v94 = v297 + 0.5;
    int v747 = (int)(float)(v297 + 0.5);
    LOWORD(v94) = *(_WORD *)a3;
    double v95 = (double)(unint64_t)v94;
    int v298 = *(unsigned __int16 *)(*(void *)(*(void *)v735 + 4696) + 2 * *(unsigned int *)(v96 + 16));
    int v299 = *(unsigned __int8 *)(*(void *)v735 + 1394);
    double v300 = (double)(int)(float)(v297 + -12.0);
    double v301 = exp2(v300 / 3.0);
    double v5 = sub_1BBB4E9DC(v301);
    double v302 = 1.0;
    if (!v299 && v298)
    {
      double v303 = sub_1BBB4E9DC(v300 / 6.0);
      double v304 = 4.0;
      if (v303 <= 4.0) {
        double v304 = v303;
      }
      if (v303 >= 2.0) {
        double v302 = v304;
      }
      else {
        double v302 = 2.0;
      }
    }
    double v305 = sub_1BBB4E9DC(v5 * 0.680000007 * v302);
    if (v305 <= v95) {
      double v95 = v305;
    }
    char v742 = v747 - *v733;
    uint64_t v96 = v736;
    int v116 = v738;
  }
  if (v731 && !(v730 | v723))
  {
    if (!v729) {
      goto LABEL_436;
    }
    int v306 = *(unsigned __int8 *)(a3 + 31);
    if ((v306 & 0xFE) != 2) {
      goto LABEL_436;
    }
    uint64_t v307 = *(void *)(v96 + 216);
    uint64_t v308 = *(unsigned int *)(v96 + 16);
    if (v306 == 3)
    {
      int v309 = 0;
      while (*(_DWORD *)(*(void *)(v307 + 4744) + 4 * (v309 | (4 * v308))) > 2u)
      {
        if (++v309 == 4) {
          goto LABEL_412;
        }
      }
LABEL_436:
      BOOL v331 = 0;
      if (v738 != 2 && v738 != 7)
      {
        if (*(unsigned char *)(a3 + 4))
        {
          BOOL v331 = 0;
        }
        else
        {
          unint64_t v332 = 0;
          uint64_t v333 = *(unsigned int *)(v96 + 16);
          int v334 = v333 - *(_DWORD *)(a2 + 14176);
          long long v335 = *(_OWORD *)(v96 + 144);
          *(_OWORD *)__b = *(_OWORD *)(v96 + 128);
          *(_OWORD *)&__b[16] = v335;
          BOOL v336 = 1;
          do
          {
            uint64_t v337 = *(void *)&__b[8 * v332];
            if (v337 && *(unsigned char *)(v337 + 208) != 34) {
              break;
            }
            BOOL v336 = v332++ < 3;
          }
          while (v332 != 4);
          if (v738 != 5 && v738)
          {
            char v342 = 0;
          }
          else
          {
            uint64_t v338 = **(void **)(v96 + 224);
            unint64_t v339 = *(void *)(*(void *)(v338 + 1256) + 8 * v333);
            BOOL v199 = v338 + 1184 > v339;
            unint64_t v340 = v338 + 1216;
            char v342 = !v199 && v339 <= v340;
          }
          BOOL v331 = 0;
          if (v334 >= 5 && !v336 && (v342 & 1) == 0) {
            BOOL v331 = v334 >= 3 * *(_DWORD *)(a2 + 50628);
          }
        }
      }
      if ((char)v747 >= 51) {
        uint64_t v345 = 51;
      }
      else {
        uint64_t v345 = (char)v747;
      }
      uint64_t v346 = byte_1BBB8BC9A[(int)v345];
      LOBYTE(v747) = v345;
      sub_1BBB02278(v345, v742, a3, v96, v95);
      HIDWORD(v723) = v346;
      sub_1BBAFAC4C(a1, a2, a3, v96, (uint64_t)&v783, (uint64_t)&v781, v331, v346, DWORD2(v779));
      int v116 = v738;
    }
    else
    {
LABEL_412:
      uint64_t v310 = *(void *)(v96 + 72);
      uint64_t v311 = v310 + 32 * v308;
      __dst.i16[0] = *(_WORD *)(v311 + 24);
      *(void *)&long long v803 = *(void *)v311;
      int v312 = *(unsigned __int8 *)(v311 + 26);
      *(void *)&long long v799 = *(void *)(v311 + 8);
      int v116 = v738;
      if (!v312) {
        goto LABEL_436;
      }
      uint64_t v313 = 0;
      long long v314 = *(_OWORD *)(v96 + 144);
      *(_OWORD *)__b = *(_OWORD *)(v96 + 128);
      *(_OWORD *)&__b[16] = v314;
      unsigned int v315 = v308 - 1;
      unsigned int v316 = v308 - *(_DWORD *)(v96 + 20);
      unint64_t v793 = __PAIR64__(v316, v315);
      int32x2_t v794 = vadd_s32(vdup_n_s32(v316), (int32x2_t)0xFFFFFFFF00000001);
      while (1)
      {
        if (*(void *)&__b[8 * v313])
        {
          unsigned int v317 = *((_DWORD *)&v793 + v313);
          if (*(unsigned char *)(*(void *)(v307 + 4920) + 216 * v317 + 61))
          {
            uint64_t v318 = v310 + 32 * (int)v317;
            WORD2(v786) = *(_WORD *)(v318 + 24);
            uint64_t v319 = *(void *)(v318 + 8);
            uint64_t v789 = *(void *)v318;
            LODWORD(v318) = *(unsigned __int8 *)(v318 + 26);
            *(void *)&long long v801 = v319;
            if (v318) {
              break;
            }
          }
        }
LABEL_435:
        if (++v313 == 4) {
          goto LABEL_436;
        }
      }
      char v320 = 0;
      uint64_t v321 = 0;
      while (1)
      {
        if (!__dst.i8[v321] && !*((unsigned char *)&v786 + v321 + 4))
        {
          v322 = (__int16 *)&v789 + 2 * v321;
          v323 = (__int16 *)&v803 + 2 * v321;
          int v324 = *v322 - *v323;
          int v116 = v738;
          if (v324 < 0) {
            int v324 = *v323 - *v322;
          }
          int v325 = v322[1] - v323[1];
          if (v325 >= 0) {
            unsigned int v326 = v325;
          }
          else {
            unsigned int v326 = -v325;
          }
          int v327 = *((_DWORD *)&v801 + v321);
          int v328 = *((_DWORD *)&v799 + v321);
          int v329 = v327 - v328;
          if (v329 < 0) {
            int v329 = -v329;
          }
          BOOL v330 = v324 > 0xF || v326 > 0xF;
          if (!v330 && 100 * v329 / (v328 + 1) < 45) {
            break;
          }
        }
        if ((v320 & 1) == 0 && v116 != 5)
        {
          char v320 = 1;
          uint64_t v321 = 1;
          if (v116) {
            continue;
          }
        }
        goto LABEL_435;
      }
    }
  }
  if (v112) {
    char v347 = 1;
  }
  else {
    char v347 = v115;
  }
  if ((v347 & 1) != 0 || (*(unsigned char *)(v111 + 7) = 0, !v734[3532]))
  {
    int v348 = 1;
    uint64_t v349 = a3;
  }
  else
  {
    if (v734[3557])
    {
      int v348 = 1;
      uint64_t v349 = a3;
    }
    else
    {
      *(void *)(v96 + 40) = v111 + 4;
      *(void *)(v96 + 48) = v111 + 64;
      *(void *)(v96 + 176) = v111 + 26560;
      *(void *)(v96 + 56) = v111 + 28432;
      *(void *)(v96 + 312) = *(void *)(v111 + 26544);
      *(void *)(v96 + 2624) = v111 + 27120;
      *(void *)(v96 + 2632) = *(void *)(v111 + 29248);
      *(void *)(v96 + 2560) = *(void *)(v111 + 27104);
      *(void *)(v96 + 2568) = *(void *)(v111 + 27112);
      *(void *)(v96 + 2544) = v111 + 29664;
      *(void *)(v96 + 2552) = v111 + 30176;
      *(void *)(v96 + 2528) = v111 + 29280;
      *(void *)(v96 + 2536) = v111 + 29536;
      int v371 = *(_DWORD *)(v96 + 4);
      uint64_t v372 = *(void *)(v96 + 216);
      uint64_t v373 = (16 * *(_DWORD *)v96);
      uint64_t v374 = *(void *)(v372 + 136);
      int v375 = *(_DWORD *)(v372 + 232);
      uint64_t v376 = *(void *)(v372 + 128) + v373 + (16 * v371 * v375);
      LODWORD(v372) = *(_DWORD *)(v372 + 248);
      *(void *)__b = v376;
      *(void *)&__b[16] = v374 + v373 + (8 * v371 * v372);
      *(_DWORD *)&__b[8] = v375;
      *(_DWORD *)&__b[24] = v372;
      unint64_t v793 = v111 + 29280;
      uint64_t v795 = v111 + 29536;
      v794.i32[0] = 16;
      int v796 = 16;
      *(void *)&long long v803 = v111 + 29664;
      *(void *)&long long v804 = v111 + 30176;
      DWORD2(v803) = 32;
      DWORD2(v804) = 32;
      sub_1BBB54730(v96, (uint64_t *)__b, (uint64_t)&v793, (uint64_t *)&v803);
      if (v114 == 0xFFFF || v114 == -1) {
        int v114 = off_1E9F831F8(v111 + 29664);
      }
      v377 = off_1E9F83200;
      int v378 = off_1E9F83200(v111 + 29664, 16);
      int v379 = v377(v111 + 29680, 16);
      int v380 = v377(v111 + 29920, 16);
      int v381 = v378 - v114 + v379 + v380 + v377(v111 + 29936, 16);
      if (v381 >= *(_DWORD *)(v735 + 100))
      {
        int v348 = 0;
        uint64_t v96 = v736;
        uint64_t v349 = a3;
        int v116 = v738;
      }
      else
      {
        uint64_t v349 = a3;
        int v116 = v738;
        if (!v730 && v381 < 0) {
          DWORD2(v779) += v381;
        }
        int v348 = 0;
        *(unsigned char *)(v111 + 7) = 1;
        uint64_t v96 = v736;
      }
    }
    if (v734[3532] && v734[3557])
    {
      *(unsigned char *)(v111 + 7) = 1;
      sub_1BBAFA9D0(v111, v96, a2, (uint64_t)__b);
      if (DWORD2(v779) > *(_DWORD *)&__b[8] && *(unsigned char *)(*(void *)(v96 + 40) + 52)) {
        DWORD2(v779) = *(_DWORD *)&__b[8];
      }
      else {
        *(unsigned char *)(v111 + 7) = 0;
      }
      int v348 = 1;
    }
  }
  if ((v116 == 6 || v116 == 1) && *(unsigned char *)(*(void *)(a1 + 136) + 634)) {
    DWORD2(v779) = (DWORD2(v779) * (256 - *(unsigned __int8 *)(*(void *)(a1 + 136) + 634))) >> 8;
  }
  if (DWORD2(v781) < DWORD2(v779)) {
    int v350 = 1;
  }
  else {
    int v350 = v112;
  }
  if (!v350)
  {
    *(void *)(v96 + 40) = v111 + 4;
    *(void *)(v96 + 48) = v111 + 64;
    *(void *)(v96 + 176) = v111 + 26560;
    *(void *)(v96 + 56) = v111 + 28432;
    *(void *)(v96 + 312) = *(void *)(v111 + 26544);
    *(void *)(v96 + 2624) = v111 + 27120;
    *(void *)(v96 + 2632) = *(void *)(v111 + 29248);
    *(void *)(v96 + 2560) = *(void *)(v111 + 27104);
    *(void *)(v96 + 2568) = *(void *)(v111 + 27112);
    *(void *)(v96 + 2544) = v111 + 29664;
    *(void *)(v96 + 2552) = v111 + 30176;
    *(void *)(v96 + 2528) = v111 + 29280;
    v356 = (long long *)(v111 + 29536);
    *(void *)(v96 + 2536) = v111 + 29536;
    *(void *)(v349 + 136) = v111;
    if (v113) {
      goto LABEL_512;
    }
    sub_1BBB5F58C(v96, v348);
    if (v712 && v734[3551])
    {
      *(_DWORD *)__b = 0;
      sub_1BBAFA218(v96, v349, 0, *v721, (int *)__b);
      LODWORD(v5) = *(_DWORD *)__b;
      int v357 = sub_1BBB5B524(v725, v111 + 29280, 0x10u);
      if (v709 < sub_1BBB5B524(v710, (uint64_t)v356, 8u)
                + v357
                + (v95 * (double)*(unint64_t *)&v5))
      {
        if (v738 == 6 || v738 == 1) {
          v358 = (void *)(v349 + 128);
        }
        else {
          v358 = (void *)(v349 + 120);
        }
        v418 = (void *)(*v358 + 30432 * *(unsigned int *)(v349 + 48));
        *(void *)(v96 + 40) = (char *)v418 + 4;
        *(void *)(v96 + 48) = v418 + 8;
        *(void *)(v96 + 176) = v418 + 3320;
        *(void *)(v96 + 56) = v418 + 3554;
        *(void *)(v96 + 312) = v418[3318];
        *(void *)(v96 + 2624) = v418 + 3390;
        *(void *)(v96 + 2632) = v418[3656];
        *(void *)(v96 + 2560) = v418[3388];
        *(void *)(v96 + 2568) = v418[3389];
        *(void *)(v96 + 2544) = v418 + 3708;
        *(void *)(v96 + 2552) = v418 + 3772;
        *(void *)(v96 + 2528) = v418 + 3660;
        *(void *)(v96 + 2536) = v418 + 3692;
        *(void *)(v349 + 136) = v418;
      }
LABEL_1034:
      uint64_t v703 = *(void *)(a2 + 47888);
      if (*(unsigned char *)(*(void *)(v96 + 40) + 3)) {
        ++*(_DWORD *)(v703 + 16);
      }
      else {
        ++*(_DWORD *)(v703 + 20);
      }
      goto LABEL_512;
    }
    if (*(unsigned char *)(v349 + 9))
    {
      v385 = *(unsigned char **)(v96 + 40);
      if (v385[1] == 2 && !v385[2] && !v385[52] && !v385[53] && !*(unsigned char *)(*(void *)(v96 + 48) + 24))
      {
        uint64_t v386 = *(void *)(v349 + 120);
        unsigned int v387 = *(_DWORD *)(v349 + 48);
        sub_1BBAFA148(v386 + 30432 * v387, v96);
        int v388 = *(unsigned __int8 *)(v96 + 188);
        uint64_t v389 = *(void *)(v96 + 176);
        *(void *)(v389 + 240) = 0;
        *(void *)(v389 + 248) = 0;
        *(void *)(v389 + 256) = 0;
        *(void *)&long long v390 = 0x2222222222222222;
        *((void *)&v390 + 1) = 0x2222222222222222;
        *(_OWORD *)(v389 + 208) = v390;
        *(_OWORD *)(v389 + 224) = v390;
        if (v388)
        {
          *(unsigned char *)(v389 + 176) = 0;
          *(_DWORD *)(v389 + 177) = -1;
          *(unsigned char *)(v389 + 181) = -1;
          *(unsigned char *)(v389 + 199) = 0;
          *(void *)&long long v391 = 0x2020202020202020;
          *((void *)&v391 + 1) = 0x2020202020202020;
          *(_OWORD *)(v389 + 128) = v391;
          *(_OWORD *)(v389 + 144) = v391;
          *(_OWORD *)uint64_t v389 = 0u;
          *(_OWORD *)(v389 + 16) = 0u;
          *(_OWORD *)(v389 + 32) = 0u;
          *(_OWORD *)(v389 + 48) = 0u;
          *(_OWORD *)(v389 + 64) = 0u;
          *(_OWORD *)(v389 + 80) = 0u;
          *(_OWORD *)(v389 + 96) = 0u;
          *(_OWORD *)(v389 + 112) = 0u;
          *(void *)(v389 + 160) = *(void *)(v389 + 272);
          *(void *)(v389 + 168) = 0;
        }
        sub_1BBB10A94(v96);
        sub_1BBB52BB8(v96, v392, v393, v394, v395, v396);
        int v397 = **(_DWORD **)(*(void *)(v96 + 176) + 272);
        if (v397 == **(_DWORD **)(v111 + 26832))
        {
          v398 = (_OWORD *)(v386 + 30432 * v387);
          long long v399 = *(_OWORD *)(v111 + 29280);
          long long v400 = *(_OWORD *)(v111 + 29296);
          long long v401 = *(_OWORD *)(v111 + 29312);
          v398[1833] = *(_OWORD *)(v111 + 29328);
          v398[1832] = v401;
          v398[1831] = v400;
          v398[1830] = v399;
          long long v402 = *(_OWORD *)(v111 + 29344);
          long long v403 = *(_OWORD *)(v111 + 29360);
          long long v404 = *(_OWORD *)(v111 + 29376);
          v398[1837] = *(_OWORD *)(v111 + 29392);
          v398[1836] = v404;
          v398[1835] = v403;
          v398[1834] = v402;
          long long v405 = *(_OWORD *)(v111 + 29408);
          long long v406 = *(_OWORD *)(v111 + 29424);
          long long v407 = *(_OWORD *)(v111 + 29440);
          v398[1841] = *(_OWORD *)(v111 + 29456);
          v398[1840] = v407;
          v398[1839] = v406;
          v398[1838] = v405;
          long long v408 = *(_OWORD *)(v111 + 29472);
          long long v409 = *(_OWORD *)(v111 + 29488);
          long long v410 = *(_OWORD *)(v111 + 29504);
          v398[1845] = *(_OWORD *)(v111 + 29520);
          v398[1844] = v410;
          v398[1843] = v409;
          v398[1842] = v408;
          long long v411 = *v356;
          long long v412 = *(_OWORD *)(v111 + 29552);
          long long v413 = *(_OWORD *)(v111 + 29568);
          v398[1849] = *(_OWORD *)(v111 + 29584);
          v398[1848] = v413;
          v398[1847] = v412;
          v398[1846] = v411;
          long long v414 = *(_OWORD *)(v111 + 29600);
          long long v415 = *(_OWORD *)(v111 + 29616);
          long long v416 = *(_OWORD *)(v111 + 29632);
          v398[1853] = *(_OWORD *)(v111 + 29648);
          v398[1852] = v416;
          v398[1851] = v415;
          v398[1850] = v414;
          uint64_t v417 = *(void *)(v349 + 120) + 30432 * v387;
        }
        else
        {
          if (!v730 || v397 != *(_DWORD *)(*(void *)(v349 + 14096) + 80))
          {
            sub_1BBAFA148(v111, v96);
            goto LABEL_1026;
          }
          uint64_t v417 = *(void *)(v349 + 120) + 30432 * v387;
        }
        *(void *)(v349 + 136) = v417;
      }
    }
LABEL_1026:
    if (!*(unsigned char *)(v96 + 188))
    {
      uint64_t v701 = *(void *)(v96 + 40);
      if (*(unsigned char *)(v701 + 1) == 2 && *(unsigned char *)(v701 + 2) == 3)
      {
        v702 = *(unsigned char **)(v96 + 48);
        if (!v702[24] && !v702[40] && !v702[56] && !v702[72]) {
          *(unsigned char *)(v701 + 2) = 4;
        }
      }
    }
    goto LABEL_1034;
  }
  *(unsigned char *)(*(void *)(v96 + 72) + 32 * *(unsigned int *)(v96 + 16) + 28) = 1;
  *(_DWORD *)__b = 0;
  sub_1BBAFC88C((char)v747, v349, v96, *(_DWORD *)(a2 + 14184), SHIDWORD(v723), (int *)__b);
  uint64_t v351 = v783;
  *(unsigned char *)(v783 + 353) = __b[0];
  *(void *)(v351 + 29248) = v349 + 928 * *v734 + 10576;
  if (*(unsigned char *)(v351 + 6)) {
    *(unsigned char *)(v351 + 27120) = sub_1BBB596C4(v351 + 27408, ((32 * (*(unsigned char *)(v351 + 59) % 6u)) | (*(unsigned char *)(v351 + 59) / 6u) & 0x1F), v351 + 27920, (__int16 *)(v351 + 28432), (__int16 *)(v351 + 28464), *(unsigned __int8 *)(v96 + 336), *(unsigned __int8 *)(v96 + 29));
  }
  uint64_t v352 = *(void *)(v349 + 112);
  if (v351 == v352 + 121728)
  {
    v355 = (_DWORD *)(*(void *)(a2 + 47888) + 28);
  }
  else
  {
    uint64_t v353 = v352 + 152160;
    uint64_t v354 = *(void *)(a2 + 47888);
    if (v351 == v353) {
      v355 = (_DWORD *)(v354 + 24);
    }
    else {
      v355 = (_DWORD *)(v354 + 32);
    }
  }
  ++*v355;
  *(void *)(v96 + 40) = v351 + 4;
  *(void *)(v96 + 48) = v351 + 64;
  *(void *)(v96 + 176) = v351 + 26560;
  *(void *)(v96 + 56) = v351 + 28432;
  *(void *)(v96 + 312) = *(void *)(v351 + 26544);
  *(void *)(v96 + 2624) = v351 + 27120;
  *(void *)(v96 + 2632) = *(void *)(v351 + 29248);
  *(void *)(v96 + 2560) = *(void *)(v351 + 27104);
  *(void *)(v96 + 2568) = *(void *)(v351 + 27112);
  *(void *)(v96 + 2544) = v351 + 29664;
  *(void *)(v96 + 2552) = v351 + 30176;
  *(void *)(v96 + 2528) = v351 + 29280;
  *(void *)(v96 + 2536) = v351 + 29536;
  *(void *)(v349 + 136) = v351;
  ++*(_DWORD *)(a2 + 50628);
LABEL_512:
  unsigned int v359 = *(_DWORD *)(v96 + 16);
  uint64_t v360 = *(void *)(v96 + 40);
  unsigned int v361 = *(unsigned __int8 *)(v360 + 1);
  unsigned int v362 = *(unsigned __int8 *)(v360 + 2);
  uint64_t v363 = *(void *)(*(void *)(v96 + 216) + 4920);
  uint64_t v364 = v363 + 216 * v359;
  *(_OWORD *)(v364 + 24) = v781;
  *(void *)(v364 + 40) = v782;
  *(_OWORD *)uint64_t v364 = v779;
  *(void *)(v364 + 16) = v780;
  if (v361 > 1)
  {
    uint64_t v369 = v363 + 216 * v359;
    *(_DWORD *)(v369 + 58) = 0x1000000;
    *(unsigned char *)(v369 + 63) = (v361 & 0xFE) == 4;
    switch(v361)
    {
      case 2u:
      case 4u:
        if ((v362 - 3) >= 2u)
        {
          if (v361 != 3) {
            goto LABEL_536;
          }
          goto LABEL_535;
        }
        BOOL v370 = 1;
        break;
      case 3u:
      case 5u:
LABEL_535:
        BOOL v370 = v362 == 22;
        break;
      default:
LABEL_536:
        BOOL v370 = 0;
        break;
    }
    *(unsigned char *)(v363 + 216 * v359 + 62) = v370;
    BOOL v382 = 1;
    switch(v361)
    {
      case 2u:
      case 4u:
        break;
      case 3u:
      case 5u:
        BOOL v382 = v362 != 7 && (v362 & 0xFFFFFFFB) != 2;
        break;
      default:
        BOOL v382 = 0;
        break;
    }
    *(unsigned char *)(v363 + 216 * v359 + 64) = v382;
    if (v361 == 5 || v361 == 3)
    {
      if (v362 > 5) {
        LOBYTE(v384) = 1;
      }
      else {
        unsigned int v384 = (0xDu >> v362) & 1;
      }
    }
    else
    {
      LOBYTE(v384) = 0;
    }
    *(unsigned char *)(v363 + 216 * v359 + 65) = v384;
  }
  else
  {
    uint64_t v365 = v363 + 216 * v359;
    *(unsigned char *)(v365 + 58) = 1;
    if (v361) {
      BOOL v366 = 1;
    }
    else {
      BOOL v366 = v362 == 0;
    }
    char v368 = !v366 && v362 != 25;
    *(unsigned char *)(v365 + 59) = v368;
    *(unsigned char *)(v365 + 60) = (v362 | v361) == 0;
    *(_DWORD *)(v365 + 61) = 0;
    *(unsigned char *)(v365 + 65) = 0;
  }
}

uint64_t sub_1BBB01DAC(uint64_t result, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4 = 0;
  int v5 = 0;
  if (a4)
  {
    do
    {
      uint64_t v6 = 0;
      int v7 = 0;
      do
      {
        LOWORD(v8) = *(_WORD *)(result + v6);
        if ((_WORD)v8)
        {
          if ((v8 & 0x8000u) != 0) {
            int v8 = -(__int16)v8;
          }
          if ((unsigned __int16)v8 < 2u)
          {
            LOWORD(v9) = 1;
          }
          else
          {
            *a2 = 0;
            int v9 = *(__int16 *)(result + v6);
            if (v9 < 0) {
              int v9 = -v9;
            }
          }
          if (a4 / 3 + 1 < (unsigned __int16)v9) {
            goto LABEL_30;
          }
          v4 += dword_1BBB85714[v7];
          if (v4 >= 6) {
            *a2 = 0;
          }
          if (v4 > 5 * a4 / 3 + 5) {
            goto LABEL_30;
          }
          int v7 = -1;
        }
        ++v7;
        v6 += 2;
      }
      while (v6 != 32);
      result += 32;
      ++v5;
    }
    while (v5 != 16);
  }
  else
  {
    while (2)
    {
      uint64_t v10 = 0;
      int v11 = 0;
      do
      {
        LOWORD(v12) = *(_WORD *)(result + v10);
        if ((_WORD)v12)
        {
          if ((v12 & 0x8000u) != 0) {
            int v12 = -(__int16)v12;
          }
          if ((unsigned __int16)v12 > 1u || (v4 += dword_1BBB85714[v11], v4 > 5))
          {
            a3 = a2;
LABEL_30:
            *a3 = 0;
            return result;
          }
          int v11 = -1;
        }
        ++v11;
        v10 += 2;
      }
      while (v10 != 32);
      result += 32;
      if (++v5 != 16) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1BBB01EE4(uint64_t result, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v4 = result + 912;
  uint64_t v5 = 0;
  if (a4)
  {
    unsigned int v6 = a4 / 3;
    while (1)
    {
      LOWORD(v7) = *(_WORD *)(v4 + v5);
      if ((_WORD)v7)
      {
        *a2 = 0;
        LOWORD(v7) = *(_WORD *)(v4 + v5);
      }
      unsigned int v7 = (__int16)v7;
      if ((v7 & 0x8000u) != 0) {
        unsigned int v7 = -(__int16)v7;
      }
      if (v6 < v7) {
        break;
      }
      v5 += 2;
      if (v5 == 16)
      {
        unsigned int v8 = 0;
        int v9 = 0;
        unsigned int v10 = v6 + 1;
        unsigned int v11 = 6 * a4 / 3 + 6;
        uint64_t v12 = result + 658;
        do
        {
          uint64_t v13 = 0;
          int v14 = 0;
          do
          {
            LOWORD(v15) = *(_WORD *)(v12 + v13);
            if ((_WORD)v15)
            {
              if ((v15 & 0x8000u) != 0) {
                int v15 = -(__int16)v15;
              }
              if ((unsigned __int16)v15 < 2u)
              {
                LOWORD(v16) = 1;
              }
              else
              {
                *a2 = 0;
                int v16 = *(__int16 *)(v12 + v13);
                if (v16 < 0) {
                  int v16 = -v16;
                }
              }
              if (v10 < (unsigned __int16)v16) {
                goto LABEL_47;
              }
              v8 += dword_1BBB85714[v14];
              if (v8 >= 7) {
                *a2 = 0;
              }
              if (v8 > v11) {
                goto LABEL_47;
              }
              int v14 = -1;
            }
            ++v14;
            v13 += 2;
          }
          while (v13 != 30);
          ++v9;
          v12 += 32;
        }
        while (v9 != 4);
        unsigned int v17 = 0;
        int v18 = 0;
        uint64_t v19 = result + 786;
        do
        {
          uint64_t v20 = 0;
          int v21 = 0;
          do
          {
            LOWORD(v22) = *(_WORD *)(v19 + v20);
            if ((_WORD)v22)
            {
              if ((v22 & 0x8000u) != 0) {
                int v22 = -(__int16)v22;
              }
              if ((unsigned __int16)v22 < 2u)
              {
                LOWORD(v23) = 1;
              }
              else
              {
                *a2 = 0;
                int v23 = *(__int16 *)(v19 + v20);
                if (v23 < 0) {
                  int v23 = -v23;
                }
              }
              if (v10 < (unsigned __int16)v23) {
                goto LABEL_47;
              }
              v17 += dword_1BBB85714[v21];
              if (v17 >= 7) {
                *a2 = 0;
              }
              if (v17 > v11) {
                goto LABEL_47;
              }
              int v21 = -1;
            }
            ++v21;
            v20 += 2;
          }
          while (v20 != 30);
          ++v18;
          v19 += 32;
        }
        while (v18 != 4);
        return result;
      }
    }
LABEL_47:
    *a3 = 0;
  }
  else
  {
    do
    {
      if (*(_WORD *)(v4 + v5))
      {
LABEL_46:
        a3 = a2;
        goto LABEL_47;
      }
      v5 += 2;
    }
    while (v5 != 16);
    unsigned int v24 = 0;
    int v25 = 0;
    uint64_t v26 = result + 658;
    do
    {
      uint64_t v27 = 0;
      int v28 = 0;
      do
      {
        LOWORD(v29) = *(_WORD *)(v26 + v27);
        if ((_WORD)v29)
        {
          if ((v29 & 0x8000u) != 0) {
            int v29 = -(__int16)v29;
          }
          if ((unsigned __int16)v29 > 1u) {
            goto LABEL_46;
          }
          v24 += dword_1BBB85714[v28];
          if (v24 > 6) {
            goto LABEL_46;
          }
          int v28 = -1;
        }
        ++v28;
        v27 += 2;
      }
      while (v27 != 30);
      ++v25;
      v26 += 32;
    }
    while (v25 != 4);
    unsigned int v30 = 0;
    int v31 = 0;
    uint64_t v32 = result + 786;
    do
    {
      uint64_t v33 = 0;
      int v34 = 0;
      do
      {
        LOWORD(v35) = *(_WORD *)(v32 + v33);
        if ((_WORD)v35)
        {
          if ((v35 & 0x8000u) != 0) {
            int v35 = -(__int16)v35;
          }
          if ((unsigned __int16)v35 > 1u) {
            goto LABEL_46;
          }
          v30 += dword_1BBB85714[v34];
          if (v30 > 6) {
            goto LABEL_46;
          }
          int v34 = -1;
        }
        ++v34;
        v33 += 2;
      }
      while (v33 != 30);
      ++v31;
      v32 += 32;
    }
    while (v31 != 4);
  }
  return result;
}

uint64_t sub_1BBB02180(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = *(void *)(a2 + 13032);
  uint64_t v6 = *(void *)(a2 + 13040);
  if (*(unsigned char *)(a1 + 188))
  {
    unsigned int v8 = *(_DWORD **)(a1 + 192);
    sub_1BBB4F6E8((uint64_t)v8, (uint64_t *)(a2 + 14064), *(unsigned __int8 *)(a1 + 28), 1u);
    int v9 = v8[10] + v8[6] + 8 * (*v8 - v8[2]);
    int v10 = (v9 & ~(v9 >> 31)) - *(_DWORD *)(a2 + 14088);
    *(void *)(v5 + 16) = *(void *)(v6 + 16);
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v6 + 32);
    *(unsigned char *)(v5 + 36) = *(unsigned char *)(v6 + 36);
    uint64_t result = (uint64_t)memcpy(v8, (const void *)(a2 + 13088), 0x3D0uLL);
  }
  else
  {
    uint64_t result = sub_1BBB034B0(*(void *)(a2 + 13032), a3);
    uint64_t v12 = *(void *)(v6 + 16);
    int v10 = *(unsigned __int8 *)(v5 + 36) + 8 * (*(_DWORD *)(v5 + 16) - v12) - *(unsigned __int8 *)(v6 + 36);
    *(void *)(v5 + 16) = v12;
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v6 + 32);
    *(unsigned char *)(v5 + 36) = *(unsigned char *)(v6 + 36);
  }
  *a4 = v10;
  return result;
}

uint64_t sub_1BBB02278(uint64_t result, char a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int v5 = *(_DWORD *)(a3 + 88);
  uint64_t v7 = *(void *)(a4 + 128);
  uint64_t v6 = *(void *)(a4 + 136);
  uint64_t v8 = *(void *)(a4 + 152);
  BOOL v9 = v7 != 0;
  BOOL v10 = v6 != 0;
  BOOL v11 = v8 != 0;
  if (!*(unsigned char *)(a3 + 12432))
  {
LABEL_21:
    if (!v5) {
      return result;
    }
    goto LABEL_22;
  }
  if (v7)
  {
    if (*(unsigned char *)(v7 + 224) == 34)
    {
      if (*(unsigned char *)(v7 + 208) == 34) {
        BOOL v9 = 0;
      }
      if (!v6)
      {
LABEL_9:
        BOOL v10 = 0;
        if (!v8) {
          goto LABEL_16;
        }
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v9 = 1;
      if (!v6) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v9 = 0;
    if (!v6) {
      goto LABEL_9;
    }
  }
  if (*(unsigned char *)(v6 + 224) == 34)
  {
    if (*(unsigned char *)(v6 + 208) == 34) {
      BOOL v10 = 0;
    }
    if (!v8)
    {
LABEL_16:
      BOOL v11 = 0;
      if (!v5) {
        return result;
      }
      goto LABEL_22;
    }
  }
  else
  {
    BOOL v10 = 1;
    if (!v8) {
      goto LABEL_16;
    }
  }
LABEL_19:
  if (*(unsigned char *)(v8 + 224) == 34)
  {
    BOOL v11 = *(unsigned __int8 *)(v8 + 208) != 34;
    goto LABEL_21;
  }
  BOOL v11 = 1;
  if (!v5) {
    return result;
  }
LABEL_22:
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a3 + 112);
  if (!v10 || !v9) {
    BOOL v11 = 0;
  }
  uint64_t v15 = 30432 * v5;
  *(void *)&long long v16 = 0x2222222222222222;
  *((void *)&v16 + 1) = 0x2222222222222222;
  *(void *)&long long v17 = 0x2020202020202020;
  *((void *)&v17 + 1) = 0x2020202020202020;
  do
  {
    uint64_t v18 = v13 + v12;
    if (*(unsigned char *)(v13 + v12 + 6))
    {
      BOOL v19 = v10;
      switch(*(unsigned char *)(v18 + 352))
      {
        case 0:
          goto LABEL_34;
        case 1:
          BOOL v19 = v9;
          goto LABEL_34;
        case 2:
          break;
        case 3:
          BOOL v19 = v11;
LABEL_34:
          *(_DWORD *)uint64_t v18 = v19;
          if (v19) {
            goto LABEL_35;
          }
          goto LABEL_38;
        default:
          *(_DWORD *)uint64_t v18 = 0;
          goto LABEL_38;
      }
    }
    *(_DWORD *)uint64_t v18 = 1;
LABEL_35:
    int v20 = *(unsigned __int8 *)(a4 + 188);
    uint64_t v21 = v13 + v12;
    *(unsigned char *)(v21 + 59) = result;
    *(unsigned char *)(v21 + 58) = a2;
    *(double *)(v21 + 26544) = a5;
    *(void *)(v21 + 26800) = 0;
    *(void *)(v21 + 26816) = 0;
    *(void *)(v21 + 26808) = 0;
    *(_OWORD *)(v21 + 26768) = v16;
    *(_OWORD *)(v21 + 26784) = v16;
    if (v20)
    {
      *(unsigned char *)(v13 + 26736 + v12) = 0;
      *(_DWORD *)(v21 + 26737) = -1;
      *(unsigned char *)(v21 + 26741) = -1;
      *(void *)(v21 + 26728) = 0;
      *(unsigned char *)(v13 + 26759 + v12) = 0;
      *(_OWORD *)(v21 + 26688) = v17;
      *(_OWORD *)(v21 + 26704) = v17;
      *(_OWORD *)(v21 + 26560) = 0uLL;
      *(_OWORD *)(v21 + 26576) = 0uLL;
      *(_OWORD *)(v21 + 26592) = 0uLL;
      *(_OWORD *)(v21 + 26608) = 0uLL;
      *(_OWORD *)(v21 + 26624) = 0uLL;
      *(_OWORD *)(v21 + 26640) = 0uLL;
      *(_OWORD *)(v21 + 26656) = 0uLL;
      *(_OWORD *)(v21 + 26672) = 0uLL;
      *(void *)(v21 + 26720) = *(void *)(v21 + 26832);
    }
    *(unsigned char *)(v21 + 353) = 0;
LABEL_38:
    v12 += 30432;
  }
  while (v15 != v12);
  return result;
}

uint64_t sub_1BBB02484(uint64_t a1, int a2, int a3)
{
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_DWORD *)(a1 + 4) = a3 * a2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 1065353216;
  uint64_t v4 = malloc_type_malloc((2 * a3 * a2), 0x82ECD37AuLL);
  *(void *)(a1 + 64) = v4;
  if (v4)
  {
    unsigned int v5 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
    *(void *)(a1 + 96) = v5;
    if (v5)
    {
      uint64_t v6 = malloc_type_malloc(2 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
      *(void *)(a1 + 136) = v6;
      if (v6)
      {
        uint64_t v7 = malloc_type_malloc(2 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
        *(void *)(a1 + 144) = v7;
        if (v7)
        {
          uint64_t v8 = malloc_type_malloc(2 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
          *(void *)(a1 + 152) = v8;
          if (v8)
          {
            BOOL v9 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
            *(void *)(a1 + 120) = v9;
            if (v9)
            {
              BOOL v10 = malloc_type_malloc(4 * (4 * *(_DWORD *)(a1 + 4)), 0x82ECD37AuLL);
              *(void *)(a1 + 184) = v10;
              if (v10)
              {
                BOOL v11 = malloc_type_malloc((4 * *(_DWORD *)(a1 + 4)), 0x82ECD37AuLL);
                *(void *)(a1 + 176) = v11;
                if (v11)
                {
                  uint64_t v12 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
                  *(void *)(a1 + 48) = v12;
                  if (v12)
                  {
                    uint64_t v13 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
                    *(void *)(a1 + 56) = v13;
                    if (v13) {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_1BBB025F4((void **)a1);
  return 1;
}

void sub_1BBB025F4(void **a1)
{
  a1[8] = 0;
  free(a1[12]);
  a1[12] = 0;
  free(a1[17]);
  a1[17] = 0;
  free(a1[18]);
  a1[18] = 0;
  free(a1[19]);
  a1[19] = 0;
  free(a1[15]);
  a1[15] = 0;
  free(a1[23]);
  a1[23] = 0;
  free(a1[22]);
  a1[22] = 0;
  free(a1[6]);
  a1[6] = 0;
  free(a1[7]);
  a1[7] = 0;
}

float sub_1BBB0268C(unsigned int a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6, float result)
{
  if (a1 - 0xFFFF >= 0xFFFF0002)
  {
    float v7 = result * 0.25;
    if ((float)((float)((float)(result * 0.25) * (float)(int)(a2 - a1)) / (float)a1) <= (float)(result * 0.25)) {
      float v7 = (float)((float)(result * 0.25) * (float)(int)(a2 - a1)) / (float)a1;
    }
    if (a2 <= a1) {
      float v7 = (float)((float)((float)a1 * 0.5) + (float)((float)(result * -0.75) * (float)(int)(a1 - a2))) / (float)a1;
    }
    float v8 = v7 + result;
    if (a4) {
      float v8 = v8 + (float)(a4 * a3);
    }
    float v9 = (float)a6;
    if (a6) {
      BOOL v10 = a5 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10) {
      float v9 = -0.0;
    }
    float v11 = v9 + v8;
    uint64_t result = 0.0;
    if (v11 >= 0.0)
    {
      uint64_t result = v11;
      if (v11 > 51.0) {
        return 51.0;
      }
    }
  }
  return result;
}

uint64_t sub_1BBB02744(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (a6 < 8)
  {
    unint64_t v6 = 0;
LABEL_19:
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  unint64_t v6 = 0;
  uint64_t v7 = a1 - a3 + 8 * a3 + 16;
  for (unint64_t i = 7; i < a6; i += 16)
  {
    int8x16_t v9 = 0uLL;
    int8x16_t v10 = 0uLL;
    if (a5 >= 0x20)
    {
      float v11 = (int8x16_t *)v7;
      uint64_t v12 = (a5 >> 4) >> 1;
      do
      {
        int8x16_t v10 = veorq_s8(v11[-1], v10);
        int8x16_t v9 = veorq_s8(*v11, v9);
        v11 += 2;
        --v12;
      }
      while (v12);
    }
    if ((a5 & 0x10) != 0) {
      int8x16_t v10 = veorq_s8(*(int8x16_t *)(a1 + i * a3 + 8 * (2 * (a5 >> 4) - 2)), v10);
    }
    int8x16_t v13 = veorq_s8(v10, v9);
    v6 ^= *(void *)&veor_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
    v7 += 16 * a3;
  }
  if (a6 < 16) {
    goto LABEL_19;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 7 * a4 + a2 + 16;
  unint64_t v16 = 7;
  do
  {
    int8x16_t v17 = 0uLL;
    int8x16_t v18 = 0uLL;
    if (a5 >= 0x20)
    {
      BOOL v19 = (int8x16_t *)v15;
      uint64_t v20 = (a5 >> 4) >> 1;
      do
      {
        int8x16_t v18 = veorq_s8(v19[-1], v18);
        int8x16_t v17 = veorq_s8(*v19, v17);
        v19 += 2;
        --v20;
      }
      while (v20);
    }
    if ((a5 & 0x10) != 0) {
      int8x16_t v18 = veorq_s8(*(int8x16_t *)(a2 + v16 * a4 + 8 * (2 * (a5 >> 4) - 2)), v18);
    }
    int8x16_t v21 = veorq_s8(v18, v17);
    v14 ^= *(void *)&veor_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    v16 += 8;
    v15 += 8 * a4;
  }
  while (v16 < a6 >> 1);
LABEL_20:
  unsigned int v22 = ((v6 ^ HIDWORD(v6)) >> 16) ^ (unsigned __int16)(v6 ^ WORD2(v6));
  return (((v14 ^ HIDWORD(v14)) >> 16) ^ (unsigned __int16)(v14 ^ WORD2(v14)) ^ (unsigned __int16)((((v14 ^ HIDWORD(v14)) >> 16) ^ (unsigned __int16)(v14 ^ WORD2(v14))) << 8)) & 0xFF00 | (unsigned __int16)(v22 ^ (unsigned __int16)(v22 >> 8));
}

unint64_t sub_1BBB028C0(void *a1, int *a2, int *a3, int *a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v54 = a6;
  int v12 = *a2;
  MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v15 = (_OWORD *)((char *)&v51 - v14);
  uint64_t v53 = (uint64_t)v16;
  int v17 = *v16 + 7;
  LODWORD(v14) = *v18;
  int v52 = v13;
  unint64_t v19 = 0;
  if (v17 < (int)v14)
  {
    BOOL v20 = v13 == 0;
    int v57 = (int *)((v12 >> 4) >> 1);
    uint64_t v55 = 8 * (2 * (v12 >> 4) - 2);
    int v56 = v15 + 1;
    while (a7)
    {
      uint64_t v21 = *(void *)(a7 + 16);
      int v22 = *a2;
      if (!v21) {
        goto LABEL_7;
      }
      int v23 = *((_DWORD *)v54 + 903);
      unsigned int v24 = ((v17 / v23) >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4);
      int v25 = (v17 / v23) & ~(-1 << *(_DWORD *)a7);
      uint64_t v26 = *(_DWORD *)(v21 + v24 + 4 * v25) & 0xFFFFFFF;
      uint64_t v27 = (*(_DWORD *)(v21 + v24 + 4 * (v25 + (1 << *(_DWORD *)a7))) & 0xFFFFFFF) - v26;
      int v28 = (long long *)(*a1 + v26 + 16 * (v17 % v23));
LABEL_8:
      DetileRow_neon_h264(v15, v28, v22, v27);
      uint64_t v30 = *a4;
      int8x16_t v31 = 0uLL;
      int8x16_t v32 = 0uLL;
      if (v12 >= 0x20)
      {
        uint64_t v33 = v57;
        int v34 = (int8x16_t *)((char *)v56 + 8 * v30);
        do
        {
          int8x16_t v32 = veorq_s8(v34[-1], v32);
          int8x16_t v31 = veorq_s8(*v34, v31);
          v34 += 2;
          uint64_t v33 = (int *)((char *)v33 - 1);
        }
        while (v33);
      }
      if ((v12 & 0x10) != 0) {
        int8x16_t v32 = veorq_s8(*(int8x16_t *)((char *)v15 + 8 * v30 + v55), v32);
      }
      int8x16_t v35 = veorq_s8(v32, v31);
      v19 ^= *(void *)&veor_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      v17 += 16;
      if (v17 >= *a3) {
        goto LABEL_14;
      }
    }
    int v22 = *a2;
LABEL_7:
    int v29 = dword_1BBB85754[v20];
    uint64_t v27 = (16 * v29);
    int v28 = (long long *)(*a1 + v22 * (v17 & -v29) + 16 * ((v29 - 1) & v17));
    goto LABEL_8;
  }
LABEL_14:
  int v36 = *(_DWORD *)(v53 + 4) + 7;
  if (v36 >= a3[1])
  {
    uint64_t v37 = 0;
  }
  else
  {
    int v56 = a1;
    int v57 = a4;
    uint64_t v37 = 0;
    unsigned int v38 = dword_1BBB85754[v52 == 0];
    int8x16_t v39 = a2;
    int v40 = a2[1];
    int v41 = (v38 >> 1) + 0xFFFFFFF;
    int v42 = -(v38 >> 1);
    uint64_t v43 = 8 * (v38 & 0xFFFFFFF);
    uint64_t v55 = (v40 >> 4) >> 1;
    uint64_t v53 = 8 * (2 * (v40 >> 4) - 2);
    int v54 = v15 + 1;
    do
    {
      DetileRow_neon_h264(v15, (long long *)(*((void *)v56 + 1) + (v36 & v42) * v39[1] + 16 * (v41 & v36)), v39[1], v43);
      uint64_t v44 = v57[1];
      int8x16_t v45 = 0uLL;
      int8x16_t v46 = 0uLL;
      if (v40 >= 0x20)
      {
        uint64_t v47 = v55;
        unsigned int v48 = (int8x16_t *)((char *)v54 + 8 * v44);
        do
        {
          int8x16_t v46 = veorq_s8(v48[-1], v46);
          int8x16_t v45 = veorq_s8(*v48, v45);
          v48 += 2;
          --v47;
        }
        while (v47);
      }
      if ((v40 & 0x10) != 0) {
        int8x16_t v46 = veorq_s8(*(int8x16_t *)((char *)v15 + 8 * v44 + v53), v46);
      }
      int8x16_t v49 = veorq_s8(v46, v45);
      v37 ^= *(void *)&veor_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
      v36 += 8;
    }
    while (v36 < a3[1]);
  }
  return (((v37 ^ HIDWORD(v37)) >> 16) ^ (unsigned __int16)(v37 ^ WORD2(v37)) ^ (unsigned __int16)((((v37 ^ HIDWORD(v37)) >> 16) ^ (unsigned __int16)(v37 ^ WORD2(v37))) << 8)) & 0xFF00 | (((v19 ^ HIDWORD(v19)) >> 16) ^ v19 ^ BYTE4(v19)) ^ ((((v19 ^ HIDWORD(v19)) >> 16) ^ (unsigned __int16)(v19 ^ WORD2(v19))) >> 8);
}

uint64_t sub_1BBB02C3C(uint64_t result, __int16 *a2, int a3, int *a4, uint64_t a5)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if (*a2)
  {
    int v6 = 0;
    v82[0] = *a2;
    v81[0] = 0;
    int v5 = 1;
  }
  else
  {
    int v6 = 1;
  }
  if (a2[1])
  {
    v82[v5] = a2[1];
    v81[v5++] = v6;
    int v7 = -1;
  }
  else
  {
    int v7 = v6;
    int v6 = 0;
  }
  int v8 = v7 + 1;
  if (a2[2])
  {
    v82[v5] = a2[2];
    v81[v5] = v8;
    v6 += v8;
    ++v5;
    int v8 = -1;
  }
  int8x16_t v9 = *(_DWORD **)(a5 + 16);
  int v10 = v8 + 1;
  if (a2[3])
  {
    v82[v5] = a2[3];
    v81[v5] = v10;
    v6 += v10;
    ++v5;
    int v10 = -1;
  }
  int v11 = *(_DWORD *)(a5 + 32);
  int v12 = *(unsigned __int8 *)(a5 + 36);
  if (a3 != 4)
  {
    int v13 = v10 + 1;
    if (a2[4])
    {
      v82[v5] = a2[4];
      v81[v5] = v13;
      v6 += v13;
      ++v5;
      int v13 = -1;
    }
    int v14 = v13 + 1;
    if (a2[5])
    {
      v82[v5] = a2[5];
      v81[v5] = v14;
      v6 += v14;
      ++v5;
      int v14 = -1;
    }
    int v15 = v14 + 1;
    if (a2[6])
    {
      v82[v5] = a2[6];
      v81[v5] = v15;
      v6 += v15;
      ++v5;
      int v15 = -1;
    }
    int v16 = v15 + 1;
    if (a2[7])
    {
      v82[v5] = a2[7];
      v81[v5] = v16;
      v6 += v16;
      ++v5;
      int v16 = -1;
    }
    int v17 = v16 + 1;
    if (a2[8])
    {
      v82[v5] = a2[8];
      v81[v5] = v17;
      v6 += v17;
      ++v5;
      int v17 = -1;
    }
    int v18 = v17 + 1;
    if (a2[9])
    {
      v82[v5] = a2[9];
      v81[v5] = v18;
      v6 += v18;
      ++v5;
      int v18 = -1;
    }
    int v19 = v18 + 1;
    if (a2[10])
    {
      v82[v5] = a2[10];
      v81[v5] = v19;
      v6 += v19;
      ++v5;
      int v19 = -1;
    }
    int v20 = v19 + 1;
    if (a2[11])
    {
      v82[v5] = a2[11];
      v81[v5] = v20;
      v6 += v20;
      ++v5;
      int v20 = -1;
    }
    int v21 = v20 + 1;
    if (a2[12])
    {
      v82[v5] = a2[12];
      v81[v5] = v21;
      v6 += v21;
      ++v5;
      int v21 = -1;
    }
    int v22 = v21 + 1;
    if (a2[13])
    {
      v82[v5] = a2[13];
      v81[v5] = v22;
      v6 += v22;
      ++v5;
      int v22 = -1;
    }
    int v23 = v22 + 1;
    if (a2[14])
    {
      v82[v5] = a2[14];
      v81[v5] = v23;
      v6 += v23;
      ++v5;
      int v23 = -1;
    }
    if (a3 != 15 && a2[15])
    {
      v82[v5] = a2[15];
      int v24 = v23 + 1;
      v81[v5] = v24;
      v6 += v24;
      ++v5;
LABEL_38:
      uint64_t v25 = (v5 - 1);
      int v26 = v82[v25];
      int v27 = 1;
      if (v26 == 1 || v26 == -1)
      {
        v80[0] = (1 - v26) >> 1;
        if (v5 >= 2 && ((v28 = v82[v5 - 2], int v27 = 1, v28 == 1) || v28 == -1))
        {
          v80[1] = (1 - v28) >> 1;
          if (v5 < 3)
          {
            unsigned int v31 = 2;
            int v30 = 1;
          }
          else
          {
            int v29 = v82[v5 - 3];
            int v30 = 1;
            if (v29 == 1 || v29 == -1)
            {
              int v27 = 0;
              v80[2] = (1 - v29) >> 1;
              unsigned int v31 = 3;
            }
            else
            {
              unsigned int v31 = 2;
              int v27 = 1;
            }
          }
        }
        else
        {
          int v30 = 1;
          unsigned int v31 = 1;
        }
      }
      else
      {
        int v30 = 0;
        unsigned int v31 = 0;
      }
      if ((int)result > 2)
      {
        if (result == 3)
        {
          uint64_t result = (v31 | (4 * v5)) - 4;
          int v36 = 6;
LABEL_60:
          unsigned int v39 = v36 + v12;
          unsigned int v40 = (result << -(char)v39) | v11;
          *int8x16_t v9 = bswap32(v40);
          int v41 = (_DWORD *)((char *)v9 + (v39 >> 3));
          unsigned int v42 = v40 << (v39 & 0xF8);
          if (v39 >= 0x20) {
            unsigned int v43 = 0;
          }
          else {
            unsigned int v43 = v42;
          }
          *a4 = v5;
          int v44 = v39 & 7;
          if (v30)
          {
            if (v31 <= 1) {
              uint64_t v45 = 1;
            }
            else {
              uint64_t v45 = v31;
            }
            int8x16_t v46 = v80;
            do
            {
              int v47 = *v46++;
              unsigned int v48 = (v47 << (v44 ^ 0x1F)) | v43;
              *int v41 = bswap32(v48);
              unsigned int v49 = v44 + 1;
              int v41 = (_DWORD *)((char *)v41 + (v49 >> 3));
              uint64_t result = v49 & 8;
              unsigned int v43 = v48 << (v49 & 8);
              int v44 = v49 & 7;
              --v45;
            }
            while (v45);
          }
          uint64_t v50 = v5 + ~v31;
          if ((int)v50 >= 0)
          {
            if (v5 > 10) {
              int v51 = v27;
            }
            else {
              int v51 = 0;
            }
            uint64_t result = 1;
            uint64_t v52 = v50;
            do
            {
              int v53 = v82[v52];
              if (v53 <= 0) {
                int v54 = ~(2 * v53);
              }
              else {
                int v54 = 2 * v53 - 2;
              }
              if (v53 >= 0) {
                unsigned int v55 = v82[v52];
              }
              else {
                unsigned int v55 = -v53;
              }
              if ((v27 & (v52 == v50)) != 0) {
                v54 -= 2;
              }
              if (v51)
              {
                int v56 = v54 >> v51;
                if (v54 >> v51 < 15)
                {
                  int v61 = v56 + 1;
                  int v60 = v54 - (v56 << v51);
                  int v58 = v51;
                }
                else
                {
                  int v57 = v55 + (-15 << (v51 - 1));
                  if (v57 < 2050)
                  {
                    int v58 = 12;
                    int v59 = 15;
                  }
                  else if (v57 >> 1 < 0x801)
                  {
                    int v58 = 13;
                    int v59 = 16;
                  }
                  else
                  {
                    int v58 = 13;
                    do
                      ++v58;
                    while (v57 > (1 << v58) - 4095);
                    int v59 = v58 + 3;
                  }
                  int v61 = v59 + 1;
                  int v60 = (-15 << v51) + v54 + (-4096 << (v59 - 15)) + 4096;
                }
              }
              else if (v54 > 13)
              {
                if (v54 > 0x1D)
                {
                  if (v55 >= 0x811)
                  {
                    if (v55 < 0x1011)
                    {
                      int v68 = 0x2000;
                      int v58 = 13;
                      int v69 = 16;
                    }
                    else
                    {
                      int v58 = 13;
                      do
                        int v68 = 1 << ++v58;
                      while ((int)v55 > (1 << v58) - 4080);
                      int v69 = v58 + 3;
                    }
                    int v61 = v69 + 1;
                    int v60 = v54 - v68 + 4066;
                  }
                  else
                  {
                    int v60 = v54 - 30;
                    int v58 = 12;
                    int v61 = 16;
                  }
                }
                else
                {
                  int v60 = v54 - 14;
                  int v58 = 4;
                  int v61 = 15;
                }
              }
              else
              {
                int v60 = 0;
                int v58 = 0;
                int v61 = v54 + 1;
              }
              unsigned int v62 = v61 + v44;
              unsigned int v63 = (1 << -(char)(v61 + v44)) | v43;
              *int v41 = bswap32(v63);
              int v44 = (v61 + v44) & 7;
              int v41 = (_DWORD *)((char *)v41 + (v62 >> 3));
              unsigned int v43 = v63 << (v62 & 0xF8);
              if (v62 >= 0x20) {
                unsigned int v43 = 0;
              }
              if (v58 >= 1)
              {
                unsigned int v64 = v58 + v44;
                unsigned int v65 = v43 | (v60 << -(char)v64);
                *int v41 = bswap32(v65);
                int v44 = v64 & 7;
                int v41 = (_DWORD *)((char *)v41 + (v64 >> 3));
                unsigned int v43 = v65 << (v64 & 0xF8);
                if (v64 >= 0x20) {
                  unsigned int v43 = 0;
                }
              }
              if (v51 <= 1) {
                int v51 = 1;
              }
              int v66 = v82[v52];
              if (v66 < 0) {
                int v66 = -v66;
              }
              BOOL v67 = v51 >= 6 || v66 <= dword_1BBB85A00[v51];
              if (!v67) {
                ++v51;
              }
              BOOL v67 = (int)v52-- <= 0;
            }
            while (!v67);
          }
          if (v5 < a3)
          {
            BOOL v70 = (unsigned __int8 *)&unk_1BBB841F4 + 4 * v25 + v6;
            unint64_t v71 = (unsigned __int8 *)&unk_1BBB84200 + 4 * v25 + v6;
            if (a3 != 4)
            {
              BOOL v70 = (unsigned __int8 *)&unk_1BBB8420C + 16 * v25 + v6;
              unint64_t v71 = (unsigned __int8 *)&unk_1BBB842FC + 16 * v25 + v6;
            }
            unsigned int v72 = v44 + *v70;
            unsigned int v73 = (*v71 << -(char)v72) | v43;
            *int v41 = bswap32(v73);
            int v44 = v72 & 7;
            int v41 = (_DWORD *)((char *)v41 + (v72 >> 3));
            unsigned int v43 = v73 << (v72 & 0xF8);
            if (v72 >= 0x20) {
              unsigned int v43 = 0;
            }
            if (v5 >= 2 && v6 >= 1)
            {
              do
              {
                uint64_t v74 = (int)v81[v25];
                if (v6 >= 7) {
                  int v75 = 7;
                }
                else {
                  int v75 = v6;
                }
                uint64_t v76 = 16 * v75 - 16;
                unsigned int v77 = v44 + byte_1BBB843EC[v76 + v74];
                unsigned int v78 = (byte_1BBB8445C[v76 + v74] << -(char)(v44 + byte_1BBB843EC[v76 + v74])) | v43;
                *int v41 = bswap32(v78);
                int v44 = v77 & 7;
                int v41 = (_DWORD *)((char *)v41 + (v77 >> 3));
                uint64_t result = v77 & 0x1F8;
                unsigned int v43 = v78 << (v77 & 0xF8);
                if (v77 >= 0x20) {
                  unsigned int v43 = 0;
                }
                if (v25 < 2) {
                  break;
                }
                LODWORD(v25) = v25 - 1;
                BOOL v79 = __OFSUB__(v6, v74);
                v6 -= v74;
              }
              while (!((v6 < 0) ^ v79 | (v6 == 0)));
            }
          }
          *(void *)(a5 + 16) = v41;
          *(_DWORD *)(a5 + 32) = v43;
          *(unsigned char *)(a5 + 36) = v44;
          return result;
        }
        uint64_t v38 = v31 | (4 * v31);
        int v36 = byte_1BBB841CC[v38 + v5];
        uint64_t v37 = (char *)&unk_1BBB841E0 + v38;
      }
      else
      {
        uint64_t v35 = v31 | (16 * v31);
        int v36 = byte_1BBB84034[68 * (int)result + v35 + v5];
        uint64_t v37 = (char *)&unk_1BBB84100 + 68 * (int)result + v35;
      }
      uint64_t result = v37[v5];
      goto LABEL_60;
    }
  }
  if (v5) {
    goto LABEL_38;
  }
  *a4 = 0;
  unsigned int v32 = v12 + byte_1BBB859F4[result];
  unsigned int v33 = (byte_1BBB859F9[result] << -(char)(v12 + byte_1BBB859F4[result])) | v11;
  *int8x16_t v9 = bswap32(v33);
  unsigned int v34 = v33 << (v32 & 0xF8);
  if (v32 >= 0x20) {
    unsigned int v34 = 0;
  }
  *(void *)(a5 + 16) = (char *)v9 + (v32 >> 3);
  *(_DWORD *)(a5 + 32) = v34;
  *(unsigned char *)(a5 + 36) = v32 & 7;
  return result;
}

uint64_t sub_1BBB034B0(uint64_t result, int a2)
{
  v2 = *(_DWORD **)(result + 16);
  int v3 = *(unsigned __int8 *)(result + 36);
  unsigned int v4 = __clz(a2 + 1);
  unsigned int v5 = (((a2 + 1 - (0x80000000 >> v4)) | (0x80000000 >> v4)) << (2 * v4 - v3 - 31)) | *(_DWORD *)(result + 32);
  _DWORD *v2 = bswap32(v5);
  unsigned int v6 = v3 - 2 * v4 + 63;
  int v7 = (char *)v2 + (v6 >> 3);
  unsigned int v8 = v5 << (v6 & 0xF8);
  if (v6 >= 0x20) {
    unsigned int v8 = 0;
  }
  *(void *)(result + 16) = v7;
  *(_DWORD *)(result + 32) = v8;
  *(unsigned char *)(result + 36) = v6 & 7;
  return result;
}

uint64_t sub_1BBB03524(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v6 = a1;
  uint64_t v541 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(unsigned __int8 **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  int v9 = *(unsigned __int8 *)(a1 + 188);
  uint64_t v10 = *(void *)(a1 + 192);
  long long v537 = 0uLL;
  int v538 = 0;
  unsigned int v11 = *(unsigned __int8 *)(a1 + 28);
  int v12 = v8[1];
  int v13 = 1 << v11;
  if (v8[1]) {
    char v14 = 0;
  }
  else {
    char v14 = 5;
  }
  if (v8[1]) {
    char v15 = 0;
  }
  else {
    char v15 = 23;
  }
  BOOL v16 = (v13 & 0x210) != 0 && v12 == 0;
  if ((v13 & 0x42) != 0) {
    char v17 = v15;
  }
  else {
    char v17 = v16;
  }
  if ((v13 & 0x21) != 0) {
    char v18 = v14;
  }
  else {
    char v18 = v17;
  }
  if (v11 <= 9) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unsigned __int8 v20 = v19 + v8[2];
  unsigned __int8 *v8 = v20;
  uint64_t v532 = v7;
  uint64_t v535 = v10;
  if (v9)
  {
    int v21 = *(_DWORD *)(v10 + 40) + *(_DWORD *)(v10 + 24) + 8 * (*(_DWORD *)v10 - *(_DWORD *)(v10 + 8));
    long long v537 = *(_OWORD *)(a1 + 128);
    long long v22 = v537;
    int v23 = *(unsigned char **)(a1 + 176);
    int v538 = v23;
    uint64_t v502 = *(void *)(a1 + 160);
    v23[177] = v12;
    v518 = v23;
    v23[178] = v8[2];
    unsigned int v24 = *(unsigned __int8 *)(a1 + 28);
    unsigned int v25 = *v8;
    uint64_t v26 = *((void *)&v22 + 1);
    if ((void)v22)
    {
      int v27 = *(unsigned __int8 *)(v22 + 177);
      int v28 = *(unsigned __int8 *)(v22 + 178);
    }
    else
    {
      int v27 = 255;
      int v28 = 255;
    }
    int v505 = v21 & ~(v21 >> 31);
    if (*((void *)&v22 + 1))
    {
      int v39 = *(unsigned __int8 *)(*((void *)&v22 + 1) + 177);
      int v40 = *(unsigned __int8 *)(*((void *)&v22 + 1) + 178);
    }
    else
    {
      int v39 = 255;
      int v40 = 255;
    }
    unsigned int v41 = 6;
    uint64_t v42 = 27;
    if (v24 > 9) {
      goto LABEL_71;
    }
    if (((1 << v24) & 0x42) != 0)
    {
      if (*((void *)&v22 + 1))
      {
        BOOL v43 = v39 == 3 && !v40 || (v39 & 0xFE) == 4;
        uint64_t v26 = !v43;
      }
      BOOL v54 = v27 == 3 && v28 == 0;
      int v55 = v27 & 0xFE;
      uint64_t v57 = !v54 && v55 != 4;
      if ((void)v22) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v42 = v58 + v26 + 27;
      unsigned int v41 = 24;
      goto LABEL_71;
    }
    if (((1 << v24) & 0x84) == 0)
    {
      if (((1 << v24) & 0x210) != 0)
      {
LABEL_111:
        uint64_t v29 = a2;
        uint64_t v7 = v532;
        goto LABEL_112;
      }
LABEL_71:
      if (v41 >= v25) {
        unsigned int v59 = *v8;
      }
      else {
        unsigned int v59 = v41;
      }
      if (v25 >= v41) {
        unsigned int v60 = v25 - v41;
      }
      else {
        unsigned int v60 = 0;
      }
      if (v24 == 6 || v24 == 1)
      {
        int v61 = (unsigned char *)(v10 + 2 * v42 + 48);
        if (v59)
        {
          sub_1BBAF9F54(v10, 1, v61);
          if (v59 <= 2)
          {
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 108));
            unsigned int v62 = (unsigned char *)(v10 + 112);
            int v63 = (v59 - 1);
            uint64_t v64 = v10;
LABEL_93:
            sub_1BBAF9F54(v64, v63, v62);
            goto LABEL_94;
          }
          if (v59 <= 0xA)
          {
            sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 108));
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 110));
            unsigned int v65 = (unsigned char *)(v10 + 112);
            sub_1BBAF9F54(v10, ((v59 - 3) >> 2) & 1, (unsigned char *)(v10 + 112));
            sub_1BBAF9F54(v10, ((v59 - 3) >> 1) & 1, (unsigned char *)(v10 + 112));
            if (((v59 - 3) & 1) == 0)
            {
              uint64_t v64 = v10;
              int v63 = 0;
LABEL_92:
              unsigned int v62 = v65;
              goto LABEL_93;
            }
LABEL_91:
            uint64_t v64 = v10;
            int v63 = 1;
            goto LABEL_92;
          }
          if (v59 != 22 && v59 != 11)
          {
            unsigned int v492 = v59 - (v59 > 0x16);
            sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 108));
            sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 110));
            sub_1BBAF9F54(v10, ((v492 - 12) >> 3) & 1, (unsigned char *)(v10 + 112));
            sub_1BBAF9F54(v10, ((v492 - 12) >> 2) & 1, (unsigned char *)(v10 + 112));
            sub_1BBAF9F54(v10, (v492 >> 1) & 1, (unsigned char *)(v10 + 112));
            sub_1BBAF9F54(v10, v492 & 1, (unsigned char *)(v10 + 112));
            if (v492 <= 0x15) {
              v59 -= v59 > 0x16;
            }
            else {
              unsigned int v59 = v492 + 1;
            }
LABEL_94:
            if (v59 == v41)
            {
              uint64_t v7 = v532;
              if (v60 == 24) {
                goto LABEL_96;
              }
              sub_1BBAFA0A4(v10, 0);
              sub_1BBAF9F54(v10, v60 / 0xCu, (unsigned char *)(v10 + 84));
              BOOL v68 = 0;
              if (v60 % 0xCu >= 4)
              {
                sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 86));
                BOOL v68 = ((v60 % 0xCu) & 0xC) != 4;
              }
              sub_1BBAF9F54(v10, v68, (unsigned char *)(v10 + 86));
              sub_1BBAF9F54(v10, (v60 >> 1) & 1, (unsigned char *)(v10 + 88));
              int v49 = v60 & 1;
              uint64_t v48 = v10;
              int v47 = (unsigned char *)(v10 + 88);
LABEL_100:
              sub_1BBAF9F54(v48, v49, v47);
              goto LABEL_101;
            }
            goto LABEL_111;
          }
          sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 108));
          sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 110));
          unsigned int v65 = (unsigned char *)(v10 + 112);
          sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 112));
          sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 112));
          if (v59 != 11) {
            goto LABEL_91;
          }
          uint64_t v66 = v10;
          int v67 = 0;
          int v61 = (unsigned char *)(v10 + 112);
          goto LABEL_110;
        }
      }
      else
      {
        switch(v59)
        {
          case 0u:
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 76));
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 78));
            int v61 = (unsigned char *)(v10 + 80);
            goto LABEL_109;
          case 1u:
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 76));
            sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 78));
            int v61 = (unsigned char *)(v10 + 82);
            uint64_t v66 = v10;
            int v67 = 1;
            goto LABEL_110;
          case 2u:
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 76));
            int v69 = (unsigned char *)(v10 + 78);
            break;
          case 3u:
          case 4u:
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 76));
            sub_1BBAF9F54(v10, 0, (unsigned char *)(v10 + 78));
            unsigned int v62 = (unsigned char *)(v10 + 80);
            uint64_t v64 = v10;
            int v63 = 1;
            goto LABEL_93;
          case 5u:
            int v69 = (unsigned char *)(v10 + 76);
            break;
          case 6u:
            sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 76));
            sub_1BBAF9F54(v10, 1, (unsigned char *)(v10 + 82));
            unsigned int v59 = 6;
            goto LABEL_94;
          default:
            goto LABEL_111;
        }
        sub_1BBAF9F54(v10, 1, v69);
        int v61 = (unsigned char *)(v10 + 82);
      }
LABEL_109:
      uint64_t v66 = v10;
      int v67 = 0;
LABEL_110:
      sub_1BBAF9F54(v66, v67, v61);
      goto LABEL_111;
    }
    if ((void)v22) {
      BOOL v44 = (v27 | v28) == 0;
    }
    else {
      BOOL v44 = 1;
    }
    int v45 = !v44;
    if (*((void *)&v22 + 1)) {
      BOOL v46 = (v39 | v40) == 0;
    }
    else {
      BOOL v46 = 1;
    }
    if (!v46) {
      ++v45;
    }
    int v47 = (unsigned char *)(v10 + 2 * (v45 + 3) + 48);
    uint64_t v48 = v10;
    if (v25 == 25)
    {
      sub_1BBAF9F54(v10, 1, v47);
LABEL_96:
      sub_1BBAFA0A4(v10, 1);
LABEL_101:
      uint64_t v29 = a2;
      goto LABEL_112;
    }
    if (!*v8)
    {
      int v49 = 0;
      goto LABEL_100;
    }
    sub_1BBAF9F54(v10, 1, v47);
    sub_1BBAFA0A4(v10, 0);
    sub_1BBAF9F54(v10, ((v25 - 1) / 0xC), (unsigned char *)(v10 + 60));
    unsigned int v50 = (v25 - 1) % 0xC;
    int v51 = (unsigned char *)(v10 + 62);
    if (v50 <= 3 || (sub_1BBAF9F54(v10, 1, v51), int v51 = (unsigned char *)(v10 + 64), (((v25 - 1) % 0xC) & 0xC) == 4))
    {
      uint64_t v52 = v10;
      int v53 = 0;
    }
    else
    {
      uint64_t v52 = v10;
      int v53 = 1;
    }
    sub_1BBAF9F54(v52, v53, v51);
    uint64_t v29 = a2;
    sub_1BBAF9F54(v10, (v50 >> 1) & 1, (unsigned char *)(v10 + 66));
    sub_1BBAF9F54(v10, v50 & 1, (unsigned char *)(v10 + 68));
  }
  else
  {
    uint64_t v29 = a2;
    v518 = 0;
    uint64_t v502 = 0;
    int v30 = *(_DWORD **)(a2 + 16);
    int v31 = *(_DWORD *)a2;
    int v32 = *(unsigned __int8 *)(a2 + 36);
    unsigned int v33 = v20 + 1;
    unsigned int v34 = __clz(v33);
    unsigned int v35 = (((v33 - (0x80000000 >> v34)) | (0x80000000 >> v34)) << (2 * v34 - v32 - 31)) | *(_DWORD *)(a2 + 32);
    *int v30 = bswap32(v35);
    int v505 = v32 + 8 * (v30 - v31);
    unsigned int v36 = v32 - 2 * v34 + 63;
    uint64_t v37 = (char *)v30 + (v36 >> 3);
    unsigned int v38 = v35 << (v36 & 0xF8);
    if (v36 >= 0x20) {
      unsigned int v38 = 0;
    }
    *(void *)(a2 + 16) = v37;
    *(_DWORD *)(a2 + 32) = v38;
    *(unsigned char *)(a2 + 36) = v36 & 7;
  }
LABEL_112:
  int v70 = v8[2];
  if (v70 == 25) {
    return 4294966630;
  }
  uint64_t v526 = v7 + 16;
  int v72 = *(_DWORD *)(v7 + 8);
  unsigned int v73 = *(unsigned __int8 *)(v7 + 272);
  v504 = *(__int16 **)(v6 + 56);
  int v74 = v8[1];
  if (v8[2]) {
    BOOL v75 = 0;
  }
  else {
    BOOL v75 = v74 == 3;
  }
  int v76 = v75;
  BOOL v78 = v72 == 1 || v72 == 7;
  int v530 = a3;
  uint64_t v510 = v8;
  int v499 = *(_DWORD *)(v7 + 8);
  int v497 = v9;
  int v493 = v76;
  BOOL v494 = v78;
  if (v72 != 2 && !v78 && (v76 & 1) == 0 && v73 >= 4)
  {
    uint64_t v495 = v6;
    int v79 = v9;
    int v80 = v8 + 4;
    int v81 = v8 + 20;
    int v82 = v8 + 36;
    if (v79)
    {
      int32x2_t v521 = v8 + 20;
      uint64_t v83 = 0;
      int v84 = *(unsigned __int8 *)(v6 + 28);
      int v85 = (unsigned char *)(v10 + 120);
      int v86 = (unsigned char *)(v10 + 122);
      unsigned int v498 = (unsigned char *)(v10 + 124);
      uint64_t v512 = (unsigned char *)(v10 + 90);
      v515 = (unsigned char *)(v10 + 126);
      v500 = (unsigned char *)(v10 + 92);
      do
      {
        unsigned int v87 = *(_DWORD *)&v80[v83];
        if (v84 != 1 && v84 != 6)
        {
          switch(v87)
          {
            case 0u:
              uint64_t v88 = v10;
              int v89 = 1;
              double v90 = (unsigned char *)(v10 + 90);
              goto LABEL_151;
            case 1u:
              sub_1BBAF9F54(v10, 0, v512);
              uint64_t v88 = v10;
              int v89 = 0;
              double v90 = (unsigned char *)(v10 + 92);
              goto LABEL_151;
            case 2u:
              sub_1BBAF9F54(v10, 0, v512);
              sub_1BBAF9F54(v10, 1, v500);
              uint64_t v88 = v10;
              int v89 = 1;
              goto LABEL_147;
            case 3u:
              sub_1BBAF9F54(v10, 0, v512);
              sub_1BBAF9F54(v10, 1, v500);
              uint64_t v88 = v10;
              int v89 = 0;
LABEL_147:
              double v90 = (unsigned char *)(v10 + 94);
              goto LABEL_151;
            default:
              goto LABEL_152;
          }
        }
        uint64_t v88 = v10;
        if (v87)
        {
          sub_1BBAF9F54(v10, 1, v85);
          if ((int)v87 > 2)
          {
            sub_1BBAF9F54(v10, 1, v86);
            if (v87 > 6)
            {
              sub_1BBAF9F54(v10, 1, v498);
              if (v87 > 0xA)
              {
                if (v87 > 0xC) {
                  break;
                }
                double v91 = (unsigned char *)(v10 + 126);
                sub_1BBAF9F54(v10, 1, v515);
                int v89 = (v87 & 1) == 0;
              }
              else
              {
                double v91 = (unsigned char *)(v10 + 126);
                sub_1BBAF9F54(v10, 0, v515);
                sub_1BBAF9F54(v10, (v87 - 7) >> 1, v515);
                int v89 = ((_BYTE)v87 - 7) & 1;
                int v86 = (unsigned char *)(v10 + 122);
              }
              uint64_t v88 = v10;
              double v90 = v91;
              int v85 = (unsigned char *)(v10 + 120);
            }
            else
            {
              sub_1BBAF9F54(v10, 0, v498);
              sub_1BBAF9F54(v10, (v87 - 3) >> 1, v515);
              int v89 = ((_BYTE)v87 - 3) & 1;
              int v86 = (unsigned char *)(v10 + 122);
              uint64_t v88 = v10;
              double v90 = (unsigned char *)(v10 + 126);
            }
          }
          else
          {
            sub_1BBAF9F54(v10, 0, v86);
            uint64_t v88 = v10;
            int v89 = v87 != 1;
            double v90 = (unsigned char *)(v10 + 126);
          }
        }
        else
        {
          int v89 = 0;
          double v90 = v85;
        }
LABEL_151:
        sub_1BBAF9F54(v88, v89, v90);
        v83 += 4;
      }
      while (v83 != 16);
LABEL_152:
      uint64_t v92 = 0;
      v518[182] = *(unsigned char *)(v532 + 272);
      double v93 = (char *)(v532 + 31);
      do
      {
        char v94 = *v93;
        v93 += 16;
        v518[v92++ + 183] = v94;
      }
      while (v92 != 16);
      int v95 = *(char *)(v532 + 3);
      if (*(char *)(v532 + 2) >= 1)
      {
        uint64_t v96 = 0;
        int v97 = 0;
        int v98 = 0;
        do
        {
          char v99 = *(unsigned char *)(v526 + 16 * v97 + 8);
          if ((v74 != 3 || *(_DWORD *)&v80[4 * v96]) && *(_DWORD *)&v521[4 * v96] != 5) {
            sub_1BBB4F830(v535, v535, (uint64_t *)&v537, v98, *(_WORD *)(v532 + 26), 0, *(unsigned __int8 *)(v526 + 16 * v97 + 8));
          }
          if (*(int *)&v82[4 * v96] >= 1)
          {
            uint64_t v100 = 0;
            uint64_t v101 = &v518[v97];
            do
            {
              v101[v100 + 128] = v99;
              if (v74 == 3 && !*(_DWORD *)&v80[4 * v96]) {
                v101[v100 + 183] = 3;
              }
              ++v100;
            }
            while ((int)v100 < *(_DWORD *)&v82[4 * v96]);
            v97 += v100;
          }
          ++v96;
          v98 += 4;
        }
        while (v96 != 4);
      }
      if (v95 >= 1)
      {
        uint64_t v102 = 0;
        int v103 = 0;
        int v104 = 0;
        do
        {
          char v105 = *(unsigned char *)(v526 + 16 * v103 + 9);
          if ((v74 != 3 || *(_DWORD *)&v80[4 * v102]) && *(_DWORD *)&v521[4 * v102] != 4) {
            sub_1BBB4F830(v535, v535, (uint64_t *)&v537, v104, *(_WORD *)(v532 + 26), 1, *(unsigned __int8 *)(v526 + 16 * v103 + 9));
          }
          if (*(int *)&v82[4 * v102] >= 1)
          {
            uint64_t v106 = 0;
            unsigned int v107 = &v518[v103];
            do
            {
              v107[v106 + 144] = v105;
              if (v74 == 3 && !*(_DWORD *)&v80[4 * v102]) {
                v107[v106 + 183] = 3;
              }
              ++v106;
            }
            while ((int)v106 < *(_DWORD *)&v82[4 * v102]);
            v103 += v106;
          }
          ++v102;
          v104 += 4;
        }
        while (v102 != 4);
      }
      uint64_t v108 = 0;
      LODWORD(v109) = 0;
      signed int v110 = 0;
      a3 = v530;
      uint64_t v111 = v521;
      do
      {
        if (v74 == 3 && !*(_DWORD *)&v80[4 * v108] || *(_DWORD *)&v111[4 * v108] == 5)
        {
          LODWORD(v109) = v109 + (*(_DWORD *)&v82[4 * v108] & ~(*(int *)&v82[4 * v108] >> 31));
        }
        else if (*(int *)&v82[4 * v108] >= 1)
        {
          int v112 = 0;
          uint64_t v109 = (int)v109;
          uint64_t v113 = v532;
          do
          {
            if (v110 > 15)
            {
              uint64_t v114 = v526;
            }
            else
            {
              uint64_t v114 = v526;
              do
              {
                if (v109 == *((unsigned __int8 *)&unk_1BBB8DF30
                                     + 80 * *(unsigned __int16 *)(v113 + 26)
                                     + v110))
                  break;
                ++v110;
              }
              while (v110 != 16);
            }
            char v115 = (__int16 *)(v114 + 16 * v109);
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v110, *(_WORD *)(v113 + 26), 0, 0, *v115);
            uint64_t v113 = v532;
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v110, *(_WORD *)(v532 + 26), 1u, 0, v115[1]);
            ++v109;
            ++v112;
            a3 = v530;
          }
          while (v112 < *(_DWORD *)&v82[4 * v108]);
          uint64_t v111 = v521;
        }
        ++v108;
      }
      while (v108 != 4);
      uint64_t v116 = 0;
      LODWORD(v117) = 0;
      signed int v118 = 0;
      do
      {
        if (v74 == 3 && !*(_DWORD *)&v80[4 * v116] || *(_DWORD *)&v111[4 * v116] == 4)
        {
          LODWORD(v117) = v117 + (*(_DWORD *)&v82[4 * v116] & ~(*(int *)&v82[4 * v116] >> 31));
        }
        else if (*(int *)&v82[4 * v116] >= 1)
        {
          int v119 = 0;
          uint64_t v117 = (int)v117;
          uint64_t v120 = v532;
          do
          {
            if (v118 > 15)
            {
              uint64_t v121 = v526;
            }
            else
            {
              uint64_t v121 = v526;
              do
              {
                if (v117 == *((unsigned __int8 *)&unk_1BBB8DF30
                                     + 80 * *(unsigned __int16 *)(v120 + 26)
                                     + v118))
                  break;
                ++v118;
              }
              while (v118 != 16);
            }
            uint64_t v122 = v121 + 16 * v117;
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v118, *(_WORD *)(v120 + 26), 0, 1, *(__int16 *)(v122 + 4));
            uint64_t v120 = v532;
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v118, *(_WORD *)(v532 + 26), 1u, 1, *(__int16 *)(v122 + 6));
            ++v117;
            ++v119;
            a3 = v530;
          }
          while (v119 < *(_DWORD *)&v82[4 * v116]);
          uint64_t v111 = v521;
        }
        ++v116;
      }
      while (v116 != 4);
    }
    else
    {
      int v147 = *(char *)(v532 + 2);
      int v148 = *(char *)(v532 + 3);
      BOOL v149 = *(_DWORD **)(a2 + 16);
      int v150 = *(unsigned __int8 *)(a2 + 36);
      unsigned int v151 = *((_DWORD *)v8 + 1) + 1;
      unsigned int v152 = __clz(v151);
      unsigned int v153 = (((v151 - (0x80000000 >> v152)) | (0x80000000 >> v152)) << (2 * v152 - v150 - 31)) | *(_DWORD *)(a2 + 32);
      *BOOL v149 = bswap32(v153);
      unint64_t v154 = v150 - 2 * v152 + 63;
      int v155 = v154 & 7;
      long long v156 = (_DWORD *)((char *)v149 + (v154 >> 3));
      unsigned int v157 = v153 << (v154 & 0xF8);
      if (v154 >= 0x20) {
        unsigned int v157 = 0;
      }
      unsigned int v158 = *((_DWORD *)v8 + 2) + 1;
      unsigned int v159 = __clz(v158);
      unsigned int v160 = v157 | (((v158 - (0x80000000 >> v159)) | (0x80000000 >> v159)) << (2 * v159 - v155 - 31));
      *long long v156 = bswap32(v160);
      unint64_t v161 = v155 - 2 * v159 + 63;
      int v162 = ((_BYTE)v155 - 2 * (_BYTE)v159 + 63) & 7;
      uint64_t v163 = (_DWORD *)((char *)v156 + (v161 >> 3));
      unsigned int v164 = v160 << (v161 & 0xF8);
      if (v161 >= 0x20) {
        unsigned int v164 = 0;
      }
      unsigned int v165 = *((_DWORD *)v8 + 3) + 1;
      unsigned int v166 = __clz(v165);
      unsigned int v167 = v164 | (((v165 - (0x80000000 >> v166)) | (0x80000000 >> v166)) << (2 * v166 - v162 - 31));
      *uint64_t v163 = bswap32(v167);
      unint64_t v168 = v162 - 2 * v166 + 63;
      int v169 = ((_BYTE)v162 - 2 * (_BYTE)v166 + 63) & 7;
      v170 = (_DWORD *)((char *)v163 + (v168 >> 3));
      unsigned int v171 = v167 << (v168 & 0xF8);
      if (v168 >= 0x20) {
        unsigned int v171 = 0;
      }
      unsigned int v172 = *((_DWORD *)v8 + 4) + 1;
      unsigned int v173 = __clz(v172);
      unsigned int v174 = v171 | (((v172 - (0x80000000 >> v173)) | (0x80000000 >> v173)) << (2 * v173 - v169 - 31));
      _DWORD *v170 = bswap32(v174);
      unsigned int v175 = v169 - 2 * v173 + 63;
      int v176 = v175 & 7;
      uint64_t v177 = (_DWORD *)((char *)v170 + (v175 >> 3));
      unsigned int v178 = v174 << (v175 & 0xF8);
      if (v175 >= 0x20) {
        unsigned int v178 = 0;
      }
      if (v147 >= 1 && (v70 != 4 || v74 != 2))
      {
        uint64_t v179 = 0;
        int v180 = 0;
        do
        {
          int v181 = *(unsigned __int8 *)(v526 + 16 * v180 + 8);
          if ((v74 != 3 || *(_DWORD *)&v8[v179 + 4]) && *(_DWORD *)&v8[v179 + 20] != 5)
          {
            if (v147 == 1)
            {
              unsigned int v182 = ((v181 == 0) << ~(_BYTE)v176) | v178;
              *uint64_t v177 = bswap32(v182);
              unsigned int v183 = v176 + 1;
            }
            else
            {
              unsigned int v184 = v181 + 1;
              unsigned int v185 = __clz(v184);
              unsigned int v182 = (((v184 - (0x80000000 >> v185)) | (0x80000000 >> v185)) << (2 * v185 - v176 - 31)) | v178;
              *uint64_t v177 = bswap32(v182);
              unsigned int v183 = v176 - 2 * v185 + 63;
            }
            int v176 = v183 & 7;
            uint64_t v177 = (_DWORD *)((char *)v177 + (v183 >> 3));
            unsigned int v178 = v182 << (v183 & 0xF8);
          }
          v180 += *(_DWORD *)&v8[v179 + 36];
          v179 += 4;
        }
        while (v179 != 16);
      }
      if (v148 >= 1 && (v70 != 4 || v74 != 2))
      {
        uint64_t v186 = 0;
        int v187 = 0;
        do
        {
          int v188 = *(unsigned __int8 *)(v526 + 16 * v187 + 9);
          if ((v74 != 3 || *(_DWORD *)&v8[v186 + 4]) && *(_DWORD *)&v8[v186 + 20] != 4)
          {
            if (v148 == 1)
            {
              unsigned int v189 = ((v188 == 0) << ~(_BYTE)v176) | v178;
              *uint64_t v177 = bswap32(v189);
              unsigned int v190 = v176 + 1;
            }
            else
            {
              unsigned int v191 = v188 + 1;
              unsigned int v192 = __clz(v191);
              unsigned int v189 = (((v191 - (0x80000000 >> v192)) | (0x80000000 >> v192)) << (2 * v192 - v176 - 31)) | v178;
              *uint64_t v177 = bswap32(v189);
              unsigned int v190 = v176 - 2 * v192 + 63;
            }
            int v176 = v190 & 7;
            uint64_t v177 = (_DWORD *)((char *)v177 + (v190 >> 3));
            unsigned int v178 = v189 << (v190 & 0xF8);
          }
          v187 += *(_DWORD *)&v8[v186 + 36];
          v186 += 4;
        }
        while (v186 != 16);
      }
      uint64_t v193 = 0;
      int v194 = 0;
      do
      {
        int v195 = *(_DWORD *)&v82[4 * v193];
        if (v195 >= 1)
        {
          int v196 = 0;
          int v197 = v194;
          int v198 = (__int16 *)(v532 + 18 + 16 * v194);
          do
          {
            if ((v74 != 3 || *(_DWORD *)&v80[4 * v193]) && *(_DWORD *)&v81[4 * v193] != 5)
            {
              int v199 = *(v198 - 1);
              if (v199 <= 0) {
                int v200 = -2 * v199;
              }
              else {
                int v200 = 2 * v199 - 1;
              }
              unsigned int v201 = v200 + 1;
              unsigned int v202 = __clz(v201);
              unsigned int v203 = (((v201 - (0x80000000 >> v202)) | (0x80000000 >> v202)) << (2 * v202 - v176 - 31)) | v178;
              *uint64_t v177 = bswap32(v203);
              unint64_t v204 = v176 - 2 * v202 + 63;
              int v205 = v204 & 7;
              uint64_t v206 = (_DWORD *)((char *)v177 + (v204 >> 3));
              unsigned int v207 = v203 << (v204 & 0xF8);
              if (v204 >= 0x20) {
                unsigned int v208 = 0;
              }
              else {
                unsigned int v208 = v207;
              }
              int v209 = *v198;
              if (v209 <= 0) {
                int v210 = -2 * v209;
              }
              else {
                int v210 = 2 * v209 - 1;
              }
              unsigned int v211 = v210 + 1;
              unsigned int v212 = __clz(v211);
              unsigned int v213 = v208 | (((v211 - (0x80000000 >> v212)) | (0x80000000 >> v212)) << (2 * v212 - v205 - 31));
              *uint64_t v206 = bswap32(v213);
              unsigned int v214 = v205 - 2 * v212 + 63;
              int v176 = v214 & 7;
              uint64_t v177 = (_DWORD *)((char *)v206 + (v214 >> 3));
              unsigned int v178 = v213 << (v214 & 0xF8);
              if (v214 >= 0x20) {
                unsigned int v178 = 0;
              }
              int v195 = *(_DWORD *)&v82[4 * v193];
            }
            ++v196;
            v198 += 8;
          }
          while (v196 < v195);
          int v194 = v197 + v196;
        }
        ++v193;
      }
      while (v193 != 4);
      uint64_t v215 = 0;
      int v216 = 0;
      do
      {
        int v217 = *(_DWORD *)&v82[4 * v215];
        if (v217 >= 1)
        {
          int v218 = 0;
          int v219 = v216;
          unsigned int v220 = (__int16 *)(v532 + 22 + 16 * v216);
          do
          {
            if ((v74 != 3 || *(_DWORD *)&v80[4 * v215]) && *(_DWORD *)&v81[4 * v215] != 4)
            {
              int v221 = *(v220 - 1);
              if (v221 <= 0) {
                int v222 = -2 * v221;
              }
              else {
                int v222 = 2 * v221 - 1;
              }
              unsigned int v223 = v222 + 1;
              unsigned int v224 = __clz(v223);
              unsigned int v225 = (((v223 - (0x80000000 >> v224)) | (0x80000000 >> v224)) << (2 * v224 - v176 - 31)) | v178;
              *uint64_t v177 = bswap32(v225);
              unint64_t v226 = v176 - 2 * v224 + 63;
              int v227 = v226 & 7;
              int v228 = (_DWORD *)((char *)v177 + (v226 >> 3));
              unsigned int v229 = v225 << (v226 & 0xF8);
              if (v226 >= 0x20) {
                unsigned int v230 = 0;
              }
              else {
                unsigned int v230 = v229;
              }
              int v231 = *v220;
              if (v231 <= 0) {
                int v232 = -2 * v231;
              }
              else {
                int v232 = 2 * v231 - 1;
              }
              unsigned int v233 = v232 + 1;
              unsigned int v234 = __clz(v233);
              unsigned int v235 = v230 | (((v233 - (0x80000000 >> v234)) | (0x80000000 >> v234)) << (2 * v234 - v227 - 31));
              *int v228 = bswap32(v235);
              unsigned int v236 = v227 - 2 * v234 + 63;
              int v176 = v236 & 7;
              uint64_t v177 = (_DWORD *)((char *)v228 + (v236 >> 3));
              unsigned int v178 = v235 << (v236 & 0xF8);
              if (v236 >= 0x20) {
                unsigned int v178 = 0;
              }
              int v217 = *(_DWORD *)&v82[4 * v215];
            }
            ++v218;
            v220 += 8;
          }
          while (v218 < v217);
          int v216 = v219 + v218;
        }
        ++v215;
      }
      while (v215 != 4);
      *(void *)(a2 + 16) = v177;
      *(_DWORD *)(a2 + 32) = v178;
      *(unsigned char *)(a2 + 36) = v176;
    }
    uint64_t v237 = 0;
    char v123 = 1;
    uint64_t v29 = a2;
    int v9 = v497;
    unsigned int v8 = v510;
    uint64_t v6 = v495;
    do
    {
      if (*(_DWORD *)&v510[v237 + 4]) {
        BOOL v238 = *(_DWORD *)&v510[v237 + 36] > 1;
      }
      else {
        BOOL v238 = *(unsigned char *)v532 == 0;
      }
      if (v238) {
        char v123 = 0;
      }
      v237 += 4;
    }
    while (v237 != 16);
    goto LABEL_329;
  }
  if (v76) {
    goto LABEL_216;
  }
  if (*(unsigned char *)(v6 + 184)) {
    BOOL v124 = v78;
  }
  else {
    BOOL v124 = 0;
  }
  uint64_t v125 = v532;
  if (!v9)
  {
    uint64_t v279 = *(_DWORD **)(v29 + 16);
    unsigned int v280 = *(_DWORD *)(v29 + 32);
    unsigned int v281 = *(unsigned __int8 *)(v29 + 36);
    if (v124)
    {
      unsigned int v282 = (v8[3] << ~(_BYTE)v281) | v280;
      *uint64_t v279 = bswap32(v282);
      char v283 = v281 + 1;
      uint64_t v279 = (_DWORD *)((char *)v279 + ((v281 + 1) >> 3));
      unsigned int v280 = v282 << ((v281 + 1) & 0xF8);
      if (v281 >= 0x1F) {
        unsigned int v280 = 0;
      }
      *(void *)(v29 + 16) = v279;
      *(_DWORD *)(v29 + 32) = v280;
      unsigned int v281 = v283 & 7;
      *(unsigned char *)(v29 + 36) = v283 & 7;
      int v284 = *(_DWORD *)(v532 + 8);
    }
    else
    {
      int v284 = *(_DWORD *)(v7 + 8);
    }
    if ((v284 - 1) >= 2)
    {
      if (v284 == 3)
      {
LABEL_681:
        *(void *)(v29 + 16) = v279;
        *(_DWORD *)(v29 + 32) = v280;
        char v123 = 1;
        *(unsigned char *)(v29 + 36) = v281;
        goto LABEL_329;
      }
      if (v284 != 7)
      {
        int v432 = *(char *)(v532 + 2);
        int v433 = *(char *)(v532 + 3);
        uint64_t v434 = *(unsigned __int8 *)(v532 + 272);
        if (v432 >= 1 && *(unsigned char *)(v532 + 272))
        {
          uint64_t v435 = (unsigned __int8 *)(v532 + 24);
          uint64_t v436 = *(unsigned __int8 *)(v532 + 272);
          do
          {
            if (v435[7] != 5)
            {
              int v437 = *v435;
              if (v432 == 1)
              {
                unsigned int v438 = ((v437 == 0) << ~(_BYTE)v281) | v280;
                *uint64_t v279 = bswap32(v438);
                char v439 = v281 + 1;
                uint64_t v440 = (v281 + 1) >> 3;
                BOOL v441 = v281 >= 0x1F;
                unsigned int v281 = (v281 + 1) & 7;
                uint64_t v279 = (_DWORD *)((char *)v279 + v440);
                unsigned int v280 = v438 << (v439 & 0xF8);
              }
              else
              {
                unsigned int v442 = v437 + 1;
                unsigned int v443 = __clz(v442);
                unsigned int v444 = (((v442 - (0x80000000 >> v443)) | (0x80000000 >> v443)) << (2 * v443 - v281 - 31)) | v280;
                *uint64_t v279 = bswap32(v444);
                unsigned int v445 = v281 - 2 * v443 + 63;
                unsigned int v281 = v445 & 7;
                uint64_t v279 = (_DWORD *)((char *)v279 + (v445 >> 3));
                unsigned int v280 = v444 << (v445 & 0xF8);
                BOOL v441 = v445 >= 0x20;
              }
              if (v441) {
                unsigned int v280 = 0;
              }
            }
            v435 += 16;
            --v436;
          }
          while (v436);
        }
        if (v433 >= 1 && v434)
        {
          v446 = (unsigned __int8 *)(v532 + 25);
          uint64_t v447 = v434;
          do
          {
            if (v446[6] != 4)
            {
              int v448 = *v446;
              if (v433 == 1)
              {
                unsigned int v449 = ((v448 == 0) << ~(_BYTE)v281) | v280;
                *uint64_t v279 = bswap32(v449);
                char v450 = v281 + 1;
                uint64_t v451 = (v281 + 1) >> 3;
                BOOL v452 = v281 >= 0x1F;
                unsigned int v281 = (v281 + 1) & 7;
                uint64_t v279 = (_DWORD *)((char *)v279 + v451);
                unsigned int v280 = v449 << (v450 & 0xF8);
              }
              else
              {
                unsigned int v453 = v448 + 1;
                unsigned int v454 = __clz(v453);
                unsigned int v455 = (((v453 - (0x80000000 >> v454)) | (0x80000000 >> v454)) << (2 * v454 - v281 - 31)) | v280;
                *uint64_t v279 = bswap32(v455);
                unsigned int v456 = v281 - 2 * v454 + 63;
                unsigned int v281 = v456 & 7;
                uint64_t v279 = (_DWORD *)((char *)v279 + (v456 >> 3));
                unsigned int v280 = v455 << (v456 & 0xF8);
                BOOL v452 = v456 >= 0x20;
              }
              if (v452) {
                unsigned int v280 = 0;
              }
            }
            v446 += 16;
            --v447;
          }
          while (v447);
        }
        if (v434)
        {
          uint64_t v457 = v434;
          uint64_t v458 = (__int16 *)(v7 + 16);
          do
          {
            if (*((unsigned char *)v458 + 15) != 5)
            {
              int v459 = *v458;
              int v460 = v459 <= 0 ? -2 * v459 : 2 * v459 - 1;
              unsigned int v461 = v460 + 1;
              unsigned int v462 = __clz(v461);
              unsigned int v463 = (((v461 - (0x80000000 >> v462)) | (0x80000000 >> v462)) << (2 * v462 - v281 - 31)) | v280;
              *uint64_t v279 = bswap32(v463);
              unint64_t v464 = v281 - 2 * v462 + 63;
              int v465 = v464 & 7;
              uint64_t v466 = (_DWORD *)((char *)v279 + (v464 >> 3));
              unsigned int v467 = v463 << (v464 & 0xF8);
              unsigned int v468 = v464 >= 0x20 ? 0 : v467;
              int v469 = v458[1];
              int v470 = v469 <= 0 ? -2 * v469 : 2 * v469 - 1;
              unsigned int v471 = v470 + 1;
              unsigned int v472 = __clz(v471);
              unsigned int v473 = v468 | (((v471 - (0x80000000 >> v472)) | (0x80000000 >> v472)) << (2 * v472 - v465 - 31));
              *uint64_t v466 = bswap32(v473);
              unsigned int v474 = v465 - 2 * v472 + 63;
              unsigned int v281 = v474 & 7;
              uint64_t v279 = (_DWORD *)((char *)v466 + (v474 >> 3));
              unsigned int v280 = v473 << (v474 & 0xF8);
              if (v474 >= 0x20) {
                unsigned int v280 = 0;
              }
            }
            v458 += 8;
            --v457;
          }
          while (v457);
          uint64_t v475 = (__int16 *)(v532 + 20);
          do
          {
            if (*((unsigned char *)v475 + 11) != 4)
            {
              int v476 = *v475;
              int v477 = v476 <= 0 ? -2 * v476 : 2 * v476 - 1;
              unsigned int v478 = v477 + 1;
              unsigned int v479 = __clz(v478);
              unsigned int v480 = (((v478 - (0x80000000 >> v479)) | (0x80000000 >> v479)) << (2 * v479 - v281 - 31)) | v280;
              *uint64_t v279 = bswap32(v480);
              unint64_t v481 = v281 - 2 * v479 + 63;
              int v482 = v481 & 7;
              uint64_t v483 = (_DWORD *)((char *)v279 + (v481 >> 3));
              unsigned int v484 = v480 << (v481 & 0xF8);
              unsigned int v485 = v481 >= 0x20 ? 0 : v484;
              int v486 = v475[1];
              int v487 = v486 <= 0 ? -2 * v486 : 2 * v486 - 1;
              unsigned int v488 = v487 + 1;
              unsigned int v489 = __clz(v488);
              unsigned int v490 = v485 | (((v488 - (0x80000000 >> v489)) | (0x80000000 >> v489)) << (2 * v489 - v482 - 31));
              *uint64_t v483 = bswap32(v490);
              unsigned int v491 = v482 - 2 * v489 + 63;
              unsigned int v281 = v491 & 7;
              uint64_t v279 = (_DWORD *)((char *)v483 + (v491 >> 3));
              unsigned int v280 = v490 << (v491 & 0xF8);
              if (v491 >= 0x20) {
                unsigned int v280 = 0;
              }
            }
            v475 += 8;
            --v434;
          }
          while (v434);
        }
        goto LABEL_681;
      }
    }
    int v285 = *(unsigned __int8 *)(v532 + 289);
    if (v284 == 1)
    {
      for (uint64_t i = 0; i != 16; ++i)
      {
        uint64_t v287 = v532 + i;
        unsigned int v288 = (*(unsigned __int8 *)(v532 + i + 290) << ~(_BYTE)v281) | v280;
        *uint64_t v279 = bswap32(v288);
        int v289 = (v281 + 1) & 7;
        uint64_t v279 = (_DWORD *)((char *)v279 + ((v281 + 1) >> 3));
        unsigned int v280 = v288 << ((v281 + 1) & 0xF8);
        if (v281 >= 0x1F) {
          unsigned int v280 = 0;
        }
        if (*(unsigned char *)(v287 + 290))
        {
          unsigned int v281 = (v281 + 1) & 7;
        }
        else
        {
          unsigned int v290 = (*(unsigned __int8 *)(v287 + 310) << (29 - v289)) | v280;
          *uint64_t v279 = bswap32(v290);
          unsigned int v281 = ((_BYTE)v289 + 3) & 7;
          uint64_t v279 = (_DWORD *)((char *)v279 + ((v289 + 3) >> 3));
          unsigned int v280 = v290 << ((v289 + 3) & 8);
        }
      }
    }
    if (v284 == 7)
    {
      for (uint64_t j = 0; j != 4; ++j)
      {
        uint64_t v292 = v532 + j;
        unsigned int v293 = (*(unsigned __int8 *)(v532 + j + 306) << ~(_BYTE)v281) | v280;
        *uint64_t v279 = bswap32(v293);
        int v294 = (v281 + 1) & 7;
        uint64_t v279 = (_DWORD *)((char *)v279 + ((v281 + 1) >> 3));
        unsigned int v280 = v293 << ((v281 + 1) & 0xF8);
        if (v281 >= 0x1F) {
          unsigned int v280 = 0;
        }
        if (*(unsigned char *)(v292 + 306))
        {
          unsigned int v281 = (v281 + 1) & 7;
        }
        else
        {
          unsigned int v295 = (*(unsigned __int8 *)(v292 + 326) << (29 - v294)) | v280;
          *uint64_t v279 = bswap32(v295);
          unsigned int v281 = ((_BYTE)v294 + 3) & 7;
          uint64_t v279 = (_DWORD *)((char *)v279 + ((v294 + 3) >> 3));
          unsigned int v280 = v295 << ((v294 + 3) & 8);
        }
      }
    }
    if (*(unsigned char *)(v532 + 1))
    {
      unsigned int v296 = v285 + 1;
      unsigned int v297 = __clz(v296);
      unsigned int v298 = (((v296 - (0x80000000 >> v297)) | (0x80000000 >> v297)) << (2 * v297 - v281 - 31)) | v280;
      *uint64_t v279 = bswap32(v298);
      unsigned int v299 = v281 - 2 * v297 + 63;
      LOBYTE(v281) = v299 & 7;
      uint64_t v279 = (_DWORD *)((char *)v279 + (v299 >> 3));
      unsigned int v280 = v298 << (v299 & 0xF8);
      if (v299 >= 0x20) {
        unsigned int v280 = 0;
      }
    }
    goto LABEL_681;
  }
  if (v124)
  {
    long long v537 = *(_OWORD *)(v6 + 128);
    long long v126 = v537;
    int v538 = *(unsigned char **)(v6 + 176);
    v518 = v538;
    v538[199] = v8[3];
    sub_1BBB4F76C(v10, v126, *((uint64_t *)&v126 + 1), v8[3]);
    LOBYTE(v73) = *(unsigned char *)(v532 + 272);
  }
  uint64_t v127 = 0;
  v518[182] = v73;
  v128 = (char *)(v532 + 31);
  do
  {
    char v129 = *v128;
    v128 += 16;
    v518[v127++ + 183] = v129;
  }
  while (v127 != 16);
  int v130 = *(_DWORD *)(v532 + 8);
  if ((v130 - 1) < 2)
  {
LABEL_228:
    int v131 = *(unsigned __int8 *)(v532 + 289);
    if (v130 == 1)
    {
      uint64_t v132 = 0;
      int v133 = (unsigned char *)(v535 + 186);
      do
      {
        if (*(unsigned char *)(v125 + v132 + 290))
        {
          uint64_t v134 = v535;
          int v135 = 1;
          v136 = (unsigned char *)(v535 + 184);
        }
        else
        {
          unsigned int v137 = *(unsigned __int8 *)(v125 + v132 + 310);
          sub_1BBAF9F54(v535, 0, (unsigned char *)(v535 + 184));
          sub_1BBAF9F54(v535, v137 & 1, v133);
          sub_1BBAF9F54(v535, (v137 >> 1) & 1, v133);
          int v135 = (v137 >> 2) & 1;
          unsigned int v8 = v510;
          uint64_t v134 = v535;
          uint64_t v125 = v532;
          v136 = (unsigned char *)(v535 + 186);
        }
        sub_1BBAF9F54(v134, v135, v136);
        ++v132;
      }
      while (v132 != 16);
    }
    uint64_t v138 = v535;
    if (v130 == 7)
    {
      uint64_t v139 = 0;
      uint64_t v140 = (unsigned char *)(v535 + 186);
      do
      {
        if (*(unsigned char *)(v125 + v139 + 306))
        {
          uint64_t v141 = v138;
          int v142 = 1;
          uint64_t v143 = (unsigned char *)(v535 + 184);
        }
        else
        {
          unsigned int v144 = *(unsigned __int8 *)(v125 + v139 + 326);
          sub_1BBAF9F54(v535, 0, (unsigned char *)(v535 + 184));
          sub_1BBAF9F54(v535, v144 & 1, v140);
          sub_1BBAF9F54(v535, (v144 >> 1) & 1, v140);
          int v142 = (v144 >> 2) & 1;
          uint64_t v138 = v535;
          uint64_t v141 = v535;
          uint64_t v143 = (unsigned char *)(v535 + 186);
        }
        sub_1BBAF9F54(v141, v142, v143);
        ++v139;
      }
      while (v139 != 4);
    }
    BOOL v145 = v537;
    if ((void)v537) {
      BOOL v145 = *(unsigned __int8 *)(v537 + 177) - 2 >= 4
    }
          && (!*(unsigned char *)(v537 + 177) ? (BOOL v146 = *(unsigned char *)(v537 + 178) == 25) : (BOOL v146 = 0), !v146)
          && *(unsigned __int8 *)(v537 + 179) != 0;
    uint64_t v300 = *((void *)&v537 + 1);
    if (*((void *)&v537 + 1)) {
      uint64_t v300 = *(unsigned __int8 *)(*((void *)&v537 + 1) + 177) - 2 >= 4
    }
          && (!*(unsigned char *)(*((void *)&v537 + 1) + 177)
            ? (BOOL v301 = *(unsigned char *)(*((void *)&v537 + 1) + 178) == 25)
            : (BOOL v301 = 0),
              !v301)
          && *(unsigned __int8 *)(*((void *)&v537 + 1) + 179) != 0;
    uint64_t v302 = v138 + 2 * (v300 + v145);
    double v303 = (unsigned char *)(v302 + 176);
    if (!v131
      || (sub_1BBAF9F54(v138, 1, (unsigned char *)(v302 + 176)), double v303 = (unsigned char *)(v138 + 182), v131 == 1)
      || (sub_1BBAF9F54(v138, 1, (unsigned char *)(v138 + 182)), int v304 = v131 - 2, v131 == 2))
    {
      sub_1BBAF9F54(v138, 0, v303);
    }
    else
    {
      do
      {
        sub_1BBAF9F54(v138, 1, (unsigned char *)(v138 + 182));
        --v304;
      }
      while (v304);
    }
    v538[179] = v131;
    char v123 = 1;
    uint64_t v29 = a2;
    goto LABEL_329;
  }
  if (v130 != 3)
  {
    if (v130 != 7)
    {
      int v305 = *(char *)(v532 + 3);
      uint64_t v306 = *(unsigned __int8 *)(v532 + 272);
      if (*(char *)(v532 + 2) >= 1 && *(unsigned char *)(v532 + 272))
      {
        uint64_t v307 = 0;
        int v308 = 0;
        int v309 = v538 + 128;
        do
        {
          uint64_t v310 = v526 + 16 * v307;
          int v311 = *(unsigned __int8 *)(v310 + 8);
          if (*(unsigned char *)(v310 + 15) != 5)
          {
            if (v308 <= 15)
            {
              do
              {
                if (v307 == *((unsigned __int8 *)&unk_1BBB8DF30
                             + 80 * *(unsigned __int16 *)(v532 + 26)
                             + v308))
                  break;
                ++v308;
              }
              while (v308 != 16);
            }
            sub_1BBB4F830(v535, v535, (uint64_t *)&v537, v308, *(_WORD *)(v532 + 26), 0, v311);
          }
          v309[v307++] = v311;
        }
        while (v307 != v306);
      }
      if (v305 >= 1 && v306)
      {
        uint64_t v312 = 0;
        int v313 = 0;
        long long v314 = v538;
        do
        {
          uint64_t v315 = v526 + 16 * v312;
          int v316 = *(unsigned __int8 *)(v315 + 9);
          if (*(unsigned char *)(v315 + 15) != 4)
          {
            if (v313 <= 15)
            {
              do
              {
                if (v312 == *((unsigned __int8 *)&unk_1BBB8DF30
                             + 80 * *(unsigned __int16 *)(v532 + 26)
                             + v313))
                  break;
                ++v313;
              }
              while (v313 != 16);
            }
            sub_1BBB4F830(v535, v535, (uint64_t *)&v537, v313, *(_WORD *)(v532 + 26), 1, v316);
          }
          v314[v312++ + 144] = v316;
        }
        while (v312 != v306);
      }
      if (v306)
      {
        uint64_t v317 = 0;
        signed int v318 = 0;
        do
        {
          uint64_t v319 = (__int16 *)(v526 + 16 * v317);
          if (*((unsigned char *)v319 + 15) != 5)
          {
            if (v318 <= 15)
            {
              do
              {
                if (v317 == *((unsigned __int8 *)&unk_1BBB8DF30
                             + 80 * *(unsigned __int16 *)(v532 + 26)
                             + v318))
                  break;
                ++v318;
              }
              while (v318 != 16);
            }
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v318, *(_WORD *)(v532 + 26), 0, 0, *v319);
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v318, *(_WORD *)(v532 + 26), 1u, 0, v319[1]);
            unsigned int v8 = v510;
          }
          ++v317;
        }
        while (v317 != v306);
        uint64_t v320 = 0;
        signed int v321 = 0;
        do
        {
          uint64_t v322 = v526 + 16 * v320;
          if (*(unsigned char *)(v322 + 15) != 4)
          {
            if (v321 <= 15)
            {
              do
              {
                if (v320 == *((unsigned __int8 *)&unk_1BBB8DF30
                             + 80 * *(unsigned __int16 *)(v532 + 26)
                             + v321))
                  break;
                ++v321;
              }
              while (v321 != 16);
            }
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v321, *(_WORD *)(v532 + 26), 0, 1, *(__int16 *)(v322 + 4));
            sub_1BBB4FA1C(v535, v535, (unint64_t *)&v537, v321, *(_WORD *)(v532 + 26), 1u, 1, *(__int16 *)(v322 + 6));
            unsigned int v8 = v510;
          }
          ++v320;
          char v123 = 1;
          uint64_t v29 = a2;
        }
        while (v320 != v306);
      }
      else
      {
        char v123 = 1;
        uint64_t v29 = a2;
      }
      goto LABEL_329;
    }
    goto LABEL_228;
  }
LABEL_216:
  char v123 = 1;
LABEL_329:
  if (v9)
  {
    long long v239 = v538;
    v538[180] = v8[52];
    v239[181] = v8[53];
    uint64_t v240 = (_DWORD *)v535;
    int v241 = *(_DWORD *)(v535 + 40) + *(_DWORD *)(v535 + 24) + 8 * (*(_DWORD *)v535 - *(_DWORD *)(v535 + 8));
    int v242 = v241 & ~(v241 >> 31);
  }
  else
  {
    int v242 = *(unsigned __int8 *)(v29 + 36) + 8 * (*(_DWORD *)(v29 + 16) - *(_DWORD *)v29);
    uint64_t v240 = (_DWORD *)v535;
  }
  int v501 = v242;
  *a5 = v242 - v505;
  uint64_t v243 = v532;
  if (v499 == 2) {
    goto LABEL_510;
  }
  uint64_t v244 = v8[52] + 16 * v8[53];
  if (v9)
  {
    uint64_t v245 = v537;
    if ((void)v537)
    {
      int v246 = *(unsigned __int8 *)(v537 + 177);
      int v247 = *(unsigned __int8 *)(v537 + 178);
    }
    else
    {
      int v246 = 255;
      int v247 = 255;
    }
    char v522 = v123;
    uint64_t v253 = *((void *)&v537 + 1);
    uint64_t v496 = v6;
    if (*((void *)&v537 + 1))
    {
      int v254 = *(unsigned __int8 *)(*((void *)&v537 + 1) + 177);
      BOOL v255 = *(unsigned __int8 *)(*((void *)&v537 + 1) + 178) == 25;
    }
    else
    {
      BOOL v255 = 0;
      int v254 = 255;
    }
    char v256 = 0;
    if (v246) {
      BOOL v257 = 0;
    }
    else {
      BOOL v257 = v247 == 25;
    }
    int v258 = v257;
    int v259 = v246 & 0xFE;
    if (v254) {
      BOOL v260 = 0;
    }
    else {
      BOOL v260 = v255;
    }
    int v527 = v254 & 0xFE;
    char v261 = 1;
    while (1)
    {
      char v262 = v261;
      char v263 = 1;
      int v264 = 2;
      do
      {
        if (v263)
        {
          if (v245 && (v258 & 1) == 0 && (v259 == 4 || ((*(unsigned __int8 *)(v245 + 180) >> (v256 + 1)) & 1) == 0))
          {
            BOOL v265 = 1;
            if ((v262 & 1) == 0)
            {
LABEL_361:
              uint64_t v266 = 2 * (((v244 >> (v256 - 2)) & 1) == 0);
              goto LABEL_371;
            }
          }
          else
          {
            BOOL v265 = 0;
            if ((v262 & 1) == 0) {
              goto LABEL_361;
            }
          }
        }
        else
        {
          BOOL v265 = ((v244 >> (v256 - 1)) & 1) == 0;
          if ((v262 & 1) == 0) {
            goto LABEL_361;
          }
        }
        if (v253 && !v260 && (v527 == 4 || ((*(unsigned __int8 *)(v253 + 180) >> (v256 + 2)) & 1) == 0)) {
          uint64_t v266 = 2;
        }
        else {
          uint64_t v266 = 0;
        }
LABEL_371:
        sub_1BBAF9F54((uint64_t)v240, (v244 >> v256) & 1, (unsigned char *)v240 + 2 * v265 + 2 * v266 + 194);
        char v263 = 0;
        ++v256;
        --v264;
      }
      while (v264);
      char v261 = 0;
      if ((v262 & 1) == 0)
      {
        uint64_t v267 = 77;
        if (v258) {
          uint64_t v268 = 78;
        }
        else {
          uint64_t v268 = 77;
        }
        if (v245) {
          char v269 = v258;
        }
        else {
          char v269 = 1;
        }
        if (v245) {
          uint64_t v267 = v268;
        }
        if (v259 == 4) {
          char v270 = 1;
        }
        else {
          char v270 = v269;
        }
        if ((v270 & 1) == 0)
        {
          uint64_t v267 = 77;
          if (*(unsigned char *)(v245 + 181)) {
            uint64_t v267 = 78;
          }
        }
        a3 = v530;
        unsigned int v8 = v510;
        uint64_t v271 = 2;
        if (!v260) {
          uint64_t v271 = 0;
        }
        if (v253) {
          char v272 = v260;
        }
        else {
          char v272 = 1;
        }
        if (v253) {
          uint64_t v273 = v271;
        }
        else {
          uint64_t v273 = 0;
        }
        if (v527 == 4) {
          char v274 = 1;
        }
        else {
          char v274 = v272;
        }
        uint64_t v275 = v273;
        if ((v274 & 1) == 0) {
          uint64_t v275 = 2 * (*(unsigned char *)(v253 + 181) != 0);
        }
        sub_1BBAF9F54(v535, v244 > 0xF, (unsigned char *)(v535 + 2 * (v267 + v275) + 48));
        int v9 = v497;
        if (v244 >= 0x10)
        {
          uint64_t v276 = 81;
          if (v258) {
            uint64_t v277 = 82;
          }
          else {
            uint64_t v277 = 81;
          }
          if (v245) {
            uint64_t v276 = v277;
          }
          if ((v270 & 1) == 0)
          {
            uint64_t v276 = 81;
            if (*(unsigned char *)(v245 + 181) == 2) {
              uint64_t v276 = 82;
            }
          }
          if ((v274 & 1) == 0) {
            uint64_t v273 = 2 * (*(unsigned char *)(v253 + 181) == 2);
          }
          sub_1BBAF9F54(v535, (v244 & 0x1FF0) == 32, (unsigned char *)(v535 + 2 * (v276 + v273) + 48));
        }
        uint64_t v243 = v532;
        uint64_t v240 = (_DWORD *)v535;
        uint64_t v29 = a2;
        uint64_t v6 = v496;
        if (v510[52] && *(unsigned char *)(v496 + 184) && !v494 && v522 && (!v493 || *(unsigned char *)v532))
        {
          long long v537 = *(_OWORD *)(v496 + 128);
          long long v278 = v537;
          int v538 = *(unsigned char **)(v496 + 176);
          v538[199] = v510[3];
          sub_1BBB4F76C(v535, v278, *((uint64_t *)&v278 + 1), v510[3]);
        }
        goto LABEL_509;
      }
    }
  }
  char v248 = v123;
  uint64_t v249 = *(_DWORD **)(v29 + 16);
  int v250 = *(unsigned __int8 *)(v29 + 36);
  if (v499 == 7 || v499 == 1)
  {
    BOOL v251 = v494;
    if (*(unsigned char *)(v532 + 1)) {
      uint64_t v252 = &unk_1BBB85A18;
    }
    else {
      uint64_t v252 = &unk_1BBB85AD8;
    }
  }
  else
  {
    BOOL v251 = v494;
    if (*(unsigned char *)(v532 + 1)) {
      uint64_t v252 = &unk_1BBB85B18;
    }
    else {
      uint64_t v252 = &unk_1BBB85BD8;
    }
  }
  unsigned int v323 = v252[v244] + 1;
  unsigned int v324 = __clz(v323);
  unsigned int v325 = (((v323 - (0x80000000 >> v324)) | (0x80000000 >> v324)) << (2 * v324 - v250 - 31)) | *(_DWORD *)(v29 + 32);
  *uint64_t v249 = bswap32(v325);
  unsigned int v326 = v250 - 2 * v324 + 63;
  int v327 = (_DWORD *)((char *)v249 + (v326 >> 3));
  unsigned int v328 = v325 << (v326 & 0xF8);
  if (v326 >= 0x20) {
    unsigned int v328 = 0;
  }
  *(void *)(v29 + 16) = v327;
  *(_DWORD *)(v29 + 32) = v328;
  *(unsigned char *)(v29 + 36) = v326 & 7;
  if (v8[52] && *(unsigned char *)(v6 + 184) && !v251 && v248 && (!v493 || *(unsigned char *)v532))
  {
    int v329 = v326 & 7;
    unsigned int v330 = (v8[3] << (v329 ^ 0x1F)) | v328;
    *int v327 = bswap32(v330);
    *(void *)(v29 + 16) = (char *)v327 + (++v329 >> 3);
    *(_DWORD *)(v29 + 32) = v330 << (v329 & 8);
    *(unsigned char *)(v29 + 36) = v329 & 7;
  }
LABEL_509:
  if (v244)
  {
LABEL_510:
    int v331 = (char)v8[54];
    if (v9)
    {
      unint64_t v332 = v538;
      if (v502
        && (*(unsigned char *)(v502 + 177) & 0xFE) != 4
        && ((int v333 = *(unsigned __int8 *)(v502 + 178), *(unsigned char *)(v502 + 177)) || v333 != 25)
        && (!*(unsigned char *)(v502 + 177) && v333 != 25 && *(unsigned char *)(v502 + 178)
         || *(unsigned char *)(v502 + 180)
         || *(unsigned char *)(v502 + 181)))
      {
        uint64_t v334 = 60;
        if (*(_DWORD *)(v502 + 168)) {
          uint64_t v334 = 61;
        }
      }
      else
      {
        uint64_t v334 = 60;
      }
      if (v331 >= 0) {
        int v335 = (char)v8[54];
      }
      else {
        int v335 = -v331;
      }
      int v336 = (v331 < 1) | (2 * v335);
      uint64_t v337 = (unsigned char *)(v535 + 2 * v334 + 48);
      if (v336 == 1)
      {
        sub_1BBAF9F54(v535, 0, v337);
      }
      else
      {
        sub_1BBAF9F54(v535, 1, v337);
        sub_1BBB4F7A8(v535, v336 - 2, (unsigned char *)(v535 + 172));
      }
      *((_DWORD *)v332 + 42) = v331;
      uint64_t v356 = *(void *)(v6 + 176);
      LODWORD(v357) = v8[3];
      unsigned int v517 = v332[180];
      int v506 = v332[181];
      BOOL v358 = v332[177] < 2u;
      if (v332[177])
      {
        uint64_t v359 = 0;
        int v360 = 16;
        uint64_t v361 = 5;
        unsigned int v362 = v504;
      }
      else
      {
        uint64_t v359 = 0;
        int v371 = v332[178];
        int v360 = 16;
        uint64_t v361 = 5;
        unsigned int v362 = v504;
        if (v371 && v371 != 25)
        {
          sub_1BBB4FDD0(v535, &v537, 0, 0, v358, 0, 0, a3, (uint64_t)v504, 16);
          int v360 = 15;
          uint64_t v361 = 1;
          uint64_t v359 = 1;
        }
      }
      uint64_t v503 = v356;
      uint64_t v363 = (void *)(v356 + 240);
      uint64_t v364 = v362 + 16;
      if (v357)
      {
        uint64_t v365 = 0;
        uint64_t v366 = 0;
        *uint64_t v363 = 0;
        v363[1] = 0;
        do
        {
          if ((v517 >> v366))
          {
            int v367 = 0;
            uint64_t v368 = (uint64_t)v364 + ((2 * v365) & 0xFFFFFFFFFFFFFF00 | (16 * (v366 & 1)));
            uint64_t v369 = v540;
            do
            {
              for (uint64_t k = 0; k != 16; k += 2)
                *(_WORD *)&v369[k] = *(_WORD *)(v368 + k);
              v369 += 16;
              ++v367;
              v368 += 32;
            }
            while (v367 != 8);
            *((unsigned char *)v363 + 4 * v366) = sub_1BBB4FDD0(v535, &v537, 2u, 0, v358, 2 * (v366 & 1), v366 & 0x7FFFFFFE, v530, (uint64_t)v540, 64);
          }
          ++v366;
          v365 += 64;
        }
        while (v366 != 4);
      }
      else
      {
        char v372 = 1;
        int v529 = 2;
        uint64_t v373 = (uint64_t)&v364[v359];
        int v374 = 0;
        BOOL v525 = v358;
        int v375 = v358;
        uint64_t v376 = v363;
        do
        {
          int v533 = 0;
          char v509 = v372;
          int v514 = v374 | 1;
          int v377 = 2;
          int v511 = v374;
          int v378 = v374;
          do
          {
            int v520 = v378;
            if ((v517 >> v378))
            {
              int v379 = v357;
              int v380 = v511;
              do
              {
                uint64_t v357 = v379;
                int v381 = v533;
                do
                {
                  uint64_t v382 = v361;
                  char v383 = sub_1BBB4FDD0(v535, &v537, v361, 0, v375, v381, v380, v530, v373, v360);
                  uint64_t v361 = v382;
                  *((unsigned char *)v376 + v357) = v383;
                  v373 += 32;
                  ++v381;
                  ++v357;
                }
                while (v377 != v381);
                ++v380;
                int v379 = v357;
              }
              while (v380 != v529);
            }
            else
            {
              v373 += 128;
              LODWORD(v357) = v357 + 4;
            }
            v377 += 2;
            int v533 = 2;
            int v378 = v520 + 1;
          }
          while (v520 != v514);
          char v372 = 0;
          v529 += 2;
          int v374 = 2;
          BOOL v358 = v525;
        }
        while ((v509 & 1) != 0);
      }
      if (v506)
      {
        sub_1BBB4FDD0(v535, &v537, 6u, 0, v358, 0, 0, v530, (uint64_t)(v504 + 400), 4);
        sub_1BBB4FDD0(v535, &v537, 6u, 1, v358, 0, 0, v530, (uint64_t)(v504 + 404), 4);
        if (v506 != 1)
        {
          int v384 = 0;
          int v385 = 0;
          uint64_t v386 = (uint64_t)(v504 + 273);
          char v387 = 1;
          do
          {
            char v388 = v387;
            char v389 = sub_1BBB4FDD0(v535, &v537, 7u, 0, v358, 0, v385, v530, v386, 15);
            uint64_t v390 = 0;
            int v391 = v384 + 1;
            v386 += 32;
            uint64_t v392 = v503 + 256 + v384;
            while (1)
            {
              *(unsigned char *)(v392 + v390) = v389;
              if (v390 == 1) {
                break;
              }
              char v389 = sub_1BBB4FDD0(v535, &v537, 7u, 0, v358, 1, v385, v530, v386, 15);
              ++v390;
              v386 += 32;
            }
            char v387 = 0;
            int v384 = v391 + 1;
            int v385 = 1;
          }
          while ((v388 & 1) != 0);
          int v393 = 0;
          int v394 = 0;
          uint64_t v395 = (uint64_t)(v504 + 337);
          char v396 = 1;
          do
          {
            char v397 = v396;
            char v398 = sub_1BBB4FDD0(v535, &v537, 7u, 1, v358, 0, v394, v530, v395, 15);
            uint64_t v399 = 0;
            int v400 = v393 + 1;
            v395 += 32;
            uint64_t v401 = v503 + 260 + v393;
            while (1)
            {
              *(unsigned char *)(v401 + v399) = v398;
              if (v399 == 1) {
                break;
              }
              char v398 = sub_1BBB4FDD0(v535, &v537, 7u, 1, v358, 1, v394, v530, v395, 15);
              ++v399;
              v395 += 32;
            }
            char v396 = 0;
            int v393 = v400 + 1;
            int v394 = 1;
          }
          while ((v397 & 1) != 0);
        }
      }
      uint64_t v240 = (_DWORD *)v535;
      goto LABEL_621;
    }
    uint64_t v338 = *(_DWORD **)(v29 + 16);
    int v339 = *(unsigned __int8 *)(v29 + 36);
    unsigned int v340 = 2 * v331;
    if (v331 <= 0) {
      unsigned int v340 = 1 - 2 * v331;
    }
    unsigned int v341 = __clz(v340);
    unsigned int v342 = (((v340 - (0x80000000 >> v341)) | (0x80000000 >> v341)) << (2 * v341 - v339 - 31)) | *(_DWORD *)(v29 + 32);
    *uint64_t v338 = bswap32(v342);
    unsigned int v343 = v339 - 2 * v341 + 63;
    BOOL v344 = (char *)v338 + (v343 >> 3);
    unsigned int v345 = v342 << (v343 & 0xF8);
    if (v343 >= 0x20) {
      unsigned int v345 = 0;
    }
    *(void *)(v29 + 16) = v344;
    *(_DWORD *)(v29 + 32) = v345;
    *(unsigned char *)(v29 + 36) = v343 & 7;
    uint64_t v346 = *(void *)(v6 + 176);
    uint64_t v347 = *(void *)(v6 + 128);
    uint64_t v348 = *(void *)(v6 + 136);
    if (v347) {
      uint64_t v349 = v347 + 240;
    }
    else {
      uint64_t v349 = 0;
    }
    if (v348) {
      uint64_t v350 = v348 + 240;
    }
    else {
      uint64_t v350 = 0;
    }
    unsigned int v528 = v8[52];
    int v351 = v8[53];
    int v352 = v8[3];
    int v519 = *(unsigned __int8 *)(v243 + 1);
    int v536 = 0;
    uint64_t v513 = v348;
    uint64_t v516 = v347;
    int v523 = v351;
    if (v499 != 2)
    {
      uint64_t v402 = 0;
      int v403 = 16;
      uint64_t v353 = v504;
LABEL_583:
      uint64_t v404 = v346 + 240;
      __int32 v531 = &v353[v402 + 16];
      if (v352)
      {
        uint64_t v534 = 0;
        for (uint64_t m = 0; m != 4; ++m)
        {
          if ((v528 >> m))
          {
            int v406 = 0;
            long long v407 = (char *)v531 + ((2 * v534) & 0xFFFFFFFFFFFFFF00 | (16 * (m & 1)));
            long long v408 = v540;
            do
            {
              for (uint64_t n = 0; n != 16; n += 2)
                *(_WORD *)&v408[n] = *(_WORD *)&v407[n];
              v408 += 16;
              ++v406;
              v407 += 32;
            }
            while (v406 != 8);
            uint64_t v410 = 0;
            uint64_t v411 = 4 * m;
            long long v412 = (__int16 *)v540;
            do
            {
              uint64_t v413 = 0;
              long long v414 = v412;
              do
              {
                __int16 v415 = *v414;
                v414 += 4;
                v539[v413++] = v415;
              }
              while (v413 != 16);
              uint64_t v416 = sub_1BBB4F4C8((int)v410 + (int)v411, v404, v349, v350);
              sub_1BBB02C3C(v416, v539, v403, &v536, a2);
              *(unsigned char *)(v404 + v410 + v411) = v536;
              ++v410;
              ++v412;
            }
            while (v410 != 4);
          }
          v534 += 64;
        }
      }
      else
      {
        for (iuint64_t i = 0; ii != 16; ++ii)
        {
          if ((v528 >> (ii >> 2)))
          {
            uint64_t v418 = sub_1BBB4F4C8(ii, v346 + 240, v349, v350);
            sub_1BBB02C3C(v418, v531, v403, &v536, a2);
            *(unsigned char *)(v404 + ii) = v536;
          }
          v531 += 16;
        }
      }
      uint64_t v29 = a2;
      if (v523)
      {
        if (v519)
        {
          sub_1BBB02C3C(4, v504 + 400, 4, &v536, a2);
          sub_1BBB02C3C(4, v504 + 404, 4, &v536, a2);
          if (v523 != 1)
          {
            uint64_t v419 = 0;
            if (v516) {
              uint64_t v420 = v349 + 16;
            }
            else {
              uint64_t v420 = 0;
            }
            if (v513) {
              uint64_t v421 = v350 + 16;
            }
            else {
              uint64_t v421 = 0;
            }
            int v422 = v504 + 273;
            uint64_t v423 = v346 + 256;
            do
            {
              uint64_t v424 = sub_1BBB4F548(v419, v423, v420, v421);
              sub_1BBB02C3C(v424, v422, 15, &v536, a2);
              *(unsigned char *)(v423 + v419) = v536;
              v422 += 16;
              ++v419;
            }
            while (v419 != 4);
            uint64_t v425 = 0;
            if (v516) {
              uint64_t v426 = v349 + 20;
            }
            else {
              uint64_t v426 = 0;
            }
            if (v513) {
              uint64_t v427 = v350 + 20;
            }
            else {
              uint64_t v427 = 0;
            }
            BOOL v428 = v504 + 337;
            do
            {
              uint64_t v429 = sub_1BBB4F548(v425, v346 + 260, v426, v427);
              sub_1BBB02C3C(v429, v428, 15, &v536, a2);
              *(unsigned char *)(v346 + 260 + v425) = v536;
              v428 += 16;
              ++v425;
            }
            while (v425 != 4);
          }
        }
      }
      uint64_t v240 = (_DWORD *)v535;
      int v9 = v497;
      goto LABEL_620;
    }
    uint64_t v353 = v504;
    if (v347)
    {
      int v354 = *(unsigned __int8 *)(v347 + 245);
      LODWORD(v347) = 1;
      if (v348)
      {
LABEL_534:
        LODWORD(v348) = *(unsigned __int8 *)(v348 + 250);
        int v355 = 1;
LABEL_582:
        sub_1BBB02C3C(byte_1BBB8D588[(unint64_t)(v348 + v354 + (v355 & v347)) >> (v355 & v347)], v504, 16, &v536, v29);
        int v403 = 15;
        uint64_t v402 = 1;
        goto LABEL_583;
      }
    }
    else
    {
      int v354 = 0;
      if (v348) {
        goto LABEL_534;
      }
    }
    int v355 = 0;
    goto LABEL_582;
  }
LABEL_620:
  if (!v9)
  {
    int v431 = *(unsigned __int8 *)(v29 + 36) + 8 * (*(_DWORD *)(v29 + 16) - *(_DWORD *)v29);
    goto LABEL_622;
  }
LABEL_621:
  int v430 = v240[10] + v240[6] + 8 * (*v240 - v240[2]);
  int v431 = v430 & ~(v430 >> 31);
LABEL_622:
  uint64_t result = 0;
  *a4 = v431 - v501;
  return result;
}

unint64_t sub_1BBB06260(unint64_t result, uint64_t *a2, int *a3, unsigned int a4, unsigned int a5)
{
  if (a5 >= 0x20)
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = *a2;
    int v8 = *a3;
    uint64_t v9 = *(void *)result;
    int v10 = a4 >> 4;
    if (a4 >> 4 <= 1) {
      int v10 = 1;
    }
    do
    {
      if (a4 >= 0x10)
      {
        int v11 = 0;
        int v12 = v5;
        do
        {
          int v13 = 0;
          int v14 = v12;
          do
          {
            for (uint64_t i = 0; i != 16; ++i)
              *(unsigned char *)(v9 + i) = *(unsigned char *)(v7 + (v14 + i));
            v9 += 16;
            ++v13;
            v14 += v8;
          }
          while (v13 != 32);
          ++v11;
          v12 += 16;
        }
        while (v11 != v10);
      }
      ++v6;
      v5 += 32 * v8;
    }
    while (v6 != a5 >> 5);
    if (a5 >= 0x40)
    {
      int v16 = 0;
      int v17 = 0;
      uint64_t v18 = a2[1];
      int v19 = a3[1];
      uint64_t v20 = *(void *)(result + 8);
      do
      {
        if (a4 >= 0x10)
        {
          int v21 = 0;
          int v22 = v16;
          do
          {
            LODWORD(result) = 0;
            int v23 = v22;
            do
            {
              for (uint64_t j = 0; j != 16; ++j)
                *(unsigned char *)(v20 + j) = *(unsigned char *)(v18 + (v23 + j));
              v20 += 16;
              uint64_t result = (result + 1);
              v23 += v19;
            }
            while (result != 16);
            ++v21;
            v22 += 16;
          }
          while (v21 != v10);
        }
        ++v17;
        v16 += 16 * v19;
      }
      while (v17 != a5 >> 6);
    }
  }
  return result;
}

unint64_t sub_1BBB06390(unint64_t result, int *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if (a5 >= 0x20)
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = *(void *)result;
    int v8 = *a2;
    uint64_t v9 = *a3;
    int v10 = a4 >> 4;
    if (a4 >> 4 <= 1) {
      int v10 = 1;
    }
    do
    {
      if (a4 >= 0x10)
      {
        int v11 = 0;
        int v12 = v5;
        do
        {
          int v13 = 0;
          int v14 = v12;
          do
          {
            for (uint64_t i = 0; i != 16; ++i)
              *(unsigned char *)(v7 + (v14 + i)) = *(unsigned char *)(v9 + i);
            v9 += 16;
            ++v13;
            v14 += v8;
          }
          while (v13 != 32);
          ++v11;
          v12 += 16;
        }
        while (v11 != v10);
      }
      ++v6;
      v5 += 32 * v8;
    }
    while (v6 != a5 >> 5);
    if (a5 >= 0x40)
    {
      int v16 = 0;
      int v17 = 0;
      uint64_t v18 = *(void *)(result + 8);
      int v19 = a2[1];
      uint64_t v20 = a3[1];
      do
      {
        if (a4 >= 0x10)
        {
          int v21 = 0;
          int v22 = v16;
          do
          {
            LODWORD(result) = 0;
            int v23 = v22;
            do
            {
              for (uint64_t j = 0; j != 16; ++j)
                *(unsigned char *)(v18 + (v23 + j)) = *(unsigned char *)(v20 + j);
              v20 += 16;
              uint64_t result = (result + 1);
              v23 += v19;
            }
            while (result != 16);
            ++v21;
            v22 += 16;
          }
          while (v21 != v10);
        }
        ++v17;
        v16 += 16 * v19;
      }
      while (v17 != a5 >> 6);
    }
  }
  return result;
}

void *sub_1BBB064C0(void *result, uint64_t *a2, unsigned int *a3, unsigned int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    uint64_t v8 = *result;
    do
    {
      if (a4)
      {
        for (unint64_t i = 0; i < a4; i += 16)
        {
          int v10 = 0;
          uint64_t v11 = v7 + i;
          do
          {
            uint64_t v12 = 0;
            do
            {
              *(unsigned char *)(v8 + v12) = *(unsigned char *)(v11 + v12);
              ++v12;
            }
            while (v12 != 16);
            v8 += v12;
            v11 += v12 + v6;
            ++v10;
          }
          while (v10 != 16);
        }
      }
      v7 += (16 * v6);
      v5 += 16;
    }
    while (v5 < a5);
    if (a5 >= 2)
    {
      unsigned int v13 = 0;
      uint64_t v14 = a3[1];
      uint64_t v15 = a2[1];
      uint64_t v16 = result[1];
      do
      {
        if (a4)
        {
          for (unint64_t j = 0; j < a4; j += 16)
          {
            int v18 = 0;
            uint64_t v19 = v15 + j;
            do
            {
              uint64_t result = 0;
              do
              {
                *((unsigned char *)result + v16) = *((unsigned char *)result + v19);
                uint64_t result = (void *)((char *)result + 1);
              }
              while (result != 16);
              v16 += (uint64_t)result;
              v19 += (uint64_t)result + v14;
              ++v18;
            }
            while (v18 != 8);
            v15 += (8 * v14);
          }
        }
        v13 += 8;
      }
      while (v13 < a5 >> 1);
    }
  }
  return result;
}

void *sub_1BBB065B8(void *result, unsigned int *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    uint64_t v6 = *a2;
    uint64_t v7 = *a3;
    uint64_t v8 = *result;
    do
    {
      if (a4)
      {
        for (unint64_t i = 0; i < a4; i += 16)
        {
          int v10 = 0;
          uint64_t v11 = v8 + i;
          do
          {
            for (uint64_t j = 0; j != 16; ++j)
              *(unsigned char *)(v11 + j) = *(unsigned char *)(v7 + j);
            v7 += 16;
            v11 += v6;
            ++v10;
          }
          while (v10 != 16);
        }
      }
      v8 += (16 * v6);
      v5 += 16;
    }
    while (v5 < a5);
    if (a5 >= 2)
    {
      unsigned int v13 = 0;
      uint64_t v14 = a2[1];
      uint64_t v15 = a3[1];
      uint64_t v16 = result[1];
      do
      {
        if (a4)
        {
          for (unint64_t k = 0; k < a4; k += 16)
          {
            int v18 = 0;
            uint64_t v19 = v16 + k;
            do
            {
              uint64_t result = 0;
              do
              {
                *((unsigned char *)result + v19) = *((unsigned char *)result + v15);
                uint64_t result = (void *)((char *)result + 1);
              }
              while (result != (void *)16);
              v15 += 16;
              v19 += v14;
              ++v18;
            }
            while (v18 != 8);
          }
        }
        v16 += (8 * v14);
        v13 += 8;
      }
      while (v13 < a5 >> 1);
    }
  }
  return result;
}

uint64_t sub_1BBB066A8(__CVBuffer *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = a1;
  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v7, 0);
  uint64_t v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(v7, 1uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v7, 0);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(v7, 1uLL);
  if (a4 >= 1)
  {
    size_t v12 = v11;
    int v22 = v7;
    uint64_t v13 = *(int *)(a2 + 152);
    uint64_t v14 = *(int *)(a2 + 136);
    int v21 = a4;
    int v15 = a4;
    uint64_t v18 = a2 + 32;
    int v17 = *(char **)(a2 + 32);
    uint64_t v16 = *(char **)(v18 + 8);
    do
    {
      memcpy(BaseAddressOfPlane, v17, a3);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      v17 += v14;
      --v15;
    }
    while (v15);
    uint64_t v7 = v22;
    if (v21 >= 2)
    {
      int v19 = v21 >> 1;
      do
      {
        memcpy(v9, v16, a3);
        v9 += v12;
        v16 += v13;
        --v19;
      }
      while (v19);
    }
  }

  return CVPixelBufferUnlockBaseAddress(v7, 0);
}

void *sub_1BBB067DC(void *result, int a2, uint64_t a3, int a4, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v8 = (char *)(result + 25725);
    uint64_t v9 = result[26015];
    *(_DWORD *)(v9 + 144) = a3;
    *(_DWORD *)(v9 + 148) = a4;
    if (cf)
    {
      int v10 = *(const void **)(v9 + 152);
      if (v10) {
        CFRelease(v10);
      }
      *(void *)(v9 + 152) = cf;
      uint64_t result = CFRetain(cf);
    }
    if (!*(unsigned char *)(v9 + 32))
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v9 + 3888), 0xFFFFFFFFFFFFFFFFLL);
      size_t v11 = *(_DWORD **)(v7 + 72);
      __int16 v25 = 0;
      uint64_t v12 = *(void *)(*((void *)v8 + 290) + 8 * *(int *)(*((void *)v8 + 290) + 64) + 72);
      if (sub_1BBB28758(v7, v12, (uint64_t)(v11 + 4), v13, v14, v15)
        || sub_1BBB2923C(v7, (uint64_t)(v11 + 4), v12))
      {
        goto LABEL_18;
      }
      if (*(_DWORD *)(v12 + 1276))
      {
        char v18 = *(unsigned char *)(v7 + 1024);
        v8[2333] = v18;
        if (*(_DWORD *)(v12 + 228) <= 0x1DFu)
        {
          *((_DWORD *)v8 + 584) = 1;
          *((_WORD *)v8 + 1170) = 257;
          v8[2342] = 0;
        }
      }
      else
      {
        char v18 = v8[2333];
      }
      sub_1BBB293A0(v7, v12, 0, (uint64_t)(v11 + 4), 1u, *((_DWORD *)v8 + 584), v8[2340], 0, v16, v17, 0, 0, 0, v8[2341], v18, (char *)&v25 + 1, (char *)(v7 + 208142));
      if (sub_1BBB29D50(v7, v12, 0, (uint64_t)(v11 + 4), 1u)) {
        goto LABEL_18;
      }
      sub_1BBB2AC6C(v7, v12, (uint64_t)(v11 + 4));
      sub_1BBB2BC0C(v7, v12, 0, (uint64_t)(v11 + 4), (uint64_t)v11);
      *size_t v11 = *(unsigned char *)(*(void *)(v7 + 136) + 317) == 0;
      sub_1BBB2C660(v7, (uint64_t)(v11 + 4), (uint64_t)(v11 + 24), v12);
      if (*((_DWORD *)v8 + 31) != 1) {
        sub_1BBB2C8EC(v12, *(void *)v8, (uint64_t)(v11 + 24), *(unsigned __int8 *)(*(void *)(v7 + 136) + 577));
      }
      *(_DWORD *)(*(void *)(v7 + 128) + 8) = 0;
      sub_1BBB43650(*(void *)(v7 + 136), *(void *)(v7 + 88), v7, v12, (_DWORD *)(*(void *)(v7 + 128) + 8));
      uint64_t v19 = *((void *)v8 + 290);
      if (sub_1BBB49E78(0, v7, v12, *(void *)(v7 + 136), 0, (uint64_t)(v11 + 4), (uint64_t)v11, *(unsigned int *)(v19 + 220), *(_DWORD **)(v19 + 120), *(char **)(v19 + 112), *(_DWORD **)(v19 + 136), *(void *)(v19 + 128), 2, *(_DWORD *)(*(void *)(v7 + 128) + 8), &v25))LABEL_18:CFLog(); {
      *(unsigned char *)(v9 + 33) = 0;
      }
      uint64_t v20 = *(void *)(v9 + 72 + 8 * *(int *)(v9 + 64));
      (*(void (**)(void, uint64_t, void))(v7 + 160))(*(void *)(v7 + 168), a3, *(void *)(v20 + 1408));
      uint64_t v21 = *(void *)(v9 + 72 + 8 * *(int *)(v9 + 68));
      if (v21)
      {
        unsigned int v22 = *(_DWORD *)(v21 + 1276);
        if (*(_DWORD *)(v20 + 1276) < v22)
        {
          if (*(_DWORD *)(*(void *)(v7 + 128) + 8)) {
            *(_DWORD *)(v21 + 1276) = v22 - 1;
          }
        }
      }
      int v23 = *(_DWORD *)(v20 + 1276);
      if (!*(_DWORD *)(*(void *)(v7 + 128) + 8)) {
        ++v23;
      }
      *(_DWORD *)(v7 + 176) = v23;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v9 + 3888));
      unsigned int v24 = *(NSObject **)(v9 + 88);
      return (void *)dispatch_semaphore_signal(v24);
    }
  }
  return result;
}

void sub_1BBB06B10(CFTypeRef **a1)
{
  v1 = *a1;
  if (*a1)
  {
    CFTypeRef v3 = v1[19];
    if (v3)
    {
      CFRelease(v3);
      (*a1)[19] = 0;
      v1 = *a1;
    }
    CFTypeRef v4 = v1[5];
    if (v4)
    {
      CFRelease(v4);
      (*a1)[5] = 0;
      v1 = *a1;
    }
    CFTypeRef v5 = v1[6];
    if (v5)
    {
      CFRelease(v5);
      (*a1)[6] = 0;
      v1 = *a1;
    }
    CFTypeRef v6 = v1[1];
    if (v6)
    {
      CFRelease(v6);
      (*a1)[1] = 0;
      v1 = *a1;
    }
    CFTypeRef v7 = v1[2];
    if (v7)
    {
      CFRelease(v7);
      (*a1)[2] = 0;
      v1 = *a1;
    }
    if (*v1)
    {
      VTCompressionSessionInvalidate((VTCompressionSessionRef)*v1);
      CFRelease(**a1);
      **a1 = 0;
      v1 = *a1;
    }
    uint64_t v8 = (char *)v1[7];
    if (v8)
    {
      sub_1BBA1AC6C(v8);
      (*a1)[7] = 0;
      v1 = *a1;
    }
    if (*((int *)v1 + 745) >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = 0;
        char v11 = 1;
        do
        {
          char v12 = v11;
          uint64_t v13 = *(&(*a1)[2 * v9 + 373] + v10);
          if (v13)
          {
            CFRelease(v13);
            *(&(*a1)[2 * v9 + 373] + v10) = 0;
          }
          char v11 = 0;
          uint64_t v10 = 1;
        }
        while ((v12 & 1) != 0);
        ++v9;
        v1 = *a1;
      }
      while (v9 < *((int *)*a1 + 745));
    }
    CFTypeRef v14 = v1[444];
    if (v14)
    {
      MEMORY[0x1C18605A0](v14, 0x1000C80BDFB0063);
      (*a1)[444] = 0;
      v1 = *a1;
    }
    CFTypeRef v15 = v1[445];
    if (v15)
    {
      MEMORY[0x1C18605A0](v15, 0x1000C80BDFB0063);
      (*a1)[445] = 0;
      v1 = *a1;
    }
    double v16 = (char *)v1[453];
    if (v16)
    {
      sub_1BBB0A254(v16);
      (*a1)[453] = 0;
      v1 = *a1;
    }
    v1[14] = 0;
    (*a1)[15] = 0;
    (*a1)[16] = 0;
    (*a1)[17] = 0;
    double v17 = *a1;
    if ((*a1)[454])
    {
      sub_1BBB4F3C0((*a1)[454]);
      (*a1)[454] = 0;
      double v17 = *a1;
    }
    if (v17[486])
    {
      dispatch_release((dispatch_object_t)v17[486]);
      double v17 = *a1;
    }
    if (v17[11])
    {
      dispatch_release((dispatch_object_t)v17[11]);
      double v17 = *a1;
    }
    free(v17);
    *a1 = 0;
  }
}

void sub_1BBB06D2C(const void *a1, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  VTSessionSetProperty(a1, a2, v5);
  CFRelease(v5);
}

void sub_1BBB06D90(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void sub_1BBB06DF4(int *a1, int a2, int *a3, int a4, int a5)
{
  switch(a4)
  {
    case 1:
    case 4:
      *a1 = (*a1 + 15) & 0xFFFFFFF0;
      int v7 = (*a3 + 15) & 0xFFFFFFF0;
      goto LABEL_19;
    case 2:
      double v8 = log2((double)*a1);
      *a1 = (int)exp2(ceil(v8));
      double v9 = log2((double)*a3);
      int v7 = (int)exp2(ceil(v9));
      goto LABEL_19;
    case 3:
      int v10 = *a1 + 127;
      if (v10 <= 0) {
        int v11 = -(-v10 & 0x7F);
      }
      else {
        int v11 = v10 & 0x7F;
      }
      *a1 = v10 - v11;
      int v12 = *a3 + 127;
      if (v12 <= 0) {
        int v13 = -(-v12 & 0x7F);
      }
      else {
        int v13 = v12 & 0x7F;
      }
      int v7 = v12 - v13;
      goto LABEL_19;
    case 5:
      if (a5) {
        int v14 = -32;
      }
      else {
        int v14 = -16;
      }
      if (a5) {
        int v15 = 32;
      }
      else {
        int v15 = 16;
      }
      *a1 = (*a1 + 15) & 0xFFFFFFF0;
      *a3 = (*a3 + 15) & 0xFFFFFFF0;
      *a1 = (a2 + v15 - 1) & v14;
      int v7 = (v15 + *a3 - 1) & v14;
LABEL_19:
      *a3 = v7;
      break;
    default:
      CFLog();
      break;
  }
}

uint64_t sub_1BBB06F70(size_t *a1, char a2)
{
  CFTypeRef v4 = (__IOSurface *)a1[5];
  *((_DWORD *)a1 + 4) = IOSurfaceGetPixelFormat(v4);
  a1[3] = IOSurfaceGetAllocSize(v4);
  *((unsigned char *)a1 + 32) = IOSurfaceIsTiled() != 0;
  *((_DWORD *)a1 + 9) = IOSurfaceGetTileFormat();
  uint64_t result = IOSurfaceLock(v4, 0, 0);
  if (!result)
  {
    size_t PlaneCount = IOSurfaceGetPlaneCount(v4);
    if (PlaneCount > 1)
    {
      *a1 = IOSurfaceGetWidthOfPlane(v4, 0);
      size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v4, 0);
    }
    else
    {
      *a1 = IOSurfaceGetWidth(v4);
      size_t HeightOfPlane = IOSurfaceGetHeight(v4);
    }
    a1[1] = HeightOfPlane;
    if (a2)
    {
      a1[6] = (size_t)IOSurfaceGetBaseAddress(v4);
      a1[7] = 0;
      *((_DWORD *)a1 + 16) = IOSurfaceGetWidth(v4);
      int Height = IOSurfaceGetHeight(v4);
      *((unsigned char *)a1 + 76) = 0;
      int v9 = *((_DWORD *)a1 + 16);
      unsigned int v10 = (v9 + 15) & 0xFFFFFFF0;
      *((_DWORD *)a1 + 17) = Height;
      *((_DWORD *)a1 + 18) = v10;
      size_t v11 = *a1;
      size_t v12 = a1[1];
      unint64_t v13 = ((v12 + 63) & 0xFFFFFFFFFFFFFFC0) * ((*a1 + 63) & 0xFFFFFFFFFFFFFFC0);
      a1[10] = 0;
      *((_DWORD *)a1 + 22) = 0;
      size_t v14 = a1[6];
      a1[12] = v13;
      a1[13] = v14 + ((v12 + 31) & 0xFFFFFFFFFFFFFFE0) * ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      a1[14] = 0;
      *((_DWORD *)a1 + 30) = v9;
      *((_DWORD *)a1 + 31) = Height >> 1;
      *((unsigned char *)a1 + 132) = 0;
      *((_DWORD *)a1 + 32) = v10;
      a1[19] = v13 >> 1;
      a1[17] = 0;
      *((_DWORD *)a1 + 36) = 0;
    }
    else if (PlaneCount)
    {
      size_t v15 = 0;
      double v16 = a1 + 12;
      do
      {
        *(v16 - 6) = IOSurfaceGetBaseAddressOfPlane(v4, v15);
        *(v16 - 5) = 0;
        *((_DWORD *)v16 - 8) = IOSurfaceGetWidthOfPlane(v4, v15);
        *((_DWORD *)v16 - 7) = IOSurfaceGetHeightOfPlane(v4, v15);
        *((unsigned char *)v16 - 20) = IOSurfaceGetAddressFormatOfPlane();
        *((_DWORD *)v16 - 4) = IOSurfaceGetCompressionTypeOfPlane();
        int BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v4, v15);
        *((_DWORD *)v16 - 6) = BytesPerRowOfPlane;
        *double v16 = *((int *)v16 - 7) * (uint64_t)BytesPerRowOfPlane;
        *(void *)((char *)v16 - 12) = 0;
        if (*((_DWORD *)v16 - 4) == 1)
        {
          *(v16 - 6) = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
          *(v16 - 5) = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
          *((_DWORD *)v16 - 3) = IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
          *((_DWORD *)v16 - 2) = IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
        }
        ++v15;
        v16 += 7;
      }
      while (PlaneCount != v15);
    }
    return IOSurfaceUnlock(v4, 0, 0);
  }
  return result;
}

void sub_1BBB071E0(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t sub_1BBB07244(CVPixelBufferPoolRef *a1, int a2, int a3, int a4)
{
  CVPixelBufferPoolRef v8 = *a1;
  if (v8)
  {
    CFRelease(v8);
    *a1 = 0;
  }
  int v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unsigned int v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(0, 0, v9, v10);
  unint64_t v13 = v12;
  if (Mutable) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    sub_1BBAF18DC(Mutable, (const void *)*MEMORY[0x1E4F24D90], 1);
    if (a4) {
      int v17 = 875704422;
    }
    else {
      int v17 = 875704438;
    }
    sub_1BBAF18DC(v13, (const void *)*MEMORY[0x1E4F24D70], v17);
    sub_1BBAF18DC(v13, (const void *)*MEMORY[0x1E4F24E10], a2);
    sub_1BBAF18DC(v13, (const void *)*MEMORY[0x1E4F24D08], a3);
    char v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v18)
    {
      uint64_t v19 = v18;
      sub_1BBAF18DC(v18, (const void *)*MEMORY[0x1E4F2EFE8], 1024);
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E4F24D20], v19);
      CFRelease(v19);
      sub_1BBAF18DC(v13, (const void *)*MEMORY[0x1E4F24D78], 64);
      sub_1BBAF18DC(v13, (const void *)*MEMORY[0x1E4F24C98], 16);
    }
    uint64_t v15 = CVPixelBufferPoolCreate(0, Mutable, v13, a1);
LABEL_18:
    CFRelease(v13);
    if (!Mutable) {
      return v15;
    }
    goto LABEL_10;
  }
  uint64_t v15 = 4294958324;
  if (v12) {
    goto LABEL_18;
  }
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
  return v15;
}

uint64_t sub_1BBB0741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, uint64_t a11, uint64_t a12)
{
  unsigned int v12 = a7;
  uint64_t v16 = 512;
  if ((int)(a6 / a9) < 6) {
    uint64_t v16 = 256;
  }
  int v17 = (char *)&unk_1BBB85C20 + v16;
  sub_1BBB17208(0, a1, a5, a6, a7, a3, a8, a9, a10, (uint64_t)&unk_1BBB85C20 + v16, (uint64_t)&unk_1BBB85C20 + v16, (uint64_t (*)(uint64_t, char *, void, uint64_t, char *, char *, uint64_t))Filter8tapH_neon64);
  return sub_1BBB17208(1, a2, a11, a6, v12 >> 1, a4, a12, a9, a10 >> 1, (uint64_t)v17, (uint64_t)v17, (uint64_t (*)(uint64_t, char *, void, uint64_t, char *, char *, uint64_t))Filter8tapH_chroma_neon64);
}

uint64_t sub_1BBB07514(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8 * *(int *)(a1 + 64) + 72);
  if (v1)
  {
    memset(&v6, 0, sizeof(v6));
    CMTimeMake(&v6, *(int *)(v1 + 1332), *(_DWORD *)(v1 + 1336));
    CFTypeRef v3 = *(OpaqueVTCompressionSession **)a1;
    CMTime completeUntilPresentationTimeStamp = v6;
    VTCompressionSessionCompleteFrames(v3, &completeUntilPresentationTimeStamp);
    return 0;
  }
  else
  {
    CFLog();
    return 4294943593;
  }
}

uint64_t sub_1BBB075A0(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned char *a9)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = 0;
  IOSurfaceRef v68 = 0;
  if (!a5) {
    goto LABEL_8;
  }
  uint64_t v10 = 0;
  uint64_t v11 = a1 + 224;
  unsigned int v12 = (int *)(a1 + 224);
  while (1)
  {
    int v13 = *v12;
    v12 += 20;
    if (v13 == *(_DWORD *)(a4 + 60)) {
      break;
    }
    if (a5 == ++v10) {
      goto LABEL_8;
    }
  }
  if (v10 != a5)
  {
    unsigned int v20 = v10;
    uint64_t v21 = v11 + 80 * v10;
    int v23 = *(_DWORD *)(v21 + 32);
    unsigned int v22 = (int *)(v21 + 32);
    if (v23 == a2 && *(_DWORD *)(v11 + 80 * v20 + 40) == a3)
    {
LABEL_16:
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v24 = 0;
      char v25 = 1;
      *a9 = 1;
      *(_DWORD *)(a1 + 2976) = 1;
      int v53 = *(v22 - 1);
      uint64_t v26 = v11 + 80 * v20;
      BOOL v27 = a7 > 0;
      BOOL v28 = a8 > 0;
      BOOL v29 = !v27 || !v28;
      int v49 = *(_DWORD *)(v26 + 36);
      if (v27 && v28) {
        int v30 = a7;
      }
      else {
        int v30 = a2;
      }
      if (v29) {
        int v31 = a3;
      }
      else {
        int v31 = a8;
      }
      int v51 = v31;
      int v52 = v30;
      *unsigned int v22 = v30;
      *(_DWORD *)(v26 + 40) = v31;
      unsigned int v50 = (a6 + 15) & 0xFFFFFFF0;
LABEL_24:
      char v32 = v25;
      unsigned int v33 = IOSurfaceLookup(*(_DWORD *)(v11 + 80 * v20 + 4 * v24 + 68));
      *(&v67 + v24) = (uint64_t)v33;
      if (v33)
      {
        unsigned int v34 = v33;
        IOSurfaceLock(v33, 0, 0);
        unsigned int v35 = (size_t *)&v54[40 * v24 + 8];
        v35[5] = (size_t)v34;
        sub_1BBB06F70(v35, *(_DWORD *)(a1 + 3540) == 6);
        uint64_t v36 = 0;
        char v37 = 1;
        while (1)
        {
          char v38 = v37;
          uint64_t v39 = *(void *)&v54[40 * v24 + 20 + 14 * v36];
          *((void *)&v65 + 2 * v24 + v36) = v39;
          if (!v39) {
            break;
          }
          char v37 = 0;
          uint64_t v36 = 1;
          if ((v38 & 1) == 0)
          {
            char v25 = 0;
            uint64_t v24 = 1;
            if (v32) {
              goto LABEL_24;
            }
            if (*(_DWORD *)(a1 + 3540) == 6)
            {
              int v40 = v68;
              BaseAddress = IOSurfaceGetBaseAddress(v68);
              uint64_t AllocSize = IOSurfaceGetAllocSize(v40);
              BOOL v43 = BaseAddress;
            }
            else
            {
              memset((void *)v66, 128, *(int *)(a1 + 3588) * (uint64_t)*(int *)(a1 + 3580));
              BOOL v43 = (void *)*((void *)&v66 + 1);
              uint64_t AllocSize = *(int *)(a1 + 3592) * (uint64_t)*(int *)(a1 + 3584);
            }
            memset(v43, 128, AllocSize);
            long long v63 = v66;
            long long v64 = v65;
            v62[0] = v56;
            v62[1] = v59;
            v61[0] = v57;
            v61[1] = v60;
            if (v55 == 1 || v58 == 1)
            {
              uint64_t v44 = 0;
              v54[0] = *(_DWORD *)(a1 + 3572);
              char v45 = 1;
              do
              {
                char v46 = v45;
                if (LOBYTE(v54[14 * v44 + 27]) == 1)
                {
                  int v47 = *(_DWORD *)(a1 + 3576);
                  uint64_t v48 = *(void *)&v54[14 * v44 + 22];
                }
                else
                {
                  int v47 = 0;
                  uint64_t v48 = 0;
                }
                char v45 = 0;
                v54[v44 + 1] = v47;
                *(void *)&v54[2 * v44 + 4] = v48;
                uint64_t v44 = 1;
              }
              while ((v46 & 1) != 0);
              sub_1BBB157FC((uint64_t)&v63, v50, v52, v51, (uint64_t)&v64, (uint64_t)v54, v50, v53, v49, (uint64_t)v62, (uint64_t)v61);
            }
            else
            {
              sub_1BBB155F4(*(void *)(a1 + 56), (uint64_t)&v63, v50, v52, v51, (uint64_t)&v64, 0, v50, v53, v49, (uint64_t)v62, (uint64_t)v61);
            }
            goto LABEL_16;
          }
        }
      }
      uint64_t v14 = 4294967246;
    }
  }
  else
  {
LABEL_8:
    CFLog();
    uint64_t v14 = 4294943593;
  }
  uint64_t v15 = 0;
  char v16 = 1;
  do
  {
    char v17 = v16;
    char v18 = (const void *)*(&v67 + v15);
    if (v18)
    {
      IOSurfaceUnlock((IOSurfaceRef)*(&v67 + v15), 0, 0);
      CFRelease(v18);
    }
    char v16 = 0;
    uint64_t v15 = 1;
  }
  while ((v17 & 1) != 0);
  return v14;
}

uint64_t sub_1BBB07950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int a6, char a7, unsigned char *a8)
{
  int v13 = *(_DWORD *)(a2 + 228);
  uint64_t v14 = (unsigned __int16 *)(a2 + 19112);
  if ((a7 & 1) != 0
    || (int v15 = *(_DWORD *)(a2 + 224), v16 = *(_DWORD *)(a2 + 192), v15 >= *v14)
    && v16 >= *(unsigned __int16 *)(a2 + 19114))
  {
    int v15 = 0;
    int v16 = 0;
  }
  if (*a5 == 1)
  {
    uint64_t v17 = sub_1BBB075A0(a1, *(unsigned __int16 *)(a2 + 19112), *(unsigned __int16 *)(a2 + 19114), a3, a6, v13, v15, v16, a8);
    if (v17)
    {
      uint64_t v18 = v17;
LABEL_10:
      CFLog();
      return v18;
    }
  }
  if (a5[1] != 1) {
    return 0;
  }
  uint64_t v18 = sub_1BBB075A0(a1, *v14, v14[1], a4, a6, v13, v15, v16, a8);
  if (v18) {
    goto LABEL_10;
  }
  return v18;
}

uint64_t sub_1BBB07A80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  int v7 = (unsigned __int16 *)(a3 + 19112);
  CVPixelBufferPoolRef v8 = *(__CVPixelBufferPool **)(a2 + 8 * *(int *)(a2 + 68) + 3464);
  int v9 = *(unsigned __int16 *)(a3 + 19112);
  int v10 = *(unsigned __int16 *)(a3 + 19114);
  int v11 = *(_DWORD *)(a3 + 228);
  uint64_t v170 = *(int *)(a3 + 224);
  int v12 = *(_DWORD *)(a3 + 196);
  __b = (void *)*(int *)(a3 + 192);
  CVPixelBufferRef pixelBufferOut = 0;
  sub_1BBB08B38(a3, v191, (uint64_t)&v187);
  BOOL v14 = v11 != v9 || v12 != v10;
  if (*(unsigned char *)(a2 + 3392)) {
    BOOL v15 = v14;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = v191[0];
  if (v191[0] <= 0)
  {
    BOOL v17 = 1;
    if (v192 >= v11 - 1 && v191[1] <= 0) {
      BOOL v17 = v193 < v12 - 1;
    }
  }
  else
  {
    BOOL v17 = 1;
  }
  if (!v15
    && (v11 < 641 ? (BOOL v18 = v12 < 481) : (BOOL v18 = 0),
        !v18 ? (BOOL v19 = v11 < 481) : (BOOL v19 = 1),
        v19 ? (BOOL v20 = v17) : (BOOL v20 = 0),
        !v20)
    || *(_DWORD *)(a1 + 4852) == 1)
  {
    CVPixelBufferPoolRef v21 = CVPixelBufferPoolRetain(v8);
    uint64_t v22 = 0;
LABEL_28:
    *(void *)(a2 + 3480 + 8 * *(int *)(a2 + 68)) = v21;
    *(void *)(a2 + 3496) = CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(a2 + 3480 + 8 * *(int *)(a2 + 68)), 0);
    *(void *)(a2 + 3504) = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(a2 + 3480 + 8 * *(int *)(a2 + 68)), 0);
    goto LABEL_63;
  }
  int v23 = *(__CVPixelBufferPool **)(a2 + 8);
  uint64_t v24 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  pixelBuffer = v8;
  BOOL v161 = v17;
  if (v23)
  {
    CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_31;
  }
  poolOut = (CVPixelBufferPoolRef *)(a2 + 8);
  unsigned int v153 = v7;
  *(void *)&long long v179 = 2;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(v8);
  int v152 = (v170 + 15) & 0xFFFFFFF0;
  int valuePtr = 0;
  CFAllocatorRef allocator = *v24;
  Mutable = CFDictionaryCreateMutable(*v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  BOOL v29 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (PixelFormatType <= 1095519263)
  {
    if (PixelFormatType != 875704422 && PixelFormatType != 875704438) {
      goto LABEL_53;
    }
  }
  else
  {
    if (PixelFormatType == 2033463856) {
      goto LABEL_51;
    }
    if (PixelFormatType == 1714696752)
    {
LABEL_52:
      int valuePtr = 1714696752;
      CFNumberRef v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFArrayAppendValue(v29, v37);
      CFRelease(v37);
      goto LABEL_53;
    }
    if (PixelFormatType != 1095519264) {
      goto LABEL_53;
    }
  }
  if (PixelFormatType == 1095519264) {
    int v33 = 875704438;
  }
  else {
    int v33 = PixelFormatType;
  }
  int valuePtr = v33;
  CFNumberRef v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(v29, v34);
  CFRelease(v34);
  if (PixelFormatType != 1095519264 && PixelFormatType != 875704422) {
    goto LABEL_53;
  }
  int valuePtr = 875704422;
  CFNumberRef v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(v29, v35);
  CFRelease(v35);
  if (PixelFormatType != 1095519264) {
    goto LABEL_53;
  }
LABEL_51:
  int valuePtr = 2033463856;
  CFNumberRef v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(v29, v36);
  CFRelease(v36);
  if (PixelFormatType == 1095519264) {
    goto LABEL_52;
  }
LABEL_53:
  unsigned int v151 = (__b + 15) & 0xFFFFFFF0;
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v29);
  CFRelease(v29);
  CFMutableDictionaryRef v38 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v38);
  CFRelease(v38);
  uint64_t v39 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  int v185 = 1024;
  CFNumberRef v40 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v40);
  CFRelease(v40);
  int v185 = 0;
  CFNumberRef v41 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v41);
  CFRelease(v41);
  int v185 = 256;
  CFNumberRef v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v42);
  CFRelease(v42);
  int v185 = 512;
  CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v43);
  CFRelease(v43);
  int v185 = 768;
  CFNumberRef v44 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v44);
  CFRelease(v44);
  int v185 = 1280;
  CFNumberRef v45 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v45);
  CFRelease(v45);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CB0], v39);
  CFRelease(v39);
  sub_1BBB071E0(Mutable, (const void *)*MEMORY[0x1E4F24E10], v170);
  sub_1BBB071E0(Mutable, (const void *)*MEMORY[0x1E4F24D08], (int)__b);
  sub_1BBB071E0(Mutable, (const void *)*MEMORY[0x1E4F24D78], 64);
  if (v152 != v170) {
    sub_1BBB071E0(Mutable, (const void *)*MEMORY[0x1E4F24CE8], v152 - v170);
  }
  if (v151 != __b) {
    sub_1BBB071E0(Mutable, (const void *)*MEMORY[0x1E4F24CD0], v151 - __b);
  }
  sub_1BBB071E0(Mutable, (const void *)*MEMORY[0x1E4F24C98], 64);
  CFNumberRef v46 = CFNumberCreate(0, kCFNumberCFIndexType, &v179);
  int v47 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(v47, (const void *)*MEMORY[0x1E4F24D90], v46);
  CFRelease(v46);
  uint64_t v22 = CVPixelBufferPoolCreate(allocator, v47, Mutable, poolOut);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v47) {
    CFRelease(v47);
  }
  int v7 = v153;
  if (v22) {
    goto LABEL_62;
  }
  CFAllocatorRef v25 = allocator;
  int v23 = *poolOut;
LABEL_31:
  uint64_t v26 = CVPixelBufferPoolCreatePixelBuffer(v25, v23, &pixelBufferOut);
  if (v26)
  {
    uint64_t v22 = v26;
    goto LABEL_62;
  }
  uint64_t v31 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if (v31)
  {
    uint64_t v22 = v31;
    goto LABEL_62;
  }
  if (!v15)
  {
    if (v161)
    {
      signed int v63 = v16 & 0xFFFFFFF0;
      if (v16 < 0 != v30
        || v63 >= v11
        || v63 >= v12
        || (int v64 = v192 | 0xF, (v192 | 0xF) < v63)
        || v64 >= v11
        || (int v65 = v193 | 0xF, (v193 | 0xF) < v63)
        || v65 >= v12)
      {
        signed int v63 = 0;
        int v64 = v11 - 1;
        int v65 = v12 - 1;
      }
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      __ba = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      size_t v68 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      int v69 = v64 - v63 + 1;
      BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
      size_t DataSize = CVPixelBufferGetDataSize(pixelBufferOut);
      memset(BaseAddress, 128, DataSize);
      int v72 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
      unsigned int v172 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
      size_t v73 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
      size_t v74 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 1uLL);
      if (v63 <= v65)
      {
        uint64_t v83 = v63;
        unsigned int v84 = v63;
        int pixelBuffera = v69;
        size_t v85 = v69;
        int v75 = v65 + 1;
        unsigned int v86 = v75 - v84;
        unsigned int v87 = &BaseAddressOfPlane[v83 * BytesPerRowOfPlane + v84];
        signed int v168 = v84;
        uint64_t v88 = &v72[v83 * v73 + v84];
        do
        {
          memcpy(v88, v87, v85);
          v87 += BytesPerRowOfPlane;
          v88 += v73;
          --v86;
        }
        while (v86);
        signed int v63 = v168;
        int v69 = pixelBuffera;
      }
      else
      {
        int v75 = v65 + 1;
      }
      uint64_t v89 = v63 >> 1;
      if (v75 >= 0) {
        int v90 = v75;
      }
      else {
        int v90 = v75 + 1;
      }
      if ((int)v89 < v90 >> 1)
      {
        size_t v91 = v69;
        unint64_t v92 = (v90 >> 1) - (unint64_t)v89;
        double v93 = &__ba[v68 * v89 + v63];
        char v94 = &v172[v74 * v89 + v63];
        do
        {
          memcpy(v94, v93, v91);
          v93 += v68;
          v94 += v74;
          --v92;
        }
        while (v92);
      }
LABEL_176:
      uint64_t v22 = 0;
      goto LABEL_177;
    }
    long long v179 = 0u;
    uint64_t v180 = v170 << 16;
    uint64_t v181 = (void)__b << 16;
    uint64_t v182 = 0;
    int v183 = v11;
    int v184 = v12;
    CVPixelBufferGetIOSurface(pixelBuffer);
    CVPixelBufferGetIOSurface(pixelBufferOut);
    uint64_t v22 = IOSurfaceAcceleratorTransformSurface();
    goto LABEL_177;
  }
  int v49 = pixelBufferOut;
  size_t v50 = *v7;
  uint64_t v51 = *(int *)(a3 + 224);
  BOOL v53 = v51 > 1279 && v50 < 0x141;
  if (*(void *)(a2 + 40))
  {
    size_t v54 = v7[1];
    uint64_t v55 = *(int *)(a3 + 192);
    BOOL v56 = sub_1BBAF9EE0();
    BOOL v57 = v56;
    size_t v171 = v54;
    if (v56)
    {
      char v59 = (int)v51 > 4 * (int)v50 || (int)v55 > 4 * (int)v54 || v53;
      if ((v59 & 1) == 0) {
        goto LABEL_83;
      }
    }
    else if (!v53)
    {
LABEL_83:
      int v60 = CVPixelBufferGetBaseAddress(v49);
      size_t v61 = CVPixelBufferGetDataSize(v49);
      memset(v60, 128, v61);
      if (v57)
      {
        unsigned int v62 = 0;
      }
      else
      {
        sub_1BBB09958(*(void *)(a2 + 40), v51, v55, v50, v54, *(unsigned int **)(a2 + 3624));
        unsigned int v62 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(v62, (const void *)*MEMORY[0x1E4F6ED70], (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      long long v179 = 0u;
      uint64_t v180 = v51 << 16;
      uint64_t v181 = v55 << 16;
      uint64_t v182 = 0;
      int v183 = v50;
      int v184 = v54;
      CVPixelBufferGetIOSurface(pixelBuffer);
      int v95 = v49;
      CVPixelBufferGetIOSurface(v49);
      uint64_t v22 = IOSurfaceAcceleratorTransformSurface();
      if (v62) {
        CFRelease(v62);
      }
      if (v22)
      {
        CFLog();
        goto LABEL_62;
      }
      unint64_t v154 = v7;
      int v49 = v95;
      goto LABEL_120;
    }
    unint64_t v154 = v7;
    __bd = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    int v162 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    poolOutb = (CVPixelBufferPoolRef *)CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    size_t v54 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    CFAllocatorRef allocatorb = (CFAllocatorRef)CVPixelBufferGetBaseAddressOfPlane(v49, 0);
    unsigned int v77 = CVPixelBufferGetBaseAddressOfPlane(v49, 1uLL);
    size_t v78 = CVPixelBufferGetBytesPerRowOfPlane(v49, 0);
    size_t v79 = CVPixelBufferGetBytesPerRowOfPlane(v49, 1uLL);
    uint64_t v80 = v55;
    int v81 = CVPixelBufferGetBaseAddress(v49);
    size_t v82 = CVPixelBufferGetDataSize(v49);
    memset(v81, 128, v82);
    uint64_t v150 = v54;
    LODWORD(v54) = v171;
    sub_1BBB0741C((uint64_t)__bd, (uint64_t)v162, (uint64_t)allocatorb, (uint64_t)v77, (uint64_t)poolOutb, v51, v80, v78, v50, v171, v150, v79);
LABEL_120:
    __bb = (char *)CVPixelBufferGetBaseAddressOfPlane(v49, 0);
    uint64_t v96 = (char *)CVPixelBufferGetBaseAddressOfPlane(v49, 1uLL);
    size_t v97 = CVPixelBufferGetBytesPerRowOfPlane(v49, 0);
    size_t v98 = CVPixelBufferGetBytesPerRowOfPlane(v49, 1uLL);
    unint64_t v99 = v188;
    if (v188 >= 1)
    {
      uint64_t v100 = __bb;
      uint64_t v101 = v188;
      do
      {
        memset(v100, 128, v50);
        v100 += v97;
        --v101;
      }
      while (v101);
      if ((int)v99 >= 2)
      {
        unint64_t v102 = v99 >> 1;
        int v103 = v96;
        do
        {
          memset(v103, 128, v50);
          v103 += v98;
          --v102;
        }
        while (v102);
      }
    }
    uint64_t v104 = v190;
    if (v190 < (int)v54 - 1)
    {
      int v105 = ~v190 + v171;
      uint64_t v106 = &__bb[v97 + v97 * v190];
      do
      {
        memset(v106, 128, v50);
        v106 += v97;
        --v105;
      }
      while (v105);
      int v107 = v104 + 2;
      if ((int)v104 >= -1) {
        int v107 = v104 + 1;
      }
      if ((v107 >> 1) + 1 < (int)(v171 >> 1))
      {
        uint64_t v108 = ~(uint64_t)(v107 >> 1) + (v171 >> 1);
        uint64_t v109 = &v96[v98 * ((v107 >> 1) + 1)];
        do
        {
          memset(v109, 128, v50);
          v109 += v98;
          --v108;
        }
        while (v108);
      }
    }
    poolOuta = v49;
    uint64_t v163 = v96;
    size_t v110 = v187;
    if (v187 >= 1)
    {
      if ((int)v99 <= (int)v104)
      {
        uint64_t v111 = v104 - (int)v99 + 1;
        int v112 = &__bb[v97 * (int)v99];
        do
        {
          memset(v112, 128, v110);
          v112 += v97;
          --v111;
        }
        while (v111);
      }
      if ((v99 & 0x80000000) == 0) {
        int v113 = v99;
      }
      else {
        int v113 = v99 + 1;
      }
      int v114 = v113 >> 1;
      int v115 = v104 + 2;
      if ((int)v104 >= -1) {
        int v115 = v104 + 1;
      }
      if (v114 <= v115 >> 1)
      {
        uint64_t v116 = (v115 >> 1) - (uint64_t)v114 + 1;
        uint64_t v117 = &v163[v98 * v114];
        do
        {
          memset(v117, 128, v110);
          v117 += v98;
          --v116;
        }
        while (v116);
      }
    }
    uint64_t v118 = v189;
    if (v189 < (int)v50 - 1)
    {
      if ((int)v99 <= (int)v104)
      {
        uint64_t v119 = v104 - (int)v99 + 1;
        uint64_t v120 = &__bb[v189 + 1 + v97 * (int)v99];
        do
        {
          memset(v120, 128, ~v118 + (int)v50);
          v120 += v97;
          --v119;
        }
        while (v119);
      }
      if ((v99 & 0x80000000) == 0) {
        int v121 = v99;
      }
      else {
        int v121 = v99 + 1;
      }
      int v122 = v121 >> 1;
      int v123 = v104 + 2;
      if ((int)v104 >= -1) {
        int v123 = v104 + 1;
      }
      if (v122 <= v123 >> 1)
      {
        uint64_t v124 = (v123 >> 1) - (uint64_t)v122 + 1;
        uint64_t v125 = &v163[v118 + 1 + v98 * v122];
        do
        {
          memset(v125, 128, ~v118 + (int)v50);
          v125 += v98;
          --v124;
        }
        while (v124);
      }
    }
    if (a4)
    {
      CFAllocatorRef v126 = (const __CFAllocator *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      size_t v127 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      size_t v169 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v128 = (char *)CVPixelBufferGetBaseAddressOfPlane(poolOuta, 0);
      char v129 = (char *)CVPixelBufferGetBaseAddressOfPlane(poolOuta, 1uLL);
      size_t v130 = CVPixelBufferGetBytesPerRowOfPlane(poolOuta, 0);
      size_t v131 = CVPixelBufferGetBytesPerRowOfPlane(poolOuta, 1uLL);
      uint64_t v22 = 0;
      if (!v128) {
        goto LABEL_177;
      }
      size_t v132 = v169;
      if (!v129) {
        goto LABEL_177;
      }
      unsigned int v164 = v129;
      LODWORD(v133) = v154[7];
      __bc = (char *)v131;
      if (v154[6] > v171)
      {
        int v134 = v133 - v171;
        CFAllocatorRef allocatora = v126;
        if (v133 > v171)
        {
          int64_t v135 = 0;
          v136 = (char *)v126 + v127 * v171;
          unsigned int v137 = &v128[v130 * v171];
          do
          {
            memcpy(v137, v136, v154[6]);
            ++v135;
            uint64_t v133 = v154[7];
            int v134 = v133 - v171;
            v136 += v127;
            v137 += v130;
          }
          while (v135 < (uint64_t)(v133 - v171));
          size_t v132 = v169;
          size_t v131 = (size_t)__bc;
          CFAllocatorRef v126 = allocatora;
        }
        if (v134 >= 2)
        {
          uint64_t v138 = 0;
          uint64_t v139 = (char *)v126 + v132 * (v171 >> 1);
          uint64_t v140 = &v164[v131 * (v171 >> 1)];
          do
          {
            memcpy(v140, v139, v154[6]);
            ++v138;
            LODWORD(v133) = v154[7];
            int v141 = v133 - v171;
            if ((int)v133 < (int)v171) {
              ++v141;
            }
            v139 += v132;
            uint64_t v140 = &__bc[(void)v140];
          }
          while (v138 < v141 >> 1);
          CFAllocatorRef v126 = allocatora;
        }
      }
      if (v133 > v50)
      {
        unint64_t v142 = 0;
        CFAllocatorRef v143 = v126;
        unsigned int v144 = &v128[v50];
        BOOL v145 = (char *)v143 + v50;
        BOOL v146 = (char *)v143 + v50;
        do
        {
          memcpy(v144, v146, v154[6] - v50);
          ++v142;
          unint64_t v147 = v154[7];
          v146 += v127;
          v144 += v130;
        }
        while (v142 < v147);
        if (v147 >= 2)
        {
          unint64_t v148 = 0;
          BOOL v149 = &v164[v50];
          do
          {
            memcpy(v149, v145, v154[6] - v50);
            uint64_t v22 = 0;
            ++v148;
            v145 += v169;
            BOOL v149 = &__bc[(void)v149];
          }
          while (v148 < (unint64_t)v154[7] >> 1);
          goto LABEL_177;
        }
      }
    }
    goto LABEL_176;
  }
  int v76 = *(OpaqueVTPixelTransferSession **)(a2 + 48);
  if (!v76)
  {
    uint64_t v22 = 4294967246;
    goto LABEL_62;
  }
  uint64_t v22 = VTPixelTransferSessionTransferImage(v76, pixelBuffer, pixelBufferOut);
  if (!v22)
  {
LABEL_177:
    CVPixelBufferPoolRef v21 = CVPixelBufferPoolRetain(pixelBufferOut);
    goto LABEL_28;
  }
LABEL_62:
  CFLog();
LABEL_63:
  if (pixelBufferOut)
  {
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    CFRelease(pixelBufferOut);
  }
  return v22;
}

double sub_1BBB08B38(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 228);
  int v4 = *(_DWORD *)(a1 + 196);
  int v5 = *(unsigned __int16 *)(a1 + 19112);
  int v6 = *(unsigned __int16 *)(a1 + 19114);
  unsigned int v7 = *(_DWORD *)(a1 + 1384);
  unsigned int v8 = *(_DWORD *)(a1 + 1388);
  int v9 = *(_DWORD *)(a1 + 1376);
  int v10 = *(_DWORD *)(a1 + 1380);
  if (v3 >= 0) {
    int v11 = *(_DWORD *)(a1 + 228);
  }
  else {
    int v11 = v3 + 1;
  }
  int v12 = -(v11 >> 1);
  if (v4 >= 0) {
    int v13 = *(_DWORD *)(a1 + 196);
  }
  else {
    int v13 = v4 + 1;
  }
  int v14 = -(v13 >> 1);
  if (v7) {
    BOOL v15 = v8 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  BOOL v19 = v15 || v9 <= v12 || v10 <= v14 || v7 > v3 || v8 > v4;
  if (v19
    || (v3 >= 0 ? (int v20 = *(_DWORD *)(a1 + 228)) : (int v20 = v3 + 1),
        v9 >= v20 >> 1 || (v4 >= 0 ? (int v21 = *(_DWORD *)(a1 + 196)) : (int v21 = v4 + 1), v10 >= v21 >> 1)))
  {
    double result = 0.0;
    *(void *)a2 = 0;
    a2[2] = v3 - 1;
    a2[3] = v4 - 1;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v5 - 1;
    *(_DWORD *)(a3 + 12) = v6 - 1;
  }
  else
  {
    int v22 = (v20 >> 1) - (v7 >> 1) + v9;
    int v23 = (v21 >> 1) - (v8 >> 1) + v10;
    *a2 = v22;
    a2[1] = v23;
    a2[2] = v7 + v22 - 1;
    a2[3] = v8 + v23 - 1;
    int v24 = v22 * v5 / v3;
    if ((int)(v24 & 0xFFFFFFF0) <= 16) {
      unsigned int v25 = 16;
    }
    else {
      unsigned int v25 = v24 & 0xFFFFFFF0;
    }
    unsigned int v26 = v25 - 16;
    if ((v24 & 0xC) != 0) {
      unsigned int v27 = v24 & 0xFFFFFFF0;
    }
    else {
      unsigned int v27 = v26;
    }
    *(_DWORD *)a3 = v27;
    int v28 = a2[1] * v6 / v4;
    if ((int)(v28 & 0xFFFFFFF0) <= 16) {
      unsigned int v29 = 16;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFF0;
    }
    unsigned int v30 = v29 - 16;
    if ((v28 & 0xC) != 0) {
      unsigned int v31 = v28 & 0xFFFFFFF0;
    }
    else {
      unsigned int v31 = v30;
    }
    *(_DWORD *)(a3 + 4) = v31;
    int v32 = v3 - 1;
    int v33 = (v3 - 1 + a2[2] * v5) / v3;
    int v34 = v5 - 1;
    if ((v33 | 0xF) - v33 <= 3) {
      int v35 = (v33 | 0xF) + 16;
    }
    else {
      int v35 = v33 | 0xF;
    }
    if (v34 < v35) {
      int v35 = v34;
    }
    *(_DWORD *)(a3 + 8) = v35;
    int v36 = (v4 - 1 + a2[3] * v6) / v4;
    int v37 = v6 - 1;
    if ((v36 | 0xF) - v36 <= 3) {
      int v38 = (v36 | 0xF) + 16;
    }
    else {
      int v38 = v36 | 0xF;
    }
    if (v37 < v38) {
      int v38 = v37;
    }
    *(_DWORD *)(a3 + 12) = v38;
    int v39 = *a2;
    if (*a2 < 0
      || v39 >= v3
      || (int v40 = a2[1], v40 < 0)
      || v40 >= v4
      || (int v41 = a2[2], v41 < v39)
      || v41 >= v3
      || (int v42 = a2[3], v42 < v40)
      || v42 >= v4)
    {
      double result = 0.0;
      *(void *)a2 = 0;
      a2[2] = v32;
      a2[3] = v4 - 1;
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = v34;
      *(_DWORD *)(a3 + 12) = v37;
    }
  }
  return result;
}

float sub_1BBB08D24(uint64_t a1, uint64_t a2)
{
  int v3 = *(_WORD **)(a1 + 3408);
  int v4 = *(unsigned __int16 *)(a2 + 19112);
  unsigned int v5 = (v4 + 15) >> 4;
  unint64_t v6 = ((unint64_t)*(unsigned __int16 *)(a2 + 19114) + 15) >> 4;
  int32x4_t v7 = 0uLL;
  if (*(_WORD *)(a2 + 19114))
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 3496);
    uint64_t v10 = *(void *)(a1 + 3504);
    unsigned int v11 = (v5 + 7) >> 3;
    unsigned int v12 = v11 - 1;
    int v13 = *(_DWORD *)(a1 + 3416);
    unsigned int v14 = v5 - 8 * (v11 - 1);
    uint64_t v15 = 16 * v10;
    uint64_t v16 = 2 * v10;
    if (v11 <= 1) {
      unsigned int v11 = 1;
    }
    while (!v4)
    {
LABEL_23:
      if (++v8 == v6) {
        goto LABEL_24;
      }
    }
    int v17 = 0;
    BOOL v18 = (int8x16_t *)&v3[(v13 * v8) + 8];
    uint64_t v19 = v9 + v15 * v8;
    while (1)
    {
      int32x4_t v20 = 0uLL;
      if (v17 == v12) {
        unint64_t v21 = v14;
      }
      else {
        unint64_t v21 = 8;
      }
      if (v21)
      {
        for (unint64_t i = 0; i < v21; i += 2)
        {
          int v23 = (const char *)(v19 + ((16 * i) & 0xFFFFFFE0));
          int8x16_t v24 = 0uLL;
          int8x16_t v25 = 0uLL;
          int v26 = 4;
          do
          {
            unsigned long long v28 = (unsigned __int128)vld2q_s8(v23);
            unsigned int v27 = &v23[v16];
            unsigned long long v29 = (unsigned __int128)vld2q_s8(v27);
            int v23 = &v27[v16];
            int8x16_t v30 = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v28), (uint8x16_t)v29);
            *(uint8x8_t *)v30.i8 = vqrshrn_n_u16((uint16x8_t)v30, 2uLL);
            uint8x16_t v31 = (uint8x16_t)vzip1q_s8(v30, v30);
            int8x16_t v24 = (int8x16_t)vabal_u8(vabal_u8((uint16x8_t)v24, *(uint8x8_t *)v31.i8, *(uint8x8_t *)&v28), *(uint8x8_t *)v31.i8, *(uint8x8_t *)&v29);
            int8x16_t v25 = (int8x16_t)vabal_high_u8(vabal_high_u8((uint16x8_t)v25, v31, (uint8x16_t)v28), v31, (uint8x16_t)v29);
            --v26;
          }
          while (v26);
          if ((int)v21 - (int)i <= 1) {
            unsigned int v32 = 0;
          }
          else {
            unsigned int v32 = -1;
          }
          int8x16_t v33 = vandq_s8(v25, (int8x16_t)vdupq_n_s16(v32));
          v24.i32[0] = vaddlvq_u16((uint16x8_t)v24);
          v33.i32[0] = vaddlvq_u16((uint16x8_t)v33);
          int32x4_t v20 = (int32x4_t)vextq_s8((int8x16_t)v20, v24, 4uLL);
          int32x4_t v2 = (int32x4_t)vextq_s8((int8x16_t)v2, v33, 4uLL);
        }
        if (i >= 8) {
          goto LABEL_22;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      unsigned int v34 = i - 2;
      do
      {
        int32x4_t v20 = (int32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)0, 4uLL);
        int32x4_t v2 = (int32x4_t)vextq_s8((int8x16_t)v2, (int8x16_t)0, 4uLL);
        v34 += 2;
      }
      while (v34 < 6);
LABEL_22:
      int32x4_t v7 = vaddq_s32(vaddq_s32(v7, v20), v2);
      *v18++ = vorrq_s8((int8x16_t)vcvtq_n_u32_f32(vsqrtq_f32(vcvtq_n_f32_u32((uint32x4_t)v20, 0x20uLL)), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vcvtq_n_u32_f32(vsqrtq_f32(vcvtq_n_f32_u32((uint32x4_t)v2, 0x20uLL)), 0x18uLL), 0x10uLL));
      v19 += 128;
      if (++v17 == v11) {
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  float result = COERCE_FLOAT(vcvts_n_u32_f32(sqrtf(vcvts_n_f32_u32(vaddvq_s32(v7), 0x20uLL)/ vcvts_n_f32_u32(vdupq_n_s32(v6 * v5).u32[0], 0x20uLL)), 8uLL));
  *int v3 = LOWORD(result);
  *(_DWORD *)(a2 + 1268) = **(unsigned __int16 **)(a1 + 3408);
  return result;
}

unint64_t sub_1BBB08EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2 + 19416;
  memset(v24, 0, sizeof(v24));
  unint64_t v6 = (void *)(a2 + 19432);
  *(_OWORD *)(a2 + 19432) = 0u;
  *(_DWORD *)(a2 + 19424) = 1;
  *(_WORD *)(a2 + 19416) = 0;
  unint64_t result = sub_1BBB0A818(a1, v24, 0, (unsigned char *)a2);
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v8 = *(void *)(a3 + 22824);
    uint64_t v9 = *(unsigned int *)(v8 + 12);
    if ((int)v9 < 1) {
      goto LABEL_20;
    }
    uint64_t v10 = 0;
    uint64_t v11 = v8 + 216;
    int v12 = -2147483647;
    int v13 = -1;
    do
    {
      uint64_t v14 = *(void *)(v11 + 8 * v10);
      if (!v14) {
        break;
      }
      if (*(unsigned char *)(v14 + 1394) && *(unsigned char *)(v14 + 1398) && *(unsigned char *)(v14 + 1356) && !*(unsigned char *)(v14 + 14))
      {
        int v15 = *(_DWORD *)(v14 + 1276);
        if (*(unsigned char *)(v14 + 25)) {
          BOOL v16 = v15 < *(_DWORD *)(a2 + 1276);
        }
        else {
          BOOL v16 = 0;
        }
        char v17 = v16;
        if ((v17 & (v15 > v12)) != 0)
        {
          int v12 = v15;
          int v13 = v10;
        }
      }
      ++v10;
    }
    while (v9 != v10);
    if (v13 == -1 || (uint64_t v18 = *(void *)(v11 + 8 * v13)) == 0)
    {
LABEL_20:
      uint64_t v18 = 0;
      *(unsigned char *)(v5 + 1) = 1;
    }
    goto LABEL_32;
  }
  if (result)
  {
    uint64_t v19 = 0;
    int v20 = 0;
    unsigned int v21 = 0;
    int v22 = 0;
    do
    {
      uint64_t v23 = *((void *)v24 + v19);
      if (v20 && v21 >= *(_DWORD *)(v23 + 1276))
      {
        int v20 = 1;
      }
      else if (v23 != a2 && *(unsigned char *)(v23 + 32))
      {
        unsigned int v21 = *(_DWORD *)(v23 + 1276);
        int v20 = 1;
        int v22 = v19;
      }
      ++v19;
    }
    while (result != v19);
    if (v20)
    {
      uint64_t v18 = *((void *)v24 + v22);
LABEL_32:
      *unint64_t v6 = v18;
    }
  }
  *(_DWORD *)(v5 + 4) = result;
  return result;
}

void sub_1BBB090A8(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

CFNumberRef sub_1BBB09110(const __CFDictionary *a1, const void *a2)
{
  unsigned int valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

CFNumberRef sub_1BBB09148(const __CFDictionary *a1, const void *a2)
{
  uint64_t valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t sub_1BBB09180(uint64_t a1, int a2, int a3)
{
  *(_WORD *)(a1 + 2) = a2;
  *(_WORD *)a1 = a3;
  int v4 = a3 * a2;
  *(_DWORD *)(a1 + 4) = a3 * a2;
  memset_pattern16((void *)(a1 + 24), &unk_1BBB70210, 0x800uLL);
  memset_pattern16((void *)(a1 + 1032), &unk_1BBB70220, 0x1CuLL);
  *(_DWORD *)(a1 + 1020) = 3;
  *(void *)(a1 + 1024) = 0x300000003;
  *(_DWORD *)(a1 + 1060) = 3;
  *(void *)(a1 + 1064) = 0x300000003;
  *(_DWORD *)(a1 + 1044) = 0;
  memset_pattern16((void *)(a1 + 2072), &unk_1BBB70230, 0x50uLL);
  memset_pattern16((void *)(a1 + 2152), &unk_1BBB70220, 0xB0uLL);
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(void *)(a1 + 2504) = 0;
  memset_pattern16((void *)(a1 + 2512), &unk_1BBB70220, 0x1E8uLL);
  memset_pattern16((void *)(a1 + 3000), &unk_1BBB70230, 0x5CuLL);
  CFNumberRef v5 = malloc_type_malloc(16 * v4, 0x82ECD37AuLL);
  *(void *)(a1 + 8) = v5;
  CFNumberRef v6 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
  *(void *)(a1 + 16) = v6;
  if (v5) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v6) {
    uint64_t v8 = v5 == 0;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8)
  {
    free(*(void **)(a1 + 8));
    *(void *)(a1 + 8) = 0;
    free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
  return v8;
}

void sub_1BBB092D4(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  mach_port_t v2 = *MEMORY[0x1E4F2EF00];
  CFDictionaryRef v3 = IOServiceMatching("AppleM2ScalerCSCDriver");
  io_service_t MatchingService = IOServiceGetMatchingService(v2, v3);
  if (MatchingService)
  {
    CFDictionaryRef v5 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      uint64_t v7 = 0;
      uint64_t v8 = (CFStringRef *)off_1E6248BD8;
      while (1)
      {
        CFStringRef v9 = *v8;
        CFStringGetCString(*v8, buffer, 256, 0x600u);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, v9);
        if (!Value) {
          break;
        }
        CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&v61 + v7);
        v7 += 4;
        ++v8;
        if (v7 == 24)
        {
          __int32 v11 = v61;
          *(_DWORD *)(a1 + 4) = v61;
          v12.i64[0] = v62;
          *(void *)(a1 + 8) = v62;
          unsigned int v13 = v63;
          *(_DWORD *)(a1 + 16) = v63;
          uint64_t v14 = v64;
          *(void *)(a1 + 20) = v64;
          if (v12.i32[0] == 4)
          {
            if (v13 == 16
              && v11 == 8
              && (v12.i32[1] == 16 ? (BOOL v15 = v14 == 2) : (BOOL v15 = 0),
                  v15 ? (BOOL v16 = HIDWORD(v14) == 7) : (BOOL v16 = 0),
                  v16))
            {
              *(unsigned char *)a1 = 1;
            }
            else
            {
              *(unsigned char *)a1 = 0;
              v12.i32[0] = v11;
              v12.i64[1] = v14;
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v12))) & 1) != 0 || !v13) {
                break;
              }
            }
          }
          else
          {
            *(unsigned char *)a1 = 0;
            if (!v12.i32[0]) {
              break;
            }
            v17.i64[1] = v14;
            v17.i64[0] = __PAIR64__(v12.u32[1], v13);
            if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqzq_s32(v17), (int8x16_t)xmmword_1BBB6FDA0)) & 0xF) != 0
              || v11 == 0)
            {
              break;
            }
          }
          uint64_t v19 = 32;
          while (1)
          {
            int v20 = malloc_type_malloc(4* (2* (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 8)+ *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 4))), 0x100004052888210uLL);
            *(void *)(a1 + v19) = v20;
            if (!v20) {
              goto LABEL_59;
            }
            v19 += 8;
            if (v19 == 88)
            {
              if (*(_DWORD *)(a1 + 28) == 7)
              {
                uint64_t v22 = *(unsigned int *)(a1 + 4);
                uint64_t v21 = *(unsigned int *)(a1 + 8);
                uint64_t v24 = *(unsigned int *)(a1 + 12);
                uint64_t v23 = *(unsigned int *)(a1 + 16);
                if (*(unsigned char *)a1)
                {
                  uint64_t v25 = 0;
                  int v26 = &dword_1BBB85F44;
                  unsigned int v27 = &dword_1BBB86444;
                  unsigned long long v28 = &dword_1BBB86144;
                  unsigned long long v29 = &dword_1BBB86244;
                  do
                  {
                    int8x16_t v30 = *(int **)(a1 + 8 * v25 + 32);
                    if (v21)
                    {
                      uint64_t v31 = 0;
                      unsigned int v32 = v27;
                      do
                      {
                        if (v23)
                        {
                          int8x16_t v33 = v32;
                          uint64_t v34 = v23;
                          do
                          {
                            int v35 = *v33;
                            v33 += 4;
                            *v30++ = v35;
                            --v34;
                          }
                          while (v34);
                        }
                        ++v31;
                        ++v32;
                      }
                      while (v31 != v21);
                      uint64_t v36 = 0;
                      int v37 = v28;
                      do
                      {
                        if (v23)
                        {
                          int v38 = v37;
                          uint64_t v39 = v23;
                          do
                          {
                            int v40 = *v38;
                            v38 += 4;
                            *v30++ = v40;
                            --v39;
                          }
                          while (v39);
                        }
                        ++v36;
                        ++v37;
                      }
                      while (v36 != v21);
                    }
                    if (v22)
                    {
                      uint64_t v41 = 0;
                      int v42 = v29;
                      do
                      {
                        if (v24)
                        {
                          CFNumberRef v43 = v42;
                          uint64_t v44 = v24;
                          do
                          {
                            int v45 = *v43;
                            v43 += 8;
                            *v30++ = v45;
                            --v44;
                          }
                          while (v44);
                        }
                        ++v41;
                        ++v42;
                      }
                      while (v41 != v22);
                      uint64_t v46 = 0;
                      int v47 = v26;
                      do
                      {
                        if (v24)
                        {
                          uint64_t v48 = v47;
                          uint64_t v49 = v24;
                          do
                          {
                            int v50 = *v48;
                            v48 += 8;
                            *v30++ = v50;
                            --v49;
                          }
                          while (v49);
                        }
                        ++v46;
                        ++v47;
                      }
                      while (v46 != v22);
                    }
                    ++v25;
                    v27 += 385;
                    v28 += 385;
                    v29 += 385;
                    v26 += 385;
                  }
                  while (v25 != 7);
                }
                else
                {
                  uint64_t v51 = 0;
                  int v52 = *(_DWORD *)(a1 + 20);
                  int v53 = *(_DWORD *)(a1 + 24);
                  uint64_t v54 = (v23 * v21);
                  uint64_t v59 = a1 + 32;
                  do
                  {
                    uint64_t v55 = *(_DWORD **)(v59 + 8 * v51);
                    double v56 = flt_1BBB8895C[v51];
                    sub_1BBB096F0(v21, v23, v52, v53, v55, v56);
                    BOOL v57 = &v55[v54];
                    sub_1BBB096F0(v21, v23, v52, v53, v57, v56);
                    char v58 = &v57[v54];
                    sub_1BBB096F0(v22, v24, v52, v53, v58, v56);
                    sub_1BBB096F0(v22, v24, v52, v53, &v58[(v24 * v22)], v56);
                    ++v51;
                  }
                  while (v51 != 7);
                }
              }
              goto LABEL_59;
            }
          }
        }
      }
LABEL_59:
      CFRelease(v6);
    }
  }
}

void sub_1BBB096F0(int a1, int a2, char a3, char a4, _DWORD *a5, double a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a6 <= 1.0) {
    double v6 = a6;
  }
  else {
    double v6 = 1.0;
  }
  int v7 = a1 - 1;
  if (a1 < 1) {
    int v7 = a1;
  }
  if (a2 >= 1)
  {
    uint64_t v8 = a5;
    uint64_t v9 = 0;
    int v10 = v7 >> 1;
    int v11 = vcvtmd_s64_f64(v6 * (double)v10);
    double v35 = (double)a2;
    double v12 = (double)v11;
    double v13 = (double)-v11;
    uint64_t v14 = ~(-1 << (a4 + a3));
    BOOL v15 = &a5[v10 * a2];
    int v37 = 1 << a4;
    uint64_t v36 = a2;
    int v33 = -v10;
    unint64_t v16 = (unint64_t)a1 << 8;
    uint64_t v17 = 4 * a2;
    uint64_t v18 = (double *)&v40;
    double v19 = 0.5;
    double v34 = (double)(unint64_t)(1 << a4);
    do
    {
      if (a1 < 1)
      {
        int v30 = 0;
      }
      else
      {
        double v20 = (double)(int)v9 / v35;
        if (v20 >= v19) {
          double v21 = v20 + -1.0;
        }
        else {
          double v21 = (double)(int)v9 / v35;
        }
        double v22 = 0.0;
        int v23 = v33;
        uint64_t v24 = v18;
        uint64_t v25 = a1;
        do
        {
          double v26 = v6 * ((double)v23 - v21);
          BOOL v27 = v26 < v12 && v26 > v13;
          double v28 = 0.0;
          if (v27)
          {
            if (v26 == 0.0)
            {
              double v28 = 1.0;
            }
            else
            {
              long double v39 = sin(v26 * 3.14159265) / (v26 * 3.14159265);
              double v28 = v39 * (sin(v26 / v12 * 3.14159265) / (v26 / v12 * 3.14159265));
            }
          }
          *uint64_t v24 = v28;
          double v22 = v22 + v28;
          v24 += 32;
          ++v23;
          --v25;
        }
        while (v25);
        unint64_t v29 = 0;
        int v30 = 0;
        uint64_t v31 = v8;
        double v19 = 0.5;
        do
        {
          double v32 = v18[v29 / 8] / v22 * v34 + 0.5;
          *uint64_t v31 = (int)v32 & v14;
          v30 += (int)v32;
          v29 += 256;
          uint64_t v31 = (_DWORD *)((char *)v31 + v17);
        }
        while (v16 != v29);
      }
      v15[v9++] += v37 - v30;
      ++v18;
      ++v8;
    }
    while (v9 != v36);
  }
}

uint64_t sub_1BBB09958(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, unsigned int *a6)
{
  unsigned int v6 = (a2 << 16) / a4;
  if (v6 > 0x10000)
  {
    if (v6 >= 0x12493)
    {
      if (v6 >= 0x15556)
      {
        if (v6 >= 0x1999A)
        {
          if (v6 > 0x20000)
          {
            BOOL v8 = v6 >= 0x2AAAB;
            uint64_t v7 = 5;
            if (v8) {
              uint64_t v7 = 6;
            }
          }
          else
          {
            uint64_t v7 = 4;
          }
        }
        else
        {
          uint64_t v7 = 3;
        }
      }
      else
      {
        uint64_t v7 = 2;
      }
    }
    else
    {
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return MEMORY[0x1F4124C68](a1, (a5 << 15) / a3, a6[2], a6[4], (a4 << 15) / a2, a6[1], a6[3], *(void *)&a6[2 * v7 + 8]);
}

uint64_t sub_1BBB09A10(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  mach_port_t v2 = *(CVPixelBufferPoolRef **)(a1 + 232);
  if (!v2)
  {
    mach_port_t v2 = (CVPixelBufferPoolRef *)malloc_type_calloc(0x38uLL, 1uLL, 0x4AE20AB7uLL);
    *(void *)(a1 + 232) = v2;
    if (!v2) {
      return 4294943590;
    }
  }
  CFDictionaryRef v3 = *(char **)(a1 + 22328);
  int v4 = (_DWORD *)(a1 + 22304);
  CFDictionaryRef v5 = *(char **)(a1 + 22336);
  uint64_t v6 = *(int *)(a1 + 22304);
  long long v32 = *(_OWORD *)(a1 + 22344);
  uint64_t v31 = *(void *)(a1 + 22312);
  int v8 = *(_DWORD *)(a1 + 22368);
  int v7 = *(_DWORD *)(a1 + 22372);
  int v9 = v4[18];
  int v10 = v4[19];
  int v11 = v4[20];
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v12 = sub_1BBB09CAC((uint64_t)v2, v8, v7, v9, v10, v11);
  if (!v12)
  {
    uint64_t v13 = CVPixelBufferPoolCreatePixelBuffer(0, v2[2], &pixelBufferOut);
    CVPixelBufferRef v14 = pixelBufferOut;
    if (!v13)
    {
      uint64_t v13 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
      CVPixelBufferRef v14 = pixelBufferOut;
      if (!v13)
      {
        int v26 = v11;
        int v27 = v10;
        signed int v28 = v9;
        size_t v15 = v8;
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
        uint64_t v17 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
        size_t v29 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 1uLL);
        if (BytesPerRowOfPlane != v6) {
          goto LABEL_28;
        }
        if (BytesPerRowOfPlane <= v15 + 64)
        {
          memcpy(BaseAddressOfPlane, v3, BytesPerRowOfPlane * v7);
        }
        else
        {
LABEL_28:
          if (v7 >= 1)
          {
            int v19 = v7;
            do
            {
              memcpy(BaseAddressOfPlane, v3, v15);
              BaseAddressOfPlane += BytesPerRowOfPlane;
              v3 += v6;
              --v19;
            }
            while (v19);
          }
        }
        int v20 = v7 >> 1;
        size_t v21 = v15;
        if (v29 == v6 && v29 <= v15 + 64)
        {
          memcpy(v17, v5, v29 * v20);
          int v23 = v27;
          signed int v22 = v28;
          int v24 = v26;
        }
        else
        {
          int v23 = v27;
          signed int v22 = v28;
          int v24 = v26;
          if (v7 >= 2)
          {
            do
            {
              memcpy(v17, v5, v21);
              v17 += v29;
              v5 += v6;
              --v20;
            }
            while (v20);
          }
        }
        uint64_t v13 = CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
        CVPixelBufferRef v14 = pixelBufferOut;
        if (!v13)
        {
          uint64_t v12 = sub_1BBB09E1C((uint64_t)v2, pixelBufferOut, (char **)&v32, (unsigned int *)&v31, v21, v7, v22, v23, v24);
          CVPixelBufferRef v14 = pixelBufferOut;
          if (!pixelBufferOut) {
            return v12;
          }
          goto LABEL_22;
        }
      }
    }
    uint64_t v12 = v13;
    if (v14) {
LABEL_22:
    }
      CFRelease(v14);
  }
  return v12;
}

uint64_t sub_1BBB09CAC(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  if (*(void *)a1 && *(_DWORD *)(a1 + 8) == a4 && *(_DWORD *)(a1 + 12) == a5
    || (uint64_t result = sub_1BBB0A094((CVPixelBufferPoolRef *)a1, a4, a5), !result))
  {
    if ((uint64_t v13 = *(void *)(a1 + 16), *(_DWORD *)(a1 + 8) = a4, *(_DWORD *)(a1 + 12) = a5, v13)
      && *(_DWORD *)(a1 + 24) == a2
      && *(_DWORD *)(a1 + 28) == a3
      || (uint64_t result = sub_1BBB0A094((CVPixelBufferPoolRef *)(a1 + 16), a2, a3), !result))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 24) = a2;
      *(_DWORD *)(a1 + 28) = a3;
      if (v14 || (uint64_t result = IOSurfaceAcceleratorCreate(), !result))
      {
        if (a6 != 11 && !*(void *)(a1 + 48))
        {
          size_t v15 = malloc_type_malloc(0x58uLL, 0x1010040AFB8C972uLL);
          *(void *)(a1 + 48) = v15;
          v15[7] = a6;
          sub_1BBB092D4(*(void *)(a1 + 48));
        }
        if (*(void *)(a1 + 40)) {
          return 0;
        }
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(a1 + 40) = Mutable;
        if (Mutable)
        {
          uint64_t v17 = (const void **)MEMORY[0x1E4F1CFD0];
          if (a6 == 11) {
            uint64_t v17 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6ED70], *v17);
          return 0;
        }
        return 4294943590;
      }
    }
  }
  return result;
}

uint64_t sub_1BBB09E1C(uint64_t a1, __CVBuffer *a2, char **a3, unsigned int *a4, unsigned int a5, unsigned int a6, signed int a7, int a8, int a9)
{
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v17 = sub_1BBB09CAC(a1, a5, a6, a7, a8, a9);
  if (!v17)
  {
    uint64_t v17 = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)a1, &pixelBufferOut);
    if (!v17)
    {
      if (a9 != 11) {
        sub_1BBB09958(*(void *)(a1 + 32), a5, a6, a7, a8, *(unsigned int **)(a1 + 48));
      }
      CVPixelBufferGetIOSurface(a2);
      CVPixelBufferGetIOSurface(pixelBufferOut);
      uint64_t v17 = IOSurfaceAcceleratorTransformSurface();
      if (!v17)
      {
        uint64_t v17 = CVPixelBufferLockBaseAddress(pixelBufferOut, 1uLL);
        if (!v17)
        {
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
          int v19 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
          size_t v30 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 1uLL);
          size_t v21 = *a3;
          unsigned int v22 = *a4;
          if (BytesPerRowOfPlane == *a4 && a7 + 64 >= v22)
          {
            memcpy(v21, BaseAddressOfPlane, BytesPerRowOfPlane * a8);
          }
          else if (a8 >= 1)
          {
            uint64_t v31 = (int)v22;
            int v23 = a8;
            do
            {
              memcpy(v21, BaseAddressOfPlane, a7);
              v21 += v31;
              BaseAddressOfPlane += BytesPerRowOfPlane;
              --v23;
            }
            while (v23);
          }
          int v24 = a3[1];
          unsigned int v25 = a4[1];
          int v26 = a8 >> 1;
          if (v30 == v25 && a7 + 64 >= v25)
          {
            memcpy(v24, v19, v30 * v26);
          }
          else if (a8 >= 2)
          {
            uint64_t v28 = (int)v25;
            do
            {
              memcpy(v24, v19, a7);
              v24 += v28;
              v19 += v30;
              --v26;
            }
            while (v26);
          }
          uint64_t v17 = CVPixelBufferUnlockBaseAddress(pixelBufferOut, 1uLL);
        }
      }
    }
    if (pixelBufferOut) {
      CFRelease(pixelBufferOut);
    }
  }
  return v17;
}

uint64_t sub_1BBB0A094(CVPixelBufferPoolRef *a1, int a2, int a3)
{
  CVPixelBufferPoolRef v6 = *a1;
  if (v6)
  {
    CFRelease(v6);
    *a1 = 0;
  }
  int v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(0, 0, v7, v8);
  int v11 = v10;
  if (Mutable) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    sub_1BBAF18DC(Mutable, (const void *)*MEMORY[0x1E4F24D90], 1);
    sub_1BBAF18DC(v11, (const void *)*MEMORY[0x1E4F24D70], 875704438);
    sub_1BBAF18DC(v11, (const void *)*MEMORY[0x1E4F24E10], a2);
    sub_1BBAF18DC(v11, (const void *)*MEMORY[0x1E4F24D08], a3);
    size_t v15 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v15)
    {
      unint64_t v16 = v15;
      sub_1BBAF18DC(v15, (const void *)*MEMORY[0x1E4F2EFE8], 1024);
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F24D20], v16);
      CFRelease(v16);
      sub_1BBAF18DC(v11, (const void *)*MEMORY[0x1E4F24D78], 64);
      sub_1BBAF18DC(v11, (const void *)*MEMORY[0x1E4F24C98], 16);
    }
    uint64_t v13 = CVPixelBufferPoolCreate(0, Mutable, v11, a1);
LABEL_15:
    CFRelease(v11);
    if (!Mutable) {
      return v13;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 4294943590;
  if (v10) {
    goto LABEL_15;
  }
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
  return v13;
}

void sub_1BBB0A254(char *a1)
{
  for (uint64_t i = 32; i != 88; i += 8)
    free(*(void **)&a1[i]);

  free(a1);
}

uint64_t sub_1BBB0A2A0(uint64_t *a1, int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  BOOL v12 = malloc_type_malloc(0x4C00uLL, 0x4CF1F002uLL);
  uint64_t v13 = (uint64_t)v12;
  if (!v12)
  {
    uint64_t v15 = 4294967188;
LABEL_8:
    sub_1BBB0A5CC(v13);
    uint64_t v13 = 0;
    goto LABEL_9;
  }
  bzero(v12, 0x4C00uLL);
  *(void *)(v13 + 72) = sub_1BBAF9CE4();
  uint64_t v14 = sub_1BBAF9D48();
  *(void *)(v13 + 80) = v14;
  uint64_t v15 = 4294967188;
  if (!*(void *)(v13 + 72) || !v14) {
    goto LABEL_8;
  }
  *(_DWORD *)uint64_t v13 = 0;
  *(void *)(v13 + 12) = 0;
  *(void *)(v13 + 19) = 0;
  *(_DWORD *)(v13 + 28) = 150;
  *(unsigned char *)(v13 + 4) = 1;
  *(_DWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 64) = -1;
  *(_DWORD *)(v13 + 40) = 0;
  *(void *)(v13 + 56) = -1;
  if (a4 != 2)
  {
    uint64_t v15 = sub_1BBB56140(a2, a3, v13 + 96, a4, a7);
    if (!v15)
    {
      unsigned int v17 = (-a2 & 0xF) + a2 + 15;
      *(_DWORD *)(v13 + 1168) = v17 >> 4;
      *(_DWORD *)(v13 + 1164) = ((((-a3 & 0xF) + a3 + 15) >> 4) * (v17 >> 4)) << ((a4 - 3) < 2);
      operator new[]();
    }
    goto LABEL_8;
  }
  *(unsigned char *)uint64_t v13 = 1;
  uint64_t v15 = 0;
  *(_DWORD *)(v13 + 19120) = 0;
  *(_WORD *)(v13 + 19128) = 0;
  *(_DWORD *)(v13 + 18980) = 0;
LABEL_9:
  *a1 = v13;
  return v15;
}

void sub_1BBB0A5CC(uint64_t a1)
{
  if (a1)
  {
    mach_port_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 72));
      free(v2);
    }
    CFDictionaryRef v3 = *(void **)(a1 + 80);
    if (v3)
    {
      pthread_cond_destroy(*(pthread_cond_t **)(a1 + 80));
      free(v3);
    }
    sub_1BBB56558(a1 + 96);
    uint64_t v4 = *(void *)(a1 + 1256);
    if (v4)
    {
      MEMORY[0x1C18605A0](v4, 0x20C8093837F09);
      *(void *)(a1 + 1256) = 0;
    }
    if (*(void *)(a1 + 1152))
    {
      if (!*(_DWORD *)(a1 + 1160)) {
        goto LABEL_15;
      }
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(a1 + 1152);
        uint64_t v7 = *(void *)(v6 + 8 * v5);
        if (v7)
        {
          sub_1BBB0F058(*(void *)v7, v7 + 16, *(_DWORD *)(v7 + 2064));
          *(void *)(v7 + 2064) = 0;
          MEMORY[0x1C18605E0](v7, 0x1020C40B61593EFLL);
          uint64_t v6 = *(void *)(a1 + 1152);
        }
        *(void *)(v6 + 8 * v5++) = 0;
      }
      while (v5 < *(unsigned int *)(a1 + 1160));
      if (*(void *)(a1 + 1152)) {
LABEL_15:
      }
        MEMORY[0x1C18605A0]();
      *(void *)(a1 + 1152) = 0;
    }
    sub_1BBB025F4((void **)(a1 + 4560));
    int v8 = *(void **)(a1 + 4768);
    if (v8)
    {
      free(v8);
      *(void *)(a1 + 4768) = 0;
    }
    sub_1BBB15BB8(a1 + 4800);
    *(_OWORD *)(a1 + 1392) = 0u;
    *(_OWORD *)(a1 + 1376) = 0u;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    *(_OWORD *)(a1 + 1280) = 0u;
    *(_OWORD *)(a1 + 1264) = 0u;
    free(*(void **)(a1 + 1472));
    *(void *)(a1 + 1472) = 0;
    free(*(void **)(a1 + 1480));
    *(void *)(a1 + 1480) = 0;
    int v9 = *(void **)(a1 + 5016);
    if (v9) {
      free(v9);
    }
    CFMutableDictionaryRef v10 = *(void **)(a1 + 1424);
    if (v10)
    {
      free(v10);
      *(void *)(a1 + 1424) = 0;
    }
    int v11 = *(void **)(a1 + 1432);
    if (v11)
    {
      free(v11);
      *(void *)(a1 + 1432) = 0;
    }
    BOOL v12 = *(void **)(a1 + 1440);
    if (v12)
    {
      free(v12);
      *(void *)(a1 + 1440) = 0;
    }
    uint64_t v13 = *(void **)(a1 + 1448);
    if (v13)
    {
      free(v13);
      *(void *)(a1 + 1448) = 0;
    }
    uint64_t v14 = *(void **)(a1 + 1456);
    if (v14) {
      free(v14);
    }
    free((void *)a1);
  }
}

uint64_t sub_1BBB0A7C0(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 48) - 1);
  if ((int)v1 < 0) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  do
  {
    unint64_t v5 = *(unsigned char **)(v4 + 8 * v1);
    if (v5 && (v5[1394] || v5[1356]))
    {
      if (v5[2]) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
    BOOL v6 = v1-- < 1;
  }
  while (!v6 && result < 0x10);
  return result;
}

unint64_t sub_1BBB0A818(uint64_t a1, _OWORD *a2, int a3, unsigned char *a4)
{
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = (v4 - 1);
  if (v4 - 1 < 0) {
    return 0;
  }
  unint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(unsigned char **)(*(void *)(a1 + 40) + 8 * v5);
    if (v7) {
      BOOL v8 = v7 == a4;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && (v7[1394] || v7[1356]) && v7[2])
    {
      if (a3) {
        v7[23] = -1;
      }
      *((void *)a2 + v6++) = v7;
    }
    BOOL v9 = v5-- < 1;
  }
  while (!v9 && v6 < 0x10);
  return v6;
}

uint64_t sub_1BBB0A89C(uint64_t a1, _OWORD *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = (v3 - 1);
  if (v3 - 1 < 0) {
    return 0;
  }
  LOBYTE(v6) = 0;
  unsigned int v7 = 0;
  uint64_t result = 0;
  do
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * v4);
    if (v9 && (*(unsigned char *)(v9 + 1394) || *(unsigned char *)(v9 + 1356)) && *(unsigned char *)(v9 + 2) && *(unsigned char *)(v9 + 32))
    {
      *((void *)a2 + result) = v9;
      uint64_t result = (result + 1);
      unsigned int v10 = *(_DWORD *)(v9 + 1276);
      int v11 = *(unsigned __int8 *)(v9 + 1356);
      if (v7 <= v10) {
        unsigned int v12 = v10;
      }
      else {
        unsigned int v12 = v7;
      }
      if (!v11) {
        unsigned int v7 = v12;
      }
      unsigned int v13 = v6;
      if ((_BYTE)v6)
      {
        uint64_t v14 = 0;
        while (v23[v14] >= v10)
        {
          if (v6 == ++v14)
          {
            if (v6 < 4u) {
              goto LABEL_28;
            }
            goto LABEL_29;
          }
        }
      }
      else
      {
        LODWORD(v14) = 0;
      }
      if (v6 >= 3u) {
        unsigned int v13 = 3;
      }
      if (v13 > v14)
      {
        int v6 = v6;
        if (v6 >= 3u) {
          int v6 = 3;
        }
        uint64_t v15 = &v23[v6];
        unint64_t v16 = &v23[v13 - 1];
        unsigned int v17 = v13;
        do
        {
          --v17;
          int v18 = *v16--;
          *v15-- = v18;
        }
        while (v17 > v14);
      }
      LOBYTE(v6) = v13;
      unsigned int v13 = v14;
LABEL_28:
      LOBYTE(v6) = v6 + 1;
      v23[v13] = v10;
    }
LABEL_29:
    BOOL v19 = v4-- < 1;
  }
  while (!v19 && result < 0x10);
  if (!a3 && result)
  {
    uint64_t v20 = result;
    size_t v21 = a2;
    uint64_t result = 0;
    do
    {
      uint64_t v22 = *(void *)v21;
      if (*(_DWORD *)(*(void *)v21 + 1276) == v7 || *(unsigned char *)(v22 + 1356))
      {
        *((void *)a2 + result) = v22;
        uint64_t result = (result + 1);
      }
      size_t v21 = (_OWORD *)((char *)v21 + 8);
      --v20;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_1BBB0AA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(_DWORD *)(a1 + 48) - 1);
  if ((int)v2 < 0) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  do
  {
    if (a2)
    {
      uint64_t v7 = *(void *)(v6 + 8 * v2);
      if (v7)
      {
        if (*(unsigned char *)(v7 + 1394))
        {
          if (*(unsigned char *)(v7 + 2))
          {
            unsigned int v8 = *(_DWORD *)(v7 + 1276);
            if (v8 >= v5 && v8 < *(_DWORD *)(a2 + 1276))
            {
              unsigned int v5 = *(_DWORD *)(v7 + 1276);
              uint64_t result = *(void *)(v6 + 8 * v2);
            }
          }
        }
      }
    }
  }
  while (v2-- > 0);
  return result;
}

unsigned char *sub_1BBB0AABC(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 48) - 1);
  if ((int)v1 < 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  while (1)
  {
    uint64_t result = *(unsigned char **)(v2 + 8 * v1);
    if (result)
    {
      if (result[1356] && result[2] && result[13]) {
        break;
      }
    }
    if (v1-- <= 0) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1BBB0AB04(uint64_t a1, _OWORD *a2, uint64_t a3, int a4, int a5)
{
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (!a3) {
    return 0;
  }
  LODWORD(v5) = *(_DWORD *)(a1 + 48);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8 * v6);
      *(unsigned char *)(v7 + 32) = 0;
      *(unsigned char *)(v7 + 23) = -1;
      ++v6;
      uint64_t v5 = *(int *)(a1 + 48);
    }
    while (v6 < v5);
  }
  if (*(unsigned char *)(a3 + 24))
  {
    uint64_t v8 = (v5 - 1);
    if ((int)v5 - 1 >= 0)
    {
      unint64_t v9 = 0;
      do
      {
        unsigned int v10 = *(unsigned char **)(*(void *)(a1 + 40) + 8 * v8);
        if (v10 && v10[1394] && v10[1356] && v10[25] && v10[2] && (a5 || !v10[14]))
        {
          v10[32] = 1;
          *((void *)a2 + v9++) = v10;
        }
        BOOL v11 = v8-- < 1;
      }
      while (!v11 && v9 < 0x10);
      return v9;
    }
    return 0;
  }
  uint64_t v12 = (v5 - 1);
  if ((int)v5 - 1 < 0) {
    return 0;
  }
  unsigned int v13 = 0;
  unsigned int v14 = *(_DWORD *)(a3 + 36);
  uint64_t v15 = (v5 - 1);
  do
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8 * v15);
    if (*(unsigned char *)(v16 + 1394))
    {
      if (*(unsigned char *)(v16 + 2))
      {
        if (!*(unsigned char *)(v16 + 1356))
        {
          unsigned int v17 = *(_DWORD *)(v16 + 1276);
          if (v13 <= v17) {
            unsigned int v13 = v17;
          }
        }
      }
    }
    BOOL v11 = v15-- <= 0;
  }
  while (!v11);
  unint64_t v9 = 0;
  do
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8 * v12);
    unsigned int v19 = *(_DWORD *)(v18 + 1276);
    if (*(unsigned char *)(v18 + 1356))
    {
      int v20 = *(unsigned __int8 *)(v18 + 14);
      BOOL v21 = *(unsigned char *)(v18 + 14) == 0;
      BOOL v22 = 1;
      if (v14 != -1 && v19 < v14) {
        BOOL v22 = *(unsigned char *)(v18 + 25) != 0;
      }
    }
    else
    {
      if (a4) {
        BOOL v23 = 1;
      }
      else {
        BOOL v23 = v19 == v13;
      }
      BOOL v21 = v23;
      int v20 = *(unsigned __int8 *)(v18 + 14);
      BOOL v22 = v14 == -1 || v19 >= v14;
    }
    if (*(unsigned char *)(v18 + 1394))
    {
      if (!*(unsigned char *)(v18 + 2)) {
        BOOL v22 = 0;
      }
      if (a5) {
        BOOL v25 = v20 == 0;
      }
      else {
        BOOL v25 = 1;
      }
      if (!v25) {
        BOOL v21 = 1;
      }
      if (v22 && v21)
      {
        *(unsigned char *)(v18 + 32) = 1;
        *((void *)a2 + v9++) = v18;
      }
    }
    BOOL v11 = v12-- < 1;
  }
  while (!v11 && v9 < 0x10);
  return v9;
}

uint64_t sub_1BBB0ACD0(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  *(void *)a1 = a6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 60) = a7;
  if (a7) {
    BOOL v13 = (a9 | a8) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  *(unsigned char *)(a1 + 61) = a8;
  char v14 = !v13;
  *(unsigned char *)(a1 + 62) = a9;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = a2;
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v15 = malloc_type_calloc(0x7F8uLL, 1uLL, 0x4AE20AB7uLL);
  *(void *)(a1 + 32) = v15;
  if (!v15 || (uint64_t v16 = malloc_type_calloc(0x7F8uLL, 1uLL, 0x4AE20AB7uLL), (*(void *)(a1 + 40) = v16) == 0))
  {
    uint64_t v24 = 4294967188;
LABEL_18:
    sub_1BBB0AFBC(a1);
    return v24;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = sub_1BBB0A2A0((uint64_t *)(*(void *)(a1 + 32) + v17), a3, a4, 0, a5, *(void *)a1, v14);
      if (v19) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8 * v18);
      *(unsigned char *)(v20 + 1355) = 0;
      *(unsigned char *)(v20 + 99) = 0;
      *(void *)(*(void *)(a1 + 40) + 8 * v18) = *(void *)(*(void *)(a1 + 32) + 8 * v18);
      ++v18;
      v17 += 8;
      if (v18 >= *(unsigned int *)(a1 + 24)) {
        goto LABEL_13;
      }
    }
    uint64_t v24 = v19;
    goto LABEL_18;
  }
LABEL_13:
  LODWORD(v21) = *(_DWORD *)(a1 + 48);
  if (v21)
  {
    unint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8 * v22);
      sub_1BBB0AE4C(v23, *(unsigned __int8 *)(a1 + 60));
      *(void *)(*(void *)(a1 + 32) + 8 * v22++) = v23;
      unint64_t v21 = *(unsigned int *)(a1 + 48);
    }
    while (v22 < v21);
  }
  uint64_t v24 = 0;
  *(_DWORD *)(a1 + 20) = a5;
  *(_DWORD *)(a1 + 24) = v21;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_DWORD *)(a1 + 16) = 0;
  return v24;
}

void sub_1BBB0AE4C(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 1368) = 2;
  *(_WORD *)(a1 + 1392) = 0;
  *(unsigned char *)(a1 + 1356) = 0;
  *(_WORD *)(a1 + 1359) = 255;
  *(unsigned char *)(a1 + 1404) = 32;
  *(_WORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 18) = 0;
  *(unsigned char *)(a1 + 1394) = 0;
  *(_WORD *)(a1 + 1402) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 1) = 0;
  *(_DWORD *)(a1 + 1396) = 16777217;
  *(_WORD *)(a1 + 5000) = 0;
  *(_DWORD *)(a1 + 5004) = 0;
  *(unsigned char *)(a1 + 5008) = 0;
  *(_DWORD *)(a1 + 1272) = 0;
  if (!*(unsigned char *)a1)
  {
    uint64_t v4 = *(void *)(a1 + 488);
    if (v4)
    {
      *(_DWORD *)(v4 + 64) = 1;
      *(void *)(v4 + 56) = 0x100000001;
      *(_OWORD *)(v4 + 152) = xmmword_1BBB6FCD0;
    }
    uint64_t v5 = *(void *)(a1 + 496);
    if (v5)
    {
      *(_DWORD *)(v5 + 64) = 1;
      *(void *)(v5 + 56) = 0x100000001;
      *(_OWORD *)(v5 + 152) = xmmword_1BBB6FCD0;
    }
    uint64_t v6 = *(void *)(a1 + 504);
    if (v6)
    {
      *(_DWORD *)(v6 + 64) = 1;
      *(void *)(v6 + 56) = 0x100000001;
      *(_OWORD *)(v6 + 152) = xmmword_1BBB6FCD0;
    }
    sub_1BBB0F204(a1 + 1152);
  }
  uint64_t v7 = *(void *)(a1 + 1344);
  if (v7)
  {
    *(void *)(v7 + 1344) = 0;
    *(void *)(a1 + 1344) = 0;
  }
  *(_DWORD *)(a1 + 4836) = -1;
  *(void *)(a1 + 4828) = -1;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 4888) = 0u;
  *(unsigned char *)(a1 + 4904) = 0;
  if (!a2)
  {
    uint64_t v8 = *(void **)(a1 + 4920);
    if (v8)
    {
      size_t v9 = 216 * *(unsigned int *)(a1 + 4808);
      bzero(v8, v9);
    }
  }
}

void sub_1BBB0AFBC(uint64_t a1)
{
  if (*(void *)(a1 + 40) && *(_DWORD *)(a1 + 48))
  {
    unint64_t v2 = 0;
    do
    {
      sub_1BBB0A5CC(*(void *)(*(void *)(a1 + 40) + 8 * v2));
      *(void *)(*(void *)(a1 + 40) + 8 * v2++) = 0;
    }
    while (v2 < *(unsigned int *)(a1 + 48));
  }
  free(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  free(*(void **)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

uint64_t sub_1BBB0B02C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 20);
  if (v4 > 875704437)
  {
    if (v4 != 875704438)
    {
      if (v4 == 2033463856)
      {
        unint64_t v5 = *(unsigned int *)(a1 + 40);
        if (v5)
        {
          uint64_t v6 = 0;
          unsigned int v7 = *(_DWORD *)(a1 + 28);
          uint64_t v9 = *(void *)(a2 + 128);
          uint64_t v8 = *(void *)(a2 + 136);
          int v10 = *(_DWORD *)(a2 + 232);
          int v11 = *(_DWORD *)(a2 + 248);
          uint64_t v12 = *(char **)a1;
          do
          {
            if (v7)
            {
              BOOL v13 = (unsigned char *)(v9 + (v10 * v6));
              unsigned int v14 = v7;
              do
              {
                char v15 = *v12++;
                *v13++ = v15;
                --v14;
              }
              while (v14);
            }
            ++v6;
          }
          while (v6 != v5);
          if (v5 >= 2)
          {
            uint64_t v16 = 0;
            unint64_t v17 = v5 >> 1;
            unint64_t v18 = &v12[(v7 * v5) >> 2];
            int v19 = v7 >> 1;
            if (v7 >> 1 <= 1) {
              int v19 = 1;
            }
            do
            {
              if (v7 >= 2)
              {
                uint64_t v20 = (unsigned char *)(v8 + (v11 * v16));
                int v21 = v19;
                do
                {
                  char v22 = *v12++;
                  *uint64_t v20 = v22;
                  char v23 = *v18++;
                  v20[1] = v23;
                  v20 += 2;
                  --v21;
                }
                while (v21);
              }
              ++v16;
            }
            while (v16 != v17);
          }
        }
      }
      goto LABEL_40;
    }
LABEL_21:
    uint64_t v24 = *(char **)(a1 + 184);
    BOOL v25 = *(char **)(a1 + 208);
    if (v24) {
      BOOL v26 = v25 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      return 4294958327;
    }
    int v49 = *(_DWORD *)(a1 + 200);
    if (v49 >= 1)
    {
      uint64_t v50 = *(int *)(a1 + 216);
      uint64_t v51 = *(unsigned int *)(a2 + 232);
      int v52 = *(char **)(a2 + 128);
      int v53 = *(_DWORD *)(a1 + 200);
      uint64_t v54 = *(int *)(a1 + 192);
      size_t v55 = *(int *)(a1 + 196);
      do
      {
        memcpy(v52, v24, v55);
        v52 += v51;
        v24 += v54;
        --v53;
      }
      while (v53);
      uint64_t v2 = a2;
      if (v49 >= 2)
      {
        uint64_t v56 = *(unsigned int *)(a2 + 248);
        unsigned int v57 = v49 >> 1;
        char v58 = *(char **)(a2 + 136);
        do
        {
          memcpy(v58, v25, v55);
          v58 += v56;
          v25 += v50;
          --v57;
        }
        while (v57);
      }
    }
    goto LABEL_40;
  }
  if (v4 == 846624121)
  {
    unsigned int v28 = *(_DWORD *)(a1 + 36);
    if (v28)
    {
      unsigned int v29 = 0;
      int v30 = *(_DWORD *)(a2 + 232);
      unint64_t v31 = *(unsigned int *)(a1 + 24);
      uint64_t v32 = *(unsigned int *)(a1 + 16);
      uint64_t v33 = *(char **)a1;
      uint64_t v34 = *(void *)a1 + v32;
      uint64_t v35 = *(unsigned int *)(a2 + 248);
      uint64_t v37 = *(void *)(a2 + 128);
      uint64_t v36 = *(void *)(a2 + 136);
      uint64_t v38 = (2 * v32);
      do
      {
        if (v31)
        {
          unsigned int v39 = 0;
          uint64_t v40 = 1;
          do
          {
            char v41 = v33[v39 + 3];
            char v42 = *(unsigned char *)(v34 + v39 + 1);
            char v43 = *(unsigned char *)(v34 + v39 + 3);
            unsigned int v44 = (v33[v39] + *(unsigned __int8 *)(v34 + v39) + 1) >> 1;
            unsigned int v45 = (v33[v39 + 2] + *(unsigned __int8 *)(v34 + v39 + 2) + 1) >> 1;
            uint64_t v46 = (unsigned char *)(v37 + v40);
            *(v46 - 1) = v33[v39 + 1];
            *uint64_t v46 = v41;
            *(unsigned char *)(v37 + (v30 + v40 - 1)) = v42;
            *(unsigned char *)(v37 + (v30 + v40)) = v43;
            int v47 = (unsigned char *)(v36 + v40);
            *(v47 - 1) = v44;
            *int v47 = v45;
            unint64_t v48 = v40 + 1;
            v40 += 2;
            v39 += 4;
          }
          while (v48 < v31);
        }
        v37 += (2 * v30);
        v36 += v35;
        v33 += v38;
        v34 += v38;
        v29 += 2;
      }
      while (v29 < v28);
    }
    goto LABEL_40;
  }
  if (v4 == 875704422) {
    goto LABEL_21;
  }
LABEL_40:
  sub_1BBB5663C((void *)(v2 + 96), 0);
  if (*(unsigned char *)(a1 + 156))
  {
    int v59 = *(_DWORD *)(a1 + 36) * *(_DWORD *)(a1 + 24);
    memset(*(void **)(v2 + 136), 128, (uint64_t)(v59 + (v59 < 0)) >> 1);
  }
  return 0;
}

void sub_1BBB0B334(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, double *a6, int *a7, _DWORD *a8, unsigned __int8 a9)
{
  uint64_t v9 = a6;
  int v11 = a4;
  BOOL v13 = (int *)a2;
  v306[32] = *MEMORY[0x1E4F143B8];
  if (a8[319])
  {
    if (*(unsigned char *)(a1 + 60))
    {
      double v14 = a6[11];
      double v15 = a6[14];
      double v16 = v15 + 0.5;
      double v17 = v15 + -0.5;
      if (v14 > v16 || v14 < v17)
      {
        *(unsigned char *)(a2 + 32) = 1;
        a6[11] = a6[11] * 0.100000001 + a6[14] * 0.899999976;
      }
      else
      {
        *(unsigned char *)(a2 + 32) = 0;
      }
      double v20 = a6[13];
      if (a6[10] != v20)
      {
        a6[10] = v20;
        *(unsigned char *)(a2 + 32) = 1;
      }
    }
    else if (!*(_DWORD *)(a1 + 16))
    {
      a6[11] = a6[11] * 0.899999976 + a6[14] * 0.100000001;
    }
  }
  else
  {
    uint64_t v19 = *((void *)a6 + 14);
    a6[10] = (float)*(int *)(a1 + 40);
    *((void *)a6 + 11) = v19;
  }
  int v21 = a9;
  if (*(unsigned char *)(a1 + 52) && *(unsigned char *)(a1 + 54)) {
    *(_DWORD *)(a5 + 208) = 12;
  }
  int v22 = a8[1251];
  if (*(_DWORD *)(a2 + 8) != 1) {
    int v21 = 0;
  }
  int v23 = v21 | v22;
  *(_DWORD *)(a2 + 28) = v21 | v22;
  if (*(unsigned char *)(a1 + 52))
  {
    *(void *)(a5 + 3688) = 0;
    *(_DWORD *)(a5 + 3696) = 0;
    if (*(_DWORD *)(a2 + 8))
    {
      int v24 = a7[5];
      if (v24 < 1) {
        int v25 = 100;
      }
      else {
        int v25 = 100 * (v24 - a7[18] + a7[16]) / v24;
      }
      if (v23 || (int v26 = *(_DWORD *)(a5 + 232), v26 == -1)) {
        int v26 = a8[1189];
      }
      int v27 = a8[1188] - v26;
      if (v27 < 1)
      {
        if (v27 < 0)
        {
          unsigned int v187 = (100 - v25) * (100 - v25) / 0x7Du + 1;
          unsigned int v188 = __clz(v187);
          unsigned int v189 = ((byte_1BBB8A634[(unint64_t)(v187 << (v188 + 1)) >> 24] << 12) | 0x200000u) >> ((v188 + 1) >> 1);
          if ((v188 & 1) == 0) {
            unsigned int v189 = (11585 * v189) >> 14;
          }
          signed int v190 = (v189 + 16) >> 5;
          if (v190 >= 20) {
            signed int v190 = 20;
          }
          if (v26) {
            int v191 = -(v27 * v190) / v26;
          }
          else {
            int v191 = 0;
          }
          if (-v191 < -3 || v191 == 3) {
            int v32 = -3;
          }
          else {
            int v32 = -v191;
          }
          signed int v28 = -v190;
        }
        else
        {
          int v32 = 0;
          signed int v28 = 0;
        }
      }
      else
      {
        signed int v28 = 10
            * *(_DWORD *)(a5 + 3700)
            / (*(_DWORD *)(a5 + 3660) + 1)
            * (*(_DWORD *)(a5 + 3700)
             / (*(_DWORD *)(a5 + 3660) + 1));
        if (v28)
        {
          unsigned int v29 = v28 + v28 * (v25 * v25 / 0x7Du);
          unsigned int v30 = __clz(v29);
          unsigned int v31 = ((byte_1BBB8A634[(unint64_t)(v29 << (v30 + 1)) >> 24] << 12) | 0x200000u) >> ((v30 + 1) >> 1);
          if ((v30 & 1) == 0) {
            unsigned int v31 = (11585 * v31) >> 14;
          }
          signed int v28 = (v31 + 16) >> 5;
        }
        if (v28 >= 20) {
          signed int v28 = 20;
        }
        if (v26) {
          int v32 = v28 * v27 / v26;
        }
        else {
          int v32 = 0;
        }
        if (v32 >= 5) {
          int v32 = 5;
        }
      }
      *(_DWORD *)(a5 + 232) = (v27 + 8 * v26 + 4) >> 3;
      *(_DWORD *)(a5 + 3688) = v32;
      *(_DWORD *)(a5 + 3696) = v28;
    }
  }
  int v296 = v23;
  unsigned int v33 = *(_DWORD *)(a5 + 236);
  *(_DWORD *)(a5 + 240) = v33;
  if (v33)
  {
    float64x2_t v34 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0);
    *(int8x16_t *)(a5 + 248) = vbslq_s8((int8x16_t)vcgtzq_f64(*(float64x2_t *)(a5 + 248)), (int8x16_t)vmulq_f64(vmlaq_f64(v34, (float64x2_t)xmmword_1BBB6FDB0, *(float64x2_t *)(a5 + 248)), (float64x2_t)xmmword_1BBB6FDC0), (int8x16_t)v34);
  }
  *(_DWORD *)(a5 + 236) = a8[1207];
  *(void *)(a5 + 216) = 0;
  *(void *)(a5 + 224) = 0;
  *(void *)(a5 + 504) = 0;
  *(void *)(a5 + 512) = 0;
  uint64_t v35 = *(void *)(a5 + 40);
  uint64_t v36 = *(void *)(a5 + 48);
  uint64_t v37 = *(void *)(a5 + 56);
  double v39 = *(double *)(a5 + 64);
  double v38 = *(double *)(a5 + 72);
  double v40 = *(double *)(a5 + 80);
  double v41 = *(double *)(a5 + 88);
  char v42 = &xmmword_1BBB70000;
  int v43 = *(_DWORD *)a5;
  double v302 = v40;
  if (*(unsigned char *)(a2 + 32))
  {
    if (!*(_DWORD *)(a2 + 8)) {
      goto LABEL_53;
    }
    int v45 = *(_DWORD *)(a5 + 3660);
    unsigned int v46 = sub_1BBB4E9DC(a6[10] / a6[11]);
    int v47 = v46 - v45;
    int v11 = a4;
    int v48 = v47 + v47 * (v43 - *(_DWORD *)(a5 + 3652));
    if (v41 + (double)v48 >= 0.0) {
      double v41 = v41 + (double)v48;
    }
    else {
      double v41 = 0.0;
    }
    *(_DWORD *)(a5 + 3660) = v46;
    *(_DWORD *)(a5 + 3656) = v41;
    double v49 = sub_1BBB4E9DC((v9[10] + v9[10]) / v9[11]);
    char v42 = &xmmword_1BBB70000;
    *(double *)(a5 + 112) = v49;
  }
  int v50 = v13[2];
  if (!v50 || v13[7] || *(_DWORD *)(a5 + 3652) == v43 + 1)
  {
LABEL_53:
    double v51 = v38;
    unsigned int v52 = *(_DWORD *)(a5 + 3656);
    double v53 = (double)v52 * *((double *)v42 + 317);
    double v54 = (double)(v43 + 1);
    double v55 = sub_1BBB4E9DC((double)((v43 + 1 - *(_DWORD *)(a5 + 3652)) * v52) / v54);
    uint64_t v56 = *(void *)(a5 + 3664);
    double v57 = (double)-v56;
    if (v56 < 1)
    {
      uint64_t v58 = a1;
      if (v53 * 0.5 < v57)
      {
        double v59 = v39;
        double v57 = v53 * 0.5 + (v57 - v53 * 0.5) * 0.5;
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v58 = a1;
      if (v57 < -v53)
      {
        double v59 = v39;
        double v57 = (v53 + v57) * 0.5 - v53;
LABEL_59:
        double v60 = *(double *)(a5 + 16);
        v9[8] = v60;
        double v61 = *(double *)(a5 + 24);
        v9[9] = v61;
        double v62 = (double)*(uint64_t *)(a5 + 32);
        v9[5] = v62;
        double v63 = v9[10];
        if (*(unsigned char *)(v58 + 52))
        {
          double v64 = v9[11];
          double v65 = sub_1BBB4E9DC(v63 * v54 / v64);
          double v66 = sub_1BBB4E9DC(v57 + v65);
          if (v66 < 0.0) {
            double v66 = 0.0;
          }
        }
        else
        {
          double v67 = v41 - v55;
          double v64 = v9[11];
          double v66 = v67 + sub_1BBB4E9DC(v63 * (double)*(int *)a5 / v64);
        }
        double v38 = v51;
        int v68 = a7[4] >> 1;
        if (v66 <= v54 * (double)a7[1] / v64 + (double)v68) {
          double v41 = v66;
        }
        else {
          double v41 = v54 * (double)a7[1] / v64 + (double)v68;
        }
        *((_DWORD *)v9 + 12) = 1;
        int v69 = *(_DWORD *)a5 / *(_DWORD *)(a5 + 4);
        *((_DWORD *)v9 + 13) = v69;
        int v70 = *(_DWORD *)a5 - *(_DWORD *)(a5 + 4) * v69 + v69;
        *((_DWORD *)v9 + 13) = v70;
        int v71 = *(_DWORD *)a5 - v70;
        *((_DWORD *)v9 + 14) = v71;
        ++*((_DWORD *)v9 + 8);
        double v72 = sub_1BBB4E9DC(v51 * (double)v70 / (v59 * v60));
        double v40 = v302;
        double v73 = v59 * v61;
        double v39 = v59;
        double v74 = sub_1BBB4E9DC(v302 * (double)v71 / v73);
        uint64_t v75 = (uint64_t)sub_1BBB4E9DC(v41 / (v74 + v72 + 1.0));
        if (v62 <= (double)v75) {
          uint64_t v35 = v75;
        }
        else {
          uint64_t v35 = (uint64_t)v62;
        }
        *((_DWORD *)v9 + 12) = 0;
        *(_DWORD *)(a5 + 3652) = 0;
        *(_DWORD *)(a5 + 3656) = (v41 + 0.5);
        *(_DWORD *)(a5 + 3660) = (v41 / v54);
        if (*(_DWORD *)(v58 + 16)) {
          *(void *)(a5 + 40) = (uint64_t)((double)(uint64_t)(v9[10] * *(double *)(a5 + 3592)) * 0.9 + 0.5);
        }
        goto LABEL_71;
      }
    }
    double v59 = v39;
    goto LABEL_59;
  }
  if (v50 == 2)
  {
    double v38 = sub_1BBB4E9DC(v38);
    double v40 = sub_1BBB4E9DC(v40);
    double v212 = sub_1BBB4E9DC(v38 * (v9[9] * (double)*((int *)v9 + 13)) / (v40 * v9[8]));
    int v213 = *((_DWORD *)v9 + 14);
    uint64_t v214 = (uint64_t)(sub_1BBB4E9DC(v41 / (v212 + (double)v213)) + 0.5);
    double v215 = v9[5];
    if (v215 <= (double)v214) {
      uint64_t v37 = v214;
    }
    else {
      uint64_t v37 = (uint64_t)v215;
    }
    int v176 = v213 - 1;
    *((_DWORD *)v9 + 14) = v213 - 1;
    uint64_t v58 = a1;
    int v177 = *(_DWORD *)(a1 + 16);
    if (v177 && !v176)
    {
      *(_DWORD *)(a5 + 3648) = v9[13] != v9[10];
      double v216 = v9[13];
      double v217 = v9[14];
      double v218 = 30.0;
      if (v217 <= 30.0) {
        double v218 = v9[14];
      }
      double v219 = v40;
      double v220 = v38;
      if (v217 >= 2.0) {
        double v221 = v218;
      }
      else {
        double v221 = 2.0;
      }
      v9[10] = v216;
      v9[11] = v221;
      unsigned int v222 = (int)(v221 + 0.5) & 0xFFFFFFFE;
      *((_DWORD *)v9 + 25) = v222;
      int v223 = v222 / *(_DWORD *)(a5 + 4);
      *((_DWORD *)v9 + 13) = v223;
      *((_DWORD *)v9 + 14) = v222 - v223;
      double v180 = sub_1BBB4E9DC(v216 * (double)(int)v222) / v221;
      double v38 = v220;
      double v40 = v219;
      goto LABEL_207;
    }
    goto LABEL_252;
  }
  if (v50 != 1)
  {
    uint64_t v58 = a1;
    goto LABEL_71;
  }
  v9[9] = 1.4;
  double v172 = sub_1BBB4E9DC(v40 * (v9[8] * (double)*((int *)v9 + 14)) / (v38 * 1.4));
  int v173 = *((_DWORD *)v9 + 13);
  uint64_t v174 = (uint64_t)(sub_1BBB4E9DC(v41 / (v172 + (double)v173)) + 0.5);
  double v175 = v9[5];
  if (v175 <= (double)v174) {
    uint64_t v36 = v174;
  }
  else {
    uint64_t v36 = (uint64_t)v175;
  }
  int v176 = v173 - 1;
  *((_DWORD *)v9 + 13) = v173 - 1;
  uint64_t v58 = a1;
  if (!*(_DWORD *)(a1 + 28))
  {
    int v177 = *(_DWORD *)(a1 + 16);
    if (v177 && !v176)
    {
      *(_DWORD *)(a5 + 3648) = v9[13] != v9[10];
      long long v301 = *(_OWORD *)(v9 + 13);
      *((_OWORD *)v9 + 5) = v301;
      int v178 = *((_DWORD *)v9 + 25);
      int v179 = v178 / *(_DWORD *)(a5 + 4);
      *((_DWORD *)v9 + 13) = v179;
      *((_DWORD *)v9 + 14) = v178 - v179;
      double v180 = sub_1BBB4E9DC((double)v178 * *(double *)&v301) / *((double *)&v301 + 1);
LABEL_207:
      double v41 = v41 + v180;
      goto LABEL_71;
    }
LABEL_252:
    if (v177 && v176) {
      *(_DWORD *)(a5 + 3648) = 0;
    }
  }
LABEL_71:
  sub_1BBB0CDAC((double *)a5, v39, v38, v40, v41);
  *(void *)(a5 + 40) = (uint64_t)(sub_1BBB4E9DC((double)v35) + 0.5);
  *(void *)(a5 + 48) = (uint64_t)(sub_1BBB4E9DC((double)v36) + 0.5);
  *(void *)(a5 + 56) = (uint64_t)(sub_1BBB4E9DC((double)v37) + 0.5);
  *(_DWORD *)(a5 + 8) = 0;
  double v76 = sub_1BBB4E9DC(*(double *)(a5 + 160) / (double)v13[1]);
  *(void *)(a5 + 160) = 0;
  bzero((void *)(a5 + 1544), 0x7FCuLL);
  int v77 = v13[1];
  if (v77 < 1)
  {
    double v84 = 0.0;
  }
  else
  {
    int v294 = v9;
    unsigned int v295 = v13;
    int v78 = 0;
    int v79 = v13[4];
    int v80 = v79 >> 4;
    uint64_t v81 = 16 * v11;
    if (v79 >> 4 <= 1) {
      int v82 = 1;
    }
    else {
      int v82 = v79 >> 4;
    }
    int v299 = v82;
    int v83 = v11;
    double v84 = 0.0;
    uint64_t v300 = 16 * v11;
    do
    {
      if (v79 >= 16)
      {
        int v85 = v299 + v78;
        uint64_t v86 = a3;
        do
        {
          int v87 = 0;
          uint64_t v88 = 0;
          uint64_t v89 = v306;
          do
          {
            for (uint64_t i = 0; i != 16; ++i)
              *((unsigned char *)v89 + i) = *(unsigned char *)(v86 + v87 + (int)i);
            ++v88;
            v89 += 2;
            v87 += v83;
          }
          while (v88 != 16);
          sub_1BBB5EF40((uint64_t)v306, 0, 0, 0, a5);
          sub_1BBB5EF40((uint64_t)v306, 1u, 0, 8u, a5);
          sub_1BBB5EF40((uint64_t)v306, 2u, 8u, 0, a5);
          *(float *)&double v91 = sub_1BBB5EF40((uint64_t)v306, 3u, 8u, 8u, a5);
          sub_1BBB5EFE8((uint64_t)v306, 0, 0, 0, a5, v91, v92);
          sub_1BBB5EFE8((uint64_t)v306, 1, 0, 4u, a5, v93, v94);
          sub_1BBB5EFE8((uint64_t)v306, 2, 0, 8u, a5, v95, v96);
          sub_1BBB5EFE8((uint64_t)v306, 3, 0, 0xCu, a5, v97, v98);
          sub_1BBB5EFE8((uint64_t)v306, 4, 4u, 0, a5, v99, v100);
          sub_1BBB5EFE8((uint64_t)v306, 5, 4u, 4u, a5, v101, v102);
          sub_1BBB5EFE8((uint64_t)v306, 6, 4u, 8u, a5, v103, v104);
          sub_1BBB5EFE8((uint64_t)v306, 7, 4u, 0xCu, a5, v105, v106);
          sub_1BBB5EFE8((uint64_t)v306, 8, 8u, 0, a5, v107, v108);
          sub_1BBB5EFE8((uint64_t)v306, 9, 8u, 4u, a5, v109, v110);
          sub_1BBB5EFE8((uint64_t)v306, 10, 8u, 8u, a5, v111, v112);
          sub_1BBB5EFE8((uint64_t)v306, 11, 8u, 0xCu, a5, v113, v114);
          sub_1BBB5EFE8((uint64_t)v306, 12, 0xCu, 0, a5, v115, v116);
          sub_1BBB5EFE8((uint64_t)v306, 13, 0xCu, 4u, a5, v117, v118);
          sub_1BBB5EFE8((uint64_t)v306, 14, 0xCu, 8u, a5, v119, v120);
          sub_1BBB5EFE8((uint64_t)v306, 15, 0xCu, 0xCu, a5, v121, v122);
          uint64_t v123 = 0;
          float v124 = 100000000.0;
          do
          {
            if (*(float *)(a5 + 176 + v123) < v124) {
              float v124 = *(float *)(a5 + 176 + v123);
            }
            v123 += 4;
          }
          while (v123 != 16);
          uint64_t v125 = 0;
          double v126 = *(double *)(a5 + 224);
          int v127 = *(_DWORD *)(a5 + 444)
               + *(_DWORD *)(a5 + 440)
               + *(_DWORD *)(a5 + 448)
               + *(_DWORD *)(a5 + 452)
               + *(_DWORD *)(a5 + 456)
               + *(_DWORD *)(a5 + 460)
               + *(_DWORD *)(a5 + 464)
               + *(_DWORD *)(a5 + 468)
               + *(_DWORD *)(a5 + 472)
               + *(_DWORD *)(a5 + 476)
               + *(_DWORD *)(a5 + 480);
          int v128 = *(_DWORD *)(a5 + 484)
               + *(_DWORD *)(a5 + 488)
               + *(_DWORD *)(a5 + 492)
               + *(_DWORD *)(a5 + 496)
               + *(_DWORD *)(a5 + 500);
          double v129 = v124;
          *(double *)(a5 + 216) = *(double *)(a5 + 216)
                                + (float)((float)((float)(*(float *)(a5 + 176) + *(float *)(a5 + 180))
                                                + *(float *)(a5 + 184))
                                        + *(float *)(a5 + 188));
          *(double *)(a5 + 224) = v126 + v129;
          *(double *)(a5 + 512) = *(double *)(a5 + 512) + (double)(v127 + v128);
          unsigned int v130 = 100000000;
          do
          {
            if (*(_DWORD *)(a5 + 440 + v125) < v130) {
              unsigned int v130 = *(_DWORD *)(a5 + 440 + v125);
            }
            v125 += 4;
          }
          while (v125 != 60);
          *(double *)(a5 + 504) = *(double *)(a5 + 504) + (double)v130;
          double v131 = v129 + 1.0;
          double v84 = v84 + (v76 + v131 * 2.0) / (v131 + v76 * 2.0);
          *(double *)(a5 + 160) = v131 + *(double *)(a5 + 160);
          v86 += 16;
          ++v78;
        }
        while (v78 != v85);
        int v78 = v85;
        int v80 = v79 >> 4;
        uint64_t v81 = v300;
      }
      a3 += v81;
      BOOL v132 = __OFSUB__(v77, v80);
      v77 -= v80;
    }
    while (!((v77 < 0) ^ v132 | (v77 == 0)));
    uint64_t v9 = v294;
    BOOL v13 = v295;
    int v77 = v295[1];
    uint64_t v58 = a1;
  }
  double v133 = sub_1BBB4E9DC(v84 / (double)v77);
  *(double *)(a5 + 384) = v133;
  *(double *)(a5 + 216) = sub_1BBB4E9DC(*(double *)(a5 + 216) / (double)(4 * v13[1]));
  *(double *)(a5 + 512) = sub_1BBB4E9DC(*(double *)(a5 + 512) / (double)(16 * v13[1]));
  *(double *)(a5 + 224) = sub_1BBB4E9DC(*(double *)(a5 + 224) / (double)v13[1]);
  *(double *)(a5 + 504) = sub_1BBB4E9DC(*(double *)(a5 + 504) / (double)v13[1]);
  int v134 = v13[2];
  if (!v134 || v134 == 1 && v296)
  {
    uint64_t v305 = 0;
    int v304 = 0;
    int v135 = a7[5];
    if (v135 < 1) {
      double v136 = 100.0;
    }
    else {
      double v136 = (double)(100 * (v135 - a7[18] + a7[16]) / v135);
    }
    int v151 = a7[1];
    double v152 = v9[11];
    double v153 = *(double *)(a5 + 296);
    double v154 = *(double *)(a5 + 112);
    if (*(_DWORD *)v9)
    {
      int v155 = *(_DWORD *)v58;
      *(_DWORD *)(a5 + 416) = *(_DWORD *)v58;
      *(void *)(a5 + 392) = *(void *)(a5 + 40);
      *((_DWORD *)v9 + 31) = v155;
      BOOL v156 = *(_DWORD *)v9 == 0;
    }
    else
    {
      BOOL v156 = 1;
    }
    *((_DWORD *)v9 + 3) = 1;
    uint64_t v157 = *(void *)(a5 + 392);
    double v158 = (double)v157;
    uint64_t v159 = *(void *)(a5 + 40);
    double v160 = *(double *)(a5 + 120) + (double)v157 - (double)v159;
    double v161 = 10.0;
    if (!v156)
    {
LABEL_164:
      double v197 = sub_1BBB4E9DC(v161);
      double v303 = sub_1BBB4E9DC(v197 * *(double *)(a5 + 384));
      *(double *)(a5 + 120) = v160;
      sub_1BBB0CE14(0, v306, &v303, (_DWORD *)&v305 + 1, (unsigned int *)a5, v58);
      uint64_t v198 = 0;
      int v199 = 0;
      float v201 = 10000000.0;
      do
      {
        float v200 = *(double *)(a5 + 504);
        float v202 = v200 - flt_1BBB8A3F8[v198];
        if (v202 < 0.0) {
          float v202 = -v202;
        }
        if (v202 <= v201)
        {
          int v199 = v198;
          float v201 = v202;
        }
        ++v198;
      }
      while (v198 != 18);
      sub_1BBB0CFCC(*(unsigned int *)(v58 + 8), *(_DWORD *)(v58 + 12), v199, &v305, &v304, v9[10], v9[11]);
      float v203 = dbl_1BBB89CE8[v199] / (sub_1BBB4E9DC((double)v159 / *(double *)(a5 + 432)) - dbl_1BBB89C58[v199]);
      int v204 = (int)(v203 + 0.75) - HIDWORD(v305);
      if (!*(_DWORD *)v9)
      {
        if (v204 >= 4) {
          int v204 = 4;
        }
        if (v204 <= -4) {
          int v204 = -4;
        }
        int v204 = (v204 + ((v204 & 0xC0) >> 6)) >> 2;
      }
      int v205 = v204 + HIDWORD(v305);
      if (v204 + HIDWORD(v305) >= dword_1BBB89F30[9 * (int)v305 + v304] + 45) {
        int v205 = dword_1BBB89F30[9 * (int)v305 + v304] + 45;
      }
      if (*(unsigned char *)(v58 + 54))
      {
        if (v296)
        {
          *(_DWORD *)(a5 + 3724) = 0;
        }
        else
        {
          int v206 = *((_DWORD *)v9 + 7);
          if (v206)
          {
            int v207 = v205 - v206;
            int v208 = (int)(float)((float)v206 * 0.2);
            if (v205 - v206 < -v208) {
              int v205 = v206 - v208;
            }
            int v209 = v206 + v208;
            if (v207 > v208) {
              int v205 = v209;
            }
          }
        }
      }
      if (v205 >= 51) {
        int v205 = 51;
      }
      if (v205 <= 12) {
        int v210 = 12;
      }
      else {
        int v210 = v205;
      }
      *((_DWORD *)v9 + 4) = v210;
      *((_DWORD *)v9 + 31) = v210;
      double v211 = *(double *)(a5 + 384);
      if (v211 <= 0.2) {
        double v211 = 1.0;
      }
      *(double *)(a5 + 296) = sub_1BBB4E9DC(dbl_1BBB8A258[v210] / v211);
LABEL_194:
      v13[3] = v210;
      return;
    }
    double v162 = (double)v151 / v152;
    double v163 = v162 * 15.0;
    if (v162 * 15.0 < (double)v159)
    {
      uint64_t v159 = (uint64_t)v163;
      *(void *)(a5 + 40) = (uint64_t)v163;
    }
    uint64_t v164 = v157 - v159;
    if (v157 <= v159)
    {
      double v168 = (double)v164 * 31.0 / v154;
LABEL_158:
      double v195 = -3.0;
      if (v168 >= -3.0) {
        double v195 = v168;
      }
      if (v168 <= 5.0) {
        double v196 = v195;
      }
      else {
        double v196 = 5.0;
      }
      double v161 = v153 + v196;
      goto LABEL_164;
    }
    int v165 = a7[5];
    if (v165 < 1) {
      goto LABEL_152;
    }
    int v166 = 100 * (v165 - a7[18] + a7[16]) / v165;
    if (v166 <= 29)
    {
      double v167 = v162 * (v136 * -0.01 + 0.3) * 2.4 / 2.8;
      goto LABEL_153;
    }
    double v167 = 0.0;
    if (v166 >= 0x33) {
LABEL_152:
    }
      double v167 = (v136 * 0.02 + -1.0) * (v162 - (double)v159);
LABEL_153:
    double v192 = ((double)v164 - v167) * 31.0 / v154;
    double v193 = v162 * 1.5;
    BOOL v194 = v192 < 0.0 && v193 < v158;
    double v168 = 0.0;
    if (!v194) {
      double v168 = v192;
    }
    goto LABEL_158;
  }
  if (v134 != 1)
  {
    if (v134 != 2) {
      return;
    }
    uint64_t v305 = 0;
    int v304 = 0;
    double v169 = *(double *)(a5 + 112);
    if (*((_DWORD *)v9 + 2))
    {
      *((_DWORD *)v9 + 2) = 0;
      *(_DWORD *)(a5 + 424) = *(_DWORD *)(v58 + 32);
      uint64_t v170 = *(void *)(a5 + 56);
      *(void *)(a5 + 408) = v170;
      double v133 = *(double *)(a5 + 384);
      uint64_t v171 = v170;
    }
    else
    {
      uint64_t v171 = *(void *)(a5 + 408);
      uint64_t v170 = *(void *)(a5 + 56);
    }
    if (*(double *)(a5 + 136) + (double)v171 - (double)v170 >= 0.0) {
      double v224 = *(double *)(a5 + 136) + (double)v171 - (double)v170;
    }
    else {
      double v224 = 0.0;
    }
    double v225 = sub_1BBB4E9DC(v224 * 31.0 / v169);
    double v303 = sub_1BBB4E9DC(v225 * v133);
    *(double *)(a5 + 136) = v224;
    sub_1BBB0CE14(2, v306, &v303, (_DWORD *)&v305 + 1, (unsigned int *)a5, v58);
    uint64_t v226 = 0;
    int v227 = 0;
    float v229 = 10000000.0;
    do
    {
      float v228 = *(double *)(a5 + 504);
      float v230 = v228 - flt_1BBB8A3F8[v226];
      if (v230 < 0.0) {
        float v230 = -v230;
      }
      if (v230 <= v229)
      {
        int v227 = v226;
        float v229 = v230;
      }
      ++v226;
    }
    while (v226 != 18);
    sub_1BBB0CFCC(*(unsigned int *)(v58 + 8), *(_DWORD *)(v58 + 12), v227, &v305, &v304, v9[10], v9[11]);
    if (*(_DWORD *)(a5 + 372) == 1
      && (*((_DWORD *)v9 + 30) = *((_DWORD *)v9 + 7) + 1, *(_DWORD *)(a5 + 372) == 1)
      && *(_DWORD *)(a5 + 376) < *(_DWORD *)(v58 + 28))
    {
      double v231 = 1.0 / (double)*((int *)v9 + 4);
      if (v231 >= *(float *)(a5 + 364)) {
        double v231 = *(float *)(a5 + 364);
      }
      float v232 = 1.0 / v231;
    }
    else
    {
      float v233 = *(float *)(a5 + 360);
      if (v233 >= *(float *)(a5 + 364)) {
        float v233 = *(float *)(a5 + 364);
      }
      float v232 = 1.0 / v233;
    }
    int v234 = (int)(v232 + 0.1);
    if (v234 <= 2) {
      int v234 = 2;
    }
    if (v234 >= 51) {
      int v234 = 51;
    }
    int v235 = HIDWORD(v305) - v234;
    if (HIDWORD(v305) - v234 < 1)
    {
      int v235 = 0;
    }
    else if (v235 >= dword_1BBB8A0C4[9 * (int)v305 + v304])
    {
      int v235 = dword_1BBB8A0C4[9 * (int)v305 + v304];
    }
    int v237 = v235 + v234;
    if (*(unsigned char *)(v58 + 54))
    {
      if (v296)
      {
        int v238 = *((_DWORD *)v9 + 7);
        if (v238)
        {
          int v239 = v237 - v238;
          int v240 = (int)(float)((float)v238 * 0.1);
          if (v237 - v238 < -v240) {
            int v237 = v238 - v240;
          }
          int v241 = v238 + v240;
          if (v239 > v240) {
            int v237 = v241;
          }
        }
      }
      else
      {
        unsigned int v242 = *(_DWORD *)(a5 + 3724);
        if (v242 <= 2)
        {
          int v243 = *((_DWORD *)v9 + 31);
          int v244 = v237 - v243;
          if (v237 < v243 && v243 != 0)
          {
            int v246 = (int)(float)((float)v243 * 0.2);
            if (v244 < -v246) {
              int v237 = v243 - v246;
            }
            int v247 = v243 + v246;
            if (v244 > v246) {
              int v237 = v247;
            }
          }
        }
        *(_DWORD *)(a5 + 3724) = v242 + 1;
      }
    }
    if (v237 >= 51) {
      int v237 = 51;
    }
    if (v237 <= 12) {
      int v210 = 12;
    }
    else {
      int v210 = v237;
    }
    *((_DWORD *)v9 + 30) = v210;
    if (*(_DWORD *)(v58 + 16) && *(_DWORD *)(a5 + 3648))
    {
      double v248 = sub_1BBB4E9DC((double)*(int *)(a5 + 3600) / v9[11]);
      *(double *)(a5 + 3592) = v248;
      float v249 = sub_1BBB4E9DC(v248 * v9[10] / 1000.0);
      *(float *)(a5 + 3620) = v249;
      *(float *)(a5 + 3608) = v249;
    }
    goto LABEL_194;
  }
  *(double *)(a5 + 264) = (*(double *)(a5 + 72) + *(double *)(a5 + 264) * 511.0) * 0.001953125;
  HIDWORD(v305) = 0;
  int v304 = 0;
  int v137 = a7[5];
  int v138 = 100;
  if (v137 >= 1) {
    int v138 = 100 * (v137 - a7[18] + a7[16]) / v137;
  }
  double v139 = *(double *)(a5 + 304);
  double v140 = *(double *)(a5 + 112);
  int v141 = a7[1];
  double v142 = v9[11];
  if (*((_DWORD *)v9 + 1))
  {
    *((_DWORD *)v9 + 1) = 0;
    *(_DWORD *)(a5 + 420) = *(_DWORD *)(v58 + 4);
    uint64_t v143 = *(void *)(a5 + 48);
    *(void *)(a5 + 400) = v143;
    *(void *)(a5 + 288) = v143;
  }
  int v144 = *((_DWORD *)v9 + 3);
  if (v144) {
    *((_DWORD *)v9 + 7) = *((_DWORD *)v9 + 4);
  }
  double v145 = (double)v141 / v142;
  uint64_t v146 = *(void *)(a5 + 400);
  double v147 = (double)v146;
  uint64_t v148 = *(void *)(a5 + 48);
  double v149 = *(double *)(a5 + 128) + (double)v146 - (double)v148;
  if (v144)
  {
    double v150 = sub_1BBB4E9DC(*(double *)(a5 + 16) * 10.0) * *(double *)(a5 + 384);
  }
  else
  {
    double v181 = v145 * 5.0;
    if (v145 * 5.0 < (double)v148)
    {
      uint64_t v148 = (uint64_t)v181;
      *(void *)(a5 + 48) = (uint64_t)v181;
    }
    double v182 = (double)v138;
    double v183 = (double)(v146 - v148);
    if (v138 < 50)
    {
      if (v145 + v145 >= v147)
      {
        double v185 = v183 * 31.0 / v140;
      }
      else
      {
        double v236 = 0.0;
        if (*((int *)v9 + 7) < 13)
        {
          if (v138 >= 30) {
            double v236 = (v182 * 0.025 + -0.75) * (double)-v148;
          }
        }
        else if (v146 > v148)
        {
          double v236 = (v182 * -0.01 + 0.5) * v145 / 2.8;
        }
        double v185 = (v183 - v236) * 31.0 / v140;
        if (v185 < 0.0) {
          double v185 = 0.0;
        }
      }
    }
    else
    {
      double v184 = (v182 * 0.02 + -1.0) * (v145 - (double)v148);
      if (v145 >= (double)v148) {
        double v184 = 0.0;
      }
      double v185 = (v183 - v184) * 31.0 / v140;
      if (v185 < 0.0 && v145 < v147) {
        double v185 = 0.0;
      }
    }
    if (*(unsigned char *)(v58 + 52)) {
      double v185 = v185 + (double)*(int *)(a5 + 3688);
    }
    double v250 = *(double *)(a5 + 384);
    double v251 = v139 * v250;
    double v252 = v185 * v250;
    double v253 = -3.0;
    if (v252 >= -3.0) {
      double v253 = v252;
    }
    if (v252 <= 3.0) {
      double v254 = v253;
    }
    else {
      double v254 = 3.0;
    }
    double v150 = v251 + v254;
  }
  v306[0] = sub_1BBB4E9DC(v150);
  *(double *)(a5 + 128) = v149;
  sub_1BBB0CE14(1, (uint64_t *)&v303, (double *)v306, (_DWORD *)&v305 + 1, (unsigned int *)a5, v58);
  uint64_t v255 = 0;
  int v256 = 0;
  float v258 = 10000000.0;
  do
  {
    float v257 = *(double *)(a5 + 504);
    float v259 = v257 - flt_1BBB8A3F8[v255];
    if (v259 < 0.0) {
      float v259 = -v259;
    }
    if (v259 <= v258)
    {
      int v256 = v255;
      float v258 = v259;
    }
    ++v255;
  }
  while (v255 != 18);
  sub_1BBB0CFCC(*(unsigned int *)(v58 + 8), *(_DWORD *)(v58 + 12), v256, &v305, &v304, v9[10], v9[11]);
  *(void *)(a5 + 336) = *(void *)(a5 + 340);
  *(_DWORD *)(a5 + 344) = *(_DWORD *)(a5 + 348);
  *(float *)(a5 + 348) = (float)v148;
  BOOL v260 = (uint64_t *)(a5 + 352);
  *(void *)(a5 + 352) = *(void *)(a5 + 356);
  *(_DWORD *)(a5 + 360) = *(_DWORD *)(a5 + 364);
  *(_DWORD *)(a5 + 364) = 0;
  int v261 = *((_DWORD *)v9 + 7);
  if (*((_DWORD *)v9 + 3))
  {
    *((_DWORD *)v9 + 3) = 0;
    uint64_t v148 = *(void *)(a5 + 48);
    int v262 = v261;
  }
  else
  {
    int v263 = HIDWORD(v305) - v261;
    if (HIDWORD(v305) - v261 >= 5) {
      int v263 = 5;
    }
    if (v263 <= -4) {
      int v263 = -4;
    }
    int v262 = v263 + v261;
  }
  if (*(unsigned char *)(v58 + 54))
  {
    if (v296)
    {
      int v264 = *((_DWORD *)v9 + 31);
      if (v264)
      {
        int v265 = v262 - v264;
        int v266 = (int)(float)((float)v264 * 0.1);
        if (v262 - v264 <= v266)
        {
          int v271 = v264 - v266;
          if (v265 < -v266) {
            int v262 = v271;
          }
        }
        else
        {
          int v262 = v264 + v266;
        }
      }
    }
    else
    {
      unsigned int v267 = *(_DWORD *)(a5 + 3724);
      if (v267 <= 2)
      {
        int v268 = *((_DWORD *)v9 + 31);
        int v269 = v262 - v268;
        if (v262 < v268)
        {
          if (v268)
          {
            int v270 = (int)(float)((float)v268 * 0.15);
            if (v269 <= v270)
            {
              int v272 = v268 - v270;
              if (v269 < -v270) {
                int v262 = v272;
              }
            }
            else
            {
              int v262 = v268 + v270;
            }
          }
        }
      }
      *(_DWORD *)(a5 + 3724) = v267 + 1;
    }
  }
  double v273 = *(double *)(a5 + 3712);
  int v274 = a7[5];
  int v275 = 100;
  if (v274 >= 1) {
    int v275 = 100 * (v274 - a7[18] + a7[16]) / v274;
  }
  double v276 = (double)v261;
  double v277 = ((double)v261 + v273 * 31.0) * 0.03125;
  if (v273 == 0.0) {
    double v277 = (double)v261;
  }
  *(double *)(a5 + 3712) = v277;
  if (v275 > 50)
  {
    int v278 = v262 - v261;
    if (v275 < 0x55)
    {
      if (v275 < 0x46)
      {
        int v280 = -(int)(v276 * 0.1 + 0.5);
      }
      else if (v145 <= (double)v148)
      {
        int v280 = 0;
      }
      else
      {
        int v280 = -1;
      }
    }
    else
    {
      int v280 = v145 <= (double)v148;
    }
    if (v278 <= v280) {
      int v278 = v280;
    }
  }
  else
  {
    int v261 = (int)(v277 + 0.5);
    int v278 = v262 - v261;
    if (v275 > 15)
    {
      double v281 = 51.0 - v276;
      if (v275 > 0x1E) {
        double v282 = 0.6;
      }
      else {
        double v282 = 0.4;
      }
      double v279 = v281 * v282 + 0.5;
    }
    else
    {
      double v279 = (51.0 - v276) * 0.2 + 0.5;
    }
    if (v278 >= (int)v279) {
      int v278 = (int)v279;
    }
  }
  int v283 = v278 + v261;
  if (v283 >= 51) {
    int v283 = 51;
  }
  if (v283 <= 12) {
    int v284 = 12;
  }
  else {
    int v284 = v283;
  }
  *((_DWORD *)v9 + 7) = v284;
  *(double *)(a5 + 3640) = (double)*(uint64_t *)(a5 + 48);
  if (*(_DWORD *)(a1 + 16) && *(_DWORD *)(a5 + 3648) && !*(_DWORD *)(a1 + 28))
  {
    double v285 = sub_1BBB4E9DC((double)*(int *)(a5 + 3600) / v9[11]);
    *(double *)(a5 + 3592) = v285;
    float v286 = sub_1BBB4E9DC(v285 * v9[10] / 1000.0);
    *(float *)(a5 + 3620) = v286;
    *(float *)(a5 + 3608) = v286;
  }
  double v287 = *(double *)(a5 + 3704);
  if (v287 <= 0.0) {
    double v288 = (double)v284;
  }
  else {
    double v288 = ((double)v284 + v287 * 7.0) * 0.125;
  }
  *(double *)(a5 + 3704) = v288;
  double v289 = *(double *)(a5 + 272);
  if (v289 <= 0.0) {
    double v290 = (double)v284;
  }
  else {
    double v290 = ((double)v284 + v289 * 511.0) * 0.001953125;
  }
  *(double *)(a5 + 272) = v290;
  uint64_t v291 = *v260;
  int v292 = *(_DWORD *)(a5 + 360);
  *(_DWORD *)(a5 + 364) = v292;
  *(void *)(a5 + 356) = v291;
  *BOOL v260 = v291;
  *(_DWORD *)(a5 + 360) = v292;
  *(float *)(a5 + 364) = 1.0 / (float)v284;
  double v293 = *(double *)(a5 + 384);
  if (v293 <= 0.2) {
    double v293 = 1.0;
  }
  *(double *)(a5 + 304) = sub_1BBB4E9DC(dbl_1BBB8A258[v284] / v293);
  v13[3] = v284;
}

void sub_1BBB0CDAC(double *a1, double a2, double a3, double a4, double a5)
{
  a1[8] = sub_1BBB4E9DC(a2);
  a1[9] = sub_1BBB4E9DC(a3);
  a1[10] = sub_1BBB4E9DC(a4);
  a1[11] = sub_1BBB4E9DC(a5);
}

void sub_1BBB0CE14(int a1, uint64_t *a2, double *a3, _DWORD *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v8 = 0;
  int v9 = a5[53];
  uint64_t v10 = (int)a5[52];
  int v11 = (int *)(a5 + 105);
  uint64_t v12 = (int *)(a5 + 106);
  if (!a1) {
    uint64_t v12 = (int *)(a5 + 104);
  }
  if (a1 != 1) {
    int v11 = v12;
  }
  if (v10 >= 0x33) {
    unsigned int v13 = 51;
  }
  else {
    unsigned int v13 = a5[52];
  }
  double v14 = dbl_1BBB8A258[v13];
  if (*a3 >= v14) {
    double v14 = *a3;
  }
  if (*(unsigned char *)(a6 + 60)) {
    int v15 = 39;
  }
  else {
    int v15 = 30;
  }
  unsigned int v16 = v10 + v15;
  if (v16 >= 0x33) {
    unsigned int v16 = 51;
  }
  int v17 = *v11;
  if (v14 <= dbl_1BBB8A258[v16]) {
    double v18 = v14;
  }
  else {
    double v18 = dbl_1BBB8A258[v16];
  }
  *a3 = v18;
  if (v10 == 12) {
    uint64_t v19 = 40;
  }
  else {
    uint64_t v19 = 31;
  }
  float v20 = 10000000.0;
  int v21 = -1;
  do
  {
    float v22 = sub_1BBB4E9DC(v18 - dbl_1BBB8A258[v10 + v8]);
    if (v22 < 0.0) {
      float v22 = -v22;
    }
    if (v22 <= v20)
    {
      int v21 = v8;
      float v20 = v22;
    }
    ++v8;
  }
  while (v19 != v8);
  if (v21 >= 0) {
    int v23 = 30;
  }
  else {
    int v23 = 0;
  }
  if (v21 <= 0x1E || a1 != 2) {
    int v23 = v21;
  }
  int v25 = v10 - v17 + v23;
  if (v25 >= 0) {
    int v26 = v10 - v17 + v23;
  }
  else {
    int v26 = -v25;
  }
  if (v26 > v9)
  {
    int v27 = v9 - v10;
    if (v25 < 0) {
      int v27 = -(v9 + v10);
    }
    int v28 = v17 + v27;
    if (v28 >= 0) {
      int v29 = 30;
    }
    else {
      int v29 = 0;
    }
    if (v28 < 0x1F) {
      int v29 = v28;
    }
    if (*(unsigned char *)(a6 + 60)) {
      int v23 = v28 & ~(v28 >> 31);
    }
    else {
      int v23 = v29;
    }
  }
  int v30 = v23 + v10;
  if (v23 + (int)v10 <= 51) {
    uint64_t v31 = *(void *)&dbl_1BBB8A258[v30];
  }
  else {
    uint64_t v31 = 0x4056A0A3D70A3D71;
  }
  *a2 = v31;
  *a4 = v30;
}

uint64_t sub_1BBB0CFCC(uint64_t result, int a2, int a3, _DWORD *a4, _DWORD *a5, double a6, double a7)
{
  uint64_t v7 = 0;
  double v8 = a6 / ((double)(a2 * (int)result) * a7);
  while (v8 > dbl_1BBB8A440[v7])
  {
    if (++v7 == 9)
    {
      LODWORD(v7) = 8;
      break;
    }
  }
  uint64_t v9 = 0;
  if ((int)v7 >= 8) {
    LODWORD(v7) = 8;
  }
  *a4 = v7 & ~((int)v7 >> 31);
  while (dword_1BBB8A488[v9] < a3)
  {
    if (++v9 == 9)
    {
      LODWORD(v9) = *a5;
      break;
    }
  }
  if ((int)v9 >= 8) {
    LODWORD(v9) = 8;
  }
  *a5 = v9 & ~((int)v9 >> 31);
  return result;
}

uint64_t sub_1BBB0D058(uint64_t a1, int a2)
{
  float v3 = fminf(*(float *)(a1 + 756), 60.0);
  int v4 = (__int16 *)((char *)&unk_1BBB89178 + 256 * (uint64_t)a2 + 4);
  uint64_t v5 = -32;
  while (1)
  {
    int v6 = *v4;
    v4 += 4;
    if (*(_DWORD *)(a1 + 748) >= v6) {
      break;
    }
    if (__CFADD__(v5++, 1))
    {
      CFLog();
      return 4294967246;
    }
  }
  uint64_t v9 = (char *)&unk_1BBB89178 + 256 * (uint64_t)a2;
  uint64_t v10 = (float *)&v9[8 * (v5 + 32)];
  float v11 = *v10;
  if (v3 <= *v10)
  {
    unsigned int v12 = 0;
  }
  else
  {
    unsigned int v12 = 0;
    unsigned int v13 = (_WORD *)(a1 + 182);
    do
    {
      *(float *)(v13 - 3) = v3;
      *(v13 - 1) = *(_DWORD *)(a1 + 748);
      *unsigned int v13 = *(_DWORD *)(a1 + 752);
      v13 += 4;
      float v3 = v3 + -5.0;
      ++v12;
    }
    while (v3 > v11);
  }
  unsigned int v14 = 32 - v12;
  if ((int)(32 - v12) >= -(int)v5) {
    int v15 = -(int)v5;
  }
  else {
    int v15 = 32 - v12;
  }
  memcpy((void *)(a1 + 176 + 8 * v12), v10, 8 * v15);
  if ((int)(v15 + v12) <= 31)
  {
    uint64_t v16 = -v5;
    __int16 v17 = *((_WORD *)v9 + 126);
    __int16 v18 = *((_WORD *)v9 + 127);
    int v19 = *((_DWORD *)v9 + 62);
    if (-v5 >= (int)v14) {
      uint64_t v16 = (int)v14;
    }
    uint64_t v20 = v16 + (int)v12;
    uint64_t v21 = v20 - 1;
    float v22 = (_WORD *)(a1 + 8 * v20 + 182);
    do
    {
      *(_DWORD *)(v22 - 3) = v19;
      *(v22 - 1) = v17;
      *float v22 = v18;
      v22 += 4;
      ++v21;
    }
    while (v21 < 31);
  }
  uint64_t result = 0;
  *(void *)(a1 + 784) = a1 + 176;
  *(unsigned char *)(a1 + 688) = 1;
  return result;
}

uint64_t sub_1BBB0D1DC(uint64_t a1, unsigned int a2)
{
  if (a2 > 3)
  {
LABEL_6:
    CFLog();
    return 4294967246;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2 & 1;
    uint64_t v5 = (_WORD *)(a1 + 438);
    int v6 = (float *)((char *)&unk_1BBB88F78 + 256 * v4 + 4);
    while (*(_DWORD *)(a1 + 748) < *(__int16 *)v6 || *(v6 - 1) > *(float *)(a1 + 756))
    {
      ++v3;
      v5 -= 4;
      v6 += 2;
      if (v3 == 32) {
        goto LABEL_6;
      }
    }
    double v8 = (char *)&unk_1BBB88F78 + 256 * v4;
    memcpy((void *)(a1 + 176), &v8[8 * v3], (256 - 8 * v3) & 0x7FFFFFFF8);
    if (v3)
    {
      __int16 v9 = *((_WORD *)v8 + 127);
      unint64_t v10 = 31 - v3;
      do
      {
        *(_DWORD *)(v5 - 3) = 1036831949;
        *(v5 - 1) = 192;
        *uint64_t v5 = v9;
        v5 += 4;
        ++v10;
      }
      while (v10 < 0x1F);
    }
    uint64_t result = 0;
    *(void *)(a1 + 784) = a1 + 176;
    *(unsigned char *)(a1 + 688) = 1;
  }
  return result;
}

uint64_t sub_1BBB0D2F0(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 438;
  uint64_t v4 = &word_1BBB8967C;
  while (*(_DWORD *)(a1 + 748) < *v4 || *((float *)v4 - 1) > *(float *)(a1 + 756))
  {
    ++v2;
    v3 -= 8;
    v4 += 4;
    if (v2 == 32)
    {
      CFLog();
      uint64_t v5 = 0;
      *(_OWORD *)(a1 + 368) = xmmword_1BBB89638;
      *(_OWORD *)(a1 + 384) = unk_1BBB89648;
      *(_OWORD *)(a1 + 400) = xmmword_1BBB89658;
      *(_OWORD *)(a1 + 416) = unk_1BBB89668;
      *(_OWORD *)(a1 + 304) = xmmword_1BBB895F8;
      *(_OWORD *)(a1 + 320) = unk_1BBB89608;
      *(_OWORD *)(a1 + 336) = xmmword_1BBB89618;
      *(_OWORD *)(a1 + 352) = unk_1BBB89628;
      *(_OWORD *)(a1 + 240) = xmmword_1BBB895B8;
      *(_OWORD *)(a1 + 256) = unk_1BBB895C8;
      *(_OWORD *)(a1 + 272) = xmmword_1BBB895D8;
      *(_OWORD *)(a1 + 288) = unk_1BBB895E8;
      *(_OWORD *)(a1 + 176) = xmmword_1BBB89578;
      *(_OWORD *)(a1 + 192) = unk_1BBB89588;
      *(_OWORD *)(a1 + 208) = xmmword_1BBB89598;
      *(_OWORD *)(a1 + 224) = unk_1BBB895A8;
      do
      {
        uint64_t v6 = a1 + v5;
        *(_WORD *)(v6 + 180) = *(_DWORD *)(a1 + 748);
        *(_WORD *)(v6 + 182) = *(_DWORD *)(a1 + 748);
        v5 += 8;
      }
      while (v5 != 256);
      goto LABEL_11;
    }
  }
  memcpy((void *)(a1 + 176), (char *)&unk_1BBB89678 + 8 * v2, (256 - 8 * v2) & 0x7FFFFFFF8);
  if (v2)
  {
    unint64_t v7 = 31 - v2;
    do
    {
      *(void *)(v3 - 6) = 0xC000C03E99999ALL;
      ++v7;
      v3 += 8;
    }
    while (v7 < 0x1F);
  }
LABEL_11:
  *(void *)(a1 + 784) = a1 + 176;
  *(unsigned char *)(a1 + 688) = 1;
  return 0;
}

uint64_t sub_1BBB0D458(uint64_t a1, int a2)
{
  BOOL v3 = *(float *)(a1 + 756) > 30.0;
  uint64_t v4 = (__int16 *)((char *)&unk_1BBB88978 + 128 * (uint64_t)a2);
  uint64_t v5 = (char *)&unk_1BBB88C78 + 128 * v3;
  uint64_t v6 = (char *)&unk_1BBB88E78 + 64 * v3;
  uint64_t v7 = a1 + 176;
  uint64_t v8 = sub_1BBB0D5D8(a1, v4 + 192, (uint64_t)(v5 + 256), (uint64_t)(v6 + 128), 1, a1 + 176);
  if (v8)
  {
    uint64_t v9 = v8;
LABEL_5:
    CFLog();
    return v9;
  }
  uint64_t v10 = sub_1BBB0D5D8(a1, v4, (uint64_t)v5, (uint64_t)v6, 0, a1 + 432);
  if (v10)
  {
    uint64_t v9 = v10;
    goto LABEL_5;
  }
  if (!*(unsigned char *)(a1 + 761))
  {
    for (uint64_t i = 0; i != 256; i += 8)
    {
      uint64_t v13 = a1 + i;
      HIDWORD(v14) = *(_DWORD *)(a1 + i + 180);
      LODWORD(v14) = HIDWORD(v14);
      *(_DWORD *)(v13 + 180) = v14 >> 16;
      HIDWORD(v14) = *(_DWORD *)(a1 + i + 436);
      LODWORD(v14) = HIDWORD(v14);
      *(_DWORD *)(v13 + 436) = v14 >> 16;
    }
  }
  *(void *)(a1 + 784) = v7;
  uint64_t v15 = 1;
  *(unsigned char *)(a1 + 688) = 1;
  int v16 = *(_DWORD *)(a1 + 152);
  unsigned int v17 = *(unsigned __int16 *)(a1 + 180);
  __int16 v18 = (unsigned __int16 *)(a1 + 190);
  while (1)
  {
    unsigned int v19 = v17;
    unsigned int v17 = *(v18 - 1);
    if (__PAIR64__(*v18, v17) == __PAIR64__(*(v18 - 4), v19) && *(float *)(v18 - 3) == *(float *)(v18 - 7)) {
      break;
    }
    ++v15;
    v18 += 4;
    if (v15 == 32)
    {
      LODWORD(v15) = *(_DWORD *)(a1 + 152);
      break;
    }
  }
  uint64_t v9 = 0;
  int v20 = v15 + 2;
  if (v20 <= v16) {
    int v21 = *(_DWORD *)(a1 + 152);
  }
  else {
    int v21 = v20;
  }
  if (v16 == 31) {
    int v22 = v20;
  }
  else {
    int v22 = v21;
  }
  *(_DWORD *)(a1 + 152) = v22;
  return v9;
}

uint64_t sub_1BBB0D5D8(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v6 = *(_DWORD *)(a1 + 748);
  int v7 = *a2 - v6;
  if (v7 < 0) {
    int v7 = v6 - *a2;
  }
  if (v7 < 0x10)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    unint64_t v8 = 0;
    int v9 = *(_DWORD *)(a1 + 752);
    uint64_t v10 = a2 + 2;
    do
    {
      int v11 = *(v10 - 1) - v9;
      if (v11 < 0) {
        int v11 = v9 - *(v10 - 1);
      }
      if (v8 > 0x1F || v11 < 0x10) {
        break;
      }
      ++v8;
      int v12 = *v10;
      v10 += 2;
      unsigned int v13 = v12 - v6;
      if (v12 - v6 < 0) {
        unsigned int v13 = -v13;
      }
    }
    while (v13 > 0xF);
    if ((int)v8 >= 32)
    {
      CFLog();
      CFLog();
      return 4294967246;
    }
  }
  uint64_t v15 = 0;
  while (*(float *)(a3 + 4 * v15) != *(float *)(a1 + 756))
  {
    if (++v15 == 32)
    {
      LODWORD(v15) = 0;
      int v16 = 0;
      if (!a5) {
        goto LABEL_51;
      }
LABEL_22:
      uint64_t v17 = 0;
      int v18 = 0;
      uint64_t v19 = (int)v8;
      uint64_t v20 = (32 - v8);
      while (2)
      {
        int v21 = &a2[2 * v19];
        BOOL v22 = *v21 == a2[62] && v21[1] == a2[63];
        int v23 = *(__int16 *)(a4 + 2 * v17);
        BOOL v24 = v18 > 31;
        if (v23 >= 1 && v18 <= 31)
        {
          uint64_t v28 = 0;
          char v26 = 0;
          int v29 = &a2[2 * v19 + 1];
          int v30 = v16;
          uint64_t v31 = a3 + 4 * v16;
          do
          {
            float v32 = *(float *)(v31 + 4 * v28);
            float v33 = *(float *)(a3 + 124);
            int v34 = (unsigned __int16)*v21;
            uint64_t v35 = (v18 - 1);
            if (v18 < 1
              || (uint64_t v36 = a6 + 8 * v35, *(unsigned __int16 *)(v36 + 4) != v34)
              || *(unsigned __int16 *)(a6 + 8 * v35 + 6) != (unsigned __int16)*v29
              || *(float *)v36 != v32)
            {
              uint64_t v37 = a6 + 8 * v18;
              *(_WORD *)(v37 + 4) = v34;
              *(_WORD *)(v37 + 6) = *v29;
              *(_DWORD *)uint64_t v37 = *(_DWORD *)(v31 + 4 * v28);
              ++v18;
              LOWORD(v23) = *(_WORD *)(a4 + 2 * v17);
              char v26 = 1;
            }
            BOOL v27 = v32 == v33;
            ++v28;
            BOOL v24 = v18 > 31;
            if (v18 > 31) {
              BOOL v27 = 1;
            }
            BOOL v38 = (int)v28 < (__int16)v23 && !v27;
          }
          while (v38);
          int v16 = v30 + v28;
          if (!v22) {
            goto LABEL_31;
          }
        }
        else
        {
          char v26 = 0;
          LOBYTE(v27) = v18 > 31;
          if (!v22)
          {
LABEL_31:
            if (v24) {
              goto LABEL_48;
            }
            goto LABEL_47;
          }
        }
        if (v27) {
          goto LABEL_48;
        }
LABEL_47:
        v16 -= v26 & 1;
        ++v17;
        ++v19;
        if (v17 == v20)
        {
LABEL_48:
          if (v18 > 31) {
            return 0;
          }
          goto LABEL_75;
        }
        continue;
      }
    }
  }
  if (a5)
  {
    int v16 = v15;
    goto LABEL_22;
  }
  if ((int)v15 <= 31)
  {
LABEL_51:
    uint64_t v39 = 0;
    int v18 = 0;
    uint64_t v40 = (int)v15;
    uint64_t v41 = (32 - v15);
    while (1)
    {
      LODWORD(v42) = *(__int16 *)(a4 + 2 * v39);
      if ((int)v42 >= 1)
      {
        int v43 = 0;
        char v44 = 0;
        float v45 = *(float *)(a3 + 4 * v40);
        float v46 = *(float *)(a3 + 124);
        int v47 = &a2[2 * (int)v8 + 1];
        do
        {
          int v48 = (unsigned __int16)*(v47 - 1);
          BOOL v49 = v48 == (unsigned __int16)a2[62] && *v47 == a2[63];
          uint64_t v50 = (v18 - 1);
          if (v18 < 1
            || (uint64_t v51 = a6 + 8 * v50, *(unsigned __int16 *)(v51 + 4) != v48)
            || *(unsigned __int16 *)(a6 + 8 * v50 + 6) != (unsigned __int16)*v47
            || *(float *)v51 != *(float *)(a3 + 4 * v40))
          {
            uint64_t v42 = a6 + 8 * v18;
            *(_WORD *)(v42 + 4) = v48;
            *(_WORD *)(v42 + 6) = *v47;
            *(_DWORD *)uint64_t v42 = *(_DWORD *)(a3 + 4 * v40);
            ++v18;
            LOWORD(v42) = *(_WORD *)(a4 + 2 * v39);
            char v44 = 1;
          }
          char v52 = ++v43 >= (__int16)v42 || v49;
          if (v52) {
            break;
          }
          v47 += 2;
        }
        while (v18 < 32);
        LODWORD(v8) = v8 - (v44 & 1) + v43;
        if (v49)
        {
          if (v45 == v46 || v18 > 31) {
            goto LABEL_48;
          }
        }
        else if (v18 > 31)
        {
          return 0;
        }
      }
      ++v39;
      ++v40;
      if (v39 == v41) {
        goto LABEL_75;
      }
    }
  }
  int v18 = 0;
LABEL_75:
  uint64_t v53 = a6 + 8 * v18;
  uint64_t v54 = v18;
  double v55 = (_DWORD *)(v53 - 8);
  uint64_t v56 = (_WORD *)(v53 - 4);
  double v57 = (_WORD *)(v53 - 2);
  uint64_t v58 = v54 + 1;
  double v59 = (_WORD *)(v53 + 6);
  do
  {
    *(v59 - 1) = *v56;
    *double v59 = *v57;
    *(_DWORD *)(v59 - 3) = *v55;
    v59 += 4;
    BOOL v38 = v58++ == 32;
  }
  while (!v38);
  return 0;
}

double sub_1BBB0D9B0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, float a8)
{
  *(_OWORD *)(a1 + 4) = xmmword_1BBB6FDD0;
  *(_DWORD *)(a1 + 20) = 1105723392;
  *(_DWORD *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 100;
  *(_DWORD *)(a1 + 808) = 100;
  *(_OWORD *)(a1 + 104) = xmmword_1BBB6FDE0;
  *(_OWORD *)(a1 + 128) = xmmword_1BBB6FDF0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_WORD *)(a1 + 801) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 150) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 152) = 31;
  *(void *)(a1 + 160) = 0x404E000000000000;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 729) = 0;
  *(void *)(a1 + 734) = 0;
  *(_DWORD *)(a1 + 744) = a2;
  *(float *)(a1 + 756) = a8;
  if (a3 <= a4) {
    int v8 = a4;
  }
  else {
    int v8 = a3;
  }
  *(_DWORD *)(a1 + 748) = v8;
  if (a3 >= a4) {
    int v9 = a4;
  }
  else {
    int v9 = a3;
  }
  *(_DWORD *)(a1 + 752) = v9;
  if (v8 >= 1920)
  {
    int v10 = 5;
LABEL_17:
    *(_DWORD *)(a1 + 804) = v10;
    goto LABEL_18;
  }
  if (v8 >= 1280)
  {
    int v10 = 4;
    goto LABEL_17;
  }
  if (v8 >= 1024)
  {
    int v10 = 3;
    goto LABEL_17;
  }
  if (v8 >= 640)
  {
    int v10 = 2;
    goto LABEL_17;
  }
  if (v8 >= 480)
  {
    int v10 = 1;
    goto LABEL_17;
  }
  *(_DWORD *)(a1 + 804) = 0;
LABEL_18:
  *(unsigned char *)(a1 + 761) = a3 > a4;
  *(unsigned char *)(a1 + 800) = a6;
  *(unsigned char *)(a1 + 760) = a5;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 824) = 0x200000002;
  *(unsigned char *)(a1 + 812) = 0;
  if (a5)
  {
    int v11 = sub_1BBB0D458;
  }
  else if (v8 == v9)
  {
    int v11 = sub_1BBB0D2F0;
  }
  else if (a6)
  {
    int v11 = sub_1BBB0D1DC;
  }
  else
  {
    int v11 = sub_1BBB0D058;
  }
  *(void *)(a1 + 832) = v11;
  *(void *)(a1 + 840) = 0;
  *(_DWORD *)(a1 + 848) = a3;
  *(_DWORD *)(a1 + 852) = a4;
  *(_DWORD *)(a1 + 856) = a3 >> 1;
  *(_DWORD *)(a1 + 860) = a4 >> 1;
  *(_DWORD *)(a1 + 868) = 100;
  *(_DWORD *)(a1 + 888) = 0;
  *(_DWORD *)(a1 + 864) = (a4 + (a4 >> 1) + 144) * (a3 + 64);
  double result = 0.0;
  *(void *)(a1 + 880) = 0;
  *(_DWORD *)(a1 + 872) = a3;
  *(_DWORD *)(a1 + 876) = a4;
  *(void *)(a1 + 768) = a7;
  return result;
}

uint64_t sub_1BBB0DB94(uint64_t a1, int a2, int a3)
{
  int v5 = 0;
  *(unsigned char *)(a1 + 729) = 0;
  *(unsigned char *)(a1 + 726) = 0;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 784) + 8 * *(char *)(a1 + 148);
    int v5 = (int)(float)(*(float *)v6 * (float)(*(__int16 *)(v6 + 6) * *(__int16 *)(v6 + 4)));
  }
  switch(*(_DWORD *)(a1 + 744))
  {
    case 0:
      if (*(unsigned char *)(a1 + 760))
      {
        int v12 = &xmmword_1BBB89778[16 * (unint64_t)(a3 == 1)];
        *(_OWORD *)(a1 + 368) = v12[12];
        *(_OWORD *)(a1 + 384) = v12[13];
        *(_OWORD *)(a1 + 400) = v12[14];
        *(_OWORD *)(a1 + 416) = v12[15];
        *(_OWORD *)(a1 + 304) = v12[8];
        *(_OWORD *)(a1 + 320) = v12[9];
        *(_OWORD *)(a1 + 336) = v12[10];
        *(_OWORD *)(a1 + 352) = v12[11];
        *(_OWORD *)(a1 + 240) = v12[4];
        *(_OWORD *)(a1 + 256) = v12[5];
        *(_OWORD *)(a1 + 272) = v12[6];
        *(_OWORD *)(a1 + 288) = v12[7];
        *(_OWORD *)(a1 + 176) = *v12;
        *(_OWORD *)(a1 + 192) = v12[1];
        *(_OWORD *)(a1 + 208) = v12[2];
        *(_OWORD *)(a1 + 224) = v12[3];
      }
      else
      {
        *(_OWORD *)(a1 + 368) = xmmword_1BBB89638;
        *(_OWORD *)(a1 + 384) = unk_1BBB89648;
        *(_OWORD *)(a1 + 400) = xmmword_1BBB89658;
        *(_OWORD *)(a1 + 416) = unk_1BBB89668;
        *(_OWORD *)(a1 + 304) = xmmword_1BBB895F8;
        *(_OWORD *)(a1 + 320) = unk_1BBB89608;
        *(_OWORD *)(a1 + 336) = xmmword_1BBB89618;
        *(_OWORD *)(a1 + 352) = unk_1BBB89628;
        *(_OWORD *)(a1 + 240) = xmmword_1BBB895B8;
        *(_OWORD *)(a1 + 256) = unk_1BBB895C8;
        *(_OWORD *)(a1 + 272) = xmmword_1BBB895D8;
        *(_OWORD *)(a1 + 288) = unk_1BBB895E8;
        *(_OWORD *)(a1 + 176) = xmmword_1BBB89578;
        *(_OWORD *)(a1 + 192) = unk_1BBB89588;
        *(_OWORD *)(a1 + 208) = xmmword_1BBB89598;
        *(_OWORD *)(a1 + 224) = unk_1BBB895A8;
      }
      uint64_t v18 = 0;
      int v19 = *(_DWORD *)(a1 + 752);
      do
      {
        uint64_t v20 = a1 + v18;
        *(_WORD *)(v20 + 180) = *(_DWORD *)(a1 + 748);
        *(_WORD *)(v20 + 182) = v19;
        v18 += 8;
      }
      while (v18 != 256);
      goto LABEL_30;
    case 1:
      double v13 = (float)((float)*(int *)(a1 + 748) / (float)*(int *)(a1 + 752));
      if (*(unsigned char *)(a1 + 760))
      {
        if (v13 <= 1.96) {
          uint64_t v14 = v13 > 1.56;
        }
        else {
          uint64_t v14 = 2;
        }
      }
      else if (fabs(v13 + -1.33) >= fabs(v13 + -1.77))
      {
        uint64_t v14 = 3;
      }
      else
      {
        uint64_t v14 = 2;
      }
      int v21 = *(uint64_t (**)(void *, uint64_t))(a1 + 832);
      uint64_t v22 = *(void *)(a1 + 840);
      int v23 = (void *)(a1 + (v22 >> 1));
      if (v22) {
        int v21 = *(uint64_t (**)(void *, uint64_t))(*v23 + v21);
      }
      uint64_t v16 = v21(v23, v14);
      if (v16) {
        goto LABEL_16;
      }
      goto LABEL_31;
    case 2:
    case 3:
      double v7 = (float)((float)*(int *)(a1 + 748) / (float)*(int *)(a1 + 752));
      BOOL v8 = fabs(v7 + -1.33) >= fabs(v7 + -1.77);
      int v9 = *(uint64_t (**)(void *, BOOL))(a1 + 832);
      uint64_t v10 = *(void *)(a1 + 840);
      int v11 = (void *)(a1 + (v10 >> 1));
      if (v10) {
        int v9 = *(uint64_t (**)(void *, BOOL))(*v11 + v9);
      }
      uint64_t v16 = v9(v11, v8);
      if (!v16) {
        goto LABEL_31;
      }
LABEL_16:
      uint64_t v17 = v16;
      CFLog();
      return v17;
    case 4:
      *(unsigned char *)(a1 + 729) = 1;
      if (*(unsigned char *)(a1 + 760)) {
        uint64_t v15 = xmmword_1BBB89778;
      }
      else {
        uint64_t v15 = &xmmword_1BBB89578;
      }
      long long v24 = v15[13];
      *(_OWORD *)(a1 + 368) = v15[12];
      *(_OWORD *)(a1 + 384) = v24;
      long long v25 = v15[15];
      *(_OWORD *)(a1 + 400) = v15[14];
      *(_OWORD *)(a1 + 416) = v25;
      long long v26 = v15[9];
      *(_OWORD *)(a1 + 304) = v15[8];
      *(_OWORD *)(a1 + 320) = v26;
      long long v27 = v15[11];
      *(_OWORD *)(a1 + 336) = v15[10];
      *(_OWORD *)(a1 + 352) = v27;
      long long v28 = v15[5];
      *(_OWORD *)(a1 + 240) = v15[4];
      *(_OWORD *)(a1 + 256) = v28;
      long long v29 = v15[7];
      *(_OWORD *)(a1 + 272) = v15[6];
      *(_OWORD *)(a1 + 288) = v29;
      long long v30 = v15[1];
      *(_OWORD *)(a1 + 176) = *v15;
      *(_OWORD *)(a1 + 192) = v30;
      long long v31 = v15[3];
      *(_OWORD *)(a1 + 208) = v15[2];
      *(_OWORD *)(a1 + 224) = v31;
LABEL_30:
      *(void *)(a1 + 784) = a1 + 176;
      *(unsigned char *)(a1 + 688) = 1;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
        float v32 = (__int16 *)(*(void *)(a1 + 784) + 6);
        uint64_t v33 = -1;
        while (v33 != 31)
        {
          float v34 = *(float *)(v32 - 3) * (float)(*v32 * *(v32 - 1));
          ++v33;
          v32 += 4;
          if (v5 >= (int)v34) {
            goto LABEL_38;
          }
        }
        LOBYTE(v33) = 32;
      }
      else
      {
        LOBYTE(v33) = *(unsigned char *)(a1 + 726);
      }
LABEL_38:
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 148) = v33;
      *(void *)(a1 + 696) = (char *)&unk_1E9F80AB0 + 72 * *(unsigned __int8 *)(a1 + 760);
      return v17;
  }
}

uint64_t sub_1BBB0DF90(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  uint64_t v15 = 0;
  if (a9)
  {
    uint64_t v16 = (__int16 *)(a1 + 4);
    do
    {
      int v17 = *v16;
      v16 += 4;
      if (v17 <= a3) {
        break;
      }
      ++v15;
    }
    while (v15 != 32);
  }
  else
  {
    uint64_t v18 = (__int16 *)(a1 + 6);
    do
    {
      int v19 = *v18;
      v18 += 4;
      if (v19 <= a3) {
        break;
      }
      ++v15;
    }
    while (v15 != 32);
  }
  if (v15 >= 0x1F) {
    LODWORD(v15) = 31;
  }
  unsigned int v29 = v15;
  sub_1BBB0E100(a1, &v29, (float)a4);
  uint64_t v20 = 0;
  if (a9)
  {
    int v21 = (__int16 *)(a1 + 4);
    do
    {
      int v22 = *v21;
      v21 += 4;
      if (v22 <= a6) {
        break;
      }
      ++v20;
    }
    while (v20 != 32);
  }
  else
  {
    int v23 = (__int16 *)(a1 + 6);
    do
    {
      int v24 = *v23;
      v23 += 4;
      if (v24 <= a6) {
        break;
      }
      ++v20;
    }
    while (v20 != 32);
  }
  if (v20 >= 0x1F) {
    LODWORD(v20) = 31;
  }
  unsigned int v28 = v20;
  sub_1BBB0E100(a1, &v28, (float)a7);
  if (a2 <= a5) {
    return v29;
  }
  if (a2 > a8) {
    return v28;
  }
  unsigned int v26 = v29;
  int v27 = v29 - (int)((v29 - v28) * (a2 - a5)) / (a8 - a5);
  if (v27 < (int)v29) {
    unsigned int v26 = v29 - (int)((v29 - v28) * (a2 - a5)) / (a8 - a5);
  }
  if (v27 >= (int)v28) {
    return v26;
  }
  else {
    return v28;
  }
}

uint64_t sub_1BBB0E100(uint64_t result, _DWORD *a2, float a3)
{
  uint64_t v3 = *a2;
  if (v3 >= 0x20) {
    return CFLog();
  }
  uint64_t v4 = (unsigned __int16 *)(result + 8 * v3);
  int v5 = v4[2];
  int v6 = v4[3];
  double v7 = v4 + 6;
  unint64_t v8 = *a2;
  do
  {
    if (v8 > 0x1F) {
      break;
    }
    if (*(v7 - 3) != v6) {
      break;
    }
    ++v8;
    int v9 = *v7;
    v7 += 4;
  }
  while (v9 == v5);
  if ((int)v3 < (int)v8)
  {
    int v10 = v8 - v3;
    for (uint64_t i = (float *)(result + 8 * v3); *i != a3; i += 2)
    {
      LODWORD(v3) = v3 + 1;
      if (!--v10) {
        return result;
      }
    }
    *a2 = v3;
  }
  return result;
}

uint64_t sub_1BBB0E1B4(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  char v3 = 0;
  float v4 = *(float *)(*(void *)(a1 + 784) + 8 * a2);
  float v5 = *(float *)(a1 + 756);
  BOOL v6 = v5 >= v4 || v5 <= 0.0;
  double v7 = 1.0e20;
  if (!v6) {
    float v4 = *(float *)(a1 + 756);
  }
  double v8 = v4;
  int v9 = (__int16 *)(*(void *)(a1 + 696) + 2);
  do
  {
    double v10 = vabdd_f64(*(double *)(a1 + 160) * (double)*(v9 - 1) / (double)*v9, v8);
    if (v10 < v7)
    {
      double v7 = v10;
      char v3 = v2;
    }
    ++v2;
    v9 += 2;
  }
  while (v2 != 18);
  return v3;
}

float sub_1BBB0E234(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5, float a6, double a7, double a8, float a9)
{
  double v14 = a7;
  double v18 = *((double *)a1 + 20);
  double v19 = vabdd_f64(a7, v18);
  int8x8_t v20 = COERCE_INT8X8_T(0.5);
  if (v19 <= 0.5)
  {
    LOBYTE(v21) = a1[148];
    if (!(_BYTE)v21) {
      goto LABEL_10;
    }
  }
  else
  {
    *((double *)a1 + 20) = v14;
    int v21 = a1[148];
    if ((char)a1[148] != a1[726]) {
      a1[104] = sub_1BBB0E1B4((uint64_t)a1, (char)v21);
    }
    double v18 = v14;
    if (!v21) {
      goto LABEL_10;
    }
  }
  uint64_t v22 = *((void *)a1 + 98);
  if (*(unsigned __int16 *)(v22 + 8 * (char)v21 + 4) != *(unsigned __int16 *)(v22 + 8 * a1[726] + 4)
    || (double v19 = *(float *)(v22 + 8 * (char)v21), v18 > v19))
  {
    char v23 = 0;
    goto LABEL_11;
  }
LABEL_10:
  char v23 = 1;
LABEL_11:
  a1[727] = v23;
  if (!a1[760]) {
    sub_1BBB0EA68((uint64_t)a1, a5, v18, *(int8x8_t *)&v19, v20);
  }
  float v24 = *((float *)a1 + 4) + a9;
  *((float *)a1 + 4) = v24;
  if (a4)
  {
    BOOL v25 = 0;
    float v26 = a6;
  }
  else
  {
    if (v24 >= a6)
    {
      BOOL v25 = 0;
      float v26 = a6;
    }
    else
    {
      int v27 = a1[148];
      BOOL v28 = roundf(a6) > v24;
      BOOL v25 = v27 != 32 && v28;
      if (v27 == 32) {
        float v26 = a6;
      }
      else {
        float v26 = v24;
      }
    }
    if (*((float *)a1 + 5) > a6 && !a1[727] && *((_DWORD *)a1 + 186)) {
      float v26 = *((float *)a1 + 5);
    }
  }
  if (a1[800])
  {
    uint64_t v29 = *((void *)a1 + 96);
    unsigned int v30 = *(unsigned __int8 *)(v29 + 413);
    BOOL v31 = v30 > 9;
    int v32 = (1 << v30) & 0x294;
    if (v31 || v32 == 0)
    {
      if (*(unsigned char *)(v29 + 210)) {
        *(void *)(v29 + 1768) = *(void *)(v29 + 1776);
      }
    }
    else
    {
      memset_pattern16((void *)(v29 + 1768), &unk_1BBB701D0, 0x28uLL);
    }
    *(unsigned char *)(v29 + 210) = 0;
  }
  int v34 = a1[760];
  if (a1[760] && a3 >= 12)
  {
    if (*(unsigned char *)(a5 + 105))
    {
      int v35 = *(unsigned __int8 *)(a5 + 45) + *(unsigned __int8 *)(a5 + 77) + 1;
    }
    else if (*(unsigned char *)(a5 + 106))
    {
      int v35 = 3;
    }
    else if (*(unsigned char *)(a5 + 107))
    {
      int v35 = 0;
    }
    else
    {
      int v36 = *(_DWORD *)(a5 + 312);
      if ((v36 + 1) < 5) {
        int v35 = v36 + 1;
      }
      else {
        int v35 = 5;
      }
    }
    if (*(unsigned char *)(a5 + 104)) {
      goto LABEL_57;
    }
  }
  else
  {
    int v35 = *((_DWORD *)a1 + 202);
    if (v35 >= 5) {
      int v35 = 5;
    }
  }
  int v37 = v35 - 1;
  if (v35 <= 1)
  {
LABEL_57:
    int v38 = 0;
    float v40 = 0.0;
    goto LABEL_58;
  }
  int v38 = 0;
  unsigned int v39 = a3 - 1;
  float v40 = 0.0;
  do
  {
    if ((v39 & 0x80000000) == 0)
    {
      float v41 = *(float *)&a1[4 * (v39 % 0xA) + 24];
      if (v41 > 0.0)
      {
        float v40 = v40 + v41;
        ++v38;
      }
    }
    --v39;
    --v37;
  }
  while (v37);
LABEL_58:
  float v42 = (float)(v40 + a6) / (float)(v38 + 1);
  int v43 = (char)a1[148];
  int v44 = (char)a1[150];
  if (v43 >= v44) {
    int v45 = 2;
  }
  else {
    int v45 = 4;
  }
  uint64_t v46 = *((void *)a1 + 98);
  uint64_t v47 = v46 + 8 * (char)a1[148];
  int v50 = *(__int16 *)(v47 + 4);
  int v48 = (unsigned __int16 *)(v47 + 4);
  __int16 v49 = v50;
  int v51 = (__int16)v48[1];
  if (v50 > v51) {
    LOWORD(v51) = v49;
  }
  unsigned int v52 = a3 - 1;
  if (a3 < 1) {
    goto LABEL_149;
  }
  char v53 = a1[812];
  if (!v53)
  {
LABEL_67:
    if (a1[760]) {
      goto LABEL_68;
    }
LABEL_72:
    char v54 = 0;
    goto LABEL_73;
  }
  if (*((_DWORD *)a1 + 207) == 5)
  {
    char v53 = *((_DWORD *)a1 + 206) > 3;
    goto LABEL_67;
  }
  char v53 = 0;
  if (!a1[760]) {
    goto LABEL_72;
  }
LABEL_68:
  if (*(unsigned char *)(a5 + 105)) {
    char v54 = 1;
  }
  else {
    char v54 = v53;
  }
LABEL_73:
  BOOL v57 = (__int16)v51 > 320 && a1[800] != 0 && v25;
  if (*((int *)a1 + 198) >= 2)
  {
    int v58 = 1;
    if (a1[800] && (__int16)v51 >= 400)
    {
      if (*(double *)(*((void *)a1 + 96) + 1768) >= 22.0) {
        int v58 = 2;
      }
      else {
        int v58 = 1;
      }
    }
    a1[801] = 0;
    if (v43 < v44 && *((int *)a1 + 27) <= 5) {
      a1[801] = 1;
    }
    sub_1BBB0EBB4((uint64_t)a1, v58);
    if (a1[760]) {
      *((_DWORD *)a1 + 198) = 0;
    }
    goto LABEL_149;
  }
  if ((v54 & 1) == 0 && *((_DWORD *)a1 + 27) >= v45)
  {
    if (a1[105] && (char)a1[107] >= 1)
    {
      char v59 = v42 >= (float)(*((float *)a1 + 4) + -1.0) || v57;
      if (v59)
      {
        int v60 = 1;
        if (!a1[800] || (__int16)v51 <= 399) {
          goto LABEL_148;
        }
LABEL_106:
        if (*(double *)(*((void *)a1 + 96) + 1768) >= 22.0)
        {
          int v60 = 2;
          goto LABEL_148;
        }
LABEL_107:
        int v60 = 1;
LABEL_148:
        sub_1BBB0EBB4((uint64_t)a1, v60);
        float v26 = *((float *)a1 + 4);
        goto LABEL_149;
      }
    }
    else if (v57)
    {
      if ((__int16)v51 < 400) {
        goto LABEL_107;
      }
      goto LABEL_106;
    }
  }
  float v61 = *((float *)a1 + 5) + 0.4999;
  if (v42 <= v61 && v43 > a1[726] && *((int *)a1 + 27) > 1 || (v61 >= a6 ? (BOOL v62 = *a1 == 0) : (BOOL v62 = 1), !v62))
  {
    if (!a1[727])
    {
      uint64_t v63 = v46 + 8 * (char)a1[148];
      int v64 = *(__int16 *)(v63 - 4);
      int v65 = *(__int16 *)(v63 - 2);
      if (v64 > v65) {
        LOWORD(v65) = v64;
      }
      if (!a1[800]) {
        goto LABEL_124;
      }
      if ((__int16)v65 < 321) {
        goto LABEL_124;
      }
      uint64_t v66 = *((void *)a1 + 96);
      int v67 = dword_1BBB852E8[(__int16)v51 > 400];
      if (*(double *)(v66 + 1768) <= (double)v67)
      {
        uint64_t v68 = 0;
        unsigned int v69 = 0;
        uint64_t v70 = v66 + 1768;
        do
        {
          v69 += dword_1BBB852F0[v68] * (*(double *)(v70 + 8 * v68) + 0.5);
          ++v68;
        }
        while (v68 != 5);
        if (v67 >= v69 >> 4)
        {
LABEL_124:
          if (v43 <= 1) {
            int v71 = 1;
          }
          else {
            int v71 = (char)a1[148];
          }
          unsigned int v72 = v71 - 1;
          a1[802] = 1;
          if (*v48 == *(unsigned __int16 *)(v46 + 8 * v72 + 4))
          {
            if (v72 != v43)
            {
              *((_DWORD *)a1 + 27) = 0;
              *((_DWORD *)a1 + 202) = 0;
              a1[150] = v43;
              a1[148] = v72;
            }
          }
          else
          {
            if (v34) {
              int v73 = 3;
            }
            else {
              int v73 = 5;
            }
            if (*((_DWORD *)a1 + 27) >= v73)
            {
              unsigned int v74 = 0;
              unsigned int v75 = 0;
              if (v34) {
                int v76 = 3;
              }
              else {
                int v76 = 5;
              }
              do
              {
                if ((v52 & 0x80000000) == 0)
                {
                  int v77 = *(_DWORD *)&a1[4 * (v52 % 0xA) + 64];
                  if (v77)
                  {
                    v74 += v77;
                    ++v75;
                  }
                }
                --v52;
                --v76;
              }
              while (v76);
              uint64_t v78 = *((void *)a1 + 87);
              uint64_t v79 = (char)a1[104];
              double v80 = v14;
              if (*(_WORD *)(v78 + 4 * v79 + 2)) {
                double v80 = (double)*(__int16 *)(v78 + 4 * v79) * v14 / (double)*(__int16 *)(v78 + 4 * v79 + 2);
              }
              if (v80 >= 1.0e-20 && a8 / v80 * 0.7 > (double)(v74 / v75))
              {
                *((_DWORD *)a1 + 27) = 0;
                *((_DWORD *)a1 + 202) = 0;
                a1[150] = v43;
                a1[148] = v72;
                *(unsigned char *)(*((void *)a1 + 96) + 210) = *(unsigned __int16 *)(v46 + 8 * v72 + 4) != *v48;
                *(unsigned char *)(*((void *)a1 + 96) + 211) = *(__int16 *)(*((void *)a1 + 98) + 8 * (char)a1[148] + 4) > *(__int16 *)(*((void *)a1 + 98) + 8 * (char)a1[150] + 4);
                if (*(unsigned char *)(*((void *)a1 + 96) + 211)) {
                  *(_DWORD *)(a5 + 376) = 0;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_149:
  if (a2)
  {
    signed __int8 v81 = a1[149];
    a1[148] = v81;
  }
  else
  {
    signed __int8 v81 = a1[148];
  }
  int v82 = sub_1BBB0E1B4((uint64_t)a1, v81);
  int v83 = a1[104];
  if (v83 != v82)
  {
    *((_DWORD *)a1 + 43) = 0;
    a1[168] = v83;
    a1[104] = v82;
  }
  if (a1[740])
  {
    if (a1[729])
    {
      if (a8 >= 53016.0 || *((double *)a1 + 17) >= 3.0) {
        a1[1] = 0;
      }
      else {
        a1[1] = 3;
      }
    }
    else
    {
      int v84 = *a1;
      if (v84 != 3 && *a1)
      {
        int v85 = *((_DWORD *)a1 + 183);
      }
      else
      {
        int v85 = 0;
        if (a8 < 53016.0 && *((double *)a1 + 17) < 3.0) {
          int v85 = *((_DWORD *)a1 + 186) != 0;
        }
      }
      if (v85 == *((_DWORD *)a1 + 183))
      {
        unsigned int v86 = *((_DWORD *)a1 + 184) + 1;
        BOOL v87 = v86 > 0xA;
      }
      else
      {
        unsigned int v86 = 0;
        BOOL v87 = 0;
      }
      *((_DWORD *)a1 + 184) = v86;
      *((_DWORD *)a1 + 183) = v85;
      if (v84 == 3 || v87)
      {
        *((_DWORD *)a1 + 184) = 0;
        if (v85)
        {
          if (v84 == 3) {
            char v88 = 3;
          }
          else {
            char v88 = v84 + 1;
          }
        }
        else
        {
          BOOL v89 = v84 != 0;
          char v88 = v84 - 1;
          if (!v89) {
            char v88 = 0;
          }
        }
        a1[1] = v88;
      }
      if (a1[741])
      {
        a1[1] = 3;
        *(void *)(a1 + 732) = 0;
      }
    }
    if (a2) {
      a1[1] = a1[2];
    }
  }
  uint64_t v90 = *((void *)a1 + 87);
  if (*(_WORD *)(v90 + 4 * v82 + 2)) {
    double v14 = (double)*(__int16 *)(v90 + 4 * v82) * v14 / (double)*(__int16 *)(v90 + 4 * v82 + 2);
  }
  *((double *)a1 + 17) = v14;
  a1[105] = v25;
  a1[107] = 0;
  *((float *)a1 + 36) = v42;
  *a1 = a1[1];
  return v26;
}

uint64_t sub_1BBB0EA68(uint64_t result, uint64_t a2, double a3, int8x8_t a4, int8x8_t a5)
{
  if (*(unsigned char *)result)
  {
    int32x2_t v5 = (int32x2_t)0x41C8000041E80000;
  }
  else if (*(unsigned char *)(result + 760))
  {
    if (*(_DWORD *)(result + 744))
    {
      if (!*(unsigned char *)(a2 + 104))
      {
        int32x2_t v5 = (int32x2_t)0x41E00000420C0000;
        goto LABEL_3;
      }
    }
    else
    {
      if (*(unsigned char *)(result + 812))
      {
        int32x2_t v5 = vrev64_s32((int32x2_t)vcvt_f32_s32(qword_1BBB89A08[6 * *(int *)(result + 828) + *(int *)(result + 824)]));
        goto LABEL_3;
      }
      if (!*(unsigned char *)(a2 + 104))
      {
        int32x2_t v5 = (int32x2_t)0x42180000422C0000;
        goto LABEL_3;
      }
    }
    int32x2_t v5 = (int32x2_t)0x4220000042340000;
  }
  else
  {
    int v6 = *(_DWORD *)(result + 748);
    int v7 = *(_DWORD *)(result + 752);
    BOOL v8 = v6 == v7 && v7 * v6 <= 230400;
    if (v8 && *(float *)(result + 756) <= 30.0)
    {
      int32x2_t v5 = (int32x2_t)0x420C000042200000;
    }
    else
    {
      if (*(_DWORD *)(result + 744))
      {
        if (!*(unsigned char *)(result + 800)) {
          goto LABEL_20;
        }
        uint64_t v9 = *(void *)(result + 784);
        uint64_t v10 = *(char *)(result + 148);
        uint64_t v11 = v9 + 8 * v10;
        int v12 = *(__int16 *)(v11 + 4);
        int v13 = *(__int16 *)(v11 + 6);
        if (v12 > v13) {
          int v13 = v12;
        }
        int8x8_t v14 = (int8x8_t)0x41D0000042040000;
        if (v13 <= 320)
        {
          a5.i32[0] = 14.5;
          if (*(float *)(v9 + 8 * v10) <= 14.5) {
LABEL_20:
          }
            int8x8_t v14 = (int8x8_t)0x41E0000042040000;
        }
      }
      else
      {
        int8x8_t v14 = (int8x8_t)0x41E8000042100000;
      }
      a4.i32[0] = 0;
      a5.i8[0] = *(unsigned char *)(result + 729);
      int32x2_t v5 = (int32x2_t)vbsl_s8(vdup_lane_s8(vceq_s8(a5, a4), 0), v14, (int8x8_t)0x41E8000042080000);
    }
  }
LABEL_3:
  *(int32x2_t *)(result + 16) = v5;
  return result;
}

uint64_t sub_1BBB0EBB4(uint64_t result, int a2)
{
  int v2 = *(char *)(result + 148);
  int v3 = v2 + a2;
  if (v2 + a2 >= *(_DWORD *)(result + 152)) {
    int v3 = *(_DWORD *)(result + 152);
  }
  if (v3 != v2)
  {
    *(unsigned char *)(result + 802) = 0;
    *(_DWORD *)(result + 108) = 0;
    *(_DWORD *)(result + 808) = 0;
    *(unsigned char *)(result + 150) = v2;
    *(unsigned char *)(result + 148) = v3;
    *(unsigned char *)(*(void *)(result + 768) + 210) = *(unsigned __int16 *)(*(void *)(result + 784) + 8 * (char)v3 + 4) != *(unsigned __int16 *)(*(void *)(result + 784) + 8 * v2 + 4);
  }
  return result;
}

uint64_t sub_1BBB0EC14(uint64_t result, int a2)
{
  int v2 = 0;
  int v3 = 0;
  int v4 = a2 - 1;
  float v5 = 0.0;
  unsigned int v6 = a2 - 1;
  do
  {
    if (v4 + v2 >= 0)
    {
      float v7 = *(float *)(result + 4 * (v2 + v4 - 10 * (v6 / 0xA)) + 24);
      if (v7 > 0.0)
      {
        float v5 = v5 + v7;
        ++v3;
      }
    }
    --v2;
    --v6;
  }
  while (v2 != -4);
  if (v3 < 1)
  {
    int v10 = *(unsigned __int8 *)(result + 730);
    if (!*(unsigned char *)(result + 730)) {
      return result;
    }
    uint64_t v9 = (unsigned char *)(result + 730);
    float v8 = 0.0;
  }
  else
  {
    float v8 = v5 / (float)v3;
    uint64_t v9 = (unsigned char *)(result + 730);
    int v10 = *(unsigned __int8 *)(result + 730);
    if (!*(unsigned char *)(result + 730))
    {
      if (v8 > 26.0 && *(float *)(*(void *)(result + 784) + 8 * *(char *)(result + 148)) < 5.0) {
        *uint64_t v9 = 1;
      }
      return result;
    }
  }
  if (v10 == 1 && v8 < 30.0 && *(float *)(*(void *)(result + 784) + 8 * *(char *)(result + 148)) > 10.0) {
    *uint64_t v9 = 0;
  }
  return result;
}

int32x2_t sub_1BBB0ED0C(int32x2_t *a1, void *a2, int a3, int a4)
{
  float v7 = a1 + 607;
  if (a1[607].i8[0])
  {
    if (a3)
    {
      if (a4)
      {
        float v8 = a1 + 609;
        int32x2_t v9 = a1[a1[607].i32[1] + 609];
      }
      else
      {
        a1[612].i8[0] = 1;
        __int32 v24 = a1[607].i32[1];
        int32x2_t result = a1[608];
        *(int32x2_t *)((char *)a1 + 4860) = result;
        a1[608].i32[1] = v24;
        float v8 = a1 + 609;
        int32x2_t v9 = a1[result.i32[0] + 609];
      }
      a2[22] = v9;
      a2[21] = v8[a1[608].i32[1]];
      return result;
    }
    if (a4)
    {
      a2[22] = a1[a1[607].i32[1] + 609];
      a2[21] = a1[a1[608].i32[1] + 609];
LABEL_18:
      int32x2_t result = vrev64_s32(a1[608]);
      a1[608] = result;
      return result;
    }
    a1[612].i8[0] = 1;
    a2[22] = a1[a1[608].i32[0] + 609];
    a2[21] = a1[a1[608].i32[1] + 609];
LABEL_29:
    __int32 v34 = a1[607].i32[1];
    int32x2_t result = a1[608];
    *(int32x2_t *)((char *)v7 + 4) = result;
    a1[608].i32[1] = v34;
    return result;
  }
  if (!a3)
  {
    if (a4)
    {
      int8x8_t v20 = &a2[a1[608].i32[0]];
      char v23 = (const void *)v20[15];
      uint64_t v22 = v20 + 15;
      int v21 = v23;
      if (v23)
      {
        CFRelease(v21);
        *uint64_t v22 = 0;
      }
      a2[19] = a2[a1[607].i32[1] + 15];
      a2[18] = a2[a1[608].i32[1] + 15];
      a2[20] = 0;
      goto LABEL_18;
    }
    unsigned int v30 = &a2[a1[607].i32[1]];
    uint64_t v33 = (const void *)v30[15];
    int v32 = v30 + 15;
    BOOL v31 = v33;
    if (v33)
    {
      CFRelease(v31);
      *int v32 = 0;
    }
    a2[19] = a2[a1[608].i32[0] + 15];
    a2[18] = a2[a1[608].i32[1] + 15];
    goto LABEL_28;
  }
  int v10 = &a2[a1[608].i32[1]];
  int v13 = (const void *)v10[15];
  int v12 = v10 + 15;
  uint64_t v11 = v13;
  if (v13)
  {
    CFRelease(v11);
    *int v12 = 0;
  }
  if (!a4)
  {
    BOOL v25 = &a2[v7->i32[1]];
    BOOL v28 = (const void *)v25[15];
    int v27 = v25 + 15;
    float v26 = v28;
    if (v28)
    {
      CFRelease(v26);
      *int v27 = 0;
    }
    uint64_t v29 = a2[a1[608].i32[0] + 15];
    a2[18] = 0;
    a2[19] = v29;
LABEL_28:
    a2[20] = 0;
    goto LABEL_29;
  }
  uint64_t v15 = &a2[a1[608].i32[0]];
  double v18 = (const void *)v15[15];
  int v17 = v15 + 15;
  uint64_t v16 = v18;
  if (v18)
  {
    CFRelease(v16);
    *int v17 = 0;
  }
  uint64_t v19 = a2[a1[607].i32[1] + 15];
  a2[18] = 0;
  a2[19] = v19;
  a2[20] = 0;
  return result;
}

uint64_t sub_1BBB0EF10(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a6) {
    (*(void (**)(unint64_t))(a2 + 424))(a2);
  }
  sub_1BBB19320(a2);

  return sub_1BBB0EA68(a1, a2, v8, v9, v10);
}

double sub_1BBB0EF64(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56))
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      if (v4)
      {
        MEMORY[0x1C18605A0](v4, 0x1000C8077774924);
        uint64_t v3 = *(void *)(a1 + 48);
      }
      *(void *)(v3 + 8 * v2++) = 0;
    }
    while (v2 != *(_DWORD *)(a1 + 56));
  }
  float v5 = *(pthread_mutex_t **)a1;
  if (*(void *)a1) {
    pthread_mutex_destroy(*(pthread_mutex_t **)a1);
  }
  free(v5);
  unsigned int v6 = *(void **)(a1 + 8);
  if (v6) {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  }
  free(v6);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    MEMORY[0x1C18605A0](v7, 0x80C80B8603338);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    MEMORY[0x1C18605A0](v8, 0x80C80B8603338);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    MEMORY[0x1C18605A0](v9, 0x80C80B8603338);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

pthread_mutex_t *sub_1BBB0F058(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6 = *(pthread_mutex_t **)a1;
  if (v6) {
    pthread_mutex_lock(v6);
  }
  uint64_t v7 = a3;
  if (a3 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(unsigned int *)(a1 + 24);
      uint64_t v10 = *(void *)(a1 + 16);
      if (v9)
      {
        uint64_t v11 = 0;
        while (*(void *)(a2 + 8 * v8) != *(void *)(v10 + 8 * v11))
        {
          if (v9 == ++v11)
          {
            LODWORD(v11) = *(_DWORD *)(a1 + 24);
            break;
          }
        }
      }
      else
      {
        LODWORD(v11) = 0;
      }
      int v12 = v9 - 1;
      *(_DWORD *)(a1 + 24) = v12;
      *(void *)(v10 + 8 * v11) = *(void *)(v10 + 8 * v12);
      ++v8;
    }
    while (v8 != a3);
  }
  if (*(void *)a1) {
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  }
  int v13 = *(pthread_mutex_t **)(a1 + 8);
  if (v13) {
    pthread_mutex_lock(v13);
  }
  if (a3 >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(a2 + 8 * v14);
      int v16 = *(_DWORD *)(a1 + 40);
      if (v16 == *(_DWORD *)(a1 + 44))
      {
        *(_DWORD *)(a1 + 44) = 2 * v16 + 2;
        operator new[]();
      }
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = v16 + 1;
      *(void *)(v17 + 8 * v16) = v15;
      ++v14;
    }
    while (v14 != v7);
  }
  double result = *(pthread_mutex_t **)(a1 + 8);
  if (result)
  {
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  }
  return result;
}

double sub_1BBB0F204(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)a1 + 8 * v2);
      sub_1BBB0F058(*(void *)v3, v3 + 16, *(_DWORD *)(v3 + 2064));
      double result = 0.0;
      *(void *)(v3 + 2064) = 0;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 8));
  }
  return result;
}

uint64_t sub_1BBB0F268(int a1, uint64_t a2)
{
  if (!a2) {
    return 4294958327;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (v3)
  {
    uint64_t v5 = a2 + 216;
    unsigned int v6 = (uint64_t *)(a2 + 216);
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    do
    {
      uint64_t v8 = *v6;
      if (!*v6) {
        return 4294958327;
      }
      if (a1 || *(unsigned char *)(v8 + 1399) && !*(unsigned char *)(v8 + 1394))
      {
        uint64_t v9 = *(void **)(v8 + 5016);
        if (v9)
        {
          free(v9);
          *(void *)(v8 + 5016) = 0;
        }
        *(unsigned char *)(v8 + 2) = 0;
        *unsigned int v6 = 0;
      }
      ++v6;
      --v7;
    }
    while (v7);
    unsigned int v11 = 0;
    int v12 = (void *)(a2 + 216);
    do
    {
      if (*v12) {
        *(void *)(v5 + 8 * v11++) = *v12;
      }
      ++v12;
      --v3;
    }
    while (v3);
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 12) = v11;
  return result;
}

uint64_t sub_1BBB0F34C(int a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = -2147483647;
  int v5 = -1;
  do
  {
    uint64_t v6 = *(void *)(a3 + 8 * v3);
    if (!v6) {
      break;
    }
    if ((*(unsigned char *)(v6 + 1398) || *(unsigned char *)(v6 + 1402)) && *(unsigned char *)(v6 + 1394) && !*(unsigned char *)(v6 + 98))
    {
      int v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        int v4 = v7;
        int v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1) {
    return 0;
  }
  else {
    return *(void *)(a3 + 8 * v5);
  }
}

uint64_t sub_1BBB0F3D0(int a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = -1;
  int v5 = 0x7FFFFFFF;
  do
  {
    uint64_t v6 = *(void *)(a3 + 8 * v3);
    if (!v6) {
      break;
    }
    if (*(unsigned char *)(v6 + 1398) && *(unsigned char *)(v6 + 1394) && *(unsigned char *)(v6 + 1356))
    {
      int v7 = *(_DWORD *)(v6 + 1308);
      if (v7 > a1 && v7 < v5)
      {
        int v4 = v3;
        int v5 = v7;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v4 == -1) {
    return 0;
  }
  else {
    return *(void *)(a3 + 8 * v4);
  }
}

uint64_t sub_1BBB0F44C(int a1, void *a2)
{
  if (a1 < 1) {
    return 0;
  }
  LODWORD(v3) = a1;
  uint64_t result = 0;
  uint64_t v3 = v3;
  do
  {
    int v4 = (unsigned char *)*a2;
    if (!*a2) {
      break;
    }
    if (v4[1394] && v4[1398] && v4[1356])
    {
      if (v4[12]) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
    ++a2;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t sub_1BBB0F4A4(int a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0x7FFFFFFF;
  int v5 = -1;
  do
  {
    uint64_t v6 = *(void *)(a3 + 8 * v3);
    if (!v6) {
      break;
    }
    if (*(unsigned char *)(v6 + 1394)
      && *(unsigned char *)(v6 + 1398)
      && *(unsigned char *)(v6 + 1356)
      && *(unsigned char *)(v6 + 25)
      && !*(unsigned char *)(v6 + 13)
      && !*(unsigned char *)(v6 + 14))
    {
      int v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 < v4)
      {
        int v4 = v7;
        int v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1) {
    return 0;
  }
  else {
    return *(void *)(a3 + 8 * v5);
  }
}

uint64_t sub_1BBB0F538(int a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = -2147483647;
  int v5 = -1;
  do
  {
    uint64_t v6 = *(void *)(a3 + 8 * v3);
    if (!v6) {
      break;
    }
    if (*(unsigned char *)(v6 + 1394)
      && *(unsigned char *)(v6 + 1398)
      && *(unsigned char *)(v6 + 1356)
      && *(unsigned char *)(v6 + 25)
      && !*(unsigned char *)(v6 + 13)
      && !*(unsigned char *)(v6 + 14))
    {
      int v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        int v4 = v7;
        int v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1) {
    return 0;
  }
  else {
    return *(void *)(a3 + 8 * v5);
  }
}

uint64_t sub_1BBB0F5CC(int a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = -2147483647;
  int v5 = -1;
  do
  {
    uint64_t v6 = *(void *)(a3 + 8 * v3);
    if (!v6) {
      break;
    }
    if (*(unsigned char *)(v6 + 1394)
      && *(unsigned char *)(v6 + 1398)
      && *(unsigned char *)(v6 + 1356)
      && !*(unsigned char *)(v6 + 14)
      && *(unsigned char *)(v6 + 25))
    {
      int v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        int v4 = v7;
        int v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1) {
    return 0;
  }
  else {
    return *(void *)(a3 + 8 * v5);
  }
}

uint64_t sub_1BBB0F658(int a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0x7FFFFFFF;
  int v5 = -1;
  do
  {
    uint64_t v6 = *(void *)(a3 + 8 * v3);
    if (!v6) {
      break;
    }
    if (*(unsigned char *)(v6 + 1394)
      && *(unsigned char *)(v6 + 1398)
      && *(unsigned char *)(v6 + 1356)
      && !*(unsigned char *)(v6 + 14)
      && !*(unsigned char *)(v6 + 25))
    {
      int v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 < v4)
      {
        int v4 = v7;
        int v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1) {
    return 0;
  }
  else {
    return *(void *)(a3 + 8 * v5);
  }
}

uint64_t sub_1BBB0F6E4(int a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = -2147483647;
  int v5 = -1;
  do
  {
    uint64_t v6 = *(void *)(a3 + 8 * v3);
    if (*(unsigned char *)(v6 + 1394) && *(unsigned char *)(v6 + 1398) && *(unsigned char *)(v6 + 1356) && !*(unsigned char *)(v6 + 14))
    {
      int v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        int v4 = v7;
        int v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1) {
    return 0;
  }
  else {
    return *(void *)(a3 + 8 * v5);
  }
}

uint64_t sub_1BBB0F764(int32x2_t *a1)
{
  if (a1[169].i8[2])
  {
    a1[12].i8[0] = 0;
    a1[169].i8[2] = 0;
    a1[12].i8[5] = 0;
    __int32 v1 = a1[25].i32[0];
    if (a1[12].i8[1])
    {
      v1 *= 2;
      unsigned int v2 = 2 * a1[25].i32[1];
      int32x2_t v3 = vadd_s32(a1[27], a1[27]);
    }
    else
    {
      unsigned int v2 = a1[25].u32[1];
      int32x2_t v3 = a1[27];
    }
    a1[24].i32[0] = v1;
    a1[24].i32[1] = v2;
    a1[26] = v3;
    int32x2_t v4 = a1[168];
    if (!*(void *)&v4) {
      return 4294958327;
    }
    if (a1[12].i8[6])
    {
      __int32 v5 = *(_DWORD *)(*(void *)&v4 + 1292);
      a1[161].i32[1] = v5;
      __int32 v6 = a1[162].i32[0];
    }
    else
    {
      __int32 v6 = *(_DWORD *)(*(void *)&v4 + 1296);
      a1[162].i32[0] = v6;
      __int32 v5 = a1[161].i32[1];
    }
    if (v6 < v5) {
      __int32 v5 = v6;
    }
    a1[161].i32[0] = v5;
    a1[75] = vadd_s32(vdup_n_s32(v2), (int32x2_t)0xFFFFFFFF00000002);
    int32x2_t v8 = a1[61];
    if (v8)
    {
      *(_DWORD *)(*(void *)&v8 + 64) = 1;
      *(void *)(*(void *)&v8 + 56) = 0x100000001;
      *(_OWORD *)(*(void *)&v8 + 152) = xmmword_1BBB6FCD0;
    }
    int32x2_t v9 = a1[62];
    if (v9)
    {
      *(_DWORD *)(*(void *)&v9 + 64) = 1;
      *(void *)(*(void *)&v9 + 56) = 0x100000001;
      *(_OWORD *)(*(void *)&v9 + 152) = xmmword_1BBB6FCD0;
    }
    int32x2_t v10 = a1[63];
    if (v10)
    {
      *(_DWORD *)(*(void *)&v10 + 64) = 1;
      *(void *)(*(void *)&v10 + 56) = 0x100000001;
      *(_OWORD *)(*(void *)&v10 + 152) = xmmword_1BBB6FCD0;
    }
    sub_1BBB55064((uint64_t)&a1[12], a1[31].i32[0]);
  }
  return 0;
}

uint64_t sub_1BBB0F88C(int a1, int *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 1) {
    goto LABEL_16;
  }
  uint64_t v5 = 0;
  int v6 = -2147483647;
  int v7 = -1;
  do
  {
    uint64_t v8 = *(void *)(a4 + 8 * v5);
    if (!v8) {
      break;
    }
    if (v8 != a5 && *(unsigned char *)(v8 + 1394))
    {
      if (*(unsigned char *)(v8 + 1356)) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = *(unsigned __int8 *)(v8 + 101) == a1;
      }
      if (v9)
      {
        int v10 = *(_DWORD *)(v8 + 1288);
        if (v10 < *a2 && v10 > v6)
        {
          int v6 = v10;
          int v7 = v5;
        }
      }
    }
    ++v5;
  }
  while (a3 != v5);
  if (v7 == -1)
  {
LABEL_16:
    uint64_t result = 0;
    *a2 = -2147483647;
  }
  else
  {
    *a2 = v6;
    return *(void *)(a4 + 8 * v7);
  }
  return result;
}

uint64_t sub_1BBB0F924(int a1, int *a2, int a3, uint64_t a4)
{
  if (a3 < 1) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  int v5 = 0x7FFFFFFF;
  int v6 = -1;
  do
  {
    uint64_t v7 = *(void *)(a4 + 8 * v4);
    if (!v7) {
      break;
    }
    if (*(unsigned char *)(v7 + 1398) && *(unsigned char *)(v7 + 1394))
    {
      if (*(unsigned char *)(v7 + 1356)) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = *(unsigned __int8 *)(v7 + 101) == a1;
      }
      if (v8)
      {
        int v9 = *(_DWORD *)(v7 + 1288);
        if (v9 > *a2 && v9 < v5)
        {
          int v5 = v9;
          int v6 = v4;
        }
      }
    }
    ++v4;
  }
  while (a3 != v4);
  if (v6 == -1)
  {
LABEL_16:
    uint64_t result = 0;
    *a2 = 0x7FFFFFFF;
  }
  else
  {
    *a2 = v5;
    return *(void *)(a4 + 8 * v6);
  }
  return result;
}

uint64_t sub_1BBB0F9BC(uint64_t result)
{
  if (*(unsigned char *)(result + 1354)) {
    return result;
  }
  *(unsigned char *)(result + 96) = 1;
  *(unsigned char *)(result + 1354) = 1;
  unsigned int v1 = *(_DWORD *)(result + 200);
  if (!*(unsigned char *)(result + 97))
  {
    unsigned int v2 = *(_DWORD *)(result + 204) >> 1;
    *(_DWORD *)(result + 192) = v1 >> 1;
    *(_DWORD *)(result + 196) = v2;
    *(uint32x2_t *)(result + 208) = vshr_n_u32(*(uint32x2_t *)(result + 216), 1uLL);
    if (*(unsigned char *)(result + 102)) {
      goto LABEL_6;
    }
LABEL_8:
    int32x2_t v3 = (_DWORD *)(result + 1292);
    goto LABEL_9;
  }
  unsigned int v2 = *(_DWORD *)(result + 204);
  *(_DWORD *)(result + 192) = v1;
  *(_DWORD *)(result + 196) = v2;
  *(void *)(result + 208) = *(void *)(result + 216);
  if (!*(unsigned char *)(result + 102))
  {
    *(_DWORD *)(result + 1296) = 0x7FFFFFFF;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 1292) = 0x7FFFFFFF;
LABEL_6:
  int32x2_t v3 = (_DWORD *)(result + 1296);
LABEL_9:
  *(_DWORD *)(result + 1288) = *v3;
  *(int32x2_t *)(result + 600) = vadd_s32(vdup_n_s32(v2), (int32x2_t)0xFFFFFFFF00000002);
  uint64_t v4 = *(void *)(result + 488);
  if (v4)
  {
    *(_DWORD *)(v4 + 64) = 1;
    *(void *)(v4 + 56) = 0x100000001;
    *(_OWORD *)(v4 + 152) = xmmword_1BBB6FCD0;
  }
  uint64_t v5 = *(void *)(result + 496);
  if (v5)
  {
    *(_DWORD *)(v5 + 64) = 1;
    *(void *)(v5 + 56) = 0x100000001;
    *(_OWORD *)(v5 + 152) = xmmword_1BBB6FCD0;
  }
  uint64_t v6 = *(void *)(result + 504);
  if (v6)
  {
    *(_DWORD *)(v6 + 64) = 1;
    *(void *)(v6 + 56) = 0x100000001;
    *(_OWORD *)(v6 + 152) = xmmword_1BBB6FCD0;
  }
  return sub_1BBB55064(result + 96, *(_DWORD *)(result + 248));
}

uint64_t sub_1BBB0FACC(int a1, int *a2, int a3, uint64_t a4)
{
  if (a3 < 1) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  int v5 = -2147483647;
  int v6 = -1;
  do
  {
    uint64_t v7 = *(void *)(a4 + 8 * v4);
    if (!v7) {
      break;
    }
    if (*(unsigned char *)(v7 + 1398) && *(unsigned char *)(v7 + 1394))
    {
      if (*(unsigned char *)(v7 + 1356)) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = *(unsigned __int8 *)(v7 + 101) == a1;
      }
      if (v8)
      {
        int v9 = *(_DWORD *)(v7 + 1300);
        if (v9 < *a2 && v9 > v5)
        {
          int v5 = v9;
          int v6 = v4;
        }
      }
    }
    ++v4;
  }
  while (a3 != v4);
  if (v6 == -1)
  {
LABEL_16:
    uint64_t result = 0;
    *a2 = -2147483647;
  }
  else
  {
    *a2 = v5;
    return *(void *)(a4 + 8 * v6);
  }
  return result;
}

uint64_t sub_1BBB0FB64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 22824);
  if (v2 != *(void *)(a1 + 22816))
  {
    if (v2 && (uint64_t v3 = *(unsigned int *)(v2 + 12), v3))
    {
      uint64_t v4 = v2 + 216;
      while (1)
      {
        BOOL v5 = *(unsigned char *)(*(void *)v4 + 1399) != 0;
        if (!*(unsigned char *)(*(void *)v4 + 1399)) {
          break;
        }
        v4 += 8;
        if (!--v3) {
          goto LABEL_7;
        }
      }
      int v6 = 0;
    }
    else
    {
LABEL_7:
      BOOL v5 = 1;
      int v6 = 1;
    }
    if (*(void *)(a1 + 24544))
    {
      sub_1BBB0FCB0(a1, v2);
    }
    else
    {
      uint64_t result = sub_1BBB0FFA0(*(_DWORD *)(a1 + 8), v2);
      if (result) {
        return result;
      }
    }
    uint64_t result = sub_1BBB0F268(v6, *(void *)(a1 + 22824));
    if (result) {
      return result;
    }
    if (v5)
    {
      uint64_t v8 = a1 + 16;
      uint64_t v9 = *(void *)(a1 + 22824);
      if (v9 && v9 != a1 + 22056)
      {
        uint64_t v10 = a1 - 744;
        uint64_t v11 = 1;
        while (1)
        {
          v10 += 760;
          if (v10 == v9) {
            break;
          }
          if (++v11 == 30)
          {
            *(void *)(a1 + 22824) = 0;
            return 4294958327;
          }
        }
        v8 += 760 * v11;
      }
      *(void *)(a1 + 22824) = v8;
    }
  }
  uint64_t v12 = *(void *)(a1 + 22816);
  if (*(void *)(a1 + 24544))
  {
    sub_1BBB0FCB0(a1, v12);
  }
  else
  {
    uint64_t result = sub_1BBB0FFA0(*(_DWORD *)(a1 + 8), v12);
    if (result) {
      return result;
    }
  }
  uint64_t v13 = *(void *)(a1 + 22816);

  return sub_1BBB0F268(0, v13);
}

_DWORD *sub_1BBB0FCB0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(_DWORD **)(a1 + 24544);
  if (result)
  {
    BOOL v5 = (uint64_t *)(a2 + 216);
    while (2)
    {
      switch(*result)
      {
        case 0:
          do
          {
            *(void *)(a1 + 24544) = *((void *)result + 3);
            free(result);
            uint64_t result = *(_DWORD **)(a1 + 24544);
          }
          while (result);
          return result;
        case 1:
          uint64_t v14 = *(unsigned int *)(a2 + 12);
          if ((int)v14 >= 1)
          {
            uint64_t v15 = v5;
            do
            {
              uint64_t v16 = *v15;
              if (*(_DWORD *)(*v15 + 1300) == result[5])
              {
                if (*(unsigned char *)(v16 + 1398))
                {
                  if (!*(unsigned char *)(v16 + 1356))
                  {
                    *(unsigned char *)(v16 + 1394) = 0;
                    *(unsigned char *)(v16 + 1399) = 1;
                    uint64_t v17 = *(unsigned char **)(v16 + 1344);
                    if (v17)
                    {
                      if (v17[100])
                      {
                        v17[1394] = 0;
                        v17[1399] = 1;
                      }
                    }
                  }
                }
              }
              ++v15;
              --v14;
            }
            while (v14);
          }
          goto LABEL_49;
        case 2:
          uint64_t v18 = *(unsigned int *)(a2 + 12);
          if ((int)v18 >= 1)
          {
            uint64_t v19 = v5;
            do
            {
              uint64_t v20 = *v19;
              if (*(_DWORD *)(*v19 + 1308) == result[2])
              {
                if (*(unsigned char *)(v20 + 1398))
                {
                  if (*(unsigned char *)(v20 + 1356))
                  {
                    *(unsigned char *)(v20 + 1394) = 0;
                    *(unsigned char *)(v20 + 1356) = 0;
                    *(unsigned char *)(v20 + 12) = 0;
                    *(unsigned char *)(v20 + 1399) = 1;
                    int v21 = *(unsigned char **)(v20 + 1344);
                    if (v21)
                    {
                      if (v21[100])
                      {
                        v21[1394] = 0;
                        v21[1399] = 1;
                        v21[1356] = 0;
                        v21[12] = 0;
                      }
                    }
                  }
                }
              }
              ++v19;
              --v18;
            }
            while (v18);
          }
          goto LABEL_49;
        case 3:
        case 6:
          uint64_t v6 = *(unsigned int *)(a2 + 12);
          uint64_t v7 = v5;
          uint64_t v8 = v6;
          if ((int)v6 >= 1)
          {
            do
            {
              uint64_t v9 = *v7;
              if (*(unsigned char *)(*v7 + 1398))
              {
                if (*(unsigned char *)(v9 + 1356))
                {
                  if (*(_DWORD *)(v9 + 1308) == result[3])
                  {
                    *(unsigned char *)(v9 + 1394) = 0;
                    *(unsigned char *)(v9 + 1356) = 0;
                    *(unsigned char *)(v9 + 12) = 0;
                    *(unsigned char *)(v9 + 1399) = 1;
                    uint64_t v10 = *(unsigned char **)(v9 + 1344);
                    if (v10)
                    {
                      if (v10[100])
                      {
                        v10[1394] = 0;
                        v10[1399] = 1;
                        v10[1356] = 0;
                        v10[12] = 0;
                      }
                    }
                  }
                }
              }
              ++v7;
              --v8;
            }
            while (v8);
            uint64_t v11 = v5;
            do
            {
              uint64_t v12 = *v11;
              if (*(_DWORD *)(*v11 + 1300) == result[5])
              {
                if (*(unsigned char *)(v12 + 1398))
                {
                  *(unsigned char *)(v12 + 1356) = 1;
                  *(_DWORD *)(v12 + 1308) = result[3];
                  uint64_t v13 = *(void *)(v12 + 1344);
                  if (v13)
                  {
                    if (*(unsigned char *)(v13 + 100))
                    {
                      *(unsigned char *)(v13 + 1356) = 1;
                      *(_DWORD *)(v13 + 1308) = result[3];
                    }
                  }
                }
              }
              ++v11;
              --v6;
            }
            while (v6);
          }
          goto LABEL_49;
        case 4:
          *(_DWORD *)(a2 + 40) = result[4] - 1;
          if (*(_DWORD *)(a2 + 12))
          {
            unint64_t v22 = 0;
            do
            {
              uint64_t v23 = v5[v22];
              if (*(unsigned char *)(v23 + 1398))
              {
                if (*(unsigned char *)(v23 + 1356))
                {
                  if (*(_DWORD *)(v23 + 1308) > *(_DWORD *)(a2 + 40))
                  {
                    *(unsigned char *)(v23 + 1394) = 0;
                    *(unsigned char *)(v5[v22] + 1356) = 0;
                    *(_DWORD *)(v5[v22] + 1308) = -1;
                    uint64_t v24 = *(void *)(v5[v22] + 1344);
                    if (v24)
                    {
                      if (*(unsigned char *)(v24 + 100))
                      {
                        *(unsigned char *)(v24 + 1394) = 0;
                        *(unsigned char *)(v24 + 1399) = 1;
                        *(unsigned char *)(v24 + 1356) = 0;
                        *(_DWORD *)(v24 + 1308) = -1;
                        *(void *)(v5[v22] + 1344) = 0;
                      }
                    }
                  }
                }
              }
              ++v22;
            }
            while (v22 < *(unsigned int *)(a2 + 12));
          }
          goto LABEL_49;
        default:
LABEL_49:
          *(void *)(a1 + 24544) = *((void *)result + 3);
          free(result);
          uint64_t result = *(_DWORD **)(a1 + 24544);
          if (!result) {
            return result;
          }
          continue;
      }
    }
  }
  return result;
}

uint64_t sub_1BBB0FFA0(int a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if ((int)v2 < 1) {
    return (a1 >> 31) & 0xFFFFDCF7;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  BOOL v5 = (uint64_t *)(a2 + 216);
  int v6 = -1;
  int v7 = 0x7FFFFFFF;
  do
  {
    uint64_t v8 = v5[v3];
    if (*(unsigned char *)(v8 + 1394) && *(unsigned char *)(v8 + 1398) && (!*(unsigned char *)(v8 + 98) || !*(void *)(v8 + 1344)))
    {
      if (*(_DWORD *)(v8 + 1300) < v7 && !*(unsigned char *)(v8 + 1356))
      {
        int v6 = v3;
        int v7 = *(_DWORD *)(v8 + 1300);
      }
      ++v4;
    }
    ++v3;
  }
  while (v2 != v3);
  if (v4 <= a1) {
    return 0;
  }
  if (v6 < 0) {
    return 4294958327;
  }
  do
  {
    uint64_t v9 = *v5;
    if (*(_DWORD *)(*v5 + 1300) == v7)
    {
      if (*(unsigned char *)(v9 + 1398))
      {
        if (!*(unsigned char *)(v9 + 1356))
        {
          *(unsigned char *)(v9 + 1394) = 0;
          uint64_t v10 = *(unsigned char **)(v9 + 1344);
          if (v10)
          {
            if (v10[100])
            {
              v10[1394] = 0;
              v10[1399] = 1;
              *(void *)(v9 + 1344) = 0;
            }
          }
        }
      }
    }
    ++v5;
    --v2;
  }
  while (v2);
  if (v4 - 1 == a1) {
    return 0;
  }
  else {
    return 4294958327;
  }
}

uint64_t sub_1BBB100A4(uint64_t result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    int v6 = (unsigned char *)(result + 1);
    do
    {
      __int16 v8 = *a5++;
      __int16 v7 = v8;
      unsigned int v9 = *a4++;
      a2 += v9;
      *(v6 - 1) = (unsigned __int16)(a2[2] * v7 + (16 - v7) * *a2 + 128) >> 8;
      *int v6 = (unsigned __int16)(a2[3] * v7 + (16 - v7) * a2[1] + 128) >> 8;
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

unsigned char *sub_1BBB1010C(unsigned char *result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    do
    {
      __int16 v7 = *a5++;
      __int16 v6 = v7;
      __int16 v8 = 16 - v7;
      unsigned int v9 = *a4++;
      a2 += v9;
      *result++ = (unsigned __int16)(a2[1] * v6 + v8 * *a2 + 128) >> 8;
      --v5;
    }
    while (v5);
  }
  return result;
}

_WORD *sub_1BBB10154(_WORD *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, __int16 a5)
{
  if (a4 >= 1)
  {
    uint64_t v5 = a4;
    do
    {
      __int16 v6 = *a2++;
      __int16 v7 = (16 - a5) * v6;
      __int16 v8 = *a3++;
      *result++ = v7 + v8 * a5;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1BBB10188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 22344);
  uint64_t v7 = *(void *)(a1 + 22352);
  uint64_t v8 = *(void *)(a1 + 22336);
  if (*(void *)(a1 + 22328) == v6) {
    uint64_t v6 = *(void *)(a1 + 352);
  }
  uint64_t v130 = *(void *)(a1 + 22328);
  uint64_t v126 = v6;
  uint64_t v124 = v8;
  if (v8 == v7) {
    uint64_t v7 = *(void *)(a1 + 368);
  }
  uint64_t v125 = v7;
  unint64_t v131 = (unint64_t)&v123;
  uint64_t v9 = *(int *)(a1 + 22312);
  uint64_t v11 = (char *)*(unsigned int *)(a1 + 22376);
  int v10 = *(_DWORD *)(a1 + 22380);
  int v12 = *(_DWORD *)(a1 + 22304);
  LODWORD(v133) = *(_DWORD *)(a1 + 22372);
  uint64_t v13 = MEMORY[0x1F4188790](a1, a2, *(void *)(a1 + 208), *(void *)(a1 + 216), a5, a6);
  uint64_t v15 = (char *)&v123 - v14;
  uint64_t v21 = MEMORY[0x1F4188790](v13, v16, v17, v18, v19, v20);
  uint64_t v27 = MEMORY[0x1F4188790](v21, v23, v24, v25, (char *)&v123 - ((v22 + 15) & 0x1FFFFFFF0), v26);
  int v35 = (unsigned char *)(((unint64_t)&v123 - ((v33 + 15) & 0x1FFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0);
  int v127 = v36;
  int v128 = (void *)v27;
  if ((int)v11 < 1)
  {
    unint64_t v40 = ((unint64_t)&v123 - ((v33 + 15) & 0x1FFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0;
    int v48 = (void (*)(uint64_t, unint64_t, void, char *, unint64_t))v31;
    int v45 = v30;
    uint64_t v46 = v29;
    uint64_t v39 = v34;
    if ((int)v11 < -15) {
      goto LABEL_12;
    }
    int v47 = 0;
  }
  else
  {
    unsigned int v37 = 0;
    char v38 = 0;
    uint64_t v39 = v34;
    unint64_t v40 = (unint64_t)v35;
    float v41 = v31;
    float v42 = v11;
    int v43 = (v34 << 16) / (int)v11;
    do
    {
      unsigned int v44 = HIWORD(v37);
      *v35++ = (unsigned __int16)v37 >> 12;
      v37 += v43;
      *v41++ = v44 - v38;
      char v38 = v44;
      --v42;
    }
    while (v42);
    int v45 = v30;
    uint64_t v46 = v29;
    int v47 = (int)v11;
  }
  int v48 = (void (*)(uint64_t, unint64_t, void, char *, unint64_t))v31;
  bzero(&v31[v47], (v11 - v47 + 15) + 1);
LABEL_12:
  unint64_t v134 = v40;
  int v135 = v48;
  double v136 = v45;
  int v137 = v11;
  uint64_t v49 = v9;
  uint64_t v50 = v130;
  if (v10 >= 1)
  {
    uint64_t v51 = v39;
    unsigned int v52 = v46;
    unsigned int v53 = 0;
    int v54 = v133 << 16;
    unint64_t v55 = (unint64_t)(v15 + 30) & 0xFFFFFFFFFFFFFFF0;
    int v56 = v133 - 1;
    uint64_t v133 = (int)v51 - 1;
    uint64_t v57 = v126;
    LODWORD(v132) = v54 / v10;
    do
    {
      unsigned int v58 = HIWORD(v53);
      uint64_t v59 = (unsigned __int16)v53 >> 12;
      v53 += v132;
      uint64_t v60 = v50 + (int)(v58 * v12);
      if (v56 >= (int)(v58 + 1)) {
        unsigned int v61 = v58 + 1;
      }
      else {
        unsigned int v61 = v56;
      }
      v52(v55, v60, v50 + (int)(v61 * v12), v51, v59);
      unint64_t v62 = v134;
      *(_WORD *)(v55 + 2 * v51) = *(_WORD *)(v55 + 2 * v133);
      v136(v57, v55, v137, v135, v62);
      v57 += v49;
      --v10;
    }
    while (v10);
  }
  uint64_t v123 = (uint64_t)&v123;
  uint64_t v63 = (int)v127[3];
  unsigned int v64 = v127[19];
  unint64_t v65 = (unint64_t)v127[18] >> 1;
  int v66 = v127[1];
  int v67 = v127[16];
  LODWORD(v133) = v127[17];
  uint64_t v68 = (void (*)(unint64_t, uint64_t, uint64_t))v128[26];
  unsigned int v69 = (void (*)(uint64_t, unint64_t, void, char *, unint64_t))v128[28];
  uint64_t v70 = MEMORY[0x1F4188790](v63, v28, v29, v67 & 0xFFFFFFFFFFFFFFFELL, v31, v32);
  unsigned int v72 = (char *)&v123 - v71;
  uint64_t v78 = MEMORY[0x1F4188790](v70, v73, v74, v75, v76, v77);
  double v80 = (char *)&v123 - v79;
  uint64_t v86 = MEMORY[0x1F4188790](v78, v81, v82, v83, v84, v85);
  double v91 = (unsigned char *)(((unint64_t)&v123 - ((v90 + 15) & 0x1FFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v131 = (unint64_t)v89;
  if (v92 < 2)
  {
    double v93 = v91;
    uint64_t v94 = v86;
    LODWORD(v95) = 0;
LABEL_26:
    uint64_t v103 = v87;
    bzero(&v80[v95], (v65 - v95 + 15) + 1);
    uint64_t v87 = v103;
    goto LABEL_27;
  }
  unsigned int v96 = 0;
  char v97 = 0;
  signed int v98 = (v89 << 15) & 0xFFFF0000;
  if (v65 <= 1) {
    uint64_t v95 = 1;
  }
  else {
    uint64_t v95 = v65;
  }
  double v93 = v91;
  double v99 = v80;
  uint64_t v100 = v95;
  int v101 = v98 / (int)v65;
  do
  {
    unsigned int v102 = HIWORD(v96);
    *v91++ = (unsigned __int16)v96 >> 12;
    v96 += v101;
    *v99++ = 2 * (v102 - v97);
    char v97 = v102;
    --v100;
  }
  while (v100);
  uint64_t v94 = v86;
  if (v95 < v88) {
    goto LABEL_26;
  }
LABEL_27:
  unint64_t v134 = (unint64_t)v93;
  int v135 = v69;
  double v136 = (void (*)(uint64_t, unint64_t, char *, void, unint64_t))v65;
  int v137 = v80;
  uint64_t v104 = v124;
  if (v64 >= 2)
  {
    uint64_t v105 = v94;
    uint8x8_t v106 = v68;
    unsigned int v107 = 0;
    unsigned int v108 = v133 >> 1 << 16;
    unint64_t v109 = (unint64_t)(v72 + 30) & 0xFFFFFFFFFFFFFFF0;
    signed int v110 = (v133 >> 1) - 1;
    uint64_t v132 = (int)v87;
    uint64_t v133 = v87 - 2;
    uint64_t v130 = (int)v87 - 1;
    v131 |= 1uLL;
    if (v64 >> 1 <= 1) {
      int v111 = 1;
    }
    else {
      int v111 = v64 >> 1;
    }
    int v129 = v108 / (v64 >> 1);
    uint64_t v112 = v125;
    do
    {
      unsigned int v113 = HIWORD(v107);
      v107 += v129;
      uint64_t v114 = v104 + (int)(v113 * v66);
      if (v110 >= (int)(v113 + 1)) {
        signed int v115 = v113 + 1;
      }
      else {
        signed int v115 = v110;
      }
      uint64_t v116 = v87;
      v106(v109, v114, v104 + v115 * v66);
      *(_WORD *)(v109 + 2 * v132) = *(_WORD *)(v109 + 2 * v133);
      *(_WORD *)(v109 + 2 * v131) = *(_WORD *)(v109 + 2 * v130);
      v135(v112, v109, v136, v137, v134);
      uint64_t v87 = v116;
      v112 += v105;
      --v111;
    }
    while (v111);
  }
  uint8x8_t v118 = v127;
  double v117 = v128;
  uint64_t v119 = v126;
  if (v128[2791] == v128[2793] && v127[19])
  {
    unsigned int v120 = 0;
    do
    {
      memcpy((void *)(v117[2793] + v118[2] * v120), (const void *)(v119 + v118[2] * v120), v118[18]);
      ++v120;
    }
    while (v120 < v118[19]);
  }
  uint64_t v121 = v125;
  if (v117[2792] == v117[2794] && v118[19] >= 2u)
  {
    unsigned int v122 = 0;
    do
    {
      memcpy((void *)(v117[2794] + v118[3] * v122), (const void *)(v121 + v118[3] * v122), v118[18]);
      ++v122;
    }
    while (v122 < v118[19] >> 1);
  }
}

uint64_t sub_1BBB10724(unsigned int a1, unsigned int a2, int a3, unsigned char *a4)
{
  if (!a4) {
    return 4294958327;
  }
  if (a1 <= 1)
  {
    if (a2 <= 0x19)
    {
      if (a2 | a1 | a3)
      {
        if (a2 | a1 || a3 != 1)
        {
          uint64_t result = 0;
          char v6 = 2;
        }
        else
        {
          uint64_t result = 0;
          char v6 = 7;
        }
      }
      else
      {
        uint64_t result = 0;
        char v6 = 1;
      }
      a4[15] = v6;
      return result;
    }
    return 4294958327;
  }
  if (a1 == 2)
  {
    if (a2 > 4) {
      return 4294958327;
    }
LABEL_13:
    a4[15] = byte_1BBB89B40[a2];
    a4[31] = byte_1BBB89B45[a2];
    if (a2 - 3 > 1) {
      return 0;
    }
    uint64_t result = 0;
    a4[47] = 0;
    a4[63] = 0;
    return result;
  }
  if (a1 == 4 && !a2) {
    goto LABEL_13;
  }
  uint64_t result = 4294958327;
  if (a1 == 3 && a2 <= 0x16)
  {
    uint64_t result = 0;
    a4[15] = asc_1BBB9A37F[a2];
    a4[31] = byte_1BBB89B5A[a2];
  }
  return result;
}

uint64_t sub_1BBB10820(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  int v7 = 0;
  unsigned int v8 = 0;
  do
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 4 * v6);
    if (a2 == 2)
    {
      if ((v9 & 0xFC) != 0) {
        return 4294958327;
      }
      *(_DWORD *)(a4 + 4 * v6) = 4;
      int v10 = byte_1BBB89BB6[v9];
      *(_DWORD *)(a5 + 4 * v6) = v10;
      uint64_t v11 = (unsigned __int8 *)&unk_1BBB89BBA + v9;
      int v12 = (unsigned __int8 *)&unk_1BBB89BBE + v9;
      if (!v10) {
        goto LABEL_38;
      }
LABEL_12:
      int v13 = 0;
      unsigned int v14 = 4 * v6;
      int v15 = *v11;
      int v16 = *v12;
      BOOL v17 = v15 == 8;
      BOOL v18 = v16 == 8 && v15 == 8;
      BOOL v19 = v15 == 4;
      BOOL v20 = v16 == 4 && v19;
      BOOL v21 = v16 == 4 && v17;
      int v22 = v7;
      uint64_t v23 = a6 + 16 * v7;
      int v24 = v10;
      while (1)
      {
        if (v24 > 4) {
          return 4294958327;
        }
        *(unsigned char *)(v23 + 15) = *(_DWORD *)(a4 + 4 * v6);
        int v25 = *(_DWORD *)(a5 + 4 * v6);
        if (v18)
        {
          if (v25 != 1) {
            return 4294958327;
          }
          *(_WORD *)(a6 + 10) &= word_1BBB89B38[v14 >> 2];
          v14 += 4;
          if (*(_DWORD *)(a4 + 4 * v6) == 3) {
            *(void *)uint64_t v23 = 0;
          }
        }
        else
        {
          if (v20)
          {
            if (v25 != 4) {
              return 4294958327;
            }
            __int16 v26 = *(_WORD *)(a6 + 10) & word_1BBB89B38[v14 >> 2];
            int v27 = 3 << (2 * (v14 >> 2));
          }
          else
          {
            if (v21)
            {
              if (v25 != 2) {
                return 4294958327;
              }
              *(_WORD *)(a6 + 10) = (*(_WORD *)(a6 + 10) & word_1BBB89B38[v14 >> 2]) + (2 << (2 * (v14 >> 2)));
              v14 += 2;
              goto LABEL_36;
            }
            if (v25 != 2) {
              return 4294958327;
            }
            __int16 v26 = *(_WORD *)(a6 + 10) & word_1BBB89B38[v14 >> 2];
            int v27 = 1 << (2 * (v14 >> 2));
          }
          *(_WORD *)(a6 + 10) = v26 + v27;
          ++v14;
        }
LABEL_36:
        int v24 = *(_DWORD *)(a5 + 4 * v6);
        ++v13;
        v23 += 16;
        if (v13 >= v24)
        {
          int v7 = v22 + v13;
          goto LABEL_38;
        }
      }
    }
    if (v9 > 0xC) {
      return 4294958327;
    }
    *(_DWORD *)(a4 + 4 * v6) = byte_1BBB89BC2[v9];
    if (!a1 || v9)
    {
      int v10 = byte_1BBB89BCF[v9];
      *(_DWORD *)(a5 + 4 * v6) = v10;
      uint64_t v11 = (unsigned __int8 *)&unk_1BBB89BDC + v9;
      int v12 = (unsigned __int8 *)&unk_1BBB89BE9 + v9;
      if (v10) {
        goto LABEL_12;
      }
    }
    else
    {
      int v10 = byte_1BBB89BF6[v9];
      *(_DWORD *)(a5 + 4 * v6) = v10;
      uint64_t v11 = (unsigned __int8 *)&unk_1BBB89C03 + v9;
      int v12 = (unsigned __int8 *)&unk_1BBB89C10 + v9;
      if (v10) {
        goto LABEL_12;
      }
    }
LABEL_38:
    v8 += v10;
    ++v6;
  }
  while (v6 != 4);
  if (v8 > 0x10) {
    return 4294958327;
  }
  uint64_t result = 0;
  *(unsigned char *)(a6 + 256) = v8;
  return result;
}

uint64_t sub_1BBB10A94(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 *)(result + 188);
  unsigned int v3 = *(unsigned __int8 *)(result + 28);
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  if (v3 <= 8)
  {
    int v6 = 1 << v3;
    if ((v6 & 0x129) != 0)
    {
      *(_WORD *)(v5 + 1) = 4;
      *(unsigned char *)(v4 + 272) = 1;
      *(unsigned char *)(v4 + 31) = 4;
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 16785408;
      *(_DWORD *)(v4 + 8) = 4;
    }
    else if ((v6 & 0x42) != 0)
    {
      *(_WORD *)(v5 + 1) = 5;
      uint64_t result = sub_1BBB5FB64(v4);
    }
  }
  *(unsigned char *)(*(void *)(v1 + 176) + 182) = *(unsigned char *)(*(void *)(v1 + 48) + 272);
  if (v2)
  {
    uint64_t v7 = *(void *)(v1 + 176);
    *(unsigned char *)(v7 + 176) = 1;
    *(unsigned char *)(v7 + 177) = *(unsigned char *)(v5 + 1);
    *(unsigned char *)(v7 + 178) = *(unsigned char *)(v5 + 2);
    *(unsigned char *)(v7 + 199) = 0;
    unsigned int v8 = (char *)(v4 + 25);
    for (uint64_t i = 128; i != 144; ++i)
    {
      int v10 = (unsigned char *)(v7 + i);
      unsigned char *v10 = *(v8 - 1);
      char v11 = *v8;
      v8 += 16;
      v10[16] = v11;
    }
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
  }
  *(unsigned char *)(v5 + 3) = 0;
  *(_DWORD *)(*(void *)(v1 + 48) + 8) = *(unsigned __int8 *)(v4 + 31);
  return result;
}

uint64_t sub_1BBB10BA8(uint64_t result, unsigned __int8 a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int v5 = a3[1];
  uint64_t v6 = a3[2];
  *a4 = result;
  a4[1] = a2;
  if (v5 == 4)
  {
    if (!v6)
    {
      a4[272] = 1;
      a4[31] = 4;
      *((_DWORD *)a4 + 4) = 0;
      *((_DWORD *)a4 + 6) = 16785408;
      *((_DWORD *)a4 + 2) = 4;
    }
  }
  else if (v5 == 5)
  {
    if (!v6)
    {
      return sub_1BBB5FB64((uint64_t)a4);
    }
  }
  else
  {
    if (v5 == 3 && v6 == 0)
    {
      uint64_t result = sub_1BBB5FB64((uint64_t)a4);
    }
    else
    {
      int v9 = a3[3];
      switch(v5)
      {
        case 0u:
          if (v6 <= 0x19) {
            goto LABEL_18;
          }
          break;
        case 1u:
          if (!v6) {
            goto LABEL_18;
          }
          break;
        case 2u:
          if (v6 <= 4)
          {
            char v11 = (unsigned __int8 *)&unk_1BBB89B4A;
            goto LABEL_23;
          }
          break;
        case 3u:
          if (v6 <= 0x16)
          {
            char v11 = (unsigned __int8 *)&unk_1BBB89B71;
LABEL_23:
            unsigned int v10 = v11[v6];
            goto LABEL_26;
          }
          break;
        case 4u:
          unsigned int v10 = 1;
          goto LABEL_26;
        case 5u:
          unsigned int v10 = 16;
          goto LABEL_26;
        default:
LABEL_18:
          unsigned int v10 = 0;
LABEL_26:
          a4[272] = v10;
          uint64_t result = sub_1BBB10724(v5, v6, v9, a4 + 16);
          if (result) {
            break;
          }
          *((_DWORD *)a4 + 2) = a4[31];
          if (v5 < 2) {
            break;
          }
          if (v10 > 3) {
            goto LABEL_36;
          }
          if (v5 == 2)
          {
            int v12 = (unsigned __int16 *)&unk_1BBB89B50;
          }
          else
          {
            if (v5 != 3)
            {
LABEL_36:
              a4[31] = 0;
              *((_DWORD *)a4 + 2) = 0;
              break;
            }
            int v12 = (unsigned __int16 *)&unk_1BBB89B88;
          }
          int v13 = v12[v6];
          if (v13 == 2064)
          {
            if (v10 != 2) {
              break;
            }
            __int16 v14 = 258;
          }
          else if (v13 == 4112)
          {
            __int16 v14 = 256;
          }
          else
          {
            if (v10 != 2) {
              break;
            }
            __int16 v14 = 257;
          }
          *((_WORD *)a4 + 13) = v14;
          break;
      }
    }
    if (v5 | v6 && *((_DWORD *)a4 + 2) != 2 && a4[272] == 4)
    {
      int v15 = *a4;
      int v16 = a3[1];
      return sub_1BBB10820(v15, v16, (uint64_t)(a3 + 4), (uint64_t)(a3 + 20), (uint64_t)(a3 + 36), (uint64_t)(a4 + 16));
    }
  }
  return result;
}

void sub_1BBB10E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, char a11)
{
  if (a11 < 2)
  {
    if (a11 == 1)
    {
      if (!a6) {
        return;
      }
      uint64_t v19 = *(unsigned int *)(a6 + 1276);
      unsigned int v20 = *(unsigned __int8 *)(*(void *)(a3 + 360) + v19);
      unsigned int v21 = *(unsigned __int8 *)(*(void *)(a3 + 480) + v19);
      if (v20 > 0x13 || ((1 << v20) & 0x80007) == 0)
      {
        *(_DWORD *)(a6 + 1280) = v19 - *(_DWORD *)(a1 + 68);
      }
      else
      {
        *(_DWORD *)(a6 + 1280) = 0;
        *(_DWORD *)(a1 + 68) = v19;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a6 + 1332);
      }
      unsigned __int8 v43 = v21 & 0xF;
      unsigned int v44 = v21 >> 4;
      goto LABEL_131;
    }
    if (*(unsigned char *)(a2 + 316))
    {
      if (*(unsigned char *)(a2 + 316) != 1) {
        goto LABEL_109;
      }
      if (*(__int16 *)(a2 + 326) > 0)
      {
        if (!a6) {
          return;
        }
        uint64_t v27 = *(unsigned int *)(a6 + 1276);
        if (v27 != -1 && *(unsigned char *)(a6 + 1357))
        {
          if (*(_DWORD *)(a3 + 192) > v27) {
            *(unsigned char *)(*(void *)(a3 + 360) + v27) = 19;
          }
          *(_DWORD *)(a6 + 1280) = 0;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(a6 + 1332);
        }
        goto LABEL_110;
      }
    }
    int v70 = 0;
    if (a10)
    {
      uint64_t v28 = *(unsigned int *)(a10 + 1276);
      if (*(_DWORD *)(a3 + 192) > v28) {
        *(unsigned char *)(*(void *)(a3 + 368) + v28) = *(_DWORD *)(a10 + 5004);
      }
    }
    if (!a6 || *(unsigned char *)(a2 + 325))
    {
      if (!a10 || *(unsigned char *)(a2 + 325) != 1) {
        goto LABEL_109;
      }
      sub_1BBB11600(a1, a2, a10, a9);
      int v29 = *(unsigned __int8 *)(a10 + 1357);
      if (*(unsigned char *)(a10 + 1357))
      {
        if (*(_DWORD *)(a10 + 1276))
        {
          if (a8)
          {
            uint64_t v30 = *(unsigned int *)(a8 + 1276);
            uint64_t v31 = *(void *)(a3 + 360);
            unsigned int v32 = *(unsigned __int8 *)(v31 + v30);
            if (v32 > 0x17 || ((1 << v32) & 0xC8066F) == 0)
            {
              if (*(_DWORD *)(a3 + 192) > v30) {
                *(unsigned char *)(v31 + v30) = 5;
              }
              *(unsigned char *)(a1 + 40) = 1;
              int v29 = *(unsigned __int8 *)(a10 + 1357);
            }
          }
        }
      }
      unsigned int v33 = *(_DWORD *)(a10 + 1276);
      unsigned int v34 = *(_DWORD *)(a3 + 192);
      if (v34 <= v33) {
        unsigned int v35 = v34 - 1;
      }
      else {
        unsigned int v35 = *(_DWORD *)(a10 + 1276);
      }
      char v36 = sub_1BBB11B1C(a1, (__int16 *)a2, v33, *(_DWORD *)(a10 + 1332), *(void *)(a1 + 8), *(unsigned __int8 *)(*(void *)(a3 + 368) + v35), v29, &v70, *(float *)(a10 + 5012));
      unsigned int v37 = *(_DWORD *)(a10 + 1276);
LABEL_100:
      if (v37 != -1)
      {
        unsigned int v61 = *(_DWORD *)(a3 + 192);
        if (v61 > v37)
        {
          *(unsigned char *)(*(void *)(a3 + 360) + v37) = v36;
          unsigned int v61 = *(_DWORD *)(a3 + 192);
        }
        if (v61 > v37)
        {
          unsigned int v62 = *(unsigned __int8 *)(a1 + 80);
          char v63 = v70;
          if (v70 >= 0xFu) {
            char v63 = 15;
          }
          *(unsigned char *)(*(void *)(a3 + 480) + v37) = *(unsigned char *)(*(void *)(a3 + 480) + v37) & 0xF0 | v63;
          if (v62 >= 0xF) {
            LOBYTE(v62) = 15;
          }
          *(unsigned char *)(*(void *)(a3 + 480) + v37) = *(unsigned char *)(*(void *)(a3 + 480) + v37) & 0xF | (16 * v62);
        }
      }
LABEL_109:
      if (!a6) {
        return;
      }
LABEL_110:
      if (*(unsigned char *)(a2 + 325) == 1) {
        sub_1BBB11600(a1, a2, a6, a9);
      }
      unsigned int v64 = *(_DWORD *)(a6 + 1276);
      if (v64)
      {
        if (!*(unsigned char *)(a6 + 1354))
        {
          unsigned __int8 v43 = 0;
          unsigned int v20 = 5;
          if (!*(unsigned char *)(a2 + 460)) {
            goto LABEL_130;
          }
          if (!(v64 % (*(unsigned __int8 *)(a1 + 18) + 1)) || *(unsigned char *)(a1 + 16) != 0) {
            goto LABEL_130;
          }
          goto LABEL_128;
        }
        if (*(unsigned char *)(a1 + 18))
        {
          if ((v64 & 3) == 0)
          {
            unsigned __int8 v43 = 0;
            unsigned int v20 = 5;
            goto LABEL_130;
          }
          unsigned __int8 v43 = 0;
          unsigned int v20 = 5;
          if (!*(unsigned char *)(a2 + 460) || (((_BYTE)v64 - 1) & 3) == 0) {
            goto LABEL_130;
          }
        }
        else
        {
          unsigned __int8 v43 = 0;
          unsigned int v20 = 5;
          if (!*(unsigned char *)(a2 + 460)) {
            goto LABEL_130;
          }
        }
        if (!*(unsigned char *)(a1 + 16))
        {
LABEL_128:
          unsigned __int8 v43 = 1;
          unsigned int v20 = 12;
        }
      }
      else
      {
        unsigned int v20 = 0;
        unsigned __int8 v43 = 0;
        int v65 = *(_DWORD *)(a6 + 1332);
        *(_DWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 76) = v65;
        *(_WORD *)(a1 + 65) = 1798;
        *(_DWORD *)(a1 + 68) = 0;
      }
LABEL_130:
      *(_DWORD *)(a6 + 1280) = v64;
      LOBYTE(v44) = *(unsigned char *)(a1 + 80);
LABEL_131:
      sub_1BBB123A0(a4, v20, v43, v44);
      char v67 = 0;
      *(unsigned char *)(a6 + 1368) = *(_DWORD *)a4;
      *(unsigned char *)(a6 + 1393) = *(unsigned char *)(a4 + 4);
      *(unsigned char *)(a6 + 1392) = *(unsigned char *)(a4 + 5);
      *(unsigned char *)(a6 + 1394) = *(unsigned char *)(a4 + 6);
      *(unsigned char *)(a6 + 1396) = *(unsigned char *)(a4 + 10);
      *(unsigned char *)(a6 + 1356) = 0;
      *(unsigned char *)(a6 + 1359) = *(unsigned char *)(a4 + 8);
      *(unsigned char *)(a6 + 1360) = *(unsigned char *)(a4 + 9);
      unsigned int v68 = *(_DWORD *)(a4 + 12) - 6;
      if (v68 <= 0xF) {
        char v67 = byte_1BBB70240[v68];
      }
      *(unsigned char *)(a6 + 1397) = v67;
      *(unsigned char *)(a6 + 1404) = *(unsigned char *)(a4 + 16);
      *(unsigned char *)(a6 + 1403) = *(unsigned char *)(a4 + 17);
      return;
    }
    int v45 = *(unsigned __int8 *)(a6 + 1357);
    sub_1BBB11600(a1, a2, a6, a9);
    if (v45)
    {
      if (*(_DWORD *)(a6 + 1276))
      {
        if (a5)
        {
          uint64_t v46 = *(unsigned int *)(a5 + 1276);
          uint64_t v47 = *(void *)(a3 + 360);
          unsigned int v48 = *(unsigned __int8 *)(v47 + v46);
          if (v48 > 0x17 || ((1 << v48) & 0xC8066F) == 0)
          {
            if (*(_DWORD *)(a3 + 192) > v46) {
              *(unsigned char *)(v47 + v46) = 5;
            }
            *(unsigned char *)(a1 + 40) = 1;
          }
        }
      }
    }
    if (*(__int16 *)(a2 + 326) < 1)
    {
      int v49 = 0;
    }
    else
    {
      int v49 = *(_DWORD *)(a6 + 5004);
      if (!a7)
      {
        int v69 = 0;
        if (*(unsigned char *)(a2 + 235))
        {
          unsigned int v50 = *(unsigned __int16 *)(a6 + 4838);
          goto LABEL_97;
        }
        goto LABEL_96;
      }
    }
    int v69 = 0;
    if (*(unsigned char *)(a2 + 235))
    {
      unsigned int v50 = *(unsigned __int16 *)(a6 + 4838);
      if (a7)
      {
        unsigned int v60 = *(unsigned __int16 *)(a7 + 4838);
LABEL_98:
        char v36 = sub_1BBB1185C(a1, (_DWORD *)a6, v45, v49, *(unsigned __int8 *)(a2 + 324), v50, v60, &v69, &v70);
        goto LABEL_99;
      }
LABEL_97:
      unsigned int v60 = -1;
      goto LABEL_98;
    }
LABEL_96:
    char v36 = sub_1BBB116A8(a1, (_DWORD *)a6, v45, v49, 1, 1, 1, *(unsigned __int8 *)(a6 + 1354), *(unsigned char *)(a2 + 324), &v69, &v70);
LABEL_99:
    *(_DWORD *)(a6 + 1280) = v69;
    unsigned int v37 = *(_DWORD *)(a6 + 1276);
    goto LABEL_100;
  }
  if (a6)
  {
    a9 = sub_1BBB11600(a1, a2, a6, a9);
    if (!*(unsigned char *)(a2 + 325))
    {
      int v23 = *(_DWORD *)(a6 + 1276);
      int v24 = *(unsigned __int8 *)(a6 + 1357);
      if (*(unsigned char *)(a6 + 1357) && v23) {
        sub_1BBB11F50(a1, a5);
      }
      if (*(__int16 *)(a2 + 326) < 1)
      {
        int v25 = 0;
      }
      else
      {
        int v25 = *(_DWORD *)(a6 + 5004);
        if (!a7)
        {
          int v69 = 0;
          if (*(unsigned char *)(a2 + 235))
          {
            unsigned int v26 = *(unsigned __int16 *)(a6 + 4838);
            goto LABEL_54;
          }
          goto LABEL_47;
        }
      }
      int v69 = 0;
      if (*(unsigned char *)(a2 + 235))
      {
        unsigned int v26 = *(unsigned __int16 *)(a6 + 4838);
        if (a7)
        {
          unsigned int v38 = *(unsigned __int16 *)(a7 + 4838);
LABEL_55:
          unsigned int v41 = sub_1BBB1185C(a1, (_DWORD *)a6, v24, v25, *(unsigned __int8 *)(a2 + 324), v26, v38, &v70, &v69);
LABEL_56:
          if (v41 > 0x13 || ((1 << v41) & 0x80007) == 0)
          {
            *(_DWORD *)(a6 + 1280) = v23 - *(_DWORD *)(a1 + 68);
          }
          else
          {
            *(_DWORD *)(a6 + 1280) = 0;
            *(_DWORD *)(a1 + 68) = v23;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(a6 + 1332);
          }
          sub_1BBB123A0(a4, v41, v69, *(unsigned char *)(a1 + 80));
          char v51 = 0;
          *(unsigned char *)(a6 + 1368) = *(_DWORD *)a4;
          *(unsigned char *)(a6 + 1393) = *(unsigned char *)(a4 + 4);
          *(unsigned char *)(a6 + 1392) = *(unsigned char *)(a4 + 5);
          *(unsigned char *)(a6 + 1394) = *(unsigned char *)(a4 + 6);
          *(unsigned char *)(a6 + 1396) = *(unsigned char *)(a4 + 10);
          *(unsigned char *)(a6 + 1356) = 0;
          *(unsigned char *)(a6 + 1359) = *(unsigned char *)(a4 + 8);
          *(unsigned char *)(a6 + 1360) = *(unsigned char *)(a4 + 9);
          unsigned int v52 = *(_DWORD *)(a4 + 12) - 6;
          if (v52 <= 0xF) {
            char v51 = byte_1BBB70240[v52];
          }
          *(unsigned char *)(a6 + 1397) = v51;
          *(unsigned char *)(a6 + 1404) = *(unsigned char *)(a4 + 16);
          *(unsigned char *)(a6 + 1403) = *(unsigned char *)(a4 + 17);
          goto LABEL_76;
        }
LABEL_54:
        unsigned int v38 = -1;
        goto LABEL_55;
      }
LABEL_47:
      if (*(unsigned char *)(a2 + 663)) {
        BOOL v39 = v24 != 0;
      }
      else {
        BOOL v39 = 1;
      }
      if (v24) {
        BOOL v40 = *(unsigned char *)(a2 + 663) == 0;
      }
      else {
        BOOL v40 = 1;
      }
      unsigned int v41 = sub_1BBB116A8(a1, (_DWORD *)a6, v24, v25, v39, v39, v40, *(unsigned __int8 *)(a6 + 1354), *(unsigned char *)(a2 + 324), &v70, &v69);
      goto LABEL_56;
    }
  }
LABEL_76:
  if (a10)
  {
    sub_1BBB11600(a1, a2, a10, a9);
    if (*(unsigned char *)(a2 + 325) == 1)
    {
      int v53 = *(_DWORD *)(a10 + 1276);
      if (*(unsigned char *)(a10 + 1357)) {
        BOOL v54 = v53 == 0;
      }
      else {
        BOOL v54 = 1;
      }
      int v55 = *(_DWORD *)(a10 + 1276);
      if (!v54)
      {
        sub_1BBB11F50(a1, a8);
        int v55 = *(_DWORD *)(a10 + 1276);
      }
      if (v55) {
        unsigned __int8 v56 = *(unsigned char *)(a10 + 5004);
      }
      else {
        unsigned __int8 v56 = 0;
      }
      *(unsigned char *)(a1 + 64) = v56;
      int v70 = 0;
      unsigned int v57 = sub_1BBB11B1C(a1, (__int16 *)a2, v53, *(_DWORD *)(a10 + 1332), *(void *)(a1 + 8), v56, *(unsigned __int8 *)(a10 + 1357), &v70, *(float *)(a10 + 5012));
      if (v57 > 2)
      {
        *(_DWORD *)(a10 + 1280) = v53 - *(_DWORD *)(a1 + 68);
      }
      else
      {
        *(_DWORD *)(a10 + 1280) = 0;
        *(_DWORD *)(a1 + 68) = v53;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a10 + 1332);
      }
      sub_1BBB123A0(a4, v57, v70, *(unsigned char *)(a1 + 80));
      char v58 = 0;
      *(unsigned char *)(a10 + 1368) = *(_DWORD *)a4;
      *(unsigned char *)(a10 + 1393) = *(unsigned char *)(a4 + 4);
      *(unsigned char *)(a10 + 1392) = *(unsigned char *)(a4 + 5);
      *(unsigned char *)(a10 + 1394) = *(unsigned char *)(a4 + 6);
      *(unsigned char *)(a10 + 1396) = *(unsigned char *)(a4 + 10);
      *(unsigned char *)(a10 + 1356) = 0;
      *(unsigned char *)(a10 + 1359) = *(unsigned char *)(a4 + 8);
      *(unsigned char *)(a10 + 1360) = *(unsigned char *)(a4 + 9);
      unsigned int v59 = *(_DWORD *)(a4 + 12) - 6;
      if (v59 <= 0xF) {
        char v58 = byte_1BBB70240[v59];
      }
      *(unsigned char *)(a10 + 1397) = v58;
      *(unsigned char *)(a10 + 1404) = *(unsigned char *)(a4 + 16);
      *(unsigned char *)(a10 + 1403) = *(unsigned char *)(a4 + 17);
    }
  }
}

float sub_1BBB11600(uint64_t a1, uint64_t a2, uint64_t a3, float result)
{
  if (!*(_DWORD *)(a2 + 304) && !*(_DWORD *)(a3 + 1276))
  {
    uint64_t result = *(float *)(a3 + 4940);
    if (result != *(float *)(a2 + 60))
    {
      uint64_t result = result * *(float *)(a2 + 312);
      *(_DWORD *)(a1 + 28) = result;
      if (*(unsigned char *)(a2 + 398)) {
        *(_DWORD *)(a1 + 28) = 2 * result;
      }
    }
  }
  if (!*(_DWORD *)(a2 + 300) && !*(_DWORD *)(a3 + 1276))
  {
    uint64_t result = *(float *)(a3 + 4940);
    if (result != 0.0 && result != *(float *)(a2 + 60))
    {
      float v5 = *(float *)(a2 + 308);
      if (v5 != 0.0)
      {
        uint64_t result = result * v5;
        *(_DWORD *)(a1 + 24) = result;
        if (*(unsigned char *)(a2 + 398)) {
          *(_DWORD *)(a1 + 24) = 2 * result;
        }
      }
    }
  }
  if (!*(_DWORD *)(a3 + 1276))
  {
    uint64_t result = *(float *)(a3 + 4940);
    *(float *)(a1 + 20) = result;
  }
  return result;
}

uint64_t sub_1BBB116A8(uint64_t a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, _DWORD *a10, int *a11)
{
  unsigned int v11 = a2[319];
  unsigned int v12 = v11;
  if (a6) {
    unsigned int v12 = v11 - *(_DWORD *)(a1 + 68);
  }
  int v13 = a2[333];
  unsigned int v14 = a2[319];
  if (a5) {
    unsigned int v14 = v11 - *(_DWORD *)(a1 + 72);
  }
  unsigned int v15 = a2[334];
  unsigned int v16 = v13 - *(_DWORD *)(a1 + 76);
  unsigned int v17 = *(_DWORD *)(a1 + 28);
  if (v17 && !(v12 % v17))
  {
    BOOL v19 = 1;
  }
  else
  {
    float v18 = *(float *)(a1 + 36) * (float)v15;
    BOOL v19 = v18 > 0.0 && v18 <= (float)v16;
  }
  unsigned int v20 = *(_DWORD *)(a1 + 24);
  if (v20)
  {
    int v21 = v14 % v20;
    if (!v21)
    {
LABEL_15:
      if (!v11) {
        goto LABEL_37;
      }
      goto LABEL_18;
    }
  }
  float v22 = *(float *)(a1 + 32) * (float)v15;
  if (v22 > 0.0)
  {
    int v21 = v22 > (float)v16;
    goto LABEL_15;
  }
  int v21 = 1;
  if (!v11) {
    goto LABEL_37;
  }
LABEL_18:
  if (a6)
  {
    if (a4) {
      BOOL v19 = 1;
    }
    if (a3 || v19)
    {
LABEL_37:
      if (!a7 || v12 != 1 || v17 == 1)
      {
        unsigned int v12 = 0;
        uint64_t v25 = 0;
        int v26 = 0;
        *(unsigned char *)(a1 + 19) = 0;
        *(_DWORD *)(a1 + 72) = v11;
        *(_DWORD *)(a1 + 76) = v13;
        *(_WORD *)(a1 + 65) = 1798;
        *(_DWORD *)(a1 + 68) = v11;
        goto LABEL_44;
      }
      if (a5) {
        goto LABEL_41;
      }
      goto LABEL_43;
    }
  }
  if (a5) {
    int v23 = v21;
  }
  else {
    int v23 = 1;
  }
  if (v23 != 1)
  {
LABEL_41:
    int v26 = 0;
    *(unsigned char *)(a1 + 19) = 0;
    *(_DWORD *)(a1 + 72) = v11;
    *(unsigned char *)(a1 + 66) = 7;
    uint64_t v25 = 3;
    goto LABEL_44;
  }
  if (a8 && *(unsigned char *)(a1 + 18) && ((v12 & 3) == 0 || (((_BYTE)v12 - 1) & 3) == 0)
    || (int v24 = *(unsigned __int8 *)(a1 + 19), v24 == *(unsigned __int8 *)(a1 + 18))
    || *(unsigned char *)(a1 + 16) == 4)
  {
LABEL_43:
    int v26 = 0;
    *(unsigned char *)(a1 + 19) = 0;
    uint64_t v25 = 5;
    goto LABEL_44;
  }
  *(unsigned char *)(a1 + 19) = v24 + 1;
  if (a9) {
    uint64_t v25 = 7;
  }
  else {
    uint64_t v25 = 12;
  }
  int v26 = 1;
LABEL_44:
  *a10 = v12;
  *a11 = v26;
  return v25;
}

uint64_t sub_1BBB1185C(uint64_t a1, _DWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, _DWORD *a8, int *a9)
{
  int v9 = a2[319];
  unsigned int v10 = v9 - *(_DWORD *)(a1 + 68);
  int v11 = a2[333];
  if (v9) {
    BOOL v12 = a3 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12 || (unsigned int v15 = a2[334], (v16 = *(_DWORD *)(a1 + 28)) != 0) && !(v10 % v16))
  {
LABEL_5:
    if (v10 == 1)
    {
      int v13 = 0;
      if (*(_DWORD *)(a1 + 28) == 1) {
        LODWORD(v14) = 0;
      }
      else {
        LODWORD(v14) = 3;
      }
      goto LABEL_39;
    }
LABEL_38:
    LODWORD(v14) = 0;
    int v13 = 0;
    goto LABEL_39;
  }
  unsigned int v17 = v11 - *(_DWORD *)(a1 + 76);
  float v18 = (float)v15;
  float v19 = *(float *)(a1 + 36) * (float)v15;
  if (v19 <= 0.0)
  {
    if (a4) {
      goto LABEL_5;
    }
  }
  else if (a4 || v19 <= (float)v17)
  {
    goto LABEL_5;
  }
  unsigned int v20 = *(_DWORD *)(a1 + 24);
  if (v20 && !((v9 - *(_DWORD *)(a1 + 72)) % v20)
    || ((float v21 = *(float *)(a1 + 32) * v18, v21 > 0.0) ? (v22 = v21 > (float)v17) : (v22 = 1), !v22))
  {
    int v13 = 0;
    LODWORD(v14) = 3;
    goto LABEL_39;
  }
  int v13 = 0;
  int v23 = *(unsigned __int8 *)(a1 + 82);
  LODWORD(v14) = 5;
  if (*(unsigned __int8 *)(a1 + 81) - 1 != v23 && *(unsigned char *)(a1 + 16) != 4)
  {
    if ((v23 & 1) == 0)
    {
      if (a5 > 2) {
        LODWORD(v14) = 0;
      }
      else {
        LODWORD(v14) = dword_1BBB89C20[a5];
      }
      int v13 = *(unsigned __int8 *)(a1 + 80) - 1;
      goto LABEL_39;
    }
    if ((v23 & 3) == 1)
    {
      int v13 = *(unsigned __int8 *)(a1 + 80) - 2;
      LODWORD(v14) = 10;
      goto LABEL_39;
    }
    if ((v23 & 7) == 3)
    {
      int v13 = *(unsigned __int8 *)(a1 + 80) - 3;
      LODWORD(v14) = 13;
      goto LABEL_39;
    }
    if ((v23 & 0xF) == 0xF)
    {
      int v13 = *(unsigned __int8 *)(a1 + 80) - 5;
      LODWORD(v14) = 20;
      goto LABEL_39;
    }
    if ((v23 & 0xF) == 7)
    {
      int v13 = *(unsigned __int8 *)(a1 + 80) - 4;
      LODWORD(v14) = 15;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (a6 <= 2 * a7) {
    unsigned int v24 = 7;
  }
  else {
    unsigned int v24 = 5;
  }
  if (*(unsigned char *)(a1 + 80) != 2 || v14 != 7 || a7 >= 0xFFFFFFF) {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v14 = v24;
  }
  switch((int)v14)
  {
    case 0:
    case 1:
    case 2:
    case 19:
      unsigned int v10 = 0;
      *(unsigned char *)(a1 + 19) = 0;
      *(_DWORD *)(a1 + 72) = v9;
      *(_DWORD *)(a1 + 76) = v11;
      *(_WORD *)(a1 + 65) = 1798;
      *(_DWORD *)(a1 + 68) = v9;
      goto LABEL_59;
    case 3:
    case 17:
      *(unsigned char *)(a1 + 19) = 0;
      *(_DWORD *)(a1 + 72) = v9;
      *(unsigned char *)(a1 + 66) = 7;
      goto LABEL_59;
    case 4:
    case 18:
      ++*(unsigned char *)(a1 + 19);
      *(_DWORD *)(a1 + 72) = v9;
      *(unsigned char *)(a1 + 66) = 7;
      goto LABEL_57;
    case 5:
    case 6:
      *(unsigned char *)(a1 + 19) = 0;
LABEL_59:
      *(unsigned char *)(a1 + 82) = 0;
      break;
    case 7:
    case 8:
    case 11:
    case 12:
    case 14:
    case 16:
      ++*(unsigned char *)(a1 + 19);
      goto LABEL_57;
    case 9:
    case 10:
    case 13:
    case 15:
    case 20:
      *(unsigned char *)(a1 + 19) = 0;
LABEL_57:
      ++*(unsigned char *)(a1 + 82);
      break;
    default:
      break;
  }
  *a8 = v10;
  *a9 = v13;
  return v14;
}

uint64_t sub_1BBB11B1C(uint64_t a1, __int16 *a2, int a3, int a4, uint64_t a5, int a6, int a7, int *a8, float a9)
{
  int v15 = *(unsigned __int8 *)(a1 + 17);
  if (a3 < 1)
  {
    if (!a3)
    {
LABEL_21:
      char v21 = 0;
      unsigned int v22 = 0;
      goto LABEL_30;
    }
    unsigned int v17 = *(_DWORD *)(a1 + 28);
    goto LABEL_20;
  }
  unsigned int v16 = a3 - *(_DWORD *)(a1 + 68);
  unsigned int v17 = *(_DWORD *)(a1 + 28);
  int v18 = v16 % v17;
  if (a2[163])
  {
    if (a7 || !v18) {
      *(unsigned char *)(a1 + 65) = 3;
    }
    if ((a3 - *(_DWORD *)(a1 + 72)) % *(_DWORD *)(a1 + 24)) {
      goto LABEL_20;
    }
    char v19 = 5;
    goto LABEL_19;
  }
  if (!v18) {
    goto LABEL_14;
  }
  if (!((v16 + 1) % v17))
  {
    char v20 = 2;
    goto LABEL_16;
  }
  if (a7 || *(unsigned char *)(a1 + 65) == 2)
  {
LABEL_14:
    char v20 = 1;
LABEL_16:
    *(unsigned char *)(a1 + 65) = v20;
  }
  if (!((a3 - *(_DWORD *)(a1 + 72)) % *(_DWORD *)(a1 + 24)))
  {
    char v19 = 4;
LABEL_19:
    *(unsigned char *)(a1 + 66) = v19;
  }
LABEL_20:
  if (v17 == 1) {
    goto LABEL_21;
  }
  if (v15 == 4) {
    goto LABEL_28;
  }
  int v23 = *(unsigned __int8 *)(a1 + 65);
  if (v23 == 2) {
    goto LABEL_28;
  }
  if (v23 == 1) {
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 66) == 4) {
    goto LABEL_26;
  }
  if (a6) {
    goto LABEL_28;
  }
  unsigned int v22 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
LABEL_26:
    char v21 = 0;
    unsigned int v22 = 3;
    goto LABEL_30;
  }
  if (v22 == 5) {
    goto LABEL_29;
  }
  if (v22 == 1)
  {
    char v21 = 0;
    if (v23 == 3) {
      unsigned int v22 = 0;
    }
    else {
      unsigned int v22 = 3;
    }
    if (v23 != 3 && a3 >= 1)
    {
      float v26 = sub_1BBB11DC8(a2, a5);
      if (*(void *)(a1 + 56) && v26 > 0.005)
      {
LABEL_28:
        unsigned int v22 = 5;
LABEL_29:
        char v21 = 1;
        goto LABEL_30;
      }
      sub_1BBB11E84(a1, a5, a3);
      char v21 = 0;
      unsigned int v22 = 12;
    }
  }
  else
  {
    sub_1BBB11E84(a1, a5, a3);
    unsigned int v22 = 5;
    if (a9 >= 0.999) {
      goto LABEL_29;
    }
    BOOL v28 = v27 >= 2.0 || *(void *)(a1 + 56) == 0;
    char v21 = v28;
    if (v28) {
      unsigned int v22 = 5;
    }
    else {
      unsigned int v22 = 12;
    }
  }
LABEL_30:
  if ((v21 & (*(unsigned char *)(a1 + 66) == 5)) != 0) {
    uint64_t result = 3;
  }
  else {
    uint64_t result = v22;
  }
  if (result >= 3)
  {
    if (result == 5)
    {
      int v25 = 0;
      *(unsigned char *)(a1 + 40) = 1;
      goto LABEL_41;
    }
    if (result == 12)
    {
      ++*(unsigned char *)(a1 + 40);
      int v25 = 1;
      goto LABEL_41;
    }
    *(_DWORD *)(a1 + 72) = a3;
    *(unsigned char *)(a1 + 66) = 7;
    *(unsigned char *)(a1 + 40) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 72) = a3;
    *(_DWORD *)(a1 + 76) = a4;
    *(_WORD *)(a1 + 65) = 1798;
    *(_DWORD *)(a1 + 68) = a3;
    *(unsigned char *)(a1 + 40) = 1;
  }
  int v25 = dword_1BBB89C2C[result];
LABEL_41:
  *a8 = v25;
  return result;
}

float sub_1BBB11DC8(__int16 *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = *(int **)(a2 + 16);
    float v5 = 0.0;
    float v6 = 0.0;
    do
    {
      int v7 = *v4;
      v4 += 9;
      float v8 = (double)(((v7 >> 16) + 2) >> 2) / ((double)(((__int16)v7 + 2) >> 2) + 0.00001);
      float v9 = atanf(v8);
      float v5 = v5 + v9;
      float v6 = v6 + (float)(v9 * v9);
      --v3;
    }
    while (v3);
    float v10 = v6 - v5;
  }
  else
  {
    float v10 = 0.0;
  }
  return v10 / (float)(a1[1] * *a1 - 1);
}

uint64_t sub_1BBB11E84(uint64_t result, uint64_t a2, int a3)
{
  *(void *)(result + 56) = 0;
  if (a3 >= 1)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      float v6 = 0.0;
      do
      {
        int v7 = (((__int16)*(_DWORD *)(*(void *)(a2 + 16) + v5) + 2) >> 2)
           + (((*(int *)(*(void *)(a2 + 16) + v5) >> 16) + 2) >> 2);
        uint64_t v8 = *(void *)(result + 48);
        *(void *)(result + 56) += v7;
        int v9 = *(unsigned __int8 *)(result + 40);
        if (v9 == 1)
        {
          *(_WORD *)(v8 + v4) = v7;
          float v6 = 0.0;
        }
        else
        {
          int v10 = v7 - *(__int16 *)(v8 + v4) * v9;
          if (v10 < 0) {
            int v10 = -v10;
          }
          float v6 = v6 + (float)v10;
        }
        v5 += 36;
        v4 += 2;
      }
      while (36 * v3 != v5);
    }
    *(uint64_t *)(result + 56) /= (uint64_t)(v3 * *(unsigned __int8 *)(result + 40));
  }
  return result;
}

uint64_t sub_1BBB11F50(uint64_t result, uint64_t a2)
{
  if (a2 && !*(unsigned char *)(a2 + 1394))
  {
    char v2 = *(unsigned char *)(a2 + 1404);
    unsigned int v3 = *(unsigned __int8 *)(result + 80);
    if (v3 >= 0xF) {
      LOBYTE(v3) = 15;
    }
    *(unsigned char *)(a2 + 1368) = 0;
    *(_WORD *)(a2 + 1392) = 0;
    *(unsigned char *)(a2 + 1394) = 1;
    *(_WORD *)(a2 + 1396) = 1;
    *(unsigned char *)(a2 + 1356) = 0;
    *(_WORD *)(a2 + 1359) = 255;
    *(unsigned char *)(a2 + 1404) = v2 & 0xF | (16 * v3);
    *(unsigned char *)(a2 + 1403) = 0;
    *(unsigned char *)(result + 40) = 1;
  }
  return result;
}

void *sub_1BBB11FAC(uint64_t a1, int a2)
{
  uint64_t v4 = malloc_type_malloc(0xB0uLL, 0x4CF1F002uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    v4[2] = a1;
    *(unsigned char *)uint64_t v4 = 0;
    *((_DWORD *)v4 + 1) = a2;
    v4[1] = sub_1BBAF9CE4();
  }
  return v5;
}

uint64_t sub_1BBB12008(unsigned __int8 *a1)
{
  if (*a1) {
    return 0;
  }
  unsigned int v3 = (pthread_mutex_t *)*((void *)a1 + 1);
  if (!v3 || (pthread_mutex_lock(v3), (int v4 = *a1) == 0))
  {
    uint64_t v5 = *((void *)a1 + 2);
    int v6 = *((_DWORD *)a1 + 1);
    *((void *)a1 + 5) = sub_1BBAF9CE4();
    int v7 = sub_1BBAF9CE4();
    *((void *)a1 + 6) = v7;
    if (!*((void *)a1 + 5)) {
      goto LABEL_14;
    }
    if (!v7) {
      goto LABEL_14;
    }
    *((void *)a1 + 17) = sub_1BBAF9CE4();
    uint64_t v8 = sub_1BBAF9CE4();
    *((void *)a1 + 18) = v8;
    if (!*((void *)a1 + 17)) {
      goto LABEL_14;
    }
    if (!v8) {
      goto LABEL_14;
    }
    *((_DWORD *)a1 + 16) = 1;
    *((void *)a1 + 7) = 0x100000001;
    *(_OWORD *)(a1 + 152) = xmmword_1BBB6FCD0;
    unsigned int v9 = *(_DWORD *)(v5 + 132);
    unsigned int v10 = *(_DWORD *)(v5 + 100) << ((v6 - 3) < 2);
    *((void *)a1 + 9) = *(void *)(v5 + 32);
    uint64_t v11 = (v10 + 64) * (v9 + 64) - 1;
    *((void *)a1 + 10) = malloc_type_calloc((unint64_t)(v11 + qword_1E9F82E38) >> qword_1E9F82E40, qword_1E9F82E38, 0x68FC2D8FuLL);
    *((void *)a1 + 11) = malloc_type_calloc((unint64_t)(v11 + qword_1E9F82E38) >> qword_1E9F82E40, qword_1E9F82E38, 0x68FC2D8FuLL);
    BOOL v12 = (char *)malloc_type_calloc((unint64_t)(v11 + qword_1E9F82E38) >> qword_1E9F82E40, qword_1E9F82E38, 0x68FC2D8FuLL);
    *((void *)a1 + 12) = v12;
    uint64_t v13 = *((void *)a1 + 10);
    if (!v13) {
      goto LABEL_14;
    }
    uint64_t v14 = *((void *)a1 + 11);
    if (!v14) {
      goto LABEL_14;
    }
    if (v12
      && (int v15 = (v9 >> 4) + 4,
          *((void *)a1 + 13) = *((void *)a1 + 9),
          *((void *)a1 + 14) = v13 + (32 * *(_DWORD *)(v5 + 136)) + 32,
          *((void *)a1 + 15) = v14 + (32 * *(_DWORD *)(v5 + 136)) + 32,
          *((void *)a1 + 16) = &v12[32 * *(_DWORD *)(v5 + 136) + 32],
          unsigned int v16 = malloc_type_calloc((qword_1E9F82E38 + ((unint64_t)(((v10 >> 4) + 4) * v15) << 10) - 1) >> qword_1E9F82E40, qword_1E9F82E38, 0x68FC2D8FuLL), (*((void *)a1 + 3) = v16) != 0))
    {
      *((_DWORD *)a1 + 8) = v15 << 10;
      int v4 = 1;
    }
    else
    {
LABEL_14:
      sub_1BBB54FA0((uint64_t)a1);
      int v4 = 0;
    }
    *a1 = v4;
  }
  unsigned int v17 = (pthread_mutex_t *)*((void *)a1 + 1);
  if (v17)
  {
    pthread_mutex_unlock(v17);
    int v4 = *a1;
  }
  if (v4) {
    return 0;
  }
  else {
    return 4294967188;
  }
}

void sub_1BBB12228(uint64_t a1)
{
  char v2 = *(void **)(a1 + 8);
  if (v2) {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  }
  free(v2);
  *(void *)(a1 + 8) = 0;
  if (*(unsigned char *)a1)
  {
    sub_1BBB54FA0(a1);
  }
}

uint64_t sub_1BBB1228C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 156);
  if (v2)
  {
    unsigned int v3 = *(pthread_mutex_t **)(result + 136);
    if (!v3 || (pthread_mutex_lock(v3), *(_DWORD *)(v1 + 156)))
    {
      *(_DWORD *)(v1 + 156) = 0;
      if (byte_1E9F82E68) {
        sub_1BBB555C0(v1);
      }
      else {
        MEMORY[0](v1);
      }
    }
    uint64_t result = *(void *)(v1 + 136);
    if (result) {
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)result);
    }
  }
  int v4 = *(_DWORD *)(v1 + 160);
  if (v4)
  {
    uint64_t v5 = *(pthread_mutex_t **)(v1 + 144);
    if (!v5 || (pthread_mutex_lock(v5), *(_DWORD *)(v1 + 160)))
    {
      *(_DWORD *)(v1 + 160) = 0;
      if (byte_1E9F82E70) {
        sub_1BBB556E4(v1);
      }
      else {
        MEMORY[0](v1);
      }
    }
    uint64_t result = *(void *)(v1 + 144);
    if (result) {
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)result);
    }
  }
  if (!v2)
  {
    uint64_t result = *(void *)(v1 + 136);
    if (result)
    {
      pthread_mutex_lock((pthread_mutex_t *)result);
      uint64_t result = *(void *)(v1 + 136);
      if (result) {
        uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)result);
      }
    }
  }
  if (!v4)
  {
    uint64_t result = *(void *)(v1 + 144);
    if (result)
    {
      pthread_mutex_lock((pthread_mutex_t *)result);
      uint64_t result = *(void *)(v1 + 144);
      if (result) {
        uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)result);
      }
    }
  }
  *(_DWORD *)(v1 + 152) = 0;
  return result;
}

uint64_t sub_1BBB123A0(uint64_t result, int a2, unsigned __int8 a3, unsigned __int8 a4)
{
  int v4 = 0;
  if (a2 == 19) {
    int v5 = 0;
  }
  else {
    int v5 = a2;
  }
  *(_DWORD *)(result + 12) = v5;
  char v6 = 0;
  char v7 = 0;
  char v8 = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 19:
      char v6 = 1;
      int v4 = 2;
      char v7 = 1;
      goto LABEL_15;
    case 3:
    case 17:
    case 22:
    case 23:
      LOBYTE(v4) = 1;
      goto LABEL_7;
    case 4:
    case 18:
LABEL_7:
      char v6 = 0;
      char v7 = v4;
      char v8 = 1;
      int v4 = 2;
      break;
    case 5:
      LOBYTE(v4) = 1;
      goto LABEL_11;
    case 6:
      int v4 = 0;
      char v6 = 0;
      char v8 = 0;
      char v7 = 1;
      break;
    case 7:
LABEL_11:
      char v6 = 0;
      char v7 = v4;
      char v8 = 1;
      int v4 = 0;
      break;
    case 8:
      break;
    case 9:
      LOBYTE(v4) = 1;
      goto LABEL_14;
    case 10:
    case 13:
    case 15:
    case 20:
      LOBYTE(v4) = 1;
      goto LABEL_9;
    case 11:
LABEL_14:
      char v6 = 0;
      char v7 = v4;
      int v4 = 1;
LABEL_15:
      char v8 = 1;
      break;
    case 12:
    case 14:
    case 16:
    case 21:
LABEL_9:
      char v6 = 0;
      char v8 = 0;
      char v7 = v4;
      int v4 = 1;
      break;
    default:
      char v6 = 0;
      char v7 = 0;
      char v8 = 0;
      break;
  }
  *(_DWORD *)uint64_t result = v4;
  *(unsigned char *)(result + 4) = v6;
  *(unsigned char *)(result + 5) = v6;
  *(unsigned char *)(result + 6) = v7;
  *(unsigned char *)(result + 10) = v8;
  *(_WORD *)(result + 7) = -256;
  *(unsigned char *)(result + 9) = 0;
  char v9 = a3;
  if (a3 >= 0xFu) {
    char v9 = 15;
  }
  if (a4 >= 0xFu) {
    char v10 = 15;
  }
  else {
    char v10 = a4;
  }
  *(unsigned char *)(result + 16) = v9 | (16 * v10);
  *(unsigned char *)(result + 17) = (a2 - 17) < 2;
  return result;
}

void sub_1BBB12530(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8 = a6;
  v314[32] = *(double *)MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a7 + 1276))
  {
    if (!*(_DWORD *)(a1 + 16)) {
      *(double *)(a6 + 80) = *(double *)(a6 + 80) * 0.899999976 + *(double *)(a6 + 104) * 0.100000001;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a6 + 104);
    *(double *)(a6 + 72) = (float)*(int *)(a1 + 40);
    *(void *)(a6 + 80) = v12;
  }
  if (*(unsigned char *)(a1 + 52) && *(unsigned char *)(a1 + 54)) {
    *(_DWORD *)(a5 + 208) = 12;
  }
  int v13 = *(_DWORD *)(a7 + 5004);
  *(_DWORD *)(a5 + 3628) = v13;
  if (a2[2] != 1) {
    a8 = 0;
  }
  if (*(unsigned char *)(a1 + 52))
  {
    *(void *)(a5 + 3608) = 0;
    *(_DWORD *)(a5 + 3616) = 0;
    if (a2[2])
    {
      int v15 = *(unsigned __int16 *)(a7 + 4726);
      int v16 = *(_DWORD *)(a5 + 240);
      if (v16 == -1)
      {
        int v20 = 0;
        signed int v19 = 0;
      }
      else
      {
        int v17 = *(_DWORD *)(a5 + 3596);
        int v18 = v15 - v16;
        if (v18 < 1)
        {
          if (v18 < 0)
          {
            signed int v226 = 10 * v17 / (*(_DWORD *)(a5 + 3620) + 1) * v17 / (*(_DWORD *)(a5 + 3620) + 1);
            if (v226 >= 20) {
              signed int v226 = 20;
            }
            if (v16) {
              int v227 = -(v18 * v226) / v16;
            }
            else {
              int v227 = 0;
            }
            if (-v227 < -3 || v227 == 3) {
              int v20 = -3;
            }
            else {
              int v20 = -v227;
            }
            signed int v19 = -v226;
          }
          else
          {
            int v20 = 0;
            signed int v19 = 0;
          }
        }
        else
        {
          signed int v19 = 10 * *(_DWORD *)(a5 + 3620) / (v17 + 1) * *(_DWORD *)(a5 + 3620) / (v17 + 1);
          if (v19 >= 20) {
            signed int v19 = 20;
          }
          if (v16) {
            int v20 = v19 * v18 / v16;
          }
          else {
            int v20 = 0;
          }
          if (v20 >= 5) {
            int v20 = 5;
          }
        }
        int v15 = (v18 + 8 * v16 + 4) >> 3;
      }
      *(_DWORD *)(a5 + 240) = v15;
      *(_DWORD *)(a5 + 3608) = v20;
      *(_DWORD *)(a5 + 3616) = v19;
    }
  }
  int v21 = *(unsigned __int8 *)(a7 + 1354);
  *(void *)(a5 + 216) = 0;
  *(void *)(a5 + 224) = 0;
  *(void *)(a5 + 232) = 0;
  *(void *)(a5 + 440) = 0;
  *(void *)(a5 + 448) = 0;
  uint64_t v22 = *(void *)(a5 + 40);
  uint64_t v23 = *(void *)(a5 + 48);
  double v24 = *(double *)(a5 + 64);
  double v25 = *(double *)(a5 + 72);
  double v26 = *(double *)(a5 + 80);
  double v27 = *(double *)(a5 + 88);
  int v28 = a2[2];
  if (v28 == 2)
  {
    double v25 = sub_1BBB4E9DC(*(double *)(a5 + 72));
    double v26 = sub_1BBB4E9DC(v26);
    double v44 = sub_1BBB4E9DC(v25 * (*(double *)(v8 + 64) * (double)*(int *)(v8 + 44)) / (v26 * *(double *)(v8 + 56)));
    int v45 = *(_DWORD *)(v8 + 48);
    uint64_t v46 = (uint64_t)(sub_1BBB4E9DC(v27 / (v44 + (double)v45)) + 0.5);
    double v47 = *(double *)(v8 + 32);
    if (v47 <= (double)v46) {
      uint64_t v29 = v46;
    }
    else {
      uint64_t v29 = (uint64_t)v47;
    }
    int v48 = v45 - 1;
    *(_DWORD *)(v8 + 48) = v45 - 1;
    int v49 = *(_DWORD *)(a1 + 16);
    if (v49 && v45 == 1)
    {
      *(_DWORD *)(a5 + 3584) = *(double *)(v8 + 96) != *(double *)(v8 + 72);
      double v50 = *(double *)(v8 + 96);
      double v51 = *(double *)(v8 + 104);
      double v52 = 30.0;
      if (v51 <= 30.0) {
        double v52 = *(double *)(v8 + 104);
      }
      if (v51 >= 2.0) {
        double v53 = v52;
      }
      else {
        double v53 = 2.0;
      }
      *(double *)(v8 + 72) = v50;
      *(double *)(v8 + 80) = v53;
      unsigned int v54 = (int)(v53 + 0.5) & 0xFFFFFFFE;
      *(_DWORD *)(v8 + 92) = v54;
      int v55 = v54 / *(_DWORD *)(a5 + 4);
      *(_DWORD *)(v8 + 44) = v55;
      *(_DWORD *)(v8 + 48) = v54 - v55;
      double v56 = sub_1BBB4E9DC(v50 * (double)(int)v54) / v53;
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a5 + 56);
    if (v28 != 1)
    {
      if (!v28)
      {
        int v30 = *(_DWORD *)a5 + 1;
        unsigned int v31 = *(_DWORD *)(a5 + 3592);
        double v32 = (double)v31 * 0.2;
        if (*(unsigned char *)(a1 + 52)) {
          int v33 = v30 >> 3;
        }
        else {
          int v33 = 0;
        }
        int v34 = v33 + v30;
        double v35 = (double)v34;
        double v36 = v27 - sub_1BBB4E9DC((double)((v34 - *(_DWORD *)(a5 + 3588)) * v31) / (double)v34);
        double v37 = *(double *)(a5 + 3600) + v36;
        *(double *)(a5 + 3600) = v37;
        double v38 = v32 * 0.5 + (v37 - v32 * 0.5) * 0.5;
        if (v37 <= v32 * 0.5) {
          double v38 = v37;
        }
        double v39 = (v32 + v37) * 0.5 - v32;
        if (v37 >= -v32) {
          double v39 = v37;
        }
        if (v37 < 0.0) {
          double v40 = v39;
        }
        else {
          double v40 = v38;
        }
        *(void *)(v8 + 56) = *(void *)(a5 + 16);
        *(void *)(v8 + 64) = *(void *)(a5 + 24);
        *(double *)(v8 + 32) = (double)*(uint64_t *)(a5 + 32);
        double v41 = *(double *)(v8 + 72);
        if (*(unsigned char *)(a1 + 52))
        {
          double v42 = sub_1BBB4E9DC(v41 * v35 / *(double *)(v8 + 80));
          double v43 = sub_1BBB4E9DC(v40 + v42);
          double v27 = 0.0;
          if (v43 >= 0.0)
          {
            *(double *)(a5 + 3600) = *(double *)(a5 + 3600) - v40;
            double v27 = v43;
          }
        }
        else
        {
          double v63 = sub_1BBB4E9DC(v41 * (double)*(int *)a5 / *(double *)(v8 + 80));
          *(double *)(a5 + 3600) = *(double *)(a5 + 3600) - v36;
          double v27 = v36 + v63;
        }
        *(_DWORD *)(v8 + 40) = 1;
        if (v21)
        {
          int v64 = *(_DWORD *)a5 - 1;
          if (*(int *)a5 < 1) {
            int v64 = *(_DWORD *)a5;
          }
          int v65 = v64 >> 1;
          if (*(_DWORD *)(a5 + 4) == 1) {
            int v66 = *(_DWORD *)a5;
          }
          else {
            int v66 = v65 + 1;
          }
        }
        else
        {
          int v67 = *(_DWORD *)a5 / *(_DWORD *)(a5 + 4);
          *(_DWORD *)(v8 + 44) = v67;
          int v66 = *(_DWORD *)a5 + v67 - *(_DWORD *)(a5 + 4) * v67;
        }
        *(_DWORD *)(v8 + 44) = v66;
        int v68 = *(_DWORD *)a5 - v66;
        *(_DWORD *)(v8 + 48) = v68;
        ++*(_DWORD *)(v8 + 28);
        double v69 = sub_1BBB4E9DC(v25 * (double)v66 / (v24 * *(double *)(v8 + 56)));
        double v70 = sub_1BBB4E9DC(v26 * (double)v68 / (v24 * *(double *)(v8 + 64)));
        uint64_t v71 = (uint64_t)sub_1BBB4E9DC(v27 / (v70 + v69 + 1.0));
        double v72 = *(double *)(v8 + 32);
        if (v72 <= (double)v71) {
          uint64_t v22 = v71;
        }
        else {
          uint64_t v22 = (uint64_t)v72;
        }
        *(_DWORD *)(v8 + 40) = 0;
        *(_DWORD *)(a5 + 3588) = 0;
        *(_DWORD *)(a5 + 3592) = (v27 + 0.5);
        *(_DWORD *)(a5 + 3596) = (v27 / v35);
      }
      goto LABEL_77;
    }
    *(void *)(a6 + 64) = 0x3FF6666666666666;
    double v57 = sub_1BBB4E9DC(v26 * (*(double *)(a6 + 56) * (double)*(int *)(a6 + 48)) / (v25 * 1.4));
    int v58 = *(_DWORD *)(v8 + 44);
    uint64_t v59 = (uint64_t)(sub_1BBB4E9DC(v27 / (v57 + (double)v58)) + 0.5);
    double v60 = *(double *)(v8 + 32);
    if (v60 <= (double)v59) {
      uint64_t v23 = v59;
    }
    else {
      uint64_t v23 = (uint64_t)v60;
    }
    int v48 = v58 - 1;
    *(_DWORD *)(v8 + 44) = v58 - 1;
    if (*(_DWORD *)(a1 + 28)) {
      goto LABEL_77;
    }
    int v49 = *(_DWORD *)(a1 + 16);
    if (v49 && v58 == 1)
    {
      *(_DWORD *)(a5 + 3584) = *(double *)(v8 + 96) != *(double *)(v8 + 72);
      long long v310 = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v8 + 72) = v310;
      int v61 = *(_DWORD *)(v8 + 92);
      int v62 = v61 / *(_DWORD *)(a5 + 4);
      *(_DWORD *)(v8 + 44) = v62;
      *(_DWORD *)(v8 + 48) = v61 - v62;
      double v56 = sub_1BBB4E9DC((double)v61 * *(double *)&v310) / *((double *)&v310 + 1);
LABEL_61:
      double v27 = v27 + v56;
      goto LABEL_77;
    }
  }
  if (v49 && v48) {
    *(_DWORD *)(a5 + 3584) = 0;
  }
LABEL_77:
  sub_1BBB0CDAC((double *)a5, v24, v25, v26, v27);
  *(void *)(a5 + 40) = (uint64_t)(sub_1BBB4E9DC((double)v22) + 0.5);
  *(void *)(a5 + 48) = (uint64_t)(sub_1BBB4E9DC((double)v23) + 0.5);
  *(void *)(a5 + 56) = (uint64_t)(sub_1BBB4E9DC((double)v29) + 0.5);
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v73 = a2;
  double v74 = sub_1BBB4E9DC(*(double *)(a5 + 160) / (double)a2[1]);
  *(void *)(a5 + 160) = 0;
  bzero((void *)(a5 + 1480), 0x7FCuLL);
  int v75 = a2[1];
  if (v75 < 1)
  {
    double v83 = 0.0;
  }
  else
  {
    int v304 = v13;
    uint64_t v305 = v8;
    int v76 = a4;
    int v77 = 0;
    int v78 = a2[4];
    int v79 = v78 >> 4;
    uint64_t v80 = 16 * v76;
    if (v78 >> 4 <= 1) {
      int v81 = 1;
    }
    else {
      int v81 = v78 >> 4;
    }
    int v308 = v81;
    int v82 = v76;
    double v83 = 0.0;
    uint64_t v309 = 16 * v76;
    do
    {
      if (v78 >= 16)
      {
        int v84 = v308 + v77;
        uint64_t v85 = a3;
        do
        {
          int v86 = 0;
          uint64_t v87 = 0;
          unsigned int v88 = v314;
          do
          {
            for (uint64_t i = 0; i != 16; ++i)
              *((unsigned char *)v88 + i) = *(unsigned char *)(v85 + v86 + (int)i);
            ++v87;
            v88 += 2;
            v86 += v82;
          }
          while (v87 != 16);
          sub_1BBB5EDCC((uint64_t)v314, 0, 0, 0, a5);
          sub_1BBB5EDCC((uint64_t)v314, 1u, 0, 8u, a5);
          sub_1BBB5EDCC((uint64_t)v314, 2u, 8u, 0, a5);
          double v90 = sub_1BBB5EDCC((uint64_t)v314, 3u, 8u, 8u, a5);
          sub_1BBB5EE84((uint64_t)v314, 0, 0, 0, a5, v90, v91);
          sub_1BBB5EE84((uint64_t)v314, 1, 0, 4u, a5, v92, v93);
          sub_1BBB5EE84((uint64_t)v314, 2, 0, 8u, a5, v94, v95);
          sub_1BBB5EE84((uint64_t)v314, 3, 0, 0xCu, a5, v96, v97);
          sub_1BBB5EE84((uint64_t)v314, 4, 4u, 0, a5, v98, v99);
          sub_1BBB5EE84((uint64_t)v314, 5, 4u, 4u, a5, v100, v101);
          sub_1BBB5EE84((uint64_t)v314, 6, 4u, 8u, a5, v102, v103);
          sub_1BBB5EE84((uint64_t)v314, 7, 4u, 0xCu, a5, v104, v105);
          sub_1BBB5EE84((uint64_t)v314, 8, 8u, 0, a5, v106, v107);
          sub_1BBB5EE84((uint64_t)v314, 9, 8u, 4u, a5, v108, v109);
          sub_1BBB5EE84((uint64_t)v314, 10, 8u, 8u, a5, v110, v111);
          sub_1BBB5EE84((uint64_t)v314, 11, 8u, 0xCu, a5, v112, v113);
          sub_1BBB5EE84((uint64_t)v314, 12, 0xCu, 0, a5, v114, v115);
          sub_1BBB5EE84((uint64_t)v314, 13, 0xCu, 4u, a5, v116, v117);
          sub_1BBB5EE84((uint64_t)v314, 14, 0xCu, 8u, a5, v118, v119);
          sub_1BBB5EE84((uint64_t)v314, 15, 0xCu, 0xCu, a5, v120, v121);
          uint64_t v122 = 0;
          float v123 = 100000000.0;
          do
          {
            if (*(float *)(a5 + 176 + v122) < v123) {
              float v123 = *(float *)(a5 + 176 + v122);
            }
            v122 += 4;
          }
          while (v122 != 16);
          uint64_t v124 = 0;
          v125.f32[0] = (float)((float)(*(float *)(a5 + 176) + *(float *)(a5 + 180)) + *(float *)(a5 + 184))
                      + *(float *)(a5 + 188);
          v125.f32[1] = v123;
          *(float64x2_t *)(a5 + 224) = vaddq_f64(*(float64x2_t *)(a5 + 224), vcvtq_f64_f32(v125));
          *(double *)(a5 + 448) = *(double *)(a5 + 448)
                                + (double)vaddvq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(a5 + 376), *(int32x4_t *)(a5 + 408)), vaddq_s32(*(int32x4_t *)(a5 + 392), *(int32x4_t *)(a5 + 424))));
          unsigned int v126 = 100000000;
          do
          {
            if (*(_DWORD *)(a5 + 376 + v124) < v126) {
              unsigned int v126 = *(_DWORD *)(a5 + 376 + v124);
            }
            v124 += 4;
          }
          while (v124 != 60);
          *(double *)(a5 + 440) = *(double *)(a5 + 440) + (double)v126;
          double v127 = v123 + 1.0;
          double v83 = v83 + (v74 + v127 * 2.0) / (v127 + v74 * 2.0);
          *(double *)(a5 + 160) = *(double *)(a5 + 160) + v127;
          v85 += 16;
          ++v77;
        }
        while (v77 != v84);
        int v77 = v84;
        int v79 = v78 >> 4;
        uint64_t v80 = v309;
      }
      a3 += v80;
      BOOL v128 = __OFSUB__(v75, v79);
      v75 -= v79;
    }
    while (!((v75 < 0) ^ v128 | (v75 == 0)));
    uint64_t v8 = v305;
    uint64_t v73 = a2;
    int v75 = a2[1];
    int v13 = v304;
  }
  int v129 = a8 | v13;
  double v130 = sub_1BBB4E9DC(v83 / (double)v75);
  *(double *)(a5 + 320) = v130;
  *(double *)(a5 + 216) = sub_1BBB4E9DC(*(double *)(a5 + 216) / (double)(4 * v73[1]));
  *(double *)(a5 + 224) = sub_1BBB4E9DC(*(double *)(a5 + 224) / (double)(4 * v73[1]));
  *(double *)(a5 + 448) = sub_1BBB4E9DC(*(double *)(a5 + 448) / (double)(16 * v73[1]));
  *(double *)(a5 + 232) = sub_1BBB4E9DC(*(double *)(a5 + 232) / (double)v73[1]);
  *(double *)(a5 + 440) = sub_1BBB4E9DC(*(double *)(a5 + 440) / (double)v73[1]);
  int v131 = v73[2];
  if (v131 != 2)
  {
    if (v131 != 1)
    {
      if (v131) {
        return;
      }
      uint64_t v313 = 0;
      int v312 = 0;
      double v132 = *(double *)(a5 + 112);
      uint64_t v133 = *(void *)(a5 + 40);
      if (*(_DWORD *)v8)
      {
        *(void *)(a5 + 328) = v133;
        int v134 = *(_DWORD *)a1;
        *(_DWORD *)(a5 + 352) = *(_DWORD *)a1;
        *(_DWORD *)(v8 + 116) = v134;
        uint64_t v133 = *(void *)(a5 + 40);
      }
      double v135 = *(double *)(a5 + 120) + (double)(*(void *)(a5 + 328) - v133);
      if (v135 < 0.0) {
        double v135 = *(double *)(a5 + 248);
      }
      double v136 = sub_1BBB4E9DC(v135);
      double v137 = sub_1BBB4E9DC(v136 * 31.0 / v132);
      double v311 = sub_1BBB4E9DC(v137 * *(double *)(a5 + 320));
      *(double *)(a5 + 120) = v136;
      sub_1BBB142D8((uint64_t)v73, v314, &v311, (int *)&v313 + 1, (int *)a5);
      uint64_t v138 = 0;
      int v139 = 0;
      float v141 = 10000000.0;
      do
      {
        float v140 = *(double *)(a5 + 440);
        float v142 = v140 - flt_1BBB8A3F8[v138];
        if (v142 < 0.0) {
          float v142 = -v142;
        }
        if (v142 <= v141)
        {
          int v139 = v138;
          float v141 = v142;
        }
        ++v138;
      }
      while (v138 != 18);
      sub_1BBB14480(a1, v139, &v313, &v312, v8);
      float v143 = dbl_1BBB89CE8[v139] / (sub_1BBB4E9DC((double)v133 / *(double *)(a5 + 368)) - dbl_1BBB89C58[v139]);
      int v144 = (int)(v143 + 0.75);
      int v145 = v144 - HIDWORD(v313);
      if (v144 - HIDWORD(v313) >= 4) {
        int v145 = 4;
      }
      if (v145 <= -4) {
        int v145 = -4;
      }
      int v146 = HIDWORD(v313) + ((v145 + ((v145 & 0xC0) >> 6)) >> 2);
      v73[3] = v146;
      if (*(_DWORD *)(a1 + 16) && !*(_DWORD *)v8)
      {
        if (*(_DWORD *)(a1 + 20)) {
          int v209 = 0;
        }
        else {
          int v209 = -2;
        }
        uint64_t v210 = (int)v313;
        v73[3] = v209 + dword_1BBB89D78[9 * (int)v313 + v312] + v144;
        float v211 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        float v212 = 0.0;
        float v213 = 0.0;
        if (v211 >= 0.0)
        {
          float v213 = 100.0;
          if (v211 <= 100.0) {
            float v213 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
          }
        }
        float v214 = 1.0;
        if (v213 < 0.0) {
          float v214 = -1.0;
        }
        *(float *)(a5 + 3552) = v213;
        int v215 = dword_1BBB89EBC[(float)((float)(v213 + (float)(v214 * 0.0)) / 5.0)];
        float v216 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        if (v216 >= 0.0)
        {
          float v212 = 100.0;
          if (v216 <= 100.0) {
            float v212 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
          }
        }
        *(float *)(a5 + 3564) = v212;
        int v217 = v73[3] + v215;
        if (v217 > v144) {
          int v144 = v217;
        }
        int v218 = dword_1BBB89F0C[v210];
        if (v144 <= v218) {
          int v144 = v218;
        }
        v73[3] = v144;
        int v146 = (int)(float)(*(float *)(a5 + 3540) * (float)*(int *)(v8 + 120));
        if (v144 <= v146) {
          goto LABEL_124;
        }
      }
      else if (v146 >= dword_1BBB89F30[9 * (int)v313 + v312] + 45)
      {
        int v146 = dword_1BBB89F30[9 * (int)v313 + v312] + 45;
      }
      v73[3] = v146;
      int v144 = v146;
LABEL_124:
      if (*(unsigned char *)(a1 + 54))
      {
        if (v129)
        {
          *(_DWORD *)(a5 + 3632) = 0;
          int v144 = v73[3];
        }
        else
        {
          int v219 = *(_DWORD *)(v8 + 24);
          if (v219)
          {
            int v220 = v144 - v219;
            int v221 = (int)(float)((float)v219 * 0.2);
            if (v144 - v219 < -v221) {
              int v144 = v219 - v221;
            }
            int v222 = v219 + v221;
            if (v220 > v221) {
              int v144 = v222;
            }
          }
        }
      }
      if (v144 >= 51) {
        int v144 = 51;
      }
      if (v144 <= 12) {
        int v144 = 12;
      }
      v73[3] = v144;
      *(_DWORD *)(v8 + 12) = v144;
      *(_DWORD *)(v8 + 116) = v144;
      return;
    }
    uint64_t v313 = 0;
    int v312 = 0;
    double v150 = *(double *)(a5 + 112);
    if (*(_DWORD *)(v8 + 4))
    {
      *(_DWORD *)(v8 + 4) = 0;
      uint64_t v151 = *(void *)(a5 + 48);
      *(void *)(a5 + 336) = v151;
      *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 4);
      double v130 = *(double *)(a5 + 320);
      uint64_t v152 = v151;
    }
    else
    {
      uint64_t v152 = *(void *)(a5 + 336);
      uint64_t v151 = *(void *)(a5 + 48);
    }
    double v311 = 0.0;
    uint64_t v166 = v152 - v151;
    if (*(double *)(a5 + 128) + (double)v166 >= 0.0) {
      double v167 = *(double *)(a5 + 128) + (double)v166;
    }
    else {
      double v167 = 0.0;
    }
    double v168 = sub_1BBB4E9DC(v167 * 31.0 / v150);
    v314[0] = sub_1BBB4E9DC(v168 * v130);
    *(double *)(a5 + 128) = v167;
    sub_1BBB142D8((uint64_t)v73, &v311, v314, (int *)&v313 + 1, (int *)a5);
    uint64_t v169 = 0;
    int v170 = 0;
    float v172 = 10000000.0;
    do
    {
      float v171 = *(double *)(a5 + 440);
      float v173 = v171 - flt_1BBB8A3F8[v169];
      if (v173 < 0.0) {
        float v173 = -v173;
      }
      if (v173 <= v172)
      {
        int v170 = v169;
        float v172 = v173;
      }
      ++v169;
    }
    while (v169 != 18);
    sub_1BBB14480(a1, v170, &v313, &v312, v8);
    *(void *)(a5 + 272) = *(void *)(a5 + 276);
    *(_DWORD *)(a5 + 280) = *(_DWORD *)(a5 + 284);
    *(float *)(a5 + 284) = (float)v151;
    uint64_t v174 = (uint64_t *)(a5 + 288);
    *(void *)(a5 + 288) = *(void *)(a5 + 292);
    *(_DWORD *)(a5 + 296) = *(_DWORD *)(a5 + 300);
    *(_DWORD *)(a5 + 300) = 0;
    unsigned int v175 = *(_DWORD *)(a5 + 308);
    if (!*(unsigned char *)(a1 + 53) || v175 < 3)
    {
      if (!v175) {
        *(_DWORD *)(v8 + 24) = *(_DWORD *)(v8 + 12);
      }
      if (*(_DWORD *)(a1 + 16))
      {
        float v193 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        float v194 = 0.0;
        float v195 = 0.0;
        if (v193 >= 0.0)
        {
          float v195 = 100.0;
          if (v193 <= 100.0) {
            float v195 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
          }
        }
        *(float *)(a5 + 3552) = v195;
        float v196 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        if (v196 >= 0.0)
        {
          float v194 = 100.0;
          if (v196 <= 100.0) {
            float v194 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
          }
        }
        *(float *)(a5 + 3564) = v194;
        float v197 = 1.0;
        if (v194 < 0.0) {
          float v197 = -1.0;
        }
        int v198 = (int)(float)((float)(v194 + (float)(v197 * 0.0)) / 5.0);
        if (v198 > 0x13)
        {
          if (v198 >= 0) {
            int v199 = 9;
          }
          else {
            int v199 = -3;
          }
        }
        else
        {
          int v199 = dword_1BBB8A074[v198];
        }
        if (*(_DWORD *)(a5 + 308) <= 2u && v199 < 0) {
          int v199 = 0;
        }
        int v225 = *(_DWORD *)(v8 + 24) + v199;
        v73[3] = v225;
        if (!*(_DWORD *)(a5 + 308)) {
          v225 += 3;
        }
        v73[3] = v225;
        if (*(_DWORD *)(a5 + 308) == 1 && *(float *)(a5 + 3564) < 40.0) {
          v225 -= 2;
        }
        v73[3] = v225;
        if (*(_DWORD *)(a5 + 308) == 2 && *(float *)(a5 + 3564) < 20.0) {
          --v225;
        }
      }
      else
      {
        int v223 = *(_DWORD *)(v8 + 24);
        int v224 = HIDWORD(v313) - v223;
        if (HIDWORD(v313) - v223 >= 5) {
          int v224 = 5;
        }
        if (v224 <= -4) {
          int v224 = -4;
        }
        int v225 = v224 + v223;
      }
      goto LABEL_418;
    }
    uint64_t v176 = 0;
    double v177 = 0.0;
    do
    {
      double v177 = v177 + *(float *)((char *)v174 + v176);
      v176 += 4;
    }
    while (v176 != 12);
    uint64_t v178 = 0;
    double v179 = 0.0;
    do
    {
      double v179 = v179 + *(float *)(a5 + 272 + v178);
      v178 += 4;
    }
    while (v178 != 12);
    uint64_t v180 = 0;
    double v181 = 0.0;
    do
    {
      double v181 = v181 + *(float *)((char *)v174 + v180) * *(float *)((char *)v174 + v180);
      v180 += 4;
    }
    while (v180 != 12);
    uint64_t v182 = 0;
    double v183 = 0.0;
    do
    {
      double v183 = v183 + *(float *)(a5 + v182 + 288) * *(float *)(a5 + v182 + 272);
      v182 += 4;
    }
    while (v182 != 12);
    double v184 = v179 / 3.0;
    double v185 = v177 / 3.0;
    double v186 = (v183 + v185 * -3.0 * v184) / (v181 + v185 * -3.0 * v185 + 0.000001);
    float v187 = ((float)v151 - (v184 - v185 * v186)) / (v186 + 0.000001);
    int v188 = (int)(1.0 / v187 + 0.5);
    if (v188 >= 51) {
      int v189 = 51;
    }
    else {
      int v189 = (int)(1.0 / v187 + 0.5);
    }
    if (v189 <= 18) {
      int v189 = 18;
    }
    if (v188 < 12)
    {
      int v204 = (int)(1.0 / *(float *)(a5 + 288) + 0.1);
      int v205 = (int)(1.0 / *(float *)(a5 + 292) + 0.1);
      int v206 = (int)(1.0 / *(float *)(a5 + 296) + 0.1);
      if (v204 <= v205) {
        int v207 = (int)(1.0 / *(float *)(a5 + 292) + 0.1);
      }
      else {
        int v207 = (int)(1.0 / *(float *)(a5 + 288) + 0.1);
      }
      if (v204 >= v205) {
        int v204 = (int)(1.0 / *(float *)(a5 + 292) + 0.1);
      }
      if (v204 <= v206) {
        int v204 = (int)(1.0 / *(float *)(a5 + 296) + 0.1);
      }
      if (v207 <= v206) {
        int v204 = v207;
      }
      int v208 = HIDWORD(v313) - v204;
      if (HIDWORD(v313) != v204)
      {
        if (v208 < 0)
        {
          if (v208 <= -4) {
            int v208 = -4;
          }
        }
        else if (v208 >= 5)
        {
          int v208 = 5;
        }
      }
      if (!*(_DWORD *)(a1 + 16)) {
        goto LABEL_386;
      }
    }
    else if (!*(_DWORD *)(a1 + 16))
    {
      int v190 = (int)(1.0 / *(float *)(a5 + 296) + 0.1);
      int v191 = v190 - v189;
      if (v191)
      {
        int v192 = *(_DWORD *)(a1 + 48);
        if (v191 < 0)
        {
          if (v191 <= -v192) {
            int v192 = -v192;
          }
          else {
            int v192 = v191;
          }
        }
        else if (v191 < v192)
        {
          int v192 = v191;
        }
      }
      else
      {
        int v192 = 0;
      }
      int v208 = 0;
      int v204 = v190 - v192;
LABEL_386:
      int v225 = v208 + v204;
      if (v225 >= dword_1BBB89F30[9 * (int)v313 + v312] + 45) {
        int v225 = dword_1BBB89F30[9 * (int)v313 + v312] + 45;
      }
LABEL_418:
      v73[3] = v225;
      if (*(unsigned char *)(a1 + 54))
      {
        if (v129)
        {
          int v281 = *(_DWORD *)(v8 + 116);
          if (v281)
          {
            int v282 = v225 - v281;
            int v283 = (int)(float)((float)v281 * 0.1);
            if (v225 - v281 <= v283)
            {
              int v288 = v281 - v283;
              if (v282 < -v283) {
                int v225 = v288;
              }
            }
            else
            {
              int v225 = v281 + v283;
            }
          }
          v73[3] = v225;
        }
        else
        {
          unsigned int v284 = *(_DWORD *)(a5 + 3632);
          if (v284 <= 2)
          {
            int v285 = *(_DWORD *)(v8 + 116);
            int v286 = v225 - v285;
            if (v225 < v285)
            {
              if (v285)
              {
                int v287 = (int)(float)((float)v285 * 0.15);
                if (v286 <= v287)
                {
                  int v289 = v285 - v287;
                  if (v286 < -v287) {
                    int v225 = v289;
                  }
                }
                else
                {
                  int v225 = v285 + v287;
                }
              }
              v73[3] = v225;
              unsigned int v284 = *(_DWORD *)(a5 + 3632);
            }
          }
          *(_DWORD *)(a5 + 3632) = v284 + 1;
        }
      }
      if (*(unsigned char *)(a1 + 52))
      {
        int v290 = v73[3];
        int v291 = v290 >> 2;
        int v292 = *(_DWORD *)(a5 + 3608);
        if (v292 <= -(v290 >> 3)) {
          int v293 = -(v290 >> 3);
        }
        else {
          int v293 = *(_DWORD *)(a5 + 3608);
        }
        if (v292 <= v290 >> 2) {
          int v291 = v293;
        }
        int v294 = v291 + v290;
        if (v291 < 0 || v294 <= 42)
        {
          v73[3] = v294;
          *(_DWORD *)(a5 + 3612) = v291;
        }
        else if (v290 < 42)
        {
          *(_DWORD *)(a5 + 3612) = 42 - v290;
          v73[3] = 42;
        }
      }
      int v295 = v73[3];
      if (v295 >= 51) {
        int v295 = 51;
      }
      if (v295 <= 12) {
        int v295 = 12;
      }
      v73[3] = v295;
      *(_DWORD *)(v8 + 24) = v295;
      *(double *)(a5 + 3576) = (double)*(uint64_t *)(a5 + 48);
      if (*(_DWORD *)(a1 + 16) && *(_DWORD *)(a5 + 3584) && !*(_DWORD *)(a1 + 28))
      {
        double v296 = sub_1BBB4E9DC((double)*(int *)(a5 + 3536) / *(double *)(v8 + 80));
        *(double *)(a5 + 3528) = v296;
        float v297 = sub_1BBB4E9DC(v296 * *(double *)(v8 + 72) / 1000.0);
        *(float *)(a5 + 3556) = v297;
        *(float *)(a5 + 3544) = v297;
      }
      int v298 = *(_DWORD *)(a5 + 3624);
      if (v298 == -1) {
        int v299 = v73[3];
      }
      else {
        int v299 = v298 + ((v73[3] - v298 + 8 * v298) >> 3);
      }
      *(_DWORD *)(a5 + 3624) = v299;
      int v300 = *(_DWORD *)(a5 + 296);
      uint64_t v301 = *v174;
      *(void *)(a5 + 292) = *v174;
      *(_DWORD *)(a5 + 300) = v300;
      *(_DWORD *)(a5 + 288) = 0;
      int v302 = v73[3];
      *(_DWORD *)(a5 + 296) = v300;
      *uint64_t v174 = v301;
      float v303 = 1.0 / (float)v302;
      if (!v302) {
        float v303 = 0.0;
      }
      *(float *)(a5 + 300) = v303;
      return;
    }
    float v262 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
    float v263 = 0.0;
    float v264 = 0.0;
    if (v262 >= 0.0)
    {
      float v264 = 100.0;
      if (v262 <= 100.0) {
        float v264 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
      }
    }
    *(float *)(a5 + 3552) = v264;
    float v265 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
    if (v265 >= 0.0)
    {
      float v263 = 100.0;
      if (v265 <= 100.0) {
        float v263 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
      }
    }
    *(float *)(a5 + 3564) = v263;
    float v266 = 1.0;
    if (v263 < 0.0) {
      float v266 = -1.0;
    }
    int v267 = (int)(float)((float)(v263 + (float)(v266 * 0.0)) / 5.0);
    if (v267 > 0x13)
    {
      if (v267 >= 0) {
        int v268 = 9;
      }
      else {
        int v268 = -3;
      }
    }
    else
    {
      int v268 = dword_1BBB8A074[v267];
    }
    float v269 = (float)*(unsigned int *)(a5 + 4);
    double v270 = sub_1BBB4E9DC(*(double *)(v8 + 72) * v269 / *(double *)(v8 + 80)) * 0.899999976;
    if (*(double *)(a5 + 3576) <= v270) {
      double v270 = *(double *)(a5 + 3576);
    }
    double v271 = sub_1BBB4E9DC(v270);
    int v272 = *(_DWORD *)(v8 + 24) + v268;
    v73[3] = v272;
    unsigned int v273 = *(_DWORD *)(v8 + 24);
    int v274 = v272 - v273;
    int v275 = v274;
    if (v274 < 0)
    {
      if ((int)v273 >= 23)
      {
        if (v273 >= 0x1E)
        {
          if (v273 >= 0x25)
          {
            if (v273 >= 0x2C) {
              int v275 = -4;
            }
            else {
              int v275 = -3;
            }
          }
          else
          {
            int v275 = -2;
          }
        }
        else
        {
          int v275 = -1;
        }
      }
      else
      {
        int v275 = 0;
      }
    }
    if (v274 <= v275) {
      int v274 = v275;
    }
    int v276 = v274 + v273;
    v73[3] = v276;
    int v225 = v276;
    if (v276 < *(_DWORD *)(v8 + 24))
    {
      double v277 = *(float *)(a5 + 3572);
      int v225 = *(_DWORD *)(v8 + 24);
      if (v277 - v271 < 0.0)
      {
        if (v271 * 0.800000012 <= v277) {
          int v225 = *(_DWORD *)(v8 + 24);
        }
        else {
          int v225 = v276;
        }
      }
    }
    v73[3] = v225;
    double v278 = *(float *)(a5 + 3572);
    if (v271 * 0.100000001 <= v278)
    {
      if (v271 * 0.25 <= v278)
      {
        if (v271 * 0.5 <= v278)
        {
          if (v271 * 0.75 < v278) {
            goto LABEL_407;
          }
          int v279 = -1;
        }
        else
        {
          int v279 = -2;
        }
      }
      else
      {
        int v279 = -3;
      }
    }
    else
    {
      int v279 = -4;
    }
    int v225 = *(_DWORD *)(v8 + 24) + v279;
LABEL_407:
    v73[3] = v225;
    if (v225 == *(_DWORD *)(v8 + 24)
      && *(double *)(v8 + 72) * (float)(v269 * 1.25) / *(double *)(v8 + 80) <= *(float *)(a5 + 3572))
    {
      ++v225;
    }
    v73[3] = v225;
    int v280 = *(_DWORD *)(v8 + 24);
    if (v225 < v280 && v225 - v280 <= -2)
    {
      if (v280 > 32)
      {
        if (v280 < 0x27) {
          int v225 = v280 - 2;
        }
      }
      else
      {
        int v225 = v280 - 1;
      }
    }
    if (v225 <= 8) {
      int v225 = 8;
    }
    goto LABEL_418;
  }
  uint64_t v313 = 0;
  int v312 = 0;
  double v147 = *(double *)(a5 + 112);
  if (*(_DWORD *)(v8 + 8))
  {
    *(_DWORD *)(v8 + 8) = 0;
    uint64_t v148 = *(void *)(a5 + 56);
    *(void *)(a5 + 344) = v148;
    *(_DWORD *)(a5 + 360) = *(_DWORD *)(a1 + 32);
    double v130 = *(double *)(a5 + 320);
    uint64_t v149 = v148;
  }
  else
  {
    uint64_t v149 = *(void *)(a5 + 344);
    uint64_t v148 = *(void *)(a5 + 56);
  }
  uint64_t v153 = v149 - v148;
  if (*(double *)(a5 + 136) + (double)v153 >= 0.0) {
    double v154 = *(double *)(a5 + 136) + (double)v153;
  }
  else {
    double v154 = 0.0;
  }
  double v155 = sub_1BBB4E9DC(v154 * 31.0 / v147);
  double v311 = sub_1BBB4E9DC(v155 * v130);
  *(double *)(a5 + 136) = v154;
  sub_1BBB142D8((uint64_t)v73, v314, &v311, (int *)&v313 + 1, (int *)a5);
  uint64_t v156 = 0;
  int v157 = 0;
  float v159 = 10000000.0;
  do
  {
    float v158 = *(double *)(a5 + 440);
    float v160 = v158 - flt_1BBB8A3F8[v156];
    if (v160 < 0.0) {
      float v160 = -v160;
    }
    if (v160 <= v159)
    {
      int v157 = v156;
      float v159 = v160;
    }
    ++v156;
  }
  while (v156 != 18);
  sub_1BBB14480(a1, v157, &v313, &v312, v8);
  if (*(unsigned char *)(a1 + 53))
  {
    unsigned int v161 = *(_DWORD *)(a5 + 4);
    if (*(_DWORD *)(a5 + 312) >= 3 * v161 - 3)
    {
      float v200 = *(float *)(a5 + 296);
      if (v200 >= *(float *)(a5 + 300)) {
        float v200 = *(float *)(a5 + 300);
      }
      float v201 = 1.0 / v200;
      int v202 = (int)((float)(1.0 / v200) + 0.1);
      if (v202 <= 2) {
        int v202 = 2;
      }
      if (v202 >= 51) {
        int v202 = 51;
      }
      int v203 = HIDWORD(v313) - v202;
      if (HIDWORD(v313) - v202 < 1)
      {
        int v203 = 0;
      }
      else if (v203 >= dword_1BBB8A0C4[9 * (int)v313 + v312])
      {
        int v203 = dword_1BBB8A0C4[9 * (int)v313 + v312];
      }
      if (*(_DWORD *)(a1 + 16))
      {
        float v228 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        float v229 = 0.0;
        float v230 = 0.0;
        if (v228 >= 0.0)
        {
          float v230 = 100.0;
          if (v228 <= 100.0) {
            float v230 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
          }
        }
        *(float *)(a5 + 3552) = v230;
        if (v230 >= 0.0) {
          float v231 = 1.0;
        }
        else {
          float v231 = -1.0;
        }
        float v232 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        if (v232 >= 0.0)
        {
          float v229 = 100.0;
          if (v232 <= 100.0) {
            float v229 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
          }
        }
        *(float *)(a5 + 3564) = v229;
        float v233 = sub_1BBB4E9DC(-(*(float *)(a5 + 3572) - (float)v161 * (*(double *)(v8 + 72) / *(double *)(v8 + 80))));
        if (v233 <= 0.0)
        {
          int v236 = 51;
        }
        else
        {
          int v234 = (int)(float)((float)(v229 + (float)(v231 * 0.0)) / 5.0);
          if (v234 > 0x13)
          {
            if (v234 >= 0) {
              int v235 = 11;
            }
            else {
              int v235 = -3;
            }
          }
          else
          {
            int v235 = dword_1BBB8A208[v234];
          }
          int v260 = (int)(float)(v201 + 0.1);
          if (v260 <= 35) {
            int v261 = 1;
          }
          else {
            int v261 = 2;
          }
          int v236 = v235 + v260 + v261;
        }
        goto LABEL_318;
      }
      goto LABEL_301;
    }
  }
  int v162 = *(_DWORD *)(a5 + 308);
  if (v162 == 1)
  {
    *(_DWORD *)(v8 + 112) = *(_DWORD *)(v8 + 24) + 1;
    int v162 = *(_DWORD *)(a5 + 308);
    if (v162 == 1)
    {
      if (*(_DWORD *)(a5 + 312) < *(_DWORD *)(a1 + 28))
      {
        double v163 = 1.0 / (double)*(int *)(v8 + 12);
        float v164 = *(float *)(a5 + 300);
        if (v163 >= v164) {
          double v163 = v164;
        }
        float v165 = 1.0 / v163;
        int v162 = 1;
        goto LABEL_282;
      }
      int v162 = 1;
    }
  }
  float v237 = *(float *)(a5 + 296);
  float v164 = *(float *)(a5 + 300);
  if (v237 >= v164) {
    float v237 = *(float *)(a5 + 300);
  }
  float v165 = 1.0 / v237;
LABEL_282:
  int v202 = (int)(v165 + 0.1);
  if (v202 <= 2) {
    int v202 = 2;
  }
  if (v202 >= 51) {
    int v202 = 51;
  }
  int v203 = HIDWORD(v313) - v202;
  if (HIDWORD(v313) - v202 < 1)
  {
    int v203 = 0;
  }
  else if (v203 >= dword_1BBB8A0C4[9 * (int)v313 + v312])
  {
    int v203 = dword_1BBB8A0C4[9 * (int)v313 + v312];
  }
  if (*(_DWORD *)(a1 + 16))
  {
    float v238 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
    float v239 = 0.0;
    float v240 = 0.0;
    if (v238 >= 0.0)
    {
      float v240 = 100.0;
      if (v238 <= 100.0) {
        float v240 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
      }
    }
    *(float *)(a5 + 3552) = v240;
    float v241 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
    if (v241 >= 0.0)
    {
      float v239 = 100.0;
      if (v241 <= 100.0) {
        float v239 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
      }
    }
    *(float *)(a5 + 3564) = v239;
    float v242 = 1.0;
    if (v239 < 0.0) {
      float v242 = -1.0;
    }
    int v243 = (int)(float)((float)(v239 + (float)(v242 * 0.0)) / 5.0);
    if (v243 > 0x13)
    {
      if (v243 >= 0) {
        int v244 = 11;
      }
      else {
        int v244 = -3;
      }
    }
    else
    {
      int v244 = dword_1BBB8A208[v243];
    }
    if (((v162 - 1) < 2 || v162 == 3) && v244 < 0) {
      int v244 = 0;
    }
    if (*(float *)(a5 + 296) < v164) {
      float v164 = *(float *)(a5 + 296);
    }
    int v245 = v244 + (int)(float)((float)(1.0 / v164) + 0.1);
    v73[3] = v245;
    int v246 = *(_DWORD *)(a5 + 308);
    int v247 = v245 + 2;
    int v248 = v245 + 3;
    if (v246 != 1) {
      int v248 = v245;
    }
    if (v246 != 2) {
      int v247 = v248;
    }
    if (v246 == 3) {
      int v236 = v245 + 1;
    }
    else {
      int v236 = v247;
    }
    goto LABEL_318;
  }
LABEL_301:
  int v236 = v203 + v202;
LABEL_318:
  v73[3] = v236;
  if (*(unsigned char *)(a1 + 54))
  {
    if (v129)
    {
      int v249 = *(_DWORD *)(v8 + 24);
      if (v249)
      {
        int v250 = v236 - v249;
        int v251 = (int)(float)((float)v249 * 0.1);
        if (v236 - v249 < -v251) {
          int v236 = v249 - v251;
        }
        int v252 = v249 + v251;
        if (v250 > v251) {
          int v236 = v252;
        }
      }
    }
    else
    {
      unsigned int v253 = *(_DWORD *)(a5 + 3632);
      if (v253 <= 2)
      {
        int v254 = *(_DWORD *)(v8 + 116);
        int v255 = v236 - v254;
        if (v236 < v254)
        {
          if (v254)
          {
            int v256 = (int)(float)((float)v254 * 0.2);
            if (v255 < -v256) {
              int v236 = v254 - v256;
            }
            int v257 = v254 + v256;
            if (v255 > v256) {
              int v236 = v257;
            }
          }
          v73[3] = v236;
          unsigned int v253 = *(_DWORD *)(a5 + 3632);
        }
      }
      *(_DWORD *)(a5 + 3632) = v253 + 1;
      int v236 = v73[3];
    }
  }
  if (v236 >= 51) {
    int v236 = 51;
  }
  if (v236 <= 12) {
    int v236 = 12;
  }
  v73[3] = v236;
  *(_DWORD *)(v8 + 112) = v236;
  if (*(_DWORD *)(a1 + 16) && *(_DWORD *)(a5 + 3584))
  {
    double v258 = sub_1BBB4E9DC((double)*(int *)(a5 + 3536) / *(double *)(v8 + 80));
    *(double *)(a5 + 3528) = v258;
    float v259 = sub_1BBB4E9DC(v258 * *(double *)(v8 + 72) / 1000.0);
    *(float *)(a5 + 3556) = v259;
    *(float *)(a5 + 3544) = v259;
  }
}

void sub_1BBB142D8(uint64_t a1, double *a2, double *a3, int *a4, int *a5)
{
  uint64_t v7 = a5[52];
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 == 2)
  {
    int v9 = a5[90];
  }
  else if (v8 == 1)
  {
    int v9 = a5[89];
  }
  else if (v8)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = a5[88];
  }
  uint64_t v10 = 0;
  unsigned int v11 = v7 + 30;
  if (v7 >= 0x33) {
    int v12 = 51;
  }
  else {
    int v12 = a5[52];
  }
  if (v11 >= 0x33) {
    unsigned int v11 = 51;
  }
  double v13 = *a3;
  if (*a3 < dbl_1BBB8A258[v12]) {
    double v13 = dbl_1BBB8A258[v12];
  }
  int v14 = a5[53];
  if (v13 <= dbl_1BBB8A258[v11]) {
    double v15 = v13;
  }
  else {
    double v15 = dbl_1BBB8A258[v11];
  }
  *a3 = v15;
  if (v7 == 12) {
    uint64_t v16 = 40;
  }
  else {
    uint64_t v16 = 31;
  }
  float v17 = 10000000.0;
  int v18 = -1;
  do
  {
    float v19 = sub_1BBB4E9DC(v15 - dbl_1BBB8A258[v7 + v10]);
    if (v19 < 0.0) {
      float v19 = -v19;
    }
    if (v19 <= v17)
    {
      int v18 = v10;
      float v17 = v19;
    }
    ++v10;
  }
  while (v16 != v10);
  if (v18 >= 0) {
    int v20 = 30;
  }
  else {
    int v20 = 0;
  }
  if (v18 > 0x1E && *(_DWORD *)(a1 + 8) == 2) {
    int v22 = v20;
  }
  else {
    int v22 = v18;
  }
  int v23 = v7 - v9 + v22;
  if (v23 >= 0) {
    int v24 = v7 - v9 + v22;
  }
  else {
    int v24 = -v23;
  }
  if (v23 < 0) {
    int v25 = -(v14 + v7);
  }
  else {
    int v25 = v14 - v7;
  }
  int v26 = v9 + v25;
  if (v26 >= 0) {
    int v27 = 30;
  }
  else {
    int v27 = 0;
  }
  if (v26 < 0x1F) {
    int v27 = v26;
  }
  if (v24 > v14) {
    int v22 = v27;
  }
  int v28 = v22 + v7;
  if (v28 > 51) {
    double v29 = 90.51;
  }
  else {
    double v29 = dbl_1BBB8A258[v28];
  }
  *a2 = v29;
  *a4 = v28;
}

uint64_t sub_1BBB14480(uint64_t result, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if (*(_DWORD *)(result + 16))
  {
    double v5 = *(double *)(a5 + 72);
    double v6 = *(double *)(a5 + 80) * (double)(*(_DWORD *)(result + 12) * *(_DWORD *)(result + 8));
  }
  else
  {
    double v5 = (double)*(int *)(result + 40);
    double v6 = (float)(*(float *)(result + 36) * (float)(*(_DWORD *)(result + 12) * *(_DWORD *)(result + 8)));
  }
  double v7 = v5 / v6;
  uint64_t v8 = 0;
  while (v7 > dbl_1BBB8A440[v8])
  {
    if (++v8 == 9)
    {
      LODWORD(v8) = 8;
      break;
    }
  }
  uint64_t v9 = 0;
  if ((int)v8 >= 8) {
    LODWORD(v8) = 8;
  }
  *a3 = v8 & ~((int)v8 >> 31);
  while (dword_1BBB8A488[v9] < a2)
  {
    if (++v9 == 9)
    {
      LODWORD(v9) = *a4;
      break;
    }
  }
  if ((int)v9 >= 8) {
    LODWORD(v9) = 8;
  }
  *a4 = v9 & ~((int)v9 >> 31);
  return result;
}

uint64_t sub_1BBB14540(uint64_t result, unsigned char *a2, unsigned int a3)
{
  int v3 = *(unsigned __int8 *)(result + 36);
  unsigned int v4 = *(_DWORD *)(result + 32);
  double v5 = *(_DWORD **)(result + 16);
  uint64_t v6 = a3;
  int v7 = 8;
  do
  {
    int v8 = *a2;
    if (*a2)
    {
      BOOL v9 = __OFSUB__(v8, v7);
      int v11 = v8 - v7;
      char v10 = (v11 < 0) ^ v9 | (v11 == 0);
      int v12 = 2 * v11;
      if (v10) {
        int v13 = -v12;
      }
      else {
        int v13 = v12 - 1;
      }
      unsigned int v14 = v13 + 1;
      unsigned int v15 = __clz(v14);
      unsigned int v16 = (((v14 - (0x80000000 >> v15)) | (0x80000000 >> v15)) << (2 * v15 - v3 - 31)) | v4;
      *double v5 = bswap32(v16);
      unsigned int v17 = v3 - 2 * v15 + 63;
      int v3 = v17 & 7;
      double v5 = (_DWORD *)((char *)v5 + (v17 >> 3));
      unsigned int v4 = v16 << (v17 & 0xF8);
      if (v17 >= 0x20) {
        unsigned int v4 = 0;
      }
      int v7 = *a2;
    }
    else
    {
      int v7 = 0;
    }
    ++a2;
    --v6;
  }
  while (v6);
  *(void *)(result + 16) = v5;
  *(_DWORD *)(result + 32) = v4;
  *(unsigned char *)(result + 36) = v3;
  return result;
}

_DWORD *sub_1BBB145EC(_DWORD *result, uint64_t a2, int *a3)
{
  int v3 = result[3];
  int v4 = v3 + 1;
  double v5 = *(_DWORD **)(a2 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 32);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 36);
  int v8 = *a3;
  if (!*a3) {
    int v8 = (v3 + v3 + 1 + 2) >> 3;
  }
  result[1] = v8;
  *double v5 = bswap32(v6);
  int v9 = (v7 + 1) & 7;
  char v10 = (_DWORD *)((char *)v5 + ((unint64_t)(v7 + 1) >> 3));
  unsigned int v11 = v6 << ((v7 + 1) & 0xF8);
  if (v7 >= 0x1F) {
    unsigned int v11 = 0;
  }
  _DWORD *v10 = bswap32(v11);
  int v12 = (_DWORD *)((char *)v10 + ((unint64_t)(v9 + 2) >> 3));
  unsigned int v13 = (6 << (27 - ((v9 + 2) & 7))) | (v11 << ((v9 + 2) & 8));
  *int v12 = bswap32(v13);
  unint64_t v14 = (((_BYTE)v9 + 2) & 7u) + 5;
  int v15 = ((((_BYTE)v9 + 2) & 7) + 5) & 7;
  unsigned int v16 = (_DWORD *)((char *)v12 + (v14 >> 3));
  unsigned int v17 = (v13 << (v14 & 8)) | (*result << (24 - (v14 & 7)));
  *unsigned int v16 = bswap32(v17);
  unsigned int v18 = (result[1] << (24 - ((((v9 + 2) & 7) + 5) & 7))) | (v17 << 8);
  *(_DWORD *)((char *)v16 + 1) = bswap32(v18);
  LODWORD(v14) = result[2] + 1;
  unsigned int v19 = __clz(v14);
  unsigned int v20 = (((v14 - (0x80000000 >> v19)) | (0x80000000 >> v19)) << (2 * v19 - v15 - 31)) | (v18 << 8);
  *(_DWORD *)((char *)v16 + 2) = bswap32(v20);
  int v21 = (char *)v16 + 2;
  unint64_t v22 = v15 - 2 * v19 + 63;
  int v23 = ((_BYTE)v15 - 2 * (_BYTE)v19 + 63) & 7;
  int v24 = &v21[v22 >> 3];
  unsigned int v25 = v20 << (v22 & 0xF8);
  if (v22 >= 0x20) {
    unsigned int v25 = 0;
  }
  char v26 = 31 - v3;
  unsigned int v27 = v25 | (result[4] << (v26 - v23));
  *(_DWORD *)int v24 = bswap32(v27);
  unint64_t v28 = (v23 + v4);
  int v29 = ((_BYTE)v23 + (_BYTE)v4) & 7;
  int v30 = &v24[v28 >> 3];
  unsigned int v31 = v27 << (v28 & 0xF8);
  if (v28 >= 0x20) {
    unsigned int v31 = 0;
  }
  unsigned int v32 = v31 | (result[36] << (v26 - v29));
  *(_DWORD *)int v30 = bswap32(v32);
  unsigned int v33 = v29 + v4;
  int v34 = &v30[(v29 + v4) >> 3];
  unsigned int v35 = v32 << (v33 & 0xF8);
  if (v33 >= 0x20) {
    unsigned int v35 = 0;
  }
  int v36 = v33 & 7;
  if (v36)
  {
    *(_DWORD *)int v34 = bswap32(v35 | (1 << (v36 ^ 0x1F)));
    char v37 = v36 + 1;
    v34 += (v36 + 1) >> 3;
    uint64_t v38 = (v36 + 1) & 7;
    if ((v37 & 7) != 0)
    {
      unsigned int v35 = 0;
      *v34++ &= byte_1BBB8A4AC[v38];
    }
    else
    {
      unsigned int v35 = 0;
    }
  }
  *a3 = v34 - v21;
  *(_DWORD *)int v34 = bswap32(v35 | 0x80000000);
  *int v34 = 0x80;
  *(void *)(a2 + 16) = v34 + 1;
  *(_DWORD *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 36) = 0;
  return result;
}

uint64_t sub_1BBB14808(char **a1)
{
  int v2 = (char *)malloc_type_calloc(1uLL, 0x2A0uLL, 0x10700409586CEC2uLL);
  if (v2)
  {
    uint64_t v3 = 0;
    for (char i = 1; ; char i = 0)
    {
      char v5 = i;
      uint64_t v6 = pthread_cond_init((pthread_cond_t *)&v2[336 * v3 + 8], 0);
      if (v6) {
        break;
      }
      uint64_t v6 = pthread_cond_init((pthread_cond_t *)&v2[336 * v3 + 56], 0);
      if (v6) {
        break;
      }
      uint64_t v6 = pthread_mutex_init((pthread_mutex_t *)&v2[336 * v3 + 104], 0);
      if (v6) {
        break;
      }
      uint64_t v6 = pthread_create((pthread_t *)&v2[336 * v3], 0, (void *(__cdecl *)(void *))sub_1BBB14908, &v2[336 * v3]);
      if (v6) {
        break;
      }
      uint64_t v3 = 1;
      if ((v5 & 1) == 0)
      {
        uint64_t v7 = 0;
        *a1 = v2;
        return v7;
      }
    }
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a1 = 0;
  sub_1BBA1AC6C(v2);
  return v7;
}

uint64_t sub_1BBB14908(uint64_t a1)
{
  int v2 = (pthread_mutex_t *)(a1 + 104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 104));
  while (1)
  {
    if (!*(_DWORD *)(a1 + 172)) {
      pthread_cond_wait((pthread_cond_t *)(a1 + 8), v2);
    }
    if (*(_DWORD *)(a1 + 168)) {
      break;
    }
    if (((*(_DWORD *)(a1 + 228) << 16) / *(_DWORD *)(a1 + 196)) <= 0x20000)
    {
      sub_1BBB14F40(0, (uint64_t *)(a1 + 176), (void (*)(uint64_t, uint16x8_t *, void, char *, char *, char *, void))BilinearFilterH_vperm2_neon64_h264, v3, v4, v5);
      sub_1BBB14F40(1, (uint64_t *)(a1 + 256), (void (*)(uint64_t, uint16x8_t *, void, char *, char *, char *, void))BilinearFilterH_chroma_vperm2_neon64_h264, v9, v10, v11);
    }
    else
    {
      sub_1BBB14A18(0, a1 + 176, (uint64_t (*)(uint64_t, uint16x8_t *, void, uint64_t, unint64_t, void))BilinearFilterH_swift_neon_h264, v3, v4, v5);
      sub_1BBB14A18(1, a1 + 256, (uint64_t (*)(uint64_t, uint16x8_t *, void, uint64_t, unint64_t, void))BilinearFilterH_swift_chroma_neon_h264, v6, v7, v8);
    }
    *(_DWORD *)(a1 + 172) = 0;
    pthread_cond_signal((pthread_cond_t *)(a1 + 56));
  }
  pthread_mutex_unlock(v2);
  return 0;
}

uint64_t sub_1BBB14A18(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint16x8_t *, void, uint64_t, unint64_t, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v90 = a3;
  int v7 = a1;
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](a1, *(unsigned int *)(a2 + 52), a3, ((*(_DWORD *)(a2 + 52) << a1) + 16), a5, a6);
  MEMORY[0x1F4188790](v8, v9, *(int *)(a2 + 20), v10, v11, v12);
  unint64_t v14 = ((unint64_t)&v84 - ((v13 + 47) & 0xFFFFFFFFFFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = *(unsigned int *)(a2 + 76);
  uint64_t v94 = v16;
  uint64_t result = MEMORY[0x1F4188790](v15, v17, v13, (4 * v16 + 15) & 0x7FFFFFFF0, v18, v19);
  uint8x8_t v93 = (char *)&v84 - v28;
  int v29 = *(_DWORD *)(a2 + 56);
  int v30 = *(_DWORD *)(a2 + 24);
  if (v22 < 1)
  {
    int v33 = v25;
  }
  else
  {
    uint64_t v31 = 0;
    int v32 = 0;
    do
    {
      *(unsigned char *)(v14 + v31) = (unsigned __int16)v32 >> 12;
      v32 += (v21 << 16) / v22;
      ++v31;
    }
    while (v31 < *(int *)(a2 + 20));
    int v33 = *(_DWORD *)(a2 + 64);
  }
  if (v33 < *(_DWORD *)(a2 + 68))
  {
    int v86 = -v24;
    uint64_t v34 = v26 + (int)(((result + v25) & -v24) * v27 + 16 * ((result + v25) & (v24 - 1)));
    int v87 = (v29 << 16) / v30;
    unsigned int v88 = (v21 << 16) / v22;
    unsigned int v35 = v87 * v25;
    int v36 = (uint16x8_t *)((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    BOOL v85 = v7 != 0;
    unsigned int v91 = 16 * v24;
    int v92 = v24 - 1;
    int v37 = -1;
    unint64_t v89 = v14;
    do
    {
      double v39 = v93;
      unsigned int v38 = v94;
      double v40 = (uint8x16_t *)&v93[v94 * (unint64_t)(HIWORD(v35) & 3)];
      int v41 = HIWORD(v35) + 1;
      if ((int)HIWORD(v35) <= v37) {
        goto LABEL_17;
      }
      int v42 = *(_DWORD *)(a2 + 76);
      int v43 = v42 + HIWORD(v35);
      uint64_t v44 = *(void *)(a2 + 32);
      int v45 = *(_DWORD **)(a2 + 40);
      if (v45)
      {
        int v46 = *(_DWORD *)(a2 + 52) << v7;
        uint64_t v47 = *(void *)&v45[2 * v85 + 4];
        if (v47)
        {
          int v48 = v45[v85 + 1];
          char v49 = *v45;
          unsigned int v50 = ((v43 / 8) >> v49) * v48;
          int v51 = (v43 / 8) & ~(-1 << v49);
          int v52 = *(_DWORD *)(v47 + v50 + 4 * v51);
          uint64_t v53 = (*(_DWORD *)(v47 + v50 + 4 * (v51 + (1 << v49))) & 0xFFFFFFF) - (v52 & 0xFFFFFFFu);
          v44 += v52 & 0xFFFFFFF;
          signed int v54 = 16 * v43 - ((v43 / 8) << 7);
        }
        else
        {
          signed int v54 = 16 * (v43 & 7) + v46 * (v43 & 0xFFFFFFF8);
          uint64_t v53 = 128;
        }
        double v57 = (long long *)(v44 + v54);
        int v58 = &v93[v94 * (unint64_t)(HIWORD(v35) & 3)];
      }
      else
      {
        if (((v42 + v41) & v92) != 0)
        {
          double v56 = v93;
          unsigned int v55 = v94;
          Detile2Rows_neon_h264(&v93[v94 * (unint64_t)(HIWORD(v35) & 3)], &v93[v94 * (unint64_t)((BYTE2(v35) + 1) & 3)], (long long *)(v44 + (v43 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v43 & v92)), *(_DWORD *)(a2 + 52) << v7, v91);
          double v39 = v56;
          unsigned int v38 = v55;
          int v37 = HIWORD(v35) + 1;
          goto LABEL_17;
        }
        int v58 = &v93[v94 * (unint64_t)(HIWORD(v35) & 3)];
        double v57 = (long long *)(v44 + (v43 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v43 & v92));
        int v46 = *(_DWORD *)(a2 + 52) << v7;
        uint64_t v53 = v91;
      }
      DetileRow_neon_h264(v58, v57, v46, v53);
      int v37 = HIWORD(v35);
      double v39 = v93;
      unsigned int v38 = v94;
LABEL_17:
      int v59 = *(_DWORD *)(a2 + 56);
      if (v59 <= v41) {
        int v60 = v59 - 1;
      }
      else {
        int v60 = HIWORD(v35) + 1;
      }
      int v61 = &v39[v38 * (unint64_t)(v60 & 3)];
      if (v60 <= v37) {
        goto LABEL_34;
      }
      int v62 = *(_DWORD *)(a2 + 76);
      int v63 = v60 + v62;
      uint64_t v64 = *(void *)(a2 + 32);
      int v65 = *(_DWORD **)(a2 + 40);
      if (v65)
      {
        int v66 = *(_DWORD *)(a2 + 52) << v7;
        uint64_t v67 = *(void *)&v65[2 * v85 + 4];
        if (v67)
        {
          int v68 = v65[v85 + 1];
          char v69 = *v65;
          unsigned int v70 = ((v63 / 8) >> v69) * v68;
          int v71 = (v63 / 8) & ~(-1 << v69);
          int v72 = *(_DWORD *)(v67 + v70 + 4 * v71);
          uint64_t v73 = (*(_DWORD *)(v67 + v70 + 4 * (v71 + (1 << v69))) & 0xFFFFFFF) - (v72 & 0xFFFFFFFu);
          v64 += v72 & 0xFFFFFFF;
          signed int v74 = 16 * v63 - ((v63 / 8) << 7);
        }
        else
        {
          signed int v74 = 16 * (v63 & 7) + v66 * (v63 & 0xFFFFFFF8);
          uint64_t v73 = 128;
        }
        int v77 = (long long *)(v64 + v74);
        int v78 = v61;
      }
      else
      {
        if (((v60 + 1 + v62) & v92) != 0)
        {
          Detile2Rows_neon_h264(v61, &v93[v94 * (unint64_t)(((_BYTE)v60 + 1) & 3)], (long long *)(v64 + (v63 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v63 & v92)), *(_DWORD *)(a2 + 52) << v7, v91);
          int v75 = *(_DWORD *)(a2 + 56);
          if (v75 <= v41) {
            int v76 = v75 - 1;
          }
          else {
            int v76 = HIWORD(v35) + 1;
          }
          int v37 = v76 + 1;
          goto LABEL_34;
        }
        int v78 = v61;
        int v77 = (long long *)(v64 + (v63 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v63 & v92));
        int v66 = *(_DWORD *)(a2 + 52) << v7;
        uint64_t v73 = v91;
      }
      DetileRow_neon_h264(v78, v77, v66, v73);
      int v79 = *(_DWORD *)(a2 + 56);
      if (v79 <= v41) {
        int v37 = v79 - 1;
      }
      else {
        int v37 = HIWORD(v35) + 1;
      }
LABEL_34:
      int v80 = v33 + *(_DWORD *)(a2 + 76);
      if ((v80 & v92) == 0) {
        uint64_t v34 = *(void *)a2 + *(int *)(a2 + 16) * (uint64_t)(v80 & v86);
      }
      BilinearFilterV_swift_neon_h264(v36, v40, (uint8x16_t *)v61, *(_DWORD *)(a2 + 52) << v7, (unsigned __int16)v35 >> 12);
      int v81 = *(_DWORD *)(a2 + 52);
      if (v7)
      {
        int v82 = 2 * v81;
        v36->i16[2 * v81] = v36->i16[2 * v81 - 2];
        int v81 = (2 * v81) | 1;
      }
      else
      {
        int v82 = *(_DWORD *)(a2 + 52);
      }
      uint64_t v83 = v88;
      v35 += v87;
      v36->i16[v81] = v36->i16[v82 - 1];
      uint64_t result = v90(v34, v36, *(unsigned int *)(a2 + 20), v83, v89, v91);
      v34 += 16;
      ++v33;
    }
    while (v33 < *(_DWORD *)(a2 + 68));
  }
  return result;
}

void sub_1BBB14F40(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint16x8_t *, void, char *, char *, char *, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint8x8_t v121 = a3;
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x1F4188790](a1, ((*((_DWORD *)a2 + 13) << a1) + 16), a3, a4, a5, a6);
  uint64_t v9 = (uint16x8_t *)((char *)&v116 - v8);
  uint64_t v15 = MEMORY[0x1F4188790](v7, v10, v11, v12, v13, v14);
  uint64_t v17 = (char *)&v116 - v16;
  uint64_t v23 = MEMORY[0x1F4188790](v15, v18, v19, v20, v21, v22);
  uint64_t v122 = (char *)&v116 - v24;
  uint64_t v30 = MEMORY[0x1F4188790](v23, v25, v26, v27, v28, v29);
  int v32 = (char *)&v116 - v31;
  int v33 = *((_DWORD *)&qword_1E9F80B40 + v30);
  uint64_t v123 = *a2;
  int v34 = *((_DWORD *)a2 + 16);
  int v35 = v34;
  int v36 = *((_DWORD *)a2 + 19);
  int v119 = *((_DWORD *)a2 + 4);
  uint64_t v125 = v37;
  int v42 = MEMORY[0x1F4188790](v30, v37, v38, v39, v40, v41);
  int v46 = (char *)&v116 - v45;
  int v48 = *((_DWORD *)a2 + 14);
  int v49 = *((_DWORD *)a2 + 6);
  int v50 = (v47 << 16) / (int)v43;
  int v127 = v42;
  unsigned int v126 = v46;
  if (v42)
  {
    if ((int)v43 >= 1)
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      unsigned int v53 = 0;
      unsigned int v54 = 0;
      unsigned int v55 = v122;
      do
      {
        unsigned int v56 = HIWORD(v53);
        char v57 = (unsigned __int16)v53 >> 12;
        int v58 = &v17[v51];
        v58[1] = v57;
        *int v58 = v57;
        if ((v52 & 3) == 0)
        {
          *v55++ = 4 * v56;
          unsigned int v54 = HIWORD(v53);
        }
        v53 += v50;
        int v59 = 67372036 * (v56 - v54);
        int v60 = v51 & 0x7FFFFFF8 | v52 & 3;
        *(_DWORD *)&v32[4 * v60] = v59 + 50462976;
        *(_DWORD *)&v32[4 * (v60 | 4)] = v59 + 117835012;
        ++v52;
        v51 += 2;
      }
      while (v43 != v52);
      goto LABEL_16;
    }
  }
  else if ((int)v43 >= 1)
  {
    uint64_t v61 = 0;
    unsigned int v62 = 0;
    unsigned int v63 = 0;
    unsigned int v55 = v122;
    do
    {
      unsigned int v64 = HIWORD(v62);
      v17[v61] = (unsigned __int16)v62 >> 12;
      if ((v61 & 3) == 0)
      {
        *v55++ = 2 * v64;
        unsigned int v63 = HIWORD(v62);
      }
      v62 += v50;
      *(_DWORD *)&v32[4 * v61++] = 33686018 * (v64 - v63) + 50462976;
    }
    while (v43 != v61);
    goto LABEL_16;
  }
  if ((int)v43 <= -16) {
    goto LABEL_19;
  }
  LODWORD(v43) = 0;
  unsigned int v55 = v122;
LABEL_16:
  int v65 = v43 + 4;
  if (v44 > (int)v43 + 4) {
    int v65 = v44;
  }
  bzero(v55, ((v65 + ~v43) & 0xFFFFFFFC) + 4);
  int v35 = *((_DWORD *)a2 + 16);
  int v46 = v126;
LABEL_19:
  if (v35 < *((_DWORD *)a2 + 17))
  {
    int v118 = -v33;
    int v124 = v33 - 1;
    int v66 = (v48 << 16) / v49;
    uint64_t v67 = v123 + ((v36 + v34) & -v33) * v119 + 16 * ((v36 + v34) & (v33 - 1));
    int v119 = v66;
    unsigned int v68 = v66 * v34;
    BOOL v117 = v127 != 0;
    LODWORD(v123) = 16 * v33;
    int v69 = -1;
    double v120 = v32;
    do
    {
      unsigned int v70 = v17;
      unsigned int v71 = v125;
      int v72 = &v46[v125 * (unint64_t)(HIWORD(v68) & 3)];
      int v73 = HIWORD(v68) + 1;
      if ((int)HIWORD(v68) <= v69) {
        goto LABEL_30;
      }
      int v74 = *((_DWORD *)a2 + 19);
      int v75 = v74 + HIWORD(v68);
      uint64_t v76 = a2[4];
      int v77 = (_DWORD *)a2[5];
      if (v77)
      {
        int v78 = *((_DWORD *)a2 + 13) << v127;
        uint64_t v79 = *(void *)&v77[2 * v117 + 4];
        if (v79)
        {
          int v80 = v77[v117 + 1];
          char v81 = *v77;
          unsigned int v82 = ((v75 / 8) >> v81) * v80;
          int v83 = (v75 / 8) & ~(-1 << v81);
          int v84 = *(_DWORD *)(v79 + v82 + 4 * v83);
          uint64_t v85 = (*(_DWORD *)(v79 + v82 + 4 * (v83 + (1 << v81))) & 0xFFFFFFF) - (v84 & 0xFFFFFFFu);
          v76 += v84 & 0xFFFFFFF;
          signed int v86 = 16 * v75 - ((v75 / 8) << 7);
        }
        else
        {
          signed int v86 = 16 * (v75 & 7) + v78 * (v75 & 0xFFFFFFF8);
          uint64_t v85 = 128;
        }
        unint64_t v89 = (long long *)(v76 + v86);
        double v90 = v72;
      }
      else
      {
        if (((v74 + v73) & v124) != 0)
        {
          unsigned int v87 = v125;
          unsigned int v88 = v126;
          Detile2Rows_neon_h264(v72, &v126[v125 * (unint64_t)((BYTE2(v68) + 1) & 3)], (long long *)(v76 + (v75 & v118) * *((_DWORD *)a2 + 12) + 16 * (v75 & v124)), *((_DWORD *)a2 + 13) << v127, v123);
          int v46 = v88;
          unsigned int v71 = v87;
          int v69 = HIWORD(v68) + 1;
          goto LABEL_30;
        }
        double v90 = v72;
        unint64_t v89 = (long long *)(v76 + (v75 & v118) * *((_DWORD *)a2 + 12) + 16 * (v75 & v124));
        int v78 = *((_DWORD *)a2 + 13) << v127;
        uint64_t v85 = v123;
      }
      DetileRow_neon_h264(v90, v89, v78, v85);
      int v69 = HIWORD(v68);
      unsigned int v71 = v125;
      int v46 = v126;
LABEL_30:
      int v91 = *((_DWORD *)a2 + 14);
      if (v91 <= v73) {
        int v92 = v91 - 1;
      }
      else {
        int v92 = HIWORD(v68) + 1;
      }
      uint8x8_t v93 = &v46[v71 * (unint64_t)(v92 & 3)];
      if (v92 <= v69) {
        goto LABEL_47;
      }
      int v94 = *((_DWORD *)a2 + 19);
      int v95 = v92 + v94;
      uint64_t v96 = a2[4];
      uint8x8_t v97 = (_DWORD *)a2[5];
      if (v97)
      {
        int v98 = *((_DWORD *)a2 + 13) << v127;
        uint64_t v99 = *(void *)&v97[2 * v117 + 4];
        if (v99)
        {
          int v100 = v97[v117 + 1];
          char v101 = *v97;
          unsigned int v102 = ((v95 / 8) >> v101) * v100;
          int v103 = (v95 / 8) & ~(-1 << v101);
          int v104 = *(_DWORD *)(v99 + v102 + 4 * v103);
          uint64_t v105 = (*(_DWORD *)(v99 + v102 + 4 * (v103 + (1 << v101))) & 0xFFFFFFF) - (v104 & 0xFFFFFFFu);
          v96 += v104 & 0xFFFFFFF;
          signed int v106 = 16 * v95 - ((v95 / 8) << 7);
        }
        else
        {
          signed int v106 = 16 * (v95 & 7) + v98 * (v95 & 0xFFFFFFF8);
          uint64_t v105 = 128;
        }
        uint8x8_t v109 = (long long *)(v96 + v106);
        double v110 = v93;
      }
      else
      {
        if (((v92 + 1 + v94) & v124) != 0)
        {
          Detile2Rows_neon_h264(v93, &v126[v125 * (unint64_t)(((_BYTE)v92 + 1) & 3)], (long long *)(v96 + (v95 & v118) * *((_DWORD *)a2 + 12) + 16 * (v95 & v124)), *((_DWORD *)a2 + 13) << v127, v123);
          int v107 = *((_DWORD *)a2 + 14);
          if (v107 <= v73) {
            int v108 = v107 - 1;
          }
          else {
            int v108 = HIWORD(v68) + 1;
          }
          int v69 = v108 + 1;
          goto LABEL_47;
        }
        double v110 = v93;
        uint8x8_t v109 = (long long *)(v96 + (v95 & v118) * *((_DWORD *)a2 + 12) + 16 * (v95 & v124));
        int v98 = *((_DWORD *)a2 + 13) << v127;
        uint64_t v105 = v123;
      }
      DetileRow_neon_h264(v110, v109, v98, v105);
      int v111 = *((_DWORD *)a2 + 14);
      if (v111 <= v73) {
        int v69 = v111 - 1;
      }
      else {
        int v69 = HIWORD(v68) + 1;
      }
LABEL_47:
      int v112 = v35 + *((_DWORD *)a2 + 19);
      if ((v112 & v124) == 0) {
        uint64_t v67 = *a2 + *((int *)a2 + 4) * (uint64_t)(v112 & v118);
      }
      int v113 = v127;
      BilinearFilterV_swift_neon_h264(v9, (uint8x16_t *)v72, (uint8x16_t *)v93, *((_DWORD *)a2 + 13) << v127, (unsigned __int16)v68 >> 12);
      int v114 = *((_DWORD *)a2 + 13);
      if (v113)
      {
        int v115 = 2 * v114;
        v9->i16[2 * v114] = v9->i16[2 * v114 - 2];
        int v114 = (2 * v114) | 1;
      }
      else
      {
        int v115 = *((_DWORD *)a2 + 13);
      }
      v68 += v119;
      v9->i16[v114] = v9->i16[v115 - 1];
      uint64_t v17 = v70;
      v121(v67, v9, *((unsigned int *)a2 + 5), v122, v70, v120, v123);
      v67 += 16;
      ++v35;
      int v46 = v126;
    }
    while (v35 < *((_DWORD *)a2 + 17));
  }
}

uint64_t sub_1BBB155F4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = 0;
  signed int v16 = (a5 + 63) & 0xFFFFFFC0;
  v33[1] = *MEMORY[0x1E4F143B8];
  v33[0] = 0;
  char v17 = 1;
  do
  {
    char v32 = v17;
    uint64_t v31 = (pthread_mutex_t *)(a1 + 336 * v15 + 104);
    pthread_mutex_lock(v31);
    uint64_t v18 = 0;
    *(_DWORD *)(a1 + 336 * v15 + 172) = 1;
    char v19 = 1;
    do
    {
      uint64_t v20 = a1 + 336 * v15 + 80 * v18;
      *(void *)(v20 + 176) = *(void *)(a2 + 8 * v18);
      *(void *)(v20 + 184) = 0;
      *(_DWORD *)(v20 + 192) = a3;
      *(_DWORD *)(v20 + 196) = a4 >> v18;
      *(_DWORD *)(v20 + 200) = a5 >> v18;
      int v21 = v19 & 1;
      if (v19) {
        uint64_t v22 = a7;
      }
      else {
        uint64_t v22 = 0;
      }
      *(void *)(v20 + 208) = *(void *)(a6 + 8 * v18);
      *(void *)(v20 + 216) = v22;
      *(_DWORD *)(v20 + 224) = a8;
      *(_DWORD *)(v20 + 228) = a9 >> v18;
      *(_DWORD *)(v20 + 232) = a10 >> v18;
      *(_DWORD *)(v20 + 236) = v18;
      int v23 = *((_DWORD *)v33 + v18);
      int v24 = v23 + (v16 >> v18 >> 1);
      *((_DWORD *)v33 + v18) = v24;
      if (v24 >= a5 >> v18) {
        int v24 = a5 >> v18;
      }
      *(_DWORD *)(v20 + 240) = v23;
      *(_DWORD *)(v20 + 244) = v24;
      *(_DWORD *)(v20 + 248) = *(_DWORD *)(a11 + 4 * v18);
      *(_DWORD *)(v20 + 252) = *(_DWORD *)(a12 + 4 * v18);
      uint64_t v18 = 1;
      char v19 = 0;
    }
    while (v21);
    pthread_cond_signal((pthread_cond_t *)(a1 + 336 * v15 + 8));
    uint64_t result = pthread_mutex_unlock(v31);
    char v17 = 0;
    uint64_t v15 = 1;
  }
  while ((v32 & 1) != 0);
  return result;
}

uint64_t sub_1BBB15780(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = a1 + 336 * v2;
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 104));
    if (*(_DWORD *)(v5 + 172)) {
      pthread_cond_wait((pthread_cond_t *)(a1 + 336 * v2 + 56), (pthread_mutex_t *)(v5 + 104));
    }
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v5 + 104));
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_1BBB157FC(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v20 = 0;
  if (!sub_1BBB14808(&v20))
  {
    char v17 = v20;
    if (v20)
    {
      sub_1BBB155F4((uint64_t)v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      sub_1BBB15780((uint64_t)v17);
      sub_1BBA1AC6C(v17);
    }
  }
}

double sub_1BBB158E8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 24);
  _Q2 = *(float64x2_t *)(a1 + 8);
  _Q3 = vnegq_f64(_Q2);
  _D5 = *(void *)(a2 + 8);
  _D7 = *(double *)(a2 + 16);
  _D16 = *(double *)(a2 + 24);
  __asm
  {
    FMLS            D6, D7, V3.D[1]
    FMLS            D17, D16, V2.D[1]
    FMLS            D18, D16, V3.D[0]
    FMLS            D4, D7, V2.D[0]
    FMLS            D4, D5, V3.D[1]
  }
  return (_D6 + v2 * _D16)
       / sqrt((_D17 + v2 * _D7) * (_D17 + v2 * _D7) + (_D6 + v2 * _D16) * (_D6 + v2 * _D16) + _D18 * _D18 + _D4 * _D4);
}

char *sub_1BBB15968(char *result, int a2, int a3, char *a4, uint64_t a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)(a3 * a2 + (a3 * a2 < 0 ? 3 : 0)) >> 2;
    uint64_t v7 = &result[a3 * (uint64_t)a2];
    int v8 = 1;
    do
    {
      uint64_t v9 = result;
      int v10 = v8;
      uint64_t v11 = a2;
      if (a2 >= 1)
      {
        do
        {
          char v12 = *v9++;
          a4[v10] = v12;
          v10 += 2;
          --v11;
        }
        while (v11);
      }
      ++v5;
      v8 += a5;
      result += a2;
    }
    while (v5 != a3);
    if (a3 >= 2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = a3 >> 1;
      if (a2 >= 0) {
        int v15 = a2;
      }
      else {
        int v15 = a2 + 1;
      }
      uint64_t v16 = (v15 >> 1);
      uint64_t v17 = (uint64_t)v15 >> 1;
      uint64_t v18 = a5 << 33;
      uint64_t v19 = 2 * (int)a5;
      uint64_t v20 = 0x200000000;
      uint64_t result = a4;
      do
      {
        if (a2 >= 2)
        {
          int v21 = v7;
          uint64_t v22 = result;
          uint64_t v23 = v20;
          uint64_t v24 = v16;
          do
          {
            *uint64_t v22 = *v21;
            v22 += 4;
            a4[v23 >> 32] = v21[v6];
            v23 += 0x400000000;
            ++v21;
            --v24;
          }
          while (v24);
        }
        ++v13;
        v20 += v18;
        result += v19;
        v7 += v17;
      }
      while (v13 != v14);
    }
  }
  return result;
}

uint64_t sub_1BBB15A6C(uint64_t result)
{
  if (*(unsigned char *)(result + 66) == 2)
  {
    int v1 = *(_DWORD *)(result + 204);
    int v2 = *(_DWORD *)(result + 208);
    if (7 * v2 <= (8 * v1))
    {
      if (7 * v1 > (8 * v2))
      {
        *(unsigned char *)(result + 66) = 1;
        *(_DWORD *)(result + 52) = *(_DWORD *)(result + 48);
      }
    }
    else
    {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  return result;
}

uint64_t sub_1BBB15ABC(uint64_t a1, int a2, int a3)
{
  int v4 = (a2 + 15) >> 4;
  int v5 = (a3 + 15) >> 4;
  uint64_t v6 = (v5 * v4);
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  uint64_t v7 = malloc_type_malloc(36 * v6, 0x82ECD37AuLL);
  *(void *)(a1 + 16) = v7;
  if (!v7) {
    goto LABEL_7;
  }
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 16) + v8;
      *(_WORD *)(v9 + 32) = 0x2000;
      *(unsigned char *)(v9 + 34) = 32;
      *(void *)uint64_t v9 = 0x8000800080008000;
      *(void *)(v9 + 8) = -1;
      *(void *)(v9 + 16) = -1;
      *(void *)(v9 + 24) = -1;
      v8 += 36;
    }
    while (36 * v6 != v8);
  }
  int v10 = malloc_type_malloc(216 * v6, 0x82ECD37AuLL);
  *(void *)(a1 + 120) = v10;
  if (v10)
  {
    uint64_t result = 0;
    *(void *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = -1;
    *(_DWORD *)(a1 + 108) = 0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(unsigned char *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 256;
  }
  else
  {
LABEL_7:
    sub_1BBB15BB8(a1);
    return 4294967188;
  }
  return result;
}

void sub_1BBB15BB8(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 16) = 0;
  }
  char v3 = *(void **)(a1 + 120);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 120) = 0;
  }
}

uint64_t sub_1BBB15BF8(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 34);
  int v4 = *(unsigned __int8 *)(a2 + 112);
  int v5 = *(_DWORD *)(a2 + 108);
  unsigned int v6 = *(unsigned __int8 *)(a2 + 115);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 114);
  if (!v5) {
    int v5 = a3;
  }
  unsigned int v8 = (3 * a3 + 13 * v5 + 8) >> 4;
  *(_DWORD *)(result + 108) = v8;
  BOOL v9 = 25 * a3 < 22 * v8 && 20 * *(unsigned __int16 *)(result + 34) > 23 * v3;
  if (v4 == 2)
  {
    if (!v9)
    {
      if (v6 < 3)
      {
        *(unsigned char *)(result + 112) = 2;
        *(unsigned char *)(result + 114) = v7;
        char v10 = v6 + 1;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (v4 != 1)
  {
    if (v4 || !v9)
    {
LABEL_20:
      char v10 = 0;
      *(unsigned char *)(result + 112) = 0;
      *(unsigned char *)(result + 114) = 0;
      goto LABEL_21;
    }
LABEL_14:
    char v10 = 0;
    char v11 = 1;
    *(unsigned char *)(result + 112) = 1;
LABEL_18:
    *(unsigned char *)(result + 114) = v11;
    goto LABEL_21;
  }
  if (50 * a3 <= 47 * v8)
  {
    char v10 = 0;
    *(unsigned char *)(result + 112) = 1;
    if (v7 >= 0xF) {
      LOBYTE(v7) = 15;
    }
    char v11 = v7 + 1;
    goto LABEL_18;
  }
  *(unsigned char *)(result + 112) = 2;
  *(unsigned char *)(result + 114) = v7;
  char v10 = 1;
LABEL_21:
  *(unsigned char *)(result + 115) = v10;
  return result;
}

uint64_t sub_1BBB15D18(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, float *a11)
{
  char v11 = a11;
  if (a2) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2;
  }
  float v13 = 0.0;
  int v14 = a6 - a5;
  if (a6 < a5)
  {
    int v15 = 0;
    unsigned int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    uint64_t result = 0;
    int v20 = 0;
    goto LABEL_56;
  }
  int v58 = a6 - a5;
  int v15 = 0;
  unsigned int v16 = 0;
  int v17 = 0;
  uint64_t v68 = 0;
  unsigned int v67 = 0;
  unsigned int v64 = 0;
  uint64_t v21 = 0;
  if (a7) {
    BOOL v22 = a8 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  int v23 = !v22;
  unint64_t v59 = a3;
  unint64_t v24 = a4;
  unsigned int v61 = a3;
  unsigned int v62 = a4;
  do
  {
    unsigned int v65 = a5;
    if (a4 < a3)
    {
      uint64_t v25 = v21;
      goto LABEL_52;
    }
    unint64_t v26 = v59;
    int v27 = *(_DWORD *)a1 * a5;
    uint64_t v28 = *(void *)(a1 + 16);
    int v29 = (16 * a5) | 8;
    uint64_t v25 = v21;
    do
    {
      uint64_t v30 = (v27 + v26);
      uint64_t v31 = v28 + 36 * v30;
      if (!*(unsigned char *)(v31 + 32)) {
        goto LABEL_51;
      }
      int v32 = *(_DWORD *)(v28 + 36 * v30 + 8 * (*(unsigned __int8 *)(v31 + 32) - 4) + 12);
      int v33 = (unsigned __int16)v32;
      if (!a9) {
        goto LABEL_46;
      }
      uint64_t v34 = 0;
      int v35 = (16 * v26) | 8;
      int v36 = (unsigned int *)(a10 + 12);
      while (1)
      {
        unsigned int v37 = *v36;
        unsigned int v38 = v36[1];
        unsigned int v39 = *v36 >> 1;
        int v40 = *(v36 - 2);
        int v41 = v36[2];
        if (v41 > 179)
        {
          unsigned int v42 = v38 >> 1;
          if (v41 == 270) {
            goto LABEL_26;
          }
          if (v41 != 180) {
            goto LABEL_32;
          }
LABEL_25:
          v37 >>= 1;
          unsigned int v42 = v36[1];
          goto LABEL_26;
        }
        if (!v41) {
          goto LABEL_25;
        }
        unsigned int v42 = v38 >> 1;
        if (v41 != 90) {
          goto LABEL_32;
        }
LABEL_26:
        int v43 = v29 - *(v36 - 1) - (v38 >> 1);
        if (v43 < 0) {
          int v43 = (v38 >> 1) - (v29 - *(v36 - 1));
        }
        if (v43 < (int)(v42 + 8))
        {
          int v44 = v35 - v40 - v39;
          if (v44 < 0) {
            int v44 = v39 - (v35 - v40);
          }
          if (v44 < (int)(v37 + 8)) {
            break;
          }
        }
LABEL_32:
        if (!a7)
        {
          LODWORD(v34) = 0;
          goto LABEL_38;
        }
        if (*(unsigned __int16 *)(a7 + 2 * v30) < 0x1F4u) {
          goto LABEL_38;
        }
        v36 += 7;
        if (a9 == ++v34) {
          goto LABEL_39;
        }
      }
      v64 += (unsigned __int16)v32;
LABEL_38:
      if (v34 != a9) {
        goto LABEL_46;
      }
LABEL_39:
      unsigned int v45 = (*(int *)v31 >> 16) * (*(int *)v31 >> 16) + (__int16)*(_DWORD *)v31 * (__int16)*(_DWORD *)v31;
      if (v45)
      {
        unsigned int v46 = __clz(v45);
        if (v46) {
          unsigned int v47 = ((byte_1BBB8A634[(unint64_t)(v45 << (v46 + 1)) >> 24] << 12) | 0x200000u) >> ((v46 + 1) >> 1);
        }
        else {
          unsigned int v47 = (11585
        }
               * (((byte_1BBB8A634[(unint64_t)(v45 << (v46 + 1)) >> 24] << 12) | 0x200000u) >> ((v46 + 1) >> 1))) >> 14;
        unsigned int v48 = (v47 + 16) >> 5;
      }
      else
      {
        unsigned int v48 = 0;
      }
      v67 += v48;
      LODWORD(v68) = v45 + v68;
      ++HIDWORD(v68);
      uint64_t v25 = (unsigned __int16)v32 + v25;
LABEL_46:
      if (v23)
      {
        int v49 = *(unsigned __int16 *)(a7 + 2 * v30) + (*(unsigned __int8 *)(a8 + v30) << 7);
        if ((unsigned __int16)v32 <= (3 * v49)) {
          LOWORD(v49) = *(_DWORD *)(v28
        }
                                  + 36 * v30
                                  + 8 * (*(unsigned __int8 *)(v31 + 32) - 4)
                                  + 12);
        int v33 = (unsigned __int16)v49;
      }
      v15 += (unsigned __int16)v32;
      v17 += v33;
      ++v16;
LABEL_51:
      v26 += v12;
    }
    while (v26 <= v24);
LABEL_52:
    uint64_t v21 = v25;
    a5 = v65 + v12;
    a4 = v62;
    a3 = v61;
  }
  while (v65 + v12 <= a6);
  if (v64) {
    float v13 = (float)v21 / (float)v64;
  }
  int v20 = v68;
  int v18 = HIDWORD(v68);
  uint64_t result = v67;
  int v14 = v58;
  char v11 = a11;
LABEL_56:
  *char v11 = v13;
  *(_DWORD *)(a1 + 28) = v15;
  *(_WORD *)(a1 + 32) = (v15 + (v16 >> 1)) / v16;
  *(_WORD *)(a1 + 34) = (v17 + (v16 >> 1)) / v16;
  if (a9)
  {
    if (!v18) {
      goto LABEL_69;
    }
    unsigned int v50 = (a4 - a3 + 1) * (a4 - a3 + 1) + (v14 + 1) * (v14 + 1);
    if (v50)
    {
      unsigned int v51 = __clz(v50);
      unsigned int v52 = ((byte_1BBB8A634[(unint64_t)(v50 << (v51 + 1)) >> 24] << 12) | 0x200000u) >> ((v51 + 1) >> 1);
      if ((v51 & 1) == 0) {
        unsigned int v52 = (11585 * v52) >> 14;
      }
      unsigned int v53 = ((2 * v52 + 32) & 0x7FFFFFC0 | 0x30) / 0x64;
    }
    else
    {
      unsigned int v53 = 0;
    }
    int v54 = (int)result / v18;
    unsigned int v55 = v20 / v18 - v54 * v54;
    if (v20 / v18 != v54 * v54)
    {
      unsigned int v56 = __clz(v55);
      unsigned int v57 = ((byte_1BBB8A634[(unint64_t)(v55 << (v56 + 1)) >> 24] << 12) | 0x200000u) >> ((v56 + 1) >> 1);
      if ((v56 & 1) == 0) {
        unsigned int v57 = (11585 * v57) >> 14;
      }
      unsigned int v55 = (v57 + 16) >> 5;
    }
    if (v54 >= (int)v53 || v55 >= v53) {
      *(unsigned char *)(a1 + 113) = 0;
    }
    else {
LABEL_69:
    }
      *(unsigned char *)(a1 + 113) = 1;
  }
  return result;
}

uint64_t sub_1BBB16148(uint64_t a1, int a2, int a3)
{
  int v4 = a2 + 15;
  int v5 = a3 + 15;
  unsigned int v6 = malloc_type_malloc(464 * ((a3 + 15) >> 4) * ((a2 + 15) >> 4), 0x82ECD37AuLL);
  *(void *)(a1 + 8) = v6;
  if (!v6) {
    return 4294967188;
  }
  *(_DWORD *)a1 = v4 >> 4;
  *(_DWORD *)(a1 + 4) = v5 >> 4;
  *(void *)(a1 + 28) = -1;
  *(void *)(a1 + 24) = 0xFFFFFFFF00000000;
  uint64_t v7 = ((v5 >> 4) * (v4 >> 4));
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = (_DWORD *)(v11 + 464 * i);
      *uint64_t v12 = 0x7FFFFFFF;
      v12[3] = 0;
      uint64_t v13 = v11 + v8;
      do
      {
        uint64_t v14 = v13 + v10;
        *(_DWORD *)(v14 + 16) = 0x7FFFFFFF;
        *(_WORD *)(v14 + 40) = 8224;
        v10 += 28;
      }
      while (v10 != 448);
      v8 += 464;
    }
  }
  return 0;
}

uint64_t sub_1BBB16228(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, unsigned char *a8, int a9)
{
  if (a5 - a4 >= 2)
  {
    unsigned int v9 = (a5 - a4) >> 1;
    uint64_t v10 = (unsigned __int8 *)(a2 + (a4 >> 1) * a7);
    uint64_t v11 = (unsigned __int8 *)(result + a6 * a4);
    uint64_t v12 = &v11[a6];
    int v13 = dword_1BBB8B868[(a4 >> 1) & 0x1F];
    uint64_t result = 2 * a6 - a3;
    do
    {
      a4 += 2;
      int v14 = dword_1BBB8B868[(a4 >> 1) & 0x1F];
      if (a3 >= 2)
      {
        unsigned int v15 = v13 & 0xFFF;
        unsigned int v16 = a3 >> 1;
        do
        {
          int v17 = v11[1];
          int v18 = v12[1];
          int v20 = *v11;
          v11 += 2;
          int v19 = v20;
          int v21 = *v12;
          v12 += 2;
          int v22 = *v10;
          int v23 = v10[1];
          int v24 = v18 + v17 + v23;
          int v25 = v14 + v19 + v21 + v22;
          unsigned int v26 = byte_1BBB8A836[v15 + 1];
          char v27 = byte_1BBB8A734[v19 + (byte_1BBB8A836[v15] & 1) - (byte_1BBB8A836[v15] >> 1) + 1];
          LOBYTE(v26) = byte_1BBB8A734[v17 + (v26 & 1) - (v26 >> 1) + 1];
          unsigned int v28 = byte_1BBB8A836[v15 + 16];
          unsigned int v29 = byte_1BBB8A836[v15 + 17];
          LOBYTE(v28) = byte_1BBB8A734[v21 + (v28 & 1) - (v28 >> 1) + 1];
          LOBYTE(v18) = byte_1BBB8A734[v18 + (v29 & 1) - (v29 >> 1) + 1];
          unsigned int v30 = byte_1BBB8A836[v15 + 32];
          unsigned int v31 = byte_1BBB8A836[v15 + 33];
          LOBYTE(v30) = byte_1BBB8A734[v22 + (v30 & 1) - (v30 >> 1) + 1];
          LOBYTE(v31) = byte_1BBB8A734[v23 + (v31 & 1) - (v31 >> 1) + 1];
          *a8 = v30;
          a8[1] = v27;
          a8[2] = v31;
          a8[3] = v26;
          a8[a9] = v30;
          a8[a9 + 1] = v28;
          a8[a9 + 2] = v31;
          a8[a9 + 3] = v18;
          int v14 = v25 + (v24 << 8);
          int v32 = ((_WORD)v15 + 34) & 0xFFF;
          v15 += 2;
          if ((v16 & 7) == 1) {
            unsigned int v15 = v32;
          }
          v10 += 2;
          a8 += 4;
          --v16;
        }
        while (v16);
      }
      v11 += result;
      v12 += result;
      v10 += a7 - a3;
      a8 += 2 * (a9 - a3);
      LOWORD(v13) = v14;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1BBB1643C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, unsigned char *a8, int a9, uint64_t a10)
{
  if (a5 - a4 >= 2)
  {
    unsigned int v10 = (a5 - a4) >> 1;
    uint64_t v11 = (unsigned __int8 *)(a2 + (a4 >> 1) * a7);
    uint64_t v12 = (unsigned __int8 *)(result + a6 * a4);
    int v13 = &v12[a6];
    int v14 = dword_1BBB8B868[(a4 >> 1) & 0x1F];
    unsigned int v34 = a3 >> 1;
    uint64_t result = (a9 + 3);
    uint64_t v15 = 2 * a6 - a3;
    uint64_t v16 = a7 - a3;
    do
    {
      a4 += 2;
      int v17 = dword_1BBB8B868[(a4 >> 1) & 0x1F];
      if (a3 >= 2)
      {
        int v18 = v14 & 0xFFF;
        unsigned int v19 = v34;
        do
        {
          int v20 = *(unsigned __int8 *)(a10 + *v12);
          int v21 = *(unsigned __int8 *)(a10 + v12[1]);
          int v22 = *(unsigned __int8 *)(a10 + *v13);
          int v23 = *(unsigned __int8 *)(a10 + v13[1]);
          int v24 = *v11;
          int v25 = v11[1];
          int v26 = v23 + v21 + v25;
          int v27 = v17 + v20 + v22 + v24;
          unsigned int v28 = byte_1BBB8A836[v18 + 1];
          char v29 = byte_1BBB8A734[v20 + (byte_1BBB8A836[v18] & 1) - (byte_1BBB8A836[v18] >> 1) + 1];
          LOBYTE(v28) = byte_1BBB8A734[v21 + (v28 & 1) - (v28 >> 1) + 1];
          unsigned int v30 = byte_1BBB8A836[v18 + 16];
          unsigned int v31 = byte_1BBB8A836[v18 + 17];
          LOBYTE(v30) = byte_1BBB8A734[v22 + (v30 & 1) - (v30 >> 1) + 1];
          LOBYTE(v31) = byte_1BBB8A734[v23 + (v31 & 1) - (v31 >> 1) + 1];
          unsigned int v32 = byte_1BBB8A836[v18 + 32];
          unsigned int v33 = byte_1BBB8A836[v18 + 33];
          LOBYTE(v32) = byte_1BBB8A734[v24 + (v32 & 1) - (v32 >> 1) + 1];
          LOBYTE(v33) = byte_1BBB8A734[v25 + (v33 & 1) - (v33 >> 1) + 1];
          *a8 = v32;
          a8[1] = v29;
          a8[2] = v33;
          a8[3] = v28;
          a8[a9] = v32;
          a8[a9 + 1] = v30;
          a8[a9 + 2] = v33;
          a8[result] = v31;
          int v17 = v27 + (v26 << 8);
          if ((v19 & 7) == 1) {
            int v18 = ((_WORD)v18 + 34) & 0xFFF;
          }
          else {
            v18 += 2;
          }
          v12 += 2;
          v13 += 2;
          v11 += 2;
          a8 += 4;
          --v19;
        }
        while (v19);
      }
      v12 += v15;
      v13 += v15;
      v11 += v16;
      a8 += 2 * (a9 - a3);
      LOWORD(v14) = v17;
      --v10;
    }
    while (v10);
  }
  return result;
}

unsigned char *sub_1BBB16674(unsigned char *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, void *a10)
{
  unsigned int v48 = result;
  if (a5 >= a7) {
    int v10 = a7;
  }
  else {
    int v10 = a5;
  }
  if (a6 >= a8) {
    int v11 = a8;
  }
  else {
    int v11 = a6;
  }
  int v52 = v11;
  int v47 = v11 - 1;
  if (v11 >= 1)
  {
    uint64_t v54 = 0;
    int v55 = 0;
    int v53 = 0;
    uint64_t v13 = a10[1];
    uint64_t v14 = a10[2];
    uint64_t v15 = a10[3];
    uint64_t v17 = a10[5];
    uint64_t v16 = a10[6];
    uint64_t v19 = a10[8];
    uint64_t v18 = a10[9];
    int v58 = v10 - 1;
    if (a7 >= 0) {
      int v20 = a7;
    }
    else {
      int v20 = a7 + 1;
    }
    int v45 = v20 >> 1;
    uint64_t v21 = a10[13];
    uint64_t v57 = a10[14];
    int v46 = 2 * a7;
    uint64_t v51 = 2 * a7;
    uint64_t v59 = a2 + a7;
    int v56 = v10;
    do
    {
      if (v10 >= 1)
      {
        uint64_t v22 = 0;
        int v23 = &v48[v54];
        int v24 = a9;
        if (v53 == v47) {
          int v24 = 0;
        }
        int v25 = &v23[v24];
        int v26 = v45 * v55 / v46;
        int v27 = (unsigned char *)(a4 + v26);
        uint64_t result = (unsigned char *)(a3 + v26);
        do
        {
          uint64_t v28 = a2 + v22;
          uint64_t v29 = v23[1];
          uint64_t v30 = v23[2];
          uint64_t v31 = v23[3];
          uint64_t v32 = v25[1];
          uint64_t v33 = v25[2];
          uint64_t v34 = v25[3];
          *(unsigned char *)(a2 + v22) = byte_1BBB8B8E8[*(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v30))
                                              + (unint64_t)*(unsigned __int8 *)(v13
                                                                                     + *(unsigned __int8 *)(v21 + v29))
                                              + *(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v31))];
          *(unsigned char *)(v59 + v22) = byte_1BBB8B8E8[*(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v33))
                                               + (unint64_t)*(unsigned __int8 *)(v13
                                                                                      + *(unsigned __int8 *)(v21 + v32))
                                               + *(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v34))];
          if (v58 == v22)
          {
            int v60 = v23;
            uint64_t v35 = v29;
            uint64_t v36 = v30;
            uint64_t v37 = v31;
            *(unsigned char *)(v28 + 1) = *(unsigned char *)(a2 + v22);
            uint64_t v38 = v32;
            uint64_t v39 = v33;
            uint64_t v40 = v34;
            int v41 = (unsigned char *)(v59 + v22);
          }
          else
          {
            uint64_t v35 = v23[5];
            uint64_t v36 = v23[6];
            uint64_t v37 = v23[7];
            int v60 = v23 + 8;
            uint64_t v38 = v25[5];
            uint64_t v39 = v25[6];
            uint64_t v40 = v25[7];
            *(unsigned char *)(v28 + 1) = byte_1BBB8B8E8[*(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v36))
                                               + (unint64_t)*(unsigned __int8 *)(v13
                                                                                      + *(unsigned __int8 *)(v21 + v35))
                                               + *(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v37))];
            v25 += 8;
            int v41 = &byte_1BBB8B8E8[*(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v40))
                                + *(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v39))
                                + (unint64_t)*(unsigned __int8 *)(v13 + *(unsigned __int8 *)(v21 + v38))];
            int v10 = v56;
          }
          *(unsigned char *)(v59 + v22 + 1) = *v41;
          uint64_t v42 = v32 + v29 + v35 + v38;
          uint64_t v43 = v33 + v30 + v36 + v39;
          uint64_t v44 = v34 + v31 + v37 + v40;
          *result++ = byte_1BBB8B9E8[((*(__int16 *)(v57 + 2 * v44) >> 1)
                                    - (*(__int16 *)(v17 + 2 * *(__int16 *)(v57 + 2 * v42))
                                     + *(__int16 *)(v16 + 2 * *(__int16 *)(v57 + 2 * v43)))
                                    + 513) >> 2];
          *v27++ = byte_1BBB8B9E8[((*(__int16 *)(v57 + 2 * v42) >> 1)
                                 - (*(__int16 *)(v19 + 2 * *(__int16 *)(v57 + 2 * v43))
                                  + *(__int16 *)(v18 + 2 * *(__int16 *)(v57 + 2 * v44)))
                                 + 513) >> 2];
          v22 += 2;
          int v23 = v60;
        }
        while ((int)v22 < v10);
      }
      v55 += v51;
      v54 += 2 * a9;
      v59 += v51;
      a2 += v51;
      v53 += 2;
    }
    while (v53 < v52);
  }
  return result;
}

void sub_1BBB169D0(void ***a1)
{
  if (a1)
  {
    int v2 = (void **)malloc_type_calloc(0x78uLL, 1uLL, 0x4AE20AB7uLL);
    *a1 = v2;
    if (v2)
    {
      **a1 = malloc_type_malloc(0x300uLL, 0x82ECD37AuLL);
      int v3 = *a1;
      int v4 = **a1;
      if (v4)
      {
        uint64_t v5 = 0;
        v3[1] = v4;
        (*a1)[2] = (char *)**a1 + 256;
        (*a1)[3] = (char *)**a1 + 512;
        do
        {
          float v6 = (float)(unsigned __int16)v5;
          *((unsigned char *)(*a1)[1] + v5) = (int)(float)(v6 * 0.299);
          *((unsigned char *)(*a1)[2] + v5) = (int)(float)(v6 * 0.587);
          *((unsigned char *)(*a1)[3] + v5++) = (int)(float)(v6 * 0.114);
        }
        while (v5 != 256);
        (*a1)[4] = malloc_type_malloc(0x2800uLL, 0x82ECD37AuLL);
        int v3 = *a1;
        uint64_t v7 = (*a1)[4];
        if (v7)
        {
          uint64_t v8 = 0;
          v3[5] = v7;
          (*a1)[6] = (char *)(*a1)[4] + 2048;
          (*a1)[7] = (char *)(*a1)[4] + 4096;
          (*a1)[8] = (char *)(*a1)[4] + 6144;
          (*a1)[9] = (char *)(*a1)[4] + 0x2000;
          do
          {
            float v9 = (float)(unsigned __int16)v8;
            *((_WORD *)(*a1)[5] + v8) = (int)(float)(v9 * 0.1687);
            *((_WORD *)(*a1)[6] + v8) = (int)(float)(v9 * 0.3313);
            *((_WORD *)(*a1)[7] + v8) = (int)(float)(v9 * 0.5);
            *((_WORD *)(*a1)[8] + v8) = (int)(float)(v9 * 0.4187);
            *((_WORD *)(*a1)[9] + v8++) = (int)(float)(v9 * 0.0813);
          }
          while (v8 != 1024);
          (*a1)[13] = malloc_type_malloc(0x100uLL, 0x82ECD37AuLL);
          int v3 = *a1;
          if ((*a1)[13])
          {
            (*a1)[14] = malloc_type_malloc(0x800uLL, 0x82ECD37AuLL);
            int v3 = *a1;
            if ((*a1)[14]) {
              return;
            }
          }
        }
        if (*v3)
        {
          free(*v3);
          *int v3 = 0;
        }
      }
      int v10 = v3[4];
      if (v10)
      {
        free(v10);
        v3[4] = 0;
      }
      int v11 = v3[13];
      if (v11)
      {
        free(v11);
        v3[13] = 0;
      }
      uint64_t v12 = v3[14];
      if (v12) {
        free(v12);
      }
      free(v3);
      *a1 = 0;
    }
  }
}

void sub_1BBB16C64(int a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = 0;
    double v6 = (double)a1 / 144179.0;
    int32x4_t v7 = (int32x4_t)xmmword_1BBB6FD00;
    int32x4_t v8 = (int32x4_t)xmmword_1BBB6FD10;
    int32x4_t v9 = (int32x4_t)xmmword_1BBB6FCF0;
    float64x2_t v88 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
    int32x4_t v10 = (int32x4_t)xmmword_1BBB6F6C0;
    __asm { FMOV            V24.2D, #0.5 }
    float64x2_t v89 = _Q24;
    do
    {
      int32x4_t v103 = v10;
      int32x4_t v105 = v9;
      int32x4_t v107 = v8;
      int32x4_t v109 = v7;
      uint64_t v16 = v9.i64[0];
      v17.i64[0] = v10.i32[0];
      v17.i64[1] = v10.i32[1];
      float64x2_t v18 = vcvtq_f64_s64(v17);
      uint64_t v19 = v9.i64[1];
      v17.i64[0] = v103.i32[2];
      v17.i64[1] = v103.i32[3];
      float64x2_t v20 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v16;
      v17.i64[1] = SHIDWORD(v16);
      float64x2_t v21 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v19;
      v17.i64[1] = SHIDWORD(v19);
      float64x2_t v22 = vcvtq_f64_s64(v17);
      uint64_t v23 = v7.i64[0];
      v17.i64[0] = v107.i32[0];
      v17.i64[1] = v107.i32[1];
      float64x2_t v24 = vcvtq_f64_s64(v17);
      uint64_t v25 = v7.i64[1];
      v17.i64[0] = v107.i32[2];
      v17.i64[1] = v107.i32[3];
      float64x2_t v26 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v23;
      v17.i64[1] = SHIDWORD(v23);
      float64x2_t v27 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v25;
      v17.i64[1] = SHIDWORD(v25);
      float64x2_t v99 = vdivq_f64(v27, v88);
      float64x2_t v101 = vdivq_f64(vcvtq_f64_s64(v17), v88);
      float64x2_t v95 = vdivq_f64(v24, v88);
      float64x2_t v97 = vdivq_f64(v26, v88);
      float64x2_t v91 = vdivq_f64(v21, v88);
      float64x2_t v93 = vdivq_f64(v22, v88);
      float64x2_t __x = vdivq_f64(v20, v88);
      float64x2_t v86 = vdivq_f64(v18, v88);
      long double v87 = pow(v86.f64[0], v6);
      v86.f64[0] = pow(v86.f64[1], v6);
      long double v85 = pow(__x.f64[0], v6);
      __x.f64[0] = pow(__x.f64[1], v6);
      long double v84 = pow(v91.f64[0], v6);
      v91.f64[0] = pow(v91.f64[1], v6);
      long double v83 = pow(v93.f64[0], v6);
      v93.f64[0] = pow(v93.f64[1], v6);
      long double v82 = pow(v95.f64[0], v6);
      v95.f64[0] = pow(v95.f64[1], v6);
      long double v81 = pow(v97.f64[0], v6);
      v97.f64[0] = pow(v97.f64[1], v6);
      long double v80 = pow(v99.f64[0], v6);
      long double v79 = pow(v99.f64[1], v6);
      v99.f64[0] = pow(v101.f64[0], v6);
      long double v28 = pow(v101.f64[1], v6);
      v29.f64[0] = v80;
      v29.f64[1] = v79;
      v31.f64[0] = v81;
      v30.f64[0] = v82;
      v30.f64[1] = v95.f64[0];
      v32.f64[0] = v99.f64[0];
      v31.f64[1] = v97.f64[0];
      v34.f64[0] = v83;
      v33.f64[0] = v84;
      v33.f64[1] = v91.f64[0];
      v34.f64[1] = v93.f64[0];
      v35.f64[0] = v87;
      v35.f64[1] = v86.f64[0];
      v32.f64[1] = v28;
      v36.f64[0] = v85;
      v36.f64[1] = __x.f64[0];
      float64x2_t v37 = vmulq_f64(v34, v88);
      float64x2_t v38 = vaddq_f64(vmulq_f64(v29, v88), v89);
      float64x2_t v39 = vaddq_f64(vmulq_f64(v30, v88), v89);
      float64x2_t v40 = vaddq_f64(vmulq_f64(v31, v88), v89);
      float64x2_t v41 = vaddq_f64(vmulq_f64(v33, v88), v89);
      float64x2_t v42 = vaddq_f64(v37, v89);
      float64x2_t v43 = vaddq_f64(vmulq_f64(v35, v88), v89);
      float64x2_t v44 = vaddq_f64(vmulq_f64(v32, v88), v89);
      float64x2_t v45 = vaddq_f64(vmulq_f64(v36, v88), v89);
      float64x2_t v46 = (float64x2_t)vbicq_s8((int8x16_t)v38, (int8x16_t)vcltzq_f64(v38));
      float64x2_t v47 = (float64x2_t)vbicq_s8((int8x16_t)v39, (int8x16_t)vcltzq_f64(v39));
      float64x2_t v48 = (float64x2_t)vbicq_s8((int8x16_t)v44, (int8x16_t)vcltzq_f64(v44));
      float64x2_t v49 = (float64x2_t)vbicq_s8((int8x16_t)v40, (int8x16_t)vcltzq_f64(v40));
      float64x2_t v50 = (float64x2_t)vbicq_s8((int8x16_t)v41, (int8x16_t)vcltzq_f64(v41));
      float64x2_t v51 = (float64x2_t)vbicq_s8((int8x16_t)v42, (int8x16_t)vcltzq_f64(v42));
      float64x2_t v52 = (float64x2_t)vbicq_s8((int8x16_t)v43, (int8x16_t)vcltzq_f64(v43));
      float64x2_t v53 = (float64x2_t)vbicq_s8((int8x16_t)v45, (int8x16_t)vcltzq_f64(v45));
      *(int16x4_t *)&v53.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v52, v88), (int8x16_t)v88, (int8x16_t)v52))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v53, v88), (int8x16_t)v88, (int8x16_t)v53))));
      *(int16x4_t *)&v52.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v50, v88), (int8x16_t)v88, (int8x16_t)v50))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v51, v88), (int8x16_t)v88, (int8x16_t)v51))));
      *(int16x4_t *)&v51.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v47, v88), (int8x16_t)v88, (int8x16_t)v47))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v49, v88), (int8x16_t)v88, (int8x16_t)v49))));
      v53.f64[1] = v52.f64[0];
      *(int16x4_t *)&v51.f64[1] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v46, v88), (int8x16_t)v88, (int8x16_t)v46))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v48, v88), (int8x16_t)v88, (int8x16_t)v48))));
      *(int8x16_t *)(a2 + v5) = vuzp1q_s8((int8x16_t)v53, (int8x16_t)v51);
      v5 += 16;
      *(void *)&v51.f64[0] = 0x1000000010;
      *(void *)&v51.f64[1] = 0x1000000010;
      int32x4_t v10 = vaddq_s32(v103, (int32x4_t)v51);
      int32x4_t v9 = vaddq_s32(v105, (int32x4_t)v51);
      int32x4_t v8 = vaddq_s32(v107, (int32x4_t)v51);
      int32x4_t v7 = vaddq_s32(v109, (int32x4_t)v51);
    }
    while (v5 != 256);
    uint64_t v54 = 0;
    int32x4_t v55 = (int32x4_t)xmmword_1BBB6FCF0;
    int32x4_t v56 = (int32x4_t)xmmword_1BBB6F6C0;
    do
    {
      int32x4_t v108 = v56;
      int32x4_t v110 = v55;
      uint64_t v57 = v55.i64[0];
      v58.i64[0] = v56.i32[0];
      v58.i64[1] = v56.i32[1];
      float64x2_t v59 = vcvtq_f64_s64(v58);
      uint64_t v60 = v55.i64[1];
      v58.i64[0] = v108.i32[2];
      v58.i64[1] = v108.i32[3];
      float64x2_t v61 = vcvtq_f64_s64(v58);
      v58.i64[0] = (int)v57;
      v58.i64[1] = SHIDWORD(v57);
      float64x2_t v62 = vcvtq_f64_s64(v58);
      v58.i64[0] = (int)v60;
      v58.i64[1] = SHIDWORD(v60);
      float64x2_t v63 = (float64x2_t)vdupq_n_s64(0x3F50000000000000uLL);
      float64x2_t v104 = vmulq_f64(v62, v63);
      float64x2_t v106 = vmulq_f64(vcvtq_f64_s64(v58), v63);
      float64x2_t v102 = vmulq_f64(v61, v63);
      float64x2_t v98 = vmulq_f64(v59, v63);
      long double v100 = pow(v98.f64[0], v6);
      long double v96 = pow(v98.f64[1], v6);
      v98.f64[0] = pow(v102.f64[0], v6);
      v102.f64[0] = pow(v102.f64[1], v6);
      long double v94 = pow(v104.f64[0], v6);
      long double v92 = pow(v104.f64[1], v6);
      v104.f64[0] = pow(v106.f64[0], v6);
      long double v64 = pow(v106.f64[1], v6);
      v65.f64[0] = v94;
      v65.f64[1] = v92;
      v66.f64[0] = v100;
      v66.f64[1] = v96;
      v67.f64[0] = v98.f64[0];
      v67.f64[1] = v102.f64[0];
      v68.f64[0] = v104.f64[0];
      v68.f64[1] = v64;
      float64x2_t v69 = (float64x2_t)vdupq_n_s64(0x4090000000000000uLL);
      float64x2_t v70 = vaddq_f64(vmulq_f64(v65, v69), v89);
      float64x2_t v71 = vaddq_f64(vmulq_f64(v66, v69), v89);
      float64x2_t v72 = vaddq_f64(vmulq_f64(v68, v69), v89);
      float64x2_t v73 = vaddq_f64(vmulq_f64(v67, v69), v89);
      float64x2_t v74 = (float64x2_t)vbicq_s8((int8x16_t)v70, (int8x16_t)vcltzq_f64(v70));
      float64x2_t v75 = (float64x2_t)vbicq_s8((int8x16_t)v71, (int8x16_t)vcltzq_f64(v71));
      float64x2_t v76 = (float64x2_t)vbicq_s8((int8x16_t)v72, (int8x16_t)vcltzq_f64(v72));
      float64x2_t v77 = (float64x2_t)vbicq_s8((int8x16_t)v73, (int8x16_t)vcltzq_f64(v73));
      v111.val[0] = (int8x16_t)vcgtq_f64(v74, v69);
      float64x2_t v78 = (float64x2_t)vbslq_s8(v111.val[0], (int8x16_t)v69, (int8x16_t)v74);
      *(int32x2_t *)v111.val[1].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v77, v69), (int8x16_t)v69, (int8x16_t)v77)));
      *(int32x2_t *)v111.val[3].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v76, v69), (int8x16_t)v69, (int8x16_t)v76)));
      *(int32x2_t *)v111.val[0].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v75, v69), (int8x16_t)v69, (int8x16_t)v75)));
      *(int32x2_t *)v111.val[2].i8 = vmovn_s64(vcvtq_s64_f64(v78));
      *(int8x16_t *)(a3 + v54) = vqtbl4q_s8(v111, (int8x16_t)xmmword_1BBB6FE00);
      *(void *)&v75.f64[0] = 0x800000008;
      *(void *)&v75.f64[1] = 0x800000008;
      int32x4_t v56 = vaddq_s32(v108, (int32x4_t)v75);
      int32x4_t v55 = vaddq_s32(v110, (int32x4_t)v75);
      v54 += 16;
    }
    while (v54 != 2048);
  }
}

uint64_t sub_1BBB17208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, char *, void, uint64_t, char *, char *, uint64_t))
{
  uint64_t v95 = a7;
  uint64_t v12 = a6;
  v82[1] = v82;
  int v98 = a9;
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v21 = MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20);
  uint64_t v23 = (char *)v82 - v22;
  uint64_t result = MEMORY[0x1F4188790](v21, v24, v25, v26, v27, v28);
  float64x2_t v36 = (char *)v82 - v35;
  int v96 = v32;
  uint64_t v97 = v30;
  if ((int)v30 >= v32) {
    int v37 = v32;
  }
  else {
    int v37 = v30;
  }
  if (v37)
  {
    int v38 = v96;
    if ((int)v30 > v32) {
      int v38 = v97;
    }
    do
    {
      int v39 = v38 % v37;
      int v38 = v37;
      int v37 = v39;
    }
    while (v39);
  }
  if (v31 >= v98) {
    int v40 = v98;
  }
  else {
    int v40 = v31;
  }
  if (v40)
  {
    int v41 = v98;
    if (v31 > v98) {
      int v41 = v31;
    }
    do
    {
      int v42 = v41 % v40;
      int v41 = v40;
      int v40 = v42;
    }
    while (v42);
  }
  uint64_t v92 = a11;
  float64x2_t v93 = a12;
  float64x2_t v43 = (char *)((v34 + 31) & 0xFFFFFFFFFFFFFFF0);
  if ((int)v33 < 1)
  {
    uint64_t v53 = 0;
  }
  else
  {
    __int16 v44 = 0;
    int v45 = 0;
    float64x2_t v46 = v36;
    float64x2_t v47 = v23;
    uint64_t v48 = v33;
    int v49 = (v97 << 16) / v96;
    do
    {
      int v50 = v45 >> 16;
      unsigned int v51 = v45 >> 8;
      v45 += v49;
      int v52 = v50 << result;
      *v46++ = v51 & 0xF0;
      *v47++ = v52 - v44;
      __int16 v44 = v52;
      --v48;
    }
    while (v48);
    uint64_t v53 = v33;
  }
  int v94 = result;
  uint64_t v91 = a10;
  uint64_t v54 = (int)v33 - 1;
  do
  {
    *(_WORD *)&v23[2 * v53] = *(_WORD *)&v23[2 * v54];
    v36[v53++] = v36[v54];
  }
  while (v33 + 16 != v53);
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  if (v98 >= 1)
  {
    int v55 = 0;
    int v56 = 0;
    int v57 = v31 - 1;
    int v89 = v31 - 3;
    int v90 = v31 - 2;
    int v87 = v31 - 5;
    int v88 = v31 - 4;
    uint64_t v86 = (int)v97 - 1;
    uint64_t v83 = (int)v97 - 2;
    long double v85 = v43 - 1;
    int64x2_t v58 = &v43[(int)v97];
    int v84 = (v31 << 16) / v98;
    do
    {
      int v59 = v55 >> 16;
      int v60 = (v55 >> 16) - 3;
      if (v55 < 196608) {
        int v60 = 0;
      }
      uint64_t v61 = a2 + v60 * a3;
      int v62 = v59 - 2;
      if (v55 < 0x20000) {
        int v62 = 0;
      }
      *(void *)&long long v99 = v61;
      *((void *)&v99 + 1) = a2 + v62 * a3;
      int v63 = v59 - 1;
      if (v55 < 0x10000) {
        int v63 = 0;
      }
      *(void *)&long long v100 = a2 + v63 * a3;
      *((void *)&v100 + 1) = a2 + ((uint64_t)v55 >> 16) * a3;
      if (v59 <= v90) {
        int v64 = v59 + 1;
      }
      else {
        int v64 = v57;
      }
      uint64_t v65 = a2 + v64 * a3;
      int v66 = v59 + 2;
      if (v59 > v89) {
        int v66 = v57;
      }
      *(void *)&long long v101 = v65;
      *((void *)&v101 + 1) = a2 + v66 * a3;
      int v67 = v59 + 3;
      if (v59 > v88) {
        int v67 = v57;
      }
      uint64_t v68 = a2 + v67 * a3;
      BOOL v69 = v59 <= v87;
      int v70 = v59 + 4;
      if (!v69) {
        int v70 = v57;
      }
      *(void *)&long long v102 = v68;
      *((void *)&v102 + 1) = a2 + v70 * a3;
      Filter8tapV_neon64((uint64_t)v43, &v99, v97, (int16x8_t *)(v91 + 16 * ((unsigned __int16)v55 >> 12)), 7u);
      char v71 = *v43;
      if (v94)
      {
        unint64_t v72 = 0;
        char v73 = v43[1];
        float64x2_t v74 = v85;
        char v75 = v43[v86];
        char v76 = v43[v83];
        do
        {
          *(v74 - 1) = v71;
          *float64x2_t v74 = v73;
          v74 -= 2;
          float64x2_t v77 = &v58[v72];
          *float64x2_t v77 = v76;
          v77[1] = v75;
          BOOL v78 = v72 >= 6;
          v72 += 2;
        }
        while (!v78);
      }
      else
      {
        uint64_t v79 = 0;
        long double v80 = v85;
        char v81 = v43[v86];
        do
        {
          *v80-- = v71;
          v58[v79++] = v81;
        }
        while (v79 != 4);
      }
      v55 += v84;
      uint64_t result = v93(v12, v43, v96, v92, v23, v36, 7);
      v12 += v95;
      ++v56;
    }
    while (v56 != v98);
  }
  return result;
}

int64_t sub_1BBB17634(int64_t result, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, int a7)
{
  int v7 = a5 - 1;
  if (a5 >= 1)
  {
    uint64_t v8 = 0;
    int32x4_t v9 = (const __int16 *)(result + 1536);
    int16x8_t v10 = vld1q_dup_s16(v9);
    int v11 = (const __int16 *)(result + 1552);
    int16x8_t v12 = vld1q_dup_s16(v11);
    uint64_t v13 = (const __int16 *)(result + 1568);
    int16x8_t v14 = vld1q_dup_s16(v13);
    uint64_t v15 = (const __int16 *)(result + 1584);
    int16x8_t v16 = vld1q_dup_s16(v15);
    uint64_t v17 = (const __int16 *)(result + 1600);
    int16x8_t v18 = vld1q_dup_s16(v17);
    uint64_t v19 = (const __int16 *)(result + 1616);
    int16x8_t v20 = vld1q_dup_s16(v19);
    uint64_t v21 = (const __int16 *)(result + 1632);
    int16x8_t v22 = vld1q_dup_s16(v21);
    uint64_t v23 = a5 - 2;
    uint64_t v24 = a5 - 3;
    uint64_t v25 = a5 - 4;
    uint64_t v26 = a7;
    uint64_t v27 = a5;
    int32x2_t v28 = vdup_n_s32(a6);
    v29.i64[0] = 0x80008000800080;
    v29.i64[1] = 0x80008000800080;
    uint64_t v30 = a2;
    do
    {
      uint64_t v31 = v8;
      BOOL v32 = v8 >= 3;
      int v33 = v8 - 3;
      if (v32) {
        int v34 = v33;
      }
      else {
        int v34 = 0;
      }
      uint64_t v8 = v31 + 1;
      if (a4 >= 1)
      {
        uint64_t result = 0;
        uint64_t v35 = a2 + a6 * v34;
        int v36 = v31 + 3;
        if (v31 > v25) {
          int v36 = v7;
        }
        int v37 = v31 + 2;
        if (v31 > v24) {
          int v37 = v7;
        }
        uint32x2_t v38 = (uint32x2_t)vdup_n_s32(v31);
        if (v31 <= v23) {
          int v39 = v31 + 1;
        }
        else {
          int v39 = v7;
        }
        int32x2_t v40 = vmul_s32((int32x2_t)vqsub_u32(v38, (uint32x2_t)0x200000001), v28);
        v41.i64[0] = v40.i32[0];
        v41.i64[1] = v40.i32[1];
        int64x2_t v42 = v41;
        uint64_t v43 = a2 + a6 * (uint64_t)v36;
        uint64_t v44 = a2 + a6 * (uint64_t)v37;
        do
        {
          int64x2_t v46 = vaddq_s64(vdupq_n_s64(result), v42);
          uint8x16_t v47 = *(uint8x16_t *)(v43 + result);
          uint64_t v45 = a2 + a6 * (uint64_t)v39;
          *(uint8x16_t *)(a3 + result) = vqmovn_high_u16(vqmovn_u16(vshrq_n_u16(vqaddq_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v14, (int16x8_t)vmovl_u8(*(uint8x8_t *)(a2 + v46.i64[0]))), v12, (int16x8_t)vmovl_u8(*(uint8x8_t *)(a2 + v46.i64[1]))), v10, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v35 + result))), v16, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v30 + result))), v18,
                                                                   (int16x8_t)vmovl_u8(*(uint8x8_t *)(v45 + result))),
                                                                 v20,
                                                                 (int16x8_t)vmovl_u8(*(uint8x8_t *)(v44 + result))),
                                                               v22,
                                                               (int16x8_t)vmovl_u8(*(uint8x8_t *)v47.i8)),
                                                 v29),
                                               8uLL)),
                                           vshrq_n_u16(vqaddq_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v14, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(a2 + v46.i64[0]))), v12, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(a2 + v46.i64[1]))), v10, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v35 + result))), v16, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v30 + result))), v18, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v45 + result))), v20,
                                                               (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v44 + result))),
                                                             v22,
                                                             (int16x8_t)vmovl_high_u8(v47)),
                                               v29),
                                             8uLL));
          result += 16;
        }
        while (result < a4);
      }
      v30 += a6;
      a3 += v26;
    }
    while (v8 != v27);
  }
  return result;
}

int64_t sub_1BBB17804(int64_t a1)
{
  int v2 = (_DWORD *)(a1 + 22304);
  sub_1BBB17634(a1, *(void *)(a1 + 22328), *(void *)(a1 + 22344), *(_DWORD *)(a1 + 22368), *(_DWORD *)(a1 + 22372), *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22312));
  uint64_t v3 = *(void *)(a1 + 22336);
  uint64_t v4 = *(void *)(a1 + 22352);
  int v5 = v2[16];
  int v6 = v2[17] >> 1;
  signed int v7 = v2[1];
  int v8 = v2[3];

  return sub_1BBB17634(a1, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1BBB17870(uint64_t a1)
{
  int v1 = (char *)(a1 + 22272);
  unint64_t v2 = *(unsigned int *)(a1 + 22368);
  unsigned int v3 = *(_DWORD *)(a1 + 22372);
  char v4 = *(unsigned char *)(a1 + 22272);
  int v5 = 1 << (v4 - 5);
  if (v3)
  {
    int v6 = 0;
    int v7 = (v2 - 8) << v4;
    int v8 = (v3 - 8) << v4;
    int v9 = 2 << v4;
    int v10 = (__int16)(*(_WORD *)(a1 + 22278) - v9);
    int v11 = (__int16)(*(_WORD *)(a1 + 22284) - v9);
    uint64_t v12 = a1 + 22016;
    do
    {
      if (v2)
      {
        unint64_t v13 = 0;
        int v14 = v11 + v6 * *(__int16 *)(a1 + 22282);
        int v15 = v10 + v6 * *(__int16 *)(a1 + 22276);
        int v16 = 7;
        do
        {
          int v17 = *(__int16 *)(a1 + 22274);
          int v18 = *(__int16 *)(a1 + 22280);
          char v19 = *v1 - 4;
          uint64_t v20 = *(void *)(a1 + 22328);
          int v21 = *(_DWORD *)(a1 + 22304);
          int v22 = v14 + v16 * v18;
          int v23 = v15 + v16 * v17;
          uint64_t v24 = 0;
          int v25 = -8;
          do
          {
            int v26 = v23 & ~(v23 >> 31);
            if (v7 < v26) {
              int v26 = v7;
            }
            int v27 = v22 & ~(v22 >> 31);
            if (v8 < v27) {
              int v27 = v8;
            }
            int v28 = (v26 + v5) >> v19;
            int v29 = (v27 + v5) >> v19;
            unsigned int v30 = v29 & 0xF;
            v29 >>= 4;
            int16x8_t v31 = *(int16x8_t *)(v12 + 16 * (v28 & 0xF));
            int16x8_t v32 = *(int16x8_t *)(v12 + 16 * v30);
            unsigned int v33 = v29 * v21 + (v28 >> 4);
            int16x8_t v34 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + v33));
            int16x8_t v35 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + v33 + v21));
            int32x4_t v36 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v32.i8, 1), *(int16x4_t *)v34.i8, *(int16x4_t *)v32.i8, 0);
            int32x4_t v37 = vmlal_high_lane_s16(vmull_high_lane_s16(v35, *(int16x4_t *)v32.i8, 1), v34, *(int16x4_t *)v32.i8, 0);
            int16x8_t v38 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 2) * v21 + (v28 >> 4))));
            int32x4_t v39 = vmlal_lane_s16(v36, *(int16x4_t *)v38.i8, *(int16x4_t *)v32.i8, 2);
            int32x4_t v40 = vmlal_high_lane_s16(v37, v38, *(int16x4_t *)v32.i8, 2);
            int16x8_t v41 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 3) * v21 + (v28 >> 4))));
            int32x4_t v42 = vmlal_lane_s16(v39, *(int16x4_t *)v41.i8, *(int16x4_t *)v32.i8, 3);
            int32x4_t v43 = vmlal_high_lane_s16(v40, v41, *(int16x4_t *)v32.i8, 3);
            int16x8_t v44 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 4) * v21 + (v28 >> 4))));
            int32x4_t v45 = vmlal_laneq_s16(v42, *(int16x4_t *)v44.i8, v32, 4);
            int32x4_t v46 = vmlal_high_laneq_s16(v43, v44, v32, 4);
            int16x8_t v47 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 5) * v21 + (v28 >> 4))));
            int8x16_t v48 = (int8x16_t)vmlaq_s32(vmulq_s32(vmlal_laneq_s16(v45, *(int16x4_t *)v47.i8, v32, 5), vmovl_s16(*(int16x4_t *)v31.i8)), vmlal_high_laneq_s16(v46, v47, v32, 5), vmovl_high_s16(v31));
            uint64_t v24 = vshld_n_s64(v24, 8uLL)
                + *(void *)&vmin_s32(vmax_s32((int32x2_t)vrshrd_n_s64(vpaddl_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(int32x2_t *)v48.i8)), 0xCuLL), 0), (int32x2_t)0xFF000000FFLL);
            v22 -= v18;
            v23 -= v17;
          }
          while (!__CFADD__(v25++, 1));
          *(void *)(*(void *)(a1 + 22344) + (*(_DWORD *)(a1 + 22312) * v6) + v13) = v24;
          v13 += 8;
          v16 += 8;
        }
        while (v13 < v2);
      }
      ++v6;
    }
    while (v6 != v3);
    char v4 = *v1;
  }
  if (v3 >= 2)
  {
    int v50 = 0;
    unsigned int v51 = v3 >> 1;
    signed int v52 = ((v2 >> 1) - 4) << v4;
    int v53 = (v51 - 4) << v4;
    int v54 = 1 << v4;
    __int16 v55 = (*(__int16 *)(a1 + 22284) >> 1) - v54;
    int v56 = (__int16)((*(__int16 *)(a1 + 22278) >> 1) - v54);
    if (v51 <= 1) {
      unsigned int v51 = 1;
    }
    v57.i64[0] = 0xFF000000FFLL;
    v57.i64[1] = 0xFF000000FFLL;
    do
    {
      if (v2 >= 2)
      {
        unint64_t v58 = 0;
        int v59 = v56 + v50 * *(__int16 *)(a1 + 22276);
        int v60 = v55 + v50 * *(__int16 *)(a1 + 22282);
        do
        {
          char v61 = *v1 - 4;
          int v62 = *(_DWORD *)(a1 + 22308);
          uint64_t v63 = 0;
          int v64 = 3;
          do
          {
            uint64_t v65 = 0;
            int v66 = v64;
            int v67 = v64 + v58;
            int v68 = v59 + v67 * *(__int16 *)(a1 + 22274);
            int v69 = v60 + v67 * *(__int16 *)(a1 + 22280);
            int v70 = v68 & ~(v68 >> 31);
            if (v52 < v70) {
              int v70 = v52;
            }
            int v71 = v69 & ~(v69 >> 31);
            if (v53 < v71) {
              int v71 = v53;
            }
            int v72 = (v70 + v5) >> v61;
            int v73 = (v71 + v5) >> v61;
            float64x2_t v74 = (const float *)((char *)&unk_1BBB8BC45 + 4 * (v72 & 0xF));
            int8x8_t v75 = (int8x8_t)vld1_dup_f32(v74);
            int v76 = v73 >> 4;
            float64x2_t v77 = (char *)&unk_1BBB8BC45 + 4 * (v73 & 0xF);
            int v78 = v62 * v76 + 2 * (v72 >> 4);
            int32x4_t v79 = 0uLL;
            int32x4_t v80 = 0uLL;
            do
            {
              char v81 = (const char *)(*(void *)(a1 + 22336) + v78);
              int8x8x2_t v88 = vld2_s8(v81);
              int16x4_t v82 = vdup_n_s16(v77[v65]);
              int32x4_t v79 = vmlal_s16(v79, (int16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v88.val[0]), v82);
              int32x4_t v80 = vmlal_s16(v80, (int16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v88.val[1]), v82);
              ++v65;
              v78 += v62;
            }
            while (v65 != 4);
            int32x4_t v83 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v75));
            int32x4_t v84 = vmulq_s32(v79, v83);
            int8x16_t v85 = (int8x16_t)vmulq_s32(v80, v83);
            *(int32x2_t *)v84.i8 = vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL), *(int32x2_t *)v84.i8);
            v84.u64[1] = (unint64_t)vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), *(int32x2_t *)v85.i8);
            int8x16_t v86 = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)vrshrq_n_s64(vpaddlq_s32(v84), 0xCuLL), (int32x4_t)0), v57);
            uint64_t v63 = vshld_n_s64(v63, 0x10uLL)
                + *(void *)&vadd_s32(vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL), 8uLL), *(int32x2_t *)v86.i8);
            int v64 = v66 - 1;
          }
          while (v66);
          *(void *)(*(void *)(a1 + 22352) + (*(_DWORD *)(a1 + 22316) * v50) + 2 * (int)v58) = v63;
          v58 += 4;
        }
        while (v58 < v2 >> 1);
      }
      ++v50;
    }
    while (v50 != v51);
  }
  return 0;
}

uint64_t sub_1BBB17C54(uint64_t a1)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (unsigned int *)(a1 + 22304);
  if ((*(_DWORD *)(a1 + 248) - *(_DWORD *)(a1 + 252)) <= 2)
  {
    BOOL v3 = *(unsigned char *)(a1 + 244) == 0;
  }
  else
  {
    BOOL v3 = 0;
    *(unsigned char *)(a1 + 244) = 1;
  }
  int v4 = *(_DWORD *)(a1 + 256);
  if (v4 < 1) {
    int v5 = 1;
  }
  else {
    int v5 = 3;
  }
  int v216 = *(_DWORD *)(a1 + 256);
  if (v4 >= 4) {
    int v6 = 5;
  }
  else {
    int v6 = v5;
  }
  if (!v3 || !*(unsigned char *)(a1 + 22512))
  {
    unsigned int v82 = *(_DWORD *)(a1 + 22372);
    if (v82)
    {
      for (unsigned int i = 0; i < v82; ++i)
      {
        memcpy((void *)(*(void *)(a1 + 22344) + v2[2] * i), (const void *)(*(void *)(a1 + 22328) + *v2 * i), v2[18]);
        memcpy((void *)(*(void *)(a1 + 272) + *v2 * i), (const void *)(*(void *)(a1 + 22328) + *v2 * i), v2[16]);
        unsigned int v82 = v2[17];
      }
      if (v82 >= 2)
      {
        unsigned int v84 = 0;
        do
        {
          memcpy((void *)(*(void *)(a1 + 22352) + v2[2] * v84), (const void *)(*(void *)(a1 + 22336) + *v2 * v84), v2[18]);
          memcpy((void *)(*(void *)(a1 + 272) + v2[17] * *v2 + *v2 * v84), (const void *)(*(void *)(a1 + 22336) + *v2 * v84), v2[16]);
          ++v84;
          unsigned int v82 = v2[17];
        }
        while (v84 < v82 >> 1);
      }
    }
    bzero(*(void **)(a1 + 22504), 4 * (v2[16] >> 3) * (v82 >> 3));
    bzero(*(void **)(a1 + 22464), (v2[16] >> 3) * (v2[17] >> 3));
    *(unsigned char *)(a1 + 264) = 0;
    *(unsigned char *)(a1 + 244) = 0;
    goto LABEL_149;
  }
  unsigned int v214 = (*(_DWORD *)(a1 + 22448) - 14) & ~((*(_DWORD *)(a1 + 22448) - 14) >> 31);
  unsigned int v7 = *(_DWORD *)(a1 + 22372);
  if (v7 < 0x10) {
    goto LABEL_63;
  }
  int v8 = 0;
  int v9 = 0;
  unsigned int v215 = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 22368);
  int v11 = 1;
  do
  {
    if (v10 < 0x10) {
      goto LABEL_62;
    }
    uint64_t v12 = 0;
    int v13 = 0;
    unint64_t v14 = 0;
    do
    {
      off_1E9F83238(*(void *)(a1 + 22328) + v12 + v8 * *v2, *v2, v217, &v218);
      if (!v218) {
        int v218 = 1;
      }
      unsigned int v15 = v2[16];
      if (!v219) {
        int v219 = 1;
      }
      if (!v220) {
        int v220 = 1;
      }
      if (!v221) {
        int v221 = 1;
      }
      unsigned int v16 = v15 >> 3;
      int v17 = v13 + v9 * (v15 >> 3);
      uint64_t v18 = *(void *)(a1 + 22504);
      uint64_t v19 = v17;
      if (!*(_DWORD *)(v18 + 4 * v17))
      {
        *(_DWORD *)(v18 + 4 * v17) = 1;
        uint64_t v18 = *(void *)(a1 + 22504);
      }
      uint64_t v20 = v17 + 1;
      if (!*(_DWORD *)(v18 + 4 * v20))
      {
        *(_DWORD *)(v18 + 4 * v20) = 1;
        uint64_t v18 = *(void *)(a1 + 22504);
      }
      int v21 = v13 + v11 * v16;
      uint64_t v22 = v21;
      if (!*(_DWORD *)(v18 + 4 * v21))
      {
        *(_DWORD *)(v18 + 4 * v21) = 1;
        uint64_t v18 = *(void *)(a1 + 22504);
      }
      uint64_t v23 = v21 + 1;
      if (!*(_DWORD *)(v18 + 4 * v23)) {
        *(_DWORD *)(v18 + 4 * v23) = 1;
      }
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v19) = v218;
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v20) = v219;
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v22) = v220;
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v23) = v221;
      unsigned int v24 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v19);
      unsigned int v25 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v19);
      uint64_t v26 = *(void *)(a1 + 22496);
      if (v24 >= v25)
      {
        *(_DWORD *)(v26 + 4 * v19) = v24 / v25;
      }
      else
      {
        *(_DWORD *)(v26 + 4 * v19) = v25 / v24;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v19) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v19);
      }
      unsigned int v27 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v20);
      unsigned int v28 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v20);
      uint64_t v29 = *(void *)(a1 + 22496);
      if (v27 >= v28)
      {
        *(_DWORD *)(v29 + 4 * v20) = v27 / v28;
      }
      else
      {
        *(_DWORD *)(v29 + 4 * v20) = v28 / v27;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v20) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v20);
      }
      unsigned int v30 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v22);
      unsigned int v31 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v22);
      uint64_t v32 = *(void *)(a1 + 22496);
      if (v30 >= v31)
      {
        *(_DWORD *)(v32 + 4 * v22) = v30 / v31;
      }
      else
      {
        *(_DWORD *)(v32 + 4 * v22) = v31 / v30;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v22) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v22);
      }
      unsigned int v33 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v23);
      unsigned int v34 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v23);
      uint64_t v35 = *(void *)(a1 + 22496);
      if (v33 >= v34)
      {
        *(_DWORD *)(v35 + 4 * v23) = v33 / v34;
      }
      else
      {
        *(_DWORD *)(v35 + 4 * v23) = v34 / v33;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v23) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v23);
      }
      *(unsigned char *)(*(void *)(a1 + 22456) + v19) = v217[0];
      *(unsigned char *)(*(void *)(a1 + 22456) + v20) = v217[1];
      *(unsigned char *)(*(void *)(a1 + 22456) + v22) = v217[2];
      *(unsigned char *)(*(void *)(a1 + 22456) + v23) = v217[3];
      int v36 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v19) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v19);
      if (v36 < 0) {
        int v36 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v19) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v19);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v19) = v6 + v6 * v36 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v19);
      int v37 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v20) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v20);
      if (v37 < 0) {
        int v37 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v20) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v20);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v20) = v6 + v6 * v37 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v20);
      int v38 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v22) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v22);
      if (v38 < 0) {
        int v38 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v22) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v22);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v22) = v6 + v6 * v38 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v22);
      int v39 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v23) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v23);
      if (v39 < 0) {
        int v39 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v23) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v23);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v23) = v6 + v6 * v39 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v23);
      uint64_t v40 = *(void *)(a1 + 22496);
      int v41 = *(_DWORD *)(v40 + 4 * v19);
      int v42 = v41 + *(_DWORD *)(v40 + 4 * v22) + *(_DWORD *)(v40 + 4 * v20) + *(_DWORD *)(v40 + 4 * v23) + 2;
      *(_DWORD *)(v40 + 4 * v19) = v41 + (v42 >> 3);
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v20) += v42 >> 3;
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v22) += v42 >> 3;
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v23) += v42 >> 3;
      unint64_t v10 = v2[16];
      if (v14 < v10 >> 6 || v14 > v2[16] - (v2[16] >> 6) || (unsigned int v43 = v2[17], v215 < v43 >> 6))
      {
        if (v216 > 0) {
          goto LABEL_60;
        }
LABEL_59:
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v19) -= 4;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v20) -= 4;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v22) -= 4;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v23) -= 4;
        LODWORD(v10) = v2[16];
        goto LABEL_60;
      }
      if (v216 <= 0 && v215 > v43 - (v43 >> 6)) {
        goto LABEL_59;
      }
LABEL_60:
      ++v14;
      v13 += 2;
      v12 += 16;
    }
    while (v14 < v10 >> 4);
    unsigned int v7 = v2[17];
LABEL_62:
    v11 += 2;
    v9 += 2;
    v8 += 16;
    ++v215;
  }
  while (v215 < v7 >> 4);
LABEL_63:
  if (v214 >= 4 * *(unsigned __int8 *)(a1 + 264) + 15)
  {
    if (v7 >= 2)
    {
      unsigned int v85 = 0;
      int v86 = 0;
      uint64_t v87 = 0;
      uint64_t v88 = *(void *)(a1 + 22336);
      int v89 = *v2;
      uint64_t v90 = *(void *)(a1 + 272) + *v2 * v7;
      uint64_t v91 = *(void *)(a1 + 22352);
      unsigned int v92 = v2[2];
      int8x16_t v93 = vdupq_n_s8(3 * v214);
      unint64_t v94 = v2[16];
      v95.i64[0] = 0x8080808080808080;
      v95.i64[1] = 0x8080808080808080;
      v96.i64[0] = 0x4C4C4C4C4C4C4C4CLL;
      v96.i64[1] = 0x4C4C4C4C4C4C4C4CLL;
      v97.i64[0] = 0x7F007F007F007FLL;
      v97.i64[1] = 0x7F007F007F007FLL;
      v98.i64[0] = 0x80008000800080;
      v98.i64[1] = 0x80008000800080;
      v99.i64[0] = 0x100010001000100;
      v99.i64[1] = 0x100010001000100;
      do
      {
        if (v94)
        {
          unint64_t v100 = 0;
          uint64_t v101 = 4 * (int)((v94 >> 3) * (v87 >> 2));
          do
          {
            int8x16_t v102 = *(int8x16_t *)(v88 + (v86 + v100));
            uint8x16_t v103 = *(uint8x16_t *)(v90 + (v86 + v100));
            int v104 = *(_DWORD *)(*(void *)(a1 + 22496) + v101);
            if (v104 >= 18) {
              int v104 = 18;
            }
            if (v104 <= 3) {
              int v104 = 3;
            }
            int16x8_t v105 = (int16x8_t)vqaddq_s8(vmaxq_s8((int8x16_t)vqsubq_u8(v95, vabdq_u8((uint8x16_t)v102, (uint8x16_t)vrev16q_s8(v102))), v96), v93);
            int16x8_t v106 = vmovl_s8(*(int8x8_t *)v105.i8);
            int16x8_t v107 = (int16x8_t)vaddw_u8(v97, *(uint8x8_t *)v102.i8);
            int16x8_t v108 = vmulq_s16((int16x8_t)vaddw_high_u8(v97, (uint8x16_t)v102), vmovl_high_s8((int8x16_t)v105));
            v105.i64[0] = 0x80008000800080;
            v105.i64[1] = 0x80008000800080;
            uint16x8_t v109 = (uint16x8_t)vrsraq_n_s16(v105, vmulq_s16(v107, v106), 7uLL);
            v106.i64[0] = 0x80008000800080;
            v106.i64[1] = 0x80008000800080;
            uint16x8_t v110 = (uint16x8_t)vrsraq_n_s16(v106, v108, 7uLL);
            *(uint8x8_t *)v108.i8 = vqmovn_u16(v109);
            *(uint8x8_t *)v109.i8 = vqmovn_u16(v110);
            int16x8_t v111 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.i8);
            uint8x16_t v112 = vqmovn_high_u16(*(uint8x8_t *)v108.i8, v110);
            uint16x8_t v113 = (uint16x8_t)vdupq_n_s16(v104 - 3);
            uint8x16_t v114 = vabdq_u8(v112, v103);
            uint16x8_t v115 = vmull_u8(*(uint8x8_t *)v114.i8, *(uint8x8_t *)v114.i8);
            uint16x8_t v116 = vqshlq_u16(vmull_high_u8(v114, v114), v113);
            unsigned long long v117 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16(v99, vshrq_n_u16(vqshlq_u16(v115, v113), 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            unsigned long long v118 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16(v99, vshrq_n_u16(v116, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            *(uint8x16_t *)(v91 + v85 + v100) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v98, (int16x8_t)v117), v111), (uint8x8_t)vmovn_s16((int16x8_t)v117), *(uint8x8_t *)v103.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(vsubq_s16(v98, (int16x8_t)v118), (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.i8)), (uint8x16_t)vuzp1q_s8(v93, (int8x16_t)v118), v103), 7uLL));
            v100 += 16;
            v101 += 8;
          }
          while (v100 < v94);
        }
        ++v87;
        v86 += v89;
        v85 += v92;
      }
      while (v87 != v7 >> 1);
      unsigned int v7 = v2[17];
    }
    if (v7)
    {
      unsigned int v119 = 0;
      do
      {
        memcpy((void *)(*(void *)(a1 + 22344) + v2[2] * v119), (const void *)(*(void *)(a1 + 22328) + *v2 * v119), v2[18]);
        ++v119;
        LODWORD(v120) = v2[17];
      }
      while (v119 < v120);
      char v121 = 0;
      goto LABEL_139;
    }
    unsigned int v211 = 0;
    *(unsigned char *)(a1 + 264) = 0;
  }
  else
  {
    unint64_t v44 = v2[16];
    if (v214 > 8 || v7 > 0xF0 || v44 > 0x140)
    {
      if (v7)
      {
        unsigned int v122 = 0;
        int v123 = 0;
        uint64_t v124 = 0;
        uint64_t v125 = *(void *)(a1 + 22328);
        uint64_t v126 = *(void *)(a1 + 272);
        uint64_t v127 = *(void *)(a1 + 22344);
        uint64_t v128 = v7;
        int v129 = *v2;
        v130.i64[0] = 0x100010001000100;
        v130.i64[1] = 0x100010001000100;
        v131.i64[0] = 0x80008000800080;
        v131.i64[1] = 0x80008000800080;
        unsigned int v132 = v2[2];
        do
        {
          if (v44)
          {
            unint64_t v133 = 0;
            uint64_t v134 = 4 * (int)((v44 >> 3) * (v124 >> 3));
            do
            {
              uint8x16_t v135 = *(uint8x16_t *)(v125 + (v123 + v133));
              uint8x16_t v136 = *(uint8x16_t *)(v126 + (v123 + v133));
              int v137 = *(_DWORD *)(*(void *)(a1 + 22496) + v134);
              if (v137 >= 16) {
                int v137 = 16;
              }
              if (v137 <= 1) {
                int v137 = 1;
              }
              uint16x8_t v138 = (uint16x8_t)vdupq_n_s16(v137 - 1);
              uint8x16_t v139 = vabdq_u8(v135, v136);
              uint16x8_t v140 = vqshlq_u16(vmull_u8(*(uint8x8_t *)v139.i8, *(uint8x8_t *)v139.i8), v138);
              uint16x8_t v141 = vqshlq_u16(vmull_high_u8(v139, v139), v138);
              unsigned long long v142 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v130, vshrq_n_u16(v140, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
              unsigned long long v143 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v130, vshrq_n_u16(v141, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
              *(uint8x16_t *)(v127 + v122 + v133) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v131, (int16x8_t)v142), (int16x8_t)vmovl_u8(*(uint8x8_t *)v135.i8)), (uint8x8_t)vmovn_s16((int16x8_t)v142), *(uint8x8_t *)v136.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(vsubq_s16(v131, (int16x8_t)v143), (int16x8_t)vmovl_high_u8(v135)), (uint8x16_t)vuzp1q_s8(v130, (int8x16_t)v143), v136), 7uLL));
              v133 += 16;
              v134 += 8;
            }
            while (v133 < v44);
          }
          ++v124;
          v123 += v129;
          v122 += v132;
        }
        while (v124 != v128);
      }
    }
    else if (v7)
    {
      unsigned int v45 = 0;
      int v46 = 0;
      unint64_t v47 = 0;
      uint64_t v48 = *(void *)(a1 + 22328);
      uint64_t v49 = *(void *)(a1 + 272);
      uint64_t v50 = *(void *)(a1 + 22344);
      int v51 = *v2;
      v52.i64[0] = 0x100010001000100;
      v52.i64[1] = 0x100010001000100;
      unsigned int v53 = v2[2];
      v54.i64[0] = 0x50005000500050;
      v54.i64[1] = 0x50005000500050;
      v55.i64[0] = 0x80008000800080;
      v55.i64[1] = 0x80008000800080;
      do
      {
        unint64_t v56 = v47;
        BOOL v57 = v47 != 0;
        int v58 = v47 - 1;
        if (v57) {
          int v59 = v58;
        }
        else {
          int v59 = 0;
        }
        unint64_t v47 = v56 + 1;
        if (v44)
        {
          unint64_t v60 = 0;
          uint64_t v61 = 4 * (int)((v44 >> 3) * (v56 >> 3));
          int v62 = v51 * v59;
          if (v56 <= v7 - 2) {
            unsigned int v63 = v56 + 1;
          }
          else {
            unsigned int v63 = v7 - 1;
          }
          int v64 = v63 * v51;
          do
          {
            uint8x16_t v65 = *(uint8x16_t *)(v48 + (v62 + v60));
            uint8x16_t v66 = *(uint8x16_t *)(v48 + (v46 + v60));
            uint8x16_t v67 = *(uint8x16_t *)(v48 + (v64 + v60));
            uint8x16_t v68 = *(uint8x16_t *)(v49 + (v46 + v60));
            int v69 = *(_DWORD *)(*(void *)(a1 + 22496) + v61);
            if (v69 >= 16) {
              int v69 = 16;
            }
            if (v69 <= 1) {
              int v69 = 1;
            }
            uint16x8_t v70 = (uint16x8_t)vdupq_n_s16(v69 - 1);
            uint8x16_t v71 = vabdq_u8(v66, v65);
            uint8x16_t v72 = vabdq_u8(v66, v67);
            uint8x16_t v73 = vabdq_u8(v66, v68);
            uint16x8_t v74 = vqshlq_u16(vmull_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v73.i8), v70);
            uint16x8_t v75 = vqshlq_u16(vmull_high_u8(v73, v73), v70);
            int16x8_t v76 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v71.i8, *(uint8x8_t *)v71.i8), 2uLL)), v54);
            int16x8_t v77 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v72.i8, *(uint8x8_t *)v72.i8), 2uLL)), v54);
            uint16x8_t v78 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_high_u8(v72, v72), 2uLL)), v54);
            int8x16_t v79 = (int8x16_t)vshrq_n_u16((uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_high_u8(v71, v71), 2uLL)), v54), 8uLL);
            unsigned long long v80 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v52, vshrq_n_u16(v74, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            unsigned long long v81 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v52, vshrq_n_u16(v75, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            *(uint8x16_t *)(v50 + v45 + v60) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v55, (int16x8_t)v80), (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vshrn_n_s16(v77, 8uLL), *(uint8x8_t *)v67.i8), (uint8x8_t)vshrn_n_s16(v76, 8uLL), *(uint8x8_t *)v65.i8), vsubq_s16(v52, (int16x8_t)vsraq_n_u16(vshrq_n_u16((uint16x8_t)v76, 8uLL), (uint16x8_t)v77, 8uLL)), (int16x8_t)vmovl_u8(*(uint8x8_t *)v66.i8)), 8uLL)), (uint8x8_t)vmovn_s16((int16x8_t)v80), *(uint8x8_t *)v68.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(
                                                                   vsubq_s16(v55, (int16x8_t)v81),
                                                                   (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)vuzp1q_s8((int8x16_t)v52, (int8x16_t)vshrq_n_u16(v78, 8uLL)), v67), (uint8x16_t)vuzp1q_s8((int8x16_t)v52, v79), v65), vsubq_s16(v52, (int16x8_t)vsraq_n_u16((uint16x8_t)v79, v78, 8uLL)), (int16x8_t)vmovl_high_u8(v66)), 8uLL)), (uint8x16_t)vuzp1q_s8((int8x16_t)v52, (int8x16_t)v81), v68), 7uLL));
            v60 += 16;
            v61 += 8;
          }
          while (v60 < v44);
        }
        v46 += v51;
        v45 += v53;
      }
      while (v47 != v7);
    }
    unint64_t v120 = v2[17];
    if (v120 >= 2)
    {
      unsigned int v144 = 0;
      int v145 = 0;
      unint64_t v146 = 0;
      uint64_t v147 = *(void *)(a1 + 22336);
      int v148 = *v2;
      uint64_t v149 = *(void *)(a1 + 272) + v120 * *v2;
      uint64_t v150 = *(void *)(a1 + 22352);
      unsigned int v151 = v2[2];
      int8x16_t v152 = vdupq_n_s8(3 * v214);
      unint64_t v153 = v120 >> 1;
      unint64_t v154 = v2[16];
      v155.i64[0] = 0x8080808080808080;
      v155.i64[1] = 0x8080808080808080;
      v156.i64[0] = 0x4C4C4C4C4C4C4C4CLL;
      v156.i64[1] = 0x4C4C4C4C4C4C4C4CLL;
      v157.i64[0] = 0x7F007F007F007FLL;
      v157.i64[1] = 0x7F007F007F007FLL;
      v158.i64[0] = 0x80008000800080;
      v158.i64[1] = 0x80008000800080;
      v159.i64[0] = 0x100010001000100;
      v159.i64[1] = 0x100010001000100;
      v160.i64[0] = 0x34003400340034;
      v160.i64[1] = 0x34003400340034;
      v161.i64[0] = 0x30003000300030;
      v161.i64[1] = 0x30003000300030;
      do
      {
        unint64_t v162 = v146;
        BOOL v57 = v146 >= 2;
        int v163 = v146 - 2;
        if (v57) {
          int v164 = v163;
        }
        else {
          int v164 = 0;
        }
        if (v162) {
          int v165 = v162 - 1;
        }
        else {
          int v165 = 0;
        }
        unint64_t v146 = v162 + 1;
        if (v154)
        {
          unint64_t v166 = 0;
          uint64_t v167 = 4 * (int)((v154 >> 3) * (v162 >> 2));
          int v168 = v148 * v164;
          int v169 = v148 * v165;
          int v170 = v162 + 2;
          if (v162 > (v153 - 3)) {
            int v170 = v153 - 1;
          }
          if (v162 <= (v153 - 2)) {
            int v171 = v162 + 1;
          }
          else {
            int v171 = v153 - 1;
          }
          int v172 = v171 * v148;
          int v173 = v170 * v148;
          do
          {
            int8x16_t v174 = *(int8x16_t *)(v147 + (v145 + v166));
            uint8x16_t v175 = *(uint8x16_t *)(v147 + (v169 + v166));
            uint8x16_t v176 = *(uint8x16_t *)(v147 + (v172 + v166));
            uint8x16_t v177 = *(uint8x16_t *)(v147 + (v168 + v166));
            uint8x16_t v178 = *(uint8x16_t *)(v147 + (v173 + v166));
            uint8x16_t v179 = *(uint8x16_t *)(v149 + (v145 + v166));
            int v180 = *(_DWORD *)(*(void *)(a1 + 22496) + v167);
            if (v180 >= 18) {
              int v180 = 18;
            }
            if (v180 <= 3) {
              int v180 = 3;
            }
            int16x8_t v181 = (int16x8_t)vqaddq_s8(vmaxq_s8((int8x16_t)vqsubq_u8(v155, vabdq_u8((uint8x16_t)v174, (uint8x16_t)vrev16q_s8(v174))), v156), v152);
            int16x8_t v182 = vmovl_s8(*(int8x8_t *)v181.i8);
            int16x8_t v183 = (int16x8_t)vaddw_u8(v157, *(uint8x8_t *)v174.i8);
            int16x8_t v184 = vmulq_s16((int16x8_t)vaddw_high_u8(v157, (uint8x16_t)v174), vmovl_high_s8((int8x16_t)v181));
            v181.i64[0] = 0x80008000800080;
            v181.i64[1] = 0x80008000800080;
            uint16x8_t v185 = (uint16x8_t)vrsraq_n_s16(v181, vmulq_s16(v183, v182), 7uLL);
            v183.i64[0] = 0x80008000800080;
            v183.i64[1] = 0x80008000800080;
            uint16x8_t v186 = (uint16x8_t)vrsraq_n_s16(v183, v184, 7uLL);
            *(uint8x8_t *)v184.i8 = vqmovn_u16(v185);
            uint8x8_t v187 = vqmovn_u16(v186);
            int16x8_t v188 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v184.i8);
            uint16x8_t v189 = (uint16x8_t)vdupq_n_s16(v180 - 3);
            uint8x16_t v190 = vqmovn_high_u16(*(uint8x8_t *)v184.i8, v186);
            uint8x16_t v191 = vabdq_u8(v190, v175);
            uint8x16_t v192 = vabdq_u8(v190, v176);
            uint8x16_t v193 = vabdq_u8(v190, v177);
            uint8x16_t v194 = vabdq_u8(v190, v178);
            uint8x16_t v195 = vabdq_u8(v190, v179);
            int16x8_t v196 = (int16x8_t)vmovl_u8(v187);
            int16x8_t v197 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v191.i8, *(uint8x8_t *)v191.i8), 3uLL)), v160);
            int16x8_t v198 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v192.i8, *(uint8x8_t *)v192.i8), 3uLL)), v160);
            uint16x8_t v199 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v192, v192), 3uLL)), v160);
            int16x8_t v200 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v193.i8, *(uint8x8_t *)v193.i8), 3uLL)), v161);
            uint16x8_t v201 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v193, v193), 3uLL)), v161);
            int16x8_t v202 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v194.i8, *(uint8x8_t *)v194.i8), 3uLL)), v161);
            uint16x8_t v203 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v194, v194), 3uLL)), v161);
            int8x16_t v204 = (int8x16_t)vshrq_n_u16((uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v191, v191), 3uLL)), v160), 8uLL);
            int8x16_t v205 = (int8x16_t)vshrq_n_u16(v199, 8uLL);
            uint8x16_t v206 = (uint8x16_t)vuzp1q_s8(v152, v204);
            int16x8_t v207 = vsubq_s16(v159, (int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16((uint16x8_t)v204, v199, 8uLL), v201, 8uLL), v203, 8uLL));
            unsigned long long v208 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vqshlq_u16(vmull_u8(*(uint8x8_t *)v195.i8, *(uint8x8_t *)v195.i8), v189), 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            unsigned long long v209 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vqshlq_u16(vmull_high_u8(v195, v195), v189), 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            *(uint8x16_t *)(v150 + v144 + v166) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v158, (int16x8_t)v208), (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vshrn_n_s16(v198, 8uLL), *(uint8x8_t *)v176.i8), (uint8x8_t)vshrn_n_s16(v197, 8uLL), *(uint8x8_t *)v175.i8), (uint8x8_t)vshrn_n_s16(v200, 8uLL), *(uint8x8_t *)v177.i8), (uint8x8_t)vshrn_n_s16(v202, 8uLL), *(uint8x8_t *)v178.i8), vsubq_s16(v159, (int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16(vshrq_n_u16((uint16x8_t)v197, 8uLL), (uint16x8_t)v198, 8uLL), (uint16x8_t)v200, 8uLL), (uint16x8_t)v202, 8uLL)), v188), 8uLL)), (uint8x8_t)vmovn_s16((int16x8_t)v208), *(uint8x8_t *)v179.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(
                                                                      vsubq_s16(v158, (int16x8_t)v209),
                                                                      (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)vuzp1q_s8(v152, v205), v176), v206, v175), (uint8x16_t)vuzp1q_s8(v152, (int8x16_t)vshrq_n_u16(v201, 8uLL)), v177), (uint8x16_t)vuzp1q_s8(v152, (int8x16_t)vshrq_n_u16(v203, 8uLL)), v178), v207, v196), 8uLL)), (uint8x16_t)vuzp1q_s8(v152, (int8x16_t)v209), v179), 7uLL));
            v166 += 16;
            v167 += 8;
          }
          while (v166 < v154);
        }
        v145 += v148;
        v144 += v151;
      }
      while (v146 != v153);
      LODWORD(v120) = v2[17];
    }
    char v121 = 1;
LABEL_139:
    *(unsigned char *)(a1 + 264) = v121;
    if (v120)
    {
      unsigned int v210 = 0;
      do
      {
        memcpy((void *)(*(void *)(a1 + 272) + *v2 * v210), (const void *)(*(void *)(a1 + 22344) + v2[2] * v210), v2[16]);
        ++v210;
        unsigned int v211 = v2[17];
      }
      while (v210 < v211);
      if (v211 >= 2)
      {
        unsigned int v212 = 0;
        do
        {
          memcpy((void *)(*(void *)(a1 + 272) + *v2 * v211 + *v2 * v212), (const void *)(*(void *)(a1 + 22352) + v2[2] * v212), v2[16]);
          ++v212;
          unsigned int v211 = v2[17];
        }
        while (v212 < v211 >> 1);
      }
    }
    else
    {
      unsigned int v211 = 0;
    }
  }
  memcpy(*(void **)(a1 + 22504), *(const void **)(a1 + 22488), 4 * (v2[16] >> 3) * (v211 >> 3));
  memcpy(*(void **)(a1 + 22464), *(const void **)(a1 + 22456), (v2[16] >> 3) * (v2[17] >> 3));
LABEL_149:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 248);
  return 0;
}

uint64_t sub_1BBB18B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  if (a6 < 1) {
    return 0;
  }
  int v8 = 0;
  uint64_t result = 0;
  do
  {
    if (a5 >= 1)
    {
      for (uint64_t i = 0; i != a5; ++i)
      {
        int v11 = *(unsigned __int8 *)(a1 + i) - *(unsigned __int8 *)(a2 + i);
        if (v11 < 0) {
          int v11 = *(unsigned __int8 *)(a2 + i) - *(unsigned __int8 *)(a1 + i);
        }
        uint64_t result = (v11 + result);
      }
    }
    a1 += a7 * a3;
    a2 += a7 * a4;
    ++v8;
  }
  while (v8 != a6);
  return result;
}

uint64_t sub_1BBB18C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  if (a6 < 1) {
    return 0;
  }
  int v8 = 0;
  uint64_t result = 0;
  do
  {
    if (a5 >= 1)
    {
      for (uint64_t i = 0; i != a5; ++i)
      {
        int v11 = *(unsigned __int8 *)(a1 + i) - *(unsigned __int8 *)(a2 + i);
        uint64_t result = (result + v11 * v11);
      }
    }
    a1 += a7 * a3;
    a2 += a7 * a4;
    ++v8;
  }
  while (v8 != a6);
  return result;
}

uint64_t sub_1BBB18C6C(uint64_t result)
{
  int v1 = *(uint64_t **)(result + 176);
  if (v1)
  {
    unint64_t v2 = (_DWORD *)result;
    BOOL v3 = *(uint64_t **)(result + 168);
    if (v3)
    {
      if (v1 == v3)
      {
        *(void *)(result + 224) = 0;
        *(_DWORD *)(result + 232) = 0;
      }
      else
      {
        uint64_t result = 0;
        int v4 = 0;
        unsigned int v5 = v2[4];
        uint64_t v6 = (int)v2[5];
        uint64_t v7 = (int)v2[3];
        int v25 = *((_DWORD *)v3 + 7) & -(int)v7;
        int v8 = v3[5] & -(int)v7;
        unint64_t v9 = *((unsigned int *)v3 + 4);
        uint64_t v10 = *v3;
        uint64_t v11 = *v1;
        v2[58] = 0;
        if (v2[83])
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v12 = 0;
          if (v8 >= 1)
          {
            int v4 = 0;
            int v13 = 0;
            uint64_t v12 = 0;
            uint64_t result = 0;
            unint64_t v14 = v9 >> 1;
            unsigned int v15 = &v2[2 * v6 + 102];
            uint64_t v24 = (int)(v9 >> 1) * (uint64_t)(int)v7;
            int v23 = v8;
            do
            {
              if (v25 >= 1)
              {
                int v26 = v13;
                for (uint64_t i = 0; i < v25; i += v7)
                {
                  uint64_t v27 = result;
                  unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, void))v15)(v10 + i, v11 + i, v14, v14, v7, v7, v2[91]);
                  v12 += v17;
                  BOOL v18 = v17 > v5;
                  if (v17 <= v5) {
                    uint64_t v19 = 0;
                  }
                  else {
                    uint64_t v19 = v17;
                  }
                  uint64_t result = v27 + v19;
                  int v4 = v2[58];
                  if (v18) {
                    ++v4;
                  }
                  v2[58] = v4;
                }
                int v8 = v23;
                int v13 = v26;
              }
              v10 += v24;
              v11 += v24;
              v13 += v7;
            }
            while (v13 < v8);
          }
        }
        uint64_t v20 = (int)v2[91];
        int v21 = v7 * v7;
        v2[56] = (v12 * v20 + ((v8 * v25) >> 1)) / (unint64_t)(v8 * v25);
        if (v4) {
          unint64_t v22 = ((unint64_t)((v4 * v21) >> 1) + result * v20) / (v4 * v21);
        }
        else {
          LODWORD(v22) = 0;
        }
        v2[57] = v22;
        v2[58] = (v4 + ((v8 * v25 / v21) >> 7)) / ((v8 * v25 / v21) >> 6);
      }
    }
  }
  return result;
}

double sub_1BBB18E40(uint64_t a1)
{
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 392) = xmmword_1BBB6FE10;
  *(unsigned char *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 113) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = -1;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = -1;
  int v1 = (long long *)MEMORY[0x1E4F1FA48];
  long long v2 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 256) = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)(a1 + 240) = v2;
  long long v3 = *v1;
  *(_OWORD *)(a1 + 264) = *v1;
  uint64_t v4 = *((void *)v1 + 2);
  *(void *)(a1 + 280) = v4;
  *(_OWORD *)(a1 + 288) = v3;
  *(void *)(a1 + 304) = v4;
  *(_DWORD *)(a1 + 109) = 0;
  *(_WORD *)(a1 + 349) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 348) = 1;
  *(_OWORD *)(a1 + 352) = xmmword_1BBB6FE20;
  *(void *)(a1 + 408) = sub_1BBB18B90;
  *(void *)(a1 + 416) = sub_1BBB18C00;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 12) = xmmword_1BBB6FE30;
  *(void *)&double result = 0x80000000ALL;
  *(void *)a1 = 0x80000000ALL;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  return result;
}

void sub_1BBB18F38(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  BOOL v7 = a2 < 641;
  BOOL v8 = a3 < 641;
  BOOL v9 = !v7 || !v8;
  if (v7 && v8) {
    int v10 = 16;
  }
  else {
    int v10 = 32;
  }
  if (v9) {
    unsigned int v11 = 4;
  }
  else {
    unsigned int v11 = 1;
  }
  if (v9) {
    unsigned int v12 = 1024;
  }
  else {
    unsigned int v12 = 256;
  }
  if (v9) {
    int v13 = 512;
  }
  else {
    int v13 = 128;
  }
  int v14 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 364) = v11;
  if (!v14) {
    unsigned int v12 = v13;
  }
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v12 / v11;
  *(_DWORD *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 28) = a4 < 0;
  *(_DWORD *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 368) = a7;
  unsigned int v15 = sub_1BBB19070;
  if (a5) {
    unsigned int v15 = sub_1BBB18C6C;
  }
  *(void *)(a1 + 424) = v15;
  operator new[]();
}

uint64_t sub_1BBB19070(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 332) < 1)
  {
    double result = *(void *)(result + 152);
    if (result && *(void *)(v1 + 144))
    {
      unsigned int v2 = *(_DWORD *)(v1 + 16);
      uint64_t v3 = *(int *)(v1 + 20);
      uint64_t v4 = *(int *)(v1 + 12);
      *(void *)(v1 + 224) = 0;
      *(_DWORD *)(v1 + 232) = 0;
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)result, 1uLL);
      CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v1 + 144), 1uLL);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      int WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      int HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      BOOL v8 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v1 + 152), 0);
      size_t v9 = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(v1 + 152), 0);
      uint64_t v10 = 0;
      int v34 = WidthOfPlane & -(int)v4;
      int v35 = HeightOfPlane & -(int)v4;
      if (BaseAddressOfPlane && v8)
      {
        unsigned int v37 = v2;
        uint64_t v11 = 0;
        if (v35 >= 1)
        {
          size_t v12 = v9;
          int v13 = 0;
          uint64_t v11 = 0;
          uint64_t v10 = 0;
          int v14 = (uint64_t (**)(char *, char *, size_t, size_t, uint64_t, uint64_t, uint64_t))(v1 + 8 * v3 + 408);
          size_t v33 = v9 * v4;
          uint64_t v15 = v34;
          do
          {
            int v36 = v13;
            if (v34 >= 1)
            {
              uint64_t v16 = 0;
              do
              {
                unsigned int v17 = &BaseAddressOfPlane[v16];
                BOOL v18 = &v8[v16];
                uint64_t v19 = *(unsigned int *)(v1 + 364);
                uint64_t v20 = BaseAddressOfPlane;
                size_t v21 = v12;
                uint64_t v22 = v1;
                int v23 = v8;
                uint64_t v24 = v15;
                unsigned int v25 = (*v14)(v17, v18, BytesPerRowOfPlane, v12, v4, v4, v19);
                uint64_t v15 = v24;
                BOOL v8 = v23;
                uint64_t v1 = v22;
                size_t v12 = v21;
                BaseAddressOfPlane = v20;
                v10 += v25;
                if (v25 <= v37) {
                  uint64_t v26 = 0;
                }
                else {
                  uint64_t v26 = v25;
                }
                v11 += v26;
                int v27 = *(_DWORD *)(v22 + 232);
                if (v25 > v37) {
                  ++v27;
                }
                *(_DWORD *)(v22 + 232) = v27;
                v16 += v4;
              }
              while (v16 < v15);
            }
            BaseAddressOfPlane += BytesPerRowOfPlane * v4;
            v8 += v33;
            int v13 = v36 + v4;
          }
          while (v36 + (int)v4 < v35);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v28 = *(int *)(v1 + 364);
      int v29 = v4 * v4;
      *(_DWORD *)(v1 + 224) = (v10 * v28 + ((v35 * v34) >> 1)) / (unint64_t)(v35 * v34);
      int v30 = *(_DWORD *)(v1 + 232);
      if (v30) {
        unint64_t v31 = ((unint64_t)((v30 * v29) >> 1) + v11 * v28) / (v30 * v29);
      }
      else {
        LODWORD(v31) = 0;
      }
      *(_DWORD *)(v1 + 228) = v31;
      *(_DWORD *)(v1 + 232) = (v30 + ((v35 * v34 / v29) >> 7)) / ((v35 * v34 / v29) >> 6);
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v1 + 152), 1uLL);
      uint64_t v32 = *(__CVBuffer **)(v1 + 144);
      return CVPixelBufferUnlockBaseAddress(v32, 1uLL);
    }
  }
  else
  {
    *(void *)(result + 224) = 0;
    *(_DWORD *)(result + 232) = 0;
  }
  return result;
}

unint64_t sub_1BBB19320(unint64_t result)
{
  uint64_t v1 = (CMTime *)result;
  int v3 = *(_DWORD *)result;
  int v2 = *(_DWORD *)(result + 4);
  CMTimeScale v5 = *(_DWORD *)(result + 224);
  unsigned int v4 = *(_DWORD *)(result + 228);
  unsigned int v6 = *(_DWORD *)(result + 232);
  unsigned int v7 = (v4 > *(_DWORD *)result) | (2 * (v6 > v2));
  *(_DWORD *)(result + 236) = v7;
  if (v5) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v4 == 0;
  }
  BOOL v9 = v8 && v6 == 0;
  if (v9 && !*(unsigned char *)(result + 104) && !*(unsigned char *)(result + 107))
  {
    *(_DWORD *)(result + 372) = 0;
    *(_WORD *)(result + 105) = 0;
    *(unsigned char *)(result + 107) = 0;
    *(_DWORD *)(result + 316) = 0;
    *(_DWORD *)(result + 328) = 0;
    ++*(_DWORD *)(result + 324);
LABEL_78:
    *(unsigned char *)(result + 104) = 0;
    p_timescale = (CMTimeScale *)(result + 104);
    goto LABEL_79;
  }
  if (v4 >= v3 / 4 || v6 >= v2 / 4)
  {
    if (v4 >= v3 / 3 || v6 >= v2 / 3)
    {
      if (v3 >= 0) {
        int v12 = v3;
      }
      else {
        int v12 = v3 + 1;
      }
      if (v2 >= 0) {
        int v13 = v2;
      }
      else {
        int v13 = v2 + 1;
      }
      if (v4 >= v12 >> 1 || v6 >= v13 >> 1)
      {
        if (v6 >= 3 * v2)
        {
          if (v7 == 3 && v6 > *(_DWORD *)(result + 356)) {
            int v14 = 100;
          }
          else {
            int v14 = 200;
          }
        }
        else
        {
          int v14 = 4;
        }
      }
      else
      {
        int v14 = 3;
      }
    }
    else
    {
      int v14 = 2;
    }
  }
  else
  {
    int v14 = 1;
  }
  unsigned int v15 = *(_DWORD *)(result + 60);
  BOOL v16 = v15 > 1;
  if (v7 >= 2) {
    BOOL v16 = 0;
  }
  *(_DWORD *)(result + 372) = v14;
  if (v15 <= 1 && v7 > 1)
  {
    char v17 = 0;
    int v18 = 1;
    goto LABEL_38;
  }
  if (v15 < 2 || v7 <= 1)
  {
    if (v16)
    {
      *(_WORD *)(result + 105) = 0;
      int v29 = *(unsigned __int8 *)(result + 47);
      *(unsigned char *)(result + 107) = 1;
      if (!v29)
      {
LABEL_72:
        CMTimeFlags v32 = *(_DWORD *)(result + 324);
        *(void *)(result + 324) = v32 + 1;
        if (!v32)
        {
          *(_OWORD *)(result + 264) = *(_OWORD *)(result + 240);
          *(void *)(result + 280) = *(void *)(result + 256);
        }
        goto LABEL_78;
      }
    }
    else
    {
      int v30 = *(unsigned __int8 *)(result + 47);
      *(_WORD *)(result + 105) = 0;
      unint64_t v31 = (unsigned char *)(result + 107);
      if (!v30) {
        goto LABEL_70;
      }
      *unint64_t v31 = 1;
    }
    if (!*(unsigned char *)(result + 79)) {
      goto LABEL_71;
    }
    unint64_t v31 = (unsigned char *)(result + 107);
LABEL_70:
    *unint64_t v31 = 0;
LABEL_71:
    if (v7 > 1)
    {
      int v18 = 0;
      goto LABEL_42;
    }
    goto LABEL_72;
  }
  int v18 = 0;
  char v17 = 1;
LABEL_38:
  *(unsigned char *)(result + 105) = v18;
  *(unsigned char *)(result + 106) = v17;
  *(unsigned char *)(result + 107) = 0;
  unsigned int v19 = *(_DWORD *)(result + 316);
  if (v19 <= 2)
  {
    int v18 = 1;
    *(unsigned char *)(result + 105) = 1;
    if (v19 != 2) {
      *(unsigned char *)(result + 106) = 0;
    }
  }
  *(_DWORD *)(result + 316) = v19 + 1;
LABEL_42:
  *(_DWORD *)(result + 324) = 0;
  int v20 = *(_DWORD *)(result + 328);
  *(_DWORD *)(result + 328) = v20 + 1;
  *(_DWORD *)(result + 376) = 0;
  if (v20)
  {
    if (v18)
    {
LABEL_44:
      char v21 = 0;
      LOBYTE(v1[4].timescale) = 1;
      p_timescale = &v1[4].timescale;
      goto LABEL_48;
    }
  }
  else
  {
    CMTime lhs = *(CMTime *)(result + 240);
    CMTime rhs = *(CMTime *)(result + 264);
    double result = (unint64_t)CMTimeSubtract(&v68, &lhs, &rhs);
    v1[12] = v68;
    if (BYTE1(v1[4].timescale)) {
      goto LABEL_44;
    }
  }
  int v23 = BYTE2(v1[4].timescale);
  LOBYTE(v1[4].timescale) = v23;
  p_timescale = &v1[4].timescale;
  if (!v23)
  {
LABEL_79:
    unsigned int value_high = 0;
    HIDWORD(v1[13].value) = 0;
    BYTE1(v1[4].flags) = 0;
    if (v1->timescale != 2) {
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  char v21 = 1;
LABEL_48:
  unsigned int value_high = HIDWORD(v1[13].value);
  if (value_high > v1[13].timescale) {
    v1[13].timescale = value_high;
  }
  char v25 = 0;
  LODWORD(v1[13].value) = 0;
  if ((v21 & 1) == 0)
  {
    BOOL v26 = v1[9].timescale > LODWORD(v1[14].epoch) && v1[9].flags > HIDWORD(v1[14].epoch);
    char v25 = v26 || LODWORD(v1[9].epoch) > LODWORD(v1[15].value);
  }
  BYTE1(v1[4].flags) = v25;
  if (v1->timescale != 2)
  {
    if (value_high == 1)
    {
      BOOL v28 = 1;
LABEL_83:
      BYTE2(v1[4].flags) = v28;
      BOOL v33 = value_high < 2;
      goto LABEL_86;
    }
LABEL_82:
    BOOL v28 = HIBYTE(v1[4].timescale) != 0;
    goto LABEL_83;
  }
LABEL_80:
  CMTime time1 = v1[12];
  CMTimeMake(&time2, 500, 1000);
  double result = CMTimeCompare(&time1, &time2);
  BOOL v33 = (int)result >= 1 && LODWORD(v1[13].epoch) == 1;
  BYTE2(v1[4].flags) = v33;
LABEL_86:
  HIBYTE(v1[4].flags) = v33;
  if (v1[15].timescale == 2 && v1[8].value && *(unsigned char *)p_timescale)
  {
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)v1[6].value, 1uLL);
    int WidthOfPlane = CVPixelBufferGetWidthOfPlane((CVPixelBufferRef)v1[6].value, 0);
    int HeightOfPlane = CVPixelBufferGetHeightOfPlane((CVPixelBufferRef)v1[6].value, 0);
    double result = CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v1[6].value, 1uLL);
    v1[8].epoch = -1;
    signed int flags = v1->flags;
    uint64_t v37 = ((flags - 1 + WidthOfPlane) / flags);
    v1[9].CMTimeValue value = -1;
    uint64_t v38 = ((flags - 1 + HeightOfPlane) / flags);
    if ((int)v38 <= 0)
    {
      int v41 = (int)v37 / 8;
    }
    else
    {
      int v39 = 0;
      int v40 = 0;
      int v41 = (int)v37 / 8;
      while (1)
      {
        if ((int)v37 < 1)
        {
          int v42 = 0;
        }
        else
        {
          int v42 = 0;
          unsigned int v43 = (unsigned __int8 *)(v1[8].value + v39);
          int v44 = v37;
          do
          {
            unsigned int v45 = *v43++;
            double result = v45;
            v42 += v45;
            --v44;
          }
          while (v44);
        }
        if (v42 >= v41) {
          break;
        }
        ++v40;
        v39 += v37 & ~((int)v37 >> 31);
        if (v40 == v38) {
          goto LABEL_101;
        }
      }
      HIDWORD(v1[8].epoch) = v40;
    }
LABEL_101:
    uint64_t v46 = (int)v38;
    uint64_t v47 = (int)v37;
    uint64_t v48 = ((int)v38 - 1) * (int)v37;
    while (1)
    {
      BOOL v26 = v46-- < 1;
      if (v26) {
        break;
      }
      if ((int)v37 < 1)
      {
        int v49 = 0;
      }
      else
      {
        int v49 = 0;
        uint64_t v50 = (unsigned __int8 *)(v1[8].value + v48);
        uint64_t v51 = v37;
        do
        {
          unsigned int v52 = *v50++;
          double result = v52;
          v49 += v52;
          --v51;
        }
        while (v51);
      }
      v48 -= (int)v37;
      if (v49 >= v41)
      {
        HIDWORD(v1[9].value) = v46;
        int v53 = v46 + 1;
        goto LABEL_111;
      }
    }
    int v53 = 0;
LABEL_111:
    int v54 = (int)v38 / 8;
    if ((int)v37 >= 1)
    {
      uint64_t v55 = 0;
      while (1)
      {
        if ((int)v38 < 1)
        {
          int v56 = 0;
        }
        else
        {
          int v56 = 0;
          CMTimeValue value = v1[8].value;
          uint64_t v58 = v38;
          do
          {
            double result = *(unsigned __int8 *)(value + v55);
            v56 += result;
            value += (int)v37;
            --v58;
          }
          while (v58);
        }
        if (v56 >= v54) {
          break;
        }
        if (++v55 == v37) {
          goto LABEL_122;
        }
      }
      LODWORD(v1[8].epoch) = v55;
    }
LABEL_122:
    uint64_t v37 = (int)v37;
    while (1)
    {
      int v59 = v37 - 1;
      if (v37 < 1) {
        break;
      }
      if ((int)v38 < 1)
      {
        int v60 = 0;
      }
      else
      {
        int v60 = 0;
        uint64_t v61 = v1[8].value - 1;
        uint64_t v62 = v38;
        do
        {
          v60 += *(unsigned __int8 *)(v61 + v37);
          v61 += v47;
          --v62;
        }
        while (v62);
      }
      --v37;
      if (v60 >= v54)
      {
        int v63 = v59 + 1;
        goto LABEL_132;
      }
    }
    int v63 = 0;
LABEL_132:
    LODWORD(v1[9].value) = v63;
    HIDWORD(v1[9].value) = v53;
  }
  return result;
}

char *sub_1BBB19930(char *__src, char *a2, void *a3, void *a4, void *a5, char **a6, void *a7, int a8, int a9, int a10, int a11, unint64_t a12, unint64_t a13)
{
  BOOL v16 = __src;
  uint64_t v52 = 32 * (int)a12;
  unint64_t v17 = (a12 >> 27) & 0xFFFFFFE0;
  uint64_t v48 = 32 * (int)a13;
  unint64_t v18 = (a13 >> 27) & 0xFFFFFFE0;
  int v20 = *a6;
  unsigned int v19 = a6[1];
  if ((int)v17 >= 1)
  {
    size_t v21 = a8;
    unint64_t v22 = (a12 >> 27) & 0xFFFFFFE0;
    do
    {
      __src = (char *)memcpy(v20, v16, v21);
      v20 += *a7;
      v16 += *a3;
      LODWORD(v22) = v22 - 1;
    }
    while (v22);
  }
  int v23 = v18 - v17;
  if ((int)v18 > (int)v17)
  {
    do
    {
      memcpy(v20, v16, (int)v52);
      __src = (char *)memcpy(&v20[(int)v48], &v16[(int)v48], a8 - (int)v48);
      v20 += *a7;
      v16 += *a3;
      --v23;
    }
    while (v23);
  }
  int v24 = a9 - v18;
  if (a9 > (int)v18)
  {
    do
    {
      __src = (char *)memcpy(v20, v16, a8);
      v20 += *a7;
      v16 += *a3;
      --v24;
    }
    while (v24);
  }
  int v25 = (int)v17 >> 1;
  if ((int)v17 >= 1)
  {
    if (v25 <= 1) {
      int v26 = 1;
    }
    else {
      int v26 = (int)v17 >> 1;
    }
    do
    {
      __src = (char *)memcpy(v19, a2, a8);
      v19 += a7[1];
      a2 += a3[1];
      --v26;
    }
    while (v26);
  }
  int v27 = (int)v18 >> 1;
  int v28 = ((int)v18 >> 1) - v25;
  if ((int)v18 >> 1 > v25)
  {
    do
    {
      memcpy(v19, a2, (int)v52);
      __src = (char *)memcpy(&v19[v48], &a2[v48], a8 - (int)v48);
      v19 += a7[1];
      a2 += a3[1];
      --v28;
    }
    while (v28);
  }
  if (a9 >= 0) {
    int v29 = a9;
  }
  else {
    int v29 = a9 + 1;
  }
  int v30 = v29 >> 1;
  int v31 = v30 - v27;
  if (v30 > v27)
  {
    do
    {
      __src = (char *)memcpy(v19, a2, a8);
      v19 += a7[1];
      a2 += a3[1];
      --v31;
    }
    while (v31);
  }
  if (a8 == a10 && a9 == a11)
  {
    int v32 = (a12 >> 27) & 0xFFFFFFE0;
    int v33 = v32;
    int v34 = 32 * a12;
    int v35 = 32 * a13;
    int v36 = (a13 >> 27) & 0xFFFFFFE0;
  }
  else
  {
    int v34 = (int)(float)((float)(v52 * a10) / (float)a8);
    int v32 = (a12 >> 27) & 0xFFFFFFE0;
    int v33 = (int)(float)((float)((int)v17 * a11) / (float)a9);
    int v35 = (int)(float)((float)(v48 * a10) / (float)a8);
    int v36 = (int)(float)((float)((int)v18 * a11) / (float)a9);
  }
  int v37 = v36 - v33;
  int v54 = v34;
  int v51 = v35 - v34 + 1;
  uint64_t v50 = v32;
  uint64_t v49 = v33;
  if (v32 < (v32 | 1) + v36 - v33)
  {
    uint64_t v38 = *a4 + *a5 * v33;
    int v39 = &(*a6)[*a7 * v32];
    int v40 = v36 - v33 + 1;
    do
    {
      __src = (char *)memcpy(&v39[(int)v52], (const void *)(v38 + v54), v51);
      v39 += *a7;
      v38 += *a5;
      --v40;
    }
    while (v40);
  }
  int v41 = v37 + 2;
  if (v37 < -2) {
    int v41 = v37 + 3;
  }
  if ((v37 & 0x80000000) == 0)
  {
    int v42 = v25 + (v41 >> 1);
    unint64_t v43 = a4[1] + ((unint64_t)(a5[1] * v49) >> 1);
    int v44 = &a6[1][(unint64_t)(a7[1] * v50) >> 1];
    do
    {
      __src = (char *)memcpy(&v44[v52], (const void *)(v43 + v54), v51);
      v44 += a7[1];
      v43 += a5[1];
      ++v25;
    }
    while (v25 < v42);
  }
  return __src;
}

uint64_t sub_1BBB19D40(uint64_t a1, int a2, int a3)
{
  size_t v4 = (a3 * a2);
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 16) = 4 * a2;
  if (16 * v4) {
    CMTimeScale v5 = malloc_type_malloc(8 * (16 * v4), 0x4CF1F002uLL);
  }
  else {
    CMTimeScale v5 = 0;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 32) = malloc_type_malloc(4 * v4, 0x82ECD37AuLL);
  unsigned int v6 = malloc_type_malloc(qword_1E9F82E38 + 48 * v4, 0x85B0E7E2uLL);
  if (v6)
  {
    uint64_t v7 = ((unint64_t)v6 + qword_1E9F82E38) & -qword_1E9F82E38;
    *(_DWORD *)(v7 - 4) = v7 - v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 112) = malloc_type_malloc(v4, 0x82ECD37AuLL);
  *(void *)(a1 + 120) = malloc_type_malloc(v4, 0x82ECD37AuLL);
  *(void *)(a1 + 128) = malloc_type_malloc(v4, 0x82ECD37AuLL);
  *(void *)(a1 + 136) = malloc_type_calloc(v4, 1uLL, 0x4AE20AB7uLL);
  *(void *)(a1 + 72) = malloc_type_malloc(2 * v4, 0x82ECD37AuLL);
  BOOL v8 = malloc_type_calloc(v4, 1uLL, 0x4AE20AB7uLL);
  *(void *)(a1 + 144) = v8;
  if (!v8) {
    return 4294967188;
  }
  if (!*(void *)a1) {
    return 4294967188;
  }
  BOOL v9 = *(void **)(a1 + 32);
  if (!v9
    || !*(void *)(a1 + 152)
    || !*(void *)(a1 + 112)
    || !*(void *)(a1 + 120)
    || !*(void *)(a1 + 128)
    || !*(void *)(a1 + 136)
    || !*(void *)(a1 + 72))
  {
    return 4294967188;
  }
  bzero(v9, 4 * *(unsigned int *)(a1 + 20));
  *(_DWORD *)(a1 + 56) = 64;
  *(void *)(a1 + 48) = malloc_type_malloc(0x300uLL, 0x4CF1F002uLL);
  uint64_t v10 = sub_1BBAF9CE4();
  *(void *)(a1 + 64) = v10;
  uint64_t result = 4294967188;
  if (*(void *)(a1 + 48))
  {
    if (v10)
    {
      *(void *)(a1 + 160) = sub_1BBAF9CE4();
      operator new[]();
    }
  }
  return result;
}

unsigned __int8 *sub_1BBB19F40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned int a8, int a9)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  if (a2 != a3)
  {
    uint64_t v9 = 0;
    for (unsigned int i = 9; i > 1; --i)
    {
      *(_OWORD *)(a3 + v9) = *(_OWORD *)(a2 + v9);
      v9 += a6;
    }
  }
  uint64_t v11 = 0;
  int v12 = *(_DWORD *)(a1 + 12);
  int v13 = v12 * a5;
  uint64_t v149 = v12 * a5 + a4;
  uint64_t v14 = *(void *)(a1 + 48) + 12 * *(unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v149);
  int v15 = *(char *)(v14 + 10);
  uint64_t v17 = *(void *)(a1 + 120);
  uint64_t v16 = *(void *)(a1 + 128);
  int v18 = *(unsigned __int8 *)(v17 + (v12 * a5 + a4));
  int v19 = *(unsigned __int8 *)(v16 + (v12 * a5 + a4));
  int v20 = *(char *)(v14 + 11);
  int v21 = v18 + v15;
  int v150 = v18;
  int v22 = v18 + v20;
  int v23 = v19 + v15;
  int v147 = v19;
  int v24 = v19 + v20;
  unsigned int v25 = v21 & ~(v21 >> 31);
  if (v25 >= 0x33) {
    uint64_t v26 = 51;
  }
  else {
    uint64_t v26 = v25;
  }
  if ((v22 & ~(v22 >> 31)) >= 0x33) {
    int v27 = 51;
  }
  else {
    int v27 = v22 & ~(v22 >> 31);
  }
  LODWORD(v28) = v23 & ~(v23 >> 31);
  if (v28 >= 0x33) {
    uint64_t v28 = 51;
  }
  else {
    uint64_t v28 = v28;
  }
  unsigned int v29 = v24 & ~(v24 >> 31);
  if (v29 >= 0x33) {
    unsigned int v29 = 51;
  }
  int v164 = byte_1BBB8DCF4[v27];
  int v165 = byte_1BBB8DCB4[v26];
  int v163 = byte_1BBB8DCB4[v28];
  int v162 = byte_1BBB8DCF4[v29];
  int16x8_t v158 = a7 + 16;
  int v30 = (char *)&byte_1BBB8BAE8[4 * v26];
  do
  {
    v188[v11 + 56] = v30[a7[v11 + 8]];
    v188[v11 + 24] = v30[a7[v11 + 24]];
    ++v11;
  }
  while (v11 != 4);
  int v155 = v20;
  int v156 = v15;
  uint64_t v31 = 0;
  int v32 = (char *)&byte_1BBB8BAE8[4 * v28];
  do
  {
    uint64_t result = (unsigned __int8 *)&v187[v31 + 32];
    *((_DWORD *)result + 8) = v32[a7[v31 + 8]];
    v187[v31 + 8] = v32[a7[v31 + 24]];
    ++v31;
  }
  while (v31 != 4);
  unsigned int v34 = *a7;
  uint64_t v182 = a3;
  if (v34 <= 0x3F)
  {
    if (a4 && v34 <= 0x1F)
    {
      int v35 = a4 - 1;
      uint64_t v36 = 0;
      if (a9)
      {
        uint64_t v37 = v35 + v12 * (a5 & 0xFFFFFFFE);
        unsigned int v38 = v150 + 1 + *(unsigned __int8 *)(v17 + v37);
        int v39 = v20 + (v38 >> 1);
        LODWORD(v40) = (v15 + (v38 >> 1)) & ~((int)(v15 + (v38 >> 1)) >> 31);
        if (v40 >= 0x33) {
          uint64_t v40 = 51;
        }
        else {
          uint64_t v40 = v40;
        }
        unsigned int v41 = v39 & ~(v39 >> 31);
        if (v41 >= 0x33) {
          int v42 = 51;
        }
        else {
          int v42 = v41;
        }
        int v183 = byte_1BBB8DCB4[v40];
        int v178 = byte_1BBB8DCF4[v42];
        unint64_t v43 = a7;
        do
        {
          v188[v36 + 64] = byte_1BBB8BAE8[4 * v40 + a7[v36]];
          ++v36;
        }
        while (v36 != 4);
        uint64_t v44 = 0;
        unsigned int v45 = v147 + 1 + *(unsigned __int8 *)(v16 + v37);
        int v46 = v20 + (v45 >> 1);
        LODWORD(v47) = (v15 + (v45 >> 1)) & ~((int)(v15 + (v45 >> 1)) >> 31);
        if (v47 >= 0x33) {
          uint64_t v47 = 51;
        }
        else {
          uint64_t v47 = v47;
        }
        unsigned int v48 = v46 & ~(v46 >> 31);
        if (v48 >= 0x33) {
          int v49 = 51;
        }
        else {
          int v49 = v48;
        }
        int v176 = byte_1BBB8DCB4[v47];
        int v174 = byte_1BBB8DCF4[v49];
        uint64_t result = (unsigned __int8 *)v188;
        do
        {
          v188[v44] = byte_1BBB8BAE8[4 * v47 + a7[v44]];
          ++v44;
        }
        while (v44 != 4);
        unsigned int v50 = v35 + v12 * (a5 | 1);
        unsigned int v51 = v150 + 1 + *(unsigned __int8 *)(v17 + v50);
        int v52 = v15 + (v51 >> 1);
        int v53 = v20 + (v51 >> 1);
        unsigned int v54 = v52 & ~(v52 >> 31);
        if (v54 >= 0x33) {
          unsigned int v55 = 51;
        }
        else {
          unsigned int v55 = v54;
        }
        unsigned int v56 = v53 & ~(v53 >> 31);
        int v172 = byte_1BBB8DCB4[v55];
        if (v56 >= 0x33) {
          unsigned int v56 = 51;
        }
        int v170 = byte_1BBB8DCF4[v56];
        unsigned int v57 = v147 + 1 + *(unsigned __int8 *)(v16 + v50);
        int v58 = v15 + (v57 >> 1);
        int v59 = v20 + (v57 >> 1);
        unsigned int v60 = v58 & ~(v58 >> 31);
        if (v60 >= 0x33) {
          unsigned int v61 = 51;
        }
        else {
          unsigned int v61 = v60;
        }
        unsigned int v62 = v59 & ~(v59 >> 31);
        if (v62 >= 0x33) {
          unsigned int v62 = 51;
        }
        int v169 = byte_1BBB8DCB4[v61];
        int v63 = byte_1BBB8DCF4[v62];
      }
      else
      {
        uint64_t v64 = (v35 + v13);
        unsigned int v65 = v150 + *(unsigned __int8 *)(v17 + v64) + 1;
        int v66 = v20 + (v65 >> 1);
        LODWORD(v40) = (v15 + (v65 >> 1)) & ~((int)(v15 + (v65 >> 1)) >> 31);
        if (v40 >= 0x33) {
          uint64_t v40 = 51;
        }
        else {
          uint64_t v40 = v40;
        }
        int v183 = byte_1BBB8DCB4[v40];
        unsigned int v67 = v66 & ~(v66 >> 31);
        if (v67 >= 0x33) {
          unsigned int v67 = 51;
        }
        uint64_t result = byte_1BBB8DCF4;
        int v178 = byte_1BBB8DCF4[v67];
        unint64_t v43 = a7;
        do
        {
          v188[v36 + 64] = byte_1BBB8BAE8[4 * v40 + a7[v36]];
          ++v36;
        }
        while (v36 != 4);
        uint64_t v68 = 0;
        unsigned int v69 = v147 + *(unsigned __int8 *)(v16 + v64) + 1;
        int v70 = v20 + (v69 >> 1);
        unsigned int v71 = (v15 + (v69 >> 1)) & ~((int)(v15 + (v69 >> 1)) >> 31);
        if (v71 >= 0x33) {
          uint64_t v47 = 51;
        }
        else {
          uint64_t v47 = v71;
        }
        int v176 = byte_1BBB8DCB4[v47];
        unsigned int v72 = v70 & ~(v70 >> 31);
        if (v72 >= 0x33) {
          int v73 = 51;
        }
        else {
          int v73 = v72;
        }
        int v174 = byte_1BBB8DCF4[v73];
        do
        {
          v188[v68] = byte_1BBB8BAE8[4 * v47 + a7[v68]];
          ++v68;
        }
        while (v68 != 4);
        unsigned int v55 = v40;
        unsigned int v61 = v47;
        int v172 = v183;
        int v169 = v176;
        int v170 = v178;
        int v63 = v174;
      }
      int v167 = v63;
      if (a9 == 2)
      {
        unsigned int v145 = v61;
        unsigned int v146 = v55;
        uint64_t v74 = 0;
        int8x16_t v152 = v43 + 32;
        uint64_t v153 = 2 * a6;
        char v75 = 1;
        unsigned int v151 = (char *)&byte_1BBB8BAE8[4 * v47];
        int16x8_t v76 = (char *)&byte_1BBB8BAE8[4 * v40];
        do
        {
          char v77 = v75;
          uint16x8_t v78 = &a7[2 * v74];
          int v79 = v78[1];
          if (v79 | *v78)
          {
            int v80 = v151[v78[1]];
            int v81 = v76[v78[1]];
            unsigned int v82 = (unsigned __int8 *)(a3 + v74 * v153);
            sub_1BBB1ABC8(v82, *v78, v183, v178, v76[*v78], v176, v174, v151[*v78]);
            uint64_t result = sub_1BBB1ABC8(&v82[a6], v79, v183, v178, v81, v176, v174, v80);
            a3 = v182;
          }
          char v75 = 0;
          uint64_t v74 = 1;
        }
        while ((v77 & 1) != 0);
        char v83 = 0;
        int v84 = 2;
        int16x8_t v184 = (char *)&byte_1BBB8BAE8[4 * v145];
        unsigned int v85 = (char *)&byte_1BBB8BAE8[4 * v146];
        do
        {
          char v86 = v83;
          uint64_t v87 = &v152[2 * (v84 & 1)];
          int v88 = v87[1];
          if (v88 | *v87)
          {
            int v89 = v184[v87[1]];
            int v90 = v85[v87[1]];
            uint64_t v91 = (unsigned __int8 *)(a3 + (int)v153 * v84);
            sub_1BBB1ABC8(v91, *v87, v172, v170, v85[*v87], v169, v167, v184[*v87]);
            uint64_t result = sub_1BBB1ABC8(&v91[a6], v88, v172, v170, v90, v169, v167, v89);
            a3 = v182;
          }
          char v83 = 1;
          int v84 = 3;
        }
        while ((v86 & 1) == 0);
      }
      else
      {
        int v92 = 0;
        uint64_t v93 = 0;
        unint64_t v94 = (char *)&byte_1BBB8BAE8[4 * v61];
        uint8x16_t v95 = (char *)&byte_1BBB8BAE8[4 * v55];
        do
        {
          int v96 = a7[v93];
          unsigned int v97 = v96;
          if (a9 == 1) {
            unsigned int v97 = a7[v93 + 32];
          }
          if (v97 | v96)
          {
            int v98 = v94[v97];
            int v99 = v95[v97];
            unint64_t v100 = (unsigned __int8 *)(a3 + v92);
            sub_1BBB1ABC8(v100, v96, v183, v178, v188[v93 + 64], v176, v174, v188[v93]);
            uint64_t result = sub_1BBB1ABC8(&v100[a6], v97, v172, v170, v99, v169, v167, v98);
            a3 = v182;
          }
          ++v93;
          v92 += 2 * a6;
        }
        while (v93 != 4);
      }
    }
    unsigned int v101 = a7[8];
    if (v101 == 4)
    {
      *(_WORD *)(a7 + 9) = 1028;
      a7[11] = 4;
    }
    else if (v101 > 0x1F)
    {
      goto LABEL_89;
    }
    uint64_t v102 = 0;
    uint8x16_t v179 = a7 + 8;
    int v103 = 8;
    do
    {
      int v104 = v179[v102];
      if (v179[v102])
      {
        int v105 = v187[v102 + 40];
        int v106 = v188[v102 + 56];
        int16x8_t v107 = (unsigned __int8 *)(a3 + v103);
        sub_1BBB1ABC8(v107, v179[v102], v165, v164, v106, v163, v162, v105);
        uint64_t result = sub_1BBB1ABC8(&v107[a6], v104, v165, v164, v106, v163, v162, v105);
        a3 = v182;
      }
      ++v102;
      v103 += 2 * a6;
    }
    while (v102 != 4);
  }
LABEL_89:
  unsigned int v108 = *v158;
  if (v108 > 0x3F) {
    return result;
  }
  unsigned int v109 = a8;
  if (a5 && v108 <= 0x1F)
  {
    LODWORD(result) = 0;
    unsigned int v168 = 0;
    char v110 = 1;
    int v111 = a6 << (a8 != 0);
    while (1)
    {
      unsigned int v161 = result;
      if (v109)
      {
        unsigned int v112 = a4 + *(_DWORD *)(a1 + 12) * (a5 - 2 + result);
        int v113 = *(unsigned __int8 *)(*(void *)(a1 + 120) + v112);
        int v114 = *(unsigned __int8 *)(*(void *)(a1 + 128) + v112);
        if (v110) {
          uint16x8_t v115 = v158;
        }
        else {
          uint16x8_t v115 = a7 + 36;
        }
        int v117 = v155;
        int v116 = v156;
      }
      else
      {
        uint64_t v118 = *(void *)(a1 + 144);
        int v117 = v155;
        int v116 = v156;
        if (*(unsigned char *)(v118 + v149) == 2)
        {
          if (a5 < 2)
          {
            int v113 = 0;
            int v114 = 0;
          }
          else
          {
            int v119 = *(_DWORD *)(a1 + 12);
            if (*(unsigned char *)(v118 + (v149 - 2 * v119)) == 2) {
              unsigned int v120 = a5 - 2;
            }
            else {
              unsigned int v120 = (a5 & 0xFFFFFFFE) - 1;
            }
            unsigned int v122 = a4 + v119 * v120;
            int v113 = *(unsigned __int8 *)(*(void *)(a1 + 120) + v122);
            int v114 = *(unsigned __int8 *)(*(void *)(a1 + 128) + v122);
          }
        }
        else
        {
          unsigned int v121 = a4 + *(_DWORD *)(a1 + 12) * (a5 - 1);
          int v113 = *(unsigned __int8 *)(*(void *)(a1 + 120) + v121);
          int v114 = *(unsigned __int8 *)(*(void *)(a1 + 128) + v121);
        }
        uint16x8_t v115 = v158;
      }
      uint64_t v123 = 0;
      unsigned int v124 = v150 + 1 + v113;
      int v125 = v117 + (v124 >> 1);
      LODWORD(v126) = (v116 + (v124 >> 1)) & ~((int)(v116 + (v124 >> 1)) >> 31);
      if (v126 >= 0x33) {
        uint64_t v126 = 51;
      }
      else {
        uint64_t v126 = v126;
      }
      unsigned int v127 = v125 & ~(v125 >> 31);
      if (v127 >= 0x33) {
        unsigned int v127 = 51;
      }
      int v180 = byte_1BBB8DCB4[v126];
      int v177 = byte_1BBB8DCF4[v127];
      do
      {
        v188[v123 + 32] = byte_1BBB8BAE8[4 * v126 + v115[v123]];
        ++v123;
      }
      while (v123 != 4);
      uint64_t v128 = 0;
      unsigned int v129 = v147 + 1 + v114;
      int v130 = v117 + (v129 >> 1);
      LODWORD(v131) = (v116 + (v129 >> 1)) & ~((int)(v116 + (v129 >> 1)) >> 31);
      if (v131 >= 0x33) {
        uint64_t v131 = 51;
      }
      else {
        uint64_t v131 = v131;
      }
      unsigned int v132 = v130 & ~(v130 >> 31);
      if (v132 >= 0x33) {
        unsigned int v132 = 51;
      }
      int v175 = byte_1BBB8DCB4[v131];
      int v173 = byte_1BBB8DCF4[v132];
      do
      {
        v187[v128 + 16] = byte_1BBB8BAE8[4 * v131 + v115[v128]];
        ++v128;
      }
      while (v128 != 4);
      unsigned int v133 = *v115;
      if (v133 == 4) {
        break;
      }
      if (v133 <= 0x1F) {
        goto LABEL_124;
      }
LABEL_128:
      char v110 = 0;
      v168 += a6;
      unsigned int v109 = a8;
      uint64_t result = (unsigned __int8 *)1;
      if (v161 >= a8) {
        goto LABEL_129;
      }
    }
    *(_WORD *)(v115 + 1) = 1028;
    v115[3] = 4;
LABEL_124:
    uint64_t v134 = 0;
    unsigned int v135 = v168;
    int v171 = v115;
    do
    {
      int v136 = v115[v134];
      if (v115[v134])
      {
        int v137 = v187[v134 + 16];
        int v185 = v188[v134 + 32];
        uint16x8_t v138 = (unsigned char *)(a3 + v135);
        sub_1BBB1AD68(v138, v111, v136, v180, v177, v185);
        sub_1BBB1AD68(v138 + 1, v111, v136, v175, v173, v137);
        sub_1BBB1AD68(v138 + 2, v111, v136, v180, v177, v185);
        sub_1BBB1AD68(v138 + 3, v111, v136, v175, v173, v137);
        uint16x8_t v115 = v171;
        a3 = v182;
      }
      ++v134;
      v135 += 4;
    }
    while (v134 != 4);
    goto LABEL_128;
  }
LABEL_129:
  unsigned int v139 = a7[24];
  if (v139 == 4)
  {
    *(_WORD *)(a7 + 25) = 1028;
    a7[27] = 4;
  }
  else if (v139 > 0x1F)
  {
    return result;
  }
  uint64_t v140 = 0;
  int v141 = 4 * a6;
  int16x8_t v181 = a7 + 24;
  do
  {
    int v142 = v181[v140];
    if (v181[v140])
    {
      int v143 = v187[v140 + 8];
      int v186 = v188[v140 + 24];
      unsigned int v144 = (unsigned char *)(a3 + v141);
      sub_1BBB1AD68(v144, a6, v142, v165, v164, v186);
      sub_1BBB1AD68(v144 + 1, a6, v142, v163, v162, v143);
      sub_1BBB1AD68(v144 + 2, a6, v142, v165, v164, v186);
      uint64_t result = sub_1BBB1AD68(v144 + 3, a6, v142, v163, v162, v143);
      a3 = v182;
    }
    ++v140;
    v141 += 4;
  }
  while (v140 != 4);
  return result;
}

unsigned __int8 *sub_1BBB1ABC8(unsigned __int8 *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  if (a2)
  {
    int v8 = *(result - 1);
    int v9 = result[1];
    int v10 = *result;
    int v11 = *(result - 2);
    if ((v11 - v10) * (v11 - v10) < (a3 * a3))
    {
      int v12 = *(result - 4);
      if ((v12 - v11) * (v12 - v11) < (a4 * a4))
      {
        int v13 = result[2];
        if ((v13 - v10) * (v13 - v10) < (a4 * a4))
        {
          int v14 = (v12 - v13 + 4 * (v10 - v11) + 4) >> 3;
          if (v14 <= ~a5) {
            int v15 = ~a5;
          }
          else {
            int v15 = (v12 - v13 + 4 * (v10 - v11) + 4) >> 3;
          }
          if (v14 > a5 + 1) {
            int v16 = a5 + 1;
          }
          else {
            int v16 = v15;
          }
          unsigned int v17 = (v16 + v11) & ~((v16 + v11) >> 31);
          if (v17 >= 0xFF) {
            LOBYTE(v17) = -1;
          }
          unsigned int v18 = (v10 - v16) & ~((v10 - v16) >> 31);
          if (v18 >= 0xFF) {
            LOBYTE(v18) = -1;
          }
          unsigned int v19 = (v13 + 2 * v12 + v11 + 2) >> 2;
          unsigned int v20 = (v12 + 2 * v13 + v10 + 2) >> 2;
          if (a2 != 4)
          {
            LOBYTE(v19) = v17;
            LOBYTE(v20) = v18;
          }
          *(result - 2) = v19;
          *uint64_t result = v20;
        }
      }
    }
    if ((v8 - v9) * (v8 - v9) < (a6 * a6))
    {
      int v21 = *(result - 3);
      if ((v21 - v8) * (v21 - v8) < (a7 * a7))
      {
        int v22 = result[3];
        if ((v22 - v9) * (v22 - v9) < (a7 * a7))
        {
          int v23 = (v21 - v22 + 4 * (v9 - v8) + 4) >> 3;
          if (v23 <= ~a8) {
            int v24 = ~a8;
          }
          else {
            int v24 = (v21 - v22 + 4 * (v9 - v8) + 4) >> 3;
          }
          if (v23 > a8 + 1) {
            int v25 = a8 + 1;
          }
          else {
            int v25 = v24;
          }
          unsigned int v26 = (v25 + v8) & ~((v25 + v8) >> 31);
          if (v26 >= 0xFF) {
            LOBYTE(v26) = -1;
          }
          unsigned int v27 = (v9 - v25) & ~((v9 - v25) >> 31);
          if (v27 >= 0xFF) {
            LOBYTE(v27) = -1;
          }
          unsigned int v28 = (v8 + 2 * v21 + v22 + 2) >> 2;
          unsigned int v29 = (v21 + v9 + 2 * v22 + 2) >> 2;
          if (a2 != 4)
          {
            LOBYTE(v28) = v26;
            LOBYTE(v29) = v27;
          }
          *(result - 1) = v28;
          result[1] = v29;
        }
      }
    }
  }
  return result;
}

unsigned char *sub_1BBB1AD68(unsigned char *result, int a2, int a3, int a4, int a5, int a6)
{
  int v6 = *result;
  int v7 = result[-a2];
  if ((v7 - v6) * (v7 - v6) < (a4 * a4))
  {
    int v8 = result[-2 * a2];
    if ((v8 - v7) * (v8 - v7) < (a5 * a5))
    {
      int v9 = result[a2];
      if ((v9 - v6) * (v9 - v6) < (a5 * a5))
      {
        int v10 = (v8 - v9 + 4 * (v6 - v7) + 4) >> 3;
        if (v10 <= ~a6) {
          int v11 = ~a6;
        }
        else {
          int v11 = (v8 - v9 + 4 * (v6 - v7) + 4) >> 3;
        }
        if (v10 > a6 + 1) {
          int v12 = a6 + 1;
        }
        else {
          int v12 = v11;
        }
        unsigned int v13 = (v12 + v7) & ~((v12 + v7) >> 31);
        if (v13 >= 0xFF) {
          LOBYTE(v13) = -1;
        }
        unsigned int v14 = (v6 - v12) & ~((v6 - v12) >> 31);
        if (v14 >= 0xFF) {
          LOBYTE(v14) = -1;
        }
        unsigned int v15 = (v9 + 2 * v8 + v7 + 2) >> 2;
        unsigned int v16 = (v8 + 2 * v9 + v6 + 2) >> 2;
        if (a3 != 4)
        {
          LOBYTE(v15) = v13;
          LOBYTE(v16) = v14;
        }
        result[-a2] = v15;
        *uint64_t result = v16;
      }
    }
  }
  return result;
}

unsigned char *sub_1BBB1AE4C(unsigned char *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned int a8, int a9)
{
  int v9 = a7;
  int v10 = a9;
  v150[14] = *MEMORY[0x1E4F143B8];
  if (a2 != a3)
  {
    uint64_t v11 = 0;
    for (unsigned int i = 17; i > 1; --i)
    {
      *(_OWORD *)(a3 + v11) = *(_OWORD *)(a2 + v11);
      v11 += a6;
    }
  }
  uint64_t v13 = 0;
  int v14 = *((_DWORD *)result + 3);
  int v15 = v14 * a5;
  uint64_t v122 = v14 * a5 + a4;
  uint64_t v16 = *((void *)result + 6) + 12 * *(unsigned __int16 *)(*((void *)result + 9) + 2 * v122);
  unsigned int v129 = result;
  uint64_t v17 = *((void *)result + 14);
  int v131 = *(char *)(v16 + 10);
  int v130 = *(char *)(v16 + 11);
  int v117 = *(unsigned __int8 *)(v17 + (v14 * a5 + a4));
  LODWORD(v18) = (v117 + v131) & ~((v117 + v131) >> 31);
  if (v18 >= 0x33) {
    uint64_t v18 = 51;
  }
  else {
    uint64_t v18 = v18;
  }
  unsigned int v19 = (v117 + v130) & ~((v117 + v130) >> 31);
  if (v19 >= 0x33) {
    unsigned int v19 = 51;
  }
  int v147 = byte_1BBB8DCB4[v18];
  int v20 = byte_1BBB8DCF4[v19];
  unsigned int v135 = a7 + 16;
  int v21 = &byte_1BBB8BAE8[4 * v18];
  do
  {
    *(_DWORD *)&v149[4 * v13 + 112] = v21[a7[v13]];
    v148[v13] = v21[a7[v13 + 16]];
    ++v13;
  }
  while (v13 != 16);
  unsigned int v22 = *a7;
  if (v22 <= 0x3F)
  {
    if (a4 && v22 < 0x20)
    {
      int v23 = a4 - 1;
      if (a9)
      {
        uint64_t v24 = 0;
        unsigned int v25 = v117 + 1 + *(unsigned __int8 *)(v17 + v23 + v14 * (a5 & 0xFFFFFFFE));
        int v26 = v130 + (v25 >> 1);
        LODWORD(v27) = (v131 + (v25 >> 1)) & ~((int)(v131 + (v25 >> 1)) >> 31);
        if (v27 >= 0x33) {
          uint64_t v27 = 51;
        }
        else {
          uint64_t v27 = v27;
        }
        unsigned int v28 = v26 & ~(v26 >> 31);
        if (v28 >= 0x33) {
          int v29 = 51;
        }
        else {
          int v29 = v28;
        }
        int v139 = byte_1BBB8DCB4[v27];
        int v127 = byte_1BBB8DCF4[v29];
        do
        {
          *((_DWORD *)&v150[6] + v24) = byte_1BBB8BAE8[4 * v27 + a7[v24]];
          ++v24;
        }
        while (v24 != 16);
        unsigned int v30 = v117 + 1 + *(unsigned __int8 *)(v17 + v23 + v14 * (a5 | 1u));
        int v31 = v131 + (v30 >> 1);
        int v32 = v130 + (v30 >> 1);
        unsigned int v33 = v31 & ~(v31 >> 31);
        if (v33 >= 0x33) {
          int v34 = 51;
        }
        else {
          int v34 = v33;
        }
        unsigned int v35 = v32 & ~(v32 >> 31);
        if (v35 >= 0x33) {
          unsigned int v35 = 51;
        }
        int v126 = byte_1BBB8DCB4[v34];
        int v36 = byte_1BBB8DCF4[v35];
      }
      else
      {
        uint64_t v37 = 0;
        unsigned int v38 = v117 + *(unsigned __int8 *)(v17 + (v23 + v15)) + 1;
        int v39 = v130 + (v38 >> 1);
        unsigned int v40 = (v131 + (v38 >> 1)) & ~((int)(v131 + (v38 >> 1)) >> 31);
        if (v40 >= 0x33) {
          uint64_t v27 = 51;
        }
        else {
          uint64_t v27 = v40;
        }
        int v139 = byte_1BBB8DCB4[v27];
        unsigned int v41 = v39 & ~(v39 >> 31);
        if (v41 >= 0x33) {
          unsigned int v41 = 51;
        }
        int v127 = byte_1BBB8DCF4[v41];
        do
        {
          *((_DWORD *)&v150[6] + v37) = byte_1BBB8BAE8[4 * v27 + a7[v37]];
          ++v37;
        }
        while (v37 != 16);
        int v34 = v27;
        int v126 = v139;
        int v36 = v127;
      }
      int v124 = v36;
      if (a9 == 2)
      {
        int v116 = v34;
        uint64_t v42 = 0;
        int v119 = a7 + 32;
        uint64_t v136 = a6;
        int v145 = 4 * a6;
        char v43 = 1;
        uint64_t v118 = &byte_1BBB8BAE8[4 * v27];
        do
        {
          char v44 = v43;
          unsigned int v45 = &v9[2 * v42];
          int v46 = *v45;
          int v47 = v45[1];
          if (v47 | v46)
          {
            int v123 = v118[v45[1]];
            int v48 = v118[*v45];
            int v49 = (unsigned char *)(a3 + v42 * v145);
            sub_1BBB1B998(v49, 1, *v45, v139, v127, v48);
            unsigned int v50 = &v49[a6];
            sub_1BBB1B998(v50, 1, v46, v139, v127, v48);
            unsigned int v51 = &v50[a6];
            sub_1BBB1B998(v51, 1, v47, v139, v127, v123);
            uint64_t result = sub_1BBB1B998(&v51[a6], 1, v47, v139, v127, v123);
          }
          char v43 = 0;
          uint64_t v42 = 1;
        }
        while ((v44 & 1) != 0);
        char v52 = 0;
        int v53 = 2;
        uint64_t v128 = &byte_1BBB8BAE8[4 * v116];
        do
        {
          char v54 = v52;
          unsigned int v55 = &v119[2 * (v53 & 1)];
          int v56 = *v55;
          int v57 = v55[1];
          if (v57 | v56)
          {
            int v58 = v128[v55[1]];
            int v59 = v128[*v55];
            unsigned int v60 = (unsigned char *)(a3 + v145 * v53);
            char v140 = v54;
            sub_1BBB1B998(v60, 1, *v55, v126, v124, v59);
            unsigned int v61 = &v60[v136];
            sub_1BBB1B998(v61, 1, v56, v126, v124, v59);
            sub_1BBB1B998(&v61[v136], 1, v57, v126, v124, v58);
            uint64_t result = sub_1BBB1B998(&v61[v136 + v136], 1, v57, v126, v124, v58);
            char v54 = v140;
          }
          char v52 = 1;
          int v53 = 3;
        }
        while ((v54 & 1) == 0);
      }
      else
      {
        int v62 = 0;
        uint64_t v63 = 0;
        int v145 = 4 * a6;
        uint64_t v136 = a6;
        unsigned int v120 = &byte_1BBB8BAE8[4 * v34];
        do
        {
          int v64 = v9[v63];
          int v65 = *((_DWORD *)&v150[6] + v63);
          LODWORD(v66) = v64;
          int v67 = v65;
          if (v10 == 1)
          {
            uint64_t v66 = v9[v63 + 32];
            int v67 = v120[v66];
          }
          if (v66 | v64)
          {
            sub_1BBB1B998((unsigned char *)(a3 + v62), 1, v9[v63], v139, v127, *((_DWORD *)&v150[6] + v63));
            uint64_t v68 = (unsigned char *)(a3 + v62 + a6);
            sub_1BBB1B998(v68, 1, v66, v126, v124, v67);
            unsigned int v69 = &v68[a6];
            sub_1BBB1B998(v69, 1, v64, v139, v127, v65);
            uint64_t result = sub_1BBB1B998(&v69[a6], 1, v66, v126, v124, v67);
            int v10 = a9;
          }
          ++v63;
          v62 += v145;
        }
        while (v63 != 4);
      }
    }
    else
    {
      int v145 = 4 * a6;
      uint64_t v136 = a6;
    }
    int v141 = v150;
    int v70 = v9 + 4;
    unint64_t v71 = 4;
    while (1)
    {
      unsigned int v72 = v9[v71];
      if (v72 == 4) {
        break;
      }
      if (v72 <= 0x1F) {
        goto LABEL_58;
      }
LABEL_62:
      v141 += 2;
      v70 += 4;
      BOOL v79 = v71 >= 0xC;
      v71 += 4;
      int v9 = a7;
      if (v79) {
        goto LABEL_64;
      }
    }
    v9[v71 | 1] = 4;
    v9[v71 | 2] = 4;
    v9[v71 | 3] = 4;
LABEL_58:
    int v73 = 0;
    for (uint64_t j = 0; j != 4; ++j)
    {
      int v75 = v70[j];
      if (v70[j])
      {
        int v76 = *((_DWORD *)v141 + j);
        sub_1BBB1B998((unsigned char *)(a3 + v71 + v73), 1, v70[j], v147, v20, v76);
        char v77 = (unsigned char *)(a3 + v71 + v73 + v136);
        sub_1BBB1B998(v77, 1, v75, v147, v20, v76);
        uint16x8_t v78 = &v77[v136];
        sub_1BBB1B998(v78, 1, v75, v147, v20, v76);
        uint64_t result = sub_1BBB1B998(&v78[v136], 1, v75, v147, v20, v76);
      }
      v73 += v145;
    }
    goto LABEL_62;
  }
LABEL_64:
  int v80 = v135;
  unsigned int v81 = *v135;
  if (v81 <= 0x3F)
  {
    unsigned int v82 = a8;
    if (a5 && v81 <= 0x1F)
    {
      int v83 = 0;
      unsigned int v142 = 0;
      int v125 = v9 + 36;
      char v84 = 1;
      int v85 = a6 << (a8 != 0);
      do
      {
        unsigned int v137 = v83;
        if (v82)
        {
          int v86 = *(unsigned __int8 *)(*((void *)v129 + 14) + (a4 + *((_DWORD *)v129 + 3) * (a5 - 2 + v83)));
          if ((v84 & 1) == 0) {
            int v80 = v125;
          }
        }
        else
        {
          uint64_t v87 = *((void *)v129 + 18);
          if (*(unsigned char *)(v87 + v122) != 2)
          {
            uint64_t v90 = *((void *)v129 + 14);
            int v88 = *((_DWORD *)v129 + 3);
            int v91 = a4;
            unsigned int v92 = a5 - 1;
LABEL_76:
            int v86 = *(unsigned __int8 *)(v90 + v91 + v88 * v92);
            goto LABEL_78;
          }
          if (a5 >= 2)
          {
            int v88 = *((_DWORD *)v129 + 3);
            int v89 = *(unsigned __int8 *)(v87 + (v122 - 2 * v88));
            uint64_t v90 = *((void *)v129 + 14);
            if (v89 == 2)
            {
              int v91 = a4;
              unsigned int v92 = a5 - 2;
            }
            else
            {
              int v91 = a4;
              unsigned int v92 = (a5 & 0xFFFFFFFE) - 1;
            }
            goto LABEL_76;
          }
          int v86 = 0;
        }
LABEL_78:
        uint64_t v93 = 0;
        unsigned int v94 = v117 + 1 + v86;
        int v95 = v130 + (v94 >> 1);
        LODWORD(v96) = (v131 + (v94 >> 1)) & ~((int)(v131 + (v94 >> 1)) >> 31);
        if (v96 >= 0x33) {
          uint64_t v96 = 51;
        }
        else {
          uint64_t v96 = v96;
        }
        unsigned int v97 = v95 & ~(v95 >> 31);
        if (v97 >= 0x33) {
          unsigned int v97 = 51;
        }
        int v98 = byte_1BBB8DCB4[v96];
        int v99 = byte_1BBB8DCF4[v97];
        do
        {
          *(_DWORD *)&v149[4 * v93 + 48] = byte_1BBB8BAE8[4 * v96 + v80[v93]];
          ++v93;
        }
        while (v93 != 16);
        unsigned int v100 = *v80;
        if (v100 == 4)
        {
          *(_WORD *)(v80 + 1) = 1028;
          _DWORD v80[3] = 4;
LABEL_88:
          uint64_t v101 = 0;
          unsigned int v102 = v142;
          do
          {
            int v103 = v80[v101];
            if (v80[v101])
            {
              int v104 = *(_DWORD *)&v149[4 * v101 + 48];
              int v105 = (unsigned char *)(a3 + v102);
              sub_1BBB1B998(v105, v85, v80[v101], v98, v99, v104);
              sub_1BBB1B998(v105 + 1, v85, v103, v98, v99, v104);
              sub_1BBB1B998(v105 + 2, v85, v103, v98, v99, v104);
              uint64_t result = sub_1BBB1B998(v105 + 3, v85, v103, v98, v99, v104);
            }
            ++v101;
            v102 += 4;
          }
          while (v101 != 4);
          goto LABEL_92;
        }
        if (v100 <= 0x1F) {
          goto LABEL_88;
        }
LABEL_92:
        char v84 = 0;
        v142 += a6;
        unsigned int v82 = a8;
        int v83 = 1;
        int v9 = a7;
        int v80 = v135;
      }
      while (v137 < a8);
    }
    uint64_t v106 = a3 + 4 * a6;
    int16x8_t v107 = v9;
    unsigned int v108 = v149;
    unsigned int v146 = v107 + 20;
    uint64_t v109 = 4;
    while (1)
    {
      unsigned int v110 = v80[v109];
      unint64_t v144 = v109;
      if (v110 == 4) {
        break;
      }
      if (v110 <= 0x1F) {
        goto LABEL_99;
      }
LABEL_103:
      v106 += 4 * a6;
      v108 += 16;
      v146 += 4;
      uint64_t v109 = v144 + 4;
      int v80 = v135;
      if (v144 >= 0xC) {
        return result;
      }
    }
    v80[v109 | 1] = 4;
    v80[v109 | 2] = 4;
    v80[v109 | 3] = 4;
LABEL_99:
    uint64_t v111 = 0;
    unsigned int v112 = v146;
    do
    {
      int v114 = *v112++;
      int v113 = v114;
      if (v114)
      {
        int v115 = *(_DWORD *)&v108[v111];
        sub_1BBB1B998((unsigned char *)(v106 + v111), a6, v113, v147, v20, v115);
        sub_1BBB1B998((unsigned char *)(v106 + v111 + 1), a6, v113, v147, v20, v115);
        sub_1BBB1B998((unsigned char *)(v106 + v111 + 2), a6, v113, v147, v20, v115);
        uint64_t result = sub_1BBB1B998((unsigned char *)(v106 + v111 + 3), a6, v113, v147, v20, v115);
      }
      v111 += 4;
    }
    while (v111 != 16);
    goto LABEL_103;
  }
  return result;
}

unsigned char *sub_1BBB1B998(unsigned char *result, int a2, int a3, int a4, int a5, int a6)
{
  int v6 = result[-a2];
  int v7 = *result;
  int v8 = v6 - v7;
  if (v8 * v8 < (a4 * a4))
  {
    int v9 = result[-2 * a2];
    if ((v9 - v6) * (v9 - v6) < (a5 * a5))
    {
      unsigned int v10 = result[a2];
      if ((v10 - v7) * (v10 - v7) < a5 * a5)
      {
        uint64_t v11 = a2;
        uint64_t v12 = -(uint64_t)a2;
        uint64_t v13 = -2 * a2;
        uint64_t v14 = -3 * a2;
        unsigned int v15 = result[-3 * a2];
        if (a3 == 4)
        {
          unsigned int v16 = result[2 * a2];
          if (v8 < 0) {
            int v8 = v7 - v6;
          }
          int v17 = v15 - v6;
          if ((int)(v15 - v6) < 0) {
            int v17 = v6 - v15;
          }
          if ((int)(v16 - v7) >= 0) {
            int v18 = v16 - v7;
          }
          else {
            int v18 = v7 - v16;
          }
          if (v17 >= a5 || v8 >= (a4 >> 2) + 2)
          {
            unsigned int v20 = (v6 + 2 * v9 + v10 + 2) >> 2;
            LOBYTE(v21) = v9;
          }
          else
          {
            int v19 = v7 + v6 + v9;
            unsigned int v20 = (v10 + 2 * v19 + v15 + 4) >> 3;
            unsigned int v21 = (v19 + v15 + 2) >> 2;
            unsigned int v15 = (v19 + 3 * v15 + 2 * result[-4 * v11] + 4) >> 3;
          }
          if (v18 >= a5 || v8 >= (a4 >> 2) + 2)
          {
            unsigned int v39 = (v7 + v9 + 2 * v10 + 2) >> 2;
          }
          else
          {
            unsigned int v38 = v7 + v6 + v10;
            unsigned int v39 = (v9 + 2 * v38 + v16 + 4) >> 3;
            unsigned int v10 = (v38 + v16 + 2) >> 2;
            unsigned int v16 = (v38 + 3 * v16 + 2 * result[3 * v11] + 4) >> 3;
          }
          result[v12] = v20;
          result[v13] = v21;
          result[v14] = v15;
          *uint64_t result = v39;
          result[v11] = v10;
          result[2 * v11] = v16;
        }
        else
        {
          int v22 = result[2 * a2];
          if ((int)(v15 - v6) >= 0) {
            int v23 = v15 - v6;
          }
          else {
            int v23 = v6 - v15;
          }
          if (v22 - v7 >= 0) {
            int v24 = v22 - v7;
          }
          else {
            int v24 = v7 - v22;
          }
          if (v23 >= a5) {
            int v25 = a6;
          }
          else {
            int v25 = a6 + 1;
          }
          if (v24 < a5) {
            ++v25;
          }
          int v26 = v9 - v10 + 4 * (v7 - v6) + 4;
          unsigned int v27 = v26 >> 3;
          int v28 = v26 >> 3;
          if (v28 < (__int16)-(__int16)v25) {
            int v29 = -v25;
          }
          else {
            LOWORD(v29) = v27;
          }
          if (v28 > (__int16)v25) {
            LOWORD(v29) = v25;
          }
          unsigned int v30 = (__int16)(v29 + v6) & ~((__int16)(v29 + v6) >> 31);
          if (v30 >= 0xFF) {
            LOBYTE(v30) = -1;
          }
          unsigned int v31 = (__int16)(v7 - v29) & ~((__int16)(v7 - v29) >> 31);
          if (v31 >= 0xFF) {
            LOBYTE(v31) = -1;
          }
          unsigned int v32 = v7 + v6 + 1;
          int v33 = v15 - 2 * v9 + (v32 >> 1);
          if (-a6 > v33 >> 1) {
            int v34 = -a6;
          }
          else {
            int v34 = v33 >> 1;
          }
          if (a6 < (__int16)v34) {
            LOBYTE(v34) = a6;
          }
          char v35 = v9 + v34;
          if (v23 < a5) {
            LOBYTE(v9) = v35;
          }
          if (v24 < a5)
          {
            int v36 = v22 - 2 * v10 + (v32 >> 1);
            if (-a6 > v36 >> 1) {
              int v37 = -a6;
            }
            else {
              int v37 = v36 >> 1;
            }
            if (a6 < (__int16)v37) {
              LOBYTE(v37) = a6;
            }
            LOBYTE(v10) = v10 + v37;
          }
          result[v12] = v30;
          result[v13] = v9;
          *uint64_t result = v31;
          result[v11] = v10;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BBB1BC1C(__int16 *a1, __int16 *a2, signed int a3, int a4, int a5, int32x2_t a6, int32x2_t a7)
{
  unsigned int v7 = *((unsigned __int8 *)a1 + 12);
  unsigned int v8 = *((unsigned __int8 *)a2 + 12);
  unsigned int v9 = *((unsigned __int8 *)a2 + 13);
  if (a4 && !a5)
  {
    unsigned int v7 = v7 & 0xFFFFFEFF | ((a1[4] & 1) << 8);
    unsigned int v8 = v8 & 0xFFFFFEFF | ((a2[4] & 1) << 8);
    unsigned int v9 = v9 & 0xFFFFFEFF | ((*((unsigned char *)a2 + 9) & 1) << 8);
  }
  if (v8 == v9)
  {
    a6.i16[0] = a1[2];
    a6.i16[2] = *a1;
    a7.i16[0] = a2[1];
    a7.i16[2] = a2[3];
    int32x2_t v10 = vshr_n_s32(vshl_n_s32(a6, 0x10uLL), 0x10uLL);
    int32x2_t v11 = vshr_n_s32(vshl_n_s32(a7, 0x10uLL), 0x10uLL);
    int32x2_t v12 = vdup_n_s32(a3);
    int32x2_t v13 = (int32x2_t)vorr_s8((int8x8_t)vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vabd_s32(v10, vdup_n_s32(a2[2])), (int8x8_t)vabd_s32(vrev64_s32(v10), vdup_n_s32(*a2))), (uint32x2_t)0x300000003), vorr_s8((int8x8_t)vcge_s32(vabd_s32(vdup_n_s32(a1[1]), v11), v12), (int8x8_t)vcge_s32(vabd_s32(vdup_n_s32(a1[3]), vrev64_s32(v11)), v12)));
    unsigned __int8 v14 = vand_s8((int8x8_t)v13, (int8x8_t)vdup_lane_s32(v13, 1)).u8[0];
  }
  else
  {
    int v15 = *a1;
    if (v8 == v7)
    {
      int v17 = v15 - *a2;
      BOOL v16 = v17 < 0;
      int v18 = a1[1] - a2[1];
      int v19 = a1[2] - a2[2];
      int v20 = a2[3];
    }
    else
    {
      int v17 = v15 - a2[2];
      BOOL v16 = v17 < 0;
      int v18 = a1[1] - a2[3];
      int v19 = a1[2] - *a2;
      int v20 = a2[1];
    }
    int v21 = a1[3] - v20;
    if (v16) {
      int v17 = -v17;
    }
    if (v18 < 0) {
      int v18 = -v18;
    }
    if (v19 < 0) {
      int v19 = -v19;
    }
    if (v21 < 0) {
      int v21 = v20 - a1[3];
    }
    unsigned int v22 = v19 | v17;
    unsigned __int8 v14 = v18 >= a3 || v22 > 3 || v21 >= a3;
  }
  return v14 & 1;
}

uint64_t sub_1BBB1BD7C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *(void *)(a1 + 80) = a2;
  if (*(_DWORD *)(a1 + 24))
  {
    int v4 = a2[25] >> 4;
    *(_DWORD *)(a1 + 8) = v4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 8);
  }
  unint64_t v5 = a3 + 32;
  unint64_t v395 = a3 + 64;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 12) * v4;
  int v379 = **(unsigned __int8 **)(a1 + 144);
  uint64_t v387 = a3 + 32;
  while (1)
  {
    int v6 = *(pthread_mutex_t **)(v3 + 160);
    uint64_t v7 = *(void *)(v3 + 168);
    if (v6) {
      pthread_mutex_lock(v6);
    }
    char v8 = **(unsigned char **)(v3 + 144) != 0;
    unsigned int v9 = *(_DWORD *)(v3 + 8) >> v8;
    if (!v9)
    {
LABEL_693:
      int v367 = *(pthread_mutex_t **)(v3 + 160);
      if (v367) {
        pthread_mutex_unlock(v367);
      }
      uint64_t v366 = 0;
      goto LABEL_696;
    }
    unsigned int v10 = 0;
    int v11 = *(_DWORD *)(v3 + 12);
    do
    {
      uint64_t v12 = (v10 * v11) << v8;
      unsigned int v13 = (v10 * v11 + v11) << v8;
      unsigned int v14 = v12;
      BOOL v15 = v12 < v13;
      if (v12 < v13)
      {
        uint64_t v16 = 0;
        while (*(unsigned char *)(v7 + v12 + v16) == 20)
        {
          if (!(v12 - v13 + ++v16))
          {
            BOOL v15 = 1;
            goto LABEL_31;
          }
        }
        unsigned int v14 = v12 + v16;
      }
      if (v14 == v13)
      {
LABEL_31:
        memset((void *)(v7 + v12), 21, v13 - v12);
        int v25 = *(pthread_mutex_t **)(v3 + 160);
        if (v25) {
          pthread_mutex_unlock(v25);
        }
        unsigned int v26 = *(_DWORD *)(v3 + 12);
        uint64_t v27 = v12 / v26;
        if (v12 != v27 * v26
          || (v491 = *(unsigned int *)(v3 + 12), uint64_t v480 = v13 / v26, v13 != v480 * v26))
        {
LABEL_692:
          uint64_t v366 = 4294958327;
          goto LABEL_696;
        }
        uint64_t v453 = v12;
        unsigned int v443 = v13;
        BOOL v440 = v15;
        if (*(unsigned char *)(v3 + 220) && *(unsigned char *)(v3 + 221))
        {
          uint64_t v28 = *(unsigned int *)(v3 + 12);
          if (*(int *)(v3 + 184) < 1) {
            goto LABEL_679;
          }
          int v29 = *(char **)(v3 + 224);
          int v30 = 1;
          if (!v12 && !v29)
          {
            size_t v31 = (20 * a2[34] + 11 * a2[38]);
            if (v31) {
              int v29 = (char *)malloc_type_malloc(v31, 0x4CF1F002uLL);
            }
            else {
              int v29 = 0;
            }
            int v30 = *(unsigned __int8 *)(v3 + 221);
            *(void *)(v3 + 224) = v29;
          }
          uint64_t v323 = *(void *)(v3 + 80);
          unsigned int v324 = *(_DWORD *)(v323 + 100) + 15;
          uint64_t v325 = *(unsigned int *)(v323 + 136);
          uint64_t v326 = *(unsigned int *)(v323 + 152);
          int v476 = *(char **)(v323 + 32);
          unsigned int v485 = *(char **)(v323 + 40);
          uint64_t v490 = (2 * v326);
          BOOL v494 = &v29[(4 * v325) + (16 * v325) + v490];
          uint64_t v496 = &v29[(4 * v325)];
          int v327 = 16 * v27 - 4;
          if (v491 > v12) {
            int v327 = 0;
          }
          if (*(unsigned char *)v323 && *(unsigned char *)(v323 + 3))
          {
            if (*(unsigned char *)(v323 + 5))
            {
              v476 += v325;
              v496 += v325;
              v485 += v326;
              v494 += v326;
            }
            unsigned int v328 = (v324 & 0xFFFFFFF0) + ~(2 * *(_DWORD *)(v3 + 208));
            LODWORD(v325) = 2 * v325;
          }
          else
          {
            unsigned int v328 = (v324 & 0xFFFFFFF0) + (2 * *(_DWORD *)(v3 + 212) - 4) * *(_DWORD *)(v3 + 208) - 1;
            LODWORD(v490) = v326;
          }
          if (v491 > v12)
          {
            if (*(unsigned char *)(v3 + 222)) {
              int v329 = sub_1BBB16228;
            }
            else {
              int v329 = sub_1BBAF9B20;
            }
            unsigned int v330 = sub_1BBB1643C;
            if (!*(unsigned char *)(v3 + 222)) {
              unsigned int v330 = sub_1BBAF9BF8;
            }
            *(void *)(v3 + 240) = v329;
            *(void *)(v3 + 248) = v330;
          }
          if (v27 >= v480) {
            goto LABEL_679;
          }
          unsigned int v331 = v324 >> 4;
          int v439 = 16 * v325;
          int v448 = 8 * v490;
          uint64_t v332 = v325;
          size_t v471 = (4 * v325);
          size_t v469 = (2 * v490);
          int v333 = v328 - v327;
          if ((int)(v328 - v327) >= 7) {
            int v334 = 7;
          }
          else {
            int v334 = v328 - v327;
          }
          if (v333 >= 9) {
            int v335 = 9;
          }
          else {
            int v335 = v333;
          }
          uint64_t v336 = v331 - 1;
          int v465 = 2 * v334 + 2;
          int v462 = 2 * v335 + 2;
          if (v331 == 1) {
            int v337 = 8;
          }
          else {
            int v337 = 6;
          }
          if (v337 >= v333) {
            int v337 = v333;
          }
          int v473 = 2 * v337;
          int v460 = &v496[(12 * v325)];
          uint64_t v467 = v336;
          int v451 = v30;
          int v488 = v325;
          while (1)
          {
            int v338 = *(_DWORD *)(v3 + 12);
            int v339 = (unsigned __int8 *)(*(void *)(v3 + 152) + 48 * (v338 * v27));
            if (v30)
            {
              if (!v28)
              {
                if (v338) {
                  int v349 = -1;
                }
                else {
                  int v349 = 0;
                }
LABEL_662:
                int v354 = &v494[-v469];
                uint64_t v353 = &v496[-v471];
                uint64_t v356 = v494;
                int v355 = v496;
                int v357 = v473;
                if (v27) {
                  goto LABEL_666;
                }
                goto LABEL_670;
              }
              for (uint64_t i = 0; i != v28; ++i)
              {
                uint64_t v341 = (16 * i);
                unsigned int v342 = &v476[(v439 * v27) + v341];
                unsigned int v343 = &v496[v341];
                BOOL v344 = &v485[(v448 * v27) + v341];
                unsigned int v345 = &v494[v341];
                if (*(_DWORD *)(a1 + 256) >= (int)*(unsigned __int8 *)(*(void *)(a1 + 112)
                                                                      + (i + *(_DWORD *)(a1 + 12) * v27)))
                {
                  for (unsigned int j = 17; j > 1; --j)
                  {
                    *(_OWORD *)unsigned int v343 = *(_OWORD *)v342;
                    v342 += v332;
                    v343 += v332;
                  }
                  unsigned int v347 = 9;
                  uint64_t v28 = v491;
                  do
                  {
                    *(_OWORD *)unsigned int v345 = *(_OWORD *)v344;
                    v344 += v490;
                    v345 += v490;
                    --v347;
                  }
                  while (v347 > 1);
                }
                else
                {
                  sub_1BBB1AE4C((unsigned char *)a1, (uint64_t)v342, (uint64_t)v343, i, v27, v488, v339, 0, 0);
                  sub_1BBB19F40(a1, (uint64_t)v344, (uint64_t)v345, i, v27, v490, v339, 0, 0);
                  uint64_t v28 = v491;
                }
                v339 += 48;
              }
            }
            else
            {
              if (*(unsigned char *)(*(void *)(v3 + 80) + 3)) {
                BOOL v348 = v28 == 0;
              }
              else {
                BOOL v348 = 1;
              }
              if (v348)
              {
                int v349 = v28 - (v338 != v28);
                goto LABEL_664;
              }
              uint64_t v350 = 0;
              do
              {
                if ((v339[16] & 0xC0) + *v339 <= 0x7F) {
                  sub_1BBB1AE4C((unsigned char *)v3, (uint64_t)&v476[(16 * (v325 * v27 + v350))], (uint64_t)&v476[(16 * (v325 * v27 + v350))], v350, v27, v325, v339, 0, 0);
                }
                v339 += 48;
                ++v350;
              }
              while (v28 != v350);
              uint64_t v351 = 0;
              int v352 = (unsigned __int8 *)(*(void *)(v3 + 152) + 48 * (*(_DWORD *)(v3 + 12) * v27));
              do
              {
                if ((v352[16] & 0xC0) + *v352 <= 0x7F) {
                  sub_1BBB19F40(a1, (uint64_t)&v485[(v448 * v27 + 16 * v351)], (uint64_t)&v485[(v448 * v27 + 16 * v351)], v351, v27, v490, v352, 0, 0);
                }
                v352 += 48;
                ++v351;
              }
              while (v28 != v351);
            }
            uint64_t v3 = a1;
            int v349 = v28 - (*(_DWORD *)(a1 + 12) != v28);
            unint64_t v5 = v387;
            int v30 = v451;
            LODWORD(v325) = v488;
            if (v451) {
              goto LABEL_662;
            }
LABEL_664:
            if (v27)
            {
              uint64_t v353 = &v476[((16 * v27 - 4) * v325)];
              int v354 = &v485[((8 * v27 - 2) * v490)];
LABEL_666:
              if (v27 == v467) {
                int v357 = v462;
              }
              else {
                int v357 = v465;
              }
              uint64_t v356 = v354;
              int v355 = v353;
              goto LABEL_670;
            }
            uint64_t v356 = v485;
            int v355 = v476;
            int v357 = v473;
LABEL_670:
            if (v357 >= 1)
            {
              uint64_t v358 = (16 * v349);
              if (*(void *)(v3 + 232)) {
                (*(void (**)(char *, char *, uint64_t, void))(v3 + 248))(v355, v356, v358, 0);
              }
              else {
                (*(void (**)(char *, char *, uint64_t, void))(v3 + 240))(v355, v356, v358, 0);
              }
            }
            if (v30)
            {
              memcpy(&v496[-v471], v460, v471);
              memcpy(&v494[-v469], &v494[(6 * v490)], v469);
            }
            if (++v27 == v480) {
              goto LABEL_679;
            }
          }
        }
        if (!v379)
        {
          sub_1BBB5081C(v3, 0, v491, v12 / v26, v480);
          sub_1BBB50CD8(v3, 0, v491, v27, v480);
          goto LABEL_679;
        }
        *(_DWORD *)(v3 + 184) = 0;
        if (!v491) {
          goto LABEL_679;
        }
        uint64_t v32 = 0;
        int v33 = a2[34];
        while (v27 >= v480)
        {
LABEL_65:
          if (++v32 == v491)
          {
            uint64_t v49 = *(unsigned int *)(v3 + 12);
            unint64_t v5 = v387;
            if (v49)
            {
              uint64_t v50 = 0;
              int v51 = a2[34];
              unsigned int v52 = v13 / v49;
              while (v453 / v49 >= v52)
              {
LABEL_88:
                ++v50;
                unint64_t v5 = v387;
                if (v50 == v49) {
                  goto LABEL_679;
                }
              }
              uint64_t v53 = (16 * v50);
              unsigned int v54 = v453 / v49;
              while (2)
              {
                unsigned int v55 = 0;
                int v56 = *(_DWORD *)(v3 + 12);
                unsigned int v57 = v50 + v56 * v54;
                uint64_t v58 = *(void *)(v3 + 144);
                int v59 = *(unsigned __int8 *)(v58 + v57);
                if (v54 && v59 == 1) {
                  unsigned int v55 = *(unsigned __int8 *)(v58 + v57 - v56) == 2;
                }
                if (!v50) {
                  goto LABEL_78;
                }
                if (v59 == 1)
                {
                  BOOL v60 = 0;
                  BOOL v61 = *(unsigned __int8 *)(v58 + v57 - 1) == 2;
                  goto LABEL_79;
                }
                if (v59 == 2)
                {
                  BOOL v61 = 0;
                  BOOL v60 = *(unsigned __int8 *)(v58 + v57 - 1) == 1;
                }
                else
                {
LABEL_78:
                  BOOL v61 = 0;
                  BOOL v60 = 0;
                }
LABEL_79:
                if (v59 == 2)
                {
                  uint64_t v62 = *(void *)(*(void *)(v3 + 80) + 40)
                      + v53
                      + 8 * (v453 / v49) * *(_DWORD *)(*(void *)(v3 + 80) + 152);
                  unsigned int v63 = ((int)(v54 << 31) >> 31) & v51;
                  int v64 = 2 * v51;
                }
                else
                {
                  uint64_t v65 = *(void *)(v3 + 80);
                  uint64_t v62 = *(void *)(v65 + 40) + v53;
                  unsigned int v63 = 8 * v54 * *(_DWORD *)(v65 + 152);
                  int v64 = v51;
                }
                uint64_t v66 = (unsigned __int8 *)(*(void *)(v3 + 152) + 48 * v57);
                if ((v66[16] & 0xC0) + *v66 <= 0x7F)
                {
                  if (v60) {
                    int v67 = 2;
                  }
                  else {
                    int v67 = 0;
                  }
                  sub_1BBB19F40(v3, v62 + v63, v62 + v63, v50, v54, v64, v66, v55, v67 | v61);
                }
                if (++v54 == v52) {
                  goto LABEL_88;
                }
                continue;
              }
            }
LABEL_679:
            uint64_t v359 = *(pthread_mutex_t **)(v3 + 160);
            if (v359) {
              pthread_mutex_lock(v359);
            }
            if (v440)
            {
              int v360 = (void *)(*(void *)(v3 + 168) + v453);
              size_t v361 = v443 + ~v453 + 1;
              int v362 = 30;
              goto LABEL_683;
            }
            goto LABEL_684;
          }
        }
        uint64_t v34 = (16 * v32);
        int v35 = v27;
        while (1)
        {
          unsigned int v36 = 0;
          int v37 = *(_DWORD *)(v3 + 12);
          unsigned int v38 = v32 + v37 * v35;
          uint64_t v39 = *(void *)(v3 + 144);
          int v40 = *(unsigned __int8 *)(v39 + v38);
          if (v35 && v40 == 1) {
            unsigned int v36 = *(unsigned __int8 *)(v39 + v38 - v37) == 2;
          }
          if (!v32) {
            break;
          }
          if (v40 == 1)
          {
            BOOL v41 = 0;
            BOOL v42 = *(unsigned __int8 *)(v39 + v38 - 1) == 2;
          }
          else
          {
            if (v40 != 2) {
              break;
            }
            BOOL v42 = 0;
            BOOL v41 = *(unsigned __int8 *)(v39 + v38 - 1) == 1;
          }
LABEL_56:
          if (v40 == 2)
          {
            uint64_t v43 = *(void *)(*(void *)(v3 + 80) + 32)
                + v34
                + (16 * v27 * *(_DWORD *)(*(void *)(v3 + 80) + 136));
            unsigned int v44 = (v35 << 31 >> 31) & v33;
            int v45 = 2 * v33;
          }
          else
          {
            uint64_t v46 = *(void *)(v3 + 80);
            uint64_t v43 = *(void *)(v46 + 32) + v34;
            unsigned int v44 = 16 * v35 * *(_DWORD *)(v46 + 136);
            int v45 = v33;
          }
          int v47 = (unsigned __int8 *)(*(void *)(v3 + 152) + 48 * v38);
          if ((v47[16] & 0xC0) + *v47 <= 0x7F)
          {
            if (v41) {
              int v48 = 2;
            }
            else {
              int v48 = 0;
            }
            sub_1BBB1AE4C((unsigned char *)v3, v43 + v44, v43 + v44, v32, v35, v45, v47, v36, v48 | v42);
          }
          if (++v35 == v480) {
            goto LABEL_65;
          }
        }
        BOOL v42 = 0;
        BOOL v41 = 0;
        goto LABEL_56;
      }
      if (*(unsigned char *)(v7 + v14) != 30) {
        unsigned int v10 = *(_DWORD *)(v3 + 8) >> v8;
      }
      ++v10;
    }
    while (v10 < v9);
    int v17 = 0;
    while (1)
    {
      uint64_t v18 = ((v17 * v11) << v8);
      unsigned int v19 = (v17 * v11 + v11) << v8;
      unsigned int v20 = v18;
      BOOL v21 = v18 < v19;
      if (v18 < v19)
      {
        uint64_t v22 = 0;
        int v23 = (v17 * v11 + v11) << v8;
        int v24 = v18 - v19;
        while (*(unsigned char *)(v7 + v18 + v22) == 10)
        {
          if (!(v24 + ++v22))
          {
            int v374 = 1;
            goto LABEL_91;
          }
        }
        unsigned int v20 = v18 + v22;
        unsigned int v19 = (v17 * v11 + v11) << v8;
      }
      if (v20 == v19) {
        break;
      }
      if (*(unsigned __int8 *)(v7 + v20) < 0xAu) {
        int v17 = *(_DWORD *)(v3 + 8) >> v8;
      }
      if (++v17 >= v9) {
        goto LABEL_693;
      }
    }
    int v374 = v21;
    int v23 = v19;
LABEL_91:
    unsigned int v377 = v23;
    memset((void *)(v7 + v18), 11, (v23 - v18));
    int v70 = *(pthread_mutex_t **)(v3 + 160);
    if (v70) {
      pthread_mutex_unlock(v70);
    }
    unsigned int v71 = *(_DWORD *)(v3 + 12);
    unsigned int v389 = v18 / v71;
    if (v18 != v18 / v71 * v71) {
      goto LABEL_692;
    }
    int v407 = *(_DWORD *)(v3 + 12);
    unsigned int v380 = v377 / v71;
    if (v377 != v377 / v71 * v71) {
      goto LABEL_692;
    }
    uint64_t v376 = v18;
    if (!v379) {
      break;
    }
    int v382 = *(unsigned __int8 *)(v3 + 221);
    if (v389 >= v380) {
      goto LABEL_687;
    }
    int v381 = &byte_1BBB93790[dword_1E9F82E5C];
    int v493 = 4 * v71;
    uint64_t v385 = *(void *)(v3 + 48);
    uint64_t v495 = *(void *)v3;
    uint64_t v72 = *(void *)(v3 + 72);
    uint64_t v386 = *(void *)(v3 + 32);
    uint64_t v468 = *(void *)(a3 + 104);
    int v383 = 2 * v71;
    uint64_t v73 = *(void *)(v3 + 152) + 48 * v18;
    uint64_t v452 = v72;
    while (2)
    {
      uint64_t v403 = v73;
      uint64_t v396 = (int)((v383 * (v389 >> 1)) | v389 & 1);
      int v470 = 4 * v389;
      int v74 = 0;
      unsigned __int8 v75 = 32;
      while (2)
      {
        unsigned int v76 = v74 + v389 * v407;
        uint64_t v77 = (int)v76;
        if (v74) {
          int v78 = v76 - 1;
        }
        else {
          int v78 = v389 * v407;
        }
        uint64_t v79 = *(void *)(v3 + 144);
        int v412 = v74 + v389 * v407;
        int v80 = *(unsigned __int8 *)(v79 + (int)v76);
        BOOL v405 = v80 == 2;
        int v394 = v74;
        if (v74 && v80 == 1)
        {
          LODWORD(v415) = 0;
          HIDWORD(v415) = *(unsigned __int8 *)(v79 + v78) == 2;
        }
        else
        {
          HIDWORD(v415) = 0;
          if (v74)
          {
            LODWORD(v415) = 0;
            if (v80 == 2) {
              BOOL v415 = *(unsigned __int8 *)(v79 + (int)v76 - 1) == 1;
            }
          }
          else
          {
            LODWORD(v415) = 0;
          }
        }
        if (v389 > 1)
        {
          if (v389)
          {
            signed int v81 = v396;
            int v96 = v396 - 1;
            if (v80 == 2) {
              int v96 = v396 - v383;
            }
            int v456 = v96;
            if (v80 == 2) {
              uint64_t v83 = v76 - v383;
            }
            else {
              uint64_t v83 = v76 - v407;
            }
            int v97 = v493;
            if (v80 == 2) {
              int v97 = 20 * v407;
            }
            int v406 = v97;
            BOOL v95 = 0;
          }
          else
          {
            unsigned int v84 = v76 - v383;
            int v85 = *(unsigned __int8 *)(v79 + v76 - v383);
            signed int v81 = v396;
            int v86 = v396 - v383;
            if (v85 == 2) {
              int v87 = v396 - v383;
            }
            else {
              int v87 = v86 + 1;
            }
            if (v85 == 2) {
              unsigned int v88 = v84;
            }
            else {
              unsigned int v88 = v412 - v407;
            }
            if (v85 == 2) {
              int v89 = 20 * v407;
            }
            else {
              int v89 = v493;
            }
            BOOL v90 = v85 == 2;
            BOOL v91 = v85 == 2;
            if (v85 == 2) {
              int v92 = v396 - v383;
            }
            else {
              int v92 = v86 + 1;
            }
            if (v91)
            {
              int v93 = 20 * v407;
            }
            else
            {
              unsigned int v84 = v412 - v407;
              int v93 = v493;
            }
            if (v80 != 2) {
              int v92 = v87;
            }
            int v456 = v92;
            if (v80 == 2) {
              uint64_t v83 = v84;
            }
            else {
              uint64_t v83 = v88;
            }
            if (v80 == 2) {
              int v94 = v93;
            }
            else {
              int v94 = v89;
            }
            int v406 = v94;
            BOOL v95 = v80 != 2 && v90;
          }
          BOOL v454 = v95;
        }
        else
        {
          if (v389)
          {
            signed int v81 = v396;
            int v82 = v396 - 1;
            if (v80 == 2) {
              int v82 = v396;
            }
            int v456 = v82;
            if (v80 == 2) {
              uint64_t v83 = v76;
            }
            else {
              uint64_t v83 = v76 - v407;
            }
            BOOL v454 = 0;
          }
          else
          {
            BOOL v454 = 0;
            signed int v81 = v396;
            int v456 = v396;
            uint64_t v83 = v74 + v389 * v407;
          }
          int v406 = v493;
        }
        uint64_t v457 = v83;
        BOOL v388 = v80 != *(unsigned __int8 *)(v79 + (int)v83);
        if (v80 == 2) {
          int v98 = 1;
        }
        else {
          int v98 = 3;
        }
        unsigned int v482 = v98;
        if (v394) {
          signed int v99 = v81 - 2;
        }
        else {
          signed int v99 = v81;
        }
        unsigned int v100 = HIDWORD(v415) | v415;
        if (v415)
        {
          if (v394) {
            signed int v99 = (v81 & 0xFFFFFFFE) - 2;
          }
          else {
            signed int v99 = v81 & 0xFFFFFFFE;
          }
          if (v394) {
            int v78 = (v389 & 0xFFFFFFFE) * v407 - 1 + v394;
          }
          else {
            int v78 = (v389 & 0xFFFFFFFE) * v407;
          }
          unsigned int v101 = v389 & 0xFFFFFFFE;
        }
        else
        {
          unsigned int v101 = v389;
        }
        unsigned int v431 = v101;
        int v102 = *(unsigned __int8 *)(*(void *)(v3 + 136) + v77);
        *(_DWORD *)(v403 + 16) = 33686018;
        if (v102) {
          int v103 = 0;
        }
        else {
          int v103 = 33686018;
        }
        *(_DWORD *)uint64_t v403 = 33686018;
        *(_DWORD *)(v403 + 4) = v103;
        *(_DWORD *)(v403 + 8) = 33686018;
        *(_DWORD *)(v403 + 12) = v103;
        *(_DWORD *)(v403 + 20) = v103;
        *(_DWORD *)(v403 + 24) = 33686018;
        *(_DWORD *)(v403 + 28) = v103;
        int v104 = *(unsigned __int16 *)(v72 + 2 * v77);
        if (*(unsigned char *)(v385 + 12 * *(unsigned __int16 *)(v72 + 2 * v77) + 9) == 1)
        {
          *(unsigned char *)uint64_t v403 = 0x80;
          goto LABEL_197;
        }
        int v409 = *(unsigned __int8 *)(v385 + 12 * *(unsigned __int16 *)(v72 + 2 * v77) + 9);
        int v408 = *(unsigned __int16 *)(v72 + 2 * v77);
        uint64_t v421 = (unsigned char *)(v403 + 16);
        unint64_t v105 = *(void *)(v468 + 8 * v396);
        int v106 = *(unsigned __int16 *)(v72 + 2 * v78);
        int v402 = *(unsigned __int16 *)(v72 + 2 * (int)v457);
        BOOL v108 = v5 <= v105 && v105 <= v395;
        if (!(v382 | v108))
        {
          unsigned int v113 = bswap32(*(_DWORD *)(v386 + 4 * v77));
          int v466 = *(unsigned __int8 *)(*(void *)(v3 + 136) + v77);
          if (*(unsigned char *)(*(void *)(v3 + 136) + v77))
          {
            int8x16_t v114 = vbicq_s8((int8x16_t)xmmword_1BBB6FE50, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v113), (int8x16_t)xmmword_1BBB6FE40)));
            int8x8_t v69 = (int8x8_t)vextq_s8(v114, v114, 8uLL).u64[0];
            int32x2_t v68 = (int32x2_t)vorr_s8(*(int8x8_t *)v114.i8, v69);
            v113 |= v68.i32[0] | v68.i32[1];
          }
          char v489 = v381[*(unsigned __int8 *)(v385 + 12 * *(unsigned __int16 *)(v72 + 2 * v77) + 8)];
          int v404 = 4 * v394;
          BOOL v116 = v409 != 2 || v106 == v104;
          BOOL v426 = v116;
          uint64_t v417 = (_OWORD *)(v403 + 32);
          int v419 = (v113 >> 4) & 0xFFF0000 | v113 & 0xFFF0000;
          unsigned int v117 = 0;
          __int16 v391 = *(_WORD *)(v105 + 10);
          unsigned int v401 = v113 >> 30;
          int v399 = (v113 >> 28) & 3;
          int v492 = (v113 >> 4) & 0xFFF0FFF | v113;
          int v397 = (v113 >> 4) & 0xFFF0FFF | v113 & 0xFFFFFFF;
          signed int v393 = v482 + 1;
          unsigned int v118 = 4;
          int v119 = (_OWORD *)v403;
          int v481 = v80;
          uint64_t v479 = v77;
          while (1)
          {
            unsigned int v477 = v117;
            if (v117)
            {
              v78 += v407;
              ++v431;
              if (*(unsigned char *)(*(void *)(v3 + 136) + v77))
              {
                int32x2_t v68 = (int32x2_t)33686018;
                *uint64_t v417 = xmmword_1BBB6FE60;
              }
              else
              {
                *(void *)uint64_t v417 = 0x202020202020202;
                *(void *)(v403 + 40) = 0x202020202020202;
              }
              unsigned int v118 = 1;
              signed int v99 = (v396 & 0xFFFFFFFE) - 1;
              int v119 = (_OWORD *)(v403 + 32);
            }
            unint64_t v120 = *(void *)(v468 + 8 * v99);
            if (v492)
            {
              if (v419 == 268369920) {
                unsigned int v118 = 1;
              }
              int v430 = -1;
              int v121 = v419 == 268369920;
            }
            else if ((v391 & 0xFFFD) == 0x100)
            {
              int v430 = 0;
              int v121 = 0;
              int32x2_t v68 = (int32x2_t)0x2020202002020202;
              *int v119 = xmmword_1BBB6FE70;
              unsigned int v118 = 1;
            }
            else
            {
              int v121 = 0;
              int v430 = -1;
            }
            if (!v426)
            {
              unsigned int v100 = 0;
LABEL_240:
              unsigned int v131 = 0;
              int v132 = 0;
              *(unsigned char *)int v119 = 32;
LABEL_241:
              unsigned int v130 = v492;
              goto LABEL_253;
            }
            if (!v404) {
              goto LABEL_240;
            }
            if (v5 <= v120 && v120 <= v395)
            {
              unsigned int v131 = 0;
              *(_DWORD *)int v119 = 67372036;
              int v132 = 1;
              goto LABEL_241;
            }
            unsigned int v123 = bswap32(*(_DWORD *)(v386 + 4 * v78));
            if ((v123 & 0xCC0000) != 0) {
              int v124 = 13382400;
            }
            else {
              int v124 = 0;
            }
            if ((v123 & 0x330000) != 0) {
              int v125 = 3342387;
            }
            else {
              int v125 = 0;
            }
            int v126 = v125 | v124 | v123;
            if (*(unsigned char *)(*(void *)(v3 + 136) + v78)) {
              unsigned int v123 = v126;
            }
            if (HIDWORD(v415))
            {
              unsigned int v131 = 0;
              int v127 = (v123 >> 18) & 3;
              unsigned int v128 = HIWORD(v123) & 3;
              if ((v389 & 1) == 0) {
                unsigned int v128 = v127;
              }
              unsigned int v129 = dword_1BBB70260[v128];
            }
            else
            {
              if (v415)
              {
                unsigned int v131 = 0;
                unsigned int v133 = v401;
                if (v477) {
                  unsigned int v133 = v399;
                }
                int v134 = v397 | (dword_1BBB70260[v133] << 28);
                unsigned int v129 = HIWORD(v123);
                goto LABEL_248;
              }
              unsigned int v131 = 0;
              unsigned int v129 = HIWORD(v123);
            }
            int v134 = v492;
LABEL_248:
            unsigned int v130 = v134 | (v129 << 28);
            int v135 = v100;
            while (v131 < v118)
            {
              if ((v131 & v466) != 0)
              {
                int v132 = 0;
LABEL_252:
                *(unsigned char *)int v119 = 32;
                goto LABEL_253;
              }
              int v132 = v430 | (v130 >> 28) | (v131 == 0);
              if (!v132) {
                goto LABEL_252;
              }
              int v132 = 1;
              if (v130 >> 28 == 15) {
                goto LABEL_253;
              }
              uint64_t v136 = 0;
              unsigned int v486 = v131 + v404;
              int v483 = v131 + v404 - 1;
              unsigned int v411 = v131;
              if (v131) {
                BOOL v137 = 0;
              }
              else {
                BOOL v137 = v415;
              }
              int v138 = HIDWORD(v415);
              if (v131) {
                int v138 = 0;
              }
              int v463 = v138;
              unsigned int v139 = v130;
              int v424 = v78;
              unsigned int v422 = v100;
              signed int v446 = v99;
              unsigned int v444 = v118;
              BOOL v441 = v119;
              int v437 = v121;
              unsigned int v435 = v130;
              int v449 = v135;
              BOOL v433 = v137;
              do
              {
                if (v137)
                {
                  unsigned int v140 = v470 + 2 * v477 + (v136 >> 1);
                  unsigned int v141 = 4 * v431 + v136;
                  if ((v139 & 0x80000000) == 0) {
                    goto LABEL_271;
                  }
                }
                else
                {
                  unsigned int v140 = v470 + v136;
                  if (!v463)
                  {
                    unsigned int v141 = v470 + v136;
                    if ((v139 & 0x80000000) != 0) {
                      goto LABEL_399;
                    }
LABEL_271:
                    uint64_t v142 = *(void *)(v495 + 8 * (v486 + v140 * v493));
                    uint64_t v143 = *(void *)(v495 + 8 * (v483 + v141 * v493));
                    if (v142 == v143)
                    {
                      LOBYTE(v197) = 0;
                    }
                    else
                    {
                      __int16 v144 = *(_WORD *)v142;
                      __int16 v145 = *(_WORD *)(v142 + 2);
                      unsigned int v146 = *(unsigned __int16 *)(v142 + 12);
                      __int16 v147 = *(_WORD *)v143;
                      __int16 v148 = *(_WORD *)(v143 + 2);
                      __int16 v150 = *(_WORD *)v142 - *(_WORD *)v143;
                      LOBYTE(v149) = v150;
                      int v151 = (__int16)(v145 - v148);
                      unsigned int v152 = *(unsigned __int16 *)(v143 + 12);
                      LOWORD(v153) = v146 - v152;
                      if (v150 >= 0)
                      {
                        unsigned __int8 v154 = HIBYTE(v150);
                      }
                      else
                      {
                        int v149 = -(unsigned __int16)(v144 - v147);
                        unsigned __int8 v154 = (unsigned __int16)-v150 >> 8;
                      }
                      if (v151 < 0) {
                        int v155 = -(unsigned __int16)(v145 - v148);
                      }
                      else {
                        LOBYTE(v155) = v145 - v148;
                      }
                      if (v151 >= 0) {
                        char v156 = (unsigned __int16)(v145 - v148) >> 8;
                      }
                      else {
                        char v156 = (unsigned __int16)(v148 - v145) >> 8;
                      }
                      unsigned int v157 = -(unsigned __int16)v153 >> 8;
                      if ((__int16)(v146 - v152) >= 0)
                      {
                        LOBYTE(v158) = (unsigned __int16)(v146 - v152) >> 8;
                      }
                      else
                      {
                        int v153 = -(unsigned __int16)(v146 - v152);
                        LOBYTE(v158) = v157;
                      }
                      if ((v489 & 2) != 0)
                      {
                        if (v154) {
                          BOOL v198 = 1;
                        }
                        else {
                          BOOL v198 = v149 > 3u;
                        }
                        if (!v198 && v156 == 0)
                        {
                          if ((_BYTE)v158) {
                            BOOL v200 = 0;
                          }
                          else {
                            BOOL v200 = v482 >= v155;
                          }
                          int v197 = !v200;
                          if ((_BYTE)v153) {
                            int v197 = 1;
                          }
                          LOBYTE(v135) = v449;
                          if (!v449)
                          {
                            if (v197) {
                              BOOL v201 = 0;
                            }
                            else {
                              BOOL v201 = v80 == 2;
                            }
                            signed int v99 = v446;
                            unsigned int v118 = v444;
                            int v119 = v441;
                            int v121 = v437;
                            unsigned int v130 = v435;
                            BOOL v137 = v433;
                            if (v201) {
                              LOBYTE(v197) = (*(unsigned char *)(v142 + 8) ^ *(unsigned char *)(v143 + 8)) & 1;
                            }
                            goto LABEL_398;
                          }
                          signed int v99 = v446;
                          unsigned int v118 = v444;
                          int v119 = v441;
                          int v121 = v437;
                          unsigned int v130 = v435;
                        }
                        else
                        {
                          LOBYTE(v197) = 1;
                          signed int v99 = v446;
                          unsigned int v118 = v444;
                          int v119 = v441;
                          int v121 = v437;
                          unsigned int v130 = v435;
                          LOBYTE(v135) = v449;
                        }
                        BOOL v137 = v433;
                      }
                      else
                      {
                        __int16 v159 = *(_WORD *)(v142 + 4);
                        __int16 v160 = *(_WORD *)(v142 + 6);
                        __int16 v161 = *(_WORD *)(v143 + 4);
                        __int16 v162 = *(_WORD *)(v143 + 6);
                        int v163 = *(_WORD *)(v143 + 12);
                        unsigned int v164 = -(unsigned __int16)(v160 - v162) >> 8;
                        if ((__int16)(v160 - v162) < 0)
                        {
                          int v165 = -(unsigned __int16)(v160 - v162);
                        }
                        else
                        {
                          LOBYTE(v164) = (unsigned __int16)(v160 - v162) >> 8;
                          LOBYTE(v165) = v160 - v162;
                        }
                        char v166 = (unsigned __int16)(v159 - v161) >> 8;
                        if ((__int16)(v159 - v161) >= 0)
                        {
                          LOBYTE(v167) = v159 - v161;
                        }
                        else
                        {
                          char v166 = (unsigned __int16)(v161 - v159) >> 8;
                          int v167 = -(unsigned __int16)(v159 - v161);
                        }
                        unsigned int v428 = *(unsigned __int8 *)(v142 + 8);
                        unsigned int v429 = *(unsigned __int8 *)(v142 + 9);
                        int v168 = (v428 >> 4) & 2 | (v429 >> 5);
                        if (v168) {
                          int v169 = 0;
                        }
                        else {
                          int v169 = -1;
                        }
                        if (v168 == 1) {
                          int v170 = -1;
                        }
                        else {
                          int v170 = v169;
                        }
                        if (v168 == 2)
                        {
                          int v169 = -1;
                          char v171 = -1;
                        }
                        else
                        {
                          char v171 = v170;
                        }
                        int v474 = *(_WORD *)(v142 + 12);
                        if (v474 != v163)
                        {
                          unsigned int v172 = v146 - (bswap32(v152) >> 16);
                          LOWORD(v149) = v144 - v161;
                          int v173 = (__int16)(v144 - v161);
                          unsigned __int16 v174 = v145 - v162;
                          int v175 = (__int16)(v145 - v162);
                          unsigned __int16 v176 = v159 - v147;
                          int v177 = (__int16)(v159 - v147);
                          __int16 v178 = v160 - v148;
                          int v179 = (__int16)(v160 - v148);
                          int v180 = (unsigned __int16)(v160 - v148);
                          unsigned int v181 = -(unsigned __int16)v149 >> 8;
                          if (v173 >= 0)
                          {
                            unsigned __int8 v154 = BYTE1(v149);
                          }
                          else
                          {
                            int v149 = -(unsigned __int16)v149;
                            unsigned __int8 v154 = v181;
                          }
                          if (v175 < 0) {
                            int v155 = -v174;
                          }
                          else {
                            LOBYTE(v155) = v174;
                          }
                          char v156 = v175 >= 0 ? HIBYTE(v174) : (unsigned __int16)-v174 >> 8;
                          if (v177 < 0) {
                            int v167 = -v176;
                          }
                          else {
                            LOBYTE(v167) = v176;
                          }
                          char v166 = v177 >= 0 ? HIBYTE(v176) : (unsigned __int16)-v176 >> 8;
                          if (v179 < 0) {
                            int v165 = -v180;
                          }
                          else {
                            LOBYTE(v165) = v178;
                          }
                          LOBYTE(v164) = v179 >= 0 ? HIBYTE(v178) : (unsigned __int16)-v178 >> 8;
                          if ((v172 & 0x8000u) != 0) {
                            int v153 = -(unsigned __int16)v172;
                          }
                          else {
                            LOBYTE(v153) = v172;
                          }
                          unsigned int v158 = -(unsigned __int16)v172 >> 8;
                          if ((v172 & 0x8000u) == 0) {
                            LOBYTE(v158) = BYTE1(v172);
                          }
                        }
                        int v80 = v481;
                        uint64_t v77 = v479;
                        unsigned int v182 = v146 >> 8;
                        unsigned int v183 = v152 >> 8;
                        unsigned int v184 = v169 & 3;
                        unsigned int v185 = v169 & v482;
                        char v186 = v156 & v170;
                        unsigned __int8 v187 = v155 & v170;
                        char v188 = v166 & v169;
                        unsigned __int8 v189 = v167 & v169;
                        char v190 = v164 & v169;
                        unsigned __int8 v191 = v165 & v169;
                        char v192 = v158 & v171;
                        char v193 = v153 & v171;
                        unsigned int v194 = (v149 & v170);
                        BOOL v196 = (v154 & v170) != 0 || (v170 & 3u) < v194;
                        if (v186) {
                          BOOL v196 = 1;
                        }
                        if ((v170 & v482) < v187) {
                          BOOL v196 = 1;
                        }
                        if (v188) {
                          BOOL v196 = 1;
                        }
                        if (v184 < v189) {
                          BOOL v196 = 1;
                        }
                        if (v190) {
                          BOOL v196 = 1;
                        }
                        if (v185 < v191) {
                          BOOL v196 = 1;
                        }
                        if ((v474 - v183) | (v182 - v163))
                        {
                          int v197 = v196 || v192 != 0 || v193 != 0;
                          int v78 = v424;
                          unsigned int v100 = v422;
                          signed int v99 = v446;
                          unsigned int v118 = v444;
                          int v119 = v441;
                          int v121 = v437;
                          unsigned int v130 = v435;
                          int v135 = v449;
                        }
                        else
                        {
                          int v202 = sub_1BBB1BC1C((__int16 *)v142, (__int16 *)v143, v393, v405, v449, v68, (int32x2_t)v69);
                          int v135 = v449;
                          int v197 = v202;
                          int v78 = v424;
                          unsigned int v100 = v422;
                          signed int v99 = v446;
                          unsigned int v118 = v444;
                          int v119 = v441;
                          int v121 = v437;
                          unsigned int v130 = v435;
                        }
                        BOOL v137 = v433;
                        if (!v135 && !v197 && v481 == 2)
                        {
                          int v204 = *(unsigned char *)(v143 + 8) & 1;
                          int v205 = *(unsigned char *)(v143 + 9) & 1;
                          int v206 = v428 & 1;
                          int v207 = v429 & 1;
                          BOOL v208 = v474 == v163 && v206 == v204 && v207 == v205 && v182 == v183
                              || v206 == v205 && v207 == v204 && v474 == v183 && v182 == v163;
                          LOBYTE(v197) = !v208;
                        }
                      }
                    }
LABEL_398:
                    *((unsigned char *)v119 + v136) = v197 | v135;
                    goto LABEL_399;
                  }
                  unsigned int v141 = ((2 * (v389 & 1)) & 3 | (4 * v431)) + (v136 >> 1);
                  if ((v139 & 0x80000000) == 0) {
                    goto LABEL_271;
                  }
                }
LABEL_399:
                v139 *= 2;
                ++v136;
              }
              while (v136 != 4);
              int v132 = 1;
              unint64_t v5 = v387;
              uint64_t v72 = v452;
              unsigned int v131 = v411;
LABEL_253:
              int v135 = 0;
              v121 |= v132;
              *(unsigned char *)v119 |= (32 * v132) ^ 0x20;
              int v119 = (_OWORD *)((char *)v119 + 4);
              v130 *= 16;
              ++v131;
            }
            unsigned int v117 = v477 + 1;
            uint64_t v3 = a1;
            if (v477 >= v100)
            {
              BOOL v213 = v409 != 2 || v402 == v408;
              BOOL v410 = v213;
              unsigned int v400 = v412 - v407;
              *(unsigned char *)v403 |= ((_BYTE)v121 << 6) ^ 0x40;
              char v398 = (_OWORD *)(v403 + 36);
              int v390 = v391 & 0xFFFE;
              BOOL v216 = v389 == 1 && v80 == 2 || v470 == 0;
              BOOL v392 = v216;
              if (v388 || v405) {
                char v217 = 3;
              }
              else {
                char v217 = 4;
              }
              unsigned __int8 v384 = v217;
              unsigned int v218 = 0;
              unsigned int v219 = 4;
              int v220 = (_OWORD *)(v403 + 16);
              uint64_t v221 = v457;
              while (1)
              {
                unsigned int v464 = v218;
                if (v218)
                {
                  unsigned int v219 = 1;
                  if (*(unsigned char *)(*(void *)(v3 + 136) + v77))
                  {
                    int32x2_t v68 = (int32x2_t)33686018;
                    uint64_t v222 = (_OWORD *)(v403 + 36);
                    _OWORD *v398 = xmmword_1BBB6FE60;
                  }
                  else
                  {
                    uint64_t v222 = (_OWORD *)(v403 + 36);
                    *(void *)char v398 = 0x202020202020202;
                    *(void *)(v403 + 44) = 0x202020202020202;
                  }
                  int v456 = v396 - v383 + 1;
                  uint64_t v221 = v400;
                  int v406 = v493;
                  int v220 = v222;
                }
                unint64_t v223 = *(void *)(v468 + 8 * v456);
                if (v492)
                {
                  if ((v492 & 0xFFF) == 0xFFF) {
                    unsigned int v219 = 1;
                  }
                  int v423 = -1;
                  int v224 = (v492 & 0xFFF) == 4095;
                }
                else if (v390 == 256)
                {
                  int v423 = 0;
                  int v224 = 0;
                  int32x2_t v68 = (int32x2_t)0x2020202002020202;
                  *int v220 = xmmword_1BBB6FE70;
                  unsigned int v219 = 1;
                }
                else
                {
                  int v224 = 0;
                  int v423 = -1;
                }
                if (!v410)
                {
                  BOOL v454 = 0;
LABEL_449:
                  unsigned int v225 = 0;
                  int v233 = 0;
                  *(unsigned char *)int v220 = 32;
LABEL_450:
                  unsigned int v231 = v492 << 16;
                  goto LABEL_455;
                }
                if (v392) {
                  goto LABEL_449;
                }
                unsigned int v225 = 0;
                if (v5 <= v223 && v223 <= v395)
                {
                  *(_DWORD *)int v220 = 16843009 * v384;
                  int v233 = 1;
                  goto LABEL_450;
                }
                unsigned int v227 = bswap32(*(_DWORD *)(v386 + 4 * (int)v221));
                if ((v227 & 0x33000000) != 0) {
                  int v228 = 855638220;
                }
                else {
                  int v228 = 0;
                }
                if ((v227 & 0x330000) != 0) {
                  int v229 = 3342387;
                }
                else {
                  int v229 = 0;
                }
                int v230 = v229 | v228 | v227;
                if (*(unsigned char *)(*(void *)(v3 + 136) + (int)v221)) {
                  unsigned int v227 = v230;
                }
                unsigned int v231 = (v492 << 16) | (v227 << 28);
                int v232 = v388;
LABEL_451:
                if (v225 < v219) {
                  break;
                }
                *v421 |= ((_BYTE)v224 << 6) ^ 0x40;
                unsigned int v218 = v464 + 1;
                if (v464 >= v454) {
                  goto LABEL_197;
                }
              }
              if ((v225 & v466) != 0)
              {
                int v233 = 0;
LABEL_454:
                *(unsigned char *)int v220 = 32;
                goto LABEL_455;
              }
              int v233 = v423 | (v231 >> 28) | (v225 == 0);
              if (!v233) {
                goto LABEL_454;
              }
              int v233 = 1;
              if (v231 >> 28 == 15) {
                goto LABEL_455;
              }
              uint64_t v234 = 0;
              int v487 = v404 + (v225 + v470) * v493;
              int v235 = v406;
              if (v225) {
                int v235 = v493;
              }
              int v484 = v235;
              unsigned int v236 = v231;
              uint64_t v458 = v221;
              unsigned int v445 = v219;
              uint64_t v447 = v220;
              int v442 = v224;
              unsigned int v438 = v225;
              unsigned int v436 = v231;
              int v450 = v232;
              while (2)
              {
                if ((v236 & 0x80000000) == 0)
                {
                  float v237 = *(__int16 **)(v495 + 8 * (v487 + v234));
                  float v238 = *(__int16 **)(v495 + 8 * (v487 + v234 - v484));
                  if (v237 == v238)
                  {
                    LOBYTE(v271) = 0;
                    goto LABEL_599;
                  }
                  __int16 v240 = *v237 - *v238;
                  LOBYTE(v239) = v240;
                  LOWORD(v241) = v237[1];
                  __int16 v242 = v238[1];
                  int v243 = (__int16)(v241 - v242);
                  __int16 v244 = v237[2];
                  __int16 v245 = v238[2];
                  int v246 = (__int16)(v244 - v245);
                  __int16 v247 = v237[3];
                  __int16 v248 = v238[3];
                  int v249 = (__int16)(v247 - v248);
                  unsigned int v250 = (unsigned __int16)v237[4];
                  __int16 v251 = v238[4];
                  int v252 = (__int16)(v250 - v251);
                  if (v240 >= 0)
                  {
                    char v253 = HIBYTE(v240);
                  }
                  else
                  {
                    int v239 = -(unsigned __int16)(*v237 - *v238);
                    char v253 = (unsigned __int16)-v240 >> 8;
                  }
                  unsigned int v254 = (unsigned __int16)v237[6];
                  unsigned int v255 = (unsigned __int16)v238[6];
                  if (v243 < 0) {
                    int v256 = -(unsigned __int16)(v241 - v242);
                  }
                  else {
                    LOBYTE(v256) = v241 - v242;
                  }
                  unsigned __int8 v472 = v256;
                  if (v243 >= 0) {
                    char v257 = (unsigned __int16)(v241 - v242) >> 8;
                  }
                  else {
                    char v257 = (unsigned __int16)(v242 - v241) >> 8;
                  }
                  if (v246 < 0) {
                    int v258 = -(unsigned __int16)(v244 - v245);
                  }
                  else {
                    LOBYTE(v258) = v244 - v245;
                  }
                  if (v246 >= 0) {
                    char v259 = (unsigned __int16)(v244 - v245) >> 8;
                  }
                  else {
                    char v259 = (unsigned __int16)(v245 - v244) >> 8;
                  }
                  BOOL v260 = v249 < 0;
                  __int16 v261 = v254 - v255;
                  if (v249 < 0) {
                    int v262 = -(unsigned __int16)(v247 - v248);
                  }
                  else {
                    LOBYTE(v262) = v247 - v248;
                  }
                  if (v260) {
                    unsigned int v263 = -(unsigned __int16)(v247 - v248) >> 8;
                  }
                  else {
                    LOBYTE(v263) = (unsigned __int16)(v247 - v248) >> 8;
                  }
                  if (v252 < 0) {
                    int v264 = -(unsigned __int16)(v250 - v251);
                  }
                  else {
                    LOBYTE(v264) = v250 - v251;
                  }
                  if (v252 >= 0) {
                    char v265 = (unsigned __int16)(v250 - v251) >> 8;
                  }
                  else {
                    char v265 = (unsigned __int16)(v251 - v250) >> 8;
                  }
                  if (v261 < 0) {
                    int v266 = -(unsigned __int16)(v254 - v255);
                  }
                  else {
                    LOBYTE(v266) = v254 - v255;
                  }
                  if (v261 >= 0) {
                    char v267 = (unsigned __int16)(v254 - v255) >> 8;
                  }
                  else {
                    char v267 = (unsigned __int16)(v255 - v254) >> 8;
                  }
                  if ((v489 & 2) == 0)
                  {
                    __int16 v413 = v237[3];
                    char v414 = v263;
                    char v416 = v262;
                    unsigned int v461 = (unsigned __int16)v238[4];
                    char v459 = v238[4];
                    int v268 = (v237[4] >> 4) & 2 | (v250 >> 13);
                    if (v268) {
                      int v269 = 0;
                    }
                    else {
                      int v269 = -1;
                    }
                    if (v268 == 1) {
                      int v270 = -1;
                    }
                    else {
                      int v270 = v269;
                    }
                    if (v268 == 2)
                    {
                      int v270 = 0;
                      char v425 = 0;
                      int v269 = 255;
                      char v427 = -1;
                    }
                    else
                    {
                      char v425 = v269;
                      char v427 = v270;
                    }
                    char v274 = v257;
                    char v275 = v253;
                    __int16 v276 = *v237;
                    __int16 v277 = *v238;
                    unsigned int v478 = v254 >> 8;
                    unsigned int v475 = v255 >> 8;
                    unsigned int v432 = v269 & 3;
                    char v420 = v237[4];
                    char v418 = HIBYTE(v237[4]);
                    unsigned int v434 = v269 & v482;
                    if (v237[6] == v238[6])
                    {
                      uint64_t v72 = v452;
                      int v278 = v481;
                      uint64_t v77 = v479;
                      uint64_t v221 = v458;
                      int v232 = v450;
                      char v279 = v238[4];
                      int v280 = v237[6];
                      int v281 = v238[6];
                      char v282 = v472;
                      char v283 = v425;
                      char v284 = v259;
                      LOBYTE(v285) = v416;
                      char v286 = v414;
                      LOBYTE(v287) = v266;
                    }
                    else
                    {
                      int v264 = v250 - (bswap32(v461) >> 16);
                      LOWORD(v239) = v276 - v245;
                      int v288 = (__int16)(v276 - v245);
                      __int16 v289 = v241 - v248;
                      int v290 = (__int16)(v241 - v248);
                      LOWORD(v258) = v244 - v277;
                      int v291 = (__int16)(v244 - v277);
                      unsigned __int16 v292 = v413 - v242;
                      int v293 = (__int16)(v413 - v242);
                      unsigned int v294 = v254 - (bswap32(v255) >> 16);
                      int v295 = (__int16)v294;
                      unsigned int v296 = -(unsigned __int16)v239 >> 8;
                      if (v288 >= 0)
                      {
                        char v275 = BYTE1(v239);
                      }
                      else
                      {
                        int v239 = -(unsigned __int16)v239;
                        char v275 = v296;
                      }
                      if (v290 < 0) {
                        int v241 = -(unsigned __int16)(v241 - v248);
                      }
                      else {
                        LOBYTE(v241) = v241 - v248;
                      }
                      if (v290 >= 0) {
                        char v274 = HIBYTE(v289);
                      }
                      else {
                        char v274 = (unsigned __int16)-v289 >> 8;
                      }
                      unsigned int v297 = -(unsigned __int16)v258 >> 8;
                      if (v291 >= 0)
                      {
                        char v298 = BYTE1(v258);
                      }
                      else
                      {
                        int v258 = -(unsigned __int16)v258;
                        char v298 = v297;
                      }
                      char v286 = HIBYTE(v292);
                      if (v293 < 0) {
                        int v285 = -v292;
                      }
                      else {
                        LOBYTE(v285) = v292;
                      }
                      if (v293 < 0) {
                        char v286 = (unsigned __int16)-v292 >> 8;
                      }
                      unsigned int v299 = -(unsigned __int16)v264 >> 8;
                      if ((v264 & 0x8000u) == 0)
                      {
                        char v265 = BYTE1(v264);
                      }
                      else
                      {
                        int v264 = -(unsigned __int16)v264;
                        char v265 = v299;
                      }
                      char v284 = v298;
                      char v300 = BYTE1(v294);
                      if ((v294 & 0x8000u) != 0) {
                        int v287 = -(unsigned __int16)v294;
                      }
                      else {
                        LOBYTE(v287) = v294;
                      }
                      unsigned int v301 = -(unsigned __int16)v294 >> 8;
                      if (v295 >= 0) {
                        char v267 = v300;
                      }
                      else {
                        char v267 = v301;
                      }
                      char v282 = v241;
                      uint64_t v72 = v452;
                      int v278 = v481;
                      uint64_t v77 = v479;
                      uint64_t v221 = v458;
                      int v232 = v450;
                      char v279 = v238[4];
                      int v280 = v237[6];
                      int v281 = v238[6];
                      char v283 = v425;
                    }
                    char v302 = v275 & v270;
                    char v303 = v274 & v270;
                    unsigned __int8 v304 = v282 & v270;
                    char v305 = v284 & v269;
                    unsigned __int8 v306 = v258 & v269;
                    char v307 = v286 & v269;
                    unsigned __int8 v308 = v285 & v269;
                    char v309 = v264 & v283;
                    char v310 = v267 & v427;
                    unsigned int v311 = (v239 & v270);
                    if (v302) {
                      BOOL v312 = 0;
                    }
                    else {
                      BOOL v312 = (v270 & 3u) >= v311;
                    }
                    char v313 = !v312;
                    if (v303) {
                      char v313 = 1;
                    }
                    if ((v270 & v482) < v304) {
                      char v313 = 1;
                    }
                    if (v305) {
                      char v313 = 1;
                    }
                    if (v432 < v306) {
                      char v313 = 1;
                    }
                    if (v307) {
                      char v313 = 1;
                    }
                    if (v434 < v308) {
                      char v313 = 1;
                    }
                    if ((v280 - v475) | (v478 - v281))
                    {
                      int v271 = v313 & 1 | ((v265 & v283) != 0
                                      || v309 != 0
                                      || v310 != 0
                                      || (v287 & v427) != 0);
                    }
                    else
                    {
                      uint64_t v314 = v72;
                      int v271 = sub_1BBB1BC1C(v237, v238, v393, v405, v232, v68, (int32x2_t)v69);
                      uint64_t v72 = v314;
                      char v279 = v459;
                    }
                    if (!v271 && v278 == 2)
                    {
                      unsigned int v219 = v445;
                      int v220 = v447;
                      int v224 = v442;
                      unsigned int v225 = v438;
                      unsigned int v231 = v436;
                      if (!v232)
                      {
                        int v315 = v279 & 1;
                        int v316 = (v461 >> 8) & 1;
                        int v317 = v420 & 1;
                        int v318 = v418 & 1;
                        BOOL v319 = v280 == v281 && v317 == v315 && v318 == v316 && v478 == v475
                            || v318 == v315 && v317 == v316 && v280 == v475 && v478 == v281;
                        LOBYTE(v271) = !v319;
                      }
                      goto LABEL_599;
                    }
                    unsigned int v219 = v445;
                    int v220 = v447;
LABEL_585:
                    int v224 = v442;
                    unsigned int v225 = v438;
                    unsigned int v231 = v436;
                    goto LABEL_599;
                  }
                  LOBYTE(v271) = 1;
                  int v220 = v447;
                  LOBYTE(v232) = v450;
                  if (v253 || v239 > 3u)
                  {
                    uint64_t v72 = v452;
                    uint64_t v77 = v479;
                    uint64_t v221 = v458;
                    unsigned int v219 = v445;
                    goto LABEL_585;
                  }
                  uint64_t v72 = v452;
                  uint64_t v77 = v479;
                  uint64_t v221 = v458;
                  unsigned int v219 = v445;
                  int v224 = v442;
                  unsigned int v225 = v438;
                  unsigned int v231 = v436;
                  if (!v257)
                  {
                    BOOL v272 = !v267 && v482 >= v472;
                    BOOL v273 = !v272;
                    int v271 = (_BYTE)v266 || v273;
                    if (v271 != 1 && v481 == 2 && !v450) {
                      LOBYTE(v271) = (v237[4] ^ v251) & 1;
                    }
                  }
LABEL_599:
                  *((unsigned char *)v220 + v234) = v271 | v232;
                }
                v236 *= 2;
                if (++v234 == 4)
                {
                  int v233 = 1;
                  uint64_t v3 = a1;
                  unint64_t v5 = v387;
LABEL_455:
                  int v232 = 0;
                  v224 |= v233;
                  *(unsigned char *)v220 |= (32 * v233) ^ 0x20;
                  int v220 = (_OWORD *)((char *)v220 + 4);
                  v231 *= 16;
                  ++v225;
                  goto LABEL_451;
                }
                continue;
              }
            }
          }
        }
        if (*(unsigned char *)(*(void *)(v3 + 136) + v77)) {
          int v109 = 0;
        }
        else {
          int v109 = 50529027;
        }
        *(_DWORD *)(v403 + 8) = 50529027;
        *(_DWORD *)(v403 + 12) = v109;
        *(_DWORD *)(v403 + 16) = 50529027;
        *(_DWORD *)(v403 + 20) = v109;
        *(_DWORD *)(v403 + 24) = 50529027;
        *(_DWORD *)(v403 + 28) = v109;
        *(_DWORD *)(v403 + 36) = 50529027;
        int v110 = 16843009 * v75;
        *(_DWORD *)uint64_t v403 = v110;
        *(_DWORD *)(v403 + 4) = v109;
        if (v415) {
          *(_DWORD *)(v403 + 32) = v110;
        }
        if (v388 || v405) {
          unsigned __int8 v111 = 3;
        }
        else {
          unsigned __int8 v111 = 4;
        }
        if (v389 <= 1 && v80 == 2 || !v389)
        {
          *(_DWORD *)uint64_t v421 = 538976288;
        }
        else
        {
          int v112 = 16843009 * v111;
          *(_DWORD *)uint64_t v421 = v112;
          *(_DWORD *)(v403 + 36) = v112;
        }
        if (v409 == 2)
        {
          *(unsigned char *)uint64_t v403 = v75 | (32 * (v106 != v104));
          *(unsigned char *)(v403 + 16) = v111 | (32 * (v402 != v104));
        }
LABEL_197:
        v403 += 48;
        v396 += 2;
        int v74 = v394 + 1;
        unsigned __int8 v75 = 4;
        if (v394 + 1 != v407) {
          continue;
        }
        break;
      }
      ++v389;
      uint64_t v73 = v403;
      if (v389 != v380) {
        continue;
      }
      break;
    }
LABEL_687:
    uint64_t v365 = *(pthread_mutex_t **)(v3 + 160);
    if (v365) {
      pthread_mutex_lock(v365);
    }
    if (v374)
    {
      int v360 = (void *)(*(void *)(v3 + 168) + v376);
      size_t v361 = v377 + ~v376 + 1;
      int v362 = 20;
LABEL_683:
      memset(v360, v362, v361);
    }
LABEL_684:
    uint64_t v363 = *(pthread_mutex_t **)(v3 + 160);
    if (v363) {
      pthread_mutex_unlock(v363);
    }
  }
  uint64_t v364 = sub_1BBB512CC((uint64_t *)v3, a3, 0, v71, v389, v380, *(double *)&v68, v69);
  if (!v364) {
    goto LABEL_687;
  }
  uint64_t v366 = v364;
LABEL_696:
  unint64_t v368 = *(unsigned int *)(v3 + 20);
  if (v368)
  {
    uint64_t v369 = *(unsigned char **)(v3 + 168);
    if (*v369 == 30)
    {
      unint64_t v370 = 0;
      int v371 = v369 + 1;
      while (v368 - 1 != v370)
      {
        int v372 = v371[v370++];
        if (v372 != 30)
        {
          if (v370 >= v368) {
            break;
          }
          goto LABEL_702;
        }
      }
    }
    else
    {
LABEL_702:
      uint64_t v366 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    unint64_t v368 = 0;
  }
  bzero(*(void **)(v3 + 32), 4 * v368);
  return v366;
}

uint64_t sub_1BBB1E170(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, double a6, int8x8_t a7)
{
  unsigned int v7 = *(_DWORD *)(result + 12);
  unsigned int v8 = a5 + a4 - 1;
  int v9 = v8 / v7;
  *(void *)(result + 80) = a2;
  int v10 = *(_DWORD *)(a2 + 100) >> 4;
  *(_DWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 20) = v10 * v7;
  int v11 = a4 / v7;
  if (a4 / v7 < v8 / v7 + 1)
  {
    uint64_t v12 = (uint64_t *)result;
    uint64_t v21 = a4;
    int v13 = a4 % v7;
    int v14 = a5 + a4 - v9 * v7;
    unsigned int v15 = a4 / v7;
    do
    {
      if (v15 == v11) {
        unsigned int v16 = v13;
      }
      else {
        unsigned int v16 = 0;
      }
      if (v15 == v9) {
        unsigned int v17 = v14;
      }
      else {
        unsigned int v17 = v7;
      }
      sub_1BBB512CC(v12, a3, v16, v17, v15, v15 + 1, a6, a7);
      uint64_t v18 = (pthread_mutex_t *)v12[20];
      if (v18) {
        pthread_mutex_lock(v18);
      }
      if (a5) {
        memset((void *)(v12[21] + v21), 20, (a5 - 1) + 1);
      }
      unsigned int v19 = (pthread_mutex_t *)v12[20];
      if (v19) {
        pthread_mutex_unlock(v19);
      }
      sub_1BBB5081C((uint64_t)v12, v16, v17, v15, v15 + 1);
      uint64_t result = sub_1BBB50CD8((uint64_t)v12, v16, v17, v15, v15 + 1);
    }
    while (v15++ != v9);
  }
  return result;
}

void sub_1BBB1E2BC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 160);
  if (v2) {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 160));
  }
  free(v2);
  *(void *)(a1 + 160) = 0;
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    MEMORY[0x1C18605A0](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 168) = 0;
  free(*(void **)a1);
  free(*(void **)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4) {
    free((void *)(v4 - *(int *)(v4 - 4)));
  }
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 224));
  unint64_t v5 = *(pthread_mutex_t **)(a1 + 64);
  if (v5) {
    pthread_mutex_destroy(v5);
  }

  free(v5);
}

BOOL sub_1BBB1E3A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  unsigned int v4 = *(_DWORD *)(*a2 + 4632);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2[1];
    while (1)
    {
      int v7 = v5 + 1;
      int v8 = *(_DWORD *)(v6 + 5004);
      if ((unint64_t)(v5 + 1) > 4 || v8 != 0) {
        break;
      }
      uint64_t v6 = a2[v5++ + 2];
      if (!v6)
      {
        LODWORD(v5) = v7;
        goto LABEL_12;
      }
    }
    if (!v5) {
      goto LABEL_20;
    }
LABEL_12:
    int v10 = 0;
    int v11 = a2 + 1;
    uint64_t v12 = v5;
    do
    {
      uint64_t v13 = *v11++;
      v10 += *(_DWORD *)(v13 + 4632);
      --v12;
    }
    while (v12);
    unsigned int v14 = 0;
    unsigned int v15 = a2 + 1;
    uint64_t v16 = v5;
    unsigned int v17 = (v10 + (v5 >> 1)) / v5;
    do
    {
      uint64_t v18 = *v15++;
      int v19 = *(_DWORD *)(v18 + 4632) - v17;
      if (v19 < 0) {
        int v19 = -v19;
      }
      v14 += v19;
      --v16;
    }
    while (v16);
    if (v14 <= v5 << 6) {
      LODWORD(v5) = 128;
    }
    else {
      LODWORD(v5) = 2 * ((v14 + (v5 >> 1)) / v5);
    }
  }
  else
  {
    LODWORD(v5) = 0;
LABEL_20:
    unsigned int v17 = 0;
  }
  unsigned int v20 = (v4 >> 7);
  *(unsigned char *)(v3 + 5008) = v4 >> 7;
  int v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    double v23 = *(float *)(v3 + 5012);
    if (v23 >= 0.2) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v20 > 3 || *(unsigned __int8 *)(v2 + 5008) > 3u;
    }
    goto LABEL_52;
  }
  if (v21 != 1)
  {
    if (v21 != 2)
    {
      BOOL v24 = 0;
      goto LABEL_53;
    }
    float v22 = *(float *)(v3 + 5012);
    double v23 = v22;
    if (v22 >= 0.45) {
      goto LABEL_29;
    }
    if (v20 <= 3 && *(unsigned __int8 *)(v2 + 5008) <= 3u)
    {
      BOOL v24 = 0;
      if (v22 >= 0.25 || v17 <= 0xFA) {
        goto LABEL_51;
      }
    }
    else if (v17 < 0xFB)
    {
LABEL_29:
      BOOL v24 = 0;
      goto LABEL_51;
    }
    int v28 = v4 - v17;
    if ((int)(v4 - v17) < 0) {
      int v28 = v17 - v4;
    }
    BOOL v24 = v28 >= (int)v5;
LABEL_51:
    if (v23 < 0.8)
    {
LABEL_52:
      int v27 = v23 >= 0.6;
      goto LABEL_54;
    }
LABEL_53:
    int v27 = 2;
    goto LABEL_54;
  }
  float v25 = *(float *)(v3 + 5012);
  if (v25 >= 0.25) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v20 > 3 || *(unsigned __int8 *)(v2 + 5008) > 3u;
  }
  double v26 = v25;
  if (v26 >= 0.6)
  {
    if (v26 < 0.8) {
      int v27 = 1;
    }
    else {
      int v27 = 2;
    }
  }
  else
  {
    int v27 = 0;
  }
LABEL_54:
  *(_DWORD *)(a1 + 12) = v27;
  *(_DWORD *)(v3 + 5004) = v24;
  return v24;
}

void sub_1BBB1E5E8()
{
}

uint64_t sub_1BBB1E600(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  int v4 = *(_DWORD *)(*a2 + 4632);
  int v5 = *(unsigned __int16 *)(*a2 + 4832);
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2[1];
    while (1)
    {
      int v8 = v6 + 1;
      int v9 = *(_DWORD *)(v7 + 5004);
      if ((unint64_t)(v6 + 1) > 4 || v9 != 0) {
        break;
      }
      uint64_t v7 = a2[v6++ + 2];
      if (!v7)
      {
        LODWORD(v6) = v8;
        goto LABEL_12;
      }
    }
    if (!v6)
    {
      unsigned int v11 = 0;
      goto LABEL_22;
    }
LABEL_12:
    int v12 = 0;
    uint64_t v13 = a2 + 1;
    uint64_t v14 = v6;
    do
    {
      uint64_t v15 = *v13++;
      v12 += *(_DWORD *)(v15 + 4632);
      --v14;
    }
    while (v14);
    unsigned int v16 = 0;
    unsigned int v17 = a2 + 1;
    uint64_t v18 = v6;
    unsigned int v11 = (v12 + (v6 >> 1)) / v6;
    do
    {
      uint64_t v19 = *v17++;
      int v20 = *(_DWORD *)(v19 + 4632) - v11;
      if (v20 < 0) {
        int v20 = -v20;
      }
      v16 += v20;
      --v18;
    }
    while (v18);
    if (v16 <= v6 << 6) {
      LODWORD(v6) = 128;
    }
    else {
      LODWORD(v6) = 2 * ((v16 + (v6 >> 1)) / v6);
    }
  }
  else
  {
    unsigned int v11 = 0;
    LODWORD(v6) = 0;
  }
LABEL_22:
  unsigned int v21 = *(_DWORD *)(v2 + 4808);
  if (v21)
  {
    int v22 = 0;
    double v23 = *(unsigned __int16 **)(v2 + 4624);
    uint64_t v24 = *(void *)(v2 + 4816) + 8;
    uint64_t v25 = *(unsigned int *)(v2 + 4808);
    do
    {
      unsigned int v26 = *v23++;
      if (*(unsigned __int16 *)(v24 + 4) > v26) {
        ++v22;
      }
      v24 += 36;
      --v25;
    }
    while (v25);
    v21 *= 85;
  }
  else
  {
    int v22 = 0;
  }
  int v27 = v5 - v4;
  *(_DWORD *)(v2 + 4840) = v22;
  unsigned int v28 = (v4 >> 7);
  *(unsigned char *)(v2 + 5008) = v4 >> 7;
  int v29 = *(_DWORD *)(a1 + 12);
  if (!v29)
  {
    if (v28 <= 3 && *(unsigned __int8 *)(v3 + 5008) < 4u)
    {
      double v30 = *(float *)(v2 + 5012);
      if (v30 < 0.2)
      {
        int v33 = v4 - v11;
        if ((int)(v4 - v11) < 0) {
          int v33 = v11 - v4;
        }
        BOOL v35 = v33 >= (int)v6 || v27 > 750;
        LODWORD(v31) = v4 >= 251 && v35;
        if (v11 >= 0xFB) {
          uint64_t v31 = v31;
        }
        else {
          uint64_t v31 = 0;
        }
        goto LABEL_88;
      }
    }
    else
    {
      double v30 = *(float *)(v2 + 5012);
      if (v30 < 0.2)
      {
        uint64_t v31 = v27 >= 501 && 100 * v22 > v21;
        goto LABEL_88;
      }
    }
    uint64_t v31 = 0;
LABEL_88:
    int v39 = v30 >= 0.6;
    goto LABEL_95;
  }
  if (v29 != 1)
  {
    if (v29 != 2)
    {
      uint64_t v31 = 0;
LABEL_86:
      int v39 = 2;
      goto LABEL_95;
    }
    if (v28 <= 3 && *(unsigned __int8 *)(v3 + 5008) < 4u)
    {
      double v30 = *(float *)(v2 + 5012);
      if (v30 < 0.45 && (v11 > 0xFA || v4 >= 251))
      {
        int v42 = v4 - v11;
        if (v42 < 0) {
          int v42 = -v42;
        }
        uint64_t v31 = v42 >= (int)v6 || v27 > 750;
LABEL_85:
        if (v30 >= 0.8) {
          goto LABEL_86;
        }
        goto LABEL_88;
      }
    }
    else
    {
      double v30 = *(float *)(v2 + 5012);
      if (v30 < 0.45)
      {
        uint64_t v31 = v27 >= 501 && 100 * v22 > v21;
        goto LABEL_85;
      }
    }
    uint64_t v31 = 0;
    goto LABEL_85;
  }
  if (v28 <= 3 && *(unsigned __int8 *)(v3 + 5008) < 4u)
  {
    float v32 = *(float *)(v2 + 5012);
    if (v32 < 0.25)
    {
      int v36 = v4 - v11;
      if ((int)(v4 - v11) < 0) {
        int v36 = v11 - v4;
      }
      BOOL v38 = v36 >= (int)v6 || v27 > 750;
      LODWORD(v31) = v4 >= 251 && v38;
      if (v11 >= 0xFB) {
        uint64_t v31 = v31;
      }
      else {
        uint64_t v31 = 0;
      }
      goto LABEL_90;
    }
  }
  else
  {
    float v32 = *(float *)(v2 + 5012);
    if (v32 < 0.25)
    {
      uint64_t v31 = v27 >= 501 && 100 * v22 > v21;
      goto LABEL_90;
    }
  }
  uint64_t v31 = 0;
LABEL_90:
  double v40 = v32;
  if (v40 >= 0.6)
  {
    if (v40 < 0.8) {
      int v39 = 1;
    }
    else {
      int v39 = 2;
    }
  }
  else
  {
    int v39 = 0;
  }
LABEL_95:
  *(_DWORD *)(a1 + 12) = v39;
  *(_DWORD *)(v2 + 5004) = v31;
  return v31;
}

void sub_1BBB1E968()
{
}

unsigned char *sub_1BBB1E980(unsigned char *result, uint64_t a2, char *a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = &a3[a5 * (uint64_t)a4];
    int v9 = &a3[5 * a5 * a4 / 4];
    int v10 = (unsigned char *)(a2 + 1);
    do
    {
      unsigned int v11 = a3;
      int v12 = result;
      uint64_t v13 = a4;
      if (a4 >= 1)
      {
        do
        {
          char v14 = *v11++;
          *v12++ = v14;
          --v13;
        }
        while (v13);
      }
      ++v7;
      result += a6;
      a3 += a4;
    }
    while (v7 != a5);
    if (a5 >= 2)
    {
      uint64_t v15 = 0;
      if (a4 >= 0) {
        int v16 = a4;
      }
      else {
        int v16 = a4 + 1;
      }
      uint64_t v17 = (v16 >> 1);
      uint64_t v18 = (uint64_t)v16 >> 1;
      do
      {
        if (a4 >= 2)
        {
          uint64_t v19 = v8;
          int v20 = v9;
          uint64_t result = v10;
          uint64_t v21 = v17;
          do
          {
            char v22 = *v19++;
            *(result - 1) = v22;
            char v23 = *v20++;
            *uint64_t result = v23;
            result += 2;
            --v21;
          }
          while (v21);
        }
        ++v15;
        v10 += a7;
        v9 += v18;
        v8 += v18;
      }
      while (v15 != a5 >> 1);
    }
  }
  return result;
}

unsigned char *sub_1BBB1EA68(unsigned char *result, char *a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = &result[a5 * (uint64_t)a4];
    int v9 = &result[5 * a5 * a4 / 4];
    int v10 = (char *)(a3 + 1);
    do
    {
      unsigned int v11 = a2;
      int v12 = result;
      uint64_t v13 = a4;
      if (a4 >= 1)
      {
        do
        {
          char v14 = *v11++;
          *v12++ = v14;
          --v13;
        }
        while (v13);
      }
      ++v7;
      result += a4;
      a2 += a6;
    }
    while (v7 != a5);
    if (a5 >= 2)
    {
      uint64_t v15 = 0;
      if (a4 >= 0) {
        int v16 = a4;
      }
      else {
        int v16 = a4 + 1;
      }
      uint64_t v17 = (v16 >> 1);
      uint64_t v18 = (uint64_t)v16 >> 1;
      do
      {
        if (a4 >= 2)
        {
          uint64_t v19 = v10;
          int v20 = v8;
          uint64_t result = v9;
          uint64_t v21 = v17;
          do
          {
            *v20++ = *(v19 - 1);
            char v22 = *v19;
            v19 += 2;
            *result++ = v22;
            --v21;
          }
          while (v21);
        }
        ++v15;
        v9 += v18;
        v8 += v18;
        v10 += a7;
      }
      while (v15 != a5 >> 1);
    }
  }
  return result;
}

uint64_t sub_1BBB1EB50(uint64_t a1)
{
  v61[8] = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 22368);
  int v2 = *(_DWORD *)(a1 + 22372);
  unsigned int v4 = *(_DWORD *)(a1 + 22376);
  unsigned int v3 = *(_DWORD *)(a1 + 22380);
  int v5 = *(unsigned char **)(a1 + 368);
  uint64_t v6 = *(char **)(a1 + 288);
  uint64_t v7 = *(void *)(a1 + 352);
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v53 = (int *)(a1 + 22304);
  sub_1BBB1EA68(v5, *(char **)(a1 + 22328), *(void *)(a1 + 22336), v1, v2, *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22308));
  int v8 = 0;
  unsigned int v52 = v6;
  int v9 = v6;
  do
  {
    int v55 = v8;
    switch(v8)
    {
      case 2:
        unsigned int v10 = v53[16];
        unsigned int v12 = v53[17];
        int v5 = (unsigned char *)(*(void *)(a1 + 368) + ((5 * v10 * v12) >> 2));
        unsigned int v11 = v53[18];
        unsigned int v13 = v53[19];
        uint64_t v14 = (5 * v11 * v13) >> 2;
        goto LABEL_9;
      case 1:
        unsigned int v10 = v53[16];
        unsigned int v12 = v53[17];
        int v5 = (unsigned char *)(*(void *)(a1 + 368) + v12 * v10);
        unsigned int v11 = v53[18];
        unsigned int v13 = v53[19];
        uint64_t v14 = v13 * v11;
LABEL_9:
        int v9 = &v52[v14];
        goto LABEL_11;
      case 0:
        unsigned int v54 = v3;
        unsigned int v10 = v53[16];
        unsigned int v11 = v53[18];
        if (!v4) {
          goto LABEL_38;
        }
        goto LABEL_12;
    }
    unsigned int v10 = v53[16];
    unsigned int v12 = v53[17];
    unsigned int v11 = v53[18];
    unsigned int v13 = v53[19];
LABEL_11:
    int v1 = v10 >> 1;
    int v2 = v12 >> 1;
    unsigned int v4 = v11 >> 1;
    unsigned int v54 = v13 >> 1;
    if (!(v11 >> 1)) {
      goto LABEL_38;
    }
LABEL_12:
    int v15 = 0;
    int v16 = 0;
    int v17 = (v10 << 16) / v11;
    do
    {
      unsigned int v18 = v15 >> 16;
      LODWORD(v19) = (v15 >> 16) - 3;
      if (v15 >= 196608) {
        uint64_t v19 = v19;
      }
      else {
        uint64_t v19 = 0;
      }
      int v20 = &v5[v19];
      LODWORD(v21) = v18 - 2;
      if (v15 >= 0x20000) {
        uint64_t v21 = v21;
      }
      else {
        uint64_t v21 = 0;
      }
      v61[0] = v20;
      v61[1] = &v5[v21];
      LODWORD(v21) = v18 - 1;
      if (v15 >= 0x10000) {
        uint64_t v21 = v21;
      }
      else {
        uint64_t v21 = 0;
      }
      _DWORD v61[2] = &v5[v21];
      v61[3] = &v5[v18];
      uint64_t v22 = (int)(v18 + 1);
      if (v18 > v1 - 2) {
        uint64_t v22 = (v1 - 1);
      }
      char v23 = &v5[v22];
      uint64_t v24 = (int)(v18 + 2);
      if (v18 > v1 - 3) {
        uint64_t v24 = (v1 - 1);
      }
      v61[4] = v23;
      v61[5] = &v5[v24];
      uint64_t v25 = (int)(v18 + 3);
      if (v18 > v1 - 4) {
        uint64_t v25 = (v1 - 1);
      }
      unsigned int v26 = &v5[v25];
      BOOL v27 = v18 > v1 - 5;
      uint64_t v28 = (int)(v18 + 4);
      if (v27) {
        uint64_t v28 = (v1 - 1);
      }
      v61[6] = v26;
      v61[7] = &v5[v28];
      if (v2)
      {
        uint64_t v29 = 0;
        double v30 = (__int16 *)(a1 + 16 * ((unsigned __int16)v15 >> 12) + 512);
        do
        {
          uint64_t v31 = (v1 * v29);
          int v32 = ((v20[v31] >> 6) | (4 * v20[v31])) * *v30;
          uint64_t v33 = 1;
          uint64_t v34 = 1;
          do
          {
            unsigned int v35 = *(unsigned __int8 *)(v61[v33] + v31);
            v32 += ((v35 >> 6) | (4 * v35)) * v30[v34++];
            ++v33;
          }
          while (v33 != 8);
          int v36 = (v32 + 64) >> 7;
          if (v36 >= 1023) {
            int v36 = 1023;
          }
          *(_WORD *)(v7 + 2 * (v16 + v4 * v29++)) = v36 & ~(unsigned __int16)(v36 >> 31);
        }
        while (v29 != v2);
      }
      v15 += v17;
      ++v16;
    }
    while (v16 != v4);
LABEL_38:
    unsigned int v3 = v54;
    if (v54)
    {
      int v37 = 0;
      int v38 = 0;
      int v39 = (v53[17] << 16) / v53[19];
      do
      {
        unsigned int v40 = v37 >> 16;
        unsigned int v41 = ((v37 >> 16) - 1) * v4;
        if (v37 < 0x10000) {
          unsigned int v41 = 0;
        }
        *(void *)&long long v57 = v7 + 2 * v41;
        *((void *)&v57 + 1) = v7 + 2 * v40 * v4;
        if (v40 <= v2 - 2) {
          unsigned int v42 = v40 + 1;
        }
        else {
          unsigned int v42 = v2 - 1;
        }
        uint64_t v43 = v7 + 2 * v42 * v4;
        BOOL v27 = v40 > v2 - 3;
        unsigned int v44 = v40 + 2;
        if (v27) {
          unsigned int v44 = v2 - 1;
        }
        *(void *)&long long v58 = v43;
        *((void *)&v58 + 1) = v7 + 2 * v44 * v4;
        if (v4)
        {
          uint64_t v45 = 0;
          uint64_t v46 = (__int16 *)(a1 + 16 * ((unsigned __int16)v37 >> 12) + 768);
          do
          {
            int v47 = *(__int16 *)(v57 + 2 * v45) * *v46;
            uint64_t v48 = 8;
            uint64_t v49 = 1;
            do
            {
              v47 += *(__int16 *)(*(void *)((char *)&v57 + v48) + 2 * v45) * v46[v49++];
              v48 += 8;
            }
            while (v48 != 32);
            int v50 = (v47 + 64) >> 9;
            if (v50 >= 255) {
              int v50 = 255;
            }
            v9[v38 * v4 + v45++] = v50 & ~(v50 >> 31);
          }
          while (v45 != v4);
        }
        v37 += v39;
        ++v38;
      }
      while (v38 != v54);
    }
    int v8 = v55 + 1;
  }
  while (v55 != 2);
  sub_1BBB1E980(*(unsigned char **)(a1 + 22344), *(void *)(a1 + 22352), v52, v53[18], v53[19], v53[2], v53[3]);
  return 0;
}

uint64_t sub_1BBB1EF70(uint64_t a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 22368);
  int v2 = *(_DWORD *)(a1 + 22372);
  unsigned int v4 = *(_DWORD *)(a1 + 22376);
  unsigned int v5 = *(_DWORD *)(a1 + 22380);
  uint64_t v6 = *(unsigned char **)(a1 + 368);
  uint64_t v7 = *(char **)(a1 + 288);
  uint64_t v8 = *(void *)(a1 + 352);
  long long v67 = 0u;
  long long v68 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  int v9 = 1 << (*(unsigned char *)(a1 + 240) - 1);
  long long v60 = (int *)(a1 + 22304);
  int v59 = v2;
  sub_1BBB1EA68(v6, *(char **)(a1 + 22328), *(void *)(a1 + 22336), v3, v2, *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22308));
  int v10 = 0;
  long long v58 = v7;
  unsigned int v11 = v7;
  do
  {
    int v61 = v10;
    switch(v10)
    {
      case 2:
        unsigned int v14 = v60[16];
        unsigned int v12 = v60[17];
        uint64_t v6 = (unsigned char *)(*(void *)(a1 + 368) + ((5 * v14 * v12) >> 2));
        unsigned int v15 = v60[18];
        unsigned int v13 = v60[19];
        uint64_t v16 = (5 * v15 * v13) >> 2;
        goto LABEL_9;
      case 1:
        unsigned int v14 = v60[16];
        unsigned int v12 = v60[17];
        uint64_t v6 = (unsigned char *)(*(void *)(a1 + 368) + v12 * v14);
        unsigned int v15 = v60[18];
        unsigned int v13 = v60[19];
        uint64_t v16 = v13 * v15;
LABEL_9:
        unsigned int v11 = &v58[v16];
        goto LABEL_11;
      case 0:
        unsigned int v12 = v60[17];
        unsigned int v13 = v60[19];
        if (!v5) {
          goto LABEL_36;
        }
        goto LABEL_12;
    }
    unsigned int v14 = v60[16];
    unsigned int v12 = v60[17];
    unsigned int v15 = v60[18];
    unsigned int v13 = v60[19];
LABEL_11:
    int v3 = v14 >> 1;
    int v59 = v12 >> 1;
    unsigned int v4 = v15 >> 1;
    unsigned int v5 = v13 >> 1;
    if (!(v13 >> 1)) {
      goto LABEL_36;
    }
LABEL_12:
    int v17 = 0;
    int v18 = 0;
    int v19 = (v12 << 16) / v13;
    do
    {
      unsigned int v20 = v17 >> 16;
      LODWORD(v21) = ((v17 >> 16) - 1) * v3;
      if (v17 >= 0x10000) {
        uint64_t v21 = v21;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = &v6[v21];
      v66[0] = v22;
      v66[1] = &v6[v20 * v3];
      if (v20 <= v59 - 2) {
        unsigned int v23 = v20 + 1;
      }
      else {
        unsigned int v23 = v59 - 1;
      }
      uint64_t v24 = &v6[v23 * v3];
      BOOL v25 = v20 > v59 - 3;
      unsigned int v26 = v20 + 2;
      if (v25) {
        unsigned int v26 = v59 - 1;
      }
      v66[2] = v24;
      v66[3] = &v6[v26 * v3];
      if (v3)
      {
        uint64_t v27 = 0;
        uint64_t v28 = (__int16 *)(a1 + 16 * ((unsigned __int16)v17 >> 12) + 768);
        do
        {
          int v29 = v22[v27] * *v28;
          uint64_t v30 = 1;
          uint64_t v31 = 1;
          do
          {
            int v32 = v29 + *(unsigned __int8 *)(v66[v30] + v27) * v28[v31];
            if (v32 >= 0x7FFF) {
              int v32 = 0x7FFF;
            }
            if (v32 <= -32768) {
              int v29 = -32768;
            }
            else {
              int v29 = v32;
            }
            ++v31;
            ++v30;
          }
          while (v30 != 4);
          int v33 = v29 + v9;
          if (v29 + v9 >= 0x7FFF) {
            int v33 = 0x7FFF;
          }
          if (v33 <= -32768) {
            int v33 = -32768;
          }
          *(_WORD *)(v8 + 2 * (v18 * v3 + v27++)) = v33 >> *(unsigned char *)(a1 + 240);
        }
        while (v27 != v3);
      }
      v17 += v19;
      ++v18;
    }
    while (v18 != v5);
LABEL_36:
    if (v4)
    {
      int v34 = 0;
      int v35 = 0;
      int v36 = (v60[16] << 16) / v60[18];
      do
      {
        unsigned int v37 = v34 >> 16;
        int v38 = (v34 >> 16) - 3;
        if (v34 < 196608) {
          int v38 = 0;
        }
        uint64_t v39 = v8 + 2 * v38;
        signed int v40 = v37 - 2;
        if (v34 < 0x20000) {
          signed int v40 = 0;
        }
        *(void *)&long long v62 = v39;
        *((void *)&v62 + 1) = v8 + 2 * v40;
        signed int v41 = v37 - 1;
        if (v34 < 0x10000) {
          signed int v41 = 0;
        }
        *(void *)&long long v63 = v8 + 2 * v41;
        *((void *)&v63 + 1) = v8 + 2 * (int)v37;
        uint64_t v42 = (int)(v37 + 1);
        if (v37 > v3 - 2) {
          uint64_t v42 = (v3 - 1);
        }
        uint64_t v43 = v8 + 2 * v42;
        uint64_t v44 = (int)(v37 + 2);
        if (v37 > v3 - 3) {
          uint64_t v44 = (v3 - 1);
        }
        *(void *)&long long v64 = v43;
        *((void *)&v64 + 1) = v8 + 2 * v44;
        uint64_t v45 = (int)(v37 + 3);
        if (v37 > v3 - 4) {
          uint64_t v45 = (v3 - 1);
        }
        uint64_t v46 = v8 + 2 * v45;
        BOOL v25 = v37 > v3 - 5;
        uint64_t v47 = (int)(v37 + 4);
        if (v25) {
          uint64_t v47 = (v3 - 1);
        }
        *(void *)&long long v65 = v46;
        *((void *)&v65 + 1) = v8 + 2 * v47;
        if (v5)
        {
          uint64_t v48 = 0;
          uint64_t v49 = (__int16 *)(a1 + 16 * ((unsigned __int16)v34 >> 12) + 512);
          do
          {
            uint64_t v50 = (v3 * v48);
            int v51 = *(__int16 *)(v62 + 2 * v50) * *v49;
            uint64_t v52 = 8;
            uint64_t v53 = 1;
            do
            {
              int v54 = v51 + *(__int16 *)(*(void *)((char *)&v62 + v52) + 2 * v50) * v49[v53];
              if (v54 >= 0x7FFF) {
                int v54 = 0x7FFF;
              }
              if (v54 <= -32768) {
                int v51 = -32768;
              }
              else {
                int v51 = v54;
              }
              ++v53;
              v52 += 8;
            }
            while (v52 != 64);
            int v55 = v51 + v9;
            if (v51 + v9 >= 0x7FFF) {
              int v55 = 0x7FFF;
            }
            if (v55 <= -32768) {
              int v55 = -32768;
            }
            int v56 = v55 >> *(unsigned char *)(a1 + 240);
            if (v56 >= 255) {
              int v56 = 255;
            }
            v11[v35 + v4 * v48++] = v56 & ~(v56 >> 31);
          }
          while (v48 != v5);
        }
        v34 += v36;
        ++v35;
      }
      while (v35 != v4);
    }
    int v10 = v61 + 1;
  }
  while (v61 != 2);
  sub_1BBB1E980(*(unsigned char **)(a1 + 22344), *(void *)(a1 + 22352), v58, v60[18], v60[19], v60[2], v60[3]);
  return 0;
}

uint64_t sub_1BBB1F3D0(uint64_t a1)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 22288);
  unsigned int v3 = *(_DWORD *)(a1 + 22296);
  int v82 = *(_DWORD *)(a1 + 22300);
  int v83 = *(_DWORD *)(a1 + 22292);
  int v5 = *(_DWORD *)(a1 + 22368);
  int v4 = *(_DWORD *)(a1 + 22372);
  unsigned int v6 = *(_DWORD *)(a1 + 22376);
  unsigned int v7 = *(_DWORD *)(a1 + 22380);
  uint64_t v8 = *(unsigned char **)(a1 + 368);
  int v9 = *(char **)(a1 + 288);
  uint64_t v10 = *(void *)(a1 + 352);
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  int v11 = 1 << (*(unsigned char *)(a1 + 240) - 1);
  int v78 = (int *)(a1 + 22288);
  int v79 = v4;
  sub_1BBB1EA68(v8, *(char **)(a1 + 22328), *(void *)(a1 + 22336), v5, v4, *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22308));
  int v12 = 0;
  unsigned int v84 = v2;
  unsigned int v81 = 16 * v2;
  uint64_t v77 = v9;
  unsigned int v13 = v9;
  do
  {
    int v80 = v12;
    switch(v12)
    {
      case 0:
        int v19 = 1;
        int v20 = v79;
        goto LABEL_11;
      case 1:
        unsigned int v15 = v78[20];
        unsigned int v14 = v78[21];
        uint64_t v8 = (unsigned char *)(*(void *)(a1 + 368) + v14 * v15);
        unsigned int v16 = v78[22];
        unsigned int v17 = v78[23];
        uint64_t v18 = v17 * v16;
        break;
      case 2:
        unsigned int v15 = v78[20];
        unsigned int v14 = v78[21];
        uint64_t v8 = (unsigned char *)(*(void *)(a1 + 368) + ((5 * v15 * v14) >> 2));
        unsigned int v16 = v78[22];
        unsigned int v17 = v78[23];
        uint64_t v18 = (5 * v16 * v17) >> 2;
        break;
      default:
        unsigned int v15 = v78[20];
        unsigned int v14 = v78[21];
        unsigned int v16 = v78[22];
        unsigned int v17 = v78[23];
        goto LABEL_10;
    }
    unsigned int v13 = &v77[v18];
LABEL_10:
    int v19 = 0;
    int v5 = v15 >> 1;
    int v20 = v14 >> 1;
    unsigned int v6 = v16 >> 1;
    unsigned int v7 = v17 >> 1;
LABEL_11:
    int v79 = v20;
    if (v7)
    {
      int v21 = 0;
      unsigned int v22 = v20 - 2;
      unsigned int v23 = v20 - 1;
      unsigned int v24 = v20 - 3;
      while (1)
      {
        if (v19)
        {
          unsigned int v25 = v21 * v82;
          unsigned int v26 = v21 * v82 / v3;
          LODWORD(v27) = (v26 - 1) * v5;
          if ((int)v26 <= 0) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = v27;
          }
          uint64_t v28 = &v8[v27];
          if (v26 <= v22) {
            unsigned int v29 = v26 + 1;
          }
          else {
            unsigned int v29 = v23;
          }
          *((void *)&v89 + 1) = &v8[v26 * v5];
          *(void *)&long long v90 = &v8[v29 * v5];
          if (v26 <= v24) {
            unsigned int v30 = v26 + 2;
          }
          else {
            unsigned int v30 = v23;
          }
        }
        else
        {
          unsigned int v25 = ((2 * v21) | 1) * v82;
          int v31 = v25 / v3;
          if (((v25 / v3) & 0x80000000) == 0) {
            int v32 = v25 / v3;
          }
          else {
            int v32 = v31 + 1;
          }
          unsigned int v33 = v32 >> 1;
          if (v31)
          {
            uint64_t v28 = &v8[v33 * v5];
            if (v33 <= v22) {
              unsigned int v36 = v33 + 1;
            }
            else {
              unsigned int v36 = v23;
            }
            int v35 = &v8[v36 * v5];
            *((void *)&v89 + 1) = v28;
            *(void *)&long long v90 = v35;
            goto LABEL_38;
          }
          if (v31 >= 2) {
            uint64_t v34 = (v33 - 1) * v5;
          }
          else {
            uint64_t v34 = 0;
          }
          uint64_t v28 = &v8[v34];
          *((void *)&v89 + 1) = &v8[v33 * v5];
          *(void *)&long long v90 = *((void *)&v89 + 1);
          if (v33 <= v22) {
            unsigned int v30 = v33 + 1;
          }
          else {
            unsigned int v30 = v23;
          }
        }
        int v35 = &v8[v30 * v5];
LABEL_38:
        *((void *)&v90 + 1) = v35;
        if (v5)
        {
          uint64_t v37 = 0;
          int v38 = (__int16 *)(a1 + 16 * (int)(16 * v25 % (16 * v3) / v3) + 768);
          do
          {
            int v39 = v28[v37] * *v38;
            uint64_t v40 = 8;
            uint64_t v41 = 1;
            do
            {
              v39 += *(unsigned __int8 *)(*(void *)((char *)&v89 + v40) + v37) * v38[v41];
              if (v39 >= 0x7FFF) {
                int v39 = 0x7FFF;
              }
              if (v39 <= -32768) {
                int v39 = -32768;
              }
              ++v41;
              v40 += 8;
            }
            while (v40 != 32);
            int v42 = v39 + v11;
            if (v42 >= 0x7FFF) {
              int v42 = 0x7FFF;
            }
            if (v42 <= -32768) {
              int v42 = -32768;
            }
            *(_WORD *)(v10 + 2 * (v21 * v5 + v37++)) = v42 >> *(unsigned char *)(a1 + 240);
          }
          while (v37 != v5);
        }
        if (++v21 == v7) {
          goto LABEL_54;
        }
      }
    }
    uint64_t v28 = (unsigned char *)v89;
LABEL_54:
    *(void *)&long long v89 = v28;
    if (v6)
    {
      int v43 = 0;
      unsigned int v44 = v5 - 2;
      unsigned int v45 = v5 - 3;
      unsigned int v46 = v5 - 4;
      unsigned int v47 = v5 - 5;
      do
      {
        signed int v48 = v43 * v83 / v84;
        if (!v19)
        {
          int v55 = v48 - 3;
          if (v48 < 3) {
            int v55 = 0;
          }
          uint64_t v56 = v10 + 2 * v55;
          int v57 = v48 - 2;
          if (v48 < 2) {
            int v57 = 0;
          }
          *(void *)&long long v85 = v56;
          *((void *)&v85 + 1) = v10 + 2 * v57;
          int v58 = v48 - 1;
          if (v48 <= 0) {
            int v58 = 0;
          }
          *(void *)&long long v86 = v10 + 2 * v58;
          *((void *)&v86 + 1) = v10 + 2 * v48;
          uint64_t v59 = v48 + 1;
          if (v48 > v44) {
            uint64_t v59 = (v5 - 1);
          }
          uint64_t v60 = v10 + 2 * v59;
          uint64_t v61 = v48 + 2;
          if (v48 > v45) {
            uint64_t v61 = (v5 - 1);
          }
          *(void *)&long long v87 = v60;
          *((void *)&v87 + 1) = v10 + 2 * v61;
          uint64_t v62 = v48 + 3;
          if (v48 > v46) {
            uint64_t v62 = (v5 - 1);
          }
          *(void *)&long long v88 = v10 + 2 * v62;
          uint64_t v63 = v48 + 4;
          if (v48 > v47) {
            uint64_t v63 = (v5 - 1);
          }
          uint64_t v64 = v10 + 2 * v63;
          goto LABEL_97;
        }
        uint64_t v49 = ((v43 * v83 / v84) & 1) == 0;
        if (v48 >= 3) {
          uint64_t v49 = (v48 - 3);
        }
        uint64_t v50 = v10 + 2 * v49;
        unsigned int v51 = v48 - 2;
        if (v48 < 2) {
          unsigned int v51 = (v43 * v83 / v84) & 1;
        }
        *(void *)&long long v85 = v50;
        *((void *)&v85 + 1) = v10 + 2 * v51;
        int v52 = v48 - 1;
        if (v48 < 1) {
          int v52 = 1;
        }
        *(void *)&long long v86 = v10 + 2 * v52;
        *((void *)&v86 + 1) = v10 + 2 * v48;
        uint64_t v53 = v48 + 1;
        if (v48 > v44) {
          uint64_t v53 = (v5 - 2);
        }
        *(void *)&long long v87 = v10 + 2 * v53;
        if (v48 <= v45)
        {
          uint64_t v65 = v10 + 2 * v48;
          *((void *)&v87 + 1) = v65 + 4;
          if (v48 <= v46)
          {
            *(void *)&long long v88 = v65 + 6;
            if (v48 > v47)
            {
              uint64_t v64 = v10 + 2 * (v5 - 1);
              if ((v48 & 1) == 0) {
                uint64_t v64 = v10 + 2 * (v5 - 2);
              }
              goto LABEL_97;
            }
LABEL_96:
            uint64_t v64 = v10 + 2 * v48 + 8;
            goto LABEL_97;
          }
          if ((v48 & 1) == 0) {
            goto LABEL_86;
          }
        }
        else
        {
          if ((v48 & 1) == 0)
          {
            *((void *)&v87 + 1) = v10 + 2 * (v5 - 2);
            if (v48 > v46) {
LABEL_86:
            }
              uint64_t v54 = v10 + 2 * (v5 - 1);
            else {
              uint64_t v54 = v10 + 2 * v48 + 6;
            }
            *(void *)&long long v88 = v54;
            uint64_t v64 = v10 + 2 * (v5 - 2);
            goto LABEL_95;
          }
          *((void *)&v87 + 1) = v10 + 2 * (v5 - 1);
          if (v48 <= v46)
          {
            uint64_t v66 = v10 + 2 * v48 + 6;
            goto LABEL_94;
          }
        }
        uint64_t v66 = v10 + 2 * (v5 - 2);
LABEL_94:
        *(void *)&long long v88 = v66;
        uint64_t v64 = v10 + 2 * (v5 - 1);
LABEL_95:
        if (v48 <= v47) {
          goto LABEL_96;
        }
LABEL_97:
        *((void *)&v88 + 1) = v64;
        if (v7)
        {
          uint64_t v67 = 0;
          long long v68 = (__int16 *)(a1 + 16 * (int)(16 * v43 * v83 % v81 / v84) + 512);
          do
          {
            uint64_t v69 = (v5 * v67);
            int v70 = *(__int16 *)(v85 + 2 * v69) * *v68;
            uint64_t v71 = 8;
            uint64_t v72 = 1;
            do
            {
              int v73 = v70 + *(__int16 *)(*(void *)((char *)&v85 + v71) + 2 * v69) * v68[v72];
              if (v73 >= 0x7FFF) {
                int v73 = 0x7FFF;
              }
              if (v73 <= -32768) {
                int v70 = -32768;
              }
              else {
                int v70 = v73;
              }
              ++v72;
              v71 += 8;
            }
            while (v71 != 64);
            int v74 = v70 + v11;
            if (v70 + v11 >= 0x7FFF) {
              int v74 = 0x7FFF;
            }
            if (v74 <= -32768) {
              int v74 = -32768;
            }
            int v75 = v74 >> *(unsigned char *)(a1 + 240);
            if (v75 >= 255) {
              int v75 = 255;
            }
            v13[v43 + v6 * v67++] = v75 & ~(v75 >> 31);
          }
          while (v67 != v7);
        }
        ++v43;
      }
      while (v43 != v6);
    }
    int v12 = v80 + 1;
  }
  while (v80 != 2);
  sub_1BBB1E980(*(unsigned char **)(a1 + 22344), *(void *)(a1 + 22352), v77, v78[22], v78[23], v78[6], v78[7]);
  return 0;
}

uint64_t sub_1BBB1F9D8(uint64_t a1, double a2, int32x4_t a3)
{
  unsigned int v3 = (char *)(a1 + 22272);
  uint64_t v4 = *(unsigned int *)(a1 + 22368);
  unsigned int v5 = *(_DWORD *)(a1 + 22372);
  int v6 = 1 << (2 * *(unsigned char *)(a1 + 240) - 1);
  char v7 = *(unsigned char *)(a1 + 22272);
  int v8 = 1 << (v7 - 5);
  if (v5)
  {
    int v9 = 0;
    int v10 = (v4 - 8) << v7;
    int v11 = (v5 - 8) << v7;
    int v12 = 2 << v7;
    __int16 v13 = *(_WORD *)(a1 + 22284) - v12;
    int v14 = (__int16)(*(_WORD *)(a1 + 22278) - v12);
    do
    {
      if (v4)
      {
        uint64_t v15 = 0;
        int v16 = v14 + v9 * *(__int16 *)(a1 + 22276);
        int v17 = v13 + v9 * *(__int16 *)(a1 + 22282);
        do
        {
          uint64_t v18 = 0;
          int v19 = 0;
          int v20 = v16 + v15 * *(__int16 *)(a1 + 22274);
          int v22 = v20 & ~(v20 >> 31);
          if (v10 < v22) {
            int v22 = v10;
          }
          int v21 = v17 + v15 * *(__int16 *)(a1 + 22280);
          int v23 = v21 & ~(v21 >> 31);
          if (v11 < v23) {
            int v23 = v11;
          }
          char v24 = *v3 - 4;
          int v25 = (v22 + v8) >> v24;
          unsigned int v26 = ((v23 + v8) >> v24) & 0xF;
          int v27 = (v23 + v8) >> v24 >> 4;
          int v28 = *(_DWORD *)(a1 + 22304);
          unsigned int v29 = (int16x4_t *)(a1 + 16 * (v25 & 0xF));
          int32x4_t v30 = vmovl_s16(v29[2752]);
          int v31 = v28 * v27 + (v25 >> 4);
          uint64_t v32 = a1 + 22016 + 16 * v26;
          do
          {
            uint64_t v33 = *(void *)(a1 + 22328) + v31;
            a3.i32[0] = *(_DWORD *)v33;
            a3 = vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a3.i8)), v30);
            v19 += (vaddvq_s32(a3)
                  + *(unsigned __int8 *)(v33 + 4) * v29[2753].i16[0]
                  + *(unsigned __int8 *)(v33 + 5) * v29[2753].i16[1])
                 * *(__int16 *)(v32 + v18);
            v18 += 2;
            v31 += v28;
          }
          while (v18 != 12);
          int v34 = ((v19 & ~(v19 >> 31)) + v6) >> (2 * *(unsigned char *)(a1 + 240));
          if (v34 >= 255) {
            LOBYTE(v34) = -1;
          }
          *(unsigned char *)(*(void *)(a1 + 22344) + (*(_DWORD *)(a1 + 22312) * v9) + v15++) = v34;
        }
        while (v15 != v4);
      }
      ++v9;
    }
    while (v9 != v5);
    char v7 = *v3;
  }
  if (v5 >= 2)
  {
    int v35 = 0;
    LODWORD(v36) = v4 >> 1;
    unsigned int v37 = v5 >> 1;
    signed int v38 = ((v4 >> 1) - 4) << v7;
    int v39 = (v37 - 4) << v7;
    int v40 = 1 << v7;
    int v69 = (__int16)((*(__int16 *)(a1 + 22284) >> 1) - v40);
    int v70 = (__int16)((*(__int16 *)(a1 + 22278) >> 1) - v40);
    if (v4 >> 1 <= 1) {
      uint64_t v36 = 1;
    }
    else {
      uint64_t v36 = v36;
    }
    int v72 = v4;
    uint64_t v73 = v36;
    if (v37 <= 1) {
      int v41 = 1;
    }
    else {
      int v41 = v37;
    }
    int v71 = v41;
    do
    {
      if (v4 >= 2)
      {
        uint64_t v42 = 0;
        int v74 = v70 + v35 * *(__int16 *)(a1 + 22276);
        int v43 = v69 + v35 * *(__int16 *)(a1 + 22282);
        do
        {
          uint64_t v44 = 0;
          int v45 = v74 + v42 * *(__int16 *)(a1 + 22274);
          int v47 = v45 & ~(v45 >> 31);
          if (v38 < v47) {
            int v47 = v38;
          }
          int v46 = v43 + v42 * *(__int16 *)(a1 + 22280);
          int v48 = v46 & ~(v46 >> 31);
          if (v39 < v48) {
            int v48 = v39;
          }
          char v49 = *v3 - 4;
          int v50 = (v47 + v8) >> v49;
          int v51 = (v48 + v8) >> v49;
          int v52 = v51 >> 4;
          unsigned int v53 = (v50 >> 3) & 0xFFFFFFFE;
          uint64_t v54 = (char *)&unk_1BBB8BC45 + 4 * (v50 & 0xF);
          int v55 = *v54;
          int v56 = v54[1];
          int v57 = v54[2];
          int v58 = v54[3];
          uint64_t v59 = (char *)&unk_1BBB8BC45 + 4 * (v51 & 0xF);
          char v60 = 1;
          do
          {
            uint64_t v61 = 0;
            int v62 = 0;
            char v63 = v60;
            int v64 = *(_DWORD *)(a1 + 22308);
            int v66 = v53 + v52 * v64 + v44;
            do
            {
              uint64_t v65 = *(void *)(a1 + 22336);
              v62 += (*(unsigned __int8 *)(v65 + v66) * v55
                    + *(unsigned __int8 *)(v65 + v66 + 2) * v56
                    + *(unsigned __int8 *)(v65 + v66 + 4) * v57
                    + *(unsigned __int8 *)(v65 + v66 + 6) * v58)
                   * v59[v61++];
              v66 += v64;
            }
            while (v61 != 4);
            char v60 = 0;
            int v67 = ((v62 & ~(v62 >> 31)) + v6) >> (2 * *(unsigned char *)(a1 + 240));
            if (v67 >= 255) {
              LOBYTE(v67) = -1;
            }
            *(unsigned char *)(*(void *)(a1 + 22352) + v44 + (*(_DWORD *)(a1 + 22316) * v35) + 2 * (int)v42) = v67;
            uint64_t v44 = 1;
          }
          while ((v63 & 1) != 0);
          ++v42;
        }
        while (v42 != v73);
      }
      ++v35;
      LODWORD(v4) = v72;
    }
    while (v35 != v71);
  }
  return 0;
}

uint64_t sub_1BBB1FD8C(uint64_t a1)
{
  v32[8] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int *)(a1 + 22376);
  uint64_t v2 = *(int *)(a1 + 22304);
  char v3 = 1;
  memset(&v32[5], 0, 24);
  __int16 v31 = 0;
  uint64_t v30 = 0;
  do
  {
    char v4 = v3;
    int v5 = *(_DWORD *)(a1 + 22380);
    if (v3)
    {
      uint64_t v6 = *(void *)(a1 + 22328);
      uint64_t v7 = *(void *)(a1 + 22344);
    }
    else
    {
      uint64_t v8 = (*(_DWORD *)(a1 + 22312) * v5);
      int v5 = v5 >> 1;
      uint64_t v6 = *(void *)(a1 + 22328) + (*(_DWORD *)(a1 + 22372) * *(_DWORD *)(a1 + 22304));
      uint64_t v7 = *(void *)(a1 + 22344) + v8;
    }
    if (v5 >= 1)
    {
      int64_t v9 = 0;
      do
      {
        int64_t v10 = v9;
        uint64_t v11 = ((int)v9 - 2) * (int)v2;
        if ((unint64_t)v10 < 2) {
          uint64_t v11 = 0;
        }
        uint64_t v12 = v6 + v11;
        uint64_t v13 = ((int)v10 - 1) * (int)v2;
        if (!v10) {
          uint64_t v13 = 0;
        }
        v32[0] = v12;
        v32[1] = v6 + v13;
        int64_t v9 = v10 + 1;
        if (v10 <= v5 - 2) {
          int v14 = v10 + 1;
        }
        else {
          int v14 = v5 - 1;
        }
        v32[2] = v6 + v10 * v2;
        v32[3] = v6 + v14 * (int)v2;
        int v15 = v10 + 2;
        if (v10 > v5 - 3) {
          int v15 = v5 - 1;
        }
        v32[4] = v6 + v15 * (int)v2;
        if ((int)v1 >= 1)
        {
          for (uint64_t i = 0; i != v1; ++i)
          {
            uint64_t v17 = 0;
            __int16 v18 = 0;
            int v19 = *(unsigned __int8 *)(v6 + v10 * v2 + i);
            char v20 = *(unsigned char *)(a1 + 312) - 1;
            do
            {
              int v21 = *(unsigned __int8 *)(v32[v17] + i) - v19;
              unsigned int v22 = v21 * v21;
              if (v22 >= 0x100) {
                unsigned int v22 = 256;
              }
              int v23 = v22 << v20;
              if (v23 >= 256) {
                int v23 = 256;
              }
              unsigned int v24 = ((256 - v23) * word_1BBB8BC90[v17] + 128) >> 8;
              *((_WORD *)&v30 + v17) = v24;
              v18 += v24;
              ++v17;
            }
            while (v17 != 5);
            uint64_t v25 = 0;
            int v26 = 0;
            WORD2(v30) = WORD2(v30) - v18 + 128;
            do
            {
              int v27 = v26 + *(unsigned __int8 *)(v32[v25] + i) * *((__int16 *)&v30 + v25);
              if (v27 >= 0x7FFF) {
                int v27 = 0x7FFF;
              }
              if (v27 <= -32768) {
                int v26 = -32768;
              }
              else {
                int v26 = v27;
              }
              ++v25;
            }
            while (v25 != 5);
            if (v26 >= 32703) {
              int v28 = 32703;
            }
            else {
              int v28 = v26;
            }
            *(unsigned char *)(v7 + (i + *(_DWORD *)(a1 + 22312) * v10)) = (v28 + 64) >> 7;
          }
        }
      }
      while (v9 != v5);
    }
    char v3 = 0;
  }
  while ((v4 & 1) != 0);
  return 0;
}

uint64_t sub_1BBB1FFF8(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 22304);
  char v3 = (const void **)(a1 + 22328);
  char v4 = (void **)(a1 + 22344);
  if (*(unsigned char *)(a1 + 244))
  {
    memcpy(*(void **)(a1 + 272), *(const void **)(a1 + 22328), (3 * *(_DWORD *)(a1 + 22380) * *(_DWORD *)(a1 + 22312)) >> 1);
  }
  else
  {
    int v5 = (uint64_t *)(a1 + 272);
    int v6 = *(_DWORD *)(a1 + 22376);
    char v7 = 1;
    do
    {
      char v8 = v7;
      int v9 = *(_DWORD *)(a1 + 22380);
      if (v8)
      {
        int64_t v10 = (unsigned __int8 *)*v3;
        uint64_t v11 = *v4;
        uint64_t v12 = *v5;
      }
      else
      {
        uint64_t v13 = (*(_DWORD *)(a1 + 22312) * v9);
        int v9 = v9 >> 1;
        uint64_t v14 = (*(_DWORD *)(a1 + 22372) * *(_DWORD *)(a1 + 22304));
        int64_t v10 = (unsigned __int8 *)*v3 + v14;
        uint64_t v11 = (char *)*v4 + v13;
        uint64_t v12 = *v5 + v14;
      }
      if (v9 >= 1)
      {
        int v15 = 0;
        int v16 = 1;
        do
        {
          if (v16 >= v9 - 1) {
            int v17 = v9 - 1;
          }
          else {
            int v17 = v16;
          }
          if (v15 <= 1) {
            int v18 = 1;
          }
          else {
            int v18 = v15;
          }
          if (v6 >= 1)
          {
            int v19 = 0;
            int v20 = v18 - 1;
            do
            {
              unsigned int v21 = v19 + v15 * *v2;
              int v22 = v10[v21];
              int v23 = *(unsigned __int8 *)(v12 + v21);
              int v24 = v22 - v23;
              if (v22 - v23 < 0) {
                int v24 = v23 - v22;
              }
              int v25 = v10[v19 + v20 * *v2] - *(unsigned __int8 *)(v12 + (v19 + v20 * *v2));
              if (v25 < 0) {
                int v25 = *(unsigned __int8 *)(v12 + (v19 + v20 * *v2)) - v10[v19 + v20 * *v2];
              }
              int v26 = v10[v19 + v17 * *v2] - *(unsigned __int8 *)(v12 + (v19 + v17 * *v2));
              if (v26 < 0) {
                int v26 = *(unsigned __int8 *)(v12 + (v19 + v17 * *v2)) - v10[v19 + v17 * *v2];
              }
              unsigned int v27 = (v24 + ((v25 + v26 + 1) >> 1) + 1) >> 1;
              unsigned int v28 = v27 * v27;
              if (v28 >= 0x100) {
                unsigned int v28 = 256;
              }
              BOOL v29 = (unsigned __int16)(v28 << (*(unsigned char *)(a1 + 242) - 1)) <= 0x100u;
              __int16 v30 = 256 - (v28 << (*(unsigned char *)(a1 + 242) - 1));
              if (!v29) {
                __int16 v30 = 0;
              }
              int v31 = (__int16)(*(unsigned __int8 *)(a1 + 243) * v30) + 128;
              int v32 = (v31 >> 8) * v23 + (128 - (v31 >> 8)) * v22;
              if (v32 >= 32703) {
                int v32 = 32703;
              }
              v11[v19 + v15 * *(_DWORD *)(a1 + 22312)] = (v32 + 64) >> 7;
              ++v19;
            }
            while (v6 != v19);
          }
          ++v15;
          ++v16;
        }
        while (v15 != v9);
      }
      char v7 = 0;
    }
    while ((v8 & 1) != 0);
    char v3 = (const void **)(a1 + 22344);
    char v4 = (void **)(a1 + 272);
  }
  memcpy(*v4, *v3, (3 * v2[2] * v2[19]) >> 1);
  *(unsigned char *)(a1 + 244) = 0;
  return 0;
}

uint64_t sub_1BBB20214(uint64_t a1, double a2, double a3, double a4, double a5, int32x4_t a6)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  char v7 = (int *)(a1 + 22304);
  if ((*(_DWORD *)(a1 + 248) - *(_DWORD *)(a1 + 252)) <= 2)
  {
    BOOL v8 = *(unsigned char *)(a1 + 244) == 0;
  }
  else
  {
    BOOL v8 = 0;
    *(unsigned char *)(a1 + 244) = 1;
  }
  int v9 = *(_DWORD *)(a1 + 256);
  if (v9 < 1) {
    int v10 = 1;
  }
  else {
    int v10 = 3;
  }
  if (v9 >= 4) {
    int v10 = 5;
  }
  if (!v8 || !*(unsigned char *)(a1 + 22512))
  {
    unsigned int v97 = *(_DWORD *)(a1 + 22372);
    if (v97)
    {
      for (unsigned int i = 0; i < v97; ++i)
      {
        memcpy((void *)(*(void *)(a1 + 22344) + v7[2] * i), (const void *)(*(void *)(a1 + 22328) + *v7 * i), v7[18]);
        unsigned int v97 = v7[17];
      }
      if (v97 >= 2)
      {
        unsigned int v99 = 0;
        do
        {
          memcpy((void *)(*(void *)(a1 + 22352) + v7[2] * v99), (const void *)(*(void *)(a1 + 22336) + *v7 * v99), v7[18]);
          ++v99;
          unsigned int v97 = v7[17];
        }
        while (v99 < v97 >> 1);
      }
    }
    bzero(*(void **)(a1 + 22504), 4 * (v7[16] >> 3) * (v97 >> 3));
    bzero(*(void **)(a1 + 22464), (v7[16] >> 3) * (v7[17] >> 3));
    *(unsigned char *)(a1 + 264) = 0;
    *(unsigned char *)(a1 + 244) = 0;
    goto LABEL_169;
  }
  unsigned int v11 = (*(_DWORD *)(a1 + 22448) - 14) & ~((*(_DWORD *)(a1 + 22448) - 14) >> 31);
  unsigned int v12 = *(_DWORD *)(a1 + 22372);
  if (v12 < 0x10) {
    goto LABEL_66;
  }
  int v13 = 0;
  unsigned int v14 = 0;
  LODWORD(v15) = *(_DWORD *)(a1 + 22368);
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  do
  {
    if (v15 < 0x10) {
      goto LABEL_65;
    }
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = 0;
      LODWORD(v20) = 0;
      uint64_t v21 = *v7;
      uint64_t v22 = *(void *)(a1 + 22328) + v17 + (v13 * v21);
      char v23 = 1;
      do
      {
        uint64_t v24 = 0;
        char v25 = v23;
        uint64_t v26 = v19 * v21;
        uint64_t v20 = (int)v20;
        int v27 = v20 + 2;
        uint64_t v28 = v22 + v26;
        do
        {
          uint64_t v29 = 0;
          int v30 = 0;
          uint64_t v31 = v28 + v24;
          do
          {
            for (uint64_t j = 0; j != 8; ++j)
              v30 += *(unsigned __int8 *)(v31 + j);
            ++v29;
            v31 += v21;
          }
          while (v29 != 8);
          uint64_t v33 = 0;
          int v34 = 0;
          unsigned int v35 = v30 + 32;
          v178[v20] = v35 >> 6;
          int v36 = (v35 >> 6);
          uint64_t v37 = v28 + v24;
          do
          {
            for (uint64_t k = 0; k != 8; ++k)
              v34 += (*(unsigned __int8 *)(v37 + k) - v36) * (*(unsigned __int8 *)(v37 + k) - v36);
            ++v33;
            v37 += v21;
          }
          while (v33 != 8);
          v179.i32[v20++] = (v34 + 32) >> 6;
          uint64_t v24 = 8;
        }
        while (v27 != v20);
        char v23 = 0;
        uint64_t v19 = 8;
      }
      while ((v25 & 1) != 0);
      unsigned int v39 = v15 >> 3;
      uint64_t v40 = (int)((v15 >> 3) * 2 * v14 + 2 * v18);
      uint32x4_t v179 = vmaxq_u32(v179, v16);
      uint64_t v41 = *(void *)(a1 + 22504);
      if (!*(_DWORD *)(v41 + 4 * v40))
      {
        *(_DWORD *)(v41 + 4 * v40) = 1;
        uint64_t v41 = *(void *)(a1 + 22504);
      }
      uint64_t v42 = v40 | 1;
      if (!*(_DWORD *)(v41 + 4 * (v40 | 1)))
      {
        *(_DWORD *)(v41 + 4 * v42) = 1;
        uint64_t v41 = *(void *)(a1 + 22504);
      }
      int v43 = v39 * ((2 * v14) | 1) + 2 * v18;
      uint64_t v44 = v43;
      if (!*(_DWORD *)(v41 + 4 * v43))
      {
        *(_DWORD *)(v41 + 4 * v43) = 1;
        uint64_t v41 = *(void *)(a1 + 22504);
      }
      uint64_t v45 = v43 + 1;
      if (!*(_DWORD *)(v41 + 4 * v45)) {
        *(_DWORD *)(v41 + 4 * v45) = 1;
      }
      __int32 v46 = v179.i32[1];
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v40) = v179.i32[0];
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v42) = v46;
      __int32 v47 = v179.i32[3];
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v44) = v179.i32[2];
      *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v45) = v47;
      unsigned int v48 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v40);
      unsigned int v49 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v40);
      uint64_t v50 = *(void *)(a1 + 22496);
      if (v48 >= v49)
      {
        *(_DWORD *)(v50 + 4 * v40) = v48 / v49;
      }
      else
      {
        *(_DWORD *)(v50 + 4 * v40) = v49 / v48;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v40) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v40);
      }
      unsigned int v51 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v42);
      unsigned int v52 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v42);
      uint64_t v53 = *(void *)(a1 + 22496);
      if (v51 >= v52)
      {
        *(_DWORD *)(v53 + 4 * v42) = v51 / v52;
      }
      else
      {
        *(_DWORD *)(v53 + 4 * v42) = v52 / v51;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v42) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v42);
      }
      unsigned int v54 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v44);
      unsigned int v55 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v44);
      uint64_t v56 = *(void *)(a1 + 22496);
      if (v54 >= v55)
      {
        *(_DWORD *)(v56 + 4 * v44) = v54 / v55;
      }
      else
      {
        *(_DWORD *)(v56 + 4 * v44) = v55 / v54;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v44) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v44);
      }
      unsigned int v57 = *(_DWORD *)(*(void *)(a1 + 22488) + 4 * v45);
      unsigned int v58 = *(_DWORD *)(*(void *)(a1 + 22504) + 4 * v45);
      uint64_t v59 = *(void *)(a1 + 22496);
      if (v57 >= v58)
      {
        *(_DWORD *)(v59 + 4 * v45) = v57 / v58;
      }
      else
      {
        *(_DWORD *)(v59 + 4 * v45) = v58 / v57;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v45) *= *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v45);
      }
      *(unsigned char *)(*(void *)(a1 + 22456) + v40) = v178[0];
      *(unsigned char *)(*(void *)(a1 + 22456) + v42) = v178[1];
      *(unsigned char *)(*(void *)(a1 + 22456) + v44) = v178[2];
      *(unsigned char *)(*(void *)(a1 + 22456) + v45) = v178[3];
      int v60 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v40) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v40);
      if (v60 < 0) {
        int v60 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v40) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v40);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v40) = v10 + v10 * v60 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v40);
      int v61 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v42) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v42);
      if (v61 < 0) {
        int v61 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v42) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v42);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v42) = v10 + v10 * v61 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v42);
      int v62 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v44) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v44);
      if (v62 < 0) {
        int v62 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v44) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v44);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v44) = v10 + v10 * v62 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v44);
      int v63 = *(unsigned __int8 *)(*(void *)(a1 + 22456) + v45) - *(unsigned __int8 *)(*(void *)(a1 + 22464) + v45);
      if (v63 < 0) {
        int v63 = *(unsigned __int8 *)(*(void *)(a1 + 22464) + v45) - *(unsigned __int8 *)(*(void *)(a1 + 22456) + v45);
      }
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v45) = v10 + v10 * v63 * *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v45);
      uint64_t v64 = *(void *)(a1 + 22496);
      int v65 = *(_DWORD *)(v64 + 4 * v40);
      int v66 = v65 + *(_DWORD *)(v64 + 4 * v44) + *(_DWORD *)(v64 + 4 * v42) + *(_DWORD *)(v64 + 4 * v45) + 2;
      *(_DWORD *)(v64 + 4 * v40) = v65 + (v66 >> 3);
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v42) += v66 >> 3;
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v44) += v66 >> 3;
      *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v45) += v66 >> 3;
      unint64_t v15 = *(unsigned int *)(a1 + 22368);
      if (v18 < v15 >> 6
        || v18 > (*(_DWORD *)(a1 + 22368) - (*(_DWORD *)(a1 + 22368) >> 6))
        || (unsigned int v67 = *(_DWORD *)(a1 + 22372), v14 < v67 >> 6))
      {
        if (v9 > 0) {
          goto LABEL_63;
        }
LABEL_62:
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v40) -= 4;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v42) -= 4;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v44) -= 4;
        *(_DWORD *)(*(void *)(a1 + 22496) + 4 * v45) -= 4;
        LODWORD(v15) = *(_DWORD *)(a1 + 22368);
        goto LABEL_63;
      }
      if (v9 <= 0 && v14 > v67 - (v67 >> 6)) {
        goto LABEL_62;
      }
LABEL_63:
      ++v18;
      v17 += 16;
    }
    while (v18 < v15 >> 4);
    unsigned int v12 = *(_DWORD *)(a1 + 22372);
LABEL_65:
    ++v14;
    v13 += 16;
  }
  while (v14 < v12 >> 4);
LABEL_66:
  if (v11 >= 4 * *(unsigned __int8 *)(a1 + 264) + 14)
  {
    if (v12 >= 2)
    {
      int v100 = 0;
      int v101 = 0;
      uint64_t v102 = *(void *)(a1 + 22336);
      int v103 = *v7;
      uint64_t v104 = *(void *)(a1 + 22352);
      unsigned int v105 = v12 >> 1;
      int v106 = *(_DWORD *)(a1 + 22312);
      int v107 = 3 * v11;
      unint64_t v108 = *(unsigned int *)(a1 + 22368);
      unsigned int v109 = v107 + 76;
      do
      {
        if (v108)
        {
          for (unint64_t m = 0; m < v108; m += 2)
          {
            int v111 = *(unsigned __int8 *)(v102 + (v100 + m));
            unsigned int v112 = v100 + m + 1;
            int v113 = *(unsigned __int8 *)(v102 + v112);
            int v114 = v111 - v113;
            if (v111 - v113 < 0) {
              int v114 = v113 - v111;
            }
            int v115 = (128 - v114) & ~((128 - v114) >> 31);
            if (v115 <= v109) {
              int v115 = v109;
            }
            if (v115 >= 128) {
              int v115 = 128;
            }
            *(unsigned char *)(v102 + (v100 + m)) = ((v115 * (v111 + 32640) + 64) >> 7) ^ 0x80;
            *(unsigned char *)(v102 + v112) = ((v115 * (v113 + 32640) + 64) >> 7) ^ 0x80;
          }
        }
        ++v101;
        v100 += v103;
      }
      while (v101 != v105);
      unsigned int v116 = 0;
      unsigned int v117 = 0;
      int v118 = 0;
      do
      {
        if (v108)
        {
          unsigned int v119 = v116;
          unsigned int v120 = v117;
          unint64_t v121 = v108;
          do
          {
            *(unsigned char *)(v104 + v120++) = *(unsigned char *)(v102 + v119++);
            --v121;
          }
          while (v121);
        }
        ++v118;
        v117 += v106;
        v116 += v103;
      }
      while (v118 != v105);
      unsigned int v12 = v7[17];
    }
    if (v12)
    {
      unsigned int v122 = 0;
      do
      {
        memcpy((void *)(*(void *)(a1 + 22344) + v7[2] * v122), (const void *)(*(void *)(a1 + 22328) + *v7 * v122), v7[18]);
        ++v122;
        unsigned int v123 = v7[17];
      }
      while (v122 < v123);
      char v124 = 0;
      goto LABEL_159;
    }
    unsigned int v174 = 0;
    *(unsigned char *)(a1 + 264) = 0;
  }
  else
  {
    uint64_t v68 = *(unsigned int *)(a1 + 22368);
    unsigned int v177 = v11;
    if (v11 > 8 || v12 > 0xF0 || v68 > 0x140)
    {
      if (v12)
      {
        int v125 = 0;
        int v126 = 0;
        unsigned int v127 = 0;
        uint64_t v128 = *(void *)(a1 + 22328);
        uint64_t v129 = *(void *)(a1 + 272);
        uint64_t v130 = *(void *)(a1 + 22344);
        int v131 = *v7;
        int v132 = *(_DWORD *)(a1 + 22312);
        do
        {
          if (v68)
          {
            for (uint64_t n = 0; n != v68; ++n)
            {
              int v134 = *(unsigned __int8 *)(v128 + (v125 + n));
              int v135 = *(unsigned __int8 *)(v129 + (v125 + n));
              int v136 = *(_DWORD *)(*(void *)(a1 + 22496)
                               + 4 * (int)((v127 >> 3) * (v68 >> 3) + (n >> 3)));
              if (v136 >= 16) {
                int v136 = 16;
              }
              if (v136 <= 1) {
                LOBYTE(v136) = 1;
              }
              unsigned int v137 = (256 - ((((v134 - v135) * (v134 - v135)) << (v136 - 1)) >> 2)) & ~((int)(256 - ((((v134 - v135) * (v134 - v135)) << (v136 - 1)) >> 2)) >> 31);
              signed int v138 = ((128 - (v137 >> 2)) * v134 + (v137 >> 2) * v135 + 64) >> 7;
              if (v138 >= 255) {
                LOBYTE(v138) = -1;
              }
              *(unsigned char *)(v130 + (v126 + n)) = v138;
            }
          }
          ++v127;
          v126 += v132;
          v125 += v131;
        }
        while (v127 != v12);
      }
    }
    else if (v12)
    {
      int v69 = 0;
      int v70 = 0;
      unsigned int v71 = 0;
      uint64_t v72 = *(void *)(a1 + 22328);
      uint64_t v73 = *(void *)(a1 + 272);
      uint64_t v74 = *(void *)(a1 + 22344);
      int v75 = *v7;
      int v76 = *(_DWORD *)(a1 + 22312);
      do
      {
        if (v71 >= v12 - 2) {
          unsigned int v77 = v12 - 2;
        }
        else {
          unsigned int v77 = v71;
        }
        if (v71) {
          unsigned int v78 = v71 - 1;
        }
        else {
          unsigned int v78 = 0;
        }
        if (v68)
        {
          uint64_t v79 = 0;
          int v80 = v75 + v75 * v77;
          int v81 = v75 * v78;
          do
          {
            int v82 = *(unsigned __int8 *)(v72 + (v69 + v79));
            int v83 = *(unsigned __int8 *)(v72 + (v81 + v79));
            int v84 = *(unsigned __int8 *)(v72 + (v80 + v79));
            int v85 = 256 - 4 * (v82 - v83) * (v82 - v83);
            int v86 = 256 - 4 * (v82 - v84) * (v82 - v84);
            unsigned int v87 = ((5 * (v85 & ~(v85 >> 31))) >> 4) & 0xFFFFFF;
            unsigned int v88 = (((5 * (v86 & ~(v86 >> 31))) >> 4) & 0xFFFFFF) * v84
                + v87 * v83
                + (256 - (v87 + ((80 * (v86 & ~(v86 >> 31))) >> 8))) * v82
                + 128;
            unsigned int v89 = v70 + v79;
            *(unsigned char *)(v74 + v89) = BYTE1(v88);
            int v90 = *(unsigned __int8 *)(v72 + (v69 + v79));
            *(unsigned char *)(v74 + v89) = v90;
            int v91 = *(unsigned __int8 *)(v73 + (v69 + v79));
            int v92 = *(unsigned __int8 *)(v72 + (v69 + v79)) - v91;
            int v93 = v92 * v92;
            int v94 = *(_DWORD *)(*(void *)(a1 + 22496)
                            + 4 * (int)((v71 >> 3) * (v68 >> 3) + (v79 >> 3)));
            if (v94 >= 16) {
              int v94 = 16;
            }
            if (v94 <= 1) {
              LOBYTE(v94) = 1;
            }
            unsigned int v95 = (256 - ((v93 << (v94 - 1)) >> 2)) & ~((int)(256 - ((v93 << (v94 - 1)) >> 2)) >> 31);
            signed int v96 = ((128 - (v95 >> 2)) * v90 + (v95 >> 2) * v91 + 64) >> 7;
            if (v96 >= 255) {
              LOBYTE(v96) = -1;
            }
            *(unsigned char *)(v74 + v89) = v96;
            ++v79;
          }
          while (v68 != v79);
        }
        ++v71;
        v70 += v76;
        v69 += v75;
      }
      while (v71 != v12);
    }
    unsigned int v123 = *(_DWORD *)(a1 + 22372);
    if (v123 >= 2)
    {
      int v139 = 0;
      int v140 = 0;
      uint64_t v141 = *(void *)(a1 + 22336);
      int v142 = *v7;
      uint64_t v143 = *(void *)(a1 + 22352);
      unsigned int v144 = v123 >> 1;
      int v145 = *(_DWORD *)(a1 + 22312);
      unint64_t v146 = *(unsigned int *)(a1 + 22368);
      do
      {
        if (v146)
        {
          for (iunsigned int i = 0; ii < v146; ii += 2)
          {
            int v148 = *(unsigned __int8 *)(v141 + (v139 + ii));
            unsigned int v149 = v139 + ii + 1;
            int v150 = *(unsigned __int8 *)(v141 + v149);
            int v151 = v148 - v150;
            if (v148 - v150 < 0) {
              int v151 = v150 - v148;
            }
            int v152 = (128 - v151) & ~((128 - v151) >> 31);
            if (v152 <= 3 * v177 + 76) {
              int v152 = 3 * v177 + 76;
            }
            if (v152 >= 128) {
              int v152 = 128;
            }
            *(unsigned char *)(v141 + (v139 + ii)) = ((v152 * (v148 + 32640) + 64) >> 7) ^ 0x80;
            *(unsigned char *)(v141 + v149) = ((v152 * (v150 + 32640) + 64) >> 7) ^ 0x80;
          }
        }
        ++v140;
        v139 += v142;
      }
      while (v140 != v144);
      unsigned int v153 = 0;
      unsigned int v154 = 0;
      unsigned int v155 = 0;
      v156.i64[0] = 0xFF000000FFLL;
      v156.i64[1] = 0xFF000000FFLL;
      v157.i64[0] = 0x10000000100;
      v157.i64[1] = 0x10000000100;
      do
      {
        unsigned int v158 = v155 - 2;
        if (v155 < 2) {
          unsigned int v158 = 0;
        }
        if (v155 >= v144 - 2) {
          unsigned int v159 = v144 - 2;
        }
        else {
          unsigned int v159 = v155;
        }
        unsigned int v160 = v155 - 1;
        if (!v155) {
          unsigned int v160 = 0;
        }
        if (v146)
        {
          unsigned int v161 = v142 * v158;
          unsigned int v162 = v142 + v142 * v159;
          unsigned int v163 = v142 * v160;
          if (v155 <= v144 - 3) {
            unsigned int v164 = v155 + 2;
          }
          else {
            unsigned int v164 = v144 - 2;
          }
          unsigned int v165 = v153;
          unsigned int v166 = v154;
          unint64_t v167 = v146;
          unsigned int v168 = v164 * v142;
          do
          {
            unsigned int v169 = *(unsigned __int8 *)(v141 + v165);
            a6.i8[0] = *(unsigned char *)(v141 + v163);
            a6.i8[2] = *(unsigned char *)(v141 + v162);
            a6.i8[4] = *(unsigned char *)(v141 + v161);
            a6.i8[6] = *(unsigned char *)(v141 + v168);
            int32x4_t v170 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)a6.i8), v156);
            int32x4_t v171 = vsubq_s32(vdupq_n_s32(v169), v170);
            int32x4_t v172 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vmaxq_s32(vsubq_s32(v157, (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v171, v171), 3uLL)), (int32x4_t)0), (int32x4_t)xmmword_1BBB6FE80), 8uLL);
            a6 = vmulq_s32(v172, v170);
            a6.i32[0] = vaddvq_s32(a6);
            *(unsigned char *)(v143 + v166++) = (unsigned __int16)(a6.i16[0] + (256 - vaddvq_s32(v172)) * v169 + 128) >> 8;
            ++v168;
            ++v161;
            ++v162;
            ++v163;
            ++v165;
            --v167;
          }
          while (v167);
        }
        ++v155;
        v154 += v145;
        v153 += v142;
      }
      while (v155 != v144);
      unsigned int v123 = *(_DWORD *)(a1 + 22372);
    }
    char v124 = 1;
LABEL_159:
    *(unsigned char *)(a1 + 264) = v124;
    if (v123)
    {
      unsigned int v173 = 0;
      do
      {
        memcpy((void *)(*(void *)(a1 + 272) + *v7 * v173), (const void *)(*(void *)(a1 + 22344) + v7[2] * v173), v7[16]);
        ++v173;
        unsigned int v174 = v7[17];
      }
      while (v173 < v174);
      if (v174 >= 2)
      {
        unsigned int v175 = 0;
        do
        {
          memcpy((void *)(*(void *)(a1 + 272) + *v7 * v174 + *v7 * v175), (const void *)(*(void *)(a1 + 22352) + v7[2] * v175), v7[16]);
          ++v175;
          unsigned int v174 = v7[17];
        }
        while (v175 < v174 >> 1);
      }
    }
    else
    {
      unsigned int v174 = 0;
    }
  }
  memcpy(*(void **)(a1 + 22504), *(const void **)(a1 + 22488), 4 * (v7[16] >> 3) * (v174 >> 3));
  memcpy(*(void **)(a1 + 22464), *(const void **)(a1 + 22456), (v7[16] >> 3) * (v7[17] >> 3));
  *(unsigned char *)(a1 + 264) = 1;
LABEL_169:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 248);
  return 0;
}

void sub_1BBB20EEC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3)
  {
    char v4 = *(void **)(v3 + 24);
    if (v4)
    {
      do
      {
        int v5 = (void *)v4[3];
        free(v4);
        char v4 = v5;
      }
      while (v5);
    }
    *(void *)(v3 + 24) = 0;
    free(*(void **)(a1 + 168));
    *(void *)(a1 + 168) = 0;
  }
  else
  {
    int v6 = *(void **)(a1 + 176);
    if (v6) {
      free(v6);
    }
  }
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
}

double sub_1BBB20F70(uint64_t a1, unsigned int a2, unsigned int a3, char a4, int a5, char a6, int a7, int a8, double a9)
{
  *(unsigned char *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 4) = a2;
  *(double *)(a1 + 8) = (double)a2 / 90000.0;
  *(_DWORD *)(a1 + 16) = a3;
  if (a2) {
    unint64_t v13 = (((unint64_t)a2 >> 1) + 90000 * a3) / a2;
  }
  else {
    LODWORD(v13) = -1;
  }
  *(_DWORD *)(a1 + 20) = v13;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 52) = (int)(90000.0 / a9 + 0.5);
  int v14 = (int)((double)(int)v13 + 0.5);
  *(_DWORD *)(a1 + 36) = v14;
  *(_DWORD *)(a1 + 40) = v13 - v14;
  *(_DWORD *)(a1 + 44) = (int)((double)(int)v13 * 0.0);
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  uint64_t v15 = *(void *)(a1 + 168);
  if (v15)
  {
    uint32x4_t v16 = *(void **)(v15 + 24);
    if (v16)
    {
      do
      {
        uint64_t v17 = (void *)v16[3];
        free(v16);
        uint32x4_t v16 = v17;
      }
      while (v17);
    }
    *(void *)(v15 + 24) = 0;
    free(*(void **)(a1 + 168));
    *(void *)(a1 + 168) = 0;
  }
  else
  {
    unint64_t v18 = *(void **)(a1 + 176);
    if (v18) {
      free(v18);
    }
  }
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (!a5)
  {
    *(_DWORD *)(a1 + 92) = 0;
    *(void *)(a1 + 80) = 0;
    goto LABEL_14;
  }
  *(_DWORD *)(a1 + 92) = a5;
  uint64_t v19 = malloc_type_calloc(20 * (a5 + 1), 1uLL, 0x4AE20AB7uLL);
  *(void *)(a1 + 80) = v19;
  *(unsigned char *)(a1 + 96) = a6;
  if (v19)
  {
LABEL_14:
    *(unsigned char *)a1 = 1;
    *(_DWORD *)(a1 + 100) = a8;
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
  }
  return result;
}

BOOL sub_1BBB210F0(uint64_t a1, unsigned int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  unsigned int v11 = (long long *)(a1 + 60);
  long long v32 = *(_OWORD *)(a1 + 60);
  int v33 = *(_DWORD *)(a1 + 76);
  if (v32)
  {
    int v12 = *(_DWORD *)(a1 + 64);
    int v13 = *(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v13;
    if ((int)v32 < 1)
    {
      int v12 = 0;
    }
    else if (!*(unsigned char *)(a1 + 24) && v13 - (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40)) > v12)
    {
      int v12 = v13 - (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40));
    }
  }
  else
  {
    int v12 = 0;
    int v13 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 72) = v13;
  }
  *(_DWORD *)(a1 + 68) = v12;
  unint64_t v14 = *(unsigned int *)(a1 + 4);
  if (v14) {
    unint64_t v15 = ((v14 >> 1) + 90000 * a2) / v14;
  }
  else {
    LODWORD(v15) = -1;
  }
  int v16 = v13 + a3;
  int v17 = v15 + v12;
  *(_DWORD *)(a1 + 64) = v17;
  *(_DWORD *)(a1 + 76) = a2;
  if (v32 <= 0x7FFFFFFE)
  {
    int v18 = v17;
    if (!*(unsigned char *)(a1 + 24))
    {
      int v18 = v16 - (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40));
      if (v18 <= v17) {
        int v18 = v17;
      }
    }
  }
  else
  {
    int v18 = 0;
  }
  *a6 = v13 - v17;
  *a7 = *(_DWORD *)(a1 + 72);
  if (a5)
  {
    *(_DWORD *)(a1 + 48) = v16 - v18;
    unsigned int v19 = *(_DWORD *)(a1 + 92);
    if (v19)
    {
      unsigned int v20 = *(_DWORD *)(a1 + 88);
      if (*(unsigned char *)(a1 + 96)) {
        v20 %= v19;
      }
      uint64_t v21 = *(void *)(a1 + 80) + 20 * v20;
      long long v22 = *v11;
      *(_DWORD *)(v21 + 16) = *(_DWORD *)(a1 + 76);
      *(_OWORD *)uint64_t v21 = v22;
      unsigned int v23 = *(_DWORD *)(a1 + 88) + 1;
      *(_DWORD *)(a1 + 88) = v23;
      if (*(unsigned char *)(a1 + 96)) {
        v23 %= *(_DWORD *)(a1 + 92);
      }
      *(_DWORD *)(*(void *)(a1 + 80) + 20 * v23 + 12) = v16;
    }
    if (a4)
    {
      int v24 = *(_DWORD *)(a1 + 60);
      int v25 = 1;
      uint64_t v26 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
      if (v26)
      {
        uint64_t v27 = *(void *)(a1 + 176);
        if (v27)
        {
          *(void *)(v27 + 24) = v26;
          *(void *)(a1 + 176) = *(void *)(*(void *)(a1 + 176) + 24);
        }
        else
        {
          *(void *)(a1 + 168) = v26;
          *(void *)(a1 + 176) = v26;
        }
      }
      *uint64_t v26 = 1;
      v26[1] = v24;
      *((void *)v26 + 1) = (int)a2;
      v26[4] = a3;
      uint64_t v29 = (_DWORD *)(a1 + 184);
      *((void *)v26 + 3) = 0;
    }
    else
    {
      uint64_t v28 = *(void *)(a1 + 176);
      if (!v28)
      {
LABEL_34:
        int v30 = *(_DWORD *)(a1 + 60) + 1;
        *(_DWORD *)(a1 + 56) = a3;
        *(_DWORD *)(a1 + 60) = v30;
        return *a6 < *(_DWORD *)(a1 + 28);
      }
      ++*(_DWORD *)v28;
      *(void *)(v28 + 8) += (int)a2;
      uint64_t v29 = (_DWORD *)(v28 + 16);
      int v25 = a3;
    }
    *v29 += v25;
    goto LABEL_34;
  }
  *unsigned int v11 = v32;
  *(_DWORD *)(a1 + 76) = v33;
  return *a6 < *(_DWORD *)(a1 + 28);
}

uint64_t sub_1BBB21350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, signed int a5)
{
  uint64_t v5 = 0;
  if (!a1 || a5 < 1) {
    return v5;
  }
  int v9 = 0;
  long long v32 = (int *)(a2 + 23696);
  uint64_t v33 = a5;
  uint64_t v5 = a1;
  while (1)
  {
    if (!v5) {
      exit(0);
    }
    if (!*(unsigned char *)(v5 + 1397)) {
      break;
    }
    int v10 = *(_DWORD *)(v5 + 1288);
    int v11 = *(unsigned __int8 *)(v5 + 1354);
    int v12 = *(unsigned __int8 *)(v5 + 1397) << (*(unsigned char *)(v5 + 1354) != 0);
    uint64_t v13 = sub_1BBB21610(v10, v12, a5, a4);
    int v14 = *(_DWORD *)(a3 + 372);
    BOOL v15 = v13 != 0;
    if (v14 == 1)
    {
      if (!v13)
      {
        if (!v11) {
          goto LABEL_32;
        }
LABEL_17:
        uint64_t v16 = sub_1BBB21610(v10, v12 - 1, a5, a4);
        if (!v16) {
          goto LABEL_32;
        }
LABEL_18:
        if (*(unsigned char *)(v16 + 1402)) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = *(unsigned char *)(v16 + 1398) != 0;
        }
        if (v15 && v17) {
          break;
        }
        goto LABEL_32;
      }
      if (*(unsigned char *)(v13 + 1402))
      {
        if (!v11) {
          break;
        }
        goto LABEL_17;
      }
    }
    else if (!v13)
    {
      if (!v11) {
        goto LABEL_32;
      }
      uint64_t v16 = sub_1BBB21610(v10, v12 - 1, a5, a4);
      LOBYTE(v15) = 0;
      goto LABEL_22;
    }
    BOOL v15 = *(unsigned char *)(v13 + 1398) != 0;
    if (!v11)
    {
      if (*(unsigned char *)(v13 + 1398)) {
        break;
      }
      goto LABEL_32;
    }
    uint64_t v16 = sub_1BBB21610(v10, v12 - 1, a5, a4);
    if (v14 == 1)
    {
      if (!v16) {
        goto LABEL_32;
      }
      goto LABEL_18;
    }
LABEL_22:
    if (v16)
    {
      if (*(unsigned char *)(v16 + 1398) && v15) {
        break;
      }
    }
LABEL_32:
    unsigned int v19 = a4;
    uint64_t v20 = v33;
    while (1)
    {
      uint64_t v5 = *v19;
      if (!*(unsigned char *)(*v19 + 1398) && *(_DWORD *)(v5 + 1288) > v10) {
        break;
      }
      ++v19;
      if (!--v20)
      {
        uint64_t v5 = 0;
        break;
      }
    }
    if (++v9 == a5) {
      return 0;
    }
  }
  int v21 = *v32;
  int v22 = *v32 + 1;
  if (*(unsigned char *)(v5 + 1394))
  {
    if (*(unsigned char *)(v5 + 1393)) {
      goto LABEL_41;
    }
    LODWORD(v23) = v32[1];
    if (!*(unsigned char *)(v5 + 98)) {
      LODWORD(v23) = v23 + 1;
    }
    if ((int)v23 > v21)
    {
      uint64_t v26 = *(void *)(a2 + 22824);
      uint64_t v23 = *(unsigned int *)(v26 + 12);
      if ((int)v23 >= 1)
      {
        uint64_t v27 = v26 + 216;
        while (*(void *)v27)
        {
          *(_DWORD *)(*(void *)v27 + 1300) = *(_DWORD *)(*(void *)v27 + 1304) - v22;
          v27 += 8;
          if (!--v23) {
            goto LABEL_42;
          }
        }
      }
LABEL_41:
      LODWORD(v23) = 0;
    }
LABEL_42:
    int v24 = v32[1];
    v32[1] = v23;
    v32[2] = v24;
    *(_DWORD *)(*(void *)(a2 + 22824) + 16) = v23;
  }
  else
  {
    int v25 = v32[1];
    if (v25 >= v21)
    {
      uint64_t v28 = *(void *)(a2 + 22824);
      uint64_t v23 = *(unsigned int *)(v28 + 12);
      if ((int)v23 >= 1)
      {
        uint64_t v29 = v28 + 216;
        while (*(void *)v29)
        {
          *(_DWORD *)(*(void *)v29 + 1300) = *(_DWORD *)(*(void *)v29 + 1304) - v22;
          v29 += 8;
          if (!--v23) {
            goto LABEL_59;
          }
        }
      }
      LODWORD(v23) = 0;
    }
    else
    {
      LODWORD(v23) = v25 + 1;
    }
  }
LABEL_59:
  *(_DWORD *)(v5 + 1300) = v23;
  *(_DWORD *)(v5 + 1304) = v23;
  return v5;
}

uint64_t sub_1BBB21610(int a1, int a2, unsigned int a3, uint64_t *a4)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v6 = 0x7FFFFFFF;
  char v7 = a4;
  uint64_t v8 = a3;
  do
  {
    uint64_t v9 = *v7;
    if (*v7 && *(unsigned char *)(v9 + 1394) && *(_DWORD *)(v9 + 1288) < v6 && *(_DWORD *)(v9 + 1288) > a1)
    {
      uint64_t result = *v7;
      int v6 = *(_DWORD *)(v9 + 1288);
    }
    ++v7;
    --v8;
  }
  while (v8);
  while (result)
  {
    if (!--a2) {
      break;
    }
    int v10 = *(_DWORD *)(result + 1288);
    int v11 = 0x7FFFFFFF;
    int v12 = a4;
    uint64_t v13 = a3;
    uint64_t result = 0;
    do
    {
      uint64_t v14 = *v12;
      if (*v12 && *(unsigned char *)(v14 + 1394) && *(_DWORD *)(v14 + 1288) < v11 && *(_DWORD *)(v14 + 1288) > v10)
      {
        uint64_t result = *v12;
        int v11 = *(_DWORD *)(v14 + 1288);
      }
      ++v12;
      --v13;
    }
    while (v13);
  }
  return result;
}

void sub_1BBB216D8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 1320);
  *(_WORD *)(a2 + 24536) = 0;
  *(unsigned char *)(a2 + 24554) = a3;
  *(unsigned char *)(a2 + 24555) = a4;
  *(_DWORD *)(a2 + 23696) = *(_DWORD *)(a1 + 1868) - 1;
  uint64_t v5 = (_DWORD *)(a2 + 228);
  do
  {
    *(v5 - 1) = 0;
    *uint64_t v5 = v4;
    *(void *)(v5 - 51) = 0;
    *(void *)(v5 - 53) = 0;
    *(v5 - 49) = 0;
    *(void *)(v5 - 45) = 0;
    ++v4;
    *(void *)(v5 - 47) = 0;
    *(void *)(v5 - 43) = 0xFFFFFFFFLL;
    v5 += 190;
  }
  while (v4 != 30);
  *(void *)(a2 + 23656) = 0;
  *(void *)(a2 + 23680) = 0;
  *(void *)(a2 + 23700) = 0;
  *(_OWORD *)(a2 + 22816) = 0u;
  bzero((void *)(a2 + 22840), 0x220uLL);
}

void sub_1BBB2175C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    int v3 = *(_DWORD *)(a1 + 32) + 1;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = sub_1BBB217E4;
    v4[3] = &unk_1E6248C08;
    int v5 = a3;
    int v6 = v3;
    v4[4] = a2;
    dispatch_apply(v3, 0, v4);
  }
}

uint64_t sub_1BBB217E4(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 40) > a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v3 + 32) + 16 * v2))(*(void *)(*(void *)(v3 + 32)
                                                                                              + 16 * v2
                                                                                              + 8));
      v2 += *(int *)(v3 + 44);
    }
    while (v2 < *(unsigned int *)(v3 + 40));
  }
  return result;
}

uint64_t sub_1BBB21838(uint64_t a1, char *a2)
{
  uint64_t v4 = *(unsigned int **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 32);
  unint64_t v6 = *(unsigned __int8 *)(a1 + 36) + 1;
  char v7 = (unsigned int *)(*(void *)(a1 + 16) + (v6 >> 3));
  bzero(a2, 0x758uLL);
  if (v7 <= v4) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  uint64_t result = 4294958327;
  if (v5 < 0) {
    return result;
  }
  int v11 = ((v6 & 7) + 2) & 7;
  int v12 = (unsigned int *)((char *)v9 + ((unint64_t)((v6 & 7) + 2) >> 3));
  unsigned int v13 = (bswap32(*v12) << (((v6 & 7) + 2) & 7)) & 0xF8000000;
  if (!(bswap32(*v7) << (v6 & 7) >> 30) || v13 != 939524096) {
    return result;
  }
  unint64_t v15 = (v11 + 5);
  int v16 = ((_BYTE)v11 + 5) & 7;
  if (v12 > v4) {
    int v12 = v4;
  }
  BOOL v17 = (unsigned int *)((char *)v12 + (v15 >> 3));
  unsigned int v18 = bswap32(*v17);
  unsigned int v19 = v18 << v16 >> 24;
  *(_DWORD *)a2 = v19;
  uint64_t v20 = (1 << ((v18 << v16 >> 24) - 66)) & 0x400400801;
  if (v19 - 66 > 0x22 || v20 == 0) {
    return result;
  }
  if (v17 > v4) {
    BOOL v17 = v4;
  }
  unsigned int v24 = *(unsigned int *)((char *)v17 + 1);
  int v22 = (unsigned int *)((char *)v17 + 1);
  unsigned int v23 = v24;
  if (v22 > v4) {
    int v22 = v4;
  }
  a2[8] = ((bswap32(v23) << v16) & 0x80000000) != 0;
  unint64_t v25 = (v16 + 1);
  int v26 = v25 & 7;
  uint64_t v27 = (unsigned int *)((char *)v22 + (v25 >> 3));
  signed int v28 = bswap32(*v27) << v26;
  if (v27 > v4) {
    uint64_t v27 = v4;
  }
  a2[9] = v28 < 0;
  unint64_t v29 = (v26 + 1);
  int v30 = ((_BYTE)v26 + 1) & 7;
  uint64_t v31 = (unsigned int *)((char *)v27 + (v29 >> 3));
  signed int v32 = bswap32(*v31) << (v29 & 7);
  if (v31 > v4) {
    uint64_t v31 = v4;
  }
  a2[10] = v32 < 0;
  unint64_t v33 = (v30 + 1);
  int v34 = ((_BYTE)v30 + 1) & 7;
  unsigned int v35 = (unsigned int *)((char *)v31 + (v33 >> 3));
  signed int v36 = bswap32(*v35) << (v33 & 7);
  if (v35 > v4) {
    unsigned int v35 = v4;
  }
  a2[11] = v36 < 0;
  uint64_t v37 = (unsigned int *)((char *)v35 + ((v34 + 1) >> 3));
  if (v37 > v4) {
    uint64_t v37 = v4;
  }
  int v38 = ((((_BYTE)v34 + 1) & 7) + 4) & 7;
  unsigned int v39 = (unsigned int *)((char *)v37 + ((unint64_t)((((_BYTE)v34 + 1) & 7u) + 4) >> 3));
  unsigned int v40 = bswap32(*v39) << ((((v34 + 1) & 7) + 4) & 7);
  uint64_t v41 = v39 <= v4 ? v39 : v4;
  *((_DWORD *)a2 + 1) = HIBYTE(v40);
  unsigned int v44 = *(unsigned int *)((char *)v41 + 1);
  uint64_t v42 = (unsigned int *)((char *)v41 + 1);
  unsigned int v43 = v44;
  uint64_t result = sub_1BBB2278C((uint64_t)a2, (uint64_t)(a2 + 1360), v8);
  if (result) {
    return result;
  }
  if (v42 <= v4) {
    __int32 v46 = v42;
  }
  else {
    __int32 v46 = v4;
  }
  unsigned int v47 = bswap32(v43) << v38;
  unsigned int v48 = __clz(v47);
  unsigned int v49 = v47 << (v48 + 1) >> -(char)v48;
  if (!v48) {
    LOBYTE(v49) = 0;
  }
  unsigned __int8 v50 = v49 + ~(-1 << v48);
  unsigned int v51 = v50;
  a2[17] = v50;
  unint64_t v52 = v38 + 2 * v48 + 1;
  uint64_t v53 = (unsigned int *)((char *)v46 + (v52 >> 3));
  if (v53 <= v4) {
    unsigned int v54 = (unsigned int *)((char *)v46 + (v52 >> 3));
  }
  else {
    unsigned int v54 = v4;
  }
  if (v51 > 0x1F) {
    return 4294958327;
  }
  int v55 = v52 & 7;
  unsigned int v56 = bswap32(*v53) << v55;
  if (v19 == 100)
  {
    unsigned int v57 = __clz(v56);
    unsigned int v58 = v56 << (v57 + 1) >> -(char)v57;
    if (v57) {
      unsigned int v59 = v58;
    }
    else {
      unsigned int v59 = 0;
    }
    unsigned int v60 = v59 + ~(-1 << v57);
    a2[18] = v60;
    if (v60 > 1u) {
      return 4294958327;
    }
    unint64_t v61 = v55 + 2 * v57 + 1;
    int v62 = (unsigned int *)((char *)v54 + (v61 >> 3));
    int v63 = v61 & 7;
    unsigned int v64 = bswap32(*v62) << v63;
    unsigned int v65 = __clz(v64);
    unsigned int v66 = v64 << (v65 + 1) >> -(char)v65;
    if (!v65) {
      LOBYTE(v66) = 0;
    }
    a2[20] = v66 + ~(-1 << v65);
    if ((_BYTE)v66 + ~(-1 << v65)) {
      return 4294958327;
    }
    if (v62 > v4) {
      int v62 = v4;
    }
    unint64_t v67 = v63 + 2 * v65 + 1;
    uint64_t v68 = (unsigned int *)((char *)v62 + (v67 >> 3));
    int v69 = v67 & 7;
    unsigned int v70 = bswap32(*v68) << v69;
    unsigned int v71 = __clz(v70);
    unsigned int v72 = v70 << (v71 + 1) >> -(char)v71;
    if (!v71) {
      unsigned int v72 = 0;
    }
    unsigned int v73 = v72 + ~(-1 << v71);
    a2[21] = v73;
    if ((_BYTE)v73) {
      return 4294958327;
    }
    if (v68 > v4) {
      uint64_t v68 = v4;
    }
    unint64_t v74 = v69 + 2 * v71 + 1;
    int v75 = (unsigned int *)((char *)v68 + (v74 >> 3));
    int v76 = v74 & 7;
    signed int v77 = bswap32(*v75) << v76;
    a2[22] = v77 < 0;
    if (v77 < 0) {
      return 4294958327;
    }
    if (v75 > v4) {
      int v75 = v4;
    }
    unint64_t v78 = (v76 + 1);
    uint64_t v79 = (unsigned int *)((char *)v75 + (v78 >> 3));
    if (v79 <= v4) {
      int v80 = v79;
    }
    else {
      int v80 = v4;
    }
    int v81 = v78 & 7;
    signed int v82 = bswap32(*v79) << v81;
    a2[23] = v82 < 0;
    unint64_t v83 = (v81 + 1);
    int v55 = ((_BYTE)v81 + 1) & 7;
    unsigned int v54 = (unsigned int *)((char *)v80 + (v83 >> 3));
    unsigned int v84 = bswap32(*v54);
    int v85 = v84 << v55;
    if (v54 > v4) {
      unsigned int v54 = v4;
    }
    if (v82 < 0)
    {
      unint64_t v158 = 0;
      unsigned int v159 = a2 + 40;
      while (1)
      {
        a2[v158 + 24] = v85 < 0;
        unint64_t v160 = (v55 + 1);
        int v55 = ((_BYTE)v55 + 1) & 7;
        unsigned int v54 = (unsigned int *)((char *)v54 + (v160 >> 3));
        unsigned int v56 = bswap32(*v54) << (v160 & 7);
        if (v54 > v4) {
          unsigned int v54 = v4;
        }
        if (v85 < 0)
        {
          *(void *)(a1 + 16) = v54;
          *(_DWORD *)(a1 + 32) = v56;
          *(unsigned char *)(a1 + 36) = v55;
          int v161 = v54 - *(_DWORD *)a1;
          int v162 = *(_DWORD *)(a1 + 8);
          if (v158 > 5)
          {
            if (v162 < v161) {
              return 4294958327;
            }
            uint64_t v167 = (v158 - 6);
            unsigned int v165 = &a2[64 * v167 + 136];
            unsigned int v163 = (BOOL *)&a2[v167 + 38];
            uint64_t v164 = a1;
            int v166 = 64;
          }
          else
          {
            if (v162 < v161) {
              return 4294958327;
            }
            unsigned int v163 = (BOOL *)&a2[v158 + 32];
            uint64_t v164 = a1;
            unsigned int v165 = v159;
            int v166 = 16;
          }
          uint64_t result = sub_1BBB2291C(v164, (uint64_t)v165, v166, v163);
          if (result) {
            return result;
          }
          unsigned int v54 = *(unsigned int **)(a1 + 16);
          uint64_t v4 = *(unsigned int **)(a1 + 24);
          unsigned int v56 = *(_DWORD *)(a1 + 32);
          int v55 = *(unsigned __int8 *)(a1 + 36);
        }
        ++v158;
        v159 += 16;
        int v85 = v56;
        if (v158 == 8) {
          goto LABEL_67;
        }
      }
    }
    unsigned int v56 = v84 << v55;
  }
  else
  {
    a2[18] = 1;
  }
LABEL_67:
  unsigned int v86 = __clz(v56);
  unsigned int v87 = v56 << (v86 + 1) >> -(char)v86;
  unsigned int v88 = v86 ? v87 : 0;
  unsigned int v89 = v88 + ~(-1 << v86);
  *((_DWORD *)a2 + 68) = v89;
  if (v89 > 0xC) {
    return 4294958327;
  }
  unint64_t v90 = v55 + 2 * v86 + 1;
  int v91 = (unsigned int *)((char *)v54 + (v90 >> 3));
  if (v91 <= v4) {
    int v92 = v91;
  }
  else {
    int v92 = v4;
  }
  int v93 = v90 & 7;
  unsigned int v94 = bswap32(*v91) << v93;
  unsigned int v95 = __clz(v94);
  unsigned int v96 = v94 << (v95 + 1) >> -(char)v95;
  if (!v95) {
    LOBYTE(v96) = 0;
  }
  unsigned __int8 v97 = v96 + ~(-1 << v95);
  unsigned int v98 = v97;
  a2[276] = v97;
  unint64_t v99 = v93 + 2 * v95 + 1;
  int v100 = (unsigned int *)((char *)v92 + (v99 >> 3));
  int v101 = v100 <= v4 ? (unsigned int *)((char *)v92 + (v99 >> 3)) : v4;
  if (v98 > 2) {
    return 4294958327;
  }
  int v102 = v99 & 7;
  unsigned int v103 = bswap32(*v100) << v102;
  if (v98 == 1)
  {
    a2[284] = (v103 & 0x80000000) != 0;
    unint64_t v141 = (v102 + 1);
    int v142 = ((_BYTE)v102 + 1) & 7;
    uint64_t v143 = (unsigned int *)((char *)v101 + (v141 >> 3));
    unsigned int v144 = bswap32(*v143) << (v141 & 7);
    if (v143 > v4) {
      uint64_t v143 = v4;
    }
    if (v144 < 0x80000)
    {
      unint64_t v149 = (v142 + 1);
      int v102 = ((_BYTE)v142 + 1) & 7;
      int v101 = (unsigned int *)((char *)v143 + (v149 >> 3));
      unsigned int v103 = bswap32(*v101) << (v149 & 7);
      if (v101 > v4) {
        int v101 = v4;
      }
      int v150 = -1;
      do
      {
        unsigned int v151 = v103;
        int v152 = v150;
        unint64_t v153 = (v102 + 1);
        int v102 = ((_BYTE)v102 + 1) & 7;
        int v101 = (unsigned int *)((char *)v101 + (v153 >> 3));
        unsigned int v103 = bswap32(*v101) << (v153 & 7);
        if (v101 > v4) {
          int v101 = v4;
        }
        ++v150;
      }
      while ((v151 & 0x80000000) == 0);
      unsigned int v154 = v152 + 2;
      if (v154 > 0x1F)
      {
        int v157 = 0;
        uint64_t result = 4294958327;
        int v147 = -2;
        goto LABEL_150;
      }
      unint64_t v155 = v102 + v154;
      if (v154 > 0x18)
      {
        unsigned int v168 = v103 >> (47 - v150);
        int v102 = ((_BYTE)v102 + (_BYTE)v154) & 7;
        unsigned int v169 = (unsigned int *)((char *)v101 + ((unint64_t)(v155 - 16) >> 3));
        unsigned int v170 = bswap32(*v169) << (v155 & 7);
        if (v169 > v4) {
          unsigned int v169 = v4;
        }
        unsigned int v171 = *(unsigned int *)((char *)v169 + 2);
        int v101 = (unsigned int *)((char *)v169 + 2);
        unsigned int v103 = bswap32(v171) << v102;
        if (v101 > v4) {
          int v101 = v4;
        }
        int v156 = __PAIR64__(v168, v170) >> 16;
      }
      else
      {
        int v156 = v103 >> ~(_BYTE)v150;
        int v102 = ((_BYTE)v102 + (_BYTE)v154) & 7;
        int v101 = (unsigned int *)((char *)v101 + (v155 >> 3));
        unsigned int v103 = bswap32(*v101) << (v155 & 7);
        if (v101 > v4) {
          int v101 = v4;
        }
      }
      uint64_t result = 0;
      int v147 = v156 + ~(-1 << v154);
    }
    else
    {
      uint64_t result = 0;
      unsigned int v145 = __clz(v144);
      unsigned int v146 = v144 << (v145 + 1) >> -(char)v145;
      if (!v145) {
        unsigned int v146 = 0;
      }
      int v147 = v146 + ~(-1 << v145);
      unint64_t v148 = v142 + 2 * v145 + 1;
      int v102 = ((_BYTE)v142 + 2 * (_BYTE)v145 + 1) & 7;
      int v101 = (unsigned int *)((char *)v143 + (v148 >> 3));
      unsigned int v103 = bswap32(*v101) << (v148 & 7);
      if (v101 > v4) {
        int v101 = v4;
      }
    }
    int v157 = 1;
LABEL_150:
    *((_DWORD *)a2 + 72) = ((v147 + 1) >> 1) - ((v147 + 1) >> 1) * 2 * ((v147 + 1) & 1);
    if (!v157) {
      goto LABEL_261;
    }
    if (v103 < 0x80000)
    {
      unint64_t v176 = (v102 + 1);
      int v102 = ((_BYTE)v102 + 1) & 7;
      int v101 = (unsigned int *)((char *)v101 + (v176 >> 3));
      unsigned int v103 = bswap32(*v101) << (v176 & 7);
      if (v101 > v4) {
        int v101 = v4;
      }
      int v177 = -1;
      do
      {
        unsigned int v178 = v103;
        int v179 = v177;
        unint64_t v180 = (v102 + 1);
        int v102 = ((_BYTE)v102 + 1) & 7;
        int v101 = (unsigned int *)((char *)v101 + (v180 >> 3));
        unsigned int v103 = bswap32(*v101) << (v180 & 7);
        if (v101 > v4) {
          int v101 = v4;
        }
        ++v177;
      }
      while ((v178 & 0x80000000) == 0);
      unsigned int v181 = v179 + 2;
      if (v181 > 0x1F)
      {
        int v184 = 0;
        uint64_t result = 4294958327;
        int v174 = -2;
        goto LABEL_222;
      }
      unint64_t v182 = v102 + v181;
      if (v181 > 0x18)
      {
        unsigned int v233 = v103 >> (47 - v177);
        int v102 = ((_BYTE)v102 + (_BYTE)v181) & 7;
        uint64_t v234 = (unsigned int *)((char *)v101 + ((unint64_t)(v182 - 16) >> 3));
        unsigned int v235 = bswap32(*v234) << (v182 & 7);
        if (v234 > v4) {
          uint64_t v234 = v4;
        }
        unsigned int v236 = *(unsigned int *)((char *)v234 + 2);
        int v101 = (unsigned int *)((char *)v234 + 2);
        unsigned int v103 = bswap32(v236) << v102;
        if (v101 > v4) {
          int v101 = v4;
        }
        int v183 = __PAIR64__(v233, v235) >> 16;
      }
      else
      {
        int v183 = v103 >> ~(_BYTE)v177;
        int v102 = ((_BYTE)v102 + (_BYTE)v181) & 7;
        int v101 = (unsigned int *)((char *)v101 + (v182 >> 3));
        unsigned int v103 = bswap32(*v101) << (v182 & 7);
        if (v101 > v4) {
          int v101 = v4;
        }
      }
      uint64_t result = 0;
      int v174 = v183 + ~(-1 << v181);
    }
    else
    {
      uint64_t result = 0;
      unsigned int v172 = __clz(v103);
      unsigned int v173 = v103 << (v172 + 1) >> -(char)v172;
      if (!v172) {
        unsigned int v173 = 0;
      }
      int v174 = v173 + ~(-1 << v172);
      unint64_t v175 = v102 + 2 * v172 + 1;
      int v102 = ((_BYTE)v102 + 2 * (_BYTE)v172 + 1) & 7;
      int v101 = (unsigned int *)((char *)v101 + (v175 >> 3));
      unsigned int v103 = bswap32(*v101) << (v175 & 7);
      if (v101 > v4) {
        int v101 = v4;
      }
    }
    int v184 = 1;
LABEL_222:
    *((_DWORD *)a2 + 73) = ((v174 + 1) >> 1) - ((v174 + 1) >> 1) * 2 * ((v174 + 1) & 1);
    if (v184)
    {
      unsigned int v237 = __clz(v103);
      unsigned int v238 = v103 << (v237 + 1) >> -(char)v237;
      if (!v237) {
        unsigned int v238 = 0;
      }
      uint64_t v239 = v238 + ~(-1 << v237);
      *((_DWORD *)a2 + 74) = v239;
      if (v239 > 0xFF) {
        return 4294958327;
      }
      unint64_t v240 = v102 + 2 * v237 + 1;
      int v241 = (unsigned int *)((char *)v101 + (v240 >> 3));
      if (v241 <= v4) {
        int v101 = (unsigned int *)((char *)v101 + (v240 >> 3));
      }
      else {
        int v101 = v4;
      }
      int v102 = v240 & 7;
      unsigned int v103 = bswap32(*v241) << v102;
      *((_DWORD *)a2 + 468) = 0;
      if (!v239) {
        goto LABEL_88;
      }
      uint64_t v242 = 0;
      while (v103 < 0x80000)
      {
        unint64_t v247 = (v102 + 1);
        int v102 = ((_BYTE)v102 + 1) & 7;
        int v101 = (unsigned int *)((char *)v101 + (v247 >> 3));
        unsigned int v103 = bswap32(*v101) << (v247 & 7);
        if (v101 > v4) {
          int v101 = v4;
        }
        int v248 = -1;
        do
        {
          unsigned int v249 = v103;
          int v250 = v248;
          unint64_t v251 = (v102 + 1);
          int v102 = ((_BYTE)v102 + 1) & 7;
          int v101 = (unsigned int *)((char *)v101 + (v251 >> 3));
          unsigned int v103 = bswap32(*v101) << (v251 & 7);
          if (v101 > v4) {
            int v101 = v4;
          }
          ++v248;
        }
        while ((v249 & 0x80000000) == 0);
        unsigned int v252 = v250 + 2;
        if (v252 <= 0x1F)
        {
          unint64_t v253 = v102 + v252;
          if (v252 > 0x18)
          {
            unsigned int v256 = v103 >> (47 - v248);
            int v102 = ((_BYTE)v102 + (_BYTE)v252) & 7;
            char v257 = (unsigned int *)((char *)v101 + ((unint64_t)(v253 - 16) >> 3));
            unsigned int v258 = bswap32(*v257) << (v253 & 7);
            if (v257 > v4) {
              char v257 = v4;
            }
            unsigned int v259 = *(unsigned int *)((char *)v257 + 2);
            int v101 = (unsigned int *)((char *)v257 + 2);
            unsigned int v103 = bswap32(v259) << v102;
            if (v101 > v4) {
              int v101 = v4;
            }
            int v254 = __PAIR64__(v256, v258) >> 16;
          }
          else
          {
            int v254 = v103 >> ~(_BYTE)v248;
            int v102 = ((_BYTE)v102 + (_BYTE)v252) & 7;
            int v101 = (unsigned int *)((char *)v101 + (v253 >> 3));
            unsigned int v103 = bswap32(*v101) << (v253 & 7);
            if (v101 > v4) {
              int v101 = v4;
            }
          }
          uint64_t result = 0;
          int v245 = v254 + ~(-1 << v252);
          goto LABEL_255;
        }
        char v255 = 0;
        uint64_t result = 4294958327;
        int v245 = -2;
LABEL_256:
        *(_DWORD *)&a2[4 * v242 + 300] = ((v245 + 1) >> 1)
                                       - ((v245 + 1) >> 1) * 2 * ((v245 + 1) & 1);
        if ((v255 & 1) == 0) {
          goto LABEL_261;
        }
        if (++v242 == v239) {
          goto LABEL_88;
        }
      }
      uint64_t result = 0;
      unsigned int v243 = __clz(v103);
      unsigned int v244 = v103 << (v243 + 1) >> -(char)v243;
      if (!v243) {
        unsigned int v244 = 0;
      }
      int v245 = v244 + ~(-1 << v243);
      unint64_t v246 = v102 + 2 * v243 + 1;
      int v102 = ((_BYTE)v102 + 2 * (_BYTE)v243 + 1) & 7;
      int v101 = (unsigned int *)((char *)v101 + (v246 >> 3));
      unsigned int v103 = bswap32(*v101) << (v246 & 7);
      if (v101 > v4) {
        int v101 = v4;
      }
LABEL_255:
      char v255 = 1;
      goto LABEL_256;
    }
LABEL_261:
    if (!result)
    {
LABEL_262:
      uint64_t result = 0;
      *(void *)(a1 + 16) = v101;
      *(_DWORD *)(a1 + 32) = v103;
      *(unsigned char *)(a1 + 36) = v102;
      return result;
    }
    return result;
  }
  if (!v98)
  {
    unsigned int v104 = __clz(v103);
    unsigned int v105 = v103 << (v104 + 1) >> -(char)v104;
    if (!v104) {
      unsigned int v105 = 0;
    }
    unsigned int v106 = v105 + ~(-1 << v104);
    *((_DWORD *)a2 + 70) = v106;
    if (v106 > 0xC) {
      return 4294958327;
    }
    unint64_t v107 = v102 + 2 * v104 + 1;
    int v101 = (unsigned int *)((char *)v101 + (v107 >> 3));
    unsigned int v108 = *v101;
    *((_DWORD *)a2 + 468) = 16 << v106;
    if (v101 > v4) {
      int v101 = v4;
    }
    a2[284] = 0;
    *((void *)a2 + 36) = 0;
    int v102 = v107 & 7;
    unsigned int v103 = bswap32(v108) << v102;
    *((_DWORD *)a2 + 74) = 0;
  }
LABEL_88:
  unsigned int v109 = __clz(v103);
  unsigned int v110 = v103 << (v109 + 1) >> -(char)v109;
  if (!v109) {
    unsigned int v110 = 0;
  }
  unsigned int v111 = v110 + ~(-1 << v109);
  *((_DWORD *)a2 + 330) = v111;
  unint64_t v112 = v102 + 2 * v109 + 1;
  int v113 = v112 & 7;
  int v114 = (unsigned int *)((char *)v101 + (v112 >> 3));
  signed int v115 = bswap32(*v114) << v113;
  if (v114 > v4) {
    int v114 = v4;
  }
  a2[1324] = v115 < 0;
  unint64_t v116 = (v113 + 1);
  int v117 = ((_BYTE)v113 + 1) & 7;
  int v118 = (unsigned int *)((char *)v114 + (v116 >> 3));
  unsigned int v119 = bswap32(*v118) << (v116 & 7);
  if (v118 > v4) {
    int v118 = v4;
  }
  unsigned int v120 = __clz(v119);
  unsigned int v121 = v119 << (v120 + 1) >> -(char)v120;
  if (!v120) {
    unsigned int v121 = 0;
  }
  unsigned int v122 = v121 + ~(-1 << v120);
  *((_DWORD *)a2 + 332) = v122;
  unint64_t v123 = v117 + 2 * v120 + 1;
  int v124 = v123 & 7;
  int v125 = (unsigned int *)((char *)v118 + (v123 >> 3));
  unsigned int v126 = bswap32(*v125) << (v123 & 7);
  if (v125 > v4) {
    int v125 = v4;
  }
  unsigned int v127 = __clz(v126);
  unsigned int v128 = v126 << (v127 + 1) >> -(char)v127;
  if (!v127) {
    unsigned int v128 = 0;
  }
  unsigned int v129 = v128 + ~(-1 << v127);
  *((_DWORD *)a2 + 333) = v129;
  unint64_t v130 = v124 + 2 * v127 + 1;
  int v131 = ((_BYTE)v124 + 2 * (_BYTE)v127 + 1) & 7;
  int v132 = (unsigned int *)((char *)v125 + (v130 >> 3));
  signed int v133 = bswap32(*v132) << (v130 & 7);
  if (v132 > v4) {
    int v132 = v4;
  }
  a2[1336] = v133 < 0;
  unint64_t v134 = (v131 + 1);
  int v135 = (unsigned int *)((char *)v132 + (v134 >> 3));
  if (v135 <= v4) {
    int v136 = v135;
  }
  else {
    int v136 = v4;
  }
  unsigned int v137 = v129 * v122;
  uint64_t result = 4294958327;
  if (v137 * v111 > 0x2D000) {
    return result;
  }
  if (v137 > 0x9000) {
    return result;
  }
  unsigned int v138 = *v135;
  uint64_t result = sub_1BBB2278C((uint64_t)a2, (uint64_t)(a2 + 1360), v45);
  if (result) {
    return result;
  }
  int v139 = v134 & 7;
  signed int v140 = bswap32(v138) << (v134 & 7);
  if (a2[1336])
  {
    a2[1337] = 0;
  }
  else
  {
    a2[1337] = v140 < 0;
    unint64_t v185 = (v139 + 1);
    int v139 = ((_BYTE)v139 + 1) & 7;
    char v186 = (unsigned int *)((char *)v136 + (v185 >> 3));
    signed int v140 = bswap32(*v186) << (v185 & 7);
    if (v186 <= v4) {
      int v136 = v186;
    }
    else {
      int v136 = v4;
    }
  }
  a2[1338] = v140 < 0;
  unint64_t v187 = (v139 + 1);
  int v188 = v187 & 7;
  unsigned __int8 v189 = (unsigned int *)((char *)v136 + (v187 >> 3));
  signed int v190 = bswap32(*v189) << v188;
  if (v189 > v4) {
    unsigned __int8 v189 = v4;
  }
  a2[1339] = v190 < 0;
  unint64_t v191 = (v188 + 1);
  int v192 = ((_BYTE)v188 + 1) & 7;
  char v193 = (unsigned int *)((char *)v189 + (v191 >> 3));
  signed int v194 = bswap32(*v193) << (v191 & 7);
  if (v193 > v4) {
    char v193 = v4;
  }
  if ((v190 & 0x80000000) == 0)
  {
    *(_OWORD *)(a2 + 1340) = 0u;
    goto LABEL_178;
  }
  unsigned int v201 = __clz(v194);
  unsigned int v202 = (v194 << (v201 + 1)) >> -(char)v201;
  if (v201) {
    unsigned int v203 = v202;
  }
  else {
    unsigned int v203 = 0;
  }
  unsigned int v204 = v203 + ~(-1 << v201);
  *((_DWORD *)a2 + 335) = v204;
  unsigned int v205 = 9 * *((_DWORD *)a2 + 332);
  if (v204 > v205) {
    return 4294958327;
  }
  unint64_t v206 = v192 + 2 * v201 + 1;
  int v207 = (unsigned int *)((char *)v193 + (v206 >> 3));
  int v208 = v206 & 7;
  unsigned int v209 = bswap32(*v207) << v208;
  unsigned int v210 = __clz(v209);
  unsigned int v211 = v209 << (v210 + 1) >> -(char)v210;
  if (!v210) {
    unsigned int v211 = 0;
  }
  unsigned int v212 = v211 + ~(-1 << v210);
  *((_DWORD *)a2 + 336) = v212;
  if (v212 > v205) {
    return 4294958327;
  }
  if (v207 > v4) {
    int v207 = v4;
  }
  unint64_t v213 = v208 + 2 * v210 + 1;
  unsigned int v214 = (unsigned int *)((char *)v207 + (v213 >> 3));
  int v215 = v213 & 7;
  unsigned int v216 = bswap32(*v214) << (v213 & 7);
  unsigned int v217 = __clz(v216);
  unsigned int v218 = v216 << (v217 + 1) >> -(char)v217;
  unsigned int v219 = v217 ? v218 : 0;
  unsigned int v220 = v219 + ~(-1 << v217);
  *((_DWORD *)a2 + 337) = v220;
  unsigned int v221 = 17 * *((_DWORD *)a2 + 333);
  if (v220 > v221) {
    return 4294958327;
  }
  if (v214 > v4) {
    unsigned int v214 = v4;
  }
  unint64_t v222 = v215 + 2 * v217 + 1;
  unint64_t v223 = (unsigned int *)((char *)v214 + (v222 >> 3));
  if (v223 <= v4) {
    int v224 = v223;
  }
  else {
    int v224 = v4;
  }
  int v225 = v222 & 7;
  unsigned int v226 = bswap32(*v223) << v225;
  unsigned int v227 = __clz(v226);
  unsigned int v228 = v226 << (v227 + 1) >> -(char)v227;
  if (!v227) {
    unsigned int v228 = 0;
  }
  unsigned int v229 = v228 + ~(-1 << v227);
  *((_DWORD *)a2 + 338) = v229;
  unint64_t v230 = v225 + 2 * v227 + 1;
  unsigned int v231 = (unsigned int *)((char *)v224 + (v230 >> 3));
  char v193 = v231 <= v4 ? (unsigned int *)((char *)v224 + (v230 >> 3)) : v4;
  if (v229 > v221) {
    return 4294958327;
  }
  int v192 = v230 & 7;
  signed int v194 = bswap32(*v231) << (v230 & 7);
LABEL_178:
  a2[1356] = v194 < 0;
  unsigned int v195 = v192 + 1;
  int v196 = v195 & 7;
  int v197 = (unsigned int *)((char *)v193 + (v195 >> 3));
  if (v197 <= v4) {
    BOOL v198 = v197;
  }
  else {
    BOOL v198 = v4;
  }
  if ((v194 & 0x80000000) == 0) {
    goto LABEL_182;
  }
  unsigned int v232 = bswap32(*v197);
  *(void *)(a1 + 16) = v198;
  *(_DWORD *)(a1 + 32) = v232 << v196;
  *(unsigned char *)(a1 + 36) = v196;
  if (*(_DWORD *)(a1 + 8) < (int)v198 - *(_DWORD *)a1) {
    return 4294958327;
  }
  uint64_t result = sub_1BBB229F8(a1, (uint64_t)a2, (uint64_t)(a2 + 1360));
  if (!result)
  {
    BOOL v198 = *(unsigned int **)(a1 + 16);
    uint64_t v4 = *(unsigned int **)(a1 + 24);
    int v196 = *(unsigned __int8 *)(a1 + 36);
LABEL_182:
    LOBYTE(v102) = 0;
    int v101 = (unsigned int *)((char *)v198 + ((v196 + 1) >> 3));
    if (v101 > v4) {
      int v101 = v4;
    }
    if ((((_BYTE)v196 + 1) & 7) != 0) {
      int v101 = (unsigned int *)((char *)v101 + 1);
    }
    unsigned int v103 = bswap32(*v101);
    int v199 = *((_DWORD *)a2 + 332) + 1;
    int v200 = *((_DWORD *)a2 + 333);
    *((_DWORD *)a2 + 467) = 1 << (*((_DWORD *)a2 + 68) + 4);
    *((_DWORD *)a2 + 469) = v199 + v199 * v200 - 1;
    goto LABEL_262;
  }
  return result;
}

uint64_t sub_1BBB2278C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = 0;
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = -1;
  do
  {
    if (v4 == byte_1BBB8D62C[v3]) {
      int v5 = v3;
    }
    ++v3;
  }
  while (v3 != 17);
  if (v5 == -1) {
    return 4294958327;
  }
  if (v4 == 11 && *(unsigned char *)(a1 + 11)) {
    int v5 = 1;
  }
  LODWORD(a3) = dword_1BBB8D384[v5];
  int v6 = (int)fmin((double)*(unint64_t *)&a3* 384.0/ ((double)(((*(_DWORD *)(a1 + 1328) << 8)+ 256+ ((*(_DWORD *)(a1 + 1328) << 8) + 256) * *(_DWORD *)(a1 + 1332))* (2 - *(unsigned __int8 *)(a1 + 1336)))* 1.5), 16.0);
  *(_DWORD *)(a2 + 20) = 5;
  *(void *)(a2 + 28) = 0x200000002;
  *(_DWORD *)(a2 + 36) = 2;
  *(unsigned char *)(a2 + 70) = 1;
  HIDWORD(v7) = 1;
  *(_OWORD *)(a2 + 72) = xmmword_1BBB6FCB0;
  if (*(_DWORD *)a1 == 100 && *(unsigned char *)(a1 + 11) == 1) {
    int v8 = 0;
  }
  else {
    int v8 = v6;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 88) = v8;
  *(_DWORD *)(a2 + 92) = v6;
  LODWORD(v7) = dword_1BBB8D5E8[v5];
  *(double *)&unint64_t v10 = (double)v7 * 1000.0 * 0.015625 + -1.0 + 0.5;
  *(_DWORD *)(a2 + 108) = (int)*(double *)&v10;
  LODWORD(v10) = dword_1BBB8D5A4[v5];
  *(_DWORD *)(a2 + 236) = (int)((double)v10 * 200.0 * 0.0625 + -1.0 + 0.5);
  *(_OWORD *)(a2 + 492) = xmmword_1BBB6FE90;
  return result;
}

uint64_t sub_1BBB2291C(uint64_t a1, uint64_t a2, int a3, BOOL *a4)
{
  uint64_t v4 = 0;
  int v5 = *(unsigned __int8 *)(a1 + 36);
  unsigned int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  LODWORD(v9) = 8;
  uint64_t v10 = 8;
  while (!v9)
  {
LABEL_10:
    LODWORD(v9) = 0;
    uint64_t v16 = v10;
LABEL_11:
    *(unsigned char *)(a2 + v4++) = v16;
    uint64_t v10 = v16;
    if (a3 == v4)
    {
      uint64_t v17 = 0;
      *(void *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v6;
      *(unsigned char *)(a1 + 36) = v5;
      return v17;
    }
  }
  unsigned int v11 = __clz(v6);
  unsigned int v12 = v6 << (v11 + 1) >> -(char)v11;
  if (!v11) {
    unsigned int v12 = 0;
  }
  unsigned int v13 = ((v12 + (1 << v11)) >> 1) - ((v12 + (1 << v11)) >> 1) * 2 * ((v12 + (1 << v11)) & 1);
  if (v13 == (char)v13)
  {
    unint64_t v14 = v5 + 2 * v11 + 1;
    unint64_t v15 = (unsigned int *)(v8 + (v14 >> 3));
    if ((unint64_t)v15 <= v7) {
      v8 += v14 >> 3;
    }
    else {
      unint64_t v8 = v7;
    }
    int v5 = v14 & 7;
    unsigned int v6 = bswap32(*v15) << v5;
    uint64_t v9 = (v13 + v10);
    *a4 = (v9 | v4) == 0;
    uint64_t v16 = v9;
    if (v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  return 4294958327;
}

uint64_t sub_1BBB229F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned int **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 36);
  *(unsigned char *)a3 = v5 < 0;
  unint64_t v7 = v6 + 1;
  int v8 = (v6 + 1) & 7;
  uint64_t v9 = (unsigned int *)(v4 + (v7 >> 3));
  unsigned int v10 = bswap32(*v9) << v8;
  if (v9 > v3) {
    uint64_t v9 = v3;
  }
  if (v5 < 0)
  {
    unsigned int v11 = HIBYTE(v10);
    *(_DWORD *)(a3 + 4) = HIBYTE(v10);
    unsigned int v12 = *(unsigned int *)((char *)v9 + 1);
    uint64_t v9 = (unsigned int *)((char *)v9 + 1);
    unsigned int v10 = bswap32(v12) << v8;
    if (v9 > v3) {
      uint64_t v9 = v3;
    }
    if (v11 == 255)
    {
      *(_DWORD *)(a3 + 8) = HIWORD(v10);
      unsigned int v14 = *(unsigned int *)((char *)v9 + 2);
      unsigned int v13 = (unsigned int *)((char *)v9 + 2);
      unsigned int v15 = bswap32(v14) << v8;
      if (v13 > v3) {
        unsigned int v13 = v3;
      }
      *(_DWORD *)(a3 + 12) = HIWORD(v15);
      unsigned int v16 = *(unsigned int *)((char *)v13 + 2);
      uint64_t v9 = (unsigned int *)((char *)v13 + 2);
      unsigned int v10 = bswap32(v16) << v8;
      if (v9 > v3) {
        uint64_t v9 = v3;
      }
    }
  }
  *(unsigned char *)(a3 + 16) = (v10 & 0x80000000) != 0;
  unint64_t v17 = (v8 + 1);
  int v18 = ((_BYTE)v8 + 1) & 7;
  unsigned int v19 = (unsigned int *)((char *)v9 + (v17 >> 3));
  signed int v20 = bswap32(*v19) << v18;
  if (v19 > v3) {
    unsigned int v19 = v3;
  }
  if ((v10 & 0x80000000) != 0)
  {
    *(unsigned char *)(a3 + 17) = v20 < 0;
    unint64_t v21 = (v18 + 1);
    int v18 = ((_BYTE)v18 + 1) & 7;
    int v22 = (unsigned int *)((char *)v19 + (v21 >> 3));
    signed int v20 = bswap32(*v22) << v18;
    if (v22 <= v3) {
      unsigned int v19 = v22;
    }
    else {
      unsigned int v19 = v3;
    }
  }
  *(unsigned char *)(a3 + 18) = v20 < 0;
  unint64_t v23 = (v18 + 1);
  int v24 = ((_BYTE)v18 + 1) & 7;
  unint64_t v25 = (unsigned int *)((char *)v19 + (v23 >> 3));
  unsigned int v26 = bswap32(*v25) << v24;
  if (v25 > v3) {
    unint64_t v25 = v3;
  }
  if (v20 < 0)
  {
    *(_DWORD *)(a3 + 20) = v26 >> 29;
    unint64_t v27 = (v24 + 3);
    int v28 = v27 & 7;
    unint64_t v29 = (unsigned int *)((char *)v25 + (v27 >> 3));
    signed int v30 = bswap32(*v29) << v28;
    if (v29 > v3) {
      unint64_t v29 = v3;
    }
    *(unsigned char *)(a3 + 24) = v30 < 0;
    unint64_t v31 = (v28 + 1);
    int v32 = ((_BYTE)v28 + 1) & 7;
    unint64_t v33 = (unsigned int *)((char *)v29 + (v31 >> 3));
    signed int v34 = bswap32(*v33) << (v31 & 7);
    if (v33 <= v3) {
      unsigned int v35 = v33;
    }
    else {
      unsigned int v35 = v3;
    }
    *(unsigned char *)(a3 + 25) = v34 < 0;
    unint64_t v36 = (v32 + 1);
    int v24 = v36 & 7;
    unint64_t v25 = (unsigned int *)((char *)v35 + (v36 >> 3));
    unsigned int v26 = bswap32(*v25) << (v36 & 7);
    if (v25 > v3) {
      unint64_t v25 = v3;
    }
    if (v34 < 0)
    {
      *(_DWORD *)(a3 + 28) = HIBYTE(v26);
      if (HIBYTE(v26) > 8u) {
        return 4294958327;
      }
      unsigned int v162 = *(unsigned int *)((char *)v25 + 1);
      int v161 = (unsigned int *)((char *)v25 + 1);
      unsigned int v163 = bswap32(v162) << v24 >> 24;
      *(_DWORD *)(a3 + 32) = v163;
      if (v163 > 0x12) {
        return 4294958327;
      }
      if (v161 > v3) {
        int v161 = v3;
      }
      unsigned int v166 = *(unsigned int *)((char *)v161 + 1);
      uint64_t v164 = (unsigned int *)((char *)v161 + 1);
      unsigned int v165 = v166;
      if (v164 > v3) {
        uint64_t v164 = v3;
      }
      unsigned int v167 = bswap32(v165) << v24 >> 24;
      *(_DWORD *)(a3 + 36) = v167;
      unsigned int v169 = *(unsigned int *)((char *)v164 + 1);
      unint64_t v25 = (unsigned int *)((char *)v164 + 1);
      unsigned int v168 = v169;
      if (v25 > v3) {
        unint64_t v25 = v3;
      }
      if (v167 > 8) {
        return 4294958327;
      }
      unsigned int v26 = bswap32(v168) << v24;
    }
  }
  *(unsigned char *)(a3 + 40) = (v26 & 0x80000000) != 0;
  unint64_t v37 = (v24 + 1);
  int v38 = v37 & 7;
  unsigned int v39 = (unsigned int *)((char *)v25 + (v37 >> 3));
  signed int v40 = bswap32(*v39) << v38;
  if (v39 > v3) {
    unsigned int v39 = v3;
  }
  if ((v26 & 0x80000000) != 0)
  {
    unsigned int v54 = __clz(v40);
    if (v54) {
      unsigned int v55 = (v40 << (v54 + 1)) >> -(char)v54;
    }
    else {
      unsigned int v55 = 0;
    }
    unsigned int v56 = v55 + ~(-1 << v54);
    *(_DWORD *)(a3 + 44) = v56;
    if (v56 > 5) {
      return 4294958327;
    }
    unint64_t v57 = v38 + 2 * v54 + 1;
    unsigned int v58 = (unsigned int *)((char *)v39 + (v57 >> 3));
    if (v58 <= v3) {
      unsigned int v59 = v58;
    }
    else {
      unsigned int v59 = v3;
    }
    int v60 = v57 & 7;
    unsigned int v61 = bswap32(*v58) << v60;
    unsigned int v62 = __clz(v61);
    unsigned int v63 = v61 << (v62 + 1) >> -(char)v62;
    if (!v62) {
      unsigned int v63 = 0;
    }
    unsigned int v64 = v63 + ~(-1 << v62);
    *(_DWORD *)(a3 + 48) = v64;
    unint64_t v65 = v60 + 2 * v62 + 1;
    unsigned int v66 = (unsigned int *)((char *)v59 + (v65 >> 3));
    unsigned int v39 = v66 <= v3 ? v66 : v3;
    if (v64 > 5) {
      return 4294958327;
    }
    int v38 = ((_BYTE)v60 + 2 * (_BYTE)v62 + 1) & 7;
    signed int v40 = bswap32(*v66) << (v65 & 7);
  }
  *(unsigned char *)(a3 + 52) = v40 < 0;
  unint64_t v41 = (v38 + 1);
  int v42 = v41 & 7;
  unsigned int v43 = (unsigned int *)((char *)v39 + (v41 >> 3));
  signed int v44 = bswap32(*v43) << v42;
  if (v43 > v3) {
    unsigned int v43 = v3;
  }
  if (v40 < 0)
  {
    unsigned int v68 = *(unsigned int *)((char *)v43 + 2);
    unint64_t v67 = (unsigned int *)((char *)v43 + 2);
    unsigned int v69 = bswap32(v68) << v42;
    if (v67 > v3) {
      unint64_t v67 = v3;
    }
    unsigned int v72 = *(unsigned int *)((char *)v67 + 2);
    unsigned int v70 = (char *)v67 + 2;
    unsigned int v71 = v72;
    unsigned int v73 = v44 & 0xFFFF0000 | HIWORD(v69);
    *(_DWORD *)(a3 + 56) = v73;
    if (!v73) {
      return 4294958327;
    }
    if (v70 <= (char *)v3) {
      unint64_t v74 = (unsigned int *)v70;
    }
    else {
      unint64_t v74 = v3;
    }
    unsigned int v75 = bswap32(v71) << v42;
    unsigned int v77 = *(unsigned int *)((char *)v74 + 2);
    int v76 = (unsigned int *)((char *)v74 + 2);
    unsigned int v78 = bswap32(v77) << v42;
    if (v76 > v3) {
      int v76 = v3;
    }
    unsigned int v81 = *(unsigned int *)((char *)v76 + 2);
    uint64_t v79 = (unsigned int *)((char *)v76 + 2);
    unsigned int v80 = v81;
    unsigned int v82 = v75 & 0xFFFF0000 | HIWORD(v78);
    *(_DWORD *)(a3 + 60) = v82;
    if (!v82) {
      return 4294958327;
    }
    if (v79 > v3) {
      uint64_t v79 = v3;
    }
    *(unsigned char *)(a3 + 64) = ((bswap32(v80) << v42) & 0x80000000) != 0;
    unint64_t v83 = (v42 + 1);
    int v42 = ((_BYTE)v42 + 1) & 7;
    unsigned int v43 = (unsigned int *)((char *)v79 + (v83 >> 3));
    signed int v44 = bswap32(*v43) << v42;
    if (v43 > v3) {
      unsigned int v43 = v3;
    }
  }
  *(unsigned char *)(a3 + 65) = v44 < 0;
  unint64_t v45 = (v42 + 1);
  int v46 = v45 & 7;
  unsigned int v47 = (unsigned int *)((char *)v43 + (v45 >> 3));
  signed int v48 = bswap32(*v47) << v46;
  if (v47 <= v3) {
    unsigned int v49 = v47;
  }
  else {
    unsigned int v49 = v3;
  }
  if (v44 < 0)
  {
    unsigned int v84 = __clz(v48);
    if (v84) {
      unsigned int v85 = (v48 << (v84 + 1)) >> -(char)v84;
    }
    else {
      unsigned int v85 = 0;
    }
    unsigned int v86 = v85 + ~(-1 << v84);
    *(_DWORD *)(a3 + 96) = v86;
    if (v86 > 0x1F) {
      return 4294958327;
    }
    unsigned int v87 = 0;
    unint64_t v88 = v46 + 2 * v84 + 1;
    unsigned int v89 = (unsigned int *)((char *)v49 + (v88 >> 3));
    if (v89 <= v3) {
      unint64_t v90 = v89;
    }
    else {
      unint64_t v90 = v3;
    }
    int v91 = v88 & 7;
    *(_DWORD *)(a3 + 100) = bswap32(*v89) << v91 >> 28;
    unint64_t v92 = (v91 + 4);
    int v93 = v92 & 7;
    unsigned int v94 = (unsigned int *)((char *)v90 + (v92 >> 3));
    unsigned int v95 = bswap32(*v94) << v93;
    if (v94 > v3) {
      unsigned int v94 = v3;
    }
    *(_DWORD *)(a3 + 104) = v95 >> 28;
    unint64_t v96 = (v93 + 4);
    int v97 = ((_BYTE)v93 + 4) & 7;
    unsigned int v98 = (unsigned int *)((char *)v94 + (v96 >> 3));
    unsigned int v99 = bswap32(*v98) << (v96 & 7);
    if (v98 <= v3) {
      int v100 = v98;
    }
    else {
      int v100 = v3;
    }
    while (1)
    {
      if (v99 < 0x80000)
      {
        unint64_t v107 = (v97 + 1);
        int v108 = ((_BYTE)v97 + 1) & 7;
        unsigned int v109 = (unsigned int *)((char *)v100 + (v107 >> 3));
        unsigned int v110 = bswap32(*v109) << (v107 & 7);
        if (v109 > v3) {
          unsigned int v109 = v3;
        }
        int v111 = -1;
        do
        {
          unsigned int v112 = v110;
          int v113 = v111;
          unint64_t v114 = (v108 + 1);
          int v108 = ((_BYTE)v108 + 1) & 7;
          unsigned int v109 = (unsigned int *)((char *)v109 + (v114 >> 3));
          unsigned int v110 = bswap32(*v109) << (v114 & 7);
          if (v109 > v3) {
            unsigned int v109 = v3;
          }
          ++v111;
        }
        while ((v112 & 0x80000000) == 0);
        unsigned int v115 = v113 + 2;
        if (v115 > 0x1F)
        {
          *(_DWORD *)(a3 + 4 * v87 + 108) = -2;
          return 4294958327;
        }
        unint64_t v116 = v108 + v115;
        if (v115 > 0x18)
        {
          unsigned int v118 = v110 >> (47 - v111);
          int v104 = ((_BYTE)v108 + (_BYTE)v115) & 7;
          unsigned int v119 = (unsigned int *)((char *)v109 + ((unint64_t)(v116 - 16) >> 3));
          unsigned int v120 = bswap32(*v119) << (v116 & 7);
          if (v119 > v3) {
            unsigned int v119 = v3;
          }
          unsigned int v121 = *(unsigned int *)((char *)v119 + 2);
          unsigned int v105 = (unsigned int *)((char *)v119 + 2);
          unsigned int v106 = bswap32(v121) << v104;
          if (v105 > v3) {
            unsigned int v105 = v3;
          }
          int v117 = __PAIR64__(v118, v120) >> 16;
        }
        else
        {
          int v117 = v110 >> ~(_BYTE)v111;
          int v104 = ((_BYTE)v108 + (_BYTE)v115) & 7;
          unsigned int v105 = (unsigned int *)((char *)v109 + (v116 >> 3));
          unsigned int v106 = bswap32(*v105) << (v116 & 7);
          if (v105 > v3) {
            unsigned int v105 = v3;
          }
        }
        *(_DWORD *)(a3 + 4 * v87 + 108) = v117 + ~(-1 << v115);
      }
      else
      {
        unsigned int v101 = __clz(v99);
        unsigned int v102 = v99 << (v101 + 1) >> -(char)v101;
        if (!v101) {
          unsigned int v102 = 0;
        }
        *(_DWORD *)(a3 + 4 * v87 + 108) = v102 + ~(-1 << v101);
        unint64_t v103 = v97 + 2 * v101 + 1;
        int v104 = ((_BYTE)v97 + 2 * (_BYTE)v101 + 1) & 7;
        unsigned int v105 = (unsigned int *)((char *)v100 + (v103 >> 3));
        unsigned int v106 = bswap32(*v105) << (v103 & 7);
        if (v105 > v3) {
          unsigned int v105 = v3;
        }
      }
      if (v106 < 0x80000)
      {
        unint64_t v130 = (v104 + 1);
        int v131 = ((_BYTE)v104 + 1) & 7;
        int v132 = (unsigned int *)((char *)v105 + (v130 >> 3));
        unsigned int v133 = bswap32(*v132) << (v130 & 7);
        if (v132 <= v3) {
          unint64_t v134 = v132;
        }
        else {
          unint64_t v134 = v3;
        }
        int v135 = -1;
        do
        {
          unsigned int v136 = v133;
          int v137 = v135;
          unint64_t v138 = (v131 + 1);
          int v131 = ((_BYTE)v131 + 1) & 7;
          unint64_t v134 = (unsigned int *)((char *)v134 + (v138 >> 3));
          unsigned int v133 = bswap32(*v134) << (v138 & 7);
          if (v134 > v3) {
            unint64_t v134 = v3;
          }
          ++v135;
        }
        while ((v136 & 0x80000000) == 0);
        unsigned int v139 = v137 + 2;
        if (v139 > 0x1F)
        {
          uint64_t v301 = a3 + 4 * v87;
LABEL_272:
          *(_DWORD *)(v301 + 236) = -2;
          return 4294958327;
        }
        unint64_t v140 = v131 + v139;
        if (v139 > 0x18)
        {
          unsigned int v142 = v133 >> (47 - v135);
          int v126 = ((_BYTE)v131 + (_BYTE)v139) & 7;
          uint64_t v143 = (unsigned int *)((char *)v134 + ((unint64_t)(v140 - 16) >> 3));
          unsigned int v144 = bswap32(*v143) << (v140 & 7);
          if (v143 <= v3) {
            unsigned int v145 = v143;
          }
          else {
            unsigned int v145 = v3;
          }
          unsigned int v146 = *(unsigned int *)((char *)v145 + 2);
          unsigned int v129 = (unsigned int *)((char *)v145 + 2);
          unsigned int v128 = bswap32(v146) << v126;
          if (v129 > v3) {
            unsigned int v129 = v3;
          }
          int v141 = __PAIR64__(v142, v144) >> 16;
        }
        else
        {
          int v141 = v133 >> ~(_BYTE)v135;
          int v126 = ((_BYTE)v131 + (_BYTE)v139) & 7;
          unsigned int v129 = (unsigned int *)((char *)v134 + (v140 >> 3));
          unsigned int v128 = bswap32(*v129) << (v140 & 7);
          if (v129 > v3) {
            unsigned int v129 = v3;
          }
        }
        int v147 = v141 + ~(-1 << v139);
        uint64_t v124 = v87;
        *(_DWORD *)(a3 + 4 * v87 + 236) = v147;
      }
      else
      {
        unsigned int v122 = __clz(v106);
        unsigned int v123 = v106 << (v122 + 1) >> -(char)v122;
        if (!v122) {
          unsigned int v123 = 0;
        }
        uint64_t v124 = v87;
        *(_DWORD *)(a3 + 4 * v87 + 236) = v123 + ~(-1 << v122);
        unint64_t v125 = v104 + 2 * v122 + 1;
        int v126 = v125 & 7;
        unsigned int v127 = (unsigned int *)((char *)v105 + (v125 >> 3));
        unsigned int v128 = bswap32(*v127) << (v125 & 7);
        if (v127 <= v3) {
          unsigned int v129 = v127;
        }
        else {
          unsigned int v129 = v3;
        }
      }
      *(_DWORD *)(a3 + 4 * v124 + 364) = v128 >> 31;
      unint64_t v148 = (v126 + 1);
      int v97 = ((_BYTE)v126 + 1) & 7;
      int v100 = (unsigned int *)((char *)v129 + (v148 >> 3));
      unsigned int v99 = bswap32(*v100) << v97;
      if (v100 > v3) {
        int v100 = v3;
      }
      if (++v87 > v86)
      {
        *(_DWORD *)(a3 + 492) = v99 >> 27;
        int v149 = ((_BYTE)v97 + 5) & 7;
        int v150 = (unsigned int *)((char *)v100 + ((unint64_t)(v97 + 5) >> 3));
        unsigned int v151 = bswap32(*v150) << v149;
        if (v150 > v3) {
          int v150 = v3;
        }
        *(_DWORD *)(a3 + 496) = v151 >> 27;
        unint64_t v152 = (v149 + 5);
        int v153 = v152 & 7;
        unsigned int v154 = (unsigned int *)((char *)v150 + (v152 >> 3));
        unsigned int v155 = bswap32(*v154) << (v152 & 7);
        if (v154 > v3) {
          unsigned int v154 = v3;
        }
        *(_DWORD *)(a3 + 500) = v155 >> 27;
        unint64_t v156 = (v153 + 5);
        int v157 = ((_BYTE)v153 + 5) & 7;
        unint64_t v158 = (unsigned int *)((char *)v154 + (v156 >> 3));
        unsigned int v159 = bswap32(*v158) << (v156 & 7);
        if (v158 > v3) {
          unint64_t v158 = v3;
        }
        *(_DWORD *)(a3 + 504) = v159 >> 27;
        int v46 = ((_BYTE)v157 + 5) & 7;
        unint64_t v160 = (unsigned int *)((char *)v158 + ((unint64_t)(v157 + 5) >> 3));
        signed int v48 = bswap32(*v160) << ((v157 + 5) & 7);
        if (v160 <= v3) {
          unsigned int v49 = v160;
        }
        else {
          unsigned int v49 = v3;
        }
        break;
      }
    }
  }
  *(unsigned char *)(a3 + 66) = v48 < 0;
  unint64_t v50 = (v46 + 1);
  int v51 = ((_BYTE)v46 + 1) & 7;
  unint64_t v52 = (unsigned int *)((char *)v49 + (v50 >> 3));
  signed int v53 = bswap32(*v52) << (v50 & 7);
  if (v52 > v3) {
    unint64_t v52 = v3;
  }
  if (v48 < 0)
  {
    unsigned int v170 = __clz(v53);
    if (v170) {
      unsigned int v171 = (v53 << (v170 + 1)) >> -(char)v170;
    }
    else {
      unsigned int v171 = 0;
    }
    unsigned int v172 = v171 + ~(-1 << v170);
    *(_DWORD *)(a3 + 96) = v172;
    if (v172 > 0x1F) {
      return 4294958327;
    }
    unsigned int v173 = 0;
    unint64_t v174 = v51 + 2 * v170 + 1;
    unint64_t v175 = (unsigned int *)((char *)v52 + (v174 >> 3));
    if (v175 <= v3) {
      unint64_t v176 = v175;
    }
    else {
      unint64_t v176 = v3;
    }
    int v177 = v174 & 7;
    *(_DWORD *)(a3 + 100) = bswap32(*v175) << v177 >> 28;
    unint64_t v178 = (v177 + 4);
    int v179 = v178 & 7;
    unint64_t v180 = (unsigned int *)((char *)v176 + (v178 >> 3));
    unsigned int v181 = bswap32(*v180) << v179;
    if (v180 > v3) {
      unint64_t v180 = v3;
    }
    *(_DWORD *)(a3 + 104) = v181 >> 28;
    unint64_t v182 = (v179 + 4);
    int v183 = ((_BYTE)v179 + 4) & 7;
    int v184 = (unsigned int *)((char *)v180 + (v182 >> 3));
    unsigned int v185 = bswap32(*v184) << (v182 & 7);
    if (v184 <= v3) {
      char v186 = v184;
    }
    else {
      char v186 = v3;
    }
    do
    {
      if (v185 < 0x80000)
      {
        unint64_t v193 = (v183 + 1);
        int v194 = ((_BYTE)v183 + 1) & 7;
        unsigned int v195 = (unsigned int *)((char *)v186 + (v193 >> 3));
        unsigned int v196 = bswap32(*v195) << (v193 & 7);
        if (v195 > v3) {
          unsigned int v195 = v3;
        }
        int v197 = -1;
        do
        {
          unsigned int v198 = v196;
          int v199 = v197;
          unint64_t v200 = (v194 + 1);
          int v194 = ((_BYTE)v194 + 1) & 7;
          unsigned int v195 = (unsigned int *)((char *)v195 + (v200 >> 3));
          unsigned int v196 = bswap32(*v195) << (v200 & 7);
          if (v195 > v3) {
            unsigned int v195 = v3;
          }
          ++v197;
        }
        while ((v198 & 0x80000000) == 0);
        unsigned int v201 = v199 + 2;
        uint64_t v202 = a3 + 4 * v173;
        if (v201 > 0x1F)
        {
          *(_DWORD *)(v202 + 108) = -2;
          return 4294958327;
        }
        unint64_t v203 = v194 + v201;
        if (v201 > 0x18)
        {
          unsigned int v205 = v196 >> (47 - v197);
          int v190 = ((_BYTE)v194 + (_BYTE)v201) & 7;
          unint64_t v206 = (unsigned int *)((char *)v195 + ((unint64_t)(v203 - 16) >> 3));
          unsigned int v207 = bswap32(*v206) << (v203 & 7);
          if (v206 > v3) {
            unint64_t v206 = v3;
          }
          unsigned int v208 = *(unsigned int *)((char *)v206 + 2);
          unint64_t v191 = (unsigned int *)((char *)v206 + 2);
          unsigned int v192 = bswap32(v208) << v190;
          if (v191 > v3) {
            unint64_t v191 = v3;
          }
          int v204 = __PAIR64__(v205, v207) >> 16;
        }
        else
        {
          int v204 = v196 >> ~(_BYTE)v197;
          int v190 = ((_BYTE)v194 + (_BYTE)v201) & 7;
          unint64_t v191 = (unsigned int *)((char *)v195 + (v203 >> 3));
          unsigned int v192 = bswap32(*v191) << (v203 & 7);
          if (v191 > v3) {
            unint64_t v191 = v3;
          }
        }
        *(_DWORD *)(v202 + 108) = v204 + ~(-1 << v201);
      }
      else
      {
        unsigned int v187 = __clz(v185);
        unsigned int v188 = v185 << (v187 + 1) >> -(char)v187;
        if (!v187) {
          unsigned int v188 = 0;
        }
        *(_DWORD *)(a3 + 4 * v173 + 108) = v188 + ~(-1 << v187);
        unint64_t v189 = v183 + 2 * v187 + 1;
        int v190 = ((_BYTE)v183 + 2 * (_BYTE)v187 + 1) & 7;
        unint64_t v191 = (unsigned int *)((char *)v186 + (v189 >> 3));
        unsigned int v192 = bswap32(*v191) << (v189 & 7);
        if (v191 > v3) {
          unint64_t v191 = v3;
        }
      }
      if (v192 < 0x80000)
      {
        unint64_t v217 = (v190 + 1);
        int v218 = ((_BYTE)v190 + 1) & 7;
        unsigned int v219 = (unsigned int *)((char *)v191 + (v217 >> 3));
        unsigned int v220 = bswap32(*v219) << (v217 & 7);
        if (v219 <= v3) {
          unsigned int v221 = v219;
        }
        else {
          unsigned int v221 = v3;
        }
        int v222 = -1;
        do
        {
          unsigned int v223 = v220;
          int v224 = v222;
          unint64_t v225 = (v218 + 1);
          int v218 = ((_BYTE)v218 + 1) & 7;
          unsigned int v221 = (unsigned int *)((char *)v221 + (v225 >> 3));
          unsigned int v220 = bswap32(*v221) << (v225 & 7);
          if (v221 > v3) {
            unsigned int v221 = v3;
          }
          ++v222;
        }
        while ((v223 & 0x80000000) == 0);
        unsigned int v226 = v224 + 2;
        if (v226 > 0x1F)
        {
          uint64_t v301 = a3 + 4 * v173;
          goto LABEL_272;
        }
        unint64_t v227 = v218 + v226;
        if (v226 > 0x18)
        {
          unsigned int v229 = v220 >> (47 - v222);
          int v213 = ((_BYTE)v218 + (_BYTE)v226) & 7;
          unint64_t v230 = (unsigned int *)((char *)v221 + ((unint64_t)(v227 - 16) >> 3));
          unsigned int v231 = bswap32(*v230) << (v227 & 7);
          if (v230 <= v3) {
            unsigned int v232 = v230;
          }
          else {
            unsigned int v232 = v3;
          }
          unsigned int v233 = *(unsigned int *)((char *)v232 + 2);
          unsigned int v216 = (unsigned int *)((char *)v232 + 2);
          unsigned int v215 = bswap32(v233) << v213;
          if (v216 > v3) {
            unsigned int v216 = v3;
          }
          int v228 = __PAIR64__(v229, v231) >> 16;
        }
        else
        {
          int v228 = v220 >> ~(_BYTE)v222;
          int v213 = ((_BYTE)v218 + (_BYTE)v226) & 7;
          unsigned int v216 = (unsigned int *)((char *)v221 + (v227 >> 3));
          unsigned int v215 = bswap32(*v216) << (v227 & 7);
          if (v216 > v3) {
            unsigned int v216 = v3;
          }
        }
        int v234 = v228 + ~(-1 << v226);
        uint64_t v211 = v173;
        *(_DWORD *)(a3 + 4 * v173 + 236) = v234;
      }
      else
      {
        unsigned int v209 = __clz(v192);
        unsigned int v210 = v192 << (v209 + 1) >> -(char)v209;
        if (!v209) {
          unsigned int v210 = 0;
        }
        uint64_t v211 = v173;
        *(_DWORD *)(a3 + 4 * v173 + 236) = v210 + ~(-1 << v209);
        unint64_t v212 = v190 + 2 * v209 + 1;
        int v213 = v212 & 7;
        unsigned int v214 = (unsigned int *)((char *)v191 + (v212 >> 3));
        unsigned int v215 = bswap32(*v214) << (v212 & 7);
        if (v214 <= v3) {
          unsigned int v216 = v214;
        }
        else {
          unsigned int v216 = v3;
        }
      }
      *(_DWORD *)(a3 + 4 * v211 + 364) = v215 >> 31;
      unint64_t v235 = (v213 + 1);
      int v183 = ((_BYTE)v213 + 1) & 7;
      char v186 = (unsigned int *)((char *)v216 + (v235 >> 3));
      unsigned int v185 = bswap32(*v186) << v183;
      if (v186 > v3) {
        char v186 = v3;
      }
      ++v173;
    }
    while (v173 <= v172);
    *(_DWORD *)(a3 + 492) = v185 >> 27;
    int v236 = ((_BYTE)v183 + 5) & 7;
    unsigned int v237 = (unsigned int *)((char *)v186 + ((unint64_t)(v183 + 5) >> 3));
    unsigned int v238 = bswap32(*v237) << v236;
    if (v237 > v3) {
      unsigned int v237 = v3;
    }
    *(_DWORD *)(a3 + 496) = v238 >> 27;
    unint64_t v239 = (v236 + 5);
    int v240 = v239 & 7;
    int v241 = (unsigned int *)((char *)v237 + (v239 >> 3));
    unsigned int v242 = bswap32(*v241) << (v239 & 7);
    if (v241 > v3) {
      int v241 = v3;
    }
    *(_DWORD *)(a3 + 500) = v242 >> 27;
    unint64_t v243 = (v240 + 5);
    int v244 = ((_BYTE)v240 + 5) & 7;
    int v245 = (unsigned int *)((char *)v241 + (v243 >> 3));
    unsigned int v246 = bswap32(*v245) << (v243 & 7);
    if (v245 > v3) {
      int v245 = v3;
    }
    *(_DWORD *)(a3 + 504) = v246 >> 27;
    int v51 = ((_BYTE)v244 + 5) & 7;
    unint64_t v247 = (unsigned int *)((char *)v245 + ((unint64_t)(v244 + 5) >> 3));
    signed int v53 = bswap32(*v247) << ((v244 + 5) & 7);
    if (v247 <= v3) {
      unint64_t v52 = v247;
    }
    else {
      unint64_t v52 = v3;
    }
    goto LABEL_225;
  }
  if (v44 < 0)
  {
LABEL_225:
    *(unsigned char *)(a3 + 67) = v53 < 0;
    unint64_t v248 = (v51 + 1);
    int v51 = ((_BYTE)v51 + 1) & 7;
    unsigned int v249 = (unsigned int *)((char *)v52 + (v248 >> 3));
    signed int v53 = bswap32(*v249) << v51;
    if (v249 <= v3) {
      unint64_t v52 = v249;
    }
    else {
      unint64_t v52 = v3;
    }
  }
  *(unsigned char *)(a3 + 68) = v53 < 0;
  int v250 = ((_BYTE)v51 + 1) & 7;
  unint64_t v251 = (unsigned int *)((char *)v52 + ((unint64_t)(v51 + 1) >> 3));
  signed int v252 = bswap32(*v251) << v250;
  if (v251 > v3) {
    unint64_t v251 = v3;
  }
  *(unsigned char *)(a3 + 69) = v252 < 0;
  unint64_t v253 = (v250 + 1);
  int v254 = ((_BYTE)v250 + 1) & 7;
  char v255 = (unsigned int *)((char *)v251 + (v253 >> 3));
  signed int v256 = bswap32(*v255) << (v253 & 7);
  if (v255 <= v3) {
    char v257 = v255;
  }
  else {
    char v257 = v3;
  }
  if ((v252 & 0x80000000) == 0) {
    goto LABEL_234;
  }
  *(unsigned char *)(a3 + 70) = v256 < 0;
  unint64_t v259 = (v254 + 1);
  int v260 = ((_BYTE)v254 + 1) & 7;
  __int16 v261 = (unsigned int *)((char *)v257 + (v259 >> 3));
  LODWORD(v259) = bswap32(*v261) << (v259 & 7);
  unsigned int v262 = __clz(v259);
  int v263 = v259 << (v262 + 1) >> -(char)v262;
  int v264 = v262 ? v263 : 0;
  unsigned int v265 = v264 + ~(-1 << v262);
  *(_DWORD *)(a3 + 72) = v265;
  if (v265 > 0x10) {
    return 4294958327;
  }
  if (v261 > v3) {
    __int16 v261 = v3;
  }
  unint64_t v266 = v260 + 2 * v262 + 1;
  char v267 = (unsigned int *)((char *)v261 + (v266 >> 3));
  int v268 = v266 & 7;
  unsigned int v269 = bswap32(*v267) << (v266 & 7);
  unsigned int v270 = __clz(v269);
  unsigned int v271 = v269 << (v270 + 1) >> -(char)v270;
  if (!v270) {
    unsigned int v271 = 0;
  }
  unsigned int v272 = v271 + ~(-1 << v270);
  *(_DWORD *)(a3 + 76) = v272;
  if (v272 > 0x10) {
    return 4294958327;
  }
  BOOL v273 = v267 <= v3 ? v267 : v3;
  unint64_t v274 = v268 + 2 * v270 + 1;
  char v275 = (unsigned int *)((char *)v273 + (v274 >> 3));
  int v276 = v274 & 7;
  unsigned int v277 = bswap32(*v275) << v276;
  unsigned int v278 = __clz(v277);
  unsigned int v279 = v277 << (v278 + 1) >> -(char)v278;
  unsigned int v280 = v278 ? v279 : 0;
  unsigned int v281 = v280 + ~(-1 << v278);
  *(_DWORD *)(a3 + 80) = v281;
  if (v281 > 0x10) {
    return 4294958327;
  }
  if (v275 > v3) {
    char v275 = v3;
  }
  unint64_t v282 = v276 + 2 * v278 + 1;
  char v283 = (unsigned int *)((char *)v275 + (v282 >> 3));
  if (v283 <= v3) {
    char v284 = v283;
  }
  else {
    char v284 = v3;
  }
  int v285 = v282 & 7;
  unsigned int v286 = bswap32(*v283) << v285;
  unsigned int v287 = __clz(v286);
  unsigned int v288 = v286 << (v287 + 1) >> -(char)v287;
  if (!v287) {
    unsigned int v288 = 0;
  }
  unsigned int v289 = v288 + ~(-1 << v287);
  *(_DWORD *)(a3 + 84) = v289;
  unint64_t v290 = v285 + 2 * v287 + 1;
  int v291 = (unsigned int *)((char *)v284 + (v290 >> 3));
  unsigned __int16 v292 = v291 <= v3 ? v291 : v3;
  if (v289 > 0x10) {
    return 4294958327;
  }
  int v293 = v290 & 7;
  unsigned int v294 = bswap32(*v291) << (v290 & 7);
  if (v294 < 0x80000)
  {
    unint64_t v303 = (v293 + 1);
    int v304 = ((_BYTE)v293 + 1) & 7;
    char v305 = (unsigned int *)((char *)v292 + (v303 >> 3));
    unsigned int v306 = bswap32(*v305) << v304;
    if (v305 <= v3) {
      char v307 = v305;
    }
    else {
      char v307 = v3;
    }
    int v308 = -1;
    do
    {
      unsigned int v309 = v306;
      int v310 = v308;
      unint64_t v311 = (v304 + 1);
      int v304 = ((_BYTE)v304 + 1) & 7;
      char v307 = (unsigned int *)((char *)v307 + (v311 >> 3));
      unsigned int v306 = bswap32(*v307) << (v311 & 7);
      if (v307 > v3) {
        char v307 = v3;
      }
      ++v308;
    }
    while ((v309 & 0x80000000) == 0);
    unsigned int v312 = v310 + 2;
    if (v312 > 0x1F)
    {
      *(_DWORD *)(a3 + 88) = -2;
      return 4294958327;
    }
    unint64_t v313 = v304 + v312;
    if (v312 > 0x18)
    {
      unsigned int v315 = v306 >> (47 - v308);
      int v254 = ((_BYTE)v304 + (_BYTE)v312) & 7;
      int v316 = (unsigned int *)((char *)v307 + ((unint64_t)(v313 - 16) >> 3));
      unsigned int v317 = bswap32(*v316) << (v313 & 7);
      if (v316 > v3) {
        int v316 = v3;
      }
      unsigned int v318 = *(unsigned int *)((char *)v316 + 2);
      unsigned int v299 = (unsigned int *)((char *)v316 + 2);
      unsigned int v300 = bswap32(v318) << v254;
      if (v299 > v3) {
        unsigned int v299 = v3;
      }
      int v314 = __PAIR64__(v315, v317) >> 16;
    }
    else
    {
      int v314 = v306 >> ~(_BYTE)v308;
      int v254 = ((_BYTE)v304 + (_BYTE)v312) & 7;
      unsigned int v299 = (unsigned int *)((char *)v307 + (v313 >> 3));
      unsigned int v300 = bswap32(*v299) << (v313 & 7);
      if (v299 > v3) {
        unsigned int v299 = v3;
      }
    }
    unsigned int v297 = v314 + ~(-1 << v312);
    *(_DWORD *)(a3 + 88) = v297;
  }
  else
  {
    unsigned int v295 = __clz(v294);
    unsigned int v296 = v294 << (v295 + 1) >> -(char)v295;
    if (!v295) {
      unsigned int v296 = 0;
    }
    unsigned int v297 = v296 + ~(-1 << v295);
    *(_DWORD *)(a3 + 88) = v297;
    unint64_t v298 = v293 + 2 * v295 + 1;
    int v254 = v298 & 7;
    unsigned int v299 = (unsigned int *)((char *)v292 + (v298 >> 3));
    unsigned int v300 = bswap32(*v299) << (v298 & 7);
    if (v299 > v3) {
      unsigned int v299 = v3;
    }
  }
  if (v300 < 0x80000)
  {
    unint64_t v323 = (v254 + 1);
    int v254 = ((_BYTE)v254 + 1) & 7;
    unsigned int v324 = (unsigned int *)((char *)v299 + (v323 >> 3));
    unsigned int v325 = bswap32(*v324) << (v323 & 7);
    if (v324 > v3) {
      unsigned int v324 = v3;
    }
    int v326 = -1;
    do
    {
      unsigned int v327 = v325;
      int v328 = v326;
      unint64_t v329 = (v254 + 1);
      int v254 = ((_BYTE)v254 + 1) & 7;
      unsigned int v324 = (unsigned int *)((char *)v324 + (v329 >> 3));
      unsigned int v325 = bswap32(*v324) << (v329 & 7);
      if (v324 > v3) {
        unsigned int v324 = v3;
      }
      ++v326;
    }
    while ((v327 & 0x80000000) == 0);
    unsigned int v330 = v328 + 2;
    if (v330 > 0x1F)
    {
      *(_DWORD *)(a3 + 92) = -2;
      return 4294958327;
    }
    unint64_t v331 = v254 + v330;
    if (v330 > 0x18)
    {
      unsigned int v333 = v325 >> (47 - v326);
      LOBYTE(v254) = (v254 + v330) & 7;
      int v334 = (unsigned int *)((char *)v324 + ((unint64_t)(v331 - 16) >> 3));
      unsigned int v335 = bswap32(*v334) << (v331 & 7);
      if (v334 <= v3) {
        uint64_t v336 = v334;
      }
      else {
        uint64_t v336 = v3;
      }
      unsigned int v337 = *(unsigned int *)((char *)v336 + 2);
      char v257 = (unsigned int *)((char *)v336 + 2);
      signed int v256 = bswap32(v337) << v254;
      if (v257 > v3) {
        char v257 = v3;
      }
      int v332 = __PAIR64__(v333, v335) >> 16;
    }
    else
    {
      int v332 = v325 >> ~(_BYTE)v326;
      LOBYTE(v254) = (v254 + v330) & 7;
      char v257 = (unsigned int *)((char *)v324 + (v331 >> 3));
      signed int v256 = bswap32(*v257) << (v331 & 7);
      if (v257 > v3) {
        char v257 = v3;
      }
    }
    unsigned int v321 = v332 + ~(-1 << v330);
    *(_DWORD *)(a3 + 92) = v321;
  }
  else
  {
    unsigned int v319 = __clz(v300);
    unsigned int v320 = v300 << (v319 + 1) >> -(char)v319;
    if (!v319) {
      unsigned int v320 = 0;
    }
    unsigned int v321 = v320 + ~(-1 << v319);
    *(_DWORD *)(a3 + 92) = v321;
    unint64_t v322 = v254 + 2 * v319 + 1;
    LOBYTE(v254) = (v254 + 2 * v319 + 1) & 7;
    char v257 = (unsigned int *)((char *)v299 + (v322 >> 3));
    signed int v256 = bswap32(*v257) << v254;
    if (v257 > v3) {
      char v257 = v3;
    }
  }
  BOOL v338 = *(_DWORD *)(a2 + 1320) > v321 || v321 > 0x10;
  if (v338 || v297 > v321) {
    return 4294958327;
  }
LABEL_234:
  uint64_t v258 = 0;
  *(void *)(a1 + 16) = v257;
  *(_DWORD *)(a1 + 32) = v256;
  *(unsigned char *)(a1 + 36) = v254;
  return v258;
}

uint64_t sub_1BBB23B6C(unsigned int *a1, unsigned int a2, uint64_t a3, unsigned char *a4, unsigned char *a5, unsigned char *a6)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 4294958327;
  }
  int v22 = a1;
  unsigned int v27 = bswap32(*a1);
  char v28 = 0;
  unint64_t v25 = a1;
  unsigned int v26 = (char *)a1 + a2;
  unsigned int v23 = a2;
  unsigned int v24 = a2;
  if (!*(v26 - 1))
  {
    unsigned int v10 = (unsigned __int8 *)a1 + a2 - 2;
    do
    {
      if (!a2) {
        break;
      }
      --a2;
    }
    while (!*v10--);
    unsigned int v24 = a2;
  }
  uint64_t result = sub_1BBB21838((uint64_t)&v22, v29);
  if (!result)
  {
    *a5 = v49;
    *a6 = v50;
    *a4 = 0;
    int v13 = 16 * v30 + 16;
    int v14 = v32;
    int v15 = 32 - 16 * v32 + (32 - 16 * v32) * v31;
    *(_DWORD *)a3 = v13;
    *(_DWORD *)(a3 + 4) = v15;
    int v16 = v34;
    if (v34)
    {
      int v17 = 4 - 2 * v14;
      int v16 = 2 * v35;
      v13 -= 2 * v36;
      int v18 = v37 * v17;
      v15 -= v38 * v17;
    }
    else
    {
      int v18 = 0;
    }
    *(_DWORD *)(a3 + 8) = v16;
    *(_DWORD *)(a3 + 12) = v13;
    *(_DWORD *)(a3 + 16) = v18;
    *(_DWORD *)(a3 + 20) = v15;
    int v19 = v33;
    *(_DWORD *)(a3 + 24) = v14;
    *(_DWORD *)(a3 + 28) = v19;
    *(_DWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = xmmword_1BBB6FEA0;
    *(_OWORD *)(a3 + 48) = xmmword_1BBB6FCA0;
    if (!v39) {
      return 0;
    }
    if (v40)
    {
      int v20 = v41;
      *(_DWORD *)(a3 + 56) = v41;
      if (v20 == 255) {
        *(void *)(a3 + 60) = v42;
      }
    }
    if (v43 && (int v21 = v45, *(_DWORD *)(a3 + 32) = v44, *(_DWORD *)(a3 + 36) = v21, v46))
    {
      uint64_t result = 0;
      *(_DWORD *)(a3 + 40) = 1;
      *(void *)(a3 + 44) = v47;
      *(_DWORD *)(a3 + 52) = v48;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1BBB23D48(uint64_t a1)
{
  if (a1)
  {
    unint64_t v2 = *(void **)(a1 + 48);
    if (v2) {
      free(v2);
    }
    *(void *)(a1 + 48) = 0;
    uint64_t v3 = *(void **)(a1 + 56);
    if (v3) {
      free(v3);
    }
    *(void *)(a1 + 56) = 0;
  }
}

uint64_t sub_1BBB23D90(uint64_t a1, int a2)
{
  if (a2 <= 0)
  {
    *(_DWORD *)(a1 + 40) = 0;
    uint64_t result = 4294958327;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  else if (*(_DWORD *)(a1 + 40) >= a2)
  {
    return 0;
  }
  else
  {
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 56));
    *(_DWORD *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    uint64_t v4 = malloc_type_malloc(4 * a2, 0x82ECD37AuLL);
    *(void *)(a1 + 48) = v4;
    if (v4 && (int v5 = malloc_type_malloc(8 * a2, 0x82ECD37AuLL), (*(void *)(a1 + 56) = v5) != 0))
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 40) = a2;
    }
    else
    {
      return 4294967188;
    }
  }
  return result;
}

float sub_1BBB23E3C(uint64_t a1, unsigned int a2, int a3, float a4)
{
  uint64_t v4 = (uint64_t *)(a1 + 205840);
  float v5 = a4;
  if (*(_DWORD *)(a1 + 205904))
  {
    float v5 = *(float *)(a1 + 205864);
    uint64_t v6 = *v4;
    unsigned int v7 = *(unsigned __int16 *)(*v4 + 4720);
    if (v7)
    {
      unsigned int v8 = *(unsigned __int16 *)(*(void *)(v6 + 4712) + 2 * a2);
      if (a3)
      {
        if (a3 == 1) {
          int v9 = *(char *)(v6 + 19308);
        }
        else {
          int v9 = 0;
        }
      }
      else
      {
        int v9 = *(char *)(v6 + 19309);
      }
      float v10 = v5 + (float)v9;
      float v11 = *(float *)(v6 + 4732);
      float v12 = v10 * 0.25;
      float v13 = (float)v7;
      BOOL v14 = v8 >= v7;
      int v15 = v8 - v7;
      float v16 = -4.0;
      if (v15 != 0 && v14) {
        float v16 = 4.0;
      }
      if (v15 < 0) {
        int v15 = -v15;
      }
      float v17 = fminf(v11, 1.0);
      float v18 = (float)((float)(v16 * (float)v15) * v11) / v13;
      float v19 = -(float)(v12 * v17);
      if (v18 >= v19)
      {
        float v20 = v12 * v17;
        float v19 = v18;
        if (v18 > v20) {
          float v19 = v20;
        }
      }
      float v21 = v19 + v10;
      float v5 = 0.0;
      if (v21 >= 0.0)
      {
        float v5 = v21;
        if (v21 > 51.0) {
          float v5 = 51.0;
        }
      }
    }
  }
  int v22 = (int)(float)(v5 + 0.5) - (int)a4;
  if (v22 < -26) {
    float v5 = a4 + -26.0;
  }
  float result = a4 + 25.0;
  if (v22 <= 25) {
    return v5;
  }
  return result;
}

uint64_t sub_1BBB23F54(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(*(void *)(a1 + 205840) + 19164)) {
    return 0;
  }
  unsigned __int8 v2 = 0;
  int v3 = *(_DWORD *)(a1 + 57096);
  unsigned int v4 = *(_DWORD *)(*(void *)(a1 + 205840) + 19180);
  unsigned int v5 = *(_DWORD *)(*(void *)(a1 + 205840) + 19184);
  unsigned int v6 = v4 >> 1;
  unsigned int v7 = v5 >> 1;
  int v8 = *(_DWORD *)(*(void *)(a1 + 205840) + 19188);
  if (v8 > 179)
  {
    if (v8 != 180)
    {
      if (v8 != 270) {
        return v2;
      }
      goto LABEL_8;
    }
  }
  else if (v8)
  {
    if (v8 != 90) {
      return v2;
    }
LABEL_8:
    int v9 = v6 + 8;
    int v10 = v7 + 8;
    int v11 = v4 + 8;
    int v12 = v7 + 8;
    goto LABEL_10;
  }
  int v9 = v6 + 8;
  int v10 = v7 + 8;
  int v12 = v5 + 8;
  int v11 = v6 + 8;
LABEL_10:
  int v13 = ((16 * (a2 / v3)) | 8) - (*(_DWORD *)(*(void *)(a1 + 205840) + 19176) + v7);
  if (v13 < 0) {
    int v13 = *(_DWORD *)(*(void *)(a1 + 205840) + 19176) + v7 - ((16 * (a2 / v3)) | 8);
  }
  if (v13 >= v12) {
    return 0;
  }
  int v14 = ((16 * (a2 % v3)) | 8) - (*(_DWORD *)(*(void *)(a1 + 205840) + 19172) + v6);
  if (v14 < 0) {
    int v14 = -v14;
  }
  if (v14 >= v11) {
    return 0;
  }
  if (v13 < v10 && v14 < v9) {
    return 1;
  }
  else {
    return 2;
  }
}

void sub_1BBB24040(uint64_t a1)
{
  uint64_t v874 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  v820 = (_DWORD *)(*(void *)a1 + 57096);
  uint64_t v3 = *(void *)a1 + 205456;
  uint64_t v844 = *(unsigned int *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 24);
  int v7 = *(_DWORD *)(v5 + 12);
  int v6 = *(_DWORD *)(v5 + 16);
  uint64_t v849 = *(int *)(v5 + 8);
  uint64_t v8 = *(void *)(*(void *)a1 + 205840);
  uint64_t v830 = *(void *)a1;
  uint64_t v819 = v5;
  int v828 = *(_DWORD *)(a1 + 32);
  if (v828 != v7)
  {
    int v817 = *(_DWORD *)(v5 + 16);
    int v818 = *(_DWORD *)(a1 + 36);
    signed int v827 = *(_DWORD *)(v5 + 12);
    signed int v829 = *(_DWORD *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 8);
    goto LABEL_5;
  }
  int v852 = *(_DWORD *)(v5 + 12);
  int v854 = *(_DWORD *)(v5 + 16);
  int v856 = *(_DWORD *)(a1 + 36);
  int v9 = (int *)(v2 + 17736);
  uint64_t v10 = *(void *)(v5 + 80);
  int v11 = *(_DWORD *)(v8 + 1304);
  int v12 = *(unsigned __int8 *)(v8 + 1368);
  int v867 = *(_DWORD *)(v8 + 1288);
  if (*(unsigned char *)(v5 + 64))
  {
    *(_DWORD *)(v2 + 14200) = 0;
    int v13 = 19;
  }
  else if (*(unsigned char *)(v8 + 1393))
  {
    int v13 = 5;
  }
  else
  {
    int v13 = 1;
  }
  int v862 = v13;
  *(void *)(v2 + 14128) = v10;
  *(void *)(v2 + 14144) = v10;
  *(_DWORD *)(v2 + 14160) = 0;
  *(unsigned char *)(v2 + 14164) = 0;
  *(_DWORD *)(v2 + 47940) = *v820;
  *(_WORD *)(v2 + 48107) = 0;
  *(_WORD *)(v2 + 48104) = 0;
  *(_WORD *)(v2 + 48256) = 0;
  *(_DWORD *)(v2 + 47948) = 0;
  *(unsigned char *)(v2 + 47952) = 0;
  *(void *)(v2 + 47968) = 0;
  *(void *)(v2 + 47960) = 0;
  *(_OWORD *)(v2 + 48136) = 0u;
  *(_OWORD *)(v2 + 48152) = 0u;
  *(void *)(v2 + 48216) = 0;
  *(void *)(v2 + 48224) = 0;
  *(void *)&long long v47 = 0x1010101010101010;
  *((void *)&v47 + 1) = 0x1010101010101010;
  *(_OWORD *)(v2 + 48258) = v47;
  *(_OWORD *)(v2 + 48274) = v47;
  *(_OWORD *)(v2 + 48290) = v47;
  *(_OWORD *)(v2 + 48306) = v47;
  *(_OWORD *)(v2 + 48322) = v47;
  *(_OWORD *)(v2 + 48338) = v47;
  *(_OWORD *)(v2 + 48354) = v47;
  *(_OWORD *)(v2 + 48370) = v47;
  *(_OWORD *)(v2 + 48386) = v47;
  *(_OWORD *)(v2 + 48402) = v47;
  *(_OWORD *)(v2 + 48418) = v47;
  *(_OWORD *)(v2 + 48434) = v47;
  *(_OWORD *)(v2 + 48450) = v47;
  *(_OWORD *)(v2 + 48466) = v47;
  *(void *)(v2 + 48000) = 0;
  *(unsigned char *)(v2 + 48109) = 0;
  *(void *)(v2 + 48224) = *(void *)(v3 + 400);
  *(unsigned char *)(v2 + 48108) = *(unsigned char *)(v3 + 8) == 1;
  *(void *)(v2 + 46272) = v2 + 47104;
  *(void *)(v2 + 47960) = v2 + 19452;
  *(void *)(v2 + 47968) = v2 + 19520;
  *(void *)(v2 + 48096) = v2 + 46000;
  *(void *)(v2 + 47976) = v2 + 46288;
  int v48 = sub_1BBB23F54(v830, v828);
  *(unsigned char *)(v2 + 50600) = v48;
  int v49 = (int)(float)(sub_1BBB23E3C(v830, v828, v48, *(float *)(v3 + 408)) + 0.5);
  *(unsigned char *)(v2 + 47882) = v49;
  BOOL v50 = v12 == 1;
  if (v12 == 6) {
    BOOL v50 = 1;
  }
  BOOL v866 = v50;
  if (v12 == 6 || v12 == 1)
  {
    int v51 = *(unsigned __int8 *)(v8 + 1359);
    if (v51 == 255) {
      LOBYTE(v51) = *(unsigned char *)(*(void *)(v830 + 136) + 281);
    }
    *(_DWORD *)(v2 + 17760) = (char)v51;
  }
  unsigned int v52 = *(unsigned __int8 *)(v3 + 2220);
  int v858 = v49;
  if (v52 >= 2 && *(float *)(v3 + 408) < (float)*(char *)(v3 + 2221)) {
    unsigned int v52 = 1;
  }
  *(_DWORD *)(v2 + 19440) = v52;
  *(_DWORD *)(v2 + 19444) = *(char *)(v3 + 2222);
  *(_DWORD *)(v2 + 19448) = *(char *)(v3 + 2223);
  memcpy((void *)(v2 + 17764), (const void *)(v830 + 206000), 0x68CuLL);
  if (*(_DWORD *)(v3 + 468) == 1) {
    signed int v53 = (const void *)(v830 + 56256);
  }
  else {
    signed int v53 = (const void *)(*(void *)(v3 + 344) + 22840);
  }
  v860 = (_DWORD *)(v2 + 14168);
  memcpy((void *)(v2 + 16920), v53, 0x348uLL);
  if (*(_DWORD *)(v3 + 540) == 1)
  {
    int v54 = *(_DWORD *)(v8 + 4776);
    int v55 = *(_DWORD *)(v2 + 17740);
    if (*v9 >= v54 + 1) {
      int v56 = v54 + 1;
    }
    else {
      int v56 = *v9;
    }
    *(_DWORD *)(v2 + 17744) = v56;
    int v57 = *(_DWORD *)(v8 + 4780);
    if (v55 >= v57 + 1) {
      int v58 = v57 + 1;
    }
    else {
      int v58 = v55;
    }
    *(_DWORD *)(v2 + 17748) = v58;
  }
  if (*(_DWORD *)(v3 + 2376)
    && v828 < v828 / *(_DWORD *)(v3 + 2380) * *(_DWORD *)(v3 + 2380) + *(_DWORD *)(v3 + 2384) / 16)
  {
    if (*(unsigned char *)(v3 + 2220) == 3) {
      int v59 = 4;
    }
    else {
      int v59 = 2;
    }
    *(_DWORD *)(v2 + 19440) = v59;
  }
  int v60 = *(_DWORD *)(v8 + 1276);
  int v61 = *(unsigned __int8 *)(v8 + 1354);
  unsigned __int8 v62 = *(unsigned char *)(v8 + 101);
  uint64_t v63 = *(void *)(v3 + 344);
  bzero(v860, 0xABCuLL);
  *(_DWORD *)(v2 + 14188) = *(_DWORD *)v3;
  *(_DWORD *)(v2 + 14192) = v11;
  uint64_t v64 = v830 + 117544;
  BOOL v65 = *(unsigned char *)(v830 + 118608) != 0;
  if (*(unsigned char *)(v830 + 118608))
  {
    unsigned __int8 v62 = 0;
    unsigned int v66 = (int32x2_t *)(v2 + 14164);
    *(unsigned char *)(v2 + 14196) = 0;
LABEL_56:
    v66[4].i8[1] = v62;
    goto LABEL_57;
  }
  unsigned int v66 = (int32x2_t *)(v2 + 14164);
  *(unsigned char *)(v2 + 14196) = v61;
  if (v61) {
    goto LABEL_56;
  }
  BOOL v65 = 1;
LABEL_57:
  *(_DWORD *)(v2 + 14176) = v828;
  *(_DWORD *)(v2 + 14184) = v12;
  int v67 = v862;
  if (v862 == 5) {
    *(_DWORD *)(v2 + 14200) = v60 & 3;
  }
  if (*(unsigned char *)(v830 + 117548)) {
    goto LABEL_581;
  }
  *(_DWORD *)(v2 + 14204) = (*(_DWORD *)(v830 + 119144) - 1) & v867;
  char v68 = !v65;
  if (!*(unsigned char *)(v3 + 9)) {
    char v68 = 1;
  }
  if ((v68 & 1) == 0) {
    *(_DWORD *)(v2 + 14208) = 0;
  }
  if (*(unsigned char *)(v3 + 86)) {
    goto LABEL_581;
  }
  unsigned int v69 = (unsigned char *)(v63 + 24536);
  *(_DWORD *)(v2 + 14220) = 0;
  if (v12 == 1) {
    v66[7].i8[4] = *(_DWORD *)(v2 + 17760);
  }
  int32x2_t v70 = vadd_s32(*(int32x2_t *)(v2 + 17744), (int32x2_t)-1);
  v66[8] = v70;
  BOOL v71 = v70.i32[0] != *(_DWORD *)(v3 + 56) || (v12 == 6 || v12 == 1) && v70.i32[1] != *(_DWORD *)(v3 + 60);
  v66[7].i8[5] = v71;
  v66[338].i8[5] = *(unsigned char *)(v63 + 24553);
  if (*v69)
  {
    unsigned int v72 = 0;
    v66[9].i8[0] = 1;
    do
    {
      int v73 = *(_DWORD *)(v63 + 23744 + 4 * v72);
      *(_DWORD *)(v2 + 14240 + 4 * v72) = v73;
      *(_DWORD *)(v2 + 14504 + 4 * v72) = *(_DWORD *)(v63 + 24008 + 4 * v72);
      *(_DWORD *)(v2 + 14768 + 4 * v72) = *(_DWORD *)(v63 + 24272 + 4 * v72);
      ++v72;
    }
    while (v73 != 3);
  }
  if (*(unsigned char *)(v63 + 24537) && (v12 == 6 || v12 == 1))
  {
    unsigned int v74 = 0;
    v66[9].i8[1] = 1;
    do
    {
      int v75 = *(_DWORD *)(v63 + 4 * v74 + 23876);
      int v76 = (_DWORD *)(v2 + 4 * v74);
      v76[3593] = v75;
      v76[3659] = *(_DWORD *)(v63 + 4 * v74 + 24140);
      v76[3725] = *(_DWORD *)(v63 + 4 * v74++ + 24404);
    }
    while (v75 != 3);
  }
  if (*v69)
  {
    unsigned int v77 = 0;
    v66[9].i8[0] = 1;
    do
    {
      int v78 = *(_DWORD *)(v63 + 23744 + 4 * v77);
      *(_DWORD *)(v2 + 14240 + 4 * v77) = v78;
      *(_DWORD *)(v2 + 14504 + 4 * v77) = *(_DWORD *)(v63 + 24008 + 4 * v77);
      *(_DWORD *)(v2 + 14768 + 4 * v77) = *(_DWORD *)(v63 + 24272 + 4 * v77);
      ++v77;
    }
    while (v78 != 3);
  }
  if (*(unsigned char *)(v63 + 24537) && (v12 == 6 || v12 == 1))
  {
    unsigned int v79 = 0;
    v66[9].i8[1] = 1;
    do
    {
      int v80 = *(_DWORD *)(v63 + 4 * v79 + 23876);
      unsigned int v81 = (_DWORD *)(v2 + 4 * v79);
      v81[3593] = v80;
      v81[3659] = *(_DWORD *)(v63 + 4 * v79 + 24140);
      v81[3725] = *(_DWORD *)(v63 + 4 * v79++ + 24404);
    }
    while (v80 != 3);
  }
  if (*(void *)(v63 + 24544))
  {
    v66[318].i8[0] = 1;
    uint64_t v82 = *(void *)(v63 + 24544);
    if (v82)
    {
      unint64_t v83 = (_DWORD *)&v66[334] + 1;
      do
      {
        *(v83 - 32) = *(_DWORD *)v82;
        *(v83 - 24) = *(_DWORD *)(v82 + 4);
        *(v83 - 16) = *(_DWORD *)(v82 + 8);
        *(v83 - 8) = *(_DWORD *)(v82 + 12);
        *v83++ = *(_DWORD *)(v82 + 16);
        uint64_t v82 = *(void *)(v82 + 24);
      }
      while (v82);
    }
  }
  v66[340].i32[0] = v858 - *(_DWORD *)(v3 + 72) - 26;
  if ((v12 - 3) < 2) {
    goto LABEL_581;
  }
  switch(*(_DWORD *)(v2 + 19440))
  {
    case 1:
      int v84 = 1;
      goto LABEL_593;
    case 2:
      int v84 = 2;
LABEL_593:
      v66[341].i32[1] = v84;
      break;
    case 3:
      v66[341].i32[1] = 0;
      goto LABEL_596;
    case 4:
      v66[341].i32[1] = 2;
LABEL_596:
      v66[342] = *(int32x2_t *)(v2 + 19444);
      break;
    default:
      break;
  }
  if (*(_DWORD *)(v3 + 12) && (*(_DWORD *)(v3 + 16) - 3) < 3) {
    goto LABEL_581;
  }
  if (*(unsigned char *)(v3 + 2631))
  {
    unsigned int v504 = *(unsigned __int8 *)(v8 + 1368);
    if (v504 <= 8 && ((1 << v504) & 0x16B) != 0)
    {
      if (*(unsigned char *)(v8 + 16))
      {
        if (v66[8].i32[0] < *(unsigned __int8 *)(v8 + 22)) {
          goto LABEL_610;
        }
        v66[7].i8[5] = 1;
        v66[8].i32[0] = *(unsigned __int8 *)(v8 + 22) - 1;
        int v505 = *(unsigned __int8 *)(v8 + 22);
      }
      else
      {
        if (!*(unsigned char *)(v8 + 24)) {
          goto LABEL_610;
        }
        int v505 = 1;
        v66[7].i8[5] = 1;
        v66[8].i32[0] = 0;
      }
      if (*v9 < v505) {
        int v505 = *v9;
      }
      *(_DWORD *)(v2 + 17744) = v505;
    }
  }
LABEL_610:
  *(unsigned char *)(v2 + 48106) = 0;
  *(void *)(v2 + 48032) = v2 + 15032;
  if (*(unsigned char *)(v3 + 64) && (!v12 || v12 == 5)
    || *(_DWORD *)(v3 + 68) && (v12 == 1 || v12 == 6)
    || *(unsigned char *)(v3 + 473))
  {
    uint64_t v506 = *(void *)(v3 + 344);
    *(_DWORD *)(v2 + 15036) = *(unsigned __int8 *)(v8 + 5024);
    *(_DWORD *)(v2 + 15040) = *(unsigned __int8 *)(v8 + 5025);
    if (!*(unsigned char *)(v3 + 473)) {
      *(unsigned char *)(v2 + 48106) = 1;
    }
    uint64_t v507 = 0;
    *(void *)&long long v872 = v506 + 22840;
    *((void *)&v872 + 1) = v506 + 23112;
    *(void *)&v871[4] = *(void *)(v506 + 23664);
    uint64_t v508 = v2 + 15032;
    uint64_t v509 = *(unsigned int *)(*(void *)(v3 + 344) + 8);
    int v510 = 1;
    do
    {
      int v869 = v510;
      uint64_t v511 = *(unsigned int *)&v871[4 * v507 + 4];
      if ((int)v511 >= 1)
      {
        uint64_t v512 = 0;
        uint64_t v513 = *((void *)&v872 + v507);
        uint32x2_t v514 = *(uint32x2_t *)(v2 + 15036);
        uint32x2_t v515 = vshl_u32((uint32x2_t)0x100000001, v514);
        int v516 = -1 << v514.i8[4];
        do
        {
          uint64_t v517 = v508 + 32 * v507 + v512;
          *(unsigned char *)(v517 + 76) = 0;
          v518 = (unsigned char *)(v517 + 76);
          *(v518 - 64) = 0;
          uint64_t v519 = v508 + 384 * v507 + 12 * v512;
          *(uint32x2_t *)(v519 + 140) = v515;
          uint64_t v520 = v519 + 140;
          *(void *)(v520 + 768) = 0;
          *(_DWORD *)(v520 + 8) = v515.i32[1];
          *(_DWORD *)(v520 + 776) = 0;
          uint64_t v521 = *(void *)(v513 + 8 * v512);
          if (v509)
          {
            uint64_t v522 = 0;
            uint64_t v523 = v509;
            while (*(_DWORD *)(v521 + 1276) != *(_DWORD *)(v8 + (v507 << 7) + (v522 >> 54) + 18468))
            {
              v522 += 0x100000000000000;
              if (!--v523) {
                goto LABEL_631;
              }
            }
            if (*(unsigned char *)(v8 + 3 * (v522 >> 56) + 5026))
            {
              if (!*(unsigned char *)(v3 + 473)) {
                *(v518 - 64) = 1;
              }
              uint64_t v524 = v8 + 6 * (v522 >> 56);
              *(_DWORD *)uint64_t v520 = *(__int16 *)(v524 + 5410);
              *(_DWORD *)(v520 + 768) = *(__int16 *)(v524 + 5794);
            }
          }
LABEL_631:
          if (*(unsigned char *)(v3 + 474))
          {
            uint64_t v525 = 0;
            char v526 = 1;
            do
            {
              char v527 = v526;
              unsigned int v528 = *(_DWORD *)(v521 + 4 * v525 + 4668);
              int v529 = *(_DWORD *)(v8 + 4 * v525 + 4668);
              if (v528) {
                BOOL v530 = v529 == 0;
              }
              else {
                BOOL v530 = 1;
              }
              if (!v530)
              {
                int v531 = (v529 << v514.i8[4]) / v528;
                int v532 = v516 + v531;
                if (v516 + v531 < 0) {
                  int v532 = -v532;
                }
                if (v532 > 1 << (v514.i8[4] - 6))
                {
                  unsigned char *v518 = 1;
                  if (v531 <= -128) {
                    int v531 = -128;
                  }
                  if (v531 >= 127) {
                    int v531 = 127;
                  }
                  *(_DWORD *)(v2 + 384 * v507 + 12 * v512 + 4 * v525 + 15176) = v531;
                }
              }
              char v526 = 0;
              uint64_t v525 = 1;
            }
            while ((v527 & 1) != 0);
          }
          ++v512;
        }
        while (v512 != v511);
      }
      uint64_t v507 = 1;
      int v510 = 0;
    }
    while ((v866 & v869 & 1) != 0);
    unsigned int v66 = (int32x2_t *)(v2 + 14164);
    int v67 = v862;
    uint64_t v64 = v830 + 117544;
  }
  int v533 = *(unsigned __int8 *)(v8 + 1394);
  int v534 = *(unsigned char *)(v8 + 1394) != 0;
  uint64_t v535 = *(_DWORD **)(v2 + 14144);
  unsigned int v536 = *(_DWORD *)(v2 + 14160);
  uint64_t v537 = v66->u8[0];
  *uint64_t v535 = bswap32(v536);
  int v538 = (v537 + 1) & 7;
  unsigned __int32 v539 = (_DWORD *)((char *)v535 + ((unint64_t)(v537 + 1) >> 3));
  unsigned int v540 = v536 << ((v537 + 1) & 0xF8);
  if (v537 >= 0x1F) {
    unsigned int v540 = 0;
  }
  unsigned int v541 = v540 | (v534 << (30 - v538));
  *unsigned __int32 v539 = bswap32(v541);
  int v542 = (_DWORD *)((char *)v539 + ((unint64_t)(v538 + 2) >> 3));
  unsigned int v543 = (v541 << ((v538 + 2) & 8)) | (v67 << (27 - ((v538 + 2) & 7)));
  *int v542 = bswap32(v543);
  int v544 = ((((_BYTE)v538 + 2) & 7) + 5) & 7;
  uint64_t v545 = (_DWORD *)((char *)v542 + ((unint64_t)((((_BYTE)v538 + 2) & 7u) + 5) >> 3));
  unsigned int v546 = v543 << ((((v538 + 2) & 7) + 5) & 8);
  unsigned int v547 = *(_DWORD *)(v2 + 14176) + 1;
  unsigned int v548 = __clz(v547);
  unsigned int v549 = (((v547 - (0x80000000 >> v548)) | (0x80000000 >> v548)) << (2 * v548 - v544 - 31)) | v546;
  *uint64_t v545 = bswap32(v549);
  unint64_t v550 = v544 - 2 * v548 + 63;
  int v551 = ((_BYTE)v544 - 2 * (_BYTE)v548 + 63) & 7;
  uint64_t v552 = (_DWORD *)((char *)v545 + (v550 >> 3));
  unsigned int v553 = v549 << (v550 & 0xF8);
  if (v550 >= 0x20) {
    unsigned int v553 = 0;
  }
  unsigned int v554 = *(_DWORD *)(v2 + 14184) + 1;
  unsigned int v555 = __clz(v554);
  unsigned int v556 = v553 | (((v554 - (0x80000000 >> v555)) | (0x80000000 >> v555)) << (2 * v555 - v551 - 31));
  *uint64_t v552 = bswap32(v556);
  unint64_t v557 = v551 - 2 * v555 + 63;
  int v558 = ((_BYTE)v551 - 2 * (_BYTE)v555 + 63) & 7;
  v559 = (_DWORD *)((char *)v552 + (v557 >> 3));
  unsigned int v560 = v556 << (v557 & 0xF8);
  if (v557 >= 0x20) {
    unsigned int v560 = 0;
  }
  unsigned int v561 = *(_DWORD *)(v2 + 14188) + 1;
  unsigned int v562 = __clz(v561);
  unsigned int v563 = v560 | (((v561 - (0x80000000 >> v562)) | (0x80000000 >> v562)) << (2 * v562 - v558 - 31));
  _DWORD *v559 = bswap32(v563);
  unint64_t v564 = v558 - 2 * v562 + 63;
  int v565 = ((_BYTE)v558 - 2 * (_BYTE)v562 + 63) & 7;
  int v566 = (_DWORD *)((char *)v559 + (v564 >> 3));
  unsigned int v567 = v563 << (v564 & 0xF8);
  if (v564 >= 0x20) {
    unsigned int v567 = 0;
  }
  unsigned int v568 = v567 | (*(_DWORD *)(v2 + 14192) << (28 - *(_DWORD *)v64 - v565));
  *int v566 = bswap32(v568);
  unsigned int v569 = *(_DWORD *)v64 + v565 + 4;
  int v570 = v569 & 7;
  unsigned int v571 = (_DWORD *)((char *)v566 + (v569 >> 3));
  unsigned int v572 = v568 << (v569 & 0xF8);
  if (v569 >= 0x20) {
    unsigned int v572 = 0;
  }
  if (!*(unsigned char *)(v64 + 1064))
  {
    unsigned int v573 = (v66[4].u8[0] << (v570 ^ 0x1F)) | v572;
    *unsigned int v571 = bswap32(v573);
    char v574 = v570 + 1;
    uint64_t v575 = (v570 + 1) >> 3;
    int v570 = (v570 + 1) & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + v575);
    unsigned int v572 = v573 << (v574 & 8);
    if (v66[4].i8[0])
    {
      unsigned int v576 = (v66[4].u8[1] << (v570 ^ 0x1F)) | v572;
      *unsigned int v571 = bswap32(v576);
      char v577 = v570 + 1;
      uint64_t v578 = (v570 + 1) >> 3;
      int v570 = (v570 + 1) & 7;
      unsigned int v571 = (_DWORD *)((char *)v571 + v578);
      unsigned int v572 = v576 << (v577 & 8);
    }
  }
  if (v67 == 19 || v67 == 5)
  {
    unsigned int v579 = *(_DWORD *)(v2 + 14200) + 1;
    unsigned int v580 = __clz(v579);
    unsigned int v581 = (((v579 - (0x80000000 >> v580)) | (0x80000000 >> v580)) << (2 * v580 - v570 - 31)) | v572;
    *unsigned int v571 = bswap32(v581);
    unsigned int v582 = v570 - 2 * v580 + 63;
    int v570 = v582 & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + (v582 >> 3));
    unsigned int v572 = v581 << (v582 & 0xF8);
    if (v582 >= 0x20) {
      unsigned int v572 = 0;
    }
  }
  if (*(unsigned char *)(v64 + 4) == 1)
  {
    if (*(unsigned char *)(v64 + 12)) {
      goto LABEL_581;
    }
  }
  else if (!*(unsigned char *)(v64 + 4))
  {
    unsigned int v583 = (*(_DWORD *)(v2 + 14204) << (28 - v570 - *(_DWORD *)(v64 + 8))) | v572;
    *unsigned int v571 = bswap32(v583);
    unsigned int v584 = v570 + *(_DWORD *)(v64 + 8) + 4;
    int v570 = v584 & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + (v584 >> 3));
    unsigned int v572 = v583 << (v584 & 0xF8);
    if (v584 >= 0x20) {
      unsigned int v572 = 0;
    }
    if (*(unsigned char *)(v3 + 9) == 1 && !v66[4].i8[0])
    {
      int v585 = *(_DWORD *)(v2 + 14208);
      int v586 = v585 <= 0 ? -2 * v585 : 2 * v585 - 1;
      unsigned int v587 = v586 + 1;
      unsigned int v588 = __clz(v587);
      unsigned int v589 = (((v587 - (0x80000000 >> v588)) | (0x80000000 >> v588)) << (2 * v588 - v570 - 31)) | v572;
      *unsigned int v571 = bswap32(v589);
      unsigned int v590 = v570 - 2 * v588 + 63;
      int v570 = v590 & 7;
      unsigned int v571 = (_DWORD *)((char *)v571 + (v590 >> 3));
      unsigned int v572 = v589 << (v590 & 0xF8);
      if (v590 >= 0x20) {
        unsigned int v572 = 0;
      }
    }
  }
  if (*(unsigned char *)(v3 + 86))
  {
    unsigned int v591 = *(_DWORD *)(v2 + 14220) + 1;
    unsigned int v592 = __clz(v591);
    unsigned int v593 = (((v591 - (0x80000000 >> v592)) | (0x80000000 >> v592)) << (2 * v592 - v570 - 31)) | v572;
    *unsigned int v571 = bswap32(v593);
    unsigned int v594 = v570 - 2 * v592 + 63;
    int v570 = v594 & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + (v594 >> 3));
    unsigned int v572 = v593 << (v594 & 0xF8);
    if (v594 >= 0x20) {
      unsigned int v572 = 0;
    }
  }
  unsigned int v595 = *(_DWORD *)(v2 + 14184);
  if (v595 == 1)
  {
    unsigned int v596 = (v66[7].u8[4] << (v570 ^ 0x1F)) | v572;
    *unsigned int v571 = bswap32(v596);
    char v597 = v570 + 1;
    uint64_t v598 = (v570 + 1) >> 3;
    int v570 = (v570 + 1) & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + v598);
    unsigned int v572 = v596 << (v597 & 8);
    unsigned int v595 = *(_DWORD *)(v2 + 14184);
  }
  if (v595 > 8 || ((1 << v595) & 0x16B) == 0) {
    goto LABEL_693;
  }
  unsigned int v599 = (v66[7].u8[5] << (v570 ^ 0x1F)) | v572;
  *unsigned int v571 = bswap32(v599);
  char v600 = v570 + 1;
  uint64_t v601 = (v570 + 1) >> 3;
  int v570 = (v570 + 1) & 7;
  unsigned int v571 = (_DWORD *)((char *)v571 + v601);
  unsigned int v572 = v599 << (v600 & 8);
  if (!v66[7].i8[5])
  {
    *(_DWORD *)(v2 + 14228) = *(_DWORD *)(v3 + 56);
    *(_DWORD *)(v2 + 14232) = *(_DWORD *)(v3 + 60);
LABEL_693:
    unsigned int v606 = *(_DWORD *)(v2 + 14184);
    goto LABEL_694;
  }
  unsigned int v602 = *(_DWORD *)(v2 + 14228) + 1;
  unsigned int v603 = __clz(v602);
  unsigned int v604 = (((v602 - (0x80000000 >> v603)) | (0x80000000 >> v603)) << (2 * v603 - v570 - 31)) | v572;
  *unsigned int v571 = bswap32(v604);
  unsigned int v605 = v570 - 2 * v603 + 63;
  int v570 = v605 & 7;
  unsigned int v571 = (_DWORD *)((char *)v571 + (v605 >> 3));
  unsigned int v572 = v604 << (v605 & 0xF8);
  if (v605 >= 0x20) {
    unsigned int v572 = 0;
  }
  unsigned int v606 = *(_DWORD *)(v2 + 14184);
  if (v606 == 6 || v606 == 1)
  {
    unsigned int v607 = *(_DWORD *)(v2 + 14232) + 1;
    unsigned int v608 = __clz(v607);
    unsigned int v609 = (((v607 - (0x80000000 >> v608)) | (0x80000000 >> v608)) << (2 * v608 - v570 - 31)) | v572;
    *unsigned int v571 = bswap32(v609);
    unsigned int v610 = v570 - 2 * v608 + 63;
    int v570 = v610 & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + (v610 >> 3));
    unsigned int v572 = v609 << (v610 & 0xF8);
    if (v610 >= 0x20) {
      unsigned int v572 = 0;
    }
    goto LABEL_693;
  }
LABEL_694:
  if (v606 > 9 || ((1 << v606) & 0x294) == 0)
  {
    unsigned int v800 = (v66[9].u8[0] << (v570 ^ 0x1F)) | v572;
    *unsigned int v571 = bswap32(v800);
    char v801 = v570 + 1;
    uint64_t v802 = (v570 + 1) >> 3;
    int v570 = (v570 + 1) & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + v802);
    unsigned int v572 = v800 << (v801 & 8);
    if (v66[9].i8[0])
    {
      long long v803 = (unsigned int *)(v2 + 14240);
      while (1)
      {
        unsigned int v804 = *v803;
        unsigned int v805 = __clz(*v803 + 1);
        unsigned int v806 = (((*v803 + 1 - (0x80000000 >> v805)) | (0x80000000 >> v805)) << (2 * v805 - v570 - 31)) | v572;
        *unsigned int v571 = bswap32(v806);
        unsigned int v807 = v570 - 2 * v805 + 63;
        int v570 = v807 & 7;
        unsigned int v571 = (_DWORD *)((char *)v571 + (v807 >> 3));
        unsigned int v572 = v806 << (v807 & 0xF8);
        if (v807 >= 0x20) {
          unsigned int v572 = 0;
        }
        if (v804 <= 1) {
          break;
        }
        if (v804 == 2)
        {
          unsigned int v808 = v803[132];
LABEL_853:
          unsigned int v809 = v808 + 1;
          unsigned int v810 = __clz(v809);
          unsigned int v811 = (((v809 - (0x80000000 >> v810)) | (0x80000000 >> v810)) << (2 * v810 - v570 - 31)) | v572;
          *unsigned int v571 = bswap32(v811);
          unsigned int v812 = v570 - 2 * v810 + 63;
          int v570 = v812 & 7;
          unsigned int v571 = (_DWORD *)((char *)v571 + (v812 >> 3));
          unsigned int v572 = v811 << (v812 & 0xF8);
          if (v812 >= 0x20) {
            unsigned int v572 = 0;
          }
        }
        ++v803;
        if (v804 == 3) {
          goto LABEL_696;
        }
      }
      unsigned int v808 = v803[66];
      goto LABEL_853;
    }
  }
LABEL_696:
  int v611 = *(_DWORD *)(v2 + 14184);
  if (v611 == 6 || v611 == 1)
  {
    unsigned int v612 = (v66[9].u8[1] << (v570 ^ 0x1F)) | v572;
    *unsigned int v571 = bswap32(v612);
    char v613 = v570 + 1;
    uint64_t v614 = (v570 + 1) >> 3;
    int v570 = (v570 + 1) & 7;
    unsigned int v571 = (_DWORD *)((char *)v571 + v614);
    unsigned int v572 = v612 << (v613 & 8);
    if (v66[9].i8[1])
    {
      v615 = (unsigned int *)(v2 + 14372);
      while (1)
      {
        unsigned int v616 = *v615;
        unsigned int v617 = __clz(*v615 + 1);
        unsigned int v618 = (((*v615 + 1 - (0x80000000 >> v617)) | (0x80000000 >> v617)) << (2 * v617 - v570 - 31)) | v572;
        *unsigned int v571 = bswap32(v618);
        unsigned int v619 = v570 - 2 * v617 + 63;
        int v570 = v619 & 7;
        unsigned int v571 = (_DWORD *)((char *)v571 + (v619 >> 3));
        unsigned int v572 = v618 << (v619 & 0xF8);
        if (v619 >= 0x20) {
          unsigned int v572 = 0;
        }
        if (v616 <= 1) {
          break;
        }
        if (v616 == 2)
        {
          unsigned int v620 = v615[132];
LABEL_706:
          unsigned int v621 = v620 + 1;
          unsigned int v622 = __clz(v621);
          unsigned int v623 = (((v621 - (0x80000000 >> v622)) | (0x80000000 >> v622)) << (2 * v622 - v570 - 31)) | v572;
          *unsigned int v571 = bswap32(v623);
          unsigned int v624 = v570 - 2 * v622 + 63;
          int v570 = v624 & 7;
          unsigned int v571 = (_DWORD *)((char *)v571 + (v624 >> 3));
          unsigned int v572 = v623 << (v624 & 0xF8);
          if (v624 >= 0x20) {
            unsigned int v572 = 0;
          }
        }
        ++v615;
        if (v616 == 3) {
          goto LABEL_709;
        }
      }
      unsigned int v620 = v615[66];
      goto LABEL_706;
    }
  }
LABEL_709:
  int v625 = *(_DWORD *)(v2 + 14184);
  if (v625) {
    BOOL v626 = v625 == 5;
  }
  else {
    BOOL v626 = 1;
  }
  char v627 = v626;
  BOOL v629 = v625 == 1 || v625 == 6;
  if (*(_DWORD *)(v3 + 68) & v629 | (*(unsigned char *)(v3 + 64) & v627))
  {
    unsigned int v630 = 0;
    *(void *)(v2 + 14144) = v571;
    *(_DWORD *)(v2 + 14160) = v572;
    v66->i8[0] = v570;
    unsigned int v631 = *(_DWORD *)(v2 + 15036) + 1;
    unsigned int v632 = __clz(v631);
    unsigned int v633 = (((v631 - (0x80000000 >> v632)) | (0x80000000 >> v632)) << (2 * v632 - v570 - 31)) | v572;
    *unsigned int v571 = bswap32(v633);
    unint64_t v634 = v570 - 2 * v632 + 63;
    int v635 = v634 & 7;
    uint64_t v636 = (_DWORD *)((char *)v571 + (v634 >> 3));
    unsigned int v637 = v633 << (v634 & 0xF8);
    if (v634 >= 0x20) {
      unsigned int v638 = 0;
    }
    else {
      unsigned int v638 = v637;
    }
    unsigned int v639 = *(_DWORD *)(v2 + 15040) + 1;
    unsigned int v640 = __clz(v639);
    unsigned int v641 = v638 | (((v639 - (0x80000000 >> v640)) | (0x80000000 >> v640)) << (2 * v640 - v635 - 31));
    *uint64_t v636 = bswap32(v641);
    unsigned int v642 = v635 - 2 * v640 + 63;
    int v643 = v642 & 7;
    unsigned int v571 = (_DWORD *)((char *)v636 + (v642 >> 3));
    unsigned int v644 = v641 << (v642 & 0xF8);
    if (v642 >= 0x20) {
      unsigned int v572 = 0;
    }
    else {
      unsigned int v572 = v644;
    }
    uint64_t v645 = v2 + 15044;
    uint64_t v646 = v2 + 15108;
    uint64_t v647 = v2 + 15172;
    uint64_t v648 = v2 + 15940;
    do
    {
      uint64_t v649 = v630;
      unsigned int v650 = (*(unsigned __int8 *)(v645 + v630) << ~(_BYTE)v643) | v572;
      *unsigned int v571 = bswap32(v650);
      unsigned int v651 = v643 + 1;
      int v652 = v651 & 7;
      uint64_t v653 = (_DWORD *)((char *)v571 + (v651 >> 3));
      unsigned int v654 = v650 << (v651 & 0xF8);
      if (*(unsigned char *)(v645 + v630))
      {
        int v655 = *(_DWORD *)(v647 + 12 * v630);
        if (v655 <= 0) {
          int v656 = -2 * v655;
        }
        else {
          int v656 = 2 * v655 - 1;
        }
        unsigned int v657 = v656 + 1;
        unsigned int v658 = __clz(v657);
        unsigned int v659 = (((v657 - (0x80000000 >> v658)) | (0x80000000 >> v658)) << (2 * v658 - v652 - 31)) | v654;
        *uint64_t v653 = bswap32(v659);
        unint64_t v660 = v652 - 2 * v658 + 63;
        int v661 = v660 & 7;
        uint64_t v662 = (_DWORD *)((char *)v653 + (v660 >> 3));
        unsigned int v663 = v659 << (v660 & 0xF8);
        if (v660 >= 0x20) {
          unsigned int v664 = 0;
        }
        else {
          unsigned int v664 = v663;
        }
        int v665 = *(_DWORD *)(v648 + 12 * v630);
        if (v665 <= 0) {
          int v666 = -2 * v665;
        }
        else {
          int v666 = 2 * v665 - 1;
        }
        unsigned int v667 = v666 + 1;
        unsigned int v668 = __clz(v667);
        unsigned int v669 = v664 | (((v667 - (0x80000000 >> v668)) | (0x80000000 >> v668)) << (2 * v668 - v661 - 31));
        *uint64_t v662 = bswap32(v669);
        unsigned int v670 = v661 - 2 * v668 + 63;
        int v652 = v670 & 7;
        uint64_t v653 = (_DWORD *)((char *)v662 + (v670 >> 3));
        unsigned int v654 = v669 << (v670 & 0xF8);
        if (v670 >= 0x20) {
          unsigned int v654 = 0;
        }
      }
      else
      {
        *(_DWORD *)(v647 + 12 * v630) = 1 << *(_DWORD *)(v2 + 15036);
        *(_DWORD *)(v648 + 12 * v630) = 0;
      }
      char v671 = 0;
      unsigned int v672 = (*(unsigned __int8 *)(v646 + v649) << (v652 ^ 0x1F)) | v654;
      *uint64_t v653 = bswap32(v672);
      unsigned int v673 = v652 + 1;
      int v643 = v673 & 7;
      unsigned int v571 = (_DWORD *)((char *)v653 + (v673 >> 3));
      unsigned int v572 = v672 << (v673 & 8);
      uint64_t v674 = 1;
      do
      {
        char v675 = v671;
        if (*(unsigned char *)(v646 + v649))
        {
          int v676 = *(_DWORD *)(v647 + 12 * v649 + 4 * v674);
          if (v676 <= 0) {
            int v677 = -2 * v676;
          }
          else {
            int v677 = 2 * v676 - 1;
          }
          unsigned int v678 = v677 + 1;
          unsigned int v679 = __clz(v678);
          unsigned int v680 = (((v678 - (0x80000000 >> v679)) | (0x80000000 >> v679)) << (2 * v679 - v643 - 31)) | v572;
          *unsigned int v571 = bswap32(v680);
          unint64_t v681 = v643 - 2 * v679 + 63;
          int v682 = v681 & 7;
          uint64_t v683 = (_DWORD *)((char *)v571 + (v681 >> 3));
          unsigned int v684 = v680 << (v681 & 0xF8);
          if (v681 >= 0x20) {
            unsigned int v684 = 0;
          }
          int v685 = *(_DWORD *)(v648 + 12 * v649 + 4 * v674);
          if (v685 <= 0) {
            int v686 = -2 * v685;
          }
          else {
            int v686 = 2 * v685 - 1;
          }
          unsigned int v687 = v686 + 1;
          unsigned int v688 = __clz(v687);
          unsigned int v689 = v684 | (((v687 - (0x80000000 >> v688)) | (0x80000000 >> v688)) << (2 * v688 - v682 - 31));
          *uint64_t v683 = bswap32(v689);
          unsigned int v690 = v682 - 2 * v688 + 63;
          int v643 = v690 & 7;
          unsigned int v571 = (_DWORD *)((char *)v683 + (v690 >> 3));
          unsigned int v572 = v689 << (v690 & 0xF8);
          if (v690 >= 0x20) {
            unsigned int v572 = 0;
          }
        }
        else
        {
          *(_DWORD *)(v647 + 12 * v649 + 4 * v674) = 1 << *(_DWORD *)(v2 + 15040);
          *(_DWORD *)(v648 + 12 * v649 + 4 * v674) = 0;
        }
        char v671 = 1;
        uint64_t v674 = 2;
      }
      while ((v675 & 1) == 0);
      unsigned int v630 = v649 + 1;
    }
    while ((v649 + 1) <= v66[8].i32[0]);
    int v691 = *(_DWORD *)(v2 + 14184);
    if ((v691 == 6 || v691 == 1) && *(_DWORD *)(v3 + 68) == 1)
    {
      unsigned int v692 = 0;
      do
      {
        uint64_t v693 = v692;
        uint64_t v694 = v2 + v692;
        unsigned int v695 = (*(unsigned __int8 *)(v694 + 15076) << ~(_BYTE)v643) | v572;
        *unsigned int v571 = bswap32(v695);
        unsigned int v696 = v643 + 1;
        int v697 = v696 & 7;
        v698 = (_DWORD *)((char *)v571 + (v696 >> 3));
        unsigned int v699 = v695 << (v696 & 0xF8);
        if (*(unsigned char *)(v694 + 15076))
        {
          uint64_t v700 = v2 + 12 * v693;
          int v701 = *(_DWORD *)(v700 + 15556);
          if (v701 <= 0) {
            int v702 = -2 * v701;
          }
          else {
            int v702 = 2 * v701 - 1;
          }
          unsigned int v703 = v702 + 1;
          unsigned int v704 = __clz(v703);
          unsigned int v705 = (((v703 - (0x80000000 >> v704)) | (0x80000000 >> v704)) << (2 * v704 - v697 - 31)) | v699;
          _DWORD *v698 = bswap32(v705);
          unint64_t v706 = v697 - 2 * v704 + 63;
          int v707 = v706 & 7;
          char v708 = (_DWORD *)((char *)v698 + (v706 >> 3));
          unsigned int v709 = v705 << (v706 & 0xF8);
          if (v706 >= 0x20) {
            unsigned int v710 = 0;
          }
          else {
            unsigned int v710 = v709;
          }
          int v711 = *(_DWORD *)(v700 + 16324);
          if (v711 <= 0) {
            int v712 = -2 * v711;
          }
          else {
            int v712 = 2 * v711 - 1;
          }
          unsigned int v713 = v712 + 1;
          unsigned int v714 = __clz(v713);
          unsigned int v715 = v710 | (((v713 - (0x80000000 >> v714)) | (0x80000000 >> v714)) << (2 * v714 - v707 - 31));
          *char v708 = bswap32(v715);
          unsigned int v716 = v707 - 2 * v714 + 63;
          int v697 = v716 & 7;
          v698 = (_DWORD *)((char *)v708 + (v716 >> 3));
          unsigned int v699 = v715 << (v716 & 0xF8);
          if (v716 >= 0x20) {
            unsigned int v699 = 0;
          }
        }
        else
        {
          uint64_t v717 = v2 + 12 * v693;
          *(_DWORD *)(v717 + 15556) = 1 << *(_DWORD *)(v2 + 15036);
          *(_DWORD *)(v717 + 16324) = 0;
        }
        char v718 = 0;
        v719 = (unsigned char *)(v2 + v693 + 15140);
        unsigned int v720 = (*v719 << (v697 ^ 0x1F)) | v699;
        _DWORD *v698 = bswap32(v720);
        unsigned int v721 = v697 + 1;
        unsigned int v571 = (_DWORD *)((char *)v698 + (v721 >> 3));
        int v643 = v721 & 7;
        unsigned int v572 = v720 << (v721 & 8);
        uint64_t v722 = 1;
        do
        {
          char v723 = v718;
          if (*v719)
          {
            uint64_t v724 = v2 + 12 * v693 + 4 * v722;
            int v725 = *(_DWORD *)(v724 + 15556);
            if (v725 <= 0) {
              int v726 = -2 * v725;
            }
            else {
              int v726 = 2 * v725 - 1;
            }
            unsigned int v727 = v726 + 1;
            unsigned int v728 = __clz(v727);
            unsigned int v729 = (((v727 - (0x80000000 >> v728)) | (0x80000000 >> v728)) << (2 * v728 - v643 - 31)) | v572;
            *unsigned int v571 = bswap32(v729);
            unint64_t v730 = v643 - 2 * v728 + 63;
            int v731 = v730 & 7;
            uint64_t v732 = (_DWORD *)((char *)v571 + (v730 >> 3));
            unsigned int v733 = v729 << (v730 & 0xF8);
            if (v730 >= 0x20) {
              unsigned int v733 = 0;
            }
            int v734 = *(_DWORD *)(v724 + 16324);
            if (v734 <= 0) {
              int v735 = -2 * v734;
            }
            else {
              int v735 = 2 * v734 - 1;
            }
            unsigned int v736 = v735 + 1;
            unsigned int v737 = __clz(v736);
            unsigned int v738 = v733 | (((v736 - (0x80000000 >> v737)) | (0x80000000 >> v737)) << (2 * v737 - v731 - 31));
            *uint64_t v732 = bswap32(v738);
            unsigned int v739 = v731 - 2 * v737 + 63;
            int v643 = v739 & 7;
            unsigned int v571 = (_DWORD *)((char *)v732 + (v739 >> 3));
            unsigned int v572 = v738 << (v739 & 0xF8);
            if (v739 >= 0x20) {
              unsigned int v572 = 0;
            }
          }
          else
          {
            uint64_t v740 = v2 + 12 * v693 + 4 * v722;
            *(_DWORD *)(v740 + 15556) = 1 << *(_DWORD *)(v2 + 15040);
            *(_DWORD *)(v740 + 16324) = 0;
          }
          char v718 = 1;
          uint64_t v722 = 2;
        }
        while ((v723 & 1) == 0);
        unsigned int v692 = v693 + 1;
      }
      while ((v693 + 1) <= *(_DWORD *)(v2 + 14232));
    }
    *(void *)(v2 + 14144) = v571;
    *(_DWORD *)(v2 + 14160) = v572;
    int v570 = v643;
    v66->i8[0] = v643;
  }
  _DWORD *v860 = v534;
  if (!v533) {
    goto LABEL_794;
  }
  if (v67 == 19 || v67 == 5)
  {
    unsigned int v741 = (v66[338].u8[4] << ~(_BYTE)v570) | v572;
    *unsigned int v571 = bswap32(v741);
    unint64_t v742 = (v570 + 1);
    uint64_t v743 = (_DWORD *)((char *)v571 + (v742 >> 3));
    unsigned int v744 = (v741 << ((v570 + 1) & 0xF8)) | (v66[338].u8[5] << ((v570 + 1) & 7 ^ 0x1F));
    *uint64_t v743 = bswap32(v744);
    int v570 = ((((_BYTE)v570 + 1) & 7) + 1) & 7;
    unsigned int v571 = (_DWORD *)((char *)v743 + (((v742 & 7) + 1) >> 3));
    unsigned int v572 = v744 << (((v742 & 7) + 1) & 8);
    goto LABEL_794;
  }
  unsigned int v779 = (v66[318].u8[0] << ~(_BYTE)v570) | v572;
  *unsigned int v571 = bswap32(v779);
  char v780 = v570 + 1;
  uint64_t v781 = (v570 + 1) >> 3;
  int v570 = (v570 + 1) & 7;
  unsigned int v571 = (_DWORD *)((char *)v571 + v781);
  unsigned int v572 = v779 << (v780 & 0xF8);
  if (v66[318].i8[0] == 1)
  {
    uint64_t v782 = (int *)&v66[334] + 1;
    do
    {
      int v783 = *(v782 - 32);
      unsigned int v784 = __clz(v783 + 1);
      unsigned int v785 = (((v783 + 1 - (0x80000000 >> v784)) | (0x80000000 >> v784)) << (2 * v784 - v570 - 31)) | v572;
      *unsigned int v571 = bswap32(v785);
      unsigned int v786 = v570 - 2 * v784 + 63;
      int v570 = v786 & 7;
      unsigned int v571 = (_DWORD *)((char *)v571 + (v786 >> 3));
      unsigned int v572 = v785 << (v786 & 0xF8);
      if (v786 >= 0x20) {
        unsigned int v572 = 0;
      }
      if ((v783 | 2) == 3)
      {
        unsigned int v787 = *(v782 - 24) + 1;
        unsigned int v788 = __clz(v787);
        unsigned int v789 = (((v787 - (0x80000000 >> v788)) | (0x80000000 >> v788)) << (2 * v788 - v570 - 31)) | v572;
        *unsigned int v571 = bswap32(v789);
        unsigned int v790 = v570 - 2 * v788 + 63;
        int v570 = v790 & 7;
        unsigned int v571 = (_DWORD *)((char *)v571 + (v790 >> 3));
        unsigned int v572 = v789 << (v790 & 0xF8);
        if (v790 >= 0x20) {
          unsigned int v572 = 0;
        }
      }
      switch(v783)
      {
        case 6:
        case 3:
          unsigned int v792 = *(v782 - 8) + 1;
          unsigned int v793 = __clz(v792);
          unsigned int v794 = (((v792 - (0x80000000 >> v793)) | (0x80000000 >> v793)) << (2 * v793 - v570 - 31)) | v572;
          *unsigned int v571 = bswap32(v794);
          unsigned int v795 = v570 - 2 * v793 + 63;
          int v570 = v795 & 7;
          unsigned int v571 = (_DWORD *)((char *)v571 + (v795 >> 3));
          unsigned int v572 = v794 << (v795 & 0xF8);
          if (v795 >= 0x20) {
            unsigned int v572 = 0;
          }
          break;
        case 2:
          int v791 = *(v782 - 16);
          goto LABEL_841;
        case 4:
          int v791 = *v782;
LABEL_841:
          unsigned int v796 = v791 + 1;
          unsigned int v797 = __clz(v796);
          unsigned int v798 = (((v796 - (0x80000000 >> v797)) | (0x80000000 >> v797)) << (2 * v797 - v570 - 31)) | v572;
          *unsigned int v571 = bswap32(v798);
          unsigned int v799 = v570 - 2 * v797 + 63;
          int v570 = v799 & 7;
          unsigned int v571 = (_DWORD *)((char *)v571 + (v799 >> 3));
          unsigned int v572 = v798 << (v799 & 0xF8);
          if (v799 >= 0x20) {
            unsigned int v572 = 0;
          }
          break;
      }
      ++v782;
    }
    while (v783);
  }
LABEL_794:
  if (*(unsigned char *)(v3 + 8) == 1)
  {
    unsigned int v745 = *(_DWORD *)(v2 + 14184);
    if (v745 > 9 || ((1 << v745) & 0x294) == 0)
    {
      unsigned int v746 = v572 | (0x80000000 >> v570);
      *unsigned int v571 = bswap32(v746);
      char v747 = v570 + 1;
      uint64_t v748 = (v570 + 1) >> 3;
      int v570 = (v570 + 1) & 7;
      unsigned int v571 = (_DWORD *)((char *)v571 + v748);
      unsigned int v572 = v746 << (v747 & 0xF8);
    }
  }
  int v749 = v66[340].i32[0];
  if (v749 <= 0) {
    unsigned int v750 = 1 - 2 * v749;
  }
  else {
    unsigned int v750 = 2 * v749;
  }
  unsigned int v751 = __clz(v750);
  unsigned int v752 = (((v750 - (0x80000000 >> v751)) | (0x80000000 >> v751)) << (2 * v751 - v570 - 31)) | v572;
  *unsigned int v571 = bswap32(v752);
  unsigned int v753 = v570 - 2 * v751 + 63;
  unsigned int v754 = v752 << ((v570 - 2 * v751 + 63) & 0xF8);
  if (v753 >= 0x20) {
    unsigned int v755 = 0;
  }
  else {
    unsigned int v755 = v754;
  }
  unsigned int v756 = *(_DWORD *)(v2 + 14184) - 3;
  if (v756 < 7 && ((0x63u >> v756) & 1) != 0) {
    goto LABEL_581;
  }
  uint64_t v757 = v753 >> 3;
  int v758 = v753 & 7;
  v759 = (_DWORD *)((char *)v571 + v757);
  if (*(unsigned char *)(v3 + 84) == 1)
  {
    unsigned int v760 = v66[341].i32[1] + 1;
    unsigned int v761 = __clz(v760);
    unsigned int v762 = (((v760 - (0x80000000 >> v761)) | (0x80000000 >> v761)) << (2 * v761 - v758 - 31)) | v755;
    _DWORD *v759 = bswap32(v762);
    unsigned int v763 = v758 - 2 * v761 + 63;
    int v758 = v763 & 7;
    v759 = (_DWORD *)((char *)v759 + (v763 >> 3));
    unsigned int v755 = v762 << (v763 & 0xF8);
    if (v763 >= 0x20) {
      unsigned int v755 = 0;
    }
    if (v66[341].i32[1] != 1)
    {
      int v764 = v66[342].i32[0];
      if (v764 <= 0) {
        unsigned int v765 = 1 - 2 * v764;
      }
      else {
        unsigned int v765 = 2 * v764;
      }
      unsigned int v766 = __clz(v765);
      unsigned int v767 = (((v765 - (0x80000000 >> v766)) | (0x80000000 >> v766)) << (2 * v766 - v758 - 31)) | v755;
      _DWORD *v759 = bswap32(v767);
      unint64_t v768 = v758 - 2 * v766 + 63;
      int v769 = v768 & 7;
      int v770 = (_DWORD *)((char *)v759 + (v768 >> 3));
      int v771 = v767 << (v768 & 0xF8);
      if (v768 >= 0x20) {
        int v758 = 0;
      }
      else {
        int v758 = v771;
      }
      int v772 = v66[342].i32[1];
      if (v772 <= 0) {
        unsigned int v773 = 1 - 2 * v772;
      }
      else {
        unsigned int v773 = 2 * v772;
      }
      unsigned int v774 = __clz(v773);
      unsigned int v775 = v758 | (((v773 - (0x80000000 >> v774)) | (0x80000000 >> v774)) << (2 * v774 - v769 - 31));
      *int v770 = bswap32(v775);
      unsigned int v776 = v769 - 2 * v774 + 63;
      LOBYTE(v758) = v776 & 7;
      v759 = (_DWORD *)((char *)v770 + (v776 >> 3));
      unsigned int v777 = v775 << (v776 & 0xF8);
      if (v776 >= 0x20) {
        unsigned int v755 = 0;
      }
      else {
        unsigned int v755 = v777;
      }
    }
  }
  if (*(_DWORD *)(v3 + 12) && (*(_DWORD *)(v3 + 16) - 6) >= 0xFFFFFFFD) {
    goto LABEL_581;
  }
  *(void *)(v2 + 14144) = v759;
  *(_DWORD *)(v2 + 14160) = v755;
  v66->i8[0] = v758;
  *(void *)(v2 + 47888) = v819 + 20;
  *(_DWORD *)(v819 + 52) = 0;
  *(_OWORD *)(v819 + 36) = 0u;
  *(_OWORD *)(v819 + 20) = 0u;
  *(void *)(v2 + 47896) = v819 + 56;
  *(void *)(v2 + 47904) = v819 + 60;
  *(_DWORD *)(*(void *)(v3 + 400) + 188) = *(unsigned __int8 *)(v8 + 1354);
  if (sub_1BBB506C8(*(void *)(v3 + 400), v849, *(_DWORD *)(v2 + 14184), v66[341].i32[1], v66[342].i32[0], v66[342].i32[1]))goto LABEL_581; {
  uint64_t v1 = *(void *)a1;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  signed int v829 = *(_DWORD *)(a1 + 32);
  uint64_t v778 = *(void *)(a1 + 24);
  signed int v827 = *(_DWORD *)(v778 + 12);
  int v817 = *(_DWORD *)(v778 + 16);
  int v818 = *(_DWORD *)(a1 + 36);
  int v6 = v854;
  int v4 = v856;
  int v7 = v852;
LABEL_5:
  int v15 = (char *)(v14 + 47882);
  float v16 = (unsigned char *)(v14 + 12432);
  float v17 = (unsigned __int8 *)(v1 + 117295);
  uint64_t v868 = v1;
  v821 = (_DWORD *)(v1 + 57096);
  int v848 = *(_DWORD *)(v1 + 57096);
  uint64_t v18 = *(void *)(v14 + 48112);
  int v19 = *(unsigned __int8 *)(v14 + 14196);
  BOOL v826 = *(unsigned char *)(v14 + 14196) == 0;
  uint64_t v20 = *(void *)(v14 + 14144);
  int v21 = *(unsigned __int8 *)(v14 + 14164);
  int v22 = *(_DWORD *)(v14 + 14184);
  *(unsigned char *)(v14 + 47948) = v22;
  *(unsigned char *)(v14 + 47949) = v19;
  *(unsigned char *)(v14 + 47950) = *(unsigned char *)(v14 + 14197);
  v845 = v17;
  if (v17[1314] && !v19) {
    goto LABEL_581;
  }
  LODWORD(v832) = v20;
  int v833 = v21;
  uint64_t v23 = v14 + 48144;
  uint64_t v24 = v868 + 205536;
  uint64_t v825 = v14 + 14128;
  long long v872 = 0uLL;
  uint64_t v873 = 0;
  uint64_t v847 = v14;
  v857 = (unsigned char *)(v14 + 12432);
  uint64_t v831 = v18;
  uint64_t v870 = v14 + 48144;
  if (v829 != v827) {
    goto LABEL_372;
  }
  *(_DWORD *)(v14 + 50628) = 0;
  if (v848 >= 1)
  {
    unsigned int v25 = v848 + 1;
    uint64_t v26 = *(void *)(v14 + 50616) + 160;
    *(void *)&long long v27 = 0x2222222222222222;
    *((void *)&v27 + 1) = 0x2222222222222222;
    *(void *)&long long v28 = 0x2020202020202020;
    *((void *)&v28 + 1) = 0x2020202020202020;
    do
    {
      *(void *)(v26 + 80) = 0;
      *(void *)(v26 + 88) = 0;
      *(void *)(v26 + 96) = 0;
      *(_OWORD *)(v26 + 48) = v27;
      *(_OWORD *)(v26 + 64) = v27;
      *(void *)(v26 + 112) = 0;
      *(unsigned char *)(v26 + 16) = 0;
      *(_DWORD *)(v26 + 17) = -1;
      *(unsigned char *)(v26 + 21) = -1;
      *(void *)uint64_t v26 = 0;
      *(void *)(v26 + 8) = 0;
      *(unsigned char *)(v26 + 39) = 0;
      *(_OWORD *)(v26 - 32) = v28;
      *(_OWORD *)(v26 - 16) = v28;
      *(_OWORD *)(v26 - 160) = 0uLL;
      *(_OWORD *)(v26 - 144) = 0uLL;
      *(_OWORD *)(v26 - 128) = 0uLL;
      *(_OWORD *)(v26 - 112) = 0uLL;
      *(_OWORD *)(v26 - 96) = 0uLL;
      *(_OWORD *)(v26 - 80) = 0uLL;
      --v25;
      *(_OWORD *)(v26 - 64) = 0uLL;
      *(_OWORD *)(v26 - 48) = 0uLL;
      v26 += 288;
    }
    while (v25 > 1);
  }
  unint64_t v29 = (unsigned __int8 *)(v14 + 16880);
  *(unsigned char *)(v14 + 48104) = *(unsigned char *)(v868 + 205543);
  int v30 = *v845;
  *(unsigned char *)(v14 + 48257) = v30;
  if (v30)
  {
    unint64_t v31 = 0;
    unsigned __int8 v32 = (long long *)(v14 + 48258);
    unsigned __int8 v33 = &xmmword_1BBB8BCCE;
    do
    {
      if (v31 > 5)
      {
        uint64_t v34 = (v31 - 6);
        int v35 = (_OWORD *)(v14 + (v34 << 6) + 48354);
        int v36 = (_OWORD *)((char *)&unk_1BBB8BD2E + 64 * v34);
        long long v37 = v36[1];
        *int v35 = *v36;
        v35[1] = v37;
        long long v38 = v36[3];
        v35[2] = v36[2];
        v35[3] = v38;
      }
      else
      {
        *unsigned __int8 v32 = *v33;
      }
      ++v31;
      ++v32;
      ++v33;
    }
    while (v31 != 8);
  }
  int v39 = v7;
  int v40 = v6;
  *(unsigned char *)(v14 + 48256) = *v845;
  uint64_t v41 = v868 + 205536;
  *(unsigned char *)(*(void *)(v14 + 47960) + 56) = *(_DWORD *)(v868 + 205536);
  *(unsigned char *)(*(void *)(v14 + 47960) + 57) = *(unsigned char *)(*(void *)(v14 + 47960) + 56);
  *(void *)(v14 + 48136) = *(void *)(v868 + 205840);
  *(void *)uint64_t v870 = v14 + 16920;
  *(void *)(v14 + 48152) = v14 + 17192;
  *(_OWORD *)(v14 + 48160) = *(_OWORD *)(v14 + 17736);
  uint64_t v42 = *(void *)(v868 + 205840);
  char v43 = *(unsigned char *)(v42 + 5000);
  char v44 = *(unsigned char *)(v42 + 5001);
  if (v22 != 2 && v22 != 7)
  {
    int v45 = *(_DWORD *)(v868 + 207916);
    if ((v45 & 1) != 0 && (int v46 = *(_DWORD *)(v868 + 207920)) != 0)
    {
      if (*(_DWORD *)(v868 + 207832)) {
        char v43 = *(unsigned char *)(v868 + (*(_DWORD *)(v847 + 14176) / *(_DWORD *)(v868 + 207836)) + 208064);
      }
      else {
        char v43 = v46 != *(_DWORD *)(v868 + 208060);
      }
    }
    else if (!v45)
    {
      goto LABEL_104;
    }
    if (*(unsigned char *)(*(void *)(v868 + 136) + 577) == 1)
    {
      if (*(unsigned char *)(v42 + 24))
      {
        uint64_t v85 = sub_1BBB0F5CC(*(_DWORD *)(v42 + 1288), *(_DWORD *)(*(void *)(*(void *)(v868 + 205800) + 22824) + 12), *(void *)(*(void *)(v868 + 205800) + 22824) + 216);
        uint64_t v41 = v868 + 205536;
        if (!v85) {
          char v43 = 1;
        }
      }
    }
LABEL_104:
    uint64_t v86 = *(unsigned int *)(v41 + 2448);
    if v86 && (*(_DWORD *)(v41 + 2444))
    {
      unsigned int v87 = (unsigned __int16 *)(v41 + 2452);
      while (1)
      {
        int v88 = *v87++;
        if (*(_DWORD *)(v847 + 14176) == v88) {
          break;
        }
        if (!--v86) {
          goto LABEL_111;
        }
      }
      char v44 = 1;
    }
  }
LABEL_111:
  uint64_t v89 = *(unsigned int *)(v41 + 2472);
  if (v89) {
    BOOL v90 = (*(_DWORD *)(v41 + 2468) & 1) == 0;
  }
  else {
    BOOL v90 = 1;
  }
  if (!v90)
  {
    uint64_t v91 = 0;
    while (*(_DWORD *)(v847 + 14176) != *(unsigned __int16 *)(v868 + 208012 + 2 * v91))
    {
      if (v89 == ++v91) {
        goto LABEL_120;
      }
    }
    *(_DWORD *)(v868 + 4 * v91 + 208028) = 1;
  }
LABEL_120:
  if (*(unsigned char *)(v42 + 1358)) {
    char v92 = 1;
  }
  else {
    char v92 = v44;
  }
  uint64_t v14 = v847;
  float v16 = v857;
  if (*(int *)(v847 + 88) >= 1)
  {
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    do
    {
      unsigned int v95 = (unsigned char *)(*(void *)(v847 + 112) + v93);
      v95[68] = *(unsigned char *)(v41 + 5);
      v95[69] = v857[1792];
      v95[66] = *(_DWORD *)(v847 + 14228);
      v95[67] = *(_DWORD *)(v847 + 14232);
      *(unsigned char *)(*(void *)(v847 + 112) + v93 + 60) = *(_DWORD *)v41;
      ++v94;
      v93 += 30432;
    }
    while (v94 < *(int *)(v847 + 88));
  }
  if (*(int *)(v847 + 92) >= 1)
  {
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    do
    {
      unsigned int v98 = (unsigned char *)(*(void *)(v847 + 120) + v96);
      v98[68] = *(unsigned char *)(v41 + 5);
      v98[69] = v857[1792];
      v98[66] = *(_DWORD *)(v847 + 14228);
      v98[67] = *(_DWORD *)(v847 + 14232);
      *(unsigned char *)(*(void *)(v847 + 120) + v96 + 60) = *(_DWORD *)v41;
      ++v97;
      v96 += 30432;
    }
    while (v97 < *(int *)(v847 + 92));
  }
  if (*(int *)(v847 + 96) >= 1)
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    do
    {
      unsigned int v101 = (unsigned char *)(*(void *)(v847 + 128) + v99);
      v101[68] = *(unsigned char *)(v41 + 5);
      v101[69] = v857[1792];
      v101[66] = *(_DWORD *)(v847 + 14228);
      v101[67] = *(_DWORD *)(v847 + 14232);
      *(unsigned char *)(*(void *)(v847 + 128) + v99 + 60) = *(_DWORD *)v41;
      ++v100;
      v99 += 30432;
    }
    while (v100 < *(int *)(v847 + 96));
  }
  unsigned char *v857 = *(unsigned char *)(v41 + 5);
  int v102 = *(_DWORD *)(v847 + 14184);
  *(_DWORD *)(v847 + 48) = *(_DWORD *)(v847 + 36);
  if (v102 == 6 || v102 == 1) {
    *(_DWORD *)(v847 + 48) = *(_DWORD *)(v847 + 40);
  }
  *(_DWORD *)(v847 + 72) = *(_DWORD *)(v847 + 64);
  *(_DWORD *)(v847 + 60) = *(_DWORD *)(v847 + 52);
  *(_DWORD *)(v847 + 84) = *(_DWORD *)(v847 + 76);
  *(unsigned char *)(v847 + 17) = *(unsigned char *)(v847 + 10);
  if (v102 == 6 || v102 == 1)
  {
    *(_DWORD *)(v847 + 72) = *(_DWORD *)(v847 + 68);
    *(_DWORD *)(v847 + 60) = *(_DWORD *)(v847 + 56);
    *(_DWORD *)(v847 + 84) = *(_DWORD *)(v847 + 80);
    *(unsigned char *)(v847 + 17) = *(unsigned char *)(v847 + 14);
  }
  uint64_t v103 = 0;
  char v104 = *(unsigned char *)(v847 + 27) | v43;
  *(unsigned char *)(v847 + 26) = v104;
  if (v104) {
    char v92 = 0;
  }
  *(unsigned char *)(v847 + 28) = v92;
  uint64_t v105 = *(void *)(v41 + 272);
  char v106 = 1;
  uint64_t v107 = v847 + 47920;
  int v6 = v40;
  int v7 = v39;
  uint64_t v18 = v831;
  uint64_t v23 = v870;
  while (1)
  {
    uint64_t v108 = *(unsigned int *)(v107 + 4 * v103 + 240);
    if ((v108 & 0x80000000) != 0) {
      break;
    }
    uint64_t v109 = *(void *)(v107 + 8 * v103 + 224);
    uint64_t v110 = *(void *)(v870 + 32) + 33 * v103;
    *(unsigned char *)(v110 + 32) = 0;
    if (v108)
    {
      for (uint64_t i = 0; i != v108; ++i)
      {
        uint64_t v112 = *(void *)(v109 + 8 * i);
        if (v112)
        {
          uint64_t v113 = *(unsigned int *)(v105 + 48);
          if (v113)
          {
            uint64_t v114 = 0;
            while (*(void *)(*(void *)(v105 + 40) + 8 * v114) != v112)
            {
              if (v113 == ++v114) {
                goto LABEL_149;
              }
            }
            if (v114 <= 0xFE) {
              LOBYTE(v112) = v114 + 1;
            }
            else {
              LOBYTE(v112) = 0;
            }
          }
          else
          {
LABEL_149:
            LOBYTE(v112) = 0;
          }
        }
        *(unsigned char *)(v110 + i) = v112;
      }
    }
    if ((v106 & 1) == 0) {
      break;
    }
    uint64_t v115 = 0;
    uint64_t v116 = *(void *)(v870 + 40);
    do
    {
      *(unsigned char *)(v116 + v115) = 32;
      if (v108)
      {
        uint64_t v117 = 0;
        while (v115 != *(unsigned __int8 *)(v110 + v117))
        {
          if (v108 == ++v117) {
            goto LABEL_162;
          }
        }
        *(unsigned char *)(v116 + v115) = v117;
      }
LABEL_162:
      ++v115;
    }
    while (v115 != 41);
    unint64_t v118 = 0;
    unsigned int v119 = *(void **)(v870 + 48);
    *unsigned int v119 = 0;
    unsigned int v120 = v119 + 1;
    do
    {
      if (v118 >= *(unsigned int *)(v105 + 48)) {
        uint64_t v121 = 0;
      }
      else {
        uint64_t v121 = *(void *)(*(void *)(v105 + 40) + 8 * v118);
      }
      v120[v118++] = v121;
    }
    while (v118 != 40);
    unsigned int v123 = *(unsigned char **)(v870 + 56);
    unsigned int v122 = *(unsigned char **)(v870 + 64);
    *unsigned int v123 = 32;
    *unsigned int v122 = 32;
    for (uint64_t j = 1; j != 41; ++j)
      v123[j] = *(unsigned char *)(v116 + j);
    int v125 = v15[67];
    if (v15[67]) {
      goto LABEL_183;
    }
    if (v108)
    {
      for (uint64_t k = 0; k != v108; ++k)
      {
        uint64_t v127 = *(void *)(v109 + 8 * k);
        if (v127)
        {
          uint64_t v128 = *(void *)(v127 + 1344);
          if (v128)
          {
            uint64_t v129 = *(unsigned int *)(v105 + 48);
            if (v129)
            {
              uint64_t v130 = 0;
              while (*(void *)(*(void *)(v105 + 40) + 8 * v130) != v128)
              {
                if (v129 == ++v130) {
                  goto LABEL_179;
                }
              }
            }
            else
            {
LABEL_179:
              LOBYTE(v130) = -2;
            }
            v123[(v130 + 1)] = k;
          }
        }
      }
      int v125 = v15[67];
LABEL_183:
      if (v125) {
        BOOL v131 = v108 == 0;
      }
      else {
        BOOL v131 = 1;
      }
      if (!v131)
      {
        uint64_t v132 = 0;
        do
        {
          uint64_t v133 = *(void *)(v109 + 8 * v132);
          if (v133)
          {
            uint64_t v134 = *(void *)(v133 + 1344);
            if (v134)
            {
              uint64_t v135 = *(unsigned int *)(v105 + 48);
              if (v135)
              {
                uint64_t v136 = 0;
                while (*(void *)(*(void *)(v105 + 40) + 8 * v136) != v134)
                {
                  if (v135 == ++v136) {
                    goto LABEL_194;
                  }
                }
              }
              else
              {
LABEL_194:
                LOBYTE(v136) = -2;
              }
              v122[(v136 + 1)] = v132;
            }
          }
          ++v132;
        }
        while (v132 != v108);
      }
    }
    int v137 = v15[225];
    if (v137 == 1)
    {
      char v106 = 0;
      uint64_t v103 = 1;
      if (v108)
      {
        uint64_t v143 = 0;
        int v144 = v15[68];
        do
        {
          uint64_t v145 = *(void *)(v109 + 8 * v143);
          if (v145 && *(unsigned __int8 *)(v145 + 101) != v144)
          {
            uint64_t v146 = *(unsigned int *)(v105 + 48);
            if (v146)
            {
              uint64_t v147 = 0;
              uint64_t v148 = *(void *)(v145 + 1344);
              while (*(void *)(*(void *)(v105 + 40) + 8 * v147) != v148)
              {
                if (v146 == ++v147) {
                  goto LABEL_218;
                }
              }
            }
            else
            {
LABEL_218:
              LOBYTE(v147) = -2;
            }
            *(unsigned char *)(v116 + *(unsigned __int8 *)(v110 + v143)) = *(unsigned char *)(v116 + (v147 + 1));
          }
          ++v143;
        }
        while (v143 != v108);
LABEL_221:
        char v106 = 0;
        uint64_t v103 = 1;
      }
    }
    else
    {
      char v106 = 0;
      uint64_t v103 = 1;
      if (v137 == 2)
      {
        char v106 = 0;
        uint64_t v103 = 1;
        if (v108)
        {
          for (uint64_t m = 0; m != v108; ++m)
          {
            uint64_t v139 = *(void *)(v109 + 8 * m);
            if (v139)
            {
              uint64_t v140 = *(unsigned int *)(v105 + 48);
              if (v140)
              {
                uint64_t v141 = 0;
                uint64_t v142 = *(void *)(v139 + 1344);
                while (*(void *)(*(void *)(v105 + 40) + 8 * v141) != v142)
                {
                  if (v140 == ++v141) {
                    goto LABEL_206;
                  }
                }
              }
              else
              {
LABEL_206:
                LOBYTE(v141) = -2;
              }
              *(unsigned char *)(v116 + (v141 + 1)) = m;
            }
          }
          goto LABEL_221;
        }
      }
    }
  }
  if (v15[226])
  {
    int v149 = *(_DWORD **)(v847 + 14144);
    unsigned int v150 = *(_DWORD *)(v847 + 14160);
    unsigned int v151 = v857[1732];
    if (v857[1732])
    {
      do
      {
        unsigned int v152 = v150 | (0x80000000 >> v151);
        *int v149 = bswap32(v152);
        char v153 = v151 + 1;
        int v149 = (_DWORD *)((char *)v149 + ((v151 + 1) >> 3));
        unsigned int v150 = v152 << ((v151 + 1) & 0xF8);
        if (v151 >= 0x1F) {
          unsigned int v150 = 0;
        }
        unsigned int v151 = v153 & 7;
      }
      while ((v153 & 7) != 0);
    }
    uint64_t v154 = 0;
    *(void *)(v847 + 14144) = v149;
    *(_DWORD *)(v847 + 14160) = v150;
    int64x2_t v155 = (int64x2_t)xmmword_1BBB6FEB0;
    int64x2_t v156 = (int64x2_t)xmmword_1BBB6FEC0;
    int64x2_t v157 = (int64x2_t)xmmword_1BBB6FED0;
    int64x2_t v158 = (int64x2_t)xmmword_1BBB6FEE0;
    int64x2_t v159 = (int64x2_t)xmmword_1BBB6FEF0;
    int64x2_t v160 = (int64x2_t)xmmword_1BBB6FF00;
    int64x2_t v161 = (int64x2_t)xmmword_1BBB6FF10;
    unsigned int v162 = byte_1E9F82B25;
    int64x2_t v163 = (int64x2_t)xmmword_1BBB6F620;
    v164.i64[0] = 0x101010101010101;
    v164.i64[1] = 0x101010101010101;
    int64x2_t v165 = vdupq_n_s64(0x10uLL);
    v857[1732] = 0;
    do
    {
      int8x16_t v166 = vuzp1q_s8(*(int8x16_t *)((char *)&unk_1BBB85470 + v154), *(int8x16_t *)((char *)&unk_1BBB85470 + v154 + 16));
      v877.val[0] = vaddq_s8(v166, v166);
      v877.val[2] = vorrq_s8(v877.val[0], v164);
      int8x16_t v167 = vuzp1q_s8(*(int8x16_t *)((char *)&unk_1BBB854F0 + v154), *(int8x16_t *)((char *)&unk_1BBB854F0 + v154 + 16));
      int8x16_t v168 = vaddq_s8(v167, v167);
      int8x16_t v169 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v163), (int32x4_t)vceqzq_s64(v161)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v160), (int32x4_t)vceqzq_s64(v159)));
      int8x16_t v170 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v158), (int32x4_t)vceqzq_s64(v157)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v156), (int32x4_t)vceqzq_s64(v155)));
      v877.val[1] = vsubq_s8(v168, vuzp1q_s8(v169, v170));
      v877.val[3] = vsubq_s8(v168, vuzp1q_s8(vmvnq_s8(v169), vmvnq_s8(v170)));
      vst4q_s8(v162, v877);
      v162 += 64;
      int64x2_t v160 = vaddq_s64(v160, v165);
      int64x2_t v161 = vaddq_s64(v161, v165);
      int64x2_t v163 = vaddq_s64(v163, v165);
      int64x2_t v159 = vaddq_s64(v159, v165);
      int64x2_t v158 = vaddq_s64(v158, v165);
      int64x2_t v157 = vaddq_s64(v157, v165);
      int64x2_t v156 = vaddq_s64(v156, v165);
      int64x2_t v155 = vaddq_s64(v155, v165);
      v154 += 32;
    }
    while (v154 != 128);
    *(void *)(v831 + 32) = v825;
    *(void *)(v831 + 16) = 0x1FE00000000;
    *(_DWORD *)(v831 + 24) = -1;
    uint64_t v171 = *(void *)(v847 + 14144);
    *(void *)uint64_t v831 = v171;
    *(void *)(v831 + 8) = v171;
    *(_DWORD *)(v831 + 40) = 0;
    int v172 = *(_DWORD *)(v847 + 14184);
    if ((0xA5u >> (v172 - 2))) {
      unsigned int v173 = 0;
    }
    else {
      unsigned int v173 = *v29;
    }
    if ((v172 - 2) >= 8) {
      uint64_t v174 = *v29;
    }
    else {
      uint64_t v174 = v173;
    }
    BOOL v175 = 1;
    if (v172 != 2 && v172 != 7) {
      BOOL v175 = v172 == 4 || v172 == 9;
    }
    uint64_t v177 = 0;
    unsigned int v178 = *v15;
    word_1E9F820DC = 17664;
    dword_1E9F820D8 = 922815232;
    unk_1E9F820DE = xmmword_1BBB6FF20;
    unk_1E9F820EE = 0x7FE272EB7FE55FEELL;
    unk_1E9F820F6 = xmmword_1BBB844D4;
    unk_1E9F82106 = unk_1BBB844E4;
    unk_1E9F82116 = 0x7DEA4CF952FB38FCLL;
    unk_1E9F8215E = xmmword_1BBB8453C;
    unk_1E9F8216E = unk_1BBB8454C;
    unk_1E9F8217E = xmmword_1BBB8455C;
    unk_1E9F8211E = xmmword_1BBB844FC;
    unk_1E9F8212E = unk_1BBB8450C;
    unk_1E9F8213E = xmmword_1BBB8451C;
    unk_1E9F8214E = unk_1BBB8452C;
    xmmword_1E9F821E8 = unk_1BBB845C6;
    unk_1E9F821F8 = xmmword_1BBB845D6;
    unk_1E9F82202 = *(long long *)((char *)&xmmword_1BBB845D6 + 10);
    xmmword_1E9F82188 = *(long long *)((char *)&xmmword_1BBB8455C + 10);
    unk_1E9F82198 = xmmword_1BBB84576;
    xmmword_1E9F821A8 = unk_1BBB84586;
    unk_1E9F821B8 = xmmword_1BBB84596;
    word_1E9F82272 = 25074;
    xmmword_1E9F82212 = xmmword_1BBB845F0;
    unk_1E9F82222 = unk_1BBB84600;
    xmmword_1E9F82252 = xmmword_1BBB84630;
    unk_1E9F82262 = unk_1BBB84640;
    xmmword_1E9F82232 = xmmword_1BBB84610;
    unk_1E9F82242 = unk_1BBB84620;
    xmmword_1E9F82296 = xmmword_1BBB84672;
    unk_1E9F822A6 = unk_1BBB84682;
    xmmword_1E9F82276 = xmmword_1BBB84652;
    unk_1E9F82286 = unk_1BBB84662;
    unk_1E9F822E0 = *(long long *)((char *)&xmmword_1BBB846B2 + 10);
    xmmword_1E9F822C6 = unk_1BBB846A2;
    unk_1E9F822D6 = xmmword_1BBB846B2;
    xmmword_1E9F822B6 = xmmword_1BBB84692;
    xmmword_1E9F82310 = xmmword_1BBB846EC;
    unk_1E9F82320 = unk_1BBB846FC;
    xmmword_1E9F822F0 = xmmword_1BBB846CC;
    unk_1E9F82300 = unk_1BBB846DC;
    unk_1E9F8235A = *(long long *)((char *)&xmmword_1BBB8472C + 10);
    xmmword_1E9F82340 = unk_1BBB8471C;
    unk_1E9F82350 = xmmword_1BBB8472C;
    xmmword_1E9F82330 = xmmword_1BBB8470C;
    int v179 = &dword_1E9F8236A;
    xmmword_1E9F821C8 = unk_1BBB845A6;
    unk_1E9F821D8 = xmmword_1BBB845B6;
    do
    {
      int *v179 = *(_DWORD *)((char *)&unk_1BBB84746 + v177);
      *((_WORD *)v179 + 2) = *(_WORD *)((char *)&unk_1BBB84746 + v177 + 4);
      v177 += 8;
      int v179 = (int *)((char *)v179 + 658);
    }
    while (v177 != 24);
    uint64_t v180 = 0;
    unsigned int v181 = &qword_1E9F82370;
    do
    {
      *unsigned int v181 = qword_1BBB8475E[v180];
      v180 += 3;
      unsigned int v181 = (uint64_t *)((char *)v181 + 658);
    }
    while (v180 != 9);
    unint64_t v182 = &qword_1E9F82378;
    uint64_t v183 = 1u;
    do
    {
      *unint64_t v182 = qword_1BBB8475E[v183];
      v183 += 3;
      unint64_t v182 = (uint64_t *)((char *)v182 + 658);
    }
    while (v183 != 10);
    int v184 = &qword_1E9F82380;
    uint64_t v185 = 2u;
    do
    {
      *int v184 = qword_1BBB8475E[v185];
      v185 += 3;
      int v184 = (uint64_t *)((char *)v184 + 658);
    }
    while (v185 != 11);
    uint64_t v186 = 0;
    unsigned int v187 = &xmmword_1E9F82388;
    do
    {
      long long v188 = *(_OWORD *)((char *)&unk_1BBB847A6 + v186 + 16);
      *unsigned int v187 = *(_OWORD *)((char *)&unk_1BBB847A6 + v186);
      v187[1] = v188;
      *((void *)v187 + 4) = *(void *)((char *)&unk_1BBB847A6 + v186 + 32);
      v186 += 40;
      unsigned int v187 = (long long *)((char *)v187 + 658);
    }
    while (v186 != 120);
    uint64_t v189 = 0;
    int v190 = &xmmword_1E9F823B0;
    do
    {
      long long v191 = *(_OWORD *)((char *)&unk_1BBB8481E + v189 + 80);
      v190[4] = *(_OWORD *)((char *)&unk_1BBB8481E + v189 + 64);
      v190[5] = v191;
      v190[6] = *(_OWORD *)((char *)&unk_1BBB8481E + v189 + 96);
      *(long long *)((char *)v190 + 106) = *(_OWORD *)((char *)&unk_1BBB8481E + v189 + 106);
      long long v192 = *(_OWORD *)((char *)&unk_1BBB8481E + v189 + 16);
      *int v190 = *(_OWORD *)((char *)&unk_1BBB8481E + v189);
      v190[1] = v192;
      long long v193 = *(_OWORD *)((char *)&unk_1BBB8481E + v189 + 32);
      long long v194 = *(_OWORD *)((char *)&unk_1BBB8481E + v189 + 48);
      v189 += 122;
      v190[2] = v193;
      v190[3] = v194;
      int v190 = (long long *)((char *)v190 + 658);
    }
    while (v189 != 366);
    uint64_t v195 = 0;
    unsigned int v196 = &xmmword_1E9F8242A;
    do
    {
      long long v197 = *(_OWORD *)((char *)&unk_1BBB8498C + v195 + 80);
      v196[4] = *(_OWORD *)((char *)&unk_1BBB8498C + v195 + 64);
      v196[5] = v197;
      v196[6] = *(_OWORD *)((char *)&unk_1BBB8498C + v195 + 96);
      *(long long *)((char *)v196 + 106) = *(_OWORD *)((char *)&unk_1BBB8498C + v195 + 106);
      long long v198 = *(_OWORD *)((char *)&unk_1BBB8498C + v195 + 16);
      *unsigned int v196 = *(_OWORD *)((char *)&unk_1BBB8498C + v195);
      v196[1] = v198;
      long long v199 = *(_OWORD *)((char *)&unk_1BBB8498C + v195 + 32);
      long long v200 = *(_OWORD *)((char *)&unk_1BBB8498C + v195 + 48);
      v195 += 122;
      v196[2] = v199;
      v196[3] = v200;
      unsigned int v196 = (long long *)((char *)v196 + 658);
    }
    while (v195 != 366);
    uint64_t v201 = 0;
    uint64_t v202 = &xmmword_1E9F824A4;
    do
    {
      long long v203 = *(_OWORD *)((char *)&unk_1BBB84AFA + v201 + 80);
      v202[4] = *(_OWORD *)((char *)&unk_1BBB84AFA + v201 + 64);
      v202[5] = v203;
      *((_WORD *)v202 + 48) = *(_WORD *)((char *)&unk_1BBB84AFA + v201 + 96);
      long long v204 = *(_OWORD *)((char *)&unk_1BBB84AFA + v201 + 16);
      *uint64_t v202 = *(_OWORD *)((char *)&unk_1BBB84AFA + v201);
      v202[1] = v204;
      long long v206 = *(_OWORD *)((char *)&unk_1BBB84AFA + v201 + 32);
      long long v205 = *(_OWORD *)((char *)&unk_1BBB84AFA + v201 + 48);
      v201 += 98;
      v202[2] = v206;
      v202[3] = v205;
      uint64_t v202 = (long long *)((char *)v202 + 658);
    }
    while (v201 != 294);
    uint64_t v207 = 0;
    unsigned int v208 = &xmmword_1E9F82508;
    do
    {
      long long v209 = *(_OWORD *)((char *)&unk_1BBB84C20 + v207 + 80);
      v208[4] = *(_OWORD *)((char *)&unk_1BBB84C20 + v207 + 64);
      v208[5] = v209;
      v208[6] = *(_OWORD *)((char *)&unk_1BBB84C20 + v207 + 96);
      *(long long *)((char *)v208 + 106) = *(_OWORD *)((char *)&unk_1BBB84C20 + v207 + 106);
      long long v210 = *(_OWORD *)((char *)&unk_1BBB84C20 + v207 + 16);
      *unsigned int v208 = *(_OWORD *)((char *)&unk_1BBB84C20 + v207);
      v208[1] = v210;
      long long v211 = *(_OWORD *)((char *)&unk_1BBB84C20 + v207 + 32);
      long long v212 = *(_OWORD *)((char *)&unk_1BBB84C20 + v207 + 48);
      v207 += 122;
      v208[2] = v211;
      v208[3] = v212;
      unsigned int v208 = (long long *)((char *)v208 + 658);
    }
    while (v207 != 366);
    uint64_t v213 = 0;
    unsigned int v214 = &xmmword_1E9F82582;
    do
    {
      long long v215 = *(_OWORD *)((char *)&unk_1BBB84D8E + v213 + 80);
      v214[4] = *(_OWORD *)((char *)&unk_1BBB84D8E + v213 + 64);
      v214[5] = v215;
      v214[6] = *(_OWORD *)((char *)&unk_1BBB84D8E + v213 + 96);
      *(long long *)((char *)v214 + 106) = *(_OWORD *)((char *)&unk_1BBB84D8E + v213 + 106);
      long long v216 = *(_OWORD *)((char *)&unk_1BBB84D8E + v213 + 16);
      *unsigned int v214 = *(_OWORD *)((char *)&unk_1BBB84D8E + v213);
      v214[1] = v216;
      long long v217 = *(_OWORD *)((char *)&unk_1BBB84D8E + v213 + 32);
      long long v218 = *(_OWORD *)((char *)&unk_1BBB84D8E + v213 + 48);
      v213 += 122;
      v214[2] = v217;
      v214[3] = v218;
      unsigned int v214 = (long long *)((char *)v214 + 658);
    }
    while (v213 != 366);
    if (v175)
    {
      for (uint64_t n = 0; n != 22; n += 2)
      {
        uint64_t v220 = v831 + n;
        int v221 = (__int16)(byte_1BBB84EFC[n + 1] + (unsigned __int16)((byte_1BBB84EFC[n] * v178) >> 4));
        if (v221 <= 1) {
          int v221 = 1;
        }
        if (v221 >= 0x7E) {
          int v221 = 126;
        }
        char v222 = 63 - v221;
        char v223 = v221 - 64;
        BOOL v224 = v221 > 0x3F;
        if (v224) {
          char v222 = v223;
        }
        *(unsigned char *)(v220 + 48) = v222;
        *(unsigned char *)(v220 + 49) = v224;
      }
      for (iuint64_t i = 0; ii != 20; ii += 2)
      {
        uint64_t v226 = v831 + ii;
        int v227 = (__int16)(byte_1BBB84F12[ii + 1] + (unsigned __int16)((byte_1BBB84F12[ii] * v178) >> 4));
        if (v227 <= 1) {
          int v227 = 1;
        }
        if (v227 >= 0x7E) {
          int v227 = 126;
        }
        char v228 = 63 - v227;
        char v229 = v227 - 64;
        BOOL v230 = v227 > 0x3F;
        if (v230) {
          char v228 = v229;
        }
        *(unsigned char *)(v226 + 168) = v228;
        *(unsigned char *)(v226 + 169) = v230;
      }
      for (juint64_t j = 0; jj != 658; jj += 2)
      {
        uint64_t v232 = v831 + jj;
        int v233 = (__int16)(*((char *)&dword_1E9F820D8 + jj + 1)
                       + (unsigned __int16)((*((char *)&dword_1E9F820D8 + jj) * v178) >> 4));
        if (v233 <= 1) {
          int v233 = 1;
        }
        if (v233 >= 0x7E) {
          int v233 = 126;
        }
        char v234 = 63 - v233;
        char v235 = v233 - 64;
        BOOL v236 = v233 > 0x3F;
        if (v236) {
          char v234 = v235;
        }
        *(unsigned char *)(v232 + 188) = v234;
        *(unsigned char *)(v232 + 189) = v236;
      }
      for (kuint64_t k = 0; kk != 6; kk += 2)
      {
        uint64_t v238 = v831 + kk;
        int v239 = (__int16)(byte_1BBB84F26[kk + 1] + (unsigned __int16)((byte_1BBB84F26[kk] * v178) >> 4));
        if (v239 <= 1) {
          int v239 = 1;
        }
        if (v239 >= 0x7E) {
          int v239 = 126;
        }
        char v240 = 63 - v239;
        char v241 = v239 - 64;
        BOOL v242 = v239 > 0x3F;
        if (v242) {
          char v240 = v241;
        }
        *(unsigned char *)(v238 + 846) = v240;
        *(unsigned char *)(v238 + 847) = v242;
      }
      for (muint64_t m = 0; mm != 116; mm += 2)
      {
        uint64_t v244 = v831 + mm;
        int v245 = (__int16)(byte_1BBB84F2C[mm + 1] + (unsigned __int16)((byte_1BBB84F2C[mm] * v178) >> 4));
        if (v245 <= 1) {
          int v245 = 1;
        }
        if (v245 >= 0x7E) {
          int v245 = 126;
        }
        char v246 = 63 - v245;
        char v247 = v245 - 64;
        BOOL v248 = v245 > 0x3F;
        if (v248) {
          char v246 = v247;
        }
        *(unsigned char *)(v244 + 852) = v246;
        *(unsigned char *)(v244 + 853) = v248;
      }
    }
    else
    {
      for (nuint64_t n = 0; nn != 22; nn += 2)
      {
        uint64_t v250 = v831 + nn;
        int v251 = (__int16)(byte_1BBB84EFC[nn + 1] + (unsigned __int16)((byte_1BBB84EFC[nn] * v178) >> 4));
        if (v251 <= 1) {
          int v251 = 1;
        }
        if (v251 >= 0x7E) {
          int v251 = 126;
        }
        char v252 = 63 - v251;
        char v253 = v251 - 64;
        BOOL v254 = v251 > 0x3F;
        if (v254) {
          char v252 = v253;
        }
        *(unsigned char *)(v250 + 48) = v252;
        *(unsigned char *)(v250 + 49) = v254;
      }
      for (uint64_t i1 = 0; i1 != 26; i1 += 2)
      {
        signed int v256 = (unsigned char *)(v831 + 70 + i1);
        int v257 = (__int16)(byte_1BBB84FA0[26 * v174 + 1 + i1]
                       + (unsigned __int16)((byte_1BBB84FA0[26 * v174 + i1] * v178) >> 4));
        if (v257 <= 1) {
          int v257 = 1;
        }
        if (v257 >= 0x7E) {
          int v257 = 126;
        }
        char v258 = 63 - v257;
        char v259 = v257 - 64;
        BOOL v260 = v257 > 0x3F;
        if (v260) {
          char v258 = v259;
        }
        *signed int v256 = v258;
        v256[1] = v260;
      }
      uint64_t v261 = 0;
      int32x4_t v262 = vdupq_n_s32(v178);
      int v263 = (char *)&unk_1BBB84FEE + 32 * v174;
      int8x16x2_t v876 = vld2q_s8(v263);
      int16x8_t v264 = vmovl_s8(*(int8x8_t *)v876.val[0].i8);
      int16x8_t v265 = vmovl_high_s8(v876.val[0]);
      int32x4_t v266 = vmovl_s16(*(int16x4_t *)v265.i8);
      int32x4_t v267 = vmulq_s32(v262, vmovl_high_s16(v265));
      int32x4_t v268 = vmulq_s32(v262, v266);
      v876.val[0].i64[0] = 0x1000100010001;
      v876.val[0].i64[1] = 0x1000100010001;
      uint16x8_t v269 = (uint16x8_t)vmaxq_s16(vaddw_s8(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v262, vmovl_s16(*(int16x4_t *)v264.i8)), 4uLL), vmulq_s32(v262, vmovl_high_s16(v264)), 4uLL), *(int8x8_t *)v876.val[1].i8), (int16x8_t)v876.val[0]);
      v876.val[0] = (int8x16_t)vmaxq_s16(vaddw_high_s8(vshrn_high_n_s32(vshrn_n_s32(v268, 4uLL), v267, 4uLL), v876.val[1]), (int16x8_t)v876.val[0]);
      v876.val[1].i64[0] = 0x7E007E007E007ELL;
      v876.val[1].i64[1] = 0x7E007E007E007ELL;
      v876.val[0] = (int8x16_t)vminq_u16((uint16x8_t)v876.val[0], (uint16x8_t)v876.val[1]);
      int8x16_t v270 = (int8x16_t)vminq_u16(v269, (uint16x8_t)v876.val[1]);
      v876.val[1].i64[0] = 0x3F003F003F003FLL;
      v876.val[1].i64[1] = 0x3F003F003F003FLL;
      int8x16_t v271 = vuzp1q_s8(v270, v876.val[0]);
      v272.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
      v272.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
      v267.i64[0] = 0xC0C0C0C0C0C0C0C0;
      v267.i64[1] = 0xC0C0C0C0C0C0C0C0;
      int8x16_t v273 = vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)v270, (uint16x8_t)v876.val[1]), (int8x16_t)vcgtq_u16((uint16x8_t)v876.val[0], (uint16x8_t)v876.val[1]));
      v876.val[0] = vbslq_s8(v273, vaddq_s8(v271, (int8x16_t)v267), vsubq_s8(v272, v271));
      v271.i64[0] = 0x101010101010101;
      v271.i64[1] = 0x101010101010101;
      v876.val[1] = vandq_s8(v273, v271);
      unint64_t v274 = (char *)(v831 + 96);
      vst2q_s8(v274, v876);
      do
      {
        char v275 = (unsigned char *)(v831 + 128 + v261);
        int v276 = (__int16)(byte_1BBB8504E[28 * v174 + 1 + v261]
                       + (unsigned __int16)((byte_1BBB8504E[28 * v174 + v261] * v178) >> 4));
        if (v276 <= 1) {
          int v276 = 1;
        }
        if (v276 >= 0x7E) {
          int v276 = 126;
        }
        char v277 = 63 - v276;
        char v278 = v276 - 64;
        BOOL v279 = v276 > 0x3F;
        if (v279) {
          char v277 = v278;
        }
        *char v275 = v277;
        v275[1] = v279;
        v261 += 2;
      }
      while (v261 != 28);
      for (uint64_t i2 = 0; i2 != 12; i2 += 2)
      {
        unsigned int v281 = (unsigned char *)(v831 + 156 + i2);
        int v282 = (__int16)(byte_1BBB850A2[12 * v174 + 1 + i2]
                       + (unsigned __int16)((byte_1BBB850A2[12 * v174 + i2] * v178) >> 4));
        if (v282 <= 1) {
          int v282 = 1;
        }
        if (v282 >= 0x7E) {
          int v282 = 126;
        }
        char v283 = 63 - v282;
        char v284 = v282 - 64;
        BOOL v285 = v282 > 0x3F;
        if (v285) {
          char v283 = v284;
        }
        *unsigned int v281 = v283;
        v281[1] = v285;
      }
      for (uint64_t i3 = 0; i3 != 20; i3 += 2)
      {
        uint64_t v287 = v831 + i3;
        int v288 = (__int16)(byte_1BBB84F12[i3 + 1] + (unsigned __int16)((byte_1BBB84F12[i3] * v178) >> 4));
        if (v288 <= 1) {
          int v288 = 1;
        }
        if (v288 >= 0x7E) {
          int v288 = 126;
        }
        char v289 = 63 - v288;
        char v290 = v288 - 64;
        BOOL v291 = v288 > 0x3F;
        if (v291) {
          char v289 = v290;
        }
        *(unsigned char *)(v287 + 168) = v289;
        *(unsigned char *)(v287 + 169) = v291;
      }
      for (uint64_t i4 = 0; i4 != 658; i4 += 2)
      {
        uint64_t v293 = v831 + i4;
        int v294 = (__int16)(*((char *)&dword_1E9F8236A + 658 * v174 + i4 + 1)
                       + (unsigned __int16)((*((char *)&dword_1E9F8236A + 658 * v174 + i4) * v178) >> 4));
        if (v294 <= 1) {
          int v294 = 1;
        }
        if (v294 >= 0x7E) {
          int v294 = 126;
        }
        char v295 = 63 - v294;
        char v296 = v294 - 64;
        BOOL v297 = v294 > 0x3F;
        if (v297) {
          char v295 = v296;
        }
        *(unsigned char *)(v293 + 188) = v295;
        *(unsigned char *)(v293 + 189) = v297;
      }
      for (uint64_t i5 = 0; i5 != 6; i5 += 2)
      {
        unsigned int v299 = (unsigned char *)(v831 + 846 + i5);
        int v300 = (__int16)(byte_1BBB850C6[6 * v174 + 1 + i5]
                       + (unsigned __int16)((byte_1BBB850C6[6 * v174 + i5] * v178) >> 4));
        if (v300 <= 1) {
          int v300 = 1;
        }
        if (v300 >= 0x7E) {
          int v300 = 126;
        }
        char v301 = 63 - v300;
        char v302 = v300 - 64;
        BOOL v303 = v300 > 0x3F;
        if (v303) {
          char v301 = v302;
        }
        *unsigned int v299 = v301;
        v299[1] = v303;
      }
      uint64_t v304 = 0;
      char v305 = (char *)&unk_1BBB850D8 + 116 * v174 + 1;
      do
      {
        unsigned int v306 = (unsigned char *)(v831 + 852 + v304);
        int v307 = (__int16)(v305[v304] + (unsigned __int16)((v305[v304 - 1] * v178) >> 4));
        if (v307 <= 1) {
          int v307 = 1;
        }
        if (v307 >= 0x7E) {
          int v307 = 126;
        }
        char v308 = 63 - v307;
        char v309 = v307 - 64;
        BOOL v310 = v307 > 0x3F;
        if (v310) {
          char v308 = v309;
        }
        *unsigned int v306 = v308;
        v306[1] = v310;
        v304 += 2;
      }
      while (v304 != 116);
    }
    for (uint64_t i6 = 0; i6 != 920; i6 += 2)
      *(unsigned char *)(v831 + i6 + 48) = *(unsigned char *)(v831 + i6 + 49) | (2 * *(unsigned char *)(v831 + i6 + 48));
  }
  *(_DWORD *)(v870 + 2480) = 0;
  uint64_t v24 = v868 + 205536;
  uint64_t v312 = v868 + 4 * v849;
  *(_DWORD *)(v312 + 207768) = 0;
  *(_DWORD *)(v312 + 207800) = 0;
LABEL_372:
  int v313 = *(_DWORD *)(v14 + 14176);
  int v314 = *(_DWORD *)(v24 + 2296);
  *(_DWORD *)(v23 + 2428) = v314;
  char v843 = v314;
  if (v314)
  {
    int v315 = *(_DWORD *)(v24 + 2300);
    int v316 = v313 / v315;
    int v317 = v313 / v315 * v315;
    int v318 = *(_DWORD *)(v24 + 2304) / 16;
    unsigned int v841 = v318 - 1 + v317;
    int v319 = *(_DWORD *)(v24 + 2308);
    uint64_t v24 = v868 + 205536;
    unsigned int v842 = v317;
    unsigned int v839 = v317 + (v319 / 16 - 1) * v318;
    unsigned int v840 = v839 + v318 - 1;
    *(_DWORD *)(v23 + 2436) = v316;
    *(_DWORD *)(v23 + 2440) = *(_DWORD *)(v868 + 207844) * v316 + 4;
    *(_DWORD *)(v23 + 2444) = *(_DWORD *)(v868 + 207844) * (v316 + 1) - 6;
    *(_DWORD *)(v23 + 2448) = *(_DWORD *)(v868 + 207844) * v316;
    *(_DWORD *)(v23 + 2452) = *(_DWORD *)(v868 + 207844) * (v316 + 1) - 1;
  }
  else
  {
    unsigned int v839 = -1;
    unsigned int v840 = -1;
    unsigned int v841 = -1;
    unsigned int v842 = -1;
  }
  uint64_t v814 = v2;
  v815 = (uint64_t *)(v830 + 205856);
  *(_DWORD *)(*(void *)(v24 + 320) + 24) = 1;
  if (*(unsigned char *)(v24 + 2550) == 1 && *(unsigned char *)(v868 + 1057))
  {
    uint64_t v320 = *(void *)(v24 + 304);
    unsigned int v321 = (unsigned __int16 *)(v320 + 19112);
    uint64_t v322 = 1;
    if (*(unsigned char *)(v868 + 1057) == 2) {
      uint64_t v322 = 7;
    }
    uint64_t v24 = v868 + 205536;
    int v323 = v321[v322];
    if (*(unsigned char *)(v868 + 1057) == 2) {
      unsigned int v321 = (unsigned __int16 *)(v320 + 19124);
    }
    unsigned int v324 = v323 + 16;
    unsigned int v325 = *v321 + 16;
    if (v325 >= *(_DWORD *)(v320 + 228)) {
      unsigned int v325 = *(_DWORD *)(v320 + 228);
    }
    unsigned int v326 = *(_DWORD *)(v320 + 196);
    if (v324 < v326) {
      unsigned int v326 = v324;
    }
    *(_DWORD *)(*(void *)(v868 + 205856) + 24) = 0;
  }
  else
  {
    uint64_t v327 = *(void *)(v24 + 304);
    unsigned int v325 = *(_DWORD *)(v327 + 228);
    unsigned int v326 = *(_DWORD *)(v327 + 196);
  }
  int v328 = 0;
  int v816 = v4 + v828;
  int v813 = v7 + v6;
  signed int v837 = v817 + ~v848 + v313;
  signed int v838 = v313 + v848;
  *(_DWORD *)(*(void *)(v24 + 320) + 12) = v325 >> 4;
  v853 = v15 + 166;
  *(_DWORD *)(*(void *)(v24 + 320) + 8) = v326 >> 4;
  uint64_t v329 = v868 + 4 * v849;
  v835 = (_DWORD *)(v329 + 207800);
  v836 = (_DWORD *)(v329 + 207768);
  int v330 = v818;
  if (v818 <= 1) {
    int v330 = 1;
  }
  int v834 = v330;
  signed int v331 = v829;
  uint64_t v851 = v14 + 47920;
  while (2)
  {
    *(void *)v871 = 0;
    int v864 = v328;
    if (v15[226])
    {
      if (v328 || v829 > v827) {
        sub_1BBAFA0A4(v18, 0);
      }
    }
    else
    {
      uint64_t v832 = *(void *)(v14 + 14144);
      int v833 = v16[1732];
    }
    unsigned int v332 = v331 / v848;
    int v333 = v331 / v848 * v848;
    int v334 = *(_DWORD *)(v15 + 58);
    signed int v335 = v331 - v334;
    if (v331 % v848 + 1 == v334) {
      int v336 = 0;
    }
    else {
      int v336 = v331 % v848 + 1;
    }
    unsigned int v337 = v331 % v848;
    *(_DWORD *)(v15 + 54) = v331;
    *(_DWORD *)(v15 + 38) = v331 % v848;
    *(_DWORD *)(v15 + 42) = v332;
    signed int v338 = *(_DWORD *)(v14 + 14176);
    uint64_t v339 = *(void *)(v23 + 2472);
    uint64_t v340 = v339 + 288 * v334;
    uint64_t v341 = *(void *)(v15 + 214);
    _OWORD *v853 = 0u;
    *(_OWORD *)(v15 + 182) = 0u;
    *(void *)(v15 + 198) = 0;
    BOOL v342 = v331 == v333 || v331 <= v338;
    uint64_t v343 = v339 + 288 * (int)v337;
    if (!v342)
    {
      *(void *)v853 = v343 - 288;
      if (v335 > v338) {
        *(void *)(v15 + 190) = v340;
      }
    }
    if (v335 >= v338) {
      *(void *)(v15 + 174) = v339 + 288 * v337;
    }
    signed int v344 = v335 + 1;
    if (v336) {
      BOOL v345 = v344 < v338;
    }
    else {
      BOOL v345 = 1;
    }
    if (!v345) {
      *(void *)(v15 + 182) = v339 + 288 * v336;
    }
    if (v331 > v338)
    {
      uint64_t v346 = v340 - 288;
      if (v331 == v333) {
        uint64_t v347 = v346;
      }
      else {
        uint64_t v347 = v343 - 288;
      }
      *(void *)(v15 + 198) = v347;
    }
    *(void *)(v341 + 240) = 0;
    *(void *)(v341 + 248) = 0;
    *(void *)(v341 + 256) = 0;
    *(void *)&long long v348 = 0x2222222222222222;
    *((void *)&v348 + 1) = 0x2222222222222222;
    *(_OWORD *)(v341 + 208) = v348;
    *(_OWORD *)(v341 + 224) = v348;
    if (v15[226])
    {
      if (!v15[227])
      {
        *(unsigned char *)(v341 + 176) = 0;
        *(_DWORD *)(v341 + 177) = -1;
        *(unsigned char *)(v341 + 181) = -1;
        *(void *)(v341 + 168) = 0;
        *(unsigned char *)(v341 + 199) = 0;
        *(void *)&long long v349 = 0x2020202020202020;
        *((void *)&v349 + 1) = 0x2020202020202020;
        *(_OWORD *)(v341 + 128) = v349;
        *(_OWORD *)(v341 + 144) = v349;
        *(_OWORD *)uint64_t v341 = 0u;
        *(_OWORD *)(v341 + 16) = 0u;
        *(_OWORD *)(v341 + 32) = 0u;
        *(_OWORD *)(v341 + 48) = 0u;
        *(_OWORD *)(v341 + 64) = 0u;
        *(_OWORD *)(v341 + 80) = 0u;
        *(_OWORD *)(v341 + 96) = 0u;
        *(_OWORD *)(v341 + 112) = 0u;
      }
      *(void *)(v341 + 160) = *(void *)(v341 + 272);
    }
    *(_DWORD *)(v23 + 2432) = 0;
    unsigned int v350 = *(_DWORD *)(v15 + 54);
    BOOL v352 = v350 >= v842 && v350 <= v841;
    int v354 = v350 >= v839 && v350 <= v840 || v352;
    if ((v843 & 1) != 0 && v354) {
      *(_DWORD *)(v23 + 2432) = 1;
    }
    BOOL v356 = v331 > v838 && v331 < v837;
    *(_DWORD *)(v15 + 62) = v356;
    int v357 = sub_1BBB23F54(v868, v331);
    *(unsigned char *)(v23 + 2456) = v357;
    float v358 = sub_1BBB23E3C(v868, v331, v357, (float)*v15);
    sub_1BBAFCBC8(v868, v14, v14, v851, v358);
    uint64_t v359 = *(unsigned __int8 **)(v15 + 78);
    LOBYTE(v360) = v359[55];
    float v361 = (float)v360;
    unsigned int v362 = v359[1];
    if (v362 > 1)
    {
      uint64_t v363 = v868 + 205536;
      uint64_t v364 = *(void *)(v868 + 205856);
      if (v337 < *(_DWORD *)(v364 + 12) && v332 < *(_DWORD *)(v364 + 8))
      {
        uint64_t v365 = *(void *)(v23 + 2304);
        int v366 = *(_DWORD *)(v15 + 42);
        uint64_t v367 = *(void *)(v15 + 254);
        uint64_t v368 = (16 * *(_DWORD *)(v15 + 38));
        uint64_t v369 = *(void *)(v870 + 2312);
        uint64_t v370 = *(unsigned int *)(v367 + 248);
        uint64_t v371 = *(void *)(v367 + 136) + v368 + (8 * v366 * v370);
        off_1E9F83250(*(void *)(v367 + 128) + v368 + (16 * v366 * *(_DWORD *)(v367 + 232)), *(unsigned int *)(v367 + 232), v365, 16);
        uint64_t v372 = v370;
        uint64_t v18 = v831;
        uint64_t v373 = v369;
        uint64_t v23 = v870;
        off_1E9F83250(v371, v372, v373, 8);
        uint64_t v363 = v868 + 205536;
        uint64_t v359 = *(unsigned __int8 **)(v15 + 78);
        LOBYTE(v362) = v359[1];
      }
      if ((v362 & 0xFE) == 4)
      {
        ++*(_DWORD *)(v23 + 2480);
        goto LABEL_454;
      }
      if (!(v359[52] + 16 * v359[53])) {
LABEL_454:
      }
        float v361 = (float)*v15;
    }
    else
    {
      sub_1BBB5F0A4(v851);
      uint64_t v359 = *(unsigned __int8 **)(v15 + 78);
      if (v359[1])
      {
        uint64_t v363 = v868 + 205536;
        goto LABEL_455;
      }
      if (v359[2])
      {
        uint64_t v363 = v868 + 205536;
        goto LABEL_455;
      }
      uint64_t v363 = v868 + 205536;
      if (!(v359[52] + 16 * v359[53])) {
        goto LABEL_454;
      }
    }
LABEL_455:
    if (*(unsigned char *)(*(void *)(v868 + 136) + 577) == 1)
    {
      unsigned int v374 = v359[1];
      if (v374 >= 2 && (uint64_t v375 = *(void *)(v15 + 86), v376 = *(unsigned __int8 *)(v375 + 272), *(unsigned char *)(v375 + 272)))
      {
        unsigned int v377 = (unsigned __int8 *)(v375 + 25);
        while (1)
        {
          uint64_t v378 = *(v377 - 1);
          if (v378 != 32)
          {
            if (*(unsigned char *)(*(void *)(*(void *)v23 + 8 * v378) + 1356)) {
              break;
            }
          }
          if (v374 == 5 || v374 == 3)
          {
            uint64_t v379 = *v377;
            if (v379 != 32)
            {
              if (*(unsigned char *)(*(void *)(*(void *)(v23 + 8) + 8 * v379) + 1356)) {
                break;
              }
            }
          }
          v377 += 16;
          if (!--v376) {
            goto LABEL_466;
          }
        }
        char v380 = 1;
      }
      else
      {
LABEL_466:
        char v380 = 0;
      }
      *(unsigned char *)(*(void *)(*(void *)(v363 + 304) + 4920) + 216 * v331 + 67) = v380;
    }
    int v381 = v15[226];
    if (v15[226])
    {
      long long v872 = *(_OWORD *)(v15 + 166);
      uint64_t v873 = *(void *)(v15 + 214);
      int v382 = *(_DWORD *)(v18 + 40) + *(_DWORD *)(v18 + 24) + 8 * (*(_DWORD *)v18 - *(_DWORD *)(v18 + 8));
      int v383 = v382 & ~(v382 >> 31);
    }
    else
    {
      int v383 = 0;
    }
    unsigned int v384 = *(_DWORD *)(v14 + 14184);
    BOOL v342 = v384 > 9;
    int v385 = (1 << v384) & 0x294;
    if (v342 || v385 == 0)
    {
      int v435 = *(unsigned char *)(*(void *)(v15 + 78) + 1) & 0xFE;
      if (v381)
      {
        sub_1BBB4F6E8(v18, (uint64_t *)&v872, v15[66], v435 == 4);
      }
      else if (v435 != 4)
      {
        sub_1BBB034B0(v825, *(_DWORD *)(v23 + 2480));
        *(_DWORD *)(v23 + 2480) = 0;
      }
    }
    if (v845[1314] && !v857[1764]) {
      goto LABEL_581;
    }
    if ((*(unsigned char *)(*(void *)(v15 + 78) + 1) & 0xFE) != 4)
    {
      int v387 = sub_1BBB03524(v851, v825, v826, &v871[4], v871);
      BOOL v388 = *(unsigned char **)(v15 + 214);
      BOOL v389 = v388[252] != 0;
      BOOL v390 = v388[241] != 0;
      BOOL v391 = v388[246] != 0;
      char v392 = v390 | (2 * (v388[240] != 0));
      BOOL v393 = v388[247] != 0;
      BOOL v394 = v388[249] != 0;
      char v395 = v394 | (2 * (v388[248] != 0));
      char v396 = 4 * (v388[243] != 0);
      BOOL v397 = v388[250] != 0;
      BOOL v398 = v388[251] != 0;
      BOOL v399 = v388[253] != 0;
      BOOL v400 = v388[254] != 0;
      char v401 = v397 | (4 * ((v388[242] != 0) | (2 * (v388[240] != 0)))) | (2 * (v388[248] != 0));
      char v402 = v396 | (8 * v390) | (2 * v394);
      char v403 = v400 | (4 * (v391 | (2 * (v388[244] != 0)))) | (2 * v389);
      char v404 = (4 * v393) | (8 * (v388[245] != 0)) | (2 * v399);
      char v405 = (v388[245] != 0) | (4 * v392) | (2 * (v388[244] != 0));
      char v406 = v396 | (8 * (v388[242] != 0)) | (2 * v391);
      LOBYTE(v388) = v388[255] != 0;
      char v407 = (4 * v398) | (8 * v397) | (2 * v400);
      uint64_t v18 = v831;
      uint64_t v14 = v847;
      char v408 = v402 | (16 * v401) | v398;
      uint64_t v23 = v870;
      int v409 = (unsigned char *)(*(void *)(*(void *)(v870 + 80) + 32)
                     + 4 * (v337 + *(_DWORD *)(*(void *)(v870 + 80) + 12) * v332));
      *int v409 = v408;
      v409[1] = v404 | (16 * v403) | v388;
      v409[2] = v406 | (16 * v405) | v393;
      v409[3] = v407 | (16 * (v399 | (4 * v395) | (2 * v389))) | v388;
      if (v387) {
        goto LABEL_581;
      }
    }
    uint64_t v410 = *(void *)(v23 + 2472);
    int v855 = *(_DWORD *)(v15 + 42);
    uint64_t v859 = *(unsigned int *)(v15 + 54);
    int v861 = *(_DWORD *)(v15 + 38);
    uint64_t v411 = *(void *)(v15 + 254);
    int v412 = (void *)(v410 + 288 * v861);
    __int16 v413 = *(void **)(v15 + 214);
    char v414 = v413;
    v865 = v412;
    if (*(void *)(v15 + 174))
    {
      memcpy((void *)(v410 + 288 * *(int *)(v15 + 58)), v412, 0x120uLL);
      int v412 = (void *)(v410 + 288 * v861);
      char v414 = *(const void **)(v15 + 214);
    }
    uint64_t v863 = v410;
    memcpy(v412, v414, 0x120uLL);
    uint64_t v417 = *(void *)(v15 + 86);
    uint64_t v418 = *(unsigned __int8 *)(v417 + 272);
    if (*(unsigned char *)(v417 + 272))
    {
      int v846 = v383;
      int v419 = (_WORD *)v413[34];
      uint64_t v23 = v870;
      uint64_t v420 = **(void **)(v870 + 80);
      char v421 = v15[69];
      int v422 = *(_DWORD *)(v411 + 1168);
      int v423 = *(uint64_t **)(*(void *)(v411 + 1152) + 8 * v844);
      int v424 = *((_DWORD *)v423 + 517);
      if (v424 >= 16)
      {
        unsigned int v432 = (_WORD *)v423[1];
        uint64_t v433 = v859;
        int v434 = v861;
      }
      else
      {
        int v822 = *(_DWORD *)(v411 + 1168);
        char v823 = v15[69];
        uint64_t v824 = **(void **)(v870 + 80);
        *((_DWORD *)v423 + 517) = (((16 * *((_DWORD *)v423 + 518) + 255) >> 8) + 255) & 0x1FFFF00;
        uint64_t v425 = *v423;
        int v426 = *(_DWORD *)(*v423 + 40);
        if (!v426) {
          goto LABEL_502;
        }
        char v427 = *(pthread_mutex_t **)(v425 + 8);
        if (v427)
        {
          pthread_mutex_lock(v427);
          int v426 = *(_DWORD *)(v425 + 40);
          if (!v426)
          {
            unsigned int v438 = *(pthread_mutex_t **)(v425 + 8);
            if (v438) {
              pthread_mutex_unlock(v438);
            }
LABEL_502:
            operator new[]();
          }
        }
        uint64_t v428 = *(void *)(v425 + 32);
        int v429 = v426 - 1;
        *(_DWORD *)(v425 + 40) = v429;
        uint64_t v430 = *(void *)(v428 + 8 * v429);
        unsigned int v431 = *(pthread_mutex_t **)(v425 + 8);
        if (v431) {
          pthread_mutex_unlock(v431);
        }
        if (!v430) {
          goto LABEL_502;
        }
        if (*(void *)v425) {
          pthread_mutex_lock(*(pthread_mutex_t **)v425);
        }
        int v439 = *(_DWORD *)(v425 + 24);
        if (v439 == *(_DWORD *)(v425 + 28))
        {
          *(_DWORD *)(v425 + 28) = 2 * v439 + 2;
          operator new[]();
        }
        uint64_t v440 = *(void *)(v425 + 16);
        *(_DWORD *)(v425 + 24) = v439 + 1;
        *(void *)(v440 + 8 * v439) = v430;
        if (*(void *)v425) {
          pthread_mutex_unlock(*(pthread_mutex_t **)v425);
        }
        v423[*((int *)v423 + 516) + 2] = v430;
        uint64_t v441 = *((int *)v423 + 516);
        unsigned int v432 = (_WORD *)v423[v441 + 2];
        *((_DWORD *)v423 + 516) = v441 + 1;
        int v424 = *((_DWORD *)v423 + 517);
        uint64_t v18 = v831;
        uint64_t v23 = v870;
        uint64_t v433 = v859;
        int v434 = v861;
        uint64_t v420 = v824;
        int v422 = v822;
        char v421 = v823;
      }
      int v442 = 4 * v422;
      v423[1] = (uint64_t)&v432[8 * v418];
      *((_DWORD *)v423 + 517) = v424 - v418;
      *(void *)(*(void *)(v411 + 1256) + 8 * v433) = v432;
      *unsigned int v432 = *v419;
      v432[1] = v419[1];
      v432[2] = v419[2];
      v432[3] = v419[3];
      v432[4] = v419[4];
      unsigned int v443 = (unsigned __int16)v419[5];
      v432[5] = v443;
      v432[6] = v419[6];
      v432[7] = v419[7];
      *((unsigned char *)v432 + 14) = v421;
      if (v418 == 1)
      {
        unsigned int v444 = (void *)(v420 + 8 * (4 * v434) + 8 * (4 * v855 * v442));
        *unsigned int v444 = v432;
        v444[1] = v432;
        v444[2] = v432;
        v444[3] = v432;
        unsigned int v445 = &v444[4 * *(_DWORD *)(v411 + 1168)];
        *unsigned int v445 = v432;
        v445[1] = v432;
        v445[2] = v432;
        v445[3] = v432;
        signed int v446 = &v445[4 * *(_DWORD *)(v411 + 1168)];
        void *v446 = v432;
        v446[1] = v432;
        v446[2] = v432;
        v446[3] = v432;
        uint64_t v447 = &v446[4 * *(_DWORD *)(v411 + 1168)];
        *uint64_t v447 = v432;
        v447[1] = v432;
        v447[2] = v432;
        int v448 = (char *)v432;
        uint64_t v14 = v847;
      }
      else
      {
        uint64_t v449 = v418 - 1;
        int v450 = v419 + 15;
        int v451 = v432 + 15;
        uint64_t v14 = v847;
        do
        {
          *(v451 - 7) = *(v450 - 7);
          *(v451 - 6) = *(v450 - 6);
          *(v451 - 5) = *(v450 - 5);
          *(v451 - 4) = *(v450 - 4);
          *(v451 - 3) = *(v450 - 3);
          *(v451 - 2) = *(v450 - 2);
          *(v451 - 1) = *(v450 - 1);
          __int16 v452 = *v450;
          v450 += 8;
          *int v451 = v452;
          v451 += 8;
          --v449;
        }
        while (v449);
        uint64_t v453 = (char *)&unk_1BBB8DF30 + 80 * v443;
        BOOL v454 = (void *)(v420 + 8 * (4 * v434) + 8 * (4 * v855 * v442));
        *BOOL v454 = (char *)v432 + (v453[16] & 0xF0);
        v454[1] = (char *)v432 + (v453[17] & 0xF0);
        v454[2] = (char *)v432 + (v453[18] & 0xF0);
        v454[3] = (char *)v432 + (v453[19] & 0xF0);
        unsigned int v455 = &v454[4 * *(_DWORD *)(v411 + 1168)];
        *unsigned int v455 = (char *)v432 + (v453[20] & 0xF0);
        v455[1] = (char *)v432 + (v453[21] & 0xF0);
        v455[2] = (char *)v432 + (v453[22] & 0xF0);
        v455[3] = (char *)v432 + (v453[23] & 0xF0);
        int v456 = &v455[4 * *(_DWORD *)(v411 + 1168)];
        *int v456 = (char *)v432 + (v453[24] & 0xF0);
        v456[1] = (char *)v432 + (v453[25] & 0xF0);
        v456[2] = (char *)v432 + (v453[26] & 0xF0);
        v456[3] = (char *)v432 + (v453[27] & 0xF0);
        uint64_t v447 = &v456[4 * *(_DWORD *)(v411 + 1168)];
        *uint64_t v447 = (char *)v432 + (v453[28] & 0xF0);
        v447[1] = (char *)v432 + (v453[29] & 0xF0);
        v447[2] = (char *)v432 + (v453[30] & 0xF0);
        int v448 = (char *)v432 + (v453[31] & 0xF0);
      }
      int v436 = v864;
      int v383 = v846;
      uint64_t v437 = v863;
      v447[3] = v448;
      float v16 = v857;
    }
    else
    {
      if (*(_DWORD *)(v411 + 1164) <= (int)v859)
      {
        unsigned int v432 = 0;
      }
      else
      {
        unsigned int v432 = *(_WORD **)(v411 + 8 * v15[69] + 1232);
        *(void *)(*(void *)(v411 + 1256) + 8 * v859) = v432;
      }
      float v16 = v857;
      uint64_t v23 = v870;
      int v436 = v864;
      int v434 = v861;
      uint64_t v437 = v863;
    }
    *(void *)(v437 + 288 * v434 + 272) = v432;
    if (v15[226] && (v865[20] = v432, v15[226]))
    {
      int v457 = *(_DWORD *)(v18 + 40) + *(_DWORD *)(v18 + 24) + 8 * (*(_DWORD *)v18 - *(_DWORD *)(v18 + 8));
      int v458 = (v457 & ~(v457 >> 31)) - v383;
      char v459 = *(unsigned char **)(v15 + 78);
    }
    else
    {
      char v459 = *(unsigned char **)(v15 + 78);
      if ((v459[1] & 0xFE) == 4)
      {
        int v458 = 0;
      }
      else
      {
        int v458 = v16[1732] - v833 + 8 * (*(void *)(v14 + 14144) - v832);
        uint64_t v832 = *(void *)(v14 + 14144);
        int v833 = v16[1732];
      }
    }
    uint64_t v460 = *(void *)(v23 + 80);
    int v461 = (int)v361 + (char)v459[56];
    if (v461 >= 51) {
      int v462 = 51;
    }
    else {
      int v462 = (int)v361 + (char)v459[56];
    }
    char v463 = byte_1BBB8A5B4[v462 - (v461 & (v461 >> 31))];
    char v464 = v459[3];
    unsigned int v465 = *(_DWORD *)(v15 + 38) + *(_DWORD *)(v460 + 12) * *(_DWORD *)(v15 + 42);
    *(_WORD *)(*(void *)(v460 + 72) + 2 * v465) = v849;
    *(unsigned char *)(*(void *)(v460 + 112) + v465) = v361;
    *(unsigned char *)(*(void *)(v460 + 120) + v465) = v463;
    *(unsigned char *)(*(void *)(v460 + 128) + v465) = v463;
    *(unsigned char *)(*(void *)(v460 + 136) + v465) = v464;
    *(unsigned char *)(*(void *)(v460 + 144) + v465) = 0;
    *int v15 = (int)v361;
    *v836 += *(_DWORD *)&v871[4];
    *v835 += *(_DWORD *)v871;
    if (*(_DWORD *)(v868 + 207872))
    {
      int v466 = *(_DWORD *)(v868 + 207880) + v458;
      *(_DWORD *)(v868 + 207880) = v466;
      if (*(_DWORD *)(v868 + 207876))
      {
        if ((v466 + v821[1] * *v821 / 2) > *(_DWORD *)(v868 + 207868)) {
          *(unsigned char *)(v14 + 28) = 1;
        }
      }
    }
    ++v331;
    int v328 = v436 + 1;
    if (v328 != v834) {
      continue;
    }
    break;
  }
  int v467 = v828;
  uint64_t v468 = v819;
  if (v818 + v829 == v817 + v827)
  {
    if (v15[226])
    {
      sub_1BBAFA0A4(v18, 1);
      unsigned int v469 = *(_DWORD *)(v18 + 16) >> 8;
      uint64_t v470 = *(void *)v18;
      if ((v469 >> (*(unsigned char *)(v18 + 24) + 2)))
      {
        v469 &= ~(-1 << (*(unsigned char *)(v18 + 24) + 2));
        size_t v471 = (unsigned char *)(v470 - 1);
        do
        {
          if ((unint64_t)v471 < *(void *)(v18 + 8)) {
            break;
          }
          __int16 v472 = (*v471--)++ + 1;
        }
        while ((v472 & 0x100) != 0);
        uint64_t v470 = *(void *)v18;
      }
      *(void *)(*(void *)(v18 + 32) + 16) = v470;
      *(_DWORD *)(*(void *)(v18 + 32) + 32) = 0;
      *(unsigned char *)(*(void *)(v18 + 32) + 36) = 0;
      uint64_t v473 = *(void *)(v18 + 32);
      int v474 = *(_DWORD **)(v473 + 16);
      int v475 = *(_DWORD *)(v473 + 32);
      LODWORD(v473) = *(unsigned __int8 *)(v473 + 36);
      unsigned int v476 = (v469 << (30 - *(unsigned char *)(v18 + 24) - v473)) | v475;
      *int v474 = bswap32(v476);
      unsigned int v477 = v473 + *(_DWORD *)(v18 + 24) + 2;
      unsigned int v478 = (char *)v474 + (v477 >> 3);
      unsigned int v479 = v476 << (v477 & 0xF8);
      if (v477 >= 0x20) {
        unsigned int v479 = 0;
      }
      *(void *)(*(void *)(v18 + 32) + 16) = v478;
      *(_DWORD *)(*(void *)(v18 + 32) + 32) = v479;
      *(unsigned char *)(*(void *)(v18 + 32) + 36) = v477 & 7;
    }
    else
    {
      int v480 = *(_DWORD *)(v23 + 2480);
      if (v480 >= 1)
      {
        sub_1BBB034B0(v825, v480);
        *(_DWORD *)(v23 + 2480) = 0;
      }
    }
    int v481 = *(_DWORD **)(v14 + 14144);
    uint64_t v482 = v16[1732];
    *int v481 = bswap32((0x80000000 >> v482) | *(_DWORD *)(v14 + 14160));
    int v483 = (char *)v481 + ((unint64_t)(v482 + 1) >> 3);
    uint64_t v484 = (v482 + 1) & 7;
    if (v484) {
      *v483++ &= byte_1BBB8A4AC[v484];
    }
    uint64_t v468 = v819;
    int v467 = v828;
    *(void *)(v14 + 14144) = v483;
    *(_DWORD *)(v14 + 14160) = 0;
    v16[1732] = 0;
  }
  uint64_t v485 = v830 + 205856;
  if (*(_DWORD *)(v830 + 205924) != 1) {
    goto LABEL_579;
  }
  int v486 = *v820;
  int v487 = v816 / *v820;
  if (!*(unsigned char *)(v8 + 1394) && *(unsigned char *)(v830 + 207683)) {
    goto LABEL_577;
  }
  int v488 = v467 / v486;
  if (v467 / v486 && (__int16 v489 = v487 - v488, v487 > v488))
  {
    if (v488 >= 1)
    {
      unsigned int v490 = (unsigned __int16)((v488 - 1) * v486);
      goto LABEL_554;
    }
  }
  else if ((v488 || v487 <= 1) && (v488 || v487 != 1 || v820[1] != 1))
  {
    goto LABEL_577;
  }
  unsigned int v490 = 0;
  __int16 v489 = v487 + ~(_WORD)v488;
LABEL_554:
  unsigned __int16 v491 = v489 * v486;
  int v492 = v820[1];
  unsigned __int16 v493 = v487 - 2;
  if (v487 <= 1) {
    unsigned __int16 v493 = 0;
  }
  unsigned __int16 v494 = v486 + v491;
  if (v487 == v492) {
    unsigned __int16 v495 = v494;
  }
  else {
    unsigned __int16 v495 = v491;
  }
  if (v487 == v492) {
    unsigned __int16 v496 = v816 / *v820;
  }
  else {
    unsigned __int16 v496 = v493;
  }
  uint64_t v497 = *v815;
  if (*(unsigned char *)(*(void *)(*v815 + 48) + 9) != 1)
  {
    unsigned int v498 = *(pthread_mutex_t **)(v497 + 160);
    if (v498) {
      pthread_mutex_lock(v498);
    }
    if (v495) {
      memset((void *)(*(void *)(v497 + 168) + v490), 10, v495);
    }
    int v499 = *(pthread_mutex_t **)(v497 + 160);
    if (v499) {
      pthread_mutex_unlock(v499);
    }
    sub_1BBB1E170(*v815, v8 + 96, v8 + 1152, v490, v495, v415, v416);
  }
  if (sub_1BBB12008(*(unsigned __int8 **)(v8 + 488)))
  {
LABEL_581:
    uint64_t v502 = *(pthread_mutex_t **)(v830 + 5448);
    if (v502) {
      pthread_mutex_lock(v502);
    }
    *(unsigned char *)(*(void *)(v830 + 5440) + (int)v844) = 0;
    uint64_t v503 = *(pthread_mutex_t **)(v830 + 5448);
    if (v503)
    {
      pthread_mutex_unlock(v503);
    }
    return;
  }
  uint64_t v500 = *(void *)(v8 + 488);
  *(_DWORD *)(v500 + 152) = 0;
  sub_1BBB55804(*(void *)(v500 + 16), (int)v490 / *v820, (int)(v490 + v495) / *v820);
  if (v488 <= 1) {
    unsigned int v501 = 0;
  }
  else {
    unsigned int v501 = (unsigned __int16)(v488 - 2);
  }
  uint64_t v485 = v830 + 205856;
  if (v496 > v501)
  {
    *(_DWORD *)(v500 + 168) = *(_DWORD *)(v830 + 208092);
    *(_DWORD *)(v500 + 172) = *(_DWORD *)(v830 + 208096);
    sub_1BBB554F4(v500, v501, v496);
  }
LABEL_577:
  uint64_t v468 = v819;
  if (v487 == v820[1])
  {
    bzero(*(void **)(*(void *)v485 + 32), 4 * *(unsigned int *)(*(void *)v485 + 20));
    uint64_t v468 = v819;
  }
LABEL_579:
  if (v816 == v813)
  {
    *(_DWORD *)(v468 + 68) = *(_DWORD *)(v814 + 14144) - *(_DWORD *)(v814 + 14128);
    goto LABEL_581;
  }
}

uint64_t sub_1BBB28758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v6;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(v6 + 208120);
  int v13 = *(opaqueCMSampleBuffer **)(v12 + 152);
  if (v13)
  {
    DataBuffer = CMSampleBufferGetDataBuffer(v13);
    unsigned int DataLength = CMBlockBufferGetDataLength(DataBuffer);
  }
  else
  {
    unsigned int DataLength = 0;
  }
  dataPointerOut = 0;
  float v16 = *(unsigned int **)v8;
  if (!*(void *)v8)
  {
    char v43 = *(opaqueCMSampleBuffer **)(v12 + 152);
    if (!v43)
    {
      uint64_t DataPointer = 4294958324;
      goto LABEL_38;
    }
    char v44 = CMSampleBufferGetDataBuffer(v43);
    uint64_t DataPointer = CMBlockBufferGetDataPointer(v44, 0, 0, 0, &dataPointerOut);
    if (DataPointer)
    {
LABEL_38:
      CFLog();
      goto LABEL_68;
    }
    float v16 = (unsigned int *)dataPointerOut;
  }
  *(unsigned char *)(*(void *)(v11 + 152) + 212) = 0;
  float v17 = *(unsigned int **)v8;
  if (*(void *)v8)
  {
    unsigned int v18 = *(_DWORD *)(v8 + 12);
    if (v18)
    {
      if (DataLength <= v18)
      {
        int v45 = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(v12 + 152));
        size_t v46 = CMBlockBufferGetDataLength(v45);
        if (!v45 || v46 != DataLength)
        {
          CFLog();
          uint64_t DataPointer = 4294954394;
          goto LABEL_38;
        }
        uint64_t v47 = CMBlockBufferCopyDataBytes(v45, 0, v46, v17);
        if (v47)
        {
          uint64_t DataPointer = v47;
          CFLog();
          goto LABEL_38;
        }
      }
      else
      {
        *(unsigned char *)(*(void *)(v11 + 152) + 212) = 1;
      }
    }
  }
  v115[0] = 0;
  v116[0] = 0;
  v109[0] = 0;
  __n[0] = 0;
  v114[0] = 0;
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v12 + 152), 0);
  if (SampleAttachmentsArray)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      CFDictionaryRef v21 = ValueAtIndex;
      sub_1BBA71AC0(ValueAtIndex, (const void *)*MEMORY[0x1E4F45400], v115, __src);
      sub_1BBA71AC0(v21, (const void *)*MEMORY[0x1E4F45408], v116, __src);
      sub_1BBA71CBC(v21, (const void *)*MEMORY[0x1E4F45428], v109, __dst);
      sub_1BBA71CBC(v21, (const void *)*MEMORY[0x1E4F45430], __n, __dst);
      sub_1BBA71CBC(v21, (const void *)*MEMORY[0x1E4F453F0], v114, __dst);
      uint64_t v22 = v115[0];
      *(void *)(v12 + 3432) = v115[0];
      size_t v23 = v116[0];
      *(void *)(v12 + 3424) = v116[0];
      *(void *)(v12 + 3400) = v23 + v22;
      *(_DWORD *)(v12 + 3440) = v109[0];
      *(_DWORD *)(v12 + 3444) = __n[0];
      *(_DWORD *)(v12 + 3448) = v114[0];
    }
  }
  if (!*(unsigned char *)(v11 + 5425)) {
    *(_DWORD *)(v10 + 1268) = *(void *)(v12 + 3424);
  }
  CFArrayRef v24 = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v12 + 152), 0);
  if (v24)
  {
    CFDictionaryRef v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, 0);
    if (v25)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E4F45448]);
      if (Value)
      {
        CFDictionaryRef v27 = Value;
        uint64_t v105 = v10;
        *(unsigned char *)(v12 + 3545) = sub_1BBB09110(Value, (const void *)*MEMORY[0x1E4F44DF8]) == 1;
        unsigned int v28 = sub_1BBB09110(v27, (const void *)*MEMORY[0x1E4F44E10]);
        CFArrayRef v29 = (const __CFArray *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E4F44E18]);
        CFIndex v30 = 0;
        unint64_t v31 = (const void *)*MEMORY[0x1E4F44E40];
        uint64_t v32 = v28 + 1;
        int v33 = -1;
        do
        {
          CFDictionaryRef v34 = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, v30);
          signed int v35 = sub_1BBB09110(v34, v31);
          if (v35 > v33) {
            int v33 = v35;
          }
          ++v30;
        }
        while (v32 != v30);
        *(_DWORD *)(v105 + 60) = v33;
        uint64_t v10 = v105;
      }
    }
  }
  if (DataLength < 4 || !v16)
  {
    CFLog();
    uint64_t DataPointer = 4294958324;
    goto LABEL_68;
  }
  uint64_t v36 = 0;
  int v37 = 0;
  unsigned int v38 = 0;
  do
  {
    if (v38 < DataLength - 4)
    {
      if (*(unsigned char *)(*(void *)(v11 + 152) + 212))
      {
        unsigned int v39 = DataLength - 4;
        unsigned int v38 = DataLength;
      }
      else
      {
        unsigned int v39 = bswap32(*v16);
        uint64_t v40 = v39 + 4;
        v38 += v40;
        float v16 = (unsigned int *)((char *)v16 + v40);
      }
      *(_DWORD *)&v113[v36 + 1] = v39;
      ++v37;
    }
    v36 += 4;
  }
  while (v36 != 16);
  uint64_t v41 = sub_1BBB23D90(v8, v37);
  if (v41)
  {
    uint64_t DataPointer = v41;
    goto LABEL_38;
  }
  if (!*(_DWORD *)(v10 + 1276))
  {
    char v110 = 0;
    FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(*(CMSampleBufferRef *)(v12 + 152));
    if (!FormatDescription)
    {
      uint64_t DataPointer = 4294954385;
      goto LABEL_57;
    }
    Extensiouint64_t n = CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (!Extension
      || (BOOL v50 = Extension, TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(v50))
      || (unsigned int v52 = CFDictionaryGetValue((CFDictionaryRef)v50, @"avcC")) == 0
      || (signed int v53 = v52, v54 = CFArrayGetTypeID(), v54 == CFGetTypeID(v53))
      && (signed int v53 = CFArrayGetValueAtIndex((CFArrayRef)v53, 0)) == 0
      || (CFTypeID v55 = CFDataGetTypeID(), v55 != CFGetTypeID(v53)))
    {
      uint64_t DataPointer = FigSignalErrorAt();
      goto LABEL_57;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)v53);
    CFIndex Length = CFDataGetLength((CFDataRef)v53);
    if (Length >= 0x80000000)
    {
      CFLog();
      __int16 v58 = -50;
      goto LABEL_75;
    }
    v113[0] = 0;
    if ((int)Length > 3000) {
      goto LABEL_73;
    }
    uint64_t v66 = BytePtr[5] & 0x1F;
    if (v66 > 0x10) {
      goto LABEL_73;
    }
    UInt8 v97 = BytePtr[4];
    int v98 = BytePtr[1];
    int v104 = Length;
    if ((BytePtr[5] & 0x1F) != 0)
    {
      char v67 = 0;
      uint64_t v101 = 0;
      uint64_t v102 = (int)Length;
      char v68 = (size_t *)__n;
      uint64_t v69 = 6;
      int32x2_t v70 = __dst;
      char v106 = BytePtr;
      while (1)
      {
        if (v69 > v102) {
          goto LABEL_102;
        }
        int v71 = bswap32(*(unsigned __int16 *)&BytePtr[v69]);
        if (HIWORD(v71) > 0x1F4u) {
          goto LABEL_73;
        }
        size_t v72 = (v71 >> 16);
        if ((int)(v72 + v70 - __dst) > 1498) {
          goto LABEL_73;
        }
        uint64_t v73 = v69 + 2;
        if ((int)v72 + (int)v69 + 2 > (int)Length)
        {
LABEL_117:
          __int16 v58 = -2;
          goto LABEL_74;
        }
        memcpy(v70, &v106[v73], v72);
        unsigned int v74 = sub_1BBB523B8((uint64_t)v70, v72);
        *(_DWORD *)char v68 = v74;
        int v75 = (unsigned int *)((char *)v70 + v74);
        *(unsigned char *)int v75 = 0;
        int v76 = *(unsigned char *)v70 & 0x1F;
        if (v76 == 7)
        {
          if (!BYTE4(v101))
          {
            uint64_t v99 = (unsigned int *)((char *)v70 + v74);
            int v77 = sub_1BBB23B6C(v70, v74, (uint64_t)v109, v113, &v112, &v111);
            LOBYTE(v101) = v113[0] != 0;
            v113[0] = v113[0] != 0;
            if (v77) {
              goto LABEL_124;
            }
            int v76 = *(unsigned char *)v70 & 0x1F;
            BYTE4(v101) = 1;
            LODWORD(Length) = v104;
            int v75 = v99;
            goto LABEL_86;
          }
          ++BYTE4(v101);
          int v76 = 7;
        }
        LODWORD(Length) = v104;
LABEL_86:
        uint64_t v69 = v73 + v72;
        if (v76 == 13) {
          ++v67;
        }
        char v68 = (size_t *)((char *)v68 + 4);
        int32x2_t v70 = v75;
        --v66;
        BytePtr = v106;
        if (!v66) {
          goto LABEL_93;
        }
      }
    }
    uint64_t v101 = 0;
    char v67 = 0;
    uint64_t v69 = 6;
LABEL_93:
    if (BytePtr[v69] <= 0x20u)
    {
      char v100 = v67;
      uint64_t v107 = BytePtr;
      uint64_t v78 = v69 + 1;
      uint64_t v103 = BytePtr[v69];
      if (BytePtr[v69])
      {
        uint64_t v79 = BytePtr[v69];
        int v80 = v116;
        unsigned int v81 = __src;
        while (v78 <= v104)
        {
          int v82 = bswap32(*(unsigned __int16 *)&v107[v78]);
          if (HIWORD(v82) > 0xBB8u) {
            goto LABEL_73;
          }
          size_t v83 = (v82 >> 16);
          if ((int)(v83 + v81 - __src) > 3000) {
            goto LABEL_73;
          }
          uint64_t v84 = v78 + 2;
          if ((int)v83 + (int)v84 > v104) {
            goto LABEL_117;
          }
          memcpy(v81, &v107[v84], v83);
          uint64_t v78 = v84 + v83;
          unsigned int v85 = sub_1BBB523B8((uint64_t)v81, v83);
          *(_DWORD *)int v80 = v85;
          int v80 = (size_t *)((char *)v80 + 4);
          unsigned int v81 = (size_t *)((char *)v81 + v85);
          if (!--v79) {
            goto LABEL_104;
          }
        }
LABEL_102:
        __int16 v58 = -1;
        goto LABEL_74;
      }
      uint64_t v103 = 0;
LABEL_104:
      LOBYTE(v86) = 0;
      if ((v98 - 100) <= 0x2C && ((1 << (v98 - 100)) & 0x100000400401) != 0)
      {
        if (v78 + 3 >= v104)
        {
          LOBYTE(v86) = 0;
        }
        else
        {
          unint64_t v86 = v107[v78 + 3];
          if (v86 > 0x10) {
            goto LABEL_73;
          }
          if (v107[v78 + 3])
          {
            uint64_t v87 = v78 + 4;
            if (v78 + 4 < v104)
            {
              unint64_t v88 = 0;
              uint64_t v89 = v115;
              while (1)
              {
                int v90 = bswap32(*(unsigned __int16 *)&v107[v87]);
                size_t v91 = (v90 >> 16);
                v114[v88] = v91;
                if (HIWORD(v90) > 0x1F4u || (int)(v91 + v89 - v115) > 500) {
                  goto LABEL_73;
                }
                uint64_t v92 = v87 + 2;
                if (v114[v103] + (int)v87 + 2 > v104) {
                  goto LABEL_117;
                }
                memcpy(v89, &v107[v92], v91);
                unsigned int v93 = sub_1BBB523B8((uint64_t)v89, v91);
                v114[v88++] = v93;
                if (v88 < v86)
                {
                  uint64_t v87 = v92 + v91;
                  uint64_t v89 = (void *)((char *)v89 + v93);
                  if ((uint64_t)(v92 + v91) < v104) {
                    continue;
                  }
                }
                break;
              }
            }
          }
        }
      }
      if ((BYTE4(v101) < 2u || !(v101 | (v86 + v100)))
        && (v86 + v100) + v101 <= 1)
      {
        char v110 = 0;
        if ((_BYTE)v101)
        {
          LOWORD(v77) = sub_1BBB23B6C(__dst, __n[0], (uint64_t)v109, &v110, &v112, &v111);
LABEL_124:
          __int16 v58 = v77;
          if ((_WORD)v77) {
            goto LABEL_74;
          }
        }
        else
        {
          __int16 v58 = 0;
        }
        if ((v97 & 3) != 0)
        {
          if ((v97 & 3) == 3)
          {
            int v94 = 5;
          }
          else
          {
            if ((v97 & 3) != 1)
            {
              CFLog();
              __int16 v58 = -8969;
              goto LABEL_75;
            }
            int v94 = 4;
          }
        }
        else
        {
          int v94 = 3;
        }
        *(_DWORD *)(v12 + 160) = v94;
        size_t v95 = __n[0];
        *(_DWORD *)(v12 + 200) = __n[0];
        memcpy(*(void **)(v12 + 192), __dst, v95);
        size_t v96 = LODWORD(v116[0]);
        *(_DWORD *)(v12 + 216) = LODWORD(v116[0]) + 4;
        **(unsigned char **)(v12 + 208) = 0;
        *(unsigned char *)(*(void *)(v12 + 208) + 1) = 0;
        *(unsigned char *)(*(void *)(v12 + 208) + 2) = 0;
        *(unsigned char *)(*(void *)(v12 + 208) + 3) = 1;
        memcpy((void *)(*(void *)(v12 + 208) + 4), __src, v96);
LABEL_75:
        uint64_t DataPointer = v58;
        goto LABEL_57;
      }
    }
LABEL_73:
    __int16 v58 = -666;
LABEL_74:
    CFLog();
    goto LABEL_75;
  }
  uint64_t DataPointer = 0;
LABEL_57:
  *(_DWORD *)(v8 + 8) = DataLength;
  int v59 = *(char **)v8;
  if (!*(void *)v8) {
    int v59 = dataPointerOut;
  }
  if (*(_DWORD *)(v12 + 220))
  {
    if (v37 >= 1)
    {
      for (uint64_t i = 0; i != v37; ++i)
      {
        uint64_t v61 = (*(_DWORD *)&v113[4 * i + 1] + 4);
        *(_DWORD *)(*(void *)(v8 + 48) + 4 * i) = v61;
        *(void *)(*(void *)(v8 + 56) + 8 * i) = v59;
        v59 += v61;
      }
    }
  }
  else if (v37 >= 1)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      uint64_t v63 = (*(_DWORD *)&v113[4 * j + 1] + 4);
      *(_DWORD *)(*(void *)(v8 + 48) + 4 * j) = v63;
      *(void *)(*(void *)(v8 + 56) + 8 * j) = v59;
      **(unsigned char **)(*(void *)(v8 + 56) + 8 * j) = 0;
      *(unsigned char *)(*(void *)(*(void *)(v8 + 56) + 8 * j) + 1) = 0;
      *(unsigned char *)(*(void *)(*(void *)(v8 + 56) + 8 * j) + 2) = 0;
      *(unsigned char *)(*(void *)(*(void *)(v8 + 56) + 8 * j) + 3) = 1;
      v59 += v63;
    }
  }
  *(_DWORD *)(v8 + 36) = v37;
LABEL_68:
  uint64_t v64 = *(const void **)(v12 + 8 * *(int *)(v12 + 64) + 3480);
  if (v64)
  {
    CFRelease(v64);
    *(void *)(v12 + 8 * *(int *)(v12 + 64) + 3480) = 0;
  }
  return DataPointer;
}

uint64_t sub_1BBB2923C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 205864;
  int v6 = 8 * *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 207888) = v6;
  if (*(unsigned char *)(a1 + 5424)) {
    *(_DWORD *)(a1 + 207884) = v6;
  }
  uint64_t v7 = *(void *)(a1 + 144);
  BOOL v8 = *(unsigned char *)(v7 + 708) && *(float *)v5 < 30.0;
  *(unsigned char *)(v7 + 717) = v8;
  if ((*(unsigned char *)(a1 + 1619) || *(unsigned char *)(a1 + 1618) || *(unsigned char *)(a1 + 1620) || *(unsigned char *)(a1 + 1621))
    && *(void *)a2
    && (uint64_t v9 = *(unsigned int *)(a2 + 8), v9))
  {
    uint64_t v10 = *(void *)a2 + v9;
    *(_DWORD *)(a1 + 207884) = *(_DWORD *)(a1 + 207888);
    unsigned int v11 = sub_1BBB2CAD8(a1, a3, 0, v10);
    if (v11 > 0x3D090)
    {
      CFLog();
      return 4294967246;
    }
    *(void *)(*(void *)(v5 + 2256) + 3528) = v10;
    *(_DWORD *)(*(void *)(v5 + 2256) + 3536) = v11;
    *(_DWORD *)(a2 + 8) += v11;
    *(_DWORD *)(v5 + 2020) = *(_DWORD *)(v5 + 2024) + 8 * v11;
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 5392);
  if (v13) {
    *(unsigned char *)(v13 + 728) = 0;
  }
  uint64_t v12 = 0;
  uint64_t v14 = *(void *)(a2 + 48) + 4 * *(int *)(a2 + 36);
  *(_DWORD *)(v14 - 4) += v11;
  return v12;
}

void sub_1BBB293A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, double a9, double a10, char a11, char a12, char a13, char a14, char a15, char *a16, char *a17)
{
  uint64_t v23 = a1 + 205840;
  if (*(unsigned char *)(a1 + 208087) && *(void *)(a1 + 144))
  {
    LODWORD(a10) = *(_DWORD *)(a1 + 207888);
    a10 = (double)*(unint64_t *)&a10;
    *(_DWORD *)(a1 + 207892) = *(_DWORD *)(*(void *)(a1 + 152) + 464)
                             + (int)((*(double *)(*(void *)(a1 + 152) + 456) + 1.0) * a10);
  }
  float v24 = *(float *)(a1 + 205864);
  float v25 = v24;
  if (!a7 || (float v25 = *(float *)(a1 + 205864), *a16))
  {
LABEL_6:
    if (!a14) {
      goto LABEL_100;
    }
    goto LABEL_7;
  }
  float v25 = *(float *)(a1 + 205864);
  if (a11)
  {
    uint64_t v31 = *(void *)(a1 + 205968);
    if (!v31)
    {
      float v25 = -12.0;
      goto LABEL_54;
    }
    unsigned int v32 = 8 * *(_DWORD *)(a4 + 8);
    float v33 = *(float *)(*(void *)v23 + 4940);
    if (v33 <= 0.0) {
      int v34 = *(_DWORD *)(v31 + 52);
    }
    else {
      int v34 = (int)(90000.0 / v33 + 0.5);
    }
    int v109 = 0;
    float v25 = v24;
    if (sub_1BBB210F0(v31, v32, v34, 0, 0, &v109, &v108))
    {
      if (v24 < 51.0)
      {
        if ((float)(v24 + 1.0) <= 51.0) {
          float v25 = v24 + 1.0;
        }
        else {
          float v25 = 51.0;
        }
        goto LABEL_53;
      }
      float v25 = v24;
      if (a8)
      {
        int v51 = (unsigned char *)(*(void *)v23 + 5001);
        float v25 = v24;
        if (!*v51)
        {
          *int v51 = 1;
          float v25 = v24;
LABEL_53:
          *a16 = 1;
        }
      }
    }
LABEL_54:
    *(float *)(v23 + 24) = v25;
    if (*a16) {
      goto LABEL_100;
    }
  }
  if (a12)
  {
    if (a5 == 1)
    {
      uint64_t v52 = 0;
      while (1)
      {
        uint64_t v53 = *(void *)(v23 + 128);
        if (v53)
        {
          uint64_t v54 = v53 + 4 * v52;
          if (*(_DWORD *)(v54 + 104))
          {
            if (*(_DWORD *)(v54 + 136))
            {
              sub_1BBB2C984(a16, a1, a4, v52, a8);
              float v25 = v55;
              *(float *)(v23 + 24) = v55;
              if (*a16) {
                goto LABEL_100;
              }
            }
          }
        }
        if (++v52 == 8) {
          goto LABEL_66;
        }
      }
    }
    sub_1BBB2C984(a16, a1, a4, 0, a8);
    *(float *)(v23 + 24) = v56;
    if (*a16) {
      goto LABEL_100;
    }
    float v25 = v56;
  }
LABEL_66:
  if (!a13) {
    goto LABEL_6;
  }
  uint64_t v57 = *(void *)(a1 + 152);
  if (*(_DWORD *)v57 == 2)
  {
    unsigned int v58 = (*(double *)(v57 + 272) * 100.0);
    if (v58 - 5000 >= 0x3E9) {
      unsigned int v59 = 3000;
    }
    else {
      unsigned int v59 = (*(double *)(v57 + 272) * 100.0);
    }
    if (v58 > 0xBB8) {
      unsigned int v58 = v59;
    }
    a10 = (double)(8 * *(_DWORD *)(a4 + 8) * v58);
    if (*(double *)(v57 + 264) * 100.0 * 10.0 < a10)
    {
      uint64_t v60 = *(unsigned int *)(v23 + 2220);
      unsigned int v61 = 0;
      if (v60)
      {
        unsigned __int8 v62 = (int *)(v23 + 1928);
        do
        {
          int v63 = *v62++;
          v61 += v63;
          --v60;
        }
        while (v60);
      }
      long double v64 = exp2((v25 + -12.0) / 6.0);
      HIDWORD(a10) = 1072378675;
      double v107 = v64 * 0.85;
      unsigned int v65 = *(_DWORD *)(v23 + 2048) - v61;
      *a16 = 1;
      float v66 = *(float *)(v23 + 24);
      double v67 = (double)v65;
      float v68 = v66 + 3.0;
      while (1)
      {
        float v66 = v66 + 1.0;
        if (v66 > 28.0) {
          break;
        }
        double v69 = exp2((v66 + -12.0) / 6.0) * 0.85;
        if (v69 < 0.100000001) {
          double v69 = 0.100000001;
        }
        double v70 = v107 / v69;
        double v71 = pow(v107 / v69, 1.1) * (double)v61;
        double v72 = fabs(sqrt(v70));
        if (v70 == -INFINITY) {
          double v72 = INFINITY;
        }
        double v73 = v71 + v72 * v67;
        double v74 = *(double *)(v57 + 272) * 100.0;
        unint64_t v75 = (unint64_t)v74;
        if ((unint64_t)v74 - 5000 >= 0x3E9) {
          unint64_t v76 = 3000;
        }
        else {
          unint64_t v76 = (unint64_t)v74;
        }
        if (v75 > 0xBB8) {
          unint64_t v75 = v76;
        }
        a10 = (double)(9 * (*(double *)(v57 + 264) * 100.0 * 10.0 / (double)v75));
        if (v73 * 10.0 < a10 || v68 <= v66)
        {
          if (v66 <= v68) {
            float v25 = v66;
          }
          else {
            float v25 = v68;
          }
          goto LABEL_98;
        }
      }
      if (v66 <= 51.0) {
        float v25 = v66;
      }
      else {
        float v25 = 51.0;
      }
    }
  }
LABEL_98:
  *(float *)(v23 + 24) = v25;
  if (a14 && !*a16)
  {
LABEL_7:
    uint64_t v26 = *(void *)(a1 + 5400);
    if (v26)
    {
      uint64_t v27 = *(unsigned int *)(v23 + 2220);
      if (v27)
      {
        unsigned int v28 = 0;
        CFArrayRef v29 = (int *)(v23 + 1928);
        do
        {
          int v30 = *v29++;
          v28 += v30;
          --v27;
        }
        while (v27);
      }
      else
      {
        unsigned int v28 = 0;
      }
      int v35 = *(_DWORD *)(v23 + 2048);
      if (*(_DWORD *)(v26 + 44) < v35)
      {
        *a16 = 1;
        double v36 = (float)(v25 + 1.0);
        if ((float)(v25 + 1.0) < 50.0)
        {
          BOOL v37 = __OFSUB__(v35, v28);
          int v38 = v35 - v28;
          if ((v38 < 0) ^ v37 | (v38 == 0)) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = v38;
          }
          long double v40 = exp2((v25 + -12.0) / 6.0);
          double v41 = (double)*(int *)(v26 + 44);
          double v42 = v40 * 0.85;
          double v43 = (float)(v25 + 3.0);
          while (1)
          {
            double v44 = exp2((v36 + -12.0) / 6.0) * 0.85;
            if (v44 < 0.100000001) {
              double v44 = 0.100000001;
            }
            double v45 = v42 / v44;
            double v46 = pow(v42 / v44, 1.1) * (double)v28;
            double v47 = fabs(sqrt(v45));
            if (v45 == -INFINITY) {
              double v47 = INFINITY;
            }
            a10 = v47 * (double)v39;
            if (v46 + a10 < v41 || v36 >= v43) {
              break;
            }
            double v36 = v36 + 1.0;
            if (v36 >= 50.0) {
              goto LABEL_43;
            }
          }
          if (v36 > v43) {
            double v36 = (float)(v25 + 3.0);
          }
        }
LABEL_43:
        double v49 = 51.0;
        if (v36 <= 51.0) {
          double v49 = v36;
        }
        float v25 = v49;
      }
      *(float *)(v23 + 24) = v25;
      char v50 = *a16;
      if (*a16) {
        char v50 = 1;
      }
      else {
        *a16 = 0;
      }
      *a17 = v50;
    }
  }
LABEL_100:
  if (!*(unsigned char *)(v23 + 2247) || (uint64_t v78 = *(void *)(a1 + 5392)) == 0)
  {
    if (!*a16 || !*(unsigned char *)(v23 + 2228) || *(unsigned __int8 *)(*(void *)(a1 + 136) + 676) < a5)
    {
      *(float *)(v23 + 24) = v24;
      *a16 = 0;
      goto LABEL_130;
    }
    *(_DWORD *)(v23 + 72) = 0;
    uint64_t v86 = *(unsigned int *)(v23 + 2220);
    if (v86)
    {
      int v87 = 0;
      unint64_t v88 = (int *)(v23 + 1928);
      do
      {
        int v89 = *v88++;
        v87 += v89;
        --v86;
      }
      while (v86);
      *(_DWORD *)(v23 + 72) = v87;
    }
    *(_DWORD *)(v23 + 68) = *(_DWORD *)(v23 + 2048);
    *(float *)(v23 + 76) = v24;
    *(unsigned char *)(v23 + 80) = 1;
    if (a3)
    {
      uint64_t v90 = *(unsigned int *)(a2 + 1276);
      if ((v90 & 0x80000000) == 0)
      {
        uint64_t v91 = *(void *)(a3 + 16);
        if (v91)
        {
          if (*(_DWORD *)(a3 + 4) > v90) {
            *(_DWORD *)(v91 + 8 * v90) = *(_DWORD *)(v23 + 24);
          }
        }
      }
    }
    goto LABEL_128;
  }
  if ((**(unsigned char **)(v23 + 104) & 1) == 0 && **(_DWORD **)(v23 + 120) != 32 && **(_DWORD **)(a1 + 152) != 2)
  {
    if (!*a16) {
      goto LABEL_130;
    }
LABEL_128:
    uint64_t v92 = *(void *)(v23 + 16);
    if (v92) {
      bzero(*(void **)(v92 + 32), 4 * *(unsigned int *)(v92 + 20));
    }
    goto LABEL_130;
  }
  float v79 = *(float *)(v23 + 24);
  LODWORD(a10) = *(_DWORD *)(a2 + 4928);
  double v80 = (double)*(unint64_t *)&a10;
  int v81 = *(_DWORD *)(v23 + 2052);
  int v82 = *a16;
  int v83 = *(_DWORD *)(a2 + 1276);
  double v84 = *(double *)(v78 + 136);
  *(unsigned char *)(v78 + 106) = *(unsigned char *)(v78 + 105);
  *(float *)(v78 + 4 * (v83 % 10) + 24) = v79;
  if (v82)
  {
    if (v83 >= 1)
    {
      float v85 = *(float *)(v78 + 16);
      if (floorf(v79) > v85)
      {
        *(unsigned char *)(v78 + 105) = 1;
        float v79 = v85;
      }
    }
  }
  *(unsigned char *)(v78 + 107) = (int)(v80 / v84) + ((int)(v80 / v84) >> 2) < v81;
  if (*a16)
  {
    if (a6 + 1 <= a5 || v24 >= v79)
    {
      *a16 = 0;
      *(float *)(v23 + 24) = v24;
      goto LABEL_130;
    }
    *(float *)(v23 + 24) = v79;
    goto LABEL_128;
  }
LABEL_130:
  if ((**(unsigned char **)(v23 + 104) & 1) != 0 || **(_DWORD **)(v23 + 120) == 32)
  {
    BOOL v93 = 0;
    if (!a15) {
      return;
    }
  }
  else
  {
    BOOL v93 = **(_DWORD **)(a1 + 152) != 2;
    if (!a15) {
      return;
    }
  }
  if (!*a16 && !v93)
  {
    if (*(unsigned char *)(v23 + 2247))
    {
      uint64_t v94 = *(void *)(a1 + 5392);
      if (v94)
      {
        if (*(void *)(a1 + 5400))
        {
          uint64_t v95 = *(void *)(a1 + 5416);
          *(unsigned char *)(v94 + 728) = 0;
          size_t v96 = *(_DWORD **)(a1 + 5400);
          if (*(unsigned char *)(a1 + 5424) || *(float *)(v23 + 24) >= *(float *)(*(void *)(a1 + 5392) + 16) || v96[7]) {
            unsigned int v97 = v96[11];
          }
          else {
            unsigned int v97 = v96[11] - v96[12];
          }
          unsigned int v98 = *(_DWORD *)(v23 + 2052);
          BOOL v99 = v98 <= v97 || *(_DWORD *)(a2 + 1276) == 0;
          uint64_t v100 = *(void *)(a1 + 5392);
          BOOL v102 = *(__int16 *)(*(void *)(v100 + 784) + 8 * *(char *)(v100 + 148) + 4) > *(__int16 *)(*(void *)(v100 + 784) + 8 * *(char *)(v100 + 150) + 4)
              && (*(unsigned char *)(*(void *)(a1 + 136) + 4850) ? (int v101 = 1) : (int v101 = 2), *(_DWORD *)(v100 + 808) <= v101)
              && *(float *)(v23 + 24) >= *(float *)(v100 + 16);
          unsigned int v103 = *(unsigned __int8 *)(a2 + 1368);
          if (v103 > 7 || ((1 << v103) & 0x86) == 0)
          {
            if (*(_DWORD *)(v95 + 340) == 2) {
              BOOL v99 = 1;
            }
            if (v103 == 6) {
              BOOL v99 = 1;
            }
            if (!v99 && !v102 && (!*(unsigned char *)(a2 + 1352) || !*(unsigned char *)(v23 + 2236))) {
              goto LABEL_158;
            }
          }
          if (*(unsigned char *)(*(void *)(a1 + 152) + 212))
          {
LABEL_158:
            if (*(int *)(v95 + 376) < 6 || v98 >= v96[8])
            {
              *(unsigned char *)(a2 + 17) = 1;
              uint64_t v104 = *(void *)(a1 + 5392);
              *(unsigned char *)(v104 + 728) = *(_DWORD *)(v23 + 2052) > *(_DWORD *)(*(void *)(a1 + 5400) + 40);
            }
            else
            {
              *(_DWORD *)(v95 + 376) = 4;
            }
          }
          uint64_t v105 = *(void *)(v23 + 2280);
          if (v105 && *(unsigned char *)(v105 + 3545) && !*(unsigned char *)(a2 + 1393))
          {
            *(unsigned char *)(a2 + 17) = 1;
            *(unsigned char *)(*(void *)(a1 + 5392) + 728) = 0;
            *(_DWORD *)(*(void *)(a1 + 144) + 60) = 1;
          }
        }
      }
    }
  }
}

uint64_t sub_1BBB29D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  v201[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (uint64_t *)(a1 + 205800);
  uint64_t v10 = *(unsigned int *)(a4 + 36);
  unsigned int v11 = *(int **)(a1 + 208120);
  if (!*(unsigned char *)(a1 + 205933))
  {
    if (!v11) {
      goto LABEL_82;
    }
    uint64_t v38 = *(void *)(a1 + 144);
    if (v38)
    {
      if (*(_DWORD *)(v38 + 56))
      {
        v11[863] = 0;
        *(_DWORD *)(*(void *)(a1 + 208120) + 3456) = 0;
        unsigned int v11 = *(int **)(a1 + 208120);
        if (!v11) {
          goto LABEL_82;
        }
      }
    }
    if (*(unsigned char *)(a2 + 17)) {
      goto LABEL_82;
    }
    ++v11[863];
    if (*(unsigned char *)(a2 + 12)) {
      goto LABEL_82;
    }
    uint64_t v39 = *(void *)(a1 + 208120);
    int v40 = *(_DWORD *)(v39 + 3456) + 1;
LABEL_81:
    *(_DWORD *)(v39 + 3456) = v40;
    goto LABEL_82;
  }
  uint64_t v12 = a4;
  if (!v11[55])
  {
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)&v11[2 * v11[16] + 866], 0);
    uint64_t v13 = *(const void **)&v11[2 * v11[16] + 866];
    if (v13)
    {
      CFRelease(v13);
      *(void *)&v11[2 * v11[16] + 866] = 0;
    }
  }
  if (!*(unsigned char *)(v7 + 17))
  {
    if (*(unsigned char *)(v8 + 1600))
    {
      uint64_t v41 = *(void *)(v8 + 136);
      unsigned int v42 = *(_DWORD *)(v41 + 304);
      unsigned int v43 = *(float *)(v41 + 60);
      if (v42 < 2 * v43 && v42 != 0) {
        unsigned int v43 = 0;
      }
      if (*(void *)(v8 + 1608)) {
        unsigned int v45 = v43;
      }
      else {
        unsigned int v45 = 0;
      }
    }
    else
    {
      unsigned int v45 = 0;
    }
    uint64_t v46 = v9[290];
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v46 + 152), 0);
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F45448]);
    if (Value)
    {
      CFDictionaryRef v50 = Value;
      unsigned int v148 = v45;
      uint64_t v150 = v12;
      unsigned int v152 = a5;
      uint64_t v154 = a3;
      int64x2_t v156 = v9;
      uint64_t v158 = v10;
      uint64_t v160 = v8;
      uint64_t v162 = v7;
      uint64_t v147 = v46 + 224;
      *(_DWORD *)(v46 + 1584) = sub_1BBB09110(Value, (const void *)*MEMORY[0x1E4F44DF8]);
      *(_DWORD *)(v46 + 1588) = sub_1BBB09110(v50, (const void *)*MEMORY[0x1E4F44E08]);
      *(_DWORD *)(v46 + 1596) = sub_1BBB09110(v50, (const void *)*MEMORY[0x1E4F44E00]);
      *(_DWORD *)(v46 + 1592) = sub_1BBB09110(v50, (const void *)*MEMORY[0x1E4F44E10]);
      CFArrayRef theArraya = (const __CFArray *)CFDictionaryGetValue(v50, (const void *)*MEMORY[0x1E4F44E18]);
      IOSurfaceRef buffera = (IOSurfaceRef)*MEMORY[0x1E4F44E40];
      uint64_t v186 = (const void *)*MEMORY[0x1E4F44E48];
      int v184 = (const void *)*MEMORY[0x1E4F44E70];
      unint64_t v182 = (const void *)*MEMORY[0x1E4F44E60];
      uint64_t v180 = (const void *)*MEMORY[0x1E4F44E58];
      keya = (void *)*MEMORY[0x1E4F44E78];
      unint64_t v176 = (void *)*MEMORY[0x1E4F44E80];
      int v51 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v174 = (void *)*MEMORY[0x1E4F44EA0];
      int v172 = (const void *)*MEMORY[0x1E4F44E90];
      int8x16_t v170 = (void *)*MEMORY[0x1E4F44E88];
      int8x16_t v168 = (const void *)*MEMORY[0x1E4F44E98];
      int8x16_t v166 = (void *)*MEMORY[0x1E4F44E50];
      uint64_t v52 = (const void *)*MEMORY[0x1E4F44E38];
      uint64_t v53 = (const void *)*MEMORY[0x1E4F44E20];
      int8x16_t v164 = (void *)*MEMORY[0x1E4F44E68];
      uint64_t v54 = (_DWORD *)v46;
      float v55 = (const void *)*MEMORY[0x1E4F44E30];
      float v56 = v54 + 74;
      unint64_t v57 = -1;
      unsigned int v58 = (const void *)*MEMORY[0x1E4F44E28];
      do
      {
        CFDictionaryRef v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArraya, ++v57);
        *(v56 - 18) = sub_1BBB09110(v59, buffera);
        *(v56 - 17) = sub_1BBB09110(v59, v186);
        *(v56 - 16) = sub_1BBB09110(v59, v184);
        *((void *)v56 - 7) = sub_1BBB09148(v59, v182);
        *(v56 - 12) = sub_1BBB09110(v59, v180);
        CFDictionaryRef v60 = (const __CFDictionary *)CFDictionaryGetValue(v59, keya);
        unsigned int v61 = CFDictionaryGetValue(v60, v176);
        *(v56 - 7) = CFEqual(v61, v51) != 0;
        unsigned __int8 v62 = CFDictionaryGetValue(v60, v174);
        *(v56 - 6) = CFEqual(v62, v51) != 0;
        *(v56 - 5) = sub_1BBB09110(v60, v172);
        int v63 = CFDictionaryGetValue(v60, v170);
        *(v56 - 4) = CFEqual(v63, v51) != 0;
        *(v56 - 3) = sub_1BBB09110(v60, v168);
        CFDictionaryRef v64 = (const __CFDictionary *)CFDictionaryGetValue(v59, v166);
        *(v56 - 11) = sub_1BBB09110(v64, v52);
        *(v56 - 9) = sub_1BBB09110(v64, v53);
        CFDictionaryRef v65 = (const __CFDictionary *)CFDictionaryGetValue(v59, v164);
        *(v56 - 10) = sub_1BBB09110(v65, v52);
        *(v56 - 8) = sub_1BBB09110(v65, v53);
        if (CFDictionaryContainsKey(v64, v55)) {
          float v66 = v55;
        }
        else {
          float v66 = v58;
        }
        *(v56 - 1) = sub_1BBB09110(v64, v66);
        if (CFDictionaryContainsKey(v65, v55)) {
          double v67 = v55;
        }
        else {
          double v67 = v58;
        }
        *float v56 = sub_1BBB09110(v65, v67);
        v56 += 20;
        unint64_t v68 = v54[398];
      }
      while (v57 < v68);
      CFArrayRef theArrayb = (CFArrayRef)v54;
      uint64_t v7 = v162;
      unsigned int v45 = v148;
      if (!v148)
      {
        unsigned int v76 = 0;
        uint64_t v10 = v158;
        uint64_t v8 = v160;
        a3 = v154;
        uint64_t v9 = v156;
        a5 = v152;
        uint64_t v12 = v150;
LABEL_57:
        if (*(_DWORD *)(v7 + 1276) && (int v77 = (_DWORD *)v9[290], !memcmp(v77 + 56, v77 + 400, 0x560uLL)))
        {
          v77[36] = -12912;
          *(unsigned char *)(v7 + 17) = 1;
          *(_DWORD *)(*(void *)(v8 + 144) + 60) = 1;
          *(unsigned char *)(*(void *)(v8 + 5392) + 728) = 0;
        }
        else
        {
          *(_DWORD *)(*(void *)(v8 + 144) + 60) = 0;
        }
        memcpy((void *)(v9[290] + 1600), (const void *)(v9[290] + 224), 0x560uLL);
        if (v45)
        {
          *(_WORD *)(v8 + 1616) = v76;
          **(_WORD **)(v8 + 1608) = __rev16(v76);
        }
        uint64_t v78 = v9[290];
        int v79 = *(_DWORD *)(v78 + 3536);
        if (v79)
        {
          double v80 = *(_WORD **)(v78 + 3528);
          unsigned int v81 = ((4 * v79) | 2u) / 3;
          if (v81 > *(_DWORD *)(v78 + 3520))
          {
            free(*(void **)(v78 + 3512));
            *(void *)(v9[290] + 3512) = malloc_type_calloc(v81, 1uLL, 0x4AE20AB7uLL);
            uint64_t v82 = v9[290];
            if (!*(void *)(v82 + 3512)) {
              return 4294967188;
            }
            *(_DWORD *)(v82 + 3520) = v81;
            uint64_t v78 = v9[290];
          }
          uint64_t v83 = 0;
          LODWORD(v84) = 0;
          float v85 = *(unsigned char **)(v78 + 3512);
          if (*(v80 - 1)) {
            int v86 = *((unsigned char *)v80 - 1) == 0;
          }
          else {
            int v86 = 2;
          }
          int v87 = v85;
          do
          {
            unsigned int v88 = *((unsigned __int8 *)v80 + v83);
            if (v86 == 2)
            {
              if (v88 > 3)
              {
                int v86 = 2;
              }
              else
              {
                int v86 = 0;
                *v87++ = 3;
                ++*(_DWORD *)(v12 + 8);
                uint64_t v89 = *(void *)(v12 + 48) + 4 * *(int *)(v12 + 36);
                ++*(_DWORD *)(v89 - 4);
                LODWORD(v84) = v84 + 1;
                *((_DWORD *)v9 + 521) += 8;
                unsigned int v88 = *((unsigned __int8 *)v80 + v83);
              }
            }
            if (v88) {
              int v86 = 0;
            }
            else {
              ++v86;
            }
            *v87++ = v88;
            size_t v84 = (v84 + 1);
            ++v83;
          }
          while (v79 != v83);
          memcpy(v80, v85, v84);
          uint64_t v78 = v9[290];
        }
        *(_DWORD *)(v78 + 3452) = *(_DWORD *)(v78 + 1584);
        uint64_t v39 = v9[290];
        int v40 = *(_DWORD *)(v39 + 1596);
        goto LABEL_81;
      }
      uint64_t v69 = 0;
      uint64_t v70 = (v68 + 1);
      int v71 = -1;
      uint64_t v72 = 56;
      int v73 = -1;
      do
      {
        int v74 = v54[v72];
        BOOL v75 = v73 < v74;
        if (v73 <= v74) {
          int v73 = v54[v72];
        }
        if (v75) {
          int v71 = v69;
        }
        ++v69;
        v72 += 20;
      }
      while (v70 != v69);
      uint64_t v10 = v158;
      uint64_t v8 = v160;
      a3 = v154;
      uint64_t v9 = v156;
      a5 = v152;
      uint64_t v12 = v150;
      if (v71 != -1 && !(v73 % v148))
      {
        uint64_t v127 = IOSurfaceLookup(*(_DWORD *)(v147 + 80 * v71 + 68));
        if (v127)
        {
          uint64_t v128 = v127;
          IOSurfaceLock(v127, 0, 0);
          *(void *)&v194[4] = v128;
          sub_1BBB06F70(v193, *((unsigned char *)theArrayb + 3544) == 0);
          uint64_t v129 = 0;
          v201[0] = 0;
          v201[1] = 0;
          char v130 = 1;
          uint64_t v199 = 0;
          uint64_t v200 = 0;
          do
          {
            char v131 = v130;
            uint64_t v132 = &v193[7 * v129];
            v201[v129] = v132[6];
            int v133 = *((_DWORD *)v132 + 21);
            LODWORD(v132) = *((_DWORD *)v132 + 22);
            *((_DWORD *)&v201[-1] + v129) = v133;
            *((_DWORD *)&v199 + v129) = v132;
            uint64_t v129 = 1;
            char v130 = 0;
          }
          while ((v131 & 1) != 0);
          if (v195[0] == 1 || v196 == 1)
          {
            uint64_t v135 = 0;
            CFArrayRef v146 = theArrayb;
            v192[0] = *((_DWORD *)theArrayb + 893);
            char v136 = 1;
            do
            {
              char v137 = v136;
              if (v195[56 * v135] == 1)
              {
                int v138 = *((_DWORD *)theArrayb + 894);
                uint64_t v139 = *(void *)&v194[56 * v135 + 20];
              }
              else
              {
                int v138 = 0;
                uint64_t v139 = 0;
              }
              char v136 = 0;
              uint64_t v145 = v192;
              v192[v135 + 1] = v138;
              *(void *)&v192[2 * v135 + 4] = v139;
              uint64_t v135 = 1;
            }
            while ((v137 & 1) != 0);
          }
          else
          {
            uint64_t v145 = 0;
            CFArrayRef v146 = theArrayb;
          }
          unsigned int v76 = sub_1BBB028C0(v201, (int *)v146 + 895, (int *)v146 + 897, (int *)&v200, (uint64_t)&v199, v146, (uint64_t)v145);
          IOSurfaceUnlock(v128, 0, 0);
          CFRelease(v128);
          goto LABEL_57;
        }
      }
    }
    unsigned int v76 = 0;
    goto LABEL_57;
  }
  if (*(unsigned char *)(v8 + 1057) == 1)
  {
    uint64_t v14 = v9[290];
    CFArrayRef v15 = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v14 + 152), 0);
    CFDictionaryRef v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, 0);
    CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E4F45448]);
    if (v17)
    {
      CFDictionaryRef v18 = v17;
      uint64_t v149 = v14;
      unsigned int v151 = a5;
      uint64_t v153 = a3;
      int64x2_t v155 = v9;
      uint64_t v157 = v10;
      uint64_t v159 = v8;
      uint64_t v161 = v7;
      unsigned int v197 = sub_1BBB09110(v17, (const void *)*MEMORY[0x1E4F44DF8]);
      sub_1BBB09110(v18, (const void *)*MEMORY[0x1E4F44E08]);
      sub_1BBB09110(v18, (const void *)*MEMORY[0x1E4F44E00]);
      unsigned int v198 = sub_1BBB09110(v18, (const void *)*MEMORY[0x1E4F44E10]);
      CFArrayRef theArray = (const __CFArray *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x1E4F44E18]);
      uint64_t v185 = (const void *)*MEMORY[0x1E4F44E48];
      IOSurfaceRef buffer = (IOSurfaceRef)*MEMORY[0x1E4F44E40];
      unsigned int v181 = (const void *)*MEMORY[0x1E4F44E60];
      uint64_t v183 = (const void *)*MEMORY[0x1E4F44E70];
      key = (void *)*MEMORY[0x1E4F44E78];
      int v179 = (const void *)*MEMORY[0x1E4F44E58];
      BOOL v175 = (void *)*MEMORY[0x1E4F44E80];
      int v19 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v171 = (const void *)*MEMORY[0x1E4F44E90];
      unsigned int v173 = (void *)*MEMORY[0x1E4F44EA0];
      int8x16_t v167 = (const void *)*MEMORY[0x1E4F44E98];
      int8x16_t v169 = (void *)*MEMORY[0x1E4F44E88];
      int64x2_t v165 = (void *)*MEMORY[0x1E4F44E50];
      uint64_t v20 = (const void *)*MEMORY[0x1E4F44E38];
      CFDictionaryRef v21 = (const void *)*MEMORY[0x1E4F44E20];
      int64x2_t v163 = (void *)*MEMORY[0x1E4F44E68];
      uint64_t v22 = (const void *)*MEMORY[0x1E4F44E30];
      uint64_t v23 = (int8x8_t *)v194;
      unint64_t v24 = -1;
      float v25 = (const void *)*MEMORY[0x1E4F44E28];
      do
      {
        CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, ++v24);
        v23[-5].i32[1] = sub_1BBB09110(v26, buffer);
        v23[-4].i32[0] = sub_1BBB09110(v26, v185);
        v23[-4].i32[1] = sub_1BBB09110(v26, v183);
        *(int8x8_t *)((char *)&v23[-3] + 4) = (int8x8_t)sub_1BBB09148(v26, v181);
        v23[-2].i32[1] = sub_1BBB09110(v26, v179);
        CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(v26, key);
        unsigned int v28 = CFDictionaryGetValue(v27, v175);
        unsigned int v29 = CFEqual(v28, v19);
        int v30 = CFDictionaryGetValue(v27, v173);
        v23[1] = vbic_s8((int8x8_t)0x100000001, (int8x8_t)vceqz_s32((int32x2_t)__PAIR64__(CFEqual(v30, v19), v29)));
        v23[2].i32[0] = sub_1BBB09110(v27, v171);
        uint64_t v31 = CFDictionaryGetValue(v27, v169);
        v23[2].i32[1] = CFEqual(v31, v19) != 0;
        v23[3].i32[0] = sub_1BBB09110(v27, v167);
        CFDictionaryRef v32 = (const __CFDictionary *)CFDictionaryGetValue(v26, v165);
        v23[-1].i32[0] = sub_1BBB09110(v32, v20);
        v23->i32[0] = sub_1BBB09110(v32, v21);
        CFDictionaryRef v33 = (const __CFDictionary *)CFDictionaryGetValue(v26, v163);
        v23[-1].i32[1] = sub_1BBB09110(v33, v20);
        v23->i32[1] = sub_1BBB09110(v33, v21);
        if (CFDictionaryContainsKey(v32, v22)) {
          int v34 = v22;
        }
        else {
          int v34 = v25;
        }
        v23[4].i32[0] = sub_1BBB09110(v32, v34);
        if (CFDictionaryContainsKey(v33, v22)) {
          int v35 = v22;
        }
        else {
          int v35 = v25;
        }
        v23[4].i32[1] = sub_1BBB09110(v33, v35);
        v23 += 10;
      }
      while (v24 < v198);
      uint64_t v36 = (*(_DWORD *)(v149 + 1592) + 1);
      BOOL v37 = (_DWORD *)(v149 + 264);
      uint64_t v8 = v159;
      uint64_t v7 = v161;
      uint64_t v9 = v155;
      uint64_t v10 = v157;
      a3 = v153;
      a5 = v151;
      do
      {
        *(v37 - 2) = 0;
        *BOOL v37 = 0;
        v37 += 20;
        --v36;
      }
      while (v36);
    }
  }
  if (!*(_DWORD *)(*(void *)(v8 + 144) + 60)) {
    *(_DWORD *)(v9[290] + 2976) = 1;
  }
LABEL_82:
  *(unsigned char *)(v7 + 18) = a5 - 1;
  if (*(unsigned char *)(v8 + 1057) == 1)
  {
    int v90 = *(unsigned __int8 *)(v7 + 1368);
    BOOL v91 = v90 == 2 || v90 == 7;
    if (!v91 && !*(unsigned char *)(v7 + 17))
    {
      uint64_t v92 = *v9;
      LODWORD(v93) = *(unsigned char *)(v7 + 16) ? *(unsigned __int8 *)(v7 + 22) : *(_DWORD *)(v92 + 23664);
      if ((int)v93 >= 1)
      {
        uint64_t v95 = (uint64_t *)(v92 + 22840);
        uint64_t v93 = v93;
        do
        {
          *(_WORD *)(*v95 + 19116) = *(_WORD *)(v7 + 19112);
          uint64_t v96 = *v95++;
          *(_WORD *)(v96 + 19118) = *(_WORD *)(v7 + 19114);
          --v93;
        }
        while (v93);
      }
    }
  }
  *(unsigned char *)(v7 + 5001) = 0;
  if (a3)
  {
    if (a5 >= 2)
    {
      uint64_t v97 = *(unsigned int *)(v7 + 1276);
      if ((v97 & 0x80000000) == 0)
      {
        uint64_t v98 = *(void *)(a3 + 16);
        if (v98)
        {
          if (*(_DWORD *)(a3 + 4) > v97) {
            *(_DWORD *)(v98 + 8 * v97) = *((_DWORD *)v9 + 16);
          }
        }
      }
    }
  }
  int v99 = *((unsigned __int8 *)v9 + 1882);
  if (*((unsigned char *)v9 + 1882))
  {
    int v100 = *(_DWORD *)(*(void *)(v8 + 5456) + 14184);
    if (v100 == 5 || v100 == 0)
    {
      BOOL v102 = (int *)(v8 + 57096);
      if ((v99 | 2) == 3)
      {
        int v103 = *((_DWORD *)v9 + 471);
        int v104 = *v102;
        unsigned int v105 = *(_DWORD *)(v8 + 57100) * *v102;
        if (*((unsigned char *)v9 + 2287))
        {
          int v106 = v104 / 3;
          unsigned int v107 = v105 >> (v99 == 3);
          unsigned int v108 = v106 + v103;
          if (v106 + v103 >= v107)
          {
            char v109 = *((unsigned char *)v9 + 1888);
            if (v106 - 1 >= (v109 + 1)) {
              LOBYTE(v108) = v109 + 1;
            }
            else {
              LOBYTE(v108) = 0;
            }
            *((unsigned char *)v9 + 1888) = v108;
            unsigned int v108 = v108;
          }
        }
        else
        {
          unsigned int v108 = (v103 + 1) % (v105 >> (v99 != 1));
        }
        *((_DWORD *)v9 + 471) = v108;
      }
      else if ((int)v10 >= 1)
      {
        uint64_t v110 = 0;
        for (uint64_t i = 0; i != v10; ++i)
        {
          uint64_t v112 = v9[237];
          int v113 = *(_DWORD *)(v112 + 4 * i);
          uint64_t v114 = *(void *)(v8 + 5480) + v110;
          unsigned int v115 = *(_DWORD *)(v114 + 12);
          int v116 = *(_DWORD *)(v114 + 16);
          if (*((unsigned char *)v9 + 2287))
          {
            int v117 = *v102 / 3;
            unsigned int v118 = v117 + v113;
            if (v118 >= v116 + v115)
            {
              ++*(unsigned char *)(v9[238] + i);
              uint64_t v119 = v9[238];
              unsigned int v120 = *(unsigned __int8 *)(v119 + i);
              if (v117 - 1 < v120)
              {
                *(unsigned char *)(v119 + i) = 0;
                unsigned int v120 = *(unsigned __int8 *)(v9[238] + i);
              }
              unsigned int v118 = v115 + v120;
              uint64_t v112 = v9[237];
            }
          }
          else if (v113 + 1 < v116 + v115)
          {
            unsigned int v118 = v113 + 1;
          }
          else
          {
            unsigned int v118 = v115;
          }
          *(_DWORD *)(v112 + 4 * i) = v118;
          v110 += 88;
        }
      }
    }
  }
  if (*((unsigned char *)v9 + 2288)) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 && *((unsigned char *)v9 + 2287))
  {
    if (!*(void *)(v8 + 152) || !*(void *)(v8 + 5392)) {
      return 0;
    }
    if (*((unsigned char *)v9 + 133)) {
      goto LABEL_136;
    }
    if ((int)v10 < 1)
    {
      int v124 = 0;
      int v123 = 0;
    }
    else
    {
      uint64_t v122 = 0;
      int v123 = 0;
      int v124 = 0;
      do
      {
        uint64_t v125 = *(void *)(v8 + 5480) + v122;
        v124 += *(_DWORD *)(v125 + 56);
        *(_DWORD *)(v125 + 56) = 0;
        uint64_t v126 = *(void *)(v8 + 5480) + v122;
        v123 += *(_DWORD *)(v126 + 60);
        *(_DWORD *)(v126 + 60) = 0;
        v122 += 88;
      }
      while (88 * v10 != v122);
    }
    unsigned int v140 = v123 + v124;
    if (!v140) {
LABEL_136:
    }
      unsigned int v121 = 0;
    else {
      unsigned int v121 = 100 * v124 / v140;
    }
    uint64_t result = 0;
    int v141 = *(_DWORD *)(v7 + 1276);
    BOOL v142 = -v141 < 0;
    int v143 = -v141 & 3;
    int v144 = v141 & 3;
    if (!v142) {
      int v144 = -v143;
    }
    *(_DWORD *)(*(void *)(v8 + 5392) + 4 * v144 + 704) = v121;
  }
  return result;
}

void sub_1BBB2AC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 205864;
  uint64_t v7 = (unsigned char *)(a1 + 5424);
  int v8 = *(unsigned __int8 *)(a2 + 17);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v10 = *(void *)(a1 + 5392);
  if (*(_DWORD *)v9)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 208060);
    if (v11)
    {
      int v12 = 0;
      uint64_t v13 = (int *)(a1 + 207768);
      do
      {
        int v14 = *v13++;
        v12 += v14;
        --v11;
      }
      while (v11);
    }
    else
    {
      int v12 = 0;
    }
    if (*(_DWORD *)v9 != 2) {
      goto LABEL_131;
    }
    if (*(unsigned char *)(a1 + 205936))
    {
      unsigned int v25 = *(_DWORD *)(a2 + 4564);
      unsigned int v26 = v25 >> 1;
      if (*(_DWORD *)(*(void *)(a1 + 136) + 4852) == 2) {
        int v27 = 0;
      }
      else {
        int v27 = *(_DWORD *)(a2 + 1268);
      }
      unsigned int v40 = v26 + *(_DWORD *)(*(void *)(a1 + 208120) + 3400);
      sub_1BBAF8334(v9 + 1768, v40 / v25, (v26 + v27 * *(_DWORD *)(a2 + 19156)) / v25, v40 / v25, *(_DWORD *)(a2 + 1276));
    }
    if (*(unsigned char *)(*(void *)(a1 + 136) + 577) == 1)
    {
      int v41 = *(unsigned __int8 *)(a2 + 17);
      if (*(unsigned char *)(v6 + 56))
      {
        uint64_t v159 = *(void *)(v6 + 44);
        int v160 = *(_DWORD *)(v6 + 52);
        int v42 = *(_DWORD *)(v6 + 2024);
        signed int v43 = *(_DWORD *)(a2 + 1276);
        float v44 = *(float *)v6;
        unsigned int v45 = *(unsigned __int8 *)(a2 + 1368);
        int v46 = *(_DWORD *)(v9 + 244);
        double v47 = &v159;
        uint64_t v48 = v9;
        int v49 = v12;
        goto LABEL_32;
      }
    }
    else
    {
      int v41 = *(unsigned __int8 *)(a2 + 17);
    }
    int v42 = 8 * *(_DWORD *)(a3 + 8);
    signed int v43 = *(_DWORD *)(a2 + 1276);
    float v44 = *(float *)v6;
    unsigned int v45 = *(unsigned __int8 *)(a2 + 1368);
    int v46 = *(_DWORD *)(v9 + 244);
    uint64_t v48 = v9;
    int v49 = v12;
    double v47 = 0;
LABEL_32:
    sub_1BBAF95A4(v48, v42, v49, v43, v45, (uint64_t)v47, v41, v46, v44);
    if (*v7)
    {
      BOOL v50 = !*(unsigned char *)(a2 + 17) && *(float *)v6 < (float)dword_1BBB8BDF8[*(int *)(v9 + 216)];
      *(unsigned char *)(*(void *)(a1 + 5416) + 349) = v50;
      *(unsigned char *)(*(void *)(a1 + 5416) + 348) = *(_DWORD *)(*(void *)(a1 + 5416) + 344) > (8 * *(_DWORD *)(a3 + 8));
    }
    goto LABEL_131;
  }
  uint64_t v15 = *(void *)(a1 + 205944);
  if (*(_DWORD *)v15)
  {
    if (*(_DWORD *)v15)
    {
      int v16 = 8 * *(_DWORD *)(a3 + 8);
      *(void *)(v15 + 24) = v16;
      int v18 = *(_DWORD *)(v15 + 120);
      int v17 = *(_DWORD *)(v15 + 124);
      double v19 = (double)v17;
      *(double *)(v15 + 32) = *(float *)v6;
      *(double *)(v15 + 40) = (double)v17;
      if (v18 == 2)
      {
        *(void *)(v15 + 520) = v16;
        *(_DWORD *)(v15 + 536) = v17;
        *(void *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        double v24 = *(double *)(v15 + 240);
        double v21 = *(double *)(v15 + 248);
        double v22 = *(double *)(v15 + 264);
        double v23 = (double)v16;
        double v20 = exp2((v19 + -12.0) / 6.0) * (double)v16;
      }
      else if (v18 == 1)
      {
        *(void *)(v15 + 512) = v16;
        *(_DWORD *)(v15 + 532) = v17;
        *(void *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        double v24 = *(double *)(v15 + 240);
        double v20 = *(double *)(v15 + 256);
        double v22 = *(double *)(v15 + 264);
        double v23 = (double)v16;
        double v21 = exp2((v19 + -12.0) / 6.0) * (double)v16;
      }
      else if (v18)
      {
        *(void *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        double v24 = *(double *)(v15 + 240);
        double v21 = *(double *)(v15 + 248);
        double v20 = *(double *)(v15 + 256);
        double v22 = *(double *)(v15 + 264);
        double v23 = (double)v16;
      }
      else
      {
        *(void *)(v15 + 504) = v16;
        *(_DWORD *)(v15 + 528) = v17;
        *(void *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        double v21 = *(double *)(v15 + 248);
        double v20 = *(double *)(v15 + 256);
        double v22 = *(double *)(v15 + 264);
        double v23 = (double)v16;
        double v24 = exp2((v19 + -12.0) / 6.0) * (double)v16;
      }
      double v51 = sub_1BBB4E9DC(v24);
      double v52 = sub_1BBB4E9DC(v21);
      double v53 = sub_1BBB4E9DC(v20);
      double v54 = sub_1BBB4E9DC(v22);
      double v55 = sub_1BBB4E9DC(v54 - v23);
      sub_1BBB0CDAC((double *)(v15 + 176), v51, v52, v53, v55);
      *(_DWORD *)(v15 + 184) = 1;
      ++*(_DWORD *)(v15 + 3912);
      int v56 = *(_DWORD *)(v15 + 120);
      if (v56)
      {
        *(_DWORD *)(v15 + 3796) = (*(_DWORD *)(v15 + 24) + 3 * *(_DWORD *)(v15 + 3796) + 2) >> 2;
        *(_DWORD *)(v15 + 152) = v16;
        *(_DWORD *)(v15 + 156) = 0;
        if (v56 == 1)
        {
          float v71 = (float)v16;
          if (*(_DWORD *)(v15 + 64))
          {
            float v72 = sub_1BBB4E9DC(((double)v16 - (double)*(uint64_t *)(v15 + 224)) / 1000.0);
            float v73 = *(float *)(v15 + 3724) + v72;
            int v74 = 0;
            float v75 = 100.0;
            if (v73 < 100.0) {
              float v75 = v73;
            }
            if (v73 >= 0.0) {
              float v76 = v75;
            }
            else {
              float v76 = 0.0;
            }
            *(float *)(v15 + 3724) = v76;
            float v77 = sub_1BBB4E9DC(((double)v16 - *(double *)(v15 + 3896) / *(double *)(v15 + 3904)) / 1000.0);
            float v78 = *(float *)(v15 + 3736) + v77;
            if (v78 >= 0.0)
            {
              int v74 = 1120403456;
              if (v78 < 100.0) {
                int v74 = LODWORD(v78);
              }
            }
            *(_DWORD *)(v15 + 3736) = v74;
            *(float *)(v15 + 3748) = v71;
          }
          int v79 = *(_DWORD *)(v15 + 456);
          uint64_t v80 = *(void *)(v15 + 448);
          *(void *)(v15 + 452) = v80;
          *(void *)(v15 + 448) = v80;
          *(_DWORD *)(v15 + 456) = v79;
          *(float *)(v15 + 460) = v71;
          ++*(_DWORD *)(v15 + 484);
        }
        else if (v56 == 2)
        {
          if (*(_DWORD *)(v15 + 64))
          {
            float v57 = sub_1BBB4E9DC(((double)v16 - (double)*(uint64_t *)(v15 + 232)) / 1000.0);
            float v58 = *(float *)(v15 + 3724) + v57;
            int v59 = 0;
            float v60 = 100.0;
            if (v58 < 100.0) {
              float v60 = v58;
            }
            if (v58 >= 0.0) {
              float v61 = v60;
            }
            else {
              float v61 = 0.0;
            }
            *(float *)(v15 + 3724) = v61;
            float v62 = sub_1BBB4E9DC(((double)v16 - *(double *)(v15 + 3896) / *(double *)(v15 + 3904)) / 1000.0);
            float v63 = *(float *)(v15 + 3736) + v62;
            if (v63 >= 0.0)
            {
              int v59 = 1120403456;
              if (v63 < 100.0) {
                int v59 = LODWORD(v63);
              }
            }
            *(_DWORD *)(v15 + 3736) = v59;
          }
          ++*(_DWORD *)(v15 + 488);
        }
      }
      else
      {
        *(_DWORD *)(v15 + 152) = v16;
        *(_DWORD *)(v15 + 156) = 0;
        if (*(_DWORD *)(v15 + 64) && !*(_DWORD *)(v15 + 3824))
        {
          float v64 = sub_1BBB4E9DC(((double)v16 - (double)*(uint64_t *)(v15 + 216)) / 1000.0);
          float v65 = *(float *)(v15 + 3724) + v64;
          int v66 = 0;
          float v67 = 100.0;
          if (v65 < 100.0) {
            float v67 = v65;
          }
          if (v65 >= 0.0) {
            float v68 = v67;
          }
          else {
            float v68 = 0.0;
          }
          *(float *)(v15 + 3724) = v68;
          float v69 = sub_1BBB4E9DC(((double)v16 - *(double *)(v15 + 3896) / *(double *)(v15 + 3904)) / 1000.0);
          float v70 = *(float *)(v15 + 3736) + v69;
          if (v70 >= 0.0)
          {
            int v66 = 1120403456;
            if (v70 < 100.0) {
              int v66 = LODWORD(v70);
            }
          }
          *(_DWORD *)(v15 + 3736) = v66;
          *(float *)(v15 + 3744) = (float)v16;
        }
        ++*(_DWORD *)(v15 + 480);
      }
      if (*(_DWORD *)(v15 + 3824)) {
        *(_DWORD *)(v15 + 3824) = 0;
      }
      *(_DWORD *)(v15 + 3944) = *(_DWORD *)(v15 + 124);
      ++*(_DWORD *)(v15 + 3764);
    }
    goto LABEL_131;
  }
  uint64_t v28 = *(void *)(a1 + 205960);
  if (*(_DWORD *)v28 != 32) {
    goto LABEL_131;
  }
  int v29 = (int)*(float *)v6;
  int v30 = 8 * *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v28 + 116) = v29;
  *(void *)(v28 + 16) = v30;
  double v31 = (double)v29;
  *(double *)(v28 + 24) = *(float *)v6;
  *(double *)(v28 + 32) = (double)v29;
  int v32 = *(_DWORD *)(v28 + 112);
  uint64_t v158 = v30;
  int v157 = v30;
  if (v32 && !*(_DWORD *)(v28 + 132))
  {
    if (v32 == 2)
    {
      *(void *)(v28 + 568) = v30;
      *(_DWORD *)(v28 + 584) = v29;
      *(void *)(v28 + 256) = v30;
      *(double *)(v28 + 264) = v31;
      double v34 = *(double *)(v28 + 224);
      double v33 = *(double *)(v28 + 232);
      double v35 = *(double *)(v28 + 248);
      double v37 = exp2((v31 + -12.0) / 6.0);
      goto LABEL_87;
    }
    if (v32 == 1)
    {
      *(void *)(v28 + 448) = *(void *)(v28 + 560);
      *(void *)(v28 + 560) = v30;
      *(_DWORD *)(v28 + 580) = v29;
      *(void *)(v28 + 256) = v30;
      *(double *)(v28 + 264) = v31;
      double v34 = *(double *)(v28 + 224);
      double v33 = *(double *)(v28 + 232);
      double v36 = *(double *)(v28 + 240);
      double v35 = *(double *)(v28 + 248);
      double v37 = exp2((v31 + -12.0) / 6.0);
LABEL_84:
      int v38 = v157;
      double v39 = (double)v157;
      double v33 = (v37 * (double)v157 + v33 * 7.0) * 0.125;
      goto LABEL_88;
    }
  }
  else
  {
    *(void *)(v28 + 552) = v30;
    *(_DWORD *)(v28 + 576) = v29;
  }
  *(void *)(v28 + 256) = v30;
  *(double *)(v28 + 264) = v31;
  double v34 = *(double *)(v28 + 224);
  double v33 = *(double *)(v28 + 232);
  double v36 = *(double *)(v28 + 240);
  double v35 = *(double *)(v28 + 248);
  double v37 = exp2((v31 + -12.0) / 6.0);
  switch(v32)
  {
    case 0:
      int v38 = v157;
      double v39 = (double)v157;
      double v34 = v37 * (double)v157;
      goto LABEL_88;
    case 1:
      goto LABEL_84;
    case 2:
LABEL_87:
      int v38 = v157;
      double v39 = (double)v157;
      double v36 = v37 * (double)v157;
      goto LABEL_88;
  }
  int v38 = v157;
  double v39 = (double)v157;
LABEL_88:
  double v81 = sub_1BBB4E9DC(v34);
  double v82 = sub_1BBB4E9DC(v33);
  double v83 = sub_1BBB4E9DC(v36);
  double v84 = sub_1BBB4E9DC(v35);
  double v85 = sub_1BBB4E9DC(v84 - v39);
  sub_1BBB0CDAC((double *)(v28 + 160), v81, v82, v83, v85);
  *(_DWORD *)(v28 + 168) = 1;
  ++*(_DWORD *)(v28 + 3984);
  int v86 = *(_DWORD *)(v28 + 112);
  if (v86) {
    *(_DWORD *)(v28 + 3860) = (*(_DWORD *)(v28 + 16) + 3 * *(_DWORD *)(v28 + 3860) + 2) >> 2;
  }
  double v87 = (double)v38;
  double v88 = (double)v38 - *(double *)(v28 + 3968) / *(double *)(v28 + 3976);
  *(void *)(v28 + 3824) += (uint64_t)(v88 + 0.5);
  int64x2_t v89 = vdupq_n_s64(1uLL);
  v89.i64[0] = v158;
  *(int64x2_t *)(v28 + 3832) = vaddq_s64(*(int64x2_t *)(v28 + 3832), v89);
  *(_DWORD *)(v28 + 140) = v38;
  *(_DWORD *)(v28 + 144) = 0;
  switch(v86)
  {
    case 2:
      if (*(_DWORD *)(v28 + 56))
      {
        float v97 = sub_1BBB4E9DC((v87 - (double)*(uint64_t *)(v28 + 216)) / 1000.0);
        float v98 = *(float *)(v28 + 3772) + v97;
        int v99 = 0;
        float v100 = 100.0;
        if (v98 < 100.0) {
          float v100 = v98;
        }
        if (v98 >= 0.0) {
          float v101 = v100;
        }
        else {
          float v101 = 0.0;
        }
        *(float *)(v28 + 3772) = v101;
        float v102 = sub_1BBB4E9DC(v88 / 1000.0);
        float v103 = *(float *)(v28 + 3784) + v102;
        if (v103 >= 0.0)
        {
          int v99 = 1120403456;
          if (v103 < 100.0) {
            int v99 = LODWORD(v103);
          }
        }
        *(_DWORD *)(v28 + 3784) = v99;
      }
      ++*(_DWORD *)(v28 + 536);
      break;
    case 1:
      if (*(_DWORD *)(v28 + 56))
      {
        float v104 = sub_1BBB4E9DC((v87 - (double)*(uint64_t *)(v28 + 208)) / 1000.0);
        float v105 = *(float *)(v28 + 3772) + v104;
        int v106 = 0;
        float v107 = 100.0;
        if (v105 < 100.0) {
          float v107 = v105;
        }
        if (v105 >= 0.0) {
          float v108 = v107;
        }
        else {
          float v108 = 0.0;
        }
        *(float *)(v28 + 3772) = v108;
        float v109 = sub_1BBB4E9DC(v88 / 1000.0);
        float v110 = *(float *)(v28 + 3784) + v109;
        if (v110 >= 0.0)
        {
          int v106 = 1120403456;
          if (v110 < 100.0) {
            int v106 = LODWORD(v110);
          }
        }
        *(_DWORD *)(v28 + 3784) = v106;
        float v111 = (float)v38;
        *(float *)(v28 + 3796) = (float)v38;
      }
      else
      {
        float v111 = (float)v38;
      }
      int v112 = *(_DWORD *)(v28 + 504);
      uint64_t v113 = *(void *)(v28 + 496);
      *(void *)(v28 + 500) = v113;
      *(void *)(v28 + 496) = v113;
      *(_DWORD *)(v28 + 504) = v112;
      *(float *)(v28 + 508) = v111;
      ++*(_DWORD *)(v28 + 532);
      break;
    case 0:
      if (*(_DWORD *)(v28 + 56) && !*(_DWORD *)(v28 + 3888))
      {
        float v90 = sub_1BBB4E9DC((v87 - (double)*(uint64_t *)(v28 + 200)) / 1000.0);
        float v91 = *(float *)(v28 + 3772) + v90;
        int v92 = 0;
        float v93 = 100.0;
        if (v91 < 100.0) {
          float v93 = v91;
        }
        if (v91 >= 0.0) {
          float v94 = v93;
        }
        else {
          float v94 = 0.0;
        }
        *(float *)(v28 + 3772) = v94;
        float v95 = sub_1BBB4E9DC(v88 / 1000.0);
        float v96 = *(float *)(v28 + 3784) + v95;
        if (v96 >= 0.0)
        {
          int v92 = 1120403456;
          if (v96 < 100.0) {
            int v92 = LODWORD(v96);
          }
        }
        *(_DWORD *)(v28 + 3784) = v92;
        *(float *)(v28 + 3792) = (float)v38;
      }
      ++*(_DWORD *)(v28 + 528);
      break;
  }
  if (*(_DWORD *)(v28 + 3888)) {
    *(_DWORD *)(v28 + 3888) = 0;
  }
  *(_DWORD *)(v28 + 4016) = *(_DWORD *)(v28 + 116);
  ++*(_DWORD *)(v28 + 3812);
LABEL_131:
  if (*v7) {
    BOOL v114 = v10 == 0;
  }
  else {
    BOOL v114 = 1;
  }
  if (!v114)
  {
    uint64_t v115 = *(void *)(v6 + 2256);
    if (v115) {
      int v116 = (int *)(v115 + 3448);
    }
    else {
      int v116 = (int *)(a3 + 8);
    }
    int v117 = *v116;
    uint64_t v118 = *(void *)(a1 + 5416);
    int v119 = *(_DWORD *)(v6 + 2024);
    float v120 = *(float *)v6;
    *(unsigned char *)(*(void *)(a1 + 136) + 4896) = 0;
    if (v8)
    {
      int v121 = *(unsigned __int8 *)(v118 + 104);
      *(_DWORD *)(v118 + 316) -= v121;
      *(_DWORD *)(v118 + 328) -= v121;
      *(_DWORD *)(v118 + 324) = v121 + *(_DWORD *)(v118 + 324) - 1;
      *(float *)(v118 + 96) = v120;
    }
    else
    {
      long long v122 = *(_OWORD *)(v118 + 48);
      *(_OWORD *)(v118 + 64) = *(_OWORD *)(v118 + 32);
      *(_OWORD *)(v118 + 80) = v122;
      *(_DWORD *)(v118 + 32) = v119;
      *(_DWORD *)(v118 + 36) = v117;
      *(float *)(v118 + 40) = v120;
      *(unsigned char *)(v118 + 44) = 0;
      *(_OWORD *)(v118 + 48) = *(_OWORD *)(v118 + 224);
      *(unsigned char *)(v118 + 45) = *(unsigned char *)(v118 + 105);
      *(_WORD *)(v118 + 46) = *(_WORD *)(v118 + 106);
      if (!*(unsigned char *)(v118 + 104)) {
        ++*(_DWORD *)(v118 + 312);
      }
    }
    *(unsigned char *)(v118 + 113) = *(unsigned char *)(v118 + 112);
    *(unsigned char *)(v118 + 112) = 0;
  }
  *(_DWORD *)(a2 + 1364) = *(_DWORD *)v6;
  switch(*(unsigned char *)(a2 + 1368))
  {
    case 0:
    case 5:
      int v123 = (int)*(float *)v6;
      *(_DWORD *)(v6 + 1876) = v123;
      if (*(_DWORD *)(v6 + 1872) >= 0x34u) {
        goto LABEL_147;
      }
      break;
    case 1:
    case 6:
      int v123 = (int)*(float *)v6;
LABEL_147:
      *(_DWORD *)(v6 + 1872) = v123;
      break;
    default:
      int v126 = (int)*(float *)v6;
      *(_DWORD *)(v6 + 1880) = v126;
      if (*(_DWORD *)(v6 + 1876) >= 0x34u) {
        *(_DWORD *)(v6 + 1876) = v126;
      }
      break;
  }
  int v124 = *(_DWORD *)(a2 + 4964) + *(_DWORD *)(v6 + 2020) + *(_DWORD *)(a2 + 4960);
  if (!*(unsigned char *)(v6 + 2223)) {
    goto LABEL_167;
  }
  uint64_t v125 = *(void *)(a1 + 5400);
  if (!v125) {
    goto LABEL_167;
  }
  if (v8)
  {
    *(_DWORD *)(v125 + 48) += (int)(*(double *)v125 / *(double *)(v125 + 16));
  }
  else
  {
    if (*(_DWORD *)(v125 + 64) == 2) {
      *(_DWORD *)(v125 + 28) += v124;
    }
    *(_DWORD *)(v125 + 48) = 0;
  }
  uint64_t v127 = *(void *)(a1 + 5408);
  if (!v127 || (unsigned int v128 = *(unsigned __int8 *)(a2 + 1368), v128 > 9) || ((1 << v128) & 0x294) == 0)
  {
LABEL_167:
    if (!*(unsigned char *)(a1 + 1024) || !v10) {
      goto LABEL_190;
    }
    if (v8)
    {
LABEL_169:
      uint64_t v129 = *(void *)(a1 + 5400);
      float v130 = *(double *)v129 * (double)*(int *)(v129 + 36) / 1000.0;
      float v131 = (float)*(int *)(v129 + 28) / v130;
      *(unsigned char *)(v10 + 105) = *(unsigned char *)(v10 + 106);
      *(_WORD *)(v10 + 776) = 257;
      if (v131 > 2.0 || *(unsigned char *)(v10 + 728)) {
        ++*(_DWORD *)(v10 + 792);
      }
      *(int32x2_t *)(v10 + 116) = vadd_s32(*(int32x2_t *)(v10 + 116), (int32x2_t)0x100000001);
      int v132 = *(_DWORD *)(v10 + 808);
      if (v132 <= 0) {
        int v133 = 0;
      }
      else {
        int v133 = v132 - 1;
      }
      *(_DWORD *)(v10 + 808) = v133;
      int v134 = *(_DWORD *)(v10 + 172);
      if (v134 <= 0) {
        int v135 = 0;
      }
      else {
        int v135 = v134 - 1;
      }
      *(_DWORD *)(v10 + 172) = v135;
      if (*v7) {
        goto LABEL_193;
      }
      goto LABEL_195;
    }
    goto LABEL_184;
  }
  if (v8)
  {
    *(_DWORD *)(v127 + 48) += (int)(*(double *)v127 / *(double *)(v127 + 16));
    if (!*(unsigned char *)(a1 + 1024) || !v10)
    {
      if (!*v7 || !v10) {
        goto LABEL_195;
      }
LABEL_193:
      ++*(_DWORD *)(v10 + 796);
      goto LABEL_195;
    }
    goto LABEL_169;
  }
  if (*(_DWORD *)(v127 + 64) == 2) {
    *(_DWORD *)(v127 + 28) += v124;
  }
  *(_DWORD *)(v127 + 48) = 0;
  if (*(unsigned char *)(a1 + 1024) && v10)
  {
LABEL_184:
    uint64_t v136 = v10 + 4 * (*(_DWORD *)(a2 + 1276) % 10);
    *(_DWORD *)(v136 + 24) = *(_DWORD *)v6;
    *(_DWORD *)(v136 + 64) = v124;
    int v137 = *(_DWORD *)(v10 + 108);
    *(_DWORD *)(v10 + 108) = v137 + 1;
    *(_DWORD *)(v10 + 792) = 0;
    *(_WORD *)(v10 + 776) = 0;
    if (*(unsigned char *)(v10 + 801) && *(unsigned char *)(v10 + 802) && v137 >= 1) {
      *(_WORD *)(v10 + 801) = 0;
    }
    int32x2_t v138 = vsub_s32(*(int32x2_t *)(v9 + 228), *(int32x2_t *)(v9 + 236));
    *(int32x2_t *)(v9 + 228) = vmax_s32(v138, 0);
    if (v138.i32[0] <= 0) {
      *(unsigned char *)(v9 + 224) = 0;
    }
  }
LABEL_190:
  if (*v7 && v10)
  {
    if (!v8)
    {
      *(_DWORD *)(v10 + 796) = 0;
      goto LABEL_195;
    }
    goto LABEL_193;
  }
LABEL_195:
  uint64_t v139 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v139 + 211))
  {
    if (*(int *)(v10 + 808) >= 2 && !v8) {
      *(unsigned char *)(v139 + 211) = 0;
    }
  }
  else if (!v10)
  {
    goto LABEL_215;
  }
  if (*(unsigned char *)(v10 + 812))
  {
    uint64_t v140 = *(void *)(v6 + 2256);
    unsigned int v141 = *(_DWORD *)(v6 + 2020);
    float v142 = *(float *)v6;
    int v143 = *(_DWORD *)(a2 + 228);
    int v144 = *(_DWORD *)(a2 + 196);
    unint64_t v145 = *(void *)(v140 + 3424);
    if (v145)
    {
      double v146 = pow((double)(v144 * v143), 0.3) * 0.001 * ((double)*(unint64_t *)(v140 + 3432) / (double)v145);
      float v147 = *(float *)(v10 + 820);
      BOOL v148 = v146 <= (float)(v147 * 5.0) || v147 <= 0.0;
      if (!v148) {
        double v146 = (float)(v147 * 5.0);
      }
      *(double *)&uint64_t v149 = 64.0;
      if (v146 <= 64.0) {
        goto LABEL_211;
      }
    }
    else
    {
      float v147 = *(float *)(v10 + 820);
      *(double *)&uint64_t v149 = 32.0;
    }
    double v146 = *(double *)&v149;
LABEL_211:
    float v150 = v146 * 0.5 + v147 * 0.5;
    *(float *)(v10 + 820) = v150;
    unsigned int v151 = (int)v150;
    __int32 v152 = 5;
    if ((int)v150 >= 1)
    {
      do
      {
        unsigned int v153 = v152--;
        if (v153 < 2) {
          break;
        }
        BOOL v148 = v151 > 1;
        v151 >>= 1;
      }
      while (v148);
    }
    float v154 = (double)v141 * 0.5 * exp2((v142 + -12.0) / 6.0) / (double)(v144 * v143) + *(float *)(v10 + 816) * 0.5;
    v155.i32[0] = (int)(v154 / 0.3 + 0.5);
    v155.i32[1] = v152;
    *(float *)(v10 + 816) = v154;
    *(int32x2_t *)(v10 + 824) = vmax_s32(vmin_s32(v155, (int32x2_t)0x500000005), 0);
  }
LABEL_215:
  if (v8)
  {
    *(unsigned char *)(v6 + 2078) = *(unsigned char *)(a2 + 24) != 0;
    BOOL v156 = *(unsigned char *)(a2 + 1393) != 0;
  }
  else
  {
    BOOL v156 = 0;
    *(unsigned char *)(v6 + 2078) = 0;
  }
  *(unsigned char *)(v6 + 2079) = v156;
}

void sub_1BBB2BC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = a1 + 207748;
  uint64_t v8 = a1 + 205834;
  uint64_t v9 = *(void *)(a1 + 207760);
  if (!v9)
  {
LABEL_7:
    if (!a3) {
      return;
    }
    goto LABEL_8;
  }
  *(_DWORD *)(v9 + 12) += *(_DWORD *)(*(void *)(a1 + 128) + 8);
  if ((*(unsigned char *)(*(void *)(a1 + 205840) + 1368) - 2) > 7u) {
    int v11 = 0;
  }
  else {
    int v11 = dword_1BBB8BE34[(*(unsigned char *)(*(void *)(a1 + 205840) + 1368) - 2)];
  }
  *(_DWORD *)(*(void *)(a1 + 207760) + 4) += v11;
  uint64_t v12 = *(void *)(a1 + 207760);
  if (*(unsigned char *)(a2 + 17))
  {
    ++*(unsigned char *)(v12 + 389);
    goto LABEL_7;
  }
  ++*(_DWORD *)v12;
  *(_DWORD *)(*(void *)(a1 + 207760) + 20) = *(_DWORD *)(a2 + 19160);
  if (*(unsigned char *)(a1 + 1057))
  {
    if (*(unsigned char *)(a1 + 1057) == 2)
    {
      unsigned int v28 = *(unsigned __int16 *)(a2 + 19124);
      unsigned int v29 = *(unsigned __int16 *)(a2 + 19126);
    }
    else
    {
      unsigned int v28 = *(unsigned __int16 *)(a2 + 19112);
      unsigned int v29 = *(unsigned __int16 *)(a2 + 19114);
    }
  }
  else
  {
    unsigned int v28 = *(_DWORD *)(a2 + 228);
    unsigned int v29 = *(_DWORD *)(a2 + 196);
  }
  uint64_t v30 = *(void *)(a1 + 5392);
  if (v30) {
    double v31 = *(double *)(v30 + 136);
  }
  else {
    double v31 = *(float *)(a2 + 4940);
  }
  uint64_t v32 = *(void *)(a1 + 5400);
  if (v32) {
    unsigned int v33 = (int)((double)*(int *)(v32 + 28) * 1000.0 / *(double *)v32);
  }
  else {
    unsigned int v33 = 0;
  }
  int v128 = *(unsigned __int8 *)(a2 + 18);
  unsigned int v130 = v33;
  unsigned int v131 = v28;
  if (*(_DWORD *)v7 || *(_DWORD *)(a1 + 207752))
  {
    uint64_t v126 = a4;
    unsigned int v34 = v28;
    unsigned int v35 = v29;
    if (*(unsigned char *)(a1 + 205933))
    {
      unsigned int v34 = *(_DWORD *)(a2 + 224);
      unsigned int v35 = *(_DWORD *)(a2 + 192);
    }
    if (!*(_DWORD *)v7) {
      goto LABEL_65;
    }
    uint64_t v36 = *(void *)(a1 + 205848);
    double v37 = *(double **)(a1 + 207760);
    int v38 = &xmmword_1BBB70000;
    double v39 = 99.0;
    int v123 = *(unsigned __int8 *)(a2 + 1368);
    if ((int)v35 < 1)
    {
      int v41 = 0;
    }
    else
    {
      uint64_t v40 = 0;
      int v41 = 0;
      int v42 = *(unsigned __int8 **)(a2 + 128);
      signed int v43 = *(unsigned __int8 **)(v36 + 128);
      uint64_t v44 = *(int *)(a2 + 232);
      do
      {
        if ((int)v34 >= 1)
        {
          unsigned int v45 = v42;
          int v46 = v43;
          uint64_t v47 = v34;
          do
          {
            int v49 = *v45++;
            int v48 = v49;
            int v50 = *v46++;
            v41 += (v48 - v50) * (v48 - v50);
            --v47;
          }
          while (v47);
        }
        ++v40;
        v43 += v44;
        v42 += v44;
      }
      while (v40 != v35);
      if (v41 >= 1)
      {
        uint64_t v124 = a1 + 205834;
        uint64_t v52 = *(void *)(a1 + 205848);
        long double v53 = log10((double)(int)(v35 * v34) * 65025.0 / (double)v41);
        double v54 = sub_1BBB4E9DC(v53 * 10.0);
        uint64_t v36 = v52;
        uint64_t v5 = a5;
        uint64_t v8 = v124;
        int v38 = &xmmword_1BBB70000;
        double v55 = v54;
        goto LABEL_45;
      }
    }
    double v55 = 99.0;
LABEL_45:
    unsigned int v125 = v29;
    double v56 = 0.0;
    if (v35 < 2)
    {
      unsigned int v57 = 0;
      double v58 = 99.0;
      goto LABEL_62;
    }
    uint64_t v122 = v5;
    uint64_t v59 = 0;
    unsigned int v60 = 0;
    unsigned int v57 = 0;
    uint64_t v61 = *(void *)(v36 + 136);
    LODWORD(v62) = v34 >> 1;
    LODWORD(v63) = v35 >> 1;
    double v64 = (double)(int)((v35 >> 1) * (v34 >> 1));
    if (v34 >> 1 <= 1) {
      uint64_t v62 = 1;
    }
    else {
      uint64_t v62 = v62;
    }
    if (v63 <= 1) {
      uint64_t v63 = 1;
    }
    else {
      uint64_t v63 = v63;
    }
    uint64_t v65 = *(int *)(a2 + 248);
    uint64_t v66 = 0x100000000;
    float v67 = *(unsigned __int8 **)(a2 + 136);
    float v68 = *(unsigned __int8 **)(v36 + 136);
    do
    {
      if (v34 >= 2)
      {
        float v69 = v67;
        float v70 = v68;
        uint64_t v71 = v66;
        uint64_t v72 = v62;
        do
        {
          int v74 = *v69;
          v69 += 2;
          int v73 = v74;
          int v75 = *v70;
          v70 += 2;
          int v76 = *(unsigned __int8 *)(*(void *)(a2 + 136) + (v71 >> 32)) - *(unsigned __int8 *)(v61 + (v71 >> 32));
          v57 += (v73 - v75) * (v73 - v75);
          v60 += v76 * v76;
          v71 += 0x200000000;
          --v72;
        }
        while (v72);
      }
      ++v59;
      v66 += v65 << 32;
      v68 += v65;
      v67 += v65;
    }
    while (v59 != v63);
    double v58 = *((double *)v38 + 348);
    if (v57)
    {
      long double v77 = log10(v64 * 65025.0 / (double)v57);
      double v39 = sub_1BBB4E9DC(v77 * 10.0);
      if (!v60)
      {
LABEL_61:
        uint64_t v5 = v122;
LABEL_62:
        *(double *)(v5 + 152) = sub_1BBB4E9DC((v39 + v55 * 4.0 + v58) / 6.0);
        double v79 = v37[7];
        double v80 = v37[6] + (double)v41;
        v37[5] = v39;
        v37[6] = v80;
        double v81 = v79 + (double)v57;
        double v82 = v37[9];
        double v83 = v37[8] + v56;
        v37[3] = v55;
        v37[4] = v58;
        v37[7] = v81;
        v37[8] = v83;
        double v84 = v39 + v37[10];
        double v85 = v58 + v37[11];
        v37[9] = sub_1BBB4E9DC(v55 + v82);
        v37[10] = sub_1BBB4E9DC(v84);
        v37[11] = sub_1BBB4E9DC(v85);
        unsigned int v29 = v125;
        switch(v123)
        {
          case 0:
          case 5:
            v37[14] = sub_1BBB4E9DC(v55 + v37[14]);
            if (v123 == 1) {
              goto LABEL_64;
            }
            break;
          case 1:
          case 6:
LABEL_64:
            v37[16] = sub_1BBB4E9DC(v55 + v37[16]);
            break;
          default:
            break;
        }
LABEL_65:
        float v86 = *(double *)(*(void *)(v7 + 12) + 24);
        *(float *)(v5 + 160) = v86;
        float v87 = *(double *)(*(void *)(v7 + 12) + 40);
        *(float *)(v5 + 164) = v87;
        float v88 = *(double *)(*(void *)(v7 + 12) + 32);
        *(float *)(v5 + 168) = v88;
        unsigned int v33 = v130;
        unsigned int v28 = v131;
        a4 = v126;
        goto LABEL_66;
      }
    }
    else
    {
      double v39 = *((double *)v38 + 348);
      if (!v60) {
        goto LABEL_61;
      }
    }
    double v56 = (double)v60;
    long double v78 = log10(v64 * 65025.0 / (double)v60);
    double v58 = sub_1BBB4E9DC(v78 * 10.0);
    goto LABEL_61;
  }
LABEL_66:
  uint64_t v89 = *(void *)(v7 + 12);
  unsigned int v90 = *(unsigned __int8 *)(a2 + 1368);
  uint64_t v91 = *(void *)(a1 + 144);
  if (v91) {
    BOOL v92 = *(unsigned __int8 *)(v91 + 708) != 0;
  }
  else {
    BOOL v92 = 0;
  }
  int v93 = *(_DWORD *)(a2 + 1332);
  int v94 = *(_DWORD *)(a2 + 1336);
  int v95 = *(_DWORD *)(a2 + 1276);
  float v96 = *(float *)(v8 + 30);
  int v97 = 8 * *(_DWORD *)(a4 + 8);
  int v133 = v97;
  *(_DWORD *)(v89 + 96) += v97;
  if (v90 <= 9)
  {
    if (((1 << v90) & 0x294) != 0)
    {
LABEL_77:
      *(_DWORD *)(v89 + 100) += v97;
      goto LABEL_78;
    }
    if (((1 << v90) & 0x21) != 0)
    {
      *(_DWORD *)(v89 + 120) += v97;
      ++*(_DWORD *)(v89 + 104);
    }
    else
    {
      if (((1 << v90) & 0x42) == 0) {
        goto LABEL_78;
      }
      *(_DWORD *)(v89 + 136) += v97;
      ++*(_DWORD *)(v89 + 124);
    }
    if (v90 == 4 || v90 == 2) {
      goto LABEL_77;
    }
  }
LABEL_78:
  *(_DWORD *)(v89 + 232) = 0;
  *(double *)(v89 + 240) = v31;
  *(double *)(v89 + 248) = v31;
  if (v95 >= 1 && v94)
  {
    unsigned int v98 = v29;
    uint64_t v99 = v5;
    int v100 = v93 - *(_DWORD *)(v89 + 176);
    int v132 = v100;
    BOOL v127 = v92;
    if (v100 > v94 && *(int *)(v89 + 16) >= 10)
    {
      unint64_t v101 = *(void *)(v89 + 296) + *(void *)(v89 + 288) - 1;
      int v100 = *(_DWORD *)(*(void *)(*(void *)(v89 + 264) + ((v101 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v101 & 0x3FF));
      int v132 = v100;
    }
    sub_1BB9C8B88((void *)(v89 + 184), &v133);
    sub_1BB9C8B88((void *)(v89 + 256), &v132);
    int v102 = *(_DWORD *)(v89 + 180) + v100;
    *(_DWORD *)(v89 + 180) = v102;
    unint64_t v103 = *(void *)(v89 + 216);
    uint64_t v104 = *(void *)(v89 + 192);
    uint64_t v105 = *(void *)(v89 + 200);
    int v106 = (int **)(v104 + 8 * (v103 >> 10));
    if (v105 == v104) {
      float v107 = 0;
    }
    else {
      float v107 = &(*v106)[*(void *)(v89 + 216) & 0x3FFLL];
    }
    uint64_t v5 = v99;
    unsigned int v29 = v98;
    uint64_t v108 = *(void *)(v89 + 224);
    double v109 = (double)v102 / (double)v94;
LABEL_87:
    float v110 = v107 - 1024;
    while (1)
    {
      uint64_t v111 = v105 == v104 ? 0 : *(void *)(v104 + 8 * ((v103 + v108) >> 10)) + 4 * ((v103 + v108) & 0x3FF);
      if (v107 == (int *)v111) {
        break;
      }
      int v112 = *v107++;
      *(_DWORD *)(v89 + 232) += v112;
      if (*v106 == ++v110)
      {
        uint64_t v113 = v106[1];
        ++v106;
        float v107 = v113;
        goto LABEL_87;
      }
    }
    *(_DWORD *)(v89 + 232) = (int)((double)*(int *)(v89 + 232) / v109);
    *(double *)(v89 + 248) = (double)*(unint64_t *)(v89 + 296) / v109;
    if (v102 > v94)
    {
      *(_DWORD *)(v89 + 180) = v102
                             - *(_DWORD *)(*(void *)(*(void *)(v89 + 264)
                                                     + ((*(void *)(v89 + 288) >> 7) & 0x1FFFFFFFFFFFFF8))
                                         + 4 * (*(void *)(v89 + 288) & 0x3FFLL));
      *(void *)(v89 + 216) = v103 + 1;
      *(void *)(v89 + 224) = v108 - 1;
      sub_1BB9C8C10(v89 + 184);
      *(int64x2_t *)(v89 + 288) = vaddq_s64(*(int64x2_t *)(v89 + 288), (int64x2_t)xmmword_1BBB6F610);
      sub_1BB9C8C10(v89 + 256);
    }
    unsigned int v33 = v130;
    unsigned int v28 = v131;
    BOOL v92 = v127;
  }
  *(_DWORD *)(v89 + 176) = v93;
  int v114 = *(_DWORD *)v89;
  if (*(_DWORD *)v89 == 1)
  {
    *(void *)(v89 + 160) = 0x404E000000000000;
    *(_DWORD *)(v89 + 312) = 1112276992;
    *(_DWORD *)(v89 + 324) = 0x40000000;
    *(void *)(v89 + 344) = 0x4000000040000000;
    *(_DWORD *)(v89 + 372) = 0x40000000;
    double v115 = 60.0;
  }
  else
  {
    double v115 = *(double *)(v89 + 160);
  }
  *(double *)(v89 + 144) = *(double *)(v89 + 144) + v31;
  if (v115 > v31) {
    *(double *)(v89 + 160) = v31;
  }
  if (*(double *)(v89 + 168) < v31) {
    *(double *)(v89 + 168) = v31;
  }
  *(double *)(v89 + 304) = *(double *)(v89 + 304) + v96;
  if (*(float *)(v89 + 312) > v96) {
    *(float *)(v89 + 312) = v96;
  }
  if (*(float *)(v89 + 316) < v96) {
    *(float *)(v89 + 316) = v96;
  }
  *(_DWORD *)(v89 + 320) += v33;
  if (*(_DWORD *)(v89 + 324) > v33) {
    *(_DWORD *)(v89 + 324) = v33;
  }
  if (*(_DWORD *)(v89 + 328) < v33) {
    *(_DWORD *)(v89 + 328) = v33;
  }
  if (v114 >= 11 && *(_DWORD *)(v89 + 332) < v33) {
    *(_DWORD *)(v89 + 332) = v33;
  }
  *(_DWORD *)(v89 + 336) += v28;
  if (*(_DWORD *)(v89 + 344) > v28) {
    *(_DWORD *)(v89 + 344) = v28;
  }
  if (*(_DWORD *)(v89 + 352) < v28) {
    *(_DWORD *)(v89 + 352) = v28;
  }
  if (*(_DWORD *)(v89 + 360) == v28)
  {
    int v116 = *(_DWORD *)(v89 + 364) + 1;
  }
  else
  {
    ++*(_DWORD *)(v89 + 368);
    if (v114 >= 2)
    {
      unsigned int v117 = *(_DWORD *)(v89 + 364);
      if (v117 < *(_DWORD *)(v89 + 372)) {
        *(_DWORD *)(v89 + 372) = v117;
      }
    }
    int v116 = 1;
  }
  *(_DWORD *)(v89 + 364) = v116;
  *(_DWORD *)(v89 + 360) = v28;
  *(_DWORD *)(v89 + 340) += v29;
  if (*(_DWORD *)(v89 + 348) > v29) {
    *(_DWORD *)(v89 + 348) = v29;
  }
  if (*(_DWORD *)(v89 + 356) < v29) {
    *(_DWORD *)(v89 + 356) = v29;
  }
  if (v128)
  {
    ++*(_DWORD *)(v89 + 376);
    ++*(unsigned char *)(v89 + 388);
    if (v92)
    {
LABEL_131:
      int v118 = *(_DWORD *)(v89 + 16) + 1;
      goto LABEL_136;
    }
  }
  else
  {
    int v119 = *(unsigned __int8 *)(v89 + 388);
    if (*(_DWORD *)(v89 + 380) < v119) {
      *(_DWORD *)(v89 + 380) = v119;
    }
    *(unsigned char *)(v89 + 388) = 0;
    if (v92) {
      goto LABEL_131;
    }
  }
  int v118 = 0;
LABEL_136:
  *(_DWORD *)(v89 + 16) = v118;
  if (*(_DWORD *)v7) {
    fflush((FILE *)*MEMORY[0x1E4F143D8]);
  }
  uint64_t v120 = *(void *)(v7 + 12);
  int v121 = *(unsigned __int8 *)(v120 + 389);
  if (*(_DWORD *)(v120 + 384) < v121)
  {
    *(_DWORD *)(v120 + 384) = v121;
    uint64_t v120 = *(void *)(v7 + 12);
  }
  *(unsigned char *)(v120 + 389) = 0;
  if (a3)
  {
LABEL_8:
    if (*(unsigned char *)v8)
    {
      uint64_t v13 = *(unsigned int *)(a2 + 196);
      double v14 = 99.0;
      if ((int)v13 >= 1)
      {
        uint64_t v15 = 0;
        int v16 = 0;
        int v17 = *(unsigned __int8 **)(a2 + 128);
        int v18 = *(unsigned __int8 **)(*(void *)(v8 + 14) + 128);
        int v19 = *(_DWORD *)(a2 + 228);
        uint64_t v20 = *(int *)(a2 + 232);
        do
        {
          if (v19 >= 1)
          {
            double v21 = v17;
            double v22 = v18;
            uint64_t v23 = *(unsigned int *)(a2 + 228);
            do
            {
              int v25 = *v21++;
              int v24 = v25;
              int v26 = *v22++;
              v16 += (v24 - v26) * (v24 - v26);
              --v23;
            }
            while (v23);
          }
          ++v15;
          v18 += v20;
          v17 += v20;
        }
        while (v15 != v13);
        if (v16 >= 1)
        {
          long double v27 = log10((double)((int)v13 * v19) * 65025.0 / (double)v16);
          double v14 = sub_1BBB4E9DC(v27 * 10.0);
        }
      }
      *(double *)(v5 + 176) = v14;
    }
  }
}

float sub_1BBB2C660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = (float *)(a1 + 205864);
  *(_DWORD *)(a3 + 92) = *(_DWORD *)(a4 + 40);
  *(unsigned char *)(a3 + 2) = *(unsigned char *)(a4 + 1393);
  *(unsigned char *)(a3 + 3) = *(unsigned char *)(a4 + 1392);
  *(unsigned char *)(a3 + 5) = *(unsigned char *)(a4 + 1394);
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a4 + 1368);
  int v5 = *(unsigned __int8 *)(a4 + 1368);
  if (v5 != 7 && v5 != 2) {
    goto LABEL_5;
  }
  char v6 = *(unsigned char *)(a4 + 1394);
  if (!v6) {
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a4 + 1392)) {
    char v6 = *(unsigned char *)(a4 + 1403) == 0;
  }
  else {
LABEL_5:
  }
    char v6 = 0;
LABEL_7:
  *(unsigned char *)(a3 + 4) = v6;
  if (*(unsigned char *)(a4 + 1393))
  {
    char v7 = 0;
  }
  else
  {
    char v7 = *(unsigned char *)(a4 + 1394);
    if (v7) {
      char v7 = *(unsigned char *)(a1 + 208076) != 0;
    }
  }
  *(unsigned char *)(a3 + 6) = v7;
  *(unsigned char *)a3 = *(unsigned char *)(a4 + 5000);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 1328);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 1332);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(a4 + 1288);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 1276);
  float result = *v4;
  *(float *)(a3 + 12) = *v4;
  if (*(unsigned char *)(*(void *)(a1 + 136) + 577) == 1)
  {
    *(unsigned char *)(a3 + 7) = *(unsigned char *)(a4 + 1356);
    if (*(unsigned char *)(a4 + 24)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = *(unsigned char *)(a4 + 1393) != 0;
    }
    *(unsigned char *)(a3 + 8) = v9;
    if (*(_DWORD *)(a4 + 4928) > 0x12CC7u || (uint64_t v10 = *(unsigned char **)(a1 + 5392)) == 0 || *v10 == 3)
    {
      if (*(unsigned char *)(a4 + 1393) || (int v18 = *(unsigned __int8 *)(a4 + 26), v18 == 3))
      {
        __int16 v11 = 768;
LABEL_20:
        *(_WORD *)(a3 + 9) = v11;
        *(unsigned char *)(a3 + 11) = 1;
LABEL_21:
        if (*(unsigned char *)(a1 + 1024)) {
          *(unsigned char *)(a3 + 96) = **(unsigned char **)(a1 + 5392) == 3;
        }
        *(_DWORD *)(a3 + 100) = *(unsigned __int16 *)(a4 + 19112);
        *(_DWORD *)(a3 + 104) = *(unsigned __int16 *)(a4 + 19114);
        goto LABEL_24;
      }
      if (v18 == 2)
      {
        __int16 v11 = 512;
        goto LABEL_20;
      }
      if (v18 == 1 || v9)
      {
        __int16 v11 = 256;
        goto LABEL_20;
      }
    }
    *(_WORD *)(a3 + 9) = 255;
    *(unsigned char *)(a3 + 11) = 0;
    goto LABEL_21;
  }
LABEL_24:
  if (!*(unsigned char *)(a1 + 205936))
  {
    *(_DWORD *)(a3 + 32) = 8 * *(_DWORD *)(a2 + 8);
    *(_WORD *)(a3 + 16) = *(_WORD *)(a4 + 4728);
    unsigned int v12 = *(_DWORD *)(a4 + 4808);
    if (v12)
    {
      int v13 = 0;
      double v14 = (unsigned __int8 *)(*(void *)(a4 + 4920) + 63);
      uint64_t v15 = *(unsigned int *)(a4 + 4808);
      do
      {
        int v16 = *v14;
        v14 += 216;
        if (v16) {
          ++v13;
        }
        --v15;
      }
      while (v15);
      int v17 = 100 * v13;
    }
    else
    {
      int v17 = 0;
    }
    *(_WORD *)(a3 + 88) = (v17 + (v12 >> 1)) / v12;
    unsigned int v19 = *(_DWORD *)(a4 + 4808);
    if (v19)
    {
      int v20 = 0;
      double v21 = (unsigned __int8 *)(*(void *)(a4 + 4920) + 58);
      uint64_t v22 = *(unsigned int *)(a4 + 4808);
      do
      {
        int v23 = *v21;
        v21 += 216;
        if (v23) {
          ++v20;
        }
        --v22;
      }
      while (v22);
      int v24 = 100 * v20;
    }
    else
    {
      int v24 = 0;
    }
    *(_WORD *)(a3 + 90) = (v24 + (v19 >> 1)) / v19;
    float result = *(float *)(a4 + 4940);
    *(float *)(a3 + 48) = result;
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(a4 + 4928);
    *(_WORD *)(a3 + 18) = *(_WORD *)(a4 + 4832);
    *(_WORD *)(a3 + 20) = *(_WORD *)(a4 + 4838);
  }
  return result;
}

void *sub_1BBB2C8EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 17))
  {
    while (1)
    {
      float result = *(void **)(a2 + 24544);
      if (!result) {
        break;
      }
      *(void *)(a2 + 24544) = result[3];
      free(result);
    }
  }
  else
  {
    *(_WORD *)(a1 + 1398) = 257;
    float result = (void *)sub_1BBB0FB64(a2);
    if (result) {
      return (void *)CFLog();
    }
  }
  if (a4 == 1) {
    *(unsigned char *)(a3 + 7) = *(unsigned char *)(a1 + 1356);
  }
  return result;
}

unsigned char *sub_1BBB2C984(unsigned char *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5 = *(void *)(a2 + 205968);
  if (v5)
  {
    if (a4 <= 7)
    {
      if (*(_DWORD *)(v5 + 100))
      {
        unsigned int v6 = *(_DWORD *)(v5 + 60);
        unsigned int v7 = *(_DWORD *)(v5 + 92);
        if (v7 > v6)
        {
          unsigned int v8 = *(_DWORD *)(v5 + 4 * a4 + 136);
          if (v8)
          {
            uint64_t v9 = a4;
            uint64_t v10 = *(void *)(v5 + 80);
            int v11 = *(unsigned __int8 *)(v5 + 96);
            unsigned int v12 = *(_DWORD *)(v5 + 60);
            if (*(unsigned char *)(v5 + 96)) {
              unsigned int v12 = v6 % v7;
            }
            int v13 = 0;
            int v14 = *(_DWORD *)(v10 + 20 * v12 + 12);
            unsigned int v15 = *(_DWORD *)(v5 + 60);
            do
            {
              unsigned int v16 = v15;
              if (*(unsigned char *)(v5 + 96)) {
                unsigned int v16 = v15 % v7;
              }
              uint64_t v17 = v10 + 20 * v16;
              int v19 = *(_DWORD *)(v17 + 12);
              int v18 = *(_DWORD *)(v17 + 16);
              unsigned int v20 = v14 - v19;
              v13 += v18;
              BOOL v21 = v15-- != 0;
            }
            while (v21 && v8 > v20);
            int v22 = v8 >= v20 ? 0 : v18;
            int v23 = v22 - v13;
            if (v23)
            {
              int v24 = *(_DWORD *)(v5 + 4 * v9 + 104);
              if (v11) {
                v6 %= v7;
              }
              if (v23 + v24 + *(_DWORD *)(v10 + 20 * v6 + 16) < (8 * *(_DWORD *)(a3 + 8)))
              {
                if (*(float *)(a2 + 205864) < 51.0) {
                  goto LABEL_27;
                }
                if (a5)
                {
                  int v25 = (unsigned char *)(*(void *)(a2 + 205840) + 5001);
                  if (!*v25)
                  {
                    *int v25 = 1;
LABEL_27:
                    *float result = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BBB2CAD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v7 = (float *)(a2 + 19112);
  uint64_t v8 = a1 + 205864;
  float v9 = *(float *)(a1 + 205864);
  if (v9 <= (float)(int)*(double *)(*(void *)(a1 + 152) + 384)) {
    int v10 = (int)*(double *)(*(void *)(a1 + 152) + 384);
  }
  else {
    int v10 = (int)v9;
  }
  *(_DWORD *)(a2 + 19132) = v10 < 37;
  if (*(unsigned char *)(a1 + 1623))
  {
    int v11 = *(_DWORD *)(a2 + 1372) - (a3 + (*(_DWORD *)(a1 + 207884) >> 3));
    int v12 = v11 & ~(v11 >> 31);
  }
  else
  {
    int v12 = 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 136) + 2698))
  {
    if (*(unsigned char *)(a1 + 205933))
    {
      int v13 = *(_DWORD *)(*(void *)(a1 + 208120) + 3448);
    }
    else
    {
      uint64_t v14 = *(unsigned int *)(a1 + 208060);
      if (v14)
      {
        int v13 = 0;
        unsigned int v15 = (int *)(a1 + 207768);
        do
        {
          int v16 = *v15++;
          v13 += v16;
          --v14;
        }
        while (v14);
      }
      else
      {
        int v13 = 0;
      }
    }
    int v17 = *(_DWORD *)(a2 + 228);
    int v18 = *(_DWORD *)(a2 + 196);
    int v19 = *(unsigned __int16 *)(a2 + 19114) * *(unsigned __int16 *)v7;
    float v20 = *(float *)v8;
    double v21 = exp2((float)((float)(*(float *)v8 + -4.0) / 6.0)) * (double)(3 * v13) / (double)v19;
    float v22 = 2.0;
    if (v21 >= 2.0)
    {
      float v22 = 5.0;
      if (v21 <= 5.0) {
        float v22 = v21;
      }
    }
    if (*(_DWORD *)(a2 + 1276))
    {
      float v23 = pow((double)v19, 0.3)
          * 0.00025
          * ((double)*(unint64_t *)(*(void *)(v8 + 2256) + 3432)
           / (double)*(unint64_t *)(*(void *)(v8 + 2256) + 3424))
          + 1.5;
      float v24 = 5.0;
      if (v23 <= 5.0) {
        float v24 = v23;
      }
      if (v23 >= 2.0) {
        float v25 = v24;
      }
      else {
        float v25 = 2.0;
      }
      float v26 = *(double *)(*(void *)(v8 + 1896) + 248);
      float v100 = v26;
    }
    else
    {
      float v100 = *(float *)(a2 + 4940);
      float v25 = 5.0;
    }
    double v99 = pow((double)(v18 * v17 / 76800), 0.2);
    double v27 = pow(v22, 0.4);
    float v28 = v20 + -34.0;
    if ((float)(v20 + -34.0) <= 0.0) {
      float v28 = 0.0;
    }
    double v29 = v28;
    if ((float)(v20 + -32.0) / 36.0 + 1.0 >= 1.0) {
      double v30 = (float)(v20 + -32.0) / 36.0 + 1.0;
    }
    else {
      double v30 = 1.0;
    }
    float v31 = (float)(v20 + -25.0) * -0.12;
    float v32 = expf(v31);
    float v33 = (1.0 - 1.0 / pow((float)((float)(v22 * v32) + 1.0), 1.5)) * 27.0;
    float v34 = v33 + 10.0;
    long double v35 = pow(v30, 1.6) * 10.0;
    float v36 = v35 * log10f((float)v19 / (float)(v18 * v17));
    float v37 = v34 + v36;
    float v38 = exp(v29 / (v27 * 1.5)) * -0.24;
    if (v38 <= 0.0) {
      float v39 = v38;
    }
    else {
      float v39 = 0.0;
    }
    if (v38 >= -10.0) {
      float v40 = v39;
    }
    else {
      float v40 = -10.0;
    }
    float v41 = v37 + v40;
    float v42 = v99;
    float v43 = (float)(1.0 - expf(-v42)) * v41;
    if (v43 <= 31.0) {
      float v44 = v43;
    }
    else {
      float v44 = 31.0;
    }
    if (v43 >= 0.0) {
      float v45 = v44;
    }
    else {
      float v45 = 0.0;
    }
    float v46 = v45 * (float)(1.0 - expf((float)(v100 / -60.0) * v25));
    float v47 = v46 / (float)(1.0 - expf(-v25));
    if (v47 <= 31.0) {
      float v48 = v47;
    }
    else {
      float v48 = 31.0;
    }
    if (v47 >= 0.0) {
      float v49 = v48;
    }
    else {
      float v49 = 0.0;
    }
    v7[12] = v49;
  }
  unsigned int v50 = *((unsigned __int16 *)v7 + 4);
  unsigned int v51 = *((unsigned __int16 *)v7 + 5);
  if (!*(unsigned char *)(a1 + 180))
  {
    uint64_t v52 = *(void *)(a1 + 5392);
    if (v52)
    {
      uint64_t v53 = *(void *)(v52 + 784);
      if (*(__int16 *)(v53 + 4) == *(unsigned __int16 *)v7 && *(__int16 *)(v53 + 6) == *((unsigned __int16 *)v7 + 1))
      {
        unsigned int v50 = *(_DWORD *)(a2 + 224);
        unsigned int v51 = *(_DWORD *)(a2 + 192);
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 144) + 719) && *(double *)(a2 + 19400) > 0.0 && *(double *)(a2 + 19408) > 0.0) {
    char v54 = *(unsigned char *)(a1 + 5076);
  }
  else {
    char v54 = 0;
  }
  uint64_t v55 = 0;
  signed int v56 = 0;
  BOOL v57 = v10 < 37;
  unsigned __int8 v58 = *(unsigned char *)(a1 + 1618);
  char v59 = *(unsigned char *)(a1 + 1620);
  char v60 = *(unsigned char *)(a1 + 1621);
  char v61 = *(unsigned char *)(a1 + 1627);
  unsigned int v62 = *(_DWORD *)(a2 + 1376);
  unsigned int v63 = *(_DWORD *)(a2 + 1380);
  int v64 = *(_DWORD *)(a2 + 1384);
  int v65 = *(_DWORD *)(a2 + 1388);
  if (v58) {
    char v66 = 0;
  }
  else {
    char v66 = *(unsigned char *)(a1 + 1619);
  }
  char v67 = *(unsigned char *)(a1 + 1600);
  if (!(v63 | v62 | v64 | v65)) {
    char v61 = 0;
  }
  byte_1E9F80DD1 = v54;
  byte_1E9F80BC9 = v66;
  byte_1E9F80C4B = v58;
  byte_1E9F80CCD = v59;
  byte_1E9F80D4F = v61;
  byte_1E9F80E53 = v60;
  byte_1E9F80ED5 = v67;
  unsigned int v68 = (v62 & 0xF) + v64 + 15;
  unsigned int v69 = (v63 & 0xF) + v65 + 15;
  unsigned int v70 = v51 >> 3;
  unsigned int v71 = v50 >> 3;
  unsigned int v72 = v63 >> 4;
  unsigned int v73 = v62 >> 4;
  unsigned int v74 = v69 >> 4;
  unsigned int v75 = v68 >> 4;
  do
  {
    unsigned int v76 = aRvra_0[130 * v55 + 129];
    if (aRvra_0[130 * v55 + 129])
    {
      uint64_t v77 = 0;
      unsigned int v78 = 0;
      double v79 = &byte_1E9F80BC9;
      do
      {
        if (v55 != v77 && *v79 && *v79 < v76) {
          v78 += *(v79 - 1);
        }
        ++v77;
        v79 += 130;
      }
      while (v77 != 7);
      if (v56 <= (int)v76) {
        signed int v56 = aRvra_0[130 * v55 + 129];
      }
      switch((int)v55)
      {
        case 0:
        case 1:
          *(unsigned char *)(a4 + v78) = v71;
          *(unsigned char *)(a4 + v78 + 1) = v70;
          break;
        case 2:
          *(unsigned char *)(a4 + v78) = v57;
          break;
        case 3:
          *(unsigned char *)(a4 + v78) = v75;
          *(unsigned char *)(a4 + v78 + 1) = v74;
          *(unsigned char *)(a4 + v78 + 2) = v73;
          *(unsigned char *)(a4 + v78 + 3) = v72;
          break;
        case 4:
          *(unsigned char *)(a4 + v78) = (int)(*(double *)(a2 + 19384) * 255.0 + 0.5);
          *(unsigned char *)(a4 + v78 + 1) = (int)(*(double *)(a2 + 19392) * 255.0 + 0.5);
          *(unsigned char *)(a4 + v78 + 2) = (int)(*(double *)(a2 + 19400) * 255.0 + 0.5);
          *(unsigned char *)(a4 + v78 + 3) = (int)(*(double *)(a2 + 19408) * 255.0 + 0.5);
          break;
        case 5:
          *(unsigned char *)(a4 + v78) = 0;
          break;
        case 6:
          *(void *)(a1 + 1608) = a4 + v78;
          break;
        default:
          break;
      }
    }
    ++v55;
  }
  while (v55 != 7);
  uint64_t v81 = 0;
  uint64_t result = 0;
  do
  {
    if (aRvra_0[v81 + 129]) {
      uint64_t result = result + aRvra_0[v81 + 128];
    }
    v81 += 130;
  }
  while (v81 != 910);
  uint64_t v83 = (v56 - 1) / 7
      + ((v12 + ~((v56 - 1) / 7) - result) & ~((v12 + ~((v56 - 1) / 7) - (int)result) >> 31))
      + 1;
  if ((int)v83 >= 1)
  {
    unsigned int v84 = result;
    uint64_t v85 = v83;
    do
    {
      *(unsigned char *)(a4 + v84++) = 0x80;
      --v85;
    }
    while (v85);
    *(unsigned char *)(a4 + result) = 0;
    if (v66)
    {
      unsigned __int8 v86 = v66 - 1;
      unsigned int v87 = (((v86 - ((unsigned __int16)(37 * v86) >> 8)) >> 1) + ((37 * v86) >> 8)) >> 2;
      *(unsigned char *)(a4 + result + v83 + ~v87) |= 1 << (-7 * v87 + v86);
    }
    if (v58)
    {
      unsigned int v88 = result + v83 + ~((v58 - 1) / 7);
      *(unsigned char *)(a4 + v88) |= 1 << ((v58 - 1) % 7);
    }
    if (v59)
    {
      unsigned __int8 v89 = v59 - 1;
      unsigned int v90 = (((v89 - ((unsigned __int16)(37 * v89) >> 8)) >> 1) + ((37 * v89) >> 8)) >> 2;
      *(unsigned char *)(a4 + result + v83 + ~v90) |= 1 << (-7 * v90 + v89);
    }
    if (v61)
    {
      unsigned __int8 v91 = v61 - 1;
      unsigned int v92 = (((v91 - ((unsigned __int16)(37 * v91) >> 8)) >> 1) + ((37 * v91) >> 8)) >> 2;
      *(unsigned char *)(a4 + result + v83 + ~v92) |= 1 << (-7 * v92 + v91);
    }
    if (v54)
    {
      unsigned __int8 v93 = v54 - 1;
      unsigned int v94 = (((v93 - ((unsigned __int16)(37 * v93) >> 8)) >> 1) + ((37 * v93) >> 8)) >> 2;
      *(unsigned char *)(a4 + result + v83 + ~v94) |= 1 << (-7 * v94 + v93);
    }
    if (v60)
    {
      unsigned __int8 v95 = v60 - 1;
      unsigned int v96 = (((v95 - ((unsigned __int16)(37 * v95) >> 8)) >> 1) + ((37 * v95) >> 8)) >> 2;
      *(unsigned char *)(a4 + result + v83 + ~v96) |= 1 << (-7 * v96 + v95);
    }
    if (v67)
    {
      unsigned __int8 v97 = v67 - 1;
      unsigned int v98 = (((v97 - ((unsigned __int16)(37 * v97) >> 8)) >> 1) + ((37 * v97) >> 8)) >> 2;
      *(unsigned char *)(a4 + result + v83 + ~v98) |= 1 << (-7 * v98 + v97);
    }
    uint64_t result = (v83 + result);
  }
  if (a2) {
    *(_DWORD *)(a2 + 40) = result;
  }
  return result;
}

uint64_t sub_1BBB2D3EC(uint64_t a1)
{
  uint64_t v2 = a1 + 205840;
  uint64_t v3 = (unsigned char *)(a1 + 5424);
  uint64_t v4 = *(void *)(a1 + 208120);
  uint64_t v5 = *(void *)(a1 + 205840);
  if (v5)
  {
    uint64_t v6 = sub_1BBB07A80(*(void *)(a1 + 136), v4, v5, *(unsigned __int8 *)(a1 + 1057) == 2);
    if (v6)
    {
      uint64_t v7 = v6;
LABEL_10:
      CFLog();
      return v7;
    }
    if (v3[1] && *(void *)(v4 + 3408)) {
      sub_1BBB08D24(v4, v5);
    }
  }
  if (*(unsigned char *)(v4 + 33))
  {
    uint64_t v8 = sub_1BBB07514(v4);
    if (v8)
    {
      uint64_t v7 = v8;
      goto LABEL_10;
    }
  }
  else if (*(_DWORD *)(*(void *)(a1 + 128) + 4))
  {
    **(_DWORD **)(v4 + 120) = 0;
    **(_DWORD **)(v4 + 136) = 0;
  }
  if (v5 && *(_DWORD *)(*(void *)(a1 + 128) + 8))
  {
    *(_DWORD *)(v5 + 1276) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(v5 + 360) = *(_DWORD *)(a1 + 176);
  }
  if (*v3 && *(void *)(a1 + 5392) && v3[1])
  {
    float v9 = *(int32x2_t **)(a1 + 136);
    int v10 = *(void **)(a1 + 5416);
    uint64_t v11 = 22;
    if (!v9[607].i8[0]) {
      uint64_t v11 = 19;
    }
    BOOL v12 = v10[v11] != 0;
    sub_1BBB0ED0C(v9, v10, **(_DWORD **)(a1 + 128) != 0, *(_DWORD *)(*(void *)(a1 + 128) + 8) != 0);
    sub_1BBB0EF10(*(void *)(a1 + 5392), *(void *)(a1 + 5416), *(unsigned __int8 *)(v2 + 93), *(unsigned int *)(a1 + 57096), *(unsigned int *)(a1 + 57100), v12);
  }
  return 0;
}

uint64_t sub_1BBB2D574(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a1;
  uint64_t v279 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 205808;
  uint64_t v9 = *(void *)(a1 + 205840);
  uint64_t v10 = *(void *)(a1 + 208120);
  *(unsigned char *)(v10 + 3463) = *(unsigned char *)(a1 + 208132);
  if (v9)
  {
    BOOL v12 = (unsigned __int16 *)(v9 + 19112);
    int v241 = *(_DWORD *)(v9 + 56);
    int v244 = *(unsigned __int8 *)(v9 + 12);
    unsigned int v248 = *(_DWORD *)(v9 + 19424);
    uint64_t v13 = *(unsigned int *)(v9 + 19420);
    uint64_t v14 = *(void *)(v9 + 19432);
    uint64_t v15 = *(void *)(v9 + 19440);
    uint64_t v268 = -1;
    uint64_t v269 = -1;
    uint64_t v267 = 0;
    if (v14) {
      BOOL v16 = v13 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
LABEL_9:
      if (!v15) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      while (*(_DWORD *)(v14 + 1276) != *(_DWORD *)(v9 + (v17 >> 54) + 18468))
      {
        ++v18;
        v17 += 0x100000000000000;
        if (v13 == v18) {
          goto LABEL_9;
        }
      }
      LODWORD(v267) = v18;
      if (!v15)
      {
LABEL_18:
        double v21 = (unsigned char *)(a1 + 5424);
        uint64_t v227 = v9;
        char v246 = (unsigned __int16 *)(v9 + 19112);
        if (v14)
        {
          LODWORD(v269) = *(_DWORD *)(v14 + 60);
          if (*(unsigned __int16 *)(v14 + 19120) == *v12
            && *(unsigned __int16 *)(v14 + 19122) == *(unsigned __int16 *)(v9 + 19114))
          {
            LODWORD(v268) = 0;
            goto LABEL_40;
          }
        }
        else
        {
          long long v276 = 0u;
          long long v277 = 0u;
          long long v274 = 0u;
          long long v275 = 0u;
          long long v272 = 0u;
          long long v273 = 0u;
          long long __pattern4 = 0u;
          long long v271 = 0u;
          int v22 = sub_1BBB0A818(*(void *)v8, &__pattern4, 0, (unsigned char *)v9);
          uint64_t v9 = v227;
          if (!v22) {
            goto LABEL_35;
          }
          uint64_t v23 = 0;
          int v24 = 0;
          unsigned int v25 = 0;
          int v26 = 0;
          do
          {
            uint64_t v27 = *((void *)&__pattern4 + v23);
            if (v24 && v25 >= *(_DWORD *)(v27 + 1276))
            {
              int v24 = 1;
            }
            else if (v27 != v227)
            {
              unsigned int v25 = *(_DWORD *)(v27 + 1276);
              int v24 = 1;
              int v26 = v23;
            }
            ++v23;
          }
          while (v22 != v23);
          if (!v24)
          {
LABEL_35:
            int v29 = *(unsigned __int8 *)(v227 + 1368);
            if (v29 == 7 || v29 == 2)
            {
              uint64_t v14 = 0;
              int v28 = 0;
              LODWORD(v269) = 0;
              BOOL v12 = v246;
            }
            else
            {
              uint64_t v14 = 0;
              int v28 = 0;
              BOOL v12 = v246;
              *((unsigned char *)v246 + 304) = 1;
              LODWORD(v269) = 0;
            }
            goto LABEL_39;
          }
          uint64_t v14 = *((void *)&__pattern4 + v26);
          LODWORD(v269) = *(_DWORD *)(v14 + 60);
          BOOL v12 = v246;
          if (*(unsigned __int16 *)(v14 + 19120) == *v246 && *(unsigned __int16 *)(v14 + 19122) == v246[1])
          {
            int v28 = 0;
LABEL_39:
            LODWORD(v268) = v28;
LABEL_40:
            HIDWORD(v269) = -1;
            HIDWORD(v268) = -1;
            if (*(unsigned char *)(v8 + 128))
            {
              if (*(unsigned char *)(v10 + 3392) && (a3 & 1) == 0)
              {
                LOBYTE(__pattern4) = 0;
                int v30 = v13;
                uint64_t v31 = v9;
                uint64_t v32 = sub_1BBB07950(v10, v9, v14, v15, &v268, v30, *(unsigned char *)(v7 + 180), &__pattern4);
                if (v32)
                {
                  uint64_t v33 = v32;
LABEL_320:
                  CFLog();
                  return v33;
                }
                uint64_t v9 = v31;
                BOOL v12 = v246;
              }
              if (*(unsigned char *)(v10 + 32))
              {
                uint64_t v35 = v9;
                uint64_t v36 = sub_1BBB07A80(*(void *)(v7 + 136), v10, v9, *(unsigned __int8 *)(v7 + 1057) == 2);
                if (v36)
                {
                  uint64_t v33 = v36;
                  goto LABEL_320;
                }
                BOOL v12 = v246;
                if (v21[1] && *(void *)(v10 + 3408)) {
                  sub_1BBB08D24(v10, v35);
                }
              }
              uint64_t v37 = *(void *)(v10 + 56);
              if (v37) {
                sub_1BBB15780(v37);
              }
            }
            else
            {
              if (!*(unsigned char *)(v10 + 32))
              {
                CFLog();
                return 4294967246;
              }
              LOBYTE(__pattern4) = 0;
              if ((a3 & 1) == 0)
              {
                uint64_t v34 = sub_1BBB07950(v10, v9, v14, v15, &v268, v13, *(unsigned char *)(v7 + 180), &__pattern4);
                if (v34)
                {
                  uint64_t v33 = v34;
                  goto LABEL_320;
                }
              }
              BOOL v12 = v246;
            }
            if (*((unsigned char *)v12 + 305)) {
              BOOL v38 = 1;
            }
            else {
              BOOL v38 = *((unsigned char *)v12 + 304) != 0;
            }
            __int16 v39 = 0;
            uint64_t v40 = *(void *)(v8 + 32);
            int v41 = *(unsigned __int8 *)(v40 + 1368);
            int v42 = 1;
            if (v41 == 2)
            {
              int v254 = 0;
            }
            else
            {
              int v254 = 0;
              if (v41 != 7)
              {
                if (v38)
                {
                  int v42 = 0;
                  __int16 v39 = 1;
                  int v254 = 1;
                }
                else if (*(unsigned char *)(v7 + 1057))
                {
                  if (*(unsigned char *)(v7 + 1057) == 1)
                  {
                    __int16 v39 = 0;
                    int v254 = 0;
                  }
                  else
                  {
                    int v254 = 0;
                    if (v268) {
                      __int16 v39 = 1;
                    }
                    else {
                      __int16 v39 = 2;
                    }
                    LODWORD(v268) = 0;
                  }
                }
                else
                {
                  int v254 = 0;
                  __int16 v39 = 2 * (*(_DWORD *)(*(void *)(v7 + 136) + 4852) == 1);
                }
              }
            }
            int v43 = *(unsigned __int8 *)(v7 + 1057);
            BOOL v44 = v43 == 2;
            if (v43 == 2) {
              float v45 = (unsigned __int16 *)(v40 + 19124);
            }
            else {
              float v45 = (unsigned __int16 *)(v40 + 19112);
            }
            uint64_t v46 = 14;
            if (!v44) {
              uint64_t v46 = 2;
            }
            __int16 v255 = v39;
            if (*(_DWORD *)(v40 + 1384)) {
              BOOL v47 = *(_DWORD *)(v40 + 1388) == 0;
            }
            else {
              BOOL v47 = 1;
            }
            uint64_t v48 = *v45;
            uint64_t v49 = *(unsigned int *)(v7 + 57096);
            unsigned int v50 = *(_DWORD *)(v7 + 57100);
            char v51 = v42 ^ 1;
            if (v39) {
              char v51 = 1;
            }
            uint64_t v258 = v7;
            uint64_t v259 = v8;
            uint64_t v253 = v10;
            uint64_t v225 = a2;
            if ((v51 & 1) != 0 || !v47) {
              goto LABEL_84;
            }
            if (*(_DWORD *)(v8 + 96))
            {
              if (!*v21 || (float v52 = *(float *)(v8 + 56), v52 <= 30.0) || *(_WORD *)(v7 + 5426) == 1)
              {
LABEL_84:
                unint64_t v53 = (unint64_t)(v48 + 15) >> 4;
                unsigned int v54 = (*(unsigned __int16 *)(v40 + 19112 + v46) + 15) >> 4;
                unsigned int theArray = *(_DWORD *)(v7 + 57100);
                if (*(unsigned char *)(v8 + 128))
                {
                  if (*(_DWORD *)(*(void *)(v7 + 136) + 4852) == 1)
                  {
                    sub_1BBB08B38(v40, (int *)&__pattern4, (uint64_t)&valuePtr);
                    int v55 = (valuePtr.timescale + 15) >> 4;
                    signed int v56 = (signed int)(valuePtr.flags + 15) >> 4;
                    unsigned int v57 = (unsigned __int16)(LODWORD(valuePtr.value) >> 4);
                    unsigned int v58 = (unsigned __int16)(HIDWORD(valuePtr.value) >> 4);
                  }
                  else
                  {
                    unsigned int v57 = 0;
                    unsigned int v58 = 0;
                    LOWORD(v55) = v53 - 1;
                    LOWORD(v56) = v54 - 1;
                  }
                  if (*v21) {
                    float v62 = -2.0;
                  }
                  else {
                    float v62 = -5.0;
                  }
                  if (*v21) {
                    float v63 = 2.0;
                  }
                  else {
                    float v63 = 5.0;
                  }
                  uint64_t v64 = *(void *)(v8 + 2312);
                  int v65 = *(_WORD **)(v64 + 3408);
                  float v66 = 0.0;
                  if (v65)
                  {
                    unsigned int v67 = (unsigned __int16)*v65;
                    float v68 = 0.0;
                    if (*v65)
                    {
                      float v66 = (float)v67;
                      float v68 = 4.0 / (float)v67;
                    }
                  }
                  else
                  {
                    float v68 = 0.0;
                  }
                  float v70 = *(float *)(v8 + 56);
                  BOOL v16 = v65 == 0;
                  int v71 = *(_DWORD *)(v64 + 3416);
                  int v73 = v16 || *(_DWORD *)(v8 + 96) == 0;
                  int v74 = v73 ^ 1;
                  if (*v21 && (v73 & 1) == 0) {
                    int v74 = v70 <= 30.0 || *(unsigned __int16 *)(v7 + 5426) == 1;
                  }
                  float v75 = v70 + v62;
                  *(float *)&double v76 = v70 + v63;
                  if (*(unsigned char *)(v64 + 3544))
                  {
                    LODWORD(__pattern4) = v42 ^ 1;
                    LODWORD(valuePtr.value) = 0;
                    if (v255 == 2)
                    {
                      int v77 = 0;
                      int v78 = 1;
                    }
                    else
                    {
                      int v77 = 0;
                      int v78 = 0;
                      if (v255 == 1)
                      {
                        int v78 = 0;
                        int v77 = 1;
                      }
                    }
                    DWORD1(__pattern4) = v77;
                    HIDWORD(valuePtr.value) = v78;
                    if (*(_DWORD *)(v64 + 3548))
                    {
                      unint64_t v101 = 0;
                      int v102 = *(_WORD **)(v64 + 176);
                      int v103 = (int)*(float *)&v76;
                      char v104 = v74 ^ 1;
                      do
                      {
                        unsigned int v105 = *(__int16 *)(*(void *)(v64 + 3552) + 2 * v101);
                        if (v50 > v105)
                        {
                          unsigned int v106 = *(__int16 *)(*(void *)(v64 + 3560) + 2 * v101);
                          if (v49 > v106)
                          {
                            BOOL v109 = v58 <= v105
                                && (unsigned __int16)v56 >= v105
                                && v57 <= v106
                                && (unsigned __int16)v55 >= v106;
                            uint64_t v110 = !v109;
                            if (v109) {
                              char v111 = v104;
                            }
                            else {
                              char v111 = 1;
                            }
                            if (v110) {
                              LOBYTE(v112) = 51;
                            }
                            else {
                              LOBYTE(v112) = (int)(v70 + 0.5);
                            }
                            if ((v111 & 1) == 0)
                            {
                              uint64_t v110 = 0;
                              LOWORD(v76) = *(_WORD *)(*(void *)(v64 + 3408) + 2 * (v106 + v71 * v105 + 8));
                              double v76 = (float)(v70 + (float)(v68 * (float)((float)LODWORD(v76) - v66))) + 0.5;
                              int v113 = (int)v76;
                              if ((int)v76 <= (int)v75) {
                                int v113 = (int)v75;
                              }
                              int v112 = ((v103 - v113) & ((v103 - v113) >> 31)) + v113;
                            }
                            int v114 = (char)v112 & ~((char)v112 >> 31);
                            int v115 = *v102 & 0x3FF | ((((51 - v114) & ((51 - v114) >> 31)) + v114) << 10);
                            *int v102 = v115;
                            LOWORD(v115) = v115 & 0xFFFE | *(_WORD *)((unint64_t)&__pattern4 | (4 * v110)) & 1;
                            *int v102 = v115;
                            *int v102 = v115 & 0xFFFD | (2
                                                   * (*(_WORD *)((unint64_t)&valuePtr & 0xFFFFFFFFFFFFFFFBLL | (4 * (v110 & 1))) & 1));
                            v102 += 8;
                            uint64_t v64 = *(void *)(v8 + 2312);
                          }
                        }
                        ++v101;
                      }
                      while (v101 < *(unsigned int *)(v64 + 3548));
                    }
                  }
                  else if (v50)
                  {
                    unsigned int v79 = 0;
                    double v80 = *(_WORD **)(v64 + 176);
                    if (v255 == 1) {
                      __int16 v81 = -13312;
                    }
                    else {
                      __int16 v81 = -12880;
                    }
                    if (v255 == 2) {
                      __int16 v82 = -12304;
                    }
                    else {
                      __int16 v82 = v81;
                    }
                    int v83 = 8;
                    do
                    {
                      if (v49)
                      {
                        unint64_t v84 = 0;
                        BOOL v86 = v79 < v58 || v79 > (unsigned __int16)v56;
                        do
                        {
                          char v87 = v84 < v57 || v86;
                          __int16 v88 = v82;
                          if (v84 <= (unsigned __int16)v55)
                          {
                            __int16 v88 = v82;
                            if ((v87 & 1) == 0)
                            {
                              int v89 = (int)v70;
                              if (v74)
                              {
                                LOWORD(v62) = *(_WORD *)(*(void *)(*(void *)(v8 + 2312) + 3408)
                                                       + 2 * (v83 + v84));
                                float v62 = v70 + (float)(int)(float)(v68 * (float)((float)LODWORD(v62) - v66));
                                int v90 = (int)v62;
                                if ((int)v62 <= (int)v75) {
                                  int v90 = (int)v75;
                                }
                                int v89 = (((int)*(float *)&v76 - v90) & (((int)*(float *)&v76 - v90) >> 31)) + v90;
                              }
                              int v91 = (char)v89 & ~((char)v89 >> 31);
                              if (v42) {
                                __int16 v88 = (((_WORD)v91
                              }
                                      + ((unsigned __int16)(51 - v91) & (unsigned __int16)((51 - v91) >> 31))) << 10) | 0x1B0;
                              else {
                                __int16 v88 = ((_WORD)v91 + ((unsigned __int16)(51 - v91) & (unsigned __int16)((51 - v91) >> 31))) << 10;
                              }
                            }
                          }
                          *v80++ = v88;
                          ++v84;
                        }
                        while (v49 != v84);
                      }
                      ++v79;
                      v83 += v71;
                    }
                    while (v79 != v50);
                  }
                }
                else
                {
                  uint64_t v59 = *(void *)(v8 + 2312);
                  if (*(unsigned char *)(v59 + 3544))
                  {
                    valuePtr.CMTimeValue value = 0;
                    LODWORD(__pattern4) = v254;
                    if (v39 == 2)
                    {
                      int v61 = 0;
                      int v60 = 1;
                    }
                    else if (v39 == 1)
                    {
                      int v60 = 0;
                      int v61 = 1;
                    }
                    else
                    {
                      int v61 = 0;
                      int v60 = 0;
                    }
                    DWORD1(__pattern4) = v61;
                    HIDWORD(valuePtr.value) = v60;
                    if (*(_DWORD *)(v59 + 3548))
                    {
                      unint64_t v116 = 0;
                      unsigned int v117 = *(_WORD **)(v59 + 176);
                      do
                      {
                        unsigned int v118 = *(unsigned __int16 *)(*(void *)(v59 + 3552) + 2 * v116);
                        if (v50 > v118)
                        {
                          unsigned int v119 = *(unsigned __int16 *)(*(void *)(v59 + 3560) + 2 * v116);
                          if (v49 > v119)
                          {
                            BOOL v121 = v54 <= v118 || v53 <= v119;
                            unsigned int v122 = v119 + v49 * v118;
                            if (*(unsigned char *)(*(void *)(v258 + 136) + 4813) == 2) {
                              int v123 = sub_1BBB23F54(v258, v122);
                            }
                            else {
                              int v123 = 0;
                            }
                            int v124 = *v117 & 0x3FF | ((int)(sub_1BBB23E3C(v258, v122, v123, *(float *)(v259 + 56)) + 0.5) << 10);
                            *unsigned int v117 = v124;
                            LOWORD(v124) = v124 & 0xFFFE | *(_WORD *)((unint64_t)&__pattern4 | (4 * v121)) & 1;
                            *unsigned int v117 = v124;
                            *unsigned int v117 = v124 & 0xFFFD | (2
                                                   * (*(_WORD *)((unint64_t)&valuePtr & 0xFFFFFFFFFFFFFFFBLL | (4 * v121)) & 1));
                            v117 += 8;
                            uint64_t v59 = *(void *)(v259 + 2312);
                            unsigned int v50 = theArray;
                          }
                        }
                        ++v116;
                      }
                      while (v116 < *(unsigned int *)(v59 + 3548));
                    }
                    uint64_t v8 = v259;
                  }
                  else if (v50)
                  {
                    int v92 = 0;
                    for (unsigned int i = 0; i != v50; ++i)
                    {
                      uint64_t v94 = v8;
                      if (v49)
                      {
                        for (unint64_t j = 0; j != v49; ++j)
                        {
                          int v96 = sub_1BBB23F54(v258, v92 + (int)j);
                          int v97 = (int)(sub_1BBB23E3C(v258, v92 + j, v96, *(float *)(v94 + 56)) + 0.5);
                          if (j >= v53 || i >= v54)
                          {
                            __int16 v99 = ((_WORD)v97 << 10) | 0x3F0;
                            __int16 v100 = (_WORD)v97 << 10;
                            __int16 v98 = ((_WORD)v97 << 10) | 0x1B0;
                            if (v255 == 1) {
                              __int16 v98 = v100;
                            }
                            if (v255 == 2) {
                              __int16 v98 = v99;
                            }
                          }
                          else if (v254)
                          {
                            __int16 v98 = (_WORD)v97 << 10;
                          }
                          else
                          {
                            __int16 v98 = ((_WORD)v97 << 10) | 0x1B0;
                          }
                          uint64_t v94 = v259;
                          *(_WORD *)(*(void *)(*(void *)(v259 + 2312) + 176) + 2 * (v92 + (int)j)) = v98;
                        }
                      }
                      v92 += v49;
                      uint64_t v8 = v94;
                    }
                  }
                }
LABEL_218:
                int v125 = v241;
                if (!v244) {
                  int v125 = -1;
                }
                if (*(unsigned char *)(v8 + 125) && *(unsigned char *)(v253 + 3462)) {
                  *(_DWORD *)(v253 + 2976) = 1;
                }
                *(unsigned char *)(v253 + 3460) = *(unsigned char *)(v8 + 123);
                *(unsigned char *)(v253 + 3461) = *(unsigned char *)(v8 + 124);
                int v126 = *(unsigned __int8 *)(v227 + 24);
                int v239 = *(unsigned __int8 *)(v258 + 180);
                BOOL v242 = *(int **)(v258 + 144);
                int v127 = *(_DWORD *)(*(void *)(v258 + 136) + 4952);
                LODWORD(valuePtr.value) = v125;
                Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                *(void *)(v253 + 24) = Mutable;
                if ((v127 & 0x80000000) == 0)
                {
                  LODWORD(__pattern4) = v127;
                  CFNumberRef v129 = CFNumberCreate(0, kCFNumberSInt32Type, &__pattern4);
                  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F20], v129);
                  CFRelease(v129);
                }
                unsigned int v130 = (const void **)MEMORY[0x1E4F1CFD0];
                if (v244) {
                  CFDictionarySetValue(Mutable, @"MarkCurrentFrameAsLTR", (const void *)*MEMORY[0x1E4F1CFD0]);
                }
                if (v126) {
                  CFDictionarySetValue(Mutable, @"ForceRefresh", *v130);
                }
                if (LODWORD(valuePtr.value) != -1)
                {
                  CFNumberRef v131 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                  CFDictionarySetValue(Mutable, @"FrameNumForLTRToReplace", v131);
                  CFRelease(v131);
                }
                if (*(unsigned char *)(v227 + 1393))
                {
                  int v132 = 3;
                }
                else
                {
                  unint64_t v133 = *(unsigned __int8 *)(v227 + 1368);
                  if (v133 > 7) {
                    int v132 = 2;
                  }
                  else {
                    int v132 = dword_1BBB85F20[v133];
                  }
                }
                LODWORD(presentationTimeStamp.value) = v132;
                CFNumberRef v134 = CFNumberCreate(0, kCFNumberSInt32Type, &presentationTimeStamp);
                theDict = Mutable;
                CFDictionarySetValue(Mutable, @"UserFrameType", v134);
                CFRelease(v134);
                if (v248 >= 2) {
                  uint64_t v135 = 2;
                }
                else {
                  uint64_t v135 = v248;
                }
                uint64_t v136 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                uint64_t v256 = v135;
                if (v135)
                {
                  int v137 = &v268;
                  int32x2_t v138 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
                  uint64_t v139 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
                  uint64_t v140 = &v269;
                  uint64_t v141 = v256;
                  do
                  {
                    float v142 = CFDictionaryCreateMutable(0, 0, v138, v139);
                    if (*(_DWORD *)v140 != -1)
                    {
                      CFNumberRef v143 = CFNumberCreate(0, kCFNumberSInt32Type, v140);
                      CFDictionarySetValue(v142, @"ReferenceFrameNumDriver", v143);
                      CFRelease(v143);
                    }
                    if (*(_DWORD *)v137 != -1)
                    {
                      CFNumberRef v144 = CFNumberCreate(0, kCFNumberSInt32Type, v137);
                      CFDictionarySetValue(v142, @"ReferenceRVRAIndex", v144);
                      CFRelease(v144);
                    }
                    CFArrayAppendValue(v136, v142);
                    CFRelease(v142);
                    int v137 = (uint64_t *)((char *)v137 + 4);
                    uint64_t v140 = (uint64_t *)((char *)v140 + 4);
                    --v141;
                  }
                  while (v141);
                }
                unint64_t v145 = Mutable;
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F38], v136);
                CFRelease(v136);
                uint64_t v10 = v253;
                if (*(unsigned char *)(v253 + 3460) || *(unsigned char *)(v253 + 3461))
                {
                  double v146 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  char v262 = *(unsigned char *)(v253 + 3460);
                  CFNumberRef v147 = CFNumberCreate(0, kCFNumberCharType, &v262);
                  CFDictionarySetValue(v146, @"WeightData_WeightedPredFlag", v147);
                  CFRelease(v147);
                  char v261 = *(unsigned char *)(v253 + 3461);
                  CFNumberRef v148 = CFNumberCreate(0, kCFNumberCharType, &v261);
                  CFDictionarySetValue(v146, @"WeightData_WeightedBipredIdc", v148);
                  CFRelease(v148);
                  LODWORD(__pattern4) = *(unsigned __int8 *)(v227 + 5024);
                  CFNumberRef v149 = CFNumberCreate(0, kCFNumberSInt32Type, &__pattern4);
                  CFDictionarySetValue(v146, @"WeightData_LumaLog2WeightDenom", v149);
                  CFRelease(v149);
                  LODWORD(duration.value) = *(unsigned __int8 *)(v227 + 5025);
                  CFNumberRef v150 = CFNumberCreate(0, kCFNumberSInt32Type, &duration);
                  CFDictionarySetValue(v146, @"WeightData_ChromaLog2WeightDenom", v150);
                  CFRelease(v150);
                  unsigned int v151 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                  __int32 v152 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                  unsigned int v153 = CFArrayCreateMutable(0, 0, v151);
                  float v154 = CFArrayCreateMutable(0, 0, v151);
                  char v260 = 0;
                  LODWORD(completeUntilPresentationTimeStamp.value) = 0;
                  LODWORD(pixelBufferOut) = 0;
                  unsigned int v249 = v146;
                  if (*(unsigned char *)(v253 + 3460) && LODWORD(presentationTimeStamp.value) == 1)
                  {
                    if (v256)
                    {
                      for (uint64_t k = 0; k != v256; ++k)
                      {
                        uint64_t v156 = 0;
                        uint64_t v157 = v227 + 5026 + 3 * *((char *)&v267 + 4 * k);
                        uint64_t v158 = (__int16 *)(v227 + 5410 + 6 * *((char *)&v267 + 4 * k));
                        do
                        {
                          char v260 = *(unsigned char *)(v157 + v156);
                          LODWORD(completeUntilPresentationTimeStamp.value) = *v158;
                          LODWORD(pixelBufferOut) = v158[192];
                          CFNumberRef v159 = CFNumberCreate(0, kCFNumberCharType, &v260);
                          CFNumberRef v160 = CFNumberCreate(0, kCFNumberSInt32Type, &completeUntilPresentationTimeStamp);
                          CFNumberRef v161 = CFNumberCreate(0, kCFNumberSInt32Type, &pixelBufferOut);
                          CFArrayAppendValue(v152, v159);
                          CFArrayAppendValue(v153, v160);
                          CFArrayAppendValue(v154, v161);
                          CFRelease(v159);
                          CFRelease(v160);
                          CFRelease(v161);
                          ++v156;
                          ++v158;
                        }
                        while (v156 != 3);
                      }
                    }
                  }
                  else if (*(unsigned char *)(v253 + 3461) && LODWORD(presentationTimeStamp.value) == 2)
                  {
                    uint64_t v162 = 0;
                    char v163 = 1;
                    do
                    {
                      uint64_t v164 = 0;
                      char v165 = v163;
                      uint64_t v166 = v227 + 5026 + 3 * *((char *)&v267 + 4 * v162) + 96 * v162;
                      int8x16_t v167 = (__int16 *)(v227 + 5410 + 192 * v162 + 6 * *((char *)&v267 + 4 * v162));
                      do
                      {
                        char v260 = *(unsigned char *)(v166 + v164);
                        LODWORD(completeUntilPresentationTimeStamp.value) = *v167;
                        LODWORD(pixelBufferOut) = v167[192];
                        CFNumberRef v168 = CFNumberCreate(0, kCFNumberCharType, &v260);
                        CFNumberRef v169 = CFNumberCreate(0, kCFNumberSInt32Type, &completeUntilPresentationTimeStamp);
                        CFNumberRef v170 = CFNumberCreate(0, kCFNumberSInt32Type, &pixelBufferOut);
                        CFArrayAppendValue(v152, v168);
                        CFArrayAppendValue(v153, v169);
                        CFArrayAppendValue(v154, v170);
                        CFRelease(v168);
                        CFRelease(v169);
                        CFRelease(v170);
                        ++v164;
                        ++v167;
                      }
                      while (v164 != 3);
                      char v163 = 0;
                      uint64_t v162 = 1;
                    }
                    while ((v165 & 1) != 0);
                  }
                  else
                  {
                    char v171 = 1;
                    do
                    {
                      char v172 = v171;
                      int v173 = 3;
                      do
                      {
                        CFNumberRef v174 = CFNumberCreate(0, kCFNumberCharType, &v260);
                        CFNumberRef v175 = CFNumberCreate(0, kCFNumberSInt32Type, &completeUntilPresentationTimeStamp);
                        CFNumberRef v176 = CFNumberCreate(0, kCFNumberSInt32Type, &pixelBufferOut);
                        CFArrayAppendValue(v152, v174);
                        CFArrayAppendValue(v153, v175);
                        CFArrayAppendValue(v154, v176);
                        CFRelease(v174);
                        CFRelease(v175);
                        CFRelease(v176);
                        --v173;
                      }
                      while (v173);
                      char v171 = 0;
                    }
                    while ((v172 & 1) != 0);
                  }
                  CFDictionarySetValue(v249, @"WeightData_WeightFlagArray", v152);
                  CFDictionarySetValue(v249, @"WeightData_Weight", v153);
                  CFDictionarySetValue(v249, @"WeightData_Offset", v154);
                  CFRelease(v152);
                  CFRelease(v153);
                  CFRelease(v154);
                  unint64_t v145 = theDict;
                  CFDictionarySetValue(theDict, @"WeightedPredictionInfo", v249);
                  CFRelease(v249);
                  uint64_t v10 = v253;
                }
                uint64_t v177 = *(const UInt8 **)(v10 + 176);
                if (v177)
                {
                  CFDataRef v178 = CFDataCreateWithBytesNoCopy(0, v177, *(unsigned int *)(v10 + 184), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
                  CFDictionaryAddValue(v145, (const void *)*MEMORY[0x1E4F44F80], v178);
                  CFRelease(v178);
                }
                CFMutableDictionaryRef v250 = (CFMutableDictionaryRef)*MEMORY[0x1E4F1CFD0];
                CFDictionarySetValue(v145, @"AttachDPB", (const void *)*MEMORY[0x1E4F1CFD0]);
                uint64_t v179 = v259;
                if (*(unsigned char *)(v10 + 3392))
                {
                  int v180 = *v246;
                  int v181 = v246[1];
                  if (!v239 && (*(_DWORD *)(v227 + 224) < v180 || *(_DWORD *)(v227 + 192) < v181))
                  {
                    int v180 = *(_DWORD *)(v227 + 224);
                    int v181 = *(_DWORD *)(v227 + 192);
                  }
                  LODWORD(__pattern4) = v181 | (v180 << 16);
                  LOWORD(duration.value) = v246[7];
                  WORD1(duration.value) = v246[6];
                  CFNumberRef v184 = CFNumberCreate(0, kCFNumberSInt32Type, &__pattern4);
                  CFNumberRef v185 = CFNumberCreate(0, kCFNumberSInt32Type, &duration);
                  CFDictionaryAddValue(v145, (const void *)*MEMORY[0x1E4F44F88], v184);
                  CFDictionaryAddValue(v145, @"VRAActualDimension", v185);
                  CFRelease(v184);
                  CFRelease(v185);
                }
                if (v242) {
                  sub_1BBB090A8(v145, (const void *)*MEMORY[0x1E4F44810], *v242);
                }
                if (*(_DWORD *)(v10 + 2976))
                {
                  uint64_t v186 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
                  unsigned int v187 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
                  long long v188 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  sub_1BBB090A8(v188, (const void *)*MEMORY[0x1E4F44DF8], *(_DWORD *)(v10 + 1584));
                  sub_1BBB090A8(v188, (const void *)*MEMORY[0x1E4F44E08], *(_DWORD *)(v10 + 1588));
                  sub_1BBB090A8(v188, (const void *)*MEMORY[0x1E4F44E00], *(_DWORD *)(v10 + 1596));
                  BOOL v224 = v188;
                  sub_1BBB090A8(v188, (const void *)*MEMORY[0x1E4F44E10], *(_DWORD *)(v10 + 1592));
                  CFArrayRef theArraya = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                  char v247 = (const void *)*MEMORY[0x1E4F44E40];
                  int v245 = (const void *)*MEMORY[0x1E4F44E48];
                  unint64_t v243 = (const void *)*MEMORY[0x1E4F44E70];
                  key = (void *)*MEMORY[0x1E4F44E60];
                  char v240 = (const void *)*MEMORY[0x1E4F44E58];
                  uint64_t v238 = (void *)*MEMORY[0x1E4F44E80];
                  int v233 = (__CFDictionary *)*MEMORY[0x1E4F1CFC8];
                  unsigned int v237 = (void *)*MEMORY[0x1E4F44EA0];
                  BOOL v236 = (const void *)*MEMORY[0x1E4F44E90];
                  char v235 = (void *)*MEMORY[0x1E4F44E88];
                  char v234 = (const void *)*MEMORY[0x1E4F44E98];
                  uint64_t v232 = (const void *)*MEMORY[0x1E4F44E28];
                  unsigned int v231 = (void *)*MEMORY[0x1E4F44E78];
                  BOOL v230 = (void *)*MEMORY[0x1E4F44E50];
                  uint64_t v189 = (int *)(v10 + 296);
                  uint64_t v190 = -1;
                  char v229 = (void *)*MEMORY[0x1E4F44E68];
                  long long v191 = (const void *)*MEMORY[0x1E4F44E38];
                  long long v192 = (const void *)*MEMORY[0x1E4F44E20];
                  long long v193 = (const void *)*MEMORY[0x1E4F44E30];
                  do
                  {
                    uint64_t v257 = v190;
                    long long v194 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    sub_1BBB090A8(v194, v247, *(v189 - 18));
                    sub_1BBB090A8(v194, v245, *(v189 - 17));
                    sub_1BBB090A8(v194, v243, *(v189 - 16));
                    *(void *)&long long __pattern4 = *((void *)v189 - 7);
                    CFNumberRef v195 = CFNumberCreate(0, kCFNumberSInt64Type, &__pattern4);
                    if (v195)
                    {
                      CFNumberRef v196 = v195;
                      CFDictionaryAddValue(v194, key, v195);
                      CFRelease(v196);
                    }
                    sub_1BBB090A8(v194, v240, *(v189 - 12));
                    unsigned int v197 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    unsigned int v198 = v197;
                    if (*(v189 - 7)) {
                      CFMutableDictionaryRef v199 = v250;
                    }
                    else {
                      CFMutableDictionaryRef v199 = v233;
                    }
                    CFDictionaryAddValue(v197, v238, v199);
                    if (*(v189 - 6)) {
                      CFMutableDictionaryRef v200 = v250;
                    }
                    else {
                      CFMutableDictionaryRef v200 = v233;
                    }
                    CFDictionaryAddValue(v198, v237, v200);
                    sub_1BBB090A8(v198, v236, *(v189 - 5));
                    if (*(v189 - 4)) {
                      CFMutableDictionaryRef v201 = v250;
                    }
                    else {
                      CFMutableDictionaryRef v201 = v233;
                    }
                    CFDictionaryAddValue(v198, v235, v201);
                    sub_1BBB090A8(v198, v234, *(v189 - 3));
                    uint64_t v202 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    sub_1BBB090A8(v202, v191, *(v189 - 11));
                    sub_1BBB090A8(v202, v192, *(v189 - 9));
                    sub_1BBB090A8(v202, v232, *(v189 - 1));
                    sub_1BBB090A8(v202, v193, *(v189 - 1));
                    long long v203 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    long long v204 = v186;
                    long long v205 = v203;
                    sub_1BBB090A8(v203, v191, *(v189 - 10));
                    sub_1BBB090A8(v205, v192, *(v189 - 8));
                    sub_1BBB090A8(v205, v232, *v189);
                    sub_1BBB090A8(v205, v193, *v189);
                    CFDictionaryAddValue(v194, v231, v198);
                    CFDictionaryAddValue(v194, v230, v202);
                    CFDictionaryAddValue(v194, v229, v205);
                    CFRelease(v198);
                    CFRelease(v202);
                    long long v206 = v205;
                    uint64_t v186 = v204;
                    unsigned int v187 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
                    CFRelease(v206);
                    CFArrayAppendValue(theArraya, v194);
                    CFRelease(v194);
                    v189 += 20;
                    uint64_t v190 = v257 + 1;
                  }
                  while (v257 + 1 < (unint64_t)*(unsigned int *)(v253 + 1592));
                  CFDictionaryAddValue(v224, (const void *)*MEMORY[0x1E4F44E18], theArraya);
                  CFRelease(theArraya);
                  if (v224)
                  {
                    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F44F68], v224);
                    CFRelease(v224);
                  }
                  uint64_t v10 = v253;
                  *(_DWORD *)(v253 + 2976) = 0;
                  uint64_t v179 = v259;
                }
                int v207 = *(unsigned __int8 *)(v179 + 128);
                CFDictionaryRef v208 = *(const __CFDictionary **)(v10 + 24);
                long long __pattern4 = 0uLL;
                *(void *)&long long v271 = 0;
                CMTimeMake((CMTime *)&__pattern4, *(int *)(v227 + 1332), *(_DWORD *)(v227 + 1336));
                memset(&valuePtr, 0, sizeof(valuePtr));
                CMTimeMake(&valuePtr, *(int *)(v227 + 1328), *(_DWORD *)(v227 + 1336));
                CVPixelBufferRef pixelBufferOut = 0;
                int v209 = *(_DWORD *)(v227 + 228);
                int v210 = *(_DWORD *)(v227 + 196);
                *(_DWORD *)(v10 + 64) = *(_DWORD *)(v10 + 68);
                if (v207)
                {
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 3888), 0xFFFFFFFFFFFFFFFFLL);
                  *(unsigned char *)(v10 + 33) = 1;
                  uint64_t v7 = v258;
                  if (!*(unsigned char *)(v10 + 32))
                  {
                    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 88), 0xFFFFFFFFFFFFFFFFLL);
                    *(_DWORD *)(v258 + 116) = *(_DWORD *)(v258 + 112);
                    *(unsigned char *)(*(void *)(v10 + 8 * *(int *)(v10 + 64) + 72) + 1402) = 1;
                    *(_DWORD *)(v10 + 68) = *(_DWORD *)(v10 + 68) == 0;
                  }
                  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v10 + 3888));
                  long long v211 = *(OpaqueVTCompressionSession **)v10;
                  long long v212 = *(__CVBuffer **)(v10 + 8 * *(int *)(v10 + 64) + 3480);
                  *(_OWORD *)&presentationTimeStamp.CMTimeValue value = __pattern4;
                  presentationTimeStamp.epoch = v271;
                  duratiouint64_t n = valuePtr;
                  uint64_t v213 = VTCompressionSessionEncodeFrame(v211, v212, &presentationTimeStamp, &duration, v208, 0, 0);
                  uint64_t v8 = v259;
                  if (v213) {
                    goto LABEL_304;
                  }
                }
                else
                {
                  CFAllocatorRef v214 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)v10);
                  uint64_t v216 = CVPixelBufferPoolCreatePixelBuffer(v214, PixelBufferPool, &pixelBufferOut);
                  if (v216)
                  {
                    uint64_t v217 = v216;
                    CFLog();
                    uint64_t v33 = v217;
                    uint64_t v7 = v258;
                    uint64_t v8 = v259;
                    goto LABEL_313;
                  }
                  sub_1BBB066A8(pixelBufferOut, v227 + 96, v209, v210);
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 3888), 0xFFFFFFFFFFFFFFFFLL);
                  *(unsigned char *)(v10 + 33) = 1;
                  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v10 + 3888));
                  long long v218 = *(OpaqueVTCompressionSession **)v10;
                  presentationTimeStamp.epoch = v271;
                  *(_OWORD *)&presentationTimeStamp.CMTimeValue value = __pattern4;
                  duratiouint64_t n = valuePtr;
                  uint64_t v213 = VTCompressionSessionEncodeFrame(v218, pixelBufferOut, &presentationTimeStamp, &duration, v208, 0, 0);
                  uint64_t v7 = v258;
                  uint64_t v8 = v259;
                  if (v213)
                  {
LABEL_304:
                    uint64_t v33 = v213;
                    CFLog();
                    goto LABEL_313;
                  }
                }
                if (*(unsigned char *)(v10 + 32))
                {
                  unsigned int v219 = *(OpaqueVTCompressionSession **)v10;
                  *(_OWORD *)&completeUntilPresentationTimeStamp.CMTimeValue value = __pattern4;
                  completeUntilPresentationTimeStamp.epoch = v271;
                  uint64_t v220 = VTCompressionSessionCompleteFrames(v219, &completeUntilPresentationTimeStamp);
                  uint64_t v221 = *(_DWORD *)(v10 + 144) | v220;
                  if (v221)
                  {
                    CFLog();
                    uint64_t v33 = v221;
                  }
                  else
                  {
                    uint64_t v33 = v220;
                    *(unsigned char *)(v10 + 33) = 0;
                  }
                }
                else
                {
                  uint64_t v33 = 0;
                }
LABEL_313:
                a2 = v225;
                if (pixelBufferOut) {
                  CVPixelBufferRelease(pixelBufferOut);
                }
                char v222 = *(const void **)(v10 + 24);
                if (v222) {
                  CFRelease(v222);
                }
                if (v33) {
                  goto LABEL_320;
                }
                goto LABEL_318;
              }
            }
            else
            {
              float v52 = *(float *)(v8 + 56);
            }
            uint64_t v69 = *(void *)(v8 + 2312);
            if (*(unsigned char *)(v69 + 3544))
            {
              memset(*(void **)(v69 + 176), 4 * (int)(float)(v52 + 0.5), *(unsigned int *)(v69 + 184));
            }
            else
            {
              LODWORD(__pattern4) = (((int)(float)(v52 + 0.5) & 0x3F) << 10) | ((int)(float)(v52 + 0.5) << 26) | 0x1B001B0;
              memset_pattern4(*(void **)(v69 + 176), &__pattern4, *(unsigned int *)(v69 + 184));
            }
            goto LABEL_218;
          }
        }
        int v28 = 1;
        goto LABEL_39;
      }
    }
    if (v13)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      while (*(_DWORD *)(v15 + 1276) != *(_DWORD *)(v9 + (v19 >> 54) + 18468))
      {
        ++v20;
        v19 += 0x100000000000000;
        if (v13 == v20) {
          goto LABEL_18;
        }
      }
      HIDWORD(v267) = v20;
    }
    goto LABEL_18;
  }
LABEL_318:
  if (!*(unsigned char *)(v10 + 32)) {
    return 0;
  }
  uint64_t v33 = sub_1BBB28758(v7, *(void *)(v8 + 32), a2, a4, a5, a6);
  if (v33) {
    goto LABEL_320;
  }
  return v33;
}

uint64_t sub_1BBB2F134(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6)
{
  uint64_t v9 = a1 + 25725;
  uint64_t v10 = a1[25725];
  uint64_t v11 = a1[17];
  uint64_t v12 = *(void *)(v10 + 22824);
  signed int v13 = *(_DWORD *)(v12 + 12);
  uint64_t v14 = a1[25730];
  BOOL v31 = 0;
  if (v14)
  {
    sub_1BBB2F330(a1[18], v14, a1[19], *(unsigned __int8 *)(v11 + 577));
    uint64_t v15 = sub_1BBB2F3C0((uint64_t)a1, v9[5], v11, a1[18], *(_DWORD *)(v9[5] + 1276));
    if (v15)
    {
      uint64_t v16 = v15;
      goto LABEL_8;
    }
    uint64_t v18 = (unsigned char *)a1[17];
    uint64_t v17 = v9[5];
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = (unsigned char *)v11;
  }
  uint64_t v19 = sub_1BBAF3EB8(a2, 0, v18, (uint64_t)a1, v17, a6);
  if (v19)
  {
    uint64_t v16 = v19;
  }
  else
  {
    *(unsigned char *)(v9[5] + 2) = 1;
    uint64_t v21 = v9[5];
    int v22 = *(_DWORD *)(v21 + 1280);
    if (!*(unsigned char *)(v21 + 1393))
    {
      if (*(unsigned char *)(a1[17] + 4848))
      {
        uint64_t v23 = a1[674];
        if (v23) {
          v22 += *(_DWORD *)(v23 + 116);
        }
      }
    }
    *(_DWORD *)(v21 + 1280) = v22;
    uint64_t v24 = *v9;
    unsigned int v25 = *(int **)(*v9 + 22816);
    int v26 = v22 << (*(unsigned char *)(v21 + 1354) == 0);
    *unsigned int v25 = v26;
    v25[6] = v26;
    v25[7] = v26;
    uint64_t v27 = *(int32x2_t **)(v24 + 22816);
    int32x2_t v28 = v27[3];
    *(_DWORD *)(v21 + 1288) = v27->i32[0];
    *(int32x2_t *)(v21 + 1292) = vrev64_s32(v28);
    *(void *)(v21 + 1300) = 0;
    *(_WORD *)(v21 + 1398) = 0;
    *(unsigned char *)(v21 + 1401) = 0;
    sub_1BBB2F7AC((uint64_t)a1, a1[18], a1[17]);
    if (v9[5] != sub_1BBB21350(v14, v10, v11, (uint64_t *)(v12 + 216), v13))
    {
      CFLog();
      return 4294967246;
    }
    uint64_t v16 = sub_1BBB2FA50((uint64_t)a1, a3, a4, a5, &v31);
    if (!v16) {
      return v16;
    }
  }
LABEL_8:
  CFLog();
  return v16;
}

float sub_1BBB2F330(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = (int *)(a3 + 228);
  if (!a3) {
    uint64_t v4 = (int *)(a1 + 324);
  }
  int v5 = *v4;
  uint64_t v6 = (int *)(a3 + 232);
  if (!a3) {
    uint64_t v6 = (int *)(a1 + 328);
  }
  int v7 = *v6;
  *(_DWORD *)(a2 + 4928) = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4932) = *(_DWORD *)(a1 + 4);
  *(void *)(a2 + 4944) = 0x2000000000000000;
  *(_DWORD *)(a2 + 4960) = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a2 + 4984) = v5;
  *(_DWORD *)(a2 + 4964) = *(_DWORD *)(a1 + 328);
  *(_DWORD *)(a2 + 4988) = v7;
  *(void *)(a2 + 4968) = *(void *)(a1 + 336);
  *(void *)(a2 + 4976) = *(void *)(a1 + 344);
  *(void *)(a2 + 4952) = 0x2000000000000000;
  uint64_t v8 = 28;
  if (a4 == 1) {
    uint64_t v8 = 32;
  }
  *(_DWORD *)(a2 + 4940) = *(_DWORD *)(a1 + v8);
  float result = *(float *)(a1 + v8);
  *(float *)(a2 + 4936) = result;
  return result;
}

uint64_t sub_1BBB2F3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = a1 + 207916;
  if (a4) {
    int v11 = *(_DWORD *)(a4 + 56);
  }
  else {
    int v11 = 0;
  }
  uint64_t v12 = 0;
  int v13 = *(unsigned __int8 *)(a1 + 207943);
  int v14 = v11 | v13;
  *(unsigned char *)(a2 + 1357) = v11 | v13;
  *(unsigned char *)(a2 + 1358) = 0;
  if (*(unsigned char *)(a3 + 577) != 1) {
    return v12;
  }
  double v15 = *(double *)(a4 + 312);
  if (v15 >= 1.0)
  {
    if (v15 >= 5.0)
    {
      if (v15 >= 10.0) {
        char v17 = 3;
      }
      else {
        char v17 = 2;
      }
      *(unsigned char *)(a1 + 207952) = v17;
      int v16 = 1;
    }
    else
    {
      int v16 = 0;
      *(unsigned char *)(a1 + 207952) = 1;
    }
  }
  else
  {
    int v16 = 0;
    *(unsigned char *)(a1 + 207952) = 0;
  }
  signed int v18 = *(_DWORD *)(a4 + 304);
  if ((*(_DWORD *)(*(void *)(a1 + 136) + 4852) - 1) >= 2)
  {
    if (HIWORD(v18)) {
      signed int v18 = (float)((float)((float)(v18 >> 16) * 0.00097656) * 1000.0) + 100;
    }
    else {
      signed int v18 = *(_DWORD *)(a3 + 620);
    }
  }
  *(_DWORD *)(a1 + 207956) = v18;
  *(unsigned char *)(a1 + 207960) = *(_DWORD *)(a4 + 372);
  *(_DWORD *)(a1 + 207964) = *(_DWORD *)(a4 + 376);
  *(_DWORD *)(a1 + 207968) = *(_DWORD *)(a4 + 380);
  *(_DWORD *)(a1 + 207972) = *(_DWORD *)(a4 + 384);
  if (v15 < 1.0) {
    goto LABEL_25;
  }
  float v19 = *(float *)(a4 + 28);
  if (v19 <= 0.0) {
    goto LABEL_25;
  }
  if (*(int *)a4 > 76999)
  {
    if (!v16)
    {
LABEL_25:
      *(_DWORD *)(a1 + 207944) = 0;
      goto LABEL_26;
    }
    float v20 = 3000.0 / v19;
    unsigned int v21 = (v18 - 100) >> 1;
  }
  else
  {
    float v20 = 3000.0 / v19;
    unsigned int v21 = v18 - 100;
  }
  if (v20 >= (float)v21) {
    goto LABEL_25;
  }
  *(_DWORD *)(a1 + 207944) = 3;
LABEL_26:
  char v22 = *(unsigned char *)(a1 + 207941);
  if (v22)
  {
    if (*(unsigned char *)(a4 + 69)) {
      char v22 = 0;
    }
    else {
      char v22 = *(unsigned char *)(a1 + 207942) != 0;
    }
  }
  *(unsigned char *)(a4 + 68) |= v22;
  *(unsigned char *)(a1 + 207940) = 0;
  if (*(_DWORD *)(a1 + 207944))
  {
    if (v14 || *(_DWORD *)(a1 + 207948) == -1) {
      *(_DWORD *)(a1 + 207948) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 207948) = -1;
    if (*(_DWORD *)v10)
    {
      *(unsigned char *)(a1 + 207940) = *(unsigned char *)(a4 + 68);
      *(_DWORD *)(a1 + 207920) = *(_DWORD *)(a4 + 88);
      uint64_t v23 = *(unsigned int *)(a4 + 88);
      if (v23 > 8)
      {
        *(_DWORD *)(a1 + 207920) = 0;
        uint64_t v12 = 4294958327;
        CFLog();
        return v12;
      }
      memcpy((void *)(a1 + 207924), (const void *)(a4 + 92), 2 * v23);
    }
  }
  int v24 = -1;
  if (!a5 || v14) {
    goto LABEL_41;
  }
  if (*(_DWORD *)(v10 + 28))
  {
    int v24 = a5;
    if (*(_DWORD *)(v10 + 32)) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  int v24 = a5;
  if (*(unsigned char *)(v10 + 24)) {
LABEL_41:
  }
    *(_DWORD *)(v10 + 60) = v24;
LABEL_42:
  uint64_t v25 = *(void *)(a1 + 5392);
  if (v25)
  {
    uint64_t v26 = *(void *)(a1 + 5416);
    int v27 = *(unsigned __int8 *)(a1 + 1057);
    BOOL v28 = v27 == 1;
    if (v27 == 1) {
      int v29 = 3;
    }
    else {
      int v29 = *(_DWORD *)(v25 + 744);
    }
    if (!v28 || *(unsigned char *)(a1 + 1624)) {
      goto LABEL_69;
    }
    if (!*(unsigned char *)(v25 + 760))
    {
      int v30 = *(_DWORD *)(a4 + 700);
      if (v30 >= 1)
      {
        int v31 = *(_DWORD *)(a4 + 704);
        if (v31 >= 1)
        {
          if (v30 >= v31) {
            int v30 = *(_DWORD *)(a4 + 704);
          }
          if (v30 <= 0x465) {
            int v29 = 1;
          }
          else {
            int v29 = 2;
          }
          goto LABEL_69;
        }
      }
      int v32 = *(_DWORD *)(v25 + 748);
      if (v32 < 641)
      {
        if (v32 < 481)
        {
          int v29 = 1;
          goto LABEL_69;
        }
        int v33 = *(_DWORD *)(v25 + 752);
      }
      else
      {
        int v33 = *(_DWORD *)(v25 + 752);
        if (v33 > 480)
        {
          int v29 = 2;
          goto LABEL_69;
        }
      }
      if (v33 <= 640) {
        int v29 = 1;
      }
      else {
        int v29 = 2;
      }
LABEL_69:
      if (v29 != *(_DWORD *)(v25 + 744))
      {
        *(_DWORD *)(v25 + 744) = v29;
        sub_1BBB0DB94(v25, 1, *(_DWORD *)(v26 + 368));
      }
    }
  }
  *(unsigned char *)(a2 + 26) = *(unsigned char *)(v10 + 36);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v10 + 40);
  *(unsigned char *)(a2 + 24) = 0;
  if (*(unsigned char *)(a3 + 615) && *(unsigned char *)(v10 + 25))
  {
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(v10 + 24);
    if (*(_DWORD *)(a2 + 1276) && *(_DWORD *)(v10 + 28) && !*(_DWORD *)(v10 + 32)) {
      *(unsigned char *)(a2 + 24) = 1;
    }
    uint64_t v12 = 0;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(v10 + 60);
  }
  else
  {
    uint64_t v12 = 0;
    if (*(unsigned char *)(v10 + 24)) {
      *(unsigned char *)(a2 + 1357) = 1;
    }
  }
  return v12;
}

void sub_1BBB2F7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    uint64_t v4 = a1 + 205800;
    uint64_t v5 = *(void *)(*(void *)(a1 + 205800) + 22824);
    if (v5)
    {
      uint64_t v7 = *(unsigned int *)(v5 + 12);
      if (v3 >= 0x10) {
        unsigned int v3 = 16;
      }
      *(_DWORD *)(a2 + 168) = v3;
      if (!*(unsigned char *)(a1 + 205832))
      {
        unint64_t v9 = 0;
        do
        {
          uint64_t valuePtr = *(void *)(a2 + 8 * v9 + 176);
          CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
          if (v10)
          {
            CFNumberRef v11 = v10;
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 16));
            if (Count >= 1)
            {
              CFIndex v13 = Count;
              CFIndex v14 = 0;
              while (1)
              {
                if (!*(unsigned char *)(*(void *)(v4 + 24) + v14))
                {
                  CFSetRef ValueAtIndex = (const __CFSet *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 16), v14);
                  if (ValueAtIndex)
                  {
                    if (CFSetContainsValue(ValueAtIndex, v11)) {
                      break;
                    }
                  }
                }
                if (v13 == ++v14) {
                  goto LABEL_14;
                }
              }
              *(unsigned char *)(*(void *)(v4 + 24) + v14) = 1;
            }
LABEL_14:
            CFRelease(v11);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(a2 + 168));
        *(unsigned char *)(v4 + 32) = 1;
        if (*(unsigned char *)(a3 + 615))
        {
          unint64_t v16 = 0;
          uint64_t v17 = *(void *)(v4 + 24);
          char v18 = 1;
          do
          {
            v18 &= *(unsigned char *)(v17 + v16);
            *(unsigned char *)(v4 + 32) = v18;
            ++v16;
          }
          while (v16 < *(unsigned __int8 *)(a3 + 615));
        }
      }
      uint64_t v19 = v5 + 216;
      if (v7)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          uint64_t v21 = *(void *)(v19 + 8 * i);
          if (v21)
          {
            if (*(unsigned char *)(v21 + 1394))
            {
              if (*(unsigned char *)(v21 + 1356))
              {
                if (!*(unsigned char *)(v21 + 25))
                {
                  uint64_t v22 = *(unsigned int *)(a2 + 168);
                  if (v22)
                  {
                    uint64_t v23 = (uint64_t *)(a2 + 176);
                    while (1)
                    {
                      uint64_t v24 = *v23++;
                      if (v24 == *(void *)(v21 + 1408)) {
                        break;
                      }
                      if (!--v22) {
                        goto LABEL_27;
                      }
                    }
                    *(unsigned char *)(v21 + 25) = 1;
                  }
                }
              }
            }
          }
LABEL_27:
          ;
        }
      }
      if (*(unsigned char *)(v4 + 133))
      {
        uint64_t v25 = *(void *)(v4 + 2320);
        if (!*(unsigned char *)(v25 + 3462))
        {
          if (v7 >= 0x10) {
            uint64_t v26 = 16;
          }
          else {
            uint64_t v26 = v7;
          }
          uint64_t v27 = (*(char *)(v25 + 32) + v26 - 1);
          if (*(char *)(v25 + 32) + (int)v26 - 1 <= 0)
          {
            *(_DWORD *)(v25 + 2976) = 1;
          }
          else
          {
            uint64_t v28 = 0;
            int v29 = 0;
            do
            {
              if (v26)
              {
                uint64_t v30 = 0;
                uint64_t v31 = *(void *)(v19 + 8 * v28);
                int v32 = (int *)(v25 + 224);
                while (1)
                {
                  int v33 = *v32;
                  v32 += 20;
                  if (v33 == *(_DWORD *)(v31 + 60)) {
                    break;
                  }
                  if (v26 == ++v30)
                  {
                    LODWORD(v30) = v26;
                    goto LABEL_50;
                  }
                }
                *(_DWORD *)(v25 + 224 + 80 * v30 + 44) = *(unsigned __int8 *)(v31 + 25);
              }
              else
              {
                LODWORD(v30) = 0;
              }
LABEL_50:
              if (v30 == v26) {
                int v29 = 1;
              }
              ++v28;
            }
            while (v28 != v27);
            *(_DWORD *)(v25 + 2976) = 1;
            if (v29 == 1 && v26)
            {
              uint64_t v34 = (_DWORD *)(v25 + 268);
              do
              {
                *uint64_t v34 = 0;
                v34 += 20;
                --v26;
              }
              while (v26);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1BBB2FA50(uint64_t a1, uint64_t a2, int a3, uint64_t a4, BOOL *a5)
{
  BOOL v5 = 0;
  valuePtr[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 205512;
  uint64_t v7 = *(void *)(a1 + 205800);
  uint64_t v8 = *(void *)(a1 + 205808);
  uint64_t v9 = *(void *)(a1 + 205840);
  uint64_t v10 = *(void *)(a1 + 136);
  unsigned int v11 = *(unsigned __int8 *)(v9 + 1368);
  if (v11 <= 7)
  {
    if (((1 << v11) & 0x21) != 0)
    {
      if (!*(unsigned char *)(v10 + 233))
      {
        if (v11 == 1) {
          goto LABEL_8;
        }
        goto LABEL_45;
      }
LABEL_11:
      BOOL v5 = 1;
      goto LABEL_12;
    }
    if (((1 << v11) & 0x42) != 0) {
      goto LABEL_8;
    }
    if (((1 << v11) & 0x84) != 0)
    {
      if (!*(unsigned char *)(v10 + 232))
      {
        if (v11 == 5)
        {
          int v12 = *(unsigned __int8 *)(v10 + 233);
          goto LABEL_9;
        }
        if (v11 == 6)
        {
LABEL_8:
          int v12 = *(unsigned __int8 *)(v10 + 234);
LABEL_9:
          BOOL v5 = v12 != 0;
          goto LABEL_12;
        }
LABEL_45:
        BOOL v5 = 0;
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
LABEL_12:
  *(unsigned char *)(v9 + 1416) = v5;
  uint64_t v317 = v10;
  if (*(unsigned char *)(v9 + 1393) && *(_DWORD *)(v9 + 1276))
  {
    uint64_t v13 = *(void *)(v7 + 22824);
    uint64_t v14 = *(unsigned int *)(v13 + 12);
    if ((int)v14 < 1) {
      goto LABEL_28;
    }
    double v15 = (uint64_t *)(v13 + 216);
    unint64_t v16 = v15;
    uint64_t v17 = v14;
    do
    {
      uint64_t v18 = *v16;
      if (*v16) {
        BOOL v19 = v18 == v9;
      }
      else {
        BOOL v19 = 1;
      }
      if (!v19)
      {
        *(unsigned char *)(v18 + 1394) = 0;
        *(unsigned char *)(v18 + 1398) = 0;
        *(unsigned char *)(v18 + 1356) = 0;
        *(_DWORD *)uint64_t v18 = 0;
        *(void *)(v18 + 12) = 0;
        *(void *)(v18 + 19) = 0;
        *(_DWORD *)(v18 + 28) = 150;
        *(unsigned char *)(v18 + 4) = 1;
        *(_DWORD *)(v18 + 8) = 0;
        *(_DWORD *)(v18 + 64) = -1;
        *(_DWORD *)(v18 + 40) = 0;
        *(void *)(v18 + 56) = -1;
      }
      ++v16;
      --v17;
    }
    while (v17);
    int v20 = 0;
    uint64_t v21 = v15;
    uint64_t v22 = v14;
    do
    {
      if (*v21 == v9) {
        v15[v20++] = v9;
      }
      ++v21;
      --v22;
    }
    while (v22);
    if (v20 == 1) {
      *(_DWORD *)(*(void *)(v7 + 22824) + 12) = 1;
    }
    else {
LABEL_28:
    }
      CFLog();
  }
  uint64_t v322 = v7;
  int v316 = (int8x16_t *)(v7 + 23112);
  uint64_t v321 = v9;
  if (*(unsigned char *)(v10 + 577) != 1) {
    goto LABEL_114;
  }
  if (!*(unsigned char *)(v10 + 615)) {
    goto LABEL_114;
  }
  uint64_t v23 = *(void *)(v6 + 328);
  if (!v23) {
    goto LABEL_114;
  }
  uint64_t v24 = *(void *)(v7 + 22824);
  uint64_t v25 = (void *)(v24 + 216);
  uint64_t v26 = *(unsigned int *)(v24 + 12);
  *(unsigned char *)(v23 + 25) = 0;
  if ((int)v26 >= 1)
  {
    uint64_t v27 = (void *)(v24 + 216);
    uint64_t v28 = v26;
    do
    {
      int v29 = (unsigned char *)*v27;
      if (!*v27) {
        break;
      }
      if (v29[1394] && !v29[1356]) {
        v29[12] = 0;
      }
      ++v27;
      --v28;
    }
    while (v28);
    for (uint64_t i = 0; v26 != i; ++i)
    {
      uint64_t v31 = v25[i];
      if (!v31) {
        break;
      }
      if (*(unsigned char *)(v31 + 13))
      {
        if (i == -1) {
          break;
        }
        uint64_t v32 = v25[(int)i];
        if (!v32) {
          break;
        }
        int v33 = (_WORD *)(v32 + 20);
        if (*(__int16 *)(v32 + 20) >= 91)
        {
          uint64_t v34 = 0;
          int v35 = -2147483647;
          int v36 = -1;
          do
          {
            uint64_t v37 = v25[v34];
            if (!v37) {
              break;
            }
            if (*(unsigned char *)(v37 + 1394))
            {
              if (*(unsigned char *)(v37 + 1398))
              {
                if (*(unsigned char *)(v37 + 1356))
                {
                  if (*(unsigned char *)(v37 + 25))
                  {
                    if (!*(unsigned char *)(v37 + 14))
                    {
                      int v38 = *(_DWORD *)(v37 + 1288);
                      if (v38 > *(_DWORD *)(v32 + 1288)
                        && *(_DWORD *)(v37 + 1264) < (3 * *(_DWORD *)(v6 + 372)) >> 1
                        && v38 > v35)
                      {
                        int v35 = *(_DWORD *)(v37 + 1288);
                        int v36 = v34;
                      }
                    }
                  }
                }
              }
            }
            ++v34;
          }
          while (v26 != v34);
          if (v36 != -1)
          {
            uint64_t v39 = v25[v36];
            if (v39)
            {
              *(unsigned char *)(v39 + 13) = 1;
              *(_WORD *)(v39 + 20) = 0;
              *(unsigned char *)(v32 + 13) = 0;
              goto LABEL_66;
            }
          }
        }
        goto LABEL_67;
      }
    }
  }
  uint64_t v40 = sub_1BBB0F5CC(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
  if (v40 && *(_DWORD *)(v40 + 1276))
  {
    *(unsigned char *)(v40 + 13) = 1;
    int v33 = (_WORD *)(v40 + 20);
LABEL_66:
    *int v33 = 0;
  }
LABEL_67:
  unsigned int v41 = *(unsigned __int8 *)(v10 + 4827);
  if (*(unsigned char *)(v10 + 4827))
  {
    unsigned int v42 = sub_1BBB0F44C(v26, v25);
    if ((int)v26 >= 1)
    {
      unsigned int v43 = 0;
      BOOL v44 = v25;
      uint64_t v45 = v26;
      do
      {
        if (!*v44) {
          break;
        }
        if (*(unsigned char *)(*v44 + 14)) {
          ++v43;
        }
        ++v44;
        --v45;
      }
      while (v45);
      if (v42 >= 2 && v43 < v41)
      {
        uint64_t v46 = 0;
        int v47 = 0x7FFFFFFF;
        int v48 = -1;
        do
        {
          uint64_t v49 = v25[v46];
          if (!v49) {
            break;
          }
          if (*(unsigned char *)(v49 + 1394))
          {
            if (*(unsigned char *)(v49 + 1398))
            {
              if (*(unsigned char *)(v49 + 1356))
              {
                if (*(unsigned char *)(v49 + 25))
                {
                  if (!*(unsigned char *)(v49 + 14) && !*(unsigned char *)(v49 + 13))
                  {
                    int v50 = *(_DWORD *)(v49 + 1288);
                    if (v50 < *(_DWORD *)(v23 + 1288) && v50 < v47)
                    {
                      int v47 = v50;
                      int v48 = v46;
                    }
                  }
                }
              }
            }
          }
          ++v46;
        }
        while (v26 != v46);
        if (v48 != -1)
        {
          uint64_t v51 = v25[v48];
          if (v51)
          {
            *(unsigned char *)(v51 + 14) = 1;
            *(unsigned char *)(v51 + 15) = v43;
          }
        }
      }
    }
  }
  int v52 = *(unsigned __int8 *)(v23 + 1368);
  if (v52 == 7 || v52 == 2)
  {
    if ((*(unsigned char *)(v23 + 1393) || !*(_DWORD *)(v23 + 1276)) && *(unsigned char *)(v6 + 2575))
    {
LABEL_113:
      *(unsigned char *)(v23 + 12) = 1;
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  int v54 = *(_DWORD *)(v23 + 1288);
  if ((int)v26 < 1)
  {
    unsigned int v55 = 0;
  }
  else
  {
    unsigned int v55 = 0;
    signed int v56 = v25;
    uint64_t v57 = v26;
    do
    {
      uint64_t v58 = *v56;
      if (!*v56) {
        break;
      }
      if (*(unsigned char *)(v58 + 1394) && *(unsigned char *)(v58 + 1398) && *(unsigned char *)(v58 + 1356) && *(_DWORD *)(v58 + 1288) < v54) {
        ++v55;
      }
      ++v56;
      --v57;
    }
    while (v57);
  }
  if (v55 < *(unsigned __int8 *)(v10 + 615)) {
    goto LABEL_113;
  }
  if (!*(unsigned char *)(v6 + 320))
  {
    *(unsigned char *)(v23 + 12) = 1;
    uint64_t v276 = sub_1BBB0F658(v54, v26, (uint64_t)v25);
    if (v276)
    {
      *(unsigned char *)(v276 + 12) = 0;
      *(_DWORD *)(v23 + 56) = *(_DWORD *)(v276 + 60);
    }
    else
    {
      *(unsigned char *)(v23 + 12) = 0;
    }
    goto LABEL_114;
  }
  int v319 = *(_DWORD *)(v23 + 28);
  uint64_t v139 = sub_1BBB0AA4C(v8, v23);
  unsigned int v140 = *(_DWORD *)(v23 + 1276);
  if (v140 < 0x1E)
  {
    int v141 = 0;
    unsigned int v142 = 0;
  }
  else
  {
    int v141 = 0;
    if (*(_DWORD *)(v23 + 1300))
    {
      unsigned int v142 = 0;
      if (v139)
      {
        unsigned int v142 = *(_DWORD *)(v23 + 1264);
        if (*(double *)(*(void *)(a1 + 152) + 384) > (double)(int)*(float *)(v139 + 1364)
          && *(unsigned char *)(v6 + 380)
          && (int v143 = *(_DWORD *)(v139 + 1264), 10 * v143 < (11 * *(_DWORD *)(v6 + 368)))
          && 10 * v142 < 11 * v143)
        {
          int v141 = 1;
          *(unsigned char *)(v23 + 12) = 1;
          *(_DWORD *)(v6 + 368) = 0;
          unsigned int v140 = *(_DWORD *)(v23 + 1276);
        }
        else
        {
          int v141 = 0;
        }
        HIDWORD(v277) = -286331153 * v140;
        LODWORD(v277) = -286331153 * v140;
        if ((v277 >> 1) < 0x8888889)
        {
          unsigned int v278 = -1;
          *(_DWORD *)(v6 + 368) = -1;
          *(unsigned char *)(v6 + 380) = 0;
        }
        else
        {
          unsigned int v278 = *(_DWORD *)(v6 + 368);
        }
        if (v142 < v278)
        {
          *(_DWORD *)(v6 + 368) = v142;
LABEL_589:
          if (*(_DWORD *)(v23 + 1276) % 0x1Eu >= 0xF && !*(unsigned char *)(v6 + 380)) {
            *(unsigned char *)(v6 + 380) = 1;
          }
          goto LABEL_592;
        }
        if (v142 <= v278) {
          goto LABEL_589;
        }
      }
    }
    else
    {
      unsigned int v142 = 0;
    }
  }
LABEL_592:
  unsigned int v280 = (unsigned char *)(v23 + 12);
  int v279 = *(unsigned __int8 *)(v23 + 12);
  if (!*(unsigned char *)(v23 + 12))
  {
    if (*(_DWORD *)(v23 + 1276) < 0x1Eu) {
      goto LABEL_114;
    }
    if (*(_DWORD *)(v6 + 2432))
    {
      if (*(_DWORD *)(v6 + 2436)) {
        goto LABEL_114;
      }
    }
    else
    {
      uint64_t v295 = sub_1BBB0F6E4(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
      if (!v295) {
        goto LABEL_114;
      }
      unsigned int v296 = *(unsigned __int8 *)(*(void *)(v6 + 288) + 24555);
      if (v296 < 2) {
        goto LABEL_114;
      }
      int v297 = *(_DWORD *)(v23 + 1332) - *(_DWORD *)(v295 + 1332);
      int v298 = *(_DWORD *)(v23 + 1336);
      int v299 = v298 * v319 / 1000 / (int)(v296 - 1);
      int v300 = v298 / 3;
      if (v297 < v299 || v297 <= v300) {
        goto LABEL_114;
      }
    }
    int v141 = 0;
    int v279 = 1;
    *unsigned int v280 = 1;
  }
  int v281 = sub_1BBB0F44C(v26, v25);
  int v282 = *(unsigned __int8 *)(v10 + 615);
  if (v281 == v282)
  {
    uint64_t v309 = v6;
    int v283 = *(_DWORD *)(v23 + 1288);
    int v284 = *(_DWORD *)(v23 + 1332);
    int v285 = *(_DWORD *)(v23 + 1336);
    unsigned __int8 v286 = v282 - *(unsigned char *)(v10 + 4827);
    if ((int)v26 >= 1)
    {
      uint64_t v287 = 0;
      while (1)
      {
        uint64_t v288 = v25[v287];
        if (!v288) {
          goto LABEL_613;
        }
        if (*(unsigned char *)(v288 + 13)) {
          break;
        }
        if (v26 == ++v287) {
          goto LABEL_613;
        }
      }
      if (v287 == -1 || !v25[(int)v287]) {
        goto LABEL_613;
      }
      int v289 = *(_DWORD *)(v23 + 1288);
      if (v286 >= 3u)
      {
        uint64_t v290 = sub_1BBB0F538(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
        if (!v290) {
          goto LABEL_610;
        }
        int v289 = *(_DWORD *)(v290 + 1288);
      }
      uint64_t v291 = sub_1BBB0F4A4(v289, v26, (uint64_t)v25);
      if (v291) {
        goto LABEL_618;
      }
LABEL_610:
      uint64_t v291 = sub_1BBB0F658(v283, v26, (uint64_t)v25);
      unsigned __int16 v292 = (unsigned char *)(v23 + 12);
      if (!v291) {
        goto LABEL_619;
      }
      unsigned __int16 v292 = (unsigned char *)(v23 + 12);
      if (v284 - *(_DWORD *)(v291 + 1332) <= 2 * v285 * v319 / 1000) {
        goto LABEL_619;
      }
      goto LABEL_618;
    }
LABEL_613:
    uint64_t v291 = sub_1BBB0F658(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
    if (v291 && v284 - *(_DWORD *)(v291 + 1332) > 2 * v285 * v319 / 1000
      || (unsigned __int16 v292 = (unsigned char *)(v23 + 12), v286 >= 2u)
      && (v293 = sub_1BBB0F538(v283, v26, (uint64_t)v25), unsigned __int16 v292 = (unsigned char *)(v23 + 12), v293)
      && (uint64_t v291 = sub_1BBB0F4A4(*(_DWORD *)(v293 + 1288), v26, (uint64_t)v25), v292 = (unsigned char *)(v23 + 12), v291))
    {
LABEL_618:
      *(_DWORD *)(v23 + 56) = *(_DWORD *)(v291 + 60);
      unsigned __int16 v292 = (unsigned char *)(v291 + 12);
    }
LABEL_619:
    *unsigned __int16 v292 = 0;
    int v279 = *v280;
    uint64_t v6 = v309;
    uint64_t v9 = v321;
  }
  if (v141 && v279)
  {
    int v294 = *(_DWORD *)(v6 + 376);
    *(_DWORD *)(v6 + 376) = v294 + 1;
    *(_DWORD *)(v6 + 372) = (v142 + *(_DWORD *)(v6 + 372) * v294) / (v294 + 1);
  }
LABEL_114:
  if (!v9) {
    goto LABEL_513;
  }
  uint64_t v59 = v322;
  int v60 = (int8x16_t *)(v322 + 22840);
  CFArrayRef theArray = *(const __CFArray **)(v6 + 304);
  uint64_t v304 = *(void *)(v6 + 312);
  uint64_t v61 = *(void *)(v322 + 22824);
  uint64_t v62 = *(unsigned int *)(v61 + 12);
  int v63 = *(unsigned __int8 *)(v9 + 1368);
  __int32 v303 = v316[36].i32[2];
  if (*(unsigned char *)(v9 + 1394) && (v63 == 5 || !*(unsigned char *)(v9 + 1368)) && (int v64 = *(char *)(v10 + 239), v64 >= 1))
  {
    if (v64 > *(char *)(v10 + 238)) {
      LOBYTE(v64) = 0;
    }
    int v310 = v64;
  }
  else
  {
    int v310 = 0;
  }
  uint64_t v65 = v61 + 216;
  int v66 = *(_DWORD *)(v10 + 372);
  bzero((void *)(v322 + 22840), 0x220uLL);
  uint64_t v308 = v6;
  if (v63 != 6 && v63 != 1)
  {
    if (*(unsigned char *)(v9 + 1354))
    {
      switch(v63)
      {
        case 0:
        case 5:
          goto LABEL_134;
        case 2:
        case 7:
          goto LABEL_132;
        default:
          goto LABEL_133;
      }
    }
    switch(v63)
    {
      case 0:
      case 5:
        break;
      case 2:
      case 7:
        if (*(unsigned char *)(v9 + 1393)) {
          goto LABEL_133;
        }
        break;
      default:
        goto LABEL_133;
    }
    if ((int)v62 < 1)
    {
      int v94 = 0;
    }
    else
    {
      int v94 = 0;
      int v95 = 0;
      int v96 = *(_DWORD *)(v321 + 1300);
      do
      {
        if (v66 == 1)
        {
          uint64_t v97 = 0;
          int v98 = -2147483647;
          int v99 = -1;
          do
          {
            uint64_t v100 = *(void *)(v65 + 8 * v97);
            if (!v100) {
              break;
            }
            if ((*(unsigned char *)(v100 + 1402) || *(unsigned char *)(v100 + 1398))
              && !*(unsigned char *)(v100 + 98)
              && *(unsigned char *)(v100 + 1394)
              && !*(unsigned char *)(v100 + 1356)
              && *(_DWORD *)(v100 + 1300) < v96
              && *(_DWORD *)(v100 + 1300) > v98)
            {
              int v98 = *(_DWORD *)(v100 + 1300);
              int v99 = v97;
            }
            ++v97;
          }
          while (v62 != v97);
        }
        else
        {
          uint64_t v101 = 0;
          int v98 = -2147483647;
          int v99 = -1;
          do
          {
            uint64_t v102 = *(void *)(v65 + 8 * v101);
            if (!v102) {
              break;
            }
            if (*(unsigned char *)(v102 + 1398))
            {
              if (!*(unsigned char *)(v102 + 98))
              {
                if (*(unsigned char *)(v102 + 1394))
                {
                  if (!*(unsigned char *)(v102 + 1356))
                  {
                    int v103 = *(_DWORD *)(v102 + 1300);
                    if (v103 < v96 && v103 > v98)
                    {
                      int v98 = v103;
                      int v99 = v101;
                    }
                  }
                }
              }
            }
            ++v101;
          }
          while (v62 != v101);
        }
        int v96 = v98;
        if (v99 == -1) {
          break;
        }
        char v104 = *(int32x2_t **)(v65 + 8 * v99);
        if (!v104) {
          break;
        }
        if (!v104[12].i8[1] || *(void *)&v104[168])
        {
          if (sub_1BBB0F764(v104))
          {
LABEL_325:
            char v126 = 0;
            uint64_t v125 = 4294958327;
            uint64_t v9 = v321;
            uint64_t v59 = v322;
            goto LABEL_326;
          }
          if (v94 <= 33) {
            v60->i64[v94++] = (uint64_t)v104;
          }
        }
        ++v95;
      }
      while (v95 != v62);
    }
    uint64_t v67 = v94;
    int v273 = -1000;
    uint64_t v9 = v321;
    uint64_t v59 = v322;
    while (1)
    {
      uint64_t v274 = sub_1BBB0F3D0(v273, v62, v65);
      if (!v274) {
        break;
      }
      uint64_t v275 = v274;
      int v273 = *(_DWORD *)(v274 + 1308);
      if ((!*(unsigned char *)(v275 + 97) || *(void *)(v275 + 1344)) && v67 <= 33)
      {
        v60->i64[v67++] = v275;
        *(unsigned char *)(v275 + 1354) = 0;
        *(unsigned char *)(v275 + 96) = 0;
      }
    }
    v316[34].i32[0] = v67;
    v316[34].i32[2] = v67;
    v316[34].i32[1] = 0;
    v316[34].i32[3] = 0;
    goto LABEL_284;
  }
  if (!*(unsigned char *)(v9 + 1354))
  {
    if ((int)v62 < 1)
    {
      LODWORD(v67) = 0;
    }
    else
    {
      uint64_t v76 = v9;
      int v77 = 0;
      int v78 = 0;
      int v79 = 0;
      int v80 = *(_DWORD *)(v76 + 1288);
      int v81 = v80;
      do
      {
        __int16 v82 = (int32x2_t *)sub_1BBB0F34C(v80, v62, v65);
        if (v82)
        {
          int v83 = v82;
          if (!v82[169].i8[4])
          {
            if (v82[12].i8[1] && !*(void *)&v82[168])
            {
              int v80 = v82[161].i32[0];
            }
            else
            {
              if (v78 <= 33)
              {
                v60->i64[v78] = (uint64_t)v82;
                if (v80 >= v82[161].i32[0]) {
                  int v80 = v82[161].i32[0];
                }
                ++v78;
              }
              if (sub_1BBB0F764(v82)) {
                goto LABEL_325;
              }
              if (v80 >= v83[161].i32[0]) {
                int v80 = v83[161].i32[0];
              }
            }
          }
        }
        uint64_t v84 = 0;
        int v85 = 0x7FFFFFFF;
        int v86 = -1;
        do
        {
          uint64_t v87 = *(void *)(v65 + 8 * v84);
          if (!v87) {
            goto LABEL_178;
          }
          if (*(unsigned char *)(v87 + 1398) || *(unsigned char *)(v87 + 1402))
          {
            if (*(unsigned char *)(v87 + 1394))
            {
              int v88 = *(_DWORD *)(v87 + 1288);
              if (v88 > v81 && !*(unsigned char *)(v87 + 98))
              {
                BOOL v89 = v86 == -1 || v88 < v85;
                if (v89)
                {
                  int v85 = v88;
                  int v86 = v84;
                }
              }
            }
          }
          ++v84;
        }
        while (v62 != v84);
        if (v86 != -1)
        {
LABEL_178:
          int v91 = *(int32x2_t **)(v65 + 8 * v86);
          if (v91 && !v91[169].i8[4])
          {
            if (v91[12].i8[1] && !*(void *)&v91[168])
            {
              int v81 = v91[161].i32[0];
            }
            else
            {
              if (v77 <= 33)
              {
                *(void *)(v322 + 8 * v77 + 23112) = v91;
                if (v81 <= v91[161].i32[0]) {
                  int v81 = v91[161].i32[0];
                }
                ++v77;
              }
              if (sub_1BBB0F764(v91)) {
                goto LABEL_325;
              }
              __int32 v92 = v91[161].i32[1];
              __int32 v93 = v91[162].i32[0];
              if (v92 <= v93)
              {
                if (v81 <= v93) {
                  int v81 = v91[162].i32[0];
                }
              }
              else if (v81 <= v92)
              {
                int v81 = v91[161].i32[1];
              }
            }
          }
        }
        ++v79;
      }
      while (v79 != v62);
      LODWORD(v67) = v78;
      uint64_t v59 = v322;
      if (v77 >= 1)
      {
        int v127 = 0;
        LODWORD(v67) = v78;
        do
        {
          if ((int)v67 <= 33)
          {
            uint64_t v128 = v322 + 8 * v127++;
            v60->i64[(int)v67] = *(void *)(v128 + 23112);
            LODWORD(v67) = v67 + 1;
          }
        }
        while (v127 < v77);
      }
      if (v78 >= 1)
      {
        int v129 = 0;
        do
        {
          if (v77 <= 33)
          {
            uint64_t v130 = v60->i64[v129++];
            uint64_t v131 = v322 + 8 * v77++;
            *(void *)(v131 + 23112) = v130;
          }
        }
        while (v129 < v78);
      }
      BOOL v19 = v77 == v67;
      uint64_t v9 = v321;
      if (!v19)
      {
LABEL_298:
        char v126 = 0;
        uint64_t v125 = 4294958327;
        goto LABEL_326;
      }
    }
    int v132 = -1000;
    int v133 = v67;
    while (1)
    {
      CFNumberRef v134 = (int32x2_t *)sub_1BBB0F3D0(v132, v62, v65);
      if (!v134)
      {
        if ((int)v67 >= 2)
        {
          uint64_t v137 = v67;
          int32x2_t v138 = (void *)(v322 + 22840);
          do
          {
            if (*v138 != v138[34]) {
              goto LABEL_315;
            }
            ++v138;
            --v137;
          }
          while (v137);
          *int v316 = vextq_s8(*v60, *v60, 8uLL);
        }
LABEL_315:
        v316[34].i32[0] = v67;
        v316[34].i32[2] = v67;
        v316[34].i32[1] = v133;
        v316[34].i32[3] = v133;
        goto LABEL_284;
      }
      uint64_t v135 = v134;
      if (!v134[12].i8[1] || *(void *)&v134[168])
      {
        if ((int)v67 <= 33)
        {
          v60->i64[(int)v67] = (uint64_t)v134;
          LODWORD(v67) = v67 + 1;
        }
        if (v133 <= 33)
        {
          uint64_t v136 = v59 + 8 * v133++;
          *(void *)(v136 + 23112) = v134;
        }
        if (sub_1BBB0F764(v134)) {
          goto LABEL_298;
        }
      }
      int v132 = v135[163].i32[1];
    }
  }
  if (((1 << v63) & 0x21) != 0)
  {
LABEL_134:
    LODWORD(v67) = 0;
    int v68 = *(_DWORD *)(v9 + 1300);
    int v69 = *(unsigned __int8 *)(v9 + 101);
    int v323 = v68 + 1;
    LODWORD(valuePtr[0]) = v68;
    BOOL v70 = 1;
    BOOL v71 = 1;
    while (1)
    {
      if (v71)
      {
        uint64_t v72 = sub_1BBB0FACC(v69, (int *)valuePtr, v62, v65);
        uint64_t v73 = v72;
        if (v72 && (int)v67 <= 33)
        {
          v60->i64[(int)v67] = v72;
          *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v69;
          sub_1BBB0F9BC(v72);
          LODWORD(v67) = v67 + 1;
        }
        if (v70)
        {
LABEL_140:
          uint64_t v74 = sub_1BBB0FACC(v69 == 0, &v323, v62, v65);
          uint64_t v75 = v74;
          if (v74 && (int)v67 <= 33)
          {
            v60->i64[(int)v67] = v74;
            *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v69 == 0;
            sub_1BBB0F9BC(v74);
            LODWORD(v67) = v67 + 1;
          }
          goto LABEL_145;
        }
      }
      else
      {
        uint64_t v73 = 0;
        if (v70) {
          goto LABEL_140;
        }
      }
      uint64_t v75 = 0;
LABEL_145:
      BOOL v71 = v73 != 0;
      BOOL v70 = v75 != 0;
      if (!(v73 | v75))
      {
        v316[34].i32[0] = v67;
        v316[34].i32[2] = v67;
        v316[34].i32[1] = 0;
        v316[34].i32[3] = 0;
        uint64_t v9 = v321;
        goto LABEL_283;
      }
    }
  }
  if (((1 << v63) & 0x42) == 0)
  {
    if (((1 << v63) & 0x84) == 0) {
      goto LABEL_133;
    }
LABEL_132:
    if (*(unsigned char *)(v9 + 1393))
    {
LABEL_133:
      LODWORD(v67) = 0;
      *(_OWORD *)(v322 + 23656) = 0u;
      goto LABEL_284;
    }
    goto LABEL_134;
  }
  int v314 = (int8x16_t *)(v322 + 22840);
  int v105 = 0;
  int v106 = 0;
  LODWORD(v67) = 0;
  int v107 = *(unsigned __int8 *)(v9 + 101);
  BOOL v318 = *(unsigned char *)(v9 + 101) == 0;
  LODWORD(valuePtr[0]) = *(_DWORD *)(v9 + 1288);
  int v323 = LODWORD(valuePtr[0]) + 1;
  uint64_t v108 = v9;
  do
  {
    if (v106)
    {
      if (!v9)
      {
        BOOL v109 = 0;
        int v106 = 1;
        goto LABEL_243;
      }
      goto LABEL_239;
    }
    uint64_t v110 = sub_1BBB0F88C(v107, (int *)valuePtr, v62, v65, v321);
    if (!v110)
    {
      LODWORD(valuePtr[0]) = *(_DWORD *)(v321 + 1288);
LABEL_239:
      uint64_t v9 = sub_1BBB0F924(v107, (int *)valuePtr, v62, v65);
      int v106 = 1;
      goto LABEL_240;
    }
    uint64_t v9 = v110;
    int v106 = 0;
LABEL_240:
    BOOL v109 = v9 != 0;
    if (v9 && (int)v67 <= 33)
    {
      v314->i64[(int)v67] = v9;
      *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v107;
      sub_1BBB0F9BC(v9);
      LODWORD(v67) = v67 + 1;
      BOOL v109 = 1;
    }
LABEL_243:
    if (v105)
    {
      if (!v108)
      {
        BOOL v111 = 0;
        int v105 = 1;
        continue;
      }
      goto LABEL_249;
    }
    uint64_t v112 = sub_1BBB0F88C(v318, &v323, v62, v65, v321);
    if (!v112)
    {
      int v323 = *(_DWORD *)(v321 + 1288);
LABEL_249:
      uint64_t v108 = sub_1BBB0F924(v318, &v323, v62, v65);
      int v105 = 1;
      goto LABEL_250;
    }
    uint64_t v108 = v112;
    int v105 = 0;
LABEL_250:
    BOOL v111 = v108 != 0;
    if (v108 && (int)v67 <= 33)
    {
      v314->i64[(int)v67] = v108;
      *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v318;
      sub_1BBB0F9BC(v108);
      LODWORD(v67) = v67 + 1;
      BOOL v111 = 1;
    }
  }
  while (v109 || v111);
  int v113 = 0;
  int v114 = 0;
  int v115 = 0;
  uint64_t v116 = v321;
  int v323 = *(_DWORD *)(v321 + 1288);
  LODWORD(valuePtr[0]) = v323;
  uint64_t v305 = v322 + 22840;
  uint64_t v117 = v321;
  do
  {
    if (v114)
    {
      if (!v116)
      {
        BOOL v118 = 0;
        int v114 = 1;
        goto LABEL_265;
      }
      goto LABEL_261;
    }
    uint64_t v119 = sub_1BBB0F924(v107, (int *)valuePtr, v62, v65);
    if (!v119)
    {
      LODWORD(valuePtr[0]) = *(_DWORD *)(v321 + 1288);
LABEL_261:
      uint64_t v116 = sub_1BBB0F88C(v107, (int *)valuePtr, v62, v65, v321);
      int v114 = 1;
      goto LABEL_262;
    }
    uint64_t v116 = v119;
    int v114 = 0;
LABEL_262:
    BOOL v118 = v116 != 0;
    if (v116 && v115 <= 33)
    {
      *(void *)(v305 + 8 * v115 + 272) = v116;
      *(_DWORD *)(v305 + 4 * v115 + 680) = v107;
      sub_1BBB0F9BC(v116);
      ++v115;
      BOOL v118 = 1;
    }
LABEL_265:
    if (v113)
    {
      if (!v117)
      {
        BOOL v120 = 0;
        int v113 = 1;
        continue;
      }
      goto LABEL_271;
    }
    uint64_t v121 = sub_1BBB0F924(v318, &v323, v62, v65);
    if (!v121)
    {
      int v323 = *(_DWORD *)(v321 + 1288) + 1;
LABEL_271:
      uint64_t v117 = sub_1BBB0F88C(v318, &v323, v62, v65, v321);
      int v113 = 1;
      goto LABEL_272;
    }
    uint64_t v117 = v121;
    int v113 = 0;
LABEL_272:
    BOOL v120 = v117 != 0;
    if (v117 && v115 <= 33)
    {
      *(void *)(v322 + 22840 + 8 * v115 + 272) = v117;
      *(_DWORD *)(v322 + 22840 + 4 * v115 + 680) = v318;
      sub_1BBB0F9BC(v117);
      ++v115;
      BOOL v120 = 1;
    }
  }
  while (v118 || v120);
  uint64_t v9 = v321;
  int v60 = (int8x16_t *)(v322 + 22840);
  if ((int)v67 >= 2)
  {
    uint64_t v122 = v67;
    int v123 = &v316[25].i32[2];
    int v124 = (void *)(v322 + 22840);
    while (*v124 == v124[34] && *(v123 - 34) == *v123)
    {
      ++v123;
      ++v124;
      if (!--v122)
      {
        *int v316 = vextq_s8(*v314, *v314, 8uLL);
        *(int32x2_t *)(v322 + 23520) = vrev64_s32(*(int32x2_t *)(v322 + 23384));
        break;
      }
    }
  }
  v316[34].i32[0] = v67;
  v316[34].i32[2] = v67;
  v316[34].i32[1] = v115;
  v316[34].i32[3] = v115;
LABEL_283:
  uint64_t v59 = v322;
LABEL_284:
  uint64_t v125 = 0;
  char v126 = 1;
  if (v310 && (int)v67 >= v310)
  {
    uint64_t v125 = 0;
    v316[34].i32[2] = v310;
    char v126 = 1;
  }
LABEL_326:
  char v315 = v126;
  CFNumberRef v144 = *(void **)(v59 + 24544);
  if (v144)
  {
    do
    {
      unint64_t v145 = (void *)v144[3];
      free(v144);
      CFNumberRef v144 = v145;
    }
    while (v145);
  }
  *(_WORD *)(v322 + 24536) = 0;
  *(void *)(v59 + 24544) = 0;
  if (*(unsigned __int8 *)(v10 + 235) >= 3u)
  {
    int v146 = *(unsigned __int8 *)(v9 + 1368);
    if (v146 == 5 || v146 == 0)
    {
      unint64_t v148 = v316[34].u32[0];
      uint64_t v149 = sub_1BBB0F34C(*(_DWORD *)(v9 + 1288), *(_DWORD *)(*(void *)(v59 + 22824) + 12), *(void *)(v59 + 22824) + 216);
      if (v149)
      {
        if (v60->i64[0] != v149)
        {
          if ((int)v148 <= 0)
          {
            v60->i64[0] = v149;
          }
          else
          {
            unint64_t v150 = v148;
            do
            {
              BOOL v89 = v150 > 1;
              v60->i64[v150] = v60->i64[(v150 - 1)];
              --v150;
            }
            while (v89);
            *(void *)(v59 + 22840) = v149;
            uint64_t v151 = (v148 + 1) - 1;
            __int32 v152 = (uint64_t *)(v59 + 22848);
            int v153 = 1;
            do
            {
              if (*v152 != v149) {
                v60->i64[v153++] = *v152;
              }
              ++v152;
              --v151;
            }
            while (v151);
          }
          int v154 = *(_DWORD *)(v9 + 1304);
          int v155 = *(_DWORD *)(v149 + 1304);
          if (v155 <= v154) {
            __int32 v156 = 0;
          }
          else {
            __int32 v156 = v303 + 1;
          }
          int v157 = v155 - v156;
          *(unsigned char *)(v322 + 24536) = 1;
          BOOL v89 = v154 < v157;
          int v158 = v154 + v303 + 1 + ~v157;
          int v159 = v154 - v157 - 1;
          if (!v89) {
            int v158 = v159;
          }
          *(_DWORD *)(v322 + 24008) = v158;
          *(void *)(v59 + 23744) = 0x300000000;
        }
      }
    }
  }
  uint64_t v320 = v125;
  if (*(unsigned char *)(v10 + 614) && *(unsigned char *)(v9 + 1394) && !*(unsigned char *)(v10 + 615))
  {
    uint64_t v160 = *(unsigned int *)(*(void *)(v59 + 22824) + 12);
    *(void *)(v59 + 24544) = 0;
    if ((int)v160 < 1)
    {
      int v162 = 0;
      int v161 = 0;
    }
    else
    {
      int v161 = 0;
      int v162 = 0;
      int v163 = 0x7FFFFFFF;
      uint64_t v164 = v65;
      do
      {
        uint64_t v165 = *(void *)v164;
        if (*(unsigned char *)(*(void *)v164 + 1394)
          && (*(_DWORD *)(v10 + 372) == 1 && *(unsigned char *)(v165 + 1402) || *(unsigned char *)(v165 + 1398)))
        {
          if (*(_DWORD *)(v165 + 1288) < v163 && !*(unsigned char *)(v165 + 1356))
          {
            int v161 = *(_DWORD *)(v165 + 1300);
            int v163 = *(_DWORD *)(v165 + 1288);
          }
          ++v162;
        }
        v164 += 8;
        --v160;
      }
      while (v160);
    }
    int v166 = v162 + 2;
    if (v162 >= -1) {
      int v166 = v162 + 1;
    }
    int v167 = v166 >> 1;
    if (*(unsigned char *)(*(void *)v65 + 1354)) {
      int v162 = v167;
    }
    if (v162 == *(_DWORD *)(v59 + 8))
    {
      CFNumberRef v168 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
      CFNumberRef v169 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
      v168[3] = 0;
      *(_DWORD *)CFNumberRef v168 = 0;
      v169[3] = v168;
      *(_DWORD *)CFNumberRef v169 = 1;
      *((_DWORD *)v169 + 1) = *(_DWORD *)(v9 + 1300) + ~v161;
      *((_DWORD *)v169 + 5) = v161;
      *(void *)(v59 + 24544) = v169;
    }
  }
  if (!*(unsigned char *)(v9 + 16) || (int v170 = *(unsigned __int8 *)(v9 + 1368), v170 == 2) || v170 == 7)
  {
LABEL_418:
    if (*(unsigned char *)(v10 + 615))
    {
      if (*(unsigned char *)(v321 + 1393))
      {
        char v202 = *(unsigned char *)(v321 + 1394);
        if (v202) {
          char v202 = *(unsigned char *)(v321 + 12) != 0;
        }
        *(unsigned char *)(v322 + 24553) = v202;
      }
      if ((int)v62 > 0)
      {
        int v203 = 0;
        unsigned int v204 = 0;
        long long v205 = (uint64_t *)v65;
        uint64_t v206 = v62;
        do
        {
          uint64_t v207 = *v205;
          if (*v205)
          {
            if (*(unsigned char *)(v207 + 1394))
            {
              ++v204;
              if (*(unsigned char *)(v207 + 1356)) {
                ++v203;
              }
            }
          }
          ++v205;
          --v206;
        }
        while (v206);
        uint64_t v208 = 0;
        *(void *)(v322 + 24544) = 0;
        while (1)
        {
          uint64_t v209 = *(void *)(v65 + 8 * v208);
          if (v209 && *(unsigned char *)(v209 + 1394) && !*(unsigned char *)(v209 + 1356) && *(unsigned char *)(v209 + 12))
          {
            uint64_t v210 = *(unsigned __int8 *)(v317 + 615);
            int v211 = *(_DWORD *)(v321 + 1288);
            if (v203 == v210)
            {
              uint64_t v212 = 0;
              int v213 = 0x7FFFFFFF;
              int v214 = -1;
              do
              {
                uint64_t v215 = *(void *)(v65 + 8 * v212);
                if (*(unsigned char *)(v215 + 1394)
                  && (*(_DWORD *)(v317 + 372) == 1 && *(unsigned char *)(v215 + 1402) || *(unsigned char *)(v215 + 1398)))
                {
                  if (*(unsigned char *)(v215 + 1356))
                  {
                    if (!*(unsigned char *)(v215 + 12))
                    {
                      int v216 = *(_DWORD *)(v215 + 1288);
                      if (v216 < v211 && v216 < v213)
                      {
                        int v213 = v216;
                        int v214 = v212;
                      }
                    }
                  }
                }
                ++v212;
              }
              while (v62 != v212);
              if (v214 == -1) {
                goto LABEL_512;
              }
              uint64_t v217 = *(void *)(v65 + 8 * v214);
              if (!v217) {
                goto LABEL_512;
              }
              int v218 = *(_DWORD *)(v217 + 1308);
              if (!*(void *)(v322 + 24544))
              {
                unsigned int v219 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                v219[3] = 0;
                *(_DWORD *)unsigned int v219 = 0;
                *(void *)(v322 + 24544) = v219;
              }
              uint64_t v220 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
              v220[3] = *(void *)(v322 + 24544);
              *((_DWORD *)v220 + 3) = v218;
              *((_DWORD *)v220 + 5) = *(_DWORD *)(v209 + 1300);
              if (*(_DWORD *)(v209 + 1304) == *(_DWORD *)(v321 + 1304))
              {
                *(_DWORD *)uint64_t v220 = 6;
              }
              else
              {
                *(_DWORD *)uint64_t v220 = 3;
                *((_DWORD *)v220 + 1) = *(_DWORD *)(v321 + 1300) + ~*(_DWORD *)(v209 + 1300);
              }
              *(void *)(v322 + 24544) = v220;
              if (*((_DWORD *)v220 + 3) > *(_DWORD *)(*(void *)(v322 + 22816) + 40))
              {
                uint64_t v227 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                uint64_t v228 = *(void *)(v322 + 24544);
                v227[3] = v228;
                *((_DWORD *)v227 + 4) = *(_DWORD *)(v228 + 12) + 1;
                *(_DWORD *)uint64_t v227 = 4;
                *(void *)(v322 + 24544) = v227;
              }
              uint64_t v10 = v317;
              if (!*(unsigned char *)(v304 + v218))
              {
                CFSetRef ValueAtIndex = (__CFSet *)CFArrayGetValueAtIndex(theArray, v218);
                uint64_t v10 = v317;
                if (ValueAtIndex)
                {
                  BOOL v230 = ValueAtIndex;
                  valuePtr[0] = *(void *)(v209 + 1408);
                  CFNumberRef v231 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
                  if (v231)
                  {
                    CFNumberRef v232 = v231;
                    CFSetAddValue(v230, v231);
                    CFRelease(v232);
                  }
                  uint64_t v10 = v317;
                }
              }
              --v204;
              int v233 = *(_DWORD *)(v217 + 60);
            }
            else
            {
              valuePtr[0] = 0;
              valuePtr[1] = 0;
              uint64_t v221 = v65;
              uint64_t v222 = v62;
              do
              {
                uint64_t v223 = *(void *)v221;
                if (*(unsigned char *)(*(void *)v221 + 1394) && *(unsigned char *)(v223 + 1356) && *(_DWORD *)(v223 + 1288) < v211) {
                  *((unsigned char *)valuePtr + *(int *)(v223 + 1308)) = 1;
                }
                v221 += 8;
                --v222;
              }
              while (v222);
              if (!v210) {
                goto LABEL_544;
              }
              uint64_t v224 = 0;
              while (*((unsigned char *)valuePtr + v224))
              {
                if (v210 == ++v224) {
                  goto LABEL_544;
                }
              }
              if ((v224 & 0x80000000) != 0)
              {
LABEL_544:
                CFLog();
                uint64_t v251 = 4294958327;
                goto LABEL_567;
              }
              if (!*(void *)(v322 + 24544))
              {
                uint64_t v225 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                v225[3] = 0;
                *(_DWORD *)uint64_t v225 = 0;
                *(void *)(v322 + 24544) = v225;
              }
              uint64_t v226 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
              v226[3] = *(void *)(v322 + 24544);
              *((_DWORD *)v226 + 3) = v224;
              *((_DWORD *)v226 + 5) = *(_DWORD *)(v209 + 1300);
              if (*(_DWORD *)(v209 + 1304) == *(_DWORD *)(v321 + 1304))
              {
                *(_DWORD *)uint64_t v226 = 6;
              }
              else
              {
                *(_DWORD *)uint64_t v226 = 3;
                *((_DWORD *)v226 + 1) = *(_DWORD *)(v321 + 1300) + ~*(_DWORD *)(v209 + 1300);
              }
              *(void *)(v322 + 24544) = v226;
              if (*((_DWORD *)v226 + 3) > *(_DWORD *)(*(void *)(v322 + 22816) + 40))
              {
                char v234 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                uint64_t v235 = *(void *)(v322 + 24544);
                v234[3] = v235;
                *((_DWORD *)v234 + 4) = *(_DWORD *)(v235 + 12) + 1;
                *(_DWORD *)char v234 = 4;
                *(void *)(v322 + 24544) = v234;
              }
              uint64_t v10 = v317;
              if (!*(unsigned char *)(v304 + v224))
              {
                BOOL v236 = (__CFSet *)CFArrayGetValueAtIndex(theArray, v224);
                uint64_t v10 = v317;
                if (v236)
                {
                  unsigned int v237 = v236;
                  valuePtr[0] = *(void *)(v209 + 1408);
                  CFNumberRef v238 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
                  if (v238)
                  {
                    CFNumberRef v239 = v238;
                    CFSetAddValue(v237, v238);
                    CFRelease(v239);
                  }
                  uint64_t v10 = v317;
                }
              }
              ++v203;
              int v233 = -1;
            }
            *(_DWORD *)(v321 + 56) = v233;
            unsigned int v240 = *(_DWORD *)(v322 + 8);
            if (v240 <= 1) {
              unsigned int v240 = 1;
            }
            if (v204 > v240) {
              break;
            }
          }
LABEL_434:
          if (++v208 == v62) {
            goto LABEL_512;
          }
        }
        uint64_t v241 = v321;
        while (1)
        {
          uint64_t v242 = 0;
          int v243 = 0;
          int v244 = 0x7FFFFFFF;
          int v245 = -1;
          do
          {
            uint64_t v246 = *(void *)(v65 + 8 * v242);
            if (*(unsigned char *)(v246 + 1394)
              && (*(_DWORD *)(v317 + 372) == 1 && *(unsigned char *)(v246 + 1402) || *(unsigned char *)(v246 + 1398)))
            {
              int v247 = *(_DWORD *)(v246 + 1288);
              BOOL v248 = v247 < *(_DWORD *)(v241 + 1288) && v247 < v244;
              if (v248 && !*(unsigned char *)(v246 + 1356))
              {
                int v243 = *(_DWORD *)(v246 + 1300);
                int v244 = *(_DWORD *)(v246 + 1288);
                int v245 = v242;
              }
            }
            ++v242;
          }
          while (v62 != v242);
          if (v245 == -1 || !*(void *)(v65 + 8 * v245)) {
            break;
          }
          unsigned int v249 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
          uint64_t v10 = v317;
          v249[3] = *(void *)(v322 + 24544);
          *(_DWORD *)unsigned int v249 = 1;
          uint64_t v241 = v321;
          *((_DWORD *)v249 + 1) = *(_DWORD *)(v321 + 1300) + ~v243;
          *((_DWORD *)v249 + 5) = v243;
          *(void *)(v322 + 24544) = v249;
          --v204;
          unsigned int v250 = *(_DWORD *)(v322 + 8);
          if (v250 <= 1) {
            unsigned int v250 = 1;
          }
          if (v204 <= v250) {
            goto LABEL_434;
          }
        }
        uint64_t v251 = 4294958324;
        goto LABEL_567;
      }
      *(void *)(v322 + 24544) = 0;
    }
LABEL_512:
    uint64_t v6 = v308;
    uint64_t v251 = v320;
    uint64_t v9 = v321;
    if ((v315 & 1) == 0) {
      goto LABEL_567;
    }
LABEL_513:
    if (*(unsigned char *)(v6 + 2593))
    {
      if (*(unsigned char *)(v6 + 2592))
      {
        uint64_t v252 = v316[34].u32[0];
        *(_WORD *)(v9 + 19376) = -1;
        if ((int)v252 >= 1)
        {
          uint64_t v253 = 0;
          uint64_t v254 = v322 + 22840;
          do
          {
            uint64_t v255 = *(void *)(v254 + 8 * v253);
            if (v255)
            {
              int v256 = *(_DWORD *)(v255 + 1276);
              if (v256 == *(_DWORD *)(v9 + 19356))
              {
                *(unsigned char *)(v9 + 19376) = v253;
                int v256 = *(_DWORD *)(*(void *)(v254 + 8 * v253) + 1276);
              }
              if (v256 == *(_DWORD *)(v9 + 19360)) {
                *(unsigned char *)(v9 + 19377) = v253;
              }
            }
            ++v253;
          }
          while (v252 != v253);
        }
      }
    }
    if (*(unsigned char *)(v6 + 2602))
    {
      int v257 = v316[34].i32[0];
      if (v257 >= 1)
      {
        for (char j = 0; j < v257; ++j)
        {
          uint64_t v259 = (_DWORD *)(v9 + 4 * j + 18984);
          *uint64_t v259 = 0;
          uint64_t v260 = *(void *)(v322 + 22840 + 8 * j);
          if (v260)
          {
            uint64_t v261 = *(unsigned int *)(v9 + 18980);
            if (v261)
            {
              uint64_t v262 = 0;
              int v263 = *(_DWORD *)(v260 + 1276);
              while (*(_DWORD *)(v9 + 18852 + 4 * v262) != v263)
              {
                if (v261 == ++v262) {
                  goto LABEL_533;
                }
              }
              *uint64_t v259 = *(_DWORD *)(v9 + 18724 + 4 * v262);
            }
          }
LABEL_533:
          ;
        }
      }
    }
    if (*(_DWORD *)(v6 + 412) == 1) {
      *(unsigned char *)(v9 + 1402) = 1;
    }
    if (a2 && (*(_DWORD *)(v9 + 1284) = *(_DWORD *)a2, *(unsigned char *)(v10 + 402)))
    {
      BOOL v264 = 0;
      uint64_t v265 = *(unsigned int *)(v9 + 1276);
      if ((v265 & 0x80000000) == 0)
      {
        uint64_t v266 = *(void *)(a2 + 16);
        if (v266) {
          BOOL v264 = *(_DWORD *)(a2 + 4) > v265 && *(unsigned char *)(v266 + 8 * v265 + 7) != 0;
        }
      }
      *a5 = v264;
      if (v264) {
        return 0;
      }
    }
    else if (*a5)
    {
      return 0;
    }
    if (!*(unsigned char *)(v10 + 317))
    {
      int v267 = *(_DWORD *)(a1 + 64) | a3;
      *(_DWORD *)(a1 + 64) = v267;
      if (*(unsigned char *)(v9 + 1368) == 5 || !*(unsigned char *)(v9 + 1368))
      {
        *(unsigned char *)(v9 + 5000) = v267;
        *(_DWORD *)(a1 + 64) = 0;
      }
      if ((*(_DWORD *)v6 + 1) < 0x7FFFFFFF) {
        int v268 = *(_DWORD *)v6 + 1;
      }
      else {
        int v268 = 0x7FFFFFFF;
      }
      if (v316[34].i32[0] < v268) {
        int v268 = v316[34].i32[0];
      }
      v316[34].i32[2] = v268;
      int v269 = *(_DWORD *)(v6 + 4);
      if ((v269 + 1) < 0x7FFFFFFF) {
        int v270 = v269 + 1;
      }
      else {
        int v270 = 0x7FFFFFFF;
      }
      if (v316[34].i32[1] < v270) {
        int v270 = v316[34].i32[1];
      }
      v316[34].i32[3] = v270;
      if (*(_DWORD *)(v6 + 412) == 1)
      {
        memcpy((void *)(a1 + 56256), (const void *)(*(void *)(v6 + 288) + 22840), 0x348uLL);
        long long v271 = *(unsigned int **)(a4 + 24);
        if (v271) {
          MEMORY[0x1C1861060](*v271);
        }
      }
    }
    return 0;
  }
  uint64_t v171 = v316[34].u32[0];
  if (*(unsigned char *)(v9 + 22))
  {
    uint64_t v172 = 0;
    while (1)
    {
      uint64_t v173 = v60->i64[v172];
      if (v172 != *(unsigned __int8 *)(v173 + 23) || *(unsigned char *)(v10 + 663) && *(unsigned char *)(v173 + 1356)) {
        break;
      }
      if (*(unsigned __int8 *)(v9 + 22) == ++v172) {
        goto LABEL_382;
      }
    }
    *(unsigned char *)(v322 + 24536) = 1;
    if (!*(unsigned char *)(v9 + 22))
    {
LABEL_416:
      LODWORD(v174) = 0;
LABEL_417:
      *(_DWORD *)(v59 + 4 * (v174 + 1) + 23744) = 3;
      goto LABEL_418;
    }
  }
  else
  {
LABEL_382:
    if (!*(unsigned char *)(v322 + 24536)) {
      goto LABEL_418;
    }
    if (!*(unsigned char *)(v9 + 22)) {
      goto LABEL_416;
    }
  }
  uint64_t v174 = 0;
  int v175 = *(_DWORD *)(v9 + 1304);
  uint64_t v176 = v59 + 23744;
  uint64_t v177 = v59 + 22848;
  uint64_t v178 = -1;
  uint64_t v179 = 1;
  int v180 = v60;
  uint64_t v181 = v171;
  while (1)
  {
    unint64_t v182 = v180;
    uint64_t v183 = v181;
    if (v174 == (v171 & ~((int)v171 >> 31))) {
      break;
    }
    while (1)
    {
      uint64_t v184 = v182->i64[0];
      if (v174 == *(unsigned __int8 *)(v182->i64[0] + 23)) {
        break;
      }
      unint64_t v182 = (int8x16_t *)((char *)v182 + 8);
      if (!--v183) {
        goto LABEL_566;
      }
    }
    int v185 = *(_DWORD *)(v9 + 1304);
    uint64_t v186 = (void *)(v59 + 8 * v171 + 22840);
    uint64_t v187 = v171;
    if ((int)v171 <= (int)v174)
    {
      v60->i64[v174] = v184;
    }
    else
    {
      do
      {
        --v187;
        *uint64_t v186 = *(v186 - 1);
        --v186;
      }
      while (v187 > v174);
      uint64_t v188 = 0;
      v60->i64[v174] = v184;
      int v189 = v174 + 1;
      do
      {
        uint64_t v190 = *(void *)(v177 + 8 * v188);
        if (v190 != v184) {
          v60->i64[v189++] = v190;
        }
        ++v188;
      }
      while (v181 != v188);
    }
    if (*(unsigned char *)(v184 + 1356))
    {
      *(_DWORD *)(v176 + 4 * v174) = 2;
      *(_DWORD *)(v59 + 24272 + 4 * v174) = *(_DWORD *)(v184 + 1308);
    }
    else
    {
      __int32 v191 = v316[36].i32[2];
      int v192 = *(_DWORD *)(v184 + 1304);
      if (v192 > v185) {
        __int32 v193 = v191 + 1;
      }
      else {
        __int32 v193 = 0;
      }
      int v194 = v192 - v193;
      int v195 = (v175 + v191 + 1 + ~v194) & v191;
      int v196 = (v191 - v175 + v194) & v191;
      BOOL v197 = v195 > v196;
      if (v195 < v196)
      {
        int v198 = v191 - v195;
      }
      else
      {
        int v195 = v196;
        int v198 = v196 + 1;
      }
      *(_DWORD *)(v176 + 4 * v174) = v197;
      *(_DWORD *)(v59 + 24008 + 4 * v174) = v195;
      int v175 = (v198 + v175) & v191;
    }
    unsigned int v199 = *(unsigned __int8 *)(v9 + 22);
    if ((int)v174 + 1 < v199)
    {
      uint64_t v200 = 0;
      while (1)
      {
        uint64_t v201 = *(void *)(v177 + 8 * v200);
        if (v179 + v200 != *(unsigned __int8 *)(v201 + 23) || *(unsigned char *)(v10 + 663) && *(unsigned char *)(v201 + 1356)) {
          break;
        }
        if (v178 + *(unsigned __int8 *)(v9 + 22) == ++v200) {
          goto LABEL_417;
        }
      }
      ++v174;
      ++v179;
      --v181;
      int v180 = (int8x16_t *)((char *)v180 + 8);
      v177 += 8;
      --v178;
      if (v174 < v199) {
        continue;
      }
    }
    goto LABEL_417;
  }
LABEL_566:
  uint64_t v251 = 4294954947;
LABEL_567:
  CFLog();
  return v251;
}

pthread_mutex_t *sub_1BBB31B3C(uint64_t a1, int a2, int a3)
{
  int v4 = (a3 >> 2) + 16 * a2;
  int v5 = v4 + 15;
  int v6 = v4 + 30;
  if (v5 >= 0) {
    int v6 = v5;
  }
  int v7 = v6 >> 4;
  unsigned int v8 = *(_DWORD *)(a1 + 192);
  if (v7 >= (int)(v8 >> 4)) {
    int v9 = (v8 >> 4) - 1;
  }
  else {
    int v9 = v7;
  }
  uint64_t v10 = *(pthread_mutex_t **)(a1 + 72);
  if (v10) {
    pthread_mutex_lock(v10);
  }
  while (*(_DWORD *)(a1 + 64) < v9)
  {
    int v12 = *(pthread_mutex_t **)(a1 + 72);
    unsigned int v11 = *(pthread_cond_t **)(a1 + 80);
    if (v11) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      pthread_cond_wait(v11, v12);
    }
  }
  float result = *(pthread_mutex_t **)(a1 + 72);
  if (result)
  {
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  }
  return result;
}

uint64_t sub_1BBB31BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v11 = a1 + 205448;
  uint64_t v399 = *(void *)(a1 + 205800);
  uint64_t v12 = *(void *)(a1 + 136);
  *(_DWORD *)a4 = 0;
  uint64_t v13 = a4 + 96;
  BOOL v410 = 0;
  if (*(unsigned char *)(v12 + 4850))
  {
    *(_DWORD *)(a4 + 24) = 0;
    uint64_t v14 = (unsigned char *)(v12 + 4850);
    int v15 = *(unsigned __int8 *)(v12 + 4850);
  }
  else
  {
    uint64_t v14 = (unsigned char *)(v12 + 4850);
    int v15 = 0;
  }
  uint64_t v406 = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9F82E50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9F82E50))
  {
    qword_1E9F82E48 = (uint64_t)malloc_type_calloc(8 * *(unsigned __int8 *)(v12 + 376), 1uLL, 0x4AE20AB7uLL);
    __cxa_guard_release(&qword_1E9F82E50);
  }
  if (*(_DWORD *)(v12 + 372) == 1 && (unsigned int v16 = *(unsigned __int8 *)(v12 + 376), *(unsigned char *)(v12 + 376)))
  {
    unint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = qword_1E9F82E48;
    do
    {
      uint64_t v20 = *(void *)(v19 + 8 * v17);
      if (v20)
      {
        uint64_t v21 = *(unsigned int *)(v20 + 12);
        if (v21)
        {
          uint64_t v22 = v20 + 216;
          while (*(unsigned char *)(*(void *)v22 + 1399))
          {
            v22 += 8;
            if (!--v21) {
              goto LABEL_13;
            }
          }
        }
        else
        {
LABEL_13:
          int v18 = sub_1BBB0F268(1, *(void *)(v19 + 8 * v17));
          uint64_t v19 = qword_1E9F82E48;
          *(void *)(qword_1E9F82E48 + 8 * v17) = 0;
          unsigned int v16 = *(unsigned __int8 *)(v406 + 376);
        }
      }
      ++v17;
    }
    while (v17 < v16);
  }
  else
  {
    int v18 = 0;
  }
  uint64_t v23 = *(void *)(v399 + 22824);
  if (!v23)
  {
    uint64_t v33 = 0;
    uint64_t v24 = v406;
    goto LABEL_80;
  }
  uint64_t v24 = v406;
  uint64_t v25 = *(unsigned int *)(v23 + 12);
  if (*(_DWORD *)(v406 + 372) == 1)
  {
    if (v25)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 8 * v25;
      do
      {
        uint64_t v28 = *(void *)(v23 + v26 + 216);
        if (!*(unsigned char *)(v28 + 1402) && !*(unsigned char *)(v28 + 1398)) {
          goto LABEL_46;
        }
        v26 += 8;
      }
      while (v27 != v26);
    }
    uint64_t v29 = *(void *)(v399 + 22816);
    if (v23 != v29 && v29 != 0)
    {
      uint64_t v31 = *(unsigned int *)(v29 + 12);
      if (v31)
      {
        uint64_t v32 = v29 + 216;
        while (*(unsigned char *)(*(void *)v32 + 1402) || *(unsigned char *)(*(void *)v32 + 1398))
        {
          v32 += 8;
          if (!--v31) {
            goto LABEL_33;
          }
        }
        if (*(unsigned char *)(v406 + 376))
        {
          uint64_t v82 = 0;
          while (*(void *)(qword_1E9F82E48 + 8 * v82))
          {
            if (*(unsigned __int8 *)(v406 + 376) == ++v82) {
              goto LABEL_164;
            }
          }
          *(void *)(qword_1E9F82E48 + 8 * v82) = v23;
          uint64_t v23 = *(void *)(v399 + 22824);
        }
LABEL_164:
        uint64_t v108 = v399 + 16;
        if (v23 && v23 != v399 + 22056)
        {
          uint64_t v109 = v399 - 744;
          uint64_t v110 = 1;
          while (1)
          {
            v109 += 760;
            if (v109 == v23) {
              break;
            }
            if (++v110 == 30)
            {
              uint64_t v108 = 0;
              goto LABEL_183;
            }
          }
          v108 += 760 * v110;
        }
LABEL_183:
        *(void *)(v399 + 22824) = v108;
        uint64_t v23 = v108;
        goto LABEL_46;
      }
    }
LABEL_33:
    sub_1BBB0F268(0, v23);
LABEL_34:
    uint64_t v33 = 0;
    goto LABEL_80;
  }
  if (v25)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 8 * v25;
    while (*(unsigned char *)(*(void *)(v23 + v34 + 216) + 1399))
    {
      v34 += 8;
      if (v35 == v34) {
        goto LABEL_40;
      }
    }
  }
  else
  {
LABEL_40:
    uint64_t v36 = *(void *)(v399 + 22816);
    if (!v36 || (uint64_t v37 = *(unsigned int *)(v36 + 12), !v37))
    {
LABEL_45:
      int v18 = sub_1BBB0F268(0, v23);
      uint64_t v23 = *(void *)(v399 + 22824);
      goto LABEL_46;
    }
    uint64_t v38 = v36 + 216;
    while (*(unsigned char *)(*(void *)v38 + 1399))
    {
      v38 += 8;
      if (!--v37) {
        goto LABEL_45;
      }
    }
    int v78 = sub_1BBB0F268(1, v23);
    uint64_t v79 = *(void *)(v399 + 22824);
    if (v79 == *(void *)(v399 + 22816)) {
      goto LABEL_34;
    }
    int v18 = v78;
    uint64_t v23 = v399 + 16;
    if (v79 && v79 != v399 + 22056)
    {
      uint64_t v80 = v399 - 744;
      uint64_t v81 = 1;
      while (1)
      {
        v80 += 760;
        if (v80 == v79) {
          break;
        }
        if (++v81 == 30)
        {
          uint64_t v23 = 0;
          goto LABEL_171;
        }
      }
      v23 += 760 * v81;
    }
LABEL_171:
    *(void *)(v399 + 22824) = v23;
  }
LABEL_46:
  uint64_t v39 = (uint64_t *)(v23 + 216);
  uint64_t v40 = *(unsigned int *)(v23 + 12);
  if (*v14 && *(_DWORD *)(v406 + 372) != 1)
  {
    if ((int)v40 < 1) {
      goto LABEL_77;
    }
    uint64_t v48 = 0;
    int v49 = 0x7FFFFFFF;
    int v43 = -1;
    do
    {
      uint64_t v50 = v39[v48];
      if (!*(unsigned char *)(v50 + 1398))
      {
        int v51 = *(_DWORD *)(v50 + 1288);
        if (v43 == -1 || v51 < v49)
        {
          int v49 = v51;
          int v43 = v48;
        }
      }
      ++v48;
    }
    while (v40 != v48);
  }
  else
  {
    if ((int)v40 < 1) {
      goto LABEL_77;
    }
    uint64_t v41 = 0;
    int v42 = 0x7FFFFFFF;
    int v43 = -1;
    do
    {
      uint64_t v44 = v39[v41];
      if (!*(unsigned char *)(v44 + 1402) && !*(unsigned char *)(v44 + 1398))
      {
        int v45 = *(_DWORD *)(v44 + 1288);
        BOOL v46 = v43 == -1 || v45 < v42;
        if (v46)
        {
          int v42 = v45;
          int v43 = v41;
        }
      }
      ++v41;
    }
    while (v40 != v41);
  }
  if (v43 != -1)
  {
    uint64_t v33 = v39[v43];
    if (!v15) {
      goto LABEL_80;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v33 = 0;
  if (!v15) {
    goto LABEL_80;
  }
LABEL_78:
  uint64_t v33 = sub_1BBB21350(v33, v399, v406, v39, v40);
  if (v18) {
    CFLog();
  }
LABEL_80:
  *(void *)(v11 + 392) = v33;
  uint64_t v54 = *(void *)(v11 + 2672);
  uint64_t v55 = v33;
  if (v54)
  {
    if (!*(unsigned char *)(v54 + 32))
    {
      if (v33) {
        *(void *)(v54 + 8 * *(int *)(v54 + 68) + 72) = v33;
      }
      uint64_t v56 = *(void *)(a1 + 80);
      if (v56) {
        *(void *)(*(void *)(v11 + 2672) + 8 * *(int *)(*(void *)(v11 + 2672) + 68) + 96) = v56;
      }
    }
    uint64_t v55 = *(void *)(v11 + 392);
  }
  if (v55)
  {
    if (*v14)
    {
      uint64_t v57 = sub_1BBB2FA50(a1, a3, a5, a8, &v410);
      if (v57)
      {
        uint64_t v58 = v57;
LABEL_620:
        CFLog();
        return v58;
      }
      if (v410)
      {
        *a7 = 4;
        if (*(_DWORD *)(v11 + 476) == 1)
        {
          int v60 = *(unsigned int **)(a8 + 24);
          if (v60) {
            MEMORY[0x1C1861060](*v60);
          }
        }
LABEL_177:
        uint64_t v112 = *(void *)(v11 + 2672);
        if ((!v112 || *(unsigned char *)(v112 + 32)) && *(_DWORD *)(v11 + 476) != 1) {
          sub_1BBB2C8EC(v33, v399, v13, *(unsigned __int8 *)(v24 + 577));
        }
        return 0;
      }
    }
    uint64_t v61 = a1 + 5076;
    uint64_t v62 = (_DWORD *)a4;
    BOOL v394 = (uint64_t *)(a4 + 16);
    uint64_t v63 = *(void *)(v11 + 2672);
    if (*(unsigned char *)(v24 + 317))
    {
      uint64_t v64 = a1;
      if (v63) {
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    uint64_t v70 = *(void *)(v11 + 392);
    int v71 = *(_DWORD *)(a4 + 52);
    if (*(_DWORD *)(v11 + 476) != 1 && v71 >= 9)
    {
      CFLog();
      uint64_t v58 = 4294967188;
      goto LABEL_620;
    }
    uint64_t v384 = *(void *)(v11 + 2672);
    uint64_t v72 = sub_1BBB23D90((uint64_t)v394, v71);
    if (v72)
    {
      uint64_t v58 = v72;
      CFLog();
      goto LABEL_620;
    }
    uint64_t v83 = a1 + 56528;
    int v84 = *(_DWORD *)(a4 + 52);
    if (v84 < 1)
    {
      int v85 = 1;
      uint64_t v86 = a4;
      uint64_t v87 = v384;
    }
    else
    {
      int v85 = *(_DWORD *)(a1 + 57100) * *(_DWORD *)(a1 + 57096);
      BOOL v46 = v84 <= v85;
      uint64_t v86 = a4;
      uint64_t v87 = v384;
      if (v46) {
        goto LABEL_131;
      }
    }
    *(_DWORD *)(v86 + 52) = v85;
LABEL_131:
    if (!*(unsigned char *)(v11 + 485) && (*(_DWORD *)(v11 + 2300) || *(unsigned char *)(v11 + 2620) || *(unsigned char *)(v11 + 386)))
    {
      uint64_t v88 = v70;
      uint64_t v89 = v33;
      uint64_t v90 = *(void *)(v11 + 400);
      memcpy(*(void **)(v90 + 128), *(const void **)(v88 + 128), (*(_DWORD *)(v90 + 196) * *(_DWORD *)(v90 + 232)));
      int v91 = *(void **)(v90 + 136);
      int v92 = *(_DWORD *)(v90 + 248);
      int v93 = *(_DWORD *)(v90 + 212);
      uint64_t v33 = v89;
      uint64_t v70 = v88;
      memcpy(v91, *(const void **)(v88 + 136), (v93 * v92));
      uint64_t v83 = a1 + 56528;
      uint64_t v87 = v384;
    }
    if (v87 && !*(unsigned char *)(v87 + 32))
    {
      if (!*(unsigned char *)(v11 + 488))
      {
        CFLog();
        uint64_t v58 = 4294958327;
        goto LABEL_620;
      }
      uint64_t v113 = sub_1BBB2D3EC(a1);
      if (v113)
      {
        uint64_t v58 = v113;
        goto LABEL_619;
      }
      uint64_t v175 = sub_1BBB2F134((uint64_t *)a1, a2, a3, a5, a8, v114);
      uint64_t v83 = a1 + 56528;
      if (v175)
      {
        uint64_t v58 = v175;
        goto LABEL_619;
      }
    }
    uint64_t v379 = v33;
    uint64_t v94 = *(void *)(v11 + 392);
    unsigned int v95 = *(unsigned __int8 *)(v94 + 1368);
    uint64_t v96 = *(void *)(a1 + 5392);
    uint64_t v97 = *(_DWORD **)(a1 + 152);
    BOOL v98 = !**(_DWORD **)(v11 + 496) && !**(_DWORD **)(v11 + 512) && *v97 == 0;
    uint64_t v99 = a3;
    if (v95 <= 9)
    {
      if (((1 << v95) & 0x129) != 0)
      {
        uint64_t v100 = (int *)(v11 + 424);
        goto LABEL_146;
      }
      if (((1 << v95) & 0x294) != 0)
      {
        uint64_t v100 = (int *)(v11 + 420);
        goto LABEL_146;
      }
    }
    uint64_t v100 = (int *)(v11 + 428);
LABEL_146:
    uint64_t v371 = v70;
    int v101 = *v100;
    if (v101 >= 0x33) {
      int v102 = 51;
    }
    else {
      int v102 = v101;
    }
    *(float *)&double v76 = (float)v102;
    double v103 = 0.0;
    if (v101 < 0) {
      *(float *)&double v76 = 0.0;
    }
    *(_DWORD *)(v11 + 416) = LODWORD(v76);
    if (*(unsigned char *)(a1 + 1024) && v96)
    {
      double v76 = *(double *)(v96 + 136);
      *(float *)&double v76 = v76;
      *(_DWORD *)(v94 + 4940) = LODWORD(v76);
    }
    uint64_t v407 = v96;
    uint64_t v104 = v94;
    if (v97)
    {
      int v105 = *(_DWORD *)(*(void *)(a1 + 136) + 304);
      v97[94] = v105;
      if (v105)
      {
        sub_1BBAF9A9C((uint64_t)v97, v94 + 4928, v76, 0.0);
        uint64_t v94 = v104;
        uint64_t v83 = a1 + 56528;
      }
    }
    uint64_t v408 = (uint64_t)v97;
    if (!*(unsigned char *)(v11 + 2639))
    {
LABEL_202:
      char v403 = (unsigned __int8 *)(v94 + 4912);
      if (!a3) {
        BOOL v98 = 0;
      }
      if (v98)
      {
        uint64_t v119 = *(void *)(v11 + 392);
        uint64_t v120 = *(unsigned int *)(v119 + 1276);
        *(float *)&double v76 = (float)*(char *)(a3 + 10);
        uint64_t v24 = v406;
        if ((v120 & 0x80000000) == 0)
        {
          uint64_t v121 = *(void *)(a3 + 16);
          if (v121)
          {
            if (*(_DWORD *)(a3 + 4) > v120) {
              LODWORD(v76) = *(_DWORD *)(v121 + 8 * v120);
            }
          }
        }
        *(_DWORD *)(v11 + 416) = LODWORD(v76);
        if (*(_WORD *)(a3 + 8))
        {
          LOWORD(v76) = *(_WORD *)(v119 + 4728);
          double v122 = sub_1BBB4E9DC((double)*(unint64_t *)&v76 / (double)*(unsigned __int16 *)(a3 + 8));
          uint64_t v94 = v104;
          uint64_t v83 = a1 + 56528;
          *(float *)&double v122 = v122;
          LODWORD(v103) = 1.0;
          *(float *)(v119 + 4732) = fminf(*(float *)&v122, 1.0);
        }
      }
      else
      {
        float v123 = *(float *)(v11 + 416);
        uint64_t v124 = *(void *)(v11 + 392);
        uint64_t v24 = v406;
        if ((*(__int16 *)(v11 + 452) - 0xFFFF) >= 0xFFFF0002)
        {
          float v123 = sub_1BBB0268C(*(unsigned __int16 *)(v11 + 452), *(unsigned __int16 *)(v124 + 4728), *(unsigned char *)(v124 + 1404) & 0xF, *(unsigned __int8 *)(v11 + 2623), *(unsigned __int8 *)(v124 + 1394), *(unsigned __int8 *)(v11 + 2624), v123);
          uint64_t v94 = v104;
          uint64_t v83 = a1 + 56528;
        }
        else
        {
          if (*(unsigned char *)(v11 + 2623))
          {
            *(float *)&double v103 = (float)((*(unsigned char *)(v124 + 1404) & 0xF) * *(unsigned __int8 *)(v11 + 2623));
            float v123 = v123 + *(float *)&v103;
          }
          unsigned int v125 = *(unsigned __int8 *)(v11 + 2624);
          if (*(unsigned char *)(v11 + 2624) && !*(unsigned char *)(v124 + 1394))
          {
            *(float *)&double v103 = (float)v125;
            float v123 = v123 + (float)v125;
          }
        }
        *(float *)(v11 + 416) = (float)(int)v123;
      }
      uint64_t v126 = *(void *)(v11 + 496);
      if (*(_DWORD *)v126)
      {
        float v127 = *(float *)(v126 + 84);
        v403[80] = 0;
        uint64_t v33 = v379;
        if ((*(unsigned char *)v126 & 1) == 0) {
          goto LABEL_278;
        }
        uint64_t v128 = *(void *)(v94 + 128);
        int v129 = *(_DWORD *)(v94 + 232);
        unsigned int v130 = *(_DWORD *)(v11 + 2424);
        if (v130) {
          *(_DWORD *)(v11 + 2420) = (float)((float)((float)*(unsigned int *)(v94 + 4928)
        }
                                                                / *(float *)(v94 + 4940))
                                                        * (float)v130);
        *(double *)(v126 + 3920) = (float)*(unsigned int *)(v94 + 4928);
        *(double *)(v126 + 3928) = *(float *)(v94 + 4940);
        int v131 = *(unsigned __int8 *)(v94 + 1368);
        if (*(unsigned char *)(v94 + 1368))
        {
          int v132 = 0;
          if (v131 != 2 && v131 != 7)
          {
            if (v131 == 5) {
              int v132 = 1;
            }
            else {
              int v132 = 2;
            }
          }
        }
        else
        {
          int v132 = 1;
        }
        *(_DWORD *)(v126 + 120) = v132;
        LOBYTE(v132) = *(unsigned char *)(v11 + 528);
        if ((_BYTE)v132)
        {
          if (!*(_WORD *)(*(void *)(a1 + 136) + 326))
          {
            LOBYTE(v132) = *(unsigned char *)(v11 + 2628);
            if (!(_BYTE)v132) {
              goto LABEL_277;
            }
            LOBYTE(v132) = 0;
            unsigned int v170 = *(unsigned __int8 *)(v94 + 1368);
            if (v170 > 8 || ((1 << v170) & 0x129) == 0) {
              goto LABEL_277;
            }
            uint64_t v171 = *(void *)(*(void *)(v11 + 352) + 22824);
            uint64_t v172 = *(unsigned int *)(v171 + 12);
            if ((int)v172 >= 1)
            {
              int v132 = 0;
              uint64_t v173 = (uint64_t *)(v171 + 216);
              do
              {
                uint64_t v174 = *v173;
                if (!*(unsigned char *)(*v173 + 1398) && !*(unsigned char *)(v174 + 1394)) {
                  v132 |= *(_DWORD *)(v174 + 5004);
                }
                ++v173;
                --v172;
              }
              while (v172);
              goto LABEL_277;
            }
          }
          LOBYTE(v132) = 0;
        }
LABEL_277:
        sub_1BBB12530(v126 + 48, (int *)(v126 + 112), v128, v129, v126 + 176, v126 + 3824, v94, v132);
        uint64_t v94 = v104;
        *(float *)(v11 + 416) = (float)*(int *)(v126 + 124);
        uint64_t v83 = a1 + 56528;
LABEL_278:
        if ((**(unsigned char **)(v11 + 496) & 1) == 0 || *(_DWORD *)(v11 + 504) != 1) {
          goto LABEL_384;
        }
        if (v95 == 6 || v95 == 1)
        {
          int v166 = *(_DWORD *)(v11 + 2292);
          if (v166 <= 0x33)
          {
            double v77 = 1.75;
            double v103 = (double)v166 * 1.75;
            if (v103 <= *(float *)(v11 + 416)) {
              *(float *)(v11 + 416) = (float)(v166 + 2);
            }
          }
        }
        int v167 = *(_DWORD *)(v126 + 88);
        int v168 = *(_DWORD *)(v126 + 56);
        int v169 = *(_DWORD *)(v126 + 60);
LABEL_312:
        float v177 = (float)v167 / (float)(v127 * (float)(v169 * v168));
        if (v177 >= 0.2605 || v127 <= 0.0 || (LODWORD(v103) = 10.0, v127 > 10.0))
        {
          BOOL v178 = v177 >= 0.217 || v127 <= 10.0;
          LODWORD(v103) = 12.0;
          if (v178 || v127 > 12.0)
          {
            BOOL v180 = v177 >= 0.1736 || v127 <= 12.0;
            LODWORD(v103) = 15.0;
            if (v180 || v127 > 15.0)
            {
              BOOL v182 = v177 >= 0.13025 || v127 <= 15.0;
              LODWORD(v103) = 24.0;
              if (v182 || v127 > 24.0)
              {
                BOOL v184 = v177 >= 0.1085 || v127 <= 24.0;
                LODWORD(v103) = 30.0;
                if (v184 || v127 > 30.0)
                {
                  BOOL v186 = v177 >= 0.08683 || v127 <= 30.0;
                  LODWORD(v103) = 1112014848;
                  if (v186 || v127 > 50.0)
                  {
                    LODWORD(v103) = 1029007055;
                    BOOL v188 = v177 >= 0.0521 || v127 <= 50.0;
                    if (v188 || v127 > 60.0) {
                      goto LABEL_384;
                    }
                  }
                }
              }
            }
          }
        }
        if (v95 > 7) {
          goto LABEL_384;
        }
        if (((1 << v95) & 0x21) != 0)
        {
          unsigned int v190 = *(_DWORD *)(v11 + 2296);
          if (v190 <= 0x33)
          {
            int v191 = v190 + 5;
            *(float *)&double v103 = (float)(int)(v190 + 5);
            if (*(float *)(v11 + 416) > *(float *)&v103)
            {
              BOOL v192 = v190 >= 0x23;
              int v193 = 40;
LABEL_375:
              if (!v192) {
                int v193 = v191;
              }
              float v195 = (float)v193;
LABEL_383:
              *(float *)(v11 + 416) = v195;
              goto LABEL_384;
            }
          }
          if (v95 == 2)
          {
LABEL_379:
            unsigned int v196 = *(_DWORD *)(v11 + 2292);
            if (v196 > 0x33) {
              goto LABEL_384;
            }
            LODWORD(v103) = *(_DWORD *)(v11 + 416);
            float v195 = (float)(int)(v196 + 5);
            if (*(float *)&v103 <= v195) {
              goto LABEL_384;
            }
            LODWORD(v103) = 1109393408;
            if (v196 >= 0x23) {
              float v195 = 40.0;
            }
            goto LABEL_383;
          }
          if (v95 != 1) {
            goto LABEL_384;
          }
        }
        else if (((1 << v95) & 0x42) == 0)
        {
          if (((1 << v95) & 0x84) == 0)
          {
LABEL_384:
            int v197 = byte_1BBB8A4B4[(int)*(float *)(v11 + 416) + 128];
            *(float *)(v11 + 416) = (float)(char)v197;
            *(unsigned char *)(v11 + 2233) = (v95 == 6 || v95 == 1) && v197 == 51;
            goto LABEL_389;
          }
          goto LABEL_379;
        }
        unsigned int v194 = *(_DWORD *)(v11 + 2296);
        if (v194 <= 0x33)
        {
          int v191 = v194 + 7;
          *(float *)&double v103 = (float)(int)(v194 + 7);
          if (*(float *)(v11 + 416) > *(float *)&v103)
          {
            BOOL v192 = v194 >= 0x23;
            int v193 = 42;
            goto LABEL_375;
          }
        }
        if (v95 != 2) {
          goto LABEL_384;
        }
        goto LABEL_379;
      }
      uint64_t v133 = *(void *)(v11 + 512);
      uint64_t v33 = v379;
      if (*(_DWORD *)v133)
      {
        float v127 = *(float *)(v133 + 76);
        v403[80] = 0;
        if (*(_DWORD *)v133 != 32) {
          goto LABEL_304;
        }
        uint64_t v134 = *(void *)(v94 + 128);
        int v135 = *(_DWORD *)(v94 + 232);
        unsigned int v136 = *(_DWORD *)(v11 + 2424);
        if (v136) {
          *(_DWORD *)(v11 + 2420) = (float)((float)((float)*(unsigned int *)(v94 + 4928)
        }
                                                                / *(float *)(v94 + 4940))
                                                        * (float)v136);
        *(double *)(v133 + 3992) = (float)*(unsigned int *)(v94 + 4928);
        *(double *)(v133 + 4000) = *(float *)(v94 + 4940);
        int v137 = *(unsigned __int8 *)(v94 + 1368);
        if (*(unsigned char *)(v94 + 1368))
        {
          int v138 = 0;
          if (v137 != 2 && v137 != 7)
          {
            if (v137 == 5) {
              int v138 = 1;
            }
            else {
              int v138 = 2;
            }
          }
        }
        else
        {
          int v138 = 1;
        }
        *(_DWORD *)(v133 + 112) = v138;
        LOBYTE(v138) = *(unsigned char *)(v11 + 528);
        if ((_BYTE)v138)
        {
          if (!*(_WORD *)(*(void *)(a1 + 136) + 326))
          {
            LOBYTE(v138) = *(unsigned char *)(v11 + 2628);
            if (!(_BYTE)v138) {
              goto LABEL_303;
            }
            LOBYTE(v138) = 0;
            unsigned int v337 = *(unsigned __int8 *)(v94 + 1368);
            if (v337 > 8 || ((1 << v337) & 0x129) == 0) {
              goto LABEL_303;
            }
            uint64_t v338 = *(void *)(*(void *)(v11 + 352) + 22824);
            uint64_t v339 = *(unsigned int *)(v338 + 12);
            if ((int)v339 >= 1)
            {
              int v138 = 0;
              uint64_t v340 = (uint64_t *)(v338 + 216);
              do
              {
                uint64_t v341 = *v340;
                if (!*(unsigned char *)(*v340 + 1398) && !*(unsigned char *)(v341 + 1394)) {
                  v138 |= *(_DWORD *)(v341 + 5004);
                }
                ++v340;
                --v339;
              }
              while (v339);
              goto LABEL_303;
            }
          }
          LOBYTE(v138) = 0;
        }
LABEL_303:
        sub_1BBB0B334(v133 + 40, v133 + 104, v134, v135, v133 + 160, (double *)(v133 + 3888), *(int **)(v11 + 520), (_DWORD *)v94, v138);
        uint64_t v94 = v104;
        *(float *)(v11 + 416) = (float)*(int *)(v133 + 116);
        uint64_t v83 = a1 + 56528;
LABEL_304:
        if (**(_DWORD **)(v11 + 512) != 32 || *(_DWORD *)(v11 + 504) != 1) {
          goto LABEL_384;
        }
        if (v95 == 6 || v95 == 1)
        {
          int v176 = *(_DWORD *)(v11 + 2292);
          if (v176 <= 0x33)
          {
            double v77 = 1.75;
            double v103 = (double)v176 * 1.75;
            if (v103 <= *(float *)(v11 + 416)) {
              *(float *)(v11 + 416) = (float)(v176 + 2);
            }
          }
        }
        int v167 = *(_DWORD *)(v133 + 80);
        int v168 = *(_DWORD *)(v133 + 48);
        int v169 = *(_DWORD *)(v133 + 52);
        goto LABEL_312;
      }
      if (!*(_DWORD *)v408)
      {
        LODWORD(v103) = *(_DWORD *)(v11 + 416);
        *(float *)(v11 + 416) = *(float *)&v103 + (float)*(char *)(v94 + 1360);
LABEL_389:
        uint64_t v198 = a1 + 5076;
        goto LABEL_390;
      }
      uint64_t v139 = *(void *)(a1 + 152);
      v403[80] = 0;
      if (*(_DWORD *)v139 != 2)
      {
LABEL_675:
        uint64_t v198 = a1 + 5076;
        *(unsigned char *)(v11 + 2233) = (v95 == 6 || v95 == 1) && (LODWORD(v103) = 1112276992, *(float *)(v11 + 416) == 51.0);
LABEL_390:
        if (v98)
        {
          uint64_t v199 = *(unsigned int *)(*(void *)(v11 + 392) + 1276);
          if ((v199 & 0x80000000) == 0)
          {
            uint64_t v200 = *(void *)(a3 + 16);
            if (v200)
            {
              if (*(_DWORD *)(a3 + 4) > v199) {
                *(_DWORD *)(v200 + 8 * v199) = *(_DWORD *)(v11 + 416);
              }
            }
          }
        }
        if (!*(unsigned char *)(a1 + 1024) || !v407)
        {
LABEL_410:
          uint64_t v64 = a1;
          if (*(unsigned char *)(v11 + 2639))
          {
            uint64_t v208 = *(float **)(a1 + 1040);
            float v209 = *(float *)(v11 + 416);
            int v210 = *(unsigned __int8 *)(a1 + 1026);
            uint64_t v211 = (v210 - 1);
            if (v210 == 1)
            {
              double v103 = 0.0;
            }
            else
            {
              int v212 = v210 - 2;
              double v103 = 0.0;
              do
              {
                float v213 = v208[v212];
                v208[v211] = v213;
                *(float *)&double v103 = *(float *)&v103 + v213;
                --v212;
                --v211;
              }
              while (v211);
            }
            *uint64_t v208 = v209;
            float v214 = v209 + *(float *)&v103;
            LOBYTE(v103) = *(unsigned char *)(a1 + 1026);
            *(float *)&double v103 = (float)LODWORD(v103);
            *(float *)(a1 + 1048) = v214 / *(float *)&v103;
            if (*(unsigned char *)(v11 + 2639))
            {
              if (*(_DWORD *)v408)
              {
                int v215 = (int)*(double *)(v408 + 304);
              }
              else
              {
                LODWORD(v103) = *(_DWORD *)(v94 + 4940);
                int v215 = (int)(float)((float)*(unsigned int *)(v94 + 4928) / *(float *)&v103);
              }
              int v216 = 3;
              if (*(unsigned char *)(v198 + 348))
              {
                if (*(unsigned char *)(*(void *)(a1 + 5416) + 106)) {
                  int v216 = 3;
                }
                else {
                  int v216 = 5;
                }
              }
              uint64_t v217 = *(_DWORD **)(a1 + 5400);
              int v218 = v216 * v215;
              int v219 = v217[8];
              if (v218 < v219) {
                int v219 = v218;
              }
              int v220 = v219 + v217[12];
              v217[10] = v218;
              v217[11] = v220;
            }
          }
          uint64_t v221 = *(unsigned int *)(a4 + 52);
          v416[0] = 0;
          uint64_t v222 = *(void *)(v11 + 392);
          *(unsigned char *)(v222 + 5001) = 0;
          uint64_t v404 = v222;
          if (*(unsigned char *)(v11 + 485))
          {
            *(_DWORD *)(v11 + 492) = 0;
            uint64_t v223 = a4 + 16;
LABEL_429:
            uint64_t v224 = *(void *)(v11 + 2672);
            if (!v224 || *(unsigned char *)(v224 + 32))
            {
              uint64_t v225 = *(void *)(v11 + 392);
              if (*(_DWORD *)(v225 + 1276))
              {
                *(unsigned char *)(v11 + 2685) = *(unsigned char *)(a1 + 1024);
                if (*(_DWORD *)(v225 + 228) <= 0x1DFu)
                {
                  *(_DWORD *)(v11 + 2688) = 1;
                  *(_WORD *)(v11 + 2692) = 257;
                  *(unsigned char *)(v11 + 2694) = 0;
                }
              }
            }
            uint64_t v381 = 0;
            uint64_t v382 = 0;
            *(unsigned char *)(v222 + 17) = 0;
            goto LABEL_435;
          }
          uint64_t v320 = v222;
          uint64_t v321 = v83;
          uint64_t v322 = malloc_type_calloc(32 * *(_DWORD *)(v83 + 572) * *(_DWORD *)(v83 + 568), 1uLL, 0x4AE20AB7uLL);
          *(void *)(v320 + 5016) = v322;
          uint64_t v223 = a4 + 16;
          if (!v322)
          {
            uint64_t v58 = 4294967188;
            goto LABEL_619;
          }
          int v323 = *(_DWORD *)(v321 + 572) * *(_DWORD *)(v321 + 568);
          uint64_t v83 = v321;
          uint64_t v222 = v404;
          if (v323)
          {
            uint64_t v324 = 0;
            unint64_t v325 = 0;
            do
            {
              *(unsigned char *)(*(void *)(v404 + 5016) + v324 + 26) = 0;
              *(unsigned char *)(*(void *)(v404 + 5016) + v324 + 24) = 32;
              *(unsigned char *)(*(void *)(v404 + 5016) + v324 + 25) = 32;
              ++v325;
              v324 += 32;
            }
            while (v325 < (*(_DWORD *)(v83 + 572) * *(_DWORD *)(v83 + 568)));
          }
          int v326 = *(unsigned __int8 *)(v11 + 485);
          *(_DWORD *)(v11 + 492) = 0;
          if (v326) {
            goto LABEL_429;
          }
          if (!*(unsigned char *)(v11 + 2620)
            || *(unsigned char *)(v11 + 2621)
            && ((v327 = *(void *)(a1 + 5392)) == 0 || (double v103 = 4.0, *(double *)(v327 + 136) >= 4.0)))
          {
            uint64_t v381 = 0;
            uint64_t v382 = 0;
            goto LABEL_703;
          }
          if (*(unsigned char *)(v404 + 1393) || *(unsigned char *)(v404 + 1392))
          {
            BOOL v328 = 1;
          }
          else
          {
            int v357 = *(unsigned __int8 *)(v404 + 1368);
            BOOL v328 = v357 == 2 || v357 == 7;
          }
          if (!*(unsigned char *)(v11 + 2622)
            || a3
            && ((uint64_t v329 = *(void *)(a3 + 16)) == 0
             || (uint64_t v330 = *(unsigned int *)(v404 + 1276), *(_DWORD *)(a3 + 4) <= v330)
             || !*(unsigned char *)(v329 + 8 * v330 + 4)))
          {
            uint64_t v382 = 0;
            goto LABEL_697;
          }
          BYTE4(v382) = 1;
          *(unsigned char *)(v11 + 2692) = 1;
          uint64_t v331 = *(void *)(v11 + 520);
          if (!v331)
          {
            LOBYTE(v382) = 0;
            uint64_t v99 = a3;
            goto LABEL_697;
          }
          int v332 = *(_DWORD *)(v331 + 104);
          if (v332)
          {
            int v333 = *(_DWORD *)(v331 + 136);
            BOOL v334 = v333 != 0;
            if (a3 && v333 && *(unsigned char *)(a3 + 11))
            {
              char v335 = 0;
              LOBYTE(v332) = 1;
              BOOL v334 = 1;
LABEL_690:
              uint64_t v99 = a3;
              BOOL v359 = a3 == 0;
              BOOL v360 = !v359 || !v334;
              if (v359 && v334) {
                char v361 = 0;
              }
              else {
                char v361 = v335;
              }
              BYTE4(v382) = v361;
              if (v360) {
                char v362 = v332;
              }
              else {
                char v362 = 1;
              }
              LOBYTE(v382) = v362;
              uint64_t v24 = v406;
              uint64_t v64 = a1;
              uint64_t v33 = v379;
              uint64_t v223 = a4 + 16;
              uint64_t v83 = a1 + 56528;
              uint64_t v222 = v404;
LABEL_697:
              HIDWORD(v381) = !v328;
              if (**(_DWORD **)(v64 + 152) == 2 && *(unsigned char *)(v222 + 1393) && !*(_DWORD *)(v222 + 1276))
              {
                if (*(unsigned char *)(*(void *)(v64 + 136) + 577) == 1)
                {
                  LOBYTE(v381) = 0;
                }
                else
                {
                  LOBYTE(v381) = 1;
                  *(unsigned char *)(v11 + 2692) = 1;
                }
                uint64_t v24 = v406;
                uint64_t v64 = a1;
                uint64_t v99 = a3;
                uint64_t v33 = v379;
                uint64_t v223 = a4 + 16;
                uint64_t v83 = a1 + 56528;
                uint64_t v222 = v404;
              }
              else
              {
                LOBYTE(v381) = 0;
              }
              if (!*(unsigned char *)(v11 + 2639))
              {
LABEL_435:
                char v401 = (uint64_t *)(v64 + 56256);
                if (*(unsigned char *)(v222 + 1368) == 2) {
                  int v226 = *(_DWORD *)(v64 + 1028) + 1;
                }
                else {
                  int v226 = 0;
                }
                unsigned int v387 = 0;
                *(_DWORD *)(v64 + 1028) = v226;
                uint64_t v373 = (void *)(v64 + 205456);
                uint64_t v374 = v222 + 1152;
                *(unsigned char *)(v11 + 472) = 0;
                uint64_t v372 = (const void *)(v64 + 119432);
                uint64_t v376 = (int *)(v64 + 5464);
                uint64_t v375 = (void *)(v11 + 2436);
                char v380 = (char *)(v64 + 208142);
                uint64_t v409 = v64 + 207926;
                uint64_t v385 = 88 * v221;
                uint64_t v386 = 88 * (v221 - 1);
                unsigned int v377 = (unsigned int *)(v64 + 5588);
                uint64_t v227 = 1986688113;
                uint64_t v405 = v11;
                uint64_t v391 = v13;
                uint64_t v378 = v14;
                while (1)
                {
                  ++v387;
                  if (*(_DWORD *)(v11 + 476) != 1)
                  {
                    v416[0] = 0;
                    if (!*(unsigned char *)(v11 + 485) && *(unsigned char *)(v11 + 2620) && v387 >= 2)
                    {
                      uint64_t v229 = *(void *)(v11 + 400);
                      memcpy(*(void **)(v222 + 128), *(const void **)(v229 + 128), (*(_DWORD *)(v222 + 196) * *(_DWORD *)(v222 + 232)));
                      BOOL v230 = *(const void **)(v229 + 136);
                      uint64_t v33 = v379;
                      memcpy(*(void **)(v222 + 136), v230, (*(_DWORD *)(v222 + 212) * *(_DWORD *)(v222 + 248)));
                      sub_1BBB0F204(v374);
                      uint64_t v227 = 1986688113;
                      uint64_t v83 = a1 + 56528;
                    }
                  }
                  unint64_t v231 = *(unsigned int *)(v11 + 2472);
                  if (v231) {
                    BOOL v232 = (*(_DWORD *)(v11 + 2468) & *(_DWORD *)(v11 + 2384) & (*(unsigned char *)(*(void *)(v64 + 136)
                  }
                                                                                          + 577) == 1)) == 0;
                  else {
                    BOOL v232 = 1;
                  }
                  if (!v232)
                  {
                    uint64_t v233 = 0;
                    int v234 = *(_DWORD *)(v11 + 2388);
                    unsigned int v235 = *(_DWORD *)(v11 + 2612);
                    unsigned int v236 = 4 * v234 / v235;
                    do
                    {
                      uint64_t v73 = 0;
                      uint64_t v237 = v233 + 1;
                      if (v235 >= 4)
                      {
                        unsigned int v238 = v234 * v233;
                        unsigned int v239 = v234 * v237 - 1;
                        uint64_t v75 = v234 * v233 + v236;
                        unsigned int v240 = v75 - 1;
                        if ((int)v75 - 1 <= v239)
                        {
                          unsigned int v241 = *(unsigned __int16 *)(v11 + 2476);
                          unsigned int v242 = v235 >> 2;
                          while (1)
                          {
                            uint64_t v74 = v75;
                            if (v240 < v241 || v238 > v241) {
                              break;
                            }
LABEL_465:
                            uint64_t v73 = 0;
                            if (--v242)
                            {
                              uint64_t v75 = v74 + v236;
                              unsigned int v240 = v75 - 1;
                              unsigned int v238 = v74;
                              if ((int)v75 - 1 <= v239) {
                                continue;
                              }
                            }
                            goto LABEL_469;
                          }
                          unint64_t v243 = 0;
                          while (v231 - 1 != v243)
                          {
                            uint64_t v75 = *(unsigned __int16 *)(v409 + 2 * v243++);
                            if (v238 <= v75 && v240 >= v75)
                            {
                              if (v243 < v231) {
                                goto LABEL_465;
                              }
                              break;
                            }
                          }
                          uint64_t v73 = 1;
                        }
                      }
LABEL_469:
                      *(unsigned char *)(v64 + v233++ + 208064) = v73;
                    }
                    while (v237 != 4);
                  }
                  uint64_t v245 = *(void *)(v11 + 392);
                  if (*(unsigned char *)(v64 + 1057) == 1)
                  {
                    unsigned int v246 = *(unsigned __int16 *)(v245 + 19112);
                    unsigned int v247 = *(unsigned __int16 *)(v245 + 19114) + 32;
                    if (v247 >= *(_DWORD *)(v245 + 196)) {
                      unsigned int v247 = *(_DWORD *)(v245 + 196);
                    }
                  }
                  else
                  {
                    unsigned int v246 = *(_DWORD *)(v245 + 228);
                    unsigned int v247 = *(_DWORD *)(v245 + 196);
                  }
                  *(_DWORD *)(v11 + 2644) = v246 >> 4;
                  *(_DWORD *)(v11 + 2648) = v247 >> 4;
                  if (!*(unsigned char *)(v11 + 485)) {
                    break;
                  }
                  if (*(unsigned char *)(v11 + 2620) && v387 >= 2) {
                    *(_DWORD *)(*(void *)(v11 + 2672) + 2976) = 1;
                  }
                  uint64_t v248 = sub_1BBB2D574(v64, v223, 0, v73, v74, v75);
                  if (v248)
                  {
LABEL_615:
                    uint64_t v58 = v248;
                    goto LABEL_616;
                  }
                  uint64_t v249 = *(void *)(v11 + 2672);
                  if (!v249 || *(unsigned char *)(v249 + 32))
                  {
                    uint64_t v250 = sub_1BBB2923C(v64, (uint64_t)v394, *(void *)(v11 + 392));
                    if (v250)
                    {
                      uint64_t v58 = v250;
LABEL_616:
                      CFLog();
                      goto LABEL_619;
                    }
                  }
LABEL_572:
                  uint64_t v317 = *(void *)(v11 + 2672);
                  uint64_t v223 = a4 + 16;
                  if (!v317 || *(unsigned char *)(v317 + 32)) {
                    sub_1BBB293A0(v64, *(void *)(v11 + 392), v99, (uint64_t)v394, v387, *(_DWORD *)(v11 + 2688), *(unsigned __int8 *)(v11 + 2692), SHIDWORD(v381), *(double *)&v227, v103, SBYTE4(v382), v382, v381, *(unsigned char *)(v11 + 2693), *(unsigned char *)(v11 + 2685), v416, v380);
                  }
                  uint64_t v83 = a1 + 56528;
                  uint64_t v227 = 1986688113;
                  if (v416[0] != 1)
                  {
                    uint64_t v318 = *(void *)(v11 + 2672);
                    if (!v318
                      || (*(unsigned char *)(v318 + 3462) = 0, (uint64_t v319 = *(void *)(v11 + 2672)) == 0)
                      || *(unsigned char *)(v319 + 32))
                    {
                      sub_1BBB29D50(v64, *(void *)(v11 + 392), v99, (uint64_t)v394, v387);
                    }
                    if (!*(unsigned char *)(v11 + 485) && *(_DWORD *)(v11 + 476) != 1)
                    {
                      if (*(unsigned char *)(v371 + 17)
                        || *(unsigned char *)(v11 + 2235) && !*(unsigned char *)(*(void *)(v11 + 392) + 1394)
                        || (uint64_t v353 = *(unsigned int *)(a4 + 52), !v353))
                      {
LABEL_583:
                        bzero(*(void **)(*(void *)(v11 + 408) + 32), 4 * *(unsigned int *)(*(void *)(v11 + 408) + 20));
                        uint64_t v33 = v379;
                      }
                      else
                      {
                        uint64_t v354 = *(void *)(v11 + 408);
                        int v355 = (unsigned __int8 *)(*(void *)(v354 + 48) + 9);
                        while (1)
                        {
                          int v356 = *v355;
                          v355 += 12;
                          if (v356 != 1) {
                            break;
                          }
                          if (!--v353) {
                            goto LABEL_583;
                          }
                        }
                        size_t v363 = *(unsigned int *)(v354 + 20);
                        uint64_t v364 = *(pthread_mutex_t **)(v354 + 160);
                        if (v364) {
                          pthread_mutex_lock(v364);
                        }
                        if (v363) {
                          memset(*(void **)(v354 + 168), 10, v363);
                        }
                        uint64_t v365 = *(pthread_mutex_t **)(v354 + 160);
                        if (v365) {
                          pthread_mutex_unlock(v365);
                        }
                        uint64_t v58 = sub_1BBB1BD7C(*(void *)(v11 + 408), (_DWORD *)(v371 + 96), v371 + 1152);
                        uint64_t v64 = a1;
                        if (*(unsigned char *)(a1 + 1600))
                        {
                          int v366 = *(_WORD **)(a1 + 1608);
                          if (v366)
                          {
                            uint64_t v367 = *(void *)(a1 + 136);
                            unsigned int v368 = (int)*(float *)(v367 + 60);
                            unsigned int v369 = *(_DWORD *)(v367 + 304);
                            if (v369 && v369 < 2 * v368 || *(_DWORD *)(v371 + 1276) % v368) {
                              unsigned int v370 = 0;
                            }
                            else {
                              unsigned int v370 = sub_1BBB02744(*(void *)(v371 + 128), *(void *)(v371 + 136), *(_DWORD *)(v371 + 232), *(_DWORD *)(v371 + 248), *(_DWORD *)(v371 + 228), *(_DWORD *)(v371 + 196));
                            }
                            *int v366 = __rev16(v370);
                            uint64_t v64 = a1;
                          }
                        }
                        uint64_t v24 = v406;
                        uint64_t v99 = a3;
                        uint64_t v33 = v379;
                        if (v58)
                        {
LABEL_619:
                          CFLog();
                          goto LABEL_620;
                        }
                      }
                    }
                    if (!v384 || *(unsigned char *)(v384 + 32))
                    {
                      sub_1BBB2AC6C(v64, *(void *)(v11 + 392), (uint64_t)v394);
                      sub_1BBB2BC0C(v64, *(void *)(v11 + 392), v99, (uint64_t)v394, a4);
                    }
                    uint64_t v62 = (_DWORD *)a4;
                    *(_DWORD *)a4 = 1;
                    uint64_t v63 = *(void *)(v11 + 2672);
                    uint64_t v61 = a1 + 5076;
                    if (v63)
                    {
LABEL_100:
                      if (!*(unsigned char *)(v63 + 32)) {
                        goto LABEL_102;
                      }
                    }
LABEL_101:
                    *uint64_t v62 = *(unsigned char *)(v24 + 317) == 0;
                    sub_1BBB2C660(v64, (uint64_t)v394, v13, v33);
LABEL_102:
                    if (v14[1] && *(unsigned char *)(v61 + 349) && *v14 && !*(unsigned char *)(*(void *)(v11 + 392) + 17))
                    {
                      uint64_t v65 = v33;
                      uint64_t v66 = *(void *)(v64 + 5416);
                      uint64_t v67 = *(void *)(v64 + 136);
                      if (*(unsigned char *)(v67 + 4856))
                      {
                        *(unsigned char *)(v67 + 4896) = 1;
                        int v68 = *(_DWORD *)(v67 + 4860);
                        uint64_t v69 = *(int *)(v67 + 4864);
                        *(_DWORD *)(v67 + 4860) = v69;
                        *(_DWORD *)(v67 + 4864) = v68;
                        *(void *)(v66 + 176) = *(void *)(v67 + 4872 + 8 * v69);
                        *(void *)(v66 + 168) = *(void *)(v67 + 4872 + 8 * *(int *)(v67 + 4864));
                      }
                      else
                      {
                        BOOL v111 = *(const void **)(v66 + 152);
                        if (v111) {
                          CFRelease(v111);
                        }
                        *(void *)(v66 + 152) = CFRetain(*(CFTypeRef *)(v66 + 144));
                      }
                      uint64_t v33 = v65;
                    }
                    *a7 = 2;
                    goto LABEL_177;
                  }
                }
                if (*(unsigned char *)(v11 + 487))
                {
                  if (*(void *)(v11 + 2672))
                  {
                    if (*(_DWORD *)(v245 + 60) == -1)
                    {
                      uint64_t v248 = sub_1BBB2D574(v64, (uint64_t)v394, 1, v73, v74, v75);
                      uint64_t v227 = 1986688113;
                      uint64_t v83 = a1 + 56528;
                      if (v248) {
                        goto LABEL_615;
                      }
                    }
                  }
                }
                uint64_t v383 = *v394;
                if (!*v394)
                {
                  CFLog();
                  uint64_t v58 = 4294958324;
                  goto LABEL_619;
                }
                if (*(_DWORD *)(v11 + 476) == 1)
                {
                  *(_DWORD *)(v11 + 2432) = 0;
                  uint64_t v251 = *(unsigned int *)(v83 + 552);
                  uint64_t v252 = *(unsigned int *)(v83 + 556);
                  uint64_t v253 = v401;
                  if ((int)v251 >= 1)
                  {
                    do
                    {
                      uint64_t v254 = *v253++;
                      ++*(_DWORD *)(v254 + 8);
                      --v251;
                    }
                    while (v251);
                  }
                  uint64_t v255 = (uint64_t *)v83;
                  if ((int)v252 >= 1)
                  {
                    do
                    {
                      uint64_t v256 = *v255++;
                      ++*(_DWORD *)(v256 + 8);
                      --v252;
                    }
                    while (v252);
                  }
                  unsigned int v257 = *(_DWORD *)(v11 + 2612);
                  if (v257)
                  {
                    uint64_t v258 = 0;
                    int v388 = *(_DWORD *)(v83 + 572) * *(_DWORD *)(v83 + 568);
                    uint64_t v389 = *(unsigned int *)(v11 + 2612);
                    uint64_t v390 = v221;
                    while (1)
                    {
                      uint64_t v259 = (_DWORD *)(v64 + 88 * v258);
                      uint64_t v260 = v259 + 1380;
                      signed int v261 = v388 * (int)v258 / v257;
                      uint64_t v392 = v258 + 1;
                      unsigned int v262 = v388 * ((int)v258 + 1) / v257;
                      v259[1383] = v261;
                      v259[1384] = v262 - v261;
                      v259[1382] = v258;
                      uint64_t v263 = (uint64_t)&v259[22 * v258 + 1380];
                      uint64_t v266 = *(void **)(v263 + 80);
                      uint64_t v265 = (void *)(v263 + 80);
                      BOOL v264 = v266;
                      size_t v267 = (388 * *((_DWORD *)v265 - 16) + 512);
                      if (!v266) {
                        goto LABEL_498;
                      }
                      if (v260[22 * v258 + 18] < v267) {
                        break;
                      }
LABEL_499:
                      int v412 = 0;
                      __int16 v413 = v260;
                      v411[0] = v64;
                      v411[1] = v64 + 50640 * v258 + 5616;
                      int v269 = *(_DWORD *)(v83 + 568);
                      int v270 = v261 / v269;
                      int v271 = (int)(v262 - 1) / v269;
                      int v272 = v271 - v261 / v269;
                      uint64_t v227 = 1986688113;
                      if (v271 >= v261 / v269)
                      {
                        int v273 = 0;
                        do
                        {
                          int v274 = v270 + v273;
                          int v275 = v261;
                          if (v273) {
                            int v275 = *(_DWORD *)(v83 + 568) * v274;
                          }
                          int v414 = v275;
                          int v276 = v262;
                          if (v272 != v273) {
                            int v276 = *(_DWORD *)(v83 + 568) + *(_DWORD *)(v83 + 568) * (v270 + v273);
                          }
                          int v277 = v276 - v275;
                          int v415 = v276 - v275;
                          if (*v401)
                          {
                            sub_1BBB31B3C(*v401, v270 + v273, 4 * *(_DWORD *)(v405 + 540));
                            uint64_t v83 = a1 + 56528;
                          }
                          if (*(void *)v83) {
                            sub_1BBB31B3C(*(void *)v83, v270 + v273, 4 * *(_DWORD *)(v405 + 540));
                          }
                          sub_1BBB24040((uint64_t)v411);
                          uint64_t v83 = a1 + 56528;
                          uint64_t v227 = 1986688113;
                          if (v277 == *(_DWORD *)(a1 + 57096))
                          {
                            unsigned int v278 = *(pthread_mutex_t **)(v404 + 72);
                            if (v278)
                            {
                              pthread_mutex_lock(v278);
                              uint64_t v227 = 1986688113;
                              uint64_t v83 = a1 + 56528;
                            }
                            int v279 = v270 - 2 + v273;
                            if (v274 >= v271) {
                              int v279 = v271;
                            }
                            *(_DWORD *)(v404 + 64) = v279;
                            unsigned int v280 = *(pthread_cond_t **)(v404 + 80);
                            if (v280)
                            {
                              pthread_cond_broadcast(v280);
                              uint64_t v227 = 1986688113;
                              uint64_t v83 = a1 + 56528;
                            }
                            int v281 = *(pthread_mutex_t **)(v404 + 72);
                            if (v281)
                            {
                              pthread_mutex_unlock(v281);
                              uint64_t v227 = 1986688113;
                              uint64_t v83 = a1 + 56528;
                            }
                          }
                          ++v273;
                        }
                        while (v272 + 1 != v273);
                      }
                      uint64_t v13 = v391;
                      uint64_t v258 = v392;
                      unsigned int v257 = v389;
                      uint64_t v221 = v390;
                      uint64_t v64 = a1;
                      if (v392 == v389) {
                        goto LABEL_520;
                      }
                    }
                    free(v264);
LABEL_498:
                    v260[22 * v258 + 18] = v267;
                    int v268 = malloc_type_malloc(v267, 0x82ECD37AuLL);
                    uint64_t v83 = a1 + 56528;
                    *uint64_t v265 = v268;
                    goto LABEL_499;
                  }
LABEL_520:
                  uint64_t v282 = *(unsigned int *)(v83 + 552);
                  uint64_t v283 = *(unsigned int *)(v83 + 556);
                  int v284 = v401;
                  if ((int)v282 >= 1)
                  {
                    do
                    {
                      uint64_t v285 = *v284++;
                      --*(_DWORD *)(v285 + 8);
                      --v282;
                    }
                    while (v282);
                  }
                  unsigned __int8 v286 = (uint64_t *)v83;
                  uint64_t v11 = v405;
                  if ((int)v283 >= 1)
                  {
                    do
                    {
                      uint64_t v287 = *v286++;
                      --*(_DWORD *)(v287 + 8);
                      --v283;
                    }
                    while (v283);
                  }
                  LODWORD(v288) = v383;
                  uint64_t v289 = a4;
                  if ((int)v221 >= 1)
                  {
                    uint64_t v290 = 0;
                    uint64_t v291 = v377;
                    uint64_t v288 = v383;
                    do
                    {
                      int v292 = *v291 + 8;
                      *(unsigned char *)uint64_t v288 = HIBYTE(v292);
                      *(unsigned char *)(v288 + 1) = BYTE2(v292);
                      *(unsigned char *)(v288 + 2) = BYTE1(v292);
                      *(unsigned char *)(v288 + 3) = v292;
                      *(_DWORD *)(v288 + 4) = 1986688113;
                      uint64_t v293 = (void *)(v288 + 8);
                      *(void *)(*(void *)(a4 + 72) + 8 * v290) = v293;
                      *(_DWORD *)(*(void *)(a4 + 64) + 4 * v290) = *v291;
                      memcpy(v293, *(const void **)(v291 + 3), *v291);
                      uint64_t v227 = 1986688113;
                      unsigned int v294 = *v291;
                      v291 += 22;
                      uint64_t v288 = (uint64_t)v293 + v294;
                      ++v290;
                    }
                    while (v221 != v290);
                  }
                }
                else
                {
                  uint64_t v295 = *(void *)(v11 + 352);
                  uint64_t v296 = *(unsigned int *)(v295 + 23656);
                  if ((int)v296 >= 1)
                  {
                    for (uint64_t i = 0; i != v296; ++i)
                    {
                      uint64_t v298 = *(void *)(v295 + 22840 + 8 * i);
                      if (v298)
                      {
                        uint64_t v299 = sub_1BBB12008(*(unsigned __int8 **)(v298 + 488));
                        if (v299)
                        {
LABEL_612:
                          uint64_t v58 = v299;
                          goto LABEL_619;
                        }
                        int v300 = *(_DWORD **)(v298 + 488);
                        if (v300[38])
                        {
                          if (byte_1E9F82E60) {
                            sub_1BBB55548(*(void *)(v298 + 488));
                          }
                          else {
                            MEMORY[0](*(void *)(v298 + 488));
                          }
                          uint64_t v301 = *(unsigned int *)(v64 + 5504);
                          v300[42] = *(_DWORD *)(v11 + 2644);
                          v300[43] = *(_DWORD *)(v11 + 2648);
                          if ((int)v301 >= 1)
                          {
                            uint64_t v302 = 0;
                            do
                            {
                              *(void *)(*(void *)(v64 + 5496) + v302) = v300;
                              v302 += 16;
                            }
                            while (16 * v301 != v302);
                          }
                          sub_1BBB2175C(*(void *)(v64 + 5512), *(void *)(v64 + 5488), v301);
                          v300[38] = 0;
                        }
                      }
                    }
                  }
                  uint64_t v303 = *(unsigned int *)(v295 + 23660);
                  if ((int)v303 >= 1)
                  {
                    for (uint64_t j = 0; j != v303; ++j)
                    {
                      uint64_t v305 = *(void *)(v295 + 8 * j + 23112);
                      if (v305)
                      {
                        uint64_t v299 = sub_1BBB12008(*(unsigned __int8 **)(v305 + 488));
                        if (v299) {
                          goto LABEL_612;
                        }
                        unsigned int v306 = *(_DWORD **)(v305 + 488);
                        if (v306[38])
                        {
                          if (byte_1E9F82E60) {
                            sub_1BBB55548(*(void *)(v305 + 488));
                          }
                          else {
                            MEMORY[0](*(void *)(v305 + 488));
                          }
                          v306[42] = *(_DWORD *)(v11 + 2644);
                          v306[43] = *(_DWORD *)(v11 + 2648);
                          uint64_t v307 = *(unsigned int *)(v64 + 5504);
                          if ((int)v307 >= 1)
                          {
                            uint64_t v308 = 0;
                            do
                            {
                              *(void *)(*(void *)(v64 + 5496) + v308) = v306;
                              v308 += 16;
                            }
                            while (16 * v307 != v308);
                          }
                          sub_1BBB2175C(*(void *)(v64 + 5512), *(void *)(v64 + 5488), v307);
                          v306[38] = 0;
                        }
                      }
                    }
                  }
                  *(_DWORD *)(v11 + 2432) = 0;
                  if (*(unsigned char *)(v11 + 344) && *(unsigned char *)v11)
                  {
                    *(unsigned char *)(v11 + 344) = 0;
                    memcpy(v373, v372, 0x150uLL);
                  }
                  uint64_t v309 = sub_1BBB343C4(v376, v64, v221, *(unsigned char *)(v11 + 2232) != 0, a6 != 0);
                  uint64_t v13 = v391;
                  if (v309)
                  {
                    uint64_t v58 = v309;
                    goto LABEL_616;
                  }
                  sub_1BBB2175C(*(void *)(v64 + 5512), *(void *)(v64 + 5472), v221);
                  *uint64_t v375 = 0;
                  LODWORD(v288) = v383;
                  uint64_t v289 = a4;
                  uint64_t v227 = 1986688113;
                  if ((int)v221 >= 1)
                  {
                    uint64_t v310 = 0;
                    uint64_t v311 = 0;
                    uint64_t v312 = *(void *)(v64 + 5480);
                    uint64_t v288 = v383;
                    do
                    {
                      int v313 = *(_DWORD *)(v312 + v310 + 68) + 8;
                      *(unsigned char *)uint64_t v288 = HIBYTE(v313);
                      *(unsigned char *)(v288 + 1) = BYTE2(v313);
                      *(unsigned char *)(v288 + 2) = BYTE1(v313);
                      *(unsigned char *)(v288 + 3) = v313;
                      *(_DWORD *)(v288 + 4) = 1986688113;
                      int v314 = (void *)(v288 + 8);
                      *(void *)(*(void *)(v289 + 72) + 8 * v311) = v314;
                      *(_DWORD *)(*(void *)(v289 + 64) + 4 * v311) = *(_DWORD *)(*(void *)(v64 + 5480) + v310 + 68);
                      memcpy(v314, *(const void **)(*(void *)(v64 + 5480) + v310 + 80), *(int *)(*(void *)(v64 + 5480) + v310 + 68));
                      uint64_t v312 = *(void *)(v64 + 5480);
                      uint64_t v315 = *(int *)(v312 + v310 + 68);
                      uint64_t v288 = (uint64_t)v314 + v315;
                      if ((v386 == v310 || !*(unsigned char *)(v64 + 1622))
                        && (*(unsigned char *)(v64 + 1619)
                         || *(unsigned char *)(v64 + 1618)
                         || *(unsigned char *)(v64 + 1620)
                         || *(unsigned char *)(a1 + 5076)
                         || *(unsigned char *)(v64 + 1621)))
                      {
                        unsigned int v316 = sub_1BBB2CAD8(v64, v404, v315, v288);
                        if (v316 > 0x3D090)
                        {
                          CFLog();
                          uint64_t v58 = 4294967246;
                          goto LABEL_619;
                        }
                        v288 += v316;
                        *(_DWORD *)(*(void *)(a4 + 64) + 4 * v311) += v316;
                        uint64_t v312 = *(void *)(v64 + 5480);
                        LODWORD(v315) = *(_DWORD *)(v312 + v310 + 68);
                      }
                      else
                      {
                        unsigned int v316 = 0;
                      }
                      *(_DWORD *)(v11 + 2436) += 8 * (v316 + v315);
                      *(_DWORD *)(v11 + 2440) += 8 * *(_DWORD *)(v312 + v310 + 68);
                      ++v311;
                      v310 += 88;
                      uint64_t v289 = a4;
                      uint64_t v227 = 1986688113;
                    }
                    while (v385 != v310);
                  }
                }
                *(_DWORD *)(v289 + 24) = v288 - v383;
                uint64_t v24 = v406;
                uint64_t v14 = v378;
                uint64_t v33 = v379;
                uint64_t v99 = a3;
                uint64_t v222 = v404;
                goto LABEL_572;
              }
              *(_WORD *)(v11 + 2692) = 257;
              *(unsigned char *)(v11 + 2694) = 0;
LABEL_703:
              if (*(unsigned char *)(v11 + 2639))
              {
                *(unsigned char *)(v11 + 2685) = *(unsigned char *)(v64 + 1024);
                *(unsigned char *)(v222 + 17) = 0;
                *(_DWORD *)(v11 + 2688) = 1;
              }
              goto LABEL_435;
            }
            LOBYTE(v332) = 0;
          }
          else
          {
            BOOL v334 = 0;
          }
          char v335 = 1;
          goto LABEL_690;
        }
        if (*(unsigned char *)(v11 + 2637))
        {
          if (!*(unsigned char *)(v198 + 348))
          {
            if (*v403) {
              int v201 = 3;
            }
            else {
              int v201 = 0;
            }
            float v202 = (float)v201;
            goto LABEL_406;
          }
        }
        else if (!*(unsigned char *)(v198 + 348))
        {
          float v202 = 0.0;
LABEL_406:
          uint64_t v203 = a1;
          uint64_t v204 = v407;
          goto LABEL_407;
        }
        uint64_t v203 = a1;
        uint64_t v204 = v407;
        *(unsigned char *)(v407 + 812) = *(unsigned __int16 *)(a1 + 5426) == 1;
        float v202 = 0.0;
LABEL_407:
        LODWORD(v77) = *(_DWORD *)(v94 + 4928);
        float v205 = sub_1BBB0E234((unsigned __int8 *)v204, *(unsigned __int8 *)(v203 + 1025), *(_DWORD *)(v94 + 1276), *(unsigned __int8 *)(v94 + 1416), *(void *)(v203 + 5416), *(float *)(v11 + 416), *(float *)(v94 + 4936), (double)*(unint64_t *)&v77, v202);
        uint64_t v94 = v104;
        *(float *)(v11 + 416) = v205;
        LODWORD(v103) = *(_DWORD *)(v104 + 4940);
        double v206 = *(double *)(v204 + 136);
        *(float *)&double v206 = v206;
        uint64_t v83 = a1 + 56528;
        if (*(float *)&v103 != *(float *)&v206)
        {
          *(_DWORD *)(v104 + 4940) = LODWORD(v206);
          if (*(_DWORD *)v408)
          {
            sub_1BBAF997C(v408, v104 + 4928, (char)v95, v206);
            uint64_t v94 = v104;
            uint64_t v83 = a1 + 56528;
            *(_DWORD *)(v408 + 236) = *(_DWORD *)(v104 + 4984);
            int v207 = *(_DWORD *)(v408 + 248);
            *(_DWORD *)(v408 + 240) = *(_DWORD *)(v104 + 4988);
            *(_DWORD *)(v408 + 244) = v207;
          }
        }
        goto LABEL_410;
      }
      unsigned int v140 = *(unsigned __int8 *)(v94 + 1368);
      if (v140 <= 9 && ((1 << v140) & 0x294) != 0) {
        uint64_t v141 = 4968;
      }
      else {
        uint64_t v141 = 4976;
      }
      double v142 = *(double *)(v94 + v141);
      *(double *)(v139 + 456) = v142;
      uint64_t v143 = *(void *)(a1 + 5400);
      if (v143)
      {
        *(_DWORD *)(v94 + 4944) = *(_DWORD *)(v143 + 28);
        *(_DWORD *)(v94 + 4948) = *(_DWORD *)(*(void *)(a1 + 5400) + 32);
      }
      uint64_t v144 = *(void *)(a1 + 5408);
      if (v144)
      {
        *(_DWORD *)(v94 + 4952) = *(_DWORD *)(v144 + 28);
        *(_DWORD *)(v94 + 4956) = *(_DWORD *)(*(void *)(a1 + 5408) + 32);
      }
      sub_1BBAF997C(v139, v94 + 4928, *(char *)(v94 + 1368), v142);
      *(_DWORD *)(v139 + 236) = *(_DWORD *)(v104 + 4984);
      int v145 = *(_DWORD *)(v139 + 248);
      *(_DWORD *)(v139 + 240) = *(_DWORD *)(v104 + 4988);
      *(_DWORD *)(v139 + 244) = v145;
      if (*(_DWORD *)(v11 + 2424) && *(double *)(v139 + 272) != 0.0) {
        *(_DWORD *)(v11 + 2420) = vcvts_n_u32_f32((float)*(unsigned int *)(v104 + 4928) / *(float *)(v104 + 4940), 2uLL);
      }
      if (*(unsigned char *)(v11 + 528) && !*(_WORD *)(*(void *)(a1 + 136) + 326) && *(unsigned char *)(v11 + 2628))
      {
        LOBYTE(v146) = 0;
        unsigned int v348 = *(unsigned __int8 *)(v104 + 1368);
        if (v348 > 8 || ((1 << v348) & 0x129) == 0) {
          goto LABEL_254;
        }
        uint64_t v349 = *(void *)(*(void *)(v11 + 352) + 22824);
        uint64_t v350 = *(unsigned int *)(v349 + 12);
        if ((int)v350 >= 1)
        {
          int v146 = 0;
          uint64_t v351 = (uint64_t *)(v349 + 216);
          do
          {
            uint64_t v352 = *v351;
            if (!*(unsigned char *)(*v351 + 1398) && !*(unsigned char *)(v352 + 1394)) {
              v146 |= *(_DWORD *)(v352 + 5004);
            }
            ++v351;
            --v350;
          }
          while (v350);
LABEL_254:
          int v147 = *(unsigned __int8 *)(a1 + 1057);
          if (*(unsigned char *)(a1 + 1057))
          {
            unint64_t v148 = (unsigned __int16 *)(v104 + 19112);
            uint64_t v149 = (unsigned __int16 *)(v104 + 19126);
            if (v147 == 1) {
              uint64_t v149 = (unsigned __int16 *)(v104 + 19114);
            }
            else {
              unint64_t v148 = (unsigned __int16 *)(v104 + 19124);
            }
            unsigned int v150 = *v149 * *v148;
            uint64_t v151 = *(void *)(v11 + 352);
            uint64_t v152 = *(void *)(v151 + 22840);
            if (v152)
            {
              uint64_t v153 = *(unsigned int *)(v151 + 23656);
              if ((int)v153 >= 1)
              {
                int v154 = (uint64_t *)(v151 + 22840);
                int v155 = *(_DWORD *)(*(void *)(v11 + 392) + 1288);
                int v156 = v155 - *(_DWORD *)(v152 + 1288);
                do
                {
                  uint64_t v158 = *v154++;
                  uint64_t v157 = v158;
                  int v159 = v155 - *(_DWORD *)(v158 + 1288);
                  if (v158) {
                    BOOL v160 = v159 <= 0;
                  }
                  else {
                    BOOL v160 = 1;
                  }
                  char v161 = !v160;
                  if ((v161 & (v159 < v156)) != 0)
                  {
                    uint64_t v152 = v157;
                    int v156 = v159;
                  }
                  --v153;
                }
                while (v153);
              }
              int v162 = (unsigned __int16 *)(v152 + 19112);
              int v163 = (unsigned __int16 *)(v152 + 19124);
              uint64_t v164 = 7;
              if (v147 == 1)
              {
                uint64_t v164 = 1;
                int v163 = v162;
              }
              unsigned int v165 = v162[v164] * *v163;
            }
            else
            {
              unsigned int v165 = v150;
            }
            LOBYTE(v147) = v165 < v150;
          }
          int v342 = *v403;
          unsigned __int8 v402 = v146;
          char v393 = v147;
          if (v342 == 1) {
            int v343 = 1;
          }
          else {
            int v343 = v342 == 2 && v403[3] < 2u;
          }
          sub_1BBAF8710(v139, a1, *(_DWORD *)(v104 + 1276), v343);
          sub_1BBAF87A8(v139, v104, (uint64_t *)(*(void *)(v11 + 352) + 22840), (uint64_t *)(*(void *)(v11 + 352) + 23112), v393, v402, *(_DWORD *)(v11 + 476) == 1);
          float v345 = v344;
          *(float *)(v11 + 416) = v345;
          if (*(unsigned char *)(a1 + 5424))
          {
            uint64_t v33 = v379;
            uint64_t v83 = a1 + 56528;
            uint64_t v94 = v104;
            if (!*(void *)(a1 + 5392))
            {
LABEL_674:
              *(float *)(v94 + 1364) = v345;
              goto LABEL_675;
            }
            *(_DWORD *)(*(void *)(a1 + 5416) + 344) = (int)*(double *)(v139 + 304);
            uint64_t v346 = *(void *)(a1 + 5392);
            if (*(unsigned char *)(v346 + 801)) {
              BOOL v347 = *(unsigned __int8 *)(v346 + 802) != 0;
            }
            else {
              BOOL v347 = 0;
            }
            float v345 = sub_1BBAF9238(v139, *(void *)(a1 + 5416), a1, v347);
            if (v345 < 10.0) {
              float v345 = 10.0;
            }
            LODWORD(v103) = 1112276992;
            if (v345 > 51.0) {
              float v345 = 51.0;
            }
            *(float *)(v11 + 416) = v345;
            if (*(_DWORD *)(*(void *)(a1 + 136) + 4852) == 2)
            {
              uint64_t v94 = v104;
              LODWORD(v103) = *(_DWORD *)(v104 + 4940);
              uint64_t v33 = v379;
              uint64_t v83 = a1 + 56528;
              if (*(float *)&v103 <= 5000000.0)
              {
                LODWORD(v103) = 22.0;
                if (v345 < 22.0) {
                  float v345 = 22.0;
                }
                *(float *)(v11 + 416) = v345;
              }
              goto LABEL_674;
            }
          }
          uint64_t v33 = v379;
          uint64_t v83 = a1 + 56528;
          uint64_t v94 = v104;
          goto LABEL_674;
        }
      }
      LOBYTE(v146) = 0;
      goto LABEL_254;
    }
    int v106 = 250;
    if (*(unsigned char *)(a1 + 1024) && v407)
    {
      if (v408)
      {
        uint64_t v107 = *(int *)(v408 + 216);
        if ((v107 - 1) < 2)
        {
          int v106 = dword_1BBB8BE0C[v107];
          goto LABEL_193;
        }
        int v106 = dword_1BBB8BE0C[v107];
      }
      double v76 = *(double *)(v407 + 136);
      if (v76 <= (double)(3000 / v106))
      {
        double v76 = 1000.0 / v76;
        int v106 = 3 * v76;
      }
    }
LABEL_193:
    LODWORD(v76) = *(_DWORD *)(v94 + 4928);
    double v76 = sub_1BBAF2FE8(*(void *)(a1 + 5400), v106, *(int *)(v94 + 1332), *(_DWORD *)(v94 + 1336), *(unsigned __int8 *)(a1 + 5424), (double)*(unint64_t *)&v76, *(float *)(v94 + 4940));
    uint64_t v94 = v104;
    uint64_t v83 = a1 + 56528;
    if (v408)
    {
      unsigned int v115 = *(_DWORD *)(v408 + 376);
      if (v115)
      {
        double v77 = *(double *)(v408 + 280);
        HIDWORD(v76) = 1083129856;
        double v103 = (double)(*(_DWORD *)(v104 + 4928) * v106) / (*(double *)(v408 + 288) * 1000.0);
        if (v77 < v103) {
          double v103 = *(double *)(v408 + 280);
        }
        *(double *)(v408 + 280) = v103;
        if (v95 <= 9 && ((1 << v95) & 0x294) != 0)
        {
          double v116 = *(float *)(v104 + 4940);
          double v117 = (double)v115 * 1000.0 / v116;
          if (v117 < (double)v106) {
            double v117 = (double)v106;
          }
          int v118 = (int)v117;
          LODWORD(v117) = *(_DWORD *)(v104 + 4932);
          double v76 = sub_1BBAF2FE8(*(void *)(a1 + 5408), v118, *(int *)(v104 + 1332), *(_DWORD *)(v104 + 1336), *(unsigned __int8 *)(a1 + 5424), (double)*(unint64_t *)&v117, v116 / (double)v115);
          uint64_t v94 = v104;
          uint64_t v83 = a1 + 56528;
        }
      }
    }
    goto LABEL_202;
  }
  uint64_t v58 = 0;
  *a7 = 0;
  *(_DWORD *)(a4 + 24) = 4;
  if (*(_DWORD *)(v11 + 476) == 1)
  {
    uint64_t v59 = *(unsigned int **)(a8 + 24);
    if (v59) {
      MEMORY[0x1C1861060](*v59);
    }
    return 0;
  }
  return v58;
}

void sub_1BBB343AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1BBB343C4(int *a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v10 = (_DWORD *)(a2 + 57096);
  int v11 = *a1;
  if (*a1 < a3)
  {
    free(*((void **)a1 + 1));
    if (*a1 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        free(*(void **)(*((void *)a1 + 2) + v13 + 80));
        *(void *)(*((void *)a1 + 2) + v13 + 80) = 0;
        *(_DWORD *)(*((void *)a1 + 2) + v13 + 72) = 0;
        ++v14;
        v13 += 88;
      }
      while (v14 < *a1);
    }
    free(*((void **)a1 + 2));
    free(*((void **)a1 + 3));
    free(*((void **)a1 + 4));
    *a1 = a3;
    int v15 = malloc_type_malloc(16 * a3, 0x82ECD37AuLL);
    *((void *)a1 + 1) = v15;
    if (!v15) {
      goto LABEL_49;
    }
    unsigned int v16 = malloc_type_calloc(88 * *a1, 1uLL, 0x4AE20AB7uLL);
    *((void *)a1 + 2) = v16;
    if (!v16) {
      goto LABEL_49;
    }
    int v17 = sub_1BBAF9E6C();
    a1[10] = v17;
    int v18 = v10[1];
    int v19 = v18 / v17;
    if (v18 / v17 <= 2)
    {
      int v17 = v18 / 3;
      a1[10] = v18 / 3;
      int v19 = 3;
    }
    uint64_t v20 = malloc_type_malloc(16 * v17, 0x82ECD37AuLL);
    *((void *)a1 + 3) = v20;
    if (!v20) {
      goto LABEL_49;
    }
    uint64_t v21 = malloc_type_malloc(16 * a1[10], 0x82ECD37AuLL);
    *((void *)a1 + 4) = v21;
    if (!v21) {
      goto LABEL_49;
    }
    if (*a1 >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      do
      {
        *(void *)(*((void *)a1 + 2) + v22) = a2;
        *(_DWORD *)(*((void *)a1 + 2) + v22 + 8) = v24;
        *(unsigned char *)(*((void *)a1 + 2) + v22 + 64) = a5;
        *(void *)(*((void *)a1 + 1) + v23) = sub_1BBB348E8;
        *(void *)(*((void *)a1 + 1) + v23 + 8) = *((void *)a1 + 2) + v22;
        ++v24;
        v23 += 16;
        v22 += 88;
      }
      while (v24 < *a1);
    }
    if (a1[10] >= 1)
    {
      int v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      do
      {
        *(void *)(*((void *)a1 + 3) + v26) = sub_1BBB348D8;
        *(void *)(*((void *)a1 + 3) + v26 + 8) = *(void *)(a2 + 5496) + v26;
        *(_DWORD *)(*((void *)a1 + 4) + v26 + 8) = v25;
        uint64_t v28 = v27 + 1;
        v25 += v19;
        if (v27 == a1[10] - 1) {
          int v29 = v18;
        }
        else {
          int v29 = v25;
        }
        *(_DWORD *)(*((void *)a1 + 4) + v26 + 12) = v29;
        v26 += 16;
        uint64_t v27 = v28;
      }
      while (v28 < a1[10]);
    }
  }
  int v30 = v10[1] * *v10;
  if (a3 >= 6 && (a4 & 1) != 0)
  {
    int v31 = 0;
    uint64_t v32 = 0;
    int v33 = 80 * v30 / 100;
    do
    {
      *(_DWORD *)(*((void *)a1 + 2) + v32 + 12) = v31 / 4;
      v31 += v33;
      *(_DWORD *)(*((void *)a1 + 2) + v32 + 16) = v31 / 4 - (v5 >> 2);
      v32 += 88;
    }
    while (v32 != 352);
    int v34 = 0;
    uint64_t v35 = 0;
    int v36 = a3 - 4;
    int v37 = v30 - v33;
    do
    {
      int v38 = v34 / v36;
      *(_DWORD *)(*((void *)a1 + 2) + v35 + 364) = v34 / v36 + v33;
      v34 += v37;
      *(_DWORD *)(*((void *)a1 + 2) + v35 + 368) = v34 / v36 - v38;
      v35 += 88;
    }
    while (88 * (a3 - 4) != v35);
  }
  else
  {
    if (a3 < 1)
    {
      int v46 = 0;
      goto LABEL_38;
    }
    int v39 = 0;
    uint64_t v40 = 0;
    do
    {
      int v41 = v39 / a3;
      *(_DWORD *)(*((void *)a1 + 2) + v40 + 12) = v39 / a3;
      v39 += v30;
      *(_DWORD *)(*((void *)a1 + 2) + v40 + 16) = v39 / a3 - v41;
      v40 += 88;
    }
    while (88 * a3 != v40);
  }
  uint64_t v42 = 0;
  do
  {
    uint64_t v43 = *((void *)a1 + 2);
    size_t v44 = (388 * *(_DWORD *)(v43 + v42 + 16) + 512);
    int v45 = *(void **)(v43 + v42 + 80);
    if (v45)
    {
      if (*(_DWORD *)(v43 + v42 + 72) >= v44) {
        goto LABEL_35;
      }
      free(v45);
      uint64_t v43 = *((void *)a1 + 2);
    }
    *(_DWORD *)(v43 + v42 + 72) = v44;
    *(void *)(*((void *)a1 + 2) + v42 + 80) = malloc_type_malloc(v44, 0x82ECD37AuLL);
LABEL_35:
    v42 += 88;
  }
  while (88 * a3 != v42);
  int v46 = 1;
LABEL_38:
  if (v11 >= a3 || *(unsigned char *)(a2 + 207682) != 2) {
    return 0;
  }
  int v47 = *(_DWORD **)(a2 + 207696);
  if (*(_DWORD *)(a2 + 207712) >= a3)
  {
LABEL_44:
    if (v46)
    {
      uint64_t v49 = a3;
      uint64_t v50 = 12;
      do
      {
        *v47++ = *(_DWORD *)(*((void *)a1 + 2) + v50);
        v50 += 88;
        --v49;
      }
      while (v49);
    }
    return 0;
  }
  free(v47);
  free(*(void **)(a2 + 207704));
  *(_DWORD *)(a2 + 207712) = 0;
  *(void *)(a2 + 207696) = malloc_type_malloc(4 * a3, 0x82ECD37AuLL);
  uint64_t v48 = malloc_type_malloc(a3, 0x82ECD37AuLL);
  *(void *)(a2 + 207704) = v48;
  int v47 = *(_DWORD **)(a2 + 207696);
  if (v47 && v48)
  {
    *(_DWORD *)(a2 + 207712) = a3;
    goto LABEL_44;
  }
  free(v47);
  free(*(void **)(a2 + 207704));
  *(void *)(a2 + 207696) = 0;
LABEL_49:
  free(*((void **)a1 + 1));
  *((void *)a1 + 1) = 0;
  free(*((void **)a1 + 2));
  *((void *)a1 + 2) = 0;
  free(*((void **)a1 + 3));
  *((void *)a1 + 3) = 0;
  free(*((void **)a1 + 4));
  *((void *)a1 + 4) = 0;
  return 4294967188;
}

void sub_1BBB348D8(uint64_t a1)
{
}

void sub_1BBB348E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *(pthread_mutex_t **)(*a1 + 5448);
  if (v3) {
    pthread_mutex_lock(v3);
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(v2 + 5440);
  do
    uint64_t v6 = v4;
  while (*(unsigned __int8 *)(v5 + v4++));
  if (*(_DWORD *)(v2 + 5432) == v6)
  {
    LODWORD(v6) = 0;
    unsigned int v8 = 0;
  }
  else
  {
    *(unsigned char *)(v5 + v6) = 1;
    int v9 = *(pthread_mutex_t **)(v2 + 5448);
    if (v9) {
      pthread_mutex_unlock(v9);
    }
    unsigned int v8 = (int32x2_t *)(*(void *)(v2 + 5456) + 50640 * v6);
  }
  uint64_t v10 = *a1;
  int v11 = (unsigned char *)(*a1 + 205840);
  int v19 = a1;
  v17[0] = v10;
  v17[1] = v8;
  int v18 = v6;
  uint64_t v20 = *(uint64_t *)((char *)a1 + 12);
  if (v11[2247])
  {
    uint64_t v12 = *(unsigned __int8 **)(v10 + 136);
    unsigned int v13 = *(unsigned __int16 *)(*(void *)v11 + 19114) * *(unsigned __int16 *)(*(void *)v11 + 19112);
    if (v13 >= 0x4B000 && ((int v14 = *(_DWORD *)(v10 + 184), v13 <= 0xAA000) ? (v15 = v14 == 0) : (v15 = 1), v15))
    {
      char v16 = 1;
      v8->i8[7] = 1;
    }
    else
    {
      if (!v12[287]) {
        v8->i8[7] = 0;
      }
      char v16 = v12[271];
      if (v16) {
        goto LABEL_22;
      }
    }
    v8->i8[4] = v16;
LABEL_22:
    v8[1764].i8[6] = v11[81];
    sub_1BBAFA384(v8, v12);
  }
  sub_1BBB24040((uint64_t)v17);
}

uint64_t sub_1BBB34A10(unsigned __int16 *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  signed int v8 = *a1;
  unsigned int v9 = a1[1];
  strcpy(v128, "hw.cachelinesize");
  size_t v125 = 8;
  uint64_t v126 = 0;
  sysctlbyname(v128, &v126, &v125, 0, 0);
  qword_1E9F82E38 = v126;
  switch(v126)
  {
    case 0x20:
      uint64_t v10 = 5;
      goto LABEL_7;
    case 0x80:
      uint64_t v10 = 7;
      goto LABEL_7;
    case 0x40:
      uint64_t v10 = 6;
LABEL_7:
      qword_1E9F82E40 = v10;
      break;
  }
  uint64_t v11 = 4294967246;
  if (a2 && a3)
  {
    uint64_t v12 = malloc_type_calloc(0x32D10uLL, 1uLL, 0x4AE20AB7uLL);
    uint64_t v13 = (uint64_t)v12;
    if (v12)
    {
      *a2 = v12;
      int v14 = sub_1BBAF9CE4();
      *(void *)uint64_t v13 = v14;
      if (v14)
      {
        BOOL v15 = sub_1BBAF9CE4();
        *(void *)(v13 + 8) = v15;
        if (v15)
        {
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_OWORD *)(v13 + 16) = 0u;
          *(void *)(v13 + 136) = a1;
          *(unsigned char *)(v13 + 208070) = *((unsigned char *)a1 + 601);
          *(unsigned char *)(v13 + 208068) = *((unsigned char *)a1 + 599);
          *(unsigned char *)(v13 + 208069) = *((unsigned char *)a1 + 600);
          *(_DWORD *)(v13 + 208128) = 0;
          float v123 = (unsigned char *)(v13 + 205448);
          *(void *)(v13 + 205968) = 0;
          *(void *)(v13 + 1728) = 0;
          *(void *)(v13 + 152) = 0;
          unsigned int v121 = (-v9 & 0xF) + v9;
          int v122 = (-v8 & 0xF) + v8;
          signed int v124 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
          *(void *)(v13 + 1072) = 0;
          *(void *)(v13 + 1064) = 0;
          *(_OWORD *)(v13 + 5336) = 0u;
          *(_OWORD *)(v13 + 5352) = 0u;
          *(_OWORD *)(v13 + 5368) = 0u;
          *(_DWORD *)(v13 + 5384) = 0;
          int v17 = a1 + 2407;
          if (*((unsigned char *)a1 + 4816)) {
            char v18 = *((unsigned char *)a1 + 4928) != 0;
          }
          else {
            char v18 = 1;
          }
          uint64_t v19 = sub_1BBB56140((unsigned __int16)((-(__int16)v8 & 0xF) + v8), v124, v13 + 1744, 0, v18);
          if (v19)
          {
            uint64_t v11 = v19;
            goto LABEL_24;
          }
          uint64_t v20 = sub_1BBB56140((unsigned __int16)((-(__int16)v8 & 0xF) + v8), v124, v13 + 2800, 0, *((unsigned char *)a1 + 4816) == 0);
          if (v20)
          {
            uint64_t v11 = v20;
            goto LABEL_24;
          }
          uint64_t v21 = sub_1BBB56140((unsigned __int16)((-(__int16)v8 & 0xF) + v8), v124, v13 + 3856, 0, *((unsigned char *)a1 + 4816) == 0);
          if (v21)
          {
            uint64_t v11 = v21;
            goto LABEL_24;
          }
          int v16 = (unsigned __int16)((-(__int16)v8 & 0xF) + v8);
          int v120 = v16;
          *(unsigned char *)(v13 + 5076) = 0;
          *(unsigned char *)(v13 + 1627) = 0;
          *(_WORD *)(v13 + 1616) = 0;
          *(_OWORD *)(v13 + 1708) = 0u;
          strncpy(__dst, (const char *)a1 + 696, 0x7D0uLL);
          if (*((unsigned char *)a1 + 663)) {
            sub_1BBB36398((unsigned char *)v13, (uint64_t)a1, __dst);
          }
          *(unsigned char *)(v13 + 207941) = *((unsigned char *)a1 + 616);
          *(_WORD *)(v13 + 207942) = 0;
          if (*(unsigned char *)(v13 + 1618))
          {
            *((unsigned char *)a1 + 677) = 1;
          }
          else
          {
            if (!*(unsigned char *)(v13 + 1619))
            {
              uint64_t v119 = (char *)a1 + 677;
              if (!*((unsigned char *)a1 + 677)) {
                goto LABEL_41;
              }
              goto LABEL_34;
            }
            *((unsigned char *)a1 + 677) = 2;
            *((_DWORD *)a1 + 11) = 1;
          }
          uint64_t v119 = (char *)a1 + 677;
LABEL_34:
          *(void *)(v13 + 1696) = 0xA0000000B0;
          *(_OWORD *)(v13 + 1632) = xmmword_1BBB8BDB0;
          *(_OWORD *)(v13 + 1648) = unk_1BBB8BDC0;
          *(_OWORD *)(v13 + 1664) = xmmword_1BBB8BDD0;
          *(_OWORD *)(v13 + 1680) = unk_1BBB8BDE0;
          uint64_t v23 = (signed int *)(v13 + 1632);
          unint64_t v24 = -1;
          do
          {
            ++v24;
            signed int v26 = *v23;
            v23 += 2;
            signed int v25 = v26;
          }
          while (v24 <= 7 && v25 > v8);
          *(unsigned char *)(v13 + 1628) = v24;
          *(_DWORD *)(v13 + 1704) = 0;
LABEL_41:
          *(_DWORD *)(v13 + 1584) = 0;
          *(void *)(v13 + 1576) = 0;
          *(unsigned char *)(v13 + 1058) = 0;
          *(_DWORD *)(v13 + 64) = 0;
          *(_DWORD *)(v13 + 205880) = -1;
          *(void *)(v13 + 205884) = 0;
          *(unsigned char *)(v13 + 205892) = 0;
          *(unsigned char *)(v13 + 207682) = *((unsigned char *)a1 + 269);
          *(_DWORD *)(v13 + 207684) = 0;
          *(unsigned char *)(v13 + 207688) = 0;
          uint64_t v28 = *((unsigned int *)a1 + 11);
          *(_DWORD *)(v13 + 207712) = v28;
          int v29 = malloc_type_calloc(4 * v28, 1uLL, 0x4AE20AB7uLL);
          *(void *)(v13 + 207696) = v29;
          if (!v29)
          {
            uint64_t v11 = 4294967188;
            goto LABEL_24;
          }
          int v30 = malloc_type_calloc(*(unsigned int *)(v13 + 207712), 1uLL, 0x4AE20AB7uLL);
          *(void *)(v13 + 207704) = v30;
          if (!v30)
          {
            uint64_t v11 = 4294967188;
            goto LABEL_24;
          }
          *(unsigned char *)(v13 + 207683) = *((unsigned char *)a1 + 291);
          *(unsigned char *)(v13 + 207677) = *((unsigned char *)a1 + 261);
          *(unsigned char *)(v13 + 207676) = *((unsigned char *)a1 + 262);
          *(unsigned char *)(v13 + 207678) = *((unsigned char *)a1 + 263);
          *(unsigned char *)(v13 + 207679) = *((unsigned char *)a1 + 264);
          *(unsigned char *)(v13 + 207680) = *((_DWORD *)a1 + 12);
          *(_DWORD *)(v13 + 57104) = *((_DWORD *)a1 + 10);
          *(unsigned char *)(v13 + 208104) = *((unsigned char *)a1 + 4827);
          *(unsigned char *)(v13 + 208105) = *((unsigned char *)a1 + 4828);
          *(_DWORD *)(v13 + 208108) = *((_DWORD *)a1 + 1208);
          *(unsigned char *)(v13 + 208112) = *((unsigned char *)a1 + 4836);
          *(unsigned char *)(v13 + 208113) = *((unsigned char *)a1 + 4837);
          *(unsigned char *)(v13 + 208114) = *((unsigned char *)a1 + 4841);
          ++*(unsigned char *)(v13 + 117268);
          __src = (void *)(v13 + 57108);
          sub_1BBB368E4(v16, v124, v13 + 57108, *((_DWORD *)a1 + 1237));
          if (!*((unsigned char *)a1 + 6)) {
            *((void *)a1 + 1) = 0;
          }
          *(unsigned char *)(v13 + 180) = ((v8 | v9) & 0xF) == 0;
          if (*((unsigned char *)a1 + 6) || v8 < (unsigned __int16)v122)
          {
            *(unsigned char *)(v13 + 58447) = 1;
          }
          else
          {
            *(unsigned char *)(v13 + 58447) = (unsigned __int16)v121 > v9;
            if ((unsigned __int16)v121 <= v9) {
              goto LABEL_57;
            }
          }
          *(_DWORD *)(v13 + 58448) = (__int16)a1[4];
          int v31 = v16 - v8;
          if (v16 < v8) {
            ++v31;
          }
          *(_DWORD *)(v13 + 58452) = (__int16)a1[5] + (v31 >> 1);
          *(_DWORD *)(v13 + 58456) = (__int16)a1[6];
          int v32 = v124 - v9;
          if (v124 < (int)v9) {
            ++v32;
          }
          *(_DWORD *)(v13 + 58460) = (__int16)a1[7] + (v32 >> 1);
LABEL_57:
          if (*((unsigned char *)a1 + 663))
          {
            *(_DWORD *)(v13 + 57380) = 8;
            *(_DWORD *)(v13 + 58976) = 4096;
            if (!*(unsigned char *)(v13 + 57384))
            {
              char v33 = 13;
              int v34 = 9;
              if (!*((unsigned char *)a1 + 4815))
              {
                if (*v17) {
                  int v34 = 9;
                }
                else {
                  int v34 = 10;
                }
                if (*v17) {
                  char v33 = 13;
                }
                else {
                  char v33 = 14;
                }
              }
              *(_DWORD *)(v13 + 57388) = v34;
              int v35 = 1 << v33;
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v36 = *((unsigned __int8 *)a1 + 235);
            if (v36 != 1 && v36 != 2)
            {
              if (v36 < 3) {
                goto LABEL_75;
              }
              if (!*((unsigned char *)a1 + 614)) {
                unsigned int v36 = 1 << (v36 - 2);
              }
            }
            *(_DWORD *)(v13 + 58428) = v36;
            unsigned int v37 = *((unsigned __int8 *)a1 + 235);
            if (v37 >= 6)
            {
              *(_DWORD *)(v13 + 57380) = v37 - 4;
              *(_DWORD *)(v13 + 58976) = 1 << v37;
              if (!*(unsigned char *)(v13 + 57384))
              {
                int v78 = *((unsigned __int8 *)a1 + 235);
                *(_DWORD *)(v13 + 57388) = v78 - 2;
                int v35 = 4 << v78;
LABEL_67:
                *(_DWORD *)(v13 + 58980) = v35;
              }
            }
          }
LABEL_75:
          int v38 = (_DWORD *)(v13 + 58428);
          unsigned int v39 = *(_DWORD *)(v13 + 58428);
          if (*((unsigned char *)a1 + 324) == 1 && v39 >= 2) {
            *int v38 = --v39;
          }
          *(unsigned char *)(v13 + 58446) = *((unsigned char *)a1 + 282);
          char v40 = *((unsigned char *)a1 + 398) == 0;
          *(unsigned char *)(v13 + 58444) = v40;
          int v41 = a1 + 119;
          double v116 = (unsigned int *)(v13 + 58428);
          sub_1BBB369AC((unsigned char *)a1 + 238, v38, a1, v39, v40);
          *(unsigned char *)(v13 + 208071) = *((unsigned char *)a1 + 602);
          *(unsigned char *)(v13 + 208072) = *((unsigned char *)a1 + 603);
          *(unsigned char *)(v13 + 208073) = *((_DWORD *)a1 + 151);
          *(unsigned char *)(v13 + 58464) = 0;
          if (*((_DWORD *)a1 + 22))
          {
            *(unsigned char *)(v13 + 58464) = 1;
            sub_1BBB36A08((uint64_t)a1, v13 + 58468);
            *(_OWORD *)(v13 + 119396) = 0u;
            *(_OWORD *)(v13 + 119412) = 0u;
            *(_OWORD *)(v13 + 119364) = 0u;
            *(_OWORD *)(v13 + 119380) = 0u;
            *(_OWORD *)(v13 + 119332) = 0u;
            *(_OWORD *)(v13 + 119348) = 0u;
            *(_OWORD *)(v13 + 119300) = 0u;
            *(_OWORD *)(v13 + 119316) = 0u;
            *(_OWORD *)(v13 + 119268) = 0u;
            *(_OWORD *)(v13 + 119284) = 0u;
            *(_OWORD *)(v13 + 119236) = 0u;
            *(_OWORD *)(v13 + 119252) = 0u;
            *(_OWORD *)(v13 + 119204) = 0u;
            *(_OWORD *)(v13 + 119220) = 0u;
            *(_OWORD *)(v13 + 119172) = 0u;
            *(_OWORD *)(v13 + 119188) = 0u;
            *(_OWORD *)(v13 + 119156) = 0u;
            *(_DWORD *)(v13 + 119164) = *(unsigned __int8 *)(v13 + 57125);
            *(_DWORD *)(v13 + 119168) = *(_DWORD *)(v13 + 58960);
          }
          int v42 = *((unsigned __int8 *)a1 + 111);
          *(unsigned char *)(v13 + 205833) = v42;
          if (v42)
          {
            *(unsigned char *)(v13 + 205836) = *((unsigned char *)a1 + 112);
            *(unsigned char *)(v13 + 205837) = a1[56] & 0xF;
            *(unsigned char *)(v13 + 205838) = *((unsigned char *)a1 + 112) >> 4;
          }
          *(unsigned char *)(v13 + 205834) = *((unsigned char *)a1 + 113);
          *(_DWORD *)(v13 + 57108) = *((unsigned __int8 *)a1 + 24);
          int v43 = *((unsigned __int8 *)a1 + 401);
          *(unsigned char *)(v13 + 57131) = v43;
          if (v43)
          {
            uint64_t v44 = 0;
            unint64_t v45 = 0;
            uint64_t v46 = v13 + 57148;
            do
            {
              *(unsigned char *)(v46 + v45 - 16) = 1;
              if (v45 > 5)
              {
                uint64_t v47 = (v45 - 6);
                uint64_t v48 = (_OWORD *)(v13 + (v47 << 6) + 57244);
                uint64_t v49 = (_OWORD *)((char *)&unk_1BBB8BD2E + 64 * v47);
                long long v50 = v49[1];
                *uint64_t v48 = *v49;
                v48[1] = v50;
                long long v51 = v49[3];
                v48[2] = v49[2];
                v48[3] = v51;
              }
              else
              {
                *(_OWORD *)(v46 + v44 * 16) = xmmword_1BBB8BCCE[v44];
              }
              ++v45;
              ++v44;
            }
            while (v45 != 8);
          }
          int v118 = (int *)(v13 + 119432);
          *(unsigned char *)(v13 + 119152) = 0;
          memcpy((void *)(v13 + 117272), __src, 0x758uLL);
          char v115 = (*v123)++;
          int v52 = a1 + 2407;
          if (*v17) {
            BOOL v53 = 1;
          }
          else {
            BOOL v53 = *((unsigned char *)a1 + 4815) != 0;
          }
          int v54 = *((_DWORD *)a1 + 1238);
          *(_OWORD *)(v13 + 119440) = 0u;
          *(void *)(v13 + 119760) = 0;
          *(_OWORD *)(v13 + 119680) = 0u;
          *(_OWORD *)(v13 + 119664) = 0u;
          *(_OWORD *)(v13 + 119648) = 0u;
          *(_OWORD *)(v13 + 119632) = 0u;
          *(_OWORD *)(v13 + 119616) = 0u;
          *(_OWORD *)(v13 + 119600) = 0u;
          *(_OWORD *)(v13 + 119584) = 0u;
          *(_OWORD *)(v13 + 119568) = 0u;
          *(_OWORD *)(v13 + 119552) = 0u;
          *(_OWORD *)(v13 + 119536) = 0u;
          *(_OWORD *)(v13 + 119520) = 0u;
          *(_OWORD *)(v13 + 119504) = 0u;
          *(_OWORD *)(v13 + 119488) = 0u;
          *(_OWORD *)(v13 + 119472) = 0u;
          *(_OWORD *)(v13 + 119456) = 0u;
          *(_OWORD *)(v13 + 119728) = 0u;
          *(_OWORD *)(v13 + 119744) = 0u;
          *(_OWORD *)(v13 + 119696) = 0u;
          *(_OWORD *)(v13 + 119712) = 0u;
          int v55 = *(unsigned __int8 *)(v13 + 57125);
          BOOL v92 = !v53;
          BOOL v56 = !v53;
          int v57 = v54 & ~(v54 >> 31);
          if (!v92) {
            int v57 = 1;
          }
          *int v118 = v57;
          *(_DWORD *)(v13 + 119436) = v55;
          *(unsigned char *)(v13 + 119441) = v56;
          *(void *)(v13 + 119488) = 0x100000001;
          *(void *)(v13 + 119500) = 0x200000000;
          *(void *)(v13 + 119508) = 0;
          *(_DWORD *)(v13 + 119515) = 0;
          LOWORD(v58) = a1[209];
          if ((_WORD)v58)
          {
            int v58 = (__int16)v58;
            if ((__int16)v58 >= 12) {
              int v58 = 12;
            }
            if (v58 <= -12) {
              int v58 = -12;
            }
            *(_DWORD *)(v13 + 119512) = v58;
            *(unsigned char *)(v13 + 119529) = v58;
          }
          if (*((unsigned char *)a1 + 653)) {
            *(unsigned char *)(v13 + 119496) = 1;
          }
          if (*((unsigned char *)a1 + 654)) {
            *(_DWORD *)(v13 + 119500) = 1;
          }
          if (*((unsigned char *)a1 + 269)) {
            *(unsigned char *)(v13 + 119517) = 1;
          }
          if (*((unsigned char *)a1 + 240)) {
            *(unsigned char *)(v13 + 119440) = 1;
          }
          if ((*((unsigned __int8 *)a1 + 262) | 2) == 3) {
            *(unsigned char *)(v13 + 119516) = 1;
          }
          unsigned int v59 = (char)*v41;
          if (*v41)
          {
            if (*v116 < v59) {
              unsigned int v59 = *v116;
            }
          }
          else
          {
            unsigned int v59 = 1;
          }
          *(_DWORD *)(v13 + 119488) = v59 - 1;
          unsigned int v60 = (char)*v41;
          if (*v41)
          {
            if (*v116 < v60) {
              unsigned int v60 = *v116;
            }
          }
          else
          {
            unsigned int v60 = 1;
          }
          *(_DWORD *)(v13 + 119492) = v60 - 1;
          *(unsigned char *)(v13 + 119519) = *((unsigned char *)a1 + 400);
          *(unsigned char *)(v13 + 205792) = 0;
          memcpy((void *)(v13 + 205456), v118, 0x150uLL);
          if (*((unsigned char *)a1 + 672))
          {
            memcpy((void *)(v13 + 119768), v118, 0x150uLL);
            *float v123 = v115 + 2;
            *(_DWORD *)(v13 + 119768) = 1;
            *(unsigned char *)(v13 + 119776) = 1;
            *(unsigned char *)(v13 + 205792) = 1;
            int v52 = a1 + 2407;
            memcpy((void *)(v13 + 205456), (const void *)(v13 + 119768), 0x150uLL);
          }
          *(unsigned char *)(v13 + 208078) = *((unsigned char *)a1 + 624);
          *(unsigned char *)(v13 + 208079) = *((unsigned char *)a1 + 625);
          *(unsigned char *)(v13 + 208080) = *((unsigned char *)a1 + 626);
          *(unsigned char *)(v13 + 208081) = *((unsigned char *)a1 + 627);
          *(unsigned char *)(v13 + 208082) = *((unsigned char *)a1 + 628);
          *(unsigned char *)(v13 + 208085) = *((unsigned char *)a1 + 669);
          *(unsigned char *)(v13 + 208086) = *((unsigned char *)a1 + 671);
          *(unsigned char *)(v13 + 208083) = *((unsigned char *)a1 + 629);
          *(unsigned char *)(v13 + 208084) = *((unsigned char *)a1 + 630);
          *(unsigned char *)(v13 + 205931) = *((unsigned char *)a1 + 653);
          *(unsigned char *)(v13 + 205932) = *((unsigned char *)a1 + 654);
          *(_DWORD *)(v13 + 205904) = *((char *)a1 + 290);
          int v61 = *((char *)a1 + 229);
          if (v61 >= 51) {
            int v61 = 51;
          }
          *(_DWORD *)(v13 + 205868) = v61 & ~(v61 >> 31);
          int v62 = *((char *)a1 + 230);
          if (v62 >= 51) {
            int v62 = 51;
          }
          *(_DWORD *)(v13 + 205872) = v62 & ~(v62 >> 31);
          int v63 = *((char *)a1 + 231);
          if (v63 >= 51) {
            int v63 = 51;
          }
          *(_DWORD *)(v13 + 205876) = v63 & ~(v63 >> 31);
          *(_DWORD *)(v13 + 205924) = *((_DWORD *)a1 + 93);
          *(unsigned char *)(v13 + 205928) = *((unsigned char *)a1 + 376);
          *(unsigned char *)(v13 + 205929) = *((unsigned char *)a1 + 655);
          *(unsigned char *)(v13 + 205930) = *((unsigned char *)a1 + 656);
          *(unsigned char *)(v13 + 205921) = *((unsigned char *)a1 + 368);
          *(unsigned char *)(v13 + 205933) = *v52;
          *(unsigned char *)(v13 + 205935) = v52[1];
          *(unsigned char *)(v13 + 205936) = v52[2];
          *(unsigned char *)(v13 + 208132) = v52[26];
          *(_WORD *)(v13 + 205900) = a1[208];
          *(int32x2_t *)(v13 + 57096) = vadd_s32(*(int32x2_t *)(v13 + 58436), (int32x2_t)0x100000001);
          *(_DWORD *)(v13 + 205996) = *((char *)a1 + 265);
          *(_DWORD *)(v13 + 205992) = *((_DWORD *)a1 + 64);
          unsigned int v64 = *((_DWORD *)a1 + 61);
          if (v64 >= 0x7FF) {
            unsigned int v64 = 2047;
          }
          *(_DWORD *)(v13 + 205980) = v64;
          *(_DWORD *)(v13 + 205988) = *((_DWORD *)a1 + 63);
          *(_DWORD *)(v13 + 205984) = *((_DWORD *)a1 + 62);
          if (*((unsigned __int8 *)a1 + 265) - 2 >= 4 && *((unsigned char *)a1 + 265)) {
            *(_DWORD *)(v13 + 205984) = 0;
          }
          uint64_t v65 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E004050CAF3E4uLL);
          *(void *)(v13 + 5512) = v65;
          unsigned int v66 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
          if (!v65)
          {
            uint64_t v11 = 4294967188;
            goto LABEL_24;
          }
          uint64_t v11 = sub_1BBB36AC8((int *)(v13 + 5432), a3, v13);
          if (v11) {
            goto LABEL_25;
          }
          *(_DWORD *)(v13 + 5464) = 0;
          *(_OWORD *)(v13 + 5472) = 0u;
          *(_OWORD *)(v13 + 5488) = 0u;
          if (a4)
          {
            uint64_t v67 = malloc_type_calloc(0x5FF0uLL, 1uLL, 0x4AE20AB7uLL);
            *(void *)(v13 + 205800) = v67;
            if (!v67)
            {
              uint64_t v11 = 4294967188;
              goto LABEL_24;
            }
            int v68 = malloc_type_calloc(0x40uLL, 1uLL, 0x4AE20AB7uLL);
            *(void *)(v13 + 205808) = v68;
            if (!v68)
            {
              uint64_t v11 = 4294967188;
              goto LABEL_24;
            }
            *(unsigned char *)(v13 + 205832) = 0;
            *(void *)(v13 + 205824) = malloc_type_calloc(*((unsigned __int8 *)a1 + 615), 1uLL, 0x4AE20AB7uLL);
            *(void *)(v13 + 205816) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            if (*((unsigned char *)a1 + 615))
            {
              unsigned int v69 = 0;
              uint64_t v70 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
              do
              {
                CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, v70);
                CFArrayAppendValue(*(CFMutableArrayRef *)(v13 + 205816), Mutable);
                ++v69;
              }
              while (v69 < *((unsigned __int8 *)a1 + 615));
            }
            uint64_t v72 = malloc_type_calloc(0x1080uLL, 1uLL, 0x4AE20AB7uLL);
            *(void *)(v13 + 205960) = v72;
            if (!v72)
            {
              uint64_t v11 = 4294967188;
              goto LABEL_24;
            }
            uint64_t v73 = malloc_type_calloc(0x800uLL, 1uLL, 0x4AE20AB7uLL);
            *(void *)(v13 + 152) = v73;
            if (!v73)
            {
              uint64_t v11 = 4294967188;
              goto LABEL_24;
            }
            uint64_t v74 = malloc_type_calloc(0xF80uLL, 1uLL, 0x4AE20AB7uLL);
            *(void *)(v13 + 205944) = v74;
            if (!v74)
            {
              uint64_t v11 = 4294967188;
              goto LABEL_24;
            }
            *(unsigned char *)(v13 + 205976) = *((_DWORD *)a1 + 20);
            int v75 = *((unsigned __int8 *)a1 + 236);
            sub_1BBB216D8((uint64_t)__src, *(void *)(v13 + 205800), *((unsigned char *)a1 + 614), *((unsigned char *)a1 + 615));
            int v76 = *((unsigned __int8 *)a1 + 320);
            if (!*((unsigned char *)a1 + 320)) {
              int v76 = a3;
            }
            uint64_t v11 = sub_1BBB0ACD0(*(void *)(v13 + 205808), *v116 + 2 * v75 + *((unsigned __int8 *)a1 + 318) + *((unsigned __int8 *)a1 + 319) + v76, v8, v9, a3, v13, *(unsigned __int8 *)(v13 + 205936), *(unsigned __int8 *)(*(void *)(v13 + 136) + 4856), *(unsigned char *)(*(void *)(v13 + 136) + 241));
            if (v11) {
              goto LABEL_24;
            }
            if ((*((unsigned char *)a1 + 211) & 0x23) != 0)
            {
              if (*((_DWORD *)a1 + 13))
              {
                LODWORD(v77) = *((_DWORD *)a1 + 15);
                if (*(float *)&v77 > 0.0000001)
                {
                  if (!*((unsigned char *)a1 + 212) && *((_DWORD *)a1 + 18))
                  {
                    unsigned int v81 = *((_DWORD *)a1 + 76);
                    if ((v81 | 0x800000) == 0x800000)
                    {
                      float v82 = 2.0;
                      if (!*((unsigned char *)a1 + 398)) {
                        float v82 = 1.0;
                      }
                      unsigned int v81 = (float)(*(float *)&v77 * (float)(*((float *)a1 + 78) * v82));
                      *((_DWORD *)a1 + 76) = v81;
                    }
                    unsigned int v83 = *((_DWORD *)a1 + 75);
                    if ((v83 | 0x800000) == 0x800000)
                    {
                      float v84 = 2.0;
                      if (!*((unsigned char *)a1 + 398)) {
                        float v84 = 1.0;
                      }
                      *(float *)&double v77 = *(float *)&v77 * (float)(*((float *)a1 + 77) * v84);
                      unsigned int v83 = *(float *)&v77;
                      *((_DWORD *)a1 + 75) = *(float *)&v77;
                    }
                    if (v83) {
                      BOOL v85 = v81 > v83;
                    }
                    else {
                      BOOL v85 = 0;
                    }
                    if (v85) {
                      unsigned int v81 = v83;
                    }
                    if ((signed int)v81 < *((_DWORD *)a1 + 21)) {
                      *((_DWORD *)a1 + 21) = v81;
                    }
                  }
                  **(_DWORD **)(v13 + 205960) = 0;
                  **(_DWORD **)(v13 + 152) = 0;
                  **(_DWORD **)(v13 + 205944) = 0;
                  int v79 = *((unsigned __int8 *)a1 + 211);
                  if (v79 == 2)
                  {
                    sub_1BBB370C0(*(void *)(v13 + 152), (uint64_t)a1, v120, v124, v77);
                    uint64_t v11 = v86;
                    if (v86) {
                      goto LABEL_24;
                    }
                    uint64_t v87 = *(void *)(v13 + 152);
                    *(void *)(v13 + 205968) = v87 + 8;
                    if (*((unsigned char *)a1 + 669)) {
                      *(unsigned char *)(v87 + 200) = 1;
                    }
                  }
                  else if (v79 == 32)
                  {
                    sub_1BBB36BEC(*(void *)(v13 + 205960), (uint64_t)a1, v120, v124);
                    uint64_t v11 = v80;
                    if (v80) {
                      goto LABEL_24;
                    }
                    *(void *)(v13 + 205968) = *(void *)(v13 + 205960) + 4032;
                  }
                  else
                  {
                    sub_1BBB376D0(*(void *)(v13 + 205944), (uint64_t)a1, v120, v124);
                  }
                }
              }
            }
            unsigned int v66 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
            if (*((unsigned char *)a1 + 242) || *((unsigned char *)a1 + 241) || *((unsigned char *)a1 + 2698)) {
              operator new();
            }
          }
          int v88 = *((char *)a1 + 241);
          *(_DWORD *)(v13 + 207748) = v88;
          *(_DWORD *)(v13 + 207752) = *((char *)a1 + 242);
          *(void *)(v13 + 205848) = 0;
          if (v88 || *(unsigned char *)(v13 + 208068) && !*(unsigned char *)(v13 + 205933))
          {
            uint64_t v11 = sub_1BBB0A2A0((uint64_t *)(v13 + 205848), v120, v66, 0, a3, v13, 1);
            if (v11) {
              goto LABEL_24;
            }
          }
          *(_DWORD *)(v13 + 205952) = *((_DWORD *)a1 + 56);
          *(void *)(v13 + 207736) = 0x6300000063;
          if (!*(unsigned char *)(v13 + 205936))
          {
            int v93 = malloc_type_calloc(0x108uLL, 1uLL, 0x4AE20AB7uLL);
            *(void *)(v13 + 205856) = v93;
            if (!v93)
            {
              uint64_t v11 = 4294967188;
              goto LABEL_24;
            }
            uint64_t v11 = sub_1BBB19D40((uint64_t)v93, *(_DWORD *)(v13 + 57096), *(_DWORD *)(v13 + 57100));
            if (v11) {
              goto LABEL_24;
            }
          }
          uint64_t v89 = v13 + 205448;
          *(_DWORD *)(v13 + 207716) = 0;
          *(_DWORD *)(v13 + 207732) = 0;
          *(_DWORD *)(v13 + 207832) = 0;
          if (*(unsigned char *)(*(void *)(v13 + 136) + 577) != 1) {
            goto LABEL_228;
          }
          if ((unsigned __int16)v122 > 0x13Fu)
          {
            if ((unsigned __int16)v122 == 320)
            {
              uint64_t v90 = 0x1400000012CLL;
              int v91 = 240;
              if ((unsigned __int16)v121 == 480 || (unsigned __int16)v121 == 720) {
                goto LABEL_229;
              }
              BOOL v92 = (unsigned __int16)v121 == 960;
            }
            else if ((unsigned __int16)v122 == 352)
            {
              uint64_t v90 = 0x1600000018CLL;
              int v91 = 288;
              if ((unsigned __int16)v121 == 576 || (unsigned __int16)v121 == 864) {
                goto LABEL_229;
              }
              BOOL v92 = (unsigned __int16)v121 == 1152;
            }
            else
            {
              uint64_t v89 = v13 + 205448;
              if ((unsigned __int16)v122 != 640) {
                goto LABEL_228;
              }
              uint64_t v90 = 0x280000004B0;
              int v91 = 480;
              if ((unsigned __int16)v121 == 960 || (unsigned __int16)v121 == 1440) {
                goto LABEL_229;
              }
              BOOL v92 = (unsigned __int16)v121 == 1920;
            }
          }
          else if ((unsigned __int16)v122 == 80)
          {
            uint64_t v90 = 0x5000000014;
            int v91 = 64;
            if ((unsigned __int16)v121 == 128 || (unsigned __int16)v121 == 192) {
              goto LABEL_229;
            }
            BOOL v92 = (unsigned __int16)v121 == 256;
          }
          else
          {
            if ((unsigned __int16)v122 != 160)
            {
              uint64_t v89 = v13 + 205448;
              if ((unsigned __int16)v122 == 176)
              {
                uint64_t v90 = 0xB000000063;
                int v91 = 144;
                if ((unsigned __int16)v121 != 288 && (unsigned __int16)v121 != 432)
                {
                  BOOL v92 = (unsigned __int16)v121 == 576;
                  goto LABEL_227;
                }
LABEL_229:
                int v94 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
                uint64_t v89 = v13 + 205448;
                goto LABEL_230;
              }
LABEL_228:
              unsigned int v95 = 1;
LABEL_231:
              *(_DWORD *)(v89 + 2400) = v95;
              *(_OWORD *)(v13 + 207852) = 0u;
              *(_DWORD *)(v13 + 208060) = *((_DWORD *)a1 + 11);
              *(_DWORD *)(v89 + 2432) = 0;
              *(_DWORD *)(v89 + 2420) = -1;
              unsigned int v96 = *((_DWORD *)a1 + 105);
              *(_DWORD *)(v89 + 2424) = v96;
              int v97 = *((unsigned __int8 *)a1 + 211);
              if ((v97 & 0x23) != 0)
              {
                if (*((_DWORD *)a1 + 13))
                {
                  if (v97 != 2 && *((float *)a1 + 15) > 0.0000001)
                  {
                    if (v96)
                    {
                      uint64_t v98 = *(void *)(v89 + 496);
                      float v99 = *(float *)(v98 + 84);
                      if (v99 > 0.0) {
                        *(_DWORD *)(v89 + 2420) = (float)((float)((float)*(int *)(v98 + 88) / v99)
                      }
                                                                      * (float)v96);
                    }
                  }
                }
              }
              *(_DWORD *)(v13 + 207920) = 0;
              *(_DWORD *)(v13 + 207984) = 0;
              *(_DWORD *)(v13 + 208008) = 0;
              *(_DWORD *)(v13 + 207916) = *((_DWORD *)a1 + 145);
              *(_DWORD *)(v13 + 207980) = *((_DWORD *)a1 + 146);
              *(_DWORD *)(v13 + 208004) = *((_DWORD *)a1 + 147);
              *(_DWORD *)(v13 + 207956) = *((_DWORD *)a1 + 155);
              bzero((void *)(v13 + 280), 0x2E0uLL);
              uint64_t v100 = sub_1BBAF9CE4();
              *(void *)(v13 + 1016) = v100;
              if (v100)
              {
                *(unsigned char *)(v13 + 1024) = *((unsigned char *)a1 + 660);
                *(unsigned char *)(v13 + 1025) = *((unsigned char *)a1 + 2701);
                *(unsigned char *)(v13 + 1026) = *((unsigned char *)a1 + 661);
                *(_DWORD *)(v13 + 1028) = 0;
                *(void *)(v13 + 1040) = 0;
                *(unsigned char *)(v13 + 1052) = 0;
                *(_DWORD *)(v13 + 1048) = -1082130432;
                int v101 = malloc_type_calloc(4 * *((unsigned __int8 *)a1 + 661) + 4, 1uLL, 0x4AE20AB7uLL);
                *(void *)(v13 + 1040) = v101;
                if (v101)
                {
                  *(_DWORD *)(v13 + 184) = (int)sub_1BBAF9E6C() > 1;
                  *(unsigned char *)(v13 + 1725) = 0;
                  *(_DWORD *)(v13 + 5072) = -1;
                  *(_OWORD *)(v13 + 4912) = 0u;
                  *(_OWORD *)(v13 + 4928) = 0u;
                  *(_OWORD *)(v13 + 4944) = 0u;
                  *(_OWORD *)(v13 + 4960) = 0u;
                  *(_OWORD *)(v13 + 4976) = 0u;
                  *(_OWORD *)(v13 + 4992) = 0u;
                  *(_OWORD *)(v13 + 5008) = 0u;
                  *(_OWORD *)(v13 + 5024) = 0u;
                  *(_OWORD *)(v13 + 5040) = 0u;
                  *(_OWORD *)(v13 + 5056) = 0u;
                  *(unsigned char *)(v13 + 5424) = *((unsigned char *)a1 + 4851);
                  *(unsigned char *)(v13 + 5425) = 1;
                  int v102 = *((char *)a1 + 270);
                  if (v102 != -1) {
                    *(_DWORD *)(v13 + 184) = v102;
                  }
                  unint64_t v103 = *v119;
                  if (v103 <= 8)
                  {
                    char v104 = byte_1BBB8BE54[v103];
                    char v105 = byte_1BBB8BE5D[v103];
                    *(unsigned char *)(v13 + 1053) = v104;
                    *(unsigned char *)(v13 + 1054) = v105;
                    LOBYTE(v103) = *v119;
                  }
                  *(unsigned char *)(v13 + 1057) = v103;
                  *(unsigned char *)(v13 + 208074) = *((unsigned char *)a1 + 608);
                  *(unsigned char *)(v13 + 208075) = *((unsigned char *)a1 + 609);
                  *(unsigned char *)(v13 + 208076) = *((unsigned char *)a1 + 237);
                  *(unsigned char *)(v13 + 208077) = *((unsigned char *)a1 + 324);
                  if (*(_DWORD *)(v13 + 205924) != 1 || !*(_DWORD *)(v13 + 208060))
                  {
LABEL_249:
                    if (*(unsigned char *)(*(void *)(v13 + 136) + 577) == 4 && a4 != 0)
                    {
                      uint64_t v110 = *((unsigned __int8 *)a1 + 115);
                      if (*((unsigned char *)a1 + 115))
                      {
                        unint64_t v111 = 0;
                        do
                        {
                          if (v111 <= 7)
                          {
                            uint64_t v112 = &a1[2 * v111];
                            int v113 = *((_DWORD *)v112 + 38);
                            uint64_t v114 = *(void *)(v13 + 205968) + 4 * v111;
                            *(_DWORD *)(v114 + 104) = *((_DWORD *)v112 + 30);
                            *(_DWORD *)(v114 + 136) = (90000 * v113 + 500) / 0x3E8u;
                          }
                          ++v111;
                        }
                        while (v110 != v111);
                      }
                    }
                    *(unsigned char *)(v13 + 208087) = *((unsigned char *)a1 + 663);
                    *(unsigned char *)(v13 + 208088) = *((unsigned char *)a1 + 664);
                    *(void *)(v13 + 80) = 0;
                    *(void *)(v13 + 88) = 0;
                    *(void *)(v13 + 72) = 0;
                    *(void *)(v13 + 112) = 0x100000001;
                    operator new();
                  }
                  unint64_t v106 = 0;
                  uint64_t v107 = v13 + 5616;
                  uint64_t v108 = v13 + 5520;
                  while (1)
                  {
                    *(void *)uint64_t v108 = v13;
                    *(void *)(v108 + 8) = 0;
                    *(unsigned char *)(v108 + 64) = 0;
                    *(_DWORD *)(v108 + 16) = *(_DWORD *)(v13 + 58984) + 1;
                    uint64_t v11 = sub_1BBB37A3C(v107, v13);
                    if (v11) {
                      goto LABEL_25;
                    }
                    ++v106;
                    v107 += 50640;
                    v108 += 88;
                    if (v106 >= *(unsigned int *)(v13 + 208060)) {
                      goto LABEL_249;
                    }
                  }
                }
                uint64_t v11 = 4294967188;
              }
              else
              {
                uint64_t v11 = 4294967188;
              }
              goto LABEL_24;
            }
            uint64_t v90 = 0xA000000050;
            int v91 = 128;
            if ((unsigned __int16)v121 == 256 || (unsigned __int16)v121 == 384) {
              goto LABEL_229;
            }
            BOOL v92 = (unsigned __int16)v121 == 512;
          }
LABEL_227:
          int v94 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
          uint64_t v89 = v13 + 205448;
          if (!v92) {
            goto LABEL_228;
          }
LABEL_230:
          *(_DWORD *)(v89 + 2384) = 1;
          *(void *)(v89 + 2388) = v90;
          *(_DWORD *)(v89 + 2396) = v91;
          *(unsigned char *)(v13 + 119516) = 1;
          unsigned int v95 = v94 * v120 / (v91 * HIDWORD(v90));
          goto LABEL_231;
        }
      }
      uint64_t v11 = 4294967188;
    }
    else
    {
      uint64_t v11 = 4294967188;
    }
LABEL_24:
    CFLog();
LABEL_25:
    sub_1BBB37FC0(v13, a4);
    *a2 = 0;
  }
  return v11;
}

const char *sub_1BBB36398(unsigned char *a1, uint64_t a2, char *__str)
{
  uint64_t v3 = a2;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a2 + 240);
  LOBYTE(v37) = *(unsigned char *)(a2 + 616);
  float result = strtok(__str, ";");
  if (result)
  {
    int v7 = result;
    char v33 = v5;
    int v31 = a1;
    uint64_t v32 = v3;
    unint64_t v8 = 0;
    unsigned int v9 = (char *)__dst;
    do
    {
      unint64_t v10 = v8 + 1;
      strncpy(v9, v7, 0x14uLL);
      uint64_t v11 = strtok(0, ";");
      if (!v11) {
        break;
      }
      int v7 = v11;
      v9 += 20;
    }
    while (v8++ < 0x63);
    uint64_t v13 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    uint64_t v38 = 0;
    memset(v36, 0, sizeof(v36));
    uint64_t v39 = 0;
    char v18 = ":";
    do
    {
      uint64_t v19 = (char *)&__dst[5 * v13];
      while (1)
      {
        float result = strtok(v19, v18);
        if (!result) {
          break;
        }
        uint64_t v20 = result;
        float result = (const char *)strcmp(result, "MS");
        if (!result)
        {
          HIDWORD(v38) = 1;
          break;
        }
        float result = (const char *)strcmp(v20, "LF");
        if (!result)
        {
          LOBYTE(v38) = 1;
          break;
        }
        float result = (const char *)strcmp(v20, "CABAC");
        if (!result)
        {
          char v33 = 1;
          break;
        }
        float result = (const char *)strcmp(v20, "LTR");
        if (!result)
        {
          LOBYTE(v37) = 1;
          break;
        }
        uint64_t v21 = v18;
        float result = strtok(0, v18);
        if (!result) {
          goto LABEL_58;
        }
        uint64_t v22 = result;
        uint64_t v23 = strtok(0, ",");
        if (!v23) {
          uint64_t v23 = (char *)v22;
        }
        float result = (const char *)atoi(v23);
        if (result > 0x63) {
          goto LABEL_58;
        }
        int v24 = (int)result;
        float result = (const char *)strcmp(v20, "RVRA7");
        if (!result)
        {
          int v17 = 0;
          int v16 = 0;
          int v15 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          int v14 = 1;
LABEL_58:
          char v18 = v21;
          break;
        }
        float result = (const char *)strcmp(v20, "RVRA4");
        if (!(result | v14))
        {
          int v17 = 0;
          int v16 = 0;
          int v14 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          int v15 = 1;
          goto LABEL_58;
        }
        float result = (const char *)strcmp(v20, "RVRA1");
        if (!result && !v14 && !v15)
        {
          int v16 = 0;
          int v14 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          int v17 = 1;
          goto LABEL_58;
        }
        float result = (const char *)strcmp(v20, "RVRA3");
        if (!result && !v14 && !v15 && !v17)
        {
          int v15 = 0;
          int v14 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          int v16 = 1;
          goto LABEL_58;
        }
        float result = (const char *)strcmp(v20, "RVRA2");
        if (result || v14 || v15 || v16 || v17)
        {
          float result = (const char *)strcmp(v20, "MVRA");
          if (result)
          {
            float result = (const char *)strcmp(v20, "VRA");
            if (result)
            {
              float result = (const char *)strcmp(v20, "UEP");
              if (result)
              {
                float result = (const char *)strcmp(v20, "AS");
                if (result)
                {
                  float result = (const char *)strcmp(v20, "QS");
                  if (result)
                  {
                    float result = (const char *)strcmp(v20, "CR");
                    if (result)
                    {
                      float result = (const char *)strcmp(v20, "CH");
                      if (result && (float result = (const char *)strcmp(v20, "CH1"), result))
                      {
                        float result = (const char *)strcmp(v20, "FA");
                        int v25 = v35;
                        if (!result) {
                          int v25 = v24 + 1;
                        }
                        LODWORD(v35) = v25;
                      }
                      else
                      {
                        BYTE4(v34) = v24 + 1;
                      }
                    }
                    else
                    {
                      LOBYTE(v34) = v24 + 1;
                    }
                  }
                  else
                  {
                    BYTE4(v35) = v24 + 1;
                  }
                }
                else
                {
                  v36[0] = v24 + 1;
                }
              }
            }
            else
            {
              *(_DWORD *)&v36[4] = v24 + 1;
            }
          }
          else
          {
            *(_DWORD *)&v36[8] = v24 + 1;
          }
          goto LABEL_58;
        }
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        ++v13;
        v19 += 20;
        LODWORD(v39) = 1;
        BYTE4(v39) = v24 + 1;
        char v18 = v21;
        if (v10 == v13)
        {
          LOBYTE(v14) = 0;
          int v15 = 0;
          LOBYTE(v16) = 0;
          int v17 = 0;
          char v26 = 0;
          a1 = v31;
          uint64_t v3 = v32;
          char v5 = v33;
          char v27 = v37;
          char v28 = 1;
          goto LABEL_65;
        }
      }
      ++v13;
    }
    while (v13 != v10);
    a1 = v31;
    char v5 = v33;
    if (v39 == 1)
    {
      char v26 = 0;
      char v28 = 1;
      uint64_t v3 = v32;
      char v27 = v37;
      goto LABEL_65;
    }
    uint64_t v3 = v32;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    LOBYTE(v14) = 0;
    int v15 = 0;
    LOBYTE(v16) = 0;
    int v17 = 0;
    uint64_t v38 = 0;
    memset(v36, 0, sizeof(v36));
    BYTE4(v39) = 0;
  }
  char v27 = v37;
  char v28 = 0;
  char v26 = 1;
LABEL_65:
  a1[1724] = v26;
  a1[1627] = v34;
  a1[1623] = v38;
  a1[1622] = (HIDWORD(v38) | *(_DWORD *)&v36[8]) != 0;
  if (v15 == 1) {
    char v29 = 1;
  }
  else {
    char v29 = v28;
  }
  a1[1624] = v29;
  a1[1625] = v16;
  if (v17 == 1) {
    char v30 = 1;
  }
  else {
    char v30 = v14;
  }
  a1[1626] = v30;
  a1[1618] = BYTE4(v39);
  a1[1619] = *(void *)&v36[4] != 0;
  a1[1620] = v36[0];
  a1[1621] = BYTE4(v35);
  a1[5076] = v35;
  a1[1600] = BYTE4(v34);
  *(unsigned char *)(v3 + 240) = v5;
  *(unsigned char *)(v3 + 616) = v27;
  return result;
}

double sub_1BBB368E4(int a1, int a2, uint64_t a3, int a4)
{
  bzero((void *)(a3 + 11), 0x741uLL);
  *(_WORD *)(a3 + 8) = 256;
  *(unsigned char *)(a3 + 10) = 0;
  *(void *)a3 = 0x200000004DLL;
  *(unsigned char *)(a3 + 17) = a4 & ~(a4 >> 31);
  unsigned int v8 = (a2 + 15) >> 4;
  unsigned int v9 = (a1 + 15) >> 4;
  *(_DWORD *)(a3 + 272) = 1;
  *(_DWORD *)(a3 + 280) = 3;
  *(_DWORD *)(a3 + 1320) = 2;
  *(_DWORD *)(a3 + 1328) = v9 - 1;
  *(_DWORD *)(a3 + 1332) = v8 - 1;
  *(unsigned char *)(a3 + 1336) = 1;
  double result = 0.0;
  *(_OWORD *)(a3 + 1337) = 0u;
  *(_DWORD *)(a3 + 1353) = 0;
  *(void *)(a3 + 1868) = 0x8000000020;
  *(_DWORD *)(a3 + 1876) = v8 * v9 - 1;
  return result;
}

unsigned char *sub_1BBB369AC(unsigned char *result, _DWORD *a2, unsigned char *a3, signed int a4, char a5)
{
  int v5 = (char)a3[238];
  if (v5 >= 32) {
    int v6 = 32;
  }
  else {
    int v6 = (char)a3[238];
  }
  if (v6 <= 1) {
    int v6 = 1;
  }
  signed int v7 = (v6 + 1) >> 1;
  if (a5) {
    signed int v7 = v6;
  }
  if (a4 > v7) {
    LOBYTE(v7) = a4;
  }
  if (v5 >= 2 && !a3[281] && a3[236]) {
    LOBYTE(v7) = v7 + 1;
  }
  *double result = v6;
  *a2 = (char)v7;
  return result;
}

double sub_1BBB36A08(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 18) = 0;
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 108);
  *(_DWORD *)(a2 + 44) = *(unsigned __int8 *)(a1 + 109);
  *(_DWORD *)(a2 + 48) = *(unsigned __int8 *)(a1 + 110);
  *(unsigned char *)(a2 + 52) = 0;
  *(_WORD *)(a2 + 66) = 0;
  *(unsigned char *)(a2 + 68) = 0;
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 444);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 448);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 452);
  *(unsigned char *)(a2 + 18) = 1;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 456);
  *(unsigned char *)(a2 + 24) = *(_DWORD *)(a1 + 428);
  *(unsigned char *)(a2 + 25) = 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 432);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 436);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 440);
  *(unsigned char *)(a2 + 65) = 1;
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a2 + 364) = 0;
  *(void *)&double result = 0x1700000017;
  *(_OWORD *)(a2 + 492) = xmmword_1BBB6FE90;
  return result;
}

uint64_t sub_1BBB36AC8(int *a1, int a2, uint64_t a3)
{
  *a1 = a2;
  int v5 = sub_1BBAF9CE4();
  *((void *)a1 + 2) = v5;
  if (!v5) {
    return 4294967188;
  }
  if (*a1 == -1)
  {
    int v6 = a1 + 2;
LABEL_4:
    *int v6 = 0;
    return 4294967188;
  }
  signed int v7 = malloc_type_malloc(4 * (*a1 + 1), 0x4CF1F002uLL);
  *((void *)a1 + 1) = v7;
  if (!v7) {
    return 4294967188;
  }
  LODWORD(v8) = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    uint64_t v9 = 0;
    do
    {
      *(unsigned char *)(*((void *)a1 + 1) + v9) = 0;
      uint64_t v8 = *a1;
    }
    while (v9++ < v8);
    if (!v8)
    {
      int v6 = a1 + 6;
      goto LABEL_4;
    }
  }
  uint64_t v11 = malloc_type_malloc(50640 * (int)v8, 0x4CF1F002uLL);
  *((void *)a1 + 3) = v11;
  if (!v11) {
    return 4294967188;
  }
  bzero(v11, 50640 * *a1);
  if (*a1 < 1) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    uint64_t result = sub_1BBB37A3C(*((void *)a1 + 3) + v12, a3);
    if (result) {
      break;
    }
    ++v13;
    v12 += 50640;
  }
  while (v13 < *a1);
  return result;
}

void sub_1BBB36BEC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5 = *(unsigned __int8 *)(a2 + 211);
  *(_DWORD *)a1 = (char)v5;
  if (v5)
  {
    if (v5 == 32)
    {
      int v7 = 16 - (a4 & 0xF);
      if ((a4 & 0xF) == 0) {
        int v7 = 0;
      }
      int v8 = 16 - (a3 & 0xF);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      if ((a3 & 0xF) == 0) {
        int v8 = 0;
      }
      int v9 = v8 + a3;
      int v10 = v7 + a4;
      int v11 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)(a1 + 64) = v11;
      if (*(unsigned char *)(a2 + 659))
      {
        int v11 = *(unsigned __int8 *)(a2 + 662);
        *(_DWORD *)(a1 + 64) = v11;
      }
      if (*(unsigned char *)(a2 + 324)) {
        int v12 = 0;
      }
      else {
        int v12 = *(unsigned __int8 *)(a2 + 237);
      }
      *(_DWORD *)(a1 + 68) = v12;
      *(void *)(a1 + 40) = 0x1D0000001DLL;
      *(_DWORD *)(a1 + 48) = v9;
      *(_DWORD *)(a1 + 52) = v10;
      *(_DWORD *)(a1 + 56) = *(char *)(a2 + 212);
      *(_DWORD *)(a1 + 60) = *(char *)(a2 + 213);
      *(_DWORD *)(a1 + 72) = 30;
      float v13 = *(float *)(a2 + 60);
      *(float *)(a1 + 76) = v13;
      int v14 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 80) = v14;
      *(void *)(a1 + 84) = 0x200000001;
      *(unsigned char *)(a1 + 92) = *(_DWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 93) = *(_DWORD *)(a2 + 76);
      *(unsigned char *)(a1 + 94) = *(_DWORD *)(a2 + 80);
      *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 660);
      *(_DWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 108) = v10 * v9 / 256;
      *(void *)(a1 + 112) = 0x1E00000000;
      *(_DWORD *)(a1 + 120) = v9;
      *(_DWORD *)(a1 + 124) = v10;
      *(_DWORD *)(a1 + 128) = v9 / 16;
      *(_DWORD *)(a1 + 132) = 0;
      *(unsigned char *)(a1 + 136) = 0;
      int v15 = *(_DWORD *)(a2 + 216);
      int v16 = *(_DWORD *)(a2 + 220);
      *(_DWORD *)(a1 + 160) = v11 - 1;
      *(_DWORD *)(a1 + 164) = v12 + 1;
      *(_DWORD *)(a1 + 168) = 1;
      *(_OWORD *)(a1 + 176) = xmmword_1BBB6FF30;
      double v17 = (float)v14;
      double v18 = v13;
      double v19 = sub_1BBB4E9DC(v17 / (v13 * 8.0));
      *(void *)(a1 + 192) = (uint64_t)v19;
      *(void *)(a1 + 200) = (uint64_t)v19;
      *(void *)(a1 + 208) = (uint64_t)v19;
      *(void *)(a1 + 216) = (uint64_t)v19;
      *(double *)(a1 + 224) = sub_1BBB4E9DC(v17 * 160.0 / 115.0);
      double v20 = sub_1BBB4E9DC(v17 * 60.0 / 115.0);
      *(double *)(a1 + 232) = v20;
      *(double *)(a1 + 240) = sub_1BBB4E9DC(v17 * 42.0 / 115.0);
      *(void *)(a1 + 248) = 0;
      *(_OWORD *)(a1 + 256) = 0u;
      double v21 = sub_1BBB4E9DC((v17 + v17) / v18);
      *(double *)(a1 + 272) = v21;
      double v22 = sub_1BBB4E9DC(v21 * 10.0 / 31.0);
      *(double *)(a1 + 280) = v22;
      *(double *)(a1 + 288) = sub_1BBB4E9DC(v22);
      double v23 = sub_1BBB4E9DC(v22 * 1.40039253);
      *(double *)(a1 + 296) = v23;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a1 + 280);
      *(double *)(a1 + 488) = v23;
      *(void *)(a1 + 456) = 0x4024000000000000;
      *(void *)(a1 + 464) = 0x4024000000000000;
      *(_DWORD *)(a1 + 3760) = v15;
      *(_DWORD *)(a1 + 3764) = v16;
      *(void *)(a1 + 392) = 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 400) = 0;
      *(_OWORD *)(a1 + 408) = 0u;
      *(double *)(a1 + 424) = v20;
      *(void *)(a1 + 432) = 0;
      *(unsigned char *)(a1 + 440) = 0;
      double v24 = sub_1BBB4E9DC((float)((float)v15 / *(float *)(a1 + 76)));
      *(double *)(a1 + 3752) = v24;
      float v25 = sub_1BBB4E9DC(v24 * v17 / 1000.0);
      *(float *)(a1 + 3780) = v25;
      *(float *)(a1 + 3768) = v25;
      *(_DWORD *)(a1 + 3776) = 0;
      *(float *)(a1 + 3772) = v25 * 0.0;
      int v26 = *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 120) / 256;
      *(_OWORD *)(a1 + 304) = 0u;
      *(double *)(a1 + 320) = (double)v26 * 400.0;
      *(_DWORD *)(a1 + 128) = v26;
      int v27 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(a1 + 368) = 18;
      *(_DWORD *)(a1 + 372) = v27;
      *(_OWORD *)(a1 + 496) = 0u;
      memset_pattern16((void *)(a1 + 512), &unk_1BBB70250, 0x10uLL);
      *(_DWORD *)(a1 + 536) = 0;
      *(void *)(a1 + 528) = 0;
      *(double *)(a1 + 592) = sub_1BBB4E9DC((double)(*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48) / 256) / 396.0);
      *(void *)(a1 + 3812) = 0;
      *(_DWORD *)(a1 + 3860) = (int)(v17 / (v18 + 0.001));
      *(_DWORD *)(a1 + 3884) = 0;
      *(void *)(a1 + 3824) = 0;
      *(_OWORD *)(a1 + 3832) = 0u;
      *(_OWORD *)(a1 + 3864) = 0u;
      *(void *)&long long v28 = 0x100000001;
      *((void *)&v28 + 1) = 0x100000001;
      *(_OWORD *)(a1 + 3888) = v28;
      *(_DWORD *)(a1 + 3920) = 0;
      *(_DWORD *)(a1 + 3988) = 30;
      *(_OWORD *)(a1 + 3992) = xmmword_1BBB6FF40;
    }
    double v29 = *(double *)(a2 + 184);
    if (v29 > 0.0)
    {
      unsigned int v30 = *(_DWORD *)(a2 + 192);
      unsigned int v31 = (int)(v29 * (double)v30 + 0.5);
      if (!v30) {
        unsigned int v30 = *(_DWORD *)(a2 + 52);
      }
      if (*(unsigned char *)(a2 + 115))
      {
        unsigned int v32 = 0;
        char v33 = (unsigned int *)(a2 + 152);
        uint64_t v34 = *(unsigned __int8 *)(a2 + 115);
        do
        {
          unsigned int v36 = *v33++;
          unsigned int v35 = v36;
          if (v36 > v32) {
            unsigned int v32 = v35;
          }
          --v34;
        }
        while (v34);
        int v37 = 60 * v32 / 0x3E8 + 1;
        char v38 = 1;
      }
      else
      {
        int v37 = 0;
        char v38 = 0;
      }
      sub_1BBB20F70(a1 + 4032, v30, v31, *(unsigned char *)(a2 + 210) == 1, v37, v38, *(_DWORD *)(a2 + 412), *(unsigned __int8 *)(a2 + 115), *(float *)(a2 + 60));
      if (!v39)
      {
        unint64_t v40 = *(void *)(a2 + 196);
        double v41 = 0.6;
        double v42 = 1.0;
        if (v40) {
          double v42 = 0.6;
        }
        BOOL v43 = HIDWORD(v40) == 0;
        int v44 = *(_DWORD *)(a1 + 4052);
        double v45 = (double)v44;
        int v46 = (int)(v42 * (double)v44 + 0.5);
        *(_DWORD *)(a1 + 4068) = v46;
        int v47 = v44 - v46;
        if (v43) {
          double v41 = 0.0;
        }
        *(_DWORD *)(a1 + 4072) = v47;
        *(_DWORD *)(a1 + 4076) = (int)(v41 * v45);
      }
    }
  }
}

double sub_1BBB370C0(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, double result)
{
  int v6 = *(unsigned __int8 *)(a2 + 211);
  *(_DWORD *)a1 = (char)v6;
  if (v6)
  {
    if (v6 == 2)
    {
      int v8 = (double *)(a1 + 264);
      *(_OWORD *)(a1 + 264) = xmmword_1BBB6FF50;
      *(_DWORD *)(a1 + 296) = 0;
      *(_OWORD *)(a1 + 304) = xmmword_1BBB6FF60;
      *(void *)(a1 + 320) = 0;
      *(void *)(a1 + 328) = 0;
      __asm { FMOV            V0.2D, #23.0 }
      *(_OWORD *)(a1 + 352) = _Q0;
      *(void *)(a1 + 368) = 0x4037000000000000;
      if (*(unsigned char *)(a2 + 577) == 1)
      {
        double v14 = 28.0;
        if (!*(unsigned char *)(a2 + 599)) {
          double v14 = 31.0;
        }
        *(double *)(a1 + 352) = v14;
        *(double *)(a1 + 360) = v14;
        *(double *)(a1 + 368) = v14;
      }
      *(_DWORD *)(a1 + 376) = 120;
      *(void *)(a1 + 400) = 0;
      *(_DWORD *)(a1 + 407) = 0;
      *(_DWORD *)(a1 + 411) = 0x20000;
      *(unsigned char *)(a1 + 416) = 0;
      *(_DWORD *)(a1 + 420) = 0;
      *(void *)(a1 + 336) = 0;
      int v15 = *(unsigned __int8 *)(a2 + 577);
      *(_DWORD *)(a1 + 468) = v15 == 1;
      *(_WORD *)(a1 + 252) = a3;
      *(_WORD *)(a1 + 254) = a4;
      HIDWORD(v16) = 0x20000000;
      *(_OWORD *)(a1 + 436) = xmmword_1BBB6FF70;
      *(_DWORD *)(a1 + 220) = 0;
      *(unsigned char *)(a1 + 224) = 0;
      *(void *)(a1 + 456) = 0;
      *(_DWORD *)(a1 + 464) = 0;
      *(void *)(a1 + 228) = 0;
      *(void *)(a1 + 244) = 0;
      *(void *)(a1 + 236) = 0;
      LODWORD(v16) = *(_DWORD *)(a2 + 60);
      if (*(float *)&v16 > 0.0 && *(float *)&v16 < 61.0)
      {
        double v16 = *(float *)&v16;
        *(double *)(a1 + 272) = v16;
      }
      unsigned int v17 = *(_DWORD *)(a2 + 52);
      if (v17)
      {
        double v18 = (double)v17;
        double *v8 = (double)v17;
      }
      else
      {
        double v18 = 3500000.0;
      }
      *(unsigned char *)(a1 + 412) = *(unsigned char *)(a2 + 212);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 415) = v15 != 1;
      float v19 = *(float *)(a2 + 312);
      if (v19 >= *(float *)(a2 + 308)) {
        float v19 = *(float *)(a2 + 308);
      }
      unsigned int v20 = *(_DWORD *)(a2 + 304);
      if ((v20 | 0x800000) != 0x800000) {
        float v19 = -1.0;
      }
      if (v20 >= *(_DWORD *)(a2 + 300)) {
        unsigned int v20 = *(_DWORD *)(a2 + 300);
      }
      if (v19 != -1.0) {
        unsigned int v20 = (float)(*(float *)(a2 + 60) * v19);
      }
      *(_DWORD *)(a1 + 376) = v20;
      if (*(unsigned __int8 *)(a2 + 675) >= 8u) {
        char v21 = 8;
      }
      else {
        char v21 = *(unsigned char *)(a2 + 675);
      }
      if (*(unsigned char *)(a2 + 675)) {
        char v22 = v21;
      }
      else {
        char v22 = 5;
      }
      *(unsigned char *)(a1 + 344) = v22;
      *(unsigned char *)(a1 + 213) = *(unsigned char *)(a2 + 4851);
      *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 4852);
      if (*(unsigned char *)(a2 + 115) && v15 == 1)
      {
        *(unsigned char *)(a1 + 416) = 1;
        *(_DWORD *)(a1 + 1880) = 0;
        *(_DWORD *)(a1 + 2008) = 0;
        *(void *)(a1 + 2016) = 0;
        *(_DWORD *)(a1 + 2024) = 100;
        *(_WORD *)(a1 + 2028) = 25700;
        *(void *)(a1 + 2040) = 0;
        *(void *)(a1 + 2032) = 0;
        LODWORD(v16) = *(_DWORD *)(a2 + 152);
        double v23 = (double)*(unint64_t *)&v16 / 1000.0;
        *(double *)(a1 + 2032) = v23;
        int v24 = *(_DWORD *)(a2 + 120);
        *(_DWORD *)(a1 + 2040) = v24;
        double v25 = (double)v24 / (v18 * v23);
        if (v23 < 1.0)
        {
          *(void *)(a1 + 2032) = 0x3FF0000000000000;
          double v23 = 1.0;
        }
        if (v25 < 1.2) {
          double *v8 = (double)v24 / (v23 * 1.2);
        }
        uint64_t v26 = (uint64_t)(v23 * 600.0);
        uint64_t v27 = v26 / 3;
        uint64_t v28 = (unsigned __int128)(v26 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        uint64_t v29 = v26 / 6;
        *(void *)(a1 + 1888) = v26;
        *(void *)(a1 + 1896) = 11 * v26 / 12;
        int v30 = (int)(v23 * 61.0) + 1;
        *(_DWORD *)(a1 + 1880) = v30;
        *(void *)(a1 + 1904) = v27;
        *(void *)(a1 + 1912) = v29;
        *(void *)(a1 + 1920) = (v28 >> 1) + ((unint64_t)v28 >> 63);
        *(void *)(a1 + 1928) = (v28 >> 2) + ((unint64_t)v28 >> 63);
        *(_DWORD *)(a1 + 1968) = v24;
        *(_DWORD *)(a1 + 1972) = 11 * v24 / 12;
        *(_DWORD *)(a1 + 1976) = 5 * v24 / 12;
        *(_DWORD *)(a1 + 1980) = v24 / 6;
        *(_DWORD *)(a1 + 1984) = v24 / 11;
        *(_DWORD *)(a1 + 1988) = v24 / 21;
        if (v23 <= 3.0) {
          int v31 = 4;
        }
        else {
          int v31 = 6;
        }
        *(_DWORD *)(a1 + 2008) = v31;
        *(void *)(a1 + 2016) = malloc_type_calloc(16 * v30, 1uLL, 0x4AE20AB7uLL);
      }
      BOOL v32 = *(unsigned __int8 *)(a2 + 318) < 2u || *(_DWORD *)(a1 + 376) < 2u;
      uint64_t v33 = 0;
      uint64_t v34 = *(unsigned int *)(a1 + 296);
      int v35 = *(_DWORD *)(a1 + 468);
      double v36 = *(double *)(a1 + 264) / *(double *)(a1 + 272);
      do
      {
        uint64_t v37 = a1 + v33;
        char v38 = (_OWORD *)(a1 + v33 + 472);
        *char v38 = 0uLL;
        v38[1] = 0uLL;
        *(double *)(v37 + 512) = v36;
        *(void *)(v37 + 552) = v34;
        *(_DWORD *)(v37 + 504) = 0;
        *(void *)(a1 + v33 + 564) = 0xA00000000;
        *(_OWORD *)(a1 + v33 + 520) = xmmword_1BBB6FF80;
        *(_OWORD *)(a1 + v33 + 536) = 0uLL;
        *(_DWORD *)(v37 + 560) = v35;
        v33 += 432;
        *(void *)(v37 + 896) = 0;
      }
      while (v33 != 1296);
      *(_DWORD *)(a1 + 204) = 0;
      *(unsigned char *)(a1 + 209) = 0;
      *(unsigned char *)(a1 + 200) = 0;
      uint64_t v39 = 2 * *(unsigned __int8 *)(a2 + 318) + 5;
      int v40 = *(_DWORD *)(a1 + 216);
      BOOL v41 = *(unsigned char *)(a2 + 577) == 1;
      *(void *)(a1 + 1808) = 0;
      *(void *)(a1 + 1824) = 0;
      *(void *)(a1 + 1816) = 0;
      *(void *)(a1 + 1840) = 0;
      *(void *)(a1 + 1856) = 0;
      *(void *)(a1 + 1848) = 0;
      *(_WORD *)(a1 + 1864) = 0;
      *(_DWORD *)(a1 + 1876) = v32;
      *(unsigned char *)(a1 + 1866) = v41;
      *(void *)(a1 + 1868) = 0xFFFFFFFF00000000;
      size_t v42 = 8 * v39;
      *(_DWORD *)(a1 + 1832) = v39;
      *(void *)(a1 + 1808) = malloc_type_calloc(8 * v39, 1uLL, 0x4AE20AB7uLL);
      *(void *)(a1 + 1824) = malloc_type_calloc(v42, 1uLL, 0x4AE20AB7uLL);
      if (v40 != 2) {
        *(void *)(a1 + 1816) = malloc_type_calloc(v42, 1uLL, 0x4AE20AB7uLL);
      }
    }
    uint64_t result = *(double *)(a2 + 184);
    if (result > 0.0)
    {
      unsigned int v43 = *(_DWORD *)(a2 + 192);
      unsigned int v44 = (int)(result * (double)v43 + 0.5);
      if (!v43) {
        unsigned int v43 = *(_DWORD *)(a2 + 52);
      }
      if (*(unsigned char *)(a2 + 115))
      {
        unsigned int v45 = 0;
        int v46 = (unsigned int *)(a2 + 152);
        uint64_t v47 = *(unsigned __int8 *)(a2 + 115);
        do
        {
          unsigned int v49 = *v46++;
          unsigned int v48 = v49;
          if (v49 > v45) {
            unsigned int v45 = v48;
          }
          --v47;
        }
        while (v47);
        int v50 = 60 * v45 / 0x3E8 + 1;
        char v51 = 1;
      }
      else
      {
        int v50 = 0;
        char v51 = 0;
      }
      uint64_t result = sub_1BBB20F70(a1 + 8, v43, v44, *(unsigned char *)(a2 + 210) == 1, v50, v51, *(_DWORD *)(a2 + 412), *(unsigned __int8 *)(a2 + 115), *(float *)(a2 + 60));
      if (!v52)
      {
        unint64_t v53 = *(void *)(a2 + 196);
        double v54 = 0.6;
        double v55 = 1.0;
        if (v53) {
          double v55 = 0.6;
        }
        if (!HIDWORD(v53)) {
          double v54 = 0.0;
        }
        int v56 = *(_DWORD *)(a1 + 28);
        int v57 = (int)(v55 * (double)v56 + 0.5);
        *(_DWORD *)(a1 + 44) = v57;
        *(_DWORD *)(a1 + 48) = v56 - v57;
        *(_DWORD *)(a1 + 52) = (int)(v54 * (double)v56);
        uint64_t result = (double)(5 * v56) * 0.01;
        *(_DWORD *)(a1 + 36) = (int)result;
      }
    }
  }
  return result;
}

void sub_1BBB376D0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4 = *(char *)(a2 + 211);
  *(_DWORD *)a1 = v4;
  if (v4)
  {
    int v6 = 0;
    int v7 = 16 - (a4 & 0xF);
    if ((a4 & 0xF) == 0) {
      int v7 = 0;
    }
    int v8 = 16 - (a3 & 0xF);
    int v9 = (_OWORD *)(a1 + 296);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    if ((a3 & 0xF) == 0) {
      int v8 = 0;
    }
    int v10 = v8 + a3;
    int v11 = v7 + a4;
    int v12 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a1 + 72) = v12;
    if (!*(unsigned char *)(a2 + 324)) {
      int v6 = *(unsigned __int8 *)(a2 + 237);
    }
    *(_DWORD *)(a1 + 76) = v6;
    *(void *)(a1 + 48) = 0x1D0000001DLL;
    *(_DWORD *)(a1 + 56) = v10;
    *(_DWORD *)(a1 + 60) = v11;
    *(_DWORD *)(a1 + 64) = *(char *)(a2 + 212);
    *(_DWORD *)(a1 + 68) = *(char *)(a2 + 213);
    *(_DWORD *)(a1 + 80) = 30;
    float v13 = *(float *)(a2 + 60);
    *(float *)(a1 + 84) = v13;
    int v14 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 88) = v14;
    *(void *)(a1 + 92) = 0x200000001;
    *(unsigned char *)(a1 + 100) = *(_DWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 101) = *(_DWORD *)(a2 + 76);
    *(unsigned char *)(a1 + 102) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 116) = v11 * v10 / 256;
    *(void *)(a1 + 120) = 0x1E00000000;
    *(_DWORD *)(a1 + 128) = v10;
    *(_DWORD *)(a1 + 132) = v11;
    *(void *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = v10 / 16;
    int v15 = *(_DWORD *)(a2 + 216);
    int v16 = *(_DWORD *)(a2 + 220);
    *(_DWORD *)(a1 + 176) = v12 - 1;
    *(_DWORD *)(a1 + 180) = v6 + 1;
    *(_DWORD *)(a1 + 184) = 1;
    *(_OWORD *)(a1 + 192) = xmmword_1BBB6FF30;
    double v17 = (float)v14;
    double v18 = v13;
    double v19 = sub_1BBB4E9DC(v17 / (v13 * 8.0));
    *(void *)(a1 + 208) = (uint64_t)v19;
    *(void *)(a1 + 216) = (uint64_t)v19;
    *(void *)(a1 + 224) = (uint64_t)v19;
    *(void *)(a1 + 232) = (uint64_t)v19;
    *(double *)(a1 + 240) = sub_1BBB4E9DC(v17 * 160.0 / 115.0);
    *(double *)(a1 + 248) = sub_1BBB4E9DC(v17 * 60.0 / 115.0);
    *(double *)(a1 + 256) = sub_1BBB4E9DC(v17 * 42.0 / 115.0);
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 264) = 0;
    double v20 = sub_1BBB4E9DC((v17 + v17) / v18);
    *(double *)(a1 + 288) = v20;
    double v21 = sub_1BBB4E9DC(v20 * 10.0 / 31.0);
    *(double *)(a1 + 296) = v21;
    *(double *)(a1 + 304) = sub_1BBB4E9DC(v21);
    double v22 = sub_1BBB4E9DC(v21 * 1.40039253);
    *(double *)(a1 + 312) = v22;
    v9[8] = *v9;
    *(double *)(a1 + 440) = v22;
    *(_DWORD *)(a1 + 3712) = v15;
    *(_DWORD *)(a1 + 3716) = v16;
    *(_DWORD *)(a1 + 416) = -1;
    double v23 = sub_1BBB4E9DC((float)((float)v15 / *(float *)(a1 + 84)));
    *(double *)(a1 + 3704) = v23;
    float v24 = sub_1BBB4E9DC(v23 * v17 / 1000.0);
    *(float *)(a1 + 3732) = v24;
    *(float *)(a1 + 3720) = v24;
    *(_DWORD *)(a1 + 3728) = 0;
    *(float *)(a1 + 3724) = v24 * 0.0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    int v25 = *(_DWORD *)(a1 + 132) * *(_DWORD *)(a1 + 128) / 256;
    *(double *)(a1 + 336) = (double)v25 * 400.0;
    *(_DWORD *)(a1 + 144) = v25;
    *(_DWORD *)(a1 + 384) = 18;
    *(_DWORD *)(a1 + 388) = *(_DWORD *)(a1 + 96);
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 456) = 0;
    memset_pattern16((void *)(a1 + 464), &unk_1BBB70250, 0x10uLL);
    *(_DWORD *)(a1 + 488) = 0;
    *(void *)(a1 + 480) = 0;
    *(double *)(a1 + 544) = sub_1BBB4E9DC((double)(*(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56) / 256) / 396.0);
    *(void *)(a1 + 3764) = 0;
    *(_DWORD *)(a1 + 3796) = (int)(v17 / (v18 + 0.001));
    *(_DWORD *)(a1 + 3800) = -1;
    *(void *)(a1 + 3776) = 0;
    *(_DWORD *)(a1 + 3808) = 0;
    *(void *)(a1 + 3824) = 0x100000001;
    *(_DWORD *)(a1 + 3832) = 1;
    *(_DWORD *)(a1 + 3852) = 0;
    *(_DWORD *)(a1 + 3916) = 30;
    *(_OWORD *)(a1 + 3920) = xmmword_1BBB6FF40;
  }
}

uint64_t sub_1BBB37A3C(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)(a1 + 48112);
  int v5 = malloc_type_calloc(288 * *(int *)(a2 + 57096) + 288, 1uLL, 0x4AE20AB7uLL);
  v4[313] = v5;
  if (!v5) {
    return 4294967188;
  }
  v4[8] = a1 + 47360;
  v4[9] = a1 + 47426;
  v4[10] = a1 + 47472;
  v4[11] = a1 + 47800;
  v4[12] = a1 + 47841;
  uint64_t v6 = *(unsigned __int8 *)(a2 + 205448);
  if (!*(unsigned char *)(a2 + 205448)) {
    goto LABEL_8;
  }
  int v7 = 0;
  int v8 = (unsigned __int8 *)(a2 + 119440);
  do
  {
    v7 |= *v8;
    v8 += 336;
    --v6;
  }
  while (v6);
  if (v7 == 1)
  {
    int v9 = malloc_type_calloc(0x3D0uLL, 1uLL, 0x4AE20AB7uLL);
    *int v4 = v9;
    if (!v9) {
      return 4294967188;
    }
  }
  else
  {
LABEL_8:
    *int v4 = 0;
  }
  if (!*(unsigned char *)(a2 + 205933))
  {
    uint64_t v11 = *(void *)(a2 + 136);
    *(_DWORD *)(a1 + 14104) = 16843009;
    *(_DWORD *)(a1 + 14107) = 16843009;
    *(unsigned char *)(a1 + 14111) = 0;
    *(unsigned char *)(a1 + 14117) = *(unsigned char *)(v11 + 4824);
    *(unsigned char *)(a1 + 14092) = *(unsigned char *)(v11 + 400);
    int v12 = malloc_type_calloc(0xF30uLL, 1uLL, 0x4AE20AB7uLL);
    *(void *)(a1 + 14096) = v12;
    if (v12)
    {
      if (*(unsigned __int8 *)(v11 + 265) - 3 >= 2) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
      *(_DWORD *)(a1 + 13028) = v13;
      *(unsigned char *)(a1 + 14118) = *(unsigned char *)(v11 + 368);
      *(unsigned char *)(a1 + 31) = *(unsigned char *)(v11 + 266);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(v11 + 267);
      if (*(unsigned char *)(v11 + 663)) {
        __int16 v14 = 0;
      }
      else {
        __int16 v14 = *(unsigned __int8 *)(v11 + 292);
      }
      *(_WORD *)(a1 + 2) = v14;
      *(_WORD *)a1 = *(_WORD *)(v11 + 294);
      *(unsigned char *)(a1 + 4) = *(unsigned char *)(v11 + 271);
      *(unsigned char *)(a1 + 6) = *(unsigned char *)(v11 + 273);
      *(unsigned char *)(a1 + 5) = *(unsigned char *)(v11 + 274);
      int v15 = *(unsigned __int8 *)(v11 + 287);
      *(unsigned char *)(a1 + 7) = v15;
      *(unsigned char *)(a1 + 9) = *(unsigned char *)(v11 + 278);
      int v16 = *(unsigned __int8 *)(v11 + 288);
      *(unsigned char *)(a1 + 11) = v16;
      *(unsigned char *)(a1 + 12) = *(unsigned char *)(v11 + 279);
      *(unsigned char *)(a1 + 13) = *(unsigned char *)(v11 + 280);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(v11 + 276);
      *(unsigned char *)(a1 + 25) = *(unsigned char *)(v11 + 277);
      *(unsigned char *)(a1 + 33) = *(unsigned char *)(v11 + 289);
      *(unsigned char *)(a1 + 10) = v15 == 0;
      if (v16) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = *(unsigned char *)(v11 + 283) != 0;
      }
      *(unsigned char *)(a1 + 14) = v17;
      *(unsigned char *)(a1 + 34) = *(unsigned char *)(v11 + 398);
      *(unsigned char *)(a1 + 14113) = *(unsigned char *)(v11 + 653);
      *(unsigned char *)(a1 + 14114) = *(unsigned char *)(v11 + 654);
      *(unsigned char *)(a1 + 14115) = *(unsigned char *)(v11 + 655);
      *(unsigned char *)(a1 + 14112) = *(unsigned char *)(v11 + 612);
      *(unsigned char *)(a1 + 26) = *(unsigned char *)(v11 + 268);
      *(unsigned char *)(a1 + 27) = *(unsigned char *)(v11 + 268);
      *(_WORD *)(a1 + 15) = 257;
      *(unsigned char *)(v11 + 282) = 1;
      *(_DWORD *)(a1 + 20) = 0;
      int v18 = *(unsigned __int8 *)(v11 + 284);
      if (!*(unsigned char *)(v11 + 284))
      {
        int v19 = 4;
        goto LABEL_28;
      }
      if (v18 == 2)
      {
        *(_DWORD *)(a1 + 20) = 6;
      }
      else if (v18 == 1)
      {
        int v19 = 5;
LABEL_28:
        *(_DWORD *)(a1 + 20) = v19;
        int32x2_t v20 = vdup_n_s32(0x1869Fu);
        *(int32x2_t *)(a1 + 52) = v20;
        *(int32x2_t *)(a1 + 64) = v20;
        *(unsigned char *)(a1 + 144) = 1;
        *(void *)(a1 + 13040) = a1 + 13048;
        uint64_t v10 = 4294967246;
LABEL_33:
        sub_1BBAFA1CC(a1);
        return v10;
      }
      int32x2_t v21 = vdup_n_s32(0x1869Fu);
      *(int32x2_t *)(a1 + 52) = v21;
      *(int32x2_t *)(a1 + 64) = v21;
      *(unsigned char *)(a1 + 144) = 1;
      *(void *)(a1 + 13040) = a1 + 13048;
      *(unsigned char *)(a1 + 14116) = *(unsigned char *)(v11 + 633);
      double v22 = (char *)malloc_type_calloc(0x1309E0uLL, 1uLL, 0x4AE20AB7uLL);
      *(void *)(a1 + 104) = v22;
      if (v22)
      {
        double v23 = (unsigned __int8 *)v22;
        float v24 = v22 + 148560;
        char v38 = v22 + 91648;
        uint64_t v39 = v22 + 121733;
        double v36 = v22 + 61216;
        uint64_t v37 = v22 + 91301;
        int v25 = v22 + 60869;
        uint64_t v26 = v22 + 30784;
        uint64_t v27 = v22 + 30437;
        *(_DWORD *)(a1 + 100) = 41;
        *(void *)(a1 + 112) = v22;
        *(void *)(a1 + 120) = v22 + 182592;
        *(void *)(a1 + 128) = v22 + 426048;
        unsigned __int8 v28 = *(unsigned char *)(v11 + 399) != 1;
        *(_WORD *)(v22 + 5) = 256;
        v22[7] = 0;
        *((void *)v22 + 3354) = v22 + 26848;
        sub_1BBB10BA8(0, v28, (unsigned __int8 *)v22 + 4, (unsigned __int8 *)v22 + 64);
        v23[352] = 0;
        unsigned __int8 v29 = *(unsigned char *)(v11 + 399) != 1;
        *(_WORD *)uint64_t v27 = 256;
        v27[2] = 0;
        *((void *)v26 + 3310) = v23 + 57280;
        sub_1BBB10BA8(0, v29, v23 + 30436, v23 + 30496);
        *uint64_t v26 = 1;
        unsigned __int8 v30 = *(unsigned char *)(v11 + 399) != 1;
        *(_WORD *)int v25 = 256;
        v25[2] = 0;
        *((void *)v36 + 3310) = v23 + 87712;
        sub_1BBB10BA8(0, v30, v23 + 60868, v23 + 60928);
        *double v36 = 2;
        unsigned __int8 v31 = *(unsigned char *)(v11 + 399) != 1;
        *(_WORD *)uint64_t v37 = 256;
        v37[2] = 0;
        *((void *)v38 + 3310) = v23 + 118144;
        sub_1BBB10BA8(0, v31, v23 + 91300, v23 + 91360);
        *char v38 = 3;
        char v32 = *(unsigned char *)(a1 + 14092);
        unsigned __int8 v33 = *(unsigned char *)(v11 + 399) != 1;
        *(_WORD *)uint64_t v39 = 0;
        v39[2] = v32;
        *(void *)float v24 = v23 + 148576;
        sub_1BBB10BA8(0, v33, v23 + 121732, v23 + 121792);
        unsigned __int8 v34 = *(unsigned char *)(v11 + 399) != 1;
        *(_WORD *)(v24 + 3605) = 0;
        v24[3607] = 0;
        *((void *)v24 + 3804) = v23 + 179008;
        sub_1BBB10BA8(0, v34, v23 + 152164, v23 + 152224);
        *(_DWORD *)(a1 + 88) = 6;
        sub_1BBAFA384((int32x2_t *)a1, (unsigned __int8 *)v11);
        *(unsigned char *)(a1 + 29) = 0;
        *(unsigned char *)(a1 + 30) = *(unsigned char *)(v11 + 272);
        goto LABEL_10;
      }
    }
    uint64_t v10 = 4294967188;
    goto LABEL_33;
  }
LABEL_10:
  v4[16] = 0;
  v4[17] = 0;
  uint64_t v10 = 0;
  if (*(unsigned char *)(a1 + 144))
  {
    v4[16] = a1 + 12640;
    v4[17] = a1 + 12896;
  }
  return v10;
}

void sub_1BBB37FC0(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1 + 205800;
    for (uint64_t i = 280; i != 1016; i += 8)
    {
      uint64_t v6 = *(void **)(a1 + i);
      if (v6)
      {
        free(v6);
        *(void *)(a1 + i) = 0;
      }
    }
    int v7 = *(void **)(a1 + 1016);
    if (v7) {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 1016));
    }
    free(v7);
    *(void *)(a1 + 1016) = 0;
    int v8 = *(void **)(a1 + 1040);
    if (v8)
    {
      free(v8);
      *(void *)(a1 + 1040) = 0;
    }
    uint64_t v9 = *(void *)(a1 + 96);
    if (v9)
    {
      MEMORY[0x1C18605E0](v9, 0x1090C409089D355);
      *(void *)(a1 + 96) = 0;
    }
    uint64_t v10 = *(void *)(a1 + 104);
    if (v10)
    {
      MEMORY[0x1C18605E0](v10, 0x1090C409089D355);
      *(void *)(a1 + 104) = 0;
    }
    uint64_t v11 = *(void *)(a1 + 120);
    if (v11)
    {
      MEMORY[0x1C18605E0](v11, 0x1020C407CB6107DLL);
      *(void *)(a1 + 120) = 0;
    }
    uint64_t v12 = *(void *)(a1 + 128);
    if (v12)
    {
      MEMORY[0x1C18605E0](v12, 0x1000C403E1C8BA9);
      *(void *)(a1 + 128) = 0;
    }
    uint64_t v13 = *(void *)(a1 + 5392);
    if (v13)
    {
      MEMORY[0x1C18605E0](v13, 0x10A0C40342BB1B8);
      *(void *)(a1 + 5392) = 0;
    }
    uint64_t v14 = *(void *)(a1 + 5400);
    if (v14)
    {
      MEMORY[0x1C18605E0](v14, 0x1000C4081AB84E2);
      *(void *)(a1 + 5400) = 0;
    }
    uint64_t v15 = *(void *)(a1 + 5408);
    if (v15)
    {
      MEMORY[0x1C18605E0](v15, 0x1000C4081AB84E2);
      *(void *)(a1 + 5408) = 0;
    }
    int v16 = *(void **)(a1 + 5416);
    if (v16)
    {
      BOOL v17 = (const void *)v16[19];
      if (v17)
      {
        CFRelease(v17);
        v16[19] = 0;
      }
      int v18 = (const void *)v16[18];
      if (v18)
      {
        CFRelease(v18);
        v16[18] = 0;
      }
      int v19 = (const void *)v16[20];
      if (v19)
      {
        CFRelease(v19);
        v16[20] = 0;
      }
      v16[15] = 0;
      v16[16] = 0;
      v16[17] = 0;
      v16[22] = 0;
      v16[23] = 0;
      v16[21] = 0;
      uint64_t v20 = v16[24];
      if (v20)
      {
        MEMORY[0x1C18605A0](v20, 0x1000C8077774924);
        v16[24] = 0;
      }
      uint64_t v21 = v16[48];
      if (v21)
      {
        MEMORY[0x1C18605A0](v21, 0x1000C8052888210);
        v16[48] = 0;
      }
      MEMORY[0x1C18605E0](v16, 0x10B0C40501F5998);
      *(void *)(a1 + 5416) = 0;
    }
    uint64_t v22 = *(void *)(v4 + 48);
    if (v22)
    {
      sub_1BBB0A5CC(v22);
      *(void *)(v4 + 48) = 0;
    }
    sub_1BBB56558(a1 + 1744);
    sub_1BBB56558(a1 + 2800);
    sub_1BBB56558(a1 + 3856);
    uint64_t v23 = *(void *)(v4 + 56);
    if (v23)
    {
      sub_1BBB1E2BC(v23);
      free(*(void **)(v4 + 56));
      *(void *)(v4 + 56) = 0;
    }
    free(*(void **)(a1 + 5512));
    *(void *)(a1 + 5512) = 0;
    free(*(void **)(a1 + 5472));
    *(void *)(a1 + 5472) = 0;
    if (*(int *)(a1 + 5464) >= 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      do
      {
        free(*(void **)(*(void *)(a1 + 5480) + v24 + 80));
        *(void *)(*(void *)(a1 + 5480) + v24 + 80) = 0;
        *(_DWORD *)(*(void *)(a1 + 5480) + v24 + 72) = 0;
        ++v25;
        v24 += 88;
      }
      while (v25 < *(int *)(a1 + 5464));
    }
    free(*(void **)(a1 + 5480));
    *(void *)(a1 + 5480) = 0;
    free(*(void **)(a1 + 5488));
    *(void *)(a1 + 5488) = 0;
    free(*(void **)(a1 + 5496));
    *(void *)(a1 + 5496) = 0;
    free(*(void **)(a1 + 5440));
    *(void *)(a1 + 5440) = 0;
    if (*(int *)(a1 + 5432) >= 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      do
      {
        sub_1BBB38578(*(void *)(a1 + 5456) + v26);
        ++v27;
        v26 += 50640;
      }
      while (v27 < *(int *)(a1 + 5432));
    }
    free(*(void **)(a1 + 5456));
    *(void *)(a1 + 5456) = 0;
    unsigned __int8 v28 = *(void **)(a1 + 5448);
    if (v28) {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 5448));
    }
    free(v28);
    *(void *)(a1 + 5448) = 0;
    free(*(void **)(v4 + 1896));
    *(void *)(v4 + 1896) = 0;
    unsigned __int8 v29 = *(FILE **)(a1 + 192);
    if (v29) {
      fclose(v29);
    }
    unsigned __int8 v30 = *(FILE **)(a1 + 232);
    if (v30) {
      fclose(v30);
    }
    unsigned __int8 v31 = *(FILE **)(a1 + 264);
    if (v31) {
      fclose(v31);
    }
    char v32 = *(FILE **)(a1 + 256);
    if (v32) {
      fclose(v32);
    }
    unsigned __int8 v33 = *(FILE **)(a1 + 240);
    if (v33) {
      fclose(v33);
    }
    unsigned __int8 v34 = *(FILE **)(a1 + 248);
    if (v34) {
      fclose(v34);
    }
    int v35 = *(FILE **)(a1 + 272);
    if (v35) {
      fclose(v35);
    }
    double v36 = *(FILE **)(a1 + 200);
    if (v36) {
      fclose(v36);
    }
    uint64_t v37 = *(FILE **)(a1 + 216);
    if (v37) {
      fclose(v37);
    }
    char v38 = *(FILE **)(a1 + 224);
    if (v38) {
      fclose(v38);
    }
    uint64_t v39 = *(FILE **)(a1 + 208);
    if (v39) {
      fclose(v39);
    }
    if (*(_DWORD *)(v4 + 124) == 1 && *(_DWORD *)(v4 + 2260))
    {
      unint64_t v40 = 0;
      uint64_t v41 = a1 + 5616;
      size_t v42 = (void **)(a1 + 5600);
      do
      {
        free(*v42);
        *size_t v42 = 0;
        *((_DWORD *)v42 - 2) = 0;
        sub_1BBB38578(v41);
        ++v40;
        v41 += 50640;
        v42 += 11;
      }
      while (v40 < *(unsigned int *)(v4 + 2260));
    }
    if (a2)
    {
      uint64_t v43 = *(void *)(v4 + 8);
      if (v43)
      {
        sub_1BBB0AFBC(v43);
        free(*(void **)(v4 + 8));
        *(void *)(v4 + 8) = 0;
      }
      if (*(void *)v4)
      {
        free(*(void **)v4);
        *(void *)uint64_t v4 = 0;
      }
      CFArrayRef v44 = *(const __CFArray **)(v4 + 16);
      if (v44)
      {
        for (CFIndex j = 0; ; ++j)
        {
          CFIndex Count = CFArrayGetCount(v44);
          CFArrayRef v44 = *(const __CFArray **)(v4 + 16);
          if (Count <= j) {
            break;
          }
          CFSetRef ValueAtIndex = CFArrayGetValueAtIndex(v44, j);
          CFRelease(ValueAtIndex);
          CFArrayRef v44 = *(const __CFArray **)(v4 + 16);
        }
      }
      CFRelease(v44);
      *(void *)(v4 + 16) = 0;
      unsigned int v48 = *(void **)(v4 + 24);
      if (v48)
      {
        free(v48);
        *(void *)(v4 + 24) = 0;
      }
      unsigned int v49 = *(void **)(v4 + 160);
      if (v49)
      {
        free(v49);
        *(void *)(v4 + 160) = 0;
      }
      int v50 = *(void **)(a1 + 152);
      if (v50)
      {
        char v51 = (void *)v50[252];
        if (v51) {
          free(v51);
        }
        int v52 = (void *)v50[226];
        if (v52) {
          free(v52);
        }
        unint64_t v53 = (void *)v50[228];
        if (v53) {
          free(v53);
        }
        double v54 = (void *)v50[227];
        if (v54) {
          free(v54);
        }
        free(*(void **)(a1 + 152));
        *(void *)(a1 + 152) = 0;
      }
      double v55 = *(void **)(v4 + 144);
      if (v55)
      {
        free(v55);
        *(void *)(v4 + 144) = 0;
      }
      uint64_t v56 = *(void *)(v4 + 1960);
      if (v56)
      {
        sub_1BB9D54F8(v56 + 256);
        sub_1BB9D54F8(v56 + 184);
        MEMORY[0x1C18605E0](v56, 0x1080C40386BD8C1);
        *(void *)(v4 + 1960) = 0;
      }
    }
    int v57 = *(void **)(v4 + 1904);
    if (v57)
    {
      free(v57);
      *(void *)(v4 + 1904) = 0;
    }
    int v58 = *(void **)(a1 + 1064);
    if (v58)
    {
      sub_1BBB4F3C0(v58);
      *(void *)(a1 + 1064) = 0;
    }
    unsigned int v59 = *(void **)(a1 + 1072);
    if (v59)
    {
      sub_1BBB4F3C0(v59);
      *(void *)(a1 + 1072) = 0;
    }
    sub_1BBB0EF64(a1);
    free((void *)a1);
  }
}

void sub_1BBB38578(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1 + 48112;
    free(*(void **)(a1 + 50616));
    free(*(void **)v2);
    *(void *)(v2 + 2504) = 0;
    *(void *)uint64_t v2 = 0;
    sub_1BBAFA1CC(a1);
  }
}

unsigned char *sub_1BBB385D4(uint64_t a1, int a2, _WORD *a3, unsigned int a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  double v7 = (double)a2 * 0.125;
  int v8 = 16 * a4;
  bzero(v63, 16 * a4);
  uint64_t v9 = 0;
  int v10 = *(_DWORD *)(a1 + 22388);
  int v11 = v8 - 2;
  double v12 = (double)v10;
  if (v8 <= 2) {
    int v13 = 2;
  }
  else {
    int v13 = v8;
  }
  uint64_t v14 = (v13 - 1);
  do
  {
    double v15 = ((double)(int)v9 - (double)v11 * 0.5) * 3.1415926;
    if (v15 == 0.0)
    {
      double v17 = 1.0;
    }
    else
    {
      long double v16 = sin(v7 * (v15 * 0.0625)) / v15 * 16.0 / v7 * v12;
      double v17 = v16 * (sin(v7 * (v15 * 0.0625 / v12)) / v15 * 16.0 / v7);
    }
    *(double *)&v63[++v9] = v17;
  }
  while (v14 != v9);
  v63[(v11 >> 1) + 1] = 0x3FF0000000000000;
  uint64_t v18 = a4;
  uint64_t v19 = a4 - 1;
  double v20 = 0.0;
  uint64_t v21 = 16;
  uint64_t v22 = v19;
  do
  {
    double v20 = v20 + *(double *)&v63[v21];
    v21 += 16;
    --v22;
  }
  while (v22);
  uint64_t v23 = 16;
  uint64_t v24 = a3;
  do
  {
    double v25 = *(double *)&v63[v23] * 64.0 / v20;
    if (v25 <= 0.0) {
      double v26 = -0.5;
    }
    else {
      double v26 = 0.5;
    }
    *v24++ = (int)(v25 + v26);
    v23 += 16;
    --v19;
  }
  while (v19);
  __int16 v27 = 0;
  uint64_t v28 = a4 - 1;
  a3[v28] = 0;
  unsigned __int8 v29 = a3;
  uint64_t v30 = a4;
  do
  {
    __int16 v31 = *v29++;
    v27 += v31;
    --v30;
  }
  while (v30);
  uint64_t v32 = a4 >> 1;
  uint64_t v33 = (v32 - 1);
  a3[v33] = a3[v33] - v27 + 64;
  uint64_t v34 = a4 + 1 - 1;
  int v35 = a3 + 8;
  unint64_t v36 = 1;
  uint64_t v37 = 120;
  uint64_t result = v63;
  do
  {
    double v39 = 0.0;
    uint64_t v40 = v37;
    uint64_t v41 = v34;
    do
    {
      double v39 = v39 + *(double *)((char *)v63 + v40);
      v40 += 128;
      --v41;
    }
    while (v41);
    size_t v42 = v63;
    uint64_t v43 = v35;
    uint64_t v44 = v34;
    do
    {
      double v45 = *(double *)&v42[v37] * 64.0 / v39;
      if (v45 <= 0.0) {
        double v46 = -0.5;
      }
      else {
        double v46 = 0.5;
      }
      *v43++ = (int)(v45 + v46);
      v42 += 128;
      --v44;
    }
    while (v44);
    uint64_t v47 = 0;
    int v48 = 0;
    do
    {
      if (v48 <= (__int16)v35[v47]) {
        int v48 = (__int16)v35[v47];
      }
      ++v47;
    }
    while (v18 != v47);
    if (v48 <= 100)
    {
      uint64_t v58 = 0;
      int v55 = 0;
      do
        v55 += (__int16)v35[v58++];
      while (v18 != v58);
      if (v36 == 8)
      {
        int v59 = 64 - v55;
        BOOL v52 = v55 > 64;
        int v60 = 65 - v55;
        if (v52) {
          int v59 = v60;
        }
        int v55 = v59 >> 1;
        a3[v32 + 64] += v59 >> 1;
        int v57 = &a3[v33 + 64];
      }
      else
      {
        LOWORD(v55) = 64 - v55;
        if (v36 <= 7) {
          int v57 = &a3[8 * v36 + v28];
        }
        else {
          int v57 = &a3[8 * v36];
        }
      }
    }
    else
    {
      uint64_t v49 = 0;
      do
      {
        v35[v49] = (int)(100.0 / (double)v48 * (double)(__int16)v35[v49]);
        ++v49;
      }
      while (v34 != v49);
      uint64_t v50 = 0;
      int v51 = 0;
      do
        v51 += (__int16)v35[v50++];
      while (v18 != v50);
      int v53 = 64 - v51;
      BOOL v52 = v51 > 64;
      int v54 = 65 - v51;
      if (v52) {
        int v53 = v54;
      }
      int v55 = v53 >> 1;
      uint64_t v56 = &a3[8 * v36];
      v56[v32] += v53 >> 1;
      int v57 = &v56[v33];
    }
    uint64_t v61 = 0;
    __int16 v62 = 0;
    *v57 += v55;
    do
      v62 += v35[v61++];
    while (v18 != v61);
    a3[8 * v36 + v33] = a3[8 * v36 + v33] - v62 + 64;
    ++v36;
    v37 -= 8;
    v35 += 8;
  }
  while (v36 != 16);
  return result;
}

uint64_t sub_1BBB389D4(uint64_t result)
{
  uint64_t v1 = (uint64_t (**)(uint64_t))result;
  if ((byte_1E9F82B24 & 1) == 0) {
    byte_1E9F82B24 = 1;
  }
  *(void *)(result + 208) = sub_1BBB10154;
  *(void *)(result + 216) = sub_1BBB1010C;
  *(void *)(result + 224) = sub_1BBB100A4;
  *(void *)uint64_t result = sub_1BBB1EB50;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = sub_1BBB1EF70;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = sub_1BBB1F3D0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = sub_1BBB38B50;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = sub_1BBB38B50;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = sub_1BBB38B50;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = sub_1BBB1FD8C;
  *(void *)(result + 104) = 0;
  *(void *)(result + 128) = sub_1BBB1FFF8;
  *(void *)(result + 136) = 0;
  *(void *)(result + 112) = sub_1BBB38B50;
  *(void *)(result + 120) = 0;
  *(void *)(result + 144) = sub_1BBB38B50;
  *(void *)(result + 152) = 0;
  *(void *)(result + 160) = sub_1BBB38B50;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = sub_1BBB1F9D8;
  *(void *)(result + 184) = 0;
  *(void *)(result + 192) = sub_1BBB20214;
  *(void *)(result + 200) = 0;
  if (!*(unsigned char *)(result + 245))
  {
    uint64_t result = sub_1BBAF9EE0();
    if ((result & 1) == 0)
    {
      CMTime *v1 = sub_1BBB09A10;
      v1[1] = 0;
    }
    v1[24] = sub_1BBB17C54;
    v1[25] = 0;
    v1[20] = sub_1BBB17804;
    v1[21] = 0;
    v1[22] = sub_1BBB17870;
    v1[23] = 0;
  }
  return result;
}

uint64_t sub_1BBB38B50()
{
  return 0;
}

uint64_t sub_1BBB38B58(uint64_t a1, int a2)
{
  uint64_t v3 = 0;
  *(unsigned char *)(a1 + 245) = 0;
  *(_DWORD *)(a1 + 241) = 22020864;
  *(void *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 480) = a2;
  *(_DWORD *)(a1 + 492) = 9;
  *(unsigned char *)(a1 + 22320) = 0;
  *(unsigned char *)(a1 + 22360) = 0;
  *(void *)(a1 + 22328) = 0;
  *(void *)(a1 + 22344) = 0;
  *(_DWORD *)(a1 + 22361) = 16843009;
  *(_OWORD *)(a1 + 22368) = xmmword_1BBB6FF90;
  *(_DWORD *)(a1 + 22304) = 1280;
  *(_DWORD *)(a1 + 22312) = 1280;
  *(void *)(a1 + 22384) = 0x200000000;
  *(_DWORD *)(a1 + 22396) = -65536;
  *(_DWORD *)(a1 + 22414) = 1376255;
  *(_WORD *)(a1 + 22418) = -1;
  *(_DWORD *)(a1 + 22440) = 1;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 22432) = 0x100000000;
  *(_WORD *)(a1 + 22400) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 488) = 1;
  *(_OWORD *)(a1 + 22456) = 0u;
  *(_OWORD *)(a1 + 22488) = 0u;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 22504) = 0;
  *(_DWORD *)(a1 + 22448) = 30;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 22272) = 10;
  *(_DWORD *)(a1 + 22282) = 1024;
  *(void *)(a1 + 22274) = 1024;
  uint64_t v4 = (_WORD *)(a1 + 11776);
  *(unsigned char *)(a1 + 264) = 0;
  do
  {
    int v5 = dword_1BBB8BE68[v3];
    sub_1BBB385D4(a1, v5, v4 - 1024, 4u);
    sub_1BBB385D4(a1, v5, v4, 8u);
    ++v3;
    v4 += 128;
  }
  while (v3 != 8);
  uint64_t v6 = 0;
  double v7 = &unk_1BBB8BE88;
  uint64_t v8 = 13824;
  uint64_t v9 = (char *)&unk_1BBB8C688;
  do
  {
    uint64_t v10 = 0;
    uint64_t v11 = v8;
    do
    {
      uint64_t v12 = a1 + v11;
      *(_OWORD *)(v12 + 2048) = v7[v10];
      *(uint16x8_t *)uint64_t v12 = vmovl_u8(*(uint8x8_t *)&v9[8 * v10++]);
      v11 += 16;
    }
    while (v10 != 16);
    ++v6;
    v7 += 16;
    v8 += 256;
    v9 += 128;
  }
  while (v6 != 8);
  uint64_t v13 = 0;
  uint64_t v14 = (char *)&unk_1BBB8CA88;
  uint64_t v15 = 17920;
  long double v16 = (char *)&unk_1BBB8CE88;
  do
  {
    uint64_t v17 = 0;
    uint64_t v18 = v15;
    do
    {
      uint64_t v19 = (uint16x8_t *)(a1 + v18);
      v19[128] = vmovl_u8(*(uint8x8_t *)&v14[v17]);
      *uint64_t v19 = vmovl_u8(*(uint8x8_t *)&v16[v17]);
      v17 += 8;
      v18 += 16;
    }
    while (v17 != 128);
    ++v13;
    v14 += 128;
    v15 += 256;
    v16 += 128;
  }
  while (v13 != 8);
  uint64_t v20 = 0;
  uint64_t v21 = a1 + 22016;
  uint64_t v22 = (char *)&unk_1BBB8D288;
  do
  {
    for (uint64_t i = 0; i != 6; ++i)
      *(_WORD *)(v21 + 2 * i) = v22[i];
    ++v20;
    v21 += 16;
    v22 += 8;
  }
  while (v20 != 16);
  sub_1BBB389D4(a1);
  return a1;
}

void sub_1BBB38DE4(uint64_t a1, unsigned int *a2, int a3)
{
  unsigned int v4 = *a2;
  *(_DWORD *)(a1 + 22384) = *a2;
  if (*a2 <= 7 && ((1 << *a2) & 0xC1) != 0 || v4 == 11)
  {
LABEL_9:
    int v7 = 3;
LABEL_10:
    *(_DWORD *)(a1 + 22388) = v7;
    int v8 = 6;
  }
  else
  {
    switch(*a2)
    {
      case 1u:
        int v7 = 2;
        goto LABEL_10;
      case 2u:
      case 5u:
      case 8u:
        *(_DWORD *)(a1 + 22388) = 3;
        goto LABEL_55;
      case 3u:
        goto LABEL_9;
      case 9u:
        *(_DWORD *)(a1 + 22388) = 2;
        int v8 = 8;
        break;
      case 0xCu:
        if (a2[1] < 8) {
          goto LABEL_12;
        }
LABEL_55:
        int v8 = 7;
        break;
      default:
        goto LABEL_12;
    }
  }
  a2[1] = v8;
LABEL_12:
  int v9 = *(_DWORD *)(a1 + 22368);
  int v10 = *(_DWORD *)(a1 + 22376);
  if (v9 >= v10) {
    int v11 = *(_DWORD *)(a1 + 22376);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 22368);
  }
  if (v9 <= v10) {
    int v12 = *(_DWORD *)(a1 + 22376);
  }
  else {
    int v12 = *(_DWORD *)(a1 + 22368);
  }
  if (v11)
  {
    do
    {
      int v13 = v11;
      int v11 = v12 % v11;
      int v12 = v13;
    }
    while (v11);
  }
  else
  {
    int v13 = v12;
  }
  int v14 = *(_DWORD *)(a1 + 22372);
  int v15 = *(_DWORD *)(a1 + 22380);
  if (v13)
  {
    int v16 = v10 / v13;
    int v17 = v9 / v13;
  }
  else
  {
    int v16 = 1;
    int v17 = 1;
  }
  *(_DWORD *)(a1 + 22288) = v16;
  *(_DWORD *)(a1 + 22292) = v17;
  if (v14 >= v15) {
    int v18 = v15;
  }
  else {
    int v18 = v14;
  }
  if (v14 <= v15) {
    int v19 = v15;
  }
  else {
    int v19 = v14;
  }
  if (v18)
  {
    do
    {
      int v20 = v18;
      int v18 = v19 % v18;
      int v19 = v20;
    }
    while (v18);
    goto LABEL_33;
  }
  int v20 = v19;
  if (v19)
  {
LABEL_33:
    int v21 = v15 / v20;
    int v22 = v14 / v20;
    goto LABEL_36;
  }
  int v21 = 1;
  int v22 = 1;
LABEL_36:
  *(_DWORD *)(a1 + 22296) = v21;
  *(_DWORD *)(a1 + 22300) = v22;
  unsigned int v23 = a2[1];
  *(unsigned char *)(a1 + 240) = v23;
  *(_DWORD *)(a1 + 480) = a3;
  if (*(unsigned char *)(a1 + 297)) {
    uint64_t v24 = 16;
  }
  else {
    uint64_t v24 = 8;
  }
  if (*(unsigned char *)(a1 + 297)) {
    uint64_t v25 = 8;
  }
  else {
    uint64_t v25 = 4;
  }
  if (*(_DWORD *)(a1 + 22384) == 12)
  {
    uint64_t v26 = 0;
    uint64_t v27 = a1 + 512;
    uint64_t v28 = a1 + 768;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
        *(_WORD *)(v27 + 2 * i) = *(_DWORD *)(*(void *)(*((void *)a2 + 1) + 8 * v26) + 4 * i);
      for (uint64_t j = 0; j != v25; ++j)
        *(_WORD *)(v28 + 2 * j) = *(_DWORD *)(*(void *)(*((void *)a2 + 2) + 8 * v26) + 4 * j);
      ++v26;
      v27 += 16;
      v28 += 16;
    }
    while (v26 != 16);
  }
  else
  {
    sub_1BBB3904C((_DWORD *)a1, (_WORD *)(a1 + 512), v24, v23);
    char v31 = *(unsigned char *)(a1 + 240);
    sub_1BBB3904C((_DWORD *)a1, (_WORD *)(a1 + 768), v25, v31);
  }
}

void sub_1BBB3904C(_DWORD *a1, _WORD *a2, unsigned int a3, char a4)
{
  v183[240] = *MEMORY[0x1E4F143B8];
  int v7 = a1 + 5592;
  int v8 = a1[5596];
  if ((v8 - 5) < 3) {
    goto LABEL_4;
  }
  if (v8 == 8)
  {
    unsigned int v18 = (a1[5592] << 16) / a1[5594];
    unsigned int v19 = (a1[5593] << 16) / a1[5595];
    if (v18 >= 0x2AAAB) {
      int v20 = v18 <= 0x40000;
    }
    else {
      int v20 = 2;
    }
    if (v18 > 0x20000) {
      int v21 = v20;
    }
    else {
      int v21 = 3;
    }
    if (v18 >= 0x1999A) {
      int v22 = v21;
    }
    else {
      int v22 = 4;
    }
    if (v18 >= 0x15556) {
      int v23 = v22;
    }
    else {
      int v23 = 5;
    }
    if (v18 >= 0x12493) {
      int v24 = v23;
    }
    else {
      int v24 = 6;
    }
    if ((int)v18 > 0x10000) {
      unsigned int v16 = v24;
    }
    else {
      unsigned int v16 = 7;
    }
    if (v19 >= 0x2AAAB) {
      int v25 = v19 <= 0x40000;
    }
    else {
      int v25 = 2;
    }
    if (v19 > 0x20000) {
      int v26 = v25;
    }
    else {
      int v26 = 3;
    }
    if (v19 >= 0x1999A) {
      int v27 = v26;
    }
    else {
      int v27 = 4;
    }
    if (v19 >= 0x15556) {
      int v28 = v27;
    }
    else {
      int v28 = 5;
    }
    if (v19 >= 0x12493) {
      int v29 = v28;
    }
    else {
      int v29 = 6;
    }
    if ((int)v19 >= 65537) {
      unsigned int v17 = v29;
    }
    else {
      unsigned int v17 = 7;
    }
    goto LABEL_72;
  }
  if (v8 == 11)
  {
LABEL_4:
    int v9 = (a1[5594] << 16) / a1[5592];
    int v10 = (a1[5595] << 16) / a1[5593];
    if (v9 < 20480) {
      int v11 = v9 >= 12288;
    }
    else {
      int v11 = 2;
    }
    if (v9 < 28672) {
      int v12 = v11;
    }
    else {
      int v12 = 3;
    }
    if (v9 < 36864) {
      int v13 = v12;
    }
    else {
      int v13 = 4;
    }
    if (v9 < 45056) {
      int v14 = v13;
    }
    else {
      int v14 = 5;
    }
    if (v9 < 53248) {
      int v15 = v14;
    }
    else {
      int v15 = 6;
    }
    if (v9 < 61440) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = 7;
    }
    if (v10 < 61440)
    {
      if (v10 < 53248)
      {
        if (v10 < 45056)
        {
          if (v10 < 36864)
          {
            if (v10 < 28672)
            {
              if (v10 < 20480) {
                unsigned int v17 = v10 >= 12288;
              }
              else {
                unsigned int v17 = 2;
              }
            }
            else
            {
              unsigned int v17 = 3;
            }
          }
          else
          {
            unsigned int v17 = 4;
          }
        }
        else
        {
          unsigned int v17 = 5;
        }
      }
      else
      {
        unsigned int v17 = 6;
      }
    }
    else
    {
      unsigned int v17 = 7;
    }
  }
  else
  {
    unsigned int v17 = 0;
    unsigned int v16 = 0;
  }
LABEL_72:
  unsigned int v30 = a1[120];
  if (v30 != 0 && v30 < 0xFFFFFFF0) {
    int v31 = v30 + 16;
  }
  else {
    int v31 = 16;
  }
  bzero(v181, 16 * a3);
  double v32 = (double)v31;
  int v33 = 16 * a3 - 1;
  int v34 = 16 * a3 - 2;
  double v35 = (double)v34 * 0.5;
  double v156 = (double)v31;
  switch(v8)
  {
    case 0:
    case 1:
      unint64_t v36 = 0;
      if (v33 <= 1) {
        uint64_t v37 = 1;
      }
      else {
        uint64_t v37 = v33;
      }
      float64x2_t v149 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      uint64x2_t v151 = (uint64x2_t)vdupq_n_s64(v37 - 1);
      double v154 = (double)(int)v7[5];
      float64x2_t v145 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v154, 0);
      float64x2_t v147 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0);
      int32x2_t v38 = (int32x2_t)0x100000000;
      float64x2_t v143 = (float64x2_t)vdupq_n_s64(0x400921FB4D12D84AuLL);
      char v39 = a4;
      do
      {
        int32x2_t v164 = vmovn_s64((int64x2_t)vcgeq_u64(v151, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v36), (int8x16_t)xmmword_1BBB6F620)));
        v40.i64[0] = v38.i32[0];
        v40.i64[1] = v38.i32[1];
        float64x2_t v173 = vmulq_f64(vsubq_f64(vcvtq_f64_s64(v40), v149), v143);
        float64x2_t __xc = vdivq_f64(v173, v147);
        long double v168 = sin(__xc.f64[1]);
        v41.f64[0] = sin(__xc.f64[0]);
        v41.f64[1] = v168;
        float64x2_t v169 = v41;
        float64x2_t v159 = vdivq_f64(__xc, v145);
        __xc.f64[0] = sin(v159.f64[1]);
        v42.f64[0] = sin(v159.f64[0]);
        v42.f64[1] = __xc.f64[0];
        if (v164.i8[0]) {
          v181[v36 + 1] = v156 * vdivq_f64(v169, v173).f64[0] * v154 * (v156 * vdivq_f64(v42, v173).f64[0]);
        }
        if (v164.i8[4])
        {
          float64x2_t v43 = vmulq_n_f64(vdivq_f64((float64x2_t)vzip2q_s64((int64x2_t)v169, (int64x2_t)v42), (float64x2_t)vdupq_laneq_s64((int64x2_t)v173, 1)), v156);
          v181[v36 + 2] = vmuld_lane_f64(v154 * v43.f64[0], v43, 1);
        }
        int32x2_t v38 = vadd_s32(v38, (int32x2_t)0x200000002);
        unint64_t v44 = v36 + 1;
        v36 += 2;
      }
      while (v44 != v37);
      goto LABEL_139;
    case 2:
      unint64_t v45 = 0;
      if (v33 <= 1) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = v33;
      }
      float64x2_t v160 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      uint64x2_t v165 = (uint64x2_t)vdupq_n_s64(v46 - 1);
      int32x2_t v47 = vdup_n_s32(v30 == 0);
      v48.i64[0] = v47.u32[0];
      v48.i64[1] = v47.u32[1];
      int8x16_t v49 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v48, 0x3FuLL));
      int32x2_t v50 = vdup_n_s32(8 * v31);
      v48.i64[0] = v50.i32[0];
      v48.i64[1] = v50.i32[1];
      float64x2_t v157 = (float64x2_t)vbslq_s8(v49, (int8x16_t)vdupq_n_s64(0x4040000000000000uLL), (int8x16_t)vcvtq_f64_s64(v48));
      int32x2_t v51 = (int32x2_t)0x100000000;
      char v39 = a4;
      do
      {
        int32x2_t __x = vmovn_s64((int64x2_t)vcgeq_u64(v165, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v45), (int8x16_t)xmmword_1BBB6F620)));
        v52.i64[0] = v51.i32[0];
        v52.i64[1] = v51.i32[1];
        float64x2_t v53 = vsubq_f64(vcvtq_f64_s64(v52), v160);
        float64x2_t v170 = vdivq_f64(vmulq_f64(v53, vnegq_f64(v53)), v157);
        long double v174 = exp(v170.f64[1]);
        double v54 = exp(v170.f64[0]);
        if (__x.i8[0]) {
          v181[v45 + 1] = v54;
        }
        if (__x.i8[4]) {
          v181[v45 + 2] = v174;
        }
        int32x2_t v51 = vadd_s32(v51, (int32x2_t)0x200000002);
        unint64_t v55 = v45 + 1;
        v45 += 2;
      }
      while (v55 != v46);
      goto LABEL_139;
    case 3:
      unint64_t v56 = 0;
      if (v33 <= 1) {
        uint64_t v57 = 1;
      }
      else {
        uint64_t v57 = v33;
      }
      float64x2_t __xa = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      float64x2_t v148 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0);
      uint64x2_t v150 = (uint64x2_t)vdupq_n_s64(v57 - 1);
      int32x2_t v58 = (int32x2_t)0x100000000;
      float64x2_t v175 = (float64x2_t)vdupq_n_s64(0x400921FB4D12D84AuLL);
      float64x2_t v146 = (float64x2_t)vdupq_n_s64(0xBFDD70A3D70A3D71);
      float64x2_t v144 = (float64x2_t)vdupq_n_s64(0x3FE147AE147AE148uLL);
      char v39 = a4;
      do
      {
        int32x2_t v166 = vmovn_s64((int64x2_t)vcgeq_u64(v150, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v56), (int8x16_t)xmmword_1BBB6F620)));
        v59.i64[0] = v58.i32[0];
        v59.i64[1] = v58.i32[1];
        float64x2_t v155 = vcvtq_f64_s64(v59);
        float64x2_t v171 = vmulq_f64(vsubq_f64(v155, __xa), v175);
        float64x2_t v152 = vdivq_f64(v171, v148);
        long double v161 = sin(v152.f64[1]);
        v60.f64[0] = sin(v152.f64[0]);
        v60.f64[1] = v161;
        float64x2_t v162 = v60;
        float64x2_t v153 = vdivq_f64(vmulq_f64(v155, v175), __xa);
        v155.f64[0] = cos(v153.f64[1]);
        v61.f64[0] = cos(v153.f64[0]);
        v61.f64[1] = v155.f64[0];
        float64x2_t v62 = vmlaq_f64(v144, v146, v61);
        float64x2_t v63 = vdivq_f64(v162, v171);
        if (v166.i8[0]) {
          *(double *)((char *)v181 + ((8 * v56) | 8)) = v156 * v63.f64[0] * v62.f64[0];
        }
        if (v166.i8[4]) {
          v181[v56 + 2] = vmuld_lane_f64(vmuld_lane_f64(v156, v63, 1), v62, 1);
        }
        int32x2_t v58 = vadd_s32(v58, (int32x2_t)0x200000002);
        uint64_t v64 = v56 | 1;
        v56 += 2;
      }
      while (v64 != v57);
      goto LABEL_139;
    case 5:
      if (a3 == 4)
      {
        uint64_t v136 = 0;
        unint64_t v137 = (unint64_t)&a1[64 * (unint64_t)v17 + 3456];
        do
        {
          for (uint64_t i = 0; i != 4; ++i)
            a2[i] = *(_WORD *)(v137 + i * 2);
          ++v136;
          a2 += 8;
          v137 += 16;
        }
        while (v136 != 16);
      }
      else if (a3 == 8)
      {
        uint64_t v68 = 0;
        unint64_t v69 = (unint64_t)&a1[64 * (unint64_t)v16 + 3968];
        do
        {
          for (uint64_t j = 0; j != 8; ++j)
            a2[j] = *(_WORD *)(v69 + j * 2);
          ++v68;
          a2 += 8;
          v69 += 16;
        }
        while (v68 != 16);
      }
      return;
    case 6:
LABEL_107:
      if (a3 == 4)
      {
        uint64_t v133 = 0;
        unint64_t v134 = (unint64_t)&a1[64 * (unint64_t)v17 + 2432];
        do
        {
          for (uint64_t k = 0; k != 4; ++k)
            a2[k] = *(_WORD *)(v134 + k * 2);
          ++v133;
          a2 += 8;
          v134 += 16;
        }
        while (v133 != 16);
      }
      else if (a3 == 8)
      {
        uint64_t v65 = 0;
        unint64_t v66 = (unint64_t)&a1[64 * (unint64_t)v16 + 2944];
        do
        {
          for (uint64_t m = 0; m != 8; ++m)
            a2[m] = *(_WORD *)(v66 + m * 2);
          ++v65;
          a2 += 8;
          v66 += 16;
        }
        while (v65 != 16);
      }
      return;
    case 8:
      if (a3 == 4)
      {
        uint64_t v139 = 0;
        unint64_t v140 = (unint64_t)&a1[64 * (unint64_t)v17 + 4480];
        do
        {
          for (uint64_t n = 0; n != 4; ++n)
            a2[n] = *(_WORD *)(v140 + n * 2);
          ++v139;
          a2 += 8;
          v140 += 16;
        }
        while (v139 != 16);
      }
      else if (a3 == 8)
      {
        uint64_t v71 = 0;
        unint64_t v72 = (unint64_t)&a1[64 * (unint64_t)v16 + 4992];
        do
        {
          for (iuint64_t i = 0; ii != 8; ++ii)
            a2[ii] = *(_WORD *)(v72 + ii * 2);
          ++v71;
          a2 += 8;
          v72 += 16;
        }
        while (v71 != 16);
      }
      return;
    case 9:
      unint64_t v74 = 0;
      signed int v75 = 8 * v30 + 16;
      if (v31 > v75) {
        signed int v75 = v31;
      }
      if (v33 <= 1) {
        uint64_t v76 = 1;
      }
      else {
        uint64_t v76 = v33;
      }
      float64x2_t v163 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      uint64x2_t v167 = (uint64x2_t)vdupq_n_s64(v76 - 1);
      uint32x2_t v77 = vshl_u32((uint32x2_t)vdup_n_s32(v75), (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(8 * v30 == 0), 0x1FuLL)), (int8x8_t)0x100000001, (int8x8_t)0x300000003));
      v78.i64[0] = v77.i32[0];
      v78.i64[1] = v77.i32[1];
      float64x2_t v158 = vcvtq_f64_s64(v78);
      int32x2_t v79 = (int32x2_t)0x100000000;
      char v39 = a4;
      do
      {
        int32x2_t __xb = vmovn_s64((int64x2_t)vcgeq_u64(v167, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v74), (int8x16_t)xmmword_1BBB6F620)));
        v80.i64[0] = v79.i32[0];
        v80.i64[1] = v79.i32[1];
        float64x2_t v81 = vsubq_f64(vcvtq_f64_s64(v80), v163);
        float64x2_t v172 = vdivq_f64(vmulq_f64(v81, vnegq_f64(v81)), v158);
        long double v176 = exp(v172.f64[1]);
        double v82 = exp(v172.f64[0]);
        if (__xb.i8[0]) {
          v181[v74 + 1] = v82;
        }
        if (__xb.i8[4]) {
          v181[v74 + 2] = v176;
        }
        int32x2_t v79 = vadd_s32(v79, (int32x2_t)0x200000002);
        unint64_t v83 = v74 + 1;
        v74 += 2;
      }
      while (v83 != v76);
LABEL_139:
      v181[(v34 >> 1) + 1] = 1.0;
      int v84 = 1 << v39;
      uint64_t v85 = a3 - 1;
      uint64_t v86 = (double *)v183;
      double v87 = 0.0;
      uint64_t v88 = v85;
      do
      {
        double v89 = *v86;
        v86 += 16;
        double v87 = v87 + v89;
        --v88;
      }
      while (v88);
      double v90 = (double)v84;
      int v91 = (double *)v183;
      BOOL v92 = a2;
      do
      {
        double v93 = *v91;
        v91 += 16;
        double v94 = v93 * v90 / v87;
        if (v93 <= 0.0) {
          double v95 = -0.5;
        }
        else {
          double v95 = 0.5;
        }
        *v92++ = (int)(v94 + v95);
        --v85;
      }
      while (v85);
      __int16 v96 = 0;
      uint64_t v97 = a3 - 1;
      a2[v97] = 0;
      uint64_t v98 = a2;
      uint64_t v99 = a3;
      do
      {
        __int16 v100 = *v98++;
        v96 += v100;
        --v99;
      }
      while (v99);
      uint64_t v101 = (unsigned __int16)(v84 - v96);
      uint64_t v102 = a3 >> 1;
      uint64_t v103 = (v102 - 1);
      a2[v103] += v101;
      char v104 = (double *)&v182;
      char v105 = a2 + 8;
      for (juint64_t j = 1; jj != 16; ++jj)
      {
        double v107 = 0.0;
        uint64_t v108 = v104;
        uint64_t v109 = a3 + 1 - 1;
        do
        {
          double v110 = *v108;
          v108 += 16;
          double v107 = v107 + v110;
          --v109;
        }
        while (v109);
        uint64_t v111 = 0;
        uint64_t v112 = v105;
        uint64_t v113 = a3 + 1 - 1;
        do
        {
          double v114 = v104[v111];
          double v115 = v114 * v90 / v107;
          if (v114 <= 0.0) {
            double v116 = -0.5;
          }
          else {
            double v116 = 0.5;
          }
          *v112++ = (int)(v115 + v116);
          v111 += 16;
          --v113;
        }
        while (v113);
        uint64_t v117 = 0;
        int v118 = 0;
        do
        {
          if (v118 <= (__int16)v105[v117]) {
            int v118 = (__int16)v105[v117];
          }
          ++v117;
        }
        while (a3 != v117);
        if (v118 <= 100)
        {
          uint64_t v128 = 0;
          int v125 = 0;
          do
            v125 += (__int16)v105[v128++];
          while (a3 != v128);
          if (jj == 8)
          {
            BOOL v122 = __OFSUB__(v84, v125);
            int v129 = v84 - v125;
            if (v129 < 0 != v122) {
              int v130 = v129 + 1;
            }
            else {
              int v130 = v129;
            }
            int v125 = v130 >> 1;
            a2[v102 + 64] += v130 >> 1;
            float v127 = &a2[v103 + 64];
          }
          else
          {
            LOWORD(v125) = v84 - v125;
            if (jj <= 7) {
              float v127 = &a2[8 * jj + v97];
            }
            else {
              float v127 = &a2[8 * jj];
            }
          }
        }
        else
        {
          uint64_t v119 = 0;
          do
          {
            v105[v119] = (int)(100.0 / (double)v118 * (double)(__int16)v105[v119]);
            ++v119;
          }
          while (a3 + 1 - 1 != v119);
          uint64_t v120 = 0;
          int v121 = 0;
          do
            v121 += (__int16)v105[v120++];
          while (a3 != v120);
          BOOL v122 = __OFSUB__(v84, v121);
          int v123 = v84 - v121;
          if (v123 < 0 != v122) {
            int v124 = v123 + 1;
          }
          else {
            int v124 = v123;
          }
          int v125 = v124 >> 1;
          uint64_t v126 = &a2[8 * jj];
          v126[v102] += v124 >> 1;
          float v127 = &v126[v103];
        }
        uint64_t v131 = 0;
        __int16 v132 = 0;
        *v127 += v125;
        do
          v132 += v105[v131++];
        while (a3 != v131);
        a2[8 * jj + v103] += v84 - v132;
        --v104;
        v105 += 8;
      }
      return;
    default:
      switch(v8)
      {
        case 4:
        case 10:
          return;
        case 7:
        case 11:
          goto LABEL_107;
        default:
          puts("Wrong filter type!");
          exit(0);
      }
  }
}

BOOL sub_1BBB39D1C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, _DWORD *a11)
{
  int v11 = (unsigned int *)(a1 + 22304);
  unsigned int v12 = *(_DWORD *)(a1 + 22368);
  if (v12 < a2
    || *(_DWORD *)(a1 + 22372) < a3
    || *v11 < a4
    || *(_DWORD *)(a1 + 22376) < a5
    || *(_DWORD *)(a1 + 22380) < a6
    || *(_DWORD *)(a1 + 22312) < a7)
  {
    *(unsigned char *)(a1 + 488) = 1;
  }
  return v12 != a2
      || *(_DWORD *)(a1 + 22372) != a3
      || *v11 != a4
      || *(_DWORD *)(a1 + 22376) != a5
      || *(_DWORD *)(a1 + 22380) != a6
      || *(_DWORD *)(a1 + 22312) != a7
      || *(_DWORD *)(a1 + 22436) != a8
      || *(_DWORD *)(a1 + 480) != a9
      || *(_DWORD *)(a1 + 22384) != *a11
      || *(_DWORD *)(a1 + 22432) != a10
      || a11[1] != *(unsigned __int8 *)(a1 + 240);
}

_WORD *sub_1BBB39E18(uint64_t a1, int a2, void *a3, int a4, unsigned int a5)
{
  int v5 = (unsigned char *)(a1 + 22320);
  char v6 = *(unsigned char *)(a1 + 240);
  *(_DWORD *)(a1 + 22432) = a2;
  *(_DWORD *)(a1 + 22436) = a4;
  if (a5 >= 9) {
    unsigned int v7 = 9;
  }
  else {
    unsigned int v7 = a5;
  }
  int v8 = 16;
  switch(a2)
  {
    case 0:
      *(_WORD *)(a1 + 22396) = -(__int16)a4;
      *(_WORD *)(a1 + 22398) = 2 * a4 + 16;
      *(_WORD *)(a1 + 22400) = -(__int16)a4;
      *(_WORD *)(a1 + 22414) = -(__int16)a4;
      *(_WORD *)(a1 + 22416) = 2 * a4 + 16;
      *(_WORD *)(a1 + 22418) = -(__int16)a4;
      unsigned int v7 = 3;
      goto LABEL_11;
    case 1:
      *(_WORD *)(a1 + 22396) = -(__int16)a4;
      *(_WORD *)(a1 + 22398) = -2 * a4;
      *(_WORD *)(a1 + 22400) = 6 * a4 + 32;
      *(_WORD *)(a1 + 22402) = -2 * a4;
      *(_WORD *)(a1 + 22404) = -(__int16)a4;
      *(_WORD *)(a1 + 22414) = -(__int16)a4;
      *(_WORD *)(a1 + 22416) = -2 * a4;
      *(_WORD *)(a1 + 22418) = 6 * a4 + 32;
      *(_WORD *)(a1 + 22420) = -2 * a4;
      *(_WORD *)(a1 + 22422) = -(__int16)a4;
      unsigned int v7 = 5;
      int v8 = 32;
      break;
    case 2:
      *(_WORD *)(a1 + 22396) = -2 * a4;
      *(_WORD *)(a1 + 22398) = 16;
      *(_WORD *)(a1 + 22400) = 2 * a4;
      *(_WORD *)(a1 + 22414) = -2 * a4;
      *(_WORD *)(a1 + 22416) = 16;
      *(_WORD *)(a1 + 22418) = 2 * a4;
      unsigned int v7 = 3;
      break;
    case 4:
      if (v7)
      {
        uint64_t v9 = 0;
        int v10 = (_WORD *)(a1 + 22414);
        do
        {
          *(v10 - 9) = *(_DWORD *)(*a3 + v9);
          *v10++ = *(_DWORD *)(a3[1] + v9);
          v9 += 4;
        }
        while (4 * v7 != v9);
LABEL_11:
        int v8 = 16;
      }
      break;
    default:
      break;
  }
  int v11 = 1 << v6;
  unsigned int v12 = v7 >> 1;
  if (*(_DWORD *)(a1 + 22384) == 5)
  {
    unint64_t v13 = 0;
    unsigned int v14 = v8 >> 1;
    uint64_t v15 = a1 + 1024;
    do
    {
      uint64_t v16 = 0;
      int v17 = 0;
      int v18 = -v12;
      do
      {
        int v19 = 0;
        if (v7)
        {
          int v20 = v18;
          int v21 = (__int16 *)(a1 + 22396);
          uint64_t v22 = v7;
          do
          {
            int v23 = v20 & ~(v20 >> 31);
            if (v23 >= 7) {
              int v23 = 7;
            }
            int v24 = *v21++;
            v19 += v24 * *(__int16 *)(a1 + 16 * v13 + 2 * v23 + 512);
            ++v20;
            --v22;
          }
          while (v22);
        }
        int v25 = (int)(v19 + v14) / v8;
        *(_WORD *)(a1 + 16 * v13 + 2 * v16 + 1024) = v25;
        v17 += (__int16)v25;
        ++v16;
        ++v18;
      }
      while (v16 != 8);
      uint64_t v26 = 0;
      __int16 v27 = 0;
      int v28 = 0;
      int v29 = 0;
      if (v17 >= 0) {
        int v30 = v17;
      }
      else {
        int v30 = v17 + 1;
      }
      int v31 = v30 >> 1;
      do
      {
        int v32 = ((*(__int16 *)(v15 + 2 * v26) << v6) + v31) / v17;
        *(_WORD *)(v15 + 2 * v26) = v32;
        BOOL v33 = v29 < (__int16)v32;
        if (v29 <= (__int16)v32) {
          int v29 = (__int16)v32;
        }
        if (v33) {
          int v28 = v26;
        }
        v27 += v32;
        ++v26;
      }
      while (v26 != 8);
      uint64_t v34 = a1 + 16 * v13;
      *(_WORD *)(v34 + 2 * v28 + 1024) += v11 - v27;
      if (v13 <= 7) {
        *(_OWORD *)(v34 + 512) = *(_OWORD *)(v34 + 1024);
      }
      ++v13;
      v15 += 16;
    }
    while (v13 != 16);
    unint64_t v35 = 0;
    int v36 = -v12;
    uint64_t v37 = a1 + 1280;
    do
    {
      uint64_t v38 = 0;
      int v39 = 0;
      int v40 = v36;
      do
      {
        int v41 = 0;
        if (v7)
        {
          int v42 = v40;
          float64x2_t v43 = (__int16 *)(a1 + 22414);
          uint64_t v44 = v7;
          do
          {
            int v45 = v42 & ~(v42 >> 31);
            if (v45 >= 3) {
              int v45 = 3;
            }
            int v46 = *v43++;
            v41 += v46 * *(__int16 *)(a1 + 16 * v35 + 2 * v45 + 768);
            ++v42;
            --v44;
          }
          while (v44);
        }
        int v47 = (int)(v41 + v14) / v8;
        *(_WORD *)(a1 + 16 * v35 + 2 * v38 + 1280) = v47;
        v39 += (__int16)v47;
        ++v38;
        ++v40;
      }
      while (v38 != 4);
      uint64_t v48 = 0;
      __int16 v49 = 0;
      int v50 = 0;
      int v51 = 0;
      if (v39 >= 0) {
        int v52 = v39;
      }
      else {
        int v52 = v39 + 1;
      }
      int v53 = v52 >> 1;
      do
      {
        int v54 = ((*(__int16 *)(v37 + 2 * v48) << v6) + v53) / v39;
        *(_WORD *)(v37 + 2 * v48) = v54;
        BOOL v55 = v51 < (__int16)v54;
        if (v51 <= (__int16)v54) {
          int v51 = (__int16)v54;
        }
        if (v55) {
          int v50 = v48;
        }
        v49 += v54;
        ++v48;
      }
      while (v48 != 4);
      uint64_t v56 = a1 + 16 * v35;
      *(_WORD *)(v56 + 2 * v50 + 1280) += v11 - v49;
      if (v35 <= 7) {
        *(void *)(v56 + 768) = *(void *)(v56 + 1280);
      }
      ++v35;
      v37 += 16;
    }
    while (v35 != 16);
  }
  else if (*(_DWORD *)(a1 + 22436))
  {
    unint64_t v57 = 0;
    unsigned int v58 = v8 >> 1;
    uint64_t v59 = a1;
    do
    {
      uint64_t v60 = 0;
      int v61 = 0;
      int v62 = -v12;
      do
      {
        int v63 = 0;
        if (!v7) {
          goto LABEL_63;
        }
        int v64 = v62;
        uint64_t v65 = (__int16 *)(a1 + 22396);
        uint64_t v66 = v7;
        do
        {
          int v67 = v64 & ~(v64 >> 31);
          if (v67 >= 7) {
            int v67 = 7;
          }
          int v68 = *v65++;
          v63 += v68 * *(__int16 *)(a1 + 16 * v57 + 2 * v67 + 512);
          ++v64;
          --v66;
        }
        while (v66);
        if (v63 < 0) {
          int v69 = v63 - v58;
        }
        else {
LABEL_63:
        }
          int v69 = v63 + v58;
        int v70 = v69 / v8;
        *(_WORD *)(a1 + 16 * v57 + 2 * v60 + 1024) = v70;
        v61 += (__int16)v70;
        ++v60;
        ++v62;
      }
      while (v60 != 8);
      if (v61 == v11)
      {
        *(_OWORD *)(a1 + 16 * v57 + 512) = *(_OWORD *)(a1 + 16 * v57 + 1024);
      }
      else
      {
        uint64_t v71 = 0;
        int v72 = 0;
        if (v61 >= 0) {
          int v73 = v61;
        }
        else {
          int v73 = v61 + 1;
        }
        int v74 = v73 >> 1;
        do
        {
          int v75 = ((*(__int16 *)(v59 + v71 + 1024) << v6) + v74) / v61;
          *(_WORD *)(v59 + v71 + 512) = v75;
          v72 += (__int16)v75;
          v71 += 2;
        }
        while (v71 != 16);
        int v76 = v11 - v72;
        if (v57 > 7)
        {
          if (v57 == 8)
          {
            if (v76 >= 0) {
              int v78 = v11 - v72;
            }
            else {
              int v78 = v76 + 1;
            }
            int v79 = v78 >> 1;
            *(_WORD *)(a1 + 646) += v76 - (v78 >> 1);
            uint32x2_t v77 = (_WORD *)(a1 + 648);
            LOWORD(v76) = v79;
          }
          else
          {
            uint32x2_t v77 = (_WORD *)(a1 + 16 * v57 + 520);
          }
        }
        else
        {
          uint32x2_t v77 = (_WORD *)(a1 + 16 * v57 + 518);
        }
        *v77 += v76;
      }
      ++v57;
      v59 += 16;
    }
    while (v57 != 16);
    unint64_t v80 = 0;
    int v81 = -v12;
    uint64_t v82 = a1;
    do
    {
      uint64_t v83 = 0;
      int v84 = 0;
      int v85 = v81;
      do
      {
        int v86 = 0;
        if (!v7) {
          goto LABEL_91;
        }
        int v87 = v85;
        uint64_t v88 = (__int16 *)(a1 + 22414);
        uint64_t v89 = v7;
        do
        {
          int v90 = v87 & ~(v87 >> 31);
          if (v90 >= 3) {
            int v90 = 3;
          }
          int v91 = *v88++;
          v86 += v91 * *(__int16 *)(a1 + 16 * v80 + 2 * v90 + 768);
          ++v87;
          --v89;
        }
        while (v89);
        if (v86 < 0) {
          int v92 = v86 - v58;
        }
        else {
LABEL_91:
        }
          int v92 = v86 + v58;
        int v93 = v92 / v8;
        *(_WORD *)(a1 + 16 * v80 + 2 * v83 + 1280) = v93;
        v84 += (__int16)v93;
        ++v83;
        ++v85;
      }
      while (v83 != 4);
      if (v84 == v11)
      {
        *(void *)(a1 + 16 * v80 + 768) = *(void *)(a1 + 16 * v80 + 1280);
      }
      else
      {
        uint64_t v94 = 0;
        int v95 = 0;
        if (v84 >= 0) {
          int v96 = v84;
        }
        else {
          int v96 = v84 + 1;
        }
        int v97 = v96 >> 1;
        do
        {
          int v98 = ((*(__int16 *)(v82 + v94 + 1280) << v6) + v97) / v84;
          *(_WORD *)(v82 + v94 + 768) = v98;
          v95 += (__int16)v98;
          v94 += 2;
        }
        while (v94 != 8);
        int v99 = v11 - v95;
        if (v80 > 7)
        {
          if (v80 == 8)
          {
            if (v99 >= 0) {
              int v101 = v11 - v95;
            }
            else {
              int v101 = v99 + 1;
            }
            int v102 = v101 >> 1;
            *(_WORD *)(a1 + 898) += v99 - (v101 >> 1);
            __int16 v100 = (_WORD *)(a1 + 900);
            LOWORD(v99) = v102;
          }
          else
          {
            __int16 v100 = (_WORD *)(a1 + 16 * v80 + 772);
          }
        }
        else
        {
          __int16 v100 = (_WORD *)(a1 + 16 * v80 + 770);
        }
        *v100 += v99;
      }
      ++v80;
      v82 += 16;
    }
    while (v80 != 16);
  }
  uint64_t v103 = 0;
  char v104 = (_WORD *)(a1 + 3584);
  uint64_t v105 = a1 + 768;
  unint64_t v106 = (_WORD *)(a1 + 1536);
  uint64_t v107 = a1 + 512;
  do
  {
    uint64_t v108 = 0;
    uint64_t v109 = v106;
    double v110 = v104;
    do
    {
      uint64_t v111 = 0;
      uint64_t v112 = v110;
      do
      {
        *uint64_t v112 = *(_WORD *)(v105 + v111);
        v112 += 8;
        v111 += 2;
      }
      while (v111 != 8);
      uint64_t v113 = 0;
      uint64_t result = v109;
      do
      {
        *uint64_t result = *(_WORD *)(v107 + v113);
        result += 8;
        v113 += 2;
      }
      while (v113 != 16);
      ++v108;
      ++v110;
      ++v109;
    }
    while (v108 != 8);
    ++v103;
    v104 += 64;
    v105 += 16;
    v106 += 64;
    v107 += 16;
  }
  while (v103 != 16);
  *int v5 = 1;
  return result;
}

void *sub_1BBB3A4FC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 22304);
  if (v2 <= *(_DWORD *)(a1 + 22312)) {
    int v2 = *(_DWORD *)(a1 + 22312);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 22368);
  unsigned int v4 = *(_DWORD *)(a1 + 22380);
  if (v3 <= *(_DWORD *)(a1 + 22376)) {
    unsigned int v3 = *(_DWORD *)(a1 + 22376);
  }
  if (*(_DWORD *)(a1 + 22372) > v4) {
    unsigned int v4 = *(_DWORD *)(a1 + 22372);
  }
  int v5 = 2 * v3;
  if (v5 > v2) {
    int v2 = v5;
  }
  int v6 = v2 + 15;
  unsigned int v7 = v4 + 15;
  if (*(unsigned char *)(a1 + 488))
  {
    int v8 = *(void **)(a1 + 352);
    if (v8)
    {
      free(v8);
      *(void *)(a1 + 352) = 0;
    }
    uint64_t v9 = *(void **)(a1 + 368);
    if (v9)
    {
      free(v9);
      *(void *)(a1 + 368) = 0;
    }
    int v10 = *(void **)(a1 + 272);
    if (v10)
    {
      free(v10);
      *(void *)(a1 + 272) = 0;
    }
    *(unsigned char *)(a1 + 488) = 0;
  }
  unsigned int v11 = v6 & 0xFFFFFFF0;
  unsigned int v12 = v7 & 0xFFFFFFF0;
  if (!*(void *)(a1 + 352))
  {
    int v13 = (2 * v12 + 64) * (v11 + 32);
    if (v13) {
      unsigned int v14 = malloc_type_malloc(2 * v13, 0x4CF1F002uLL);
    }
    else {
      unsigned int v14 = 0;
    }
    *(void *)(a1 + 352) = v14;
  }
  if (!*(void *)(a1 + 368))
  {
    int v15 = (2 * v12 + 64) * (v11 + 32);
    if (v15) {
      uint64_t v16 = malloc_type_malloc(2 * v15, 0x4CF1F002uLL);
    }
    else {
      uint64_t v16 = 0;
    }
    *(void *)(a1 + 368) = v16;
  }
  uint64_t result = *(void **)(a1 + 272);
  if (!result)
  {
    int v18 = (2 * v12 + 64) * (v11 + 32);
    if (v18) {
      uint64_t result = malloc_type_malloc(v18, 0x4CF1F002uLL);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 272) = result;
  }
  *(void *)(a1 + 288) = result;
  if (!*(void *)(a1 + 22456))
  {
    if (v12 * v11) {
      uint64_t result = malloc_type_malloc((uint64_t)(int)(v12 * v11) >> 6, 0x4CF1F002uLL);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 22456) = result;
  }
  if (!*(void *)(a1 + 22464))
  {
    if (v12 * v11) {
      uint64_t result = malloc_type_malloc((uint64_t)(int)(v12 * v11) >> 6, 0x4CF1F002uLL);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 22464) = result;
  }
  if (!*(void *)(a1 + 22488))
  {
    if (v12 * v11) {
      uint64_t result = malloc_type_malloc(4 * ((int)(v12 * v11) >> 6), 0x4CF1F002uLL);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 22488) = result;
  }
  if (!*(void *)(a1 + 22504))
  {
    if (v12 * v11) {
      uint64_t result = malloc_type_malloc(4 * ((int)(v12 * v11) >> 6), 0x4CF1F002uLL);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 22504) = result;
  }
  if (!*(void *)(a1 + 22496))
  {
    if (v12 * v11) {
      uint64_t result = malloc_type_malloc(4 * ((int)(v12 * v11) >> 6), 0x4CF1F002uLL);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 22496) = result;
  }
  return result;
}

void sub_1BBB3A740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v12 = (_DWORD *)(a1 + 22368);
  sub_1BBB3A4FC(a1);
  *(void *)(a1 + 22328) = a2;
  *(void *)(a1 + 22344) = a4;
  *(void *)(a1 + 22336) = a3;
  *(void *)(a1 + 22352) = a5;
  if (v12[2] == *v12 && v12[3] == v12[1])
  {
    int v18 = *(_DWORD *)(a1 + 480);
    BOOL v19 = v18 == 0;
    BOOL v20 = v18 != 0;
  }
  else
  {
    BOOL v19 = 0;
    BOOL v20 = 1;
  }
  if (*(unsigned char *)(a1 + 246))
  {
    int v21 = *(void (**)(void *))a1;
    uint64_t v22 = *(void *)(a1 + 8);
LABEL_9:
    int v23 = (void *)(a1 + (v22 >> 1));
    if (v22) {
      int v21 = *(void (**)(void *))(*v23 + v21);
    }
    v21(v23);
    return;
  }
  if (v12[4] == 10)
  {
    int v21 = *(void (**)(void *))(a1 + 176);
    uint64_t v22 = *(void *)(a1 + 184);
    goto LABEL_9;
  }
  if (!a6)
  {
    if (v20)
    {
      if (*(unsigned char *)(a1 + 312))
      {
        int v21 = *(void (**)(void *))(a1 + 112);
        uint64_t v22 = *(void *)(a1 + 120);
      }
      else
      {
        int v21 = *(void (**)(void *))(a1 + 48);
        uint64_t v22 = *(void *)(a1 + 56);
      }
    }
    else
    {
      if (*(int *)(a1 + 492) < 1) {
        return;
      }
      int v21 = *(void (**)(void *))(a1 + 144);
      uint64_t v22 = *(void *)(a1 + 152);
    }
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 243) && *(unsigned char *)(a1 + 242))
  {
    if (*(unsigned char *)(a1 + 312))
    {
      int v24 = *(void (**)(void *))(a1 + 192);
      uint64_t v25 = *(void *)(a1 + 200);
    }
    else
    {
      int v24 = *(void (**)(void *))(a1 + 128);
      uint64_t v25 = *(void *)(a1 + 136);
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 312)) {
      goto LABEL_30;
    }
    int v24 = *(void (**)(void *))(a1 + 96);
    uint64_t v25 = *(void *)(a1 + 104);
  }
  uint64_t v26 = (void *)(a1 + (v25 >> 1));
  if (v25) {
    int v24 = *(void (**)(void *))(*v26 + v24);
  }
  v24(v26);
LABEL_30:
  if (*(unsigned char *)(a1 + 243) || *(unsigned char *)(a1 + 242)) {
    return;
  }
  char v27 = *(unsigned char *)(a1 + 312) || v19;
  if (v27) {
    return;
  }
  int v28 = v12[4];
  if ((v28 - 5) < 2)
  {
    int v21 = *(void (**)(void *))(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 40);
    goto LABEL_9;
  }
  if (v28 != 4)
  {
    if (v28 == 9)
    {
      int v21 = *(void (**)(void *))(a1 + 160);
      uint64_t v22 = *(void *)(a1 + 168);
    }
    else
    {
      int v21 = *(void (**)(void *))(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
    }
    goto LABEL_9;
  }

  sub_1BBB10188(a1, v13, v14, v15, v16, v17);
}

uint64_t sub_1BBB3A954()
{
  io_registry_entry_t v0 = IORegistryEntryFromPath(*MEMORY[0x1E4F2EF00], "IODeviceTree:/arm-io");
  if (v0)
  {
    io_object_t v1 = v0;
    CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v0, @"compatible", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (CFProperty)
    {
      CFDataRef v3 = CFProperty;
      CFTypeID v4 = CFGetTypeID(CFProperty);
      if (v4 != CFDataGetTypeID())
      {
        uint64_t v7 = 0;
        goto LABEL_124;
      }
      unint64_t Length = CFDataGetLength(v3);
      BytePtr = CFDataGetBytePtr(v3);
      if ((uint64_t)Length >= 11)
      {
        if (*BytePtr != 97)
        {
          if (Length > 0xD) {
            goto LABEL_120;
          }
          goto LABEL_123;
        }
        if (BytePtr[1] != 114)
        {
          if (Length >= 0xC && Length > 0xD) {
            goto LABEL_120;
          }
          goto LABEL_123;
        }
        if (BytePtr[2] == 109 && BytePtr[3] == 45 && BytePtr[4] == 105)
        {
          if (BytePtr[5] == 111
            && BytePtr[6] == 44
            && BytePtr[7] == 116
            && BytePtr[8] == 55
            && BytePtr[9] == 48
            && BytePtr[10] == 48)
          {
            uint64_t v7 = 7;
LABEL_124:
            IOObjectRelease(v1);
            CFRelease(v3);
            return v7;
          }
          if (BytePtr[4] == 105
            && BytePtr[5] == 111
            && BytePtr[6] == 44
            && BytePtr[7] == 115
            && BytePtr[8] == 56
            && BytePtr[9] == 48
            && BytePtr[10] == 48)
          {
            uint64_t v7 = 8;
            goto LABEL_124;
          }
        }
        if (Length <= 0xB) {
          goto LABEL_123;
        }
        if (BytePtr[2] == 109 && BytePtr[3] == 45 && BytePtr[4] == 105)
        {
          if (BytePtr[5] == 111
            && BytePtr[6] == 44
            && BytePtr[7] == 116
            && BytePtr[8] == 56
            && BytePtr[9] == 48
            && BytePtr[10] == 49
            && BytePtr[11] - 48 < 3)
          {
            uint64_t v7 = 9;
            goto LABEL_124;
          }
          if (BytePtr[4] == 105)
          {
            if (BytePtr[5] == 111
              && BytePtr[6] == 44
              && BytePtr[7] == 116
              && BytePtr[8] == 56
              && BytePtr[9] == 48
              && BytePtr[10] == 49
              && BytePtr[11] == 53)
            {
              uint64_t v7 = 10;
              goto LABEL_124;
            }
            if (BytePtr[4] == 105)
            {
              if (BytePtr[5] == 111
                && BytePtr[6] == 44
                && BytePtr[7] == 116
                && BytePtr[8] == 56
                && BytePtr[9] == 48
                && BytePtr[10] == 50)
              {
                int v9 = BytePtr[11];
                uint64_t v7 = 11;
                if (v9 == 48 || v9 == 55) {
                  goto LABEL_124;
                }
              }
              if (BytePtr[4] == 105)
              {
                if (BytePtr[5] == 111
                  && BytePtr[6] == 44
                  && BytePtr[7] == 116
                  && BytePtr[8] == 56
                  && BytePtr[9] == 48
                  && BytePtr[10] == 51
                  && BytePtr[11] == 48)
                {
                  uint64_t v7 = 12;
                  goto LABEL_124;
                }
                if (BytePtr[4] == 105)
                {
                  if (BytePtr[5] == 111
                    && BytePtr[6] == 44
                    && BytePtr[7] == 116
                    && BytePtr[8] == 56
                    && BytePtr[9] == 49
                    && BytePtr[10] == 48
                    && (BytePtr[11] | 2) == 0x33)
                  {
                    uint64_t v7 = 13;
                    goto LABEL_124;
                  }
                  if (BytePtr[4] == 105)
                  {
                    if (BytePtr[5] == 111
                      && BytePtr[6] == 44
                      && BytePtr[7] == 116
                      && BytePtr[8] == 56
                      && BytePtr[9] == 49
                      && BytePtr[10] == 49
                      && (BytePtr[11] | 2) == 0x32)
                    {
                      uint64_t v7 = 14;
                      goto LABEL_124;
                    }
                    if (BytePtr[4] == 105)
                    {
                      if (BytePtr[5] == 111
                        && BytePtr[6] == 44
                        && BytePtr[7] == 116
                        && BytePtr[8] == 56
                        && BytePtr[9] == 49
                        && BytePtr[10] == 50
                        && BytePtr[11] == 48)
                      {
                        uint64_t v7 = 15;
                        goto LABEL_124;
                      }
                      if (BytePtr[4] == 105)
                      {
                        if (BytePtr[5] == 111
                          && BytePtr[6] == 44
                          && BytePtr[7] == 116
                          && BytePtr[8] == 56
                          && BytePtr[9] == 49
                          && BytePtr[10] == 51
                          && BytePtr[11] == 48)
                        {
                          uint64_t v7 = 16;
                          goto LABEL_124;
                        }
                        if (BytePtr[4] == 105
                          && BytePtr[5] == 111
                          && BytePtr[6] == 44
                          && BytePtr[7] == 116
                          && BytePtr[8] == 56
                          && BytePtr[9] == 49
                          && BytePtr[10] == 52
                          && BytePtr[11] == 48)
                        {
                          uint64_t v7 = 17;
                          goto LABEL_124;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (Length >= 0xE)
      {
LABEL_120:
        if (!strncmp((const char *)BytePtr, "arm-io,vmapple", 0xEuLL)) {
          uint64_t v7 = 254;
        }
        else {
          uint64_t v7 = 255;
        }
        goto LABEL_124;
      }
LABEL_123:
      uint64_t v7 = 255;
      goto LABEL_124;
    }
    IOObjectRelease(v1);
  }
  return 0;
}

void sub_1BBB3AF28(int a1)
{
  if ((byte_1E9F82E58 & 1) == 0)
  {
    off_1E9F831A0 = (uint64_t (*)(void, void, void, void))sub_1BBB65E48;
    off_1E9F831A8 = sub_1BBB65FC8;
    off_1E9F831B0 = sub_1BBB65FD0;
    off_1E9F831B8 = (uint64_t (*)(void, void, void, void, __n128))sub_1BBB660CC;
    off_1E9F831C0 = sub_1BBB660D4;
    off_1E9F831C8 = sub_1BBB66288;
    off_1E9F831D0 = sub_1BBB66290;
    off_1E9F831D8 = sub_1BBB663C0;
    off_1E9F831E0 = (uint64_t (*)(void, void, void))sub_1BBB65DC0;
    off_1E9F831E8 = (uint64_t (*)(void, void, void, void))sub_1BBB66788;
    off_1E9F831F0 = (uint64_t (*)(void, void, void, void))sub_1BBB663C8;
    off_1E9F831F8 = (uint64_t (*)(void))sub_1BBB66658;
    off_1E9F83200 = (uint64_t (*)(void, void))sub_1BBB66AD0;
    off_1E9F83208 = (uint64_t (*)(void, void, void, void))sub_1BBB668E0;
    memset_pattern16(&qword_1E9F82FA8, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F82F70, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F82F38, &off_1F14EF320, 0x38uLL);
    memset_pattern16(&qword_1E9F82E90, &off_1F14EF320, 0x38uLL);
    memset_pattern16(&qword_1E9F82EC8, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F82F00, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F830F8, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F830C0, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F83088, &off_1F14EF320, 0x38uLL);
    memset_pattern16(&qword_1E9F82FE0, &off_1F14EF320, 0x38uLL);
    memset_pattern16(&qword_1E9F83018, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F83050, &off_1F14EF310, 0x38uLL);
    memset_pattern16(&qword_1E9F83130, &off_1F14EF320, 0x38uLL);
    off_1E9F82E78 = (uint64_t (*)(void, void))nullsub_34;
    off_1E9F82E80 = (uint64_t (*)(void, void, void, void, void, void, void, void))nullsub_33;
    off_1E9F82E88 = (uint64_t (*)(void, void, void))nullsub_32;
    qword_1E9F82E90 = (uint64_t)sub_1BBB62F2C;
    qword_1E9F82E98 = (uint64_t)sub_1BBB62EB4;
    qword_1E9F82EA0 = (uint64_t)sub_1BBB62E3C;
    qword_1E9F82EA8 = (uint64_t)sub_1BBB62D44;
    qword_1E9F82EC8 = (uint64_t)sub_1BBB62D28;
    qword_1E9F82ED0 = (uint64_t)sub_1BBB62D0C;
    qword_1E9F82ED8 = (uint64_t)sub_1BBB62CF0;
    qword_1E9F82EE0 = (uint64_t)sub_1BBB62CD4;
    qword_1E9F82F00 = (uint64_t)sub_1BBB62CB8;
    qword_1E9F82F08 = (uint64_t)sub_1BBB62C9C;
    qword_1E9F82F10 = (uint64_t)sub_1BBB62C80;
    qword_1E9F82F18 = (uint64_t)sub_1BBB62C64;
    qword_1E9F82F38 = (uint64_t)sub_1BBB62B64;
    qword_1E9F82F40 = (uint64_t)sub_1BBB62A64;
    qword_1E9F82F48 = (uint64_t)sub_1BBB62964;
    qword_1E9F82F50 = (uint64_t)sub_1BBB62864;
    qword_1E9F82F70 = (uint64_t)sub_1BBB627F4;
    qword_1E9F82F78 = (uint64_t)sub_1BBB62784;
    qword_1E9F82F80 = (uint64_t)sub_1BBB62714;
    qword_1E9F82F88 = (uint64_t)sub_1BBB626A4;
    qword_1E9F82FA8 = (uint64_t)sub_1BBB62634;
    qword_1E9F82FB0 = (uint64_t)sub_1BBB625C4;
    qword_1E9F82FB8 = (uint64_t)sub_1BBB62554;
    qword_1E9F82FC0 = (uint64_t)sub_1BBB624E4;
    qword_1E9F82FE0 = (uint64_t)sub_1BBB62408;
    qword_1E9F82FE8 = (uint64_t)sub_1BBB62338;
    qword_1E9F82FF0 = (uint64_t)sub_1BBB621E4;
    qword_1E9F82FF8 = (uint64_t)sub_1BBB6203C;
    qword_1E9F83018 = (uint64_t)sub_1BBB61F70;
    qword_1E9F83020 = (uint64_t)sub_1BBB61EA4;
    qword_1E9F83028 = (uint64_t)sub_1BBB61D1C;
    qword_1E9F83030 = (uint64_t)sub_1BBB61B9C;
    qword_1E9F83050 = (uint64_t)sub_1BBB61ACC;
    qword_1E9F83058 = (uint64_t)sub_1BBB619FC;
    qword_1E9F83060 = (uint64_t)sub_1BBB618CC;
    qword_1E9F83068 = (uint64_t)sub_1BBB6179C;
    qword_1E9F83088 = (uint64_t)sub_1BBB61660;
    qword_1E9F83090 = (uint64_t)sub_1BBB61524;
    qword_1E9F83098 = (uint64_t)sub_1BBB61368;
    qword_1E9F830A0 = (uint64_t)sub_1BBB611AC;
    qword_1E9F830C0 = (uint64_t)sub_1BBB61084;
    qword_1E9F830C8 = (uint64_t)sub_1BBB60F5C;
    qword_1E9F830D0 = (uint64_t)sub_1BBB60C9C;
    qword_1E9F830D8 = (uint64_t)sub_1BBB609E4;
    qword_1E9F830F8 = (uint64_t)sub_1BBB608B0;
    qword_1E9F83100 = (uint64_t)sub_1BBB6077C;
    qword_1E9F83108 = (uint64_t)sub_1BBB60544;
    qword_1E9F83110 = (uint64_t)sub_1BBB6030C;
    qword_1E9F83130 = (uint64_t)sub_1BBB6022C;
    qword_1E9F83138 = (uint64_t)sub_1BBB60154;
    qword_1E9F83140 = (uint64_t)sub_1BBB5FFF8;
    qword_1E9F83148 = (uint64_t)sub_1BBB5FE9C;
    qword_1E9F83168 = (uint64_t)sub_1BBB67370;
    qword_1E9F83170 = (uint64_t)sub_1BBB67528;
    qword_1E9F83178 = (uint64_t)sub_1BBB675C4;
    qword_1E9F83180 = (uint64_t)sub_1BBB675FC;
    qword_1E9F83188 = (uint64_t)sub_1BBB67694;
    qword_1E9F83190 = (uint64_t)sub_1BBB67934;
    off_1E9F83198 = (uint64_t (*)(void))sub_1BBB66C78;
    off_1EC59CAB0 = (uint64_t (*)())sub_1BBB657A8;
    off_1EC59CAA8 = (uint64_t (*)())sub_1BBB65944;
    off_1EC59CA98 = (uint64_t (*)())sub_1BBB65AE0;
    off_1EC59CA90[0] = (uint64_t (*)())sub_1BBB65C50;
    off_1E9F83280 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBB648C0;
    off_1E9F83288 = (__n128 (*)(void, void, void))sub_1BBB64A6C;
    off_1E9F83290 = (uint64_t (*)(void, void, void, void, void))sub_1BBB646A4;
    off_1E9F83298 = (uint64_t (*)(void, void, void, void, void))sub_1BBB64E78;
    off_1E9F832A0 = (uint64_t (*)(void, void, void, void, void, void, void))sub_1BBB64B30;
    off_1E9F832A8 = (uint64_t (*)(void, void, void))sub_1BBB64DE8;
    qword_1E9F832B0 = (uint64_t)sub_1BBB65044;
    off_1E9F832B8 = (uint64_t (*)(void, void))sub_1BBB64FB4;
    off_1E9F832C0 = (uint64_t (*)(void, void, void, void, void))sub_1BBB650E0;
    off_1E9F832C8 = (uint64_t (*)(void, void))sub_1BBB62FB0;
    off_1E9F832D0 = (uint64_t (*)(void, void))sub_1BBB631AC;
    off_1E9F832D8 = (uint64_t (*)(void, void, void, void, void, __n128))sub_1BBB6521C;
    off_1E9F832E0 = (uint64_t (*)(void, void, void, void))sub_1BBB652C8;
    off_1E9F83238 = (uint64_t (*)(void, void, void, void))sub_1BBB67FF8;
    off_1E9F83240 = (uint64_t (*)(void, void))sub_1BBB67EC8;
    off_1EC59CA68 = (uint64_t (*)(uint64_t, int, unsigned char *, unsigned char *))sub_1BBB69154;
    off_1E9F832E8 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBB68DB0;
    off_1E9F832F0 = (uint64_t (*)(void, void, void, void, void, void, void))sub_1BBB68938;
    qword_1E9F832F8[0] = (uint64_t)sub_1BBB685A0;
    qword_1E9F83300 = (uint64_t)sub_1BBB685C8;
    qword_1E9F83308 = (uint64_t)sub_1BBB68608;
    qword_1E9F83310 = (uint64_t)sub_1BBB687B8;
    off_1E9F83318 = (uint64_t (*)(void, void, void, void))sub_1BBB68E88;
    off_1E9F83320 = (uint64_t (*)(void, void, void, void))sub_1BBB68E48;
    off_1E9F83328 = (uint64_t (*)(void, void, void, void))sub_1BBB68E2C;
    off_1E9F83330 = (uint64_t (*)(void, void, void, void))sub_1BBB69030;
    off_1EC59CA20[0] = (uint64_t (*)())sub_1BBB69260;
    off_1EC59CA28[0] = (uint64_t (*)())sub_1BBB692A4;
    off_1EC59CA30[0] = (uint64_t (*)())sub_1BBB69308;
    off_1EC59CA38[0] = (uint64_t (*)())sub_1BBB693B0;
    off_1EC59CA40[0] = (uint64_t (*)())sub_1BBB69420;
    off_1EC59CA48[0] = (uint64_t (*)())sub_1BBB69494;
    off_1EC59CA50[0] = (uint64_t (*)())sub_1BBB69518;
    off_1EC59CA58[0] = (uint64_t (*)())sub_1BBB6959C;
    off_1EC59CA60[0] = (uint64_t (*)())sub_1BBB6960C;
    off_1E9F83248 = (uint64_t (*)(void, void))sub_1BBB6816C;
    off_1E9F83250 = (uint64_t (*)(void, void, void, void))sub_1BBB65328;
    off_1E9F83258 = (uint64_t (*)(void, void, void, void))sub_1BBB6536C;
    off_1E9F83260 = (uint64_t (*)(void, void, __n128))sub_1BBB68574;
    off_1E9F83268 = (uint64_t (*)(void, void, void))sub_1BBB653B0;
    off_1E9F83270 = (uint64_t (*)(void, void, void, void))sub_1BBB683A8;
    off_1E9F83378 = (uint64_t (*)(void, void, void, void))sub_1BBB682F4;
    off_1E9F83380 = (uint64_t (*)(void, void, void, void, void))sub_1BBB68350;
    off_1E9F83388 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBB68254;
    off_1E9F83390 = (uint64_t (*)(void, void, void, void, void, void))sub_1BBB682AC;
    off_1E9F83398 = (uint64_t (*)(void, void, void, void))sub_1BBB683E4;
    qword_1EC59C9C8 = (uint64_t)sub_1BBB656AC;
    off_1EC59CA10 = (uint64_t (*)())sub_1BBB653EC;
    off_1EC59CA08[0] = (uint64_t (*)())sub_1BBB654E8;
    off_1EC59C9F8 = (uint64_t (*)())sub_1BBB6554C;
    off_1EC59C9F0[0] = (uint64_t (*)())sub_1BBB65648;
    off_1EC59C9A8 = (uint64_t (*)())sub_1BBB65448;
    off_1EC59C9A0[0] = (uint64_t (*)())sub_1BBB65544;
    off_1EC59C990 = (uint64_t (*)())sub_1BBB655A8;
    off_1EC59C988[0] = (uint64_t (*)())sub_1BBB656A4;
    byte_1E9F82E60 = 1;
    byte_1E9F82E68 = 1;
    byte_1E9F82E70 = 1;
    off_1E9F83210 = (uint64_t (*)(void, void, void))sub_1BBB633C8;
    off_1E9F83218 = (uint64_t (*)(void, void, void))sub_1BBB6345C;
    off_1E9F83220 = (uint64_t (*)(void, void, void))sub_1BBB634E0;
    off_1E9F83228 = (uint64_t (*)(void))sub_1BBB63578;
    off_1E9F83230 = sub_1BBB63854;
    off_1E9F83338 = (uint64_t (*)(void, void, void, void, void))sub_1BBB63B00;
    off_1E9F83340 = sub_1BBB63C48;
    off_1E9F83348 = (uint64_t (*)(void, void, void, void))sub_1BBB63EF0;
    off_1E9F83350 = (uint64_t (*)(void, void, void, void))sub_1BBB6406C;
    off_1E9F83358 = (uint64_t (*)(void, void, void, void, void))sub_1BBB64350;
    off_1E9F83360 = (uint64_t (*)(void, void, void, void, void))sub_1BBB64400;
    off_1E9F83368 = (uint64_t (*)(void, void, void, void))sub_1BBB64540;
    off_1E9F83370 = (uint64_t (*)(void, void, void, void))sub_1BBB645A8;
    off_1E9F83278 = (uint64_t (*)(void, void, void, void))sub_1BBB6847C;
    if (a1 <= 6) {
      io_object_t v1 = sub_1BBB06260;
    }
    else {
      io_object_t v1 = sub_1BBB064C0;
    }
    int v2 = sub_1BBB06390;
    if (a1 > 6) {
      int v2 = sub_1BBB065B8;
    }
    off_1E9F82E28 = (uint64_t (*)(void, void, void, void, void))v1;
    off_1E9F82E30 = (uint64_t (*)(void, void, void, void, void))v2;
  }
  byte_1E9F82E58 = 1;
}

void JVTLibDecoDispose(pthread_mutex_t **a1)
{
  if (!a1) {
    return;
  }
  int v2 = a1 + 36648;
  CFDataRef v3 = a1[39735];
  if (v3)
  {
    CFTypeID v4 = *v2;
    if (*v2) {
      pthread_mutex_destroy(*v2);
    }
    free(v4);
    void *v2 = 0;
    int v5 = v2[3078];
    if (v5) {
      pthread_mutex_destroy(v2[3078]);
    }
    free(v5);
    v2[3078] = 0;
    uint64_t v6 = *(void *)&v3->__opaque[24];
    if (v6)
    {
      sub_1BBB1E2BC(v6);
      free(*(void **)&v3->__opaque[24]);
      *(void *)&v3->__opaque[24] = 0;
    }
    uint64_t v7 = *(void *)&v3[6].__opaque[32];
    if (v7)
    {
      sub_1BBB1E2BC(v7);
      free(*(void **)&v3[6].__opaque[32]);
      *(void *)&v3[6].__opaque[32] = 0;
    }
    int v8 = *(_DWORD *)&v3->__opaque[36];
    if (v8 >= 1)
    {
      for (uint64_t i = 0; i < v8; ++i)
      {
        uint64_t v10 = *(void *)(*(void *)&v3->__opaque[40] + 8 * i);
        if (v10)
        {
          unsigned int v11 = *(uint64_t ***)(v10 + 1160);
          if (v11)
          {
            unsigned int v12 = *v11;
            if (*v11)
            {
              if (v12[1])
              {
                MEMORY[0x1C18605E0](v12[1], 0x1030C40B34BA92BLL);
                (*v11)[1] = 0;
                unsigned int v12 = *v11;
              }
              uint64_t v13 = *v12;
              if (*v12)
              {
                uint64_t v14 = *(void *)(v13 + 96);
                if (v14)
                {
                  MEMORY[0x1C18605A0](v14, 0x1000C807B7DF2DDLL);
                  *(void *)(v13 + 96) = 0;
                  *(void *)(v13 + 104) = 0;
                }
                MEMORY[0x1C18605E0](v13, 0x1030C40708365FFLL);
                **unsigned int v11 = 0;
                unsigned int v12 = *v11;
              }
              free(v12);
              *unsigned int v11 = 0;
              unsigned int v11 = *(uint64_t ***)(v10 + 1160);
            }
            free(v11);
            *(void *)(v10 + 1160) = 0;
          }
          uint64_t v15 = *(void **)(v10 + 1168);
          if (v15)
          {
            free(v15);
            *(void *)(v10 + 1168) = 0;
          }
          if (*(void *)(v10 + 35712))
          {
            free(*(void **)(v10 + 35728));
            free(*(void **)(v10 + 35736));
            *(_OWORD *)(v10 + 35712) = 0u;
            *(_OWORD *)(v10 + 35728) = 0u;
          }
          free(*(void **)(v10 + 1024));
          free((void *)v10);
          *(void *)(*(void *)&v3->__opaque[40] + 8 * i) = 0;
          int v8 = *(_DWORD *)&v3->__opaque[36];
        }
      }
    }
    free(*(void **)&v3->__opaque[40]);
    *(void *)&v3->__opaque[40] = 0;
    free(*(void **)&v3->__opaque[48]);
    *(void *)&v3->__opaque[48] = 0;
    sig = (void *)v3[1].__sig;
    if (sig) {
      pthread_mutex_destroy((pthread_mutex_t *)v3[1].__sig);
    }
    free(sig);
    v3[1].__sig = 0;
    if (*(_DWORD *)&v3[6].__opaque[24] == -4)
    {
      free(*(void **)v3[1].__opaque);
      *(void *)v3[1].__opaque = 0;
    }
    uint64_t v17 = *(void **)&v3[1].__opaque[24];
    if (v17)
    {
      if (!*(_DWORD *)&v3[1].__opaque[16])
      {
LABEL_40:
        free(v3);
        sub_1BBB0AFBC((uint64_t)(a1 + 39718));
        goto LABEL_41;
      }
      free(v17);
      *(void *)&v3[1].__opaque[24] = 0;
      *(_DWORD *)&v3[1].__opaque[32] = 0;
    }
    int v18 = *(void **)&v3[1].__opaque[48];
    if (v18 && *(_DWORD *)&v3[1].__opaque[36]) {
      free(v18);
    }
    goto LABEL_40;
  }
LABEL_41:
  BOOL v19 = v2[3166];
  if (v19) {
    free(v19);
  }
  BOOL v20 = v2[3088];
  if (v20)
  {
    free((char *)v20 - *(int *)&v20[-1].__opaque[52]);
    v2[3088] = 0;
  }
  int v21 = v2[3100];
  if (v21)
  {
    sub_1BBB4F3C0(v21);
    v2[3100] = 0;
  }
  uint64_t v22 = v2[3101];
  if (v22)
  {
    sub_1BBB4F3C0(v22);
    v2[3101] = 0;
  }
  sub_1BBB0EF64((uint64_t)(a1 + 39727));

  free(a1);
}

uint64_t sub_1BBB3BEBC(uint64_t a1, const void *a2, __int16 **a3, int a4)
{
  kern_return_t v68;
  integer_t *v69;
  kern_return_t v70;
  kern_return_t v71;
  thread_act_t v72;
  kern_return_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  __int16 *v88;
  integer_t policy_info[4];
  long long v91;
  long long v92;
  uint64_t v93;
  integer_t thread_info_out[4];
  long long v95;
  uint64_t v96;
  mach_msg_type_number_t thread_info_outCnt;
  pthread_attr_t valuePtr;
  uint64_t v99;

  int v99 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (__int16 *)malloc_type_calloc(0x1430uLL, 1uLL, 0x4AE20AB7uLL);
  if (!v6)
  {
LABEL_188:
    CFLog();
    uint64_t v41 = 4294967188;
    goto LABEL_263;
  }
  uint64_t v7 = v6;
  memcpy(v6, a2, 0x1430uLL);
  if ((byte_1E9F82B24 & 1) == 0) {
    byte_1E9F82B24 = 1;
  }
  sub_1BBB3AF28(*((_DWORD *)v7 + 1205));
  if (*((unsigned char *)v7 + 577) == 1) {
    *((_DWORD *)v7 + 22) = 0;
  }
  int v8 = 0;
  int v9 = *((unsigned __int8 *)v7 + 16);
  *(_DWORD *)(v7 + 13) = 0;
  v7[15] = 0;
  if (v9 > 87)
  {
    if (v9 == 88)
    {
      int v11 = 0;
      *(__int16 *)((char *)v7 + 27) = 257;
      int v9 = 77;
      int v8 = 1;
      int v10 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 0;
      if (v9 == 101)
      {
        int v8 = 0;
        int v10 = 0;
        int v11 = 0;
        v7[15] = 257;
        int v9 = 101;
      }
    }
  }
  else if (v9 == 66)
  {
    int v8 = 1;
    *((unsigned char *)v7 + 28) = 1;
    v7[13] = 257;
    int v10 = 1;
    int v11 = 1;
  }
  else
  {
    int v10 = 0;
    int v11 = 0;
    if (v9 == 77)
    {
      int v8 = 0;
      int v11 = 0;
      int v10 = 1;
      *((unsigned char *)v7 + 27) = 1;
    }
  }
  *((unsigned char *)v7 + 24) = v9;
  if (!*((unsigned char *)v7 + 18))
  {
    int v17 = 0;
    unsigned int v18 = *((unsigned __int8 *)v7 + 17);
    goto LABEL_83;
  }
  unsigned int v12 = *((_DWORD *)v7 + 48);
  if (!v12) {
    unsigned int v12 = *((_DWORD *)v7 + 13);
  }
  unsigned int v13 = ((-v7[2] & 0xF) + v7[2]) * ((-*v7 & 0xF) + *v7) / 256;
  float v14 = *((float *)v7 + 16);
  if (v14 <= 0.0)
  {
    float v14 = *((float *)v7 + 15);
    if (v14 == 0.0) {
      float v14 = 30.0;
    }
  }
  double v15 = *((double *)v7 + 23) * (double)v12;
  if (*((unsigned char *)v7 + 17))
  {
    uint64_t v16 = 0;
    while (*((unsigned __int8 *)v7 + 17) != byte_1BBB8D62C[v16])
    {
      if (++v16 == 17) {
        goto LABEL_26;
      }
    }
    if (v16 <= 0x10) {
      uint64_t v16 = (int)v16;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  else
  {
LABEL_26:
    uint64_t v16 = 0;
  }
  unsigned int v19 = v15;
  if ((v9 & 0xFE) == 0x64) {
    int v20 = 5000;
  }
  else {
    int v20 = 4000;
  }
  do
  {
    if (v9 == 77 || v9 == 100)
    {
      if (v16 >= 8) {
        goto LABEL_40;
      }
      BOOL v21 = 1;
    }
    else
    {
      BOOL v21 = 1;
      if (v16 >= 8 && v9 == 101)
      {
LABEL_40:
        LOBYTE(v15) = byte_1BBB8D308[v16];
        *(float *)&double v15 = v14 * (float)LODWORD(v15);
        BOOL v21 = *((_DWORD *)v7 + 11) <= (int)(float)((float)dword_1BBB8D31C[v16] / *(float *)&v15);
      }
    }
    if (v12 <= (dword_1BBB8D5E8[v16] * v20) >> 2
      && 1000 * dword_1BBB8D5A4[v16] >= v19
      && v13 <= word_1BBB8D360[v16]
      && dword_1BBB8D31C[v16] >= ((float)(v14 * (float)v13) + 0.5)
      && v13 * *((char *)v7 + 238) <= dword_1BBB8D384[v16]
      && v21)
    {
      goto LABEL_49;
    }
    ++v16;
  }
  while (v16 != 17);
  LODWORD(v16) = 17;
LABEL_49:
  if ((int)v16 >= 16) {
    LODWORD(v16) = 16;
  }
  if (!v12 && v16 <= 0xB && !*((unsigned char *)v7 + 392))
  {
    int v22 = dword_1BBB8D5E8[v16];
    if (*((char *)v7 + 228) < 8)
    {
      int v23 = 4;
      goto LABEL_60;
    }
    unsigned int v24 = *((unsigned __int8 *)v7 + 228);
    if (v24 < 0xF)
    {
      int v23 = 3;
      goto LABEL_60;
    }
    if (v24 > 0x12)
    {
      if (v24 < 0x18) {
        LODWORD(v16) = v16 + 1;
      }
      if (v24 <= 0x17) {
        goto LABEL_61;
      }
    }
    else
    {
      int v23 = 2;
LABEL_60:
      LODWORD(v16) = v23 + v16;
LABEL_61:
      if (dword_1BBB8D5E8[v16] == v22) {
        LODWORD(v16) = v16 + 1;
      }
    }
  }
  unsigned int v18 = byte_1BBB8D62C[(int)v16];
  *((unsigned char *)v7 + 25) = v18;
  int v17 = v16 == 1;
  *((unsigned char *)v7 + 29) = v17;
  unsigned int v25 = *((unsigned __int8 *)v7 + 32);
  if (v25 > v18)
  {
    *((unsigned char *)v7 + 25) = v25;
    int v17 = *((unsigned __int8 *)v7 + 33);
    unsigned int v18 = v25;
    goto LABEL_70;
  }
  if ((v16 - 1) <= 1 && v25 == v18 && v16 == 1 && !*((unsigned char *)v7 + 33))
  {
    int v17 = 0;
LABEL_70:
    *((unsigned char *)v7 + 29) = v17;
  }
  uint64_t v26 = 0;
  int v27 = 17;
  while (byte_1BBB8D62C[v26] != v18)
  {
    if (++v26 == 17) {
      goto LABEL_80;
    }
  }
  int v28 = 1;
  if (!v17) {
    int v28 = 2;
  }
  if (v26 == 1) {
    int v27 = v28;
  }
  else {
    int v27 = v26;
  }
LABEL_80:
  *((_DWORD *)v7 + 5) = 1000 * dword_1BBB8D5A4[v27];
  if (*((unsigned char *)v7 + 398) && v18 <= 0x1D)
  {
    unsigned int v18 = 30;
LABEL_83:
    *((unsigned char *)v7 + 25) = v18;
  }
  if (v9 == 66)
  {
    int v11 = 1;
    if (v18) {
      goto LABEL_89;
    }
  }
  else
  {
    if (v9 == 77)
    {
      int v10 = 1;
      if (!v18) {
        goto LABEL_111;
      }
    }
    else if (!v18)
    {
      goto LABEL_111;
    }
LABEL_89:
    unsigned int v29 = *((_DWORD *)v7 + 63);
    if (!v29)
    {
      if (v18 == 11)
      {
        unsigned int v29 = 63;
        if (v17) {
          goto LABEL_102;
        }
LABEL_98:
        unsigned int v29 = 127;
        goto LABEL_102;
      }
      if (v18 == 10)
      {
        unsigned int v29 = 63;
        goto LABEL_102;
      }
      if (v18 <= 0x14) {
        goto LABEL_98;
      }
      if (v18 >= 0x1F) {
        unsigned int v29 = 511;
      }
      else {
        unsigned int v29 = 255;
      }
LABEL_102:
      *((_DWORD *)v7 + 63) = v29;
    }
    int v30 = *((_DWORD *)v7 + 62);
    if (v30 + *((_DWORD *)v7 + 61) > v29) {
      *((_DWORD *)v7 + 61) = v29 - v30;
    }
    if (v18 != 30)
    {
      if (v18 < 0x1F) {
        goto LABEL_111;
      }
      if (!*((unsigned char *)v7 + 285)) {
        *((unsigned char *)v7 + 285) = 1;
      }
    }
    if (!*((unsigned char *)v7 + 286)) {
      *((unsigned char *)v7 + 286) = 1;
    }
  }
LABEL_111:
  int v31 = v9 & 0xFE;
  if (v11)
  {
    if (*((unsigned char *)v7 + 240)) {
      *((unsigned char *)v7 + 240) = 0;
    }
    if (*((unsigned char *)v7 + 236) && !*((unsigned char *)v7 + 324)) {
      v7[118] = 0;
    }
    if (v18 - 1 <= 0x1D && *((_DWORD *)v7 + 64) != 576 && (!*((unsigned char *)v7 + 286) || !*((unsigned char *)v7 + 285))) {
      *((_DWORD *)v7 + 64) = 576;
    }
  }
  if (v31 == 100) {
    int v10 = 1;
  }
  if (v18 && v10)
  {
    if (v18 >= 0x1F && !*((unsigned char *)v7 + 286)) {
      *((unsigned char *)v7 + 286) = 1;
    }
    if (v18 >= 0x1E && !*((unsigned char *)v7 + 282)) {
      *((unsigned char *)v7 + 282) = 1;
    }
    if (v31 != 100 && *((unsigned char *)v7 + 400)) {
      *((unsigned char *)v7 + 400) = 0;
    }
  }
  if (v8)
  {
    if (*((unsigned char *)v7 + 282) != 1) {
      *((unsigned char *)v7 + 282) = 1;
    }
    if (*((unsigned char *)v7 + 240)) {
      *((unsigned char *)v7 + 240) = 0;
    }
    if (v18)
    {
      if (v18 > 0x1E)
      {
        if (!*((unsigned char *)v7 + 286)) {
          *((unsigned char *)v7 + 286) = 1;
        }
      }
      else if (*((_DWORD *)v7 + 64) != 576 && (!*((unsigned char *)v7 + 286) || !*((unsigned char *)v7 + 285)))
      {
        *((_DWORD *)v7 + 64) = 576;
      }
    }
  }
  *((unsigned char *)v7 + 282) = 1;
  if (!*((unsigned char *)v7 + 286)) {
    *((unsigned char *)v7 + 286) = 1;
  }
  if (!(*((unsigned __int8 *)v7 + 285) | *((unsigned __int8 *)v7 + 281))) {
    *((unsigned char *)v7 + 285) = 1;
  }
  if (*((unsigned char *)v7 + 4816))
  {
    unsigned int v32 = *((char *)v7 + 238) + 1;
    unsigned int v33 = *v7 + 15;
    unsigned int v34 = v7[2] + 15;
    switch(v18)
    {
      case 0xAu:
        unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
        if (v35 < 0x2501) {
          goto LABEL_178;
        }
        unsigned int v36 = 151552;
        goto LABEL_177;
      case 0xBu:
        unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
        if (v35 < 0x5441) {
          goto LABEL_178;
        }
        unsigned int v36 = 345088;
        goto LABEL_177;
      case 0xCu:
      case 0xDu:
      case 0x14u:
        unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
        if (v35 < 0xDEC1) {
          goto LABEL_178;
        }
        unsigned int v36 = 912384;
        goto LABEL_177;
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
        goto LABEL_179;
      case 0x15u:
        unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
        if (v35 < 0x1BD81) {
          goto LABEL_178;
        }
        unsigned int v36 = 1824768;
        goto LABEL_177;
      case 0x16u:
      case 0x1Eu:
        unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
        if (v35 <= 0x2F740) {
          goto LABEL_178;
        }
        unsigned int v36 = 3109888;
        goto LABEL_177;
      case 0x1Fu:
        unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
        if (v35 < 0x69781) {
          goto LABEL_178;
        }
        unsigned int v36 = 6912000;
        goto LABEL_177;
      case 0x20u:
        unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
        if (v35 <= 0x78000)
        {
LABEL_178:
          unsigned int v32 = 16;
        }
        else
        {
          unsigned int v36 = 7864320;
LABEL_177:
          unsigned int v32 = v36 / v35;
        }
LABEL_179:
        if (v32 >= 4) {
          char v37 = 4;
        }
        else {
          char v37 = v32;
        }
        if ((*((_DWORD *)v7 + 1213) - 1) < 2) {
          LOBYTE(v32) = v37;
        }
        *((unsigned char *)v7 + 615) = v32 - 1;
        *((unsigned char *)v7 + 238) = v32;
        break;
      default:
        switch(v18)
        {
          case '(':
          case ')':
            unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
            if (v35 <= 0xC0000) {
              goto LABEL_178;
            }
            unsigned int v36 = 12582912;
            goto LABEL_177;
          case '*':
            unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
            if (v35 <= 0xCC000) {
              goto LABEL_178;
            }
            unsigned int v36 = 13369344;
            goto LABEL_177;
          case '2':
            unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
            if (v35 < 0x286E01) {
              goto LABEL_178;
            }
            unsigned int v36 = 42393600;
            goto LABEL_177;
          case '3':
            unsigned int v35 = 384 * (v33 >> 4) * (v34 >> 4);
            if (v35 <= 0x438000) {
              goto LABEL_178;
            }
            unsigned int v36 = 70778880;
            goto LABEL_177;
          default:
            goto LABEL_179;
        }
        goto LABEL_179;
    }
  }
  uint64_t v38 = (__int16 *)malloc_type_calloc(0x2988uLL, 1uLL, 0x4AE20AB7uLL);
  if (!v38) {
    goto LABEL_188;
  }
  int v39 = v38;
  *a3 = v38;
  memcpy(v38, v7, 0x1430uLL);
  free(v7);
  *((_DWORD *)v39 + 1312) = 0;
  *((_DWORD *)v39 + 1304) = 0;
  *((void *)v39 + 658) = 0;
  *((void *)v39 + 657) = 0;
  if (*((_DWORD *)v39 + 1213) == 2)
  {
    int v40 = 0;
    *((_DWORD *)v39 + 1304) = 0;
    *((void *)v39 + 651) = 0;
    goto LABEL_192;
  }
  int v42 = 388 * ((*v39 + 15) >> 4) * ((v39[2] + 15) >> 4) + (*((_DWORD *)v39 + 11) << 9);
  *((_DWORD *)v39 + 1304) = v42;
  if (!v42)
  {
    *((void *)v39 + 651) = 0;
    goto LABEL_236;
  }
  float64x2_t v43 = malloc_type_malloc(v42, 0x4CF1F002uLL);
  *((void *)v39 + 651) = v43;
  if (!v43)
  {
LABEL_236:
    CFLog();
    uint64_t v41 = 4294967188;
    goto LABEL_259;
  }
  int v40 = *((_DWORD *)v39 + 1304);
LABEL_192:
  uint64_t v44 = v39 + 2407;
  *((_DWORD *)v39 + 1305) = v40;
  *((_DWORD *)v39 + 1311) = *((_DWORD *)v39 + 11);
  *(int8x8_t *)(v39 + 2474) = vand_s8(vand_s8((int8x8_t)vdup_n_s32(*((_DWORD *)v39 + 1239)), (int8x8_t)0xFF0000001FLL), (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*((_DWORD *)v39 + 1239) >= 0), 0x1FuLL)));
  int v45 = *((_DWORD *)v39 + 93);
  *((_DWORD *)v39 + 2653) = v45;
  int v46 = *((unsigned __int8 *)v39 + 376);
  *((unsigned char *)v39 + 10616) = v46;
  if (v45 == 1)
  {
    unsigned int v47 = v39[1];
    if (v47 / v46 < *((_DWORD *)v39 + 63))
    {
      unsigned int v48 = (__int16)((__int16)v47 / v46);
      *((_DWORD *)v39 + 63) = v48;
      int v49 = *((_DWORD *)v39 + 62);
      if (v49 + *((_DWORD *)v39 + 61) > v48) {
        *((_DWORD *)v39 + 61) = v48 - v49;
      }
    }
  }
  if (*((char *)v39 + 394) < 1) {
    uint64_t v50 = sub_1BBAF9E6C();
  }
  else {
    uint64_t v50 = *((unsigned __int8 *)v39 + 394);
  }
  uint64_t v51 = sub_1BBB34A10((unsigned __int16 *)v39, (void *)v39 + 647, v50, 1);
  if (v51)
  {
    uint64_t v41 = v51;
    CFLog();
    goto LABEL_258;
  }
  uint64_t v88 = v39 + 2588;
  *(void *)(*((void *)v39 + 647) + 72) = v39 + 2596;
  if (*(_DWORD *)(*((void *)v39 + 647) + 205924) == 1)
  {
    *((_DWORD *)v39 + 2651) = 0;
    uint64_t v52 = *((unsigned __int8 *)v39 + 376);
    *((_DWORD *)v39 + 2652) = v52;
    int v53 = malloc_type_calloc(320 * v52, 1uLL, 0x4AE20AB7uLL);
    *((void *)v39 + 1328) = v53;
    if (!v53)
    {
LABEL_257:
      uint64_t v41 = 4294967188;
      goto LABEL_258;
    }
    if (*((int *)v39 + 2652) >= 1)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 248;
      while (1)
      {
        uint64_t v56 = v44;
        uint64_t v57 = *((void *)v39 + 1328);
        uint64_t v58 = v57 + v55;
        if (v55 == 248)
        {
          *(void *)(v57 + 32) = *(void *)v88;
        }
        else
        {
          uint64_t v59 = v58 - 216;
          uint64_t v60 = sub_1BBB34A10((unsigned __int16 *)v39, (void *)(v58 - 216), v50, 0);
          if (v60)
          {
            uint64_t v41 = v60;
            goto LABEL_258;
          }
          *(void *)(*(void *)v59 + 205800) = *(void *)(*(void *)v88 + 205800);
          *(void *)(*(void *)v59 + 205808) = *(void *)(*(void *)v88 + 205808);
          *(void *)(*(void *)v59 + 205944) = *(void *)(*(void *)v88 + 205944);
          *(void *)(*(void *)v59 + 205960) = *(void *)(*(void *)v88 + 205960);
          *(void *)(*(void *)v59 + 152) = *(void *)(*(void *)v88 + 152);
          *(void *)(*(void *)v59 + 205968) = *(void *)(*(void *)v88 + 205968);
          *(void *)(*(void *)v59 + 207760) = *(void *)(*(void *)v88 + 207760);
        }
        uint64_t v61 = v57 + v55;
        *(_DWORD *)(v61 - 152) = 0;
        *(_DWORD *)(v61 - 184) = 0;
        *(void *)(v61 - 144) = 0;
        *(void *)(v61 - 136) = 0;
        int v62 = 32 * *v39 * v39[2];
        *(_DWORD *)(v61 - 184) = v62;
        if (!v62)
        {
          *(void *)(v61 - 192) = 0;
          goto LABEL_257;
        }
        int v63 = malloc_type_malloc(v62, 0x4CF1F002uLL);
        *(void *)(v61 - 192) = v63;
        if (!v63) {
          goto LABEL_257;
        }
        int v64 = (void *)(v58 - 248);
        uint64_t v65 = (pthread_mutex_t **)(v57 + v55);
        *((_DWORD *)v65 - 39) = *((_DWORD *)v39 + 11);
        *int v64 = 0;
        *(pthread_mutex_t **)((char *)v65 + 60) = 0;
        *(v65 - 29) = (pthread_mutex_t *)sub_1BBAF9DAC();
        *(v65 - 28) = (pthread_mutex_t *)sub_1BBAF9DAC();
        *uint64_t v65 = sub_1BBAF9CE4();
        v65[1] = (pthread_mutex_t *)sub_1BBAF9D48();
        uint64_t v66 = (pthread_t *)malloc_type_malloc(8uLL, 0x2004093837F09uLL);
        if (v66) {
          break;
        }
LABEL_218:
        *(v65 - 30) = (pthread_mutex_t *)v66;
        if (!*(v65 - 29) || !*(v65 - 28) || !*(void *)(v57 + v55)) {
          goto LABEL_257;
        }
        uint64_t v41 = 4294967188;
        if (!v65[1] || !v66) {
          goto LABEL_258;
        }
        ++v54;
        v55 += 320;
        uint64_t v44 = v56;
        if (v54 >= *((int *)v39 + 2652)) {
          goto LABEL_237;
        }
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      if (!pthread_attr_init(&valuePtr))
      {
        if (pthread_attr_setdetachstate(&valuePtr, 1)) {
          goto LABEL_216;
        }
        if (pthread_create(v66, &valuePtr, (void *(__cdecl *)(void *))sub_1BBB3FAA8, v64)) {
          goto LABEL_216;
        }
        thread_inspect_t v67 = pthread_mach_thread_np(*v66);
        int v96 = 0;
        *(_OWORD *)thread_info_out = 0u;
        int v95 = 0u;
        int v93 = 0;
        int v91 = 0u;
        int v92 = 0u;
        *(_OWORD *)policy_info = 0u;
        thread_info_outCnt = 10;
        if (thread_info(v67, 3u, thread_info_out, &thread_info_outCnt))
        {
LABEL_216:
          pthread_attr_destroy(&valuePtr);
        }
        else
        {
          switch(DWORD1(v95))
          {
            case 4:
              thread_info_outCnt = 4;
              int v70 = thread_info(v67, 0xCu, (thread_info_t)&v92 + 2, &thread_info_outCnt);
              int v69 = (integer_t *)&v92 + 3;
              if (v70) {
                goto LABEL_216;
              }
              break;
            case 2:
              thread_info_outCnt = 5;
              uint64_t v71 = thread_info(v67, 0xBu, (thread_info_t)&v91 + 1, &thread_info_outCnt);
              int v69 = (integer_t *)&v91 + 2;
              if (v71) {
                goto LABEL_216;
              }
              break;
            case 1:
              thread_info_outCnt = 5;
              int v68 = thread_info(v67, 0xAu, policy_info, &thread_info_outCnt);
              int v69 = &policy_info[1];
              if (v68) {
                goto LABEL_216;
              }
              break;
            default:
              goto LABEL_216;
          }
          policy_info[0] = a4 - *v69;
          int v72 = pthread_mach_thread_np(*v66);
          int v73 = thread_policy_set(v72, 3u, policy_info, 1u);
          pthread_attr_destroy(&valuePtr);
          if (!v73) {
            goto LABEL_218;
          }
        }
      }
      free(v66);
      uint64_t v66 = 0;
      goto LABEL_218;
    }
  }
LABEL_237:
  int v74 = *(void *)(*((void *)v39 + 647) + 5512);
  int v75 = malloc_type_calloc(0x100uLL, 1uLL, 0x4AE20AB7uLL);
  if (v75)
  {
    int v76 = (uint64_t)v75;
    v75[28] = v74;
    if (*((unsigned char *)v39 + 398)) {
      uint32x2_t v77 = 2;
    }
    else {
      uint32x2_t v77 = 1;
    }
    int v78 = *((unsigned __int8 *)v39 + 318);
    int v79 = *((unsigned __int8 *)v39 + 319);
    unint64_t v80 = (*((unsigned char *)v39 + 237) + v77);
    int v81 = v78 + v80 + v79;
    *((_DWORD *)v75 + 2) = v81;
    *int v75 = 0;
    *((_DWORD *)v75 + 6) = v80;
    *((_DWORD *)v75 + 8) = v78;
    *((_DWORD *)v75 + 9) = v79;
    uint64_t v82 = (char *)malloc_type_calloc((16 * v81), 1uLL, 0x4AE20AB7uLL);
    *(void *)int v76 = v82;
    if (v82)
    {
      *(void *)(v76 + 16) = &v82[16 * v78];
      *(_DWORD *)(v76 + 28) = 0;
      *(void *)(v76 + 40) = 0;
      *(_DWORD *)(v76 + 48) = v78;
      if (*(_DWORD *)(v76 + 8))
      {
        uint64_t v83 = 0;
        int v84 = 0;
        do
        {
          int v85 = (void *)(*(void *)v76 + v83);
          *int v85 = 0;
          v85[1] = 0;
          ++v84;
          v83 += 16;
        }
        while (v84 < *(unsigned int *)(v76 + 8));
      }
      if (*((unsigned char *)v39 + 322) && *((unsigned char *)v39 + 318)) {
        operator new();
      }
      operator new();
    }
    sub_1BBAF3C7C((uint64_t *)v76);
    free(*(void **)v76);
    uint64_t v41 = 1;
    sub_1BBAF3DD0(v76);
    sub_1BBAF3DD0(v76);
    free((void *)v76);
  }
  else
  {
    uint64_t v41 = 4294967188;
  }
  *((void *)v39 + 646) = 0;
LABEL_258:
  CFLog();
LABEL_259:
  int v86 = *((void *)v39 + 647);
  if (v86)
  {
    if (*(void *)(v86 + 208120))
    {
      sub_1BBB06B10((CFTypeRef **)(v86 + 208120));
      int v86 = *((void *)v39 + 647);
    }
    sub_1BBB37FC0(v86, 1);
    *((void *)v39 + 647) = 0;
  }
LABEL_263:
  *a3 = 0;
  return v41;
}

void sub_1BBB3F9D4(_Unwind_Exception *a1)
{
  MEMORY[0x1C18605E0](v1, 0x1020C40699F9AC8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BBB3FAA8(uint64_t a1)
{
  while (1)
  {
    MEMORY[0x1C1861070](**(unsigned int **)(a1 + 16));
    if (*(_DWORD *)(a1 + 4)) {
      break;
    }
    *(_DWORD *)(a1 + 264) = sub_1BBB3FB20(*(__int16 **)(a1 + 272), a1, *(void *)(a1 + 280), *(void *)(a1 + 288), *(unsigned char **)(a1 + 296), *(unsigned __int8 *)(a1 + 304), (_DWORD *)(a1 + 308), (_DWORD *)(a1 + 312));
  }
  return 0;
}

uint64_t sub_1BBB3FB20(__int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, int a6, _DWORD *a7, _DWORD *a8)
{
  int v8 = a8;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  unsigned int v13 = a1;
  v568[2] = *MEMORY[0x1E4F143B8];
  unsigned int v554 = (int32x2_t *)*((void *)a1 + 646);
  unsigned int v562 = 0;
  if (a3) {
    int v544 = *(_DWORD *)(a3 + 64);
  }
  else {
    int v544 = 0;
  }
  uint64_t v14 = *((void *)a1 + 648);
  uint64_t v15 = v14 + 8;
  if (!v14) {
    uint64_t v15 = 0;
  }
  uint64_t v540 = v15;
  if (*((unsigned char *)a1 + 398)) {
    int v16 = 2;
  }
  else {
    int v16 = 1;
  }
  int v17 = v16 + *((unsigned __int8 *)a1 + 237);
  *a8 = 0;
  int v18 = *((_DWORD *)a1 + 93);
  BOOL v19 = v18 == 1;
  if (v18 == 1) {
    uint64_t v20 = a2 + 40;
  }
  else {
    uint64_t v20 = (uint64_t)(a1 + 2596);
  }
  uint64_t v539 = v20;
  unsigned int v541 = a1 + 2588;
  if (v19) {
    BOOL v21 = (uint64_t *)(a2 + 32);
  }
  else {
    BOOL v21 = (uint64_t *)(a1 + 2588);
  }
  uint64_t v22 = *v21;
  uint64_t v23 = *v21 + 205808;
  uint64_t v545 = *(void *)(*v21 + 152);
  uint64_t v24 = *(void *)(*v21 + 208120);
  if (a3) {
    int v25 = *(_DWORD *)(a3 + 616);
  }
  else {
    int v25 = 0;
  }
  uint64_t v559 = v23;
  *(_DWORD *)(v23 + 2292) = v25;
  *(void *)(v22 + 144) = a3;
  unsigned int v548 = v17;
  uint64_t v26 = malloc_type_calloc((8 * v17), 1uLL, 0x4AE20AB7uLL);
  if (!v26)
  {
    CFLog();
LABEL_32:
    uint64_t v43 = 4294967188;
    goto LABEL_389;
  }
  unint64_t v550 = v13 + 2406;
  uint64_t v553 = v22 + 207896;
  uint64_t v556 = v22 + 205800;
  uint64_t v557 = v22;
  uint64_t v536 = v24;
  uint64_t v558 = v11;
  if (a4)
  {
    uint64_t v29 = *(void *)v559;
    int v30 = *(_DWORD *)(*(void *)v559 + 24);
    if (v30) {
      goto LABEL_21;
    }
    unint64_t v47 = *(unsigned int *)(v29 + 48);
    if (v47)
    {
      unsigned int v48 = a7;
      for (unint64_t i = 0; i < v47; ++i)
      {
        uint64_t v50 = *(void *)(*(void *)(v29 + 40) + 8 * i);
        if (v50)
        {
          if (!*(unsigned char *)(v50 + 1) && !*(unsigned char *)(v50 + 2))
          {
            sub_1BBB0AE4C(v50, *(unsigned __int8 *)(v29 + 60));
            unint64_t v51 = *(unsigned int *)(v29 + 24);
            unint64_t v47 = *(unsigned int *)(v29 + 48);
            if (v51 < v47)
            {
              uint64_t v52 = *(void *)(v29 + 32);
              *(_DWORD *)(v29 + 24) = v51 + 1;
              *(void *)(v52 + 8 * v51) = v50;
              unint64_t v47 = *(unsigned int *)(v29 + 48);
            }
          }
        }
        else
        {
          ++*(_DWORD *)(v29 + 56);
        }
      }
      int v30 = *(_DWORD *)(v29 + 24);
      a7 = v48;
      uint64_t v22 = v557;
      uint64_t v11 = v558;
      if (v30)
      {
LABEL_21:
        uint64_t v31 = *(void *)(v29 + 32);
        unsigned int v32 = v30 - 1;
        *(_DWORD *)(v29 + 24) = v32;
        uint64_t v33 = *(void *)(v31 + 8 * v32);
        *(void *)(v31 + 8 * v32) = 0;
        if (v33)
        {
          __n128 v34 = *(__n128 *)(v33 + 144);
          *(__n128 *)(v33 + 128) = v34;
          int v534 = *(unsigned __int8 **)(v22 + 5392);
          int v508 = *(_DWORD *)(a4 + 60);
          uint64_t v520 = *(unsigned int *)(a4 + 104);
          uint64_t v521 = (unsigned char *)(v22 + 5076);
          uint64_t v510 = *(void *)(v22 + 5416);
          if (*(unsigned char *)(v22 + 5076))
          {
            uint64_t v35 = *(void *)(v22 + 144);
            if (*(unsigned char *)(v35 + 719))
            {
              float v36 = *((float *)v13 + 15);
              float v37 = *(float *)(v35 + 412);
              float v38 = 0.5;
              float v39 = *(float *)(v35 + 416);
              BOOL v40 = v37 < 0.00000011921 || v39 < 0.00000011921;
              if (v40 || *(_DWORD *)(v35 + 540) >= 2u)
              {
                int v41 = *(_DWORD *)(v553 + 16);
                LODWORD(v28) = 1.0;
                float v42 = 0.5;
                if (v41 <= 8)
                {
                  float v38 = *(float *)v553;
                  float v42 = *(float *)(v553 + 4);
                  *(float *)&long long v28 = fmaxf(*(float *)(v553 + 8), *(float *)(v553 + 12));
                  *(_DWORD *)(v553 + 16) = v41 + 1;
                }
              }
              else
              {
                float v55 = fmaxf(*(float *)(v35 + 404) + (float)(v37 * 0.5), 0.0);
                float v56 = fmaxf(*(float *)(v35 + 408) + (float)(v39 * 0.5), 0.0);
                *(_DWORD *)(v553 + 16) = 0;
                *(void *)&long long v28 = 1.0;
                float v57 = fmin(fmaxf(*(float *)(v35 + 416), *(float *)(v35 + 412)) * 1.80000001, 1.0);
                *(float *)&long long v28 = fmaxf(v57, 0.5);
                float v42 = *(float *)&v28 * 0.5;
                float v38 = *(float *)&v28 * 0.5;
                if ((float)(v55 - (float)(*(float *)&v28 * 0.5)) >= 0.0)
                {
                  float v38 = v55;
                  if ((float)(v55 + v42) >= 1.0) {
                    float v38 = 1.0 - v42;
                  }
                }
                if ((float)(v56 - v42) >= 0.0)
                {
                  if ((float)(v56 + v42) >= 1.0) {
                    float v42 = 1.0 - v42;
                  }
                  else {
                    float v42 = v56;
                  }
                }
              }
              double v61 = v36;
              if (v36 > 30.0) {
                double v61 = 30.0;
              }
              if (v36 >= 1.0) {
                double v62 = v61;
              }
              else {
                double v62 = 1.0;
              }
              if (v520)
              {
                float v63 = *(float *)(v553 + 4);
                float v64 = *(float *)(v553 + 8);
                if ((float)(vabds_f32(v38, *(float *)v553) + vabds_f32(v42, v63)) > 0.007
                  || vabds_f32(v64, *(float *)&v28) > 0.009)
                {
                  double v66 = v62 * -0.00332999998 + 0.219999999;
                  double v67 = v62 * -0.00332999998 + 0.150000006;
                  float v38 = (1.0 - v66) * *(float *)v553 + v66 * v38;
                  float v68 = (1.0 - v66) * v63 + v66 * v42;
                  uint64_t v65 = (float *)v553;
                  *(float *)uint64_t v553 = v38;
                  *(float *)(v553 + 4) = v68;
                  double v69 = *(float *)&v28;
                  *(double *)&long long v28 = (1.0 - v67) * v64 + v67 * *(float *)&v28;
                  *(float *)&long long v28 = *(double *)&v28;
                  float v70 = (1.0 - v67) * *(float *)(v553 + 12) + v67 * v69;
                  *(_DWORD *)(v553 + 8) = v28;
                  *(float *)(v553 + 12) = v70;
                }
                else
                {
                  LODWORD(v28) = *(_DWORD *)(v553 + 8);
                  float v38 = *(float *)v553;
                  uint64_t v65 = (float *)v553;
                }
              }
              else
              {
                uint64_t v65 = (float *)v553;
                *(float *)uint64_t v553 = v38;
                *(float *)(v553 + 4) = v42;
                *(_DWORD *)(v553 + 8) = v28;
                *(_DWORD *)(v553 + 12) = v28;
              }
              *(double *)(v33 + 19384) = (float)(v38 - (float)(*(float *)&v28 * 0.5));
              *(double *)(v33 + 19392) = (float)(v65[1] - (float)(v65[3] * 0.5));
              *(double *)(v33 + 19400) = v65[2];
              v34.n128_f64[0] = v65[3];
              *(void *)(v33 + 19408) = v34.n128_u64[0];
            }
          }
          uint64_t v506 = v11 + 324;
          uint64_t v537 = v33;
          uint32x2_t v515 = a7;
          if (!*(unsigned char *)(v553 + 191)) {
            goto LABEL_156;
          }
          uint64_t v71 = *(FILE **)(v22 + 232);
          if (v71)
          {
            LODWORD(v568[0]) = 0;
            LODWORD(v566) = 0;
            if (!*(_DWORD *)(a4 + 104)) {
              fgets((char *)&v564, 300, v71);
            }
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            int v72 = *(_DWORD *)(a4 + 104);
            int v73 = v568[0];
            if (v72) {
              int v72 = LODWORD(v568[0]) - *(_DWORD *)(a4 + 96);
            }
            *(_DWORD *)(a4 + 84) = v72;
            *(_DWORD *)(a4 + 88) = v73;
            *(_DWORD *)(a4 + 96) = v73;
            fscanf(v71, "%d", v568);
            *(_DWORD *)(a4 + 100) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)uint64_t v11 = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 56) = v568[0];
            fscanf(v71, "%d", v568);
            *(unsigned char *)(v11 + 68) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 324) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 328) = v568[0];
            fscanf(v71, "%d", v568);
            fscanf(v71, "%f", &v566);
            *(double *)(v11 + 312) = *(float *)&v566;
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 320) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 304) = v568[0];
            fscanf(v71, "%d", v568);
            *(_WORD *)(v11 + 148) = v568[0];
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            if (v534 && v534[776]) {
              *(void *)uint64_t v506 = 0;
            }
            int v544 = *(_DWORD *)(v11 + 64);
            uint64_t v22 = v557;
          }
          if (*((unsigned char *)v13 + 4850)) {
            sub_1BBB2F7AC(v22, v11, (uint64_t)v13);
          }
          int v74 = *(FILE **)(v22 + 264);
          if (v74)
          {
            if (!*(_DWORD *)(a4 + 120)) {
              fgets((char *)&v564, 300, *(FILE **)(v22 + 264));
            }
            LODWORD(v568[0]) = 0;
            LODWORD(v566) = 0;
            LODWORD(v565[0]) = 0;
            int v563 = 0;
            fscanf(v74, "%ud", v568);
            while (*(_DWORD *)(a4 + 120) > SLODWORD(v568[0]))
            {
              fgets((char *)&v564, 300, v74);
              fscanf(v74, "%ud", v568);
            }
            fscanf(v74, "%ud", &v566);
            fscanf(v74, "%ud", v565);
            fscanf(v74, "%ud", &v563);
            unsigned __int8 v75 = v565[0];
            v534[149] = v565[0];
            v534[148] = v75;
            unsigned __int8 v76 = v563;
            v534[2] = v563;
            *int v534 = v76;
            uint64_t v22 = v557;
          }
          uint32x2_t v77 = *(FILE **)(v22 + 200);
          uint64_t v33 = v537;
          if (v77)
          {
            int v78 = *(_DWORD *)(a4 + 104);
            uint64_t v79 = *(void *)(v22 + 5392);
            if (v79) {
              v78 += *(_DWORD *)(v79 + 116);
            }
            fprintf(v77, "%11d ", v78);
            fprintf(v77, "%9d ", *(_DWORD *)(a4 + 88));
            fprintf(v77, "%9d ", *(_DWORD *)(a4 + 100));
            fprintf(v77, "%13d ", *(_DWORD *)v11);
            fprintf(v77, "%13d ", *(_DWORD *)(v11 + 56));
            fprintf(v77, "%17d ", *(unsigned __int8 *)(v11 + 68));
            fprintf(v77, "%12d ", *(_DWORD *)(v11 + 324));
            fprintf(v77, "%15d ", *(_DWORD *)(v11 + 328));
            fprintf(v77, "%8d ", 0);
            fprintf(v77, "%10.7lf ", *(double *)(v11 + 312));
            fprintf(v77, "%10d ", *(_DWORD *)(v11 + 320));
            fprintf(v77, "%10d ", *(_DWORD *)(v11 + 304));
            fprintf(v77, "%14d ", *(unsigned __int16 *)(v11 + 148));
            fprintf(v77, "%15d ", 0);
            fprintf(v77, "%11d ", 0);
            fprintf(v77, "%10d ", 0);
            fprintf(v77, "%11d ", 0);
            fputc(10, v77);
            uint64_t v22 = v557;
            uint64_t v33 = v537;
          }
          unint64_t v80 = *(FILE **)(v22 + 216);
          if (v80)
          {
            uint64_t v81 = v22;
            int v82 = *(_DWORD *)(a4 + 104);
            uint64_t v83 = *(void *)(v81 + 5392);
            if (v83) {
              v82 += *(_DWORD *)(v83 + 116);
            }
            if (*v8) {
              fprintf(v80, "x ");
            }
            else {
              fprintf(v80, "  ");
            }
            fprintf(v80, "%10d ", v82);
            fprintf(v80, "%10d ", *(_DWORD *)(a4 + 88));
            fprintf(v80, "%7d ", *(_DWORD *)(a4 + 100));
            fprintf(v80, "%10d ", *(_DWORD *)(v11 + 304));
            fprintf(v80, "%13d ", *(_DWORD *)(v11 + 376));
            fprintf(v80, "%11d ", *(_DWORD *)(v11 + 384));
            fprintf(v80, "%11d ", *(_DWORD *)(v11 + 380));
            uint64_t v22 = v557;
            fprintf(v80, "%11d ", *(_DWORD *)(*(void *)(v557 + 5400) + 28));
            fprintf(v80, "%11d ", (int)*(float *)(v556 + 64));
            fputc(10, v80);
            uint64_t v33 = v537;
          }
          if (!*((unsigned char *)v13 + 660) || !v534) {
            goto LABEL_156;
          }
          if (!v521[348])
          {
LABEL_132:
            uint64_t v88 = v545;
            if (v545)
            {
              if (!*(unsigned char *)(v545 + 224)) {
                *(unsigned char *)(v545 + 224) = *(_DWORD *)(v11 + 324) > 0;
              }
              int v89 = *(_DWORD *)(v11 + 324);
              if (v89 >= 1)
              {
                uint64_t v88 = v545;
                *(_DWORD *)(v545 + 248) += *(_DWORD *)(v545 + 220);
                *(_DWORD *)(v545 + 220) = 0;
                int v89 = *(_DWORD *)(v11 + 324);
              }
              int v90 = *(_DWORD *)(v88 + 232);
              int v91 = *(_DWORD *)(v88 + 228) + v89;
              *(_DWORD *)(v88 + 228) = v91;
              *(_DWORD *)(v88 + 232) = v90 + *(_DWORD *)(v11 + 328);
              *(_DWORD *)(v11 + 324) = v91;
              *(_DWORD *)(v11 + 328) = *(_DWORD *)(v88 + 232);
            }
            if (!v508 || !*(unsigned char *)(v553 + 180))
            {
              uint64_t v92 = *(void *)(v22 + 5416);
              int v93 = *((_DWORD *)v534 + 43);
              if (*(unsigned char *)(v92 + 350)
                || (*(_DWORD *)(v92 + 340) - 3) <= 0xFFFFFFFD
                && (uint64_t v100 = *((void *)v534 + 87),
                    uint64_t v101 = (char)v534[104],
                    int v102 = *(__int16 *)(v100 + 4 * v101 + 2),
                    v93 % v102 < v102 - *(__int16 *)(v100 + 4 * v101)))
              {
                ++*((_DWORD *)v534 + 29);
                v534[776] = 1;
                ++*((_DWORD *)v534 + 202);
                *((_DWORD *)v534 + 43) = v93 + 1;
                ++*v8;
                if (*((unsigned char *)v13 + 4850))
                {
                  uint64_t v94 = *(void *)(v22 + 144);
                  *(unsigned char *)(v553 + 46) = *(unsigned char *)(v94 + 68);
                  *(unsigned char *)(v553 + 47) |= *(unsigned char *)(v94 + 56);
                  uint64_t v95 = v556;
                }
                else
                {
                  uint64_t v95 = v556;
                  if (*(unsigned char *)(v536 + 33))
                  {
                    uint64_t v124 = sub_1BBB07514(v536);
                    if (v124)
                    {
                      uint64_t v43 = v124;
LABEL_388:
                      CFLog();
                      goto LABEL_389;
                    }
                    int v168 = *(unsigned __int8 *)(*(void *)(v536 + 8 * *(int *)(v536 + 64) + 72) + 24);
                  }
                  else
                  {
                    int v168 = *(_DWORD *)(*(void *)(v22 + 128) + 4);
                  }
                  uint64_t v243 = *(void *)(v22 + 144);
                  if (!v168) {
                    *(unsigned char *)(v553 + 46) = *(unsigned char *)(v243 + 68);
                  }
                  *(unsigned char *)(v553 + 47) |= *(unsigned char *)(v243 + 56);
                  if (v521[348]) {
                    sub_1BBB0ED0C(*(int32x2_t **)(v22 + 136), *(void **)(v22 + 5416), 1, *(_DWORD *)(*(void *)(v22 + 128) + 8) != 0);
                  }
                }
                **(_DWORD **)(v22 + 128) = 1;
                uint64_t v96 = *(void *)(v95 + 1960);
                if (v96)
                {
                  uint64_t v43 = 0;
                  ++*(_DWORD *)(v96 + 8);
                  goto LABEL_389;
                }
                goto LABEL_409;
              }
              ++*((_DWORD *)v534 + 202);
              *((_DWORD *)v534 + 43) = v93 + 1;
            }
            **(_DWORD **)(v22 + 128) = 0;
LABEL_156:
            *(_DWORD *)(v33 + 1328) = *(_DWORD *)(a4 + 84);
            *(_DWORD *)(v33 + 1332) = *(_DWORD *)(a4 + 88);
            *(_DWORD *)(v33 + 1336) = *(_DWORD *)(a4 + 100);
            int v103 = *(_DWORD *)(a4 + 64);
            *(unsigned char *)(v33 + 96) = v103;
            *(unsigned char *)(v33 + 1354) = v103;
            uint64_t v511 = v33 + 96;
            *(unsigned char *)(v33 + 97) = *(_DWORD *)(a4 + 64);
            if ((_BYTE)v103)
            {
              *(unsigned char *)(v33 + 101) = *(_DWORD *)(a4 + 68);
              *(unsigned char *)(v33 + 102) = *(_DWORD *)(a4 + 68);
              int v104 = *(_DWORD *)(a4 + 72);
            }
            else
            {
              LOBYTE(v104) = 0;
              *(_WORD *)(v33 + 101) = 0;
            }
            *(unsigned char *)(v33 + 98) = v104;
            if (v13 && v11)
            {
              int v105 = *(_DWORD *)(a4 + 84);
              int v106 = *(_DWORD *)(a4 + 100);
              if (v105 < 1)
              {
                unsigned int v107 = *(_DWORD *)(a4 + 104);
                if (v107 && (int v108 = *(_DWORD *)(a4 + 88)) != 0)
                {
                  v34.n128_f32[0] = (float)((float)v106 * (float)v107) / (float)v108;
                  int v105 = v108 / v107;
                }
                else
                {
                  v34.n128_u32[0] = *(_DWORD *)(v11 + 28);
                  int v105 = (int)(float)((float)v106 / v34.n128_f32[0]);
                }
              }
              else
              {
                v34.n128_f32[0] = (float)v106 / (float)v105;
                unsigned int v107 = *(_DWORD *)(a4 + 104);
              }
              int v109 = 0;
              int v110 = 0;
              int v111 = 0;
              *(_DWORD *)(v11 + 4 * (v107 % 5) + 36) = v105;
              *(_DWORD *)(v11 + 28) = v34.n128_u32[0];
              unsigned int v112 = *(_DWORD *)(a4 + 104);
              unsigned int v113 = v112;
              do
              {
                if ((int)(v112 + v109) >= 0)
                {
                  ++v110;
                  v111 += *(_DWORD *)(v11 + 4 * (v109 + v112 - 5 * (v113 / 5)) + 36);
                }
                --v109;
                --v113;
              }
              while (v109 != -5);
              float v114 = v34.n128_f32[0];
              if (v111 > 0) {
                float v114 = (float)((float)v106 * (float)v110) / (float)v111;
              }
              *(float *)(v11 + 32) = v114;
              float v115 = *((float *)v13 + 17);
              if (*((float *)v13 + 16) < v115 && *(_DWORD *)(a4 + 104)) {
                *((float *)v13 + 16) = v115;
              }
              *((_DWORD *)v13 + 17) = v34.n128_u32[0];
            }
            if (v521[348] && v534 && v521[349])
            {
              double v116 = (unsigned int *)(v22 + 57096);
              if (*((unsigned char *)v13 + 4850))
              {
                uint64_t v117 = *(void **)(v22 + 5416);
                uint64_t v118 = *(unsigned __int8 *)(v556 + 133);
                uint64_t v119 = *v116;
                uint64_t v120 = *(unsigned int *)(v22 + 57100);
                uint64_t v121 = (uint64_t)v534;
                BOOL v122 = 1;
LABEL_190:
                sub_1BBB0EF10(v121, (unint64_t)v117, v118, v119, v120, v122);
                uint64_t v33 = v537;
                goto LABEL_191;
              }
              if (*(_DWORD *)(*(void *)(v22 + 128) + 4))
              {
                uint64_t v117 = *(void **)(v22 + 5416);
                if (*((unsigned char *)v13 + 4856))
                {
                  uint64_t v123 = v117[22];
                }
                else
                {
                  uint64_t v123 = v117[19];
                  v117[18] = v117[*(int *)(*(void *)(v22 + 136) + 4868) + 15];
                  uint64_t v117 = *(void **)(v22 + 5416);
                }
                BOOL v122 = v123 != 0;
                uint64_t v118 = *(unsigned __int8 *)(v556 + 133);
                uint64_t v119 = *v116;
                uint64_t v120 = *(unsigned int *)(v22 + 57100);
                uint64_t v121 = (uint64_t)v534;
                goto LABEL_190;
              }
            }
LABEL_191:
            if (*((unsigned char *)v13 + 4850))
            {
              uint64_t v125 = sub_1BBB2F3C0(v22, v33, *(void *)(v22 + 136), *(void *)(v22 + 144), v520);
              uint64_t v33 = v537;
              if (v125)
              {
                uint64_t v43 = v125;
                goto LABEL_388;
              }
            }
            uint64_t v546 = v33 + 19112;
            if (!v14
              || !*((unsigned char *)v13 + 402)
              || (v520 & 0x80000000) != 0
              || (uint64_t v126 = *(void *)(v14 + 24)) == 0
              || *(_DWORD *)(v14 + 12) <= v520
              || !*(unsigned char *)(v126 + 8 * v520 + 7))
            {
              if (a6)
              {
                unsigned int v528 = v8;
                float v127 = v26;
                uint64_t v128 = v12;
                int v129 = *(_DWORD *)(a4 + 32);
                if (v129)
                {
                  uint64_t v130 = *(unsigned int *)(v537 + 232);
                  uint64_t v131 = *(char **)(v537 + 144);
                  uint64_t v132 = *(unsigned int *)(a4 + 16);
                  size_t v133 = *(unsigned int *)(a4 + 24);
                  unint64_t v134 = *(char **)a4;
                  do
                  {
                    memcpy(v131, v134, v133);
                    v134 += v132;
                    v131 += v130;
                    --v129;
                  }
                  while (v129);
                }
                uint64_t v12 = v128;
                uint64_t v26 = v127;
                uint64_t v22 = v557;
                uint64_t v11 = v558;
                int v8 = v528;
                uint64_t v33 = v537;
                if (*(unsigned char *)(a4 + 156))
                {
                  int v135 = *(_DWORD *)(a4 + 36) * *(_DWORD *)(a4 + 24);
                  memset(*(void **)(v537 + 136), 128, (uint64_t)(v135 + (v135 < 0)) >> 1);
                  uint64_t v33 = v537;
                }
              }
              else if ((*(_DWORD *)(a4 + 20) | 0x10) != 0x34323076)
              {
                uint64_t v167 = sub_1BBB0B02C(a4, v33);
                uint64_t v33 = v537;
                if (v167)
                {
                  uint64_t v43 = v167;
                  goto LABEL_388;
                }
              }
              if (*((unsigned char *)v13 + 4850))
              {
                sub_1BBB2F330(v11, v33, *(void *)(v22 + 152), *((unsigned __int8 *)v13 + 577));
                uint64_t v33 = v537;
              }
              __n128 v34 = *(__n128 *)(v11 + 568);
              long long v28 = *(_OWORD *)(v11 + 584);
              *(__n128 *)(v33 + 19320) = v34;
              *(_OWORD *)(v33 + 19336) = v28;
              *(unsigned char *)(v546 + 266) = 0;
              *(_DWORD *)(v546 + 240) = *(_DWORD *)(v11 + 600);
            }
            uint64_t v136 = v8;
            uint64_t v517 = v12;
            uint64_t v137 = *(void *)(a4 + 112);
            uint64_t v138 = *((void *)v13 + 647);
            uint64_t v139 = *(void *)(v22 + 5416);
            uint64_t v140 = *(void *)(v559 + 2312);
            unsigned int v141 = *(_DWORD *)(v33 + 228);
            int v142 = *(_DWORD *)(v33 + 196);
            int v143 = *(_DWORD *)(a4 + 60);
            *(_DWORD *)(v546 + 28) = 0;
            *(void *)(v546 + 32) = v141;
            *(_DWORD *)(v546 + 40) = v142;
            *(unsigned char *)(v546 + 24) = 0;
            unsigned int v144 = *(_DWORD *)(a4 + 24) + 4095;
            *(unsigned char *)(v546 + 25) = v144 >> 4;
            *(unsigned char *)(v546 + 26) = 0;
            unsigned int v145 = *(_DWORD *)(a4 + 36) + 4095;
            *(unsigned char *)(v546 + 27) = v145 >> 4;
            *(_DWORD *)(v546 + 44) = (v144 >> 4)
                                   + 1
                                   + ((v144 >> 4) + 1) * (v145 >> 4);
            if (!*((unsigned char *)v13 + 663)
              || (int v146 = *(unsigned __int8 *)(v22 + 1057), !*(unsigned char *)(v22 + 1057))
              && *((char *)v13 + 682) <= 0
              && *((char *)v13 + 686) < 1
              || (v141 & 0xF) != 0
              || (v142 & 0xF) != 0
              || (int)v141 < 1
              || v142 < 1)
            {
              if ((*(_DWORD *)(a4 + 20) | 0x10) != 0x34323076)
              {
                uint64_t v12 = v517;
                int v8 = v136;
LABEL_219:
                uint64x2_t v150 = v554;
                goto LABEL_220;
              }
              uint64_t v147 = v138;
              char v148 = v143;
              int v149 = sub_1BBB0B02C(a4, v33);
              LOBYTE(v143) = v148;
              uint64_t v138 = v147;
              uint64_t v33 = v537;
              uint64_t v12 = v517;
              int v8 = v136;
              uint64x2_t v150 = v554;
              if (v149)
              {
                CFLog();
                uint64_t v33 = v537;
                uint64_t v11 = v558;
                goto LABEL_223;
              }
LABEL_220:
              *(unsigned char *)(v546 + 16) = *(unsigned char *)(v138 + 1057);
              *(_WORD *)(v546 + 4) = v141;
              *(_WORD *)uint64_t v546 = v141;
              *(_WORD *)(v546 + 8) = v141;
              *(_WORD *)(v546 + 6) = v142;
              *(_WORD *)(v546 + 2) = v142;
              *(_WORD *)(v546 + 10) = v142;
              *(_WORD *)(v546 + 12) = *(_DWORD *)(v138 + 1576);
              *(_WORD *)(v546 + 14) = *(_DWORD *)(v138 + 1580);
              *(unsigned char *)(v546 + 17) = 0;
              *(unsigned char *)(v33 + 1395) = v143;
              *(_DWORD *)(v33 + 1276) = v520;
              *(void *)(v33 + 1408) = v137;
              *(unsigned char *)(v33 + 1352) = v143;
              uint64_t v11 = v558;
              if (v558)
              {
                *(unsigned char *)(v33 + 1369) = *(_DWORD *)(v558 + 152);
                *(_DWORD *)(v33 + 1372) = *(_DWORD *)(v558 + 352);
                *(_DWORD *)(v33 + 1376) = *(_DWORD *)(v558 + 364);
                *(_DWORD *)(v33 + 1380) = *(_DWORD *)(v558 + 368);
                *(_DWORD *)(v33 + 1384) = *(_DWORD *)(v558 + 356);
                *(_DWORD *)(v33 + 1388) = *(_DWORD *)(v558 + 360);
              }
              else
              {
                *(_DWORD *)(v33 + 1372) = 0;
              }
LABEL_223:
              if (*((unsigned char *)v13 + 577) == 1 && *((unsigned char *)v13 + 657) == 1)
              {
                LODWORD(v28) = *(_DWORD *)(v11 + 632);
                *(double *)&unint64_t v151 = (double)(unint64_t)v28;
                double v152 = *(double *)(v11 + 624) * *(double *)&v151;
                LODWORD(v151) = *(_DWORD *)(v11 + 640);
                *(double *)&unint64_t v153 = (double)v151;
                double v154 = v152 * *(double *)&v153;
                LODWORD(v153) = *(_DWORD *)(v11 + 636);
                v34.n128_f64[0] = v154 * (double)v153;
                *(void *)(v33 + 48) = v34.n128_u64[0];
              }
              if (v550[38])
              {
                uint64_t v53 = sub_1BBAF3EB8((uint64_t)v150, *((void *)v13 + 648), v13, v22, v33, v34);
                if (v53) {
                  goto LABEL_228;
                }
              }
              else
              {
                sub_1BBAF3CD0((uint64_t)v150, v33);
              }
              sub_1BBAF7CE4(v150, (uint64_t)v26, v548, &v562);
              uint64_t v24 = v536;
              a7 = v515;
              if (!*((unsigned char *)v13 + 663)) {
                goto LABEL_266;
              }
              if (!v534) {
                goto LABEL_266;
              }
              if (*((unsigned char *)v13 + 262) != 3) {
                goto LABEL_266;
              }
              float v155 = *(float *)(v22 + 1048);
              if (v155 < 0.0) {
                goto LABEL_266;
              }
              int v156 = *v534;
              if (v156 != 3)
              {
                if (v156 == 2)
                {
                  unsigned int v157 = (1049 * (*(unsigned __int16 *)(v537 + 4832) >> 5)) >> 17;
                  float64x2_t v158 = (unsigned char *)(*(void *)v541 + 207678);
                  goto LABEL_237;
                }
                if ((*(__int16 *)(*((void *)v534 + 98) + 8 * (char)v534[148] + 4) - 1) <= 0x13E)
                {
                  unsigned int v157 = (1049 * (*(unsigned __int16 *)(v537 + 4832) >> 5)) >> 17;
                  float64x2_t v158 = (unsigned char *)(*(void *)v541 + 207678);
                  if (*(unsigned __int16 *)(*((void *)v534 + 98) + 8 * (char)v534[148] + 4) < 0x100u)
                  {
                    if (v157 >= 2) {
                      LOBYTE(v157) = 2;
                    }
                    LOBYTE(v157) = v157 | 4;
                    goto LABEL_240;
                  }
LABEL_237:
                  if (v157 >= 3) {
                    LOBYTE(v157) = 3;
                  }
                  LOBYTE(v157) = v157 + 3;
LABEL_240:
                  *float64x2_t v158 = v157;
                  goto LABEL_265;
                }
              }
              int v170 = (int)(v155 + 0.5);
              if (v170 < 28)
              {
LABEL_266:
                if (a6)
                {
                  int v171 = *(unsigned __int8 *)(a4 + 156);
                  uint64_t v45 = v556;
                  if (v171)
                  {
                    *(unsigned char *)(v537 + 1368) = 7;
                    *(unsigned char *)(v537 + 1394) = 1;
                  }
                }
                else
                {
                  uint64_t v45 = v556;
                  if (a5 && *(unsigned char *)(v537 + 1393)) {
                    *a5 = 1;
                  }
                }
                *(_WORD *)(v546 + 196) = 0;
                *(unsigned char *)(v22 + 1725) = 0;
                if (*(unsigned char *)(*(void *)(v22 + 136) + 577) == 1)
                {
                  if (*v550)
                  {
                    uint64_t v172 = *(void *)(*(void *)v541 + 5392);
                    if (v172)
                    {
                      if (*(unsigned char *)(v546 + 52)
                        && (float v173 = *(float *)(v546 + 200), v173 > 1.0e-10)
                        && (float v174 = *(double *)(v172 + 136), v174 < 14.0)
                        && *v534 != 3)
                      {
                        *(unsigned char *)(v546 + 197) = 5;
                        *(unsigned char *)(v546 + 196) = (int)(float)-fminf(log2f((float)(v173 * 0.43877) + 1.0) * 6.0, 5.0);
                        if (v173 > 1.0
                          && !*(unsigned char *)(v537 + 4913)
                          && !*(_DWORD *)(v559 + 2292)
                          && (v174 < 11.0 || *(unsigned char *)(v45 + 133)))
                        {
                          if (v174 <= 9.0)
                          {
                            LOBYTE(v248) = 5;
                          }
                          else
                          {
                            uint64_t v245 = *(float **)(*(void *)v541 + 5392);
                            float v246 = (float)((float)(v245[36] - v245[5]) * 5.0) / (float)(v245[4] - v245[5]);
                            float v247 = 0.0;
                            if (v246 >= 0.0)
                            {
                              float v247 = 5.0;
                              if (v246 <= 5.0) {
                                float v247 = (float)((float)(v245[36] - v245[5]) * 5.0) / (float)(v245[4] - v245[5]);
                              }
                            }
                            int v248 = (int)v247;
                          }
                          *(unsigned char *)(v22 + 1725) = v248;
                        }
                        if (*v550 == 1)
                        {
                          *(_WORD *)(v546 + 196) = 1531;
                          *(unsigned char *)(v22 + 1725) = 5;
                        }
                      }
                      else if (*(_DWORD *)(v22 + 5072) != -1)
                      {
                        *(_OWORD *)(v22 + 5056) = 0u;
                        *(_OWORD *)(v22 + 5040) = 0u;
                        *(_OWORD *)(v22 + 5024) = 0u;
                        *(_OWORD *)(v22 + 5008) = 0u;
                        *(_OWORD *)(v22 + 4992) = 0u;
                        *(_OWORD *)(v22 + 4976) = 0u;
                        *(_OWORD *)(v22 + 4960) = 0u;
                        *(_OWORD *)(v22 + 4944) = 0u;
                        *(_OWORD *)(v22 + 4928) = 0u;
                        *(_OWORD *)(v22 + 4912) = 0u;
                        *(_DWORD *)(v22 + 5072) = -1;
                      }
                    }
                  }
                }
                goto LABEL_281;
              }
              unsigned int v157 = (v170 - 27) >> 1;
              if (v157 >= 6) {
                LOBYTE(v157) = 6;
              }
              *(unsigned char *)(*(void *)v541 + 207678) = v157;
LABEL_265:
              *(unsigned char *)(*(void *)v541 + 207679) = v157;
              goto LABEL_266;
            }
            uint64_t v509 = v137;
            uint64_t v159 = *(unsigned __int16 *)(v33 + 232);
            uint64_t v160 = *(unsigned __int16 *)(v33 + 248);
            if (v520 || (uint64_t v161 = *(void *)(v22 + 5392)) == 0)
            {
LABEL_478:
              int v258 = v141;
              int v259 = v142;
              uint64_t v137 = v509;
              if (!v146) {
                goto LABEL_525;
              }
              uint64_t v260 = *(unsigned __int8 **)(v22 + 5392);
              int v258 = v141;
              int v259 = v142;
              if (!v260) {
                goto LABEL_525;
              }
              int v261 = *v260;
              if (v261 == 2)
              {
                int v259 = 192;
                int v258 = 256;
              }
              else
              {
                if (v261 == 3)
                {
                  int v258 = 320;
                  int v259 = 240;
LABEL_487:
                  if (v141 >= v142 || v258 <= v259)
                  {
LABEL_490:
                    if (v146 == 1)
                    {
                      *(_DWORD *)(v138 + 1576) = v258;
                      *(_DWORD *)(v138 + 1580) = v259;
                    }
                    else
                    {
                      int v258 = v141;
                      int v259 = v142;
                      if (v146 == 2)
                      {
                        uint64_t v496 = v159;
                        uint64_t v502 = v160;
                        char v484 = v143;
                        uint64_t v490 = v138;
                        sub_1BBB0EC14((uint64_t)v260, v520);
                        BOOL v264 = *(unsigned __int8 **)(v22 + 5392);
                        int v265 = v264[730];
                        int v266 = *v264;
                        if ((int)(v142 * v141) < 76801)
                        {
                          if (v266 == 3) {
                            int v265 = 0;
                          }
                          int v267 = 160;
                          int v268 = 176;
                          unsigned int v269 = 240;
                          unsigned int v270 = 320;
                        }
                        else if (v266 == 3 || *((unsigned char *)v13 + 666))
                        {
                          int v267 = 240;
                          int v268 = 320;
                          unsigned int v269 = 480;
                          unsigned int v270 = 640;
                          int v265 = 1;
                        }
                        else
                        {
                          int v267 = 240;
                          int v268 = 320;
                          unsigned int v269 = 480;
                          unsigned int v270 = 640;
                        }
                        uint64_t v33 = v537;
                        uint64_t v138 = v490;
                        uint64_t v159 = v496;
                        LOBYTE(v143) = v484;
                        uint64_t v160 = v502;
                        if (!v520)
                        {
                          *(_DWORD *)(v22 + 1576) = v270;
                          *(_DWORD *)(v22 + 1580) = v269;
                        }
                        if (v265 == 1)
                        {
                          *(_DWORD *)(v490 + 1576) = v268;
                          *(_DWORD *)(v490 + 1580) = v267;
                          int v258 = v268;
                          int v259 = v267;
                        }
                        else
                        {
                          int v258 = v141;
                          int v259 = v142;
                          if (!v265)
                          {
                            int v271 = *(_DWORD *)(v490 + 1576);
                            if (v268 > v271) {
                              int v271 = v268;
                            }
                            int v272 = *(_DWORD *)(v490 + 1580);
                            if (v267 > v272) {
                              int v272 = v267;
                            }
                            unsigned int v273 = v271 + 16;
                            unsigned int v274 = v272 + 16;
                            BOOL v275 = v270 > v273;
                            if (v270 < v273) {
                              unsigned int v273 = v270;
                            }
                            *(_DWORD *)(v490 + 1576) = v273;
                            int v276 = v275;
                            BOOL v277 = v269 > v274;
                            if (v269 < v274) {
                              unsigned int v274 = v269;
                            }
                            *(_DWORD *)(v490 + 1580) = v274;
                            if (v277) {
                              int v276 = 1;
                            }
                            if (v276) {
                              int v258 = v268;
                            }
                            else {
                              int v258 = v270;
                            }
                            if (v276) {
                              int v259 = v267;
                            }
                            else {
                              int v259 = v269;
                            }
                          }
                        }
                      }
                    }
LABEL_525:
                    if (!v140)
                    {
LABEL_532:
                      if (!v521[348] || !*(_DWORD *)(v139 + 368))
                      {
LABEL_552:
                        if (*(unsigned char *)(v556 + 136))
                        {
                          int v303 = *(_DWORD *)(v558 + 356);
                          int v8 = v136;
                          if (v303 < 1
                            || (int v304 = *(_DWORD *)(v558 + 360), v304 < 1)
                            || (int v305 = *(_DWORD *)(v558 + 364), v305 <= -((unsigned __int16)v141 >> 1))
                            || v303 > (unsigned __int16)v141
                            || (int v306 = *(_DWORD *)(v558 + 368), v306 <= -((unsigned __int16)v142 >> 1))
                            || v304 > (unsigned __int16)v142
                            || (int v307 = (unsigned __int16)v141 >> 1, v305 >= v307)
                            || (int v308 = (unsigned __int16)v142 >> 1, v306 >= v308))
                          {
                            unsigned int v325 = (unsigned __int16)v258 - 1;
                            *(_DWORD *)(v546 + 28) = 0;
                            *(_DWORD *)(v546 + 32) = v325;
                            unsigned int v326 = (unsigned __int16)v259 - 1;
                            *(_DWORD *)(v546 + 36) = 0;
                            *(_DWORD *)(v546 + 40) = v326;
                            *(unsigned char *)(v546 + 24) = 0;
                            *(unsigned char *)(v546 + 26) = 0;
                            unsigned int v327 = v325 >> 4;
                            *(unsigned char *)(v546 + 25) = v325 >> 4;
                            unsigned int v328 = v326 >> 4;
                            *(unsigned char *)(v546 + 27) = v326 >> 4;
                            int v329 = 1;
                            int v330 = 1;
                            uint64_t v12 = v517;
                            uint64x2_t v150 = v554;
LABEL_590:
                            int v331 = (v330 + v327) * (v329 + v328);
LABEL_591:
                            *(_DWORD *)(v546 + 44) = v331;
                            LOWORD(v142) = v259;
                            LOWORD(v141) = v258;
                            goto LABEL_220;
                          }
                          unsigned int v309 = v307 - (v303 >> 1) + v305;
                          int v310 = (int)(v309 * (unsigned __int16)v258) / (unsigned __int16)v141;
                          unsigned int v311 = v310 & 0xFFFFFFF0;
                          unsigned int v312 = (v310 & 0xFFFFFFF0) - 16;
                          if ((int)(v310 & 0xFFFFFFF0) < 17) {
                            unsigned int v312 = 0;
                          }
                          if ((v310 & 0xC) == 0) {
                            unsigned int v311 = v312;
                          }
                          uint64_t v12 = v517;
                          uint64x2_t v150 = v554;
                          if ((v311 & 0x80000000) != 0)
                          {
                            int v318 = (unsigned __int16)v258 - 1;
                            int v313 = (unsigned __int16)v259 - 1;
                          }
                          else
                          {
                            int v313 = (unsigned __int16)v259 - 1;
                            unsigned int v314 = v308 - (v304 >> 1) + v306;
                            int v315 = (int)((unsigned __int16)v142 + (v304 + v314 - 1) * (unsigned __int16)v259 - 1)
                                 / (unsigned __int16)v142;
                            if ((v315 | 0xF) - v315 <= 3) {
                              int v316 = (v315 | 0xF) + 16;
                            }
                            else {
                              int v316 = v315 | 0xF;
                            }
                            if (v313 >= v316) {
                              int v317 = v316;
                            }
                            else {
                              int v317 = (unsigned __int16)v259 - 1;
                            }
                            int v318 = (unsigned __int16)v258 - 1;
                            int v319 = (int)((unsigned __int16)v141 + (v303 + v309 - 1) * (unsigned __int16)v258 - 1)
                                 / (unsigned __int16)v141;
                            if ((v319 | 0xF) - v319 <= 3) {
                              int v320 = (v319 | 0xF) + 16;
                            }
                            else {
                              int v320 = v319 | 0xF;
                            }
                            if (v318 >= v320) {
                              int v321 = v320;
                            }
                            else {
                              int v321 = (unsigned __int16)v258 - 1;
                            }
                            int v322 = (int)(v314 * (unsigned __int16)v259) / (unsigned __int16)v142;
                            unsigned int v323 = (v322 & 0xFFFFFFF0) - 16;
                            if ((int)(v322 & 0xFFFFFFF0) < 17) {
                              unsigned int v323 = 0;
                            }
                            if ((v322 & 0xC) != 0) {
                              unsigned int v324 = v322 & 0xFFFFFFF0;
                            }
                            else {
                              unsigned int v324 = v323;
                            }
                            if (v311 < (unsigned __int16)v258
                              && (v324 & 0x80000000) == 0
                              && (int)v324 < (unsigned __int16)v259
                              && v321 >= (int)v311
                              && v317 >= (int)v324)
                            {
                              int v318 = v321;
                              int v313 = v317;
LABEL_638:
                              unsigned int v366 = v311 >> 4;
                              *(_DWORD *)(v546 + 28) = v311;
                              *(_DWORD *)(v546 + 32) = v318;
                              unsigned int v367 = v324 >> 4;
                              unsigned int v327 = v318 >> 4;
                              *(_DWORD *)(v546 + 36) = v324;
                              *(_DWORD *)(v546 + 40) = v313;
                              unsigned int v328 = v313 >> 4;
                              *(unsigned char *)(v546 + 24) = v366;
                              *(unsigned char *)(v546 + 26) = v324 >> 4;
                              int v330 = 1 - v366;
                              *(unsigned char *)(v546 + 25) = v327;
                              *(unsigned char *)(v546 + 27) = v328;
                              int v329 = 1 - v367;
                              goto LABEL_590;
                            }
                          }
                          unsigned int v311 = 0;
                          unsigned int v324 = 0;
                          goto LABEL_638;
                        }
                        int v333 = *(char **)(v33 + 128);
                        int v332 = *(char **)(v33 + 136);
                        BOOL v334 = v333;
                        char v335 = v332;
                        unsigned int v336 = v159;
                        uint64_t v337 = v160;
                        int v8 = v136;
                        if ((*(_DWORD *)(a4 + 20) | 0x10) == 0x34323076)
                        {
                          BOOL v334 = *(char **)(a4 + 184);
                          char v335 = *(char **)(a4 + 208);
                          unsigned int v336 = *(unsigned __int16 *)(a4 + 192);
                          LODWORD(v160) = *(unsigned __int16 *)(a4 + 216);
                        }
                        unsigned int v512 = v336;
                        int v338 = *(_DWORD *)(v33 + 224);
                        int v339 = *(_DWORD *)(v33 + 192);
                        if (v338 < v258) {
                          int v258 = *(_DWORD *)(v33 + 224);
                        }
                        if (v339 < v259) {
                          LOWORD(v259) = *(_DWORD *)(v33 + 192);
                        }
                        uint64_t v340 = *(void *)(a4 + 176);
                        uint64_t v461 = *(void *)(v22 + 1776);
                        int v474 = *(char **)(v22 + 1784);
                        int v341 = (unsigned __int16)*(_DWORD *)(v33 + 192);
                        int v467 = *(_DWORD *)(v138 + 1576);
                        int v342 = *(_DWORD *)(v138 + 1580);
                        int v343 = *((unsigned __int8 *)v13 + 683);
                        int v344 = *((unsigned __int8 *)v13 + 684);
                        __src = v335;
                        uint64_t v470 = (uint64_t *)(v138 + 1064);
                        uint64_t v345 = *((void *)v13 + 647);
                        int v465 = *(_DWORD *)(v33 + 1276);
                        uint64_t v346 = (int8x8_t *)(v345 + 1080);
                        *(void *)(v345 + 1080) = v334;
                        *(void *)(v345 + 1096) = v333;
                        *(void *)(v345 + 1088) = v335;
                        *(void *)(v345 + 1104) = v332;
                        *(void *)(v345 + 1112) = v340;
                        *(_DWORD *)(v345 + 1120) = 1;
                        *(_DWORD *)(v345 + 1128) = 2;
                        *(void *)(v345 + 1152) = 0x400000008;
                        *(_DWORD *)(v345 + 1164) = v343;
                        *(_DWORD *)(v345 + 1172) = v344;
                        *(void *)(v345 + 1176) = 1;
                        *(_DWORD *)(v345 + 1188) = 0;
                        *(_DWORD *)(v345 + 1220) = 0;
                        __n128 v34 = 0uLL;
                        *(void *)(v345 + 1224) = 0;
                        *(_DWORD *)(v345 + 1232) = (unsigned __int16)v338;
                        int v347 = (unsigned __int16)v258;
                        *(_DWORD *)(v345 + 1236) = (unsigned __int16)v258;
                        unsigned __int16 v466 = v339;
                        uint64_t v348 = (unsigned __int16)v339;
                        unsigned int v349 = v512;
                        *(_DWORD *)(v345 + 1240) = v348;
                        *(_WORD *)(v345 + 1320) = 1;
                        int v350 = (unsigned __int16)v259;
                        *(_DWORD *)(v345 + 1244) = (unsigned __int16)v259;
                        *(_DWORD *)(v345 + 1248) = v512;
                        *(_DWORD *)(v345 + 1252) = v159;
                        unsigned int v460 = v160;
                        *(_DWORD *)(v345 + 1256) = v160;
                        *(_DWORD *)(v345 + 1260) = v337;
                        *(_DWORD *)(v345 + 1272) = 0;
                        *(void *)(v345 + 1264) = 0;
                        *(_DWORD *)(v345 + 1168) = 0;
                        BOOL v351 = (unsigned __int16)v258 == (unsigned __int16)v338 && (unsigned __int16)v259 == v341;
                        int v352 = v351;
                        *(_DWORD *)(v345 + 1160) = 0;
                        if (v351)
                        {
                          if (!v333) {
                            goto LABEL_618;
                          }
                          uint64_t v459 = v345 + 1080;
                          unsigned __int16 v458 = v342;
                          unsigned __int16 v457 = v338;
                          __uint64_t n = (unsigned __int16)v338;
                          uint64_t v471 = v348;
                          __b = v333;
                          uint64_t v499 = v159;
                          uint64_t v505 = v337;
                          uint64_t v523 = v332;
                          uint64_t v353 = v461;
                          if (!v332) {
                            goto LABEL_618;
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v345 + 1160) = 2;
                          if (*(unsigned char *)(*((void *)v13 + 647) + 1624)) {
                            int v354 = 6;
                          }
                          else {
                            int v354 = 7;
                          }
                          *(_DWORD *)(v345 + 1128) = v354;
                          if (*((unsigned char *)v13 + 667)) {
                            int v354 = 4;
                          }
                          *(_DWORD *)(v345 + 1128) = v354;
                          if (!v333 || !v332) {
                            goto LABEL_618;
                          }
                          int v455 = v352;
                          int v463 = (unsigned __int16)v258;
                          unsigned __int16 v458 = v342;
                          unsigned __int16 v457 = v338;
                          __uint64_t n = (unsigned __int16)v338;
                          uint64_t v471 = v348;
                          __b = v333;
                          uint64_t v523 = v332;
                          __int16 v480 = v258;
                          uint64_t v499 = v159;
                          uint64_t v505 = v337;
                          char v487 = v143;
                          uint64_t v493 = v138;
                          uint64_t v353 = v461;
                          *(void *)(v345 + 1096) = v461;
                          *(void *)(v345 + 1104) = v474;
                          uint64_t v355 = *v470;
                          uint64_t v459 = v345 + 1080;
                          if (!*v470)
                          {
                            if (sub_1BBB4EE18(v470, (uint64_t)v346))
                            {
                              LOWORD(v142) = v259;
                              LOWORD(v141) = v480;
                              uint64_t v12 = v517;
LABEL_744:
                              uint64x2_t v150 = v554;
                              uint64_t v33 = v537;
                              uint64_t v138 = v493;
                              LOBYTE(v143) = v487;
                              goto LABEL_220;
                            }
                            uint64_t v355 = *v470;
                            uint64_t v346 = (int8x8_t *)(v345 + 1080);
                          }
                          int v356 = sub_1BBB4EFD8(v355, v346);
                          uint64_t v33 = v537;
                          uint64_t v138 = v493;
                          LOWORD(v258) = v480;
                          LOBYTE(v143) = v487;
                          int v350 = (unsigned __int16)v259;
                          int v347 = v463;
                          unsigned int v349 = v512;
                          int v352 = v455;
                          if (v356)
                          {
LABEL_618:
                            LOWORD(v142) = v259;
                            LOWORD(v141) = v258;
                            uint64_t v12 = v517;
                            goto LABEL_219;
                          }
                        }
                        int v462 = v350;
                        int v464 = v347;
                        unsigned __int16 v481 = v258;
                        char v487 = v143;
                        uint64_t v493 = v138;
                        int v533 = v26;
                        int v357 = __src;
                        if (!*v550 || !*(_DWORD *)(v558 + 540) && !*(_DWORD *)(v558 + 544))
                        {
LABEL_648:
                          if (v352)
                          {
                            if (v334 != __b || v357 != v523)
                            {
                              if (v471)
                              {
                                int v375 = v471;
                                uint64_t v376 = __b;
                                uint64_t v377 = v349;
                                do
                                {
                                  memcpy(v376, v334, __n);
                                  v376 += v499;
                                  v334 += v377;
                                  --v375;
                                }
                                while (v375);
                                uint64_t v378 = __src;
                                if (v471 >= 2)
                                {
                                  unsigned int v379 = v471 >> 1;
                                  char v380 = v523;
                                  do
                                  {
                                    memcpy(v380, v378, __n);
                                    v380 += v505;
                                    v378 += v460;
                                    --v379;
                                  }
                                  while (v379);
                                }
                              }
                            }
                          }
                          else if (v471)
                          {
                            uint64_t v381 = 0;
                            int v382 = v471;
                            do
                            {
                              memcpy(&__b[v381], (const void *)(v461 + v381), __n);
                              v381 += v499;
                              --v382;
                            }
                            while (v382);
                            if (v471 >= 2)
                            {
                              uint64_t v383 = 0;
                              unsigned int v384 = v471 >> 1;
                              do
                              {
                                memcpy(&v523[v383], &v474[v383], __n);
                                v383 += v505;
                                --v384;
                              }
                              while (v384);
                            }
                          }
LABEL_664:
                          uint64_t v12 = v517;
                          uint64_t v26 = v533;
                          uint64_t v22 = v557;
                          uint64_t v137 = v509;
                          if (v550[27] == 1) {
                            goto LABEL_679;
                          }
                          int v8 = v136;
                          int v385 = *(_DWORD *)(v345 + 5336);
                          if (v385) {
                            *(_DWORD *)(v345 + 5336) = --v385;
                          }
                          uint64_t v386 = (int8x8_t *)v459;
                          int v387 = *(_DWORD *)(v345 + 5340);
                          if (v387)
                          {
                            float v388 = 0.0;
                            float v389 = 0.0;
                            if (*(unsigned char *)(v558 + 673)) {
                              float v389 = vaddvq_f64(vabdq_f64(vcvtq_f64_f32(*(float32x2_t *)(v345 + 5344)), *(float64x2_t *)(v506 + 244)))+ vabdd_f64(*(float *)(v345 + 5352), *(double *)(v558 + 584))+ vabdd_f64(*(float *)(v345 + 5356), *(double *)(v558 + 592));
                            }
                            if (*(_DWORD *)(v558 + 540) && *(float *)(v345 + 5384) > 0.0) {
                              float v388 = (float)((float)(vabds_f32(*(float *)(v345 + 5360), *(float *)(v558 + 404))
                            }
                                                   + vabds_f32(*(float *)(v345 + 5364), *(float *)(v558 + 408)))
                                           + vabds_f32(*(float *)(v345 + 5368), *(float *)(v558 + 412)))
                                   + vabds_f32(*(float *)(v345 + 5372), *(float *)(v558 + 416));
                          }
                          else
                          {
                            float v389 = 0.0;
                            float v388 = 0.0;
                          }
                          if ((float)(v389 + *(float *)(v345 + 5380)) > 0.025
                            || (float)(v388 + *(float *)(v345 + 5376)) > 0.1)
                          {
                            int v385 = 5;
                            *(_DWORD *)(v345 + 5336) = 5;
                          }
                          float v390 = *(double *)(v558 + 568);
                          *(float *)(v345 + 5344) = v390;
                          float v391 = *(double *)(v558 + 576);
                          *(float *)(v345 + 5348) = v391;
                          float v392 = *(double *)(v558 + 584);
                          *(float *)(v345 + 5352) = v392;
                          float v393 = *(double *)(v558 + 592);
                          *(float *)(v345 + 5356) = v393;
                          *(_DWORD *)(v345 + 5360) = *(_DWORD *)(v558 + 404);
                          *(_DWORD *)(v345 + 5364) = *(_DWORD *)(v558 + 408);
                          *(_DWORD *)(v345 + 5368) = *(_DWORD *)(v558 + 412);
                          *(_DWORD *)(v345 + 5372) = *(_DWORD *)(v558 + 416);
                          *(float *)(v345 + 5384) = (float)*(unsigned int *)(v558 + 540);
                          *(float *)(v345 + 5380) = v389;
                          *(float *)(v345 + 5376) = v388;
                          *(_DWORD *)(v345 + 1168) = 64;
                          *(_DWORD *)(v345 + 1160) = 2;
                          *(void *)(v345 + 1080) = __b;
                          *(void *)(v345 + 1088) = v523;
                          *(void *)(v345 + 1264) = 0x100000001;
                          *(_DWORD *)(v345 + 1280) = (int)*(double *)(v558 + 664);
                          *(unsigned char *)(v345 + 1288) = *(unsigned char *)(v558 + 672);
                          *(void *)(v345 + 1112) = 0;
                          *(_DWORD *)(v345 + 1128) = 2;
                          *(_DWORD *)(v345 + 1232) = v464;
                          *(_DWORD *)(v345 + 1236) = v464;
                          *(_DWORD *)(v345 + 1240) = v462;
                          *(_DWORD *)(v345 + 1244) = v462;
                          *(_DWORD *)(v345 + 1248) = v499;
                          *(_DWORD *)(v345 + 1252) = v499;
                          *(_DWORD *)(v345 + 1256) = v505;
                          *(_DWORD *)(v345 + 1260) = v505;
                          *(void *)(v345 + 1096) = __b;
                          *(void *)(v345 + 1104) = v523;
                          *(_DWORD *)(v345 + 5340) = v387 + 1;
                          *(_DWORD *)(v345 + 1284) = v387;
                          *(_DWORD *)(v345 + 1316) = v385;
                          *(unsigned char *)(v345 + 1320) = 0;
                          uint64_t v394 = *v470;
                          if (!*v470)
                          {
                            if (sub_1BBB4EE18(v470, v459))
                            {
LABEL_743:
                              LOWORD(v142) = v259;
                              LOWORD(v141) = v481;
                              goto LABEL_744;
                            }
                            uint64_t v394 = *v470;
                            uint64_t v386 = (int8x8_t *)v459;
                          }
                          if (!sub_1BBB4EFD8(v394, v386))
                          {
LABEL_679:
                            BOOL v396 = (unsigned __int16)v467 > v481
                                || v458 > (unsigned __int16)v259;
                            if (v396) {
                              unsigned __int16 v397 = v458;
                            }
                            else {
                              unsigned __int16 v397 = v259;
                            }
                            if (v396) {
                              unsigned __int16 v398 = v467;
                            }
                            else {
                              unsigned __int16 v398 = v481;
                            }
                            int v399 = *(_DWORD *)(v558 + 356);
                            if (v399 < 1
                              || (int v400 = *(_DWORD *)(v558 + 360), v400 < 1)
                              || (signed int v401 = *(_DWORD *)(v558 + 364), v401 <= (signed int)-(__n >> 1))
                              || v399 > __n
                              || (signed int v402 = *(_DWORD *)(v558 + 368), v402 <= (signed int)-(v471 >> 1))
                              || v400 > v471
                              || v401 >= (int)(__n >> 1)
                              || v402 >= (int)(v471 >> 1))
                            {
                              *(_DWORD *)(v546 + 28) = 0;
                              *(_DWORD *)(v546 + 32) = v398 - 1;
                              unsigned int v420 = v397 - 1;
                              *(_DWORD *)(v546 + 36) = 0;
                              *(_DWORD *)(v546 + 40) = v420;
                              *(unsigned char *)(v546 + 24) = 0;
                              *(_WORD *)(v546 + 25) = ((v398 - 1) >> 4);
                              *(unsigned char *)(v546 + 27) = v420 >> 4;
                              unsigned int v421 = v397 >> 1;
                              if (v398 != v457)
                              {
                                if (v397)
                                {
                                  uint64_t v514 = v398;
                                  int v422 = &__b[v398];
                                  size_t v423 = (int)(__n - v398);
                                  uint64_t v424 = v397;
                                  do
                                  {
                                    memset(v422, 128, v423);
                                    v422 += v499;
                                    --v424;
                                  }
                                  while (v424);
                                  if (v397 >= 2u)
                                  {
                                    uint64_t v425 = &v523[v514];
                                    if (v421 <= 1) {
                                      uint64_t v426 = 1;
                                    }
                                    else {
                                      uint64_t v426 = v421;
                                    }
                                    do
                                    {
                                      memset(v425, 128, v423);
                                      v425 += v505;
                                      --v426;
                                    }
                                    while (v426);
                                  }
                                }
                              }
                              if (v397 < v466)
                              {
                                char v427 = &__b[v397 * (unint64_t)v499];
                                unint64_t v428 = v471 - (unint64_t)v397;
                                do
                                {
                                  memset(v427, 128, __n);
                                  v427 += v499;
                                  --v428;
                                }
                                while (v428);
                              }
                              uint64_t v12 = v517;
                              if (v421 < v471 >> 1)
                              {
                                unint64_t v429 = (v471 >> 1) + (v397 >> 1) - v421 - (unint64_t)(v397 >> 1);
                                uint64_t v430 = &v523[(v397 >> 1) * (unint64_t)v505];
                                do
                                {
                                  memset(v430, 128, __n);
                                  v430 += v505;
                                  --v429;
                                }
                                while (v429);
                              }
                              goto LABEL_792;
                            }
                            char v527 = v13;
                            unsigned int v403 = (__n >> 1) - (v399 >> 1) + v401;
                            unsigned int v404 = v398;
                            int v405 = (int)(v403 * v398) / (int)__n;
                            unsigned int v406 = (v405 & 0xFFFFFFF0) - 16;
                            if ((int)(v405 & 0xFFFFFFF0) < 17) {
                              unsigned int v406 = 0;
                            }
                            if ((v405 & 0xC) != 0) {
                              unsigned int v407 = v405 & 0xFFFFFFF0;
                            }
                            else {
                              unsigned int v407 = v406;
                            }
                            signed int v408 = v397;
                            int v409 = __n - 1;
                            uint64_t v507 = v471 >> 1;
                            if ((v407 & 0x80000000) != 0)
                            {
                              int v416 = v404 - 1;
                              int v410 = v397 - 1;
                            }
                            else
                            {
                              int v410 = v397 - 1;
                              unsigned int v411 = (v471 >> 1) - (v400 >> 1) + v402;
                              int v412 = (int)(v471 - 1 + (v400 + v411 - 1) * v397) / (int)v471;
                              if ((v412 | 0xF) - v412 <= 3) {
                                int v413 = (v412 | 0xF) + 16;
                              }
                              else {
                                int v413 = v412 | 0xF;
                              }
                              if (v410 < v413) {
                                int v413 = v397 - 1;
                              }
                              int v414 = (int)(v409 + (v399 + v403 - 1) * v404) / (int)__n;
                              if ((v414 | 0xF) - v414 <= 3) {
                                int v415 = (v414 | 0xF) + 16;
                              }
                              else {
                                int v415 = v414 | 0xF;
                              }
                              int v416 = v404 - 1;
                              if ((int)(v404 - 1) < v415) {
                                int v415 = v404 - 1;
                              }
                              int v417 = (int)(v411 * v397) / (int)v471;
                              unsigned int v418 = (v417 & 0xFFFFFFF0) - 16;
                              if ((int)(v417 & 0xFFFFFFF0) < 17) {
                                unsigned int v418 = 0;
                              }
                              if ((v417 & 0xC) != 0) {
                                signed int v419 = v417 & 0xFFFFFFF0;
                              }
                              else {
                                signed int v419 = v418;
                              }
                              if (v407 < v404
                                && (v419 & 0x80000000) == 0
                                && v419 < v408
                                && v415 >= (int)v407
                                && v413 >= v419)
                              {
                                int v416 = v415;
                                int v410 = v413;
                                goto LABEL_755;
                              }
                            }
                            unsigned int v407 = 0;
                            signed int v419 = 0;
LABEL_755:
                            if (v416 >= 1 && v416 < v409)
                            {
                              if (v419 <= v410)
                              {
                                int v432 = v410 - v419 + 1;
                                uint64_t v433 = &__b[v416
                                          + 1
                                          + v419 * (unint64_t)v499];
                                do
                                {
                                  memset(v433, 128, (int)__n + ~v416);
                                  v433 += v499;
                                  --v432;
                                }
                                while (v432);
                              }
                              unsigned int v434 = v419 >> 1;
                              if (v410 >= 0) {
                                int v435 = v410;
                              }
                              else {
                                int v435 = v410 + 1;
                              }
                              if ((int)v434 <= v435 >> 1)
                              {
                                unint64_t v436 = ((v435 >> 1) + 1) - (unint64_t)v434;
                                uint64_t v437 = &v523[v416 + 1 + v434 * (unint64_t)v505];
                                do
                                {
                                  memset(v437, 128, (int)__n + ~v416);
                                  v437 += v505;
                                  --v436;
                                }
                                while (v436);
                              }
                            }
                            if ((int)v407 >= 1 && (int)v407 < (int)__n)
                            {
                              if (v419 <= v410)
                              {
                                int v438 = v410 - v419 + 1;
                                int v439 = &__b[(int)v499 * (uint64_t)v419];
                                do
                                {
                                  memset(v439, 128, v407);
                                  v439 += v499;
                                  --v438;
                                }
                                while (v438);
                              }
                              unsigned int v440 = v419 >> 1;
                              if (v410 >= 0) {
                                int v441 = v410;
                              }
                              else {
                                int v441 = v410 + 1;
                              }
                              if ((int)v440 <= v441 >> 1)
                              {
                                int v442 = &v523[v440 * (unint64_t)v505];
                                unint64_t v443 = ((v441 >> 1) + 1) - (unint64_t)v440;
                                do
                                {
                                  memset(v442, 128, v407);
                                  v442 += v505;
                                  --v443;
                                }
                                while (v443);
                              }
                            }
                            if (v419 >= 1 && v419 < (int)v471)
                            {
                              uint64_t v444 = v419;
                              unsigned int v445 = __b;
                              do
                              {
                                memset(v445, 128, __n);
                                v445 += v499;
                                --v444;
                              }
                              while (v444);
                              if (v419 >= 2)
                              {
                                uint64_t v446 = v419 >> 1;
                                uint64_t v447 = v523;
                                do
                                {
                                  memset(v447, 128, __n);
                                  v447 += v505;
                                  --v446;
                                }
                                while (v446);
                              }
                            }
                            if (v410 >= 1 && v410 < (int)v471 - 1)
                            {
                              uint64_t v448 = ~(unint64_t)v410 + v471;
                              uint64_t v449 = &__b[v499 + v499 * (unint64_t)v410];
                              do
                              {
                                memset(v449, 128, __n);
                                v449 += v499;
                                --v448;
                              }
                              while (v448);
                              unsigned int v450 = (v410 + 1) >> 1;
                              if (v450 < v507)
                              {
                                int v451 = &v523[v450 * (unint64_t)v505];
                                uint64_t v452 = v507 - v450;
                                do
                                {
                                  memset(v451, 128, __n);
                                  v451 += v505;
                                  --v452;
                                }
                                while (v452);
                              }
                            }
                            *(_DWORD *)(v546 + 28) = v407;
                            *(_DWORD *)(v546 + 32) = v416;
                            *(_DWORD *)(v546 + 36) = v419;
                            *(_DWORD *)(v546 + 40) = v410;
                            *(unsigned char *)(v546 + 24) = v407 >> 4;
                            *(unsigned char *)(v546 + 26) = v419 >> 4;
                            *(unsigned char *)(v546 + 25) = v416 >> 4;
                            *(unsigned char *)(v546 + 27) = v410 >> 4;
                            uint64_t v12 = v517;
                            unsigned int v13 = v527;
LABEL_792:
                            int v453 = *(unsigned __int8 *)(v546 + 25) - *(unsigned __int8 *)(v546 + 24) + 1;
                            int v331 = v453 + v453 * (*(unsigned __int8 *)(v546 + 27) - *(unsigned __int8 *)(v546 + 26));
                            uint64_t v26 = v533;
                            uint64_t v22 = v557;
                            int v8 = v136;
                            uint64x2_t v150 = v554;
                            uint64_t v33 = v537;
                            uint64_t v137 = v509;
                            uint64_t v138 = v493;
                            LOWORD(v258) = v481;
                            LOBYTE(v143) = v487;
                            goto LABEL_591;
                          }
                          goto LABEL_743;
                        }
                        char v526 = v13;
                        BOOL v454 = (unsigned char *)(v546 + 52);
                        int v358 = v505;
                        char v456 = v352;
                        if (v352)
                        {
                          if (v334 != __b && __src != v523)
                          {
                            uint64_t v353 = *(void *)(v345 + 1080);
                            uint64_t v359 = *(void *)(v345 + 1096);
                            uint64_t v360 = *(void *)(v345 + 1088);
                            uint64_t v361 = *(void *)(v345 + 1104);
                            __int32 v362 = *(_DWORD *)(v345 + 1248);
                            __int32 v363 = *(_DWORD *)(v345 + 1252);
                            goto LABEL_647;
                          }
                          int v358 = v505;
                          if (v471)
                          {
                            int v368 = v471;
                            unsigned int v369 = (char *)v353;
                            unsigned int v370 = v334;
                            do
                            {
                              memcpy(v369, v370, __n);
                              v369 += v499;
                              v370 += v512;
                              --v368;
                            }
                            while (v368);
                            uint64_t v353 = v461;
                            int v358 = v505;
                            if (v471 >= 2)
                            {
                              unsigned int v371 = v471 >> 1;
                              uint64_t v372 = v474;
                              uint64_t v373 = __src;
                              do
                              {
                                memcpy(v372, v373, __n);
                                v372 += v505;
                                v373 += v460;
                                --v371;
                              }
                              while (v371);
                            }
                          }
                        }
                        *(void *)(v345 + 1112) = 0;
                        *(void *)(v345 + 1080) = v353;
                        uint64_t v360 = (uint64_t)v474;
                        uint64_t v359 = (uint64_t)__b;
                        *(void *)(v345 + 1088) = v474;
                        *(void *)(v345 + 1096) = __b;
                        uint64_t v361 = (uint64_t)v523;
                        *(void *)(v345 + 1104) = v523;
                        *(_DWORD *)(v345 + 1248) = v499;
                        *(_DWORD *)(v345 + 1252) = v499;
                        __int32 v363 = v499;
                        *(_DWORD *)(v345 + 1256) = v358;
                        __int32 v362 = v499;
                        LODWORD(v505) = v358;
                        *(_DWORD *)(v345 + 1260) = v358;
LABEL_647:
                        int v374 = sub_1BBB4379C(v353, v359, v360, v361, v464, v462, v362, v363, v558, v470, (int8x8_t *)(v345 + 1040), v454, v537 + 19168, v465);
                        *(_DWORD *)(v558 + 544) = *v454;
                        unsigned int v13 = v526;
                        int v357 = __src;
                        unsigned int v349 = v512;
                        LOBYTE(v352) = v456;
                        if (v374) {
                          goto LABEL_664;
                        }
                        goto LABEL_648;
                      }
                      uint64_t v281 = v22;
                      uint64_t v282 = v26;
                      uint64_t v283 = *(char **)(v33 + 136);
                      v564.CMTimeValue value = *(void *)(v33 + 128);
                      CMTimeValue value = v564.value;
                      *(void *)&v564.timescale = v283;
                      uint64_t v285 = *(unsigned int *)(v33 + 232);
                      uint64_t v286 = *(unsigned int *)(v33 + 248);
                      v568[0] = v285;
                      v568[1] = v286;
                      uint64_t v566 = v285;
                      uint64_t v567 = v286;
                      CMTimeValue v287 = *(void *)(v281 + 1776);
                      int v288 = *(_DWORD *)(a4 + 20) | 0x10;
                      uint64_t v289 = *(char **)(v281 + 1784);
                      uint64_t v290 = v283;
                      uint64_t v291 = (char *)v564.value;
                      LODWORD(v292) = v286;
                      int v293 = v285;
                      v565[0] = v287;
                      v565[1] = v289;
                      if (v288 == 875704438)
                      {
                        uint64_t v291 = *(char **)(a4 + 184);
                        uint64_t v290 = *(char **)(a4 + 208);
                        int v293 = *(_DWORD *)(a4 + 192);
                        uint64_t v292 = *(int *)(a4 + 216);
                        uint64_t v566 = v293;
                        uint64_t v567 = v292;
                      }
                      uint64_t v294 = *(void *)(v557 + 5416);
                      if (!*(_DWORD *)(v294 + 368) || !v291 || !v290 || !v564.value || !v283 || !v287 || !v289)
                      {
LABEL_551:
                        uint64_t v26 = v282;
                        uint64_t v22 = v557;
                        uint64_t v137 = v509;
                        goto LABEL_552;
                      }
                      int v479 = v258;
                      uint64_t v498 = v159;
                      uint64_t v504 = v160;
                      char v486 = v143;
                      int v295 = *(_DWORD *)(v33 + 228);
                      int v296 = *(_DWORD *)(v33 + 196);
                      uint64_t v297 = *(void *)(a4 + 176);
                      int v298 = *((unsigned __int8 *)v13 + 684);
                      uint64_t v492 = v138;
                      uint64_t v299 = (uint64_t *)(v138 + 1064);
                      uint64_t v300 = *((void *)v13 + 647);
                      uint64_t v301 = (int8x8_t *)(v300 + 1080);
                      *(void *)(v300 + 1080) = v291;
                      *(void *)(v300 + 1088) = v290;
                      *(_DWORD *)(v300 + 1248) = v293;
                      *(_DWORD *)(v300 + 1256) = v292;
                      if (*(_DWORD *)(v294 + 368) != 1) {
                        CMTimeValue value = v287;
                      }
                      *(void *)(v300 + 1096) = value;
                      if (*(_DWORD *)(v294 + 368) != 1) {
                        uint64_t v283 = v289;
                      }
                      *(void *)(v300 + 1104) = v283;
                      *(_DWORD *)(v300 + 1252) = v285;
                      *(_DWORD *)(v300 + 1260) = v286;
                      *(_DWORD *)(v300 + 1232) = v295;
                      int v522 = v295;
                      *(_DWORD *)(v300 + 1236) = v295;
                      *(_DWORD *)(v300 + 1240) = v296;
                      *(_DWORD *)(v300 + 1244) = v296;
                      *(void *)(v300 + 1112) = v297;
                      *(_DWORD *)(v300 + 1120) = 1;
                      *(_DWORD *)(v300 + 1128) = 2;
                      *(_OWORD *)(v300 + 1152) = xmmword_1BBB6FFA0;
                      *(_DWORD *)(v300 + 1172) = v298;
                      *(void *)(v300 + 1176) = 1;
                      *(_DWORD *)(v300 + 1188) = 0;
                      *(_DWORD *)(v300 + 1220) = 0;
                      *(void *)(v300 + 1224) = 0;
                      *(_DWORD *)(v300 + 1272) = 0;
                      *(void *)(v300 + 1264) = 0;
                      *(_DWORD *)(v300 + 1168) = 0;
                      *(_WORD *)(v300 + 1320) = 0;
                      uint64_t v302 = *v299;
                      if (!*v299)
                      {
                        unsigned int v476 = (uint64_t *)(v138 + 1064);
                        uint64_t v513 = v301;
                        if (sub_1BBB4EE18((uint64_t *)(v138 + 1064), (uint64_t)v301))
                        {
LABEL_630:
                          CFLog();
                          uint64_t v12 = v517;
                          uint64_t v26 = v282;
                          uint64_t v22 = v557;
LABEL_635:
                          int v8 = v136;
                          uint64x2_t v150 = v554;
                          uint64_t v11 = v558;
                          uint64_t v33 = v537;
                          goto LABEL_223;
                        }
                        uint64_t v302 = *v476;
                        uint64_t v301 = v513;
                      }
                      if (!sub_1BBB4EFD8(v302, v301))
                      {
                        uint64_t v33 = v537;
                        uint64_t v138 = v492;
                        uint64_t v159 = v498;
                        int v258 = v479;
                        LOBYTE(v143) = v486;
                        uint64_t v160 = v504;
                        if (*(_DWORD *)(v294 + 368) == 2)
                        {
                          sub_1BBB19930(v291, v290, &v566, v565, v568, (char **)&v564, v568, v522, v296, v522, v296, *(void *)(v294 + 208), *(void *)(v294 + 216));
                          int v258 = v479;
                          uint64_t v159 = v498;
                          uint64_t v160 = v504;
                          LOBYTE(v143) = v486;
                          uint64_t v138 = v492;
                          uint64_t v33 = v537;
                        }
                        goto LABEL_551;
                      }
                      goto LABEL_630;
                    }
                    if ((*(_DWORD *)(a4 + 20) | 0x10) == 0x34323076)
                    {
                      *(void *)(v140 + 8 * *(int *)(v140 + 68) + 3464) = *(void *)(a4 + 176);
                      goto LABEL_532;
                    }
                    int v478 = v258;
                    uint64_t v497 = v159;
                    uint64_t v503 = v160;
                    char v485 = v143;
                    int v278 = v141;
                    int v279 = v142;
                    if (!*(unsigned char *)(v22 + 180))
                    {
                      int v278 = *(_DWORD *)(v33 + 224);
                      int v279 = *(_DWORD *)(v33 + 192);
                    }
                    unsigned int v280 = *(__CVBuffer **)(a4 + 176);
                    uint64_t v491 = v138;
                    if (v280)
                    {
LABEL_531:
                      sub_1BBB066A8(v280, v511, v278, v279);
                      *(void *)(v140 + 3464 + 8 * *(int *)(v140 + 68)) = *(void *)(a4 + 176);
                      *(void *)(a4 + 176) = 0;
                      CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v140 + 3464 + 8 * *(int *)(v140 + 68)), 0);
                      uint64_t v138 = v491;
                      uint64_t v159 = v497;
                      uint64_t v33 = v537;
                      int v258 = v478;
                      LOBYTE(v143) = v485;
                      uint64_t v160 = v503;
                      goto LABEL_532;
                    }
                    v564.CMTimeValue value = 0;
                    uint64_t v364 = *(__CVPixelBufferPool **)(v140 + 16);
                    int v475 = v278;
                    int __na = v279;
                    if (!v364)
                    {
                      if (sub_1BBB07244((CVPixelBufferPoolRef *)(v140 + 16), v278, v279, *((unsigned __int8 *)v13 + 4851)))goto LABEL_634; {
                      uint64_t v364 = *(__CVPixelBufferPool **)(v140 + 16);
                      }
                    }
                    CVReturn PixelBuffer = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v364, (CVPixelBufferRef *)&v564);
                    unsigned int v280 = (__CVBuffer *)v564.value;
                    *(void *)(a4 + 176) = v564.value;
                    if (!PixelBuffer)
                    {
                      uint64_t v137 = v509;
                      int v278 = v475;
                      int v279 = __na;
                      goto LABEL_531;
                    }
LABEL_634:
                    CFLog();
                    uint64_t v12 = v517;
                    goto LABEL_635;
                  }
LABEL_489:
                  int v263 = v258;
                  int v258 = v259;
                  int v259 = v263;
                  goto LABEL_490;
                }
                uint64_t v262 = *((void *)v260 + 98) + 8 * (char)v260[148];
                int v258 = *(__int16 *)(v262 + 4);
                int v259 = *(__int16 *)(v262 + 6);
              }
              if (v141 > v142 && v258 < v259) {
                goto LABEL_489;
              }
              goto LABEL_487;
            }
            int v162 = *(_DWORD *)(v161 + 744);
            if (!v162)
            {
              *(unsigned char *)(v161 + 148) = 0;
LABEL_477:
              int v146 = *(unsigned __int8 *)(v22 + 1057);
              goto LABEL_478;
            }
            int v163 = *(_DWORD *)v558;
            if (v162 == 4)
            {
              int v164 = *(_DWORD *)(v161 + 804);
              if ((v164 - 2) >= 4)
              {
                if (v164 == 1)
                {
                  if (v163 <= 300000)
                  {
                    unsigned int v165 = (300000 - v163) / 0xC350u;
                    goto LABEL_251;
                  }
                }
                else if (!v164 && v163 <= 200000)
                {
                  int v166 = 6 * (200000 - v163) / 200000 + 1;
                  goto LABEL_458;
                }
              }
              else if (v163 <= 420000)
              {
                unsigned int v165 = (420000 - v163) / 0x11170u;
LABEL_251:
                int v166 = v165 + 1;
LABEL_458:
                if (v166 >= 31) {
                  LOBYTE(v166) = 31;
                }
                *(unsigned char *)(v161 + 148) = v166;
                goto LABEL_477;
              }
              int v166 = 0;
              goto LABEL_458;
            }
            if (*(unsigned char *)(v161 + 760))
            {
              uint64_t v249 = *(unsigned int *)(v161 + 804);
              uint64_t v488 = v138;
              uint64_t v494 = *(unsigned __int16 *)(v33 + 232);
              int v477 = *(_DWORD *)v558;
              char v482 = v143;
              uint64_t v500 = *(unsigned __int16 *)(v33 + 248);
              int v250 = sub_1BBB0DF90(*(void *)(v161 + 784), v163, dword_1BBB89978[v249], dword_1BBB89990[v249], dword_1BBB899A8[v249], dword_1BBB899C0[v249], dword_1BBB899D8[v249], dword_1BBB899F0[v249], *(unsigned char *)(v161 + 761));
              int v163 = v477;
              LOBYTE(v143) = v482;
              uint64_t v159 = v494;
              uint64_t v160 = v500;
              uint64_t v138 = v488;
              uint64_t v33 = v537;
LABEL_436:
              if (v250 >= 31) {
                char v251 = 31;
              }
              else {
                char v251 = v250;
              }
              *(unsigned char *)(v161 + 148) = v251;
              *(unsigned char *)(v161 + 150) = v251;
              if (v163 > 269999)
              {
LABEL_473:
                if (v163 > 0x5F36F) {
                  char v257 = 2;
                }
                else {
                  char v257 = 1;
                }
                *(unsigned char *)(v161 + 725) = v257;
                goto LABEL_477;
              }
              goto LABEL_440;
            }
            switch(*(_DWORD *)(v161 + 804))
            {
              case 0:
                if (v163 < 30000 || *(unsigned char *)(v161 + 741))
                {
                  int v250 = 0;
                  uint64_t v252 = (float *)(*(void *)(v161 + 784) + 4);
                  v34.n128_u32[0] = 4.0;
                  while (*(__int16 *)v252 > 192 || *(v252 - 1) > 4.0)
                  {
                    ++v250;
                    v252 += 2;
                  }
                }
                else
                {
                  if (v163 <= 0x30D40)
                  {
                    *(unsigned char *)(v161 + 148) = 6 * (200000 - v163) / 0x30D40u + 1;
                    *(unsigned char *)(v161 + 150) = 6 * (200000 - v163) / 0x30D40u + 1;
                    uint64_t v22 = v557;
                    uint64_t v33 = v537;
LABEL_440:
                    *(unsigned char *)(v161 + 725) = 0;
                    goto LABEL_477;
                  }
                  int v250 = 0;
                }
                uint64_t v22 = v557;
                uint64_t v33 = v537;
                goto LABEL_436;
              case 1:
                uint64_t v495 = *(unsigned __int16 *)(v33 + 232);
                uint64_t v501 = *(unsigned __int16 *)(v33 + 248);
                char v483 = v143;
                uint64_t v489 = v138;
                if (*(unsigned char *)(v161 + 800))
                {
                  int v253 = *(_DWORD *)v558;
                  int v250 = sub_1BBB0DF90(*(void *)(v161 + 784), v163, 192, 4, 30000, 320, 15, 200000, *(unsigned char *)(v161 + 761));
                  int v163 = v253;
                  uint64_t v22 = v557;
                  uint64_t v33 = v537;
                  uint64_t v138 = v489;
                  uint64_t v159 = v495;
                  LOBYTE(v143) = v483;
                  uint64_t v160 = v501;
                  goto LABEL_436;
                }
                int v254 = 300000;
                uint64_t v22 = v557;
                uint64_t v33 = v537;
                uint64_t v159 = v495;
                if (v163 > 300000)
                {
LABEL_472:
                  *(unsigned char *)(v161 + 148) = 0;
                  *(unsigned char *)(v161 + 150) = 0;
                  goto LABEL_473;
                }
                int v431 = 14 * (300000 - v163);
LABEL_752:
                int v250 = v431 / v254 + 1;
                goto LABEL_436;
              case 2:
                if (v163 > 420000) {
                  goto LABEL_472;
                }
                int v250 = (420000 - v163) / 0x6D60u + 1;
                goto LABEL_436;
              case 3:
                int v254 = 660000;
                if (v163 > 660000) {
                  goto LABEL_472;
                }
                int v255 = 660000 - v163;
                int v256 = 21;
                goto LABEL_751;
              case 4:
                int v254 = 650000;
                goto LABEL_471;
              case 5:
                int v254 = 1000000;
LABEL_471:
                if (v163 > v254) {
                  goto LABEL_472;
                }
                int v255 = v254 - v163;
                int v256 = 22;
LABEL_751:
                int v431 = v255 * v256;
                goto LABEL_752;
              default:
                int v250 = 0;
                goto LABEL_436;
            }
          }
          if (*(unsigned char *)(v510 + 28) || !*(unsigned char *)(v11 + 708))
          {
            *(_DWORD *)(v510 + 332) = 0;
            *(void *)(v510 + 336) = 0;
            *(unsigned char *)(v510 + 349) = 0;
            int v84 = v534;
            goto LABEL_120;
          }
          int v84 = v534;
          if (!*(unsigned char *)(*(void *)(v22 + 136) + 4850))
          {
            int v169 = 1;
LABEL_422:
            *(_DWORD *)(v510 + 340) = v169;
LABEL_120:
            if (*(unsigned char *)(v510 + 349) && (int v85 = *(_DWORD *)(v510 + 332), v85 >= 1))
            {
              int v86 = *(_DWORD *)(v510 + 24);
              *(unsigned char *)(v510 + 350) = v85 > v86;
              if (v85 > v86) {
                *(unsigned char *)(*(void *)(v22 + 144) + 716) = 1;
              }
            }
            else
            {
              *(unsigned char *)(v510 + 350) = 0;
            }
            if (*(unsigned char *)(*(void *)(v22 + 144) + 716) && !*((_DWORD *)v84 + 186))
            {
              unsigned __int8 v87 = v84[148];
              if (v87)
              {
                *((_DWORD *)v84 + 27) = 0;
                *((_DWORD *)v84 + 202) = 0;
                v84[150] = v87;
                v84[148] = 0;
              }
              if (v84[104])
              {
                *((_DWORD *)v84 + 43) = 0;
                *((_DWORD *)v84 + 202) = 0;
                v84[104] = 0;
              }
            }
            CMTimeMake(&v564, *(int *)(a4 + 88), *(_DWORD *)(a4 + 100));
            __n128 v34 = *(__n128 *)&v564.value;
            *(CMTime *)(v510 + 240) = v564;
            uint64_t v33 = v537;
            goto LABEL_132;
          }
          int v97 = *(_DWORD *)(v510 + 332);
          if (!v534[776]) {
            ++v97;
          }
          *(_DWORD *)(v510 + 332) = v97;
          int v98 = *(_DWORD *)(v510 + 336) + v534[776];
          *(_DWORD *)(v510 + 336) = v98;
          if (v97)
          {
            if (v97 <= dword_1BBB8D468[*(int *)(v545 + 216)])
            {
              *(_DWORD *)(v510 + 340) = 0;
LABEL_419:
              int v244 = *(_DWORD *)(v510 + 24);
              if (v97 >= v244 || v98 + v97 < ((28 - v244) & ~((28 - v244) >> 31))) {
                goto LABEL_120;
              }
              int v169 = 2;
              goto LABEL_422;
            }
            int v99 = 3;
          }
          else
          {
            int v99 = 2;
          }
          *(_DWORD *)(v510 + 340) = v99;
          goto LABEL_419;
        }
LABEL_72:
        uint64_t v43 = 1;
        goto LABEL_389;
      }
      v564.CMTimeValue value = 0;
      if (v47 - 255 < 0xFFFFFF00) {
        goto LABEL_72;
      }
    }
    else
    {
      v564.CMTimeValue value = 0;
    }
    char v54 = !*(unsigned char *)(v29 + 60) || *(unsigned char *)(v29 + 61) || *(unsigned char *)(v29 + 62) != 0;
    if (sub_1BBB0A2A0(&v564.value, *(_DWORD *)(v29 + 8), *(_DWORD *)(v29 + 12), *(_DWORD *)(v29 + 16), *(unsigned int *)(v29 + 20), *(void *)v29, v54))goto LABEL_72; {
    uint64_t v58 = a7;
    }
    CMTimeValue v59 = v564.value;
    *(unsigned char *)(v564.value + 1355) = 0;
    *(unsigned char *)(v59 + 99) = 0;
    sub_1BBB0AE4C(v59, *(unsigned __int8 *)(v29 + 60));
    *(void *)(*(void *)(v29 + 40) + 8 * *(unsigned int *)(v29 + 48)) = v59;
    *(void *)(*(void *)(v29 + 32) + 8 * *(unsigned int *)(v29 + 24)) = v59;
    a7 = v58;
    uint64_t v11 = v558;
    ++*(_DWORD *)(v29 + 48);
    int v60 = *(_DWORD *)(v29 + 24);
    int v30 = v60 + 1;
    *(_DWORD *)(v29 + 24) = v60 + 1;
    if (v60 == -1) {
      goto LABEL_72;
    }
    goto LABEL_21;
  }
  **(_DWORD **)(v22 + 128) = 1;
  uint64_t v44 = *(void *)(v22 + 144);
  if (v44) {
    *(unsigned char *)(v22 + 207942) = *(unsigned char *)(v44 + 68);
  }
  uint64_t v45 = v22 + 205800;
  if (*(unsigned char *)(*(void *)(v22 + 136) + 577) == 1)
  {
    if (*(unsigned char *)(v22 + 208076)) {
      BOOL v46 = v554 == 0;
    }
    else {
      BOOL v46 = 1;
    }
    if (v46) {
      goto LABEL_281;
    }
  }
  else if (!v554)
  {
    goto LABEL_281;
  }
  if (!*((unsigned char *)v13 + 4850)) {
    goto LABEL_62;
  }
  uint64_t v53 = sub_1BBAF3EB8((uint64_t)v554, *((void *)v13 + 648), v13, v22, 0, v27);
  if (v53)
  {
LABEL_228:
    uint64_t v43 = v53;
    goto LABEL_388;
  }
  sub_1BBAF7CE4(v554, (uint64_t)v26, v548, &v562);
LABEL_281:
  uint64_t v175 = v562;
  if (v562 > v548)
  {
    uint64_t v43 = 4294958327;
    goto LABEL_389;
  }
  int v516 = a7;
  if (!*((unsigned char *)v13 + 317) || !v562 || !*((unsigned char *)v13 + 336))
  {
    *((_DWORD *)v13 + 88) = 0;
    *((void *)v13 + 43) = 0;
    goto LABEL_309;
  }
  if (!v550[38])
  {
LABEL_62:
    CFLog();
    uint64_t v43 = 4294967246;
    goto LABEL_389;
  }
  *((_DWORD *)v13 + 88) = v562;
  size_t v176 = *v13;
  unsigned int v543 = v13[1];
  uint64_t v538 = (int)(v543 * v176);
  float v177 = (char *)malloc_type_calloc((unint64_t)(3 * v175 * v538) >> 1, 1uLL, 0x4AE20AB7uLL);
  if (!v177) {
    goto LABEL_32;
  }
  int v531 = v26;
  uint64_t v524 = v13;
  *((void *)v13 + 43) = v177;
  unsigned int v178 = v543;
  if ((int)v175 >= 1)
  {
    uint64_t v179 = 0;
    int v180 = v538 + 3;
    if ((int)v538 >= 0) {
      int v180 = v543 * v176;
    }
    uint64_t v535 = (uint64_t)v180 >> 2;
    uint64_t v181 = (uint64_t)(int)(3 * v538 + (3 * (int)v538 < 0)) >> 1;
    uint64_t v182 = v175;
    uint64_t v183 = v176 >> 1;
    if (v183 <= 1) {
      uint64_t v184 = 1;
    }
    else {
      uint64_t v184 = v183;
    }
    uint64_t v518 = v12;
    int v529 = v8;
    do
    {
      if (v177)
      {
        if (v178)
        {
          uint64_t v549 = v182;
          uint64_t v551 = v179;
          int v185 = &v177[v538];
          BOOL v186 = &v177[v538 + v535];
          uint64_t v187 = v531[v179];
          BOOL v188 = *(char **)(v187 + 128);
          uint64_t v547 = v187;
          uint64_t v189 = *(unsigned int *)(v187 + 232);
          unsigned int v190 = v178;
          unsigned int v560 = v177;
          int v191 = v177;
          do
          {
            memcpy(v191, v188, v176);
            v191 += v176;
            v188 += v189;
            --v190;
          }
          while (v190);
          unsigned int v178 = v543;
          uint64_t v12 = v518;
          int v8 = v529;
          uint64_t v45 = v556;
          uint64_t v11 = v558;
          float v177 = v560;
          uint64_t v182 = v549;
          uint64_t v179 = v551;
          uint64_t v181 = (uint64_t)(int)(3 * v538 + (3 * (int)v538 < 0)) >> 1;
          if (v543 >= 2)
          {
            int v192 = 0;
            uint64_t v193 = *(unsigned int *)(v547 + 248);
            uint64_t v194 = *(void *)(v547 + 136) + 1;
            do
            {
              if (v176 >= 2)
              {
                uint64_t v195 = 0;
                unsigned int v196 = (char *)v194;
                do
                {
                  v185[v195] = *(v196 - 1);
                  char v197 = *v196;
                  v196 += 2;
                  v186[v195++] = v197;
                }
                while (v184 != v195);
              }
              v185 += v183;
              v186 += v183;
              ++v192;
              v194 += v193;
            }
            while (v192 != v543 >> 1);
            uint64_t v182 = v562;
          }
        }
      }
      ++v179;
      v177 += v181;
      uint64_t v22 = v557;
    }
    while (v179 < (int)v182);
  }
  LODWORD(v175) = 0;
  unsigned int v562 = 0;
  unsigned int v13 = v524;
  uint64_t v26 = v531;
  uint64_t v24 = v536;
LABEL_309:
  if (v24) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v24 + 3888), 0xFFFFFFFFFFFFFFFFLL);
  }
  if (v175)
  {
    uint64_t v525 = v13;
    BOOL v530 = v8;
    uint64_t v519 = v12;
    uint64_t v198 = 0;
    uint64_t v552 = v175;
    int v532 = v26;
    while (1)
    {
      uint64_t v199 = v26[v198];
      if (*(unsigned char *)(v199 + 1354) && *(unsigned char *)(v199 + 98) && (a6 & 1) == 0)
      {
        uint64_t v200 = v26[(v198 - 1)];
        *(void *)(v199 + 1344) = v200;
        *(void *)(v200 + 1344) = v199;
      }
      uint64_t v201 = *(void *)v45;
      int v202 = *(_DWORD *)(v199 + 1280);
      int v203 = *(unsigned __int8 *)(v199 + 1393);
      if (!*(unsigned char *)(v199 + 1393))
      {
        if (*(unsigned char *)(*(void *)(v22 + 136) + 4848))
        {
          uint64_t v212 = *(void *)(v22 + 5392);
          if (v212) {
            v202 += *(_DWORD *)(v212 + 116);
          }
        }
      }
      *(_DWORD *)(v199 + 1280) = v202;
      char v561 = *(unsigned char *)(*(void *)(v22 + 136) + 4850);
      uint64_t v204 = *(void *)(v201 + 22816);
      if (v203) {
        BOOL v205 = 1;
      }
      else {
        BOOL v205 = v204 == 0;
      }
      if (v205)
      {
        uint64_t v206 = v201 + 16;
        uint64_t v207 = v201 + 22056;
        if (v204) {
          BOOL v208 = v204 == v207;
        }
        else {
          BOOL v208 = 1;
        }
        uint64_t v209 = v201 + 16;
        if (!v208)
        {
          uint64_t v210 = v201 - 744;
          uint64_t v211 = 1;
          while (1)
          {
            v210 += 760;
            if (v210 == v204) {
              break;
            }
            if (++v211 == 30)
            {
              uint64_t v204 = 0;
              *(void *)(v201 + 22816) = 0;
              goto LABEL_356;
            }
          }
          uint64_t v209 = v206 + 760 * v211;
        }
        *(void *)(v201 + 22816) = v209;
        if (v209 == *(void *)(v201 + 22824))
        {
          int v213 = 0;
          uint64_t v214 = v209;
          while (1)
          {
            uint64_t v215 = v201 + 16;
            if (v214)
            {
              uint64_t v215 = v201 + 16;
              if (v214 != v207)
              {
                uint64_t v216 = v201 - 744;
                uint64_t v217 = 1;
                while (1)
                {
                  v216 += 760;
                  if (v216 == v214) {
                    break;
                  }
                  if (++v217 == 30)
                  {
                    uint64_t v214 = 0;
                    goto LABEL_349;
                  }
                }
                uint64_t v215 = v206 + 760 * v217;
              }
            }
            uint64_t v218 = *(unsigned int *)(v215 + 12);
            if (v218) {
              break;
            }
LABEL_348:
            uint64_t v214 = v215;
LABEL_349:
            if (v214 != v209 && ++v213 != 30) {
              continue;
            }
            goto LABEL_353;
          }
          uint64_t v219 = 0;
          uint64_t v220 = 8 * v218;
          while (*(unsigned char *)(*(void *)(v215 + v219 + 216) + 1399))
          {
            v219 += 8;
            if (v220 == v219) {
              goto LABEL_348;
            }
          }
          uint64_t v214 = v215;
LABEL_353:
          *(void *)(v201 + 22824) = v214;
        }
        *(_DWORD *)(v209 + 208) = 0;
        *(void *)uint64_t v209 = 0;
        *(void *)(v209 + 8) = 0;
        *(_DWORD *)(v209 + 16) = 0;
        *(void *)(v209 + 24) = 0;
        *(void *)(v209 + 32) = 0;
        *(void *)(v209 + 40) = 0xFFFFFFFFLL;
        uint64_t v204 = *(void *)(v201 + 22816);
        if (!*(void *)(v201 + 22824)) {
          *(void *)(v201 + 22824) = v204;
        }
      }
LABEL_356:
      uint64_t v221 = *(unsigned int *)(v204 + 12);
      if (v221 >= 0x44)
      {
        uint64_t v222 = (uint64_t *)(v204 + 216);
        uint64_t v223 = *(unsigned int *)(v204 + 12);
        while (1)
        {
          uint64_t v224 = *v222;
          if (!*v222) {
            break;
          }
          if (!*(unsigned char *)(v224 + 1394))
          {
            uint64_t v225 = *(void **)(v224 + 5016);
            if (v225)
            {
              free(v225);
              *(void *)(v224 + 5016) = 0;
            }
            *(unsigned char *)(v224 + 2) = 0;
            *uint64_t v222 = 0;
          }
          ++v222;
          if (!--v223)
          {
            unsigned int v226 = 0;
            uint64_t v227 = (void *)(v204 + 216);
            do
            {
              if (*v227) {
                *(void *)(v204 + 216 + 8 * v226++) = *v227;
              }
              ++v227;
              --v221;
            }
            while (v221);
            *(_DWORD *)(v204 + 12) = v226;
            break;
          }
        }
        uint64_t v204 = *(void *)(v201 + 22816);
        uint64_t v221 = *(unsigned int *)(v204 + 12);
        unsigned int v13 = v525;
        uint64_t v26 = v532;
        uint64_t v45 = v556;
        uint64_t v22 = v557;
        if (v221 >= 0x44) {
          break;
        }
      }
      *(unsigned char *)(v199 + 2) = v561;
      *(void *)(v204 + 8 * v221 + 216) = v199;
      ++*(_DWORD *)(*(void *)(v201 + 22816) + 12);
      uint64_t v228 = *(int **)(v201 + 22816);
      int v229 = v202 << (*(unsigned char *)(v199 + 1354) == 0);
      *uint64_t v228 = v229;
      v228[6] = v229;
      v228[7] = v229;
      BOOL v230 = *(int32x2_t **)(v201 + 22816);
      int32x2_t v231 = v230[3];
      *(_DWORD *)(v199 + 1288) = v230->i32[0];
      *(int32x2_t *)(v199 + 1292) = vrev64_s32(v231);
      *(void *)(v199 + 1300) = 0;
      *(_WORD *)(v199 + 1398) = 0;
      *(unsigned char *)(v199 + 1401) = 0;
      ++v198;
      uint64_t v11 = v558;
      if (v198 == v552)
      {
        uint64_t v43 = 0;
        char v232 = 1;
        uint64_t v12 = v519;
        int v8 = v530;
        goto LABEL_374;
      }
    }
    uint64_t v43 = 4294958327;
    CFLog();
    char v232 = 0;
    uint64_t v12 = v519;
    int v8 = v530;
    uint64_t v11 = v558;
  }
  else
  {
    uint64_t v43 = 0;
    char v232 = 1;
  }
LABEL_374:
  if (v536) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v536 + 3888));
  }
  if ((v232 & 1) == 0) {
    goto LABEL_388;
  }
  if (*(_DWORD *)(v553 + 20))
  {
    if (!v11) {
      goto LABEL_385;
    }
    *(_DWORD *)(v553 + 24) = *(_DWORD *)(v11 + 88);
    uint64_t v233 = *(unsigned int *)(v11 + 88);
    if (v233 > 8)
    {
      *(_DWORD *)(v553 + 24) = 0;
      uint64_t v43 = 4294958327;
      goto LABEL_388;
    }
    memcpy((void *)(v22 + 207924), (const void *)(v11 + 92), 2 * v233);
  }
  if (v11 && *(_DWORD *)(v553 + 84))
  {
    *(_DWORD *)(v553 + 88) = *(_DWORD *)(v11 + 108);
    uint64_t v234 = *(unsigned int *)(v11 + 108);
    if (v234 > 8)
    {
      *(_DWORD *)(v553 + 88) = 0;
      uint64_t v43 = 4294958327;
      goto LABEL_388;
    }
    memcpy((void *)(v22 + 207988), (const void *)(v11 + 112), 2 * v234);
  }
LABEL_385:
  if (*(_DWORD *)(v553 + 108))
  {
    uint64_t v235 = sub_1BBB435BC(v11, v22);
    if (v235)
    {
      uint64_t v43 = v235;
      goto LABEL_388;
    }
  }
  int v240 = *((_DWORD *)v13 + 105);
  *(_DWORD *)(v45 + 2076) = *((_DWORD *)v13 + 106);
  if (v11 && *(_WORD *)(v11 + 148)) {
    int v240 = *(unsigned __int16 *)(v11 + 148);
  }
  *(_DWORD *)(v45 + 2072) = v240;
  uint64_t v241 = sub_1BBB31BE0(v22, (uint64_t)v554, v540, v539, v544, a6, v516, v12);
  if (v241)
  {
    uint64_t v43 = v241;
    goto LABEL_388;
  }
  uint64_t v242 = *(void *)(v45 + 40);
  if (v242)
  {
    *(_DWORD *)(*(void *)v541 + 1584) = *(_DWORD *)(v242 + 1276);
    *(double *)(*(void *)v541 + 1592) = *(float *)(v242 + 4940);
  }
  if (!v536 || *(unsigned char *)(v536 + 32))
  {
    *(_DWORD *)(*(void *)(v22 + 128) + 8) = 0;
    sub_1BBB43650((uint64_t)v13, *((void *)v13 + 646), v22, *(void *)(v45 + 40), (_DWORD *)(*(void *)(v22 + 128) + 8));
    uint64_t v43 = 0;
    _DWORD *v8 = *(_DWORD *)(*(void *)(v22 + 128) + 8);
    goto LABEL_389;
  }
LABEL_409:
  uint64_t v43 = 0;
LABEL_389:
  free(v26);
  if (*((_DWORD *)v13 + 93) == 1)
  {
    unsigned int v236 = *(pthread_mutex_t **)(v12 + 248);
    if (v236) {
      pthread_mutex_lock(v236);
    }
    *(_DWORD *)uint64_t v12 = 0;
    uint64_t v237 = *(pthread_cond_t **)(v12 + 256);
    if (v237) {
      pthread_cond_signal(v237);
    }
    unsigned int v238 = *(pthread_mutex_t **)(v12 + 248);
    if (v238) {
      pthread_mutex_unlock(v238);
    }
  }
  return v43;
}

uint64_t sub_1BBB435BC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *(_DWORD *)(a2 + 208008) = *(_DWORD *)(result + 128);
    uint64_t v4 = *(unsigned int *)(result + 128);
    if (v4 > 8)
    {
      *(_DWORD *)(a2 + 208008) = 0;
      return 4294958327;
    }
    else
    {
      memcpy((void *)(a2 + 208012), (const void *)(result + 132), 2 * v4);
      if (*(_DWORD *)(v3 + 128))
      {
        unint64_t v5 = 0;
        do
          *(_DWORD *)(a2 + 208028 + 4 * v5++) = 0;
        while (v5 < *(unsigned int *)(v3 + 128));
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BBB43650(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a4)
  {
    uint64_t v6 = (_DWORD *)(a3 + 205800);
    if (*(unsigned char *)(result + 660) && *(unsigned char *)(a4 + 17))
    {
      *a5 = 1;
      uint64_t v8 = *(void *)v6;
      int v9 = (_DWORD *)(*(void *)v6 + 23700);
      *(_WORD *)(a4 + 1398) = 257;
      *(unsigned char *)(a4 + 2) = 0;
      *(unsigned char *)(a4 + 1394) = 0;
      *(unsigned char *)(a4 + 1356) = 0;
      *int v9 = v9[1];
      uint64_t result = sub_1BBB0F268(0, *(void *)(v8 + 22824));
      if (result) {
        return CFLog();
      }
      if (*(unsigned char *)(a4 + 1368) == 5 || !*(unsigned char *)(a4 + 1368))
      {
        unint64_t v10 = *(unsigned int *)(a2 + 32);
        if (v10 < *(_DWORD *)(a2 + 8) - 1)
        {
          uint64_t v11 = 16 * v10;
          do
          {
            ++v10;
            *(_OWORD *)(*(void *)a2 + v11) = *(_OWORD *)(*(void *)a2 + v11 + 16);
            *(_DWORD *)(*(void *)a2 + v11 + 8) &= ~2u;
            v11 += 16;
          }
          while (v10 < (*(_DWORD *)(a2 + 8) - 1));
        }
        int v12 = *(_DWORD *)(a2 + 24) - 1;
        *(_DWORD *)(a2 + 40) = v12;
        *(_DWORD *)(a2 + 44) = v12;
        *(_DWORD *)(a2 + 28) = 0;
        *(unsigned char *)(a2 + 83) = *(unsigned char *)(a2 + 82);
      }
    }
    unsigned int v13 = v6[536];
    if (v13)
    {
      if (!*(unsigned char *)(a4 + 17)) {
        v6[537] = (v6[537] + 1) % v13;
      }
    }
  }
  return result;
}

uint64_t sub_1BBB4379C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, __int32 a7, __int32 a8, uint64_t a9, uint64_t *a10, int8x8_t *a11, unsigned char *a12, uint64_t a13, char a14)
{
  int v18 = a14 & 0xF;
  if (*(_DWORD *)(a9 + 540)) {
    uint64_t v19 = *(void *)(a9 + 420);
  }
  else {
    uint64_t v19 = 270;
  }
  float v20 = *(float *)(a9 + 408);
  float v21 = *(float *)(a9 + 416);
  float v22 = *(float *)(a9 + 412);
  float v23 = *(float *)(a9 + 404);
  *(float *)&a11[505].i32[4 * v18] = v20;
  *(float *)&a11[505].i32[(4 * (a14 & 0xF)) | 1] = v23;
  *(float *)&a11[505].i32[(4 * (a14 & 0xF)) | 2] = v21;
  *(float *)&a11[505].i32[(4 * (a14 & 0xF)) | 3] = v22;
  if (v22 == 0.0)
  {
    int v24 = 4 * v18 - 4;
    unsigned int v25 = -1;
    while (1)
    {
      unsigned int v26 = v18 + v25;
      int v27 = v24 + 64;
      if ((int)(v18 + v25) >= 0) {
        int v27 = v24;
      }
      float v28 = *(float *)((char *)a11[505].i32 + ((4 * v27) | 8));
      if (v28 > 0.0) {
        break;
      }
      --v25;
      v24 -= 4;
      if (v25 < 0xFFFFFFF7) {
        goto LABEL_10;
      }
    }
    unsigned int v29 = v26 + 15;
    if ((int)(v26 - 1) >= 0) {
      unsigned int v29 = v26 - 1;
    }
    int v30 = a11 + 505;
    float v20 = *(float *)&a11[505].i32[v27];
    uint64_t v31 = 4 * v27;
    if (*(float *)a11[2 * (int)v29 + 506].i32 <= 0.0)
    {
      float v23 = *(float *)((char *)a11[505].i32 + (v31 | 4));
    }
    else
    {
      uint64_t v32 = (int)(4 * v29);
      float v20 = v20 + vabds_f32(v20, *(float *)&v30->i32[v32]);
      float v23 = *(float *)((char *)v30->i32 + (v31 | 4))
          + vabds_f32(*(float *)((char *)v30->i32 + (v31 | 4)), *(float *)((char *)v30->i32 + ((v32 * 4) | 4)));
    }
    float v22 = *(float *)((char *)a11[505].i32 + (v31 | 0xC));
  }
  else
  {
LABEL_10:
    float v28 = v21;
  }
  uint64_t result = 0;
  float v34 = (float)a5;
  unsigned int v35 = (int)(float)(v23 * (float)a5);
  if ((v35 & 0x80000000) != 0) {
    return result;
  }
  float v36 = (float)a6;
  int v37 = (int)(float)(v20 * (float)a6);
  if (v37 < 0) {
    return result;
  }
  unsigned int v38 = (int)(float)(v22 * v34);
  if ((v38 & 0x80000000) != 0) {
    return result;
  }
  unsigned int v39 = (int)(float)(v28 * v36);
  if ((v39 & 0x80000000) != 0) {
    return result;
  }
  if ((int)(v35 + v38) > a5 - 20 || (int)(v37 + v39) > a6 - 20) {
    return 0;
  }
  if (v38 == a5 && v39 == a6 || (v38 | v39) == 0)
  {
    *a12 = 0;
    *(_OWORD *)(a13 + 124) = 0u;
    *(_OWORD *)(a13 + 96) = 0u;
    *(_OWORD *)(a13 + 112) = 0u;
    *(_OWORD *)(a13 + 64) = 0u;
    *(_OWORD *)(a13 + 80) = 0u;
    *(_OWORD *)(a13 + 32) = 0u;
    *(_OWORD *)(a13 + 48) = 0u;
    *(_OWORD *)a13 = 0u;
    *(_OWORD *)(a13 + 16) = 0u;
  }
  else
  {
    *a12 = 1;
    *(_DWORD *)(a13 + 4) = v35;
    *(_DWORD *)(a13 + 8) = v37;
    *(_DWORD *)(a13 + 12) = v38;
    *(_DWORD *)(a13 + 16) = v39;
    *(void *)(a13 + 20) = v19;
  }
  __int32 v42 = a11[11].i32[0];
  a11[11].i32[0] = 9;
  unsigned int v43 = a11[86].u32[0];
  if (!*a12 || v22 <= 0.0)
  {
    v43 >>= 1;
    a11[86].i32[0] = v43;
    goto LABEL_67;
  }
  unsigned int v44 = a11[85].u8[5];
  if (v43 < v44)
  {
    if (v43 <= 1) {
      int v45 = 1;
    }
    else {
      int v45 = a11[86].i32[0];
    }
    unsigned int v46 = 2 * v45;
    if (v46 >= v44) {
      unsigned int v43 = a11[85].u8[5];
    }
    else {
      unsigned int v43 = v46;
    }
    goto LABEL_47;
  }
  if (v43 > v44)
  {
    if (v43 >> 1 <= v44) {
      unsigned int v43 = a11[85].u8[5];
    }
    else {
      v43 >>= 1;
    }
LABEL_47:
    a11[86].i32[0] = v43;
  }
  if (!v43) {
    goto LABEL_67;
  }
  if ((int)v19 <= 269 && (v19 <= 0x59 || (v19 - 90) >= 0x5A))
  {
    int v49 = (int)(10 * v38) >> 3;
    int v48 = (int)(float)(v28 * v36);
    int v47 = (int)(float)(v20 * (float)a6);
  }
  else
  {
    int v47 = v37 - (v39 >> 3);
    if (v47 < 0) {
      goto LABEL_67;
    }
    int v48 = (int)(10 * v39) >> 3;
    int v49 = (int)(float)(v22 * v34);
  }
  int v50 = v35 - (v38 >> 3);
  if (v50 < 0 || ((v49 | v35 | v48) & 0x80000000) != 0) {
    goto LABEL_67;
  }
  BOOL v51 = v50 < a5 && v47 < a6;
  BOOL v52 = v51 && v48 < a6;
  if (!v52 || v49 >= a5) {
    goto LABEL_67;
  }
  int v165 = v19;
  char v54 = a11 + 5;
  if (v47 + v48 > a6 - 2) {
    int v47 = a6 - 2 - v48;
  }
  int v164 = v47;
  int v154 = v48;
  int v147 = a6 - 2;
  int v145 = v48 + v37;
  if (v48 + v37 > a6 - 2) {
    int v37 = a6 - 2 - v48;
  }
  int v150 = v37;
  int v153 = v49;
  if ((int)(v50 + ((3 * v49) >> 1)) <= a5 - 2) {
    unsigned int v55 = v35 - (v38 >> 3);
  }
  else {
    unsigned int v55 = a5 - 2 - ((3 * v49) >> 1);
  }
  signed int v149 = v55;
  int v161 = 3 * v49;
  if ((int)(v35 + ((3 * v49) >> 1)) > a5 - 2) {
    unsigned int v35 = a5 - 2 - ((3 * v49) >> 1);
  }
  signed int v156 = v35;
  a11[15].i32[0] = v43;
  a11[24].i32[0] = a5;
  a11[24].i32[1] = a5;
  a11[25].i32[0] = a6;
  a11[25].i32[1] = a6;
  a11[26].i32[0] = a7;
  a11[26].i32[1] = a8;
  a11[27].i32[0] = a7;
  a11[27].i32[1] = a8;
  a11[35].i16[0] = 0;
  uint64_t v56 = *a10;
  if (!*a10)
  {
    if (sub_1BBB4EE18(a10, (uint64_t)v54)) {
      goto LABEL_67;
    }
    char v54 = a11 + 5;
    uint64_t v56 = *a10;
  }
  if (sub_1BBB4EFD8(v56, v54))
  {
LABEL_67:
    uint64_t result = 0;
    a11[11].i32[0] = v42;
    a11[15].i32[0] = v43;
    return result;
  }
  int v57 = v154 + 31;
  if (v154 >= 0) {
    int v57 = v154;
  }
  int v58 = v153 + 31;
  if (v153 >= 0) {
    int v58 = v153;
  }
  if (!*a12) {
    return 1;
  }
  int v59 = v154 >> 4;
  int v143 = v154 >> 4;
  if (v165 <= 269 && (v165 - 90) > 0x59)
  {
    int v146 = v164 + v154;
    int v60 = v58 >> 5;
    int v61 = (v58 >> 5) - v149 + v156;
    if (v61 <= 2) {
      int v61 = 2;
    }
    uint64_t v162 = (v61 - 1);
    if ((int)(0x100 / v162) <= 1) {
      unsigned int v62 = 1;
    }
    else {
      unsigned int v62 = 0x100 / v162;
    }
    unsigned int v63 = v156 + v38;
    int v64 = v149 + v153 - (v156 + v38);
    int v148 = v58 >> 5;
    unsigned int v65 = v64 + v60;
    if (v64 + v60 <= 1) {
      unsigned int v65 = 1;
    }
    if (v65 > 0x100) {
      unsigned int v66 = 1;
    }
    else {
      unsigned int v66 = 0x100 / v65;
    }
    int v144 = v164 + v59;
    if (v59 < v154)
    {
      uint64_t v67 = v144;
      float v68 = (unsigned __int8 *)(a1 + v149 + a7 * (uint64_t)v144 + v162);
      double v69 = (unsigned char *)(a2 + v149 + a8 * (uint64_t)v144 + v162);
      do
      {
        unsigned int v71 = v62;
        int v72 = v69;
        int v73 = v68;
        uint64_t v74 = v162;
        do
        {
          if (v71 >= 0xFF) {
            __int16 v75 = 255;
          }
          else {
            __int16 v75 = v71;
          }
          __int16 v76 = *v73--;
          *int v72 = (unsigned __int16)((256 - v75) * v76 + v75 * *v72 + 128) >> 8;
          if (v67)
          {
            uint64_t v70 = a4 + v149 + a8 * (uint64_t)((int)v67 >> 1);
            *(unsigned char *)(v70 + v74) = (unsigned __int16)((256 - v75)
                                                     * *(unsigned __int8 *)(a3
                                                                          + v149
                                                                          + a7 * (uint64_t)((int)v67 >> 1)
                                                                          + v74)
                                                     + v75 * *(unsigned __int8 *)(v70 + v74)
                                                     + 128) >> 8;
          }
          --v72;
          v71 += v62;
          BOOL v51 = v74-- <= 0;
        }
        while (!v51);
        if (v64 > -v148)
        {
          unsigned int v78 = v66;
          int v79 = -v148;
          do
          {
            if ((int)(v79 + v63) < 0 != __OFADD__(v79, v63)) {
              int v80 = -v63;
            }
            else {
              int v80 = v79;
            }
            if (v78 >= 0xFF) {
              __int16 v81 = 255;
            }
            else {
              __int16 v81 = v78;
            }
            *(unsigned char *)(a2 + v156 + v38 + v67 * a8 + v80) = (unsigned __int16)((256 - v81)
                                                                            * *(unsigned __int8 *)(a1
                                                                                                 + v156
                                                                                                 + v38
                                                                                                 + v67 * a7
                                                                                                 + v80)
                                                                            + v81
                                                                            * *(unsigned __int8 *)(a2
                                                                                                 + v156
                                                                                                 + v38
                                                                                                 + v67 * a8
                                                                                                 + v80)
                                                                            + 128) >> 8;
            if (v67)
            {
              uint64_t v77 = a4 + v156 + v38 + a8 * (uint64_t)((int)v67 >> 1);
              *(unsigned char *)(v77 + v80) = (unsigned __int16)((256 - v81)
                                                       * *(unsigned __int8 *)(a3
                                                                            + v156
                                                                            + v38
                                                                            + a7 * (uint64_t)((int)v67 >> 1)
                                                                            + v80)
                                                       + v81 * *(unsigned __int8 *)(v77 + v80)
                                                       + 128) >> 8;
            }
            int v79 = v80 + 1;
            v78 += v66;
          }
          while (v80 + 1 < v64);
        }
        ++v67;
        v68 += a7;
        v69 += a8;
      }
      while (v67 < v146);
    }
    size_t v82 = v38 - 2 * v148;
    if (v156 + v148 + (int)v82 >= a5) {
      int v83 = ~v82 + a5;
    }
    else {
      int v83 = v156 + v148;
    }
    if ((int)v82 >= 1)
    {
      if (v143 < v154)
      {
        uint64_t v84 = v144;
        int v85 = (char *)(a1 + v83 + a7 * (uint64_t)v144);
        int v86 = (char *)(a2 + v83 + a8 * (uint64_t)v144);
        do
        {
          memcpy(v86, v85, v82);
          ++v84;
          v85 += a7;
          v86 += a8;
        }
        while (v84 < v146);
      }
      int v87 = v144 >= 0 ? v144 : v144 + 1;
      int v88 = v87 >> 1;
      int v89 = v146 >= 0 ? v164 + v154 : v146 + 1;
      if (v88 < v89 >> 1)
      {
        uint64_t v90 = (v89 >> 1) - (uint64_t)v88;
        int v91 = (char *)(a3 + v83 + v88 * (uint64_t)a7);
        uint64_t v92 = (char *)(a4 + v83 + v88 * (uint64_t)a8);
        do
        {
          memcpy(v92, v91, v82);
          v91 += a7;
          v92 += a8;
          uint64_t result = 1;
          --v90;
        }
        while (v90);
        return result;
      }
    }
    return 1;
  }
  int v93 = v57 >> 5;
  int v94 = v153 >> 4;
  int v142 = v153 >> 2;
  if ((int)(v164 + v154 - (v150 + v39)) <= 1) {
    unsigned int v95 = 1;
  }
  else {
    unsigned int v95 = v164 + v154 - (v150 + v39);
  }
  unsigned int v96 = v150 - v164;
  if (v150 - v164 <= 1) {
    unsigned int v96 = 1;
  }
  int v97 = v150 + v93;
  int v98 = v150 + v39 - v93;
  if (v98 <= 1) {
    int v99 = 1;
  }
  else {
    int v99 = v98;
  }
  int v100 = v97 + (v96 >> 1);
  if (v100 >= v147) {
    int v100 = v147;
  }
  int v160 = v100;
  int v101 = v99 + (v95 >> 1);
  if (v101 >= v147) {
    int v101 = v147;
  }
  int v159 = v101;
  if (v94 < v161 / 2)
  {
    uint64_t v102 = (v97 - (v96 >> 1)) & ~((int)(v97 - (v96 >> 1)) >> 31);
    int v166 = (v99 - (v95 >> 1)) & ~((int)(v99 - (v95 >> 1)) >> 31);
    unsigned int v103 = ((v95 >> 1) + 4096) / v95 + 1;
    int v158 = v149 + ((7 * v153) >> 3);
    int v104 = v94 - ((7 * v153) >> 3);
    uint64_t v157 = v149 + v153 + ~v158;
    uint64_t v105 = v149 + v94;
    uint64_t v155 = v149 + v161 / 2;
    unsigned int v106 = ((v96 >> 1) + 4096) / v96 - 1;
    do
    {
      uint64_t v107 = v104 & ~(v104 >> 31);
      if (v157 >= v107) {
        uint64_t v108 = v104 & ~(v104 >> 31);
      }
      else {
        uint64_t v108 = v149 + v153 + ~v158;
      }
      if ((int)v107 >= (int)v157) {
        LODWORD(v107) = v149 + v153 + ~v158;
      }
      int v163 = v107;
      if (((v105 - v158) & ~(((int)v105 - v158) >> 31)) >= (int)v157) {
        int v109 = v149 + v153 + ~v158;
      }
      else {
        int v109 = (v105 - v158) & ~(((int)v105 - v158) >> 31);
      }
      int v110 = v109 + v160;
      if (v109 + v160 >= a6) {
        uint64_t v111 = (a6 - 1);
      }
      else {
        uint64_t v111 = v110;
      }
      if ((int)v111 >= (int)v102)
      {
        uint64_t v112 = a1 + a7 * v111;
        int v113 = v106;
        uint64_t v114 = a2 + a8 * v111;
        do
        {
          if (v113 >= 4095) {
            int v115 = 4095;
          }
          else {
            int v115 = v113;
          }
          *(unsigned char *)(v114 + v105) = ((4096 - v115) * *(unsigned __int8 *)(v112 + v105)
                                   + v115 * *(unsigned __int8 *)(v114 + v105)
                                   + 2048) >> 12;
          if (v111) {
            *(unsigned char *)(a4 + v105 + a8 * (uint64_t)((int)v111 >> 1)) = ((4096 - v115)
          }
                                                                    * *(unsigned __int8 *)(a3
                                                                                         + v105
                                                                                         + a7
                                                                                         * (uint64_t)((int)v111 >> 1))
                                                                    + v115
                                                                    * *(unsigned __int8 *)(a4 + v105 + a8 * (uint64_t)((int)v111 >> 1))
                                                                    + 2048) >> 12;
          v112 -= a7;
          v114 -= a8;
          v113 += v106;
          BOOL v51 = v111-- <= v102;
        }
        while (!v51);
      }
      int v116 = v166 - v109;
      if ((v116 & ~(v116 >> 31)) < v159)
      {
        uint64_t v117 = (v166 - v163) & ~((v166 - v163) >> 31);
        uint64_t v118 = a1 + a7 * v117;
        uint64_t v119 = a2 + a8 * v117;
        unsigned int v120 = v103;
        do
        {
          if (v120 >= 0xFFF) {
            int v121 = 4095;
          }
          else {
            int v121 = v120;
          }
          *(unsigned char *)(v119 + v105) = ((4096 - v121) * *(unsigned __int8 *)(v118 + v105)
                                   + v121 * *(unsigned __int8 *)(v119 + v105)
                                   + 2048) >> 12;
          if (v117) {
            *(unsigned char *)(a4 + v105 + (v117 >> 1) * (uint64_t)a8) = ((4096 - v121)
          }
                                                                             * *(unsigned __int8 *)(a3
                                                                                                  + v105
                                                                                                  + (v117 >> 1) * (uint64_t)a7)
                                                                             + v121
                                                                             * *(unsigned __int8 *)(a4 + v105 + (v117 >> 1) * (uint64_t)a8)
                                                                             + 2048) >> 12;
          v118 += a7;
          ++v117;
          v119 += a8;
          v120 += v103;
        }
        while (v117 < v159);
      }
      if (v110 < v116)
      {
        uint64_t v122 = v160 + v108;
        uint64_t v123 = a2 + a8 * v122;
        uint64_t v124 = a1 + a7 * v122;
        do
        {
          *(unsigned char *)(v123 + v105) = *(unsigned char *)(v124 + v105);
          if (v122) {
            *(unsigned char *)(a4 + v105 + a8 * (uint64_t)((int)v122 >> 1)) = *(unsigned char *)(a3
          }
                                                                              + v105
                                                                              + a7 * (uint64_t)((int)v122 >> 1));
          v124 += a7;
          ++v122;
          v123 += a8;
        }
        while (v122 < v116);
      }
      ++v105;
      ++v104;
    }
    while (v105 < v155);
  }
  if (v142 <= 1) {
    unsigned int v125 = 1;
  }
  else {
    unsigned int v125 = v153 >> 2;
  }
  int v126 = v150 + v143;
  if (v150 + v143 >= (int)(v150 + v39 - v143)) {
    return 1;
  }
  uint64_t v127 = v126;
  int v128 = v147;
  if (v145 < v147) {
    int v128 = v145;
  }
  uint64_t v129 = (int)(v128 + v39 - (v154 + v143));
  uint64_t v130 = (v142 - 1) + (uint64_t)v149;
  uint64_t v131 = (unsigned __int8 *)(a1 + v130 + a7 * (uint64_t)v126);
  uint64_t v132 = (unsigned char *)(a2 + v130 + a8 * (uint64_t)v126);
  unsigned int v133 = ((v125 >> 1) + 4096) / v125;
  do
  {
    if (v153 >= 4)
    {
      unint64_t v134 = (unsigned __int8 *)(a3 + v130 + a7 * (uint64_t)((int)v127 >> 1));
      int v135 = (unsigned char *)(a4 + v130 + a8 * (uint64_t)((int)v127 >> 1));
      unsigned int v136 = v133;
      uint64_t v137 = v132;
      uint64_t v138 = v131;
      int v139 = v142 + 1;
      do
      {
        if (v136 >= 0xFFF) {
          int v140 = 4095;
        }
        else {
          int v140 = v136;
        }
        int v141 = *v138--;
        *uint64_t v137 = ((4096 - v140) * v141 + v140 * *v137 + 2048) >> 12;
        if (v127) {
          *int v135 = ((4096 - v140) * *v134 + v140 * *v135 + 2048) >> 12;
        }
        --v139;
        --v134;
        --v135;
        --v137;
        v136 += v133;
      }
      while (v139 > 1);
    }
    ++v127;
    v131 += a7;
    v132 += a8;
    uint64_t result = 1;
  }
  while (v127 != v129);
  return result;
}

void *sub_1BBB443CC(void *result, uint64_t a2)
{
  uint64_t v2 = result[647];
  if (*(unsigned char *)(v2 + 5425))
  {
    uint64_t v3 = *(void **)(v2 + 5416);
    if (v3[15] != a2 && v3[16] != a2 && v3[17] != a2)
    {
      uint64_t v4 = *(int *)(*(void *)(v2 + 136) + 4868);
      v3[v4 + 15] = a2;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[647] + 5416) + 8 * v4 + 120));
    }
  }
  return result;
}

uint64_t sub_1BBB4442C(uint64_t a1, int a2, uint64_t a3, float *a4, float *a5, int *a6)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v66 = v6;
  uint64_t v67 = v7;
  LODWORD(v11) = 0;
  uint64_t v12 = a1 + 4812;
  int v60 = (char *)(a1 + 4210);
  int v58 = (char *)(a1 + 3608);
  int v59 = (char *)(a1 + 3909);
  uint64_t v56 = (char *)(a1 + 3006);
  int v57 = (char *)(a1 + 3307);
  int32x2_t __dst = (char *)(a1 + 696);
  unsigned int v55 = (char *)(a1 + 2705);
  uint64_t v53 = (int *)(a1 + 152);
  uint64_t v64 = a1 + 635;
  while (1)
  {
    unsigned int v13 = *(const char **)(a3 + 8 * (int)v11);
    if (!v13) {
      return 0;
    }
    if (!strcmp(*(const char **)(a3 + 8 * (int)v11), "-00")) {
      goto LABEL_684;
    }
    uint64_t v14 = (int)v11;
    if (!strcmp(v13, "-20"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 52) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 157) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-283"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 56) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-21"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      float v15 = atof(*(const char **)(a3 + 8 * v11));
      *(float *)(a1 + 60) = v15;
      *(unsigned char *)(v12 + 158) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-100001"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 4844) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-34"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 44) = atoi(*(const char **)(a3 + 8 * v11));
      *(_DWORD *)(a1 + 48) = 0;
      *(unsigned char *)(v12 + 289) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-35"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 394) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 291) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-36"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 404) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 292) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-01"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 408) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 170) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-11"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 412) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 171) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-69"))
    {
      *(unsigned char *)(a1 + 6) = 1;
      *(unsigned char *)(v12 + 160) = 1;
      if ((int)v11 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 8) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 1)));
      if ((int)v11 + 2 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 10) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 2)));
      if ((int)v11 + 3 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 12) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 3)));
      uint64_t v11 = (int)v11 + 4;
      if ((int)v14 + 4 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 14) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-118"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 235) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 165) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-119"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 602) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 166) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-184"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 603) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 167) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-214"))
    {
      if ((int)v11 + 2 >= a2) {
        goto LABEL_684;
      }
      LODWORD(v11) = v11 + 1;
      unsigned __int8 v16 = atoi(*(const char **)(a3 + 8 * (v14 + 1)));
      unsigned __int8 v17 = v16 <= 0x10u ? v16 : 16;
      *(unsigned char *)(a1 + 651) = v17;
      *(unsigned char *)(v12 + 179) = 1;
      if ((int)(v11 + 2 * v17) >= a2) {
        goto LABEL_684;
      }
      if (v17)
      {
        unint64_t v18 = 0;
        do
        {
          if ((int)v11 + 1 < a2)
          {
            *(unsigned char *)(v64 + v18) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 1)));
            unsigned __int8 v17 = *(unsigned char *)(a1 + 651);
            LODWORD(v11) = v11 + 1;
          }
          ++v18;
        }
        while (v18 < v17);
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-215"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 652) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 180) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-111"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 236) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 169) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-24"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      char v19 = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(a1 + 262) = v19;
      *(unsigned char *)(v12 + 293) = 1;
      if (v19 == 3)
      {
        *(unsigned char *)(a1 + 263) = atoi(*(const char **)(a3 + 8 * v14 + 16));
        LODWORD(v11) = v14 + 3;
        *(unsigned char *)(a1 + 264) = atoi(*(const char **)(a3 + 8 * (v14 + 3)));
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-113"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 261) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 294) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-135"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 609) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 307) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-134"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 608) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 306) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-43"))
    {
      *(unsigned char *)(a1 + 291) = 1;
      *(unsigned char *)(v12 + 301) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-37"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 240) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 295) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-38"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 213) = atoi(*(const char **)(a3 + 8 * v11)) > 0;
      *(unsigned char *)(v12 + 296) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-110"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 596) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 297) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-08"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 228) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 155) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-27"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 229) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(a1 + 232) = 1;
      *(unsigned char *)(v12 + 152) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-28"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 230) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(a1 + 233) = 1;
      *(unsigned char *)(v12 + 153) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-29"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 231) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(a1 + 234) = 1;
      *(unsigned char *)(v12 + 154) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-63"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 418) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 156) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-22"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 304) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 161) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-23"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 300) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 164) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-75"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      float v20 = atof(*(const char **)(a3 + 8 * v11));
      *(float *)(a1 + 312) = v20;
      *(unsigned char *)(v12 + 162) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-76"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      float v21 = atof(*(const char **)(a3 + 8 * v11));
      *(float *)(a1 + 308) = v21;
      *(unsigned char *)(v12 + 163) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-30"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 211) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 181) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-31"))
    {
      *(unsigned char *)(a1 + 212) = 1;
      *(unsigned char *)(v12 + 182) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-106"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 72) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 185) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-108"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 76) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 186) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-109"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 80) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 187) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-103"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 420) = atol(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 188) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-218"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 424) = atol(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 189) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-25"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 244) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 240) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-26"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 248) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 241) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-105"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 252) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 242) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-32"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      int v22 = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(a1 + 238) = v22;
      *(unsigned char *)(v12 + 172) = 1;
      goto LABEL_327;
    }
    if (!strcmp(v13, "-97"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      int v22 = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(a1 + 239) = v22;
      *(unsigned char *)(v12 + 173) = 1;
LABEL_327:
      if (v22 << 24 >= 268435457) {
        goto LABEL_684;
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-16"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 266) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 244) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-15"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 265) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 243) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-17"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 267) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 245) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-92"))
    {
      *(_DWORD *)(a1 + 88) = 1;
      *(unsigned char *)(v12 + 303) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-41"))
    {
      *(unsigned char *)(a1 + 271) = 1;
      *(unsigned char *)(v12 + 260) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-42"))
    {
      *(unsigned char *)(a1 + 273) = 1;
      *(unsigned char *)(v12 + 264) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-42.0"))
    {
      *(unsigned char *)(a1 + 289) = 1;
      *(unsigned char *)(v12 + 265) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-93"))
    {
      *(unsigned char *)(a1 + 274) = 1;
      *(unsigned char *)(v12 + 262) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-95"))
    {
      *(unsigned char *)(a1 + 275) = 1;
      *(unsigned char *)(v12 + 263) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-48"))
    {
      *(unsigned char *)(a1 + 268) = 1;
      *(unsigned char *)(v12 + 248) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-49"))
    {
      *(unsigned char *)(a1 + 276) = 1;
      *(unsigned char *)(v12 + 249) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-50"))
    {
      *(unsigned char *)(a1 + 277) = 1;
      *(unsigned char *)(v12 + 250) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-51"))
    {
      *(unsigned char *)(a1 + 278) = 0;
      *(unsigned char *)(v12 + 251) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-52"))
    {
      *(unsigned char *)(a1 + 279) = 0;
      *(unsigned char *)(v12 + 252) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-53"))
    {
      *(unsigned char *)(a1 + 280) = 0;
      *(unsigned char *)(v12 + 253) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-54"))
    {
      *(unsigned char *)(a1 + 283) = 0;
      *(unsigned char *)(v12 + 254) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-55"))
    {
      *(unsigned char *)(a1 + 285) = 1;
      *(unsigned char *)(v12 + 255) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-56"))
    {
      *(unsigned char *)(a1 + 286) = 1;
      *(unsigned char *)(v12 + 256) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-57"))
    {
      *(unsigned char *)(a1 + 287) = 1;
      *(unsigned char *)(v12 + 257) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-58"))
    {
      *(unsigned char *)(a1 + 288) = 1;
      *(unsigned char *)(v12 + 258) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-59"))
    {
      *(unsigned char *)(a1 + 284) = 2;
      *(unsigned char *)(v12 + 259) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-96"))
    {
      *(unsigned char *)(a1 + 612) = 1;
      *(unsigned char *)(v12 + 269) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-91"))
    {
      *(unsigned char *)(a1 + 272) = 1;
      *(unsigned char *)(v12 + 246) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-44"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 281) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 302) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-47"))
    {
      *(unsigned char *)(a1 + 282) = 1;
      *(unsigned char *)(v12 + 247) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-131"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      unsigned int v23 = atoi(*(const char **)(a3 + 8 * v11));
      if (v23 >= 0xFFFF) {
        __int16 v24 = -1;
      }
      else {
        __int16 v24 = v23;
      }
      *(_WORD *)(a1 + 294) = v24;
      *(unsigned char *)(v12 + 267) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-132"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 292) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 268) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-40"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 269) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 299) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-253"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 270) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 300) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-182"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 316) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 209) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-45"))
    {
      *(unsigned char *)(a1 + 317) = 1;
      *(unsigned char *)(v12 + 218) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-148"))
    {
      LODWORD(v11) = v11 + 1;
      if ((int)v11 >= a2)
      {
        *(void *)(a1 + 328) = 0;
        *(unsigned char *)(a1 + 336) = 0;
        *(unsigned char *)(v12 + 222) = 0;
LABEL_684:
        puts("SetErrAndBail()");
        return 1;
      }
      strlcpy(*(char **)(a1 + 328), *(const char **)(a3 + 8), 0x12CuLL);
      *(unsigned char *)(a1 + 336) = 1;
      *(unsigned char *)(v12 + 222) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-46"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 318) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 210) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-65"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *a6 = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 211) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-88"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      float v25 = atof(*(const char **)(a3 + 8 * v11));
      *a4 = v25;
      *(unsigned char *)(v12 + 212) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-77"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      float v26 = atof(*(const char **)(a3 + 8 * v11));
      *a5 = v26;
      *(unsigned char *)(v12 + 213) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-123"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 379) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 216) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-66"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 322) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 214) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-71"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 323) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 215) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-73"))
    {
      uint64_t v11 = (int)v11 + 2;
      if ((int)v14 + 2 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 325) = atoi(*(const char **)(a3 + 8 * v14 + 8));
      *(_WORD *)(a1 + 326) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 217) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-120"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 324) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 219) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-126"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 320) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 221) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-10"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 392) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 224) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-09"))
    {
      LODWORD(v11) = v11 + 1;
      if ((int)v11 >= a2) {
        goto LABEL_684;
      }
      int v27 = *(char **)(a1 + 384);
LABEL_398:
      strlcpy(v27, *(const char **)(a3 + 8), 0x12CuLL);
      goto LABEL_321;
    }
    if (!strcmp(v13, "-72"))
    {
      uint64_t v11 = (int)v11 + 5;
      if ((int)v14 + 5 >= a2) {
        goto LABEL_684;
      }
      float v28 = (const char **)(a3 + 8 * v14);
      *(double *)(a1 + 184) = atof(v28[1]);
      *(_DWORD *)(a1 + 192) = atoi(v28[2]);
      *(unsigned char *)(v12 + 229) = 1;
      unsigned int v29 = *(const char **)(a3 + 8 * v11);
      if (strcmp(v29, "0"))
      {
        if (strcmp(v29, "1")) {
          goto LABEL_684;
        }
      }
      *(_DWORD *)(a1 + 196) = atoi(v28[3]);
      *(_DWORD *)(a1 + 200) = atoi(v28[4]);
      *(_DWORD *)(a1 + 204) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-90"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 210) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 231) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-137"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 209) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 232) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-181"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 116) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 192) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-180"))
    {
      if ((int)v11 + 3 >= a2) {
        goto LABEL_684;
      }
      LODWORD(v11) = v11 + 1;
      unsigned __int8 v30 = atoi(*(const char **)(a3 + 8 * (v14 + 1)));
      unsigned __int8 v31 = v30 <= 8u ? v30 : 8;
      *(unsigned char *)(a1 + 115) = v31;
      *(unsigned char *)(v12 + 234) = 1;
      if ((int)(v11 + 2 * v31) >= a2) {
        goto LABEL_684;
      }
      if (v31)
      {
        uint64_t v32 = v31;
        uint64_t v33 = v53;
        do
        {
          uint64_t v52 = (int)v11 + 2;
          if ((int)v52 < a2)
          {
            *(v33 - 8) = atoi(*(const char **)(a3 + 8 * (int)v11 + 8));
            LODWORD(v11) = v11 + 2;
            *uint64_t v33 = atoi(*(const char **)(a3 + 8 * v52));
          }
          ++v33;
          --v32;
        }
        while (v32);
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-183"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 114) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 235) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-186"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      int v34 = atoi(*(const char **)(a3 + 8 * v11));
      *(_DWORD *)(a1 + 444) = v34;
      if (v34 == 255)
      {
        *(_DWORD *)(a1 + 448) = atoi(*(const char **)(a3 + 8 * v14 + 16));
        LODWORD(v11) = v14 + 3;
        *(_DWORD *)(a1 + 452) = atoi(*(const char **)(a3 + 8 * (v14 + 3)));
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-256"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(v12 + 12) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 346) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-62"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_WORD *)(a1 + 416) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 225) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-64"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 290) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 226) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-150"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 398) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 174) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-151"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 399) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 175) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-152"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 400) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 176) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-156"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 401) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 337) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-153"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 16) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 177) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-273"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 17) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 178) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-104"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 402) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 227) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-89"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 393) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 228) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-130")) {
      goto LABEL_321;
    }
    if (!strcmp(v13, "-112"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(_DWORD *)(a1 + 592) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 233) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-13"))
    {
      *(unsigned char *)(a1 + 397) = 1;
      *(unsigned char *)(a1 + 241) = 0;
      *(unsigned char *)(v12 + 287) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-33"))
    {
      *(_WORD *)(a1 + 265) = 257;
      *(unsigned char *)(a1 + 267) = 1;
      *(unsigned char *)(v12 + 304) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-39"))
    {
      *(unsigned char *)(a1 + 395) = 1;
      *(unsigned char *)(v12 + 298) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-61"))
    {
      *(unsigned char *)(a1 + 241) = 1;
      *(unsigned char *)(v12 + 288) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-102"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 598) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 305) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-114"))
    {
      LODWORD(v11) = v11 + 1;
      if ((int)v11 >= a2) {
        goto LABEL_684;
      }
      int v27 = *(char **)(a1 + 488);
      goto LABEL_398;
    }
    if (!strcmp(v13, "-115"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 599) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 191) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-251"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 660) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 207) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-248"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 666) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 332) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-138"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 601) = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(v12 + 190) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-133"))
    {
      *(unsigned char *)(v12 + 308) = 1;
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(a1 + 610) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-144"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(v12 + 309) = 1;
      char v35 = atoi(*(const char **)(a3 + 8 * v11));
      *(unsigned char *)(a1 + 112) = v35;
      *(unsigned char *)(a1 + 111) = 1;
      if ((v35 & 0xFu) > 0xC || (v35 & 0xF0) != 0)
      {
        *(unsigned char *)(a1 + 111) = 0;
        goto LABEL_684;
      }
      if ((v35 & 0xF) == 0) {
        *(unsigned char *)(a1 + 111) = 0;
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-145"))
    {
      uint64_t v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2) {
        goto LABEL_684;
      }
      *(unsigned char *)(v12 + 310) = 1;
      *(unsigned char *)(a1 + 113) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-67"))
    {
      *(unsigned char *)(v12 + 315) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-68"))
    {
      *(unsigned char *)(v12 + 316) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-74"))
    {
      *(unsigned char *)(v12 + 317) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-116"))
    {
      *(unsigned char *)(v12 + 318) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-129"))
    {
      *(unsigned char *)(v12 + 319) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-117"))
    {
      *(unsigned char *)(v12 + 321) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-128"))
    {
      *(unsigned char *)(v12 + 320) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-139"))
    {
      *(unsigned char *)(v12 + 323) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-221"))
    {
      *(unsigned char *)(v12 + 324) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-140"))
    {
      *(unsigned char *)(v12 + 325) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-141"))
    {
      *(unsigned char *)(v12 + 326) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-142"))
    {
      *(unsigned char *)(v12 + 327) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-216"))
    {
      *(unsigned char *)(v12 + 328) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-217"))
    {
      *(unsigned char *)(v12 + 329) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-220"))
    {
      *(unsigned char *)(v12 + 330) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-252"))
    {
      *(unsigned char *)(v12 + 331) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-249"))
    {
      *(unsigned char *)(v12 + 333) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-258"))
    {
      *(unsigned char *)(v12 + 335) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-272"))
    {
      *(unsigned char *)(v12 + 350) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-257"))
    {
      *(unsigned char *)(v12 + 334) = 1;
      goto LABEL_321;
    }
    if (strcmp(v13, "-101")) {
      break;
    }
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_675;
    }
    *(unsigned char *)(v12 + 322) = 1;
    int v36 = **(char **)(a3 + 8 * v11);
    if (v36 <= 104)
    {
      if (v36 == 98)
      {
        char v50 = 2;
      }
      else
      {
        if (v36 != 99)
        {
LABEL_675:
          *(unsigned char *)(a1 + 577) = 0;
          goto LABEL_321;
        }
        char v50 = 3;
      }
      goto LABEL_674;
    }
    if (v36 == 115)
    {
      char v50 = 4;
LABEL_674:
      *(unsigned char *)(a1 + 577) = v50;
      goto LABEL_321;
    }
    if (v36 == 109)
    {
      char v50 = 5;
      goto LABEL_674;
    }
    if (v36 != 105) {
      goto LABEL_675;
    }
    *(unsigned char *)(a1 + 577) = 1;
LABEL_321:
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2) {
      return 0;
    }
  }
  if (!strcmp(v13, "-160")) {
    goto LABEL_321;
  }
  if (!strcmp(v13, "-161"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 368) = atoi(*(const char **)(a3 + 8 * v11)) != 0;
    *(unsigned char *)(v12 + 312) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-190"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    int v37 = atoi(*(const char **)(a3 + 8 * v11));
    *(_DWORD *)(a1 + 372) = v37;
    *(unsigned char *)(v12 + 313) = 1;
    if (v37 == 1)
    {
      *(unsigned char *)(a1 + 378) = 1;
    }
    else if (v37 >= 2)
    {
      goto LABEL_684;
    }
    goto LABEL_321;
  }
  if (!strcmp(v13, "-209"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 376) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 314) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-208"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 377) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-170"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 380) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-244"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 340) = 1;
    strlcpy(__dst, *(const char **)(a3 + 8 * v11), 0x7D0uLL);
    goto LABEL_321;
  }
  if (!strcmp(v13, "-192"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 614) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 338) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-194"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 615) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 339) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-266"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 15) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 348) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-277"))
  {
    *(unsigned char *)(v12 + 28) = 2;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-195"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 624) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 278) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-196"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 625) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 277) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-197"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 626) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 276) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-210"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 631) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 236) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-211"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 632) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 237) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-212"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    int v38 = atoi(*(const char **)(a3 + 8 * v11));
    if (v38 >= 255) {
      int v39 = 255;
    }
    else {
      int v39 = v38;
    }
    *(unsigned char *)(a1 + 633) = v39 & ~(v39 >> 31);
    *(unsigned char *)(v12 + 238) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-213"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    int v40 = atoi(*(const char **)(a3 + 8 * v11));
    if (v40 >= 255) {
      int v41 = 255;
    }
    else {
      int v41 = v40;
    }
    *(unsigned char *)(a1 + 634) = v41 & ~(v41 >> 31);
    *(unsigned char *)(v12 + 239) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-200"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 653) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 272) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-201"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 654) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 273) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-206"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 657) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 274) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-275"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 658) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 275) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-202"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 655) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 271) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-203"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 656) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 270) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-219"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 675) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 193) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-230"))
  {
    *(unsigned char *)(a1 + 672) = 1;
    *(unsigned char *)(v12 + 261) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-205"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 673) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 223) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-233"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 677) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 198) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-234"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 682) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 199) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-237"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(_DWORD *)(a1 + 692) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 200) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-235"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 683) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 201) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-240"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 686) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 202) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-238"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 684) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 203) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-239"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 685) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 204) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-236"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 687) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 205) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-241"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 688) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 206) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-232"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 2697) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 194) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-242"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2) {
      goto LABEL_684;
    }
    goto LABEL_321;
  }
  if (!strcmp(v13, "-243"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D) {
      goto LABEL_684;
    }
    strncpy(v55, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(unsigned char *)(a1 + 2700) = 1;
    *(unsigned char *)(v12 + 195) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-263"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D) {
      goto LABEL_684;
    }
    strncpy(v56, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(unsigned char *)(a1 + 2701) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-259"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D) {
      goto LABEL_684;
    }
    strncpy(v57, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(unsigned char *)(a1 + 2703) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-260"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D) {
      goto LABEL_684;
    }
    strncpy(v58, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(unsigned char *)(a1 + 2702) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-268"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D) {
      goto LABEL_684;
    }
    strncpy(v59, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(unsigned char *)(v12 + 17) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-274"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D) {
      goto LABEL_684;
    }
    strncpy(v60, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(unsigned char *)(a1 + 2704) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-250"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2) {
      goto LABEL_684;
    }
    int v42 = sub_1BBB3A954();
    sub_1BBB3AF28(v42);
    goto LABEL_321;
  }
  if (!strcmp(v13, "-264"))
  {
    uint64_t v43 = (int)v11 + 1;
    if ((int)v11 + 1 >= a2) {
      goto LABEL_684;
    }
    LODWORD(v11) = v11 + 1;
    *(unsigned char *)(v12 + 1) = atoi(*(const char **)(a3 + 8 * v43));
    unsigned int v44 = sub_1BBB3A954();
    *(_DWORD *)(a1 + 4820) = v44;
    if (!v44) {
      goto LABEL_684;
    }
    if (*(unsigned char *)(v12 + 13)) {
      *(unsigned char *)(v12 + 13) = v44 > 6;
    }
    Boolean v65 = 0;
    AppIntegerCFDictionaryRef Value = CFPreferencesGetAppIntegerValue(@"UnifiedEncoderMode", @"com.apple.VideoProcessing", &v65);
    if (v65) {
      *(unsigned char *)(v12 + 1) = AppIntegerValue;
    }
    else {
      AppIntegerCFDictionaryRef Value = *(unsigned char *)(v12 + 1);
    }
    switch(AppIntegerValue)
    {
      case 0:
        *(_WORD *)(v12 + 2) = 0;
        goto LABEL_677;
      case 1:
      case 2:
        *(_WORD *)(v12 + 2) = 1;
LABEL_677:
        *(unsigned char *)(v12 + 4) = 0;
        break;
      case 3:
        *(_WORD *)(v12 + 2) = 1;
        *(unsigned char *)(v12 + 4) = 1;
        *(unsigned char *)uint64_t v12 = 0;
        break;
      default:
        goto LABEL_684;
    }
    *(unsigned char *)(v12 + 349) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-261"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 321) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 347) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-262"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 627) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 279) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-279"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 628) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 280) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-281"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 629) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 282) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-282"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 630) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 283) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-245"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 678) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 341) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-246"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 679) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 342) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-280"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 260) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 281) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-247"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 680) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 343) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-254"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 681) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 344) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-255"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(_DWORD *)(a1 + 620) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 345) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100000"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 14) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-267"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 16) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-269"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(_DWORD *)(a1 + 4832) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-270"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 24) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-271"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 25) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-265"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(a1 + 670) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 208) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-278"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 29) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 284) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100002"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 36) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 352) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100003"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 37) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 351) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100004"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    int v46 = atoi(*(const char **)(a3 + 8 * v11));
    *(_DWORD *)(a1 + 4852) = v46;
    *(unsigned char *)(v12 + 39) = v46 != 0;
    *(unsigned char *)(v12 + 285) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100005"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2) {
      goto LABEL_684;
    }
    strlcpy(*(char **)(a1 + 4904), *(const char **)(a3 + 8), 0x12CuLL);
    *(unsigned char *)(v12 + 286) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100006"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(_DWORD *)(a1 + 4924) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100007"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(unsigned char *)(v12 + 116) = atoi(*(const char **)(a3 + 8 * v11)) != 0;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100009"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2) {
      goto LABEL_684;
    }
    strlcpy(*(char **)(a1 + 480), *(const char **)(a3 + 8), 0x12CuLL);
    *(unsigned char *)(v12 + 150) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100008"))
  {
    uint64_t v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2) {
      goto LABEL_684;
    }
    *(_DWORD *)(a1 + 4956) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!*(unsigned char *)(v12 + 149))
  {
    int v47 = (char *)malloc_type_malloc(0x12CuLL, 0x100004077774924uLL);
    *(void *)(a1 + 464) = v47;
    strlcpy(v47, *(const char **)(a3 + 8 * (int)v11), 0x12CuLL);
    *(unsigned char *)(v12 + 149) = 1;
    if ((int)v11 + 1 >= a2) {
      goto LABEL_684;
    }
    int v48 = (char *)malloc_type_malloc(0x12CuLL, 0x100004077774924uLL);
    *(void *)(a1 + 472) = v48;
    strlcpy(v48, *(const char **)(a3 + 8 * ((int)v11 + 1)), 0x12CuLL);
    if ((int)v11 + 2 >= a2) {
      goto LABEL_684;
    }
    *(_WORD *)a1 = atoi(*(const char **)(a3 + 8 * ((int)v11 + 2)));
    uint64_t v11 = (int)v11 + 3;
    if ((int)v14 + 3 >= a2) {
      goto LABEL_684;
    }
    *(_WORD *)(a1 + 4) = atoi(*(const char **)(a3 + 8 * v11));
    *(unsigned char *)(v12 + 151) = 1;
    *(_DWORD *)(a1 + 40) = 0;
    if ((int)v14 + 4 < a2)
    {
      int v49 = *(const char **)(a3 + 8 * (v14 + 4));
      if (*v49 != 45)
      {
        *(_DWORD *)(a1 + 40) = atoi(v49);
        LODWORD(v11) = v14 + 4;
      }
    }
    goto LABEL_321;
  }
  if (!*(unsigned char *)(v12 + 151))
  {
    *(unsigned char *)(v12 + 151) = 1;
    if ((int)v11 + 2 >= a2) {
      goto LABEL_684;
    }
    *(_WORD *)a1 = atoi(*(const char **)(a3 + 8 * (int)v11));
    LODWORD(v11) = v11 + 1;
    *(_WORD *)(a1 + 4) = atoi(*(const char **)(a3 + 8 * (v14 + 1)));
    goto LABEL_321;
  }
  CFLog();
  return 4294967246;
}

__int16 *sub_1BBB471B4(__int16 *result, _DWORD *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (char *)result + 4969;
  if (!*((unsigned char *)result + 5021)) {
    *((unsigned char *)result + 316) = 0;
  }
  if (!*((unsigned char *)result + 5036)) {
    *((unsigned char *)result + 392) = 10;
  }
  if (!*((unsigned char *)result + 4974)) {
    *((_DWORD *)result + 78) = 0x40000000;
  }
  if (!*((unsigned char *)result + 5039)) {
    *((unsigned char *)result + 402) = 1;
  }
  if (!*((unsigned char *)result + 5022)) {
    *((unsigned char *)result + 318) = 6;
  }
  if (!*((unsigned char *)result + 5023)) {
    *a2 = 6;
  }
  int v4 = *((unsigned __int8 *)result + 5026);
  if (!*((unsigned char *)result + 5026)) {
    *((unsigned char *)result + 322) = 1;
  }
  if (!*((unsigned char *)result + 5027)) {
    *((unsigned char *)result + 323) = 1;
  }
  if (!*((unsigned char *)result + 5037)) {
    result[208] = 800;
  }
  if (!*((unsigned char *)result + 5038)) {
    *((unsigned char *)result + 290) = 1;
  }
  if (!*((unsigned char *)result + 4978) && !*((unsigned char *)result + 602)) {
    *((unsigned char *)result + 602) = 2;
  }
  if (!*((unsigned char *)result + 5099)) {
    *((unsigned char *)result + 397) = 0;
  }
  int v5 = *((unsigned __int8 *)result + 5100);
  if (!*((unsigned char *)result + 5100)) {
    *((unsigned char *)result + 241) = 0;
  }
  if (!*((unsigned char *)result + 5040)) {
    *((unsigned char *)result + 393) = 1;
  }
  if (!*((unsigned char *)result + 5045)) {
    *((_DWORD *)result + 148) = 1;
  }
  if (!*((unsigned char *)result + 4973))
  {
    if (*((unsigned char *)result + 5029))
    {
      if (v4) {
        goto LABEL_35;
      }
    }
    else
    {
      *((unsigned char *)result + 325) = 0;
      result[163] = 1;
      if (v4) {
        goto LABEL_35;
      }
    }
    *((unsigned char *)result + 322) = 1;
LABEL_35:
    if (!*((unsigned char *)result + 5022) && !*((unsigned char *)result + 318))
    {
      *((unsigned char *)result + 318) = 1;
      *((unsigned char *)result + 5022) = 1;
    }
    if (*((unsigned char *)result + 316) == 1 && *((unsigned char *)result + 632) == 2)
    {
      *((_DWORD *)result + 76) = -1;
    }
    else
    {
      int v6 = result[2] * *result;
      if (v6 > 101376)
      {
        if (v6 > 0x70800)
        {
          if (v6 > 0xE1000)
          {
            *((_DWORD *)result + 76) = 60;
            int v7 = 0x40000000;
          }
          else
          {
            *((_DWORD *)result + 76) = 90;
            int v7 = 1077936128;
          }
        }
        else
        {
          *((_DWORD *)result + 76) = 120;
          int v7 = 1082130432;
        }
      }
      else
      {
        *((_DWORD *)result + 76) = 150;
        int v7 = 1084227584;
      }
      *((_DWORD *)result + 78) = v7;
    }
  }
  if (*((unsigned char *)result + 4993))
  {
    int v8 = *((_DWORD *)result + 13);
    if (*v3)
    {
      if (!v8)
      {
LABEL_51:
        if (!*((unsigned char *)result + 5109)) {
          result[298] = 767;
        }
        uint64_t result = (__int16 *)sub_1BBB47444((uint64_t)result, 7);
        int v5 = v3[131];
        goto LABEL_60;
      }
    }
    else if (!v8)
    {
      goto LABEL_60;
    }
  }
  else
  {
    if (!*v3 || !*((_DWORD *)result + 13)) {
      goto LABEL_51;
    }
    *((unsigned char *)result + 211) = 1;
  }
  if (!*((unsigned char *)result + 4995)) {
    *((_DWORD *)result + 54) = 3;
  }
  if (!*((unsigned char *)result + 4996)) {
    *((_DWORD *)result + 55) = 1069547520;
  }
  *((_DWORD *)result + 21) = *((_DWORD *)result + 10);
LABEL_60:
  if (!v5) {
    *((unsigned char *)v2 + 241) = 0;
  }
  return result;
}

uint64_t sub_1BBB47444(uint64_t a1, signed int a2)
{
  *(_DWORD *)(a1 + 52) = 0;
  *(unsigned char *)(a1 + 211) = 0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 40);
  if (*(char *)(a1 + 392) >= 1) {
    *(unsigned char *)(a1 + 392) = 1;
  }
  uint64_t result = sub_1BBB474A0(*(unsigned __int16 *)(a1 + 596), a2);
  *(_DWORD *)(a1 + 228) = 16843009 * result;
  return result;
}

uint64_t sub_1BBB474A0(int a1, signed int a2)
{
  if (1023 - a1 >= 1023) {
    int v2 = 1023;
  }
  else {
    int v2 = 1023 - a1;
  }
  if (a1 > 1023) {
    int v2 = 0;
  }
  unsigned int v3 = a2 + ((v2 * (19 - a2) + 128) >> 8);
  if (v2 >= 255) {
    unsigned int v3 = ((7 * v2 - 1657) >> 8) + 19;
  }
  if (v2 >= 511) {
    signed int v4 = ((14 * v2 - 6898) >> 9) + 26;
  }
  else {
    signed int v4 = v3;
  }
  if (v4 >= 40) {
    unsigned int v5 = 40;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v4 >= a2) {
    return v5;
  }
  else {
    return a2;
  }
}

__int16 *sub_1BBB4751C(__int16 *result)
{
  *((unsigned char *)result + 381) = 1;
  *((unsigned char *)result + 320) = 1;
  int v1 = *result;
  int v2 = result[2];
  int v3 = v2 * v1;
  if (!*((unsigned char *)result + 4969))
  {
    if (v3 <= 101376) {
      int v4 = 800000;
    }
    else {
      int v4 = 1500000;
    }
    *((_DWORD *)result + 13) = v4;
  }
  if (!*((unsigned char *)result + 4970)) {
    *((_DWORD *)result + 15) = 1106247680;
  }
  if (!*((unsigned char *)result + 4981)) {
    result[118] = 0;
  }
  *((unsigned char *)result + 396) = 1;
  *((unsigned char *)result + 228) = 19;
  if (!*((unsigned char *)result + 4993)) {
    *((unsigned char *)result + 211) = 1;
  }
  if (!*((unsigned char *)result + 4994)) {
    *((unsigned char *)result + 212) = 1;
  }
  *((_DWORD *)result + 21) = 31;
  if (!*((unsigned char *)result + 4995)) {
    *((_DWORD *)result + 54) = 3;
  }
  if (!*((unsigned char *)result + 4996)) {
    *((_DWORD *)result + 55) = 1069547520;
  }
  if (!*((unsigned char *)result + 5000)) {
    *((_DWORD *)result + 105) = 2;
  }
  if (v2 > v1)
  {
    if (v1 < 320)
    {
      if (v1 >= 160)
      {
        if (!*((unsigned char *)result + 5101)) {
          *((_DWORD *)result + 11) = 8;
        }
        if (*((unsigned char *)result + 5111)) {
          goto LABEL_59;
        }
        char v5 = 2;
LABEL_58:
        *((unsigned char *)result + 269) = v5;
LABEL_59:
        if (!*((unsigned char *)result + 5067)) {
          *((unsigned char *)result + 285) = 1;
        }
LABEL_61:
        if (!*((unsigned char *)result + 5055)) {
          *((unsigned char *)result + 265) = 5;
        }
        return result;
      }
      if (!*((unsigned char *)result + 5101)) {
        *((_DWORD *)result + 11) = 4;
      }
      if (!*((unsigned char *)result + 5111))
      {
        char v6 = 2;
LABEL_69:
        *((unsigned char *)result + 269) = v6;
        return result;
      }
      return result;
    }
LABEL_28:
    if (!*((unsigned char *)result + 5101)) {
      *((_DWORD *)result + 11) = 8;
    }
    if (!*((unsigned char *)result + 5111)) {
      *((unsigned char *)result + 269) = 2;
    }
    if (!*((unsigned char *)result + 5053)) {
      *((_DWORD *)result + 62) = 1;
    }
    if (!*((unsigned char *)result + 5069)) {
      *((unsigned char *)result + 287) = 1;
    }
    if (!*((unsigned char *)result + 5055)) {
      *((unsigned char *)result + 265) = 5;
    }
    if (!*((unsigned char *)result + 5072)) {
      *((unsigned char *)result + 271) = 1;
    }
    return result;
  }
  if (v3 > 101376) {
    goto LABEL_28;
  }
  if (v3 == 101376)
  {
    if (!*((unsigned char *)result + 5101)) {
      *((_DWORD *)result + 11) = 5;
    }
    if (!*((unsigned char *)result + 5111)) {
      *((unsigned char *)result + 269) = 3;
    }
    if (!*((unsigned char *)result + 5053)) {
      *((_DWORD *)result + 62) = 1;
    }
    if (!*((unsigned char *)result + 5069)) {
      *((unsigned char *)result + 287) = 1;
    }
    goto LABEL_61;
  }
  if (v3 >= 25345)
  {
    if (!*((unsigned char *)result + 5101)) {
      *((_DWORD *)result + 11) = 5;
    }
    if (*((unsigned char *)result + 5111)) {
      goto LABEL_59;
    }
    char v5 = 3;
    goto LABEL_58;
  }
  if (v3 < 5121)
  {
    if (!*((unsigned char *)result + 5101)) {
      *((_DWORD *)result + 11) = 1;
    }
    if (!*((unsigned char *)result + 5111)) {
      *((unsigned char *)result + 269) = 0;
    }
    if (!*((unsigned char *)result + 5052)) {
      *((_DWORD *)result + 61) = 48;
    }
  }
  else
  {
    if (!*((unsigned char *)result + 5101)) {
      *((_DWORD *)result + 11) = 1;
    }
    if (!*((unsigned char *)result + 5111))
    {
      char v6 = 1;
      goto LABEL_69;
    }
  }
  return result;
}

__int16 *sub_1BBB477A8(__int16 *result)
{
  uint64_t v1 = (uint64_t)result;
  int v2 = (char *)result + 4967;
  int v3 = result[2] * *result;
  int v4 = *((unsigned __int8 *)result + 4969);
  if (!*((unsigned char *)result + 4969))
  {
    if (v3 <= 101376) {
      int v5 = 800000;
    }
    else {
      int v5 = 1500000;
    }
    *((_DWORD *)result + 13) = v5;
  }
  if (!*((unsigned char *)result + 4970)) {
    *((_DWORD *)result + 15) = 1106247680;
  }
  if (!*v2 && !*((unsigned char *)result + 5109)) {
    *((unsigned char *)result + 228) = 19;
  }
  *((unsigned char *)result + 396) = 1;
  if (!*((unsigned char *)result + 4973))
  {
    uint64_t result = sub_1BBB47AD8(result);
    int v4 = v2[2];
  }
  if (v2[26])
  {
    int v6 = *(_DWORD *)(v1 + 52);
    if (v4)
    {
      if (!v6)
      {
LABEL_20:
        if (!v2[142]) {
          *(_WORD *)(v1 + 596) = 767;
        }
        uint64_t result = (__int16 *)sub_1BBB47444(v1, 12);
        goto LABEL_27;
      }
    }
    else if (!v6)
    {
      goto LABEL_27;
    }
  }
  else
  {
    if (!v4 || !*(_DWORD *)(v1 + 52)) {
      goto LABEL_20;
    }
    *(unsigned char *)(v1 + 211) = 1;
  }
  if (!v2[27]) {
    *(unsigned char *)(v1 + 212) = 1;
  }
  *(_DWORD *)(v1 + 84) = 31;
  uint64_t result = (__int16 *)sub_1BBB47B60((_DWORD *)v1);
LABEL_27:
  if (v3 > 307200)
  {
    if (!v2[134]) {
      *(_DWORD *)(v1 + 44) = 9;
    }
    if (!v2[144]) {
      *(unsigned char *)(v1 + 269) = 2;
    }
    if (!v2[86]) {
      *(_DWORD *)(v1 + 248) = 1;
    }
    if (!v2[95]) {
      *(unsigned char *)(v1 + 277) = 1;
    }
    if (!v2[102]) {
      *(unsigned char *)(v1 + 287) = 1;
    }
    if (!v2[99]) {
      *(unsigned char *)(v1 + 283) = 0;
    }
    goto LABEL_75;
  }
  if (v3 > 101376)
  {
    if (!v2[134]) {
      *(_DWORD *)(v1 + 44) = 8;
    }
    if (!v2[144]) {
      *(unsigned char *)(v1 + 269) = 2;
    }
    if (!v2[86]) {
      *(_DWORD *)(v1 + 248) = 1;
    }
    if (!v2[95]) {
      *(unsigned char *)(v1 + 277) = 1;
    }
    if (!v2[102]) {
      *(unsigned char *)(v1 + 287) = 1;
    }
LABEL_67:
    if (!v2[101]) {
      *(unsigned char *)(v1 + 286) = 1;
    }
    goto LABEL_75;
  }
  if (v3 >= 25345)
  {
    if (!v2[134]) {
      *(_DWORD *)(v1 + 44) = 5;
    }
    if (!v2[144]) {
      *(unsigned char *)(v1 + 269) = 3;
    }
    if (!v2[95]) {
      *(unsigned char *)(v1 + 277) = 1;
    }
    if (!v2[100]) {
      *(unsigned char *)(v1 + 285) = 1;
    }
    goto LABEL_67;
  }
  if (v3 >= 5121)
  {
    if (!v2[134]) {
      *(_DWORD *)(v1 + 44) = 1;
    }
    if (!v2[144]) {
      *(unsigned char *)(v1 + 269) = 1;
    }
    if (!v2[95]) {
      *(unsigned char *)(v1 + 277) = 1;
    }
    goto LABEL_67;
  }
  if (!v2[134]) {
    *(_DWORD *)(v1 + 44) = 1;
  }
  if (!v2[144]) {
    *(unsigned char *)(v1 + 269) = 0;
  }
  if (!v2[85]) {
    *(_DWORD *)(v1 + 244) = 48;
  }
LABEL_75:
  int v7 = *(_DWORD *)(v1 + 52);
  if ((v7 - 1) < 0x186A0)
  {
    if (v2[1]) {
      return result;
    }
    __int16 v8 = -8;
    goto LABEL_84;
  }
  if ((v7 - 100001) <= 0x155CBF)
  {
    if (v2[1]) {
      return result;
    }
    __int16 v8 = -5;
    goto LABEL_84;
  }
  if ((v7 - 1500001) <= 0x44AA1F && !v2[1])
  {
    __int16 v8 = -3;
LABEL_84:
    *(_WORD *)(v1 + 418) = v8;
  }
  return result;
}

__int16 *sub_1BBB47AD8(__int16 *result)
{
  int v1 = result[2] * *result;
  if (v1 > 101376)
  {
    if (v1 > 0x70800)
    {
      if (v1 > 0xE1000)
      {
        int v2 = 60;
        *((_DWORD *)result + 76) = 60;
        int v3 = 0x40000000;
      }
      else
      {
        int v2 = 90;
        *((_DWORD *)result + 76) = 90;
        int v3 = 1077936128;
      }
    }
    else
    {
      int v2 = 120;
      *((_DWORD *)result + 76) = 120;
      int v3 = 1082130432;
    }
  }
  else
  {
    int v2 = 150;
    *((_DWORD *)result + 76) = 150;
    int v3 = 1084227584;
  }
  *((_DWORD *)result + 78) = v3;
  *((_DWORD *)result + 21) = v2;
  return result;
}

_DWORD *sub_1BBB47B60(_DWORD *result)
{
  result[56] = 1;
  unsigned int v1 = result[76];
  if (v1 == 1)
  {
    result[21] = 1;
    uint64_t v2 = 0x3FC0000000000001;
  }
  else
  {
    if (v1 <= 5)
    {
      float v3 = (float)((float)v1 * 0.5) + 1.0;
      result[21] = (int)v3;
      result[54] = (int)v3;
      result[55] = 1069547520;
      return result;
    }
    if (v1 > 0x1F)
    {
      result[21] = 31;
      uint64_t v4 = 31;
    }
    else
    {
      result[21] = v1;
      uint64_t v4 = 5;
    }
    uint64_t v2 = v4 & 0xFFFFFFFFFFFFLL | 0x3FA0000000000000;
  }
  *((void *)result + 27) = v2;
  return result;
}

uint64_t sub_1BBB47BDC(int a1, uint64_t a2, __int16 *a3)
{
  uint64_t v75 = 0;
  unsigned int v74 = 0;
  if (!*((unsigned char *)a3 + 4960))
  {
    *(_OWORD *)((char *)a3 + 5149) = 0u;
    *((_OWORD *)a3 + 320) = 0u;
    *((_OWORD *)a3 + 321) = 0u;
    *((_OWORD *)a3 + 318) = 0u;
    *((_OWORD *)a3 + 319) = 0u;
    *((_OWORD *)a3 + 316) = 0u;
    *((_OWORD *)a3 + 317) = 0u;
    *((_OWORD *)a3 + 314) = 0u;
    *((_OWORD *)a3 + 315) = 0u;
    *((_OWORD *)a3 + 312) = 0u;
    *((_OWORD *)a3 + 313) = 0u;
    *((_OWORD *)a3 + 310) = 0u;
    *((_OWORD *)a3 + 311) = 0u;
  }
  *((unsigned char *)a3 + 4961) = 1;
  *((void *)a3 + 58) = 0;
  *((void *)a3 + 59) = 0;
  *((void *)a3 + 61) = 0;
  uint64_t result = sub_1BBB4442C((uint64_t)a3, a1, a2, (float *)&v75 + 1, (float *)&v75, (int *)&v74);
  if (result) {
    return CFLog();
  }
  if (*((unsigned char *)a3 + 113)) {
    *((unsigned char *)a3 + 111) = 1;
  }
  int v5 = *((unsigned __int8 *)a3 + 5135);
  if (*((unsigned char *)a3 + 5135)
    || *((unsigned char *)a3 + 5137)
    || *((unsigned char *)a3 + 5138)
    || *((unsigned char *)a3 + 5139)
    || *((unsigned char *)a3 + 5136))
  {
    if (!*((unsigned char *)a3 + 5079)) {
      a3[147] = 500;
    }
    if (!*((unsigned char *)a3 + 5080)) {
      *((unsigned char *)a3 + 292) = 1;
    }
    int v6 = *a3;
    int v7 = a3[2];
    if (!*((unsigned char *)a3 + 4970)) {
      *((_DWORD *)a3 + 15) = 1103101952;
    }
    int v8 = v7 * v6;
    if (!*((unsigned char *)a3 + 4969))
    {
      if (v5 || *((unsigned char *)a3 + 5137))
      {
        int v9 = 6000000;
      }
      else
      {
        int v9 = 6000000;
        if (!*((unsigned char *)a3 + 5136))
        {
          if (v8 <= 101376) {
            int v9 = 500000;
          }
          else {
            int v9 = 1000000;
          }
        }
      }
      *((_DWORD *)a3 + 13) = v9;
      *((unsigned char *)a3 + 4969) = 1;
    }
    if (!*((unsigned char *)a3 + 5042)) {
      *((unsigned char *)a3 + 208) = 1;
    }
    if (!*((unsigned char *)a3 + 5044)) {
      *((unsigned char *)a3 + 209) = 1;
    }
    if (*((unsigned char *)a3 + 5041))
    {
      if (*((unsigned char *)a3 + 5137))
      {
        if (v8 < 345601)
        {
LABEL_29:
          if (!*((unsigned char *)a3 + 5004)) {
            *((unsigned char *)a3 + 116) = 1;
          }
          if (*((unsigned char *)a3 + 5046)) {
            goto LABEL_55;
          }
          *((unsigned char *)a3 + 115) = 1;
          int v10 = 10000000;
          goto LABEL_54;
        }
        goto LABEL_50;
      }
    }
    else
    {
      if (!*((unsigned char *)a3 + 5138) && !*((unsigned char *)a3 + 5139))
      {
        if (v5)
        {
          int v11 = 0;
          if (v8 >= 345601) {
            int v12 = 12000000;
          }
          else {
            int v12 = 10000000;
          }
          *((void *)a3 + 23) = qword_1BBB6FFB0[v8 < 345601];
          *((_DWORD *)a3 + 48) = v12;
          goto LABEL_59;
        }
        if (!*((unsigned char *)a3 + 5137) && !*((unsigned char *)a3 + 5136)) {
          goto LABEL_67;
        }
        if (v8 < 345601)
        {
          *((void *)a3 + 23) = 0x3FB999999999999ALL;
          *((_DWORD *)a3 + 48) = 9090909;
          goto LABEL_29;
        }
        *((void *)a3 + 23) = 0x3FB999999999999ALL;
        *((_DWORD *)a3 + 48) = 12727272;
LABEL_50:
        if (!*((unsigned char *)a3 + 5004)) {
          *((unsigned char *)a3 + 116) = 1;
        }
        if (*((unsigned char *)a3 + 5046)) {
          goto LABEL_55;
        }
        *((unsigned char *)a3 + 115) = 1;
        int v10 = 14000000;
LABEL_54:
        *((_DWORD *)a3 + 30) = v10;
        *((_DWORD *)a3 + 38) = 1000;
        goto LABEL_55;
      }
      *((void *)a3 + 23) = 0x3FF0000000000000;
      *((_DWORD *)a3 + 48) = 4000000;
    }
LABEL_55:
    if (v5)
    {
      int v11 = 0;
LABEL_59:
      if (!*((unsigned char *)a3 + 4993))
      {
        *((unsigned char *)a3 + 211) = 32;
        *((unsigned char *)a3 + 4993) = 1;
      }
      if (!*((unsigned char *)a3 + 4997)) {
        *((_DWORD *)a3 + 18) = 1;
      }
      if (!*((unsigned char *)a3 + 5002)) {
        *((unsigned char *)a3 + 601) = 1;
      }
      if (!*((unsigned char *)a3 + 5003)) {
        *((unsigned char *)a3 + 599) = 1;
      }
      goto LABEL_71;
    }
    if (*((unsigned char *)a3 + 5138))
    {
      int v11 = 1;
      goto LABEL_59;
    }
LABEL_67:
    if (!*((unsigned char *)a3 + 4993))
    {
      *((unsigned char *)a3 + 211) = 2;
      *((unsigned char *)a3 + 4993) = 1;
    }
    int v11 = 1;
    if (*((unsigned char *)a3 + 5136))
    {
      *((unsigned char *)a3 + 325) = 0;
      a3[163] = 1;
    }
LABEL_71:
    if (!*((unsigned char *)a3 + 5118)) {
      *((unsigned char *)a3 + 608) = 1;
    }
    if (*((unsigned char *)a3 + 5119))
    {
      if (!v11) {
        goto LABEL_79;
      }
    }
    else
    {
      *((unsigned char *)a3 + 609) = 0;
      if (!v11)
      {
LABEL_79:
        if (!*((unsigned char *)a3 + 4981)) {
          a3[118] = 257;
        }
        if (!*((unsigned char *)a3 + 5031)) {
          *((unsigned char *)a3 + 324) = 0;
        }
        if (!*((unsigned char *)a3 + 4978) && *((unsigned char *)a3 + 5137)) {
          *((unsigned char *)a3 + 602) = 2;
        }
        if (!*((unsigned char *)a3 + 5054)) {
          *((_DWORD *)a3 + 63) = 511;
        }
LABEL_88:
        int v13 = *((unsigned __int8 *)a3 + 5138);
        if ((*((unsigned char *)a3 + 5138) || *((unsigned char *)a3 + 5139)) && !*((unsigned char *)a3 + 5054)) {
          *((_DWORD *)a3 + 63) = 255;
        }
        if (!*((unsigned char *)a3 + 5117))
        {
          *((unsigned char *)a3 + 598) = 1;
          *((unsigned char *)a3 + 5117) = 1;
        }
        if (v8 > 696320)
        {
          if (*((unsigned char *)a3 + 5136))
          {
            *((unsigned char *)a3 + 5077) = 1;
            *((unsigned char *)a3 + 287) = 1;
            *(__int16 *)((char *)a3 + 5069) = 257;
            a3[144] = 257;
            *((unsigned char *)a3 + 292) = 1;
          }
          if (!*((unsigned char *)a3 + 4989))
          {
            *((unsigned char *)a3 + 16) = 100;
            *((unsigned char *)a3 + 4989) = 1;
          }
          if (!*((unsigned char *)a3 + 4988))
          {
            *((unsigned char *)a3 + 400) = 1;
            *((unsigned char *)a3 + 4988) = 1;
          }
          if (!*((unsigned char *)a3 + 5149))
          {
            *((unsigned char *)a3 + 401) = 1;
            *((unsigned char *)a3 + 5149) = 1;
          }
        }
        if (!*((unsigned char *)a3 + 5022))
        {
          *((unsigned char *)a3 + 318) = 12;
          *((unsigned char *)a3 + 5022) = 1;
        }
        *((unsigned char *)a3 + 5129) = 1;
        *((unsigned char *)a3 + 5134) = 1;
        if (v11)
        {
          if (*((unsigned char *)a3 + 5137))
          {
            if (*((unsigned char *)a3 + 5136)) {
              char v14 = 4;
            }
            else {
              char v14 = 5;
            }
          }
          else
          {
            char v14 = 4;
            if (!*((unsigned char *)a3 + 5136))
            {
              if (v13) {
                char v24 = 4;
              }
              else {
                char v24 = 5;
              }
              *((unsigned char *)a3 + 577) = v24;
              *((unsigned char *)a3 + 16) = 66;
LABEL_113:
              if (*((unsigned char *)a3 + 460))
              {
                *((unsigned char *)a3 + 316) = 0;
                *((unsigned char *)a3 + 325) = 0;
                a3[163] = 1;
                a3[118] = 257;
              }
              goto LABEL_115;
            }
          }
        }
        else
        {
          char v14 = 4;
        }
        *((unsigned char *)a3 + 577) = v14;
        if (!*((unsigned char *)a3 + 5021))
        {
          *((unsigned char *)a3 + 316) = v14 != 4;
          *((unsigned char *)a3 + 5021) = 1;
        }
        goto LABEL_113;
      }
    }
    if (!*((unsigned char *)a3 + 5137) && !*((unsigned char *)a3 + 5136)) {
      goto LABEL_88;
    }
    goto LABEL_79;
  }
LABEL_115:
  if (!*((unsigned char *)a3 + 5130) && !*((unsigned char *)a3 + 5131)) {
    goto LABEL_214;
  }
  if (!*((unsigned char *)a3 + 4970)) {
    *((_DWORD *)a3 + 15) = 1103101952;
  }
  float v15 = (char *)a3 + 4969;
  int v16 = *((unsigned __int8 *)a3 + 4969);
  if (!*((unsigned char *)a3 + 4969))
  {
    if (a3[2] * *a3 <= 101376) {
      int v17 = 500000;
    }
    else {
      int v17 = 6000000;
    }
    *((_DWORD *)a3 + 13) = v17;
  }
  int v18 = *((unsigned __int8 *)a3 + 4993);
  if (*((unsigned char *)a3 + 4993) && *((unsigned char *)a3 + 211)) {
    *((_DWORD *)a3 + 21) = 31;
  }
  if (!*((unsigned char *)a3 + 5057)) {
    *((unsigned char *)a3 + 267) = 4;
  }
  if (!*((unsigned char *)a3 + 5113)) {
    *((unsigned char *)a3 + 291) = 1;
  }
  int v19 = *((unsigned __int8 *)a3 + 5056);
  if (!*((unsigned char *)a3 + 5056)) {
    *((unsigned char *)a3 + 266) = 2;
  }
  if (!*((unsigned char *)a3 + 5052)) {
    *((_DWORD *)a3 + 61) = 128;
  }
  if (!*((unsigned char *)a3 + 5066)) {
    *((unsigned char *)a3 + 283) = 0;
  }
  if (!*((unsigned char *)a3 + 5101)) {
    *((_DWORD *)a3 + 11) = 2;
  }
  if (!*((unsigned char *)a3 + 5055)) {
    *((unsigned char *)a3 + 265) = 5;
  }
  if (!*((unsigned char *)a3 + 5053)) {
    *((_DWORD *)a3 + 62) = 2;
  }
  if (!*((unsigned char *)a3 + 4981)) {
    a3[118] = 0;
  }
  if (!*((unsigned char *)a3 + 5067)) {
    *((unsigned char *)a3 + 285) = 1;
  }
  if (!*((unsigned char *)a3 + 5002)) {
    *((unsigned char *)a3 + 601) = 1;
  }
  if (!*((unsigned char *)a3 + 5003)) {
    *((unsigned char *)a3 + 599) = 1;
  }
  float v20 = (char *)a3 + 5041;
  int v21 = *((unsigned __int8 *)a3 + 5041);
  if (!*((unsigned char *)a3 + 5041))
  {
    *((void *)a3 + 23) = 0x4004CCCCCCCCCCCDLL;
    *((_DWORD *)a3 + 48) = 768000;
  }
  if (*((unsigned char *)a3 + 5131))
  {
    if (!*((unsigned char *)a3 + 5079)) {
      a3[147] = 500;
    }
    if (!*((unsigned char *)a3 + 5080)) {
      *((unsigned char *)a3 + 292) = 1;
    }
    unsigned int v22 = a3[2] * *a3;
    if (!v21)
    {
      double v23 = 2.6;
      if (v22 >= 0x12C01) {
        double v23 = 1.0;
      }
      *((double *)a3 + 23) = v23;
    }
    if (!*((unsigned char *)a3 + 5118)) {
      *((unsigned char *)a3 + 608) = 1;
    }
    if ((int)v22 < 76801)
    {
      if (!v21) {
        *((_DWORD *)a3 + 48) = 768000;
      }
      if (!v16)
      {
        *((_DWORD *)a3 + 13) = 700000;
        *float v15 = 1;
      }
      goto LABEL_207;
    }
    if (v22 < 0x25801)
    {
      if (!v21) {
        *((_DWORD *)a3 + 48) = 4000000;
      }
      if (!v16)
      {
        *((_DWORD *)a3 + 13) = 1500000;
        *float v15 = 1;
      }
      if (v22 > 0x20800)
      {
        if (!*((unsigned char *)a3 + 5105)) {
          *((unsigned char *)a3 + 262) = 1;
        }
        if (!*((unsigned char *)a3 + 5119)) {
          *((unsigned char *)a3 + 609) = 1;
        }
      }
      goto LABEL_207;
    }
    if (v22 > 0x4B000)
    {
LABEL_207:
      if (!*((unsigned char *)a3 + 5117))
      {
        *((unsigned char *)a3 + 598) = 1;
        *((unsigned char *)a3 + 5117) = 1;
      }
      goto LABEL_209;
    }
    if (!*((unsigned char *)a3 + 5031)) {
      *((unsigned char *)a3 + 324) = 1;
    }
    if (!*((unsigned char *)a3 + 4978)) {
      *((unsigned char *)a3 + 602) = 0;
    }
    if (*((unsigned char *)a3 + 5119))
    {
      if (v16) {
        goto LABEL_193;
      }
    }
    else
    {
      *((unsigned char *)a3 + 609) = 1;
      if (v16)
      {
LABEL_193:
        if (v21)
        {
LABEL_194:
          if (!*((unsigned char *)a3 + 5069)) {
            *((unsigned char *)a3 + 287) = 1;
          }
          if (!*((unsigned char *)a3 + 5105)) {
            *((unsigned char *)a3 + 262) = 1;
          }
          if (!*((unsigned char *)a3 + 5054)) {
            *((_DWORD *)a3 + 63) = 26;
          }
          if (!*((unsigned char *)a3 + 5072)) {
            *((unsigned char *)a3 + 271) = 1;
          }
          if (!v19) {
            *((unsigned char *)a3 + 266) = 3;
          }
          if (v22 > 0x37000 && !*((unsigned char *)a3 + 4977)) {
            *((unsigned char *)a3 + 235) = 2;
          }
          goto LABEL_207;
        }
LABEL_538:
        *((_DWORD *)a3 + 48) = 4000000;
        goto LABEL_194;
      }
    }
    *((_DWORD *)a3 + 13) = 1500000;
    *float v15 = 1;
    if (v21) {
      goto LABEL_194;
    }
    goto LABEL_538;
  }
  if (!v16)
  {
    *((_DWORD *)a3 + 13) = 700000;
    float v20 = (char *)a3 + 4969;
LABEL_209:
    *float v20 = 1;
  }
  *((unsigned char *)a3 + 16) = 66;
  *((unsigned char *)a3 + 5134) = 1;
  *((unsigned char *)a3 + 577) = 6;
  if (!v18)
  {
    *((unsigned char *)a3 + 211) = 32;
    *((unsigned char *)a3 + 4993) = 1;
  }
  if (!*((unsigned char *)a3 + 5047)) {
    *((unsigned char *)a3 + 114) = 4;
  }
LABEL_214:
  if (*((unsigned char *)a3 + 5133))
  {
    if (!*((unsigned char *)a3 + 4970)) {
      *((_DWORD *)a3 + 15) = 1103101952;
    }
    int v25 = *((unsigned __int8 *)a3 + 4969);
    if (!*((unsigned char *)a3 + 4969))
    {
      if (a3[2] * *a3 <= 101376) {
        int v26 = 500000;
      }
      else {
        int v26 = 6000000;
      }
      *((_DWORD *)a3 + 13) = v26;
    }
    if (*((unsigned char *)a3 + 4993) && *((unsigned char *)a3 + 211)) {
      *((_DWORD *)a3 + 21) = 31;
    }
    if (!*((unsigned char *)a3 + 5057)) {
      *((unsigned char *)a3 + 267) = 4;
    }
    if (!*((unsigned char *)a3 + 5113)) {
      *((unsigned char *)a3 + 291) = 1;
    }
    if (!*((unsigned char *)a3 + 5055)) {
      *((unsigned char *)a3 + 265) = 3;
    }
    if (!*((unsigned char *)a3 + 5056)) {
      *((unsigned char *)a3 + 266) = 2;
    }
    if (!*((unsigned char *)a3 + 5052)) {
      *((_DWORD *)a3 + 61) = 128;
    }
    if (!*((unsigned char *)a3 + 5053)) {
      *((_DWORD *)a3 + 62) = 4;
    }
    if (!*((unsigned char *)a3 + 5066)) {
      *((unsigned char *)a3 + 283) = 0;
    }
    if (!*((unsigned char *)a3 + 5101)) {
      *((_DWORD *)a3 + 11) = 2;
    }
    if (*((unsigned char *)a3 + 4981))
    {
      if (v25)
      {
LABEL_243:
        if (!*((unsigned char *)a3 + 5041))
        {
          *((void *)a3 + 23) = 0x4004CCCCCCCCCCCDLL;
          *((_DWORD *)a3 + 48) = 768000;
        }
        if (!*((unsigned char *)a3 + 5003)) {
          *((unsigned char *)a3 + 599) = 1;
        }
        *((unsigned char *)a3 + 16) = 66;
        *((unsigned char *)a3 + 577) = 5;
        uint64_t result = (uint64_t)sub_1BBB471B4(a3, &v74);
        if (!*((unsigned char *)a3 + 5047)) {
          *((unsigned char *)a3 + 114) = 4;
        }
        goto LABEL_250;
      }
    }
    else
    {
      a3[118] = 0;
      if (v25) {
        goto LABEL_243;
      }
    }
    *((_DWORD *)a3 + 13) = 600000;
    *((unsigned char *)a3 + 4969) = 1;
    goto LABEL_243;
  }
  if (!*((unsigned char *)a3 + 5132)) {
    goto LABEL_342;
  }
LABEL_250:
  if (!*((unsigned char *)a3 + 5132)) {
    goto LABEL_342;
  }
  if (!*((unsigned char *)a3 + 4970)) {
    *((_DWORD *)a3 + 15) = 1103101952;
  }
  int v27 = *((unsigned __int8 *)a3 + 4969);
  if (!*((unsigned char *)a3 + 4969))
  {
    if (a3[2] * *a3 <= 101376) {
      int v28 = 500000;
    }
    else {
      int v28 = 6000000;
    }
    *((_DWORD *)a3 + 13) = v28;
  }
  if (*((unsigned char *)a3 + 4993) && *((unsigned char *)a3 + 211)) {
    *((_DWORD *)a3 + 21) = 31;
  }
  if (!*((unsigned char *)a3 + 5057)) {
    *((unsigned char *)a3 + 267) = 4;
  }
  if (!*((unsigned char *)a3 + 5113)) {
    *((unsigned char *)a3 + 291) = 1;
  }
  if (!*((unsigned char *)a3 + 5055)) {
    *((unsigned char *)a3 + 265) = 3;
  }
  int v29 = *((unsigned __int8 *)a3 + 5056);
  if (!*((unsigned char *)a3 + 5056)) {
    *((unsigned char *)a3 + 266) = 2;
  }
  if (!*((unsigned char *)a3 + 5052)) {
    *((_DWORD *)a3 + 61) = 128;
  }
  if (!*((unsigned char *)a3 + 5053)) {
    *((_DWORD *)a3 + 62) = 4;
  }
  if (!*((unsigned char *)a3 + 5066)) {
    *((unsigned char *)a3 + 283) = 0;
  }
  if (!*((unsigned char *)a3 + 5101)) {
    *((_DWORD *)a3 + 11) = 2;
  }
  if (!*((unsigned char *)a3 + 5003)) {
    *((unsigned char *)a3 + 599) = 1;
  }
  if (!*((unsigned char *)a3 + 4981)) {
    a3[118] = 0;
  }
  if (!*((unsigned char *)a3 + 5031)) {
    *((unsigned char *)a3 + 324) = 1;
  }
  if (!*((unsigned char *)a3 + 4978)) {
    *((unsigned char *)a3 + 602) = 1;
  }
  if (!*((unsigned char *)a3 + 5118)) {
    *((unsigned char *)a3 + 608) = 1;
  }
  if (!*((unsigned char *)a3 + 5079)) {
    a3[147] = 500;
  }
  if (!*((unsigned char *)a3 + 5080)) {
    *((unsigned char *)a3 + 292) = 1;
  }
  unsigned int v30 = a3[2] * *a3;
  if (*((unsigned char *)a3 + 5041))
  {
    if ((int)v30 >= 76801)
    {
      if (v30 >= 0x25801) {
        goto LABEL_313;
      }
LABEL_305:
      if (!v27)
      {
        *((_DWORD *)a3 + 13) = 1500000;
        *((unsigned char *)a3 + 4969) = 1;
      }
      if (v30 > 0x20800)
      {
        if (!*((unsigned char *)a3 + 5105)) {
          *((unsigned char *)a3 + 262) = 1;
        }
        if (!*((unsigned char *)a3 + 5119)) {
          *((unsigned char *)a3 + 609) = 1;
        }
      }
      goto LABEL_336;
    }
LABEL_301:
    if (!v27)
    {
      *((_DWORD *)a3 + 13) = 600000;
      *((unsigned char *)a3 + 4969) = 1;
    }
    goto LABEL_336;
  }
  double v31 = 2.6;
  if (v30 >= 0x12C01) {
    double v31 = 1.0;
  }
  *((double *)a3 + 23) = v31;
  if ((int)v30 < 76801)
  {
    *((_DWORD *)a3 + 48) = 768000;
    goto LABEL_301;
  }
  if (v30 < 0x25801)
  {
    *((_DWORD *)a3 + 48) = 4000000;
    goto LABEL_305;
  }
  *((_DWORD *)a3 + 48) = 4000000;
LABEL_313:
  if (v30 >= 0x2A801)
  {
    if (!v27)
    {
      *((_DWORD *)a3 + 13) = 1500000;
      *((unsigned char *)a3 + 4969) = 1;
    }
    if (!*((unsigned char *)a3 + 5042)) {
      *((unsigned char *)a3 + 208) = 1;
    }
    if (!*((unsigned char *)a3 + 5105)) {
      *((unsigned char *)a3 + 262) = 1;
    }
    if (!*((unsigned char *)a3 + 5119)) {
      *((unsigned char *)a3 + 609) = 1;
    }
    if (!*((unsigned char *)a3 + 5054)) {
      *((_DWORD *)a3 + 63) = 26;
    }
    if (!v29) {
      *((unsigned char *)a3 + 266) = 3;
    }
  }
  else
  {
    if (!v27)
    {
      *((_DWORD *)a3 + 13) = 1500000;
      *((unsigned char *)a3 + 4969) = 1;
    }
    if (!*((unsigned char *)a3 + 5054)) {
      *((_DWORD *)a3 + 63) = 26;
    }
    if (!*((unsigned char *)a3 + 5105)) {
      *((unsigned char *)a3 + 262) = 1;
    }
    if (!*((unsigned char *)a3 + 5119)) {
      *((unsigned char *)a3 + 609) = 1;
    }
  }
  if (!*((unsigned char *)a3 + 4977)) {
    *((unsigned char *)a3 + 235) = 2;
  }
LABEL_336:
  if (!*((unsigned char *)a3 + 5117))
  {
    *((unsigned char *)a3 + 598) = 1;
    *((unsigned char *)a3 + 5117) = 1;
  }
  *((unsigned char *)a3 + 5041) = 1;
  *((unsigned char *)a3 + 16) = 66;
  *((unsigned char *)a3 + 577) = 5;
  uint64_t result = (uint64_t)sub_1BBB471B4(a3, &v74);
  if (!*((unsigned char *)a3 + 5047)) {
    *((unsigned char *)a3 + 114) = 4;
  }
  if (!*((unsigned char *)a3 + 5100)) {
    *((unsigned char *)a3 + 241) = 1;
  }
LABEL_342:
  if (*((unsigned char *)a3 + 5127))
  {
    if (!*((unsigned char *)a3 + 5102) && !*((unsigned char *)a3 + 5101)) {
      *(void *)(a3 + 22) = 0x100000003;
    }
    if (!*((unsigned char *)a3 + 5066)) {
      *((unsigned char *)a3 + 283) = 0;
    }
    if (!*((unsigned char *)a3 + 5056)) {
      *((unsigned char *)a3 + 266) = 2;
    }
    if (!*((unsigned char *)a3 + 5055)) {
      *((unsigned char *)a3 + 265) = 2;
    }
    if (!*((unsigned char *)a3 + 5057)) {
      *((unsigned char *)a3 + 267) = 4;
    }
    if (!*((unsigned char *)a3 + 5052)) {
      *((_DWORD *)a3 + 61) = 128;
    }
    if (!*((unsigned char *)a3 + 5053)) {
      *((_DWORD *)a3 + 62) = 2;
    }
  }
  if (*((unsigned char *)a3 + 5128))
  {
    if (!*((unsigned char *)a3 + 4970)) {
      *((_DWORD *)a3 + 15) = 1106247680;
    }
    if (!*((unsigned char *)a3 + 4969))
    {
      if (a3[2] * *a3 <= 101376) {
        int v32 = 800000;
      }
      else {
        int v32 = 1500000;
      }
      *((_DWORD *)a3 + 13) = v32;
    }
    if (!*((unsigned char *)a3 + 4981))
    {
      *((unsigned char *)a3 + 236) = 1;
      if (*((unsigned char *)a3 + 398)) {
        char v33 = 2;
      }
      else {
        char v33 = 1;
      }
      *((unsigned char *)a3 + 237) = v33;
    }
    if (*((unsigned char *)a3 + 4993) && *((unsigned char *)a3 + 211)) {
      *((_DWORD *)a3 + 21) = 31;
    }
    if (!*((unsigned char *)a3 + 5056)) {
      *((unsigned char *)a3 + 266) = 2;
    }
    if (!*((unsigned char *)a3 + 5055)) {
      *((unsigned char *)a3 + 265) = 2;
    }
    if (!*((unsigned char *)a3 + 5057)) {
      *((unsigned char *)a3 + 267) = 4;
    }
    if (!*((unsigned char *)a3 + 5052)) {
      *((_DWORD *)a3 + 61) = 128;
    }
    if (!*((unsigned char *)a3 + 5053)) {
      *((_DWORD *)a3 + 62) = 2;
    }
    if (!*((unsigned char *)a3 + 5105))
    {
      a3[131] = 3;
      *((unsigned char *)a3 + 264) = 6;
    }
    if (!*((unsigned char *)a3 + 5113)) {
      *((unsigned char *)a3 + 291) = 1;
    }
    if (!*((unsigned char *)a3 + 5102)) {
      *((_DWORD *)a3 + 12) = 0;
    }
    if (!*((unsigned char *)a3 + 5108)) {
      *((unsigned char *)a3 + 213) = 1;
    }
    if (!*((unsigned char *)a3 + 5100)) {
      *((unsigned char *)a3 + 241) = 0;
    }
  }
  if (*((unsigned char *)a3 + 5129))
  {
    if (!*((unsigned char *)a3 + 5079)) {
      a3[147] = 500;
    }
    if (!*((unsigned char *)a3 + 5080)) {
      *((unsigned char *)a3 + 292) = 1;
    }
    int v34 = *a3;
    int v35 = a3[2];
    if (!*((unsigned char *)a3 + 4970)) {
      *((_DWORD *)a3 + 15) = 1103101952;
    }
    int v36 = v35 * v34;
    if (!*((unsigned char *)a3 + 4969))
    {
      if (v36 <= 101376) {
        int v37 = 500000;
      }
      else {
        int v37 = 6000000;
      }
      *((_DWORD *)a3 + 13) = v37;
    }
    if (*((unsigned char *)a3 + 4993) && *((unsigned char *)a3 + 211)) {
      *((_DWORD *)a3 + 21) = 31;
    }
    if (!*((unsigned char *)a3 + 5057)) {
      *((unsigned char *)a3 + 267) = 4;
    }
    if (!*((unsigned char *)a3 + 5113)) {
      *((unsigned char *)a3 + 291) = 1;
    }
    if (v36 <= 25344)
    {
      if (!*((unsigned char *)a3 + 5055)) {
        *((unsigned char *)a3 + 265) = 3;
      }
      if (!*((unsigned char *)a3 + 5056)) {
        *((unsigned char *)a3 + 266) = 2;
      }
      if (*((unsigned char *)a3 + 5052)) {
        goto LABEL_428;
      }
      int v38 = 64;
LABEL_427:
      *((_DWORD *)a3 + 61) = v38;
LABEL_428:
      if (!*((unsigned char *)a3 + 5053)) {
        *((_DWORD *)a3 + 62) = 4;
      }
      if (!*((unsigned char *)a3 + 5066)) {
        *((unsigned char *)a3 + 283) = 0;
      }
      if (!*((unsigned char *)a3 + 5101)) {
        *((_DWORD *)a3 + 11) = 2;
      }
      goto LABEL_474;
    }
    if (v36 < 0x21001)
    {
      if (!*((unsigned char *)a3 + 5055)) {
        *((unsigned char *)a3 + 265) = 3;
      }
      if (!*((unsigned char *)a3 + 5056)) {
        *((unsigned char *)a3 + 266) = 2;
      }
      if (*((unsigned char *)a3 + 5052)) {
        goto LABEL_428;
      }
      int v38 = 128;
      goto LABEL_427;
    }
    if (v36 >= 0x70801)
    {
      if (!*((unsigned char *)a3 + 5055)) {
        *((unsigned char *)a3 + 265) = 4;
      }
      if (!*((unsigned char *)a3 + 5056)) {
        *((unsigned char *)a3 + 266) = 3;
      }
      if (!*((unsigned char *)a3 + 5052)) {
        *((_DWORD *)a3 + 61) = 256;
      }
      if (!*((unsigned char *)a3 + 5053)) {
        *((_DWORD *)a3 + 62) = 16;
      }
      if (!*((unsigned char *)a3 + 5068) && !*((unsigned char *)a3 + 288)) {
        *((unsigned char *)a3 + 286) = 1;
      }
      if (!*((unsigned char *)a3 + 5067) && !*((unsigned char *)a3 + 287)) {
        *((unsigned char *)a3 + 285) = 1;
      }
      if (*((unsigned char *)a3 + 5102) || *((unsigned char *)a3 + 5101)) {
        goto LABEL_470;
      }
      uint64_t v39 = 8;
    }
    else
    {
      if (!*((unsigned char *)a3 + 5055)) {
        *((unsigned char *)a3 + 265) = 4;
      }
      if (!*((unsigned char *)a3 + 5056)) {
        *((unsigned char *)a3 + 266) = 3;
      }
      if (!*((unsigned char *)a3 + 5052)) {
        *((_DWORD *)a3 + 61) = 256;
      }
      if (!*((unsigned char *)a3 + 5053)) {
        *((_DWORD *)a3 + 62) = 16;
      }
      if (!*((unsigned char *)a3 + 5068) && !*((unsigned char *)a3 + 288)) {
        *((unsigned char *)a3 + 286) = 1;
      }
      if (!*((unsigned char *)a3 + 5067) && !*((unsigned char *)a3 + 287)) {
        *((unsigned char *)a3 + 285) = 1;
      }
      if (*((unsigned char *)a3 + 5102) || *((unsigned char *)a3 + 5101)) {
        goto LABEL_470;
      }
      uint64_t v39 = 0x100000005;
    }
    *(void *)(a3 + 22) = v39;
LABEL_470:
    if (!*((unsigned char *)a3 + 5105))
    {
      a3[131] = 3;
      *((unsigned char *)a3 + 264) = 0;
    }
    if (!*((unsigned char *)a3 + 5106)) {
      *((unsigned char *)a3 + 261) = 20;
    }
  }
LABEL_474:
  if (!*((unsigned char *)a3 + 5134)) {
    goto LABEL_551;
  }
  switch(*((unsigned char *)a3 + 577))
  {
    case 1:
      uint64_t result = (uint64_t)sub_1BBB4751C(a3);
      goto LABEL_551;
    case 2:
      uint64_t result = (uint64_t)sub_1BBB477A8(a3);
      goto LABEL_551;
    case 3:
      uint64_t result = (uint64_t)sub_1BBB477A8(a3);
      if (!*((unsigned char *)a3 + 4993)) {
        *((unsigned char *)a3 + 211) = 0;
      }
      *((_DWORD *)a3 + 56) = 0;
      if (!*((unsigned char *)a3 + 5111)) {
        *((unsigned char *)a3 + 269) = 0;
      }
      if (!*((unsigned char *)a3 + 4973)) {
        uint64_t result = (uint64_t)sub_1BBB47AD8(a3);
      }
      if (!*((unsigned char *)a3 + 4969) || !*((_DWORD *)a3 + 13))
      {
        if (!*((unsigned char *)a3 + 5109)) {
          a3[298] = 767;
        }
        uint64_t result = sub_1BBB47444((uint64_t)a3, 12);
      }
      goto LABEL_551;
    case 4:
    case 6:
    case 7:
      if (!*((unsigned char *)a3 + 5021)) {
        *((unsigned char *)a3 + 316) = 0;
      }
      if (!*((unsigned char *)a3 + 4974)) {
        *((_DWORD *)a3 + 78) = 0x40000000;
      }
      if (!*((unsigned char *)a3 + 5022)) {
        *((unsigned char *)a3 + 318) = 6;
      }
      if (!*((unsigned char *)a3 + 5023)) {
        unsigned int v74 = 6;
      }
      if (!*((unsigned char *)a3 + 5026)) {
        *((unsigned char *)a3 + 322) = 1;
      }
      if (!*((unsigned char *)a3 + 5027)) {
        *((unsigned char *)a3 + 323) = 1;
      }
      if (!*((unsigned char *)a3 + 5038)) {
        *((unsigned char *)a3 + 290) = 1;
      }
      if (!*((unsigned char *)a3 + 4973))
      {
        int v40 = *((unsigned __int8 *)a3 + 211);
        if (v40 == 32 || v40 == 2)
        {
          int v41 = a3[2] * *a3;
          *((unsigned char *)a3 + 325) = 0;
          a3[163] = 1;
          *((unsigned char *)a3 + 322) = 1;
          if (!*((unsigned char *)a3 + 318)) {
            *((unsigned char *)a3 + 318) = 1;
          }
          if (v41 > 101376)
          {
            if (v41 >= 0x70801)
            {
              if (v41 > 0xE1000)
              {
                int v42 = 60;
                *((_DWORD *)a3 + 76) = 60;
                int v43 = 0x40000000;
              }
              else
              {
                int v42 = 90;
                *((_DWORD *)a3 + 76) = 90;
                int v43 = 1077936128;
              }
            }
            else
            {
              int v42 = 120;
              *((_DWORD *)a3 + 76) = 120;
              int v43 = 1082130432;
            }
          }
          else
          {
            int v42 = 150;
            *((_DWORD *)a3 + 76) = 150;
            int v43 = 1084227584;
          }
          *((_DWORD *)a3 + 78) = v43;
          *((_DWORD *)a3 + 21) = v42;
        }
        else
        {
          uint64_t result = (uint64_t)sub_1BBB47AD8(a3);
        }
      }
      if (*((unsigned char *)a3 + 4993))
      {
        int v44 = *((_DWORD *)a3 + 13);
        if (*((unsigned char *)a3 + 4969))
        {
          if (!v44)
          {
LABEL_520:
            if (!*((unsigned char *)a3 + 5109)) {
              a3[298] = 767;
            }
            uint64_t result = sub_1BBB47444((uint64_t)a3, 7);
            goto LABEL_546;
          }
        }
        else if (!v44)
        {
          goto LABEL_546;
        }
      }
      else
      {
        if (!*((unsigned char *)a3 + 4969) || !*((_DWORD *)a3 + 13)) {
          goto LABEL_520;
        }
        *((unsigned char *)a3 + 211) = 1;
      }
      if (!*((unsigned char *)a3 + 4997)) {
        *((_DWORD *)a3 + 18) = 1;
      }
      if (!*((unsigned char *)a3 + 4998)) {
        *((_DWORD *)a3 + 19) = 0;
      }
      if (!*((unsigned char *)a3 + 4999)) {
        *((_DWORD *)a3 + 20) = 1;
      }
      unsigned int v45 = *((_DWORD *)a3 + 76);
      if (v45 == 1)
      {
        unsigned int v46 = 1;
      }
      else
      {
        unsigned int v46 = *((_DWORD *)a3 + 75);
        if (v46 == 1)
        {
          unsigned int v45 = 1;
        }
        else if (v45 == 0x800000)
        {
          unsigned int v46 = 30;
          unsigned int v45 = 31;
        }
        else
        {
          if (v46 < v45 && v46 > 1) {
            unsigned int v45 = *((_DWORD *)a3 + 75);
          }
          unsigned int v46 = 30;
        }
      }
      *((_DWORD *)a3 + 21) = v45;
      *((_DWORD *)a3 + 54) = v46;
      *((_DWORD *)a3 + 55) = 1069547520;
LABEL_546:
      if (!*((unsigned char *)a3 + 5100)) {
        *((unsigned char *)a3 + 241) = 0;
      }
      if (*((unsigned char *)a3 + 211) == 2 && !*((unsigned char *)a3 + 5003)) {
        *((unsigned char *)a3 + 599) = 1;
      }
LABEL_551:
      if (*((unsigned char *)a3 + 5147))
      {
        *((unsigned char *)a3 + 668) = 1;
        if (!*((unsigned char *)a3 + 4989))
        {
          *((unsigned char *)a3 + 4989) = 1;
          *((unsigned char *)a3 + 16) = 100;
        }
        if (!*((unsigned char *)a3 + 4988))
        {
          *((unsigned char *)a3 + 4988) = 1;
          *((unsigned char *)a3 + 400) = 1;
        }
        if (!*((unsigned char *)a3 + 5084))
        {
          *((unsigned char *)a3 + 5084) = 1;
          *((unsigned char *)a3 + 653) = 1;
        }
        if (!*((unsigned char *)a3 + 5086))
        {
          *((unsigned char *)a3 + 5086) = 1;
          *((unsigned char *)a3 + 657) = 1;
        }
        if (!*((unsigned char *)a3 + 5087))
        {
          *((unsigned char *)a3 + 5087) = 1;
          *((unsigned char *)a3 + 658) = 1;
        }
        if (!*((unsigned char *)a3 + 5145)) {
          *((unsigned char *)a3 + 5145) = 1;
        }
        if (!*((unsigned char *)a3 + 5151))
        {
          *((unsigned char *)a3 + 5151) = 1;
          *((unsigned char *)a3 + 615) = 3;
        }
        if (!*((unsigned char *)a3 + 5155))
        {
          *((unsigned char *)a3 + 5155) = 1;
          *((unsigned char *)a3 + 680) = 3;
        }
        if (!*((unsigned char *)a3 + 5058))
        {
          *((unsigned char *)a3 + 5058) = 1;
          *((unsigned char *)a3 + 272) = 1;
        }
        if (!*((unsigned char *)a3 + 5090))
        {
          *((unsigned char *)a3 + 5090) = 1;
          *((unsigned char *)a3 + 624) = 1;
        }
        if (!*((unsigned char *)a3 + 5101))
        {
          *((unsigned char *)a3 + 5101) = 1;
          *(void *)(a3 + 22) = 1;
        }
        if (!*((unsigned char *)a3 + 5163))
        {
          *((unsigned char *)a3 + 5163) = 1;
          *((unsigned char *)a3 + 4849) = 1;
        }
        *((unsigned char *)a3 + 600) = 1;
        *((unsigned char *)a3 + 671) = 0;
        if (!*((unsigned char *)a3 + 5124)) {
          *((unsigned char *)a3 + 368) = 1;
        }
        if (!*((unsigned char *)a3 + 5159))
        {
          *((unsigned char *)a3 + 321) = 2;
          *((unsigned char *)a3 + 5159) = 1;
        }
        if (!*((unsigned char *)a3 + 5091))
        {
          *((unsigned char *)a3 + 627) = 1;
          *((unsigned char *)a3 + 5091) = 1;
        }
        *((unsigned char *)a3 + 669) = 1;
        if (!*((unsigned char *)a3 + 5161))
        {
          a3[2407] = 0;
          *((unsigned char *)a3 + 5161) = 1;
        }
        if (!*((unsigned char *)a3 + 5093))
        {
          *((unsigned char *)a3 + 260) = 5;
          *((unsigned char *)a3 + 5093) = 1;
        }
        if (!*((unsigned char *)a3 + 5095))
        {
          *((unsigned char *)a3 + 630) = 1;
          *((unsigned char *)a3 + 5095) = 1;
        }
        if (!*((unsigned char *)a3 + 5094))
        {
          *((unsigned char *)a3 + 629) = 1;
          *((unsigned char *)a3 + 5094) = 1;
        }
        if (!*((unsigned char *)a3 + 5092))
        {
          *((unsigned char *)a3 + 628) = 3;
          *((unsigned char *)a3 + 5092) = 1;
        }
      }
      if (*((unsigned char *)a3 + 5142))
      {
        *((unsigned char *)a3 + 663) = 1;
        uint64_t result = (uint64_t)sub_1BBB4751C(a3);
        if (!*((unsigned char *)a3 + 5001)) {
          *((_DWORD *)a3 + 106) = 0;
        }
        if (!*((unsigned char *)a3 + 5006)) {
          *((unsigned char *)a3 + 2697) = 1;
        }
        if (*((unsigned char *)a3 + 5143)) {
          *((unsigned char *)a3 + 664) = 1;
        }
        if (*((unsigned char *)a3 + 5146)) {
          *((unsigned char *)a3 + 667) = 1;
        }
        if (!*((unsigned char *)a3 + 5015)) {
          *((unsigned char *)a3 + 684) = 3;
        }
        if (!*((unsigned char *)a3 + 5016)) {
          *((unsigned char *)a3 + 685) = 40;
        }
        if (!*((unsigned char *)a3 + 5013)) {
          *((unsigned char *)a3 + 683) = 3;
        }
        if (!*((unsigned char *)a3 + 5017)) {
          *((unsigned char *)a3 + 687) = 0;
        }
        if (!*((unsigned char *)a3 + 5011)) {
          *((unsigned char *)a3 + 682) = 26;
        }
        if (!*((unsigned char *)a3 + 5012)) {
          *((_DWORD *)a3 + 173) = 0;
        }
        if (!*((unsigned char *)a3 + 5014)) {
          *((unsigned char *)a3 + 686) = 20;
        }
        if (!*((unsigned char *)a3 + 5018)) {
          *((unsigned char *)a3 + 688) = 51;
        }
        if (!*((unsigned char *)a3 + 5010)) {
          *((unsigned char *)a3 + 677) = 0;
        }
        if (!*((unsigned char *)a3 + 4989) && !*((unsigned char *)a3 + 4988))
        {
          *((unsigned char *)a3 + 16) = 100;
          *((unsigned char *)a3 + 400) = 1;
        }
        if (!*((unsigned char *)a3 + 5105))
        {
          a3[131] = 3;
          *((unsigned char *)a3 + 264) = 0;
        }
        *((unsigned char *)a3 + 228) = 28;
        if (!*((unsigned char *)a3 + 4981)) {
          *((unsigned char *)a3 + 237) = 0;
        }
        if (!*((unsigned char *)a3 + 5005)) {
          *((unsigned char *)a3 + 675) = 1;
        }
        if (!*((unsigned char *)a3 + 5033)) {
          *((unsigned char *)a3 + 320) = 1;
        }
        if (!*((unsigned char *)a3 + 5022)) {
          *((unsigned char *)a3 + 318) = 0;
        }
        if (!*((unsigned char *)a3 + 4977)) {
          *((unsigned char *)a3 + 235) = 0;
        }
        if (!*((unsigned char *)a3 + 5111)) {
          *((unsigned char *)a3 + 269) = 0;
        }
        if (!*((unsigned char *)a3 + 5026)) {
          *((unsigned char *)a3 + 322) = 1;
        }
        if (!*((unsigned char *)a3 + 5027)) {
          *((unsigned char *)a3 + 323) = 1;
        }
        if (!*((unsigned char *)a3 + 5038)) {
          *((unsigned char *)a3 + 290) = 1;
        }
        if (!*((unsigned char *)a3 + 5100)) {
          *((unsigned char *)a3 + 241) = 0;
        }
        if (!*((unsigned char *)a3 + 4993)) {
          *((unsigned char *)a3 + 211) = 2;
        }
        if (!*((unsigned char *)a3 + 5151)) {
          *((unsigned char *)a3 + 615) = 4;
        }
        if (*((unsigned char *)a3 + 237))
        {
          unsigned int v48 = *((unsigned __int8 *)a3 + 615);
          if (v48 >= 3) {
            unsigned int v48 = 3;
          }
          *((unsigned char *)a3 + 615) = v48;
          if ((int)(v48 + 1) < *((char *)a3 + 238)) {
            goto LABEL_656;
          }
          char v49 = v48 + 2;
        }
        else
        {
          unsigned int v48 = *((unsigned __int8 *)a3 + 615);
          if (*((char *)a3 + 238) > (int)v48)
          {
LABEL_656:
            if (!*((unsigned char *)a3 + 5093))
            {
              *((unsigned char *)a3 + 260) = 5;
              *((unsigned char *)a3 + 5093) = 1;
            }
            if (!*((unsigned char *)a3 + 5095))
            {
              *((unsigned char *)a3 + 630) = 1;
              *((unsigned char *)a3 + 5095) = 1;
            }
            if (v48) {
              *((unsigned char *)a3 + 292) = 0;
            }
            if (!*((unsigned char *)a3 + 5019)) {
              *((unsigned char *)a3 + 660) = 1;
            }
            if (!*((unsigned char *)a3 + 5003)) {
              *((unsigned char *)a3 + 599) = 1;
            }
            *((unsigned char *)a3 + 661) = 3;
            *((unsigned char *)a3 + 676) = 1;
            *((_DWORD *)a3 + 12) = 0;
            *((unsigned char *)a3 + 674) = 0;
            if (!*((unsigned char *)a3 + 5084)) {
              *((unsigned char *)a3 + 653) = 1;
            }
            if (!*((unsigned char *)a3 + 5112)) {
              *((unsigned char *)a3 + 270) = -1;
            }
            if (!*((unsigned char *)a3 + 5090)) {
              *((unsigned char *)a3 + 624) = 2;
            }
            if (!*((unsigned char *)a3 + 5069)) {
              *((unsigned char *)a3 + 287) = 0;
            }
            int v50 = *a3;
            int v51 = a3[2];
            if (!*((unsigned char *)a3 + 5072)) {
              *((unsigned char *)a3 + 271) = 0;
            }
            if (v51 <= v50 && !*((unsigned char *)a3 + 5101))
            {
              if (v51 * v50 <= 101375) {
                int v52 = 1;
              }
              else {
                int v52 = 4;
              }
              *((_DWORD *)a3 + 11) = v52;
            }
            if (*((unsigned char *)a3 + 5162)) {
              *((unsigned char *)a3 + 4839) = 1;
            }
            if (!*((unsigned char *)a3 + 5153)) {
              *((unsigned char *)a3 + 678) = 1;
            }
            if (!*((unsigned char *)a3 + 5154)) {
              *((unsigned char *)a3 + 679) = 1;
            }
            goto LABEL_688;
          }
          char v49 = v48 + 1;
        }
        *((unsigned char *)a3 + 238) = v49;
        goto LABEL_656;
      }
LABEL_688:
      if (*((unsigned char *)a3 + 5140))
      {
        *((unsigned char *)a3 + 316) = *((unsigned char *)a3 + 577) != 4;
        if (!*((unsigned char *)a3 + 4978))
        {
          *((unsigned char *)a3 + 602) = 0;
          *((unsigned char *)a3 + 4978) = 1;
        }
        if (!*((unsigned char *)a3 + 5107))
        {
          *((unsigned char *)a3 + 240) = 1;
          *((unsigned char *)a3 + 5107) = 1;
        }
        if (!*((unsigned char *)a3 + 5101))
        {
          *((_DWORD *)a3 + 11) = 1;
          *((unsigned char *)a3 + 5101) = 1;
        }
        if (!*((unsigned char *)a3 + 5040))
        {
          *((unsigned char *)a3 + 393) = 0;
          *((unsigned char *)a3 + 5040) = 1;
        }
        if (!*((unsigned char *)a3 + 4977))
        {
          *((unsigned char *)a3 + 235) = 6;
          *((unsigned char *)a3 + 4977) = 1;
        }
        if (!*((unsigned char *)a3 + 4992))
        {
          *((unsigned char *)a3 + 652) = 1;
          *((unsigned char *)a3 + 4992) = 1;
        }
        if (!*((unsigned char *)a3 + 5050))
        {
          *((unsigned char *)a3 + 633) = 80;
          *((unsigned char *)a3 + 5050) = 1;
        }
        if (!*((unsigned char *)a3 + 5051))
        {
          *((unsigned char *)a3 + 634) = 100;
          *((unsigned char *)a3 + 5051) = 1;
        }
        if (!*((unsigned char *)a3 + 5150))
        {
          *((unsigned char *)a3 + 614) = 1;
          *((unsigned char *)a3 + 5150) = 1;
        }
        if (!*((unsigned char *)a3 + 5049))
        {
          *((unsigned char *)a3 + 632) = 2;
          *((unsigned char *)a3 + 5049) = 1;
        }
        if (!*((unsigned char *)a3 + 4973))
        {
          *((_DWORD *)a3 + 76) = -1;
          *((unsigned char *)a3 + 4973) = 1;
        }
        if (!*((unsigned char *)a3 + 4976))
        {
          *((_DWORD *)a3 + 75) = 64;
          *((unsigned char *)a3 + 4976) = 1;
        }
        goto LABEL_714;
      }
      if (*((unsigned char *)a3 + 5141))
      {
LABEL_714:
        if (*((unsigned char *)a3 + 5141))
        {
          *((unsigned char *)a3 + 316) = *((unsigned char *)a3 + 577) != 4;
          if (!*((unsigned char *)a3 + 4978))
          {
            *((unsigned char *)a3 + 602) = 2;
            *((unsigned char *)a3 + 4978) = 1;
          }
          if (!*((unsigned char *)a3 + 5107))
          {
            *((unsigned char *)a3 + 240) = 1;
            *((unsigned char *)a3 + 5107) = 1;
          }
          if (!*((unsigned char *)a3 + 5101))
          {
            *((_DWORD *)a3 + 11) = 1;
            *((unsigned char *)a3 + 5101) = 1;
          }
          if (!*((unsigned char *)a3 + 5040))
          {
            *((unsigned char *)a3 + 393) = 0;
            *((unsigned char *)a3 + 5040) = 1;
          }
          if (!*((unsigned char *)a3 + 4977))
          {
            *((unsigned char *)a3 + 235) = 0;
            *((unsigned char *)a3 + 4977) = 1;
          }
          if (!*((unsigned char *)a3 + 4992))
          {
            *((unsigned char *)a3 + 652) = 0;
            *((unsigned char *)a3 + 4992) = 1;
          }
          if (!*((unsigned char *)a3 + 5150))
          {
            *((unsigned char *)a3 + 614) = 0;
            *((unsigned char *)a3 + 5150) = 1;
          }
          if (!*((unsigned char *)a3 + 5049))
          {
            *((unsigned char *)a3 + 632) = 0;
            *((unsigned char *)a3 + 5049) = 1;
          }
          if (!*((unsigned char *)a3 + 4976))
          {
            *((_DWORD *)a3 + 75) = 64;
            *((unsigned char *)a3 + 4976) = 1;
          }
          if (!*((unsigned char *)a3 + 4973))
          {
            *((_DWORD *)a3 + 76) = -1;
            *((unsigned char *)a3 + 4973) = 1;
          }
          if (!*((unsigned char *)a3 + 5048))
          {
            *((unsigned char *)a3 + 631) = 1;
            *((unsigned char *)a3 + 5048) = 1;
          }
          if (!*((unsigned char *)a3 + 4981))
          {
            *((unsigned char *)a3 + 236) = 1;
            *((unsigned char *)a3 + 4981) = 1;
          }
        }
      }
      if (*((unsigned char *)a3 + 4970)) {
        *((_DWORD *)a3 + 16) = *((_DWORD *)a3 + 15);
      }
      unsigned int v53 = v74;
      uint64_t v54 = v75;
      a3[16] = 0;
      unsigned int v55 = (unsigned __int16)a3[2];
      if ((v55 & 1) != 0 || (*a3 & 1) != 0 || (v55 & 3) != 0 && *((unsigned char *)a3 + 398)) {
        goto LABEL_787;
      }
      if (*((unsigned char *)a3 + 398))
      {
        LOBYTE(v56) = 2 * *((unsigned char *)a3 + 236);
        *((unsigned char *)a3 + 237) = v56;
        a3[1] = (__int16)(v55 + (v55 >> 15)) >> 1;
        if (*((char *)a3 + 238) <= 3) {
          *((unsigned char *)a3 + 238) = 4;
        }
        int v57 = *((_DWORD *)a3 + 76);
        if ((v57 | 0x800000) == 0x800000)
        {
          int v57 = 63;
          *((_DWORD *)a3 + 76) = 63;
        }
        int v58 = (v57 - 2) & 3;
        if (2 - v57 >= 0) {
          int v58 = -((2 - v57) & 3);
        }
        if (v57 < 0x800000 && v57 != 1 && v58)
        {
          int v59 = v57 - v58;
          if (v59 <= 6) {
            int v59 = 6;
          }
          *((_DWORD *)a3 + 76) = v59;
        }
        if (*((int *)a3 + 75) < 0x800000) {
          *((_DWORD *)a3 + 75) = 0x800000;
        }
      }
      else
      {
        a3[1] = v55;
        LOBYTE(v56) = *((unsigned char *)a3 + 236);
        *((unsigned char *)a3 + 237) = v56;
      }
      if ((*((unsigned char *)a3 + 281) == 1 || *((unsigned char *)a3 + 285) == 1) && *((unsigned char *)a3 + 286) == 1) {
        *((unsigned char *)a3 + 282) = 1;
      }
      if (!*((unsigned char *)a3 + 282)) {
        *((unsigned char *)a3 + 282) = 1;
      }
      if (*((unsigned char *)a3 + 316))
      {
        if (*((unsigned char *)a3 + 632) == 2 && !*((unsigned char *)a3 + 4977)) {
          *((unsigned char *)a3 + 235) = 6;
        }
      }
      else if (*((unsigned char *)a3 + 632))
      {
        *((unsigned char *)a3 + 632) = 0;
      }
      unsigned int v60 = *((unsigned __int8 *)a3 + 235);
      if (v60 >= 6 && !*((unsigned char *)a3 + 5150)) {
        *((unsigned char *)a3 + 614) = 1;
      }
      if (*((unsigned char *)a3 + 288)) {
        *((unsigned char *)a3 + 286) = 0;
      }
      if (*((unsigned char *)a3 + 287)) {
        *((unsigned char *)a3 + 285) = 0;
      }
      if (v60 >= 6) {
        unsigned int v60 = 6;
      }
      *((unsigned char *)a3 + 235) = v60;
      if (v60)
      {
        int v56 = (1 << (v60 - 1)) - 1;
        *((unsigned char *)a3 + 236) = v56;
        *((unsigned char *)a3 + 237) = v56;
      }
      if (*((unsigned char *)a3 + 266) == 1 || *((unsigned char *)a3 + 265) == 1 || *((unsigned char *)a3 + 267) == 1) {
        goto LABEL_787;
      }
      if (!*((unsigned char *)a3 + 4961) || !*((unsigned char *)a3 + 4963))
      {
        CFLog();
        return CFLog();
      }
      int v61 = *((unsigned __int8 *)a3 + 4964);
      if (!*((unsigned char *)a3 + 4964)) {
        *((unsigned char *)a3 + 229) = *((unsigned char *)a3 + 228);
      }
      int v62 = *((unsigned __int8 *)a3 + 4965);
      if (!*((unsigned char *)a3 + 4965)) {
        *((unsigned char *)a3 + 230) = *((unsigned char *)a3 + 228);
      }
      int v63 = *((unsigned __int8 *)a3 + 4966);
      if (!*((unsigned char *)a3 + 4966)) {
        *((unsigned char *)a3 + 231) = *((unsigned char *)a3 + 228);
      }
      int v64 = *((unsigned __int8 *)a3 + 5109);
      if (*((unsigned char *)a3 + 5109))
      {
        if (v61 | *((unsigned __int8 *)a3 + 4967) | v62 | v63) {
          goto LABEL_787;
        }
      }
      int v65 = *((unsigned __int8 *)a3 + 211);
      if (*((unsigned char *)a3 + 211))
      {
        if (!*((_DWORD *)a3 + 13)) {
          goto LABEL_787;
        }
        float v66 = *((float *)a3 + 15);
        if (v66 <= 0.0) {
          goto LABEL_787;
        }
        if (v65 == 2)
        {
          if (*((double *)a3 + 23) > 0.0 && !*((unsigned char *)a3 + 392)) {
            *((unsigned char *)a3 + 601) = 1;
          }
          if (*((unsigned char *)a3 + 5128))
          {
            int v65 = 0;
            *((unsigned char *)a3 + 211) = 0;
          }
          else
          {
            int v65 = 2;
          }
          if (!*((unsigned char *)a3 + 322)) {
            *((unsigned char *)a3 + 322) = 1;
          }
          if (!*((unsigned char *)a3 + 5022) && *((unsigned __int8 *)a3 + 318) <= 5u && *((unsigned char *)a3 + 577) != 1) {
            *((unsigned char *)a3 + 318) = 6;
          }
        }
        else
        {
          int v65 = 1;
        }
      }
      else
      {
        float v66 = *((float *)a3 + 15);
      }
      if (v66 > 0.0)
      {
        if (*((float *)&v54 + 1) > 0.0) {
          *((unsigned char *)a3 + 318) = (float)(v66 * *((float *)&v54 + 1));
        }
        if (*(float *)&v54 > 0.0) {
          unsigned int v53 = (float)(v66 * *(float *)&v54);
        }
      }
      if (v53 <= v56) {
        char v67 = 0;
      }
      else {
        char v67 = v53 - v56;
      }
      *((unsigned char *)a3 + 319) = v67;
      if (*((unsigned char *)a3 + 323) && !*((unsigned char *)a3 + 322)) {
        goto LABEL_787;
      }
      if (*((unsigned char *)a3 + 663))
      {
        float v68 = (char *)a3 + 325;
        int v69 = *((unsigned __int8 *)a3 + 325);
        if (*((unsigned char *)a3 + 325) && v65) {
          goto LABEL_837;
        }
        goto LABEL_838;
      }
      if (*((unsigned char *)a3 + 322) && !*((unsigned char *)a3 + 318) || a3[163] < 0) {
        goto LABEL_787;
      }
      if (a3[163])
      {
        if (!*((unsigned char *)a3 + 322)) {
          goto LABEL_787;
        }
        unsigned int v73 = *((unsigned __int8 *)a3 + 318);
        if (!*((unsigned char *)a3 + 318)) {
          goto LABEL_787;
        }
        int v69 = *((unsigned __int8 *)a3 + 325);
        if (!*((unsigned char *)a3 + 325)) {
          goto LABEL_878;
        }
      }
      else
      {
        int v69 = *((unsigned __int8 *)a3 + 325);
        if (!*((unsigned char *)a3 + 325))
        {
LABEL_878:
          int v69 = 0;
          float v68 = (char *)a3 + 325;
          goto LABEL_838;
        }
        if (!*((unsigned char *)a3 + 322)) {
          goto LABEL_787;
        }
        unsigned int v73 = *((unsigned __int8 *)a3 + 318);
      }
      if (v73 <= 1) {
        *((unsigned char *)a3 + 318) = 2;
      }
      float v68 = (char *)a3 + 325;
      if (v65)
      {
LABEL_837:
        if (*((unsigned char *)a3 + 392)) {
          goto LABEL_838;
        }
LABEL_787:
        puts("SetErrAndBail()");
        return CFLog();
      }
LABEL_838:
      int v70 = *((_DWORD *)a3 + 10);
      if (v70 == 2 || *((float *)a3 + 78) == 0.0 || *((_DWORD *)a3 + 75) == 1 || 1.0 / v66 == *((float *)a3 + 77))
      {
        a3[118] = 0;
LABEL_843:
        *float v68 = 0;
        goto LABEL_844;
      }
      if (v70 <= 5 && v69 == 1) {
        goto LABEL_843;
      }
LABEL_844:
      if (v64 && *((unsigned char *)a3 + 577) == 1) {
        goto LABEL_787;
      }
      if (*((unsigned char *)a3 + 286) && !*((unsigned char *)a3 + 5066)) {
        *((unsigned char *)a3 + 283) = 1;
      }
      if (!*((unsigned char *)a3 + 4856) && (*((_DWORD *)a3 + 1213) - 3) <= 1)
      {
        *((unsigned char *)a3 + 4850) = 0;
        *((_DWORD *)a3 + 1215) = 0;
        *((void *)a3 + 608) = 0x200000001;
      }
      int v71 = *((_DWORD *)a3 + 1233);
      if (v71 == 1)
      {
        int v72 = 0;
      }
      else
      {
        if (v71 != 2)
        {
          int v72 = *((unsigned __int8 *)a3 + 4850);
          goto LABEL_866;
        }
        int v72 = 1;
      }
      *((unsigned char *)a3 + 4850) = v72;
LABEL_866:
      if (!v72 && *((unsigned char *)a3 + 4813) != 3) {
        return CFLog();
      }
      if (!*((unsigned char *)a3 + 4851)) {
        *((unsigned char *)a3 + 4928) = 0;
      }
      return result;
    case 5:
      uint64_t result = (uint64_t)sub_1BBB471B4(a3, &v74);
      goto LABEL_551;
    default:
      goto LABEL_551;
  }
}

uint64_t sub_1BBB49CA0(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int *a5, unsigned char *a6, int a7)
{
  int v10 = 0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  if (*(double *)(a2 + 184) > 0.0) {
    int v10 = *(_DWORD *)(*(void *)a3 + 20) - a7;
  }
  a1[29793] = a7 & ~((v10 | a7) >> 31);
  a1[29825] = v10 & ~((v10 | a7) >> 31);
  int v14 = 0;
  int v11 = a1 + 29789;
  v15[0] = __src;
  int v16 = __src;
  int v17 = 0;
  char v18 = 0;
  sub_1BBB145EC(a1 + 29789, (uint64_t)v15, &v14);
  v15[0] = __src;
  int v16 = __src;
  int v17 = 0;
  char v18 = 0;
  sub_1BBB145EC(v11, (uint64_t)v15, &v14);
  int v12 = v16 - LODWORD(v15[0]);
  if (a4 == 1)
  {
    memcpy(a6, __src, v12);
LABEL_5:
    uint64_t result = 0;
    *a5 = v12;
  }
  else
  {
    int v12 = sub_1BBB4ACBC(__src, (int)v16 - LODWORD(v15[0]), (uint64_t)a6);
    uint64_t result = 4294958327;
    switch(a4)
    {
      case 0:
        goto LABEL_5;
      case 3:
        memcpy(a6 + 1, a6 + 4, v12 - 4);
        *a6 = v12 - 4;
        v12 -= 3;
        goto LABEL_5;
      case 4:
        memcpy(a6 + 2, a6 + 4, v12 - 4);
        *(_WORD *)a6 = bswap32(v12 - 4) >> 16;
        v12 -= 2;
        goto LABEL_5;
      case 5:
        *(_DWORD *)a6 = bswap32(v12 - 4);
        goto LABEL_5;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1BBB49E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, char *__dst, _DWORD *a11, uint64_t a12, int a13, int a14, unsigned char *a15)
{
  uint64_t v16 = a5;
  uint64_t v20 = a9;
  if (a5) {
    uint64_t v21 = a5 + 8;
  }
  else {
    uint64_t v21 = 0;
  }
  if (a15) {
    *a15 = 0;
  }
  if (a14 || !a13)
  {
    uint64_t v22 = 0;
    *a9 = 0;
    *a11 = 0;
    return v22;
  }
  uint64_t v24 = a2 + 205800;
  uint64_t v115 = a4;
  if (a3)
  {
    if (*(_DWORD *)(a4 + 372) == 1 && !*(unsigned char *)(a3 + 17))
    {
      *(_WORD *)(a3 + 1398) = 257;
      uint64_t v45 = a6;
      uint64_t v114 = a2 + 205800;
      unsigned int v110 = a8;
      uint64_t v47 = sub_1BBB0FB64(*(void *)v24);
      uint64_t v16 = a5;
      a8 = v110;
      uint64_t v20 = a9;
      uint64_t v24 = v114;
      a6 = v45;
      a4 = v115;
      if (v47)
      {
        uint64_t v22 = v47;
LABEL_160:
        CFLog();
        return v22;
      }
    }
  }
  uint64_t v22 = a12;
  uint64_t v25 = a7;
  int v26 = (_DWORD *)a2;
  if (a1)
  {
    int v26 = *(_DWORD **)(a1 + 5176);
    uint64_t v25 = a1 + 5192;
  }
  int v27 = v26 + 51460;
  if (a13 != 2)
  {
    if (!v16 || a13 != 4) {
      goto LABEL_138;
    }
    *a15 = 1;
    uint64_t v43 = *(unsigned int *)(v16 + 196);
    uint64_t v44 = *(void *)(v16 + 216);
    if (v44)
    {
      if (*(_DWORD *)(v16 + 192) <= v43) {
        LODWORD(v44) = 0;
      }
      else {
        LODWORD(v44) = *(_DWORD *)(v44 + 4 * v43);
      }
    }
    *(_DWORD *)(v25 + 128) = v44;
    *(_DWORD *)(v25 + 144) = *(_DWORD *)(*(void *)(v16 + 248) + 4 * v43);
    uint64_t v48 = *(unsigned int *)(*(void *)(v16 + 208) + 4 * v43);
    unsigned int v49 = *(unsigned __int8 *)(*(void *)(v16 + 360) + v48);
    float v50 = (float)*(char *)(v21 + 10);
    if ((v48 & 0x80000000) == 0)
    {
      uint64_t v51 = *(void *)(v21 + 16);
      if (v51)
      {
        if (*(_DWORD *)(v21 + 4) > v48) {
          float v50 = *(float *)(v51 + 8 * v48);
        }
      }
    }
    int v52 = (int)v50;
    if (v49 - 9 <= 3) {
      goto LABEL_50;
    }
    if (v49 - 8 <= 0xFFFFFFFC && v49 != 8)
    {
      BOOL v54 = v49 > 0x17 || ((1 << v49) & 0xCE001F) == 0;
      if (!v54 && *(_DWORD *)(v24 + 1940) >= 0x34u) {
        *(_DWORD *)(v24 + 1940) = v52;
      }
      goto LABEL_51;
    }
    v26[51935] = v52;
    if (v26[51934] >= 0x34u) {
LABEL_50:
    }
      v26[51934] = v52;
LABEL_51:
    *(_DWORD *)(a6 + 8) = (int)v44 / 8;
    *(float *)(a12 + 12) = (float)v52;
    goto LABEL_138;
  }
  long long v28 = *(_OWORD *)(a7 + 96);
  long long v29 = *(_OWORD *)(a7 + 128);
  *(_OWORD *)(a12 + 16) = *(_OWORD *)(a7 + 112);
  *(_OWORD *)(a12 + 32) = v29;
  *(_OWORD *)a12 = v28;
  long long v30 = *(_OWORD *)(a7 + 144);
  long long v31 = *(_OWORD *)(a7 + 160);
  long long v32 = *(_OWORD *)(a7 + 192);
  *(_OWORD *)(a12 + 80) = *(_OWORD *)(a7 + 176);
  *(_OWORD *)(a12 + 96) = v32;
  *(_OWORD *)(a12 + 48) = v30;
  *(_OWORD *)(a12 + 64) = v31;
  *a11 = 112;
  if (*(_DWORD *)a7)
  {
    char v33 = __dst;
    *uint64_t v20 = 0;
    if (v16 && *(unsigned char *)(a4 + 113))
    {
      uint64_t v34 = *(unsigned int *)(*(void *)v27 + 1276);
      unsigned int v35 = *(_DWORD *)(v16 + 192);
      if (v35 > v34)
      {
        *(void *)&long long v30 = *(void *)(a12 + 80);
        *(void *)(*(void *)(v16 + 408) + 8 * v34) = v30;
        LODWORD(v34) = *(_DWORD *)(*(void *)v27 + 1276);
        unsigned int v35 = *(_DWORD *)(v16 + 192);
      }
      if (v35 > v34) {
        *(unsigned char *)(*(void *)(v16 + 416) + v34) = *(unsigned char *)(a12 + 2);
      }
    }
    if (__dst)
    {
      uint64_t v113 = v25;
      if (!*(unsigned char *)(v25 + 98) || !*(_DWORD *)(a4 + 88)) {
        goto LABEL_67;
      }
      int v117 = 0;
      int v36 = *(_DWORD *)(a3 + 1276);
      if (v16 && (uint64_t v37 = *(void *)v16) != 0 && *(float *)(v25 + 144) > 0.0)
      {
        int v38 = v20;
        uint64_t v39 = v24;
        uint64_t v40 = a6;
        uint64_t v41 = a12;
        if (v36) {
          int v42 = *(_DWORD *)(v37 + 48);
        }
        else {
          int v42 = *(_DWORD *)(v37 + 36);
        }
      }
      else
      {
        if (v36)
        {
          int v55 = 0;
LABEL_66:
          char v33 = &__dst[v55];
          *v20 += v55;
LABEL_67:
          int v59 = (int *)(a2 + 207852);
          int v60 = *(unsigned __int8 *)(a2 + 208074);
          if ((*(unsigned char *)(a2 + 208075) | *(unsigned char *)(a4 + 610)) | v60)
          {
            BOOL v61 = v60 == 0;
            if (*(unsigned char *)(a2 + 208074)) {
              char v62 = 3;
            }
            else {
              char v62 = 0;
            }
            char v63 = 1;
            if (v61) {
              char v64 = 2;
            }
            else {
              char v64 = 1;
            }
            if (*(unsigned char *)(a2 + 208075)) {
              char v65 = v64;
            }
            else {
              char v65 = v62;
            }
            *((_WORD *)v33 + 2) = 1286;
            v33[6] = 17;
            *(_OWORD *)(v33 + 7) = xmmword_1BBB8D578;
            v33[23] = v65;
            v33[24] = 0x80;
            if (a8)
            {
              if (a8 != 5)
              {
                puts("unsupported case");
                exit(1);
              }
              char v63 = 21;
            }
            *(_WORD *)char v33 = 0;
            void v33[2] = 0;
            v33[3] = v63;
            v33 += 25;
            *v20 += 25;
          }
          if (*(unsigned char *)(a7 + 98) && *(unsigned char *)(a4 + 111))
          {
            char v66 = *(unsigned char *)(v24 + 36);
            *((_WORD *)v33 + 2) = 1286;
            v33[6] = 17;
            *(_OWORD *)(v33 + 7) = xmmword_1BBB89B28;
            v33[23] = v66;
            v33[24] = 0x80;
            if (a8)
            {
              if (a8 != 5)
              {
                uint64_t v22 = 4294966630;
                goto LABEL_159;
              }
              char v67 = 21;
            }
            else
            {
              char v67 = 1;
            }
            uint64_t v111 = v16;
            *(_WORD *)char v33 = 0;
            void v33[2] = 0;
            v33[3] = v67;
            v33 += 25;
            *v20 += 25;
          }
          else
          {
            uint64_t v111 = v16;
          }
          if (*(_DWORD *)(v24 + 2032) && *(unsigned char *)(*(void *)(a2 + 136) + 577) == 1)
          {
            unsigned int v68 = *(_DWORD *)(a2 + 208060);
            unsigned int v69 = *(_DWORD *)(v24 + 2048);
            uint64_t v70 = v68 / v69;
            if (v69 <= v68)
            {
              uint64_t v71 = 0;
              if (v70 <= 1) {
                unsigned int v72 = 1;
              }
              else {
                unsigned int v72 = v70;
              }
              int v73 = *v59;
              uint64_t v74 = 4 * v72;
              do
              {
                v73 += *(_DWORD *)(*(void *)(a6 + 48) + v71);
                *int v59 = v73;
                v71 += 4;
              }
              while (v74 != v71);
            }
            if (v70 < v68)
            {
              int v75 = *(_DWORD *)(a2 + 207856);
              do
              {
                v75 += *(_DWORD *)(*(void *)(a6 + 48) + 4 * v70);
                *(_DWORD *)(a2 + 207856) = v75;
                ++v70;
              }
              while (v70 != v68);
            }
          }
          uint64_t v112 = v22;
          int v76 = *(unsigned __int8 *)(v24 + 133);
          if ((a8 - 3) < 3) {
            goto LABEL_103;
          }
          if (a8 == 2)
          {
            unsigned int v78 = *(_DWORD *)(a6 + 8);
            uint64_t v97 = v24;
            int v98 = v20;
            memcpy(v33, *(const void **)a6, v78);
            uint64_t v20 = v98;
            uint64_t v24 = v97;
            uint64_t v25 = v113;
            a4 = v115;
LABEL_137:
            *v20 += v78;
            uint64_t v16 = v111;
            uint64_t v22 = v112;
            goto LABEL_138;
          }
          if (!a8)
          {
LABEL_103:
            if (*(int *)(a6 + 36) >= 1)
            {
              uint64_t v77 = 0;
              unsigned int v78 = 0;
              while (1)
              {
                int v79 = &v33[v78];
                int v80 = *(unsigned __int8 **)(*(void *)(a6 + 56) + 8 * v77);
                size_t v81 = *(unsigned int *)(*(void *)(a6 + 48) + 4 * v77);
                if (v76)
                {
                  LODWORD(v82) = v33 + v78;
                  if (v81)
                  {
                    int v83 = &v33[v78];
                    uint64_t v84 = a6;
                    uint64_t v85 = v24;
                    int v86 = v20;
                    int v87 = v33;
                    uint64_t v88 = a8;
                    memcpy(v83, v80, v81);
                    a8 = v88;
                    char v33 = v87;
                    uint64_t v20 = v86;
                    uint64_t v24 = v85;
                    a6 = v84;
                    uint64_t v25 = v113;
                    a4 = v115;
                    LODWORD(v82) = v79 + v81;
                  }
                  goto LABEL_127;
                }
                int v89 = &v33[v78];
                if (a8 != 3)
                {
                  uint64_t v90 = &v33[v78];
                  if (a8 != 4)
                  {
                    if (a8 != 5)
                    {
                      *(_DWORD *)int v79 = 0x1000000;
                      int v91 = (unsigned __int8 *)(v79 + 4);
                      if (v81)
                      {
LABEL_114:
                        *int v91 = *v80;
                        size_t v82 = v91 + 1;
                        int v92 = v81 - 1;
                        if (v81 != 1)
                        {
                          int v93 = 0;
                          int v94 = v80 + 1;
                          do
                          {
                            unsigned int v95 = *v94;
                            if (v93 == 2)
                            {
                              if (v95 > 3)
                              {
                                int v93 = 2;
                              }
                              else
                              {
                                int v93 = 0;
                                *size_t v82 = 3;
                                size_t v82 = v91 + 2;
                                unsigned int v95 = *v94;
                              }
                            }
                            int v91 = v82;
                            if (v95) {
                              int v93 = 0;
                            }
                            else {
                              ++v93;
                            }
                            *v82++ = v95;
                            ++v94;
                            --v92;
                          }
                          while (v92);
                        }
                        goto LABEL_127;
                      }
                      goto LABEL_126;
                    }
                    *(_WORD *)int v79 = -30584;
                    uint64_t v90 = v79 + 2;
                  }
                  *uint64_t v90 = -120;
                  int v89 = v90 + 1;
                }
                *int v89 = -120;
                int v91 = (unsigned __int8 *)(v89 + 1);
                if (v81) {
                  goto LABEL_114;
                }
LABEL_126:
                LODWORD(v82) = v91;
LABEL_127:
                int v96 = v82 - v79;
                switch(a8)
                {
                  case 3:
                    *int v79 = v96 - 1;
                    break;
                  case 4:
                    *(_WORD *)int v79 = bswap32(v96 - 2) >> 16;
                    break;
                  case 5:
                    *(_DWORD *)int v79 = bswap32(v96 - 4);
                    break;
                }
                v78 += v96;
                if (++v77 >= *(int *)(a6 + 36)) {
                  goto LABEL_137;
                }
              }
            }
            unsigned int v78 = 0;
            goto LABEL_137;
          }
          uint64_t v22 = 4294958327;
LABEL_159:
          CFLog();
          goto LABEL_160;
        }
        int v38 = v20;
        *(void *)(a4 + 184) = 0;
        unsigned int v56 = *(_DWORD *)(a4 + 52);
        uint64_t v39 = v24;
        uint64_t v40 = a6;
        uint64_t v41 = a12;
        if (v56)
        {
          LODWORD(v30) = *(_DWORD *)(a4 + 20);
          int v42 = (int)((double)(unint64_t)v30 * 90000.0 / (double)v56 + 0.5);
        }
        else
        {
          int v42 = 90000;
        }
      }
      uint64_t v57 = v16;
      uint64_t v58 = a8;
      uint64_t v22 = sub_1BBB49CA0(v26, a4, v16, a8, &v117, __dst, v42);
      if (v22) {
        goto LABEL_159;
      }
      a6 = v40;
      uint64_t v24 = v39;
      uint64_t v20 = v38;
      int v55 = v117;
      uint64_t v22 = v41;
      uint64_t v25 = v113;
      a4 = v115;
      a8 = v58;
      uint64_t v16 = v57;
      goto LABEL_66;
    }
  }
LABEL_138:
  int v99 = *(unsigned char **)(v24 + 168);
  if (v99)
  {
    if (*v99)
    {
      float v100 = *(float *)(v25 + 144);
      if (v100 > 0.0)
      {
        int v116 = 0;
        uint64_t v101 = v16;
        if (*(unsigned char *)(v25 + 98)) {
          BOOL v102 = 1;
        }
        else {
          BOOL v102 = *(unsigned char *)(v25 + 100) != 0;
        }
        sub_1BBB210F0((uint64_t)v99, *(_DWORD *)(v25 + 128), (int)(90000.0 / v100 + 0.5), v102, 1, (_DWORD *)(v25 + 140), &v116);
        a4 = v115;
        uint64_t v16 = v101;
      }
    }
  }
  if (!v16) {
    return 0;
  }
  *(_DWORD *)(v16 + 256) = *(unsigned __int8 *)(a4 + 317);
  if (!v22) {
    return v22;
  }
  unsigned int v104 = *(_DWORD *)(v16 + 192);
  unsigned int v103 = *(_DWORD *)(v16 + 196);
  if (v103 >= v104) {
    return 0;
  }
  uint64_t v105 = *(unsigned int *)(v22 + 40);
  if (v105 >= v104) {
    return 0;
  }
  *(_DWORD *)(*(void *)(v16 + 200) + 4 * v105) = v103;
  *(_DWORD *)(*(void *)(v16 + 208) + 4 * *(unsigned int *)(v16 + 196)) = *(_DWORD *)(v22 + 40);
  *(void *)(*(void *)(v16 + 472) + 8 * *(unsigned int *)(v22 + 40)) = *(int *)(v22 + 28);
  if (!*(_DWORD *)(v16 + 256))
  {
    *(_DWORD *)(*(void *)(v16 + 216) + 4 * *(unsigned int *)(v16 + 196)) = *(_DWORD *)(v22 + 32);
    uint64_t v106 = *(void *)(v16 + 216);
    uint64_t v107 = *(unsigned int *)(v16 + 196);
    *(void *)(v16 + 280) += *(unsigned int *)(v106 + 4 * v107);
    if (*(unsigned char *)(v22 + 5)) {
      *(void *)(v16 + 288) += *(unsigned int *)(v106 + 4 * v107);
    }
    *(double *)(v16 + 304) = *(double *)(v16 + 304)
                           + (double)((100 - *(unsigned __int16 *)(v22 + 88)) * (int)*(float *)(v22 + 12));
    *(void *)(v16 + 312) += 100 - *(unsigned __int16 *)(v22 + 88);
    *(_DWORD *)(*(void *)(v16 + 232) + 4 * (int)v107) = *(_DWORD *)(v22 + 12);
    *(double *)(v16 + 296) = *(double *)(v16 + 296) + *(float *)(v22 + 12);
    *(void *)(v16 + 328) += *(unsigned __int16 *)(v22 + 88);
    *(unsigned char *)(*(void *)(v16 + 264) + *(unsigned int *)(v22 + 40)) = *(unsigned char *)(v22 + 88);
    *(unsigned char *)(*(void *)(v16 + 272) + *(unsigned int *)(v22 + 40)) = *(unsigned char *)(v22 + 90);
  }
  *(_DWORD *)(*(void *)(v16 + 248) + 4 * *(unsigned int *)(v16 + 196)) = *(_DWORD *)(v22 + 48);
  if (!*(_DWORD *)(v16 + 348))
  {
    unsigned int v108 = vcvts_n_u32_f32(*(float *)(v22 + 48), 0xAuLL);
    *(_DWORD *)(v16 + 344) = v108;
    *(_DWORD *)(v16 + 348) = *(_DWORD *)(v22 + 24) * v108;
  }
  uint64_t v109 = v22;
  uint64_t v22 = 0;
  *(void *)(v16 + 320) += *(int *)(v109 + 24);
  ++*(_DWORD *)(v16 + 196);
  return v22;
}

uint64_t sub_1BBB4A864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, char *a6, _DWORD *a7, uint64_t a8, unsigned char *a9, _DWORD *a10, unsigned char *a11, unsigned char *a12)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v16 = a11;
  int v17 = a12;
  int v68 = 0;
  uint64_t v18 = *(void *)(a1 + 10624);
  int v19 = *(_DWORD *)(a1 + 10604);
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    uint64_t v63 = (uint64_t)a11;
    uint64_t v20 = a12;
    uint64_t v21 = a2;
    uint64_t v23 = v18 + 320 * v19;
    uint64_t v25 = (pthread_mutex_t **)(v23 + 248);
    uint64_t v24 = *(pthread_mutex_t **)(v23 + 248);
    if (v24) {
      pthread_mutex_lock(v24);
    }
    if (*(_DWORD *)v23)
    {
      int v26 = (pthread_cond_t **)(v18 + 320 * v19 + 256);
      do
      {
        int v27 = *v25;
        if (*v26) {
          BOOL v28 = v27 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28) {
          pthread_cond_wait(*v26, v27);
        }
      }
      while (*(_DWORD *)v23);
    }
    *(_DWORD *)uint64_t v23 = 1;
    if (*v25) {
      pthread_mutex_unlock(*v25);
    }
    uint64_t v29 = v18 + 320 * v19;
    int v68 = *(_DWORD *)(v29 + 308);
    uint64_t v30 = *(void *)(v29 + 32);
    uint64_t v31 = v29 + 40;
    uint64_t v32 = v29 + 56;
    uint64_t v13 = a3;
    goto LABEL_45;
  }
  uint64_t v30 = *(void *)(a1 + 5176);
  uint64_t v33 = v30 + 205840;
  *(_DWORD *)(*(void *)(v30 + 128) + 4) = **(_DWORD **)(v30 + 128);
  if (!*(unsigned char *)(a1 + 4850))
  {
    uint64_t v34 = *(void *)(a1 + 5168);
    *(void *)(v30 + 80) = a3;
    *(void *)(v30 + 88) = v34;
  }
  if (*(unsigned char *)(v30 + 205935))
  {
    if (*(void *)v33)
    {
      unsigned int v35 = *(_DWORD **)(v30 + 144);
      if (v35)
      {
        if (v35[97])
        {
          if (!*(unsigned char *)(v30 + 205933))
          {
            v35[5] = 0;
            goto LABEL_39;
          }
        }
        else
        {
          int v37 = *(_DWORD *)(*(void *)v33 + 1332);
          if (v35[154] < 3u && *(double *)(*(void *)(v30 + 5392) + 136) <= 10.5)
          {
            v35[4] = 0;
            uint64_t v39 = *(void *)(v30 + 144);
            if (!*(_DWORD *)(v39 + 20)) {
              *(_DWORD *)(v39 + 20) = v37;
            }
          }
          else
          {
            v35[5] = 0;
            uint64_t v38 = *(void *)(v30 + 144);
            if (!*(_DWORD *)(v38 + 16)) {
              *(_DWORD *)(v38 + 16) = v37;
            }
          }
          unsigned int v40 = 5 * *(_DWORD *)(*(void *)v33 + 1336);
          uint64_t v41 = *(void *)(v30 + 144);
          int v42 = *(_DWORD *)(v41 + 16);
          if (v42 && v37 - v42 >= v40)
          {
            if (*(unsigned char *)(v30 + 205933)) {
              goto LABEL_39;
            }
            uint64_t v36 = *(void *)(v30 + 208120);
            if (*(_DWORD *)(*(void *)v33 + 1276) <= *(_DWORD *)(v36 + 2980)) {
              goto LABEL_39;
            }
            *(unsigned char *)(v30 + 205934) = 1;
            goto LABEL_23;
          }
          int v43 = *(_DWORD *)(v41 + 20);
          if (!v43 || v37 - v43 < v40 || !*(unsigned char *)(v30 + 205933)) {
            goto LABEL_39;
          }
        }
        *(unsigned char *)(v30 + 205934) = 0;
        uint64_t v36 = *(void *)(v30 + 208120);
LABEL_23:
        *(unsigned char *)(v36 + 3462) = 1;
      }
    }
  }
LABEL_39:
  uint64_t v44 = *(void *)(v30 + 208120);
  if (v44) {
    *(_DWORD *)(v44 + 220) = a4;
  }
  uint64_t v45 = sub_1BBB3FB20((__int16 *)a1, 0, a2, a3, a12, 0, &v68, a10);
  if (v45)
  {
    uint64_t v46 = v45;
    CFLog();
    if (a11) {
      goto LABEL_51;
    }
    goto LABEL_66;
  }
  uint64_t v63 = (uint64_t)a11;
  uint64_t v20 = a12;
  uint64_t v21 = v14;
  uint64_t v31 = a1 + 5192;
  uint64_t v32 = a1 + 5208;
LABEL_45:
  uint64_t v47 = *(void *)(v30 + 208120);
  if (v47 && !*(unsigned char *)(v47 + 32))
  {
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = sub_1BBB49E78(a1, v30, *(void *)(v30 + 205840), a1, *(void *)(a1 + 5184), v32, v31, a4, a5, a6, a7, a8, v68, *(_DWORD *)(*(void *)(v30 + 128) + 8), a9);
    if (v46) {
      CFLog();
    }
  }
  uint64_t v14 = v21;
  int v17 = v20;
  uint64_t v16 = (unsigned char *)v63;
  if (v63)
  {
LABEL_51:
    uint64_t v48 = *(void *)(*(void *)(a1 + 5176) + 205800);
    uint64_t v49 = *(void *)(v48 + 22824);
    if (v49 && (uint64_t v50 = *(unsigned int *)(v49 + 12), v50))
    {
      uint64_t v51 = v49 + 216;
      while (*(unsigned char *)(*(void *)v51 + 1399))
      {
        v51 += 8;
        if (!--v50) {
          goto LABEL_56;
        }
      }
    }
    else
    {
LABEL_56:
      uint64_t v52 = *(void *)(v48 + 22816);
      if (!v52 || (uint64_t v53 = *(unsigned int *)(v52 + 12), !v53))
      {
LABEL_61:
        uint64_t v55 = *(void *)(a1 + 5168);
        int v56 = *(_DWORD *)(v55 + 40);
        uint64_t v57 = *(void *)(v55 + 232);
        if (v57) {
          v56 += *(unsigned __int8 *)(v57 + 9);
        }
        BOOL v58 = v56 != 0;
        goto LABEL_65;
      }
      uint64_t v54 = v52 + 216;
      while (*(unsigned char *)(*(void *)v54 + 1399))
      {
        v54 += 8;
        if (!--v53) {
          goto LABEL_61;
        }
      }
    }
    BOOL v58 = 1;
LABEL_65:
    *uint64_t v16 = v58;
  }
LABEL_66:
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    uint64_t v59 = v18 + 320 * v19;
    *(void *)(v59 + 272) = a1;
    *(void *)(v59 + 280) = v14;
    *(void *)(v59 + 288) = v13;
    *(void *)(v59 + 296) = v17;
    *(unsigned char *)(v59 + 304) = 0;
    *(_DWORD *)(v59 + 312) = 0;
    *(_DWORD *)(v59 + 308) = 0;
    int v60 = *(unsigned int **)(v59 + 16);
    if (v60) {
      MEMORY[0x1C1861060](*v60);
    }
    MEMORY[0x1C1861070](**(unsigned int **)(v18 + 320 * v19 + 24));
    *(_DWORD *)(a1 + 10604) = (*(_DWORD *)(a1 + 10604) + 1) % *(_DWORD *)(a1 + 10608);
  }
  uint64_t v61 = *(void *)(v30 + 144);
  if (v61) {
    *(unsigned char *)(v61 + 24) = *(unsigned char *)(v30 + 205933);
  }
  return v46;
}

uint64_t sub_1BBB4ACBC(unsigned char *a1, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0x1000000;
  LODWORD(v3) = a3 + 4;
  if (a2)
  {
    float v3 = (unsigned char *)(a3 + 5);
    *(unsigned char *)(a3 + 4) = *a1;
    int v4 = a2 - 1;
    if (a2 != 1)
    {
      int v5 = 0;
      int v6 = a1 + 1;
      do
      {
        unsigned int v7 = *v6;
        if (v5 == 2)
        {
          if (v7 > 3)
          {
            int v5 = 2;
          }
          else
          {
            int v5 = 0;
            *v3++ = 3;
            unsigned int v7 = *v6;
          }
        }
        if (v7) {
          int v5 = 0;
        }
        else {
          ++v5;
        }
        *v3++ = v7;
        ++v6;
        --v4;
      }
      while (v4);
    }
  }
  return (v3 - a3);
}

uint64_t sub_1BBB4AD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v9 = a2;
  uint64_t v11 = a3 + 205800;
  *(void *)(a1 + 1856) = a2;
  int v12 = *(_DWORD *)(a3 + 205988);
  *(_DWORD *)(a1 + 3332) = v12;
  *(_DWORD *)(a1 + 3336) = 4 * v12;
  *(_DWORD *)(a1 + 3328) = *(unsigned __int8 *)(*(void *)(a3 + 205840) + 1394);
  *(_DWORD *)(a1 + 1812) = 0;
  uint64_t v13 = a1 + 2416;
  if (a6) {
    uint64_t v13 = a6;
  }
  *(void *)(a1 + 2928) = v13;
  *(_DWORD *)(a1 + 1840) = a7;
  int v14 = *(_DWORD *)(a4 + 20);
  *(_DWORD *)(a1 + 3324) = v14 == 6;
  *(_DWORD *)(a1 + 1900) = *(_DWORD *)(a5 + 14176);
  *(unsigned char *)(a1 + 3884) = *(unsigned char *)(*(void *)(a3 + 136) + 633);
  *(_DWORD *)(a1 + 3308) = *(unsigned __int8 *)(a3 + 208080);
  *(_DWORD *)(a1 + 3312) = *(unsigned __int8 *)(a3 + 208078);
  *(_DWORD *)(a1 + 3316) = *(unsigned __int8 *)(a3 + 208079);
  *(unsigned char *)(a1 + 3871) = *(unsigned char *)(a3 + 208081);
  *(unsigned char *)(a1 + 3872) = *(unsigned char *)(a3 + 208082);
  *(unsigned char *)(a1 + 3873) = *(unsigned char *)(a3 + 208083);
  *(unsigned char *)(a1 + 3874) = *(unsigned char *)(a3 + 208084);
  *(unsigned char *)(a1 + 3885) = *(unsigned char *)(*(void *)(a3 + 136) + 260);
  *(unsigned char *)(a1 + 3887) = *(unsigned char *)(a3 + 208114);
  *(_DWORD *)(a1 + 3320) = *(unsigned __int8 *)(a4 + 14118);
  if (*(unsigned char *)(a4 + 14118)) {
    *(_DWORD *)(a1 + 3312) = 0;
  }
  *(unsigned char *)(a1 + 3870) = *(unsigned char *)(*(void *)v11 + 24555);
  int v15 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 1);
  if (v15 == 5 || v15 == 3)
  {
    char v16 = *(unsigned char *)(a4 + 14114);
    if (v16) {
      char v16 = 1;
    }
  }
  else
  {
    char v16 = *(unsigned char *)(a4 + 14113) != 0;
  }
  *(unsigned char *)(a1 + 3869) = v16;
  int v17 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 1);
  if (v17 == 5 || v17 == 3)
  {
    if (*(unsigned char *)(a4 + 14115)) {
      BOOL v18 = v14 == 6;
    }
    else {
      BOOL v18 = 1;
    }
    char v19 = !v18;
  }
  else
  {
    char v19 = 0;
  }
  *(unsigned char *)(a1 + 3868) = v19;
  *(void *)(a1 + 3792) = *(void *)(a2 + 112);
  if (*(unsigned char *)(a4 + 34))
  {
    int v20 = 1;
    *(_DWORD *)(a1 + 3876) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 3876) = *(_DWORD *)(a2 + 248);
    int v20 = *(_DWORD *)(a2 + 252);
  }
  *(_DWORD *)(a1 + 3880) = v20;
  if (*(unsigned char *)(a3 + 208087))
  {
    int v21 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 1);
    if (v21 == 5 || v21 == 3) {
      *(void *)(a1 + 3876) = 0x100000001;
    }
  }
  *(void *)(a1 + 1872) = *(void *)(*(void *)(a2 + 216) + 128)
                         + (16 * *(_DWORD *)a2)
                         + (16 * *(_DWORD *)(a2 + 4) * *(_DWORD *)(*(void *)(a2 + 216) + 232));
  *(void *)(a1 + 1880) = *(void *)(a2 + 216);
  unsigned int v22 = *(_DWORD *)(*(void *)(a2 + 216) + 232);
  *(_DWORD *)(a1 + 1888) = v22;
  *(_DWORD *)(a1 + 1892) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 1896) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 1864) = *(_DWORD *)(a2 + 16);
  if (!*(_DWORD *)(a1 + 3800))
  {
    *(_DWORD *)(a1 + 3800) = v22;
    int32x4_t v23 = vdupq_n_s32(v22);
    *(int32x4_t *)(a1 + 3804) = vmlaq_s32((int32x4_t)xmmword_1BBB6FFE0, v23, (int32x4_t)xmmword_1BBB6FFD0);
    *(int32x4_t *)(a1 + 3820) = vmlaq_s32((int32x4_t)xmmword_1BBB6FFF0, v23, (int32x4_t)xmmword_1BBB6FFC0);
    *(int32x4_t *)(a1 + 3836) = vmlaq_s32((int32x4_t)xmmword_1BBB70020, v23, (int32x4_t)xmmword_1BBB70010);
    *(int32x4_t *)(a1 + 3852) = vmlaq_s32((int32x4_t)xmmword_1BBB70030, v23, (int32x4_t)xmmword_1BBB70000);
  }
  *(void *)&long long v24 = -1;
  *((void *)&v24 + 1) = -1;
  *(_OWORD *)(a1 + 3776) = v24;
  *(_OWORD *)(a1 + 3760) = v24;
  *(_OWORD *)(a1 + 3744) = v24;
  *(_OWORD *)(a1 + 3728) = v24;
  *(_OWORD *)(a1 + 3712) = v24;
  memset((void *)(a1 + 80), 255, 0x5D0uLL);
  *(_OWORD *)(a1 + 3616) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  uint64_t v25 = *(void *)(*(void *)(v9 + 96) + 8 * a7);
  if (!v25)
  {
    int v26 = *(pthread_mutex_t **)(v9 + 104);
    if (!v26
      || (pthread_mutex_lock(v26),
          uint64_t v9 = *(void *)(a1 + 1856),
          !*(void *)(*(void *)(v9 + 96) + 8 * *(unsigned int *)(a1 + 1840))))
    {
      int v27 = (char *)malloc_type_malloc(0x10002uLL, 0x1000040BDFB0063uLL);
      uint64_t v28 = 0;
      for (uint64_t i = 0x8000; i != -2; i -= 2)
      {
        unsigned int v30 = v28 - 1;
        if (!v28) {
          unsigned int v30 = 0;
        }
        unsigned int v31 = (v30 + 1) >> 16;
        unsigned int v32 = v31 - 1;
        BOOL v18 = v31 == 0;
        __int16 v33 = v31 != 0;
        if (v18) {
          unsigned int v32 = v30 + 1;
        }
        __int16 v34 = 32 * v33;
        if (v32 >= 0x100)
        {
          unsigned int v32 = (v32 >> 8) - 1;
          v34 |= 0x10u;
        }
        BOOL v35 = v30 >= 0xFF;
        if (v30 >= 0xFF) {
          unsigned int v30 = v32;
        }
        __int16 v36 = byte_1BBB93ED8[v30];
        if (!v35) {
          __int16 v34 = 0;
        }
        __int16 v37 = (v34 + v36) * *(_DWORD *)(a1 + 1840);
        *(_WORD *)&v27[v28 + 0x8000] = v37;
        *(_WORD *)&v27[i] = v37;
        v28 += 2;
      }
      *(void *)(*(void *)(*(void *)(a1 + 1856) + 96) + 8 * *(unsigned int *)(a1 + 1840)) = v27;
      uint64_t v9 = *(void *)(a1 + 1856);
    }
    uint64_t v38 = *(pthread_mutex_t **)(v9 + 104);
    if (v38)
    {
      pthread_mutex_unlock(v38);
      uint64_t v9 = *(void *)(a1 + 1856);
    }
    uint64_t v25 = *(void *)(*(void *)(v9 + 96) + 8 * *(unsigned int *)(a1 + 1840));
  }
  *(void *)(a1 + 1816) = v25 + 0x8000;
  if (*(unsigned char *)(a3 + 1057) != 1
    || (unsigned int v39 = *(unsigned __int16 *)(*(void *)(v11 + 40) + 19112),
        int v40 = *(unsigned __int16 *)(*(void *)(v11 + 40) + 19114) >> 4,
        *(_DWORD *)(v9 + 20) == v39 >> 4)
    && *(_DWORD *)(v9 + 84) == v40)
  {
    *(unsigned char *)(a1 + 3886) = 0;
    unsigned int v41 = *(_DWORD *)(v9 + 20);
    int v40 = *(_DWORD *)(v9 + 84);
  }
  else
  {
    unsigned int v41 = v39 >> 4;
    *(unsigned char *)(a1 + 3886) = 1;
  }
  sub_1BBB4B1F4(a1, v41, v40);
  off_1E9F83248(a1 + 1904, *(void *)(*(void *)(a1 + 1880) + 128)+ (16 * *(_DWORD *)(a1 + 1892))+ (16 * *(_DWORD *)(a1 + 1896) * *(_DWORD *)(*(void *)(a1 + 1880) + 232)));
  uint64_t result = off_1E9F82E78(a1 + 1904, a1 + 2160);
  *(_DWORD *)(a1 + 3472) = *(unsigned __int8 *)(v11 + 2313);
  return result;
}

uint64_t sub_1BBB4B1F4(uint64_t result, __int16 a2, __int16 a3)
{
  __int16 v3 = *(_WORD *)(result + 3332);
  __int16 v4 = 4 * v3;
  __int16 v5 = -4 * v3;
  __int16 v6 = v5;
  int v7 = *(_DWORD *)(result + 1892);
  int v8 = *(_DWORD *)(result + 1896);
  if ((__int16)(-128 - ((_WORD)v7 << 6)) <= v5) {
    __int16 v9 = v5;
  }
  else {
    __int16 v9 = -128 - ((_WORD)v7 << 6);
  }
  if ((__int16)(-128 - ((_WORD)v8 << 6)) > v5) {
    __int16 v6 = -128 - ((_WORD)v8 << 6);
  }
  int v10 = *(unsigned __int8 *)(result + 3886);
  __int16 v11 = 16 * (~(_WORD)v7 + a2);
  __int16 v12 = 16 * (~(_WORD)v8 + a3);
  if (!*(unsigned char *)(result + 3886))
  {
    v11 += 32;
    v12 += 32;
  }
  int v13 = (__int16)(4 * v11);
  int v14 = (__int16)(4 * v12);
  if (v13 >= v4) {
    LOWORD(v13) = v4;
  }
  if (v14 < v4) {
    __int16 v4 = v14;
  }
  *(_WORD *)(result + 3376) = v13;
  *(_WORD *)(result + 3378) = v4;
  *(_WORD *)(result + 3380) = v9;
  *(_WORD *)(result + 3382) = v6;
  int v15 = *(_DWORD *)(result + 3308);
  int v16 = *(_DWORD *)(result + 3316);
  int v17 = 2 * v16;
  unsigned int v18 = *(_DWORD *)(result + 3312);
  int v19 = 2 * v16 + 8 * v15 + v18 + 4;
  __int16 v20 = ((v6 - v9) & ((v6 - v9) >> 31)) - v6;
  int v21 = (__int16)(((v13 - v4) & (((__int16)v13 - v4) >> 31)) + v4) - v20;
  int v22 = v19 - ((v21 & (v21 >> 31)) + v20);
  int v23 = (__int16)(2 * v16 + 8 * v15 + v18 + 4 - v20);
  int v24 = v23 & ~(v23 >> 31);
  if (!v10) {
    int v24 = v22;
  }
  if (v24 << 16 >= 1)
  {
    uint64_t v25 = (_DWORD *)(result + 3308);
    unsigned int v26 = 8 * v15 - 8;
    if (v26 >= (__int16)v24)
    {
      int v29 = v15 - (((__int16)v24 + 7) >> 3);
      *uint64_t v25 = v29;
      __int16 v30 = (8 * v29) | 4;
    }
    else
    {
      if (v26 + v17 >= (__int16)v24)
      {
        v16 -= ((__int16)v24 - 8 * v15 + 9) >> 1;
        *(_DWORD *)(result + 3316) = v16;
        *(_DWORD *)(result + 3308) = 1;
      }
      else
      {
        unsigned int v27 = v26 + v17 + v18;
        BOOL v28 = v27 >= (__int16)v24;
        unsigned int v18 = v27 - (__int16)v24;
        if (v18 != 0 && v28)
        {
          LOWORD(v16) = 0;
          *(_DWORD *)(result + 3312) = v18;
          *(_DWORD *)(result + 3308) = 1;
          *(_DWORD *)(result + 3316) = 0;
        }
        else
        {
          LOWORD(v18) = 0;
          LOWORD(v16) = 0;
          *(_DWORD *)(result + 3316) = 0;
          *(void *)uint64_t v25 = 1;
        }
      }
      __int16 v30 = 12;
    }
    LOWORD(v19) = v30 + 2 * v16 + v18;
  }
  __int16 v31 = v9 + v19;
  *(_WORD *)(result + 3344) = v31;
  *(_WORD *)(result + 3356) = v31;
  *(_WORD *)(result + 3352) = v31;
  *(_WORD *)(result + 3348) = v31;
  __int16 v32 = v6 + v19;
  *(_WORD *)(result + 3346) = v32;
  *(_WORD *)(result + 3358) = v32;
  *(_WORD *)(result + 3354) = v32;
  *(_WORD *)(result + 3350) = v32;
  if (v10) {
    __int16 v33 = 0;
  }
  else {
    __int16 v33 = v19;
  }
  __int16 v34 = v13 - v33;
  __int16 v35 = v4 - v33;
  *(_WORD *)(result + 3360) = v34;
  *(_WORD *)(result + 3372) = v34;
  *(_WORD *)(result + 3368) = v34;
  *(_WORD *)(result + 3364) = v34;
  *(_WORD *)(result + 3362) = v35;
  *(_WORD *)(result + 3374) = v35;
  *(_WORD *)(result + 3370) = v35;
  *(_WORD *)(result + 3366) = v35;
  return result;
}

void *sub_1BBB4B400(int32x2_t *a1, int a2)
{
  uint64_t result = (void *)a1[232];
  int v5 = *(unsigned __int8 *)(result[5] + 1);
  if (v5 == 3 || v5 == 5)
  {
    switch(a1[433].i32[0])
    {
      case 0:
        sub_1BBB52450(result, 0, &v33);
        __int16 v7 = v33;
        __int16 v8 = v34;
        a1[70].i32[24 * a2] = v33 | (v34 << 16);
        __int16 v9 = v35;
        __int16 v10 = v36;
        a1[70].i32[24 * a2 + 12] = v35 | (v36 << 16);
        a1[384].i16[0] = v7;
        a1[384].i16[1] = v8;
        a1[392].i16[0] = v9;
        a1[392].i16[1] = v10;
        a1[408] = (int32x2_t)0x100000001;
LABEL_10:
        uint64_t result = sub_1BBB4CB1C(a1, a2);
        break;
      case 1:
        uint64_t result = (void *)sub_1BBB52450(result, 0, &v33);
        __int16 v13 = v33;
        int v14 = v35;
        __int16 v15 = v34;
        a1[70].i32[(24 * a2) | 4] = v33 | (v34 << 16);
        __int16 v16 = v36;
        a1[70].i32[24 * a2 + 16] = v14 | (v36 << 16);
        a1[384].i16[0] = v13;
        a1[384].i16[1] = v15;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 9];
        a1[408].i32[0] = 4;
        a1[392].i16[0] = v14;
        a1[392].i16[1] = v16;
        a1[392].i32[1] = a1[10].i32[24 * a2 + 12];
        a1[408].i32[1] = 2;
        a1[393].i32[0] = a1[10].i32[24 * a2 + 20];
        a1[408].i32[1] = 3;
        a1[393].i32[1] = a1[10].i32[24 * a2 + 21];
        a1[408].i32[1] = 4;
        break;
      case 2:
        uint64_t result = (void *)sub_1BBB52450(result, 0, &v33);
        __int16 v17 = v33;
        int v18 = v35;
        __int16 v19 = v34;
        a1[70].i32[(24 * a2) | 6] = v33 | (v34 << 16);
        __int16 v20 = v36;
        a1[70].i32[24 * a2 + 18] = v18 | (v36 << 16);
        a1[384].i16[0] = v17;
        a1[384].i16[1] = v19;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 10];
        a1[408].i32[0] = 4;
        a1[392].i16[0] = v18;
        a1[392].i16[1] = v20;
        a1[392].i32[1] = a1[10].i32[24 * a2 + 12];
        a1[408].i32[1] = 2;
        a1[393].i32[0] = a1[10].i32[24 * a2 + 20];
        a1[408].i32[1] = 3;
        a1[393].i32[1] = a1[10].i32[24 * a2 + 22];
        a1[408].i32[1] = 4;
        break;
      case 3:
        uint64_t result = (void *)sub_1BBB52450(result, 0, &v33);
        __int16 v21 = v33;
        int v22 = v35;
        __int16 v23 = v34;
        int v24 = 24 * a2;
        a1[70].i32[v24 + 8] = v33 | (v34 << 16);
        __int16 v25 = v36;
        a1[70].i32[v24 + 20] = v22 | (v36 << 16);
        a1[384].i16[0] = v21;
        a1[384].i16[1] = v23;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[392].i16[0] = v22;
        a1[392].i16[1] = v25;
        a1[392].i32[1] = a1[10].i32[24 * a2 + 12];
        a1[408].i32[1] = 2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(a1[433].i32[0])
    {
      case 0:
        sub_1BBB52450(result, 0, &v33);
        __int16 v11 = v33;
        __int16 v12 = v34;
        a1[70].i32[24 * a2] = v33 | (v34 << 16);
        a1[384].i16[0] = v11;
        a1[384].i16[1] = v12;
        a1[408].i32[0] = 1;
        a1[400].i32[0] = 0;
        goto LABEL_10;
      case 1:
        uint64_t result = (void *)sub_1BBB52450(result, 0, &v33);
        __int16 v26 = v33;
        __int16 v27 = v34;
        a1[70].i32[(24 * a2) | 4] = v33 | (v34 << 16);
        a1[384].i16[0] = v26;
        a1[384].i16[1] = v27;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 9];
        a1[408].i32[0] = 4;
        return result;
      case 2:
        uint64_t result = (void *)sub_1BBB52450(result, 0, &v33);
        __int16 v28 = v33;
        __int16 v29 = v34;
        a1[70].i32[(24 * a2) | 6] = v33 | (v34 << 16);
        a1[384].i16[0] = v28;
        a1[384].i16[1] = v29;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 10];
        int v30 = 4;
        goto LABEL_17;
      case 3:
        uint64_t result = (void *)sub_1BBB52450(result, 0, &v33);
        __int16 v31 = v33;
        __int16 v32 = v34;
        a1[70].i32[24 * a2 + 8] = v33 | (v34 << 16);
        a1[384].i16[0] = v31;
        a1[384].i16[1] = v32;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        int v30 = 2;
LABEL_17:
        a1[408].i32[0] = v30;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1BBB4B894(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(unsigned int *)(result + 3464);
  unsigned int v8 = byte_1BBB8D4E8[4 * v7 + a4];
  uint64_t v9 = byte_1BBB8D4F8[4 * v7 + a4];
  *(_DWORD *)(result + 3384) = v9 + 16 * *(_DWORD *)(result + 1892);
  *(_DWORD *)(result + 3388) = v8 + 16 * *(_DWORD *)(result + 1896);
  uint64_t v10 = result + 16 * v8;
  *(void *)(result + 3440) = v10 + v9 + 1904;
  *(void *)(result + 3448) = v10 + 8 * v9 + 2160;
  uint64_t v11 = *(void *)(result + 1816);
  uint64_t v12 = result + 4 * (24 * a2 + 12 * a3 + a4 + dword_1BBB8D538[v7]);
  *(void *)(result + 1824) = v11 + 2 * -*(__int16 *)(v12 + 560);
  *(void *)(result + 1832) = v11 + 2 * -*(__int16 *)(v12 + 562);
  uint64_t v13 = *(void *)(*(void *)(*(void *)(result + 1856) + 8 * a3 + 224) + 8 * a2);
  uint64_t v14 = *(void *)(v13 + 488);
  if (*(_DWORD *)(v14 + 152))
  {
    *(_DWORD *)(v14 + 168) = *(_DWORD *)(result + 1844);
    *(_DWORD *)(v14 + 172) = *(_DWORD *)(result + 1848);
    uint64_t result = sub_1BBB1228C(v14);
  }
  int v15 = *(_DWORD *)(v13 + 232);
  *(_DWORD *)(v6 + 3400) = v15;
  uint64_t v16 = (32 * v15);
  *(void *)(v6 + 3408) = *(void *)(v14 + 72);
  *(void *)(v6 + 3416) = *(void *)(v14 + 80) + v16 + 32;
  *(void *)(v6 + 3424) = *(void *)(v14 + 88) + v16 + 32;
  *(void *)(v6 + 3432) = *(void *)(v14 + 96) + v16 + 32;
  if (*(unsigned char *)(v6 + 3869)
    && (uint64_t v17 = *(void *)(v6 + 3792), *(unsigned char *)(v17 + 32 * a3 + a2 + 12))
    && ((uint64_t v18 = v17 + 384 * a3 + 12 * a2,
         int v20 = *(_DWORD *)(v18 + 140),
         __int16 v19 = (_DWORD *)(v18 + 140),
         v20 != 1 << *(_DWORD *)(v17 + 4))
     || *(_DWORD *)(v17 + 384 * a3 + 12 * a2 + 908)))
  {
    *(void *)uint64_t v6 = &qword_1E9F830F8;
    *(void *)(v6 + 8) = &qword_1E9F830C0;
    *(void *)(v6 + 16) = &qword_1E9F83088;
    *(void *)(v6 + 24) = &qword_1E9F83130;
    *(void *)(v6 + 32) = &qword_1E9F82FE0;
    *(void *)(v6 + 40) = &qword_1E9F83018;
    uint64_t v21 = qword_1E9F83170;
    *(void *)(v6 + 48) = &qword_1E9F83050;
    *(void *)(v6 + 56) = v21;
    *(void *)(v6 + 64) = qword_1E9F83190;
    *(unsigned char *)(v6 + 3456) = *v19;
    *(unsigned char *)(v6 + 3457) = *(_DWORD *)(v17 + 384 * a3 + 12 * a2 + 908);
    *(unsigned char *)(v6 + 3458) = *(_DWORD *)(v17 + 4);
  }
  else
  {
    *(void *)uint64_t v6 = &qword_1E9F82FA8;
    *(void *)(v6 + 8) = &qword_1E9F82F70;
    *(void *)(v6 + 16) = &qword_1E9F82F38;
    *(void *)(v6 + 24) = off_1F14ED7B0;
    *(void *)(v6 + 32) = &qword_1E9F82E90;
    *(void *)(v6 + 40) = &qword_1E9F82EC8;
    uint64_t v22 = qword_1E9F83168;
    *(void *)(v6 + 48) = &qword_1E9F82F00;
    *(void *)(v6 + 56) = v22;
    *(void *)(v6 + 64) = qword_1E9F83188;
  }
  return result;
}

uint64_t sub_1BBB4BB30(uint64_t result, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v6 = result;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v65 = 0;
  int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(result + 1856) + 40) + 1);
  uint64_t v8 = a2;
  if (!*(_DWORD *)(result + 3464)) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 56))(result + 3384, result + 32 * a2 + 2938);
  }
  uint64_t v9 = (int16x8_t *)(v6 + (v8 << 6));
  int16x8_t v10 = *(int16x8_t *)(v6 + 3344);
  int16x8_t v11 = *(int16x8_t *)(v6 + 3360);
  int16x8_t v12 = vminq_s16(vmaxq_s16(v9[192], v10), v11);
  int16x8_t v13 = vminq_s16(vmaxq_s16(v9[193], v10), v11);
  int16x8_t v14 = vminq_s16(vmaxq_s16(v9[194], v10), v11);
  int16x8_t v15 = vminq_s16(vmaxq_s16(v9[195], v10), v11);
  v9[192] = v12;
  v9[193] = v13;
  v9[194] = v14;
  v9[195] = v15;
  unint64_t v16 = v12.u32[0];
  unsigned int v17 = *(_DWORD *)(v6 + 3200);
  *(unsigned char *)(v6 + v8 + 2936) = 0;
  *(_DWORD *)(v6 + 3292) = 0;
  if (a4) {
    goto LABEL_24;
  }
  if (v7 != 3 && v7 != 5)
  {
    if (!*(_DWORD *)(v6 + 3464) && v12.i32[0] == *(_DWORD *)(v6 + 48 * a2 + 560))
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void, unsigned __int16 *))(v6 + 64))(v12.u32[0], v6 + 3384, *(void *)(v6 + 2928), &v65);
      *(unsigned char *)(v6 + v8 + 2936) = 1;
      int v22 = *(unsigned __int8 *)(v6 + 3886);
      if (!*(unsigned char *)(v6 + 3886)
        || *(__int16 *)(v6 + 3376) >= (__int16)v16 && *(__int16 *)(v6 + 3378) >= (int)v16 >> 16)
      {
        unint64_t v23 = v16 >> 16;
        unsigned int v24 = *(unsigned __int16 *)(*(void *)(v6 + 1824) + 2 * (__int16)v16)
            + v65
            + *(unsigned __int16 *)(*(void *)(v6 + 1832) + ((uint64_t)(v16 >> 16 << 48) >> 47));
        if (v24 < *(_DWORD *)(v6 + 3296))
        {
          *(_DWORD *)(v6 + 3296) = v24;
LABEL_30:
          *(_WORD *)(v6 + 3304) = v16;
          *(_WORD *)(v6 + 3306) = v23;
          *(_DWORD *)(v6 + 3468) = 0;
          goto LABEL_31;
        }
      }
      goto LABEL_31;
    }
    if (v7 != 5) {
      goto LABEL_24;
    }
  }
  if (!*(unsigned char *)(v6 + 3869)
    && *(unsigned char *)(v6 + 3560)
    && v12.i32[0] == *(_DWORD *)(v6 + 8 * a3 + 4 * v8 + 3476)
    && v12.i32[0] == *(_DWORD *)(v6 + 48 * a2 + 560))
  {
    int v19 = *(_DWORD *)(v6 + 3464);
    if (!v19)
    {
      uint64_t result = off_1E9F82E88(v6 + 3384, v6 + (v8 << 8) + 2416, v6 + 32 * v8 + 3002);
      int v19 = *(_DWORD *)(v6 + 3464);
    }
    uint64_t v20 = v6 + 32 * v8 + 2 * (a3 + 4 * v19);
    int v21 = *(unsigned __int16 *)(v20 + 3002);
    unsigned __int16 v65 = *(_WORD *)(v20 + 3002);
  }
  else
  {
LABEL_24:
    uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *))(*(void *)(v6 + 32)
                                                                            + 8 * *(unsigned int *)(v6 + 3464)))(v12.u32[0], v6 + 3384, &v65);
    int v21 = v65;
  }
  int v22 = *(unsigned __int8 *)(v6 + 3886);
  if (!*(unsigned char *)(v6 + 3886) || *(__int16 *)(v6 + 3376) >= (__int16)v16 && *(__int16 *)(v6 + 3378) >= (int)v16 >> 16)
  {
    unsigned int v25 = *(unsigned __int16 *)(*(void *)(v6 + 1824) + 2 * (__int16)v16)
        + v21
        + *(unsigned __int16 *)(*(void *)(v6 + 1832) + ((uint64_t)(v16 >> 16 << 48) >> 47));
    if (v25 < *(_DWORD *)(v6 + 3296))
    {
      *(_DWORD *)(v6 + 3296) = v25;
      unint64_t v23 = v16 >> 16;
      goto LABEL_30;
    }
  }
LABEL_31:
  v66[0] = 0;
  __int16 v26 = (_DWORD *)(v6 + 4 * v8);
  LODWORD(v27) = v26[816];
  if (v27 >= 2)
  {
    __int16 v28 = v26 + 816;
    unint64_t v29 = 1;
    unsigned int v30 = 1;
    while (1)
    {
      v66[v30] = v29;
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = v6 + (v8 << 6);
        unsigned __int16 v33 = (__int16 *)(v32 + 4 * v29 + 3072);
        unsigned __int16 v34 = v66;
        while (1)
        {
          unsigned int v35 = *v34++;
          unsigned __int16 v36 = (__int16 *)(v32 + 4 * v35 + 3072);
          if (*(unsigned char *)(v6 + 3872))
          {
            int v37 = *v36 - *v33;
            if (v37 < 0) {
              int v37 = *v33 - *v36;
            }
            if (v37 <= 6)
            {
              int v38 = v36[1] - *(__int16 *)(v32 + 4 * v29 + 3074);
              if (v38 < 0) {
                int v38 = *(__int16 *)(v32 + 4 * v29 + 3074) - v36[1];
              }
              if (v38 <= 6)
              {
                unsigned int v39 = 3 * *(_DWORD *)(v6 + 3288);
                if (v39 >= 0x7D0) {
                  unsigned int v39 = 2000;
                }
                if (v39 > 2 * *(_DWORD *)(v6 + 3296)) {
                  goto LABEL_71;
                }
              }
            }
          }
          int v40 = *(_DWORD *)v33;
          if (*(_DWORD *)v36 == *(_DWORD *)v33) {
            goto LABEL_71;
          }
          if (!--v31) {
            goto LABEL_49;
          }
        }
      }
      int v40 = *(_DWORD *)(v6 + (v8 << 6) + 4 * v29 + 3072);
LABEL_49:
      ++v30;
      unsigned int v17 = *(_DWORD *)(v6 + 4 * v29 + 3200);
      uint64_t v41 = *(unsigned int *)(v6 + 3464);
      if (!v41
        && (*(unsigned char *)(v6 + 3872) & 2) != 0
        && v17 >= 2
        && *(int *)(v6 + 1892) >= 2
        && *(int *)(v6 + 1896) >= 2)
      {
        int v44 = *(_DWORD *)(v6 + 3288);
        if (v44 != -1)
        {
          unsigned int v45 = 2 * v44;
          if (v45 >= 0xFA0) {
            unsigned int v45 = 4000;
          }
          if (*(_DWORD *)(v6 + 3296) < v45) {
            goto LABEL_71;
          }
        }
      }
      if (v40)
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *))(*(void *)(v6 + 32) + 8 * v41))(v40, v6 + 3384, &v65);
        int v22 = *(unsigned __int8 *)(v6 + 3886);
        if (*(unsigned char *)(v6 + 3886) && (*(__int16 *)(v6 + 3376) < (__int16)v40 || *(__int16 *)(v6 + 3378) < v40 >> 16)) {
          goto LABEL_71;
        }
        unint64_t v42 = (unint64_t)v40 >> 16;
        unsigned int v43 = *(unsigned __int16 *)(*(void *)(v6 + 1824) + 2 * (__int16)v40)
            + v65
            + *(unsigned __int16 *)(*(void *)(v6 + 1832) + 2 * (__int16)v42);
        if (v43 >= *(_DWORD *)(v6 + 3296)) {
          goto LABEL_71;
        }
      }
      else
      {
        int v46 = *(unsigned __int16 *)(v6 + 32 * v8 + 2 * (a3 + 4 * v41) + 2938);
        unsigned __int16 v65 = v46;
        if (v22 && (*(__int16 *)(v6 + 3376) < 0 || *(__int16 *)(v6 + 3378) < 0)) {
          goto LABEL_71;
        }
        unsigned int v43 = **(unsigned __int16 **)(v6 + 1824) + **(unsigned __int16 **)(v6 + 1832) + v46;
        if (v43 >= *(_DWORD *)(v6 + 3296)) {
          goto LABEL_71;
        }
        LOWORD(v40) = 0;
        LOWORD(v42) = 0;
      }
      *(_DWORD *)(v6 + 3296) = v43;
      *(_WORD *)(v6 + 3304) = v40;
      *(_WORD *)(v6 + 3306) = v42;
      *(_DWORD *)(v6 + 3468) = 0;
LABEL_71:
      ++v29;
      unint64_t v27 = *v28;
      if (v29 >= v27)
      {
        __int16 v26 = (_DWORD *)(v6 + 4 * v8);
        break;
      }
    }
  }
  v26[818] = *(_DWORD *)(v6 + 3296);
  unsigned int v47 = *(_DWORD *)(v6 + 3304);
  v26[820] = v47;
  unsigned int v48 = HIWORD(v47);
  if (*(unsigned char *)(v6 + 3873) && !*(_DWORD *)(v6 + 3464) && v27)
  {
    unsigned int v49 = 0;
    unsigned int v50 = 0;
    uint64_t v51 = v26 + 820;
    unint64_t v27 = v27;
    uint64_t v52 = (__int16 *)(v6 + (v8 << 6) + 3074);
    do
    {
      if (v17 <= 1)
      {
        int v53 = *(v52 - 1) - *(__int16 *)(v6 + 3304);
        if (v53 < 0) {
          int v53 = *(__int16 *)(v6 + 3304) - *(v52 - 1);
        }
        int v54 = *v52 - *(__int16 *)(v6 + 3306);
        if (v54 < 0) {
          int v54 = *(__int16 *)(v6 + 3306) - *v52;
        }
        v50 += v53 + v54;
        ++v49;
      }
      v52 += 2;
      --v27;
    }
    while (v27);
    if (v49 >= 3 && v50 <= 4 * v49)
    {
      unsigned int v55 = 2 * *(_DWORD *)(v6 + 3288);
      if (v55 >= 0x7D0) {
        unsigned int v55 = 2000;
      }
      if (*(_DWORD *)(v6 + 3296) < v55)
      {
        *(_DWORD *)(v6 + 3292) = 1;
        LOWORD(v47) = *v51;
        LOWORD(v48) = v51[1];
      }
    }
  }
  int v56 = ((_WORD)v47 + 2) & 0xFFFC;
  unint64_t v57 = v56 & 0x3FFFF | ((unsigned __int16)((unsigned __int16)((v48 + 2) & 0xFFFC) >> 2) << 18);
  if (v57 == *(_DWORD *)(v6 + 3304))
  {
    int v58 = *(unsigned __int8 *)(v6 + 3886);
  }
  else
  {
    int v59 = (__int16)v56;
    *(_DWORD *)(v6 + 3296) = -1;
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, unsigned __int16 *))(*(void *)(v6 + 32)
                                                                                      + 8
                                                                                      * *(unsigned int *)(v6 + 3464)))(v57, v6 + 3384, &v65);
    int v58 = *(unsigned __int8 *)(v6 + 3886);
    if (*(unsigned char *)(v6 + 3886) && (*(__int16 *)(v6 + 3376) < v59 || *(__int16 *)(v6 + 3378) < (int)v57 >> 16))
    {
      int v58 = 1;
    }
    else
    {
      unsigned int v60 = *(unsigned __int16 *)(*(void *)(v6 + 1824) + 2 * (__int16)v57)
          + v65
          + *(unsigned __int16 *)(*(void *)(v6 + 1832) + ((uint64_t)(v57 >> 16 << 48) >> 47));
      if (v60 < *(_DWORD *)(v6 + 3296))
      {
        *(_DWORD *)(v6 + 3296) = v60;
        *(_WORD *)(v6 + 3304) = v59;
        *(_WORD *)(v6 + 3306) = WORD1(v57);
        *(_DWORD *)(v6 + 3468) = 0;
      }
    }
  }
  uint64_t v61 = v6 + 32 * v8;
  int v62 = *(unsigned __int16 *)(v61 + 2 * (a3 + 4 * *(_DWORD *)(v6 + 3464)) + 2938);
  unsigned __int16 v65 = *(_WORD *)(v61 + 2 * (a3 + 4 * *(_DWORD *)(v6 + 3464)) + 2938);
  if (!v58 || (*(__int16 *)(v6 + 3376) & 0x80000000) == 0 && (*(__int16 *)(v6 + 3378) & 0x80000000) == 0)
  {
    unsigned int v63 = **(unsigned __int16 **)(v6 + 1824) + **(unsigned __int16 **)(v6 + 1832) + v62;
    if (v63 < *(_DWORD *)(v6 + 3296))
    {
      *(_DWORD *)(v6 + 3296) = v63;
      *(_DWORD *)(v6 + 3304) = 0;
      *(_DWORD *)(v6 + 3468) = 0;
    }
  }
  return result;
}

uint64_t sub_1BBB4C220(uint64_t result, unsigned int a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(result + 3292))
  {
    uint64_t v2 = result;
    int64x2_t v64 = 0uLL;
    __int16 v3 = *(_WORD *)(result + 3306);
    __int16 v4 = *(_WORD *)(result + 3304);
    uint64_t v5 = result + 3384;
    uint64_t v6 = *(void *)(result + 3408)
       + *(int *)(result + 3400) * (*(int *)(result + 3388) + (uint64_t)(v3 >> 2))
       + *(int *)(result + 3384)
       + (uint64_t)(v4 >> 2);
    int v7 = (unint64_t *)(result + 3696);
    *(void *)(result + 3696) = v6;
    *(_DWORD *)(result + 3468) = -2;
    uint64_t v8 = v6 + *(int *)(result + 3828);
    uint64_t v9 = v6 + *(int *)(result + 3820);
    v63.i64[0] = v6 + *(int *)(result + 3824);
    v63.i64[1] = v8;
    uint64_t v10 = v6 + *(int *)(result + 3812);
    v61.i64[0] = v6 + *(int *)(result + 3808);
    v61.i64[1] = v10;
    v62.i64[0] = v6 + *(int *)(result + 3816);
    v62.i64[1] = v9;
    (*(void (**)(int64x2_t *, uint64_t, unsigned __int16 *))(*(void *)(result + 8)
                                                                     + 8 * *(unsigned int *)(result + 3464)))(&v61, result + 3384, &v66);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = *(unsigned __int8 *)(v2 + 3886);
    do
    {
      int16x8_t v15 = (_WORD *)((char *)v65 + v12);
      *int16x8_t v15 = *(_WORD *)((char *)&unk_1BBB8D548 + v12 + 4) + v4;
      v15[1] = *(_WORD *)((char *)&unk_1BBB8D548 + v12 + 6) + v3;
      unint64_t v16 = *(unsigned int *)((char *)v65 + v12);
      if (!v14 || *(__int16 *)(v2 + 3376) >= (__int16)v16 && *(__int16 *)(v2 + 3378) >= (int)v16 >> 16)
      {
        unsigned int v17 = *(unsigned __int16 *)(*(void *)(v2 + 1824) + 2 * (__int16)v16)
            + *(&v66 + v13)
            + *(unsigned __int16 *)(*(void *)(v2 + 1832) + ((uint64_t)(v16 >> 16 << 48) >> 47));
        if (v17 < *(_DWORD *)(v2 + 3296))
        {
          *(_DWORD *)(v2 + 3296) = v17;
          *(_DWORD *)(v2 + 3304) = v16;
          *(_DWORD *)(v2 + 3468) = v13;
        }
      }
      ++v13;
      v12 += 4;
    }
    while (v13 != 6);
    int v18 = *(_DWORD *)(v2 + 3468);
    if (v18 == -2) {
      unint64_t v19 = *v7;
    }
    else {
      unint64_t v19 = *(void *)(v2 + 3696) + *(int *)(v2 + 4 * (v18 + 1) + 3804);
    }
    *(void *)(v2 + 3696) = v19;
    if (*(_DWORD *)(v2 + 3308) >= 2u)
    {
      for (unsigned int i = 1; i < *(_DWORD *)(v2 + 3308); ++i)
      {
        if (v18 == -2) {
          break;
        }
        uint64_t v21 = dword_1BBB8D508[v18 + 1];
        *(_DWORD *)(v2 + 3468) = -2;
        LOWORD(v11) = *(_WORD *)(v2 + 3304);
        WORD2(v11) = *(_WORD *)(v2 + 3306);
        int v22 = (_WORD *)((char *)&unk_1BBB8D548 + 4 * (int)v21 + 8);
        __int16 v23 = WORD2(v11);
        __int16 v24 = *v22 + v11;
        *(int16x4_t *)&long long v11 = vadd_s16(*(int16x4_t *)((char *)&unk_1BBB8D548 + 4 * v21), vuzp1_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v11));
        long long v60 = v11;
        *(void *)&v65[0] = v11;
        WORD4(v65[0]) = v24;
        WORD5(v65[0]) = v22[1] + v23;
        unint64_t v25 = v19 + *(int *)(v2 + 3804 + 4 * ((int)v21 + 1));
        v61.i64[0] = v19 + *(int *)(v2 + 3804 + 4 * v21);
        v61.i64[1] = v25;
        v62.i64[0] = v19 + *(int *)(v2 + 3804 + 4 * ((int)v21 + 2));
        (*(void (**)(int64x2_t *, uint64_t, unsigned __int16 *))(*(void *)(v2 + 40)
                                                                         + 8 * *(unsigned int *)(v2 + 3464)))(&v61, v5, &v66);
        long long v11 = v60;
        int v26 = *(unsigned __int8 *)(v2 + 3886);
        if (*(unsigned char *)(v2 + 3886)
          && ((int v27 = *(__int16 *)(v2 + 3376), v27 < (__int16)v60) || *(__int16 *)(v2 + 3378) < (int)v60 >> 16))
        {
          int v28 = v67;
          unint64_t v29 = (unint64_t)DWORD1(v60) >> 16;
        }
        else
        {
          uint64_t v30 = *(void *)(v2 + 1824);
          uint64_t v31 = *(void *)(v2 + 1832);
          unsigned int v32 = *(unsigned __int16 *)(v30 + 2 * (__int16)v60) + v66 + *(unsigned __int16 *)(v31 + 2 * SWORD1(v60));
          unsigned int v33 = *(_DWORD *)(v2 + 3296);
          if (v32 < v33)
          {
            *(_DWORD *)(v2 + 3296) = v32;
            *(_DWORD *)(v2 + 3304) = v60;
            *(_DWORD *)(v2 + 3468) = v21 - 1;
            unsigned int v33 = v32;
          }
          int v28 = v67;
          unint64_t v29 = (unint64_t)DWORD1(v60) >> 16;
          if (!v26) {
            goto LABEL_27;
          }
          LOWORD(v27) = *(_WORD *)(v2 + 3376);
        }
        if ((__int16)v27 < SWORD2(v60) || *(__int16 *)(v2 + 3378) < (__int16)v29)
        {
          __int16 v34 = WORD4(v65[0]);
          int v35 = v68;
          unint64_t v36 = (unint64_t)DWORD2(v65[0]) >> 16;
          goto LABEL_31;
        }
        uint64_t v30 = *(void *)(v2 + 1824);
        uint64_t v31 = *(void *)(v2 + 1832);
        unsigned int v33 = *(_DWORD *)(v2 + 3296);
LABEL_27:
        unsigned int v37 = *(unsigned __int16 *)(v30 + 2 * SWORD2(v60)) + v28 + *(unsigned __int16 *)(v31 + 2 * (__int16)v29);
        if (v37 < v33)
        {
          *(_DWORD *)(v2 + 3296) = v37;
          *(_WORD *)(v2 + 3304) = WORD2(v60);
          *(_WORD *)(v2 + 3306) = v29;
          unsigned int v33 = v37;
          *(_DWORD *)(v2 + 3468) = v21;
        }
        __int16 v34 = WORD4(v65[0]);
        int v35 = v68;
        unint64_t v36 = (unint64_t)DWORD2(v65[0]) >> 16;
        if (!v26) {
          goto LABEL_34;
        }
        LOWORD(v27) = *(_WORD *)(v2 + 3376);
LABEL_31:
        if ((__int16)v27 >= v34 && *(__int16 *)(v2 + 3378) >= (__int16)v36)
        {
          uint64_t v30 = *(void *)(v2 + 1824);
          uint64_t v31 = *(void *)(v2 + 1832);
          unsigned int v33 = *(_DWORD *)(v2 + 3296);
LABEL_34:
          unsigned int v38 = *(unsigned __int16 *)(v30 + 2 * v34) + v35 + *(unsigned __int16 *)(v31 + 2 * (__int16)v36);
          if (v38 < v33)
          {
            *(_DWORD *)(v2 + 3296) = v38;
            *(_WORD *)(v2 + 3304) = v34;
            *(_WORD *)(v2 + 3306) = v36;
            *(_DWORD *)(v2 + 3468) = v21 + 1;
          }
        }
        int v18 = *(_DWORD *)(v2 + 3468);
        unsigned int v39 = &v61.u64[v18 - (int)v21 + 1];
        if (v18 == -2) {
          unsigned int v39 = v7;
        }
        unint64_t v19 = *v39;
        *(void *)(v2 + 3696) = v19;
      }
    }
    *(_DWORD *)(v2 + 3468) = -2;
    int v40 = (const __int16 *)(v2 + 3304);
    int16x8_t v41 = vld1q_dup_s16(v40);
    unint64_t v42 = (const __int16 *)(v2 + 3306);
    int16x8_t v43 = vld1q_dup_s16(v42);
    int16x8_t v44 = vaddq_s16(v43, (int16x8_t)xmmword_1BBB70050);
    int16x8_t v45 = vaddq_s16(v41, (int16x8_t)xmmword_1BBB70040);
    v65[0] = vzip1q_s16(v45, v44);
    v65[1] = vzip2q_s16(v45, v44);
    int32x4_t v46 = *(int32x4_t *)(v2 + 3836);
    int32x4_t v47 = *(int32x4_t *)(v2 + 3852);
    int64x2_t v48 = vdupq_n_s64(v19);
    int64x2_t v63 = vaddw_s32(v48, *(int32x2_t *)v47.i8);
    int64x2_t v64 = vaddw_high_s32(v48, v47);
    int64x2_t v61 = vaddw_s32(v48, *(int32x2_t *)v46.i8);
    int64x2_t v62 = vaddw_high_s32(v48, v46);
    uint64_t result = (*(uint64_t (**)(int64x2_t *, uint64_t, unsigned __int16 *))(*(void *)v2
                                                                                 + 8 * *(unsigned int *)(v2 + 3464)))(&v61, v5, &v66);
    uint64_t v49 = 0;
    int v50 = *(unsigned __int8 *)(v2 + 3886);
    do
    {
      unint64_t v51 = *((unsigned int *)v65 + v49);
      if (!v50 || *(__int16 *)(v2 + 3376) >= (__int16)v51 && *(__int16 *)(v2 + 3378) >= (int)v51 >> 16)
      {
        unsigned int v52 = *(unsigned __int16 *)(*(void *)(v2 + 1824) + 2 * (__int16)v51)
            + *(&v66 + v49)
            + *(unsigned __int16 *)(*(void *)(v2 + 1832) + ((uint64_t)(v51 >> 16 << 48) >> 47));
        if (v52 < *(_DWORD *)(v2 + 3296))
        {
          *(_DWORD *)(v2 + 3296) = v52;
          *(_DWORD *)(v2 + 3304) = v51;
          *(_DWORD *)(v2 + 3468) = v49;
        }
      }
      ++v49;
    }
    while (v49 != 8);
    uint64_t v53 = *(void *)(v2 + 1856);
    if (*(_DWORD *)(v53 + 2652))
    {
      __int16 v54 = 16 * *(_WORD *)(v53 + 4);
      if (*(_DWORD *)(v53 + 2656))
      {
        *(void *)(v2 + 3312) = 0;
        *(_DWORD *)(v2 + 4 * a2 + 3272) = -1;
        int v55 = *(__int16 *)(v2 + 3306) + v54;
        int v56 = *(_DWORD *)(v53 + 2676);
        if (v55 + 15 <= v56)
        {
          int v57 = *(_DWORD *)(v53 + 2672);
LABEL_53:
          if (v55 >= v57) {
            return result;
          }
          __int16 v58 = v57 - v54;
          goto LABEL_55;
        }
      }
      else
      {
        int v55 = *(__int16 *)(v2 + 3306) + v54;
        int v56 = *(_DWORD *)(v53 + 2668);
        if (v55 + 15 <= v56)
        {
          int v57 = *(_DWORD *)(v53 + 2664);
          goto LABEL_53;
        }
      }
      __int16 v58 = v56 - v54 - 15;
LABEL_55:
      *(_WORD *)(v2 + 3306) = v58;
    }
  }
  return result;
}

uint64_t sub_1BBB4C804(uint64_t a1, unsigned int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(_DWORD *)(a1 + 4 * a2 + 3272);
  if (v3 < *(_DWORD *)(a1 + 3296))
  {
    *(_DWORD *)(a1 + 3296) = v3;
    *(_DWORD *)(a1 + 3304) = *(_DWORD *)(a1 + 4 * a2 + 3280);
  }
  if (*(_DWORD *)(a1 + 3316))
  {
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = *(unsigned __int16 *)(a1 + 3304);
      uint64_t v6 = *(unsigned __int16 *)(a1 + 3306);
      (*(void (**)(uint64_t, uint64_t, _WORD *))(*(void *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 3464)))(v5 | (v6 << 16), a1 + 3384, v20);
      uint64_t v7 = 0;
      int v8 = *(unsigned __int8 *)(a1 + 3886);
      do
      {
        uint64_t v9 = (_WORD *)((char *)&unk_1BBB8D568 + 1 * v7);
        int v10 = (__int16)(*v9 + v5);
        int v11 = (__int16)(v9[1] + v6);
        if (!v8 || *(__int16 *)(a1 + 3376) >= v10 && *(__int16 *)(a1 + 3378) >= v11)
        {
          unsigned int v12 = *(unsigned __int16 *)(*(void *)(a1 + 1824) + 2 * v10)
              + (unsigned __int16)v20[v7]
              + *(unsigned __int16 *)(*(void *)(a1 + 1832) + 2 * v11);
          if (v12 < *(_DWORD *)(a1 + 3296))
          {
            *(_DWORD *)(a1 + 3296) = v12;
            *(_WORD *)(a1 + 3304) = v10;
            *(_WORD *)(a1 + 3306) = v11;
            *(_DWORD *)(a1 + 3468) = 0;
          }
        }
        ++v7;
      }
      while (v7 != 4);
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 3316));
  }
  *(_DWORD *)(a1 + 3296) = -1;
  uint64_t v13 = *(unsigned __int16 *)(a1 + 3304);
  __int16 v14 = *(_WORD *)(a1 + 3304);
  uint64_t v15 = *(unsigned __int16 *)(a1 + 3306);
  __int16 v16 = *(_WORD *)(a1 + 3306);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *))(*(void *)(a1 + 24)
                                                                + 8 * *(unsigned int *)(a1 + 3464)))(v13 | (v15 << 16), a1 + 3384, v20);
  __int16 v18 = v20[0];
  if (!*(unsigned char *)(a1 + 3886) || *(__int16 *)(a1 + 3376) >= (__int16)v13 && *(__int16 *)(a1 + 3378) >= (__int16)v15)
  {
    unsigned int v19 = *(unsigned __int16 *)(*(void *)(a1 + 1824) + 2 * (__int16)v13)
        + v20[0]
        + *(unsigned __int16 *)(*(void *)(a1 + 1832) + 2 * (__int16)v15);
    if (v19 < *(_DWORD *)(a1 + 3296))
    {
      *(_DWORD *)(a1 + 3296) = v19;
      *(_WORD *)(a1 + 3304) = v14;
      *(_WORD *)(a1 + 3306) = v16;
      *(_DWORD *)(a1 + 3468) = 0;
      *(_WORD *)(a1 + 3300) = v18;
    }
  }
  return result;
}

uint64_t sub_1BBB4CA04(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1856);
  int v2 = *(unsigned __int8 *)(*(void *)(v1 + 40) + 1);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(unsigned int *)(result + 1864);
  uint64_t v5 = v3 + 32 * v4;
  *(_WORD *)(v5 + 24) = 8224;
  uint64_t v6 = (unsigned char *)(v5 + 24);
  *(_WORD *)(v5 + 27) = 0;
  int v7 = *(_DWORD *)(result + 128);
  int v8 = *(_DWORD *)(result + 608);
  int v9 = *(_DWORD *)(result + 1040)
     - (*(unsigned __int16 *)(*(void *)(result + 1816)
                            + 2 * ((__int16)*(_DWORD *)(result + 80) - (__int16)*(_DWORD *)(result + 560)))
      + *(unsigned __int16 *)(*(void *)(result + 1816)
                            + 2 * ((*(int *)(result + 80) >> 16) - (*(int *)(result + 560) >> 16))));
  *(_DWORD *)(v5 + 8) = v9 & ~(v9 >> 31);
  if (v2 != 3 && v2 != 5)
  {
    *(_DWORD *)uint64_t v5 = *(_DWORD *)(result + 80);
    *(unsigned char *)(v5 + 26) = 4;
LABEL_10:
    *uint64_t v6 = 0;
    goto LABEL_11;
  }
  *(_DWORD *)uint64_t v5 = *(_DWORD *)(result + 80);
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(result + 128);
  int v11 = *(unsigned __int8 *)(result + 3561);
  *(unsigned char *)(v5 + 26) = v11 + 3;
  uint64_t v12 = *(void *)(result + 1816);
  int v13 = *(unsigned __int16 *)(v12 + 2 * ((__int16)v7 - (__int16)v8));
  int v14 = *(unsigned __int16 *)(v12 + 2 * ((v7 >> 16) - (v8 >> 16)));
  *(_DWORD *)(v5 + 12) = (*(_DWORD *)(result + 1088) - (v13 + v14)) & ~((*(_DWORD *)(result + 1088) - (v13 + v14)) >> 31);
  if (v11 != 2)
  {
    if (v11 == 1) {
      goto LABEL_10;
    }
    *uint64_t v6 = 0;
  }
  *(unsigned char *)(v5 + 25) = 0;
LABEL_11:
  *(_DWORD *)(v3 + 32 * v4 + 16) = *(_DWORD *)(*(void *)(*(void *)(result + 1856) + 216) + 1332)
                                 - *(_DWORD *)(**(void **)(*(void *)(result + 1856) + 224) + 1332);
  return result;
}

int32x2_t *sub_1BBB4CB1C(int32x2_t *result, int a2)
{
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  int32x2_t v2 = result[232];
  int v3 = *(unsigned __int8 *)(*(void *)(*(void *)&v2 + 40) + 1);
  int v4 = *(_DWORD *)(*(void *)&v2 + 20);
  int v5 = *(_DWORD *)(*(void *)&v2 + 84);
  v230[0] = 1;
  v230[1] = v4;
  int v6 = v4 - 1;
  v230[2] = v4 - 1;
  v230[3] = v4 + 1;
  int v7 = result + 384;
  if (v3 == 3 || v3 == 5)
  {
    if (!a2)
    {
      if (result[438].i32[1] != 32)
      {
        v7->i16[2 * result[408].u32[0]] = result[434].i16[2];
        v7->i16[2 * result[408].i32[0]++ + 1] = result[434].i16[3];
      }
      if (result[439].i32[0] != 32)
      {
        result[392].i16[2 * result[408].u32[1]] = result[435].i16[0];
        result[392].i16[2 * result[408].i32[1]++ + 1] = result[435].i16[1];
      }
    }
    uint64_t v9 = 0;
    int v10 = (char *)&result[384] + 2;
    int v11 = (char *)result + 2;
    __int32 v12 = result[233].i32[0];
    __int32 v13 = result[237].i32[1];
    int v14 = a2 + 1;
    while (1)
    {
      __int32 v15 = v12 - v230[v9];
      if (v15 >= v13)
      {
        if (v9 == 2)
        {
          if (result[236].i32[1] != v6) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v9 == 1) {
            goto LABEL_21;
          }
          if (v9)
          {
            if (!result[236].i32[1]) {
              goto LABEL_30;
            }
LABEL_21:
            uint64_t v16 = *(void *)(*(void *)&v2 + 72);
            uint64_t v17 = v15;
            __int16 v18 = (__int16 *)(v16 + 32 * v15);
            if (!*((unsigned char *)v18 + 27))
            {
              int v19 = *((unsigned __int8 *)v18 + 26);
              switch(v19)
              {
                case 6:
                  uint64_t v21 = v16 + 32 * v17;
                  v7->i16[2 * result[408].u32[0]] = v14 * *v18 / (*(unsigned __int8 *)(v21 + 24) + 1);
                  *(_WORD *)&v10[4 * result[408].u32[0]] = v14 * v18[1] / (*(unsigned __int8 *)(v21 + 24) + 1);
                  result[392].i16[2 * result[408].u32[1]] = v14 * v18[2] / (*(unsigned __int8 *)(v21 + 25) + 1);
                  *(_WORD *)&v11[4 * result[408].u32[1] + 3136] = v14 * v18[3] / (*(unsigned __int8 *)(v21 + 25) + 1);
                  result[408] = vadd_s32(result[408], (int32x2_t)0x100000001);
                  break;
                case 5:
                  uint64_t v22 = v16 + 32 * v17;
                  result[392].i16[2 * result[408].u32[1]] = v14 * v18[2] / (*(unsigned __int8 *)(v22 + 25) + 1);
                  *(_WORD *)&v11[4 * result[408].i32[1]++ + 3136] = v14 * v18[3] / (*(unsigned __int8 *)(v22 + 25) + 1);
                  break;
                case 4:
                  uint64_t v20 = v16 + 32 * v17;
                  v7->i16[2 * result[408].u32[0]] = v14 * *v18 / (*(unsigned __int8 *)(v20 + 24) + 1);
                  *(_WORD *)&v10[4 * result[408].i32[0]++] = v14 * v18[1] / (*(unsigned __int8 *)(v20 + 24) + 1);
                  break;
              }
            }
            goto LABEL_22;
          }
          if (result[236].i32[1]) {
            goto LABEL_21;
          }
        }
      }
LABEL_22:
      if (++v9 == 4)
      {
LABEL_30:
        uint64_t v23 = **(void **)(*(void *)&v2 + 224);
        if (!v23) {
          goto LABEL_285;
        }
        uint64_t v24 = *(void *)(*(void *)&v2 + 216);
        if (*(_DWORD *)(v24 + 1332) - *(_DWORD *)(v23 + 1332) > *(_DWORD *)(v24 + 1336)) {
          goto LABEL_285;
        }
        uint64_t v25 = *(void *)(v23 + 5016);
        if (!v25) {
          goto LABEL_285;
        }
        uint64_t v26 = v23 + 19120;
        uint64_t v27 = v24 + 19112;
        int v28 = *(unsigned __int16 *)(v23 + 19120);
        int v29 = *(unsigned __int16 *)(v24 + 19112);
        if (v28 == v29)
        {
          int v228 = *(unsigned __int16 *)(v27 + 2);
          int v229 = *(unsigned __int16 *)(v26 + 2);
          if (v229 == v228)
          {
            unsigned int v30 = result[485].u8[5];
            if (result[485].i8[5])
            {
              unint64_t v31 = 0;
              __int32 v32 = result[236].i32[1];
              __int32 v33 = result[237].i32[0];
              do
              {
                uint64_t v240 = 0x100000000;
                int v241 = v4;
                int v242 = -1;
                int v243 = v4 + 1;
                int v244 = v4 - 1;
                uint64_t v231 = 0x100000000;
                int v232 = v4;
                int v233 = -1;
                int v234 = -v4;
                int v235 = v4 + 1;
                int v236 = v4 - 1;
                int v237 = 1 - v4;
                int v238 = ~v4;
                int v239 = 0;
                if (result[484].i8[2]) {
                  __int16 v34 = &v231;
                }
                else {
                  __int16 v34 = &v240;
                }
                uint64_t v35 = (v12 - *((_DWORD *)v34 + v31));
                BOOL v36 = v31 == 1 && v32 == 0;
                if (result[484].i8[2])
                {
                  char v37 = v36;
                  BOOL v39 = v31 == 3 && v6 == v32;
                  if ((v35 & 0x80000000) == 0 && (int)v35 < v5 * v4 && (v37 & 1) == 0 && !v39)
                  {
                    BOOL v40 = v31 == 4 && v5 - 1 == v33;
                    BOOL v41 = v40;
                    BOOL v42 = !v32 && v31 == 5;
                    if (!v42 && !v41)
                    {
                      BOOL v43 = v31 == 7 && v32 == 0;
                      BOOL v44 = v43;
                      BOOL v45 = v31 == 8 || v31 == 6;
                      BOOL v46 = v45 && v6 == v32;
                      if (!v46 && !v44) {
                        goto LABEL_102;
                      }
                    }
                  }
                }
                else
                {
                  char v47 = v36;
                  if ((v35 & 0x80000000) == 0 && (v47 & 1) == 0)
                  {
                    BOOL v48 = v31 == 4 && v32 == 0;
                    BOOL v49 = v48;
                    BOOL v50 = v31 == 5 || v31 == 3;
                    BOOL v51 = v50 && v6 == v32;
                    if (!v51 && !v49)
                    {
LABEL_102:
                      unsigned int v52 = (__int16 *)(v25 + 32 * v35);
                      if (!*((unsigned char *)v52 + 27) && (*((unsigned __int8 *)v52 + 26) | 2) == 6)
                      {
                        uint64_t v53 = v25 + 32 * v35;
                        if (!*(unsigned char *)(v53 + 28))
                        {
                          int v54 = *(_DWORD *)(v53 + 16);
                          if (v54 < 1)
                          {
                            v7->i32[result[408].u32[0]] = *(_DWORD *)v52;
                          }
                          else
                          {
                            int v55 = *(_DWORD *)(*(void *)(*(void *)&v2 + 216) + 1332)
                                - *(_DWORD *)(**(void **)(*(void *)&v2 + 224) + 1332);
                            v7->i16[2 * result[408].u32[0]] = v55 * *v52 / v54;
                            *(_WORD *)&v10[4 * result[408].u32[0]] = v55 * v52[1] / v54;
                          }
                          ++result[408].i32[0];
                          unsigned int v30 = result[485].u8[5];
                        }
                      }
                    }
                  }
                }
                ++v31;
              }
              while (v31 < v30);
            }
LABEL_285:
            uint64_t v132 = **(void **)(*(void *)&v2 + 232);
            if (!v132) {
              return result;
            }
            uint64_t v133 = *(void *)(*(void *)&v2 + 216);
            if (*(_DWORD *)(v133 + 1332) - *(_DWORD *)(v132 + 1332) > *(_DWORD *)(v133 + 1336)) {
              return result;
            }
            uint64_t v134 = *(void *)(v132 + 5016);
            if (!v134) {
              return result;
            }
            uint64_t v135 = v132 + 19120;
            uint64_t v136 = v133 + 19112;
            int v137 = *(unsigned __int16 *)(v132 + 19120);
            int v138 = *(unsigned __int16 *)(v133 + 19112);
            if (v137 == v138)
            {
              int v139 = *(unsigned __int16 *)(v135 + 2);
              int v140 = *(unsigned __int16 *)(v136 + 2);
              if (v139 == v140)
              {
                unsigned int v141 = result[485].u8[5];
                if (!result[485].i8[5]) {
                  return result;
                }
                uint64_t v142 = 0;
                __int32 v143 = result[236].i32[1];
                __int32 v144 = result[237].i32[0];
                int v145 = v5 * v4;
                int v146 = v5 - 1;
                while (2)
                {
                  uint64_t v240 = 0x100000000;
                  int v241 = v4;
                  int v242 = -1;
                  int v243 = v4 + 1;
                  int v244 = v4 - 1;
                  uint64_t v231 = 0x100000000;
                  int v232 = v4;
                  int v233 = -1;
                  int v234 = -v4;
                  int v235 = v4 + 1;
                  int v236 = v4 - 1;
                  int v237 = 1 - v4;
                  int v238 = ~v4;
                  int v239 = 0;
                  if (result[484].i8[2]) {
                    int v147 = &v231;
                  }
                  else {
                    int v147 = &v240;
                  }
                  uint64_t v148 = (v12 - *((_DWORD *)v147 + v142));
                  BOOL v149 = v142 == 1 && v143 == 0;
                  if (result[484].i8[2])
                  {
                    char v150 = v149;
                    BOOL v152 = v142 == 3 && v6 == v143;
                    if ((v148 & 0x80000000) != 0 || (int)v148 >= v145 || (v150 & 1) != 0 || v152) {
                      goto LABEL_364;
                    }
                    BOOL v153 = v142 == 4 && v146 == v144;
                    BOOL v154 = v153;
                    BOOL v155 = !v143 && v142 == 5;
                    if (v155 || v154) {
                      goto LABEL_364;
                    }
                    BOOL v156 = v142 == 7 && v143 == 0;
                    BOOL v157 = v156;
                    BOOL v158 = v142 == 8 || v142 == 6;
                    BOOL v159 = v158 && v6 == v143;
                    if (v159 || v157) {
                      goto LABEL_364;
                    }
LABEL_357:
                    uint64_t v165 = v134 + 32 * v148;
                    if (!*(unsigned char *)(v165 + 27) && *(unsigned __int8 *)(v165 + 26) - 5 <= 1)
                    {
                      uint64_t v166 = v134 + 32 * v148;
                      if (!*(unsigned char *)(v166 + 28))
                      {
                        int v167 = *(_DWORD *)(v166 + 16);
                        if (v167 < 1)
                        {
                          result[392].i16[2 * result[408].u32[1]] = -*(_WORD *)(v165 + 4);
                          LOWORD(v169) = *(_WORD *)(v165 + 6);
                        }
                        else
                        {
                          int v168 = *(_DWORD *)(*(void *)(*(void *)&v2 + 216) + 1332)
                               - *(_DWORD *)(**(void **)(*(void *)&v2 + 232) + 1332);
                          result[392].i16[2 * result[408].u32[1]] = -(__int16)(v168 * *(__int16 *)(v165 + 4) / v167);
                          int v169 = v168 * *(__int16 *)(v165 + 6) / v167;
                        }
                        *(_WORD *)&v11[4 * result[408].i32[1]++ + 3136] = -(__int16)v169;
                        unsigned int v141 = result[485].u8[5];
                      }
                    }
                  }
                  else
                  {
                    char v160 = v149;
                    if ((v148 & 0x80000000) == 0 && (v160 & 1) == 0)
                    {
                      BOOL v161 = v142 == 4 && v143 == 0;
                      BOOL v162 = v161;
                      BOOL v163 = v142 == 5 || v142 == 3;
                      BOOL v164 = v163 && v6 == v143;
                      if (!v164 && !v162) {
                        goto LABEL_357;
                      }
                    }
                  }
LABEL_364:
                  if (++v142 >= (unint64_t)v141) {
                    return result;
                  }
                  continue;
                }
              }
            }
            else
            {
              int v140 = *(unsigned __int16 *)(v136 + 2);
              int v139 = *(unsigned __int16 *)(v135 + 2);
            }
            unsigned int v170 = result[485].u8[5];
            if (!result[485].i8[5]) {
              return result;
            }
            uint64_t v171 = 0;
            int v172 = ((16 * result[236].i32[1]) | 8) * v137 / (16 * v138);
            int v173 = ((16 * result[237].i32[0]) | 8) * v139 / (16 * v140);
            int v174 = v5 * v4;
            int v175 = v5 - 1;
            while (2)
            {
              uint64_t v240 = 0x100000000;
              int v241 = v4;
              int v242 = -1;
              int v243 = v4 + 1;
              int v244 = v4 - 1;
              uint64_t v231 = 0x100000000;
              int v232 = v4;
              int v233 = -1;
              int v234 = -v4;
              int v235 = v4 + 1;
              int v236 = v4 - 1;
              int v237 = 1 - v4;
              int v238 = ~v4;
              int v239 = 0;
              if (result[484].i8[2]) {
                size_t v176 = &v231;
              }
              else {
                size_t v176 = &v240;
              }
              uint64_t v177 = (v172 + v173 * v4 - *((_DWORD *)v176 + v171));
              if (v172) {
                BOOL v178 = 0;
              }
              else {
                BOOL v178 = v171 == 1;
              }
              if (result[484].i8[2])
              {
                char v179 = v178;
                BOOL v181 = v6 == v172 && v171 == 3;
                if ((v177 & 0x80000000) != 0 || (int)v177 >= v174 || (v179 & 1) != 0 || v181) {
                  goto LABEL_441;
                }
                BOOL v182 = !v172 && v171 == 5;
                BOOL v183 = v182;
                BOOL v184 = v175 == v173 && v171 == 4;
                if (v184 || v183) {
                  goto LABEL_441;
                }
                BOOL v185 = v171 == 6 || v171 == 8;
                BOOL v186 = v185 && v6 == v172;
                BOOL v187 = v186;
                BOOL v188 = v171 == 7 && v172 == 0;
                if (v188 || v187) {
                  goto LABEL_441;
                }
LABEL_434:
                uint64_t v194 = v134 + 32 * v177;
                if (!*(unsigned char *)(v194 + 27) && *(unsigned __int8 *)(v194 + 26) - 5 <= 1)
                {
                  uint64_t v195 = v134 + 32 * v177;
                  if (!*(unsigned char *)(v195 + 28))
                  {
                    int v196 = *(_DWORD *)(v195 + 16);
                    if (v196 < 1)
                    {
                      result[392].i16[2 * result[408].u32[1]] = -(__int16)(*(__int16 *)(v194 + 4) * v138 / v137);
                      int v198 = *(__int16 *)(v194 + 6) * v140;
                    }
                    else
                    {
                      int v197 = *(_DWORD *)(*(void *)(*(void *)&v2 + 216) + 1332)
                           - *(_DWORD *)(**(void **)(*(void *)&v2 + 232) + 1332);
                      result[392].i16[2 * result[408].u32[1]] = -(__int16)(v197
                                                                         * v138
                                                                         / v196
                                                                         * *(__int16 *)(v194 + 4)
                                                                         / v137);
                      int v198 = v197 * v140 / v196 * *(__int16 *)(v194 + 6);
                    }
                    *(_WORD *)&v11[4 * result[408].i32[1]++ + 3136] = -(__int16)(v198 / v139);
                    unsigned int v170 = result[485].u8[5];
                  }
                }
              }
              else
              {
                char v189 = v178;
                if ((v177 & 0x80000000) == 0 && (v189 & 1) == 0)
                {
                  BOOL v190 = v171 == 3 || v171 == 5;
                  BOOL v191 = v190 && v6 == v172;
                  BOOL v192 = v191;
                  BOOL v193 = v171 == 4 && v172 == 0;
                  if (!v193 && !v192) {
                    goto LABEL_434;
                  }
                }
              }
LABEL_441:
              if (++v171 >= (unint64_t)v170) {
                return result;
              }
              continue;
            }
          }
        }
        else
        {
          int v228 = *(unsigned __int16 *)(v27 + 2);
          int v229 = *(unsigned __int16 *)(v26 + 2);
        }
        unsigned int v105 = result[485].u8[5];
        if (!result[485].i8[5]) {
          goto LABEL_285;
        }
        uint64_t v106 = 0;
        int v107 = ((16 * result[236].i32[1]) | 8) * v28 / (16 * v29);
        int v108 = ((16 * result[237].i32[0]) | 8) * v229 / (16 * v228);
        while (2)
        {
          uint64_t v240 = 0x100000000;
          int v241 = v4;
          int v242 = -1;
          int v243 = v4 + 1;
          int v244 = v4 - 1;
          uint64_t v231 = 0x100000000;
          int v232 = v4;
          int v233 = -1;
          int v234 = -v4;
          int v235 = v4 + 1;
          int v236 = v4 - 1;
          int v237 = 1 - v4;
          int v238 = ~v4;
          int v239 = 0;
          if (result[484].i8[2]) {
            uint64_t v109 = &v231;
          }
          else {
            uint64_t v109 = &v240;
          }
          uint64_t v110 = (v107 + v108 * v4 - *((_DWORD *)v109 + v106));
          if (v107) {
            BOOL v111 = 0;
          }
          else {
            BOOL v111 = v106 == 1;
          }
          if (result[484].i8[2])
          {
            char v112 = v111;
            BOOL v114 = v6 == v107 && v106 == 3;
            if ((v110 & 0x80000000) != 0 || (int)v110 >= v5 * v4 || (v112 & 1) != 0 || v114) {
              goto LABEL_284;
            }
            BOOL v115 = !v107 && v106 == 5;
            BOOL v116 = v115;
            BOOL v117 = v5 - 1 == v108 && v106 == 4;
            if (v117 || v116) {
              goto LABEL_284;
            }
            BOOL v118 = v106 == 6 || v106 == 8;
            BOOL v119 = v118 && v6 == v107;
            BOOL v120 = v119;
            BOOL v121 = v106 == 7 && v107 == 0;
            if (v121 || v120) {
              goto LABEL_284;
            }
LABEL_277:
            uint64_t v127 = (__int16 *)(v25 + 32 * v110);
            if (!*((unsigned char *)v127 + 27) && (*((unsigned __int8 *)v127 + 26) | 2) == 6)
            {
              uint64_t v128 = v25 + 32 * v110;
              if (!*(unsigned char *)(v128 + 28))
              {
                int v129 = *(_DWORD *)(v128 + 16);
                if (v129 < 1)
                {
                  v7->i16[2 * result[408].u32[0]] = *v127 * v29 / v28;
                  int v131 = v127[1] * v228;
                }
                else
                {
                  int v130 = *(_DWORD *)(*(void *)(*(void *)&v2 + 216) + 1332)
                       - *(_DWORD *)(**(void **)(*(void *)&v2 + 224) + 1332);
                  v7->i16[2 * result[408].u32[0]] = v130 * v29 / v129 * *v127 / v28;
                  int v131 = v130 * v228 / v129 * v127[1];
                }
                *(_WORD *)&v10[4 * result[408].i32[0]++] = v131 / v229;
                unsigned int v105 = result[485].u8[5];
              }
            }
          }
          else
          {
            char v122 = v111;
            if ((v110 & 0x80000000) == 0 && (v122 & 1) == 0)
            {
              BOOL v123 = v106 == 3 || v106 == 5;
              BOOL v124 = v123 && v6 == v107;
              BOOL v125 = v124;
              BOOL v126 = v106 == 4 && v107 == 0;
              if (!v126 && !v125) {
                goto LABEL_277;
              }
            }
          }
LABEL_284:
          if (++v106 >= (unint64_t)v105) {
            goto LABEL_285;
          }
          continue;
        }
      }
    }
  }
  uint64_t v56 = 0;
  result[411].i32[0] = -1;
  int v57 = (char *)&result[384] + 2;
  __int32 v58 = result[233].i32[0];
  __int32 v59 = result[237].i32[1];
  int v60 = a2 + 1;
  do
  {
    __int32 v61 = v58 - v230[v56];
    if (v61 < v59) {
      goto LABEL_125;
    }
    if (v56 == 2)
    {
      if (result[236].i32[1] == v6) {
        goto LABEL_125;
      }
    }
    else if (v56 != 1)
    {
      if (v56)
      {
        if (!result[236].i32[1]) {
          break;
        }
      }
      else if (!result[236].i32[1])
      {
        goto LABEL_125;
      }
    }
    uint64_t v62 = *(void *)(*(void *)&v2 + 72);
    uint64_t v63 = v61;
    int64x2_t v64 = (__int16 *)(v62 + 32 * v61);
    if (!*((unsigned char *)v64 + 27) && *((unsigned char *)v64 + 26) == 4)
    {
      uint64_t v65 = v62 + 32 * v63;
      v7->i16[2 * result[408].u32[0]] = v60 * *v64 / (*(unsigned __int8 *)(v65 + 24) + 1);
      *(_WORD *)&v57[4 * result[408].u32[0]] = v60 * v64[1] / (*(unsigned __int8 *)(v65 + 24) + 1);
      result[400].i32[result[408].u32[0]] = 1;
      __int32 v66 = result[408].i32[0];
      unsigned __int32 v67 = *(_DWORD *)(v65 + 20);
      if (result[411].i32[0] < v67) {
        unsigned __int32 v67 = result[411].u32[0];
      }
      result[411].i32[0] = v67;
      result[408].i32[0] = v66 + 1;
    }
LABEL_125:
    ++v56;
  }
  while (v56 != 4);
  if (result[485].i8[7])
  {
    v7->i32[result[408].u32[0]] = *(_DWORD *)(*(void *)(*(void *)&v2 + 216) + 4 * (char)a2 + 18984);
    result[400].i32[result[408].i32[0]++] = 3;
  }
  uint64_t v68 = **(void **)(*(void *)&v2 + 224);
  if (!v68) {
    return result;
  }
  uint64_t v69 = *(void *)(*(void *)&v2 + 216);
  if (*(_DWORD *)(v69 + 1332) - *(_DWORD *)(v68 + 1332) > *(_DWORD *)(v69 + 1336)) {
    return result;
  }
  uint64_t v70 = *(void *)(v68 + 5016);
  if (!v70) {
    return result;
  }
  uint64_t v71 = v68 + 19120;
  uint64_t v72 = v69 + 19112;
  int v73 = *(unsigned __int16 *)(v68 + 19120);
  int v74 = *(unsigned __int16 *)(v69 + 19112);
  if (v73 != v74)
  {
    int v76 = *(unsigned __int16 *)(v72 + 2);
    int v75 = *(unsigned __int16 *)(v71 + 2);
    goto LABEL_444;
  }
  int v75 = *(unsigned __int16 *)(v71 + 2);
  int v76 = *(unsigned __int16 *)(v72 + 2);
  if (v75 != v76)
  {
LABEL_444:
    unsigned int v199 = result[485].u8[5];
    if (!result[485].i8[5]) {
      return result;
    }
    uint64_t v200 = 0;
    int v201 = ((16 * result[236].i32[1]) | 8) * v73 / (16 * v74);
    int v202 = ((16 * result[237].i32[0]) | 8) * v75 / (16 * v76);
    int v203 = v5 * v4;
    int v204 = v5 - 1;
    while (1)
    {
      uint64_t v240 = 0x100000000;
      int v241 = v4;
      int v242 = -1;
      int v243 = v4 + 1;
      int v244 = v4 - 1;
      uint64_t v231 = 0x100000000;
      int v232 = v4;
      int v233 = -1;
      int v234 = -v4;
      int v235 = v4 + 1;
      int v236 = v4 - 1;
      int v237 = 1 - v4;
      int v238 = ~v4;
      int v239 = 0;
      if (result[484].i8[2]) {
        BOOL v205 = &v231;
      }
      else {
        BOOL v205 = &v240;
      }
      uint64_t v206 = (v201 + v202 * v4 - *((_DWORD *)v205 + v200));
      if (v201) {
        BOOL v207 = 0;
      }
      else {
        BOOL v207 = v200 == 1;
      }
      if (result[484].i8[2])
      {
        char v208 = v207;
        BOOL v210 = v6 == v201 && v200 == 3;
        if ((v206 & 0x80000000) == 0 && (int)v206 < v203 && (v208 & 1) == 0 && !v210)
        {
          BOOL v211 = !v201 && v200 == 5;
          BOOL v212 = v211;
          BOOL v213 = v204 == v202 && v200 == 4;
          if (!v213 && !v212)
          {
            BOOL v214 = v200 == 6 || v200 == 8;
            BOOL v215 = v214 && v6 == v201;
            BOOL v216 = v215;
            BOOL v217 = v200 == 7 && v201 == 0;
            if (!v217 && !v216) {
              goto LABEL_511;
            }
          }
        }
      }
      else
      {
        char v218 = v207;
        if ((v206 & 0x80000000) == 0 && (v218 & 1) == 0)
        {
          BOOL v219 = v200 == 3 || v200 == 5;
          BOOL v220 = v219 && v6 == v201;
          BOOL v221 = v220;
          BOOL v222 = v200 == 4 && v201 == 0;
          if (!v222 && !v221)
          {
LABEL_511:
            uint64_t v223 = (__int16 *)(v70 + 32 * v206);
            if (!*((unsigned char *)v223 + 27) && *((unsigned char *)v223 + 26) == 4)
            {
              uint64_t v224 = v70 + 32 * v206;
              if (!*(unsigned char *)(v224 + 28))
              {
                int v225 = *(_DWORD *)(v224 + 16);
                if (v225 < 1)
                {
                  v7->i16[2 * result[408].u32[0]] = *v223 * v74 / v73;
                  int v227 = v223[1] * v76;
                }
                else
                {
                  int v226 = *(_DWORD *)(*(void *)(*(void *)&v2 + 216) + 1332)
                       - *(_DWORD *)(**(void **)(*(void *)&v2 + 224) + 1332);
                  v7->i16[2 * result[408].u32[0]] = v226 * v74 / v225 * *v223 / v73;
                  int v227 = v226 * v76 / v225 * v223[1];
                }
                *(_WORD *)&v57[4 * result[408].u32[0]] = v227 / v75;
                result[400].i32[result[408].i32[0]++] = 2;
                unsigned int v199 = result[485].u8[5];
              }
            }
          }
        }
      }
      if (++v200 >= (unint64_t)v199) {
        return result;
      }
    }
  }
  unsigned int v77 = result[485].u8[5];
  if (result[485].i8[5])
  {
    unint64_t v78 = 0;
    __int32 v79 = result[236].i32[1];
    __int32 v80 = result[237].i32[0];
    int v81 = v5 * v4;
    int v82 = v5 - 1;
    do
    {
      uint64_t v240 = 0x100000000;
      int v241 = v4;
      int v242 = -1;
      int v243 = v4 + 1;
      int v244 = v4 - 1;
      uint64_t v231 = 0x100000000;
      int v232 = v4;
      int v233 = -1;
      int v234 = -v4;
      int v235 = v4 + 1;
      int v236 = v4 - 1;
      int v237 = 1 - v4;
      int v238 = ~v4;
      int v239 = 0;
      if (result[484].i8[2]) {
        int v83 = &v231;
      }
      else {
        int v83 = &v240;
      }
      uint64_t v84 = (v58 - *((_DWORD *)v83 + v78));
      BOOL v85 = v78 == 1 && v79 == 0;
      if (result[484].i8[2])
      {
        char v86 = v85;
        BOOL v88 = v78 == 3 && v6 == v79;
        if ((v84 & 0x80000000) == 0 && (int)v84 < v81 && (v86 & 1) == 0 && !v88)
        {
          BOOL v89 = v78 == 4 && v82 == v80;
          BOOL v90 = v89;
          BOOL v91 = !v79 && v78 == 5;
          if (!v91 && !v90)
          {
            BOOL v92 = v78 == 7 && v79 == 0;
            BOOL v93 = v92;
            BOOL v94 = v78 == 8 || v78 == 6;
            BOOL v95 = v94 && v6 == v79;
            if (!v95 && !v93) {
              goto LABEL_200;
            }
          }
        }
      }
      else
      {
        char v96 = v85;
        if ((v84 & 0x80000000) == 0 && (v96 & 1) == 0)
        {
          BOOL v97 = v78 == 4 && v79 == 0;
          BOOL v98 = v97;
          BOOL v99 = v78 == 5 || v78 == 3;
          BOOL v100 = v99 && v6 == v79;
          if (!v100 && !v98)
          {
LABEL_200:
            uint64_t v101 = (__int16 *)(v70 + 32 * v84);
            if (!*((unsigned char *)v101 + 27) && *((unsigned char *)v101 + 26) == 4)
            {
              uint64_t v102 = v70 + 32 * v84;
              if (!*(unsigned char *)(v102 + 28))
              {
                int v103 = *(_DWORD *)(v102 + 16);
                if (v103 < 1)
                {
                  v7->i32[result[408].u32[0]] = *(_DWORD *)v101;
                }
                else
                {
                  int v104 = *(_DWORD *)(*(void *)(*(void *)&v2 + 216) + 1332)
                       - *(_DWORD *)(**(void **)(*(void *)&v2 + 224) + 1332);
                  v7->i16[2 * result[408].u32[0]] = v104 * *v101 / v103;
                  *(_WORD *)&v57[4 * result[408].u32[0]] = v104 * v101[1] / v103;
                }
                result[400].i32[result[408].i32[0]++] = 2;
                unsigned int v77 = result[485].u8[5];
              }
            }
          }
        }
      }
      ++v78;
    }
    while (v78 < v77);
  }
  return result;
}

uint64_t sub_1BBB4DC38(uint64_t result, unsigned int a2, char a3, unsigned int a4)
{
  if (!*(_DWORD *)(result + 3320))
  {
    uint64_t v4 = result;
    unsigned __int16 v26 = 0;
    *(_DWORD *)(result + 3468) = -2;
    if (*(_DWORD *)(result + 3312))
    {
      uint64_t v5 = 0;
      unsigned __int16 v6 = *(_WORD *)(result + 3304);
      unsigned __int16 v7 = *(_WORD *)(result + 3306);
      int v8 = &word_1BBB8D52A;
      do
      {
        int v9 = (__int16)(*(v8 - 1) + v6);
        int v10 = (__int16)(*v8 + v7);
        uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, unsigned __int16 *))(*(void *)(v4 + 24)
                                                                                          + 8
                                                                                          * *(unsigned int *)(v4 + 3464)))((unsigned __int16)(*(v8 - 1) + v6) | ((unint64_t)(unsigned __int16)(*v8 + v7) << 16), v4 + 3384, &v26);
        unsigned __int16 v11 = v26;
        if (!*(unsigned char *)(v4 + 3886) || *(__int16 *)(v4 + 3376) >= v9 && *(__int16 *)(v4 + 3378) >= v10)
        {
          unsigned int v12 = *(unsigned __int16 *)(*(void *)(v4 + 1824) + 2 * v9)
              + v26
              + *(unsigned __int16 *)(*(void *)(v4 + 1832) + 2 * v10);
          if (v12 < *(_DWORD *)(v4 + 3296))
          {
            *(_DWORD *)(v4 + 3296) = v12;
            *(_WORD *)(v4 + 3304) = v9;
            *(_WORD *)(v4 + 3306) = v10;
            *(_DWORD *)(v4 + 3468) = v5;
            *(_WORD *)(v4 + 3300) = v11;
          }
        }
        v8 += 2;
        ++v5;
      }
      while (v5 != 4);
      if (*(_DWORD *)(v4 + 3468) != -2)
      {
        if (*(_DWORD *)(v4 + 3312) == 1)
        {
LABEL_24:
          uint64_t v22 = v4 + 16 * a4 + 2 * *(unsigned int *)(v4 + 3464) + a2;
          if (*(unsigned __int8 *)(v22 + 3712) == 255) {
            *(unsigned char *)(v22 + 3712) = a3;
          }
        }
        else
        {
          int v13 = 0;
          while (1)
          {
            uint64_t v14 = 0;
            unsigned __int16 v15 = v6;
            unsigned __int16 v6 = *(_WORD *)(v4 + 3304);
            int v16 = v15 | (v7 << 16);
            unsigned __int16 v7 = *(_WORD *)(v4 + 3306);
            *(_DWORD *)(v4 + 3468) = -2;
            uint64_t v17 = &word_1BBB8D52A;
            do
            {
              unint64_t v18 = (unsigned __int16)(*(v17 - 1) + v6) | ((unsigned __int16)(*v17 + v7) << 16);
              if (v18 != v16)
              {
                int v19 = (__int16)(*(v17 - 1) + v6);
                uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *))(*(void *)(v4 + 24)
                                                                                        + 8
                                                                                        * *(unsigned int *)(v4 + 3464)))((unsigned __int16)(*(v17 - 1) + v6) | ((unsigned __int16)(*v17 + v7) << 16), v4 + 3384, &v26);
                unsigned __int16 v20 = v26;
                if (!*(unsigned char *)(v4 + 3886)
                  || *(__int16 *)(v4 + 3376) >= v19 && *(__int16 *)(v4 + 3378) >= (int)v18 >> 16)
                {
                  unsigned int v21 = *(unsigned __int16 *)(*(void *)(v4 + 1824) + 2 * (__int16)v18)
                      + v26
                      + *(unsigned __int16 *)(*(void *)(v4 + 1832) + ((uint64_t)(v18 >> 16 << 48) >> 47));
                  if (v21 < *(_DWORD *)(v4 + 3296))
                  {
                    *(_DWORD *)(v4 + 3296) = v21;
                    *(_WORD *)(v4 + 3304) = v19;
                    *(_WORD *)(v4 + 3306) = WORD1(v18);
                    *(_DWORD *)(v4 + 3468) = v14;
                    *(_WORD *)(v4 + 3300) = v20;
                  }
                }
              }
              v17 += 2;
              ++v14;
            }
            while (v14 != 4);
            if (*(_DWORD *)(v4 + 3468) == -2) {
              break;
            }
            if (++v13 >= (*(_DWORD *)(v4 + 3312) - 1)) {
              goto LABEL_24;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BBB4DEAC(uint64_t a1)
{
  v118[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 1856);
  uint64_t v3 = *(void *)(v2 + 40);
  int v4 = *(unsigned __int8 *)(v3 + 1);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 2);
  v118[0] = 0;
  BOOL v6 = v4 == 5 || v4 == 3;
  unsigned __int16 v7 = (char *)&unk_1BBB8D49A + v5;
  int v8 = (unsigned __int8 *)&unk_1BBB8D483 + v5;
  if (!v6) {
    int v8 = (unsigned __int8 *)v7;
  }
  uint64_t v9 = *v8;
  *(_DWORD *)(a1 + 3464) = v9;
  *(_DWORD *)(a1 + 4 * v9 + 3568) = 0;
  *(_WORD *)(a1 + 2 * v9 + 3596) = 0;
  uint64_t v10 = *(void *)(v2 + 48);
  uint64_t v11 = byte_1BBB8D47C[v9];
  unsigned int v112 = *(_DWORD *)(a1 + 3312) + *(_DWORD *)(a1 + 3312) * *(_DWORD *)(a1 + 3320);
  uint64_t v12 = a1 + 8 * v9;
  int v13 = dword_1BBB8D538[v9];
  int v14 = *(__int16 *)(a1 + 3380);
  int v15 = *(__int16 *)(a1 + 3382);
  int v16 = *(unsigned __int8 *)(a1 + 3886);
  unsigned int v17 = v13 + 24 * *(_DWORD *)(v12 + 3616);
  uint64_t v18 = v11;
  do
  {
    int v19 = *(_DWORD *)(a1 + 4 * v17 + 80);
    *(_DWORD *)(a1 + 3304) = v19;
    int v20 = (__int16)v19;
    unsigned int v21 = (__int16)v19 - v14;
    if (v112 < v21) {
      unsigned int v21 = v112;
    }
    int v22 = v19 >> 16;
    if (v21 >= v22 - v15) {
      unsigned int v21 = v22 - v15;
    }
    unsigned int v112 = v21;
    if (!v16)
    {
      unsigned int v23 = *(__int16 *)(a1 + 3376) - v20;
      if (v21 < v23) {
        unsigned int v23 = v21;
      }
      unsigned int v24 = *(__int16 *)(a1 + 3378) - v22;
      if (v23 >= v24) {
        unsigned int v23 = v24;
      }
      unsigned int v112 = v23;
    }
    ++v17;
    --v18;
  }
  while (v18);
  unint64_t v25 = 0;
  int v106 = 0;
  uint64_t v26 = v10 + 16;
  uint64_t v114 = a1 + 3384;
  unint64_t v104 = (v11 - 1);
  unint64_t v105 = 0;
  unint64_t v27 = 1;
  int v103 = v4;
  uint64_t v101 = v10 + 16;
  uint64_t v102 = v11;
  do
  {
    int v28 = (unsigned __int8 *)(v26 + 16 * v25);
    uint64_t v29 = *(unsigned int *)(a1 + 3464);
    uint64_t v30 = a1 + 8 * v29;
    *(_DWORD *)(v30 + 3616) = v28[8];
    int v107 = v28;
    *(_DWORD *)(v30 + 3620) = v28[9];
    if (!v112) {
      goto LABEL_75;
    }
    if (v4 != 5 && v4 != 3) {
      goto LABEL_29;
    }
    if (v29 == 3 && !*(unsigned char *)(a1 + v25 + 1808))
    {
      unint64_t v27 = 0;
      goto LABEL_71;
    }
    int v31 = v28[15];
    if (v31 == 4)
    {
      unint64_t v27 = 1;
      goto LABEL_29;
    }
    if (v31 != 5)
    {
      int v106 = 1;
      unint64_t v27 = 2;
LABEL_29:
      if (v105 >= v27) {
        goto LABEL_71;
      }
      goto LABEL_30;
    }
    unint64_t v105 = 1;
    unint64_t v27 = 2;
LABEL_30:
    unint64_t v108 = v25;
    unint64_t v109 = v27;
    unint64_t v32 = v105;
    do
    {
      uint64_t v33 = *(unsigned int *)(a1 + 3464);
      uint64_t v34 = a1 + 4 * v32;
      uint64_t v35 = *(unsigned int *)(v34 + 8 * v33 + 3616);
      unsigned int v36 = *(_DWORD *)(v34 + 3876);
      if (v36 < 2)
      {
        LOWORD(v37) = 0;
      }
      else if (v36 == 2)
      {
        LOWORD(v37) = *(_WORD *)(a1 + 1840);
      }
      else
      {
        unsigned int v38 = (v35 + 1) >> 16;
        unsigned int v39 = v38 - 1;
        BOOL v40 = v38 == 0;
        BOOL v41 = v38 != 0;
        if (v40) {
          unsigned int v39 = v35 + 1;
        }
        int v42 = 32 * v41;
        if (v39 >= 0x100)
        {
          unsigned int v39 = (v39 >> 8) - 1;
          v42 |= 0x10u;
        }
        if (v35 < 0xFF)
        {
          unsigned int v39 = v35;
          int v42 = 0;
        }
        int v37 = (v42 + byte_1BBB93ED8[v39]) * *(_DWORD *)(a1 + 1840);
      }
      if (*(_DWORD *)(a1 + 3320)
        || *((_DWORD *)v118 + v32)
        || v25 >= *(unsigned __int8 *)(a1 + 16 * v35 + 2 * v33 + v32 + 3712))
      {
        sub_1BBB4B894(a1, v35, v32, v25);
        uint64_t v43 = 0;
        unint64_t v111 = v32;
        int v110 = 12 * v32 + 24 * v35 + v25;
        uint64_t v44 = a1 + 4 * (v110 + dword_1BBB8D538[*(unsigned int *)(a1 + 3464)]);
        unsigned int v45 = *(_DWORD *)(v44 + 80);
        *(_DWORD *)(a1 + 3304) = v45;
        unsigned int v46 = *(_DWORD *)(v44 + 1040);
        *(_DWORD *)(a1 + 3296) = v46;
        *(_DWORD *)(a1 + 3468) = -2;
        int v115 = (unsigned __int16)v37;
        char v47 = &word_1BBB8D52A;
        do
        {
          LOWORD(v116) = 0;
          int v48 = (__int16)(*(v47 - 1) + v45);
          int v49 = (__int16)(*v47 + HIWORD(v45));
          if (!*(unsigned char *)(a1 + 3886) || v48 <= *(__int16 *)(a1 + 3376) && v49 <= *(__int16 *)(a1 + 3378))
          {
            (*(void (**)(unint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 24)
                                                                         + 8 * *(unsigned int *)(a1 + 3464)))((unsigned __int16)(*(v47 - 1) + v45) | ((unint64_t)(unsigned __int16)(*v47 + HIWORD(v45)) << 16), v114, &v116);
            __int16 v50 = v116;
            unsigned int v51 = v115
                + (unsigned __int16)v116
                + *(unsigned __int16 *)(*(void *)(a1 + 1824) + 2 * v48)
                + *(unsigned __int16 *)(*(void *)(a1 + 1832) + 2 * v49);
            unsigned int v46 = *(_DWORD *)(a1 + 3296);
            if (v51 < v46)
            {
              *(_DWORD *)(a1 + 3296) = v51;
              *(_WORD *)(a1 + 3300) = v50;
              *(_WORD *)(a1 + 3304) = v48;
              *(_WORD *)(a1 + 3306) = v49;
              unsigned int v46 = v51;
              *(_DWORD *)(a1 + 3468) = v43;
            }
          }
          v47 += 2;
          ++v43;
        }
        while (v43 != 4);
        if (*(_DWORD *)(a1 + 3468) != -2)
        {
          if (v112 >= 2)
          {
            unsigned int v52 = HIWORD(v45);
            int v53 = *((_DWORD *)v118 + v32);
            int v54 = 1;
            do
            {
              int v113 = v54;
              uint64_t v55 = 0;
              unsigned __int16 v56 = v45;
              LOWORD(v45) = *(_WORD *)(a1 + 3304);
              int v57 = v56 | ((unsigned __int16)v52 << 16);
              LOWORD(v52) = *(_WORD *)(a1 + 3306);
              *(_DWORD *)(a1 + 3468) = -2;
              __int32 v58 = &word_1BBB8D52A;
              do
              {
                LOWORD(v116) = 0;
                int v59 = (__int16)(*(v58 - 1) + v45);
                int v60 = (__int16)(*v58 + v52);
                if ((v53 || ((unsigned __int16)v59 | ((unsigned __int16)v60 << 16)) != v57)
                  && (!*(unsigned char *)(a1 + 3886) || v59 <= *(__int16 *)(a1 + 3376) && v60 <= *(__int16 *)(a1 + 3378)))
                {
                  int v61 = (__int16)(*(v58 - 1) + v45);
                  unsigned int v62 = (unsigned __int16)(*(v58 - 1) + v45) | ((unsigned __int16)v60 << 16);
                  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)(a1 + 24)
                                                                     + 8 * *(unsigned int *)(a1 + 3464)))(v62, v114, &v116);
                  __int16 v63 = v116;
                  unsigned int v64 = v115
                      + (unsigned __int16)v116
                      + *(unsigned __int16 *)(*(void *)(a1 + 1824) + 2 * v61)
                      + *(unsigned __int16 *)(*(void *)(a1 + 1832) + 2 * v60);
                  unsigned int v46 = *(_DWORD *)(a1 + 3296);
                  if (v64 < v46)
                  {
                    *(_DWORD *)(a1 + 3296) = v64;
                    *(_WORD *)(a1 + 3300) = v63;
                    *(_DWORD *)(a1 + 3304) = v62;
                    unsigned int v46 = v64;
                    *(_DWORD *)(a1 + 3468) = v55;
                  }
                }
                v58 += 2;
                ++v55;
              }
              while (v55 != 4);
              if (*(_DWORD *)(a1 + 3468) == -2) {
                break;
              }
              int v54 = v113 + 1;
            }
            while (v113 + 1 < v112);
          }
          unint64_t v32 = v111;
          *((_DWORD *)v118 + v111) = 1;
          *(_DWORD *)(a1 + 4 * (v110 + dword_1BBB8D538[*(unsigned int *)(a1 + 3464)]) + 1040) = v46;
          *(_WORD *)(a1 + 2 * (v110 + dword_1BBB8D538[*(unsigned int *)(a1 + 3464)]) + 1568) = *(_WORD *)(a1 + 3300);
          *(_DWORD *)(a1 + 4 * (v110 + dword_1BBB8D538[*(unsigned int *)(a1 + 3464)]) + 80) = *(_DWORD *)(a1 + 3304);
          unint64_t v25 = v108;
        }
      }
      ++v32;
      unint64_t v27 = v109;
    }
    while (v109 != v32);
    int v4 = v103;
    uint64_t v26 = v101;
    uint64_t v11 = v102;
LABEL_71:
    if (v106)
    {
      uint64_t v29 = *(unsigned int *)(a1 + 3464);
      if (v118[0]) {
        *(_WORD *)(a1 + 2 * v29 + 3596) = -1;
      }
      int v106 = 1;
LABEL_75:
      if (v29) {
        goto LABEL_77;
      }
LABEL_76:
      sub_1BBB4CA04(a1);
      LODWORD(v29) = *(_DWORD *)(a1 + 3464);
      goto LABEL_77;
    }
    int v106 = 0;
    LODWORD(v29) = *(_DWORD *)(a1 + 3464);
    if (!v29) {
      goto LABEL_76;
    }
LABEL_77:
    if (v29 == 3)
    {
      if (v4 == 3 || v4 == 5)
      {
        switch(*(unsigned char *)(a1 + v25 + 1808))
        {
          case 0:
            *(_DWORD *)(a1 + 3580) += *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v25 + 3540);
            v107[15] = 3;
            uint64_t v65 = *(unsigned int *)(a1 + 3464);
            goto LABEL_102;
          case 1:
            unsigned int v75 = v25 + 24 * *(_DWORD *)(a1 + 3640) + 8;
            goto LABEL_98;
          case 2:
            unsigned int v75 = v25 + 24 * *(_DWORD *)(a1 + 3644) + 20;
LABEL_98:
            int v76 = *(_DWORD *)(a1 + 3580) + 3 * *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v75 + 1040);
            goto LABEL_100;
          case 3:
            int v76 = *(_DWORD *)(a1 + 3580) + *(_DWORD *)(a1 + 4 * v25 + 1552) + 5 * *(_DWORD *)(a1 + 1840);
LABEL_100:
            *(_DWORD *)(a1 + 3580) = v76;
            break;
          default:
            break;
        }
        uint64_t v65 = 3;
LABEL_102:
        if (v25 == 3) {
          *(_DWORD *)(a1 + 4 * v65 + 3568) += 9 * *(_DWORD *)(a1 + 1840);
        }
        *(_WORD *)(a1 + 2 * v65 + 3596) = -1;
      }
      else
      {
        unsigned int v69 = v25 + 24 * *(_DWORD *)(a1 + 3640) + 8;
        *(_DWORD *)(a1 + 3580) += *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v69 + 1040);
        *(_WORD *)(a1 + 3602) += *(_WORD *)(a1 + 2 * v69 + 1568);
        uint64_t v65 = 3;
      }
    }
    else
    {
      uint64_t v66 = a1 + 2 * v29;
      if (v4 == 5 || v4 == 3)
      {
        if (v29)
        {
          if (v106)
          {
            uint64_t v67 = a1 + 4 * v29;
            int v68 = *(_DWORD *)(v67 + 3568)
                + *(_DWORD *)(a1 + 4 * (dword_1BBB8D538[v29] + v25) + 1520);
            *(_DWORD *)(v67 + 3568) = v68;
          }
          else
          {
            int v73 = dword_1BBB8D538[v29];
            if (v105) {
              unsigned int v74 = v25 + 24 * *(_DWORD *)(a1 + 8 * v29 + 3620) + v73 + 12;
            }
            else {
              unsigned int v74 = v73 + v25 + 24 * *(_DWORD *)(a1 + 8 * v29 + 3616);
            }
            uint64_t v78 = a1 + 4 * v29;
            int v68 = *(_DWORD *)(v78 + 3568) + *(_DWORD *)(a1 + 4 * v74 + 1040);
            *(_DWORD *)(v78 + 3568) = v68;
          }
          if (v25 == 1)
          {
            uint64_t v79 = dword_1BBB8D4A0[3 * (3 * v29 + *(_DWORD *)(a1 + 3688) - 3)
                                                 + *(unsigned int *)(a1 + 3692)];
            *(unsigned char *)(a1 + v29 + 3561) = dword_1BBB8D4A0[3
                                                                      * (3 * v29
                                                                                     + *(_DWORD *)(a1 + 3688)
                                                                                     - 3)
                                                                      + *(unsigned int *)(a1 + 3692)];
            *(_DWORD *)(a1 + 4 * v29 + 3568) = v68
                                                             + *(_DWORD *)(a1 + 1840)
                                                             * byte_1BBB93ED8[v79];
          }
        }
        else
        {
          if (v106)
          {
            int v72 = *(_DWORD *)(a1 + 3568) + *(_DWORD *)(a1 + 4 * v25 + 1520) + 5 * *(_DWORD *)(a1 + 1840);
          }
          else
          {
            if (v105) {
              unsigned int v77 = v25 + 24 * *(_DWORD *)(a1 + 3620) + 12;
            }
            else {
              unsigned int v77 = v25 + 24 * *(_DWORD *)(a1 + 3616);
            }
            int v72 = *(_DWORD *)(a1 + 3568) + 3 * *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v77 + 1040);
          }
          *(_DWORD *)(a1 + 3568) = v72;
        }
        uint64_t v65 = v29;
        __int16 v71 = -1;
      }
      else
      {
        uint64_t v65 = v29;
        unsigned int v70 = dword_1BBB8D538[v29] + v25 + 24 * *(_DWORD *)(a1 + 8 * v29 + 3616);
        *(_DWORD *)(a1 + 4 * v29 + 3568) += *(_DWORD *)(a1 + 4 * v70 + 1040);
        __int16 v71 = *(_WORD *)(v66 + 3596) + *(_WORD *)(a1 + 2 * v70 + 1568);
      }
      *(_WORD *)(v66 + 3596) = v71;
    }
    v107[8] = *(_DWORD *)(a1 + 3616 + 8 * v65);
    v107[9] = *(_DWORD *)(a1 + 3616 + 8 * *(unsigned int *)(a1 + 3464) + 4);
    uint64_t v80 = *(unsigned int *)(a1 + 3464);
    int v81 = (_DWORD *)(a1 + 3616 + 8 * v80);
    int v82 = dword_1BBB8D538[v80] + v25;
    int v83 = v81[1];
    uint64_t v84 = (v82 + 24 * *v81);
    unsigned int v85 = *(_DWORD *)(a1 + 560 + 4 * v84);
    uint64_t v86 = (v82 + 24 * v83 + 12);
    v117[0] = __PAIR64__(*(_DWORD *)(a1 + 560 + 4 * v86), v85);
    if (v107[15] == 3)
    {
      v117[0] = *(void *)(a1 + 8 * v25 + 3476);
      v107[15] = *(unsigned char *)(a1 + v25 + 3556);
      uint64_t v87 = *(void *)(a1 + 1856);
      *(_WORD *)(*(void *)(v87 + 48) + 16 * (int)v25 + 16) = 0;
      *(_WORD *)(*(void *)(v87 + 48) + 16 * (int)v25 + 18) = 0;
      *(_WORD *)(*(void *)(v87 + 48) + 16 * (int)v25 + 20) = 0;
      *(_WORD *)(*(void *)(v87 + 48) + 16 * (int)v25 + 22) = 0;
      uint64_t v88 = *(void *)(a1 + 1856);
      int v89 = v107[15];
      unsigned int v90 = v107[8];
      unsigned int v91 = v107[9];
      BOOL v92 = v117;
    }
    else
    {
      __int32 v93 = *(_DWORD *)(a1 + 80 + 4 * v84);
      __int32 v94 = *(_DWORD *)(a1 + 80 + 4 * v86);
      v95.i32[0] = v93 << 16;
      v95.i32[1] = v93;
      v95.i32[2] = v94 << 16;
      v95.i32[3] = v94;
      v96.i64[0] = 0x700000007;
      v96.i64[1] = 0x700000007;
      *(int16x4_t *)v95.i8 = vmovn_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(v95, 0x10uLL), v96), v96));
      uint64_t v116 = v95.i64[0];
      uint64_t v97 = *(void *)(a1 + 1856);
      *(_WORD *)(*(void *)(v97 + 48) + 16 * (int)v25 + 16) = v95.i16[0] - v85;
      *(_WORD *)(*(void *)(v97 + 48) + 16 * (int)v25 + 18) = v95.i16[1] - WORD1(v117[0]);
      *(_WORD *)(*(void *)(v97 + 48) + 16 * (int)v25 + 20) = v95.i16[2] - WORD2(v117[0]);
      *(_WORD *)(*(void *)(v97 + 48) + 16 * (int)v25 + 22) = v95.i16[3] - HIWORD(v117[0]);
      uint64_t v88 = *(void *)(a1 + 1856);
      int v89 = v107[15];
      unsigned int v90 = v107[8];
      unsigned int v91 = v107[9];
      BOOL v92 = &v116;
    }
    uint64_t result = sub_1BBAF3090(v88, v92, v89, v90, v91, v25);
    if (v118[0] && v25 < v104)
    {
      uint64_t result = sub_1BBB52450(*(void **)(a1 + 1856), (int)v25 + 1, v117);
      uint64_t v99 = v26 + 16 * (v25 + 1);
      int v100 = HIDWORD(v117[0]);
      *(_DWORD *)(a1
                + 560
                + 4
                * (dword_1BBB8D538[*(unsigned int *)(a1 + 3464)]
                 + v25
                 + 1
                 + 24 * *(unsigned __int8 *)(v99 + 8))) = v117[0];
      *(_DWORD *)(a1
                + 560
                + 4
                * (v25++
                 + 24 * *(unsigned __int8 *)(v99 + 9)
                 + dword_1BBB8D538[*(unsigned int *)(a1 + 3464)]
                 + 13)) = v100;
    }
    else
    {
      ++v25;
    }
  }
  while (v25 != v11);
  return result;
}

double sub_1BBB4E9DC(double result)
{
  if (result > 0.0 && result < 9.0e15)
  {
    double v1 = (double)(uint64_t)(result * 1024.0 + 0.5) + 0.001953125;
    return v1 * 0.0009765625;
  }
  if (result > -9.0e15 && result < 0.0)
  {
    double v1 = -0.001953125 - (double)(uint64_t)(result * -1024.0 + 0.5);
    return v1 * 0.0009765625;
  }
  return result;
}

double sub_1BBB4EA68(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 128);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 128) = 0;
  }
  int v4 = *(void **)(a1 + 136);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v5 = *(void **)(a1 + 392);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 392) = 0;
  }
  BOOL v6 = *(void **)(a1 + 144);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 144) = 0;
  }
  unsigned __int16 v7 = *(void **)(a1 + 160);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 160) = 0;
  }
  int v8 = *(void **)(a1 + 376);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 376) = 0;
  }
  uint64_t v9 = *(void **)(a1 + 384);
  if (v9)
  {
    free(v9);
    *(void *)(a1 + 384) = 0;
  }
  uint64_t v10 = *(void **)(a1 + 152);
  if (v10)
  {
    free(v10);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v11 = *(void **)(a1 + 168);
  if (v11)
  {
    free(v11);
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v12 = *(void **)(a1 + 184);
  if (v12)
  {
    free(v12);
    *(void *)(a1 + 184) = 0;
  }
  int v13 = *(void **)(a1 + 192);
  if (v13)
  {
    free(v13);
    *(void *)(a1 + 192) = 0;
  }
  int v14 = *(void **)(a1 + 288);
  if (v14)
  {
    free(v14);
    *(void *)(a1 + 288) = 0;
  }
  int v15 = *(void **)(a1 + 280);
  if (v15)
  {
    free(v15);
    *(void *)(a1 + 280) = 0;
  }
  int v16 = *(void **)(a1 + 296);
  if (v16)
  {
    free(v16);
    *(void *)(a1 + 296) = 0;
  }
  unsigned int v17 = *(void **)(a1 + 400);
  if (v17)
  {
    free(v17);
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v18 = *(void **)(a1 + 304);
  if (v18)
  {
    free(v18);
    *(void *)(a1 + 304) = 0;
  }
  int v19 = *(void **)(a1 + 312);
  if (v19)
  {
    free(v19);
    *(void *)(a1 + 312) = 0;
  }
  int v20 = *(void **)(a1 + 328);
  if (v20)
  {
    free(v20);
    *(void *)(a1 + 328) = 0;
  }
  unsigned int v21 = *(void **)(a1 + 336);
  if (v21)
  {
    free(v21);
    *(void *)(a1 + 336) = 0;
  }
  *(unsigned char *)(a1 + 368) = 0;
  int v22 = *(void **)(a1 + 360);
  if (v22)
  {
    free(v22);
    *(void *)(a1 + 360) = 0;
  }
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(_DWORD *)(a1 + 372) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return result;
}

uint64_t sub_1BBB4EBFC(uint64_t a1)
{
  if (!a1) {
    return 4294943591;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 152);
  BOOL v2 = (v1 & 0xF) == 0
    && (*(unsigned char *)(a1 + 160) & 0xF) == 0
    && (*(unsigned char *)(a1 + 156) & 0xF) == 0
    && (*(unsigned char *)(a1 + 164) & 0xF) == 0
    && (*(unsigned char *)(a1 + 168) & 0xF) == 0
    && (*(unsigned char *)(a1 + 172) & 0xF) == 0;
  if (v1 <= 0xBB8
    && *(_DWORD *)(a1 + 160) <= 0xBB8u
    && (unsigned int v3 = *(_DWORD *)(a1 + 156), v3 <= 0xBB8)
    && *(_DWORD *)(a1 + 164) <= 0xBB8u
    && (unsigned int v4 = *(_DWORD *)(a1 + 168), v4 <= 0x1770))
  {
    unsigned int v14 = *(_DWORD *)(a1 + 172);
    BOOL v16 = v4 >= v1 && v14 <= 0x1770 && v14 >= v3;
    int v5 = !v16;
  }
  else
  {
    int v5 = 1;
  }
  if (!*(unsigned char *)(a1 + 240) && ((v5 | !v2) & 1) != 0) {
    return 4294943588;
  }
  int v7 = *(_DWORD *)(a1 + 40);
  BOOL v16 = v7 != 0;
  unsigned int v8 = v7 - 1;
  if (v8 != 0 && v16) {
    return 4294943596;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 48);
  if (v9 > 0xC) {
    return 4294943589;
  }
  int v10 = *(_DWORD *)(a1 + 72);
  if (v10 == 16)
  {
    if (*(_DWORD *)(a1 + 76) == 8) {
      goto LABEL_24;
    }
    return 4294943589;
  }
  if (v10 != 8 || *(_DWORD *)(a1 + 76) != 4) {
    return 4294943589;
  }
LABEL_24:
  unsigned int v11 = *(_DWORD *)(a1 + 112);
  BOOL v12 = v11 == 4;
  if (v11 > 4) {
    return 4294943596;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 108);
  if (v12 && v13 && (*(_DWORD *)(a1 + 136) - 10) < 0xFFFFFFF9) {
    return 4294943596;
  }
  if (!*(void *)a1 || !*(void *)(a1 + 16) || v8 <= 1 && (!*(void *)(a1 + 8) || !*(void *)(a1 + 24))) {
    return 4294943591;
  }
  if (*(_DWORD *)(a1 + 96) > 1u) {
    return 4294943593;
  }
  if (*(_DWORD *)(a1 + 140)) {
    return 4294943596;
  }
  if (*(_DWORD *)(a1 + 84) > 5u || *(_DWORD *)(a1 + 88) > 0x7Fu || *(_DWORD *)(a1 + 92) > 5u) {
    return 4294943593;
  }
  uint64_t v6 = 4294943593;
  if (v13 <= 0x10 && *(_DWORD *)(a1 + 100) <= 0xCu)
  {
    if (*(_DWORD *)(a1 + 144) > 6u || *(_DWORD *)(a1 + 148) > 0x7Fu) {
      return 4294943593;
    }
    if (v9 != 12) {
      return 0;
    }
    if (*(void *)(a1 + 56) && *(void *)(a1 + 64))
    {
      if ((*(_DWORD *)(a1 + 52) - 8) < 0xFFFFFFF9) {
        return 4294943589;
      }
      return 0;
    }
    return 4294943591;
  }
  return v6;
}

uint64_t sub_1BBB4EE18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1BBB4EBFC(a2);
  if (v4) {
    return v4;
  }
  uint64_t v5 = *a1;
  if (!*(_DWORD *)(a2 + 192))
  {
    *(void *)(a2 + 144) = 0;
    if (v5) {
      goto LABEL_4;
    }
LABEL_7:
    operator new();
  }
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  if (!sub_1BBB39D1C(v5, *(_DWORD *)(a2 + 152), *(_DWORD *)(a2 + 160), *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 156), *(_DWORD *)(a2 + 164), *(_DWORD *)(a2 + 172), *(_DWORD *)(a2 + 108), *(_DWORD *)(a2 + 80), *(_DWORD *)(a2 + 112), (_DWORD *)(a2 + 48)))
  {
    *(_DWORD *)(v5 + 480) = *(_DWORD *)(a2 + 80);
    int v6 = *(_DWORD *)(a2 + 160);
    int v7 = *(_DWORD *)(a2 + 168);
    int v8 = *(_DWORD *)(a2 + 176);
    *(_DWORD *)(v5 + 22368) = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(v5 + 22372) = v6;
    *(_DWORD *)(v5 + 22304) = v7;
    *(_DWORD *)(v5 + 22308) = v8;
    int v9 = *(_DWORD *)(a2 + 164);
    int v10 = *(_DWORD *)(a2 + 172);
    int v11 = *(_DWORD *)(a2 + 180);
    *(_DWORD *)(v5 + 22376) = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(v5 + 22380) = v9;
    *(_DWORD *)(v5 + 22312) = v10;
    *(_DWORD *)(v5 + 22316) = v11;
    sub_1BBB38DE4(v5, (unsigned int *)(a2 + 48), *(_DWORD *)(a2 + 80));
    signed int v12 = *(__int16 *)(a2 + 144);
    signed int v13 = *(__int16 *)(a2 + 148);
    if (v12 <= -127) {
      signed int v12 = -127;
    }
    if (v12 >= 127) {
      LOWORD(v12) = 127;
    }
    if ((v12 & 0xFFFE) != 0) {
      signed int v12 = (unsigned __int16)v12;
    }
    else {
      signed int v12 = 1;
    }
    if (v13 <= -255) {
      signed int v13 = -255;
    }
    if (v13 >= 255) {
      signed int v13 = 255;
    }
    int16x8_t v14 = vdupq_n_s16(v13);
    *(int16x8_t *)(v5 + 416) = vdupq_n_s16(v12);
    *(int16x8_t *)(v5 + 432) = vdupq_n_s16(4096 / (__int16)v12);
    *(int16x8_t *)(v5 + 448) = v14;
    *(int16x8_t *)(v5 + 464) = v14;
    sub_1BBB39E18(v5, *(_DWORD *)(a2 + 112), (void *)(a2 + 120), *(_DWORD *)(a2 + 108), *(_DWORD *)(a2 + 136));
  }
  *(_DWORD *)(v5 + 492) = *(_DWORD *)(a2 + 100);
  return v4;
}

void sub_1BBB4EFA0(void *a1)
{
}

uint64_t sub_1BBB4EFD8(uint64_t a1, int8x8_t *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294943592;
  }
  if (!*(void *)a2
    || !*(void *)&a2[2]
    || (a2[5].i32[0] - 1) <= 1 && (!*(void *)&a2[1] || !*(void *)&a2[3]))
  {
    return 4294943591;
  }
  __int32 v4 = a2[23].i32[1];
  if (v4)
  {
    __int32 v4 = a2[25].i32[1];
    __int32 v5 = a2[29].i32[1];
    uint32x2_t v6 = vmin_u32((uint32x2_t)vand_s8(a2[11], (int8x8_t)0xFF000000FFLL), (uint32x2_t)0x60000007FLL);
  }
  else
  {
    __int32 v5 = 0;
    uint32x2_t v6 = 0;
  }
  *(unsigned char *)(a1 + 243) = v6.i8[0];
  *(unsigned char *)(a1 + 242) = v6.i8[4];
  *(_DWORD *)(a1 + 248) = v4;
  *(_DWORD *)(a1 + 256) = v5;
  __int32 v8 = a2[23].i32[0];
  if (v8) {
    __int32 v8 = a2[10].i32[1];
  }
  uint64_t v9 = a1 + 22304;
  *(unsigned char *)(a1 + 312) = v8;
  *(unsigned char *)(a1 + 245) = a2[24].i32[1] != 0;
  sub_1BBB389D4(a1);
  *(unsigned char *)(a1 + 246) = a2[6].i32[0] == 8;
  if (!a2[24].i32[0]) {
    a2[18] = 0;
  }
  if (a2[6].i32[0] == 10)
  {
    for (uint64_t i = 0; i != 6; ++i)
      *(_WORD *)(a1 + 22274 + 2 * i) = a2[26].i32[i + 1];
  }
  *(_DWORD *)(v9 + 144) = a2[25].i32[0];
  *(unsigned char *)(v9 + 208) = a2[26].i8[0];
  if (sub_1BBB39D1C(a1, a2[19].u32[0], a2[20].u32[0], a2[21].u32[0], a2[19].u32[1], a2[20].u32[1], a2[21].u32[1], a2[13].i32[1], a2[10].i32[0], a2[14].i32[0], &a2[6]))
  {
    uint64_t result = sub_1BBB4EBFC((uint64_t)a2);
    if (result) {
      return result;
    }
    __int32 v11 = a2[20].i32[0];
    __int32 v12 = a2[21].i32[0];
    __int32 v13 = a2[22].i32[0];
    *(_DWORD *)(v9 + 64) = a2[19].i32[0];
    *(_DWORD *)(v9 + 68) = v11;
    *(_DWORD *)uint64_t v9 = v12;
    *(_DWORD *)(v9 + 4) = v13;
    __int32 v14 = a2[20].i32[1];
    __int32 v15 = a2[21].i32[1];
    __int32 v16 = a2[22].i32[1];
    *(_DWORD *)(v9 + 72) = a2[19].i32[1];
    *(_DWORD *)(v9 + 76) = v14;
    *(_DWORD *)(v9 + 8) = v15;
    *(_DWORD *)(v9 + 12) = v16;
    sub_1BBB38DE4(a1, (unsigned int *)&a2[6], a2[10].i32[0]);
    signed int v17 = a2[18].i16[0];
    signed int v18 = a2[18].i16[2];
    if (v17 <= -127) {
      signed int v17 = -127;
    }
    if (v17 >= 127) {
      LOWORD(v17) = 127;
    }
    if ((v17 & 0xFFFE) != 0) {
      signed int v17 = (unsigned __int16)v17;
    }
    else {
      signed int v17 = 1;
    }
    if (v18 <= -255) {
      signed int v18 = -255;
    }
    if (v18 >= 255) {
      signed int v18 = 255;
    }
    int16x8_t v19 = vdupq_n_s16(v18);
    *(int16x8_t *)(a1 + 416) = vdupq_n_s16(v17);
    *(int16x8_t *)(a1 + 432) = vdupq_n_s16(4096 / (__int16)v17);
    *(int16x8_t *)(a1 + 448) = v19;
    *(int16x8_t *)(a1 + 464) = v19;
    sub_1BBB39E18(a1, a2[14].i32[0], &a2[15], a2[13].i32[1], a2[17].u32[0]);
  }
  __int32 v20 = a2[12].i32[1];
  if ((v20 - 1) <= 0xB) {
    *(_DWORD *)(a1 + 492) = v20;
  }
  __int32 v21 = a2[5].i32[0];
  *(unsigned char *)(a1 + 489) = a2[13].i8[0];
  int v22 = (__CVBuffer *)a2[4];
  if (!v22)
  {
    BOOL v26 = v21 == 1;
    uint64_t v27 = (uint64_t)*a2;
    uint64_t v28 = (uint64_t)a2[1];
    uint64_t v29 = (uint64_t)a2[2];
    uint64_t v30 = (uint64_t)a2[3];
    uint64_t v31 = a1;
LABEL_48:
    sub_1BBB3A740(v31, v27, v28, v29, v30, v26);
    return 0;
  }
  uint64_t v24 = (uint64_t)a2[2];
  uint64_t v23 = (uint64_t)a2[3];
  sub_1BBB3A4FC(a1);
  *(void *)(a1 + 22344) = v24;
  *(void *)(a1 + 22352) = v23;
  if ((CVPixelBufferGetPixelFormatType(v22) | 0x10) != 0x34323076)
  {
    fwrite("Unsupported CVPixelBuffer format\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    return 0;
  }
  if (v21 != 1) {
    return 0;
  }
  *(void *)(a1 + 22328) = CVPixelBufferGetBaseAddressOfPlane(v22, 0);
  *(void *)(a1 + 22336) = CVPixelBufferGetBaseAddressOfPlane(v22, 1uLL);
  *(_DWORD *)uint64_t v9 = CVPixelBufferGetBytesPerRowOfPlane(v22, 0);
  *(_DWORD *)(v9 + 4) = CVPixelBufferGetBytesPerRowOfPlane(v22, 1uLL);
  if (!*(unsigned char *)(a1 + 246) && (int v32 = *(_DWORD *)(v9 + 80), v32 != 11) && v32 != 7
    || (unint64_t v25 = *(void **)(a1 + 232)) == 0
    && (unint64_t v25 = malloc_type_calloc(0x38uLL, 1uLL, 0x4AE20AB7uLL), (*(void *)(a1 + 232) = v25) == 0)
    || (long long v34 = *(_OWORD *)(v9 + 40),
        uint64_t v33 = *(void *)(a1 + 22312),
        uint64_t result = sub_1BBB09E1C((uint64_t)v25, v22, (char **)&v34, (unsigned int *)&v33, *(_DWORD *)(v9 + 64), *(_DWORD *)(v9 + 68), *(_DWORD *)(v9 + 72), *(_DWORD *)(v9 + 76), *(_DWORD *)(v9 + 80)), result))
  {
    uint64_t v27 = *(void *)(a1 + 22328);
    uint64_t v28 = *(void *)(a1 + 22336);
    uint64_t v31 = a1;
    uint64_t v29 = v24;
    uint64_t v30 = v23;
    BOOL v26 = 1;
    goto LABEL_48;
  }
  return result;
}

void sub_1BBB4F3C0(void *a1)
{
  uint64_t v2 = a1[29];
  if (v2)
  {
    if (*(void *)v2) {
      CFRelease(*(CFTypeRef *)v2);
    }
    unsigned int v3 = *(const void **)(v2 + 16);
    if (v3) {
      CFRelease(v3);
    }
    __int32 v4 = *(const void **)(v2 + 32);
    if (v4) {
      CFRelease(v4);
    }
    __int32 v5 = *(const void **)(v2 + 40);
    if (v5) {
      CFRelease(v5);
    }
    uint32x2_t v6 = *(char **)(v2 + 48);
    if (v6) {
      sub_1BBB0A254(v6);
    }
    free((void *)v2);
  }
  a1[29] = 0;
  int v7 = (void *)a1[44];
  if (v7) {
    free(v7);
  }
  __int32 v8 = (void *)a1[46];
  if (v8) {
    free(v8);
  }
  uint64_t v9 = (void *)a1[34];
  if (v9) {
    free(v9);
  }
  int v10 = (void *)a1[2807];
  if (v10) {
    free(v10);
  }
  __int32 v11 = (void *)a1[2808];
  if (v11) {
    free(v11);
  }
  __int32 v12 = (void *)a1[2811];
  if (v12) {
    free(v12);
  }
  __int32 v13 = (void *)a1[2813];
  if (v13) {
    free(v13);
  }
  __int32 v14 = (void *)a1[2812];
  if (v14) {
    free(v14);
  }
  __int32 v15 = (void *)a1[62];
  if (v15)
  {
    free(v15);
    a1[62] = 0;
  }

  JUMPOUT(0x1C18605E0);
}

uint64_t sub_1BBB4F4C8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int32 v4 = (unsigned __int8 *)&unk_1BBB93EA8 + a1;
  unint64_t v5 = *v4;
  unint64_t v6 = v4[16];
  uint64_t v7 = a2;
  if ((v5 & 1) != 0 || (uint64_t v7 = a3) != 0)
  {
    int v8 = *(unsigned __int8 *)(v7 + ((v5 >> 1) & 0xF));
    LODWORD(v7) = 1;
    if (v6) {
      goto LABEL_7;
    }
  }
  else
  {
    int v8 = 0;
    if (v6) {
      goto LABEL_7;
    }
  }
  a2 = a4;
  if (!a4)
  {
    int v10 = 0;
    int v9 = 0;
    return byte_1BBB8D588[(unint64_t)((v10 & v7) + v8 + v9) >> (v10 & v7)];
  }
LABEL_7:
  int v9 = *(unsigned __int8 *)(a2 + ((v6 >> 1) & 0xF));
  int v10 = 1;
  return byte_1BBB8D588[(unint64_t)((v10 & v7) + v8 + v9) >> (v10 & v7)];
}

uint64_t sub_1BBB4F548(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if ((a1 & 1) != 0 || (uint64_t v4 = a3) != 0)
  {
    int v5 = *(unsigned __int8 *)(v4 + byte_1BBB8D599[a1]);
    LODWORD(v4) = 1;
  }
  else
  {
    int v5 = 0;
  }
  if ((a1 & 0xFFFFFFFE) == 2 || (a2 = a4) != 0)
  {
    int v6 = *(unsigned __int8 *)(a2 + byte_1BBB8D599[a1 + 4]);
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
    int v6 = 0;
  }
  return byte_1BBB8D588[(unint64_t)((v7 & v4) + v5 + v6) >> (v7 & v4)];
}

FILE *sub_1BBB4F5C8(uint64_t a1)
{
  *(unsigned char *)(a1 + 532) = 1;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(a1 + 36);
    if (v3)
    {
      for (unint64_t i = 0; i < v3; ++i)
      {
        int v5 = *(void **)(*(void *)(a1 + 48) + 8 * i);
        if (v5)
        {
          free(v5);
          unint64_t v3 = *(unsigned int *)(a1 + 36);
        }
      }
      uint64_t v2 = *(void **)(a1 + 48);
    }
    free(v2);
    *(void *)(a1 + 48) = 0;
  }
  int v6 = *(void **)(a1 + 56);
  if (v6)
  {
    unint64_t v7 = *(unsigned int *)(a1 + 36);
    if (v7)
    {
      for (unint64_t j = 0; j < v7; ++j)
      {
        int v9 = *(void **)(*(void *)(a1 + 56) + 8 * j);
        if (v9)
        {
          free(v9);
          unint64_t v7 = *(unsigned int *)(a1 + 36);
        }
      }
      int v6 = *(void **)(a1 + 56);
    }
    free(v6);
    *(void *)(a1 + 56) = 0;
    free(*(void **)(a1 + 64));
    *(void *)(a1 + 64) = 0;
  }
  int v10 = *(void **)(a1 + 72);
  if (v10)
  {
    free(v10);
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  sub_1BBB4EA68(a1 + 80);
  if (*(void *)a1)
  {
    sub_1BBB20EEC(*(void *)a1);
    free(*(void **)a1);
  }
  *(void *)a1 = 0;
  __int32 v11 = *(void **)(a1 + 24);
  if (v11) {
    free(v11);
  }
  *(void *)(a1 + 24) = 0;
  __int32 v12 = *(void **)(a1 + 520);
  if (v12) {
    free(v12);
  }
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  uint64_t result = *(FILE **)(a1 + 536);
  if (result)
  {
    uint64_t result = (FILE *)fclose(result);
    *(void *)(a1 + 536) = 0;
  }
  return result;
}

uint64_t sub_1BBB4F6E8(uint64_t a1, uint64_t *a2, int a3, unsigned __int8 a4)
{
  uint64_t v6 = *a2;
  if (*a2) {
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 176) != 1;
  }
  uint64_t v7 = a2[1];
  if (v7) {
    LODWORD(v7) = *(unsigned __int8 *)(v7 + 176) != 1;
  }
  int v8 = v7 + v6;
  if (a3 == 6 || a3 == 1) {
    unsigned int v9 = v8 | 0x18;
  }
  else {
    unsigned int v9 = v8 + 11;
  }
  uint64_t result = sub_1BBAF9F54(a1, a4, (unsigned char *)(a1 + 2 * v9 + 48));
  *(unsigned char *)(a2[2] + 176) = a4;
  return result;
}

uint64_t sub_1BBB4F76C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a2)
  {
    uint64_t v4 = 399;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v5 = 0;
    return sub_1BBAF9F54(a1, a4 != 0, (unsigned char *)(a1 + 2 * (v4 + v5) + 48));
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 199) + 399;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v5 = *(unsigned __int8 *)(a3 + 199);
  return sub_1BBAF9F54(a1, a4 != 0, (unsigned char *)(a1 + 2 * (v4 + v5) + 48));
}

uint64_t sub_1BBB4F7A8(uint64_t a1, int a2, unsigned char *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a2)
  {
    int v5 = a2;
    sub_1BBAF9F54(a1, 1, a3);
    for (v3 += 2; --v5; sub_1BBAF9F54(v4, 1, v3))
      ;
    a1 = v4;
  }

  return sub_1BBAF9F54(a1, 0, v3);
}

uint64_t sub_1BBB4F830(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  if ((0x505uLL >> a4))
  {
    uint64_t v10 = *a3;
    if (!*a3) {
      goto LABEL_10;
    }
    unsigned int v12 = *(unsigned __int8 *)(v10 + 177);
    if (v12 < 6 && ((0x33u >> v12) & 1) != 0) {
      goto LABEL_10;
    }
    unsigned int v11 = *(unsigned __int16 *)(*(void *)(v10 + 160) + 10);
  }
  else
  {
    uint64_t v10 = a3[2];
    unsigned int v11 = a5;
  }
  uint64_t v13 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * v11 + byte_1BBB8DE34[a4]);
  if ((*(unsigned char *)(v10 + 16 * (a6 != 0) + v13 + 128) & 0xDF) == 0)
  {
LABEL_10:
    BOOL v15 = 0;
    goto LABEL_12;
  }
  int v14 = *(unsigned __int8 *)(v10 + v13 + 183);
  if (a6) {
    BOOL v15 = (v14 - 5) < 2;
  }
  else {
    BOOL v15 = (v14 & 0xFFFFFFFD) == 4;
  }
LABEL_12:
  if ((0x33uLL >> a4))
  {
    uint64_t v16 = a3[1];
    if (!v16) {
      goto LABEL_21;
    }
    unsigned int v18 = *(unsigned __int8 *)(v16 + 177);
    if (v18 < 6 && ((0x33u >> v18) & 1) != 0) {
      goto LABEL_21;
    }
    unsigned int v17 = *(unsigned __int16 *)(*(void *)(v16 + 160) + 10);
  }
  else
  {
    uint64_t v16 = a3[2];
    unsigned int v17 = a5;
  }
  uint64_t v19 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * v17 + byte_1BBB8DE54[a4]);
  if ((*(unsigned char *)(v16 + 16 * (a6 != 0) + v19 + 128) & 0xDF) == 0)
  {
LABEL_21:
    uint64_t v22 = 0;
    goto LABEL_24;
  }
  int v20 = *(unsigned __int8 *)(v16 + v19 + 183);
  if (a6) {
    BOOL v21 = (v20 - 7) > 0xFFFFFFFD;
  }
  else {
    BOOL v21 = (v20 & 0xFFFFFFFD) == 4;
  }
  uint64_t v22 = 2 * v21;
LABEL_24:
  uint64_t v23 = (unsigned char *)(a2 + 2 * (v22 | v15) + 156);
  if (a7)
  {
    sub_1BBAF9F54(a1, 1, v23);
    return sub_1BBB4F7A8(a1, a7 - 1, (unsigned char *)(a2 + 164));
  }
  else
  {
    return sub_1BBAF9F54(a1, 0, v23);
  }
}

uint64_t sub_1BBB4FA1C(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int a4, unsigned __int16 a5, unsigned int a6, int a7, int a8)
{
  uint64_t v15 = byte_1BBB8DE54[a4];
  if ((0x33uLL >> a4))
  {
    unint64_t v19 = a3[1];
    if (!v19
      || ((unsigned int v20 = *(unsigned __int8 *)(v19 + 177), !*(unsigned char *)(v19 + 178)) ? (v21 = v20 == 3) : (v21 = 0),
          v21 || v20 < 6 && ((0x33u >> v20) & 1) != 0))
    {
      int v18 = 0;
      goto LABEL_15;
    }
    uint64_t v16 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * *(unsigned __int16 *)(*(void *)(v19 + 160) + 10) + v15);
    unint64_t v17 = v19 + ((unint64_t)(a7 != 0) << 6);
  }
  else
  {
    uint64_t v16 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * a5 + v15);
    unint64_t v17 = a3[2] + ((unint64_t)(a7 != 0) << 6);
  }
  int v18 = *(__int16 *)(v17 + 4 * v16 + 2 * a6);
  if (v18 < 0) {
    int v18 = -v18;
  }
  else {
    int v18 = (unsigned __int16)v18;
  }
LABEL_15:
  uint64_t v22 = byte_1BBB8DE34[a4];
  if ((0x505uLL >> a4))
  {
    unint64_t v24 = *a3;
    if (!*a3) {
      goto LABEL_29;
    }
    unsigned int v25 = *(unsigned __int8 *)(v24 + 177);
    if (*(unsigned char *)(v24 + 178)) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v25 == 3;
    }
    if (v26 || v25 < 6 && ((0x33u >> v25) & 1) != 0)
    {
      LODWORD(v24) = 0;
      goto LABEL_29;
    }
    uint64_t v23 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * *(unsigned __int16 *)(*(void *)(v24 + 160) + 10) + v22);
    v24 += (unint64_t)(a7 != 0) << 6;
  }
  else
  {
    uint64_t v23 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * a5 + v22);
    unint64_t v24 = a3[2] + ((unint64_t)(a7 != 0) << 6);
  }
  LODWORD(v24) = *(__int16 *)(v24 + 4 * v23 + 2 * a6);
  if ((v24 & 0x80000000) != 0) {
    LODWORD(v24) = -(int)v24;
  }
  else {
    LODWORD(v24) = (unsigned __int16)v24;
  }
LABEL_29:
  unsigned int v27 = v24 + v18;
  int v28 = 7 * a6;
  int v29 = 7 * a6 + 41;
  if (v27 >= 0x21) {
    int v29 = 7 * a6 + 42;
  }
  if (v27 <= 2) {
    unsigned int v30 = v28 + 40;
  }
  else {
    unsigned int v30 = v29;
  }
  if (a8)
  {
    if (a8 >= 0) {
      LOWORD(v31) = a8;
    }
    else {
      int v31 = -a8;
    }
    unsigned int v32 = (unsigned __int16)v31;
    uint64_t v33 = a2 + 48;
    sub_1BBAF9F54(a1, 1, (unsigned char *)(a2 + 48 + 2 * v30));
    long long v34 = (unsigned char *)(v33 + 2 * (v28 + 43));
    if (v32 == 1) {
      goto LABEL_39;
    }
    sub_1BBAF9F54(a1, 1, v34);
    v34 += 2;
    if (v32 == 2) {
      goto LABEL_39;
    }
    int v36 = 0;
    do
    {
      if (v36 == 7) {
        break;
      }
      sub_1BBAF9F54(a1, 1, v34);
      v34 += 2 * (v36 == 0) + 2 * (v36 == 1);
      ++v36;
    }
    while (v32 - 2 != v36);
    if (v32 <= 8) {
LABEL_39:
    }
      sub_1BBAF9F54(a1, 0, v34);
    else {
      sub_1BBB4FD38(a1, v32 - 9, 3);
    }
    uint64_t result = sub_1BBAFA028(a1, (a8 >> 15) & 1);
  }
  else
  {
    uint64_t result = sub_1BBAF9F54(a1, 0, (unsigned char *)(a2 + 2 * v30 + 48));
  }
  *(_WORD *)(a3[2]
           + ((unint64_t)(a7 != 0) << 6)
           + 4 * *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * a5 + a4)
           + 2 * a6) = a8;
  return result;
}

uint64_t sub_1BBB4FD38(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = a3;
  unsigned int v4 = a2;
  for (int i = 1 << a3; v4 >= 1 << v3; int i = 1 << v3)
  {
    sub_1BBAFA028(a1, 1);
    v4 -= i;
    ++v3;
  }
  uint64_t result = sub_1BBAFA028(a1, 0);
  if (v3)
  {
    int v8 = v3 - 1;
    do
      uint64_t result = sub_1BBAFA028(a1, (v4 >> v8--) & 1);
    while (v8 != -1);
  }
  return result;
}

uint64_t sub_1BBB4FDD0(uint64_t a1, void *a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10)
{
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  LODWORD(v14) = 0;
  do
  {
    int v15 = v14;
    int v16 = *(unsigned __int16 *)(a9 + 2 * v12);
    uint64_t v17 = 1 << v12;
    if (*(_WORD *)(a9 + 2 * v12)) {
      uint64_t v14 = (v14 + 1);
    }
    else {
      uint64_t v14 = v14;
    }
    if (!*(_WORD *)(a9 + 2 * v12)) {
      uint64_t v17 = 0;
    }
    v13 |= v17;
    ++v12;
  }
  while (a10 != v12);
  if (v14)
  {
    sub_1BBB501D8(a1, a1, a2, a3, a4, a5, a6, a7, 1, a10);
    uint64_t v55 = a3;
    int v18 = (int *)&unk_1BBB8D680;
    uint64_t v20 = a3 == 1 || a3 == 7;
    int v21 = dword_1BBB8D660[a3] - (v20 ^ 1);
    if (a8) {
      int v18 = (int *)&unk_1BBB8D6A0;
    }
    uint64_t v22 = (int *)&unk_1BBB8D6C0;
    if (a8) {
      uint64_t v22 = (int *)&unk_1BBB8D6E0;
    }
    uint64_t v23 = &off_1E6248C68;
    if (!a8) {
      uint64_t v23 = &off_1E6248C28;
    }
    if (v21 > (int)v20)
    {
      uint64_t v57 = a1 + 48 + 2 * v18[a3];
      uint64_t v56 = a1 + 48 + 2 * v22[a3];
      unint64_t v24 = (char *)v23[a3];
      uint64_t v25 = v20 << 63 >> 63;
      uint64_t v26 = (uint64_t)*(&off_1E6248CA8 + a3);
      if ((a3 == 7) <= (a3 == 1)) {
        BOOL v27 = a3 == 1;
      }
      else {
        BOOL v27 = a3 == 7;
      }
      uint64_t v28 = v27 - (v27 + v25 + v21);
      int v29 = (int *)(v26 + 4 * v27);
      unsigned int v30 = &v24[4 * v27];
      int v31 = (unsigned __int16 *)(a9 + 2 * v25 + 2 * v27);
      int v32 = v14;
      do
      {
        int v33 = *v31;
        int v61 = v31 + 1;
        uint64_t v34 = *(int *)v30;
        v30 += 4;
        sub_1BBAF9F54(a1, v33 != 0, (unsigned char *)(v57 + 2 * v34));
        if (v33)
        {
          sub_1BBAF9F54(a1, --v32 == 0, (unsigned char *)(v56 + 2 * *v29));
          int v31 = v61;
          if (!v32) {
            break;
          }
        }
        else
        {
          int v31 = v61;
        }
        ++v29;
      }
      while (!__CFADD__(v28++, 1));
    }
    if (a10 > 16)
    {
      int v45 = 0;
      uint64_t v63 = a1 + 48 + 2 * dword_1BBB8DC74[v55];
      uint64_t v59 = a1 + 48 + 2 * dword_1BBB8DC94[v55];
      if (v16) {
        int v46 = v15 + 1;
      }
      else {
        int v46 = v15;
      }
      int v47 = v46 + 1;
      int v48 = 1;
      do
      {
        int v49 = __clz(v13);
        int v50 = *(__int16 *)(a9 + 2 * (63 - v49));
        if (v50 >= 0) {
          unsigned int v51 = *(__int16 *)(a9 + 2 * (63 - v49));
        }
        else {
          unsigned int v51 = -v50;
        }
        if (v48 >= 4) {
          int v52 = 4;
        }
        else {
          int v52 = v48;
        }
        sub_1BBAF9F54(a1, v51 > 1, (unsigned char *)(v63 + 2 * v52));
        if (v51 < 2)
        {
          if (v48) {
            ++v48;
          }
          else {
            int v48 = 0;
          }
        }
        else
        {
          if (v45 >= 4) {
            int v53 = 4;
          }
          else {
            int v53 = v45;
          }
          sub_1BBB503D0(a1, v51 - 2, (unsigned char *)(v59 + 2 * v53));
          int v48 = 0;
          ++v45;
        }
        v13 ^= 1 << ~(_BYTE)v49;
        sub_1BBAFA028(a1, v50 >> 31);
        --v47;
      }
      while (v47 > 1);
    }
    else
    {
      int v36 = 0;
      uint64_t v62 = a1 + 48 + 2 * dword_1BBB8DC74[v55];
      uint64_t v58 = a1 + 48 + 2 * dword_1BBB8DC94[v55];
      if (v16) {
        int v37 = v15 + 1;
      }
      else {
        int v37 = v15;
      }
      int v38 = v37 + 1;
      int v39 = 1;
      do
      {
        unsigned int v40 = __clz(v13);
        int v41 = *(__int16 *)(a9 + 2 * (int)(31 - v40));
        if (v41 >= 0) {
          unsigned int v42 = *(__int16 *)(a9 + 2 * (int)(31 - v40));
        }
        else {
          unsigned int v42 = -v41;
        }
        if (v39 >= 4) {
          int v43 = 4;
        }
        else {
          int v43 = v39;
        }
        sub_1BBAF9F54(a1, v42 > 1, (unsigned char *)(v62 + 2 * v43));
        if (v42 < 2)
        {
          if (v39) {
            ++v39;
          }
          else {
            int v39 = 0;
          }
        }
        else
        {
          if (v36 >= 4) {
            int v44 = 4;
          }
          else {
            int v44 = v36;
          }
          sub_1BBB503D0(a1, v42 - 2, (unsigned char *)(v58 + 2 * v44));
          int v39 = 0;
          ++v36;
        }
        LODWORD(v13) = (0x80000000 >> v40) ^ v13;
        sub_1BBAFA028(a1, v41 >> 31);
        --v38;
      }
      while (v38 > 1);
    }
  }
  else
  {
    sub_1BBB501D8(a1, a1, a2, a3, a4, a5, a6, a7, 0, a10);
  }
  return v14;
}

uint64_t sub_1BBB501D8(uint64_t result, uint64_t a2, void *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11 = a4 == 7;
  if (a4 == 7) {
    char v12 = -2;
  }
  else {
    char v12 = 0;
  }
  if (a5) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = a4 == 7;
  }
  BOOL v14 = a4 == 2 || (a4 & 0xFFFFFFFB) == 1;
  BOOL v15 = v14 || a4 == 7;
  if (v14) {
    char v16 = 12;
  }
  else {
    char v16 = 2 * v11;
  }
  if (v14)
  {
    char v11 = 3;
    char v17 = -4;
  }
  else
  {
    char v17 = v12;
  }
  LODWORD(v18) = a6 != 0;
  BOOL v19 = !v15;
  if (!v15) {
    a8 = 0;
  }
  if (v19) {
    a7 = 0;
  }
  if ((a4 - 1) < 2) {
    goto LABEL_28;
  }
  char v22 = a4;
  if (!a4) {
    goto LABEL_29;
  }
  if (a4 == 5)
  {
LABEL_28:
    char v22 = a7 + 4 * a8 + 1;
  }
  else
  {
    if (a5) {
      BOOL v25 = 0;
    }
    else {
      BOOL v25 = a4 == 6;
    }
    if (v25) {
      char v22 = 17;
    }
    else {
      char v22 = 18;
    }
    if (a4 != 6)
    {
      char v26 = a7 + 2 * a8;
      char v27 = v26 + 23;
      char v28 = v26 + 19;
      if (v13) {
        char v22 = v28;
      }
      else {
        char v22 = v27;
      }
    }
  }
LABEL_29:
  if (a10 == 64)
  {
    uint64_t v23 = a3 + 2;
    *(_DWORD *)(a3[2] + 172) |= 1 << (v22 + 1);
    *(_DWORD *)(a3[2] + 172) |= 1 << (v22 + 4);
    v22 += 5;
LABEL_51:
    *(_DWORD *)(*v23 + 172) |= 1 << v22;
    return result;
  }
  if (a8)
  {
    unint64_t v24 = ((1 << (v22 + v17)) & (unint64_t)*(unsigned int *)(a3[2] + 172)) >> (v22 + v17);
  }
  else
  {
    uint64_t v29 = a3[1];
    LODWORD(v24) = a6 != 0;
    if (v29) {
      unint64_t v24 = ((1 << (v22 + v16)) & (unint64_t)*(unsigned int *)(v29 + 172)) >> (v22 + v16);
    }
  }
  if (a7)
  {
    unint64_t v18 = ((1 << (v22 - 1)) & (unint64_t)*(unsigned int *)(a3[2] + 172)) >> (v22 - 1);
  }
  else if (*a3)
  {
    unint64_t v18 = ((1 << (v22 + v11)) & (unint64_t)*(unsigned int *)(*a3 + 172)) >> (v22 + v11);
  }
  uint64_t result = sub_1BBAF9F54(result, a9, (unsigned char *)(a2 + 2 * ((int)v18 + 2 * (int)v24 + 4 * dword_1BBB8D640[a4] + 85) + 48));
  if (a9)
  {
    uint64_t v23 = a3 + 2;
    goto LABEL_51;
  }
  return result;
}

uint64_t sub_1BBB503D0(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  uint64_t v4 = a1;
  if (!a2)
  {
LABEL_8:
    return sub_1BBAF9F54(a1, 0, a3);
  }
  sub_1BBAF9F54(a1, 1, a3);
  if (a2 == 1) {
    goto LABEL_7;
  }
  int v6 = 1;
  do
  {
    if (v6 == 13) {
      break;
    }
    ++v6;
    sub_1BBAF9F54(v4, 1, a3);
  }
  while (a2 != v6);
  if (a2 <= 0xC)
  {
LABEL_7:
    a1 = v4;
    goto LABEL_8;
  }

  return sub_1BBB4FD38(v4, a2 - 13, 0);
}

uint64_t sub_1BBB5049C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a6 < 1)
  {
    uint16x8_t v20 = 0uLL;
    uint16x8_t v21 = 0uLL;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 2 * a3;
    uint64_t v8 = 2 * a4;
    uint64_t v9 = a2 + a4;
    int16x8_t v10 = 0uLL;
    int16x8_t v11 = 0uLL;
    uint64_t v12 = a1 + a3;
    int16x8_t v13 = 0uLL;
    int16x8_t v14 = 0uLL;
    do
    {
      if (a5 >= 1)
      {
        for (uint64_t i = 0; i < a5; i += 16)
        {
          uint8x16_t v16 = *(uint8x16_t *)(a1 + i);
          uint8x16_t v17 = *(uint8x16_t *)(a2 + i);
          uint8x16_t v18 = *(uint8x16_t *)(v12 + i);
          uint8x16_t v19 = *(uint8x16_t *)(v9 + i);
          int16x8_t v14 = (int16x8_t)vabal_u8((uint16x8_t)v14, *(uint8x8_t *)v16.i8, *(uint8x8_t *)v17.i8);
          int16x8_t v13 = (int16x8_t)vabal_high_u8((uint16x8_t)v13, v16, v17);
          int16x8_t v11 = (int16x8_t)vabal_u8((uint16x8_t)v11, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8);
          int16x8_t v10 = (int16x8_t)vabal_high_u8((uint16x8_t)v10, v18, v19);
        }
      }
      v6 += 2;
      a1 += v7;
      a2 += v8;
      v9 += v8;
      v12 += v7;
    }
    while (v6 < a6);
    uint16x8_t v20 = (uint16x8_t)vaddq_s16(v13, v14);
    uint16x8_t v21 = (uint16x8_t)vaddq_s16(v10, v11);
  }
  return vaddlvq_u16(v21) + vaddlvq_u16(v20);
}

uint64_t sub_1BBB5054C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  if (a6 < 1)
  {
    uint16x8_t v17 = 0uLL;
    uint16x8_t v18 = 0uLL;
  }
  else
  {
    int v7 = 0;
    int16x8_t v8 = 0uLL;
    int16x8_t v9 = 0uLL;
    int16x8_t v10 = 0uLL;
    int16x8_t v11 = 0uLL;
    do
    {
      if (a5 >= 1)
      {
        for (uint64_t i = 0; i < a5; i += 32)
        {
          uint8x16_t v13 = *(uint8x16_t *)(a1 + i);
          uint8x16_t v14 = *(uint8x16_t *)(a1 + i + 16);
          uint8x16_t v15 = *(uint8x16_t *)(a2 + i);
          uint8x16_t v16 = *(uint8x16_t *)(a2 + i + 16);
          int16x8_t v11 = (int16x8_t)vabal_u8((uint16x8_t)v11, *(uint8x8_t *)v13.i8, *(uint8x8_t *)v15.i8);
          int16x8_t v10 = (int16x8_t)vabal_high_u8((uint16x8_t)v10, v13, v15);
          int16x8_t v9 = (int16x8_t)vabal_u8((uint16x8_t)v9, *(uint8x8_t *)v14.i8, *(uint8x8_t *)v16.i8);
          int16x8_t v8 = (int16x8_t)vabal_high_u8((uint16x8_t)v8, v14, v16);
        }
      }
      v7 += a7;
      a1 += a7 * a3;
      a2 += a7 * a4;
    }
    while (v7 < a6);
    uint16x8_t v17 = (uint16x8_t)vaddq_s16(v10, v11);
    uint16x8_t v18 = (uint16x8_t)vaddq_s16(v8, v9);
  }
  return vaddlvq_u16(v18) + vaddlvq_u16(v17);
}

uint64_t sub_1BBB505F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  if (a6 < 1) {
    return 0;
  }
  uint64_t v7 = a7 * a3;
  uint64_t v8 = a7 * a4;
  uint64_t v9 = v7 >= 0 ? a7 * a3 : v7 + 1;
  uint64_t v10 = v8 >= 0 ? a7 * a4 : v8 + 1;
  if (a5 < 1) {
    return 0;
  }
  int v11 = 0;
  uint64_t v12 = (v10 >> 1) + a2 + 16;
  uint64_t v13 = (v9 >> 1) + a1 + 16;
  int16x8_t v14 = 0uLL;
  int16x8_t v15 = 0uLL;
  int16x8_t v16 = 0uLL;
  int16x8_t v17 = 0uLL;
  do
  {
    for (uint64_t i = 0; i < a5; i += 32)
    {
      uint8x16_t v19 = *(uint8x16_t *)(a1 + i);
      uint8x16_t v20 = *(uint8x16_t *)(a2 + i);
      uint8x16_t v21 = *(uint8x16_t *)(v13 + i);
      uint8x16_t v22 = *(uint8x16_t *)(v12 + i);
      int16x8_t v17 = (int16x8_t)vabal_u8((uint16x8_t)v17, *(uint8x8_t *)v19.i8, *(uint8x8_t *)v20.i8);
      int16x8_t v16 = (int16x8_t)vabal_high_u8((uint16x8_t)v16, v19, v20);
      int16x8_t v15 = (int16x8_t)vabal_u8((uint16x8_t)v15, *(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8);
      int16x8_t v14 = (int16x8_t)vabal_high_u8((uint16x8_t)v14, v21, v22);
    }
    v11 += a7;
    a1 += v7;
    a2 += v8;
    v12 += v8;
    v13 += v7;
  }
  while (v11 < a6);
  return vaddlvq_u16((uint16x8_t)vaddq_s16(v16, v17)) + vaddlvq_u16((uint16x8_t)vaddq_s16(v14, v15));
}

uint64_t sub_1BBB506C0()
{
  return 0;
}

pthread_mutex_t *sub_1BBB506C8(uint64_t a1, unsigned int a2, char a3, char a4, char a5, char a6)
{
  if (*(_DWORD *)(a1 + 20) < a2) {
    return (pthread_mutex_t *)4294958327;
  }
  uint64_t v13 = *(pthread_mutex_t **)(a1 + 64);
  if (v13) {
    pthread_mutex_lock(v13);
  }
  unsigned int v14 = *(_DWORD *)(a1 + 56);
  if (v14 >= a2 + 1)
  {
    int16x8_t v16 = *(unsigned char **)(a1 + 48);
    goto LABEL_17;
  }
  if (2 * (a2 + 1) >= *(_DWORD *)(a1 + 20)) {
    unsigned int v15 = *(_DWORD *)(a1 + 20);
  }
  else {
    unsigned int v15 = 2 * (a2 + 1);
  }
  if (v15)
  {
    int16x8_t v16 = malloc_type_malloc(12 * v15, 0x4CF1F002uLL);
    if (!*(_DWORD *)(a1 + 56)) {
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      uint8x16_t v19 = (uint64_t *)(*(void *)(a1 + 48) + v17);
      uint8x16_t v20 = &v16[v17];
      uint64_t v21 = *v19;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v19 + 2);
      *(void *)uint8x16_t v20 = v21;
      ++v18;
      v17 += 12;
    }
    while (v18 < *(unsigned int *)(a1 + 56));
    goto LABEL_16;
  }
  int16x8_t v16 = 0;
  if (v14) {
    goto LABEL_14;
  }
LABEL_16:
  free(*(void **)(a1 + 48));
  *(void *)(a1 + 48) = v16;
  *(_DWORD *)(a1 + 56) = v15;
LABEL_17:
  v16[12 * a2 + 9] = a4;
  *(unsigned char *)(*(void *)(a1 + 48) + 12 * a2 + 10) = 2 * a5;
  *(unsigned char *)(*(void *)(a1 + 48) + 12 * a2 + 11) = 2 * a6;
  *(unsigned char *)(*(void *)(a1 + 48) + 12 * a2 + 8) = a3;
  uint64_t result = *(pthread_mutex_t **)(a1 + 64);
  if (result)
  {
    pthread_mutex_unlock(result);
    return 0;
  }
  return result;
}

uint64_t sub_1BBB5081C(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  unsigned int v63 = a4;
  if (a4 < a5)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(unsigned int *)(*(void *)(result + 80) + 136);
    unsigned int v56 = 2 * v6;
    uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))&unk_1E9F83000;
    uint64_t v58 = result;
    uint64_t v57 = v6;
    do
    {
      if (a2 < a3)
      {
        uint64_t v8 = (unsigned __int8 *)(*(void *)(result + 152) + 48 * (a2 + *(_DWORD *)(result + 12) * v63));
        int v9 = 16 * v63;
        uint64_t v10 = a2;
        do
        {
          int v11 = *(unsigned __int8 **)(result + 80);
          if (*(_DWORD *)(result + 188) && v11[3])
          {
            int v12 = v11[5];
            int v13 = *v11;
            uint64_t v14 = *((void *)v11 + 4) + (16 * v10);
            int v15 = *((_DWORD *)v11 + 34);
            uint64_t v16 = v14 + (v9 * v15);
            uint64_t v17 = v56;
            if (v13)
            {
              uint64_t v16 = v14 + 32 * v63 * v15;
              int v18 = 32 * v63;
            }
            else
            {
              int v18 = v9;
            }
            uint64_t v19 = v14 + v6 + (v18 * v15);
            if (v12) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = v16;
            }
          }
          else
          {
            uint64_t v20 = *((void *)v11 + 4) + (16 * v10) + (v9 * *((_DWORD *)v11 + 34));
            uint64_t v17 = v6;
          }
          if ((v8[16] & 0xC0) + *v8 <= 0x7F)
          {
            uint64_t v62 = (int)(v10 + *(_DWORD *)(result + 12) * v63);
            uint64_t v21 = *(void *)(result + 48) + 12 * *(unsigned __int16 *)(*(void *)(result + 72) + 2 * v62);
            int v22 = *(char *)(v21 + 10);
            int v23 = *(char *)(v21 + 11);
            uint64_t v24 = *(void *)(result + 112);
            int v25 = *(unsigned __int8 *)(v24 + v62);
            int v60 = v22;
            int v61 = v23;
            int v26 = v25 + v22;
            if (v25 + v22 >= 51) {
              int v26 = 51;
            }
            uint64_t v27 = v26 & ~(v26 >> 31);
            int v59 = *(unsigned __int8 *)(v24 + v62);
            int v28 = v25 + v23;
            if (v28 >= 51) {
              int v28 = 51;
            }
            uint64_t v29 = byte_1BBB8DCB4[v27];
            uint64_t v30 = byte_1BBB8DCF4[v28 & ~(v28 >> 31)];
            for (uint64_t i = 4; i != 16; ++i)
            {
              int v32 = &byte_1BBB8DD34[4 * v27];
              v65[i] = v32[v8[i]];
              v64[i] = v32[v8[i + 16]];
            }
            unsigned int v33 = *v8;
            if (v33 <= 0x3F)
            {
              if (v10 && v33 <= 0x1F)
              {
                unsigned int v34 = v25 + *(unsigned __int8 *)(v62 + v24 - 1) + 1;
                int v35 = v22 + (v34 >> 1);
                if (v35 >= 51) {
                  int v35 = 51;
                }
                uint64_t v36 = v35 & ~(v35 >> 31);
                int v37 = v61 + (v34 >> 1);
                if (v37 >= 51) {
                  int v37 = 51;
                }
                uint64_t v38 = byte_1BBB8DCB4[v36];
                uint64_t v39 = byte_1BBB8DCF4[v37 & ~(v37 >> 31)];
                if (v33 > 3)
                {
                  off_1E9F83350(v20, v17, v38, v39);
                }
                else
                {
                  for (uint64_t j = 0; j != 4; ++j)
                    v65[j] = byte_1BBB8DD34[4 * v36 + v8[j]];
                  v7[104](v20, v17, v38, v39, v65);
                }
              }
              unint64_t v41 = 4;
              do
              {
                if (v8[v41] <= 0x1Fu) {
                  v7[104](v20 + v41, v17, v29, v30, &v65[v41]);
                }
                BOOL v42 = v41 >= 0xC;
                v41 += 4;
              }
              while (!v42);
            }
            unsigned int v43 = v8[16];
            if (v43 <= 0x3F)
            {
              if (v63 && v43 <= 0x1F)
              {
                unsigned int v44 = v59
                    + *(unsigned __int8 *)(*(void *)(v58 + 112) + (v62 - *(_DWORD *)(v58 + 12)))
                    + 1;
                int v45 = v60 + (v44 >> 1);
                if (v45 >= 51) {
                  int v45 = 51;
                }
                uint64_t v46 = v45 & ~(v45 >> 31);
                int v47 = v61 + (v44 >> 1);
                if (v47 >= 51) {
                  int v47 = 51;
                }
                uint64_t v48 = byte_1BBB8DCB4[v46];
                uint64_t v49 = byte_1BBB8DCF4[v47 & ~(v47 >> 31)];
                if (v43 > 3)
                {
                  off_1E9F83348(v20, v17, v48, v49);
                }
                else
                {
                  for (uint64_t k = 0; k != 4; ++k)
                    v64[k] = byte_1BBB8DD34[4 * v46 + v8[k + 16]];
                  off_1E9F83338(v20, v17, v48, v49, v64);
                }
              }
              unint64_t v51 = 0;
              uint64_t v52 = v20 + 4 * (int)v17;
              do
              {
                if (v8[v51 + 20] <= 0x1Fu) {
                  off_1E9F83338(v52, v17, v29, v30, &v64[v51 + 4]);
                }
                v51 += 4;
                v52 += 4 * (int)v17;
              }
              while (v51 < 0xC);
            }
            uint64_t result = v58;
            uint64_t v6 = v57;
            uint64_t v5 = a3;
            uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))&unk_1E9F83000;
            int v9 = 16 * v63;
          }
          v8 += 48;
          ++v10;
        }
        while (v10 != v5);
      }
      ++v63;
    }
    while (v63 != a5);
  }
  return result;
}

uint64_t sub_1BBB50CD8(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  v103[2] = *MEMORY[0x1E4F143B8];
  unsigned int v89 = a4;
  if (a4 < a5)
  {
    uint64_t v5 = result;
    uint64_t v6 = (unsigned __int8 *)(*(void *)(result + 152) + 48 * (a2 + *(_DWORD *)(result + 12) * a4));
    uint64_t result = *(unsigned int *)(*(void *)(result + 80) + 152);
    unsigned int v87 = 2 * result;
    uint64_t v7 = a3;
    uint64_t v88 = result;
    do
    {
      if (a2 < a3)
      {
        int v8 = 8 * v89;
        int v9 = v6 + 24;
        uint64_t v10 = a2;
        do
        {
          int v11 = *(unsigned __int8 **)(v5 + 80);
          if (*(_DWORD *)(v5 + 188) && v11[3])
          {
            int v12 = v11[5];
            int v13 = *v11;
            uint64_t v14 = *((void *)v11 + 5) + (16 * v10);
            int v15 = *((_DWORD *)v11 + 38);
            uint64_t v16 = v14 + (v8 * v15);
            if (v13)
            {
              uint64_t v16 = v14 + 16 * v89 * v15;
              int v17 = 16 * v89;
            }
            else
            {
              int v17 = v8;
            }
            uint64_t v18 = v14 + result + (v17 * v15);
            if (v12) {
              uint64_t v19 = v18;
            }
            else {
              uint64_t v19 = v16;
            }
            unsigned int v20 = v87;
          }
          else
          {
            uint64_t v19 = *((void *)v11 + 5) + (16 * v10) + (v8 * *((_DWORD *)v11 + 38));
            unsigned int v20 = result;
          }
          if ((v6[16] & 0xC0) + *v6 <= 0x7F)
          {
            uint64_t v90 = v19;
            unsigned int v91 = v20;
            int v21 = v10 + *(_DWORD *)(v5 + 12) * v89;
            uint64_t v22 = *(void *)(v5 + 48) + 12 * *(unsigned __int16 *)(*(void *)(v5 + 72) + 2 * v21);
            int v23 = *(char *)(v22 + 10);
            int v24 = *(char *)(v22 + 11);
            uint64_t v25 = *(void *)(v5 + 120);
            uint64_t v26 = *(void *)(v5 + 128);
            int v27 = *(unsigned __int8 *)(v25 + v21);
            int v28 = *(unsigned __int8 *)(v26 + v21);
            int v29 = v27 + v23;
            if (v27 + v23 >= 51) {
              int v29 = 51;
            }
            uint64_t v30 = v29 & ~(v29 >> 31);
            int v31 = v28 + v23;
            if (v28 + v23 >= 51) {
              int v31 = 51;
            }
            uint64_t v32 = v31 & ~(v31 >> 31);
            int v33 = v27 + v24;
            if (v27 + v24 >= 51) {
              int v33 = 51;
            }
            int v34 = v33 & ~(v33 >> 31);
            int v35 = v28 + v24;
            if (v28 + v24 >= 51) {
              int v35 = 51;
            }
            unsigned __int8 v36 = byte_1BBB8DCB4[v32];
            unsigned __int8 v37 = byte_1BBB8DCF4[v34];
            unsigned __int8 v38 = byte_1BBB8DCF4[v35 & ~(v35 >> 31)];
            v97[0] = byte_1BBB8DCB4[v30];
            v97[1] = v36;
            uint64_t v39 = v21;
            v96[0] = v37;
            v96[1] = v38;
            unsigned int v40 = v9;
            for (uint64_t i = 16; i != 24; i += 2)
            {
              uint64_t v42 = *(v40 - 16);
              unsigned int v43 = &byte_1BBB8DD34[4 * v30];
              unsigned int v44 = &v102[i - 1];
              *unsigned int v44 = v43[v42];
              int v45 = &byte_1BBB8DD34[4 * v32];
              v44[1] = v45[v42];
              int v46 = *v40++;
              int v47 = &v99[i - 1];
              *int v47 = v43[v46];
              v47[1] = v45[v46];
            }
            unsigned int v48 = *v6;
            if (v48 < 0x40)
            {
              if (v10 && v48 <= 0x1F)
              {
                unsigned int v49 = v27 + *(unsigned __int8 *)(v25 + v39 - 1) + 1;
                unsigned int v50 = v28 + *(unsigned __int8 *)(v26 + v39 - 1) + 1;
                int v51 = v23 + (v49 >> 1);
                if (v51 >= 51) {
                  int v51 = 51;
                }
                uint64_t v52 = v51 & ~(v51 >> 31);
                int v53 = v23 + (v50 >> 1);
                if (v53 >= 51) {
                  int v53 = 51;
                }
                uint64_t v54 = v53 & ~(v53 >> 31);
                int v55 = v24 + (v49 >> 1);
                if (v55 >= 51) {
                  int v55 = 51;
                }
                int v56 = v55 & ~(v55 >> 31);
                int v57 = v24 + (v50 >> 1);
                if (v57 >= 51) {
                  int v57 = 51;
                }
                unsigned __int8 v94 = byte_1BBB8DCB4[v52];
                unsigned __int8 v58 = byte_1BBB8DCF4[v56];
                unsigned __int8 v95 = byte_1BBB8DCB4[v54];
                unsigned __int8 v92 = v58;
                unsigned __int8 v93 = byte_1BBB8DCF4[v57 & ~(v57 >> 31)];
                int v86 = v28;
                int v84 = v39;
                if (v48 > 3)
                {
                  off_1E9F83370(v90, v91, &v94, &v92);
                }
                else
                {
                  uint64_t v59 = 0;
                  int v60 = v102;
                  do
                  {
                    uint64_t v61 = v6[v59];
                    *(v60 - 1) = byte_1BBB8DD34[4 * v52 + v61];
                    *int v60 = byte_1BBB8DD34[4 * v54 + v61];
                    v60 += 2;
                    ++v59;
                  }
                  while (v59 != 4);
                  off_1E9F83360(v90, v91, &v94, &v92, &v101);
                }
                uint64_t v7 = a3;
                uint64_t result = v88;
                int v8 = 8 * v89;
                int v28 = v86;
                LODWORD(v39) = v84;
              }
              if (v6[8] <= 0x1Fu)
              {
                int v85 = v24;
                int v83 = v27;
                int v62 = v28;
                int v63 = v23;
                int v64 = v39;
                off_1E9F83360(v90 + 8, v91, v97, v96, v103);
                LODWORD(v39) = v64;
                int v23 = v63;
                int v28 = v62;
                int v27 = v83;
                int v24 = v85;
                int v8 = 8 * v89;
                uint64_t v7 = a3;
                uint64_t result = v88;
              }
            }
            unsigned int v65 = v6[16];
            if (v65 <= 0x3F)
            {
              if (v89 && v65 <= 0x1F)
              {
                unsigned int v66 = v39 - *(_DWORD *)(v5 + 12);
                unsigned int v67 = v27 + *(unsigned __int8 *)(*(void *)(v5 + 120) + v66) + 1;
                unsigned int v68 = v28 + *(unsigned __int8 *)(*(void *)(v5 + 128) + v66) + 1;
                int v69 = v23 + (v67 >> 1);
                if (v69 >= 51) {
                  int v69 = 51;
                }
                uint64_t v70 = v69 & ~(v69 >> 31);
                int v71 = v23 + (v68 >> 1);
                if (v71 >= 51) {
                  int v71 = 51;
                }
                uint64_t v72 = v71 & ~(v71 >> 31);
                int v73 = v24 + (v67 >> 1);
                if (v73 >= 51) {
                  int v73 = 51;
                }
                int v74 = v73 & ~(v73 >> 31);
                int v75 = v24 + (v68 >> 1);
                if (v75 >= 51) {
                  int v75 = 51;
                }
                unsigned __int8 v94 = byte_1BBB8DCB4[v70];
                unsigned __int8 v76 = byte_1BBB8DCF4[v74];
                unsigned __int8 v95 = byte_1BBB8DCB4[v72];
                unsigned __int8 v92 = v76;
                unsigned __int8 v93 = byte_1BBB8DCF4[v75 & ~(v75 >> 31)];
                if (v65 > 3)
                {
                  off_1E9F83368(v90, v91, &v94, &v92);
                  int v8 = 8 * v89;
                  uint64_t v7 = a3;
                  uint64_t result = v88;
                }
                else
                {
                  unsigned int v77 = v99;
                  for (uint64_t j = 16; j != 20; ++j)
                  {
                    uint64_t v79 = v6[j];
                    *(v77 - 1) = byte_1BBB8DD34[4 * v70 + v79];
                    *unsigned int v77 = byte_1BBB8DD34[4 * v72 + v79];
                    v77 += 2;
                  }
                  off_1E9F83358(v90, v91, &v94, &v92, &v98);
                  uint64_t v7 = a3;
                  uint64_t result = v88;
                  int v8 = 8 * v89;
                }
              }
              if (v6[24] <= 0x1Fu)
              {
                off_1E9F83358(v90 + (int)(4 * v91), v91, v97, v96, &v100);
                int v8 = 8 * v89;
                uint64_t v7 = a3;
                uint64_t result = v88;
              }
            }
          }
          v6 += 48;
          ++v10;
          v9 += 48;
        }
        while (v10 != v7);
      }
      ++v89;
    }
    while (v89 != a5);
  }
  return result;
}

uint64_t sub_1BBB512CC(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, double a7, int8x8_t a8)
{
  int v8 = *((unsigned __int8 *)a1 + 221);
  int v9 = *((_DWORD *)a1 + 47);
  if (v9) {
    int v10 = 2;
  }
  else {
    int v10 = 4;
  }
  if (v9) {
    char v11 = 3;
  }
  else {
    char v11 = 4;
  }
  if (a5 >= a6) {
    return 0;
  }
  signed int v222 = v10;
  int v12 = &byte_1BBB93790[dword_1E9F82E5C];
  uint64_t v13 = *(unsigned int *)(a2 + 16);
  int v14 = 4 * v13;
  uint64_t v15 = a1[6];
  uint64_t v16 = *a1;
  unsigned int v17 = v13 * a5 + a3;
  uint64_t v18 = (_OWORD *)(a1[19] + 48 * v17);
  uint64_t v19 = (unint64_t *)(*(void *)(a2 + 104) + 8 * v17);
  unsigned int v20 = (unsigned int *)(a1[4] + 4 * v17);
  int v21 = (unsigned __int16 *)(a1[9] + 2 * v17);
  if (a5) {
    unsigned __int8 v22 = v11;
  }
  else {
    unsigned __int8 v22 = 32;
  }
  if (a5) {
    unsigned int v23 = *(_DWORD *)(a2 + 16);
  }
  else {
    unsigned int v23 = 0;
  }
  if (a3) {
    uint64_t v24 = -1;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v199 = v24;
  if (a3) {
    char v25 = 4;
  }
  else {
    char v25 = 32;
  }
  char v198 = v25;
  unint64_t v26 = a2 + 32;
  unint64_t v27 = a2 + 64;
  uint64_t v197 = -v13;
  int v266 = *((_DWORD *)a1 + 47);
  if (v9) {
    int v28 = 1;
  }
  else {
    int v28 = 3;
  }
  unsigned int v226 = v28;
  int v220 = 16 * v13 * a5;
  int v221 = 4 * a5;
  unsigned int v219 = v13;
  int v203 = 16 * v13;
  v29.i64[0] = 50529027;
  long long v30 = xmmword_1BBB6FE60;
  unsigned int v210 = a4;
  unsigned int v211 = a6;
  unsigned int v209 = a3;
  char v208 = a1;
  char v206 = v11;
  int v207 = *((unsigned __int8 *)a1 + 221);
  BOOL v205 = &byte_1BBB93790[dword_1E9F82E5C];
  int v235 = 4 * v13;
  uint64_t v204 = a1[6];
  uint64_t v234 = *a1;
  unint64_t v223 = v27;
  unint64_t v224 = v26;
  while (a3 >= a4)
  {
LABEL_361:
    ++a5;
    v220 += v203;
    v221 += 4;
    unsigned __int8 v22 = v11;
    unsigned int v23 = v219;
    if (a5 == a6) {
      return 0;
    }
  }
  int v202 = 4 * a5;
  int v201 = a5 * v219 - 1;
  int v200 = (a5 - 1) * v219;
  unsigned int v31 = a3;
  unsigned __int8 v32 = v198;
  uint64_t v33 = v199;
  uint64_t v271 = -(uint64_t)v23;
  unsigned __int8 v225 = v22;
  unsigned int v212 = a5;
  while (1)
  {
    if (*(unsigned char *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5))
    {
      *uint64_t v18 = v30;
      v18[1] = v30;
    }
    else
    {
      v29.i64[0] = 0x202020202020202;
      v29.i64[1] = 0x202020202020202;
      *uint64_t v18 = v29;
      v18[1] = v29;
    }
    uint64_t v34 = *v21;
    if (*(unsigned char *)(v15 + 12 * v34 + 9) == 1)
    {
      *(unsigned char *)uint64_t v18 = 0x80;
      goto LABEL_74;
    }
    unint64_t v35 = *v19;
    if (!*v19) {
      return 4294958324;
    }
    int v281 = *(unsigned __int8 *)(v15 + 12 * *v21 + 9);
    uint64_t v283 = v18 + 1;
    int v36 = v21[v33];
    int v275 = v21[v271];
    BOOL v37 = v26 > v35 || v35 > v27;
    int v38 = !v37;
    if (!(v8 | v38))
    {
      unsigned int v39 = bswap32(*v20);
      int v268 = *(unsigned __int8 *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5);
      if (*(unsigned char *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5))
      {
        int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1BBB6FE50, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v39), (int8x16_t)xmmword_1BBB6FE40)));
        a8 = (int8x8_t)vextq_s8(v29, v29, 8uLL).u64[0];
        *(int8x8_t *)v29.i8 = vorr_s8(*(int8x8_t *)v29.i8, a8);
        v39 |= v29.i32[0] | v29.i32[1];
      }
      uint64_t v40 = *(unsigned __int8 *)(v15 + 12 * v34 + 8);
      int v41 = *(unsigned __int16 *)(v35 + 10);
      unint64_t v42 = v19[v33];
      int v43 = (v39 >> 4) & 0xFFF0FFF | v39;
      if (v43)
      {
        int v44 = ((v39 >> 4) & 0xFFF0000 | v39 & 0xFFF0000) == 268369920;
        if (((v39 >> 4) & 0xFFF0000 | v39 & 0xFFF0000) == 0xFFF0000) {
          int v45 = 1;
        }
        else {
          int v45 = 4;
        }
        unsigned int v269 = v45;
        int v236 = -1;
      }
      else
      {
        if ((v41 & 0xFFFFFFFD) == 0x100)
        {
          int v236 = 0;
          int v44 = 0;
          v29.i64[0] = 0x2020202002020202;
          *uint64_t v18 = xmmword_1BBB6FE70;
          int v46 = 1;
        }
        else
        {
          int v44 = 0;
          int v236 = -1;
          int v46 = 4;
        }
        unsigned int v269 = v46;
      }
      char v47 = v12[v40];
      int v267 = 4 * v31;
      char v272 = v47;
      if (v281 == 2 && v36 != v34)
      {
        int v48 = 0;
        int v49 = 0;
        goto LABEL_58;
      }
      if (v26 > v42 || v42 > v27)
      {
        int v49 = 4 * v31;
        if (v267)
        {
          unsigned int v50 = bswap32(*(v20 - 1));
          if (*(unsigned char *)(a1[17] + v201 + v31))
          {
            if ((v50 & 0xCC0000) != 0) {
              int v51 = 13382400;
            }
            else {
              int v51 = 0;
            }
            if ((v50 & 0x330000) != 0) {
              int v52 = 3342387;
            }
            else {
              int v52 = 0;
            }
            v50 |= v52 | v51;
          }
          int v48 = 0;
          unsigned int v279 = v43 | (HIWORD(v50) << 28);
          BOOL v277 = v18;
          goto LABEL_78;
        }
        int v48 = 0;
LABEL_58:
        *(unsigned char *)uint64_t v18 = 32;
      }
      else
      {
        int v48 = 0;
        *(_DWORD *)uint64_t v18 = 67372036;
        int v49 = 1;
      }
      unsigned int v273 = v18;
      unsigned int v279 = v43;
      while (1)
      {
        v44 |= v49;
        *(unsigned char *)v18 |= (32 * v49) ^ 0x20;
        int v53 = (char *)v18 + 4;
        if (++v48 >= v269) {
          break;
        }
        BOOL v277 = v53;
        v279 *= 16;
        uint64_t v18 = v273;
LABEL_78:
        unsigned int v273 = v18;
        if ((v48 & v268) != 0)
        {
          int v49 = 0;
          uint64_t v18 = v277;
          unsigned char *v277 = 32;
        }
        else
        {
          int v270 = v48;
          int v49 = v236 | (v279 >> 28) | (v48 == 0);
          if (v49)
          {
            int v49 = 1;
            if (v279 >> 28 == 15)
            {
              uint64_t v18 = v277;
            }
            else
            {
              int v230 = v43;
              unsigned int v262 = v31;
              BOOL v213 = v21;
              BOOL v215 = v20;
              BOOL v217 = v19;
              uint64_t v57 = 0;
              int v58 = v220 + v48;
              unsigned int v59 = v279;
              int v60 = v267;
              int v260 = v44;
              uint64_t v18 = v277;
              uint64_t v258 = v34;
              int v233 = v41;
              do
              {
                if ((v59 & 0x80000000) == 0)
                {
                  uint64_t v61 = *(__int16 **)(v16 + 8 * (v60 + v58));
                  int v62 = *(__int16 **)(v16 + 8 * (v60 + v58 - 1));
                  if (v61 == v62)
                  {
                    char v99 = 0;
                  }
                  else if ((v47 & 2) != 0)
                  {
                    int v100 = *v61 - *v62;
                    if (v100 < 0) {
                      int v100 = *v62 - *v61;
                    }
                    if (v100 <= 3)
                    {
                      int v116 = v61[1] - v62[1];
                      if (v116 < 0) {
                        int v116 = v62[1] - v61[1];
                      }
                      BOOL v37 = v116 > v226;
                      int v48 = v270;
                      int v44 = v260;
                      char v99 = v37 || v61[6] != v62[6];
                    }
                    else
                    {
                      char v99 = 1;
                    }
                  }
                  else
                  {
                    __int16 v244 = v61[1];
                    __int16 v247 = *v61;
                    unsigned __int16 v63 = *v61 - *v62;
                    __int16 v238 = v62[1];
                    __int16 v240 = *v62;
                    int v64 = (__int16)(v244 - v238);
                    __int16 v65 = v62[2];
                    __int16 v242 = v61[2];
                    __int16 v66 = v61[3];
                    int v67 = (__int16)(v242 - v65);
                    __int16 v68 = v62[3];
                    unsigned int v69 = (unsigned __int16)v61[6];
                    unsigned int v70 = (unsigned __int16)v62[6];
                    int v71 = (__int16)(v66 - v68);
                    int v72 = (__int16)(v69 - v70);
                    BOOL v73 = (v63 & 0x8000u) != 0;
                    if ((v63 & 0x8000u) != 0) {
                      int v74 = -v63;
                    }
                    else {
                      LOBYTE(v74) = *(unsigned char *)v61 - *(unsigned char *)v62;
                    }
                    char v256 = v74;
                    unsigned int v75 = -v63 >> 8;
                    if (v73) {
                      unsigned __int8 v76 = v75;
                    }
                    else {
                      unsigned __int8 v76 = (unsigned __int16)(*v61 - *v62) >> 8;
                    }
                    unsigned __int8 v253 = v76;
                    BOOL v77 = v64 < 0;
                    if (v64 < 0) {
                      int v78 = -(unsigned __int16)(v244 - v238);
                    }
                    else {
                      LOBYTE(v78) = v244 - v238;
                    }
                    if (v77) {
                      char v79 = (unsigned __int16)(v238 - v244) >> 8;
                    }
                    else {
                      char v79 = (unsigned __int16)(v244 - v238) >> 8;
                    }
                    LOBYTE(v80) = (unsigned __int16)(v242 - v65) >> 8;
                    if (v67 < 0) {
                      int v81 = -(unsigned __int16)(v242 - v65);
                    }
                    else {
                      LOBYTE(v81) = v242 - v65;
                    }
                    if (v67 < 0) {
                      unsigned int v80 = -(unsigned __int16)(v242 - v65) >> 8;
                    }
                    char v249 = v80;
                    char v251 = v81;
                    if (v71 < 0) {
                      int v82 = -(unsigned __int16)(v66 - v68);
                    }
                    else {
                      LOBYTE(v82) = v66 - v68;
                    }
                    if (v71 >= 0) {
                      char v83 = (unsigned __int16)(v66 - v68) >> 8;
                    }
                    else {
                      char v83 = (unsigned __int16)(v68 - v66) >> 8;
                    }
                    if (v72 < 0) {
                      int v84 = -(unsigned __int16)(v69 - v70);
                    }
                    else {
                      LOBYTE(v84) = v69 - v70;
                    }
                    if (v72 >= 0) {
                      char v85 = (unsigned __int16)(v69 - v70) >> 8;
                    }
                    else {
                      char v85 = (unsigned __int16)(v70 - v69) >> 8;
                    }
                    int v86 = v61[6];
                    int v87 = (*((unsigned __int8 *)v61 + 8) >> 4) & 2 | (*((unsigned __int8 *)v61 + 9) >> 5);
                    if (v87) {
                      char v88 = 0;
                    }
                    else {
                      char v88 = -1;
                    }
                    if (v87 == 1) {
                      char v89 = -1;
                    }
                    else {
                      char v89 = v88;
                    }
                    if (v87 == 2) {
                      char v90 = -1;
                    }
                    else {
                      char v90 = v88;
                    }
                    if (v87 == 2) {
                      char v91 = -1;
                    }
                    else {
                      char v91 = v89;
                    }
                    int v92 = v89 & 1;
                    unsigned int v93 = v90 & 3;
                    if (!v266) {
                      int v92 = v89 & 3;
                    }
                    unsigned int v264 = v92;
                    if (v266) {
                      unsigned int v94 = v90 & 1;
                    }
                    else {
                      unsigned int v94 = v90 & 3;
                    }
                    if (v86 == v70)
                    {
                      unsigned __int8 v96 = v253;
                      LOBYTE(v95) = v256;
                      char v98 = v249;
                      LOBYTE(v97) = v251;
                    }
                    else
                    {
                      unsigned int v101 = v69 - (bswap32(v70) >> 16);
                      int v102 = (__int16)(v247 - v65);
                      unsigned __int16 v103 = v244 - v68;
                      int v245 = (__int16)(v242 - v240);
                      unsigned __int16 v104 = v66 - v238;
                      if (v102 < 0) {
                        int v95 = -(unsigned __int16)(v247 - v65);
                      }
                      else {
                        LOBYTE(v95) = v247 - v65;
                      }
                      if (v102 >= 0) {
                        unsigned __int8 v96 = (unsigned __int16)(v247 - v65) >> 8;
                      }
                      else {
                        unsigned __int8 v96 = (unsigned __int16)(v65 - v247) >> 8;
                      }
                      unsigned int v93 = v90 & 3;
                      if ((v103 & 0x8000u) != 0) {
                        int v78 = -v103;
                      }
                      else {
                        LOBYTE(v78) = v103;
                      }
                      if ((v103 & 0x8000u) == 0) {
                        char v79 = HIBYTE(v103);
                      }
                      else {
                        char v79 = (unsigned __int16)-v103 >> 8;
                      }
                      if (v245 < 0) {
                        int v97 = -(unsigned __int16)(v242 - v240);
                      }
                      else {
                        LOBYTE(v97) = v242 - v240;
                      }
                      if (v245 >= 0) {
                        char v98 = (unsigned __int16)(v242 - v240) >> 8;
                      }
                      else {
                        char v98 = (unsigned __int16)(v240 - v242) >> 8;
                      }
                      if ((v104 & 0x8000u) != 0) {
                        int v82 = -v104;
                      }
                      else {
                        LOBYTE(v82) = v104;
                      }
                      if ((v104 & 0x8000u) == 0) {
                        char v83 = HIBYTE(v104);
                      }
                      else {
                        char v83 = (unsigned __int16)-v104 >> 8;
                      }
                      if ((v101 & 0x8000u) != 0) {
                        int v84 = -(unsigned __int16)v101;
                      }
                      else {
                        LOBYTE(v84) = v101;
                      }
                      if ((v101 & 0x8000u) == 0) {
                        char v85 = BYTE1(v101);
                      }
                      else {
                        char v85 = (unsigned __int16)-(__int16)v101 >> 8;
                      }
                    }
                    unsigned int v105 = v70 >> 8;
                    char v106 = v79 & v89;
                    unsigned __int8 v107 = v78 & v89;
                    char v108 = v98 & v90;
                    unsigned __int8 v109 = v97 & v90;
                    char v110 = v83 & v90;
                    unsigned __int8 v111 = v82 & v90;
                    char v112 = v85 & v91;
                    char v113 = v84 & v91;
                    BOOL v115 = (v96 & v89) != 0 || (v89 & 3u) < (v95 & v89);
                    if (v106) {
                      BOOL v115 = 1;
                    }
                    if (v264 < v107) {
                      BOOL v115 = 1;
                    }
                    if (v108) {
                      BOOL v115 = 1;
                    }
                    if (v93 < v109) {
                      BOOL v115 = 1;
                    }
                    if (v110) {
                      BOOL v115 = 1;
                    }
                    if (v94 < v111) {
                      BOOL v115 = 1;
                    }
                    uint64_t v34 = v258;
                    if ((v86 - v105) | ((v69 >> 8) - v62[6]))
                    {
                      char v99 = v115 || v112 != 0 || v113 != 0;
                    }
                    else
                    {
                      char v99 = sub_1BBB1BC1C(v61, v62, v222, 0, 0, *(int32x2_t *)v29.i8, (int32x2_t)a8);
                      uint64_t v34 = v258;
                      long long v30 = xmmword_1BBB6FE60;
                    }
                    int v14 = v235;
                    uint64_t v16 = v234;
                    char v47 = v272;
                    int v60 = v267;
                    int v41 = v233;
                    int v44 = v260;
                    int v48 = v270;
                    uint64_t v18 = v277;
                  }
                  *((unsigned char *)v18 + v57) = v99;
                }
                v59 *= 2;
                ++v57;
                v58 += v14;
              }
              while (v57 != 4);
              int v49 = 1;
              a4 = v210;
              a6 = v211;
              a5 = v212;
              a3 = v209;
              a1 = v208;
              char v11 = v206;
              int v8 = v207;
              uint64_t v15 = v204;
              int v12 = v205;
              unsigned int v20 = v215;
              uint64_t v19 = v217;
              int v21 = v213;
              unint64_t v27 = v223;
              unint64_t v26 = v224;
              unsigned __int8 v22 = v225;
              unsigned int v31 = v262;
              int v43 = v230;
            }
          }
          else
          {
            uint64_t v18 = v277;
            unsigned char *v277 = 32;
          }
        }
      }
      uint64_t v18 = v273;
      *v273 |= ((_BYTE)v44 << 6) ^ 0x40;
      unint64_t v54 = v19[v271];
      if (v43)
      {
        int v55 = (v43 & 0xFFF) == 4095;
        if ((v43 & 0xFFF) == 0xFFF) {
          int v56 = 1;
        }
        else {
          int v56 = 4;
        }
        unsigned int v280 = v56;
        int v232 = -1;
      }
      else if ((v41 & 0xFFFE) == 0x100)
      {
        int v232 = 0;
        int v55 = 0;
        *uint64_t v283 = 33686018;
        memset(v273 + 20, 32, 12);
        unsigned int v280 = 1;
      }
      else
      {
        int v55 = 0;
        int v232 = -1;
        unsigned int v280 = 4;
      }
      unsigned int v118 = v43 << 16;
      unsigned int v263 = v31;
      if (v281 == 2 && v275 != v34)
      {
        int v119 = 0;
        int v120 = 0;
        goto LABEL_215;
      }
      if (v26 <= v54 && v54 <= v27)
      {
        int v119 = 0;
        BOOL v121 = v283;
        *(unsigned char *)uint64_t v283 = v22;
        v273[17] = v22;
        v273[18] = v22;
        int v120 = 1;
        v273[19] = v22;
        goto LABEL_231;
      }
      int v120 = v202;
      if (v202)
      {
        unsigned int v122 = bswap32(v20[v197]);
        if ((v122 & 0x33000000) != 0) {
          int v123 = 855638220;
        }
        else {
          int v123 = 0;
        }
        if ((v122 & 0x330000) != 0) {
          int v124 = 3342387;
        }
        else {
          int v124 = 0;
        }
        int v125 = v124 | v123 | v122;
        if (*(unsigned char *)(a1[17] + v31 + v200)) {
          unsigned int v122 = v125;
        }
        int v119 = 0;
        v118 |= v122 << 28;
        BOOL v121 = v283;
        while ((v119 & v268) == 0)
        {
          int v231 = v119;
          int v120 = v232 | (v118 >> 28) | (v119 == 0);
          if (v120)
          {
            int v120 = 1;
            if (v118 >> 28 != 15)
            {
              BOOL v214 = v21;
              BOOL v216 = v20;
              char v218 = v19;
              uint64_t v126 = 0;
              uint64_t v127 = v16 + 8 * (v267 + v14 * (v221 + v119));
              uint64_t v128 = v16 + 8 * (v267 + v219 * (4 * (v221 + v119) - 4));
              unsigned int v129 = v118;
              int v265 = v55;
              unsigned int v229 = v118;
              uint64_t v227 = v128;
              uint64_t v228 = v127;
              do
              {
                if ((v129 & 0x80000000) == 0)
                {
                  int v130 = *(__int16 **)(v127 + 8 * v126);
                  int v131 = *(__int16 **)(v128 + 8 * v126);
                  if (v130 == v131)
                  {
                    char v160 = 0;
                  }
                  else if ((v47 & 2) != 0)
                  {
                    int v161 = *v130 - *v131;
                    if (v161 < 0) {
                      int v161 = *v131 - *v130;
                    }
                    if (v161 <= 3)
                    {
                      int v174 = v130[1] - v131[1];
                      if (v174 < 0) {
                        int v174 = v131[1] - v130[1];
                      }
                      char v160 = v174 > v226 || v130[6] != v131[6];
                    }
                    else
                    {
                      char v160 = 1;
                    }
                  }
                  else
                  {
                    __int16 v243 = *v131;
                    __int16 v246 = *v130;
                    int v132 = (__int16)(*v130 - *v131);
                    __int16 v239 = v130[1];
                    __int16 v241 = v131[1];
                    int v133 = (__int16)(v239 - v241);
                    __int16 v134 = v131[2];
                    __int16 v237 = v130[2];
                    int v135 = (__int16)(v237 - v134);
                    __int16 v136 = v130[3];
                    __int16 v137 = v131[3];
                    int v138 = (__int16)(v136 - v137);
                    int v139 = (unsigned __int16)v130[4];
                    unsigned int v140 = (unsigned __int16)v131[4];
                    __int16 v141 = v139 - v140;
                    if (v132 < 0) {
                      int v142 = -(unsigned __int16)(v246 - v243);
                    }
                    else {
                      LOBYTE(v142) = *v130 - v243;
                    }
                    if (v132 >= 0) {
                      LOBYTE(v143) = (unsigned __int16)(v246 - v243) >> 8;
                    }
                    else {
                      unsigned int v143 = -(unsigned __int16)(v246 - v243) >> 8;
                    }
                    char v261 = v143;
                    LOBYTE(v143) = (unsigned __int16)(v239 - v241) >> 8;
                    unsigned int v144 = (unsigned __int16)v130[6];
                    if (v133 < 0) {
                      int v145 = -(unsigned __int16)(v239 - v241);
                    }
                    else {
                      LOBYTE(v145) = v239 - v241;
                    }
                    char v259 = v145;
                    unsigned int v146 = (unsigned __int16)v131[6];
                    if (v133 < 0) {
                      unsigned int v143 = -(unsigned __int16)(v239 - v241) >> 8;
                    }
                    char v257 = v143;
                    LOBYTE(v143) = (unsigned __int16)(v237 - v134) >> 8;
                    if (v135 < 0) {
                      int v147 = -(unsigned __int16)(v237 - v134);
                    }
                    else {
                      LOBYTE(v147) = v237 - v134;
                    }
                    if (v135 < 0) {
                      unsigned int v143 = -(unsigned __int16)(v237 - v134) >> 8;
                    }
                    char v252 = v143;
                    char v254 = v147;
                    LOBYTE(v148) = (unsigned __int16)(v136 - v137) >> 8;
                    if (v138 < 0) {
                      int v149 = -(unsigned __int16)(v136 - v137);
                    }
                    else {
                      LOBYTE(v149) = v136 - v137;
                    }
                    if (v138 < 0) {
                      unsigned int v148 = -(unsigned __int16)(v136 - v137) >> 8;
                    }
                    char v248 = v148;
                    char v250 = v149;
                    __int16 v150 = v144 - v146;
                    if (v141 < 0) {
                      int v151 = -(unsigned __int16)(v139 - v140);
                    }
                    else {
                      LOBYTE(v151) = v139 - v140;
                    }
                    if (v141 >= 0) {
                      char v152 = (unsigned __int16)(v139 - v140) >> 8;
                    }
                    else {
                      char v152 = (unsigned __int16)(v140 - v139) >> 8;
                    }
                    if (v150 < 0) {
                      int v153 = -(unsigned __int16)(v144 - v146);
                    }
                    else {
                      LOBYTE(v153) = v144 - v146;
                    }
                    if (v150 >= 0) {
                      char v154 = (unsigned __int16)(v144 - v146) >> 8;
                    }
                    else {
                      char v154 = (unsigned __int16)(v146 - v144) >> 8;
                    }
                    int v155 = (*((unsigned __int8 *)v130 + 8) >> 4) & 2 | (*((unsigned __int8 *)v130 + 9) >> 5);
                    if (v155) {
                      char v156 = 0;
                    }
                    else {
                      char v156 = -1;
                    }
                    if (v155 == 1) {
                      char v157 = -1;
                    }
                    else {
                      char v157 = v156;
                    }
                    LOBYTE(v158) = v151;
                    if (v155 == 2)
                    {
                      char v157 = 0;
                      char v159 = 0;
                      char v156 = -1;
                      char v282 = -1;
                    }
                    else
                    {
                      char v159 = v156;
                      char v282 = v157;
                    }
                    int v162 = v130[6];
                    unsigned int v163 = v144 >> 8;
                    unsigned int v164 = v146 >> 8;
                    int v165 = v157 & 1;
                    if (!v266) {
                      int v165 = v157 & 3;
                    }
                    unsigned int v274 = v165;
                    if (v266) {
                      int v166 = v156 & 1;
                    }
                    else {
                      int v166 = v156 & 3;
                    }
                    unsigned int v276 = v156 & 3;
                    unsigned int v278 = v166;
                    if (v162 == v146)
                    {
                      LOBYTE(v167) = v142;
                      int v55 = v265;
                      LOBYTE(v168) = v261;
                      char v169 = v257;
                      LOBYTE(v140) = v259;
                      char v170 = v252;
                      LOBYTE(v171) = v254;
                      char v173 = v248;
                      LOBYTE(v172) = v250;
                    }
                    else
                    {
                      int v158 = v139 - (bswap32(v140) >> 16);
                      unsigned __int16 v176 = v246 - v134;
                      int v177 = (__int16)(v246 - v134);
                      LOWORD(v140) = v239 - v137;
                      int v178 = (__int16)(v237 - v243);
                      unsigned __int16 v179 = v136 - v241;
                      int v255 = (__int16)v158;
                      unsigned int v180 = v144 - (bswap32(v146) >> 16);
                      unsigned int v168 = -v176 >> 8;
                      BOOL v181 = v177 < 0;
                      BOOL v182 = v177 < 0;
                      char v169 = (unsigned __int16)(v239 - v137) >> 8;
                      if (v181) {
                        int v167 = -v176;
                      }
                      else {
                        LOBYTE(v167) = v176;
                      }
                      if (!v182) {
                        LOBYTE(v168) = HIBYTE(v176);
                      }
                      unsigned int v183 = -(unsigned __int16)v140 >> 8;
                      if ((__int16)(v239 - v137) < 0)
                      {
                        unsigned int v140 = -(unsigned __int16)(v239 - v137);
                        char v169 = v183;
                      }
                      if (v178 < 0) {
                        int v171 = -(unsigned __int16)(v237 - v243);
                      }
                      else {
                        LOBYTE(v171) = v237 - v243;
                      }
                      if (v178 >= 0) {
                        char v170 = (unsigned __int16)(v237 - v243) >> 8;
                      }
                      else {
                        char v170 = (unsigned __int16)(v243 - v237) >> 8;
                      }
                      if ((v179 & 0x8000u) != 0) {
                        int v172 = -v179;
                      }
                      else {
                        LOBYTE(v172) = v179;
                      }
                      if ((v179 & 0x8000u) == 0) {
                        char v173 = HIBYTE(v179);
                      }
                      else {
                        char v173 = (unsigned __int16)-v179 >> 8;
                      }
                      char v184 = BYTE1(v158);
                      unsigned int v185 = -(unsigned __int16)v158 >> 8;
                      if ((v158 & 0x8000u) != 0) {
                        int v158 = -(unsigned __int16)v158;
                      }
                      if (v255 >= 0) {
                        char v152 = v184;
                      }
                      else {
                        char v152 = v185;
                      }
                      if ((v180 & 0x8000u) != 0) {
                        int v153 = -(unsigned __int16)v180;
                      }
                      else {
                        LOBYTE(v153) = v180;
                      }
                      if ((v180 & 0x8000u) == 0) {
                        char v154 = BYTE1(v180);
                      }
                      else {
                        char v154 = (unsigned __int16)-(__int16)v180 >> 8;
                      }
                      int v55 = v265;
                    }
                    char v186 = v168 & v157;
                    char v187 = v169 & v157;
                    unsigned __int8 v188 = v140 & v157;
                    char v189 = v170 & v156;
                    unsigned __int8 v190 = v171 & v156;
                    char v191 = v173 & v156;
                    unsigned __int8 v192 = v172 & v156;
                    char v193 = v158 & v159;
                    if (v186) {
                      BOOL v194 = 0;
                    }
                    else {
                      BOOL v194 = (v157 & 3u) >= (v167 & v157);
                    }
                    char v195 = !v194;
                    if (v187) {
                      char v195 = 1;
                    }
                    if (v274 < v188) {
                      char v195 = 1;
                    }
                    if (v189) {
                      char v195 = 1;
                    }
                    if (v276 < v190) {
                      char v195 = 1;
                    }
                    if (v191) {
                      char v195 = 1;
                    }
                    if (v278 < v192) {
                      char v195 = 1;
                    }
                    if ((v162 - v164) | (v163 - v131[6]))
                    {
                      char v160 = v195 & 1 | ((v152 & v159) != 0
                                      || v193 != 0
                                      || (v154 & v282) != 0
                                      || (v153 & v282) != 0);
                    }
                    else
                    {
                      char v160 = sub_1BBB1BC1C(v130, v131, v222, 0, 0, *(int32x2_t *)v29.i8, (int32x2_t)a8);
                      int v55 = v265;
                      long long v30 = xmmword_1BBB6FE60;
                    }
                    char v47 = v272;
                    unsigned int v118 = v229;
                    uint64_t v128 = v227;
                    uint64_t v127 = v228;
                  }
                  v121[v126] = v160;
                }
                v129 *= 2;
                ++v126;
              }
              while (v126 != 4);
              int v120 = 1;
              a4 = v210;
              a6 = v211;
              a5 = v212;
              a3 = v209;
              a1 = v208;
              char v11 = v206;
              int v8 = v207;
              uint64_t v15 = v204;
              int v12 = v205;
              int v14 = v235;
              uint64_t v16 = v234;
              unsigned int v20 = v216;
              uint64_t v19 = v218;
              int v21 = v214;
            }
          }
          else
          {
            *BOOL v121 = 32;
          }
          int v119 = v231;
LABEL_231:
          v55 |= v120;
          *v121 |= (32 * v120) ^ 0x20;
          v121 += 4;
          v118 *= 16;
          if (++v119 >= v280)
          {
            *(unsigned char *)v283 |= ((_BYTE)v55 << 6) ^ 0x40;
            unint64_t v27 = v223;
            unint64_t v26 = v224;
            unsigned __int8 v22 = v225;
            unsigned int v31 = v263;
            goto LABEL_74;
          }
        }
        int v120 = 0;
      }
      else
      {
        int v119 = 0;
LABEL_215:
        BOOL v121 = v283;
      }
      *BOOL v121 = 32;
      goto LABEL_231;
    }
    if (*(unsigned char *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5))
    {
      int8x16_t v29 = (int8x16_t)xmmword_1BBB70060;
    }
    else
    {
      v29.i64[0] = 0x303030303030303;
      v29.i64[1] = 0x303030303030303;
    }
    *uint64_t v18 = v29;
    v18[1] = v29;
    *(_DWORD *)uint64_t v18 = 16843009 * v32;
    *uint64_t v283 = 16843009 * v22;
    if (v281 == 2)
    {
      *(unsigned char *)uint64_t v18 = v32 | (32 * (v36 != v34));
      *((unsigned char *)v18 + 16) = v22 | (32 * (v275 != v34));
    }
LABEL_74:
    ++v21;
    ++v20;
    ++v19;
    v18 += 3;
    ++v31;
    uint64_t v33 = -1;
    unsigned __int8 v32 = 4;
    if (v31 >= a4) {
      goto LABEL_361;
    }
  }
}

uint64_t sub_1BBB523B8(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    unsigned int v2 = 0;
    int v3 = 0;
    uint64_t v4 = 0;
    do
    {
      if (v3 == 2)
      {
        if (*(unsigned char *)(a1 + v2) == 3)
        {
          if (++v2 >= a2) {
            break;
          }
          int v3 = 0;
        }
        else
        {
          int v3 = 2;
        }
      }
      *(unsigned char *)(a1 + v4) = *(unsigned char *)(a1 + v2);
      if (*(unsigned char *)(a1 + v2)) {
        int v3 = 0;
      }
      else {
        ++v3;
      }
      uint64_t v4 = (v4 + 1);
      ++v2;
    }
    while (v2 < a2);
  }
  else
  {
    uint64_t v4 = 0;
  }
  BOOL v5 = a2 >= v4;
  size_t v6 = a2 - v4;
  if (v6 != 0 && v5) {
    bzero((void *)(a1 + v4), v6);
  }
  return v4;
}

uint64_t sub_1BBB52450(void *a1, unsigned int a2, _WORD *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v12 = 0;
  uint64_t result = sub_1BBB524FC(a1, a2, v14, v15, v13, &v12);
  if (!v12) {
    return sub_1BBB5286C(*(unsigned __int8 *)(a1[5] + 1), a1[6], a2, v14, v15, v13, a3, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)a3 = 0;
  return result;
}

uint64_t sub_1BBB524FC(void *a1, unsigned int a2, _DWORD *a3, _DWORD *a4, _WORD *a5, _DWORD *a6)
{
  v44[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1[16];
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 272);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = a1[17];
  if (v11) {
    uint64_t v12 = *(void *)(v11 + 272);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[18];
  if (v14) {
    uint64_t v38 = *(void *)(v14 + 272);
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v15 = *(void *)(a1[22] + 272);
  uint64_t v16 = a1[19];
  if (v16) {
    uint64_t v37 = *(void *)(v16 + 272);
  }
  else {
    uint64_t v37 = 0;
  }
  int v17 = *(unsigned __int8 *)(a1[5] + 1);
  int v18 = *(unsigned __int8 *)(v13 + 16 + 16 * (int)a2 + 15);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unsigned int v19 = *(unsigned __int16 *)(v13 + 26);
  if (v18 == 3)
  {
    uint64_t v20 = 0;
    int v21 = 16;
  }
  else
  {
    uint64_t v20 = a2;
    int v21 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * v19 + 2 * a2 + 48);
  }
  uint64_t v22 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * v19 + v20 + 32);
  uint64_t v40 = v10;
  sub_1BBB52B18(byte_1BBB8DE44[v22], *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * v19 + v20 + 32), byte_1BBB8DE34[v22], v15, v10, (uint64_t)a5, (uint64_t)a4, (_DWORD *)&v42 + 1);
  uint64_t result = sub_1BBB52B18(byte_1BBB8DE64[v22], v22, byte_1BBB8DE54[v22], v15, v12, (uint64_t)(a5 + 4), (uint64_t)(a4 + 2), &v42);
  if (v17 == 4)
  {
    if (HIDWORD(v42) && v42 && (*a4 || *a5 || a5[1]))
    {
      if (a4[2] || a5[4] || !a6 || a5[5]) {
        goto LABEL_26;
      }
    }
    else if (!a6)
    {
      goto LABEL_26;
    }
    *a6 = 1;
    return result;
  }
LABEL_26:
  uint64_t v24 = a4 + 4;
  unsigned int v25 = v21 + byte_1BBB93FD7[v22];
  unint64_t v26 = a5 + 8;
  if (v25 > 0xF)
  {
    if (((0x33uLL >> v22) & 1) == 0)
    {
      *unint64_t v26 = 0;
      *uint64_t v24 = 0x2000000020;
      HIDWORD(v41) = 0;
      goto LABEL_34;
    }
    int v27 = v22;
    uint64_t v28 = v15;
    uint64_t v29 = v38;
  }
  else
  {
    int v27 = v22;
    uint64_t v28 = v15;
    uint64_t v29 = v12;
  }
  sub_1BBB52B18((v25 < 0x10) & (0xFFCCuLL >> v22), v27, dword_1BBB8DE74[4 * dword_1BBB8DEB4[byte_1BBB93FE7[v22]] + dword_1BBB8DEB4[v25 + 1]], v28, v29, (uint64_t)v26, (uint64_t)(a4 + 4), (_DWORD *)&v41 + 1);
LABEL_34:
  HIDWORD(v31) = v22;
  LODWORD(v31) = v22;
  int v30 = v31 >> 1;
  if ((v30 - 4) < 2 || v30 == 1)
  {
    int v32 = v22;
    uint64_t v33 = v15;
    uint64_t v34 = v40;
  }
  else if (v30)
  {
    int v32 = v22;
    uint64_t v33 = v15;
    uint64_t v34 = v12;
  }
  else
  {
    int v32 = 0;
    uint64_t v33 = v15;
    uint64_t v34 = v37;
  }
  uint64_t result = sub_1BBB52B18(byte_1BBB8DF0C[v22], v32, byte_1BBB8DEFC[v22], v33, v34, (uint64_t)&v43, (uint64_t)v44, &v41);
  int v35 = HIDWORD(v41);
  if (v41)
  {
    if (!HIDWORD(v41))
    {
      *unint64_t v26 = v43;
      *uint64_t v24 = v44[0];
    }
  }
  int v36 = v42;
  *a3 = HIDWORD(v42);
  a3[1] = v36;
  a3[2] = v35;
  return result;
}

uint64_t sub_1BBB5286C(uint64_t result, uint64_t a2, unsigned int a3, int *a4, int *a5, _WORD *a6, _WORD *a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12 = (unsigned __int8 *)(a2 + 16 * (int)a3);
  if (v12[31] == 3)
  {
    a3 = 0;
    int v13 = 4112;
  }
  else
  {
    int v13 = *((unsigned __int16 *)&unk_1BBB8DF30 + 40 * *(unsigned __int16 *)(a2 + 26) + a3 + 24);
  }
  int v14 = v12[24];
  int v15 = v12[25];
  int v17 = *a4;
  int v16 = a4[1];
  int v18 = a4[2];
  LOWORD(a9) = a6[2];
  WORD2(a9) = a6[3];
  LOWORD(a8) = a6[6];
  WORD2(a8) = a6[7];
  LOWORD(a11) = *a6;
  WORD2(a11) = a6[1];
  LOWORD(a10) = a6[4];
  WORD2(a10) = a6[5];
  LOWORD(a12) = a6[8];
  WORD2(a12) = a6[9];
  int v19 = *a5;
  int v20 = a5[4];
  if (v13 == 4104)
  {
    if (!a3 && v19 == v14) {
      goto LABEL_22;
    }
    if (a3 == 1 && v20 == v14) {
      goto LABEL_27;
    }
    int v21 = a5[2];
LABEL_15:
    if (v17 && !v16 && !v18)
    {
      int v21 = *a5;
      int v20 = *a5;
      a10 = a11;
      a12 = a11;
    }
    if (v19 == v14)
    {
      if (v21 != v14 && v20 != v14)
      {
LABEL_22:
        a10 = a11;
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if (v21 == v14)
    {
      if (v20 != v14) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if (v20 != v14)
    {
LABEL_28:
      int32x2_t v22 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a10, 0x10uLL), 0x10uLL);
      int32x2_t v23 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a11, 0x10uLL), 0x10uLL);
      a10 = COERCE_DOUBLE(vmin_s32(vmax_s32(vmin_s32(v23, v22), vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a12, 0x10uLL), 0x10uLL)), vmax_s32(v23, v22)));
      goto LABEL_29;
    }
LABEL_27:
    a10 = a12;
    goto LABEL_29;
  }
  int v21 = a5[2];
  if (v13 != 2064) {
    goto LABEL_15;
  }
  if (a3 || v21 != v14)
  {
    if (a3 == 1 && v19 == v14) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
LABEL_29:
  *a7 = LOWORD(a10);
  a7[1] = WORD2(a10);
  if (result == 5 || result == 3)
  {
    LOWORD(a10) = a6[10];
    WORD2(a10) = a6[11];
    int v24 = a5[1];
    int v25 = a5[5];
    if (v13 == 4104)
    {
      if (!a3 && v24 == v15) {
        goto LABEL_49;
      }
      if (a3 == 1 && v25 == v15) {
        goto LABEL_54;
      }
      int v26 = a5[3];
    }
    else
    {
      int v26 = a5[3];
      if (v13 == 2064)
      {
        if (!a3 && v26 == v15) {
          goto LABEL_56;
        }
        if (a3 == 1 && v24 == v15) {
          goto LABEL_49;
        }
      }
    }
    if (v17 && !v16 && !v18)
    {
      int v26 = a5[1];
      int v25 = v26;
      a8 = a9;
      a10 = a9;
    }
    if (v24 == v15)
    {
      if (v26 != v15 && v25 != v15)
      {
LABEL_49:
        a8 = a9;
LABEL_56:
        a7[2] = LOWORD(a8);
        a7[3] = WORD2(a8);
        return result;
      }
      goto LABEL_55;
    }
    if (v26 == v15)
    {
      if (v25 != v15) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    if (v25 != v15)
    {
LABEL_55:
      int32x2_t v27 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a8, 0x10uLL), 0x10uLL);
      int32x2_t v28 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a9, 0x10uLL), 0x10uLL);
      a8 = COERCE_DOUBLE(vmin_s32(vmax_s32(vmin_s32(v28, v27), vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a10, 0x10uLL), 0x10uLL)), vmax_s32(v28, v27)));
      goto LABEL_56;
    }
LABEL_54:
    a8 = a10;
    goto LABEL_56;
  }
  return result;
}

uint64_t sub_1BBB52B18(uint64_t result, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  *(void *)a6 = 0;
  *(void *)a7 = 0x2000000020;
  *a8 = 0;
  if (result)
  {
    double v8 = (char *)&unk_1BBB8DF30 + 80 * *(unsigned __int16 *)(a4 + 10);
    uint64_t v9 = v8[a3];
    if (v9 >= v8[a2]) {
      return result;
    }
    uint64_t v10 = a4 + 16 * v9;
  }
  else
  {
    if (!a5) {
      return result;
    }
    uint64_t v10 = a5 + 16 * *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * *(unsigned __int16 *)(a5 + 10) + a3);
  }
  int v11 = *(unsigned __int8 *)(v10 + 8);
  *(_DWORD *)a7 = v11;
  int v12 = *(unsigned __int8 *)(v10 + 9);
  *(_DWORD *)(a7 + 4) = v12;
  if (v11 != 32)
  {
    *(_DWORD *)a6 = *(_DWORD *)v10;
    int v12 = *(unsigned __int8 *)(a7 + 4);
  }
  if (v12 != 32) {
    *(_DWORD *)(a6 + 4) = *(_DWORD *)(v10 + 4);
  }
  *a8 = 1;
  return result;
}

float sub_1BBB52BB8(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  v94[2] = *(int16x4_t *)MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 272);
  *(_WORD *)(*(void *)(*(void *)(a1 + 176) + 272) + 10) = *(_WORD *)(v9 + 26);
  uint64_t v11 = *(void *)(a1 + 40);
  int v12 = *(unsigned __int8 *)(a1 + 31);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 272);
  int v14 = *(unsigned __int8 *)(v11 + 1);
  BOOL v15 = v14 == 4 || v14 == 2;
  if (!v15) {
    goto LABEL_18;
  }
  if (v12 == 2 || *(unsigned char *)(v9 + 2))
  {
    if (v14 != 2) {
      goto LABEL_18;
    }
    if (*(unsigned char *)(v11 + 2) != 4 || v13 == 0) {
      goto LABEL_39;
    }
LABEL_15:
    int v17 = (unsigned char *)(v9 + 24);
    uint64_t v18 = *(unsigned __int8 *)(v9 + 272);
    do
    {
      *int v17 = 0;
      v17 += 16;
      --v18;
    }
    while (v18);
    int v14 = *(unsigned __int8 *)(v11 + 1);
    goto LABEL_18;
  }
  if (*(unsigned char *)(v9 + 272)) {
    goto LABEL_15;
  }
LABEL_18:
  if (v14 == 5 || v14 == 3)
  {
    if (v12 != 2 && !*(unsigned char *)(v9 + 3) && v13 != 0)
    {
      int v21 = (unsigned char *)(v9 + 25);
      uint64_t v22 = v13;
      do
      {
        if (v21[6] - 5 <= 1) {
          *int v21 = 0;
        }
        v21 += 16;
        --v22;
      }
      while (v22);
    }
    if (v12 != 2 && !*(unsigned char *)(v9 + 2) && v13)
    {
      int32x2_t v23 = (unsigned char *)(v9 + 24);
      do
      {
        if ((v23[7] & 0xFD) == 4) {
          *int32x2_t v23 = 0;
        }
        v23 += 16;
        --v13;
      }
      while (v13);
    }
  }
LABEL_39:
  int v24 = *(unsigned __int8 **)(a1 + 48);
  uint64_t v25 = v24[272];
  int v26 = v24[5];
  int v92 = 0;
  if (!v25)
  {
    if (!v10) {
      return *(float *)&a2;
    }
    goto LABEL_52;
  }
  uint64_t v27 = 0;
  int32x2_t v28 = v24 + 31;
  while (1)
  {
    int v29 = *v28;
    v28 += 16;
    if (v29 == 3) {
      break;
    }
    if (v25 == ++v27) {
      goto LABEL_51;
    }
  }
  if (v26 != 1)
  {
    char v6 = 0;
    char v7 = 0;
    double v91 = 0.0;
LABEL_51:
    if (!v10) {
      return *(float *)&a2;
    }
LABEL_52:
    uint64_t v30 = 0;
    uint64_t v31 = v9 + 16;
    if (v6 == 32) {
      char v32 = 4;
    }
    else {
      char v32 = 6;
    }
    BOOL v33 = v6 != 32 || v7 != 32;
    int v86 = v92;
    if (v7 == 32) {
      char v34 = 5;
    }
    else {
      char v34 = v32;
    }
    uint64_t v85 = v10;
    char v83 = v7;
    char v84 = v6;
    char v81 = v34;
    BOOL v82 = v33;
    while (1)
    {
      int v35 = (int16x4_t *)(v31 + 16 * v30);
      if (v35[1].i8[7] == 3) {
        break;
      }
      sub_1BBB52450((void *)a1, v30, v94);
LABEL_149:
      int16x4_t v93 = vadd_s16(*v35, v94[0]);
      sub_1BBAF3090(a1, &v93, v35[1].u8[7], v35[1].u8[0], v35[1].u8[1], v30++);
      if (v30 == v10) {
        return *(float *)&a2;
      }
    }
    uint64_t v36 = *(void *)(a1 + 48);
    uint64_t v37 = *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * *(unsigned __int16 *)(v36 + 26) + v30 + 32);
    if (*(unsigned char *)v36) {
      uint64_t v37 = byte_1BBB8DF1C[v37];
    }
    int v38 = *(unsigned __int8 *)(v36 + 5);
    *(void *)(a1 + 2640) = *(void *)(*(void *)(**(void **)(a1 + 232) + 1256) + 8
                                                                                       * *(unsigned int *)(a1 + 16));
    unsigned int v39 = (unsigned char *)(v36 + 16 + 16 * (int)v30);
    v39[8] = v7;
    v39[9] = v6;
    uint64_t v40 = *(void *)(a1 + 48);
    uint64_t v41 = v40 + 16;
    if (v38 == 1)
    {
      uint64_t v42 = *(void *)(a1 + 2640)
          + 16
          * *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * *(unsigned __int16 *)(*(void *)(a1 + 2640) + 10) + v37);
      int v43 = *(unsigned __int8 *)(v42 + 8);
      if (v43 == 32)
      {
        int v43 = *(unsigned __int8 *)(v42 + 9);
        if (v43 == 32)
        {
          __int16 v44 = 0;
          __int16 v45 = 0;
          goto LABEL_82;
        }
        unsigned int v50 = (__int16 *)(v42 + 6);
        v42 += 4;
      }
      else
      {
        unsigned int v50 = (__int16 *)(v42 + 2);
      }
      __int16 v45 = *(_WORD *)v42;
      __int16 v44 = *v50;
LABEL_82:
      uint64_t v53 = v41 + 16 * (int)v30;
      int v54 = *(unsigned __int8 *)(v53 + 8);
      int v55 = *(unsigned __int8 *)(v53 + 9);
      sub_1BBB5286C(*(unsigned __int8 *)(*(void *)(a1 + 40) + 1), v40, v30, v89, (int *)v87, v90, v94, a2, a3, a4, a5, a6);
      if (*(unsigned __int8 *)(**(void **)(a1 + 232) + 1356) | v43) {
        BOOL v56 = 1;
      }
      else {
        BOOL v56 = v45 <= -2;
      }
      int v60 = !v56 && v45 < 2 && v44 > -2 && v44 < 2;
      if (v86 == 1)
      {
        v94[0].i32[0] = 0;
        uint64_t v10 = v85;
        char v7 = v83;
        char v6 = v84;
        char v34 = v81;
        BOOL v33 = v82;
      }
      else
      {
        if (v54) {
          int v61 = 0;
        }
        else {
          int v61 = v60;
        }
        BOOL v15 = v54 == 32;
        char v7 = v83;
        char v6 = v84;
        char v34 = v81;
        BOOL v33 = v82;
        if (v15 || v61) {
          v94[0].i32[0] = 0;
        }
        if (v55) {
          int v60 = 0;
        }
        BOOL v15 = v55 == 32;
        uint64_t v10 = v85;
        if (!v15 && !v60) {
          goto LABEL_147;
        }
      }
      v94[0].i32[1] = 0;
LABEL_147:
      if (!v33) {
        return *(float *)&a2;
      }
      v39[15] = v34;
      goto LABEL_149;
    }
    uint64_t v46 = *(void *)(a1 + 2640)
        + 16 * *((unsigned __int8 *)&unk_1BBB8DF30 + 80 * *(unsigned __int16 *)(*(void *)(a1 + 2640) + 10) + v37);
    if (*(unsigned char *)(v46 + 8) == 32)
    {
      if (*(unsigned char *)(v46 + 9) == 32)
      {
        __int16 v47 = 0;
        __int16 v48 = 0;
        unsigned __int8 v49 = 0;
LABEL_118:
        *(unsigned char *)(a1 + 187) = 0;
        uint64_t v63 = *(void *)(*(void *)(a1 + 224) + 8 * v49);
        int v64 = *(_DWORD *)(**(void **)(a1 + 232) + 1288);
        int v65 = *(_DWORD *)(v63 + 1288);
        if (*(unsigned char *)(v63 + 1356)) {
          BOOL v66 = 1;
        }
        else {
          BOOL v66 = v64 == v65;
        }
        if (v66)
        {
          __int16 v67 = 0;
          __int16 v68 = 0;
        }
        else
        {
          int v69 = v64 - v65;
          int v70 = *(_DWORD *)(*(void *)(a1 + 216) + 1288) - v65;
          if (v70 >= 127) {
            int v70 = 127;
          }
          if (v70 <= -128) {
            int v70 = -128;
          }
          if (v69 >= 127) {
            int v69 = 127;
          }
          if (v69 <= -128) {
            int v69 = -128;
          }
          int v71 = (v69 + ((v69 & 0x80) >> 7)) << 24 >> 25;
          if (v69 <= -2) {
            int v71 = -v71;
          }
          int v72 = v70 * (__int16)((__int16)(v71 + 0x4000) / v69);
          int v73 = (v72 + 32) >> 6;
          if (v72 > 65503) {
            int v73 = 1023;
          }
          if (v72 >= -65568) {
            int v74 = v73;
          }
          else {
            int v74 = -1024;
          }
          unsigned int v75 = (v74 * v48 + 128) >> 8;
          unsigned int v76 = (v74 * v47 + 128) >> 8;
          __int16 v67 = v75 - v48;
          __int16 v68 = v76 - v47;
          __int16 v48 = v75;
          __int16 v47 = v76;
        }
        v94[0].i16[0] = v48;
        v94[0].i16[1] = v47;
        v94[0].i16[2] = v67;
        v94[0].i16[3] = v68;
        BOOL v77 = (unsigned char *)(v41 + 16 * (int)v30);
        v77[8] = v49;
        v77[9] = 0;
        char v79 = v49 != 32 && *(unsigned char *)(a1 + 31) == 2;
        v77[12] = *(unsigned char *)(*(void *)(a1 + 256) + (v49 >> v79));
        v77[13] = *(unsigned char *)(*(void *)(a1 + 256) + 33);
        goto LABEL_147;
      }
      __int16 v48 = *(_WORD *)(v46 + 4);
      __int16 v47 = *(_WORD *)(v46 + 6);
      unsigned int v51 = *(unsigned __int8 *)(v46 + 13);
      if (v51 < 0x29)
      {
LABEL_112:
        unsigned __int8 v49 = *(unsigned char *)(*(void *)(a1 + 264) + v51);
        goto LABEL_118;
      }
      unsigned int v62 = *(_DWORD *)(a1 + 240);
      if (v62)
      {
        unsigned __int8 v49 = 0;
        while (*(unsigned __int8 *)(*(void *)(a1 + 256) + v49) != v51)
        {
          if (v62 <= ++v49) {
            goto LABEL_117;
          }
        }
        goto LABEL_118;
      }
    }
    else
    {
      __int16 v48 = *(_WORD *)v46;
      __int16 v47 = *(_WORD *)(v46 + 2);
      unsigned int v51 = *(unsigned __int8 *)(v46 + 12);
      if (v51 < 0x29) {
        goto LABEL_112;
      }
      unsigned int v52 = *(_DWORD *)(a1 + 240);
      if (v52)
      {
        unsigned __int8 v49 = 0;
        while (*(unsigned __int8 *)(*(void *)(a1 + 256) + v49) != v51)
        {
          if (v52 <= ++v49) {
            goto LABEL_117;
          }
        }
        goto LABEL_118;
      }
    }
LABEL_117:
    unsigned __int8 v49 = 32;
    goto LABEL_118;
  }
  sub_1BBB524FC((void *)a1, v27, v89, v87, v90, 0);
  a5 = 0.0;
  a2 = COERCE_DOUBLE(vadd_s32(vmin_s32(vsub_s32(vadd_s32(vmin_s32(vsub_s32(v87[1], v88), 0), v88), v87[0]), 0), v87[0]));
  double v91 = a2;
  *(void *)&a4 = 0x2000000020;
  a3 = COERCE_DOUBLE(vceq_s32((int32x2_t)vand_s8(*(int8x8_t *)&a2, (int8x8_t)0xFF000000FFLL), (int32x2_t)0x2000000020));
  if (LODWORD(a3) & HIDWORD(a3))
  {
    char v6 = 0;
    char v7 = 0;
    double v91 = 0.0;
    int v92 = 1;
    if (!v10) {
      return *(float *)&a2;
    }
    goto LABEL_52;
  }
  char v7 = LOBYTE(a2);
  char v6 = BYTE4(a2);
  if (v10) {
    goto LABEL_52;
  }
  return *(float *)&a2;
}

uint64_t sub_1BBB53280(uint64_t result, int a2, uint64_t a3, int a4)
{
  for (int i = 0; i != 16; ++i)
  {
    for (uint64_t j = 0; j != 16; ++j)
      *(unsigned char *)(result + j) = *(unsigned char *)(a3 + j);
    result += a2;
    a3 += a4;
  }
  return result;
}

uint64_t sub_1BBB532BC(uint64_t result, int a2, uint64_t a3, int a4)
{
  for (int i = 0; i != 8; ++i)
  {
    for (uint64_t j = 0; j != 16; ++j)
      *(unsigned char *)(result + j) = *(unsigned char *)(a3 + j);
    result += a2;
    a3 += a4;
  }
  return result;
}

uint64_t sub_1BBB532F8(uint64_t result, int a2, uint64_t a3, int a4)
{
  for (int i = 0; i != 16; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
      *(unsigned char *)(result + j) = *(unsigned char *)(a3 + j);
    result += a2;
    a3 += a4;
  }
  return result;
}

uint64_t sub_1BBB53334(uint64_t result, int a2, uint64_t a3, int a4)
{
  for (int i = 0; i != 8; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
      *(unsigned char *)(result + j) = *(unsigned char *)(a3 + j);
    result += a2;
    a3 += a4;
  }
  return result;
}

uint64_t sub_1BBB53370(uint64_t result, int a2, uint64_t a3, int a4)
{
  for (int i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
      *(unsigned char *)(result + j) = *(unsigned char *)(a3 + j);
    result += a2;
    a3 += a4;
  }
  return result;
}

uint64_t sub_1BBB533AC(uint64_t result, int a2, uint64_t a3, int a4)
{
  for (int i = 0; i != 8; ++i)
  {
    for (uint64_t j = 0; j != 4; ++j)
      *(unsigned char *)(result + j) = *(unsigned char *)(a3 + j);
    result += a2;
    a3 += a4;
  }
  return result;
}

uint64_t sub_1BBB533E8(uint64_t result, int a2, uint64_t a3, int a4)
{
  for (int i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 4; ++j)
      *(unsigned char *)(result + j) = *(unsigned char *)(a3 + j);
    result += a2;
    a3 += a4;
  }
  return result;
}

uint64_t sub_1BBB53424(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  for (int i = 0; i != 16; ++i)
  {
    for (uint64_t j = 0; j != 16; ++j)
      *(unsigned char *)(result + j) = (*(unsigned __int8 *)(a3 + j) + *(unsigned __int8 *)(a5 + j) + 1) >> 1;
    result += a2;
    a3 += a4;
    a5 += a4;
  }
  return result;
}

uint64_t sub_1BBB53474(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  for (int i = 0; i != 8; ++i)
  {
    for (uint64_t j = 0; j != 16; ++j)
      *(unsigned char *)(result + j) = (*(unsigned __int8 *)(a3 + j) + *(unsigned __int8 *)(a5 + j) + 1) >> 1;
    result += a2;
    a3 += a4;
    a5 += a4;
  }
  return result;
}

uint64_t sub_1BBB534C4(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  for (int i = 0; i != 16; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
      *(unsigned char *)(result + j) = (*(unsigned __int8 *)(a3 + j) + *(unsigned __int8 *)(a5 + j) + 1) >> 1;
    result += a2;
    a3 += a4;
    a5 += a4;
  }
  return result;
}

uint64_t sub_1BBB53514(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  for (int i = 0; i != 8; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
      *(unsigned char *)(result + j) = (*(unsigned __int8 *)(a3 + j) + *(unsigned __int8 *)(a5 + j) + 1) >> 1;
    result += a2;
    a3 += a4;
    a5 += a4;
  }
  return result;
}

uint64_t sub_1BBB53564(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  for (int i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
      *(unsigned char *)(result + j) = (*(unsigned __int8 *)(a3 + j) + *(unsigned __int8 *)(a5 + j) + 1) >> 1;
    result += a2;
    a3 += a4;
    a5 += a4;
  }
  return result;
}

uint64_t sub_1BBB535B4(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  for (int i = 0; i != 8; ++i)
  {
    for (uint64_t j = 0; j != 4; ++j)
      *(unsigned char *)(result + j) = (*(unsigned __int8 *)(a3 + j) + *(unsigned __int8 *)(a5 + j) + 1) >> 1;
    result += a2;
    a3 += a4;
    a5 += a4;
  }
  return result;
}

uint64_t sub_1BBB53604(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  for (int i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 4; ++j)
      *(unsigned char *)(result + j) = (*(unsigned __int8 *)(a3 + j) + *(unsigned __int8 *)(a5 + j) + 1) >> 1;
    result += a2;
    a3 += a4;
    a5 += a4;
  }
  return result;
}

uint8x8_t *sub_1BBB53654(uint8x8_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5 = vdupq_n_s32(a3);
  int32x4_t v6 = vdupq_n_s32(1 << (a5 - 1));
  int32x4_t v7 = vdupq_n_s32(a4);
  int v8 = 16;
  int32x4_t v9 = vnegq_s32(vdupq_n_s32(a5));
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  do
  {
    uint16x8_t v11 = vmovl_u8(*result);
    uint16x8_t v12 = vmovl_high_u8(*(uint8x16_t *)result->i8);
    *(int8x16_t *)result->i8 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v11.i8)), v9), v7), v10), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_high_u16(v11)), v9),
                                                               v7),
                                                             v10),
                                                           (int32x4_t)0)),
                                 (int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8)), v9), v7), v10), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_high_u16(v12)), v9), v7),
                                                             v10),
                                                           (int32x4_t)0)));
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --v8;
  }
  while (v8);
  return result;
}

uint8x8_t *sub_1BBB53720(uint8x8_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5 = vdupq_n_s32(a3);
  int32x4_t v6 = vdupq_n_s32(1 << (a5 - 1));
  int32x4_t v7 = vdupq_n_s32(a4);
  int v8 = 8;
  int32x4_t v9 = vnegq_s32(vdupq_n_s32(a5));
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  do
  {
    uint16x8_t v11 = vmovl_u8(*result);
    uint16x8_t v12 = vmovl_high_u8(*(uint8x16_t *)result->i8);
    *(int8x16_t *)result->i8 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v11.i8)), v9), v7), v10), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_high_u16(v11)), v9),
                                                               v7),
                                                             v10),
                                                           (int32x4_t)0)),
                                 (int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8)), v9), v7), v10), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_high_u16(v12)), v9), v7),
                                                             v10),
                                                           (int32x4_t)0)));
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --v8;
  }
  while (v8);
  return result;
}

uint8x8_t *sub_1BBB537EC(uint8x8_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5 = vdupq_n_s32(a3);
  int32x4_t v6 = vdupq_n_s32(1 << (a5 - 1));
  int32x4_t v7 = vdupq_n_s32(a4);
  int v8 = 16;
  int32x4_t v9 = vnegq_s32(vdupq_n_s32(a5));
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  do
  {
    uint16x8_t v11 = vmovl_u8(*result);
    *uint64_t result = (uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v11.i8)), v9), v7), v10), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_high_u16(v11)), v9), v7), v10), (int32x4_t)0)));
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --v8;
  }
  while (v8);
  return result;
}

uint8x8_t *sub_1BBB53878(uint8x8_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5 = vdupq_n_s32(a3);
  int32x4_t v6 = vdupq_n_s32(1 << (a5 - 1));
  int32x4_t v7 = vdupq_n_s32(a4);
  int v8 = 8;
  int32x4_t v9 = vnegq_s32(vdupq_n_s32(a5));
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  do
  {
    uint16x8_t v11 = vmovl_u8(*result);
    *uint64_t result = (uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v11.i8)), v9), v7), v10), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_high_u16(v11)), v9), v7), v10), (int32x4_t)0)));
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --v8;
  }
  while (v8);
  return result;
}

uint8x8_t *sub_1BBB53904(uint8x8_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5 = vdupq_n_s32(a3);
  int32x4_t v6 = vdupq_n_s32(1 << (a5 - 1));
  int32x4_t v7 = vdupq_n_s32(a4);
  int v8 = 4;
  int32x4_t v9 = vnegq_s32(vdupq_n_s32(a5));
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  do
  {
    uint16x8_t v11 = vmovl_u8(*result);
    *uint64_t result = (uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v11.i8)), v9), v7), v10), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v6, v5, (int32x4_t)vmovl_high_u16(v11)), v9), v7), v10), (int32x4_t)0)));
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --v8;
  }
  while (v8);
  return result;
}

__int32 *sub_1BBB53990(__int32 *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8, double a9, double a10, double a11, uint8x8_t a12)
{
  int32x4_t v12 = vdupq_n_s32(a3);
  int32x4_t v13 = vdupq_n_s32(1 << (a5 - 1));
  int32x4_t v14 = vdupq_n_s32(a4);
  int v15 = 8;
  int32x4_t v16 = vnegq_s32(vdupq_n_s32(a5));
  v17.i64[0] = 0xFF000000FFLL;
  v17.i64[1] = 0xFF000000FFLL;
  do
  {
    a12.i32[0] = *result;
    int16x8_t v18 = (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v13, v12, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a12))), v16), v14), v17), (int32x4_t)0);
    *(int16x4_t *)v18.i8 = vmovn_s32((int32x4_t)v18);
    a12 = (uint8x8_t)vmovn_s16(v18);
    *uint64_t result = a12.i32[0];
    uint64_t result = (__int32 *)((char *)result + a2);
    --v15;
  }
  while (v15);
  return result;
}

__int32 *sub_1BBB53A00(__int32 *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8, double a9, double a10, double a11, uint8x8_t a12)
{
  int32x4_t v12 = vdupq_n_s32(a3);
  int32x4_t v13 = vdupq_n_s32(1 << (a5 - 1));
  int32x4_t v14 = vdupq_n_s32(a4);
  int v15 = 4;
  int32x4_t v16 = vnegq_s32(vdupq_n_s32(a5));
  v17.i64[0] = 0xFF000000FFLL;
  v17.i64[1] = 0xFF000000FFLL;
  do
  {
    a12.i32[0] = *result;
    int16x8_t v18 = (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v13, v12, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a12))), v16), v14), v17), (int32x4_t)0);
    *(int16x4_t *)v18.i8 = vmovn_s32((int32x4_t)v18);
    a12 = (uint8x8_t)vmovn_s16(v18);
    *uint64_t result = a12.i32[0];
    uint64_t result = (__int32 *)((char *)result + a2);
    --v15;
  }
  while (v15);
  return result;
}

char *sub_1BBB53A70(char *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  int32x4_t v7 = vdupq_n_s32(a3);
  int32x4_t v8 = vdupq_n_s32(1 << (a7 - 1));
  int32x4_t v9 = vdupq_n_s32(a5);
  int32x4_t v10 = vdupq_n_s32(a4);
  int32x4_t v11 = vdupq_n_s32(a6);
  int v12 = 8;
  int32x4_t v13 = vnegq_s32(vdupq_n_s32(a7));
  v14.i64[0] = 0xFF000000FFLL;
  v14.i64[1] = 0xFF000000FFLL;
  do
  {
    uint16x8_t v17 = (uint16x8_t)vld2_s8(result);
    int8x8x2_t v15 = (int8x8x2_t)vmovl_u8(*(uint8x8_t *)v17.i8);
    v15.val[0] = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v7, (int32x4_t)vmovl_u16((uint16x4_t)v15.val[0])), v13), v9), v14), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v7, (int32x4_t)vmovl_high_u16((uint16x8_t)v15)), v13), v9), v14), (int32x4_t)0)));
    uint16x8_t v17 = vmovl_u8((uint8x8_t)v17.u64[1]);
    int8x8_t v16 = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v10, (int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8)), v13), v11), v14), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v10, (int32x4_t)vmovl_high_u16(v17)), v13), v11), v14), (int32x4_t)0)));
    vst2_s8(result, v15);
    result += a2;
    --v12;
  }
  while (v12);
  return result;
}

char *sub_1BBB53B44(char *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  int32x4_t v7 = vdupq_n_s32(a3);
  int32x4_t v8 = vdupq_n_s32(1 << (a7 - 1));
  int32x4_t v9 = vdupq_n_s32(a5);
  int32x4_t v10 = vdupq_n_s32(a4);
  int32x4_t v11 = vdupq_n_s32(a6);
  int v12 = 4;
  int32x4_t v13 = vnegq_s32(vdupq_n_s32(a7));
  v14.i64[0] = 0xFF000000FFLL;
  v14.i64[1] = 0xFF000000FFLL;
  do
  {
    uint16x8_t v17 = (uint16x8_t)vld2_s8(result);
    int8x8x2_t v15 = (int8x8x2_t)vmovl_u8(*(uint8x8_t *)v17.i8);
    v15.val[0] = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v7, (int32x4_t)vmovl_u16((uint16x4_t)v15.val[0])), v13), v9), v14), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v7, (int32x4_t)vmovl_high_u16((uint16x8_t)v15)), v13), v9), v14), (int32x4_t)0)));
    uint16x8_t v17 = vmovl_u8((uint8x8_t)v17.u64[1]);
    int8x8_t v16 = vmovn_s16(vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v10, (int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8)), v13), v11), v14), (int32x4_t)0), (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v10, (int32x4_t)vmovl_high_u16(v17)), v13), v11), v14), (int32x4_t)0)));
    vst2_s8(result, v15);
    result += a2;
    --v12;
  }
  while (v12);
  return result;
}

uint16x4_t *sub_1BBB53C18(uint16x4_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  int32x4_t v7 = vdupq_n_s32(a3);
  int32x4_t v8 = vdupq_n_s32(1 << (a7 - 1));
  int32x4_t v9 = vdupq_n_s32(a5);
  int32x4_t v10 = vdupq_n_s32(a4);
  int32x4_t v11 = vdupq_n_s32(a6);
  int v12 = 8;
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  int32x4_t v14 = vnegq_s32(vdupq_n_s32(a7));
  do
  {
    *uint64_t result = (uint16x4_t)vtrn1_s8((int8x8_t)vmovn_s32(vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v7, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*result), (int8x16_t)v13)), v14), v9), v13), (int32x4_t)0)), (int8x8_t)vmovn_s32(vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(
                                                  v8,
                                                  v10,
                                                  (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vrev16_s8((int8x8_t)*result)), (int8x16_t)v13)), v14), v11), v13), (int32x4_t)0)));
    uint64_t result = (uint16x4_t *)((char *)result + a2);
    --v12;
  }
  while (v12);
  return result;
}

uint16x4_t *sub_1BBB53CB8(uint16x4_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  int32x4_t v7 = vdupq_n_s32(a3);
  int32x4_t v8 = vdupq_n_s32(1 << (a7 - 1));
  int32x4_t v9 = vdupq_n_s32(a5);
  int32x4_t v10 = vdupq_n_s32(a4);
  int32x4_t v11 = vdupq_n_s32(a6);
  int v12 = 4;
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  int32x4_t v14 = vnegq_s32(vdupq_n_s32(a7));
  do
  {
    *uint64_t result = (uint16x4_t)vtrn1_s8((int8x8_t)vmovn_s32(vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v8, v7, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*result), (int8x16_t)v13)), v14), v9), v13), (int32x4_t)0)), (int8x8_t)vmovn_s32(vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(
                                                  v8,
                                                  v10,
                                                  (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vrev16_s8((int8x8_t)*result)), (int8x16_t)v13)), v14), v11), v13), (int32x4_t)0)));
    uint64_t result = (uint16x4_t *)((char *)result + a2);
    --v12;
  }
  while (v12);
  return result;
}

uint16x4_t *sub_1BBB53D58(uint16x4_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  char v7 = 1;
  int32x4_t v8 = vdupq_n_s32(a3);
  int32x4_t v9 = vdupq_n_s32(1 << (a7 - 1));
  int32x4_t v10 = vdupq_n_s32(a5);
  int32x4_t v11 = vdupq_n_s32(a4);
  int32x4_t v12 = vdupq_n_s32(a6);
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  int32x4_t v14 = vnegq_s32(vdupq_n_s32(a7));
  do
  {
    char v15 = v7;
    *uint64_t result = (uint16x4_t)vtrn1_s8((int8x8_t)vmovn_s32(vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(v9, v8, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*result), (int8x16_t)v13)), v14), v10), v13), (int32x4_t)0)), (int8x8_t)vmovn_s32(vmaxq_s32(vminq_s32(vaddq_s32(vshlq_s32(vmlaq_s32(
                                                  v9,
                                                  v11,
                                                  (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vrev16_s8((int8x8_t)*result)), (int8x16_t)v13)), v14), v12), v13), (int32x4_t)0)));
    uint64_t result = (uint16x4_t *)((char *)result + a2);
    char v7 = 0;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t sub_1BBB53DF8(uint64_t result, int a2, int a3, int a4, int a5, int a6, char a7)
{
  int v7 = 0;
  int v8 = 1 << (a7 - 1);
  do
  {
    uint64_t v9 = 0;
    char v10 = 1;
    do
    {
      char v11 = v10;
      int v12 = ((v8 + *(unsigned __int8 *)(result + v9) * a3) >> a7) + a5;
      if (v12 >= 255) {
        int v12 = 255;
      }
      *(unsigned char *)(result + v9) = v12 & ~(v12 >> 31);
      uint64_t v13 = v9 | 1;
      int v14 = ((v8 + *(unsigned __int8 *)(result + v13) * a4) >> a7) + a6;
      if (v14 >= 255) {
        int v14 = 255;
      }
      *(unsigned char *)(result + v13) = v14 & ~(v14 >> 31);
      uint64_t v9 = 2;
      char v10 = 0;
    }
    while ((v11 & 1) != 0);
    result += a2;
    ++v7;
  }
  while (v7 != 4);
  return result;
}

uint64_t sub_1BBB53E80(uint64_t result, int a2, int a3, int a4, int a5, int a6, char a7)
{
  char v7 = 1;
  int v8 = 1 << (a7 - 1);
  do
  {
    uint64_t v9 = 0;
    char v10 = v7;
    char v11 = 1;
    do
    {
      char v12 = v11;
      int v13 = ((v8 + *(unsigned __int8 *)(result + v9) * a3) >> a7) + a5;
      if (v13 >= 255) {
        int v13 = 255;
      }
      *(unsigned char *)(result + v9) = v13 & ~(v13 >> 31);
      uint64_t v14 = v9 | 1;
      int v15 = ((v8 + *(unsigned __int8 *)(result + v14) * a4) >> a7) + a6;
      if (v15 >= 255) {
        int v15 = 255;
      }
      *(unsigned char *)(result + v14) = v15 & ~(v15 >> 31);
      uint64_t v9 = 2;
      char v11 = 0;
    }
    while ((v12 & 1) != 0);
    char v7 = 0;
    result += a2;
  }
  while ((v10 & 1) != 0);
  return result;
}

uint64_t sub_1BBB53F04(uint64_t result, int a2, uint64_t a3, int a4, int a5, char a6, char a7)
{
  if (a5 >= 1)
  {
    int v7 = 0;
    int v8 = 8 - (a6 & 7);
    int v9 = (8 - (a7 & 7)) * v8;
    int v10 = (8 - (a7 & 7)) * (a6 & 7);
    int v11 = v8 * (a7 & 7);
    uint64_t v12 = a4 + a3 + 1;
    int v13 = (a7 & 7) * (a6 & 7);
    do
    {
      for (uint64_t i = 0; i != 16; i += 2)
      {
        int v15 = (unsigned char *)(result + i);
        *int v15 = (v10 * *(unsigned __int8 *)(a3 + i + 2)
              + v9 * *(unsigned __int8 *)(a3 + i)
              + v11 * *(unsigned __int8 *)(v12 + i - 1)
              + v13 * *(unsigned __int8 *)(v12 + i + 1)
              + 32) >> 6;
        v15[1] = (v10 * *(unsigned __int8 *)(a3 + i + 3)
                + v9 * *(unsigned __int8 *)(a3 + i + 1)
                + v11 * *(unsigned __int8 *)(v12 + i)
                + v13 * *(unsigned __int8 *)(v12 + i + 2)
                + 32) >> 6;
      }
      result += a2;
      ++v7;
      v12 += a4;
      a3 += a4;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_1BBB53FE0(uint64_t result, int a2, uint64_t a3, int a4, int a5, char a6, char a7)
{
  if (a5 >= 1)
  {
    int v7 = 0;
    int v8 = 8 - (a6 & 7);
    int v9 = (8 - (a7 & 7)) * v8;
    int v10 = (8 - (a7 & 7)) * (a6 & 7);
    int v11 = v8 * (a7 & 7);
    uint64_t v12 = a4 + a3 + 1;
    int v13 = (a7 & 7) * (a6 & 7);
    do
    {
      for (uint64_t i = 0; i != 8; i += 2)
      {
        int v15 = (unsigned char *)(result + i);
        *int v15 = (v10 * *(unsigned __int8 *)(a3 + i + 2)
              + v9 * *(unsigned __int8 *)(a3 + i)
              + v11 * *(unsigned __int8 *)(v12 + i - 1)
              + v13 * *(unsigned __int8 *)(v12 + i + 1)
              + 32) >> 6;
        v15[1] = (v10 * *(unsigned __int8 *)(a3 + i + 3)
                + v9 * *(unsigned __int8 *)(a3 + i + 1)
                + v11 * *(unsigned __int8 *)(v12 + i)
                + v13 * *(unsigned __int8 *)(v12 + i + 2)
                + 32) >> 6;
      }
      result += a2;
      ++v7;
      v12 += a4;
      a3 += a4;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_1BBB540BC(uint64_t result, int a2, uint64_t a3, int a4, int a5, char a6, char a7)
{
  if (a5 >= 1)
  {
    int v7 = 0;
    int v8 = 8 - (a6 & 7);
    int v9 = (8 - (a7 & 7)) * v8;
    int v10 = (8 - (a7 & 7)) * (a6 & 7);
    int v11 = v8 * (a7 & 7);
    int v12 = (a7 & 7) * (a6 & 7);
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = a3 + a4;
      char v15 = 1;
      do
      {
        *(unsigned char *)(result + v13) = (v10 * *(unsigned __int8 *)(a3 + v13 + 2)
                                  + v9 * *(unsigned __int8 *)(a3 + v13)
                                  + v11 * *(unsigned __int8 *)(v14 + v13)
                                  + v12 * *(unsigned __int8 *)(v14 + v13 + 2)
                                  + 32) >> 6;
        char v16 = v15;
        *(unsigned char *)(result + (v13 | 1)) = (v10 * *(unsigned __int8 *)(a3 + v13 + 3)
                                        + v9 * *(unsigned __int8 *)(a3 + (v13 | 1))
                                        + v11 * *(unsigned __int8 *)(v14 + (v13 | 1))
                                        + v12 * *(unsigned __int8 *)(v14 + v13 + 3)
                                        + 32) >> 6;
        uint64_t v13 = 2;
        char v15 = 0;
      }
      while ((v16 & 1) != 0);
      result += a2;
      ++v7;
      a3 += a4;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t sub_1BBB5418C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 272);
  if (*(unsigned char *)(v4 + 272))
  {
    uint64_t v6 = v4 + 24;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 224 + 8 * (*(unsigned __int8 *)(v6 + 7) - 4))
                                 + 8 * *(unsigned __int8 *)(v6 + *(unsigned __int8 *)(v6 + 7) - 4))
                     + 488);
      if (*(_DWORD *)(v7 + 152)) {
        sub_1BBB1228C(v7);
      }
      v6 += 16;
      --v5;
    }
    while (v5);
  }

  return sub_1BBB54220(a1, a2, 0);
}

uint64_t sub_1BBB54220(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = *(void *)(result + 48);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 272);
  if (*(unsigned char *)(v3 + 272))
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v35 = *a2;
    uint64_t v39 = a2[2];
    unsigned int v48 = *((_DWORD *)a2 + 6);
    unsigned int v49 = *((_DWORD *)a2 + 2);
    uint64_t v7 = (char *)&unk_1BBB8DF50;
    int v8 = (char *)&unk_1BBB8DF60;
    uint64_t v9 = 16 * v4;
    uint64_t v37 = *(void *)(*(void *)(result + 176) + 272);
    uint64_t v50 = result;
    uint64_t v38 = 16 * v4;
    uint64_t v40 = *(void *)(result + 48);
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 *)(v3 + v6 + 31);
      if (v10 != 6) {
        break;
      }
LABEL_16:
      ++v7;
      v8 += 2;
      v6 += 16;
      if (v9 == v6) {
        return result;
      }
    }
    uint64_t v11 = (v10 - 4);
    uint64_t v12 = *(unsigned __int8 *)(v3 + v6 + v11 + 24);
    uint64_t v13 = *(void *)(v5 + 112);
    uint64_t v14 = *(unsigned int *)(v13 + 4);
    uint64_t v15 = (1 << v14);
    uint64_t v53 = v12;
    uint64_t v47 = *(unsigned int *)(v13 + 8);
    if (*(unsigned char *)(v5 + 186))
    {
      uint64_t v16 = v13 + 32 * v11 + v12;
      if (*(unsigned char *)(v16 + 12))
      {
        uint64_t v17 = v13 + 384 * v11 + 12 * v12;
        uint64_t v15 = *(unsigned int *)(v17 + 140);
        unsigned int v42 = *(_DWORD *)(v17 + 908);
      }
      else
      {
        unsigned int v42 = 0;
      }
      if (*(unsigned char *)(v16 + 76))
      {
        int16x8_t v18 = (_DWORD *)(v13 + 384 * v11 + 12 * v12);
        unsigned int v46 = v18[37];
        unsigned int v45 = v18[228];
        unsigned int v43 = v18[36];
        unsigned int v44 = v18[229];
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v42 = 0;
    }
    unsigned int v44 = 0;
    unsigned int v45 = 0;
    unsigned int v46 = 1 << *(_DWORD *)(v13 + 8);
    unsigned int v43 = v46;
LABEL_12:
    uint64_t v19 = 80 * *(unsigned __int16 *)(v3 + 26);
    unint64_t v20 = *(_WORD *)&v8[v19];
    unint64_t v21 = (unint64_t)*(unsigned __int16 *)&v8[v19] >> 8;
    uint64_t v22 = v7[v19];
    uint64_t v23 = byte_1BBB93FD7[v22];
    unsigned int v24 = byte_1BBB93FE7[v22];
    uint64_t v25 = v37 + 4 * v11;
    unsigned int v26 = v20 >> 3;
    unsigned __int8 v51 = v21;
    unsigned int v52 = v20 >> 3;
    if (!a3)
    {
      unsigned int v36 = *(__int16 *)(v25 + v6);
      if (HIWORD(*(_DWORD *)(v25 + v6)) & 1 | (4 * (*(unsigned char *)(v25 + v6) & 3)) & 0x55)
      {
        int v29 = *(void (**)(void))((char *)&off_1EC59C968[3 * (v20 >> 3)] + (v21 & 0xF8));
        uint64_t v30 = v14;
        uint64_t v31 = v15;
        v29();
        unsigned int v26 = v52;
        uint64_t v32 = v31;
      }
      else
      {
        BOOL v33 = *(void (**)(void))((char *)&off_1EC59C9D0[3 * v26] + (v21 & 0xF8));
        uint64_t v30 = v14;
        unsigned int v34 = v15;
        v33();
        unsigned int v26 = v52;
        uint64_t v32 = v34;
      }
      if (*(unsigned char *)(*(void *)(v50 + 112) + 32 * v11 + v53 + 12) && *(unsigned char *)(v50 + 186))
      {
        (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void))((char *)&off_1EC59CA70[3 * v52]
                                                                                  + (v51 & 0xF8)))(v35 + v23 + v49 * v24, v49, v32, v42, v30, v36);
        unsigned int v26 = v52;
      }
    }
    uint64_t v27 = v39 + v23 + (v24 >> 1) * v48;
    uint64_t result = ((uint64_t (*)(uint64_t))off_1EC59C9B8[v26])(v27);
    uint64_t v5 = v50;
    int v28 = *(unsigned __int8 *)(*(void *)(v50 + 112) + 32 * v11 + v53 + 76);
    uint64_t v3 = v40;
    uint64_t v9 = v38;
    if (v28)
    {
      if (*(unsigned char *)(v50 + 186)) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void, void, void, uint64_t))((char *)&off_1F14ED7F8[3 * v52] + (v51 & 0xF8)))(v27, v48, v43, v46, v45, v44, v47);
      }
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1BBB54730(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  sub_1BBB5418C(a1, (uint64_t *)a3);
  uint64_t v7 = *a4;
  uint64_t v8 = a4[2];
  uint64_t v9 = *((unsigned int *)a2 + 2);
  uint64_t v10 = *((unsigned int *)a2 + 6);
  uint64_t v11 = *(unsigned int *)(a3 + 8);
  uint64_t v12 = *(unsigned int *)(a3 + 24);
  uint64_t v13 = *a2;
  uint64_t v14 = *(void *)a3;
  uint64_t v15 = a2[2];
  uint64_t v16 = *(void *)(a3 + 16);
  off_1E9F83388(v13, v9, v14, v11, v7, 16);
  uint64_t v17 = off_1E9F83388;

  return v17(v15, v10, v16, v12, v8, 8);
}

uint64_t sub_1BBB547D4(uint64_t a1, __int16 *a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(a1 + 488);
  if (*(_DWORD *)(v15 + 152)) {
    sub_1BBB1228C(*(void *)(a1 + 488));
  }
  int v16 = *a2;
  int v17 = a2[1];
  uint64_t v18 = v17 & 3 | (4 * (v16 & 3u));
  int v19 = a5 + 16 * a3 + (v16 >> 2);
  int v20 = a6 + 16 * a4 + (v17 >> 2);
  uint64_t result = *(unsigned int *)(a1 + 196);
  int v22 = *(_DWORD *)(a1 + 228);
  uint64_t v23 = *(int *)(a1 + 232);
  uint64_t v24 = 32 * v23;
  uint64_t v26 = *(void *)(v15 + 72);
  uint64_t v25 = *(void *)(v15 + 80);
  uint64_t v27 = *(void *)(v15 + 88);
  uint64_t v28 = *(void *)(v15 + 96);
  int v29 = v22 + 2;
  int v30 = ((v19 - v22 - 2) & ((v19 - v22 - 2) >> 31)) + v22 + 2;
  if (v30 <= -19) {
    int v31 = -19;
  }
  else {
    int v31 = v30;
  }
  int v32 = result + 2;
  int v33 = ((v20 - result - 2) & ((v20 - (int)result - 2) >> 31)) + result + 2;
  if (v33 <= -19) {
    int v33 = -19;
  }
  switch(v18)
  {
    case 1:
      uint64_t v37 = 0;
      uint64_t v38 = v31 + (int)v23 * (uint64_t)v33;
      uint64_t v39 = v38 + v24 + v27 + 32;
      uint64_t v40 = v26 + v38;
      do
      {
        for (uint64_t i = 0; i != 16; ++i)
          *(unsigned char *)(a8 + i) = (*(unsigned __int8 *)(v39 + i) + *(unsigned __int8 *)(v40 + i)) >> 1;
        ++v37;
        a8 += 16;
        v39 += v23;
        v40 += v23;
      }
      while (v37 != 16);
      break;
    case 2:
      uint64_t v42 = 0;
      uint64_t v43 = v31 + (int)v23 * (uint64_t)v33 + v24 + v27 + 32;
      do
      {
        for (uint64_t j = 0; j != 16; ++j)
          *(unsigned char *)(a8 + j) = *(unsigned char *)(v43 + j);
        ++v42;
        a8 += 16;
        v43 += v23;
      }
      while (v42 != 16);
      break;
    case 3:
      uint64_t v45 = 0;
      int v46 = ((v33 + ~result) & ((v33 + ~result) >> 31)) + v32;
      if (v46 <= -19) {
        int v46 = -19;
      }
      uint64_t v47 = v31 + (int)v23 * (uint64_t)v33 + v24 + v27 + 32;
      uint64_t v48 = v26 + v31 + (int)v23 * (uint64_t)v46;
      do
      {
        for (uint64_t k = 0; k != 16; ++k)
          *(unsigned char *)(a8 + k) = (*(unsigned __int8 *)(v47 + k) + *(unsigned __int8 *)(v48 + k)) >> 1;
        ++v45;
        a8 += 16;
        v47 += v23;
        v48 += v23;
      }
      while (v45 != 16);
      break;
    case 4:
      uint64_t v50 = 0;
      uint64_t v51 = v31 + (int)v23 * (uint64_t)v33;
      uint64_t v52 = v51 + v24 + v25 + 32;
      uint64_t v53 = v26 + v51;
      do
      {
        for (uint64_t m = 0; m != 16; ++m)
          *(unsigned char *)(a8 + m) = (*(unsigned __int8 *)(v52 + m) + *(unsigned __int8 *)(v53 + m)) >> 1;
        ++v50;
        a8 += 16;
        v52 += v23;
        v53 += v23;
      }
      while (v50 != 16);
      break;
    case 5:
      uint64_t v55 = 0;
      uint64_t v56 = v31 + (int)v23 * (uint64_t)v33 + v24 + 32;
      uint64_t v57 = v25 + v56;
      uint64_t v58 = v27 + v56;
      do
      {
        for (uint64_t n = 0; n != 16; ++n)
          *(unsigned char *)(a8 + n) = (*(unsigned __int8 *)(v57 + n) + *(unsigned __int8 *)(v58 + n)) >> 1;
        ++v55;
        a8 += 16;
        v57 += v23;
        v58 += v23;
      }
      while (v55 != 16);
      break;
    case 6:
      uint64_t v60 = 0;
      uint64_t v61 = v31 + (int)v23 * (uint64_t)v33 + v24 + 32;
      uint64_t v62 = v28 + v61;
      uint64_t v63 = v27 + v61;
      do
      {
        for (iuint64_t i = 0; ii != 16; ++ii)
          *(unsigned char *)(a8 + ii) = (*(unsigned __int8 *)(v62 + ii) + *(unsigned __int8 *)(v63 + ii)) >> 1;
        ++v60;
        a8 += 16;
        v62 += v23;
        v63 += v23;
      }
      while (v60 != 16);
      break;
    case 7:
      uint64_t v65 = 0;
      int v66 = ((v33 + ~result) & ((v33 + ~result) >> 31)) + v32;
      if (v66 <= -19) {
        int v66 = -19;
      }
      uint64_t v67 = v31 + (int)v23 * (uint64_t)v33 + v24 + v27 + 32;
      uint64_t v68 = v31 + (int)v23 * (uint64_t)v66 + v24 + v25 + 32;
      do
      {
        for (juint64_t j = 0; jj != 16; ++jj)
          *(unsigned char *)(a8 + jj) = (*(unsigned __int8 *)(v67 + jj) + *(unsigned __int8 *)(v68 + jj)) >> 1;
        ++v65;
        a8 += 16;
        v67 += v23;
        v68 += v23;
      }
      while (v65 != 16);
      break;
    case 8:
      uint64_t v70 = 0;
      uint64_t v71 = v31 + (int)v23 * (uint64_t)v33 + v24 + v25 + 32;
      do
      {
        for (kuint64_t k = 0; kk != 16; ++kk)
          *(unsigned char *)(a8 + kk) = *(unsigned char *)(v71 + kk);
        ++v70;
        a8 += 16;
        v71 += v23;
      }
      while (v70 != 16);
      break;
    case 9:
      uint64_t v73 = 0;
      uint64_t v74 = v31 + (int)v23 * (uint64_t)v33 + v24 + 32;
      uint64_t v75 = v25 + v74;
      uint64_t v76 = v28 + v74;
      do
      {
        for (muint64_t m = 0; mm != 16; ++mm)
          *(unsigned char *)(a8 + mm) = (*(unsigned __int8 *)(v75 + mm) + *(unsigned __int8 *)(v76 + mm)) >> 1;
        ++v73;
        a8 += 16;
        v75 += v23;
        v76 += v23;
      }
      while (v73 != 16);
      break;
    case 10:
      uint64_t v78 = 0;
      uint64_t v79 = v31 + (int)v23 * (uint64_t)v33 + v24 + v28 + 32;
      do
      {
        for (nuint64_t n = 0; nn != 16; ++nn)
          *(unsigned char *)(a8 + nn) = *(unsigned char *)(v79 + nn);
        ++v78;
        a8 += 16;
        v79 += v23;
      }
      while (v78 != 16);
      break;
    case 11:
      uint64_t v81 = 0;
      int v82 = ((v33 + ~result) & ((v33 + ~result) >> 31)) + v32;
      if (v82 <= -19) {
        int v82 = -19;
      }
      uint64_t v83 = v31 + (int)v23 * (uint64_t)v33 + v24 + v28 + 32;
      uint64_t v84 = v31 + (int)v23 * (uint64_t)v82 + v24 + v25 + 32;
      do
      {
        for (uint64_t i1 = 0; i1 != 16; ++i1)
          *(unsigned char *)(a8 + i1) = (*(unsigned __int8 *)(v83 + i1) + *(unsigned __int8 *)(v84 + i1)) >> 1;
        ++v81;
        a8 += 16;
        v83 += v23;
        v84 += v23;
      }
      while (v81 != 16);
      break;
    case 12:
      uint64_t v86 = 0;
      int v87 = ((v31 + ~v22) & ((v31 + ~v22) >> 31)) + v29;
      if (v87 <= -19) {
        int v87 = -19;
      }
      uint64_t v88 = v31 + (int)v23 * (uint64_t)v33 + v24 + v25 + 32;
      uint64_t v89 = v26 + v87 + (int)v23 * (uint64_t)v33;
      do
      {
        for (uint64_t i2 = 0; i2 != 16; ++i2)
          *(unsigned char *)(a8 + i2) = (*(unsigned __int8 *)(v88 + i2) + *(unsigned __int8 *)(v89 + i2)) >> 1;
        ++v86;
        a8 += 16;
        v88 += v23;
        v89 += v23;
      }
      while (v86 != 16);
      break;
    case 13:
      uint64_t v91 = 0;
      int v92 = ((v31 + ~v22) & ((v31 + ~v22) >> 31)) + v29;
      if (v92 <= -19) {
        int v92 = -19;
      }
      uint64_t v93 = v31 + (int)v23 * (uint64_t)v33 + v24 + v25 + 32;
      uint64_t v94 = v92 + (int)v23 * (uint64_t)v33 + v24 + v27 + 32;
      do
      {
        for (uint64_t i3 = 0; i3 != 16; ++i3)
          *(unsigned char *)(a8 + i3) = (*(unsigned __int8 *)(v93 + i3) + *(unsigned __int8 *)(v94 + i3)) >> 1;
        ++v91;
        a8 += 16;
        v93 += v23;
        v94 += v23;
      }
      while (v91 != 16);
      break;
    case 14:
      uint64_t v96 = 0;
      int v97 = ((v31 + ~v22) & ((v31 + ~v22) >> 31)) + v29;
      if (v97 <= -19) {
        int v97 = -19;
      }
      uint64_t v98 = v31 + (int)v23 * (uint64_t)v33 + v24 + v28 + 32;
      uint64_t v99 = v97 + (int)v23 * (uint64_t)v33 + v24 + v27 + 32;
      do
      {
        for (uint64_t i4 = 0; i4 != 16; ++i4)
          *(unsigned char *)(a8 + i4) = (*(unsigned __int8 *)(v98 + i4) + *(unsigned __int8 *)(v99 + i4)) >> 1;
        ++v96;
        a8 += 16;
        v98 += v23;
        v99 += v23;
      }
      while (v96 != 16);
      break;
    case 15:
      uint64_t v101 = 0;
      int v102 = ((v31 + ~v22) & ((v31 + ~v22) >> 31)) + v29;
      int v103 = ((v33 + ~result) & ((v33 + ~result) >> 31)) + v32;
      if (v102 <= -19) {
        int v102 = -19;
      }
      if (v103 <= -19) {
        int v103 = -19;
      }
      uint64_t v104 = v31 + (int)v23 * (uint64_t)v103 + v24 + v25 + 32;
      uint64_t v105 = v102 + (int)v23 * (uint64_t)v33 + v24 + v27 + 32;
      do
      {
        for (uint64_t i5 = 0; i5 != 16; ++i5)
          *(unsigned char *)(a8 + i5) = (*(unsigned __int8 *)(v104 + i5) + *(unsigned __int8 *)(v105 + i5)) >> 1;
        ++v101;
        a8 += 16;
        v104 += v23;
        v105 += v23;
      }
      while (v101 != 16);
      break;
    default:
      uint64_t v34 = 0;
      uint64_t v35 = v26 + v31 + (int)v23 * (uint64_t)v33;
      do
      {
        for (uint64_t i6 = 0; i6 != 16; ++i6)
          *(unsigned char *)(a8 + i6) = *(unsigned char *)(v35 + i6);
        ++v34;
        a8 += 16;
        v35 += v23;
      }
      while (v34 != 16);
      break;
  }
  return result;
}

void sub_1BBB54FA0(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 80));
    free(*(void **)(a1 + 88));
    free(*(void **)(a1 + 96));
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    unsigned int v2 = *(void **)(a1 + 40);
    if (v2) {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 40));
    }
    free(v2);
    *(void *)(a1 + 40) = 0;
    uint64_t v3 = *(void **)(a1 + 48);
    if (v3) {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 48));
    }
    free(v3);
    *(void *)(a1 + 48) = 0;
    uint64_t v4 = *(void **)(a1 + 136);
    if (v4) {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 136));
    }
    free(v4);
    *(void *)(a1 + 136) = 0;
    uint64_t v5 = *(void **)(a1 + 144);
    if (v5) {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 144));
    }
    free(v5);
    *(void *)(a1 + 144) = 0;
  }
}

uint64_t sub_1BBB55064(uint64_t result, int a2)
{
  if (result && a2)
  {
    unsigned int v2 = *(_WORD **)(result + 1032);
    uint64_t v3 = *(void *)(result + 1040);
    unsigned int v4 = *(_DWORD *)(result + 148);
    uint64_t v5 = *(unsigned int *)(result + 116);
    _WORD *v2 = 0x4000;
    int v6 = (v4 >> 4) - 1;
    if (v4 >= 0x20)
    {
      uint64_t v7 = 0;
      if (v6 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v6;
      }
      uint64x2_t v9 = (uint64x2_t)vdupq_n_s64(v8 - 1);
      int64x2_t v10 = (int64x2_t)xmmword_1BBB6F620;
      int64x2_t v11 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v12 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v10));
        if (v12.i8[0]) {
          v2[v7 + 1] = v7 & 0x1FFE | 0xA000;
        }
        if (v12.i8[4]) {
          v2[v7 + 2] = v7 & 0x1FFE | 0xA001;
        }
        v7 += 2;
        int64x2_t v10 = vaddq_s64(v10, v11);
      }
      while (((v8 + 1) & 0x1FFFFFFE) != v7);
    }
    v2[v6 + 1] = v6 & 0x1FFF | 0x6000;
    *(_DWORD *)(v3 + 32) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    if ((int)v5 >= 1)
    {
      int v13 = 0;
      uint64_t v14 = (_DWORD *)(v3 + 36);
      uint64_t v15 = v5;
      do
      {
        *v14++ = v13;
        v13 += a2;
        --v15;
      }
      while (v15);
    }
    uint64_t v16 = 0;
    uint64_t v17 = v3 + 4 * (int)v5 + 36;
    do
    {
      *(_DWORD *)(v17 + v16) = (v5 - 1) * a2;
      v16 += 4;
    }
    while (v16 != 36);
    if (*(unsigned char *)result) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = ((int)v5 / 2);
    }
    uint64_t v18 = *(void *)(result + 1048);
    if (v18)
    {
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)uint64_t v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      if ((int)v5 >= 1)
      {
        int v19 = 0;
        int v20 = (_DWORD *)(v18 + 36);
        uint64_t v21 = v5;
        do
        {
          *v20++ = v19;
          v19 += a2;
          --v21;
        }
        while (v21);
      }
      uint64_t v22 = 0;
      int v23 = (v5 - 1) * a2;
      uint64_t v24 = v18 + 4 * (int)v5 + 36;
      do
      {
        *(_DWORD *)(v24 + v22) = v23;
        v22 += 4;
      }
      while (v22 != 36);
    }
  }
  return result;
}

void sub_1BBB551EC(void *a1, int a2, unsigned int a3)
{
}

void sub_1BBB5523C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  if (a8 <= a7)
  {
    unsigned int v10 = a8;
    if (a9 >= a7) {
      unsigned int v13 = a7;
    }
    else {
      unsigned int v13 = a9;
    }
    int v14 = 16 * a6;
    uint64_t v15 = (char *)malloc_type_calloc((qword_1E9F82E38 + 2 * (unint64_t)(16 * a6 + 80) - 1) >> qword_1E9F82E40, qword_1E9F82E38, 0x68FC2D8FuLL);
    int v32 = v15;
    if (v10)
    {
      uint64_t v16 = (v14 + 64);
      unsigned int v17 = a5;
    }
    else
    {
      uint64_t v18 = 13 * a5;
      uint64_t v16 = (v14 + 64);
      uint64_t v33 = a4;
      int v19 = v15 + 16;
      int v20 = 19;
      do
      {
        off_1E9F83210(a3 + v18, a1 + v18, v19);
        off_1E9F83220(v33 + v18, v19, v16);
        off_1E9F83218(a2 + v18, a1 + v18, v16);
        unsigned int v17 = a5;
        v18 += a5;
        --v20;
      }
      while (v20);
      a4 = v33;
      unsigned int v10 = 0;
    }
    uint64_t v21 = a4;
    if (16 * v13 > 16 * v10)
    {
      int v22 = 16 * v10;
      uint64_t v23 = (16 * v10 + 32) * v17;
      uint64_t v24 = v32 + 16;
      uint64_t v34 = v17;
      int v25 = 16 * v13 - v22;
      do
      {
        off_1E9F83210(a3 + v23, a1 + v23, v24);
        off_1E9F83220(a4 + v23, v24, v16);
        a4 = v21;
        off_1E9F83218(a2 + v23, a1 + v23, v16);
        unsigned int v17 = a5;
        v23 += v34;
        --v25;
      }
      while (v25);
    }
    if (a7 <= a9)
    {
      uint64_t v26 = (16 * a7 + 32) * v17;
      uint64_t v27 = v32 + 16;
      uint64_t v35 = v17;
      int v28 = 19;
      do
      {
        off_1E9F83210(a3 + v26, a1 + v26, v27);
        off_1E9F83220(a4 + v26, v27, v16);
        a4 = v21;
        off_1E9F83218(a2 + v26, a1 + v26, v16);
        v26 += v35;
        --v28;
      }
      while (v28);
    }
    free(v32);
  }
}

void sub_1BBB554F4(uint64_t a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1BBB55548(uint64_t a1)
{
  off_1E9F83228(*(void *)(*(void *)(a1 + 16) + 32)
              - (32 * *(_DWORD *)(*(void *)(a1 + 16) + 136)) - 32);
  unsigned int v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_1E9F83230;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v6 = *(unsigned int *)(v3 + 148);
  uint64_t v5 = *(unsigned int *)(v3 + 152);
  uint64_t v7 = *(unsigned int *)(v3 + 116);

  return v2(v4, v5, v6, v7);
}

uint64_t sub_1BBB555C0(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v3 = *((unsigned int *)v2 + 34);
  uint64_t v4 = *((void *)v2 + 4);
  if (v2[3])
  {
    int v5 = *(_DWORD *)(a1 + 36);
    int v6 = *((_DWORD *)v2 + 34);
    if (*v2 | (v5 != 0))
    {
      int v6 = 2 * v3;
      if (v2[5] | (v5 == 1)) {
        v4 += v3;
      }
    }
  }
  else
  {
    int v6 = *((_DWORD *)v2 + 34);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v10 = v4 - 32 * v6 - 32;
  int v11 = *(_DWORD *)(a1 + 164);
  off_1E9F83228(v10);
  if (!v11) {
    sub_1BBB5523C(v10, v7, v8, v9, v3, *(_DWORD *)(a1 + 168), *(_DWORD *)(a1 + 172), 0, *(_DWORD *)(a1 + 172) >> 1);
  }
  int32x2_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_1E9F83230;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(v13 + 40);
  uint64_t v16 = *(unsigned int *)(v13 + 148);
  uint64_t v15 = *(unsigned int *)(v13 + 152);
  uint64_t v17 = *(unsigned int *)(v13 + 116);

  return v12(v14, v15, v16, v17);
}

uint64_t sub_1BBB556E4(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v3 = *((unsigned int *)v2 + 34);
  uint64_t v4 = *((void *)v2 + 4);
  if (v2[3])
  {
    int v5 = *(_DWORD *)(a1 + 36);
    int v6 = *((_DWORD *)v2 + 34);
    if (*v2 | (v5 != 0))
    {
      int v6 = 2 * v3;
      if (v2[5] | (v5 == 1)) {
        v4 += v3;
      }
    }
  }
  else
  {
    int v6 = *((_DWORD *)v2 + 34);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v10 = v4 - 32 * v6 - 32;
  int v11 = *(_DWORD *)(a1 + 164);
  off_1E9F83228(v10);
  if (!v11) {
    sub_1BBB5523C(v10, v7, v8, v9, v3, *(_DWORD *)(a1 + 168), *(_DWORD *)(a1 + 172), *(_DWORD *)(a1 + 172) >> 1, *(_DWORD *)(a1 + 172));
  }
  int32x2_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_1E9F83230;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(v13 + 40);
  uint64_t v16 = *(unsigned int *)(v13 + 148);
  uint64_t v15 = *(unsigned int *)(v13 + 152);
  uint64_t v17 = *(unsigned int *)(v13 + 116);

  return v12(v14, v15, v16, v17);
}

uint64_t sub_1BBB55804(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 136);
  int v6 = *(_DWORD *)(a1 + 152);
  uint64_t v7 = *(int *)(a1 + 100);
  if (*(unsigned char *)a1)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    if (!*(unsigned char *)(a1 + 5)) {
      uint64_t v9 = 0;
    }
    v3 += v9;
    if (!*(unsigned char *)(a1 + 5)) {
      uint64_t v8 = 0;
    }
    v4 += v8;
    v5 *= 2;
    v6 *= 2;
  }
  uint64_t v10 = *(int *)(a1 + 132);
  uint64_t v11 = *(int *)(a1 + 148);
  uint64_t v12 = *(int *)(a1 + 116);
  if (a2 >= 1) {
    int v13 = 16 * a2 - 4;
  }
  else {
    int v13 = 0;
  }
  int v14 = 16 * a3;
  if (16 * a3 != v7) {
    int v14 = 16 * a3 - 4;
  }
  int v15 = v13 >> 1;
  int v16 = v14 >> 1;
  int v17 = v14 - v13;
  if (v14 > v13)
  {
    uint64_t v18 = (int32x4_t *)(v4 + v5 * (uint64_t)v13);
    do
    {
      int32x4_t v19 = vdupq_n_s32(16843009 * v18->u8[0]);
      v18[-2] = v19;
      v18[-1] = v19;
      int v20 = (int32x4_t *)((char *)v18 + v10);
      int32x4_t v21 = vdupq_n_s32(16843009 * v18->u8[v10 - 1]);
      *int v20 = v21;
      v20[1] = v21;
      uint64_t v18 = (int32x4_t *)((char *)v18 + v5);
      --v17;
    }
    while (v17);
  }
  BOOL v22 = __OFSUB__(v16, v15);
  uint64_t result = (v16 - v15);
  if (!(((int)result < 0) ^ v22 | (result == 0)))
  {
    uint64_t v24 = (int32x4_t *)(v3 + v6 * (uint64_t)v15);
    do
    {
      v24[-1] = vdupq_n_s32(65537 * v24->u16[0]);
      *(int32x4_t *)((char *)v24 + v11) = vdupq_n_s32(65537 * *(unsigned __int16 *)((char *)&v24->u16[-1]
                                                                                                + v11));
      uint64_t v24 = (int32x4_t *)((char *)v24 + v6);
      uint64_t result = (result - 1);
    }
    while (result);
  }
  if (a2 <= 0)
  {
    int v25 = 0;
    uint64_t v26 = v4 - 32;
    uint64_t v27 = -2 * v5;
    uint64_t v28 = v4 - 2 * v5 - 32;
    uint64_t v29 = v4 - v5 - 32;
    do
    {
      if ((int)v10 >= -63)
      {
        uint64_t v30 = 0;
        do
        {
          int v31 = *(_DWORD *)(v26 + v30);
          *(_DWORD *)(v29 + v30) = v31;
          *(_DWORD *)(v28 + v30) = v31;
          BOOL v32 = v30 < v10 + 60;
          v30 += 4;
        }
        while (v32);
      }
      v26 += v27;
      ++v25;
      v28 += v27;
      v29 += v27;
    }
    while (v25 != 12);
    int v33 = 0;
    uint64_t result = v3 - 16;
    uint64_t v34 = v3 - v6 - 16;
    do
    {
      if ((int)v11 >= -31)
      {
        uint64_t v35 = 0;
        do
        {
          *(_DWORD *)(v34 + v35) = *(_DWORD *)(result + v35);
          BOOL v32 = v35 < v11 + 28;
          v35 += 4;
        }
        while (v32);
      }
      result -= v6;
      ++v33;
      v34 -= v6;
    }
    while (v33 != 8);
  }
  if (v14 == v7)
  {
    int v36 = 0;
    uint64_t v37 = v5 * (v7 - 1);
    uint64_t v38 = v4 + v37;
    uint64_t v39 = 2 * v5;
    uint64_t v40 = v37 + v5;
    uint64_t result = v37 + v39 + v4 - 32;
    uint64_t v41 = v40 + v4 - 32;
    do
    {
      if ((int)v10 >= -63)
      {
        uint64_t v42 = 0;
        do
        {
          int v43 = *(_DWORD *)(v38 + v42 - 32);
          *(_DWORD *)(v41 + v42) = v43;
          *(_DWORD *)(result + v42) = v43;
          BOOL v32 = v42 < (int)v10 + 60;
          v42 += 4;
        }
        while (v32);
      }
      ++v36;
      result += v39;
      v41 += v39;
      v38 += v39;
    }
    while (v36 != 12);
    int v44 = 0;
    uint64_t v45 = v12 - 1;
    uint64_t v46 = v6;
    uint64_t v47 = v6 * v45;
    uint64_t v48 = v3 + v47 - 16;
    uint64_t v49 = v47 + v6 + v3 - 16;
    do
    {
      if ((int)v11 >= -31)
      {
        uint64_t v50 = 0;
        do
        {
          *(_DWORD *)(v49 + v50) = *(_DWORD *)(v48 + v50);
          BOOL v32 = v50 < (int)v11 + 28;
          v50 += 4;
        }
        while (v32);
      }
      v48 += v46;
      ++v44;
      v49 += v46;
    }
    while (v44 != 8);
  }
  return result;
}

uint64_t sub_1BBB55AC0()
{
  return puts("Unimplemented function");
}

uint64_t sub_1BBB55ACC(unsigned int a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  if (sub_1BBB55B5C(a1, (_DWORD *)a2, &v9, &v8)) {
    uint64_t result = off_1E9F831D8(v5, 16, v9, v8, v4);
  }
  else {
    uint64_t result = off_1E9F831B8(v5, 16, v9, v4, v6);
  }
  *a3 = result;
  return result;
}

uint64_t sub_1BBB55B5C(unsigned int a1, _DWORD *a2, void *a3, void *a4)
{
  unsigned int v4 = HIWORD(a1) & 3 | (4 * (a1 & 3));
  int v5 = a2[4];
  uint64_t v6 = *(void *)&a2[2 * byte_1BBB93164[v4] + 6];
  int v7 = *a2 + ((__int16)a1 >> 2) + v5 * (a2[1] + ((int)a1 >> 18));
  uint64_t v8 = *(void *)&a2[2 * byte_1BBB93154[v4] + 6] + v7;
  if ((a1 & 3) == 3) {
    ++v8;
  }
  *a3 = v8;
  uint64_t v9 = v6 + v7;
  if ((HIWORD(a1) & 3) == 3) {
    int v10 = v5;
  }
  else {
    int v10 = 0;
  }
  *a4 = v9 + v10;
  return HIWORD(a1) & 1 | (4 * (a1 & 3)) & 0x55;
}

uint64_t sub_1BBB55BD4(unsigned int a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  if (sub_1BBB55B5C(a1, (_DWORD *)a2, &v8, &v7)) {
    uint64_t result = off_1E9F831D0(v5, 16, v8, v7, v4);
  }
  else {
    uint64_t result = off_1E9F831B0(v5, 16, v8, v4);
  }
  *a3 = result;
  return result;
}

uint64_t sub_1BBB55C64(unsigned int a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  if (sub_1BBB55B5C(a1, (_DWORD *)a2, &v8, &v7)) {
    uint64_t result = off_1E9F831C8(v5, 16, v8, v7, v4);
  }
  else {
    uint64_t result = off_1E9F831A8(v5, 16, v8, v4);
  }
  *a3 = result;
  return result;
}

uint64_t sub_1BBB55CF4(unsigned int a1, uint64_t a2, _WORD *a3)
{
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  if (sub_1BBB55B5C(a1, (_DWORD *)a2, &v8, &v7)) {
    uint64_t result = off_1E9F831C0(v5, 16, v8, v7, v4);
  }
  else {
    uint64_t result = off_1E9F831A0(v5, 16, v8, v4);
  }
  *a3 = result;
  return result;
}

uint64_t sub_1BBB55D84(int a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  int v9 = *(_DWORD *)a2 + ((__int16)a1 >> 2) + v4 * (*(_DWORD *)(a2 + 4) + (a1 >> 18));
  switch(HIWORD(a1) & 3 | (4 * (a1 & 3)))
  {
    case 1:
      uint64_t v13 = v7 + v9;
      *a3 = v13 - v4;
      uint64_t v14 = v6 + v9;
      *a4 = v14;
      a3[1] = v13;
      a4[1] = v14 + v4;
      uint64_t v15 = v5 + v9;
      a3[2] = v15 - 1;
      uint64_t v12 = v8 + v9;
      a4[2] = v12 - 1;
      a3[3] = v15;
      goto LABEL_25;
    case 2:
      uint64_t result = 0;
      uint64_t v16 = v6 + v9;
      *a3 = v16;
      a3[1] = v16 + v4;
      uint64_t v12 = v8 + v9;
      goto LABEL_5;
    case 3:
      uint64_t v17 = v6 + v9;
      *a3 = v17;
      uint64_t v18 = v7 + v9;
      *a4 = v18;
      a3[1] = v17 + v4;
      a4[1] = v18 + v4;
      uint64_t v19 = v8 + v9;
      a3[2] = v19 - 1;
      uint64_t v12 = v5 + v9 + v4;
      a4[2] = v12 - 1;
      a3[3] = v19;
      goto LABEL_25;
    case 4:
      uint64_t v20 = v7 + v9;
      *a3 = v20 - v4;
      uint64_t v21 = v8 + v9;
      *a4 = v21 - v4;
      a3[1] = v20;
      a4[1] = v21;
      uint64_t v22 = v5 + v9;
      a3[2] = v22 - 1;
      uint64_t v23 = v6 + v9;
      goto LABEL_10;
    case 5:
      uint64_t v24 = v7 + v9;
      *a3 = v24 - v4;
      uint64_t v25 = v5 + v9;
      *a4 = v25;
      a3[1] = v24;
      a4[1] = v25 + v4;
      goto LABEL_12;
    case 6:
      uint64_t v26 = v6 + v9;
      *a3 = v26;
      uint64_t v27 = v5 + v9;
      *a4 = v27;
      a3[1] = v26 + v4;
      a4[1] = v27 + v4;
      uint64_t v22 = v8 + v9;
      a3[2] = v22 - 1;
      uint64_t v23 = v7 + v9;
LABEL_10:
      a4[2] = v23;
      goto LABEL_22;
    case 7:
      uint64_t v24 = v7 + v9;
      *a3 = v24;
      uint64_t v28 = v5 + v9;
      *a4 = v28;
      a3[1] = v24 + v4;
      uint64_t v25 = v28 + v4;
      a4[1] = v25;
LABEL_12:
      a3[2] = v25 - 1;
      a4[2] = v24;
      a3[3] = v25;
      uint64_t v12 = v24 + 1;
      goto LABEL_25;
    case 8:
      uint64_t result = 0;
      uint64_t v29 = v8 + v9;
      *a3 = v29 - v4;
      a3[1] = v29;
      uint64_t v30 = v6 + v9;
      goto LABEL_16;
    case 9:
      uint64_t v31 = v8 + v9;
      *a3 = v31 - v4;
      uint64_t v32 = v5 + v9;
      *a4 = v32;
      a3[1] = v31;
      a4[1] = v32 + v4;
      uint64_t v33 = v6 + v9;
      a3[2] = v33;
      uint64_t v23 = v7 + v9;
      goto LABEL_21;
    case 0xA:
      uint64_t result = 0;
      uint64_t v34 = v5 + v9;
      *a3 = v34;
      a3[1] = v34 + v4;
      uint64_t v30 = v7 + v9;
LABEL_16:
      a3[2] = v30;
      uint64_t v12 = v30 + 1;
      break;
    case 0xB:
      uint64_t v35 = v5 + v9;
      *a3 = v35;
      uint64_t v36 = v8 + v9;
      *a4 = v36;
      a3[1] = v35 + v4;
      a4[1] = v36 + v4;
      uint64_t v37 = v7 + v9;
      a3[2] = v37;
      uint64_t v23 = v6 + v9 + v4;
      a4[2] = v23;
      uint64_t v22 = v37 + 1;
      goto LABEL_22;
    case 0xC:
      uint64_t v38 = v8 + v9;
      *a3 = v38 - v4;
      uint64_t v39 = v7 + v9;
      *a4 = v39 - v4 + 1;
      a3[1] = v38;
      a4[1] = v39 + 1;
      uint64_t v33 = v6 + v9;
      a3[2] = v33;
      uint64_t v23 = v5 + v9;
      goto LABEL_21;
    case 0xD:
      uint64_t v40 = v5 + v9;
      *a3 = v40;
      uint64_t v41 = v7 + v9;
      *a4 = v41 - v4 + 1;
      a3[1] = v40 + v4;
      a4[1] = v41 + 1;
      a3[2] = v41;
      a4[2] = v40;
      a3[3] = v41 + 1;
      goto LABEL_24;
    case 0xE:
      uint64_t v42 = v5 + v9;
      *a3 = v42;
      uint64_t v43 = v6 + v9;
      *a4 = v43 + 1;
      a3[1] = v42 + v4;
      a4[1] = v43 + v4 + 1;
      uint64_t v33 = v7 + v9;
      a3[2] = v33;
      uint64_t v23 = v8 + v9;
LABEL_21:
      a4[2] = v23;
      uint64_t v22 = v33 + 1;
LABEL_22:
      a3[3] = v22;
      uint64_t v12 = v23 + 1;
      goto LABEL_25;
    case 0xF:
      uint64_t v44 = v5 + v9;
      *a3 = v44;
      uint64_t v45 = v7 + v9;
      *a4 = v45 + 1;
      uint64_t v40 = v44 + v4;
      a3[1] = v40;
      a4[1] = v45 + v4 + 1;
      a3[2] = v45;
      a4[2] = v40;
      a3[3] = v45 + 1;
LABEL_24:
      uint64_t v12 = v40 + 1;
LABEL_25:
      uint64_t result = 1;
      a3 = a4;
      break;
    default:
      uint64_t result = 0;
      uint64_t v11 = v7 + v9;
      *a3 = v11 - v4;
      a3[1] = v11;
      uint64_t v12 = v5 + v9;
LABEL_5:
      a3[2] = v12 - 1;
      break;
  }
  a3[3] = v12;
  return result;
}

uint64_t sub_1BBB56134()
{
  return puts("Unimplemented function");
}

uint64_t sub_1BBB56140(int a1, unsigned int a2, uint64_t a3, int a4, char a5)
{
  int v9 = (-a1 & 0xF) + a1;
  unsigned int v10 = (-a2 & 0xF) + a2;
  int v11 = v9 + 64;
  int v12 = (v10 + 80) * (v9 + 64);
  char v13 = (a4 - 3) < 2;
  size_t v14 = (((v10 >> 1) + 64) * (v9 + 64)) << v13;
  unsigned int v15 = v12 << v13;
  char v43 = v13;
  if ((a5 & 1) == 0)
  {
    *(_DWORD *)(a3 + 24) = v15 + v14;
LABEL_11:
    *(_OWORD *)(a3 + 160) = 0u;
    *(void *)(a3 + 384) = 0;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 256) = 0u;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 224) = 0u;
    *(_OWORD *)(a3 + 240) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 208) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    if (a4)
    {
      size_t v20 = 2 * v15;
      if (!v20) {
        goto LABEL_27;
      }
      uint64_t v21 = malloc_type_malloc(v20, 0x4CF1F002uLL);
      *(void *)(a3 + 160) = v21;
      if (!v21) {
        goto LABEL_27;
      }
    }
    uint64_t v22 = *(void *)(a3 + 8);
    uint64_t v23 = (40 * v11);
    uint64_t v24 = v22 + (v23 + 32);
    uint64_t v25 = v22 + v15 + v23 + 32;
    *(void *)(a3 + 32) = v24;
    *(void *)(a3 + 40) = v25;
    *(void *)(a3 + 48) = v24;
    *(void *)(a3 + 56) = v25;
    *(_DWORD *)(a3 + 128) = a1;
    *(_DWORD *)(a3 + 132) = v9;
    *(_DWORD *)(a3 + 136) = v11;
    *(_DWORD *)(a3 + 144) = (a1 & 1) + a1;
    *(_DWORD *)(a3 + 148) = v9;
    *(_DWORD *)(a3 + 152) = v11;
    *(_DWORD *)(a3 + 96) = a2;
    *(_DWORD *)(a3 + 100) = v10;
    *(_DWORD *)(a3 + 112) = a2 >> 1;
    *(_DWORD *)(a3 + 116) = v10 >> 1;
    uint64_t v26 = sub_1BBB11FAC(a3, a4);
    *(void *)(a3 + 392) = v26;
    if (!v26) {
      goto LABEL_27;
    }
    *((_DWORD *)v26 + 9) = 0;
    if (a4 == 4)
    {
      uint64_t v27 = sub_1BBB11FAC(a3, 4);
      *(void *)(a3 + 400) = v27;
      if (!v27) {
        goto LABEL_27;
      }
      *((_DWORD *)v27 + 9) = 2;
      uint64_t v28 = sub_1BBB11FAC(a3, 4);
      *(void *)(a3 + 408) = v28;
      if (!v28) {
        goto LABEL_27;
      }
      *((_DWORD *)v28 + 9) = 1;
    }
    else
    {
      *(void *)(a3 + 400) = 0;
      *(void *)(a3 + 408) = 0;
    }
    *(_DWORD *)(a3 + 416) = 0x40000;
    __int16 v29 = 4 * v11 + 4;
    *(_WORD *)(a3 + 420) = 4 * v11;
    *(_WORD *)(a3 + 422) = v29;
    *(_DWORD *)(a3 + 424) = 786440;
    *(_WORD *)(a3 + 428) = 4 * v11 + 8;
    *(_WORD *)(a3 + 430) = 4 * v11 + 12;
    *(_WORD *)(a3 + 432) = 8 * v11;
    *(_WORD *)(a3 + 434) = (8 * v11) | 4;
    *(_WORD *)(a3 + 436) = 12 * v11;
    *(_WORD *)(a3 + 438) = v29 + 8 * v11;
    *(_WORD *)(a3 + 440) = 8 * v11 + 8;
    *(_WORD *)(a3 + 442) = 8 * v11 + 12;
    *(_WORD *)(a3 + 444) = 8 * v11 + 8 + 4 * v11;
    *(_WORD *)(a3 + 446) = 8 * v11 + 8 + v29;
    *(_DWORD *)(a3 + 448) = 0x40000;
    *(_WORD *)(a3 + 452) = 8 * v11;
    *(_WORD *)(a3 + 454) = (8 * v11) | 4;
    *(_DWORD *)(a3 + 456) = 786440;
    *(_WORD *)(a3 + 460) = 8 * v11 + 8;
    *(_WORD *)(a3 + 462) = 8 * v11 + 12;
    *(_WORD *)(a3 + 464) = 16 * v11;
    *(_WORD *)(a3 + 466) = (16 * v11) | 4;
    *(_WORD *)(a3 + 468) = 24 * v11;
    *(_WORD *)(a3 + 470) = ((8 * v11) | 4) + 16 * v11;
    *(_WORD *)(a3 + 472) = (16 * v11) | 8;
    *(_WORD *)(a3 + 474) = (16 * v11) | 0xC;
    *(_WORD *)(a3 + 476) = ((16 * v11) | 8) + 8 * v11;
    *(_WORD *)(a3 + 478) = ((16 * v11) | 8) + ((8 * v11) | 4);
    *(_OWORD *)(a3 + 480) = xmmword_1BBB70070;
    *(_DWORD *)(a3 + 496) = v9 + 2;
    *(_DWORD *)(a3 + 500) = v9 - 1;
    *(_DWORD *)(a3 + 504) = v10 + 2;
    *(_DWORD *)(a3 + 508) = v10 - 1;
    *(_DWORD *)(a3 + 512) = v9 + 2;
    *(_DWORD *)(a3 + 516) = v9 - 1;
    *(_DWORD *)(a3 + 520) = v10 + 2;
    uint64_t v30 = &byte_1BBB930E9;
    uint64_t v31 = 528;
    *(_DWORD *)(a3 + 524) = v10 - 1;
    do
    {
      int v32 = *v30;
      int v33 = v30[21];
      int v34 = v30[42];
      int v35 = v30[63];
      int v36 = v30[84];
      uint64_t v37 = (_DWORD *)(a3 + v31);
      *uint64_t v37 = v11 * *(v30 - 21);
      v37[21] = v11 * v32;
      v37[42] = v11 * v33;
      v37[63] = v11 * v34;
      v37[84] = v11 * v35;
      v37[105] = v11 * v36;
      ++v30;
      v31 += 4;
    }
    while (v31 != 612);
    int v38 = *(_DWORD *)(a3 + 116);
    uint64_t v39 = malloc_type_malloc((((unint64_t)*(unsigned int *)(a3 + 148) >> 3) & 0x1FFFFFFE) + 4, 0x82ECD37AuLL);
    *(void *)(a3 + 1032) = v39;
    if (v39)
    {
      uint64_t v40 = malloc_type_malloc(4 * ((v38 << v43) + 19), 0x82ECD37AuLL);
      *(void *)(a3 + 1040) = v40;
      if (v40)
      {
        uint64_t v41 = malloc_type_malloc(4 * (v38 + 19), 0x82ECD37AuLL);
        *(void *)(a3 + 1048) = v41;
        if (v41)
        {
          sub_1BBB55064(a3, v9 + 64);
          return 0;
        }
      }
    }
    goto LABEL_27;
  }
  if (v15) {
    uint64_t v16 = malloc_type_malloc((v12 << v13), 0x4CF1F002uLL);
  }
  else {
    uint64_t v16 = 0;
  }
  *(void *)(a3 + 64) = v16;
  if (v14) {
    uint64_t v17 = malloc_type_malloc(v14, 0x4CF1F002uLL);
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)(a3 + 72) = v17;
  size_t v18 = v15 + v14;
  *(_DWORD *)(a3 + 24) = v18;
  if (!(v15 + v14))
  {
    *(void *)(a3 + 8) = 0;
    goto LABEL_27;
  }
  uint64_t v19 = malloc_type_malloc(v18, 0x4CF1F002uLL);
  *(void *)(a3 + 8) = v19;
  if (v19) {
    goto LABEL_11;
  }
LABEL_27:
  sub_1BBB56558(a3);
  return 4294967188;
}

void sub_1BBB56558(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(void **)(a1 + 160);
    if (v2) {
      free(v2);
    }
    free(*(void **)(a1 + 8));
    *(void *)(a1 + 8) = 0;
    free(*(void **)(a1 + 64));
    *(void *)(a1 + 64) = 0;
    free(*(void **)(a1 + 72));
    *(void *)(a1 + 72) = 0;
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v4 = *(void **)(a1 + 392);
    if (v4)
    {
      sub_1BBB12228((uint64_t)v4);
      uint64_t v4 = *(void **)(a1 + 392);
    }
    free(v4);
    *(void *)(a1 + 392) = 0;
    uint64_t v5 = *(void *)(a1 + 400);
    if (v5) {
      sub_1BBB12228(v5);
    }
    uint64_t v6 = *(void *)(a1 + 408);
    if (v6) {
      sub_1BBB12228(v6);
    }
    free(*(void **)(a1 + 400));
    free(*(void **)(a1 + 408));
    *(_OWORD *)(a1 + 400) = 0u;
    free(*(void **)(a1 + 1032));
    free(*(void **)(a1 + 1040));
    *(_OWORD *)(a1 + 1032) = 0u;
    free(*(void **)(a1 + 1048));
    *(void *)(a1 + 1048) = 0;
  }
}

void *sub_1BBB5663C(void *result, int a2)
{
  uint64_t v27 = result;
  char v3 = 0;
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v28 = v5;
    uint64_t v6 = &v27[2 * v4];
    uint64_t v7 = v6[32];
    size_t v8 = v6[33];
    uint64_t v9 = v6[34];
    int v10 = v6[24];
    int v11 = v6[25];
    uint64_t v12 = v27[v4 + 4];
    size_t v13 = (v8 - v7);
    if ((int)v13 >= 1)
    {
      if (v3)
      {
        if (!v10)
        {
          if (v11 <= 0) {
            return result;
          }
          goto LABEL_26;
        }
        int v14 = 0;
        uint64_t v15 = v12 + ((v7 + 1) & 0xFFFFFFFE);
        if (v13 >> 1 <= 1) {
          unsigned int v16 = 1;
        }
        else {
          unsigned int v16 = v13 >> 1;
        }
        if (v13 < 2) {
          char v17 = 1;
        }
        else {
          char v17 = a2;
        }
        uint64_t v18 = 2 * v16;
        do
        {
          if ((v17 & 1) == 0)
          {
            uint64_t v19 = 0;
            __int16 v20 = *(_WORD *)(v15 - 2);
            do
            {
              *(_WORD *)(v15 + v19) = v20;
              v19 += 2;
            }
            while (v18 != v19);
          }
          v15 += v9 & 0xFFFFFFFE;
          ++v14;
        }
        while (v14 != v10);
      }
      else
      {
        if (!v10)
        {
          if (v11 <= 0) {
            goto LABEL_39;
          }
LABEL_34:
          uint64_t v26 = (char *)(v12 + (v10 * v9));
          do
          {
            if (a2) {
              uint64_t result = memset(v26, 255, v8);
            }
            else {
              uint64_t result = memcpy(v26, (const void *)(v12 + ((v10 - 1) * v9)), v8);
            }
            v26 += v9;
            --v11;
          }
          while (v11);
          goto LABEL_39;
        }
        uint64_t v21 = (char *)(v12 + v7);
        int v22 = v6[24];
        do
        {
          if ((a2 & 1) == 0) {
            uint64_t result = memset(v21, *(v21 - 1), v13);
          }
          v21 += v9;
          --v22;
        }
        while (v22);
      }
    }
    v11 -= v10;
    if (v11 <= 0) {
      goto LABEL_39;
    }
    if ((v3 & 1) == 0) {
      goto LABEL_34;
    }
LABEL_26:
    uint64_t v23 = (v10 * v9);
    uint64_t result = memcpy((void *)(v12 + v23), (const void *)(v12 + ((v10 - 1) * v9)), v8);
    if (v11 < 2) {
      return result;
    }
    uint64_t v24 = (char *)(v12 + v9 + v23);
    int v25 = v11 - 1;
    do
    {
      if (a2) {
        uint64_t result = memset(v24, 255, v8);
      }
      else {
        uint64_t result = memcpy(v24, (const void *)(v12 + ((v10 - 1) * v9)), v8);
      }
      v24 += v9;
      --v25;
    }
    while (v25);
LABEL_39:
    char v5 = 0;
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v28 & 1) != 0);
  return result;
}

uint64_t sub_1BBB56834(_WORD *a1, unsigned __int16 *a2, _WORD *a3)
{
  __int16 v3 = a1[4];
  __int16 v4 = a1[8];
  __int16 v5 = a1[12];
  __int16 v6 = a1[5];
  __int16 v7 = a1[9];
  __int16 v8 = a1[1];
  __int16 v9 = a1[13];
  __int16 v88 = v6 - v7 + 2 * (v8 - v9);
  __int16 v89 = v3 - v4 + 2 * (*a1 - v5);
  __int16 v10 = a1[6];
  __int16 v11 = a1[10];
  __int16 v12 = a1[2];
  __int16 v13 = a1[14];
  __int16 v86 = *a1 - v5 - 2 * (v3 - v4);
  __int16 v87 = v10 - v11 + 2 * (v12 - v13);
  __int16 v14 = v8 - v9 - 2 * (v6 - v7);
  __int16 v15 = v5 + *a1;
  __int16 v16 = v9 + v8;
  __int16 v17 = v13 + v12;
  __int16 v84 = v12 - v13 - 2 * (v10 - v11);
  __int16 v85 = v14;
  __int16 v18 = a1[3];
  __int16 v19 = a1[15];
  __int16 v20 = v19 + v18;
  int v21 = *a2;
  int v22 = a2[12];
  __int16 v23 = v22 + v21;
  __int16 v24 = v4 + v3;
  __int16 v25 = v7 + v6;
  __int16 v26 = v11 + v10;
  __int16 v27 = a1[7];
  __int16 v28 = a1[11];
  __int16 v29 = v28 + v27;
  int v30 = a2[4];
  int v31 = a2[8];
  __int16 v32 = v31 + v30;
  unsigned __int16 v33 = a2[5];
  unsigned __int16 v34 = a2[9];
  __int16 v35 = v34 + v33;
  __int16 v36 = v27 - v28;
  unsigned __int16 v37 = a2[6];
  unsigned __int16 v38 = a2[10];
  __int16 v39 = v38 + v37;
  int v40 = v30 - v31;
  __int16 v41 = v33 - v34;
  __int16 v42 = v37 - v38;
  int v43 = a2[7];
  int v44 = a2[11];
  __int16 v79 = v44 + v43;
  int v83 = v43 - v44;
  LOWORD(v43) = v18 - v19;
  int v45 = v21 - v22;
  unsigned __int16 v46 = a2[1];
  unsigned __int16 v47 = a2[13];
  __int16 v48 = v47 + v46;
  __int16 v49 = v46 - v47;
  unsigned __int16 v50 = a2[2];
  LOWORD(v21) = a2[14];
  __int16 v51 = v21 + v50;
  __int16 v52 = v50 - v21;
  int v53 = a2[3];
  int v54 = a2[15];
  LOWORD(v21) = v54 + v53;
  int v75 = v53 - v54;
  __int16 v55 = v16 - v25;
  LOWORD(v54) = v17 + v26;
  LOWORD(v44) = v17 - v26;
  __int16 v56 = v20 + v29;
  __int16 v57 = v20 - v29;
  __int16 v73 = v23 + v32;
  __int16 v74 = v23 - v32;
  __int16 v58 = v51 + v39;
  __int16 v81 = v51 - v39;
  __int16 v82 = v48 - v35;
  __int16 v59 = v36 + 2 * v43;
  __int16 v60 = v43 - 2 * v36;
  int v72 = v40 + 2 * v45;
  __int16 v76 = v48 + v35;
  __int16 v77 = v45 - 2 * v40;
  __int16 v61 = v41 + 2 * v49;
  __int16 v80 = v49 - 2 * v41;
  LOWORD(v45) = v42 + 2 * v52;
  __int16 v78 = v52 - 2 * v42;
  LOWORD(v40) = v54 + v16 + v25;
  __int16 v62 = v16 + v25 - v54;
  LOWORD(v43) = v56 + v15 + v24;
  *a3 = v43 + v40;
  a3[1] = v59 + v89 + v87 + v88;
  a3[2] = v57 + v15 - v24 + v44 + v55;
  __int16 v63 = v60 + v86;
  a3[3] = v60 + v86 + v84 + v85;
  __int16 v64 = v15 + v24 - v56;
  a3[4] = v62 + 2 * v64;
  a3[5] = v88 - v87 + 2 * (v89 - v59);
  __int16 v65 = v86 - v60;
  a3[6] = v55 - v44 + 2 * (v15 - v24 - v57);
  a3[7] = v85 - v84 + 2 * v65;
  int v66 = v83 + 2 * v75;
  __int16 v67 = v75 - 2 * v83;
  a3[8] = v43 - v40;
  a3[9] = v59 + v89 - (v87 + v88);
  __int16 v68 = v21 + v79 + v73;
  a3[10] = v57 + v15 - v24 - (v44 + v55);
  a3[11] = v63 - (v84 + v85);
  a3[12] = v64 - 2 * v62;
  a3[13] = v89 - v59 - 2 * (v88 - v87);
  a3[14] = v15 - v24 - v57 - 2 * (v55 - v44);
  a3[15] = v65 - 2 * (v85 - v84);
  a3[16] = v68 + v58 + v76;
  a3[17] = v66 + v72 + v45 + v61;
  a3[18] = v21 - v79 + v74 + v81 + v82;
  __int16 v69 = v67 + v77;
  a3[19] = v67 + v77 + v78 + v80;
  a3[20] = v76 - v58 + 2 * (v73 - (v21 + v79));
  uint64_t result = (v72 - v66);
  a3[21] = v61 - v45 + 2 * (v72 - v66);
  a3[22] = v82 - v81 + 2 * (v74 - (v21 - v79));
  __int16 v71 = v77 - v67;
  a3[23] = v80 - v78 + 2 * v71;
  a3[24] = v68 - (v58 + v76);
  a3[25] = v66 + v72 - (v45 + v61);
  a3[26] = v21 - v79 + v74 - (v81 + v82);
  a3[27] = v69 - (v78 + v80);
  a3[28] = v73 - (v21 + v79) - 2 * (v76 - v58);
  a3[29] = v72 - v66 - 2 * (v61 - v45);
  a3[30] = v74 - (v21 - v79) - 2 * (v82 - v81);
  a3[31] = v71 - 2 * (v80 - v78);
  return result;
}

uint64_t sub_1BBB56BD4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, BOOL *a5, int a6)
{
  int32x4_t v7 = *((int32x4_t *)a2 + 1);
  int8x16_t v8 = *((int8x16_t *)a2 + 2);
  int32x4_t v9 = *(int32x4_t *)a2;
  int16x8_t v10 = *(int16x8_t *)(a1 + 32);
  uint16x8_t v11 = (uint16x8_t)vabsq_s16(v10);
  uint16x4_t v12 = (uint16x4_t)vextq_s8(v8, v8, 8uLL).u64[0];
  uint32x4_t v13 = (uint32x4_t)vzip1q_s32(v7, v7);
  uint32x4_t v14 = vmlal_u16(v13, *(uint16x4_t *)v11.i8, *(uint16x4_t *)v8.i8);
  uint32x4_t v15 = (uint32x4_t)vzip2q_s32(v7, v7);
  uint32x4_t v16 = (uint32x4_t)vnegq_s32(vzip2q_s32(v9, v9));
  int32x4_t v17 = (int32x4_t)vshlq_u32(vmlal_high_u16(v15, v11, (uint16x8_t)v8), v16);
  uint32x4_t v18 = (uint32x4_t)vnegq_s32(vzip1q_s32(v9, v9));
  int32x4_t v19 = (int32x4_t)vshlq_u32(v14, v18);
  int32x4_t v20 = vshlq_n_s32(v17, 0x10uLL);
  int32x4_t v21 = vshlq_n_s32(v19, 0x10uLL);
  if (v10.i16[1] >= 0) {
    LOWORD(v22) = v19.i16[2];
  }
  else {
    int v22 = -v19.u16[2];
  }
  if (v10.i16[4] >= 0) {
    LOWORD(v23) = v17.i16[0];
  }
  else {
    int v23 = -v17.u16[0];
  }
  int8x16_t v24 = *(int8x16_t *)a1;
  uint16x8_t v25 = (uint16x8_t)vabsq_s16(*(int16x8_t *)a1);
  int32x4_t v26 = (int32x4_t)vshlq_u32(vmlal_high_u16(v15, v25, (uint16x8_t)v8), v16);
  int32x4_t v27 = (int32x4_t)vshlq_u32(vmlal_u16(v13, *(uint16x4_t *)v25.i8, *(uint16x4_t *)v8.i8), v18);
  int32x4_t v28 = vshlq_n_s32(v26, 0x10uLL);
  int32x4_t v29 = vshlq_n_s32(v27, 0x10uLL);
  if ((WORD1(*(_OWORD *)a1) & 0x8000u) == 0) {
    LOWORD(v30) = v27.i16[2];
  }
  else {
    int v30 = -v27.u16[2];
  }
  if ((*(void *)(a1 + 8) & 0x8000u) == 0) {
    LOWORD(v31) = v26.i16[0];
  }
  else {
    int v31 = -v26.u16[0];
  }
  v32.i64[0] = 0xFF000000FF0000;
  v32.i64[1] = 0xFF000000FF0000;
  v33.i64[0] = 0xFF000000FFLL;
  v33.i64[1] = 0xFF000000FFLL;
  int32x4_t v34 = (int32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v26, (int8x16_t)vcgezq_s32(v28)), (int8x16_t)vcgtq_s32(v28, v32)), v33);
  int32x4_t v35 = (int32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v27, (int8x16_t)vcgezq_s32(v29)), (int8x16_t)vcgtq_s32(v29, v32)), v33);
  *(void *)&long long v6 = *(void *)(a1 + 16);
  int16x4_t v36 = *(int16x4_t *)(a1 + 24);
  int32x4_t v37 = (int32x4_t)vshlq_u32(vmlal_u16(v13, *(uint16x4_t *)v8.i8, (uint16x4_t)vabs_s16(*(int16x4_t *)&v6)), v18);
  int32x4_t v38 = vshlq_n_s32(v37, 0x10uLL);
  if ((SWORD3(v6) & 0x8000u) == 0) {
    LOWORD(v39) = v37.i16[6];
  }
  else {
    int v39 = -v37.u16[6];
  }
  int8x16_t v40 = vorrq_s8(vandq_s8((int8x16_t)v37, (int8x16_t)vcgezq_s32(v38)), (int8x16_t)vcgtq_s32(v38, v32));
  int32x4_t v41 = (int32x4_t)vshlq_u32(vmlal_u16(v15, v12, (uint16x4_t)vabs_s16(v36)), v16);
  int8x16_t v42 = vqtbl1q_s8(v24, (int8x16_t)xmmword_1BBB70080);
  v42.i16[1] = *(void *)(a1 + 16);
  v42.i16[2] = *(void *)(a1 + 24);
  int32x4_t v43 = (int32x4_t)vandq_s8(v40, v33);
  int8x16_t v44 = vqtbl2q_s8(*(int8x16x2_t *)v27.i8, (int8x16_t)xmmword_1BBB700A0);
  v44.i16[1] = v37.i16[0];
  v44.i16[2] = v41.i16[0];
  int16x8_t v45 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v37 - 1), (int8x16_t)xmmword_1BBB700B0);
  int32x4_t v46 = vshlq_n_s32(v41, 0x10uLL);
  int8x16_t v47 = vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v6 - 1), (int8x16_t)xmmword_1BBB70090)), (int8x16_t)vnegq_s16(v45), (int8x16_t)v45);
  if (v36.i16[1] >= 0) {
    LOWORD(v48) = v41.i16[2];
  }
  else {
    int v48 = -v41.u16[2];
  }
  if (v36.i16[2] >= 0) {
    LOWORD(v49) = v41.i16[4];
  }
  else {
    int v49 = -v41.u16[4];
  }
  int v50 = vaddvq_s32((int32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v41, (int8x16_t)vcgezq_s32(v46)), (int8x16_t)vcgtq_s32(v46, v32)), v33));
  int v51 = vaddvq_s32(vaddq_s32(vaddq_s32(v35, v34), v43));
  int8x16_t v52 = (int8x16_t)vcgtq_s32(v21, v32);
  int8x16_t v55 = vandq_s8((int8x16_t)v19, (int8x16_t)vcgezq_s32(v21));
  int32x4_t v53 = (int32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v17, (int8x16_t)vcgezq_s32(v20)), (int8x16_t)vcgtq_s32(v20, v32)), v33);
  int32x4_t v54 = (int32x4_t)vandq_s8(vorrq_s8(v55, v52), v33);
  v55.i64[0] = *(void *)(a1 + 48);
  int16x4_t v56 = *(int16x4_t *)(a1 + 56);
  int32x4_t v57 = (int32x4_t)vshlq_u32(vmlal_u16(v13, *(uint16x4_t *)v8.i8, (uint16x4_t)vabs_s16(*(int16x4_t *)v55.i8)), v18);
  int32x4_t v58 = vshlq_n_s32(v57, 0x10uLL);
  if (v55.i16[3] >= 0) {
    LOWORD(v59) = v57.i16[6];
  }
  else {
    int v59 = -v57.u16[6];
  }
  int32x4_t v60 = (int32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v57, (int8x16_t)vcgezq_s32(v58)), (int8x16_t)vcgtq_s32(v58, v32)), v33);
  int32x4_t v61 = (int32x4_t)vshlq_u32(vmlal_u16(v15, v12, (uint16x4_t)vabs_s16(v56)), v16);
  int8x16_t v62 = vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1BBB70080);
  v62.i16[1] = v55.i16[0];
  v62.i16[2] = v56.i16[0];
  int8x16_t v63 = vqtbl2q_s8(*(int8x16x2_t *)v19.i8, (int8x16_t)xmmword_1BBB700A0);
  v63.i16[1] = v57.i16[0];
  v63.i16[2] = v61.i16[0];
  int16x8_t v64 = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v57 - 1), (int8x16_t)xmmword_1BBB700B0);
  int32x4_t v65 = vshlq_n_s32(v61, 0x10uLL);
  int8x16_t v66 = vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v55 - 1), (int8x16_t)xmmword_1BBB70090)), (int8x16_t)vnegq_s16(v64), (int8x16_t)v64);
  if (v56.i16[1] >= 0) {
    LOWORD(v67) = v61.i16[2];
  }
  else {
    int v67 = -v61.u16[2];
  }
  if (v56.i16[2] >= 0) {
    LOWORD(v68) = v61.i16[4];
  }
  else {
    int v68 = -v61.u16[4];
  }
  *a5 = v51 + v50 != 0;
  a5[1] = vaddvq_s32(vaddq_s32(vaddq_s32(v54, v53), v60))
        + vaddvq_s32((int32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v61, (int8x16_t)vcgezq_s32(v65)), (int8x16_t)vcgtq_s32(v65, v32)), v33)) != 0;
  if (a6)
  {
    __int16 v69 = v47.i16[2];
    int8x16_t v47 = vqtbl1q_s8(v47, (int8x16_t)xmmword_1BBB700C0);
    v47.i16[7] = v39;
    __int16 v70 = v66.i16[2];
    int8x16_t v66 = vqtbl1q_s8(v66, (int8x16_t)xmmword_1BBB700C0);
    v66.i16[7] = v59;
    __int16 v71 = v30;
    __int16 v72 = v22;
  }
  else
  {
    __int16 v71 = v31;
    LOWORD(v31) = v30;
    __int16 v69 = v48;
    LOWORD(v48) = v49;
    LOWORD(v49) = v39;
    __int16 v72 = v23;
    LOWORD(v23) = v22;
    __int16 v70 = v67;
    LOWORD(v67) = v68;
    LOWORD(v68) = v59;
  }
  LOWORD(v73) = v61.i16[6];
  if (v56.i16[3] < 0) {
    int v73 = -v61.u16[6];
  }
  if (v10.i16[2] >= 0) {
    uint64_t result = v19.u16[4];
  }
  else {
    uint64_t result = -v19.u16[4];
  }
  LOWORD(v75) = v19.i16[0];
  if (v10.i16[0] < 0) {
    int v75 = -v19.u16[0];
  }
  LOWORD(v76) = v41.i16[6];
  if (v36.i16[3] < 0) {
    int v76 = -v41.u16[6];
  }
  LOWORD(v77) = v27.i16[4];
  if (v24.i16[2] < 0) {
    int v77 = -v27.u16[4];
  }
  LOWORD(v78) = v27.i16[0];
  if (v24.i16[0] < 0) {
    int v78 = -v27.u16[0];
  }
  *(_WORD *)a3 = v78;
  *(_WORD *)(a3 + 2) = v71;
  *(_WORD *)(a3 + 4) = v31;
  *(_WORD *)(a3 + 6) = v77;
  *(int8x16_t *)(a3 + 8) = v47;
  *(_WORD *)(a3 + 24) = v69;
  *(_WORD *)(a3 + 26) = v48;
  *(_WORD *)(a3 + 28) = v49;
  *(_WORD *)(a3 + 30) = v76;
  *(_WORD *)a4 = v75;
  *(_WORD *)(a4 + 2) = v72;
  *(_WORD *)(a4 + 4) = v23;
  *(_WORD *)(a4 + 6) = result;
  *(int8x16_t *)(a4 + 8) = v66;
  *(_WORD *)(a4 + 24) = v70;
  *(_WORD *)(a4 + 26) = v67;
  *(_WORD *)(a4 + 28) = v68;
  *(_WORD *)(a4 + 30) = v73;
  return result;
}

__n128 sub_1BBB56FC4(__int16 *a1, __int16 *a2, unsigned int a3, uint64_t a4, _OWORD *a5, int a6)
{
  v16[17] = *MEMORY[0x1E4F143B8];
  uint16x8_t v8 = *(uint16x8_t *)&asc_1E9F80F40[(a3 >> 2) & 0x38];
  uint32x4_t v9 = (uint32x4_t)vdupq_n_s32(a3 & 0x1F);
  int16x8_t v15 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v8.i8), v9), (int16x8_t)vshlq_u32(vmovl_high_u16(v8), v9));
  v14[0] = 0;
  v14[1] = 0;
  sub_1BBB570BC(a1, a2, (__int16 *)&xmmword_1BBB6F670, (__int16 *)&xmmword_1BBB6F670, (unsigned __int16 *)v14, (unsigned __int16 *)&v15, v16, a6, 0, 0, 0, 0, 0, 0);
  result.n128_u64[0] = v16[0];
  *(void *)&long long v10 = v16[8];
  *(void *)&long long v11 = v16[1];
  *(void *)&long long v12 = v16[9];
  result.n128_u64[1] = v16[4];
  *((void *)&v10 + 1) = v16[12];
  *((void *)&v11 + 1) = v16[5];
  *((void *)&v12 + 1) = v16[13];
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v10;
  *a5 = v11;
  a5[1] = v12;
  return result;
}

uint64_t sub_1BBB570BC(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, _WORD *a7, int a8, int a9, char a10, char a11, char a12, unsigned __int16 a13, int a14)
{
  int v14 = (unsigned __int16)a2[13];
  if (a8) {
    int v15 = (unsigned __int16)a2[14];
  }
  else {
    int v15 = (unsigned __int16)a2[13];
  }
  if (!a8) {
    int v14 = (unsigned __int16)a2[12];
  }
  int v249 = v14;
  if (a8) {
    int v16 = (unsigned __int16)a2[12];
  }
  else {
    int v16 = (unsigned __int16)a2[6];
  }
  int v238 = v16;
  if (a8) {
    __int16 v17 = a2[11];
  }
  else {
    __int16 v17 = a2[14];
  }
  __int16 v229 = v17;
  if (a8) {
    __int16 v18 = a2[10];
  }
  else {
    __int16 v18 = a2[11];
  }
  __int16 v221 = v18;
  if (a8) {
    __int16 v19 = a2[7];
  }
  else {
    __int16 v19 = a2[10];
  }
  int v255 = v15;
  __int16 v258 = v19;
  if (a8) {
    int v20 = (unsigned __int16)a2[9];
  }
  else {
    int v20 = (unsigned __int16)a2[7];
  }
  if (a8) {
    int v21 = (unsigned __int16)a2[6];
  }
  else {
    int v21 = (unsigned __int16)a2[8];
  }
  int v252 = v21;
  if (a8) {
    __int16 v22 = a2[8];
  }
  else {
    __int16 v22 = a2[5];
  }
  int v223 = v20;
  __int16 v225 = v22;
  if (a8) {
    int v23 = (unsigned __int16)a2[5];
  }
  else {
    int v23 = (unsigned __int16)a2[4];
  }
  if (a8) {
    __int16 v24 = a2[4];
  }
  else {
    __int16 v24 = a2[9];
  }
  if (a8) {
    int v25 = (unsigned __int16)a2[2];
  }
  else {
    int v25 = (unsigned __int16)a2[1];
  }
  int v227 = v25;
  if (a8) {
    int v26 = (unsigned __int16)a2[1];
  }
  else {
    int v26 = (unsigned __int16)a2[2];
  }
  int v209 = v26;
  if (a8) {
    int v27 = (unsigned __int16)a1[14];
  }
  else {
    int v27 = (unsigned __int16)a1[13];
  }
  int v241 = v23;
  int v243 = v27;
  if (a8) {
    int v28 = (unsigned __int16)a1[13];
  }
  else {
    int v28 = (unsigned __int16)a1[12];
  }
  if (a8) {
    int v29 = (unsigned __int16)a1[12];
  }
  else {
    int v29 = (unsigned __int16)a1[6];
  }
  int v215 = v29;
  __int16 v218 = v24;
  if (a8) {
    __int16 v30 = a1[11];
  }
  else {
    __int16 v30 = a1[14];
  }
  __int16 v212 = v30;
  if (a8) {
    __int16 v31 = a1[10];
  }
  else {
    __int16 v31 = a1[11];
  }
  if (a8) {
    int v32 = (unsigned __int16)a1[7];
  }
  else {
    int v32 = (unsigned __int16)a1[10];
  }
  int v246 = v32;
  if (a8) {
    int v33 = (unsigned __int16)a1[9];
  }
  else {
    int v33 = (unsigned __int16)a1[7];
  }
  if (a8) {
    int v34 = (unsigned __int16)a1[6];
  }
  else {
    int v34 = (unsigned __int16)a1[8];
  }
  int v232 = v28;
  int v235 = v34;
  if (a8) {
    __int16 v35 = a1[8];
  }
  else {
    __int16 v35 = a1[5];
  }
  if (a8) {
    int v36 = (unsigned __int16)a1[5];
  }
  else {
    int v36 = (unsigned __int16)a1[4];
  }
  if (a8) {
    __int16 v37 = a1[4];
  }
  else {
    __int16 v37 = a1[9];
  }
  if (a8) {
    int v38 = (unsigned __int16)a1[2];
  }
  else {
    int v38 = (unsigned __int16)a1[1];
  }
  if (a8) {
    int v39 = (unsigned __int16)a1[1];
  }
  else {
    int v39 = (unsigned __int16)a1[2];
  }
  __int16 v40 = *a3;
  int v41 = (unsigned __int16)a3[1];
  __int16 v42 = a3[2];
  __int16 v43 = a3[3];
  int v283 = (unsigned __int16)a3[4];
  int v285 = (unsigned __int16)a3[5];
  int v44 = (unsigned __int16)a3[6];
  int v45 = (unsigned __int16)a3[7];
  __int16 v261 = *a4;
  __int16 v271 = a4[3];
  int v275 = (unsigned __int16)a4[4];
  __int16 v277 = v43;
  int v46 = (unsigned __int16)a4[6];
  __int16 v47 = a4[7];
  int v286 = *a5;
  int v288 = a5[1];
  int v290 = a5[2];
  int v292 = a5[3];
  int v295 = (unsigned __int16)a4[1];
  int v265 = a5[4];
  __int16 v267 = a4[2];
  int v269 = a5[5];
  int v273 = a5[6];
  int v279 = a5[7];
  int v281 = (unsigned __int16)a4[5];
  int v48 = *a6;
  int v49 = a6[1];
  int v50 = a6[2];
  int v51 = a6[3];
  int v52 = a6[4];
  int v53 = a6[5];
  int v54 = a6[6];
  int v55 = a6[7];
  int v56 = *a1;
  int v57 = a1[3];
  int v58 = a1[15];
  int v59 = *a2;
  int v60 = a2[3];
  int v61 = a2[15];
  __int16 v300 = v47;
  int v298 = v46;
  __int16 v263 = v40;
  if (a14)
  {
    int v183 = v49;
    int v184 = v55;
    int v185 = v60;
    __int16 v186 = v33;
    int v187 = v50;
    __int16 v188 = v31;
    int v189 = v41;
    int v194 = v51;
    __int16 v196 = v37;
    int v198 = v52;
    __int16 v200 = v38;
    int v202 = v53;
    int v204 = v54;
    __int16 v190 = v42;
    int v191 = v44;
    int v192 = v45;
    int v62 = v56 * v48;
    int v63 = v35;
    if (a9)
    {
      int v64 = v62;
      int v65 = v229 * v51;
      int v66 = (__int16)v238 * v52;
      int v67 = (__int16)v232 * v202;
      int v68 = (__int16)v241 * v202;
      int v69 = (__int16)v249 * v202;
      int v70 = (__int16)v243 * v204;
      int v71 = (__int16)v252 * v204;
      int v72 = (__int16)v255 * v204;
      int v73 = v258 * v184;
      int v74 = v64 << a10;
      int v259 = ((__int16)v39 * v49) << a10;
      int v256 = (v57 * v50) << a10;
      int v230 = (v200 * v52) << a10;
      int v250 = ((__int16)v235 * v204) << a10;
      int v236 = ((__int16)v246 * v184) << a10;
      int v239 = ((__int16)v36 * v202) << a10;
      int v201 = (v63 * v48) << a10;
      int v203 = ((__int16)v33 * v49) << a10;
      int v205 = (v37 * v194) << a10;
      int v206 = (v188 * v50) << a10;
      int v247 = (v212 * v194) << a10;
      int v207 = ((__int16)v215 * v52) << a10;
      int v75 = v67 << a10;
      int v253 = (v58 * v184) << a10;
      int v76 = (v59 * v48) << a10;
      int v233 = ((__int16)v209 * v49) << a10;
      int v197 = (v218 * v194) << a10;
      int v199 = (v185 * v50) << a10;
      int v228 = ((__int16)v227 * v52) << a10;
      int v242 = v68 << a10;
      int v244 = v70 << a10;
      int v77 = v71 << a10;
      int v54 = v73 << a10;
      int v224 = ((__int16)v223 * v49) << a10;
      int v226 = (v225 * v48) << a10;
      int v219 = v65 << a10;
      int v222 = (v221 * v50) << a10;
      int v216 = v66 << a10;
      int v78 = v69 << a10;
      int v79 = v72 << a10;
      int v80 = (v61 * v184) << a10;
    }
    else
    {
      int v111 = v225 * v48;
      int v112 = (__int16)v235 * v204 + a13;
      int v113 = v35 * v48 + a13;
      int v114 = v212 * v51 + a13;
      int v115 = (__int16)v215 * v198 + a13;
      int v116 = (__int16)v243 * v204 + a13;
      int v117 = v59 * v48 + a13;
      int v118 = (__int16)v209 * v49 + a13;
      int v119 = v218 * v194 + a13;
      int v120 = (__int16)v227 * v198 + a13;
      int v121 = (__int16)v252 * v204 + a13;
      int v122 = v258 * v55 + a13;
      int v123 = v111 + a13;
      int v220 = v229 * v194 + a13;
      int v217 = (__int16)v238 * v198 + a13;
      int v214 = (__int16)v249 * v53 + a13;
      int v211 = (__int16)v255 * v204 + a13;
      int v74 = (v62 + a13) >> a12;
      int v259 = ((__int16)v39 * v183 + a13) >> a12;
      int v256 = (v57 * v187 + a13) >> a12;
      int v205 = (v196 * v194 + a13) >> a12;
      int v230 = (v200 * v198 + a13) >> a12;
      int v239 = ((__int16)v36 * v53 + a13) >> a12;
      int v250 = v112 >> a12;
      int v236 = ((__int16)v246 * v55 + a13) >> a12;
      int v201 = v113 >> a12;
      int v203 = (v186 * v183 + a13) >> a12;
      int v206 = (v31 * v187 + a13) >> a12;
      int v207 = v115 >> a12;
      int v75 = ((__int16)v232 * v53 + a13) >> a12;
      int v244 = v116 >> a12;
      int v247 = v114 >> a12;
      int v253 = (v58 * v55 + a13) >> a12;
      int v76 = v117 >> a12;
      int v233 = v118 >> a12;
      int v197 = v119 >> a12;
      int v199 = (v185 * v187 + a13) >> a12;
      int v228 = v120 >> a12;
      int v242 = ((__int16)v241 * v53 + a13) >> a12;
      int v77 = v121 >> a12;
      int v54 = v122 >> a12;
      int v224 = ((__int16)v223 * v183 + a13) >> a12;
      int v226 = v123 >> a12;
      int v219 = v220 >> a12;
      int v222 = (v221 * v187 + a13) >> a12;
      int v216 = v217 >> a12;
      int v78 = v214 >> a12;
      int v79 = v211 >> a12;
      int v80 = (v61 * v55 + a13) >> a12;
    }
    int v208 = v78;
    __int16 v210 = v80;
    int v213 = v79;
    __int16 v110 = v40;
    int v109 = v265;
    __int16 v97 = v40 + v74;
    __int16 v195 = v40 + v76;
    int v44 = v191;
    int v45 = v192;
    int v91 = v283;
    int v92 = v285;
    int v102 = v279;
    int v101 = v281;
    int v103 = v275;
    __int16 v89 = v277;
    __int16 v105 = v271;
    int v104 = v273;
    int v107 = v189;
    __int16 v86 = v190;
    __int16 v108 = v267;
    int v106 = v269;
    int v94 = v259;
    __int16 v100 = v261;
    int v99 = v253;
    __int16 v87 = v256;
    __int16 v90 = v247;
    int v98 = v236;
    int v96 = v239;
    int v85 = v233;
  }
  else
  {
    __int16 v193 = v40 + v56 * v48;
    LOWORD(v201) = v35 * v48;
    __int16 v195 = v40 + v59 * v48;
    __int16 v81 = v225 * v48;
    int v82 = v41;
    int v83 = v41 + v39 * v49;
    int v84 = v33 * v49;
    int v85 = v41 + v209 * v49;
    int v224 = v223 * v49;
    LOWORD(v226) = v81;
    __int16 v86 = v42;
    __int16 v87 = v42 + v57 * v50;
    LOWORD(v206) = v31 * v50;
    __int16 v88 = v42 + v60 * v50;
    __int16 v89 = v277;
    int v203 = v84;
    LOWORD(v205) = v277 + v37 * v51;
    __int16 v90 = v212 * v51;
    LOWORD(v197) = v277 + v218 * v51;
    LOWORD(v199) = v88;
    LOWORD(v219) = v229 * v51;
    LOWORD(v222) = v221 * v50;
    int v91 = v283;
    int v92 = v285;
    int v93 = v283 + v38 * v52;
    int v94 = v83;
    int v95 = v215 * v52;
    int v228 = v283 + v227 * v52;
    int v230 = v93;
    int v216 = v238 * v52;
    int v96 = v285 + v36 * v53;
    int v75 = v232 * v53;
    int v207 = v95;
    int v208 = v249 * v53;
    int v250 = v44 + v235 * v54;
    int v242 = v285 + v241 * v53;
    int v244 = v243 * v54;
    __int16 v97 = v193;
    int v77 = v44 + v252 * v54;
    int v213 = v255 * v54;
    int v98 = v45 + v246 * v55;
    int v99 = v58 * v55;
    __int16 v100 = v261;
    LOWORD(v54) = v45 + v258 * v55;
    __int16 v210 = v61 * v55;
    int v102 = v279;
    int v101 = v281;
    int v104 = v273;
    int v103 = v275;
    int v106 = v269;
    __int16 v105 = v271;
    int v107 = v82;
    int v109 = v265;
    __int16 v108 = v267;
    __int16 v110 = v263;
  }
  if (v286) {
    __int16 v97 = v110;
  }
  __int16 v124 = v195;
  if (v286) {
    __int16 v124 = v100;
  }
  __int16 v287 = v124;
  if (v288) {
    int v125 = v107;
  }
  else {
    int v125 = v94;
  }
  int v126 = v295;
  if (!v288) {
    int v126 = v85;
  }
  int v289 = v126;
  if (!v290) {
    __int16 v86 = v87;
  }
  __int16 v127 = v199;
  if (v290) {
    __int16 v127 = v108;
  }
  __int16 v296 = v127;
  if (v292) {
    __int16 v128 = v89;
  }
  else {
    __int16 v128 = v205;
  }
  __int16 v129 = v197;
  if (v292) {
    __int16 v129 = v105;
  }
  __int16 v293 = v129;
  if (v109) {
    int v130 = v91;
  }
  else {
    int v130 = v230;
  }
  if (v109) {
    int v131 = v103;
  }
  else {
    int v131 = v228;
  }
  if (v106) {
    int v132 = v92;
  }
  else {
    int v132 = v96;
  }
  if (v106) {
    int v133 = v101;
  }
  else {
    int v133 = v242;
  }
  if (v104) {
    int v134 = v44;
  }
  else {
    int v134 = v250;
  }
  if (v104) {
    int v135 = v298;
  }
  else {
    int v135 = v77;
  }
  if (v102) {
    int v136 = v45;
  }
  else {
    int v136 = v98;
  }
  if (v102) {
    __int16 v137 = v300;
  }
  else {
    __int16 v137 = v54;
  }
  __int16 v231 = v135;
  __int16 v138 = v97 + v201;
  __int16 v139 = v97 - v201;
  int v140 = v125 + v203;
  int v141 = v125 - v203;
  __int16 v142 = v86 + v206;
  __int16 v143 = v86 - v206;
  __int16 v144 = v128 + v90;
  __int16 v145 = v128 - v90;
  int v146 = v130 + ((__int16)v207 >> 1);
  int v147 = ((__int16)v130 >> 1) - v207;
  int v148 = v132 + ((__int16)v75 >> 1);
  int v149 = ((__int16)v132 >> 1) - v75;
  int v150 = v134 + ((__int16)v244 >> 1);
  int v151 = ((__int16)v134 >> 1) - v244;
  int v152 = v136 + ((__int16)v99 >> 1);
  int v153 = ((__int16)v136 >> 1) - v99;
  __int16 v248 = v139 - v147;
  __int16 v264 = v141 + v149;
  __int16 v257 = v139 + v147;
  __int16 v260 = v141 - v149;
  __int16 v301 = v144 + v152;
  int v291 = v140 + v148 + ((__int16)(v144 + v152) >> 1);
  __int16 v284 = v138 + v146;
  __int16 v282 = v142 + v150;
  __int16 v299 = v138 + v146 + v142 + v150;
  *a7 = (__int16)(v299 + v291) >> 6;
  __int16 v262 = v145 + v153;
  __int16 v245 = v143 + v151;
  __int16 v274 = v139 + v147 + v143 + v151;
  int v276 = v141 + v149 + ((__int16)(v145 + v153) >> 1);
  a7[1] = (__int16)(v274 + v276) >> 6;
  __int16 v251 = v143 - v151;
  __int16 v254 = v145 - v153;
  __int16 v270 = v139 - v147 + v143 - v151;
  int v272 = v141 - v149 + ((__int16)(v145 - v153) >> 1);
  a7[2] = (__int16)(v270 + v272) >> 6;
  __int16 v234 = v142 - v150;
  __int16 v237 = v138 - v146;
  __int16 v240 = v144 - v152;
  __int16 v266 = v138 - v146 + v142 - v150;
  int v268 = v140 - v148 + ((__int16)(v144 - v152) >> 1);
  a7[3] = (__int16)(v266 + v268) >> 6;
  int v154 = v131 + ((__int16)v216 >> 1);
  int v155 = v133 + ((__int16)v208 >> 1);
  int v156 = v135 + ((__int16)v213 >> 1);
  __int16 v157 = v137 + (v210 >> 1);
  __int16 v158 = v293 + v219;
  __int16 v159 = v293 + v219 + v157;
  int v160 = v289 + v224 + v155;
  LOWORD(v146) = v296 + v222;
  __int16 v161 = v287 + v226 + v154;
  __int16 v162 = v296 + v222 + v156;
  __int16 v278 = v161 + v162;
  int v280 = v160 + (v159 >> 1);
  a7[4] = (__int16)(v161 + v162 + v280) >> 6;
  LOWORD(v147) = v296 - v222;
  LOWORD(v153) = v293 - v219;
  int v163 = ((__int16)v131 >> 1) - v216;
  int v164 = ((__int16)v133 >> 1) - v208;
  int v165 = (v231 >> 1) - v213;
  __int16 v166 = (v137 >> 1) - v210;
  __int16 v167 = v153 + v166;
  __int16 v168 = v289 - v224 + v164;
  LOWORD(v151) = v296 - v222 + v165;
  __int16 v294 = v287 - v226 + v163 + v151;
  int v297 = v289 - v224 + v164 + ((__int16)(v153 + v166) >> 1);
  a7[5] = (__int16)(v294 + v297) >> 6;
  __int16 v169 = v287 - v226 - v163;
  int v170 = v289 - v224 - v164;
  LOWORD(v165) = v147 - v165;
  __int16 v171 = v153 - v166;
  __int16 v172 = v289 + v224 - v155;
  __int16 v173 = v158 - v157;
  __int16 v174 = v161 - v162;
  LOWORD(v163) = v287 - v226 + v163 - v151;
  LOWORD(v164) = v169 + v165;
  __int16 v175 = v169 - v165;
  LOWORD(v151) = v287 + v226 - v154 - (v146 - v156);
  LOWORD(v147) = ((__int16)(v140 + v148) >> 1) - v301;
  __int16 v176 = (v264 >> 1) - v262;
  LOWORD(v153) = (v260 >> 1) - v254;
  __int16 v177 = ((__int16)(v140 - v148) >> 1) - v240;
  __int16 v178 = ((__int16)v160 >> 1) - v159;
  __int16 v179 = (v168 >> 1) - v167;
  int v180 = v170 + (v171 >> 1);
  __int16 v181 = ((__int16)v170 >> 1) - v171;
  LOWORD(v149) = (v172 >> 1) - v173;
  a7[6] = (__int16)(v164 + v180) >> 6;
  a7[7] = (__int16)(v287 + v226 - v154 + v146 - v156 + v172 + (v173 >> 1)) >> 6;
  a7[16] = (__int16)(v284 - v282 + v147) >> 6;
  a7[17] = (__int16)(v257 - v245 + v176) >> 6;
  a7[18] = (__int16)(v248 - v251 + v153) >> 6;
  a7[19] = (__int16)(v237 - v234 + v177) >> 6;
  a7[20] = (__int16)(v174 + v178) >> 6;
  a7[21] = (__int16)(v163 + v179) >> 6;
  a7[22] = (__int16)(v175 + v181) >> 6;
  uint64_t result = (__int16)(v248 - v251 - v153) >> 6;
  a7[23] = (__int16)(v151 + v149) >> 6;
  a7[32] = (__int16)(v284 - v282 - v147) >> 6;
  a7[33] = (__int16)(v257 - v245 - v176) >> 6;
  a7[34] = result;
  a7[35] = (__int16)(v237 - v234 - v177) >> 6;
  a7[36] = (__int16)(v174 - v178) >> 6;
  a7[37] = (__int16)(v163 - v179) >> 6;
  a7[38] = (__int16)(v175 - v181) >> 6;
  a7[39] = (__int16)(v151 - v149) >> 6;
  a7[48] = (__int16)(v299 - v291) >> 6;
  a7[49] = (__int16)(v274 - v276) >> 6;
  a7[50] = (__int16)(v270 - v272) >> 6;
  a7[51] = (__int16)(v266 - v268) >> 6;
  a7[52] = (__int16)(v278 - v280) >> 6;
  a7[53] = (__int16)(v294 - v297) >> 6;
  a7[54] = (__int16)(v164 - v180) >> 6;
  a7[55] = (__int16)(v287 + v226 - v154 + v146 - v156 - (v172 + (v173 >> 1))) >> 6;
  return result;
}

uint64_t sub_1BBB57F9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = 0;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  v36[0] = (a4 & 0x1F) + 15;
  v36[1] = ((0x8000 << a4) / 3) >> 1;
  uint64_t v10 = (a4 >> 1) & 0x70;
  int v39 = a4 & 0x1F;
  __int16 v37 = (char *)&unk_1E9F80EE0 + v10;
  int v38 = (char *)asc_1E9F80F40 + v10;
  char v11 = 1;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v34 = v11;
    uint64_t v14 = a2 + ((uint64_t)v9 << 7);
    int v33 = v9;
    int v15 = v9;
    do
    {
      int v16 = &v40.i32[v15];
      off_1E9F83290(v36, a1 + 2 * (v13 | v7), v14, v16, a5);
      if (*v16)
      {
        int v17 = off_1E9F832B8(v14, &v40.i8[v15 * 4]);
        v8 += v17;
        __int32 v18 = *v16;
        if (!v17) {
          __int32 v18 = 0;
        }
        *int v16 = v18;
      }
      ++v12;
      v14 += 128;
      ++v15;
      uint64_t v13 = 8;
    }
    while (v12 != 2);
    char v11 = 0;
    int v9 = v33 + 2;
    uint64_t v7 = 128;
  }
  while ((v34 & 1) != 0);
  uint64_t result = 0;
  if (a3)
  {
    unsigned int v20 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1BBB6FDA0, (int8x16_t)vceqzq_s32(v40)));
    uint64_t v21 = v20;
    if (v20 && (v8 - 1) >= 5)
    {
      uint64_t v23 = 0;
      int v24 = 0;
      char v25 = 1;
      do
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        char v28 = v25;
        int v29 = v24;
        uint64_t v30 = a2 + ((uint64_t)v24 << 7);
        int v31 = 4 * v24;
        do
        {
          off_1E9F83298(v36, v30, a3 + 2 * (v27 | v23), &v40.i8[v31], a5);
          ++v26;
          v30 += 128;
          v31 += 4;
          uint64_t v27 = 8;
        }
        while (v26 != 2);
        char v25 = 0;
        int v24 = v29 + 2;
        uint64_t v23 = 128;
      }
      while ((v28 & 1) != 0);
      return v21;
    }
  }
  return result;
}

uint64_t sub_1BBB581E8(unsigned __int8 *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = a1 + 912;
  unint64_t v2 = a1[1];
  char v3 = (byte_1BBB93790[*a1] & 0x20) == 0;
  int v4 = v2 & 0x1F;
  v7[0] = v4 + 15;
  v7[1] = ((0x8000 << v2) / 3) >> v3;
  uint64_t v5 = (v2 >> 1) & 0x70;
  int v10 = v4;
  int v8 = (char *)&unk_1E9F80EE0 + v5;
  int v9 = (char *)asc_1E9F80F40 + v5;
  off_1E9F832A0(v7, a1 + 144, a1 + 656, a1 + 784, 0, v11, v12);
  return off_1E9F832A8(v7, v12, v1);
}

uint64_t sub_1BBB582F0(uint64_t result, unsigned __int8 a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  char v7 = a2 & 0x1F;
  unint64_t v8 = 1431655766 * (1 << ((a2 & 0x1F) + 15));
  int v9 = 2 * (HIDWORD(v8) + (v8 >> 63));
  uint64_t v10 = a2 >> 5;
  char v11 = (char *)&unk_1BBB93820 + 768 * a4 + 128 * v10;
  uint64_t v12 = (char *)&unk_1BBB93490 + 128 * v10;
  *a6 = 0;
  char v13 = (a2 & 0x1F) - 6;
  if ((a2 & 0x1Fu) >= 6)
  {
    uint64_t v14 = 0;
    char v15 = (a2 & 0x1F) + 16;
    while (1)
    {
      int v16 = *(__int16 *)(result + 2 * v14);
      int v17 = v16 >= 0 ? *(__int16 *)(result + 2 * v14) : -v16;
      int v18 = (v9 + v17 * *(unsigned __int16 *)&v11[2 * v14]) >> v15;
      if (!*a6 && v18 != 0) {
        break;
      }
      if (v18) {
        goto LABEL_13;
      }
      LOWORD(v20) = 0;
      *(_WORD *)(a5 + 2 * (unsigned __int16)word_1BBB93E20[v14]) = 0;
LABEL_21:
      *(_WORD *)(a7 + 2 * v14++) = v20;
      if (v14 == 64) {
        return result;
      }
    }
    *a6 = 1;
LABEL_13:
    int v21 = (v18 ^ (v16 >> 31)) - (v16 >> 31);
    if (v21 >= 0x7FFF) {
      int v21 = 0x7FFF;
    }
    if (v21 <= -32768) {
      int v21 = -32768;
    }
    *(_WORD *)(a5 + 2 * (unsigned __int16)word_1BBB93E20[v14]) = v21;
    int v20 = (v21 * *(unsigned __int16 *)&v12[2 * v14] * *(unsigned __int8 *)(a3 + v14)) << v13;
    if (v20 >= 0x7FFF) {
      int v20 = 0x7FFF;
    }
    if (v20 <= -32768) {
      LOWORD(v20) = 0x8000;
    }
    goto LABEL_21;
  }
  uint64_t v22 = 0;
  unsigned int v23 = 0x20u >> v7;
  char v24 = 6 - v7;
  do
  {
    int v25 = *(__int16 *)(result + 2 * v22);
    if (v25 >= 0) {
      int v26 = *(__int16 *)(result + 2 * v22);
    }
    else {
      int v26 = -v25;
    }
    int v27 = (v9 + v26 * *(unsigned __int16 *)&v11[2 * v22]) >> ((a2 & 0x1F) + 16);
    if (*a6) {
      BOOL v28 = 1;
    }
    else {
      BOOL v28 = v27 == 0;
    }
    if (v28)
    {
      if (!v27)
      {
        LOWORD(v29) = 0;
        *(_WORD *)(a5 + 2 * (unsigned __int16)word_1BBB93E20[v22]) = 0;
        goto LABEL_42;
      }
    }
    else
    {
      *a6 = 1;
    }
    int v30 = (v27 ^ (v25 >> 31)) - (v25 >> 31);
    if (v30 >= 0x7FFF) {
      int v30 = 0x7FFF;
    }
    if (v30 <= -32768) {
      int v30 = -32768;
    }
    *(_WORD *)(a5 + 2 * (unsigned __int16)word_1BBB93E20[v22]) = v30;
    int v29 = (int)(v23 + v30 * *(unsigned __int16 *)&v12[2 * v22] * *(unsigned __int8 *)(a3 + v22)) >> v24;
    if (v29 >= 0x7FFF) {
      int v29 = 0x7FFF;
    }
    if (v29 <= -32768) {
      LOWORD(v29) = 0x8000;
    }
LABEL_42:
    *(_WORD *)(a7 + 2 * v22++) = v29;
  }
  while (v22 != 64);
  return result;
}

uint64_t sub_1BBB584C4(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  int v4 = a1 + 656;
  uint64_t v5 = (int16x8_t *)(a1 + 912);
  long long v6 = a1 + 784;
  char v7 = a1 + 400;
  unint64_t v8 = a1[1];
  char v9 = (byte_1BBB93790[*a1] & 0x20) == 0;
  char v10 = v8 & 0x1F;
  v173[0] = (v8 & 0x1F) + 15;
  v173[1] = ((0x8000 << v8) / 3) >> v9;
  uint64_t v11 = (v8 >> 2) & 0x38;
  int v176 = v8 & 0x1F;
  __int16 v174 = (char *)&unk_1E9F80EE0 + 2 * v11;
  __int16 v175 = &asc_1E9F80F40[v11];
  off_1E9F832A0(v173, a1 + 144, a1 + 656, a1 + 784, a2, v177, v178);
  uint64_t v13 = off_1E9F832A8(v173, v178, v5);
  uint64_t result = off_1E9F832C0(v4, v6, v177[0], v177[1], v13);
  int v107 = a1;
  int v106 = result;
  if (result)
  {
    uint64_t v12 = &asc_1E9F80F40[v11];
    int16x8_t v15 = vmulq_s16(*v5, vdupq_n_s16((unsigned __int16)*v12 << v10));
    int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
    int32x4_t v17 = vmovl_high_s16(v15);
    int32x2_t v18 = vzip1_s32(*(int32x2_t *)v16.i8, *(int32x2_t *)v17.i8);
    int32x2_t v19 = (int32x2_t)vzip2q_s32(v16, v17).u64[0];
    int32x2_t v20 = vadd_s32(v18, v19);
    int32x2_t v21 = vzip2_s32(*(int32x2_t *)v16.i8, *(int32x2_t *)v17.i8);
    v17.i64[0] = vuzp2q_s32(vuzp2q_s32(v16, v17), v16).u64[0];
    *(int32x2_t *)v16.i8 = vadd_s32(v21, *(int32x2_t *)v17.i8);
    int32x2_t v22 = vsub_s32(v18, v19);
    *(int32x2_t *)v17.i8 = vsub_s32(v21, *(int32x2_t *)v17.i8);
    uint32x2_t v23 = (uint32x2_t)vsub_s32(v20, *(int32x2_t *)v16.i8);
    uint32x2_t v24 = (uint32x2_t)vsub_s32(v22, *(int32x2_t *)v17.i8);
    *(int32x2_t *)v16.i8 = vhadd_s32(v20, *(int32x2_t *)v16.i8);
    int32x2_t v25 = vhadd_s32(v22, *(int32x2_t *)v17.i8);
    int32x2_t v26 = vadd_s32(*(int32x2_t *)v16.i8, (int32x2_t)0x2000000020);
    int32x2_t v27 = (int32x2_t)vsra_n_u32((uint32x2_t)0x2000000020, v23, 1uLL);
    int32x2_t v28 = vadd_s32(v25, (int32x2_t)0x2000000020);
    int32x2_t v29 = (int32x2_t)vsra_n_u32((uint32x2_t)0x2000000020, v24, 1uLL);
    if ((result & 2) != 0)
    {
      uint64_t v171 = 0;
      int v115 = (unsigned __int16)*v12 << v10;
      int v113 = (unsigned __int16)asc_1E9F80F40[v11 | 6] << v10;
      int v114 = (unsigned __int16)asc_1E9F80F40[v11 | 7] << v10;
      int v111 = (unsigned __int16)asc_1E9F80F40[v11 | 4] << v10;
      int v112 = (unsigned __int16)asc_1E9F80F40[v11 | 5] << v10;
      int v109 = (unsigned __int16)asc_1E9F80F40[v11 | 2] << v10;
      int v110 = (unsigned __int16)asc_1E9F80F40[v11 | 3] << v10;
      int v108 = (unsigned __int16)asc_1E9F80F40[v11 | 1] << v10;
      __int16 v38 = v26.i16[0];
      __int16 v39 = v26.i16[2];
      __int32 v40 = v27.i32[0];
      __int32 v41 = v27.i32[1];
      __int32 v42 = v28.i32[0];
      __int32 v43 = v28.i32[1];
      __int32 v44 = v29.i32[0];
      __int32 v45 = v29.i32[1];
      int v46 = a1 + 814;
      int v117 = v7;
      int v116 = v2;
      do
      {
        __int16 v172 = v46;
        __int32 v165 = v45;
        __int32 v166 = v41;
        __int32 v167 = v42;
        __int32 v168 = v40;
        __int32 v169 = v44;
        __int32 v170 = v43;
        BOOL v47 = v2 == 0;
        __int16 v48 = *((_WORD *)v46 - 1);
        if (v2) {
          int v49 = *((unsigned __int16 *)v46 - 1);
        }
        else {
          int v49 = *((unsigned __int16 *)v46 - 2);
        }
        int v149 = v49;
        int v50 = *((unsigned __int16 *)v46 - 3);
        if (v2) {
          int v51 = *((unsigned __int16 *)v46 - 2);
        }
        else {
          int v51 = *((unsigned __int16 *)v46 - 3);
        }
        int v52 = *((unsigned __int16 *)v46 - 9);
        if (v2)
        {
          __int16 v53 = *((_WORD *)v172 - 4);
        }
        else
        {
          int v50 = v52;
          __int16 v53 = v48;
        }
        if (v2) {
          __int16 v54 = *((_WORD *)v172 - 5);
        }
        else {
          __int16 v54 = *((_WORD *)v172 - 4);
        }
        if (v2) {
          int v55 = *((unsigned __int16 *)v172 - 6);
        }
        else {
          int v55 = *((unsigned __int16 *)v172 - 8);
        }
        if (v2) {
          __int16 v56 = *((_WORD *)v172 - 7);
        }
        else {
          __int16 v56 = *((_WORD *)v172 - 10);
        }
        if (v2) {
          int v57 = *((unsigned __int16 *)v172 - 8);
        }
        else {
          int v57 = *((unsigned __int16 *)v172 - 5);
        }
        int v145 = v57;
        if (v2) {
          int v58 = v52;
        }
        else {
          int v58 = *((unsigned __int16 *)v172 - 7);
        }
        if (v2) {
          int v59 = *((unsigned __int16 *)v172 - 10);
        }
        else {
          int v59 = *((unsigned __int16 *)v172 - 11);
        }
        if (v2) {
          int v60 = *((unsigned __int16 *)v172 - 13);
        }
        else {
          int v60 = *((unsigned __int16 *)v172 - 14);
        }
        if (v2) {
          __int16 v61 = *((_WORD *)v172 - 11);
        }
        else {
          __int16 v61 = *((_WORD *)v172 - 6);
        }
        if (v2) {
          int v62 = *((unsigned __int16 *)v172 - 14);
        }
        else {
          int v62 = *((unsigned __int16 *)v172 - 13);
        }
        if (v2) {
          int v63 = *((unsigned __int16 *)v172 - 65);
        }
        else {
          int v63 = *((unsigned __int16 *)v172 - 66);
        }
        if (v2) {
          int v64 = *((unsigned __int16 *)v172 - 66);
        }
        else {
          int v64 = *((unsigned __int16 *)v172 - 67);
        }
        if (v2) {
          __int16 v65 = *((_WORD *)v172 - 67);
        }
        else {
          __int16 v65 = *((_WORD *)v172 - 73);
        }
        if (v2) {
          int v66 = *((unsigned __int16 *)v172 - 68);
        }
        else {
          int v66 = *((unsigned __int16 *)v172 - 65);
        }
        if (v2) {
          __int16 v67 = *((_WORD *)v172 - 69);
        }
        else {
          __int16 v67 = *((_WORD *)v172 - 68);
        }
        int v68 = *((unsigned __int16 *)v172 - 72);
        int v69 = *((unsigned __int16 *)v172 - 70);
        if (v2) {
          int v70 = *((unsigned __int16 *)v172 - 70);
        }
        else {
          int v70 = *((unsigned __int16 *)v172 - 72);
        }
        if (v47)
        {
          int v68 = *((unsigned __int16 *)v172 - 69);
          int v71 = *((unsigned __int16 *)v172 - 71);
        }
        else
        {
          int v71 = *((unsigned __int16 *)v172 - 73);
        }
        if (v47) {
          __int16 v72 = *((_WORD *)v172 - 74);
        }
        else {
          __int16 v72 = *((_WORD *)v172 - 71);
        }
        if (v47) {
          int v73 = *((unsigned __int16 *)v172 - 75);
        }
        else {
          int v73 = *((unsigned __int16 *)v172 - 74);
        }
        if (v47)
        {
          int v74 = *((unsigned __int16 *)v172 - 78);
        }
        else
        {
          int v69 = *((unsigned __int16 *)v172 - 75);
          int v74 = *((unsigned __int16 *)v172 - 77);
        }
        if (v47) {
          int v75 = *((unsigned __int16 *)v172 - 77);
        }
        else {
          int v75 = *((unsigned __int16 *)v172 - 78);
        }
        __int16 v139 = v72 * v115 + v38;
        __int16 v161 = v38 - v72 * v115;
        __int16 v156 = v56 * v115 + v39;
        __int16 v163 = v39 - v56 * v115;
        int v76 = v108;
        int v141 = v70 * v108 + v75 * v108;
        int v157 = v75 * v108 - v70 * v108;
        int v77 = v55 * v76 + v62 * v76;
        int v159 = v62 * v76 - v55 * v76;
        __int16 v78 = *((_WORD *)v172 - 76) * v109;
        __int16 v136 = v67 * v109 + v78;
        __int16 v152 = v78 - v67 * v109;
        __int16 v79 = *((_WORD *)v172 - 12) * v109;
        __int16 v80 = v54 * v109;
        __int16 v81 = v54 * v109 + v79;
        __int16 v154 = v79 - v80;
        int v147 = v66 * v110 + v69 * v110;
        int v150 = v69 * v110 - v66 * v110;
        __int16 v122 = v53 * v110 + v61 * v110;
        __int16 v151 = v61 * v110 - v53 * v110;
        int v138 = v74 * v111 + ((__int16)(v65 * v111) >> 1);
        int v82 = v50 * v111;
        int v83 = v60 * v111 + ((__int16)(v50 * v111) >> 1);
        int v148 = ((v60 * v111) << 16 >> 17) - v82;
        int v140 = v73 * v112 + ((__int16)(v64 * v112) >> 1);
        int v84 = ((v73 * v112) << 16 >> 17) - v64 * v112;
        int v85 = v59 * v112 + ((__int16)(v51 * v112) >> 1);
        int v118 = v85;
        int v144 = ((v59 * v112) << 16 >> 17) - v51 * v112;
        int v137 = v71 * v113 + ((__int16)(v63 * v113) >> 1);
        int v86 = ((v71 * v113) << 16 >> 17) - v63 * v113;
        int v87 = v58 * v113 + ((__int16)(v149 * v113) >> 1);
        int v88 = ((v58 * v113) << 16 >> 17) - v149 * v113;
        int v89 = *((unsigned __int16 *)v172 - 64) * v114;
        int v142 = v68 * v114 + ((__int16)v89 >> 1);
        int v90 = ((v68 * v114) << 16 >> 17) - v89;
        int v91 = *(unsigned __int16 *)v172 * v114;
        int v92 = v145 * v114 + ((__int16)v91 >> 1);
        __int16 v123 = v92;
        int v93 = ((v145 * v114) << 16 >> 17) - v91;
        int v146 = v140 + v141 + ((__int16)(v142 + v147) >> 1);
        int v94 = (_WORD *)((char *)v117 + *((unsigned __int8 *)&word_1BBB93174 + v171 + 16));
        __int16 v143 = v137 + v136 + v138 + v139;
        *int v94 = (__int16)(v146 + v143) >> 6;
        __int16 v127 = v85 + v77;
        __int16 v128 = v92 + v122;
        int v135 = v85 + v77 + ((__int16)(v92 + v122) >> 1);
        LOWORD(v92) = v83;
        __int16 v95 = v83 + v156;
        __int16 v96 = v87;
        __int16 v134 = v87 + v81 + v83 + v156;
        v94[1] = (__int16)(v135 + v134) >> 6;
        __int16 v125 = v150 + v90;
        __int16 v126 = v84 + v157;
        int v133 = v84 + v157 + ((__int16)(v150 + v90) >> 1);
        __int16 v129 = ((__int16)(v74 * v111) >> 1) - v65 * v111 + v161;
        __int16 v97 = v86 + v152;
        __int16 v132 = v86 + v152 + v129;
        v94[2] = (__int16)(v133 + v132) >> 6;
        __int16 v124 = v144 + v159;
        int v130 = v144 + v159 + ((__int16)(v151 + v93) >> 1);
        __int16 v121 = v148 + v163;
        __int16 v98 = v88 + v154;
        __int16 v131 = v88 + v154 + v148 + v163;
        v94[3] = (__int16)(v130 + v131) >> 6;
        __int16 v119 = v157 - v84;
        __int16 v120 = v161 - (((__int16)(v74 * v111) >> 1) - v65 * v111);
        LOWORD(v86) = v152 - v86;
        int v99 = v150 - v90;
        int v158 = v157 - v84 + ((__int16)(v150 - v90) >> 1);
        __int16 v162 = v86 + v120;
        int16x4_t v94[4] = (__int16)(v158 + v86 + v120) >> 6;
        LOWORD(v85) = v163 - v148;
        LOWORD(v150) = v159 - v144;
        LOWORD(v83) = v154 - v88;
        int v160 = v159 - v144 + ((__int16)(v151 - v93) >> 1);
        __int16 v164 = v154 - v88 + v163 - v148;
        v94[5] = (__int16)(v160 + v164) >> 6;
        uint64_t result = (v147 - v142);
        int v153 = v141 - v140 + ((__int16)(v147 - v142) >> 1);
        __int16 v155 = v136 - v137 + v139 - v138;
        v94[6] = (__int16)(v153 + v155) >> 6;
        LOWORD(v76) = v77 - v118;
        int v100 = v77 - v118 + ((__int16)(v122 - v123) >> 1);
        v94[7] = (__int16)(v77 - v118 + ((__int16)(v122 - v123) >> 1) + v81 - v87 + v156 - v92) >> 6;
        v94[16] = (__int16)(v138 + v139 - (v137 + v136) + ((__int16)(v140 + v141) >> 1) - (v142 + v147)) >> 6;
        __int16 v101 = v95 - (v87 + v81);
        v94[17] = (__int16)(v101 + (v127 >> 1) - v128) >> 6;
        v94[18] = (__int16)(v129 - v97 + (v126 >> 1) - v125) >> 6;
        int v2 = v116;
        v94[19] = (__int16)(v121 - v98 + (v124 >> 1) - (v151 + v93)) >> 6;
        LOWORD(v86) = v120 - v86;
        int v102 = (v119 >> 1) - v99;
        v94[20] = (__int16)(v86 + v102) >> 6;
        LOWORD(v83) = v85 - v83;
        LOWORD(v87) = ((__int16)v150 >> 1) - (v151 - v93);
        v94[21] = (__int16)(v83 + v87) >> 6;
        __int16 v103 = v139 - v138 - (v136 - v137);
        __int16 v104 = ((__int16)(v141 - v140) >> 1) - (v147 - v142);
        v94[22] = (__int16)(v103 + v104) >> 6;
        __int16 v105 = v156 - v92 - (v81 - v96);
        LOWORD(v91) = ((__int16)v76 >> 1) - (v122 - v123);
        v94[23] = (__int16)(v105 + v91) >> 6;
        v94[32] = (__int16)(v138 + v139 - (v137 + v136) - (((__int16)(v140 + v141) >> 1) - (v142 + v147))) >> 6;
        v94[33] = (__int16)(v101 - ((v127 >> 1) - v128)) >> 6;
        v94[34] = (__int16)(v129 - v97 - ((v126 >> 1) - v125)) >> 6;
        v94[35] = (__int16)(v121 - v98 - ((v124 >> 1) - (v151 + v93))) >> 6;
        v94[36] = (__int16)(v86 - v102) >> 6;
        v94[37] = (__int16)(v83 - v87) >> 6;
        v94[38] = (__int16)(v103 - v104) >> 6;
        v94[39] = (__int16)(v105 - v91) >> 6;
        v94[48] = (__int16)(v143 - v146) >> 6;
        v94[49] = (__int16)(v134 - v135) >> 6;
        v94[50] = (__int16)(v132 - v133) >> 6;
        v94[51] = (__int16)(v131 - v130) >> 6;
        v94[52] = (__int16)(v162 - v158) >> 6;
        v94[53] = (__int16)(v164 - v160) >> 6;
        v94[54] = (__int16)(v155 - v153) >> 6;
        __int32 v40 = v167;
        __int16 v38 = v168;
        __int32 v43 = v165;
        __int16 v39 = v166;
        __int32 v42 = v169;
        __int32 v41 = v170;
        v94[55] = (__int16)(v81 - v96 + v156 - v92 - v100) >> 6;
        int v46 = v172 + 32;
        __int32 v45 = v166;
        __int32 v44 = v168;
        ++v171;
      }
      while (v171 != 4);
    }
    else
    {
      uint64_t v30 = 0;
      int16x4_t v31 = (int16x4_t)vshr_n_s32(vshr_n_s32(vshl_n_s32(v26, 0x10uLL), 0x10uLL), 6uLL);
      int32x2_t v32 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v27, 0x10uLL), 0x10uLL), 6uLL);
      int32x2_t v33 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v28, 0x10uLL), 0x10uLL), 6uLL);
      int32x2_t v34 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v29, 0x10uLL), 0x10uLL), 6uLL);
      do
      {
        v180.val[1] = (int8x16_t)vdupq_lane_s16(v31, 2);
        v180.val[0] = (int8x16_t)vdupq_lane_s16(v31, 0);
        int16x4_t v35 = vuzp1_s16(v31, v31);
        int32x2_t v36 = v32;
        __int16 v37 = (int8x16_t *)((char *)v7 + *((unsigned __int8 *)&word_1BBB93174 + v30 + 16));
        *__int16 v37 = vqtbl2q_s8(v180, (int8x16_t)xmmword_1BBB700D0);
        *(int16x4_t *)v37[2].i8 = v35;
        v37[2].u64[1] = (unint64_t)v35;
        *(int16x4_t *)v37[4].i8 = v35;
        v37[4].u64[1] = (unint64_t)v35;
        ++v30;
        int32x2_t v32 = v33;
        *(int16x4_t *)v37[6].i8 = v35;
        v37[6].u64[1] = (unint64_t)v35;
        int32x2_t v33 = v34;
        int32x2_t v34 = v36;
        int16x4_t v31 = (int16x4_t)v36;
      }
      while (v30 != 4);
    }
  }
  else
  {
    v7[14] = 0u;
    v7[15] = 0u;
    v7[12] = 0u;
    v7[13] = 0u;
    v7[10] = 0u;
    v7[11] = 0u;
    v7[8] = 0u;
    v7[9] = 0u;
    v7[6] = 0u;
    v7[7] = 0u;
    v7[4] = 0u;
    v7[5] = 0u;
    _DWORD v7[2] = 0u;
    v7[3] = 0u;
    *char v7 = 0u;
    v7[1] = 0u;
  }
  *((_DWORD *)v107 + 2) = v106;
  return result;
}

uint64_t sub_1BBB58FB8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 14;
  do
  {
    __int16 v5 = *(_WORD *)(v4 + v3 - 14);
    __int16 v6 = *(_WORD *)(v4 + v3 - 6);
    __int16 v7 = v6 + v5;
    __int16 v8 = v5 - v6;
    int v9 = *(__int16 *)(v4 + v3 - 10);
    int v10 = *(__int16 *)(v4 + v3 - 2);
    int v11 = (v9 >> 1) - v10;
    int v12 = v9 + (v10 >> 1);
    int v13 = *(__int16 *)(v4 + v3 - 4);
    int v14 = *(__int16 *)(v4 + v3 - 8);
    int v15 = *(__int16 *)(v4 + v3);
    int v16 = v13 - (v14 + v15 + (v15 >> 1));
    int v17 = *(__int16 *)(v4 + v3 - 12);
    int v18 = v15 - (v14 + (v14 >> 1)) + v17;
    int v19 = v13 + (v13 >> 1) + v15 - v17;
    int v20 = v14 + v13 + v17 + (v17 >> 1);
    __int16 v21 = v12 + v7;
    LOWORD(v12) = v7 - v12;
    __int16 v22 = v11 + v8;
    __int16 v23 = v8 - v11;
    int v24 = v16 + ((__int16)v20 >> 2);
    int v25 = v20 - ((__int16)v16 >> 2);
    int32x2_t v26 = &v57[v3];
    *int32x2_t v26 = v25 + v21;
    v26[1] = ((__int16)v18 >> 2) - v19 + v22;
    v26[2] = v18 + ((__int16)v19 >> 2) + v23;
    v26[3] = v24 + v12;
    v26[4] = v12 - v24;
    v26[5] = v23 - (v18 + ((__int16)v19 >> 2));
    v26[6] = v22 - (((__int16)v18 >> 2) - v19);
    v26[7] = v21 - v25;
    v3 += 16;
  }
  while (v3 != 128);
  uint64_t v27 = 0;
  uint64_t v28 = a2 + 2 * a3;
  uint64_t v29 = a2 + 4 * a3;
  uint64_t v30 = a2 + 6 * a3;
  uint64_t v31 = a2 + 8 * a3;
  uint64_t v32 = a2 + 10 * a3;
  uint64_t v33 = a2 + 14 * a3;
  uint64_t v34 = a2 + 12 * a3;
  do
  {
    int v35 = *(__int16 *)&v57[v27 + 48];
    int v36 = *(__int16 *)&v57[v27 + 112];
    int v37 = *(__int16 *)&v57[v27 + 80];
    int v38 = v37 - (v35 + v36 + (v36 >> 1));
    int v39 = (__int16)v38;
    int v40 = *(unsigned __int16 *)&v57[v27];
    int v41 = *(unsigned __int16 *)&v57[v27 + 64];
    int v42 = v41 + v40;
    LOWORD(v40) = v40 - v41;
    int v43 = *(__int16 *)&v57[v27 + 32];
    int v44 = *(__int16 *)&v57[v27 + 16];
    int v45 = v36 - (v35 + (v35 >> 1));
    int v46 = v37 + (v37 >> 1) + v36 - v44;
    int v47 = (__int16)v46;
    LOWORD(v45) = v45 + v44;
    int v48 = *(__int16 *)&v57[v27 + 96];
    int v49 = (v43 >> 1) - v48;
    int v50 = v43 + (v48 >> 1);
    int v51 = v35 + v37 + v44 + (v44 >> 1);
    LOWORD(v43) = v49 + v40;
    LOWORD(v40) = v40 - v49;
    int v52 = v50 + v42;
    int v53 = v38 + ((__int16)v51 >> 2);
    LOWORD(v50) = v42 - v50;
    int v54 = v51 - (v39 >> 2);
    int v55 = ((__int16)v45 >> 2) - v46;
    *(_WORD *)(a2 + v27) = ((__int16)(v52 + v54) + 32) >> 6;
    *(_WORD *)(v28 + v27) = ((__int16)(v43 + v55) + 32) >> 6;
    *(_WORD *)(v29 + v27) = ((__int16)(v45 + (v47 >> 2) + v40) + 32) >> 6;
    *(_WORD *)(v30 + v27) = ((__int16)(v50 + v53) + 32) >> 6;
    *(_WORD *)(v31 + v27) = ((__int16)(v50 - v53) + 32) >> 6;
    *(_WORD *)(v32 + v27) = ((__int16)(v40 - (v45 + (v47 >> 2))) + 32) >> 6;
    uint64_t result = (v52 - v54);
    *(_WORD *)(v34 + v27) = ((__int16)(v43 - v55) + 32) >> 6;
    *(_WORD *)(v33 + v27) = ((__int16)result + 32) >> 6;
    v27 += 2;
  }
  while (v27 != 16);
  return result;
}

int16x8_t sub_1BBB59290(uint64_t a1, int a2, int16x8_t *a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (__int16 *)(a1 + 8);
  uint64_t v4 = 2 * a2;
  uint64_t v5 = 0x3FFFFFFFFFFFFFF8;
  do
  {
    int v6 = *(v3 - 4);
    int v7 = *(v3 - 3);
    int v8 = *(v3 - 2);
    int v9 = *(v3 - 1);
    int v10 = v3[1];
    int v11 = v3[2];
    int v12 = v3[3];
    int v13 = v12 + v6;
    int v14 = v11 + v7;
    int v15 = v10 + v8;
    int v16 = v6 - v12;
    int v17 = v7 - v11;
    int v18 = v8 - v10;
    int v19 = v17 + v18 + v16 + (v16 >> 1);
    int v20 = *v3;
    int v21 = v20 + v9;
    int v22 = v9 - v20;
    int v23 = v13 + v21;
    int v24 = v14 + v15;
    int v25 = v13 - v21;
    int v26 = v14 - v15;
    int v27 = v16 - (v18 + v22 + (v18 >> 1));
    int v28 = v22 + v16 - (v17 + (v17 >> 1));
    int v29 = v22 + (v22 >> 1) + v17 - v18;
    uint64_t v30 = &v86[v5];
    v30[8] = v23 + v24;
    v30[24] = v25 + (v26 >> 1);
    v30[40] = v23 - v24;
    v30[56] = (v25 >> 1) - v26;
    v30[16] = v19 + (v29 >> 2);
    v30[32] = v27 + (v28 >> 2);
    v30[48] = v28 - (v27 >> 2);
    v30[64] = (v19 >> 2) - v29;
    uint64_t v3 = (__int16 *)((char *)v3 + v4);
    ++v5;
  }
  while (v5 * 4);
  v31.i64[0] = __PAIR64__(v86[8], v86[0]);
  v31.i64[1] = __PAIR64__(v86[24], v86[16]);
  v32.i64[0] = __PAIR64__(v86[40], v86[32]);
  v33.i64[0] = __PAIR64__(v86[41], v86[33]);
  v32.i64[1] = __PAIR64__(v86[56], v86[48]);
  v34.i64[0] = __PAIR64__(v86[15], v86[7]);
  v34.i64[1] = __PAIR64__(v86[31], v86[23]);
  v36.i64[0] = __PAIR64__(v86[46], v86[38]);
  v35.i64[0] = __PAIR64__(v86[47], v86[39]);
  v35.i64[1] = __PAIR64__(v86[63], v86[55]);
  int32x4_t v37 = vaddq_s32(v35, v32);
  int32x4_t v38 = vaddq_s32(v34, v31);
  v39.i64[0] = __PAIR64__(v86[9], v86[1]);
  v39.i64[1] = __PAIR64__(v86[25], v86[17]);
  v33.i64[1] = __PAIR64__(v86[57], v86[49]);
  v36.i64[1] = __PAIR64__(v86[62], v86[54]);
  int32x4_t v40 = vaddq_s32(v36, v33);
  v41.i64[0] = __PAIR64__(v86[14], v86[6]);
  v41.i64[1] = __PAIR64__(v86[30], v86[22]);
  int32x4_t v42 = vaddq_s32(v41, v39);
  v43.i64[0] = __PAIR64__(v86[10], v86[2]);
  v43.i64[1] = __PAIR64__(v86[26], v86[18]);
  v44.i64[0] = __PAIR64__(v86[42], v86[34]);
  v45.i64[0] = __PAIR64__(v86[43], v86[35]);
  v44.i64[1] = __PAIR64__(v86[58], v86[50]);
  v47.i64[0] = __PAIR64__(v86[44], v86[36]);
  v46.i64[0] = __PAIR64__(v86[45], v86[37]);
  v46.i64[1] = __PAIR64__(v86[61], v86[53]);
  int32x4_t v48 = vaddq_s32(v46, v44);
  v49.i64[0] = __PAIR64__(v86[13], v86[5]);
  v49.i64[1] = __PAIR64__(v86[29], v86[21]);
  int32x4_t v50 = vaddq_s32(v49, v43);
  v51.i64[0] = __PAIR64__(v86[11], v86[3]);
  v51.i64[1] = __PAIR64__(v86[27], v86[19]);
  v45.i64[1] = __PAIR64__(v86[59], v86[51]);
  v47.i64[1] = __PAIR64__(v86[60], v86[52]);
  int32x4_t v52 = vaddq_s32(v47, v45);
  v53.i64[0] = __PAIR64__(v86[12], v86[4]);
  v53.i64[1] = __PAIR64__(v86[28], v86[20]);
  int32x4_t v54 = vaddq_s32(v53, v51);
  int32x4_t v55 = vsubq_s32(v32, v35);
  int32x4_t v56 = vsubq_s32(v31, v34);
  int32x4_t v57 = vsubq_s32(v39, v41);
  int32x4_t v58 = vsubq_s32(v33, v36);
  int32x4_t v59 = vsubq_s32(v44, v46);
  int32x4_t v60 = vsubq_s32(v43, v49);
  int32x4_t v61 = vsubq_s32(v51, v53);
  int32x4_t v62 = vsubq_s32(v45, v47);
  int32x4_t v63 = vaddq_s32(v54, v38);
  int32x4_t v64 = vaddq_s32(v52, v37);
  int32x4_t v65 = vaddq_s32(v50, v42);
  int32x4_t v66 = vaddq_s32(v48, v40);
  uint32x4_t v67 = (uint32x4_t)vsubq_s32(v38, v54);
  uint32x4_t v68 = (uint32x4_t)vsubq_s32(v37, v52);
  int32x4_t v69 = vsubq_s32(v42, v50);
  int32x4_t v70 = vsubq_s32(v40, v48);
  int32x4_t v71 = vaddq_s32(v57, v60);
  int32x4_t v72 = vsubq_s32(v57, v60);
  uint32x4_t v73 = (uint32x4_t)vsubq_s32(v56, vaddq_s32(vsraq_n_s32(v60, v60, 1uLL), v61));
  int32x4_t v74 = vsubq_s32(v56, vsraq_n_s32(v57, v57, 1uLL));
  int32x4_t v75 = vaddq_s32(v58, v59);
  int32x4_t v76 = vsubq_s32(v58, v59);
  uint32x4_t v77 = (uint32x4_t)vsubq_s32(v55, vaddq_s32(vsraq_n_s32(v59, v59, 1uLL), v62));
  int32x4_t v78 = vsubq_s32(v55, vsraq_n_s32(v58, v58, 1uLL));
  uint32x4_t v79 = (uint32x4_t)vaddq_s32(vsraq_n_s32(v56, v56, 1uLL), v71);
  uint32x4_t v80 = (uint32x4_t)vaddq_s32(vsraq_n_s32(v55, v55, 1uLL), v75);
  int32x4_t v81 = vaddq_s32(v74, v61);
  int32x4_t v82 = vaddq_s32(v78, v62);
  int32x4_t v83 = vsraq_n_s32(vaddq_s32(v61, v72), v61, 1uLL);
  int32x4_t v84 = vsraq_n_s32(vaddq_s32(v62, v76), v62, 1uLL);
  *a3 = vuzp1q_s16((int16x8_t)vaddq_s32(v63, v65), (int16x8_t)vaddq_s32(v64, v66));
  a3[1] = vuzp1q_s16((int16x8_t)vsraq_n_u32(v79, (uint32x4_t)v83, 2uLL), (int16x8_t)vsraq_n_u32(v80, (uint32x4_t)v84, 2uLL));
  a3[2] = vuzp1q_s16((int16x8_t)vsraq_n_u32(v67, (uint32x4_t)v69, 1uLL), (int16x8_t)vsraq_n_u32(v68, (uint32x4_t)v70, 1uLL));
  a3[3] = vuzp1q_s16((int16x8_t)vsraq_n_u32(v73, (uint32x4_t)v81, 2uLL), (int16x8_t)vsraq_n_u32(v77, (uint32x4_t)v82, 2uLL));
  a3[4] = vuzp1q_s16((int16x8_t)vsubq_s32(v63, v65), (int16x8_t)vsubq_s32(v64, v66));
  a3[5] = vuzp1q_s16((int16x8_t)vsubq_s32(v81, (int32x4_t)vshrq_n_u32(v73, 2uLL)), (int16x8_t)vsubq_s32(v82, (int32x4_t)vshrq_n_u32(v77, 2uLL)));
  int16x8_t result = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vshrq_n_u32(v79, 2uLL), v83), (int16x8_t)vsubq_s32((int32x4_t)vshrq_n_u32(v80, 2uLL), v84));
  a3[6] = vuzp1q_s16((int16x8_t)vsubq_s32((int32x4_t)vshrq_n_u32(v67, 1uLL), v69), (int16x8_t)vsubq_s32((int32x4_t)vshrq_n_u32(v68, 1uLL), v70));
  a3[7] = result;
  return result;
}

uint64_t sub_1BBB596C4(uint64_t a1, unint64_t a2, uint64_t a3, __int16 *a4, __int16 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  int v11 = 0;
  *(void *)((char *)&v256[1] + 6) = *MEMORY[0x1E4F143B8];
  v247[0] = (a2 & 0x1F) + 15;
  v247[1] = (0x8000 << a2) / 3;
  uint64_t v12 = (a2 >> 2) & 0x38;
  int v250 = a2 & 0x1F;
  uint64_t v241 = v12;
  char v242 = a2;
  __int16 v248 = (char *)&unk_1E9F80EE0 + 2 * v12;
  int v249 = &asc_1E9F80F40[v12];
  char v13 = 1;
  do
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    char v245 = v13;
    int v16 = v11;
    int v17 = &a5[64 * (uint64_t)v11];
    int v18 = 4 * v11;
    do
    {
      off_1E9F83280(v247, a1 + 2 * (v15 | v10), v17, &v251.i8[v18], a7, &a4[v18]);
      ++v14;
      v17 += 64;
      v18 += 4;
      uint64_t v15 = 8;
    }
    while (v14 != 2);
    char v13 = 0;
    int v11 = v16 + 2;
    uint64_t v10 = 128;
  }
  while ((v245 & 1) != 0);
  char v19 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1BBB6FDA0, (int8x16_t)vceqzq_s32(v251)));
  if ((v19 & 0xF) != 0) {
    int v20 = 15;
  }
  else {
    int v20 = 0;
  }
  __n128 v21 = off_1E9F83288(v247, a4, a7);
  unsigned int v240 = v20;
  int v252 = v20;
  int v23 = (uint16x4_t *)&asc_1E9F80F40[v241];
  v21.n128_u16[0] = v23->i16[0];
  v21.n128_u16[2] = v23->u16[1];
  v24.i16[0] = v23->i16[2];
  v24.i16[2] = v23->i16[3];
  uint32x4_t v25 = vmovl_u16((uint16x4_t)vuzp1_s16((int16x4_t)v21.n128_u64[0], v24));
  int32x4_t v26 = vdupq_n_s32(v242 & 0x1F);
  int16x8_t v27 = (int16x8_t)vshlq_u32(vmovl_u16(v23[1]), (uint32x4_t)v26);
  int32x4_t v28 = (int32x4_t)vuzp1q_s16((int16x8_t)vshlq_u32(v25, (uint32x4_t)v26), v27);
  int32x4_t v253 = v28;
  if (6 * (v242 & 0x1F) + ((v242 & 0xE0) >> 5) < 9u)
  {
    v27.i32[0] = 0;
    __int16 v135 = a4[10];
    if (a7) {
      __int16 v136 = a4[10];
    }
    else {
      __int16 v136 = a4[11];
    }
    __int16 v137 = a4[13];
    if (a7) {
      __int16 v138 = a4[14];
    }
    else {
      __int16 v138 = a4[13];
    }
    int v139 = v136 - v138;
    __int16 v140 = a4[6];
    __int16 v141 = a4[8];
    if (a7) {
      __int16 v142 = a4[6];
    }
    else {
      __int16 v142 = a4[8];
    }
    int v143 = a4[3];
    int v144 = v143 - v142;
    __int16 v145 = a4[9];
    if (a7) {
      __int16 v146 = a4[4];
    }
    else {
      __int16 v146 = a4[9];
    }
    if (a7) {
      __int16 v135 = a4[7];
    }
    int v147 = v146 - v135;
    if (a7) {
      __int16 v140 = a4[12];
    }
    else {
      __int16 v141 = a4[5];
    }
    int v148 = v141 - v140;
    int v149 = v143 + v142;
    int v150 = v138 + v136;
    if (a7) {
      __int16 v151 = a4[2];
    }
    else {
      __int16 v151 = a4[1];
    }
    if (!a7)
    {
      __int16 v145 = a4[7];
      __int16 v137 = a4[12];
    }
    int v152 = *a4;
    int v153 = v152 - v151;
    if (a7) {
      __int16 v154 = a4[1];
    }
    else {
      __int16 v154 = a4[2];
    }
    int v155 = v145 - v137;
    if (a7) {
      __int16 v156 = a4[5];
    }
    else {
      __int16 v156 = a4[4];
    }
    int v157 = v154 - v156;
    v26.i32[0] = v28.i8[0] & 3;
    char v158 = 2 * ((v28.i8[0] & 3) != 0);
    if (a7) {
      __int16 v159 = a4[11];
    }
    else {
      __int16 v159 = a4[14];
    }
    int v160 = v139 + v144;
    int v161 = v135;
    int v162 = a4[15];
    int v163 = v159 - v162;
    int v164 = v144 - v139;
    int v165 = v163 + v147;
    int v166 = v140;
    int v167 = v147 - v163;
    int v168 = v148 + v153;
    int v169 = v137;
    char v246 = v19;
    int v170 = v156;
    int v171 = v153 - v148;
    int v172 = v155 + v157;
    int v173 = v157 - v155;
    int v174 = v149 - v150;
    int v175 = v161 + v146;
    int v176 = v162 + v159;
    int v177 = v175 - v176;
    int v178 = v149 - v150 - (v175 - v176);
    int v179 = v152 + v151;
    int v180 = v166 + v141;
    int v181 = v179 - v180;
    int v182 = v170 + v154;
    int v183 = v169 + v145;
    int v184 = v179 - v180 - (v182 - v183);
    int v185 = v150 + v149;
    int v186 = v176 + v175;
    int v187 = v185 - v186;
    int v188 = v180 + v179;
    int v189 = v183 + v182;
    int8x8_t v190 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v28.i8, 0);
    int8x8_t v191 = vbsl_s8((int8x8_t)vdup_lane_s16(vceq_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v27.i8), 0), (int8x8_t)vshr_n_u16((uint16x4_t)v190, 2uLL), v190);
    int v192 = v182 - v183 + v181;
    int v193 = v174 + v177;
    int v194 = v192 - v193;
    int v195 = v185 + v186;
    int v196 = v183 + v182 + v188 - v195;
    int v197 = v191.u16[3];
    int v198 = (int)((v195 + v189 + v188) * v191.u16[3] + ((1 << v158) >> 1)) >> v158;
    int v199 = v191.u16[2];
    v119.i32[0] = v198;
    v119.i32[1] = (int)((v193 + v192) * v191.u16[2] + ((1 << v158) >> 1)) >> v158;
    v121.i32[0] = (int)(v196 * v191.u16[3] + ((1 << v158) >> 1)) >> v158;
    int v200 = v191.u16[1];
    v121.i32[1] = (int)(v194 * v191.u16[2] + ((1 << v158) >> 1)) >> v158;
    int v201 = v191.u16[0];
    v120.i32[0] = (int)((v164 + v167 + v173 + v171) * v191.u16[1] + ((1 << v158) >> 1)) >> v158;
    v120.i32[1] = (int)((v160 + v165 + v172 + v168) * v201 + ((1 << v158) >> 1)) >> v158;
    char v19 = v246;
    v122.i32[0] = (int)((v173 + v171 - (v164 + v167)) * v200 + ((1 << v158) >> 1)) >> v158;
    v122.i32[1] = (int)((v172 + v168 - (v160 + v165)) * v201 + ((1 << v158) >> 1)) >> v158;
    int v202 = v188 - v189;
    v127.i32[0] = (int)((v202 - v187) * v197 + ((1 << v158) >> 1)) >> v158;
    v127.i32[1] = (int)((v184 - v178) * v199 + ((1 << v158) >> 1)) >> v158;
    int v203 = v160 - v165;
    v128.i32[0] = (int)((v187 + v202) * v197 + ((1 << v158) >> 1)) >> v158;
    v128.i32[1] = (int)((v178 + v184) * v199 + ((1 << v158) >> 1)) >> v158;
    int v204 = v168 - v172;
    int v205 = v164 - v167;
    v133.i32[0] = (int)((v171 - v173 - v205) * v200 + ((1 << v158) >> 1)) >> v158;
    v133.i32[1] = (int)((v204 - v203) * v201 + ((1 << v158) >> 1)) >> v158;
    v134.i32[0] = (int)((v205 + v171 - v173) * v200 + ((1 << v158) >> 1)) >> v158;
    v134.i32[1] = (int)((v203 + v204) * v201 + ((1 << v158) >> 1)) >> v158;
  }
  else
  {
    __int16 v29 = v28.i16[0];
    BOOL v30 = (v28.i8[0] & 3) != 0;
    if ((v28.i8[0] & 3) == 0) {
      __int16 v29 = (unsigned __int16)v28.i16[0] >> 2;
    }
    __int16 v31 = v29 * a4[15];
    __int16 v32 = a4[13];
    __int16 v33 = a4[14];
    if (a7) {
      __int16 v34 = a4[14];
    }
    else {
      __int16 v34 = a4[13];
    }
    __int16 v35 = v29 * v34;
    __int16 v36 = a4[12];
    if (!a7) {
      __int16 v32 = a4[12];
    }
    __int16 v37 = v29 * v32;
    __int16 v38 = a4[6];
    if (!a7) {
      __int16 v36 = a4[6];
    }
    __int16 v39 = v29 * v36;
    __int16 v40 = a4[10];
    __int16 v41 = a4[7];
    if (a7) {
      __int16 v42 = a4[7];
    }
    else {
      __int16 v42 = a4[10];
    }
    __int16 v43 = v29 * v42;
    if (!a7) {
      __int16 v38 = a4[8];
    }
    __int16 v44 = v29 * v38;
    __int16 v45 = a4[4];
    if (a7) {
      __int16 v46 = a4[5];
    }
    else {
      __int16 v46 = a4[4];
    }
    __int16 v47 = v29 * v46;
    if (a7) {
      __int16 v48 = a4[2];
    }
    else {
      __int16 v48 = a4[1];
    }
    __int16 v49 = v29 * v48;
    if (a7) {
      __int16 v33 = a4[11];
    }
    int v50 = (__int16)(v29 * v33);
    if (!a7) {
      __int16 v40 = a4[11];
    }
    int v51 = (__int16)(v29 * v40);
    if (a7) {
      __int16 v41 = a4[9];
    }
    int v52 = (__int16)(v29 * v41);
    if (a7) {
      __int16 v53 = a4[8];
    }
    else {
      __int16 v53 = a4[5];
    }
    int v54 = (__int16)(v29 * v53);
    if (!a7) {
      __int16 v45 = a4[9];
    }
    int v55 = (__int16)(v29 * v45);
    int v56 = (__int16)(v29 * a4[3]);
    if (a7) {
      __int16 v57 = a4[1];
    }
    else {
      __int16 v57 = a4[2];
    }
    int v58 = (__int16)(v29 * v57);
    int v59 = (__int16)(v29 * *a4 + 2 * v30);
    unsigned int v60 = 2 * v30;
    if (v59 + v49 >= 0x7FFF) {
      int v61 = 0x7FFF;
    }
    else {
      int v61 = v59 + v49;
    }
    if (v61 <= -32768) {
      int v61 = -32768;
    }
    int v62 = v58 + v47;
    if (v62 >= 0x7FFF) {
      int v62 = 0x7FFF;
    }
    if (v62 <= -32768) {
      int v62 = -32768;
    }
    int v63 = v56 + v44;
    if (v63 >= 0x7FFF) {
      int v63 = 0x7FFF;
    }
    if (v63 <= -32768) {
      int v63 = -32768;
    }
    int v64 = v55 + v43;
    if (v64 >= 0x7FFF) {
      int v64 = 0x7FFF;
    }
    if (v64 <= -32768) {
      int v64 = -32768;
    }
    int v65 = v54 + v39;
    if (v65 >= 0x7FFF) {
      int v65 = 0x7FFF;
    }
    if (v65 <= -32768) {
      int v65 = -32768;
    }
    int v66 = v52 + v37;
    if (v66 >= 0x7FFF) {
      int v66 = 0x7FFF;
    }
    if (v66 <= -32768) {
      int v66 = -32768;
    }
    int v67 = v51 + v35;
    if (v67 >= 0x7FFF) {
      int v67 = 0x7FFF;
    }
    if (v67 <= -32768) {
      int v67 = -32768;
    }
    int v68 = v50 + v31;
    if (v68 >= 0x7FFF) {
      int v68 = 0x7FFF;
    }
    if (v68 <= -32768) {
      int v68 = -32768;
    }
    int v69 = v59 - v49;
    if (v69 >= 0x7FFF) {
      int v69 = 0x7FFF;
    }
    if (v69 <= -32768) {
      int v69 = -32768;
    }
    int v70 = v58 - v47;
    if (v70 >= 0x7FFF) {
      int v70 = 0x7FFF;
    }
    if (v70 <= -32768) {
      int v70 = -32768;
    }
    int v71 = v56 - v44;
    if (v71 >= 0x7FFF) {
      int v71 = 0x7FFF;
    }
    if (v71 <= -32768) {
      int v71 = -32768;
    }
    int v72 = v55 - v43;
    if (v72 >= 0x7FFF) {
      int v72 = 0x7FFF;
    }
    if (v72 <= -32768) {
      int v72 = -32768;
    }
    int v73 = v54 - v39;
    if (v73 >= 0x7FFF) {
      int v73 = 0x7FFF;
    }
    if (v73 <= -32768) {
      int v74 = -32768;
    }
    else {
      int v74 = v73;
    }
    int v75 = v52 - v37;
    if (v75 >= 0x7FFF) {
      int v75 = 0x7FFF;
    }
    if (v75 <= -32768) {
      int v76 = -32768;
    }
    else {
      int v76 = v75;
    }
    int v77 = v51 - v35;
    if (v77 >= 0x7FFF) {
      int v77 = 0x7FFF;
    }
    if (v77 <= -32768) {
      int v78 = -32768;
    }
    else {
      int v78 = v77;
    }
    int v79 = v50 - v31;
    if (v79 >= 0x7FFF) {
      int v79 = 0x7FFF;
    }
    if (v79 <= -32768) {
      int v80 = -32768;
    }
    else {
      int v80 = v79;
    }
    int v81 = v61 + v65;
    if (v61 + v65 >= 0x7FFF) {
      int v81 = 0x7FFF;
    }
    if (v81 <= -32768) {
      int v82 = -32768;
    }
    else {
      int v82 = v81;
    }
    int v83 = v62 + v66;
    if (v62 + v66 >= 0x7FFF) {
      int v83 = 0x7FFF;
    }
    if (v83 <= -32768) {
      int v84 = -32768;
    }
    else {
      int v84 = v83;
    }
    int v85 = v63 + v67;
    if (v63 + v67 >= 0x7FFF) {
      int v85 = 0x7FFF;
    }
    if (v85 <= -32768) {
      int v85 = -32768;
    }
    int v86 = v64 + v68;
    if (v64 + v68 >= 0x7FFF) {
      int v86 = 0x7FFF;
    }
    if (v86 <= -32768) {
      int v86 = -32768;
    }
    int v87 = v61 - v65;
    if (v61 - v65 >= 0x7FFF) {
      int v87 = 0x7FFF;
    }
    if (v87 <= -32768) {
      int v88 = -32768;
    }
    else {
      int v88 = v87;
    }
    int v89 = v62 - v66;
    if (v62 - v66 >= 0x7FFF) {
      int v89 = 0x7FFF;
    }
    if (v89 <= -32768) {
      int v90 = -32768;
    }
    else {
      int v90 = v89;
    }
    int v91 = v63 - v67;
    if (v63 - v67 >= 0x7FFF) {
      int v91 = 0x7FFF;
    }
    if (v91 <= -32768) {
      int v91 = -32768;
    }
    int v92 = v64 - v68;
    if (v64 - v68 >= 0x7FFF) {
      int v92 = 0x7FFF;
    }
    if (v92 <= -32768) {
      int v92 = -32768;
    }
    int v93 = v69 - v74;
    if (v69 - v74 >= 0x7FFF) {
      int v93 = 0x7FFF;
    }
    if (v93 <= -32768) {
      int v93 = -32768;
    }
    int v94 = v70 - v76;
    if (v70 - v76 >= 0x7FFF) {
      int v94 = 0x7FFF;
    }
    if (v94 <= -32768) {
      int v94 = -32768;
    }
    int v95 = v71 - v78;
    if (v71 - v78 >= 0x7FFF) {
      int v95 = 0x7FFF;
    }
    if (v95 <= -32768) {
      int v95 = -32768;
    }
    int v96 = v72 - v80;
    if (v72 - v80 >= 0x7FFF) {
      int v96 = 0x7FFF;
    }
    if (v96 <= -32768) {
      int v96 = -32768;
    }
    int v97 = v69 + v74;
    if (v97 >= 0x7FFF) {
      int v97 = 0x7FFF;
    }
    if (v97 <= -32768) {
      int v97 = -32768;
    }
    int v98 = v70 + v76;
    if (v98 >= 0x7FFF) {
      int v98 = 0x7FFF;
    }
    if (v98 <= -32768) {
      int v98 = -32768;
    }
    int v99 = v71 + v78;
    if (v99 >= 0x7FFF) {
      int v99 = 0x7FFF;
    }
    if (v99 <= -32768) {
      int v99 = -32768;
    }
    int v100 = v72 + v80;
    if (v100 >= 0x7FFF) {
      int v101 = 0x7FFF;
    }
    else {
      int v101 = v100;
    }
    if (v101 <= -32768) {
      int v101 = -32768;
    }
    int32x2_t v102 = vshl_n_s32((int32x2_t)__PAIR64__(v98, v94), 0x10uLL);
    int32x2_t v103 = vshl_n_s32((int32x2_t)__PAIR64__(v97, v93), 0x10uLL);
    int32x2_t v104 = vshl_n_s32((int32x2_t)__PAIR64__(v101, v96), 0x10uLL);
    int32x2_t v105 = vshl_n_s32((int32x2_t)__PAIR64__(v99, v95), 0x10uLL);
    int32x2_t v106 = (int32x2_t)vand_s8((int8x8_t)vqadd_s32(v105, v104), (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v107 = (int32x2_t)vand_s8((int8x8_t)vqadd_s32(v103, v102), (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v108 = vshr_n_s32(vqsub_s32(v107, v106), 0x10uLL);
    int32x2_t v109 = vshl_n_s32((int32x2_t)__PAIR64__(v90, v84), 0x10uLL);
    int32x2_t v110 = vshl_n_s32((int32x2_t)__PAIR64__(v88, v82), 0x10uLL);
    int32x2_t v111 = vshl_n_s32((int32x2_t)__PAIR64__(v92, v86), 0x10uLL);
    int32x2_t v112 = vshl_n_s32((int32x2_t)__PAIR64__(v91, v85), 0x10uLL);
    int32x2_t v113 = (int32x2_t)vand_s8((int8x8_t)vqadd_s32(v112, v111), (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v114 = (int32x2_t)vand_s8((int8x8_t)vqadd_s32(v110, v109), (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v115 = vshr_n_s32(vqadd_s32(v114, v113), 0x10uLL);
    int32x2_t v116 = vshr_n_s32(vqadd_s32(v107, v106), 0x10uLL);
    int32x2_t v117 = vshr_n_s32(vqsub_s32(v114, v113), 0x10uLL);
    int32x2_t v118 = vneg_s32(vdup_n_s32(v60));
    int32x2_t v119 = vshl_s32(v115, v118);
    int32x2_t v120 = vshl_s32(v116, v118);
    int32x2_t v121 = vshl_s32(v117, v118);
    int32x2_t v122 = vshl_s32(v108, v118);
    int32x2_t v123 = (int32x2_t)vand_s8((int8x8_t)vqsub_s32(v112, v111), (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v124 = (int32x2_t)vand_s8((int8x8_t)vqsub_s32(v110, v109), (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v125 = vshr_n_s32(vqsub_s32(v124, v123), 0x10uLL);
    int32x2_t v126 = vshr_n_s32(vqadd_s32(v124, v123), 0x10uLL);
    int32x2_t v127 = vshl_s32(v125, v118);
    int32x2_t v128 = vshl_s32(v126, v118);
    int8x8_t v129 = (int8x8_t)vqsub_s32(v103, v102);
    int32x2_t v130 = (int32x2_t)vand_s8((int8x8_t)vqsub_s32(v105, v104), (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v131 = (int32x2_t)vand_s8(v129, (int8x8_t)0xFFFF0000FFFF0000);
    int32x2_t v132 = vshr_n_s32(vqadd_s32(v131, v130), 0x10uLL);
    int32x2_t v133 = vshl_s32(vshr_n_s32(vqsub_s32(v131, v130), 0x10uLL), v118);
    int32x2_t v134 = vshl_s32(v132, v118);
  }
  int32x2_t v206 = vdup_n_s32(0x7FDFu);
  int32x2_t v207 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v119, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int32x2_t v208 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v121, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int32x2_t v209 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v120, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int32x2_t v210 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v122, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int32x2_t v211 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v127, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int32x2_t v212 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v128, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int32x2_t v213 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v133, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int32x2_t v214 = vadd_s32(vmin_s32(vshr_n_s32(vshl_n_s32(v134, 0x10uLL), 0x10uLL), v206), (int32x2_t)0x2000000020);
  int v215 = a5;
  if ((v19 & 0xF) != 0)
  {
    uint64_t v216 = 0;
    int32x2_t v217 = vshr_n_s32(vshl_n_s32(v214, 0x10uLL), 0x10uLL);
    int32x2_t v218 = vshr_n_s32(vshl_n_s32(v213, 0x10uLL), 0x10uLL);
    int32x2_t v219 = vshr_n_s32(vshl_n_s32(v212, 0x10uLL), 0x10uLL);
    int32x2_t v220 = vshr_n_s32(vshl_n_s32(v211, 0x10uLL), 0x10uLL);
    int32x2_t v221 = vshr_n_s32(vshl_n_s32(v210, 0x10uLL), 0x10uLL);
    int32x2_t v222 = vshr_n_s32(vshl_n_s32(v209, 0x10uLL), 0x10uLL);
    int32x2_t v223 = vshr_n_s32(vshl_n_s32(v208, 0x10uLL), 0x10uLL);
    v224.i64[1] = 0x302030203020302;
    *(int32x2_t *)v28.i8 = vshr_n_s32(vshl_n_s32(v207, 0x10uLL), 0x10uLL);
    do
    {
      int32x2_t v225 = v219;
      int v226 = (int16x4_t *)(a3 + (unsigned __int16)word_1BBB93174[v216]);
      if (v251.i16[v216])
      {
        int16x8_t v254 = vdupq_lane_s16(*(int16x4_t *)v28.i8, 2);
        __int16 v255 = v28.i16[0];
        v256[0] = 0;
        *(void *)((char *)v256 + 6) = 0;
        sub_1BBB570BC(v215, v215 + 16, &v255, v254.i16, word_1BBB70270, (unsigned __int16 *)&v253, v226, a7, 0, 0, 0, 0, 0, 0);
      }
      else
      {
        *(uint32x2_t *)v28.i8 = vshr_n_u32(*(uint32x2_t *)v28.i8, 6uLL);
        *(int16x4_t *)v224.i8 = vmovn_s32(v28);
        int8x16_t v224 = vqtbl1q_s8(v224, (int8x16_t)xmmword_1BBB6F820);
        *(int8x16_t *)v226->i8 = v224;
        *(int16x4_t *)v224.i8 = vdup_lane_s16(*(int16x4_t *)v28.i8, 0);
        int16x4_t v227 = vdup_lane_s16(*(int16x4_t *)v28.i8, 2);
        v226[4] = *(int16x4_t *)v224.i8;
        v226[5] = v227;
        v226[8] = *(int16x4_t *)v224.i8;
        v226[9] = v227;
        v226[12] = *(int16x4_t *)v224.i8;
        v226[13] = v227;
      }
      ++v216;
      v215 += 32;
      *(int32x2_t *)v28.i8 = v223;
      int32x2_t v223 = v222;
      int32x2_t v222 = v221;
      int32x2_t v221 = v220;
      int32x2_t v220 = v225;
      int32x2_t v219 = v218;
      int32x2_t v218 = v217;
      int32x2_t v217 = v225;
    }
    while (v216 != 8);
  }
  else
  {
    uint64_t v228 = 0;
    *(int32x2_t *)v26.i8 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v207, 0x10uLL), 0x10uLL), 6uLL);
    int32x2_t v229 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v208, 0x10uLL), 0x10uLL), 6uLL);
    int32x2_t v230 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v209, 0x10uLL), 0x10uLL), 6uLL);
    int32x2_t v231 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v210, 0x10uLL), 0x10uLL), 6uLL);
    int32x2_t v232 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v211, 0x10uLL), 0x10uLL), 6uLL);
    int32x2_t v233 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v212, 0x10uLL), 0x10uLL), 6uLL);
    int32x2_t v234 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v213, 0x10uLL), 0x10uLL), 6uLL);
    int32x2_t v235 = vshr_n_s32(vshr_n_s32(vshl_n_s32(v214, 0x10uLL), 0x10uLL), 6uLL);
    do
    {
      *(int16x4_t *)v22.i8 = vmovn_s32(v26);
      int8x16_t v22 = vqtbl1q_s8(v22, (int8x16_t)xmmword_1BBB6F820);
      int v236 = (__n128 *)(a3 + (unsigned __int16)word_1BBB93174[v228]);
      int16x4_t v237 = vdup_lane_s16(*(int16x4_t *)v26.i8, 0);
      int16x4_t v238 = vdup_lane_s16(*(int16x4_t *)v26.i8, 2);
      *int v236 = (__n128)v22;
      *(int32x2_t *)v26.i8 = v229;
      int32x2_t v229 = v230;
      int32x2_t v230 = v231;
      int32x2_t v231 = v232;
      int32x2_t v232 = v233;
      v236[2].n128_u64[0] = (unint64_t)v237;
      *(int16x4_t *)&v236[2].n128_i8[8] = v238;
      v236[4].n128_u64[0] = (unint64_t)v237;
      *(int16x4_t *)&v236[4].n128_i8[8] = v238;
      ++v228;
      int32x2_t v233 = v234;
      v236[6].n128_u64[0] = (unint64_t)v237;
      *(int16x4_t *)&v236[6].n128_i8[8] = v238;
      int32x2_t v234 = v235;
      int32x2_t v235 = v232;
    }
    while (v228 != 8);
  }
  return v240;
}

uint64_t sub_1BBB5A2F4(uint64_t result, int a2, unsigned char *a3, unsigned char *a4)
{
  int v4 = a4[3];
  if (a4[3]) {
    int v5 = -1;
  }
  else {
    int v5 = 0;
  }
  if (a4[2]) {
    unsigned int v6 = 15;
  }
  else {
    unsigned int v6 = 7;
  }
  if (a4[1])
  {
    uint64_t v7 = 0;
    if (a4[3]) {
      uint64_t v8 = -1;
    }
    else {
      uint64_t v8 = 0;
    }
    *a3 = (*(unsigned __int8 *)(result + v8 - a2)
         + 2 * *(unsigned __int8 *)(result - a2)
         + *(unsigned __int8 *)(result - a2 + 1)
         + 2) >> 2;
    uint64_t v9 = result - a2;
    do
    {
      if ((int)v7 >= (int)v6) {
        signed int v10 = v6;
      }
      else {
        signed int v10 = v7;
      }
      int v11 = *(unsigned __int8 *)(v9 + v10);
      uint64_t v12 = v7 + 1;
      if ((int)v7 + 1 >= v6) {
        unsigned int v13 = v6;
      }
      else {
        unsigned int v13 = v7 + 1;
      }
      int v14 = *(unsigned __int8 *)(v9 + v13);
      unsigned int v15 = v7 + 2;
      if ((int)v7 + 2 >= v6) {
        unsigned int v15 = v6;
      }
      a3[++v7] = (v11 + 2 * v14 + *(unsigned __int8 *)(v9 + v15) + 2) >> 2;
    }
    while (v12 != 16);
    a3[16] = a3[15];
  }
  if (*a4)
  {
    uint64_t v16 = 0;
    if (v4) {
      uint64_t v17 = -1;
    }
    else {
      uint64_t v17 = 0;
    }
    int v18 = a3 - 2;
    char v19 = (unsigned __int8 *)(result - 1);
    do
    {
      int v20 = v16 - 1;
      if (v16 <= v17) {
        int v20 = v5;
      }
      int v21 = *(unsigned __int8 *)(result + a2 * (uint64_t)v20 - 1);
      if (++v16 >= 7) {
        uint64_t v22 = 7;
      }
      else {
        uint64_t v22 = v16;
      }
      *v18-- = (v21 + 2 * *v19 + *(unsigned __int8 *)(result + v22 * a2 - 1) + 2) >> 2;
      v19 += a2;
    }
    while (v16 != 8);
    *(a3 - 10) = *(a3 - 9);
  }
  if (a4[3])
  {
    if (*a4)
    {
      int v23 = *(unsigned __int8 *)(result - 1);
      if (v4) {
        uint64_t v24 = -1;
      }
      else {
        uint64_t v24 = 0;
      }
      if (a4[1])
      {
        int v25 = v23 + 2 * *(unsigned __int8 *)(result + v24 - a2) + *(unsigned __int8 *)(result - a2);
      }
      else
      {
        int v27 = *(unsigned __int8 *)(result + v24 * a2 - 1);
        int v25 = v23 + v27 + 2 * v27;
      }
    }
    else
    {
      if (!a4[1]) {
        return result;
      }
      if (v4) {
        uint64_t v26 = -1;
      }
      else {
        uint64_t v26 = 0;
      }
      int v25 = *(unsigned __int8 *)(result - a2) + 3 * *(unsigned __int8 *)(result + v26 - a2);
    }
    *(a3 - 1) = (v25 + 2) >> 2;
  }
  return result;
}

int8x8_t sub_1BBB5A4B8(unsigned char *a1, int a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a3 - 3);
  int v4 = *(unsigned __int8 *)(a3 - 2);
  int v5 = *(unsigned __int8 *)(a3 - 4);
  unsigned int v6 = (v3 + 1 + v4) >> 1;
  int v7 = *(unsigned __int8 *)(a3 - 5);
  int v8 = *(unsigned __int8 *)(a3 - 6);
  unsigned int v9 = (v5 + 2 + 2 * v3 + v4) >> 2;
  int v10 = *(unsigned __int8 *)(a3 - 7);
  unsigned int v11 = (v3 + 1 + v5) >> 1;
  int v12 = *(unsigned __int8 *)(a3 - 8);
  int v13 = v7 + 2 + v3;
  unsigned int v14 = *(unsigned __int8 *)(a3 - 9);
  int v15 = *(unsigned __int8 *)(a3 - 10);
  unsigned int v16 = (v13 + 2 * v5) >> 2;
  *a1 = v6;
  unsigned int v17 = (v5 + v7 + 1) >> 1;
  a1[1] = v9;
  a1[2] = v11;
  unsigned int v18 = (v5 + 2 + v8 + 2 * v7) >> 2;
  a1[3] = v16;
  a1[4] = v17;
  unsigned int v19 = (v7 + v8 + 1) >> 1;
  a1[5] = v18;
  a1[6] = v19;
  unsigned int v20 = (v7 + 2 + v10 + 2 * v8) >> 2;
  a1[7] = v20;
  int v21 = &a1[a2];
  *int v21 = v11;
  v21[1] = v16;
  unsigned int v22 = (v8 + v10 + 1) >> 1;
  v21[2] = v17;
  v21[3] = v18;
  v21[4] = v19;
  unsigned int v23 = (v8 + v12 + 2 * v10 + 2) >> 2;
  unsigned int v24 = v10 + v12 + 1;
  v21[5] = v20;
  v21[6] = v22;
  v21[7] = v23;
  int v25 = &a1[2 * a2];
  *int v25 = v17;
  unsigned int v26 = v10 + v14 + 2 * v12 + 2;
  unsigned int v27 = v12 + v14 + 1;
  v25[1] = v18;
  v25[2] = v19;
  v25[3] = v20;
  v25[4] = v22;
  v26 >>= 2;
  v25[5] = v23;
  v25[6] = v24 >> 1;
  v25[7] = v26;
  int32x4_t v28 = &a1[3 * a2];
  *int32x4_t v28 = v19;
  v28[1] = v20;
  unsigned int v29 = (v12 + v15 + 2 * v14 + 2) >> 2;
  v28[2] = v22;
  v28[3] = v23;
  v28[4] = v24 >> 1;
  v28[5] = v26;
  v28[6] = v27 >> 1;
  v28[7] = v29;
  BOOL v30 = &a1[4 * a2];
  *BOOL v30 = v22;
  v30[1] = v23;
  v30[2] = v24 >> 1;
  v30[3] = v26;
  v30[4] = v27 >> 1;
  v30[5] = v29;
  v30[6] = v14;
  v30[7] = v14;
  __int16 v31 = &a1[5 * a2];
  *__int16 v31 = v24 >> 1;
  v31[1] = v26;
  v31[2] = v27 >> 1;
  int8x8_t result = vdup_n_s8(v14);
  v31[3] = v29;
  *((_DWORD *)v31 + 1) = result.i32[0];
  __int16 v33 = &a1[6 * a2];
  *__int16 v33 = v27 >> 1;
  v33[1] = v29;
  *(_DWORD *)(v33 + 2) = result.i32[0];
  v33[6] = v14;
  v33[7] = v14;
  *(int8x8_t *)&a1[8 * a2 - a2] = result;
  return result;
}

unsigned char *sub_1BBB5A698(unsigned char *result, int a2, unsigned __int8 *a3)
{
  int v3 = *a3;
  int v4 = a3[1];
  int v5 = a3[2];
  int v6 = a3[3];
  unsigned int v7 = (v4 + 1 + v5) >> 1;
  int v8 = a3[4];
  unsigned int v9 = (v5 + v6 + 1) >> 1;
  int v10 = a3[5];
  int v11 = a3[6];
  unsigned int v12 = (v6 + v8 + 1) >> 1;
  int v13 = a3[7];
  unsigned int v14 = (v8 + v10 + 1) >> 1;
  int v15 = a3[8];
  int v16 = a3[9];
  unsigned int v17 = (v10 + v11 + 1) >> 1;
  int v18 = a3[10];
  unsigned int v19 = (v11 + v13 + 1) >> 1;
  int v20 = a3[11];
  int v21 = a3[12];
  unsigned int v22 = (v13 + v15 + 1) >> 1;
  int v23 = v5 + 2;
  *int8x8_t result = (v4 + 1 + v3) >> 1;
  result[1] = v7;
  unsigned int v24 = (v5 + 2 + v3 + 2 * v4) >> 2;
  result[2] = v9;
  int v25 = v6 + 2;
  result[3] = v12;
  result[4] = v14;
  unsigned int v26 = (v6 + 2 + v4 + 2 * v5) >> 2;
  result[5] = v17;
  result[6] = v19;
  unsigned int v27 = (v23 + 2 * v6 + v8) >> 2;
  result[7] = v22;
  int32x4_t v28 = &result[a2];
  *int32x4_t v28 = v24;
  v28[1] = v26;
  unsigned int v29 = (v25 + 2 * v8 + v10) >> 2;
  v28[2] = v27;
  v28[3] = v29;
  unsigned int v30 = (v8 + 2 * v10 + v11 + 2) >> 2;
  v28[4] = v30;
  unsigned int v31 = (v10 + 2 * v11 + v13 + 2) >> 2;
  v28[5] = v31;
  unsigned int v32 = (v11 + 2 * v13 + v15 + 2) >> 2;
  v28[6] = v32;
  unsigned int v33 = (v13 + 2 * v15 + v16 + 2) >> 2;
  v28[7] = v33;
  __int16 v34 = &result[2 * a2];
  *__int16 v34 = v7;
  v34[1] = v9;
  v34[2] = v12;
  v34[3] = v14;
  v34[4] = v17;
  v34[5] = v19;
  v34[6] = v22;
  unsigned int v35 = (v15 + v16 + 1) >> 1;
  v34[7] = v35;
  __int16 v36 = &result[3 * a2];
  *__int16 v36 = v26;
  v36[1] = v27;
  _DWORD v36[2] = v29;
  v36[3] = v30;
  v36[4] = v31;
  v36[5] = v32;
  unsigned int v37 = (v15 + 2 * v16 + v18 + 2) >> 2;
  v36[6] = v33;
  v36[7] = v37;
  __int16 v38 = &result[4 * a2];
  *__int16 v38 = v9;
  v38[1] = v12;
  v38[2] = v14;
  v38[3] = v17;
  v38[4] = v19;
  unsigned int v39 = (v16 + v18 + 1) >> 1;
  v38[5] = v22;
  v38[6] = v35;
  v38[7] = v39;
  __int16 v40 = &result[5 * a2];
  *__int16 v40 = v27;
  unsigned int v41 = (v16 + 2 * v18 + v20 + 2) >> 2;
  v40[1] = v29;
  v40[2] = v30;
  v40[3] = v31;
  v40[4] = v32;
  v40[5] = v33;
  v40[6] = v37;
  v40[7] = v41;
  __int16 v42 = &result[6 * a2];
  *__int16 v42 = v12;
  v42[1] = v14;
  v42[2] = v17;
  v42[3] = v19;
  v42[4] = v22;
  v42[5] = v35;
  v42[6] = v39;
  v42[7] = (v18 + v20 + 1) >> 1;
  __int16 v43 = &result[8 * a2 - a2];
  *__int16 v43 = v29;
  v43[1] = v30;
  v43[2] = v31;
  v43[3] = v32;
  v43[4] = v33;
  v43[5] = v37;
  v43[6] = v41;
  v43[7] = (v18 + 2 * v20 + v21 + 2) >> 2;
  return result;
}

uint16x4_t sub_1BBB5A944(uint64_t a1, int a2, unsigned __int8 *a3, uint8x8_t a4)
{
  int v4 = *(a3 - 2);
  int v5 = *(a3 - 1);
  int v6 = *a3;
  unsigned int v7 = (v4 + 1 + v5) >> 1;
  int v8 = v4 + 2;
  a4.i32[0] = *(_DWORD *)(a3 + 1);
  uint8x8_t v9 = (uint8x8_t)vmovl_u8(a4).u64[0];
  int v10 = v9.u16[0];
  unsigned int v11 = (v4 + 2 + 2 * v5 + v6) >> 2;
  int v12 = v5 + 2;
  int v13 = *(a3 - 3);
  int v14 = v5 + 2 + 2 * v6;
  int v15 = *(a3 - 4);
  int v16 = v6 + 2 * v9.u16[0];
  int v17 = *(a3 - 5);
  unsigned int v18 = (v4 + 1 + v13) >> 1;
  int v19 = *(a3 - 6);
  int v20 = *(a3 - 7);
  unsigned int v21 = v12 + 2 * v4 + v13;
  int v22 = *(a3 - 8);
  unsigned int v23 = v21 >> 2;
  int v24 = *(a3 - 9);
  unsigned int v25 = (v13 + v15 + 1) >> 1;
  int v26 = v9.u16[1];
  v9.i32[0] = *(_DWORD *)(a3 + 2);
  uint16x8_t v27 = vmovl_u8(v9);
  int16x4_t v28 = (int16x4_t)vext_s8(*(int8x8_t *)v27.i8, (int8x8_t)a4, 2uLL);
  v28.i16[3] = a3[6];
  unsigned int v29 = (v8 + v15 + 2 * v13) >> 2;
  *(unsigned char *)a1 = v7;
  LOBYTE(v14) = (v14 + v10) >> 2;
  *(unsigned char *)(a1 + 1) = v11;
  *(unsigned char *)(a1 + 2) = v14;
  LOBYTE(v16) = (v16 + v26 + 2) >> 2;
  *(int16x4_t *)v27.i8 = vadd_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8);
  int16x8_t v30 = (int16x8_t)vaddw_u8(v27, a4);
  *(unsigned char *)(a1 + 3) = v16;
  *(int16x4_t *)v30.i8 = vadd_s16(*(int16x4_t *)v30.i8, v28);
  *(_DWORD *)(a1 + 4) = vrshrn_n_s16(v30, 2uLL).u32[0];
  unsigned int v31 = (v15 + v17 + 1) >> 1;
  unsigned int v32 = (unsigned char *)(a1 + a2);
  *unsigned int v32 = v18;
  v32[1] = v23;
  v32[2] = v7;
  unsigned int v33 = (v13 + v17 + 2 * v15 + 2) >> 2;
  v32[3] = v11;
  unsigned int v34 = (v17 + v19 + 1) >> 1;
  v32[4] = v14;
  v32[5] = v16;
  uint16x4_t result = vshr_n_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v30.i8, (int16x4_t)0x2000200020002), 2uLL);
  v32[6] = result.i8[0];
  unsigned int v36 = (v15 + v19 + 2 * v17 + 2) >> 2;
  v32[7] = result.i8[2];
  LODWORD(v32) = (v19 + v20 + 1) >> 1;
  unsigned int v37 = (unsigned char *)(a1 + 2 * a2);
  *unsigned int v37 = v25;
  v37[1] = v29;
  v37[2] = v18;
  unsigned int v38 = (v17 + v20 + 2 * v19 + 2) >> 2;
  v37[3] = v23;
  unsigned int v39 = (v20 + v22 + 1) >> 1;
  v37[4] = v7;
  v37[5] = v11;
  v37[6] = v14;
  v37[7] = v16;
  __int16 v40 = (unsigned char *)(a1 + 3 * a2);
  *__int16 v40 = v31;
  v40[1] = v33;
  unsigned int v41 = (v19 + v22 + 2 * v20 + 2) >> 2;
  v40[2] = v25;
  v40[3] = v29;
  v40[4] = v18;
  v40[5] = v23;
  v40[6] = v7;
  v40[7] = v11;
  __int16 v42 = (unsigned char *)(a1 + 4 * a2);
  *__int16 v42 = v34;
  v42[1] = v36;
  v42[2] = v31;
  v42[3] = v33;
  v42[4] = v25;
  v42[5] = v29;
  v42[6] = v18;
  v42[7] = v23;
  __int16 v43 = (unsigned char *)(a1 + 5 * a2);
  *__int16 v43 = (_BYTE)v32;
  v43[1] = v38;
  v43[2] = v34;
  v43[3] = v36;
  v43[4] = v31;
  v43[5] = v33;
  v43[6] = v25;
  v43[7] = v29;
  __int16 v44 = (unsigned char *)(a1 + 6 * a2);
  *__int16 v44 = v39;
  v44[1] = v41;
  void v44[2] = (_BYTE)v32;
  v44[3] = v38;
  v44[4] = v34;
  v44[5] = v36;
  v44[6] = v31;
  v44[7] = v33;
  __int16 v45 = (unsigned char *)(a1 - a2 + 8 * a2);
  *__int16 v45 = (v22 + v24 + 1) >> 1;
  v45[1] = (v20 + v24 + 2 * v22 + 2) >> 2;
  v45[2] = v39;
  v45[3] = v41;
  v45[4] = (_BYTE)v32;
  v45[5] = v38;
  v45[6] = v34;
  v45[7] = v36;
  return result;
}

unsigned char *sub_1BBB5ABEC(unsigned char *result, int a2, unsigned __int8 *a3)
{
  int v3 = *(a3 - 1);
  int v4 = *a3;
  unsigned int v5 = v4 + 1 + v3;
  int v6 = a3[1];
  unsigned int v7 = v4 + 1 + v6;
  int v8 = a3[2];
  int v9 = v6 + v8;
  int v10 = a3[3];
  int v11 = v8 + v10;
  int v12 = a3[4];
  int v13 = v10 + v12;
  int v14 = a3[5];
  int v15 = v12 + v14;
  int v16 = a3[6];
  int v17 = v14 + v16;
  int v18 = a3[7];
  int v19 = *(a3 - 2);
  int v20 = v4 + 2;
  int v21 = *(a3 - 3);
  int v22 = *(a3 - 4);
  int v23 = *(a3 - 5);
  int v24 = *(a3 - 6);
  int v25 = *(a3 - 7);
  int v26 = *(a3 - 8);
  result[7] = (v16 + v18 + 1) >> 1;
  int v27 = v4 + 2 + 2 * v3;
  v3 += 2;
  unsigned int v28 = v3 + 2 * v4 + v6;
  unsigned int v29 = v20 + 2 * v6 + v8;
  int v30 = v6 + 2 * v8 + v10;
  int v31 = v8 + 2 * v10 + v12;
  int v32 = v10 + 2 * v12 + v14;
  int v33 = v12 + 2 * v14 + v16;
  int v34 = v14 + 2 * v16;
  v5 >>= 1;
  *uint16x4_t result = v5;
  v7 >>= 1;
  result[1] = v7;
  unsigned int v35 = (v9 + 1) >> 1;
  result[2] = v35;
  unsigned int v36 = (v11 + 1) >> 1;
  result[3] = v36;
  unsigned int v37 = (v13 + 1) >> 1;
  result[4] = v37;
  unsigned int v38 = (v15 + 1) >> 1;
  result[5] = v38;
  unsigned int v39 = (v17 + 1) >> 1;
  result[6] = v39;
  unsigned int v40 = (v27 + v19) >> 2;
  int v41 = v34 + v18;
  __int16 v42 = &result[a2];
  *__int16 v42 = v40;
  v28 >>= 2;
  v42[1] = v28;
  v29 >>= 2;
  v42[2] = v29;
  unsigned int v43 = (v30 + 2) >> 2;
  v42[3] = v43;
  unsigned int v44 = (v31 + 2) >> 2;
  v42[4] = v44;
  unsigned int v45 = (v32 + 2) >> 2;
  v42[5] = v45;
  unsigned int v46 = (v33 + 2) >> 2;
  v42[6] = v46;
  v42[7] = (v41 + 2) >> 2;
  unsigned int v47 = (v3 + v21 + 2 * v19) >> 2;
  __int16 v48 = &result[2 * a2];
  *__int16 v48 = v47;
  v48[1] = v5;
  v48[2] = v7;
  v48[3] = v35;
  v48[4] = v36;
  v48[5] = v37;
  v48[6] = v38;
  v48[7] = v39;
  __int16 v49 = &result[3 * a2];
  unsigned int v50 = (v19 + v22 + 2 * v21 + 2) >> 2;
  *__int16 v49 = v50;
  v49[1] = v40;
  v49[2] = v28;
  v49[3] = v29;
  v49[4] = v43;
  v49[5] = v44;
  v49[6] = v45;
  v49[7] = v46;
  LODWORD(v49) = (v21 + v23 + 2 * v22 + 2) >> 2;
  int v51 = &result[4 * a2];
  *int v51 = (_BYTE)v49;
  v51[1] = v47;
  v51[2] = v5;
  v51[3] = v7;
  v51[4] = v35;
  v51[5] = v36;
  v51[6] = v37;
  v51[7] = v38;
  int v52 = &result[5 * a2];
  LODWORD(v51) = (v22 + v24 + 2 * v23 + 2) >> 2;
  *int v52 = (_BYTE)v51;
  v52[1] = v50;
  v52[2] = v40;
  v52[3] = v28;
  v52[4] = v29;
  v52[5] = v43;
  v52[6] = v44;
  v52[7] = v45;
  __int16 v53 = &result[6 * a2];
  *__int16 v53 = (v23 + v25 + 2 * v24 + 2) >> 2;
  v53[1] = (_BYTE)v49;
  v53[2] = v47;
  v53[3] = v5;
  v53[4] = v7;
  v53[5] = v35;
  v53[6] = v36;
  v53[7] = v37;
  int v54 = &result[8 * a2 - a2];
  *int v54 = (v24 + v26 + 2 * v25 + 2) >> 2;
  v54[1] = (_BYTE)v51;
  v54[2] = v50;
  v54[3] = v40;
  v54[4] = v28;
  v54[5] = v29;
  v54[6] = v43;
  v54[7] = v44;
  return result;
}

double sub_1BBB5AEC0(void *a1, int a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a3 - 3);
  int v4 = *(unsigned __int8 *)(a3 - 4);
  int v5 = *(unsigned __int8 *)(a3 - 5);
  unsigned int v6 = (v3 + v5 + 2 * v4 + 2) >> 2;
  int v7 = *(unsigned __int8 *)(a3 - 6);
  int v8 = *(unsigned __int8 *)(a3 - 7);
  unsigned int v9 = (v4 + v7 + 2 * v5 + 2) >> 2;
  int v10 = *(unsigned __int8 *)(a3 - 8);
  int v11 = *(unsigned __int8 *)(a3 - 9);
  uint8x8_t v12 = *(uint8x8_t *)(a3 - 2);
  unsigned __int16 v13 = vmovl_u8(v12).u16[0];
  uint8x8_t v14 = *(uint8x8_t *)(a3 - 1);
  v15.i64[0] = 0x2000200020002;
  v15.i64[1] = 0x2000200020002;
  int16x8_t v16 = (int16x8_t)vaddw_u8(v15, v12);
  int16x8_t v17 = vaddq_s16(v16, (int16x8_t)vshll_n_u8(v14, 1uLL));
  int16x8_t v18 = (int16x8_t)vextq_s8((int8x16_t)vmovl_u8(v14), (int8x16_t)v17, 2uLL);
  v18.i16[7] = *(unsigned __int8 *)(a3 + 7);
  int16x8_t v19 = vaddq_s16(v17, v18);
  *(int8x8_t *)v19.i8 = vshrn_n_s16(v19, 2uLL);
  unsigned int v20 = ((v16.u16[1] + 2 * v13 + v3) >> 2) & 0x1FF;
  *a1 = v19.i64[0];
  unsigned int v21 = v16.u16[0] + v4 + 2 * v3;
  int v22 = (char *)a1 + a2;
  *int v22 = v20;
  unsigned __int32 v23 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)v19, (int8x16_t)v19)).u32[0];
  *(_DWORD *)(v22 + 1) = v23;
  *(_WORD *)(v22 + 5) = v19.i16[2];
  v22[7] = v19.i8[6];
  int v24 = (v21 >> 2) & 0x1FF;
  int v25 = (char *)a1 + 2 * a2;
  *int v25 = v24;
  v25[1] = v20;
  v25[6] = v19.i8[4];
  unsigned int v26 = (v5 + v8 + 2 * v7 + 2) >> 2;
  *(_DWORD *)(v25 + 2) = v23;
  v25[7] = v19.i8[5];
  int v27 = (char *)a1 + 3 * a2;
  *int v27 = v6;
  v27[1] = v24;
  unsigned int v28 = (v7 + v10 + 2 * v8 + 2) >> 2;
  v27[2] = v20;
  *(_DWORD *)(v27 + 3) = v23;
  v27[7] = v19.i8[4];
  unsigned int v29 = v8 + v11 + 2 * v10 + 2;
  int v30 = (char *)a1 + 4 * a2;
  *int v30 = v9;
  v30[1] = v6;
  v30[2] = v24;
  v30[3] = v20;
  *((_DWORD *)v30 + 1) = v23;
  int v31 = (char *)a1 + 5 * a2;
  *int v31 = v26;
  v31[1] = v9;
  v31[2] = v6;
  v31[3] = v24;
  *(_WORD *)(v31 + 5) = v19.i16[0];
  v31[4] = v20;
  v31[7] = v19.i8[2];
  int v32 = (char *)a1 + 6 * a2;
  *int v32 = v28;
  v32[1] = v26;
  v32[2] = v9;
  v32[3] = v6;
  v32[4] = v24;
  v32[5] = v20;
  *((_WORD *)v32 + 3) = v19.i16[0];
  int v33 = (char *)&a1[a2] - a2;
  *int v33 = v29 >> 2;
  v33[1] = v28;
  void v33[2] = v26;
  v33[3] = v9;
  v33[4] = v6;
  v33[5] = v24;
  v33[6] = v20;
  v33[7] = v19.i8[0];
  return *(double *)v19.i64;
}

uint64_t sub_1BBB5B0A8(uint64_t a1, int a2, unsigned __int8 *a3, double a4, double a5, double a6, double a7, double a8, uint16x8_t a9)
{
  uint8x8_t v9 = *(uint8x8_t *)(a3 + 7);
  int16x8_t v10 = (int16x8_t)vmovl_u8(v9);
  uint8x8_t v11 = *(uint8x8_t *)(a3 + 8);
  uint16x8_t v12 = vshll_n_u8(v11, 1uLL);
  int16x8_t v13 = (int16x8_t)vaddw_u8(v12, v9);
  v12.i32[0] = *(_DWORD *)(a3 + 3);
  int8x8_t v14 = (int8x8_t)vmovl_u8(*(uint8x8_t *)v12.i8).u64[0];
  a9.i32[0] = 131074;
  a9.i16[2] = 2;
  a9.i16[3] = 2;
  v12.i64[0] = vaddw_u8(a9, *(uint8x8_t *)v12.i8).u64[0];
  int8x8_t v15 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v10.i8, 0);
  int16x4_t v16 = (int16x4_t)vext_s8(v14, vext_s8(v15, v15, 6uLL), 2uLL);
  int v17 = a3[1];
  int v18 = a3[2];
  int16x8_t v19 = (int16x8_t)vextq_s8((int8x16_t)vmovl_u8(v11), (int8x16_t)v13, 2uLL);
  v19.i16[7] = a3[16];
  unsigned int v20 = (v18 + 2 + *a3 + 2 * v17) >> 2;
  LOBYTE(v17) = (v12.u16[0] + v17 + 2 * v18) >> 2;
  char v21 = (v18 + 2 + 2 * v14.u16[0] + v14.u16[1]) >> 2;
  *(uint16x4_t *)v10.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vadd_s16(*(int16x4_t *)v12.i8, (int16x4_t)vext_s8(v14, *(int8x8_t *)v10.i8, 4uLL)), vadd_s16(v16, v16)), 2uLL);
  *(unsigned char *)a1 = v20;
  *(unsigned char *)(a1 + 1) = v17;
  *(unsigned char *)(a1 + 2) = v21;
  v12.i32[0] = vmovn_s16(v10).u32[0];
  *(_DWORD *)(a1 + 3) = v12.i32[0];
  int16x8_t v22 = vaddq_s16(v13, v19);
  *(int8x8_t *)v22.i8 = vrshrn_n_s16(v22, 2uLL);
  *(unsigned char *)(a1 + 7) = v22.i8[0];
  uint64_t v23 = a1 + a2;
  *(unsigned char *)uint64_t v23 = v17;
  *(unsigned char *)(v23 + 1) = v21;
  *(unsigned char *)(v23 + 6) = v22.i8[0];
  *(_DWORD *)(v23 + 2) = v12.i32[0];
  *(unsigned char *)(v23 + 7) = v22.i8[1];
  uint64_t v24 = a1 + 2 * a2;
  *(unsigned char *)uint64_t v24 = v21;
  *(_DWORD *)(v24 + 1) = v12.i32[0];
  *(_WORD *)(v24 + 5) = v22.i16[0];
  *(unsigned char *)(v24 + 7) = v22.i8[2];
  v12.i32[1] = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)v22, (int8x16_t)v22)).u32[0];
  *(void *)(a1 + 3 * a2) = v12.i64[0];
  uint64_t v25 = a1 + 4 * a2;
  *(unsigned char *)uint64_t v25 = v10.i8[2];
  uint64_t v26 = a1 + 5 * a2;
  *(unsigned char *)(v25 + 1) = v10.i8[4];
  uint64_t v27 = a1 + 6 * a2;
  *(unsigned char *)(v25 + 2) = v10.i8[6];
  *(unsigned char *)(v25 + 7) = v22.i8[4];
  uint64_t result = a1 - a2;
  *(_DWORD *)(v25 + 3) = v12.i32[1];
  *(unsigned char *)uint64_t v26 = v10.i8[4];
  *(unsigned char *)(v26 + 1) = v10.i8[6];
  *(_DWORD *)(v26 + 2) = v12.i32[1];
  *(_WORD *)(v26 + 6) = v22.i16[2];
  *(unsigned char *)uint64_t v27 = v10.i8[6];
  *(_DWORD *)(v27 + 1) = v12.i32[1];
  *(_WORD *)(v27 + 5) = v22.i16[2];
  *(unsigned char *)(v27 + 7) = v22.i8[6];
  *(void *)(result + 8 * a2) = v22.i64[0];
  return result;
}

uint64_t *sub_1BBB5B240(uint64_t *result, int a2, uint64_t a3, unsigned char *a4)
{
  int v4 = a4[1];
  if (*a4)
  {
    if (a4[1])
    {
      uint64_t v5 = 0;
      int v6 = 0;
      uint64_t v7 = -2;
      do
        v6 += *(unsigned __int8 *)(a3 + v7--) + *(unsigned __int8 *)(a3 + v5++);
      while (v5 != 8);
      int v8 = 8;
      do
      {
        *uint64_t result = 0x101010101010101 * ((uint64_t)(v6 + 8) >> 4);
        uint64_t result = (uint64_t *)((char *)result + a2);
        --v8;
      }
      while (v8);
    }
    else
    {
      for (uint64_t i = -2; i != -10; --i)
        v4 += *(unsigned __int8 *)(a3 + i);
      uint64_t v14 = 0x101010101010101 * ((v4 + 4) >> 3);
      int v15 = 8;
      do
      {
        *uint64_t result = v14;
        uint64_t result = (uint64_t *)((char *)result + a2);
        --v15;
      }
      while (v15);
    }
  }
  else if (a4[1])
  {
    uint64_t v9 = 0;
    int v10 = 0;
    do
      v10 += *(unsigned __int8 *)(a3 + v9++);
    while (v9 != 8);
    uint64_t v11 = 0x101010101010101 * ((v10 + 4) >> 3);
    int v12 = 8;
    do
    {
      *uint64_t result = v11;
      uint64_t result = (uint64_t *)((char *)result + a2);
      --v12;
    }
    while (v12);
  }
  else
  {
    int v16 = 8;
    do
    {
      *uint64_t result = 0x8080808080808080;
      uint64_t result = (uint64_t *)((char *)result + a2);
      --v16;
    }
    while (v16);
  }
  return result;
}

void *sub_1BBB5B358(void *result, int a2, uint64_t a3)
{
  for (uint64_t i = -2; i != -10; --i)
  {
    *uint64_t result = 0x101010101010101 * *(unsigned __int8 *)(a3 + i);
    uint64_t result = (void *)((char *)result + a2);
  }
  return result;
}

void *sub_1BBB5B384(void *result, int a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  int v4 = 8;
  do
  {
    *uint64_t result = v3;
    uint64_t result = (void *)((char *)result + a2);
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_1BBB5B3A4(int a1, int a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int8 *)&unk_1BBB93EA8 + (4 * a1);
  unint64_t v4 = *v3;
  unint64_t v5 = v3[16];
  uint64_t v6 = *(void *)(a3 + 8 * (~(2 * (_BYTE)v5) & 2));
  uint64_t v7 = *(void *)(a3 + 8 * ((v4 & 1) == 0));
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 2;
  }
  unsigned int v9 = *(unsigned __int8 *)(v7 + ((v4 >> 1) & 0xF));
  int v10 = *(unsigned __int8 *)(v6 + ((v5 >> 1) & 0xF));
  if (a2 & ((v10 | v9) >> 5)) {
    return 2;
  }
  else {
    return (((v9 & 0xF) - (v10 & 0xF)) & ((int)((v9 & 0xF) - (v10 & 0xF)) >> 31)) + (v10 & 0xF);
  }
}

uint64_t sub_1BBB5B420(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int8 *)&unk_1BBB93EA8 + a1;
  unint64_t v4 = *v3;
  unint64_t v5 = v3[16];
  uint64_t v6 = *(void *)(a3 + 8 * (~(2 * (_BYTE)v5) & 2));
  uint64_t v7 = *(void *)(a3 + 8 * ((v4 & 1) == 0));
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 2;
  }
  unsigned int v9 = *(unsigned __int8 *)(v7 + ((v4 >> 1) & 0xF));
  int v10 = *(unsigned __int8 *)(v6 + ((v5 >> 1) & 0xF));
  if (a2 & ((v10 | v9) >> 5)) {
    return 2;
  }
  else {
    return (((v9 & 0xF) - (v10 & 0xF)) & ((int)((v9 & 0xF) - (v10 & 0xF)) >> 31)) + (v10 & 0xF);
  }
}

double sub_1BBB5B498(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  int v12 = sub_1BBB5B524(a2, a4, 0x10u);
  int v13 = sub_1BBB5B524(a3, a5, 8u);
  double result = (double)a1 * a7;
  *(_DWORD *)a6 = a1;
  *(_DWORD *)(a6 + 4) = v13 + v12;
  *(_DWORD *)(a6 + 8) = v13 + v12 + result;
  *(double *)(a6 + 16) = a7;
  return result;
}

uint64_t sub_1BBB5B524(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  uint64_t v8 = a3;
  do
  {
    unsigned int v9 = (unsigned __int8 *)(a1 + (v3 & 0xFFFFFFF0));
    int v10 = (unsigned __int8 *)(a2 + (v3 & 0xFFFFFFF0));
    int v11 = *v9 - *v10;
    int v12 = v9[1] - v10[1];
    int v13 = v9[2] - v10[2];
    int v14 = v9[3] - v10[3];
    int v15 = v9[4] - v10[4];
    int v16 = v9[5] - v10[5];
    int v17 = v9[6] - v10[6];
    int v18 = v9[7] - v10[7];
    int v19 = v9[8] - v10[8];
    int v20 = v9[9] - v10[9];
    int v21 = v9[10] - v10[10];
    int v22 = v9[11] - v10[11];
    int v23 = v9[12] - v10[12];
    int v24 = v9[13] - v10[13];
    int v25 = v9[14] - v10[14];
    LODWORD(v10) = v9[15] - v10[15];
    v7 += v11 * v11 + v12 * v12 + v19 * v19 + v20 * v20;
    v6 += v13 * v13 + v14 * v14 + v21 * v21 + v22 * v22;
    v5 += v15 * v15 + v16 * v16 + v23 * v23 + v24 * v24;
    v4 += v17 * v17 + v18 * v18 + v25 * v25 + v10 * v10;
    v3 += 16;
    --v8;
  }
  while (v8);
  unint64_t v26 = v6 + (uint64_t)v7 + v5 + v4;
  unsigned int v27 = v6 + v7 + v5 + v4;
  if (HIDWORD(v26)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v27;
  }
}

__n128 sub_1BBB5B6A0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = byte_1BBB93FD7[a1] + 16 * byte_1BBB93FE7[a1];
  int v4 = (_DWORD *)(a3 + 2 * v3);
  v4[72] = *(_DWORD *)(a2 + 16);
  v4[73] = *(_DWORD *)(a2 + 20);
  v4[80] = *(_DWORD *)(a2 + 24);
  v4[81] = *(_DWORD *)(a2 + 28);
  v4[88] = *(_DWORD *)(a2 + 32);
  v4[89] = *(_DWORD *)(a2 + 36);
  v4[96] = *(_DWORD *)(a2 + 40);
  v4[97] = *(_DWORD *)(a2 + 44);
  int v5 = (_DWORD *)(a3 + v3);
  v5[8] = *(_DWORD *)a2;
  v5[12] = *(_DWORD *)(a2 + 4);
  v5[16] = *(_DWORD *)(a2 + 8);
  v5[20] = *(_DWORD *)(a2 + 12);
  v4[200] = *(_DWORD *)(a2 + 48);
  v4[201] = *(_DWORD *)(a2 + 52);
  v4[208] = *(_DWORD *)(a2 + 56);
  v4[209] = *(_DWORD *)(a2 + 60);
  v4[216] = *(_DWORD *)(a2 + 64);
  v4[217] = *(_DWORD *)(a2 + 68);
  v4[224] = *(_DWORD *)(a2 + 72);
  v4[225] = *(_DWORD *)(a2 + 76);
  uint64_t v6 = a3 + 32 * a1;
  __n128 result = *(__n128 *)(a2 + 80);
  *(_OWORD *)(v6 + 1360) = *(_OWORD *)(a2 + 96);
  *(__n128 *)(v6 + 1344) = result;
  *(unsigned char *)(a3 + a1) = *(_DWORD *)(a2 + 116);
  return result;
}

uint64_t sub_1BBB5B784(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 4);
  uint64_t v4 = *(void *)(result + 216);
  uint64_t v5 = *(unsigned int *)(v4 + 232);
  uint64_t v6 = (16 * *(_DWORD *)result);
  int v7 = (unsigned char *)((16 * v3 * v5) + v6 + *(void *)(v4 + 128) + 15);
  uint64_t v8 = (unsigned char *)(a2 + 15);
  unint64_t v9 = -2;
  do
  {
    *(v7 - 15) = *(v8 - 15);
    *(v7 - 14) = *(v8 - 14);
    *(v7 - 13) = *(v8 - 13);
    *(v7 - 12) = *(v8 - 12);
    *(v7 - 11) = *(v8 - 11);
    *(v7 - 10) = *(v8 - 10);
    *(v7 - 9) = *(v8 - 9);
    *(v7 - 8) = *(v8 - 8);
    *(v7 - 7) = *(v8 - 7);
    *(v7 - 6) = *(v8 - 6);
    *(v7 - 5) = *(v8 - 5);
    *(v7 - 4) = *(v8 - 4);
    *(v7 - 3) = *(v8 - 3);
    *(v7 - 2) = *(v8 - 2);
    *(v7 - 1) = *(v8 - 1);
    *int v7 = *v8;
    int v10 = &v7[v5];
    *(v10 - 15) = v8[1];
    *(v10 - 14) = v8[2];
    *(v10 - 13) = v8[3];
    *(v10 - 12) = v8[4];
    *(v10 - 11) = v8[5];
    *(v10 - 10) = v8[6];
    *(v10 - 9) = v8[7];
    *(v10 - 8) = v8[8];
    *(v10 - 7) = v8[9];
    *(v10 - 6) = v8[10];
    *(v10 - 5) = v8[11];
    *(v10 - 4) = v8[12];
    *(v10 - 3) = v8[13];
    *(v10 - 2) = v8[14];
    *(v10 - 1) = v8[15];
    unsigned char *v10 = v8[16];
    v9 += 2;
    v7 += (2 * v5);
    v8 += 32;
  }
  while (v9 < 0xE);
  uint64_t v11 = *(unsigned int *)(v4 + 248);
  int v12 = (unsigned char *)((8 * v3 * v11) + v6 + *(void *)(v4 + 136) + 15);
  int v13 = (unsigned char *)(a3 + 15);
  unint64_t v14 = -2;
  do
  {
    *(v12 - 15) = *(v13 - 15);
    *(v12 - 14) = *(v13 - 14);
    *(v12 - 13) = *(v13 - 13);
    *(v12 - 12) = *(v13 - 12);
    *(v12 - 11) = *(v13 - 11);
    *(v12 - 10) = *(v13 - 10);
    *(v12 - 9) = *(v13 - 9);
    *(v12 - 8) = *(v13 - 8);
    *(v12 - 7) = *(v13 - 7);
    *(v12 - 6) = *(v13 - 6);
    *(v12 - 5) = *(v13 - 5);
    *(v12 - 4) = *(v13 - 4);
    *(v12 - 3) = *(v13 - 3);
    *(v12 - 2) = *(v13 - 2);
    *(v12 - 1) = *(v13 - 1);
    *int v12 = *v13;
    int v15 = &v12[v11];
    *(v15 - 15) = v13[1];
    *(v15 - 14) = v13[2];
    *(v15 - 13) = v13[3];
    *(v15 - 12) = v13[4];
    *(v15 - 11) = v13[5];
    *(v15 - 10) = v13[6];
    *(v15 - 9) = v13[7];
    *(v15 - 8) = v13[8];
    *(v15 - 7) = v13[9];
    *(v15 - 6) = v13[10];
    *(v15 - 5) = v13[11];
    *(v15 - 4) = v13[12];
    *(v15 - 3) = v13[13];
    *(v15 - 2) = v13[14];
    *(v15 - 1) = v13[15];
    *int v15 = v13[16];
    v14 += 2;
    v12 += (2 * v11);
    v13 += 32;
  }
  while (v14 < 6);
  return result;
}

double sub_1BBB5BA14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  *(_WORD *)((char *)v73 + 1) = 8224;
  *(void *)&long long v71 = 0x8000800080008000;
  *((void *)&v71 + 1) = -1;
  *(void *)&long long v72 = -1;
  *((void *)&v72 + 1) = -1;
  int v4 = *(__int16 *)(a1 + 348);
  int v5 = *(__int16 *)(a1 + 350);
  uint64_t v79 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  int v61 = 16 * v5;
  int v62 = 16 * v4;
  int32x4_t v63 = vdupq_n_s32(16 * v5);
  int32x4_t v64 = vdupq_n_s32(16 * v4);
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = *(void *)(a1 + 8 * v3 + 56);
    if (!v8) {
      goto LABEL_53;
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v8 + 488);
    int v12 = *(_DWORD *)(v8 + 228);
    unsigned int v11 = *(_DWORD *)(v8 + 232);
    unsigned int v66 = v11;
    uint64_t v67 = *(void *)(a1 + 336);
    char v68 = *(unsigned char *)(a1 + v3 + 34);
    char v69 = *(unsigned char *)(a1 + v3 + 36);
    char v70 = *(unsigned char *)(a1 + 38);
    int v13 = *(_DWORD *)(v8 + 196);
    unint64_t v14 = &qword_1E9F830F8;
    if (*(unsigned char *)(a1 + v3 + 32))
    {
      int v15 = &qword_1E9F83018;
    }
    else
    {
      unint64_t v14 = &qword_1E9F82FA8;
      int v15 = &qword_1E9F82EC8;
    }
    if (*(unsigned char *)(a1 + v3 + 32)) {
      int v16 = &qword_1E9F83180;
    }
    else {
      int v16 = &qword_1E9F83178;
    }
    int v17 = &qword_1E9F83050;
    if (!*(unsigned char *)(a1 + v3 + 32)) {
      int v17 = &qword_1E9F82F00;
    }
    *(void *)a1 = *v14;
    int v18 = (void (*)(long long *, unsigned char *, unsigned char *))*v17;
    int v19 = (void (*)(long long *, unsigned char *, unsigned char *))*v15;
    int v20 = (void (*)(void))*v16;
    *(void *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 8) = v20;
    v80[0] = 0;
    unsigned int v21 = 1;
    do
    {
      while (1)
      {
        uint64_t v22 = *(void *)(a1 + 8 * v9 + 360);
        if (!v22 || *(unsigned char *)(v22 + v3 + 33)) {
          goto LABEL_14;
        }
        unsigned int v23 = *(_DWORD *)(v22 + 4 * v3) & 0xFFFCFFFC;
        v80[v21] = v23;
        if (v21) {
          break;
        }
        ++v9;
        unsigned int v21 = 1;
        if (v9 == 4) {
          goto LABEL_24;
        }
      }
      uint64_t v24 = v21;
      int v25 = v80;
      while (1)
      {
        int v26 = *v25++;
        if (v26 == v23) {
          break;
        }
        if (!--v24)
        {
          ++v21;
          break;
        }
      }
LABEL_14:
      ++v9;
    }
    while (v9 != 4);
    if (v21 >= 5) {
      goto LABEL_31;
    }
LABEL_24:
    if (*(unsigned char *)(a1 + 52) == 1)
    {
      unsigned int v27 = *(_DWORD *)(a1 + 48) & 0xFFFCFFFC;
      v80[v21] = v27;
      if (v21)
      {
        uint64_t v28 = v21;
        unsigned int v29 = v80;
        while (1)
        {
          int v30 = *v29++;
          if (v30 == v27) {
            break;
          }
          if (!--v28)
          {
            ++v21;
            break;
          }
        }
      }
      else
      {
        unsigned int v21 = 1;
      }
    }
LABEL_31:
    signed int v31 = (__int16)(v12 + 2);
    signed int v32 = (__int16)(v13 + 2);
    int32x4_t v84 = (int32x4_t)vld2_s16((const __int16 *)v80);
    int32x4_t v33 = vaddw_s16(v64, vshr_n_s16(*(int16x4_t *)v84.i8, 2uLL));
    v34.i64[0] = 0x1200000012;
    v34.i64[1] = 0x1200000012;
    int8x8_t v35 = (int8x8_t)vmovn_s32(vcgtq_s32(v34, v33));
    int32x4_t v84 = vaddw_s16(v63, vshr_n_s16((int16x4_t)v84.u64[1], 2uLL));
    *(int32x4_t *)((char *)&v84 + 8) = vcgtq_s32(v34, v84);
    uint64_t v36 = *(void *)(v10 + 72);
    int8x16_t v37 = vbicq_s8((int8x16_t)vshrq_n_s32(vshlq_n_s32(vminq_s32(v84, vdupq_n_s32(v32)), 0x10uLL), 0x10uLL), *(int8x16_t *)((char *)&v84 + 8));
    v84.i64[1] &= 0xFFFFFFEDFFFFFFEDLL;
    v38 &= 0xFFFFFFEDFFFFFFEDLL;
    int32x4_t v39 = vmulq_s32(vdupq_n_s32(v11), (int32x4_t)vorrq_s8(*(int8x16_t *)((char *)&v84 + 8), v37));
    int8x8_t v40 = vorr_s8((int8x8_t)(*(void *)&v35 & 0xFFEDFFEDFFEDFFEDLL), vbic_s8((int8x8_t)vmovn_s32(vminq_s32(v33, vdupq_n_s32(v31))), v35));
    *(void *)&long long v77 = v36 + v39.i32[0] + v40.i16[0];
    *((void *)&v77 + 1) = v36 + v39.i32[1] + v40.i16[1];
    *(void *)&long long v78 = v36 + v39.i32[2] + v40.i16[2];
    *((void *)&v78 + 1) = v36 + v39.i32[3] + v40.i16[3];
    uint64_t v41 = v21;
    unsigned int v42 = 0xFFFF;
    unint64_t v43 = 0xFFFFLL;
    switch(v21)
    {
      case 0u:
        goto LABEL_52;
      case 1u:
        v20();
        goto LABEL_48;
      case 2u:
        v20();
        (*(void (**)(void, unsigned char *, unsigned char *))(a1 + 8))(*((void *)&v77 + 1), v65, v75);
        goto LABEL_48;
      case 3u:
        v19(&v77, v65, v74);
        goto LABEL_48;
      case 4u:
        v18(&v77, v65, v74);
        goto LABEL_48;
      case 5u:
        int v44 = v62 + (v81 >> 2);
        if (v44 >= v31) {
          __int16 v45 = v31;
        }
        else {
          __int16 v45 = v62 + (v81 >> 2);
        }
        int v46 = v61 + (v82 >> 2);
        if (v46 >= v32) {
          __int16 v47 = v32;
        }
        else {
          __int16 v47 = v61 + (v82 >> 2);
        }
        if (v46 >= -19) {
          int v48 = v47;
        }
        else {
          int v48 = -19;
        }
        uint64_t v49 = v36 + (int)(v48 * v11);
        BOOL v50 = v44 < -19;
        uint64_t v51 = -19;
        if (!v50) {
          uint64_t v51 = v45;
        }
        uint64_t v79 = v49 + v51;
        v18(&v77, v65, v74);
        (*(void (**)(uint64_t, unsigned char *, uint64_t *))(a1 + 8))(v79, v65, &v76);
        goto LABEL_48;
      default:
LABEL_48:
        unsigned int v21 = 0;
        unint64_t v43 = 0xFFFFLL;
        int v52 = v80;
        __int16 v53 = (unsigned __int16 *)v74;
        unsigned int v42 = 0xFFFF;
        do
        {
          unsigned int v55 = *v53++;
          unint64_t v54 = v55;
          if (v55 < v43)
          {
            unsigned int v21 = *v52;
            unint64_t v43 = v54;
            unsigned int v42 = v54;
          }
          ++v52;
          --v41;
        }
        while (v41);
LABEL_52:
        *((unsigned char *)v73 + v3 + 1) = 0;
        *((_DWORD *)&v71 + v3) = v21;
        *((void *)&v71 + v3 + 1) = v42 | (v43 << 32);
        break;
    }
LABEL_53:
    char v6 = 0;
    uint64_t v3 = 1;
  }
  while ((v7 & 1) != 0);
  if (BYTE2(v73[0]) == 32) {
    char v56 = 4;
  }
  else {
    char v56 = 6;
  }
  if (BYTE1(v73[0]) == 32) {
    char v57 = 5;
  }
  else {
    char v57 = v56;
  }
  LOBYTE(v73[0]) = v57;
  double result = *(double *)&v71;
  long long v59 = v72;
  *(_OWORD *)a2 = v71;
  *(_OWORD *)(a2 + 16) = v59;
  *(_DWORD *)(a2 + 32) = v73[0];
  return result;
}

uint64_t sub_1BBB5BF08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = 0;
  uint64_t v272 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a3 + 32) = 0x2000;
  *(unsigned char *)(a3 + 34) = 32;
  *(void *)a3 = 0x8000800080008000;
  *(void *)(a3 + 8) = -1;
  *(void *)(a3 + 16) = -1;
  *(void *)(a3 + 24) = -1;
  uint64_t v252 = -1;
  uint64_t v253 = -1;
  __int16 v247 = *(_WORD *)((char *)a2 + 33);
  uint64_t v251 = *a2;
  unint64_t v6 = (unint64_t)&v247;
  v250[0] = *(_OWORD *)(a2 + 1);
  char v7 = 1;
  uint64_t v229 = a1;
  do
  {
    char v8 = v7;
    if (!*((unsigned char *)&v247 + v5))
    {
      uint64_t v9 = *(void *)(a1 + 8 * v5 + 56);
      int v10 = *((_DWORD *)&v251 + v5);
      unsigned int v11 = *((unsigned __int16 *)v250 + 4 * v5 + 2);
      if (v11 >= 0x4B1) {
        unsigned int v12 = 5;
      }
      else {
        unsigned int v12 = 3;
      }
      *(_DWORD *)(a1 + 404) = v12;
      *(_WORD *)(a1 + 396) = v11;
      *(_WORD *)(a1 + 398) = 0;
      *(_DWORD *)(a1 + 392) = v11;
      int v13 = v10 & 0xFFFCFFFC;
      *(_DWORD *)(a1 + 400) = v10 & 0xFFFCFFFC;
      int v232 = *(_DWORD *)(a1 + 352);
      int v14 = *(__int16 *)(a1 + 348);
      int v15 = *(__int16 *)(a1 + 350);
      int v16 = (__int16)(v10 & 0xFFFC);
      if (v16 < 0) {
        int v16 = -v16;
      }
      int v17 = *(_DWORD *)(a1 + 44);
      int v18 = v13 >> 16;
      if (v13 >> 16 < 0) {
        int v18 = -v18;
      }
      if ((1 << v12) + v16 <= v17 && (1 << v12) + v18 <= v17) {
        goto LABEL_24;
      }
      do
        BOOL v21 = (1 << --v12) + v16 > v17 || (1 << v12) + v18 > v17;
      while (v12 >= 3 && v21);
      *(_DWORD *)(a1 + 404) = v12;
      if (!v21)
      {
LABEL_24:
        char v210 = v8;
        unsigned int v245 = 0;
        unsigned int v23 = HIWORD(v13);
        uint64_t v228 = *(void *)(v9 + 488);
        signed int v267 = *(_DWORD *)(v9 + 232);
        uint64_t v268 = *(void *)(a1 + 336);
        long long v264 = 0u;
        long long v265 = 0u;
        long long v262 = 0u;
        long long v263 = 0u;
        uint64_t v211 = v5;
        char v269 = *(unsigned char *)(a1 + v5 + 34);
        char v270 = *(unsigned char *)(a1 + v5 + 36);
        int v213 = 16 * v14;
        __int16 v24 = *(_WORD *)(v9 + 228);
        __int16 v25 = *(_WORD *)(v9 + 196);
        int v212 = 16 * v15;
        char v271 = *(unsigned char *)(a1 + 38);
        uint64_t v216 = 2 * v267;
        uint64_t v217 = v267;
        int v230 = v10 >> 16;
        int v231 = (__int16)v10;
        signed int v214 = (__int16)(v25 + 2);
        signed int v215 = (__int16)(v24 + 2);
        int32x4_t v222 = vdupq_n_s32(v214);
        int32x4_t v223 = vdupq_n_s32(v215);
        unsigned int v26 = v10 & 0xFFFCFFFC;
        unsigned int v243 = v11;
        int32x4_t v221 = vdupq_n_s32(v267);
        do
        {
          while (1)
          {
            uint64_t v27 = 0;
            unsigned int v233 = v12 - 2;
            unsigned int v219 = v213 + ((__int16)v26 >> 2);
            int32x4_t v226 = vdupq_n_s32(v219);
            uint32x4_t v227 = (uint32x4_t)vdupq_n_s32(v12 - 2);
            unsigned int v218 = v212 + ((__int16)v23 >> 2);
            int32x4_t v225 = vdupq_n_s32(v218);
            unint64_t v28 = 4;
            unsigned int v29 = v26;
            unsigned int v30 = v23;
            char v224 = v12;
            do
            {
              signed int v31 = (int16x4_t *)((char *)&unk_1BBB94834 + 2 * v27);
              unsigned int v32 = v26 + (v31->u16[0] << v12);
              int32x4_t v33 = (int16x4_t *)((char *)&unk_1BBB94844 + 2 * v27);
              unsigned int v34 = v23 + (v33->u16[0] << v12);
              uint64_t v35 = (2 * v27) | 2;
              unsigned int v36 = v26 + (*(unsigned __int16 *)((char *)&unk_1BBB94834 + v35) << v12);
              unsigned int v242 = v23 + (*(unsigned __int16 *)((char *)&unk_1BBB94844 + v35) << v12);
              uint64_t v37 = (2 * v27) | 4;
              int v38 = *(unsigned __int16 *)((char *)&unk_1BBB94834 + v37) << v12;
              unsigned int v39 = v26 + v38;
              unsigned int v241 = v23 + (*(unsigned __int16 *)((char *)&unk_1BBB94844 + v37) << v12);
              uint64_t v40 = (2 * v27) | 6;
              int v41 = *(unsigned __int16 *)((char *)&unk_1BBB94834 + v40) << v12;
              unsigned int v42 = v26 + v41;
              unsigned int v240 = v23 + (*(unsigned __int16 *)((char *)&unk_1BBB94844 + v40) << v12);
              if (v233)
              {
                int32x4_t v43 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmovl_s16(*v31), v227), v226);
                v44.i64[0] = 0x1200000012;
                v44.i64[1] = 0x1200000012;
                int8x8_t v45 = (int8x8_t)vmovn_s32(vcgtq_s32(v44, v43));
                int32x4_t v46 = vminq_s32(v43, v223);
                *(int8x8_t *)v46.i8 = vorr_s8((int8x8_t)(*(void *)&v45 & 0xFFEDFFEDFFEDFFEDLL), vbic_s8((int8x8_t)vmovn_s32(v46), v45));
                int32x4_t v47 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmovl_s16(*v33), v227), v225);
                int8x8_t v48 = (int8x8_t)vmovn_s32(vcgtq_s32(v44, v47));
                int32x4_t v49 = vminq_s32(v47, v222);
                *(int8x8_t *)v49.i8 = vorr_s8((int8x8_t)(*(void *)&v48 & 0xFFEDFFEDFFEDFFEDLL), vbic_s8((int8x8_t)vmovn_s32(v49), v48));
                int16x8_t v50 = vzip1q_s16((int16x8_t)v46, (int16x8_t)v49);
                uint64_t v51 = *(void *)(v228 + 72);
                int32x4_t v52 = vmulq_s32(v221, vmovl_s16(*(int16x4_t *)v49.i8));
                *(void *)&long long v262 = v51 + v52.i32[0] + v46.i16[0];
                *((void *)&v262 + 1) = v51 + v52.i32[1] + v46.i16[1];
                int16x8_t v248 = v50;
                *(void *)&long long v263 = v51 + v52.i32[2] + v46.i16[2];
                *((void *)&v263 + 1) = v51 + v52.i32[3] + v46.i16[3];
                uint64_t v236 = v27;
                unsigned int v238 = v34;
                unsigned int v53 = v11;
                unsigned int v54 = v36;
                unsigned int v12 = v26 + v41;
                (*(void (**)(long long *, unsigned char *, unsigned __int16 *, unint64_t))(v229 + 24))(&v262, v266, &v255, v6);
                unsigned int v42 = v12;
                unsigned int v36 = v54;
                unsigned int v11 = v53;
                LOBYTE(v12) = v224;
                uint64_t v27 = v236;
                unsigned int v34 = v238;
                unsigned int v55 = v255;
                char v57 = v258;
                char v56 = v256;
                int v58 = v257;
              }
              else if (v27)
              {
                unsigned int v55 = *(unsigned __int16 *)&v260[4];
                char v56 = v257;
                char v57 = v260;
                int v58 = v259;
              }
              else
              {
                unsigned int v239 = v23 + (v33->u16[0] << v12);
                unsigned int v220 = v26 + v38;
                unsigned int v234 = v26 + v41;
                unsigned int v235 = v36;
                unsigned int v237 = v11;
                for (uint64_t i = 0; i != 6; i += 2)
                {
                  int v60 = v219 + *(__int16 *)((char *)&unk_1BBB94860 + i * 2);
                  if (v60 >= v215) {
                    __int16 v61 = v215;
                  }
                  else {
                    __int16 v61 = v219 + *(_WORD *)((char *)&unk_1BBB94860 + i * 2);
                  }
                  if (v60 >= -19) {
                    __int16 v62 = v61;
                  }
                  else {
                    __int16 v62 = -19;
                  }
                  v248.i16[i] = v62;
                  int v63 = v218 + *(__int16 *)((char *)&unk_1BBB94860 + i * 2 + 2);
                  if (v63 >= v214) {
                    __int16 v64 = v214;
                  }
                  else {
                    __int16 v64 = v218 + *(_WORD *)((char *)&unk_1BBB94860 + i * 2 + 2);
                  }
                  if (v63 >= -19) {
                    __int16 v65 = v64;
                  }
                  else {
                    __int16 v65 = -19;
                  }
                  v248.i16[i + 1] = v65;
                }
                uint64_t v66 = *(void *)(v228 + 72);
                uint64_t v67 = v66 + (int)v217 * (uint64_t)v248.i16[1] + v248.i16[0];
                uint64_t v68 = v66 + (int)v217 * (uint64_t)v248.i16[3] + v248.i16[2];
                uint64_t v69 = v66 + (int)v217 * (uint64_t)v248.i16[5] + v248.i16[4];
                *(void *)&long long v263 = v67 + v217;
                *((void *)&v263 + 1) = v69 + v217;
                *(void *)&long long v264 = v67;
                *((void *)&v264 + 1) = v67 + v216;
                *(void *)&long long v262 = v68;
                *((void *)&v262 + 1) = v68 + v216;
                *(void *)&long long v265 = v69;
                *((void *)&v265 + 1) = v69 + v216;
                (*(void (**)(long long *, unsigned char *, unsigned __int16 *, unint64_t))v229)(&v262, v266, &v255, v6);
                unsigned int v55 = v255;
                int v58 = v258;
                char v56 = v256;
                char v57 = &v260[2];
                unsigned int v11 = v237;
                unsigned int v42 = v234;
                unsigned int v36 = v235;
                unsigned int v39 = v220;
                unsigned int v34 = v239;
              }
              unsigned int v70 = *(unsigned __int16 *)v56;
              long long v71 = (char *)&unk_1BBB94870 - v231;
              long long v72 = (char *)&unk_1BBB94870 - v230;
              int v73 = v71[(__int16)v32 + 2047] + v72[(__int16)v34 + 2047];
              int v74 = v71[(__int16)v36 + 2047] + v72[(__int16)v242 + 2047];
              int v75 = v71[(__int16)v39 + 2047] + v72[(__int16)v241 + 2047];
              LODWORD(v71) = v71[(__int16)v42 + 2047] + v72[(__int16)v240 + 2047];
              unsigned int v76 = v73 * v232;
              unsigned int v77 = v74 * v232;
              unsigned int v78 = v75 * v232;
              unsigned int v79 = v71 * v232;
              unsigned int v80 = v55 + HIWORD(v76);
              unsigned int v81 = v70 + HIWORD(v77);
              unsigned int v82 = *(unsigned __int16 *)v58;
              unsigned int v83 = *(unsigned __int16 *)v57;
              unsigned int v84 = v82 + HIWORD(v78);
              unsigned int v85 = v83 + HIWORD(v79);
              BOOL v86 = v80 >= v11;
              unsigned int v87 = HIWORD(v76);
              if (v80 < v11)
              {
                LODWORD(v6) = v32;
              }
              else
              {
                unsigned int v34 = v30;
                LODWORD(v6) = v29;
              }
              if (v80 >= v11) {
                unsigned int v80 = v11;
              }
              if (v86)
              {
                unsigned int v55 = v243;
                unsigned int v87 = v245;
              }
              BOOL v88 = v81 >= v80;
              unsigned int v89 = HIWORD(v77);
              if (v81 >= v80)
              {
                unint64_t v6 = v6;
              }
              else
              {
                unsigned int v34 = v242;
                unint64_t v6 = v36;
              }
              if (v81 < v80) {
                unsigned int v80 = v81;
              }
              if (v88)
              {
                unsigned int v90 = v87;
              }
              else
              {
                unsigned int v55 = v70;
                unsigned int v90 = v89;
              }
              BOOL v91 = v84 >= v80;
              unsigned int v92 = HIWORD(v78);
              if (v84 < v80) {
                unsigned int v93 = v241;
              }
              else {
                unsigned int v93 = v34;
              }
              if (v84 < v80) {
                unsigned int v94 = v39;
              }
              else {
                unsigned int v94 = v6;
              }
              if (v84 < v80) {
                unsigned int v80 = v84;
              }
              if (v91)
              {
                unsigned int v95 = v90;
              }
              else
              {
                unsigned int v55 = v82;
                unsigned int v95 = v92;
              }
              if (v85 < v80) {
                unsigned int v30 = v240;
              }
              else {
                unsigned int v30 = v93;
              }
              if (v85 < v80) {
                unsigned int v29 = v42;
              }
              else {
                unsigned int v29 = v94;
              }
              if (v85 < v80) {
                unsigned int v11 = v83 + HIWORD(v79);
              }
              else {
                unsigned int v11 = v80;
              }
              if (v85 < v80) {
                unsigned int v55 = v83;
              }
              unsigned int v243 = v55;
              if (v85 < v80) {
                unsigned int v96 = HIWORD(v79);
              }
              else {
                unsigned int v96 = v95;
              }
              unsigned int v245 = v96;
              v27 += 4;
              BOOL v86 = v28 >= 5;
              v28 += 4;
            }
            while (!v86);
            int v13 = (unsigned __int16)v29 | ((unsigned __int16)v30 << 16);
            a1 = v229;
            if (v13 == *(_DWORD *)(v229 + 400))
            {
              int v97 = *(_DWORD *)(v229 + 404);
              unsigned int v12 = v97 - 1;
              *(_DWORD *)(v229 + 404) = v97 - 1;
              if (v97 == 2) {
                goto LABEL_114;
              }
            }
            else
            {
              *(_DWORD *)(v229 + 392) = v11;
              *(_WORD *)(v229 + 396) = v243;
              *(_WORD *)(v229 + 398) = v245;
              *(_DWORD *)(v229 + 400) = v13;
              unsigned int v12 = *(_DWORD *)(v229 + 404);
            }
            int v98 = (__int16)v29;
            if ((v29 & 0x8000u) != 0) {
              int v98 = -(__int16)v29;
            }
            int v99 = *(_DWORD *)(v229 + 44);
            int v100 = (__int16)v30;
            if ((v30 & 0x8000u) != 0) {
              int v100 = -(__int16)v30;
            }
            BOOL v101 = (1 << v12) + v98 <= v99 && (1 << v12) + v100 <= v99;
            BOOL v102 = !v101;
            if (v12 >= 3 && v102) {
              break;
            }
            unsigned int v23 = v30;
            unsigned int v26 = v29;
            if (v102) {
              goto LABEL_114;
            }
          }
          do
            BOOL v104 = (1 << --v12) + v98 > v99 || (1 << v12) + v100 > v99;
          while (v12 >= 3 && v104);
          *(_DWORD *)(v229 + 404) = v12;
          unsigned int v23 = v30;
          unsigned int v26 = v29;
        }
        while (!v104);
LABEL_114:
        uint64_t v22 = *(void *)(v229 + 392);
        uint64_t v3 = a3;
        uint64_t v5 = v211;
        unint64_t v6 = (unint64_t)&v247;
        char v8 = v210;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 392);
      }
      *(unsigned char *)(v3 + v5 + 33) = 0;
      *(_DWORD *)(v3 + 4 * v5) = v13;
      *(void *)(v3 + 8 * v5 + 8) = v22;
      *(&v252 + v5) = v22;
      v254[v5] = v13;
    }
    char v7 = 0;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
  unsigned int v105 = v252;
  unsigned int v106 = WORD2(v252);
  unsigned int v107 = v253;
  unsigned int v108 = WORD2(v253);
  uint64_t result = *(void *)(a1 + 56);
  if (result && (uint64_t v110 = *(void *)(a1 + 64)) != 0)
  {
    int v246 = HIWORD(v252);
    int v244 = HIWORD(v253);
    uint64_t v111 = *(void *)(a1 + 336);
    int v112 = *(_DWORD *)(a1 + 348);
    v248.i32[0] = v254[0];
    int v249 = v254[1];
    int v113 = (__int16)v112;
    int v114 = v112 >> 16;
    int32x2_t v115 = v266;
    sub_1BBB547D4(result, v248.i16, (__int16)v112, v112 >> 16, 0, 0, 4112, (uint64_t)v266);
    int32x2_t v116 = &v262;
    int v117 = v113;
    uint64_t v3 = a3;
    uint64_t result = sub_1BBB547D4(v110, (__int16 *)&v249, v117, v114, 0, 0, 4112, (uint64_t)&v262);
    int v136 = 0;
    __int16 v137 = &v255;
    do
    {
      unint64_t v138 = 0;
      do
      {
        v118.i32[0] = *(_DWORD *)&v115[v138 * 2];
        int16x8_t v139 = (int16x8_t)vmovl_u8(v118);
        v119.i32[0] = *(_DWORD *)((char *)v116 + v138 * 2);
        uint16x4_t v119 = (uint16x4_t)vmovl_u8((uint8x8_t)v119).u64[0];
        *(uint16x4_t *)v139.i8 = vrhadd_u16(*(uint16x4_t *)v139.i8, v119);
        uint8x8_t v118 = (uint8x8_t)vmovn_s16(v139);
        *(_DWORD *)&v137[v138] = v118.i32[0];
        BOOL v86 = v138 >= 6;
        v138 += 2;
      }
      while (!v86);
      v115 += 16;
      ++v116;
      v137 += 8;
      ++v136;
    }
    while (v136 != 16);
    uint64_t v140 = 0;
    int32x4_t v141 = 0uLL;
    v142.i64[0] = 0xFF000000FFLL;
    v142.i64[1] = 0xFF000000FFLL;
    v143.i64[0] = 0xFFFFFFFFLL;
    v143.i64[1] = 0xFFFFFFFFLL;
    int32x4_t v144 = 0uLL;
    int32x4_t v145 = 0uLL;
    int32x4_t v146 = 0uLL;
    do
    {
      v120.i32[0] = *(_DWORD *)(v111 + v140);
      v121.i32[0] = *(_DWORD *)(v111 + v140 + 4);
      v122.i32[0] = *(_DWORD *)&v256[v140 - 2];
      v123.i32[0] = *(_DWORD *)&v257[v140];
      uint16x4_t v147 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v120.i8), (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v122.i8));
      uint16x4_t v148 = (uint16x4_t)vmovl_u8((uint8x8_t)v123).u64[0];
      v123.i32[0] = *(_DWORD *)(v111 + v140 + 8);
      v124.i32[0] = *(_DWORD *)(v111 + v140 + 12);
      uint16x4_t v149 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v121.i8), v148);
      v125.i32[0] = *(_DWORD *)&v259[v140];
      v148.i32[0] = *(_DWORD *)&v260[v140 + 2];
      uint16x4_t v150 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v125.i8).u64[0];
      uint16x4_t v151 = (uint16x4_t)vmovl_u8((uint8x8_t)v148).u64[0];
      uint16x4_t v152 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v123), v150);
      v126.i32[0] = *(_DWORD *)(v111 + v140 + 16);
      v150.i32[0] = *(_DWORD *)(v111 + v140 + 20);
      uint16x4_t v153 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v126.i8).u64[0];
      v126.i32[0] = *(_DWORD *)&v261[v140];
      v127.i32[0] = *(_DWORD *)&v261[v140 + 4];
      uint16x4_t v154 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v126.i8).u64[0];
      uint16x4_t v155 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v124.i8), v151);
      uint16x4_t v156 = vabd_u16(v153, v154);
      uint16x4_t v157 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v127.i8).u64[0];
      v154.i32[0] = *(_DWORD *)(v111 + v140 + 24);
      v127.i32[0] = *(_DWORD *)(v111 + v140 + 28);
      uint16x4_t v158 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v150), v157);
      uint16x4_t v159 = (uint16x4_t)vmovl_u8((uint8x8_t)v154).u64[0];
      v154.i32[0] = *(_DWORD *)&v261[v140 + 8];
      v128.i32[0] = *(_DWORD *)&v261[v140 + 12];
      uint16x4_t v160 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v127.i8).u64[0];
      uint16x4_t v161 = vabd_u16(v159, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v154));
      uint16x4_t v162 = (uint16x4_t)vmovl_u8((uint8x8_t)v128).u64[0];
      v128.i32[0] = *(_DWORD *)(v111 + v140 + 32);
      v129.i32[0] = *(_DWORD *)(v111 + v140 + 36);
      uint16x4_t v163 = vabd_u16(v160, v162);
      v130.i32[0] = *(_DWORD *)&v261[v140 + 16];
      v160.i32[0] = *(_DWORD *)&v261[v140 + 20];
      uint16x4_t v164 = (uint16x4_t)vmovl_u8((uint8x8_t)v130).u64[0];
      uint16x4_t v165 = (uint16x4_t)vmovl_u8((uint8x8_t)v160).u64[0];
      uint16x4_t v166 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v128), v164);
      v131.i32[0] = *(_DWORD *)(v111 + v140 + 40);
      v164.i32[0] = *(_DWORD *)(v111 + v140 + 44);
      uint16x4_t v167 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v131.i8).u64[0];
      v131.i32[0] = *(_DWORD *)&v261[v140 + 24];
      v132.i32[0] = *(_DWORD *)&v261[v140 + 28];
      uint16x4_t v168 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v131.i8).u64[0];
      uint16x4_t v129 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v129), v165);
      uint16x4_t v128 = vabd_u16(v167, v168);
      uint16x4_t v169 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v132.i8).u64[0];
      v168.i32[0] = *(_DWORD *)(v111 + v140 + 48);
      v132.i32[0] = *(_DWORD *)(v111 + v140 + 52);
      uint16x4_t v170 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v164), v169);
      uint16x4_t v171 = (uint16x4_t)vmovl_u8((uint8x8_t)v168).u64[0];
      v168.i32[0] = *(_DWORD *)&v261[v140 + 32];
      v133.i32[0] = *(_DWORD *)&v261[v140 + 36];
      uint16x4_t v172 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v132.i8).u64[0];
      uint16x4_t v173 = vabd_u16(v171, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v168));
      uint16x4_t v174 = (uint16x4_t)vmovl_u8((uint8x8_t)v133).u64[0];
      v133.i32[0] = *(_DWORD *)(v111 + v140 + 56);
      v134.i32[0] = *(_DWORD *)(v111 + v140 + 60);
      uint16x4_t v175 = vabd_u16(v172, v174);
      v135.i32[0] = *(_DWORD *)&v261[v140 + 40];
      v172.i32[0] = *(_DWORD *)&v261[v140 + 44];
      uint16x4_t v135 = (uint16x4_t)vmovl_u8((uint8x8_t)v135).u64[0];
      uint16x4_t v133 = vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v133), v135);
      v135.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v147), v142));
      unsigned int v176 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v149), v142));
      int v177 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v152), v142));
      uint32x2_t v178 = (uint32x2_t)__PAIR64__(v177, vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v155), v142)));
      unsigned int v179 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v156), v142));
      v161.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v161), v142));
      uint32x2_t v180 = (uint32x2_t)__PAIR64__(v161.u32[0], vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v163), v142)));
      v128.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v128), v142));
      uint32x2_t v130 = (uint32x2_t)__PAIR64__(v128.u32[0], vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v170), v142)));
      v149.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v173), v142));
      v147.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v175), v142));
      int32x4_t v122 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v133), v142);
      v122.i32[0] = vaddvq_s32(v122);
      v181.i64[0] = __PAIR64__(v177, v178.u32[0]);
      v181.i64[1] = __PAIR64__(v135.u32[0], v176);
      uint32x2_t v123 = (uint32x2_t)__PAIR64__(v122.u32[0], vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(vabd_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v134), (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v172))), v142)));
      v131.i64[0] = __PAIR64__(v161.u32[0], v180.u32[0]);
      v131.i64[1] = __PAIR64__(v179, vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v158), v142)));
      v182.i64[0] = v176;
      v182.i64[1] = v135.u32[0];
      uint64x2_t v183 = vaddw_high_u32(v182, (uint32x4_t)v146);
      v182.i64[0] = v131.u32[2];
      v182.i64[1] = v179;
      v132.i64[0] = __PAIR64__(v128.u32[0], v130.u32[0]);
      v132.i64[1] = __PAIR64__(vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v166), v142)), vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v129), v142)));
      int32x4_t v184 = (int32x4_t)vcgtq_u64(vaddw_high_u32(v182, (uint32x4_t)v145), v143);
      v129.i32[1] = v132.i32[3];
      v182.i64[0] = v132.u32[2];
      v182.i64[1] = v132.u32[3];
      int8x16_t v125 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(vaddl_u32(v180, *(uint32x2_t *)v145.i8), v143), v184);
      v127.i64[0] = __PAIR64__(v122.u32[0], v123.u32[0]);
      int32x4_t v126 = (int32x4_t)vcgtq_u64(vaddw_high_u32(v182, (uint32x4_t)v141), v143);
      v127.i64[1] = __PAIR64__(v149.u32[0], v147.u32[0]);
      int32x4_t v146 = (int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v181, v146), (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(vaddl_u32(v178, *(uint32x2_t *)v146.i8), v143), (int32x4_t)vcgtq_u64(v183, v143)));
      int8x16_t v124 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(vaddl_u32(v130, *(uint32x2_t *)v141.i8), v143), v126);
      int32x4_t v145 = (int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v131, v145), v125);
      v182.i64[0] = v147.u32[0];
      v182.i64[1] = v149.u32[0];
      int32x4_t v121 = (int32x4_t)vcgtq_u64(vaddl_u32(v123, *(uint32x2_t *)v144.i8), v143);
      int32x4_t v141 = (int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v132, v141), v124);
      int8x16_t v120 = (int8x16_t)vuzp1q_s32(v121, (int32x4_t)vcgtq_u64(vaddw_high_u32(v182, (uint32x4_t)v144), v143));
      v140 += 64;
      int32x4_t v144 = (int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v127, v144), v120);
    }
    while (v140 != 256);
    int32x4_t v185 = vaddq_s32(vaddq_s32(v141, v144), vaddq_s32(v145, v146));
    unsigned __int16 v186 = vaddvq_s32(v185);
    if (vaddlvq_u32((uint32x4_t)v185) >> 32) {
      unsigned __int16 v187 = -1;
    }
    else {
      unsigned __int16 v187 = v186;
    }
    uint64_t v188 = v187 + (unsigned __int16)(v244 + v246);
    *(void *)(a3 + 24) = ((unint64_t)(v244 + v246) << 48) | ((unint64_t)v187 << 32) | v188;
    a1 = v229;
  }
  else
  {
    unsigned __int16 v187 = -1;
    LODWORD(v188) = -1;
  }
  unsigned int v189 = 2 * v107;
  BOOL v191 = v105 != -1 && v105 <= v189;
  unsigned int v192 = *(_DWORD *)(a1 + 356);
  BOOL v193 = v192 > v106;
  unsigned int v194 = 2 * v105;
  BOOL v196 = v107 != -1 && v107 <= v194;
  BOOL v197 = v192 > v108;
  BOOL v201 = v188 != -1 && v188 <= v194 && v188 <= v189 && v192 > v187;
  int v203 = v191 && v193;
  BOOL v202 = !v191 || !v193;
  if (v191 && v193) {
    unsigned __int16 v204 = v106;
  }
  else {
    unsigned __int16 v204 = 0;
  }
  if (v202) {
    char v205 = 0;
  }
  else {
    char v205 = 4;
  }
  int v206 = v201 && v196 && v197;
  if (v196 && v197)
  {
    unsigned __int16 v204 = v108;
    char v205 = 5;
  }
  if ((v203 & v206) != 0)
  {
    char v207 = 6;
  }
  else
  {
    unsigned __int16 v187 = v204;
    char v207 = v205;
  }
  if (v192 >= v187) {
    char v208 = v207;
  }
  else {
    char v208 = 0;
  }
  *(unsigned char *)(v3 + 32) = v208;
  return result;
}

void sub_1BBB5CBF0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5, int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, unsigned __int8 a12)
{
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t v16 = a1;
  int v17 = a10;
  *(uint64_t *)((char *)&v430[4] + 4) = *MEMORY[0x1E4F143B8];
  int v18 = (unsigned __int16 *)(a1 + 19112);
  uint64_t v361 = (unsigned __int8 *)(a1 + 4912);
  if (a10 == 2) {
    int v17 = *v361 == 2;
  }
  int v409 = v17;
  unint64_t v19 = *(unsigned __int8 *)(a1 + 19136);
  int v404 = *v18;
  int v401 = *(unsigned __int16 *)(a1 + 19114);
  uint64_t v371 = *(unsigned __int8 *)(a1 + 19137);
  uint64_t v20 = *a4;
  unsigned int v21 = a4[1];
  unsigned int v354 = *(unsigned __int8 *)(a1 + 19138);
  unsigned int v362 = *(unsigned __int8 *)(a1 + 19139);
  uint64_t v22 = *((void *)a4 + 15);
  memset(v415, 0, sizeof(v415));
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v25 = sub_1BBB0A818(a3, v415, 1, 0);
    uint64_t v15 = a2;
    uint64_t v14 = a3;
    uint64_t v16 = a1;
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = (uint64_t *)v415;
      do
      {
        uint64_t v28 = *v27++;
        *(_DWORD *)(v28 + 19116) = 0;
        --v26;
      }
      while (v26);
    }
  }
  int v29 = a12;
  unint64_t v359 = v19;
  if (v14)
  {
    if (a12) {
      goto LABEL_9;
    }
    int v30 = 0;
    if (*(unsigned char *)(v16 + 24) || !v409) {
      goto LABEL_10;
    }
    if (v361[2] <= 3u) {
LABEL_9:
    }
      int v30 = 1;
    else {
      int v30 = 0;
    }
LABEL_10:
    if (*((unsigned char *)v18 + 16) == 1)
    {
      unsigned int v31 = sub_1BBB0A89C(v14, v415, v30);
      int v32 = v31;
      if (v31)
      {
        uint64_t v33 = v31;
        unsigned int v34 = (uint64_t *)v415;
        uint64_t v35 = v31;
        do
        {
          uint64_t v36 = *v34++;
          *(unsigned char *)(v36 + 23) = -1;
          --v35;
        }
        while (v35);
        uint64_t v37 = v14;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = (uint64_t *)v415;
        do
        {
          uint64_t v41 = *v40;
          if (*v40)
          {
            uint64_t v42 = v39;
            if (!*(unsigned char *)(v41 + 14))
            {
              unsigned int v43 = *(_DWORD *)(v41 + 1276);
              if (v43 >= v38 && v43 < *(_DWORD *)(a1 + 1276))
              {
                uint64_t v42 = *v40;
                unsigned int v38 = *(_DWORD *)(v41 + 1276);
              }
            }
            uint64_t v39 = v42;
          }
          ++v40;
          --v33;
        }
        while (v33);
      }
      else
      {
        uint64_t v37 = v14;
        uint64_t v39 = 0;
      }
      uint64_t v47 = v39;
      int32x4_t v44 = sub_1BBB0AABC(v37);
      if (v44 && *((unsigned __int16 *)v44 + 9556) != *v18 && *((unsigned __int16 *)v44 + 9557) != v18[1]) {
        int32x4_t v44 = 0;
      }
    }
    else
    {
      if (a7)
      {
        uint64_t v37 = v14;
        unsigned int v45 = sub_1BBB0AB04(v14, v415, v16, v30, *((unsigned __int8 *)v18 + 266));
        int v32 = v45;
        if (v45)
        {
          unsigned int v46 = 0;
          uint64_t v47 = 0;
          int8x8_t v48 = (uint64_t *)v415;
          uint64_t v49 = v45;
          do
          {
            uint64_t v50 = *v48;
            if (*v48)
            {
              if (!*(unsigned char *)(v50 + 14))
              {
                unsigned int v51 = *(_DWORD *)(v50 + 1276);
                if (v51 >= v46 && v51 < *(_DWORD *)(a1 + 1276))
                {
                  uint64_t v47 = *v48;
                  unsigned int v46 = *(_DWORD *)(v50 + 1276);
                }
              }
            }
            ++v48;
            --v49;
          }
          while (v49);
        }
        else
        {
          uint64_t v47 = 0;
        }
      }
      else
      {
        uint64_t v37 = v14;
        int v32 = sub_1BBB0A818(v14, v415, 1, (unsigned char *)v16);
        uint64_t v47 = sub_1BBB0AA4C(v14, v16);
      }
      int32x4_t v44 = sub_1BBB0AABC(v37);
    }
    uint64_t v16 = a1;
    uint64_t v15 = v47;
    uint64_t v14 = v37;
    int v29 = a12;
    goto LABEL_48;
  }
  int32x4_t v44 = 0;
  int v32 = v15 != 0;
  *(void *)&v415[0] = v15;
LABEL_48:
  unsigned int v407 = v44;
  unsigned int v367 = v20;
  int v355 = a7;
  unsigned int v356 = v21;
  uint64_t v370 = v22;
  if (!a11 || v29)
  {
    int v63 = v409;
    if (v32) {
      goto LABEL_97;
    }
    goto LABEL_69;
  }
  int v52 = *((unsigned __int8 *)v18 + 266);
  BOOL v53 = v32 < 2;
  if (!v32)
  {
    unsigned int v56 = 0;
    int v63 = v409;
    goto LABEL_91;
  }
  int v391 = *((unsigned __int8 *)v18 + 266);
  uint64_t v394 = v14;
  int v396 = a5;
  uint64_t v54 = v15;
  unsigned int v55 = v18;
  unsigned int v56 = 0;
  uint64_t v57 = v16 + 19320;
  int v58 = (uint64_t *)v415;
  unsigned int v372 = v32;
  uint64_t v59 = v32;
  do
  {
    uint64_t v60 = *v58;
    double v61 = sub_1BBB158E8(v57, *v58 + 19320) + -1.0;
    if (v61 <= 0.0) {
      double v61 = -v61;
    }
    if (*(unsigned char *)(v60 + 14)) {
      goto LABEL_55;
    }
    BOOL v62 = v61 >= 0.001 || v60 == v54;
    if (!v62) {
      BOOL v53 = 1;
    }
    if (v60 == v54)
    {
LABEL_55:
      uint64_t v16 = a1;
LABEL_56:
      *((void *)v415 + v56++) = v60;
      goto LABEL_57;
    }
    uint64_t v16 = a1;
    if (*(_DWORD *)(v60 + 19352) == *((_DWORD *)v55 + 60) && v61 < 0.005) {
      goto LABEL_56;
    }
LABEL_57:
    ++v58;
    --v59;
  }
  while (v59);
  int v63 = v409;
  int v18 = v55;
  if (v56 >= v372)
  {
    unsigned int v21 = v356;
    uint64_t v15 = v54;
    a5 = v396;
LABEL_89:
    uint64_t v14 = v394;
    goto LABEL_90;
  }
  unsigned int v21 = v356;
  a5 = v396;
  if (!v56)
  {
    uint64_t v15 = 0;
    goto LABEL_89;
  }
  unsigned int v68 = 0;
  uint64_t v15 = 0;
  uint64_t v69 = (uint64_t *)v415;
  uint64_t v70 = v56;
  uint64_t v14 = v394;
  do
  {
    uint64_t v71 = *v69;
    if (*v69)
    {
      uint64_t v72 = v15;
      if (!*(unsigned char *)(v71 + 14))
      {
        unsigned int v73 = *(_DWORD *)(v71 + 1276);
        if (v73 >= v68 && v73 < *(_DWORD *)(a1 + 1276))
        {
          uint64_t v72 = *v69;
          unsigned int v68 = *(_DWORD *)(v71 + 1276);
        }
      }
      uint64_t v15 = v72;
    }
    ++v69;
    --v70;
  }
  while (v70);
LABEL_90:
  int v52 = v391;
LABEL_91:
  if (!v53 || v52 != 0) {
    int v63 = 1;
  }
  int v32 = v56;
  a7 = v355;
  int v29 = a12;
  if (!v32)
  {
LABEL_69:
    if (v21)
    {
      unsigned int v64 = 0;
      for (int i = 0; i != v21; ++i)
      {
        unsigned int v66 = v64;
        uint64_t v67 = v20;
        if (v20)
        {
          do
          {
            *(_WORD *)(v22 + 216 * v66++ + 56) = 4096;
            --v67;
          }
          while (v67);
        }
        v64 += v20;
      }
    }
    return;
  }
LABEL_97:
  uint64_t v395 = v15;
  for (uint64_t j = 0; j != v32; v412[j++] = v77)
  {
    int v76 = *(unsigned __int16 *)(*((void *)v415 + j) + 19112);
    if (*(unsigned __int16 *)(*((void *)v415 + j) + 19116) == v76
      && *(unsigned __int16 *)(*((void *)v415 + j) + 19118) == *(unsigned __int16 *)(*((void *)v415 + j) + 19114))
    {
      BOOL v77 = 0;
    }
    else
    {
      BOOL v77 = v76 != *(unsigned __int16 *)(*((void *)v415 + j) + 19120)
         || *(unsigned __int16 *)(*((void *)v415 + j) + 19114) != *(unsigned __int16 *)(*((void *)v415 + j)
                                                                                          + 19122);
    }
  }
  if ((v404 + 15) >> 4 >= v20) {
    unsigned int v78 = v20;
  }
  else {
    unsigned int v78 = (v404 + 15) >> 4;
  }
  if ((v401 + 15) >> 4 >= v21) {
    unsigned int v79 = v21;
  }
  else {
    unsigned int v79 = (v401 + 15) >> 4;
  }
  unsigned int v349 = v79;
  unsigned int v350 = v78;
  unsigned int v351 = (v401 + 15) >> 4;
  unsigned int v352 = (v404 + 15) >> 4;
  if (!v29 && v32 > a9)
  {
    if (v32 < 1)
    {
      int v82 = 0;
      LODWORD(v85) = 0;
    }
    else
    {
      uint64_t v80 = 0;
      unsigned int v81 = 0;
      int v82 = 0;
      char v83 = 1;
      do
      {
        char v84 = v83 | (v81 < *(_DWORD *)(*((void *)v415 + v80) + 1276));
        char v83 = 0;
        if (v84)
        {
          int v82 = v80;
          unsigned int v81 = *(_DWORD *)(*((void *)v415 + v80) + 1276);
        }
        ++v80;
      }
      while (v32 != v80);
      uint64_t v85 = *(void *)&v415[0];
      *(void *)&v415[0] = *((void *)v415 + v82);
      *((void *)v415 + v82) = v85;
      LODWORD(v85) = 1;
    }
    if (v85 >= a9) {
      goto LABEL_139;
    }
    uint64_t v86 = v85;
    uint64_t v85 = v32 <= (uint64_t)v85 ? v85 : v32;
    while (2)
    {
      if (v86 == v85)
      {
LABEL_139:
        if ((int)v85 < a9)
        {
          unsigned int v94 = (char *)v415 + 8 * v85;
          uint64_t v85 = v85;
          do
          {
            if (v32 <= (int)v85) {
              break;
            }
            unsigned int v95 = 0;
            char v96 = 1;
            int v97 = (uint64_t *)v94;
            int v98 = v85;
            do
            {
              uint64_t v99 = *v97++;
              unsigned int v100 = *(_DWORD *)(v99 + 1276);
              char v101 = v96 | (v100 > v95);
              char v96 = 0;
              if (v101)
              {
                int v82 = v98;
                unsigned int v95 = v100;
              }
              ++v98;
            }
            while (v32 > v98);
            uint64_t v102 = *((void *)v415 + v85);
            *((void *)v415 + v85) = *((void *)v415 + v82);
            *((void *)v415 + v82) = v102;
            ++v85;
            v94 += 8;
          }
          while ((int)v85 < a9);
        }
      }
      else
      {
        unsigned int v87 = 0;
        char v88 = 1;
        uint64_t v89 = v86;
        do
        {
          while (1)
          {
            uint64_t v90 = *((void *)v415 + v89);
            if (!*(unsigned char *)(v90 + 25) || !*(unsigned char *)(v90 + 1356)) {
              break;
            }
            unsigned int v91 = *(_DWORD *)(v90 + 1276);
            char v92 = v88 | (v91 > v87);
            char v88 = 0;
            if (v92)
            {
              int v82 = v89;
              unsigned int v87 = v91;
            }
            if (++v89 >= v32) {
              goto LABEL_135;
            }
          }
          ++v89;
        }
        while (v89 < v32);
        if (v88)
        {
          LODWORD(v85) = v86;
          goto LABEL_139;
        }
LABEL_135:
        uint64_t v93 = *((void *)v415 + v86);
        *((void *)v415 + v86) = *((void *)v415 + v82);
        *((void *)v415 + v82) = v93;
        if (++v86 != a9) {
          continue;
        }
        LODWORD(v85) = a9;
      }
      break;
    }
    if ((int)v85 < v32)
    {
      uint64_t v103 = 0;
      do
        *(unsigned char *)(*((void *)v415 + v85 + v103++) + 32) = 0;
      while (v32 > (int)v85 + (int)v103);
    }
    int v32 = v85;
  }
  int v104 = v32;
  if (v14)
  {
    int v104 = v32;
    if (a7)
    {
      int v104 = sub_1BBB0A7C0(v14);
      uint64_t v16 = a1;
    }
  }
  if (v32)
  {
    uint64_t v105 = 0;
    int v106 = 1 << v361[112];
    do
    {
      uint64_t v107 = *((void *)v415 + v105);
      v414[v105] = 0;
      v413[v105] = 0;
      v414[v105 + 48] = 0;
      v414[v105 + 32] = v106;
      v414[v105 + 16] = 0;
      if (v107)
      {
        LOBYTE(v108) = v105;
        if (a7)
        {
          LOBYTE(v108) = v105;
          if (v104)
          {
            uint64_t v109 = 0;
            uint64_t v108 = 0;
            int v110 = *(_DWORD *)(v107 + 1276);
            while (v110 != *(_DWORD *)(v16 + (v109 >> 54) + 18468))
            {
              ++v108;
              v109 += 0x100000000000000;
              if (v104 == v108)
              {
                LOBYTE(v108) = v105;
                break;
              }
            }
          }
        }
        if (a5 && *(unsigned char *)(v16 + 3 * (char)v108 + 5026))
        {
          v414[v105 + 48] = 1;
          uint64_t v111 = v16 + 6 * (char)v108;
          v414[v105 + 32] = *(__int16 *)(v111 + 5410);
          v414[v105 + 16] = *(__int16 *)(v111 + 5794);
        }
      }
      ++v105;
    }
    while (v105 != v32);
  }
  int v373 = v32;
  uint64_t v353 = v18;
  if (!v63)
  {
    uint64_t v159 = v370;
    if (v354 > v362)
    {
      unsigned int v364 = 0;
      unsigned int v160 = 0;
      goto LABEL_399;
    }
    unsigned int v160 = 0;
    unsigned int v364 = 0;
    int v366 = ~v20;
    unint64_t v380 = (v20 - 1);
    int32x4_t v199 = 0uLL;
    v200.i64[0] = 0xFF000000FFLL;
    v200.i64[1] = 0xFF000000FFLL;
    unsigned int v411 = v354;
    uint64_t v201 = v395;
    int v202 = a6;
    while (1)
    {
      unint64_t v203 = v359;
      if (v359 <= v371) {
        break;
      }
LABEL_354:
      BOOL v62 = v411++ == v362;
      if (v62) {
        goto LABEL_400;
      }
    }
    int v369 = v411 * v367;
    int v204 = 16 * v411;
LABEL_286:
    int v205 = v369 + v203;
    if (!v32)
    {
      unsigned int v160 = 0;
      unsigned int v393 = 0;
      int v403 = 0;
      LODWORD(v211) = -1;
      LODWORD(v217) = -1;
      unsigned int v209 = -1;
      if (!v202) {
        goto LABEL_339;
      }
LABEL_327:
      ++v414[v160];
      unsigned int v238 = (unsigned char *)*((void *)v415 + v160);
      if (v407)
      {
        int v239 = v369 + v203;
        if (v238 == v407)
        {
          unsigned int v238 = v407;
        }
        else
        {
          BOOL v240 = v209 > ((v217 >> 1) & 0x3FFFFFFF) && v209 > 0x200;
          unsigned int v241 = v364;
          if (v240) {
            unsigned int v242 = v364 + 1;
          }
          else {
            unsigned int v242 = v364;
          }
          if (*((unsigned char **)v415 + v393) != v407) {
            unsigned int v241 = v242;
          }
          unsigned int v364 = v241;
        }
      }
      else
      {
        int v239 = v369 + v203;
      }
      uint64_t v159 = v370;
      if (v238[1356]) {
        BOOL v243 = v238[14] == 0;
      }
      else {
        BOOL v243 = 0;
      }
      uint64_t v244 = v370 + 216 * v239;
      *(unsigned char *)(v244 + 67) = v243;
      unsigned int v245 = (unsigned char *)(v244 + 69);
      if (v211 > 0x2FF)
      {
        *unsigned int v245 = 0;
        int v249 = *((_DWORD *)v238 + 319);
        int v247 = *(_DWORD *)(v201 + 1276);
        int v202 = a6;
        if (v249 != v247)
        {
LABEL_351:
          uint64_t v251 = v370 + 216 * v239;
          *(_DWORD *)(v251 + 52) = v247;
          *(unsigned char *)(v251 + 66) = 2;
          goto LABEL_352;
        }
      }
      else
      {
        *unsigned int v245 = 1;
        int v246 = *((_DWORD *)v238 + 319);
        int v247 = *(_DWORD *)(v201 + 1276);
        int v202 = a6;
        if (v246 != v247)
        {
          if (3 * v403 > (4 * v211))
          {
            uint64_t v248 = v370 + 216 * v239;
            *(_DWORD *)(v248 + 52) = 0;
            *(unsigned char *)(v248 + 66) = 1;
            goto LABEL_352;
          }
          goto LABEL_351;
        }
      }
      uint64_t v250 = v370 + 216 * v239;
      *(unsigned char *)(v250 + 66) = 1;
      *(_DWORD *)(v250 + 52) = 0;
      goto LABEL_352;
    }
    uint64_t v206 = 0;
    int v403 = 0;
    unsigned int v393 = 0;
    unsigned int v160 = 0;
    uint64_t v207 = 16 * v203;
    uint64_t v208 = v159 + 216 * v205;
    int v399 = (_WORD *)(v208 + 56);
    int v385 = (_DWORD *)(v208 - 168);
    uint64_t v378 = (_DWORD *)(v159 + 216 * (v205 + v366) + 48);
    int v382 = (_DWORD *)(v159 + 216 * (v205 - v367) + 48);
    uint64_t v376 = (_DWORD *)(v159 + 216 * (v205 - v367 + 1) + 48);
    int v387 = (_DWORD *)(v208 + 48);
    float v390 = (_DWORD *)(v208 + 52);
    unsigned int v209 = -1;
    uint64_t v210 = 0xFFFFFFFFLL;
    uint64_t v211 = 0xFFFFFFFFLL;
    while (1)
    {
      uint64_t v212 = *((void *)v415 + v206);
      uint64_t v213 = *(int *)(v16 + 232);
      uint64_t v214 = *(int *)(v212 + 232);
      signed int v215 = (uint8x16_t *)(*(void *)(v16 + 128) + v207 + (v213 * v204));
      uint64_t v216 = (uint8x8_t *)(*(void *)(v212 + 128) + v207 + (v214 * v204));
      if (v414[v206 + 48])
      {
        LODWORD(v217) = 0;
        unsigned int v218 = (const float *)&v414[v206 + 32];
        unsigned int v219 = (const float *)&v414[v206 + 16];
        int32x4_t v220 = (int32x4_t)vld1q_dup_f32(v218);
        int32x4_t v221 = (int32x4_t)vld1q_dup_f32(v219);
        int v222 = 16;
        do
        {
          uint16x8_t v223 = vmovl_high_u8(*v215);
          uint16x8_t v224 = vmovl_u8(*(uint8x8_t *)v215->i8);
          int32x4_t v225 = (int32x4_t)vmovl_u8(*v216);
          uint16x8_t v226 = vmovl_high_u8(*(uint8x16_t *)v216->i8);
          v227.i64[0] = 0x2000000020;
          v227.i64[1] = 0x2000000020;
          int32x4_t v228 = vmlaq_s32(v227, v220, (int32x4_t)vmovl_high_u16((uint16x8_t)v225));
          v229.i64[0] = 0x2000000020;
          v229.i64[1] = 0x2000000020;
          int32x4_t v230 = vmlaq_s32(v229, v220, (int32x4_t)vmovl_u16(*(uint16x4_t *)v225.i8));
          v225.i64[0] = 0x2000000020;
          v225.i64[1] = 0x2000000020;
          v231.i64[0] = 0x2000000020;
          v231.i64[1] = 0x2000000020;
          uint64_t v217 = vaddvq_s32(vaddq_s32((int32x4_t)vabaq_u32(vabaq_u32((uint32x4_t)v217, (uint32x4_t)vmaxq_s32(vminq_s32(vsraq_n_s32(v221, v230, 6uLL), v200), v199), vmovl_u16(*(uint16x4_t *)v224.i8)), (uint32x4_t)vmaxq_s32(vminq_s32(vsraq_n_s32(v221, vmlaq_s32(v231, v220, (int32x4_t)vmovl_u16(*(uint16x4_t *)v226.i8)), 6uLL), v200), v199),
                                                vmovl_u16(*(uint16x4_t *)v223.i8)),
                                   (int32x4_t)vabaq_u32(vabdq_u32((uint32x4_t)vmaxq_s32(vminq_s32(vsraq_n_s32(v221, v228, 6uLL), v200), v199), vmovl_high_u16(v224)), (uint32x4_t)vmaxq_s32(vminq_s32(vsraq_n_s32(v221, vmlaq_s32(v225, v220, (int32x4_t)vmovl_high_u16(v226)), 6uLL), v200), v199), vmovl_high_u16(v223))));
          signed int v215 = (uint8x16_t *)((char *)v215 + v213);
          uint64_t v216 = (uint8x8_t *)((char *)v216 + v214);
          --v222;
        }
        while (v222);
      }
      else
      {
        uint64_t v217 = off_1E9F83198(*(void *)(v16 + 128) + v207 + (v213 * v204));
        v200.i64[0] = 0xFF000000FFLL;
        v200.i64[1] = 0xFF000000FFLL;
        int32x4_t v199 = 0uLL;
        int v202 = a6;
        uint64_t v201 = v395;
        uint64_t v16 = a1;
      }
      if (v212 == v201)
      {
        *int v399 = v217;
        uint64_t v217 = v217 - (v217 >> 2);
        int v403 = v217;
        if (!v202) {
          goto LABEL_324;
        }
      }
      else if (!v202)
      {
        goto LABEL_324;
      }
      if (v411 | v203)
      {
        int v232 = *(_DWORD *)(v212 + 1276);
        if (v203)
        {
          if (v411) {
            BOOL v233 = v232 != *v378;
          }
          else {
            BOOL v233 = 1;
          }
          int v234 = v233 + (v232 != *v385);
        }
        else
        {
          int v234 = 2;
        }
        if (v411)
        {
          if (v232 != *v382) {
            ++v234;
          }
          BOOL v235 = v203 >= v380 || v232 != *v376;
          int v236 = v234 + v235;
        }
        else
        {
          int v236 = v234 + 2;
        }
        if (v236 == 4) {
          unsigned int v237 = v217 >> 1;
        }
        else {
          unsigned int v237 = 0;
        }
        uint64_t v217 = v237 + v217;
      }
      if ((unsigned char *)v212 == v407) {
        unsigned int v209 = v217;
      }
      if (v217 < v211) {
        break;
      }
      if (v217 >= v210) {
        goto LABEL_324;
      }
      *float v390 = *(_DWORD *)(v212 + 1276);
      unsigned int v393 = v206;
LABEL_325:
      ++v206;
      uint64_t v210 = v217;
      if (v206 == v32)
      {
        if (v202) {
          goto LABEL_327;
        }
LABEL_339:
        uint64_t v159 = v370;
LABEL_352:
        BOOL v62 = v203++ == v371;
        if (v62) {
          goto LABEL_354;
        }
        goto LABEL_286;
      }
    }
    if (v211 < v210)
    {
      *float v390 = *(_DWORD *)(*((void *)v415 + v160) + 1276);
      uint64_t v210 = v211;
      unsigned int v393 = v160;
    }
    *int v387 = *(_DWORD *)(v212 + 1276);
    unsigned int v160 = v206;
    uint64_t v211 = v217;
LABEL_324:
    uint64_t v217 = v210;
    goto LABEL_325;
  }
  unsigned int v112 = *((unsigned __int8 *)v18 + 26);
  uint64_t v113 = *((unsigned __int8 *)v18 + 25);
  unsigned int v114 = *((unsigned __int8 *)v18 + 27);
  uint64_t v392 = *(void *)(v16 + 4920);
  unsigned int v410 = *(_DWORD *)(v16 + 4800);
  uint64_t v379 = *((unsigned __int8 *)v18 + 24);
  int v115 = v113 - v379 + ((v114 - v112 - (v113 - v379)) & ((int)(v114 - v112 - (v113 - v379)) >> 31)) + 3;
  int v116 = v115 >> 2;
  if ((v115 >> 2) >= 4) {
    int v116 = 4;
  }
  if (v115 < 4) {
    unsigned int v117 = 1;
  }
  else {
    unsigned int v117 = v116;
  }
  bzero(*(void **)(v16 + 4616), *(unsigned int *)(v16 + 4564));
  unsigned int v118 = v112 + (v117 >> 1);
  unsigned int v119 = v118 + v117;
  unsigned int v377 = v114;
  if (v118 + v117 - 1 <= v114)
  {
    unsigned int v120 = 0;
    int v121 = (v117 >> 1) + v379;
    do
    {
      unsigned int v122 = v118;
      unsigned int v118 = v119;
      if (v121 + v117 - 1 <= v113)
      {
        unsigned int v123 = (v117 >> 1) + v379;
        unsigned int v124 = v121 + v117;
        do
        {
          if (v122 < v118)
          {
            unsigned int v125 = 0;
            unsigned int v126 = v122;
            do
            {
              if (v123 < v124)
              {
                unsigned int v128 = v123 + v126 * *(unsigned __int16 *)(a1 + 4562);
                unsigned int v129 = v117;
                do
                {
                  uint64_t v127 = *(void *)(a1 + 4696);
                  if (v125 <= *(unsigned __int16 *)(v127 + 2 * v128))
                  {
                    unsigned int v125 = *(unsigned __int16 *)(v127 + 2 * v128);
                    unsigned int v120 = v128;
                  }
                  ++v128;
                  --v129;
                }
                while (v129);
              }
              ++v126;
            }
            while (v126 != v118);
          }
          *(unsigned char *)(*(void *)(a1 + 4616) + v120) = 1;
          v124 += v117;
          v123 += v117;
        }
        while (v124 - 1 <= v113);
      }
      unsigned int v119 = v118 + v117;
    }
    while (v118 + v117 - 1 <= v114);
  }
  *(_DWORD *)(a1 + 4600) = 0;
  unint64_t v130 = *(unsigned int *)(a1 + 4564);
  uint64_t v131 = v395;
  unsigned int v132 = v410;
  if (v130)
  {
    for (unint64_t k = 0; k < v130; ++k)
    {
      if (*(unsigned char *)(*(void *)(a1 + 4616) + k))
      {
        uint64_t v134 = *(void *)(a1 + 4608);
        uint64_t v135 = *(unsigned int *)(a1 + 4600);
        *(_DWORD *)(a1 + 4600) = v135 + 1;
        *(_DWORD *)(v134 + 4 * v135) = k;
        unint64_t v130 = *(unsigned int *)(a1 + 4564);
      }
    }
  }
  uint64_t v375 = v113;
  unsigned int v363 = v112;
  if (v32 < 1)
  {
    int v138 = -1;
    int v137 = -1;
LABEL_222:
    unsigned __int8 v161 = v373;
    if (v373 >= 3) {
      unsigned __int8 v162 = 3;
    }
    else {
      unsigned __int8 v162 = v373;
    }
    unsigned int v406 = v162;
    if (v162 && v373)
    {
      uint64_t v163 = 0;
      unsigned __int8 v164 = 0;
      unsigned int v165 = ~(-1 << v373);
      uint64_t v402 = 4 * v373;
      BOOL v398 = v137 >= 0 && v138 == -1 || v138 >= 0;
      if (v137 >= 0 && v138 == -1) {
        uint64_t v166 = v137;
      }
      else {
        uint64_t v166 = v138;
      }
      uint64_t v389 = v166;
      if (v137 >= 0 && v138 == -1) {
        char v167 = 3;
      }
      else {
        char v167 = 2;
      }
      char v386 = v167;
      if (v137 >= 0 && v138 == -1) {
        int v168 = 4;
      }
      else {
        int v168 = 2;
      }
      int v384 = v168;
      uint64_t v169 = v392 + 72;
      uint64_t v170 = 1;
      do
      {
        uint64_t v171 = v169;
        unsigned __int8 v172 = v164;
        uint64_t v173 = v170;
        bzero(v414, v402);
        uint64_t v174 = v163;
        int v175 = *(_DWORD *)(a1 + 4600);
        if (v163 == 0 && v398) {
          v414[v389] = (v175 + v384) >> v386;
        }
        uint64_t v169 = v171;
        if (v175)
        {
          unint64_t v176 = 0;
          do
          {
            unsigned int v177 = *(_DWORD *)(*(void *)(a1 + 4608) + 4 * v176);
            *(unsigned char *)(v392 + 216 * v177 + 200) = v373;
            if ((_BYTE)v373)
            {
              uint64_t v178 = 0;
              int v179 = 0;
              uint32x2_t v180 = (unsigned char *)(v392 + 216 * v177 + 201);
              uint64_t v181 = v169 + 216 * v177;
              unsigned int v182 = -1;
              do
              {
                if (v182 >= *(_DWORD *)(v181 + 4 * v178) && ((v165 >> v178) & 1) != 0)
                {
                  *uint32x2_t v180 = v178;
                  unsigned int v182 = *(_DWORD *)(v181 + 4 * v178);
                  int v179 = 1;
                }
                ++v178;
              }
              while (v373 != v178);
              if (v179) {
                ++v414[*v180];
              }
            }
            ++v176;
            unint64_t v183 = *(unsigned int *)(a1 + 4600);
          }
          while (v176 < v183);
        }
        else
        {
          LODWORD(v183) = 0;
        }
        if (v373 < 1)
        {
          int v186 = 0;
        }
        else
        {
          uint64_t v184 = 0;
          unsigned int v185 = 0;
          int v186 = 0;
          do
          {
            unsigned int v187 = v414[v184];
            if (v187 == v185 && v137 == v184)
            {
              int v186 = v184;
              unsigned int v188 = v414[v184];
            }
            else
            {
              unsigned int v188 = v185;
            }
            if (v187 <= v185)
            {
              unsigned int v185 = v188;
            }
            else
            {
              int v186 = v184;
              unsigned int v185 = v414[v184];
            }
            ++v184;
          }
          while (v373 != v184);
        }
        *((unsigned char *)v430 + v163) = v186;
        v165 &= ~(1 << v186);
        if (v412[v186]) {
          unsigned __int8 v164 = v172 + 1;
        }
        else {
          unsigned __int8 v164 = v172;
        }
        if (a8 == v164 && v373 >= 1)
        {
          uint64_t v190 = 0;
          do
          {
            if (v412[v190]) {
              int v191 = ~(1 << v190);
            }
            else {
              int v191 = -1;
            }
            v165 &= v191;
            ++v190;
          }
          while (v373 != v190);
        }
        ++v163;
        if (v406 <= (int)v174 + 1) {
          break;
        }
        uint64_t v170 = v173 + 1;
      }
      while (v165);
      uint64_t v192 = v174;
      unsigned int v193 = LOBYTE(v430[0]);
      bzero(v414, v402);
      if ((_BYTE)v163)
      {
        unsigned int v194 = 0;
        int v195 = v430;
        uint64_t v16 = a1;
        unsigned __int8 v161 = v373;
        uint64_t v196 = v392;
        uint64_t v197 = v192;
        do
        {
          int v198 = *(unsigned __int8 *)v195;
          int v195 = (uint64_t *)((char *)v195 + 1);
          v194 |= 1 << v198;
          v414[v198] = v173;
          --v197;
          --v173;
        }
        while (v197 != -1);
        if (!v183) {
          goto LABEL_367;
        }
        goto LABEL_359;
      }
      unsigned int v194 = 0;
      uint64_t v16 = a1;
      unsigned __int8 v161 = v373;
    }
    else
    {
      bzero(v414, 4 * v373);
      unsigned int v193 = 0;
      unsigned int v194 = 0;
      uint64_t v16 = a1;
      LODWORD(v183) = *(_DWORD *)(a1 + 4600);
    }
    uint64_t v196 = v392;
    if (!v183)
    {
LABEL_367:
      unsigned int v258 = v363;
      if (v363 > v377) {
        goto LABEL_398;
      }
      while (v379 > v375)
      {
LABEL_396:
        BOOL v62 = v258++ == v377;
        if (v62) {
          goto LABEL_398;
        }
      }
      uint64_t v259 = *((void *)v415 + v193);
      uint64_t v260 = v379;
      while (1)
      {
        uint64_t v261 = *(unsigned int *)(a1 + 4600);
        if (v261)
        {
          unsigned int v262 = 0;
          unsigned int v263 = 0;
          long long v264 = *(unsigned int **)(a1 + 4608);
          unsigned int v265 = -1;
          unsigned int v266 = -1;
          do
          {
            unsigned int v268 = *v264++;
            unsigned int v267 = v268;
            int v269 = v268 / v410;
            int v270 = v268 / v410 * v410 - v268 + v260;
            if (v270 < 0) {
              int v270 = -v270;
            }
            int v271 = v258 - v269;
            if (v271 < 0) {
              int v271 = -v271;
            }
            unsigned int v272 = v271 + v270;
            BOOL v273 = v265 > v272;
            if (v265 >= v272) {
              unsigned int v265 = v272;
            }
            if (v273) {
              unsigned int v262 = v267;
            }
            BOOL v274 = v266 > v272;
            if (v266 <= v272)
            {
              unsigned int v267 = v263;
            }
            else
            {
              unsigned int v265 = v266;
              unsigned int v266 = v272;
            }
            if (v274) {
              unsigned int v262 = v263;
            }
            unsigned int v263 = v267;
            --v261;
          }
          while (v261);
        }
        else
        {
          unsigned int v267 = 0;
          unsigned int v262 = 0;
        }
        uint64_t v275 = *(unsigned __int8 *)(v196 + 216 * v267 + 201);
        uint64_t v276 = *(unsigned __int8 *)(v196 + 216 * v262 + 201);
        uint64_t v277 = (int)(v258 * v410 + v260);
        *(_DWORD *)(v196 + 216 * v277 + 48) = *(_DWORD *)(v259 + 1276);
        if (v193 != v275) {
          break;
        }
        __int16 v278 = (unsigned char *)(v196 + 216 * (int)v277 + 66);
        if (v193 != v276)
        {
          *__int16 v278 = 2;
          int v280 = *(_DWORD *)(*((void *)v415 + v276) + 1276);
          uint64_t v279 = v196 + 216 * (int)v277;
          goto LABEL_393;
        }
        *__int16 v278 = 1;
LABEL_394:
        BOOL v62 = v260++ == v375;
        if (v62) {
          goto LABEL_396;
        }
      }
      uint64_t v279 = v196 + 216 * (int)v277;
      *(unsigned char *)(v279 + 66) = 2;
      int v280 = *(_DWORD *)(*((void *)v415 + v275) + 1276);
LABEL_393:
      *(_DWORD *)(v279 + 52) = v280;
      goto LABEL_394;
    }
LABEL_359:
    unint64_t v252 = 0;
    do
    {
      unsigned int v253 = *(_DWORD *)(*(void *)(a1 + 4608) + 4 * v252);
      *(unsigned char *)(v196 + 216 * v253 + 200) = v161;
      if (v161)
      {
        uint64_t v254 = 0;
        unsigned __int16 v255 = (unsigned char *)(v196 + 216 * v253 + 201);
        uint64_t v256 = v196 + 72 + 216 * v253;
        unsigned int v257 = -1;
        do
        {
          if (v257 >= *(_DWORD *)(v256 + 4 * v254) && ((v194 >> v254) & 1) != 0)
          {
            *unsigned __int16 v255 = v254;
            unsigned int v257 = *(_DWORD *)(v256 + 4 * v254);
          }
          ++v254;
        }
        while (v161 != v254);
      }
      ++v252;
    }
    while (v252 < *(unsigned int *)(a1 + 4600));
    goto LABEL_367;
  }
  uint64_t v136 = 0;
  uint64_t v374 = v113 - v379 + 1;
  unsigned int v357 = v379 + v410 * v112;
  int v137 = -1;
  int v138 = -1;
  uint64_t v358 = v32;
  while (1)
  {
    uint64_t v139 = *((void *)v415 + v136);
    int v140 = *(unsigned __int8 *)(v139 + 14);
    if (v139 == v131) {
      int v137 = v136;
    }
    if (*(unsigned char *)(v139 + 14)) {
      int v138 = v136;
    }
    int v368 = v138;
    uint64_t v16 = a1;
    if (sub_1BBB12008(*(unsigned __int8 **)(v139 + 488))) {
      break;
    }
    int v365 = v137;
    *(_DWORD *)(*(void *)(v139 + 488) + 164) = 1;
    int v141 = v414[v136 + 32];
    uint64_t v397 = v136;
    int v142 = v414[v136 + 16];
    unsigned __int8 v143 = v361[112];
    v416[32] = v414[v136 + 48];
    v416[33] = 0;
    v416[34] = v141;
    v416[35] = 0;
    v416[36] = v142;
    v416[37] = 0;
    v416[38] = v143;
    char v418 = 0;
    if (v112 <= v377)
    {
      BOOL v145 = v139 == v395 || v140 != 0;
      BOOL v388 = v145;
      unsigned int v383 = v357;
      unsigned int v381 = v363;
      do
      {
        if (v379 <= v113)
        {
          int v405 = v381 * v132;
          unsigned int v146 = v383;
          uint64_t v147 = v374;
          int v148 = v379;
          do
          {
            if (*(unsigned char *)(*(void *)(a1 + 4616) + v146))
            {
              uint64_t v419 = v139;
              uint64_t v420 = 0;
              uint64_t v417 = 0x10000000040;
              int v425 = 0;
              int v149 = v146 / v132;
              int v150 = v405 + v148 - v146 / v132 * v410;
              uint64_t v151 = *(void *)(a1 + 4816);
              uint64_t v152 = v151 + 36 * v146;
              off_1E9F83248(v421, *(void *)(a1 + 128) + (16 * v150) + (16 * v149 * *(_DWORD *)(a1 + 232)));
              __int16 v423 = v150;
              unsigned int v132 = v410;
              __int16 v424 = v149;
              unsigned int v422 = v146;
              v421[32] = v421;
              int v426 = 0xFFFF;
              long long v427 = 0u;
              long long v428 = 0u;
              sub_1BBB5BA14((uint64_t)v416, (uint64_t)v430);
              sub_1BBB5BF08((uint64_t)v416, v430, v152);
              if (*(unsigned char *)(v152 + 32))
              {
                unsigned int v153 = *(unsigned __int8 *)(v152 + 32) - 4;
                uint64_t v154 = v151 + 36 * v146 + 8 * v153;
                int v155 = *(_DWORD *)(v152 + 4 * v153);
                unsigned int v156 = *(unsigned __int16 *)(v154 + 12);
                v429[v397] += v156;
                if (v388) {
                  unsigned int v156 = (7 * v156) >> 3;
                }
                uint64_t v157 = v392 + 216 * (int)v146;
                *(_DWORD *)(v157 + 4 * v397 + 72) = v156;
                uint64_t v158 = v157 + 2 * v397;
                *(_WORD *)(v158 + 136) = v155;
                *(_WORD *)(v158 + 168) = HIWORD(v155);
              }
            }
            ++v148;
            ++v146;
            --v147;
          }
          while (v147);
        }
        v383 += v132;
        BOOL v62 = v381++ == v377;
        LODWORD(v113) = v375;
      }
      while (!v62);
    }
    *(_DWORD *)(*(void *)(v139 + 488) + 164) = 0;
    uint64_t v131 = v395;
    uint64_t v136 = v397 + 1;
    unsigned int v112 = v363;
    int v137 = v365;
    int v138 = v368;
    if (v397 + 1 == v358) {
      goto LABEL_222;
    }
  }
LABEL_398:
  unsigned int v364 = 0;
  unsigned int v160 = 0;
  uint64_t v159 = v370;
LABEL_399:
  uint64_t v201 = v395;
  int v202 = a6;
LABEL_400:
  if (v202)
  {
    unsigned int v281 = a8;
    unsigned int v282 = v354;
    if (v201 && v354 <= v362)
    {
      uint64_t v283 = *(void *)(v395 + 4920);
      unint64_t v284 = v367 - 1;
      int v285 = v367 * v354;
      unsigned int v286 = v367 + v367 * v354;
      int v287 = v367 * (v354 - 1);
      while (1)
      {
        unint64_t v288 = v359;
        if (v359 <= v371) {
          break;
        }
LABEL_454:
        v285 += v367;
        v286 += v367;
        v287 += v367;
        BOOL v62 = v282++ == v362;
        if (v62) {
          goto LABEL_456;
        }
      }
      while (2)
      {
        if (*(unsigned char *)(v283 + 216 * (v285 + (int)v288) + 67))
        {
          if (v282)
          {
            if (v288) {
              int v289 = *(unsigned __int8 *)(v283 + 216 * (v287 + v288 - 1) + 69);
            }
            else {
              int v289 = 1;
            }
            if (v288 >= v284) {
              int v293 = 1;
            }
            else {
              int v293 = *(unsigned __int8 *)(v283 + 216 * (v287 + v288 + 1) + 69);
            }
            if (*(unsigned char *)(v283 + 216 * (v287 + v288) + 69)) {
              BOOL v294 = v293 == 0;
            }
            else {
              BOOL v294 = 1;
            }
            int v291 = v294 || v289 == 0;
            if (v288)
            {
LABEL_426:
              int v292 = *(unsigned __int8 *)(v283 + 216 * (v285 + (int)v288 - 1) + 69);
LABEL_427:
              if (v288 >= v284) {
                int v296 = 1;
              }
              else {
                int v296 = *(unsigned __int8 *)(v283 + 216 * (v285 + (int)v288 + 1) + 69);
              }
              if (v292) {
                BOOL v297 = v296 == 0;
              }
              else {
                BOOL v297 = 1;
              }
              if (v297) {
                int v291 = 1;
              }
              if (v282 < v356 - 1)
              {
                int v298 = v288 ? *(unsigned __int8 *)(v283 + 216 * (v286 + v288 - 1) + 69) : 1;
                int v299 = v288 >= v284 ? 1 : *(unsigned __int8 *)(v283 + 216 * (v286 + v288 + 1) + 69);
                BOOL v300 = !v298 || *(unsigned char *)(v283 + 216 * (v286 + v288) + 69) == 0;
                if (v300 || v299 == 0) {
                  int v291 = 1;
                }
              }
              BOOL v290 = v291 == 0;
LABEL_453:
              *(unsigned char *)(v159 + 216 * (v285 + v288++) + 68) = v290;
              if (v371 + 1 == v288) {
                goto LABEL_454;
              }
              continue;
            }
          }
          else
          {
            int v291 = 0;
            if (v288) {
              goto LABEL_426;
            }
          }
          int v292 = 1;
          goto LABEL_427;
        }
        break;
      }
      BOOL v290 = 1;
      goto LABEL_453;
    }
LABEL_456:
    if (v407)
    {
      int v302 = *((__int16 *)v407 + 10);
      if (v364 > (v356 * v367) >> 1)
      {
        __int16 v303 = 1;
        goto LABEL_461;
      }
      if (v302 >= 1)
      {
        __int16 v303 = -1;
LABEL_461:
        *((_WORD *)v407 + 10) = v302 + v303;
      }
    }
    BOOL v304 = v367 > v352 || v356 > v351;
    if (v304 && v356)
    {
      int v305 = 0;
      for (unsigned int m = 0; m != v356; ++m)
      {
        if (v367)
        {
          for (unsigned int n = 0; n != v367; ++n)
          {
            BOOL v308 = m >= v349 || n >= v350;
            char v309 = v308;
            *(unsigned char *)(v159 + 216 * (int)(v305 + n) + 70) = v309;
          }
        }
        v305 += v367;
      }
    }
    *(unsigned char *)(v16 + 16) = 1;
    if (v373)
    {
      unsigned int v310 = 0;
      int v311 = 0;
      unsigned int v312 = v412;
      int v313 = v414;
      unsigned int v314 = v415;
      uint64_t v315 = v373;
      do
      {
        if (!v355 || *(unsigned char *)(*(void *)v314 + 32))
        {
          if (*v313)
          {
            ++v311;
            if (*v312) {
              ++v310;
            }
          }
        }
        ++v312;
        ++v313;
        unsigned int v314 = (_OWORD *)((char *)v314 + 8);
        --v315;
      }
      while (v315);
      BOOL v308 = v310 >= a8;
      unsigned int v316 = v310 - a8;
      if (!v308) {
        unsigned int v316 = 0;
      }
      unsigned int v317 = v311 - v316;
      *(unsigned char *)(v16 + 22) = v317;
      int v318 = (unsigned char *)(v16 + 22);
      if (a12)
      {
        *int v318 = v373;
        int v319 = v414;
        int v320 = v415;
        uint64_t v321 = v373;
        do
        {
          if (*(unsigned char *)(*(void *)v320 + 14)) {
            int v322 = *(_DWORD *)(v395 + 1276);
          }
          else {
            int v322 = *(_DWORD *)(*(void *)v320 + 1276) + 1;
          }
          *v319++ = v322;
          int v320 = (_OWORD *)((char *)v320 + 8);
          --v321;
        }
        while (v321);
        unsigned int v281 = 255;
        unsigned int v317 = v373;
      }
      if (v317)
      {
        int v323 = 0;
        int v324 = 0;
        unsigned int v325 = 0;
        for (iint i = 0; ii != v317; ++ii)
        {
          uint64_t v327 = 0;
          unsigned int v328 = 0;
          uint64_t v329 = 0;
          do
          {
            if (v414[v327] > v328 && (v325 < v281 || !v412[v327]))
            {
              uint64_t v329 = v327;
              unsigned int v328 = v414[v327];
            }
            ++v327;
          }
          while (v373 != v327);
          if (v328)
          {
            v413[v329] = 1;
            uint64_t v330 = *((void *)v415 + v329);
            v414[v329] = 0;
            int v331 = v412[v329];
            *(unsigned char *)(v330 + 23) = ii;
            if (v331) {
              ++v325;
            }
            int v332 = *(_DWORD *)(v330 + 1276);
            if (!ii) {
              unsigned int v160 = *(_DWORD *)(v330 + 1276);
            }
            if (v332 == *((_DWORD *)v353 + 61)) {
              int v324 = 1;
            }
            if (v332 == *((_DWORD *)v353 + 62)) {
              int v323 = 1;
            }
          }
        }
      }
      else
      {
        int v324 = 0;
        int v323 = 0;
      }
    }
    else
    {
      unsigned int v317 = 0;
      int v324 = 0;
      int v323 = 0;
      *(unsigned char *)(v16 + 22) = 0;
      int v318 = (unsigned char *)(v16 + 22);
    }
    if (*((unsigned char *)v353 + 266) && !v324 && v323)
    {
      if (v373)
      {
        uint64_t v333 = 0;
        while (1)
        {
          uint64_t v334 = *((void *)v415 + v333);
          if (*(_DWORD *)(v334 + 1276) == *((_DWORD *)v353 + 61)) {
            break;
          }
          if (v373 == ++v333) {
            goto LABEL_524;
          }
        }
        v413[v333] = 1;
        *(unsigned char *)(v334 + 23) = v317++;
      }
      else
      {
LABEL_524:
        *((unsigned char *)v353 + 266) = 0;
      }
      *int v318 = v317;
    }
    if (v317 < v373)
    {
      uint64_t v335 = v356 * v367;
      if (v335)
      {
        for (juint64_t j = 0; jj != v335; ++jj)
        {
          uint64_t v337 = v159 + 216 * jj;
          int v338 = (unsigned char *)(v337 + 66);
          int v339 = (_DWORD *)(v337 + 52);
          uint64_t v340 = (unsigned int *)(v337 + 48);
          int v341 = v415;
          int v342 = v413;
          uint64_t v343 = v373;
          do
          {
            if (!*v342++)
            {
              if (*v338 <= 1u)
              {
                uint64_t v345 = *(void *)v341;
              }
              else
              {
                uint64_t v345 = *(void *)v341;
                if (*v339 == *(_DWORD *)(*(void *)v341 + 1276))
                {
                  *int v338 = 1;
                  *int v339 = 0;
                }
              }
              if (*v340 == *(_DWORD *)(v345 + 1276)) {
                *uint64_t v340 = v160;
              }
            }
            int v341 = (_OWORD *)((char *)v341 + 8);
            --v343;
          }
          while (v343);
        }
      }
    }
    if (*((unsigned char *)v353 + 266) == 1)
    {
      *((unsigned char *)v353 + 266) = 0;
      if (v373)
      {
        uint64_t v346 = v373;
        int v347 = v413;
        for (kunint64_t k = v415; !*(unsigned char *)(*(void *)kk + 14) || !*v347; kunint64_t k = (_OWORD *)((char *)kk + 8))
        {
          ++v347;
          if (!--v346) {
            return;
          }
        }
        *((unsigned char *)v353 + 266) = 1;
      }
    }
  }
}

uint64_t sub_1BBB5E8A0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  int v51 = result;
  int v52 = 4 * result;
  int v61 = a6;
  int v48 = 0;
  __int16 v49 = 0;
  char v50 = 6;
  uint64_t v10 = *(unsigned int *)(a8 + 18980);
  if (v10)
  {
    uint64_t v11 = 0;
    while (*(_DWORD *)(a8 + 18852 + 4 * v11) != *(_DWORD *)(a2 + 1276))
    {
      if (v10 == ++v11)
      {
        LOBYTE(v10) = 0;
        goto LABEL_7;
      }
    }
    int v53 = *(_DWORD *)(a8 + 4 * v11 + 18724);
    LOBYTE(v10) = 1;
  }
LABEL_7:
  char v54 = v10;
  unsigned int v12 = *(unsigned __int8 *)(a8 + 19138);
  if (a7) {
    int v13 = 1;
  }
  else {
    int v13 = 2;
  }
  int v43 = v13;
  unsigned int v38 = *(unsigned __int8 *)(a8 + 19138);
  unsigned int v36 = *(unsigned __int8 *)(a8 + 19139);
  if (v12 <= v36)
  {
    unsigned int v14 = *a9;
    unsigned int v42 = *(unsigned __int8 *)(a8 + 19137);
    int v35 = v13 * *a9;
    unsigned int v37 = *(unsigned __int8 *)(a8 + 19136);
    int v44 = *a9 * v12 - 2;
    int v45 = *a9 * v12;
    uint64_t v39 = a8;
    while (v37 > v42)
    {
LABEL_38:
      v45 += v35;
      v44 += v35;
      v38 += v43;
      if (v38 > v36) {
        return result;
      }
    }
    int v41 = v38 * v14;
    unsigned int v15 = v37;
    while (1)
    {
      unsigned int v16 = v45 + v15;
      unsigned int v17 = (v45 + v15) / v14;
      int v18 = v41 + v15 - v17 * v14;
      uint64_t v19 = *((void *)a9 + 2);
      off_1E9F83248(v57, *(void *)(a8 + 128) + 16 * v17 * *(_DWORD *)(a8 + 232) + (16 * v18));
      __int16 v59 = v41 + v15 - v17 * v14;
      __int16 v60 = v17;
      unsigned int v58 = v45 + v15;
      v57[32] = v57;
      int v22 = v44 + v15;
      int8x16_t v23 = 0uLL;
      int v62 = 0xFFFF;
      if ((int)(v44 + v15) < a4)
      {
        int v24 = a5;
      }
      else
      {
        int v24 = a5;
        if (v22 < a5) {
          v23.i64[0] = *((void *)a9 + 2) + 36 * v22;
        }
      }
      unsigned int v25 = *a9;
      int v26 = v16 - 2 * *a9;
      if (v26 >= a4 && v26 < v24) {
        v23.i64[1] = *((void *)a9 + 2) + 36 * v26;
      }
      int v27 = v26 + 2;
      int8x16_t v28 = 0uLL;
      if (v27 >= a4 && v27 < v24) {
        v28.i64[0] = *((void *)a9 + 2) + 36 * v27;
      }
      int v29 = v22 - 2 * v25;
      if (v29 >= a4 && v29 < v24) {
        v28.i64[1] = *((void *)a9 + 2) + 36 * v29;
      }
      v20.i32[0] = v17 * v14;
      v21.i32[0] = v45 + v15;
      int8x16_t v30 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v21, v20), 0);
      v31.i64[1] = v23.i64[1];
      v31.i64[0] = 0;
      int8x16_t v32 = vbslq_s8(v30, v31, v23);
      if (v14 > v16) {
        break;
      }
      if (v18 == v25 - 1) {
        goto LABEL_30;
      }
LABEL_31:
      if (v14 > v16 || v16 == v17 * v14) {
        unint64_t v34 = -1;
      }
      else {
        unint64_t v34 = 0;
      }
      int8x16_t v63 = v32;
      int8x16_t v64 = vbslq_s8((int8x16_t)vdupq_n_s64(v34), (int8x16_t)v28.u64[0], v28);
      sub_1BBB5BA14((uint64_t)v47, (uint64_t)v46);
      uint64_t result = sub_1BBB5BF08((uint64_t)v47, v46, v19 + 36 * v16);
      v15 += v43;
      a8 = v39;
      if (v15 > v42) {
        goto LABEL_38;
      }
    }
    v32.i64[1] = 0;
LABEL_30:
    v28.i64[0] = 0;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_1BBB5EC1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v8 = *(_DWORD *)(a4 + 8);
    uint64_t v9 = (unsigned __int8 *)(a3 + 19136);
    v15[0] = 0.0;
    LODWORD(v15[1]) = v8 >> 1;
    uint64_t v16 = a3;
    uint64_t v17 = a2;
    uint64_t v18 = 0;
    uint64_t v19 = 16;
    uint64_t v20 = a4;
    v21[0] = v8 >> 1;
    v21[1] = v8;
    uint64_t v22 = a3;
    uint64_t v23 = a2;
    uint64_t v24 = 0;
    uint64_t v25 = 16;
    uint64_t v26 = a4;
    v14[0] = sub_1BBB5ED8C;
    v14[1] = v15;
    void v14[2] = sub_1BBB5ED8C;
    int v14[3] = v21;
    int v10 = *(_DWORD *)(result + 32) + 1;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_1BBB217E4;
    block[3] = &unk_1E6248C08;
    int v12 = 2;
    int v13 = v10;
    block[4] = v14;
    dispatch_apply(v10, 0, block);
    return sub_1BBB15D18(a4, a5, *v9, v9[1], v9[2], v9[3], *(void *)(a3 + 4624), *(void *)(a3 + 4680), v9[28], a3 + 19168, v15);
  }
  return result;
}

uint64_t sub_1BBB5ED8C(uint64_t a1)
{
  return sub_1BBB5E8A0(*(unsigned int *)(a1 + 88), *(void *)(a1 + 72), *(void *)(a1 + 80), *(_DWORD *)a1, *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 92), 0, *(void *)(a1 + 8), *(unsigned int **)(a1 + 104));
}

double sub_1BBB5EDCC(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  int v5 = 0;
  unint64_t v6 = a3 + 8;
  unint64_t v7 = a3;
  uint64_t v8 = a1 + 16 * a3 + a4;
  unint64_t v9 = a3;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
      v5 += *(unsigned __int8 *)(v8 + i);
    ++v9;
    v8 += 16;
  }
  while (v9 < v6);
  int v11 = 0;
  int v13 = v5 + 32;
  BOOL v12 = v5 < -32;
  int v14 = v5 + 95;
  if (!v12) {
    int v14 = v13;
  }
  int v15 = v14 >> 6;
  uint64_t v16 = a1 + a4 + 16 * a3;
  do
  {
    for (uint64_t j = 0; j != 8; ++j)
      v11 += (*(unsigned __int8 *)(v16 + j) - v15) * (*(unsigned __int8 *)(v16 + j) - v15);
    ++v7;
    v16 += 16;
  }
  while (v7 < v6);
  *(float *)(a5 + 4 * a2 + 176) = (float)((v11 + 32) >> 6);
  double result = *(double *)(a5 + 216) + (double)v15;
  *(double *)(a5 + 216) = result;
  return result;
}

uint64_t sub_1BBB5EE84(uint64_t result, int a2, unsigned int a3, unsigned int a4, uint64_t a5, double a6, uint8x8_t a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v9 = a3;
  do
  {
    a7.i32[0] = *(_DWORD *)(result + 16 * a3 + a4 + v7);
    a7 = (uint8x8_t)vmovl_u8(a7).u64[0];
    int v8 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v8, (uint16x4_t)a7));
    v7 += 16;
  }
  while (v7 != 64);
  int v10 = 0;
  int v12 = v8 + 8;
  BOOL v11 = v8 < -8;
  int v13 = v8 + 23;
  if (!v11) {
    int v13 = v12;
  }
  int v14 = -(v13 >> 4);
  int v15 = (unsigned __int8 *)(result + a4 + 16 * a3);
  do
  {
    uint64_t v16 = v15;
    unint64_t v17 = a4 + 4 - (unint64_t)a4;
    do
    {
      unsigned int v18 = *v16++;
      uint64_t v19 = v18 + (uint64_t)v14;
      v10 += v19 * v19;
      ++*(_DWORD *)(a5 + 4 * v19 + 2500);
      --v17;
    }
    while (v17);
    ++v9;
    v15 += 16;
  }
  while (v9 != a3 + 4);
  *(_DWORD *)(a5 + 4 * a2 + 376) = (v10 + 8) >> 4;
  return result;
}

float sub_1BBB5EF40(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  int v5 = 0;
  unint64_t v6 = a3 + 8;
  unint64_t v7 = a3;
  uint64_t v8 = a1 + 16 * a3 + a4;
  unint64_t v9 = a3;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
      v5 += *(unsigned __int8 *)(v8 + i);
    ++v9;
    v8 += 16;
  }
  while (v9 < v6);
  int v11 = 0;
  int v13 = v5 + 32;
  BOOL v12 = v5 < -32;
  int v14 = v5 + 95;
  if (!v12) {
    int v14 = v13;
  }
  int v15 = -(v14 >> 6);
  uint64_t v16 = a1 + a4 + 16 * a3;
  do
  {
    for (uint64_t j = 0; j != 8; ++j)
      v11 += (v15 + *(unsigned __int8 *)(v16 + j)) * (v15 + *(unsigned __int8 *)(v16 + j));
    ++v7;
    v16 += 16;
  }
  while (v7 < v6);
  float result = (float)((v11 + 32) >> 6);
  *(float *)(a5 + 4 * a2 + 176) = result;
  return result;
}

uint64_t sub_1BBB5EFE8(uint64_t result, int a2, unsigned int a3, unsigned int a4, uint64_t a5, double a6, uint8x8_t a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v9 = a3;
  do
  {
    a7.i32[0] = *(_DWORD *)(result + 16 * a3 + a4 + v7);
    a7 = (uint8x8_t)vmovl_u8(a7).u64[0];
    int v8 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v8, (uint16x4_t)a7));
    v7 += 16;
  }
  while (v7 != 64);
  int v10 = 0;
  int v12 = v8 + 8;
  BOOL v11 = v8 < -8;
  int v13 = v8 + 23;
  if (!v11) {
    int v13 = v12;
  }
  int v14 = -(v13 >> 4);
  int v15 = (unsigned __int8 *)(result + a4 + 16 * a3);
  do
  {
    uint64_t v16 = v15;
    unint64_t v17 = a4 + 4 - (unint64_t)a4;
    do
    {
      unsigned int v18 = *v16++;
      uint64_t v19 = v18 + (uint64_t)v14;
      v10 += v19 * v19;
      ++*(_DWORD *)(a5 + 4 * v19 + 2564);
      --v17;
    }
    while (v17);
    ++v9;
    v15 += 16;
  }
  while (v9 != a3 + 4);
  *(_DWORD *)(a5 + 4 * a2 + 440) = (v10 + 8) >> 4;
  return result;
}

uint64_t sub_1BBB5F0A4(uint64_t a1)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned char **)(a1 + 40);
  int v2 = *(unsigned char **)(a1 + 48);
  int v4 = *(unsigned char **)(a1 + 2624);
  if (!v2[1])
  {
    char v9 = 0;
    goto LABEL_31;
  }
  int v5 = *(unsigned char **)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  BOOL v7 = v6 != 0;
  if (v2[4])
  {
    if (v5)
    {
      if (v5[224] == 34)
      {
        BOOL v8 = v5[208] != 34 && v5 != 0;
        if (!v6) {
          goto LABEL_9;
        }
LABEL_13:
        if (*(unsigned char *)(v6 + 224) == 34)
        {
          if (*(unsigned char *)(v6 + 208) == 34) {
            BOOL v7 = 0;
          }
        }
        else
        {
          BOOL v7 = 1;
        }
        goto LABEL_20;
      }
      BOOL v8 = 1;
      if (v6) {
        goto LABEL_13;
      }
    }
    else
    {
      BOOL v8 = 0;
      if (v6) {
        goto LABEL_13;
      }
    }
LABEL_9:
    BOOL v7 = 0;
LABEL_20:
    if ((*(unsigned char *)(a1 + 185) & (v5 != 0)) != 0 && *(unsigned char *)(a1 + 31) == 1 && v5[200] == 1 && v8)
    {
      uint64_t v10 = *(void *)(a1 + 168);
      BOOL v8 = *(unsigned char *)(v10 + 224) != 34 || *(unsigned __int8 *)(v10 + 208) != 34;
    }
    goto LABEL_27;
  }
  BOOL v8 = v5 != 0;
LABEL_27:
  uint64_t v11 = v8 | (2 * v7);
  uint64_t v12 = *(void *)(a1 + 216);
  uint64_t v13 = *(unsigned int *)(v12 + 248);
  uint64_t v14 = *(void *)(v12 + 136) + (16 * *(_DWORD *)a1) + (8 * *(_DWORD *)(a1 + 4) * v13);
  int v15 = (char)v3[55] + (char)v3[56];
  if (v15 >= 51) {
    int v16 = 51;
  }
  else {
    int v16 = (char)v3[55] + (char)v3[56];
  }
  char v17 = byte_1BBB8A5B4[v16 - (v15 & (v15 >> 31))];
  ((void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))*(&off_1E9F83318 + v2[289]))(v14, v13, &v69, v11);
  off_1E9F83388(v14, v13, &v69, 16, &v71, 8);
  BYTE1(v67) = (v17 / 6u) & 0x1F | (32 * (v17 % 6u));
  LOBYTE(v67) = *(unsigned char *)(a1 + 28);
  sub_1BBB584C4((unsigned __int8 *)&v67, *(unsigned __int8 *)(a1 + 29));
  *(_OWORD *)(*(void *)(a1 + 56) + 800) = v72[32];
  unsigned int v18 = *(_OWORD **)(a1 + 56);
  long long v19 = v72[16];
  long long v20 = v72[17];
  long long v21 = v72[19];
  v18[36] = v72[18];
  v18[37] = v21;
  v18[34] = v19;
  v18[35] = v20;
  long long v22 = v72[20];
  long long v23 = v72[21];
  long long v24 = v72[23];
  v18[40] = v72[22];
  v18[41] = v24;
  v18[38] = v22;
  v18[39] = v23;
  uint64_t v25 = *(_OWORD **)(a1 + 56);
  long long v26 = v72[24];
  long long v27 = v72[25];
  long long v28 = v72[27];
  v25[44] = v72[26];
  v25[45] = v28;
  v25[42] = v26;
  v25[43] = v27;
  long long v29 = v72[28];
  long long v30 = v72[29];
  long long v31 = v72[31];
  v25[48] = v72[30];
  v25[49] = v31;
  v25[46] = v29;
  v25[47] = v30;
  char v9 = v68;
  off_1E9F83380(v14, v13, &v69, v72, 8);
LABEL_31:
  v3[53] = v9;
  if (v3[2])
  {
    v3[52] = *v4;
    uint64_t v32 = *(void *)(a1 + 176);
    *(void *)(v32 + 208) = 0x1212121212121212;
    *(void *)(v32 + 216) = 0x1212121212121212;
    memset((void *)(*(void *)(a1 + 176) + 224), 34, 16);
  }
  else
  {
    if (v3[3])
    {
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v33 = *(void *)(a1 + 136);
      uint64_t v67 = *(void *)(a1 + 176) + 224;
      uint64_t v68 = 0;
      if (v34)
      {
        int v35 = *(unsigned __int8 *)(v34 + 284);
        uint64_t v36 = v34 + 224;
        uint64_t v37 = v34 + 208;
        if (v35) {
          uint64_t v37 = v36;
        }
        uint64_t v68 = v37;
      }
      if (v33)
      {
        if (*(unsigned char *)(v33 + 284)) {
          uint64_t v38 = v33 + 224;
        }
        else {
          uint64_t v38 = v33 + 208;
        }
        uint64_t v69 = v38;
      }
      else
      {
        uint64_t v69 = 0;
      }
      uint64_t v45 = 0;
      char v46 = 0;
      uint64_t v47 = 224;
      do
      {
        uint64_t v48 = *(void *)(a1 + 48);
        unsigned __int8 v49 = sub_1BBB5B3A4(v45, *(unsigned __int8 *)(v48 + 4), (uint64_t)&v67);
        unsigned int v50 = *(unsigned __int8 *)(*(void *)(a1 + 176) + v47);
        char v51 = v50 - (v49 <= v50);
        BOOL v52 = v49 == v50;
        if (v52) {
          char v53 = 0;
        }
        else {
          char v53 = v51;
        }
        uint64_t v54 = v48 + v45;
        *(unsigned char *)(v54 + 306) = v52;
        *(unsigned char *)(v54 + 326) = v53;
        v46 |= v4[v45++];
        v47 += 4;
      }
      while (v45 != 4);
    }
    else
    {
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      uint64_t v40 = *(void *)(a1 + 128);
      uint64_t v39 = *(void *)(a1 + 136);
      uint64_t v67 = *(void *)(a1 + 176) + 208;
      uint64_t v68 = 0;
      if (v40)
      {
        int v41 = *(unsigned __int8 *)(v40 + 284);
        uint64_t v42 = v40 + 224;
        uint64_t v43 = v40 + 208;
        if (v41) {
          uint64_t v43 = v42;
        }
        uint64_t v68 = v43;
      }
      if (v39)
      {
        if (*(unsigned char *)(v39 + 284)) {
          uint64_t v44 = v39 + 224;
        }
        else {
          uint64_t v44 = v39 + 208;
        }
        uint64_t v69 = v44;
      }
      else
      {
        uint64_t v69 = 0;
      }
      uint64_t v55 = 0;
      char v46 = 0;
      do
      {
        uint64_t v56 = *(void *)(a1 + 48);
        unsigned __int8 v57 = sub_1BBB5B420(v55, *(unsigned __int8 *)(v56 + 4), (uint64_t)&v67);
        unsigned int v58 = *(unsigned __int8 *)(*(void *)(a1 + 176) + v55 + 208);
        char v59 = v58 - (v57 <= v58);
        BOOL v60 = v57 == v58;
        if (v60) {
          char v61 = 0;
        }
        else {
          char v61 = v59;
        }
        uint64_t v62 = v56 + v55;
        *(unsigned char *)(v62 + 290) = v60;
        *(unsigned char *)(v62 + 310) = v61;
        v46 |= v4[v55++];
      }
      while (v55 != 16);
    }
    v3[52] = v46;
  }
  off_1E9F83380(*(void *)(*(void *)(a1 + 216) + 128)+ (16 * *(_DWORD *)a1)+ (16 * *(_DWORD *)(a1 + 4) * *(_DWORD *)(*(void *)(a1 + 216) + 232)), *(unsigned int *)(*(void *)(a1 + 216) + 232), v4 + 32, v4 + 800, 16);
  int8x16_t v63 = *(unsigned char **)(a1 + 40);
  char v64 = v63[2];
  if (v64)
  {
    char v65 = *(unsigned char *)(*(void *)(a1 + 48) + 288) + 4 * v63[53];
    if (v63[52] == 15) {
      char v64 = v65 + 13;
    }
    else {
      char v64 = v65 + 1;
    }
  }
  v63[2] = v64;
  uint64_t result = sub_1BBB10724(v3[1], v3[2], v3[3], v2 + 16);
  *(_DWORD *)(*(void *)(a1 + 48) + 8) = v2[31];
  return result;
}